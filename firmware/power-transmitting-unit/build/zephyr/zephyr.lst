
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	c0 46 00 20 0d e1 00 00 af 74 01 00 c5 e0 00 00     .F. .....t......
	while (ad->len > 1) {
  10:	c5 e0 00 00 c5 e0 00 00 c5 e0 00 00 00 00 00 00     ................
	...
			LOG_WRN("malformed advertising data %u / %u",
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  2c:	39 cc 00 00 c5 e0 00 00 00 00 00 00 e1 cb 00 00     9...............
		data.data_len = len - 1;
		data.data = ad->data;

		if (!func(&data, user_data)) {
  3c:	c5 e0 00 00                                         ....

00000040 <_irq_vector_table>:
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  40:	11 cd 00 00 e9 89 01 00 11 cd 00 00 11 cd 00 00     ................
			LOG_WRN("malformed advertising data %u / %u",
  50:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
  60:	b1 89 01 00 11 cd 00 00 11 cd 00 00 cf 89 01 00     ................
  70:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
  80:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
  90:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
  a0:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
  b0:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  c0:	11 cd 00 00 11 cd 00 00 11 cd 00 00 11 cd 00 00     ................
  d0:	11 cd 00 00 11 cd 00 00 11 cd 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f007 ffcc 	bl	8098 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop
     110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     112:	4c14      	ldr	r4, [pc, #80]	; (164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>)
     114:	7a20      	ldrb	r0, [r4, #8]
     116:	f88d 0001 	strb.w	r0, [sp, #1]
     11a:	79e0      	ldrb	r0, [r4, #7]
     11c:	f88d 0000 	strb.w	r0, [sp]
     120:	79a0      	ldrb	r0, [r4, #6]
     122:	f8ad 0004 	strh.w	r0, [sp, #4]
     126:	7960      	ldrb	r0, [r4, #5]
     128:	f8ad 0002 	strh.w	r0, [sp, #2]
     12c:	4668      	mov	r0, sp
     12e:	f003 f839 	bl	31a4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     132:	b108      	cbz	r0, 138 <__aeabi_idiv0+0x2c>
     134:	21ad      	movs	r1, #173	; 0xad
     136:	e010      	b.n	15a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x10>
     138:	68e0      	ldr	r0, [r4, #12]
     13a:	9002      	str	r0, [sp, #8]
     13c:	a802      	add	r0, sp, #8
     13e:	f003 f847 	bl	31d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     142:	b108      	cbz	r0, 148 <CONFIG_IDLE_STACK_SIZE+0x8>
     144:	21b1      	movs	r1, #177	; 0xb1
     146:	e008      	b.n	15a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x10>
     148:	4807      	ldr	r0, [pc, #28]	; (168 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1e>)
     14a:	6800      	ldr	r0, [r0, #0]
     14c:	9003      	str	r0, [sp, #12]
     14e:	a803      	add	r0, sp, #12
     150:	f009 fc24 	bl	999c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     154:	2800      	cmp	r0, #0
     156:	d003      	beq.n	160 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x16>
     158:	21b5      	movs	r1, #181	; 0xb5
     15a:	2003      	movs	r0, #3
     15c:	f000 f91a 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     160:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     162:	0000      	.short	0x0000
     164:	20000b18 	.word	0x20000b18
     168:	00000420 	.word	0x00000420
     16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     170:	4f16      	ldr	r7, [pc, #88]	; (1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>)
     172:	4604      	mov	r4, r0
     174:	4616      	mov	r6, r2
     176:	78f8      	ldrb	r0, [r7, #3]
     178:	460d      	mov	r5, r1
     17a:	b178      	cbz	r0, 19c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2f>
     17c:	7c28      	ldrb	r0, [r5, #16]
     17e:	b168      	cbz	r0, 19c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2f>
     180:	6820      	ldr	r0, [r4, #0]
     182:	2225      	movs	r2, #37	; 0x25
     184:	1cc0      	adds	r0, r0, #3
     186:	f020 0003 	bic.w	r0, r0, #3
     18a:	6020      	str	r0, [r4, #0]
     18c:	7c29      	ldrb	r1, [r5, #16]
     18e:	b106      	cbz	r6, 192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     190:	2000      	movs	r0, #0
     192:	f000 fcbf 	bl	b14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     196:	6821      	ldr	r1, [r4, #0]
     198:	4408      	add	r0, r1
     19a:	6020      	str	r0, [r4, #0]
     19c:	7d28      	ldrb	r0, [r5, #20]
     19e:	2800      	cmp	r0, #0
     1a0:	d012      	beq.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     1a2:	78f8      	ldrb	r0, [r7, #3]
     1a4:	2800      	cmp	r0, #0
     1a6:	d00f      	beq.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     1a8:	7c28      	ldrb	r0, [r5, #16]
     1aa:	2800      	cmp	r0, #0
     1ac:	d00c      	beq.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     1ae:	6820      	ldr	r0, [r4, #0]
     1b0:	1dc0      	adds	r0, r0, #7
     1b2:	f020 0007 	bic.w	r0, r0, #7
     1b6:	6020      	str	r0, [r4, #0]
     1b8:	7d29      	ldrb	r1, [r5, #20]
     1ba:	b106      	cbz	r6, 1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1bc:	2000      	movs	r0, #0
     1be:	f001 f935 	bl	142c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
     1c2:	6821      	ldr	r1, [r4, #0]
     1c4:	4408      	add	r0, r1
     1c6:	6020      	str	r0, [r4, #0]
     1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1cc:	20000040 	.word	0x20000040

000001d0 <sdc_build_revision_get>:
     1d0:	b510      	push	{r4, lr}
     1d2:	b128      	cbz	r0, 1e0 <sdc_build_revision_get+0x10>
     1d4:	2214      	movs	r2, #20
     1d6:	4904      	ldr	r1, [pc, #16]	; (1e8 <sdc_build_revision_get+0x18>)
     1d8:	f009 ffb2 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     1dc:	2000      	movs	r0, #0
     1de:	bd10      	pop	{r4, pc}
     1e0:	f06f 0015 	mvn.w	r0, #21
     1e4:	bd10      	pop	{r4, pc}
     1e6:	0000      	.short	0x0000
     1e8:	00000448 	.word	0x00000448

000001ec <sdc_cfg_set>:
     1ec:	b570      	push	{r4, r5, r6, lr}
     1ee:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     1f2:	bb88      	cbnz	r0, 258 <CONFIG_FLASH_SIZE+0x58>
     1f4:	4c23      	ldr	r4, [pc, #140]	; (284 <CONFIG_FLASH_SIZE+0x84>)
     1f6:	7860      	ldrb	r0, [r4, #1]
     1f8:	b108      	cbz	r0, 1fe <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa>
     1fa:	11a8      	asrs	r0, r5, #6
     1fc:	bd70      	pop	{r4, r5, r6, pc}
     1fe:	b1f9      	cbz	r1, 240 <CONFIG_FLASH_SIZE+0x40>
     200:	f06f 0015 	mvn.w	r0, #21
     204:	2a00      	cmp	r2, #0
     206:	d0f9      	beq.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     208:	4b1f      	ldr	r3, [pc, #124]	; (288 <CONFIG_FLASH_SIZE+0x88>)
     20a:	2909      	cmp	r1, #9
     20c:	d234      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     20e:	e8df f001 	tbb	[pc, r1]
     212:	0533      	.short	0x0533
     214:	33180833 	.word	0x33180833
     218:	0024331b 	.word	0x0024331b
     21c:	7810      	ldrb	r0, [r2, #0]
     21e:	7018      	strb	r0, [r3, #0]
     220:	e01f      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     222:	7891      	ldrb	r1, [r2, #2]
     224:	2900      	cmp	r1, #0
     226:	d0e9      	beq.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     228:	78d1      	ldrb	r1, [r2, #3]
     22a:	2900      	cmp	r1, #0
     22c:	d0e6      	beq.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     22e:	7811      	ldrb	r1, [r2, #0]
     230:	291b      	cmp	r1, #27
     232:	d3e3      	bcc.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     234:	7851      	ldrb	r1, [r2, #1]
     236:	291b      	cmp	r1, #27
     238:	d3e0      	bcc.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     23a:	6810      	ldr	r0, [r2, #0]
     23c:	f8c3 0005 	str.w	r0, [r3, #5]
     240:	e00f      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     242:	6810      	ldr	r0, [r2, #0]
     244:	60d8      	str	r0, [r3, #12]
     246:	e00c      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     248:	78e1      	ldrb	r1, [r4, #3]
     24a:	b111      	cbz	r1, 252 <CONFIG_FLASH_SIZE+0x52>
     24c:	7811      	ldrb	r1, [r2, #0]
     24e:	2902      	cmp	r1, #2
     250:	d3d4      	bcc.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     252:	7810      	ldrb	r0, [r2, #0]
     254:	7418      	strb	r0, [r3, #16]
     256:	e004      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     258:	e00e      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     25a:	8811      	ldrh	r1, [r2, #0]
     25c:	29ff      	cmp	r1, #255	; 0xff
     25e:	d8cd      	bhi.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     260:	7519      	strb	r1, [r3, #20]
     262:	2201      	movs	r2, #1
     264:	4908      	ldr	r1, [pc, #32]	; (288 <CONFIG_FLASH_SIZE+0x88>)
     266:	2000      	movs	r0, #0
     268:	f008 f866 	bl	8338 <__udivmoddi4+0x2a0>
     26c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     270:	db04      	blt.n	27c <CONFIG_FLASH_SIZE+0x7c>
     272:	f06f 000b 	mvn.w	r0, #11
     276:	bd70      	pop	{r4, r5, r6, pc}
     278:	4628      	mov	r0, r5
     27a:	bd70      	pop	{r4, r5, r6, pc}
     27c:	2101      	movs	r1, #1
     27e:	70a1      	strb	r1, [r4, #2]
     280:	bd70      	pop	{r4, r5, r6, pc}
     282:	0000      	.short	0x0000
     284:	20000040 	.word	0x20000040
     288:	20000b18 	.word	0x20000b18

0000028c <sdc_disable>:
     28c:	b510      	push	{r4, lr}
     28e:	4c07      	ldr	r4, [pc, #28]	; (2ac <sdc_disable+0x20>)
     290:	7860      	ldrb	r0, [r4, #1]
     292:	b120      	cbz	r0, 29e <sdc_disable+0x12>
     294:	f003 f888 	bl	33a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     298:	7820      	ldrb	r0, [r4, #0]
     29a:	f007 fe1d 	bl	7ed8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     29e:	f000 fc85 	bl	bac <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     2a2:	f000 fd5d 	bl	d60 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     2a6:	2000      	movs	r0, #0
     2a8:	7060      	strb	r0, [r4, #1]
     2aa:	bd10      	pop	{r4, pc}
     2ac:	20000040 	.word	0x20000040

000002b0 <sdc_enable>:
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	460c      	mov	r4, r1
     2b4:	0005      	movs	r5, r0
     2b6:	d002      	beq.n	2be <sdc_enable+0xe>
     2b8:	b10c      	cbz	r4, 2be <sdc_enable+0xe>
     2ba:	0760      	lsls	r0, r4, #29
     2bc:	d002      	beq.n	2c4 <sdc_enable+0x14>
     2be:	f06f 0015 	mvn.w	r0, #21
     2c2:	bd70      	pop	{r4, r5, r6, pc}
     2c4:	f000 f8e6 	bl	494 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     2c8:	b1a8      	cbz	r0, 2f6 <sdc_enable+0x46>
     2ca:	4628      	mov	r0, r5
     2cc:	f007 fdca 	bl	7e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     2d0:	4d0a      	ldr	r5, [pc, #40]	; (2fc <sdc_enable+0x4c>)
     2d2:	2200      	movs	r2, #0
     2d4:	490a      	ldr	r1, [pc, #40]	; (300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>)
     2d6:	7028      	strb	r0, [r5, #0]
     2d8:	4620      	mov	r0, r4
     2da:	f008 f82d 	bl	8338 <__udivmoddi4+0x2a0>
     2de:	f009 fd05 	bl	9cec <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     2e2:	2100      	movs	r1, #0
     2e4:	7828      	ldrb	r0, [r5, #0]
     2e6:	f003 f847 	bl	3378 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     2ea:	f7ff ff11 	bl	110 <__aeabi_idiv0+0x4>
     2ee:	2001      	movs	r0, #1
     2f0:	7068      	strb	r0, [r5, #1]
     2f2:	2000      	movs	r0, #0
     2f4:	bd70      	pop	{r4, r5, r6, pc}
     2f6:	f04f 30ff 	mov.w	r0, #4294967295
     2fa:	bd70      	pop	{r4, r5, r6, pc}
     2fc:	20000040 	.word	0x20000040
     300:	20000b18 	.word	0x20000b18

00000304 <sdc_init>:
     304:	b530      	push	{r4, r5, lr}
     306:	b089      	sub	sp, #36	; 0x24
     308:	0005      	movs	r5, r0
     30a:	d00c      	beq.n	326 <sdc_init+0x22>
     30c:	f007 fd52 	bl	7db4 <mpsl_is_initialized>
     310:	f04f 34ff 	mov.w	r4, #4294967295
     314:	b120      	cbz	r0, 320 <sdc_init+0x1c>
     316:	f007 fc03 	bl	7b20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     31a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     31e:	d905      	bls.n	32c <sdc_init+0x28>
     320:	4620      	mov	r0, r4
     322:	b009      	add	sp, #36	; 0x24
     324:	bd30      	pop	{r4, r5, pc}
     326:	f06f 0015 	mvn.w	r0, #21
     32a:	e7fa      	b.n	322 <sdc_init+0x1e>
     32c:	4c14      	ldr	r4, [pc, #80]	; (380 <sdc_init+0x7c>)
     32e:	4815      	ldr	r0, [pc, #84]	; (384 <sdc_init+0x80>)
     330:	6065      	str	r5, [r4, #4]
     332:	f000 f9bd 	bl	6b0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     336:	2000      	movs	r0, #0
     338:	7060      	strb	r0, [r4, #1]
     33a:	70a0      	strb	r0, [r4, #2]
     33c:	70e0      	strb	r0, [r4, #3]
     33e:	4601      	mov	r1, r0
     340:	2224      	movs	r2, #36	; 0x24
     342:	4668      	mov	r0, sp
     344:	f009 ff76 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     348:	2224      	movs	r2, #36	; 0x24
     34a:	490f      	ldr	r1, [pc, #60]	; (388 <sdc_init+0x84>)
     34c:	4668      	mov	r0, sp
     34e:	f009 fef7 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     352:	2224      	movs	r2, #36	; 0x24
     354:	4669      	mov	r1, sp
     356:	480d      	ldr	r0, [pc, #52]	; (38c <sdc_init+0x88>)
     358:	f009 fef2 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     35c:	f3ef 8410 	mrs	r4, PRIMASK
     360:	b672      	cpsid	i
     362:	f000 fc31 	bl	bc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     366:	480a      	ldr	r0, [pc, #40]	; (390 <sdc_init+0x8c>)
     368:	f000 fd06 	bl	d78 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     36c:	b118      	cbz	r0, 376 <sdc_init+0x72>
     36e:	21cb      	movs	r1, #203	; 0xcb
     370:	2003      	movs	r0, #3
     372:	f000 f80f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     376:	b904      	cbnz	r4, 37a <sdc_init+0x76>
     378:	b662      	cpsie	i
     37a:	2000      	movs	r0, #0
     37c:	e7d1      	b.n	322 <sdc_init+0x1e>
     37e:	0000      	.short	0x0000
     380:	20000040 	.word	0x20000040
     384:	00000111 	.word	0x00000111
     388:	00000424 	.word	0x00000424
     38c:	20000b18 	.word	0x20000b18
     390:	000004c1 	.word	0x000004c1

00000394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     394:	b50e      	push	{r1, r2, r3, lr}
     396:	b672      	cpsid	i
     398:	4a15      	ldr	r2, [pc, #84]	; (3f0 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x8>)
     39a:	6855      	ldr	r5, [r2, #4]
     39c:	b1dd      	cbz	r5, 3d6 <__data_size+0x12>
     39e:	2200      	movs	r2, #0
     3a0:	4603      	mov	r3, r0
     3a2:	466e      	mov	r6, sp
     3a4:	240a      	movs	r4, #10
     3a6:	e003      	b.n	3b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     3a8:	fbb0 f0f4 	udiv	r0, r0, r4
     3ac:	1c52      	adds	r2, r2, #1
     3ae:	b2d2      	uxtb	r2, r2
     3b0:	2800      	cmp	r0, #0
     3b2:	d1f9      	bne.n	3a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     3b4:	54b0      	strb	r0, [r6, r2]
     3b6:	e00a      	b.n	3ce <__data_size+0xa>
     3b8:	b2d8      	uxtb	r0, r3
     3ba:	fbb0 f7f4 	udiv	r7, r0, r4
     3be:	fbb3 f3f4 	udiv	r3, r3, r4
     3c2:	fb04 0017 	mls	r0, r4, r7, r0
     3c6:	1e52      	subs	r2, r2, #1
     3c8:	b2d2      	uxtb	r2, r2
     3ca:	3030      	adds	r0, #48	; 0x30
     3cc:	54b0      	strb	r0, [r6, r2]
     3ce:	2a00      	cmp	r2, #0
     3d0:	d1f2      	bne.n	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     3d2:	4630      	mov	r0, r6
     3d4:	47a8      	blx	r5
     3d6:	f3bf 8f4f 	dsb	sy
     3da:	4806      	ldr	r0, [pc, #24]	; (3f4 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0xc>)
     3dc:	6801      	ldr	r1, [r0, #0]
     3de:	4a06      	ldr	r2, [pc, #24]	; (3f8 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x10>)
     3e0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     3e4:	4311      	orrs	r1, r2
     3e6:	6001      	str	r1, [r0, #0]
     3e8:	f3bf 8f4f 	dsb	sy
     3ec:	bf00      	nop
     3ee:	e7fd      	b.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3f0:	20000040 	.word	0x20000040
     3f4:	e000ed0c 	.word	0xe000ed0c
     3f8:	05fa0004 	.word	0x05fa0004

000003fc <sdc_support_scan>:
     3fc:	4807      	ldr	r0, [pc, #28]	; (41c <CONFIG_BT_RX_STACK_SIZE+0x1c>)
     3fe:	b510      	push	{r4, lr}
     400:	7881      	ldrb	r1, [r0, #2]
     402:	7842      	ldrb	r2, [r0, #1]
     404:	4311      	orrs	r1, r2
     406:	d002      	beq.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>
     408:	f04f 30ff 	mov.w	r0, #4294967295
     40c:	bd10      	pop	{r4, pc}
     40e:	2101      	movs	r1, #1
     410:	70c1      	strb	r1, [r0, #3]
     412:	f002 ffd9 	bl	33c8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
     416:	2000      	movs	r0, #0
     418:	bd10      	pop	{r4, pc}
     41a:	0000      	.short	0x0000
     41c:	20000040 	.word	0x20000040
     420:	00000001 	.word	0x00000001
     424:	00000001 	.word	0x00000001
     428:	031b1b00 	.word	0x031b1b00
     42c:	00000002 	.word	0x00000002
     430:	00001d4c 	.word	0x00001d4c
     434:	00000003 	.word	0x00000003
     438:	00000008 	.word	0x00000008
	...
     448:	c12e7ee0 	.word	0xc12e7ee0
     44c:	2385055e 	.word	0x2385055e
     450:	fadc1546 	.word	0xfadc1546
     454:	707d298e 	.word	0x707d298e
     458:	fca59310 	.word	0xfca59310

0000045c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     45c:	4a05      	ldr	r2, [pc, #20]	; (474 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     45e:	b510      	push	{r4, lr}
     460:	6852      	ldr	r2, [r2, #4]
     462:	b112      	cbz	r2, 46a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     468:	4710      	bx	r2
     46a:	2192      	movs	r1, #146	; 0x92
     46c:	2004      	movs	r0, #4
     46e:	f7ff ff91 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     472:	0000      	.short	0x0000
     474:	20000b3c 	.word	0x20000b3c

00000478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     478:	4a05      	ldr	r2, [pc, #20]	; (490 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     47a:	b510      	push	{r4, lr}
     47c:	6892      	ldr	r2, [r2, #8]
     47e:	b112      	cbz	r2, 486 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     484:	4710      	bx	r2
     486:	2198      	movs	r1, #152	; 0x98
     488:	2004      	movs	r0, #4
     48a:	f7ff ff83 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     48e:	0000      	.short	0x0000
     490:	20000b3c 	.word	0x20000b3c

00000494 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     494:	4805      	ldr	r0, [pc, #20]	; (4ac <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     496:	6801      	ldr	r1, [r0, #0]
     498:	b129      	cbz	r1, 4a6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     49a:	6841      	ldr	r1, [r0, #4]
     49c:	b119      	cbz	r1, 4a6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     49e:	6880      	ldr	r0, [r0, #8]
     4a0:	b108      	cbz	r0, 4a6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     4a2:	2001      	movs	r0, #1
     4a4:	4770      	bx	lr
     4a6:	2000      	movs	r0, #0
     4a8:	4770      	bx	lr
     4aa:	0000      	.short	0x0000
     4ac:	20000b3c 	.word	0x20000b3c

000004b0 <sdc_rand_source_register>:
     4b0:	4902      	ldr	r1, [pc, #8]	; (4bc <sdc_rand_source_register+0xc>)
     4b2:	c80d      	ldmia	r0, {r0, r2, r3}
     4b4:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     4b8:	2000      	movs	r0, #0
     4ba:	4770      	bx	lr
     4bc:	20000b3c 	.word	0x20000b3c

000004c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4c2:	4c12      	ldr	r4, [pc, #72]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4c4:	2600      	movs	r6, #0
     4c6:	6825      	ldr	r5, [r4, #0]
     4c8:	e011      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     4ca:	9800      	ldr	r0, [sp, #0]
     4cc:	2802      	cmp	r0, #2
     4ce:	d002      	beq.n	4d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     4d0:	2803      	cmp	r0, #3
     4d2:	d10c      	bne.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     4d4:	e006      	b.n	4e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     4d6:	6820      	ldr	r0, [r4, #0]
     4d8:	b110      	cbz	r0, 4e0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     4da:	2000      	movs	r0, #0
     4dc:	6026      	str	r6, [r4, #0]
     4de:	e005      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     4e0:	2128      	movs	r1, #40	; 0x28
     4e2:	e00c      	b.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     4e4:	6820      	ldr	r0, [r4, #0]
     4e6:	b168      	cbz	r0, 504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4e8:	2001      	movs	r0, #1
     4ea:	6026      	str	r6, [r4, #0]
     4ec:	47a8      	blx	r5
     4ee:	4668      	mov	r0, sp
     4f0:	f000 fc08 	bl	d04 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     4f4:	2800      	cmp	r0, #0
     4f6:	d0e8      	beq.n	4ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     4f8:	2805      	cmp	r0, #5
     4fa:	d005      	beq.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     4fc:	2135      	movs	r1, #53	; 0x35
     4fe:	2004      	movs	r0, #4
     500:	f7ff ff48 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     504:	212d      	movs	r1, #45	; 0x2d
     506:	e7fa      	b.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     50a:	0000      	.short	0x0000
     50c:	20000048 	.word	0x20000048

00000510 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     514:	4605      	mov	r5, r0
     516:	4925      	ldr	r1, [pc, #148]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     518:	1d00      	adds	r0, r0, #4
     51a:	f501 7784 	add.w	r7, r1, #264	; 0x108
     51e:	2600      	movs	r6, #0
     520:	6008      	str	r0, [r1, #0]
     522:	7838      	ldrb	r0, [r7, #0]
     524:	b150      	cbz	r0, 53c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     526:	78ba      	ldrb	r2, [r7, #2]
     528:	463c      	mov	r4, r7
     52a:	1c79      	adds	r1, r7, #1
     52c:	4628      	mov	r0, r5
     52e:	1c92      	adds	r2, r2, #2
     530:	f009 fe06 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     534:	7026      	strb	r6, [r4, #0]
     536:	2004      	movs	r0, #4
     538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     53c:	481b      	ldr	r0, [pc, #108]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     53e:	f000 fde3 	bl	1108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     542:	4604      	mov	r4, r0
     544:	2802      	cmp	r0, #2
     546:	d004      	beq.n	552 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     548:	2c04      	cmp	r4, #4
     54a:	d007      	beq.n	55c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     54c:	2c08      	cmp	r4, #8
     54e:	d027      	beq.n	5a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     550:	e02a      	b.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     552:	4916      	ldr	r1, [pc, #88]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     554:	4628      	mov	r0, r5
     556:	f007 ff34 	bl	83c2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     55a:	e025      	b.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     55c:	4913      	ldr	r1, [pc, #76]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     55e:	4628      	mov	r0, r5
     560:	f007 ff94 	bl	848c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     564:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     568:	d303      	bcc.n	572 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x62>
     56a:	21c7      	movs	r1, #199	; 0xc7
     56c:	2008      	movs	r0, #8
     56e:	f7ff ff11 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     572:	2800      	cmp	r0, #0
     574:	d0d5      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     576:	f895 9000 	ldrb.w	r9, [r5]
     57a:	f895 8002 	ldrb.w	r8, [r5, #2]
     57e:	4648      	mov	r0, r9
     580:	f000 f844 	bl	60c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     584:	2800      	cmp	r0, #0
     586:	d0cc      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     588:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
     58c:	d10c      	bne.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     58e:	4640      	mov	r0, r8
     590:	f1b8 0f12 	cmp.w	r8, #18
     594:	d0c5      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     596:	f000 f84b 	bl	630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     59a:	2800      	cmp	r0, #0
     59c:	d0c1      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     59e:	e003      	b.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     5a0:	4902      	ldr	r1, [pc, #8]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     5a2:	4628      	mov	r0, r5
     5a4:	f007 ff3b 	bl	841e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     5a8:	4620      	mov	r0, r4
     5aa:	e7c5      	b.n	538 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     5ac:	20000b48 	.word	0x20000b48
     5b0:	b570      	push	{r4, r5, r6, lr}
     5b2:	780a      	ldrb	r2, [r1, #0]
     5b4:	7082      	strb	r2, [r0, #2]
     5b6:	b33a      	cbz	r2, 608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5b8:	2a01      	cmp	r2, #1
     5ba:	d825      	bhi.n	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5bc:	2313      	movs	r3, #19
     5be:	7003      	strb	r3, [r0, #0]
     5c0:	2300      	movs	r3, #0
     5c2:	e00a      	b.n	5da <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
     5c4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     5c8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     5cc:	78a6      	ldrb	r6, [r4, #2]
     5ce:	70ee      	strb	r6, [r5, #3]
     5d0:	8864      	ldrh	r4, [r4, #2]
     5d2:	0a24      	lsrs	r4, r4, #8
     5d4:	1c5b      	adds	r3, r3, #1
     5d6:	712c      	strb	r4, [r5, #4]
     5d8:	b2db      	uxtb	r3, r3
     5da:	4293      	cmp	r3, r2
     5dc:	d3f2      	bcc.n	5c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     5de:	2300      	movs	r3, #0
     5e0:	e00b      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
     5e2:	bf00      	nop
     5e4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     5e8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     5ec:	792e      	ldrb	r6, [r5, #4]
     5ee:	7166      	strb	r6, [r4, #5]
     5f0:	88ad      	ldrh	r5, [r5, #4]
     5f2:	0a2d      	lsrs	r5, r5, #8
     5f4:	1c5b      	adds	r3, r3, #1
     5f6:	71a5      	strb	r5, [r4, #6]
     5f8:	b2db      	uxtb	r3, r3
     5fa:	4293      	cmp	r3, r2
     5fc:	d3f2      	bcc.n	5e4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
     5fe:	2101      	movs	r1, #1
     600:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     604:	b2c0      	uxtb	r0, r0
     606:	bd70      	pop	{r4, r5, r6, pc}
     608:	2000      	movs	r0, #0
     60a:	bd70      	pop	{r4, r5, r6, pc}

0000060c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     60c:	2840      	cmp	r0, #64	; 0x40
     60e:	d203      	bcs.n	618 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     610:	1e40      	subs	r0, r0, #1
     612:	b2c1      	uxtb	r1, r0
     614:	4805      	ldr	r0, [pc, #20]	; (62c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     616:	e005      	b.n	624 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     618:	28ff      	cmp	r0, #255	; 0xff
     61a:	d005      	beq.n	628 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     61c:	3840      	subs	r0, #64	; 0x40
     61e:	b2c1      	uxtb	r1, r0
     620:	4802      	ldr	r0, [pc, #8]	; (62c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     622:	3008      	adds	r0, #8
     624:	f008 b9c4 	b.w	89b0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     628:	2001      	movs	r0, #1
     62a:	4770      	bx	lr
     62c:	2000004c 	.word	0x2000004c

00000630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     630:	1e40      	subs	r0, r0, #1
     632:	b2c1      	uxtb	r1, r0
     634:	4801      	ldr	r0, [pc, #4]	; (63c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     636:	f008 b9bb 	b.w	89b0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     63a:	0000      	.short	0x0000
     63c:	2000005c 	.word	0x2000005c

00000640 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     640:	4902      	ldr	r1, [pc, #8]	; (64c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     642:	6802      	ldr	r2, [r0, #0]
     644:	610a      	str	r2, [r1, #16]
     646:	6840      	ldr	r0, [r0, #4]
     648:	6148      	str	r0, [r1, #20]
     64a:	4770      	bx	lr
     64c:	2000004c 	.word	0x2000004c

00000650 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     650:	4905      	ldr	r1, [pc, #20]	; (668 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     652:	6802      	ldr	r2, [r0, #0]
     654:	600a      	str	r2, [r1, #0]
     656:	6840      	ldr	r0, [r0, #4]
     658:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     65c:	600a      	str	r2, [r1, #0]
     65e:	4a03      	ldr	r2, [pc, #12]	; (66c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     660:	4310      	orrs	r0, r2
     662:	6048      	str	r0, [r1, #4]
     664:	4770      	bx	lr
     666:	0000      	.short	0x0000
     668:	2000004c 	.word	0x2000004c
     66c:	024007f8 	.word	0x024007f8

00000670 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     670:	4807      	ldr	r0, [pc, #28]	; (690 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     672:	f04f 31ff 	mov.w	r1, #4294967295
     676:	2200      	movs	r2, #0
     678:	6001      	str	r1, [r0, #0]
     67a:	0cc9      	lsrs	r1, r1, #19
     67c:	6041      	str	r1, [r0, #4]
     67e:	f100 0108 	add.w	r1, r0, #8
     682:	201f      	movs	r0, #31
     684:	600a      	str	r2, [r1, #0]
     686:	604a      	str	r2, [r1, #4]
     688:	3108      	adds	r1, #8
     68a:	e9c1 0200 	strd	r0, r2, [r1]
     68e:	4770      	bx	lr
     690:	2000004c 	.word	0x2000004c

00000694 <sdc_hci_cmd_cb_reset>:
     694:	b510      	push	{r4, lr}
     696:	f7ff ffeb 	bl	670 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     69a:	f009 f993 	bl	99c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     69e:	4604      	mov	r4, r0
     6a0:	4802      	ldr	r0, [pc, #8]	; (6ac <sdc_hci_cmd_cb_reset+0x18>)
     6a2:	6800      	ldr	r0, [r0, #0]
     6a4:	b100      	cbz	r0, 6a8 <sdc_hci_cmd_cb_reset+0x14>
     6a6:	4780      	blx	r0
     6a8:	4620      	mov	r0, r4
     6aa:	bd10      	pop	{r4, pc}
     6ac:	20000064 	.word	0x20000064

000006b0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     6b0:	4901      	ldr	r1, [pc, #4]	; (6b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     6b2:	6008      	str	r0, [r1, #0]
     6b4:	4770      	bx	lr
     6b6:	0000      	.short	0x0000
     6b8:	20000064 	.word	0x20000064

000006bc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6c0:	4604      	mov	r4, r0
     6c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     6c6:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     6ca:	4d1f      	ldr	r5, [pc, #124]	; (748 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     6cc:	4e1e      	ldr	r6, [pc, #120]	; (748 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     6ce:	3d10      	subs	r5, #16
     6d0:	2210      	movs	r2, #16
     6d2:	2100      	movs	r1, #0
     6d4:	4620      	mov	r0, r4
     6d6:	f009 fdad 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     6da:	2210      	movs	r2, #16
     6dc:	2100      	movs	r1, #0
     6de:	f104 0010 	add.w	r0, r4, #16
     6e2:	f009 fda7 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     6e6:	6828      	ldr	r0, [r5, #0]
     6e8:	1c40      	adds	r0, r0, #1
     6ea:	d108      	bne.n	6fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6ec:	6868      	ldr	r0, [r5, #4]
     6ee:	1c40      	adds	r0, r0, #1
     6f0:	d105      	bne.n	6fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6f2:	68a8      	ldr	r0, [r5, #8]
     6f4:	1c40      	adds	r0, r0, #1
     6f6:	d102      	bne.n	6fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6f8:	68e8      	ldr	r0, [r5, #12]
     6fa:	1c40      	adds	r0, r0, #1
     6fc:	d007      	beq.n	70e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     6fe:	6828      	ldr	r0, [r5, #0]
     700:	686a      	ldr	r2, [r5, #4]
     702:	68a9      	ldr	r1, [r5, #8]
     704:	68eb      	ldr	r3, [r5, #12]
     706:	6120      	str	r0, [r4, #16]
     708:	6162      	str	r2, [r4, #20]
     70a:	61a1      	str	r1, [r4, #24]
     70c:	61e3      	str	r3, [r4, #28]
     70e:	2000      	movs	r0, #0
     710:	f000 fb86 	bl	e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     714:	4387      	bics	r7, r0
     716:	07f8      	lsls	r0, r7, #31
     718:	d113      	bne.n	742 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     71a:	6830      	ldr	r0, [r6, #0]
     71c:	1c40      	adds	r0, r0, #1
     71e:	d108      	bne.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     720:	6870      	ldr	r0, [r6, #4]
     722:	1c40      	adds	r0, r0, #1
     724:	d105      	bne.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     726:	68b0      	ldr	r0, [r6, #8]
     728:	1c40      	adds	r0, r0, #1
     72a:	d102      	bne.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     72c:	68f0      	ldr	r0, [r6, #12]
     72e:	1c40      	adds	r0, r0, #1
     730:	d007      	beq.n	742 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     732:	6832      	ldr	r2, [r6, #0]
     734:	6870      	ldr	r0, [r6, #4]
     736:	68b1      	ldr	r1, [r6, #8]
     738:	68f3      	ldr	r3, [r6, #12]
     73a:	6022      	str	r2, [r4, #0]
     73c:	6060      	str	r0, [r4, #4]
     73e:	60a1      	str	r1, [r4, #8]
     740:	60e3      	str	r3, [r4, #12]
     742:	2000      	movs	r0, #0
     744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     748:	10000090 	.word	0x10000090

0000074c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     74c:	b538      	push	{r3, r4, r5, lr}
     74e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     752:	4604      	mov	r4, r0
     754:	4822      	ldr	r0, [pc, #136]	; (7e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     756:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     75a:	4d21      	ldr	r5, [pc, #132]	; (7e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     75c:	6802      	ldr	r2, [r0, #0]
     75e:	3d14      	subs	r5, #20
     760:	1c52      	adds	r2, r2, #1
     762:	d104      	bne.n	76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     764:	6842      	ldr	r2, [r0, #4]
     766:	43d2      	mvns	r2, r2
     768:	0412      	lsls	r2, r2, #16
     76a:	0c12      	lsrs	r2, r2, #16
     76c:	d035      	beq.n	7da <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     76e:	07c9      	lsls	r1, r1, #31
     770:	d033      	beq.n	7da <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     772:	6801      	ldr	r1, [r0, #0]
     774:	6840      	ldr	r0, [r0, #4]
     776:	f8ad 0000 	strh.w	r0, [sp]
     77a:	f8c4 1001 	str.w	r1, [r4, #1]
     77e:	f8bd 0000 	ldrh.w	r0, [sp]
     782:	f8a4 0005 	strh.w	r0, [r4, #5]
     786:	79a0      	ldrb	r0, [r4, #6]
     788:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     78c:	71a0      	strb	r0, [r4, #6]
     78e:	6828      	ldr	r0, [r5, #0]
     790:	1c40      	adds	r0, r0, #1
     792:	d00c      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     794:	6868      	ldr	r0, [r5, #4]
     796:	1c40      	adds	r0, r0, #1
     798:	d009      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     79a:	68a8      	ldr	r0, [r5, #8]
     79c:	1c40      	adds	r0, r0, #1
     79e:	d006      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7a0:	68e8      	ldr	r0, [r5, #12]
     7a2:	1c40      	adds	r0, r0, #1
     7a4:	d003      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7a6:	2000      	movs	r0, #0
     7a8:	f000 fb3a 	bl	e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     7ac:	b140      	cbz	r0, 7c0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     7ae:	2210      	movs	r2, #16
     7b0:	2100      	movs	r1, #0
     7b2:	1de0      	adds	r0, r4, #7
     7b4:	f009 fd3e 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     7b8:	2001      	movs	r0, #1
     7ba:	7020      	strb	r0, [r4, #0]
     7bc:	2000      	movs	r0, #0
     7be:	bd38      	pop	{r3, r4, r5, pc}
     7c0:	682a      	ldr	r2, [r5, #0]
     7c2:	6869      	ldr	r1, [r5, #4]
     7c4:	68a8      	ldr	r0, [r5, #8]
     7c6:	68eb      	ldr	r3, [r5, #12]
     7c8:	f8c4 2007 	str.w	r2, [r4, #7]
     7cc:	f8c4 100b 	str.w	r1, [r4, #11]
     7d0:	f8c4 000f 	str.w	r0, [r4, #15]
     7d4:	f8c4 3013 	str.w	r3, [r4, #19]
     7d8:	e7ee      	b.n	7b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     7da:	2000      	movs	r0, #0
     7dc:	e7ed      	b.n	7ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     7de:	0000      	.short	0x0000
     7e0:	100000a4 	.word	0x100000a4

000007e4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     7e4:	2102      	movs	r1, #2
     7e6:	8001      	strh	r1, [r0, #0]
     7e8:	8041      	strh	r1, [r0, #2]
     7ea:	2100      	movs	r1, #0
     7ec:	7101      	strb	r1, [r0, #4]
     7ee:	21e0      	movs	r1, #224	; 0xe0
     7f0:	7141      	strb	r1, [r0, #5]
     7f2:	f642 617e 	movw	r1, #11902	; 0x2e7e
     7f6:	80c1      	strh	r1, [r0, #6]
     7f8:	4901      	ldr	r1, [pc, #4]	; (800 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL>)
     7fa:	6081      	str	r1, [r0, #8]
     7fc:	2000      	movs	r0, #0
     7fe:	4770      	bx	lr
     800:	85055ec1 	.word	0x85055ec1
     804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     808:	798c      	ldrb	r4, [r1, #6]
     80a:	f8dd e018 	ldr.w	lr, [sp, #24]
     80e:	2c08      	cmp	r4, #8
     810:	d901      	bls.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     812:	21db      	movs	r1, #219	; 0xdb
     814:	e02c      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
     816:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8bc <__z_interrupt_stack_SIZEOF+0x7c>
     81a:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     81e:	b10d      	cbz	r5, 824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     820:	21dc      	movs	r1, #220	; 0xdc
     822:	e025      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
     824:	79cd      	ldrb	r5, [r1, #7]
     826:	2d00      	cmp	r5, #0
     828:	d045      	beq.n	8b6 <__z_interrupt_stack_SIZEOF+0x76>
     82a:	006f      	lsls	r7, r5, #1
     82c:	370a      	adds	r7, #10
     82e:	681d      	ldr	r5, [r3, #0]
     830:	2c02      	cmp	r4, #2
     832:	443d      	add	r5, r7
     834:	d901      	bls.n	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     836:	4626      	mov	r6, r4
     838:	e001      	b.n	83e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e>
     83a:	f04f 0602 	mov.w	r6, #2
     83e:	442e      	add	r6, r5
     840:	f1a6 0601 	sub.w	r6, r6, #1
     844:	d901      	bls.n	84a <__z_interrupt_stack_SIZEOF+0xa>
     846:	4625      	mov	r5, r4
     848:	e001      	b.n	84e <__z_interrupt_stack_SIZEOF+0xe>
     84a:	f04f 0502 	mov.w	r5, #2
     84e:	f1a5 0501 	sub.w	r5, r5, #1
     852:	ea26 0605 	bic.w	r6, r6, r5
     856:	888d      	ldrh	r5, [r1, #4]
     858:	4425      	add	r5, r4
     85a:	f1a4 0401 	sub.w	r4, r4, #1
     85e:	f1a5 0501 	sub.w	r5, r5, #1
     862:	ea25 0504 	bic.w	r5, r5, r4
     866:	f64f 74ff 	movw	r4, #65535	; 0xffff
     86a:	42a5      	cmp	r5, r4
     86c:	d303      	bcc.n	876 <__z_interrupt_stack_SIZEOF+0x36>
     86e:	21e7      	movs	r1, #231	; 0xe7
     870:	2017      	movs	r0, #23
     872:	f7ff fd8f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     876:	f1be 0f00 	cmp.w	lr, #0
     87a:	d118      	bne.n	8ae <__z_interrupt_stack_SIZEOF+0x6e>
     87c:	1bf4      	subs	r4, r6, r7
     87e:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     882:	8025      	strh	r5, [r4, #0]
     884:	79c8      	ldrb	r0, [r1, #7]
     886:	70a0      	strb	r0, [r4, #2]
     888:	2001      	movs	r0, #1
     88a:	70e0      	strb	r0, [r4, #3]
     88c:	7122      	strb	r2, [r4, #4]
     88e:	6808      	ldr	r0, [r1, #0]
     890:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     894:	0c00      	lsrs	r0, r0, #16
     896:	80e0      	strh	r0, [r4, #6]
     898:	8808      	ldrh	r0, [r1, #0]
     89a:	8120      	strh	r0, [r4, #8]
     89c:	2000      	movs	r0, #0
     89e:	e003      	b.n	8a8 <__z_interrupt_stack_SIZEOF+0x68>
     8a0:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     8a4:	1c40      	adds	r0, r0, #1
     8a6:	817a      	strh	r2, [r7, #10]
     8a8:	79cf      	ldrb	r7, [r1, #7]
     8aa:	4287      	cmp	r7, r0
     8ac:	d8f8      	bhi.n	8a0 <__z_interrupt_stack_SIZEOF+0x60>
     8ae:	79c8      	ldrb	r0, [r1, #7]
     8b0:	fb00 6005 	mla	r0, r0, r5, r6
     8b4:	6018      	str	r0, [r3, #0]
     8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8ba:	0000      	.short	0x0000
     8bc:	20000068 	.word	0x20000068
     8c0:	b530      	push	{r4, r5, lr}
     8c2:	4603      	mov	r3, r0
     8c4:	ea4f 0002 	mov.w	r0, r2
     8c8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     8cc:	8964      	ldrh	r4, [r4, #10]
     8ce:	428c      	cmp	r4, r1
     8d0:	d009      	beq.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
     8d2:	789c      	ldrb	r4, [r3, #2]
     8d4:	1c40      	adds	r0, r0, #1
     8d6:	fbb0 f5f4 	udiv	r5, r0, r4
     8da:	fb04 0015 	mls	r0, r4, r5, r0
     8de:	b2c0      	uxtb	r0, r0
     8e0:	4290      	cmp	r0, r2
     8e2:	d1f1      	bne.n	8c8 <__z_interrupt_stack_SIZEOF+0x88>
     8e4:	20ff      	movs	r0, #255	; 0xff
     8e6:	bd30      	pop	{r4, r5, pc}

000008e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     8e8:	4a08      	ldr	r2, [pc, #32]	; (90c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
     8ea:	b510      	push	{r4, lr}
     8ec:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     8f0:	4601      	mov	r1, r0
     8f2:	4620      	mov	r0, r4
     8f4:	f008 fa70 	bl	8dd8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     8f8:	4601      	mov	r1, r0
     8fa:	28ff      	cmp	r0, #255	; 0xff
     8fc:	d004      	beq.n	908 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
     8fe:	4620      	mov	r0, r4
     900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     904:	f008 ba7c 	b.w	8e00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     908:	2000      	movs	r0, #0
     90a:	bd10      	pop	{r4, pc}
     90c:	20000068 	.word	0x20000068

00000910 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     910:	b570      	push	{r4, r5, r6, lr}
     912:	4604      	mov	r4, r0
     914:	7808      	ldrb	r0, [r1, #0]
     916:	784a      	ldrb	r2, [r1, #1]
     918:	b086      	sub	sp, #24
     91a:	4290      	cmp	r0, r2
     91c:	d902      	bls.n	924 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
     91e:	f44f 7184 	mov.w	r1, #264	; 0x108
     922:	e006      	b.n	932 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     924:	9401      	str	r4, [sp, #4]
     926:	b13c      	cbz	r4, 938 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     928:	2300      	movs	r3, #0
     92a:	0760      	lsls	r0, r4, #29
     92c:	d006      	beq.n	93c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     92e:	f240 1119 	movw	r1, #281	; 0x119
     932:	2017      	movs	r0, #23
     934:	f7ff fd2e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     938:	2301      	movs	r3, #1
     93a:	e7f6      	b.n	92a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
     93c:	480b      	ldr	r0, [pc, #44]	; (96c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>)
     93e:	2200      	movs	r2, #0
     940:	4e0b      	ldr	r6, [pc, #44]	; (970 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>)
     942:	6002      	str	r2, [r0, #0]
     944:	7849      	ldrb	r1, [r1, #1]
     946:	e9d6 5000 	ldrd	r5, r0, [r6]
     94a:	68b6      	ldr	r6, [r6, #8]
     94c:	f361 601f 	bfi	r0, r1, #24, #8
     950:	e9cd 5002 	strd	r5, r0, [sp, #8]
     954:	9300      	str	r3, [sp, #0]
     956:	9604      	str	r6, [sp, #16]
     958:	ab01      	add	r3, sp, #4
     95a:	a902      	add	r1, sp, #8
     95c:	4610      	mov	r0, r2
     95e:	f7ff ff51 	bl	804 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4>
     962:	9801      	ldr	r0, [sp, #4]
     964:	b006      	add	sp, #24
     966:	1b00      	subs	r0, r0, r4
     968:	bd70      	pop	{r4, r5, r6, pc}
     96a:	0000      	.short	0x0000
     96c:	20000068 	.word	0x20000068
     970:	00000a04 	.word	0x00000a04

00000974 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     974:	b510      	push	{r4, lr}
     976:	4604      	mov	r4, r0
     978:	7980      	ldrb	r0, [r0, #6]
     97a:	490e      	ldr	r1, [pc, #56]	; (9b4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
     97c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     980:	b1a8      	cbz	r0, 9ae <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     982:	f64f 73f0 	movw	r3, #65520	; 0xfff0
     986:	79e1      	ldrb	r1, [r4, #7]
     988:	7882      	ldrb	r2, [r0, #2]
     98a:	4291      	cmp	r1, r2
     98c:	d20f      	bcs.n	9ae <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     98e:	1c4a      	adds	r2, r1, #1
     990:	71e2      	strb	r2, [r4, #7]
     992:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     996:	8952      	ldrh	r2, [r2, #10]
     998:	429a      	cmp	r2, r3
     99a:	d0f4      	beq.n	986 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
     99c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9a0:	8952      	ldrh	r2, [r2, #10]
     9a2:	80a2      	strh	r2, [r4, #4]
     9a4:	f008 fa2c 	bl	8e00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     9a8:	6020      	str	r0, [r4, #0]
     9aa:	2000      	movs	r0, #0
     9ac:	bd10      	pop	{r4, pc}
     9ae:	2005      	movs	r0, #5
     9b0:	bd10      	pop	{r4, pc}
     9b2:	0000      	.short	0x0000
     9b4:	20000068 	.word	0x20000068

000009b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9bc:	4606      	mov	r6, r0
     9be:	4810      	ldr	r0, [pc, #64]	; (a00 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
     9c0:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
     9c4:	4631      	mov	r1, r6
     9c6:	4628      	mov	r0, r5
     9c8:	f008 fa06 	bl	8dd8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     9cc:	4604      	mov	r4, r0
     9ce:	28ff      	cmp	r0, #255	; 0xff
     9d0:	d012      	beq.n	9f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
     9d2:	f8d5 0006 	ldr.w	r0, [r5, #6]
     9d6:	4621      	mov	r1, r4
     9d8:	ea4f 4730 	mov.w	r7, r0, ror #16
     9dc:	4628      	mov	r0, r5
     9de:	f008 fa0f 	bl	8e00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     9e2:	4601      	mov	r1, r0
     9e4:	4630      	mov	r0, r6
     9e6:	47b8      	blx	r7
     9e8:	eb05 0144 	add.w	r1, r5, r4, lsl #1
     9ec:	f64f 70f0 	movw	r0, #65520	; 0xfff0
     9f0:	8148      	strh	r0, [r1, #10]
     9f2:	2000      	movs	r0, #0
     9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9f8:	f243 0002 	movw	r0, #12290	; 0x3002
     9fc:	e7fa      	b.n	9f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
     9fe:	0000      	.short	0x0000
     a00:	20000068 	.word	0x20000068
     a04:	000096f5 	.word	0x000096f5
     a08:	000802a8 	.word	0x000802a8
     a0c:	00000000 	.word	0x00000000

00000a10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
     a10:	b570      	push	{r4, r5, r6, lr}
     a12:	4c14      	ldr	r4, [pc, #80]	; (a64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
     a14:	6823      	ldr	r3, [r4, #0]
     a16:	b18b      	cbz	r3, a3c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
     a18:	7a19      	ldrb	r1, [r3, #8]
     a1a:	4281      	cmp	r1, r0
     a1c:	d912      	bls.n	a44 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     a1e:	685a      	ldr	r2, [r3, #4]
     a20:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
     a24:	b171      	cbz	r1, a44 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     a26:	2500      	movs	r5, #0
     a28:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
     a2c:	884a      	ldrh	r2, [r1, #2]
     a2e:	6818      	ldr	r0, [r3, #0]
     a30:	f008 f9c5 	bl	8dbe <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     a34:	6821      	ldr	r1, [r4, #0]
     a36:	2000      	movs	r0, #0
     a38:	7a0a      	ldrb	r2, [r1, #8]
     a3a:	e00c      	b.n	a56 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
     a3c:	21c6      	movs	r1, #198	; 0xc6
     a3e:	2018      	movs	r0, #24
     a40:	f7ff fca8 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a44:	f243 0002 	movw	r0, #12290	; 0x3002
     a48:	bd70      	pop	{r4, r5, r6, pc}
     a4a:	684b      	ldr	r3, [r1, #4]
     a4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     a50:	b933      	cbnz	r3, a60 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
     a52:	1c40      	adds	r0, r0, #1
     a54:	b2c0      	uxtb	r0, r0
     a56:	4282      	cmp	r2, r0
     a58:	d8f7      	bhi.n	a4a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
     a5a:	6808      	ldr	r0, [r1, #0]
     a5c:	f008 f9a4 	bl	8da8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
     a60:	2000      	movs	r0, #0
     a62:	bd70      	pop	{r4, r5, r6, pc}
     a64:	2000006c 	.word	0x2000006c

00000a68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
     a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a6c:	460d      	mov	r5, r1
     a6e:	0004      	movs	r4, r0
     a70:	4690      	mov	r8, r2
     a72:	f04f 0600 	mov.w	r6, #0
     a76:	d006      	beq.n	a86 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
     a78:	2700      	movs	r7, #0
     a7a:	07a0      	lsls	r0, r4, #30
     a7c:	d005      	beq.n	a8a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
     a7e:	2186      	movs	r1, #134	; 0x86
     a80:	2018      	movs	r0, #24
     a82:	f7ff fc87 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a86:	2701      	movs	r7, #1
     a88:	e7f7      	b.n	a7a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
     a8a:	b1cd      	cbz	r5, ac0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     a8c:	4611      	mov	r1, r2
     a8e:	2000      	movs	r0, #0
     a90:	f008 f96e 	bl	8d70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     a94:	300c      	adds	r0, #12
     a96:	eb00 0685 	add.w	r6, r0, r5, lsl #2
     a9a:	b98f      	cbnz	r7, ac0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     a9c:	4f0a      	ldr	r7, [pc, #40]	; (ac8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
     a9e:	f104 000c 	add.w	r0, r4, #12
     aa2:	00aa      	lsls	r2, r5, #2
     aa4:	603c      	str	r4, [r7, #0]
     aa6:	7225      	strb	r5, [r4, #8]
     aa8:	6060      	str	r0, [r4, #4]
     aaa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     aae:	6020      	str	r0, [r4, #0]
     ab0:	2100      	movs	r1, #0
     ab2:	6860      	ldr	r0, [r4, #4]
     ab4:	f009 fbbe 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     ab8:	4641      	mov	r1, r8
     aba:	6838      	ldr	r0, [r7, #0]
     abc:	f008 f958 	bl	8d70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     ac0:	4630      	mov	r0, r6
     ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ac6:	0000      	.short	0x0000
     ac8:	2000006c 	.word	0x2000006c

00000acc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
     acc:	490a      	ldr	r1, [pc, #40]	; (af8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
     ace:	b510      	push	{r4, lr}
     ad0:	4602      	mov	r2, r0
     ad2:	6809      	ldr	r1, [r1, #0]
     ad4:	2000      	movs	r0, #0
     ad6:	b159      	cbz	r1, af0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
     ad8:	7a0b      	ldrb	r3, [r1, #8]
     ada:	4293      	cmp	r3, r2
     adc:	d907      	bls.n	aee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     ade:	6849      	ldr	r1, [r1, #4]
     ae0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
     ae4:	2900      	cmp	r1, #0
     ae6:	d002      	beq.n	aee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     ae8:	f831 0b04 	ldrh.w	r0, [r1], #4
     aec:	4408      	add	r0, r1
     aee:	bd10      	pop	{r4, pc}
     af0:	21fa      	movs	r1, #250	; 0xfa
     af2:	2018      	movs	r0, #24
     af4:	f7ff fc4e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     af8:	2000006c 	.word	0x2000006c

00000afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
     afc:	4801      	ldr	r0, [pc, #4]	; (b04 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
     afe:	7840      	ldrb	r0, [r0, #1]
     b00:	4770      	bx	lr
     b02:	0000      	.short	0x0000
     b04:	20000070 	.word	0x20000070

00000b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
     b08:	4801      	ldr	r0, [pc, #4]	; (b10 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
     b0a:	6840      	ldr	r0, [r0, #4]
     b0c:	4770      	bx	lr
     b0e:	0000      	.short	0x0000
     b10:	20000070 	.word	0x20000070

00000b14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
     b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b18:	460c      	mov	r4, r1
     b1a:	4607      	mov	r7, r0
     b1c:	4616      	mov	r6, r2
     b1e:	2125      	movs	r1, #37	; 0x25
     b20:	4610      	mov	r0, r2
     b22:	460d      	mov	r5, r1
     b24:	4622      	mov	r2, r4
     b26:	f008 f8e2 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
     b2a:	4680      	mov	r8, r0
     b2c:	b157      	cbz	r7, b44 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
     b2e:	4638      	mov	r0, r7
     b30:	4641      	mov	r1, r8
     b32:	4632      	mov	r2, r6
     b34:	462b      	mov	r3, r5
     b36:	9400      	str	r4, [sp, #0]
     b38:	f008 f894 	bl	8c64 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b3c:	4803      	ldr	r0, [pc, #12]	; (b4c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
     b3e:	6047      	str	r7, [r0, #4]
     b40:	7004      	strb	r4, [r0, #0]
     b42:	7046      	strb	r6, [r0, #1]
     b44:	4640      	mov	r0, r8
     b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000070 	.word	0x20000070

00000b50 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
     b50:	4802      	ldr	r0, [pc, #8]	; (b5c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
     b52:	7842      	ldrb	r2, [r0, #1]
     b54:	7801      	ldrb	r1, [r0, #0]
     b56:	6840      	ldr	r0, [r0, #4]
     b58:	f7ff bfdc 	b.w	b14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     b5c:	20000070 	.word	0x20000070
     b60:	b530      	push	{r4, r5, lr}
     b62:	490d      	ldr	r1, [pc, #52]	; (b98 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
     b64:	2001      	movs	r0, #1
     b66:	6048      	str	r0, [r1, #4]
     b68:	1e82      	subs	r2, r0, #2
     b6a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b6e:	490b      	ldr	r1, [pc, #44]	; (b9c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
     b70:	6088      	str	r0, [r1, #8]
     b72:	2300      	movs	r3, #0
     b74:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
     b78:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b7c:	4c08      	ldr	r4, [pc, #32]	; (ba0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
     b7e:	6023      	str	r3, [r4, #0]
     b80:	1d25      	adds	r5, r4, #4
     b82:	6028      	str	r0, [r5, #0]
     b84:	6088      	str	r0, [r1, #8]
     b86:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b8a:	6023      	str	r3, [r4, #0]
     b8c:	6028      	str	r0, [r5, #0]
     b8e:	4906      	ldr	r1, [pc, #24]	; (ba8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
     b90:	4804      	ldr	r0, [pc, #16]	; (ba4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
     b92:	6008      	str	r0, [r1, #0]
     b94:	bd30      	pop	{r4, r5, pc}
     b96:	0000      	.short	0x0000
     b98:	4000e000 	.word	0x4000e000
     b9c:	4000f000 	.word	0x4000f000
     ba0:	4000f500 	.word	0x4000f500
     ba4:	3ff60000 	.word	0x3ff60000
     ba8:	4001f508 	.word	0x4001f508

00000bac <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
     bac:	b510      	push	{r4, lr}
     bae:	f7ff ffd7 	bl	b60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
     bb2:	f008 f96f 	bl	8e94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
     bb6:	4903      	ldr	r1, [pc, #12]	; (bc4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
     bb8:	4801      	ldr	r0, [pc, #4]	; (bc0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
     bba:	6008      	str	r0, [r1, #0]
     bbc:	bd10      	pop	{r4, pc}
     bbe:	0000      	.short	0x0000
     bc0:	3ff60000 	.word	0x3ff60000
     bc4:	4001f508 	.word	0x4001f508

00000bc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
     bc8:	b510      	push	{r4, lr}
     bca:	f7ff ffc9 	bl	b60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
     bce:	f008 f961 	bl	8e94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
     bd2:	f000 f887 	bl	ce4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
     bd6:	4905      	ldr	r1, [pc, #20]	; (bec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
     bd8:	4803      	ldr	r0, [pc, #12]	; (be8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
     bda:	6008      	str	r0, [r1, #0]
     bdc:	f000 f8b8 	bl	d50 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
     be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     be4:	f000 b8dc 	b.w	da0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
     be8:	3ff60000 	.word	0x3ff60000
     bec:	4001f508 	.word	0x4001f508
     bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf4:	4682      	mov	sl, r0
     bf6:	4838      	ldr	r0, [pc, #224]	; (cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     bf8:	f009 f9b1 	bl	9f5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
     bfc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
     c00:	b128      	cbz	r0, c0e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
     c02:	2601      	movs	r6, #1
     c04:	f10b 0001 	add.w	r0, fp, #1
     c08:	21ff      	movs	r1, #255	; 0xff
     c0a:	7001      	strb	r1, [r0, #0]
     c0c:	e000      	b.n	c10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
     c0e:	2600      	movs	r6, #0
     c10:	f44f 7580 	mov.w	r5, #256	; 0x100
     c14:	4c31      	ldr	r4, [pc, #196]	; (cdc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
     c16:	f04f 0800 	mov.w	r8, #0
     c1a:	1d2f      	adds	r7, r5, #4
     c1c:	2101      	movs	r1, #1
     c1e:	6061      	str	r1, [r4, #4]
     c20:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     c24:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     c28:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
     c2c:	6021      	str	r1, [r4, #0]
     c2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; ce0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
     c32:	e01c      	b.n	c6e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c34:	f8d9 0000 	ldr.w	r0, [r9]
     c38:	06c0      	lsls	r0, r0, #27
     c3a:	d518      	bpl.n	c6e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c3c:	200e      	movs	r0, #14
     c3e:	f008 f938 	bl	8eb2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
     c42:	f3ef 8010 	mrs	r0, PRIMASK
     c46:	9000      	str	r0, [sp, #0]
     c48:	b672      	cpsid	i
     c4a:	2103      	movs	r1, #3
     c4c:	4620      	mov	r0, r4
     c4e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
     c52:	4629      	mov	r1, r5
     c54:	f008 f93a 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c58:	b930      	cbnz	r0, c68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     c5a:	4639      	mov	r1, r7
     c5c:	4620      	mov	r0, r4
     c5e:	f008 f935 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c62:	b908      	cbnz	r0, c68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     c64:	f009 fa12 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
     c68:	9800      	ldr	r0, [sp, #0]
     c6a:	b900      	cbnz	r0, c6e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c6c:	b662      	cpsie	i
     c6e:	4629      	mov	r1, r5
     c70:	4620      	mov	r0, r4
     c72:	f008 f92b 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c76:	b928      	cbnz	r0, c84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
     c78:	4639      	mov	r1, r7
     c7a:	4620      	mov	r0, r4
     c7c:	f008 f926 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c80:	2800      	cmp	r0, #0
     c82:	d0d7      	beq.n	c34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
     c84:	4639      	mov	r1, r7
     c86:	4620      	mov	r0, r4
     c88:	f008 f920 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c8c:	2800      	cmp	r0, #0
     c8e:	d1c5      	bne.n	c1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
     c90:	bb06      	cbnz	r6, cd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     c92:	f89b 1001 	ldrb.w	r1, [fp, #1]
     c96:	f88d 1000 	strb.w	r1, [sp]
     c9a:	9900      	ldr	r1, [sp, #0]
     c9c:	9100      	str	r1, [sp, #0]
     c9e:	f89d 1000 	ldrb.w	r1, [sp]
     ca2:	b109      	cbz	r1, ca8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
     ca4:	2501      	movs	r5, #1
     ca6:	e000      	b.n	caa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
     ca8:	2500      	movs	r5, #0
     caa:	f10b 0001 	add.w	r0, fp, #1
     cae:	f880 8000 	strb.w	r8, [r0]
     cb2:	2003      	movs	r0, #3
     cb4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
     cb8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     cbc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     cc0:	200e      	movs	r0, #14
     cc2:	f008 f8f6 	bl	8eb2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
     cc6:	4804      	ldr	r0, [pc, #16]	; (cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     cc8:	f009 f960 	bl	9f8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
     ccc:	b115      	cbz	r5, cd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     cce:	2011      	movs	r0, #17
     cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cd4:	2000      	movs	r0, #0
     cd6:	e7fb      	b.n	cd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
     cd8:	20000174 	.word	0x20000174
     cdc:	4000e000 	.word	0x4000e000
     ce0:	e000ed10 	.word	0xe000ed10

00000ce4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
     ce4:	b510      	push	{r4, lr}
     ce6:	4806      	ldr	r0, [pc, #24]	; (d00 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     ce8:	f009 f94c 	bl	9f84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
     cec:	b118      	cbz	r0, cf6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
     cee:	2130      	movs	r1, #48	; 0x30
     cf0:	201d      	movs	r0, #29
     cf2:	f7ff fb4f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     cf6:	4802      	ldr	r0, [pc, #8]	; (d00 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     cf8:	2100      	movs	r1, #0
     cfa:	7041      	strb	r1, [r0, #1]
     cfc:	bd10      	pop	{r4, pc}
     cfe:	0000      	.short	0x0000
     d00:	20000174 	.word	0x20000174

00000d04 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
     d04:	b570      	push	{r4, r5, r6, lr}
     d06:	4911      	ldr	r1, [pc, #68]	; (d4c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
     d08:	680a      	ldr	r2, [r1, #0]
     d0a:	b1ea      	cbz	r2, d48 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
     d0c:	2300      	movs	r3, #0
     d0e:	461d      	mov	r5, r3
     d10:	2401      	movs	r4, #1
     d12:	684a      	ldr	r2, [r1, #4]
     d14:	1c52      	adds	r2, r2, #1
     d16:	604a      	str	r2, [r1, #4]
     d18:	2a09      	cmp	r2, #9
     d1a:	d300      	bcc.n	d1e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
     d1c:	604d      	str	r5, [r1, #4]
     d1e:	790e      	ldrb	r6, [r1, #4]
     d20:	fa04 f206 	lsl.w	r2, r4, r6
     d24:	680e      	ldr	r6, [r1, #0]
     d26:	4216      	tst	r6, r2
     d28:	d00b      	beq.n	d42 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
     d2a:	f3ef 8310 	mrs	r3, PRIMASK
     d2e:	b672      	cpsid	i
     d30:	680c      	ldr	r4, [r1, #0]
     d32:	4394      	bics	r4, r2
     d34:	600c      	str	r4, [r1, #0]
     d36:	b903      	cbnz	r3, d3a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
     d38:	b662      	cpsie	i
     d3a:	6849      	ldr	r1, [r1, #4]
     d3c:	6001      	str	r1, [r0, #0]
     d3e:	2000      	movs	r0, #0
     d40:	bd70      	pop	{r4, r5, r6, pc}
     d42:	1c5b      	adds	r3, r3, #1
     d44:	2b09      	cmp	r3, #9
     d46:	d3e4      	bcc.n	d12 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
     d48:	2005      	movs	r0, #5
     d4a:	bd70      	pop	{r4, r5, r6, pc}
     d4c:	20000078 	.word	0x20000078

00000d50 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
     d50:	4802      	ldr	r0, [pc, #8]	; (d5c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
     d52:	2100      	movs	r1, #0
     d54:	6001      	str	r1, [r0, #0]
     d56:	6041      	str	r1, [r0, #4]
     d58:	4770      	bx	lr
     d5a:	0000      	.short	0x0000
     d5c:	20000078 	.word	0x20000078

00000d60 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
     d60:	b510      	push	{r4, lr}
     d62:	4c04      	ldr	r4, [pc, #16]	; (d74 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
     d64:	7820      	ldrb	r0, [r4, #0]
     d66:	28ff      	cmp	r0, #255	; 0xff
     d68:	d003      	beq.n	d72 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
     d6a:	f007 f8b5 	bl	7ed8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     d6e:	20ff      	movs	r0, #255	; 0xff
     d70:	7020      	strb	r0, [r4, #0]
     d72:	bd10      	pop	{r4, pc}
     d74:	20000000 	.word	0x20000000

00000d78 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
     d78:	b510      	push	{r4, lr}
     d7a:	4c08      	ldr	r4, [pc, #32]	; (d9c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
     d7c:	7861      	ldrb	r1, [r4, #1]
     d7e:	b109      	cbz	r1, d84 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
     d80:	200f      	movs	r0, #15
     d82:	bd10      	pop	{r4, pc}
     d84:	f007 f86e 	bl	7e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     d88:	7020      	strb	r0, [r4, #0]
     d8a:	28ff      	cmp	r0, #255	; 0xff
     d8c:	d001      	beq.n	d92 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
     d8e:	2000      	movs	r0, #0
     d90:	bd10      	pop	{r4, pc}
     d92:	2173      	movs	r1, #115	; 0x73
     d94:	201f      	movs	r0, #31
     d96:	f7ff fafd 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     d9a:	0000      	.short	0x0000
     d9c:	20000000 	.word	0x20000000

00000da0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
     da0:	4901      	ldr	r1, [pc, #4]	; (da8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
     da2:	2000      	movs	r0, #0
     da4:	7048      	strb	r0, [r1, #1]
     da6:	4770      	bx	lr
     da8:	20000000 	.word	0x20000000
     dac:	4905      	ldr	r1, [pc, #20]	; (dc4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
     dae:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
     db0:	4282      	cmp	r2, r0
     db2:	d105      	bne.n	dc0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
     db4:	2000      	movs	r0, #0
     db6:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
     dba:	f64f 70ff 	movw	r0, #65535	; 0xffff
     dbe:	8488      	strh	r0, [r1, #36]	; 0x24
     dc0:	4770      	bx	lr
     dc2:	0000      	.short	0x0000
     dc4:	20000e14 	.word	0x20000e14

00000dc8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
     dc8:	4a0a      	ldr	r2, [pc, #40]	; (df4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
     dca:	b110      	cbz	r0, dd2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
     dcc:	2801      	cmp	r0, #1
     dce:	d007      	beq.n	de0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
     dd0:	e00e      	b.n	df0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     dd2:	7850      	ldrb	r0, [r2, #1]
     dd4:	b160      	cbz	r0, df0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     dd6:	f8d2 0002 	ldr.w	r0, [r2, #2]
     dda:	6008      	str	r0, [r1, #0]
     ddc:	88d0      	ldrh	r0, [r2, #6]
     dde:	e004      	b.n	dea <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
     de0:	7810      	ldrb	r0, [r2, #0]
     de2:	b128      	cbz	r0, df0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     de4:	6890      	ldr	r0, [r2, #8]
     de6:	6008      	str	r0, [r1, #0]
     de8:	8990      	ldrh	r0, [r2, #12]
     dea:	8088      	strh	r0, [r1, #4]
     dec:	2001      	movs	r0, #1
     dee:	4770      	bx	lr
     df0:	2000      	movs	r0, #0
     df2:	4770      	bx	lr
     df4:	20000176 	.word	0x20000176

00000df8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
     df8:	4a08      	ldr	r2, [pc, #32]	; (e1c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
     dfa:	2301      	movs	r3, #1
     dfc:	b138      	cbz	r0, e0e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
     dfe:	2801      	cmp	r0, #1
     e00:	d104      	bne.n	e0c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
     e02:	7013      	strb	r3, [r2, #0]
     e04:	6808      	ldr	r0, [r1, #0]
     e06:	6090      	str	r0, [r2, #8]
     e08:	8888      	ldrh	r0, [r1, #4]
     e0a:	8190      	strh	r0, [r2, #12]
     e0c:	4770      	bx	lr
     e0e:	7053      	strb	r3, [r2, #1]
     e10:	6808      	ldr	r0, [r1, #0]
     e12:	f8c2 0002 	str.w	r0, [r2, #2]
     e16:	8888      	ldrh	r0, [r1, #4]
     e18:	80d0      	strh	r0, [r2, #6]
     e1a:	4770      	bx	lr
     e1c:	20000176 	.word	0x20000176

00000e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
     e20:	4906      	ldr	r1, [pc, #24]	; (e3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
     e22:	b110      	cbz	r0, e2a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
     e24:	2801      	cmp	r0, #1
     e26:	d002      	beq.n	e2e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
     e28:	e005      	b.n	e36 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
     e2a:	7848      	ldrb	r0, [r1, #1]
     e2c:	e000      	b.n	e30 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
     e2e:	7808      	ldrb	r0, [r1, #0]
     e30:	b108      	cbz	r0, e36 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
     e32:	2001      	movs	r0, #1
     e34:	4770      	bx	lr
     e36:	2000      	movs	r0, #0
     e38:	4770      	bx	lr
     e3a:	0000      	.short	0x0000
     e3c:	20000176 	.word	0x20000176

00000e40 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
     e40:	4901      	ldr	r1, [pc, #4]	; (e48 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
     e42:	7708      	strb	r0, [r1, #28]
     e44:	4770      	bx	lr
     e46:	0000      	.short	0x0000
     e48:	20000522 	.word	0x20000522

00000e4c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
     e4c:	4800      	ldr	r0, [pc, #0]	; (e50 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
     e4e:	4770      	bx	lr
     e50:	20000fc4 	.word	0x20000fc4

00000e54 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
     e54:	4904      	ldr	r1, [pc, #16]	; (e68 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
     e56:	784a      	ldrb	r2, [r1, #1]
     e58:	4282      	cmp	r2, r0
     e5a:	d903      	bls.n	e64 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
     e5c:	4408      	add	r0, r1
     e5e:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
     e62:	4770      	bx	lr
     e64:	2000      	movs	r0, #0
     e66:	4770      	bx	lr
     e68:	20000e3a 	.word	0x20000e3a

00000e6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
     e6c:	4904      	ldr	r1, [pc, #16]	; (e80 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
     e6e:	784a      	ldrb	r2, [r1, #1]
     e70:	4282      	cmp	r2, r0
     e72:	d903      	bls.n	e7c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
     e74:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     e78:	3082      	adds	r0, #130	; 0x82
     e7a:	4770      	bx	lr
     e7c:	2000      	movs	r0, #0
     e7e:	4770      	bx	lr
     e80:	20000e3a 	.word	0x20000e3a

00000e84 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
     e84:	4a05      	ldr	r2, [pc, #20]	; (e9c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
     e86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     e8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
     e8e:	6802      	ldr	r2, [r0, #0]
     e90:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
     e94:	8880      	ldrh	r0, [r0, #4]
     e96:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
     e9a:	4770      	bx	lr
     e9c:	20000e3a 	.word	0x20000e3a

00000ea0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
     ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ea4:	4607      	mov	r7, r0
     ea6:	2400      	movs	r4, #0
     ea8:	4d10      	ldr	r5, [pc, #64]	; (eec <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
     eaa:	e019      	b.n	ee0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
     eac:	4620      	mov	r0, r4
     eae:	f7ff ffdd 	bl	e6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
     eb2:	0003      	movs	r3, r0
     eb4:	d012      	beq.n	edc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
     eb6:	1928      	adds	r0, r5, r4
     eb8:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
     ebc:	b970      	cbnz	r0, edc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
     ebe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     ec2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
     ec6:	f506 7685 	add.w	r6, r6, #266	; 0x10a
     eca:	463a      	mov	r2, r7
     ecc:	4631      	mov	r1, r6
     ece:	4618      	mov	r0, r3
     ed0:	f008 f845 	bl	8f5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
     ed4:	4630      	mov	r0, r6
     ed6:	4621      	mov	r1, r4
     ed8:	f7ff ffd4 	bl	e84 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
     edc:	1c64      	adds	r4, r4, #1
     ede:	b2e4      	uxtb	r4, r4
     ee0:	7868      	ldrb	r0, [r5, #1]
     ee2:	42a0      	cmp	r0, r4
     ee4:	d8e2      	bhi.n	eac <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
     ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     eea:	0000      	.short	0x0000
     eec:	20000e3a 	.word	0x20000e3a

00000ef0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
     ef0:	4904      	ldr	r1, [pc, #16]	; (f04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
     ef2:	784a      	ldrb	r2, [r1, #1]
     ef4:	4282      	cmp	r2, r0
     ef6:	d903      	bls.n	f00 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
     ef8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     efc:	1c80      	adds	r0, r0, #2
     efe:	4770      	bx	lr
     f00:	2000      	movs	r0, #0
     f02:	4770      	bx	lr
     f04:	20000e3a 	.word	0x20000e3a

00000f08 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
     f08:	4908      	ldr	r1, [pc, #32]	; (f2c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
     f0a:	784a      	ldrb	r2, [r1, #1]
     f0c:	4282      	cmp	r2, r0
     f0e:	d903      	bls.n	f18 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
     f10:	180a      	adds	r2, r1, r0
     f12:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
     f16:	b10a      	cbz	r2, f1c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
     f18:	2000      	movs	r0, #0
     f1a:	4770      	bx	lr
     f1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     f20:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f24:	f500 7085 	add.w	r0, r0, #266	; 0x10a
     f28:	4770      	bx	lr
     f2a:	0000      	.short	0x0000
     f2c:	20000e3a 	.word	0x20000e3a

00000f30 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
     f30:	b510      	push	{r4, lr}
     f32:	f44f 72c5 	mov.w	r2, #394	; 0x18a
     f36:	2100      	movs	r1, #0
     f38:	4805      	ldr	r0, [pc, #20]	; (f50 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
     f3a:	f009 f97b 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     f3e:	4805      	ldr	r0, [pc, #20]	; (f54 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
     f40:	2100      	movs	r1, #0
     f42:	7001      	strb	r1, [r0, #0]
     f44:	7041      	strb	r1, [r0, #1]
     f46:	f44f 7161 	mov.w	r1, #900	; 0x384
     f4a:	8041      	strh	r1, [r0, #2]
     f4c:	bd10      	pop	{r4, pc}
     f4e:	0000      	.short	0x0000
     f50:	20000e3a 	.word	0x20000e3a
     f54:	2000016c 	.word	0x2000016c

00000f58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
     f58:	4b0b      	ldr	r3, [pc, #44]	; (f88 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
     f5a:	b510      	push	{r4, lr}
     f5c:	785c      	ldrb	r4, [r3, #1]
     f5e:	4284      	cmp	r4, r0
     f60:	d910      	bls.n	f84 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
     f62:	4418      	add	r0, r3
     f64:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
     f68:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     f6c:	4418      	add	r0, r3
     f6e:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
     f72:	700b      	strb	r3, [r1, #0]
     f74:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
     f78:	6011      	str	r1, [r2, #0]
     f7a:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
     f7e:	8090      	strh	r0, [r2, #4]
     f80:	2001      	movs	r0, #1
     f82:	bd10      	pop	{r4, pc}
     f84:	2000      	movs	r0, #0
     f86:	bd10      	pop	{r4, pc}
     f88:	20000e3a 	.word	0x20000e3a

00000f8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
     f8c:	4801      	ldr	r0, [pc, #4]	; (f94 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
     f8e:	8840      	ldrh	r0, [r0, #2]
     f90:	4770      	bx	lr
     f92:	0000      	.short	0x0000
     f94:	2000016c 	.word	0x2000016c

00000f98 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	2401      	movs	r4, #1
     f9c:	4616      	mov	r6, r2
     f9e:	4625      	mov	r5, r4
     fa0:	f000 f856 	bl	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
     fa4:	2808      	cmp	r0, #8
     fa6:	d019      	beq.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fa8:	f000 f83e 	bl	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fac:	4603      	mov	r3, r0
     fae:	2808      	cmp	r0, #8
     fb0:	d014      	beq.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fb2:	b106      	cbz	r6, fb6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x16>
     fb4:	7033      	strb	r3, [r6, #0]
     fb6:	4618      	mov	r0, r3
     fb8:	f7ff ff9a 	bl	ef0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
     fbc:	b170      	cbz	r0, fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fbe:	480a      	ldr	r0, [pc, #40]	; (fe8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x48>)
     fc0:	7841      	ldrb	r1, [r0, #1]
     fc2:	4299      	cmp	r1, r3
     fc4:	d903      	bls.n	fce <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2e>
     fc6:	18c1      	adds	r1, r0, r3
     fc8:	f891 514a 	ldrb.w	r5, [r1, #330]	; 0x14a
     fcc:	e000      	b.n	fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
     fce:	2500      	movs	r5, #0
     fd0:	4418      	add	r0, r3
     fd2:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
     fd6:	2801      	cmp	r0, #1
     fd8:	d003      	beq.n	fe2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x42>
     fda:	2400      	movs	r4, #0
     fdc:	ea44 0005 	orr.w	r0, r4, r5
     fe0:	bd70      	pop	{r4, r5, r6, pc}
     fe2:	2401      	movs	r4, #1
     fe4:	e7fa      	b.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fe6:	0000      	.short	0x0000
     fe8:	20000e3a 	.word	0x20000e3a

00000fec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
     fec:	4901      	ldr	r1, [pc, #4]	; (ff4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
     fee:	7048      	strb	r0, [r1, #1]
     ff0:	4770      	bx	lr
     ff2:	0000      	.short	0x0000
     ff4:	2000016c 	.word	0x2000016c
     ff8:	4602      	mov	r2, r0
     ffa:	4809      	ldr	r0, [pc, #36]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     ffc:	b510      	push	{r4, lr}
     ffe:	7800      	ldrb	r0, [r0, #0]
    1000:	460b      	mov	r3, r1
    1002:	b158      	cbz	r0, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1004:	4807      	ldr	r0, [pc, #28]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1006:	7841      	ldrb	r1, [r0, #1]
    1008:	b141      	cbz	r1, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    100a:	b10b      	cbz	r3, 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    100c:	1c80      	adds	r0, r0, #2
    100e:	e001      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    1010:	4804      	ldr	r0, [pc, #16]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1012:	3082      	adds	r0, #130	; 0x82
    1014:	f002 fa2e 	bl	3474 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    1018:	2001      	movs	r0, #1
    101a:	bd10      	pop	{r4, pc}
    101c:	2000      	movs	r0, #0
    101e:	bd10      	pop	{r4, pc}
    1020:	2000016c 	.word	0x2000016c
    1024:	20000e3a 	.word	0x20000e3a
    1028:	4908      	ldr	r1, [pc, #32]	; (104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
    102a:	b510      	push	{r4, lr}
    102c:	4603      	mov	r3, r0
    102e:	2000      	movs	r0, #0
    1030:	784a      	ldrb	r2, [r1, #1]
    1032:	e006      	b.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    1034:	180c      	adds	r4, r1, r0
    1036:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    103a:	429c      	cmp	r4, r3
    103c:	d004      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    103e:	1c40      	adds	r0, r0, #1
    1040:	b2c0      	uxtb	r0, r0
    1042:	4282      	cmp	r2, r0
    1044:	d8f6      	bhi.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    1046:	2008      	movs	r0, #8
    1048:	bd10      	pop	{r4, pc}
    104a:	0000      	.short	0x0000
    104c:	20000e3a 	.word	0x20000e3a
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	4c1a      	ldr	r4, [pc, #104]	; (10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    1054:	4603      	mov	r3, r0
    1056:	2000      	movs	r0, #0
    1058:	7825      	ldrb	r5, [r4, #0]
    105a:	e02b      	b.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    105c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    1060:	4422      	add	r2, r4
    1062:	780f      	ldrb	r7, [r1, #0]
    1064:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    1068:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    106c:	ea87 070c 	eor.w	r7, r7, ip
    1070:	405e      	eors	r6, r3
    1072:	443e      	add	r6, r7
    1074:	784f      	ldrb	r7, [r1, #1]
    1076:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    107a:	ea87 070c 	eor.w	r7, r7, ip
    107e:	443e      	add	r6, r7
    1080:	788f      	ldrb	r7, [r1, #2]
    1082:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    1086:	ea87 070c 	eor.w	r7, r7, ip
    108a:	443e      	add	r6, r7
    108c:	78cf      	ldrb	r7, [r1, #3]
    108e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    1092:	ea87 070c 	eor.w	r7, r7, ip
    1096:	443e      	add	r6, r7
    1098:	790f      	ldrb	r7, [r1, #4]
    109a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    109e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    10a2:	ea87 070c 	eor.w	r7, r7, ip
    10a6:	443e      	add	r6, r7
    10a8:	794f      	ldrb	r7, [r1, #5]
    10aa:	4057      	eors	r7, r2
    10ac:	42f7      	cmn	r7, r6
    10ae:	d004      	beq.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10b0:	1c40      	adds	r0, r0, #1
    10b2:	b2c0      	uxtb	r0, r0
    10b4:	4285      	cmp	r5, r0
    10b6:	d8d1      	bhi.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    10b8:	2008      	movs	r0, #8
    10ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10bc:	20000e3a 	.word	0x20000e3a

000010c0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    10c0:	4902      	ldr	r1, [pc, #8]	; (10cc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    10c2:	f991 1000 	ldrsb.w	r1, [r1]
    10c6:	f008 b844 	b.w	9152 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    10ca:	0000      	.short	0x0000
    10cc:	20000184 	.word	0x20000184

000010d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    10d0:	b508      	push	{r3, lr}
    10d2:	207f      	movs	r0, #127	; 0x7f
    10d4:	f88d 0000 	strb.w	r0, [sp]
    10d8:	4668      	mov	r0, sp
    10da:	f002 fdaf 	bl	3c3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    10de:	b140      	cbz	r0, 10f2 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    10e0:	4805      	ldr	r0, [pc, #20]	; (10f8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    10e2:	7840      	ldrb	r0, [r0, #1]
    10e4:	4240      	negs	r0, r0
    10e6:	b241      	sxtb	r1, r0
    10e8:	f99d 0000 	ldrsb.w	r0, [sp]
    10ec:	f008 f831 	bl	9152 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    10f0:	bd08      	pop	{r3, pc}
    10f2:	f99d 0000 	ldrsb.w	r0, [sp]
    10f6:	bd08      	pop	{r3, pc}
    10f8:	20000184 	.word	0x20000184

000010fc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    10fc:	4a01      	ldr	r2, [pc, #4]	; (1104 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    10fe:	7010      	strb	r0, [r2, #0]
    1100:	7051      	strb	r1, [r2, #1]
    1102:	4770      	bx	lr
    1104:	20000184 	.word	0x20000184

00001108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    1108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    110c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 12b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ac>
    1110:	4f69      	ldr	r7, [pc, #420]	; (12b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    1112:	4683      	mov	fp, r0
    1114:	f04f 0a01 	mov.w	sl, #1
    1118:	2600      	movs	r6, #0
    111a:	6878      	ldr	r0, [r7, #4]
    111c:	4635      	mov	r5, r6
    111e:	7a00      	ldrb	r0, [r0, #8]
    1120:	f88d 0000 	strb.w	r0, [sp]
    1124:	9800      	ldr	r0, [sp, #0]
    1126:	9000      	str	r0, [sp, #0]
    1128:	f89d 1000 	ldrb.w	r1, [sp]
    112c:	2910      	cmp	r1, #16
    112e:	d106      	bne.n	113e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1130:	f899 1013 	ldrb.w	r1, [r9, #19]
    1134:	b119      	cbz	r1, 113e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1136:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    113a:	2800      	cmp	r0, #0
    113c:	d077      	beq.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    113e:	f88d 6000 	strb.w	r6, [sp]
    1142:	4668      	mov	r0, sp
    1144:	f000 f8c2 	bl	12cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    1148:	f89d 1000 	ldrb.w	r1, [sp]
    114c:	2900      	cmp	r1, #0
    114e:	d1f8      	bne.n	1142 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1150:	2800      	cmp	r0, #0
    1152:	d06c      	beq.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1154:	4604      	mov	r4, r0
    1156:	7a00      	ldrb	r0, [r0, #8]
    1158:	f88d 0000 	strb.w	r0, [sp]
    115c:	9800      	ldr	r0, [sp, #0]
    115e:	9000      	str	r0, [sp, #0]
    1160:	f89d 8000 	ldrb.w	r8, [sp]
    1164:	f104 0008 	add.w	r0, r4, #8
    1168:	2105      	movs	r1, #5
    116a:	9000      	str	r0, [sp, #0]
    116c:	7001      	strb	r1, [r0, #0]
    116e:	4640      	mov	r0, r8
    1170:	f1b8 0f06 	cmp.w	r8, #6
    1174:	d030      	beq.n	11d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd0>
    1176:	dc07      	bgt.n	1188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    1178:	2802      	cmp	r0, #2
    117a:	d00f      	beq.n	119c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    117c:	2803      	cmp	r0, #3
    117e:	d019      	beq.n	11b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    1180:	f1b8 0f04 	cmp.w	r8, #4
    1184:	d107      	bne.n	1196 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8e>
    1186:	e01f      	b.n	11c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    1188:	2808      	cmp	r0, #8
    118a:	d035      	beq.n	11f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    118c:	280f      	cmp	r0, #15
    118e:	d052      	beq.n	1236 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    1190:	f1b8 0f10 	cmp.w	r8, #16
    1194:	d059      	beq.n	124a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    1196:	f240 214a 	movw	r1, #586	; 0x24a
    119a:	e064      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    119c:	6862      	ldr	r2, [r4, #4]
    119e:	b132      	cbz	r2, 11ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    11a0:	4659      	mov	r1, fp
    11a2:	4620      	mov	r0, r4
    11a4:	4790      	blx	r2
    11a6:	2004      	movs	r0, #4
    11a8:	f360 0507 	bfi	r5, r0, #0, #8
    11ac:	e05e      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11ae:	f240 11c3 	movw	r1, #451	; 0x1c3
    11b2:	e058      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11b4:	6862      	ldr	r2, [r4, #4]
    11b6:	b122      	cbz	r2, 11c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xba>
    11b8:	4659      	mov	r1, fp
    11ba:	4620      	mov	r0, r4
    11bc:	4790      	blx	r2
    11be:	4605      	mov	r5, r0
    11c0:	e054      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11c2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    11c6:	e04e      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11c8:	6861      	ldr	r1, [r4, #4]
    11ca:	b111      	cbz	r1, 11d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    11cc:	4620      	mov	r0, r4
    11ce:	4788      	blx	r1
    11d0:	e04c      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11d2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    11d6:	e046      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11d8:	6862      	ldr	r2, [r4, #4]
    11da:	b132      	cbz	r2, 11ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    11dc:	4659      	mov	r1, fp
    11de:	4620      	mov	r0, r4
    11e0:	4790      	blx	r2
    11e2:	f001 fad1 	bl	2788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    11e6:	b118      	cbz	r0, 11f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    11e8:	e01f      	b.n	122a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    11ea:	f240 2111 	movw	r1, #529	; 0x211
    11ee:	e03a      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11f0:	f000 fac4 	bl	177c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    11f4:	b3a0      	cbz	r0, 1260 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    11f6:	e018      	b.n	122a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    11f8:	4601      	mov	r1, r0
    11fa:	6860      	ldr	r0, [r4, #4]
    11fc:	465d      	mov	r5, fp
    11fe:	b118      	cbz	r0, 1208 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    1200:	8804      	ldrh	r4, [r0, #0]
    1202:	2908      	cmp	r1, #8
    1204:	d111      	bne.n	122a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    1206:	e001      	b.n	120c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    1208:	21e5      	movs	r1, #229	; 0xe5
    120a:	e02c      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    120c:	4620      	mov	r0, r4
    120e:	f7ff fc5d 	bl	acc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1212:	b170      	cbz	r0, 1232 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1214:	706e      	strb	r6, [r5, #1]
    1216:	220f      	movs	r2, #15
    1218:	702a      	strb	r2, [r5, #0]
    121a:	80ec      	strh	r4, [r5, #6]
    121c:	f8a5 a008 	strh.w	sl, [r5, #8]
    1220:	4631      	mov	r1, r6
    1222:	f885 a004 	strb.w	sl, [r5, #4]
    1226:	f007 fd46 	bl	8cb6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    122a:	2004      	movs	r0, #4
    122c:	613e      	str	r6, [r7, #16]
    122e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1232:	21c5      	movs	r1, #197	; 0xc5
    1234:	e017      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    1236:	f88b 6001 	strb.w	r6, [fp, #1]
    123a:	211a      	movs	r1, #26
    123c:	f88b 1000 	strb.w	r1, [fp]
    1240:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1244:	f8cb 1004 	str.w	r1, [fp, #4]
    1248:	e7ad      	b.n	11a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    124a:	481c      	ldr	r0, [pc, #112]	; (12bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>)
    124c:	6802      	ldr	r2, [r0, #0]
    124e:	b122      	cbz	r2, 125a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    1250:	6860      	ldr	r0, [r4, #4]
    1252:	b130      	cbz	r0, 1262 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15a>
    1254:	8800      	ldrh	r0, [r0, #0]
    1256:	4659      	mov	r1, fp
    1258:	4790      	blx	r2
    125a:	2002      	movs	r0, #2
    125c:	613e      	str	r6, [r7, #16]
    125e:	e7e6      	b.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1260:	e004      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    1262:	f44f 7110 	mov.w	r1, #576	; 0x240
    1266:	2010      	movs	r0, #16
    1268:	f7ff f894 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    126c:	f3c5 2007 	ubfx	r0, r5, #8, #8
    1270:	2801      	cmp	r0, #1
    1272:	d010      	beq.n	1296 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    1274:	f3ef 8010 	mrs	r0, PRIMASK
    1278:	b672      	cpsid	i
    127a:	7a21      	ldrb	r1, [r4, #8]
    127c:	f88d 1000 	strb.w	r1, [sp]
    1280:	9900      	ldr	r1, [sp, #0]
    1282:	9100      	str	r1, [sp, #0]
    1284:	f89d 1000 	ldrb.w	r1, [sp]
    1288:	2905      	cmp	r1, #5
    128a:	d008      	beq.n	129e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    128c:	b139      	cbz	r1, 129e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    128e:	f366 0507 	bfi	r5, r6, #0, #8
    1292:	b138      	cbz	r0, 12a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    1294:	e007      	b.n	12a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    1296:	9800      	ldr	r0, [sp, #0]
    1298:	4641      	mov	r1, r8
    129a:	7001      	strb	r1, [r0, #0]
    129c:	e003      	b.n	12a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    129e:	7226      	strb	r6, [r4, #8]
    12a0:	613e      	str	r6, [r7, #16]
    12a2:	e7f6      	b.n	1292 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18a>
    12a4:	b662      	cpsie	i
    12a6:	f015 0fff 	tst.w	r5, #255	; 0xff
    12aa:	f43f af36 	beq.w	111a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    12ae:	b2e8      	uxtb	r0, r5
    12b0:	e7bd      	b.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    12b2:	0000      	.short	0x0000
    12b4:	20000d54 	.word	0x20000d54
    12b8:	20000d80 	.word	0x20000d80
    12bc:	20000080 	.word	0x20000080

000012c0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    12c0:	4901      	ldr	r1, [pc, #4]	; (12c8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    12c2:	7008      	strb	r0, [r1, #0]
    12c4:	f000 b864 	b.w	1390 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    12c8:	20000186 	.word	0x20000186
    12cc:	b538      	push	{r3, r4, r5, lr}
    12ce:	4603      	mov	r3, r0
    12d0:	4917      	ldr	r1, [pc, #92]	; (1330 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    12d2:	2000      	movs	r0, #0
    12d4:	7018      	strb	r0, [r3, #0]
    12d6:	6908      	ldr	r0, [r1, #16]
    12d8:	2401      	movs	r4, #1
    12da:	b140      	cbz	r0, 12ee <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    12dc:	7a02      	ldrb	r2, [r0, #8]
    12de:	f88d 2000 	strb.w	r2, [sp]
    12e2:	9a00      	ldr	r2, [sp, #0]
    12e4:	9200      	str	r2, [sp, #0]
    12e6:	f89d 5000 	ldrb.w	r5, [sp]
    12ea:	2d00      	cmp	r5, #0
    12ec:	d111      	bne.n	1312 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    12ee:	6848      	ldr	r0, [r1, #4]
    12f0:	7a02      	ldrb	r2, [r0, #8]
    12f2:	f88d 2000 	strb.w	r2, [sp]
    12f6:	9a00      	ldr	r2, [sp, #0]
    12f8:	9200      	str	r2, [sp, #0]
    12fa:	f89d 5000 	ldrb.w	r5, [sp]
    12fe:	2d01      	cmp	r5, #1
    1300:	d006      	beq.n	1310 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    1302:	f3ef 8210 	mrs	r2, PRIMASK
    1306:	b672      	cpsid	i
    1308:	6805      	ldr	r5, [r0, #0]
    130a:	604d      	str	r5, [r1, #4]
    130c:	b112      	cbz	r2, 1314 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    130e:	e002      	b.n	1316 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    1310:	2000      	movs	r0, #0
    1312:	bd38      	pop	{r3, r4, r5, pc}
    1314:	b662      	cpsie	i
    1316:	7a02      	ldrb	r2, [r0, #8]
    1318:	f88d 2000 	strb.w	r2, [sp]
    131c:	9a00      	ldr	r2, [sp, #0]
    131e:	9200      	str	r2, [sp, #0]
    1320:	f89d 5000 	ldrb.w	r5, [sp]
    1324:	b10d      	cbz	r5, 132a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    1326:	6108      	str	r0, [r1, #16]
    1328:	bd38      	pop	{r3, r4, r5, pc}
    132a:	701c      	strb	r4, [r3, #0]
    132c:	bd38      	pop	{r3, r4, r5, pc}
    132e:	0000      	.short	0x0000
    1330:	20000d80 	.word	0x20000d80
    1334:	b538      	push	{r3, r4, r5, lr}
    1336:	b1d0      	cbz	r0, 136e <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    1338:	6041      	str	r1, [r0, #4]
    133a:	f100 0108 	add.w	r1, r0, #8
    133e:	700a      	strb	r2, [r1, #0]
    1340:	f3ef 8310 	mrs	r3, PRIMASK
    1344:	b672      	cpsid	i
    1346:	4c10      	ldr	r4, [pc, #64]	; (1388 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    1348:	6004      	str	r4, [r0, #0]
    134a:	1f21      	subs	r1, r4, #4
    134c:	684a      	ldr	r2, [r1, #4]
    134e:	b14a      	cbz	r2, 1364 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1350:	7a12      	ldrb	r2, [r2, #8]
    1352:	f88d 2000 	strb.w	r2, [sp]
    1356:	9a00      	ldr	r2, [sp, #0]
    1358:	9200      	str	r2, [sp, #0]
    135a:	f89d 5000 	ldrb.w	r5, [sp]
    135e:	2d01      	cmp	r5, #1
    1360:	d100      	bne.n	1364 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1362:	600c      	str	r4, [r1, #0]
    1364:	680a      	ldr	r2, [r1, #0]
    1366:	6010      	str	r0, [r2, #0]
    1368:	6008      	str	r0, [r1, #0]
    136a:	b12b      	cbz	r3, 1378 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    136c:	e005      	b.n	137a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    136e:	f240 2175 	movw	r1, #629	; 0x275
    1372:	2010      	movs	r0, #16
    1374:	f7ff f80e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1378:	b662      	cpsie	i
    137a:	4804      	ldr	r0, [pc, #16]	; (138c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    137c:	7800      	ldrb	r0, [r0, #0]
    137e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1382:	f006 bd8d 	b.w	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1386:	0000      	.short	0x0000
    1388:	20000d84 	.word	0x20000d84
    138c:	20000186 	.word	0x20000186
    1390:	b510      	push	{r4, lr}
    1392:	2214      	movs	r2, #20
    1394:	2100      	movs	r1, #0
    1396:	4808      	ldr	r0, [pc, #32]	; (13b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1398:	f008 ff4c 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    139c:	4806      	ldr	r0, [pc, #24]	; (13b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    139e:	2212      	movs	r2, #18
    13a0:	2100      	movs	r1, #0
    13a2:	3814      	subs	r0, #20
    13a4:	f008 ff46 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    13a8:	4803      	ldr	r0, [pc, #12]	; (13b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    13aa:	2101      	movs	r1, #1
    13ac:	7301      	strb	r1, [r0, #12]
    13ae:	1d01      	adds	r1, r0, #4
    13b0:	6041      	str	r1, [r0, #4]
    13b2:	6001      	str	r1, [r0, #0]
    13b4:	bd10      	pop	{r4, pc}
    13b6:	0000      	.short	0x0000
    13b8:	20000d80 	.word	0x20000d80

000013bc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    13bc:	b510      	push	{r4, lr}
    13be:	4804      	ldr	r0, [pc, #16]	; (13d0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    13c0:	f007 ff46 	bl	9250 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    13c4:	4802      	ldr	r0, [pc, #8]	; (13d0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    13c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    13ca:	3008      	adds	r0, #8
    13cc:	f007 bf40 	b.w	9250 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    13d0:	20000084 	.word	0x20000084

000013d4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    13d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13d6:	f007 ff4f 	bl	9278 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    13da:	4604      	mov	r4, r0
    13dc:	460d      	mov	r5, r1
    13de:	466a      	mov	r2, sp
    13e0:	f000 f862 	bl	14a8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    13e4:	b108      	cbz	r0, 13ea <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    13e6:	2001      	movs	r0, #1
    13e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ea:	480f      	ldr	r0, [pc, #60]	; (1428 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    13ec:	7803      	ldrb	r3, [r0, #0]
    13ee:	7841      	ldrb	r1, [r0, #1]
    13f0:	428b      	cmp	r3, r1
    13f2:	d101      	bne.n	13f8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    13f4:	2000      	movs	r0, #0
    13f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f8:	461a      	mov	r2, r3
    13fa:	6841      	ldr	r1, [r0, #4]
    13fc:	e008      	b.n	1410 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    13fe:	bf00      	nop
    1400:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1404:	1e52      	subs	r2, r2, #1
    1406:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    140a:	e9c6 7c00 	strd	r7, ip, [r6]
    140e:	b2d2      	uxtb	r2, r2
    1410:	f89d 6000 	ldrb.w	r6, [sp]
    1414:	42b2      	cmp	r2, r6
    1416:	d8f3      	bhi.n	1400 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    1418:	b2f2      	uxtb	r2, r6
    141a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    141e:	1c5b      	adds	r3, r3, #1
    1420:	e9c1 4500 	strd	r4, r5, [r1]
    1424:	7003      	strb	r3, [r0, #0]
    1426:	e7de      	b.n	13e6 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    1428:	20000094 	.word	0x20000094

0000142c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    142c:	b510      	push	{r4, lr}
    142e:	0742      	lsls	r2, r0, #29
    1430:	d003      	beq.n	143a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    1432:	2163      	movs	r1, #99	; 0x63
    1434:	2048      	movs	r0, #72	; 0x48
    1436:	f7fe ffad 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    143a:	b120      	cbz	r0, 1446 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    143c:	4a03      	ldr	r2, [pc, #12]	; (144c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    143e:	7051      	strb	r1, [r2, #1]
    1440:	6050      	str	r0, [r2, #4]
    1442:	2000      	movs	r0, #0
    1444:	7010      	strb	r0, [r2, #0]
    1446:	00c8      	lsls	r0, r1, #3
    1448:	bd10      	pop	{r4, pc}
    144a:	0000      	.short	0x0000
    144c:	20000094 	.word	0x20000094

00001450 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    1450:	b538      	push	{r3, r4, r5, lr}
    1452:	f007 ff11 	bl	9278 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    1456:	466a      	mov	r2, sp
    1458:	f000 f826 	bl	14a8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    145c:	2800      	cmp	r0, #0
    145e:	d014      	beq.n	148a <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    1460:	4a0a      	ldr	r2, [pc, #40]	; (148c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    1462:	7810      	ldrb	r0, [r2, #0]
    1464:	1e40      	subs	r0, r0, #1
    1466:	b2c1      	uxtb	r1, r0
    1468:	7011      	strb	r1, [r2, #0]
    146a:	f89d 0000 	ldrb.w	r0, [sp]
    146e:	6852      	ldr	r2, [r2, #4]
    1470:	e008      	b.n	1484 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    1472:	bf00      	nop
    1474:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    1478:	1c40      	adds	r0, r0, #1
    147a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    147e:	e9c3 4500 	strd	r4, r5, [r3]
    1482:	b2c0      	uxtb	r0, r0
    1484:	4288      	cmp	r0, r1
    1486:	d3f5      	bcc.n	1474 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    1488:	2001      	movs	r0, #1
    148a:	bd38      	pop	{r3, r4, r5, pc}
    148c:	20000094 	.word	0x20000094

00001490 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    1490:	4901      	ldr	r1, [pc, #4]	; (1498 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    1492:	2000      	movs	r0, #0
    1494:	7008      	strb	r0, [r1, #0]
    1496:	4770      	bx	lr
    1498:	20000094 	.word	0x20000094

0000149c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    149c:	4801      	ldr	r0, [pc, #4]	; (14a4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    149e:	7840      	ldrb	r0, [r0, #1]
    14a0:	4770      	bx	lr
    14a2:	0000      	.short	0x0000
    14a4:	20000094 	.word	0x20000094
    14a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14aa:	4d20      	ldr	r5, [pc, #128]	; (152c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    14ac:	2300      	movs	r3, #0
    14ae:	7013      	strb	r3, [r2, #0]
    14b0:	782b      	ldrb	r3, [r5, #0]
    14b2:	b323      	cbz	r3, 14fe <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    14b4:	2400      	movs	r4, #0
    14b6:	1e5b      	subs	r3, r3, #1
    14b8:	b2db      	uxtb	r3, r3
    14ba:	f8d5 c004 	ldr.w	ip, [r5, #4]
    14be:	e00b      	b.n	14d8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    14c0:	18e5      	adds	r5, r4, r3
    14c2:	086d      	lsrs	r5, r5, #1
    14c4:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    14c8:	e9d6 7600 	ldrd	r7, r6, [r6]
    14cc:	1a3f      	subs	r7, r7, r0
    14ce:	418e      	sbcs	r6, r1
    14d0:	d201      	bcs.n	14d6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    14d2:	462c      	mov	r4, r5
    14d4:	e000      	b.n	14d8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    14d6:	462b      	mov	r3, r5
    14d8:	1b1d      	subs	r5, r3, r4
    14da:	2d01      	cmp	r5, #1
    14dc:	dcf0      	bgt.n	14c0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    14de:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    14e2:	e9d6 5600 	ldrd	r5, r6, [r6]
    14e6:	ea80 0705 	eor.w	r7, r0, r5
    14ea:	ea81 0e06 	eor.w	lr, r1, r6
    14ee:	ea57 070e 	orrs.w	r7, r7, lr
    14f2:	d005      	beq.n	1500 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    14f4:	1b45      	subs	r5, r0, r5
    14f6:	eb71 0506 	sbcs.w	r5, r1, r6
    14fa:	d203      	bcs.n	1504 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    14fc:	7014      	strb	r4, [r2, #0]
    14fe:	e010      	b.n	1522 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    1500:	7014      	strb	r4, [r2, #0]
    1502:	e011      	b.n	1528 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    1504:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    1508:	e9d5 4500 	ldrd	r4, r5, [r5]
    150c:	ea80 0604 	eor.w	r6, r0, r4
    1510:	ea81 0705 	eor.w	r7, r1, r5
    1514:	433e      	orrs	r6, r7
    1516:	d006      	beq.n	1526 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    1518:	1b00      	subs	r0, r0, r4
    151a:	41a9      	sbcs	r1, r5
    151c:	d300      	bcc.n	1520 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    151e:	1c5b      	adds	r3, r3, #1
    1520:	7013      	strb	r3, [r2, #0]
    1522:	2000      	movs	r0, #0
    1524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1526:	7013      	strb	r3, [r2, #0]
    1528:	2001      	movs	r0, #1
    152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    152c:	20000094 	.word	0x20000094

00001530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    1530:	4801      	ldr	r0, [pc, #4]	; (1538 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    1532:	6840      	ldr	r0, [r0, #4]
    1534:	30a0      	adds	r0, #160	; 0xa0
    1536:	4770      	bx	lr
    1538:	2000009c 	.word	0x2000009c

0000153c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    153c:	b510      	push	{r4, lr}
    153e:	4c21      	ldr	r4, [pc, #132]	; (15c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    1540:	6860      	ldr	r0, [r4, #4]
    1542:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    1546:	f007 fec7 	bl	92d8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    154a:	6861      	ldr	r1, [r4, #4]
    154c:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    1550:	314a      	adds	r1, #74	; 0x4a
    1552:	f7ff fc39 	bl	dc8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    1556:	6860      	ldr	r0, [r4, #4]
    1558:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    155c:	f007 fec3 	bl	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    1560:	6861      	ldr	r1, [r4, #4]
    1562:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    1566:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    156a:	314a      	adds	r1, #74	; 0x4a
    156c:	f007 fea0 	bl	92b0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    1570:	b930      	cbnz	r0, 1580 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    1572:	6861      	ldr	r1, [r4, #4]
    1574:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1578:	314a      	adds	r1, #74	; 0x4a
    157a:	f007 fea2 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    157e:	b108      	cbz	r0, 1584 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    1580:	2101      	movs	r1, #1
    1582:	e000      	b.n	1586 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    1584:	2100      	movs	r1, #0
    1586:	6860      	ldr	r0, [r4, #4]
    1588:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    158c:	b919      	cbnz	r1, 1596 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    158e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1592:	2800      	cmp	r0, #0
    1594:	d014      	beq.n	15c0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    1596:	f7ff fcf9 	bl	f8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    159a:	490b      	ldr	r1, [pc, #44]	; (15c8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    159c:	fba0 2301 	umull	r2, r3, r0, r1
    15a0:	6860      	ldr	r0, [r4, #4]
    15a2:	3090      	adds	r0, #144	; 0x90
    15a4:	f007 fefd 	bl	93a2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    15a8:	6860      	ldr	r0, [r4, #4]
    15aa:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    15ae:	b110      	cbz	r0, 15b6 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    15b0:	2000      	movs	r0, #0
    15b2:	f7ff fc75 	bl	ea0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    15b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15ba:	2000      	movs	r0, #0
    15bc:	f000 bcc0 	b.w	1f40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>
    15c0:	bd10      	pop	{r4, pc}
    15c2:	0000      	.short	0x0000
    15c4:	2000009c 	.word	0x2000009c
    15c8:	000f4240 	.word	0x000f4240

000015cc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    15cc:	4a04      	ldr	r2, [pc, #16]	; (15e0 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    15ce:	2803      	cmp	r0, #3
    15d0:	6852      	ldr	r2, [r2, #4]
    15d2:	d100      	bne.n	15d6 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    15d4:	6551      	str	r1, [r2, #84]	; 0x54
    15d6:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    15da:	2000      	movs	r0, #0
    15dc:	4770      	bx	lr
    15de:	0000      	.short	0x0000
    15e0:	2000009c 	.word	0x2000009c

000015e4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    15e4:	480a      	ldr	r0, [pc, #40]	; (1610 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    15e6:	6841      	ldr	r1, [r0, #4]
    15e8:	6e88      	ldr	r0, [r1, #104]	; 0x68
    15ea:	b170      	cbz	r0, 160a <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    15ec:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    15f0:	22ff      	movs	r2, #255	; 0xff
    15f2:	7002      	strb	r2, [r0, #0]
    15f4:	2200      	movs	r2, #0
    15f6:	668a      	str	r2, [r1, #104]	; 0x68
    15f8:	7002      	strb	r2, [r0, #0]
    15fa:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    15fe:	2001      	movs	r0, #1
    1600:	4088      	lsls	r0, r1
    1602:	4904      	ldr	r1, [pc, #16]	; (1614 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    1604:	6008      	str	r0, [r1, #0]
    1606:	2000      	movs	r0, #0
    1608:	4770      	bx	lr
    160a:	200c      	movs	r0, #12
    160c:	4770      	bx	lr
    160e:	0000      	.short	0x0000
    1610:	2000009c 	.word	0x2000009c
    1614:	4001f508 	.word	0x4001f508

00001618 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    1618:	4602      	mov	r2, r0
    161a:	480c      	ldr	r0, [pc, #48]	; (164c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    161c:	b510      	push	{r4, lr}
    161e:	6082      	str	r2, [r0, #8]
    1620:	68c0      	ldr	r0, [r0, #12]
    1622:	460c      	mov	r4, r1
    1624:	b168      	cbz	r0, 1642 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    1626:	f000 fe69 	bl	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    162a:	f007 ffa0 	bl	956e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    162e:	4620      	mov	r0, r4
    1630:	f000 f830 	bl	1694 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    1634:	2800      	cmp	r0, #0
    1636:	d007      	beq.n	1648 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    1638:	f640 11bb 	movw	r1, #2491	; 0x9bb
    163c:	2032      	movs	r0, #50	; 0x32
    163e:	f7fe fea9 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1642:	f640 11b5 	movw	r1, #2485	; 0x9b5
    1646:	e7f9      	b.n	163c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    1648:	bd10      	pop	{r4, pc}
    164a:	0000      	.short	0x0000
    164c:	2000009c 	.word	0x2000009c

00001650 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    1650:	4902      	ldr	r1, [pc, #8]	; (165c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    1652:	4801      	ldr	r0, [pc, #4]	; (1658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    1654:	60c8      	str	r0, [r1, #12]
    1656:	4770      	bx	lr
    1658:	000024b0 	.word	0x000024b0
    165c:	2000009c 	.word	0x2000009c

00001660 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    1660:	b570      	push	{r4, r5, r6, lr}
    1662:	4605      	mov	r5, r0
    1664:	f7ff fa4a 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    1668:	4604      	mov	r4, r0
    166a:	f7ff fa4d 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    166e:	4621      	mov	r1, r4
    1670:	f007 fe95 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    1674:	0001      	movs	r1, r0
    1676:	d006      	beq.n	1686 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    1678:	4805      	ldr	r0, [pc, #20]	; (1690 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    167a:	68c0      	ldr	r0, [r0, #12]
    167c:	6802      	ldr	r2, [r0, #0]
    167e:	4628      	mov	r0, r5
    1680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1684:	4710      	bx	r2
    1686:	f640 21b1 	movw	r1, #2737	; 0xab1
    168a:	2032      	movs	r0, #50	; 0x32
    168c:	f7fe fe82 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1690:	2000009c 	.word	0x2000009c

00001694 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	4d19      	ldr	r5, [pc, #100]	; (16fc <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    1698:	4604      	mov	r4, r0
    169a:	6868      	ldr	r0, [r5, #4]
    169c:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    16a0:	2901      	cmp	r1, #1
    16a2:	d004      	beq.n	16ae <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    16a4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    16a8:	b108      	cbz	r0, 16ae <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    16aa:	200c      	movs	r0, #12
    16ac:	bd70      	pop	{r4, r5, r6, pc}
    16ae:	f7ff fa4f 	bl	b50 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    16b2:	f007 ff5c 	bl	956e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    16b6:	f000 f8b9 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    16ba:	2246      	movs	r2, #70	; 0x46
    16bc:	2100      	movs	r1, #0
    16be:	6868      	ldr	r0, [r5, #4]
    16c0:	f008 fdb8 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    16c4:	6869      	ldr	r1, [r5, #4]
    16c6:	2200      	movs	r2, #0
    16c8:	2001      	movs	r0, #1
    16ca:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    16ce:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    16d2:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    16d6:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    16da:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    16de:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    16e2:	2007      	movs	r0, #7
    16e4:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    16e8:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    16ec:	23ff      	movs	r3, #255	; 0xff
    16ee:	7003      	strb	r3, [r0, #0]
    16f0:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    16f4:	668a      	str	r2, [r1, #104]	; 0x68
    16f6:	7002      	strb	r2, [r0, #0]
    16f8:	2000      	movs	r0, #0
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	2000009c 	.word	0x2000009c

00001700 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    1700:	4805      	ldr	r0, [pc, #20]	; (1718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    1702:	b510      	push	{r4, lr}
    1704:	6840      	ldr	r0, [r0, #4]
    1706:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    170a:	f007 fde5 	bl	92d8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    170e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1712:	f7ff bb85 	b.w	e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1716:	0000      	.short	0x0000
    1718:	2000009c 	.word	0x2000009c

0000171c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    171c:	b140      	cbz	r0, 1730 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    171e:	2802      	cmp	r0, #2
    1720:	d006      	beq.n	1730 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    1722:	2200      	movs	r2, #0
    1724:	4903      	ldr	r1, [pc, #12]	; (1734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    1726:	6849      	ldr	r1, [r1, #4]
    1728:	f801 2f51 	strb.w	r2, [r1, #81]!
    172c:	7208      	strb	r0, [r1, #8]
    172e:	4770      	bx	lr
    1730:	2201      	movs	r2, #1
    1732:	e7f7      	b.n	1724 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    1734:	2000009c 	.word	0x2000009c

00001738 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    1738:	b510      	push	{r4, lr}
    173a:	4603      	mov	r3, r0
    173c:	7800      	ldrb	r0, [r0, #0]
    173e:	07c0      	lsls	r0, r0, #31
    1740:	d005      	beq.n	174e <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    1742:	7858      	ldrb	r0, [r3, #1]
    1744:	2100      	movs	r1, #0
    1746:	f7ff ff41 	bl	15cc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    174a:	2800      	cmp	r0, #0
    174c:	d10c      	bne.n	1768 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    174e:	4c07      	ldr	r4, [pc, #28]	; (176c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    1750:	7898      	ldrb	r0, [r3, #2]
    1752:	6861      	ldr	r1, [r4, #4]
    1754:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    1758:	78d8      	ldrb	r0, [r3, #3]
    175a:	f7ff ffdf 	bl	171c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    175e:	6861      	ldr	r1, [r4, #4]
    1760:	7918      	ldrb	r0, [r3, #4]
    1762:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    1766:	2000      	movs	r0, #0
    1768:	bd10      	pop	{r4, pc}
    176a:	0000      	.short	0x0000
    176c:	2000009c 	.word	0x2000009c

00001770 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    1770:	4801      	ldr	r0, [pc, #4]	; (1778 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    1772:	68c0      	ldr	r0, [r0, #12]
    1774:	6840      	ldr	r0, [r0, #4]
    1776:	4700      	bx	r0
    1778:	2000009c 	.word	0x2000009c

0000177c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    177c:	4807      	ldr	r0, [pc, #28]	; (179c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    177e:	b508      	push	{r3, lr}
    1780:	6840      	ldr	r0, [r0, #4]
    1782:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    1786:	f88d 0000 	strb.w	r0, [sp]
    178a:	9800      	ldr	r0, [sp, #0]
    178c:	9000      	str	r0, [sp, #0]
    178e:	f89d 0000 	ldrb.w	r0, [sp]
    1792:	2800      	cmp	r0, #0
    1794:	d000      	beq.n	1798 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    1796:	2001      	movs	r0, #1
    1798:	bd08      	pop	{r3, pc}
    179a:	0000      	.short	0x0000
    179c:	2000009c 	.word	0x2000009c

000017a0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    17a0:	b510      	push	{r4, lr}
    17a2:	f000 f903 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    17a6:	4b0c      	ldr	r3, [pc, #48]	; (17d8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    17a8:	b140      	cbz	r0, 17bc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    17aa:	6858      	ldr	r0, [r3, #4]
    17ac:	2101      	movs	r1, #1
    17ae:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    17b2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    17b4:	8809      	ldrh	r1, [r1, #0]
    17b6:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    17ba:	e004      	b.n	17c6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    17bc:	6859      	ldr	r1, [r3, #4]
    17be:	2000      	movs	r0, #0
    17c0:	f801 0f42 	strb.w	r0, [r1, #66]!
    17c4:	8048      	strh	r0, [r1, #2]
    17c6:	6858      	ldr	r0, [r3, #4]
    17c8:	2202      	movs	r2, #2
    17ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17ce:	4903      	ldr	r1, [pc, #12]	; (17dc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    17d0:	3038      	adds	r0, #56	; 0x38
    17d2:	f007 bd29 	b.w	9228 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    17d6:	0000      	.short	0x0000
    17d8:	2000009c 	.word	0x2000009c
    17dc:	00002295 	.word	0x00002295

000017e0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    17e0:	4802      	ldr	r0, [pc, #8]	; (17ec <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    17e2:	6840      	ldr	r0, [r0, #4]
    17e4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    17e8:	4770      	bx	lr
    17ea:	0000      	.short	0x0000
    17ec:	2000009c 	.word	0x2000009c

000017f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    17f0:	b510      	push	{r4, lr}
    17f2:	f000 f8db 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    17f6:	490c      	ldr	r1, [pc, #48]	; (1828 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    17f8:	b128      	cbz	r0, 1806 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    17fa:	6848      	ldr	r0, [r1, #4]
    17fc:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    1800:	2801      	cmp	r0, #1
    1802:	d00e      	beq.n	1822 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    1804:	e00c      	b.n	1820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    1806:	6849      	ldr	r1, [r1, #4]
    1808:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    180c:	2801      	cmp	r0, #1
    180e:	d001      	beq.n	1814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    1810:	2802      	cmp	r0, #2
    1812:	d105      	bne.n	1820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    1814:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    1818:	2801      	cmp	r0, #1
    181a:	d003      	beq.n	1824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    181c:	2803      	cmp	r0, #3
    181e:	d001      	beq.n	1824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    1820:	2000      	movs	r0, #0
    1822:	bd10      	pop	{r4, pc}
    1824:	2001      	movs	r0, #1
    1826:	bd10      	pop	{r4, pc}
    1828:	2000009c 	.word	0x2000009c
    182c:	b510      	push	{r4, lr}
    182e:	4c07      	ldr	r4, [pc, #28]	; (184c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    1830:	6860      	ldr	r0, [r4, #4]
    1832:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    1836:	2800      	cmp	r0, #0
    1838:	d007      	beq.n	184a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    183a:	f001 ff13 	bl	3664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    183e:	f001 fe31 	bl	34a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1842:	6861      	ldr	r1, [r4, #4]
    1844:	2000      	movs	r0, #0
    1846:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    184a:	bd10      	pop	{r4, pc}
    184c:	2000009c 	.word	0x2000009c
    1850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1854:	4d10      	ldr	r5, [pc, #64]	; (1898 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    1856:	4606      	mov	r6, r0
    1858:	460f      	mov	r7, r1
    185a:	6868      	ldr	r0, [r5, #4]
    185c:	490f      	ldr	r1, [pc, #60]	; (189c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    185e:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    1862:	5c0c      	ldrb	r4, [r1, r0]
    1864:	4620      	mov	r0, r4
    1866:	f002 fa2f 	bl	3cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    186a:	6868      	ldr	r0, [r5, #4]
    186c:	2101      	movs	r1, #1
    186e:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
    1872:	2025      	movs	r0, #37	; 0x25
    1874:	f002 f9fe 	bl	3c74 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1878:	4638      	mov	r0, r7
    187a:	f002 f939 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    187e:	f04f 0101 	mov.w	r1, #1
    1882:	4608      	mov	r0, r1
    1884:	b126      	cbz	r6, 1890 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    1886:	f001 ff99 	bl	37bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    188a:	b918      	cbnz	r0, 1894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1890:	f001 ff5a 	bl	3748 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    1894:	2001      	movs	r0, #1
    1896:	e7f9      	b.n	188c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    1898:	2000009c 	.word	0x2000009c
    189c:	0000a37e 	.word	0x0000a37e
    18a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18a2:	2600      	movs	r6, #0
    18a4:	460f      	mov	r7, r1
    18a6:	4605      	mov	r5, r0
    18a8:	f88d 6000 	strb.w	r6, [sp]
    18ac:	466b      	mov	r3, sp
    18ae:	f000 f895 	bl	19dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ec>
    18b2:	0001      	movs	r1, r0
    18b4:	4810      	ldr	r0, [pc, #64]	; (18f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>)
    18b6:	d003      	beq.n	18c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    18b8:	6840      	ldr	r0, [r0, #4]
    18ba:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    18be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18c0:	6840      	ldr	r0, [r0, #4]
    18c2:	f89d 1000 	ldrb.w	r1, [sp]
    18c6:	2f07      	cmp	r7, #7
    18c8:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    18cc:	d301      	bcc.n	18d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2>
    18ce:	4634      	mov	r4, r6
    18d0:	e002      	b.n	18d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    18d2:	0022      	movs	r2, r4
    18d4:	d100      	bne.n	18d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    18d6:	460c      	mov	r4, r1
    18d8:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    18dc:	6869      	ldr	r1, [r5, #4]
    18de:	2900      	cmp	r1, #0
    18e0:	d0ed      	beq.n	18be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce>
    18e2:	7c69      	ldrb	r1, [r5, #17]
    18e4:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    18e8:	6869      	ldr	r1, [r5, #4]
    18ea:	680a      	ldr	r2, [r1, #0]
    18ec:	f840 2f83 	str.w	r2, [r0, #131]!
    18f0:	8889      	ldrh	r1, [r1, #4]
    18f2:	8081      	strh	r1, [r0, #4]
    18f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f6:	0000      	.short	0x0000
    18f8:	2000009c 	.word	0x2000009c
    18fc:	b510      	push	{r4, lr}
    18fe:	4915      	ldr	r1, [pc, #84]	; (1954 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x164>)
    1900:	6842      	ldr	r2, [r0, #4]
    1902:	6849      	ldr	r1, [r1, #4]
    1904:	7813      	ldrb	r3, [r2, #0]
    1906:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    190a:	42a3      	cmp	r3, r4
    190c:	d11f      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    190e:	7853      	ldrb	r3, [r2, #1]
    1910:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    1914:	42a3      	cmp	r3, r4
    1916:	d11a      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1918:	7893      	ldrb	r3, [r2, #2]
    191a:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    191e:	42a3      	cmp	r3, r4
    1920:	d115      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1922:	78d3      	ldrb	r3, [r2, #3]
    1924:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    1928:	42a3      	cmp	r3, r4
    192a:	d110      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    192c:	7913      	ldrb	r3, [r2, #4]
    192e:	f891 4087 	ldrb.w	r4, [r1, #135]	; 0x87
    1932:	42a3      	cmp	r3, r4
    1934:	d10b      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1936:	7952      	ldrb	r2, [r2, #5]
    1938:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
    193c:	429a      	cmp	r2, r3
    193e:	d106      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1940:	7c40      	ldrb	r0, [r0, #17]
    1942:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    1946:	4288      	cmp	r0, r1
    1948:	d101      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    194a:	2001      	movs	r0, #1
    194c:	bd10      	pop	{r4, pc}
    194e:	2000      	movs	r0, #0
    1950:	bd10      	pop	{r4, pc}
    1952:	0000      	.short	0x0000
    1954:	2000009c 	.word	0x2000009c
    1958:	b510      	push	{r4, lr}
    195a:	7801      	ldrb	r1, [r0, #0]
    195c:	b08c      	sub	sp, #48	; 0x30
    195e:	f001 040f 	and.w	r4, r1, #15
    1962:	4622      	mov	r2, r4
    1964:	a901      	add	r1, sp, #4
    1966:	f000 fe31 	bl	25cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    196a:	f001 fe9d 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    196e:	f000 fb27 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    1972:	2c04      	cmp	r4, #4
    1974:	d114      	bne.n	19a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    1976:	a801      	add	r0, sp, #4
    1978:	f7ff ffc0 	bl	18fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    197c:	b180      	cbz	r0, 19a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    197e:	a80b      	add	r0, sp, #44	; 0x2c
    1980:	f000 fb26 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1984:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    1988:	9000      	str	r0, [sp, #0]
    198a:	4807      	ldr	r0, [pc, #28]	; (19a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>)
    198c:	6840      	ldr	r0, [r0, #4]
    198e:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    1992:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    1996:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    199a:	a801      	add	r0, sp, #4
    199c:	f007 fd9c 	bl	94d8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    19a0:	b00c      	add	sp, #48	; 0x30
    19a2:	2005      	movs	r0, #5
    19a4:	bd10      	pop	{r4, pc}
    19a6:	0000      	.short	0x0000
    19a8:	2000009c 	.word	0x2000009c
    19ac:	4804      	ldr	r0, [pc, #16]	; (19c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d0>)
    19ae:	6840      	ldr	r0, [r0, #4]
    19b0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    19b4:	2803      	cmp	r0, #3
    19b6:	d001      	beq.n	19bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1cc>
    19b8:	2000      	movs	r0, #0
    19ba:	4770      	bx	lr
    19bc:	2001      	movs	r0, #1
    19be:	4770      	bx	lr
    19c0:	2000009c 	.word	0x2000009c
    19c4:	7c82      	ldrb	r2, [r0, #18]
    19c6:	6883      	ldr	r3, [r0, #8]
    19c8:	4803      	ldr	r0, [pc, #12]	; (19d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e8>)
    19ca:	6841      	ldr	r1, [r0, #4]
    19cc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    19d0:	314a      	adds	r1, #74	; 0x4a
    19d2:	f007 ba94 	b.w	8efe <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    19d6:	0000      	.short	0x0000
    19d8:	2000009c 	.word	0x2000009c
    19dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    19de:	6841      	ldr	r1, [r0, #4]
    19e0:	461e      	mov	r6, r3
    19e2:	4604      	mov	r4, r0
    19e4:	b301      	cbz	r1, 1a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x238>
    19e6:	7c60      	ldrb	r0, [r4, #17]
    19e8:	f007 fc6b 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    19ec:	4d19      	ldr	r5, [pc, #100]	; (1a54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    19ee:	6869      	ldr	r1, [r5, #4]
    19f0:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    19f4:	b141      	cbz	r1, 1a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    19f6:	b138      	cbz	r0, 1a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    19f8:	f007 fb17 	bl	902a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    19fc:	6869      	ldr	r1, [r5, #4]
    19fe:	f801 0f78 	strb.w	r0, [r1, #120]!
    1a02:	7048      	strb	r0, [r1, #1]
    1a04:	2001      	movs	r0, #1
    1a06:	71c8      	strb	r0, [r1, #7]
    1a08:	6868      	ldr	r0, [r5, #4]
    1a0a:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1a0e:	28ff      	cmp	r0, #255	; 0xff
    1a10:	d00c      	beq.n	1a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23c>
    1a12:	466a      	mov	r2, sp
    1a14:	a902      	add	r1, sp, #8
    1a16:	f7ff fa9f 	bl	f58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    1a1a:	b1a8      	cbz	r0, 1a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    1a1c:	4669      	mov	r1, sp
    1a1e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1a22:	f007 fc22 	bl	926a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    1a26:	7030      	strb	r0, [r6, #0]
    1a28:	2000      	movs	r0, #0
    1a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a2c:	7c60      	ldrb	r0, [r4, #17]
    1a2e:	6861      	ldr	r1, [r4, #4]
    1a30:	f007 fc1b 	bl	926a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    1a34:	7030      	strb	r0, [r6, #0]
    1a36:	686a      	ldr	r2, [r5, #4]
    1a38:	7c60      	ldrb	r0, [r4, #17]
    1a3a:	6861      	ldr	r1, [r4, #4]
    1a3c:	3278      	adds	r2, #120	; 0x78
    1a3e:	f7ff faab 	bl	f98 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    1a42:	f080 0001 	eor.w	r0, r0, #1
    1a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a48:	f640 5134 	movw	r1, #3380	; 0xd34
    1a4c:	2032      	movs	r0, #50	; 0x32
    1a4e:	f7fe fca1 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a52:	0000      	.short	0x0000
    1a54:	2000009c 	.word	0x2000009c
    1a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a5c:	4c4c      	ldr	r4, [pc, #304]	; (1b90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    1a5e:	4606      	mov	r6, r0
    1a60:	2100      	movs	r1, #0
    1a62:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    1a66:	3570      	adds	r5, #112	; 0x70
    1a68:	8001      	strh	r1, [r0, #0]
    1a6a:	2e03      	cmp	r6, #3
    1a6c:	d002      	beq.n	1a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>
    1a6e:	2e05      	cmp	r6, #5
    1a70:	d004      	beq.n	1a7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x28c>
    1a72:	e051      	b.n	1b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    1a74:	2103      	movs	r1, #3
    1a76:	f007 fba0 	bl	91ba <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1a7a:	e04d      	b.n	1b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    1a7c:	2105      	movs	r1, #5
    1a7e:	f007 fb9c 	bl	91ba <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1a82:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1a86:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1a88:	6949      	ldr	r1, [r1, #20]
    1a8a:	f8c7 100f 	str.w	r1, [r7, #15]
    1a8e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1a90:	69c9      	ldr	r1, [r1, #28]
    1a92:	74f9      	strb	r1, [r7, #19]
    1a94:	0a0a      	lsrs	r2, r1, #8
    1a96:	753a      	strb	r2, [r7, #20]
    1a98:	0c09      	lsrs	r1, r1, #16
    1a9a:	7579      	strb	r1, [r7, #21]
    1a9c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1a9e:	6901      	ldr	r1, [r0, #16]
    1aa0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    1aa2:	f007 fb4c 	bl	913e <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    1aa6:	75b8      	strb	r0, [r7, #22]
    1aa8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1aac:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1aae:	6901      	ldr	r1, [r0, #16]
    1ab0:	6a00      	ldr	r0, [r0, #32]
    1ab2:	f007 fb35 	bl	9120 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    1ab6:	75f8      	strb	r0, [r7, #23]
    1ab8:	0a00      	lsrs	r0, r0, #8
    1aba:	7638      	strb	r0, [r7, #24]
    1abc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1ac0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1ac2:	6900      	ldr	r0, [r0, #16]
    1ac4:	f007 fae9 	bl	909a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    1ac8:	7678      	strb	r0, [r7, #25]
    1aca:	0a00      	lsrs	r0, r0, #8
    1acc:	76b8      	strb	r0, [r7, #26]
    1ace:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1ad2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1ad4:	8b09      	ldrh	r1, [r1, #24]
    1ad6:	f807 1f1b 	strb.w	r1, [r7, #27]!
    1ada:	0a09      	lsrs	r1, r1, #8
    1adc:	7079      	strb	r1, [r7, #1]
    1ade:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1ae0:	8b49      	ldrh	r1, [r1, #26]
    1ae2:	70b9      	strb	r1, [r7, #2]
    1ae4:	0a09      	lsrs	r1, r1, #8
    1ae6:	70f9      	strb	r1, [r7, #3]
    1ae8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1aea:	f851 2fae 	ldr.w	r2, [r1, #174]!
    1aee:	607a      	str	r2, [r7, #4]
    1af0:	7909      	ldrb	r1, [r1, #4]
    1af2:	7239      	strb	r1, [r7, #8]
    1af4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1af6:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    1afa:	7a78      	ldrb	r0, [r7, #9]
    1afc:	f001 011f 	and.w	r1, r1, #31
    1b00:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    1b04:	4308      	orrs	r0, r1
    1b06:	7278      	strb	r0, [r7, #9]
    1b08:	f001 fcac 	bl	3464 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    1b0c:	7a79      	ldrb	r1, [r7, #9]
    1b0e:	f001 011f 	and.w	r1, r1, #31
    1b12:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    1b16:	7279      	strb	r1, [r7, #9]
    1b18:	f105 0113 	add.w	r1, r5, #19
    1b1c:	68a0      	ldr	r0, [r4, #8]
    1b1e:	f007 fb67 	bl	91f0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1b22:	7ea9      	ldrb	r1, [r5, #26]
    1b24:	68a0      	ldr	r0, [r4, #8]
    1b26:	f007 fb69 	bl	91fc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    1b2a:	6860      	ldr	r0, [r4, #4]
    1b2c:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    1b30:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    1b34:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1b38:	b188      	cbz	r0, 1b5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    1b3a:	f7ff ff37 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1b3e:	b130      	cbz	r0, 1b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    1b40:	6860      	ldr	r0, [r4, #4]
    1b42:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    1b46:	b111      	cbz	r1, 1b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    1b48:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    1b4c:	e002      	b.n	1b54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    1b4e:	6860      	ldr	r0, [r4, #4]
    1b50:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1b54:	f7ff f9d8 	bl	f08 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    1b58:	b108      	cbz	r0, 1b5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    1b5a:	2701      	movs	r7, #1
    1b5c:	4605      	mov	r5, r0
    1b5e:	4629      	mov	r1, r5
    1b60:	68a0      	ldr	r0, [r4, #8]
    1b62:	f007 fb52 	bl	920a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    1b66:	4639      	mov	r1, r7
    1b68:	68a0      	ldr	r0, [r4, #8]
    1b6a:	f007 fb54 	bl	9216 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    1b6e:	68a0      	ldr	r0, [r4, #8]
    1b70:	f001 ffbe 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1b74:	2e05      	cmp	r6, #5
    1b76:	d108      	bne.n	1b8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    1b78:	6860      	ldr	r0, [r4, #4]
    1b7a:	682a      	ldr	r2, [r5, #0]
    1b7c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1b7e:	f8c1 200a 	str.w	r2, [r1, #10]
    1b82:	88aa      	ldrh	r2, [r5, #4]
    1b84:	81ca      	strh	r2, [r1, #14]
    1b86:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1b88:	7247      	strb	r7, [r0, #9]
    1b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b8e:	0000      	.short	0x0000
    1b90:	2000009c 	.word	0x2000009c
    1b94:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b98:	4f65      	ldr	r7, [pc, #404]	; (1d30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x540>)
    1b9a:	4604      	mov	r4, r0
    1b9c:	6878      	ldr	r0, [r7, #4]
    1b9e:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    1ba2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1ba6:	b180      	cbz	r0, 1bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3da>
    1ba8:	2600      	movs	r6, #0
    1baa:	2500      	movs	r5, #0
    1bac:	7ca0      	ldrb	r0, [r4, #18]
    1bae:	68a1      	ldr	r1, [r4, #8]
    1bb0:	f007 fb87 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1bb4:	4682      	mov	sl, r0
    1bb6:	f7ff fef9 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1bba:	b140      	cbz	r0, 1bce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    1bbc:	6878      	ldr	r0, [r7, #4]
    1bbe:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    1bc2:	b121      	cbz	r1, 1bce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    1bc4:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    1bc8:	e004      	b.n	1bd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e4>
    1bca:	2601      	movs	r6, #1
    1bcc:	e7ed      	b.n	1baa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    1bce:	6878      	ldr	r0, [r7, #4]
    1bd0:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1bd4:	4683      	mov	fp, r0
    1bd6:	f7ff f949 	bl	e6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    1bda:	ea5f 0900 	movs.w	r9, r0
    1bde:	d00c      	beq.n	1bfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    1be0:	4658      	mov	r0, fp
    1be2:	f7ff f937 	bl	e54 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    1be6:	b100      	cbz	r0, 1bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fa>
    1be8:	2601      	movs	r6, #1
    1bea:	f1ba 0f00 	cmp.w	sl, #0
    1bee:	d004      	beq.n	1bfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    1bf0:	4648      	mov	r0, r9
    1bf2:	68a1      	ldr	r1, [r4, #8]
    1bf4:	f007 f9e8 	bl	8fc8 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    1bf8:	4605      	mov	r5, r0
    1bfa:	6878      	ldr	r0, [r7, #4]
    1bfc:	46b9      	mov	r9, r7
    1bfe:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    1c02:	b10d      	cbz	r5, 1c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x418>
    1c04:	f047 0702 	orr.w	r7, r7, #2
    1c08:	f7ff fed0 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1c0c:	b3a0      	cbz	r0, 1c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x488>
    1c0e:	6860      	ldr	r0, [r4, #4]
    1c10:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1c14:	7802      	ldrb	r2, [r0, #0]
    1c16:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    1c1a:	429a      	cmp	r2, r3
    1c1c:	d11f      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c1e:	7842      	ldrb	r2, [r0, #1]
    1c20:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    1c24:	429a      	cmp	r2, r3
    1c26:	d11a      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c28:	7882      	ldrb	r2, [r0, #2]
    1c2a:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    1c2e:	429a      	cmp	r2, r3
    1c30:	d115      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c32:	78c2      	ldrb	r2, [r0, #3]
    1c34:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    1c38:	429a      	cmp	r2, r3
    1c3a:	d110      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c3c:	7902      	ldrb	r2, [r0, #4]
    1c3e:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    1c42:	429a      	cmp	r2, r3
    1c44:	d10b      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c46:	7940      	ldrb	r0, [r0, #5]
    1c48:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    1c4c:	4290      	cmp	r0, r2
    1c4e:	d106      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c50:	7c60      	ldrb	r0, [r4, #17]
    1c52:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    1c56:	4288      	cmp	r0, r1
    1c58:	d101      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c5a:	2001      	movs	r0, #1
    1c5c:	e000      	b.n	1c60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x470>
    1c5e:	2000      	movs	r0, #0
    1c60:	4f34      	ldr	r7, [pc, #208]	; (1d34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x544>)
    1c62:	4682      	mov	sl, r0
    1c64:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    1c68:	2808      	cmp	r0, #8
    1c6a:	d006      	beq.n	1c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    1c6c:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    1c70:	4288      	cmp	r0, r1
    1c72:	d102      	bne.n	1c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    1c74:	2001      	movs	r0, #1
    1c76:	e001      	b.n	1c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>
    1c78:	e021      	b.n	1cbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    1c7a:	2000      	movs	r0, #0
    1c7c:	4681      	mov	r9, r0
    1c7e:	b925      	cbnz	r5, 1c8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49a>
    1c80:	b12e      	cbz	r6, 1c8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    1c82:	4620      	mov	r0, r4
    1c84:	f7ff fe9e 	bl	19c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    1c88:	b108      	cbz	r0, 1c8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    1c8a:	2001      	movs	r0, #1
    1c8c:	e000      	b.n	1c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a0>
    1c8e:	2000      	movs	r0, #0
    1c90:	f1b8 0f00 	cmp.w	r8, #0
    1c94:	d009      	beq.n	1caa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1c96:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    1c9a:	2901      	cmp	r1, #1
    1c9c:	d003      	beq.n	1ca6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b6>
    1c9e:	b921      	cbnz	r1, 1caa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1ca0:	ea5a 0109 	orrs.w	r1, sl, r9
    1ca4:	d001      	beq.n	1caa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1ca6:	2101      	movs	r1, #1
    1ca8:	e000      	b.n	1cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4bc>
    1caa:	2100      	movs	r1, #0
    1cac:	4208      	tst	r0, r1
    1cae:	d003      	beq.n	1cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    1cb0:	200c      	movs	r0, #12
    1cb2:	b004      	add	sp, #16
    1cb4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1cb8:	f001 fcf6 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cbc:	e036      	b.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1cbe:	f001 fcf3 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cc2:	f1b8 0f00 	cmp.w	r8, #0
    1cc6:	d031      	beq.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1cc8:	4620      	mov	r0, r4
    1cca:	f7ff fe7b 	bl	19c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    1cce:	b900      	cbnz	r0, 1cd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e2>
    1cd0:	b175      	cbz	r5, 1cf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x500>
    1cd2:	a803      	add	r0, sp, #12
    1cd4:	f000 f97c 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1cd8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1cdc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1ce0:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1ce4:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1ce8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1cec:	463b      	mov	r3, r7
    1cee:	e018      	b.n	1d22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x532>
    1cf0:	f8d9 0004 	ldr.w	r0, [r9, #4]
    1cf4:	464d      	mov	r5, r9
    1cf6:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    1cfa:	2803      	cmp	r0, #3
    1cfc:	d001      	beq.n	1d02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x512>
    1cfe:	2802      	cmp	r0, #2
    1d00:	d114      	bne.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1d02:	f1ba 0f00 	cmp.w	sl, #0
    1d06:	d011      	beq.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1d08:	a803      	add	r0, sp, #12
    1d0a:	f000 f961 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1d0e:	686a      	ldr	r2, [r5, #4]
    1d10:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1d14:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1d18:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1d1c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1d20:	23fe      	movs	r3, #254	; 0xfe
    1d22:	2101      	movs	r1, #1
    1d24:	4620      	mov	r0, r4
    1d26:	324a      	adds	r2, #74	; 0x4a
    1d28:	f007 fb5e 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1d2c:	2005      	movs	r0, #5
    1d2e:	e7c0      	b.n	1cb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c2>
    1d30:	2000009c 	.word	0x2000009c
    1d34:	20000548 	.word	0x20000548
    1d38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1d3a:	4c3f      	ldr	r4, [pc, #252]	; (1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>)
    1d3c:	4605      	mov	r5, r0
    1d3e:	6860      	ldr	r0, [r4, #4]
    1d40:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1d44:	2900      	cmp	r1, #0
    1d46:	d06c      	beq.n	1e22 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1d48:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1d4c:	2802      	cmp	r0, #2
    1d4e:	d02c      	beq.n	1daa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1d50:	2801      	cmp	r0, #1
    1d52:	d043      	beq.n	1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1d54:	f7ff fe2a 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1d58:	2800      	cmp	r0, #0
    1d5a:	d067      	beq.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1d5c:	686a      	ldr	r2, [r5, #4]
    1d5e:	6861      	ldr	r1, [r4, #4]
    1d60:	7810      	ldrb	r0, [r2, #0]
    1d62:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    1d66:	4298      	cmp	r0, r3
    1d68:	d14c      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d6a:	7850      	ldrb	r0, [r2, #1]
    1d6c:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    1d70:	4298      	cmp	r0, r3
    1d72:	d147      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d74:	7890      	ldrb	r0, [r2, #2]
    1d76:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    1d7a:	4298      	cmp	r0, r3
    1d7c:	d142      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d7e:	78d0      	ldrb	r0, [r2, #3]
    1d80:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    1d84:	4298      	cmp	r0, r3
    1d86:	d13d      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d88:	7910      	ldrb	r0, [r2, #4]
    1d8a:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    1d8e:	4298      	cmp	r0, r3
    1d90:	d138      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d92:	7950      	ldrb	r0, [r2, #5]
    1d94:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    1d98:	4290      	cmp	r0, r2
    1d9a:	d133      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d9c:	7c68      	ldrb	r0, [r5, #17]
    1d9e:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    1da2:	4290      	cmp	r0, r2
    1da4:	d12e      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1da6:	2001      	movs	r0, #1
    1da8:	e02d      	b.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1daa:	a803      	add	r0, sp, #12
    1dac:	f000 f910 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1db0:	6862      	ldr	r2, [r4, #4]
    1db2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1db6:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1dba:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1dbe:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1dc2:	23ff      	movs	r3, #255	; 0xff
    1dc4:	2100      	movs	r1, #0
    1dc6:	4628      	mov	r0, r5
    1dc8:	324a      	adds	r2, #74	; 0x4a
    1dca:	f007 fb0d 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1dce:	6861      	ldr	r1, [r4, #4]
    1dd0:	2001      	movs	r0, #1
    1dd2:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    1dd6:	200b      	movs	r0, #11
    1dd8:	b004      	add	sp, #16
    1dda:	bd70      	pop	{r4, r5, r6, pc}
    1ddc:	a803      	add	r0, sp, #12
    1dde:	f000 f8f7 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1de2:	6862      	ldr	r2, [r4, #4]
    1de4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1de8:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1dec:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1df0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1df4:	23ff      	movs	r3, #255	; 0xff
    1df6:	2100      	movs	r1, #0
    1df8:	4628      	mov	r0, r5
    1dfa:	324a      	adds	r2, #74	; 0x4a
    1dfc:	f007 faf4 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1e00:	2005      	movs	r0, #5
    1e02:	e7e9      	b.n	1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1e04:	2000      	movs	r0, #0
    1e06:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    1e0a:	2901      	cmp	r1, #1
    1e0c:	d00c      	beq.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e0e:	b958      	cbnz	r0, 1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e10:	490a      	ldr	r1, [pc, #40]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1e12:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    1e16:	2808      	cmp	r0, #8
    1e18:	d003      	beq.n	1e22 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1e1a:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    1e1e:	4281      	cmp	r1, r0
    1e20:	d002      	beq.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e22:	f001 fc41 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1e26:	e7eb      	b.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1e28:	200c      	movs	r0, #12
    1e2a:	e7d5      	b.n	1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1e2c:	f640 61e5 	movw	r1, #3813	; 0xee5
    1e30:	2032      	movs	r0, #50	; 0x32
    1e32:	f7fe faaf 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e36:	0000      	.short	0x0000
    1e38:	2000009c 	.word	0x2000009c
    1e3c:	20000548 	.word	0x20000548
    1e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1e42:	4c1e      	ldr	r4, [pc, #120]	; (1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>)
    1e44:	4605      	mov	r5, r0
    1e46:	6860      	ldr	r0, [r4, #4]
    1e48:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1e4c:	b129      	cbz	r1, 1e5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10e>
    1e4e:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1e52:	2802      	cmp	r0, #2
    1e54:	d004      	beq.n	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1e56:	2801      	cmp	r0, #1
    1e58:	d01b      	beq.n	1e92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x146>
    1e5a:	f001 fc25 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1e5e:	e02a      	b.n	1eb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16a>
    1e60:	a803      	add	r0, sp, #12
    1e62:	f000 f8b5 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1e66:	6862      	ldr	r2, [r4, #4]
    1e68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1e6c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1e70:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1e74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1e78:	23ff      	movs	r3, #255	; 0xff
    1e7a:	2106      	movs	r1, #6
    1e7c:	4628      	mov	r0, r5
    1e7e:	324a      	adds	r2, #74	; 0x4a
    1e80:	f007 fab2 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1e84:	6862      	ldr	r2, [r4, #4]
    1e86:	200b      	movs	r0, #11
    1e88:	2100      	movs	r1, #0
    1e8a:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    1e8e:	b004      	add	sp, #16
    1e90:	bd70      	pop	{r4, r5, r6, pc}
    1e92:	a803      	add	r0, sp, #12
    1e94:	f000 f89c 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1e98:	6862      	ldr	r2, [r4, #4]
    1e9a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1e9e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1ea2:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1ea6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1eaa:	23ff      	movs	r3, #255	; 0xff
    1eac:	2106      	movs	r1, #6
    1eae:	4628      	mov	r0, r5
    1eb0:	324a      	adds	r2, #74	; 0x4a
    1eb2:	f007 fa99 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1eb6:	2005      	movs	r0, #5
    1eb8:	e7e9      	b.n	1e8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1eba:	0000      	.short	0x0000
    1ebc:	2000009c 	.word	0x2000009c
    1ec0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1ec2:	b389      	cbz	r1, 1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1ec4:	2901      	cmp	r1, #1
    1ec6:	d034      	beq.n	1f32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e6>
    1ec8:	2505      	movs	r5, #5
    1eca:	2902      	cmp	r1, #2
    1ecc:	d004      	beq.n	1ed8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>
    1ece:	2906      	cmp	r1, #6
    1ed0:	d025      	beq.n	1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1ed2:	f001 fbe9 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1ed6:	e01f      	b.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1ed8:	4606      	mov	r6, r0
    1eda:	f001 fbe5 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1ede:	4c17      	ldr	r4, [pc, #92]	; (1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>)
    1ee0:	6860      	ldr	r0, [r4, #4]
    1ee2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1ee6:	b1b9      	cbz	r1, 1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1ee8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1eec:	2801      	cmp	r0, #1
    1eee:	d001      	beq.n	1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1ef0:	2802      	cmp	r0, #2
    1ef2:	d111      	bne.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1ef4:	a803      	add	r0, sp, #12
    1ef6:	f000 f86b 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1efa:	6862      	ldr	r2, [r4, #4]
    1efc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1f00:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1f04:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1f08:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1f0c:	23ff      	movs	r3, #255	; 0xff
    1f0e:	2102      	movs	r1, #2
    1f10:	4630      	mov	r0, r6
    1f12:	324a      	adds	r2, #74	; 0x4a
    1f14:	f007 fa68 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1f18:	b004      	add	sp, #16
    1f1a:	4628      	mov	r0, r5
    1f1c:	bd70      	pop	{r4, r5, r6, pc}
    1f1e:	b004      	add	sp, #16
    1f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f24:	f7ff bf8c 	b.w	1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1f28:	b004      	add	sp, #16
    1f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f2e:	f7ff bf03 	b.w	1d38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x548>
    1f32:	b004      	add	sp, #16
    1f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f38:	f7ff be2c 	b.w	1b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    1f3c:	2000009c 	.word	0x2000009c
    1f40:	b570      	push	{r4, r5, r6, lr}
    1f42:	4c11      	ldr	r4, [pc, #68]	; (1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>)
    1f44:	4605      	mov	r5, r0
    1f46:	6861      	ldr	r1, [r4, #4]
    1f48:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    1f4c:	2800      	cmp	r0, #0
    1f4e:	d019      	beq.n	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f50:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    1f54:	2800      	cmp	r0, #0
    1f56:	d015      	beq.n	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f58:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1f5c:	314a      	adds	r1, #74	; 0x4a
    1f5e:	f007 f9b0 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1f62:	b140      	cbz	r0, 1f76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22a>
    1f64:	f7fe ff72 	bl	e4c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    1f68:	6861      	ldr	r1, [r4, #4]
    1f6a:	462a      	mov	r2, r5
    1f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f70:	314a      	adds	r1, #74	; 0x4a
    1f72:	f006 bff4 	b.w	8f5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    1f76:	6860      	ldr	r0, [r4, #4]
    1f78:	4629      	mov	r1, r5
    1f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f7e:	304a      	adds	r0, #74	; 0x4a
    1f80:	f006 bfdc 	b.w	8f3c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    1f84:	bd70      	pop	{r4, r5, r6, pc}
    1f86:	0000      	.short	0x0000
    1f88:	2000009c 	.word	0x2000009c
    1f8c:	4602      	mov	r2, r0
    1f8e:	480b      	ldr	r0, [pc, #44]	; (1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1f90:	b082      	sub	sp, #8
    1f92:	6840      	ldr	r0, [r0, #4]
    1f94:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    1f98:	f88d 1000 	strb.w	r1, [sp]
    1f9c:	9900      	ldr	r1, [sp, #0]
    1f9e:	9100      	str	r1, [sp, #0]
    1fa0:	f89d 1000 	ldrb.w	r1, [sp]
    1fa4:	2900      	cmp	r1, #0
    1fa6:	d107      	bne.n	1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1fa8:	6e81      	ldr	r1, [r0, #104]	; 0x68
    1faa:	2900      	cmp	r1, #0
    1fac:	d004      	beq.n	1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1fae:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    1fb2:	b002      	add	sp, #8
    1fb4:	f004 bd76 	b.w	6aa4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1fb8:	b002      	add	sp, #8
    1fba:	4770      	bx	lr
    1fbc:	2000009c 	.word	0x2000009c
    1fc0:	b510      	push	{r4, lr}
    1fc2:	f7ff f885 	bl	10d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1fc6:	4901      	ldr	r1, [pc, #4]	; (1fcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>)
    1fc8:	7008      	strb	r0, [r1, #0]
    1fca:	bd10      	pop	{r4, pc}
    1fcc:	2000009c 	.word	0x2000009c
    1fd0:	4a07      	ldr	r2, [pc, #28]	; (1ff0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>)
    1fd2:	b510      	push	{r4, lr}
    1fd4:	f992 1000 	ldrsb.w	r1, [r2]
    1fd8:	297f      	cmp	r1, #127	; 0x7f
    1fda:	d003      	beq.n	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1fdc:	7001      	strb	r1, [r0, #0]
    1fde:	207f      	movs	r0, #127	; 0x7f
    1fe0:	7010      	strb	r0, [r2, #0]
    1fe2:	bd10      	pop	{r4, pc}
    1fe4:	f240 414d 	movw	r1, #1101	; 0x44d
    1fe8:	2032      	movs	r0, #50	; 0x32
    1fea:	f7fe f9d3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fee:	0000      	.short	0x0000
    1ff0:	2000009c 	.word	0x2000009c
    1ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff8:	4607      	mov	r7, r0
    1ffa:	f7fe fd7f 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    1ffe:	4604      	mov	r4, r0
    2000:	f7fe fd82 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2004:	4621      	mov	r1, r4
    2006:	f007 f9ca 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    200a:	0005      	movs	r5, r0
    200c:	d012      	beq.n	2034 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e8>
    200e:	4c2d      	ldr	r4, [pc, #180]	; (20c4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x378>)
    2010:	6860      	ldr	r0, [r4, #4]
    2012:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    2016:	2801      	cmp	r0, #1
    2018:	d004      	beq.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    201a:	2802      	cmp	r0, #2
    201c:	d002      	beq.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    201e:	f7ff fcc5 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2022:	b150      	cbz	r0, 203a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    2024:	f06f 0613 	mvn.w	r6, #19
    2028:	b33f      	cbz	r7, 207a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32e>
    202a:	4628      	mov	r0, r5
    202c:	f007 f89c 	bl	9168 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    2030:	b950      	cbnz	r0, 2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    2032:	e005      	b.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    2034:	f241 5157 	movw	r1, #5463	; 0x1557
    2038:	e03a      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    203a:	f241 515d 	movw	r1, #5469	; 0x155d
    203e:	e037      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    2040:	4628      	mov	r0, r5
    2042:	f007 f8ad 	bl	91a0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    2046:	b1c0      	cbz	r0, 207a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32e>
    2048:	6861      	ldr	r1, [r4, #4]
    204a:	4628      	mov	r0, r5
    204c:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    2050:	2a05      	cmp	r2, #5
    2052:	d202      	bcs.n	205a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30e>
    2054:	f241 41dc 	movw	r1, #5340	; 0x14dc
    2058:	e02a      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    205a:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    205e:	2a0b      	cmp	r2, #11
    2060:	d302      	bcc.n	2068 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31c>
    2062:	f241 41dd 	movw	r1, #5341	; 0x14dd
    2066:	e023      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    2068:	68e2      	ldr	r2, [r4, #12]
    206a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    206e:	6952      	ldr	r2, [r2, #20]
    2070:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    2074:	5851      	ldr	r1, [r2, r1]
    2076:	4788      	blx	r1
    2078:	e016      	b.n	20a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35c>
    207a:	6860      	ldr	r0, [r4, #4]
    207c:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    2080:	2905      	cmp	r1, #5
    2082:	d202      	bcs.n	208a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33e>
    2084:	f241 514d 	movw	r1, #5453	; 0x154d
    2088:	e012      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    208a:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    208e:	290b      	cmp	r1, #11
    2090:	d302      	bcc.n	2098 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34c>
    2092:	f241 514e 	movw	r1, #5454	; 0x154e
    2096:	e00b      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    2098:	68e1      	ldr	r1, [r4, #12]
    209a:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    209e:	6989      	ldr	r1, [r1, #24]
    20a0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    20a4:	5808      	ldr	r0, [r1, r0]
    20a6:	4780      	blx	r0
    20a8:	280f      	cmp	r0, #15
    20aa:	d304      	bcc.n	20b6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36a>
    20ac:	f241 5172 	movw	r1, #5490	; 0x1572
    20b0:	2032      	movs	r0, #50	; 0x32
    20b2:	f7fe f96f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20b6:	68e1      	ldr	r1, [r4, #12]
    20b8:	6909      	ldr	r1, [r1, #16]
    20ba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    20be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20c2:	4700      	bx	r0
    20c4:	2000009c 	.word	0x2000009c
    20c8:	b510      	push	{r4, lr}
    20ca:	b118      	cbz	r0, 20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    20cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20d0:	f000 b906 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    20d4:	2900      	cmp	r1, #0
    20d6:	d01d      	beq.n	2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>
    20d8:	480f      	ldr	r0, [pc, #60]	; (2118 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3cc>)
    20da:	6841      	ldr	r1, [r0, #4]
    20dc:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    20e0:	2a0b      	cmp	r2, #11
    20e2:	d202      	bcs.n	20ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39e>
    20e4:	f241 612d 	movw	r1, #5677	; 0x162d
    20e8:	e005      	b.n	20f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3aa>
    20ea:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    20ee:	2a0f      	cmp	r2, #15
    20f0:	d304      	bcc.n	20fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b0>
    20f2:	f241 612e 	movw	r1, #5678	; 0x162e
    20f6:	2032      	movs	r0, #50	; 0x32
    20f8:	f7fe f94c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20fc:	68c0      	ldr	r0, [r0, #12]
    20fe:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    2102:	6880      	ldr	r0, [r0, #8]
    2104:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    2108:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    210c:	5840      	ldr	r0, [r0, r1]
    210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2112:	4700      	bx	r0
    2114:	bd10      	pop	{r4, pc}
    2116:	0000      	.short	0x0000
    2118:	2000009c 	.word	0x2000009c
    211c:	b510      	push	{r4, lr}
    211e:	f7fe fced 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2122:	4604      	mov	r4, r0
    2124:	f7fe fcf0 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2128:	4621      	mov	r1, r4
    212a:	f007 f938 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    212e:	b150      	cbz	r0, 2146 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fa>
    2130:	f001 fcde 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2134:	2000      	movs	r0, #0
    2136:	f001 fbad 	bl	3894 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    213a:	4905      	ldr	r1, [pc, #20]	; (2150 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x404>)
    213c:	2006      	movs	r0, #6
    213e:	6849      	ldr	r1, [r1, #4]
    2140:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2144:	bd10      	pop	{r4, pc}
    2146:	f44f 61c6 	mov.w	r1, #1584	; 0x630
    214a:	2032      	movs	r0, #50	; 0x32
    214c:	f7fe f922 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2150:	2000009c 	.word	0x2000009c
    2154:	490f      	ldr	r1, [pc, #60]	; (2194 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x448>)
    2156:	b510      	push	{r4, lr}
    2158:	6848      	ldr	r0, [r1, #4]
    215a:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    215e:	2a05      	cmp	r2, #5
    2160:	d202      	bcs.n	2168 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41c>
    2162:	f241 6161 	movw	r1, #5729	; 0x1661
    2166:	e005      	b.n	2174 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x428>
    2168:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    216c:	2a0b      	cmp	r2, #11
    216e:	d304      	bcc.n	217a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    2170:	f241 6162 	movw	r1, #5730	; 0x1662
    2174:	2032      	movs	r0, #50	; 0x32
    2176:	f7fe f90d 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    217a:	68c9      	ldr	r1, [r1, #12]
    217c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2180:	68c9      	ldr	r1, [r1, #12]
    2182:	f06f 0213 	mvn.w	r2, #19
    2186:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    218a:	5808      	ldr	r0, [r1, r0]
    218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2190:	4700      	bx	r0
    2192:	0000      	.short	0x0000
    2194:	2000009c 	.word	0x2000009c
    2198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    219c:	4c2c      	ldr	r4, [pc, #176]	; (2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>)
    219e:	4605      	mov	r5, r0
    21a0:	460e      	mov	r6, r1
    21a2:	6860      	ldr	r0, [r4, #4]
    21a4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    21a8:	b120      	cbz	r0, 21b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x468>
    21aa:	2801      	cmp	r0, #1
    21ac:	d002      	beq.n	21b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x468>
    21ae:	200c      	movs	r0, #12
    21b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21b4:	f001 fbf6 	bl	39a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    21b8:	f001 fa54 	bl	3664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    21bc:	f001 f972 	bl	34a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    21c0:	4824      	ldr	r0, [pc, #144]	; (2254 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x508>)
    21c2:	f001 fb5f 	bl	3884 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    21c6:	4824      	ldr	r0, [pc, #144]	; (2258 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50c>)
    21c8:	f001 fd4e 	bl	3c68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    21cc:	4823      	ldr	r0, [pc, #140]	; (225c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x510>)
    21ce:	f001 fd41 	bl	3c54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    21d2:	4630      	mov	r0, r6
    21d4:	f001 fc8c 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    21d8:	7968      	ldrb	r0, [r5, #5]
    21da:	b110      	cbz	r0, 21e2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x496>
    21dc:	2001      	movs	r0, #1
    21de:	f7ff fed5 	bl	1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    21e2:	7928      	ldrb	r0, [r5, #4]
    21e4:	2803      	cmp	r0, #3
    21e6:	d001      	beq.n	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    21e8:	b118      	cbz	r0, 21f2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a6>
    21ea:	e018      	b.n	221e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d2>
    21ec:	f640 2152 	movw	r1, #2642	; 0xa52
    21f0:	e02a      	b.n	2248 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4fc>
    21f2:	6861      	ldr	r1, [r4, #4]
    21f4:	2000      	movs	r0, #0
    21f6:	2503      	movs	r5, #3
    21f8:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    21fc:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    2200:	1c52      	adds	r2, r2, #1
    2202:	fbb2 f7f5 	udiv	r7, r2, r5
    2206:	fb05 2217 	mls	r2, r5, r7, r2
    220a:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    220e:	fa23 f202 	lsr.w	r2, r3, r2
    2212:	07d2      	lsls	r2, r2, #31
    2214:	d103      	bne.n	221e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d2>
    2216:	1c40      	adds	r0, r0, #1
    2218:	b2c0      	uxtb	r0, r0
    221a:	2803      	cmp	r0, #3
    221c:	d3ee      	bcc.n	21fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b0>
    221e:	6860      	ldr	r0, [r4, #4]
    2220:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    2224:	f001 fc42 	bl	3aac <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2228:	4631      	mov	r1, r6
    222a:	2001      	movs	r0, #1
    222c:	f7ff fb10 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2230:	2800      	cmp	r0, #0
    2232:	d0bd      	beq.n	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    2234:	f000 f8d8 	bl	23e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x69c>
    2238:	4809      	ldr	r0, [pc, #36]	; (2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>)
    223a:	6800      	ldr	r0, [r0, #0]
    223c:	2803      	cmp	r0, #3
    223e:	d001      	beq.n	2244 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f8>
    2240:	2000      	movs	r0, #0
    2242:	e7b5      	b.n	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    2244:	f44f 6126 	mov.w	r1, #2656	; 0xa60
    2248:	2032      	movs	r0, #50	; 0x32
    224a:	f7fe f8a3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    224e:	0000      	.short	0x0000
    2250:	2000009c 	.word	0x2000009c
    2254:	000024cc 	.word	0x000024cc
    2258:	00555555 	.word	0x00555555
    225c:	8e89bed6 	.word	0x8e89bed6
    2260:	40001550 	.word	0x40001550
    2264:	b510      	push	{r4, lr}
    2266:	2000      	movs	r0, #0
    2268:	f7ff fe90 	bl	1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    226c:	4808      	ldr	r0, [pc, #32]	; (2290 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x544>)
    226e:	6840      	ldr	r0, [r0, #4]
    2270:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2274:	b128      	cbz	r0, 2282 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x536>
    2276:	2801      	cmp	r0, #1
    2278:	d003      	beq.n	2282 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x536>
    227a:	2802      	cmp	r0, #2
    227c:	d004      	beq.n	2288 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    227e:	200c      	movs	r0, #12
    2280:	bd10      	pop	{r4, pc}
    2282:	f000 f82d 	bl	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    2286:	e001      	b.n	228c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x540>
    2288:	f000 f840 	bl	230c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    228c:	2000      	movs	r0, #0
    228e:	bd10      	pop	{r4, pc}
    2290:	2000009c 	.word	0x2000009c
    2294:	b510      	push	{r4, lr}
    2296:	2000      	movs	r0, #0
    2298:	7048      	strb	r0, [r1, #1]
    229a:	2019      	movs	r0, #25
    229c:	7008      	strb	r0, [r1, #0]
    229e:	480f      	ldr	r0, [pc, #60]	; (22dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x590>)
    22a0:	6840      	ldr	r0, [r0, #4]
    22a2:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    22a6:	6048      	str	r0, [r1, #4]
    22a8:	7908      	ldrb	r0, [r1, #4]
    22aa:	2801      	cmp	r0, #1
    22ac:	d114      	bne.n	22d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58c>
    22ae:	88cc      	ldrh	r4, [r1, #6]
    22b0:	2100      	movs	r1, #0
    22b2:	4620      	mov	r0, r4
    22b4:	f7fe fb18 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    22b8:	2800      	cmp	r0, #0
    22ba:	d00d      	beq.n	22d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58c>
    22bc:	4620      	mov	r0, r4
    22be:	f006 fe1c 	bl	8efa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    22c2:	2100      	movs	r1, #0
    22c4:	4620      	mov	r0, r4
    22c6:	f7fe fb77 	bl	9b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    22ca:	2800      	cmp	r0, #0
    22cc:	d004      	beq.n	22d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58c>
    22ce:	f240 4115 	movw	r1, #1045	; 0x415
    22d2:	2032      	movs	r0, #50	; 0x32
    22d4:	f7fe f85e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22d8:	bd10      	pop	{r4, pc}
    22da:	0000      	.short	0x0000
    22dc:	2000009c 	.word	0x2000009c
    22e0:	b510      	push	{r4, lr}
    22e2:	f7ff faa3 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    22e6:	4904      	ldr	r1, [pc, #16]	; (22f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5ac>)
    22e8:	2001      	movs	r0, #1
    22ea:	6849      	ldr	r1, [r1, #4]
    22ec:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    22f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    22f4:	f000 ba4e 	b.w	2794 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    22f8:	2000009c 	.word	0x2000009c
    22fc:	4902      	ldr	r1, [pc, #8]	; (2308 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5bc>)
    22fe:	2000      	movs	r0, #0
    2300:	6849      	ldr	r1, [r1, #4]
    2302:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2306:	4770      	bx	lr
    2308:	2000009c 	.word	0x2000009c
    230c:	b570      	push	{r4, r5, r6, lr}
    230e:	f7fe fbf5 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2312:	4604      	mov	r4, r0
    2314:	f7fe fbf8 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2318:	4621      	mov	r1, r4
    231a:	f007 f840 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    231e:	0004      	movs	r4, r0
    2320:	d020      	beq.n	2364 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x618>
    2322:	f007 f849 	bl	93b8 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    2326:	2000      	movs	r0, #0
    2328:	f000 f988 	bl	263c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    232c:	b1f8      	cbz	r0, 236e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x622>
    232e:	4d20      	ldr	r5, [pc, #128]	; (23b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x664>)
    2330:	6868      	ldr	r0, [r5, #4]
    2332:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2336:	2802      	cmp	r0, #2
    2338:	d003      	beq.n	2342 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5f6>
    233a:	4621      	mov	r1, r4
    233c:	2000      	movs	r0, #0
    233e:	f7ff fa87 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2342:	1ce0      	adds	r0, r4, #3
    2344:	f006 fe6e 	bl	9024 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    2348:	6869      	ldr	r1, [r5, #4]
    234a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    234e:	b128      	cbz	r0, 235c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x610>
    2350:	2440      	movs	r4, #64	; 0x40
    2352:	f001 f8c7 	bl	34e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    2356:	4620      	mov	r0, r4
    2358:	f001 f992 	bl	3680 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    235c:	f7ff fb26 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2360:	b970      	cbnz	r0, 2380 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x634>
    2362:	e008      	b.n	2376 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62a>
    2364:	f240 511e 	movw	r1, #1310	; 0x51e
    2368:	2032      	movs	r0, #50	; 0x32
    236a:	f7fe f813 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    236e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2372:	f7ff bfb5 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    2376:	6868      	ldr	r0, [r5, #4]
    2378:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    237c:	2802      	cmp	r0, #2
    237e:	d104      	bne.n	238a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x63e>
    2380:	2100      	movs	r1, #0
    2382:	2201      	movs	r2, #1
    2384:	4608      	mov	r0, r1
    2386:	f001 fc3b 	bl	3c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    238a:	6868      	ldr	r0, [r5, #4]
    238c:	21ff      	movs	r1, #255	; 0xff
    238e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    2392:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    2396:	2100      	movs	r1, #0
    2398:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    239c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    23a0:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    23a4:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    23a8:	2105      	movs	r1, #5
    23aa:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    23ae:	bd70      	pop	{r4, r5, r6, pc}
    23b0:	2000009c 	.word	0x2000009c
    23b4:	b510      	push	{r4, lr}
    23b6:	2003      	movs	r0, #3
    23b8:	f000 f940 	bl	263c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    23bc:	b168      	cbz	r0, 23da <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68e>
    23be:	2003      	movs	r0, #3
    23c0:	f7ff fb4a 	bl	1a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    23c4:	2201      	movs	r2, #1
    23c6:	4611      	mov	r1, r2
    23c8:	2000      	movs	r0, #0
    23ca:	f001 fc19 	bl	3c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    23ce:	4905      	ldr	r1, [pc, #20]	; (23e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x698>)
    23d0:	200b      	movs	r0, #11
    23d2:	6849      	ldr	r1, [r1, #4]
    23d4:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    23d8:	bd10      	pop	{r4, pc}
    23da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23de:	f7ff bf7f 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    23e2:	0000      	.short	0x0000
    23e4:	2000009c 	.word	0x2000009c
    23e8:	b570      	push	{r4, r5, r6, lr}
    23ea:	4d19      	ldr	r5, [pc, #100]	; (2450 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x704>)
    23ec:	2000      	movs	r0, #0
    23ee:	686c      	ldr	r4, [r5, #4]
    23f0:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    23f4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    23f8:	b910      	cbnz	r0, 2400 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6b4>
    23fa:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    23fe:	b308      	cbz	r0, 2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>
    2400:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    2404:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2408:	4050      	eors	r0, r2
    240a:	ea70 0101 	orns	r1, r0, r1
    240e:	d019      	beq.n	2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>
    2410:	f007 fd04 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2414:	e9d4 2300 	ldrd	r2, r3, [r4]
    2418:	1a80      	subs	r0, r0, r2
    241a:	4199      	sbcs	r1, r3
    241c:	d312      	bcc.n	2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>
    241e:	f7fe fdb5 	bl	f8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    2422:	490c      	ldr	r1, [pc, #48]	; (2454 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x708>)
    2424:	fba0 2301 	umull	r2, r3, r0, r1
    2428:	6868      	ldr	r0, [r5, #4]
    242a:	3090      	adds	r0, #144	; 0x90
    242c:	f006 ffb9 	bl	93a2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    2430:	6868      	ldr	r0, [r5, #4]
    2432:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    2436:	b110      	cbz	r0, 243e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f2>
    2438:	2001      	movs	r0, #1
    243a:	f7fe fd31 	bl	ea0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    243e:	2001      	movs	r0, #1
    2440:	f7ff fd7e 	bl	1f40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>
    2444:	6869      	ldr	r1, [r5, #4]
    2446:	2002      	movs	r0, #2
    2448:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    244c:	bd70      	pop	{r4, r5, r6, pc}
    244e:	0000      	.short	0x0000
    2450:	2000009c 	.word	0x2000009c
    2454:	000f4240 	.word	0x000f4240
    2458:	000022fd 	.word	0x000022fd
    245c:	000022e1 	.word	0x000022e1
    2460:	0000935f 	.word	0x0000935f
    2464:	0000935f 	.word	0x0000935f
    2468:	0000935f 	.word	0x0000935f
    246c:	0000230d 	.word	0x0000230d
    2470:	0000935f 	.word	0x0000935f
    2474:	0000935f 	.word	0x0000935f
    2478:	0000935f 	.word	0x0000935f
    247c:	0000935f 	.word	0x0000935f
    2480:	0000935f 	.word	0x0000935f
    2484:	000023b5 	.word	0x000023b5
    2488:	0000935f 	.word	0x0000935f
    248c:	0000935f 	.word	0x0000935f
    2490:	0000935f 	.word	0x0000935f
    2494:	0000211d 	.word	0x0000211d
    2498:	00009369 	.word	0x00009369
    249c:	00009377 	.word	0x00009377
    24a0:	0000930f 	.word	0x0000930f
    24a4:	00009319 	.word	0x00009319
    24a8:	00009327 	.word	0x00009327
    24ac:	00001959 	.word	0x00001959
    24b0:	00002199 	.word	0x00002199
    24b4:	00002265 	.word	0x00002265
    24b8:	00002494 	.word	0x00002494
    24bc:	00002498 	.word	0x00002498
    24c0:	00002458 	.word	0x00002458
    24c4:	000024a8 	.word	0x000024a8
    24c8:	000024a0 	.word	0x000024a0
    24cc:	00002155 	.word	0x00002155
    24d0:	00001ff5 	.word	0x00001ff5
    24d4:	000020c9 	.word	0x000020c9
    24d8:	00009389 	.word	0x00009389
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	4604      	mov	r4, r0
    24e0:	7800      	ldrb	r0, [r0, #0]
    24e2:	2805      	cmp	r0, #5
    24e4:	d001      	beq.n	24ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x79e>
    24e6:	2148      	movs	r1, #72	; 0x48
    24e8:	e058      	b.n	259c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x850>
    24ea:	7ba0      	ldrb	r0, [r4, #14]
    24ec:	06c0      	lsls	r0, r0, #27
    24ee:	d401      	bmi.n	24f4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a8>
    24f0:	2149      	movs	r1, #73	; 0x49
    24f2:	e053      	b.n	259c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x850>
    24f4:	221c      	movs	r2, #28
    24f6:	1d21      	adds	r1, r4, #4
    24f8:	482f      	ldr	r0, [pc, #188]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    24fa:	f007 fe21 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    24fe:	482e      	ldr	r0, [pc, #184]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    2500:	7b22      	ldrb	r2, [r4, #12]
    2502:	f104 0120 	add.w	r1, r4, #32
    2506:	301c      	adds	r0, #28
    2508:	f007 fe1a 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    250c:	482a      	ldr	r0, [pc, #168]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    250e:	f04f 0201 	mov.w	r2, #1
    2512:	7a81      	ldrb	r1, [r0, #10]
    2514:	0749      	lsls	r1, r1, #29
    2516:	d502      	bpl.n	251e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7d2>
    2518:	7cc1      	ldrb	r1, [r0, #19]
    251a:	29fe      	cmp	r1, #254	; 0xfe
    251c:	d00c      	beq.n	2538 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7ec>
    251e:	2304      	movs	r3, #4
    2520:	7023      	strb	r3, [r4, #0]
    2522:	6801      	ldr	r1, [r0, #0]
    2524:	6061      	str	r1, [r4, #4]
    2526:	6841      	ldr	r1, [r0, #4]
    2528:	60a1      	str	r1, [r4, #8]
    252a:	8901      	ldrh	r1, [r0, #8]
    252c:	81a1      	strh	r1, [r4, #12]
    252e:	7a81      	ldrb	r1, [r0, #10]
    2530:	070d      	lsls	r5, r1, #28
    2532:	d519      	bpl.n	2568 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x81c>
    2534:	73a3      	strb	r3, [r4, #14]
    2536:	e02d      	b.n	2594 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x848>
    2538:	2113      	movs	r1, #19
    253a:	7021      	strb	r1, [r4, #0]
    253c:	7801      	ldrb	r1, [r0, #0]
    253e:	7121      	strb	r1, [r4, #4]
    2540:	7162      	strb	r2, [r4, #5]
    2542:	7841      	ldrb	r1, [r0, #1]
    2544:	71a1      	strb	r1, [r4, #6]
    2546:	f8d0 1002 	ldr.w	r1, [r0, #2]
    254a:	f8c4 1007 	str.w	r1, [r4, #7]
    254e:	88c1      	ldrh	r1, [r0, #6]
    2550:	f8a4 100b 	strh.w	r1, [r4, #11]
    2554:	21fe      	movs	r1, #254	; 0xfe
    2556:	7361      	strb	r1, [r4, #13]
    2558:	6941      	ldr	r1, [r0, #20]
    255a:	f8c4 100e 	str.w	r1, [r4, #14]
    255e:	8b01      	ldrh	r1, [r0, #24]
    2560:	8261      	strh	r1, [r4, #18]
    2562:	7a40      	ldrb	r0, [r0, #9]
    2564:	7520      	strb	r0, [r4, #20]
    2566:	bd70      	pop	{r4, r5, r6, pc}
    2568:	07cb      	lsls	r3, r1, #31
    256a:	d003      	beq.n	2574 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x828>
    256c:	078b      	lsls	r3, r1, #30
    256e:	d501      	bpl.n	2574 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x828>
    2570:	2100      	movs	r1, #0
    2572:	e00e      	b.n	2592 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x846>
    2574:	074b      	lsls	r3, r1, #29
    2576:	d501      	bpl.n	257c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x830>
    2578:	73a2      	strb	r2, [r4, #14]
    257a:	e00b      	b.n	2594 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x848>
    257c:	07ca      	lsls	r2, r1, #31
    257e:	d110      	bne.n	25a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x856>
    2580:	078a      	lsls	r2, r1, #30
    2582:	d501      	bpl.n	2588 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x83c>
    2584:	2102      	movs	r1, #2
    2586:	e004      	b.n	2592 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x846>
    2588:	07ca      	lsls	r2, r1, #31
    258a:	d10a      	bne.n	25a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x856>
    258c:	0789      	lsls	r1, r1, #30
    258e:	d408      	bmi.n	25a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x856>
    2590:	2103      	movs	r1, #3
    2592:	73a1      	strb	r1, [r4, #14]
    2594:	7a02      	ldrb	r2, [r0, #8]
    2596:	2a1f      	cmp	r2, #31
    2598:	d905      	bls.n	25a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x85a>
    259a:	218d      	movs	r1, #141	; 0x8d
    259c:	2033      	movs	r0, #51	; 0x33
    259e:	f7fd fef9 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25a2:	218a      	movs	r1, #138	; 0x8a
    25a4:	e7fa      	b.n	259c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x850>
    25a6:	f104 000f 	add.w	r0, r4, #15
    25aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25ae:	4902      	ldr	r1, [pc, #8]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    25b0:	311c      	adds	r1, #28
    25b2:	f007 bdc5 	b.w	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25b6:	0000      	.short	0x0000
    25b8:	20000fd4 	.word	0x20000fd4
    25bc:	2100      	movs	r1, #0
    25be:	7201      	strb	r1, [r0, #8]
    25c0:	2206      	movs	r2, #6
    25c2:	4901      	ldr	r1, [pc, #4]	; (25c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87c>)
    25c4:	f006 be30 	b.w	9228 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25c8:	00009573 	.word	0x00009573

000025cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    25cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25d0:	4616      	mov	r6, r2
    25d2:	460c      	mov	r4, r1
    25d4:	4605      	mov	r5, r0
    25d6:	f006 fddf 	bl	9198 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    25da:	7460      	strb	r0, [r4, #17]
    25dc:	4628      	mov	r0, r5
    25de:	f006 fdd8 	bl	9192 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    25e2:	74a0      	strb	r0, [r4, #18]
    25e4:	1cea      	adds	r2, r5, #3
    25e6:	4b14      	ldr	r3, [pc, #80]	; (2638 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    25e8:	1d90      	adds	r0, r2, #6
    25ea:	2100      	movs	r1, #0
    25ec:	2e07      	cmp	r6, #7
    25ee:	d21f      	bcs.n	2630 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    25f0:	e8df f006 	tbb	[pc, r6]
    25f4:	1e110b04 	.word	0x1e110b04
    25f8:	00041e13 	.word	0x00041e13
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	e00d      	b.n	261c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    2600:	60e0      	str	r0, [r4, #12]
    2602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2606:	60e1      	str	r1, [r4, #12]
    2608:	e7fb      	b.n	2602 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    260a:	785b      	ldrb	r3, [r3, #1]
    260c:	7063      	strb	r3, [r4, #1]
    260e:	e9c4 2001 	strd	r2, r0, [r4, #4]
    2612:	7421      	strb	r1, [r4, #16]
    2614:	e7f7      	b.n	2606 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    2616:	789b      	ldrb	r3, [r3, #2]
    2618:	e000      	b.n	261c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    261a:	78db      	ldrb	r3, [r3, #3]
    261c:	7063      	strb	r3, [r4, #1]
    261e:	e9c4 2101 	strd	r2, r1, [r4, #4]
    2622:	786a      	ldrb	r2, [r5, #1]
    2624:	1f92      	subs	r2, r2, #6
    2626:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    262a:	7422      	strb	r2, [r4, #16]
    262c:	d0eb      	beq.n	2606 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    262e:	e7e7      	b.n	2600 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    2630:	7061      	strb	r1, [r4, #1]
    2632:	6061      	str	r1, [r4, #4]
    2634:	60a1      	str	r1, [r4, #8]
    2636:	e7ec      	b.n	2612 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    2638:	0000a381 	.word	0x0000a381

0000263c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	4605      	mov	r5, r0
    2640:	f007 fbec 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2644:	4c16      	ldr	r4, [pc, #88]	; (26a0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    2646:	6921      	ldr	r1, [r4, #16]
    2648:	1a46      	subs	r6, r0, r1
    264a:	b155      	cbz	r5, 2662 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    264c:	2d03      	cmp	r5, #3
    264e:	d00d      	beq.n	266c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    2650:	2d04      	cmp	r5, #4
    2652:	d00e      	beq.n	2672 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    2654:	2d06      	cmp	r5, #6
    2656:	d01d      	beq.n	2694 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    2658:	f240 31d6 	movw	r1, #982	; 0x3d6
    265c:	2021      	movs	r0, #33	; 0x21
    265e:	f7fd fe99 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2662:	2001      	movs	r0, #1
    2664:	f007 f823 	bl	96ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2668:	3098      	adds	r0, #152	; 0x98
    266a:	e004      	b.n	2676 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    266c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    2670:	e001      	b.n	2676 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    2672:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    2676:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2678:	1835      	adds	r5, r6, r0
    267a:	39f9      	subs	r1, #249	; 0xf9
    267c:	428d      	cmp	r5, r1
    267e:	d307      	bcc.n	2690 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    2680:	2600      	movs	r6, #0
    2682:	f000 fa1b 	bl	2abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    2686:	b140      	cbz	r0, 269a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    2688:	6b20      	ldr	r0, [r4, #48]	; 0x30
    268a:	38f9      	subs	r0, #249	; 0xf9
    268c:	4285      	cmp	r5, r0
    268e:	d203      	bcs.n	2698 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    2690:	2601      	movs	r6, #1
    2692:	e002      	b.n	269a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    2694:	2001      	movs	r0, #1
    2696:	bd70      	pop	{r4, r5, r6, pc}
    2698:	2600      	movs	r6, #0
    269a:	4630      	mov	r0, r6
    269c:	bd70      	pop	{r4, r5, r6, pc}
    269e:	0000      	.short	0x0000
    26a0:	200005f0 	.word	0x200005f0

000026a4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	b086      	sub	sp, #24
    26a8:	4606      	mov	r6, r0
    26aa:	b111      	cbz	r1, 26b2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    26ac:	2011      	movs	r0, #17
    26ae:	b006      	add	sp, #24
    26b0:	bd70      	pop	{r4, r5, r6, pc}
    26b2:	4c17      	ldr	r4, [pc, #92]	; (2710 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    26b4:	7820      	ldrb	r0, [r4, #0]
    26b6:	b108      	cbz	r0, 26bc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    26b8:	200c      	movs	r0, #12
    26ba:	e7f8      	b.n	26ae <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    26bc:	f7fe ff38 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    26c0:	4605      	mov	r5, r0
    26c2:	2000      	movs	r0, #0
    26c4:	7060      	strb	r0, [r4, #1]
    26c6:	2004      	movs	r0, #4
    26c8:	7020      	strb	r0, [r4, #0]
    26ca:	f000 fa3d 	bl	2b48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    26ce:	64a0      	str	r0, [r4, #72]	; 0x48
    26d0:	2100      	movs	r1, #0
    26d2:	4810      	ldr	r0, [pc, #64]	; (2714 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    26d4:	f004 f814 	bl	6700 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    26d8:	7028      	strb	r0, [r5, #0]
    26da:	2820      	cmp	r0, #32
    26dc:	d00d      	beq.n	26fa <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    26de:	4633      	mov	r3, r6
    26e0:	2200      	movs	r2, #0
    26e2:	2101      	movs	r1, #1
    26e4:	4668      	mov	r0, sp
    26e6:	f000 fa89 	bl	2bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    26ea:	b148      	cbz	r0, 2700 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    26ec:	7828      	ldrb	r0, [r5, #0]
    26ee:	4669      	mov	r1, sp
    26f0:	f006 fff7 	bl	96e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    26f4:	b138      	cbz	r0, 2706 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    26f6:	2000      	movs	r0, #0
    26f8:	e7d9      	b.n	26ae <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    26fa:	f240 3162 	movw	r1, #866	; 0x362
    26fe:	e004      	b.n	270a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2700:	f44f 7159 	mov.w	r1, #868	; 0x364
    2704:	e001      	b.n	270a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2706:	f240 3165 	movw	r1, #869	; 0x365
    270a:	2021      	movs	r0, #33	; 0x21
    270c:	f7fd fe42 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2710:	200005f0 	.word	0x200005f0
    2714:	00002885 	.word	0x00002885

00002718 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    271c:	2700      	movs	r7, #0
    271e:	f7fe ff07 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2722:	4c18      	ldr	r4, [pc, #96]	; (2784 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    2724:	4605      	mov	r5, r0
    2726:	7820      	ldrb	r0, [r4, #0]
    2728:	2804      	cmp	r0, #4
    272a:	d005      	beq.n	2738 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    272c:	7820      	ldrb	r0, [r4, #0]
    272e:	2805      	cmp	r0, #5
    2730:	d002      	beq.n	2738 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    2732:	200c      	movs	r0, #12
    2734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2738:	2001      	movs	r0, #1
    273a:	7060      	strb	r0, [r4, #1]
    273c:	7b20      	ldrb	r0, [r4, #12]
    273e:	b160      	cbz	r0, 275a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    2740:	f3ef 8610 	mrs	r6, PRIMASK
    2744:	b672      	cpsid	i
    2746:	7b20      	ldrb	r0, [r4, #12]
    2748:	b128      	cbz	r0, 2756 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    274a:	7b60      	ldrb	r0, [r4, #13]
    274c:	b118      	cbz	r0, 2756 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    274e:	f006 fdd4 	bl	92fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2752:	f000 f887 	bl	2864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    2756:	b126      	cbz	r6, 2762 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    2758:	e004      	b.n	2764 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    275a:	7828      	ldrb	r0, [r5, #0]
    275c:	f003 fd4e 	bl	61fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    2760:	e000      	b.n	2764 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    2762:	b662      	cpsie	i
    2764:	7828      	ldrb	r0, [r5, #0]
    2766:	f003 feb3 	bl	64d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    276a:	f000 fb9f 	bl	2eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    276e:	2000      	movs	r0, #0
    2770:	7060      	strb	r0, [r4, #1]
    2772:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    2776:	b100      	cbz	r0, 277a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    2778:	270c      	movs	r7, #12
    277a:	f000 fbc3 	bl	2f04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    277e:	4638      	mov	r0, r7
    2780:	e7d8      	b.n	2734 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    2782:	0000      	.short	0x0000
    2784:	200005f0 	.word	0x200005f0

00002788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    2788:	4801      	ldr	r0, [pc, #4]	; (2790 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    278a:	7800      	ldrb	r0, [r0, #0]
    278c:	4770      	bx	lr
    278e:	0000      	.short	0x0000
    2790:	200005f0 	.word	0x200005f0

00002794 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    2794:	b510      	push	{r4, lr}
    2796:	4c10      	ldr	r4, [pc, #64]	; (27d8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    2798:	b086      	sub	sp, #24
    279a:	7b20      	ldrb	r0, [r4, #12]
    279c:	b1b0      	cbz	r0, 27cc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    279e:	7860      	ldrb	r0, [r4, #1]
    27a0:	b9a0      	cbnz	r0, 27cc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27a2:	2300      	movs	r3, #0
    27a4:	461a      	mov	r2, r3
    27a6:	4619      	mov	r1, r3
    27a8:	4668      	mov	r0, sp
    27aa:	f000 fa27 	bl	2bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    27ae:	b158      	cbz	r0, 27c8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    27b0:	f7fe febe 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    27b4:	7800      	ldrb	r0, [r0, #0]
    27b6:	4669      	mov	r1, sp
    27b8:	f006 ff93 	bl	96e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    27bc:	b930      	cbnz	r0, 27cc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27be:	f240 71bc 	movw	r1, #1980	; 0x7bc
    27c2:	2021      	movs	r0, #33	; 0x21
    27c4:	f7fd fde6 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27c8:	2001      	movs	r0, #1
    27ca:	70a0      	strb	r0, [r4, #2]
    27cc:	b006      	add	sp, #24
    27ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27d2:	f000 b847 	b.w	2864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    27d6:	0000      	.short	0x0000
    27d8:	200005f0 	.word	0x200005f0

000027dc <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    27dc:	b508      	push	{r3, lr}
    27de:	2260      	movs	r2, #96	; 0x60
    27e0:	2100      	movs	r1, #0
    27e2:	480c      	ldr	r0, [pc, #48]	; (2814 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    27e4:	f007 fd26 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    27e8:	f7fe fea2 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    27ec:	2120      	movs	r1, #32
    27ee:	7001      	strb	r1, [r0, #0]
    27f0:	f000 f812 	bl	2818 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    27f4:	b120      	cbz	r0, 2800 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    27f6:	f240 2135 	movw	r1, #565	; 0x235
    27fa:	2021      	movs	r0, #33	; 0x21
    27fc:	f7fd fdca 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2800:	f242 7010 	movw	r0, #10000	; 0x2710
    2804:	9000      	str	r0, [sp, #0]
    2806:	2201      	movs	r2, #1
    2808:	4669      	mov	r1, sp
    280a:	1080      	asrs	r0, r0, #2
    280c:	f000 f8dc 	bl	29c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    2810:	bd08      	pop	{r3, pc}
    2812:	0000      	.short	0x0000
    2814:	200005f0 	.word	0x200005f0

00002818 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    2818:	4803      	ldr	r0, [pc, #12]	; (2828 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    281a:	b510      	push	{r4, lr}
    281c:	7800      	ldrb	r0, [r0, #0]
    281e:	b108      	cbz	r0, 2824 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    2820:	f7ff ff7a 	bl	2718 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    2824:	2000      	movs	r0, #0
    2826:	bd10      	pop	{r4, pc}
    2828:	200005f0 	.word	0x200005f0

0000282c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    282c:	490c      	ldr	r1, [pc, #48]	; (2860 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    282e:	b508      	push	{r3, lr}
    2830:	7809      	ldrb	r1, [r1, #0]
    2832:	b121      	cbz	r1, 283e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    2834:	f44f 7147 	mov.w	r1, #796	; 0x31c
    2838:	2021      	movs	r0, #33	; 0x21
    283a:	f7fd fdab 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    283e:	2300      	movs	r3, #0
    2840:	9300      	str	r3, [sp, #0]
    2842:	7801      	ldrb	r1, [r0, #0]
    2844:	461a      	mov	r2, r3
    2846:	07c9      	lsls	r1, r1, #31
    2848:	d003      	beq.n	2852 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    284a:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    284e:	2201      	movs	r2, #1
    2850:	9000      	str	r0, [sp, #0]
    2852:	4669      	mov	r1, sp
    2854:	4618      	mov	r0, r3
    2856:	f000 f8b7 	bl	29c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    285a:	2000      	movs	r0, #0
    285c:	bd08      	pop	{r3, pc}
    285e:	0000      	.short	0x0000
    2860:	200005f0 	.word	0x200005f0
    2864:	b510      	push	{r4, lr}
    2866:	4c06      	ldr	r4, [pc, #24]	; (2880 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54>)
    2868:	7b20      	ldrb	r0, [r4, #12]
    286a:	2800      	cmp	r0, #0
    286c:	d006      	beq.n	287c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50>
    286e:	f001 f865 	bl	393c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    2872:	f003 ff69 	bl	6748 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    2876:	2000      	movs	r0, #0
    2878:	7320      	strb	r0, [r4, #12]
    287a:	7360      	strb	r0, [r4, #13]
    287c:	bd10      	pop	{r4, pc}
    287e:	0000      	.short	0x0000
    2880:	200005f0 	.word	0x200005f0
    2884:	b5f0      	push	{r4, r5, r6, r7, lr}
    2886:	b087      	sub	sp, #28
    2888:	460d      	mov	r5, r1
    288a:	f7fe fe51 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    288e:	2701      	movs	r7, #1
    2890:	4c3f      	ldr	r4, [pc, #252]	; (2990 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>)
    2892:	2d09      	cmp	r5, #9
    2894:	d278      	bcs.n	2988 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x15c>
    2896:	e8df f005 	tbb	[pc, r5]
    289a:	3905      	.short	0x3905
    289c:	774a4f4f 	.word	0x774a4f4f
    28a0:	00726d64 	.word	0x00726d64
    28a4:	7327      	strb	r7, [r4, #12]
    28a6:	7861      	ldrb	r1, [r4, #1]
    28a8:	2900      	cmp	r1, #0
    28aa:	d12d      	bne.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    28ac:	7800      	ldrb	r0, [r0, #0]
    28ae:	f002 ff49 	bl	5744 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    28b2:	4605      	mov	r5, r0
    28b4:	460e      	mov	r6, r1
    28b6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    28ba:	f000 fb3f 	bl	2f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    28be:	b118      	cbz	r0, 28c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>
    28c0:	2000      	movs	r0, #0
    28c2:	f88d 0004 	strb.w	r0, [sp, #4]
    28c6:	e001      	b.n	28cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    28c8:	f88d 7004 	strb.w	r7, [sp, #4]
    28cc:	f000 f950 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    28d0:	4633      	mov	r3, r6
    28d2:	462a      	mov	r2, r5
    28d4:	f006 ff07 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    28d8:	6861      	ldr	r1, [r4, #4]
    28da:	fbb0 f2f1 	udiv	r2, r0, r1
    28de:	fb01 0012 	mls	r0, r1, r2, r0
    28e2:	b150      	cbz	r0, 28fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xce>
    28e4:	f05f 0000 	movs.w	r0, #0
    28e8:	f88d 0005 	strb.w	r0, [sp, #5]
    28ec:	4668      	mov	r0, sp
    28ee:	f7fe feb7 	bl	1660 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    28f2:	b120      	cbz	r0, 28fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd2>
    28f4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    28f8:	e043      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    28fa:	2001      	movs	r0, #1
    28fc:	e7f4      	b.n	28e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>
    28fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2900:	38e8      	subs	r0, #232	; 0xe8
    2902:	63a0      	str	r0, [r4, #56]	; 0x38
    2904:	f003 fffc 	bl	6900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    2908:	b007      	add	sp, #28
    290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    290c:	7860      	ldrb	r0, [r4, #1]
    290e:	b130      	cbz	r0, 291e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf2>
    2910:	f006 fcf3 	bl	92fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2914:	b007      	add	sp, #28
    2916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    291a:	f7ff bfa3 	b.w	2864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    291e:	7367      	strb	r7, [r4, #13]
    2920:	f7fe ff26 	bl	1770 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    2924:	2800      	cmp	r0, #0
    2926:	d0ef      	beq.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2928:	f240 11e1 	movw	r1, #481	; 0x1e1
    292c:	e029      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    292e:	b007      	add	sp, #28
    2930:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2934:	f001 b9ce 	b.w	3cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    2938:	7805      	ldrb	r5, [r0, #0]
    293a:	2300      	movs	r3, #0
    293c:	2201      	movs	r2, #1
    293e:	4619      	mov	r1, r3
    2940:	4668      	mov	r0, sp
    2942:	f000 f95b 	bl	2bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    2946:	b140      	cbz	r0, 295a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12e>
    2948:	4669      	mov	r1, sp
    294a:	4628      	mov	r0, r5
    294c:	f006 fec9 	bl	96e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    2950:	2800      	cmp	r0, #0
    2952:	d1d9      	bne.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2954:	f240 71d7 	movw	r1, #2007	; 0x7d7
    2958:	e013      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    295a:	70a7      	strb	r7, [r4, #2]
    295c:	f000 f81a 	bl	2994 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    2960:	e7d2      	b.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2962:	f000 f8ab 	bl	2abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    2966:	2800      	cmp	r0, #0
    2968:	d1ce      	bne.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    296a:	b007      	add	sp, #28
    296c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2970:	f006 bcc1 	b.w	92f6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    2974:	b007      	add	sp, #28
    2976:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    297a:	f000 b80b 	b.w	2994 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    297e:	f240 2113 	movw	r1, #531	; 0x213
    2982:	2021      	movs	r0, #33	; 0x21
    2984:	f7fd fd06 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2988:	f240 2117 	movw	r1, #535	; 0x217
    298c:	e7f9      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    298e:	0000      	.short	0x0000
    2990:	200005f0 	.word	0x200005f0
    2994:	b510      	push	{r4, lr}
    2996:	4c0b      	ldr	r4, [pc, #44]	; (29c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x198>)
    2998:	7820      	ldrb	r0, [r4, #0]
    299a:	b138      	cbz	r0, 29ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x180>
    299c:	f000 fa86 	bl	2eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    29a0:	78a0      	ldrb	r0, [r4, #2]
    29a2:	b150      	cbz	r0, 29ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    29a4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    29a8:	b128      	cbz	r0, 29b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18a>
    29aa:	e006      	b.n	29ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    29ac:	f240 117b 	movw	r1, #379	; 0x17b
    29b0:	2021      	movs	r0, #33	; 0x21
    29b2:	f7fd fcef 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29b6:	f7fe fef3 	bl	17a0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    29ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29be:	f000 baa1 	b.w	2f04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    29c2:	0000      	.short	0x0000
    29c4:	200005f0 	.word	0x200005f0
    29c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29cc:	4d11      	ldr	r5, [pc, #68]	; (2a14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e8>)
    29ce:	4616      	mov	r6, r2
    29d0:	460f      	mov	r7, r1
    29d2:	2400      	movs	r4, #0
    29d4:	6068      	str	r0, [r5, #4]
    29d6:	f006 fe5f 	bl	9698 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    29da:	f8df c03c 	ldr.w	ip, [pc, #60]	; 2a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ec>
    29de:	2100      	movs	r1, #0
    29e0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    29e4:	4232      	tst	r2, r6
    29e6:	d007      	beq.n	29f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    29e8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    29ec:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    29f0:	1a1b      	subs	r3, r3, r0
    29f2:	1c64      	adds	r4, r4, #1
    29f4:	b2e4      	uxtb	r4, r4
    29f6:	6093      	str	r3, [r2, #8]
    29f8:	1c49      	adds	r1, r1, #1
    29fa:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    29fe:	d0ef      	beq.n	29e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1b4>
    2a00:	f016 0f0e 	tst.w	r6, #14
    2a04:	d004      	beq.n	2a10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e4>
    2a06:	f240 7103 	movw	r1, #1795	; 0x703
    2a0a:	2021      	movs	r0, #33	; 0x21
    2a0c:	f7fd fcc2 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a14:	200005f0 	.word	0x200005f0
    2a18:	0000a385 	.word	0x0000a385
    2a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a20:	b086      	sub	sp, #24
    2a22:	4692      	mov	sl, r2
    2a24:	4607      	mov	r7, r0
    2a26:	4689      	mov	r9, r1
    2a28:	f000 fa94 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a2c:	4d22      	ldr	r5, [pc, #136]	; (2ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x28c>)
    2a2e:	f04f 0800 	mov.w	r8, #0
    2a32:	686a      	ldr	r2, [r5, #4]
    2a34:	1886      	adds	r6, r0, r2
    2a36:	eb41 0108 	adc.w	r1, r1, r8
    2a3a:	460c      	mov	r4, r1
    2a3c:	460b      	mov	r3, r1
    2a3e:	4632      	mov	r2, r6
    2a40:	4638      	mov	r0, r7
    2a42:	4649      	mov	r1, r9
    2a44:	f006 fe4f 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2a48:	4607      	mov	r7, r0
    2a4a:	f006 fe43 	bl	96d4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    2a4e:	4287      	cmp	r7, r0
    2a50:	da13      	bge.n	2a7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24e>
    2a52:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    2a56:	f000 fa7d 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a5a:	4632      	mov	r2, r6
    2a5c:	4623      	mov	r3, r4
    2a5e:	f006 fe42 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2a62:	6869      	ldr	r1, [r5, #4]
    2a64:	fbb0 f1f1 	udiv	r1, r0, r1
    2a68:	f8ca 1000 	str.w	r1, [sl]
    2a6c:	6868      	ldr	r0, [r5, #4]
    2a6e:	1980      	adds	r0, r0, r6
    2a70:	eb48 0104 	adc.w	r1, r8, r4
    2a74:	b006      	add	sp, #24
    2a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a7a:	f88d 8000 	strb.w	r8, [sp]
    2a7e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    2a80:	9001      	str	r0, [sp, #4]
    2a82:	f006 fdf2 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2a86:	f8ad 0008 	strh.w	r0, [sp, #8]
    2a8a:	2001      	movs	r0, #1
    2a8c:	f88d 000b 	strb.w	r0, [sp, #11]
    2a90:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    2a94:	f000 fa5e 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2a9c:	f000 f9ec 	bl	2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2aa0:	f88d 000a 	strb.w	r0, [sp, #10]
    2aa4:	4668      	mov	r0, sp
    2aa6:	6869      	ldr	r1, [r5, #4]
    2aa8:	f006 fafd 	bl	90a6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    2aac:	f8ca 0000 	str.w	r0, [sl]
    2ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2ab4:	e7de      	b.n	2a74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    2ab6:	0000      	.short	0x0000
    2ab8:	200005f0 	.word	0x200005f0
    2abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ac0:	f007 f9ac 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2ac4:	4c1f      	ldr	r4, [pc, #124]	; (2b44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>)
    2ac6:	4606      	mov	r6, r0
    2ac8:	460d      	mov	r5, r1
    2aca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    2ace:	f000 f9d3 	bl	2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2ad2:	4607      	mov	r7, r0
    2ad4:	f002 fdec 	bl	56b0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    2ad8:	4602      	mov	r2, r0
    2ada:	2867      	cmp	r0, #103	; 0x67
    2adc:	d323      	bcc.n	2b26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    2ade:	1c50      	adds	r0, r2, #1
    2ae0:	d024      	beq.n	2b2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x300>
    2ae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2ae6:	1888      	adds	r0, r1, r2
    2ae8:	4283      	cmp	r3, r0
    2aea:	d800      	bhi.n	2aee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2c2>
    2aec:	1a5a      	subs	r2, r3, r1
    2aee:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    2af2:	1830      	adds	r0, r6, r0
    2af4:	f145 31ff 	adc.w	r1, r5, #4294967295
    2af8:	f000 fa42 	bl	2f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2afc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2afe:	4408      	add	r0, r1
    2b00:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2b02:	1a45      	subs	r5, r0, r1
    2b04:	f241 3088 	movw	r0, #5000	; 0x1388
    2b08:	4285      	cmp	r5, r0
    2b0a:	d900      	bls.n	2b0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e2>
    2b0c:	4605      	mov	r5, r0
    2b0e:	f007 f985 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2b12:	1b80      	subs	r0, r0, r6
    2b14:	f100 00a1 	add.w	r0, r0, #161	; 0xa1
    2b18:	4285      	cmp	r5, r0
    2b1a:	d304      	bcc.n	2b26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    2b1c:	4639      	mov	r1, r7
    2b1e:	4628      	mov	r0, r5
    2b20:	f002 fcd6 	bl	54d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    2b24:	b120      	cbz	r0, 2b30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x304>
    2b26:	2000      	movs	r0, #0
    2b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b2e:	e7e7      	b.n	2b00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d4>
    2b30:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b32:	4428      	add	r0, r5
    2b34:	6320      	str	r0, [r4, #48]	; 0x30
    2b36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2b38:	4428      	add	r0, r5
    2b3a:	63a0      	str	r0, [r4, #56]	; 0x38
    2b3c:	f003 fee0 	bl	6900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    2b40:	2001      	movs	r0, #1
    2b42:	e7f1      	b.n	2b28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fc>
    2b44:	200005f0 	.word	0x200005f0
    2b48:	b510      	push	{r4, lr}
    2b4a:	2400      	movs	r4, #0
    2b4c:	f006 fda4 	bl	9698 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    2b50:	4a06      	ldr	r2, [pc, #24]	; (2b6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x340>)
    2b52:	2100      	movs	r1, #0
    2b54:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    2b58:	4404      	add	r4, r0
    2b5a:	689b      	ldr	r3, [r3, #8]
    2b5c:	1c49      	adds	r1, r1, #1
    2b5e:	441c      	add	r4, r3
    2b60:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    2b64:	d0f6      	beq.n	2b54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x328>
    2b66:	4620      	mov	r0, r4
    2b68:	bd10      	pop	{r4, pc}
    2b6a:	0000      	.short	0x0000
    2b6c:	200005f0 	.word	0x200005f0
    2b70:	4901      	ldr	r1, [pc, #4]	; (2b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34c>)
    2b72:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    2b76:	4770      	bx	lr
    2b78:	200005f0 	.word	0x200005f0
    2b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b80:	4606      	mov	r6, r0
    2b82:	481d      	ldr	r0, [pc, #116]	; (2bf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    2b84:	4688      	mov	r8, r1
    2b86:	4615      	mov	r5, r2
    2b88:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    2b8c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2b90:	2701      	movs	r7, #1
    2b92:	4050      	eors	r0, r2
    2b94:	b086      	sub	sp, #24
    2b96:	ea70 0101 	orns	r1, r0, r1
    2b9a:	d021      	beq.n	2be0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    2b9c:	2400      	movs	r4, #0
    2b9e:	f88d 4000 	strb.w	r4, [sp]
    2ba2:	9501      	str	r5, [sp, #4]
    2ba4:	f006 fd61 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2ba8:	f8ad 0008 	strh.w	r0, [sp, #8]
    2bac:	f88d 700b 	strb.w	r7, [sp, #11]
    2bb0:	f006 fd90 	bl	96d4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    2bb4:	1982      	adds	r2, r0, r6
    2bb6:	eb44 0008 	adc.w	r0, r4, r8
    2bba:	e9cd 2004 	strd	r2, r0, [sp, #16]
    2bbe:	2002      	movs	r0, #2
    2bc0:	f88d 000a 	strb.w	r0, [sp, #10]
    2bc4:	4668      	mov	r0, sp
    2bc6:	f003 f95f 	bl	5e88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    2bca:	b168      	cbz	r0, 2be8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3bc>
    2bcc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    2bd0:	194a      	adds	r2, r1, r5
    2bd2:	4909      	ldr	r1, [pc, #36]	; (2bf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    2bd4:	4160      	adcs	r0, r4
    2bd6:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    2bda:	1a9a      	subs	r2, r3, r2
    2bdc:	4181      	sbcs	r1, r0
    2bde:	d408      	bmi.n	2bf2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c6>
    2be0:	2001      	movs	r0, #1
    2be2:	b006      	add	sp, #24
    2be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2be8:	f240 5135 	movw	r1, #1333	; 0x535
    2bec:	2021      	movs	r0, #33	; 0x21
    2bee:	f7fd fbd1 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bf2:	2000      	movs	r0, #0
    2bf4:	e7f5      	b.n	2be2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b6>
    2bf6:	0000      	.short	0x0000
    2bf8:	200005f0 	.word	0x200005f0
    2bfc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c00:	b087      	sub	sp, #28
    2c02:	4614      	mov	r4, r2
    2c04:	4606      	mov	r6, r0
    2c06:	f007 f909 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2c0a:	4d99      	ldr	r5, [pc, #612]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c0c:	4680      	mov	r8, r0
    2c0e:	4689      	mov	r9, r1
    2c10:	68a8      	ldr	r0, [r5, #8]
    2c12:	f04f 0a00 	mov.w	sl, #0
    2c16:	9002      	str	r0, [sp, #8]
    2c18:	f7ff ff96 	bl	2b48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    2c1c:	6869      	ldr	r1, [r5, #4]
    2c1e:	4288      	cmp	r0, r1
    2c20:	d101      	bne.n	2c26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fa>
    2c22:	2001      	movs	r0, #1
    2c24:	e000      	b.n	2c28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fc>
    2c26:	2000      	movs	r0, #0
    2c28:	9004      	str	r0, [sp, #16]
    2c2a:	4020      	ands	r0, r4
    2c2c:	9003      	str	r0, [sp, #12]
    2c2e:	9808      	ldr	r0, [sp, #32]
    2c30:	2800      	cmp	r0, #0
    2c32:	d07f      	beq.n	2d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    2c34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    2c38:	eb18 0b02 	adds.w	fp, r8, r2
    2c3c:	f149 0400 	adc.w	r4, r9, #0
    2c40:	f000 fa8a 	bl	3158 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    2c44:	9000      	str	r0, [sp, #0]
    2c46:	488a      	ldr	r0, [pc, #552]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c48:	7800      	ldrb	r0, [r0, #0]
    2c4a:	4f89      	ldr	r7, [pc, #548]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c4c:	3740      	adds	r7, #64	; 0x40
    2c4e:	2805      	cmp	r0, #5
    2c50:	d135      	bne.n	2cbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    2c52:	4887      	ldr	r0, [pc, #540]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c54:	6a00      	ldr	r0, [r0, #32]
    2c56:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2c5a:	f000 fa63 	bl	3124 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    2c5e:	9900      	ldr	r1, [sp, #0]
    2c60:	4605      	mov	r5, r0
    2c62:	4288      	cmp	r0, r1
    2c64:	d009      	beq.n	2c7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44e>
    2c66:	4882      	ldr	r0, [pc, #520]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c68:	4629      	mov	r1, r5
    2c6a:	6a00      	ldr	r0, [r0, #32]
    2c6c:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2c70:	f000 fa0c 	bl	308c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    2c74:	2000      	movs	r0, #0
    2c76:	61b8      	str	r0, [r7, #24]
    2c78:	e00c      	b.n	2c94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x468>
    2c7a:	497d      	ldr	r1, [pc, #500]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c7c:	6a08      	ldr	r0, [r1, #32]
    2c7e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2c82:	61b8      	str	r0, [r7, #24]
    2c84:	6a08      	ldr	r0, [r1, #32]
    2c86:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    2c88:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2c8c:	4282      	cmp	r2, r0
    2c8e:	d300      	bcc.n	2c92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x466>
    2c90:	4610      	mov	r0, r2
    2c92:	6488      	str	r0, [r1, #72]	; 0x48
    2c94:	4876      	ldr	r0, [pc, #472]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c96:	6a00      	ldr	r0, [r0, #32]
    2c98:	b158      	cbz	r0, 2cb2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x486>
    2c9a:	b16d      	cbz	r5, 2cb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48c>
    2c9c:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    2ca0:	f8d5 c000 	ldr.w	ip, [r5]
    2ca4:	eb1c 0303 	adds.w	r3, ip, r3
    2ca8:	eb41 010a 	adc.w	r1, r1, sl
    2cac:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    2cb0:	e005      	b.n	2cbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    2cb2:	f240 7193 	movw	r1, #1939	; 0x793
    2cb6:	e01a      	b.n	2cee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    2cb8:	2100      	movs	r1, #0
    2cba:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    2cbe:	4638      	mov	r0, r7
    2cc0:	9900      	ldr	r1, [sp, #0]
    2cc2:	f000 f9e3 	bl	308c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    2cc6:	486a      	ldr	r0, [pc, #424]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2cc8:	9a00      	ldr	r2, [sp, #0]
    2cca:	6845      	ldr	r5, [r0, #4]
    2ccc:	b192      	cbz	r2, 2cf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c8>
    2cce:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    2cd2:	6817      	ldr	r7, [r2, #0]
    2cd4:	e9cd b400 	strd	fp, r4, [sp]
    2cd8:	18f8      	adds	r0, r7, r3
    2cda:	eb41 010a 	adc.w	r1, r1, sl
    2cde:	462a      	mov	r2, r5
    2ce0:	f006 fd29 	bl	9736 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    2ce4:	4601      	mov	r1, r0
    2ce6:	42a8      	cmp	r0, r5
    2ce8:	d905      	bls.n	2cf6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4ca>
    2cea:	f240 31f9 	movw	r1, #1017	; 0x3f9
    2cee:	2021      	movs	r0, #33	; 0x21
    2cf0:	f7fd fb50 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cf4:	2100      	movs	r1, #0
    2cf6:	eb1b 0501 	adds.w	r5, fp, r1
    2cfa:	495d      	ldr	r1, [pc, #372]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2cfc:	4650      	mov	r0, sl
    2cfe:	4144      	adcs	r4, r0
    2d00:	684a      	ldr	r2, [r1, #4]
    2d02:	1aab      	subs	r3, r5, r2
    2d04:	eb64 020a 	sbc.w	r2, r4, sl
    2d08:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    2d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d0e:	3128      	adds	r1, #40	; 0x28
    2d10:	b152      	cbz	r2, 2d28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    2d12:	f242 7310 	movw	r3, #10000	; 0x2710
    2d16:	435a      	muls	r2, r3
    2d18:	18aa      	adds	r2, r5, r2
    2d1a:	eb44 000a 	adc.w	r0, r4, sl
    2d1e:	e9c1 2000 	strd	r2, r0, [r1]
    2d22:	2001      	movs	r0, #1
    2d24:	e051      	b.n	2dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59e>
    2d26:	e005      	b.n	2d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    2d28:	f04f 30ff 	mov.w	r0, #4294967295
    2d2c:	0842      	lsrs	r2, r0, #1
    2d2e:	e9c1 0200 	strd	r0, r2, [r1]
    2d32:	e7f6      	b.n	2d22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f6>
    2d34:	9803      	ldr	r0, [sp, #12]
    2d36:	b1d8      	cbz	r0, 2d70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x544>
    2d38:	2001      	movs	r0, #1
    2d3a:	f006 fcb8 	bl	96ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2d3e:	4604      	mov	r4, r0
    2d40:	2001      	movs	r0, #1
    2d42:	f000 fee5 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    2d46:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    2d4a:	4401      	add	r1, r0
    2d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2d50:	fbb1 f0f0 	udiv	r0, r1, r0
    2d54:	1822      	adds	r2, r4, r0
    2d56:	4640      	mov	r0, r8
    2d58:	4649      	mov	r1, r9
    2d5a:	32f9      	adds	r2, #249	; 0xf9
    2d5c:	f7ff ff0e 	bl	2b7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    2d60:	b908      	cbnz	r0, 2d66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x53a>
    2d62:	2000      	movs	r0, #0
    2d64:	9002      	str	r0, [sp, #8]
    2d66:	4645      	mov	r5, r8
    2d68:	464c      	mov	r4, r9
    2d6a:	f8cd a014 	str.w	sl, [sp, #20]
    2d6e:	e02d      	b.n	2dcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    2d70:	b13c      	cbz	r4, 2d82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x556>
    2d72:	aa05      	add	r2, sp, #20
    2d74:	4640      	mov	r0, r8
    2d76:	4649      	mov	r1, r9
    2d78:	f7ff fe50 	bl	2a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f0>
    2d7c:	4605      	mov	r5, r0
    2d7e:	460c      	mov	r4, r1
    2d80:	e024      	b.n	2dcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    2d82:	4640      	mov	r0, r8
    2d84:	4649      	mov	r1, r9
    2d86:	f000 f8e5 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2d8a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>
    2d8e:	4602      	mov	r2, r0
    2d90:	4608      	mov	r0, r1
    2d92:	f8db 1008 	ldr.w	r1, [fp, #8]
    2d96:	9102      	str	r1, [sp, #8]
    2d98:	f8db 3004 	ldr.w	r3, [fp, #4]
    2d9c:	4657      	mov	r7, sl
    2d9e:	189d      	adds	r5, r3, r2
    2da0:	eb4a 0400 	adc.w	r4, sl, r0
    2da4:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    2da8:	f000 f8c8 	bl	2f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    2dac:	f8db 1004 	ldr.w	r1, [fp, #4]
    2db0:	4348      	muls	r0, r1
    2db2:	9000      	str	r0, [sp, #0]
    2db4:	f7ff fedc 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2db8:	9a00      	ldr	r2, [sp, #0]
    2dba:	1880      	adds	r0, r0, r2
    2dbc:	4179      	adcs	r1, r7
    2dbe:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    2dc2:	4621      	mov	r1, r4
    2dc4:	4628      	mov	r0, r5
    2dc6:	f000 f8b9 	bl	2f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    2dca:	9005      	str	r0, [sp, #20]
    2dcc:	2001      	movs	r0, #1
    2dce:	f006 fc6e 	bl	96ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2dd2:	4607      	mov	r7, r0
    2dd4:	2001      	movs	r0, #1
    2dd6:	f000 fe9b 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    2dda:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    2dde:	4401      	add	r1, r0
    2de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2de4:	fbb1 f0f0 	udiv	r0, r1, r0
    2de8:	4407      	add	r7, r0
    2dea:	4628      	mov	r0, r5
    2dec:	4621      	mov	r1, r4
    2dee:	37f9      	adds	r7, #249	; 0xf9
    2df0:	9a02      	ldr	r2, [sp, #8]
    2df2:	f000 f8c5 	bl	2f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2df6:	491e      	ldr	r1, [pc, #120]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2df8:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    2dfc:	6892      	ldr	r2, [r2, #8]
    2dfe:	4282      	cmp	r2, r0
    2e00:	d800      	bhi.n	2e04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d8>
    2e02:	4610      	mov	r0, r2
    2e04:	6348      	str	r0, [r1, #52]	; 0x34
    2e06:	9a08      	ldr	r2, [sp, #32]
    2e08:	b10a      	cbz	r2, 2e0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e2>
    2e0a:	e9c1 5404 	strd	r5, r4, [r1, #16]
    2e0e:	e9c1 5406 	strd	r5, r4, [r1, #24]
    2e12:	468b      	mov	fp, r1
    2e14:	9904      	ldr	r1, [sp, #16]
    2e16:	b111      	cbz	r1, 2e1e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f2>
    2e18:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    2e1c:	e001      	b.n	2e22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f6>
    2e1e:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    2e22:	2001      	movs	r0, #1
    2e24:	72f0      	strb	r0, [r6, #11]
    2e26:	f006 fc20 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2e2a:	8130      	strh	r0, [r6, #8]
    2e2c:	4628      	mov	r0, r5
    2e2e:	4621      	mov	r1, r4
    2e30:	f000 f822 	bl	2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2e34:	72b0      	strb	r0, [r6, #10]
    2e36:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    2e3a:	6070      	str	r0, [r6, #4]
    2e3c:	9803      	ldr	r0, [sp, #12]
    2e3e:	b148      	cbz	r0, 2e54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    2e40:	2001      	movs	r0, #1
    2e42:	7030      	strb	r0, [r6, #0]
    2e44:	4a0b      	ldr	r2, [pc, #44]	; (2e74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x648>)
    2e46:	4640      	mov	r0, r8
    2e48:	4649      	mov	r1, r9
    2e4a:	f000 f899 	bl	2f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2e4e:	1bc0      	subs	r0, r0, r7
    2e50:	6130      	str	r0, [r6, #16]
    2e52:	e003      	b.n	2e5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x630>
    2e54:	f886 a000 	strb.w	sl, [r6]
    2e58:	e9c6 5404 	strd	r5, r4, [r6, #16]
    2e5c:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    2e60:	42b8      	cmp	r0, r7
    2e62:	d303      	bcc.n	2e6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x640>
    2e64:	2001      	movs	r0, #1
    2e66:	b00b      	add	sp, #44	; 0x2c
    2e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e6c:	2000      	movs	r0, #0
    2e6e:	e7fa      	b.n	2e66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63a>
    2e70:	200005f0 	.word	0x200005f0
    2e74:	0f424000 	.word	0x0f424000
    2e78:	b570      	push	{r4, r5, r6, lr}
    2e7a:	4604      	mov	r4, r0
    2e7c:	480a      	ldr	r0, [pc, #40]	; (2ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>)
    2e7e:	460d      	mov	r5, r1
    2e80:	7801      	ldrb	r1, [r0, #0]
    2e82:	2904      	cmp	r1, #4
    2e84:	d10d      	bne.n	2ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    2e86:	6840      	ldr	r0, [r0, #4]
    2e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e8c:	0046      	lsls	r6, r0, #1
    2e8e:	f7ff fe6f 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2e92:	4622      	mov	r2, r4
    2e94:	462b      	mov	r3, r5
    2e96:	f006 fc26 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2e9a:	42b0      	cmp	r0, r6
    2e9c:	d201      	bcs.n	2ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    2e9e:	2002      	movs	r0, #2
    2ea0:	bd70      	pop	{r4, r5, r6, pc}
    2ea2:	2001      	movs	r0, #1
    2ea4:	bd70      	pop	{r4, r5, r6, pc}
    2ea6:	0000      	.short	0x0000
    2ea8:	200005f0 	.word	0x200005f0
    2eac:	b570      	push	{r4, r5, r6, lr}
    2eae:	4d14      	ldr	r5, [pc, #80]	; (2f00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d4>)
    2eb0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    2eb4:	f105 0440 	add.w	r4, r5, #64	; 0x40
    2eb8:	2800      	cmp	r0, #0
    2eba:	7828      	ldrb	r0, [r5, #0]
    2ebc:	d00f      	beq.n	2ede <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6b2>
    2ebe:	2805      	cmp	r0, #5
    2ec0:	d004      	beq.n	2ecc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    2ec2:	f240 2157 	movw	r1, #599	; 0x257
    2ec6:	2021      	movs	r0, #33	; 0x21
    2ec8:	f7fd fa64 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ecc:	4620      	mov	r0, r4
    2ece:	f006 fbe9 	bl	96a4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    2ed2:	b178      	cbz	r0, 2ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2ed4:	4620      	mov	r0, r4
    2ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2eda:	f000 b8b5 	b.w	3048 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    2ede:	2805      	cmp	r0, #5
    2ee0:	d108      	bne.n	2ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2ee2:	4620      	mov	r0, r4
    2ee4:	f006 fbde 	bl	96a4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    2ee8:	b920      	cbnz	r0, 2ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2eea:	6a28      	ldr	r0, [r5, #32]
    2eec:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2ef0:	f000 f8fa 	bl	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    2ef4:	4620      	mov	r0, r4
    2ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2efa:	f000 b8f5 	b.w	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    2efe:	0000      	.short	0x0000
    2f00:	200005f0 	.word	0x200005f0
    2f04:	b510      	push	{r4, lr}
    2f06:	f7fe fb6d 	bl	15e4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    2f0a:	490b      	ldr	r1, [pc, #44]	; (2f38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    2f0c:	2000      	movs	r0, #0
    2f0e:	7088      	strb	r0, [r1, #2]
    2f10:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    2f14:	6208      	str	r0, [r1, #32]
    2f16:	7008      	strb	r0, [r1, #0]
    2f18:	f7fe fb0a 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2f1c:	4604      	mov	r4, r0
    2f1e:	7800      	ldrb	r0, [r0, #0]
    2f20:	f003 fab4 	bl	648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    2f24:	b110      	cbz	r0, 2f2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>
    2f26:	2020      	movs	r0, #32
    2f28:	7020      	strb	r0, [r4, #0]
    2f2a:	bd10      	pop	{r4, pc}
    2f2c:	f240 3192 	movw	r1, #914	; 0x392
    2f30:	2021      	movs	r0, #33	; 0x21
    2f32:	f7fd fa2f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f36:	0000      	.short	0x0000
    2f38:	200005f0 	.word	0x200005f0
    2f3c:	b510      	push	{r4, lr}
    2f3e:	4604      	mov	r4, r0
    2f40:	f7ff fe16 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f44:	4902      	ldr	r1, [pc, #8]	; (2f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x724>)
    2f46:	1a20      	subs	r0, r4, r0
    2f48:	6849      	ldr	r1, [r1, #4]
    2f4a:	fbb0 f0f1 	udiv	r0, r0, r1
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	200005f0 	.word	0x200005f0
    2f54:	b570      	push	{r4, r5, r6, lr}
    2f56:	4604      	mov	r4, r0
    2f58:	460d      	mov	r5, r1
    2f5a:	f7ff fe09 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f5e:	4622      	mov	r2, r4
    2f60:	462b      	mov	r3, r5
    2f62:	f006 fbc0 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2f66:	4905      	ldr	r1, [pc, #20]	; (2f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x750>)
    2f68:	684c      	ldr	r4, [r1, #4]
    2f6a:	fbb0 f0f4 	udiv	r0, r0, r4
    2f6e:	4344      	muls	r4, r0
    2f70:	f7ff fdfe 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f74:	1900      	adds	r0, r0, r4
    2f76:	f141 0100 	adc.w	r1, r1, #0
    2f7a:	bd70      	pop	{r4, r5, r6, pc}
    2f7c:	200005f0 	.word	0x200005f0
    2f80:	4b0a      	ldr	r3, [pc, #40]	; (2fac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x780>)
    2f82:	b510      	push	{r4, lr}
    2f84:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    2f88:	1a20      	subs	r0, r4, r0
    2f8a:	eb63 0301 	sbc.w	r3, r3, r1
    2f8e:	2400      	movs	r4, #0
    2f90:	4621      	mov	r1, r4
    2f92:	1a24      	subs	r4, r4, r0
    2f94:	4199      	sbcs	r1, r3
    2f96:	da06      	bge.n	2fa6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    2f98:	2100      	movs	r1, #0
    2f9a:	1a14      	subs	r4, r2, r0
    2f9c:	eb71 0403 	sbcs.w	r4, r1, r3
    2fa0:	da00      	bge.n	2fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x778>
    2fa2:	4610      	mov	r0, r2
    2fa4:	bd10      	pop	{r4, pc}
    2fa6:	2000      	movs	r0, #0
    2fa8:	bd10      	pop	{r4, pc}
    2faa:	0000      	.short	0x0000
    2fac:	200005f0 	.word	0x200005f0

00002fb0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    2fb0:	4902      	ldr	r1, [pc, #8]	; (2fbc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0xc>)
    2fb2:	2000      	movs	r0, #0
    2fb4:	6008      	str	r0, [r1, #0]
    2fb6:	6048      	str	r0, [r1, #4]
    2fb8:	f000 b808 	b.w	2fcc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    2fbc:	200000ac 	.word	0x200000ac

00002fc0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    2fc0:	4901      	ldr	r1, [pc, #4]	; (2fc8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    2fc2:	7048      	strb	r0, [r1, #1]
    2fc4:	4770      	bx	lr
    2fc6:	0000      	.short	0x0000
    2fc8:	200000ac 	.word	0x200000ac
    2fcc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2fd0:	4e1c      	ldr	r6, [pc, #112]	; (3044 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x84>)
    2fd2:	2001      	movs	r0, #1
    2fd4:	7030      	strb	r0, [r6, #0]
    2fd6:	2400      	movs	r4, #0
    2fd8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2fdc:	e016      	b.n	300c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x4c>
    2fde:	2100      	movs	r1, #0
    2fe0:	f7fd fc82 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2fe4:	0005      	movs	r5, r0
    2fe6:	d014      	beq.n	3012 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x52>
    2fe8:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    2fec:	f003 fa70 	bl	64d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    2ff0:	f885 4248 	strb.w	r4, [r5, #584]	; 0x248
    2ff4:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    2ff8:	f003 fa48 	bl	648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    2ffc:	b160      	cbz	r0, 3018 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x58>
    2ffe:	2020      	movs	r0, #32
    3000:	f885 0249 	strb.w	r0, [r5, #585]	; 0x249
    3004:	f505 700a 	add.w	r0, r5, #552	; 0x228
    3008:	f000 f86e 	bl	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    300c:	9400      	str	r4, [sp, #0]
    300e:	9401      	str	r4, [sp, #4]
    3010:	e010      	b.n	3034 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3012:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    3016:	e001      	b.n	301c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x5c>
    3018:	f240 11bf 	movw	r1, #447	; 0x1bf
    301c:	2035      	movs	r0, #53	; 0x35
    301e:	f7fd f9b9 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3022:	9800      	ldr	r0, [sp, #0]
    3024:	b130      	cbz	r0, 3034 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3026:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    302a:	b119      	cbz	r1, 3034 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    302c:	8800      	ldrh	r0, [r0, #0]
    302e:	42b8      	cmp	r0, r7
    3030:	d1d5      	bne.n	2fde <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x1e>
    3032:	e004      	b.n	303e <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x7e>
    3034:	4668      	mov	r0, sp
    3036:	f7fd fc9d 	bl	974 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    303a:	2800      	cmp	r0, #0
    303c:	d0f1      	beq.n	3022 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x62>
    303e:	7034      	strb	r4, [r6, #0]
    3040:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3044:	200000ac 	.word	0x200000ac

00003048 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    3048:	b510      	push	{r4, lr}
    304a:	6981      	ldr	r1, [r0, #24]
    304c:	b119      	cbz	r1, 3056 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    304e:	6882      	ldr	r2, [r0, #8]
    3050:	688b      	ldr	r3, [r1, #8]
    3052:	429a      	cmp	r2, r3
    3054:	d203      	bcs.n	305e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    3056:	21c6      	movs	r1, #198	; 0xc6
    3058:	2037      	movs	r0, #55	; 0x37
    305a:	f7fd f99b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    305e:	6942      	ldr	r2, [r0, #20]
    3060:	614a      	str	r2, [r1, #20]
    3062:	6903      	ldr	r3, [r0, #16]
    3064:	610b      	str	r3, [r1, #16]
    3066:	b10a      	cbz	r2, 306c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    3068:	6111      	str	r1, [r2, #16]
    306a:	e001      	b.n	3070 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    306c:	4a06      	ldr	r2, [pc, #24]	; (3088 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    306e:	6011      	str	r1, [r2, #0]
    3070:	690a      	ldr	r2, [r1, #16]
    3072:	b132      	cbz	r2, 3082 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    3074:	6151      	str	r1, [r2, #20]
    3076:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    307a:	4410      	add	r0, r2
    307c:	688a      	ldr	r2, [r1, #8]
    307e:	1a80      	subs	r0, r0, r2
    3080:	e000      	b.n	3084 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    3082:	2000      	movs	r0, #0
    3084:	60c8      	str	r0, [r1, #12]
    3086:	bd10      	pop	{r4, pc}
    3088:	200000b4 	.word	0x200000b4

0000308c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    308c:	b510      	push	{r4, lr}
    308e:	2200      	movs	r2, #0
    3090:	6141      	str	r1, [r0, #20]
    3092:	b189      	cbz	r1, 30b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    3094:	690b      	ldr	r3, [r1, #16]
    3096:	6108      	str	r0, [r1, #16]
    3098:	6103      	str	r3, [r0, #16]
    309a:	b103      	cbz	r3, 309e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    309c:	6158      	str	r0, [r3, #20]
    309e:	6941      	ldr	r1, [r0, #20]
    30a0:	60c2      	str	r2, [r0, #12]
    30a2:	2900      	cmp	r1, #0
    30a4:	d00f      	beq.n	30c6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    30a6:	68cb      	ldr	r3, [r1, #12]
    30a8:	b163      	cbz	r3, 30c4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    30aa:	6884      	ldr	r4, [r0, #8]
    30ac:	42a3      	cmp	r3, r4
    30ae:	d207      	bcs.n	30c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    30b0:	212b      	movs	r1, #43	; 0x2b
    30b2:	2037      	movs	r0, #55	; 0x37
    30b4:	f7fd f96e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30b8:	4903      	ldr	r1, [pc, #12]	; (30c8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    30ba:	6102      	str	r2, [r0, #16]
    30bc:	6008      	str	r0, [r1, #0]
    30be:	e7ee      	b.n	309e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    30c0:	1b1b      	subs	r3, r3, r4
    30c2:	60c3      	str	r3, [r0, #12]
    30c4:	60ca      	str	r2, [r1, #12]
    30c6:	bd10      	pop	{r4, pc}
    30c8:	200000b4 	.word	0x200000b4

000030cc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>:
    30cc:	6941      	ldr	r1, [r0, #20]
    30ce:	b929      	cbnz	r1, 30dc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    30d0:	6901      	ldr	r1, [r0, #16]
    30d2:	b919      	cbnz	r1, 30dc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    30d4:	4903      	ldr	r1, [pc, #12]	; (30e4 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x18>)
    30d6:	6809      	ldr	r1, [r1, #0]
    30d8:	4281      	cmp	r1, r0
    30da:	d101      	bne.n	30e0 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x14>
    30dc:	2001      	movs	r0, #1
    30de:	4770      	bx	lr
    30e0:	2000      	movs	r0, #0
    30e2:	4770      	bx	lr
    30e4:	200000b4 	.word	0x200000b4

000030e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    30e8:	6941      	ldr	r1, [r0, #20]
    30ea:	b149      	cbz	r1, 3100 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    30ec:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    30f0:	441a      	add	r2, r3
    30f2:	68cb      	ldr	r3, [r1, #12]
    30f4:	441a      	add	r2, r3
    30f6:	60ca      	str	r2, [r1, #12]
    30f8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    30fc:	6111      	str	r1, [r2, #16]
    30fe:	e002      	b.n	3106 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    3100:	4a07      	ldr	r2, [pc, #28]	; (3120 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x38>)
    3102:	6901      	ldr	r1, [r0, #16]
    3104:	6011      	str	r1, [r2, #0]
    3106:	6902      	ldr	r2, [r0, #16]
    3108:	2100      	movs	r1, #0
    310a:	b112      	cbz	r2, 3112 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x2a>
    310c:	6943      	ldr	r3, [r0, #20]
    310e:	6153      	str	r3, [r2, #20]
    3110:	e002      	b.n	3118 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    3112:	6942      	ldr	r2, [r0, #20]
    3114:	b102      	cbz	r2, 3118 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    3116:	60d1      	str	r1, [r2, #12]
    3118:	6101      	str	r1, [r0, #16]
    311a:	6141      	str	r1, [r0, #20]
    311c:	4770      	bx	lr
    311e:	0000      	.short	0x0000
    3120:	200000b4 	.word	0x200000b4

00003124 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    3124:	b510      	push	{r4, lr}
    3126:	4604      	mov	r4, r0
    3128:	490a      	ldr	r1, [pc, #40]	; (3154 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    312a:	2000      	movs	r0, #0
    312c:	4602      	mov	r2, r0
    312e:	6809      	ldr	r1, [r1, #0]
    3130:	1e43      	subs	r3, r0, #1
    3132:	e008      	b.n	3146 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    3134:	68ca      	ldr	r2, [r1, #12]
    3136:	42a2      	cmp	r2, r4
    3138:	d303      	bcc.n	3142 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    313a:	429a      	cmp	r2, r3
    313c:	d201      	bcs.n	3142 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    313e:	4613      	mov	r3, r2
    3140:	4608      	mov	r0, r1
    3142:	460a      	mov	r2, r1
    3144:	6909      	ldr	r1, [r1, #16]
    3146:	2900      	cmp	r1, #0
    3148:	d1f4      	bne.n	3134 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    314a:	2800      	cmp	r0, #0
    314c:	d100      	bne.n	3150 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    314e:	4610      	mov	r0, r2
    3150:	bd10      	pop	{r4, pc}
    3152:	0000      	.short	0x0000
    3154:	200000b4 	.word	0x200000b4

00003158 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    3158:	4804      	ldr	r0, [pc, #16]	; (316c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    315a:	6801      	ldr	r1, [r0, #0]
    315c:	2000      	movs	r0, #0
    315e:	e001      	b.n	3164 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    3160:	4608      	mov	r0, r1
    3162:	6909      	ldr	r1, [r1, #16]
    3164:	2900      	cmp	r1, #0
    3166:	d1fb      	bne.n	3160 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    3168:	4770      	bx	lr
    316a:	0000      	.short	0x0000
    316c:	200000b4 	.word	0x200000b4

00003170 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    3170:	4801      	ldr	r0, [pc, #4]	; (3178 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    3172:	2100      	movs	r1, #0
    3174:	6001      	str	r1, [r0, #0]
    3176:	4770      	bx	lr
    3178:	200000b4 	.word	0x200000b4

0000317c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    317c:	4903      	ldr	r1, [pc, #12]	; (318c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    317e:	2000      	movs	r0, #0
    3180:	6809      	ldr	r1, [r1, #0]
    3182:	2900      	cmp	r1, #0
    3184:	d000      	beq.n	3188 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    3186:	200c      	movs	r0, #12
    3188:	4770      	bx	lr
    318a:	0000      	.short	0x0000
    318c:	200000b4 	.word	0x200000b4

00003190 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    3190:	4903      	ldr	r1, [pc, #12]	; (31a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    3192:	884a      	ldrh	r2, [r1, #2]
    3194:	8002      	strh	r2, [r0, #0]
    3196:	7809      	ldrb	r1, [r1, #0]
    3198:	7081      	strb	r1, [r0, #2]
    319a:	2000      	movs	r0, #0
    319c:	4770      	bx	lr
    319e:	0000      	.short	0x0000
    31a0:	20000d54 	.word	0x20000d54

000031a4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    31a4:	7801      	ldrb	r1, [r0, #0]
    31a6:	b171      	cbz	r1, 31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31a8:	7841      	ldrb	r1, [r0, #1]
    31aa:	b161      	cbz	r1, 31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31ac:	8841      	ldrh	r1, [r0, #2]
    31ae:	291b      	cmp	r1, #27
    31b0:	d309      	bcc.n	31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31b2:	8881      	ldrh	r1, [r0, #4]
    31b4:	291b      	cmp	r1, #27
    31b6:	d306      	bcc.n	31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31b8:	4904      	ldr	r1, [pc, #16]	; (31cc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    31ba:	6802      	ldr	r2, [r0, #0]
    31bc:	600a      	str	r2, [r1, #0]
    31be:	8880      	ldrh	r0, [r0, #4]
    31c0:	8088      	strh	r0, [r1, #4]
    31c2:	2000      	movs	r0, #0
    31c4:	4770      	bx	lr
    31c6:	2012      	movs	r0, #18
    31c8:	4770      	bx	lr
    31ca:	0000      	.short	0x0000
    31cc:	20000d54 	.word	0x20000d54

000031d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    31d0:	6800      	ldr	r0, [r0, #0]
    31d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    31d6:	4288      	cmp	r0, r1
    31d8:	d303      	bcc.n	31e2 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    31da:	4903      	ldr	r1, [pc, #12]	; (31e8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    31dc:	6088      	str	r0, [r1, #8]
    31de:	2000      	movs	r0, #0
    31e0:	4770      	bx	lr
    31e2:	2012      	movs	r0, #18
    31e4:	4770      	bx	lr
    31e6:	0000      	.short	0x0000
    31e8:	20000d54 	.word	0x20000d54

000031ec <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    31ec:	b510      	push	{r4, lr}
    31ee:	b086      	sub	sp, #24
    31f0:	4604      	mov	r4, r0
    31f2:	f006 fc6d 	bl	9ad0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xbc>
    31f6:	2800      	cmp	r0, #0
    31f8:	d103      	bne.n	3202 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    31fa:	f006 fd0d 	bl	9c18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    31fe:	b110      	cbz	r0, 3206 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    3200:	200c      	movs	r0, #12
    3202:	b006      	add	sp, #24
    3204:	bd10      	pop	{r4, pc}
    3206:	2102      	movs	r1, #2
    3208:	f104 0010 	add.w	r0, r4, #16
    320c:	f000 f882 	bl	3314 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa0>
    3210:	78a0      	ldrb	r0, [r4, #2]
    3212:	f88d 0008 	strb.w	r0, [sp, #8]
    3216:	78a0      	ldrb	r0, [r4, #2]
    3218:	f88d 0000 	strb.w	r0, [sp]
    321c:	7860      	ldrb	r0, [r4, #1]
    321e:	f88d 0003 	strb.w	r0, [sp, #3]
    3222:	7820      	ldrb	r0, [r4, #0]
    3224:	f88d 0002 	strb.w	r0, [sp, #2]
    3228:	7e20      	ldrb	r0, [r4, #24]
    322a:	f88d 0004 	strb.w	r0, [sp, #4]
    322e:	78a0      	ldrb	r0, [r4, #2]
    3230:	07c0      	lsls	r0, r0, #31
    3232:	d00b      	beq.n	324c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    3234:	78e0      	ldrb	r0, [r4, #3]
    3236:	2801      	cmp	r0, #1
    3238:	d011      	beq.n	325e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    323a:	b190      	cbz	r0, 3262 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    323c:	f05f 0000 	movs.w	r0, #0
    3240:	f88d 0001 	strb.w	r0, [sp, #1]
    3244:	68a0      	ldr	r0, [r4, #8]
    3246:	9003      	str	r0, [sp, #12]
    3248:	6920      	ldr	r0, [r4, #16]
    324a:	9004      	str	r0, [sp, #16]
    324c:	a802      	add	r0, sp, #8
    324e:	f7ff faed 	bl	282c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    3252:	2800      	cmp	r0, #0
    3254:	d1d5      	bne.n	3202 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    3256:	4668      	mov	r0, sp
    3258:	f7fe fa6e 	bl	1738 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    325c:	e7d1      	b.n	3202 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    325e:	2002      	movs	r0, #2
    3260:	e7ee      	b.n	3240 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    3262:	2001      	movs	r0, #1
    3264:	e7ec      	b.n	3240 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

00003268 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    3268:	4801      	ldr	r0, [pc, #4]	; (3270 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    326a:	f990 0000 	ldrsb.w	r0, [r0]
    326e:	4770      	bx	lr
    3270:	200000b8 	.word	0x200000b8

00003274 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    3274:	4a03      	ldr	r2, [pc, #12]	; (3284 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    3276:	e9d2 1200 	ldrd	r1, r2, [r2]
    327a:	6001      	str	r1, [r0, #0]
    327c:	6042      	str	r2, [r0, #4]
    327e:	2000      	movs	r0, #0
    3280:	4770      	bx	lr
    3282:	0000      	.short	0x0000
    3284:	00003368 	.word	0x00003368
    3288:	b510      	push	{r4, lr}
    328a:	480e      	ldr	r0, [pc, #56]	; (32c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x50>)
    328c:	2100      	movs	r1, #0
    328e:	4b0e      	ldr	r3, [pc, #56]	; (32c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x54>)
    3290:	74c1      	strb	r1, [r0, #19]
    3292:	8281      	strh	r1, [r0, #20]
    3294:	221b      	movs	r2, #27
    3296:	801a      	strh	r2, [r3, #0]
    3298:	f44f 74a4 	mov.w	r4, #328	; 0x148
    329c:	805c      	strh	r4, [r3, #2]
    329e:	809a      	strh	r2, [r3, #4]
    32a0:	80dc      	strh	r4, [r3, #6]
    32a2:	7381      	strb	r1, [r0, #14]
    32a4:	73c1      	strb	r1, [r0, #15]
    32a6:	2303      	movs	r3, #3
    32a8:	7003      	strb	r3, [r0, #0]
    32aa:	2302      	movs	r3, #2
    32ac:	7043      	strb	r3, [r0, #1]
    32ae:	8042      	strh	r2, [r0, #2]
    32b0:	8082      	strh	r2, [r0, #4]
    32b2:	f640 62a6 	movw	r2, #3750	; 0xea6
    32b6:	6082      	str	r2, [r0, #8]
    32b8:	7481      	strb	r1, [r0, #18]
    32ba:	7301      	strb	r1, [r0, #12]
    32bc:	4802      	ldr	r0, [pc, #8]	; (32c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x54>)
    32be:	1f80      	subs	r0, r0, #6
    32c0:	7001      	strb	r1, [r0, #0]
    32c2:	bd10      	pop	{r4, pc}
    32c4:	20000d54 	.word	0x20000d54
    32c8:	200000c6 	.word	0x200000c6
    32cc:	4904      	ldr	r1, [pc, #16]	; (32e0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x6c>)
    32ce:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    32d2:	4288      	cmp	r0, r1
    32d4:	d301      	bcc.n	32da <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x66>
    32d6:	2000      	movs	r0, #0
    32d8:	4770      	bx	lr
    32da:	2001      	movs	r0, #1
    32dc:	4770      	bx	lr
    32de:	0000      	.short	0x0000
    32e0:	0270f3cc 	.word	0x0270f3cc
    32e4:	4904      	ldr	r1, [pc, #16]	; (32f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x84>)
    32e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    32ea:	4288      	cmp	r0, r1
    32ec:	d301      	bcc.n	32f2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x7e>
    32ee:	2000      	movs	r0, #0
    32f0:	4770      	bx	lr
    32f2:	2001      	movs	r0, #1
    32f4:	4770      	bx	lr
    32f6:	0000      	.short	0x0000
    32f8:	009c363d 	.word	0x009c363d
    32fc:	4904      	ldr	r1, [pc, #16]	; (3310 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x9c>)
    32fe:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    3302:	4288      	cmp	r0, r1
    3304:	d301      	bcc.n	330a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x96>
    3306:	2000      	movs	r0, #0
    3308:	4770      	bx	lr
    330a:	2001      	movs	r0, #1
    330c:	4770      	bx	lr
    330e:	0000      	.short	0x0000
    3310:	009c363d 	.word	0x009c363d
    3314:	b530      	push	{r4, r5, lr}
    3316:	2200      	movs	r2, #0
    3318:	4d07      	ldr	r5, [pc, #28]	; (3338 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc4>)
    331a:	e009      	b.n	3330 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xbc>
    331c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    3320:	462b      	mov	r3, r5
    3322:	429c      	cmp	r4, r3
    3324:	d800      	bhi.n	3328 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xb4>
    3326:	4623      	mov	r3, r4
    3328:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    332c:	1c52      	adds	r2, r2, #1
    332e:	b2d2      	uxtb	r2, r2
    3330:	428a      	cmp	r2, r1
    3332:	d3f3      	bcc.n	331c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    3334:	bd30      	pop	{r4, r5, pc}
    3336:	0000      	.short	0x0000
    3338:	00f42400 	.word	0x00f42400
    333c:	4a09      	ldr	r2, [pc, #36]	; (3364 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xf0>)
    333e:	4290      	cmp	r0, r2
    3340:	d80b      	bhi.n	335a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xe6>
    3342:	2901      	cmp	r1, #1
    3344:	d002      	beq.n	334c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd8>
    3346:	2904      	cmp	r1, #4
    3348:	d003      	beq.n	3352 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xde>
    334a:	e008      	b.n	335e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xea>
    334c:	f240 7153 	movw	r1, #1875	; 0x753
    3350:	e001      	b.n	3356 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xe2>
    3352:	f640 11c4 	movw	r1, #2500	; 0x9c4
    3356:	4288      	cmp	r0, r1
    3358:	d201      	bcs.n	335e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xea>
    335a:	2000      	movs	r0, #0
    335c:	4770      	bx	lr
    335e:	2001      	movs	r0, #1
    3360:	4770      	bx	lr
    3362:	0000      	.short	0x0000
    3364:	0270fd8f 	.word	0x0270fd8f
    3368:	0d10770d 	.word	0x0d10770d
    336c:	10770059 	.word	0x10770059
	...

00003378 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    3378:	b570      	push	{r4, r5, r6, lr}
    337a:	460d      	mov	r5, r1
    337c:	f7fd ffa0 	bl	12c0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    3380:	4c05      	ldr	r4, [pc, #20]	; (3398 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    3382:	6065      	str	r5, [r4, #4]
    3384:	68a0      	ldr	r0, [r4, #8]
    3386:	f006 fc72 	bl	9c6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    338a:	f006 fb20 	bl	99ce <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    338e:	f7fe f815 	bl	13bc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    3392:	2001      	movs	r0, #1
    3394:	7020      	strb	r0, [r4, #0]
    3396:	bd70      	pop	{r4, r5, r6, pc}
    3398:	200000d0 	.word	0x200000d0

0000339c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    339c:	4801      	ldr	r0, [pc, #4]	; (33a4 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    339e:	7800      	ldrb	r0, [r0, #0]
    33a0:	4770      	bx	lr
    33a2:	0000      	.short	0x0000
    33a4:	200000d0 	.word	0x200000d0

000033a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    33a8:	b510      	push	{r4, lr}
    33aa:	4c06      	ldr	r4, [pc, #24]	; (33c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    33ac:	68e0      	ldr	r0, [r4, #12]
    33ae:	f006 fc5e 	bl	9c6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33b2:	6920      	ldr	r0, [r4, #16]
    33b4:	f006 fc5b 	bl	9c6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33b8:	f006 fb2c 	bl	9a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    33bc:	2000      	movs	r0, #0
    33be:	7020      	strb	r0, [r4, #0]
    33c0:	bd10      	pop	{r4, pc}
    33c2:	0000      	.short	0x0000
    33c4:	200000d0 	.word	0x200000d0

000033c8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    33c8:	b510      	push	{r4, lr}
    33ca:	4905      	ldr	r1, [pc, #20]	; (33e0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    33cc:	4805      	ldr	r0, [pc, #20]	; (33e4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    33ce:	f006 fc41 	bl	9c54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    33d2:	4804      	ldr	r0, [pc, #16]	; (33e4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    33d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33d8:	4903      	ldr	r1, [pc, #12]	; (33e8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    33da:	1d00      	adds	r0, r0, #4
    33dc:	f006 bc3a 	b.w	9c54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    33e0:	200000e4 	.word	0x200000e4
    33e4:	200000d8 	.word	0x200000d8
    33e8:	200000ec 	.word	0x200000ec
    33ec:	b510      	push	{r4, lr}
    33ee:	f7ff febf 	bl	3170 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    33f2:	f7ff f9f3 	bl	27dc <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    33f6:	f7ff fddb 	bl	2fb0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    33fa:	f7ff ff35 	bl	3268 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    33fe:	4601      	mov	r1, r0
    3400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3404:	4801      	ldr	r0, [pc, #4]	; (340c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x44>)
    3406:	f7fe b907 	b.w	1618 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    340a:	0000      	.short	0x0000
    340c:	2000100f 	.word	0x2000100f

00003410 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    3410:	4806      	ldr	r0, [pc, #24]	; (342c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    3412:	8801      	ldrh	r1, [r0, #0]
    3414:	7900      	ldrb	r0, [r0, #4]
    3416:	0602      	lsls	r2, r0, #24
    3418:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    341c:	f000 0001 	and.w	r0, r0, #1
    3420:	1800      	adds	r0, r0, r0
    3422:	b2c0      	uxtb	r0, r0
    3424:	f040 0001 	orr.w	r0, r0, #1
    3428:	4770      	bx	lr
    342a:	0000      	.short	0x0000
    342c:	20000020 	.word	0x20000020

00003430 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    3430:	b510      	push	{r4, lr}
    3432:	f004 fb75 	bl	7b20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3436:	2200      	movs	r2, #0
    3438:	4b08      	ldr	r3, [pc, #32]	; (345c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    343a:	4611      	mov	r1, r2
    343c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3440:	4284      	cmp	r4, r0
    3442:	d303      	bcc.n	344c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    3444:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3448:	7882      	ldrb	r2, [r0, #2]
    344a:	e003      	b.n	3454 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    344c:	1c49      	adds	r1, r1, #1
    344e:	b2c9      	uxtb	r1, r1
    3450:	290c      	cmp	r1, #12
    3452:	d3f3      	bcc.n	343c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    3454:	4802      	ldr	r0, [pc, #8]	; (3460 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    3456:	7002      	strb	r2, [r0, #0]
    3458:	bd10      	pop	{r4, pc}
    345a:	0000      	.short	0x0000
    345c:	00009cbc 	.word	0x00009cbc
    3460:	20000187 	.word	0x20000187

00003464 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    3464:	4802      	ldr	r0, [pc, #8]	; (3470 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    3466:	7800      	ldrb	r0, [r0, #0]
    3468:	f000 0007 	and.w	r0, r0, #7
    346c:	4770      	bx	lr
    346e:	0000      	.short	0x0000
    3470:	20000187 	.word	0x20000187

00003474 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	4605      	mov	r5, r0
    3478:	4616      	mov	r6, r2
    347a:	460c      	mov	r4, r1
    347c:	2002      	movs	r0, #2
    347e:	f000 f8bd 	bl	35fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3482:	4906      	ldr	r1, [pc, #24]	; (349c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    3484:	2001      	movs	r0, #1
    3486:	1ef6      	subs	r6, r6, #3
    3488:	7008      	strb	r0, [r1, #0]
    348a:	4805      	ldr	r0, [pc, #20]	; (34a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    348c:	6006      	str	r6, [r0, #0]
    348e:	4804      	ldr	r0, [pc, #16]	; (34a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    3490:	3808      	subs	r0, #8
    3492:	6005      	str	r5, [r0, #0]
    3494:	1f00      	subs	r0, r0, #4
    3496:	6004      	str	r4, [r0, #0]
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	0000      	.short	0x0000
    349c:	20000188 	.word	0x20000188
    34a0:	4000f510 	.word	0x4000f510

000034a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    34a4:	b510      	push	{r4, lr}
    34a6:	4c0c      	ldr	r4, [pc, #48]	; (34d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    34a8:	7820      	ldrb	r0, [r4, #0]
    34aa:	b180      	cbz	r0, 34ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    34ac:	490b      	ldr	r1, [pc, #44]	; (34dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    34ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    34b2:	6008      	str	r0, [r1, #0]
    34b4:	f000 f86a 	bl	358c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    34b8:	2100      	movs	r1, #0
    34ba:	b120      	cbz	r0, 34c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    34bc:	2001      	movs	r0, #1
    34be:	7060      	strb	r0, [r4, #1]
    34c0:	4807      	ldr	r0, [pc, #28]	; (34e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    34c2:	6800      	ldr	r0, [r0, #0]
    34c4:	e001      	b.n	34ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    34c6:	7061      	strb	r1, [r4, #1]
    34c8:	2010      	movs	r0, #16
    34ca:	70a0      	strb	r0, [r4, #2]
    34cc:	7021      	strb	r1, [r4, #0]
    34ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34d2:	2000      	movs	r0, #0
    34d4:	f000 b892 	b.w	35fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    34d8:	20000188 	.word	0x20000188
    34dc:	4001f508 	.word	0x4001f508
    34e0:	4000f400 	.word	0x4000f400

000034e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    34e4:	b510      	push	{r4, lr}
    34e6:	2002      	movs	r0, #2
    34e8:	f000 f888 	bl	35fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    34ec:	4904      	ldr	r1, [pc, #16]	; (3500 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    34ee:	2001      	movs	r0, #1
    34f0:	7008      	strb	r0, [r1, #0]
    34f2:	f000 f859 	bl	35a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    34f6:	4903      	ldr	r1, [pc, #12]	; (3504 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    34f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    34fc:	6008      	str	r0, [r1, #0]
    34fe:	bd10      	pop	{r4, pc}
    3500:	20000188 	.word	0x20000188
    3504:	4001f504 	.word	0x4001f504

00003508 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    3508:	4803      	ldr	r0, [pc, #12]	; (3518 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    350a:	2100      	movs	r1, #0
    350c:	7001      	strb	r1, [r0, #0]
    350e:	7041      	strb	r1, [r0, #1]
    3510:	2110      	movs	r1, #16
    3512:	7081      	strb	r1, [r0, #2]
    3514:	4770      	bx	lr
    3516:	0000      	.short	0x0000
    3518:	20000188 	.word	0x20000188

0000351c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    351c:	4807      	ldr	r0, [pc, #28]	; (353c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    351e:	b510      	push	{r4, lr}
    3520:	7801      	ldrb	r1, [r0, #0]
    3522:	b141      	cbz	r1, 3536 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    3524:	f000 f832 	bl	358c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    3528:	b118      	cbz	r0, 3532 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    352a:	4805      	ldr	r0, [pc, #20]	; (3540 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    352c:	6800      	ldr	r0, [r0, #0]
    352e:	b2c0      	uxtb	r0, r0
    3530:	bd10      	pop	{r4, pc}
    3532:	2010      	movs	r0, #16
    3534:	bd10      	pop	{r4, pc}
    3536:	7880      	ldrb	r0, [r0, #2]
    3538:	bd10      	pop	{r4, pc}
    353a:	0000      	.short	0x0000
    353c:	20000188 	.word	0x20000188
    3540:	4000f400 	.word	0x4000f400

00003544 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    3544:	4808      	ldr	r0, [pc, #32]	; (3568 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    3546:	b510      	push	{r4, lr}
    3548:	7801      	ldrb	r1, [r0, #0]
    354a:	b159      	cbz	r1, 3564 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    354c:	4807      	ldr	r0, [pc, #28]	; (356c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    354e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3552:	b128      	cbz	r0, 3560 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    3554:	f000 f80c 	bl	3570 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    3558:	2800      	cmp	r0, #0
    355a:	d000      	beq.n	355e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    355c:	2001      	movs	r0, #1
    355e:	bd10      	pop	{r4, pc}
    3560:	2002      	movs	r0, #2
    3562:	bd10      	pop	{r4, pc}
    3564:	7840      	ldrb	r0, [r0, #1]
    3566:	bd10      	pop	{r4, pc}
    3568:	20000188 	.word	0x20000188
    356c:	4000f000 	.word	0x4000f000
    3570:	4805      	ldr	r0, [pc, #20]	; (3588 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    3572:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    3576:	b111      	cbz	r1, 357e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    3578:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    357c:	b108      	cbz	r0, 3582 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    357e:	2000      	movs	r0, #0
    3580:	4770      	bx	lr
    3582:	2001      	movs	r0, #1
    3584:	4770      	bx	lr
    3586:	0000      	.short	0x0000
    3588:	4000f000 	.word	0x4000f000
    358c:	4805      	ldr	r0, [pc, #20]	; (35a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    358e:	b510      	push	{r4, lr}
    3590:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3594:	b120      	cbz	r0, 35a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    3596:	f7ff ffeb 	bl	3570 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    359a:	b108      	cbz	r0, 35a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    359c:	2001      	movs	r0, #1
    359e:	bd10      	pop	{r4, pc}
    35a0:	2000      	movs	r0, #0
    35a2:	bd10      	pop	{r4, pc}
    35a4:	4000f000 	.word	0x4000f000
    35a8:	4804      	ldr	r0, [pc, #16]	; (35bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    35aa:	2100      	movs	r1, #0
    35ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    35b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    35b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    35b8:	4770      	bx	lr
    35ba:	0000      	.short	0x0000
    35bc:	4000f000 	.word	0x4000f000

000035c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    35c0:	b570      	push	{r4, r5, r6, lr}
    35c2:	4d05      	ldr	r5, [pc, #20]	; (35d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    35c4:	2400      	movs	r4, #0
    35c6:	7828      	ldrb	r0, [r5, #0]
    35c8:	b110      	cbz	r0, 35d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    35ca:	f000 f80f 	bl	35ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    35ce:	702c      	strb	r4, [r5, #0]
    35d0:	706c      	strb	r4, [r5, #1]
    35d2:	70ac      	strb	r4, [r5, #2]
    35d4:	bd70      	pop	{r4, r5, r6, pc}
    35d6:	0000      	.short	0x0000
    35d8:	2000018b 	.word	0x2000018b

000035dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    35dc:	4802      	ldr	r0, [pc, #8]	; (35e8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    35de:	2100      	movs	r1, #0
    35e0:	7001      	strb	r1, [r0, #0]
    35e2:	7041      	strb	r1, [r0, #1]
    35e4:	7081      	strb	r1, [r0, #2]
    35e6:	4770      	bx	lr
    35e8:	2000018b 	.word	0x2000018b
    35ec:	4902      	ldr	r1, [pc, #8]	; (35f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    35ee:	4801      	ldr	r0, [pc, #4]	; (35f4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    35f0:	6008      	str	r0, [r1, #0]
    35f2:	4770      	bx	lr
    35f4:	02020000 	.word	0x02020000
    35f8:	4001f508 	.word	0x4001f508

000035fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    35fc:	b510      	push	{r4, lr}
    35fe:	4604      	mov	r4, r0
    3600:	f000 f820 	bl	3644 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    3604:	2c00      	cmp	r4, #0
    3606:	d00e      	beq.n	3626 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    3608:	4a0b      	ldr	r2, [pc, #44]	; (3638 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    360a:	480b      	ldr	r0, [pc, #44]	; (3638 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    360c:	490b      	ldr	r1, [pc, #44]	; (363c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    360e:	3214      	adds	r2, #20
    3610:	2c01      	cmp	r4, #1
    3612:	d005      	beq.n	3620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    3614:	2c02      	cmp	r4, #2
    3616:	d007      	beq.n	3628 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    3618:	2182      	movs	r1, #130	; 0x82
    361a:	203d      	movs	r0, #61	; 0x3d
    361c:	f7fc feba 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3620:	2302      	movs	r3, #2
    3622:	6003      	str	r3, [r0, #0]
    3624:	6011      	str	r1, [r2, #0]
    3626:	bd10      	pop	{r4, pc}
    3628:	2303      	movs	r3, #3
    362a:	6003      	str	r3, [r0, #0]
    362c:	6011      	str	r1, [r2, #0]
    362e:	4904      	ldr	r1, [pc, #16]	; (3640 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    3630:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3634:	6008      	str	r0, [r1, #0]
    3636:	bd10      	pop	{r4, pc}
    3638:	4000f500 	.word	0x4000f500
    363c:	20001213 	.word	0x20001213
    3640:	4001f504 	.word	0x4001f504
    3644:	4805      	ldr	r0, [pc, #20]	; (365c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    3646:	b510      	push	{r4, lr}
    3648:	2100      	movs	r1, #0
    364a:	6001      	str	r1, [r0, #0]
    364c:	6001      	str	r1, [r0, #0]
    364e:	f7ff ffb7 	bl	35c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    3652:	4903      	ldr	r1, [pc, #12]	; (3660 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    3654:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3658:	6008      	str	r0, [r1, #0]
    365a:	bd10      	pop	{r4, pc}
    365c:	4000f500 	.word	0x4000f500
    3660:	4001f508 	.word	0x4001f508

00003664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    3664:	4805      	ldr	r0, [pc, #20]	; (367c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    3666:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    366a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    366e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3672:	2100      	movs	r1, #0
    3674:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    3678:	4770      	bx	lr
    367a:	0000      	.short	0x0000
    367c:	40001000 	.word	0x40001000

00003680 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    3680:	4904      	ldr	r1, [pc, #16]	; (3694 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    3682:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    3686:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    368a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    368e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3692:	4770      	bx	lr
    3694:	40001000 	.word	0x40001000

00003698 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    3698:	4902      	ldr	r1, [pc, #8]	; (36a4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    369a:	5c08      	ldrb	r0, [r1, r0]
    369c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    36a0:	4770      	bx	lr
    36a2:	0000      	.short	0x0000
    36a4:	0000428e 	.word	0x0000428e

000036a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    36a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36aa:	4c24      	ldr	r4, [pc, #144]	; (373c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    36ac:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36b0:	f010 0f10 	tst.w	r0, #16
    36b4:	d001      	beq.n	36ba <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    36b6:	2701      	movs	r7, #1
    36b8:	e000      	b.n	36bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    36ba:	2700      	movs	r7, #0
    36bc:	2010      	movs	r0, #16
    36be:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36c2:	2002      	movs	r0, #2
    36c4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    36c8:	481d      	ldr	r0, [pc, #116]	; (3740 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    36ca:	2500      	movs	r5, #0
    36cc:	491d      	ldr	r1, [pc, #116]	; (3744 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    36ce:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    36d2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    36d6:	6008      	str	r0, [r1, #0]
    36d8:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    36dc:	f44f 7688 	mov.w	r6, #272	; 0x110
    36e0:	f010 0fff 	tst.w	r0, #255	; 0xff
    36e4:	d019      	beq.n	371a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    36e6:	20ff      	movs	r0, #255	; 0xff
    36e8:	f88d 0000 	strb.w	r0, [sp]
    36ec:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    36f0:	2001      	movs	r0, #1
    36f2:	6120      	str	r0, [r4, #16]
    36f4:	e005      	b.n	3702 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    36f6:	bf00      	nop
    36f8:	f89d 0000 	ldrb.w	r0, [sp]
    36fc:	1e40      	subs	r0, r0, #1
    36fe:	f88d 0000 	strb.w	r0, [sp]
    3702:	f89d 0000 	ldrb.w	r0, [sp]
    3706:	b128      	cbz	r0, 3714 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    3708:	4631      	mov	r1, r6
    370a:	4620      	mov	r0, r4
    370c:	f006 fb35 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3710:	2800      	cmp	r0, #0
    3712:	d0f1      	beq.n	36f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    3714:	f89d 0000 	ldrb.w	r0, [sp]
    3718:	b158      	cbz	r0, 3732 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    371a:	f000 fbcd 	bl	3eb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    371e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3722:	f000 fd35 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    3726:	2f00      	cmp	r7, #0
    3728:	d002      	beq.n	3730 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    372a:	2010      	movs	r0, #16
    372c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3732:	f640 0194 	movw	r1, #2196	; 0x894
    3736:	203e      	movs	r0, #62	; 0x3e
    3738:	f7fc fe2c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    373c:	40001000 	.word	0x40001000
    3740:	20000da4 	.word	0x20000da4
    3744:	4001f508 	.word	0x4001f508

00003748 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    3748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    374c:	4d18      	ldr	r5, [pc, #96]	; (37b0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    374e:	4607      	mov	r7, r0
    3750:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    3754:	07c2      	lsls	r2, r0, #31
    3756:	d00f      	beq.n	3778 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    3758:	4c16      	ldr	r4, [pc, #88]	; (37b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    375a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    375e:	f042 0201 	orr.w	r2, r2, #1
    3762:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    3766:	f040 0002 	orr.w	r0, r0, #2
    376a:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    376e:	2601      	movs	r6, #1
    3770:	b13f      	cbz	r7, 3782 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    3772:	2f01      	cmp	r7, #1
    3774:	d00b      	beq.n	378e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    3776:	e010      	b.n	379a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3778:	f240 716f 	movw	r1, #1903	; 0x76f
    377c:	203e      	movs	r0, #62	; 0x3e
    377e:	f7fc fe09 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3782:	4608      	mov	r0, r1
    3784:	f000 fd5e 	bl	4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    3788:	726e      	strb	r6, [r5, #9]
    378a:	6026      	str	r6, [r4, #0]
    378c:	e005      	b.n	379a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    378e:	4608      	mov	r0, r1
    3790:	f000 fd3e 	bl	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    3794:	2002      	movs	r0, #2
    3796:	7268      	strb	r0, [r5, #9]
    3798:	6066      	str	r6, [r4, #4]
    379a:	4807      	ldr	r0, [pc, #28]	; (37b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    379c:	64c6      	str	r6, [r0, #76]	; 0x4c
    379e:	4806      	ldr	r0, [pc, #24]	; (37b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    37a0:	300c      	adds	r0, #12
    37a2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    37a6:	4638      	mov	r0, r7
    37a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37ac:	f000 bcc2 	b.w	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    37b0:	20000da4 	.word	0x20000da4
    37b4:	40001000 	.word	0x40001000
    37b8:	40008000 	.word	0x40008000

000037bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    37bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37c0:	4c2c      	ldr	r4, [pc, #176]	; (3874 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    37c2:	0006      	movs	r6, r0
    37c4:	4d2c      	ldr	r5, [pc, #176]	; (3878 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    37c6:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    37ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 387c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    37ce:	f040 0002 	orr.w	r0, r0, #2
    37d2:	4689      	mov	r9, r1
    37d4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    37d8:	f04f 0700 	mov.w	r7, #0
    37dc:	d002      	beq.n	37e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    37de:	2e01      	cmp	r6, #1
    37e0:	d020      	beq.n	3824 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    37e2:	e036      	b.n	3852 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    37e4:	4608      	mov	r0, r1
    37e6:	f000 fd2d 	bl	4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    37ea:	2001      	movs	r0, #1
    37ec:	7260      	strb	r0, [r4, #9]
    37ee:	79e0      	ldrb	r0, [r4, #7]
    37f0:	2801      	cmp	r0, #1
    37f2:	d105      	bne.n	3800 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    37f4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    37f8:	f040 0008 	orr.w	r0, r0, #8
    37fc:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3800:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3802:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    3806:	6260      	str	r0, [r4, #36]	; 0x24
    3808:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    380c:	f8c8 0000 	str.w	r0, [r8]
    3810:	491b      	ldr	r1, [pc, #108]	; (3880 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    3812:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    3816:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    381a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    381e:	fbb0 f7f1 	udiv	r7, r0, r1
    3822:	e016      	b.n	3852 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    3824:	4608      	mov	r0, r1
    3826:	f000 fcf3 	bl	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    382a:	2002      	movs	r0, #2
    382c:	7260      	strb	r0, [r4, #9]
    382e:	79e0      	ldrb	r0, [r4, #7]
    3830:	2801      	cmp	r0, #1
    3832:	d105      	bne.n	3840 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    3834:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    3838:	f040 0004 	orr.w	r0, r0, #4
    383c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3840:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3842:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    3846:	6260      	str	r0, [r4, #36]	; 0x24
    3848:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    384c:	f8c8 0000 	str.w	r0, [r8]
    3850:	2729      	movs	r7, #41	; 0x29
    3852:	f000 fb9d 	bl	3f90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    3856:	f006 fad8 	bl	9e0a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    385a:	b120      	cbz	r0, 3866 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    385c:	f7ff ff24 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3860:	2000      	movs	r0, #0
    3862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3866:	2100      	movs	r1, #0
    3868:	4630      	mov	r0, r6
    386a:	f000 fc63 	bl	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    386e:	4638      	mov	r0, r7
    3870:	e7f7      	b.n	3862 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    3872:	0000      	.short	0x0000
    3874:	20000da4 	.word	0x20000da4
    3878:	40001000 	.word	0x40001000
    387c:	4001f504 	.word	0x4001f504
    3880:	00004288 	.word	0x00004288

00003884 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    3884:	b510      	push	{r4, lr}
    3886:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    3888:	4901      	ldr	r1, [pc, #4]	; (3890 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    388a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    388e:	bd10      	pop	{r4, pc}
    3890:	20000d94 	.word	0x20000d94

00003894 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    3894:	b570      	push	{r4, r5, r6, lr}
    3896:	4c0f      	ldr	r4, [pc, #60]	; (38d4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    3898:	4603      	mov	r3, r0
    389a:	2002      	movs	r0, #2
    389c:	7320      	strb	r0, [r4, #12]
    389e:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    38a2:	2096      	movs	r0, #150	; 0x96
    38a4:	f894 1020 	ldrb.w	r1, [r4, #32]
    38a8:	7d22      	ldrb	r2, [r4, #20]
    38aa:	2d01      	cmp	r5, #1
    38ac:	d00e      	beq.n	38cc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    38ae:	f000 fd27 	bl	4300 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    38b2:	6120      	str	r0, [r4, #16]
    38b4:	4808      	ldr	r0, [pc, #32]	; (38d8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    38b6:	2100      	movs	r1, #0
    38b8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    38bc:	6921      	ldr	r1, [r4, #16]
    38be:	69e0      	ldr	r0, [r4, #28]
    38c0:	4408      	add	r0, r1
    38c2:	4905      	ldr	r1, [pc, #20]	; (38d8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    38c4:	1d09      	adds	r1, r1, #4
    38c6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    38ca:	bd70      	pop	{r4, r5, r6, pc}
    38cc:	f000 fd36 	bl	433c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    38d0:	e7ef      	b.n	38b2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    38d2:	0000      	.short	0x0000
    38d4:	20000da4 	.word	0x20000da4
    38d8:	40008000 	.word	0x40008000

000038dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    38dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38e0:	2234      	movs	r2, #52	; 0x34
    38e2:	2100      	movs	r1, #0
    38e4:	4813      	ldr	r0, [pc, #76]	; (3934 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    38e6:	f006 fca5 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    38ea:	f000 fc51 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    38ee:	f006 fb62 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    38f2:	4d11      	ldr	r5, [pc, #68]	; (3938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    38f4:	4e10      	ldr	r6, [pc, #64]	; (3938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    38f6:	2400      	movs	r4, #0
    38f8:	4f0f      	ldr	r7, [pc, #60]	; (3938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    38fa:	3508      	adds	r5, #8
    38fc:	3610      	adds	r6, #16
    38fe:	b928      	cbnz	r0, 390c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3900:	f006 fb70 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3904:	b910      	cbnz	r0, 390c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3906:	f006 fb77 	bl	9ff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    390a:	b108      	cbz	r0, 3910 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    390c:	2224      	movs	r2, #36	; 0x24
    390e:	e006      	b.n	391e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    3910:	f006 fbb2 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3914:	b910      	cbnz	r0, 391c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    3916:	f006 fba5 	bl	a064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    391a:	b140      	cbz	r0, 392e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    391c:	2240      	movs	r2, #64	; 0x40
    391e:	21ff      	movs	r1, #255	; 0xff
    3920:	4638      	mov	r0, r7
    3922:	f006 fc87 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3926:	602c      	str	r4, [r5, #0]
    3928:	6034      	str	r4, [r6, #0]
    392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    392e:	2238      	movs	r2, #56	; 0x38
    3930:	e7f5      	b.n	391e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    3932:	0000      	.short	0x0000
    3934:	20000da4 	.word	0x20000da4
    3938:	40000e00 	.word	0x40000e00

0000393c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    393c:	b510      	push	{r4, lr}
    393e:	f000 fbdb 	bl	40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>
    3942:	f7ff feb1 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3946:	f004 fb67 	bl	8018 <mpsl_fem_disable>
    394a:	b130      	cbz	r0, 395a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    394c:	1c40      	adds	r0, r0, #1
    394e:	d004      	beq.n	395a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    3950:	f240 5165 	movw	r1, #1381	; 0x565
    3954:	203e      	movs	r0, #62	; 0x3e
    3956:	f7fc fd1d 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    395a:	480f      	ldr	r0, [pc, #60]	; (3998 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    395c:	4a0f      	ldr	r2, [pc, #60]	; (399c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    395e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3960:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    3964:	6011      	str	r1, [r2, #0]
    3966:	2400      	movs	r4, #0
    3968:	6244      	str	r4, [r0, #36]	; 0x24
    396a:	7304      	strb	r4, [r0, #12]
    396c:	61c4      	str	r4, [r0, #28]
    396e:	6184      	str	r4, [r0, #24]
    3970:	f000 fbc2 	bl	40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>
    3974:	480a      	ldr	r0, [pc, #40]	; (39a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    3976:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    397a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    397e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3982:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    3986:	2001      	movs	r0, #1
    3988:	f006 f9e6 	bl	9d58 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3990:	2001      	movs	r0, #1
    3992:	f006 b9d4 	b.w	9d3e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3996:	0000      	.short	0x0000
    3998:	20000da4 	.word	0x20000da4
    399c:	4001f508 	.word	0x4001f508
    39a0:	40008000 	.word	0x40008000

000039a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    39a4:	b570      	push	{r4, r5, r6, lr}
    39a6:	2001      	movs	r0, #1
    39a8:	f006 f9d6 	bl	9d58 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    39ac:	4c37      	ldr	r4, [pc, #220]	; (3a8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    39ae:	2000      	movs	r0, #0
    39b0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    39b4:	2001      	movs	r0, #1
    39b6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    39ba:	f006 fb33 	bl	a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    39be:	4d34      	ldr	r5, [pc, #208]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    39c0:	b118      	cbz	r0, 39ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    39c2:	6828      	ldr	r0, [r5, #0]
    39c4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    39c8:	6028      	str	r0, [r5, #0]
    39ca:	f006 fb1f 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39ce:	b128      	cbz	r0, 39dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    39d0:	6828      	ldr	r0, [r5, #0]
    39d2:	4930      	ldr	r1, [pc, #192]	; (3a94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    39d4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    39d8:	4308      	orrs	r0, r1
    39da:	6028      	str	r0, [r5, #0]
    39dc:	f006 fb32 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    39e0:	b138      	cbz	r0, 39f2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    39e2:	482b      	ldr	r0, [pc, #172]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    39e4:	1d00      	adds	r0, r0, #4
    39e6:	6801      	ldr	r1, [r0, #0]
    39e8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    39ec:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    39f0:	6001      	str	r1, [r0, #0]
    39f2:	4927      	ldr	r1, [pc, #156]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    39f4:	4828      	ldr	r0, [pc, #160]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    39f6:	313c      	adds	r1, #60	; 0x3c
    39f8:	6008      	str	r0, [r1, #0]
    39fa:	f004 fb47 	bl	808c <mpsl_fem_device_config_254_apply_get>
    39fe:	b140      	cbz	r0, 3a12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    3a00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3a04:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    3a08:	1c41      	adds	r1, r0, #1
    3a0a:	d002      	beq.n	3a12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    3a0c:	4920      	ldr	r1, [pc, #128]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    3a0e:	3110      	adds	r1, #16
    3a10:	6008      	str	r0, [r1, #0]
    3a12:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3a16:	6e00      	ldr	r0, [r0, #96]	; 0x60
    3a18:	1c41      	adds	r1, r0, #1
    3a1a:	d004      	beq.n	3a26 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    3a1c:	491f      	ldr	r1, [pc, #124]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a1e:	680a      	ldr	r2, [r1, #0]
    3a20:	f360 4217 	bfi	r2, r0, #16, #8
    3a24:	600a      	str	r2, [r1, #0]
    3a26:	f240 1103 	movw	r1, #259	; 0x103
    3a2a:	f240 605b 	movw	r0, #1627	; 0x65b
    3a2e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    3a32:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3a36:	2001      	movs	r0, #1
    3a38:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    3a3c:	f000 f842 	bl	3ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3a40:	f240 2001 	movw	r0, #513	; 0x201
    3a44:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    3a48:	2002      	movs	r0, #2
    3a4a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3a4e:	4914      	ldr	r1, [pc, #80]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a50:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    3a54:	6008      	str	r0, [r1, #0]
    3a56:	4913      	ldr	r1, [pc, #76]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a58:	2000      	movs	r0, #0
    3a5a:	8608      	strh	r0, [r1, #48]	; 0x30
    3a5c:	3110      	adds	r1, #16
    3a5e:	61c8      	str	r0, [r1, #28]
    3a60:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    3a64:	2001      	movs	r0, #1
    3a66:	f006 f96a 	bl	9d3e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3a6a:	2010      	movs	r0, #16
    3a6c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3a70:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3a74:	2002      	movs	r0, #2
    3a76:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    3a7a:	480b      	ldr	r0, [pc, #44]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a7c:	6800      	ldr	r0, [r0, #0]
    3a7e:	2800      	cmp	r0, #0
    3a80:	d002      	beq.n	3a88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    3a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a86:	4700      	bx	r0
    3a88:	bd70      	pop	{r4, r5, r6, pc}
    3a8a:	0000      	.short	0x0000
    3a8c:	40001000 	.word	0x40001000
    3a90:	4000173c 	.word	0x4000173c
    3a94:	80000096 	.word	0x80000096
    3a98:	8900002c 	.word	0x8900002c
    3a9c:	4000158c 	.word	0x4000158c
    3aa0:	4001f504 	.word	0x4001f504
    3aa4:	20000d94 	.word	0x20000d94
    3aa8:	200000f4 	.word	0x200000f4

00003aac <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    3aac:	4901      	ldr	r1, [pc, #4]	; (3ab4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    3aae:	7548      	strb	r0, [r1, #21]
    3ab0:	4770      	bx	lr
    3ab2:	0000      	.short	0x0000
    3ab4:	20000da4 	.word	0x20000da4

00003ab8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    3ab8:	4901      	ldr	r1, [pc, #4]	; (3ac0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    3aba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3abe:	4770      	bx	lr
    3ac0:	000042dc 	.word	0x000042dc

00003ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    3ac4:	4908      	ldr	r1, [pc, #32]	; (3ae8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    3ac6:	b510      	push	{r4, lr}
    3ac8:	7508      	strb	r0, [r1, #20]
    3aca:	4908      	ldr	r1, [pc, #32]	; (3aec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    3acc:	2801      	cmp	r0, #1
    3ace:	d006      	beq.n	3ade <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    3ad0:	2802      	cmp	r0, #2
    3ad2:	d006      	beq.n	3ae2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    3ad4:	f640 516c 	movw	r1, #3436	; 0xd6c
    3ad8:	203e      	movs	r0, #62	; 0x3e
    3ada:	f7fc fc5b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ade:	2003      	movs	r0, #3
    3ae0:	e000      	b.n	3ae4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    3ae2:	2004      	movs	r0, #4
    3ae4:	6008      	str	r0, [r1, #0]
    3ae6:	bd10      	pop	{r4, pc}
    3ae8:	20000da4 	.word	0x20000da4
    3aec:	40001510 	.word	0x40001510

00003af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    3af0:	4905      	ldr	r1, [pc, #20]	; (3b08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    3af2:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    3af6:	4805      	ldr	r0, [pc, #20]	; (3b0c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    3af8:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    3afc:	f041 0101 	orr.w	r1, r1, #1
    3b00:	7001      	strb	r1, [r0, #0]
    3b02:	f000 ba0b 	b.w	3f1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3b06:	0000      	.short	0x0000
    3b08:	40001000 	.word	0x40001000
    3b0c:	20000da4 	.word	0x20000da4

00003b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    3b10:	4901      	ldr	r1, [pc, #4]	; (3b18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    3b12:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3b16:	4770      	bx	lr
    3b18:	000042e8 	.word	0x000042e8

00003b1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    3b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b20:	4e30      	ldr	r6, [pc, #192]	; (3be4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3b22:	4c31      	ldr	r4, [pc, #196]	; (3be8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    3b24:	4688      	mov	r8, r1
    3b26:	0007      	movs	r7, r0
    3b28:	4615      	mov	r5, r2
    3b2a:	f04f 0901 	mov.w	r9, #1
    3b2e:	d006      	beq.n	3b3e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    3b30:	2f01      	cmp	r7, #1
    3b32:	d012      	beq.n	3b5a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    3b34:	f640 0117 	movw	r1, #2071	; 0x817
    3b38:	203e      	movs	r0, #62	; 0x3e
    3b3a:	f7fc fc2b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b3e:	4610      	mov	r0, r2
    3b40:	f000 fb80 	bl	4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    3b44:	4829      	ldr	r0, [pc, #164]	; (3bec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    3b46:	f884 9009 	strb.w	r9, [r4, #9]
    3b4a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    3b4e:	4640      	mov	r0, r8
    3b50:	f000 fb26 	bl	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    3b54:	4605      	mov	r5, r0
    3b56:	4630      	mov	r0, r6
    3b58:	e00c      	b.n	3b74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    3b5a:	4610      	mov	r0, r2
    3b5c:	f000 fb58 	bl	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    3b60:	2002      	movs	r0, #2
    3b62:	7260      	strb	r0, [r4, #9]
    3b64:	f649 71ba 	movw	r1, #40890	; 0x9fba
    3b68:	4640      	mov	r0, r8
    3b6a:	f000 fb19 	bl	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    3b6e:	4605      	mov	r5, r0
    3b70:	481c      	ldr	r0, [pc, #112]	; (3be4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3b72:	1d00      	adds	r0, r0, #4
    3b74:	f000 fad2 	bl	411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>
    3b78:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3bf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    3b7c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    3b80:	f8df a074 	ldr.w	sl, [pc, #116]	; 3bf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    3b84:	481b      	ldr	r0, [pc, #108]	; (3bf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    3b86:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    3b8a:	2010      	movs	r0, #16
    3b8c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    3b90:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b92:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    3b96:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    3b9a:	6260      	str	r0, [r4, #36]	; 0x24
    3b9c:	4817      	ldr	r0, [pc, #92]	; (3bfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3b9e:	6006      	str	r6, [r0, #0]
    3ba0:	f000 f9f6 	bl	3f90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    3ba4:	4641      	mov	r1, r8
    3ba6:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    3baa:	4811      	ldr	r0, [pc, #68]	; (3bf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    3bac:	300c      	adds	r0, #12
    3bae:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3bb2:	42a8      	cmp	r0, r5
    3bb4:	d310      	bcc.n	3bd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    3bb6:	2000      	movs	r0, #0
    3bb8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3bbc:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    3bc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3bc2:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    3bc6:	6260      	str	r0, [r4, #36]	; 0x24
    3bc8:	480c      	ldr	r0, [pc, #48]	; (3bfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3bca:	1d00      	adds	r0, r0, #4
    3bcc:	6006      	str	r6, [r0, #0]
    3bce:	f7ff fd6b 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3bd2:	2000      	movs	r0, #0
    3bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bd8:	4629      	mov	r1, r5
    3bda:	4638      	mov	r0, r7
    3bdc:	f000 faaa 	bl	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    3be0:	2001      	movs	r0, #1
    3be2:	e7f7      	b.n	3bd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    3be4:	40001000 	.word	0x40001000
    3be8:	20000da4 	.word	0x20000da4
    3bec:	00004288 	.word	0x00004288
    3bf0:	40008000 	.word	0x40008000
    3bf4:	40008140 	.word	0x40008140
    3bf8:	4001f098 	.word	0x4001f098
    3bfc:	4001f504 	.word	0x4001f504

00003c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    3c00:	4b0d      	ldr	r3, [pc, #52]	; (3c38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    3c02:	b510      	push	{r4, lr}
    3c04:	71d8      	strb	r0, [r3, #7]
    3c06:	729a      	strb	r2, [r3, #10]
    3c08:	b151      	cbz	r1, 3c20 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    3c0a:	2002      	movs	r0, #2
    3c0c:	7218      	strb	r0, [r3, #8]
    3c0e:	2801      	cmp	r0, #1
    3c10:	d008      	beq.n	3c24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    3c12:	2802      	cmp	r0, #2
    3c14:	d00f      	beq.n	3c36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3c16:	f640 2144 	movw	r1, #2628	; 0xa44
    3c1a:	203e      	movs	r0, #62	; 0x3e
    3c1c:	f7fc fbba 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c20:	2001      	movs	r0, #1
    3c22:	e7f3      	b.n	3c0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    3c24:	7a58      	ldrb	r0, [r3, #9]
    3c26:	2802      	cmp	r0, #2
    3c28:	d105      	bne.n	3c36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3c2a:	f000 f93b 	bl	3ea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    3c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c32:	f000 ba49 	b.w	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    3c36:	bd10      	pop	{r4, pc}
    3c38:	20000da4 	.word	0x20000da4

00003c3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    3c3c:	4904      	ldr	r1, [pc, #16]	; (3c50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    3c3e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    3c42:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    3c46:	4249      	negs	r1, r1
    3c48:	7001      	strb	r1, [r0, #0]
    3c4a:	2001      	movs	r0, #1
    3c4c:	4770      	bx	lr
    3c4e:	0000      	.short	0x0000
    3c50:	40001000 	.word	0x40001000

00003c54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    3c54:	4903      	ldr	r1, [pc, #12]	; (3c64 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    3c56:	0e02      	lsrs	r2, r0, #24
    3c58:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    3c5c:	0200      	lsls	r0, r0, #8
    3c5e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    3c62:	4770      	bx	lr
    3c64:	40001000 	.word	0x40001000

00003c68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    3c68:	4901      	ldr	r1, [pc, #4]	; (3c70 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    3c6a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3c6e:	4770      	bx	lr
    3c70:	40001000 	.word	0x40001000

00003c74 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    3c74:	b510      	push	{r4, lr}
    3c76:	2200      	movs	r2, #0
    3c78:	2901      	cmp	r1, #1
    3c7a:	d006      	beq.n	3c8a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    3c7c:	2902      	cmp	r1, #2
    3c7e:	d002      	beq.n	3c86 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    3c80:	f240 21d2 	movw	r1, #722	; 0x2d2
    3c84:	e014      	b.n	3cb0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    3c86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3c8a:	490b      	ldr	r1, [pc, #44]	; (3cb8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    3c8c:	430a      	orrs	r2, r1
    3c8e:	490b      	ldr	r1, [pc, #44]	; (3cbc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3c90:	600a      	str	r2, [r1, #0]
    3c92:	490b      	ldr	r1, [pc, #44]	; (3cc0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    3c94:	4308      	orrs	r0, r1
    3c96:	4909      	ldr	r1, [pc, #36]	; (3cbc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3c98:	1d09      	adds	r1, r1, #4
    3c9a:	6008      	str	r0, [r1, #0]
    3c9c:	4809      	ldr	r0, [pc, #36]	; (3cc4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    3c9e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3ca2:	b2c0      	uxtb	r0, r0
    3ca4:	2803      	cmp	r0, #3
    3ca6:	d001      	beq.n	3cac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    3ca8:	280b      	cmp	r0, #11
    3caa:	d104      	bne.n	3cb6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    3cac:	f240 21ea 	movw	r1, #746	; 0x2ea
    3cb0:	203e      	movs	r0, #62	; 0x3e
    3cb2:	f7fc fb6f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cb6:	bd10      	pop	{r4, pc}
    3cb8:	00100108 	.word	0x00100108
    3cbc:	40001514 	.word	0x40001514
    3cc0:	02030000 	.word	0x02030000
    3cc4:	40001000 	.word	0x40001000

00003cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    3cc8:	4901      	ldr	r1, [pc, #4]	; (3cd0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    3cca:	7588      	strb	r0, [r1, #22]
    3ccc:	4770      	bx	lr
    3cce:	0000      	.short	0x0000
    3cd0:	20000da4 	.word	0x20000da4

00003cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    3cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cd8:	4851      	ldr	r0, [pc, #324]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3cda:	f04f 0a01 	mov.w	sl, #1
    3cde:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    3ce2:	484f      	ldr	r0, [pc, #316]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3ce4:	300c      	adds	r0, #12
    3ce6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    3cea:	f006 f88c 	bl	9e06 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    3cee:	4c4d      	ldr	r4, [pc, #308]	; (3e24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3cf0:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    3cf4:	f000 f8e0 	bl	3eb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    3cf8:	494b      	ldr	r1, [pc, #300]	; (3e28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    3cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3cfc:	6008      	str	r0, [r1, #0]
    3cfe:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3e2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    3d02:	2000      	movs	r0, #0
    3d04:	6260      	str	r0, [r4, #36]	; 0x24
    3d06:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    3d0a:	f240 131d 	movw	r3, #285	; 0x11d
    3d0e:	439a      	bics	r2, r3
    3d10:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    3d14:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3d18:	f000 f94e 	bl	3fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    3d1c:	4605      	mov	r5, r0
    3d1e:	4840      	ldr	r0, [pc, #256]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d20:	3008      	adds	r0, #8
    3d22:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3d26:	4e3e      	ldr	r6, [pc, #248]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d28:	61e0      	str	r0, [r4, #28]
    3d2a:	1d36      	adds	r6, r6, #4
    3d2c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    3d30:	61a0      	str	r0, [r4, #24]
    3d32:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3d36:	7d21      	ldrb	r1, [r4, #20]
    3d38:	f884 1020 	strb.w	r1, [r4, #32]
    3d3c:	7a61      	ldrb	r1, [r4, #9]
    3d3e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3d42:	46a1      	mov	r9, r4
    3d44:	2400      	movs	r4, #0
    3d46:	4639      	mov	r1, r7
    3d48:	4628      	mov	r0, r5
    3d4a:	f000 f983 	bl	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    3d4e:	b910      	cbnz	r0, 3d56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    3d50:	f8c8 a010 	str.w	sl, [r8, #16]
    3d54:	2401      	movs	r4, #1
    3d56:	4f33      	ldr	r7, [pc, #204]	; (3e24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3d58:	07e8      	lsls	r0, r5, #31
    3d5a:	f1a7 0710 	sub.w	r7, r7, #16
    3d5e:	d120      	bne.n	3da2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    3d60:	07a8      	lsls	r0, r5, #30
    3d62:	d527      	bpl.n	3db4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    3d64:	f006 f96e 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3d68:	b9f0      	cbnz	r0, 3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d6a:	f006 f95b 	bl	a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3d6e:	b9d8      	cbnz	r0, 3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d70:	482f      	ldr	r0, [pc, #188]	; (3e30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    3d72:	6800      	ldr	r0, [r0, #0]
    3d74:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    3d78:	f3c0 6300 	ubfx	r3, r0, #24, #1
    3d7c:	f000 020f 	and.w	r2, r0, #15
    3d80:	f3c0 1103 	ubfx	r1, r0, #4, #4
    3d84:	f3c0 2803 	ubfx	r8, r0, #8, #4
    3d88:	b173      	cbz	r3, 3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d8a:	b11a      	cbz	r2, 3d94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3d8c:	b111      	cbz	r1, 3d94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3d8e:	f1b8 0f00 	cmp.w	r8, #0
    3d92:	d109      	bne.n	3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d94:	f3c0 4004 	ubfx	r0, r0, #16, #5
    3d98:	2801      	cmp	r0, #1
    3d9a:	d105      	bne.n	3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d9c:	f1bc 0f03 	cmp.w	ip, #3
    3da0:	d202      	bcs.n	3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3da2:	6838      	ldr	r0, [r7, #0]
    3da4:	4780      	blx	r0
    3da6:	e00e      	b.n	3dc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3da8:	f345 0080 	sbfx	r0, r5, #2, #1
    3dac:	4621      	mov	r1, r4
    3dae:	1c40      	adds	r0, r0, #1
    3db0:	687a      	ldr	r2, [r7, #4]
    3db2:	e007      	b.n	3dc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    3db4:	f015 0f28 	tst.w	r5, #40	; 0x28
    3db8:	d005      	beq.n	3dc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3dba:	f345 1140 	sbfx	r1, r5, #5, #1
    3dbe:	68ba      	ldr	r2, [r7, #8]
    3dc0:	4620      	mov	r0, r4
    3dc2:	1c49      	adds	r1, r1, #1
    3dc4:	4790      	blx	r2
    3dc6:	06e8      	lsls	r0, r5, #27
    3dc8:	d501      	bpl.n	3dce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    3dca:	68f8      	ldr	r0, [r7, #12]
    3dcc:	4780      	blx	r0
    3dce:	f899 1009 	ldrb.w	r1, [r9, #9]
    3dd2:	4648      	mov	r0, r9
    3dd4:	2902      	cmp	r1, #2
    3dd6:	d120      	bne.n	3e1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3dd8:	7b01      	ldrb	r1, [r0, #12]
    3dda:	2900      	cmp	r1, #0
    3ddc:	d01d      	beq.n	3e1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3dde:	2902      	cmp	r1, #2
    3de0:	d004      	beq.n	3dec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    3de2:	2901      	cmp	r1, #1
    3de4:	d009      	beq.n	3dfa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    3de6:	f640 4156 	movw	r1, #3158	; 0xc56
    3dea:	e00d      	b.n	3e08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    3dec:	69c1      	ldr	r1, [r0, #28]
    3dee:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3df2:	4408      	add	r0, r1
    3df4:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    3df8:	e00b      	b.n	3e12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    3dfa:	6901      	ldr	r1, [r0, #16]
    3dfc:	f8d9 001c 	ldr.w	r0, [r9, #28]
    3e00:	4281      	cmp	r1, r0
    3e02:	d804      	bhi.n	3e0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    3e04:	f640 4157 	movw	r1, #3159	; 0xc57
    3e08:	203e      	movs	r0, #62	; 0x3e
    3e0a:	f7fc fac3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e0e:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    3e12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e16:	f000 b961 	b.w	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    3e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e1e:	0000      	.short	0x0000
    3e20:	40008000 	.word	0x40008000
    3e24:	20000da4 	.word	0x20000da4
    3e28:	4001f508 	.word	0x4001f508
    3e2c:	40001000 	.word	0x40001000
    3e30:	40001450 	.word	0x40001450
    3e34:	480b      	ldr	r0, [pc, #44]	; (3e64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    3e36:	7d81      	ldrb	r1, [r0, #22]
    3e38:	480b      	ldr	r0, [pc, #44]	; (3e68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    3e3a:	5c40      	ldrb	r0, [r0, r1]
    3e3c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3e40:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    3e44:	d204      	bcs.n	3e50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    3e46:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    3e4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3e4e:	e001      	b.n	3e54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    3e50:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    3e54:	4a05      	ldr	r2, [pc, #20]	; (3e6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    3e56:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    3e5a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    3e5e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    3e62:	4770      	bx	lr
    3e64:	20000da4 	.word	0x20000da4
    3e68:	0000428e 	.word	0x0000428e
    3e6c:	40001000 	.word	0x40001000
    3e70:	b508      	push	{r3, lr}
    3e72:	490b      	ldr	r1, [pc, #44]	; (3ea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    3e74:	466b      	mov	r3, sp
    3e76:	f991 2015 	ldrsb.w	r2, [r1, #21]
    3e7a:	7d89      	ldrb	r1, [r1, #22]
    3e7c:	f000 faaa 	bl	43d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    3e80:	f99d 0000 	ldrsb.w	r0, [sp]
    3e84:	f000 fa7a 	bl	437c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    3e88:	f10d 0001 	add.w	r0, sp, #1
    3e8c:	f004 f8e8 	bl	8060 <mpsl_fem_pa_gain_set>
    3e90:	2800      	cmp	r0, #0
    3e92:	d004      	beq.n	3e9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    3e94:	f240 51e6 	movw	r1, #1510	; 0x5e6
    3e98:	203e      	movs	r0, #62	; 0x3e
    3e9a:	f7fc fa7b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e9e:	bd08      	pop	{r3, pc}
    3ea0:	20000da4 	.word	0x20000da4
    3ea4:	4803      	ldr	r0, [pc, #12]	; (3eb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    3ea6:	7a01      	ldrb	r1, [r0, #8]
    3ea8:	2901      	cmp	r1, #1
    3eaa:	d102      	bne.n	3eb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    3eac:	7a80      	ldrb	r0, [r0, #10]
    3eae:	f7ff bfdf 	b.w	3e70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3eb2:	4770      	bx	lr
    3eb4:	20000da4 	.word	0x20000da4
    3eb8:	480d      	ldr	r0, [pc, #52]	; (3ef0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    3eba:	b510      	push	{r4, lr}
    3ebc:	7a40      	ldrb	r0, [r0, #9]
    3ebe:	2801      	cmp	r0, #1
    3ec0:	d00c      	beq.n	3edc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    3ec2:	2802      	cmp	r0, #2
    3ec4:	d113      	bne.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ec6:	f004 f8ad 	bl	8024 <mpsl_fem_lna_configuration_clear>
    3eca:	2800      	cmp	r0, #0
    3ecc:	d00f      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ece:	1c40      	adds	r0, r0, #1
    3ed0:	d00d      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ed2:	f640 01ab 	movw	r1, #2219	; 0x8ab
    3ed6:	203e      	movs	r0, #62	; 0x3e
    3ed8:	f7fc fa5c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3edc:	f004 f8b4 	bl	8048 <mpsl_fem_pa_configuration_clear>
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d004      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ee4:	1c40      	adds	r0, r0, #1
    3ee6:	d002      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ee8:	f640 01a5 	movw	r1, #2213	; 0x8a5
    3eec:	e7f3      	b.n	3ed6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    3eee:	bd10      	pop	{r4, pc}
    3ef0:	20000da4 	.word	0x20000da4
    3ef4:	4808      	ldr	r0, [pc, #32]	; (3f18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    3ef6:	2100      	movs	r1, #0
    3ef8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3efc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    3f00:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    3f04:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    3f08:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    3f0c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    3f10:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    3f14:	4770      	bx	lr
    3f16:	0000      	.short	0x0000
    3f18:	40001000 	.word	0x40001000
    3f1c:	4818      	ldr	r0, [pc, #96]	; (3f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    3f1e:	b510      	push	{r4, lr}
    3f20:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    3f24:	07c1      	lsls	r1, r0, #31
    3f26:	d029      	beq.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f28:	0781      	lsls	r1, r0, #30
    3f2a:	d514      	bpl.n	3f56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    3f2c:	4815      	ldr	r0, [pc, #84]	; (3f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3f2e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3f32:	f041 0101 	orr.w	r1, r1, #1
    3f36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f3a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3f3e:	b2c0      	uxtb	r0, r0
    3f40:	280b      	cmp	r0, #11
    3f42:	d005      	beq.n	3f50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f44:	280a      	cmp	r0, #10
    3f46:	d003      	beq.n	3f50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f48:	2803      	cmp	r0, #3
    3f4a:	d001      	beq.n	3f50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f4c:	2802      	cmp	r0, #2
    3f4e:	d115      	bne.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f50:	f240 610f 	movw	r1, #1551	; 0x60f
    3f54:	e00f      	b.n	3f76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    3f56:	0740      	lsls	r0, r0, #29
    3f58:	d510      	bpl.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f5a:	480a      	ldr	r0, [pc, #40]	; (3f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3f5c:	490a      	ldr	r1, [pc, #40]	; (3f88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    3f5e:	3008      	adds	r0, #8
    3f60:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    3f64:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3f68:	4808      	ldr	r0, [pc, #32]	; (3f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    3f6a:	f005 ff0b 	bl	9d84 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3f6e:	2800      	cmp	r0, #0
    3f70:	d004      	beq.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f72:	f240 6117 	movw	r1, #1559	; 0x617
    3f76:	203e      	movs	r0, #62	; 0x3e
    3f78:	f7fc fa0c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	0000      	.short	0x0000
    3f80:	20000da4 	.word	0x20000da4
    3f84:	40001000 	.word	0x40001000
    3f88:	4001f098 	.word	0x4001f098
    3f8c:	40008000 	.word	0x40008000
    3f90:	4808      	ldr	r0, [pc, #32]	; (3fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    3f92:	4601      	mov	r1, r0
    3f94:	79c2      	ldrb	r2, [r0, #7]
    3f96:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    3f9a:	b112      	cbz	r2, 3fa2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    3f9c:	2a01      	cmp	r2, #1
    3f9e:	d003      	beq.n	3fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    3fa0:	e006      	b.n	3fb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    3fa2:	f041 0102 	orr.w	r1, r1, #2
    3fa6:	e001      	b.n	3fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    3fa8:	f041 0104 	orr.w	r1, r1, #4
    3fac:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    3fb0:	f7ff bfb4 	b.w	3f1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3fb4:	20000da4 	.word	0x20000da4
    3fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fbc:	4d22      	ldr	r5, [pc, #136]	; (4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>)
    3fbe:	2400      	movs	r4, #0
    3fc0:	7b28      	ldrb	r0, [r5, #12]
    3fc2:	b138      	cbz	r0, 3fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3fc4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3fc8:	4820      	ldr	r0, [pc, #128]	; (404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>)
    3fca:	f005 fedb 	bl	9d84 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3fce:	b108      	cbz	r0, 3fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3fd0:	2701      	movs	r7, #1
    3fd2:	e000      	b.n	3fd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    3fd4:	2700      	movs	r7, #0
    3fd6:	7a68      	ldrb	r0, [r5, #9]
    3fd8:	4e1d      	ldr	r6, [pc, #116]	; (4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>)
    3fda:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3fde:	2801      	cmp	r0, #1
    3fe0:	d002      	beq.n	3fe8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    3fe2:	2802      	cmp	r0, #2
    3fe4:	d006      	beq.n	3ff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    3fe6:	e016      	b.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3fe8:	4630      	mov	r0, r6
    3fea:	f005 fec6 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3fee:	b190      	cbz	r0, 4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3ff0:	2408      	movs	r4, #8
    3ff2:	e010      	b.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3ff4:	4630      	mov	r0, r6
    3ff6:	f005 fec0 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3ffa:	b100      	cbz	r0, 3ffe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    3ffc:	2402      	movs	r4, #2
    3ffe:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    4002:	43c0      	mvns	r0, r0
    4004:	f340 0000 	sbfx	r0, r0, #0, #1
    4008:	1c40      	adds	r0, r0, #1
    400a:	d101      	bne.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400c:	f044 0404 	orr.w	r4, r4, #4
    4010:	b10f      	cbz	r7, 4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    4012:	f044 0401 	orr.w	r4, r4, #1
    4016:	f014 0f0b 	tst.w	r4, #11
    401a:	d107      	bne.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    401c:	f44f 7188 	mov.w	r1, #272	; 0x110
    4020:	4630      	mov	r0, r6
    4022:	f005 feaa 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    4026:	b108      	cbz	r0, 402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    4028:	f044 0410 	orr.w	r4, r4, #16
    402c:	f7ff ff62 	bl	3ef4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    4030:	06e0      	lsls	r0, r4, #27
    4032:	d506      	bpl.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    4034:	0720      	lsls	r0, r4, #28
    4036:	d404      	bmi.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    4038:	7a68      	ldrb	r0, [r5, #9]
    403a:	2801      	cmp	r0, #1
    403c:	d101      	bne.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    403e:	f044 0420 	orr.w	r4, r4, #32
    4042:	4620      	mov	r0, r4
    4044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4048:	20000da4 	.word	0x20000da4
    404c:	40008000 	.word	0x40008000
    4050:	40001000 	.word	0x40001000
    4054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4058:	4c1a      	ldr	r4, [pc, #104]	; (40c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc4>)
    405a:	460d      	mov	r5, r1
    405c:	7a21      	ldrb	r1, [r4, #8]
    405e:	b129      	cbz	r1, 406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    4060:	f010 0f11 	tst.w	r0, #17
    4064:	d007      	beq.n	4076 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x76>
    4066:	f7ff fb1f 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    406a:	e024      	b.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
    406c:	f000 f890 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    4070:	2000      	movs	r0, #0
    4072:	7320      	strb	r0, [r4, #12]
    4074:	e01f      	b.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
    4076:	2901      	cmp	r1, #1
    4078:	d001      	beq.n	407e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e>
    407a:	2601      	movs	r6, #1
    407c:	e000      	b.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    407e:	2600      	movs	r6, #0
    4080:	79e0      	ldrb	r0, [r4, #7]
    4082:	2801      	cmp	r0, #1
    4084:	d00e      	beq.n	40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>
    4086:	2700      	movs	r7, #0
    4088:	f000 f882 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    408c:	2196      	movs	r1, #150	; 0x96
    408e:	4630      	mov	r0, r6
    4090:	f000 f894 	bl	41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>
    4094:	4601      	mov	r1, r0
    4096:	b14f      	cbz	r7, 40ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac>
    4098:	353b      	adds	r5, #59	; 0x3b
    409a:	428d      	cmp	r5, r1
    409c:	d904      	bls.n	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
    409e:	2000      	movs	r0, #0
    40a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40a4:	2701      	movs	r7, #1
    40a6:	e7ef      	b.n	4088 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88>
    40a8:	2001      	movs	r0, #1
    40aa:	71e0      	strb	r0, [r4, #7]
    40ac:	7aa2      	ldrb	r2, [r4, #10]
    40ae:	4630      	mov	r0, r6
    40b0:	f7ff fd34 	bl	3b1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    40b4:	b108      	cbz	r0, 40ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xba>
    40b6:	2001      	movs	r0, #1
    40b8:	e7f2      	b.n	40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>
    40ba:	f640 21a5 	movw	r1, #2725	; 0xaa5
    40be:	203e      	movs	r0, #62	; 0x3e
    40c0:	f7fc f968 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40c4:	20000da4 	.word	0x20000da4
    40c8:	4803      	ldr	r0, [pc, #12]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    40ca:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    40ce:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    40d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    40d6:	4770      	bx	lr
    40d8:	40001000 	.word	0x40001000
    40dc:	4804      	ldr	r0, [pc, #16]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    40de:	6a41      	ldr	r1, [r0, #36]	; 0x24
    40e0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    40e4:	6241      	str	r1, [r0, #36]	; 0x24
    40e6:	4903      	ldr	r1, [pc, #12]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    40e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    40ec:	6008      	str	r0, [r1, #0]
    40ee:	4770      	bx	lr
    40f0:	20000da4 	.word	0x20000da4
    40f4:	4001f504 	.word	0x4001f504
    40f8:	4a07      	ldr	r2, [pc, #28]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    40fa:	2000      	movs	r0, #0
    40fc:	3208      	adds	r2, #8
    40fe:	4906      	ldr	r1, [pc, #24]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    4100:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4104:	1d0a      	adds	r2, r1, #4
    4106:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    410a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    410e:	4902      	ldr	r1, [pc, #8]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    4110:	310c      	adds	r1, #12
    4112:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4116:	4770      	bx	lr
    4118:	40008000 	.word	0x40008000
    411c:	4903      	ldr	r1, [pc, #12]	; (412c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12c>)
    411e:	79c9      	ldrb	r1, [r1, #7]
    4120:	2900      	cmp	r1, #0
    4122:	d102      	bne.n	412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
    4124:	4902      	ldr	r1, [pc, #8]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    4126:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    412a:	4770      	bx	lr
    412c:	20000da4 	.word	0x20000da4
    4130:	4001f098 	.word	0x4001f098
    4134:	b510      	push	{r4, lr}
    4136:	4a14      	ldr	r2, [pc, #80]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    4138:	b120      	cbz	r0, 4144 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x144>
    413a:	2801      	cmp	r0, #1
    413c:	d011      	beq.n	4162 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x162>
    413e:	f240 7153 	movw	r1, #1875	; 0x753
    4142:	e01c      	b.n	417e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17e>
    4144:	f101 0028 	add.w	r0, r1, #40	; 0x28
    4148:	e9c2 1002 	strd	r1, r0, [r2, #8]
    414c:	490f      	ldr	r1, [pc, #60]	; (418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>)
    414e:	480e      	ldr	r0, [pc, #56]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    4150:	f003 ff80 	bl	8054 <mpsl_fem_pa_configuration_set>
    4154:	2800      	cmp	r0, #0
    4156:	d015      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    4158:	1c40      	adds	r0, r0, #1
    415a:	d013      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    415c:	f240 7142 	movw	r1, #1858	; 0x742
    4160:	e00d      	b.n	417e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17e>
    4162:	f101 0029 	add.w	r0, r1, #41	; 0x29
    4166:	e9c2 1002 	strd	r1, r0, [r2, #8]
    416a:	4908      	ldr	r1, [pc, #32]	; (418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>)
    416c:	4806      	ldr	r0, [pc, #24]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    416e:	f003 ff5f 	bl	8030 <mpsl_fem_lna_configuration_set>
    4172:	2800      	cmp	r0, #0
    4174:	d006      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    4176:	1c40      	adds	r0, r0, #1
    4178:	d004      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    417a:	f240 714f 	movw	r1, #1871	; 0x74f
    417e:	203e      	movs	r0, #62	; 0x3e
    4180:	f7fc f908 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4184:	bd10      	pop	{r4, pc}
    4186:	0000      	.short	0x0000
    4188:	200000f8 	.word	0x200000f8
    418c:	000042b8 	.word	0x000042b8
    4190:	4802      	ldr	r0, [pc, #8]	; (419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>)
    4192:	2100      	movs	r1, #0
    4194:	71c1      	strb	r1, [r0, #7]
    4196:	7201      	strb	r1, [r0, #8]
    4198:	7241      	strb	r1, [r0, #9]
    419a:	4770      	bx	lr
    419c:	20000da4 	.word	0x20000da4
    41a0:	4a05      	ldr	r2, [pc, #20]	; (41b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b8>)
    41a2:	79d2      	ldrb	r2, [r2, #7]
    41a4:	2a01      	cmp	r2, #1
    41a6:	d006      	beq.n	41b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b6>
    41a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41ac:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    41b0:	fbb1 f1f2 	udiv	r1, r1, r2
    41b4:	1a40      	subs	r0, r0, r1
    41b6:	4770      	bx	lr
    41b8:	20000da4 	.word	0x20000da4
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	4c13      	ldr	r4, [pc, #76]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    41c0:	4603      	mov	r3, r0
    41c2:	460d      	mov	r5, r1
    41c4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    41c8:	2000      	movs	r0, #0
    41ca:	b15a      	cbz	r2, 41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41cc:	4621      	mov	r1, r4
    41ce:	f891 1020 	ldrb.w	r1, [r1, #32]
    41d2:	b163      	cbz	r3, 41ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ee>
    41d4:	2b01      	cmp	r3, #1
    41d6:	d111      	bne.n	41fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fc>
    41d8:	2a01      	cmp	r2, #1
    41da:	4628      	mov	r0, r5
    41dc:	d012      	beq.n	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    41de:	f005 fdd6 	bl	9d8e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    41e2:	e009      	b.n	41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>
    41e4:	f640 0158 	movw	r1, #2136	; 0x858
    41e8:	203e      	movs	r0, #62	; 0x3e
    41ea:	f7fc f8d3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41ee:	2a01      	cmp	r2, #1
    41f0:	4628      	mov	r0, r5
    41f2:	d004      	beq.n	41fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fe>
    41f4:	f005 fdd9 	bl	9daa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    41f8:	69e1      	ldr	r1, [r4, #28]
    41fa:	4408      	add	r0, r1
    41fc:	bd70      	pop	{r4, r5, r6, pc}
    41fe:	f000 f8d1 	bl	43a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    4202:	e7f9      	b.n	41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>
    4204:	f000 f8c0 	bl	4388 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    4208:	e7f6      	b.n	41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>
    420a:	0000      	.short	0x0000
    420c:	20000da4 	.word	0x20000da4
    4210:	b510      	push	{r4, lr}
    4212:	f7ff fc57 	bl	3ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    4216:	f7ff fe0d 	bl	3e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    421a:	f7ff fe43 	bl	3ea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    421e:	f7ff ff53 	bl	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    4222:	f005 ff0f 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4226:	2800      	cmp	r0, #0
    4228:	d108      	bne.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    422a:	f005 fefb 	bl	a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    422e:	2800      	cmp	r0, #0
    4230:	d104      	bne.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    4232:	4803      	ldr	r0, [pc, #12]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    4234:	6801      	ldr	r1, [r0, #0]
    4236:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    423a:	6001      	str	r1, [r0, #0]
    423c:	bd10      	pop	{r4, pc}
    423e:	0000      	.short	0x0000
    4240:	40001568 	.word	0x40001568
    4244:	b510      	push	{r4, lr}
    4246:	4604      	mov	r4, r0
    4248:	f7ff fc3c 	bl	3ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    424c:	f7ff fdf2 	bl	3e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    4250:	4620      	mov	r0, r4
    4252:	f7ff fe0d 	bl	3e70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    4256:	f005 fef5 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    425a:	2800      	cmp	r0, #0
    425c:	d00d      	beq.n	427a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27a>
    425e:	4a09      	ldr	r2, [pc, #36]	; (4284 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x284>)
    4260:	6811      	ldr	r1, [r2, #0]
    4262:	0650      	lsls	r0, r2, #25
    4264:	2c02      	cmp	r4, #2
    4266:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    426a:	d007      	beq.n	427c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27c>
    426c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    4270:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    4274:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    4278:	6010      	str	r0, [r2, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    4280:	e7f6      	b.n	4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>
    4282:	0000      	.short	0x0000
    4284:	40001588 	.word	0x40001588
    4288:	a62c0000 	.word	0xa62c0000
    428c:	0604a1e0 	.word	0x0604a1e0
    4290:	0e0c0a08 	.word	0x0e0c0a08
    4294:	16141210 	.word	0x16141210
    4298:	201e1c18 	.word	0x201e1c18
    429c:	28262422 	.word	0x28262422
    42a0:	302e2c2a 	.word	0x302e2c2a
    42a4:	38363432 	.word	0x38363432
    42a8:	403e3c3a 	.word	0x403e3c3a
    42ac:	48464442 	.word	0x48464442
    42b0:	024e4c4a 	.word	0x024e4c4a
    42b4:	0000501a 	.word	0x0000501a
    42b8:	00000001 	.word	0x00000001
    42bc:	40001110 	.word	0x40001110
	...
    42d4:	00001e14 	.word	0x00001e14
    42d8:	00001130 	.word	0x00001130
    42dc:	00000000 	.word	0x00000000
    42e0:	00000028 	.word	0x00000028
    42e4:	00000018 	.word	0x00000018
    42e8:	00000000 	.word	0x00000000
    42ec:	00001e14 	.word	0x00001e14
    42f0:	00001130 	.word	0x00001130
    42f4:	00000000 	.word	0x00000000
    42f8:	00001770 	.word	0x00001770
    42fc:	00000fa0 	.word	0x00000fa0

00004300 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	4605      	mov	r5, r0
    4304:	4614      	mov	r4, r2
    4306:	4608      	mov	r0, r1
    4308:	f7ff fc02 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    430c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4310:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    4314:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    4318:	4807      	ldr	r0, [pc, #28]	; (4338 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    431a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    431e:	4408      	add	r0, r1
    4320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4324:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    4328:	fbb0 f5f1 	udiv	r5, r0, r1
    432c:	4620      	mov	r0, r4
    432e:	f7ff fbc3 	bl	3ab8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4332:	4428      	add	r0, r5
    4334:	1d40      	adds	r0, r0, #5
    4336:	bd70      	pop	{r4, r5, r6, pc}
    4338:	000043c8 	.word	0x000043c8

0000433c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    433c:	b570      	push	{r4, r5, r6, lr}
    433e:	4d0e      	ldr	r5, [pc, #56]	; (4378 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4340:	461c      	mov	r4, r3
    4342:	3d08      	subs	r5, #8
    4344:	4b0c      	ldr	r3, [pc, #48]	; (4378 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4346:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    434a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    434e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4352:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    4356:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    435a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    435e:	4418      	add	r0, r3
    4360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4364:	fbb0 f5f1 	udiv	r5, r0, r1
    4368:	4610      	mov	r0, r2
    436a:	f7ff fba5 	bl	3ab8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    436e:	4428      	add	r0, r5
    4370:	4420      	add	r0, r4
    4372:	1d40      	adds	r0, r0, #5
    4374:	bd70      	pop	{r4, r5, r6, pc}
    4376:	0000      	.short	0x0000
    4378:	000043c8 	.word	0x000043c8

0000437c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    437c:	4901      	ldr	r1, [pc, #4]	; (4384 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    437e:	b2c0      	uxtb	r0, r0
    4380:	6008      	str	r0, [r1, #0]
    4382:	4770      	bx	lr
    4384:	4000150c 	.word	0x4000150c

00004388 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    4388:	4a05      	ldr	r2, [pc, #20]	; (43a0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    438a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    438e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4392:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    4396:	fbb1 f1f2 	udiv	r1, r1, r2
    439a:	4408      	add	r0, r1
    439c:	1e80      	subs	r0, r0, #2
    439e:	4770      	bx	lr
    43a0:	000043c0 	.word	0x000043c0

000043a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    43a4:	4a05      	ldr	r2, [pc, #20]	; (43bc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    43a6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    43aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43ae:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    43b2:	fbb1 f1f2 	udiv	r1, r1, r2
    43b6:	4408      	add	r0, r1
    43b8:	4770      	bx	lr
    43ba:	0000      	.short	0x0000
    43bc:	000043c0 	.word	0x000043c0
    43c0:	05dc0000 	.word	0x05dc0000
    43c4:	000003e8 	.word	0x000003e8
    43c8:	00000000 	.word	0x00000000
    43cc:	00001e14 	.word	0x00001e14
    43d0:	00001130 	.word	0x00001130

000043d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    43d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43d8:	461e      	mov	r6, r3
    43da:	4617      	mov	r7, r2
    43dc:	460c      	mov	r4, r1
    43de:	4605      	mov	r5, r0
    43e0:	f000 f856 	bl	4490 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    43e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 448c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    43e8:	4680      	mov	r8, r0
    43ea:	f899 0000 	ldrb.w	r0, [r9]
    43ee:	42a8      	cmp	r0, r5
    43f0:	d110      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    43f2:	f899 1001 	ldrb.w	r1, [r9, #1]
    43f6:	4648      	mov	r0, r9
    43f8:	42a1      	cmp	r1, r4
    43fa:	d10b      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    43fc:	f990 1002 	ldrsb.w	r1, [r0, #2]
    4400:	42b9      	cmp	r1, r7
    4402:	d107      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4404:	78c2      	ldrb	r2, [r0, #3]
    4406:	4542      	cmp	r2, r8
    4408:	d104      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    440a:	8881      	ldrh	r1, [r0, #4]
    440c:	8031      	strh	r1, [r6, #0]
    440e:	7980      	ldrb	r0, [r0, #6]
    4410:	70b0      	strb	r0, [r6, #2]
    4412:	e037      	b.n	4484 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    4414:	463a      	mov	r2, r7
    4416:	4621      	mov	r1, r4
    4418:	2d01      	cmp	r5, #1
    441a:	d009      	beq.n	4430 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    441c:	2d02      	cmp	r5, #2
    441e:	d009      	beq.n	4434 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    4420:	2d04      	cmp	r5, #4
    4422:	d009      	beq.n	4438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    4424:	2d08      	cmp	r5, #8
    4426:	d009      	beq.n	443c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    4428:	f240 4161 	movw	r1, #1121	; 0x461
    442c:	2006      	movs	r0, #6
    442e:	e00c      	b.n	444a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    4430:	2000      	movs	r0, #0
    4432:	e004      	b.n	443e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4434:	2001      	movs	r0, #1
    4436:	e002      	b.n	443e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4438:	2003      	movs	r0, #3
    443a:	e000      	b.n	443e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    443c:	2002      	movs	r0, #2
    443e:	466b      	mov	r3, sp
    4440:	f000 f89e 	bl	4580 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    4444:	b118      	cbz	r0, 444e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    4446:	213d      	movs	r1, #61	; 0x3d
    4448:	2075      	movs	r0, #117	; 0x75
    444a:	f7fb ffa3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    444e:	4620      	mov	r0, r4
    4450:	f7ff f922 	bl	3698 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    4454:	4602      	mov	r2, r0
    4456:	2300      	movs	r3, #0
    4458:	4631      	mov	r1, r6
    445a:	f99d 0000 	ldrsb.w	r0, [sp]
    445e:	f003 fe0b 	bl	8078 <mpsl_fem_tx_power_split>
    4462:	4601      	mov	r1, r0
    4464:	f889 1007 	strb.w	r1, [r9, #7]
    4468:	8831      	ldrh	r1, [r6, #0]
    446a:	f8a9 1004 	strh.w	r1, [r9, #4]
    446e:	78b1      	ldrb	r1, [r6, #2]
    4470:	f889 1006 	strb.w	r1, [r9, #6]
    4474:	f889 5000 	strb.w	r5, [r9]
    4478:	f889 4001 	strb.w	r4, [r9, #1]
    447c:	f889 7002 	strb.w	r7, [r9, #2]
    4480:	f889 8003 	strb.w	r8, [r9, #3]
    4484:	f999 0007 	ldrsb.w	r0, [r9, #7]
    4488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    448c:	20000190 	.word	0x20000190

00004490 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    4490:	4801      	ldr	r0, [pc, #4]	; (4498 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    4492:	7800      	ldrb	r0, [r0, #0]
    4494:	4770      	bx	lr
    4496:	0000      	.short	0x0000
    4498:	20000110 	.word	0x20000110

0000449c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    449c:	b570      	push	{r4, r5, r6, lr}
    449e:	4c17      	ldr	r4, [pc, #92]	; (44fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    44a0:	7860      	ldrb	r0, [r4, #1]
    44a2:	2800      	cmp	r0, #0
    44a4:	d123      	bne.n	44ee <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    44a6:	2001      	movs	r0, #1
    44a8:	7060      	strb	r0, [r4, #1]
    44aa:	f005 fda5 	bl	9ff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    44ae:	f06f 0527 	mvn.w	r5, #39	; 0x27
    44b2:	b928      	cbnz	r0, 44c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    44b4:	f005 fdd6 	bl	a064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    44b8:	b910      	cbnz	r0, 44c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    44ba:	f005 fddd 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    44be:	b120      	cbz	r0, 44ca <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    44c0:	480f      	ldr	r0, [pc, #60]	; (4500 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    44c2:	6060      	str	r0, [r4, #4]
    44c4:	70a5      	strb	r5, [r4, #2]
    44c6:	2008      	movs	r0, #8
    44c8:	e010      	b.n	44ec <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    44ca:	f005 fd6a 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    44ce:	b940      	cbnz	r0, 44e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44d0:	f005 fd71 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    44d4:	b928      	cbnz	r0, 44e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44d6:	f005 fd85 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    44da:	b910      	cbnz	r0, 44e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44dc:	f005 fd96 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    44e0:	b130      	cbz	r0, 44f0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    44e2:	4807      	ldr	r0, [pc, #28]	; (4500 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    44e4:	3031      	adds	r0, #49	; 0x31
    44e6:	6060      	str	r0, [r4, #4]
    44e8:	70a5      	strb	r5, [r4, #2]
    44ea:	2004      	movs	r0, #4
    44ec:	70e0      	strb	r0, [r4, #3]
    44ee:	bd70      	pop	{r4, r5, r6, pc}
    44f0:	f240 113f 	movw	r1, #319	; 0x13f
    44f4:	2074      	movs	r0, #116	; 0x74
    44f6:	f003 fc01 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44fa:	0000      	.short	0x0000
    44fc:	20000110 	.word	0x20000110
    4500:	0000a394 	.word	0x0000a394

00004504 <mpsl_tx_power_radio_supported_power_adjust>:
    4504:	4a06      	ldr	r2, [pc, #24]	; (4520 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    4506:	b500      	push	{lr}
    4508:	f992 2003 	ldrsb.w	r2, [r2, #3]
    450c:	4290      	cmp	r0, r2
    450e:	db01      	blt.n	4514 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    4510:	4610      	mov	r0, r2
    4512:	bd00      	pop	{pc}
    4514:	f000 f808 	bl	4528 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    4518:	4902      	ldr	r1, [pc, #8]	; (4524 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    451a:	5608      	ldrsb	r0, [r1, r0]
    451c:	bd00      	pop	{pc}
    451e:	0000      	.short	0x0000
    4520:	20000110 	.word	0x20000110
    4524:	0000a386 	.word	0x0000a386

00004528 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    4528:	4602      	mov	r2, r0
    452a:	4813      	ldr	r0, [pc, #76]	; (4578 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    452c:	b510      	push	{r4, lr}
    452e:	f990 3003 	ldrsb.w	r3, [r0, #3]
    4532:	429a      	cmp	r2, r3
    4534:	db01      	blt.n	453a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    4536:	200d      	movs	r0, #13
    4538:	bd10      	pop	{r4, pc}
    453a:	f990 3002 	ldrsb.w	r3, [r0, #2]
    453e:	429a      	cmp	r2, r3
    4540:	dc01      	bgt.n	4546 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    4542:	2000      	movs	r0, #0
    4544:	bd10      	pop	{r4, pc}
    4546:	b101      	cbz	r1, 454a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    4548:	2101      	movs	r1, #1
    454a:	1ad4      	subs	r4, r2, r3
    454c:	6843      	ldr	r3, [r0, #4]
    454e:	5d18      	ldrb	r0, [r3, r4]
    4550:	4c0a      	ldr	r4, [pc, #40]	; (457c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    4552:	5624      	ldrsb	r4, [r4, r0]
    4554:	4294      	cmp	r4, r2
    4556:	d0f5      	beq.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4558:	4c08      	ldr	r4, [pc, #32]	; (457c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    455a:	4408      	add	r0, r1
    455c:	343f      	adds	r4, #63	; 0x3f
    455e:	b2c0      	uxtb	r0, r0
    4560:	b2d2      	uxtb	r2, r2
    4562:	42a3      	cmp	r3, r4
    4564:	d1ee      	bne.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4566:	2900      	cmp	r1, #0
    4568:	d0ec      	beq.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    456a:	2a01      	cmp	r2, #1
    456c:	d001      	beq.n	4572 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    456e:	2a02      	cmp	r2, #2
    4570:	d1e8      	bne.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4572:	1c40      	adds	r0, r0, #1
    4574:	b2c0      	uxtb	r0, r0
    4576:	bd10      	pop	{r4, pc}
    4578:	20000110 	.word	0x20000110
    457c:	0000a386 	.word	0x0000a386

00004580 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    4580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4584:	461c      	mov	r4, r3
    4586:	4690      	mov	r8, r2
    4588:	460d      	mov	r5, r1
    458a:	4606      	mov	r6, r0
    458c:	f06f 0715 	mvn.w	r7, #21
    4590:	2804      	cmp	r0, #4
    4592:	d804      	bhi.n	459e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4594:	b11c      	cbz	r4, 459e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4596:	f005 fc13 	bl	9dc0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    459a:	42a8      	cmp	r0, r5
    459c:	d802      	bhi.n	45a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    459e:	4638      	mov	r0, r7
    45a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45a4:	4805      	ldr	r0, [pc, #20]	; (45bc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    45a6:	4642      	mov	r2, r8
    45a8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    45ac:	b118      	cbz	r0, 45b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    45ae:	5740      	ldrsb	r0, [r0, r5]
    45b0:	4282      	cmp	r2, r0
    45b2:	dd00      	ble.n	45b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    45b4:	4602      	mov	r2, r0
    45b6:	7022      	strb	r2, [r4, #0]
    45b8:	2000      	movs	r0, #0
    45ba:	e7f1      	b.n	45a0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    45bc:	20000dd8 	.word	0x20000dd8

000045c0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    45c0:	4801      	ldr	r0, [pc, #4]	; (45c8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    45c2:	7800      	ldrb	r0, [r0, #0]
    45c4:	4770      	bx	lr
    45c6:	0000      	.short	0x0000
    45c8:	20000118 	.word	0x20000118

000045cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    45cc:	4905      	ldr	r1, [pc, #20]	; (45e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    45ce:	780a      	ldrb	r2, [r1, #0]
    45d0:	4290      	cmp	r0, r2
    45d2:	d301      	bcc.n	45d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    45d4:	2000      	movs	r0, #0
    45d6:	4770      	bx	lr
    45d8:	6849      	ldr	r1, [r1, #4]
    45da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    45de:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    45e2:	4770      	bx	lr
    45e4:	20000118 	.word	0x20000118

000045e8 <MPSL_IRQ_RADIO_Handler>:
    45e8:	490d      	ldr	r1, [pc, #52]	; (4620 <MPSL_IRQ_RADIO_Handler+0x38>)
    45ea:	b510      	push	{r4, lr}
    45ec:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    45f0:	2820      	cmp	r0, #32
    45f2:	d00f      	beq.n	4614 <MPSL_IRQ_RADIO_Handler+0x2c>
    45f4:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    45f8:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    45fc:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    4600:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    4604:	6840      	ldr	r0, [r0, #4]
    4606:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    460a:	680a      	ldr	r2, [r1, #0]
    460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4610:	2104      	movs	r1, #4
    4612:	4710      	bx	r2
    4614:	f640 017f 	movw	r1, #2175	; 0x87f
    4618:	2070      	movs	r0, #112	; 0x70
    461a:	f003 fb6f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    461e:	0000      	.short	0x0000
    4620:	20000ad0 	.word	0x20000ad0
    4624:	b570      	push	{r4, r5, r6, lr}
    4626:	4605      	mov	r5, r0
    4628:	2a20      	cmp	r2, #32
    462a:	d028      	beq.n	467e <MPSL_IRQ_RADIO_Handler+0x96>
    462c:	4819      	ldr	r0, [pc, #100]	; (4694 <MPSL_IRQ_RADIO_Handler+0xac>)
    462e:	4c1a      	ldr	r4, [pc, #104]	; (4698 <MPSL_IRQ_RADIO_Handler+0xb0>)
    4630:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    4634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4638:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    463c:	4423      	add	r3, r4
    463e:	2920      	cmp	r1, #32
    4640:	d022      	beq.n	4688 <MPSL_IRQ_RADIO_Handler+0xa0>
    4642:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    4646:	7840      	ldrb	r0, [r0, #1]
    4648:	784c      	ldrb	r4, [r1, #1]
    464a:	7048      	strb	r0, [r1, #1]
    464c:	4620      	mov	r0, r4
    464e:	4601      	mov	r1, r0
    4650:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    4654:	4291      	cmp	r1, r2
    4656:	7005      	strb	r5, [r0, #0]
    4658:	7840      	ldrb	r0, [r0, #1]
    465a:	d1f8      	bne.n	464e <MPSL_IRQ_RADIO_Handler+0x66>
    465c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    4660:	2a20      	cmp	r2, #32
    4662:	bf1a      	itte	ne
    4664:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    4668:	7054      	strbne	r4, [r2, #1]
    466a:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    466e:	2220      	movs	r2, #32
    4670:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    4674:	f88c 2001 	strb.w	r2, [ip, #1]
    4678:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    467c:	bd70      	pop	{r4, r5, r6, pc}
    467e:	f240 2186 	movw	r1, #646	; 0x286
    4682:	2070      	movs	r0, #112	; 0x70
    4684:	f003 fb3a 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4688:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    468c:	7840      	ldrb	r0, [r0, #1]
    468e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    4692:	e7db      	b.n	464c <MPSL_IRQ_RADIO_Handler+0x64>
    4694:	20000a50 	.word	0x20000a50
    4698:	20000ad0 	.word	0x20000ad0
    469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46a0:	b08f      	sub	sp, #60	; 0x3c
    46a2:	4615      	mov	r5, r2
    46a4:	461e      	mov	r6, r3
    46a6:	460c      	mov	r4, r1
    46a8:	f002 fa7c 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    46ac:	1828      	adds	r0, r5, r0
    46ae:	f146 0100 	adc.w	r1, r6, #0
    46b2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    46b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    46ba:	1a80      	subs	r0, r0, r2
    46bc:	eb71 0003 	sbcs.w	r0, r1, r3
    46c0:	f0c0 80e5 	bcc.w	488e <MPSL_IRQ_RADIO_Handler+0x2a6>
    46c4:	a808      	add	r0, sp, #32
    46c6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    46ca:	900a      	str	r0, [sp, #40]	; 0x28
    46cc:	48bc      	ldr	r0, [pc, #752]	; (49c0 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    46ce:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    46d2:	4408      	add	r0, r1
    46d4:	9009      	str	r0, [sp, #36]	; 0x24
    46d6:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    46da:	2020      	movs	r0, #32
    46dc:	f10d 091c 	add.w	r9, sp, #28
    46e0:	f88d 001c 	strb.w	r0, [sp, #28]
    46e4:	2d20      	cmp	r5, #32
    46e6:	d036      	beq.n	4756 <MPSL_IRQ_RADIO_Handler+0x16e>
    46e8:	48b6      	ldr	r0, [pc, #728]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    46ea:	2600      	movs	r6, #0
    46ec:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    46f0:	48b5      	ldr	r0, [pc, #724]	; (49c8 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    46f2:	e9d4 7300 	ldrd	r7, r3, [r4]
    46f6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    46fa:	f850 8f08 	ldr.w	r8, [r0, #8]!
    46fe:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    4702:	eb18 0101 	adds.w	r1, r8, r1
    4706:	4172      	adcs	r2, r6
    4708:	1a79      	subs	r1, r7, r1
    470a:	eb73 0102 	sbcs.w	r1, r3, r2
    470e:	d322      	bcc.n	4756 <MPSL_IRQ_RADIO_Handler+0x16e>
    4710:	89e1      	ldrh	r1, [r4, #14]
    4712:	b1c9      	cbz	r1, 4748 <MPSL_IRQ_RADIO_Handler+0x160>
    4714:	89c0      	ldrh	r0, [r0, #14]
    4716:	b9b8      	cbnz	r0, 4748 <MPSL_IRQ_RADIO_Handler+0x160>
    4718:	f003 f950 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    471c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4720:	bf08      	it	eq
    4722:	200d      	moveq	r0, #13
    4724:	d00b      	beq.n	473e <MPSL_IRQ_RADIO_Handler+0x156>
    4726:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    472a:	3856      	subs	r0, #86	; 0x56
    472c:	bf08      	it	eq
    472e:	201c      	moveq	r0, #28
    4730:	d005      	beq.n	473e <MPSL_IRQ_RADIO_Handler+0x156>
    4732:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4736:	389f      	subs	r0, #159	; 0x9f
    4738:	bf14      	ite	ne
    473a:	4630      	movne	r0, r6
    473c:	2032      	moveq	r0, #50	; 0x32
    473e:	1c40      	adds	r0, r0, #1
    4740:	ebb7 0108 	subs.w	r1, r7, r8
    4744:	4281      	cmp	r1, r0
    4746:	db06      	blt.n	4756 <MPSL_IRQ_RADIO_Handler+0x16e>
    4748:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    474c:	f889 5000 	strb.w	r5, [r9]
    4750:	7845      	ldrb	r5, [r0, #1]
    4752:	2d20      	cmp	r5, #32
    4754:	d1cc      	bne.n	46f0 <MPSL_IRQ_RADIO_Handler+0x108>
    4756:	980a      	ldr	r0, [sp, #40]	; 0x28
    4758:	f899 1000 	ldrb.w	r1, [r9]
    475c:	2d20      	cmp	r5, #32
    475e:	7001      	strb	r1, [r0, #0]
    4760:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4764:	f000 8128 	beq.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4768:	4896      	ldr	r0, [pc, #600]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    476a:	4f97      	ldr	r7, [pc, #604]	; (49c8 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    476c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4770:	2600      	movs	r6, #0
    4772:	9004      	str	r0, [sp, #16]
    4774:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    4778:	f10a 0008 	add.w	r0, sl, #8
    477c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4780:	f8d4 b000 	ldr.w	fp, [r4]
    4784:	e9d0 8300 	ldrd	r8, r3, [r0]
    4788:	eb1b 0202 	adds.w	r2, fp, r2
    478c:	4171      	adcs	r1, r6
    478e:	ebb8 0202 	subs.w	r2, r8, r2
    4792:	eb73 0101 	sbcs.w	r1, r3, r1
    4796:	d320      	bcc.n	47da <MPSL_IRQ_RADIO_Handler+0x1f2>
    4798:	89c0      	ldrh	r0, [r0, #14]
    479a:	2800      	cmp	r0, #0
    479c:	f000 810c 	beq.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47a0:	89e0      	ldrh	r0, [r4, #14]
    47a2:	2800      	cmp	r0, #0
    47a4:	f040 8108 	bne.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47a8:	f003 f908 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    47ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    47b0:	bf08      	it	eq
    47b2:	200d      	moveq	r0, #13
    47b4:	d00b      	beq.n	47ce <MPSL_IRQ_RADIO_Handler+0x1e6>
    47b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    47ba:	3856      	subs	r0, #86	; 0x56
    47bc:	bf08      	it	eq
    47be:	201c      	moveq	r0, #28
    47c0:	d005      	beq.n	47ce <MPSL_IRQ_RADIO_Handler+0x1e6>
    47c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    47c6:	389f      	subs	r0, #159	; 0x9f
    47c8:	bf14      	ite	ne
    47ca:	4630      	movne	r0, r6
    47cc:	2032      	moveq	r0, #50	; 0x32
    47ce:	1c41      	adds	r1, r0, #1
    47d0:	ebb8 000b 	subs.w	r0, r8, fp
    47d4:	4288      	cmp	r0, r1
    47d6:	f280 80ef 	bge.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47da:	f889 5000 	strb.w	r5, [r9]
    47de:	f89a 0018 	ldrb.w	r0, [sl, #24]
    47e2:	7c21      	ldrb	r1, [r4, #16]
    47e4:	4281      	cmp	r1, r0
    47e6:	d207      	bcs.n	47f8 <MPSL_IRQ_RADIO_Handler+0x210>
    47e8:	9804      	ldr	r0, [sp, #16]
    47ea:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    47ee:	7845      	ldrb	r5, [r0, #1]
    47f0:	2d20      	cmp	r5, #32
    47f2:	d1bf      	bne.n	4774 <MPSL_IRQ_RADIO_Handler+0x18c>
    47f4:	f000 b8e0 	b.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47f8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    47fc:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    4800:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    4804:	f8d0 9008 	ldr.w	r9, [r0, #8]
    4808:	8ac0      	ldrh	r0, [r0, #22]
    480a:	eb19 0502 	adds.w	r5, r9, r2
    480e:	eb41 0806 	adc.w	r8, r1, r6
    4812:	bbb0      	cbnz	r0, 4882 <MPSL_IRQ_RADIO_Handler+0x29a>
    4814:	89e0      	ldrh	r0, [r4, #14]
    4816:	b3a0      	cbz	r0, 4882 <MPSL_IRQ_RADIO_Handler+0x29a>
    4818:	f003 f8d0 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    481c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4820:	bf08      	it	eq
    4822:	200d      	moveq	r0, #13
    4824:	d00b      	beq.n	483e <MPSL_IRQ_RADIO_Handler+0x256>
    4826:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    482a:	3856      	subs	r0, #86	; 0x56
    482c:	bf08      	it	eq
    482e:	201c      	moveq	r0, #28
    4830:	d005      	beq.n	483e <MPSL_IRQ_RADIO_Handler+0x256>
    4832:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4836:	389f      	subs	r0, #159	; 0x9f
    4838:	bf14      	ite	ne
    483a:	4630      	movne	r0, r6
    483c:	2032      	moveq	r0, #50	; 0x32
    483e:	1c41      	adds	r1, r0, #1
    4840:	ebb5 0009 	subs.w	r0, r5, r9
    4844:	4288      	cmp	r0, r1
    4846:	da1c      	bge.n	4882 <MPSL_IRQ_RADIO_Handler+0x29a>
    4848:	f003 f8b8 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    484c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4850:	bf08      	it	eq
    4852:	200d      	moveq	r0, #13
    4854:	d00b      	beq.n	486e <MPSL_IRQ_RADIO_Handler+0x286>
    4856:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    485a:	3856      	subs	r0, #86	; 0x56
    485c:	bf08      	it	eq
    485e:	201c      	moveq	r0, #28
    4860:	d005      	beq.n	486e <MPSL_IRQ_RADIO_Handler+0x286>
    4862:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4866:	389f      	subs	r0, #159	; 0x9f
    4868:	bf14      	ite	ne
    486a:	4630      	movne	r0, r6
    486c:	2032      	moveq	r0, #50	; 0x32
    486e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    4872:	1c40      	adds	r0, r0, #1
    4874:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    4878:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    487c:	1815      	adds	r5, r2, r0
    487e:	eb43 0806 	adc.w	r8, r3, r6
    4882:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    4886:	1b49      	subs	r1, r1, r5
    4888:	eb70 0008 	sbcs.w	r0, r0, r8
    488c:	d203      	bcs.n	4896 <MPSL_IRQ_RADIO_Handler+0x2ae>
    488e:	b00f      	add	sp, #60	; 0x3c
    4890:	2000      	movs	r0, #0
    4892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4896:	e9c4 5800 	strd	r5, r8, [r4]
    489a:	9818      	ldr	r0, [sp, #96]	; 0x60
    489c:	900b      	str	r0, [sp, #44]	; 0x2c
    489e:	a808      	add	r0, sp, #32
    48a0:	900a      	str	r0, [sp, #40]	; 0x28
    48a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    48a4:	f10d 0a1c 	add.w	sl, sp, #28
    48a8:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    48ac:	2020      	movs	r0, #32
    48ae:	f88d 001c 	strb.w	r0, [sp, #28]
    48b2:	2d20      	cmp	r5, #32
    48b4:	d037      	beq.n	4926 <MPSL_IRQ_RADIO_Handler+0x33e>
    48b6:	4843      	ldr	r0, [pc, #268]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    48b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    48ba:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    48be:	bf00      	nop
    48c0:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    48c4:	e9d4 8300 	ldrd	r8, r3, [r4]
    48c8:	f850 9f08 	ldr.w	r9, [r0, #8]!
    48cc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    48d0:	eb19 0202 	adds.w	r2, r9, r2
    48d4:	4171      	adcs	r1, r6
    48d6:	ebb8 0202 	subs.w	r2, r8, r2
    48da:	eb73 0101 	sbcs.w	r1, r3, r1
    48de:	d322      	bcc.n	4926 <MPSL_IRQ_RADIO_Handler+0x33e>
    48e0:	89e1      	ldrh	r1, [r4, #14]
    48e2:	b1c9      	cbz	r1, 4918 <MPSL_IRQ_RADIO_Handler+0x330>
    48e4:	89c0      	ldrh	r0, [r0, #14]
    48e6:	b9b8      	cbnz	r0, 4918 <MPSL_IRQ_RADIO_Handler+0x330>
    48e8:	f003 f868 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    48ec:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    48f0:	bf08      	it	eq
    48f2:	200d      	moveq	r0, #13
    48f4:	d00b      	beq.n	490e <MPSL_IRQ_RADIO_Handler+0x326>
    48f6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    48fa:	3856      	subs	r0, #86	; 0x56
    48fc:	bf08      	it	eq
    48fe:	201c      	moveq	r0, #28
    4900:	d005      	beq.n	490e <MPSL_IRQ_RADIO_Handler+0x326>
    4902:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4906:	389f      	subs	r0, #159	; 0x9f
    4908:	bf14      	ite	ne
    490a:	4630      	movne	r0, r6
    490c:	2032      	moveq	r0, #50	; 0x32
    490e:	1c41      	adds	r1, r0, #1
    4910:	ebb8 0009 	subs.w	r0, r8, r9
    4914:	4288      	cmp	r0, r1
    4916:	db06      	blt.n	4926 <MPSL_IRQ_RADIO_Handler+0x33e>
    4918:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    491c:	f88a 5000 	strb.w	r5, [sl]
    4920:	7845      	ldrb	r5, [r0, #1]
    4922:	2d20      	cmp	r5, #32
    4924:	d1cc      	bne.n	48c0 <MPSL_IRQ_RADIO_Handler+0x2d8>
    4926:	980a      	ldr	r0, [sp, #40]	; 0x28
    4928:	f89a 1000 	ldrb.w	r1, [sl]
    492c:	2d20      	cmp	r5, #32
    492e:	7001      	strb	r1, [r0, #0]
    4930:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    4934:	d040      	beq.n	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4936:	4923      	ldr	r1, [pc, #140]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    4938:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    493c:	f8cd 000c 	str.w	r0, [sp, #12]
    4940:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    4944:	f109 0008 	add.w	r0, r9, #8
    4948:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    494c:	f8d4 b000 	ldr.w	fp, [r4]
    4950:	e9d0 a300 	ldrd	sl, r3, [r0]
    4954:	eb1b 0202 	adds.w	r2, fp, r2
    4958:	4171      	adcs	r1, r6
    495a:	ebba 0202 	subs.w	r2, sl, r2
    495e:	eb73 0101 	sbcs.w	r1, r3, r1
    4962:	d31b      	bcc.n	499c <MPSL_IRQ_RADIO_Handler+0x3b4>
    4964:	89c0      	ldrh	r0, [r0, #14]
    4966:	b338      	cbz	r0, 49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4968:	89e0      	ldrh	r0, [r4, #14]
    496a:	bb28      	cbnz	r0, 49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    496c:	f003 f826 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4970:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4974:	bf08      	it	eq
    4976:	200d      	moveq	r0, #13
    4978:	d00b      	beq.n	4992 <MPSL_IRQ_RADIO_Handler+0x3aa>
    497a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    497e:	3856      	subs	r0, #86	; 0x56
    4980:	bf08      	it	eq
    4982:	201c      	moveq	r0, #28
    4984:	d005      	beq.n	4992 <MPSL_IRQ_RADIO_Handler+0x3aa>
    4986:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    498a:	389f      	subs	r0, #159	; 0x9f
    498c:	bf14      	ite	ne
    498e:	4630      	movne	r0, r6
    4990:	2032      	moveq	r0, #50	; 0x32
    4992:	1c41      	adds	r1, r0, #1
    4994:	ebba 000b 	subs.w	r0, sl, fp
    4998:	4288      	cmp	r0, r1
    499a:	da0d      	bge.n	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    499c:	f888 5000 	strb.w	r5, [r8]
    49a0:	f899 1018 	ldrb.w	r1, [r9, #24]
    49a4:	7c20      	ldrb	r0, [r4, #16]
    49a6:	4288      	cmp	r0, r1
    49a8:	f4bf af26 	bcs.w	47f8 <MPSL_IRQ_RADIO_Handler+0x210>
    49ac:	9803      	ldr	r0, [sp, #12]
    49ae:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    49b2:	7845      	ldrb	r5, [r0, #1]
    49b4:	2d20      	cmp	r5, #32
    49b6:	d1c3      	bne.n	4940 <MPSL_IRQ_RADIO_Handler+0x358>
    49b8:	b00f      	add	sp, #60	; 0x3c
    49ba:	2001      	movs	r0, #1
    49bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49c0:	20000ad0 	.word	0x20000ad0
    49c4:	20000a50 	.word	0x20000a50
    49c8:	20000650 	.word	0x20000650
    49cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    49d0:	b083      	sub	sp, #12
    49d2:	4691      	mov	r9, r2
    49d4:	4604      	mov	r4, r0
    49d6:	460d      	mov	r5, r1
    49d8:	4698      	mov	r8, r3
    49da:	aa01      	add	r2, sp, #4
    49dc:	4669      	mov	r1, sp
    49de:	4618      	mov	r0, r3
    49e0:	f002 f8fc 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    49e4:	f002 fe12 	bl	760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    49e8:	f002 f8dc 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    49ec:	4607      	mov	r7, r0
    49ee:	481e      	ldr	r0, [pc, #120]	; (4a68 <MPSL_IRQ_RADIO_Handler+0x480>)
    49f0:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    49f4:	2600      	movs	r6, #0
    49f6:	2920      	cmp	r1, #32
    49f8:	d009      	beq.n	4a0e <MPSL_IRQ_RADIO_Handler+0x426>
    49fa:	6882      	ldr	r2, [r0, #8]
    49fc:	68c1      	ldr	r1, [r0, #12]
    49fe:	6900      	ldr	r0, [r0, #16]
    4a00:	1d83      	adds	r3, r0, #6
    4a02:	f146 0000 	adc.w	r0, r6, #0
    4a06:	18d4      	adds	r4, r2, r3
    4a08:	eb41 0500 	adc.w	r5, r1, r0
    4a0c:	e026      	b.n	4a5c <MPSL_IRQ_RADIO_Handler+0x474>
    4a0e:	340a      	adds	r4, #10
    4a10:	f145 0500 	adc.w	r5, r5, #0
    4a14:	f1b8 0f00 	cmp.w	r8, #0
    4a18:	d017      	beq.n	4a4a <MPSL_IRQ_RADIO_Handler+0x462>
    4a1a:	f003 f8f7 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4a1e:	b9a0      	cbnz	r0, 4a4a <MPSL_IRQ_RADIO_Handler+0x462>
    4a20:	f002 ffcc 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4a24:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4a28:	bf08      	it	eq
    4a2a:	200d      	moveq	r0, #13
    4a2c:	d00b      	beq.n	4a46 <MPSL_IRQ_RADIO_Handler+0x45e>
    4a2e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4a32:	3856      	subs	r0, #86	; 0x56
    4a34:	bf08      	it	eq
    4a36:	201c      	moveq	r0, #28
    4a38:	d005      	beq.n	4a46 <MPSL_IRQ_RADIO_Handler+0x45e>
    4a3a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4a3e:	389f      	subs	r0, #159	; 0x9f
    4a40:	bf14      	ite	ne
    4a42:	4630      	movne	r0, r6
    4a44:	2032      	moveq	r0, #50	; 0x32
    4a46:	1904      	adds	r4, r0, r4
    4a48:	4175      	adcs	r5, r6
    4a4a:	f1b9 0f00 	cmp.w	r9, #0
    4a4e:	d105      	bne.n	4a5c <MPSL_IRQ_RADIO_Handler+0x474>
    4a50:	9800      	ldr	r0, [sp, #0]
    4a52:	4287      	cmp	r7, r0
    4a54:	d902      	bls.n	4a5c <MPSL_IRQ_RADIO_Handler+0x474>
    4a56:	1a38      	subs	r0, r7, r0
    4a58:	1904      	adds	r4, r0, r4
    4a5a:	4175      	adcs	r5, r6
    4a5c:	b003      	add	sp, #12
    4a5e:	4620      	mov	r0, r4
    4a60:	4629      	mov	r1, r5
    4a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4a66:	0000      	.short	0x0000
    4a68:	20000ad0 	.word	0x20000ad0
    4a6c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a70:	b081      	sub	sp, #4
    4a72:	4605      	mov	r5, r0
    4a74:	9802      	ldr	r0, [sp, #8]
    4a76:	494a      	ldr	r1, [pc, #296]	; (4ba0 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    4a78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4a7c:	4408      	add	r0, r1
    4a7e:	2600      	movs	r6, #0
    4a80:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4a84:	2020      	movs	r0, #32
    4a86:	4692      	mov	sl, r2
    4a88:	7010      	strb	r0, [r2, #0]
    4a8a:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    4a8e:	2c20      	cmp	r4, #32
    4a90:	d036      	beq.n	4b00 <MPSL_IRQ_RADIO_Handler+0x518>
    4a92:	9902      	ldr	r1, [sp, #8]
    4a94:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    4a98:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4a9c:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    4aa0:	e9d5 7300 	ldrd	r7, r3, [r5]
    4aa4:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4aa8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4aac:	eb18 0202 	adds.w	r2, r8, r2
    4ab0:	4171      	adcs	r1, r6
    4ab2:	1aba      	subs	r2, r7, r2
    4ab4:	eb73 0101 	sbcs.w	r1, r3, r1
    4ab8:	d322      	bcc.n	4b00 <MPSL_IRQ_RADIO_Handler+0x518>
    4aba:	89e9      	ldrh	r1, [r5, #14]
    4abc:	b1c9      	cbz	r1, 4af2 <MPSL_IRQ_RADIO_Handler+0x50a>
    4abe:	89c0      	ldrh	r0, [r0, #14]
    4ac0:	b9b8      	cbnz	r0, 4af2 <MPSL_IRQ_RADIO_Handler+0x50a>
    4ac2:	f002 ff7b 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4ac6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4aca:	bf08      	it	eq
    4acc:	200d      	moveq	r0, #13
    4ace:	d00b      	beq.n	4ae8 <MPSL_IRQ_RADIO_Handler+0x500>
    4ad0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4ad4:	3856      	subs	r0, #86	; 0x56
    4ad6:	bf08      	it	eq
    4ad8:	201c      	moveq	r0, #28
    4ada:	d005      	beq.n	4ae8 <MPSL_IRQ_RADIO_Handler+0x500>
    4adc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4ae0:	389f      	subs	r0, #159	; 0x9f
    4ae2:	bf14      	ite	ne
    4ae4:	4630      	movne	r0, r6
    4ae6:	2032      	moveq	r0, #50	; 0x32
    4ae8:	1c41      	adds	r1, r0, #1
    4aea:	ebb7 0008 	subs.w	r0, r7, r8
    4aee:	4288      	cmp	r0, r1
    4af0:	db06      	blt.n	4b00 <MPSL_IRQ_RADIO_Handler+0x518>
    4af2:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    4af6:	f88a 4000 	strb.w	r4, [sl]
    4afa:	7844      	ldrb	r4, [r0, #1]
    4afc:	2c20      	cmp	r4, #32
    4afe:	d1cd      	bne.n	4a9c <MPSL_IRQ_RADIO_Handler+0x4b4>
    4b00:	9804      	ldr	r0, [sp, #16]
    4b02:	f89a 1000 	ldrb.w	r1, [sl]
    4b06:	2c20      	cmp	r4, #32
    4b08:	7001      	strb	r1, [r0, #0]
    4b0a:	9f04      	ldr	r7, [sp, #16]
    4b0c:	9802      	ldr	r0, [sp, #8]
    4b0e:	d042      	beq.n	4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b10:	4924      	ldr	r1, [pc, #144]	; (4ba4 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    4b12:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4b16:	9000      	str	r0, [sp, #0]
    4b18:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    4b1c:	f8d5 b000 	ldr.w	fp, [r5]
    4b20:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    4b24:	f108 0008 	add.w	r0, r8, #8
    4b28:	eb1b 0201 	adds.w	r2, fp, r1
    4b2c:	eb43 0106 	adc.w	r1, r3, r6
    4b30:	e9d0 a300 	ldrd	sl, r3, [r0]
    4b34:	ebba 0202 	subs.w	r2, sl, r2
    4b38:	eb73 0101 	sbcs.w	r1, r3, r1
    4b3c:	d31b      	bcc.n	4b76 <MPSL_IRQ_RADIO_Handler+0x58e>
    4b3e:	89c0      	ldrh	r0, [r0, #14]
    4b40:	b348      	cbz	r0, 4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b42:	89e8      	ldrh	r0, [r5, #14]
    4b44:	bb38      	cbnz	r0, 4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b46:	f002 ff39 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4b4a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4b4e:	bf08      	it	eq
    4b50:	200d      	moveq	r0, #13
    4b52:	d00b      	beq.n	4b6c <MPSL_IRQ_RADIO_Handler+0x584>
    4b54:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4b58:	3856      	subs	r0, #86	; 0x56
    4b5a:	bf08      	it	eq
    4b5c:	201c      	moveq	r0, #28
    4b5e:	d005      	beq.n	4b6c <MPSL_IRQ_RADIO_Handler+0x584>
    4b60:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4b64:	389f      	subs	r0, #159	; 0x9f
    4b66:	bf14      	ite	ne
    4b68:	4630      	movne	r0, r6
    4b6a:	2032      	moveq	r0, #50	; 0x32
    4b6c:	1c41      	adds	r1, r0, #1
    4b6e:	ebba 000b 	subs.w	r0, sl, fp
    4b72:	4288      	cmp	r0, r1
    4b74:	da0f      	bge.n	4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b76:	703c      	strb	r4, [r7, #0]
    4b78:	f898 1018 	ldrb.w	r1, [r8, #24]
    4b7c:	7c28      	ldrb	r0, [r5, #16]
    4b7e:	4288      	cmp	r0, r1
    4b80:	d303      	bcc.n	4b8a <MPSL_IRQ_RADIO_Handler+0x5a2>
    4b82:	b005      	add	sp, #20
    4b84:	2000      	movs	r0, #0
    4b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b8a:	9800      	ldr	r0, [sp, #0]
    4b8c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4b90:	7844      	ldrb	r4, [r0, #1]
    4b92:	2c20      	cmp	r4, #32
    4b94:	d1c0      	bne.n	4b18 <MPSL_IRQ_RADIO_Handler+0x530>
    4b96:	b005      	add	sp, #20
    4b98:	2001      	movs	r0, #1
    4b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b9e:	0000      	.short	0x0000
    4ba0:	20000ad0 	.word	0x20000ad0
    4ba4:	20000a50 	.word	0x20000a50
    4ba8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4bac:	b09c      	sub	sp, #112	; 0x70
    4bae:	461f      	mov	r7, r3
    4bb0:	f002 fa64 	bl	707c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    4bb4:	4604      	mov	r4, r0
    4bb6:	460d      	mov	r5, r1
    4bb8:	f002 fd28 	bl	760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4bbc:	4606      	mov	r6, r0
    4bbe:	981e      	ldr	r0, [sp, #120]	; 0x78
    4bc0:	2801      	cmp	r0, #1
    4bc2:	bf18      	it	ne
    4bc4:	2802      	cmpne	r0, #2
    4bc6:	d005      	beq.n	4bd4 <MPSL_IRQ_RADIO_Handler+0x5ec>
    4bc8:	f640 1156 	movw	r1, #2390	; 0x956
    4bcc:	f04f 0070 	mov.w	r0, #112	; 0x70
    4bd0:	f003 f894 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bd4:	49fe      	ldr	r1, [pc, #1016]	; (4fd0 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    4bd6:	2001      	movs	r0, #1
    4bd8:	6008      	str	r0, [r1, #0]
    4bda:	49fe      	ldr	r1, [pc, #1016]	; (4fd4 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    4bdc:	6889      	ldr	r1, [r1, #8]
    4bde:	6008      	str	r0, [r1, #0]
    4be0:	2000      	movs	r0, #0
    4be2:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    4be6:	900c      	str	r0, [sp, #48]	; 0x30
    4be8:	1e40      	subs	r0, r0, #1
    4bea:	900d      	str	r0, [sp, #52]	; 0x34
    4bec:	48fa      	ldr	r0, [pc, #1000]	; (4fd8 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    4bee:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    4bf2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    4bf6:	f100 0108 	add.w	r1, r0, #8
    4bfa:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4bfe:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c02:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    4c06:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    4c0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    4c0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4c10:	f005 f906 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4c14:	4602      	mov	r2, r0
    4c16:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    4c1a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4c1e:	4bef      	ldr	r3, [pc, #956]	; (4fdc <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4c20:	4440      	add	r0, r8
    4c22:	1c41      	adds	r1, r0, #1
    4c24:	1850      	adds	r0, r2, r1
    4c26:	429a      	cmp	r2, r3
    4c28:	d856      	bhi.n	4cd8 <MPSL_IRQ_RADIO_Handler+0x6f0>
    4c2a:	4aed      	ldr	r2, [pc, #948]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4c2c:	4291      	cmp	r1, r2
    4c2e:	dc5b      	bgt.n	4ce8 <MPSL_IRQ_RADIO_Handler+0x700>
    4c30:	4252      	negs	r2, r2
    4c32:	4291      	cmp	r1, r2
    4c34:	db60      	blt.n	4cf8 <MPSL_IRQ_RADIO_Handler+0x710>
    4c36:	1c59      	adds	r1, r3, #1
    4c38:	4281      	cmp	r1, r0
    4c3a:	bfdc      	itt	le
    4c3c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4c40:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4c44:	dd05      	ble.n	4c52 <MPSL_IRQ_RADIO_Handler+0x66a>
    4c46:	2800      	cmp	r0, #0
    4c48:	bfbc      	itt	lt
    4c4a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4c4e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4c52:	9017      	str	r0, [sp, #92]	; 0x5c
    4c54:	48e3      	ldr	r0, [pc, #908]	; (4fe4 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    4c56:	f1b8 0f00 	cmp.w	r8, #0
    4c5a:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    4c5e:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    4c62:	bf14      	ite	ne
    4c64:	f04f 0a01 	movne.w	sl, #1
    4c68:	f04f 0a00 	moveq.w	sl, #0
    4c6c:	f002 ffce 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c70:	9019      	str	r0, [sp, #100]	; 0x64
    4c72:	f1ba 0f00 	cmp.w	sl, #0
    4c76:	d00b      	beq.n	4c90 <MPSL_IRQ_RADIO_Handler+0x6a8>
    4c78:	49db      	ldr	r1, [pc, #876]	; (4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4c7a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    4c7e:	ea6f 0200 	mvn.w	r2, r0
    4c82:	ea72 0001 	orns	r0, r2, r1
    4c86:	bf02      	ittt	eq
    4c88:	9819      	ldreq	r0, [sp, #100]	; 0x64
    4c8a:	2800      	cmpeq	r0, #0
    4c8c:	2701      	moveq	r7, #1
    4c8e:	d001      	beq.n	4c94 <MPSL_IRQ_RADIO_Handler+0x6ac>
    4c90:	f04f 0700 	mov.w	r7, #0
    4c94:	f002 fe92 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4c98:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4c9c:	bf08      	it	eq
    4c9e:	200d      	moveq	r0, #13
    4ca0:	d00b      	beq.n	4cba <MPSL_IRQ_RADIO_Handler+0x6d2>
    4ca2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4ca6:	3856      	subs	r0, #86	; 0x56
    4ca8:	bf08      	it	eq
    4caa:	201c      	moveq	r0, #28
    4cac:	d005      	beq.n	4cba <MPSL_IRQ_RADIO_Handler+0x6d2>
    4cae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4cb2:	389f      	subs	r0, #159	; 0x9f
    4cb4:	bf14      	ite	ne
    4cb6:	2000      	movne	r0, #0
    4cb8:	2032      	moveq	r0, #50	; 0x32
    4cba:	f04f 0900 	mov.w	r9, #0
    4cbe:	46cb      	mov	fp, r9
    4cc0:	9016      	str	r0, [sp, #88]	; 0x58
    4cc2:	4546      	cmp	r6, r8
    4cc4:	d936      	bls.n	4d34 <MPSL_IRQ_RADIO_Handler+0x74c>
    4cc6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4cc8:	43f3      	mvns	r3, r6
    4cca:	f8df c310 	ldr.w	ip, [pc, #784]	; 4fdc <MPSL_IRQ_RADIO_Handler+0x9f4>
    4cce:	18c8      	adds	r0, r1, r3
    4cd0:	46e9      	mov	r9, sp
    4cd2:	aa1a      	add	r2, sp, #104	; 0x68
    4cd4:	4561      	cmp	r1, ip
    4cd6:	d904      	bls.n	4ce2 <MPSL_IRQ_RADIO_Handler+0x6fa>
    4cd8:	f240 517f 	movw	r1, #1407	; 0x57f
    4cdc:	2070      	movs	r0, #112	; 0x70
    4cde:	f003 f80d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ce2:	49bf      	ldr	r1, [pc, #764]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4ce4:	428b      	cmp	r3, r1
    4ce6:	dd04      	ble.n	4cf2 <MPSL_IRQ_RADIO_Handler+0x70a>
    4ce8:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    4cec:	2070      	movs	r0, #112	; 0x70
    4cee:	f003 f805 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4cf2:	49be      	ldr	r1, [pc, #760]	; (4fec <MPSL_IRQ_RADIO_Handler+0xa04>)
    4cf4:	428b      	cmp	r3, r1
    4cf6:	da04      	bge.n	4d02 <MPSL_IRQ_RADIO_Handler+0x71a>
    4cf8:	f240 5181 	movw	r1, #1409	; 0x581
    4cfc:	2070      	movs	r0, #112	; 0x70
    4cfe:	f002 fffd 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d02:	49bb      	ldr	r1, [pc, #748]	; (4ff0 <MPSL_IRQ_RADIO_Handler+0xa08>)
    4d04:	4281      	cmp	r1, r0
    4d06:	bfdc      	itt	le
    4d08:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4d0c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4d10:	dd05      	ble.n	4d1e <MPSL_IRQ_RADIO_Handler+0x736>
    4d12:	2800      	cmp	r0, #0
    4d14:	bfbc      	itt	lt
    4d16:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4d1a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4d1e:	4649      	mov	r1, r9
    4d20:	f001 ff5c 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4d24:	9800      	ldr	r0, [sp, #0]
    4d26:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4d2c:	9000      	str	r0, [sp, #0]
    4d2e:	1a08      	subs	r0, r1, r0
    4d30:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    4d34:	2f00      	cmp	r7, #0
    4d36:	bf18      	it	ne
    4d38:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    4d3c:	d105      	bne.n	4d4a <MPSL_IRQ_RADIO_Handler+0x762>
    4d3e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4d42:	2800      	cmp	r0, #0
    4d44:	bf18      	it	ne
    4d46:	f04f 0b02 	movne.w	fp, #2
    4d4a:	43e0      	mvns	r0, r4
    4d4c:	ea70 0005 	orns	r0, r0, r5
    4d50:	d022      	beq.n	4d98 <MPSL_IRQ_RADIO_Handler+0x7b0>
    4d52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    4d56:	1a22      	subs	r2, r4, r0
    4d58:	eb75 0201 	sbcs.w	r2, r5, r1
    4d5c:	d20c      	bcs.n	4d78 <MPSL_IRQ_RADIO_Handler+0x790>
    4d5e:	1b02      	subs	r2, r0, r4
    4d60:	eb61 0105 	sbc.w	r1, r1, r5
    4d64:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4d68:	f171 0100 	sbcs.w	r1, r1, #0
    4d6c:	d311      	bcc.n	4d92 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4d6e:	f640 1195 	movw	r1, #2453	; 0x995
    4d72:	2070      	movs	r0, #112	; 0x70
    4d74:	f002 ffc2 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d78:	1a22      	subs	r2, r4, r0
    4d7a:	eb65 0101 	sbc.w	r1, r5, r1
    4d7e:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4d82:	f171 0100 	sbcs.w	r1, r1, #0
    4d86:	d304      	bcc.n	4d92 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4d88:	f640 1199 	movw	r1, #2457	; 0x999
    4d8c:	2070      	movs	r0, #112	; 0x70
    4d8e:	f002 ffb5 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d92:	1b00      	subs	r0, r0, r4
    4d94:	2801      	cmp	r0, #1
    4d96:	da03      	bge.n	4da0 <MPSL_IRQ_RADIO_Handler+0x7b8>
    4d98:	981c      	ldr	r0, [sp, #112]	; 0x70
    4d9a:	901a      	str	r0, [sp, #104]	; 0x68
    4d9c:	2003      	movs	r0, #3
    4d9e:	e00d      	b.n	4dbc <MPSL_IRQ_RADIO_Handler+0x7d4>
    4da0:	b157      	cbz	r7, 4db8 <MPSL_IRQ_RADIO_Handler+0x7d0>
    4da2:	4891      	ldr	r0, [pc, #580]	; (4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4da4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    4da8:	b130      	cbz	r0, 4db8 <MPSL_IRQ_RADIO_Handler+0x7d0>
    4daa:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4dae:	f110 0b00 	adds.w	fp, r0, #0
    4db2:	bf18      	it	ne
    4db4:	f04f 0b02 	movne.w	fp, #2
    4db8:	2000      	movs	r0, #0
    4dba:	941a      	str	r4, [sp, #104]	; 0x68
    4dbc:	4483      	add	fp, r0
    4dbe:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4dc2:	ebb0 0009 	subs.w	r0, r0, r9
    4dc6:	f162 0100 	sbc.w	r1, r2, #0
    4dca:	1e42      	subs	r2, r0, #1
    4dcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4dce:	f141 3eff 	adc.w	lr, r1, #4294967295
    4dd2:	1ad3      	subs	r3, r2, r3
    4dd4:	455b      	cmp	r3, fp
    4dd6:	db08      	blt.n	4dea <MPSL_IRQ_RADIO_Handler+0x802>
    4dd8:	f1b9 0f00 	cmp.w	r9, #0
    4ddc:	d032      	beq.n	4e44 <MPSL_IRQ_RADIO_Handler+0x85c>
    4dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4de0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    4de4:	444b      	add	r3, r9
    4de6:	9310      	str	r3, [sp, #64]	; 0x40
    4de8:	e02c      	b.n	4e44 <MPSL_IRQ_RADIO_Handler+0x85c>
    4dea:	f1b9 0f00 	cmp.w	r9, #0
    4dee:	d005      	beq.n	4dfc <MPSL_IRQ_RADIO_Handler+0x814>
    4df0:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    4df4:	b920      	cbnz	r0, 4e00 <MPSL_IRQ_RADIO_Handler+0x818>
    4df6:	f002 fbff 	bl	75f8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    4dfa:	b108      	cbz	r0, 4e00 <MPSL_IRQ_RADIO_Handler+0x818>
    4dfc:	b9af      	cbnz	r7, 4e2a <MPSL_IRQ_RADIO_Handler+0x842>
    4dfe:	e00c      	b.n	4e1a <MPSL_IRQ_RADIO_Handler+0x832>
    4e00:	b92f      	cbnz	r7, 4e0e <MPSL_IRQ_RADIO_Handler+0x826>
    4e02:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e06:	2800      	cmp	r0, #0
    4e08:	bf18      	it	ne
    4e0a:	f1ab 0b02 	subne.w	fp, fp, #2
    4e0e:	f04f 0900 	mov.w	r9, #0
    4e12:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    4e16:	464e      	mov	r6, r9
    4e18:	e007      	b.n	4e2a <MPSL_IRQ_RADIO_Handler+0x842>
    4e1a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e1e:	b120      	cbz	r0, 4e2a <MPSL_IRQ_RADIO_Handler+0x842>
    4e20:	2000      	movs	r0, #0
    4e22:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    4e26:	f1ab 0b02 	sub.w	fp, fp, #2
    4e2a:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4e2e:	ebb0 0009 	subs.w	r0, r0, r9
    4e32:	f162 0100 	sbc.w	r1, r2, #0
    4e36:	1e42      	subs	r2, r0, #1
    4e38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4e3a:	f141 3eff 	adc.w	lr, r1, #4294967295
    4e3e:	1ad3      	subs	r3, r2, r3
    4e40:	455b      	cmp	r3, fp
    4e42:	db7d      	blt.n	4f40 <MPSL_IRQ_RADIO_Handler+0x958>
    4e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4e46:	b99b      	cbnz	r3, 4e70 <MPSL_IRQ_RADIO_Handler+0x888>
    4e48:	4b67      	ldr	r3, [pc, #412]	; (4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4e4a:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    4e4e:	ea6f 090c 	mvn.w	r9, ip
    4e52:	ea79 0903 	orns	r9, r9, r3
    4e56:	d00b      	beq.n	4e70 <MPSL_IRQ_RADIO_Handler+0x888>
    4e58:	ebb0 0c0c 	subs.w	ip, r0, ip
    4e5c:	9816      	ldr	r0, [sp, #88]	; 0x58
    4e5e:	eb61 0303 	sbc.w	r3, r1, r3
    4e62:	ebbc 0000 	subs.w	r0, ip, r0
    4e66:	f173 0000 	sbcs.w	r0, r3, #0
    4e6a:	bf38      	it	cc
    4e6c:	2000      	movcc	r0, #0
    4e6e:	d300      	bcc.n	4e72 <MPSL_IRQ_RADIO_Handler+0x88a>
    4e70:	2001      	movs	r0, #1
    4e72:	ea3a 0000 	bics.w	r0, sl, r0
    4e76:	d163      	bne.n	4f40 <MPSL_IRQ_RADIO_Handler+0x958>
    4e78:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    4e7c:	e9cd 0107 	strd	r0, r1, [sp, #28]
    4e80:	981e      	ldr	r0, [sp, #120]	; 0x78
    4e82:	4691      	mov	r9, r2
    4e84:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    4e88:	46f3      	mov	fp, lr
    4e8a:	2700      	movs	r7, #0
    4e8c:	f002 fd96 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4e90:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4e94:	bf08      	it	eq
    4e96:	200d      	moveq	r0, #13
    4e98:	d00b      	beq.n	4eb2 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4e9a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4e9e:	3856      	subs	r0, #86	; 0x56
    4ea0:	bf08      	it	eq
    4ea2:	201c      	moveq	r0, #28
    4ea4:	d005      	beq.n	4eb2 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4ea6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4eaa:	389f      	subs	r0, #159	; 0x9f
    4eac:	bf14      	ite	ne
    4eae:	4638      	movne	r0, r7
    4eb0:	2032      	moveq	r0, #50	; 0x32
    4eb2:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    4eb6:	300b      	adds	r0, #11
    4eb8:	ebb9 0202 	subs.w	r2, r9, r2
    4ebc:	eb6b 0303 	sbc.w	r3, fp, r3
    4ec0:	1a10      	subs	r0, r2, r0
    4ec2:	f173 0000 	sbcs.w	r0, r3, #0
    4ec6:	d22a      	bcs.n	4f1e <MPSL_IRQ_RADIO_Handler+0x936>
    4ec8:	9819      	ldr	r0, [sp, #100]	; 0x64
    4eca:	2801      	cmp	r0, #1
    4ecc:	d002      	beq.n	4ed4 <MPSL_IRQ_RADIO_Handler+0x8ec>
    4ece:	9818      	ldr	r0, [sp, #96]	; 0x60
    4ed0:	b148      	cbz	r0, 4ee6 <MPSL_IRQ_RADIO_Handler+0x8fe>
    4ed2:	e017      	b.n	4f04 <MPSL_IRQ_RADIO_Handler+0x91c>
    4ed4:	43e0      	mvns	r0, r4
    4ed6:	ea70 0005 	orns	r0, r0, r5
    4eda:	d127      	bne.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4edc:	f640 01d7 	movw	r1, #2263	; 0x8d7
    4ee0:	2070      	movs	r0, #112	; 0x70
    4ee2:	f002 ff0b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ee6:	43e0      	mvns	r0, r4
    4ee8:	ea70 0005 	orns	r0, r0, r5
    4eec:	d00a      	beq.n	4f04 <MPSL_IRQ_RADIO_Handler+0x91c>
    4eee:	d01d      	beq.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4ef0:	ebb4 0009 	subs.w	r0, r4, r9
    4ef4:	eb65 010b 	sbc.w	r1, r5, fp
    4ef8:	2300      	movs	r3, #0
    4efa:	f1d0 0204 	rsbs	r2, r0, #4
    4efe:	eb73 0201 	sbcs.w	r2, r3, r1
    4f02:	da06      	bge.n	4f12 <MPSL_IRQ_RADIO_Handler+0x92a>
    4f04:	464c      	mov	r4, r9
    4f06:	465d      	mov	r5, fp
    4f08:	4620      	mov	r0, r4
    4f0a:	4629      	mov	r1, r5
    4f0c:	f001 ff96 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4f10:	e00c      	b.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4f12:	2200      	movs	r2, #0
    4f14:	1a10      	subs	r0, r2, r0
    4f16:	eb72 0001 	sbcs.w	r0, r2, r1
    4f1a:	db11      	blt.n	4f40 <MPSL_IRQ_RADIO_Handler+0x958>
    4f1c:	e006      	b.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4f1e:	464c      	mov	r4, r9
    4f20:	465d      	mov	r5, fp
    4f22:	4620      	mov	r0, r4
    4f24:	4629      	mov	r1, r5
    4f26:	f001 ff89 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4f2a:	4657      	mov	r7, sl
    4f2c:	43e1      	mvns	r1, r4
    4f2e:	ea71 0005 	orns	r0, r1, r5
    4f32:	d071      	beq.n	5018 <MPSL_IRQ_RADIO_Handler+0xa30>
    4f34:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4f38:	f04f 0b00 	mov.w	fp, #0
    4f3c:	990e      	ldr	r1, [sp, #56]	; 0x38
    4f3e:	e000      	b.n	4f42 <MPSL_IRQ_RADIO_Handler+0x95a>
    4f40:	e06f      	b.n	5022 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f42:	1a0b      	subs	r3, r1, r0
    4f44:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    4f48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4f4c:	eb11 010c 	adds.w	r1, r1, ip
    4f50:	1a08      	subs	r0, r1, r0
    4f52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4f56:	2b01      	cmp	r3, #1
    4f58:	d363      	bcc.n	5022 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4f5e:	bf98      	it	ls
    4f60:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    4f64:	d85d      	bhi.n	5022 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f66:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4f6a:	f004 ff59 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4f6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4f70:	4a1b      	ldr	r2, [pc, #108]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4f72:	1a0d      	subs	r5, r1, r0
    4f74:	1aaa      	subs	r2, r5, r2
    4f76:	f17b 0200 	sbcs.w	r2, fp, #0
    4f7a:	d316      	bcc.n	4faa <MPSL_IRQ_RADIO_Handler+0x9c2>
    4f7c:	4b18      	ldr	r3, [pc, #96]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4f7e:	1a42      	subs	r2, r0, r1
    4f80:	1ad3      	subs	r3, r2, r3
    4f82:	f17b 0300 	sbcs.w	r3, fp, #0
    4f86:	d310      	bcc.n	4faa <MPSL_IRQ_RADIO_Handler+0x9c2>
    4f88:	4b14      	ldr	r3, [pc, #80]	; (4fdc <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4f8a:	42ab      	cmp	r3, r5
    4f8c:	bf3e      	ittt	cc
    4f8e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    4f92:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    4f96:	1845      	addcc	r5, r0, r1
    4f98:	d307      	bcc.n	4faa <MPSL_IRQ_RADIO_Handler+0x9c2>
    4f9a:	4293      	cmp	r3, r2
    4f9c:	d245      	bcs.n	502a <MPSL_IRQ_RADIO_Handler+0xa42>
    4f9e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    4fa2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    4fa6:	4408      	add	r0, r1
    4fa8:	4245      	negs	r5, r0
    4faa:	f8df 903c 	ldr.w	r9, [pc, #60]	; 4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>
    4fae:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    4fb2:	b378      	cbz	r0, 5014 <MPSL_IRQ_RADIO_Handler+0xa2c>
    4fb4:	981e      	ldr	r0, [sp, #120]	; 0x78
    4fb6:	2801      	cmp	r0, #1
    4fb8:	d005      	beq.n	4fc6 <MPSL_IRQ_RADIO_Handler+0x9de>
    4fba:	2002      	movs	r0, #2
    4fbc:	f002 f9ca 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4fc0:	2001      	movs	r0, #1
    4fc2:	f002 f9c7 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4fc6:	45b0      	cmp	r8, r6
    4fc8:	d240      	bcs.n	504c <MPSL_IRQ_RADIO_Handler+0xa64>
    4fca:	eba5 0106 	sub.w	r1, r5, r6
    4fce:	e011      	b.n	4ff4 <MPSL_IRQ_RADIO_Handler+0xa0c>
    4fd0:	40000508 	.word	0x40000508
    4fd4:	20000120 	.word	0x20000120
    4fd8:	20000650 	.word	0x20000650
    4fdc:	1e847fff 	.word	0x1e847fff
    4fe0:	0f424000 	.word	0x0f424000
    4fe4:	20000a50 	.word	0x20000a50
    4fe8:	20000ad0 	.word	0x20000ad0
    4fec:	f0bdc000 	.word	0xf0bdc000
    4ff0:	1e848000 	.word	0x1e848000
    4ff4:	f04f 0002 	mov.w	r0, #2
    4ff8:	f002 f8f2 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4ffc:	b398      	cbz	r0, 5066 <MPSL_IRQ_RADIO_Handler+0xa7e>
    4ffe:	f1b8 0f00 	cmp.w	r8, #0
    5002:	bf1c      	itt	ne
    5004:	eba5 0108 	subne.w	r1, r5, r8
    5008:	2001      	movne	r0, #1
    500a:	d035      	beq.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    500c:	f002 f8e8 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5010:	b348      	cbz	r0, 5066 <MPSL_IRQ_RADIO_Handler+0xa7e>
    5012:	e031      	b.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    5014:	e00e      	b.n	5034 <MPSL_IRQ_RADIO_Handler+0xa4c>
    5016:	e7ff      	b.n	5018 <MPSL_IRQ_RADIO_Handler+0xa30>
    5018:	f640 2103 	movw	r1, #2563	; 0xa03
    501c:	2070      	movs	r0, #112	; 0x70
    501e:	f002 fe6d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5022:	b020      	add	sp, #128	; 0x80
    5024:	2000      	movs	r0, #0
    5026:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    502a:	f640 21d7 	movw	r1, #2775	; 0xad7
    502e:	2070      	movs	r0, #112	; 0x70
    5030:	f002 fe64 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5034:	45b0      	cmp	r8, r6
    5036:	bf34      	ite	cc
    5038:	4630      	movcc	r0, r6
    503a:	4640      	movcs	r0, r8
    503c:	301e      	adds	r0, #30
    503e:	42a8      	cmp	r0, r5
    5040:	dbb8      	blt.n	4fb4 <MPSL_IRQ_RADIO_Handler+0x9cc>
    5042:	f640 2117 	movw	r1, #2583	; 0xa17
    5046:	2070      	movs	r0, #112	; 0x70
    5048:	f002 fe58 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    504c:	d90c      	bls.n	5068 <MPSL_IRQ_RADIO_Handler+0xa80>
    504e:	eba5 0108 	sub.w	r1, r5, r8
    5052:	2001      	movs	r0, #1
    5054:	f002 f8c4 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5058:	b128      	cbz	r0, 5066 <MPSL_IRQ_RADIO_Handler+0xa7e>
    505a:	2e00      	cmp	r6, #0
    505c:	bf1c      	itt	ne
    505e:	1ba9      	subne	r1, r5, r6
    5060:	2002      	movne	r0, #2
    5062:	d009      	beq.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    5064:	e7d2      	b.n	500c <MPSL_IRQ_RADIO_Handler+0xa24>
    5066:	e034      	b.n	50d2 <MPSL_IRQ_RADIO_Handler+0xaea>
    5068:	ea56 0008 	orrs.w	r0, r6, r8
    506c:	d004      	beq.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    506e:	f640 113a 	movw	r1, #2362	; 0x93a
    5072:	2070      	movs	r0, #112	; 0x70
    5074:	f002 fe42 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5078:	4629      	mov	r1, r5
    507a:	2000      	movs	r0, #0
    507c:	f002 f8b0 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5080:	b338      	cbz	r0, 50d2 <MPSL_IRQ_RADIO_Handler+0xaea>
    5082:	2601      	movs	r6, #1
    5084:	f1ba 0f00 	cmp.w	sl, #0
    5088:	bf04      	itt	eq
    508a:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    508e:	2800      	cmpeq	r0, #0
    5090:	d000      	beq.n	5094 <MPSL_IRQ_RADIO_Handler+0xaac>
    5092:	b347      	cbz	r7, 50e6 <MPSL_IRQ_RADIO_Handler+0xafe>
    5094:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    5098:	ea6f 0101 	mvn.w	r1, r1
    509c:	ea71 0000 	orns	r0, r1, r0
    50a0:	d006      	beq.n	50b0 <MPSL_IRQ_RADIO_Handler+0xac8>
    50a2:	f002 fc91 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    50a6:	f04f 30ff 	mov.w	r0, #4294967295
    50aa:	4601      	mov	r1, r0
    50ac:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    50b0:	b1ff      	cbz	r7, 50f2 <MPSL_IRQ_RADIO_Handler+0xb0a>
    50b2:	9816      	ldr	r0, [sp, #88]	; 0x58
    50b4:	1a20      	subs	r0, r4, r0
    50b6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    50ba:	f04f 0005 	mov.w	r0, #5
    50be:	f002 f88f 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    50c2:	b370      	cbz	r0, 5122 <MPSL_IRQ_RADIO_Handler+0xb3a>
    50c4:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    50c8:	2800      	cmp	r0, #0
    50ca:	bf08      	it	eq
    50cc:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    50d0:	e017      	b.n	5102 <MPSL_IRQ_RADIO_Handler+0xb1a>
    50d2:	2002      	movs	r0, #2
    50d4:	f002 f93e 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50d8:	2001      	movs	r0, #1
    50da:	f002 f93b 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50de:	b020      	add	sp, #128	; 0x80
    50e0:	2000      	movs	r0, #0
    50e2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    50e6:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    50ea:	43c0      	mvns	r0, r0
    50ec:	ea70 0001 	orns	r0, r0, r1
    50f0:	d012      	beq.n	5118 <MPSL_IRQ_RADIO_Handler+0xb30>
    50f2:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    50f6:	b120      	cbz	r0, 5102 <MPSL_IRQ_RADIO_Handler+0xb1a>
    50f8:	2005      	movs	r0, #5
    50fa:	f002 f92b 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50fe:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    5102:	eba5 0008 	sub.w	r0, r5, r8
    5106:	f1a0 0119 	sub.w	r1, r0, #25
    510a:	2900      	cmp	r1, #0
    510c:	dc0f      	bgt.n	512e <MPSL_IRQ_RADIO_Handler+0xb46>
    510e:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    5112:	2070      	movs	r0, #112	; 0x70
    5114:	f002 fdf2 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5118:	f002 fc72 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    511c:	f002 f83e 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5120:	e7c4      	b.n	50ac <MPSL_IRQ_RADIO_Handler+0xac4>
    5122:	e7ff      	b.n	5124 <MPSL_IRQ_RADIO_Handler+0xb3c>
    5124:	f240 21e6 	movw	r1, #742	; 0x2e6
    5128:	2070      	movs	r0, #112	; 0x70
    512a:	f002 fde7 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    512e:	2003      	movs	r0, #3
    5130:	f002 f856 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5134:	b338      	cbz	r0, 5186 <MPSL_IRQ_RADIO_Handler+0xb9e>
    5136:	4816      	ldr	r0, [pc, #88]	; (5190 <MPSL_IRQ_RADIO_Handler+0xba8>)
    5138:	6880      	ldr	r0, [r0, #8]
    513a:	f8c0 b000 	str.w	fp, [r0]
    513e:	4815      	ldr	r0, [pc, #84]	; (5194 <MPSL_IRQ_RADIO_Handler+0xbac>)
    5140:	f8c0 b000 	str.w	fp, [r0]
    5144:	ac0c      	add	r4, sp, #48	; 0x30
    5146:	4814      	ldr	r0, [pc, #80]	; (5198 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    5148:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    514c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    5150:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    5154:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    5158:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    515c:	ac10      	add	r4, sp, #64	; 0x40
    515e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    5162:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    5166:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    516a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    516e:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    5172:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    5176:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    517a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    517e:	b020      	add	sp, #128	; 0x80
    5180:	2001      	movs	r0, #1
    5182:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5186:	f640 2148 	movw	r1, #2632	; 0xa48
    518a:	2070      	movs	r0, #112	; 0x70
    518c:	f002 fdb6 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5190:	20000120 	.word	0x20000120
    5194:	40000508 	.word	0x40000508
    5198:	20000a50 	.word	0x20000a50
    519c:	b570      	push	{r4, r5, r6, lr}
    519e:	4d1d      	ldr	r5, [pc, #116]	; (5214 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    51a0:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    51a4:	2820      	cmp	r0, #32
    51a6:	bf18      	it	ne
    51a8:	bd70      	popne	{r4, r5, r6, pc}
    51aa:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    51ae:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    51b2:	4428      	add	r0, r5
    51b4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    51b8:	2c20      	cmp	r4, #32
    51ba:	d026      	beq.n	520a <MPSL_IRQ_RADIO_Handler+0xc22>
    51bc:	4b16      	ldr	r3, [pc, #88]	; (5218 <MPSL_IRQ_RADIO_Handler+0xc30>)
    51be:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    51c2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    51c6:	7849      	ldrb	r1, [r1, #1]
    51c8:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    51cc:	20ff      	movs	r0, #255	; 0xff
    51ce:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    51d2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    51d6:	4621      	mov	r1, r4
    51d8:	2002      	movs	r0, #2
    51da:	f000 f88b 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    51de:	2000      	movs	r0, #0
    51e0:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    51e4:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    51e8:	480c      	ldr	r0, [pc, #48]	; (521c <MPSL_IRQ_RADIO_Handler+0xc34>)
    51ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    51ee:	7e00      	ldrb	r0, [r0, #24]
    51f0:	2800      	cmp	r0, #0
    51f2:	bf08      	it	eq
    51f4:	f002 feea 	bleq	7fcc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    51f8:	2000      	movs	r0, #0
    51fa:	4909      	ldr	r1, [pc, #36]	; (5220 <MPSL_IRQ_RADIO_Handler+0xc38>)
    51fc:	6849      	ldr	r1, [r1, #4]
    51fe:	2900      	cmp	r1, #0
    5200:	bf08      	it	eq
    5202:	bd70      	popeq	{r4, r5, r6, pc}
    5204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5208:	4708      	bx	r1
    520a:	f240 311d 	movw	r1, #797	; 0x31d
    520e:	2070      	movs	r0, #112	; 0x70
    5210:	f002 fd74 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5214:	20000ad0 	.word	0x20000ad0
    5218:	20000a50 	.word	0x20000a50
    521c:	20000650 	.word	0x20000650
    5220:	20000120 	.word	0x20000120
    5224:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5228:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 52e4 <MPSL_IRQ_RADIO_Handler+0xcfc>
    522c:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    5230:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    5234:	4440      	add	r0, r8
    5236:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    523a:	2c20      	cmp	r4, #32
    523c:	bf08      	it	eq
    523e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5242:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 52e8 <MPSL_IRQ_RADIO_Handler+0xd00>
    5246:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 52ec <MPSL_IRQ_RADIO_Handler+0xd04>
    524a:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    524e:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    5252:	2607      	movs	r6, #7
    5254:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    5258:	2801      	cmp	r0, #1
    525a:	d00e      	beq.n	527a <MPSL_IRQ_RADIO_Handler+0xc92>
    525c:	2804      	cmp	r0, #4
    525e:	bf08      	it	eq
    5260:	2602      	moveq	r6, #2
    5262:	d00a      	beq.n	527a <MPSL_IRQ_RADIO_Handler+0xc92>
    5264:	2805      	cmp	r0, #5
    5266:	bf0c      	ite	eq
    5268:	2603      	moveq	r6, #3
    526a:	2806      	cmpne	r0, #6
    526c:	d005      	beq.n	527a <MPSL_IRQ_RADIO_Handler+0xc92>
    526e:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    5272:	f04f 0070 	mov.w	r0, #112	; 0x70
    5276:	f002 fd41 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    527a:	f1bb 0f00 	cmp.w	fp, #0
    527e:	bf18      	it	ne
    5280:	f3af 8000 	nopne.w
    5284:	f3ef 8010 	mrs	r0, PRIMASK
    5288:	b672      	cpsid	i
    528a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    528e:	784a      	ldrb	r2, [r1, #1]
    5290:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    5294:	4441      	add	r1, r8
    5296:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    529a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    529e:	42a2      	cmp	r2, r4
    52a0:	bf04      	itt	eq
    52a2:	2220      	moveq	r2, #32
    52a4:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    52a8:	b1a8      	cbz	r0, 52d6 <MPSL_IRQ_RADIO_Handler+0xcee>
    52aa:	462a      	mov	r2, r5
    52ac:	4621      	mov	r1, r4
    52ae:	2001      	movs	r0, #1
    52b0:	f000 f820 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    52b4:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    52b8:	e9d1 2000 	ldrd	r2, r0, [r1]
    52bc:	4631      	mov	r1, r6
    52be:	4790      	blx	r2
    52c0:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    52c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    52c8:	4440      	add	r0, r8
    52ca:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    52ce:	2c20      	cmp	r4, #32
    52d0:	d1bd      	bne.n	524e <MPSL_IRQ_RADIO_Handler+0xc66>
    52d2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    52d6:	4806      	ldr	r0, [pc, #24]	; (52f0 <MPSL_IRQ_RADIO_Handler+0xd08>)
    52d8:	2800      	cmp	r0, #0
    52da:	bf18      	it	ne
    52dc:	f3af 8000 	nopne.w
    52e0:	b662      	cpsie	i
    52e2:	e7e2      	b.n	52aa <MPSL_IRQ_RADIO_Handler+0xcc2>
    52e4:	20000ad0 	.word	0x20000ad0
    52e8:	00000000 	.word	0x00000000
    52ec:	20000a50 	.word	0x20000a50
    52f0:	00000000 	.word	0x00000000
    52f4:	f8df c058 	ldr.w	ip, [pc, #88]	; 5350 <MPSL_IRQ_RADIO_Handler+0xd68>
    52f8:	b510      	push	{r4, lr}
    52fa:	2300      	movs	r3, #0
    52fc:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    5300:	2807      	cmp	r0, #7
    5302:	d21f      	bcs.n	5344 <MPSL_IRQ_RADIO_Handler+0xd5c>
    5304:	e8df f000 	tbb	[pc, r0]
    5308:	05050505 	.word	0x05050505
    530c:	00040404 	.word	0x00040404
    5310:	2301      	movs	r3, #1
    5312:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    5316:	2b00      	cmp	r3, #0
    5318:	bf08      	it	eq
    531a:	bd10      	popeq	{r4, pc}
    531c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5320:	480c      	ldr	r0, [pc, #48]	; (5354 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    5322:	4402      	add	r2, r0
    5324:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    5328:	2820      	cmp	r0, #32
    532a:	bf0e      	itee	eq
    532c:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    5330:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    5334:	7041      	strbne	r1, [r0, #1]
    5336:	2020      	movs	r0, #32
    5338:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    533c:	7058      	strb	r0, [r3, #1]
    533e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    5342:	bd10      	pop	{r4, pc}
    5344:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5348:	2070      	movs	r0, #112	; 0x70
    534a:	f002 fcd7 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    534e:	0000      	.short	0x0000
    5350:	20000a50 	.word	0x20000a50
    5354:	20000ad0 	.word	0x20000ad0
    5358:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    535c:	460f      	mov	r7, r1
    535e:	4680      	mov	r8, r0
    5360:	f8df b154 	ldr.w	fp, [pc, #340]	; 54b8 <MPSL_IRQ_RADIO_Handler+0xed0>
    5364:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    5368:	4458      	add	r0, fp
    536a:	f1b8 0f01 	cmp.w	r8, #1
    536e:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5372:	4625      	mov	r5, r4
    5374:	bf18      	it	ne
    5376:	f1b8 0f02 	cmpne.w	r8, #2
    537a:	d005      	beq.n	5388 <MPSL_IRQ_RADIO_Handler+0xda0>
    537c:	f640 217e 	movw	r1, #2686	; 0xa7e
    5380:	f04f 0070 	mov.w	r0, #112	; 0x70
    5384:	f002 fcba 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5388:	2d20      	cmp	r5, #32
    538a:	d041      	beq.n	5410 <MPSL_IRQ_RADIO_Handler+0xe28>
    538c:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    5390:	2600      	movs	r6, #0
    5392:	2800      	cmp	r0, #0
    5394:	bf08      	it	eq
    5396:	2602      	moveq	r6, #2
    5398:	f001 fd4a 	bl	6e30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    539c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 54bc <MPSL_IRQ_RADIO_Handler+0xed4>
    53a0:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    53a4:	6899      	ldr	r1, [r3, #8]
    53a6:	691b      	ldr	r3, [r3, #16]
    53a8:	1a0a      	subs	r2, r1, r0
    53aa:	18c9      	adds	r1, r1, r3
    53ac:	1a09      	subs	r1, r1, r0
    53ae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    53b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    53b6:	4296      	cmp	r6, r2
    53b8:	bf99      	ittee	ls
    53ba:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    53be:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    53c2:	4a3f      	ldrhi	r2, [pc, #252]	; (54c0 <MPSL_IRQ_RADIO_Handler+0xed8>)
    53c4:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    53c8:	d920      	bls.n	540c <MPSL_IRQ_RADIO_Handler+0xe24>
    53ca:	4622      	mov	r2, r4
    53cc:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    53d0:	784c      	ldrb	r4, [r1, #1]
    53d2:	2c20      	cmp	r4, #32
    53d4:	d012      	beq.n	53fc <MPSL_IRQ_RADIO_Handler+0xe14>
    53d6:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    53da:	6899      	ldr	r1, [r3, #8]
    53dc:	691b      	ldr	r3, [r3, #16]
    53de:	ebb1 0c00 	subs.w	ip, r1, r0
    53e2:	18c9      	adds	r1, r1, r3
    53e4:	1a09      	subs	r1, r1, r0
    53e6:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    53ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    53ee:	4566      	cmp	r6, ip
    53f0:	bf9c      	itt	ls
    53f2:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    53f6:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    53fa:	d8e6      	bhi.n	53ca <MPSL_IRQ_RADIO_Handler+0xde2>
    53fc:	2a20      	cmp	r2, #32
    53fe:	d005      	beq.n	540c <MPSL_IRQ_RADIO_Handler+0xe24>
    5400:	463b      	mov	r3, r7
    5402:	2120      	movs	r1, #32
    5404:	2004      	movs	r0, #4
    5406:	f7ff f90d 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    540a:	4604      	mov	r4, r0
    540c:	42ac      	cmp	r4, r5
    540e:	d113      	bne.n	5438 <MPSL_IRQ_RADIO_Handler+0xe50>
    5410:	482c      	ldr	r0, [pc, #176]	; (54c4 <MPSL_IRQ_RADIO_Handler+0xedc>)
    5412:	2800      	cmp	r0, #0
    5414:	bf18      	it	ne
    5416:	f3af 8000 	nopne.w
    541a:	f001 febf 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    541e:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    5422:	2a20      	cmp	r2, #32
    5424:	d00b      	beq.n	543e <MPSL_IRQ_RADIO_Handler+0xe56>
    5426:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    542a:	1c84      	adds	r4, r0, #2
    542c:	f141 0c00 	adc.w	ip, r1, #0
    5430:	1b1b      	subs	r3, r3, r4
    5432:	eb72 020c 	sbcs.w	r2, r2, ip
    5436:	d202      	bcs.n	543e <MPSL_IRQ_RADIO_Handler+0xe56>
    5438:	2000      	movs	r0, #0
    543a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    543e:	2d20      	cmp	r5, #32
    5440:	d013      	beq.n	546a <MPSL_IRQ_RADIO_Handler+0xe82>
    5442:	462b      	mov	r3, r5
    5444:	4642      	mov	r2, r8
    5446:	f7ff fbaf 	bl	4ba8 <MPSL_IRQ_RADIO_Handler+0x5c0>
    544a:	2800      	cmp	r0, #0
    544c:	bf1e      	ittt	ne
    544e:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    5452:	2002      	movne	r0, #2
    5454:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5458:	463b      	mov	r3, r7
    545a:	462a      	mov	r2, r5
    545c:	2120      	movs	r1, #32
    545e:	2004      	movs	r0, #4
    5460:	f7ff f8e0 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    5464:	2000      	movs	r0, #0
    5466:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    546a:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    546e:	43c0      	mvns	r0, r0
    5470:	ea70 0001 	orns	r0, r0, r1
    5474:	d005      	beq.n	5482 <MPSL_IRQ_RADIO_Handler+0xe9a>
    5476:	f002 faa7 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    547a:	f04f 30ff 	mov.w	r0, #4294967295
    547e:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    5482:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    5486:	b128      	cbz	r0, 5494 <MPSL_IRQ_RADIO_Handler+0xeac>
    5488:	2005      	movs	r0, #5
    548a:	f001 ff63 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    548e:	2000      	movs	r0, #0
    5490:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    5494:	2004      	movs	r0, #4
    5496:	f001 ff5d 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    549a:	f001 ffc3 	bl	7424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    549e:	490a      	ldr	r1, [pc, #40]	; (54c8 <MPSL_IRQ_RADIO_Handler+0xee0>)
    54a0:	2020      	movs	r0, #32
    54a2:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    54a6:	6889      	ldr	r1, [r1, #8]
    54a8:	2000      	movs	r0, #0
    54aa:	6008      	str	r0, [r1, #0]
    54ac:	4907      	ldr	r1, [pc, #28]	; (54cc <MPSL_IRQ_RADIO_Handler+0xee4>)
    54ae:	6008      	str	r0, [r1, #0]
    54b0:	2001      	movs	r0, #1
    54b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    54b6:	0000      	.short	0x0000
    54b8:	20000ad0 	.word	0x20000ad0
    54bc:	20000650 	.word	0x20000650
    54c0:	20000a50 	.word	0x20000a50
    54c4:	00000000 	.word	0x00000000
    54c8:	20000120 	.word	0x20000120
    54cc:	40000508 	.word	0x40000508

000054d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    54d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d4:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 569c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    54d8:	4606      	mov	r6, r0
    54da:	b08f      	sub	sp, #60	; 0x3c
    54dc:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    54e0:	468a      	mov	sl, r1
    54e2:	2820      	cmp	r0, #32
    54e4:	d061      	beq.n	55aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    54e6:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    54ea:	f10b 0408 	add.w	r4, fp, #8
    54ee:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    54f2:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    54f6:	2120      	movs	r1, #32
    54f8:	f88d 1018 	strb.w	r1, [sp, #24]
    54fc:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    5500:	f8db 2008 	ldr.w	r2, [fp, #8]
    5504:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5508:	4459      	add	r1, fp
    550a:	2700      	movs	r7, #0
    550c:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    5510:	f8db 1010 	ldr.w	r1, [fp, #16]
    5514:	1851      	adds	r1, r2, r1
    5516:	910a      	str	r1, [sp, #40]	; 0x28
    5518:	f8db 0000 	ldr.w	r0, [fp]
    551c:	aa09      	add	r2, sp, #36	; 0x24
    551e:	4430      	add	r0, r6
    5520:	a907      	add	r1, sp, #28
    5522:	f001 fb5b 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5526:	f8d9 0010 	ldr.w	r0, [r9, #16]
    552a:	9907      	ldr	r1, [sp, #28]
    552c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    5530:	1840      	adds	r0, r0, r1
    5532:	1810      	adds	r0, r2, r0
    5534:	2e67      	cmp	r6, #103	; 0x67
    5536:	d33d      	bcc.n	55b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5538:	4959      	ldr	r1, [pc, #356]	; (56a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    553a:	2200      	movs	r2, #0
    553c:	1b89      	subs	r1, r1, r6
    553e:	eb72 0107 	sbcs.w	r1, r2, r7
    5542:	d337      	bcc.n	55b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5544:	6821      	ldr	r1, [r4, #0]
    5546:	4694      	mov	ip, r2
    5548:	1a40      	subs	r0, r0, r1
    554a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    554e:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    5552:	eb7c 010c 	sbcs.w	r1, ip, ip
    5556:	d32d      	bcc.n	55b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5558:	60a0      	str	r0, [r4, #8]
    555a:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    555e:	f884 a010 	strb.w	sl, [r4, #16]
    5562:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    5566:	f10d 0b18 	add.w	fp, sp, #24
    556a:	2d20      	cmp	r5, #32
    556c:	d055      	beq.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    556e:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    5572:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    5576:	9001      	str	r0, [sp, #4]
    5578:	484a      	ldr	r0, [pc, #296]	; (56a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    557a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    557e:	f8d4 a000 	ldr.w	sl, [r4]
    5582:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    5586:	f108 0008 	add.w	r0, r8, #8
    558a:	eb1a 0201 	adds.w	r2, sl, r1
    558e:	eb43 0107 	adc.w	r1, r3, r7
    5592:	e9d0 9300 	ldrd	r9, r3, [r0]
    5596:	ebb9 0202 	subs.w	r2, r9, r2
    559a:	eb73 0101 	sbcs.w	r1, r3, r1
    559e:	d325      	bcc.n	55ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    55a0:	89c0      	ldrh	r0, [r0, #14]
    55a2:	b398      	cbz	r0, 560c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    55a4:	89e0      	ldrh	r0, [r4, #14]
    55a6:	b148      	cbz	r0, 55bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    55a8:	e037      	b.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    55aa:	f640 3135 	movw	r1, #2869	; 0xb35
    55ae:	2070      	movs	r0, #112	; 0x70
    55b0:	f002 fba4 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    55b4:	b00f      	add	sp, #60	; 0x3c
    55b6:	2001      	movs	r0, #1
    55b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55bc:	f002 f9fe 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    55c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    55c4:	bf08      	it	eq
    55c6:	200d      	moveq	r0, #13
    55c8:	d00b      	beq.n	55e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    55ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    55ce:	3856      	subs	r0, #86	; 0x56
    55d0:	bf08      	it	eq
    55d2:	201c      	moveq	r0, #28
    55d4:	d005      	beq.n	55e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    55d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    55da:	389f      	subs	r0, #159	; 0x9f
    55dc:	bf14      	ite	ne
    55de:	4638      	movne	r0, r7
    55e0:	2032      	moveq	r0, #50	; 0x32
    55e2:	1c41      	adds	r1, r0, #1
    55e4:	ebb9 000a 	subs.w	r0, r9, sl
    55e8:	4288      	cmp	r0, r1
    55ea:	da16      	bge.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    55ec:	f88b 5000 	strb.w	r5, [fp]
    55f0:	f898 0018 	ldrb.w	r0, [r8, #24]
    55f4:	7c21      	ldrb	r1, [r4, #16]
    55f6:	4281      	cmp	r1, r0
    55f8:	d309      	bcc.n	560e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    55fa:	6821      	ldr	r1, [r4, #0]
    55fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    55fe:	1a40      	subs	r0, r0, r1
    5600:	60a0      	str	r0, [r4, #8]
    5602:	b00f      	add	sp, #60	; 0x3c
    5604:	f04f 0002 	mov.w	r0, #2
    5608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    560c:	e005      	b.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    560e:	9801      	ldr	r0, [sp, #4]
    5610:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    5614:	7845      	ldrb	r5, [r0, #1]
    5616:	2d20      	cmp	r5, #32
    5618:	d1ae      	bne.n	5578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    561a:	2005      	movs	r0, #5
    561c:	f001 fe9a 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5620:	4d1e      	ldr	r5, [pc, #120]	; (569c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    5622:	f04f 30ff 	mov.w	r0, #4294967295
    5626:	6068      	str	r0, [r5, #4]
    5628:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    562c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    5630:	2120      	movs	r1, #32
    5632:	2a20      	cmp	r2, #32
    5634:	d003      	beq.n	563e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    5636:	2005      	movs	r0, #5
    5638:	f7fe fff4 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    563c:	e004      	b.n	5648 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    563e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5642:	4428      	add	r0, r5
    5644:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    5648:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    564c:	4916      	ldr	r1, [pc, #88]	; (56a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    564e:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    5652:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    5656:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    565a:	7048      	strb	r0, [r1, #1]
    565c:	6828      	ldr	r0, [r5, #0]
    565e:	4430      	add	r0, r6
    5660:	6028      	str	r0, [r5, #0]
    5662:	20ff      	movs	r0, #255	; 0xff
    5664:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    5668:	7e68      	ldrb	r0, [r5, #25]
    566a:	2801      	cmp	r0, #1
    566c:	d10a      	bne.n	5684 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    566e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    5672:	6823      	ldr	r3, [r4, #0]
    5674:	1818      	adds	r0, r3, r0
    5676:	f142 0100 	adc.w	r1, r2, #0
    567a:	1e40      	subs	r0, r0, #1
    567c:	f141 31ff 	adc.w	r1, r1, #4294967295
    5680:	f001 fc8a 	bl	6f98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5684:	f89d 0018 	ldrb.w	r0, [sp, #24]
    5688:	2820      	cmp	r0, #32
    568a:	d003      	beq.n	5694 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    568c:	4807      	ldr	r0, [pc, #28]	; (56ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    568e:	7840      	ldrb	r0, [r0, #1]
    5690:	f002 fc06 	bl	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5694:	b00f      	add	sp, #60	; 0x3c
    5696:	2000      	movs	r0, #0
    5698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    569c:	20000ad0 	.word	0x20000ad0
    56a0:	0f424000 	.word	0x0f424000
    56a4:	20000650 	.word	0x20000650
    56a8:	20000a50 	.word	0x20000a50
    56ac:	20000120 	.word	0x20000120

000056b0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    56b0:	b570      	push	{r4, r5, r6, lr}
    56b2:	4a23      	ldr	r2, [pc, #140]	; (5740 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    56b4:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    56b8:	2920      	cmp	r1, #32
    56ba:	d039      	beq.n	5730 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    56bc:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    56c0:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    56c4:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    56c8:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    56cc:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    56d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    56d4:	4411      	add	r1, r2
    56d6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    56da:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    56de:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    56e2:	2920      	cmp	r1, #32
    56e4:	d029      	beq.n	573a <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    56e6:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    56ea:	7e2d      	ldrb	r5, [r5, #24]
    56ec:	42a8      	cmp	r0, r5
    56ee:	bf3c      	itt	cc
    56f0:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    56f4:	7849      	ldrbcc	r1, [r1, #1]
    56f6:	d3f4      	bcc.n	56e2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    56f8:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    56fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    5700:	f8dc 5008 	ldr.w	r5, [ip, #8]
    5704:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    5708:	6814      	ldr	r4, [r2, #0]
    570a:	1828      	adds	r0, r5, r0
    570c:	f146 0200 	adc.w	r2, r6, #0
    5710:	ebb1 0c00 	subs.w	ip, r1, r0
    5714:	eb73 0202 	sbcs.w	r2, r3, r2
    5718:	d308      	bcc.n	572c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    571a:	1a08      	subs	r0, r1, r0
    571c:	f004 fb80 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5720:	f104 0167 	add.w	r1, r4, #103	; 0x67
    5724:	4281      	cmp	r1, r0
    5726:	bf9c      	itt	ls
    5728:	1b00      	subls	r0, r0, r4
    572a:	bd70      	popls	{r4, r5, r6, pc}
    572c:	2000      	movs	r0, #0
    572e:	bd70      	pop	{r4, r5, r6, pc}
    5730:	f640 3108 	movw	r1, #2824	; 0xb08
    5734:	2070      	movs	r0, #112	; 0x70
    5736:	f002 fae1 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    573a:	f04f 30ff 	mov.w	r0, #4294967295
    573e:	bd70      	pop	{r4, r5, r6, pc}
    5740:	20000ad0 	.word	0x20000ad0

00005744 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    5744:	490a      	ldr	r1, [pc, #40]	; (5770 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    5746:	b510      	push	{r4, lr}
    5748:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    574c:	f100 0408 	add.w	r4, r0, #8
    5750:	e9d4 0100 	ldrd	r0, r1, [r4]
    5754:	f001 f9c4 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5758:	89e3      	ldrh	r3, [r4, #14]
    575a:	2200      	movs	r2, #0
    575c:	18c3      	adds	r3, r0, r3
    575e:	7b20      	ldrb	r0, [r4, #12]
    5760:	4151      	adcs	r1, r2
    5762:	1818      	adds	r0, r3, r0
    5764:	4151      	adcs	r1, r2
    5766:	1c40      	adds	r0, r0, #1
    5768:	f141 0100 	adc.w	r1, r1, #0
    576c:	bd10      	pop	{r4, pc}
    576e:	0000      	.short	0x0000
    5770:	20000650 	.word	0x20000650

00005774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    5774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5776:	4d6f      	ldr	r5, [pc, #444]	; (5934 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    5778:	2600      	movs	r6, #0
    577a:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    577e:	2701      	movs	r7, #1
    5780:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    5784:	4b6c      	ldr	r3, [pc, #432]	; (5938 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    5786:	2808      	cmp	r0, #8
    5788:	d273      	bcs.n	5872 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    578a:	e8df f000 	tbb	[pc, r0]
    578e:	7804      	.short	0x7804
    5790:	47ceb3a0 	.word	0x47ceb3a0
    5794:	bdb8      	.short	0xbdb8
    5796:	43c8      	mvns	r0, r1
    5798:	ea70 0002 	orns	r0, r0, r2
    579c:	d105      	bne.n	57aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    579e:	f002 f92f 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    57a2:	f001 fcfb 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    57a6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    57aa:	8ae0      	ldrh	r0, [r4, #22]
    57ac:	b110      	cbz	r0, 57b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    57ae:	f002 fa2d 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    57b2:	b180      	cbz	r0, 57d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    57b4:	f7ff fcf2 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    57b8:	20ff      	movs	r0, #255	; 0xff
    57ba:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    57be:	6861      	ldr	r1, [r4, #4]
    57c0:	f1b1 3fff 	cmp.w	r1, #4294967295
    57c4:	d003      	beq.n	57ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    57c6:	2005      	movs	r0, #5
    57c8:	f001 fd0a 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    57cc:	b140      	cbz	r0, 57e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    57ce:	7e60      	ldrb	r0, [r4, #25]
    57d0:	2801      	cmp	r0, #1
    57d2:	d114      	bne.n	57fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    57d4:	e009      	b.n	57ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    57d6:	f640 012c 	movw	r1, #2092	; 0x82c
    57da:	2070      	movs	r0, #112	; 0x70
    57dc:	f002 fa8e 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    57e0:	f640 0131 	movw	r1, #2097	; 0x831
    57e4:	2070      	movs	r0, #112	; 0x70
    57e6:	f002 fa89 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    57ea:	68a2      	ldr	r2, [r4, #8]
    57ec:	6920      	ldr	r0, [r4, #16]
    57ee:	68e1      	ldr	r1, [r4, #12]
    57f0:	1810      	adds	r0, r2, r0
    57f2:	4171      	adcs	r1, r6
    57f4:	1e40      	subs	r0, r0, #1
    57f6:	f141 31ff 	adc.w	r1, r1, #4294967295
    57fa:	f001 fbcd 	bl	6f98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    57fe:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5802:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5806:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    580a:	6840      	ldr	r0, [r0, #4]
    580c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5810:	680a      	ldr	r2, [r1, #0]
    5812:	b001      	add	sp, #4
    5814:	2101      	movs	r1, #1
    5816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    581a:	4710      	bx	r2
    581c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    5820:	b160      	cbz	r0, 583c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    5822:	43c8      	mvns	r0, r1
    5824:	ea70 0002 	orns	r0, r0, r2
    5828:	d105      	bne.n	5836 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    582a:	f002 f8e9 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    582e:	f001 fcb5 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5832:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5836:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    583c:	f7ff fcae 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    5840:	f04f 30ff 	mov.w	r0, #4294967295
    5844:	6060      	str	r0, [r4, #4]
    5846:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    584a:	f88d 0000 	strb.w	r0, [sp]
    584e:	f89d 0000 	ldrb.w	r0, [sp]
    5852:	b178      	cbz	r0, 5874 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    5854:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5858:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    585c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5860:	6840      	ldr	r0, [r0, #4]
    5862:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5866:	680a      	ldr	r2, [r1, #0]
    5868:	b001      	add	sp, #4
    586a:	2106      	movs	r1, #6
    586c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5870:	4710      	bx	r2
    5872:	e05a      	b.n	592a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    5874:	f640 0148 	movw	r1, #2120	; 0x848
    5878:	2070      	movs	r0, #112	; 0x70
    587a:	f002 fa3f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    587e:	f7ff fc8d 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    5882:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    5886:	f002 f9c1 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    588a:	b130      	cbz	r0, 589a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    588c:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    5890:	43c9      	mvns	r1, r1
    5892:	ea71 0000 	orns	r0, r1, r0
    5896:	d005      	beq.n	58a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    5898:	e00a      	b.n	58b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    589a:	f640 0156 	movw	r1, #2134	; 0x856
    589e:	2070      	movs	r0, #112	; 0x70
    58a0:	f002 fa2c 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58a4:	f002 f8ac 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    58a8:	f001 fc78 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    58ac:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    58b0:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    58b4:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    58b8:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    58bc:	6840      	ldr	r0, [r0, #4]
    58be:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    58c2:	680a      	ldr	r2, [r1, #0]
    58c4:	b001      	add	sp, #4
    58c6:	2100      	movs	r1, #0
    58c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    58cc:	4710      	bx	r2
    58ce:	f001 fe7f 	bl	75d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    58d2:	8ae0      	ldrh	r0, [r4, #22]
    58d4:	b110      	cbz	r0, 58dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    58d6:	f002 f999 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    58da:	b130      	cbz	r0, 58ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    58dc:	f001 fe8c 	bl	75f8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    58e0:	2800      	cmp	r0, #0
    58e2:	bf18      	it	ne
    58e4:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    58e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58ea:	f44f 6106 	mov.w	r1, #2144	; 0x860
    58ee:	2070      	movs	r0, #112	; 0x70
    58f0:	f002 fa04 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58f4:	4811      	ldr	r0, [pc, #68]	; (593c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    58f6:	6007      	str	r7, [r0, #0]
    58f8:	6898      	ldr	r0, [r3, #8]
    58fa:	6007      	str	r7, [r0, #0]
    58fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58fe:	7818      	ldrb	r0, [r3, #0]
    5900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5904:	f002 bacc 	b.w	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5908:	f7ff fc48 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    590c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5910:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5914:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5918:	6840      	ldr	r0, [r0, #4]
    591a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    591e:	680a      	ldr	r2, [r1, #0]
    5920:	b001      	add	sp, #4
    5922:	2105      	movs	r1, #5
    5924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5928:	4710      	bx	r2
    592a:	f640 0173 	movw	r1, #2163	; 0x873
    592e:	2070      	movs	r0, #112	; 0x70
    5930:	f002 f9e4 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5934:	20000650 	.word	0x20000650
    5938:	20000120 	.word	0x20000120
    593c:	40000508 	.word	0x40000508

00005940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    5940:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5944:	48f7      	ldr	r0, [pc, #988]	; (5d24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    5946:	b097      	sub	sp, #92	; 0x5c
    5948:	460c      	mov	r4, r1
    594a:	6800      	ldr	r0, [r0, #0]
    594c:	4ff6      	ldr	r7, [pc, #984]	; (5d28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    594e:	05c0      	lsls	r0, r0, #23
    5950:	0dc0      	lsrs	r0, r0, #23
    5952:	d00e      	beq.n	5972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    5954:	3810      	subs	r0, #16
    5956:	b240      	sxtb	r0, r0
    5958:	2800      	cmp	r0, #0
    595a:	bfb8      	it	lt
    595c:	f000 000f 	andlt.w	r0, r0, #15
    5960:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5964:	bfac      	ite	ge
    5966:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    596a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    596e:	0940      	lsrs	r0, r0, #5
    5970:	d00c      	beq.n	598c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    5972:	7820      	ldrb	r0, [r4, #0]
    5974:	f04f 0a00 	mov.w	sl, #0
    5978:	2800      	cmp	r0, #0
    597a:	bf18      	it	ne
    597c:	2801      	cmpne	r0, #1
    597e:	d017      	beq.n	59b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    5980:	f240 61f9 	movw	r1, #1785	; 0x6f9
    5984:	f04f 0070 	mov.w	r0, #112	; 0x70
    5988:	f002 f9b8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    598c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5990:	f04f 0a01 	mov.w	sl, #1
    5994:	2820      	cmp	r0, #32
    5996:	d006      	beq.n	59a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    5998:	7820      	ldrb	r0, [r4, #0]
    599a:	b148      	cbz	r0, 59b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    599c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    59a0:	2070      	movs	r0, #112	; 0x70
    59a2:	f002 f9ab 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59a6:	f240 61f2 	movw	r1, #1778	; 0x6f2
    59aa:	2070      	movs	r0, #112	; 0x70
    59ac:	f002 f9a6 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59b0:	f8df b378 	ldr.w	fp, [pc, #888]	; 5d2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    59b4:	f1bb 0f00 	cmp.w	fp, #0
    59b8:	d004      	beq.n	59c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    59ba:	2100      	movs	r1, #0
    59bc:	f240 60fc 	movw	r0, #1788	; 0x6fc
    59c0:	f3af 8000 	nop.w
    59c4:	2000      	movs	r0, #0
    59c6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    59ca:	a905      	add	r1, sp, #20
    59cc:	9112      	str	r1, [sp, #72]	; 0x48
    59ce:	49d8      	ldr	r1, [pc, #864]	; (5d30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    59d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    59d2:	f04f 0801 	mov.w	r8, #1
    59d6:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    59da:	9001      	str	r0, [sp, #4]
    59dc:	f1bb 0f00 	cmp.w	fp, #0
    59e0:	d004      	beq.n	59ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    59e2:	2100      	movs	r1, #0
    59e4:	f240 7007 	movw	r0, #1799	; 0x707
    59e8:	f3af 8000 	nop.w
    59ec:	f1b8 0f00 	cmp.w	r8, #0
    59f0:	d009      	beq.n	5a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    59f2:	bf00      	nop
    59f4:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    59f8:	2500      	movs	r5, #0
    59fa:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    59fe:	f1ba 0f00 	cmp.w	sl, #0
    5a02:	d007      	beq.n	5a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    5a04:	e03e      	b.n	5a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    5a06:	48cb      	ldr	r0, [pc, #812]	; (5d34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    5a08:	2800      	cmp	r0, #0
    5a0a:	bf18      	it	ne
    5a0c:	f3af 8000 	nopne.w
    5a10:	b662      	cpsie	i
    5a12:	e7ef      	b.n	59f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    5a14:	46b1      	mov	r9, r6
    5a16:	2001      	movs	r0, #1
    5a18:	ea20 0609 	bic.w	r6, r0, r9
    5a1c:	48c6      	ldr	r0, [pc, #792]	; (5d38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5a1e:	2240      	movs	r2, #64	; 0x40
    5a20:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    5a24:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    5a28:	f004 fb8a 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a2c:	f1bb 0f00 	cmp.w	fp, #0
    5a30:	d004      	beq.n	5a3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    5a32:	2100      	movs	r1, #0
    5a34:	f240 503c 	movw	r0, #1340	; 0x53c
    5a38:	f3af 8000 	nop.w
    5a3c:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    5a40:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5a44:	4439      	add	r1, r7
    5a46:	4438      	add	r0, r7
    5a48:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    5a4a:	8502      	strh	r2, [r0, #40]	; 0x28
    5a4c:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5a50:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5a54:	f1bb 0f00 	cmp.w	fp, #0
    5a58:	d004      	beq.n	5a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    5a5a:	2100      	movs	r1, #0
    5a5c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5a60:	f3af 8000 	nop.w
    5a64:	f1bb 0f00 	cmp.w	fp, #0
    5a68:	d004      	beq.n	5a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    5a6a:	2100      	movs	r1, #0
    5a6c:	f240 7011 	movw	r0, #1809	; 0x711
    5a70:	f3af 8000 	nop.w
    5a74:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5a78:	f88d 0020 	strb.w	r0, [sp, #32]
    5a7c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5a80:	2800      	cmp	r0, #0
    5a82:	d1ab      	bne.n	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5a84:	f1bb 0f00 	cmp.w	fp, #0
    5a88:	d004      	beq.n	5a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    5a8a:	2100      	movs	r1, #0
    5a8c:	f240 701b 	movw	r0, #1819	; 0x71b
    5a90:	f3af 8000 	nop.w
    5a94:	f001 fb82 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5a98:	4681      	mov	r9, r0
    5a9a:	a802      	add	r0, sp, #8
    5a9c:	900a      	str	r0, [sp, #40]	; 0x28
    5a9e:	4688      	mov	r8, r1
    5aa0:	8921      	ldrh	r1, [r4, #8]
    5aa2:	4628      	mov	r0, r5
    5aa4:	f361 401f 	bfi	r0, r1, #16, #16
    5aa8:	4601      	mov	r1, r0
    5aaa:	7aa2      	ldrb	r2, [r4, #10]
    5aac:	4628      	mov	r0, r5
    5aae:	f362 0007 	bfi	r0, r2, #0, #8
    5ab2:	7ae2      	ldrb	r2, [r4, #11]
    5ab4:	f362 200f 	bfi	r0, r2, #8, #8
    5ab8:	7822      	ldrb	r2, [r4, #0]
    5aba:	9502      	str	r5, [sp, #8]
    5abc:	f362 4017 	bfi	r0, r2, #16, #8
    5ac0:	e9cd 5104 	strd	r5, r1, [sp, #16]
    5ac4:	e9cd 0506 	strd	r0, r5, [sp, #24]
    5ac8:	9503      	str	r5, [sp, #12]
    5aca:	7820      	ldrb	r0, [r4, #0]
    5acc:	b380      	cbz	r0, 5b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    5ace:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    5ad2:	499a      	ldr	r1, [pc, #616]	; (5d3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    5ad4:	1a08      	subs	r0, r1, r0
    5ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
    5ad8:	f101 020c 	add.w	r2, r1, #12
    5adc:	a914      	add	r1, sp, #80	; 0x50
    5ade:	f001 f87d 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5ae2:	2200      	movs	r2, #0
    5ae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ae8:	4648      	mov	r0, r9
    5aea:	4641      	mov	r1, r8
    5aec:	f7fe ff6e 	bl	49cc <MPSL_IRQ_RADIO_Handler+0x3e4>
    5af0:	468c      	mov	ip, r1
    5af2:	7ae1      	ldrb	r1, [r4, #11]
    5af4:	2900      	cmp	r1, #0
    5af6:	bf0c      	ite	eq
    5af8:	217a      	moveq	r1, #122	; 0x7a
    5afa:	214a      	movne	r1, #74	; 0x4a
    5afc:	6862      	ldr	r2, [r4, #4]
    5afe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5b02:	4411      	add	r1, r2
    5b04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b08:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    5b0c:	441a      	add	r2, r3
    5b0e:	4411      	add	r1, r2
    5b10:	1c88      	adds	r0, r1, #2
    5b12:	f001 f847 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5b16:	9600      	str	r6, [sp, #0]
    5b18:	9004      	str	r0, [sp, #16]
    5b1a:	464a      	mov	r2, r9
    5b1c:	4643      	mov	r3, r8
    5b1e:	6920      	ldr	r0, [r4, #16]
    5b20:	990a      	ldr	r1, [sp, #40]	; 0x28
    5b22:	f7fe fdbb 	bl	469c <MPSL_IRQ_RADIO_Handler+0xb4>
    5b26:	2800      	cmp	r0, #0
    5b28:	bf08      	it	eq
    5b2a:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    5b2e:	e046      	b.n	5bbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    5b30:	e7ff      	b.n	5b32 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    5b32:	4648      	mov	r0, r9
    5b34:	4641      	mov	r1, r8
    5b36:	f000 ffd3 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5b3a:	f8df c204 	ldr.w	ip, [pc, #516]	; 5d40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    5b3e:	4602      	mov	r2, r0
    5b40:	eb10 0c0c 	adds.w	ip, r0, ip
    5b44:	460b      	mov	r3, r1
    5b46:	f141 0e00 	adc.w	lr, r1, #0
    5b4a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5b4e:	ebb0 0c0c 	subs.w	ip, r0, ip
    5b52:	eb71 0c0e 	sbcs.w	ip, r1, lr
    5b56:	d229      	bcs.n	5bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b58:	3229      	adds	r2, #41	; 0x29
    5b5a:	f143 0300 	adc.w	r3, r3, #0
    5b5e:	1a82      	subs	r2, r0, r2
    5b60:	eb71 0203 	sbcs.w	r2, r1, r3
    5b64:	d322      	bcc.n	5bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b66:	8922      	ldrh	r2, [r4, #8]
    5b68:	ab0a      	add	r3, sp, #40	; 0x28
    5b6a:	1a80      	subs	r0, r0, r2
    5b6c:	eb61 0105 	sbc.w	r1, r1, r5
    5b70:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5b72:	1e40      	subs	r0, r0, #1
    5b74:	9200      	str	r2, [sp, #0]
    5b76:	f141 31ff 	adc.w	r1, r1, #4294967295
    5b7a:	aa0d      	add	r2, sp, #52	; 0x34
    5b7c:	f000 ffd4 	bl	6b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5b80:	7ae0      	ldrb	r0, [r4, #11]
    5b82:	2800      	cmp	r0, #0
    5b84:	bf0c      	ite	eq
    5b86:	207a      	moveq	r0, #122	; 0x7a
    5b88:	204a      	movne	r0, #74	; 0x4a
    5b8a:	990d      	ldr	r1, [sp, #52]	; 0x34
    5b8c:	8922      	ldrh	r2, [r4, #8]
    5b8e:	4408      	add	r0, r1
    5b90:	6861      	ldr	r1, [r4, #4]
    5b92:	4411      	add	r1, r2
    5b94:	4408      	add	r0, r1
    5b96:	1c80      	adds	r0, r0, #2
    5b98:	f001 f804 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5b9c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    5ba0:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5ba4:	1a40      	subs	r0, r0, r1
    5ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5baa:	e007      	b.n	5bbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    5bac:	f1b9 0101 	subs.w	r1, r9, #1
    5bb0:	f148 30ff 	adc.w	r0, r8, #4294967295
    5bb4:	e9cd 1002 	strd	r1, r0, [sp, #8]
    5bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5bbc:	9004      	str	r0, [sp, #16]
    5bbe:	f1bb 0f00 	cmp.w	fp, #0
    5bc2:	d004      	beq.n	5bce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    5bc4:	2100      	movs	r1, #0
    5bc6:	f240 7022 	movw	r0, #1826	; 0x722
    5bca:	f3af 8000 	nop.w
    5bce:	495a      	ldr	r1, [pc, #360]	; (5d38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5bd0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    5bd4:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    5bd8:	9108      	str	r1, [sp, #32]
    5bda:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    5bde:	a802      	add	r0, sp, #8
    5be0:	2901      	cmp	r1, #1
    5be2:	bf18      	it	ne
    5be4:	2902      	cmpne	r1, #2
    5be6:	d141      	bne.n	5c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5be8:	9511      	str	r5, [sp, #68]	; 0x44
    5bea:	9a02      	ldr	r2, [sp, #8]
    5bec:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    5bf0:	1a53      	subs	r3, r2, r1
    5bf2:	f8dd c010 	ldr.w	ip, [sp, #16]
    5bf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5bfa:	eb12 020c 	adds.w	r2, r2, ip
    5bfe:	1a51      	subs	r1, r2, r1
    5c00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5c04:	2b02      	cmp	r3, #2
    5c06:	d374      	bcc.n	5cf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5c0c:	bf98      	it	ls
    5c0e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5c12:	d86e      	bhi.n	5cf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5c14:	2501      	movs	r5, #1
    5c16:	ab14      	add	r3, sp, #80	; 0x50
    5c18:	aa0e      	add	r2, sp, #56	; 0x38
    5c1a:	4631      	mov	r1, r6
    5c1c:	f7fe ff26 	bl	4a6c <MPSL_IRQ_RADIO_Handler+0x484>
    5c20:	2800      	cmp	r0, #0
    5c22:	d06d      	beq.n	5d00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    5c24:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5c28:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    5c2c:	4633      	mov	r3, r6
    5c2e:	428a      	cmp	r2, r1
    5c30:	d06a      	beq.n	5d08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    5c32:	2005      	movs	r0, #5
    5c34:	f7fe fcf6 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    5c38:	9908      	ldr	r1, [sp, #32]
    5c3a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    5c3e:	7048      	strb	r0, [r1, #1]
    5c40:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5c44:	2820      	cmp	r0, #32
    5c46:	bf01      	itttt	eq
    5c48:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5c4c:	4438      	addeq	r0, r7
    5c4e:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    5c52:	9511      	streq	r5, [sp, #68]	; 0x44
    5c54:	bf1e      	ittt	ne
    5c56:	9908      	ldrne	r1, [sp, #32]
    5c58:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    5c5c:	f880 8001 	strbne.w	r8, [r0, #1]
    5c60:	4632      	mov	r2, r6
    5c62:	4641      	mov	r1, r8
    5c64:	f05f 0003 	movs.w	r0, #3
    5c68:	f7ff fb44 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5c6c:	f1bb 0f00 	cmp.w	fp, #0
    5c70:	d004      	beq.n	5c7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    5c72:	2100      	movs	r1, #0
    5c74:	f240 7027 	movw	r0, #1831	; 0x727
    5c78:	f3af 8000 	nop.w
    5c7c:	4831      	ldr	r0, [pc, #196]	; (5d44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    5c7e:	2800      	cmp	r0, #0
    5c80:	bf18      	it	ne
    5c82:	f3af 8000 	nopne.w
    5c86:	f3ef 8810 	mrs	r8, PRIMASK
    5c8a:	b672      	cpsid	i
    5c8c:	f1bb 0f00 	cmp.w	fp, #0
    5c90:	d004      	beq.n	5c9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    5c92:	2100      	movs	r1, #0
    5c94:	f240 702d 	movw	r0, #1837	; 0x72d
    5c98:	f3af 8000 	nop.w
    5c9c:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5ca0:	f88d 0020 	strb.w	r0, [sp, #32]
    5ca4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5ca8:	2800      	cmp	r0, #0
    5caa:	f47f ae97 	bne.w	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5cae:	f1bb 0f00 	cmp.w	fp, #0
    5cb2:	d004      	beq.n	5cbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    5cb4:	2100      	movs	r1, #0
    5cb6:	f240 7035 	movw	r0, #1845	; 0x735
    5cba:	f3af 8000 	nop.w
    5cbe:	f10d 0e04 	add.w	lr, sp, #4
    5cc2:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    5cc6:	f100 0e08 	add.w	lr, r0, #8
    5cca:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    5cce:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    5cd2:	e9c0 1206 	strd	r1, r2, [r0, #24]
    5cd6:	b325      	cbz	r5, 5d22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    5cd8:	f1bb 0f00 	cmp.w	fp, #0
    5cdc:	d004      	beq.n	5ce8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    5cde:	2100      	movs	r1, #0
    5ce0:	f240 7042 	movw	r0, #1858	; 0x742
    5ce4:	f3af 8000 	nop.w
    5ce8:	f1ba 0f00 	cmp.w	sl, #0
    5cec:	d146      	bne.n	5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5cee:	e02b      	b.n	5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    5cf0:	e7ff      	b.n	5cf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5cf2:	4632      	mov	r2, r6
    5cf4:	4641      	mov	r1, r8
    5cf6:	2004      	movs	r0, #4
    5cf8:	f7ff fafc 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5cfc:	2501      	movs	r5, #1
    5cfe:	e7b5      	b.n	5c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5d00:	4632      	mov	r2, r6
    5d02:	4641      	mov	r1, r8
    5d04:	2004      	movs	r0, #4
    5d06:	e7af      	b.n	5c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    5d08:	2920      	cmp	r1, #32
    5d0a:	bf1d      	ittte	ne
    5d0c:	9808      	ldrne	r0, [sp, #32]
    5d0e:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    5d12:	7840      	ldrbne	r0, [r0, #1]
    5d14:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5d18:	bf04      	itt	eq
    5d1a:	4438      	addeq	r0, r7
    5d1c:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    5d20:	e78a      	b.n	5c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    5d22:	e03b      	b.n	5d9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5d24:	e000ed04 	.word	0xe000ed04
    5d28:	20000ad0 	.word	0x20000ad0
    5d2c:	00000000 	.word	0x00000000
    5d30:	20000650 	.word	0x20000650
    5d34:	00000000 	.word	0x00000000
    5d38:	20000a50 	.word	0x20000a50
    5d3c:	1e847fff 	.word	0x1e847fff
    5d40:	0f424000 	.word	0x0f424000
    5d44:	00000000 	.word	0x00000000
    5d48:	9811      	ldr	r0, [sp, #68]	; 0x44
    5d4a:	f010 0fff 	tst.w	r0, #255	; 0xff
    5d4e:	d015      	beq.n	5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d50:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5d54:	2820      	cmp	r0, #32
    5d56:	d111      	bne.n	5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d58:	f1bb 0f00 	cmp.w	fp, #0
    5d5c:	d004      	beq.n	5d68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    5d5e:	2100      	movs	r1, #0
    5d60:	f240 7047 	movw	r0, #1863	; 0x747
    5d64:	f3af 8000 	nop.w
    5d68:	4631      	mov	r1, r6
    5d6a:	2002      	movs	r0, #2
    5d6c:	f7ff faf4 	bl	5358 <MPSL_IRQ_RADIO_Handler+0xd70>
    5d70:	9010      	str	r0, [sp, #64]	; 0x40
    5d72:	b918      	cbnz	r0, 5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d74:	7820      	ldrb	r0, [r4, #0]
    5d76:	b300      	cbz	r0, 5dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    5d78:	2801      	cmp	r0, #1
    5d7a:	d02e      	beq.n	5dda <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    5d7c:	f1bb 0f00 	cmp.w	fp, #0
    5d80:	d004      	beq.n	5d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    5d82:	2100      	movs	r1, #0
    5d84:	f240 7064 	movw	r0, #1892	; 0x764
    5d88:	f3af 8000 	nop.w
    5d8c:	20ff      	movs	r0, #255	; 0xff
    5d8e:	f1ba 0f00 	cmp.w	sl, #0
    5d92:	bf18      	it	ne
    5d94:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    5d98:	d029      	beq.n	5dee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    5d9a:	2501      	movs	r5, #1
    5d9c:	f1bb 0f00 	cmp.w	fp, #0
    5da0:	d004      	beq.n	5dac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    5da2:	2100      	movs	r1, #0
    5da4:	f240 7075 	movw	r0, #1909	; 0x775
    5da8:	f3af 8000 	nop.w
    5dac:	9810      	ldr	r0, [sp, #64]	; 0x40
    5dae:	4c34      	ldr	r4, [pc, #208]	; (5e80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    5db0:	2802      	cmp	r0, #2
    5db2:	d025      	beq.n	5e00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    5db4:	2801      	cmp	r0, #1
    5db6:	d02b      	beq.n	5e10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    5db8:	e02f      	b.n	5e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5dba:	f1bb 0f00 	cmp.w	fp, #0
    5dbe:	d004      	beq.n	5dca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    5dc0:	2100      	movs	r1, #0
    5dc2:	f240 704f 	movw	r0, #1871	; 0x74f
    5dc6:	f3af 8000 	nop.w
    5dca:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5dce:	2004      	movs	r0, #4
    5dd0:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5dd2:	f7ff fa8f 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5dd6:	2501      	movs	r5, #1
    5dd8:	e7e0      	b.n	5d9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5dda:	f1bb 0f00 	cmp.w	fp, #0
    5dde:	f43f adfd 	beq.w	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5de2:	2100      	movs	r1, #0
    5de4:	f240 705a 	movw	r0, #1882	; 0x75a
    5de8:	f3af 8000 	nop.w
    5dec:	e5f6      	b.n	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5dee:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5df2:	2101      	movs	r1, #1
    5df4:	4391      	bics	r1, r2
    5df6:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    5dfa:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    5dfe:	e7cc      	b.n	5d9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    5e00:	68b8      	ldr	r0, [r7, #8]
    5e02:	ebb0 0009 	subs.w	r0, r0, r9
    5e06:	f004 f80b 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5e0a:	6861      	ldr	r1, [r4, #4]
    5e0c:	b921      	cbnz	r1, 5e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    5e0e:	e004      	b.n	5e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5e10:	6861      	ldr	r1, [r4, #4]
    5e12:	f04f 30ff 	mov.w	r0, #4294967295
    5e16:	b101      	cbz	r1, 5e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5e18:	4788      	blx	r1
    5e1a:	f1b8 0f00 	cmp.w	r8, #0
    5e1e:	d028      	beq.n	5e72 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    5e20:	f1bb 0f00 	cmp.w	fp, #0
    5e24:	d004      	beq.n	5e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    5e26:	2100      	movs	r1, #0
    5e28:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    5e2c:	f3af 8000 	nop.w
    5e30:	b19d      	cbz	r5, 5e5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e32:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    5e36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e3a:	4438      	add	r0, r7
    5e3c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    5e40:	2820      	cmp	r0, #32
    5e42:	d00a      	beq.n	5e5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e44:	f1bb 0f00 	cmp.w	fp, #0
    5e48:	d004      	beq.n	5e54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    5e4a:	2100      	movs	r1, #0
    5e4c:	f240 708f 	movw	r0, #1935	; 0x78f
    5e50:	f3af 8000 	nop.w
    5e54:	7860      	ldrb	r0, [r4, #1]
    5e56:	f002 f823 	bl	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5e5a:	f1bb 0f00 	cmp.w	fp, #0
    5e5e:	d004      	beq.n	5e6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    5e60:	2100      	movs	r1, #0
    5e62:	f240 7094 	movw	r0, #1940	; 0x794
    5e66:	f3af 8000 	nop.w
    5e6a:	b019      	add	sp, #100	; 0x64
    5e6c:	4628      	mov	r0, r5
    5e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e72:	4804      	ldr	r0, [pc, #16]	; (5e84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    5e74:	2800      	cmp	r0, #0
    5e76:	bf18      	it	ne
    5e78:	f3af 8000 	nopne.w
    5e7c:	b662      	cpsie	i
    5e7e:	e7cf      	b.n	5e20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    5e80:	20000120 	.word	0x20000120
    5e84:	00000000 	.word	0x00000000

00005e88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    5e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e8c:	4604      	mov	r4, r0
    5e8e:	7800      	ldrb	r0, [r0, #0]
    5e90:	b095      	sub	sp, #84	; 0x54
    5e92:	b118      	cbz	r0, 5e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    5e94:	b015      	add	sp, #84	; 0x54
    5e96:	2000      	movs	r0, #0
    5e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e9c:	48d1      	ldr	r0, [pc, #836]	; (61e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    5e9e:	6800      	ldr	r0, [r0, #0]
    5ea0:	05c0      	lsls	r0, r0, #23
    5ea2:	0dc0      	lsrs	r0, r0, #23
    5ea4:	d00e      	beq.n	5ec4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    5ea6:	3810      	subs	r0, #16
    5ea8:	b240      	sxtb	r0, r0
    5eaa:	2800      	cmp	r0, #0
    5eac:	bfb8      	it	lt
    5eae:	f000 000f 	andlt.w	r0, r0, #15
    5eb2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5eb6:	bfac      	ite	ge
    5eb8:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    5ebc:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    5ec0:	0940      	lsrs	r0, r0, #5
    5ec2:	d0e7      	beq.n	5e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    5ec4:	a80d      	add	r0, sp, #52	; 0x34
    5ec6:	f8df 9320 	ldr.w	r9, [pc, #800]	; 61e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    5eca:	9009      	str	r0, [sp, #36]	; 0x24
    5ecc:	f1b9 0f00 	cmp.w	r9, #0
    5ed0:	d004      	beq.n	5edc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    5ed2:	2100      	movs	r1, #0
    5ed4:	f240 50c5 	movw	r0, #1477	; 0x5c5
    5ed8:	f3af 8000 	nop.w
    5edc:	f8df 830c 	ldr.w	r8, [pc, #780]	; 61ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    5ee0:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    5ee4:	2500      	movs	r5, #0
    5ee6:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    5eea:	9503      	str	r5, [sp, #12]
    5eec:	f1b9 0f00 	cmp.w	r9, #0
    5ef0:	d004      	beq.n	5efc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    5ef2:	2100      	movs	r1, #0
    5ef4:	f240 50ca 	movw	r0, #1482	; 0x5ca
    5ef8:	f3af 8000 	nop.w
    5efc:	2001      	movs	r0, #1
    5efe:	ea20 0a06 	bic.w	sl, r0, r6
    5f02:	48bb      	ldr	r0, [pc, #748]	; (61f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    5f04:	2240      	movs	r2, #64	; 0x40
    5f06:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    5f0a:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    5f0e:	f004 f917 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f12:	f1b9 0f00 	cmp.w	r9, #0
    5f16:	d004      	beq.n	5f22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    5f18:	2100      	movs	r1, #0
    5f1a:	f240 503c 	movw	r0, #1340	; 0x53c
    5f1e:	f3af 8000 	nop.w
    5f22:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5f26:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    5f2a:	eb01 0208 	add.w	r2, r1, r8
    5f2e:	4440      	add	r0, r8
    5f30:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    5f32:	8501      	strh	r1, [r0, #40]	; 0x28
    5f34:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    5f38:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5f3c:	f1b9 0f00 	cmp.w	r9, #0
    5f40:	d004      	beq.n	5f4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    5f42:	2100      	movs	r1, #0
    5f44:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5f48:	f3af 8000 	nop.w
    5f4c:	f1b9 0f00 	cmp.w	r9, #0
    5f50:	d004      	beq.n	5f5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    5f52:	2100      	movs	r1, #0
    5f54:	f240 50cf 	movw	r0, #1487	; 0x5cf
    5f58:	f3af 8000 	nop.w
    5f5c:	f001 f91e 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f60:	460f      	mov	r7, r1
    5f62:	4606      	mov	r6, r0
    5f64:	8921      	ldrh	r1, [r4, #8]
    5f66:	4628      	mov	r0, r5
    5f68:	f361 401f 	bfi	r0, r1, #16, #16
    5f6c:	4601      	mov	r1, r0
    5f6e:	7aa2      	ldrb	r2, [r4, #10]
    5f70:	4628      	mov	r0, r5
    5f72:	f362 0007 	bfi	r0, r2, #0, #8
    5f76:	7ae2      	ldrb	r2, [r4, #11]
    5f78:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    5f7c:	f362 200f 	bfi	r0, r2, #8, #8
    5f80:	7822      	ldrb	r2, [r4, #0]
    5f82:	950a      	str	r5, [sp, #40]	; 0x28
    5f84:	f362 4017 	bfi	r0, r2, #16, #8
    5f88:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    5f8c:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    5f90:	950b      	str	r5, [sp, #44]	; 0x2c
    5f92:	7820      	ldrb	r0, [r4, #0]
    5f94:	b388      	cbz	r0, 5ffa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    5f96:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5f9a:	4896      	ldr	r0, [pc, #600]	; (61f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    5f9c:	f10b 020c 	add.w	r2, fp, #12
    5fa0:	1a40      	subs	r0, r0, r1
    5fa2:	a911      	add	r1, sp, #68	; 0x44
    5fa4:	f000 fe1a 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5fa8:	2200      	movs	r2, #0
    5faa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    5fae:	4630      	mov	r0, r6
    5fb0:	4639      	mov	r1, r7
    5fb2:	f7fe fd0b 	bl	49cc <MPSL_IRQ_RADIO_Handler+0x3e4>
    5fb6:	4684      	mov	ip, r0
    5fb8:	7ae0      	ldrb	r0, [r4, #11]
    5fba:	460b      	mov	r3, r1
    5fbc:	2800      	cmp	r0, #0
    5fbe:	bf0c      	ite	eq
    5fc0:	207a      	moveq	r0, #122	; 0x7a
    5fc2:	204a      	movne	r0, #74	; 0x4a
    5fc4:	6861      	ldr	r1, [r4, #4]
    5fc6:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    5fca:	4408      	add	r0, r1
    5fcc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5fd0:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    5fd4:	4411      	add	r1, r2
    5fd6:	4408      	add	r0, r1
    5fd8:	1c80      	adds	r0, r0, #2
    5fda:	f000 fde3 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5fde:	f8cd a000 	str.w	sl, [sp]
    5fe2:	900c      	str	r0, [sp, #48]	; 0x30
    5fe4:	4632      	mov	r2, r6
    5fe6:	463b      	mov	r3, r7
    5fe8:	4659      	mov	r1, fp
    5fea:	6920      	ldr	r0, [r4, #16]
    5fec:	f7fe fb56 	bl	469c <MPSL_IRQ_RADIO_Handler+0xb4>
    5ff0:	2800      	cmp	r0, #0
    5ff2:	bf08      	it	eq
    5ff4:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    5ff8:	e045      	b.n	6086 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    5ffa:	e7ff      	b.n	5ffc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    5ffc:	4630      	mov	r0, r6
    5ffe:	4639      	mov	r1, r7
    6000:	f000 fd6e 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6004:	4b7c      	ldr	r3, [pc, #496]	; (61f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    6006:	4602      	mov	r2, r0
    6008:	eb10 0c03 	adds.w	ip, r0, r3
    600c:	468b      	mov	fp, r1
    600e:	f141 0300 	adc.w	r3, r1, #0
    6012:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6016:	ebb0 0c0c 	subs.w	ip, r0, ip
    601a:	eb71 0303 	sbcs.w	r3, r1, r3
    601e:	d22a      	bcs.n	6076 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    6020:	3229      	adds	r2, #41	; 0x29
    6022:	f14b 0300 	adc.w	r3, fp, #0
    6026:	1a82      	subs	r2, r0, r2
    6028:	eb71 0203 	sbcs.w	r2, r1, r3
    602c:	d323      	bcc.n	6076 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    602e:	8922      	ldrh	r2, [r4, #8]
    6030:	ab12      	add	r3, sp, #72	; 0x48
    6032:	1a80      	subs	r0, r0, r2
    6034:	eb61 0105 	sbc.w	r1, r1, r5
    6038:	9a09      	ldr	r2, [sp, #36]	; 0x24
    603a:	1e40      	subs	r0, r0, #1
    603c:	9200      	str	r2, [sp, #0]
    603e:	f141 31ff 	adc.w	r1, r1, #4294967295
    6042:	aa07      	add	r2, sp, #28
    6044:	f000 fd70 	bl	6b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    6048:	7ae0      	ldrb	r0, [r4, #11]
    604a:	2800      	cmp	r0, #0
    604c:	bf0c      	ite	eq
    604e:	207a      	moveq	r0, #122	; 0x7a
    6050:	204a      	movne	r0, #74	; 0x4a
    6052:	9907      	ldr	r1, [sp, #28]
    6054:	8922      	ldrh	r2, [r4, #8]
    6056:	4408      	add	r0, r1
    6058:	6861      	ldr	r1, [r4, #4]
    605a:	4411      	add	r1, r2
    605c:	4408      	add	r0, r1
    605e:	1c80      	adds	r0, r0, #2
    6060:	f000 fda0 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6064:	4601      	mov	r1, r0
    6066:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    606a:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    606e:	1a08      	subs	r0, r1, r0
    6070:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6074:	e006      	b.n	6084 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    6076:	1e70      	subs	r0, r6, #1
    6078:	f147 31ff 	adc.w	r1, r7, #4294967295
    607c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    6080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6084:	900c      	str	r0, [sp, #48]	; 0x30
    6086:	f1b9 0f00 	cmp.w	r9, #0
    608a:	d004      	beq.n	6096 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    608c:	2100      	movs	r1, #0
    608e:	f240 50d5 	movw	r0, #1493	; 0x5d5
    6092:	f3af 8000 	nop.w
    6096:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    609a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    609e:	1808      	adds	r0, r1, r0
    60a0:	eb42 0105 	adc.w	r1, r2, r5
    60a4:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    60a8:	2a20      	cmp	r2, #32
    60aa:	d009      	beq.n	60c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    60ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    60b0:	1a12      	subs	r2, r2, r0
    60b2:	eb73 0201 	sbcs.w	r2, r3, r1
    60b6:	d203      	bcs.n	60c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    60b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    60bc:	2001      	movs	r0, #1
    60be:	9003      	str	r0, [sp, #12]
    60c0:	f1b9 0f00 	cmp.w	r9, #0
    60c4:	d004      	beq.n	60d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    60c6:	2100      	movs	r1, #0
    60c8:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    60cc:	f3af 8000 	nop.w
    60d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    60d2:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    60d6:	1a0a      	subs	r2, r1, r0
    60d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    60de:	18c9      	adds	r1, r1, r3
    60e0:	1a08      	subs	r0, r1, r0
    60e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    60e6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    60ea:	bf98      	it	ls
    60ec:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    60f0:	d80b      	bhi.n	610a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    60f2:	4632      	mov	r2, r6
    60f4:	463b      	mov	r3, r7
    60f6:	a90a      	add	r1, sp, #40	; 0x28
    60f8:	483f      	ldr	r0, [pc, #252]	; (61f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    60fa:	f8cd a000 	str.w	sl, [sp]
    60fe:	f7fe facd 	bl	469c <MPSL_IRQ_RADIO_Handler+0xb4>
    6102:	9903      	ldr	r1, [sp, #12]
    6104:	4308      	orrs	r0, r1
    6106:	d145      	bne.n	6194 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    6108:	e05f      	b.n	61ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    610a:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    610e:	aa05      	add	r2, sp, #20
    6110:	a903      	add	r1, sp, #12
    6112:	4658      	mov	r0, fp
    6114:	f000 fd62 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6118:	f001 fa78 	bl	760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    611c:	f000 fd42 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6120:	4682      	mov	sl, r0
    6122:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    6126:	2820      	cmp	r0, #32
    6128:	d00a      	beq.n	6140 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    612a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    612e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6132:	1d80      	adds	r0, r0, #6
    6134:	f145 0100 	adc.w	r1, r5, #0
    6138:	181e      	adds	r6, r3, r0
    613a:	eb42 0701 	adc.w	r7, r2, r1
    613e:	e024      	b.n	618a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    6140:	360a      	adds	r6, #10
    6142:	f147 0700 	adc.w	r7, r7, #0
    6146:	f1bb 0f00 	cmp.w	fp, #0
    614a:	d017      	beq.n	617c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    614c:	f001 fd5e 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6150:	b9a0      	cbnz	r0, 617c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    6152:	f001 fc33 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6156:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    615a:	bf08      	it	eq
    615c:	200d      	moveq	r0, #13
    615e:	d00b      	beq.n	6178 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    6160:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6164:	3856      	subs	r0, #86	; 0x56
    6166:	bf08      	it	eq
    6168:	201c      	moveq	r0, #28
    616a:	d005      	beq.n	6178 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    616c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6170:	389f      	subs	r0, #159	; 0x9f
    6172:	bf14      	ite	ne
    6174:	4628      	movne	r0, r5
    6176:	2032      	moveq	r0, #50	; 0x32
    6178:	1986      	adds	r6, r0, r6
    617a:	416f      	adcs	r7, r5
    617c:	9803      	ldr	r0, [sp, #12]
    617e:	4582      	cmp	sl, r0
    6180:	d903      	bls.n	618a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    6182:	ebaa 0000 	sub.w	r0, sl, r0
    6186:	1986      	adds	r6, r0, r6
    6188:	416f      	adcs	r7, r5
    618a:	201f      	movs	r0, #31
    618c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    6190:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    6194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6198:	f000 fca2 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    619c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    61a0:	1880      	adds	r0, r0, r2
    61a2:	eb41 0205 	adc.w	r2, r1, r5
    61a6:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    61aa:	1840      	adds	r0, r0, r1
    61ac:	eb42 0105 	adc.w	r1, r2, r5
    61b0:	1c40      	adds	r0, r0, #1
    61b2:	f141 0100 	adc.w	r1, r1, #0
    61b6:	f1b9 0f00 	cmp.w	r9, #0
    61ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
    61be:	d004      	beq.n	61ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    61c0:	2100      	movs	r1, #0
    61c2:	f240 50fa 	movw	r0, #1530	; 0x5fa
    61c6:	f3af 8000 	nop.w
    61ca:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    61ce:	f88d 0000 	strb.w	r0, [sp]
    61d2:	f89d 0000 	ldrb.w	r0, [sp]
    61d6:	2800      	cmp	r0, #0
    61d8:	f47f ae78 	bne.w	5ecc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    61dc:	b015      	add	sp, #84	; 0x54
    61de:	2001      	movs	r0, #1
    61e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61e4:	e000ed04 	.word	0xe000ed04
    61e8:	00000000 	.word	0x00000000
    61ec:	20000ad0 	.word	0x20000ad0
    61f0:	20000a50 	.word	0x20000a50
    61f4:	1e847fff 	.word	0x1e847fff
    61f8:	0f424000 	.word	0x0f424000

000061fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    61fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6200:	4d9d      	ldr	r5, [pc, #628]	; (6478 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    6202:	b08c      	sub	sp, #48	; 0x30
    6204:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    6208:	2000      	movs	r0, #0
    620a:	9007      	str	r0, [sp, #28]
    620c:	9008      	str	r0, [sp, #32]
    620e:	2001      	movs	r0, #1
    6210:	4c9a      	ldr	r4, [pc, #616]	; (647c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    6212:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    6216:	f04f 0800 	mov.w	r8, #0
    621a:	4607      	mov	r7, r0
    621c:	9006      	str	r0, [sp, #24]
    621e:	b124      	cbz	r4, 622a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    6220:	2100      	movs	r1, #0
    6222:	f240 70a5 	movw	r0, #1957	; 0x7a5
    6226:	f3af 8000 	nop.w
    622a:	9806      	ldr	r0, [sp, #24]
    622c:	2800      	cmp	r0, #0
    622e:	d03c      	beq.n	62aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    6230:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    6234:	b124      	cbz	r4, 6240 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    6236:	2100      	movs	r1, #0
    6238:	f240 70aa 	movw	r0, #1962	; 0x7aa
    623c:	f3af 8000 	nop.w
    6240:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    6244:	2240      	movs	r2, #64	; 0x40
    6246:	ea27 060a 	bic.w	r6, r7, sl
    624a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    624e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    6252:	4683      	mov	fp, r0
    6254:	f003 ff74 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6258:	b124      	cbz	r4, 6264 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    625a:	2100      	movs	r1, #0
    625c:	f240 503c 	movw	r0, #1340	; 0x53c
    6260:	f3af 8000 	nop.w
    6264:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    6268:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    626c:	4428      	add	r0, r5
    626e:	4429      	add	r1, r5
    6270:	9000      	str	r0, [sp, #0]
    6272:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    6274:	8502      	strh	r2, [r0, #40]	; 0x28
    6276:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    627a:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    627e:	b124      	cbz	r4, 628a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    6280:	2100      	movs	r1, #0
    6282:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6286:	f3af 8000 	nop.w
    628a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    628e:	f88d 0008 	strb.w	r0, [sp, #8]
    6292:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6296:	b178      	cbz	r0, 62b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    6298:	2c00      	cmp	r4, #0
    629a:	bf1c      	itt	ne
    629c:	2100      	movne	r1, #0
    629e:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    62a2:	d0bc      	beq.n	621e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    62a4:	f3af 8000 	nop.w
    62a8:	e7b9      	b.n	621e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    62aa:	4875      	ldr	r0, [pc, #468]	; (6480 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    62ac:	2800      	cmp	r0, #0
    62ae:	bf18      	it	ne
    62b0:	f3af 8000 	nopne.w
    62b4:	b662      	cpsie	i
    62b6:	e7bb      	b.n	6230 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    62b8:	b124      	cbz	r4, 62c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    62ba:	2100      	movs	r1, #0
    62bc:	f240 70b4 	movw	r0, #1972	; 0x7b4
    62c0:	f3af 8000 	nop.w
    62c4:	980c      	ldr	r0, [sp, #48]	; 0x30
    62c6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    62ca:	2803      	cmp	r0, #3
    62cc:	d17e      	bne.n	63cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    62ce:	9a00      	ldr	r2, [sp, #0]
    62d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    62d2:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    62d6:	4288      	cmp	r0, r1
    62d8:	bf14      	ite	ne
    62da:	f04f 0a00 	movne.w	sl, #0
    62de:	f04f 0a01 	moveq.w	sl, #1
    62e2:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    62e6:	4683      	mov	fp, r0
    62e8:	2220      	movs	r2, #32
    62ea:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    62ee:	e003      	b.n	62f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    62f0:	4602      	mov	r2, r0
    62f2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    62f6:	7840      	ldrb	r0, [r0, #1]
    62f8:	4288      	cmp	r0, r1
    62fa:	d002      	beq.n	6302 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    62fc:	2820      	cmp	r0, #32
    62fe:	d00a      	beq.n	6316 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6300:	e7f6      	b.n	62f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    6302:	2820      	cmp	r0, #32
    6304:	d007      	beq.n	6316 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6306:	4583      	cmp	fp, r0
    6308:	d107      	bne.n	631a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    630a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    630e:	7840      	ldrb	r0, [r0, #1]
    6310:	f88c 0000 	strb.w	r0, [ip]
    6314:	e007      	b.n	6326 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    6316:	4640      	mov	r0, r8
    6318:	e00c      	b.n	6334 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    631a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    631e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    6322:	7840      	ldrb	r0, [r0, #1]
    6324:	7048      	strb	r0, [r1, #1]
    6326:	b124      	cbz	r4, 6332 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    6328:	2100      	movs	r1, #0
    632a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    632e:	f3af 8000 	nop.w
    6332:	4638      	mov	r0, r7
    6334:	46c3      	mov	fp, r8
    6336:	ea10 0f0a 	tst.w	r0, sl
    633a:	bf18      	it	ne
    633c:	46bb      	movne	fp, r7
    633e:	2800      	cmp	r0, #0
    6340:	d04e      	beq.n	63e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    6342:	b124      	cbz	r4, 634e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    6344:	2100      	movs	r1, #0
    6346:	f240 70b9 	movw	r0, #1977	; 0x7b9
    634a:	f3af 8000 	nop.w
    634e:	4632      	mov	r2, r6
    6350:	2001      	movs	r0, #1
    6352:	990c      	ldr	r1, [sp, #48]	; 0x30
    6354:	f7fe ffce 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6358:	b124      	cbz	r4, 6364 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    635a:	2100      	movs	r1, #0
    635c:	f240 70c2 	movw	r0, #1986	; 0x7c2
    6360:	f3af 8000 	nop.w
    6364:	4847      	ldr	r0, [pc, #284]	; (6484 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    6366:	2800      	cmp	r0, #0
    6368:	bf18      	it	ne
    636a:	f3af 8000 	nopne.w
    636e:	f3ef 8010 	mrs	r0, PRIMASK
    6372:	b672      	cpsid	i
    6374:	9006      	str	r0, [sp, #24]
    6376:	b124      	cbz	r4, 6382 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    6378:	2100      	movs	r1, #0
    637a:	f240 70c7 	movw	r0, #1991	; 0x7c7
    637e:	f3af 8000 	nop.w
    6382:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    6386:	f88d 0008 	strb.w	r0, [sp, #8]
    638a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    638e:	b138      	cbz	r0, 63a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    6390:	2c00      	cmp	r4, #0
    6392:	bf1c      	itt	ne
    6394:	2100      	movne	r1, #0
    6396:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    639a:	f43f af40 	beq.w	621e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    639e:	e781      	b.n	62a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    63a0:	f1bb 0f00 	cmp.w	fp, #0
    63a4:	d009      	beq.n	63ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    63a6:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    63aa:	2820      	cmp	r0, #32
    63ac:	d105      	bne.n	63ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    63ae:	4631      	mov	r1, r6
    63b0:	2002      	movs	r0, #2
    63b2:	f7fe ffd1 	bl	5358 <MPSL_IRQ_RADIO_Handler+0xd70>
    63b6:	9008      	str	r0, [sp, #32]
    63b8:	b1f8      	cbz	r0, 63fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    63ba:	b124      	cbz	r4, 63c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    63bc:	2100      	movs	r1, #0
    63be:	f240 70df 	movw	r0, #2015	; 0x7df
    63c2:	f3af 8000 	nop.w
    63c6:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    63ca:	e000      	b.n	63ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    63cc:	e008      	b.n	63e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    63ce:	ea27 0000 	bic.w	r0, r7, r0
    63d2:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    63d6:	20ff      	movs	r0, #255	; 0xff
    63d8:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    63dc:	2001      	movs	r0, #1
    63de:	9007      	str	r0, [sp, #28]
    63e0:	b124      	cbz	r4, 63ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    63e2:	2100      	movs	r1, #0
    63e4:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    63e8:	f3af 8000 	nop.w
    63ec:	9808      	ldr	r0, [sp, #32]
    63ee:	4e26      	ldr	r6, [pc, #152]	; (6488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    63f0:	2802      	cmp	r0, #2
    63f2:	d009      	beq.n	6408 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    63f4:	2801      	cmp	r0, #1
    63f6:	d027      	beq.n	6448 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    63f8:	e02b      	b.n	6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    63fa:	b354      	cbz	r4, 6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    63fc:	2100      	movs	r1, #0
    63fe:	f240 70da 	movw	r0, #2010	; 0x7da
    6402:	f3af 8000 	nop.w
    6406:	e7ec      	b.n	63e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    6408:	f000 fec8 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    640c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    6410:	ebb3 0c00 	subs.w	ip, r3, r0
    6414:	eb72 0c01 	sbcs.w	ip, r2, r1
    6418:	d204      	bcs.n	6424 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    641a:	f240 71ee 	movw	r1, #2030	; 0x7ee
    641e:	2070      	movs	r0, #112	; 0x70
    6420:	f001 fc6c 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6424:	1a18      	subs	r0, r3, r0
    6426:	eb62 0101 	sbc.w	r1, r2, r1
    642a:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    642e:	f171 0100 	sbcs.w	r1, r1, #0
    6432:	d304      	bcc.n	643e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    6434:	f240 71ef 	movw	r1, #2031	; 0x7ef
    6438:	2070      	movs	r0, #112	; 0x70
    643a:	f001 fc5f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    643e:	f003 fcef 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6442:	6871      	ldr	r1, [r6, #4]
    6444:	b129      	cbz	r1, 6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6446:	e003      	b.n	6450 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    6448:	6871      	ldr	r1, [r6, #4]
    644a:	f04f 30ff 	mov.w	r0, #4294967295
    644e:	b101      	cbz	r1, 6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6450:	4788      	blx	r1
    6452:	9806      	ldr	r0, [sp, #24]
    6454:	b148      	cbz	r0, 646a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    6456:	b124      	cbz	r4, 6462 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    6458:	2100      	movs	r1, #0
    645a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    645e:	f3af 8000 	nop.w
    6462:	9807      	ldr	r0, [sp, #28]
    6464:	b00d      	add	sp, #52	; 0x34
    6466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    646a:	4805      	ldr	r0, [pc, #20]	; (6480 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    646c:	2800      	cmp	r0, #0
    646e:	bf18      	it	ne
    6470:	f3af 8000 	nopne.w
    6474:	b662      	cpsie	i
    6476:	e7ee      	b.n	6456 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    6478:	20000ad0 	.word	0x20000ad0
	...
    6488:	20000120 	.word	0x20000120

0000648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    648c:	b510      	push	{r4, lr}
    648e:	2820      	cmp	r0, #32
    6490:	d211      	bcs.n	64b6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    6492:	490e      	ldr	r1, [pc, #56]	; (64cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    6494:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    6498:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    649c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    64a0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    64a4:	b13b      	cbz	r3, 64b6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    64a6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    64aa:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    64ae:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    64b2:	2a01      	cmp	r2, #1
    64b4:	d001      	beq.n	64ba <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    64b6:	2000      	movs	r0, #0
    64b8:	bd10      	pop	{r4, pc}
    64ba:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    64be:	4601      	mov	r1, r0
    64c0:	2000      	movs	r0, #0
    64c2:	f7fe ff17 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    64c6:	2001      	movs	r0, #1
    64c8:	bd10      	pop	{r4, pc}
    64ca:	0000      	.short	0x0000
    64cc:	20000ad0 	.word	0x20000ad0

000064d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    64d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64d4:	4e86      	ldr	r6, [pc, #536]	; (66f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    64d6:	4680      	mov	r8, r0
    64d8:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    64dc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    64e0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    64e4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    64e8:	2800      	cmp	r0, #0
    64ea:	d071      	beq.n	65d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    64ec:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    64f0:	4d80      	ldr	r5, [pc, #512]	; (66f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    64f2:	b125      	cbz	r5, 64fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    64f4:	2100      	movs	r1, #0
    64f6:	f640 307b 	movw	r0, #2939	; 0xb7b
    64fa:	f3af 8000 	nop.w
    64fe:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    6502:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6506:	2801      	cmp	r0, #1
    6508:	d018      	beq.n	653c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    650a:	b2c0      	uxtb	r0, r0
    650c:	2804      	cmp	r0, #4
    650e:	bf1c      	itt	ne
    6510:	2805      	cmpne	r0, #5
    6512:	2806      	cmpne	r0, #6
    6514:	d061      	beq.n	65da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    6516:	b12d      	cbz	r5, 6524 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    6518:	f04f 0100 	mov.w	r1, #0
    651c:	f640 3087 	movw	r0, #2951	; 0xb87
    6520:	f3af 8000 	nop.w
    6524:	f003 fdb2 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6528:	b125      	cbz	r5, 6534 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    652a:	2100      	movs	r1, #0
    652c:	f640 308b 	movw	r0, #2955	; 0xb8b
    6530:	f3af 8000 	nop.w
    6534:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6538:	2801      	cmp	r0, #1
    653a:	d1e6      	bne.n	650a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    653c:	2401      	movs	r4, #1
    653e:	b125      	cbz	r5, 654a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    6540:	2100      	movs	r1, #0
    6542:	f640 3092 	movw	r0, #2962	; 0xb92
    6546:	f3af 8000 	nop.w
    654a:	2c00      	cmp	r4, #0
    654c:	d04b      	beq.n	65e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    654e:	2000      	movs	r0, #0
    6550:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6554:	b125      	cbz	r5, 6560 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    6556:	2100      	movs	r1, #0
    6558:	f640 3097 	movw	r0, #2967	; 0xb97
    655c:	f3af 8000 	nop.w
    6560:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    6564:	2001      	movs	r0, #1
    6566:	ea20 090b 	bic.w	r9, r0, fp
    656a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    656e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    6572:	2240      	movs	r2, #64	; 0x40
    6574:	f003 fde4 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6578:	b125      	cbz	r5, 6584 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    657a:	2100      	movs	r1, #0
    657c:	f240 503c 	movw	r0, #1340	; 0x53c
    6580:	f3af 8000 	nop.w
    6584:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    6588:	eb00 0a06 	add.w	sl, r0, r6
    658c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    6590:	4430      	add	r0, r6
    6592:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    6594:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    6598:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    659c:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    65a0:	b125      	cbz	r5, 65ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    65a2:	2100      	movs	r1, #0
    65a4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    65a8:	f3af 8000 	nop.w
    65ac:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    65b0:	f88d 0000 	strb.w	r0, [sp]
    65b4:	f89d 0000 	ldrb.w	r0, [sp]
    65b8:	b1e0      	cbz	r0, 65f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    65ba:	2d00      	cmp	r5, #0
    65bc:	bf1c      	itt	ne
    65be:	2100      	movne	r1, #0
    65c0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    65c4:	d0bb      	beq.n	653e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    65c6:	bf00      	nop
    65c8:	f3af 8000 	nop.w
    65cc:	e7b7      	b.n	653e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    65ce:	e7ff      	b.n	65d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    65d0:	f640 3172 	movw	r1, #2930	; 0xb72
    65d4:	2070      	movs	r0, #112	; 0x70
    65d6:	f001 fb91 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    65da:	464a      	mov	r2, r9
    65dc:	4641      	mov	r1, r8
    65de:	2001      	movs	r0, #1
    65e0:	f7fe fe88 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    65e4:	e7a0      	b.n	6528 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    65e6:	4844      	ldr	r0, [pc, #272]	; (66f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    65e8:	2800      	cmp	r0, #0
    65ea:	bf18      	it	ne
    65ec:	f3af 8000 	nopne.w
    65f0:	b662      	cpsie	i
    65f2:	e7ac      	b.n	654e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    65f4:	b125      	cbz	r5, 6600 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    65f6:	2100      	movs	r1, #0
    65f8:	f640 30a1 	movw	r0, #2977	; 0xba1
    65fc:	f3af 8000 	nop.w
    6600:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    6604:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    6608:	4640      	mov	r0, r8
    660a:	461c      	mov	r4, r3
    660c:	f04f 0b20 	mov.w	fp, #32
    6610:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    6614:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    6618:	e004      	b.n	6624 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    661a:	46a3      	mov	fp, r4
    661c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    6620:	f89c 4001 	ldrb.w	r4, [ip, #1]
    6624:	4284      	cmp	r4, r0
    6626:	d002      	beq.n	662e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    6628:	2c20      	cmp	r4, #32
    662a:	d02b      	beq.n	6684 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    662c:	e7f5      	b.n	661a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    662e:	2c20      	cmp	r4, #32
    6630:	d028      	beq.n	6684 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    6632:	42a3      	cmp	r3, r4
    6634:	d104      	bne.n	6640 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    6636:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    663a:	7840      	ldrb	r0, [r0, #1]
    663c:	7008      	strb	r0, [r1, #0]
    663e:	e005      	b.n	664c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    6640:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    6644:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    6648:	7840      	ldrb	r0, [r0, #1]
    664a:	7048      	strb	r0, [r1, #1]
    664c:	f1ba 0f00 	cmp.w	sl, #0
    6650:	d011      	beq.n	6676 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6652:	b125      	cbz	r5, 665e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    6654:	2100      	movs	r1, #0
    6656:	f240 409c 	movw	r0, #1180	; 0x49c
    665a:	f3af 8000 	nop.w
    665e:	f89a 0000 	ldrb.w	r0, [sl]
    6662:	42a0      	cmp	r0, r4
    6664:	d107      	bne.n	6676 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6666:	b125      	cbz	r5, 6672 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    6668:	2100      	movs	r1, #0
    666a:	f240 409f 	movw	r0, #1183	; 0x49f
    666e:	f3af 8000 	nop.w
    6672:	f88a b000 	strb.w	fp, [sl]
    6676:	b15d      	cbz	r5, 6690 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6678:	2100      	movs	r1, #0
    667a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    667e:	f3af 8000 	nop.w
    6682:	e000      	b.n	6686 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    6684:	b125      	cbz	r5, 6690 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6686:	2100      	movs	r1, #0
    6688:	f640 30a5 	movw	r0, #2981	; 0xba5
    668c:	f3af 8000 	nop.w
    6690:	481a      	ldr	r0, [pc, #104]	; (66fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    6692:	2800      	cmp	r0, #0
    6694:	bf18      	it	ne
    6696:	f3af 8000 	nopne.w
    669a:	f3ef 8410 	mrs	r4, PRIMASK
    669e:	b672      	cpsid	i
    66a0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    66a4:	f88d 0000 	strb.w	r0, [sp]
    66a8:	f89d 0000 	ldrb.w	r0, [sp]
    66ac:	b138      	cbz	r0, 66be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    66ae:	2d00      	cmp	r5, #0
    66b0:	bf1c      	itt	ne
    66b2:	2100      	movne	r1, #0
    66b4:	f640 30ab 	movwne	r0, #2987	; 0xbab
    66b8:	f43f af41 	beq.w	653e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    66bc:	e784      	b.n	65c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    66be:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    66c2:	20ff      	movs	r0, #255	; 0xff
    66c4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    66c8:	b154      	cbz	r4, 66e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    66ca:	2d00      	cmp	r5, #0
    66cc:	bf08      	it	eq
    66ce:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66d2:	2100      	movs	r1, #0
    66d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    66d8:	f3af 8000 	nop.w
    66dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66e0:	4805      	ldr	r0, [pc, #20]	; (66f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    66e2:	2800      	cmp	r0, #0
    66e4:	bf18      	it	ne
    66e6:	f3af 8000 	nopne.w
    66ea:	b662      	cpsie	i
    66ec:	e7ed      	b.n	66ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    66ee:	0000      	.short	0x0000
    66f0:	20000ad0 	.word	0x20000ad0
	...

00006700 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    6700:	b570      	push	{r4, r5, r6, lr}
    6702:	460d      	mov	r5, r1
    6704:	4606      	mov	r6, r0
    6706:	f001 fa6f 	bl	7be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    670a:	480d      	ldr	r0, [pc, #52]	; (6740 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    670c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    6710:	2400      	movs	r4, #0
    6712:	3880      	subs	r0, #128	; 0x80
    6714:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    6718:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    671c:	b129      	cbz	r1, 672a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    671e:	1c61      	adds	r1, r4, #1
    6720:	b2cc      	uxtb	r4, r1
    6722:	2c20      	cmp	r4, #32
    6724:	d3f8      	bcc.n	6718 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    6726:	2020      	movs	r0, #32
    6728:	bd70      	pop	{r4, r5, r6, pc}
    672a:	4806      	ldr	r0, [pc, #24]	; (6744 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    672c:	4621      	mov	r1, r4
    672e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6732:	e9c0 6500 	strd	r6, r5, [r0]
    6736:	2001      	movs	r0, #1
    6738:	f7fe fddc 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    673c:	4620      	mov	r0, r4
    673e:	bd70      	pop	{r4, r5, r6, pc}
    6740:	20000ad0 	.word	0x20000ad0
    6744:	20000650 	.word	0x20000650

00006748 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    6748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    674c:	f000 fd26 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6750:	4606      	mov	r6, r0
    6752:	460f      	mov	r7, r1
    6754:	f000 fe66 	bl	7424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    6758:	4c65      	ldr	r4, [pc, #404]	; (68f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    675a:	6860      	ldr	r0, [r4, #4]
    675c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6760:	bf1c      	itt	ne
    6762:	f04f 30ff 	movne.w	r0, #4294967295
    6766:	6060      	strne	r0, [r4, #4]
    6768:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    676c:	f8df b184 	ldr.w	fp, [pc, #388]	; 68f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    6770:	2500      	movs	r5, #0
    6772:	bb10      	cbnz	r0, 67ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6774:	f44f 710c 	mov.w	r1, #560	; 0x230
    6778:	6920      	ldr	r0, [r4, #16]
    677a:	f001 fa21 	bl	7bc0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    677e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    6782:	68a1      	ldr	r1, [r4, #8]
    6784:	1818      	adds	r0, r3, r0
    6786:	eb45 0305 	adc.w	r3, r5, r5
    678a:	1809      	adds	r1, r1, r0
    678c:	eb42 0003 	adc.w	r0, r2, r3
    6790:	1a71      	subs	r1, r6, r1
    6792:	eb77 0000 	sbcs.w	r0, r7, r0
    6796:	d310      	bcc.n	67ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6798:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    679c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    67a0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    67a4:	6840      	ldr	r0, [r0, #4]
    67a6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    67aa:	680a      	ldr	r2, [r1, #0]
    67ac:	2108      	movs	r1, #8
    67ae:	4790      	blx	r2
    67b0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    67b4:	2070      	movs	r0, #112	; 0x70
    67b6:	f001 faa1 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67ba:	7e60      	ldrb	r0, [r4, #25]
    67bc:	b180      	cbz	r0, 67e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    67be:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    67c2:	f88d 0000 	strb.w	r0, [sp]
    67c6:	f89d 0000 	ldrb.w	r0, [sp]
    67ca:	b148      	cbz	r0, 67e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    67cc:	f000 fc5c 	bl	7088 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    67d0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    67d4:	b150      	cbz	r0, 67ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    67d6:	f240 31cd 	movw	r1, #973	; 0x3cd
    67da:	2070      	movs	r0, #112	; 0x70
    67dc:	f001 fa8e 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67e0:	1cf0      	adds	r0, r6, #3
    67e2:	f147 0100 	adc.w	r1, r7, #0
    67e6:	f000 fb29 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    67ea:	e7f1      	b.n	67d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    67ec:	2001      	movs	r0, #1
    67ee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    67f2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    67f6:	2820      	cmp	r0, #32
    67f8:	d020      	beq.n	683c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    67fa:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    67fe:	2020      	movs	r0, #32
    6800:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    6804:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    6808:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    680c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    6810:	6025      	str	r5, [r4, #0]
    6812:	f000 ff01 	bl	7618 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    6816:	f884 0020 	strb.w	r0, [r4, #32]
    681a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    681e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    6822:	eb00 0a04 	add.w	sl, r0, r4
    6826:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    682a:	2820      	cmp	r0, #32
    682c:	d01c      	beq.n	6868 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    682e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    6832:	f89b 001a 	ldrb.w	r0, [fp, #26]
    6836:	2801      	cmp	r0, #1
    6838:	d005      	beq.n	6846 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    683a:	e015      	b.n	6868 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    683c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6840:	2070      	movs	r0, #112	; 0x70
    6842:	f001 fa5b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6846:	2201      	movs	r2, #1
    6848:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    684c:	4630      	mov	r0, r6
    684e:	4639      	mov	r1, r7
    6850:	f7fe f8bc 	bl	49cc <MPSL_IRQ_RADIO_Handler+0x3e4>
    6854:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    6858:	1a12      	subs	r2, r2, r0
    685a:	eb73 0201 	sbcs.w	r2, r3, r1
    685e:	bf24      	itt	cs
    6860:	f10b 0208 	addcs.w	r2, fp, #8
    6864:	e9c2 0100 	strdcs	r0, r1, [r2]
    6868:	4641      	mov	r1, r8
    686a:	2001      	movs	r0, #1
    686c:	f7fe fd74 	bl	5358 <MPSL_IRQ_RADIO_Handler+0xd70>
    6870:	0007      	movs	r7, r0
    6872:	d0f9      	beq.n	6868 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6874:	4820      	ldr	r0, [pc, #128]	; (68f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    6876:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    687a:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    687e:	2802      	cmp	r0, #2
    6880:	d104      	bne.n	688c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    6882:	4642      	mov	r2, r8
    6884:	4649      	mov	r1, r9
    6886:	2006      	movs	r0, #6
    6888:	f7fe fd34 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    688c:	20ff      	movs	r0, #255	; 0xff
    688e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    6892:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    6896:	f8df 8064 	ldr.w	r8, [pc, #100]	; 68fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    689a:	2820      	cmp	r0, #32
    689c:	bf1c      	itt	ne
    689e:	f898 0001 	ldrbne.w	r0, [r8, #1]
    68a2:	f001 fafd 	blne	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    68a6:	f894 0020 	ldrb.w	r0, [r4, #32]
    68aa:	b128      	cbz	r0, 68b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    68ac:	f000 fe90 	bl	75d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    68b0:	f884 5020 	strb.w	r5, [r4, #32]
    68b4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    68b8:	2f02      	cmp	r7, #2
    68ba:	d00f      	beq.n	68dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    68bc:	2f01      	cmp	r7, #1
    68be:	bf18      	it	ne
    68c0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68c4:	f04f 30ff 	mov.w	r0, #4294967295
    68c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    68cc:	2900      	cmp	r1, #0
    68ce:	bf08      	it	eq
    68d0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68d4:	b001      	add	sp, #4
    68d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68da:	4708      	bx	r1
    68dc:	68a0      	ldr	r0, [r4, #8]
    68de:	1b80      	subs	r0, r0, r6
    68e0:	f003 fa9e 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    68e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    68e8:	2900      	cmp	r1, #0
    68ea:	d1f3      	bne.n	68d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    68ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68f0:	20000ad0 	.word	0x20000ad0
    68f4:	20000650 	.word	0x20000650
    68f8:	20000a50 	.word	0x20000a50
    68fc:	20000120 	.word	0x20000120

00006900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    6900:	b570      	push	{r4, r5, r6, lr}
    6902:	4c42      	ldr	r4, [pc, #264]	; (6a0c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    6904:	4605      	mov	r5, r0
    6906:	b082      	sub	sp, #8
    6908:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    690c:	2820      	cmp	r0, #32
    690e:	d008      	beq.n	6922 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    6910:	6860      	ldr	r0, [r4, #4]
    6912:	f1b0 3fff 	cmp.w	r0, #4294967295
    6916:	d009      	beq.n	692c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    6918:	f640 21b6 	movw	r1, #2742	; 0xab6
    691c:	2070      	movs	r0, #112	; 0x70
    691e:	f001 f9ed 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6922:	f640 21b5 	movw	r1, #2741	; 0xab5
    6926:	2070      	movs	r0, #112	; 0x70
    6928:	f001 f9e8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    692c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6930:	4937      	ldr	r1, [pc, #220]	; (6a10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    6932:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    6936:	68b0      	ldr	r0, [r6, #8]
    6938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    693c:	f003 fa70 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6940:	4602      	mov	r2, r0
    6942:	8af0      	ldrh	r0, [r6, #22]
    6944:	7d31      	ldrb	r1, [r6, #20]
    6946:	4b33      	ldr	r3, [pc, #204]	; (6a14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    6948:	4408      	add	r0, r1
    694a:	1c40      	adds	r0, r0, #1
    694c:	1811      	adds	r1, r2, r0
    694e:	429a      	cmp	r2, r3
    6950:	d817      	bhi.n	6982 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    6952:	4a31      	ldr	r2, [pc, #196]	; (6a18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    6954:	4290      	cmp	r0, r2
    6956:	dc1b      	bgt.n	6990 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    6958:	f1c2 0c00 	rsb	ip, r2, #0
    695c:	4560      	cmp	r0, ip
    695e:	db1e      	blt.n	699e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    6960:	0056      	lsls	r6, r2, #1
    6962:	428e      	cmp	r6, r1
    6964:	bfdc      	itt	le
    6966:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    696a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    696e:	dd05      	ble.n	697c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    6970:	2900      	cmp	r1, #0
    6972:	bfbc      	itt	lt
    6974:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    6978:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    697c:	1948      	adds	r0, r1, r5
    697e:	4299      	cmp	r1, r3
    6980:	d904      	bls.n	698c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    6982:	f240 517f 	movw	r1, #1407	; 0x57f
    6986:	2070      	movs	r0, #112	; 0x70
    6988:	f001 f9b8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    698c:	4295      	cmp	r5, r2
    698e:	dd04      	ble.n	699a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    6990:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    6994:	2070      	movs	r0, #112	; 0x70
    6996:	f001 f9b1 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    699a:	4565      	cmp	r5, ip
    699c:	da04      	bge.n	69a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    699e:	f240 5181 	movw	r1, #1409	; 0x581
    69a2:	2070      	movs	r0, #112	; 0x70
    69a4:	f001 f9aa 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69a8:	4286      	cmp	r6, r0
    69aa:	bfdc      	itt	le
    69ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    69b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    69b4:	dd05      	ble.n	69c2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    69b6:	2800      	cmp	r0, #0
    69b8:	bfbc      	itt	lt
    69ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    69be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    69c2:	aa01      	add	r2, sp, #4
    69c4:	4669      	mov	r1, sp
    69c6:	f000 f909 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    69ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    69ce:	280f      	cmp	r0, #15
    69d0:	bf8c      	ite	hi
    69d2:	2001      	movhi	r0, #1
    69d4:	2000      	movls	r0, #0
    69d6:	9900      	ldr	r1, [sp, #0]
    69d8:	4408      	add	r0, r1
    69da:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    69de:	6061      	str	r1, [r4, #4]
    69e0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    69e4:	f88d 0000 	strb.w	r0, [sp]
    69e8:	f89d 0000 	ldrb.w	r0, [sp]
    69ec:	2800      	cmp	r0, #0
    69ee:	bf04      	itt	eq
    69f0:	b002      	addeq	sp, #8
    69f2:	bd70      	popeq	{r4, r5, r6, pc}
    69f4:	2005      	movs	r0, #5
    69f6:	f000 fbf3 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    69fa:	2800      	cmp	r0, #0
    69fc:	bf1c      	itt	ne
    69fe:	b002      	addne	sp, #8
    6a00:	bd70      	popne	{r4, r5, r6, pc}
    6a02:	f640 21bd 	movw	r1, #2749	; 0xabd
    6a06:	2070      	movs	r0, #112	; 0x70
    6a08:	f001 f978 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a0c:	20000ad0 	.word	0x20000ad0
    6a10:	20000650 	.word	0x20000650
    6a14:	1e847fff 	.word	0x1e847fff
    6a18:	0f424000 	.word	0x0f424000

00006a1c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    6a1c:	b570      	push	{r4, r5, r6, lr}
    6a1e:	4c1e      	ldr	r4, [pc, #120]	; (6a98 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    6a20:	2120      	movs	r1, #32
    6a22:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    6a26:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    6a2a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    6a2e:	2000      	movs	r0, #0
    6a30:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    6a34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    6a38:	1e42      	subs	r2, r0, #1
    6a3a:	e9c4 0200 	strd	r0, r2, [r4]
    6a3e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6a42:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    6a46:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    6a4a:	f884 0020 	strb.w	r0, [r4, #32]
    6a4e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    6a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6a56:	1e41      	subs	r1, r0, #1
    6a58:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    6a5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6a60:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    6a64:	2210      	movs	r2, #16
    6a66:	7088      	strb	r0, [r1, #2]
    6a68:	f801 0f04 	strb.w	r0, [r1, #4]!
    6a6c:	1e52      	subs	r2, r2, #1
    6a6e:	d1fa      	bne.n	6a66 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    6a70:	f000 fddc 	bl	762c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    6a74:	4d09      	ldr	r5, [pc, #36]	; (6a9c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    6a76:	2601      	movs	r6, #1
    6a78:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    6a7c:	20ff      	movs	r0, #255	; 0xff
    6a7e:	7028      	strb	r0, [r5, #0]
    6a80:	4807      	ldr	r0, [pc, #28]	; (6aa0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    6a82:	f001 f9ef 	bl	7e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6a86:	7068      	strb	r0, [r5, #1]
    6a88:	f001 fa5a 	bl	7f40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    6a8c:	60a8      	str	r0, [r5, #8]
    6a8e:	f000 fd5f 	bl	7550 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    6a92:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    6a96:	bd70      	pop	{r4, r5, r6, pc}
    6a98:	20000ad0 	.word	0x20000ad0
    6a9c:	20000120 	.word	0x20000120
    6aa0:	00005225 	.word	0x00005225

00006aa4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    6aa4:	b570      	push	{r4, r5, r6, lr}
    6aa6:	4605      	mov	r5, r0
    6aa8:	2001      	movs	r0, #1
    6aaa:	fa00 f405 	lsl.w	r4, r0, r5
    6aae:	460e      	mov	r6, r1
    6ab0:	2a00      	cmp	r2, #0
    6ab2:	bf08      	it	eq
    6ab4:	4808      	ldreq	r0, [pc, #32]	; (6ad8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    6ab6:	d00c      	beq.n	6ad2 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    6ab8:	2000      	movs	r0, #0
    6aba:	f000 fd2f 	bl	751c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    6abe:	00e9      	lsls	r1, r5, #3
    6ac0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6ac4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    6ac8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    6acc:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    6ad0:	4802      	ldr	r0, [pc, #8]	; (6adc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    6ad2:	6004      	str	r4, [r0, #0]
    6ad4:	bd70      	pop	{r4, r5, r6, pc}
    6ad6:	0000      	.short	0x0000
    6ad8:	4001f508 	.word	0x4001f508
    6adc:	4001f504 	.word	0x4001f504

00006ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    6ae0:	0e03      	lsrs	r3, r0, #24
    6ae2:	b430      	push	{r4, r5}
    6ae4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6ae8:	f8df c038 	ldr.w	ip, [pc, #56]	; 6b24 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    6aec:	0e09      	lsrs	r1, r1, #24
    6aee:	fba3 250c 	umull	r2, r5, r3, ip
    6af2:	fb01 510c 	mla	r1, r1, ip, r5
    6af6:	2400      	movs	r4, #0
    6af8:	fb03 1104 	mla	r1, r3, r4, r1
    6afc:	f647 73ff 	movw	r3, #32767	; 0x7fff
    6b00:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    6b04:	f643 5c09 	movw	ip, #15625	; 0x3d09
    6b08:	fb13 f30c 	smulbb	r3, r3, ip
    6b0c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6b10:	fb10 f00c 	smulbb	r0, r0, ip
    6b14:	f500 7080 	add.w	r0, r0, #256	; 0x100
    6b18:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    6b1c:	1880      	adds	r0, r0, r2
    6b1e:	4161      	adcs	r1, r4
    6b20:	bc30      	pop	{r4, r5}
    6b22:	4770      	bx	lr
    6b24:	1e848000 	.word	0x1e848000

00006b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    6b28:	b570      	push	{r4, r5, r6, lr}
    6b2a:	b084      	sub	sp, #16
    6b2c:	4615      	mov	r5, r2
    6b2e:	aa01      	add	r2, sp, #4
    6b30:	461c      	mov	r4, r3
    6b32:	9200      	str	r2, [sp, #0]
    6b34:	9e08      	ldr	r6, [sp, #32]
    6b36:	ab02      	add	r3, sp, #8
    6b38:	4a17      	ldr	r2, [pc, #92]	; (6b98 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    6b3a:	f003 faf2 	bl	a122 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    6b3e:	9801      	ldr	r0, [sp, #4]
    6b40:	f248 6237 	movw	r2, #34359	; 0x8637
    6b44:	0b41      	lsrs	r1, r0, #13
    6b46:	4351      	muls	r1, r2
    6b48:	0c09      	lsrs	r1, r1, #16
    6b4a:	4a14      	ldr	r2, [pc, #80]	; (6b9c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    6b4c:	024b      	lsls	r3, r1, #9
    6b4e:	fb01 0102 	mla	r1, r1, r2, r0
    6b52:	4813      	ldr	r0, [pc, #76]	; (6ba0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    6b54:	4348      	muls	r0, r1
    6b56:	0d42      	lsrs	r2, r0, #21
    6b58:	1898      	adds	r0, r3, r2
    6b5a:	f643 5309 	movw	r3, #15625	; 0x3d09
    6b5e:	fb12 f303 	smulbb	r3, r2, r3
    6b62:	f503 7280 	add.w	r2, r3, #256	; 0x100
    6b66:	f643 5c08 	movw	ip, #15624	; 0x3d08
    6b6a:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    6b6e:	4463      	add	r3, ip
    6b70:	b2d2      	uxtb	r2, r2
    6b72:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    6b76:	bf84      	itt	hi
    6b78:	2200      	movhi	r2, #0
    6b7a:	1c40      	addhi	r0, r0, #1
    6b7c:	7032      	strb	r2, [r6, #0]
    6b7e:	9b02      	ldr	r3, [sp, #8]
    6b80:	0a19      	lsrs	r1, r3, #8
    6b82:	061b      	lsls	r3, r3, #24
    6b84:	1818      	adds	r0, r3, r0
    6b86:	f141 0100 	adc.w	r1, r1, #0
    6b8a:	e9c4 0100 	strd	r0, r1, [r4]
    6b8e:	9801      	ldr	r0, [sp, #4]
    6b90:	6028      	str	r0, [r5, #0]
    6b92:	b004      	add	sp, #16
    6b94:	bd70      	pop	{r4, r5, r6, pc}
    6b96:	0000      	.short	0x0000
    6b98:	1e848000 	.word	0x1e848000
    6b9c:	ffffc2f7 	.word	0xffffc2f7
    6ba0:	00010c6f 	.word	0x00010c6f

00006ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    6ba4:	0b41      	lsrs	r1, r0, #13
    6ba6:	f248 6237 	movw	r2, #34359	; 0x8637
    6baa:	4351      	muls	r1, r2
    6bac:	0c0a      	lsrs	r2, r1, #16
    6bae:	4b09      	ldr	r3, [pc, #36]	; (6bd4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    6bb0:	0251      	lsls	r1, r2, #9
    6bb2:	fb02 0203 	mla	r2, r2, r3, r0
    6bb6:	4808      	ldr	r0, [pc, #32]	; (6bd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    6bb8:	4350      	muls	r0, r2
    6bba:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    6bbe:	306e      	adds	r0, #110	; 0x6e
    6bc0:	0d40      	lsrs	r0, r0, #21
    6bc2:	425b      	negs	r3, r3
    6bc4:	fb10 f303 	smulbb	r3, r0, r3
    6bc8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    6bcc:	bf88      	it	hi
    6bce:	1c49      	addhi	r1, r1, #1
    6bd0:	4408      	add	r0, r1
    6bd2:	4770      	bx	lr
    6bd4:	ffffc2f7 	.word	0xffffc2f7
    6bd8:	00010c6f 	.word	0x00010c6f

00006bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    6bdc:	0b43      	lsrs	r3, r0, #13
    6bde:	f248 6c37 	movw	ip, #34359	; 0x8637
    6be2:	fb03 f30c 	mul.w	r3, r3, ip
    6be6:	b430      	push	{r4, r5}
    6be8:	0c1b      	lsrs	r3, r3, #16
    6bea:	f8df c044 	ldr.w	ip, [pc, #68]	; 6c30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    6bee:	025c      	lsls	r4, r3, #9
    6bf0:	fb03 030c 	mla	r3, r3, ip, r0
    6bf4:	480f      	ldr	r0, [pc, #60]	; (6c34 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    6bf6:	4358      	muls	r0, r3
    6bf8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    6bfc:	eb04 000c 	add.w	r0, r4, ip
    6c00:	f643 5409 	movw	r4, #15625	; 0x3d09
    6c04:	fb1c f404 	smulbb	r4, ip, r4
    6c08:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    6c0c:	f643 5508 	movw	r5, #15624	; 0x3d08
    6c10:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    6c14:	442c      	add	r4, r5
    6c16:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6c1a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    6c1e:	bf84      	itt	hi
    6c20:	f04f 0c00 	movhi.w	ip, #0
    6c24:	1c40      	addhi	r0, r0, #1
    6c26:	6008      	str	r0, [r1, #0]
    6c28:	f882 c000 	strb.w	ip, [r2]
    6c2c:	bc30      	pop	{r4, r5}
    6c2e:	4770      	bx	lr
    6c30:	ffffc2f7 	.word	0xffffc2f7
    6c34:	00010c6f 	.word	0x00010c6f

00006c38 <MPSL_IRQ_RTC0_Handler>:
    6c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c3c:	2400      	movs	r4, #0
    6c3e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6cc0 <MPSL_IRQ_RTC0_Handler+0x88>
    6c42:	4d20      	ldr	r5, [pc, #128]	; (6cc4 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6c44:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    6c48:	f44f 78a0 	mov.w	r8, #320	; 0x140
    6c4c:	ea4f 0604 	mov.w	r6, r4
    6c50:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    6c54:	fa07 f004 	lsl.w	r0, r7, r4
    6c58:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    6c5c:	4202      	tst	r2, r0
    6c5e:	d01a      	beq.n	6c96 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c60:	4a18      	ldr	r2, [pc, #96]	; (6cc4 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6c62:	5852      	ldr	r2, [r2, r1]
    6c64:	b1ba      	cbz	r2, 6c96 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c66:	506e      	str	r6, [r5, r1]
    6c68:	00a1      	lsls	r1, r4, #2
    6c6a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6c6e:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    6c72:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    6c76:	f8d9 2000 	ldr.w	r2, [r9]
    6c7a:	1a89      	subs	r1, r1, r2
    6c7c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6c80:	2902      	cmp	r1, #2
    6c82:	d302      	bcc.n	6c8a <MPSL_IRQ_RTC0_Handler+0x52>
    6c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6c88:	d905      	bls.n	6c96 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c8a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6c8e:	1d20      	adds	r0, r4, #4
    6c90:	b2c0      	uxtb	r0, r0
    6c92:	f7fe fd6f 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6c96:	1c60      	adds	r0, r4, #1
    6c98:	b2c4      	uxtb	r4, r0
    6c9a:	2c03      	cmp	r4, #3
    6c9c:	d3d8      	bcc.n	6c50 <MPSL_IRQ_RTC0_Handler+0x18>
    6c9e:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    6ca2:	b128      	cbz	r0, 6cb0 <MPSL_IRQ_RTC0_Handler+0x78>
    6ca4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6ca8:	4807      	ldr	r0, [pc, #28]	; (6cc8 <MPSL_IRQ_RTC0_Handler+0x90>)
    6caa:	6881      	ldr	r1, [r0, #8]
    6cac:	1c49      	adds	r1, r1, #1
    6cae:	6081      	str	r1, [r0, #8]
    6cb0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6cb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6cb8:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    6cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cc0:	4000b504 	.word	0x4000b504
    6cc4:	4000b000 	.word	0x4000b000
    6cc8:	20000028 	.word	0x20000028

00006ccc <MPSL_IRQ_TIMER0_Handler>:
    6ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cd0:	4d38      	ldr	r5, [pc, #224]	; (6db4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    6cd2:	7828      	ldrb	r0, [r5, #0]
    6cd4:	2804      	cmp	r0, #4
    6cd6:	d068      	beq.n	6daa <MPSL_IRQ_TIMER0_Handler+0xde>
    6cd8:	1ca8      	adds	r0, r5, #2
    6cda:	2201      	movs	r2, #1
    6cdc:	7801      	ldrb	r1, [r0, #0]
    6cde:	b159      	cbz	r1, 6cf8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    6ce0:	2901      	cmp	r1, #1
    6ce2:	bf08      	it	eq
    6ce4:	706a      	strbeq	r2, [r5, #1]
    6ce6:	d002      	beq.n	6cee <MPSL_IRQ_TIMER0_Handler+0x22>
    6ce8:	7869      	ldrb	r1, [r5, #1]
    6cea:	2900      	cmp	r1, #0
    6cec:	d058      	beq.n	6da0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    6cee:	2102      	movs	r1, #2
    6cf0:	7001      	strb	r1, [r0, #0]
    6cf2:	7840      	ldrb	r0, [r0, #1]
    6cf4:	f000 fb2e 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6cf8:	4c2f      	ldr	r4, [pc, #188]	; (6db8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    6cfa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6cfe:	f04f 0800 	mov.w	r8, #0
    6d02:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    6d06:	f44f 7780 	mov.w	r7, #256	; 0x100
    6d0a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    6d0e:	d00a      	beq.n	6d26 <MPSL_IRQ_TIMER0_Handler+0x5a>
    6d10:	482a      	ldr	r0, [pc, #168]	; (6dbc <MPSL_IRQ_TIMER0_Handler+0xf0>)
    6d12:	6800      	ldr	r0, [r0, #0]
    6d14:	b138      	cbz	r0, 6d26 <MPSL_IRQ_TIMER0_Handler+0x5a>
    6d16:	2003      	movs	r0, #3
    6d18:	f000 fb1c 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d1c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d20:	2003      	movs	r0, #3
    6d22:	f7fe fd27 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d26:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d2a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    6d2e:	d00a      	beq.n	6d46 <MPSL_IRQ_TIMER0_Handler+0x7a>
    6d30:	4823      	ldr	r0, [pc, #140]	; (6dc0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    6d32:	6800      	ldr	r0, [r0, #0]
    6d34:	b138      	cbz	r0, 6d46 <MPSL_IRQ_TIMER0_Handler+0x7a>
    6d36:	2002      	movs	r0, #2
    6d38:	f000 fb0c 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d3c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d40:	2002      	movs	r0, #2
    6d42:	f7fe fd17 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d46:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d4a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    6d4e:	d00a      	beq.n	6d66 <MPSL_IRQ_TIMER0_Handler+0x9a>
    6d50:	481c      	ldr	r0, [pc, #112]	; (6dc4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    6d52:	6800      	ldr	r0, [r0, #0]
    6d54:	b138      	cbz	r0, 6d66 <MPSL_IRQ_TIMER0_Handler+0x9a>
    6d56:	2001      	movs	r0, #1
    6d58:	f000 fafc 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d5c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d60:	2001      	movs	r0, #1
    6d62:	f7fe fd07 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d66:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d6a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6d6e:	bf08      	it	eq
    6d70:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d74:	4814      	ldr	r0, [pc, #80]	; (6dc8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    6d76:	6800      	ldr	r0, [r0, #0]
    6d78:	2800      	cmp	r0, #0
    6d7a:	bf08      	it	eq
    6d7c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d80:	2000      	movs	r0, #0
    6d82:	f000 fae7 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d86:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d8a:	2004      	movs	r0, #4
    6d8c:	7028      	strb	r0, [r5, #0]
    6d8e:	f8c5 8004 	str.w	r8, [r5, #4]
    6d92:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    6d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d9a:	2000      	movs	r0, #0
    6d9c:	f7fe bcea 	b.w	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6da0:	f240 5169 	movw	r1, #1385	; 0x569
    6da4:	206c      	movs	r0, #108	; 0x6c
    6da6:	f000 ffa9 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dae:	2007      	movs	r0, #7
    6db0:	f7fe bce0 	b.w	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6db4:	20000028 	.word	0x20000028
    6db8:	40008000 	.word	0x40008000
    6dbc:	4000814c 	.word	0x4000814c
    6dc0:	40008148 	.word	0x40008148
    6dc4:	40008144 	.word	0x40008144
    6dc8:	40008140 	.word	0x40008140
    6dcc:	2201      	movs	r2, #1
    6dce:	0211      	lsls	r1, r2, #8
    6dd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6dd4:	2000      	movs	r0, #0
    6dd6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6dda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    6dde:	f3bf 8f4f 	dsb	sy
    6de2:	f3bf 8f6f 	isb	sy
    6de6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6dea:	490e      	ldr	r1, [pc, #56]	; (6e24 <MPSL_IRQ_TIMER0_Handler+0x158>)
    6dec:	f841 2f04 	str.w	r2, [r1, #4]!
    6df0:	1e43      	subs	r3, r0, #1
    6df2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    6df6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    6dfa:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    6dfe:	4b0a      	ldr	r3, [pc, #40]	; (6e28 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    6e00:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e04:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    6e08:	1d1b      	adds	r3, r3, #4
    6e0a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e0e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    6e12:	1d1b      	adds	r3, r3, #4
    6e14:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e18:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	4903      	ldr	r1, [pc, #12]	; (6e2c <MPSL_IRQ_TIMER0_Handler+0x160>)
    6e20:	7048      	strb	r0, [r1, #1]
    6e22:	4770      	bx	lr
    6e24:	40008000 	.word	0x40008000
    6e28:	40008004 	.word	0x40008004
    6e2c:	20000028 	.word	0x20000028

00006e30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    6e30:	4801      	ldr	r0, [pc, #4]	; (6e38 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    6e32:	6800      	ldr	r0, [r0, #0]
    6e34:	4770      	bx	lr
    6e36:	0000      	.short	0x0000
    6e38:	4000b504 	.word	0x4000b504

00006e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    6e3c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6e40:	f8df 8130 	ldr.w	r8, [pc, #304]	; 6f74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    6e44:	4604      	mov	r4, r0
    6e46:	f1a8 0702 	sub.w	r7, r8, #2
    6e4a:	460e      	mov	r6, r1
    6e4c:	f898 c000 	ldrb.w	ip, [r8]
    6e50:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    6e54:	f1bc 0f01 	cmp.w	ip, #1
    6e58:	d106      	bne.n	6e68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    6e5a:	ea81 0204 	eor.w	r2, r1, r4
    6e5e:	4070      	eors	r0, r6
    6e60:	4310      	orrs	r0, r2
    6e62:	bf08      	it	eq
    6e64:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6e68:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6e6c:	4a42      	ldr	r2, [pc, #264]	; (6f78 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    6e6e:	6010      	str	r0, [r2, #0]
    6e70:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    6e74:	f1bc 0f00 	cmp.w	ip, #0
    6e78:	bf07      	ittee	eq
    6e7a:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    6e7e:	2200      	moveq	r2, #0
    6e80:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    6e84:	2201      	movne	r2, #1
    6e86:	483d      	ldr	r0, [pc, #244]	; (6f7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    6e88:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    6e8c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    6e90:	2500      	movs	r5, #0
    6e92:	f44f 79a0 	mov.w	r9, #320	; 0x140
    6e96:	2a02      	cmp	r2, #2
    6e98:	d207      	bcs.n	6eaa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    6e9a:	bf00      	nop
    6e9c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    6ea0:	50c5      	str	r5, [r0, r3]
    6ea2:	1c52      	adds	r2, r2, #1
    6ea4:	b2d2      	uxtb	r2, r2
    6ea6:	2a02      	cmp	r2, #2
    6ea8:	d3f8      	bcc.n	6e9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    6eaa:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    6eae:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    6eb2:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    6eb6:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    6eba:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    6ebe:	4a30      	ldr	r2, [pc, #192]	; (6f80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    6ec0:	f8d2 9000 	ldr.w	r9, [r2]
    6ec4:	eba3 0909 	sub.w	r9, r3, r9
    6ec8:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    6ecc:	f04f 0901 	mov.w	r9, #1
    6ed0:	f1ba 0f02 	cmp.w	sl, #2
    6ed4:	d32e      	bcc.n	6f34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6ed6:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    6eda:	d82b      	bhi.n	6f34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6edc:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    6ee0:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    6ee4:	f1bc 0f00 	cmp.w	ip, #0
    6ee8:	d005      	beq.n	6ef6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    6eea:	6810      	ldr	r0, [r2, #0]
    6eec:	1a08      	subs	r0, r1, r0
    6eee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6ef2:	2802      	cmp	r0, #2
    6ef4:	d3f9      	bcc.n	6eea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    6ef6:	f8c7 9004 	str.w	r9, [r7, #4]
    6efa:	703d      	strb	r5, [r7, #0]
    6efc:	f7ff ff66 	bl	6dcc <MPSL_IRQ_TIMER0_Handler+0x100>
    6f00:	4820      	ldr	r0, [pc, #128]	; (6f84 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    6f02:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    6f06:	f365 0101 	bfi	r1, r5, #0, #2
    6f0a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    6f0e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    6f12:	2102      	movs	r1, #2
    6f14:	f361 0201 	bfi	r2, r1, #0, #2
    6f18:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    6f1c:	2110      	movs	r1, #16
    6f1e:	fa91 f1a1 	rbit	r1, r1
    6f22:	fab1 f181 	clz	r1, r1
    6f26:	2909      	cmp	r1, #9
    6f28:	d909      	bls.n	6f3e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    6f2a:	f240 3155 	movw	r1, #853	; 0x355
    6f2e:	a016      	add	r0, pc, #88	; (adr r0, 6f88 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    6f30:	f000 feb8 	bl	7ca4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    6f34:	f240 31b2 	movw	r1, #946	; 0x3b2
    6f38:	206c      	movs	r0, #108	; 0x6c
    6f3a:	f000 fedf 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6f3e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    6f42:	f8c0 900c 	str.w	r9, [r0, #12]
    6f46:	6879      	ldr	r1, [r7, #4]
    6f48:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6f4c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    6f50:	f44f 7180 	mov.w	r1, #256	; 0x100
    6f54:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    6f58:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6f5c:	490d      	ldr	r1, [pc, #52]	; (6f94 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    6f5e:	0480      	lsls	r0, r0, #18
    6f60:	6008      	str	r0, [r1, #0]
    6f62:	e9c7 4604 	strd	r4, r6, [r7, #16]
    6f66:	2004      	movs	r0, #4
    6f68:	f888 0001 	strb.w	r0, [r8, #1]
    6f6c:	f888 9000 	strb.w	r9, [r8]
    6f70:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6f74:	2000002a 	.word	0x2000002a
    6f78:	4001f508 	.word	0x4001f508
    6f7c:	4000b000 	.word	0x4000b000
    6f80:	4000b504 	.word	0x4000b504
    6f84:	40008000 	.word	0x40008000
    6f88:	5f66726e 	.word	0x5f66726e
    6f8c:	656d6974 	.word	0x656d6974
    6f90:	00682e72 	.word	0x00682e72
    6f94:	4001f504 	.word	0x4001f504

00006f98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    6f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f9c:	4c31      	ldr	r4, [pc, #196]	; (7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    6f9e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6fa2:	ea82 0c00 	eor.w	ip, r2, r0
    6fa6:	404b      	eors	r3, r1
    6fa8:	ea5c 0303 	orrs.w	r3, ip, r3
    6fac:	bf14      	ite	ne
    6fae:	2301      	movne	r3, #1
    6fb0:	2300      	moveq	r3, #0
    6fb2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 7068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    6fb6:	f89c 8000 	ldrb.w	r8, [ip]
    6fba:	f1b8 0f02 	cmp.w	r8, #2
    6fbe:	d002      	beq.n	6fc6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d03f      	beq.n	7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    6fc4:	e003      	b.n	6fce <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	bf08      	it	eq
    6fca:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fce:	7863      	ldrb	r3, [r4, #1]
    6fd0:	b3bb      	cbz	r3, 7042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    6fd2:	4d26      	ldr	r5, [pc, #152]	; (706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    6fd4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    6fd8:	602b      	str	r3, [r5, #0]
    6fda:	4e25      	ldr	r6, [pc, #148]	; (7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    6fdc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    6fe0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6fe4:	462f      	mov	r7, r5
    6fe6:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    6fea:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    6fee:	2500      	movs	r5, #0
    6ff0:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    6ff4:	4d1f      	ldr	r5, [pc, #124]	; (7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    6ff6:	f8d5 9000 	ldr.w	r9, [r5]
    6ffa:	eba3 0909 	sub.w	r9, r3, r9
    6ffe:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    7002:	f1b9 0f02 	cmp.w	r9, #2
    7006:	d327      	bcc.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7008:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    700c:	d824      	bhi.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    700e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    7012:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    7016:	f1b8 0f00 	cmp.w	r8, #0
    701a:	d005      	beq.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    701c:	682b      	ldr	r3, [r5, #0]
    701e:	1ad3      	subs	r3, r2, r3
    7020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7024:	2b02      	cmp	r3, #2
    7026:	d3f9      	bcc.n	701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7028:	4d13      	ldr	r5, [pc, #76]	; (7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    702a:	2202      	movs	r2, #2
    702c:	0753      	lsls	r3, r2, #29
    702e:	602b      	str	r3, [r5, #0]
    7030:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7034:	2004      	movs	r0, #4
    7036:	f88c 0001 	strb.w	r0, [ip, #1]
    703a:	f88c 2000 	strb.w	r2, [ip]
    703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7042:	e004      	b.n	704e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    7044:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    7048:	206c      	movs	r0, #108	; 0x6c
    704a:	f000 fe57 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    704e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    7052:	206c      	movs	r0, #108	; 0x6c
    7054:	f000 fe52 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7058:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    705c:	206c      	movs	r0, #108	; 0x6c
    705e:	f000 fe4d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7062:	0000      	.short	0x0000
    7064:	20000028 	.word	0x20000028
    7068:	2000002a 	.word	0x2000002a
    706c:	4001f508 	.word	0x4001f508
    7070:	4000b000 	.word	0x4000b000
    7074:	4000b504 	.word	0x4000b504
    7078:	4001f504 	.word	0x4001f504

0000707c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    707c:	4901      	ldr	r1, [pc, #4]	; (7084 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    707e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    7082:	4770      	bx	lr
    7084:	20000028 	.word	0x20000028

00007088 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    7088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    708c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 7184 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    7090:	f89c 4000 	ldrb.w	r4, [ip]
    7094:	2c00      	cmp	r4, #0
    7096:	bf07      	ittee	eq
    7098:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    709c:	2100      	moveq	r1, #0
    709e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    70a2:	2101      	movne	r1, #1
    70a4:	4838      	ldr	r0, [pc, #224]	; (7188 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    70a6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    70aa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    70ae:	2300      	movs	r3, #0
    70b0:	2902      	cmp	r1, #2
    70b2:	bf38      	it	cc
    70b4:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    70b8:	d207      	bcs.n	70ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    70ba:	bf00      	nop
    70bc:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    70c0:	5083      	str	r3, [r0, r2]
    70c2:	1c49      	adds	r1, r1, #1
    70c4:	b2c9      	uxtb	r1, r1
    70c6:	2902      	cmp	r1, #2
    70c8:	d3f8      	bcc.n	70bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    70ca:	2c02      	cmp	r4, #2
    70cc:	d004      	beq.n	70d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    70ce:	f240 31db 	movw	r1, #987	; 0x3db
    70d2:	206c      	movs	r0, #108	; 0x6c
    70d4:	f000 fe12 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    70d8:	f3ef 8210 	mrs	r2, PRIMASK
    70dc:	b672      	cpsid	i
    70de:	4c2b      	ldr	r4, [pc, #172]	; (718c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    70e0:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    70e4:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    70e8:	b12d      	cbz	r5, 70f6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    70ea:	68a1      	ldr	r1, [r4, #8]
    70ec:	1c49      	adds	r1, r1, #1
    70ee:	60a1      	str	r1, [r4, #8]
    70f0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    70f4:	e7f4      	b.n	70e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    70f6:	68a0      	ldr	r0, [r4, #8]
    70f8:	b902      	cbnz	r2, 70fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    70fa:	b662      	cpsie	i
    70fc:	0a02      	lsrs	r2, r0, #8
    70fe:	0600      	lsls	r0, r0, #24
    7100:	1840      	adds	r0, r0, r1
    7102:	eb42 0103 	adc.w	r1, r2, r3
    7106:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    710a:	1cc0      	adds	r0, r0, #3
    710c:	f141 0100 	adc.w	r1, r1, #0
    7110:	4f1f      	ldr	r7, [pc, #124]	; (7190 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    7112:	2601      	movs	r6, #1
    7114:	4d1f      	ldr	r5, [pc, #124]	; (7194 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    7116:	ea80 0902 	eor.w	r9, r0, r2
    711a:	ea81 0808 	eor.w	r8, r1, r8
    711e:	ea59 0808 	orrs.w	r8, r9, r8
    7122:	d00e      	beq.n	7142 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7124:	f8d7 8000 	ldr.w	r8, [r7]
    7128:	eba2 0808 	sub.w	r8, r2, r8
    712c:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    7130:	f1b8 0f04 	cmp.w	r8, #4
    7134:	d305      	bcc.n	7142 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7136:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    713a:	d802      	bhi.n	7142 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    713c:	f7ff fe7e 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    7140:	e01b      	b.n	717a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7142:	6838      	ldr	r0, [r7, #0]
    7144:	1a10      	subs	r0, r2, r0
    7146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    714a:	2802      	cmp	r0, #2
    714c:	d313      	bcc.n	7176 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    714e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7152:	d810      	bhi.n	7176 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    7154:	4910      	ldr	r1, [pc, #64]	; (7198 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    7156:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    715a:	6008      	str	r0, [r1, #0]
    715c:	6066      	str	r6, [r4, #4]
    715e:	7023      	strb	r3, [r4, #0]
    7160:	606e      	str	r6, [r5, #4]
    7162:	60ee      	str	r6, [r5, #12]
    7164:	0040      	lsls	r0, r0, #1
    7166:	1f09      	subs	r1, r1, #4
    7168:	6008      	str	r0, [r1, #0]
    716a:	2004      	movs	r0, #4
    716c:	f88c 0001 	strb.w	r0, [ip, #1]
    7170:	f88c 6000 	strb.w	r6, [ip]
    7174:	e001      	b.n	717a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7176:	6066      	str	r6, [r4, #4]
    7178:	7023      	strb	r3, [r4, #0]
    717a:	6860      	ldr	r0, [r4, #4]
    717c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7184:	2000002a 	.word	0x2000002a
    7188:	4000b000 	.word	0x4000b000
    718c:	20000028 	.word	0x20000028
    7190:	4000b504 	.word	0x4000b504
    7194:	40008000 	.word	0x40008000
    7198:	4001f508 	.word	0x4001f508

0000719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    719c:	b410      	push	{r4}
    719e:	f3ef 8410 	mrs	r4, PRIMASK
    71a2:	b672      	cpsid	i
    71a4:	4a0c      	ldr	r2, [pc, #48]	; (71d8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    71a6:	490d      	ldr	r1, [pc, #52]	; (71dc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    71a8:	f04f 0c00 	mov.w	ip, #0
    71ac:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    71b0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    71b4:	b12b      	cbz	r3, 71c2 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    71b6:	6888      	ldr	r0, [r1, #8]
    71b8:	1c40      	adds	r0, r0, #1
    71ba:	6088      	str	r0, [r1, #8]
    71bc:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    71c0:	e7f4      	b.n	71ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    71c2:	6889      	ldr	r1, [r1, #8]
    71c4:	b904      	cbnz	r4, 71c8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    71c6:	b662      	cpsie	i
    71c8:	0a0a      	lsrs	r2, r1, #8
    71ca:	0609      	lsls	r1, r1, #24
    71cc:	1808      	adds	r0, r1, r0
    71ce:	bc10      	pop	{r4}
    71d0:	eb42 010c 	adc.w	r1, r2, ip
    71d4:	4770      	bx	lr
    71d6:	0000      	.short	0x0000
    71d8:	4000b000 	.word	0x4000b000
    71dc:	20000028 	.word	0x20000028

000071e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    71e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e4:	4a56      	ldr	r2, [pc, #344]	; (7340 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    71e6:	2501      	movs	r5, #1
    71e8:	2400      	movs	r4, #0
    71ea:	f892 c000 	ldrb.w	ip, [r2]
    71ee:	7852      	ldrb	r2, [r2, #1]
    71f0:	f44f 76a0 	mov.w	r6, #320	; 0x140
    71f4:	2807      	cmp	r0, #7
    71f6:	d27d      	bcs.n	72f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    71f8:	e8df f000 	tbb	[pc, r0]
    71fc:	04040404 	.word	0x04040404
    7200:	00606060 	.word	0x00606060
    7204:	4b4f      	ldr	r3, [pc, #316]	; (7344 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    7206:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    720a:	43ff      	mvns	r7, r7
    720c:	ea77 0708 	orns	r7, r7, r8
    7210:	bf04      	itt	eq
    7212:	785b      	ldrbeq	r3, [r3, #1]
    7214:	2b00      	cmpeq	r3, #0
    7216:	d003      	beq.n	7220 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    7218:	f1bc 0f02 	cmp.w	ip, #2
    721c:	d005      	beq.n	722a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    721e:	e026      	b.n	726e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    7220:	f44f 6186 	mov.w	r1, #1072	; 0x430
    7224:	206c      	movs	r0, #108	; 0x6c
    7226:	f000 fd69 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    722a:	1f13      	subs	r3, r2, #4
    722c:	b2db      	uxtb	r3, r3
    722e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7232:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    7236:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    723a:	2300      	movs	r3, #0
    723c:	f1bc 0f01 	cmp.w	ip, #1
    7240:	d003      	beq.n	724a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    7242:	f1bc 0f02 	cmp.w	ip, #2
    7246:	d008      	beq.n	725a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    7248:	e00e      	b.n	7268 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    724a:	2a04      	cmp	r2, #4
    724c:	bf24      	itt	cs
    724e:	6837      	ldrcs	r7, [r6, #0]
    7250:	2f00      	cmpcs	r7, #0
    7252:	bf08      	it	eq
    7254:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    7258:	e006      	b.n	7268 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    725a:	2a04      	cmp	r2, #4
    725c:	bf24      	itt	cs
    725e:	6837      	ldrcs	r7, [r6, #0]
    7260:	2f00      	cmpcs	r7, #0
    7262:	bf08      	it	eq
    7264:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    7268:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    726c:	d1e5      	bne.n	723a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    726e:	4b36      	ldr	r3, [pc, #216]	; (7348 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    7270:	f100 0210 	add.w	r2, r0, #16
    7274:	fa05 f202 	lsl.w	r2, r5, r2
    7278:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    727c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    7280:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    7284:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    7288:	449c      	add	ip, r3
    728a:	f8cc 5000 	str.w	r5, [ip]
    728e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7292:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    7296:	eba1 0c0c 	sub.w	ip, r1, ip
    729a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    729e:	f1bc 0f03 	cmp.w	ip, #3
    72a2:	bf3e      	ittt	cc
    72a4:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    72a8:	2000      	movcc	r0, #0
    72aa:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    72ae:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    72b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    72b6:	2001      	movs	r0, #1
    72b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72bc:	f1bc 0f00 	cmp.w	ip, #0
    72c0:	d006      	beq.n	72d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    72c2:	4282      	cmp	r2, r0
    72c4:	d104      	bne.n	72d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    72c6:	f44f 618a 	mov.w	r1, #1104	; 0x450
    72ca:	206c      	movs	r0, #108	; 0x6c
    72cc:	f000 fd16 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    72d0:	1f00      	subs	r0, r0, #4
    72d2:	b2c2      	uxtb	r2, r0
    72d4:	2a03      	cmp	r2, #3
    72d6:	d304      	bcc.n	72e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    72d8:	f44f 7127 	mov.w	r1, #668	; 0x29c
    72dc:	206c      	movs	r0, #108	; 0x6c
    72de:	f000 fd0d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    72e2:	4b1a      	ldr	r3, [pc, #104]	; (734c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    72e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    72e8:	4090      	lsls	r0, r2
    72ea:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    72ee:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    72f2:	e000      	b.n	72f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    72f4:	e01f      	b.n	7336 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    72f6:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    72fa:	f843 400c 	str.w	r4, [r3, ip]
    72fe:	f8df c050 	ldr.w	ip, [pc, #80]	; 7350 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    7302:	f8dc c000 	ldr.w	ip, [ip]
    7306:	eba1 0c0c 	sub.w	ip, r1, ip
    730a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    730e:	f1bc 0f02 	cmp.w	ip, #2
    7312:	d30d      	bcc.n	7330 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    7314:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    7318:	d80a      	bhi.n	7330 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    731a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    731e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    7322:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    7326:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    732a:	4628      	mov	r0, r5
    732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7330:	4620      	mov	r0, r4
    7332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7336:	f240 4154 	movw	r1, #1108	; 0x454
    733a:	206c      	movs	r0, #108	; 0x6c
    733c:	f000 fcde 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7340:	2000002a 	.word	0x2000002a
    7344:	20000028 	.word	0x20000028
    7348:	40008000 	.word	0x40008000
    734c:	4000b000 	.word	0x4000b000
    7350:	4000b504 	.word	0x4000b504

00007354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    7354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7356:	2101      	movs	r1, #1
    7358:	2600      	movs	r6, #0
    735a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    735e:	2807      	cmp	r0, #7
    7360:	d24a      	bcs.n	73f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    7362:	e8df f000 	tbb	[pc, r0]
    7366:	0404      	.short	0x0404
    7368:	18180404 	.word	0x18180404
    736c:	0018      	.short	0x0018
    736e:	f100 0210 	add.w	r2, r0, #16
    7372:	fa01 f202 	lsl.w	r2, r1, r2
    7376:	4923      	ldr	r1, [pc, #140]	; (7404 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    7378:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    737c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    7380:	2200      	movs	r2, #0
    7382:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    7386:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    738a:	508e      	str	r6, [r1, r2]
    738c:	491e      	ldr	r1, [pc, #120]	; (7408 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    738e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7392:	9000      	str	r0, [sp, #0]
    7394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7396:	4d1d      	ldr	r5, [pc, #116]	; (740c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    7398:	1f01      	subs	r1, r0, #4
    739a:	b2cc      	uxtb	r4, r1
    739c:	7829      	ldrb	r1, [r5, #0]
    739e:	b181      	cbz	r1, 73c2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    73a0:	786a      	ldrb	r2, [r5, #1]
    73a2:	4282      	cmp	r2, r0
    73a4:	d10d      	bne.n	73c2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    73a6:	4a1a      	ldr	r2, [pc, #104]	; (7410 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    73a8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    73ac:	6010      	str	r0, [r2, #0]
    73ae:	2901      	cmp	r1, #1
    73b0:	bf08      	it	eq
    73b2:	f7ff fd0b 	bleq	6dcc <MPSL_IRQ_TIMER0_Handler+0x100>
    73b6:	702e      	strb	r6, [r5, #0]
    73b8:	4a16      	ldr	r2, [pc, #88]	; (7414 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    73ba:	f04f 30ff 	mov.w	r0, #4294967295
    73be:	e9c2 0004 	strd	r0, r0, [r2, #16]
    73c2:	4915      	ldr	r1, [pc, #84]	; (7418 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    73c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    73c8:	40a0      	lsls	r0, r4
    73ca:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    73ce:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    73d2:	00a0      	lsls	r0, r4, #2
    73d4:	4408      	add	r0, r1
    73d6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    73da:	4a10      	ldr	r2, [pc, #64]	; (741c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    73dc:	6812      	ldr	r2, [r2, #0]
    73de:	1a80      	subs	r0, r0, r2
    73e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    73e4:	2802      	cmp	r0, #2
    73e6:	bf24      	itt	cs
    73e8:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    73ec:	500e      	strcs	r6, [r1, r0]
    73ee:	480c      	ldr	r0, [pc, #48]	; (7420 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    73f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    73f4:	9000      	str	r0, [sp, #0]
    73f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73f8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    73fc:	206c      	movs	r0, #108	; 0x6c
    73fe:	f000 fc7d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7402:	0000      	.short	0x0000
    7404:	40008000 	.word	0x40008000
    7408:	40008140 	.word	0x40008140
    740c:	2000002a 	.word	0x2000002a
    7410:	4001f508 	.word	0x4001f508
    7414:	20000028 	.word	0x20000028
    7418:	4000b000 	.word	0x4000b000
    741c:	4000b504 	.word	0x4000b504
    7420:	4000b140 	.word	0x4000b140

00007424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    7424:	481a      	ldr	r0, [pc, #104]	; (7490 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    7426:	7800      	ldrb	r0, [r0, #0]
    7428:	2800      	cmp	r0, #0
    742a:	bf07      	ittee	eq
    742c:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    7430:	2100      	moveq	r1, #0
    7432:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    7436:	2101      	movne	r1, #1
    7438:	4a16      	ldr	r2, [pc, #88]	; (7494 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    743a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    743e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7442:	2000      	movs	r0, #0
    7444:	2902      	cmp	r1, #2
    7446:	bf38      	it	cc
    7448:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    744c:	d207      	bcs.n	745e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    744e:	bf00      	nop
    7450:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    7454:	50d0      	str	r0, [r2, r3]
    7456:	1c49      	adds	r1, r1, #1
    7458:	b2c9      	uxtb	r1, r1
    745a:	2902      	cmp	r1, #2
    745c:	d3f8      	bcc.n	7450 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    745e:	490e      	ldr	r1, [pc, #56]	; (7498 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    7460:	f04f 32ff 	mov.w	r2, #4294967295
    7464:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    7468:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    746c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    7470:	1d0a      	adds	r2, r1, #4
    7472:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7476:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    747a:	1d12      	adds	r2, r2, #4
    747c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7480:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    7484:	1d12      	adds	r2, r2, #4
    7486:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    748a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    748e:	4770      	bx	lr
    7490:	2000002a 	.word	0x2000002a
    7494:	4000b000 	.word	0x4000b000
    7498:	40008000 	.word	0x40008000

0000749c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    749c:	b570      	push	{r4, r5, r6, lr}
    749e:	f3ef 8110 	mrs	r1, PRIMASK
    74a2:	b672      	cpsid	i
    74a4:	2400      	movs	r4, #0
    74a6:	4b0d      	ldr	r3, [pc, #52]	; (74dc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    74a8:	4a0d      	ldr	r2, [pc, #52]	; (74e0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    74aa:	bf00      	nop
    74ac:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    74b0:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    74b4:	f1bc 0f00 	cmp.w	ip, #0
    74b8:	d005      	beq.n	74c6 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    74ba:	6890      	ldr	r0, [r2, #8]
    74bc:	1c40      	adds	r0, r0, #1
    74be:	6090      	str	r0, [r2, #8]
    74c0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    74c4:	e7f2      	b.n	74ac <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    74c6:	6895      	ldr	r5, [r2, #8]
    74c8:	b901      	cbnz	r1, 74cc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    74ca:	b662      	cpsie	i
    74cc:	f002 fca8 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    74d0:	4a04      	ldr	r2, [pc, #16]	; (74e4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    74d2:	4621      	mov	r1, r4
    74d4:	fbe5 0102 	umlal	r0, r1, r5, r2
    74d8:	bd70      	pop	{r4, r5, r6, pc}
    74da:	0000      	.short	0x0000
    74dc:	4000b000 	.word	0x4000b000
    74e0:	20000028 	.word	0x20000028
    74e4:	1e848000 	.word	0x1e848000

000074e8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    74e8:	b510      	push	{r4, lr}
    74ea:	2807      	cmp	r0, #7
    74ec:	d20d      	bcs.n	750a <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    74ee:	e8df f000 	tbb	[pc, r0]
    74f2:	0404      	.short	0x0404
    74f4:	06060404 	.word	0x06060404
    74f8:	0006      	.short	0x0006
    74fa:	4906      	ldr	r1, [pc, #24]	; (7514 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    74fc:	e002      	b.n	7504 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    74fe:	1f00      	subs	r0, r0, #4
    7500:	4905      	ldr	r1, [pc, #20]	; (7518 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    7502:	b2c0      	uxtb	r0, r0
    7504:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7508:	bd10      	pop	{r4, pc}
    750a:	f240 417b 	movw	r1, #1147	; 0x47b
    750e:	206c      	movs	r0, #108	; 0x6c
    7510:	f000 fbf4 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7514:	40008140 	.word	0x40008140
    7518:	4000b140 	.word	0x4000b140

0000751c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    751c:	b510      	push	{r4, lr}
    751e:	2807      	cmp	r0, #7
    7520:	d20d      	bcs.n	753e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    7522:	e8df f000 	tbb	[pc, r0]
    7526:	0404      	.short	0x0404
    7528:	06060404 	.word	0x06060404
    752c:	0006      	.short	0x0006
    752e:	4906      	ldr	r1, [pc, #24]	; (7548 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    7530:	e002      	b.n	7538 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    7532:	1f00      	subs	r0, r0, #4
    7534:	4905      	ldr	r1, [pc, #20]	; (754c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    7536:	b2c0      	uxtb	r0, r0
    7538:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    753c:	bd10      	pop	{r4, pc}
    753e:	f240 417b 	movw	r1, #1147	; 0x47b
    7542:	206c      	movs	r0, #108	; 0x6c
    7544:	f000 fbda 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7548:	40008140 	.word	0x40008140
    754c:	4000b140 	.word	0x4000b140

00007550 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    7550:	b570      	push	{r4, r5, r6, lr}
    7552:	481b      	ldr	r0, [pc, #108]	; (75c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    7554:	2400      	movs	r4, #0
    7556:	2104      	movs	r1, #4
    7558:	7004      	strb	r4, [r0, #0]
    755a:	1e80      	subs	r0, r0, #2
    755c:	7001      	strb	r1, [r0, #0]
    755e:	1f49      	subs	r1, r1, #5
    7560:	e9c0 1104 	strd	r1, r1, [r0, #16]
    7564:	6084      	str	r4, [r0, #8]
    7566:	f7ff fc31 	bl	6dcc <MPSL_IRQ_TIMER0_Handler+0x100>
    756a:	2501      	movs	r5, #1
    756c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    7570:	02eb      	lsls	r3, r5, #11
    7572:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    7576:	f3bf 8f4f 	dsb	sy
    757a:	f3bf 8f6f 	isb	sy
    757e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    7582:	4a10      	ldr	r2, [pc, #64]	; (75c4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    7584:	6055      	str	r5, [r2, #4]
    7586:	6095      	str	r5, [r2, #8]
    7588:	480f      	ldr	r0, [pc, #60]	; (75c8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    758a:	6801      	ldr	r1, [r0, #0]
    758c:	2900      	cmp	r1, #0
    758e:	d1fc      	bne.n	758a <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    7590:	480e      	ldr	r0, [pc, #56]	; (75cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    7592:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7596:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    759a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    759e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    75a2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    75a6:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    75aa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    75ae:	6015      	str	r5, [r2, #0]
    75b0:	f44f 7082 	mov.w	r0, #260	; 0x104
    75b4:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    75b8:	2002      	movs	r0, #2
    75ba:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    75be:	bd70      	pop	{r4, r5, r6, pc}
    75c0:	2000002a 	.word	0x2000002a
    75c4:	4000b000 	.word	0x4000b000
    75c8:	4000b504 	.word	0x4000b504
    75cc:	00070002 	.word	0x00070002

000075d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    75d0:	4808      	ldr	r0, [pc, #32]	; (75f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    75d2:	f990 0000 	ldrsb.w	r0, [r0]
    75d6:	2800      	cmp	r0, #0
    75d8:	bfb8      	it	lt
    75da:	4770      	bxlt	lr
    75dc:	f000 011f 	and.w	r1, r0, #31
    75e0:	2201      	movs	r2, #1
    75e2:	fa02 f101 	lsl.w	r1, r2, r1
    75e6:	0940      	lsrs	r0, r0, #5
    75e8:	0080      	lsls	r0, r0, #2
    75ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    75ee:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    75f2:	4770      	bx	lr
    75f4:	20000198 	.word	0x20000198

000075f8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    75f8:	4803      	ldr	r0, [pc, #12]	; (7608 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    75fa:	7800      	ldrb	r0, [r0, #0]
    75fc:	2803      	cmp	r0, #3
    75fe:	bf0c      	ite	eq
    7600:	2001      	moveq	r0, #1
    7602:	2000      	movne	r0, #0
    7604:	4770      	bx	lr
    7606:	0000      	.short	0x0000
    7608:	20000170 	.word	0x20000170

0000760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    760c:	4801      	ldr	r0, [pc, #4]	; (7614 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    760e:	8840      	ldrh	r0, [r0, #2]
    7610:	4770      	bx	lr
    7612:	0000      	.short	0x0000
    7614:	20000170 	.word	0x20000170

00007618 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    7618:	4803      	ldr	r0, [pc, #12]	; (7628 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    761a:	7800      	ldrb	r0, [r0, #0]
    761c:	2802      	cmp	r0, #2
    761e:	bf16      	itet	ne
    7620:	2803      	cmpne	r0, #3
    7622:	2001      	moveq	r0, #1
    7624:	2000      	movne	r0, #0
    7626:	4770      	bx	lr
    7628:	20000170 	.word	0x20000170

0000762c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    762c:	4802      	ldr	r0, [pc, #8]	; (7638 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    762e:	2100      	movs	r1, #0
    7630:	7001      	strb	r1, [r0, #0]
    7632:	8041      	strh	r1, [r0, #2]
    7634:	4770      	bx	lr
    7636:	0000      	.short	0x0000
    7638:	20000170 	.word	0x20000170

0000763c <MPSL_IRQ_CLOCK_Handler>:
    763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7640:	4c16      	ldr	r4, [pc, #88]	; (769c <MPSL_IRQ_CLOCK_Handler+0x60>)
    7642:	7a60      	ldrb	r0, [r4, #9]
    7644:	2800      	cmp	r0, #0
    7646:	d027      	beq.n	7698 <MPSL_IRQ_CLOCK_Handler+0x5c>
    7648:	f44f 7180 	mov.w	r1, #256	; 0x100
    764c:	058d      	lsls	r5, r1, #22
    764e:	4628      	mov	r0, r5
    7650:	f002 fc11 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7654:	4680      	mov	r8, r0
    7656:	f44f 7182 	mov.w	r1, #260	; 0x104
    765a:	4628      	mov	r0, r5
    765c:	f002 fc0b 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7660:	2600      	movs	r6, #0
    7662:	4607      	mov	r7, r0
    7664:	f1b8 0f00 	cmp.w	r8, #0
    7668:	d009      	beq.n	767e <MPSL_IRQ_CLOCK_Handler+0x42>
    766a:	2001      	movs	r0, #1
    766c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7670:	7920      	ldrb	r0, [r4, #4]
    7672:	b120      	cbz	r0, 767e <MPSL_IRQ_CLOCK_Handler+0x42>
    7674:	7126      	strb	r6, [r4, #4]
    7676:	69e0      	ldr	r0, [r4, #28]
    7678:	b108      	cbz	r0, 767e <MPSL_IRQ_CLOCK_Handler+0x42>
    767a:	4780      	blx	r0
    767c:	61e6      	str	r6, [r4, #28]
    767e:	b137      	cbz	r7, 768e <MPSL_IRQ_CLOCK_Handler+0x52>
    7680:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    7684:	2002      	movs	r0, #2
    7686:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    768a:	f000 fa57 	bl	7b3c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    768e:	4640      	mov	r0, r8
    7690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7694:	f000 b858 	b.w	7748 <MPSL_IRQ_CLOCK_Handler+0x10c>
    7698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    769c:	2000012c 	.word	0x2000012c
    76a0:	b510      	push	{r4, lr}
    76a2:	f002 fc92 	bl	9fca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    76a6:	b930      	cbnz	r0, 76b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    76a8:	f002 fcb0 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76ac:	b918      	cbnz	r0, 76b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    76ae:	f002 fce3 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    76b2:	2800      	cmp	r0, #0
    76b4:	d002      	beq.n	76bc <MPSL_IRQ_CLOCK_Handler+0x80>
    76b6:	4902      	ldr	r1, [pc, #8]	; (76c0 <MPSL_IRQ_CLOCK_Handler+0x84>)
    76b8:	2002      	movs	r0, #2
    76ba:	6008      	str	r0, [r1, #0]
    76bc:	bd10      	pop	{r4, pc}
    76be:	0000      	.short	0x0000
    76c0:	40000c34 	.word	0x40000c34
    76c4:	b570      	push	{r4, r5, r6, lr}
    76c6:	f000 f99b 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    76ca:	f000 fa9f 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    76ce:	4c09      	ldr	r4, [pc, #36]	; (76f4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    76d0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    76d4:	b130      	cbz	r0, 76e4 <MPSL_IRQ_CLOCK_Handler+0xa8>
    76d6:	f7ff ffe3 	bl	76a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    76da:	2001      	movs	r0, #1
    76dc:	6128      	str	r0, [r5, #16]
    76de:	2004      	movs	r0, #4
    76e0:	72a0      	strb	r0, [r4, #10]
    76e2:	e004      	b.n	76ee <MPSL_IRQ_CLOCK_Handler+0xb2>
    76e4:	2003      	movs	r0, #3
    76e6:	72a0      	strb	r0, [r4, #10]
    76e8:	2001      	movs	r0, #1
    76ea:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    76ee:	2000      	movs	r0, #0
    76f0:	71e0      	strb	r0, [r4, #7]
    76f2:	bd70      	pop	{r4, r5, r6, pc}
    76f4:	2000012c 	.word	0x2000012c
    76f8:	b570      	push	{r4, r5, r6, lr}
    76fa:	4c12      	ldr	r4, [pc, #72]	; (7744 <MPSL_IRQ_CLOCK_Handler+0x108>)
    76fc:	79a0      	ldrb	r0, [r4, #6]
    76fe:	b1e0      	cbz	r0, 773a <MPSL_IRQ_CLOCK_Handler+0xfe>
    7700:	79e1      	ldrb	r1, [r4, #7]
    7702:	1e40      	subs	r0, r0, #1
    7704:	4281      	cmp	r1, r0
    7706:	da18      	bge.n	773a <MPSL_IRQ_CLOCK_Handler+0xfe>
    7708:	f000 fa80 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    770c:	4605      	mov	r5, r0
    770e:	f000 fb69 	bl	7de4 <mpsl_temperature_get>
    7712:	79a1      	ldrb	r1, [r4, #6]
    7714:	2901      	cmp	r1, #1
    7716:	d902      	bls.n	771e <MPSL_IRQ_CLOCK_Handler+0xe2>
    7718:	79e1      	ldrb	r1, [r4, #7]
    771a:	1c49      	adds	r1, r1, #1
    771c:	71e1      	strb	r1, [r4, #7]
    771e:	b10d      	cbz	r5, 7724 <MPSL_IRQ_CLOCK_Handler+0xe8>
    7720:	6961      	ldr	r1, [r4, #20]
    7722:	e000      	b.n	7726 <MPSL_IRQ_CLOCK_Handler+0xea>
    7724:	6921      	ldr	r1, [r4, #16]
    7726:	1a41      	subs	r1, r0, r1
    7728:	2902      	cmp	r1, #2
    772a:	da02      	bge.n	7732 <MPSL_IRQ_CLOCK_Handler+0xf6>
    772c:	f111 0f02 	cmn.w	r1, #2
    7730:	dc07      	bgt.n	7742 <MPSL_IRQ_CLOCK_Handler+0x106>
    7732:	b10d      	cbz	r5, 7738 <MPSL_IRQ_CLOCK_Handler+0xfc>
    7734:	6160      	str	r0, [r4, #20]
    7736:	e000      	b.n	773a <MPSL_IRQ_CLOCK_Handler+0xfe>
    7738:	6120      	str	r0, [r4, #16]
    773a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    773e:	f7ff bfc1 	b.w	76c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    7742:	bd70      	pop	{r4, r5, r6, pc}
    7744:	2000012c 	.word	0x2000012c
    7748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    774c:	4606      	mov	r6, r0
    774e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7752:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7756:	4628      	mov	r0, r5
    7758:	f002 fb8d 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    775c:	4680      	mov	r8, r0
    775e:	f44f 7188 	mov.w	r1, #272	; 0x110
    7762:	4628      	mov	r0, r5
    7764:	f002 fb87 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7768:	4c27      	ldr	r4, [pc, #156]	; (7808 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    776a:	4682      	mov	sl, r0
    776c:	7827      	ldrb	r7, [r4, #0]
    776e:	f104 0008 	add.w	r0, r4, #8
    7772:	f002 fbf4 	bl	9f5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    7776:	b110      	cbz	r0, 777e <MPSL_IRQ_CLOCK_Handler+0x142>
    7778:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    777c:	e016      	b.n	77ac <MPSL_IRQ_CLOCK_Handler+0x170>
    777e:	f04f 0901 	mov.w	r9, #1
    7782:	b146      	cbz	r6, 7796 <MPSL_IRQ_CLOCK_Handler+0x15a>
    7784:	7aa0      	ldrb	r0, [r4, #10]
    7786:	2803      	cmp	r0, #3
    7788:	d105      	bne.n	7796 <MPSL_IRQ_CLOCK_Handler+0x15a>
    778a:	2004      	movs	r0, #4
    778c:	72a0      	strb	r0, [r4, #10]
    778e:	f7ff ff87 	bl	76a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    7792:	f8c5 9010 	str.w	r9, [r5, #16]
    7796:	2600      	movs	r6, #0
    7798:	f1b8 0f00 	cmp.w	r8, #0
    779c:	d018      	beq.n	77d0 <MPSL_IRQ_CLOCK_Handler+0x194>
    779e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    77a2:	7aa0      	ldrb	r0, [r4, #10]
    77a4:	2804      	cmp	r0, #4
    77a6:	d004      	beq.n	77b2 <MPSL_IRQ_CLOCK_Handler+0x176>
    77a8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    77ac:	206d      	movs	r0, #109	; 0x6d
    77ae:	f000 faa5 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    77b2:	f002 fc0a 	bl	9fca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    77b6:	b928      	cbnz	r0, 77c4 <MPSL_IRQ_CLOCK_Handler+0x188>
    77b8:	f002 fc28 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    77bc:	b910      	cbnz	r0, 77c4 <MPSL_IRQ_CLOCK_Handler+0x188>
    77be:	f002 fc5b 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    77c2:	b108      	cbz	r0, 77c8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    77c4:	4811      	ldr	r0, [pc, #68]	; (780c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    77c6:	6006      	str	r6, [r0, #0]
    77c8:	2002      	movs	r0, #2
    77ca:	72a0      	strb	r0, [r4, #10]
    77cc:	f000 f8fc 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    77d0:	f1ba 0f00 	cmp.w	sl, #0
    77d4:	d008      	beq.n	77e8 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    77d6:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    77da:	7aa0      	ldrb	r0, [r4, #10]
    77dc:	2802      	cmp	r0, #2
    77de:	d101      	bne.n	77e4 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    77e0:	f7ff ff8a 	bl	76f8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    77e4:	f8c5 9014 	str.w	r9, [r5, #20]
    77e8:	b13f      	cbz	r7, 77fa <MPSL_IRQ_CLOCK_Handler+0x1be>
    77ea:	7026      	strb	r6, [r4, #0]
    77ec:	7aa0      	ldrb	r0, [r4, #10]
    77ee:	2802      	cmp	r0, #2
    77f0:	d101      	bne.n	77f6 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    77f2:	f7ff ff67 	bl	76c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    77f6:	f000 f8e7 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    77fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77fe:	4802      	ldr	r0, [pc, #8]	; (7808 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    7800:	3008      	adds	r0, #8
    7802:	f002 bbc3 	b.w	9f8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    7806:	0000      	.short	0x0000
    7808:	2000012c 	.word	0x2000012c
    780c:	40000c34 	.word	0x40000c34
    7810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7814:	4c49      	ldr	r4, [pc, #292]	; (793c <MPSL_IRQ_CLOCK_Handler+0x300>)
    7816:	2700      	movs	r7, #0
    7818:	4606      	mov	r6, r0
    781a:	61a7      	str	r7, [r4, #24]
    781c:	7842      	ldrb	r2, [r0, #1]
    781e:	7881      	ldrb	r1, [r0, #2]
    7820:	7800      	ldrb	r0, [r0, #0]
    7822:	72e0      	strb	r0, [r4, #11]
    7824:	7162      	strb	r2, [r4, #5]
    7826:	71a1      	strb	r1, [r4, #6]
    7828:	71e7      	strb	r7, [r4, #7]
    782a:	f04f 0801 	mov.w	r8, #1
    782e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7832:	2805      	cmp	r0, #5
    7834:	d225      	bcs.n	7882 <MPSL_IRQ_CLOCK_Handler+0x246>
    7836:	e8df f000 	tbb	[pc, r0]
    783a:	0310      	.short	0x0310
    783c:	00222006 	.word	0x00222006
    7840:	f8c4 8018 	str.w	r8, [r4, #24]
    7844:	e009      	b.n	785a <MPSL_IRQ_CLOCK_Handler+0x21e>
    7846:	f000 f8db 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    784a:	2101      	movs	r1, #1
    784c:	4628      	mov	r0, r5
    784e:	f002 fb17 	bl	9e80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7852:	2800      	cmp	r0, #0
    7854:	d0f9      	beq.n	784a <MPSL_IRQ_CLOCK_Handler+0x20e>
    7856:	2002      	movs	r0, #2
    7858:	61a0      	str	r0, [r4, #24]
    785a:	f002 fb3d 	bl	9ed8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    785e:	b1c0      	cbz	r0, 7892 <MPSL_IRQ_CLOCK_Handler+0x256>
    7860:	f000 f9ee 	bl	7c40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    7864:	7e21      	ldrb	r1, [r4, #24]
    7866:	f001 0103 	and.w	r1, r1, #3
    786a:	4288      	cmp	r0, r1
    786c:	d111      	bne.n	7892 <MPSL_IRQ_CLOCK_Handler+0x256>
    786e:	79b0      	ldrb	r0, [r6, #6]
    7870:	b160      	cbz	r0, 788c <MPSL_IRQ_CLOCK_Handler+0x250>
    7872:	2002      	movs	r0, #2
    7874:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7878:	e044      	b.n	7904 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    787a:	4831      	ldr	r0, [pc, #196]	; (7940 <MPSL_IRQ_CLOCK_Handler+0x304>)
    787c:	e7ec      	b.n	7858 <MPSL_IRQ_CLOCK_Handler+0x21c>
    787e:	4831      	ldr	r0, [pc, #196]	; (7944 <MPSL_IRQ_CLOCK_Handler+0x308>)
    7880:	e7ea      	b.n	7858 <MPSL_IRQ_CLOCK_Handler+0x21c>
    7882:	f240 313d 	movw	r1, #829	; 0x33d
    7886:	206d      	movs	r0, #109	; 0x6d
    7888:	f000 fa38 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    788c:	f000 f9ac 	bl	7be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7890:	e038      	b.n	7904 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    7892:	f8c5 800c 	str.w	r8, [r5, #12]
    7896:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    789a:	69a0      	ldr	r0, [r4, #24]
    789c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    78a0:	f002 fb7f 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    78a4:	b940      	cbnz	r0, 78b8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    78a6:	f002 fb86 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    78aa:	b928      	cbnz	r0, 78b8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    78ac:	f002 fb9a 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    78b0:	b910      	cbnz	r0, 78b8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    78b2:	f002 fbab 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    78b6:	b138      	cbz	r0, 78c8 <MPSL_IRQ_CLOCK_Handler+0x28c>
    78b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    78bc:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    78c0:	4921      	ldr	r1, [pc, #132]	; (7948 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    78c2:	f3c0 3042 	ubfx	r0, r0, #13, #3
    78c6:	6008      	str	r0, [r1, #0]
    78c8:	f002 fb6b 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    78cc:	b940      	cbnz	r0, 78e0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78ce:	f002 fb72 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    78d2:	b928      	cbnz	r0, 78e0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78d4:	f002 fb86 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    78d8:	b910      	cbnz	r0, 78e0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78da:	f002 fb97 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    78de:	b118      	cbz	r0, 78e8 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    78e0:	4919      	ldr	r1, [pc, #100]	; (7948 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    78e2:	3110      	adds	r1, #16
    78e4:	f8c1 8000 	str.w	r8, [r1]
    78e8:	f8c5 8008 	str.w	r8, [r5, #8]
    78ec:	2002      	movs	r0, #2
    78ee:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    78f2:	79b0      	ldrb	r0, [r6, #6]
    78f4:	b930      	cbnz	r0, 7904 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    78f6:	f000 f829 	bl	794c <MPSL_IRQ_CLOCK_Handler+0x310>
    78fa:	2002      	movs	r0, #2
    78fc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7900:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    7904:	79a0      	ldrb	r0, [r4, #6]
    7906:	b170      	cbz	r0, 7926 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7908:	7830      	ldrb	r0, [r6, #0]
    790a:	b960      	cbnz	r0, 7926 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    790c:	f000 f97e 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7910:	4606      	mov	r6, r0
    7912:	f000 fa67 	bl	7de4 <mpsl_temperature_get>
    7916:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    791a:	b116      	cbz	r6, 7922 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    791c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    7920:	e001      	b.n	7926 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7922:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7926:	2101      	movs	r1, #1
    7928:	4628      	mov	r0, r5
    792a:	f002 faa9 	bl	9e80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    792e:	b108      	cbz	r0, 7934 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    7930:	f000 f966 	bl	7c00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7934:	72a7      	strb	r7, [r4, #10]
    7936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    793a:	0000      	.short	0x0000
    793c:	2000012c 	.word	0x2000012c
    7940:	00020001 	.word	0x00020001
    7944:	00030001 	.word	0x00030001
    7948:	4000053c 	.word	0x4000053c
    794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7950:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7954:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    7958:	f010 0f02 	tst.w	r0, #2
    795c:	d011      	beq.n	7982 <MPSL_IRQ_CLOCK_Handler+0x346>
    795e:	4c16      	ldr	r4, [pc, #88]	; (79b8 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    7960:	6820      	ldr	r0, [r4, #0]
    7962:	43c0      	mvns	r0, r0
    7964:	f340 1600 	sbfx	r6, r0, #4, #1
    7968:	6820      	ldr	r0, [r4, #0]
    796a:	f040 0010 	orr.w	r0, r0, #16
    796e:	6020      	str	r0, [r4, #0]
    7970:	f44f 7782 	mov.w	r7, #260	; 0x104
    7974:	4639      	mov	r1, r7
    7976:	4628      	mov	r0, r5
    7978:	1c76      	adds	r6, r6, #1
    797a:	f002 fa7c 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    797e:	b128      	cbz	r0, 798c <MPSL_IRQ_CLOCK_Handler+0x350>
    7980:	e00a      	b.n	7998 <MPSL_IRQ_CLOCK_Handler+0x35c>
    7982:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    7986:	206d      	movs	r0, #109	; 0x6d
    7988:	f000 f9b8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    798c:	f002 fb80 	bl	a090 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    7990:	e002      	b.n	7998 <MPSL_IRQ_CLOCK_Handler+0x35c>
    7992:	bf00      	nop
    7994:	f002 fb7a 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7998:	4639      	mov	r1, r7
    799a:	4628      	mov	r0, r5
    799c:	f002 fa6b 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    79a0:	2800      	cmp	r0, #0
    79a2:	d0f7      	beq.n	7994 <MPSL_IRQ_CLOCK_Handler+0x358>
    79a4:	f000 f920 	bl	7be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    79a8:	2e00      	cmp	r6, #0
    79aa:	d103      	bne.n	79b4 <MPSL_IRQ_CLOCK_Handler+0x378>
    79ac:	6820      	ldr	r0, [r4, #0]
    79ae:	f020 0010 	bic.w	r0, r0, #16
    79b2:	6020      	str	r0, [r4, #0]
    79b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79b8:	e000ed10 	.word	0xe000ed10

000079bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    79bc:	4801      	ldr	r0, [pc, #4]	; (79c4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    79be:	89c0      	ldrh	r0, [r0, #14]
    79c0:	4770      	bx	lr
    79c2:	0000      	.short	0x0000
    79c4:	2000012c 	.word	0x2000012c

000079c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    79c8:	b510      	push	{r4, lr}
    79ca:	f3ef 8410 	mrs	r4, PRIMASK
    79ce:	b672      	cpsid	i
    79d0:	480a      	ldr	r0, [pc, #40]	; (79fc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    79d2:	7841      	ldrb	r1, [r0, #1]
    79d4:	b129      	cbz	r1, 79e2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    79d6:	7841      	ldrb	r1, [r0, #1]
    79d8:	1e49      	subs	r1, r1, #1
    79da:	7041      	strb	r1, [r0, #1]
    79dc:	7841      	ldrb	r1, [r0, #1]
    79de:	b129      	cbz	r1, 79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    79e0:	e008      	b.n	79f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    79e2:	f240 1119 	movw	r1, #281	; 0x119
    79e6:	206d      	movs	r0, #109	; 0x6d
    79e8:	f000 f988 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    79ec:	7880      	ldrb	r0, [r0, #2]
    79ee:	b908      	cbnz	r0, 79f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    79f0:	f000 f91a 	bl	7c28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    79f4:	2c00      	cmp	r4, #0
    79f6:	d100      	bne.n	79fa <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    79f8:	b662      	cpsie	i
    79fa:	bd10      	pop	{r4, pc}
    79fc:	2000012c 	.word	0x2000012c

00007a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    7a00:	b510      	push	{r4, lr}
    7a02:	f3ef 8410 	mrs	r4, PRIMASK
    7a06:	b672      	cpsid	i
    7a08:	4806      	ldr	r0, [pc, #24]	; (7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    7a0a:	7841      	ldrb	r1, [r0, #1]
    7a0c:	1c49      	adds	r1, r1, #1
    7a0e:	7041      	strb	r1, [r0, #1]
    7a10:	7840      	ldrb	r0, [r0, #1]
    7a12:	2801      	cmp	r0, #1
    7a14:	d101      	bne.n	7a1a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    7a16:	f002 fa4a 	bl	9eae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    7a1a:	2c00      	cmp	r4, #0
    7a1c:	d100      	bne.n	7a20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    7a1e:	b662      	cpsie	i
    7a20:	bd10      	pop	{r4, pc}
    7a22:	0000      	.short	0x0000
    7a24:	2000012c 	.word	0x2000012c

00007a28 <mpsl_clock_hfclk_release>:
    7a28:	4805      	ldr	r0, [pc, #20]	; (7a40 <mpsl_clock_hfclk_release+0x18>)
    7a2a:	b510      	push	{r4, lr}
    7a2c:	78c1      	ldrb	r1, [r0, #3]
    7a2e:	b121      	cbz	r1, 7a3a <mpsl_clock_hfclk_release+0x12>
    7a30:	2100      	movs	r1, #0
    7a32:	7101      	strb	r1, [r0, #4]
    7a34:	70c1      	strb	r1, [r0, #3]
    7a36:	f7ff ffc7 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7a3a:	2000      	movs	r0, #0
    7a3c:	bd10      	pop	{r4, pc}
    7a3e:	0000      	.short	0x0000
    7a40:	2000012c 	.word	0x2000012c

00007a44 <mpsl_clock_hfclk_request>:
    7a44:	b570      	push	{r4, r5, r6, lr}
    7a46:	4c0c      	ldr	r4, [pc, #48]	; (7a78 <mpsl_clock_hfclk_request+0x34>)
    7a48:	78e1      	ldrb	r1, [r4, #3]
    7a4a:	b961      	cbnz	r1, 7a66 <mpsl_clock_hfclk_request+0x22>
    7a4c:	2501      	movs	r5, #1
    7a4e:	70e5      	strb	r5, [r4, #3]
    7a50:	61e0      	str	r0, [r4, #28]
    7a52:	f7ff ffd5 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7a56:	f000 f8d9 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7a5a:	b130      	cbz	r0, 7a6a <mpsl_clock_hfclk_request+0x26>
    7a5c:	69e0      	ldr	r0, [r4, #28]
    7a5e:	b110      	cbz	r0, 7a66 <mpsl_clock_hfclk_request+0x22>
    7a60:	4780      	blx	r0
    7a62:	2000      	movs	r0, #0
    7a64:	61e0      	str	r0, [r4, #28]
    7a66:	2000      	movs	r0, #0
    7a68:	bd70      	pop	{r4, r5, r6, pc}
    7a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7a6e:	7125      	strb	r5, [r4, #4]
    7a70:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    7a74:	e7f7      	b.n	7a66 <mpsl_clock_hfclk_request+0x22>
    7a76:	0000      	.short	0x0000
    7a78:	2000012c 	.word	0x2000012c

00007a7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    7a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a80:	0005      	movs	r5, r0
    7a82:	f06f 0015 	mvn.w	r0, #21
    7a86:	d03f      	beq.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a88:	7829      	ldrb	r1, [r5, #0]
    7a8a:	2904      	cmp	r1, #4
    7a8c:	d83c      	bhi.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a8e:	2900      	cmp	r1, #0
    7a90:	7869      	ldrb	r1, [r5, #1]
    7a92:	d03b      	beq.n	7b0c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    7a94:	2900      	cmp	r1, #0
    7a96:	d137      	bne.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a98:	78a9      	ldrb	r1, [r5, #2]
    7a9a:	2900      	cmp	r1, #0
    7a9c:	d134      	bne.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a9e:	2000      	movs	r0, #0
    7aa0:	f002 f9d8 	bl	9e54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    7aa4:	2000      	movs	r0, #0
    7aa6:	f002 f9c8 	bl	9e3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7aaa:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7aae:	f04f 31ff 	mov.w	r1, #4294967295
    7ab2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    7ab6:	2600      	movs	r6, #0
    7ab8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    7abc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    7ac0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    7ac4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    7ac8:	4c14      	ldr	r4, [pc, #80]	; (7b1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    7aca:	7066      	strb	r6, [r4, #1]
    7acc:	88a8      	ldrh	r0, [r5, #4]
    7ace:	81a0      	strh	r0, [r4, #12]
    7ad0:	f002 f9e4 	bl	9e9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    7ad4:	2701      	movs	r7, #1
    7ad6:	b108      	cbz	r0, 7adc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    7ad8:	70e7      	strb	r7, [r4, #3]
    7ada:	7067      	strb	r7, [r4, #1]
    7adc:	2101      	movs	r1, #1
    7ade:	4640      	mov	r0, r8
    7ae0:	f002 f9ce 	bl	9e80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7ae4:	b108      	cbz	r0, 7aea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    7ae6:	f000 f88b 	bl	7c00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7aea:	f240 50f5 	movw	r0, #1525	; 0x5f5
    7aee:	81e0      	strh	r0, [r4, #14]
    7af0:	4628      	mov	r0, r5
    7af2:	f7ff fe8d 	bl	7810 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    7af6:	7267      	strb	r7, [r4, #9]
    7af8:	2000      	movs	r0, #0
    7afa:	f002 f99e 	bl	9e3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7afe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7b02:	4630      	mov	r0, r6
    7b04:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    7b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b0c:	2900      	cmp	r1, #0
    7b0e:	d0fb      	beq.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b10:	2920      	cmp	r1, #32
    7b12:	d8f9      	bhi.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b14:	78a9      	ldrb	r1, [r5, #2]
    7b16:	2921      	cmp	r1, #33	; 0x21
    7b18:	d9c1      	bls.n	7a9e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    7b1a:	e7f5      	b.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b1c:	2000012c 	.word	0x2000012c

00007b20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    7b20:	4801      	ldr	r0, [pc, #4]	; (7b28 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    7b22:	8980      	ldrh	r0, [r0, #12]
    7b24:	4770      	bx	lr
    7b26:	0000      	.short	0x0000
    7b28:	2000012c 	.word	0x2000012c

00007b2c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    7b2c:	4802      	ldr	r0, [pc, #8]	; (7b38 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    7b2e:	7a80      	ldrb	r0, [r0, #10]
    7b30:	2800      	cmp	r0, #0
    7b32:	d000      	beq.n	7b36 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    7b34:	2001      	movs	r0, #1
    7b36:	4770      	bx	lr
    7b38:	2000012c 	.word	0x2000012c

00007b3c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b3e:	4d1f      	ldr	r5, [pc, #124]	; (7bbc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7b40:	7ae8      	ldrb	r0, [r5, #11]
    7b42:	2800      	cmp	r0, #0
    7b44:	d10f      	bne.n	7b66 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b46:	7e28      	ldrb	r0, [r5, #24]
    7b48:	f000 0003 	and.w	r0, r0, #3
    7b4c:	f002 f9b4 	bl	9eb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7b50:	2800      	cmp	r0, #0
    7b52:	d008      	beq.n	7b66 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b54:	f3ef 8110 	mrs	r1, PRIMASK
    7b58:	b672      	cpsid	i
    7b5a:	f7ff ffe7 	bl	7b2c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7b5e:	b118      	cbz	r0, 7b68 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    7b60:	2900      	cmp	r1, #0
    7b62:	d100      	bne.n	7b66 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b64:	b662      	cpsie	i
    7b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b68:	2601      	movs	r6, #1
    7b6a:	72ae      	strb	r6, [r5, #10]
    7b6c:	b901      	cbnz	r1, 7b70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    7b6e:	b662      	cpsie	i
    7b70:	2018      	movs	r0, #24
    7b72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7b76:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7b7a:	61a6      	str	r6, [r4, #24]
    7b7c:	f44f 7020 	mov.w	r0, #640	; 0x280
    7b80:	f8ad 0000 	strh.w	r0, [sp]
    7b84:	f8bd 0000 	ldrh.w	r0, [sp]
    7b88:	1e41      	subs	r1, r0, #1
    7b8a:	f8ad 1000 	strh.w	r1, [sp]
    7b8e:	d2f9      	bcs.n	7b84 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    7b90:	2700      	movs	r7, #0
    7b92:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    7b96:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    7b9a:	4808      	ldr	r0, [pc, #32]	; (7bbc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7b9c:	3008      	adds	r0, #8
    7b9e:	f002 f9f1 	bl	9f84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    7ba2:	702f      	strb	r7, [r5, #0]
    7ba4:	f7ff fd8e 	bl	76c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    7ba8:	6166      	str	r6, [r4, #20]
    7baa:	7968      	ldrb	r0, [r5, #5]
    7bac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7bb0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7bb4:	2018      	movs	r0, #24
    7bb6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bbc:	2000012c 	.word	0x2000012c

00007bc0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7bc0:	4602      	mov	r2, r0
    7bc2:	b510      	push	{r4, lr}
    7bc4:	2000      	movs	r0, #0
    7bc6:	2900      	cmp	r1, #0
    7bc8:	d00a      	beq.n	7be0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7bca:	2a00      	cmp	r2, #0
    7bcc:	d008      	beq.n	7be0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7bce:	fba2 0101 	umull	r0, r1, r2, r1
    7bd2:	1e40      	subs	r0, r0, #1
    7bd4:	4a03      	ldr	r2, [pc, #12]	; (7be4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    7bd6:	f141 31ff 	adc.w	r1, r1, #4294967295
    7bda:	f002 fa5b 	bl	a094 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    7bde:	1c40      	adds	r0, r0, #1
    7be0:	bd10      	pop	{r4, pc}
    7be2:	0000      	.short	0x0000
    7be4:	000f4240 	.word	0x000f4240

00007be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    7be8:	b510      	push	{r4, lr}
    7bea:	4c04      	ldr	r4, [pc, #16]	; (7bfc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    7bec:	7e20      	ldrb	r0, [r4, #24]
    7bee:	f000 0003 	and.w	r0, r0, #3
    7bf2:	f002 f961 	bl	9eb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7bf6:	2800      	cmp	r0, #0
    7bf8:	d0f8      	beq.n	7bec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    7bfa:	bd10      	pop	{r4, pc}
    7bfc:	2000012c 	.word	0x2000012c

00007c00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    7c00:	4901      	ldr	r1, [pc, #4]	; (7c08 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    7c02:	2001      	movs	r0, #1
    7c04:	7008      	strb	r0, [r1, #0]
    7c06:	4770      	bx	lr
    7c08:	20000199 	.word	0x20000199

00007c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    7c0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7c10:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c14:	b918      	cbnz	r0, 7c1e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    7c16:	4803      	ldr	r0, [pc, #12]	; (7c24 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    7c18:	7800      	ldrb	r0, [r0, #0]
    7c1a:	2800      	cmp	r0, #0
    7c1c:	d000      	beq.n	7c20 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    7c1e:	2001      	movs	r0, #1
    7c20:	4770      	bx	lr
    7c22:	0000      	.short	0x0000
    7c24:	20000199 	.word	0x20000199

00007c28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    7c28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7c2c:	2101      	movs	r1, #1
    7c2e:	6041      	str	r1, [r0, #4]
    7c30:	2100      	movs	r1, #0
    7c32:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c36:	4801      	ldr	r0, [pc, #4]	; (7c3c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    7c38:	7001      	strb	r1, [r0, #0]
    7c3a:	4770      	bx	lr
    7c3c:	20000199 	.word	0x20000199

00007c40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    7c40:	4802      	ldr	r0, [pc, #8]	; (7c4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    7c42:	6800      	ldr	r0, [r0, #0]
    7c44:	f000 0003 	and.w	r0, r0, #3
    7c48:	4770      	bx	lr
    7c4a:	0000      	.short	0x0000
    7c4c:	4000041c 	.word	0x4000041c
    7c50:	b510      	push	{r4, lr}
    7c52:	b131      	cbz	r1, 7c62 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    7c54:	2901      	cmp	r1, #1
    7c56:	d007      	beq.n	7c68 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    7c58:	f240 3102 	movw	r1, #770	; 0x302
    7c5c:	a005      	add	r0, pc, #20	; (adr r0, 7c74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    7c5e:	f000 f821 	bl	7ca4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    7c62:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    7c66:	e001      	b.n	7c6c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    7c68:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    7c6c:	f000 0001 	and.w	r0, r0, #1
    7c70:	bd10      	pop	{r4, pc}
    7c72:	0000      	.short	0x0000
    7c74:	5f66726e 	.word	0x5f66726e
    7c78:	636f6c63 	.word	0x636f6c63
    7c7c:	00682e6b 	.word	0x00682e6b
    7c80:	f3bf 8f4f 	dsb	sy
    7c84:	4805      	ldr	r0, [pc, #20]	; (7c9c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    7c86:	6801      	ldr	r1, [r0, #0]
    7c88:	4a05      	ldr	r2, [pc, #20]	; (7ca0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    7c8a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    7c8e:	4311      	orrs	r1, r2
    7c90:	6001      	str	r1, [r0, #0]
    7c92:	f3bf 8f4f 	dsb	sy
    7c96:	bf00      	nop
    7c98:	e7fd      	b.n	7c96 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    7c9a:	0000      	.short	0x0000
    7c9c:	e000ed0c 	.word	0xe000ed0c
    7ca0:	05fa0004 	.word	0x05fa0004

00007ca4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    7ca4:	b672      	cpsid	i
    7ca6:	4a03      	ldr	r2, [pc, #12]	; (7cb4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    7ca8:	6852      	ldr	r2, [r2, #4]
    7caa:	b102      	cbz	r2, 7cae <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    7cac:	4790      	blx	r2
    7cae:	f7ff ffe7 	bl	7c80 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7cb2:	0000      	.short	0x0000
    7cb4:	2000014c 	.word	0x2000014c
    7cb8:	4806      	ldr	r0, [pc, #24]	; (7cd4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    7cba:	b510      	push	{r4, lr}
    7cbc:	2100      	movs	r1, #0
    7cbe:	6001      	str	r1, [r0, #0]
    7cc0:	2101      	movs	r1, #1
    7cc2:	6001      	str	r1, [r0, #0]
    7cc4:	4608      	mov	r0, r1
    7cc6:	f002 f91e 	bl	9f06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cce:	2001      	movs	r0, #1
    7cd0:	f002 b90c 	b.w	9eec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7cd4:	40001ffc 	.word	0x40001ffc
    7cd8:	4807      	ldr	r0, [pc, #28]	; (7cf8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    7cda:	b510      	push	{r4, lr}
    7cdc:	2101      	movs	r1, #1
    7cde:	6041      	str	r1, [r0, #4]
    7ce0:	1e89      	subs	r1, r1, #2
    7ce2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    7ce6:	200c      	movs	r0, #12
    7ce8:	f002 f90d 	bl	9f06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cf0:	200c      	movs	r0, #12
    7cf2:	f002 b8fb 	b.w	9eec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7cf6:	0000      	.short	0x0000
    7cf8:	4000c000 	.word	0x4000c000

00007cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    7cfc:	b50e      	push	{r1, r2, r3, lr}
    7cfe:	b672      	cpsid	i
    7d00:	4a0f      	ldr	r2, [pc, #60]	; (7d40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    7d02:	6855      	ldr	r5, [r2, #4]
    7d04:	b1d5      	cbz	r5, 7d3c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    7d06:	2200      	movs	r2, #0
    7d08:	4603      	mov	r3, r0
    7d0a:	466e      	mov	r6, sp
    7d0c:	240a      	movs	r4, #10
    7d0e:	e003      	b.n	7d18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    7d10:	fbb0 f0f4 	udiv	r0, r0, r4
    7d14:	1c52      	adds	r2, r2, #1
    7d16:	b2d2      	uxtb	r2, r2
    7d18:	2800      	cmp	r0, #0
    7d1a:	d1f9      	bne.n	7d10 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    7d1c:	54b0      	strb	r0, [r6, r2]
    7d1e:	e009      	b.n	7d34 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    7d20:	fbb3 f0f4 	udiv	r0, r3, r4
    7d24:	fb04 3010 	mls	r0, r4, r0, r3
    7d28:	fbb3 f3f4 	udiv	r3, r3, r4
    7d2c:	1e52      	subs	r2, r2, #1
    7d2e:	b2d2      	uxtb	r2, r2
    7d30:	3030      	adds	r0, #48	; 0x30
    7d32:	54b0      	strb	r0, [r6, r2]
    7d34:	2a00      	cmp	r2, #0
    7d36:	d1f3      	bne.n	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    7d38:	4630      	mov	r0, r6
    7d3a:	47a8      	blx	r5
    7d3c:	f7ff ffa0 	bl	7c80 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7d40:	2000014c 	.word	0x2000014c

00007d44 <mpsl_init>:
    7d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d48:	4c18      	ldr	r4, [pc, #96]	; (7dac <mpsl_init+0x68>)
    7d4a:	4606      	mov	r6, r0
    7d4c:	4617      	mov	r7, r2
    7d4e:	7860      	ldrb	r0, [r4, #1]
    7d50:	460d      	mov	r5, r1
    7d52:	b118      	cbz	r0, 7d5c <mpsl_init+0x18>
    7d54:	f04f 30ff 	mov.w	r0, #4294967295
    7d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d5c:	f7fc fb9e 	bl	449c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    7d60:	b906      	cbnz	r6, 7d64 <mpsl_init+0x20>
    7d62:	4e13      	ldr	r6, [pc, #76]	; (7db0 <mpsl_init+0x6c>)
    7d64:	6067      	str	r7, [r4, #4]
    7d66:	7025      	strb	r5, [r4, #0]
    7d68:	f7ff ffa6 	bl	7cb8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    7d6c:	f7ff ffb4 	bl	7cd8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    7d70:	4630      	mov	r0, r6
    7d72:	f7ff fe83 	bl	7a7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    7d76:	0006      	movs	r6, r0
    7d78:	d1ee      	bne.n	7d58 <mpsl_init+0x14>
    7d7a:	f7fe fe4f 	bl	6a1c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    7d7e:	f7ff fedd 	bl	7b3c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    7d82:	f002 f830 	bl	9de6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    7d86:	4628      	mov	r0, r5
    7d88:	f002 f8b0 	bl	9eec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7d8c:	2001      	movs	r0, #1
    7d8e:	2d00      	cmp	r5, #0
    7d90:	db09      	blt.n	7da6 <mpsl_init+0x62>
    7d92:	f005 011f 	and.w	r1, r5, #31
    7d96:	fa00 f101 	lsl.w	r1, r0, r1
    7d9a:	096a      	lsrs	r2, r5, #5
    7d9c:	0092      	lsls	r2, r2, #2
    7d9e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    7da2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    7da6:	7060      	strb	r0, [r4, #1]
    7da8:	4630      	mov	r0, r6
    7daa:	e7d5      	b.n	7d58 <mpsl_init+0x14>
    7dac:	2000014c 	.word	0x2000014c
    7db0:	00009f28 	.word	0x00009f28

00007db4 <mpsl_is_initialized>:
    7db4:	4801      	ldr	r0, [pc, #4]	; (7dbc <mpsl_is_initialized+0x8>)
    7db6:	7840      	ldrb	r0, [r0, #1]
    7db8:	4770      	bx	lr
    7dba:	0000      	.short	0x0000
    7dbc:	2000014c 	.word	0x2000014c

00007dc0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    7dc0:	4807      	ldr	r0, [pc, #28]	; (7de0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    7dc2:	f990 0000 	ldrsb.w	r0, [r0]
    7dc6:	2800      	cmp	r0, #0
    7dc8:	db09      	blt.n	7dde <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    7dca:	f000 021f 	and.w	r2, r0, #31
    7dce:	2101      	movs	r1, #1
    7dd0:	4091      	lsls	r1, r2
    7dd2:	0940      	lsrs	r0, r0, #5
    7dd4:	0080      	lsls	r0, r0, #2
    7dd6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7dda:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7dde:	4770      	bx	lr
    7de0:	2000014c 	.word	0x2000014c

00007de4 <mpsl_temperature_get>:
    7de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7de8:	2501      	movs	r5, #1
    7dea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7dee:	0329      	lsls	r1, r5, #12
    7df0:	f04f 0800 	mov.w	r8, #0
    7df4:	4640      	mov	r0, r8
    7df6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    7dfa:	f3bf 8f4f 	dsb	sy
    7dfe:	f3bf 8f6f 	isb	sy
    7e02:	4c16      	ldr	r4, [pc, #88]	; (7e5c <mpsl_temperature_get+0x78>)
    7e04:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7e08:	200c      	movs	r0, #12
    7e0a:	f002 f89b 	bl	9f44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7e0e:	4e14      	ldr	r6, [pc, #80]	; (7e60 <mpsl_temperature_get+0x7c>)
    7e10:	6830      	ldr	r0, [r6, #0]
    7e12:	43c0      	mvns	r0, r0
    7e14:	f340 1700 	sbfx	r7, r0, #4, #1
    7e18:	6830      	ldr	r0, [r6, #0]
    7e1a:	f040 0010 	orr.w	r0, r0, #16
    7e1e:	6030      	str	r0, [r6, #0]
    7e20:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    7e24:	6025      	str	r5, [r4, #0]
    7e26:	1c7f      	adds	r7, r7, #1
    7e28:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    7e2c:	b108      	cbz	r0, 7e32 <mpsl_temperature_get+0x4e>
    7e2e:	b11f      	cbz	r7, 7e38 <mpsl_temperature_get+0x54>
    7e30:	e006      	b.n	7e40 <mpsl_temperature_get+0x5c>
    7e32:	f002 f92b 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e36:	e7f7      	b.n	7e28 <mpsl_temperature_get+0x44>
    7e38:	6830      	ldr	r0, [r6, #0]
    7e3a:	f020 0010 	bic.w	r0, r0, #16
    7e3e:	6030      	str	r0, [r6, #0]
    7e40:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    7e44:	6065      	str	r5, [r4, #4]
    7e46:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    7e4a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    7e4e:	200c      	movs	r0, #12
    7e50:	f002 f878 	bl	9f44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7e54:	4630      	mov	r0, r6
    7e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e5a:	0000      	.short	0x0000
    7e5c:	4000c000 	.word	0x4000c000
    7e60:	e000ed10 	.word	0xe000ed10

00007e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    7e64:	b510      	push	{r4, lr}
    7e66:	4602      	mov	r2, r0
    7e68:	2005      	movs	r0, #5
    7e6a:	490c      	ldr	r1, [pc, #48]	; (7e9c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    7e6c:	e004      	b.n	7e78 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    7e6e:	bf00      	nop
    7e70:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    7e74:	791b      	ldrb	r3, [r3, #4]
    7e76:	b133      	cbz	r3, 7e86 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    7e78:	1e40      	subs	r0, r0, #1
    7e7a:	b2c0      	uxtb	r0, r0
    7e7c:	d2f8      	bcs.n	7e70 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    7e7e:	2148      	movs	r1, #72	; 0x48
    7e80:	2069      	movs	r0, #105	; 0x69
    7e82:	f7ff ff3b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7e86:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    7e8a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7e8e:	2200      	movs	r2, #0
    7e90:	714a      	strb	r2, [r1, #5]
    7e92:	718a      	strb	r2, [r1, #6]
    7e94:	2201      	movs	r2, #1
    7e96:	710a      	strb	r2, [r1, #4]
    7e98:	bd10      	pop	{r4, pc}
    7e9a:	0000      	.short	0x0000
    7e9c:	20000dec 	.word	0x20000dec

00007ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    7ea0:	b510      	push	{r4, lr}
    7ea2:	2805      	cmp	r0, #5
    7ea4:	d301      	bcc.n	7eaa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    7ea6:	2158      	movs	r1, #88	; 0x58
    7ea8:	e006      	b.n	7eb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    7eaa:	490a      	ldr	r1, [pc, #40]	; (7ed4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    7eac:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7eb0:	7901      	ldrb	r1, [r0, #4]
    7eb2:	2901      	cmp	r1, #1
    7eb4:	d003      	beq.n	7ebe <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    7eb6:	2159      	movs	r1, #89	; 0x59
    7eb8:	2069      	movs	r0, #105	; 0x69
    7eba:	f7ff ff1f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ebe:	7941      	ldrb	r1, [r0, #5]
    7ec0:	7982      	ldrb	r2, [r0, #6]
    7ec2:	1c49      	adds	r1, r1, #1
    7ec4:	b2c9      	uxtb	r1, r1
    7ec6:	428a      	cmp	r2, r1
    7ec8:	d000      	beq.n	7ecc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    7eca:	7141      	strb	r1, [r0, #5]
    7ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed0:	f7ff bf76 	b.w	7dc0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    7ed4:	20000dec 	.word	0x20000dec

00007ed8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    7ed8:	b510      	push	{r4, lr}
    7eda:	2805      	cmp	r0, #5
    7edc:	d303      	bcc.n	7ee6 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    7ede:	214f      	movs	r1, #79	; 0x4f
    7ee0:	2069      	movs	r0, #105	; 0x69
    7ee2:	f7ff ff0b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ee6:	4a03      	ldr	r2, [pc, #12]	; (7ef4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    7ee8:	2100      	movs	r1, #0
    7eea:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    7eee:	7101      	strb	r1, [r0, #4]
    7ef0:	bd10      	pop	{r4, pc}
    7ef2:	0000      	.short	0x0000
    7ef4:	20000dec 	.word	0x20000dec

00007ef8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    7ef8:	b570      	push	{r4, r5, r6, lr}
    7efa:	2505      	movs	r5, #5
    7efc:	4e0e      	ldr	r6, [pc, #56]	; (7f38 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    7efe:	4c0f      	ldr	r4, [pc, #60]	; (7f3c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    7f00:	e016      	b.n	7f30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7f02:	7821      	ldrb	r1, [r4, #0]
    7f04:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    7f08:	7902      	ldrb	r2, [r0, #4]
    7f0a:	2a01      	cmp	r2, #1
    7f0c:	d108      	bne.n	7f20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7f0e:	7942      	ldrb	r2, [r0, #5]
    7f10:	7983      	ldrb	r3, [r0, #6]
    7f12:	429a      	cmp	r2, r3
    7f14:	d004      	beq.n	7f20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7f16:	7942      	ldrb	r2, [r0, #5]
    7f18:	7182      	strb	r2, [r0, #6]
    7f1a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    7f1e:	4780      	blx	r0
    7f20:	7820      	ldrb	r0, [r4, #0]
    7f22:	1c40      	adds	r0, r0, #1
    7f24:	b2c0      	uxtb	r0, r0
    7f26:	7020      	strb	r0, [r4, #0]
    7f28:	2805      	cmp	r0, #5
    7f2a:	d301      	bcc.n	7f30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7f2c:	2000      	movs	r0, #0
    7f2e:	7020      	strb	r0, [r4, #0]
    7f30:	1e6d      	subs	r5, r5, #1
    7f32:	b2ed      	uxtb	r5, r5
    7f34:	d2e5      	bcs.n	7f02 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    7f36:	bd70      	pop	{r4, r5, r6, pc}
    7f38:	20000dec 	.word	0x20000dec
    7f3c:	2000019a 	.word	0x2000019a

00007f40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    7f40:	b500      	push	{lr}
    7f42:	f002 f82e 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7f46:	b940      	cbnz	r0, 7f5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f48:	f002 f835 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7f4c:	b928      	cbnz	r0, 7f5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f4e:	f002 f849 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f52:	b910      	cbnz	r0, 7f5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f54:	f002 f85a 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7f58:	b108      	cbz	r0, 7f5e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    7f5a:	4802      	ldr	r0, [pc, #8]	; (7f64 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    7f5c:	bd00      	pop	{pc}
    7f5e:	4802      	ldr	r0, [pc, #8]	; (7f68 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    7f60:	bd00      	pop	{pc}
    7f62:	0000      	.short	0x0000
    7f64:	4000050c 	.word	0x4000050c
    7f68:	4001e700 	.word	0x4001e700
    7f6c:	b510      	push	{r4, lr}
    7f6e:	f002 f84d 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7f72:	b330      	cbz	r0, 7fc2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    7f74:	f3ef 8010 	mrs	r0, PRIMASK
    7f78:	b1c8      	cbz	r0, 7fae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    7f7a:	2100      	movs	r1, #0
    7f7c:	b672      	cpsid	i
    7f7e:	4812      	ldr	r0, [pc, #72]	; (7fc8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    7f80:	6802      	ldr	r2, [r0, #0]
    7f82:	6803      	ldr	r3, [r0, #0]
    7f84:	f3c2 1200 	ubfx	r2, r2, #4, #1
    7f88:	f043 0310 	orr.w	r3, r3, #16
    7f8c:	6003      	str	r3, [r0, #0]
    7f8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7f92:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7f96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    7f9a:	431c      	orrs	r4, r3
    7f9c:	d000      	beq.n	7fa0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    7f9e:	bf40      	sev
    7fa0:	bf20      	wfe
    7fa2:	bf00      	nop
    7fa4:	bf00      	nop
    7fa6:	bf00      	nop
    7fa8:	bf00      	nop
    7faa:	b112      	cbz	r2, 7fb2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    7fac:	e005      	b.n	7fba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    7fae:	2101      	movs	r1, #1
    7fb0:	e7e4      	b.n	7f7c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    7fb2:	6802      	ldr	r2, [r0, #0]
    7fb4:	f022 0210 	bic.w	r2, r2, #16
    7fb8:	6002      	str	r2, [r0, #0]
    7fba:	2900      	cmp	r1, #0
    7fbc:	d000      	beq.n	7fc0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    7fbe:	b662      	cpsie	i
    7fc0:	bd10      	pop	{r4, pc}
    7fc2:	bf20      	wfe
    7fc4:	bd10      	pop	{r4, pc}
    7fc6:	0000      	.short	0x0000
    7fc8:	e000ed10 	.word	0xe000ed10

00007fcc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    7fcc:	4901      	ldr	r1, [pc, #4]	; (7fd4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    7fce:	2001      	movs	r0, #1
    7fd0:	7088      	strb	r0, [r1, #2]
    7fd2:	4770      	bx	lr
    7fd4:	20000154 	.word	0x20000154

00007fd8 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    7fd8:	0000a30d 0000a345 0000a32f 0000a31d     ....E.../.......
    7fe8:	0000a329 0000a317 0000a30b 0000a309     )...............
    7ff8:	0000a341 0000a335 0000a323 0000a311     A...5...#.......
    8008:	0000a303 0000a2fb 0000a2ff 0000a2f5     ................

00008018 <mpsl_fem_disable>:
    8018:	4801      	ldr	r0, [pc, #4]	; (8020 <mpsl_fem_disable+0x8>)
    801a:	6800      	ldr	r0, [r0, #0]
    801c:	6800      	ldr	r0, [r0, #0]
    801e:	4700      	bx	r0
    8020:	20000168 	.word	0x20000168

00008024 <mpsl_fem_lna_configuration_clear>:
    8024:	4801      	ldr	r0, [pc, #4]	; (802c <mpsl_fem_lna_configuration_clear+0x8>)
    8026:	6800      	ldr	r0, [r0, #0]
    8028:	6940      	ldr	r0, [r0, #20]
    802a:	4700      	bx	r0
    802c:	20000168 	.word	0x20000168

00008030 <mpsl_fem_lna_configuration_set>:
    8030:	4a01      	ldr	r2, [pc, #4]	; (8038 <mpsl_fem_lna_configuration_set+0x8>)
    8032:	6812      	ldr	r2, [r2, #0]
    8034:	68d2      	ldr	r2, [r2, #12]
    8036:	4710      	bx	r2
    8038:	20000168 	.word	0x20000168

0000803c <mpsl_fem_lna_is_configured>:
    803c:	4901      	ldr	r1, [pc, #4]	; (8044 <mpsl_fem_lna_is_configured+0x8>)
    803e:	6809      	ldr	r1, [r1, #0]
    8040:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    8042:	4708      	bx	r1
    8044:	20000168 	.word	0x20000168

00008048 <mpsl_fem_pa_configuration_clear>:
    8048:	4801      	ldr	r0, [pc, #4]	; (8050 <mpsl_fem_pa_configuration_clear+0x8>)
    804a:	6800      	ldr	r0, [r0, #0]
    804c:	6900      	ldr	r0, [r0, #16]
    804e:	4700      	bx	r0
    8050:	20000168 	.word	0x20000168

00008054 <mpsl_fem_pa_configuration_set>:
    8054:	4a01      	ldr	r2, [pc, #4]	; (805c <mpsl_fem_pa_configuration_set+0x8>)
    8056:	6812      	ldr	r2, [r2, #0]
    8058:	6892      	ldr	r2, [r2, #8]
    805a:	4710      	bx	r2
    805c:	20000168 	.word	0x20000168

00008060 <mpsl_fem_pa_gain_set>:
    8060:	4901      	ldr	r1, [pc, #4]	; (8068 <mpsl_fem_pa_gain_set+0x8>)
    8062:	6809      	ldr	r1, [r1, #0]
    8064:	6a49      	ldr	r1, [r1, #36]	; 0x24
    8066:	4708      	bx	r1
    8068:	20000168 	.word	0x20000168

0000806c <mpsl_fem_pa_is_configured>:
    806c:	4901      	ldr	r1, [pc, #4]	; (8074 <mpsl_fem_pa_is_configured+0x8>)
    806e:	6809      	ldr	r1, [r1, #0]
    8070:	6a89      	ldr	r1, [r1, #40]	; 0x28
    8072:	4708      	bx	r1
    8074:	20000168 	.word	0x20000168

00008078 <mpsl_fem_tx_power_split>:
    8078:	b430      	push	{r4, r5}
    807a:	4c03      	ldr	r4, [pc, #12]	; (8088 <mpsl_fem_tx_power_split+0x10>)
    807c:	6824      	ldr	r4, [r4, #0]
    807e:	6864      	ldr	r4, [r4, #4]
    8080:	46a4      	mov	ip, r4
    8082:	bc30      	pop	{r4, r5}
    8084:	4760      	bx	ip
    8086:	0000      	.short	0x0000
    8088:	20000168 	.word	0x20000168

0000808c <mpsl_fem_device_config_254_apply_get>:
    808c:	4801      	ldr	r0, [pc, #4]	; (8094 <mpsl_fem_device_config_254_apply_get+0x8>)
    808e:	7800      	ldrb	r0, [r0, #0]
    8090:	4770      	bx	lr
    8092:	0000      	.short	0x0000
    8094:	2000019b 	.word	0x2000019b

00008098 <__udivmoddi4>:
    8098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    809c:	4686      	mov	lr, r0
    809e:	468c      	mov	ip, r1
    80a0:	4608      	mov	r0, r1
    80a2:	9e08      	ldr	r6, [sp, #32]
    80a4:	4615      	mov	r5, r2
    80a6:	4674      	mov	r4, lr
    80a8:	4619      	mov	r1, r3
    80aa:	2b00      	cmp	r3, #0
    80ac:	f040 80c2 	bne.w	8234 <__udivmoddi4+0x19c>
    80b0:	4285      	cmp	r5, r0
    80b2:	fab2 f282 	clz	r2, r2
    80b6:	d945      	bls.n	8144 <__udivmoddi4+0xac>
    80b8:	b14a      	cbz	r2, 80ce <__udivmoddi4+0x36>
    80ba:	f1c2 0320 	rsb	r3, r2, #32
    80be:	fa00 fc02 	lsl.w	ip, r0, r2
    80c2:	fa2e f303 	lsr.w	r3, lr, r3
    80c6:	4095      	lsls	r5, r2
    80c8:	ea43 0c0c 	orr.w	ip, r3, ip
    80cc:	4094      	lsls	r4, r2
    80ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    80d2:	b2a8      	uxth	r0, r5
    80d4:	fbbc f8fe 	udiv	r8, ip, lr
    80d8:	0c23      	lsrs	r3, r4, #16
    80da:	fb0e cc18 	mls	ip, lr, r8, ip
    80de:	fb08 f900 	mul.w	r9, r8, r0
    80e2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    80e6:	4599      	cmp	r9, r3
    80e8:	d928      	bls.n	813c <__udivmoddi4+0xa4>
    80ea:	18eb      	adds	r3, r5, r3
    80ec:	f108 37ff 	add.w	r7, r8, #4294967295
    80f0:	d204      	bcs.n	80fc <__udivmoddi4+0x64>
    80f2:	4599      	cmp	r9, r3
    80f4:	d902      	bls.n	80fc <__udivmoddi4+0x64>
    80f6:	f1a8 0702 	sub.w	r7, r8, #2
    80fa:	442b      	add	r3, r5
    80fc:	eba3 0309 	sub.w	r3, r3, r9
    8100:	b2a4      	uxth	r4, r4
    8102:	fbb3 fcfe 	udiv	ip, r3, lr
    8106:	fb0e 331c 	mls	r3, lr, ip, r3
    810a:	fb0c f000 	mul.w	r0, ip, r0
    810e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8112:	42a0      	cmp	r0, r4
    8114:	d914      	bls.n	8140 <__udivmoddi4+0xa8>
    8116:	192c      	adds	r4, r5, r4
    8118:	f10c 33ff 	add.w	r3, ip, #4294967295
    811c:	d204      	bcs.n	8128 <__udivmoddi4+0x90>
    811e:	42a0      	cmp	r0, r4
    8120:	d902      	bls.n	8128 <__udivmoddi4+0x90>
    8122:	f1ac 0302 	sub.w	r3, ip, #2
    8126:	442c      	add	r4, r5
    8128:	1a24      	subs	r4, r4, r0
    812a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    812e:	b11e      	cbz	r6, 8138 <__udivmoddi4+0xa0>
    8130:	40d4      	lsrs	r4, r2
    8132:	2300      	movs	r3, #0
    8134:	6034      	str	r4, [r6, #0]
    8136:	6073      	str	r3, [r6, #4]
    8138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    813c:	4647      	mov	r7, r8
    813e:	e7dd      	b.n	80fc <__udivmoddi4+0x64>
    8140:	4663      	mov	r3, ip
    8142:	e7f1      	b.n	8128 <__udivmoddi4+0x90>
    8144:	bb92      	cbnz	r2, 81ac <__udivmoddi4+0x114>
    8146:	1b43      	subs	r3, r0, r5
    8148:	2101      	movs	r1, #1
    814a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    814e:	b2af      	uxth	r7, r5
    8150:	fbb3 fcfe 	udiv	ip, r3, lr
    8154:	0c20      	lsrs	r0, r4, #16
    8156:	fb0e 331c 	mls	r3, lr, ip, r3
    815a:	fb0c f807 	mul.w	r8, ip, r7
    815e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8162:	4598      	cmp	r8, r3
    8164:	d962      	bls.n	822c <__udivmoddi4+0x194>
    8166:	18eb      	adds	r3, r5, r3
    8168:	f10c 30ff 	add.w	r0, ip, #4294967295
    816c:	d204      	bcs.n	8178 <__udivmoddi4+0xe0>
    816e:	4598      	cmp	r8, r3
    8170:	d902      	bls.n	8178 <__udivmoddi4+0xe0>
    8172:	f1ac 0002 	sub.w	r0, ip, #2
    8176:	442b      	add	r3, r5
    8178:	eba3 0308 	sub.w	r3, r3, r8
    817c:	b2a4      	uxth	r4, r4
    817e:	fbb3 fcfe 	udiv	ip, r3, lr
    8182:	fb0e 331c 	mls	r3, lr, ip, r3
    8186:	fb0c f707 	mul.w	r7, ip, r7
    818a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    818e:	42a7      	cmp	r7, r4
    8190:	d94e      	bls.n	8230 <__udivmoddi4+0x198>
    8192:	192c      	adds	r4, r5, r4
    8194:	f10c 33ff 	add.w	r3, ip, #4294967295
    8198:	d204      	bcs.n	81a4 <__udivmoddi4+0x10c>
    819a:	42a7      	cmp	r7, r4
    819c:	d902      	bls.n	81a4 <__udivmoddi4+0x10c>
    819e:	f1ac 0302 	sub.w	r3, ip, #2
    81a2:	442c      	add	r4, r5
    81a4:	1be4      	subs	r4, r4, r7
    81a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    81aa:	e7c0      	b.n	812e <__udivmoddi4+0x96>
    81ac:	f1c2 0320 	rsb	r3, r2, #32
    81b0:	fa20 f103 	lsr.w	r1, r0, r3
    81b4:	4095      	lsls	r5, r2
    81b6:	4090      	lsls	r0, r2
    81b8:	fa2e f303 	lsr.w	r3, lr, r3
    81bc:	4303      	orrs	r3, r0
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2af      	uxth	r7, r5
    81c4:	fbb1 fcfe 	udiv	ip, r1, lr
    81c8:	fb0e 101c 	mls	r0, lr, ip, r1
    81cc:	0c19      	lsrs	r1, r3, #16
    81ce:	fb0c f807 	mul.w	r8, ip, r7
    81d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    81d6:	4588      	cmp	r8, r1
    81d8:	fa04 f402 	lsl.w	r4, r4, r2
    81dc:	d922      	bls.n	8224 <__udivmoddi4+0x18c>
    81de:	1869      	adds	r1, r5, r1
    81e0:	f10c 30ff 	add.w	r0, ip, #4294967295
    81e4:	d204      	bcs.n	81f0 <__udivmoddi4+0x158>
    81e6:	4588      	cmp	r8, r1
    81e8:	d902      	bls.n	81f0 <__udivmoddi4+0x158>
    81ea:	f1ac 0002 	sub.w	r0, ip, #2
    81ee:	4429      	add	r1, r5
    81f0:	eba1 0108 	sub.w	r1, r1, r8
    81f4:	b29b      	uxth	r3, r3
    81f6:	fbb1 fcfe 	udiv	ip, r1, lr
    81fa:	fb0e 111c 	mls	r1, lr, ip, r1
    81fe:	fb0c f707 	mul.w	r7, ip, r7
    8202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8206:	429f      	cmp	r7, r3
    8208:	d90e      	bls.n	8228 <__udivmoddi4+0x190>
    820a:	18eb      	adds	r3, r5, r3
    820c:	f10c 31ff 	add.w	r1, ip, #4294967295
    8210:	d204      	bcs.n	821c <__udivmoddi4+0x184>
    8212:	429f      	cmp	r7, r3
    8214:	d902      	bls.n	821c <__udivmoddi4+0x184>
    8216:	f1ac 0102 	sub.w	r1, ip, #2
    821a:	442b      	add	r3, r5
    821c:	1bdb      	subs	r3, r3, r7
    821e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8222:	e792      	b.n	814a <__udivmoddi4+0xb2>
    8224:	4660      	mov	r0, ip
    8226:	e7e3      	b.n	81f0 <__udivmoddi4+0x158>
    8228:	4661      	mov	r1, ip
    822a:	e7f7      	b.n	821c <__udivmoddi4+0x184>
    822c:	4660      	mov	r0, ip
    822e:	e7a3      	b.n	8178 <__udivmoddi4+0xe0>
    8230:	4663      	mov	r3, ip
    8232:	e7b7      	b.n	81a4 <__udivmoddi4+0x10c>
    8234:	4283      	cmp	r3, r0
    8236:	d906      	bls.n	8246 <__udivmoddi4+0x1ae>
    8238:	b916      	cbnz	r6, 8240 <__udivmoddi4+0x1a8>
    823a:	2100      	movs	r1, #0
    823c:	4608      	mov	r0, r1
    823e:	e77b      	b.n	8138 <__udivmoddi4+0xa0>
    8240:	e9c6 e000 	strd	lr, r0, [r6]
    8244:	e7f9      	b.n	823a <__udivmoddi4+0x1a2>
    8246:	fab3 f783 	clz	r7, r3
    824a:	b98f      	cbnz	r7, 8270 <__udivmoddi4+0x1d8>
    824c:	4283      	cmp	r3, r0
    824e:	d301      	bcc.n	8254 <__udivmoddi4+0x1bc>
    8250:	4572      	cmp	r2, lr
    8252:	d808      	bhi.n	8266 <__udivmoddi4+0x1ce>
    8254:	ebbe 0402 	subs.w	r4, lr, r2
    8258:	eb60 0303 	sbc.w	r3, r0, r3
    825c:	2001      	movs	r0, #1
    825e:	469c      	mov	ip, r3
    8260:	b91e      	cbnz	r6, 826a <__udivmoddi4+0x1d2>
    8262:	2100      	movs	r1, #0
    8264:	e768      	b.n	8138 <__udivmoddi4+0xa0>
    8266:	4638      	mov	r0, r7
    8268:	e7fa      	b.n	8260 <__udivmoddi4+0x1c8>
    826a:	e9c6 4c00 	strd	r4, ip, [r6]
    826e:	e7f8      	b.n	8262 <__udivmoddi4+0x1ca>
    8270:	f1c7 0c20 	rsb	ip, r7, #32
    8274:	40bb      	lsls	r3, r7
    8276:	fa22 f40c 	lsr.w	r4, r2, ip
    827a:	431c      	orrs	r4, r3
    827c:	fa2e f10c 	lsr.w	r1, lr, ip
    8280:	fa20 f30c 	lsr.w	r3, r0, ip
    8284:	40b8      	lsls	r0, r7
    8286:	4301      	orrs	r1, r0
    8288:	ea4f 4914 	mov.w	r9, r4, lsr #16
    828c:	fa0e f507 	lsl.w	r5, lr, r7
    8290:	fbb3 f8f9 	udiv	r8, r3, r9
    8294:	fa1f fe84 	uxth.w	lr, r4
    8298:	fb09 3018 	mls	r0, r9, r8, r3
    829c:	0c0b      	lsrs	r3, r1, #16
    829e:	fb08 fa0e 	mul.w	sl, r8, lr
    82a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    82a6:	459a      	cmp	sl, r3
    82a8:	fa02 f207 	lsl.w	r2, r2, r7
    82ac:	d940      	bls.n	8330 <__udivmoddi4+0x298>
    82ae:	18e3      	adds	r3, r4, r3
    82b0:	f108 30ff 	add.w	r0, r8, #4294967295
    82b4:	d204      	bcs.n	82c0 <__udivmoddi4+0x228>
    82b6:	459a      	cmp	sl, r3
    82b8:	d902      	bls.n	82c0 <__udivmoddi4+0x228>
    82ba:	f1a8 0002 	sub.w	r0, r8, #2
    82be:	4423      	add	r3, r4
    82c0:	eba3 030a 	sub.w	r3, r3, sl
    82c4:	b289      	uxth	r1, r1
    82c6:	fbb3 f8f9 	udiv	r8, r3, r9
    82ca:	fb09 3318 	mls	r3, r9, r8, r3
    82ce:	fb08 fe0e 	mul.w	lr, r8, lr
    82d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    82d6:	458e      	cmp	lr, r1
    82d8:	d92c      	bls.n	8334 <__udivmoddi4+0x29c>
    82da:	1861      	adds	r1, r4, r1
    82dc:	f108 33ff 	add.w	r3, r8, #4294967295
    82e0:	d204      	bcs.n	82ec <__udivmoddi4+0x254>
    82e2:	458e      	cmp	lr, r1
    82e4:	d902      	bls.n	82ec <__udivmoddi4+0x254>
    82e6:	f1a8 0302 	sub.w	r3, r8, #2
    82ea:	4421      	add	r1, r4
    82ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    82f0:	fba0 9802 	umull	r9, r8, r0, r2
    82f4:	eba1 010e 	sub.w	r1, r1, lr
    82f8:	4541      	cmp	r1, r8
    82fa:	46ce      	mov	lr, r9
    82fc:	4643      	mov	r3, r8
    82fe:	d302      	bcc.n	8306 <__udivmoddi4+0x26e>
    8300:	d106      	bne.n	8310 <__udivmoddi4+0x278>
    8302:	454d      	cmp	r5, r9
    8304:	d204      	bcs.n	8310 <__udivmoddi4+0x278>
    8306:	ebb9 0e02 	subs.w	lr, r9, r2
    830a:	eb68 0304 	sbc.w	r3, r8, r4
    830e:	3801      	subs	r0, #1
    8310:	2e00      	cmp	r6, #0
    8312:	d0a6      	beq.n	8262 <__udivmoddi4+0x1ca>
    8314:	ebb5 020e 	subs.w	r2, r5, lr
    8318:	eb61 0103 	sbc.w	r1, r1, r3
    831c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8320:	fa22 f307 	lsr.w	r3, r2, r7
    8324:	ea4c 0303 	orr.w	r3, ip, r3
    8328:	40f9      	lsrs	r1, r7
    832a:	e9c6 3100 	strd	r3, r1, [r6]
    832e:	e798      	b.n	8262 <__udivmoddi4+0x1ca>
    8330:	4640      	mov	r0, r8
    8332:	e7c5      	b.n	82c0 <__udivmoddi4+0x228>
    8334:	4643      	mov	r3, r8
    8336:	e7d9      	b.n	82ec <__udivmoddi4+0x254>
    8338:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    833c:	4681      	mov	r9, r0
    833e:	ea5f 0802 	movs.w	r8, r2
    8342:	f100 0007 	add.w	r0, r0, #7
    8346:	f020 0007 	bic.w	r0, r0, #7
    834a:	f04f 0200 	mov.w	r2, #0
    834e:	e9cd 0200 	strd	r0, r2, [sp]
    8352:	780a      	ldrb	r2, [r1, #0]
    8354:	460c      	mov	r4, r1
    8356:	f88d 2005 	strb.w	r2, [sp, #5]
    835a:	d000      	beq.n	835e <__udivmoddi4+0x2c6>
    835c:	2000      	movs	r0, #0
    835e:	a901      	add	r1, sp, #4
    8360:	f7f8 fad6 	bl	910 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    8364:	9900      	ldr	r1, [sp, #0]
    8366:	2600      	movs	r6, #0
    8368:	4408      	add	r0, r1
    836a:	9000      	str	r0, [sp, #0]
    836c:	7820      	ldrb	r0, [r4, #0]
    836e:	7861      	ldrb	r1, [r4, #1]
    8370:	4635      	mov	r5, r6
    8372:	4408      	add	r0, r1
    8374:	b2c7      	uxtb	r7, r0
    8376:	e008      	b.n	838a <__udivmoddi4+0x2f2>
    8378:	7a23      	ldrb	r3, [r4, #8]
    837a:	79e2      	ldrb	r2, [r4, #7]
    837c:	79a1      	ldrb	r1, [r4, #6]
    837e:	7960      	ldrb	r0, [r4, #5]
    8380:	f000 fd47 	bl	8e12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    8384:	1c6d      	adds	r5, r5, #1
    8386:	4406      	add	r6, r0
    8388:	b2ed      	uxtb	r5, r5
    838a:	42bd      	cmp	r5, r7
    838c:	d3f4      	bcc.n	8378 <__udivmoddi4+0x2e0>
    838e:	9800      	ldr	r0, [sp, #0]
    8390:	1cc0      	adds	r0, r0, #3
    8392:	f020 0003 	bic.w	r0, r0, #3
    8396:	9000      	str	r0, [sp, #0]
    8398:	f1b8 0f00 	cmp.w	r8, #0
    839c:	d000      	beq.n	83a0 <__udivmoddi4+0x308>
    839e:	2000      	movs	r0, #0
    83a0:	4632      	mov	r2, r6
    83a2:	4639      	mov	r1, r7
    83a4:	f7f8 fb60 	bl	a68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    83a8:	9900      	ldr	r1, [sp, #0]
    83aa:	4642      	mov	r2, r8
    83ac:	4408      	add	r0, r1
    83ae:	9000      	str	r0, [sp, #0]
    83b0:	4621      	mov	r1, r4
    83b2:	4668      	mov	r0, sp
    83b4:	f7f7 feda 	bl	16c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x22>
    83b8:	9900      	ldr	r1, [sp, #0]
    83ba:	eba1 0009 	sub.w	r0, r1, r9
    83be:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

000083c2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    83c2:	b510      	push	{r4, lr}
    83c4:	460c      	mov	r4, r1
    83c6:	7909      	ldrb	r1, [r1, #4]
    83c8:	7001      	strb	r1, [r0, #0]
    83ca:	7841      	ldrb	r1, [r0, #1]
    83cc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    83d0:	7041      	strb	r1, [r0, #1]
    83d2:	88a2      	ldrh	r2, [r4, #4]
    83d4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    83d8:	4311      	orrs	r1, r2
    83da:	7041      	strb	r1, [r0, #1]
    83dc:	79a2      	ldrb	r2, [r4, #6]
    83de:	7082      	strb	r2, [r0, #2]
    83e0:	88e2      	ldrh	r2, [r4, #6]
    83e2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    83e6:	0a12      	lsrs	r2, r2, #8
    83e8:	70c2      	strb	r2, [r0, #3]
    83ea:	7041      	strb	r1, [r0, #1]
    83ec:	7a22      	ldrb	r2, [r4, #8]
    83ee:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    83f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    83f6:	7041      	strb	r1, [r0, #1]
    83f8:	7a62      	ldrb	r2, [r4, #9]
    83fa:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    83fe:	7041      	strb	r1, [r0, #1]
    8400:	6821      	ldr	r1, [r4, #0]
    8402:	1d02      	adds	r2, r0, #4
    8404:	4291      	cmp	r1, r2
    8406:	d006      	beq.n	8416 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    8408:	88e2      	ldrh	r2, [r4, #6]
    840a:	2afb      	cmp	r2, #251	; 0xfb
    840c:	d300      	bcc.n	8410 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    840e:	22fb      	movs	r2, #251	; 0xfb
    8410:	1d00      	adds	r0, r0, #4
    8412:	f001 fe95 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8416:	79a0      	ldrb	r0, [r4, #6]
    8418:	1d00      	adds	r0, r0, #4
    841a:	b2c0      	uxtb	r0, r0
    841c:	bd10      	pop	{r4, pc}

0000841e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    841e:	b430      	push	{r4, r5}
    8420:	790a      	ldrb	r2, [r1, #4]
    8422:	7002      	strb	r2, [r0, #0]
    8424:	7842      	ldrb	r2, [r0, #1]
    8426:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    842a:	7042      	strb	r2, [r0, #1]
    842c:	888b      	ldrh	r3, [r1, #4]
    842e:	f3c3 2303 	ubfx	r3, r3, #8, #4
    8432:	431a      	orrs	r2, r3
    8434:	7042      	strb	r2, [r0, #1]
    8436:	798b      	ldrb	r3, [r1, #6]
    8438:	7083      	strb	r3, [r0, #2]
    843a:	78c3      	ldrb	r3, [r0, #3]
    843c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    8440:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8444:	70c3      	strb	r3, [r0, #3]
    8446:	88cc      	ldrh	r4, [r1, #6]
    8448:	f3c4 2405 	ubfx	r4, r4, #8, #6
    844c:	4323      	orrs	r3, r4
    844e:	70c3      	strb	r3, [r0, #3]
    8450:	7042      	strb	r2, [r0, #1]
    8452:	7a0c      	ldrb	r4, [r1, #8]
    8454:	f004 0403 	and.w	r4, r4, #3
    8458:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    845c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    8460:	7042      	strb	r2, [r0, #1]
    8462:	7a4c      	ldrb	r4, [r1, #9]
    8464:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    8468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    846c:	7042      	strb	r2, [r0, #1]
    846e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8472:	70c2      	strb	r2, [r0, #3]
    8474:	680b      	ldr	r3, [r1, #0]
    8476:	1d02      	adds	r2, r0, #4
    8478:	4293      	cmp	r3, r2
    847a:	d005      	beq.n	8488 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    847c:	88ca      	ldrh	r2, [r1, #6]
    847e:	bc30      	pop	{r4, r5}
    8480:	4619      	mov	r1, r3
    8482:	1d00      	adds	r0, r0, #4
    8484:	f001 be5c 	b.w	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8488:	bc30      	pop	{r4, r5}
    848a:	4770      	bx	lr

0000848c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    848c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8490:	4604      	mov	r4, r0
    8492:	f891 c000 	ldrb.w	ip, [r1]
    8496:	460d      	mov	r5, r1
    8498:	2000      	movs	r0, #0
    849a:	2711      	movs	r7, #17
    849c:	263e      	movs	r6, #62	; 0x3e
    849e:	2312      	movs	r3, #18
    84a0:	22ff      	movs	r2, #255	; 0xff
    84a2:	f04f 0b0c 	mov.w	fp, #12
    84a6:	f04f 0905 	mov.w	r9, #5
    84aa:	f04f 0a03 	mov.w	sl, #3
    84ae:	f104 010d 	add.w	r1, r4, #13
    84b2:	f04f 0e14 	mov.w	lr, #20
    84b6:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    84ba:	d26f      	bcs.n	859c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    84bc:	e8df f00c 	tbb	[pc, ip]
    84c0:	47452d6e 	.word	0x47452d6e
    84c4:	a76eef4c 	.word	0xa76eef4c
    84c8:	edf0c2b1 	.word	0xedf0c2b1
    84cc:	e9eaebec 	.word	0xe9eaebec
    84d0:	6f6e12e8 	.word	0x6f6e12e8
    84d4:	e6e78c6e 	.word	0xe6e78c6e
    84d8:	e2e3e4e5 	.word	0xe2e3e4e5
    84dc:	dedfe0e1 	.word	0xdedfe0e1
    84e0:	00dc6edd 	.word	0x00dc6edd
    84e4:	200e      	movs	r0, #14
    84e6:	7020      	strb	r0, [r4, #0]
    84e8:	7968      	ldrb	r0, [r5, #5]
    84ea:	70e0      	strb	r0, [r4, #3]
    84ec:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84f0:	0a00      	lsrs	r0, r0, #8
    84f2:	7120      	strb	r0, [r4, #4]
    84f4:	7928      	ldrb	r0, [r5, #4]
    84f6:	70a0      	strb	r0, [r4, #2]
    84f8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84fc:	3883      	subs	r0, #131	; 0x83
    84fe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    8502:	d003      	beq.n	850c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x80>
    8504:	2136      	movs	r1, #54	; 0x36
    8506:	20c7      	movs	r0, #199	; 0xc7
    8508:	f7f7 ff44 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    850c:	4652      	mov	r2, sl
    850e:	1de9      	adds	r1, r5, #7
    8510:	1d60      	adds	r0, r4, #5
    8512:	f001 fe15 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8516:	2007      	movs	r0, #7
    8518:	e151      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    851a:	f884 b000 	strb.w	fp, [r4]
    851e:	7928      	ldrb	r0, [r5, #4]
    8520:	70a0      	strb	r0, [r4, #2]
    8522:	7968      	ldrb	r0, [r5, #5]
    8524:	70e0      	strb	r0, [r4, #3]
    8526:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    852a:	0a00      	lsrs	r0, r0, #8
    852c:	7120      	strb	r0, [r4, #4]
    852e:	79e8      	ldrb	r0, [r5, #7]
    8530:	7160      	strb	r0, [r4, #5]
    8532:	7a28      	ldrb	r0, [r5, #8]
    8534:	71a0      	strb	r0, [r4, #6]
    8536:	8928      	ldrh	r0, [r5, #8]
    8538:	0a00      	lsrs	r0, r0, #8
    853a:	71e0      	strb	r0, [r4, #7]
    853c:	7aa8      	ldrb	r0, [r5, #10]
    853e:	7220      	strb	r0, [r4, #8]
    8540:	8968      	ldrh	r0, [r5, #10]
    8542:	0a00      	lsrs	r0, r0, #8
    8544:	7260      	strb	r0, [r4, #9]
    8546:	2008      	movs	r0, #8
    8548:	e139      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    854a:	2010      	movs	r0, #16
    854c:	e000      	b.n	8550 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc4>
    854e:	201a      	movs	r0, #26
    8550:	7020      	strb	r0, [r4, #0]
    8552:	7928      	ldrb	r0, [r5, #4]
    8554:	70a0      	strb	r0, [r4, #2]
    8556:	e138      	b.n	87ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
    8558:	7026      	strb	r6, [r4, #0]
    855a:	2002      	movs	r0, #2
    855c:	70a0      	strb	r0, [r4, #2]
    855e:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    8562:	70e0      	strb	r0, [r4, #3]
    8564:	7aa8      	ldrb	r0, [r5, #10]
    8566:	7120      	strb	r0, [r4, #4]
    8568:	7868      	ldrb	r0, [r5, #1]
    856a:	7160      	strb	r0, [r4, #5]
    856c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    8570:	f8c4 0006 	str.w	r0, [r4, #6]
    8574:	88e8      	ldrh	r0, [r5, #6]
    8576:	8160      	strh	r0, [r4, #10]
    8578:	7a28      	ldrb	r0, [r5, #8]
    857a:	7320      	strb	r0, [r4, #12]
    857c:	7a2e      	ldrb	r6, [r5, #8]
    857e:	2e1f      	cmp	r6, #31
    8580:	d300      	bcc.n	8584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xf8>
    8582:	261f      	movs	r6, #31
    8584:	4608      	mov	r0, r1
    8586:	4632      	mov	r2, r6
    8588:	f105 010b 	add.w	r1, r5, #11
    858c:	f001 fdd8 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8590:	360d      	adds	r6, #13
    8592:	7a69      	ldrb	r1, [r5, #9]
    8594:	55a1      	strb	r1, [r4, r6]
    8596:	1e76      	subs	r6, r6, #1
    8598:	b2f0      	uxtb	r0, r6
    859a:	e10e      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    859c:	e111      	b.n	87c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    859e:	7026      	strb	r6, [r4, #0]
    85a0:	200b      	movs	r0, #11
    85a2:	70a0      	strb	r0, [r4, #2]
    85a4:	7928      	ldrb	r0, [r5, #4]
    85a6:	70e0      	strb	r0, [r4, #3]
    85a8:	7968      	ldrb	r0, [r5, #5]
    85aa:	7120      	strb	r0, [r4, #4]
    85ac:	79a8      	ldrb	r0, [r5, #6]
    85ae:	7160      	strb	r0, [r4, #5]
    85b0:	f8d5 0007 	ldr.w	r0, [r5, #7]
    85b4:	f8c4 0006 	str.w	r0, [r4, #6]
    85b8:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    85bc:	8160      	strh	r0, [r4, #10]
    85be:	7b68      	ldrb	r0, [r5, #13]
    85c0:	7320      	strb	r0, [r4, #12]
    85c2:	f8d5 000e 	ldr.w	r0, [r5, #14]
    85c6:	f8c4 000d 	str.w	r0, [r4, #13]
    85ca:	8a68      	ldrh	r0, [r5, #18]
    85cc:	f8a4 0011 	strh.w	r0, [r4, #17]
    85d0:	7d28      	ldrb	r0, [r5, #20]
    85d2:	74e0      	strb	r0, [r4, #19]
    85d4:	4618      	mov	r0, r3
    85d6:	e0f2      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    85d8:	2029      	movs	r0, #41	; 0x29
    85da:	f7f8 f829 	bl	630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    85de:	b148      	cbz	r0, 85f4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x168>
    85e0:	7026      	strb	r6, [r4, #0]
    85e2:	2029      	movs	r0, #41	; 0x29
    85e4:	70a0      	strb	r0, [r4, #2]
    85e6:	2221      	movs	r2, #33	; 0x21
    85e8:	1d29      	adds	r1, r5, #4
    85ea:	1ce0      	adds	r0, r4, #3
    85ec:	f001 fda8 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    85f0:	2022      	movs	r0, #34	; 0x22
    85f2:	e0e4      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    85f4:	200a      	movs	r0, #10
    85f6:	f7f8 f81b 	bl	630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    85fa:	2800      	cmp	r0, #0
    85fc:	4629      	mov	r1, r5
    85fe:	4620      	mov	r0, r4
    8600:	d002      	beq.n	8608 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x17c>
    8602:	f000 f9a1 	bl	8948 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    8606:	e0d8      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8608:	f000 f975 	bl	88f6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    860c:	e0d5      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    860e:	7026      	strb	r6, [r4, #0]
    8610:	f884 e002 	strb.w	lr, [r4, #2]
    8614:	7928      	ldrb	r0, [r5, #4]
    8616:	70e0      	strb	r0, [r4, #3]
    8618:	88a8      	ldrh	r0, [r5, #4]
    861a:	0a00      	lsrs	r0, r0, #8
    861c:	7120      	strb	r0, [r4, #4]
    861e:	79a8      	ldrb	r0, [r5, #6]
    8620:	e106      	b.n	8830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8622:	223e      	movs	r2, #62	; 0x3e
    8624:	7022      	strb	r2, [r4, #0]
    8626:	2204      	movs	r2, #4
    8628:	70a2      	strb	r2, [r4, #2]
    862a:	6868      	ldr	r0, [r5, #4]
    862c:	f8c4 0003 	str.w	r0, [r4, #3]
    8630:	68a8      	ldr	r0, [r5, #8]
    8632:	f8c4 0007 	str.w	r0, [r4, #7]
    8636:	89a8      	ldrh	r0, [r5, #12]
    8638:	f8a4 000b 	strh.w	r0, [r4, #11]
    863c:	7ba8      	ldrb	r0, [r5, #14]
    863e:	7360      	strb	r0, [r4, #13]
    8640:	200c      	movs	r0, #12
    8642:	e0bc      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8644:	7026      	strb	r6, [r4, #0]
    8646:	f884 a002 	strb.w	sl, [r4, #2]
    864a:	7928      	ldrb	r0, [r5, #4]
    864c:	70e0      	strb	r0, [r4, #3]
    864e:	79a8      	ldrb	r0, [r5, #6]
    8650:	7120      	strb	r0, [r4, #4]
    8652:	88e8      	ldrh	r0, [r5, #6]
    8654:	0a00      	lsrs	r0, r0, #8
    8656:	7160      	strb	r0, [r4, #5]
    8658:	7a28      	ldrb	r0, [r5, #8]
    865a:	71a0      	strb	r0, [r4, #6]
    865c:	8928      	ldrh	r0, [r5, #8]
    865e:	0a00      	lsrs	r0, r0, #8
    8660:	71e0      	strb	r0, [r4, #7]
    8662:	7aa8      	ldrb	r0, [r5, #10]
    8664:	7220      	strb	r0, [r4, #8]
    8666:	8968      	ldrh	r0, [r5, #10]
    8668:	0a00      	lsrs	r0, r0, #8
    866a:	7260      	strb	r0, [r4, #9]
    866c:	7b28      	ldrb	r0, [r5, #12]
    866e:	72a0      	strb	r0, [r4, #10]
    8670:	89a8      	ldrh	r0, [r5, #12]
    8672:	0a00      	lsrs	r0, r0, #8
    8674:	72e0      	strb	r0, [r4, #11]
    8676:	e118      	b.n	88aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    8678:	e126      	b.n	88c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x43c>
    867a:	e0fa      	b.n	8872 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    867c:	e0db      	b.n	8836 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3aa>
    867e:	e106      	b.n	888e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    8680:	e115      	b.n	88ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x422>
    8682:	e0cd      	b.n	8820 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x394>
    8684:	e0b5      	b.n	87f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x366>
    8686:	e0b1      	b.n	87ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
    8688:	e09d      	b.n	87c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    868a:	e0a0      	b.n	87ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    868c:	e043      	b.n	8716 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28a>
    868e:	e03f      	b.n	8710 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    8690:	e054      	b.n	873c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    8692:	e04e      	b.n	8732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a6>
    8694:	e031      	b.n	86fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    8696:	e025      	b.n	86e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x258>
    8698:	e018      	b.n	86cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    869a:	e015      	b.n	86c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    869c:	e000      	b.n	86a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    869e:	e056      	b.n	874e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    86a0:	7026      	strb	r6, [r4, #0]
    86a2:	f884 9002 	strb.w	r9, [r4, #2]
    86a6:	7928      	ldrb	r0, [r5, #4]
    86a8:	70e0      	strb	r0, [r4, #3]
    86aa:	88a8      	ldrh	r0, [r5, #4]
    86ac:	0a00      	lsrs	r0, r0, #8
    86ae:	7120      	strb	r0, [r4, #4]
    86b0:	f8d5 0006 	ldr.w	r0, [r5, #6]
    86b4:	f8c4 0005 	str.w	r0, [r4, #5]
    86b8:	f8d5 000a 	ldr.w	r0, [r5, #10]
    86bc:	f8c4 0009 	str.w	r0, [r4, #9]
    86c0:	89e8      	ldrh	r0, [r5, #14]
    86c2:	f8a4 000d 	strh.w	r0, [r4, #13]
    86c6:	e114      	b.n	88f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x466>
    86c8:	7027      	strb	r7, [r4, #0]
    86ca:	e039      	b.n	8740 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b4>
    86cc:	f884 9000 	strb.w	r9, [r4]
    86d0:	7928      	ldrb	r0, [r5, #4]
    86d2:	70a0      	strb	r0, [r4, #2]
    86d4:	7968      	ldrb	r0, [r5, #5]
    86d6:	70e0      	strb	r0, [r4, #3]
    86d8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    86dc:	0a00      	lsrs	r0, r0, #8
    86de:	7120      	strb	r0, [r4, #4]
    86e0:	79e8      	ldrb	r0, [r5, #7]
    86e2:	e0a5      	b.n	8830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    86e4:	2008      	movs	r0, #8
    86e6:	7020      	strb	r0, [r4, #0]
    86e8:	7928      	ldrb	r0, [r5, #4]
    86ea:	70a0      	strb	r0, [r4, #2]
    86ec:	79a8      	ldrb	r0, [r5, #6]
    86ee:	70e0      	strb	r0, [r4, #3]
    86f0:	88e8      	ldrh	r0, [r5, #6]
    86f2:	0a00      	lsrs	r0, r0, #8
    86f4:	7120      	strb	r0, [r4, #4]
    86f6:	7a28      	ldrb	r0, [r5, #8]
    86f8:	e09a      	b.n	8830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    86fa:	2030      	movs	r0, #48	; 0x30
    86fc:	7020      	strb	r0, [r4, #0]
    86fe:	7928      	ldrb	r0, [r5, #4]
    8700:	70a0      	strb	r0, [r4, #2]
    8702:	79a8      	ldrb	r0, [r5, #6]
    8704:	70e0      	strb	r0, [r4, #3]
    8706:	88e8      	ldrh	r0, [r5, #6]
    8708:	0a00      	lsrs	r0, r0, #8
    870a:	7120      	strb	r0, [r4, #4]
    870c:	2003      	movs	r0, #3
    870e:	e056      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8710:	7026      	strb	r6, [r4, #0]
    8712:	2007      	movs	r0, #7
    8714:	e091      	b.n	883a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    8716:	7026      	strb	r6, [r4, #0]
    8718:	f884 b002 	strb.w	fp, [r4, #2]
    871c:	7928      	ldrb	r0, [r5, #4]
    871e:	70e0      	strb	r0, [r4, #3]
    8720:	79a8      	ldrb	r0, [r5, #6]
    8722:	7120      	strb	r0, [r4, #4]
    8724:	88e8      	ldrh	r0, [r5, #6]
    8726:	0a00      	lsrs	r0, r0, #8
    8728:	7160      	strb	r0, [r4, #5]
    872a:	7a28      	ldrb	r0, [r5, #8]
    872c:	71a0      	strb	r0, [r4, #6]
    872e:	7a68      	ldrb	r0, [r5, #9]
    8730:	e059      	b.n	87e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    8732:	1d29      	adds	r1, r5, #4
    8734:	4620      	mov	r0, r4
    8736:	f7f7 ff3b 	bl	5b0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    873a:	e03e      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    873c:	2057      	movs	r0, #87	; 0x57
    873e:	7020      	strb	r0, [r4, #0]
    8740:	7928      	ldrb	r0, [r5, #4]
    8742:	70a0      	strb	r0, [r4, #2]
    8744:	88a8      	ldrh	r0, [r5, #4]
    8746:	0a00      	lsrs	r0, r0, #8
    8748:	70e0      	strb	r0, [r4, #3]
    874a:	2002      	movs	r0, #2
    874c:	e037      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    874e:	7026      	strb	r6, [r4, #0]
    8750:	220d      	movs	r2, #13
    8752:	70a2      	strb	r2, [r4, #2]
    8754:	792a      	ldrb	r2, [r5, #4]
    8756:	70e2      	strb	r2, [r4, #3]
    8758:	89ea      	ldrh	r2, [r5, #14]
    875a:	80a2      	strh	r2, [r4, #4]
    875c:	796a      	ldrb	r2, [r5, #5]
    875e:	71a2      	strb	r2, [r4, #6]
    8760:	f8d5 2006 	ldr.w	r2, [r5, #6]
    8764:	f8c4 2007 	str.w	r2, [r4, #7]
    8768:	896a      	ldrh	r2, [r5, #10]
    876a:	f8a4 200b 	strh.w	r2, [r4, #11]
    876e:	7c2a      	ldrb	r2, [r5, #16]
    8770:	4620      	mov	r0, r4
    8772:	7362      	strb	r2, [r4, #13]
    8774:	1d29      	adds	r1, r5, #4
    8776:	7c6a      	ldrb	r2, [r5, #17]
    8778:	7382      	strb	r2, [r0, #14]
    877a:	7b8a      	ldrb	r2, [r1, #14]
    877c:	73c2      	strb	r2, [r0, #15]
    877e:	7e8a      	ldrb	r2, [r1, #26]
    8780:	7402      	strb	r2, [r0, #16]
    8782:	7a4a      	ldrb	r2, [r1, #9]
    8784:	7442      	strb	r2, [r0, #17]
    8786:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    878a:	f8ad 2000 	strh.w	r2, [sp]
    878e:	8242      	strh	r2, [r0, #18]
    8790:	7cca      	ldrb	r2, [r1, #19]
    8792:	7502      	strb	r2, [r0, #20]
    8794:	694a      	ldr	r2, [r1, #20]
    8796:	f8c0 2015 	str.w	r2, [r0, #21]
    879a:	8b0a      	ldrh	r2, [r1, #24]
    879c:	f8a0 2019 	strh.w	r2, [r0, #25]
    87a0:	7a0a      	ldrb	r2, [r1, #8]
    87a2:	76c2      	strb	r2, [r0, #27]
    87a4:	7a0d      	ldrb	r5, [r1, #8]
    87a6:	2de5      	cmp	r5, #229	; 0xe5
    87a8:	d300      	bcc.n	87ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    87aa:	25e5      	movs	r5, #229	; 0xe5
    87ac:	462a      	mov	r2, r5
    87ae:	301c      	adds	r0, #28
    87b0:	311c      	adds	r1, #28
    87b2:	f001 fcc5 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    87b6:	351a      	adds	r5, #26
    87b8:	b2e8      	uxtb	r0, r5
    87ba:	2800      	cmp	r0, #0
    87bc:	d001      	beq.n	87c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    87be:	7060      	strb	r0, [r4, #1]
    87c0:	1c80      	adds	r0, r0, #2
    87c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87c6:	7026      	strb	r6, [r4, #0]
    87c8:	70a7      	strb	r7, [r4, #2]
    87ca:	2001      	movs	r0, #1
    87cc:	e7f7      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    87ce:	7026      	strb	r6, [r4, #0]
    87d0:	70a3      	strb	r3, [r4, #2]
    87d2:	7928      	ldrb	r0, [r5, #4]
    87d4:	70e0      	strb	r0, [r4, #3]
    87d6:	7968      	ldrb	r0, [r5, #5]
    87d8:	7120      	strb	r0, [r4, #4]
    87da:	79a8      	ldrb	r0, [r5, #6]
    87dc:	7160      	strb	r0, [r4, #5]
    87de:	88e8      	ldrh	r0, [r5, #6]
    87e0:	0a00      	lsrs	r0, r0, #8
    87e2:	71a0      	strb	r0, [r4, #6]
    87e4:	7a28      	ldrb	r0, [r5, #8]
    87e6:	71e0      	strb	r0, [r4, #7]
    87e8:	2006      	movs	r0, #6
    87ea:	e7e8      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    87ec:	7026      	strb	r6, [r4, #0]
    87ee:	2020      	movs	r0, #32
    87f0:	e041      	b.n	8876 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ea>
    87f2:	7026      	strb	r6, [r4, #0]
    87f4:	2021      	movs	r0, #33	; 0x21
    87f6:	70a0      	strb	r0, [r4, #2]
    87f8:	7928      	ldrb	r0, [r5, #4]
    87fa:	70e0      	strb	r0, [r4, #3]
    87fc:	7968      	ldrb	r0, [r5, #5]
    87fe:	7120      	strb	r0, [r4, #4]
    8800:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8804:	0a00      	lsrs	r0, r0, #8
    8806:	7160      	strb	r0, [r4, #5]
    8808:	79e8      	ldrb	r0, [r5, #7]
    880a:	71a0      	strb	r0, [r4, #6]
    880c:	7a28      	ldrb	r0, [r5, #8]
    880e:	71e0      	strb	r0, [r4, #7]
    8810:	7a68      	ldrb	r0, [r5, #9]
    8812:	7220      	strb	r0, [r4, #8]
    8814:	7aa8      	ldrb	r0, [r5, #10]
    8816:	7260      	strb	r0, [r4, #9]
    8818:	7ae8      	ldrb	r0, [r5, #11]
    881a:	72a0      	strb	r0, [r4, #10]
    881c:	2009      	movs	r0, #9
    881e:	e7ce      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8820:	7022      	strb	r2, [r4, #0]
    8822:	20a1      	movs	r0, #161	; 0xa1
    8824:	70a0      	strb	r0, [r4, #2]
    8826:	7928      	ldrb	r0, [r5, #4]
    8828:	70e0      	strb	r0, [r4, #3]
    882a:	7968      	ldrb	r0, [r5, #5]
    882c:	7120      	strb	r0, [r4, #4]
    882e:	2000      	movs	r0, #0
    8830:	7160      	strb	r0, [r4, #5]
    8832:	2004      	movs	r0, #4
    8834:	e7c3      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8836:	7022      	strb	r2, [r4, #0]
    8838:	20a2      	movs	r0, #162	; 0xa2
    883a:	70a0      	strb	r0, [r4, #2]
    883c:	7928      	ldrb	r0, [r5, #4]
    883e:	70e0      	strb	r0, [r4, #3]
    8840:	88a8      	ldrh	r0, [r5, #4]
    8842:	0a00      	lsrs	r0, r0, #8
    8844:	7120      	strb	r0, [r4, #4]
    8846:	79a8      	ldrb	r0, [r5, #6]
    8848:	7160      	strb	r0, [r4, #5]
    884a:	88e8      	ldrh	r0, [r5, #6]
    884c:	0a00      	lsrs	r0, r0, #8
    884e:	71a0      	strb	r0, [r4, #6]
    8850:	7a28      	ldrb	r0, [r5, #8]
    8852:	71e0      	strb	r0, [r4, #7]
    8854:	8928      	ldrh	r0, [r5, #8]
    8856:	0a00      	lsrs	r0, r0, #8
    8858:	7220      	strb	r0, [r4, #8]
    885a:	7aa8      	ldrb	r0, [r5, #10]
    885c:	7260      	strb	r0, [r4, #9]
    885e:	8968      	ldrh	r0, [r5, #10]
    8860:	0a00      	lsrs	r0, r0, #8
    8862:	72a0      	strb	r0, [r4, #10]
    8864:	7b28      	ldrb	r0, [r5, #12]
    8866:	72e0      	strb	r0, [r4, #11]
    8868:	89a8      	ldrh	r0, [r5, #12]
    886a:	0a00      	lsrs	r0, r0, #8
    886c:	7320      	strb	r0, [r4, #12]
    886e:	200b      	movs	r0, #11
    8870:	e7a5      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8872:	7022      	strb	r2, [r4, #0]
    8874:	20a3      	movs	r0, #163	; 0xa3
    8876:	70a0      	strb	r0, [r4, #2]
    8878:	7928      	ldrb	r0, [r5, #4]
    887a:	70e0      	strb	r0, [r4, #3]
    887c:	88a8      	ldrh	r0, [r5, #4]
    887e:	0a00      	lsrs	r0, r0, #8
    8880:	7120      	strb	r0, [r4, #4]
    8882:	79a8      	ldrb	r0, [r5, #6]
    8884:	7160      	strb	r0, [r4, #5]
    8886:	79e8      	ldrb	r0, [r5, #7]
    8888:	71a0      	strb	r0, [r4, #6]
    888a:	2005      	movs	r0, #5
    888c:	e797      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    888e:	7026      	strb	r6, [r4, #0]
    8890:	2013      	movs	r0, #19
    8892:	70a0      	strb	r0, [r4, #2]
    8894:	7928      	ldrb	r0, [r5, #4]
    8896:	70e0      	strb	r0, [r4, #3]
    8898:	7968      	ldrb	r0, [r5, #5]
    889a:	7120      	strb	r0, [r4, #4]
    889c:	f8d5 0006 	ldr.w	r0, [r5, #6]
    88a0:	f8c4 0005 	str.w	r0, [r4, #5]
    88a4:	8968      	ldrh	r0, [r5, #10]
    88a6:	f8a4 0009 	strh.w	r0, [r4, #9]
    88aa:	200a      	movs	r0, #10
    88ac:	e787      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    88ae:	7022      	strb	r2, [r4, #0]
    88b0:	20a4      	movs	r0, #164	; 0xa4
    88b2:	70a0      	strb	r0, [r4, #2]
    88b4:	7928      	ldrb	r0, [r5, #4]
    88b6:	70e0      	strb	r0, [r4, #3]
    88b8:	88a8      	ldrh	r0, [r5, #4]
    88ba:	0a00      	lsrs	r0, r0, #8
    88bc:	7120      	strb	r0, [r4, #4]
    88be:	79a8      	ldrb	r0, [r5, #6]
    88c0:	7160      	strb	r0, [r4, #5]
    88c2:	79e8      	ldrb	r0, [r5, #7]
    88c4:	71a0      	strb	r0, [r4, #6]
    88c6:	e626      	b.n	8516 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x8a>
    88c8:	7022      	strb	r2, [r4, #0]
    88ca:	2080      	movs	r0, #128	; 0x80
    88cc:	70a0      	strb	r0, [r4, #2]
    88ce:	88a9      	ldrh	r1, [r5, #4]
    88d0:	f8a4 1003 	strh.w	r1, [r4, #3]
    88d4:	88e9      	ldrh	r1, [r5, #6]
    88d6:	f8a4 1005 	strh.w	r1, [r4, #5]
    88da:	7a29      	ldrb	r1, [r5, #8]
    88dc:	71e1      	strb	r1, [r4, #7]
    88de:	8969      	ldrh	r1, [r5, #10]
    88e0:	8121      	strh	r1, [r4, #8]
    88e2:	89a9      	ldrh	r1, [r5, #12]
    88e4:	8161      	strh	r1, [r4, #10]
    88e6:	89e9      	ldrh	r1, [r5, #14]
    88e8:	81a1      	strh	r1, [r4, #12]
    88ea:	7c29      	ldrb	r1, [r5, #16]
    88ec:	f001 0101 	and.w	r1, r1, #1
    88f0:	73a1      	strb	r1, [r4, #14]
    88f2:	200d      	movs	r0, #13
    88f4:	e763      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>

000088f6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    88f6:	223e      	movs	r2, #62	; 0x3e
    88f8:	7002      	strb	r2, [r0, #0]
    88fa:	2201      	movs	r2, #1
    88fc:	7082      	strb	r2, [r0, #2]
    88fe:	790a      	ldrb	r2, [r1, #4]
    8900:	70c2      	strb	r2, [r0, #3]
    8902:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    8906:	7102      	strb	r2, [r0, #4]
    8908:	880a      	ldrh	r2, [r1, #0]
    890a:	0a12      	lsrs	r2, r2, #8
    890c:	7142      	strb	r2, [r0, #5]
    890e:	788a      	ldrb	r2, [r1, #2]
    8910:	7182      	strb	r2, [r0, #6]
    8912:	78ca      	ldrb	r2, [r1, #3]
    8914:	71c2      	strb	r2, [r0, #7]
    8916:	684a      	ldr	r2, [r1, #4]
    8918:	6082      	str	r2, [r0, #8]
    891a:	890a      	ldrh	r2, [r1, #8]
    891c:	8182      	strh	r2, [r0, #12]
    891e:	7d8a      	ldrb	r2, [r1, #22]
    8920:	7382      	strb	r2, [r0, #14]
    8922:	8aca      	ldrh	r2, [r1, #22]
    8924:	0a12      	lsrs	r2, r2, #8
    8926:	73c2      	strb	r2, [r0, #15]
    8928:	7e0a      	ldrb	r2, [r1, #24]
    892a:	7402      	strb	r2, [r0, #16]
    892c:	8b0a      	ldrh	r2, [r1, #24]
    892e:	0a12      	lsrs	r2, r2, #8
    8930:	7442      	strb	r2, [r0, #17]
    8932:	7e8a      	ldrb	r2, [r1, #26]
    8934:	7482      	strb	r2, [r0, #18]
    8936:	8b4a      	ldrh	r2, [r1, #26]
    8938:	0a12      	lsrs	r2, r2, #8
    893a:	74c2      	strb	r2, [r0, #19]
    893c:	7f09      	ldrb	r1, [r1, #28]
    893e:	7501      	strb	r1, [r0, #20]
    8940:	2113      	movs	r1, #19
    8942:	7041      	strb	r1, [r0, #1]
    8944:	4608      	mov	r0, r1
    8946:	4770      	bx	lr
    8948:	223e      	movs	r2, #62	; 0x3e
    894a:	7002      	strb	r2, [r0, #0]
    894c:	220a      	movs	r2, #10
    894e:	7082      	strb	r2, [r0, #2]
    8950:	790a      	ldrb	r2, [r1, #4]
    8952:	70c2      	strb	r2, [r0, #3]
    8954:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    8958:	7102      	strb	r2, [r0, #4]
    895a:	880a      	ldrh	r2, [r1, #0]
    895c:	0a12      	lsrs	r2, r2, #8
    895e:	7142      	strb	r2, [r0, #5]
    8960:	788a      	ldrb	r2, [r1, #2]
    8962:	7182      	strb	r2, [r0, #6]
    8964:	78ca      	ldrb	r2, [r1, #3]
    8966:	71c2      	strb	r2, [r0, #7]
    8968:	684a      	ldr	r2, [r1, #4]
    896a:	6082      	str	r2, [r0, #8]
    896c:	890a      	ldrh	r2, [r1, #8]
    896e:	8182      	strh	r2, [r0, #12]
    8970:	f8d1 200a 	ldr.w	r2, [r1, #10]
    8974:	f8c0 200e 	str.w	r2, [r0, #14]
    8978:	89ca      	ldrh	r2, [r1, #14]
    897a:	8242      	strh	r2, [r0, #18]
    897c:	690a      	ldr	r2, [r1, #16]
    897e:	6142      	str	r2, [r0, #20]
    8980:	8a8a      	ldrh	r2, [r1, #20]
    8982:	8302      	strh	r2, [r0, #24]
    8984:	7d8a      	ldrb	r2, [r1, #22]
    8986:	7682      	strb	r2, [r0, #26]
    8988:	8aca      	ldrh	r2, [r1, #22]
    898a:	0a12      	lsrs	r2, r2, #8
    898c:	76c2      	strb	r2, [r0, #27]
    898e:	7e0a      	ldrb	r2, [r1, #24]
    8990:	7702      	strb	r2, [r0, #28]
    8992:	8b0a      	ldrh	r2, [r1, #24]
    8994:	0a12      	lsrs	r2, r2, #8
    8996:	7742      	strb	r2, [r0, #29]
    8998:	7e8a      	ldrb	r2, [r1, #26]
    899a:	7782      	strb	r2, [r0, #30]
    899c:	8b4a      	ldrh	r2, [r1, #26]
    899e:	0a12      	lsrs	r2, r2, #8
    89a0:	77c2      	strb	r2, [r0, #31]
    89a2:	7f09      	ldrb	r1, [r1, #28]
    89a4:	f880 1020 	strb.w	r1, [r0, #32]
    89a8:	211f      	movs	r1, #31
    89aa:	7041      	strb	r1, [r0, #1]
    89ac:	4608      	mov	r0, r1
    89ae:	4770      	bx	lr
    89b0:	094a      	lsrs	r2, r1, #5
    89b2:	f001 011f 	and.w	r1, r1, #31
    89b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    89ba:	40c8      	lsrs	r0, r1
    89bc:	f000 0001 	and.w	r0, r0, #1
    89c0:	4770      	bx	lr

000089c2 <sdc_hci_get>:
    89c2:	b510      	push	{r4, lr}
    89c4:	460c      	mov	r4, r1
    89c6:	b130      	cbz	r0, 89d6 <sdc_hci_get+0x14>
    89c8:	b12c      	cbz	r4, 89d6 <sdc_hci_get+0x14>
    89ca:	f7f7 fda1 	bl	510 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    89ce:	b128      	cbz	r0, 89dc <sdc_hci_get+0x1a>
    89d0:	7020      	strb	r0, [r4, #0]
    89d2:	2000      	movs	r0, #0
    89d4:	bd10      	pop	{r4, pc}
    89d6:	f06f 0015 	mvn.w	r0, #21
    89da:	bd10      	pop	{r4, pc}
    89dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    89e0:	bd10      	pop	{r4, pc}

000089e2 <sdc_hci_cmd_cb_set_event_mask>:
    89e2:	b510      	push	{r4, lr}
    89e4:	f7f7 fe34 	bl	650 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    89e8:	2000      	movs	r0, #0
    89ea:	bd10      	pop	{r4, pc}

000089ec <sdc_hci_cmd_vs_conn_event_extend>:
    89ec:	b508      	push	{r3, lr}
    89ee:	7800      	ldrb	r0, [r0, #0]
    89f0:	f88d 0000 	strb.w	r0, [sp]
    89f4:	4668      	mov	r0, sp
    89f6:	f000 ffd1 	bl	999c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    89fa:	bd08      	pop	{r3, pc}

000089fc <sdc_hci_cmd_vs_conn_update>:
    89fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    89fe:	2100      	movs	r1, #0
    8a00:	9100      	str	r1, [sp, #0]
    8a02:	9101      	str	r1, [sp, #4]
    8a04:	9102      	str	r1, [sp, #8]
    8a06:	9103      	str	r1, [sp, #12]
    8a08:	f8d0 1002 	ldr.w	r1, [r0, #2]
    8a0c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8a10:	4291      	cmp	r1, r2
    8a12:	d304      	bcc.n	8a1e <sdc_hci_cmd_vs_conn_update+0x22>
    8a14:	f240 42e2 	movw	r2, #1250	; 0x4e2
    8a18:	fbb1 f1f2 	udiv	r1, r1, r2
    8a1c:	e005      	b.n	8a2a <sdc_hci_cmd_vs_conn_update+0x2e>
    8a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a22:	fbb1 f1f2 	udiv	r1, r1, r2
    8a26:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    8a2a:	8802      	ldrh	r2, [r0, #0]
    8a2c:	b289      	uxth	r1, r1
    8a2e:	f8ad 2000 	strh.w	r2, [sp]
    8a32:	f8ad 1002 	strh.w	r1, [sp, #2]
    8a36:	f8ad 1004 	strh.w	r1, [sp, #4]
    8a3a:	88c1      	ldrh	r1, [r0, #6]
    8a3c:	f8ad 1006 	strh.w	r1, [sp, #6]
    8a40:	8900      	ldrh	r0, [r0, #8]
    8a42:	f8ad 0008 	strh.w	r0, [sp, #8]
    8a46:	4668      	mov	r0, sp
    8a48:	f000 fec3 	bl	97d2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    8a4c:	b004      	add	sp, #16
    8a4e:	bd10      	pop	{r4, pc}

00008a50 <sdc_hci_cmd_vs_event_length_set>:
    8a50:	f7fa bbbe 	b.w	31d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00008a54 <sdc_hci_cmd_vs_llpm_mode_set>:
    8a54:	2001      	movs	r0, #1
    8a56:	4770      	bx	lr

00008a58 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    8a58:	7800      	ldrb	r0, [r0, #0]
    8a5a:	b100      	cbz	r0, 8a5e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    8a5c:	2001      	movs	r0, #1
    8a5e:	f000 bf87 	b.w	9970 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008a62 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    8a62:	b510      	push	{r4, lr}
    8a64:	4604      	mov	r4, r0
    8a66:	f7ff f9bd 	bl	7de4 <mpsl_temperature_get>
    8a6a:	17c1      	asrs	r1, r0, #31
    8a6c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8a70:	1080      	asrs	r0, r0, #2
    8a72:	287f      	cmp	r0, #127	; 0x7f
    8a74:	dd01      	ble.n	8a7a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    8a76:	207f      	movs	r0, #127	; 0x7f
    8a78:	e004      	b.n	8a84 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8a7a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    8a7e:	4288      	cmp	r0, r1
    8a80:	da00      	bge.n	8a84 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8a82:	4608      	mov	r0, r1
    8a84:	7020      	strb	r0, [r4, #0]
    8a86:	2000      	movs	r0, #0
    8a88:	bd10      	pop	{r4, pc}

00008a8a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    8a8a:	f000 bf76 	b.w	997a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00008a8e <sdc_hci_cmd_ip_read_bd_addr>:
    8a8e:	f000 bf8d 	b.w	99ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00008a92 <sdc_hci_cmd_ip_read_local_version_information>:
    8a92:	f7fa bbef 	b.w	3274 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008a96 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8a96:	f000 be78 	b.w	978a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00008a9a <sdc_hci_cmd_le_clear_filter_accept_list>:
    8a9a:	f000 be8d 	b.w	97b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008a9e <sdc_hci_cmd_le_encrypt>:
    8a9e:	f000 bedb 	b.w	9858 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008aa2 <sdc_hci_cmd_le_rand>:
    8aa2:	f000 bee2 	b.w	986a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008aa6 <sdc_hci_cmd_le_read_buffer_size>:
    8aa6:	f7fa bb73 	b.w	3190 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008aaa <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8aaa:	f000 bef4 	b.w	9896 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00008aae <sdc_hci_cmd_le_read_transmit_power>:
    8aae:	f000 bee2 	b.w	9876 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008ab2 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8ab2:	f000 bef7 	b.w	98a4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008ab6 <sdc_hci_cmd_le_set_event_mask>:
    8ab6:	b510      	push	{r4, lr}
    8ab8:	f7f7 fdc2 	bl	640 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    8abc:	2000      	movs	r0, #0
    8abe:	bd10      	pop	{r4, pc}

00008ac0 <sdc_hci_cmd_le_set_random_address>:
    8ac0:	f000 bf05 	b.w	98ce <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00008ac4 <sdc_hci_cmd_le_set_scan_enable>:
    8ac4:	f000 bf11 	b.w	98ea <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

00008ac8 <sdc_hci_cmd_le_set_scan_params>:
    8ac8:	f000 bf25 	b.w	9916 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    8acc:	b570      	push	{r4, r5, r6, lr}
    8ace:	880b      	ldrh	r3, [r1, #0]
    8ad0:	7cc4      	ldrb	r4, [r0, #19]
    8ad2:	f100 0518 	add.w	r5, r0, #24
    8ad6:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8ada:	8802      	ldrh	r2, [r0, #0]
    8adc:	4435      	add	r5, r6
    8ade:	1d64      	adds	r4, r4, #5
    8ae0:	882d      	ldrh	r5, [r5, #0]
    8ae2:	4422      	add	r2, r4
    8ae4:	b292      	uxth	r2, r2
    8ae6:	4425      	add	r5, r4
    8ae8:	1e54      	subs	r4, r2, #1
    8aea:	442c      	add	r4, r5
    8aec:	fb94 f4f2 	sdiv	r4, r4, r2
    8af0:	fb02 6204 	mla	r2, r2, r4, r6
    8af4:	8840      	ldrh	r0, [r0, #2]
    8af6:	b292      	uxth	r2, r2
    8af8:	4290      	cmp	r0, r2
    8afa:	d903      	bls.n	8b04 <sdc_hci_cmd_le_set_scan_params+0x3c>
    8afc:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    8b00:	4310      	orrs	r0, r2
    8b02:	e002      	b.n	8b0a <sdc_hci_cmd_le_set_scan_params+0x42>
    8b04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8b08:	4398      	bics	r0, r3
    8b0a:	8008      	strh	r0, [r1, #0]
    8b0c:	bd70      	pop	{r4, r5, r6, pc}
    8b0e:	0442      	lsls	r2, r0, #17
    8b10:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    8b14:	d107      	bne.n	8b26 <sdc_hci_cmd_le_set_scan_params+0x5e>
    8b16:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    8b1a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    8b1e:	4288      	cmp	r0, r1
    8b20:	d001      	beq.n	8b26 <sdc_hci_cmd_le_set_scan_params+0x5e>
    8b22:	2001      	movs	r0, #1
    8b24:	4770      	bx	lr
    8b26:	2000      	movs	r0, #0
    8b28:	4770      	bx	lr

00008b2a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    8b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b2e:	4604      	mov	r4, r0
    8b30:	f100 0318 	add.w	r3, r0, #24
    8b34:	88c0      	ldrh	r0, [r0, #6]
    8b36:	460e      	mov	r6, r1
    8b38:	f3c0 070e 	ubfx	r7, r0, #0, #15
    8b3c:	8a20      	ldrh	r0, [r4, #16]
    8b3e:	19d9      	adds	r1, r3, r7
    8b40:	b108      	cbz	r0, 8b46 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    8b42:	42b0      	cmp	r0, r6
    8b44:	d202      	bcs.n	8b4c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    8b46:	2000      	movs	r0, #0
    8b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b4c:	89a0      	ldrh	r0, [r4, #12]
    8b4e:	2500      	movs	r5, #0
    8b50:	b140      	cbz	r0, 8b64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    8b52:	f8b1 c000 	ldrh.w	ip, [r1]
    8b56:	4560      	cmp	r0, ip
    8b58:	d006      	beq.n	8b68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    8b5a:	f44f 7101 	mov.w	r1, #516	; 0x204
    8b5e:	2014      	movs	r0, #20
    8b60:	f7f7 fc18 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b64:	800d      	strh	r5, [r1, #0]
    8b66:	e00e      	b.n	8b86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    8b68:	f894 c013 	ldrb.w	ip, [r4, #19]
    8b6c:	4418      	add	r0, r3
    8b6e:	f10c 0c05 	add.w	ip, ip, #5
    8b72:	44bc      	add	ip, r7
    8b74:	4460      	add	r0, ip
    8b76:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    8b7a:	f820 cc03 	strh.w	ip, [r0, #-3]
    8b7e:	f894 c016 	ldrb.w	ip, [r4, #22]
    8b82:	f800 cc01 	strb.w	ip, [r0, #-1]
    8b86:	89a0      	ldrh	r0, [r4, #12]
    8b88:	4430      	add	r0, r6
    8b8a:	81a0      	strh	r0, [r4, #12]
    8b8c:	8808      	ldrh	r0, [r1, #0]
    8b8e:	4430      	add	r0, r6
    8b90:	8008      	strh	r0, [r1, #0]
    8b92:	b12a      	cbz	r2, 8ba0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    8b94:	1da1      	adds	r1, r4, #6
    8b96:	4620      	mov	r0, r4
    8b98:	f7ff ff98 	bl	8acc <sdc_hci_cmd_le_set_scan_params+0x4>
    8b9c:	81a5      	strh	r5, [r4, #12]
    8b9e:	e00a      	b.n	8bb6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    8ba0:	7ce0      	ldrb	r0, [r4, #19]
    8ba2:	89a1      	ldrh	r1, [r4, #12]
    8ba4:	1d40      	adds	r0, r0, #5
    8ba6:	4438      	add	r0, r7
    8ba8:	4419      	add	r1, r3
    8baa:	4408      	add	r0, r1
    8bac:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    8bb0:	82a1      	strh	r1, [r4, #20]
    8bb2:	7880      	ldrb	r0, [r0, #2]
    8bb4:	75a0      	strb	r0, [r4, #22]
    8bb6:	8225      	strh	r5, [r4, #16]
    8bb8:	2001      	movs	r0, #1
    8bba:	e7c5      	b.n	8b48 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

00008bbc <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    8bbc:	1c80      	adds	r0, r0, #2
    8bbe:	4770      	bx	lr

00008bc0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    8bc0:	b510      	push	{r4, lr}
    8bc2:	88c2      	ldrh	r2, [r0, #6]
    8bc4:	8903      	ldrh	r3, [r0, #8]
    8bc6:	f3c2 010e 	ubfx	r1, r2, #0, #15
    8bca:	f3c3 040e 	ubfx	r4, r3, #0, #15
    8bce:	1a61      	subs	r1, r4, r1
    8bd0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    8bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    8bd8:	429a      	cmp	r2, r3
    8bda:	d101      	bne.n	8be0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    8bdc:	8842      	ldrh	r2, [r0, #2]
    8bde:	4411      	add	r1, r2
    8be0:	7cc2      	ldrb	r2, [r0, #19]
    8be2:	8800      	ldrh	r0, [r0, #0]
    8be4:	4410      	add	r0, r2
    8be6:	1d40      	adds	r0, r0, #5
    8be8:	b280      	uxth	r0, r0
    8bea:	fb91 f0f0 	sdiv	r0, r1, r0
    8bee:	b280      	uxth	r0, r0
    8bf0:	bd10      	pop	{r4, pc}

00008bf2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    8bf2:	b510      	push	{r4, lr}
    8bf4:	4604      	mov	r4, r0
    8bf6:	88c0      	ldrh	r0, [r0, #6]
    8bf8:	88a1      	ldrh	r1, [r4, #4]
    8bfa:	4281      	cmp	r1, r0
    8bfc:	d003      	beq.n	8c06 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    8bfe:	8960      	ldrh	r0, [r4, #10]
    8c00:	b908      	cbnz	r0, 8c06 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    8c02:	89e0      	ldrh	r0, [r4, #14]
    8c04:	b108      	cbz	r0, 8c0a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    8c06:	2000      	movs	r0, #0
    8c08:	bd10      	pop	{r4, pc}
    8c0a:	1d21      	adds	r1, r4, #4
    8c0c:	4620      	mov	r0, r4
    8c0e:	f7ff ff5d 	bl	8acc <sdc_hci_cmd_le_set_scan_params+0x4>
    8c12:	2000      	movs	r0, #0
    8c14:	81e0      	strh	r0, [r4, #14]
    8c16:	2001      	movs	r0, #1
    8c18:	bd10      	pop	{r4, pc}

00008c1a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    8c1a:	b510      	push	{r4, lr}
    8c1c:	88c4      	ldrh	r4, [r0, #6]
    8c1e:	8883      	ldrh	r3, [r0, #4]
    8c20:	4601      	mov	r1, r0
    8c22:	f100 0218 	add.w	r2, r0, #24
    8c26:	f3c3 000e 	ubfx	r0, r3, #0, #15
    8c2a:	4410      	add	r0, r2
    8c2c:	42a3      	cmp	r3, r4
    8c2e:	d002      	beq.n	8c36 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    8c30:	8949      	ldrh	r1, [r1, #10]
    8c32:	2900      	cmp	r1, #0
    8c34:	d000      	beq.n	8c38 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    8c36:	2000      	movs	r0, #0
    8c38:	bd10      	pop	{r4, pc}

00008c3a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    8c3a:	8803      	ldrh	r3, [r0, #0]
    8c3c:	2b45      	cmp	r3, #69	; 0x45
    8c3e:	d200      	bcs.n	8c42 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    8c40:	2345      	movs	r3, #69	; 0x45
    8c42:	8013      	strh	r3, [r2, #0]
    8c44:	88c2      	ldrh	r2, [r0, #6]
    8c46:	f3c2 030e 	ubfx	r3, r2, #0, #15
    8c4a:	f100 0218 	add.w	r2, r0, #24
    8c4e:	441a      	add	r2, r3
    8c50:	600a      	str	r2, [r1, #0]
    8c52:	8980      	ldrh	r0, [r0, #12]
    8c54:	4770      	bx	lr

00008c56 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    8c56:	7cc0      	ldrb	r0, [r0, #19]
    8c58:	1d40      	adds	r0, r0, #5
    8c5a:	4408      	add	r0, r1
    8c5c:	1ec0      	subs	r0, r0, #3
    8c5e:	6010      	str	r0, [r2, #0]
    8c60:	8808      	ldrh	r0, [r1, #0]
    8c62:	4770      	bx	lr

00008c64 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    8c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c68:	461d      	mov	r5, r3
    8c6a:	4616      	mov	r6, r2
    8c6c:	9f06      	ldr	r7, [sp, #24]
    8c6e:	460b      	mov	r3, r1
    8c70:	4604      	mov	r4, r0
    8c72:	463a      	mov	r2, r7
    8c74:	4629      	mov	r1, r5
    8c76:	4630      	mov	r0, r6
    8c78:	f000 f839 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8c7c:	4283      	cmp	r3, r0
    8c7e:	d201      	bcs.n	8c84 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    8c80:	219e      	movs	r1, #158	; 0x9e
    8c82:	e012      	b.n	8caa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8c84:	07a0      	lsls	r0, r4, #30
    8c86:	d001      	beq.n	8c8c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    8c88:	219f      	movs	r1, #159	; 0x9f
    8c8a:	e00e      	b.n	8caa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8c8c:	2218      	movs	r2, #24
    8c8e:	2100      	movs	r1, #0
    8c90:	4620      	mov	r0, r4
    8c92:	f001 facf 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c96:	19a8      	adds	r0, r5, r6
    8c98:	1d40      	adds	r0, r0, #5
    8c9a:	4378      	muls	r0, r7
    8c9c:	b280      	uxth	r0, r0
    8c9e:	74e5      	strb	r5, [r4, #19]
    8ca0:	8060      	strh	r0, [r4, #2]
    8ca2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8ca6:	d903      	bls.n	8cb0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    8ca8:	21a4      	movs	r1, #164	; 0xa4
    8caa:	2014      	movs	r0, #20
    8cac:	f7f7 fb72 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cb0:	8026      	strh	r6, [r4, #0]
    8cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008cb6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    8cb6:	b570      	push	{r4, r5, r6, lr}
    8cb8:	460b      	mov	r3, r1
    8cba:	4604      	mov	r4, r0
    8cbc:	f100 0118 	add.w	r1, r0, #24
    8cc0:	8902      	ldrh	r2, [r0, #8]
    8cc2:	8880      	ldrh	r0, [r0, #4]
    8cc4:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8cc8:	440d      	add	r5, r1
    8cca:	4282      	cmp	r2, r0
    8ccc:	d101      	bne.n	8cd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    8cce:	2000      	movs	r0, #0
    8cd0:	bd70      	pop	{r4, r5, r6, pc}
    8cd2:	b123      	cbz	r3, 8cde <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8cd4:	7ce2      	ldrb	r2, [r4, #19]
    8cd6:	1ca9      	adds	r1, r5, #2
    8cd8:	4618      	mov	r0, r3
    8cda:	f001 fa31 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8cde:	882d      	ldrh	r5, [r5, #0]
    8ce0:	f104 0108 	add.w	r1, r4, #8
    8ce4:	4620      	mov	r0, r4
    8ce6:	f7ff fef1 	bl	8acc <sdc_hci_cmd_le_set_scan_params+0x4>
    8cea:	4628      	mov	r0, r5
    8cec:	bd70      	pop	{r4, r5, r6, pc}

00008cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8cee:	4401      	add	r1, r0
    8cf0:	1d49      	adds	r1, r1, #5
    8cf2:	4351      	muls	r1, r2
    8cf4:	b28a      	uxth	r2, r1
    8cf6:	2100      	movs	r1, #0
    8cf8:	2845      	cmp	r0, #69	; 0x45
    8cfa:	d202      	bcs.n	8d02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8cfc:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8d00:	b281      	uxth	r1, r0
    8d02:	3218      	adds	r2, #24
    8d04:	1850      	adds	r0, r2, r1
    8d06:	b280      	uxth	r0, r0
    8d08:	4770      	bx	lr

00008d0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    8d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d0e:	4688      	mov	r8, r1
    8d10:	88c1      	ldrh	r1, [r0, #6]
    8d12:	4604      	mov	r4, r0
    8d14:	8900      	ldrh	r0, [r0, #8]
    8d16:	f3c1 060e 	ubfx	r6, r1, #0, #15
    8d1a:	f104 0518 	add.w	r5, r4, #24
    8d1e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    8d22:	eb05 0906 	add.w	r9, r5, r6
    8d26:	f7ff fef2 	bl	8b0e <sdc_hci_cmd_le_set_scan_params+0x46>
    8d2a:	2200      	movs	r2, #0
    8d2c:	b998      	cbnz	r0, 8d56 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    8d2e:	8820      	ldrh	r0, [r4, #0]
    8d30:	2845      	cmp	r0, #69	; 0x45
    8d32:	d200      	bcs.n	8d36 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    8d34:	2045      	movs	r0, #69	; 0x45
    8d36:	42b7      	cmp	r7, r6
    8d38:	d906      	bls.n	8d48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    8d3a:	7ce3      	ldrb	r3, [r4, #19]
    8d3c:	1bb9      	subs	r1, r7, r6
    8d3e:	1ac9      	subs	r1, r1, r3
    8d40:	1f49      	subs	r1, r1, #5
    8d42:	4281      	cmp	r1, r0
    8d44:	da00      	bge.n	8d48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    8d46:	4608      	mov	r0, r1
    8d48:	89a1      	ldrh	r1, [r4, #12]
    8d4a:	b111      	cbz	r1, 8d52 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    8d4c:	f8b9 3000 	ldrh.w	r3, [r9]
    8d50:	1ac0      	subs	r0, r0, r3
    8d52:	4540      	cmp	r0, r8
    8d54:	da03      	bge.n	8d5e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    8d56:	8222      	strh	r2, [r4, #16]
    8d58:	2000      	movs	r0, #0
    8d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d5e:	7ce0      	ldrb	r0, [r4, #19]
    8d60:	4429      	add	r1, r5
    8d62:	1d40      	adds	r0, r0, #5
    8d64:	4430      	add	r0, r6
    8d66:	4408      	add	r0, r1
    8d68:	f8a4 8010 	strh.w	r8, [r4, #16]
    8d6c:	1ec0      	subs	r0, r0, #3
    8d6e:	e7f4      	b.n	8d5a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00008d70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    8d70:	b510      	push	{r4, lr}
    8d72:	000c      	movs	r4, r1
    8d74:	d004      	beq.n	8d80 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    8d76:	2c08      	cmp	r4, #8
    8d78:	d207      	bcs.n	8d8a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    8d7a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    8d7e:	e00a      	b.n	8d96 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    8d80:	b108      	cbz	r0, 8d86 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    8d82:	2100      	movs	r1, #0
    8d84:	6001      	str	r1, [r0, #0]
    8d86:	2000      	movs	r0, #0
    8d88:	bd10      	pop	{r4, pc}
    8d8a:	b158      	cbz	r0, 8da4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    8d8c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    8d90:	d304      	bcc.n	8d9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    8d92:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    8d96:	2015      	movs	r0, #21
    8d98:	f7f7 fafc 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d9c:	b2a1      	uxth	r1, r4
    8d9e:	6800      	ldr	r0, [r0, #0]
    8da0:	f000 f814 	bl	8dcc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    8da4:	1d20      	adds	r0, r4, #4
    8da6:	bd10      	pop	{r4, pc}

00008da8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    8da8:	2100      	movs	r1, #0
    8daa:	6802      	ldr	r2, [r0, #0]
    8dac:	e003      	b.n	8db6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    8dae:	8893      	ldrh	r3, [r2, #4]
    8db0:	6812      	ldr	r2, [r2, #0]
    8db2:	4419      	add	r1, r3
    8db4:	b289      	uxth	r1, r1
    8db6:	2a00      	cmp	r2, #0
    8db8:	d1f9      	bne.n	8dae <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    8dba:	f000 b807 	b.w	8dcc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00008dbe <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    8dbe:	2300      	movs	r3, #0
    8dc0:	600b      	str	r3, [r1, #0]
    8dc2:	808a      	strh	r2, [r1, #4]
    8dc4:	6802      	ldr	r2, [r0, #0]
    8dc6:	600a      	str	r2, [r1, #0]
    8dc8:	6001      	str	r1, [r0, #0]
    8dca:	4770      	bx	lr
    8dcc:	2300      	movs	r3, #0
    8dce:	6043      	str	r3, [r0, #4]
    8dd0:	1d02      	adds	r2, r0, #4
    8dd2:	8101      	strh	r1, [r0, #8]
    8dd4:	6002      	str	r2, [r0, #0]
    8dd6:	4770      	bx	lr
    8dd8:	b170      	cbz	r0, 8df8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3a>
    8dda:	7882      	ldrb	r2, [r0, #2]
    8ddc:	fbb1 f3f2 	udiv	r3, r1, r2
    8de0:	fb02 1213 	mls	r2, r2, r3, r1
    8de4:	b2d2      	uxtb	r2, r2
    8de6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8dea:	895b      	ldrh	r3, [r3, #10]
    8dec:	428b      	cmp	r3, r1
    8dee:	d101      	bne.n	8df4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x36>
    8df0:	4610      	mov	r0, r2
    8df2:	4770      	bx	lr
    8df4:	78c3      	ldrb	r3, [r0, #3]
    8df6:	b10b      	cbz	r3, 8dfc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3e>
    8df8:	20ff      	movs	r0, #255	; 0xff
    8dfa:	4770      	bx	lr
    8dfc:	f7f7 bd60 	b.w	8c0 <__z_interrupt_stack_SIZEOF+0x80>
    8e00:	8802      	ldrh	r2, [r0, #0]
    8e02:	fb01 0102 	mla	r1, r1, r2, r0
    8e06:	7880      	ldrb	r0, [r0, #2]
    8e08:	220a      	movs	r2, #10
    8e0a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8e0e:	4408      	add	r0, r1
    8e10:	4770      	bx	lr

00008e12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    8e12:	b570      	push	{r4, r5, r6, lr}
    8e14:	460e      	mov	r6, r1
    8e16:	461d      	mov	r5, r3
    8e18:	4611      	mov	r1, r2
    8e1a:	f000 f813 	bl	8e44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    8e1e:	4604      	mov	r4, r0
    8e20:	4629      	mov	r1, r5
    8e22:	4630      	mov	r0, r6
    8e24:	f000 f804 	bl	8e30 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    8e28:	4420      	add	r0, r4
    8e2a:	1d00      	adds	r0, r0, #4
    8e2c:	b280      	uxth	r0, r0
    8e2e:	bd70      	pop	{r4, r5, r6, pc}
    8e30:	b510      	push	{r4, lr}
    8e32:	460a      	mov	r2, r1
    8e34:	2109      	movs	r1, #9
    8e36:	f7ff ff5a 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e3a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8e3e:	1cc0      	adds	r0, r0, #3
    8e40:	4008      	ands	r0, r1
    8e42:	bd10      	pop	{r4, pc}
    8e44:	b510      	push	{r4, lr}
    8e46:	460a      	mov	r2, r1
    8e48:	210a      	movs	r1, #10
    8e4a:	f7ff ff50 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e4e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8e52:	1cc0      	adds	r0, r0, #3
    8e54:	4008      	ands	r0, r1
    8e56:	bd10      	pop	{r4, pc}
    8e58:	2800      	cmp	r0, #0
    8e5a:	db09      	blt.n	8e70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    8e5c:	f000 021f 	and.w	r2, r0, #31
    8e60:	2101      	movs	r1, #1
    8e62:	4091      	lsls	r1, r2
    8e64:	0940      	lsrs	r0, r0, #5
    8e66:	0080      	lsls	r0, r0, #2
    8e68:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e6c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8e70:	4770      	bx	lr
    8e72:	2800      	cmp	r0, #0
    8e74:	db0d      	blt.n	8e92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    8e76:	f000 021f 	and.w	r2, r0, #31
    8e7a:	2101      	movs	r1, #1
    8e7c:	4091      	lsls	r1, r2
    8e7e:	0940      	lsrs	r0, r0, #5
    8e80:	0080      	lsls	r0, r0, #2
    8e82:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e86:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8e8a:	f3bf 8f4f 	dsb	sy
    8e8e:	f3bf 8f6f 	isb	sy
    8e92:	4770      	bx	lr
    8e94:	b510      	push	{r4, lr}
    8e96:	200e      	movs	r0, #14
    8e98:	f7ff ffeb 	bl	8e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    8e9c:	200e      	movs	r0, #14
    8e9e:	f7ff ffdb 	bl	8e58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8ea2:	200f      	movs	r0, #15
    8ea4:	f7ff ffe5 	bl	8e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    8ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8eac:	200f      	movs	r0, #15
    8eae:	f7ff bfd3 	b.w	8e58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8eb2:	2800      	cmp	r0, #0
    8eb4:	db09      	blt.n	8eca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    8eb6:	f000 021f 	and.w	r2, r0, #31
    8eba:	2101      	movs	r1, #1
    8ebc:	4091      	lsls	r1, r2
    8ebe:	0940      	lsrs	r0, r0, #5
    8ec0:	0080      	lsls	r0, r0, #2
    8ec2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8ec6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8eca:	4770      	bx	lr
    8ecc:	5840      	ldr	r0, [r0, r1]
    8ece:	2800      	cmp	r0, #0
    8ed0:	d000      	beq.n	8ed4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    8ed2:	2001      	movs	r0, #1
    8ed4:	4770      	bx	lr

00008ed6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    8ed6:	b510      	push	{r4, lr}
    8ed8:	4604      	mov	r4, r0
    8eda:	4620      	mov	r0, r4
    8edc:	f7f7 fe88 	bl	bf0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    8ee0:	2811      	cmp	r0, #17
    8ee2:	d0fa      	beq.n	8eda <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    8ee4:	bd10      	pop	{r4, pc}

00008ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    8ee6:	b510      	push	{r4, lr}
    8ee8:	f7ff fff5 	bl	8ed6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    8eec:	2800      	cmp	r0, #0
    8eee:	d003      	beq.n	8ef8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    8ef0:	21a9      	movs	r1, #169	; 0xa9
    8ef2:	201d      	movs	r0, #29
    8ef4:	f7f7 fa4e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ef8:	bd10      	pop	{r4, pc}

00008efa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    8efa:	f7f7 bf57 	b.w	dac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

00008efe <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    8efe:	b510      	push	{r4, lr}
    8f00:	4050      	eors	r0, r2
    8f02:	780a      	ldrb	r2, [r1, #0]
    8f04:	781c      	ldrb	r4, [r3, #0]
    8f06:	4062      	eors	r2, r4
    8f08:	4410      	add	r0, r2
    8f0a:	784a      	ldrb	r2, [r1, #1]
    8f0c:	785c      	ldrb	r4, [r3, #1]
    8f0e:	4062      	eors	r2, r4
    8f10:	4410      	add	r0, r2
    8f12:	788a      	ldrb	r2, [r1, #2]
    8f14:	789c      	ldrb	r4, [r3, #2]
    8f16:	4062      	eors	r2, r4
    8f18:	4410      	add	r0, r2
    8f1a:	78ca      	ldrb	r2, [r1, #3]
    8f1c:	78dc      	ldrb	r4, [r3, #3]
    8f1e:	4062      	eors	r2, r4
    8f20:	4410      	add	r0, r2
    8f22:	790a      	ldrb	r2, [r1, #4]
    8f24:	791c      	ldrb	r4, [r3, #4]
    8f26:	7949      	ldrb	r1, [r1, #5]
    8f28:	4062      	eors	r2, r4
    8f2a:	4410      	add	r0, r2
    8f2c:	795a      	ldrb	r2, [r3, #5]
    8f2e:	4051      	eors	r1, r2
    8f30:	42c1      	cmn	r1, r0
    8f32:	d101      	bne.n	8f38 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    8f34:	2001      	movs	r0, #1
    8f36:	bd10      	pop	{r4, pc}
    8f38:	2000      	movs	r0, #0
    8f3a:	bd10      	pop	{r4, pc}

00008f3c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    8f3c:	b510      	push	{r4, lr}
    8f3e:	2900      	cmp	r1, #0
    8f40:	4604      	mov	r4, r0
    8f42:	f04f 0106 	mov.w	r1, #6
    8f46:	d002      	beq.n	8f4e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    8f48:	f7f7 fa88 	bl	45c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f4c:	e001      	b.n	8f52 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    8f4e:	f7f7 fa93 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f52:	7960      	ldrb	r0, [r4, #5]
    8f54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f58:	7160      	strb	r0, [r4, #5]
    8f5a:	bd10      	pop	{r4, pc}

00008f5c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    8f5c:	4770      	bx	lr

00008f5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    8f5e:	b530      	push	{r4, r5, lr}
    8f60:	460c      	mov	r4, r1
    8f62:	4605      	mov	r5, r0
    8f64:	b08d      	sub	sp, #52	; 0x34
    8f66:	f04f 0103 	mov.w	r1, #3
    8f6a:	f104 0003 	add.w	r0, r4, #3
    8f6e:	b112      	cbz	r2, 8f76 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8f70:	f7f7 fa74 	bl	45c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f74:	e001      	b.n	8f7a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    8f76:	f7f7 fa7f 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f7a:	7960      	ldrb	r0, [r4, #5]
    8f7c:	220d      	movs	r2, #13
    8f7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f82:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8f86:	7160      	strb	r0, [r4, #5]
    8f88:	2100      	movs	r1, #0
    8f8a:	a804      	add	r0, sp, #16
    8f8c:	f001 f952 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8f90:	78e0      	ldrb	r0, [r4, #3]
    8f92:	f88d 001f 	strb.w	r0, [sp, #31]
    8f96:	7920      	ldrb	r0, [r4, #4]
    8f98:	f88d 001e 	strb.w	r0, [sp, #30]
    8f9c:	7960      	ldrb	r0, [r4, #5]
    8f9e:	f88d 001d 	strb.w	r0, [sp, #29]
    8fa2:	2210      	movs	r2, #16
    8fa4:	4629      	mov	r1, r5
    8fa6:	4668      	mov	r0, sp
    8fa8:	f001 f8ca 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8fac:	4668      	mov	r0, sp
    8fae:	f7ff ff9a 	bl	8ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8fb2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    8fb6:	7020      	strb	r0, [r4, #0]
    8fb8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    8fbc:	7060      	strb	r0, [r4, #1]
    8fbe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8fc2:	70a0      	strb	r0, [r4, #2]
    8fc4:	b00d      	add	sp, #52	; 0x34
    8fc6:	bd30      	pop	{r4, r5, pc}

00008fc8 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    8fc8:	b530      	push	{r4, r5, lr}
    8fca:	b08d      	sub	sp, #52	; 0x34
    8fcc:	460c      	mov	r4, r1
    8fce:	4605      	mov	r5, r0
    8fd0:	220d      	movs	r2, #13
    8fd2:	2100      	movs	r1, #0
    8fd4:	a804      	add	r0, sp, #16
    8fd6:	f001 f92d 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fda:	78e0      	ldrb	r0, [r4, #3]
    8fdc:	f88d 001f 	strb.w	r0, [sp, #31]
    8fe0:	7920      	ldrb	r0, [r4, #4]
    8fe2:	f88d 001e 	strb.w	r0, [sp, #30]
    8fe6:	7960      	ldrb	r0, [r4, #5]
    8fe8:	f88d 001d 	strb.w	r0, [sp, #29]
    8fec:	2210      	movs	r2, #16
    8fee:	4629      	mov	r1, r5
    8ff0:	4668      	mov	r0, sp
    8ff2:	f001 f8a5 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8ff6:	4668      	mov	r0, sp
    8ff8:	f7ff ff75 	bl	8ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8ffc:	7820      	ldrb	r0, [r4, #0]
    8ffe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9002:	4288      	cmp	r0, r1
    9004:	d10c      	bne.n	9020 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    9006:	7860      	ldrb	r0, [r4, #1]
    9008:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    900c:	4288      	cmp	r0, r1
    900e:	d107      	bne.n	9020 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    9010:	78a0      	ldrb	r0, [r4, #2]
    9012:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    9016:	4288      	cmp	r0, r1
    9018:	d102      	bne.n	9020 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    901a:	2001      	movs	r0, #1
    901c:	b00d      	add	sp, #52	; 0x34
    901e:	bd30      	pop	{r4, r5, pc}
    9020:	2000      	movs	r0, #0
    9022:	e7fb      	b.n	901c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

00009024 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    9024:	2101      	movs	r1, #1
    9026:	f7f7 bfe7 	b.w	ff8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000902a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    902a:	b510      	push	{r4, lr}
    902c:	f000 fe69 	bl	9d02 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    9030:	b118      	cbz	r0, 903a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    9032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9036:	f7fa ba71 	b.w	351c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    903a:	20ff      	movs	r0, #255	; 0xff
    903c:	bd10      	pop	{r4, pc}

0000903e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    903e:	b570      	push	{r4, r5, r6, lr}
    9040:	460e      	mov	r6, r1
    9042:	b08c      	sub	sp, #48	; 0x30
    9044:	4614      	mov	r4, r2
    9046:	4601      	mov	r1, r0
    9048:	461d      	mov	r5, r3
    904a:	2210      	movs	r2, #16
    904c:	4668      	mov	r0, sp
    904e:	f000 f85a 	bl	9106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9052:	2210      	movs	r2, #16
    9054:	4631      	mov	r1, r6
    9056:	a804      	add	r0, sp, #16
    9058:	f000 f855 	bl	9106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    905c:	4668      	mov	r0, sp
    905e:	f7ff ff42 	bl	8ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    9062:	a908      	add	r1, sp, #32
    9064:	f04f 0210 	mov.w	r2, #16
    9068:	4628      	mov	r0, r5
    906a:	b11c      	cbz	r4, 9074 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    906c:	f000 f84b 	bl	9106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9070:	b00c      	add	sp, #48	; 0x30
    9072:	bd70      	pop	{r4, r5, r6, pc}
    9074:	f001 f864 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9078:	e7fa      	b.n	9070 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000907a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    907a:	b510      	push	{r4, lr}
    907c:	460c      	mov	r4, r1
    907e:	2100      	movs	r1, #0
    9080:	f7f7 fc32 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9084:	6060      	str	r0, [r4, #4]
    9086:	b110      	cbz	r0, 908e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    9088:	2000      	movs	r0, #0
    908a:	7020      	strb	r0, [r4, #0]
    908c:	bd10      	pop	{r4, pc}
    908e:	2002      	movs	r0, #2
    9090:	bd10      	pop	{r4, pc}

00009092 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    9092:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9096:	4348      	muls	r0, r1
    9098:	4770      	bx	lr

0000909a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    909a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    909e:	fbb0 f0f1 	udiv	r0, r0, r1
    90a2:	b280      	uxth	r0, r0
    90a4:	4770      	bx	lr

000090a6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    90a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90aa:	4607      	mov	r7, r0
    90ac:	460e      	mov	r6, r1
    90ae:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    90b2:	f7fc fee9 	bl	5e88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    90b6:	b198      	cbz	r0, 90e0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    90b8:	b31e      	cbz	r6, 9102 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    90ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    90be:	1b40      	subs	r0, r0, r5
    90c0:	2300      	movs	r3, #0
    90c2:	eb61 0104 	sbc.w	r1, r1, r4
    90c6:	461a      	mov	r2, r3
    90c8:	1a1b      	subs	r3, r3, r0
    90ca:	418a      	sbcs	r2, r1
    90cc:	da19      	bge.n	9102 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    90ce:	1c42      	adds	r2, r0, #1
    90d0:	f171 0100 	sbcs.w	r1, r1, #0
    90d4:	db07      	blt.n	90e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    90d6:	f240 211a 	movw	r1, #538	; 0x21a
    90da:	2029      	movs	r0, #41	; 0x29
    90dc:	f7f7 f95a 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90e0:	f44f 7104 	mov.w	r1, #528	; 0x210
    90e4:	e7f9      	b.n	90da <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    90e6:	4430      	add	r0, r6
    90e8:	1e40      	subs	r0, r0, #1
    90ea:	fbb0 f1f6 	udiv	r1, r0, r6
    90ee:	fb01 f006 	mul.w	r0, r1, r6
    90f2:	1828      	adds	r0, r5, r0
    90f4:	f144 0400 	adc.w	r4, r4, #0
    90f8:	e9c7 0404 	strd	r0, r4, [r7, #16]
    90fc:	4608      	mov	r0, r1
    90fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9102:	2000      	movs	r0, #0
    9104:	e7fb      	b.n	90fe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

00009106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    9106:	b530      	push	{r4, r5, lr}
    9108:	4613      	mov	r3, r2
    910a:	e006      	b.n	911a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    910c:	18cc      	adds	r4, r1, r3
    910e:	1ad5      	subs	r5, r2, r3
    9110:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    9114:	1e5b      	subs	r3, r3, #1
    9116:	5544      	strb	r4, [r0, r5]
    9118:	b2db      	uxtb	r3, r3
    911a:	2b00      	cmp	r3, #0
    911c:	d1f6      	bne.n	910c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    911e:	bd30      	pop	{r4, r5, pc}

00009120 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    9120:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9124:	fbb0 f0f1 	udiv	r0, r0, r1
    9128:	b280      	uxth	r0, r0
    912a:	4770      	bx	lr

0000912c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    912c:	f240 2171 	movw	r1, #625	; 0x271
    9130:	fb10 f001 	smulbb	r0, r0, r1
    9134:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9138:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    913c:	4770      	bx	lr

0000913e <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    913e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9142:	fbb0 f0f1 	udiv	r0, r0, r1
    9146:	b2c0      	uxtb	r0, r0
    9148:	4770      	bx	lr

0000914a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    914a:	2100      	movs	r1, #0
    914c:	4608      	mov	r0, r1
    914e:	f7f7 bfd5 	b.w	10fc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    9152:	4401      	add	r1, r0
    9154:	2914      	cmp	r1, #20
    9156:	dd01      	ble.n	915c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    9158:	2014      	movs	r0, #20
    915a:	4770      	bx	lr
    915c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    9160:	4281      	cmp	r1, r0
    9162:	dbfa      	blt.n	915a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    9164:	b248      	sxtb	r0, r1
    9166:	4770      	bx	lr

00009168 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    9168:	7841      	ldrb	r1, [r0, #1]
    916a:	7800      	ldrb	r0, [r0, #0]
    916c:	f010 000f 	ands.w	r0, r0, #15
    9170:	d005      	beq.n	917e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    9172:	2801      	cmp	r0, #1
    9174:	d007      	beq.n	9186 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    9176:	2802      	cmp	r0, #2
    9178:	d001      	beq.n	917e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    917a:	2806      	cmp	r0, #6
    917c:	d105      	bne.n	918a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    917e:	1f89      	subs	r1, r1, #6
    9180:	291f      	cmp	r1, #31
    9182:	d904      	bls.n	918e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    9184:	e001      	b.n	918a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    9186:	290c      	cmp	r1, #12
    9188:	d001      	beq.n	918e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    918a:	2000      	movs	r0, #0
    918c:	4770      	bx	lr
    918e:	2001      	movs	r0, #1
    9190:	4770      	bx	lr

00009192 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    9192:	7800      	ldrb	r0, [r0, #0]
    9194:	09c0      	lsrs	r0, r0, #7
    9196:	4770      	bx	lr

00009198 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    9198:	7800      	ldrb	r0, [r0, #0]
    919a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    919e:	4770      	bx	lr

000091a0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    91a0:	7801      	ldrb	r1, [r0, #0]
    91a2:	f001 010f 	and.w	r1, r1, #15
    91a6:	2904      	cmp	r1, #4
    91a8:	d105      	bne.n	91b6 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    91aa:	7840      	ldrb	r0, [r0, #1]
    91ac:	1f80      	subs	r0, r0, #6
    91ae:	281f      	cmp	r0, #31
    91b0:	d801      	bhi.n	91b6 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    91b2:	2001      	movs	r0, #1
    91b4:	4770      	bx	lr
    91b6:	2000      	movs	r0, #0
    91b8:	4770      	bx	lr

000091ba <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    91ba:	b510      	push	{r4, lr}
    91bc:	7802      	ldrb	r2, [r0, #0]
    91be:	f001 030f 	and.w	r3, r1, #15
    91c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    91c6:	431a      	orrs	r2, r3
    91c8:	7002      	strb	r2, [r0, #0]
    91ca:	2907      	cmp	r1, #7
    91cc:	d20c      	bcs.n	91e8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    91ce:	e8df f001 	tbb	[pc, r1]
    91d2:	0604      	.short	0x0604
    91d4:	08040604 	.word	0x08040604
    91d8:	0004      	.short	0x0004
    91da:	2106      	movs	r1, #6
    91dc:	e002      	b.n	91e4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    91de:	210c      	movs	r1, #12
    91e0:	e000      	b.n	91e4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    91e2:	2122      	movs	r1, #34	; 0x22
    91e4:	7041      	strb	r1, [r0, #1]
    91e6:	bd10      	pop	{r4, pc}
    91e8:	21a8      	movs	r1, #168	; 0xa8
    91ea:	202a      	movs	r0, #42	; 0x2a
    91ec:	f7f7 f8d2 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000091f0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    91f0:	680a      	ldr	r2, [r1, #0]
    91f2:	f840 2f09 	str.w	r2, [r0, #9]!
    91f6:	8889      	ldrh	r1, [r1, #4]
    91f8:	8081      	strh	r1, [r0, #4]
    91fa:	4770      	bx	lr

000091fc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    91fc:	7802      	ldrb	r2, [r0, #0]
    91fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9202:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    9206:	7002      	strb	r2, [r0, #0]
    9208:	4770      	bx	lr

0000920a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    920a:	680a      	ldr	r2, [r1, #0]
    920c:	f840 2f03 	str.w	r2, [r0, #3]!
    9210:	8889      	ldrh	r1, [r1, #4]
    9212:	8081      	strh	r1, [r0, #4]
    9214:	4770      	bx	lr

00009216 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    9216:	7802      	ldrb	r2, [r0, #0]
    9218:	2340      	movs	r3, #64	; 0x40
    921a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    921e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    9222:	430a      	orrs	r2, r1
    9224:	7002      	strb	r2, [r0, #0]
    9226:	4770      	bx	lr

00009228 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    9228:	b508      	push	{r3, lr}
    922a:	7a03      	ldrb	r3, [r0, #8]
    922c:	f88d 3000 	strb.w	r3, [sp]
    9230:	9b00      	ldr	r3, [sp, #0]
    9232:	9300      	str	r3, [sp, #0]
    9234:	f89d 3000 	ldrb.w	r3, [sp]
    9238:	b123      	cbz	r3, 9244 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    923a:	f240 21c2 	movw	r1, #706	; 0x2c2
    923e:	2010      	movs	r0, #16
    9240:	f7f7 f8a8 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9248:	f7f8 b874 	b.w	1334 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

0000924c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    924c:	f7f8 b8a0 	b.w	1390 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    9250:	b510      	push	{r4, lr}
    9252:	4604      	mov	r4, r0
    9254:	2108      	movs	r1, #8
    9256:	4620      	mov	r0, r4
    9258:	f7f7 f90e 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    925c:	6820      	ldr	r0, [r4, #0]
    925e:	2800      	cmp	r0, #0
    9260:	d102      	bne.n	9268 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    9262:	6860      	ldr	r0, [r4, #4]
    9264:	2800      	cmp	r0, #0
    9266:	d0f5      	beq.n	9254 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    9268:	bd10      	pop	{r4, pc}

0000926a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    926a:	b508      	push	{r3, lr}
    926c:	f000 f804 	bl	9278 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    9270:	466a      	mov	r2, sp
    9272:	f7f8 f919 	bl	14a8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    9276:	bd08      	pop	{r3, pc}
    9278:	b530      	push	{r4, r5, lr}
    927a:	784c      	ldrb	r4, [r1, #1]
    927c:	4603      	mov	r3, r0
    927e:	7808      	ldrb	r0, [r1, #0]
    9280:	788d      	ldrb	r5, [r1, #2]
    9282:	0e22      	lsrs	r2, r4, #24
    9284:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    9288:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    928c:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    9290:	78cd      	ldrb	r5, [r1, #3]
    9292:	790c      	ldrb	r4, [r1, #4]
    9294:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    9298:	4322      	orrs	r2, r4
    929a:	7949      	ldrb	r1, [r1, #5]
    929c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    92a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    92a4:	4611      	mov	r1, r2
    92a6:	2b01      	cmp	r3, #1
    92a8:	d101      	bne.n	92ae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    92aa:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    92ae:	bd30      	pop	{r4, r5, pc}
    92b0:	2801      	cmp	r0, #1
    92b2:	d102      	bne.n	92ba <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    92b4:	7948      	ldrb	r0, [r1, #5]
    92b6:	0980      	lsrs	r0, r0, #6
    92b8:	d001      	beq.n	92be <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    92ba:	2000      	movs	r0, #0
    92bc:	4770      	bx	lr
    92be:	2001      	movs	r0, #1
    92c0:	4770      	bx	lr
    92c2:	2801      	cmp	r0, #1
    92c4:	d106      	bne.n	92d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92c6:	7948      	ldrb	r0, [r1, #5]
    92c8:	2101      	movs	r1, #1
    92ca:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    92ce:	d101      	bne.n	92d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92d0:	2001      	movs	r0, #1
    92d2:	4770      	bx	lr
    92d4:	2000      	movs	r0, #0
    92d6:	4770      	bx	lr
    92d8:	b118      	cbz	r0, 92e2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    92da:	2802      	cmp	r0, #2
    92dc:	d001      	beq.n	92e2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    92de:	2001      	movs	r0, #1
    92e0:	4770      	bx	lr
    92e2:	2000      	movs	r0, #0
    92e4:	4770      	bx	lr
    92e6:	2802      	cmp	r0, #2
    92e8:	d003      	beq.n	92f2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    92ea:	2803      	cmp	r0, #3
    92ec:	d001      	beq.n	92f2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    92ee:	2000      	movs	r0, #0
    92f0:	4770      	bx	lr
    92f2:	2001      	movs	r0, #1
    92f4:	4770      	bx	lr

000092f6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    92f6:	f7f8 bff3 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>

000092fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    92fa:	b510      	push	{r4, lr}
    92fc:	2000      	movs	r0, #0
    92fe:	f7f8 fe45 	bl	1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    9302:	f7f8 fa93 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9306:	f7f8 fff9 	bl	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    930a:	2000      	movs	r0, #0
    930c:	bd10      	pop	{r4, pc}
    930e:	b510      	push	{r4, lr}
    9310:	f000 f83c 	bl	938c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    9314:	2005      	movs	r0, #5
    9316:	bd10      	pop	{r4, pc}
    9318:	b510      	push	{r4, lr}
    931a:	f7f8 fe51 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    931e:	f7fa f9c3 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9322:	2005      	movs	r0, #5
    9324:	bd10      	pop	{r4, pc}
    9326:	b530      	push	{r4, r5, lr}
    9328:	b08b      	sub	sp, #44	; 0x2c
    932a:	4605      	mov	r5, r0
    932c:	f7f8 fe48 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    9330:	7828      	ldrb	r0, [r5, #0]
    9332:	4669      	mov	r1, sp
    9334:	f000 040f 	and.w	r4, r0, #15
    9338:	4622      	mov	r2, r4
    933a:	4628      	mov	r0, r5
    933c:	f7f9 f946 	bl	25cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    9340:	2200      	movs	r2, #0
    9342:	4621      	mov	r1, r4
    9344:	4668      	mov	r0, sp
    9346:	f7f8 faab 	bl	18a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    934a:	4621      	mov	r1, r4
    934c:	4668      	mov	r0, sp
    934e:	f7f8 fdb7 	bl	1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    9352:	4604      	mov	r4, r0
    9354:	f7f8 fa6a 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9358:	b00b      	add	sp, #44	; 0x2c
    935a:	4620      	mov	r0, r4
    935c:	bd30      	pop	{r4, r5, pc}
    935e:	f240 31af 	movw	r1, #943	; 0x3af
    9362:	2032      	movs	r0, #50	; 0x32
    9364:	f7f7 f816 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9368:	b510      	push	{r4, lr}
    936a:	f000 f80f 	bl	938c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    936e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9372:	f7f8 bfcb 	b.w	230c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    9376:	b510      	push	{r4, lr}
    9378:	f7f8 fe22 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    937c:	f7fa f994 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9384:	f7f8 bfc2 	b.w	230c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    9388:	f7f8 bfaa 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    938c:	b510      	push	{r4, lr}
    938e:	f7f8 fe17 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    9392:	f7f8 fa4b 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    939a:	f7fa b985 	b.w	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    939e:	f7ff bcb4 	b.w	8d0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    93a2:	b570      	push	{r4, r5, r6, lr}
    93a4:	4614      	mov	r4, r2
    93a6:	461d      	mov	r5, r3
    93a8:	4606      	mov	r6, r0
    93aa:	f000 fd37 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    93ae:	1900      	adds	r0, r0, r4
    93b0:	4169      	adcs	r1, r5
    93b2:	e9c6 0100 	strd	r0, r1, [r6]
    93b6:	bd70      	pop	{r4, r5, r6, pc}

000093b8 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    93b8:	b510      	push	{r4, lr}
    93ba:	f7f7 fba5 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    93be:	f000 f944 	bl	964a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    93c2:	4604      	mov	r4, r0
    93c4:	221c      	movs	r2, #28
    93c6:	2100      	movs	r1, #0
    93c8:	3009      	adds	r0, #9
    93ca:	f000 ff33 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    93ce:	207f      	movs	r0, #127	; 0x7f
    93d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    93d4:	21ff      	movs	r1, #255	; 0xff
    93d6:	75e1      	strb	r1, [r4, #23]
    93d8:	72a1      	strb	r1, [r4, #10]
    93da:	7721      	strb	r1, [r4, #28]
    93dc:	7ce0      	ldrb	r0, [r4, #19]
    93de:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    93e2:	3020      	adds	r0, #32
    93e4:	74e0      	strb	r0, [r4, #19]
    93e6:	bd10      	pop	{r4, pc}

000093e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    93e8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    93ec:	461d      	mov	r5, r3
    93ee:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    93f2:	4616      	mov	r6, r2
    93f4:	4688      	mov	r8, r1
    93f6:	4681      	mov	r9, r0
    93f8:	f7f7 fb86 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    93fc:	4604      	mov	r4, r0
    93fe:	f7ff fbdf 	bl	8bc0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9402:	2801      	cmp	r0, #1
    9404:	d066      	beq.n	94d4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    9406:	4620      	mov	r0, r4
    9408:	f000 f91f 	bl	964a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    940c:	4604      	mov	r4, r0
    940e:	221c      	movs	r2, #28
    9410:	2100      	movs	r1, #0
    9412:	3009      	adds	r0, #9
    9414:	f000 ff0e 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9418:	2701      	movs	r7, #1
    941a:	7267      	strb	r7, [r4, #9]
    941c:	ea5f 0008 	movs.w	r0, r8
    9420:	d009      	beq.n	9436 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    9422:	2801      	cmp	r0, #1
    9424:	d00b      	beq.n	943e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    9426:	2802      	cmp	r0, #2
    9428:	d02d      	beq.n	9486 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    942a:	f1b8 0f06 	cmp.w	r8, #6
    942e:	d02c      	beq.n	948a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    9430:	f240 310b 	movw	r1, #779	; 0x30b
    9434:	e04b      	b.n	94ce <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    9436:	7ce0      	ldrb	r0, [r4, #19]
    9438:	f040 0001 	orr.w	r0, r0, #1
    943c:	e026      	b.n	948c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    943e:	7ce0      	ldrb	r0, [r4, #19]
    9440:	f040 0005 	orr.w	r0, r0, #5
    9444:	f040 0010 	orr.w	r0, r0, #16
    9448:	74e0      	strb	r0, [r4, #19]
    944a:	f104 030a 	add.w	r3, r4, #10
    944e:	1c5a      	adds	r2, r3, #1
    9450:	4648      	mov	r0, r9
    9452:	990a      	ldr	r1, [sp, #40]	; 0x28
    9454:	f000 f8de 	bl	9614 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    9458:	f884 a012 	strb.w	sl, [r4, #18]
    945c:	7567      	strb	r7, [r4, #21]
    945e:	2000      	movs	r0, #0
    9460:	75a0      	strb	r0, [r4, #22]
    9462:	20ff      	movs	r0, #255	; 0xff
    9464:	75e0      	strb	r0, [r4, #23]
    9466:	7ce1      	ldrb	r1, [r4, #19]
    9468:	0749      	lsls	r1, r1, #29
    946a:	d518      	bpl.n	949e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    946c:	f104 001d 	add.w	r0, r4, #29
    9470:	1e41      	subs	r1, r0, #1
    9472:	2d02      	cmp	r5, #2
    9474:	d00d      	beq.n	9492 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    9476:	2d03      	cmp	r5, #3
    9478:	d00b      	beq.n	9492 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    947a:	f8d9 2008 	ldr.w	r2, [r9, #8]
    947e:	6813      	ldr	r3, [r2, #0]
    9480:	6003      	str	r3, [r0, #0]
    9482:	8892      	ldrh	r2, [r2, #4]
    9484:	e008      	b.n	9498 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    9486:	7ce0      	ldrb	r0, [r4, #19]
    9488:	e7dc      	b.n	9444 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    948a:	7ce0      	ldrb	r0, [r4, #19]
    948c:	f040 0002 	orr.w	r0, r0, #2
    9490:	e7d8      	b.n	9444 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    9492:	6832      	ldr	r2, [r6, #0]
    9494:	6002      	str	r2, [r0, #0]
    9496:	88b2      	ldrh	r2, [r6, #4]
    9498:	8082      	strh	r2, [r0, #4]
    949a:	700d      	strb	r5, [r1, #0]
    949c:	e000      	b.n	94a0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    949e:	7720      	strb	r0, [r4, #28]
    94a0:	207f      	movs	r0, #127	; 0x7f
    94a2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    94a6:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    94aa:	f7f7 fb27 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    94ae:	4605      	mov	r5, r0
    94b0:	f7f7 fb2a 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    94b4:	2201      	movs	r2, #1
    94b6:	4629      	mov	r1, r5
    94b8:	f000 f8d0 	bl	965c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    94bc:	b128      	cbz	r0, 94ca <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    94be:	4620      	mov	r0, r4
    94c0:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94c4:	2100      	movs	r1, #0
    94c6:	f7f9 b879 	b.w	25bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x870>
    94ca:	f240 312b 	movw	r1, #811	; 0x32b
    94ce:	2033      	movs	r0, #51	; 0x33
    94d0:	f7f6 ff60 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94d4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

000094d8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    94d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94dc:	461e      	mov	r6, r3
    94de:	4617      	mov	r7, r2
    94e0:	4689      	mov	r9, r1
    94e2:	4682      	mov	sl, r0
    94e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    94e8:	f7f7 fb0e 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    94ec:	4604      	mov	r4, r0
    94ee:	f7ff fb67 	bl	8bc0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    94f2:	2801      	cmp	r0, #1
    94f4:	d039      	beq.n	956a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    94f6:	4620      	mov	r0, r4
    94f8:	f000 f8a7 	bl	964a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    94fc:	4604      	mov	r4, r0
    94fe:	221c      	movs	r2, #28
    9500:	2100      	movs	r1, #0
    9502:	3009      	adds	r0, #9
    9504:	f000 fe96 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9508:	2501      	movs	r5, #1
    950a:	f104 030a 	add.w	r3, r4, #10
    950e:	7265      	strb	r5, [r4, #9]
    9510:	1c5a      	adds	r2, r3, #1
    9512:	4649      	mov	r1, r9
    9514:	4650      	mov	r0, sl
    9516:	f000 f87d 	bl	9614 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    951a:	f884 8012 	strb.w	r8, [r4, #18]
    951e:	7ce0      	ldrb	r0, [r4, #19]
    9520:	21ff      	movs	r1, #255	; 0xff
    9522:	f367 0000 	bfi	r0, r7, #0, #1
    9526:	f040 001a 	orr.w	r0, r0, #26
    952a:	74e0      	strb	r0, [r4, #19]
    952c:	7565      	strb	r5, [r4, #21]
    952e:	2000      	movs	r0, #0
    9530:	75a0      	strb	r0, [r4, #22]
    9532:	75e1      	strb	r1, [r4, #23]
    9534:	7721      	strb	r1, [r4, #28]
    9536:	207f      	movs	r0, #127	; 0x7f
    9538:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    953c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    9540:	f7f7 fadc 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9544:	4605      	mov	r5, r0
    9546:	f7f7 fadf 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    954a:	2201      	movs	r2, #1
    954c:	4629      	mov	r1, r5
    954e:	f000 f885 	bl	965c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    9552:	b128      	cbz	r0, 9560 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    9554:	4620      	mov	r0, r4
    9556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    955a:	2100      	movs	r1, #0
    955c:	f7f9 b82e 	b.w	25bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x870>
    9560:	f44f 7156 	mov.w	r1, #856	; 0x358
    9564:	2033      	movs	r0, #51	; 0x33
    9566:	f7f6 ff15 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000956e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    956e:	f7ff bf23 	b.w	93b8 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    9572:	b5f0      	push	{r4, r5, r6, r7, lr}
    9574:	b08b      	sub	sp, #44	; 0x2c
    9576:	460f      	mov	r7, r1
    9578:	f7f7 fac6 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    957c:	4604      	mov	r4, r0
    957e:	f7ff fb4c 	bl	8c1a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    9582:	0005      	movs	r5, r0
    9584:	d00c      	beq.n	95a0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    9586:	4620      	mov	r0, r4
    9588:	4629      	mov	r1, r5
    958a:	aa0a      	add	r2, sp, #40	; 0x28
    958c:	f7ff fb63 	bl	8c56 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    9590:	4606      	mov	r6, r0
    9592:	f7f7 fab3 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9596:	42b0      	cmp	r0, r6
    9598:	d005      	beq.n	95a6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    959a:	f240 11ab 	movw	r1, #427	; 0x1ab
    959e:	e036      	b.n	960e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    95a0:	f240 11a1 	movw	r1, #417	; 0x1a1
    95a4:	e033      	b.n	960e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    95a6:	4669      	mov	r1, sp
    95a8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95aa:	f000 f859 	bl	9660 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    95ae:	1d3e      	adds	r6, r7, #4
    95b0:	4628      	mov	r0, r5
    95b2:	f7ff fb03 	bl	8bbc <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    95b6:	4605      	mov	r5, r0
    95b8:	f100 0109 	add.w	r1, r0, #9
    95bc:	221c      	movs	r2, #28
    95be:	4630      	mov	r0, r6
    95c0:	f000 fdbe 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    95c4:	7ce8      	ldrb	r0, [r5, #19]
    95c6:	f04f 0500 	mov.w	r5, #0
    95ca:	06c1      	lsls	r1, r0, #27
    95cc:	d50d      	bpl.n	95ea <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    95ce:	0740      	lsls	r0, r0, #29
    95d0:	d40a      	bmi.n	95e8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    95d2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    95d6:	f106 001c 	add.w	r0, r6, #28
    95da:	9903      	ldr	r1, [sp, #12]
    95dc:	f000 fdb0 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    95e0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    95e4:	7230      	strb	r0, [r6, #8]
    95e6:	e000      	b.n	95ea <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    95e8:	7235      	strb	r5, [r6, #8]
    95ea:	707d      	strb	r5, [r7, #1]
    95ec:	2005      	movs	r0, #5
    95ee:	7038      	strb	r0, [r7, #0]
    95f0:	4638      	mov	r0, r7
    95f2:	f7f8 ff73 	bl	24dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x790>
    95f6:	4620      	mov	r0, r4
    95f8:	f7ff fafb 	bl	8bf2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    95fc:	b128      	cbz	r0, 960a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    95fe:	4620      	mov	r0, r4
    9600:	2100      	movs	r1, #0
    9602:	f7ff fb58 	bl	8cb6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    9606:	b00b      	add	sp, #44	; 0x2c
    9608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    960a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    960e:	2033      	movs	r0, #51	; 0x33
    9610:	f7f6 fec0 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9614:	b510      	push	{r4, lr}
    9616:	461c      	mov	r4, r3
    9618:	460b      	mov	r3, r1
    961a:	29ff      	cmp	r1, #255	; 0xff
    961c:	d00d      	beq.n	963a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    961e:	4621      	mov	r1, r4
    9620:	4618      	mov	r0, r3
    9622:	f7f7 fc99 	bl	f58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    9626:	b120      	cbz	r0, 9632 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    9628:	7820      	ldrb	r0, [r4, #0]
    962a:	f040 0002 	orr.w	r0, r0, #2
    962e:	7020      	strb	r0, [r4, #0]
    9630:	bd10      	pop	{r4, pc}
    9632:	21dc      	movs	r1, #220	; 0xdc
    9634:	2033      	movs	r0, #51	; 0x33
    9636:	f7f6 fead 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    963a:	7c41      	ldrb	r1, [r0, #17]
    963c:	7021      	strb	r1, [r4, #0]
    963e:	6840      	ldr	r0, [r0, #4]
    9640:	6801      	ldr	r1, [r0, #0]
    9642:	6011      	str	r1, [r2, #0]
    9644:	8880      	ldrh	r0, [r0, #4]
    9646:	8090      	strh	r0, [r2, #4]
    9648:	bd10      	pop	{r4, pc}
    964a:	b51c      	push	{r2, r3, r4, lr}
    964c:	4669      	mov	r1, sp
    964e:	aa01      	add	r2, sp, #4
    9650:	f7ff faf3 	bl	8c3a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    9654:	9800      	ldr	r0, [sp, #0]
    9656:	f7ff fab1 	bl	8bbc <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    965a:	bd1c      	pop	{r2, r3, r4, pc}
    965c:	f7ff ba65 	b.w	8b2a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

00009660 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    9660:	7802      	ldrb	r2, [r0, #0]
    9662:	f002 020f 	and.w	r2, r2, #15
    9666:	f7f8 bfb1 	b.w	25cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    966a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    966c:	256e      	movs	r5, #110	; 0x6e
    966e:	4668      	mov	r0, sp
    9670:	f7fe fcfc 	bl	806c <mpsl_fem_pa_is_configured>
    9674:	f89d 0000 	ldrb.w	r0, [sp]
    9678:	b108      	cbz	r0, 967e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    967a:	2401      	movs	r4, #1
    967c:	e000      	b.n	9680 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    967e:	2400      	movs	r4, #0
    9680:	a801      	add	r0, sp, #4
    9682:	f7fe fcdb 	bl	803c <mpsl_fem_lna_is_configured>
    9686:	f89d 0004 	ldrb.w	r0, [sp, #4]
    968a:	b100      	cbz	r0, 968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    968c:	2001      	movs	r0, #1
    968e:	4304      	orrs	r4, r0
    9690:	d000      	beq.n	9694 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    9692:	2578      	movs	r5, #120	; 0x78
    9694:	4628      	mov	r0, r5
    9696:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00009698 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    9698:	b510      	push	{r4, lr}
    969a:	f7ff ffe6 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    969e:	306b      	adds	r0, #107	; 0x6b
    96a0:	b280      	uxth	r0, r0
    96a2:	bd10      	pop	{r4, pc}
    96a4:	6980      	ldr	r0, [r0, #24]
    96a6:	2800      	cmp	r0, #0
    96a8:	d000      	beq.n	96ac <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    96aa:	2001      	movs	r0, #1
    96ac:	4770      	bx	lr
    96ae:	b510      	push	{r4, lr}
    96b0:	2802      	cmp	r0, #2
    96b2:	d007      	beq.n	96c4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2c>
    96b4:	2108      	movs	r1, #8
    96b6:	2801      	cmp	r0, #1
    96b8:	d006      	beq.n	96c8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x30>
    96ba:	f44f 7182 	mov.w	r1, #260	; 0x104
    96be:	2005      	movs	r0, #5
    96c0:	f7f6 fe68 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96c4:	2104      	movs	r1, #4
    96c6:	e7f6      	b.n	96b6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    96c8:	202a      	movs	r0, #42	; 0x2a
    96ca:	2228      	movs	r2, #40	; 0x28
    96cc:	fb11 2000 	smlabb	r0, r1, r0, r2
    96d0:	b280      	uxth	r0, r0
    96d2:	bd10      	pop	{r4, pc}
    96d4:	b510      	push	{r4, lr}
    96d6:	f7ff ffc8 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    96da:	f500 7083 	add.w	r0, r0, #262	; 0x106
    96de:	b280      	uxth	r0, r0
    96e0:	bd10      	pop	{r4, pc}
    96e2:	f7fc b92d 	b.w	5940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    96e6:	1a10      	subs	r0, r2, r0
    96e8:	4770      	bx	lr

000096ea <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    96ea:	b510      	push	{r4, lr}
    96ec:	f7f9 fc6e 	bl	2fcc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    96f0:	2000      	movs	r0, #0
    96f2:	bd10      	pop	{r4, pc}

000096f4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    96f4:	b510      	push	{r4, lr}
    96f6:	460c      	mov	r4, r1
    96f8:	f7f7 f98a 	bl	a10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    96fc:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    9700:	2820      	cmp	r0, #32
    9702:	d006      	beq.n	9712 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x1e>
    9704:	f7fc fee4 	bl	64d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9708:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    970c:	f7fc febe 	bl	648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9710:	b158      	cbz	r0, 972a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x36>
    9712:	f504 700a 	add.w	r0, r4, #552	; 0x228
    9716:	4604      	mov	r4, r0
    9718:	f7f9 fcd8 	bl	30cc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>
    971c:	2800      	cmp	r0, #0
    971e:	d009      	beq.n	9734 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x40>
    9720:	4620      	mov	r0, r4
    9722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9726:	f7f9 bcdf 	b.w	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    972a:	f640 318a 	movw	r1, #2954	; 0xb8a
    972e:	2036      	movs	r0, #54	; 0x36
    9730:	f7f6 fe30 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9734:	bd10      	pop	{r4, pc}

00009736 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    9736:	b510      	push	{r4, lr}
    9738:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    973c:	1ac3      	subs	r3, r0, r3
    973e:	eb61 0104 	sbc.w	r1, r1, r4
    9742:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    9746:	17e0      	asrs	r0, r4, #31
    9748:	1ae4      	subs	r4, r4, r3
    974a:	4188      	sbcs	r0, r1
    974c:	da05      	bge.n	975a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    974e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9752:	1a18      	subs	r0, r3, r0
    9754:	f171 0000 	sbcs.w	r0, r1, #0
    9758:	db03      	blt.n	9762 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    975a:	21b6      	movs	r1, #182	; 0xb6
    975c:	2037      	movs	r0, #55	; 0x37
    975e:	f7f6 fe19 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9762:	2900      	cmp	r1, #0
    9764:	da00      	bge.n	9768 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    9766:	425b      	negs	r3, r3
    9768:	fbb3 f0f2 	udiv	r0, r3, r2
    976c:	fb02 3010 	mls	r0, r2, r0, r3
    9770:	2900      	cmp	r1, #0
    9772:	da02      	bge.n	977a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9774:	2800      	cmp	r0, #0
    9776:	d000      	beq.n	977a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9778:	1a10      	subs	r0, r2, r0
    977a:	bd10      	pop	{r4, pc}
    977c:	b118      	cbz	r0, 9786 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    977e:	2802      	cmp	r0, #2
    9780:	d001      	beq.n	9786 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    9782:	2001      	movs	r0, #1
    9784:	4770      	bx	lr
    9786:	2000      	movs	r0, #0
    9788:	4770      	bx	lr

0000978a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    978a:	b510      	push	{r4, lr}
    978c:	4604      	mov	r4, r0
    978e:	f000 fa56 	bl	9c3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    9792:	b108      	cbz	r0, 9798 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    9794:	200c      	movs	r0, #12
    9796:	bd10      	pop	{r4, pc}
    9798:	7820      	ldrb	r0, [r4, #0]
    979a:	b118      	cbz	r0, 97a4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    979c:	2801      	cmp	r0, #1
    979e:	d001      	beq.n	97a4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    97a0:	2012      	movs	r0, #18
    97a2:	bd10      	pop	{r4, pc}
    97a4:	f7ff ffea 	bl	977c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    97a8:	1c61      	adds	r1, r4, #1
    97aa:	f7f7 fe13 	bl	13d4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    97ae:	b108      	cbz	r0, 97b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    97b0:	2000      	movs	r0, #0
    97b2:	bd10      	pop	{r4, pc}
    97b4:	2007      	movs	r0, #7
    97b6:	bd10      	pop	{r4, pc}

000097b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    97b8:	b510      	push	{r4, lr}
    97ba:	f000 fa40 	bl	9c3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    97be:	b108      	cbz	r0, 97c4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    97c0:	200c      	movs	r0, #12
    97c2:	bd10      	pop	{r4, pc}
    97c4:	f7f7 fe64 	bl	1490 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    97c8:	2000      	movs	r0, #0
    97ca:	f7f7 fc0f 	bl	fec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    97ce:	2000      	movs	r0, #0
    97d0:	bd10      	pop	{r4, pc}

000097d2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    97d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97d6:	4605      	mov	r5, r0
    97d8:	f000 f8fb 	bl	99d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    97dc:	2800      	cmp	r0, #0
    97de:	d112      	bne.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    97e0:	8828      	ldrh	r0, [r5, #0]
    97e2:	2100      	movs	r1, #0
    97e4:	f7f7 f880 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97e8:	0004      	movs	r4, r0
    97ea:	d00e      	beq.n	980a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    97ec:	f000 f9fe 	bl	9bec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>
    97f0:	b158      	cbz	r0, 980a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    97f2:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    97f6:	f88d 0000 	strb.w	r0, [sp]
    97fa:	9800      	ldr	r0, [sp, #0]
    97fc:	9000      	str	r0, [sp, #0]
    97fe:	f89d 0000 	ldrb.w	r0, [sp]
    9802:	b120      	cbz	r0, 980e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    9804:	203a      	movs	r0, #58	; 0x3a
    9806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    980a:	2002      	movs	r0, #2
    980c:	e7fb      	b.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    980e:	f04f 0800 	mov.w	r8, #0
    9812:	88a8      	ldrh	r0, [r5, #4]
    9814:	f7ff fc3d 	bl	9092 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9818:	4607      	mov	r7, r0
    981a:	4601      	mov	r1, r0
    981c:	2005      	movs	r0, #5
    981e:	f7ff fc85 	bl	912c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9822:	4606      	mov	r6, r0
    9824:	4639      	mov	r1, r7
    9826:	2008      	movs	r0, #8
    9828:	f7ff fc80 	bl	912c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    982c:	42b0      	cmp	r0, r6
    982e:	d301      	bcc.n	9834 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    9830:	42be      	cmp	r6, r7
    9832:	d301      	bcc.n	9838 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    9834:	2012      	movs	r0, #18
    9836:	e7e6      	b.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    9838:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    983c:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    9840:	88e8      	ldrh	r0, [r5, #6]
    9842:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    9846:	8928      	ldrh	r0, [r5, #8]
    9848:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    984c:	f504 7419 	add.w	r4, r4, #612	; 0x264
    9850:	20ff      	movs	r0, #255	; 0xff
    9852:	7020      	strb	r0, [r4, #0]
    9854:	2000      	movs	r0, #0
    9856:	e7d6      	b.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

00009858 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    9858:	b510      	push	{r4, lr}
    985a:	460b      	mov	r3, r1
    985c:	2201      	movs	r2, #1
    985e:	f100 0110 	add.w	r1, r0, #16
    9862:	f7ff fbec 	bl	903e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9866:	2000      	movs	r0, #0
    9868:	bd10      	pop	{r4, pc}

0000986a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    986a:	b510      	push	{r4, lr}
    986c:	2108      	movs	r1, #8
    986e:	f7f6 fe03 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9872:	2000      	movs	r0, #0
    9874:	bd10      	pop	{r4, pc}

00009876 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    9876:	b510      	push	{r4, lr}
    9878:	4604      	mov	r4, r0
    987a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    987e:	f000 f9d6 	bl	9c2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9882:	f7f7 fc1d 	bl	10c0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9886:	7020      	strb	r0, [r4, #0]
    9888:	f000 f9ad 	bl	9be6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    988c:	f7f7 fc18 	bl	10c0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9890:	7060      	strb	r0, [r4, #1]
    9892:	2000      	movs	r0, #0
    9894:	bd10      	pop	{r4, pc}

00009896 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    9896:	b510      	push	{r4, lr}
    9898:	4604      	mov	r4, r0
    989a:	f7f7 fdff 	bl	149c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    989e:	7020      	strb	r0, [r4, #0]
    98a0:	2000      	movs	r0, #0
    98a2:	bd10      	pop	{r4, pc}

000098a4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    98a4:	b510      	push	{r4, lr}
    98a6:	4604      	mov	r4, r0
    98a8:	f000 f9c9 	bl	9c3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    98ac:	b108      	cbz	r0, 98b2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    98ae:	200c      	movs	r0, #12
    98b0:	bd10      	pop	{r4, pc}
    98b2:	7820      	ldrb	r0, [r4, #0]
    98b4:	b108      	cbz	r0, 98ba <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    98b6:	2801      	cmp	r0, #1
    98b8:	d107      	bne.n	98ca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    98ba:	f7ff ff5f 	bl	977c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    98be:	1c61      	adds	r1, r4, #1
    98c0:	f7f7 fdc6 	bl	1450 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    98c4:	b108      	cbz	r0, 98ca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    98c6:	2000      	movs	r0, #0
    98c8:	bd10      	pop	{r4, pc}
    98ca:	2012      	movs	r0, #18
    98cc:	bd10      	pop	{r4, pc}

000098ce <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    98ce:	b510      	push	{r4, lr}
    98d0:	4604      	mov	r4, r0
    98d2:	2001      	movs	r0, #1
    98d4:	f000 f8af 	bl	9a36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    98d8:	b128      	cbz	r0, 98e6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    98da:	4621      	mov	r1, r4
    98dc:	2001      	movs	r0, #1
    98de:	f7f7 fa8b 	bl	df8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    98e2:	2000      	movs	r0, #0
    98e4:	bd10      	pop	{r4, pc}
    98e6:	200c      	movs	r0, #12
    98e8:	bd10      	pop	{r4, pc}

000098ea <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    98ea:	b51c      	push	{r2, r3, r4, lr}
    98ec:	7801      	ldrb	r1, [r0, #0]
    98ee:	f88d 1000 	strb.w	r1, [sp]
    98f2:	7840      	ldrb	r0, [r0, #1]
    98f4:	f88d 0001 	strb.w	r0, [sp, #1]
    98f8:	2000      	movs	r0, #0
    98fa:	f8ad 0002 	strh.w	r0, [sp, #2]
    98fe:	f8ad 0004 	strh.w	r0, [sp, #4]
    9902:	4601      	mov	r1, r0
    9904:	4668      	mov	r0, sp
    9906:	f000 f8c3 	bl	9a90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>
    990a:	2800      	cmp	r0, #0
    990c:	d102      	bne.n	9914 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    990e:	4668      	mov	r0, sp
    9910:	f000 f89d 	bl	9a4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a>
    9914:	bd1c      	pop	{r2, r3, r4, pc}

00009916 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    9916:	b500      	push	{lr}
    9918:	b087      	sub	sp, #28
    991a:	7941      	ldrb	r1, [r0, #5]
    991c:	f88d 1000 	strb.w	r1, [sp]
    9920:	7981      	ldrb	r1, [r0, #6]
    9922:	f88d 1001 	strb.w	r1, [sp, #1]
    9926:	2101      	movs	r1, #1
    9928:	f88d 1002 	strb.w	r1, [sp, #2]
    992c:	7801      	ldrb	r1, [r0, #0]
    992e:	f88d 1003 	strb.w	r1, [sp, #3]
    9932:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    9936:	f240 2271 	movw	r2, #625	; 0x271
    993a:	4351      	muls	r1, r2
    993c:	9102      	str	r1, [sp, #8]
    993e:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    9942:	4350      	muls	r0, r2
    9944:	9004      	str	r0, [sp, #16]
    9946:	2007      	movs	r0, #7
    9948:	f88d 0018 	strb.w	r0, [sp, #24]
    994c:	2000      	movs	r0, #0
    994e:	f88d 0019 	strb.w	r0, [sp, #25]
    9952:	9804      	ldr	r0, [sp, #16]
    9954:	f7f9 fcd2 	bl	32fc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x88>
    9958:	b140      	cbz	r0, 996c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    995a:	9802      	ldr	r0, [sp, #8]
    995c:	f7f9 fcc2 	bl	32e4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x70>
    9960:	b120      	cbz	r0, 996c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    9962:	4668      	mov	r0, sp
    9964:	f7f9 fc42 	bl	31ec <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    9968:	b007      	add	sp, #28
    996a:	bd00      	pop	{pc}
    996c:	2030      	movs	r0, #48	; 0x30
    996e:	e7fb      	b.n	9968 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

00009970 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    9970:	b510      	push	{r4, lr}
    9972:	f7f7 fa65 	bl	e40 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    9976:	2000      	movs	r0, #0
    9978:	bd10      	pop	{r4, pc}

0000997a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    997a:	b510      	push	{r4, lr}
    997c:	4604      	mov	r4, r0
    997e:	f7f9 fd0d 	bl	339c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    9982:	b118      	cbz	r0, 998c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    9984:	2000      	movs	r0, #0
    9986:	f000 f856 	bl	9a36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    998a:	b128      	cbz	r0, 9998 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    998c:	4621      	mov	r1, r4
    998e:	2000      	movs	r0, #0
    9990:	f7f7 fa32 	bl	df8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9994:	2000      	movs	r0, #0
    9996:	bd10      	pop	{r4, pc}
    9998:	200c      	movs	r0, #12
    999a:	bd10      	pop	{r4, pc}

0000999c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    999c:	b510      	push	{r4, lr}
    999e:	7800      	ldrb	r0, [r0, #0]
    99a0:	b100      	cbz	r0, 99a4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    99a2:	2001      	movs	r0, #1
    99a4:	f7f9 fb0c 	bl	2fc0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    99a8:	2000      	movs	r0, #0
    99aa:	bd10      	pop	{r4, pc}

000099ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    99ac:	b510      	push	{r4, lr}
    99ae:	4604      	mov	r4, r0
    99b0:	4601      	mov	r1, r0
    99b2:	2000      	movs	r0, #0
    99b4:	f7f7 fa08 	bl	dc8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    99b8:	b910      	cbnz	r0, 99c0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    99ba:	2000      	movs	r0, #0
    99bc:	6020      	str	r0, [r4, #0]
    99be:	80a0      	strh	r0, [r4, #4]
    99c0:	2000      	movs	r0, #0
    99c2:	bd10      	pop	{r4, pc}

000099c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    99c4:	b510      	push	{r4, lr}
    99c6:	f7f9 fcef 	bl	33a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    99ca:	2000      	movs	r0, #0
    99cc:	bd10      	pop	{r4, pc}

000099ce <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    99ce:	f000 b821 	b.w	9a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000099d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    99d2:	b510      	push	{r4, lr}
    99d4:	4604      	mov	r4, r0
    99d6:	2000      	movs	r0, #0
    99d8:	8822      	ldrh	r2, [r4, #0]
    99da:	b086      	sub	sp, #24
    99dc:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    99e0:	39ff      	subs	r1, #255	; 0xff
    99e2:	d008      	beq.n	99f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    99e4:	a903      	add	r1, sp, #12
    99e6:	4610      	mov	r0, r2
    99e8:	f7ff fb47 	bl	907a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    99ec:	b110      	cbz	r0, 99f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    99ee:	2002      	movs	r0, #2
    99f0:	b006      	add	sp, #24
    99f2:	bd10      	pop	{r4, pc}
    99f4:	9804      	ldr	r0, [sp, #16]
    99f6:	8921      	ldrh	r1, [r4, #8]
    99f8:	89a3      	ldrh	r3, [r4, #12]
    99fa:	8962      	ldrh	r2, [r4, #10]
    99fc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    9a00:	88e3      	ldrh	r3, [r4, #6]
    9a02:	88a2      	ldrh	r2, [r4, #4]
    9a04:	8861      	ldrh	r1, [r4, #2]
    9a06:	f000 f8c3 	bl	9b90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    9a0a:	b108      	cbz	r0, 9a10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    9a0c:	2000      	movs	r0, #0
    9a0e:	e7ef      	b.n	99f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    9a10:	2030      	movs	r0, #48	; 0x30
    9a12:	e7ed      	b.n	99f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00009a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9a14:	b510      	push	{r4, lr}
    9a16:	f7ff faa1 	bl	8f5c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9a1a:	f7f7 fa89 	bl	f30 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9a1e:	f7f9 fd07 	bl	3430 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9a22:	f7ff fc13 	bl	924c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9a26:	f7ff fb90 	bl	914a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    9a2a:	f7f7 fd31 	bl	1490 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    9a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a32:	f7f9 bc29 	b.w	3288 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    9a36:	b510      	push	{r4, lr}
    9a38:	f000 f8ee 	bl	9c18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    9a3c:	b128      	cbz	r0, 9a4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9a3e:	f7f7 fecf 	bl	17e0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    9a42:	2801      	cmp	r0, #1
    9a44:	d001      	beq.n	9a4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9a46:	2000      	movs	r0, #0
    9a48:	bd10      	pop	{r4, pc}
    9a4a:	2001      	movs	r0, #1
    9a4c:	bd10      	pop	{r4, pc}
    9a4e:	b510      	push	{r4, lr}
    9a50:	4604      	mov	r4, r0
    9a52:	7800      	ldrb	r0, [r0, #0]
    9a54:	2801      	cmp	r0, #1
    9a56:	d009      	beq.n	9a6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    9a58:	f7f8 fe96 	bl	2788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    9a5c:	2805      	cmp	r0, #5
    9a5e:	d003      	beq.n	9a68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>
    9a60:	f7f8 fe5a 	bl	2718 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    9a64:	2800      	cmp	r0, #0
    9a66:	d000      	beq.n	9a6a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    9a68:	200c      	movs	r0, #12
    9a6a:	bd10      	pop	{r4, pc}
    9a6c:	f7f7 fe86 	bl	177c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    9a70:	b108      	cbz	r0, 9a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    9a72:	203a      	movs	r0, #58	; 0x3a
    9a74:	bd10      	pop	{r4, pc}
    9a76:	f7f7 fe43 	bl	1700 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    9a7a:	b138      	cbz	r0, 9a8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    9a7c:	f7f7 fd5e 	bl	153c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    9a80:	88a1      	ldrh	r1, [r4, #4]
    9a82:	8860      	ldrh	r0, [r4, #2]
    9a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a88:	f7f8 be0c 	b.w	26a4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    9a8c:	2012      	movs	r0, #18
    9a8e:	bd10      	pop	{r4, pc}
    9a90:	7802      	ldrb	r2, [r0, #0]
    9a92:	2a01      	cmp	r2, #1
    9a94:	d001      	beq.n	9a9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x86>
    9a96:	b1ba      	cbz	r2, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9a98:	e018      	b.n	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9a9a:	7842      	ldrb	r2, [r0, #1]
    9a9c:	b13a      	cbz	r2, 9aae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9a9e:	2a01      	cmp	r2, #1
    9aa0:	d005      	beq.n	9aae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9aa2:	2a02      	cmp	r2, #2
    9aa4:	d112      	bne.n	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aa6:	b189      	cbz	r1, 9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aa8:	8881      	ldrh	r1, [r0, #4]
    9aaa:	b179      	cbz	r1, 9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aac:	e000      	b.n	9ab0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    9aae:	b159      	cbz	r1, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ab0:	8841      	ldrh	r1, [r0, #2]
    9ab2:	b149      	cbz	r1, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ab4:	8880      	ldrh	r0, [r0, #4]
    9ab6:	b138      	cbz	r0, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ab8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9abc:	0049      	lsls	r1, r1, #1
    9abe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9ac2:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    9ac6:	d201      	bcs.n	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9ac8:	2000      	movs	r0, #0
    9aca:	4770      	bx	lr
    9acc:	2012      	movs	r0, #18
    9ace:	4770      	bx	lr
    9ad0:	b570      	push	{r4, r5, r6, lr}
    9ad2:	4604      	mov	r4, r0
    9ad4:	7800      	ldrb	r0, [r0, #0]
    9ad6:	2500      	movs	r5, #0
    9ad8:	2801      	cmp	r0, #1
    9ada:	d004      	beq.n	9ae6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9adc:	b118      	cbz	r0, 9ae6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9ade:	2802      	cmp	r0, #2
    9ae0:	d001      	beq.n	9ae6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9ae2:	2803      	cmp	r0, #3
    9ae4:	d139      	bne.n	9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9ae6:	7860      	ldrb	r0, [r4, #1]
    9ae8:	b128      	cbz	r0, 9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9aea:	2801      	cmp	r0, #1
    9aec:	d003      	beq.n	9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9aee:	2802      	cmp	r0, #2
    9af0:	d001      	beq.n	9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9af2:	2803      	cmp	r0, #3
    9af4:	d131      	bne.n	9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9af6:	7e60      	ldrb	r0, [r4, #25]
    9af8:	b948      	cbnz	r0, 9b0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    9afa:	78a0      	ldrb	r0, [r4, #2]
    9afc:	2801      	cmp	r0, #1
    9afe:	d12c      	bne.n	9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b00:	f7f9 fc86 	bl	3410 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9b04:	4601      	mov	r1, r0
    9b06:	78a0      	ldrb	r0, [r4, #2]
    9b08:	ea30 0101 	bics.w	r1, r0, r1
    9b0c:	d001      	beq.n	9b12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    9b0e:	2011      	movs	r0, #17
    9b10:	bd70      	pop	{r4, r5, r6, pc}
    9b12:	07c0      	lsls	r0, r0, #31
    9b14:	d006      	beq.n	9b24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x110>
    9b16:	78e0      	ldrb	r0, [r4, #3]
    9b18:	2301      	movs	r3, #1
    9b1a:	6922      	ldr	r2, [r4, #16]
    9b1c:	68a1      	ldr	r1, [r4, #8]
    9b1e:	f000 f820 	bl	9b62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b22:	4605      	mov	r5, r0
    9b24:	78a0      	ldrb	r0, [r4, #2]
    9b26:	0780      	lsls	r0, r0, #30
    9b28:	d506      	bpl.n	9b38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    9b2a:	78e0      	ldrb	r0, [r4, #3]
    9b2c:	2302      	movs	r3, #2
    9b2e:	6922      	ldr	r2, [r4, #16]
    9b30:	68a1      	ldr	r1, [r4, #8]
    9b32:	f000 f816 	bl	9b62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b36:	4305      	orrs	r5, r0
    9b38:	78a0      	ldrb	r0, [r4, #2]
    9b3a:	0740      	lsls	r0, r0, #29
    9b3c:	d506      	bpl.n	9b4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x138>
    9b3e:	78e0      	ldrb	r0, [r4, #3]
    9b40:	2304      	movs	r3, #4
    9b42:	6922      	ldr	r2, [r4, #16]
    9b44:	68a1      	ldr	r1, [r4, #8]
    9b46:	f000 f80c 	bl	9b62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b4a:	4305      	orrs	r5, r0
    9b4c:	b10d      	cbz	r5, 9b52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    9b4e:	4628      	mov	r0, r5
    9b50:	bd70      	pop	{r4, r5, r6, pc}
    9b52:	7e20      	ldrb	r0, [r4, #24]
    9b54:	b108      	cbz	r0, 9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b56:	2807      	cmp	r0, #7
    9b58:	d901      	bls.n	9b5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    9b5a:	2012      	movs	r0, #18
    9b5c:	bd70      	pop	{r4, r5, r6, pc}
    9b5e:	2000      	movs	r0, #0
    9b60:	bd70      	pop	{r4, r5, r6, pc}
    9b62:	b570      	push	{r4, r5, r6, lr}
    9b64:	4614      	mov	r4, r2
    9b66:	460d      	mov	r5, r1
    9b68:	b108      	cbz	r0, 9b6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15a>
    9b6a:	2801      	cmp	r0, #1
    9b6c:	d10a      	bne.n	9b84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    9b6e:	4619      	mov	r1, r3
    9b70:	4610      	mov	r0, r2
    9b72:	f7f9 fbe3 	bl	333c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc8>
    9b76:	b138      	cbz	r0, 9b88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9b78:	4628      	mov	r0, r5
    9b7a:	f7f9 fba7 	bl	32cc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x58>
    9b7e:	b118      	cbz	r0, 9b88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9b80:	42ac      	cmp	r4, r5
    9b82:	d903      	bls.n	9b8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    9b84:	2012      	movs	r0, #18
    9b86:	bd70      	pop	{r4, r5, r6, pc}
    9b88:	2030      	movs	r0, #48	; 0x30
    9b8a:	bd70      	pop	{r4, r5, r6, pc}
    9b8c:	2000      	movs	r0, #0
    9b8e:	bd70      	pop	{r4, r5, r6, pc}
    9b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b94:	461d      	mov	r5, r3
    9b96:	4610      	mov	r0, r2
    9b98:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    9b9c:	1f8b      	subs	r3, r1, #6
    9b9e:	f640 427a 	movw	r2, #3194	; 0xc7a
    9ba2:	9e08      	ldr	r6, [sp, #32]
    9ba4:	4293      	cmp	r3, r2
    9ba6:	d81c      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9ba8:	1f83      	subs	r3, r0, #6
    9baa:	4293      	cmp	r3, r2
    9bac:	d819      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bae:	4281      	cmp	r1, r0
    9bb0:	d817      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bb2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    9bb6:	d214      	bcs.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bb8:	f1a4 010a 	sub.w	r1, r4, #10
    9bbc:	1f12      	subs	r2, r2, #4
    9bbe:	4291      	cmp	r1, r2
    9bc0:	d80f      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bc2:	f7ff fa66 	bl	9092 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9bc6:	1c6d      	adds	r5, r5, #1
    9bc8:	4368      	muls	r0, r5
    9bca:	f240 2171 	movw	r1, #625	; 0x271
    9bce:	0040      	lsls	r0, r0, #1
    9bd0:	434c      	muls	r4, r1
    9bd2:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    9bd6:	d204      	bcs.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bd8:	42b7      	cmp	r7, r6
    9bda:	d802      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bdc:	2001      	movs	r0, #1
    9bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9be2:	2000      	movs	r0, #0
    9be4:	e7fb      	b.n	9bde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    9be6:	207f      	movs	r0, #127	; 0x7f
    9be8:	f000 b821 	b.w	9c2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9bec:	b508      	push	{r3, lr}
    9bee:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    9bf2:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    9bf6:	f88d 0000 	strb.w	r0, [sp]
    9bfa:	9800      	ldr	r0, [sp, #0]
    9bfc:	9000      	str	r0, [sp, #0]
    9bfe:	f89d 0000 	ldrb.w	r0, [sp]
    9c02:	b100      	cbz	r0, 9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    9c04:	2001      	movs	r0, #1
    9c06:	1e40      	subs	r0, r0, #1
    9c08:	4208      	tst	r0, r1
    9c0a:	d003      	beq.n	9c14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    9c0c:	2904      	cmp	r1, #4
    9c0e:	d001      	beq.n	9c14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    9c10:	2001      	movs	r0, #1
    9c12:	bd08      	pop	{r3, pc}
    9c14:	2000      	movs	r0, #0
    9c16:	bd08      	pop	{r3, pc}
    9c18:	b510      	push	{r4, lr}
    9c1a:	f7f8 fdb5 	bl	2788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    9c1e:	2804      	cmp	r0, #4
    9c20:	d003      	beq.n	9c2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9c22:	2805      	cmp	r0, #5
    9c24:	d001      	beq.n	9c2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9c26:	2000      	movs	r0, #0
    9c28:	bd10      	pop	{r4, pc}
    9c2a:	2001      	movs	r0, #1
    9c2c:	bd10      	pop	{r4, pc}
    9c2e:	b508      	push	{r3, lr}
    9c30:	f640 1288 	movw	r2, #2440	; 0x988
    9c34:	2300      	movs	r3, #0
    9c36:	4669      	mov	r1, sp
    9c38:	f7fe fa1e 	bl	8078 <mpsl_fem_tx_power_split>
    9c3c:	bd08      	pop	{r3, pc}
    9c3e:	b510      	push	{r4, lr}
    9c40:	f7ff ffea 	bl	9c18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    9c44:	b120      	cbz	r0, 9c50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    9c46:	f7f7 fdd3 	bl	17f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    9c4a:	b108      	cbz	r0, 9c50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    9c4c:	2001      	movs	r0, #1
    9c4e:	bd10      	pop	{r4, pc}
    9c50:	2000      	movs	r0, #0
    9c52:	bd10      	pop	{r4, pc}
    9c54:	6802      	ldr	r2, [r0, #0]
    9c56:	b912      	cbnz	r2, 9c5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    9c58:	6001      	str	r1, [r0, #0]
    9c5a:	4770      	bx	lr
    9c5c:	4602      	mov	r2, r0
    9c5e:	6850      	ldr	r0, [r2, #4]
    9c60:	b108      	cbz	r0, 9c66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x252>
    9c62:	428a      	cmp	r2, r1
    9c64:	d1fa      	bne.n	9c5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x248>
    9c66:	428a      	cmp	r2, r1
    9c68:	d0f7      	beq.n	9c5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
    9c6a:	6051      	str	r1, [r2, #4]
    9c6c:	4770      	bx	lr
    9c6e:	b510      	push	{r4, lr}
    9c70:	4604      	mov	r4, r0
    9c72:	e002      	b.n	9c7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    9c74:	6820      	ldr	r0, [r4, #0]
    9c76:	4780      	blx	r0
    9c78:	6864      	ldr	r4, [r4, #4]
    9c7a:	2c00      	cmp	r4, #0
    9c7c:	d1fa      	bne.n	9c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
    9c7e:	bd10      	pop	{r4, pc}
    9c80:	b510      	push	{r4, lr}
    9c82:	f7f7 fce5 	bl	1650 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    9c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c8a:	f7f9 bbaf 	b.w	33ec <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x24>
    9c8e:	b510      	push	{r4, lr}
    9c90:	f7f8 fdc2 	bl	2818 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    9c94:	b110      	cbz	r0, 9c9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x288>
    9c96:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    9c9a:	e004      	b.n	9ca6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    9c9c:	f7ff fd25 	bl	96ea <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    9ca0:	b120      	cbz	r0, 9cac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x298>
    9ca2:	f240 114f 	movw	r1, #335	; 0x14f
    9ca6:	2001      	movs	r0, #1
    9ca8:	f7f6 fb74 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cac:	f7f9 fadc 	bl	3268 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    9cb0:	f7f7 fcf0 	bl	1694 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    9cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cb8:	f7f9 ba60 	b.w	317c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    9cbc:	000b0001 	.word	0x000b0001
    9cc0:	000a0002 	.word	0x000a0002
    9cc4:	00090005 	.word	0x00090005
    9cc8:	0008000a 	.word	0x0008000a
    9ccc:	00070014 	.word	0x00070014
    9cd0:	0006001e 	.word	0x0006001e
    9cd4:	00050032 	.word	0x00050032
    9cd8:	0004004b 	.word	0x0004004b
    9cdc:	00030064 	.word	0x00030064
    9ce0:	00020096 	.word	0x00020096
    9ce4:	000100fa 	.word	0x000100fa
    9ce8:	000001f4 	.word	0x000001f4

00009cec <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    9cec:	b510      	push	{r4, lr}
    9cee:	f7f9 fdf5 	bl	38dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    9cf2:	f000 f818 	bl	9d26 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    9cf6:	f7f9 fc07 	bl	3508 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    9cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cfe:	f7f9 bc6d 	b.w	35dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00009d02 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    9d02:	b510      	push	{r4, lr}
    9d04:	24c8      	movs	r4, #200	; 0xc8
    9d06:	1e64      	subs	r4, r4, #1
    9d08:	b2e4      	uxtb	r4, r4
    9d0a:	f7f9 fc1b 	bl	3544 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    9d0e:	2802      	cmp	r0, #2
    9d10:	d003      	beq.n	9d1a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    9d12:	2801      	cmp	r0, #1
    9d14:	d000      	beq.n	9d18 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    9d16:	2000      	movs	r0, #0
    9d18:	bd10      	pop	{r4, pc}
    9d1a:	2c00      	cmp	r4, #0
    9d1c:	d1f3      	bne.n	9d06 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    9d1e:	21ed      	movs	r1, #237	; 0xed
    9d20:	203b      	movs	r0, #59	; 0x3b
    9d22:	f7f6 fb37 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009d26 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    9d26:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9d2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9d2e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    9d32:	f3bf 8f4f 	dsb	sy
    9d36:	f3bf 8f6f 	isb	sy
    9d3a:	f7f9 bc83 	b.w	3644 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    9d3e:	2800      	cmp	r0, #0
    9d40:	db09      	blt.n	9d56 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    9d42:	f000 021f 	and.w	r2, r0, #31
    9d46:	2101      	movs	r1, #1
    9d48:	4091      	lsls	r1, r2
    9d4a:	0940      	lsrs	r0, r0, #5
    9d4c:	0080      	lsls	r0, r0, #2
    9d4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d52:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9d56:	4770      	bx	lr
    9d58:	2800      	cmp	r0, #0
    9d5a:	db0d      	blt.n	9d78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    9d5c:	f000 021f 	and.w	r2, r0, #31
    9d60:	2101      	movs	r1, #1
    9d62:	4091      	lsls	r1, r2
    9d64:	0940      	lsrs	r0, r0, #5
    9d66:	0080      	lsls	r0, r0, #2
    9d68:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d6c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9d70:	f3bf 8f4f 	dsb	sy
    9d74:	f3bf 8f6f 	isb	sy
    9d78:	4770      	bx	lr
    9d7a:	5840      	ldr	r0, [r0, r1]
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d000      	beq.n	9d82 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    9d80:	2001      	movs	r0, #1
    9d82:	4770      	bx	lr
    9d84:	5840      	ldr	r0, [r0, r1]
    9d86:	2800      	cmp	r0, #0
    9d88:	d000      	beq.n	9d8c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    9d8a:	2001      	movs	r0, #1
    9d8c:	4770      	bx	lr

00009d8e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    9d8e:	b510      	push	{r4, lr}
    9d90:	4604      	mov	r4, r0
    9d92:	4608      	mov	r0, r1
    9d94:	f7f9 febc 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9d9c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9da0:	fbb0 f0f1 	udiv	r0, r0, r1
    9da4:	1a20      	subs	r0, r4, r0
    9da6:	1e80      	subs	r0, r0, #2
    9da8:	bd10      	pop	{r4, pc}

00009daa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    9daa:	b510      	push	{r4, lr}
    9dac:	4604      	mov	r4, r0
    9dae:	4608      	mov	r0, r1
    9db0:	f7f9 feae 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9db8:	fbb0 f0f1 	udiv	r0, r0, r1
    9dbc:	1a20      	subs	r0, r4, r0
    9dbe:	bd10      	pop	{r4, pc}
    9dc0:	2804      	cmp	r0, #4
    9dc2:	d202      	bcs.n	9dca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    9dc4:	f04f 0028 	mov.w	r0, #40	; 0x28
    9dc8:	4770      	bx	lr
    9dca:	d102      	bne.n	9dd2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    9dcc:	f04f 0010 	mov.w	r0, #16
    9dd0:	4770      	bx	lr
    9dd2:	f04f 0000 	mov.w	r0, #0
    9dd6:	4770      	bx	lr
    9dd8:	2100      	movs	r1, #0
    9dda:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    9dde:	f800 1f24 	strb.w	r1, [r0, #36]!
    9de2:	7041      	strb	r1, [r0, #1]
    9de4:	4770      	bx	lr

00009de6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    9de6:	b570      	push	{r4, r5, r6, lr}
    9de8:	f7fa fbea 	bl	45c0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9dec:	4605      	mov	r5, r0
    9dee:	2400      	movs	r4, #0
    9df0:	e006      	b.n	9e00 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    9df2:	4620      	mov	r0, r4
    9df4:	f7fa fbea 	bl	45cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9df8:	f7ff ffee 	bl	9dd8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9dfc:	1c64      	adds	r4, r4, #1
    9dfe:	b2e4      	uxtb	r4, r4
    9e00:	42ac      	cmp	r4, r5
    9e02:	d3f6      	bcc.n	9df2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    9e04:	bd70      	pop	{r4, r5, r6, pc}

00009e06 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    9e06:	f7fd b813 	b.w	6e30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00009e0a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    9e0a:	b510      	push	{r4, lr}
    9e0c:	2000      	movs	r0, #0
    9e0e:	f7fd fb6b 	bl	74e8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    9e12:	6800      	ldr	r0, [r0, #0]
    9e14:	2800      	cmp	r0, #0
    9e16:	bf18      	it	ne
    9e18:	2001      	movne	r0, #1
    9e1a:	bd10      	pop	{r4, pc}

00009e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    9e1c:	f7fd bb3e 	b.w	749c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00009e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    9e20:	0a41      	lsrs	r1, r0, #9
    9e22:	f643 5209 	movw	r2, #15625	; 0x3d09
    9e26:	4351      	muls	r1, r2
    9e28:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9e2c:	fb10 f002 	smulbb	r0, r0, r2
    9e30:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9e34:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    9e38:	4770      	bx	lr
    9e3a:	2800      	cmp	r0, #0
    9e3c:	db09      	blt.n	9e52 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    9e3e:	f000 021f 	and.w	r2, r0, #31
    9e42:	2101      	movs	r1, #1
    9e44:	4091      	lsls	r1, r2
    9e46:	0940      	lsrs	r0, r0, #5
    9e48:	0080      	lsls	r0, r0, #2
    9e4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e4e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9e52:	4770      	bx	lr
    9e54:	2800      	cmp	r0, #0
    9e56:	db0d      	blt.n	9e74 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    9e58:	f000 021f 	and.w	r2, r0, #31
    9e5c:	2101      	movs	r1, #1
    9e5e:	4091      	lsls	r1, r2
    9e60:	0940      	lsrs	r0, r0, #5
    9e62:	0080      	lsls	r0, r0, #2
    9e64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e68:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9e6c:	f3bf 8f4f 	dsb	sy
    9e70:	f3bf 8f6f 	isb	sy
    9e74:	4770      	bx	lr
    9e76:	5840      	ldr	r0, [r0, r1]
    9e78:	2800      	cmp	r0, #0
    9e7a:	d000      	beq.n	9e7e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    9e7c:	2001      	movs	r0, #1
    9e7e:	4770      	bx	lr
    9e80:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    9e84:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    9e88:	f002 0201 	and.w	r2, r2, #1
    9e8c:	03c0      	lsls	r0, r0, #15
    9e8e:	d503      	bpl.n	9e98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9e90:	428a      	cmp	r2, r1
    9e92:	d101      	bne.n	9e98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9e94:	2001      	movs	r0, #1
    9e96:	4770      	bx	lr
    9e98:	2000      	movs	r0, #0
    9e9a:	4770      	bx	lr

00009e9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    9e9c:	b510      	push	{r4, lr}
    9e9e:	2101      	movs	r1, #1
    9ea0:	0788      	lsls	r0, r1, #30
    9ea2:	f7fd fed5 	bl	7c50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9ea6:	2800      	cmp	r0, #0
    9ea8:	d000      	beq.n	9eac <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    9eaa:	2001      	movs	r0, #1
    9eac:	bd10      	pop	{r4, pc}

00009eae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    9eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9eb2:	2101      	movs	r1, #1
    9eb4:	6001      	str	r1, [r0, #0]
    9eb6:	4770      	bx	lr

00009eb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    9eb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9ebc:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    9ec0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    9ec4:	f002 0203 	and.w	r2, r2, #3
    9ec8:	03c9      	lsls	r1, r1, #15
    9eca:	d503      	bpl.n	9ed4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9ecc:	4282      	cmp	r2, r0
    9ece:	d101      	bne.n	9ed4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9ed0:	2001      	movs	r0, #1
    9ed2:	4770      	bx	lr
    9ed4:	2000      	movs	r0, #0
    9ed6:	4770      	bx	lr

00009ed8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    9ed8:	b510      	push	{r4, lr}
    9eda:	2100      	movs	r1, #0
    9edc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9ee0:	f7fd feb6 	bl	7c50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9ee4:	2800      	cmp	r0, #0
    9ee6:	d000      	beq.n	9eea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    9ee8:	2001      	movs	r0, #1
    9eea:	bd10      	pop	{r4, pc}
    9eec:	2800      	cmp	r0, #0
    9eee:	db09      	blt.n	9f04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    9ef0:	f000 021f 	and.w	r2, r0, #31
    9ef4:	2101      	movs	r1, #1
    9ef6:	4091      	lsls	r1, r2
    9ef8:	0940      	lsrs	r0, r0, #5
    9efa:	0080      	lsls	r0, r0, #2
    9efc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f00:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9f04:	4770      	bx	lr
    9f06:	2800      	cmp	r0, #0
    9f08:	db0d      	blt.n	9f26 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    9f0a:	f000 021f 	and.w	r2, r0, #31
    9f0e:	2101      	movs	r1, #1
    9f10:	4091      	lsls	r1, r2
    9f12:	0940      	lsrs	r0, r0, #5
    9f14:	0080      	lsls	r0, r0, #2
    9f16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f1a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9f1e:	f3bf 8f4f 	dsb	sy
    9f22:	f3bf 8f6f 	isb	sy
    9f26:	4770      	bx	lr
    9f28:	00021000 	.word	0x00021000
    9f2c:	000000fa 	.word	0x000000fa
    9f30:	5faee8ff 	.word	0x5faee8ff
    9f34:	c87c9577 	.word	0xc87c9577
    9f38:	18146227 	.word	0x18146227
    9f3c:	c65deae6 	.word	0xc65deae6
    9f40:	3a723992 	.word	0x3a723992
    9f44:	2800      	cmp	r0, #0
    9f46:	db09      	blt.n	9f5c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    9f48:	f000 021f 	and.w	r2, r0, #31
    9f4c:	2101      	movs	r1, #1
    9f4e:	4091      	lsls	r1, r2
    9f50:	0940      	lsrs	r0, r0, #5
    9f52:	0080      	lsls	r0, r0, #2
    9f54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f58:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9f5c:	4770      	bx	lr

00009f5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    9f5e:	f3ef 8110 	mrs	r1, PRIMASK
    9f62:	b672      	cpsid	i
    9f64:	7802      	ldrb	r2, [r0, #0]
    9f66:	2a01      	cmp	r2, #1
    9f68:	d001      	beq.n	9f6e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    9f6a:	2201      	movs	r2, #1
    9f6c:	e000      	b.n	9f70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    9f6e:	2200      	movs	r2, #0
    9f70:	2301      	movs	r3, #1
    9f72:	7003      	strb	r3, [r0, #0]
    9f74:	b901      	cbnz	r1, 9f78 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    9f76:	b662      	cpsie	i
    9f78:	b10a      	cbz	r2, 9f7e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    9f7a:	2000      	movs	r0, #0
    9f7c:	4770      	bx	lr
    9f7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9f82:	4770      	bx	lr

00009f84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    9f84:	2100      	movs	r1, #0
    9f86:	7001      	strb	r1, [r0, #0]
    9f88:	4608      	mov	r0, r1
    9f8a:	4770      	bx	lr

00009f8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    9f8c:	f3ef 8110 	mrs	r1, PRIMASK
    9f90:	b672      	cpsid	i
    9f92:	2200      	movs	r2, #0
    9f94:	7002      	strb	r2, [r0, #0]
    9f96:	b901      	cbnz	r1, 9f9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    9f98:	b662      	cpsie	i
    9f9a:	2000      	movs	r0, #0
    9f9c:	4770      	bx	lr

00009f9e <mpsl_low_priority_process>:
    9f9e:	f7fd bfab 	b.w	7ef8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00009fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    9fa2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fa6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9faa:	280f      	cmp	r0, #15
    9fac:	d001      	beq.n	9fb2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    9fae:	2000      	movs	r0, #0
    9fb0:	4770      	bx	lr
    9fb2:	2001      	movs	r0, #1
    9fb4:	4770      	bx	lr

00009fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    9fb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fba:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9fbe:	280a      	cmp	r0, #10
    9fc0:	d001      	beq.n	9fc6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    9fc2:	2000      	movs	r0, #0
    9fc4:	4770      	bx	lr
    9fc6:	2001      	movs	r0, #1
    9fc8:	4770      	bx	lr

00009fca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    9fca:	b500      	push	{lr}
    9fcc:	f7ff fff3 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9fd0:	b120      	cbz	r0, 9fdc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    9fd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fd6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9fda:	b108      	cbz	r0, 9fe0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    9fdc:	2000      	movs	r0, #0
    9fde:	bd00      	pop	{pc}
    9fe0:	2001      	movs	r0, #1
    9fe2:	bd00      	pop	{pc}

00009fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    9fe4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fe8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9fec:	280e      	cmp	r0, #14
    9fee:	d001      	beq.n	9ff4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    9ff0:	2000      	movs	r0, #0
    9ff2:	4770      	bx	lr
    9ff4:	2001      	movs	r0, #1
    9ff6:	4770      	bx	lr

00009ff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    9ff8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ffc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a000:	2810      	cmp	r0, #16
    a002:	d001      	beq.n	a008 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    a004:	2000      	movs	r0, #0
    a006:	4770      	bx	lr
    a008:	2001      	movs	r0, #1
    a00a:	4770      	bx	lr

0000a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    a00c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a010:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a014:	2806      	cmp	r0, #6
    a016:	d003      	beq.n	a020 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a018:	1c40      	adds	r0, r0, #1
    a01a:	d001      	beq.n	a020 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a01c:	2000      	movs	r0, #0
    a01e:	4770      	bx	lr
    a020:	2001      	movs	r0, #1
    a022:	4770      	bx	lr

0000a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    a024:	b500      	push	{lr}
    a026:	f7ff fff1 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a02a:	b148      	cbz	r0, a040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a02c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a030:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a034:	2806      	cmp	r0, #6
    a036:	d303      	bcc.n	a040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a038:	1c40      	adds	r0, r0, #1
    a03a:	d001      	beq.n	a040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a03c:	2001      	movs	r0, #1
    a03e:	bd00      	pop	{pc}
    a040:	2000      	movs	r0, #0
    a042:	bd00      	pop	{pc}

0000a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    a044:	b500      	push	{lr}
    a046:	f7ff ffe1 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a04a:	b138      	cbz	r0, a05c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    a04c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a050:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a054:	2806      	cmp	r0, #6
    a056:	d303      	bcc.n	a060 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a058:	1c40      	adds	r0, r0, #1
    a05a:	d001      	beq.n	a060 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a05c:	2000      	movs	r0, #0
    a05e:	bd00      	pop	{pc}
    a060:	2001      	movs	r0, #1
    a062:	bd00      	pop	{pc}

0000a064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    a064:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a068:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a06c:	280d      	cmp	r0, #13
    a06e:	d001      	beq.n	a074 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    a070:	2000      	movs	r0, #0
    a072:	4770      	bx	lr
    a074:	2001      	movs	r0, #1
    a076:	4770      	bx	lr

0000a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    a078:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a07c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a080:	2808      	cmp	r0, #8
    a082:	d001      	beq.n	a088 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    a084:	2000      	movs	r0, #0
    a086:	4770      	bx	lr
    a088:	2001      	movs	r0, #1
    a08a:	4770      	bx	lr

0000a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    a08c:	f7fd bf6e 	b.w	7f6c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a090 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    a090:	f7fd bf6c 	b.w	7f6c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a094 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a098:	428a      	cmp	r2, r1
    a09a:	d803      	bhi.n	a0a4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    a09c:	2179      	movs	r1, #121	; 0x79
    a09e:	2096      	movs	r0, #150	; 0x96
    a0a0:	f7fd fe2c 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0a4:	fab2 f382 	clz	r3, r2
    a0a8:	b143      	cbz	r3, a0bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    a0aa:	4099      	lsls	r1, r3
    a0ac:	f1c3 0c20 	rsb	ip, r3, #32
    a0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
    a0b4:	4098      	lsls	r0, r3
    a0b6:	ea41 010c 	orr.w	r1, r1, ip
    a0ba:	409a      	lsls	r2, r3
    a0bc:	0c13      	lsrs	r3, r2, #16
    a0be:	fbb1 f5f3 	udiv	r5, r1, r3
    a0c2:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    a0c6:	b287      	uxth	r7, r0
    a0c8:	fbb1 f0f3 	udiv	r0, r1, r3
    a0cc:	fb03 1615 	mls	r6, r3, r5, r1
    a0d0:	b294      	uxth	r4, r2
    a0d2:	fb00 f504 	mul.w	r5, r0, r4
    a0d6:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    a0da:	42b5      	cmp	r5, r6
    a0dc:	d905      	bls.n	a0ea <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    a0de:	1bad      	subs	r5, r5, r6
    a0e0:	4295      	cmp	r5, r2
    a0e2:	bf94      	ite	ls
    a0e4:	2501      	movls	r5, #1
    a0e6:	2502      	movhi	r5, #2
    a0e8:	1b40      	subs	r0, r0, r5
    a0ea:	0409      	lsls	r1, r1, #16
    a0ec:	0405      	lsls	r5, r0, #16
    a0ee:	eb11 010c 	adds.w	r1, r1, ip
    a0f2:	fba0 0c02 	umull	r0, ip, r0, r2
    a0f6:	1a09      	subs	r1, r1, r0
    a0f8:	fbb1 f0f3 	udiv	r0, r1, r3
    a0fc:	fbb1 fcf3 	udiv	ip, r1, r3
    a100:	fb03 131c 	mls	r3, r3, ip, r1
    a104:	fb00 f104 	mul.w	r1, r0, r4
    a108:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    a10c:	4299      	cmp	r1, r3
    a10e:	d905      	bls.n	a11c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    a110:	1ac9      	subs	r1, r1, r3
    a112:	4291      	cmp	r1, r2
    a114:	bf94      	ite	ls
    a116:	2101      	movls	r1, #1
    a118:	2102      	movhi	r1, #2
    a11a:	1a40      	subs	r0, r0, r1
    a11c:	4328      	orrs	r0, r5
    a11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a122 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a126:	461e      	mov	r6, r3
    a128:	4615      	mov	r5, r2
    a12a:	4604      	mov	r4, r0
    a12c:	9f06      	ldr	r7, [sp, #24]
    a12e:	f7ff ffb1 	bl	a094 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    a132:	6030      	str	r0, [r6, #0]
    a134:	fba0 0105 	umull	r0, r1, r0, r5
    a138:	1a20      	subs	r0, r4, r0
    a13a:	6038      	str	r0, [r7, #0]
    a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    a140:	b4f0      	push	{r4, r5, r6, r7}
    a142:	ea80 0c01 	eor.w	ip, r0, r1
    a146:	4603      	mov	r3, r0
    a148:	f01c 0f03 	tst.w	ip, #3
    a14c:	d13c      	bne.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a14e:	f013 0f03 	tst.w	r3, #3
    a152:	d00b      	beq.n	a16c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a154:	2a00      	cmp	r2, #0
    a156:	bf04      	itt	eq
    a158:	bcf0      	popeq	{r4, r5, r6, r7}
    a15a:	4770      	bxeq	lr
    a15c:	f811 cb01 	ldrb.w	ip, [r1], #1
    a160:	f803 cb01 	strb.w	ip, [r3], #1
    a164:	1e52      	subs	r2, r2, #1
    a166:	f013 0f03 	tst.w	r3, #3
    a16a:	d1f3      	bne.n	a154 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a16c:	2a03      	cmp	r2, #3
    a16e:	d94f      	bls.n	a210 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a174:	d24c      	bcs.n	a210 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a176:	f1c2 0c00 	rsb	ip, r2, #0
    a17a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a17e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a182:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a186:	f1cc 0c00 	rsb	ip, ip, #0
    a18a:	f1bc 0f00 	cmp.w	ip, #0
    a18e:	dd1b      	ble.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a190:	1f0d      	subs	r5, r1, #4
    a192:	1f1c      	subs	r4, r3, #4
    a194:	f01c 0f01 	tst.w	ip, #1
    a198:	d003      	beq.n	a1a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a19a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a19e:	f844 6f04 	str.w	r6, [r4, #4]!
    a1a2:	ea5f 066c 	movs.w	r6, ip, asr #1
    a1a6:	d007      	beq.n	a1b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a1a8:	686f      	ldr	r7, [r5, #4]
    a1aa:	6067      	str	r7, [r4, #4]
    a1ac:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a1b0:	f844 7f08 	str.w	r7, [r4, #8]!
    a1b4:	1e76      	subs	r6, r6, #1
    a1b6:	d1f7      	bne.n	a1a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a1b8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a1bc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a1c0:	f1cc 0c00 	rsb	ip, ip, #0
    a1c4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a1c8:	2a00      	cmp	r2, #0
    a1ca:	bf04      	itt	eq
    a1cc:	bcf0      	popeq	{r4, r5, r6, r7}
    a1ce:	4770      	bxeq	lr
    a1d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a1d4:	d226      	bcs.n	a224 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a1d6:	2a00      	cmp	r2, #0
    a1d8:	bfdc      	itt	le
    a1da:	bcf0      	pople	{r4, r5, r6, r7}
    a1dc:	4770      	bxle	lr
    a1de:	1e49      	subs	r1, r1, #1
    a1e0:	1e5b      	subs	r3, r3, #1
    a1e2:	f012 0f01 	tst.w	r2, #1
    a1e6:	d003      	beq.n	a1f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a1e8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a1ec:	f803 cf01 	strb.w	ip, [r3, #1]!
    a1f0:	1052      	asrs	r2, r2, #1
    a1f2:	bf04      	itt	eq
    a1f4:	bcf0      	popeq	{r4, r5, r6, r7}
    a1f6:	4770      	bxeq	lr
    a1f8:	f891 c001 	ldrb.w	ip, [r1, #1]
    a1fc:	f883 c001 	strb.w	ip, [r3, #1]
    a200:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a204:	f803 cf02 	strb.w	ip, [r3, #2]!
    a208:	1e52      	subs	r2, r2, #1
    a20a:	d1f5      	bne.n	a1f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a20c:	bcf0      	pop	{r4, r5, r6, r7}
    a20e:	4770      	bx	lr
    a210:	2a04      	cmp	r2, #4
    a212:	d3d9      	bcc.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a214:	f851 cb04 	ldr.w	ip, [r1], #4
    a218:	1f12      	subs	r2, r2, #4
    a21a:	f843 cb04 	str.w	ip, [r3], #4
    a21e:	2a04      	cmp	r2, #4
    a220:	d2f8      	bcs.n	a214 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    a222:	e7d1      	b.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a224:	f811 cb01 	ldrb.w	ip, [r1], #1
    a228:	f803 cb01 	strb.w	ip, [r3], #1
    a22c:	1e52      	subs	r2, r2, #1
    a22e:	d1f9      	bne.n	a224 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a230:	bcf0      	pop	{r4, r5, r6, r7}
    a232:	4770      	bx	lr

0000a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    a234:	b470      	push	{r4, r5, r6}
    a236:	4603      	mov	r3, r0
    a238:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    a23c:	f010 0f03 	tst.w	r0, #3
    a240:	d009      	beq.n	a256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    a242:	2a00      	cmp	r2, #0
    a244:	bf04      	itt	eq
    a246:	bc70      	popeq	{r4, r5, r6}
    a248:	4770      	bxeq	lr
    a24a:	f803 cb01 	strb.w	ip, [r3], #1
    a24e:	1e52      	subs	r2, r2, #1
    a250:	f013 0f03 	tst.w	r3, #3
    a254:	d1f5      	bne.n	a242 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    a256:	b2c9      	uxtb	r1, r1
    a258:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a25c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    a260:	2a03      	cmp	r2, #3
    a262:	d939      	bls.n	a2d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a264:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a268:	d236      	bcs.n	a2d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a26a:	4251      	negs	r1, r2
    a26c:	17cc      	asrs	r4, r1, #31
    a26e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    a272:	1089      	asrs	r1, r1, #2
    a274:	424e      	negs	r6, r1
    a276:	2e00      	cmp	r6, #0
    a278:	dd11      	ble.n	a29e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a27a:	1f19      	subs	r1, r3, #4
    a27c:	f016 0f01 	tst.w	r6, #1
    a280:	bf18      	it	ne
    a282:	f841 5f04 	strne.w	r5, [r1, #4]!
    a286:	1074      	asrs	r4, r6, #1
    a288:	d004      	beq.n	a294 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    a28a:	604d      	str	r5, [r1, #4]
    a28c:	f841 5f08 	str.w	r5, [r1, #8]!
    a290:	1e64      	subs	r4, r4, #1
    a292:	d1fa      	bne.n	a28a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    a294:	4271      	negs	r1, r6
    a296:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    a29a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a29e:	2a00      	cmp	r2, #0
    a2a0:	bf04      	itt	eq
    a2a2:	bc70      	popeq	{r4, r5, r6}
    a2a4:	4770      	bxeq	lr
    a2a6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a2aa:	d21d      	bcs.n	a2e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a2ac:	2a00      	cmp	r2, #0
    a2ae:	bfdc      	itt	le
    a2b0:	bc70      	pople	{r4, r5, r6}
    a2b2:	4770      	bxle	lr
    a2b4:	1e59      	subs	r1, r3, #1
    a2b6:	f012 0f01 	tst.w	r2, #1
    a2ba:	bf18      	it	ne
    a2bc:	f801 cf01 	strbne.w	ip, [r1, #1]!
    a2c0:	1052      	asrs	r2, r2, #1
    a2c2:	bf04      	itt	eq
    a2c4:	bc70      	popeq	{r4, r5, r6}
    a2c6:	4770      	bxeq	lr
    a2c8:	f881 c001 	strb.w	ip, [r1, #1]
    a2cc:	f801 cf02 	strb.w	ip, [r1, #2]!
    a2d0:	1e52      	subs	r2, r2, #1
    a2d2:	d1f9      	bne.n	a2c8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    a2d4:	bc70      	pop	{r4, r5, r6}
    a2d6:	4770      	bx	lr
    a2d8:	2a04      	cmp	r2, #4
    a2da:	d3e0      	bcc.n	a29e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a2dc:	1f12      	subs	r2, r2, #4
    a2de:	f843 5b04 	str.w	r5, [r3], #4
    a2e2:	2a04      	cmp	r2, #4
    a2e4:	d2fa      	bcs.n	a2dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    a2e6:	e7da      	b.n	a29e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a2e8:	f803 cb01 	strb.w	ip, [r3], #1
    a2ec:	1e52      	subs	r2, r2, #1
    a2ee:	d1fb      	bne.n	a2e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a2f0:	bc70      	pop	{r4, r5, r6}
    a2f2:	4770      	bx	lr
    a2f4:	f04f 30ff 	mov.w	r0, #4294967295
    a2f8:	4770      	bx	lr
    a2fa:	2000      	movs	r0, #0
    a2fc:	4770      	bx	lr
    a2fe:	2000      	movs	r0, #0
    a300:	4770      	bx	lr
    a302:	f04f 30ff 	mov.w	r0, #4294967295
    a306:	4770      	bx	lr
    a308:	4770      	bx	lr
    a30a:	4770      	bx	lr
    a30c:	2000      	movs	r0, #0
    a30e:	4770      	bx	lr
    a310:	2100      	movs	r1, #0
    a312:	7001      	strb	r1, [r0, #0]
    a314:	4770      	bx	lr
    a316:	f04f 30ff 	mov.w	r0, #4294967295
    a31a:	4770      	bx	lr
    a31c:	f04f 30ff 	mov.w	r0, #4294967295
    a320:	4770      	bx	lr
    a322:	2100      	movs	r1, #0
    a324:	7001      	strb	r1, [r0, #0]
    a326:	4770      	bx	lr
    a328:	f04f 30ff 	mov.w	r0, #4294967295
    a32c:	4770      	bx	lr
    a32e:	f04f 30ff 	mov.w	r0, #4294967295
    a332:	4770      	bx	lr
    a334:	7800      	ldrb	r0, [r0, #0]
    a336:	2800      	cmp	r0, #0
    a338:	d001      	beq.n	a33e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    a33a:	f06f 0015 	mvn.w	r0, #21
    a33e:	4770      	bx	lr
    a340:	2000      	movs	r0, #0
    a342:	4770      	bx	lr
    a344:	2200      	movs	r2, #0
    a346:	f000 b802 	b.w	a34e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000a34a <mpsl_fem_init>:
    a34a:	f7fa b8a7 	b.w	449c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000a34e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    a34e:	b570      	push	{r4, r5, r6, lr}
    a350:	4614      	mov	r4, r2
    a352:	460d      	mov	r5, r1
    a354:	1b00      	subs	r0, r0, r4
    a356:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a35a:	4288      	cmp	r0, r1
    a35c:	da01      	bge.n	a362 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    a35e:	4608      	mov	r0, r1
    a360:	e002      	b.n	a368 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a362:	287f      	cmp	r0, #127	; 0x7f
    a364:	dd00      	ble.n	a368 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a366:	207f      	movs	r0, #127	; 0x7f
    a368:	4619      	mov	r1, r3
    a36a:	b240      	sxtb	r0, r0
    a36c:	f7fa f8ca 	bl	4504 <mpsl_tx_power_radio_supported_power_adjust>
    a370:	7028      	strb	r0, [r5, #0]
    a372:	706c      	strb	r4, [r5, #1]
    a374:	2100      	movs	r1, #0
    a376:	4420      	add	r0, r4
    a378:	70a9      	strb	r1, [r5, #2]
    a37a:	b240      	sxtb	r0, r0
    a37c:	bd70      	pop	{r4, r5, r6, pc}
    a37e:	2625      	.short	0x2625
    a380:	27          	.byte	0x27
    a381:	01          	.byte	0x01
    a382:	0103      	.short	0x0103
    a384:	01          	.byte	0x01
    a385:	01          	.byte	0x01
    a386:	ecd8      	.short	0xecd8
    a388:	fcf8f4f0 	.word	0xfcf8f4f0
    a38c:	04030200 	.word	0x04030200
    a390:	08070605 	.word	0x08070605
	...
    a3a8:	01010101 	.word	0x01010101
    a3ac:	02020202 	.word	0x02020202
    a3b0:	03030303 	.word	0x03030303
    a3b4:	04040404 	.word	0x04040404
    a3b8:	05050505 	.word	0x05050505
    a3bc:	08070606 	.word	0x08070606
    a3c0:	0c0b0a09 	.word	0x0c0b0a09
    a3c4:	0000000d 	.word	0x0000000d
	...
    a3d8:	01010100 	.word	0x01010100
    a3dc:	02020201 	.word	0x02020201
    a3e0:	03030302 	.word	0x03030302
    a3e4:	04040403 	.word	0x04040403
    a3e8:	05050504 	.word	0x05050504
    a3ec:	06060605 	.word	0x06060605
    a3f0:	00000908 	.word	0x00000908

0000a3f4 <read>:
	printk("Exiting %s thread.\n", __func__);
	return 0;
}

static int read(uint8_t devaddr, uint8_t regaddr, uint8_t *regval)
{
    a3f4:	b530      	push	{r4, r5, lr}
    a3f6:	b085      	sub	sp, #20
    a3f8:	4604      	mov	r4, r0
    a3fa:	4615      	mov	r5, r2
    a3fc:	f88d 100f 	strb.w	r1, [sp, #15]
    int ret;

    if (!device_is_ready(dev)) {
    a400:	4b0f      	ldr	r3, [pc, #60]	; (a440 <read+0x4c>)
    a402:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    a404:	f00e fea3 	bl	1914e <z_device_is_ready>
    a408:	b178      	cbz	r0, a42a <read+0x36>
        // LOG_ERR("Device not ready");
        printk("Device not ready\n");
        return -ENODEV;
    }

    ret = i2c_write_read(dev, devaddr, &regaddr, 1, regval, 2);
    a40a:	2302      	movs	r3, #2
    a40c:	9301      	str	r3, [sp, #4]
    a40e:	9500      	str	r5, [sp, #0]
    a410:	2301      	movs	r3, #1
    a412:	f10d 020f 	add.w	r2, sp, #15
    a416:	4621      	mov	r1, r4
    a418:	4809      	ldr	r0, [pc, #36]	; (a440 <read+0x4c>)
    a41a:	6800      	ldr	r0, [r0, #0]
    a41c:	f00b fcb6 	bl	15d8c <i2c_write_read>
    if (ret) {
    a420:	4604      	mov	r4, r0
    a422:	b940      	cbnz	r0, a436 <read+0x42>
		printk("Call `i2c_write_read` failed: %d\n", ret);
        return ret;
    }

    return 0;
}
    a424:	4620      	mov	r0, r4
    a426:	b005      	add	sp, #20
    a428:	bd30      	pop	{r4, r5, pc}
        printk("Device not ready\n");
    a42a:	4806      	ldr	r0, [pc, #24]	; (a444 <read+0x50>)
    a42c:	f00b fd89 	bl	15f42 <printk>
        return -ENODEV;
    a430:	f06f 0412 	mvn.w	r4, #18
    a434:	e7f6      	b.n	a424 <read+0x30>
		printk("Call `i2c_write_read` failed: %d\n", ret);
    a436:	4601      	mov	r1, r0
    a438:	4803      	ldr	r0, [pc, #12]	; (a448 <read+0x54>)
    a43a:	f00b fd82 	bl	15f42 <printk>
        return ret;
    a43e:	e7f1      	b.n	a424 <read+0x30>
    a440:	200002c8 	.word	0x200002c8
    a444:	0001a228 	.word	0x0001a228
    a448:	0001a23c 	.word	0x0001a23c

0000a44c <main>:
{
    a44c:	b510      	push	{r4, lr}
    a44e:	b084      	sub	sp, #16
	gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);		// 
    a450:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    a454:	4816      	ldr	r0, [pc, #88]	; (a4b0 <main+0x64>)
    a456:	f00b fc67 	bl	15d28 <gpio_pin_configure_dt>
	printk("Start");
    a45a:	4816      	ldr	r0, [pc, #88]	; (a4b4 <main+0x68>)
    a45c:	f00b fd71 	bl	15f42 <printk>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    a460:	2201      	movs	r2, #1
    a462:	2111      	movs	r1, #17
    a464:	4814      	ldr	r0, [pc, #80]	; (a4b8 <main+0x6c>)
    a466:	f00b fc7a 	bl	15d5e <gpio_pin_set>
	err = bt_enable(NULL);
    a46a:	2000      	movs	r0, #0
    a46c:	f005 fece 	bl	1020c <bt_enable>
	if (err) {
    a470:	b9b8      	cbnz	r0, a4a2 <main+0x56>
	gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);
    a472:	4c0f      	ldr	r4, [pc, #60]	; (a4b0 <main+0x64>)
    a474:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    a478:	4620      	mov	r0, r4
    a47a:	f00b fc55 	bl	15d28 <gpio_pin_configure_dt>
	gpio_pin_toggle_dt(&led);
    a47e:	4620      	mov	r0, r4
    a480:	f00b fc7a 	bl	15d78 <gpio_pin_toggle_dt>
	(void)observer_start();
    a484:	f000 f8e8 	bl	a658 <observer_start>
		gpio_pin_toggle_dt(&led);
    a488:	4809      	ldr	r0, [pc, #36]	; (a4b0 <main+0x64>)
    a48a:	f00b fc75 	bl	15d78 <gpio_pin_toggle_dt>
		k_msleep(1000);
    a48e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a492:	f00b fc91 	bl	15db8 <k_msleep>
		read(0x48, 0x01, buf);
    a496:	aa01      	add	r2, sp, #4
    a498:	2101      	movs	r1, #1
    a49a:	2048      	movs	r0, #72	; 0x48
    a49c:	f7ff ffaa 	bl	a3f4 <read>
	while (1)
    a4a0:	e7f2      	b.n	a488 <main+0x3c>
    a4a2:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    a4a4:	4805      	ldr	r0, [pc, #20]	; (a4bc <main+0x70>)
    a4a6:	f00b fd4c 	bl	15f42 <printk>
}
    a4aa:	2000      	movs	r0, #0
    a4ac:	b004      	add	sp, #16
    a4ae:	bd10      	pop	{r4, pc}
    a4b0:	0001a288 	.word	0x0001a288
    a4b4:	0001a260 	.word	0x0001a260
    a4b8:	00019ec8 	.word	0x00019ec8
    a4bc:	0001a268 	.word	0x0001a268

0000a4c0 <extract_data>:
uint16_t input_voltage_mv;
uint16_t supply_voltage_mv;
uint16_t buck_current_ma;

static void extract_data(uint8_t *buffer, uint8_t len){
	input_voltage_mv = *(buffer + 17) << 8 | *(buffer + 18);
    a4c0:	7c42      	ldrb	r2, [r0, #17]
    a4c2:	7c83      	ldrb	r3, [r0, #18]
    a4c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a4c8:	4a07      	ldr	r2, [pc, #28]	; (a4e8 <extract_data+0x28>)
    a4ca:	8013      	strh	r3, [r2, #0]
	supply_voltage_mv = *(buffer + 19) << 8 | *(buffer + 20);
    a4cc:	7cc2      	ldrb	r2, [r0, #19]
    a4ce:	7d03      	ldrb	r3, [r0, #20]
    a4d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a4d4:	4a05      	ldr	r2, [pc, #20]	; (a4ec <extract_data+0x2c>)
    a4d6:	8013      	strh	r3, [r2, #0]
	buck_current_ma = *(buffer + 21) << 8 | *(buffer + 22);
    a4d8:	7d42      	ldrb	r2, [r0, #21]
    a4da:	7d83      	ldrb	r3, [r0, #22]
    a4dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a4e0:	4a03      	ldr	r2, [pc, #12]	; (a4f0 <extract_data+0x30>)
    a4e2:	8013      	strh	r3, [r2, #0]
}
    a4e4:	4770      	bx	lr
    a4e6:	bf00      	nop
    a4e8:	200026d4 	.word	0x200026d4
    a4ec:	200026d2 	.word	0x200026d2
    a4f0:	200026d0 	.word	0x200026d0

0000a4f4 <print_buffer>:

static void print_buffer(uint8_t *buffer, uint8_t len){
    a4f4:	b570      	push	{r4, r5, r6, lr}
    a4f6:	4606      	mov	r6, r0
    a4f8:	460d      	mov	r5, r1
	// Print full message
	for (size_t i = 0; i < len; i++) {
    a4fa:	2400      	movs	r4, #0
    a4fc:	e004      	b.n	a508 <print_buffer+0x14>
        printk("%02X ", *(buffer + i));
    a4fe:	5d31      	ldrb	r1, [r6, r4]
    a500:	4804      	ldr	r0, [pc, #16]	; (a514 <print_buffer+0x20>)
    a502:	f00b fd1e 	bl	15f42 <printk>
	for (size_t i = 0; i < len; i++) {
    a506:	3401      	adds	r4, #1
    a508:	42a5      	cmp	r5, r4
    a50a:	d8f8      	bhi.n	a4fe <print_buffer+0xa>
    }
	printk("\n");	
    a50c:	4802      	ldr	r0, [pc, #8]	; (a518 <print_buffer+0x24>)
    a50e:	f00b fd18 	bl	15f42 <printk>
}
    a512:	bd70      	pop	{r4, r5, r6, pc}
    a514:	0001a290 	.word	0x0001a290
    a518:	0001bccc 	.word	0x0001bccc

0000a51c <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
    a51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a51e:	b08b      	sub	sp, #44	; 0x2c
    a520:	4604      	mov	r4, r0
    a522:	460d      	mov	r5, r1
    a524:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
    a526:	7803      	ldrb	r3, [r0, #0]
    a528:	2b03      	cmp	r3, #3
    a52a:	d82c      	bhi.n	a586 <bt_addr_le_to_str+0x6a>
    a52c:	e8df f003 	tbb	[pc, r3]
    a530:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    a534:	4917      	ldr	r1, [pc, #92]	; (a594 <bt_addr_le_to_str+0x78>)
    a536:	a807      	add	r0, sp, #28
    a538:	f00d f81e 	bl	17578 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    a53c:	7963      	ldrb	r3, [r4, #5]
    a53e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    a540:	78e1      	ldrb	r1, [r4, #3]
    a542:	78a0      	ldrb	r0, [r4, #2]
    a544:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a546:	f10d 0c1c 	add.w	ip, sp, #28
    a54a:	f8cd c014 	str.w	ip, [sp, #20]
    a54e:	9704      	str	r7, [sp, #16]
    a550:	9003      	str	r0, [sp, #12]
    a552:	9102      	str	r1, [sp, #8]
    a554:	9201      	str	r2, [sp, #4]
    a556:	9300      	str	r3, [sp, #0]
    a558:	79a3      	ldrb	r3, [r4, #6]
    a55a:	4a0f      	ldr	r2, [pc, #60]	; (a598 <bt_addr_le_to_str+0x7c>)
    a55c:	4631      	mov	r1, r6
    a55e:	4628      	mov	r0, r5
    a560:	f00b fcfd 	bl	15f5e <snprintk>
}
    a564:	b00b      	add	sp, #44	; 0x2c
    a566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    a568:	490c      	ldr	r1, [pc, #48]	; (a59c <bt_addr_le_to_str+0x80>)
    a56a:	a807      	add	r0, sp, #28
    a56c:	f00d f804 	bl	17578 <strcpy>
		break;
    a570:	e7e4      	b.n	a53c <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
    a572:	490b      	ldr	r1, [pc, #44]	; (a5a0 <bt_addr_le_to_str+0x84>)
    a574:	a807      	add	r0, sp, #28
    a576:	f00c ffff 	bl	17578 <strcpy>
		break;
    a57a:	e7df      	b.n	a53c <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
    a57c:	4909      	ldr	r1, [pc, #36]	; (a5a4 <bt_addr_le_to_str+0x88>)
    a57e:	a807      	add	r0, sp, #28
    a580:	f00c fffa 	bl	17578 <strcpy>
		break;
    a584:	e7da      	b.n	a53c <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a586:	4a08      	ldr	r2, [pc, #32]	; (a5a8 <bt_addr_le_to_str+0x8c>)
    a588:	210a      	movs	r1, #10
    a58a:	a807      	add	r0, sp, #28
    a58c:	f00b fce7 	bl	15f5e <snprintk>
		break;
    a590:	e7d4      	b.n	a53c <bt_addr_le_to_str+0x20>
    a592:	bf00      	nop
    a594:	0001a298 	.word	0x0001a298
    a598:	0001a2c8 	.word	0x0001a2c8
    a59c:	0001a2a0 	.word	0x0001a2a0
    a5a0:	0001a2a8 	.word	0x0001a2a8
    a5a4:	0001a2b4 	.word	0x0001a2b4
    a5a8:	0001a2c0 	.word	0x0001a2c0

0000a5ac <device_found>:

static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{
    a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5b0:	b092      	sub	sp, #72	; 0x48
    a5b2:	4680      	mov	r8, r0
    a5b4:	460e      	mov	r6, r1
    a5b6:	4617      	mov	r7, r2
    a5b8:	461c      	mov	r4, r3
	char addr_str[BT_ADDR_LE_STR_LEN];

	// Desired - buffer name rx adv
	char ds_name_buffer [] = RX_DEVICE_NAME;
    a5ba:	4d1f      	ldr	r5, [pc, #124]	; (a638 <device_found+0x8c>)
    a5bc:	f10d 0c0c 	add.w	ip, sp, #12
    a5c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a5c4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    a5c8:	f88c 3000 	strb.w	r3, [ip]
	uint8_t buffer_cmp_len = sizeof(ds_name_buffer) - 1;

	// Scanned - buffer name rx adv
	char sc_name_buffer [buffer_cmp_len];
	memcpy(sc_name_buffer, ad->data + 2, buffer_cmp_len);
    a5cc:	6821      	ldr	r1, [r4, #0]
    a5ce:	220c      	movs	r2, #12
    a5d0:	3102      	adds	r1, #2
    a5d2:	a80f      	add	r0, sp, #60	; 0x3c
    a5d4:	f00d f819 	bl	1760a <memcpy>
	// Print buffers to check similarity
	// print_buffer(ds_name_buffer, buffer_cmp_len);
	// print_buffer(sc_name_buffer, buffer_cmp_len);

	// Compare both buffer
	int result = memcmp(ds_name_buffer, sc_name_buffer, buffer_cmp_len);
    a5d8:	220c      	movs	r2, #12
    a5da:	a90f      	add	r1, sp, #60	; 0x3c
    a5dc:	eb0d 0002 	add.w	r0, sp, r2
    a5e0:	f00d f801 	bl	175e6 <memcmp>

	if(result == 0){
    a5e4:	b110      	cbz	r0, a5ec <device_found+0x40>

		printk("input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
		printk("supply_voltage_mv: %"PRId32" mV\n", supply_voltage_mv);
		printk("buck_current_ma: %"PRId32" mA\n", buck_current_ma);
	}
}
    a5e6:	b012      	add	sp, #72	; 0x48
    a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    a5ec:	221e      	movs	r2, #30
    a5ee:	a907      	add	r1, sp, #28
    a5f0:	4640      	mov	r0, r8
    a5f2:	f7ff ff93 	bl	a51c <bt_addr_le_to_str>
			addr_str, rssi, type, ad->len);
    a5f6:	88a3      	ldrh	r3, [r4, #4]
		printk("Device found: %s (RSSI %d), type %u, AD data len %u\n",
    a5f8:	9300      	str	r3, [sp, #0]
    a5fa:	463b      	mov	r3, r7
    a5fc:	4632      	mov	r2, r6
    a5fe:	a907      	add	r1, sp, #28
    a600:	480e      	ldr	r0, [pc, #56]	; (a63c <device_found+0x90>)
    a602:	f00b fc9e 	bl	15f42 <printk>
		print_buffer(ad->data, ad->len);
    a606:	7921      	ldrb	r1, [r4, #4]
    a608:	6820      	ldr	r0, [r4, #0]
    a60a:	f7ff ff73 	bl	a4f4 <print_buffer>
		extract_data(ad->data, ad->len);
    a60e:	7921      	ldrb	r1, [r4, #4]
    a610:	6820      	ldr	r0, [r4, #0]
    a612:	f7ff ff55 	bl	a4c0 <extract_data>
		printk("input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
    a616:	4b0a      	ldr	r3, [pc, #40]	; (a640 <device_found+0x94>)
    a618:	8819      	ldrh	r1, [r3, #0]
    a61a:	480a      	ldr	r0, [pc, #40]	; (a644 <device_found+0x98>)
    a61c:	f00b fc91 	bl	15f42 <printk>
		printk("supply_voltage_mv: %"PRId32" mV\n", supply_voltage_mv);
    a620:	4b09      	ldr	r3, [pc, #36]	; (a648 <device_found+0x9c>)
    a622:	8819      	ldrh	r1, [r3, #0]
    a624:	4809      	ldr	r0, [pc, #36]	; (a64c <device_found+0xa0>)
    a626:	f00b fc8c 	bl	15f42 <printk>
		printk("buck_current_ma: %"PRId32" mA\n", buck_current_ma);
    a62a:	4b09      	ldr	r3, [pc, #36]	; (a650 <device_found+0xa4>)
    a62c:	8819      	ldrh	r1, [r3, #0]
    a62e:	4809      	ldr	r0, [pc, #36]	; (a654 <device_found+0xa8>)
    a630:	f00b fc87 	bl	15f42 <printk>
}
    a634:	e7d7      	b.n	a5e6 <device_found+0x3a>
    a636:	bf00      	nop
    a638:	0001a374 	.word	0x0001a374
    a63c:	0001a2ec 	.word	0x0001a2ec
    a640:	200026d4 	.word	0x200026d4
    a644:	0001a324 	.word	0x0001a324
    a648:	200026d2 	.word	0x200026d2
    a64c:	0001a340 	.word	0x0001a340
    a650:	200026d0 	.word	0x200026d0
    a654:	0001a35c 	.word	0x0001a35c

0000a658 <observer_start>:


int observer_start(void)
{
    a658:	b510      	push	{r4, lr}
    a65a:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    a65c:	2300      	movs	r3, #0
    a65e:	9301      	str	r3, [sp, #4]
    a660:	9302      	str	r3, [sp, #8]
    a662:	9303      	str	r3, [sp, #12]
    a664:	9304      	str	r3, [sp, #16]
    a666:	9305      	str	r3, [sp, #20]
    a668:	2301      	movs	r3, #1
    a66a:	9302      	str	r3, [sp, #8]
    a66c:	2360      	movs	r3, #96	; 0x60
    a66e:	f8ad 300c 	strh.w	r3, [sp, #12]
    a672:	2330      	movs	r3, #48	; 0x30
    a674:	f8ad 300e 	strh.w	r3, [sp, #14]
	};
	int err;


	// while(1){
	err = bt_le_scan_start(&scan_param, device_found);
    a678:	4908      	ldr	r1, [pc, #32]	; (a69c <observer_start+0x44>)
    a67a:	a801      	add	r0, sp, #4
    a67c:	f006 fccc 	bl	11018 <bt_le_scan_start>
	if (err) {
    a680:	4604      	mov	r4, r0
    a682:	b928      	cbnz	r0, a690 <observer_start+0x38>
		printk("Start scanning failed (err %d)\n", err);
		return err;
	}
	printk("Started scanning...\n");
    a684:	4806      	ldr	r0, [pc, #24]	; (a6a0 <observer_start+0x48>)
    a686:	f00b fc5c 	bl	15f42 <printk>

	// 	k_msleep(1000);
	// }

	return 0;
    a68a:	4620      	mov	r0, r4
    a68c:	b006      	add	sp, #24
    a68e:	bd10      	pop	{r4, pc}
		printk("Start scanning failed (err %d)\n", err);
    a690:	4601      	mov	r1, r0
    a692:	4804      	ldr	r0, [pc, #16]	; (a6a4 <observer_start+0x4c>)
    a694:	f00b fc55 	bl	15f42 <printk>
		return err;
    a698:	e7f7      	b.n	a68a <observer_start+0x32>
    a69a:	bf00      	nop
    a69c:	0000a5ad 	.word	0x0000a5ad
    a6a0:	0001a3a4 	.word	0x0001a3a4
    a6a4:	0001a384 	.word	0x0001a384

0000a6a8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6ac:	b091      	sub	sp, #68	; 0x44
    a6ae:	9205      	str	r2, [sp, #20]
    a6b0:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    a6b2:	4613      	mov	r3, r2
    a6b4:	f002 0204 	and.w	r2, r2, #4
    a6b8:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    a6ba:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    a6be:	f010 0303 	ands.w	r3, r0, #3
    a6c2:	9301      	str	r3, [sp, #4]
    a6c4:	f040 8223 	bne.w	ab0e <cbvprintf_package+0x466>
    a6c8:	4607      	mov	r7, r0
    a6ca:	468a      	mov	sl, r1
    a6cc:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    a6ce:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    a6d0:	2800      	cmp	r0, #0
    a6d2:	d047      	beq.n	a764 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    a6d4:	b127      	cbz	r7, a6e0 <cbvprintf_package+0x38>
    a6d6:	1be3      	subs	r3, r4, r7
    a6d8:	3304      	adds	r3, #4
    a6da:	4553      	cmp	r3, sl
    a6dc:	f200 821a 	bhi.w	ab14 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    a6e0:	9b02      	ldr	r3, [sp, #8]
    a6e2:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    a6e4:	9b01      	ldr	r3, [sp, #4]
    a6e6:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    a6e8:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    a6ea:	9303      	str	r3, [sp, #12]
	bool parsing = false;
    a6ec:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    a6ee:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
    a6f2:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    a6f6:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    a6f8:	b10f      	cbz	r7, a6fe <cbvprintf_package+0x56>
				*(const char **)buf = s;
    a6fa:	9b02      	ldr	r3, [sp, #8]
    a6fc:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a6fe:	1e53      	subs	r3, r2, #1
    a700:	9307      	str	r3, [sp, #28]
    a702:	2a00      	cmp	r2, #0
    a704:	f340 815f 	ble.w	a9c6 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    a708:	9b05      	ldr	r3, [sp, #20]
    a70a:	f013 0202 	ands.w	r2, r3, #2
    a70e:	d026      	beq.n	a75e <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a710:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    a712:	1be1      	subs	r1, r4, r7
    a714:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    a716:	b11a      	cbz	r2, a720 <cbvprintf_package+0x78>
    a718:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a71c:	f080 8200 	bcs.w	ab20 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    a720:	9903      	ldr	r1, [sp, #12]
    a722:	290f      	cmp	r1, #15
    a724:	f200 81ff 	bhi.w	ab26 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    a728:	2f00      	cmp	r7, #0
    a72a:	f000 8164 	beq.w	a9f6 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    a72e:	b2db      	uxtb	r3, r3
    a730:	f101 0240 	add.w	r2, r1, #64	; 0x40
    a734:	446a      	add	r2, sp
    a736:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
    a73a:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
    a73e:	2800      	cmp	r0, #0
    a740:	f000 8155 	beq.w	a9ee <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    a744:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a748:	f101 0240 	add.w	r2, r1, #64	; 0x40
    a74c:	446a      	add	r2, sp
    a74e:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    a752:	9b04      	ldr	r3, [sp, #16]
    a754:	3301      	adds	r3, #1
    a756:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    a758:	9b03      	ldr	r3, [sp, #12]
    a75a:	3301      	adds	r3, #1
    a75c:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
    a75e:	3404      	adds	r4, #4

			is_str_arg = false;
    a760:	2200      	movs	r2, #0
    a762:	e03d      	b.n	a7e0 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    a764:	f001 0a07 	and.w	sl, r1, #7
    a768:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    a76a:	f1ca 0a08 	rsb	sl, sl, #8
    a76e:	e7b1      	b.n	a6d4 <cbvprintf_package+0x2c>
				parsing = false;
    a770:	2600      	movs	r6, #0
    a772:	e034      	b.n	a7de <cbvprintf_package+0x136>
    a774:	2600      	movs	r6, #0
    a776:	e032      	b.n	a7de <cbvprintf_package+0x136>
    a778:	2600      	movs	r6, #0
    a77a:	e030      	b.n	a7de <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
    a77c:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
    a780:	46c1      	mov	r9, r8
    a782:	e02c      	b.n	a7de <cbvprintf_package+0x136>
				if (*fmt == '%') {
    a784:	2925      	cmp	r1, #37	; 0x25
    a786:	d12a      	bne.n	a7de <cbvprintf_package+0x136>
					arg_idx++;
    a788:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
    a78c:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
    a78e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
    a792:	46c1      	mov	r9, r8
				continue;
    a794:	e023      	b.n	a7de <cbvprintf_package+0x136>
			switch (*fmt) {
    a796:	2947      	cmp	r1, #71	; 0x47
    a798:	d8ec      	bhi.n	a774 <cbvprintf_package+0xcc>
    a79a:	292a      	cmp	r1, #42	; 0x2a
    a79c:	d312      	bcc.n	a7c4 <cbvprintf_package+0x11c>
    a79e:	392a      	subs	r1, #42	; 0x2a
    a7a0:	b2c9      	uxtb	r1, r1
    a7a2:	2001      	movs	r0, #1
    a7a4:	fa00 f101 	lsl.w	r1, r0, r1
    a7a8:	f64f 70da 	movw	r0, #65498	; 0xffda
    a7ac:	4201      	tst	r1, r0
    a7ae:	d116      	bne.n	a7de <cbvprintf_package+0x136>
    a7b0:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
    a7b4:	f040 80c4 	bne.w	a940 <cbvprintf_package+0x298>
    a7b8:	f011 0f01 	tst.w	r1, #1
    a7bc:	f040 808e 	bne.w	a8dc <cbvprintf_package+0x234>
				parsing = false;
    a7c0:	2600      	movs	r6, #0
    a7c2:	e00c      	b.n	a7de <cbvprintf_package+0x136>
			switch (*fmt) {
    a7c4:	2925      	cmp	r1, #37	; 0x25
    a7c6:	d103      	bne.n	a7d0 <cbvprintf_package+0x128>
				arg_idx--;
    a7c8:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
    a7cc:	2600      	movs	r6, #0
				continue;
    a7ce:	e006      	b.n	a7de <cbvprintf_package+0x136>
			switch (*fmt) {
    a7d0:	d901      	bls.n	a7d6 <cbvprintf_package+0x12e>
				parsing = false;
    a7d2:	2600      	movs	r6, #0
    a7d4:	e003      	b.n	a7de <cbvprintf_package+0x136>
			switch (*fmt) {
    a7d6:	2920      	cmp	r1, #32
    a7d8:	d001      	beq.n	a7de <cbvprintf_package+0x136>
    a7da:	2923      	cmp	r1, #35	; 0x23
    a7dc:	d1cc      	bne.n	a778 <cbvprintf_package+0xd0>
				parsing = false;
    a7de:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
    a7e0:	1c6b      	adds	r3, r5, #1
    a7e2:	7869      	ldrb	r1, [r5, #1]
    a7e4:	2900      	cmp	r1, #0
    a7e6:	f000 811d 	beq.w	aa24 <cbvprintf_package+0x37c>
			if (!parsing) {
    a7ea:	2e00      	cmp	r6, #0
    a7ec:	d0ca      	beq.n	a784 <cbvprintf_package+0xdc>
			switch (*fmt) {
    a7ee:	297a      	cmp	r1, #122	; 0x7a
    a7f0:	d8be      	bhi.n	a770 <cbvprintf_package+0xc8>
    a7f2:	294c      	cmp	r1, #76	; 0x4c
    a7f4:	d3cf      	bcc.n	a796 <cbvprintf_package+0xee>
    a7f6:	394c      	subs	r1, #76	; 0x4c
    a7f8:	292e      	cmp	r1, #46	; 0x2e
    a7fa:	d861      	bhi.n	a8c0 <cbvprintf_package+0x218>
    a7fc:	a001      	add	r0, pc, #4	; (adr r0, a804 <cbvprintf_package+0x15c>)
    a7fe:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    a802:	bf00      	nop
    a804:	0000a7df 	.word	0x0000a7df
    a808:	0000a8c1 	.word	0x0000a8c1
    a80c:	0000a8c1 	.word	0x0000a8c1
    a810:	0000a8c1 	.word	0x0000a8c1
    a814:	0000a8c1 	.word	0x0000a8c1
    a818:	0000a8c1 	.word	0x0000a8c1
    a81c:	0000a8c1 	.word	0x0000a8c1
    a820:	0000a8c1 	.word	0x0000a8c1
    a824:	0000a8c1 	.word	0x0000a8c1
    a828:	0000a8c1 	.word	0x0000a8c1
    a82c:	0000a8c1 	.word	0x0000a8c1
    a830:	0000a8c1 	.word	0x0000a8c1
    a834:	0000a8d5 	.word	0x0000a8d5
    a838:	0000a8c1 	.word	0x0000a8c1
    a83c:	0000a8c1 	.word	0x0000a8c1
    a840:	0000a8c1 	.word	0x0000a8c1
    a844:	0000a8c1 	.word	0x0000a8c1
    a848:	0000a8c1 	.word	0x0000a8c1
    a84c:	0000a8c1 	.word	0x0000a8c1
    a850:	0000a8c1 	.word	0x0000a8c1
    a854:	0000a8c1 	.word	0x0000a8c1
    a858:	0000a941 	.word	0x0000a941
    a85c:	0000a8c1 	.word	0x0000a8c1
    a860:	0000a8d5 	.word	0x0000a8d5
    a864:	0000a8d5 	.word	0x0000a8d5
    a868:	0000a941 	.word	0x0000a941
    a86c:	0000a941 	.word	0x0000a941
    a870:	0000a941 	.word	0x0000a941
    a874:	0000a7df 	.word	0x0000a7df
    a878:	0000a8d5 	.word	0x0000a8d5
    a87c:	0000a77d 	.word	0x0000a77d
    a880:	0000a8c1 	.word	0x0000a8c1
    a884:	0000a7df 	.word	0x0000a7df
    a888:	0000a8c1 	.word	0x0000a8c1
    a88c:	0000a99f 	.word	0x0000a99f
    a890:	0000a8d5 	.word	0x0000a8d5
    a894:	0000a99f 	.word	0x0000a99f
    a898:	0000a8c1 	.word	0x0000a8c1
    a89c:	0000a8c1 	.word	0x0000a8c1
    a8a0:	0000a9a9 	.word	0x0000a9a9
    a8a4:	0000a8cd 	.word	0x0000a8cd
    a8a8:	0000a8d5 	.word	0x0000a8d5
    a8ac:	0000a8c1 	.word	0x0000a8c1
    a8b0:	0000a8c1 	.word	0x0000a8c1
    a8b4:	0000a8d5 	.word	0x0000a8d5
    a8b8:	0000a8c1 	.word	0x0000a8c1
    a8bc:	0000a8c5 	.word	0x0000a8c5
				parsing = false;
    a8c0:	2600      	movs	r6, #0
    a8c2:	e78c      	b.n	a7de <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
    a8c4:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
    a8c8:	46c1      	mov	r9, r8
				continue;
    a8ca:	e788      	b.n	a7de <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
    a8cc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
    a8d0:	46c1      	mov	r9, r8
				continue;
    a8d2:	e784      	b.n	a7de <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
    a8d4:	7829      	ldrb	r1, [r5, #0]
    a8d6:	296c      	cmp	r1, #108	; 0x6c
    a8d8:	d024      	beq.n	a924 <cbvprintf_package+0x27c>
				parsing = false;
    a8da:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    a8dc:	4444      	add	r4, r8
    a8de:	3c01      	subs	r4, #1
    a8e0:	f1c8 0100 	rsb	r1, r8, #0
    a8e4:	400c      	ands	r4, r1
    a8e6:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    a8e8:	b127      	cbz	r7, a8f4 <cbvprintf_package+0x24c>
    a8ea:	1be1      	subs	r1, r4, r7
    a8ec:	4449      	add	r1, r9
    a8ee:	4551      	cmp	r1, sl
    a8f0:	f200 8113 	bhi.w	ab1a <cbvprintf_package+0x472>
		if (is_str_arg) {
    a8f4:	2a00      	cmp	r2, #0
    a8f6:	d15d      	bne.n	a9b4 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
    a8f8:	f1b9 0f04 	cmp.w	r9, #4
    a8fc:	f000 808a 	beq.w	aa14 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    a900:	f1b9 0f08 	cmp.w	r9, #8
    a904:	f040 8112 	bne.w	ab2c <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
    a908:	991a      	ldr	r1, [sp, #104]	; 0x68
    a90a:	3107      	adds	r1, #7
    a90c:	f021 0107 	bic.w	r1, r1, #7
    a910:	f101 0008 	add.w	r0, r1, #8
    a914:	901a      	str	r0, [sp, #104]	; 0x68
    a916:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
    a91a:	b10f      	cbz	r7, a920 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    a91c:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
    a920:	3408      	adds	r4, #8
    a922:	e75c      	b.n	a7de <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
    a924:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    a928:	296c      	cmp	r1, #108	; 0x6c
    a92a:	d004      	beq.n	a936 <cbvprintf_package+0x28e>
				parsing = false;
    a92c:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
    a92e:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
    a932:	46c1      	mov	r9, r8
    a934:	e7d2      	b.n	a8dc <cbvprintf_package+0x234>
				parsing = false;
    a936:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
    a938:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
    a93c:	46c1      	mov	r9, r8
    a93e:	e7cd      	b.n	a8dc <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
    a940:	7829      	ldrb	r1, [r5, #0]
    a942:	294c      	cmp	r1, #76	; 0x4c
    a944:	d01b      	beq.n	a97e <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
    a946:	991a      	ldr	r1, [sp, #104]	; 0x68
    a948:	3107      	adds	r1, #7
    a94a:	f021 0107 	bic.w	r1, r1, #7
    a94e:	f101 0008 	add.w	r0, r1, #8
    a952:	901a      	str	r0, [sp, #104]	; 0x68
    a954:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
    a958:	3407      	adds	r4, #7
    a95a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    a95e:	b147      	cbz	r7, a972 <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
    a960:	1be6      	subs	r6, r4, r7
    a962:	3608      	adds	r6, #8
    a964:	4556      	cmp	r6, sl
    a966:	d814      	bhi.n	a992 <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
    a968:	782d      	ldrb	r5, [r5, #0]
    a96a:	2d4c      	cmp	r5, #76	; 0x4c
    a96c:	d014      	beq.n	a998 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
    a96e:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
    a972:	3408      	adds	r4, #8
				parsing = false;
    a974:	2600      	movs	r6, #0
				continue;
    a976:	f04f 0808 	mov.w	r8, #8
    a97a:	46c1      	mov	r9, r8
    a97c:	e72f      	b.n	a7de <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
    a97e:	991a      	ldr	r1, [sp, #104]	; 0x68
    a980:	3107      	adds	r1, #7
    a982:	f021 0107 	bic.w	r1, r1, #7
    a986:	f101 0008 	add.w	r0, r1, #8
    a98a:	901a      	str	r0, [sp, #104]	; 0x68
    a98c:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
    a990:	e7e2      	b.n	a958 <cbvprintf_package+0x2b0>
						return -ENOSPC;
    a992:	f06f 001b 	mvn.w	r0, #27
    a996:	e0b7      	b.n	ab08 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
    a998:	e9c4 0100 	strd	r0, r1, [r4]
    a99c:	e7e9      	b.n	a972 <cbvprintf_package+0x2ca>
				parsing = false;
    a99e:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    a9a0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    a9a4:	46c1      	mov	r9, r8
    a9a6:	e799      	b.n	a8dc <cbvprintf_package+0x234>
				is_str_arg = true;
    a9a8:	4632      	mov	r2, r6
				parsing = false;
    a9aa:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    a9ac:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    a9b0:	46c1      	mov	r9, r8
    a9b2:	e793      	b.n	a8dc <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
    a9b4:	4604      	mov	r4, r0
    a9b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a9b8:	1d11      	adds	r1, r2, #4
    a9ba:	911a      	str	r1, [sp, #104]	; 0x68
    a9bc:	6812      	ldr	r2, [r2, #0]
    a9be:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a9c0:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
    a9c2:	461d      	mov	r5, r3
    a9c4:	e698      	b.n	a6f8 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    a9c6:	4b5f      	ldr	r3, [pc, #380]	; (ab44 <cbvprintf_package+0x49c>)
    a9c8:	9a02      	ldr	r2, [sp, #8]
    a9ca:	429a      	cmp	r2, r3
    a9cc:	d304      	bcc.n	a9d8 <cbvprintf_package+0x330>
    a9ce:	4b5e      	ldr	r3, [pc, #376]	; (ab48 <cbvprintf_package+0x4a0>)
    a9d0:	429a      	cmp	r2, r3
    a9d2:	d30a      	bcc.n	a9ea <cbvprintf_package+0x342>
    a9d4:	2300      	movs	r3, #0
    a9d6:	e000      	b.n	a9da <cbvprintf_package+0x332>
    a9d8:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a9da:	2b00      	cmp	r3, #0
    a9dc:	f47f ae94 	bne.w	a708 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    a9e0:	9b05      	ldr	r3, [sp, #20]
    a9e2:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a9e6:	2000      	movs	r0, #0
    a9e8:	e693      	b.n	a712 <cbvprintf_package+0x6a>
    a9ea:	2301      	movs	r3, #1
    a9ec:	e7f5      	b.n	a9da <cbvprintf_package+0x332>
						s_rw_cnt++;
    a9ee:	9b06      	ldr	r3, [sp, #24]
    a9f0:	3301      	adds	r3, #1
    a9f2:	9306      	str	r3, [sp, #24]
    a9f4:	e6b0      	b.n	a758 <cbvprintf_package+0xb0>
				} else if (is_ro) {
    a9f6:	b110      	cbz	r0, a9fe <cbvprintf_package+0x356>
					len += 1;
    a9f8:	f10a 0a01 	add.w	sl, sl, #1
    a9fc:	e6ac      	b.n	a758 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
    a9fe:	9b00      	ldr	r3, [sp, #0]
    aa00:	b113      	cbz	r3, aa08 <cbvprintf_package+0x360>
					len += 2;
    aa02:	f10a 0a02 	add.w	sl, sl, #2
    aa06:	e6a7      	b.n	a758 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
    aa08:	9802      	ldr	r0, [sp, #8]
    aa0a:	f00c fdd9 	bl	175c0 <strlen>
    aa0e:	1c83      	adds	r3, r0, #2
    aa10:	449a      	add	sl, r3
    aa12:	e6a1      	b.n	a758 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
    aa14:	991a      	ldr	r1, [sp, #104]	; 0x68
    aa16:	1d08      	adds	r0, r1, #4
    aa18:	901a      	str	r0, [sp, #104]	; 0x68
    aa1a:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
    aa1c:	b107      	cbz	r7, aa20 <cbvprintf_package+0x378>
				*(int *)buf = v;
    aa1e:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
    aa20:	3404      	adds	r4, #4
    aa22:	e6dc      	b.n	a7de <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    aa24:	1be3      	subs	r3, r4, r7
    aa26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    aa2a:	f080 8082 	bcs.w	ab32 <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    aa2e:	b197      	cbz	r7, aa56 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    aa30:	2200      	movs	r2, #0
    aa32:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    aa34:	089b      	lsrs	r3, r3, #2
    aa36:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    aa38:	9b00      	ldr	r3, [sp, #0]
    aa3a:	b183      	cbz	r3, aa5e <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    aa3c:	9b06      	ldr	r3, [sp, #24]
    aa3e:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    aa40:	9b04      	ldr	r3, [sp, #16]
    aa42:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    aa44:	bb1b      	cbnz	r3, aa8e <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
    aa46:	9d01      	ldr	r5, [sp, #4]
    aa48:	f8dd 900c 	ldr.w	r9, [sp, #12]
    aa4c:	f8dd b010 	ldr.w	fp, [sp, #16]
    aa50:	f8dd 8008 	ldr.w	r8, [sp, #8]
    aa54:	e03b      	b.n	aace <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    aa56:	4453      	add	r3, sl
    aa58:	f1a3 0008 	sub.w	r0, r3, #8
    aa5c:	e054      	b.n	ab08 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    aa5e:	9b06      	ldr	r3, [sp, #24]
    aa60:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    aa62:	e7ed      	b.n	aa40 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
    aa64:	3301      	adds	r3, #1
    aa66:	4298      	cmp	r0, r3
    aa68:	d9ed      	bls.n	aa46 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    aa6a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    aa6e:	446a      	add	r2, sp
    aa70:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    aa74:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    aa78:	2a00      	cmp	r2, #0
    aa7a:	daf3      	bge.n	aa64 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    aa7c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    aa80:	1be2      	subs	r2, r4, r7
    aa82:	3201      	adds	r2, #1
    aa84:	4552      	cmp	r2, sl
    aa86:	d857      	bhi.n	ab38 <cbvprintf_package+0x490>
			*buf++ = pos;
    aa88:	f804 1b01 	strb.w	r1, [r4], #1
    aa8c:	e7ea      	b.n	aa64 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
    aa8e:	9b01      	ldr	r3, [sp, #4]
    aa90:	9803      	ldr	r0, [sp, #12]
    aa92:	e7e8      	b.n	aa66 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
    aa94:	9b00      	ldr	r3, [sp, #0]
    aa96:	b33b      	cbz	r3, aae8 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
    aa98:	f105 0340 	add.w	r3, r5, #64	; 0x40
    aa9c:	446b      	add	r3, sp
    aa9e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    aaa2:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
    aaa6:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    aaa8:	1be3      	subs	r3, r4, r7
    aaaa:	4433      	add	r3, r6
    aaac:	3301      	adds	r3, #1
    aaae:	4553      	cmp	r3, sl
    aab0:	d845      	bhi.n	ab3e <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    aab2:	f105 0340 	add.w	r3, r5, #64	; 0x40
    aab6:	446b      	add	r3, sp
    aab8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    aabc:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    aac0:	4632      	mov	r2, r6
    aac2:	4641      	mov	r1, r8
    aac4:	4620      	mov	r0, r4
    aac6:	f00c fda0 	bl	1760a <memcpy>
		buf += size;
    aaca:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    aacc:	3501      	adds	r5, #1
    aace:	45a9      	cmp	r9, r5
    aad0:	d919      	bls.n	ab06 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    aad2:	f1bb 0f00 	cmp.w	fp, #0
    aad6:	d0dd      	beq.n	aa94 <cbvprintf_package+0x3ec>
    aad8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    aadc:	446b      	add	r3, sp
    aade:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    aae2:	2b00      	cmp	r3, #0
    aae4:	dad6      	bge.n	aa94 <cbvprintf_package+0x3ec>
    aae6:	e7f1      	b.n	aacc <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    aae8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    aaec:	446b      	add	r3, sp
    aaee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    aaf2:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    aaf6:	2200      	movs	r2, #0
    aaf8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    aafc:	4640      	mov	r0, r8
    aafe:	f00c fd5f 	bl	175c0 <strlen>
    ab02:	1c46      	adds	r6, r0, #1
    ab04:	e7d0      	b.n	aaa8 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    ab06:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    ab08:	b011      	add	sp, #68	; 0x44
    ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    ab0e:	f06f 000d 	mvn.w	r0, #13
    ab12:	e7f9      	b.n	ab08 <cbvprintf_package+0x460>
		return -ENOSPC;
    ab14:	f06f 001b 	mvn.w	r0, #27
    ab18:	e7f6      	b.n	ab08 <cbvprintf_package+0x460>
			return -ENOSPC;
    ab1a:	f06f 001b 	mvn.w	r0, #27
    ab1e:	e7f3      	b.n	ab08 <cbvprintf_package+0x460>
					return -EINVAL;
    ab20:	f06f 0015 	mvn.w	r0, #21
    ab24:	e7f0      	b.n	ab08 <cbvprintf_package+0x460>
					return -EINVAL;
    ab26:	f06f 0015 	mvn.w	r0, #21
    ab2a:	e7ed      	b.n	ab08 <cbvprintf_package+0x460>
			return -EINVAL;
    ab2c:	f06f 0015 	mvn.w	r0, #21
    ab30:	e7ea      	b.n	ab08 <cbvprintf_package+0x460>
		return -EINVAL;
    ab32:	f06f 0015 	mvn.w	r0, #21
    ab36:	e7e7      	b.n	ab08 <cbvprintf_package+0x460>
				return -ENOSPC;
    ab38:	f06f 001b 	mvn.w	r0, #27
    ab3c:	e7e4      	b.n	ab08 <cbvprintf_package+0x460>
			return -ENOSPC;
    ab3e:	f06f 001b 	mvn.w	r0, #27
    ab42:	e7e1      	b.n	ab08 <cbvprintf_package+0x460>
    ab44:	00019e20 	.word	0x00019e20
    ab48:	0001bcdc 	.word	0x0001bcdc

0000ab4c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab50:	b097      	sub	sp, #92	; 0x5c
    ab52:	af00      	add	r7, sp, #0
    ab54:	4683      	mov	fp, r0
    ab56:	61ba      	str	r2, [r7, #24]
    ab58:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    ab5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ab5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ab62:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    ab64:	60f9      	str	r1, [r7, #12]
    ab66:	b151      	cbz	r1, ab7e <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    ab68:	f89b 6002 	ldrb.w	r6, [fp, #2]
    ab6c:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
    ab6e:	b156      	cbz	r6, ab86 <cbprintf_package_convert+0x3a>
    ab70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ab74:	f013 0f01 	tst.w	r3, #1
    ab78:	d111      	bne.n	ab9e <cbprintf_package_convert+0x52>
    ab7a:	2300      	movs	r3, #0
    ab7c:	e004      	b.n	ab88 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    ab7e:	f00b f93f 	bl	15e00 <get_package_len>
    ab82:	60f8      	str	r0, [r7, #12]
    ab84:	e7f0      	b.n	ab68 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
    ab86:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    ab88:	f89b 2003 	ldrb.w	r2, [fp, #3]
    ab8c:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
    ab8e:	b142      	cbz	r2, aba2 <cbprintf_package_convert+0x56>
    ab90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    ab94:	f012 0f02 	tst.w	r2, #2
    ab98:	d122      	bne.n	abe0 <cbprintf_package_convert+0x94>
    ab9a:	2200      	movs	r2, #0
    ab9c:	e002      	b.n	aba4 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
    ab9e:	2301      	movs	r3, #1
    aba0:	e7f2      	b.n	ab88 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
    aba2:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    aba4:	b902      	cbnz	r2, aba8 <cbprintf_package_convert+0x5c>
    aba6:	b1eb      	cbz	r3, abe4 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    aba8:	f89b 5000 	ldrb.w	r5, [fp]
    abac:	00aa      	lsls	r2, r5, #2
    abae:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
    abb0:	f8db 2004 	ldr.w	r2, [fp, #4]
    abb4:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
    abb6:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    abba:	69ba      	ldr	r2, [r7, #24]
    abbc:	b1f2      	cbz	r2, abfc <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    abbe:	2b00      	cmp	r3, #0
    abc0:	f040 8115 	bne.w	adee <cbprintf_package_convert+0x2a2>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    abc4:	f1b9 0f00 	cmp.w	r9, #0
    abc8:	f000 8120 	beq.w	ae0c <cbprintf_package_convert+0x2c0>
    abcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    abd0:	f013 0f04 	tst.w	r3, #4
    abd4:	f040 811e 	bne.w	ae14 <cbprintf_package_convert+0x2c8>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    abd8:	2000      	movs	r0, #0
		keep_cnt = 0;
    abda:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    abdc:	4606      	mov	r6, r0
    abde:	e10a      	b.n	adf6 <cbprintf_package_convert+0x2aa>
	rw_cpy = rws_nbr > 0 &&
    abe0:	2201      	movs	r2, #1
    abe2:	e7df      	b.n	aba4 <cbprintf_package_convert+0x58>
		if (cb) {
    abe4:	69bb      	ldr	r3, [r7, #24]
    abe6:	b11b      	cbz	r3, abf0 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
    abe8:	693a      	ldr	r2, [r7, #16]
    abea:	68f9      	ldr	r1, [r7, #12]
    abec:	4658      	mov	r0, fp
    abee:	4798      	blx	r3
		return in_len;
    abf0:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    abf2:	4620      	mov	r0, r4
    abf4:	375c      	adds	r7, #92	; 0x5c
    abf6:	46bd      	mov	sp, r7
    abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    abfc:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
    abfe:	bb2b      	cbnz	r3, ac4c <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    ac00:	f1b9 0f00 	cmp.w	r9, #0
    ac04:	d038      	beq.n	ac78 <cbprintf_package_convert+0x12c>
    ac06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ac0a:	f013 0304 	ands.w	r3, r3, #4
    ac0e:	613b      	str	r3, [r7, #16]
    ac10:	d027      	beq.n	ac62 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
    ac12:	444d      	add	r5, r9
	size_t strl_cnt = 0;
    ac14:	2300      	movs	r3, #0
    ac16:	613b      	str	r3, [r7, #16]
    ac18:	e023      	b.n	ac62 <cbprintf_package_convert+0x116>
				out_len += len;
    ac1a:	4404      	add	r4, r0
				str_pos++;
    ac1c:	3501      	adds	r5, #1
			for (unsigned int i = 0; i < ros_nbr; i++) {
    ac1e:	3601      	adds	r6, #1
    ac20:	454e      	cmp	r6, r9
    ac22:	d21a      	bcs.n	ac5a <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
    ac24:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    ac26:	2300      	movs	r3, #0
    ac28:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
    ac2c:	4619      	mov	r1, r3
    ac2e:	69b8      	ldr	r0, [r7, #24]
    ac30:	f00b f8fb 	bl	15e2a <append_string>
				if (strl && strl_cnt < strl_len) {
    ac34:	f1ba 0f00 	cmp.w	sl, #0
    ac38:	d0ef      	beq.n	ac1a <cbprintf_package_convert+0xce>
    ac3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    ac3e:	4598      	cmp	r8, r3
    ac40:	d2eb      	bcs.n	ac1a <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
    ac42:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
    ac46:	f108 0801 	add.w	r8, r8, #1
    ac4a:	e7e6      	b.n	ac1a <cbprintf_package_convert+0xce>
			for (unsigned int i = 0; i < ros_nbr; i++) {
    ac4c:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
    ac4e:	f8c7 801c 	str.w	r8, [r7, #28]
    ac52:	46b0      	mov	r8, r6
    ac54:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
    ac58:	e7e2      	b.n	ac20 <cbprintf_package_convert+0xd4>
    ac5a:	f8c7 8010 	str.w	r8, [r7, #16]
    ac5e:	f8d7 801c 	ldr.w	r8, [r7, #28]
		bool drop_ro_str_pos = !(flags &
    ac62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ac66:	f003 0305 	and.w	r3, r3, #5
    ac6a:	60fb      	str	r3, [r7, #12]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    ac6c:	f04f 0a00 	mov.w	sl, #0
    ac70:	46a1      	mov	r9, r4
    ac72:	f8c7 b01c 	str.w	fp, [r7, #28]
    ac76:	e0a4      	b.n	adc2 <cbprintf_package_convert+0x276>
	size_t strl_cnt = 0;
    ac78:	f8c7 9010 	str.w	r9, [r7, #16]
    ac7c:	e7f1      	b.n	ac62 <cbprintf_package_convert+0x116>
    ac7e:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    ac80:	6a3b      	ldr	r3, [r7, #32]
    ac82:	b97b      	cbnz	r3, aca4 <cbprintf_package_convert+0x158>
			if (is_ro) {
    ac84:	2d00      	cmp	r5, #0
    ac86:	d07e      	beq.n	ad86 <cbprintf_package_convert+0x23a>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    ac88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ac8c:	f013 0f01 	tst.w	r3, #1
    ac90:	d17e      	bne.n	ad90 <cbprintf_package_convert+0x244>
					out_len -= drop_ro_str_pos ? 2 : 1;
    ac92:	68fb      	ldr	r3, [r7, #12]
    ac94:	2b00      	cmp	r3, #0
    ac96:	d174      	bne.n	ad82 <cbprintf_package_convert+0x236>
    ac98:	2302      	movs	r3, #2
    ac9a:	eba9 0903 	sub.w	r9, r9, r3
    ac9e:	e08d      	b.n	adbc <cbprintf_package_convert+0x270>
    aca0:	2501      	movs	r5, #1
    aca2:	e7ed      	b.n	ac80 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    aca4:	4659      	mov	r1, fp
    aca6:	6978      	ldr	r0, [r7, #20]
    aca8:	f00b f906 	bl	15eb8 <is_ptr>
    acac:	2800      	cmp	r0, #0
    acae:	d0e9      	beq.n	ac84 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    acb0:	466c      	mov	r4, sp
    acb2:	2301      	movs	r3, #1
    acb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    acb8:	2303      	movs	r3, #3
    acba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    acbe:	b08a      	sub	sp, #40	; 0x28
    acc0:	4669      	mov	r1, sp
    acc2:	f111 0210 	adds.w	r2, r1, #16
    acc6:	d03c      	beq.n	ad42 <cbprintf_package_convert+0x1f6>
    acc8:	2516      	movs	r5, #22
    acca:	b142      	cbz	r2, acde <cbprintf_package_convert+0x192>
    accc:	462b      	mov	r3, r5
    acce:	2d04      	cmp	r5, #4
    acd0:	dd01      	ble.n	acd6 <cbprintf_package_convert+0x18a>
    acd2:	48b4      	ldr	r0, [pc, #720]	; (afa4 <cbprintf_package_convert+0x458>)
    acd4:	6148      	str	r0, [r1, #20]
    acd6:	2b08      	cmp	r3, #8
    acd8:	dd01      	ble.n	acde <cbprintf_package_convert+0x192>
    acda:	4bb3      	ldr	r3, [pc, #716]	; (afa8 <cbprintf_package_convert+0x45c>)
    acdc:	618b      	str	r3, [r1, #24]
    acde:	2301      	movs	r3, #1
    ace0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    ace4:	2303      	movs	r3, #3
    ace6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    acea:	bb6a      	cbnz	r2, ad48 <cbprintf_package_convert+0x1fc>
    acec:	2d15      	cmp	r5, #21
    acee:	dd45      	ble.n	ad7c <cbprintf_package_convert+0x230>
    acf0:	2316      	movs	r3, #22
    acf2:	b162      	cbz	r2, ad0e <cbprintf_package_convert+0x1c2>
    acf4:	2005      	movs	r0, #5
    acf6:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
    acfa:	2000      	movs	r0, #0
    acfc:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    ad00:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
    ad04:	2001      	movs	r0, #1
    ad06:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
    ad0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ad0c:	6108      	str	r0, [r1, #16]
    ad0e:	f36f 0800 	bfc	r8, #0, #1
    ad12:	f36f 0841 	bfc	r8, #1, #1
    ad16:	f36f 0882 	bfc	r8, #2, #1
    ad1a:	f36f 08c5 	bfc	r8, #3, #3
    ad1e:	2102      	movs	r1, #2
    ad20:	f361 1888 	bfi	r8, r1, #6, #3
    ad24:	f3c3 030a 	ubfx	r3, r3, #0, #11
    ad28:	f363 2853 	bfi	r8, r3, #9, #11
    ad2c:	f36f 581f 	bfc	r8, #20, #12
    ad30:	2300      	movs	r3, #0
    ad32:	4641      	mov	r1, r8
    ad34:	489d      	ldr	r0, [pc, #628]	; (afac <cbprintf_package_convert+0x460>)
    ad36:	f001 f897 	bl	be68 <z_impl_z_log_msg_static_create>
    ad3a:	46a5      	mov	sp, r4
				out_len -= 2;
    ad3c:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
    ad40:	e03c      	b.n	adbc <cbprintf_package_convert+0x270>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    ad42:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    ad46:	e7c0      	b.n	acca <cbprintf_package_convert+0x17e>
    ad48:	462b      	mov	r3, r5
    ad4a:	2d0c      	cmp	r5, #12
    ad4c:	dd01      	ble.n	ad52 <cbprintf_package_convert+0x206>
    ad4e:	6978      	ldr	r0, [r7, #20]
    ad50:	61c8      	str	r0, [r1, #28]
    ad52:	2b10      	cmp	r3, #16
    ad54:	dd01      	ble.n	ad5a <cbprintf_package_convert+0x20e>
    ad56:	f8c1 b020 	str.w	fp, [r1, #32]
    ad5a:	f101 0324 	add.w	r3, r1, #36	; 0x24
    ad5e:	2000      	movs	r0, #0
    ad60:	e009      	b.n	ad76 <cbprintf_package_convert+0x22a>
    ad62:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    ad66:	f107 0e28 	add.w	lr, r7, #40	; 0x28
    ad6a:	44f4      	add	ip, lr
    ad6c:	f81c cc30 	ldrb.w	ip, [ip, #-48]
    ad70:	f803 cb01 	strb.w	ip, [r3], #1
    ad74:	3001      	adds	r0, #1
    ad76:	2801      	cmp	r0, #1
    ad78:	d9f3      	bls.n	ad62 <cbprintf_package_convert+0x216>
    ad7a:	e7b7      	b.n	acec <cbprintf_package_convert+0x1a0>
    ad7c:	f06f 031b 	mvn.w	r3, #27
    ad80:	e7b7      	b.n	acf2 <cbprintf_package_convert+0x1a6>
					out_len -= drop_ro_str_pos ? 2 : 1;
    ad82:	2301      	movs	r3, #1
    ad84:	e789      	b.n	ac9a <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    ad86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ad8a:	f013 0f02 	tst.w	r3, #2
    ad8e:	d015      	beq.n	adbc <cbprintf_package_convert+0x270>
				len = append_string(cb, NULL, str, 0);
    ad90:	2300      	movs	r3, #0
    ad92:	4622      	mov	r2, r4
    ad94:	4619      	mov	r1, r3
    ad96:	69b8      	ldr	r0, [r7, #24]
    ad98:	f00b f847 	bl	15e2a <append_string>
				if (strl && strl_cnt < strl_len) {
    ad9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    ada0:	b153      	cbz	r3, adb8 <cbprintf_package_convert+0x26c>
    ada2:	693b      	ldr	r3, [r7, #16]
    ada4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    ada8:	4293      	cmp	r3, r2
    adaa:	d205      	bcs.n	adb8 <cbprintf_package_convert+0x26c>
					strl[strl_cnt++] = (uint16_t)len;
    adac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    adb0:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    adb4:	3301      	adds	r3, #1
    adb6:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
    adb8:	3801      	subs	r0, #1
    adba:	4481      	add	r9, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    adbc:	f10a 0a01 	add.w	sl, sl, #1
			uint8_t arg_pos = *str_pos++;
    adc0:	4635      	mov	r5, r6
		for (unsigned int i = 0; i < rws_nbr; i++) {
    adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    adc4:	459a      	cmp	sl, r3
    adc6:	d210      	bcs.n	adea <cbprintf_package_convert+0x29e>
			uint8_t arg_idx = *str_pos++;
    adc8:	462e      	mov	r6, r5
    adca:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
    adce:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
    add0:	69fa      	ldr	r2, [r7, #28]
    add2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    add6:	4b76      	ldr	r3, [pc, #472]	; (afb0 <cbprintf_package_convert+0x464>)
    add8:	429c      	cmp	r4, r3
    adda:	f4ff af50 	bcc.w	ac7e <cbprintf_package_convert+0x132>
    adde:	4b75      	ldr	r3, [pc, #468]	; (afb4 <cbprintf_package_convert+0x468>)
    ade0:	429c      	cmp	r4, r3
    ade2:	f4ff af5d 	bcc.w	aca0 <cbprintf_package_convert+0x154>
    ade6:	2500      	movs	r5, #0
    ade8:	e74a      	b.n	ac80 <cbprintf_package_convert+0x134>
    adea:	464c      	mov	r4, r9
    adec:	e701      	b.n	abf2 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
    adee:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
    adf2:	2300      	movs	r3, #0
    adf4:	61fb      	str	r3, [r7, #28]
	if (dst) {
    adf6:	b118      	cbz	r0, ae00 <cbprintf_package_convert+0x2b4>
		memcpy(dst, str_pos, ros_nbr);
    adf8:	464a      	mov	r2, r9
    adfa:	4629      	mov	r1, r5
    adfc:	f00c fc05 	bl	1760a <memcpy>
	str_pos += ros_nbr;
    ae00:	444d      	add	r5, r9
	for (unsigned int i = 0; i < rws_nbr; i++) {
    ae02:	f04f 0800 	mov.w	r8, #0
    ae06:	f8c7 9004 	str.w	r9, [r7, #4]
    ae0a:	e01e      	b.n	ae4a <cbprintf_package_convert+0x2fe>
		dst = NULL;
    ae0c:	2000      	movs	r0, #0
		keep_cnt = 0;
    ae0e:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    ae10:	4606      	mov	r6, r0
    ae12:	e7f0      	b.n	adf6 <cbprintf_package_convert+0x2aa>
		keep_cnt = ros_nbr;
    ae14:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
    ae16:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
    ae1a:	2600      	movs	r6, #0
    ae1c:	e7eb      	b.n	adf6 <cbprintf_package_convert+0x2aa>
    ae1e:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    ae20:	6a3b      	ldr	r3, [r7, #32]
    ae22:	bb33      	cbnz	r3, ae72 <cbprintf_package_convert+0x326>
		if (is_ro) {
    ae24:	2d00      	cmp	r5, #0
    ae26:	d03b      	beq.n	aea0 <cbprintf_package_convert+0x354>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    ae28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ae2c:	f013 0f01 	tst.w	r3, #1
    ae30:	d026      	beq.n	ae80 <cbprintf_package_convert+0x334>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    ae32:	1c73      	adds	r3, r6, #1
    ae34:	f106 0230 	add.w	r2, r6, #48	; 0x30
    ae38:	f107 0128 	add.w	r1, r7, #40	; 0x28
    ae3c:	1856      	adds	r6, r2, r1
    ae3e:	f806 9c14 	strb.w	r9, [r6, #-20]
    ae42:	b2de      	uxtb	r6, r3
	for (unsigned int i = 0; i < rws_nbr; i++) {
    ae44:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
    ae48:	4625      	mov	r5, r4
	for (unsigned int i = 0; i < rws_nbr; i++) {
    ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae4c:	4598      	cmp	r8, r3
    ae4e:	d24a      	bcs.n	aee6 <cbprintf_package_convert+0x39a>
		uint8_t arg_idx = *str_pos++;
    ae50:	462c      	mov	r4, r5
    ae52:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
    ae56:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
    ae5a:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
    ae5e:	4a54      	ldr	r2, [pc, #336]	; (afb0 <cbprintf_package_convert+0x464>)
    ae60:	4293      	cmp	r3, r2
    ae62:	d3dc      	bcc.n	ae1e <cbprintf_package_convert+0x2d2>
    ae64:	4a53      	ldr	r2, [pc, #332]	; (afb4 <cbprintf_package_convert+0x468>)
    ae66:	4293      	cmp	r3, r2
    ae68:	d301      	bcc.n	ae6e <cbprintf_package_convert+0x322>
    ae6a:	2500      	movs	r5, #0
    ae6c:	e7d8      	b.n	ae20 <cbprintf_package_convert+0x2d4>
    ae6e:	2501      	movs	r5, #1
    ae70:	e7d6      	b.n	ae20 <cbprintf_package_convert+0x2d4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    ae72:	4651      	mov	r1, sl
    ae74:	6978      	ldr	r0, [r7, #20]
    ae76:	f00b f81f 	bl	15eb8 <is_ptr>
    ae7a:	2800      	cmp	r0, #0
    ae7c:	d0d2      	beq.n	ae24 <cbprintf_package_convert+0x2d8>
    ae7e:	e7e1      	b.n	ae44 <cbprintf_package_convert+0x2f8>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    ae80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ae84:	f013 0f04 	tst.w	r3, #4
    ae88:	d0dc      	beq.n	ae44 <cbprintf_package_convert+0x2f8>
				keep_str_pos[keep_cnt++] = arg_pos;
    ae8a:	69fa      	ldr	r2, [r7, #28]
    ae8c:	1c53      	adds	r3, r2, #1
    ae8e:	3230      	adds	r2, #48	; 0x30
    ae90:	f107 0128 	add.w	r1, r7, #40	; 0x28
    ae94:	440a      	add	r2, r1
    ae96:	f802 9c24 	strb.w	r9, [r2, #-36]
    ae9a:	b2db      	uxtb	r3, r3
    ae9c:	61fb      	str	r3, [r7, #28]
    ae9e:	e7d1      	b.n	ae44 <cbprintf_package_convert+0x2f8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    aea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    aea4:	f013 0f02 	tst.w	r3, #2
    aea8:	d009      	beq.n	aebe <cbprintf_package_convert+0x372>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    aeaa:	1c73      	adds	r3, r6, #1
    aeac:	f106 0230 	add.w	r2, r6, #48	; 0x30
    aeb0:	f107 0128 	add.w	r1, r7, #40	; 0x28
    aeb4:	1856      	adds	r6, r2, r1
    aeb6:	f806 9c14 	strb.w	r9, [r6, #-20]
    aeba:	b2de      	uxtb	r6, r3
    aebc:	e7c2      	b.n	ae44 <cbprintf_package_convert+0x2f8>
				keep_str_pos[keep_cnt++] = arg_idx;
    aebe:	69f8      	ldr	r0, [r7, #28]
    aec0:	1c43      	adds	r3, r0, #1
    aec2:	f100 0130 	add.w	r1, r0, #48	; 0x30
    aec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    aeca:	188a      	adds	r2, r1, r2
    aecc:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
    aed0:	4602      	mov	r2, r0
    aed2:	3202      	adds	r2, #2
    aed4:	b2d2      	uxtb	r2, r2
    aed6:	61fa      	str	r2, [r7, #28]
    aed8:	f107 0258 	add.w	r2, r7, #88	; 0x58
    aedc:	fa52 f383 	uxtab	r3, r2, r3
    aee0:	f803 9c24 	strb.w	r9, [r3, #-36]
    aee4:	e7ae      	b.n	ae44 <cbprintf_package_convert+0x2f8>
	out_desc.len = in_desc->len;
    aee6:	f8d7 9004 	ldr.w	r9, [r7, #4]
    aeea:	f89b 3000 	ldrb.w	r3, [fp]
    aeee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    aef2:	f89b 3001 	ldrb.w	r3, [fp, #1]
    aef6:	4433      	add	r3, r6
    aef8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    aefc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    af00:	f013 0f02 	tst.w	r3, #2
    af04:	d10e      	bne.n	af24 <cbprintf_package_convert+0x3d8>
    af06:	69fb      	ldr	r3, [r7, #28]
    af08:	f3c3 0347 	ubfx	r3, r3, #1, #8
    af0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    af10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    af14:	f013 0f01 	tst.w	r3, #1
    af18:	d106      	bne.n	af28 <cbprintf_package_convert+0x3dc>
    af1a:	f013 0f04 	tst.w	r3, #4
    af1e:	d13f      	bne.n	afa0 <cbprintf_package_convert+0x454>
    af20:	2300      	movs	r3, #0
    af22:	e002      	b.n	af2a <cbprintf_package_convert+0x3de>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    af24:	2300      	movs	r3, #0
    af26:	e7f1      	b.n	af0c <cbprintf_package_convert+0x3c0>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    af28:	2300      	movs	r3, #0
    af2a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    af2e:	f8db 0000 	ldr.w	r0, [fp]
    af32:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
    af34:	6d78      	ldr	r0, [r7, #84]	; 0x54
    af36:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
    af3a:	f8d7 8010 	ldr.w	r8, [r7, #16]
    af3e:	4642      	mov	r2, r8
    af40:	68b9      	ldr	r1, [r7, #8]
    af42:	4658      	mov	r0, fp
    af44:	f8d7 a018 	ldr.w	sl, [r7, #24]
    af48:	47d0      	blx	sl
	if (rv < 0) {
    af4a:	1e04      	subs	r4, r0, #0
    af4c:	f6ff ae51 	blt.w	abf2 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
    af50:	6b38      	ldr	r0, [r7, #48]	; 0x30
    af52:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    af56:	f8c7 8010 	str.w	r8, [r7, #16]
    af5a:	4642      	mov	r2, r8
    af5c:	69f9      	ldr	r1, [r7, #28]
    af5e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    af62:	47d0      	blx	sl
	if (rv < 0) {
    af64:	2800      	cmp	r0, #0
    af66:	db58      	blt.n	b01a <cbprintf_package_convert+0x4ce>
	out_len += rv;
    af68:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    af6c:	68b9      	ldr	r1, [r7, #8]
    af6e:	4449      	add	r1, r9
    af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af72:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
    af76:	f8d7 9010 	ldr.w	r9, [r7, #16]
    af7a:	464a      	mov	r2, r9
    af7c:	68fb      	ldr	r3, [r7, #12]
    af7e:	1a59      	subs	r1, r3, r1
    af80:	4628      	mov	r0, r5
    af82:	47d0      	blx	sl
	if (rv < 0) {
    af84:	1e04      	subs	r4, r0, #0
    af86:	f6ff ae34 	blt.w	abf2 <cbprintf_package_convert+0xa6>
	out_len += rv;
    af8a:	eb08 0504 	add.w	r5, r8, r4
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    af8e:	f04f 0800 	mov.w	r8, #0
    af92:	627e      	str	r6, [r7, #36]	; 0x24
    af94:	f8c7 b020 	str.w	fp, [r7, #32]
    af98:	4656      	mov	r6, sl
    af9a:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
    af9e:	e020      	b.n	afe2 <cbprintf_package_convert+0x496>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    afa0:	69fb      	ldr	r3, [r7, #28]
    afa2:	e7c2      	b.n	af2a <cbprintf_package_convert+0x3de>
    afa4:	0001a3bc 	.word	0x0001a3bc
    afa8:	0001a464 	.word	0x0001a464
    afac:	0001a0e4 	.word	0x0001a0e4
    afb0:	00019e20 	.word	0x00019e20
    afb4:	0001bcdc 	.word	0x0001bcdc
		uint16_t str_len = strl ? strl[i] : 0;
    afb8:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    afbc:	464a      	mov	r2, r9
    afbe:	2101      	movs	r1, #1
    afc0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    afc4:	47b0      	blx	r6
		if (rv < 0) {
    afc6:	2800      	cmp	r0, #0
    afc8:	db29      	blt.n	b01e <cbprintf_package_convert+0x4d2>
		out_len += rv;
    afca:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    afcc:	4653      	mov	r3, sl
    afce:	4622      	mov	r2, r4
    afd0:	4649      	mov	r1, r9
    afd2:	4630      	mov	r0, r6
    afd4:	f00a ff29 	bl	15e2a <append_string>
		if (rv < 0) {
    afd8:	2800      	cmp	r0, #0
    afda:	db22      	blt.n	b022 <cbprintf_package_convert+0x4d6>
		out_len += rv;
    afdc:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    afde:	f108 0801 	add.w	r8, r8, #1
    afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afe4:	4598      	cmp	r8, r3
    afe6:	d211      	bcs.n	b00c <cbprintf_package_convert+0x4c0>
		uint8_t loc = cpy_str_pos[i];
    afe8:	f108 0330 	add.w	r3, r8, #48	; 0x30
    afec:	f107 0228 	add.w	r2, r7, #40	; 0x28
    aff0:	4413      	add	r3, r2
    aff2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    aff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
    affa:	6a3a      	ldr	r2, [r7, #32]
    affc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    b000:	f1bb 0f00 	cmp.w	fp, #0
    b004:	d0d8      	beq.n	afb8 <cbprintf_package_convert+0x46c>
    b006:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
    b00a:	e7d7      	b.n	afbc <cbprintf_package_convert+0x470>
	(void)cb(NULL, 0, ctx);
    b00c:	693a      	ldr	r2, [r7, #16]
    b00e:	2100      	movs	r1, #0
    b010:	4608      	mov	r0, r1
    b012:	69bb      	ldr	r3, [r7, #24]
    b014:	4798      	blx	r3
	return out_len;
    b016:	462c      	mov	r4, r5
    b018:	e5eb      	b.n	abf2 <cbprintf_package_convert+0xa6>
		return rv;
    b01a:	4604      	mov	r4, r0
    b01c:	e5e9      	b.n	abf2 <cbprintf_package_convert+0xa6>
    b01e:	4604      	mov	r4, r0
    b020:	e5e7      	b.n	abf2 <cbprintf_package_convert+0xa6>
    b022:	4604      	mov	r4, r0
    b024:	e5e5      	b.n	abf2 <cbprintf_package_convert+0xa6>
    b026:	bf00      	nop

0000b028 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    b028:	4b01      	ldr	r3, [pc, #4]	; (b030 <__printk_hook_install+0x8>)
    b02a:	6018      	str	r0, [r3, #0]
}
    b02c:	4770      	bx	lr
    b02e:	bf00      	nop
    b030:	200002cc 	.word	0x200002cc

0000b034 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    b034:	b510      	push	{r4, lr}
    b036:	b086      	sub	sp, #24
    b038:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    b03a:	9003      	str	r0, [sp, #12]
    b03c:	9104      	str	r1, [sp, #16]
    b03e:	2100      	movs	r1, #0
    b040:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    b042:	9100      	str	r1, [sp, #0]
    b044:	a903      	add	r1, sp, #12
    b046:	4806      	ldr	r0, [pc, #24]	; (b060 <vsnprintk+0x2c>)
    b048:	f000 f924 	bl	b294 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    b04c:	9b05      	ldr	r3, [sp, #20]
    b04e:	9a04      	ldr	r2, [sp, #16]
    b050:	4293      	cmp	r3, r2
    b052:	da01      	bge.n	b058 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    b054:	2200      	movs	r2, #0
    b056:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    b058:	9805      	ldr	r0, [sp, #20]
    b05a:	b006      	add	sp, #24
    b05c:	bd10      	pop	{r4, pc}
    b05e:	bf00      	nop
    b060:	00015f0b 	.word	0x00015f0b

0000b064 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b068:	b083      	sub	sp, #12
    b06a:	4604      	mov	r4, r0
    b06c:	4608      	mov	r0, r1
    b06e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b070:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b072:	f013 0f08 	tst.w	r3, #8
    b076:	d105      	bne.n	b084 <process_event+0x20>
    b078:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    b07c:	2300      	movs	r3, #0
    b07e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    b080:	9301      	str	r3, [sp, #4]
}
    b082:	e055      	b.n	b130 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    b084:	2901      	cmp	r1, #1
    b086:	d009      	beq.n	b09c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    b088:	f043 0320 	orr.w	r3, r3, #32
    b08c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    b08e:	f385 8811 	msr	BASEPRI, r5
    b092:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b096:	b003      	add	sp, #12
    b098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    b09c:	f043 0310 	orr.w	r3, r3, #16
    b0a0:	8323      	strh	r3, [r4, #24]
    b0a2:	e7f4      	b.n	b08e <process_event+0x2a>
			evt = process_recheck(mgr);
    b0a4:	4620      	mov	r0, r4
    b0a6:	f00b f9a1 	bl	163ec <process_recheck>
    b0aa:	e043      	b.n	b134 <process_event+0xd0>
			res = mgr->last_res;
    b0ac:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    b0b0:	464a      	mov	r2, r9
    b0b2:	4669      	mov	r1, sp
    b0b4:	4620      	mov	r0, r4
    b0b6:	f00b f9b2 	bl	1641e <process_complete>
		onoff_transition_fn transit = NULL;
    b0ba:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b0be:	8b23      	ldrh	r3, [r4, #24]
    b0c0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b0c4:	42b7      	cmp	r7, r6
    b0c6:	d069      	beq.n	b19c <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    b0c8:	68a2      	ldr	r2, [r4, #8]
    b0ca:	2a00      	cmp	r2, #0
    b0cc:	d066      	beq.n	b19c <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b0ce:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b0d0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    b0d4:	8323      	strh	r3, [r4, #24]
    b0d6:	f385 8811 	msr	BASEPRI, r5
    b0da:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    b0de:	2a00      	cmp	r2, #0
    b0e0:	d164      	bne.n	b1ac <process_event+0x148>
    b0e2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    b0e4:	b12b      	cbz	r3, b0f2 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    b0e6:	464b      	mov	r3, r9
    b0e8:	463a      	mov	r2, r7
    b0ea:	4669      	mov	r1, sp
    b0ec:	4620      	mov	r0, r4
    b0ee:	f00b fa0f 	bl	16510 <notify_all>
			if (transit != NULL) {
    b0f2:	f1b8 0f00 	cmp.w	r8, #0
    b0f6:	d002      	beq.n	b0fe <process_event+0x9a>
				transit(mgr, transition_complete);
    b0f8:	4934      	ldr	r1, [pc, #208]	; (b1cc <process_event+0x168>)
    b0fa:	4620      	mov	r0, r4
    b0fc:	47c0      	blx	r8
	__asm__ volatile(
    b0fe:	f04f 0340 	mov.w	r3, #64	; 0x40
    b102:	f3ef 8511 	mrs	r5, BASEPRI
    b106:	f383 8812 	msr	BASEPRI_MAX, r3
    b10a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b10e:	8b23      	ldrh	r3, [r4, #24]
    b110:	f023 0308 	bic.w	r3, r3, #8
    b114:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b116:	8b23      	ldrh	r3, [r4, #24]
    b118:	f013 0f10 	tst.w	r3, #16
    b11c:	d04c      	beq.n	b1b8 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b11e:	f023 0310 	bic.w	r3, r3, #16
    b122:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    b124:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    b126:	8b26      	ldrh	r6, [r4, #24]
    b128:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    b12c:	2800      	cmp	r0, #0
    b12e:	d0ae      	beq.n	b08e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    b130:	2802      	cmp	r0, #2
    b132:	d0b7      	beq.n	b0a4 <process_event+0x40>
		if (evt == EVT_NOP) {
    b134:	2800      	cmp	r0, #0
    b136:	d0aa      	beq.n	b08e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    b138:	3801      	subs	r0, #1
    b13a:	2804      	cmp	r0, #4
    b13c:	d82a      	bhi.n	b194 <process_event+0x130>
    b13e:	a301      	add	r3, pc, #4	; (adr r3, b144 <process_event+0xe0>)
    b140:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    b144:	0000b0ad 	.word	0x0000b0ad
    b148:	0000b195 	.word	0x0000b195
    b14c:	0000b159 	.word	0x0000b159
    b150:	0000b16d 	.word	0x0000b16d
    b154:	0000b181 	.word	0x0000b181
			transit = mgr->transitions->start;
    b158:	6923      	ldr	r3, [r4, #16]
    b15a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    b15e:	2106      	movs	r1, #6
    b160:	4620      	mov	r0, r4
    b162:	f00b f919 	bl	16398 <set_state>
		res = 0;
    b166:	f04f 0900 	mov.w	r9, #0
    b16a:	e7a8      	b.n	b0be <process_event+0x5a>
			transit = mgr->transitions->stop;
    b16c:	6923      	ldr	r3, [r4, #16]
    b16e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    b172:	2104      	movs	r1, #4
    b174:	4620      	mov	r0, r4
    b176:	f00b f90f 	bl	16398 <set_state>
		res = 0;
    b17a:	f04f 0900 	mov.w	r9, #0
    b17e:	e79e      	b.n	b0be <process_event+0x5a>
			transit = mgr->transitions->reset;
    b180:	6923      	ldr	r3, [r4, #16]
    b182:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    b186:	2105      	movs	r1, #5
    b188:	4620      	mov	r0, r4
    b18a:	f00b f905 	bl	16398 <set_state>
		res = 0;
    b18e:	f04f 0900 	mov.w	r9, #0
    b192:	e794      	b.n	b0be <process_event+0x5a>
		if (evt == EVT_NOP) {
    b194:	f04f 0800 	mov.w	r8, #0
    b198:	46c1      	mov	r9, r8
    b19a:	e790      	b.n	b0be <process_event+0x5a>
    b19c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    b19e:	b10a      	cbz	r2, b1a4 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b1a0:	2200      	movs	r2, #0
    b1a2:	e795      	b.n	b0d0 <process_event+0x6c>
		    || (transit != NULL)) {
    b1a4:	f1b8 0f00 	cmp.w	r8, #0
    b1a8:	d192      	bne.n	b0d0 <process_event+0x6c>
    b1aa:	e7b4      	b.n	b116 <process_event+0xb2>
				notify_monitors(mgr, state, res);
    b1ac:	464a      	mov	r2, r9
    b1ae:	4639      	mov	r1, r7
    b1b0:	4620      	mov	r0, r4
    b1b2:	f00b f8f9 	bl	163a8 <notify_monitors>
    b1b6:	e794      	b.n	b0e2 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b1b8:	f013 0f20 	tst.w	r3, #32
    b1bc:	d004      	beq.n	b1c8 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b1be:	f023 0320 	bic.w	r3, r3, #32
    b1c2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    b1c4:	2002      	movs	r0, #2
    b1c6:	e7ae      	b.n	b126 <process_event+0xc2>
		evt = EVT_NOP;
    b1c8:	2000      	movs	r0, #0
    b1ca:	e7ac      	b.n	b126 <process_event+0xc2>
    b1cc:	0001653f 	.word	0x0001653f

0000b1d0 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    b1d0:	4684      	mov	ip, r0
    b1d2:	4608      	mov	r0, r1
	bool loop = true;
    b1d4:	2201      	movs	r2, #1
    b1d6:	e026      	b.n	b226 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    b1d8:	f89c 3000 	ldrb.w	r3, [ip]
    b1dc:	f043 0304 	orr.w	r3, r3, #4
    b1e0:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    b1e4:	b1f2      	cbz	r2, b224 <extract_flags+0x54>
			++sp;
    b1e6:	3001      	adds	r0, #1
    b1e8:	e01c      	b.n	b224 <extract_flags+0x54>
			conv->flag_plus = true;
    b1ea:	f89c 3000 	ldrb.w	r3, [ip]
    b1ee:	f043 0308 	orr.w	r3, r3, #8
    b1f2:	f88c 3000 	strb.w	r3, [ip]
			break;
    b1f6:	e7f5      	b.n	b1e4 <extract_flags+0x14>
			conv->flag_space = true;
    b1f8:	f89c 3000 	ldrb.w	r3, [ip]
    b1fc:	f043 0310 	orr.w	r3, r3, #16
    b200:	f88c 3000 	strb.w	r3, [ip]
			break;
    b204:	e7ee      	b.n	b1e4 <extract_flags+0x14>
			conv->flag_hash = true;
    b206:	f89c 3000 	ldrb.w	r3, [ip]
    b20a:	f043 0320 	orr.w	r3, r3, #32
    b20e:	f88c 3000 	strb.w	r3, [ip]
			break;
    b212:	e7e7      	b.n	b1e4 <extract_flags+0x14>
			conv->flag_zero = true;
    b214:	f89c 3000 	ldrb.w	r3, [ip]
    b218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b21c:	f88c 3000 	strb.w	r3, [ip]
			break;
    b220:	e7e0      	b.n	b1e4 <extract_flags+0x14>
		switch (*sp) {
    b222:	2200      	movs	r2, #0
		}
	} while (loop);
    b224:	b342      	cbz	r2, b278 <extract_flags+0xa8>
		switch (*sp) {
    b226:	7803      	ldrb	r3, [r0, #0]
    b228:	3b20      	subs	r3, #32
    b22a:	2b10      	cmp	r3, #16
    b22c:	d8f9      	bhi.n	b222 <extract_flags+0x52>
    b22e:	a101      	add	r1, pc, #4	; (adr r1, b234 <extract_flags+0x64>)
    b230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    b234:	0000b1f9 	.word	0x0000b1f9
    b238:	0000b223 	.word	0x0000b223
    b23c:	0000b223 	.word	0x0000b223
    b240:	0000b207 	.word	0x0000b207
    b244:	0000b223 	.word	0x0000b223
    b248:	0000b223 	.word	0x0000b223
    b24c:	0000b223 	.word	0x0000b223
    b250:	0000b223 	.word	0x0000b223
    b254:	0000b223 	.word	0x0000b223
    b258:	0000b223 	.word	0x0000b223
    b25c:	0000b223 	.word	0x0000b223
    b260:	0000b1eb 	.word	0x0000b1eb
    b264:	0000b223 	.word	0x0000b223
    b268:	0000b1d9 	.word	0x0000b1d9
    b26c:	0000b223 	.word	0x0000b223
    b270:	0000b223 	.word	0x0000b223
    b274:	0000b215 	.word	0x0000b215

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    b278:	f89c 3000 	ldrb.w	r3, [ip]
    b27c:	f003 0344 	and.w	r3, r3, #68	; 0x44
    b280:	2b44      	cmp	r3, #68	; 0x44
    b282:	d000      	beq.n	b286 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    b284:	4770      	bx	lr
		conv->flag_zero = false;
    b286:	f89c 3000 	ldrb.w	r3, [ip]
    b28a:	f36f 1386 	bfc	r3, #6, #1
    b28e:	f88c 3000 	strb.w	r3, [ip]
    b292:	e7f7      	b.n	b284 <extract_flags+0xb4>

0000b294 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b298:	b091      	sub	sp, #68	; 0x44
    b29a:	4606      	mov	r6, r0
    b29c:	460d      	mov	r5, r1
    b29e:	4691      	mov	r9, r2
    b2a0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b2a2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b2a4:	f899 0000 	ldrb.w	r0, [r9]
    b2a8:	2800      	cmp	r0, #0
    b2aa:	f000 82b9 	beq.w	b820 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    b2ae:	2825      	cmp	r0, #37	; 0x25
    b2b0:	d008      	beq.n	b2c4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    b2b2:	f109 0901 	add.w	r9, r9, #1
    b2b6:	4629      	mov	r1, r5
    b2b8:	47b0      	blx	r6
    b2ba:	2800      	cmp	r0, #0
    b2bc:	f2c0 82b1 	blt.w	b822 <z_cbvprintf_impl+0x58e>
    b2c0:	3401      	adds	r4, #1
			continue;
    b2c2:	e7ef      	b.n	b2a4 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    b2c4:	2300      	movs	r3, #0
    b2c6:	9304      	str	r3, [sp, #16]
    b2c8:	9305      	str	r3, [sp, #20]
    b2ca:	9306      	str	r3, [sp, #24]
    b2cc:	9307      	str	r3, [sp, #28]
    b2ce:	9308      	str	r3, [sp, #32]
    b2d0:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    b2d2:	4649      	mov	r1, r9
    b2d4:	a806      	add	r0, sp, #24
    b2d6:	f00b fb62 	bl	1699e <extract_conversion>
    b2da:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    b2dc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b2e0:	f013 0f01 	tst.w	r3, #1
    b2e4:	f000 8097 	beq.w	b416 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    b2e8:	9b03      	ldr	r3, [sp, #12]
    b2ea:	1d1a      	adds	r2, r3, #4
    b2ec:	9203      	str	r2, [sp, #12]
    b2ee:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    b2f0:	2f00      	cmp	r7, #0
    b2f2:	f2c0 8088 	blt.w	b406 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    b2f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b2fa:	f013 0f04 	tst.w	r3, #4
    b2fe:	f000 809c 	beq.w	b43a <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    b302:	9b03      	ldr	r3, [sp, #12]
    b304:	1d1a      	adds	r2, r3, #4
    b306:	9203      	str	r2, [sp, #12]
    b308:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    b30c:	f1ba 0f00 	cmp.w	sl, #0
    b310:	f2c0 808a 	blt.w	b428 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    b314:	2300      	movs	r3, #0
    b316:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    b318:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    b31a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b31e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    b322:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b326:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    b32a:	2b01      	cmp	r3, #1
    b32c:	f000 808e 	beq.w	b44c <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    b330:	2b02      	cmp	r3, #2
    b332:	f000 80d3 	beq.w	b4dc <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    b336:	2b04      	cmp	r3, #4
    b338:	f000 8124 	beq.w	b584 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    b33c:	2b03      	cmp	r3, #3
    b33e:	f000 813b 	beq.w	b5b8 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    b342:	f89d 8018 	ldrb.w	r8, [sp, #24]
    b346:	f018 0b03 	ands.w	fp, r8, #3
    b34a:	f040 813b 	bne.w	b5c4 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    b34e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b352:	3b25      	subs	r3, #37	; 0x25
    b354:	2b53      	cmp	r3, #83	; 0x53
    b356:	f200 81ca 	bhi.w	b6ee <z_cbvprintf_impl+0x45a>
    b35a:	e8df f013 	tbh	[pc, r3, lsl #1]
    b35e:	0140      	.short	0x0140
    b360:	01c801c8 	.word	0x01c801c8
    b364:	01c801c8 	.word	0x01c801c8
    b368:	01c801c8 	.word	0x01c801c8
    b36c:	01c801c8 	.word	0x01c801c8
    b370:	01c801c8 	.word	0x01c801c8
    b374:	01c801c8 	.word	0x01c801c8
    b378:	01c801c8 	.word	0x01c801c8
    b37c:	01c801c8 	.word	0x01c801c8
    b380:	01c801c8 	.word	0x01c801c8
    b384:	01c801c8 	.word	0x01c801c8
    b388:	01c801c8 	.word	0x01c801c8
    b38c:	01c801c8 	.word	0x01c801c8
    b390:	01c801c8 	.word	0x01c801c8
    b394:	01c801c8 	.word	0x01c801c8
    b398:	01c801c8 	.word	0x01c801c8
    b39c:	01c801c8 	.word	0x01c801c8
    b3a0:	01c801c8 	.word	0x01c801c8
    b3a4:	01c801c8 	.word	0x01c801c8
    b3a8:	01c801c8 	.word	0x01c801c8
    b3ac:	01c801c8 	.word	0x01c801c8
    b3b0:	01c801c8 	.word	0x01c801c8
    b3b4:	01c801c8 	.word	0x01c801c8
    b3b8:	01c801c8 	.word	0x01c801c8
    b3bc:	01c801c8 	.word	0x01c801c8
    b3c0:	01c801c8 	.word	0x01c801c8
    b3c4:	01c80181 	.word	0x01c80181
    b3c8:	01c801c8 	.word	0x01c801c8
    b3cc:	01c801c8 	.word	0x01c801c8
    b3d0:	01c801c8 	.word	0x01c801c8
    b3d4:	01c801c8 	.word	0x01c801c8
    b3d8:	015e01c8 	.word	0x015e01c8
    b3dc:	01c80167 	.word	0x01c80167
    b3e0:	01c801c8 	.word	0x01c801c8
    b3e4:	016701c8 	.word	0x016701c8
    b3e8:	01c801c8 	.word	0x01c801c8
    b3ec:	01c801c8 	.word	0x01c801c8
    b3f0:	018101bd 	.word	0x018101bd
    b3f4:	01c801a1 	.word	0x01c801a1
    b3f8:	014d01c8 	.word	0x014d01c8
    b3fc:	018101c8 	.word	0x018101c8
    b400:	01c801c8 	.word	0x01c801c8
    b404:	0181      	.short	0x0181
				conv->flag_dash = true;
    b406:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b40a:	f043 0304 	orr.w	r3, r3, #4
    b40e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    b412:	427f      	negs	r7, r7
    b414:	e76f      	b.n	b2f6 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    b416:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    b41a:	2b00      	cmp	r3, #0
    b41c:	db02      	blt.n	b424 <z_cbvprintf_impl+0x190>
		int width = -1;
    b41e:	f04f 37ff 	mov.w	r7, #4294967295
    b422:	e768      	b.n	b2f6 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    b424:	9f07      	ldr	r7, [sp, #28]
    b426:	e766      	b.n	b2f6 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    b428:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b42c:	f36f 0341 	bfc	r3, #1, #1
    b430:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    b434:	f04f 3aff 	mov.w	sl, #4294967295
    b438:	e76c      	b.n	b314 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    b43a:	f013 0f02 	tst.w	r3, #2
    b43e:	d002      	beq.n	b446 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    b440:	f8dd a020 	ldr.w	sl, [sp, #32]
    b444:	e766      	b.n	b314 <z_cbvprintf_impl+0x80>
		int precision = -1;
    b446:	f04f 3aff 	mov.w	sl, #4294967295
    b44a:	e763      	b.n	b314 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    b44c:	1ecb      	subs	r3, r1, #3
    b44e:	2b04      	cmp	r3, #4
    b450:	d804      	bhi.n	b45c <z_cbvprintf_impl+0x1c8>
    b452:	e8df f003 	tbb	[pc, r3]
    b456:	1d0b      	.short	0x1d0b
    b458:	3529      	.short	0x3529
    b45a:	35          	.byte	0x35
    b45b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b45c:	9b03      	ldr	r3, [sp, #12]
    b45e:	1d1a      	adds	r2, r3, #4
    b460:	9203      	str	r2, [sp, #12]
    b462:	681b      	ldr	r3, [r3, #0]
    b464:	17da      	asrs	r2, r3, #31
    b466:	9304      	str	r3, [sp, #16]
    b468:	9205      	str	r2, [sp, #20]
				break;
    b46a:	e006      	b.n	b47a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    b46c:	9b03      	ldr	r3, [sp, #12]
    b46e:	1d1a      	adds	r2, r3, #4
    b470:	9203      	str	r2, [sp, #12]
    b472:	681b      	ldr	r3, [r3, #0]
    b474:	17da      	asrs	r2, r3, #31
    b476:	9304      	str	r3, [sp, #16]
    b478:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    b47a:	2901      	cmp	r1, #1
    b47c:	d028      	beq.n	b4d0 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    b47e:	2902      	cmp	r1, #2
    b480:	f47f af5f 	bne.w	b342 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    b484:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    b488:	17da      	asrs	r2, r3, #31
    b48a:	9304      	str	r3, [sp, #16]
    b48c:	9205      	str	r2, [sp, #20]
    b48e:	e758      	b.n	b342 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    b490:	9b03      	ldr	r3, [sp, #12]
    b492:	3307      	adds	r3, #7
    b494:	f023 0307 	bic.w	r3, r3, #7
    b498:	f103 0208 	add.w	r2, r3, #8
    b49c:	9203      	str	r2, [sp, #12]
    b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b4a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b4a6:	e7e8      	b.n	b47a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    b4a8:	9b03      	ldr	r3, [sp, #12]
    b4aa:	3307      	adds	r3, #7
    b4ac:	f023 0307 	bic.w	r3, r3, #7
    b4b0:	f103 0208 	add.w	r2, r3, #8
    b4b4:	9203      	str	r2, [sp, #12]
    b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b4be:	e7dc      	b.n	b47a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b4c0:	9b03      	ldr	r3, [sp, #12]
    b4c2:	1d1a      	adds	r2, r3, #4
    b4c4:	9203      	str	r2, [sp, #12]
    b4c6:	681b      	ldr	r3, [r3, #0]
    b4c8:	17da      	asrs	r2, r3, #31
				value->sint =
    b4ca:	9304      	str	r3, [sp, #16]
    b4cc:	9205      	str	r2, [sp, #20]
				break;
    b4ce:	e7d4      	b.n	b47a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    b4d0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    b4d4:	17da      	asrs	r2, r3, #31
    b4d6:	9304      	str	r3, [sp, #16]
    b4d8:	9205      	str	r2, [sp, #20]
    b4da:	e732      	b.n	b342 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    b4dc:	1ecb      	subs	r3, r1, #3
    b4de:	2b04      	cmp	r3, #4
    b4e0:	d804      	bhi.n	b4ec <z_cbvprintf_impl+0x258>
    b4e2:	e8df f003 	tbb	[pc, r3]
    b4e6:	1f0b      	.short	0x1f0b
    b4e8:	4135      	.short	0x4135
    b4ea:	41          	.byte	0x41
    b4eb:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    b4ec:	9b03      	ldr	r3, [sp, #12]
    b4ee:	1d1a      	adds	r2, r3, #4
    b4f0:	9203      	str	r2, [sp, #12]
    b4f2:	681b      	ldr	r3, [r3, #0]
    b4f4:	9304      	str	r3, [sp, #16]
    b4f6:	2300      	movs	r3, #0
    b4f8:	9305      	str	r3, [sp, #20]
				break;
    b4fa:	e01e      	b.n	b53a <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    b4fc:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    b500:	2b63      	cmp	r3, #99	; 0x63
    b502:	d007      	beq.n	b514 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    b504:	9b03      	ldr	r3, [sp, #12]
    b506:	1d1a      	adds	r2, r3, #4
    b508:	9203      	str	r2, [sp, #12]
    b50a:	681b      	ldr	r3, [r3, #0]
    b50c:	9304      	str	r3, [sp, #16]
    b50e:	2300      	movs	r3, #0
    b510:	9305      	str	r3, [sp, #20]
    b512:	e012      	b.n	b53a <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    b514:	9b03      	ldr	r3, [sp, #12]
    b516:	1d1a      	adds	r2, r3, #4
    b518:	9203      	str	r2, [sp, #12]
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	9304      	str	r3, [sp, #16]
    b51e:	2300      	movs	r3, #0
    b520:	9305      	str	r3, [sp, #20]
    b522:	e00a      	b.n	b53a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    b524:	9b03      	ldr	r3, [sp, #12]
    b526:	3307      	adds	r3, #7
    b528:	f023 0307 	bic.w	r3, r3, #7
    b52c:	f103 0208 	add.w	r2, r3, #8
    b530:	9203      	str	r2, [sp, #12]
    b532:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    b536:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    b53a:	2901      	cmp	r1, #1
    b53c:	d01c      	beq.n	b578 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    b53e:	2902      	cmp	r1, #2
    b540:	f47f aeff 	bne.w	b342 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    b544:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b548:	9304      	str	r3, [sp, #16]
    b54a:	2300      	movs	r3, #0
    b54c:	9305      	str	r3, [sp, #20]
    b54e:	e6f8      	b.n	b342 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    b550:	9b03      	ldr	r3, [sp, #12]
    b552:	3307      	adds	r3, #7
    b554:	f023 0307 	bic.w	r3, r3, #7
    b558:	f103 0208 	add.w	r2, r3, #8
    b55c:	9203      	str	r2, [sp, #12]
    b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    b562:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b566:	e7e8      	b.n	b53a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    b568:	9b03      	ldr	r3, [sp, #12]
    b56a:	1d1a      	adds	r2, r3, #4
    b56c:	9203      	str	r2, [sp, #12]
    b56e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    b570:	9304      	str	r3, [sp, #16]
    b572:	2300      	movs	r3, #0
    b574:	9305      	str	r3, [sp, #20]
				break;
    b576:	e7e0      	b.n	b53a <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    b578:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b57c:	9304      	str	r3, [sp, #16]
    b57e:	2300      	movs	r3, #0
    b580:	9305      	str	r3, [sp, #20]
    b582:	e6de      	b.n	b342 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    b584:	2908      	cmp	r1, #8
    b586:	d00b      	beq.n	b5a0 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    b588:	9b03      	ldr	r3, [sp, #12]
    b58a:	3307      	adds	r3, #7
    b58c:	f023 0307 	bic.w	r3, r3, #7
    b590:	f103 0208 	add.w	r2, r3, #8
    b594:	9203      	str	r2, [sp, #12]
    b596:	e9d3 2300 	ldrd	r2, r3, [r3]
    b59a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b59e:	e6d0      	b.n	b342 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    b5a0:	9b03      	ldr	r3, [sp, #12]
    b5a2:	3307      	adds	r3, #7
    b5a4:	f023 0307 	bic.w	r3, r3, #7
    b5a8:	f103 0208 	add.w	r2, r3, #8
    b5ac:	9203      	str	r2, [sp, #12]
    b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b5b6:	e6c4      	b.n	b342 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    b5b8:	9b03      	ldr	r3, [sp, #12]
    b5ba:	1d1a      	adds	r2, r3, #4
    b5bc:	9203      	str	r2, [sp, #12]
    b5be:	681b      	ldr	r3, [r3, #0]
    b5c0:	9304      	str	r3, [sp, #16]
    b5c2:	e6be      	b.n	b342 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    b5c4:	9f02      	ldr	r7, [sp, #8]
    b5c6:	463b      	mov	r3, r7
    b5c8:	464a      	mov	r2, r9
    b5ca:	4629      	mov	r1, r5
    b5cc:	4630      	mov	r0, r6
    b5ce:	f00b fa8c 	bl	16aea <outs>
    b5d2:	2800      	cmp	r0, #0
    b5d4:	f2c0 8125 	blt.w	b822 <z_cbvprintf_impl+0x58e>
    b5d8:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    b5da:	46b9      	mov	r9, r7
			continue;
    b5dc:	e662      	b.n	b2a4 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    b5de:	4629      	mov	r1, r5
    b5e0:	2025      	movs	r0, #37	; 0x25
    b5e2:	47b0      	blx	r6
    b5e4:	2800      	cmp	r0, #0
    b5e6:	f2c0 811c 	blt.w	b822 <z_cbvprintf_impl+0x58e>
    b5ea:	3401      	adds	r4, #1
		char sign = 0;
    b5ec:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    b5ee:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    b5f2:	f04f 0900 	mov.w	r9, #0
			break;
    b5f6:	e07f      	b.n	b6f8 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    b5f8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    b5fc:	f1ba 0f00 	cmp.w	sl, #0
    b600:	db07      	blt.n	b612 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    b602:	4651      	mov	r1, sl
    b604:	4648      	mov	r0, r9
    b606:	f00b ffe4 	bl	175d2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    b60a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    b60e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    b610:	e072      	b.n	b6f8 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    b612:	4648      	mov	r0, r9
    b614:	f00b ffd4 	bl	175c0 <strlen>
    b618:	e7f7      	b.n	b60a <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b61a:	9b04      	ldr	r3, [sp, #16]
    b61c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    b620:	46d8      	mov	r8, fp
			bpe = buf + 1;
    b622:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    b626:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    b62a:	e065      	b.n	b6f8 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    b62c:	f018 0f08 	tst.w	r8, #8
    b630:	d105      	bne.n	b63e <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    b632:	f018 0810 	ands.w	r8, r8, #16
    b636:	d004      	beq.n	b642 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    b638:	f04f 0820 	mov.w	r8, #32
    b63c:	e001      	b.n	b642 <z_cbvprintf_impl+0x3ae>
				sign = '+';
    b63e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    b642:	9a04      	ldr	r2, [sp, #16]
    b644:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    b646:	2b00      	cmp	r3, #0
    b648:	db02      	blt.n	b650 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    b64a:	9204      	str	r2, [sp, #16]
    b64c:	9305      	str	r3, [sp, #20]
    b64e:	e008      	b.n	b662 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    b650:	4252      	negs	r2, r2
    b652:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b656:	9204      	str	r2, [sp, #16]
    b658:	9305      	str	r3, [sp, #20]
				sign = '-';
    b65a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    b65e:	e000      	b.n	b662 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    b660:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    b662:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b666:	9300      	str	r3, [sp, #0]
    b668:	ab0a      	add	r3, sp, #40	; 0x28
    b66a:	aa06      	add	r2, sp, #24
    b66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b670:	f00b f9cc 	bl	16a0c <encode_uint>
    b674:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    b676:	f1ba 0f00 	cmp.w	sl, #0
    b67a:	db6c      	blt.n	b756 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    b67c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b680:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    b684:	f89d 2018 	ldrb.w	r2, [sp, #24]
    b688:	f36f 1286 	bfc	r2, #6, #1
    b68c:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    b690:	459a      	cmp	sl, r3
    b692:	d963      	bls.n	b75c <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    b694:	ebaa 0303 	sub.w	r3, sl, r3
    b698:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    b69a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b69e:	e02b      	b.n	b6f8 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    b6a0:	9804      	ldr	r0, [sp, #16]
    b6a2:	b928      	cbnz	r0, b6b0 <z_cbvprintf_impl+0x41c>
		char sign = 0;
    b6a4:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    b6a6:	f8df a180 	ldr.w	sl, [pc, #384]	; b828 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    b6aa:	f1aa 0905 	sub.w	r9, sl, #5
    b6ae:	e023      	b.n	b6f8 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b6b0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b6b4:	9300      	str	r3, [sp, #0]
    b6b6:	ab0a      	add	r3, sp, #40	; 0x28
    b6b8:	aa06      	add	r2, sp, #24
    b6ba:	2100      	movs	r1, #0
    b6bc:	f00b f9a6 	bl	16a0c <encode_uint>
    b6c0:	4681      	mov	r9, r0
				conv->altform_0c = true;
    b6c2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b6c6:	f043 0310 	orr.w	r3, r3, #16
    b6ca:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    b6ce:	2378      	movs	r3, #120	; 0x78
    b6d0:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    b6d4:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    b6d6:	e7ce      	b.n	b676 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    b6d8:	4622      	mov	r2, r4
    b6da:	9904      	ldr	r1, [sp, #16]
    b6dc:	a806      	add	r0, sp, #24
    b6de:	f00b f9e5 	bl	16aac <store_count>
		char sign = 0;
    b6e2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    b6e4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    b6e8:	f04f 0900 	mov.w	r9, #0
			}

			break;
    b6ec:	e004      	b.n	b6f8 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    b6ee:	46d8      	mov	r8, fp
    b6f0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b6f4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    b6f8:	f1b9 0f00 	cmp.w	r9, #0
    b6fc:	f000 808d 	beq.w	b81a <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    b700:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    b704:	f1b8 0f00 	cmp.w	r8, #0
    b708:	d000      	beq.n	b70c <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    b70a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    b70c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    b710:	f012 0f10 	tst.w	r2, #16
    b714:	d025      	beq.n	b762 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    b716:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    b718:	9907      	ldr	r1, [sp, #28]
    b71a:	440b      	add	r3, r1
		if (conv->pad_fp) {
    b71c:	f012 0f40 	tst.w	r2, #64	; 0x40
    b720:	d001      	beq.n	b726 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    b722:	9a08      	ldr	r2, [sp, #32]
    b724:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    b726:	2f00      	cmp	r7, #0
    b728:	dd31      	ble.n	b78e <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    b72a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    b72c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b730:	f013 0f04 	tst.w	r3, #4
    b734:	d12b      	bne.n	b78e <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    b736:	f013 0f40 	tst.w	r3, #64	; 0x40
    b73a:	d017      	beq.n	b76c <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    b73c:	f1b8 0f00 	cmp.w	r8, #0
    b740:	d017      	beq.n	b772 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    b742:	4629      	mov	r1, r5
    b744:	4640      	mov	r0, r8
    b746:	47b0      	blx	r6
    b748:	2800      	cmp	r0, #0
    b74a:	db6a      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b74c:	3401      	adds	r4, #1
						sign = 0;
    b74e:	46d8      	mov	r8, fp
					}
					pad = '0';
    b750:	f04f 0b30 	mov.w	fp, #48	; 0x30
    b754:	e00f      	b.n	b776 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    b756:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b75a:	e7cd      	b.n	b6f8 <z_cbvprintf_impl+0x464>
    b75c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b760:	e7ca      	b.n	b6f8 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    b762:	f012 0f08 	tst.w	r2, #8
    b766:	d0d7      	beq.n	b718 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    b768:	3301      	adds	r3, #1
    b76a:	e7d5      	b.n	b718 <z_cbvprintf_impl+0x484>
				char pad = ' ';
    b76c:	f04f 0b20 	mov.w	fp, #32
    b770:	e001      	b.n	b776 <z_cbvprintf_impl+0x4e2>
					pad = '0';
    b772:	f04f 0b30 	mov.w	fp, #48	; 0x30
    b776:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    b778:	1e5f      	subs	r7, r3, #1
    b77a:	2b00      	cmp	r3, #0
    b77c:	dd07      	ble.n	b78e <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    b77e:	4629      	mov	r1, r5
    b780:	4658      	mov	r0, fp
    b782:	47b0      	blx	r6
    b784:	2800      	cmp	r0, #0
    b786:	db4c      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b788:	3401      	adds	r4, #1
				while (width-- > 0) {
    b78a:	463b      	mov	r3, r7
    b78c:	e7f4      	b.n	b778 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    b78e:	f1b8 0f00 	cmp.w	r8, #0
    b792:	d005      	beq.n	b7a0 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    b794:	4629      	mov	r1, r5
    b796:	4640      	mov	r0, r8
    b798:	47b0      	blx	r6
    b79a:	2800      	cmp	r0, #0
    b79c:	db41      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b79e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    b7a0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b7a4:	f3c3 1200 	ubfx	r2, r3, #4, #1
    b7a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    b7ac:	431a      	orrs	r2, r3
    b7ae:	d005      	beq.n	b7bc <z_cbvprintf_impl+0x528>
				OUTC('0');
    b7b0:	4629      	mov	r1, r5
    b7b2:	2030      	movs	r0, #48	; 0x30
    b7b4:	47b0      	blx	r6
    b7b6:	2800      	cmp	r0, #0
    b7b8:	db33      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b7ba:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    b7bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b7c0:	f013 0f10 	tst.w	r3, #16
    b7c4:	d006      	beq.n	b7d4 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    b7c6:	4629      	mov	r1, r5
    b7c8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    b7cc:	47b0      	blx	r6
    b7ce:	2800      	cmp	r0, #0
    b7d0:	db27      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b7d2:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    b7d4:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    b7d6:	f103 38ff 	add.w	r8, r3, #4294967295
    b7da:	2b00      	cmp	r3, #0
    b7dc:	dd07      	ble.n	b7ee <z_cbvprintf_impl+0x55a>
				OUTC('0');
    b7de:	4629      	mov	r1, r5
    b7e0:	2030      	movs	r0, #48	; 0x30
    b7e2:	47b0      	blx	r6
    b7e4:	2800      	cmp	r0, #0
    b7e6:	db1c      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b7e8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    b7ea:	4643      	mov	r3, r8
    b7ec:	e7f3      	b.n	b7d6 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    b7ee:	4653      	mov	r3, sl
    b7f0:	464a      	mov	r2, r9
    b7f2:	4629      	mov	r1, r5
    b7f4:	4630      	mov	r0, r6
    b7f6:	f00b f978 	bl	16aea <outs>
    b7fa:	2800      	cmp	r0, #0
    b7fc:	db11      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b7fe:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    b800:	2f00      	cmp	r7, #0
    b802:	dd07      	ble.n	b814 <z_cbvprintf_impl+0x580>
			OUTC(' ');
    b804:	4629      	mov	r1, r5
    b806:	2020      	movs	r0, #32
    b808:	47b0      	blx	r6
    b80a:	2800      	cmp	r0, #0
    b80c:	db09      	blt.n	b822 <z_cbvprintf_impl+0x58e>
    b80e:	3401      	adds	r4, #1
			--width;
    b810:	3f01      	subs	r7, #1
    b812:	e7f5      	b.n	b800 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    b814:	f8dd 9008 	ldr.w	r9, [sp, #8]
    b818:	e544      	b.n	b2a4 <z_cbvprintf_impl+0x10>
    b81a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    b81e:	e541      	b.n	b2a4 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    b820:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    b822:	b011      	add	sp, #68	; 0x44
    b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b828:	0001a499 	.word	0x0001a499

0000b82c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b82c:	f007 bdc6 	b.w	133bc <SystemInit>

0000b830 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
    b830:	b538      	push	{r3, r4, r5, lr}
    b832:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b834:	4c0b      	ldr	r4, [pc, #44]	; (b864 <msg_process+0x34>)
    b836:	e000      	b.n	b83a <msg_process+0xa>
    b838:	3410      	adds	r4, #16
    b83a:	4b0b      	ldr	r3, [pc, #44]	; (b868 <msg_process+0x38>)
    b83c:	429c      	cmp	r4, r3
    b83e:	d20f      	bcs.n	b860 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b840:	6863      	ldr	r3, [r4, #4]
    b842:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    b844:	2b00      	cmp	r3, #0
    b846:	d0f7      	beq.n	b838 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    b848:	4629      	mov	r1, r5
    b84a:	4620      	mov	r0, r4
    b84c:	f00b fc7d 	bl	1714a <msg_filter_check>
		if (log_backend_is_active(backend) &&
    b850:	2800      	cmp	r0, #0
    b852:	d0f1      	beq.n	b838 <msg_process+0x8>
	backend->api->process(backend, msg);
    b854:	6823      	ldr	r3, [r4, #0]
    b856:	681b      	ldr	r3, [r3, #0]
    b858:	4629      	mov	r1, r5
    b85a:	4620      	mov	r0, r4
    b85c:	4798      	blx	r3
}
    b85e:	e7eb      	b.n	b838 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    b860:	bd38      	pop	{r3, r4, r5, pc}
    b862:	bf00      	nop
    b864:	0001a164 	.word	0x0001a164
    b868:	0001a184 	.word	0x0001a184

0000b86c <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    b86c:	b570      	push	{r4, r5, r6, lr}
    b86e:	4606      	mov	r6, r0
    b870:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b872:	4c08      	ldr	r4, [pc, #32]	; (b894 <log_backend_notify_all+0x28>)
    b874:	e004      	b.n	b880 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    b876:	462a      	mov	r2, r5
    b878:	4631      	mov	r1, r6
    b87a:	4620      	mov	r0, r4
    b87c:	4798      	blx	r3
    b87e:	3410      	adds	r4, #16
    b880:	4b05      	ldr	r3, [pc, #20]	; (b898 <log_backend_notify_all+0x2c>)
    b882:	429c      	cmp	r4, r3
    b884:	d204      	bcs.n	b890 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    b886:	6823      	ldr	r3, [r4, #0]
    b888:	699b      	ldr	r3, [r3, #24]
    b88a:	2b00      	cmp	r3, #0
    b88c:	d1f3      	bne.n	b876 <log_backend_notify_all+0xa>
    b88e:	e7f6      	b.n	b87e <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    b890:	bd70      	pop	{r4, r5, r6, pc}
    b892:	bf00      	nop
    b894:	0001a164 	.word	0x0001a164
    b898:	0001a184 	.word	0x0001a184

0000b89c <activate_foreach_backend>:
{
    b89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8a0:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    b8a2:	4605      	mov	r5, r0
	while (mask_cpy) {
    b8a4:	e00a      	b.n	b8bc <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    b8a6:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    b8aa:	4b14      	ldr	r3, [pc, #80]	; (b8fc <activate_foreach_backend+0x60>)
    b8ac:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    b8b0:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    b8b2:	2204      	movs	r2, #4
    b8b4:	6819      	ldr	r1, [r3, #0]
    b8b6:	4620      	mov	r0, r4
    b8b8:	f000 faa8 	bl	be0c <log_backend_enable>
	while (mask_cpy) {
    b8bc:	b1d5      	cbz	r5, b8f4 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    b8be:	fa95 f6a5 	rbit	r6, r5
    b8c2:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    b8c6:	4c0d      	ldr	r4, [pc, #52]	; (b8fc <activate_foreach_backend+0x60>)
    b8c8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    b8cc:	2301      	movs	r3, #1
    b8ce:	40b3      	lsls	r3, r6
    b8d0:	ea6f 0803 	mvn.w	r8, r3
    b8d4:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b8d8:	7b23      	ldrb	r3, [r4, #12]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d0ee      	beq.n	b8bc <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    b8de:	0133      	lsls	r3, r6, #4
    b8e0:	4a06      	ldr	r2, [pc, #24]	; (b8fc <activate_foreach_backend+0x60>)
    b8e2:	58d3      	ldr	r3, [r2, r3]
    b8e4:	691b      	ldr	r3, [r3, #16]
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	d0dd      	beq.n	b8a6 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    b8ea:	4620      	mov	r0, r4
    b8ec:	4798      	blx	r3
    b8ee:	2800      	cmp	r0, #0
    b8f0:	d1e4      	bne.n	b8bc <activate_foreach_backend+0x20>
    b8f2:	e7d8      	b.n	b8a6 <activate_foreach_backend+0xa>
}
    b8f4:	4638      	mov	r0, r7
    b8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8fa:	bf00      	nop
    b8fc:	0001a164 	.word	0x0001a164

0000b900 <z_log_init>:
{
    b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b904:	4680      	mov	r8, r0
    b906:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b908:	4b20      	ldr	r3, [pc, #128]	; (b98c <z_log_init+0x8c>)
    b90a:	f3bf 8f5b 	dmb	ish
    b90e:	e853 5f00 	ldrex	r5, [r3]
    b912:	1c6a      	adds	r2, r5, #1
    b914:	e843 2100 	strex	r1, r2, [r3]
    b918:	2900      	cmp	r1, #0
    b91a:	d1f8      	bne.n	b90e <z_log_init+0xe>
    b91c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    b920:	2d00      	cmp	r5, #0
    b922:	d12f      	bne.n	b984 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b924:	4c1a      	ldr	r4, [pc, #104]	; (b990 <z_log_init+0x90>)
	int i = 0;
    b926:	2600      	movs	r6, #0
    b928:	e007      	b.n	b93a <z_log_init+0x3a>
						   backend->cb->ctx,
    b92a:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    b92c:	2204      	movs	r2, #4
    b92e:	6819      	ldr	r1, [r3, #0]
    b930:	4620      	mov	r0, r4
    b932:	f000 fa6b 	bl	be0c <log_backend_enable>
			i++;
    b936:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b938:	3410      	adds	r4, #16
    b93a:	4b16      	ldr	r3, [pc, #88]	; (b994 <z_log_init+0x94>)
    b93c:	429c      	cmp	r4, r3
    b93e:	d213      	bcs.n	b968 <z_log_init+0x68>
		if (backend->autostart) {
    b940:	7b23      	ldrb	r3, [r4, #12]
    b942:	2b00      	cmp	r3, #0
    b944:	d0f8      	beq.n	b938 <z_log_init+0x38>
	if (backend->api->init) {
    b946:	6823      	ldr	r3, [r4, #0]
    b948:	68db      	ldr	r3, [r3, #12]
    b94a:	b10b      	cbz	r3, b950 <z_log_init+0x50>
		backend->api->init(backend);
    b94c:	4620      	mov	r0, r4
    b94e:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    b950:	6823      	ldr	r3, [r4, #0]
    b952:	691b      	ldr	r3, [r3, #16]
    b954:	2b00      	cmp	r3, #0
    b956:	d0e8      	beq.n	b92a <z_log_init+0x2a>
		return backend->api->is_ready(backend);
    b958:	4620      	mov	r0, r4
    b95a:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b95c:	2800      	cmp	r0, #0
    b95e:	d0e4      	beq.n	b92a <z_log_init+0x2a>
				mask |= BIT(i);
    b960:	2301      	movs	r3, #1
    b962:	40b3      	lsls	r3, r6
    b964:	431d      	orrs	r5, r3
    b966:	e7e6      	b.n	b936 <z_log_init+0x36>
	if (blocking) {
    b968:	f1b8 0f00 	cmp.w	r8, #0
    b96c:	d00b      	beq.n	b986 <z_log_init+0x86>
		while (mask) {
    b96e:	b155      	cbz	r5, b986 <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
    b970:	4628      	mov	r0, r5
    b972:	f7ff ff93 	bl	b89c <activate_foreach_backend>
    b976:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b978:	2f00      	cmp	r7, #0
    b97a:	d0f8      	beq.n	b96e <z_log_init+0x6e>
				k_msleep(10);
    b97c:	200a      	movs	r0, #10
    b97e:	f00b fbea 	bl	17156 <k_msleep>
    b982:	e7f4      	b.n	b96e <z_log_init+0x6e>
		return 0;
    b984:	2500      	movs	r5, #0
}
    b986:	4628      	mov	r0, r5
    b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b98c:	20001ea4 	.word	0x20001ea4
    b990:	0001a164 	.word	0x0001a164
    b994:	0001a184 	.word	0x0001a184

0000b998 <thread_set>:
{
    b998:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    b99a:	4b06      	ldr	r3, [pc, #24]	; (b9b4 <thread_set+0x1c>)
    b99c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b99e:	b118      	cbz	r0, b9a8 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    b9a0:	4b05      	ldr	r3, [pc, #20]	; (b9b8 <thread_set+0x20>)
    b9a2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    b9a4:	2b09      	cmp	r3, #9
    b9a6:	dc00      	bgt.n	b9aa <thread_set+0x12>
}
    b9a8:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b9aa:	4804      	ldr	r0, [pc, #16]	; (b9bc <thread_set+0x24>)
    b9ac:	f009 f992 	bl	14cd4 <z_impl_k_sem_give>
}
    b9b0:	e7fa      	b.n	b9a8 <thread_set+0x10>
    b9b2:	bf00      	nop
    b9b4:	20001e98 	.word	0x20001e98
    b9b8:	20001ea0 	.word	0x20001ea0
    b9bc:	2000043c 	.word	0x2000043c

0000b9c0 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    b9c0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b9c2:	4802      	ldr	r0, [pc, #8]	; (b9cc <log_process_thread_timer_expiry_fn+0xc>)
    b9c4:	f009 f986 	bl	14cd4 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    b9c8:	bd08      	pop	{r3, pc}
    b9ca:	bf00      	nop
    b9cc:	2000043c 	.word	0x2000043c

0000b9d0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    b9d0:	b530      	push	{r4, r5, lr}
    b9d2:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    b9d4:	2200      	movs	r2, #0
    b9d6:	490f      	ldr	r1, [pc, #60]	; (ba14 <enable_logger+0x44>)
    b9d8:	480f      	ldr	r0, [pc, #60]	; (ba18 <enable_logger+0x48>)
    b9da:	f00e f848 	bl	19a6e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b9de:	4d0f      	ldr	r5, [pc, #60]	; (ba1c <enable_logger+0x4c>)
    b9e0:	2200      	movs	r2, #0
    b9e2:	2300      	movs	r3, #0
    b9e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b9e8:	2400      	movs	r4, #0
    b9ea:	9404      	str	r4, [sp, #16]
    b9ec:	230e      	movs	r3, #14
    b9ee:	9303      	str	r3, [sp, #12]
    b9f0:	9402      	str	r4, [sp, #8]
    b9f2:	9401      	str	r4, [sp, #4]
    b9f4:	9400      	str	r4, [sp, #0]
    b9f6:	4b0a      	ldr	r3, [pc, #40]	; (ba20 <enable_logger+0x50>)
    b9f8:	f44f 7240 	mov.w	r2, #768	; 0x300
    b9fc:	4909      	ldr	r1, [pc, #36]	; (ba24 <enable_logger+0x54>)
    b9fe:	4628      	mov	r0, r5
    ba00:	f00d fc62 	bl	192c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ba04:	4908      	ldr	r1, [pc, #32]	; (ba28 <enable_logger+0x58>)
    ba06:	4628      	mov	r0, r5
    ba08:	f008 ff78 	bl	148fc <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    ba0c:	4620      	mov	r0, r4
    ba0e:	b009      	add	sp, #36	; 0x24
    ba10:	bd30      	pop	{r4, r5, pc}
    ba12:	bf00      	nop
    ba14:	0000b9c1 	.word	0x0000b9c1
    ba18:	200017e0 	.word	0x200017e0
    ba1c:	20001320 	.word	0x20001320
    ba20:	0000bd6d 	.word	0x0000bd6d
    ba24:	20002700 	.word	0x20002700
    ba28:	0001a49c 	.word	0x0001a49c

0000ba2c <log_format_func_t_get>:
}
    ba2c:	4b01      	ldr	r3, [pc, #4]	; (ba34 <log_format_func_t_get+0x8>)
    ba2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ba32:	4770      	bx	lr
    ba34:	0001a4b8 	.word	0x0001a4b8

0000ba38 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    ba38:	b148      	cbz	r0, ba4e <log_set_timestamp_func+0x16>
{
    ba3a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    ba3c:	4a05      	ldr	r2, [pc, #20]	; (ba54 <log_set_timestamp_func+0x1c>)
    ba3e:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    ba40:	4b05      	ldr	r3, [pc, #20]	; (ba58 <log_set_timestamp_func+0x20>)
    ba42:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    ba44:	4608      	mov	r0, r1
    ba46:	f000 fcbb 	bl	c3c0 <log_output_timestamp_freq_set>
	return 0;
    ba4a:	2000      	movs	r0, #0
}
    ba4c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    ba4e:	f06f 0015 	mvn.w	r0, #21
}
    ba52:	4770      	bx	lr
    ba54:	200002d0 	.word	0x200002d0
    ba58:	20001e94 	.word	0x20001e94

0000ba5c <z_log_notify_backend_enabled>:
{
    ba5c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    ba5e:	4b05      	ldr	r3, [pc, #20]	; (ba74 <z_log_notify_backend_enabled+0x18>)
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	b11b      	cbz	r3, ba6c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    ba64:	4b03      	ldr	r3, [pc, #12]	; (ba74 <z_log_notify_backend_enabled+0x18>)
    ba66:	2201      	movs	r2, #1
    ba68:	701a      	strb	r2, [r3, #0]
}
    ba6a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    ba6c:	4802      	ldr	r0, [pc, #8]	; (ba78 <z_log_notify_backend_enabled+0x1c>)
    ba6e:	f009 f931 	bl	14cd4 <z_impl_k_sem_give>
}
    ba72:	e7f7      	b.n	ba64 <z_log_notify_backend_enabled+0x8>
    ba74:	200026d6 	.word	0x200026d6
    ba78:	2000043c 	.word	0x2000043c

0000ba7c <z_log_dropped>:
    ba7c:	4b0d      	ldr	r3, [pc, #52]	; (bab4 <z_log_dropped+0x38>)
    ba7e:	f3bf 8f5b 	dmb	ish
    ba82:	e853 1f00 	ldrex	r1, [r3]
    ba86:	3101      	adds	r1, #1
    ba88:	e843 1200 	strex	r2, r1, [r3]
    ba8c:	2a00      	cmp	r2, #0
    ba8e:	d1f8      	bne.n	ba82 <z_log_dropped+0x6>
    ba90:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    ba94:	b900      	cbnz	r0, ba98 <z_log_dropped+0x1c>
}
    ba96:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ba98:	4b07      	ldr	r3, [pc, #28]	; (bab8 <z_log_dropped+0x3c>)
    ba9a:	f3bf 8f5b 	dmb	ish
    ba9e:	e853 1f00 	ldrex	r1, [r3]
    baa2:	3901      	subs	r1, #1
    baa4:	e843 1200 	strex	r2, r1, [r3]
    baa8:	2a00      	cmp	r2, #0
    baaa:	d1f8      	bne.n	ba9e <z_log_dropped+0x22>
    baac:	f3bf 8f5b 	dmb	ish
    bab0:	e7f1      	b.n	ba96 <z_log_dropped+0x1a>
    bab2:	bf00      	nop
    bab4:	20001e9c 	.word	0x20001e9c
    bab8:	20001ea0 	.word	0x20001ea0

0000babc <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    babc:	4b06      	ldr	r3, [pc, #24]	; (bad8 <z_log_dropped_read_and_clear+0x1c>)
}
    babe:	2000      	movs	r0, #0
    bac0:	4601      	mov	r1, r0
    bac2:	f3bf 8f5b 	dmb	ish
    bac6:	e853 0f00 	ldrex	r0, [r3]
    baca:	e843 1200 	strex	r2, r1, [r3]
    bace:	2a00      	cmp	r2, #0
    bad0:	d1f9      	bne.n	bac6 <z_log_dropped_read_and_clear+0xa>
    bad2:	f3bf 8f5b 	dmb	ish
    bad6:	4770      	bx	lr
    bad8:	20001e9c 	.word	0x20001e9c

0000badc <dropped_notify>:
{
    badc:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    bade:	f7ff ffed 	bl	babc <z_log_dropped_read_and_clear>
    bae2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    bae4:	4c09      	ldr	r4, [pc, #36]	; (bb0c <dropped_notify+0x30>)
    bae6:	e000      	b.n	baea <dropped_notify+0xe>
    bae8:	3410      	adds	r4, #16
    baea:	4b09      	ldr	r3, [pc, #36]	; (bb10 <dropped_notify+0x34>)
    baec:	429c      	cmp	r4, r3
    baee:	d20b      	bcs.n	bb08 <dropped_notify+0x2c>
	return backend->cb->active;
    baf0:	6863      	ldr	r3, [r4, #4]
    baf2:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    baf4:	2b00      	cmp	r3, #0
    baf6:	d0f7      	beq.n	bae8 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    baf8:	6823      	ldr	r3, [r4, #0]
    bafa:	685b      	ldr	r3, [r3, #4]
    bafc:	2b00      	cmp	r3, #0
    bafe:	d0f3      	beq.n	bae8 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    bb00:	4629      	mov	r1, r5
    bb02:	4620      	mov	r0, r4
    bb04:	4798      	blx	r3
    bb06:	e7ef      	b.n	bae8 <dropped_notify+0xc>
}
    bb08:	bd38      	pop	{r3, r4, r5, pc}
    bb0a:	bf00      	nop
    bb0c:	0001a164 	.word	0x0001a164
    bb10:	0001a184 	.word	0x0001a184

0000bb14 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    bb14:	4b03      	ldr	r3, [pc, #12]	; (bb24 <z_log_dropped_pending+0x10>)
    bb16:	6818      	ldr	r0, [r3, #0]
}
    bb18:	2800      	cmp	r0, #0
    bb1a:	bfd4      	ite	le
    bb1c:	2000      	movle	r0, #0
    bb1e:	2001      	movgt	r0, #1
    bb20:	4770      	bx	lr
    bb22:	bf00      	nop
    bb24:	20001e9c 	.word	0x20001e9c

0000bb28 <z_log_msg_init>:
{
    bb28:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    bb2a:	4c04      	ldr	r4, [pc, #16]	; (bb3c <z_log_msg_init+0x14>)
    bb2c:	4904      	ldr	r1, [pc, #16]	; (bb40 <z_log_msg_init+0x18>)
    bb2e:	4620      	mov	r0, r4
    bb30:	f00b f95a 	bl	16de8 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    bb34:	4b03      	ldr	r3, [pc, #12]	; (bb44 <z_log_msg_init+0x1c>)
    bb36:	601c      	str	r4, [r3, #0]
}
    bb38:	bd10      	pop	{r4, pc}
    bb3a:	bf00      	nop
    bb3c:	200003d0 	.word	0x200003d0
    bb40:	0001a4a4 	.word	0x0001a4a4
    bb44:	20001e90 	.word	0x20001e90

0000bb48 <log_core_init>:
{
    bb48:	b508      	push	{r3, lr}
	panic_mode = false;
    bb4a:	2300      	movs	r3, #0
    bb4c:	4a06      	ldr	r2, [pc, #24]	; (bb68 <log_core_init+0x20>)
    bb4e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    bb50:	4a06      	ldr	r2, [pc, #24]	; (bb6c <log_core_init+0x24>)
    bb52:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    bb54:	4a06      	ldr	r2, [pc, #24]	; (bb70 <log_core_init+0x28>)
    bb56:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    bb58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    bb5c:	4805      	ldr	r0, [pc, #20]	; (bb74 <log_core_init+0x2c>)
    bb5e:	f7ff ff6b 	bl	ba38 <log_set_timestamp_func>
		z_log_msg_init();
    bb62:	f7ff ffe1 	bl	bb28 <z_log_msg_init>
}
    bb66:	bd08      	pop	{r3, pc}
    bb68:	200026d7 	.word	0x200026d7
    bb6c:	20001e9c 	.word	0x20001e9c
    bb70:	20001ea0 	.word	0x20001ea0
    bb74:	0001714f 	.word	0x0001714f

0000bb78 <z_log_msg_alloc>:
{
    bb78:	b508      	push	{r3, lr}
    bb7a:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    bb7c:	4801      	ldr	r0, [pc, #4]	; (bb84 <z_log_msg_alloc+0xc>)
    bb7e:	f00b fb00 	bl	17182 <msg_alloc>
}
    bb82:	bd08      	pop	{r3, pc}
    bb84:	200003d0 	.word	0x200003d0

0000bb88 <z_log_msg_local_claim>:
{
    bb88:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    bb8a:	4802      	ldr	r0, [pc, #8]	; (bb94 <z_log_msg_local_claim+0xc>)
    bb8c:	f00b fa10 	bl	16fb0 <mpsc_pbuf_claim>
}
    bb90:	bd08      	pop	{r3, pc}
    bb92:	bf00      	nop
    bb94:	200003d0 	.word	0x200003d0

0000bb98 <z_log_msg_free>:
{
    bb98:	b508      	push	{r3, lr}
    bb9a:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    bb9c:	4b02      	ldr	r3, [pc, #8]	; (bba8 <z_log_msg_free+0x10>)
    bb9e:	6818      	ldr	r0, [r3, #0]
    bba0:	f00b faf5 	bl	1718e <msg_free>
}
    bba4:	bd08      	pop	{r3, pc}
    bba6:	bf00      	nop
    bba8:	20001e90 	.word	0x20001e90

0000bbac <z_log_msg_pending>:
{
    bbac:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    bbae:	4802      	ldr	r0, [pc, #8]	; (bbb8 <z_log_msg_pending+0xc>)
    bbb0:	f00b faf1 	bl	17196 <msg_pending>
}
    bbb4:	bd08      	pop	{r3, pc}
    bbb6:	bf00      	nop
    bbb8:	200003d0 	.word	0x200003d0

0000bbbc <z_impl_log_process>:
{
    bbbc:	b510      	push	{r4, lr}
    bbbe:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    bbc0:	2200      	movs	r2, #0
    bbc2:	2300      	movs	r3, #0
    bbc4:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    bbc8:	4b28      	ldr	r3, [pc, #160]	; (bc6c <z_impl_log_process+0xb0>)
    bbca:	7818      	ldrb	r0, [r3, #0]
    bbcc:	b908      	cbnz	r0, bbd2 <z_impl_log_process+0x16>
}
    bbce:	b002      	add	sp, #8
    bbd0:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    bbd2:	4668      	mov	r0, sp
    bbd4:	f00b faf7 	bl	171c6 <z_log_msg_claim>
	if (msg) {
    bbd8:	4604      	mov	r4, r0
    bbda:	b188      	cbz	r0, bc00 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    bbdc:	4b24      	ldr	r3, [pc, #144]	; (bc70 <z_impl_log_process+0xb4>)
    bbde:	f3bf 8f5b 	dmb	ish
    bbe2:	e853 1f00 	ldrex	r1, [r3]
    bbe6:	3901      	subs	r1, #1
    bbe8:	e843 1200 	strex	r2, r1, [r3]
    bbec:	2a00      	cmp	r2, #0
    bbee:	d1f8      	bne.n	bbe2 <z_impl_log_process+0x26>
    bbf0:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    bbf4:	4620      	mov	r0, r4
    bbf6:	f7ff fe1b 	bl	b830 <msg_process>
		z_log_msg_free(msg);
    bbfa:	4620      	mov	r0, r4
    bbfc:	f7ff ffcc 	bl	bb98 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    bc00:	f7ff ff88 	bl	bb14 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    bc04:	b958      	cbnz	r0, bc1e <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    bc06:	4a1b      	ldr	r2, [pc, #108]	; (bc74 <z_impl_log_process+0xb8>)
    bc08:	6813      	ldr	r3, [r2, #0]
    bc0a:	6851      	ldr	r1, [r2, #4]
    bc0c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    bc10:	f141 0100 	adc.w	r1, r1, #0
    bc14:	6013      	str	r3, [r2, #0]
    bc16:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    bc18:	f7ff ffc8 	bl	bbac <z_log_msg_pending>
    bc1c:	e7d7      	b.n	bbce <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    bc1e:	f00d fee3 	bl	199e8 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    bc22:	014a      	lsls	r2, r1, #5
    bc24:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    bc28:	0143      	lsls	r3, r0, #5
    bc2a:	1a1b      	subs	r3, r3, r0
    bc2c:	eb62 0201 	sbc.w	r2, r2, r1
    bc30:	0092      	lsls	r2, r2, #2
    bc32:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    bc36:	009b      	lsls	r3, r3, #2
    bc38:	181b      	adds	r3, r3, r0
    bc3a:	eb42 0201 	adc.w	r2, r2, r1
    bc3e:	00d2      	lsls	r2, r2, #3
    bc40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    bc44:	f3c3 3310 	ubfx	r3, r3, #12, #17
    bc48:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    bc4c:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    bc4e:	4809      	ldr	r0, [pc, #36]	; (bc74 <z_impl_log_process+0xb8>)
    bc50:	6801      	ldr	r1, [r0, #0]
    bc52:	6840      	ldr	r0, [r0, #4]
    bc54:	1a5b      	subs	r3, r3, r1
    bc56:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    bc5a:	f240 31e9 	movw	r1, #1001	; 0x3e9
    bc5e:	428b      	cmp	r3, r1
    bc60:	f172 0200 	sbcs.w	r2, r2, #0
    bc64:	d3cf      	bcc.n	bc06 <z_impl_log_process+0x4a>
				dropped_notify();
    bc66:	f7ff ff39 	bl	badc <dropped_notify>
			if (unordered_pend) {
    bc6a:	e7cc      	b.n	bc06 <z_impl_log_process+0x4a>
    bc6c:	200026d6 	.word	0x200026d6
    bc70:	20001ea0 	.word	0x20001ea0
    bc74:	200017d8 	.word	0x200017d8

0000bc78 <z_impl_log_panic>:
	if (panic_mode) {
    bc78:	4b0f      	ldr	r3, [pc, #60]	; (bcb8 <z_impl_log_panic+0x40>)
    bc7a:	781b      	ldrb	r3, [r3, #0]
    bc7c:	b103      	cbz	r3, bc80 <z_impl_log_panic+0x8>
    bc7e:	4770      	bx	lr
{
    bc80:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    bc82:	2100      	movs	r1, #0
    bc84:	2001      	movs	r0, #1
    bc86:	f7ff fe3b 	bl	b900 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    bc8a:	4c0c      	ldr	r4, [pc, #48]	; (bcbc <z_impl_log_panic+0x44>)
    bc8c:	e000      	b.n	bc90 <z_impl_log_panic+0x18>
    bc8e:	3410      	adds	r4, #16
    bc90:	4b0b      	ldr	r3, [pc, #44]	; (bcc0 <z_impl_log_panic+0x48>)
    bc92:	429c      	cmp	r4, r3
    bc94:	d208      	bcs.n	bca8 <z_impl_log_panic+0x30>
	return backend->cb->active;
    bc96:	6863      	ldr	r3, [r4, #4]
    bc98:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    bc9a:	2b00      	cmp	r3, #0
    bc9c:	d0f7      	beq.n	bc8e <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    bc9e:	6823      	ldr	r3, [r4, #0]
    bca0:	689b      	ldr	r3, [r3, #8]
    bca2:	4620      	mov	r0, r4
    bca4:	4798      	blx	r3
}
    bca6:	e7f2      	b.n	bc8e <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    bca8:	f7ff ff88 	bl	bbbc <z_impl_log_process>
		while (log_process() == true) {
    bcac:	2800      	cmp	r0, #0
    bcae:	d1fb      	bne.n	bca8 <z_impl_log_panic+0x30>
	panic_mode = true;
    bcb0:	4b01      	ldr	r3, [pc, #4]	; (bcb8 <z_impl_log_panic+0x40>)
    bcb2:	2201      	movs	r2, #1
    bcb4:	701a      	strb	r2, [r3, #0]
}
    bcb6:	bd10      	pop	{r4, pc}
    bcb8:	200026d7 	.word	0x200026d7
    bcbc:	0001a164 	.word	0x0001a164
    bcc0:	0001a184 	.word	0x0001a184

0000bcc4 <z_log_msg_post_finalize>:
{
    bcc4:	b510      	push	{r4, lr}
    bcc6:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    bcc8:	4b1b      	ldr	r3, [pc, #108]	; (bd38 <z_log_msg_post_finalize+0x74>)
    bcca:	f3bf 8f5b 	dmb	ish
    bcce:	e853 2f00 	ldrex	r2, [r3]
    bcd2:	1c51      	adds	r1, r2, #1
    bcd4:	e843 1000 	strex	r0, r1, [r3]
    bcd8:	2800      	cmp	r0, #0
    bcda:	d1f8      	bne.n	bcce <z_log_msg_post_finalize+0xa>
    bcdc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    bce0:	4b16      	ldr	r3, [pc, #88]	; (bd3c <z_log_msg_post_finalize+0x78>)
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	b963      	cbnz	r3, bd00 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
    bce6:	4b16      	ldr	r3, [pc, #88]	; (bd40 <z_log_msg_post_finalize+0x7c>)
    bce8:	681b      	ldr	r3, [r3, #0]
    bcea:	b1bb      	cbz	r3, bd1c <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
    bcec:	b1c2      	cbz	r2, bd20 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    bcee:	2a0a      	cmp	r2, #10
    bcf0:	d114      	bne.n	bd1c <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
    bcf2:	4814      	ldr	r0, [pc, #80]	; (bd44 <z_log_msg_post_finalize+0x80>)
    bcf4:	f00d fec7 	bl	19a86 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    bcf8:	4813      	ldr	r0, [pc, #76]	; (bd48 <z_log_msg_post_finalize+0x84>)
    bcfa:	f008 ffeb 	bl	14cd4 <z_impl_k_sem_give>
}
    bcfe:	e00d      	b.n	bd1c <z_log_msg_post_finalize+0x58>
    bd00:	f04f 0340 	mov.w	r3, #64	; 0x40
    bd04:	f3ef 8411 	mrs	r4, BASEPRI
    bd08:	f383 8812 	msr	BASEPRI_MAX, r3
    bd0c:	f3bf 8f6f 	isb	sy
    bd10:	f7ff ff54 	bl	bbbc <z_impl_log_process>
	__asm__ volatile(
    bd14:	f384 8811 	msr	BASEPRI, r4
    bd18:	f3bf 8f6f 	isb	sy
    bd1c:	b002      	add	sp, #8
    bd1e:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    bd20:	2200      	movs	r2, #0
    bd22:	2300      	movs	r3, #0
    bd24:	e9cd 2300 	strd	r2, r3, [sp]
    bd28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    bd2c:	2300      	movs	r3, #0
    bd2e:	4805      	ldr	r0, [pc, #20]	; (bd44 <z_log_msg_post_finalize+0x80>)
    bd30:	f009 fee4 	bl	15afc <z_impl_k_timer_start>
    bd34:	e7f2      	b.n	bd1c <z_log_msg_post_finalize+0x58>
    bd36:	bf00      	nop
    bd38:	20001ea0 	.word	0x20001ea0
    bd3c:	200026d7 	.word	0x200026d7
    bd40:	20001e98 	.word	0x20001e98
    bd44:	200017e0 	.word	0x200017e0
    bd48:	2000043c 	.word	0x2000043c

0000bd4c <z_log_msg_commit>:
{
    bd4c:	b510      	push	{r4, lr}
    bd4e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    bd50:	4b04      	ldr	r3, [pc, #16]	; (bd64 <z_log_msg_commit+0x18>)
    bd52:	681b      	ldr	r3, [r3, #0]
    bd54:	4798      	blx	r3
    bd56:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    bd58:	4621      	mov	r1, r4
    bd5a:	4803      	ldr	r0, [pc, #12]	; (bd68 <z_log_msg_commit+0x1c>)
    bd5c:	f00b fa37 	bl	171ce <msg_commit>
}
    bd60:	bd10      	pop	{r4, pc}
    bd62:	bf00      	nop
    bd64:	200002d0 	.word	0x200002d0
    bd68:	200003d0 	.word	0x200003d0

0000bd6c <log_process_thread_func>:
{
    bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    bd70:	2100      	movs	r1, #0
    bd72:	4608      	mov	r0, r1
    bd74:	f7ff fdc4 	bl	b900 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    bd78:	4680      	mov	r8, r0
    bd7a:	b140      	cbz	r0, bd8e <log_process_thread_func+0x22>
    bd7c:	f240 6667 	movw	r6, #1639	; 0x667
    bd80:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    bd82:	f009 fca9 	bl	156d8 <z_impl_z_current_get>
	thread_set(k_current_get());
    bd86:	f7ff fe07 	bl	b998 <thread_set>
	bool processed_any = false;
    bd8a:	2500      	movs	r5, #0
    bd8c:	e015      	b.n	bdba <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    bd8e:	f04f 36ff 	mov.w	r6, #4294967295
    bd92:	f04f 37ff 	mov.w	r7, #4294967295
    bd96:	e7f4      	b.n	bd82 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    bd98:	4640      	mov	r0, r8
    bd9a:	f7ff fd7f 	bl	b89c <activate_foreach_backend>
			if (!activate_mask) {
    bd9e:	4680      	mov	r8, r0
    bda0:	b970      	cbnz	r0, bdc0 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    bda2:	f04f 36ff 	mov.w	r6, #4294967295
    bda6:	f04f 37ff 	mov.w	r7, #4294967295
    bdaa:	e009      	b.n	bdc0 <log_process_thread_func+0x54>
    bdac:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    bdae:	4632      	mov	r2, r6
    bdb0:	463b      	mov	r3, r7
    bdb2:	4809      	ldr	r0, [pc, #36]	; (bdd8 <log_process_thread_func+0x6c>)
    bdb4:	f008 ffb6 	bl	14d24 <z_impl_k_sem_take>
{
    bdb8:	4625      	mov	r5, r4
		if (activate_mask) {
    bdba:	f1b8 0f00 	cmp.w	r8, #0
    bdbe:	d1eb      	bne.n	bd98 <log_process_thread_func+0x2c>
    bdc0:	f7ff fefc 	bl	bbbc <z_impl_log_process>
		if (log_process() == false) {
    bdc4:	4604      	mov	r4, r0
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d1f6      	bne.n	bdb8 <log_process_thread_func+0x4c>
			if (processed_any) {
    bdca:	2d00      	cmp	r5, #0
    bdcc:	d0ee      	beq.n	bdac <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    bdce:	2100      	movs	r1, #0
    bdd0:	4608      	mov	r0, r1
    bdd2:	f7ff fd4b 	bl	b86c <log_backend_notify_all>
    bdd6:	e7ea      	b.n	bdae <log_process_thread_func+0x42>
    bdd8:	2000043c 	.word	0x2000043c

0000bddc <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    bddc:	4802      	ldr	r0, [pc, #8]	; (bde8 <log_src_cnt_get+0xc>)
    bdde:	4b03      	ldr	r3, [pc, #12]	; (bdec <log_src_cnt_get+0x10>)
    bde0:	1ac0      	subs	r0, r0, r3
    bde2:	08c0      	lsrs	r0, r0, #3
    bde4:	4770      	bx	lr
    bde6:	bf00      	nop
    bde8:	0001a164 	.word	0x0001a164
    bdec:	0001a09c 	.word	0x0001a09c

0000bdf0 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
    bdf0:	b510      	push	{r4, lr}
    bdf2:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    bdf4:	f7ff fff2 	bl	bddc <log_src_cnt_get>
    bdf8:	42a0      	cmp	r0, r4
    bdfa:	d903      	bls.n	be04 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    bdfc:	4b02      	ldr	r3, [pc, #8]	; (be08 <log_source_name_get+0x18>)
    bdfe:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    be02:	bd10      	pop	{r4, pc}
			return NULL;
    be04:	2000      	movs	r0, #0
    be06:	e7fc      	b.n	be02 <log_source_name_get+0x12>
    be08:	0001a09c 	.word	0x0001a09c

0000be0c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    be0c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    be0e:	4b09      	ldr	r3, [pc, #36]	; (be34 <log_backend_enable+0x28>)
    be10:	1ac3      	subs	r3, r0, r3
    be12:	111b      	asrs	r3, r3, #4
    be14:	3301      	adds	r3, #1
	backend->cb->id = id;
    be16:	f8d0 c004 	ldr.w	ip, [r0, #4]
    be1a:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    be1e:	6843      	ldr	r3, [r0, #4]
    be20:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    be22:	6843      	ldr	r3, [r0, #4]
    be24:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    be26:	6843      	ldr	r3, [r0, #4]
    be28:	2201      	movs	r2, #1
    be2a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    be2c:	f7ff fe16 	bl	ba5c <z_log_notify_backend_enabled>
}
    be30:	bd08      	pop	{r3, pc}
    be32:	bf00      	nop
    be34:	0001a164 	.word	0x0001a164

0000be38 <cbprintf_package_copy>:
{
    be38:	b500      	push	{lr}
    be3a:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    be3c:	9205      	str	r2, [sp, #20]
    be3e:	9306      	str	r3, [sp, #24]
    be40:	2300      	movs	r3, #0
    be42:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    be44:	b162      	cbz	r2, be60 <cbprintf_package_copy+0x28>
    be46:	4a07      	ldr	r2, [pc, #28]	; (be64 <cbprintf_package_copy+0x2c>)
    be48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be4a:	9302      	str	r3, [sp, #8]
    be4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be4e:	9301      	str	r3, [sp, #4]
    be50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    be52:	9300      	str	r3, [sp, #0]
    be54:	ab05      	add	r3, sp, #20
    be56:	f7fe fe79 	bl	ab4c <cbprintf_package_convert>
}
    be5a:	b009      	add	sp, #36	; 0x24
    be5c:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    be60:	2200      	movs	r2, #0
    be62:	e7f1      	b.n	be48 <cbprintf_package_copy+0x10>
    be64:	000171df 	.word	0x000171df

0000be68 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be6c:	b08b      	sub	sp, #44	; 0x2c
    be6e:	af04      	add	r7, sp, #16
    be70:	4605      	mov	r5, r0
    be72:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    be74:	4688      	mov	r8, r1
	int inlen = desc.package_len;
    be76:	f3c1 244a 	ubfx	r4, r1, #9, #11
	struct log_msg *msg;

	if (inlen > 0) {
    be7a:	2c00      	cmp	r4, #0
    be7c:	f000 808e 	beq.w	bf9c <z_impl_z_log_msg_static_create+0x134>
    be80:	4691      	mov	r9, r2
	struct z_cbprintf_buf_desc buf_desc = {
    be82:	2200      	movs	r2, #0
    be84:	60fa      	str	r2, [r7, #12]
    be86:	613a      	str	r2, [r7, #16]
    be88:	617a      	str	r2, [r7, #20]
	return cbprintf_package_convert(in_packaged, in_len,
    be8a:	2304      	movs	r3, #4
    be8c:	9302      	str	r3, [sp, #8]
    be8e:	18fb      	adds	r3, r7, r3
    be90:	9301      	str	r3, [sp, #4]
    be92:	230a      	movs	r3, #10
    be94:	9300      	str	r3, [sp, #0]
    be96:	f107 030c 	add.w	r3, r7, #12
    be9a:	4621      	mov	r1, r4
    be9c:	4648      	mov	r0, r9
    be9e:	f7fe fe55 	bl	ab4c <cbprintf_package_convert>

		len = cbprintf_package_copy(package, inlen,
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    bea2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bea6:	d35d      	bcc.n	bf64 <z_impl_z_log_msg_static_create+0xfc>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    bea8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    beac:	466d      	mov	r5, sp
    beae:	2301      	movs	r3, #1
    beb0:	733b      	strb	r3, [r7, #12]
    beb2:	2303      	movs	r3, #3
    beb4:	737b      	strb	r3, [r7, #13]
    beb6:	b08a      	sub	sp, #40	; 0x28
    beb8:	ac04      	add	r4, sp, #16
    beba:	f114 0210 	adds.w	r2, r4, #16
    bebe:	d01c      	beq.n	befa <z_impl_z_log_msg_static_create+0x92>
    bec0:	2016      	movs	r0, #22
    bec2:	b142      	cbz	r2, bed6 <z_impl_z_log_msg_static_create+0x6e>
    bec4:	4603      	mov	r3, r0
    bec6:	2804      	cmp	r0, #4
    bec8:	dd01      	ble.n	bece <z_impl_z_log_msg_static_create+0x66>
    beca:	4e3e      	ldr	r6, [pc, #248]	; (bfc4 <z_impl_z_log_msg_static_create+0x15c>)
    becc:	6166      	str	r6, [r4, #20]
    bece:	2b08      	cmp	r3, #8
    bed0:	dd01      	ble.n	bed6 <z_impl_z_log_msg_static_create+0x6e>
    bed2:	4b3d      	ldr	r3, [pc, #244]	; (bfc8 <z_impl_z_log_msg_static_create+0x160>)
    bed4:	61a3      	str	r3, [r4, #24]
    bed6:	2301      	movs	r3, #1
    bed8:	703b      	strb	r3, [r7, #0]
    beda:	2303      	movs	r3, #3
    bedc:	707b      	strb	r3, [r7, #1]
    bede:	b1ca      	cbz	r2, bf14 <z_impl_z_log_msg_static_create+0xac>
    bee0:	4603      	mov	r3, r0
    bee2:	280c      	cmp	r0, #12
    bee4:	dd00      	ble.n	bee8 <z_impl_z_log_msg_static_create+0x80>
    bee6:	61e1      	str	r1, [r4, #28]
    bee8:	2b10      	cmp	r3, #16
    beea:	dd02      	ble.n	bef2 <z_impl_z_log_msg_static_create+0x8a>
    beec:	f240 73ff 	movw	r3, #2047	; 0x7ff
    bef0:	6223      	str	r3, [r4, #32]
    bef2:	f104 0324 	add.w	r3, r4, #36	; 0x24
    bef6:	2100      	movs	r1, #0
    bef8:	e00a      	b.n	bf10 <z_impl_z_log_msg_static_create+0xa8>
    befa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    befe:	e7e0      	b.n	bec2 <z_impl_z_log_msg_static_create+0x5a>
    bf00:	f101 0618 	add.w	r6, r1, #24
    bf04:	443e      	add	r6, r7
    bf06:	f816 6c18 	ldrb.w	r6, [r6, #-24]
    bf0a:	f803 6b01 	strb.w	r6, [r3], #1
    bf0e:	3101      	adds	r1, #1
    bf10:	2901      	cmp	r1, #1
    bf12:	d9f5      	bls.n	bf00 <z_impl_z_log_msg_static_create+0x98>
    bf14:	2815      	cmp	r0, #21
    bf16:	dd22      	ble.n	bf5e <z_impl_z_log_msg_static_create+0xf6>
    bf18:	2316      	movs	r3, #22
    bf1a:	b142      	cbz	r2, bf2e <z_impl_z_log_msg_static_create+0xc6>
    bf1c:	2105      	movs	r1, #5
    bf1e:	7339      	strb	r1, [r7, #12]
    bf20:	2100      	movs	r1, #0
    bf22:	7379      	strb	r1, [r7, #13]
    bf24:	73b9      	strb	r1, [r7, #14]
    bf26:	2101      	movs	r1, #1
    bf28:	73f9      	strb	r1, [r7, #15]
    bf2a:	68f8      	ldr	r0, [r7, #12]
    bf2c:	6120      	str	r0, [r4, #16]
    bf2e:	2100      	movs	r1, #0
    bf30:	f36f 0100 	bfc	r1, #0, #1
    bf34:	f36f 0141 	bfc	r1, #1, #1
    bf38:	f36f 0182 	bfc	r1, #2, #1
    bf3c:	f36f 01c5 	bfc	r1, #3, #3
    bf40:	2002      	movs	r0, #2
    bf42:	f360 1188 	bfi	r1, r0, #6, #3
    bf46:	f3c3 030a 	ubfx	r3, r3, #0, #11
    bf4a:	f363 2153 	bfi	r1, r3, #9, #11
    bf4e:	2300      	movs	r3, #0
    bf50:	f3c1 0113 	ubfx	r1, r1, #0, #20
    bf54:	481d      	ldr	r0, [pc, #116]	; (bfcc <z_impl_z_log_msg_static_create+0x164>)
    bf56:	f00b f96f 	bl	17238 <z_log_msg_static_create>
    bf5a:	46ad      	mov	sp, r5
				pkg->fmt, (uint32_t)Z_LOG_MSG_MAX_PACKAGE);
			return;
    bf5c:	e02d      	b.n	bfba <z_impl_z_log_msg_static_create+0x152>
			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    bf5e:	f06f 031b 	mvn.w	r3, #27
    bf62:	e7da      	b.n	bf1a <z_impl_z_log_msg_static_create+0xb2>
		}
		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    bf64:	f360 2853 	bfi	r8, r0, #9, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    bf68:	f3c0 0a0a 	ubfx	sl, r0, #0, #11
    bf6c:	eb0a 5018 	add.w	r0, sl, r8, lsr #20
    bf70:	3017      	adds	r0, #23
    bf72:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    bf76:	0880      	lsrs	r0, r0, #2
    bf78:	f7ff fdfe 	bl	bb78 <z_log_msg_alloc>
		if (msg) {
    bf7c:	4683      	mov	fp, r0
    bf7e:	b1b0      	cbz	r0, bfae <z_impl_z_log_msg_static_create+0x146>
			len = cbprintf_package_copy(package, inlen,
    bf80:	2304      	movs	r3, #4
    bf82:	9302      	str	r3, [sp, #8]
    bf84:	18fb      	adds	r3, r7, r3
    bf86:	9301      	str	r3, [sp, #4]
    bf88:	230a      	movs	r3, #10
    bf8a:	9300      	str	r3, [sp, #0]
    bf8c:	4653      	mov	r3, sl
    bf8e:	f100 0210 	add.w	r2, r0, #16
    bf92:	4621      	mov	r1, r4
    bf94:	4648      	mov	r0, r9
    bf96:	f7ff ff4f 	bl	be38 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    bf9a:	e008      	b.n	bfae <z_impl_z_log_msg_static_create+0x146>
    bf9c:	eb04 5411 	add.w	r4, r4, r1, lsr #20
    bfa0:	3417      	adds	r4, #23
    bfa2:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    bfa6:	08a0      	lsrs	r0, r4, #2
    bfa8:	f7ff fde6 	bl	bb78 <z_log_msg_alloc>
    bfac:	4683      	mov	fp, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    bfae:	4633      	mov	r3, r6
    bfb0:	4642      	mov	r2, r8
    bfb2:	4629      	mov	r1, r5
    bfb4:	4658      	mov	r0, fp
    bfb6:	f00b f928 	bl	1720a <z_log_msg_finalize>
}
    bfba:	371c      	adds	r7, #28
    bfbc:	46bd      	mov	sp, r7
    bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfc2:	bf00      	nop
    bfc4:	0001a4d8 	.word	0x0001a4d8
    bfc8:	0001a51c 	.word	0x0001a51c
    bfcc:	0001a10c 	.word	0x0001a10c

0000bfd0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    bfd0:	b40e      	push	{r1, r2, r3}
    bfd2:	b500      	push	{lr}
    bfd4:	b084      	sub	sp, #16
    bfd6:	4601      	mov	r1, r0
    bfd8:	ab05      	add	r3, sp, #20
    bfda:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    bfde:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    bfe0:	2000      	movs	r0, #0
    bfe2:	9000      	str	r0, [sp, #0]
    bfe4:	4803      	ldr	r0, [pc, #12]	; (bff4 <print_formatted+0x24>)
    bfe6:	f7ff f955 	bl	b294 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    bfea:	b004      	add	sp, #16
    bfec:	f85d eb04 	ldr.w	lr, [sp], #4
    bff0:	b003      	add	sp, #12
    bff2:	4770      	bx	lr
    bff4:	0001736f 	.word	0x0001736f

0000bff8 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    bff8:	b530      	push	{r4, r5, lr}
    bffa:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_CUSTOM_TIMESTAMP);


	if (!format) {
    bffc:	f011 0f44 	tst.w	r1, #68	; 0x44
    c000:	d005      	beq.n	c00e <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    c002:	4b1a      	ldr	r3, [pc, #104]	; (c06c <timestamp_print+0x74>)
    c004:	681c      	ldr	r4, [r3, #0]
    c006:	b934      	cbnz	r4, c016 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    c008:	2000      	movs	r0, #0
	}

	return length;
}
    c00a:	b005      	add	sp, #20
    c00c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    c00e:	4918      	ldr	r1, [pc, #96]	; (c070 <timestamp_print+0x78>)
    c010:	f7ff ffde 	bl	bfd0 <print_formatted>
    c014:	e7f9      	b.n	c00a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    c016:	4b17      	ldr	r3, [pc, #92]	; (c074 <timestamp_print+0x7c>)
    c018:	6819      	ldr	r1, [r3, #0]
    c01a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    c01e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    c022:	4a15      	ldr	r2, [pc, #84]	; (c078 <timestamp_print+0x80>)
    c024:	fba2 320c 	umull	r3, r2, r2, ip
    c028:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    c02a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    c02e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    c032:	4b12      	ldr	r3, [pc, #72]	; (c07c <timestamp_print+0x84>)
    c034:	fba3 530e 	umull	r5, r3, r3, lr
    c038:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    c03a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    c03e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c042:	fb0c f101 	mul.w	r1, ip, r1
    c046:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    c04a:	fb04 1115 	mls	r1, r4, r5, r1
    c04e:	fb0c f101 	mul.w	r1, ip, r1
    c052:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    c056:	9102      	str	r1, [sp, #8]
    c058:	9501      	str	r5, [sp, #4]
    c05a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    c05e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    c062:	9100      	str	r1, [sp, #0]
    c064:	4906      	ldr	r1, [pc, #24]	; (c080 <timestamp_print+0x88>)
    c066:	f7ff ffb3 	bl	bfd0 <print_formatted>
    c06a:	e7ce      	b.n	c00a <timestamp_print+0x12>
    c06c:	20001eac 	.word	0x20001eac
    c070:	0001a53c 	.word	0x0001a53c
    c074:	20001ea8 	.word	0x20001ea8
    c078:	91a2b3c5 	.word	0x91a2b3c5
    c07c:	88888889 	.word	0x88888889
    c080:	0001a548 	.word	0x0001a548

0000c084 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    c084:	b161      	cbz	r1, c0a0 <color_print+0x1c>
{
    c086:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    c088:	b12a      	cbz	r2, c096 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    c08a:	4a06      	ldr	r2, [pc, #24]	; (c0a4 <color_print+0x20>)
    c08c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c090:	b912      	cbnz	r2, c098 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    c092:	4a05      	ldr	r2, [pc, #20]	; (c0a8 <color_print+0x24>)
    c094:	e000      	b.n	c098 <color_print+0x14>
    c096:	4a04      	ldr	r2, [pc, #16]	; (c0a8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    c098:	4904      	ldr	r1, [pc, #16]	; (c0ac <color_print+0x28>)
    c09a:	f7ff ff99 	bl	bfd0 <print_formatted>
	}
}
    c09e:	bd08      	pop	{r3, pc}
    c0a0:	4770      	bx	lr
    c0a2:	bf00      	nop
    c0a4:	0001a5e8 	.word	0x0001a5e8
    c0a8:	0001a564 	.word	0x0001a564
    c0ac:	0001ae9c 	.word	0x0001ae9c

0000c0b0 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0b4:	4605      	mov	r5, r0
    c0b6:	4617      	mov	r7, r2
    c0b8:	461e      	mov	r6, r3
    c0ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
	int total = 0;

	if (level_on) {
    c0be:	b999      	cbnz	r1, c0e8 <ids_print+0x38>
	int total = 0;
    c0c0:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    c0c2:	b12e      	cbz	r6, c0d0 <ids_print+0x20>
		total += print_formatted(output, "%s/", domain);
    c0c4:	4632      	mov	r2, r6
    c0c6:	4912      	ldr	r1, [pc, #72]	; (c110 <ids_print+0x60>)
    c0c8:	4628      	mov	r0, r5
    c0ca:	f7ff ff81 	bl	bfd0 <print_formatted>
    c0ce:	4404      	add	r4, r0
	}

	if (source) {
    c0d0:	f1b8 0f00 	cmp.w	r8, #0
    c0d4:	d017      	beq.n	c106 <ids_print+0x56>
		total += print_formatted(output,
    c0d6:	b187      	cbz	r7, c0fa <ids_print+0x4a>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    c0d8:	2301      	movs	r3, #1
    c0da:	9a07      	ldr	r2, [sp, #28]
    c0dc:	4093      	lsls	r3, r2
				(func_on &&
    c0de:	f013 0f1e 	tst.w	r3, #30
    c0e2:	d113      	bne.n	c10c <ids_print+0x5c>
		total += print_formatted(output,
    c0e4:	490b      	ldr	r1, [pc, #44]	; (c114 <ids_print+0x64>)
    c0e6:	e009      	b.n	c0fc <ids_print+0x4c>
		total += print_formatted(output, "<%s> ", severity[level]);
    c0e8:	4b0b      	ldr	r3, [pc, #44]	; (c118 <ids_print+0x68>)
    c0ea:	9a07      	ldr	r2, [sp, #28]
    c0ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c0f0:	490a      	ldr	r1, [pc, #40]	; (c11c <ids_print+0x6c>)
    c0f2:	f7ff ff6d 	bl	bfd0 <print_formatted>
    c0f6:	4604      	mov	r4, r0
    c0f8:	e7e3      	b.n	c0c2 <ids_print+0x12>
		total += print_formatted(output,
    c0fa:	4906      	ldr	r1, [pc, #24]	; (c114 <ids_print+0x64>)
    c0fc:	4642      	mov	r2, r8
    c0fe:	4628      	mov	r0, r5
    c100:	f7ff ff66 	bl	bfd0 <print_formatted>
    c104:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    c106:	4620      	mov	r0, r4
    c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    c10c:	4904      	ldr	r1, [pc, #16]	; (c120 <ids_print+0x70>)
    c10e:	e7f5      	b.n	c0fc <ids_print+0x4c>
    c110:	0001a580 	.word	0x0001a580
    c114:	0001a570 	.word	0x0001a570
    c118:	0001a5fc 	.word	0x0001a5fc
    c11c:	0001a578 	.word	0x0001a578
    c120:	0001a56c 	.word	0x0001a56c

0000c124 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c128:	b085      	sub	sp, #20
    c12a:	4605      	mov	r5, r0
    c12c:	460c      	mov	r4, r1
    c12e:	4616      	mov	r6, r2
    c130:	9303      	str	r3, [sp, #12]
    c132:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    c136:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    c13a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    c13e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    c142:	f00b f84a 	bl	171da <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    c146:	b1d8      	cbz	r0, c180 <prefix_print+0x5c>
    c148:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    c14a:	4912      	ldr	r1, [pc, #72]	; (c194 <prefix_print+0x70>)
    c14c:	4628      	mov	r0, r5
    c14e:	f7ff ff3f 	bl	bfd0 <print_formatted>
    c152:	4607      	mov	r7, r0
	}

	if (stamp) {
    c154:	f1bb 0f00 	cmp.w	fp, #0
    c158:	d114      	bne.n	c184 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    c15a:	4642      	mov	r2, r8
    c15c:	4651      	mov	r1, sl
    c15e:	4628      	mov	r0, r5
    c160:	f00b f8c5 	bl	172ee <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    c164:	f8cd 8004 	str.w	r8, [sp, #4]
    c168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c16a:	9300      	str	r3, [sp, #0]
    c16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c16e:	4632      	mov	r2, r6
    c170:	4649      	mov	r1, r9
    c172:	4628      	mov	r0, r5
    c174:	f7ff ff9c 	bl	c0b0 <ids_print>

	return length;
}
    c178:	4438      	add	r0, r7
    c17a:	b005      	add	sp, #20
    c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    c180:	2700      	movs	r7, #0
    c182:	e7e7      	b.n	c154 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    c184:	9a03      	ldr	r2, [sp, #12]
    c186:	4621      	mov	r1, r4
    c188:	4628      	mov	r0, r5
    c18a:	f7ff ff35 	bl	bff8 <timestamp_print>
    c18e:	4407      	add	r7, r0
    c190:	e7e3      	b.n	c15a <prefix_print+0x36>
    c192:	bf00      	nop
    c194:	0001a584 	.word	0x0001a584

0000c198 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    c198:	f011 0f10 	tst.w	r1, #16
    c19c:	d10b      	bne.n	c1b6 <newline_print+0x1e>
{
    c19e:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    c1a0:	f011 0f20 	tst.w	r1, #32
    c1a4:	d003      	beq.n	c1ae <newline_print+0x16>
		print_formatted(ctx, "\n");
    c1a6:	4904      	ldr	r1, [pc, #16]	; (c1b8 <newline_print+0x20>)
    c1a8:	f7ff ff12 	bl	bfd0 <print_formatted>
}
    c1ac:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    c1ae:	4903      	ldr	r1, [pc, #12]	; (c1bc <newline_print+0x24>)
    c1b0:	f7ff ff0e 	bl	bfd0 <print_formatted>
    c1b4:	e7fa      	b.n	c1ac <newline_print+0x14>
    c1b6:	4770      	bx	lr
    c1b8:	0001bccc 	.word	0x0001bccc
    c1bc:	0001a588 	.word	0x0001a588

0000c1c0 <hexdump_line_print>:
{
    c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1c4:	4605      	mov	r5, r0
    c1c6:	460f      	mov	r7, r1
    c1c8:	4616      	mov	r6, r2
    c1ca:	4698      	mov	r8, r3
	newline_print(output, flags);
    c1cc:	9906      	ldr	r1, [sp, #24]
    c1ce:	f7ff ffe3 	bl	c198 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    c1d2:	2400      	movs	r4, #0
    c1d4:	4544      	cmp	r4, r8
    c1d6:	da05      	bge.n	c1e4 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    c1d8:	4923      	ldr	r1, [pc, #140]	; (c268 <hexdump_line_print+0xa8>)
    c1da:	4628      	mov	r0, r5
    c1dc:	f7ff fef8 	bl	bfd0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    c1e0:	3401      	adds	r4, #1
    c1e2:	e7f7      	b.n	c1d4 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c1e4:	2400      	movs	r4, #0
    c1e6:	e009      	b.n	c1fc <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    c1e8:	491f      	ldr	r1, [pc, #124]	; (c268 <hexdump_line_print+0xa8>)
    c1ea:	4628      	mov	r0, r5
    c1ec:	f7ff fef0 	bl	bfd0 <print_formatted>
    c1f0:	e00b      	b.n	c20a <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    c1f2:	491e      	ldr	r1, [pc, #120]	; (c26c <hexdump_line_print+0xac>)
    c1f4:	4628      	mov	r0, r5
    c1f6:	f7ff feeb 	bl	bfd0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c1fa:	3401      	adds	r4, #1
    c1fc:	2c0f      	cmp	r4, #15
    c1fe:	dc0c      	bgt.n	c21a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    c200:	2c00      	cmp	r4, #0
    c202:	dd02      	ble.n	c20a <hexdump_line_print+0x4a>
    c204:	f014 0f07 	tst.w	r4, #7
    c208:	d0ee      	beq.n	c1e8 <hexdump_line_print+0x28>
		if (i < length) {
    c20a:	42b4      	cmp	r4, r6
    c20c:	d2f1      	bcs.n	c1f2 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    c20e:	5d3a      	ldrb	r2, [r7, r4]
    c210:	4917      	ldr	r1, [pc, #92]	; (c270 <hexdump_line_print+0xb0>)
    c212:	4628      	mov	r0, r5
    c214:	f7ff fedc 	bl	bfd0 <print_formatted>
    c218:	e7ef      	b.n	c1fa <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    c21a:	4916      	ldr	r1, [pc, #88]	; (c274 <hexdump_line_print+0xb4>)
    c21c:	4628      	mov	r0, r5
    c21e:	f7ff fed7 	bl	bfd0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c222:	2400      	movs	r4, #0
    c224:	e009      	b.n	c23a <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    c226:	4910      	ldr	r1, [pc, #64]	; (c268 <hexdump_line_print+0xa8>)
    c228:	4628      	mov	r0, r5
    c22a:	f7ff fed1 	bl	bfd0 <print_formatted>
    c22e:	e00b      	b.n	c248 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    c230:	4911      	ldr	r1, [pc, #68]	; (c278 <hexdump_line_print+0xb8>)
    c232:	4628      	mov	r0, r5
    c234:	f7ff fecc 	bl	bfd0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    c238:	3401      	adds	r4, #1
    c23a:	2c0f      	cmp	r4, #15
    c23c:	dc12      	bgt.n	c264 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    c23e:	2c00      	cmp	r4, #0
    c240:	dd02      	ble.n	c248 <hexdump_line_print+0x88>
    c242:	f014 0f07 	tst.w	r4, #7
    c246:	d0ee      	beq.n	c226 <hexdump_line_print+0x66>
		if (i < length) {
    c248:	42b4      	cmp	r4, r6
    c24a:	d206      	bcs.n	c25a <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
    c24c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    c24e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    c252:	2b5e      	cmp	r3, #94	; 0x5e
    c254:	d9ec      	bls.n	c230 <hexdump_line_print+0x70>
    c256:	222e      	movs	r2, #46	; 0x2e
    c258:	e7ea      	b.n	c230 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    c25a:	4903      	ldr	r1, [pc, #12]	; (c268 <hexdump_line_print+0xa8>)
    c25c:	4628      	mov	r0, r5
    c25e:	f7ff feb7 	bl	bfd0 <print_formatted>
    c262:	e7e9      	b.n	c238 <hexdump_line_print+0x78>
}
    c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c268:	0001a57c 	.word	0x0001a57c
    c26c:	0001a594 	.word	0x0001a594
    c270:	0001a58c 	.word	0x0001a58c
    c274:	0001a598 	.word	0x0001a598
    c278:	0001a59c 	.word	0x0001a59c

0000c27c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c280:	b084      	sub	sp, #16
    c282:	4604      	mov	r4, r0
    c284:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    c288:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c28a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    c28c:	b995      	cbnz	r5, c2b4 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    c28e:	2b01      	cmp	r3, #1
    c290:	d01b      	beq.n	c2ca <log_output_process+0x4e>
    c292:	4817      	ldr	r0, [pc, #92]	; (c2f0 <log_output_process+0x74>)
		prefix_offset = 0;
    c294:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    c298:	b127      	cbz	r7, c2a4 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    c29a:	463b      	mov	r3, r7
    c29c:	4622      	mov	r2, r4
    c29e:	4915      	ldr	r1, [pc, #84]	; (c2f4 <log_output_process+0x78>)
    c2a0:	f009 fdda 	bl	15e58 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    c2a4:	b9ae      	cbnz	r6, c2d2 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    c2a6:	b9ed      	cbnz	r5, c2e4 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    c2a8:	4620      	mov	r0, r4
    c2aa:	f00b f853 	bl	17354 <log_output_flush>
}
    c2ae:	b004      	add	sp, #16
    c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    c2b4:	9502      	str	r5, [sp, #8]
    c2b6:	9301      	str	r3, [sp, #4]
    c2b8:	9200      	str	r2, [sp, #0]
    c2ba:	460b      	mov	r3, r1
    c2bc:	2200      	movs	r2, #0
    c2be:	990e      	ldr	r1, [sp, #56]	; 0x38
    c2c0:	f7ff ff30 	bl	c124 <prefix_print>
    c2c4:	4680      	mov	r8, r0
		cb = out_func;
    c2c6:	480c      	ldr	r0, [pc, #48]	; (c2f8 <log_output_process+0x7c>)
    c2c8:	e7e6      	b.n	c298 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    c2ca:	480b      	ldr	r0, [pc, #44]	; (c2f8 <log_output_process+0x7c>)
		prefix_offset = 0;
    c2cc:	f04f 0800 	mov.w	r8, #0
    c2d0:	e7e2      	b.n	c298 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    c2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c2d4:	9300      	str	r3, [sp, #0]
    c2d6:	4643      	mov	r3, r8
    c2d8:	4632      	mov	r2, r6
    c2da:	990c      	ldr	r1, [sp, #48]	; 0x30
    c2dc:	4620      	mov	r0, r4
    c2de:	f00b f81e 	bl	1731e <log_msg_hexdump>
    c2e2:	e7e0      	b.n	c2a6 <log_output_process+0x2a>
		postfix_print(output, flags, level);
    c2e4:	462a      	mov	r2, r5
    c2e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    c2e8:	4620      	mov	r0, r4
    c2ea:	f00b f80c 	bl	17306 <postfix_print>
    c2ee:	e7db      	b.n	c2a8 <log_output_process+0x2c>
    c2f0:	000173a7 	.word	0x000173a7
    c2f4:	000172df 	.word	0x000172df
    c2f8:	0001736f 	.word	0x0001736f

0000c2fc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c300:	b086      	sub	sp, #24
    c302:	4605      	mov	r5, r0
    c304:	460c      	mov	r4, r1
    c306:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    c308:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    c30c:	880e      	ldrh	r6, [r1, #0]
    c30e:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    c312:	7808      	ldrb	r0, [r1, #0]
    c314:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    c318:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    c31a:	b133      	cbz	r3, c32a <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    c31c:	4a11      	ldr	r2, [pc, #68]	; (c364 <log_output_msg_process+0x68>)
    c31e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    c320:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c324:	2900      	cmp	r1, #0
    c326:	da18      	bge.n	c35a <log_output_msg_process+0x5e>
    c328:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    c32a:	4622      	mov	r2, r4
    c32c:	f852 1b10 	ldr.w	r1, [r2], #16
    c330:	f3c1 214a 	ubfx	r1, r1, #9, #11
	*len = msg->hdr.desc.data_len;
    c334:	8860      	ldrh	r0, [r4, #2]
    c336:	f3c0 100b 	ubfx	r0, r0, #4, #12
	return msg->data + msg->hdr.desc.package_len;
    c33a:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    c33c:	b901      	cbnz	r1, c340 <log_output_msg_process+0x44>
    c33e:	2200      	movs	r2, #0
    c340:	9704      	str	r7, [sp, #16]
    c342:	9003      	str	r0, [sp, #12]
    c344:	9402      	str	r4, [sp, #8]
    c346:	9201      	str	r2, [sp, #4]
    c348:	9600      	str	r6, [sp, #0]
    c34a:	2200      	movs	r2, #0
    c34c:	4641      	mov	r1, r8
    c34e:	4628      	mov	r0, r5
    c350:	f7ff ff94 	bl	c27c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    c354:	b006      	add	sp, #24
    c356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c35a:	f7ff fd49 	bl	bdf0 <log_source_name_get>
    c35e:	4603      	mov	r3, r0
    c360:	e7e3      	b.n	c32a <log_output_msg_process+0x2e>
    c362:	bf00      	nop
    c364:	0001a09c 	.word	0x0001a09c

0000c368 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    c368:	b570      	push	{r4, r5, r6, lr}
    c36a:	b082      	sub	sp, #8
    c36c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    c36e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c370:	f242 730f 	movw	r3, #9999	; 0x270f
    c374:	428b      	cmp	r3, r1
    c376:	bf28      	it	cs
    c378:	460b      	movcs	r3, r1
    c37a:	4a0e      	ldr	r2, [pc, #56]	; (c3b4 <log_output_dropped_process+0x4c>)
    c37c:	2105      	movs	r1, #5
    c37e:	4668      	mov	r0, sp
    c380:	f009 fded 	bl	15f5e <snprintk>
    c384:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    c386:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    c388:	685b      	ldr	r3, [r3, #4]
    c38a:	220b      	movs	r2, #11
    c38c:	490a      	ldr	r1, [pc, #40]	; (c3b8 <log_output_dropped_process+0x50>)
    c38e:	4628      	mov	r0, r5
    c390:	f00a ff98 	bl	172c4 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    c394:	6863      	ldr	r3, [r4, #4]
    c396:	685b      	ldr	r3, [r3, #4]
    c398:	4632      	mov	r2, r6
    c39a:	4669      	mov	r1, sp
    c39c:	4628      	mov	r0, r5
    c39e:	f00a ff91 	bl	172c4 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    c3a2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    c3a4:	685b      	ldr	r3, [r3, #4]
    c3a6:	221b      	movs	r2, #27
    c3a8:	4904      	ldr	r1, [pc, #16]	; (c3bc <log_output_dropped_process+0x54>)
    c3aa:	4628      	mov	r0, r5
    c3ac:	f00a ff8a 	bl	172c4 <buffer_write>
}
    c3b0:	b002      	add	sp, #8
    c3b2:	bd70      	pop	{r4, r5, r6, pc}
    c3b4:	0001a460 	.word	0x0001a460
    c3b8:	0001a5bc 	.word	0x0001a5bc
    c3bc:	0001a5a0 	.word	0x0001a5a0

0000c3c0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    c3c0:	4b07      	ldr	r3, [pc, #28]	; (c3e0 <log_output_timestamp_freq_set+0x20>)
    c3c2:	2201      	movs	r2, #1
    c3c4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    c3c6:	e004      	b.n	c3d2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    c3c8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    c3ca:	4a05      	ldr	r2, [pc, #20]	; (c3e0 <log_output_timestamp_freq_set+0x20>)
    c3cc:	6813      	ldr	r3, [r2, #0]
    c3ce:	005b      	lsls	r3, r3, #1
    c3d0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    c3d2:	4b04      	ldr	r3, [pc, #16]	; (c3e4 <log_output_timestamp_freq_set+0x24>)
    c3d4:	4298      	cmp	r0, r3
    c3d6:	d8f7      	bhi.n	c3c8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    c3d8:	4b03      	ldr	r3, [pc, #12]	; (c3e8 <log_output_timestamp_freq_set+0x28>)
    c3da:	6018      	str	r0, [r3, #0]
}
    c3dc:	4770      	bx	lr
    c3de:	bf00      	nop
    c3e0:	20001ea8 	.word	0x20001ea8
    c3e4:	000f4240 	.word	0x000f4240
    c3e8:	20001eac 	.word	0x20001eac

0000c3ec <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    c3ec:	4b03      	ldr	r3, [pc, #12]	; (c3fc <log_backend_rtt_init+0x10>)
    c3ee:	2201      	movs	r2, #1
    c3f0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    c3f2:	4b03      	ldr	r3, [pc, #12]	; (c400 <log_backend_rtt_init+0x14>)
    c3f4:	4a03      	ldr	r2, [pc, #12]	; (c404 <log_backend_rtt_init+0x18>)
    c3f6:	601a      	str	r2, [r3, #0]
}
    c3f8:	4770      	bx	lr
    c3fa:	bf00      	nop
    c3fc:	200026d8 	.word	0x200026d8
    c400:	20001ed8 	.word	0x20001ed8
    c404:	20001edc 	.word	0x20001edc

0000c408 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c408:	4b01      	ldr	r3, [pc, #4]	; (c410 <format_set+0x8>)
    c40a:	6019      	str	r1, [r3, #0]
	return 0;
}
    c40c:	2000      	movs	r0, #0
    c40e:	4770      	bx	lr
    c410:	20001ec4 	.word	0x20001ec4

0000c414 <on_failed_write>:
{
    c414:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    c416:	b918      	cbnz	r0, c420 <on_failed_write+0xc>
		host_present = false;
    c418:	4b07      	ldr	r3, [pc, #28]	; (c438 <on_failed_write+0x24>)
    c41a:	2200      	movs	r2, #0
    c41c:	701a      	strb	r2, [r3, #0]
}
    c41e:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    c420:	4b06      	ldr	r3, [pc, #24]	; (c43c <on_failed_write+0x28>)
    c422:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    c424:	b123      	cbz	r3, c430 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    c426:	f241 3088 	movw	r0, #5000	; 0x1388
    c42a:	f00d fae1 	bl	199f0 <z_impl_k_busy_wait>
}
    c42e:	e7f6      	b.n	c41e <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    c430:	2005      	movs	r0, #5
    c432:	f00a ffc7 	bl	173c4 <k_msleep>
}
    c436:	e7f2      	b.n	c41e <on_failed_write+0xa>
    c438:	200026d8 	.word	0x200026d8
    c43c:	200026d9 	.word	0x200026d9

0000c440 <on_write>:
{
    c440:	b538      	push	{r3, r4, r5, lr}
    c442:	4604      	mov	r4, r0
	host_present = true;
    c444:	4b0a      	ldr	r3, [pc, #40]	; (c470 <on_write+0x30>)
    c446:	2201      	movs	r2, #1
    c448:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    c44a:	4b0a      	ldr	r3, [pc, #40]	; (c474 <on_write+0x34>)
    c44c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    c44e:	b92b      	cbnz	r3, c45c <on_write+0x1c>
}
    c450:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    c452:	1e65      	subs	r5, r4, #1
    c454:	4620      	mov	r0, r4
    c456:	f7ff ffdd 	bl	c414 <on_failed_write>
    c45a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    c45c:	2000      	movs	r0, #0
    c45e:	f007 ff59 	bl	14314 <SEGGER_RTT_HasDataUp>
    c462:	2800      	cmp	r0, #0
    c464:	d0f4      	beq.n	c450 <on_write+0x10>
    c466:	4b02      	ldr	r3, [pc, #8]	; (c470 <on_write+0x30>)
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d1f1      	bne.n	c452 <on_write+0x12>
    c46e:	e7ef      	b.n	c450 <on_write+0x10>
    c470:	200026d8 	.word	0x200026d8
    c474:	200026d9 	.word	0x200026d9

0000c478 <data_out_block_mode>:
{
    c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c47a:	4606      	mov	r6, r0
    c47c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    c47e:	2704      	movs	r7, #4
    c480:	e00d      	b.n	c49e <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    c482:	462a      	mov	r2, r5
    c484:	4631      	mov	r1, r6
    c486:	2000      	movs	r0, #0
    c488:	f007 fee0 	bl	1424c <SEGGER_RTT_WriteSkipNoLock>
    c48c:	4604      	mov	r4, r0
    c48e:	e014      	b.n	c4ba <data_out_block_mode+0x42>
			on_write(retry_cnt);
    c490:	4638      	mov	r0, r7
    c492:	f7ff ffd5 	bl	c440 <on_write>
	} while ((ret == 0) && host_present);
    c496:	b9dc      	cbnz	r4, c4d0 <data_out_block_mode+0x58>
    c498:	4b11      	ldr	r3, [pc, #68]	; (c4e0 <data_out_block_mode+0x68>)
    c49a:	781b      	ldrb	r3, [r3, #0]
    c49c:	b1c3      	cbz	r3, c4d0 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    c49e:	4b11      	ldr	r3, [pc, #68]	; (c4e4 <data_out_block_mode+0x6c>)
    c4a0:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d1ed      	bne.n	c482 <data_out_block_mode+0xa>
			RTT_LOCK();
    c4a6:	f007 ff45 	bl	14334 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    c4aa:	462a      	mov	r2, r5
    c4ac:	4631      	mov	r1, r6
    c4ae:	2000      	movs	r0, #0
    c4b0:	f007 fecc 	bl	1424c <SEGGER_RTT_WriteSkipNoLock>
    c4b4:	4604      	mov	r4, r0
			RTT_UNLOCK();
    c4b6:	f007 ff49 	bl	1434c <zephyr_rtt_mutex_unlock>
		if (ret) {
    c4ba:	2c00      	cmp	r4, #0
    c4bc:	d1e8      	bne.n	c490 <data_out_block_mode+0x18>
		} else if (host_present) {
    c4be:	4b08      	ldr	r3, [pc, #32]	; (c4e0 <data_out_block_mode+0x68>)
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	d0e7      	beq.n	c496 <data_out_block_mode+0x1e>
			retry_cnt--;
    c4c6:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    c4c8:	4638      	mov	r0, r7
    c4ca:	f7ff ffa3 	bl	c414 <on_failed_write>
    c4ce:	e7e2      	b.n	c496 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    c4d0:	b914      	cbnz	r4, c4d8 <data_out_block_mode+0x60>
    c4d2:	4b03      	ldr	r3, [pc, #12]	; (c4e0 <data_out_block_mode+0x68>)
    c4d4:	781b      	ldrb	r3, [r3, #0]
    c4d6:	b903      	cbnz	r3, c4da <data_out_block_mode+0x62>
    c4d8:	462c      	mov	r4, r5
}
    c4da:	4620      	mov	r0, r4
    c4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4de:	bf00      	nop
    c4e0:	200026d8 	.word	0x200026d8
    c4e4:	200026d9 	.word	0x200026d9

0000c4e8 <panic>:
{
    c4e8:	b508      	push	{r3, lr}
	panic_mode = true;
    c4ea:	4b03      	ldr	r3, [pc, #12]	; (c4f8 <panic+0x10>)
    c4ec:	2201      	movs	r2, #1
    c4ee:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    c4f0:	4802      	ldr	r0, [pc, #8]	; (c4fc <panic+0x14>)
    c4f2:	f00a ff2f 	bl	17354 <log_output_flush>
}
    c4f6:	bd08      	pop	{r3, pc}
    c4f8:	200026d9 	.word	0x200026d9
    c4fc:	0001a63c 	.word	0x0001a63c

0000c500 <dropped>:
{
    c500:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    c502:	4802      	ldr	r0, [pc, #8]	; (c50c <dropped+0xc>)
    c504:	f7ff ff30 	bl	c368 <log_output_dropped_process>
}
    c508:	bd08      	pop	{r3, pc}
    c50a:	bf00      	nop
    c50c:	0001a63c 	.word	0x0001a63c

0000c510 <process>:
{
    c510:	b510      	push	{r4, lr}
    c512:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c514:	4b04      	ldr	r3, [pc, #16]	; (c528 <process+0x18>)
    c516:	6818      	ldr	r0, [r3, #0]
    c518:	f7ff fa88 	bl	ba2c <log_format_func_t_get>
    c51c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    c51e:	220f      	movs	r2, #15
    c520:	4621      	mov	r1, r4
    c522:	4802      	ldr	r0, [pc, #8]	; (c52c <process+0x1c>)
    c524:	4798      	blx	r3
}
    c526:	bd10      	pop	{r4, pc}
    c528:	20001ec4 	.word	0x20001ec4
    c52c:	0001a63c 	.word	0x0001a63c

0000c530 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    c530:	b570      	push	{r4, r5, r6, lr}
    c532:	4606      	mov	r6, r0
    c534:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		goto cleanup;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    c536:	2400      	movs	r4, #0
    c538:	e005      	b.n	c546 <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
    c53a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    c53c:	4804      	ldr	r0, [pc, #16]	; (c550 <char_out+0x20>)
    c53e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    c540:	685b      	ldr	r3, [r3, #4]
    c542:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    c544:	3401      	adds	r4, #1
    c546:	42ac      	cmp	r4, r5
    c548:	d3f7      	bcc.n	c53a <char_out+0xa>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_dev);
	}

	return length;
}
    c54a:	4628      	mov	r0, r5
    c54c:	bd70      	pop	{r4, r5, r6, pc}
    c54e:	bf00      	nop
    c550:	00019f10 	.word	0x00019f10

0000c554 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c554:	4b01      	ldr	r3, [pc, #4]	; (c55c <format_set+0x8>)
    c556:	6019      	str	r1, [r3, #0]
	return 0;
}
    c558:	2000      	movs	r0, #0
    c55a:	4770      	bx	lr
    c55c:	20001f0c 	.word	0x20001f0c

0000c560 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    c560:	b508      	push	{r3, lr}
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    c562:	4b03      	ldr	r3, [pc, #12]	; (c570 <panic+0x10>)
    c564:	2201      	movs	r2, #1
    c566:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    c568:	4802      	ldr	r0, [pc, #8]	; (c574 <panic+0x14>)
    c56a:	f00a fef3 	bl	17354 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    c56e:	bd08      	pop	{r3, pc}
    c570:	200026da 	.word	0x200026da
    c574:	0001a688 	.word	0x0001a688

0000c578 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    c578:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    c57a:	4802      	ldr	r0, [pc, #8]	; (c584 <dropped+0xc>)
    c57c:	f7ff fef4 	bl	c368 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    c580:	bd08      	pop	{r3, pc}
    c582:	bf00      	nop
    c584:	0001a688 	.word	0x0001a688

0000c588 <process>:
{
    c588:	b510      	push	{r4, lr}
    c58a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c58c:	4b04      	ldr	r3, [pc, #16]	; (c5a0 <process+0x18>)
    c58e:	6818      	ldr	r0, [r3, #0]
    c590:	f7ff fa4c 	bl	ba2c <log_format_func_t_get>
    c594:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    c596:	220f      	movs	r2, #15
    c598:	4621      	mov	r1, r4
    c59a:	4802      	ldr	r0, [pc, #8]	; (c5a4 <process+0x1c>)
    c59c:	4798      	blx	r3
}
    c59e:	bd10      	pop	{r4, pc}
    c5a0:	20001f0c 	.word	0x20001f0c
    c5a4:	0001a688 	.word	0x0001a688

0000c5a8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c5a8:	b570      	push	{r4, r5, r6, lr}
    c5aa:	4605      	mov	r5, r0
	__asm__ volatile(
    c5ac:	f04f 0340 	mov.w	r3, #64	; 0x40
    c5b0:	f3ef 8611 	mrs	r6, BASEPRI
    c5b4:	f383 8812 	msr	BASEPRI_MAX, r3
    c5b8:	f3bf 8f6f 	isb	sy
    c5bc:	4b0e      	ldr	r3, [pc, #56]	; (c5f8 <pm_state_notify+0x50>)
    c5be:	681c      	ldr	r4, [r3, #0]
    c5c0:	e00d      	b.n	c5de <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    c5c2:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    c5c4:	b13a      	cbz	r2, c5d6 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c5c6:	4b0d      	ldr	r3, [pc, #52]	; (c5fc <pm_state_notify+0x54>)
    c5c8:	7c1b      	ldrb	r3, [r3, #16]
    c5ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5ce:	490c      	ldr	r1, [pc, #48]	; (c600 <pm_state_notify+0x58>)
    c5d0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    c5d4:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c5d6:	4623      	mov	r3, r4
	return node->next;
    c5d8:	6824      	ldr	r4, [r4, #0]
    c5da:	b104      	cbz	r4, c5de <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    c5dc:	b123      	cbz	r3, c5e8 <pm_state_notify+0x40>
    c5de:	b12c      	cbz	r4, c5ec <pm_state_notify+0x44>
		if (entering_state) {
    c5e0:	2d00      	cmp	r5, #0
    c5e2:	d0ee      	beq.n	c5c2 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    c5e4:	6862      	ldr	r2, [r4, #4]
    c5e6:	e7ed      	b.n	c5c4 <pm_state_notify+0x1c>
    c5e8:	461c      	mov	r4, r3
    c5ea:	e7f8      	b.n	c5de <pm_state_notify+0x36>
	__asm__ volatile(
    c5ec:	f386 8811 	msr	BASEPRI, r6
    c5f0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c5f4:	bd70      	pop	{r4, r5, r6, pc}
    c5f6:	bf00      	nop
    c5f8:	20001f28 	.word	0x20001f28
    c5fc:	2000268c 	.word	0x2000268c
    c600:	20001f1c 	.word	0x20001f1c

0000c604 <pm_exit_pos_ops>:
{
    c604:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    c606:	4b06      	ldr	r3, [pc, #24]	; (c620 <pm_exit_pos_ops+0x1c>)
    c608:	b123      	cbz	r3, c614 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c60a:	7841      	ldrb	r1, [r0, #1]
    c60c:	7800      	ldrb	r0, [r0, #0]
    c60e:	f00b f863 	bl	176d8 <pm_state_exit_post_ops>
}
    c612:	bd08      	pop	{r3, pc}
    c614:	2300      	movs	r3, #0
    c616:	f383 8811 	msr	BASEPRI, r3
    c61a:	f3bf 8f6f 	isb	sy
    c61e:	e7f8      	b.n	c612 <pm_exit_pos_ops+0xe>
    c620:	000176d9 	.word	0x000176d9

0000c624 <pm_system_resume>:

void pm_system_resume(void)
{
    c624:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c626:	4b0e      	ldr	r3, [pc, #56]	; (c660 <pm_system_resume+0x3c>)
    c628:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c62a:	4621      	mov	r1, r4
    c62c:	480d      	ldr	r0, [pc, #52]	; (c664 <pm_system_resume+0x40>)
    c62e:	f00a fee0 	bl	173f2 <atomic_test_and_clear_bit>
    c632:	b900      	cbnz	r0, c636 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    c634:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    c636:	0065      	lsls	r5, r4, #1
    c638:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    c63c:	4e0a      	ldr	r6, [pc, #40]	; (c668 <pm_system_resume+0x44>)
    c63e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    c642:	f7ff ffdf 	bl	c604 <pm_exit_pos_ops>
		pm_state_notify(false);
    c646:	2000      	movs	r0, #0
    c648:	f7ff ffae 	bl	c5a8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c64c:	192b      	adds	r3, r5, r4
    c64e:	0099      	lsls	r1, r3, #2
    c650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    c654:	2200      	movs	r2, #0
    c656:	5072      	str	r2, [r6, r1]
    c658:	605a      	str	r2, [r3, #4]
    c65a:	609a      	str	r2, [r3, #8]
}
    c65c:	e7ea      	b.n	c634 <pm_system_resume+0x10>
    c65e:	bf00      	nop
    c660:	2000268c 	.word	0x2000268c
    c664:	20001f30 	.word	0x20001f30
    c668:	20001f1c 	.word	0x20001f1c

0000c66c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c66e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    c670:	4b38      	ldr	r3, [pc, #224]	; (c754 <pm_system_suspend+0xe8>)
    c672:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    c674:	f04f 0340 	mov.w	r3, #64	; 0x40
    c678:	f3ef 8611 	mrs	r6, BASEPRI
    c67c:	f383 8812 	msr	BASEPRI_MAX, r3
    c680:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c684:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c688:	4b33      	ldr	r3, [pc, #204]	; (c758 <pm_system_suspend+0xec>)
    c68a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    c68e:	2b00      	cmp	r3, #0
    c690:	d039      	beq.n	c706 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c692:	4b32      	ldr	r3, [pc, #200]	; (c75c <pm_system_suspend+0xf0>)
    c694:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    c698:	4f2f      	ldr	r7, [pc, #188]	; (c758 <pm_system_suspend+0xec>)
    c69a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    c69e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c6a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    c6a6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c6aa:	2300      	movs	r3, #0
    c6ac:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    c6b0:	f386 8811 	msr	BASEPRI, r6
    c6b4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c6b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c6bc:	4a27      	ldr	r2, [pc, #156]	; (c75c <pm_system_suspend+0xf0>)
    c6be:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d044      	beq.n	c750 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c6c6:	f1b5 3fff 	cmp.w	r5, #4294967295
    c6ca:	d12b      	bne.n	c724 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c6cc:	f008 fd02 	bl	150d4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c6d0:	2001      	movs	r0, #1
    c6d2:	f7ff ff69 	bl	c5a8 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    c6d6:	4621      	mov	r1, r4
    c6d8:	4821      	ldr	r0, [pc, #132]	; (c760 <pm_system_suspend+0xf4>)
    c6da:	f00a fea6 	bl	1742a <atomic_set_bit>
	if (pm_state_set != NULL) {
    c6de:	4b21      	ldr	r3, [pc, #132]	; (c764 <pm_system_suspend+0xf8>)
    c6e0:	b15b      	cbz	r3, c6fa <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    c6e2:	4a1e      	ldr	r2, [pc, #120]	; (c75c <pm_system_suspend+0xf0>)
    c6e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c6e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c6ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c6f0:	7859      	ldrb	r1, [r3, #1]
    c6f2:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    c6f6:	f00a ffe7 	bl	176c8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c6fa:	f7ff ff93 	bl	c624 <pm_system_resume>
	k_sched_unlock();
    c6fe:	f008 fed5 	bl	154ac <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    c702:	2001      	movs	r0, #1
}
    c704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    c706:	4601      	mov	r1, r0
    c708:	4620      	mov	r0, r4
    c70a:	f000 f831 	bl	c770 <pm_policy_next_state>
		if (info != NULL) {
    c70e:	2800      	cmp	r0, #0
    c710:	d0ce      	beq.n	c6b0 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    c712:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    c716:	4b11      	ldr	r3, [pc, #68]	; (c75c <pm_system_suspend+0xf0>)
    c718:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c71c:	c807      	ldmia	r0, {r0, r1, r2}
    c71e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    c722:	e7c5      	b.n	c6b0 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    c724:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c728:	4b0c      	ldr	r3, [pc, #48]	; (c75c <pm_system_suspend+0xf0>)
    c72a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c72e:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    c730:	0c41      	lsrs	r1, r0, #17
    c732:	03c0      	lsls	r0, r0, #15
    c734:	4b0c      	ldr	r3, [pc, #48]	; (c768 <pm_system_suspend+0xfc>)
    c736:	18c0      	adds	r0, r0, r3
    c738:	4a0c      	ldr	r2, [pc, #48]	; (c76c <pm_system_suspend+0x100>)
    c73a:	f04f 0300 	mov.w	r3, #0
    c73e:	f141 0100 	adc.w	r1, r1, #0
    c742:	f7f3 fccb 	bl	dc <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    c746:	2101      	movs	r1, #1
    c748:	1a28      	subs	r0, r5, r0
    c74a:	f005 ff91 	bl	12670 <sys_clock_set_timeout>
    c74e:	e7bd      	b.n	c6cc <pm_system_suspend+0x60>
		return false;
    c750:	2000      	movs	r0, #0
    c752:	e7d7      	b.n	c704 <pm_system_suspend+0x98>
    c754:	2000268c 	.word	0x2000268c
    c758:	20001f10 	.word	0x20001f10
    c75c:	20001f1c 	.word	0x20001f1c
    c760:	20001f30 	.word	0x20001f30
    c764:	000176c9 	.word	0x000176c9
    c768:	000f423f 	.word	0x000f423f
    c76c:	000f4240 	.word	0x000f4240

0000c770 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c774:	b082      	sub	sp, #8
    c776:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c778:	a901      	add	r1, sp, #4
    c77a:	f000 f845 	bl	c808 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c77e:	1e44      	subs	r4, r0, #1
    c780:	b224      	sxth	r4, r4
    c782:	e007      	b.n	c794 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    c784:	f1b6 3fff 	cmp.w	r6, #4294967295
    c788:	d033      	beq.n	c7f2 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    c78a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    c78c:	45b0      	cmp	r8, r6
    c78e:	d930      	bls.n	c7f2 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c790:	3c01      	subs	r4, #1
    c792:	b224      	sxth	r4, r4
    c794:	2c00      	cmp	r4, #0
    c796:	db2b      	blt.n	c7f0 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    c798:	9b01      	ldr	r3, [sp, #4]
    c79a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c79e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    c7a2:	7869      	ldrb	r1, [r5, #1]
    c7a4:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    c7a8:	f00a fe52 	bl	17450 <pm_policy_state_lock_is_active>
    c7ac:	2800      	cmp	r0, #0
    c7ae:	d1ef      	bne.n	c790 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    c7b0:	6868      	ldr	r0, [r5, #4]
    c7b2:	0c41      	lsrs	r1, r0, #17
    c7b4:	03c0      	lsls	r0, r0, #15
    c7b6:	4f11      	ldr	r7, [pc, #68]	; (c7fc <pm_policy_next_state+0x8c>)
    c7b8:	19c0      	adds	r0, r0, r7
    c7ba:	4a11      	ldr	r2, [pc, #68]	; (c800 <pm_policy_next_state+0x90>)
    c7bc:	f04f 0300 	mov.w	r3, #0
    c7c0:	f141 0100 	adc.w	r1, r1, #0
    c7c4:	f7f3 fc8a 	bl	dc <__aeabi_uldivmod>
    c7c8:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    c7ca:	68ab      	ldr	r3, [r5, #8]
    c7cc:	0c59      	lsrs	r1, r3, #17
    c7ce:	03db      	lsls	r3, r3, #15
    c7d0:	19d8      	adds	r0, r3, r7
    c7d2:	4a0b      	ldr	r2, [pc, #44]	; (c800 <pm_policy_next_state+0x90>)
    c7d4:	f04f 0300 	mov.w	r3, #0
    c7d8:	f141 0100 	adc.w	r1, r1, #0
    c7dc:	f7f3 fc7e 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c7e0:	4b08      	ldr	r3, [pc, #32]	; (c804 <pm_policy_next_state+0x94>)
    c7e2:	681b      	ldr	r3, [r3, #0]
    c7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    c7e8:	d0cc      	beq.n	c784 <pm_policy_next_state+0x14>
    c7ea:	4283      	cmp	r3, r0
    c7ec:	d8ca      	bhi.n	c784 <pm_policy_next_state+0x14>
    c7ee:	e7cf      	b.n	c790 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    c7f0:	2500      	movs	r5, #0
}
    c7f2:	4628      	mov	r0, r5
    c7f4:	b002      	add	sp, #8
    c7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7fa:	bf00      	nop
    c7fc:	000f423f 	.word	0x000f423f
    c800:	000f4240 	.word	0x000f4240
    c804:	200002d4 	.word	0x200002d4

0000c808 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c808:	b908      	cbnz	r0, c80e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c80a:	4b02      	ldr	r3, [pc, #8]	; (c814 <pm_state_cpu_get_all+0xc>)
    c80c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c80e:	2000      	movs	r0, #0
    c810:	4770      	bx	lr
    c812:	bf00      	nop
    c814:	0001a69c 	.word	0x0001a69c

0000c818 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c818:	4901      	ldr	r1, [pc, #4]	; (c820 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c81a:	2210      	movs	r2, #16
	str	r2, [r1]
    c81c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c81e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c820:	e000ed10 	.word	0xe000ed10

0000c824 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c824:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c826:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c828:	f380 8811 	msr	BASEPRI, r0
	isb
    c82c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    c830:	f3bf 8f4f 	dsb	sy
    c834:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c836:	b662      	cpsie	i
	isb
    c838:	f3bf 8f6f 	isb	sy

	bx	lr
    c83c:	4770      	bx	lr
    c83e:	bf00      	nop

0000c840 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c840:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c842:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c844:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    c848:	f3bf 8f4f 	dsb	sy
    c84c:	bf20      	wfe

	msr	BASEPRI, r0
    c84e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c852:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c854:	4770      	bx	lr
    c856:	bf00      	nop

0000c858 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85c:	b082      	sub	sp, #8
    c85e:	af00      	add	r7, sp, #0
    c860:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c862:	f8d0 e000 	ldr.w	lr, [r0]
    c866:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c86a:	6886      	ldr	r6, [r0, #8]
    c86c:	466d      	mov	r5, sp
    c86e:	b08a      	sub	sp, #40	; 0x28
    c870:	466b      	mov	r3, sp
    c872:	f113 0210 	adds.w	r2, r3, #16
    c876:	f000 8101 	beq.w	ca7c <esf_dump+0x224>
    c87a:	2018      	movs	r0, #24
    c87c:	b1ba      	cbz	r2, c8ae <esf_dump+0x56>
    c87e:	4601      	mov	r1, r0
    c880:	2804      	cmp	r0, #4
    c882:	dd03      	ble.n	c88c <esf_dump+0x34>
    c884:	f8df 8224 	ldr.w	r8, [pc, #548]	; caac <esf_dump+0x254>
    c888:	f8c3 8014 	str.w	r8, [r3, #20]
    c88c:	2908      	cmp	r1, #8
    c88e:	dd03      	ble.n	c898 <esf_dump+0x40>
    c890:	f8df 821c 	ldr.w	r8, [pc, #540]	; cab0 <esf_dump+0x258>
    c894:	f8c3 8018 	str.w	r8, [r3, #24]
    c898:	290c      	cmp	r1, #12
    c89a:	dd01      	ble.n	c8a0 <esf_dump+0x48>
    c89c:	f8c3 e01c 	str.w	lr, [r3, #28]
    c8a0:	2910      	cmp	r1, #16
    c8a2:	dd01      	ble.n	c8a8 <esf_dump+0x50>
    c8a4:	f8c3 c020 	str.w	ip, [r3, #32]
    c8a8:	2914      	cmp	r1, #20
    c8aa:	dd00      	ble.n	c8ae <esf_dump+0x56>
    c8ac:	625e      	str	r6, [r3, #36]	; 0x24
    c8ae:	2817      	cmp	r0, #23
    c8b0:	f340 80e7 	ble.w	ca82 <esf_dump+0x22a>
    c8b4:	f04f 0c18 	mov.w	ip, #24
    c8b8:	b13a      	cbz	r2, c8ca <esf_dump+0x72>
    c8ba:	2106      	movs	r1, #6
    c8bc:	7139      	strb	r1, [r7, #4]
    c8be:	2100      	movs	r1, #0
    c8c0:	7179      	strb	r1, [r7, #5]
    c8c2:	71b9      	strb	r1, [r7, #6]
    c8c4:	71f9      	strb	r1, [r7, #7]
    c8c6:	6878      	ldr	r0, [r7, #4]
    c8c8:	6118      	str	r0, [r3, #16]
    c8ca:	2100      	movs	r1, #0
    c8cc:	f36f 0100 	bfc	r1, #0, #1
    c8d0:	f36f 0141 	bfc	r1, #1, #1
    c8d4:	f36f 0182 	bfc	r1, #2, #1
    c8d8:	f36f 01c5 	bfc	r1, #3, #3
    c8dc:	2301      	movs	r3, #1
    c8de:	f363 1188 	bfi	r1, r3, #6, #3
    c8e2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    c8e6:	f36c 2153 	bfi	r1, ip, #9, #11
    c8ea:	f36f 511f 	bfc	r1, #20, #12
    c8ee:	2300      	movs	r3, #0
    c8f0:	4870      	ldr	r0, [pc, #448]	; (cab4 <esf_dump+0x25c>)
    c8f2:	f7ff fab9 	bl	be68 <z_impl_z_log_msg_static_create>
    c8f6:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c8f8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    c8fc:	f8d4 c010 	ldr.w	ip, [r4, #16]
    c900:	6966      	ldr	r6, [r4, #20]
    c902:	466d      	mov	r5, sp
    c904:	b08a      	sub	sp, #40	; 0x28
    c906:	466b      	mov	r3, sp
    c908:	f113 0210 	adds.w	r2, r3, #16
    c90c:	f000 80bc 	beq.w	ca88 <esf_dump+0x230>
    c910:	2018      	movs	r0, #24
    c912:	b1ba      	cbz	r2, c944 <esf_dump+0xec>
    c914:	4601      	mov	r1, r0
    c916:	2804      	cmp	r0, #4
    c918:	dd03      	ble.n	c922 <esf_dump+0xca>
    c91a:	f8df 819c 	ldr.w	r8, [pc, #412]	; cab8 <esf_dump+0x260>
    c91e:	f8c3 8014 	str.w	r8, [r3, #20]
    c922:	2908      	cmp	r1, #8
    c924:	dd03      	ble.n	c92e <esf_dump+0xd6>
    c926:	f8df 8188 	ldr.w	r8, [pc, #392]	; cab0 <esf_dump+0x258>
    c92a:	f8c3 8018 	str.w	r8, [r3, #24]
    c92e:	290c      	cmp	r1, #12
    c930:	dd01      	ble.n	c936 <esf_dump+0xde>
    c932:	f8c3 e01c 	str.w	lr, [r3, #28]
    c936:	2910      	cmp	r1, #16
    c938:	dd01      	ble.n	c93e <esf_dump+0xe6>
    c93a:	f8c3 c020 	str.w	ip, [r3, #32]
    c93e:	2914      	cmp	r1, #20
    c940:	dd00      	ble.n	c944 <esf_dump+0xec>
    c942:	625e      	str	r6, [r3, #36]	; 0x24
    c944:	2817      	cmp	r0, #23
    c946:	f340 80a2 	ble.w	ca8e <esf_dump+0x236>
    c94a:	f04f 0c18 	mov.w	ip, #24
    c94e:	b13a      	cbz	r2, c960 <esf_dump+0x108>
    c950:	2106      	movs	r1, #6
    c952:	7139      	strb	r1, [r7, #4]
    c954:	2100      	movs	r1, #0
    c956:	7179      	strb	r1, [r7, #5]
    c958:	71b9      	strb	r1, [r7, #6]
    c95a:	71f9      	strb	r1, [r7, #7]
    c95c:	6878      	ldr	r0, [r7, #4]
    c95e:	6118      	str	r0, [r3, #16]
    c960:	2100      	movs	r1, #0
    c962:	f36f 0100 	bfc	r1, #0, #1
    c966:	f36f 0141 	bfc	r1, #1, #1
    c96a:	f36f 0182 	bfc	r1, #2, #1
    c96e:	f36f 01c5 	bfc	r1, #3, #3
    c972:	2301      	movs	r3, #1
    c974:	f363 1188 	bfi	r1, r3, #6, #3
    c978:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    c97c:	f36c 2153 	bfi	r1, ip, #9, #11
    c980:	f36f 511f 	bfc	r1, #20, #12
    c984:	2300      	movs	r3, #0
    c986:	484b      	ldr	r0, [pc, #300]	; (cab4 <esf_dump+0x25c>)
    c988:	f7ff fa6e 	bl	be68 <z_impl_z_log_msg_static_create>
    c98c:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c98e:	69e6      	ldr	r6, [r4, #28]
    c990:	466d      	mov	r5, sp
    c992:	b088      	sub	sp, #32
    c994:	466b      	mov	r3, sp
    c996:	f113 0210 	adds.w	r2, r3, #16
    c99a:	d07b      	beq.n	ca94 <esf_dump+0x23c>
    c99c:	2110      	movs	r1, #16
    c99e:	b17a      	cbz	r2, c9c0 <esf_dump+0x168>
    c9a0:	4608      	mov	r0, r1
    c9a2:	2904      	cmp	r1, #4
    c9a4:	dd03      	ble.n	c9ae <esf_dump+0x156>
    c9a6:	f8df c114 	ldr.w	ip, [pc, #276]	; cabc <esf_dump+0x264>
    c9aa:	f8c3 c014 	str.w	ip, [r3, #20]
    c9ae:	2808      	cmp	r0, #8
    c9b0:	dd03      	ble.n	c9ba <esf_dump+0x162>
    c9b2:	f8df c0fc 	ldr.w	ip, [pc, #252]	; cab0 <esf_dump+0x258>
    c9b6:	f8c3 c018 	str.w	ip, [r3, #24]
    c9ba:	280c      	cmp	r0, #12
    c9bc:	dd00      	ble.n	c9c0 <esf_dump+0x168>
    c9be:	61de      	str	r6, [r3, #28]
    c9c0:	290f      	cmp	r1, #15
    c9c2:	dd6a      	ble.n	ca9a <esf_dump+0x242>
    c9c4:	f04f 0c10 	mov.w	ip, #16
    c9c8:	b13a      	cbz	r2, c9da <esf_dump+0x182>
    c9ca:	2104      	movs	r1, #4
    c9cc:	7139      	strb	r1, [r7, #4]
    c9ce:	2100      	movs	r1, #0
    c9d0:	7179      	strb	r1, [r7, #5]
    c9d2:	71b9      	strb	r1, [r7, #6]
    c9d4:	71f9      	strb	r1, [r7, #7]
    c9d6:	6878      	ldr	r0, [r7, #4]
    c9d8:	6118      	str	r0, [r3, #16]
    c9da:	2100      	movs	r1, #0
    c9dc:	f36f 0100 	bfc	r1, #0, #1
    c9e0:	f36f 0141 	bfc	r1, #1, #1
    c9e4:	f36f 0182 	bfc	r1, #2, #1
    c9e8:	f36f 01c5 	bfc	r1, #3, #3
    c9ec:	2301      	movs	r3, #1
    c9ee:	f363 1188 	bfi	r1, r3, #6, #3
    c9f2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    c9f6:	f36c 2153 	bfi	r1, ip, #9, #11
    c9fa:	f36f 511f 	bfc	r1, #20, #12
    c9fe:	2300      	movs	r3, #0
    ca00:	482c      	ldr	r0, [pc, #176]	; (cab4 <esf_dump+0x25c>)
    ca02:	f7ff fa31 	bl	be68 <z_impl_z_log_msg_static_create>
    ca06:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    ca08:	69a4      	ldr	r4, [r4, #24]
    ca0a:	b088      	sub	sp, #32
    ca0c:	466b      	mov	r3, sp
    ca0e:	f113 0210 	adds.w	r2, r3, #16
    ca12:	d045      	beq.n	caa0 <esf_dump+0x248>
    ca14:	2110      	movs	r1, #16
    ca16:	b15a      	cbz	r2, ca30 <esf_dump+0x1d8>
    ca18:	4608      	mov	r0, r1
    ca1a:	2904      	cmp	r1, #4
    ca1c:	dd01      	ble.n	ca22 <esf_dump+0x1ca>
    ca1e:	4d28      	ldr	r5, [pc, #160]	; (cac0 <esf_dump+0x268>)
    ca20:	615d      	str	r5, [r3, #20]
    ca22:	2808      	cmp	r0, #8
    ca24:	dd01      	ble.n	ca2a <esf_dump+0x1d2>
    ca26:	4d22      	ldr	r5, [pc, #136]	; (cab0 <esf_dump+0x258>)
    ca28:	619d      	str	r5, [r3, #24]
    ca2a:	280c      	cmp	r0, #12
    ca2c:	dd00      	ble.n	ca30 <esf_dump+0x1d8>
    ca2e:	61dc      	str	r4, [r3, #28]
    ca30:	290f      	cmp	r1, #15
    ca32:	dd38      	ble.n	caa6 <esf_dump+0x24e>
    ca34:	2410      	movs	r4, #16
    ca36:	b13a      	cbz	r2, ca48 <esf_dump+0x1f0>
    ca38:	2104      	movs	r1, #4
    ca3a:	7139      	strb	r1, [r7, #4]
    ca3c:	2100      	movs	r1, #0
    ca3e:	7179      	strb	r1, [r7, #5]
    ca40:	71b9      	strb	r1, [r7, #6]
    ca42:	71f9      	strb	r1, [r7, #7]
    ca44:	6878      	ldr	r0, [r7, #4]
    ca46:	6118      	str	r0, [r3, #16]
    ca48:	2100      	movs	r1, #0
    ca4a:	f36f 0100 	bfc	r1, #0, #1
    ca4e:	f36f 0141 	bfc	r1, #1, #1
    ca52:	f36f 0182 	bfc	r1, #2, #1
    ca56:	f36f 01c5 	bfc	r1, #3, #3
    ca5a:	2301      	movs	r3, #1
    ca5c:	f363 1188 	bfi	r1, r3, #6, #3
    ca60:	f3c4 040a 	ubfx	r4, r4, #0, #11
    ca64:	f364 2153 	bfi	r1, r4, #9, #11
    ca68:	f36f 511f 	bfc	r1, #20, #12
    ca6c:	2300      	movs	r3, #0
    ca6e:	4811      	ldr	r0, [pc, #68]	; (cab4 <esf_dump+0x25c>)
    ca70:	f7ff f9fa 	bl	be68 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    ca74:	3708      	adds	r7, #8
    ca76:	46bd      	mov	sp, r7
    ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    ca7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ca80:	e6fc      	b.n	c87c <esf_dump+0x24>
    ca82:	f06f 0c1b 	mvn.w	ip, #27
    ca86:	e717      	b.n	c8b8 <esf_dump+0x60>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    ca88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ca8c:	e741      	b.n	c912 <esf_dump+0xba>
    ca8e:	f06f 0c1b 	mvn.w	ip, #27
    ca92:	e75c      	b.n	c94e <esf_dump+0xf6>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    ca94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ca98:	e781      	b.n	c99e <esf_dump+0x146>
    ca9a:	f06f 0c1b 	mvn.w	ip, #27
    ca9e:	e793      	b.n	c9c8 <esf_dump+0x170>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    caa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    caa4:	e7b7      	b.n	ca16 <esf_dump+0x1be>
    caa6:	f06f 041b 	mvn.w	r4, #27
    caaa:	e7c4      	b.n	ca36 <esf_dump+0x1de>
    caac:	0001a69c 	.word	0x0001a69c
    cab0:	0001a74c 	.word	0x0001a74c
    cab4:	0001a144 	.word	0x0001a144
    cab8:	0001a6d0 	.word	0x0001a6d0
    cabc:	0001a704 	.word	0x0001a704
    cac0:	0001a718 	.word	0x0001a718

0000cac4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cac4:	2800      	cmp	r0, #0
    cac6:	db07      	blt.n	cad8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cac8:	f000 021f 	and.w	r2, r0, #31
    cacc:	0940      	lsrs	r0, r0, #5
    cace:	2301      	movs	r3, #1
    cad0:	4093      	lsls	r3, r2
    cad2:	4a02      	ldr	r2, [pc, #8]	; (cadc <__NVIC_EnableIRQ+0x18>)
    cad4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    cad8:	4770      	bx	lr
    cada:	bf00      	nop
    cadc:	e000e100 	.word	0xe000e100

0000cae0 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cae0:	2800      	cmp	r0, #0
    cae2:	db0c      	blt.n	cafe <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cae4:	f000 021f 	and.w	r2, r0, #31
    cae8:	0940      	lsrs	r0, r0, #5
    caea:	2301      	movs	r3, #1
    caec:	4093      	lsls	r3, r2
    caee:	3020      	adds	r0, #32
    caf0:	4a03      	ldr	r2, [pc, #12]	; (cb00 <__NVIC_DisableIRQ+0x20>)
    caf2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    caf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cafa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    cafe:	4770      	bx	lr
    cb00:	e000e100 	.word	0xe000e100

0000cb04 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cb04:	2800      	cmp	r0, #0
    cb06:	db08      	blt.n	cb1a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb08:	0149      	lsls	r1, r1, #5
    cb0a:	b2c9      	uxtb	r1, r1
    cb0c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    cb10:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    cb14:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    cb18:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb1a:	f000 000f 	and.w	r0, r0, #15
    cb1e:	0149      	lsls	r1, r1, #5
    cb20:	b2c9      	uxtb	r1, r1
    cb22:	4b01      	ldr	r3, [pc, #4]	; (cb28 <__NVIC_SetPriority+0x24>)
    cb24:	5419      	strb	r1, [r3, r0]
  }
}
    cb26:	4770      	bx	lr
    cb28:	e000ed14 	.word	0xe000ed14

0000cb2c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cb2c:	0942      	lsrs	r2, r0, #5
    cb2e:	4b05      	ldr	r3, [pc, #20]	; (cb44 <arch_irq_is_enabled+0x18>)
    cb30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cb34:	f000 001f 	and.w	r0, r0, #31
    cb38:	2301      	movs	r3, #1
    cb3a:	fa03 f000 	lsl.w	r0, r3, r0
}
    cb3e:	4010      	ands	r0, r2
    cb40:	4770      	bx	lr
    cb42:	bf00      	nop
    cb44:	e000e100 	.word	0xe000e100

0000cb48 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    cb48:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    cb4a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    cb4c:	4b05      	ldr	r3, [pc, #20]	; (cb64 <_arch_isr_direct_pm+0x1c>)
    cb4e:	695b      	ldr	r3, [r3, #20]
    cb50:	b90b      	cbnz	r3, cb56 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    cb52:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    cb54:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    cb56:	4b03      	ldr	r3, [pc, #12]	; (cb64 <_arch_isr_direct_pm+0x1c>)
    cb58:	2200      	movs	r2, #0
    cb5a:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    cb5c:	f00c fbd6 	bl	1930c <z_pm_save_idle_exit>
    cb60:	e7f7      	b.n	cb52 <_arch_isr_direct_pm+0xa>
    cb62:	bf00      	nop
    cb64:	2000268c 	.word	0x2000268c

0000cb68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cb68:	bf30      	wfi
    b z_SysNmiOnReset
    cb6a:	f7ff bffd 	b.w	cb68 <z_SysNmiOnReset>
    cb6e:	bf00      	nop

0000cb70 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    cb70:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cb72:	4b0b      	ldr	r3, [pc, #44]	; (cba0 <z_arm_prep_c+0x30>)
    cb74:	4a0b      	ldr	r2, [pc, #44]	; (cba4 <z_arm_prep_c+0x34>)
    cb76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    cb7a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    cb7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb80:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cb84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cb88:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cb8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    cb90:	f007 fdda 	bl	14748 <z_bss_zero>
	z_data_copy();
    cb94:	f008 fdf2 	bl	1577c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cb98:	f001 fa9e 	bl	e0d8 <z_arm_interrupt_init>
	z_cstart();
    cb9c:	f007 fe32 	bl	14804 <z_cstart>
    cba0:	e000ed00 	.word	0xe000ed00
    cba4:	00000000 	.word	0x00000000

0000cba8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cba8:	4a0a      	ldr	r2, [pc, #40]	; (cbd4 <arch_swap+0x2c>)
    cbaa:	6893      	ldr	r3, [r2, #8]
    cbac:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    cbb0:	4909      	ldr	r1, [pc, #36]	; (cbd8 <arch_swap+0x30>)
    cbb2:	6809      	ldr	r1, [r1, #0]
    cbb4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cbb8:	4908      	ldr	r1, [pc, #32]	; (cbdc <arch_swap+0x34>)
    cbba:	684b      	ldr	r3, [r1, #4]
    cbbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cbc0:	604b      	str	r3, [r1, #4]
    cbc2:	2300      	movs	r3, #0
    cbc4:	f383 8811 	msr	BASEPRI, r3
    cbc8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cbcc:	6893      	ldr	r3, [r2, #8]
}
    cbce:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    cbd2:	4770      	bx	lr
    cbd4:	2000268c 	.word	0x2000268c
    cbd8:	0001bb90 	.word	0x0001bb90
    cbdc:	e000ed00 	.word	0xe000ed00

0000cbe0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cbe0:	4913      	ldr	r1, [pc, #76]	; (cc30 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cbe2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cbe4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    cbe8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cbea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cbee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cbf2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    cbf4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cbf8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cbfc:	4f0d      	ldr	r7, [pc, #52]	; (cc34 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cbfe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cc02:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    cc04:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    cc06:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    cc08:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    cc0c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    cc0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    cc12:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    cc16:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    cc18:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    cc1a:	f001 fb0d 	bl	e238 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    cc1e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    cc22:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    cc26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    cc2a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    cc2e:	4770      	bx	lr
    ldr r1, =_kernel
    cc30:	2000268c 	.word	0x2000268c
    ldr v4, =_SCS_ICSR
    cc34:	e000ed04 	.word	0xe000ed04

0000cc38 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    cc38:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cc3c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cc3e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cc42:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cc46:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cc48:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cc4c:	2902      	cmp	r1, #2
    beq _oops
    cc4e:	d0ff      	beq.n	cc50 <_oops>

0000cc50 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cc50:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    cc52:	f00a fc0b 	bl	1746c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    cc56:	bd01      	pop	{r0, pc}

0000cc58 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    cc58:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    cc5a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    cc5e:	490e      	ldr	r1, [pc, #56]	; (cc98 <arch_new_thread+0x40>)
    cc60:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    cc64:	f021 0101 	bic.w	r1, r1, #1
    cc68:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    cc6c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    cc70:	9b01      	ldr	r3, [sp, #4]
    cc72:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    cc76:	9b02      	ldr	r3, [sp, #8]
    cc78:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    cc7c:	9b03      	ldr	r3, [sp, #12]
    cc7e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    cc82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    cc86:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    cc8a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    cc8c:	2300      	movs	r3, #0
    cc8e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    cc92:	bc10      	pop	{r4}
    cc94:	4770      	bx	lr
    cc96:	bf00      	nop
    cc98:	00015f7b 	.word	0x00015f7b

0000cc9c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    cc9c:	4b10      	ldr	r3, [pc, #64]	; (cce0 <z_check_thread_stack_fail+0x44>)
    cc9e:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    cca0:	b1bb      	cbz	r3, ccd2 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    cca2:	f110 0f16 	cmn.w	r0, #22
    cca6:	d00b      	beq.n	ccc0 <z_check_thread_stack_fail+0x24>
    cca8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    ccac:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    ccb0:	4584      	cmp	ip, r0
    ccb2:	d810      	bhi.n	ccd6 <z_check_thread_stack_fail+0x3a>
    ccb4:	4282      	cmp	r2, r0
    ccb6:	d910      	bls.n	ccda <z_check_thread_stack_fail+0x3e>
    ccb8:	428a      	cmp	r2, r1
    ccba:	d807      	bhi.n	cccc <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    ccbc:	2000      	movs	r0, #0
    ccbe:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    ccc0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    ccc4:	428a      	cmp	r2, r1
    ccc6:	d801      	bhi.n	cccc <z_check_thread_stack_fail+0x30>
	return 0;
    ccc8:	2000      	movs	r0, #0
}
    ccca:	4770      	bx	lr
		return thread->stack_info.start;
    cccc:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    ccd0:	4770      	bx	lr
		return 0;
    ccd2:	2000      	movs	r0, #0
    ccd4:	4770      	bx	lr
	return 0;
    ccd6:	2000      	movs	r0, #0
    ccd8:	4770      	bx	lr
    ccda:	2000      	movs	r0, #0
    ccdc:	4770      	bx	lr
    ccde:	bf00      	nop
    cce0:	2000268c 	.word	0x2000268c

0000cce4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    cce4:	b508      	push	{r3, lr}
    cce6:	460d      	mov	r5, r1
    cce8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ccea:	4b08      	ldr	r3, [pc, #32]	; (cd0c <arch_switch_to_main_thread+0x28>)
    ccec:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    ccee:	f001 faa3 	bl	e238 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ccf2:	4620      	mov	r0, r4
    ccf4:	f385 8809 	msr	PSP, r5
    ccf8:	2100      	movs	r1, #0
    ccfa:	b663      	cpsie	if
    ccfc:	f381 8811 	msr	BASEPRI, r1
    cd00:	f3bf 8f6f 	isb	sy
    cd04:	2200      	movs	r2, #0
    cd06:	2300      	movs	r3, #0
    cd08:	f009 f937 	bl	15f7a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cd0c:	2000268c 	.word	0x2000268c

0000cd10 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cd10:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    cd12:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cd14:	4a0b      	ldr	r2, [pc, #44]	; (cd44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cd16:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    cd18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cd1a:	bf1e      	ittt	ne
	movne	r1, #0
    cd1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cd1e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    cd20:	f00c faf4 	blne	1930c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    cd24:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    cd26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cd2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cd2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cd32:	4905      	ldr	r1, [pc, #20]	; (cd48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cd34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cd36:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cd38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cd3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cd3e:	4903      	ldr	r1, [pc, #12]	; (cd4c <_isr_wrapper+0x3c>)
	bx r1
    cd40:	4708      	bx	r1
    cd42:	0000      	.short	0x0000
	ldr r2, =_kernel
    cd44:	2000268c 	.word	0x2000268c
	ldr r1, =_sw_isr_table
    cd48:	00019f40 	.word	0x00019f40
	ldr r1, =z_arm_int_exit
    cd4c:	0000cd51 	.word	0x0000cd51

0000cd50 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    cd50:	4b04      	ldr	r3, [pc, #16]	; (cd64 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    cd52:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    cd54:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    cd56:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    cd58:	d003      	beq.n	cd62 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    cd5a:	4903      	ldr	r1, [pc, #12]	; (cd68 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    cd5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    cd60:	600a      	str	r2, [r1, #0]

0000cd62 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    cd62:	4770      	bx	lr
	ldr r3, =_kernel
    cd64:	2000268c 	.word	0x2000268c
	ldr r1, =_SCS_ICSR
    cd68:	e000ed04 	.word	0xe000ed04

0000cd6c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    cd6c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    cd6e:	4b0d      	ldr	r3, [pc, #52]	; (cda4 <z_arm_is_synchronous_svc+0x38>)
    cd70:	695a      	ldr	r2, [r3, #20]
    cd72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    cd76:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    cd78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd7c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    cd80:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    cd84:	695a      	ldr	r2, [r3, #20]
    cd86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    cd8a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    cd8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd90:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    cd94:	f64d 7302 	movw	r3, #57090	; 0xdf02
    cd98:	4299      	cmp	r1, r3
    cd9a:	d001      	beq.n	cda0 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    cd9c:	2000      	movs	r0, #0
    cd9e:	4770      	bx	lr
		return true;
    cda0:	2001      	movs	r0, #1
}
    cda2:	4770      	bx	lr
    cda4:	e000ed00 	.word	0xe000ed00

0000cda8 <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    cda8:	f04f 0c00 	mov.w	ip, #0
    cdac:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    cdb0:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
    cdb4:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
    cdb8:	d14e      	bne.n	ce58 <get_esf+0xb0>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    cdba:	f002 0c0c 	and.w	ip, r2, #12
    cdbe:	f1bc 0f08 	cmp.w	ip, #8
    cdc2:	d004      	beq.n	cdce <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    cdc4:	f012 0f08 	tst.w	r2, #8
    cdc8:	d043      	beq.n	ce52 <get_esf+0xaa>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    cdca:	4608      	mov	r0, r1
    cdcc:	4770      	bx	lr
{
    cdce:	b5b0      	push	{r4, r5, r7, lr}
    cdd0:	b082      	sub	sp, #8
    cdd2:	af00      	add	r7, sp, #0
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    cdd4:	466c      	mov	r4, sp
    cdd6:	b088      	sub	sp, #32
    cdd8:	466b      	mov	r3, sp
    cdda:	f113 0210 	adds.w	r2, r3, #16
    cdde:	d032      	beq.n	ce46 <get_esf+0x9e>
    cde0:	210c      	movs	r1, #12
    cde2:	b142      	cbz	r2, cdf6 <get_esf+0x4e>
    cde4:	4608      	mov	r0, r1
    cde6:	2904      	cmp	r1, #4
    cde8:	dd01      	ble.n	cdee <get_esf+0x46>
    cdea:	4d1c      	ldr	r5, [pc, #112]	; (ce5c <get_esf+0xb4>)
    cdec:	615d      	str	r5, [r3, #20]
    cdee:	2808      	cmp	r0, #8
    cdf0:	dd01      	ble.n	cdf6 <get_esf+0x4e>
    cdf2:	481b      	ldr	r0, [pc, #108]	; (ce60 <get_esf+0xb8>)
    cdf4:	6198      	str	r0, [r3, #24]
    cdf6:	290b      	cmp	r1, #11
    cdf8:	dd28      	ble.n	ce4c <get_esf+0xa4>
    cdfa:	f04f 0c0c 	mov.w	ip, #12
    cdfe:	b13a      	cbz	r2, ce10 <get_esf+0x68>
    ce00:	2103      	movs	r1, #3
    ce02:	7139      	strb	r1, [r7, #4]
    ce04:	2100      	movs	r1, #0
    ce06:	7179      	strb	r1, [r7, #5]
    ce08:	71b9      	strb	r1, [r7, #6]
    ce0a:	71f9      	strb	r1, [r7, #7]
    ce0c:	6878      	ldr	r0, [r7, #4]
    ce0e:	6118      	str	r0, [r3, #16]
    ce10:	2100      	movs	r1, #0
    ce12:	f36f 0100 	bfc	r1, #0, #1
    ce16:	f36f 0141 	bfc	r1, #1, #1
    ce1a:	f36f 0182 	bfc	r1, #2, #1
    ce1e:	f36f 01c5 	bfc	r1, #3, #3
    ce22:	2301      	movs	r3, #1
    ce24:	f363 1188 	bfi	r1, r3, #6, #3
    ce28:	f3cc 030a 	ubfx	r3, ip, #0, #11
    ce2c:	f363 2153 	bfi	r1, r3, #9, #11
    ce30:	f36f 511f 	bfc	r1, #20, #12
    ce34:	2300      	movs	r3, #0
    ce36:	480b      	ldr	r0, [pc, #44]	; (ce64 <get_esf+0xbc>)
    ce38:	f7ff f816 	bl	be68 <z_impl_z_log_msg_static_create>
    ce3c:	46a5      	mov	sp, r4
		return NULL;
    ce3e:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    ce40:	3708      	adds	r7, #8
    ce42:	46bd      	mov	sp, r7
    ce44:	bdb0      	pop	{r4, r5, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    ce46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ce4a:	e7ca      	b.n	cde2 <get_esf+0x3a>
    ce4c:	f06f 0c1b 	mvn.w	ip, #27
    ce50:	e7d5      	b.n	cdfe <get_esf+0x56>
			*nested_exc = true;
    ce52:	2201      	movs	r2, #1
    ce54:	701a      	strb	r2, [r3, #0]
    ce56:	4770      	bx	lr
		return NULL;
    ce58:	2000      	movs	r0, #0
}
    ce5a:	4770      	bx	lr
    ce5c:	0001a758 	.word	0x0001a758
    ce60:	0001ab90 	.word	0x0001ab90
    ce64:	0001a144 	.word	0x0001a144

0000ce68 <bus_fault>:
{
    ce68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce6c:	b082      	sub	sp, #8
    ce6e:	af00      	add	r7, sp, #0
    ce70:	4605      	mov	r5, r0
    ce72:	460e      	mov	r6, r1
    ce74:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    ce76:	46e8      	mov	r8, sp
    ce78:	b088      	sub	sp, #32
    ce7a:	466b      	mov	r3, sp
    ce7c:	f113 0210 	adds.w	r2, r3, #16
    ce80:	f000 8141 	beq.w	d106 <bus_fault+0x29e>
    ce84:	210c      	movs	r1, #12
    ce86:	b152      	cbz	r2, ce9e <bus_fault+0x36>
    ce88:	4608      	mov	r0, r1
    ce8a:	2904      	cmp	r1, #4
    ce8c:	dd03      	ble.n	ce96 <bus_fault+0x2e>
    ce8e:	f8df c2b8 	ldr.w	ip, [pc, #696]	; d148 <bus_fault+0x2e0>
    ce92:	f8c3 c014 	str.w	ip, [r3, #20]
    ce96:	2808      	cmp	r0, #8
    ce98:	dd01      	ble.n	ce9e <bus_fault+0x36>
    ce9a:	48ac      	ldr	r0, [pc, #688]	; (d14c <bus_fault+0x2e4>)
    ce9c:	6198      	str	r0, [r3, #24]
    ce9e:	290b      	cmp	r1, #11
    cea0:	f340 8134 	ble.w	d10c <bus_fault+0x2a4>
    cea4:	f04f 0c0c 	mov.w	ip, #12
    cea8:	b13a      	cbz	r2, ceba <bus_fault+0x52>
    ceaa:	2103      	movs	r1, #3
    ceac:	7139      	strb	r1, [r7, #4]
    ceae:	2100      	movs	r1, #0
    ceb0:	7179      	strb	r1, [r7, #5]
    ceb2:	71b9      	strb	r1, [r7, #6]
    ceb4:	71f9      	strb	r1, [r7, #7]
    ceb6:	6878      	ldr	r0, [r7, #4]
    ceb8:	6118      	str	r0, [r3, #16]
    ceba:	2100      	movs	r1, #0
    cebc:	f36f 0100 	bfc	r1, #0, #1
    cec0:	f36f 0141 	bfc	r1, #1, #1
    cec4:	f36f 0182 	bfc	r1, #2, #1
    cec8:	f36f 01c5 	bfc	r1, #3, #3
    cecc:	2301      	movs	r3, #1
    cece:	f363 1188 	bfi	r1, r3, #6, #3
    ced2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    ced6:	f36c 2153 	bfi	r1, ip, #9, #11
    ceda:	f36f 511f 	bfc	r1, #20, #12
    cede:	2300      	movs	r3, #0
    cee0:	489b      	ldr	r0, [pc, #620]	; (d150 <bus_fault+0x2e8>)
    cee2:	f7fe ffc1 	bl	be68 <z_impl_z_log_msg_static_create>
    cee6:	46c5      	mov	sp, r8
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    cee8:	4b9a      	ldr	r3, [pc, #616]	; (d154 <bus_fault+0x2ec>)
    ceea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ceec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cef0:	f000 8115 	beq.w	d11e <bus_fault+0x2b6>
		PR_FAULT_INFO("  Stacking error");
    cef4:	46e8      	mov	r8, sp
    cef6:	b088      	sub	sp, #32
    cef8:	466b      	mov	r3, sp
    cefa:	f113 0210 	adds.w	r2, r3, #16
    cefe:	f000 8108 	beq.w	d112 <bus_fault+0x2aa>
    cf02:	210c      	movs	r1, #12
    cf04:	b152      	cbz	r2, cf1c <bus_fault+0xb4>
    cf06:	4608      	mov	r0, r1
    cf08:	2904      	cmp	r1, #4
    cf0a:	dd03      	ble.n	cf14 <bus_fault+0xac>
    cf0c:	f8df c248 	ldr.w	ip, [pc, #584]	; d158 <bus_fault+0x2f0>
    cf10:	f8c3 c014 	str.w	ip, [r3, #20]
    cf14:	2808      	cmp	r0, #8
    cf16:	dd01      	ble.n	cf1c <bus_fault+0xb4>
    cf18:	488c      	ldr	r0, [pc, #560]	; (d14c <bus_fault+0x2e4>)
    cf1a:	6198      	str	r0, [r3, #24]
    cf1c:	290b      	cmp	r1, #11
    cf1e:	f340 80fb 	ble.w	d118 <bus_fault+0x2b0>
    cf22:	f04f 0c0c 	mov.w	ip, #12
    cf26:	b13a      	cbz	r2, cf38 <bus_fault+0xd0>
    cf28:	2103      	movs	r1, #3
    cf2a:	7139      	strb	r1, [r7, #4]
    cf2c:	2100      	movs	r1, #0
    cf2e:	7179      	strb	r1, [r7, #5]
    cf30:	71b9      	strb	r1, [r7, #6]
    cf32:	71f9      	strb	r1, [r7, #7]
    cf34:	6878      	ldr	r0, [r7, #4]
    cf36:	6118      	str	r0, [r3, #16]
    cf38:	2100      	movs	r1, #0
    cf3a:	f36f 0100 	bfc	r1, #0, #1
    cf3e:	f36f 0141 	bfc	r1, #1, #1
    cf42:	f36f 0182 	bfc	r1, #2, #1
    cf46:	f36f 01c5 	bfc	r1, #3, #3
    cf4a:	2301      	movs	r3, #1
    cf4c:	f363 1188 	bfi	r1, r3, #6, #3
    cf50:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    cf54:	f36c 2153 	bfi	r1, ip, #9, #11
    cf58:	f36f 511f 	bfc	r1, #20, #12
    cf5c:	2300      	movs	r3, #0
    cf5e:	487c      	ldr	r0, [pc, #496]	; (d150 <bus_fault+0x2e8>)
    cf60:	f7fe ff82 	bl	be68 <z_impl_z_log_msg_static_create>
    cf64:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_STACKING;
    cf66:	f04f 0817 	mov.w	r8, #23
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    cf6a:	4b7a      	ldr	r3, [pc, #488]	; (d154 <bus_fault+0x2ec>)
    cf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf6e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    cf72:	d03a      	beq.n	cfea <bus_fault+0x182>
		PR_FAULT_INFO("  Unstacking error");
    cf74:	46e8      	mov	r8, sp
    cf76:	b088      	sub	sp, #32
    cf78:	466b      	mov	r3, sp
    cf7a:	f113 0210 	adds.w	r2, r3, #16
    cf7e:	f000 80d1 	beq.w	d124 <bus_fault+0x2bc>
    cf82:	210c      	movs	r1, #12
    cf84:	b152      	cbz	r2, cf9c <bus_fault+0x134>
    cf86:	4608      	mov	r0, r1
    cf88:	2904      	cmp	r1, #4
    cf8a:	dd03      	ble.n	cf94 <bus_fault+0x12c>
    cf8c:	f8df c1cc 	ldr.w	ip, [pc, #460]	; d15c <bus_fault+0x2f4>
    cf90:	f8c3 c014 	str.w	ip, [r3, #20]
    cf94:	2808      	cmp	r0, #8
    cf96:	dd01      	ble.n	cf9c <bus_fault+0x134>
    cf98:	486c      	ldr	r0, [pc, #432]	; (d14c <bus_fault+0x2e4>)
    cf9a:	6198      	str	r0, [r3, #24]
    cf9c:	290b      	cmp	r1, #11
    cf9e:	f340 80c4 	ble.w	d12a <bus_fault+0x2c2>
    cfa2:	f04f 0c0c 	mov.w	ip, #12
    cfa6:	b13a      	cbz	r2, cfb8 <bus_fault+0x150>
    cfa8:	2103      	movs	r1, #3
    cfaa:	7139      	strb	r1, [r7, #4]
    cfac:	2100      	movs	r1, #0
    cfae:	7179      	strb	r1, [r7, #5]
    cfb0:	71b9      	strb	r1, [r7, #6]
    cfb2:	71f9      	strb	r1, [r7, #7]
    cfb4:	6878      	ldr	r0, [r7, #4]
    cfb6:	6118      	str	r0, [r3, #16]
    cfb8:	2100      	movs	r1, #0
    cfba:	f36f 0100 	bfc	r1, #0, #1
    cfbe:	f36f 0141 	bfc	r1, #1, #1
    cfc2:	f36f 0182 	bfc	r1, #2, #1
    cfc6:	f36f 01c5 	bfc	r1, #3, #3
    cfca:	2301      	movs	r3, #1
    cfcc:	f363 1188 	bfi	r1, r3, #6, #3
    cfd0:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    cfd4:	f36c 2153 	bfi	r1, ip, #9, #11
    cfd8:	f36f 511f 	bfc	r1, #20, #12
    cfdc:	2300      	movs	r3, #0
    cfde:	485c      	ldr	r0, [pc, #368]	; (d150 <bus_fault+0x2e8>)
    cfe0:	f7fe ff42 	bl	be68 <z_impl_z_log_msg_static_create>
    cfe4:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_UNSTACKING;
    cfe6:	f04f 0818 	mov.w	r8, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    cfea:	4b5a      	ldr	r3, [pc, #360]	; (d154 <bus_fault+0x2ec>)
    cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cfee:	f413 7f00 	tst.w	r3, #512	; 0x200
    cff2:	f000 80bb 	beq.w	d16c <bus_fault+0x304>
		PR_FAULT_INFO("  Precise data bus error");
    cff6:	46e8      	mov	r8, sp
    cff8:	b088      	sub	sp, #32
    cffa:	466b      	mov	r3, sp
    cffc:	f113 0210 	adds.w	r2, r3, #16
    d000:	f000 8096 	beq.w	d130 <bus_fault+0x2c8>
    d004:	210c      	movs	r1, #12
    d006:	b152      	cbz	r2, d01e <bus_fault+0x1b6>
    d008:	4608      	mov	r0, r1
    d00a:	2904      	cmp	r1, #4
    d00c:	dd03      	ble.n	d016 <bus_fault+0x1ae>
    d00e:	f8df c150 	ldr.w	ip, [pc, #336]	; d160 <bus_fault+0x2f8>
    d012:	f8c3 c014 	str.w	ip, [r3, #20]
    d016:	2808      	cmp	r0, #8
    d018:	dd01      	ble.n	d01e <bus_fault+0x1b6>
    d01a:	484c      	ldr	r0, [pc, #304]	; (d14c <bus_fault+0x2e4>)
    d01c:	6198      	str	r0, [r3, #24]
    d01e:	290b      	cmp	r1, #11
    d020:	f340 8089 	ble.w	d136 <bus_fault+0x2ce>
    d024:	f04f 0c0c 	mov.w	ip, #12
    d028:	b13a      	cbz	r2, d03a <bus_fault+0x1d2>
    d02a:	2103      	movs	r1, #3
    d02c:	7139      	strb	r1, [r7, #4]
    d02e:	2100      	movs	r1, #0
    d030:	7179      	strb	r1, [r7, #5]
    d032:	71b9      	strb	r1, [r7, #6]
    d034:	71f9      	strb	r1, [r7, #7]
    d036:	6878      	ldr	r0, [r7, #4]
    d038:	6118      	str	r0, [r3, #16]
    d03a:	2100      	movs	r1, #0
    d03c:	f36f 0100 	bfc	r1, #0, #1
    d040:	f36f 0141 	bfc	r1, #1, #1
    d044:	f36f 0182 	bfc	r1, #2, #1
    d048:	f36f 01c5 	bfc	r1, #3, #3
    d04c:	2301      	movs	r3, #1
    d04e:	f363 1188 	bfi	r1, r3, #6, #3
    d052:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d056:	f36c 2153 	bfi	r1, ip, #9, #11
    d05a:	f36f 511f 	bfc	r1, #20, #12
    d05e:	2300      	movs	r3, #0
    d060:	483b      	ldr	r0, [pc, #236]	; (d150 <bus_fault+0x2e8>)
    d062:	f7fe ff01 	bl	be68 <z_impl_z_log_msg_static_create>
    d066:	46c5      	mov	sp, r8
		STORE_xFAR(bfar, SCB->BFAR);
    d068:	4b3a      	ldr	r3, [pc, #232]	; (d154 <bus_fault+0x2ec>)
    d06a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d06e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    d072:	d079      	beq.n	d168 <bus_fault+0x300>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d074:	46e8      	mov	r8, sp
    d076:	b088      	sub	sp, #32
    d078:	466b      	mov	r3, sp
    d07a:	f113 0210 	adds.w	r2, r3, #16
    d07e:	d05d      	beq.n	d13c <bus_fault+0x2d4>
    d080:	2110      	movs	r1, #16
    d082:	b18a      	cbz	r2, d0a8 <bus_fault+0x240>
    d084:	468c      	mov	ip, r1
    d086:	2904      	cmp	r1, #4
    d088:	dd03      	ble.n	d092 <bus_fault+0x22a>
    d08a:	f8df e0d8 	ldr.w	lr, [pc, #216]	; d164 <bus_fault+0x2fc>
    d08e:	f8c3 e014 	str.w	lr, [r3, #20]
    d092:	f1bc 0f08 	cmp.w	ip, #8
    d096:	dd03      	ble.n	d0a0 <bus_fault+0x238>
    d098:	f8df e0b0 	ldr.w	lr, [pc, #176]	; d14c <bus_fault+0x2e4>
    d09c:	f8c3 e018 	str.w	lr, [r3, #24]
    d0a0:	f1bc 0f0c 	cmp.w	ip, #12
    d0a4:	dd00      	ble.n	d0a8 <bus_fault+0x240>
    d0a6:	61d8      	str	r0, [r3, #28]
    d0a8:	290f      	cmp	r1, #15
    d0aa:	dd4a      	ble.n	d142 <bus_fault+0x2da>
    d0ac:	f04f 0c10 	mov.w	ip, #16
    d0b0:	b13a      	cbz	r2, d0c2 <bus_fault+0x25a>
    d0b2:	2104      	movs	r1, #4
    d0b4:	7139      	strb	r1, [r7, #4]
    d0b6:	2100      	movs	r1, #0
    d0b8:	7179      	strb	r1, [r7, #5]
    d0ba:	71b9      	strb	r1, [r7, #6]
    d0bc:	71f9      	strb	r1, [r7, #7]
    d0be:	6878      	ldr	r0, [r7, #4]
    d0c0:	6118      	str	r0, [r3, #16]
    d0c2:	2100      	movs	r1, #0
    d0c4:	f36f 0100 	bfc	r1, #0, #1
    d0c8:	f36f 0141 	bfc	r1, #1, #1
    d0cc:	f36f 0182 	bfc	r1, #2, #1
    d0d0:	f36f 01c5 	bfc	r1, #3, #3
    d0d4:	2301      	movs	r3, #1
    d0d6:	f363 1188 	bfi	r1, r3, #6, #3
    d0da:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d0de:	f36c 2153 	bfi	r1, ip, #9, #11
    d0e2:	f36f 511f 	bfc	r1, #20, #12
    d0e6:	2300      	movs	r3, #0
    d0e8:	4819      	ldr	r0, [pc, #100]	; (d150 <bus_fault+0x2e8>)
    d0ea:	f7fe febd 	bl	be68 <z_impl_z_log_msg_static_create>
    d0ee:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    d0f0:	2e00      	cmp	r6, #0
    d0f2:	f000 80c0 	beq.w	d276 <bus_fault+0x40e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d0f6:	4a17      	ldr	r2, [pc, #92]	; (d154 <bus_fault+0x2ec>)
    d0f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d0fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d0fe:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    d100:	f04f 0819 	mov.w	r8, #25
    d104:	e032      	b.n	d16c <bus_fault+0x304>
	PR_FAULT_INFO("***** BUS FAULT *****");
    d106:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d10a:	e6bc      	b.n	ce86 <bus_fault+0x1e>
    d10c:	f06f 0c1b 	mvn.w	ip, #27
    d110:	e6ca      	b.n	cea8 <bus_fault+0x40>
		PR_FAULT_INFO("  Stacking error");
    d112:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d116:	e6f5      	b.n	cf04 <bus_fault+0x9c>
    d118:	f06f 0c1b 	mvn.w	ip, #27
    d11c:	e703      	b.n	cf26 <bus_fault+0xbe>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    d11e:	f04f 0816 	mov.w	r8, #22
    d122:	e722      	b.n	cf6a <bus_fault+0x102>
		PR_FAULT_INFO("  Unstacking error");
    d124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d128:	e72c      	b.n	cf84 <bus_fault+0x11c>
    d12a:	f06f 0c1b 	mvn.w	ip, #27
    d12e:	e73a      	b.n	cfa6 <bus_fault+0x13e>
		PR_FAULT_INFO("  Precise data bus error");
    d130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d134:	e767      	b.n	d006 <bus_fault+0x19e>
    d136:	f06f 0c1b 	mvn.w	ip, #27
    d13a:	e775      	b.n	d028 <bus_fault+0x1c0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d13c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d140:	e79f      	b.n	d082 <bus_fault+0x21a>
    d142:	f06f 0c1b 	mvn.w	ip, #27
    d146:	e7b3      	b.n	d0b0 <bus_fault+0x248>
    d148:	0001a788 	.word	0x0001a788
    d14c:	0001ab64 	.word	0x0001ab64
    d150:	0001a144 	.word	0x0001a144
    d154:	e000ed00 	.word	0xe000ed00
    d158:	0001a7a4 	.word	0x0001a7a4
    d15c:	0001a7bc 	.word	0x0001a7bc
    d160:	0001a7d4 	.word	0x0001a7d4
    d164:	0001a7f4 	.word	0x0001a7f4
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    d168:	f04f 0819 	mov.w	r8, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d16c:	4b6a      	ldr	r3, [pc, #424]	; (d318 <bus_fault+0x4b0>)
    d16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d170:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d174:	d035      	beq.n	d1e2 <bus_fault+0x37a>
		PR_FAULT_INFO("  Imprecise data bus error");
    d176:	46e8      	mov	r8, sp
    d178:	b088      	sub	sp, #32
    d17a:	466b      	mov	r3, sp
    d17c:	f113 0210 	adds.w	r2, r3, #16
    d180:	d07c      	beq.n	d27c <bus_fault+0x414>
    d182:	210c      	movs	r1, #12
    d184:	b142      	cbz	r2, d198 <bus_fault+0x330>
    d186:	4608      	mov	r0, r1
    d188:	2904      	cmp	r1, #4
    d18a:	dd01      	ble.n	d190 <bus_fault+0x328>
    d18c:	4e63      	ldr	r6, [pc, #396]	; (d31c <bus_fault+0x4b4>)
    d18e:	615e      	str	r6, [r3, #20]
    d190:	2808      	cmp	r0, #8
    d192:	dd01      	ble.n	d198 <bus_fault+0x330>
    d194:	4862      	ldr	r0, [pc, #392]	; (d320 <bus_fault+0x4b8>)
    d196:	6198      	str	r0, [r3, #24]
    d198:	290b      	cmp	r1, #11
    d19a:	dd72      	ble.n	d282 <bus_fault+0x41a>
    d19c:	260c      	movs	r6, #12
    d19e:	b13a      	cbz	r2, d1b0 <bus_fault+0x348>
    d1a0:	2103      	movs	r1, #3
    d1a2:	7139      	strb	r1, [r7, #4]
    d1a4:	2100      	movs	r1, #0
    d1a6:	7179      	strb	r1, [r7, #5]
    d1a8:	71b9      	strb	r1, [r7, #6]
    d1aa:	71f9      	strb	r1, [r7, #7]
    d1ac:	6878      	ldr	r0, [r7, #4]
    d1ae:	6118      	str	r0, [r3, #16]
    d1b0:	2100      	movs	r1, #0
    d1b2:	f36f 0100 	bfc	r1, #0, #1
    d1b6:	f36f 0141 	bfc	r1, #1, #1
    d1ba:	f36f 0182 	bfc	r1, #2, #1
    d1be:	f36f 01c5 	bfc	r1, #3, #3
    d1c2:	2301      	movs	r3, #1
    d1c4:	f363 1188 	bfi	r1, r3, #6, #3
    d1c8:	f3c6 060a 	ubfx	r6, r6, #0, #11
    d1cc:	f366 2153 	bfi	r1, r6, #9, #11
    d1d0:	f36f 511f 	bfc	r1, #20, #12
    d1d4:	2300      	movs	r3, #0
    d1d6:	4853      	ldr	r0, [pc, #332]	; (d324 <bus_fault+0x4bc>)
    d1d8:	f7fe fe46 	bl	be68 <z_impl_z_log_msg_static_create>
    d1dc:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    d1de:	f04f 081a 	mov.w	r8, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d1e2:	4b4d      	ldr	r3, [pc, #308]	; (d318 <bus_fault+0x4b0>)
    d1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    d1ea:	d053      	beq.n	d294 <bus_fault+0x42c>
		PR_FAULT_INFO("  Instruction bus error");
    d1ec:	46e8      	mov	r8, sp
    d1ee:	b088      	sub	sp, #32
    d1f0:	466b      	mov	r3, sp
    d1f2:	f113 0210 	adds.w	r2, r3, #16
    d1f6:	d047      	beq.n	d288 <bus_fault+0x420>
    d1f8:	210c      	movs	r1, #12
    d1fa:	b142      	cbz	r2, d20e <bus_fault+0x3a6>
    d1fc:	4608      	mov	r0, r1
    d1fe:	2904      	cmp	r1, #4
    d200:	dd01      	ble.n	d206 <bus_fault+0x39e>
    d202:	4e49      	ldr	r6, [pc, #292]	; (d328 <bus_fault+0x4c0>)
    d204:	615e      	str	r6, [r3, #20]
    d206:	2808      	cmp	r0, #8
    d208:	dd01      	ble.n	d20e <bus_fault+0x3a6>
    d20a:	4845      	ldr	r0, [pc, #276]	; (d320 <bus_fault+0x4b8>)
    d20c:	6198      	str	r0, [r3, #24]
    d20e:	290b      	cmp	r1, #11
    d210:	dd3d      	ble.n	d28e <bus_fault+0x426>
    d212:	260c      	movs	r6, #12
    d214:	b13a      	cbz	r2, d226 <bus_fault+0x3be>
    d216:	2103      	movs	r1, #3
    d218:	7139      	strb	r1, [r7, #4]
    d21a:	2100      	movs	r1, #0
    d21c:	7179      	strb	r1, [r7, #5]
    d21e:	71b9      	strb	r1, [r7, #6]
    d220:	71f9      	strb	r1, [r7, #7]
    d222:	6878      	ldr	r0, [r7, #4]
    d224:	6118      	str	r0, [r3, #16]
    d226:	2100      	movs	r1, #0
    d228:	f36f 0100 	bfc	r1, #0, #1
    d22c:	f36f 0141 	bfc	r1, #1, #1
    d230:	f36f 0182 	bfc	r1, #2, #1
    d234:	f36f 01c5 	bfc	r1, #3, #3
    d238:	2301      	movs	r3, #1
    d23a:	f363 1188 	bfi	r1, r3, #6, #3
    d23e:	f3c6 060a 	ubfx	r6, r6, #0, #11
    d242:	f366 2153 	bfi	r1, r6, #9, #11
    d246:	f36f 511f 	bfc	r1, #20, #12
    d24a:	2300      	movs	r3, #0
    d24c:	4835      	ldr	r0, [pc, #212]	; (d324 <bus_fault+0x4bc>)
    d24e:	f7fe fe0b 	bl	be68 <z_impl_z_log_msg_static_create>
    d252:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    d254:	f04f 081b 	mov.w	r8, #27
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d258:	4a2f      	ldr	r2, [pc, #188]	; (d318 <bus_fault+0x4b0>)
    d25a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d25c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d260:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d262:	2101      	movs	r1, #1
    d264:	4628      	mov	r0, r5
    d266:	f00a f928 	bl	174ba <memory_fault_recoverable>
    d26a:	7020      	strb	r0, [r4, #0]
}
    d26c:	4640      	mov	r0, r8
    d26e:	3708      	adds	r7, #8
    d270:	46bd      	mov	sp, r7
    d272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    d276:	f04f 0819 	mov.w	r8, #25
    d27a:	e777      	b.n	d16c <bus_fault+0x304>
		PR_FAULT_INFO("  Imprecise data bus error");
    d27c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d280:	e780      	b.n	d184 <bus_fault+0x31c>
    d282:	f06f 061b 	mvn.w	r6, #27
    d286:	e78a      	b.n	d19e <bus_fault+0x336>
		PR_FAULT_INFO("  Instruction bus error");
    d288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d28c:	e7b5      	b.n	d1fa <bus_fault+0x392>
    d28e:	f06f 061b 	mvn.w	r6, #27
    d292:	e7bf      	b.n	d214 <bus_fault+0x3ac>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d294:	4b20      	ldr	r3, [pc, #128]	; (d318 <bus_fault+0x4b0>)
    d296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d298:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    d29c:	d0dc      	beq.n	d258 <bus_fault+0x3f0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d29e:	46e8      	mov	r8, sp
    d2a0:	b088      	sub	sp, #32
    d2a2:	466b      	mov	r3, sp
    d2a4:	f113 0210 	adds.w	r2, r3, #16
    d2a8:	d030      	beq.n	d30c <bus_fault+0x4a4>
    d2aa:	210c      	movs	r1, #12
    d2ac:	b142      	cbz	r2, d2c0 <bus_fault+0x458>
    d2ae:	4608      	mov	r0, r1
    d2b0:	2904      	cmp	r1, #4
    d2b2:	dd01      	ble.n	d2b8 <bus_fault+0x450>
    d2b4:	4e1d      	ldr	r6, [pc, #116]	; (d32c <bus_fault+0x4c4>)
    d2b6:	615e      	str	r6, [r3, #20]
    d2b8:	2808      	cmp	r0, #8
    d2ba:	dd01      	ble.n	d2c0 <bus_fault+0x458>
    d2bc:	4818      	ldr	r0, [pc, #96]	; (d320 <bus_fault+0x4b8>)
    d2be:	6198      	str	r0, [r3, #24]
    d2c0:	290b      	cmp	r1, #11
    d2c2:	dd26      	ble.n	d312 <bus_fault+0x4aa>
    d2c4:	260c      	movs	r6, #12
    d2c6:	b13a      	cbz	r2, d2d8 <bus_fault+0x470>
    d2c8:	2103      	movs	r1, #3
    d2ca:	7139      	strb	r1, [r7, #4]
    d2cc:	2100      	movs	r1, #0
    d2ce:	7179      	strb	r1, [r7, #5]
    d2d0:	71b9      	strb	r1, [r7, #6]
    d2d2:	71f9      	strb	r1, [r7, #7]
    d2d4:	6878      	ldr	r0, [r7, #4]
    d2d6:	6118      	str	r0, [r3, #16]
    d2d8:	2100      	movs	r1, #0
    d2da:	f36f 0100 	bfc	r1, #0, #1
    d2de:	f36f 0141 	bfc	r1, #1, #1
    d2e2:	f36f 0182 	bfc	r1, #2, #1
    d2e6:	f36f 01c5 	bfc	r1, #3, #3
    d2ea:	2301      	movs	r3, #1
    d2ec:	f363 1188 	bfi	r1, r3, #6, #3
    d2f0:	f3c6 060a 	ubfx	r6, r6, #0, #11
    d2f4:	f366 2153 	bfi	r1, r6, #9, #11
    d2f8:	f36f 511f 	bfc	r1, #20, #12
    d2fc:	2300      	movs	r3, #0
    d2fe:	4809      	ldr	r0, [pc, #36]	; (d324 <bus_fault+0x4bc>)
    d300:	f7fe fdb2 	bl	be68 <z_impl_z_log_msg_static_create>
    d304:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    d306:	f04f 081c 	mov.w	r8, #28
    d30a:	e7a5      	b.n	d258 <bus_fault+0x3f0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d30c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d310:	e7cc      	b.n	d2ac <bus_fault+0x444>
    d312:	f06f 061b 	mvn.w	r6, #27
    d316:	e7d6      	b.n	d2c6 <bus_fault+0x45e>
    d318:	e000ed00 	.word	0xe000ed00
    d31c:	0001a810 	.word	0x0001a810
    d320:	0001ab64 	.word	0x0001ab64
    d324:	0001a144 	.word	0x0001a144
    d328:	0001a830 	.word	0x0001a830
    d32c:	0001a84c 	.word	0x0001a84c

0000d330 <usage_fault>:
{
    d330:	b5b0      	push	{r4, r5, r7, lr}
    d332:	b082      	sub	sp, #8
    d334:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** USAGE FAULT *****");
    d336:	466c      	mov	r4, sp
    d338:	b088      	sub	sp, #32
    d33a:	466b      	mov	r3, sp
    d33c:	f113 0210 	adds.w	r2, r3, #16
    d340:	f000 816a 	beq.w	d618 <usage_fault+0x2e8>
    d344:	210c      	movs	r1, #12
    d346:	b142      	cbz	r2, d35a <usage_fault+0x2a>
    d348:	4608      	mov	r0, r1
    d34a:	2904      	cmp	r1, #4
    d34c:	dd01      	ble.n	d352 <usage_fault+0x22>
    d34e:	4db8      	ldr	r5, [pc, #736]	; (d630 <usage_fault+0x300>)
    d350:	615d      	str	r5, [r3, #20]
    d352:	2808      	cmp	r0, #8
    d354:	dd01      	ble.n	d35a <usage_fault+0x2a>
    d356:	48b7      	ldr	r0, [pc, #732]	; (d634 <usage_fault+0x304>)
    d358:	6198      	str	r0, [r3, #24]
    d35a:	290b      	cmp	r1, #11
    d35c:	f340 815f 	ble.w	d61e <usage_fault+0x2ee>
    d360:	f04f 0c0c 	mov.w	ip, #12
    d364:	b13a      	cbz	r2, d376 <usage_fault+0x46>
    d366:	2103      	movs	r1, #3
    d368:	7139      	strb	r1, [r7, #4]
    d36a:	2100      	movs	r1, #0
    d36c:	7179      	strb	r1, [r7, #5]
    d36e:	71b9      	strb	r1, [r7, #6]
    d370:	71f9      	strb	r1, [r7, #7]
    d372:	6878      	ldr	r0, [r7, #4]
    d374:	6118      	str	r0, [r3, #16]
    d376:	2100      	movs	r1, #0
    d378:	f36f 0100 	bfc	r1, #0, #1
    d37c:	f36f 0141 	bfc	r1, #1, #1
    d380:	f36f 0182 	bfc	r1, #2, #1
    d384:	f36f 01c5 	bfc	r1, #3, #3
    d388:	2301      	movs	r3, #1
    d38a:	f363 1188 	bfi	r1, r3, #6, #3
    d38e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d392:	f36c 2153 	bfi	r1, ip, #9, #11
    d396:	f36f 511f 	bfc	r1, #20, #12
    d39a:	2300      	movs	r3, #0
    d39c:	48a6      	ldr	r0, [pc, #664]	; (d638 <usage_fault+0x308>)
    d39e:	f7fe fd63 	bl	be68 <z_impl_z_log_msg_static_create>
    d3a2:	46a5      	mov	sp, r4
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d3a4:	4ba5      	ldr	r3, [pc, #660]	; (d63c <usage_fault+0x30c>)
    d3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d3a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    d3ac:	f000 8152 	beq.w	d654 <usage_fault+0x324>
		PR_FAULT_INFO("  Division by zero");
    d3b0:	466d      	mov	r5, sp
    d3b2:	b088      	sub	sp, #32
    d3b4:	466b      	mov	r3, sp
    d3b6:	f113 0210 	adds.w	r2, r3, #16
    d3ba:	f000 8133 	beq.w	d624 <usage_fault+0x2f4>
    d3be:	210c      	movs	r1, #12
    d3c0:	b142      	cbz	r2, d3d4 <usage_fault+0xa4>
    d3c2:	4608      	mov	r0, r1
    d3c4:	2904      	cmp	r1, #4
    d3c6:	dd01      	ble.n	d3cc <usage_fault+0x9c>
    d3c8:	4c9d      	ldr	r4, [pc, #628]	; (d640 <usage_fault+0x310>)
    d3ca:	615c      	str	r4, [r3, #20]
    d3cc:	2808      	cmp	r0, #8
    d3ce:	dd01      	ble.n	d3d4 <usage_fault+0xa4>
    d3d0:	4898      	ldr	r0, [pc, #608]	; (d634 <usage_fault+0x304>)
    d3d2:	6198      	str	r0, [r3, #24]
    d3d4:	290b      	cmp	r1, #11
    d3d6:	f340 8128 	ble.w	d62a <usage_fault+0x2fa>
    d3da:	240c      	movs	r4, #12
    d3dc:	b13a      	cbz	r2, d3ee <usage_fault+0xbe>
    d3de:	2103      	movs	r1, #3
    d3e0:	7139      	strb	r1, [r7, #4]
    d3e2:	2100      	movs	r1, #0
    d3e4:	7179      	strb	r1, [r7, #5]
    d3e6:	71b9      	strb	r1, [r7, #6]
    d3e8:	71f9      	strb	r1, [r7, #7]
    d3ea:	6878      	ldr	r0, [r7, #4]
    d3ec:	6118      	str	r0, [r3, #16]
    d3ee:	2100      	movs	r1, #0
    d3f0:	f36f 0100 	bfc	r1, #0, #1
    d3f4:	f36f 0141 	bfc	r1, #1, #1
    d3f8:	f36f 0182 	bfc	r1, #2, #1
    d3fc:	f36f 01c5 	bfc	r1, #3, #3
    d400:	2301      	movs	r3, #1
    d402:	f363 1188 	bfi	r1, r3, #6, #3
    d406:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d40a:	f364 2153 	bfi	r1, r4, #9, #11
    d40e:	f36f 511f 	bfc	r1, #20, #12
    d412:	2300      	movs	r3, #0
    d414:	4888      	ldr	r0, [pc, #544]	; (d638 <usage_fault+0x308>)
    d416:	f7fe fd27 	bl	be68 <z_impl_z_log_msg_static_create>
    d41a:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_DIV_0;
    d41c:	201e      	movs	r0, #30
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d41e:	4b87      	ldr	r3, [pc, #540]	; (d63c <usage_fault+0x30c>)
    d420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d422:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    d426:	d036      	beq.n	d496 <usage_fault+0x166>
		PR_FAULT_INFO("  Unaligned memory access");
    d428:	466d      	mov	r5, sp
    d42a:	b088      	sub	sp, #32
    d42c:	466b      	mov	r3, sp
    d42e:	f113 0210 	adds.w	r2, r3, #16
    d432:	f000 8111 	beq.w	d658 <usage_fault+0x328>
    d436:	210c      	movs	r1, #12
    d438:	b142      	cbz	r2, d44c <usage_fault+0x11c>
    d43a:	4608      	mov	r0, r1
    d43c:	2904      	cmp	r1, #4
    d43e:	dd01      	ble.n	d444 <usage_fault+0x114>
    d440:	4c80      	ldr	r4, [pc, #512]	; (d644 <usage_fault+0x314>)
    d442:	615c      	str	r4, [r3, #20]
    d444:	2808      	cmp	r0, #8
    d446:	dd01      	ble.n	d44c <usage_fault+0x11c>
    d448:	487a      	ldr	r0, [pc, #488]	; (d634 <usage_fault+0x304>)
    d44a:	6198      	str	r0, [r3, #24]
    d44c:	290b      	cmp	r1, #11
    d44e:	f340 8106 	ble.w	d65e <usage_fault+0x32e>
    d452:	240c      	movs	r4, #12
    d454:	b13a      	cbz	r2, d466 <usage_fault+0x136>
    d456:	2103      	movs	r1, #3
    d458:	7139      	strb	r1, [r7, #4]
    d45a:	2100      	movs	r1, #0
    d45c:	7179      	strb	r1, [r7, #5]
    d45e:	71b9      	strb	r1, [r7, #6]
    d460:	71f9      	strb	r1, [r7, #7]
    d462:	6878      	ldr	r0, [r7, #4]
    d464:	6118      	str	r0, [r3, #16]
    d466:	2100      	movs	r1, #0
    d468:	f36f 0100 	bfc	r1, #0, #1
    d46c:	f36f 0141 	bfc	r1, #1, #1
    d470:	f36f 0182 	bfc	r1, #2, #1
    d474:	f36f 01c5 	bfc	r1, #3, #3
    d478:	2301      	movs	r3, #1
    d47a:	f363 1188 	bfi	r1, r3, #6, #3
    d47e:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d482:	f364 2153 	bfi	r1, r4, #9, #11
    d486:	f36f 511f 	bfc	r1, #20, #12
    d48a:	2300      	movs	r3, #0
    d48c:	486a      	ldr	r0, [pc, #424]	; (d638 <usage_fault+0x308>)
    d48e:	f7fe fceb 	bl	be68 <z_impl_z_log_msg_static_create>
    d492:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    d494:	201f      	movs	r0, #31
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d496:	4b69      	ldr	r3, [pc, #420]	; (d63c <usage_fault+0x30c>)
    d498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d49a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    d49e:	d036      	beq.n	d50e <usage_fault+0x1de>
		PR_FAULT_INFO("  No coprocessor instructions");
    d4a0:	466d      	mov	r5, sp
    d4a2:	b088      	sub	sp, #32
    d4a4:	466b      	mov	r3, sp
    d4a6:	f113 0210 	adds.w	r2, r3, #16
    d4aa:	f000 80db 	beq.w	d664 <usage_fault+0x334>
    d4ae:	210c      	movs	r1, #12
    d4b0:	b142      	cbz	r2, d4c4 <usage_fault+0x194>
    d4b2:	4608      	mov	r0, r1
    d4b4:	2904      	cmp	r1, #4
    d4b6:	dd01      	ble.n	d4bc <usage_fault+0x18c>
    d4b8:	4c63      	ldr	r4, [pc, #396]	; (d648 <usage_fault+0x318>)
    d4ba:	615c      	str	r4, [r3, #20]
    d4bc:	2808      	cmp	r0, #8
    d4be:	dd01      	ble.n	d4c4 <usage_fault+0x194>
    d4c0:	485c      	ldr	r0, [pc, #368]	; (d634 <usage_fault+0x304>)
    d4c2:	6198      	str	r0, [r3, #24]
    d4c4:	290b      	cmp	r1, #11
    d4c6:	f340 80d0 	ble.w	d66a <usage_fault+0x33a>
    d4ca:	240c      	movs	r4, #12
    d4cc:	b13a      	cbz	r2, d4de <usage_fault+0x1ae>
    d4ce:	2103      	movs	r1, #3
    d4d0:	7139      	strb	r1, [r7, #4]
    d4d2:	2100      	movs	r1, #0
    d4d4:	7179      	strb	r1, [r7, #5]
    d4d6:	71b9      	strb	r1, [r7, #6]
    d4d8:	71f9      	strb	r1, [r7, #7]
    d4da:	6878      	ldr	r0, [r7, #4]
    d4dc:	6118      	str	r0, [r3, #16]
    d4de:	2100      	movs	r1, #0
    d4e0:	f36f 0100 	bfc	r1, #0, #1
    d4e4:	f36f 0141 	bfc	r1, #1, #1
    d4e8:	f36f 0182 	bfc	r1, #2, #1
    d4ec:	f36f 01c5 	bfc	r1, #3, #3
    d4f0:	2301      	movs	r3, #1
    d4f2:	f363 1188 	bfi	r1, r3, #6, #3
    d4f6:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d4fa:	f364 2153 	bfi	r1, r4, #9, #11
    d4fe:	f36f 511f 	bfc	r1, #20, #12
    d502:	2300      	movs	r3, #0
    d504:	484c      	ldr	r0, [pc, #304]	; (d638 <usage_fault+0x308>)
    d506:	f7fe fcaf 	bl	be68 <z_impl_z_log_msg_static_create>
    d50a:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    d50c:	2021      	movs	r0, #33	; 0x21
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d50e:	4b4b      	ldr	r3, [pc, #300]	; (d63c <usage_fault+0x30c>)
    d510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d512:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    d516:	d036      	beq.n	d586 <usage_fault+0x256>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d518:	466d      	mov	r5, sp
    d51a:	b088      	sub	sp, #32
    d51c:	466b      	mov	r3, sp
    d51e:	f113 0210 	adds.w	r2, r3, #16
    d522:	f000 80a5 	beq.w	d670 <usage_fault+0x340>
    d526:	210c      	movs	r1, #12
    d528:	b142      	cbz	r2, d53c <usage_fault+0x20c>
    d52a:	4608      	mov	r0, r1
    d52c:	2904      	cmp	r1, #4
    d52e:	dd01      	ble.n	d534 <usage_fault+0x204>
    d530:	4c46      	ldr	r4, [pc, #280]	; (d64c <usage_fault+0x31c>)
    d532:	615c      	str	r4, [r3, #20]
    d534:	2808      	cmp	r0, #8
    d536:	dd01      	ble.n	d53c <usage_fault+0x20c>
    d538:	483e      	ldr	r0, [pc, #248]	; (d634 <usage_fault+0x304>)
    d53a:	6198      	str	r0, [r3, #24]
    d53c:	290b      	cmp	r1, #11
    d53e:	f340 809a 	ble.w	d676 <usage_fault+0x346>
    d542:	240c      	movs	r4, #12
    d544:	b13a      	cbz	r2, d556 <usage_fault+0x226>
    d546:	2103      	movs	r1, #3
    d548:	7139      	strb	r1, [r7, #4]
    d54a:	2100      	movs	r1, #0
    d54c:	7179      	strb	r1, [r7, #5]
    d54e:	71b9      	strb	r1, [r7, #6]
    d550:	71f9      	strb	r1, [r7, #7]
    d552:	6878      	ldr	r0, [r7, #4]
    d554:	6118      	str	r0, [r3, #16]
    d556:	2100      	movs	r1, #0
    d558:	f36f 0100 	bfc	r1, #0, #1
    d55c:	f36f 0141 	bfc	r1, #1, #1
    d560:	f36f 0182 	bfc	r1, #2, #1
    d564:	f36f 01c5 	bfc	r1, #3, #3
    d568:	2301      	movs	r3, #1
    d56a:	f363 1188 	bfi	r1, r3, #6, #3
    d56e:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d572:	f364 2153 	bfi	r1, r4, #9, #11
    d576:	f36f 511f 	bfc	r1, #20, #12
    d57a:	2300      	movs	r3, #0
    d57c:	482e      	ldr	r0, [pc, #184]	; (d638 <usage_fault+0x308>)
    d57e:	f7fe fc73 	bl	be68 <z_impl_z_log_msg_static_create>
    d582:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    d584:	2022      	movs	r0, #34	; 0x22
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d586:	4b2d      	ldr	r3, [pc, #180]	; (d63c <usage_fault+0x30c>)
    d588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d58a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    d58e:	d034      	beq.n	d5fa <usage_fault+0x2ca>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d590:	466d      	mov	r5, sp
    d592:	b088      	sub	sp, #32
    d594:	466b      	mov	r3, sp
    d596:	f113 0210 	adds.w	r2, r3, #16
    d59a:	d06f      	beq.n	d67c <usage_fault+0x34c>
    d59c:	210c      	movs	r1, #12
    d59e:	b142      	cbz	r2, d5b2 <usage_fault+0x282>
    d5a0:	4608      	mov	r0, r1
    d5a2:	2904      	cmp	r1, #4
    d5a4:	dd01      	ble.n	d5aa <usage_fault+0x27a>
    d5a6:	4c2a      	ldr	r4, [pc, #168]	; (d650 <usage_fault+0x320>)
    d5a8:	615c      	str	r4, [r3, #20]
    d5aa:	2808      	cmp	r0, #8
    d5ac:	dd01      	ble.n	d5b2 <usage_fault+0x282>
    d5ae:	4821      	ldr	r0, [pc, #132]	; (d634 <usage_fault+0x304>)
    d5b0:	6198      	str	r0, [r3, #24]
    d5b2:	290b      	cmp	r1, #11
    d5b4:	dd65      	ble.n	d682 <usage_fault+0x352>
    d5b6:	240c      	movs	r4, #12
    d5b8:	b13a      	cbz	r2, d5ca <usage_fault+0x29a>
    d5ba:	2103      	movs	r1, #3
    d5bc:	7139      	strb	r1, [r7, #4]
    d5be:	2100      	movs	r1, #0
    d5c0:	7179      	strb	r1, [r7, #5]
    d5c2:	71b9      	strb	r1, [r7, #6]
    d5c4:	71f9      	strb	r1, [r7, #7]
    d5c6:	6878      	ldr	r0, [r7, #4]
    d5c8:	6118      	str	r0, [r3, #16]
    d5ca:	2100      	movs	r1, #0
    d5cc:	f36f 0100 	bfc	r1, #0, #1
    d5d0:	f36f 0141 	bfc	r1, #1, #1
    d5d4:	f36f 0182 	bfc	r1, #2, #1
    d5d8:	f36f 01c5 	bfc	r1, #3, #3
    d5dc:	2301      	movs	r3, #1
    d5de:	f363 1188 	bfi	r1, r3, #6, #3
    d5e2:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d5e6:	f364 2153 	bfi	r1, r4, #9, #11
    d5ea:	f36f 511f 	bfc	r1, #20, #12
    d5ee:	2300      	movs	r3, #0
    d5f0:	4811      	ldr	r0, [pc, #68]	; (d638 <usage_fault+0x308>)
    d5f2:	f7fe fc39 	bl	be68 <z_impl_z_log_msg_static_create>
    d5f6:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    d5f8:	2023      	movs	r0, #35	; 0x23
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d5fa:	4b10      	ldr	r3, [pc, #64]	; (d63c <usage_fault+0x30c>)
    d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d5fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d602:	d141      	bne.n	d688 <usage_fault+0x358>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d604:	4a0d      	ldr	r2, [pc, #52]	; (d63c <usage_fault+0x30c>)
    d606:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d608:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d60c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d610:	6293      	str	r3, [r2, #40]	; 0x28
}
    d612:	3708      	adds	r7, #8
    d614:	46bd      	mov	sp, r7
    d616:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    d618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d61c:	e693      	b.n	d346 <usage_fault+0x16>
    d61e:	f06f 0c1b 	mvn.w	ip, #27
    d622:	e69f      	b.n	d364 <usage_fault+0x34>
		PR_FAULT_INFO("  Division by zero");
    d624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d628:	e6ca      	b.n	d3c0 <usage_fault+0x90>
    d62a:	f06f 041b 	mvn.w	r4, #27
    d62e:	e6d5      	b.n	d3dc <usage_fault+0xac>
    d630:	0001a880 	.word	0x0001a880
    d634:	0001ab58 	.word	0x0001ab58
    d638:	0001a144 	.word	0x0001a144
    d63c:	e000ed00 	.word	0xe000ed00
    d640:	0001a89c 	.word	0x0001a89c
    d644:	0001a8b4 	.word	0x0001a8b4
    d648:	0001a8d4 	.word	0x0001a8d4
    d64c:	0001a8f8 	.word	0x0001a8f8
    d650:	0001a924 	.word	0x0001a924
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    d654:	201d      	movs	r0, #29
    d656:	e6e2      	b.n	d41e <usage_fault+0xee>
		PR_FAULT_INFO("  Unaligned memory access");
    d658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d65c:	e6ec      	b.n	d438 <usage_fault+0x108>
    d65e:	f06f 041b 	mvn.w	r4, #27
    d662:	e6f7      	b.n	d454 <usage_fault+0x124>
		PR_FAULT_INFO("  No coprocessor instructions");
    d664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d668:	e722      	b.n	d4b0 <usage_fault+0x180>
    d66a:	f06f 041b 	mvn.w	r4, #27
    d66e:	e72d      	b.n	d4cc <usage_fault+0x19c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d674:	e758      	b.n	d528 <usage_fault+0x1f8>
    d676:	f06f 041b 	mvn.w	r4, #27
    d67a:	e763      	b.n	d544 <usage_fault+0x214>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d680:	e78d      	b.n	d59e <usage_fault+0x26e>
    d682:	f06f 041b 	mvn.w	r4, #27
    d686:	e797      	b.n	d5b8 <usage_fault+0x288>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d688:	466d      	mov	r5, sp
    d68a:	b088      	sub	sp, #32
    d68c:	466b      	mov	r3, sp
    d68e:	f113 0210 	adds.w	r2, r3, #16
    d692:	d02f      	beq.n	d6f4 <usage_fault+0x3c4>
    d694:	210c      	movs	r1, #12
    d696:	b142      	cbz	r2, d6aa <usage_fault+0x37a>
    d698:	4608      	mov	r0, r1
    d69a:	2904      	cmp	r1, #4
    d69c:	dd01      	ble.n	d6a2 <usage_fault+0x372>
    d69e:	4c18      	ldr	r4, [pc, #96]	; (d700 <usage_fault+0x3d0>)
    d6a0:	615c      	str	r4, [r3, #20]
    d6a2:	2808      	cmp	r0, #8
    d6a4:	dd01      	ble.n	d6aa <usage_fault+0x37a>
    d6a6:	4817      	ldr	r0, [pc, #92]	; (d704 <usage_fault+0x3d4>)
    d6a8:	6198      	str	r0, [r3, #24]
    d6aa:	290b      	cmp	r1, #11
    d6ac:	dd25      	ble.n	d6fa <usage_fault+0x3ca>
    d6ae:	240c      	movs	r4, #12
    d6b0:	b13a      	cbz	r2, d6c2 <usage_fault+0x392>
    d6b2:	2103      	movs	r1, #3
    d6b4:	7139      	strb	r1, [r7, #4]
    d6b6:	2100      	movs	r1, #0
    d6b8:	7179      	strb	r1, [r7, #5]
    d6ba:	71b9      	strb	r1, [r7, #6]
    d6bc:	71f9      	strb	r1, [r7, #7]
    d6be:	6878      	ldr	r0, [r7, #4]
    d6c0:	6118      	str	r0, [r3, #16]
    d6c2:	2100      	movs	r1, #0
    d6c4:	f36f 0100 	bfc	r1, #0, #1
    d6c8:	f36f 0141 	bfc	r1, #1, #1
    d6cc:	f36f 0182 	bfc	r1, #2, #1
    d6d0:	f36f 01c5 	bfc	r1, #3, #3
    d6d4:	2301      	movs	r3, #1
    d6d6:	f363 1188 	bfi	r1, r3, #6, #3
    d6da:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d6de:	f364 2153 	bfi	r1, r4, #9, #11
    d6e2:	f36f 511f 	bfc	r1, #20, #12
    d6e6:	2300      	movs	r3, #0
    d6e8:	4807      	ldr	r0, [pc, #28]	; (d708 <usage_fault+0x3d8>)
    d6ea:	f7fe fbbd 	bl	be68 <z_impl_z_log_msg_static_create>
    d6ee:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    d6f0:	2024      	movs	r0, #36	; 0x24
    d6f2:	e787      	b.n	d604 <usage_fault+0x2d4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d6f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d6f8:	e7cd      	b.n	d696 <usage_fault+0x366>
    d6fa:	f06f 041b 	mvn.w	r4, #27
    d6fe:	e7d7      	b.n	d6b0 <usage_fault+0x380>
    d700:	0001a944 	.word	0x0001a944
    d704:	0001ab58 	.word	0x0001ab58
    d708:	0001a144 	.word	0x0001a144

0000d70c <debug_monitor>:
{
    d70c:	b590      	push	{r4, r7, lr}
    d70e:	b083      	sub	sp, #12
    d710:	af00      	add	r7, sp, #0
	*recoverable = false;
    d712:	2300      	movs	r3, #0
    d714:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    d716:	b088      	sub	sp, #32
    d718:	466b      	mov	r3, sp
    d71a:	f113 0210 	adds.w	r2, r3, #16
    d71e:	d030      	beq.n	d782 <debug_monitor+0x76>
    d720:	210c      	movs	r1, #12
    d722:	b142      	cbz	r2, d736 <debug_monitor+0x2a>
    d724:	4608      	mov	r0, r1
    d726:	2904      	cmp	r1, #4
    d728:	dd01      	ble.n	d72e <debug_monitor+0x22>
    d72a:	4c19      	ldr	r4, [pc, #100]	; (d790 <debug_monitor+0x84>)
    d72c:	615c      	str	r4, [r3, #20]
    d72e:	2808      	cmp	r0, #8
    d730:	dd01      	ble.n	d736 <debug_monitor+0x2a>
    d732:	4818      	ldr	r0, [pc, #96]	; (d794 <debug_monitor+0x88>)
    d734:	6198      	str	r0, [r3, #24]
    d736:	290b      	cmp	r1, #11
    d738:	dd26      	ble.n	d788 <debug_monitor+0x7c>
    d73a:	f04f 0c0c 	mov.w	ip, #12
    d73e:	b13a      	cbz	r2, d750 <debug_monitor+0x44>
    d740:	2103      	movs	r1, #3
    d742:	7139      	strb	r1, [r7, #4]
    d744:	2100      	movs	r1, #0
    d746:	7179      	strb	r1, [r7, #5]
    d748:	71b9      	strb	r1, [r7, #6]
    d74a:	71f9      	strb	r1, [r7, #7]
    d74c:	6878      	ldr	r0, [r7, #4]
    d74e:	6118      	str	r0, [r3, #16]
    d750:	2100      	movs	r1, #0
    d752:	f36f 0100 	bfc	r1, #0, #1
    d756:	f36f 0141 	bfc	r1, #1, #1
    d75a:	f36f 0182 	bfc	r1, #2, #1
    d75e:	f36f 01c5 	bfc	r1, #3, #3
    d762:	2301      	movs	r3, #1
    d764:	f363 1188 	bfi	r1, r3, #6, #3
    d768:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d76c:	f36c 2153 	bfi	r1, ip, #9, #11
    d770:	f36f 511f 	bfc	r1, #20, #12
    d774:	2300      	movs	r3, #0
    d776:	4808      	ldr	r0, [pc, #32]	; (d798 <debug_monitor+0x8c>)
    d778:	f7fe fb76 	bl	be68 <z_impl_z_log_msg_static_create>
}
    d77c:	370c      	adds	r7, #12
    d77e:	46bd      	mov	sp, r7
    d780:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO(
    d782:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d786:	e7cc      	b.n	d722 <debug_monitor+0x16>
    d788:	f06f 0c1b 	mvn.w	ip, #27
    d78c:	e7d7      	b.n	d73e <debug_monitor+0x32>
    d78e:	bf00      	nop
    d790:	0001a974 	.word	0x0001a974
    d794:	0001ab48 	.word	0x0001ab48
    d798:	0001a144 	.word	0x0001a144

0000d79c <reserved_exception>:
{
    d79c:	b5b0      	push	{r4, r5, r7, lr}
    d79e:	b082      	sub	sp, #8
    d7a0:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    d7a2:	290f      	cmp	r1, #15
    d7a4:	dc29      	bgt.n	d7fa <reserved_exception+0x5e>
    d7a6:	4c32      	ldr	r4, [pc, #200]	; (d870 <reserved_exception+0xd4>)
    d7a8:	3910      	subs	r1, #16
    d7aa:	2301      	movs	r3, #1
    d7ac:	713b      	strb	r3, [r7, #4]
    d7ae:	2303      	movs	r3, #3
    d7b0:	717b      	strb	r3, [r7, #5]
    d7b2:	b08a      	sub	sp, #40	; 0x28
    d7b4:	46ec      	mov	ip, sp
    d7b6:	f11c 0210 	adds.w	r2, ip, #16
    d7ba:	d020      	beq.n	d7fe <reserved_exception+0x62>
    d7bc:	2016      	movs	r0, #22
    d7be:	b152      	cbz	r2, d7d6 <reserved_exception+0x3a>
    d7c0:	4603      	mov	r3, r0
    d7c2:	2804      	cmp	r0, #4
    d7c4:	dd02      	ble.n	d7cc <reserved_exception+0x30>
    d7c6:	4d2b      	ldr	r5, [pc, #172]	; (d874 <reserved_exception+0xd8>)
    d7c8:	f8cc 5014 	str.w	r5, [ip, #20]
    d7cc:	2b08      	cmp	r3, #8
    d7ce:	dd02      	ble.n	d7d6 <reserved_exception+0x3a>
    d7d0:	4b29      	ldr	r3, [pc, #164]	; (d878 <reserved_exception+0xdc>)
    d7d2:	f8cc 3018 	str.w	r3, [ip, #24]
    d7d6:	2301      	movs	r3, #1
    d7d8:	703b      	strb	r3, [r7, #0]
    d7da:	2303      	movs	r3, #3
    d7dc:	707b      	strb	r3, [r7, #1]
    d7de:	b1e2      	cbz	r2, d81a <reserved_exception+0x7e>
    d7e0:	4603      	mov	r3, r0
    d7e2:	280c      	cmp	r0, #12
    d7e4:	dd01      	ble.n	d7ea <reserved_exception+0x4e>
    d7e6:	f8cc 401c 	str.w	r4, [ip, #28]
    d7ea:	2b10      	cmp	r3, #16
    d7ec:	dd01      	ble.n	d7f2 <reserved_exception+0x56>
    d7ee:	f8cc 1020 	str.w	r1, [ip, #32]
    d7f2:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    d7f6:	2100      	movs	r1, #0
    d7f8:	e00d      	b.n	d816 <reserved_exception+0x7a>
    d7fa:	4c20      	ldr	r4, [pc, #128]	; (d87c <reserved_exception+0xe0>)
    d7fc:	e7d4      	b.n	d7a8 <reserved_exception+0xc>
    d7fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d802:	e7dc      	b.n	d7be <reserved_exception+0x22>
    d804:	f101 0408 	add.w	r4, r1, #8
    d808:	eb04 0e07 	add.w	lr, r4, r7
    d80c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    d810:	f803 eb01 	strb.w	lr, [r3], #1
    d814:	3101      	adds	r1, #1
    d816:	2901      	cmp	r1, #1
    d818:	d9f4      	bls.n	d804 <reserved_exception+0x68>
    d81a:	2815      	cmp	r0, #21
    d81c:	dd24      	ble.n	d868 <reserved_exception+0xcc>
    d81e:	2316      	movs	r3, #22
    d820:	b14a      	cbz	r2, d836 <reserved_exception+0x9a>
    d822:	2105      	movs	r1, #5
    d824:	7139      	strb	r1, [r7, #4]
    d826:	2100      	movs	r1, #0
    d828:	7179      	strb	r1, [r7, #5]
    d82a:	71b9      	strb	r1, [r7, #6]
    d82c:	2101      	movs	r1, #1
    d82e:	71f9      	strb	r1, [r7, #7]
    d830:	6878      	ldr	r0, [r7, #4]
    d832:	f8cc 0010 	str.w	r0, [ip, #16]
    d836:	2100      	movs	r1, #0
    d838:	f36f 0100 	bfc	r1, #0, #1
    d83c:	f36f 0141 	bfc	r1, #1, #1
    d840:	f36f 0182 	bfc	r1, #2, #1
    d844:	f36f 01c5 	bfc	r1, #3, #3
    d848:	2001      	movs	r0, #1
    d84a:	f360 1188 	bfi	r1, r0, #6, #3
    d84e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    d852:	f363 2153 	bfi	r1, r3, #9, #11
    d856:	f36f 511f 	bfc	r1, #20, #12
    d85a:	2300      	movs	r3, #0
    d85c:	4808      	ldr	r0, [pc, #32]	; (d880 <reserved_exception+0xe4>)
    d85e:	f7fe fb03 	bl	be68 <z_impl_z_log_msg_static_create>
}
    d862:	3708      	adds	r7, #8
    d864:	46bd      	mov	sp, r7
    d866:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    d868:	f06f 031b 	mvn.w	r3, #27
    d86c:	e7d8      	b.n	d820 <reserved_exception+0x84>
    d86e:	bf00      	nop
    d870:	0001a99c 	.word	0x0001a99c
    d874:	0001a9d0 	.word	0x0001a9d0
    d878:	0001ab34 	.word	0x0001ab34
    d87c:	0001a9b4 	.word	0x0001a9b4
    d880:	0001a144 	.word	0x0001a144

0000d884 <mem_manage_fault>:
{
    d884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d888:	b083      	sub	sp, #12
    d88a:	af00      	add	r7, sp, #0
    d88c:	4604      	mov	r4, r0
    d88e:	460e      	mov	r6, r1
    d890:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    d892:	46e8      	mov	r8, sp
    d894:	b088      	sub	sp, #32
    d896:	466b      	mov	r3, sp
    d898:	f113 0210 	adds.w	r2, r3, #16
    d89c:	f000 8142 	beq.w	db24 <mem_manage_fault+0x2a0>
    d8a0:	210c      	movs	r1, #12
    d8a2:	b152      	cbz	r2, d8ba <mem_manage_fault+0x36>
    d8a4:	4608      	mov	r0, r1
    d8a6:	2904      	cmp	r1, #4
    d8a8:	dd03      	ble.n	d8b2 <mem_manage_fault+0x2e>
    d8aa:	f8df c2bc 	ldr.w	ip, [pc, #700]	; db68 <mem_manage_fault+0x2e4>
    d8ae:	f8c3 c014 	str.w	ip, [r3, #20]
    d8b2:	2808      	cmp	r0, #8
    d8b4:	dd01      	ble.n	d8ba <mem_manage_fault+0x36>
    d8b6:	48ad      	ldr	r0, [pc, #692]	; (db6c <mem_manage_fault+0x2e8>)
    d8b8:	6198      	str	r0, [r3, #24]
    d8ba:	290b      	cmp	r1, #11
    d8bc:	f340 8135 	ble.w	db2a <mem_manage_fault+0x2a6>
    d8c0:	f04f 0c0c 	mov.w	ip, #12
    d8c4:	b13a      	cbz	r2, d8d6 <mem_manage_fault+0x52>
    d8c6:	2103      	movs	r1, #3
    d8c8:	7139      	strb	r1, [r7, #4]
    d8ca:	2100      	movs	r1, #0
    d8cc:	7179      	strb	r1, [r7, #5]
    d8ce:	71b9      	strb	r1, [r7, #6]
    d8d0:	71f9      	strb	r1, [r7, #7]
    d8d2:	6878      	ldr	r0, [r7, #4]
    d8d4:	6118      	str	r0, [r3, #16]
    d8d6:	2100      	movs	r1, #0
    d8d8:	f36f 0100 	bfc	r1, #0, #1
    d8dc:	f36f 0141 	bfc	r1, #1, #1
    d8e0:	f36f 0182 	bfc	r1, #2, #1
    d8e4:	f36f 01c5 	bfc	r1, #3, #3
    d8e8:	2301      	movs	r3, #1
    d8ea:	f363 1188 	bfi	r1, r3, #6, #3
    d8ee:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d8f2:	f36c 2153 	bfi	r1, ip, #9, #11
    d8f6:	f36f 511f 	bfc	r1, #20, #12
    d8fa:	2300      	movs	r3, #0
    d8fc:	489c      	ldr	r0, [pc, #624]	; (db70 <mem_manage_fault+0x2ec>)
    d8fe:	f7fe fab3 	bl	be68 <z_impl_z_log_msg_static_create>
    d902:	46c5      	mov	sp, r8
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d904:	4b9b      	ldr	r3, [pc, #620]	; (db74 <mem_manage_fault+0x2f0>)
    d906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d908:	f013 0f10 	tst.w	r3, #16
    d90c:	f000 8116 	beq.w	db3c <mem_manage_fault+0x2b8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d910:	46e8      	mov	r8, sp
    d912:	b088      	sub	sp, #32
    d914:	466b      	mov	r3, sp
    d916:	f113 0210 	adds.w	r2, r3, #16
    d91a:	f000 8109 	beq.w	db30 <mem_manage_fault+0x2ac>
    d91e:	210c      	movs	r1, #12
    d920:	b152      	cbz	r2, d938 <mem_manage_fault+0xb4>
    d922:	4608      	mov	r0, r1
    d924:	2904      	cmp	r1, #4
    d926:	dd03      	ble.n	d930 <mem_manage_fault+0xac>
    d928:	f8df c24c 	ldr.w	ip, [pc, #588]	; db78 <mem_manage_fault+0x2f4>
    d92c:	f8c3 c014 	str.w	ip, [r3, #20]
    d930:	2808      	cmp	r0, #8
    d932:	dd01      	ble.n	d938 <mem_manage_fault+0xb4>
    d934:	488d      	ldr	r0, [pc, #564]	; (db6c <mem_manage_fault+0x2e8>)
    d936:	6198      	str	r0, [r3, #24]
    d938:	290b      	cmp	r1, #11
    d93a:	f340 80fc 	ble.w	db36 <mem_manage_fault+0x2b2>
    d93e:	f04f 0c0c 	mov.w	ip, #12
    d942:	b13a      	cbz	r2, d954 <mem_manage_fault+0xd0>
    d944:	2103      	movs	r1, #3
    d946:	7139      	strb	r1, [r7, #4]
    d948:	2100      	movs	r1, #0
    d94a:	7179      	strb	r1, [r7, #5]
    d94c:	71b9      	strb	r1, [r7, #6]
    d94e:	71f9      	strb	r1, [r7, #7]
    d950:	6878      	ldr	r0, [r7, #4]
    d952:	6118      	str	r0, [r3, #16]
    d954:	2100      	movs	r1, #0
    d956:	f36f 0100 	bfc	r1, #0, #1
    d95a:	f36f 0141 	bfc	r1, #1, #1
    d95e:	f36f 0182 	bfc	r1, #2, #1
    d962:	f36f 01c5 	bfc	r1, #3, #3
    d966:	2301      	movs	r3, #1
    d968:	f363 1188 	bfi	r1, r3, #6, #3
    d96c:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d970:	f36c 2153 	bfi	r1, ip, #9, #11
    d974:	f36f 511f 	bfc	r1, #20, #12
    d978:	2300      	movs	r3, #0
    d97a:	487d      	ldr	r0, [pc, #500]	; (db70 <mem_manage_fault+0x2ec>)
    d97c:	f7fe fa74 	bl	be68 <z_impl_z_log_msg_static_create>
    d980:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_MEM_STACKING;
    d982:	f04f 0811 	mov.w	r8, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d986:	4b7b      	ldr	r3, [pc, #492]	; (db74 <mem_manage_fault+0x2f0>)
    d988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d98a:	f013 0f08 	tst.w	r3, #8
    d98e:	d03a      	beq.n	da06 <mem_manage_fault+0x182>
		PR_FAULT_INFO("  Unstacking error");
    d990:	46e8      	mov	r8, sp
    d992:	b088      	sub	sp, #32
    d994:	466b      	mov	r3, sp
    d996:	f113 0210 	adds.w	r2, r3, #16
    d99a:	f000 80d2 	beq.w	db42 <mem_manage_fault+0x2be>
    d99e:	210c      	movs	r1, #12
    d9a0:	b152      	cbz	r2, d9b8 <mem_manage_fault+0x134>
    d9a2:	4608      	mov	r0, r1
    d9a4:	2904      	cmp	r1, #4
    d9a6:	dd03      	ble.n	d9b0 <mem_manage_fault+0x12c>
    d9a8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; db7c <mem_manage_fault+0x2f8>
    d9ac:	f8c3 c014 	str.w	ip, [r3, #20]
    d9b0:	2808      	cmp	r0, #8
    d9b2:	dd01      	ble.n	d9b8 <mem_manage_fault+0x134>
    d9b4:	486d      	ldr	r0, [pc, #436]	; (db6c <mem_manage_fault+0x2e8>)
    d9b6:	6198      	str	r0, [r3, #24]
    d9b8:	290b      	cmp	r1, #11
    d9ba:	f340 80c5 	ble.w	db48 <mem_manage_fault+0x2c4>
    d9be:	f04f 0c0c 	mov.w	ip, #12
    d9c2:	b13a      	cbz	r2, d9d4 <mem_manage_fault+0x150>
    d9c4:	2103      	movs	r1, #3
    d9c6:	7139      	strb	r1, [r7, #4]
    d9c8:	2100      	movs	r1, #0
    d9ca:	7179      	strb	r1, [r7, #5]
    d9cc:	71b9      	strb	r1, [r7, #6]
    d9ce:	71f9      	strb	r1, [r7, #7]
    d9d0:	6878      	ldr	r0, [r7, #4]
    d9d2:	6118      	str	r0, [r3, #16]
    d9d4:	2100      	movs	r1, #0
    d9d6:	f36f 0100 	bfc	r1, #0, #1
    d9da:	f36f 0141 	bfc	r1, #1, #1
    d9de:	f36f 0182 	bfc	r1, #2, #1
    d9e2:	f36f 01c5 	bfc	r1, #3, #3
    d9e6:	2301      	movs	r3, #1
    d9e8:	f363 1188 	bfi	r1, r3, #6, #3
    d9ec:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d9f0:	f36c 2153 	bfi	r1, ip, #9, #11
    d9f4:	f36f 511f 	bfc	r1, #20, #12
    d9f8:	2300      	movs	r3, #0
    d9fa:	485d      	ldr	r0, [pc, #372]	; (db70 <mem_manage_fault+0x2ec>)
    d9fc:	f7fe fa34 	bl	be68 <z_impl_z_log_msg_static_create>
    da00:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_MEM_UNSTACKING;
    da02:	f04f 0812 	mov.w	r8, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    da06:	4b5b      	ldr	r3, [pc, #364]	; (db74 <mem_manage_fault+0x2f0>)
    da08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da0a:	f013 0f02 	tst.w	r3, #2
    da0e:	f000 80bb 	beq.w	db88 <mem_manage_fault+0x304>
		PR_FAULT_INFO("  Data Access Violation");
    da12:	46e8      	mov	r8, sp
    da14:	b088      	sub	sp, #32
    da16:	466b      	mov	r3, sp
    da18:	f113 0210 	adds.w	r2, r3, #16
    da1c:	f000 8097 	beq.w	db4e <mem_manage_fault+0x2ca>
    da20:	210c      	movs	r1, #12
    da22:	b152      	cbz	r2, da3a <mem_manage_fault+0x1b6>
    da24:	4608      	mov	r0, r1
    da26:	2904      	cmp	r1, #4
    da28:	dd03      	ble.n	da32 <mem_manage_fault+0x1ae>
    da2a:	f8df c154 	ldr.w	ip, [pc, #340]	; db80 <mem_manage_fault+0x2fc>
    da2e:	f8c3 c014 	str.w	ip, [r3, #20]
    da32:	2808      	cmp	r0, #8
    da34:	dd01      	ble.n	da3a <mem_manage_fault+0x1b6>
    da36:	484d      	ldr	r0, [pc, #308]	; (db6c <mem_manage_fault+0x2e8>)
    da38:	6198      	str	r0, [r3, #24]
    da3a:	290b      	cmp	r1, #11
    da3c:	f340 808a 	ble.w	db54 <mem_manage_fault+0x2d0>
    da40:	f04f 0c0c 	mov.w	ip, #12
    da44:	b13a      	cbz	r2, da56 <mem_manage_fault+0x1d2>
    da46:	2103      	movs	r1, #3
    da48:	7139      	strb	r1, [r7, #4]
    da4a:	2100      	movs	r1, #0
    da4c:	7179      	strb	r1, [r7, #5]
    da4e:	71b9      	strb	r1, [r7, #6]
    da50:	71f9      	strb	r1, [r7, #7]
    da52:	6878      	ldr	r0, [r7, #4]
    da54:	6118      	str	r0, [r3, #16]
    da56:	2100      	movs	r1, #0
    da58:	f36f 0100 	bfc	r1, #0, #1
    da5c:	f36f 0141 	bfc	r1, #1, #1
    da60:	f36f 0182 	bfc	r1, #2, #1
    da64:	f36f 01c5 	bfc	r1, #3, #3
    da68:	2301      	movs	r3, #1
    da6a:	f363 1188 	bfi	r1, r3, #6, #3
    da6e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    da72:	f36c 2153 	bfi	r1, ip, #9, #11
    da76:	f36f 511f 	bfc	r1, #20, #12
    da7a:	2300      	movs	r3, #0
    da7c:	483c      	ldr	r0, [pc, #240]	; (db70 <mem_manage_fault+0x2ec>)
    da7e:	f7fe f9f3 	bl	be68 <z_impl_z_log_msg_static_create>
    da82:	46c5      	mov	sp, r8
		uint32_t temp = SCB->MMFAR;
    da84:	4b3b      	ldr	r3, [pc, #236]	; (db74 <mem_manage_fault+0x2f0>)
    da86:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    da8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da8c:	f013 0f80 	tst.w	r3, #128	; 0x80
    da90:	f000 8122 	beq.w	dcd8 <mem_manage_fault+0x454>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    da94:	46e8      	mov	r8, sp
    da96:	b088      	sub	sp, #32
    da98:	466b      	mov	r3, sp
    da9a:	f113 0210 	adds.w	r2, r3, #16
    da9e:	d05c      	beq.n	db5a <mem_manage_fault+0x2d6>
    daa0:	2110      	movs	r1, #16
    daa2:	b182      	cbz	r2, dac6 <mem_manage_fault+0x242>
    daa4:	4608      	mov	r0, r1
    daa6:	2904      	cmp	r1, #4
    daa8:	dd03      	ble.n	dab2 <mem_manage_fault+0x22e>
    daaa:	f8df c0d8 	ldr.w	ip, [pc, #216]	; db84 <mem_manage_fault+0x300>
    daae:	f8c3 c014 	str.w	ip, [r3, #20]
    dab2:	2808      	cmp	r0, #8
    dab4:	dd03      	ble.n	dabe <mem_manage_fault+0x23a>
    dab6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; db6c <mem_manage_fault+0x2e8>
    daba:	f8c3 c018 	str.w	ip, [r3, #24]
    dabe:	280c      	cmp	r0, #12
    dac0:	dd01      	ble.n	dac6 <mem_manage_fault+0x242>
    dac2:	f8c3 901c 	str.w	r9, [r3, #28]
    dac6:	290f      	cmp	r1, #15
    dac8:	dd4a      	ble.n	db60 <mem_manage_fault+0x2dc>
    daca:	f04f 0c10 	mov.w	ip, #16
    dace:	b13a      	cbz	r2, dae0 <mem_manage_fault+0x25c>
    dad0:	2104      	movs	r1, #4
    dad2:	7139      	strb	r1, [r7, #4]
    dad4:	2100      	movs	r1, #0
    dad6:	7179      	strb	r1, [r7, #5]
    dad8:	71b9      	strb	r1, [r7, #6]
    dada:	71f9      	strb	r1, [r7, #7]
    dadc:	6878      	ldr	r0, [r7, #4]
    dade:	6118      	str	r0, [r3, #16]
    dae0:	2100      	movs	r1, #0
    dae2:	f36f 0100 	bfc	r1, #0, #1
    dae6:	f36f 0141 	bfc	r1, #1, #1
    daea:	f36f 0182 	bfc	r1, #2, #1
    daee:	f36f 01c5 	bfc	r1, #3, #3
    daf2:	2301      	movs	r3, #1
    daf4:	f363 1188 	bfi	r1, r3, #6, #3
    daf8:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    dafc:	f36c 2153 	bfi	r1, ip, #9, #11
    db00:	f36f 511f 	bfc	r1, #20, #12
    db04:	2300      	movs	r3, #0
    db06:	481a      	ldr	r0, [pc, #104]	; (db70 <mem_manage_fault+0x2ec>)
    db08:	f7fe f9ae 	bl	be68 <z_impl_z_log_msg_static_create>
    db0c:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    db0e:	2e00      	cmp	r6, #0
    db10:	f000 80e7 	beq.w	dce2 <mem_manage_fault+0x45e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    db14:	4a17      	ldr	r2, [pc, #92]	; (db74 <mem_manage_fault+0x2f0>)
    db16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    db18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    db1c:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    db1e:	f04f 0813 	mov.w	r8, #19
    db22:	e033      	b.n	db8c <mem_manage_fault+0x308>
	PR_FAULT_INFO("***** MPU FAULT *****");
    db24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db28:	e6bb      	b.n	d8a2 <mem_manage_fault+0x1e>
    db2a:	f06f 0c1b 	mvn.w	ip, #27
    db2e:	e6c9      	b.n	d8c4 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    db30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db34:	e6f4      	b.n	d920 <mem_manage_fault+0x9c>
    db36:	f06f 0c1b 	mvn.w	ip, #27
    db3a:	e702      	b.n	d942 <mem_manage_fault+0xbe>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    db3c:	f04f 0810 	mov.w	r8, #16
    db40:	e721      	b.n	d986 <mem_manage_fault+0x102>
		PR_FAULT_INFO("  Unstacking error");
    db42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db46:	e72b      	b.n	d9a0 <mem_manage_fault+0x11c>
    db48:	f06f 0c1b 	mvn.w	ip, #27
    db4c:	e739      	b.n	d9c2 <mem_manage_fault+0x13e>
		PR_FAULT_INFO("  Data Access Violation");
    db4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db52:	e766      	b.n	da22 <mem_manage_fault+0x19e>
    db54:	f06f 0c1b 	mvn.w	ip, #27
    db58:	e774      	b.n	da44 <mem_manage_fault+0x1c0>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    db5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db5e:	e7a0      	b.n	daa2 <mem_manage_fault+0x21e>
    db60:	f06f 0c1b 	mvn.w	ip, #27
    db64:	e7b3      	b.n	dace <mem_manage_fault+0x24a>
    db66:	bf00      	nop
    db68:	0001a9e8 	.word	0x0001a9e8
    db6c:	0001ab70 	.word	0x0001ab70
    db70:	0001a144 	.word	0x0001a144
    db74:	e000ed00 	.word	0xe000ed00
    db78:	0001aa04 	.word	0x0001aa04
    db7c:	0001a7bc 	.word	0x0001a7bc
    db80:	0001aa3c 	.word	0x0001aa3c
    db84:	0001aa58 	.word	0x0001aa58
	uint32_t mmfar = -EINVAL;
    db88:	f06f 0915 	mvn.w	r9, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    db8c:	4b62      	ldr	r3, [pc, #392]	; (dd18 <mem_manage_fault+0x494>)
    db8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db90:	f013 0f01 	tst.w	r3, #1
    db94:	d03a      	beq.n	dc0c <mem_manage_fault+0x388>
		PR_FAULT_INFO("  Instruction Access Violation");
    db96:	466e      	mov	r6, sp
    db98:	b088      	sub	sp, #32
    db9a:	466b      	mov	r3, sp
    db9c:	f113 0210 	adds.w	r2, r3, #16
    dba0:	f000 80a2 	beq.w	dce8 <mem_manage_fault+0x464>
    dba4:	210c      	movs	r1, #12
    dba6:	b152      	cbz	r2, dbbe <mem_manage_fault+0x33a>
    dba8:	4608      	mov	r0, r1
    dbaa:	2904      	cmp	r1, #4
    dbac:	dd03      	ble.n	dbb6 <mem_manage_fault+0x332>
    dbae:	f8df c16c 	ldr.w	ip, [pc, #364]	; dd1c <mem_manage_fault+0x498>
    dbb2:	f8c3 c014 	str.w	ip, [r3, #20]
    dbb6:	2808      	cmp	r0, #8
    dbb8:	dd01      	ble.n	dbbe <mem_manage_fault+0x33a>
    dbba:	4859      	ldr	r0, [pc, #356]	; (dd20 <mem_manage_fault+0x49c>)
    dbbc:	6198      	str	r0, [r3, #24]
    dbbe:	290b      	cmp	r1, #11
    dbc0:	f340 8095 	ble.w	dcee <mem_manage_fault+0x46a>
    dbc4:	f04f 0c0c 	mov.w	ip, #12
    dbc8:	b13a      	cbz	r2, dbda <mem_manage_fault+0x356>
    dbca:	2103      	movs	r1, #3
    dbcc:	7139      	strb	r1, [r7, #4]
    dbce:	2100      	movs	r1, #0
    dbd0:	7179      	strb	r1, [r7, #5]
    dbd2:	71b9      	strb	r1, [r7, #6]
    dbd4:	71f9      	strb	r1, [r7, #7]
    dbd6:	6878      	ldr	r0, [r7, #4]
    dbd8:	6118      	str	r0, [r3, #16]
    dbda:	2100      	movs	r1, #0
    dbdc:	f36f 0100 	bfc	r1, #0, #1
    dbe0:	f36f 0141 	bfc	r1, #1, #1
    dbe4:	f36f 0182 	bfc	r1, #2, #1
    dbe8:	f36f 01c5 	bfc	r1, #3, #3
    dbec:	2301      	movs	r3, #1
    dbee:	f363 1188 	bfi	r1, r3, #6, #3
    dbf2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    dbf6:	f36c 2153 	bfi	r1, ip, #9, #11
    dbfa:	f36f 511f 	bfc	r1, #20, #12
    dbfe:	2300      	movs	r3, #0
    dc00:	4848      	ldr	r0, [pc, #288]	; (dd24 <mem_manage_fault+0x4a0>)
    dc02:	f7fe f931 	bl	be68 <z_impl_z_log_msg_static_create>
    dc06:	46b5      	mov	sp, r6
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    dc08:	f04f 0814 	mov.w	r8, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dc0c:	4b42      	ldr	r3, [pc, #264]	; (dd18 <mem_manage_fault+0x494>)
    dc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc10:	f013 0f20 	tst.w	r3, #32
    dc14:	d038      	beq.n	dc88 <mem_manage_fault+0x404>
		PR_FAULT_INFO(
    dc16:	466e      	mov	r6, sp
    dc18:	b088      	sub	sp, #32
    dc1a:	466b      	mov	r3, sp
    dc1c:	f113 0210 	adds.w	r2, r3, #16
    dc20:	d068      	beq.n	dcf4 <mem_manage_fault+0x470>
    dc22:	210c      	movs	r1, #12
    dc24:	b152      	cbz	r2, dc3c <mem_manage_fault+0x3b8>
    dc26:	4608      	mov	r0, r1
    dc28:	2904      	cmp	r1, #4
    dc2a:	dd03      	ble.n	dc34 <mem_manage_fault+0x3b0>
    dc2c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; dd28 <mem_manage_fault+0x4a4>
    dc30:	f8c3 c014 	str.w	ip, [r3, #20]
    dc34:	2808      	cmp	r0, #8
    dc36:	dd01      	ble.n	dc3c <mem_manage_fault+0x3b8>
    dc38:	4839      	ldr	r0, [pc, #228]	; (dd20 <mem_manage_fault+0x49c>)
    dc3a:	6198      	str	r0, [r3, #24]
    dc3c:	290b      	cmp	r1, #11
    dc3e:	dd5c      	ble.n	dcfa <mem_manage_fault+0x476>
    dc40:	f04f 0c0c 	mov.w	ip, #12
    dc44:	b13a      	cbz	r2, dc56 <mem_manage_fault+0x3d2>
    dc46:	2103      	movs	r1, #3
    dc48:	7139      	strb	r1, [r7, #4]
    dc4a:	2100      	movs	r1, #0
    dc4c:	7179      	strb	r1, [r7, #5]
    dc4e:	71b9      	strb	r1, [r7, #6]
    dc50:	71f9      	strb	r1, [r7, #7]
    dc52:	6878      	ldr	r0, [r7, #4]
    dc54:	6118      	str	r0, [r3, #16]
    dc56:	2100      	movs	r1, #0
    dc58:	f36f 0100 	bfc	r1, #0, #1
    dc5c:	f36f 0141 	bfc	r1, #1, #1
    dc60:	f36f 0182 	bfc	r1, #2, #1
    dc64:	f36f 01c5 	bfc	r1, #3, #3
    dc68:	2301      	movs	r3, #1
    dc6a:	f363 1188 	bfi	r1, r3, #6, #3
    dc6e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    dc72:	f36c 2153 	bfi	r1, ip, #9, #11
    dc76:	f36f 511f 	bfc	r1, #20, #12
    dc7a:	2300      	movs	r3, #0
    dc7c:	4829      	ldr	r0, [pc, #164]	; (dd24 <mem_manage_fault+0x4a0>)
    dc7e:	f7fe f8f3 	bl	be68 <z_impl_z_log_msg_static_create>
    dc82:	46b5      	mov	sp, r6
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    dc84:	f04f 0815 	mov.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc88:	4b23      	ldr	r3, [pc, #140]	; (dd18 <mem_manage_fault+0x494>)
    dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc8c:	f013 0f10 	tst.w	r3, #16
    dc90:	d104      	bne.n	dc9c <mem_manage_fault+0x418>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dc92:	4b21      	ldr	r3, [pc, #132]	; (dd18 <mem_manage_fault+0x494>)
    dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc96:	f013 0f02 	tst.w	r3, #2
    dc9a:	d004      	beq.n	dca6 <mem_manage_fault+0x422>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    dc9c:	4b1e      	ldr	r3, [pc, #120]	; (dd18 <mem_manage_fault+0x494>)
    dc9e:	685b      	ldr	r3, [r3, #4]
    dca0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    dca4:	d12c      	bne.n	dd00 <mem_manage_fault+0x47c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dca6:	4b1c      	ldr	r3, [pc, #112]	; (dd18 <mem_manage_fault+0x494>)
    dca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcaa:	f013 0f20 	tst.w	r3, #32
    dcae:	d004      	beq.n	dcba <mem_manage_fault+0x436>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    dcb0:	4a19      	ldr	r2, [pc, #100]	; (dd18 <mem_manage_fault+0x494>)
    dcb2:	6a53      	ldr	r3, [r2, #36]	; 0x24
    dcb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    dcb8:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dcba:	4a17      	ldr	r2, [pc, #92]	; (dd18 <mem_manage_fault+0x494>)
    dcbc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dcbe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dcc2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    dcc4:	2101      	movs	r1, #1
    dcc6:	4620      	mov	r0, r4
    dcc8:	f009 fbf7 	bl	174ba <memory_fault_recoverable>
    dccc:	7028      	strb	r0, [r5, #0]
}
    dcce:	4640      	mov	r0, r8
    dcd0:	370c      	adds	r7, #12
    dcd2:	46bd      	mov	sp, r7
    dcd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t mmfar = -EINVAL;
    dcd8:	f06f 0915 	mvn.w	r9, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    dcdc:	f04f 0813 	mov.w	r8, #19
    dce0:	e754      	b.n	db8c <mem_manage_fault+0x308>
    dce2:	f04f 0813 	mov.w	r8, #19
    dce6:	e751      	b.n	db8c <mem_manage_fault+0x308>
		PR_FAULT_INFO("  Instruction Access Violation");
    dce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcec:	e75b      	b.n	dba6 <mem_manage_fault+0x322>
    dcee:	f06f 0c1b 	mvn.w	ip, #27
    dcf2:	e769      	b.n	dbc8 <mem_manage_fault+0x344>
		PR_FAULT_INFO(
    dcf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcf8:	e794      	b.n	dc24 <mem_manage_fault+0x3a0>
    dcfa:	f06f 0c1b 	mvn.w	ip, #27
    dcfe:	e7a1      	b.n	dc44 <mem_manage_fault+0x3c0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    dd00:	4621      	mov	r1, r4
    dd02:	4648      	mov	r0, r9
    dd04:	f7fe ffca 	bl	cc9c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    dd08:	2800      	cmp	r0, #0
    dd0a:	d0cc      	beq.n	dca6 <mem_manage_fault+0x422>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    dd0c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    dd10:	f04f 0802 	mov.w	r8, #2
    dd14:	e7c7      	b.n	dca6 <mem_manage_fault+0x422>
    dd16:	bf00      	nop
    dd18:	e000ed00 	.word	0xe000ed00
    dd1c:	0001aa74 	.word	0x0001aa74
    dd20:	0001ab70 	.word	0x0001ab70
    dd24:	0001a144 	.word	0x0001a144
    dd28:	0001a84c 	.word	0x0001a84c

0000dd2c <hard_fault>:
{
    dd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd2e:	b083      	sub	sp, #12
    dd30:	af00      	add	r7, sp, #0
    dd32:	4605      	mov	r5, r0
    dd34:	460c      	mov	r4, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    dd36:	466e      	mov	r6, sp
    dd38:	b088      	sub	sp, #32
    dd3a:	466b      	mov	r3, sp
    dd3c:	f113 0210 	adds.w	r2, r3, #16
    dd40:	d070      	beq.n	de24 <hard_fault+0xf8>
    dd42:	210c      	movs	r1, #12
    dd44:	b152      	cbz	r2, dd5c <hard_fault+0x30>
    dd46:	4608      	mov	r0, r1
    dd48:	2904      	cmp	r1, #4
    dd4a:	dd03      	ble.n	dd54 <hard_fault+0x28>
    dd4c:	f8df c2d0 	ldr.w	ip, [pc, #720]	; e020 <hard_fault+0x2f4>
    dd50:	f8c3 c014 	str.w	ip, [r3, #20]
    dd54:	2808      	cmp	r0, #8
    dd56:	dd01      	ble.n	dd5c <hard_fault+0x30>
    dd58:	48b2      	ldr	r0, [pc, #712]	; (e024 <hard_fault+0x2f8>)
    dd5a:	6198      	str	r0, [r3, #24]
    dd5c:	290b      	cmp	r1, #11
    dd5e:	dd64      	ble.n	de2a <hard_fault+0xfe>
    dd60:	f04f 0c0c 	mov.w	ip, #12
    dd64:	b13a      	cbz	r2, dd76 <hard_fault+0x4a>
    dd66:	2103      	movs	r1, #3
    dd68:	7139      	strb	r1, [r7, #4]
    dd6a:	2100      	movs	r1, #0
    dd6c:	7179      	strb	r1, [r7, #5]
    dd6e:	71b9      	strb	r1, [r7, #6]
    dd70:	71f9      	strb	r1, [r7, #7]
    dd72:	6878      	ldr	r0, [r7, #4]
    dd74:	6118      	str	r0, [r3, #16]
    dd76:	2100      	movs	r1, #0
    dd78:	f36f 0100 	bfc	r1, #0, #1
    dd7c:	f36f 0141 	bfc	r1, #1, #1
    dd80:	f36f 0182 	bfc	r1, #2, #1
    dd84:	f36f 01c5 	bfc	r1, #3, #3
    dd88:	2301      	movs	r3, #1
    dd8a:	f363 1188 	bfi	r1, r3, #6, #3
    dd8e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    dd92:	f36c 2153 	bfi	r1, ip, #9, #11
    dd96:	f36f 511f 	bfc	r1, #20, #12
    dd9a:	2300      	movs	r3, #0
    dd9c:	48a2      	ldr	r0, [pc, #648]	; (e028 <hard_fault+0x2fc>)
    dd9e:	f7fe f863 	bl	be68 <z_impl_z_log_msg_static_create>
    dda2:	46b5      	mov	sp, r6
	*recoverable = false;
    dda4:	2300      	movs	r3, #0
    dda6:	7023      	strb	r3, [r4, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dda8:	4ba0      	ldr	r3, [pc, #640]	; (e02c <hard_fault+0x300>)
    ddaa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    ddac:	f016 0602 	ands.w	r6, r6, #2
    ddb0:	d044      	beq.n	de3c <hard_fault+0x110>
		PR_EXC("  Bus fault on vector table read");
    ddb2:	466d      	mov	r5, sp
    ddb4:	b088      	sub	sp, #32
    ddb6:	466b      	mov	r3, sp
    ddb8:	f113 0210 	adds.w	r2, r3, #16
    ddbc:	d038      	beq.n	de30 <hard_fault+0x104>
    ddbe:	210c      	movs	r1, #12
    ddc0:	b142      	cbz	r2, ddd4 <hard_fault+0xa8>
    ddc2:	4608      	mov	r0, r1
    ddc4:	2904      	cmp	r1, #4
    ddc6:	dd01      	ble.n	ddcc <hard_fault+0xa0>
    ddc8:	4c99      	ldr	r4, [pc, #612]	; (e030 <hard_fault+0x304>)
    ddca:	615c      	str	r4, [r3, #20]
    ddcc:	2808      	cmp	r0, #8
    ddce:	dd01      	ble.n	ddd4 <hard_fault+0xa8>
    ddd0:	4894      	ldr	r0, [pc, #592]	; (e024 <hard_fault+0x2f8>)
    ddd2:	6198      	str	r0, [r3, #24]
    ddd4:	290b      	cmp	r1, #11
    ddd6:	dd2e      	ble.n	de36 <hard_fault+0x10a>
    ddd8:	240c      	movs	r4, #12
    ddda:	b13a      	cbz	r2, ddec <hard_fault+0xc0>
    dddc:	2103      	movs	r1, #3
    ddde:	7139      	strb	r1, [r7, #4]
    dde0:	2100      	movs	r1, #0
    dde2:	7179      	strb	r1, [r7, #5]
    dde4:	71b9      	strb	r1, [r7, #6]
    dde6:	71f9      	strb	r1, [r7, #7]
    dde8:	6878      	ldr	r0, [r7, #4]
    ddea:	6118      	str	r0, [r3, #16]
    ddec:	2100      	movs	r1, #0
    ddee:	f36f 0100 	bfc	r1, #0, #1
    ddf2:	f36f 0141 	bfc	r1, #1, #1
    ddf6:	f36f 0182 	bfc	r1, #2, #1
    ddfa:	f36f 01c5 	bfc	r1, #3, #3
    ddfe:	2301      	movs	r3, #1
    de00:	f363 1188 	bfi	r1, r3, #6, #3
    de04:	f3c4 040a 	ubfx	r4, r4, #0, #11
    de08:	f364 2153 	bfi	r1, r4, #9, #11
    de0c:	f36f 511f 	bfc	r1, #20, #12
    de10:	2300      	movs	r3, #0
    de12:	4885      	ldr	r0, [pc, #532]	; (e028 <hard_fault+0x2fc>)
    de14:	f7fe f828 	bl	be68 <z_impl_z_log_msg_static_create>
    de18:	46ad      	mov	sp, r5
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    de1a:	2600      	movs	r6, #0
}
    de1c:	4630      	mov	r0, r6
    de1e:	370c      	adds	r7, #12
    de20:	46bd      	mov	sp, r7
    de22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	PR_FAULT_INFO("***** HARD FAULT *****");
    de24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    de28:	e78c      	b.n	dd44 <hard_fault+0x18>
    de2a:	f06f 0c1b 	mvn.w	ip, #27
    de2e:	e799      	b.n	dd64 <hard_fault+0x38>
		PR_EXC("  Bus fault on vector table read");
    de30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    de34:	e7c4      	b.n	ddc0 <hard_fault+0x94>
    de36:	f06f 041b 	mvn.w	r4, #27
    de3a:	e7ce      	b.n	ddda <hard_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    de3c:	4b7b      	ldr	r3, [pc, #492]	; (e02c <hard_fault+0x300>)
    de3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    de40:	2b00      	cmp	r3, #0
    de42:	f2c0 8082 	blt.w	df4a <hard_fault+0x21e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    de46:	4b79      	ldr	r3, [pc, #484]	; (e02c <hard_fault+0x300>)
    de48:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    de4a:	f016 4680 	ands.w	r6, r6, #1073741824	; 0x40000000
    de4e:	d0e5      	beq.n	de1c <hard_fault+0xf0>
		PR_EXC("  Fault escalation (see below)");
    de50:	466e      	mov	r6, sp
    de52:	b088      	sub	sp, #32
    de54:	466b      	mov	r3, sp
    de56:	f113 0210 	adds.w	r2, r3, #16
    de5a:	f000 80b1 	beq.w	dfc0 <hard_fault+0x294>
    de5e:	210c      	movs	r1, #12
    de60:	b152      	cbz	r2, de78 <hard_fault+0x14c>
    de62:	4608      	mov	r0, r1
    de64:	2904      	cmp	r1, #4
    de66:	dd03      	ble.n	de70 <hard_fault+0x144>
    de68:	f8df c1c8 	ldr.w	ip, [pc, #456]	; e034 <hard_fault+0x308>
    de6c:	f8c3 c014 	str.w	ip, [r3, #20]
    de70:	2808      	cmp	r0, #8
    de72:	dd01      	ble.n	de78 <hard_fault+0x14c>
    de74:	486b      	ldr	r0, [pc, #428]	; (e024 <hard_fault+0x2f8>)
    de76:	6198      	str	r0, [r3, #24]
    de78:	290b      	cmp	r1, #11
    de7a:	f340 80a4 	ble.w	dfc6 <hard_fault+0x29a>
    de7e:	f04f 0c0c 	mov.w	ip, #12
    de82:	b13a      	cbz	r2, de94 <hard_fault+0x168>
    de84:	2103      	movs	r1, #3
    de86:	7139      	strb	r1, [r7, #4]
    de88:	2100      	movs	r1, #0
    de8a:	7179      	strb	r1, [r7, #5]
    de8c:	71b9      	strb	r1, [r7, #6]
    de8e:	71f9      	strb	r1, [r7, #7]
    de90:	6878      	ldr	r0, [r7, #4]
    de92:	6118      	str	r0, [r3, #16]
    de94:	2100      	movs	r1, #0
    de96:	f36f 0100 	bfc	r1, #0, #1
    de9a:	f36f 0141 	bfc	r1, #1, #1
    de9e:	f36f 0182 	bfc	r1, #2, #1
    dea2:	f36f 01c5 	bfc	r1, #3, #3
    dea6:	2301      	movs	r3, #1
    dea8:	f363 1188 	bfi	r1, r3, #6, #3
    deac:	f3cc 030a 	ubfx	r3, ip, #0, #11
    deb0:	f363 2153 	bfi	r1, r3, #9, #11
    deb4:	f36f 511f 	bfc	r1, #20, #12
    deb8:	2300      	movs	r3, #0
    deba:	485b      	ldr	r0, [pc, #364]	; (e028 <hard_fault+0x2fc>)
    debc:	f7fd ffd4 	bl	be68 <z_impl_z_log_msg_static_create>
    dec0:	46b5      	mov	sp, r6
		if (z_arm_is_synchronous_svc(esf)) {
    dec2:	4628      	mov	r0, r5
    dec4:	f7fe ff52 	bl	cd6c <z_arm_is_synchronous_svc>
    dec8:	2800      	cmp	r0, #0
    deca:	f000 8085 	beq.w	dfd8 <hard_fault+0x2ac>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    dece:	682c      	ldr	r4, [r5, #0]
    ded0:	466e      	mov	r6, sp
    ded2:	b088      	sub	sp, #32
    ded4:	466b      	mov	r3, sp
    ded6:	f113 0210 	adds.w	r2, r3, #16
    deda:	d077      	beq.n	dfcc <hard_fault+0x2a0>
    dedc:	2110      	movs	r1, #16
    dede:	b17a      	cbz	r2, df00 <hard_fault+0x1d4>
    dee0:	4608      	mov	r0, r1
    dee2:	2904      	cmp	r1, #4
    dee4:	dd03      	ble.n	deee <hard_fault+0x1c2>
    dee6:	f8df c150 	ldr.w	ip, [pc, #336]	; e038 <hard_fault+0x30c>
    deea:	f8c3 c014 	str.w	ip, [r3, #20]
    deee:	2808      	cmp	r0, #8
    def0:	dd03      	ble.n	defa <hard_fault+0x1ce>
    def2:	f8df c130 	ldr.w	ip, [pc, #304]	; e024 <hard_fault+0x2f8>
    def6:	f8c3 c018 	str.w	ip, [r3, #24]
    defa:	280c      	cmp	r0, #12
    defc:	dd00      	ble.n	df00 <hard_fault+0x1d4>
    defe:	61dc      	str	r4, [r3, #28]
    df00:	290f      	cmp	r1, #15
    df02:	dd66      	ble.n	dfd2 <hard_fault+0x2a6>
    df04:	2410      	movs	r4, #16
    df06:	b13a      	cbz	r2, df18 <hard_fault+0x1ec>
    df08:	2104      	movs	r1, #4
    df0a:	7139      	strb	r1, [r7, #4]
    df0c:	2100      	movs	r1, #0
    df0e:	7179      	strb	r1, [r7, #5]
    df10:	71b9      	strb	r1, [r7, #6]
    df12:	71f9      	strb	r1, [r7, #7]
    df14:	6878      	ldr	r0, [r7, #4]
    df16:	6118      	str	r0, [r3, #16]
    df18:	2100      	movs	r1, #0
    df1a:	f36f 0100 	bfc	r1, #0, #1
    df1e:	f36f 0141 	bfc	r1, #1, #1
    df22:	f36f 0182 	bfc	r1, #2, #1
    df26:	f36f 01c5 	bfc	r1, #3, #3
    df2a:	2301      	movs	r3, #1
    df2c:	f363 1188 	bfi	r1, r3, #6, #3
    df30:	f3c4 030a 	ubfx	r3, r4, #0, #11
    df34:	f363 2153 	bfi	r1, r3, #9, #11
    df38:	f36f 511f 	bfc	r1, #20, #12
    df3c:	2300      	movs	r3, #0
    df3e:	483a      	ldr	r0, [pc, #232]	; (e028 <hard_fault+0x2fc>)
    df40:	f7fd ff92 	bl	be68 <z_impl_z_log_msg_static_create>
    df44:	46b5      	mov	sp, r6
			reason = esf->basic.r0;
    df46:	682e      	ldr	r6, [r5, #0]
    df48:	e768      	b.n	de1c <hard_fault+0xf0>
		PR_EXC("  Debug event");
    df4a:	466d      	mov	r5, sp
    df4c:	b088      	sub	sp, #32
    df4e:	466b      	mov	r3, sp
    df50:	f113 0210 	adds.w	r2, r3, #16
    df54:	d02e      	beq.n	dfb4 <hard_fault+0x288>
    df56:	210c      	movs	r1, #12
    df58:	b142      	cbz	r2, df6c <hard_fault+0x240>
    df5a:	4608      	mov	r0, r1
    df5c:	2904      	cmp	r1, #4
    df5e:	dd01      	ble.n	df64 <hard_fault+0x238>
    df60:	4c36      	ldr	r4, [pc, #216]	; (e03c <hard_fault+0x310>)
    df62:	615c      	str	r4, [r3, #20]
    df64:	2808      	cmp	r0, #8
    df66:	dd01      	ble.n	df6c <hard_fault+0x240>
    df68:	482e      	ldr	r0, [pc, #184]	; (e024 <hard_fault+0x2f8>)
    df6a:	6198      	str	r0, [r3, #24]
    df6c:	290b      	cmp	r1, #11
    df6e:	dd24      	ble.n	dfba <hard_fault+0x28e>
    df70:	240c      	movs	r4, #12
    df72:	b13a      	cbz	r2, df84 <hard_fault+0x258>
    df74:	2103      	movs	r1, #3
    df76:	7139      	strb	r1, [r7, #4]
    df78:	2100      	movs	r1, #0
    df7a:	7179      	strb	r1, [r7, #5]
    df7c:	71b9      	strb	r1, [r7, #6]
    df7e:	71f9      	strb	r1, [r7, #7]
    df80:	6878      	ldr	r0, [r7, #4]
    df82:	6118      	str	r0, [r3, #16]
    df84:	2100      	movs	r1, #0
    df86:	f36f 0100 	bfc	r1, #0, #1
    df8a:	f36f 0141 	bfc	r1, #1, #1
    df8e:	f36f 0182 	bfc	r1, #2, #1
    df92:	f36f 01c5 	bfc	r1, #3, #3
    df96:	2301      	movs	r3, #1
    df98:	f363 1188 	bfi	r1, r3, #6, #3
    df9c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    dfa0:	f363 2153 	bfi	r1, r3, #9, #11
    dfa4:	f36f 511f 	bfc	r1, #20, #12
    dfa8:	2300      	movs	r3, #0
    dfaa:	481f      	ldr	r0, [pc, #124]	; (e028 <hard_fault+0x2fc>)
    dfac:	f7fd ff5c 	bl	be68 <z_impl_z_log_msg_static_create>
    dfb0:	46ad      	mov	sp, r5
    dfb2:	e733      	b.n	de1c <hard_fault+0xf0>
    dfb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dfb8:	e7ce      	b.n	df58 <hard_fault+0x22c>
    dfba:	f06f 041b 	mvn.w	r4, #27
    dfbe:	e7d8      	b.n	df72 <hard_fault+0x246>
		PR_EXC("  Fault escalation (see below)");
    dfc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dfc4:	e74c      	b.n	de60 <hard_fault+0x134>
    dfc6:	f06f 0c1b 	mvn.w	ip, #27
    dfca:	e75a      	b.n	de82 <hard_fault+0x156>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    dfcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dfd0:	e785      	b.n	dede <hard_fault+0x1b2>
    dfd2:	f06f 041b 	mvn.w	r4, #27
    dfd6:	e796      	b.n	df06 <hard_fault+0x1da>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    dfd8:	4b14      	ldr	r3, [pc, #80]	; (e02c <hard_fault+0x300>)
    dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfdc:	f013 0fff 	tst.w	r3, #255	; 0xff
    dfe0:	d10f      	bne.n	e002 <hard_fault+0x2d6>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    dfe2:	4b12      	ldr	r3, [pc, #72]	; (e02c <hard_fault+0x300>)
    dfe4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    dfe6:	f416 467f 	ands.w	r6, r6, #65280	; 0xff00
    dfea:	d111      	bne.n	e010 <hard_fault+0x2e4>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    dfec:	4b0f      	ldr	r3, [pc, #60]	; (e02c <hard_fault+0x300>)
    dfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    dff4:	f4ff af12 	bcc.w	de1c <hard_fault+0xf0>
			reason = usage_fault(esf);
    dff8:	4628      	mov	r0, r5
    dffa:	f7ff f999 	bl	d330 <usage_fault>
    dffe:	4606      	mov	r6, r0
	return reason;
    e000:	e70c      	b.n	de1c <hard_fault+0xf0>
			reason = mem_manage_fault(esf, 1, recoverable);
    e002:	4622      	mov	r2, r4
    e004:	2101      	movs	r1, #1
    e006:	4628      	mov	r0, r5
    e008:	f7ff fc3c 	bl	d884 <mem_manage_fault>
    e00c:	4606      	mov	r6, r0
    e00e:	e705      	b.n	de1c <hard_fault+0xf0>
			reason = bus_fault(esf, 1, recoverable);
    e010:	4622      	mov	r2, r4
    e012:	2101      	movs	r1, #1
    e014:	4628      	mov	r0, r5
    e016:	f7fe ff27 	bl	ce68 <bus_fault>
    e01a:	4606      	mov	r6, r0
    e01c:	e6fe      	b.n	de1c <hard_fault+0xf0>
    e01e:	bf00      	nop
    e020:	0001aa98 	.word	0x0001aa98
    e024:	0001ab84 	.word	0x0001ab84
    e028:	0001a144 	.word	0x0001a144
    e02c:	e000ed00 	.word	0xe000ed00
    e030:	0001aab4 	.word	0x0001aab4
    e034:	0001aaf0 	.word	0x0001aaf0
    e038:	0001ab14 	.word	0x0001ab14
    e03c:	0001aadc 	.word	0x0001aadc

0000e040 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    e040:	b530      	push	{r4, r5, lr}
    e042:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e044:	4b1a      	ldr	r3, [pc, #104]	; (e0b0 <z_arm_fault+0x70>)
    e046:	685c      	ldr	r4, [r3, #4]
    e048:	f3c4 0408 	ubfx	r4, r4, #0, #9
    e04c:	2300      	movs	r3, #0
    e04e:	f383 8811 	msr	BASEPRI, r3
    e052:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    e056:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    e05a:	f7fe fea5 	bl	cda8 <get_esf>
    e05e:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    e060:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    e064:	4621      	mov	r1, r4
    e066:	f009 fa2a 	bl	174be <fault_handle>
	if (recoverable) {
    e06a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e06e:	b10b      	cbz	r3, e074 <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    e070:	b00b      	add	sp, #44	; 0x2c
    e072:	bd30      	pop	{r4, r5, pc}
    e074:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e076:	2220      	movs	r2, #32
    e078:	4629      	mov	r1, r5
    e07a:	a801      	add	r0, sp, #4
    e07c:	f009 fac5 	bl	1760a <memcpy>
	if (nested_exc) {
    e080:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    e084:	b14b      	cbz	r3, e09a <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e086:	9b08      	ldr	r3, [sp, #32]
    e088:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e08c:	b95a      	cbnz	r2, e0a6 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e08e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e092:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    e096:	9308      	str	r3, [sp, #32]
    e098:	e005      	b.n	e0a6 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e09a:	9b08      	ldr	r3, [sp, #32]
    e09c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e0a0:	f023 0301 	bic.w	r3, r3, #1
    e0a4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    e0a6:	a901      	add	r1, sp, #4
    e0a8:	4620      	mov	r0, r4
    e0aa:	f009 f9d3 	bl	17454 <z_arm_fatal_error>
    e0ae:	e7df      	b.n	e070 <z_arm_fault+0x30>
    e0b0:	e000ed00 	.word	0xe000ed00

0000e0b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e0b4:	4a02      	ldr	r2, [pc, #8]	; (e0c0 <z_arm_fault_init+0xc>)
    e0b6:	6953      	ldr	r3, [r2, #20]
    e0b8:	f043 0310 	orr.w	r3, r3, #16
    e0bc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    e0be:	4770      	bx	lr
    e0c0:	e000ed00 	.word	0xe000ed00

0000e0c4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e0c4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e0c8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    e0cc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    e0ce:	4672      	mov	r2, lr
	bl z_arm_fault
    e0d0:	f7ff ffb6 	bl	e040 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    e0d4:	bd01      	pop	{r0, pc}
    e0d6:	bf00      	nop

0000e0d8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e0d8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e0da:	e006      	b.n	e0ea <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e0dc:	f003 030f 	and.w	r3, r3, #15
    e0e0:	4909      	ldr	r1, [pc, #36]	; (e108 <z_arm_interrupt_init+0x30>)
    e0e2:	4419      	add	r1, r3
    e0e4:	2340      	movs	r3, #64	; 0x40
    e0e6:	760b      	strb	r3, [r1, #24]
    e0e8:	3201      	adds	r2, #1
    e0ea:	2a26      	cmp	r2, #38	; 0x26
    e0ec:	dc0a      	bgt.n	e104 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    e0ee:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	dbf3      	blt.n	e0dc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e0f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    e0f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    e0fc:	2140      	movs	r1, #64	; 0x40
    e0fe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    e102:	e7f1      	b.n	e0e8 <z_arm_interrupt_init+0x10>
	}
}
    e104:	4770      	bx	lr
    e106:	bf00      	nop
    e108:	e000ecfc 	.word	0xe000ecfc

0000e10c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    e10c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    e10e:	4913      	ldr	r1, [pc, #76]	; (e15c <__start+0x50>)
    strb r0, [r1]
    e110:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    e112:	2000      	movs	r0, #0
    msr CONTROL, r0
    e114:	f380 8814 	msr	CONTROL, r0
    isb
    e118:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    e11c:	f7fd fb86 	bl	b82c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    e120:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    e122:	490f      	ldr	r1, [pc, #60]	; (e160 <__start+0x54>)
    str r0, [r1]
    e124:	6008      	str	r0, [r1, #0]
    dsb
    e126:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e12a:	480e      	ldr	r0, [pc, #56]	; (e164 <__start+0x58>)
    msr msp, r0
    e12c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    e130:	f000 f830 	bl	e194 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e134:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    e136:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e13a:	480b      	ldr	r0, [pc, #44]	; (e168 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    e13c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    e140:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e142:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e146:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e14a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e14c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e14e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e152:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e156:	f7fe fd0b 	bl	cb70 <z_arm_prep_c>
    e15a:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    e15c:	200026e0 	.word	0x200026e0
    ldr r1, =_SCS_MPU_CTRL
    e160:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e164:	200046c0 	.word	0x200046c0
    ldr r0, =z_interrupt_stacks
    e168:	20003900 	.word	0x20003900

0000e16c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    e16c:	4b08      	ldr	r3, [pc, #32]	; (e190 <z_arm_clear_arm_mpu_config+0x24>)
    e16e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    e172:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    e176:	2300      	movs	r3, #0
    e178:	e006      	b.n	e188 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    e17a:	4a05      	ldr	r2, [pc, #20]	; (e190 <z_arm_clear_arm_mpu_config+0x24>)
    e17c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    e180:	2100      	movs	r1, #0
    e182:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    e186:	3301      	adds	r3, #1
    e188:	4283      	cmp	r3, r0
    e18a:	dbf6      	blt.n	e17a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    e18c:	4770      	bx	lr
    e18e:	bf00      	nop
    e190:	e000ed00 	.word	0xe000ed00

0000e194 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    e194:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    e196:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    e198:	2400      	movs	r4, #0
    e19a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    e19e:	f7ff ffe5 	bl	e16c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e1a2:	4623      	mov	r3, r4
    e1a4:	e008      	b.n	e1b8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    e1a6:	f103 0120 	add.w	r1, r3, #32
    e1aa:	4a0e      	ldr	r2, [pc, #56]	; (e1e4 <z_arm_init_arch_hw_at_boot+0x50>)
    e1ac:	f04f 30ff 	mov.w	r0, #4294967295
    e1b0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e1b4:	3301      	adds	r3, #1
    e1b6:	b2db      	uxtb	r3, r3
    e1b8:	2b07      	cmp	r3, #7
    e1ba:	d9f4      	bls.n	e1a6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e1bc:	2300      	movs	r3, #0
    e1be:	e008      	b.n	e1d2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e1c0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    e1c4:	4a07      	ldr	r2, [pc, #28]	; (e1e4 <z_arm_init_arch_hw_at_boot+0x50>)
    e1c6:	f04f 30ff 	mov.w	r0, #4294967295
    e1ca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e1ce:	3301      	adds	r3, #1
    e1d0:	b2db      	uxtb	r3, r3
    e1d2:	2b07      	cmp	r3, #7
    e1d4:	d9f4      	bls.n	e1c0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    e1d6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    e1d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e1dc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    e1e0:	bd10      	pop	{r4, pc}
    e1e2:	bf00      	nop
    e1e4:	e000e100 	.word	0xe000e100

0000e1e8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e1e8:	b508      	push	{r3, lr}
	if (_current == thread) {
    e1ea:	4b0a      	ldr	r3, [pc, #40]	; (e214 <z_impl_k_thread_abort+0x2c>)
    e1ec:	689b      	ldr	r3, [r3, #8]
    e1ee:	4283      	cmp	r3, r0
    e1f0:	d002      	beq.n	e1f8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    e1f2:	f007 fa77 	bl	156e4 <z_thread_abort>
}
    e1f6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e1f8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e1fc:	2b00      	cmp	r3, #0
    e1fe:	d0f8      	beq.n	e1f2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e200:	4b05      	ldr	r3, [pc, #20]	; (e218 <z_impl_k_thread_abort+0x30>)
    e202:	685a      	ldr	r2, [r3, #4]
    e204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e208:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    e20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e20c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    e210:	625a      	str	r2, [r3, #36]	; 0x24
    e212:	e7ee      	b.n	e1f2 <z_impl_k_thread_abort+0xa>
    e214:	2000268c 	.word	0x2000268c
    e218:	e000ed00 	.word	0xe000ed00

0000e21c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e21c:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e21e:	4b03      	ldr	r3, [pc, #12]	; (e22c <z_arm_configure_static_mpu_regions+0x10>)
    e220:	4a03      	ldr	r2, [pc, #12]	; (e230 <z_arm_configure_static_mpu_regions+0x14>)
    e222:	2101      	movs	r1, #1
    e224:	4803      	ldr	r0, [pc, #12]	; (e234 <z_arm_configure_static_mpu_regions+0x18>)
    e226:	f009 f99f 	bl	17568 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e22a:	bd08      	pop	{r3, pc}
    e22c:	20010000 	.word	0x20010000
    e230:	20000000 	.word	0x20000000
    e234:	0001ab98 	.word	0x0001ab98

0000e238 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    e238:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    e23a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    e23e:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    e240:	4804      	ldr	r0, [pc, #16]	; (e254 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    e242:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    e244:	2340      	movs	r3, #64	; 0x40
    e246:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    e248:	4b03      	ldr	r3, [pc, #12]	; (e258 <z_arm_configure_dynamic_mpu_regions+0x20>)
    e24a:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    e24c:	2101      	movs	r1, #1
    e24e:	f009 f98f 	bl	17570 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    e252:	bd08      	pop	{r3, pc}
    e254:	20001f34 	.word	0x20001f34
    e258:	150b0000 	.word	0x150b0000

0000e25c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    e25c:	4a08      	ldr	r2, [pc, #32]	; (e280 <region_init+0x24>)
    e25e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    e262:	680b      	ldr	r3, [r1, #0]
    e264:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    e268:	4303      	orrs	r3, r0
    e26a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    e26e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    e272:	688b      	ldr	r3, [r1, #8]
    e274:	f043 0301 	orr.w	r3, r3, #1
    e278:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    e27c:	4770      	bx	lr
    e27e:	bf00      	nop
    e280:	e000ed00 	.word	0xe000ed00

0000e284 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    e284:	b5f0      	push	{r4, r5, r6, r7, lr}
    e286:	b083      	sub	sp, #12
    e288:	af00      	add	r7, sp, #0
    e28a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    e28c:	2807      	cmp	r0, #7
    e28e:	d805      	bhi.n	e29c <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    e290:	f7ff ffe4 	bl	e25c <region_init>

	return index;
    e294:	4620      	mov	r0, r4
}
    e296:	370c      	adds	r7, #12
    e298:	46bd      	mov	sp, r7
    e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e29c:	466d      	mov	r5, sp
    e29e:	b088      	sub	sp, #32
    e2a0:	466b      	mov	r3, sp
    e2a2:	f113 0210 	adds.w	r2, r3, #16
    e2a6:	d033      	beq.n	e310 <region_allocate_and_init+0x8c>
    e2a8:	2110      	movs	r1, #16
    e2aa:	b15a      	cbz	r2, e2c4 <region_allocate_and_init+0x40>
    e2ac:	4608      	mov	r0, r1
    e2ae:	2904      	cmp	r1, #4
    e2b0:	dd01      	ble.n	e2b6 <region_allocate_and_init+0x32>
    e2b2:	4e1a      	ldr	r6, [pc, #104]	; (e31c <region_allocate_and_init+0x98>)
    e2b4:	615e      	str	r6, [r3, #20]
    e2b6:	2808      	cmp	r0, #8
    e2b8:	dd01      	ble.n	e2be <region_allocate_and_init+0x3a>
    e2ba:	4e19      	ldr	r6, [pc, #100]	; (e320 <region_allocate_and_init+0x9c>)
    e2bc:	619e      	str	r6, [r3, #24]
    e2be:	280c      	cmp	r0, #12
    e2c0:	dd00      	ble.n	e2c4 <region_allocate_and_init+0x40>
    e2c2:	61dc      	str	r4, [r3, #28]
    e2c4:	290f      	cmp	r1, #15
    e2c6:	dd26      	ble.n	e316 <region_allocate_and_init+0x92>
    e2c8:	2410      	movs	r4, #16
    e2ca:	b13a      	cbz	r2, e2dc <region_allocate_and_init+0x58>
    e2cc:	2104      	movs	r1, #4
    e2ce:	7139      	strb	r1, [r7, #4]
    e2d0:	2100      	movs	r1, #0
    e2d2:	7179      	strb	r1, [r7, #5]
    e2d4:	71b9      	strb	r1, [r7, #6]
    e2d6:	71f9      	strb	r1, [r7, #7]
    e2d8:	6878      	ldr	r0, [r7, #4]
    e2da:	6118      	str	r0, [r3, #16]
    e2dc:	2100      	movs	r1, #0
    e2de:	f36f 0100 	bfc	r1, #0, #1
    e2e2:	f36f 0141 	bfc	r1, #1, #1
    e2e6:	f36f 0182 	bfc	r1, #2, #1
    e2ea:	f36f 01c5 	bfc	r1, #3, #3
    e2ee:	2301      	movs	r3, #1
    e2f0:	f363 1188 	bfi	r1, r3, #6, #3
    e2f4:	f3c4 040a 	ubfx	r4, r4, #0, #11
    e2f8:	f364 2153 	bfi	r1, r4, #9, #11
    e2fc:	f36f 511f 	bfc	r1, #20, #12
    e300:	2300      	movs	r3, #0
    e302:	4808      	ldr	r0, [pc, #32]	; (e324 <region_allocate_and_init+0xa0>)
    e304:	f7fd fdb0 	bl	be68 <z_impl_z_log_msg_static_create>
    e308:	46ad      	mov	sp, r5
		return -EINVAL;
    e30a:	f06f 0015 	mvn.w	r0, #21
    e30e:	e7c2      	b.n	e296 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e314:	e7c9      	b.n	e2aa <region_allocate_and_init+0x26>
    e316:	f06f 041b 	mvn.w	r4, #27
    e31a:	e7d6      	b.n	e2ca <region_allocate_and_init+0x46>
    e31c:	0001aba8 	.word	0x0001aba8
    e320:	0001abfc 	.word	0x0001abfc
    e324:	0001a12c 	.word	0x0001a12c

0000e328 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e32c:	b082      	sub	sp, #8
    e32e:	af00      	add	r7, sp, #0
    e330:	4681      	mov	r9, r0
    e332:	4688      	mov	r8, r1
    e334:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    e336:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    e338:	2500      	movs	r5, #0
    e33a:	e00f      	b.n	e35c <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    e33c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e340:	e024      	b.n	e38c <mpu_configure_regions+0x64>
    e342:	f06f 041b 	mvn.w	r4, #27
    e346:	e031      	b.n	e3ac <mpu_configure_regions+0x84>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    e348:	4621      	mov	r1, r4
    e34a:	b2f0      	uxtb	r0, r6
    e34c:	f009 f8ed 	bl	1752a <mpu_configure_region>
    e350:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    e352:	f110 0f16 	cmn.w	r0, #22
    e356:	d04b      	beq.n	e3f0 <mpu_configure_regions+0xc8>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    e358:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    e35a:	3501      	adds	r5, #1
    e35c:	4545      	cmp	r5, r8
    e35e:	da47      	bge.n	e3f0 <mpu_configure_regions+0xc8>
		if (regions[i].size == 0U) {
    e360:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    e364:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    e368:	6862      	ldr	r2, [r4, #4]
    e36a:	2a00      	cmp	r2, #0
    e36c:	d0f5      	beq.n	e35a <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    e36e:	f1ba 0f00 	cmp.w	sl, #0
    e372:	d0e9      	beq.n	e348 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    e374:	4620      	mov	r0, r4
    e376:	f009 f8c7 	bl	17508 <mpu_partition_is_valid>
		if (do_sanity_check &&
    e37a:	2800      	cmp	r0, #0
    e37c:	d1e4      	bne.n	e348 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e37e:	466e      	mov	r6, sp
    e380:	b088      	sub	sp, #32
    e382:	466b      	mov	r3, sp
    e384:	f113 0210 	adds.w	r2, r3, #16
    e388:	d0d8      	beq.n	e33c <mpu_configure_regions+0x14>
    e38a:	2110      	movs	r1, #16
    e38c:	b15a      	cbz	r2, e3a6 <mpu_configure_regions+0x7e>
    e38e:	4608      	mov	r0, r1
    e390:	2904      	cmp	r1, #4
    e392:	dd01      	ble.n	e398 <mpu_configure_regions+0x70>
    e394:	4c19      	ldr	r4, [pc, #100]	; (e3fc <mpu_configure_regions+0xd4>)
    e396:	615c      	str	r4, [r3, #20]
    e398:	2808      	cmp	r0, #8
    e39a:	dd01      	ble.n	e3a0 <mpu_configure_regions+0x78>
    e39c:	4c18      	ldr	r4, [pc, #96]	; (e400 <mpu_configure_regions+0xd8>)
    e39e:	619c      	str	r4, [r3, #24]
    e3a0:	280c      	cmp	r0, #12
    e3a2:	dd00      	ble.n	e3a6 <mpu_configure_regions+0x7e>
    e3a4:	61dd      	str	r5, [r3, #28]
    e3a6:	290f      	cmp	r1, #15
    e3a8:	ddcb      	ble.n	e342 <mpu_configure_regions+0x1a>
    e3aa:	2410      	movs	r4, #16
    e3ac:	b13a      	cbz	r2, e3be <mpu_configure_regions+0x96>
    e3ae:	2104      	movs	r1, #4
    e3b0:	7139      	strb	r1, [r7, #4]
    e3b2:	2100      	movs	r1, #0
    e3b4:	7179      	strb	r1, [r7, #5]
    e3b6:	71b9      	strb	r1, [r7, #6]
    e3b8:	71f9      	strb	r1, [r7, #7]
    e3ba:	6878      	ldr	r0, [r7, #4]
    e3bc:	6118      	str	r0, [r3, #16]
    e3be:	2100      	movs	r1, #0
    e3c0:	f36f 0100 	bfc	r1, #0, #1
    e3c4:	f36f 0141 	bfc	r1, #1, #1
    e3c8:	f36f 0182 	bfc	r1, #2, #1
    e3cc:	f36f 01c5 	bfc	r1, #3, #3
    e3d0:	2301      	movs	r3, #1
    e3d2:	f363 1188 	bfi	r1, r3, #6, #3
    e3d6:	f3c4 030a 	ubfx	r3, r4, #0, #11
    e3da:	f363 2153 	bfi	r1, r3, #9, #11
    e3de:	f36f 511f 	bfc	r1, #20, #12
    e3e2:	2300      	movs	r3, #0
    e3e4:	4807      	ldr	r0, [pc, #28]	; (e404 <mpu_configure_regions+0xdc>)
    e3e6:	f7fd fd3f 	bl	be68 <z_impl_z_log_msg_static_create>
    e3ea:	46b5      	mov	sp, r6
			return -EINVAL;
    e3ec:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    e3f0:	4630      	mov	r0, r6
    e3f2:	3708      	adds	r7, #8
    e3f4:	46bd      	mov	sp, r7
    e3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3fa:	bf00      	nop
    e3fc:	0001abd4 	.word	0x0001abd4
    e400:	0001ac18 	.word	0x0001ac18
    e404:	0001a12c 	.word	0x0001a12c

0000e408 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    e408:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    e40a:	4c03      	ldr	r4, [pc, #12]	; (e418 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    e40c:	2301      	movs	r3, #1
    e40e:	7822      	ldrb	r2, [r4, #0]
    e410:	f7ff ff8a 	bl	e328 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e414:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    e416:	bd10      	pop	{r4, pc}
    e418:	200026db 	.word	0x200026db

0000e41c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    e41c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    e41e:	2300      	movs	r3, #0
    e420:	4a09      	ldr	r2, [pc, #36]	; (e448 <mpu_configure_dynamic_mpu_regions+0x2c>)
    e422:	7812      	ldrb	r2, [r2, #0]
    e424:	f7ff ff80 	bl	e328 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    e428:	f110 0f16 	cmn.w	r0, #22
    e42c:	d00a      	beq.n	e444 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e42e:	4603      	mov	r3, r0
    e430:	e006      	b.n	e440 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    e432:	4a06      	ldr	r2, [pc, #24]	; (e44c <mpu_configure_dynamic_mpu_regions+0x30>)
    e434:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    e438:	2100      	movs	r1, #0
    e43a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    e43e:	3301      	adds	r3, #1
    e440:	2b07      	cmp	r3, #7
    e442:	ddf6      	ble.n	e432 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    e444:	bd08      	pop	{r3, pc}
    e446:	bf00      	nop
    e448:	200026db 	.word	0x200026db
    e44c:	e000ed00 	.word	0xe000ed00

0000e450 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e450:	4b04      	ldr	r3, [pc, #16]	; (e464 <arm_core_mpu_enable+0x14>)
    e452:	2205      	movs	r2, #5
    e454:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e45c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e460:	4770      	bx	lr
    e462:	bf00      	nop
    e464:	e000ed00 	.word	0xe000ed00

0000e468 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e468:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e46c:	4b02      	ldr	r3, [pc, #8]	; (e478 <arm_core_mpu_disable+0x10>)
    e46e:	2200      	movs	r2, #0
    e470:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e474:	4770      	bx	lr
    e476:	bf00      	nop
    e478:	e000ed00 	.word	0xe000ed00

0000e47c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e47c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e47e:	4b0e      	ldr	r3, [pc, #56]	; (e4b8 <z_arm_mpu_init+0x3c>)
    e480:	681d      	ldr	r5, [r3, #0]
    e482:	2d08      	cmp	r5, #8
    e484:	d815      	bhi.n	e4b2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    e486:	f7ff ffef 	bl	e468 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e48a:	2400      	movs	r4, #0
    e48c:	e009      	b.n	e4a2 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e48e:	4b0a      	ldr	r3, [pc, #40]	; (e4b8 <z_arm_mpu_init+0x3c>)
    e490:	6859      	ldr	r1, [r3, #4]
    e492:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    e496:	0093      	lsls	r3, r2, #2
    e498:	4419      	add	r1, r3
    e49a:	4620      	mov	r0, r4
    e49c:	f7ff fede 	bl	e25c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e4a0:	3401      	adds	r4, #1
    e4a2:	42a5      	cmp	r5, r4
    e4a4:	d8f3      	bhi.n	e48e <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e4a6:	4b05      	ldr	r3, [pc, #20]	; (e4bc <z_arm_mpu_init+0x40>)
    e4a8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    e4aa:	f7ff ffd1 	bl	e450 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    e4ae:	2000      	movs	r0, #0
}
    e4b0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    e4b2:	f04f 30ff 	mov.w	r0, #4294967295
    e4b6:	e7fb      	b.n	e4b0 <z_arm_mpu_init+0x34>
    e4b8:	0001ac30 	.word	0x0001ac30
    e4bc:	200026db 	.word	0x200026db

0000e4c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    e4c0:	4b01      	ldr	r3, [pc, #4]	; (e4c8 <__stdout_hook_install+0x8>)
    e4c2:	6018      	str	r0, [r3, #0]
}
    e4c4:	4770      	bx	lr
    e4c6:	bf00      	nop
    e4c8:	200002d8 	.word	0x200002d8

0000e4cc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    e4cc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e4d0:	4905      	ldr	r1, [pc, #20]	; (e4e8 <__NVIC_SystemReset+0x1c>)
    e4d2:	68ca      	ldr	r2, [r1, #12]
    e4d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e4d8:	4b04      	ldr	r3, [pc, #16]	; (e4ec <__NVIC_SystemReset+0x20>)
    e4da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e4dc:	60cb      	str	r3, [r1, #12]
    e4de:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e4e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e4e4:	e7fd      	b.n	e4e2 <__NVIC_SystemReset+0x16>
    e4e6:	bf00      	nop
    e4e8:	e000ed00 	.word	0xe000ed00
    e4ec:	05fa0004 	.word	0x05fa0004

0000e4f0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    e4f0:	f04f 0240 	mov.w	r2, #64	; 0x40
    e4f4:	f3ef 8311 	mrs	r3, BASEPRI
    e4f8:	f382 8812 	msr	BASEPRI_MAX, r2
    e4fc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e500:	4a04      	ldr	r2, [pc, #16]	; (e514 <nordicsemi_nrf52_init+0x24>)
    e502:	2101      	movs	r1, #1
    e504:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    e508:	f383 8811 	msr	BASEPRI, r3
    e50c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e510:	2000      	movs	r0, #0
    e512:	4770      	bx	lr
    e514:	4001e000 	.word	0x4001e000

0000e518 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e518:	b130      	cbz	r0, e528 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    e51a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    e51c:	4b03      	ldr	r3, [pc, #12]	; (e52c <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    e51e:	0180      	lsls	r0, r0, #6
    e520:	f043 0301 	orr.w	r3, r3, #1
    e524:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    e526:	bd08      	pop	{r3, pc}
    e528:	4770      	bx	lr
    e52a:	bf00      	nop
    e52c:	0001a220 	.word	0x0001a220

0000e530 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    e530:	b508      	push	{r3, lr}
    e532:	4804      	ldr	r0, [pc, #16]	; (e544 <xoshiro128_initialize+0x14>)
    e534:	f00a fe0b 	bl	1914e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
    e538:	b108      	cbz	r0, e53e <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
    e53a:	2000      	movs	r0, #0
}
    e53c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    e53e:	f06f 0012 	mvn.w	r0, #18
    e542:	e7fb      	b.n	e53c <xoshiro128_initialize+0xc>
    e544:	00019ee0 	.word	0x00019ee0

0000e548 <bt_addr_le_to_str>:
{
    e548:	b5f0      	push	{r4, r5, r6, r7, lr}
    e54a:	b08b      	sub	sp, #44	; 0x2c
    e54c:	4604      	mov	r4, r0
    e54e:	460d      	mov	r5, r1
    e550:	4616      	mov	r6, r2
	switch (addr->type) {
    e552:	7803      	ldrb	r3, [r0, #0]
    e554:	2b03      	cmp	r3, #3
    e556:	d82c      	bhi.n	e5b2 <bt_addr_le_to_str+0x6a>
    e558:	e8df f003 	tbb	[pc, r3]
    e55c:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
    e560:	4917      	ldr	r1, [pc, #92]	; (e5c0 <bt_addr_le_to_str+0x78>)
    e562:	a807      	add	r0, sp, #28
    e564:	f009 f808 	bl	17578 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e568:	7963      	ldrb	r3, [r4, #5]
    e56a:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e56c:	78e1      	ldrb	r1, [r4, #3]
    e56e:	78a0      	ldrb	r0, [r4, #2]
    e570:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e572:	f10d 0c1c 	add.w	ip, sp, #28
    e576:	f8cd c014 	str.w	ip, [sp, #20]
    e57a:	9704      	str	r7, [sp, #16]
    e57c:	9003      	str	r0, [sp, #12]
    e57e:	9102      	str	r1, [sp, #8]
    e580:	9201      	str	r2, [sp, #4]
    e582:	9300      	str	r3, [sp, #0]
    e584:	79a3      	ldrb	r3, [r4, #6]
    e586:	4a0f      	ldr	r2, [pc, #60]	; (e5c4 <bt_addr_le_to_str+0x7c>)
    e588:	4631      	mov	r1, r6
    e58a:	4628      	mov	r0, r5
    e58c:	f007 fce7 	bl	15f5e <snprintk>
}
    e590:	b00b      	add	sp, #44	; 0x2c
    e592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    e594:	490c      	ldr	r1, [pc, #48]	; (e5c8 <bt_addr_le_to_str+0x80>)
    e596:	a807      	add	r0, sp, #28
    e598:	f008 ffee 	bl	17578 <strcpy>
		break;
    e59c:	e7e4      	b.n	e568 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
    e59e:	490b      	ldr	r1, [pc, #44]	; (e5cc <bt_addr_le_to_str+0x84>)
    e5a0:	a807      	add	r0, sp, #28
    e5a2:	f008 ffe9 	bl	17578 <strcpy>
		break;
    e5a6:	e7df      	b.n	e568 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
    e5a8:	4909      	ldr	r1, [pc, #36]	; (e5d0 <bt_addr_le_to_str+0x88>)
    e5aa:	a807      	add	r0, sp, #28
    e5ac:	f008 ffe4 	bl	17578 <strcpy>
		break;
    e5b0:	e7da      	b.n	e568 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e5b2:	4a08      	ldr	r2, [pc, #32]	; (e5d4 <bt_addr_le_to_str+0x8c>)
    e5b4:	210a      	movs	r1, #10
    e5b6:	a807      	add	r0, sp, #28
    e5b8:	f007 fcd1 	bl	15f5e <snprintk>
		break;
    e5bc:	e7d4      	b.n	e568 <bt_addr_le_to_str+0x20>
    e5be:	bf00      	nop
    e5c0:	0001a298 	.word	0x0001a298
    e5c4:	0001a2c8 	.word	0x0001a2c8
    e5c8:	0001a2a0 	.word	0x0001a2a0
    e5cc:	0001a2a8 	.word	0x0001a2a8
    e5d0:	0001a2b4 	.word	0x0001a2b4
    e5d4:	0001a2c0 	.word	0x0001a2c0

0000e5d8 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e5d8:	2940      	cmp	r1, #64	; 0x40
    e5da:	bf28      	it	cs
    e5dc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
    e5de:	2300      	movs	r3, #0
    e5e0:	428b      	cmp	r3, r1
    e5e2:	d21c      	bcs.n	e61e <bt_hex+0x46>
{
    e5e4:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
    e5e6:	f810 c003 	ldrb.w	ip, [r0, r3]
    e5ea:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    e5ee:	005a      	lsls	r2, r3, #1
    e5f0:	4d0d      	ldr	r5, [pc, #52]	; (e628 <bt_hex+0x50>)
    e5f2:	f815 c00c 	ldrb.w	ip, [r5, ip]
    e5f6:	4c0d      	ldr	r4, [pc, #52]	; (e62c <bt_hex+0x54>)
    e5f8:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e5fc:	f810 c003 	ldrb.w	ip, [r0, r3]
    e600:	f00c 0c0f 	and.w	ip, ip, #15
    e604:	3201      	adds	r2, #1
    e606:	f815 500c 	ldrb.w	r5, [r5, ip]
    e60a:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
    e60c:	3301      	adds	r3, #1
    e60e:	428b      	cmp	r3, r1
    e610:	d3e9      	bcc.n	e5e6 <bt_hex+0xe>
	}

	str[i * 2] = '\0';
    e612:	4806      	ldr	r0, [pc, #24]	; (e62c <bt_hex+0x54>)
    e614:	2200      	movs	r2, #0
    e616:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
    e61a:	bc30      	pop	{r4, r5}
    e61c:	4770      	bx	lr
	str[i * 2] = '\0';
    e61e:	4803      	ldr	r0, [pc, #12]	; (e62c <bt_hex+0x54>)
    e620:	2200      	movs	r2, #0
    e622:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
    e626:	4770      	bx	lr
    e628:	0001ac7c 	.word	0x0001ac7c
    e62c:	20001f60 	.word	0x20001f60

0000e630 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    e630:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
    e632:	4c03      	ldr	r4, [pc, #12]	; (e640 <bt_addr_le_str+0x10>)
    e634:	221e      	movs	r2, #30
    e636:	4621      	mov	r1, r4
    e638:	f7ff ff86 	bl	e548 <bt_addr_le_to_str>

	return str;
}
    e63c:	4620      	mov	r0, r4
    e63e:	bd10      	pop	{r4, pc}
    e640:	20001f40 	.word	0x20001f40

0000e644 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    e644:	b538      	push	{r3, r4, r5, lr}
    e646:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    e648:	4805      	ldr	r0, [pc, #20]	; (e660 <bt_buf_get_rx+0x1c>)
    e64a:	f009 fa42 	bl	17ad2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e64e:	4605      	mov	r5, r0
    e650:	b120      	cbz	r0, e65c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    e652:	2100      	movs	r1, #0
    e654:	300c      	adds	r0, #12
    e656:	f009 faa0 	bl	17b9a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e65a:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e65c:	4628      	mov	r0, r5
    e65e:	bd38      	pop	{r3, r4, r5, pc}
    e660:	200004ac 	.word	0x200004ac

0000e664 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e664:	b538      	push	{r3, r4, r5, lr}
    e666:	4602      	mov	r2, r0
    e668:	460b      	mov	r3, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e66a:	490e      	ldr	r1, [pc, #56]	; (e6a4 <bt_buf_get_cmd_complete+0x40>)
    e66c:	2000      	movs	r0, #0
    e66e:	f3bf 8f5b 	dmb	ish
    e672:	e851 4f00 	ldrex	r4, [r1]
    e676:	e841 0500 	strex	r5, r0, [r1]
    e67a:	2d00      	cmp	r5, #0
    e67c:	d1f9      	bne.n	e672 <bt_buf_get_cmd_complete+0xe>
    e67e:	f3bf 8f5b 	dmb	ish
    e682:	4625      	mov	r5, r4
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    e684:	b92c      	cbnz	r4, e692 <bt_buf_get_cmd_complete+0x2e>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e686:	2001      	movs	r0, #1
    e688:	f7ff ffdc 	bl	e644 <bt_buf_get_rx>
    e68c:	4605      	mov	r5, r0
}
    e68e:	4628      	mov	r0, r5
    e690:	bd38      	pop	{r3, r4, r5, pc}
    e692:	2301      	movs	r3, #1
    e694:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    e696:	4601      	mov	r1, r0
    e698:	8220      	strh	r0, [r4, #16]
    e69a:	f104 000c 	add.w	r0, r4, #12
    e69e:	f009 fa7c 	bl	17b9a <net_buf_simple_reserve>
		return buf;
    e6a2:	e7f4      	b.n	e68e <bt_buf_get_cmd_complete+0x2a>
    e6a4:	200002a0 	.word	0x200002a0

0000e6a8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e6a8:	b510      	push	{r4, lr}
	switch (evt) {
    e6aa:	f1a0 0c0e 	sub.w	ip, r0, #14
    e6ae:	f1bc 0f01 	cmp.w	ip, #1
    e6b2:	d906      	bls.n	e6c2 <bt_buf_get_evt+0x1a>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
    e6b4:	b959      	cbnz	r1, e6ce <bt_buf_get_evt+0x26>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e6b6:	2001      	movs	r0, #1
    e6b8:	f7ff ffc4 	bl	e644 <bt_buf_get_rx>
    e6bc:	4604      	mov	r4, r0
	}
}
    e6be:	4620      	mov	r0, r4
    e6c0:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    e6c2:	4610      	mov	r0, r2
    e6c4:	4619      	mov	r1, r3
    e6c6:	f7ff ffcd 	bl	e664 <bt_buf_get_cmd_complete>
    e6ca:	4604      	mov	r4, r0
    e6cc:	e7f7      	b.n	e6be <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
    e6ce:	4806      	ldr	r0, [pc, #24]	; (e6e8 <bt_buf_get_evt+0x40>)
    e6d0:	f009 f9ff 	bl	17ad2 <net_buf_alloc_fixed>
			if (buf) {
    e6d4:	4604      	mov	r4, r0
    e6d6:	2800      	cmp	r0, #0
    e6d8:	d0f1      	beq.n	e6be <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
    e6da:	2100      	movs	r1, #0
    e6dc:	300c      	adds	r0, #12
    e6de:	f009 fa5c 	bl	17b9a <net_buf_simple_reserve>
    e6e2:	2301      	movs	r3, #1
    e6e4:	7623      	strb	r3, [r4, #24]
			return buf;
    e6e6:	e7ea      	b.n	e6be <bt_buf_get_evt+0x16>
    e6e8:	20000454 	.word	0x20000454

0000e6ec <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    e6ec:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    e6ee:	7851      	ldrb	r1, [r2, #1]
    e6f0:	4b08      	ldr	r3, [pc, #32]	; (e714 <read_local_ver_complete+0x28>)
    e6f2:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    e6f6:	8851      	ldrh	r1, [r2, #2]
    e6f8:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    e6fc:	7911      	ldrb	r1, [r2, #4]
    e6fe:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    e702:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    e706:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    e70a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    e70e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
    e712:	4770      	bx	lr
    e714:	200001a0 	.word	0x200001a0

0000e718 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    e718:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    e71a:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    e71c:	3001      	adds	r0, #1
    e71e:	f009 f80e 	bl	1773e <sys_get_le64>
    e722:	4b02      	ldr	r3, [pc, #8]	; (e72c <le_read_supp_states_complete+0x14>)
    e724:	e9c3 0138 	strd	r0, r1, [r3, #224]	; 0xe0
}
    e728:	bd08      	pop	{r3, pc}
    e72a:	bf00      	nop
    e72c:	200001a0 	.word	0x200001a0

0000e730 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
    e730:	b510      	push	{r4, lr}
    e732:	b08e      	sub	sp, #56	; 0x38
    e734:	4686      	mov	lr, r0
	const char * const str[] = {
    e736:	46ec      	mov	ip, sp
    e738:	4c0c      	ldr	r4, [pc, #48]	; (e76c <ver_str+0x3c>)
    e73a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e73c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e748:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e74c:	e894 0003 	ldmia.w	r4, {r0, r1}
    e750:	e88c 0003 	stmia.w	ip, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
    e754:	f1be 0f0d 	cmp.w	lr, #13
    e758:	d902      	bls.n	e760 <ver_str+0x30>
		return str[ver];
	}

	return "unknown";
    e75a:	4805      	ldr	r0, [pc, #20]	; (e770 <ver_str+0x40>)
}
    e75c:	b00e      	add	sp, #56	; 0x38
    e75e:	bd10      	pop	{r4, pc}
		return str[ver];
    e760:	ab0e      	add	r3, sp, #56	; 0x38
    e762:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    e766:	f85e 0c38 	ldr.w	r0, [lr, #-56]
    e76a:	e7f7      	b.n	e75c <ver_str+0x2c>
    e76c:	0001a1d0 	.word	0x0001a1d0
    e770:	0001acb8 	.word	0x0001acb8

0000e774 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
    e774:	2803      	cmp	r0, #3
    e776:	d901      	bls.n	e77c <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
    e778:	4802      	ldr	r0, [pc, #8]	; (e784 <vs_hw_platform+0x10>)
}
    e77a:	4770      	bx	lr
		return plat_str[platform];
    e77c:	4b02      	ldr	r3, [pc, #8]	; (e788 <vs_hw_platform+0x14>)
    e77e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e782:	4770      	bx	lr
    e784:	0001acb8 	.word	0x0001acb8
    e788:	0001b380 	.word	0x0001b380

0000e78c <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    e78c:	2802      	cmp	r0, #2
    e78e:	d107      	bne.n	e7a0 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
    e790:	2903      	cmp	r1, #3
    e792:	d901      	bls.n	e798 <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
    e794:	4803      	ldr	r0, [pc, #12]	; (e7a4 <vs_hw_variant+0x18>)
}
    e796:	4770      	bx	lr
		return nordic_str[variant];
    e798:	4b03      	ldr	r3, [pc, #12]	; (e7a8 <vs_hw_variant+0x1c>)
    e79a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    e79e:	4770      	bx	lr
		return "unknown";
    e7a0:	4800      	ldr	r0, [pc, #0]	; (e7a4 <vs_hw_variant+0x18>)
    e7a2:	4770      	bx	lr
    e7a4:	0001acb8 	.word	0x0001acb8
    e7a8:	0001b370 	.word	0x0001b370

0000e7ac <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
    e7ac:	2803      	cmp	r0, #3
    e7ae:	d901      	bls.n	e7b4 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
    e7b0:	4802      	ldr	r0, [pc, #8]	; (e7bc <vs_fw_variant+0x10>)
}
    e7b2:	4770      	bx	lr
		return var_str[variant];
    e7b4:	4b02      	ldr	r3, [pc, #8]	; (e7c0 <vs_fw_variant+0x14>)
    e7b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e7ba:	4770      	bx	lr
    e7bc:	0001acb8 	.word	0x0001acb8
    e7c0:	0001b360 	.word	0x0001b360

0000e7c4 <hci_reset_complete>:
{
    e7c4:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
    e7c6:	68c3      	ldr	r3, [r0, #12]
    e7c8:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    e7ca:	b99b      	cbnz	r3, e7f4 <hci_reset_complete+0x30>
		bt_scan_reset();
    e7cc:	f002 fafc 	bl	10dc8 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e7d0:	4b09      	ldr	r3, [pc, #36]	; (e7f8 <hci_reset_complete+0x34>)
    e7d2:	f3bf 8f5b 	dmb	ish
    e7d6:	681a      	ldr	r2, [r3, #0]
    e7d8:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e7dc:	f002 0209 	and.w	r2, r2, #9
    e7e0:	f3bf 8f5b 	dmb	ish
    e7e4:	e853 1f00 	ldrex	r1, [r3]
    e7e8:	e843 2000 	strex	r0, r2, [r3]
    e7ec:	2800      	cmp	r0, #0
    e7ee:	d1f9      	bne.n	e7e4 <hci_reset_complete+0x20>
    e7f0:	f3bf 8f5b 	dmb	ish
}
    e7f4:	bd08      	pop	{r3, pc}
    e7f6:	bf00      	nop
    e7f8:	20000274 	.word	0x20000274

0000e7fc <read_local_features_complete>:
{
    e7fc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    e7fe:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    e800:	2208      	movs	r2, #8
    e802:	3101      	adds	r1, #1
    e804:	4801      	ldr	r0, [pc, #4]	; (e80c <read_local_features_complete+0x10>)
    e806:	f008 ff00 	bl	1760a <memcpy>
}
    e80a:	bd08      	pop	{r3, pc}
    e80c:	20000218 	.word	0x20000218

0000e810 <read_supported_commands_complete>:
{
    e810:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    e812:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    e814:	2240      	movs	r2, #64	; 0x40
    e816:	3101      	adds	r1, #1
    e818:	4801      	ldr	r0, [pc, #4]	; (e820 <read_supported_commands_complete+0x10>)
    e81a:	f008 fef6 	bl	1760a <memcpy>
}
    e81e:	bd08      	pop	{r3, pc}
    e820:	20000220 	.word	0x20000220

0000e824 <read_le_features_complete>:
{
    e824:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    e826:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    e828:	2208      	movs	r2, #8
    e82a:	3101      	adds	r1, #1
    e82c:	4801      	ldr	r0, [pc, #4]	; (e834 <read_le_features_complete+0x10>)
    e82e:	f008 feec 	bl	1760a <memcpy>
}
    e832:	bd08      	pop	{r3, pc}
    e834:	20000278 	.word	0x20000278

0000e838 <handle_event_common>:
{
    e838:	b5f0      	push	{r4, r5, r6, r7, lr}
    e83a:	b083      	sub	sp, #12
    e83c:	af00      	add	r7, sp, #0
    e83e:	4604      	mov	r4, r0
    e840:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    e842:	f04f 0c00 	mov.w	ip, #0
    e846:	4563      	cmp	r3, ip
    e848:	d958      	bls.n	e8fc <handle_event_common+0xc4>
		const struct event_handler *handler = &handlers[i];
    e84a:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
    e84e:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
    e852:	45a6      	cmp	lr, r4
    e854:	d109      	bne.n	e86a <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
    e856:	8a03      	ldrh	r3, [r0, #16]
    e858:	784a      	ldrb	r2, [r1, #1]
    e85a:	4293      	cmp	r3, r2
    e85c:	d308      	bcc.n	e870 <handle_event_common+0x38>
		handler->handler(buf);
    e85e:	684b      	ldr	r3, [r1, #4]
    e860:	4798      	blx	r3
		return 0;
    e862:	2000      	movs	r0, #0
}
    e864:	370c      	adds	r7, #12
    e866:	46bd      	mov	sp, r7
    e868:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
    e86a:	f10c 0c01 	add.w	ip, ip, #1
    e86e:	e7ea      	b.n	e846 <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    e870:	466d      	mov	r5, sp
    e872:	b08a      	sub	sp, #40	; 0x28
    e874:	4669      	mov	r1, sp
    e876:	f111 0210 	adds.w	r2, r1, #16
    e87a:	d039      	beq.n	e8f0 <handle_event_common+0xb8>
    e87c:	2014      	movs	r0, #20
    e87e:	b18a      	cbz	r2, e8a4 <handle_event_common+0x6c>
    e880:	4684      	mov	ip, r0
    e882:	2804      	cmp	r0, #4
    e884:	dd01      	ble.n	e88a <handle_event_common+0x52>
    e886:	4e1f      	ldr	r6, [pc, #124]	; (e904 <handle_event_common+0xcc>)
    e888:	614e      	str	r6, [r1, #20]
    e88a:	f1bc 0f08 	cmp.w	ip, #8
    e88e:	dd01      	ble.n	e894 <handle_event_common+0x5c>
    e890:	4e1d      	ldr	r6, [pc, #116]	; (e908 <handle_event_common+0xd0>)
    e892:	618e      	str	r6, [r1, #24]
    e894:	f1bc 0f0c 	cmp.w	ip, #12
    e898:	dd00      	ble.n	e89c <handle_event_common+0x64>
    e89a:	61cb      	str	r3, [r1, #28]
    e89c:	f1bc 0f10 	cmp.w	ip, #16
    e8a0:	dd00      	ble.n	e8a4 <handle_event_common+0x6c>
    e8a2:	620c      	str	r4, [r1, #32]
    e8a4:	2813      	cmp	r0, #19
    e8a6:	dd26      	ble.n	e8f6 <handle_event_common+0xbe>
    e8a8:	2314      	movs	r3, #20
    e8aa:	b13a      	cbz	r2, e8bc <handle_event_common+0x84>
    e8ac:	2005      	movs	r0, #5
    e8ae:	7138      	strb	r0, [r7, #4]
    e8b0:	2000      	movs	r0, #0
    e8b2:	7178      	strb	r0, [r7, #5]
    e8b4:	71b8      	strb	r0, [r7, #6]
    e8b6:	71f8      	strb	r0, [r7, #7]
    e8b8:	6878      	ldr	r0, [r7, #4]
    e8ba:	6108      	str	r0, [r1, #16]
    e8bc:	2100      	movs	r1, #0
    e8be:	f36f 0100 	bfc	r1, #0, #1
    e8c2:	f36f 0141 	bfc	r1, #1, #1
    e8c6:	f36f 0182 	bfc	r1, #2, #1
    e8ca:	f36f 01c5 	bfc	r1, #3, #3
    e8ce:	2001      	movs	r0, #1
    e8d0:	f360 1188 	bfi	r1, r0, #6, #3
    e8d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
    e8d8:	f363 2153 	bfi	r1, r3, #9, #11
    e8dc:	f36f 511f 	bfc	r1, #20, #12
    e8e0:	2300      	movs	r3, #0
    e8e2:	480a      	ldr	r0, [pc, #40]	; (e90c <handle_event_common+0xd4>)
    e8e4:	f7fd fac0 	bl	be68 <z_impl_z_log_msg_static_create>
    e8e8:	46ad      	mov	sp, r5
			return -EINVAL;
    e8ea:	f06f 0015 	mvn.w	r0, #21
    e8ee:	e7b9      	b.n	e864 <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    e8f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e8f4:	e7c3      	b.n	e87e <handle_event_common+0x46>
    e8f6:	f06f 031b 	mvn.w	r3, #27
    e8fa:	e7d6      	b.n	e8aa <handle_event_common+0x72>
	return -EOPNOTSUPP;
    e8fc:	f06f 005e 	mvn.w	r0, #94	; 0x5e
    e900:	e7b0      	b.n	e864 <handle_event_common+0x2c>
    e902:	bf00      	nop
    e904:	0001acc0 	.word	0x0001acc0
    e908:	0001b314 	.word	0x0001b314
    e90c:	0001a0bc 	.word	0x0001a0bc

0000e910 <hci_cmd_done>:
{
    e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e914:	b082      	sub	sp, #8
    e916:	af00      	add	r7, sp, #0
    e918:	4605      	mov	r5, r0
    e91a:	460e      	mov	r6, r1
    e91c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e91e:	7a90      	ldrb	r0, [r2, #10]
    e920:	f002 fc06 	bl	11130 <net_buf_pool_get>
    e924:	4b79      	ldr	r3, [pc, #484]	; (eb0c <hci_cmd_done+0x1fc>)
    e926:	4283      	cmp	r3, r0
    e928:	d054      	beq.n	e9d4 <hci_cmd_done+0xc4>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    e92a:	f894 800a 	ldrb.w	r8, [r4, #10]
    e92e:	4640      	mov	r0, r8
    e930:	f002 fbfe 	bl	11130 <net_buf_pool_get>
    e934:	466e      	mov	r6, sp
    e936:	b08c      	sub	sp, #48	; 0x30
    e938:	466b      	mov	r3, sp
    e93a:	f113 0210 	adds.w	r2, r3, #16
    e93e:	d043      	beq.n	e9c8 <hci_cmd_done+0xb8>
    e940:	241c      	movs	r4, #28
    e942:	b1d2      	cbz	r2, e97a <hci_cmd_done+0x6a>
    e944:	4621      	mov	r1, r4
    e946:	2c04      	cmp	r4, #4
    e948:	dd03      	ble.n	e952 <hci_cmd_done+0x42>
    e94a:	f8df c1c4 	ldr.w	ip, [pc, #452]	; eb10 <hci_cmd_done+0x200>
    e94e:	f8c3 c014 	str.w	ip, [r3, #20]
    e952:	2908      	cmp	r1, #8
    e954:	dd03      	ble.n	e95e <hci_cmd_done+0x4e>
    e956:	f8df c1bc 	ldr.w	ip, [pc, #444]	; eb14 <hci_cmd_done+0x204>
    e95a:	f8c3 c018 	str.w	ip, [r3, #24]
    e95e:	290c      	cmp	r1, #12
    e960:	dd00      	ble.n	e964 <hci_cmd_done+0x54>
    e962:	61dd      	str	r5, [r3, #28]
    e964:	2910      	cmp	r1, #16
    e966:	dd01      	ble.n	e96c <hci_cmd_done+0x5c>
    e968:	f8c3 8020 	str.w	r8, [r3, #32]
    e96c:	2914      	cmp	r1, #20
    e96e:	dd00      	ble.n	e972 <hci_cmd_done+0x62>
    e970:	6258      	str	r0, [r3, #36]	; 0x24
    e972:	2918      	cmp	r1, #24
    e974:	dd01      	ble.n	e97a <hci_cmd_done+0x6a>
    e976:	4965      	ldr	r1, [pc, #404]	; (eb0c <hci_cmd_done+0x1fc>)
    e978:	6299      	str	r1, [r3, #40]	; 0x28
    e97a:	2c1b      	cmp	r4, #27
    e97c:	dd27      	ble.n	e9ce <hci_cmd_done+0xbe>
    e97e:	241c      	movs	r4, #28
    e980:	b13a      	cbz	r2, e992 <hci_cmd_done+0x82>
    e982:	2107      	movs	r1, #7
    e984:	7139      	strb	r1, [r7, #4]
    e986:	2100      	movs	r1, #0
    e988:	7179      	strb	r1, [r7, #5]
    e98a:	71b9      	strb	r1, [r7, #6]
    e98c:	71f9      	strb	r1, [r7, #7]
    e98e:	6878      	ldr	r0, [r7, #4]
    e990:	6118      	str	r0, [r3, #16]
    e992:	2100      	movs	r1, #0
    e994:	f36f 0100 	bfc	r1, #0, #1
    e998:	f36f 0141 	bfc	r1, #1, #1
    e99c:	f36f 0182 	bfc	r1, #2, #1
    e9a0:	f36f 01c5 	bfc	r1, #3, #3
    e9a4:	2302      	movs	r3, #2
    e9a6:	f363 1188 	bfi	r1, r3, #6, #3
    e9aa:	f3c4 040a 	ubfx	r4, r4, #0, #11
    e9ae:	f364 2153 	bfi	r1, r4, #9, #11
    e9b2:	f36f 511f 	bfc	r1, #20, #12
    e9b6:	2300      	movs	r3, #0
    e9b8:	4857      	ldr	r0, [pc, #348]	; (eb18 <hci_cmd_done+0x208>)
    e9ba:	f7fd fa55 	bl	be68 <z_impl_z_log_msg_static_create>
    e9be:	46b5      	mov	sp, r6
}
    e9c0:	3708      	adds	r7, #8
    e9c2:	46bd      	mov	sp, r7
    e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    e9c8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e9cc:	e7b9      	b.n	e942 <hci_cmd_done+0x32>
    e9ce:	f06f 041b 	mvn.w	r4, #27
    e9d2:	e7d5      	b.n	e980 <hci_cmd_done+0x70>
	if (cmd(buf)->opcode != opcode) {
    e9d4:	4620      	mov	r0, r4
    e9d6:	f008 ffd9 	bl	1798c <net_buf_id>
    e9da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e9de:	4b4f      	ldr	r3, [pc, #316]	; (eb1c <hci_cmd_done+0x20c>)
    e9e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e9e4:	885b      	ldrh	r3, [r3, #2]
    e9e6:	429d      	cmp	r5, r3
    e9e8:	d133      	bne.n	ea52 <hci_cmd_done+0x142>
	if (bt_dev.sent_cmd) {
    e9ea:	4b4d      	ldr	r3, [pc, #308]	; (eb20 <hci_cmd_done+0x210>)
    e9ec:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    e9f0:	b128      	cbz	r0, e9fe <hci_cmd_done+0xee>
		net_buf_unref(bt_dev.sent_cmd);
    e9f2:	f009 f8ab 	bl	17b4c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e9f6:	4b4a      	ldr	r3, [pc, #296]	; (eb20 <hci_cmd_done+0x210>)
    e9f8:	2200      	movs	r2, #0
    e9fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    e9fe:	4620      	mov	r0, r4
    ea00:	f008 ffc4 	bl	1798c <net_buf_id>
    ea04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ea08:	4b44      	ldr	r3, [pc, #272]	; (eb1c <hci_cmd_done+0x20c>)
    ea0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ea0e:	685b      	ldr	r3, [r3, #4]
    ea10:	b10b      	cbz	r3, ea16 <hci_cmd_done+0x106>
    ea12:	2e00      	cmp	r6, #0
    ea14:	d06b      	beq.n	eaee <hci_cmd_done+0x1de>
	if (cmd(buf)->sync) {
    ea16:	4620      	mov	r0, r4
    ea18:	f008 ffb8 	bl	1798c <net_buf_id>
    ea1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ea20:	4b3e      	ldr	r3, [pc, #248]	; (eb1c <hci_cmd_done+0x20c>)
    ea22:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ea26:	689b      	ldr	r3, [r3, #8]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d0c9      	beq.n	e9c0 <hci_cmd_done+0xb0>
		cmd(buf)->status = status;
    ea2c:	4620      	mov	r0, r4
    ea2e:	f008 ffad 	bl	1798c <net_buf_id>
    ea32:	4d3a      	ldr	r5, [pc, #232]	; (eb1c <hci_cmd_done+0x20c>)
    ea34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ea38:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    ea3c:	4620      	mov	r0, r4
    ea3e:	f008 ffa5 	bl	1798c <net_buf_id>
    ea42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ea46:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    ea4a:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    ea4c:	f006 f942 	bl	14cd4 <z_impl_k_sem_give>
}
    ea50:	e7b6      	b.n	e9c0 <hci_cmd_done+0xb0>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    ea52:	4620      	mov	r0, r4
    ea54:	f008 ff9a 	bl	1798c <net_buf_id>
    ea58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ea5c:	4b2f      	ldr	r3, [pc, #188]	; (eb1c <hci_cmd_done+0x20c>)
    ea5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ea62:	885c      	ldrh	r4, [r3, #2]
    ea64:	466e      	mov	r6, sp
    ea66:	b08a      	sub	sp, #40	; 0x28
    ea68:	466b      	mov	r3, sp
    ea6a:	f113 0210 	adds.w	r2, r3, #16
    ea6e:	d038      	beq.n	eae2 <hci_cmd_done+0x1d2>
    ea70:	2114      	movs	r1, #20
    ea72:	b192      	cbz	r2, ea9a <hci_cmd_done+0x18a>
    ea74:	4608      	mov	r0, r1
    ea76:	2904      	cmp	r1, #4
    ea78:	dd03      	ble.n	ea82 <hci_cmd_done+0x172>
    ea7a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; eb24 <hci_cmd_done+0x214>
    ea7e:	f8c3 c014 	str.w	ip, [r3, #20]
    ea82:	2808      	cmp	r0, #8
    ea84:	dd03      	ble.n	ea8e <hci_cmd_done+0x17e>
    ea86:	f8df c08c 	ldr.w	ip, [pc, #140]	; eb14 <hci_cmd_done+0x204>
    ea8a:	f8c3 c018 	str.w	ip, [r3, #24]
    ea8e:	280c      	cmp	r0, #12
    ea90:	dd00      	ble.n	ea94 <hci_cmd_done+0x184>
    ea92:	61dd      	str	r5, [r3, #28]
    ea94:	2810      	cmp	r0, #16
    ea96:	dd00      	ble.n	ea9a <hci_cmd_done+0x18a>
    ea98:	621c      	str	r4, [r3, #32]
    ea9a:	2913      	cmp	r1, #19
    ea9c:	dd24      	ble.n	eae8 <hci_cmd_done+0x1d8>
    ea9e:	2414      	movs	r4, #20
    eaa0:	b13a      	cbz	r2, eab2 <hci_cmd_done+0x1a2>
    eaa2:	2105      	movs	r1, #5
    eaa4:	7139      	strb	r1, [r7, #4]
    eaa6:	2100      	movs	r1, #0
    eaa8:	7179      	strb	r1, [r7, #5]
    eaaa:	71b9      	strb	r1, [r7, #6]
    eaac:	71f9      	strb	r1, [r7, #7]
    eaae:	6878      	ldr	r0, [r7, #4]
    eab0:	6118      	str	r0, [r3, #16]
    eab2:	2100      	movs	r1, #0
    eab4:	f36f 0100 	bfc	r1, #0, #1
    eab8:	f36f 0141 	bfc	r1, #1, #1
    eabc:	f36f 0182 	bfc	r1, #2, #1
    eac0:	f36f 01c5 	bfc	r1, #3, #3
    eac4:	2302      	movs	r3, #2
    eac6:	f363 1188 	bfi	r1, r3, #6, #3
    eaca:	f3c4 030a 	ubfx	r3, r4, #0, #11
    eace:	f363 2153 	bfi	r1, r3, #9, #11
    ead2:	f36f 511f 	bfc	r1, #20, #12
    ead6:	2300      	movs	r3, #0
    ead8:	480f      	ldr	r0, [pc, #60]	; (eb18 <hci_cmd_done+0x208>)
    eada:	f7fd f9c5 	bl	be68 <z_impl_z_log_msg_static_create>
    eade:	46b5      	mov	sp, r6
		return;
    eae0:	e76e      	b.n	e9c0 <hci_cmd_done+0xb0>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    eae2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    eae6:	e7c4      	b.n	ea72 <hci_cmd_done+0x162>
    eae8:	f06f 041b 	mvn.w	r4, #27
    eaec:	e7d8      	b.n	eaa0 <hci_cmd_done+0x190>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    eaee:	4620      	mov	r0, r4
    eaf0:	f008 ff4c 	bl	1798c <net_buf_id>
    eaf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    eaf8:	4b08      	ldr	r3, [pc, #32]	; (eb1c <hci_cmd_done+0x20c>)
    eafa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    eafe:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    eb00:	7a1a      	ldrb	r2, [r3, #8]
    eb02:	6859      	ldr	r1, [r3, #4]
    eb04:	6818      	ldr	r0, [r3, #0]
    eb06:	f008 fe36 	bl	17776 <atomic_set_bit_to>
    eb0a:	e784      	b.n	ea16 <hci_cmd_done+0x106>
    eb0c:	20000480 	.word	0x20000480
    eb10:	0001ace8 	.word	0x0001ace8
    eb14:	0001b338 	.word	0x0001b338
    eb18:	0001a0bc 	.word	0x0001a0bc
    eb1c:	20001fe4 	.word	0x20001fe4
    eb20:	200001a0 	.word	0x200001a0
    eb24:	0001ad24 	.word	0x0001ad24

0000eb28 <hci_cmd_status>:
{
    eb28:	b538      	push	{r3, r4, r5, lr}
    eb2a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    eb2c:	2104      	movs	r1, #4
    eb2e:	300c      	adds	r0, #12
    eb30:	f009 f850 	bl	17bd4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    eb34:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    eb36:	4622      	mov	r2, r4
    eb38:	7801      	ldrb	r1, [r0, #0]
    eb3a:	8840      	ldrh	r0, [r0, #2]
    eb3c:	f7ff fee8 	bl	e910 <hci_cmd_done>
	if (ncmd) {
    eb40:	b905      	cbnz	r5, eb44 <hci_cmd_status+0x1c>
}
    eb42:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    eb44:	4801      	ldr	r0, [pc, #4]	; (eb4c <hci_cmd_status+0x24>)
    eb46:	f006 f8c5 	bl	14cd4 <z_impl_k_sem_give>
    eb4a:	e7fa      	b.n	eb42 <hci_cmd_status+0x1a>
    eb4c:	20000288 	.word	0x20000288

0000eb50 <hci_cmd_complete>:
{
    eb50:	b538      	push	{r3, r4, r5, lr}
    eb52:	4604      	mov	r4, r0
    eb54:	2103      	movs	r1, #3
    eb56:	300c      	adds	r0, #12
    eb58:	f009 f83c 	bl	17bd4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    eb5c:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    eb5e:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
    eb60:	4622      	mov	r2, r4
    eb62:	7819      	ldrb	r1, [r3, #0]
    eb64:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    eb68:	f7ff fed2 	bl	e910 <hci_cmd_done>
	if (ncmd) {
    eb6c:	b905      	cbnz	r5, eb70 <hci_cmd_complete+0x20>
}
    eb6e:	bd38      	pop	{r3, r4, r5, pc}
    eb70:	4801      	ldr	r0, [pc, #4]	; (eb78 <hci_cmd_complete+0x28>)
    eb72:	f006 f8af 	bl	14cd4 <z_impl_k_sem_give>
    eb76:	e7fa      	b.n	eb6e <hci_cmd_complete+0x1e>
    eb78:	20000288 	.word	0x20000288

0000eb7c <hci_hardware_error>:
{
    eb7c:	b5b0      	push	{r4, r5, r7, lr}
    eb7e:	b082      	sub	sp, #8
    eb80:	af00      	add	r7, sp, #0
    eb82:	2101      	movs	r1, #1
    eb84:	300c      	adds	r0, #12
    eb86:	f009 f825 	bl	17bd4 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    eb8a:	7804      	ldrb	r4, [r0, #0]
    eb8c:	b088      	sub	sp, #32
    eb8e:	466b      	mov	r3, sp
    eb90:	f113 0210 	adds.w	r2, r3, #16
    eb94:	d033      	beq.n	ebfe <hci_hardware_error+0x82>
    eb96:	2110      	movs	r1, #16
    eb98:	b15a      	cbz	r2, ebb2 <hci_hardware_error+0x36>
    eb9a:	4608      	mov	r0, r1
    eb9c:	2904      	cmp	r1, #4
    eb9e:	dd01      	ble.n	eba4 <hci_hardware_error+0x28>
    eba0:	4d1a      	ldr	r5, [pc, #104]	; (ec0c <hci_hardware_error+0x90>)
    eba2:	615d      	str	r5, [r3, #20]
    eba4:	2808      	cmp	r0, #8
    eba6:	dd01      	ble.n	ebac <hci_hardware_error+0x30>
    eba8:	4d19      	ldr	r5, [pc, #100]	; (ec10 <hci_hardware_error+0x94>)
    ebaa:	619d      	str	r5, [r3, #24]
    ebac:	280c      	cmp	r0, #12
    ebae:	dd00      	ble.n	ebb2 <hci_hardware_error+0x36>
    ebb0:	61dc      	str	r4, [r3, #28]
    ebb2:	290f      	cmp	r1, #15
    ebb4:	dd26      	ble.n	ec04 <hci_hardware_error+0x88>
    ebb6:	f04f 0c10 	mov.w	ip, #16
    ebba:	b13a      	cbz	r2, ebcc <hci_hardware_error+0x50>
    ebbc:	2104      	movs	r1, #4
    ebbe:	7139      	strb	r1, [r7, #4]
    ebc0:	2100      	movs	r1, #0
    ebc2:	7179      	strb	r1, [r7, #5]
    ebc4:	71b9      	strb	r1, [r7, #6]
    ebc6:	71f9      	strb	r1, [r7, #7]
    ebc8:	6878      	ldr	r0, [r7, #4]
    ebca:	6118      	str	r0, [r3, #16]
    ebcc:	2100      	movs	r1, #0
    ebce:	f36f 0100 	bfc	r1, #0, #1
    ebd2:	f36f 0141 	bfc	r1, #1, #1
    ebd6:	f36f 0182 	bfc	r1, #2, #1
    ebda:	f36f 01c5 	bfc	r1, #3, #3
    ebde:	2301      	movs	r3, #1
    ebe0:	f363 1188 	bfi	r1, r3, #6, #3
    ebe4:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    ebe8:	f36c 2153 	bfi	r1, ip, #9, #11
    ebec:	f36f 511f 	bfc	r1, #20, #12
    ebf0:	2300      	movs	r3, #0
    ebf2:	4808      	ldr	r0, [pc, #32]	; (ec14 <hci_hardware_error+0x98>)
    ebf4:	f7fd f938 	bl	be68 <z_impl_z_log_msg_static_create>
}
    ebf8:	3708      	adds	r7, #8
    ebfa:	46bd      	mov	sp, r7
    ebfc:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    ebfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ec02:	e7c9      	b.n	eb98 <hci_hardware_error+0x1c>
    ec04:	f06f 0c1b 	mvn.w	ip, #27
    ec08:	e7d7      	b.n	ebba <hci_hardware_error+0x3e>
    ec0a:	bf00      	nop
    ec0c:	0001ad5c 	.word	0x0001ad5c
    ec10:	0001b2d8 	.word	0x0001b2d8
    ec14:	0001a0bc 	.word	0x0001a0bc

0000ec18 <handle_event>:
{
    ec18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec1c:	b082      	sub	sp, #8
    ec1e:	af00      	add	r7, sp, #0
    ec20:	4605      	mov	r5, r0
    ec22:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
    ec24:	f7ff fe08 	bl	e838 <handle_event_common>
	if (err == -EOPNOTSUPP) {
    ec28:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
    ec2c:	d003      	beq.n	ec36 <handle_event+0x1e>
}
    ec2e:	3708      	adds	r7, #8
    ec30:	46bd      	mov	sp, r7
    ec32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    ec36:	f8b4 8010 	ldrh.w	r8, [r4, #16]
    ec3a:	4641      	mov	r1, r8
    ec3c:	68e0      	ldr	r0, [r4, #12]
    ec3e:	f7ff fccb 	bl	e5d8 <bt_hex>
    ec42:	466e      	mov	r6, sp
    ec44:	2303      	movs	r3, #3
    ec46:	713b      	strb	r3, [r7, #4]
    ec48:	2305      	movs	r3, #5
    ec4a:	717b      	strb	r3, [r7, #5]
    ec4c:	b08c      	sub	sp, #48	; 0x30
    ec4e:	466c      	mov	r4, sp
    ec50:	f114 0210 	adds.w	r2, r4, #16
    ec54:	d020      	beq.n	ec98 <handle_event+0x80>
    ec56:	f04f 0c1a 	mov.w	ip, #26
    ec5a:	b182      	cbz	r2, ec7e <handle_event+0x66>
    ec5c:	4663      	mov	r3, ip
    ec5e:	f1bc 0f04 	cmp.w	ip, #4
    ec62:	dd01      	ble.n	ec68 <handle_event+0x50>
    ec64:	4927      	ldr	r1, [pc, #156]	; (ed04 <handle_event+0xec>)
    ec66:	6161      	str	r1, [r4, #20]
    ec68:	2b08      	cmp	r3, #8
    ec6a:	dd01      	ble.n	ec70 <handle_event+0x58>
    ec6c:	4926      	ldr	r1, [pc, #152]	; (ed08 <handle_event+0xf0>)
    ec6e:	61a1      	str	r1, [r4, #24]
    ec70:	2b0c      	cmp	r3, #12
    ec72:	dd00      	ble.n	ec76 <handle_event+0x5e>
    ec74:	61e5      	str	r5, [r4, #28]
    ec76:	2b10      	cmp	r3, #16
    ec78:	dd01      	ble.n	ec7e <handle_event+0x66>
    ec7a:	f8c4 8020 	str.w	r8, [r4, #32]
    ec7e:	2303      	movs	r3, #3
    ec80:	703b      	strb	r3, [r7, #0]
    ec82:	2305      	movs	r3, #5
    ec84:	707b      	strb	r3, [r7, #1]
    ec86:	b1a2      	cbz	r2, ecb2 <handle_event+0x9a>
    ec88:	f1bc 0f14 	cmp.w	ip, #20
    ec8c:	dd00      	ble.n	ec90 <handle_event+0x78>
    ec8e:	6260      	str	r0, [r4, #36]	; 0x24
    ec90:	f104 0328 	add.w	r3, r4, #40	; 0x28
    ec94:	2100      	movs	r1, #0
    ec96:	e00a      	b.n	ecae <handle_event+0x96>
    ec98:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    ec9c:	e7dd      	b.n	ec5a <handle_event+0x42>
    ec9e:	f101 0008 	add.w	r0, r1, #8
    eca2:	4438      	add	r0, r7
    eca4:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    eca8:	f803 0b01 	strb.w	r0, [r3], #1
    ecac:	3101      	adds	r1, #1
    ecae:	2901      	cmp	r1, #1
    ecb0:	d9f5      	bls.n	ec9e <handle_event+0x86>
    ecb2:	f1bc 0f19 	cmp.w	ip, #25
    ecb6:	dd22      	ble.n	ecfe <handle_event+0xe6>
    ecb8:	231a      	movs	r3, #26
    ecba:	b142      	cbz	r2, ecce <handle_event+0xb6>
    ecbc:	2106      	movs	r1, #6
    ecbe:	7139      	strb	r1, [r7, #4]
    ecc0:	2100      	movs	r1, #0
    ecc2:	7179      	strb	r1, [r7, #5]
    ecc4:	71b9      	strb	r1, [r7, #6]
    ecc6:	2101      	movs	r1, #1
    ecc8:	71f9      	strb	r1, [r7, #7]
    ecca:	6878      	ldr	r0, [r7, #4]
    eccc:	6120      	str	r0, [r4, #16]
    ecce:	2100      	movs	r1, #0
    ecd0:	f36f 0100 	bfc	r1, #0, #1
    ecd4:	f36f 0141 	bfc	r1, #1, #1
    ecd8:	f36f 0182 	bfc	r1, #2, #1
    ecdc:	f36f 01c5 	bfc	r1, #3, #3
    ece0:	2002      	movs	r0, #2
    ece2:	f360 1188 	bfi	r1, r0, #6, #3
    ece6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    ecea:	f363 2153 	bfi	r1, r3, #9, #11
    ecee:	f36f 511f 	bfc	r1, #20, #12
    ecf2:	2300      	movs	r3, #0
    ecf4:	4805      	ldr	r0, [pc, #20]	; (ed0c <handle_event+0xf4>)
    ecf6:	f7fd f8b7 	bl	be68 <z_impl_z_log_msg_static_create>
    ecfa:	46b5      	mov	sp, r6
}
    ecfc:	e797      	b.n	ec2e <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    ecfe:	f06f 031b 	mvn.w	r3, #27
    ed02:	e7da      	b.n	ecba <handle_event+0xa2>
    ed04:	0001ad84 	.word	0x0001ad84
    ed08:	0001b328 	.word	0x0001b328
    ed0c:	0001a0bc 	.word	0x0001a0bc

0000ed10 <hci_event>:
{
    ed10:	b538      	push	{r3, r4, r5, lr}
    ed12:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ed14:	8a03      	ldrh	r3, [r0, #16]
    ed16:	2b01      	cmp	r3, #1
    ed18:	d91b      	bls.n	ed52 <hci_event+0x42>
    ed1a:	2102      	movs	r1, #2
    ed1c:	f104 000c 	add.w	r0, r4, #12
    ed20:	f008 ff58 	bl	17bd4 <net_buf_simple_pull_mem>
    ed24:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ed26:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    ed28:	2b05      	cmp	r3, #5
    ed2a:	d022      	beq.n	ed72 <hci_event+0x62>
    ed2c:	d323      	bcc.n	ed76 <hci_event+0x66>
    ed2e:	3b0e      	subs	r3, #14
    ed30:	b2db      	uxtb	r3, r3
    ed32:	2b01      	cmp	r3, #1
    ed34:	d81b      	bhi.n	ed6e <hci_event+0x5e>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    ed36:	2301      	movs	r3, #1
    ed38:	f013 0f02 	tst.w	r3, #2
    ed3c:	d01d      	beq.n	ed7a <hci_event+0x6a>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ed3e:	2303      	movs	r3, #3
    ed40:	4a15      	ldr	r2, [pc, #84]	; (ed98 <hci_event+0x88>)
    ed42:	4621      	mov	r1, r4
    ed44:	7828      	ldrb	r0, [r5, #0]
    ed46:	f7ff ff67 	bl	ec18 <handle_event>
	net_buf_unref(buf);
    ed4a:	4620      	mov	r0, r4
    ed4c:	f008 fefe 	bl	17b4c <net_buf_unref>
}
    ed50:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ed52:	f640 2347 	movw	r3, #2631	; 0xa47
    ed56:	4a11      	ldr	r2, [pc, #68]	; (ed9c <hci_event+0x8c>)
    ed58:	4911      	ldr	r1, [pc, #68]	; (eda0 <hci_event+0x90>)
    ed5a:	4812      	ldr	r0, [pc, #72]	; (eda4 <hci_event+0x94>)
    ed5c:	f007 fedf 	bl	16b1e <assert_print>
    ed60:	4040      	eors	r0, r0
    ed62:	f380 8811 	msr	BASEPRI, r0
    ed66:	f04f 0003 	mov.w	r0, #3
    ed6a:	df02      	svc	2
    ed6c:	e7d5      	b.n	ed1a <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
    ed6e:	2302      	movs	r3, #2
    ed70:	e7e2      	b.n	ed38 <hci_event+0x28>
	switch (evt) {
    ed72:	2303      	movs	r3, #3
    ed74:	e7e0      	b.n	ed38 <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
    ed76:	2302      	movs	r3, #2
    ed78:	e7de      	b.n	ed38 <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ed7a:	f640 234b 	movw	r3, #2635	; 0xa4b
    ed7e:	4a07      	ldr	r2, [pc, #28]	; (ed9c <hci_event+0x8c>)
    ed80:	4909      	ldr	r1, [pc, #36]	; (eda8 <hci_event+0x98>)
    ed82:	4808      	ldr	r0, [pc, #32]	; (eda4 <hci_event+0x94>)
    ed84:	f007 fecb 	bl	16b1e <assert_print>
    ed88:	4040      	eors	r0, r0
    ed8a:	f380 8811 	msr	BASEPRI, r0
    ed8e:	f04f 0003 	mov.w	r0, #3
    ed92:	df02      	svc	2
    ed94:	e7d3      	b.n	ed3e <hci_event+0x2e>
    ed96:	bf00      	nop
    ed98:	0001b3b4 	.word	0x0001b3b4
    ed9c:	0001adac 	.word	0x0001adac
    eda0:	0001ade0 	.word	0x0001ade0
    eda4:	0001adfc 	.word	0x0001adfc
    eda8:	0001ae1c 	.word	0x0001ae1c

0000edac <hci_le_meta_event>:
{
    edac:	b510      	push	{r4, lr}
    edae:	4604      	mov	r4, r0
    edb0:	2101      	movs	r1, #1
    edb2:	300c      	adds	r0, #12
    edb4:	f008 ff0e 	bl	17bd4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    edb8:	2301      	movs	r3, #1
    edba:	4a03      	ldr	r2, [pc, #12]	; (edc8 <hci_le_meta_event+0x1c>)
    edbc:	4621      	mov	r1, r4
    edbe:	7800      	ldrb	r0, [r0, #0]
    edc0:	f7ff ff2a 	bl	ec18 <handle_event>
}
    edc4:	bd10      	pop	{r4, pc}
    edc6:	bf00      	nop
    edc8:	0001b3cc 	.word	0x0001b3cc

0000edcc <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    edcc:	b5b0      	push	{r4, r5, r7, lr}
    edce:	b082      	sub	sp, #8
    edd0:	af00      	add	r7, sp, #0
    edd2:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    edd4:	4826      	ldr	r0, [pc, #152]	; (ee70 <rx_queue_put+0xa4>)
    edd6:	f008 fe87 	bl	17ae8 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    edda:	4926      	ldr	r1, [pc, #152]	; (ee74 <rx_queue_put+0xa8>)
    eddc:	4826      	ldr	r0, [pc, #152]	; (ee78 <rx_queue_put+0xac>)
    edde:	f00a fbef 	bl	195c0 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    ede2:	2800      	cmp	r0, #0
    ede4:	db02      	blt.n	edec <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
    ede6:	3708      	adds	r7, #8
    ede8:	46bd      	mov	sp, r7
    edea:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
    edec:	466c      	mov	r4, sp
    edee:	b088      	sub	sp, #32
    edf0:	466b      	mov	r3, sp
    edf2:	f113 0210 	adds.w	r2, r3, #16
    edf6:	d034      	beq.n	ee62 <rx_queue_put+0x96>
    edf8:	2110      	movs	r1, #16
    edfa:	b16a      	cbz	r2, ee18 <rx_queue_put+0x4c>
    edfc:	468c      	mov	ip, r1
    edfe:	2904      	cmp	r1, #4
    ee00:	dd01      	ble.n	ee06 <rx_queue_put+0x3a>
    ee02:	4d1e      	ldr	r5, [pc, #120]	; (ee7c <rx_queue_put+0xb0>)
    ee04:	615d      	str	r5, [r3, #20]
    ee06:	f1bc 0f08 	cmp.w	ip, #8
    ee0a:	dd01      	ble.n	ee10 <rx_queue_put+0x44>
    ee0c:	4d1c      	ldr	r5, [pc, #112]	; (ee80 <rx_queue_put+0xb4>)
    ee0e:	619d      	str	r5, [r3, #24]
    ee10:	f1bc 0f0c 	cmp.w	ip, #12
    ee14:	dd00      	ble.n	ee18 <rx_queue_put+0x4c>
    ee16:	61d8      	str	r0, [r3, #28]
    ee18:	290f      	cmp	r1, #15
    ee1a:	dd25      	ble.n	ee68 <rx_queue_put+0x9c>
    ee1c:	f04f 0c10 	mov.w	ip, #16
    ee20:	b13a      	cbz	r2, ee32 <rx_queue_put+0x66>
    ee22:	2104      	movs	r1, #4
    ee24:	7139      	strb	r1, [r7, #4]
    ee26:	2100      	movs	r1, #0
    ee28:	7179      	strb	r1, [r7, #5]
    ee2a:	71b9      	strb	r1, [r7, #6]
    ee2c:	71f9      	strb	r1, [r7, #7]
    ee2e:	6878      	ldr	r0, [r7, #4]
    ee30:	6118      	str	r0, [r3, #16]
    ee32:	2100      	movs	r1, #0
    ee34:	f36f 0100 	bfc	r1, #0, #1
    ee38:	f36f 0141 	bfc	r1, #1, #1
    ee3c:	f36f 0182 	bfc	r1, #2, #1
    ee40:	f36f 01c5 	bfc	r1, #3, #3
    ee44:	2301      	movs	r3, #1
    ee46:	f363 1188 	bfi	r1, r3, #6, #3
    ee4a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    ee4e:	f36c 2153 	bfi	r1, ip, #9, #11
    ee52:	f36f 511f 	bfc	r1, #20, #12
    ee56:	2300      	movs	r3, #0
    ee58:	480a      	ldr	r0, [pc, #40]	; (ee84 <rx_queue_put+0xb8>)
    ee5a:	f7fd f805 	bl	be68 <z_impl_z_log_msg_static_create>
    ee5e:	46a5      	mov	sp, r4
}
    ee60:	e7c1      	b.n	ede6 <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
    ee62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ee66:	e7c8      	b.n	edfa <rx_queue_put+0x2e>
    ee68:	f06f 0c1b 	mvn.w	ip, #27
    ee6c:	e7d8      	b.n	ee20 <rx_queue_put+0x54>
    ee6e:	bf00      	nop
    ee70:	200002a4 	.word	0x200002a4
    ee74:	200002f0 	.word	0x200002f0
    ee78:	200018d0 	.word	0x200018d0
    ee7c:	0001ae4c 	.word	0x0001ae4c
    ee80:	0001b2fc 	.word	0x0001b2fc
    ee84:	0001a0bc 	.word	0x0001a0bc

0000ee88 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    ee88:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee8a:	b083      	sub	sp, #12
    ee8c:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    ee8e:	484d      	ldr	r0, [pc, #308]	; (efc4 <rx_work_handler+0x13c>)
    ee90:	f008 fe40 	bl	17b14 <net_buf_slist_get>
	if (!buf) {
    ee94:	2800      	cmp	r0, #0
    ee96:	d04a      	beq.n	ef2e <rx_work_handler+0xa6>
    ee98:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ee9a:	7e00      	ldrb	r0, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    ee9c:	2801      	cmp	r0, #1
    ee9e:	d049      	beq.n	ef34 <rx_work_handler+0xac>
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eea0:	466d      	mov	r5, sp
    eea2:	b088      	sub	sp, #32
    eea4:	466b      	mov	r3, sp
    eea6:	f113 0210 	adds.w	r2, r3, #16
    eeaa:	d047      	beq.n	ef3c <rx_work_handler+0xb4>
    eeac:	2110      	movs	r1, #16
    eeae:	b16a      	cbz	r2, eecc <rx_work_handler+0x44>
    eeb0:	468c      	mov	ip, r1
    eeb2:	2904      	cmp	r1, #4
    eeb4:	dd01      	ble.n	eeba <rx_work_handler+0x32>
    eeb6:	4e44      	ldr	r6, [pc, #272]	; (efc8 <rx_work_handler+0x140>)
    eeb8:	615e      	str	r6, [r3, #20]
    eeba:	f1bc 0f08 	cmp.w	ip, #8
    eebe:	dd01      	ble.n	eec4 <rx_work_handler+0x3c>
    eec0:	4e42      	ldr	r6, [pc, #264]	; (efcc <rx_work_handler+0x144>)
    eec2:	619e      	str	r6, [r3, #24]
    eec4:	f1bc 0f0c 	cmp.w	ip, #12
    eec8:	dd00      	ble.n	eecc <rx_work_handler+0x44>
    eeca:	61d8      	str	r0, [r3, #28]
    eecc:	290f      	cmp	r1, #15
    eece:	dd38      	ble.n	ef42 <rx_work_handler+0xba>
    eed0:	f04f 0c10 	mov.w	ip, #16
    eed4:	b13a      	cbz	r2, eee6 <rx_work_handler+0x5e>
    eed6:	2104      	movs	r1, #4
    eed8:	7139      	strb	r1, [r7, #4]
    eeda:	2100      	movs	r1, #0
    eedc:	7179      	strb	r1, [r7, #5]
    eede:	71b9      	strb	r1, [r7, #6]
    eee0:	71f9      	strb	r1, [r7, #7]
    eee2:	6878      	ldr	r0, [r7, #4]
    eee4:	6118      	str	r0, [r3, #16]
    eee6:	2100      	movs	r1, #0
    eee8:	f36f 0100 	bfc	r1, #0, #1
    eeec:	f36f 0141 	bfc	r1, #1, #1
    eef0:	f36f 0182 	bfc	r1, #2, #1
    eef4:	f36f 01c5 	bfc	r1, #3, #3
    eef8:	2301      	movs	r3, #1
    eefa:	f363 1188 	bfi	r1, r3, #6, #3
    eefe:	f3cc 030a 	ubfx	r3, ip, #0, #11
    ef02:	f363 2153 	bfi	r1, r3, #9, #11
    ef06:	f36f 511f 	bfc	r1, #20, #12
    ef0a:	2300      	movs	r3, #0
    ef0c:	4830      	ldr	r0, [pc, #192]	; (efd0 <rx_work_handler+0x148>)
    ef0e:	f7fc ffab 	bl	be68 <z_impl_z_log_msg_static_create>
    ef12:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    ef14:	4620      	mov	r0, r4
    ef16:	f008 fe19 	bl	17b4c <net_buf_unref>
	return list->head;
    ef1a:	4b2e      	ldr	r3, [pc, #184]	; (efd4 <rx_work_handler+0x14c>)
    ef1c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    ef20:	b12b      	cbz	r3, ef2e <rx_work_handler+0xa6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ef22:	492d      	ldr	r1, [pc, #180]	; (efd8 <rx_work_handler+0x150>)
    ef24:	482d      	ldr	r0, [pc, #180]	; (efdc <rx_work_handler+0x154>)
    ef26:	f00a fb4b 	bl	195c0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    ef2a:	2800      	cmp	r0, #0
    ef2c:	db0c      	blt.n	ef48 <rx_work_handler+0xc0>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    ef2e:	370c      	adds	r7, #12
    ef30:	46bd      	mov	sp, r7
    ef32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hci_event(buf);
    ef34:	4620      	mov	r0, r4
    ef36:	f7ff feeb 	bl	ed10 <hci_event>
		break;
    ef3a:	e7ee      	b.n	ef1a <rx_work_handler+0x92>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ef3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ef40:	e7b5      	b.n	eeae <rx_work_handler+0x26>
    ef42:	f06f 0c1b 	mvn.w	ip, #27
    ef46:	e7c5      	b.n	eed4 <rx_work_handler+0x4c>
			LOG_ERR("Could not submit rx_work: %d", err);
    ef48:	466d      	mov	r5, sp
    ef4a:	b088      	sub	sp, #32
    ef4c:	466b      	mov	r3, sp
    ef4e:	f113 0210 	adds.w	r2, r3, #16
    ef52:	d031      	beq.n	efb8 <rx_work_handler+0x130>
    ef54:	2110      	movs	r1, #16
    ef56:	b15a      	cbz	r2, ef70 <rx_work_handler+0xe8>
    ef58:	460c      	mov	r4, r1
    ef5a:	2904      	cmp	r1, #4
    ef5c:	dd01      	ble.n	ef62 <rx_work_handler+0xda>
    ef5e:	4e20      	ldr	r6, [pc, #128]	; (efe0 <rx_work_handler+0x158>)
    ef60:	615e      	str	r6, [r3, #20]
    ef62:	2c08      	cmp	r4, #8
    ef64:	dd01      	ble.n	ef6a <rx_work_handler+0xe2>
    ef66:	4e19      	ldr	r6, [pc, #100]	; (efcc <rx_work_handler+0x144>)
    ef68:	619e      	str	r6, [r3, #24]
    ef6a:	2c0c      	cmp	r4, #12
    ef6c:	dd00      	ble.n	ef70 <rx_work_handler+0xe8>
    ef6e:	61d8      	str	r0, [r3, #28]
    ef70:	290f      	cmp	r1, #15
    ef72:	dd24      	ble.n	efbe <rx_work_handler+0x136>
    ef74:	2410      	movs	r4, #16
    ef76:	b13a      	cbz	r2, ef88 <rx_work_handler+0x100>
    ef78:	2104      	movs	r1, #4
    ef7a:	7139      	strb	r1, [r7, #4]
    ef7c:	2100      	movs	r1, #0
    ef7e:	7179      	strb	r1, [r7, #5]
    ef80:	71b9      	strb	r1, [r7, #6]
    ef82:	71f9      	strb	r1, [r7, #7]
    ef84:	6878      	ldr	r0, [r7, #4]
    ef86:	6118      	str	r0, [r3, #16]
    ef88:	2100      	movs	r1, #0
    ef8a:	f36f 0100 	bfc	r1, #0, #1
    ef8e:	f36f 0141 	bfc	r1, #1, #1
    ef92:	f36f 0182 	bfc	r1, #2, #1
    ef96:	f36f 01c5 	bfc	r1, #3, #3
    ef9a:	2301      	movs	r3, #1
    ef9c:	f363 1188 	bfi	r1, r3, #6, #3
    efa0:	f3c4 030a 	ubfx	r3, r4, #0, #11
    efa4:	f363 2153 	bfi	r1, r3, #9, #11
    efa8:	f36f 511f 	bfc	r1, #20, #12
    efac:	2300      	movs	r3, #0
    efae:	4808      	ldr	r0, [pc, #32]	; (efd0 <rx_work_handler+0x148>)
    efb0:	f7fc ff5a 	bl	be68 <z_impl_z_log_msg_static_create>
    efb4:	46ad      	mov	sp, r5
    efb6:	e7ba      	b.n	ef2e <rx_work_handler+0xa6>
    efb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    efbc:	e7cb      	b.n	ef56 <rx_work_handler+0xce>
    efbe:	f06f 041b 	mvn.w	r4, #27
    efc2:	e7d8      	b.n	ef76 <rx_work_handler+0xee>
    efc4:	200002a4 	.word	0x200002a4
    efc8:	0001ae70 	.word	0x0001ae70
    efcc:	0001b2ec 	.word	0x0001b2ec
    efd0:	0001a0bc 	.word	0x0001a0bc
    efd4:	200001a0 	.word	0x200001a0
    efd8:	200002f0 	.word	0x200002f0
    efdc:	200018d0 	.word	0x200018d0
    efe0:	0001ae4c 	.word	0x0001ae4c

0000efe4 <bt_dev_show_info>:
{
    efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efe8:	b082      	sub	sp, #8
    efea:	af00      	add	r7, sp, #0
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    efec:	4b8f      	ldr	r3, [pc, #572]	; (f22c <bt_dev_show_info+0x248>)
    efee:	79db      	ldrb	r3, [r3, #7]
    eff0:	2b01      	cmp	r3, #1
    eff2:	d936      	bls.n	f062 <bt_dev_show_info+0x7e>
    eff4:	f8df 8238 	ldr.w	r8, [pc, #568]	; f230 <bt_dev_show_info+0x24c>
    eff8:	488c      	ldr	r0, [pc, #560]	; (f22c <bt_dev_show_info+0x248>)
    effa:	f7ff fb19 	bl	e630 <bt_addr_le_str>
    effe:	466d      	mov	r5, sp
    f000:	2301      	movs	r3, #1
    f002:	713b      	strb	r3, [r7, #4]
    f004:	2303      	movs	r3, #3
    f006:	717b      	strb	r3, [r7, #5]
    f008:	2302      	movs	r3, #2
    f00a:	71bb      	strb	r3, [r7, #6]
    f00c:	2304      	movs	r3, #4
    f00e:	71fb      	strb	r3, [r7, #7]
    f010:	b08a      	sub	sp, #40	; 0x28
    f012:	466e      	mov	r6, sp
    f014:	f116 0210 	adds.w	r2, r6, #16
    f018:	d026      	beq.n	f068 <bt_dev_show_info+0x84>
    f01a:	f04f 0c18 	mov.w	ip, #24
    f01e:	b14a      	cbz	r2, f034 <bt_dev_show_info+0x50>
    f020:	4663      	mov	r3, ip
    f022:	f1bc 0f04 	cmp.w	ip, #4
    f026:	dd01      	ble.n	f02c <bt_dev_show_info+0x48>
    f028:	4982      	ldr	r1, [pc, #520]	; (f234 <bt_dev_show_info+0x250>)
    f02a:	6171      	str	r1, [r6, #20]
    f02c:	2b08      	cmp	r3, #8
    f02e:	dd01      	ble.n	f034 <bt_dev_show_info+0x50>
    f030:	4b81      	ldr	r3, [pc, #516]	; (f238 <bt_dev_show_info+0x254>)
    f032:	61b3      	str	r3, [r6, #24]
    f034:	2301      	movs	r3, #1
    f036:	703b      	strb	r3, [r7, #0]
    f038:	2303      	movs	r3, #3
    f03a:	707b      	strb	r3, [r7, #1]
    f03c:	b122      	cbz	r2, f048 <bt_dev_show_info+0x64>
    f03e:	f1bc 0f0c 	cmp.w	ip, #12
    f042:	dd01      	ble.n	f048 <bt_dev_show_info+0x64>
    f044:	f8c6 801c 	str.w	r8, [r6, #28]
    f048:	2302      	movs	r3, #2
    f04a:	70bb      	strb	r3, [r7, #2]
    f04c:	2304      	movs	r3, #4
    f04e:	70fb      	strb	r3, [r7, #3]
    f050:	b1ba      	cbz	r2, f082 <bt_dev_show_info+0x9e>
    f052:	f1bc 0f10 	cmp.w	ip, #16
    f056:	dd00      	ble.n	f05a <bt_dev_show_info+0x76>
    f058:	6230      	str	r0, [r6, #32]
    f05a:	f106 0324 	add.w	r3, r6, #36	; 0x24
    f05e:	2100      	movs	r1, #0
    f060:	e00d      	b.n	f07e <bt_dev_show_info+0x9a>
    f062:	f8df 81d8 	ldr.w	r8, [pc, #472]	; f23c <bt_dev_show_info+0x258>
    f066:	e7c7      	b.n	eff8 <bt_dev_show_info+0x14>
    f068:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    f06c:	e7d7      	b.n	f01e <bt_dev_show_info+0x3a>
    f06e:	f101 0008 	add.w	r0, r1, #8
    f072:	4438      	add	r0, r7
    f074:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    f078:	f803 0b01 	strb.w	r0, [r3], #1
    f07c:	3101      	adds	r1, #1
    f07e:	2903      	cmp	r1, #3
    f080:	d9f5      	bls.n	f06e <bt_dev_show_info+0x8a>
    f082:	f1bc 0f17 	cmp.w	ip, #23
    f086:	dd23      	ble.n	f0d0 <bt_dev_show_info+0xec>
    f088:	2318      	movs	r3, #24
    f08a:	b142      	cbz	r2, f09e <bt_dev_show_info+0xba>
    f08c:	2105      	movs	r1, #5
    f08e:	7139      	strb	r1, [r7, #4]
    f090:	2100      	movs	r1, #0
    f092:	7179      	strb	r1, [r7, #5]
    f094:	71b9      	strb	r1, [r7, #6]
    f096:	2102      	movs	r1, #2
    f098:	71f9      	strb	r1, [r7, #7]
    f09a:	6878      	ldr	r0, [r7, #4]
    f09c:	6130      	str	r0, [r6, #16]
    f09e:	2100      	movs	r1, #0
    f0a0:	f36f 0100 	bfc	r1, #0, #1
    f0a4:	f36f 0141 	bfc	r1, #1, #1
    f0a8:	f36f 0182 	bfc	r1, #2, #1
    f0ac:	f36f 01c5 	bfc	r1, #3, #3
    f0b0:	2003      	movs	r0, #3
    f0b2:	f360 1188 	bfi	r1, r0, #6, #3
    f0b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f0ba:	f363 2153 	bfi	r1, r3, #9, #11
    f0be:	f36f 511f 	bfc	r1, #20, #12
    f0c2:	2300      	movs	r3, #0
    f0c4:	485e      	ldr	r0, [pc, #376]	; (f240 <bt_dev_show_info+0x25c>)
    f0c6:	f7fc fecf 	bl	be68 <z_impl_z_log_msg_static_create>
    f0ca:	46ad      	mov	sp, r5
	for (i = 1; i < bt_dev.id_count; i++) {
    f0cc:	2501      	movs	r5, #1
    f0ce:	e031      	b.n	f134 <bt_dev_show_info+0x150>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    f0d0:	f06f 031b 	mvn.w	r3, #27
    f0d4:	e7d9      	b.n	f08a <bt_dev_show_info+0xa6>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    f0d6:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    f0da:	e041      	b.n	f160 <bt_dev_show_info+0x17c>
    f0dc:	2302      	movs	r3, #2
    f0de:	703b      	strb	r3, [r7, #0]
    f0e0:	2304      	movs	r3, #4
    f0e2:	707b      	strb	r3, [r7, #1]
    f0e4:	2a00      	cmp	r2, #0
    f0e6:	d14f      	bne.n	f188 <bt_dev_show_info+0x1a4>
    f0e8:	f1bc 0f15 	cmp.w	ip, #21
    f0ec:	dd5f      	ble.n	f1ae <bt_dev_show_info+0x1ca>
    f0ee:	2316      	movs	r3, #22
    f0f0:	b142      	cbz	r2, f104 <bt_dev_show_info+0x120>
    f0f2:	2005      	movs	r0, #5
    f0f4:	7138      	strb	r0, [r7, #4]
    f0f6:	2000      	movs	r0, #0
    f0f8:	7178      	strb	r0, [r7, #5]
    f0fa:	71b8      	strb	r0, [r7, #6]
    f0fc:	2001      	movs	r0, #1
    f0fe:	71f8      	strb	r0, [r7, #7]
    f100:	6878      	ldr	r0, [r7, #4]
    f102:	6108      	str	r0, [r1, #16]
    f104:	f36f 0400 	bfc	r4, #0, #1
    f108:	f36f 0441 	bfc	r4, #1, #1
    f10c:	f36f 0482 	bfc	r4, #2, #1
    f110:	f36f 04c5 	bfc	r4, #3, #3
    f114:	2103      	movs	r1, #3
    f116:	f361 1488 	bfi	r4, r1, #6, #3
    f11a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f11e:	f363 2453 	bfi	r4, r3, #9, #11
    f122:	f36f 541f 	bfc	r4, #20, #12
    f126:	2300      	movs	r3, #0
    f128:	4621      	mov	r1, r4
    f12a:	4845      	ldr	r0, [pc, #276]	; (f240 <bt_dev_show_info+0x25c>)
    f12c:	f7fc fe9c 	bl	be68 <z_impl_z_log_msg_static_create>
    f130:	46b5      	mov	sp, r6
	for (i = 1; i < bt_dev.id_count; i++) {
    f132:	3501      	adds	r5, #1
    f134:	4b3d      	ldr	r3, [pc, #244]	; (f22c <bt_dev_show_info+0x248>)
    f136:	79db      	ldrb	r3, [r3, #7]
    f138:	42ab      	cmp	r3, r5
    f13a:	dd3b      	ble.n	f1b4 <bt_dev_show_info+0x1d0>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    f13c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    f140:	4b3a      	ldr	r3, [pc, #232]	; (f22c <bt_dev_show_info+0x248>)
    f142:	4418      	add	r0, r3
    f144:	f7ff fa74 	bl	e630 <bt_addr_le_str>
    f148:	466e      	mov	r6, sp
    f14a:	2302      	movs	r3, #2
    f14c:	713b      	strb	r3, [r7, #4]
    f14e:	2304      	movs	r3, #4
    f150:	717b      	strb	r3, [r7, #5]
    f152:	b08a      	sub	sp, #40	; 0x28
    f154:	4669      	mov	r1, sp
    f156:	f111 0210 	adds.w	r2, r1, #16
    f15a:	d0bc      	beq.n	f0d6 <bt_dev_show_info+0xf2>
    f15c:	f04f 0c16 	mov.w	ip, #22
    f160:	2a00      	cmp	r2, #0
    f162:	d0bb      	beq.n	f0dc <bt_dev_show_info+0xf8>
    f164:	4663      	mov	r3, ip
    f166:	f1bc 0f04 	cmp.w	ip, #4
    f16a:	dd03      	ble.n	f174 <bt_dev_show_info+0x190>
    f16c:	f8df e0d4 	ldr.w	lr, [pc, #212]	; f244 <bt_dev_show_info+0x260>
    f170:	f8c1 e014 	str.w	lr, [r1, #20]
    f174:	2b08      	cmp	r3, #8
    f176:	dd03      	ble.n	f180 <bt_dev_show_info+0x19c>
    f178:	f8df e0bc 	ldr.w	lr, [pc, #188]	; f238 <bt_dev_show_info+0x254>
    f17c:	f8c1 e018 	str.w	lr, [r1, #24]
    f180:	2b0c      	cmp	r3, #12
    f182:	ddab      	ble.n	f0dc <bt_dev_show_info+0xf8>
    f184:	61cd      	str	r5, [r1, #28]
    f186:	e7a9      	b.n	f0dc <bt_dev_show_info+0xf8>
    f188:	f1bc 0f10 	cmp.w	ip, #16
    f18c:	dd00      	ble.n	f190 <bt_dev_show_info+0x1ac>
    f18e:	6208      	str	r0, [r1, #32]
    f190:	f101 0324 	add.w	r3, r1, #36	; 0x24
    f194:	2000      	movs	r0, #0
    f196:	e007      	b.n	f1a8 <bt_dev_show_info+0x1c4>
    f198:	f100 0e08 	add.w	lr, r0, #8
    f19c:	44be      	add	lr, r7
    f19e:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    f1a2:	f803 eb01 	strb.w	lr, [r3], #1
    f1a6:	3001      	adds	r0, #1
    f1a8:	2801      	cmp	r0, #1
    f1aa:	d9f5      	bls.n	f198 <bt_dev_show_info+0x1b4>
    f1ac:	e79c      	b.n	f0e8 <bt_dev_show_info+0x104>
    f1ae:	f06f 031b 	mvn.w	r3, #27
    f1b2:	e79d      	b.n	f0f0 <bt_dev_show_info+0x10c>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    f1b4:	4c1d      	ldr	r4, [pc, #116]	; (f22c <bt_dev_show_info+0x248>)
    f1b6:	f894 8070 	ldrb.w	r8, [r4, #112]	; 0x70
    f1ba:	4640      	mov	r0, r8
    f1bc:	f7ff fab8 	bl	e730 <ver_str>
    f1c0:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
    f1c4:	f8b4 c076 	ldrh.w	ip, [r4, #118]	; 0x76
    f1c8:	466d      	mov	r5, sp
    f1ca:	2301      	movs	r3, #1
    f1cc:	713b      	strb	r3, [r7, #4]
    f1ce:	2303      	movs	r3, #3
    f1d0:	717b      	strb	r3, [r7, #5]
    f1d2:	b08c      	sub	sp, #48	; 0x30
    f1d4:	466c      	mov	r4, sp
    f1d6:	f114 0210 	adds.w	r2, r4, #16
    f1da:	d024      	beq.n	f226 <bt_dev_show_info+0x242>
    f1dc:	261e      	movs	r6, #30
    f1de:	b152      	cbz	r2, f1f6 <bt_dev_show_info+0x212>
    f1e0:	4633      	mov	r3, r6
    f1e2:	2e04      	cmp	r6, #4
    f1e4:	dd03      	ble.n	f1ee <bt_dev_show_info+0x20a>
    f1e6:	f8df e060 	ldr.w	lr, [pc, #96]	; f248 <bt_dev_show_info+0x264>
    f1ea:	f8c4 e014 	str.w	lr, [r4, #20]
    f1ee:	2b08      	cmp	r3, #8
    f1f0:	dd01      	ble.n	f1f6 <bt_dev_show_info+0x212>
    f1f2:	4b11      	ldr	r3, [pc, #68]	; (f238 <bt_dev_show_info+0x254>)
    f1f4:	61a3      	str	r3, [r4, #24]
    f1f6:	2301      	movs	r3, #1
    f1f8:	703b      	strb	r3, [r7, #0]
    f1fa:	2303      	movs	r3, #3
    f1fc:	707b      	strb	r3, [r7, #1]
    f1fe:	b37a      	cbz	r2, f260 <bt_dev_show_info+0x27c>
    f200:	4633      	mov	r3, r6
    f202:	2e0c      	cmp	r6, #12
    f204:	dd00      	ble.n	f208 <bt_dev_show_info+0x224>
    f206:	61e0      	str	r0, [r4, #28]
    f208:	2b10      	cmp	r3, #16
    f20a:	dd01      	ble.n	f210 <bt_dev_show_info+0x22c>
    f20c:	f8c4 8020 	str.w	r8, [r4, #32]
    f210:	2b14      	cmp	r3, #20
    f212:	dd00      	ble.n	f216 <bt_dev_show_info+0x232>
    f214:	6261      	str	r1, [r4, #36]	; 0x24
    f216:	2b18      	cmp	r3, #24
    f218:	dd01      	ble.n	f21e <bt_dev_show_info+0x23a>
    f21a:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
    f21e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    f222:	2100      	movs	r1, #0
    f224:	e01a      	b.n	f25c <bt_dev_show_info+0x278>
    f226:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    f22a:	e7d8      	b.n	f1de <bt_dev_show_info+0x1fa>
    f22c:	200001a0 	.word	0x200001a0
    f230:	0001ae88 	.word	0x0001ae88
    f234:	0001ae8c 	.word	0x0001ae8c
    f238:	0001b2c4 	.word	0x0001b2c4
    f23c:	0001a3b8 	.word	0x0001a3b8
    f240:	0001a0bc 	.word	0x0001a0bc
    f244:	0001aea0 	.word	0x0001aea0
    f248:	0001aeb8 	.word	0x0001aeb8
    f24c:	f101 0008 	add.w	r0, r1, #8
    f250:	4438      	add	r0, r7
    f252:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    f256:	f803 0b01 	strb.w	r0, [r3], #1
    f25a:	3101      	adds	r1, #1
    f25c:	2901      	cmp	r1, #1
    f25e:	d9f5      	bls.n	f24c <bt_dev_show_info+0x268>
    f260:	2e1d      	cmp	r6, #29
    f262:	dd51      	ble.n	f308 <bt_dev_show_info+0x324>
    f264:	231e      	movs	r3, #30
    f266:	b142      	cbz	r2, f27a <bt_dev_show_info+0x296>
    f268:	2107      	movs	r1, #7
    f26a:	7139      	strb	r1, [r7, #4]
    f26c:	2100      	movs	r1, #0
    f26e:	7179      	strb	r1, [r7, #5]
    f270:	71b9      	strb	r1, [r7, #6]
    f272:	2101      	movs	r1, #1
    f274:	71f9      	strb	r1, [r7, #7]
    f276:	6878      	ldr	r0, [r7, #4]
    f278:	6120      	str	r0, [r4, #16]
    f27a:	2100      	movs	r1, #0
    f27c:	f36f 0100 	bfc	r1, #0, #1
    f280:	f36f 0141 	bfc	r1, #1, #1
    f284:	f36f 0182 	bfc	r1, #2, #1
    f288:	f36f 01c5 	bfc	r1, #3, #3
    f28c:	2403      	movs	r4, #3
    f28e:	f364 1188 	bfi	r1, r4, #6, #3
    f292:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f296:	f363 2153 	bfi	r1, r3, #9, #11
    f29a:	f36f 511f 	bfc	r1, #20, #12
    f29e:	2300      	movs	r3, #0
    f2a0:	4836      	ldr	r0, [pc, #216]	; (f37c <bt_dev_show_info+0x398>)
    f2a2:	f7fc fde1 	bl	be68 <z_impl_z_log_msg_static_create>
    f2a6:	46ad      	mov	sp, r5
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    f2a8:	4d35      	ldr	r5, [pc, #212]	; (f380 <bt_dev_show_info+0x39c>)
    f2aa:	f895 6071 	ldrb.w	r6, [r5, #113]	; 0x71
    f2ae:	4630      	mov	r0, r6
    f2b0:	f7ff fa3e 	bl	e730 <ver_str>
    f2b4:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
    f2b8:	2301      	movs	r3, #1
    f2ba:	713b      	strb	r3, [r7, #4]
    f2bc:	717c      	strb	r4, [r7, #5]
    f2be:	b08c      	sub	sp, #48	; 0x30
    f2c0:	466c      	mov	r4, sp
    f2c2:	f114 0210 	adds.w	r2, r4, #16
    f2c6:	d022      	beq.n	f30e <bt_dev_show_info+0x32a>
    f2c8:	251a      	movs	r5, #26
    f2ca:	b152      	cbz	r2, f2e2 <bt_dev_show_info+0x2fe>
    f2cc:	462b      	mov	r3, r5
    f2ce:	2d04      	cmp	r5, #4
    f2d0:	dd03      	ble.n	f2da <bt_dev_show_info+0x2f6>
    f2d2:	f8df c0b0 	ldr.w	ip, [pc, #176]	; f384 <bt_dev_show_info+0x3a0>
    f2d6:	f8c4 c014 	str.w	ip, [r4, #20]
    f2da:	2b08      	cmp	r3, #8
    f2dc:	dd01      	ble.n	f2e2 <bt_dev_show_info+0x2fe>
    f2de:	4b2a      	ldr	r3, [pc, #168]	; (f388 <bt_dev_show_info+0x3a4>)
    f2e0:	61a3      	str	r3, [r4, #24]
    f2e2:	2301      	movs	r3, #1
    f2e4:	703b      	strb	r3, [r7, #0]
    f2e6:	2303      	movs	r3, #3
    f2e8:	707b      	strb	r3, [r7, #1]
    f2ea:	b1ea      	cbz	r2, f328 <bt_dev_show_info+0x344>
    f2ec:	462b      	mov	r3, r5
    f2ee:	2d0c      	cmp	r5, #12
    f2f0:	dd00      	ble.n	f2f4 <bt_dev_show_info+0x310>
    f2f2:	61e0      	str	r0, [r4, #28]
    f2f4:	2b10      	cmp	r3, #16
    f2f6:	dd00      	ble.n	f2fa <bt_dev_show_info+0x316>
    f2f8:	6226      	str	r6, [r4, #32]
    f2fa:	2b14      	cmp	r3, #20
    f2fc:	dd00      	ble.n	f300 <bt_dev_show_info+0x31c>
    f2fe:	6261      	str	r1, [r4, #36]	; 0x24
    f300:	f104 0328 	add.w	r3, r4, #40	; 0x28
    f304:	2100      	movs	r1, #0
    f306:	e00d      	b.n	f324 <bt_dev_show_info+0x340>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    f308:	f06f 031b 	mvn.w	r3, #27
    f30c:	e7ab      	b.n	f266 <bt_dev_show_info+0x282>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    f30e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    f312:	e7da      	b.n	f2ca <bt_dev_show_info+0x2e6>
    f314:	f101 0008 	add.w	r0, r1, #8
    f318:	4438      	add	r0, r7
    f31a:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    f31e:	f803 0b01 	strb.w	r0, [r3], #1
    f322:	3101      	adds	r1, #1
    f324:	2901      	cmp	r1, #1
    f326:	d9f5      	bls.n	f314 <bt_dev_show_info+0x330>
    f328:	2d19      	cmp	r5, #25
    f32a:	dd24      	ble.n	f376 <bt_dev_show_info+0x392>
    f32c:	231a      	movs	r3, #26
    f32e:	b142      	cbz	r2, f342 <bt_dev_show_info+0x35e>
    f330:	2106      	movs	r1, #6
    f332:	7139      	strb	r1, [r7, #4]
    f334:	2100      	movs	r1, #0
    f336:	7179      	strb	r1, [r7, #5]
    f338:	71b9      	strb	r1, [r7, #6]
    f33a:	2101      	movs	r1, #1
    f33c:	71f9      	strb	r1, [r7, #7]
    f33e:	6878      	ldr	r0, [r7, #4]
    f340:	6120      	str	r0, [r4, #16]
    f342:	2100      	movs	r1, #0
    f344:	f36f 0100 	bfc	r1, #0, #1
    f348:	f36f 0141 	bfc	r1, #1, #1
    f34c:	f36f 0182 	bfc	r1, #2, #1
    f350:	f36f 01c5 	bfc	r1, #3, #3
    f354:	2003      	movs	r0, #3
    f356:	f360 1188 	bfi	r1, r0, #6, #3
    f35a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f35e:	f363 2153 	bfi	r1, r3, #9, #11
    f362:	f36f 511f 	bfc	r1, #20, #12
    f366:	2300      	movs	r3, #0
    f368:	4804      	ldr	r0, [pc, #16]	; (f37c <bt_dev_show_info+0x398>)
    f36a:	f7fc fd7d 	bl	be68 <z_impl_z_log_msg_static_create>
}
    f36e:	3708      	adds	r7, #8
    f370:	46bd      	mov	sp, r7
    f372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    f376:	f06f 031b 	mvn.w	r3, #27
    f37a:	e7d8      	b.n	f32e <bt_dev_show_info+0x34a>
    f37c:	0001a0bc 	.word	0x0001a0bc
    f380:	200001a0 	.word	0x200001a0
    f384:	0001aefc 	.word	0x0001aefc
    f388:	0001b2c4 	.word	0x0001b2c4

0000f38c <bt_hci_cmd_state_set_init>:
{
    f38c:	b510      	push	{r4, lr}
    f38e:	460c      	mov	r4, r1
	state->target = target;
    f390:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    f392:	604b      	str	r3, [r1, #4]
	state->val = val;
    f394:	f89d 3008 	ldrb.w	r3, [sp, #8]
    f398:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    f39a:	f008 faf7 	bl	1798c <net_buf_id>
    f39e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f3a2:	4b02      	ldr	r3, [pc, #8]	; (f3ac <bt_hci_cmd_state_set_init+0x20>)
    f3a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f3a8:	605c      	str	r4, [r3, #4]
}
    f3aa:	bd10      	pop	{r4, pc}
    f3ac:	20001fe4 	.word	0x20001fe4

0000f3b0 <bt_hci_cmd_create>:
{
    f3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f3b4:	4606      	mov	r6, r0
    f3b6:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
    f3b8:	f04f 32ff 	mov.w	r2, #4294967295
    f3bc:	f04f 33ff 	mov.w	r3, #4294967295
    f3c0:	4818      	ldr	r0, [pc, #96]	; (f424 <bt_hci_cmd_create+0x74>)
    f3c2:	f008 fb86 	bl	17ad2 <net_buf_alloc_fixed>
    f3c6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    f3c8:	f100 090c 	add.w	r9, r0, #12
    f3cc:	2100      	movs	r1, #0
    f3ce:	4648      	mov	r0, r9
    f3d0:	f008 fbe3 	bl	17b9a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f3d4:	f04f 0800 	mov.w	r8, #0
    f3d8:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    f3dc:	4620      	mov	r0, r4
    f3de:	f008 fad5 	bl	1798c <net_buf_id>
    f3e2:	4d11      	ldr	r5, [pc, #68]	; (f428 <bt_hci_cmd_create+0x78>)
    f3e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f3e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    f3ec:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f3ee:	4620      	mov	r0, r4
    f3f0:	f008 facc 	bl	1798c <net_buf_id>
    f3f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f3f8:	eb05 0380 	add.w	r3, r5, r0, lsl #2
    f3fc:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
    f400:	4620      	mov	r0, r4
    f402:	f008 fac3 	bl	1798c <net_buf_id>
    f406:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f40a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    f40e:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    f412:	2103      	movs	r1, #3
    f414:	4648      	mov	r0, r9
    f416:	f008 fbc4 	bl	17ba2 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    f41a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    f41c:	7087      	strb	r7, [r0, #2]
}
    f41e:	4620      	mov	r0, r4
    f420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f424:	20000480 	.word	0x20000480
    f428:	20001fe4 	.word	0x20001fe4

0000f42c <bt_hci_cmd_send_sync>:
{
    f42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f430:	b088      	sub	sp, #32
    f432:	af00      	add	r7, sp, #0
    f434:	4606      	mov	r6, r0
    f436:	4615      	mov	r5, r2
	if (!buf) {
    f438:	460c      	mov	r4, r1
    f43a:	2900      	cmp	r1, #0
    f43c:	d073      	beq.n	f526 <bt_hci_cmd_send_sync+0xfa>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f43e:	f107 0808 	add.w	r8, r7, #8
    f442:	2201      	movs	r2, #1
    f444:	2100      	movs	r1, #0
    f446:	4640      	mov	r0, r8
    f448:	f00a f832 	bl	194b0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f44c:	4620      	mov	r0, r4
    f44e:	f008 fa9d 	bl	1798c <net_buf_id>
    f452:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f456:	4b4c      	ldr	r3, [pc, #304]	; (f588 <bt_hci_cmd_send_sync+0x15c>)
    f458:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f45c:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    f460:	4620      	mov	r0, r4
    f462:	f008 fb96 	bl	17b92 <net_buf_ref>
    f466:	4601      	mov	r1, r0
    f468:	4848      	ldr	r0, [pc, #288]	; (f58c <bt_hci_cmd_send_sync+0x160>)
    f46a:	f008 fb6b 	bl	17b44 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f46e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f472:	2300      	movs	r3, #0
    f474:	4640      	mov	r0, r8
    f476:	f005 fc55 	bl	14d24 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    f47a:	4680      	mov	r8, r0
    f47c:	2800      	cmp	r0, #0
    f47e:	d15a      	bne.n	f536 <bt_hci_cmd_send_sync+0x10a>
	status = cmd(buf)->status;
    f480:	4620      	mov	r0, r4
    f482:	f008 fa83 	bl	1798c <net_buf_id>
    f486:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f48a:	4b3f      	ldr	r3, [pc, #252]	; (f588 <bt_hci_cmd_send_sync+0x15c>)
    f48c:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
    f490:	f1b8 0f00 	cmp.w	r8, #0
    f494:	d06b      	beq.n	f56e <bt_hci_cmd_send_sync+0x142>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    f496:	466d      	mov	r5, sp
    f498:	b08a      	sub	sp, #40	; 0x28
    f49a:	466b      	mov	r3, sp
    f49c:	f113 0210 	adds.w	r2, r3, #16
    f4a0:	d05c      	beq.n	f55c <bt_hci_cmd_send_sync+0x130>
    f4a2:	2114      	movs	r1, #20
    f4a4:	b19a      	cbz	r2, f4ce <bt_hci_cmd_send_sync+0xa2>
    f4a6:	4608      	mov	r0, r1
    f4a8:	2904      	cmp	r1, #4
    f4aa:	dd03      	ble.n	f4b4 <bt_hci_cmd_send_sync+0x88>
    f4ac:	f8df c0e0 	ldr.w	ip, [pc, #224]	; f590 <bt_hci_cmd_send_sync+0x164>
    f4b0:	f8c3 c014 	str.w	ip, [r3, #20]
    f4b4:	2808      	cmp	r0, #8
    f4b6:	dd03      	ble.n	f4c0 <bt_hci_cmd_send_sync+0x94>
    f4b8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; f594 <bt_hci_cmd_send_sync+0x168>
    f4bc:	f8c3 c018 	str.w	ip, [r3, #24]
    f4c0:	280c      	cmp	r0, #12
    f4c2:	dd00      	ble.n	f4c6 <bt_hci_cmd_send_sync+0x9a>
    f4c4:	61de      	str	r6, [r3, #28]
    f4c6:	2810      	cmp	r0, #16
    f4c8:	dd01      	ble.n	f4ce <bt_hci_cmd_send_sync+0xa2>
    f4ca:	f8c3 8020 	str.w	r8, [r3, #32]
    f4ce:	2913      	cmp	r1, #19
    f4d0:	dd47      	ble.n	f562 <bt_hci_cmd_send_sync+0x136>
    f4d2:	2614      	movs	r6, #20
    f4d4:	b13a      	cbz	r2, f4e6 <bt_hci_cmd_send_sync+0xba>
    f4d6:	2105      	movs	r1, #5
    f4d8:	7139      	strb	r1, [r7, #4]
    f4da:	2100      	movs	r1, #0
    f4dc:	7179      	strb	r1, [r7, #5]
    f4de:	71b9      	strb	r1, [r7, #6]
    f4e0:	71f9      	strb	r1, [r7, #7]
    f4e2:	6878      	ldr	r0, [r7, #4]
    f4e4:	6118      	str	r0, [r3, #16]
    f4e6:	2100      	movs	r1, #0
    f4e8:	f36f 0100 	bfc	r1, #0, #1
    f4ec:	f36f 0141 	bfc	r1, #1, #1
    f4f0:	f36f 0182 	bfc	r1, #2, #1
    f4f4:	f36f 01c5 	bfc	r1, #3, #3
    f4f8:	2302      	movs	r3, #2
    f4fa:	f363 1188 	bfi	r1, r3, #6, #3
    f4fe:	f3c6 030a 	ubfx	r3, r6, #0, #11
    f502:	f363 2153 	bfi	r1, r3, #9, #11
    f506:	f36f 511f 	bfc	r1, #20, #12
    f50a:	2300      	movs	r3, #0
    f50c:	4822      	ldr	r0, [pc, #136]	; (f598 <bt_hci_cmd_send_sync+0x16c>)
    f50e:	f7fc fcab 	bl	be68 <z_impl_z_log_msg_static_create>
    f512:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    f514:	4620      	mov	r0, r4
    f516:	f008 fb19 	bl	17b4c <net_buf_unref>
		switch (status) {
    f51a:	f1b8 0f09 	cmp.w	r8, #9
    f51e:	d023      	beq.n	f568 <bt_hci_cmd_send_sync+0x13c>
			return -EIO;
    f520:	f06f 0004 	mvn.w	r0, #4
    f524:	e026      	b.n	f574 <bt_hci_cmd_send_sync+0x148>
		buf = bt_hci_cmd_create(opcode, 0);
    f526:	f7ff ff43 	bl	f3b0 <bt_hci_cmd_create>
		if (!buf) {
    f52a:	4604      	mov	r4, r0
    f52c:	2800      	cmp	r0, #0
    f52e:	d186      	bne.n	f43e <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
    f530:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f534:	e01e      	b.n	f574 <bt_hci_cmd_send_sync+0x148>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    f536:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    f53a:	4a18      	ldr	r2, [pc, #96]	; (f59c <bt_hci_cmd_send_sync+0x170>)
    f53c:	4918      	ldr	r1, [pc, #96]	; (f5a0 <bt_hci_cmd_send_sync+0x174>)
    f53e:	4819      	ldr	r0, [pc, #100]	; (f5a4 <bt_hci_cmd_send_sync+0x178>)
    f540:	f007 faed 	bl	16b1e <assert_print>
    f544:	4642      	mov	r2, r8
    f546:	4631      	mov	r1, r6
    f548:	4817      	ldr	r0, [pc, #92]	; (f5a8 <bt_hci_cmd_send_sync+0x17c>)
    f54a:	f007 fae8 	bl	16b1e <assert_print>
    f54e:	4040      	eors	r0, r0
    f550:	f380 8811 	msr	BASEPRI, r0
    f554:	f04f 0003 	mov.w	r0, #3
    f558:	df02      	svc	2
    f55a:	e791      	b.n	f480 <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    f55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f560:	e7a0      	b.n	f4a4 <bt_hci_cmd_send_sync+0x78>
    f562:	f06f 061b 	mvn.w	r6, #27
    f566:	e7b5      	b.n	f4d4 <bt_hci_cmd_send_sync+0xa8>
			return -ECONNREFUSED;
    f568:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    f56c:	e002      	b.n	f574 <bt_hci_cmd_send_sync+0x148>
	if (rsp) {
    f56e:	b12d      	cbz	r5, f57c <bt_hci_cmd_send_sync+0x150>
		*rsp = buf;
    f570:	602c      	str	r4, [r5, #0]
	return 0;
    f572:	2000      	movs	r0, #0
}
    f574:	3720      	adds	r7, #32
    f576:	46bd      	mov	sp, r7
    f578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f57c:	4620      	mov	r0, r4
    f57e:	f008 fae5 	bl	17b4c <net_buf_unref>
	return 0;
    f582:	2000      	movs	r0, #0
    f584:	e7f6      	b.n	f574 <bt_hci_cmd_send_sync+0x148>
    f586:	bf00      	nop
    f588:	20001fe4 	.word	0x20001fe4
    f58c:	200002ac 	.word	0x200002ac
    f590:	0001af60 	.word	0x0001af60
    f594:	0001b348 	.word	0x0001b348
    f598:	0001a0bc 	.word	0x0001a0bc
    f59c:	0001adac 	.word	0x0001adac
    f5a0:	0001af28 	.word	0x0001af28
    f5a4:	0001adfc 	.word	0x0001adfc
    f5a8:	0001af34 	.word	0x0001af34

0000f5ac <common_init>:
{
    f5ac:	b510      	push	{r4, lr}
    f5ae:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f5b0:	4b22      	ldr	r3, [pc, #136]	; (f63c <common_init+0x90>)
    f5b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    f5b6:	689b      	ldr	r3, [r3, #8]
    f5b8:	f013 0f01 	tst.w	r3, #1
    f5bc:	d10d      	bne.n	f5da <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f5be:	aa01      	add	r2, sp, #4
    f5c0:	2100      	movs	r1, #0
    f5c2:	f640 4003 	movw	r0, #3075	; 0xc03
    f5c6:	f7ff ff31 	bl	f42c <bt_hci_cmd_send_sync>
		if (err) {
    f5ca:	4604      	mov	r4, r0
    f5cc:	b968      	cbnz	r0, f5ea <common_init+0x3e>
		hci_reset_complete(rsp);
    f5ce:	9801      	ldr	r0, [sp, #4]
    f5d0:	f7ff f8f8 	bl	e7c4 <hci_reset_complete>
		net_buf_unref(rsp);
    f5d4:	9801      	ldr	r0, [sp, #4]
    f5d6:	f008 fab9 	bl	17b4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f5da:	aa01      	add	r2, sp, #4
    f5dc:	2100      	movs	r1, #0
    f5de:	f241 0003 	movw	r0, #4099	; 0x1003
    f5e2:	f7ff ff23 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
    f5e6:	4604      	mov	r4, r0
    f5e8:	b110      	cbz	r0, f5f0 <common_init+0x44>
}
    f5ea:	4620      	mov	r0, r4
    f5ec:	b002      	add	sp, #8
    f5ee:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
    f5f0:	9801      	ldr	r0, [sp, #4]
    f5f2:	f7ff f903 	bl	e7fc <read_local_features_complete>
	net_buf_unref(rsp);
    f5f6:	9801      	ldr	r0, [sp, #4]
    f5f8:	f008 faa8 	bl	17b4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f5fc:	aa01      	add	r2, sp, #4
    f5fe:	2100      	movs	r1, #0
    f600:	f241 0001 	movw	r0, #4097	; 0x1001
    f604:	f7ff ff12 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
    f608:	4604      	mov	r4, r0
    f60a:	2800      	cmp	r0, #0
    f60c:	d1ed      	bne.n	f5ea <common_init+0x3e>
	read_local_ver_complete(rsp);
    f60e:	9801      	ldr	r0, [sp, #4]
    f610:	f7ff f86c 	bl	e6ec <read_local_ver_complete>
	net_buf_unref(rsp);
    f614:	9801      	ldr	r0, [sp, #4]
    f616:	f008 fa99 	bl	17b4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f61a:	aa01      	add	r2, sp, #4
    f61c:	2100      	movs	r1, #0
    f61e:	f241 0002 	movw	r0, #4098	; 0x1002
    f622:	f7ff ff03 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
    f626:	4604      	mov	r4, r0
    f628:	2800      	cmp	r0, #0
    f62a:	d1de      	bne.n	f5ea <common_init+0x3e>
	read_supported_commands_complete(rsp);
    f62c:	9801      	ldr	r0, [sp, #4]
    f62e:	f7ff f8ef 	bl	e810 <read_supported_commands_complete>
	net_buf_unref(rsp);
    f632:	9801      	ldr	r0, [sp, #4]
    f634:	f008 fa8a 	bl	17b4c <net_buf_unref>
	return 0;
    f638:	e7d7      	b.n	f5ea <common_init+0x3e>
    f63a:	bf00      	nop
    f63c:	200001a0 	.word	0x200001a0

0000f640 <le_init>:
{
    f640:	b5b0      	push	{r4, r5, r7, lr}
    f642:	b082      	sub	sp, #8
    f644:	af00      	add	r7, sp, #0
	if (!BT_FEAT_LE(bt_dev.features)) {
    f646:	4b48      	ldr	r3, [pc, #288]	; (f768 <le_init+0x128>)
    f648:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f64c:	f013 0f40 	tst.w	r3, #64	; 0x40
    f650:	d00c      	beq.n	f66c <le_init+0x2c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f652:	1d3a      	adds	r2, r7, #4
    f654:	2100      	movs	r1, #0
    f656:	f242 0003 	movw	r0, #8195	; 0x2003
    f65a:	f7ff fee7 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
    f65e:	4603      	mov	r3, r0
    f660:	2800      	cmp	r0, #0
    f662:	d040      	beq.n	f6e6 <le_init+0xa6>
}
    f664:	4618      	mov	r0, r3
    f666:	3708      	adds	r7, #8
    f668:	46bd      	mov	sp, r7
    f66a:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Non-LE capable controller detected!");
    f66c:	466d      	mov	r5, sp
    f66e:	b088      	sub	sp, #32
    f670:	466b      	mov	r3, sp
    f672:	f113 0210 	adds.w	r2, r3, #16
    f676:	d030      	beq.n	f6da <le_init+0x9a>
    f678:	210c      	movs	r1, #12
    f67a:	b142      	cbz	r2, f68e <le_init+0x4e>
    f67c:	4608      	mov	r0, r1
    f67e:	2904      	cmp	r1, #4
    f680:	dd01      	ble.n	f686 <le_init+0x46>
    f682:	4c3a      	ldr	r4, [pc, #232]	; (f76c <le_init+0x12c>)
    f684:	615c      	str	r4, [r3, #20]
    f686:	2808      	cmp	r0, #8
    f688:	dd01      	ble.n	f68e <le_init+0x4e>
    f68a:	4839      	ldr	r0, [pc, #228]	; (f770 <le_init+0x130>)
    f68c:	6198      	str	r0, [r3, #24]
    f68e:	290b      	cmp	r1, #11
    f690:	dd26      	ble.n	f6e0 <le_init+0xa0>
    f692:	240c      	movs	r4, #12
    f694:	b13a      	cbz	r2, f6a6 <le_init+0x66>
    f696:	2103      	movs	r1, #3
    f698:	7039      	strb	r1, [r7, #0]
    f69a:	2100      	movs	r1, #0
    f69c:	7079      	strb	r1, [r7, #1]
    f69e:	70b9      	strb	r1, [r7, #2]
    f6a0:	70f9      	strb	r1, [r7, #3]
    f6a2:	6838      	ldr	r0, [r7, #0]
    f6a4:	6118      	str	r0, [r3, #16]
    f6a6:	2100      	movs	r1, #0
    f6a8:	f36f 0100 	bfc	r1, #0, #1
    f6ac:	f36f 0141 	bfc	r1, #1, #1
    f6b0:	f36f 0182 	bfc	r1, #2, #1
    f6b4:	f36f 01c5 	bfc	r1, #3, #3
    f6b8:	2301      	movs	r3, #1
    f6ba:	f363 1188 	bfi	r1, r3, #6, #3
    f6be:	f3c4 040a 	ubfx	r4, r4, #0, #11
    f6c2:	f364 2153 	bfi	r1, r4, #9, #11
    f6c6:	f36f 511f 	bfc	r1, #20, #12
    f6ca:	2300      	movs	r3, #0
    f6cc:	4829      	ldr	r0, [pc, #164]	; (f774 <le_init+0x134>)
    f6ce:	f7fc fbcb 	bl	be68 <z_impl_z_log_msg_static_create>
    f6d2:	46ad      	mov	sp, r5
		return -ENODEV;
    f6d4:	f06f 0312 	mvn.w	r3, #18
    f6d8:	e7c4      	b.n	f664 <le_init+0x24>
		LOG_ERR("Non-LE capable controller detected!");
    f6da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f6de:	e7cc      	b.n	f67a <le_init+0x3a>
    f6e0:	f06f 041b 	mvn.w	r4, #27
    f6e4:	e7d6      	b.n	f694 <le_init+0x54>
	read_le_features_complete(rsp);
    f6e6:	6878      	ldr	r0, [r7, #4]
    f6e8:	f7ff f89c 	bl	e824 <read_le_features_complete>
	net_buf_unref(rsp);
    f6ec:	6878      	ldr	r0, [r7, #4]
    f6ee:	f008 fa2d 	bl	17b4c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f6f2:	4b1d      	ldr	r3, [pc, #116]	; (f768 <le_init+0x128>)
    f6f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f6f8:	f013 0f20 	tst.w	r3, #32
    f6fc:	d018      	beq.n	f730 <le_init+0xf0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f6fe:	4b1a      	ldr	r3, [pc, #104]	; (f768 <le_init+0x128>)
    f700:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    f704:	f013 0f08 	tst.w	r3, #8
    f708:	d00e      	beq.n	f728 <le_init+0xe8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f70a:	1d3a      	adds	r2, r7, #4
    f70c:	2100      	movs	r1, #0
    f70e:	f242 001c 	movw	r0, #8220	; 0x201c
    f712:	f7ff fe8b 	bl	f42c <bt_hci_cmd_send_sync>
		if (err) {
    f716:	4603      	mov	r3, r0
    f718:	2800      	cmp	r0, #0
    f71a:	d1a3      	bne.n	f664 <le_init+0x24>
		le_read_supp_states_complete(rsp);
    f71c:	6878      	ldr	r0, [r7, #4]
    f71e:	f7fe fffb 	bl	e718 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    f722:	6878      	ldr	r0, [r7, #4]
    f724:	f008 fa12 	bl	17b4c <net_buf_unref>
	return  le_set_event_mask();
    f728:	f008 f84a 	bl	177c0 <le_set_event_mask>
    f72c:	4603      	mov	r3, r0
    f72e:	e799      	b.n	f664 <le_init+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f730:	2102      	movs	r1, #2
    f732:	f640 406d 	movw	r0, #3181	; 0xc6d
    f736:	f7ff fe3b 	bl	f3b0 <bt_hci_cmd_create>
		if (!buf) {
    f73a:	4604      	mov	r4, r0
    f73c:	b180      	cbz	r0, f760 <le_init+0x120>
    f73e:	2102      	movs	r1, #2
    f740:	300c      	adds	r0, #12
    f742:	f008 fa2e 	bl	17ba2 <net_buf_simple_add>
		cp_le->le = 0x01;
    f746:	2301      	movs	r3, #1
    f748:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f74a:	2200      	movs	r2, #0
    f74c:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f74e:	4621      	mov	r1, r4
    f750:	f640 406d 	movw	r0, #3181	; 0xc6d
    f754:	f7ff fe6a 	bl	f42c <bt_hci_cmd_send_sync>
		if (err) {
    f758:	4603      	mov	r3, r0
    f75a:	2800      	cmp	r0, #0
    f75c:	d0cf      	beq.n	f6fe <le_init+0xbe>
    f75e:	e781      	b.n	f664 <le_init+0x24>
			return -ENOBUFS;
    f760:	f06f 0368 	mvn.w	r3, #104	; 0x68
    f764:	e77e      	b.n	f664 <le_init+0x24>
    f766:	bf00      	nop
    f768:	200001a0 	.word	0x200001a0
    f76c:	0001af80 	.word	0x0001af80
    f770:	0001b39c 	.word	0x0001b39c
    f774:	0001a0bc 	.word	0x0001a0bc

0000f778 <set_event_mask>:
{
    f778:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f77a:	2108      	movs	r1, #8
    f77c:	f640 4001 	movw	r0, #3073	; 0xc01
    f780:	f7ff fe16 	bl	f3b0 <bt_hci_cmd_create>
	if (!buf) {
    f784:	b188      	cbz	r0, f7aa <set_event_mask+0x32>
    f786:	4604      	mov	r4, r0
    f788:	2108      	movs	r1, #8
    f78a:	300c      	adds	r0, #12
    f78c:	f008 fa09 	bl	17ba2 <net_buf_simple_add>
    f790:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
    f792:	4807      	ldr	r0, [pc, #28]	; (f7b0 <set_event_mask+0x38>)
    f794:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f798:	f007 ffc0 	bl	1771c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f79c:	2200      	movs	r2, #0
    f79e:	4621      	mov	r1, r4
    f7a0:	f640 4001 	movw	r0, #3073	; 0xc01
    f7a4:	f7ff fe42 	bl	f42c <bt_hci_cmd_send_sync>
}
    f7a8:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
    f7aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f7ae:	e7fb      	b.n	f7a8 <set_event_mask+0x30>
    f7b0:	02008000 	.word	0x02008000

0000f7b4 <hci_vs_init>:
{
    f7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7b8:	b085      	sub	sp, #20
    f7ba:	af00      	add	r7, sp, #0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f7bc:	f107 020c 	add.w	r2, r7, #12
    f7c0:	2100      	movs	r1, #0
    f7c2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f7c6:	f7ff fe31 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
    f7ca:	bb98      	cbnz	r0, f834 <hci_vs_init+0x80>
	rp.info = (void *)rsp->data;
    f7cc:	68fb      	ldr	r3, [r7, #12]
    f7ce:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    f7d0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    f7d4:	4630      	mov	r0, r6
    f7d6:	f7fe ffcd 	bl	e774 <vs_hw_platform>
    f7da:	466d      	mov	r5, sp
    f7dc:	2301      	movs	r3, #1
    f7de:	723b      	strb	r3, [r7, #8]
    f7e0:	2303      	movs	r3, #3
    f7e2:	727b      	strb	r3, [r7, #9]
    f7e4:	b08a      	sub	sp, #40	; 0x28
    f7e6:	46ec      	mov	ip, sp
    f7e8:	f11c 0210 	adds.w	r2, ip, #16
    f7ec:	d060      	beq.n	f8b0 <hci_vs_init+0xfc>
    f7ee:	f04f 0e16 	mov.w	lr, #22
    f7f2:	b15a      	cbz	r2, f80c <hci_vs_init+0x58>
    f7f4:	4673      	mov	r3, lr
    f7f6:	f1be 0f04 	cmp.w	lr, #4
    f7fa:	dd02      	ble.n	f802 <hci_vs_init+0x4e>
    f7fc:	499c      	ldr	r1, [pc, #624]	; (fa70 <hci_vs_init+0x2bc>)
    f7fe:	f8cc 1014 	str.w	r1, [ip, #20]
    f802:	2b08      	cmp	r3, #8
    f804:	dd02      	ble.n	f80c <hci_vs_init+0x58>
    f806:	4b9b      	ldr	r3, [pc, #620]	; (fa74 <hci_vs_init+0x2c0>)
    f808:	f8cc 3018 	str.w	r3, [ip, #24]
    f80c:	2301      	movs	r3, #1
    f80e:	713b      	strb	r3, [r7, #4]
    f810:	2303      	movs	r3, #3
    f812:	717b      	strb	r3, [r7, #5]
    f814:	2a00      	cmp	r2, #0
    f816:	d058      	beq.n	f8ca <hci_vs_init+0x116>
    f818:	4673      	mov	r3, lr
    f81a:	f1be 0f0c 	cmp.w	lr, #12
    f81e:	dd01      	ble.n	f824 <hci_vs_init+0x70>
    f820:	f8cc 001c 	str.w	r0, [ip, #28]
    f824:	2b10      	cmp	r3, #16
    f826:	dd01      	ble.n	f82c <hci_vs_init+0x78>
    f828:	f8cc 6020 	str.w	r6, [ip, #32]
    f82c:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    f830:	2100      	movs	r1, #0
    f832:	e048      	b.n	f8c6 <hci_vs_init+0x112>
		LOG_WRN("Vendor HCI extensions not available");
    f834:	466d      	mov	r5, sp
    f836:	b088      	sub	sp, #32
    f838:	466b      	mov	r3, sp
    f83a:	f113 0210 	adds.w	r2, r3, #16
    f83e:	d031      	beq.n	f8a4 <hci_vs_init+0xf0>
    f840:	210c      	movs	r1, #12
    f842:	b142      	cbz	r2, f856 <hci_vs_init+0xa2>
    f844:	4608      	mov	r0, r1
    f846:	2904      	cmp	r1, #4
    f848:	dd01      	ble.n	f84e <hci_vs_init+0x9a>
    f84a:	4c8b      	ldr	r4, [pc, #556]	; (fa78 <hci_vs_init+0x2c4>)
    f84c:	615c      	str	r4, [r3, #20]
    f84e:	2808      	cmp	r0, #8
    f850:	dd01      	ble.n	f856 <hci_vs_init+0xa2>
    f852:	4888      	ldr	r0, [pc, #544]	; (fa74 <hci_vs_init+0x2c0>)
    f854:	6198      	str	r0, [r3, #24]
    f856:	290b      	cmp	r1, #11
    f858:	dd27      	ble.n	f8aa <hci_vs_init+0xf6>
    f85a:	240c      	movs	r4, #12
    f85c:	b13a      	cbz	r2, f86e <hci_vs_init+0xba>
    f85e:	2103      	movs	r1, #3
    f860:	7239      	strb	r1, [r7, #8]
    f862:	2100      	movs	r1, #0
    f864:	7279      	strb	r1, [r7, #9]
    f866:	72b9      	strb	r1, [r7, #10]
    f868:	72f9      	strb	r1, [r7, #11]
    f86a:	68b8      	ldr	r0, [r7, #8]
    f86c:	6118      	str	r0, [r3, #16]
    f86e:	2100      	movs	r1, #0
    f870:	f36f 0100 	bfc	r1, #0, #1
    f874:	f36f 0141 	bfc	r1, #1, #1
    f878:	f36f 0182 	bfc	r1, #2, #1
    f87c:	f36f 01c5 	bfc	r1, #3, #3
    f880:	2302      	movs	r3, #2
    f882:	f363 1188 	bfi	r1, r3, #6, #3
    f886:	f3c4 030a 	ubfx	r3, r4, #0, #11
    f88a:	f363 2153 	bfi	r1, r3, #9, #11
    f88e:	f36f 511f 	bfc	r1, #20, #12
    f892:	2300      	movs	r3, #0
    f894:	4879      	ldr	r0, [pc, #484]	; (fa7c <hci_vs_init+0x2c8>)
    f896:	f7fc fae7 	bl	be68 <z_impl_z_log_msg_static_create>
    f89a:	46ad      	mov	sp, r5
}
    f89c:	3714      	adds	r7, #20
    f89e:	46bd      	mov	sp, r7
    f8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Vendor HCI extensions not available");
    f8a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f8a8:	e7cb      	b.n	f842 <hci_vs_init+0x8e>
    f8aa:	f06f 041b 	mvn.w	r4, #27
    f8ae:	e7d5      	b.n	f85c <hci_vs_init+0xa8>
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    f8b0:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    f8b4:	e79d      	b.n	f7f2 <hci_vs_init+0x3e>
    f8b6:	f101 0010 	add.w	r0, r1, #16
    f8ba:	4438      	add	r0, r7
    f8bc:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
    f8c0:	f803 0b01 	strb.w	r0, [r3], #1
    f8c4:	3101      	adds	r1, #1
    f8c6:	2901      	cmp	r1, #1
    f8c8:	d9f5      	bls.n	f8b6 <hci_vs_init+0x102>
    f8ca:	f1be 0f15 	cmp.w	lr, #21
    f8ce:	dd54      	ble.n	f97a <hci_vs_init+0x1c6>
    f8d0:	2316      	movs	r3, #22
    f8d2:	b14a      	cbz	r2, f8e8 <hci_vs_init+0x134>
    f8d4:	2105      	movs	r1, #5
    f8d6:	7239      	strb	r1, [r7, #8]
    f8d8:	2100      	movs	r1, #0
    f8da:	7279      	strb	r1, [r7, #9]
    f8dc:	72b9      	strb	r1, [r7, #10]
    f8de:	2101      	movs	r1, #1
    f8e0:	72f9      	strb	r1, [r7, #11]
    f8e2:	68b8      	ldr	r0, [r7, #8]
    f8e4:	f8cc 0010 	str.w	r0, [ip, #16]
    f8e8:	2100      	movs	r1, #0
    f8ea:	f36f 0100 	bfc	r1, #0, #1
    f8ee:	f36f 0141 	bfc	r1, #1, #1
    f8f2:	f36f 0182 	bfc	r1, #2, #1
    f8f6:	f36f 01c5 	bfc	r1, #3, #3
    f8fa:	2603      	movs	r6, #3
    f8fc:	f366 1188 	bfi	r1, r6, #6, #3
    f900:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f904:	f363 2153 	bfi	r1, r3, #9, #11
    f908:	f36f 511f 	bfc	r1, #20, #12
    f90c:	2300      	movs	r3, #0
    f90e:	485b      	ldr	r0, [pc, #364]	; (fa7c <hci_vs_init+0x2c8>)
    f910:	f7fc faaa 	bl	be68 <z_impl_z_log_msg_static_create>
    f914:	46ad      	mov	sp, r5
	LOG_INF("HW Variant: %s (0x%04x)",
    f916:	f8b4 8003 	ldrh.w	r8, [r4, #3]
    f91a:	4641      	mov	r1, r8
    f91c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f920:	f7fe ff34 	bl	e78c <vs_hw_variant>
    f924:	466d      	mov	r5, sp
    f926:	2301      	movs	r3, #1
    f928:	723b      	strb	r3, [r7, #8]
    f92a:	727e      	strb	r6, [r7, #9]
    f92c:	b08a      	sub	sp, #40	; 0x28
    f92e:	46ec      	mov	ip, sp
    f930:	f11c 0210 	adds.w	r2, ip, #16
    f934:	d024      	beq.n	f980 <hci_vs_init+0x1cc>
    f936:	f04f 0e16 	mov.w	lr, #22
    f93a:	b15a      	cbz	r2, f954 <hci_vs_init+0x1a0>
    f93c:	4673      	mov	r3, lr
    f93e:	f1be 0f04 	cmp.w	lr, #4
    f942:	dd02      	ble.n	f94a <hci_vs_init+0x196>
    f944:	494e      	ldr	r1, [pc, #312]	; (fa80 <hci_vs_init+0x2cc>)
    f946:	f8cc 1014 	str.w	r1, [ip, #20]
    f94a:	2b08      	cmp	r3, #8
    f94c:	dd02      	ble.n	f954 <hci_vs_init+0x1a0>
    f94e:	4b49      	ldr	r3, [pc, #292]	; (fa74 <hci_vs_init+0x2c0>)
    f950:	f8cc 3018 	str.w	r3, [ip, #24]
    f954:	2301      	movs	r3, #1
    f956:	713b      	strb	r3, [r7, #4]
    f958:	2303      	movs	r3, #3
    f95a:	717b      	strb	r3, [r7, #5]
    f95c:	b1ea      	cbz	r2, f99a <hci_vs_init+0x1e6>
    f95e:	4673      	mov	r3, lr
    f960:	f1be 0f0c 	cmp.w	lr, #12
    f964:	dd01      	ble.n	f96a <hci_vs_init+0x1b6>
    f966:	f8cc 001c 	str.w	r0, [ip, #28]
    f96a:	2b10      	cmp	r3, #16
    f96c:	dd01      	ble.n	f972 <hci_vs_init+0x1be>
    f96e:	f8cc 8020 	str.w	r8, [ip, #32]
    f972:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    f976:	2100      	movs	r1, #0
    f978:	e00d      	b.n	f996 <hci_vs_init+0x1e2>
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    f97a:	f06f 031b 	mvn.w	r3, #27
    f97e:	e7a8      	b.n	f8d2 <hci_vs_init+0x11e>
	LOG_INF("HW Variant: %s (0x%04x)",
    f980:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    f984:	e7d9      	b.n	f93a <hci_vs_init+0x186>
    f986:	f101 0010 	add.w	r0, r1, #16
    f98a:	4438      	add	r0, r7
    f98c:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
    f990:	f803 0b01 	strb.w	r0, [r3], #1
    f994:	3101      	adds	r1, #1
    f996:	2901      	cmp	r1, #1
    f998:	d9f5      	bls.n	f986 <hci_vs_init+0x1d2>
    f99a:	f1be 0f15 	cmp.w	lr, #21
    f99e:	dd60      	ble.n	fa62 <hci_vs_init+0x2ae>
    f9a0:	2316      	movs	r3, #22
    f9a2:	b14a      	cbz	r2, f9b8 <hci_vs_init+0x204>
    f9a4:	2105      	movs	r1, #5
    f9a6:	7239      	strb	r1, [r7, #8]
    f9a8:	2100      	movs	r1, #0
    f9aa:	7279      	strb	r1, [r7, #9]
    f9ac:	72b9      	strb	r1, [r7, #10]
    f9ae:	2101      	movs	r1, #1
    f9b0:	72f9      	strb	r1, [r7, #11]
    f9b2:	68b8      	ldr	r0, [r7, #8]
    f9b4:	f8cc 0010 	str.w	r0, [ip, #16]
    f9b8:	2100      	movs	r1, #0
    f9ba:	f36f 0100 	bfc	r1, #0, #1
    f9be:	f36f 0141 	bfc	r1, #1, #1
    f9c2:	f36f 0182 	bfc	r1, #2, #1
    f9c6:	f36f 01c5 	bfc	r1, #3, #3
    f9ca:	2603      	movs	r6, #3
    f9cc:	f366 1188 	bfi	r1, r6, #6, #3
    f9d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f9d4:	f363 2153 	bfi	r1, r3, #9, #11
    f9d8:	f36f 511f 	bfc	r1, #20, #12
    f9dc:	2300      	movs	r3, #0
    f9de:	4827      	ldr	r0, [pc, #156]	; (fa7c <hci_vs_init+0x2c8>)
    f9e0:	f7fc fa42 	bl	be68 <z_impl_z_log_msg_static_create>
    f9e4:	46ad      	mov	sp, r5
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    f9e6:	f894 8005 	ldrb.w	r8, [r4, #5]
    f9ea:	4640      	mov	r0, r8
    f9ec:	f7fe fede 	bl	e7ac <vs_fw_variant>
    f9f0:	f894 e006 	ldrb.w	lr, [r4, #6]
    f9f4:	f8b4 1007 	ldrh.w	r1, [r4, #7]
    f9f8:	f8d4 9009 	ldr.w	r9, [r4, #9]
    f9fc:	466d      	mov	r5, sp
    f9fe:	2301      	movs	r3, #1
    fa00:	723b      	strb	r3, [r7, #8]
    fa02:	727e      	strb	r6, [r7, #9]
    fa04:	b08e      	sub	sp, #56	; 0x38
    fa06:	466c      	mov	r4, sp
    fa08:	f114 0210 	adds.w	r2, r4, #16
    fa0c:	d02c      	beq.n	fa68 <hci_vs_init+0x2b4>
    fa0e:	f04f 0c22 	mov.w	ip, #34	; 0x22
    fa12:	b14a      	cbz	r2, fa28 <hci_vs_init+0x274>
    fa14:	4663      	mov	r3, ip
    fa16:	f1bc 0f04 	cmp.w	ip, #4
    fa1a:	dd01      	ble.n	fa20 <hci_vs_init+0x26c>
    fa1c:	4e19      	ldr	r6, [pc, #100]	; (fa84 <hci_vs_init+0x2d0>)
    fa1e:	6166      	str	r6, [r4, #20]
    fa20:	2b08      	cmp	r3, #8
    fa22:	dd01      	ble.n	fa28 <hci_vs_init+0x274>
    fa24:	4b13      	ldr	r3, [pc, #76]	; (fa74 <hci_vs_init+0x2c0>)
    fa26:	61a3      	str	r3, [r4, #24]
    fa28:	2301      	movs	r3, #1
    fa2a:	713b      	strb	r3, [r7, #4]
    fa2c:	2303      	movs	r3, #3
    fa2e:	717b      	strb	r3, [r7, #5]
    fa30:	b3a2      	cbz	r2, fa9c <hci_vs_init+0x2e8>
    fa32:	4663      	mov	r3, ip
    fa34:	f1bc 0f0c 	cmp.w	ip, #12
    fa38:	dd00      	ble.n	fa3c <hci_vs_init+0x288>
    fa3a:	61e0      	str	r0, [r4, #28]
    fa3c:	2b10      	cmp	r3, #16
    fa3e:	dd01      	ble.n	fa44 <hci_vs_init+0x290>
    fa40:	f8c4 8020 	str.w	r8, [r4, #32]
    fa44:	2b14      	cmp	r3, #20
    fa46:	dd01      	ble.n	fa4c <hci_vs_init+0x298>
    fa48:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
    fa4c:	2b18      	cmp	r3, #24
    fa4e:	dd00      	ble.n	fa52 <hci_vs_init+0x29e>
    fa50:	62a1      	str	r1, [r4, #40]	; 0x28
    fa52:	2b1c      	cmp	r3, #28
    fa54:	dd01      	ble.n	fa5a <hci_vs_init+0x2a6>
    fa56:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    fa5a:	f104 0330 	add.w	r3, r4, #48	; 0x30
    fa5e:	2100      	movs	r1, #0
    fa60:	e01a      	b.n	fa98 <hci_vs_init+0x2e4>
	LOG_INF("HW Variant: %s (0x%04x)",
    fa62:	f06f 031b 	mvn.w	r3, #27
    fa66:	e79c      	b.n	f9a2 <hci_vs_init+0x1ee>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    fa68:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    fa6c:	e7d1      	b.n	fa12 <hci_vs_init+0x25e>
    fa6e:	bf00      	nop
    fa70:	0001afd0 	.word	0x0001afd0
    fa74:	0001b390 	.word	0x0001b390
    fa78:	0001afa8 	.word	0x0001afa8
    fa7c:	0001a0bc 	.word	0x0001a0bc
    fa80:	0001aff0 	.word	0x0001aff0
    fa84:	0001b00c 	.word	0x0001b00c
    fa88:	f101 0010 	add.w	r0, r1, #16
    fa8c:	4438      	add	r0, r7
    fa8e:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
    fa92:	f803 0b01 	strb.w	r0, [r3], #1
    fa96:	3101      	adds	r1, #1
    fa98:	2901      	cmp	r1, #1
    fa9a:	d9f5      	bls.n	fa88 <hci_vs_init+0x2d4>
    fa9c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    faa0:	dd62      	ble.n	fb68 <__kernel_ram_size+0x40>
    faa2:	2322      	movs	r3, #34	; 0x22
    faa4:	b142      	cbz	r2, fab8 <hci_vs_init+0x304>
    faa6:	2108      	movs	r1, #8
    faa8:	7239      	strb	r1, [r7, #8]
    faaa:	2100      	movs	r1, #0
    faac:	7279      	strb	r1, [r7, #9]
    faae:	72b9      	strb	r1, [r7, #10]
    fab0:	2101      	movs	r1, #1
    fab2:	72f9      	strb	r1, [r7, #11]
    fab4:	68b8      	ldr	r0, [r7, #8]
    fab6:	6120      	str	r0, [r4, #16]
    fab8:	2100      	movs	r1, #0
    faba:	f36f 0100 	bfc	r1, #0, #1
    fabe:	f36f 0141 	bfc	r1, #1, #1
    fac2:	f36f 0182 	bfc	r1, #2, #1
    fac6:	f36f 01c5 	bfc	r1, #3, #3
    faca:	2003      	movs	r0, #3
    facc:	f360 1188 	bfi	r1, r0, #6, #3
    fad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    fad4:	f363 2153 	bfi	r1, r3, #9, #11
    fad8:	f36f 511f 	bfc	r1, #20, #12
    fadc:	2300      	movs	r3, #0
    fade:	4856      	ldr	r0, [pc, #344]	; (fc38 <__kernel_ram_size+0x110>)
    fae0:	f7fc f9c2 	bl	be68 <z_impl_z_log_msg_static_create>
    fae4:	46ad      	mov	sp, r5
	net_buf_unref(rsp);
    fae6:	68f8      	ldr	r0, [r7, #12]
    fae8:	f008 f830 	bl	17b4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    faec:	f107 020c 	add.w	r2, r7, #12
    faf0:	2100      	movs	r1, #0
    faf2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    faf6:	f7ff fc99 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
    fafa:	2800      	cmp	r0, #0
    fafc:	d03d      	beq.n	fb7a <__kernel_ram_size+0x52>
		LOG_WRN("Failed to read supported vendor commands");
    fafe:	466d      	mov	r5, sp
    fb00:	b088      	sub	sp, #32
    fb02:	466b      	mov	r3, sp
    fb04:	f113 0210 	adds.w	r2, r3, #16
    fb08:	d031      	beq.n	fb6e <__kernel_ram_size+0x46>
    fb0a:	210c      	movs	r1, #12
    fb0c:	b142      	cbz	r2, fb20 <hci_vs_init+0x36c>
    fb0e:	4608      	mov	r0, r1
    fb10:	2904      	cmp	r1, #4
    fb12:	dd01      	ble.n	fb18 <hci_vs_init+0x364>
    fb14:	4c49      	ldr	r4, [pc, #292]	; (fc3c <__kernel_ram_size+0x114>)
    fb16:	615c      	str	r4, [r3, #20]
    fb18:	2808      	cmp	r0, #8
    fb1a:	dd01      	ble.n	fb20 <hci_vs_init+0x36c>
    fb1c:	4848      	ldr	r0, [pc, #288]	; (fc40 <__kernel_ram_size+0x118>)
    fb1e:	6198      	str	r0, [r3, #24]
    fb20:	290b      	cmp	r1, #11
    fb22:	dd27      	ble.n	fb74 <__kernel_ram_size+0x4c>
    fb24:	240c      	movs	r4, #12
    fb26:	b13a      	cbz	r2, fb38 <__kernel_ram_size+0x10>
    fb28:	2103      	movs	r1, #3
    fb2a:	7239      	strb	r1, [r7, #8]
    fb2c:	2100      	movs	r1, #0
    fb2e:	7279      	strb	r1, [r7, #9]
    fb30:	72b9      	strb	r1, [r7, #10]
    fb32:	72f9      	strb	r1, [r7, #11]
    fb34:	68b8      	ldr	r0, [r7, #8]
    fb36:	6118      	str	r0, [r3, #16]
    fb38:	2100      	movs	r1, #0
    fb3a:	f36f 0100 	bfc	r1, #0, #1
    fb3e:	f36f 0141 	bfc	r1, #1, #1
    fb42:	f36f 0182 	bfc	r1, #2, #1
    fb46:	f36f 01c5 	bfc	r1, #3, #3
    fb4a:	2302      	movs	r3, #2
    fb4c:	f363 1188 	bfi	r1, r3, #6, #3
    fb50:	f3c4 030a 	ubfx	r3, r4, #0, #11
    fb54:	f363 2153 	bfi	r1, r3, #9, #11
    fb58:	f36f 511f 	bfc	r1, #20, #12
    fb5c:	2300      	movs	r3, #0
    fb5e:	4836      	ldr	r0, [pc, #216]	; (fc38 <__kernel_ram_size+0x110>)
    fb60:	f7fc f982 	bl	be68 <z_impl_z_log_msg_static_create>
    fb64:	46ad      	mov	sp, r5
		return;
    fb66:	e699      	b.n	f89c <hci_vs_init+0xe8>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    fb68:	f06f 031b 	mvn.w	r3, #27
    fb6c:	e79a      	b.n	faa4 <hci_vs_init+0x2f0>
		LOG_WRN("Failed to read supported vendor commands");
    fb6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fb72:	e7cb      	b.n	fb0c <hci_vs_init+0x358>
    fb74:	f06f 041b 	mvn.w	r4, #27
    fb78:	e7d5      	b.n	fb26 <hci_vs_init+0x372>
	rp.cmds = (void *)rsp->data;
    fb7a:	68fb      	ldr	r3, [r7, #12]
    fb7c:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    fb7e:	4c31      	ldr	r4, [pc, #196]	; (fc44 <__kernel_ram_size+0x11c>)
    fb80:	2202      	movs	r2, #2
    fb82:	3101      	adds	r1, #1
    fb84:	4620      	mov	r0, r4
    fb86:	f007 fd40 	bl	1760a <memcpy>
	net_buf_unref(rsp);
    fb8a:	68f8      	ldr	r0, [r7, #12]
    fb8c:	f007 ffde 	bl	17b4c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    fb90:	7823      	ldrb	r3, [r4, #0]
    fb92:	f013 0f04 	tst.w	r3, #4
    fb96:	f43f ae81 	beq.w	f89c <hci_vs_init+0xe8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    fb9a:	f107 020c 	add.w	r2, r7, #12
    fb9e:	2100      	movs	r1, #0
    fba0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    fba4:	f7ff fc42 	bl	f42c <bt_hci_cmd_send_sync>
		if (err) {
    fba8:	2800      	cmp	r0, #0
    fbaa:	d03a      	beq.n	fc22 <__kernel_ram_size+0xfa>
			LOG_WRN("Failed to read supported vendor features");
    fbac:	466d      	mov	r5, sp
    fbae:	b088      	sub	sp, #32
    fbb0:	466b      	mov	r3, sp
    fbb2:	f113 0210 	adds.w	r2, r3, #16
    fbb6:	d02e      	beq.n	fc16 <__kernel_ram_size+0xee>
    fbb8:	210c      	movs	r1, #12
    fbba:	b142      	cbz	r2, fbce <__kernel_ram_size+0xa6>
    fbbc:	4608      	mov	r0, r1
    fbbe:	2904      	cmp	r1, #4
    fbc0:	dd01      	ble.n	fbc6 <__kernel_ram_size+0x9e>
    fbc2:	4c21      	ldr	r4, [pc, #132]	; (fc48 <__kernel_ram_size+0x120>)
    fbc4:	615c      	str	r4, [r3, #20]
    fbc6:	2808      	cmp	r0, #8
    fbc8:	dd01      	ble.n	fbce <__kernel_ram_size+0xa6>
    fbca:	481d      	ldr	r0, [pc, #116]	; (fc40 <__kernel_ram_size+0x118>)
    fbcc:	6198      	str	r0, [r3, #24]
    fbce:	290b      	cmp	r1, #11
    fbd0:	dd24      	ble.n	fc1c <__kernel_ram_size+0xf4>
    fbd2:	240c      	movs	r4, #12
    fbd4:	b13a      	cbz	r2, fbe6 <__kernel_ram_size+0xbe>
    fbd6:	2103      	movs	r1, #3
    fbd8:	7239      	strb	r1, [r7, #8]
    fbda:	2100      	movs	r1, #0
    fbdc:	7279      	strb	r1, [r7, #9]
    fbde:	72b9      	strb	r1, [r7, #10]
    fbe0:	72f9      	strb	r1, [r7, #11]
    fbe2:	68b8      	ldr	r0, [r7, #8]
    fbe4:	6118      	str	r0, [r3, #16]
    fbe6:	2100      	movs	r1, #0
    fbe8:	f36f 0100 	bfc	r1, #0, #1
    fbec:	f36f 0141 	bfc	r1, #1, #1
    fbf0:	f36f 0182 	bfc	r1, #2, #1
    fbf4:	f36f 01c5 	bfc	r1, #3, #3
    fbf8:	2302      	movs	r3, #2
    fbfa:	f363 1188 	bfi	r1, r3, #6, #3
    fbfe:	f3c4 030a 	ubfx	r3, r4, #0, #11
    fc02:	f363 2153 	bfi	r1, r3, #9, #11
    fc06:	f36f 511f 	bfc	r1, #20, #12
    fc0a:	2300      	movs	r3, #0
    fc0c:	480a      	ldr	r0, [pc, #40]	; (fc38 <__kernel_ram_size+0x110>)
    fc0e:	f7fc f92b 	bl	be68 <z_impl_z_log_msg_static_create>
    fc12:	46ad      	mov	sp, r5
			return;
    fc14:	e642      	b.n	f89c <hci_vs_init+0xe8>
			LOG_WRN("Failed to read supported vendor features");
    fc16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fc1a:	e7ce      	b.n	fbba <__kernel_ram_size+0x92>
    fc1c:	f06f 041b 	mvn.w	r4, #27
    fc20:	e7d8      	b.n	fbd4 <__kernel_ram_size+0xac>
		rp.feat = (void *)rsp->data;
    fc22:	68fb      	ldr	r3, [r7, #12]
    fc24:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
    fc26:	2201      	movs	r2, #1
    fc28:	4411      	add	r1, r2
    fc2a:	4808      	ldr	r0, [pc, #32]	; (fc4c <__kernel_ram_size+0x124>)
    fc2c:	f007 fced 	bl	1760a <memcpy>
		net_buf_unref(rsp);
    fc30:	68f8      	ldr	r0, [r7, #12]
    fc32:	f007 ff8b 	bl	17b4c <net_buf_unref>
    fc36:	e631      	b.n	f89c <hci_vs_init+0xe8>
    fc38:	0001a0bc 	.word	0x0001a0bc
    fc3c:	0001b040 	.word	0x0001b040
    fc40:	0001b390 	.word	0x0001b390
    fc44:	20000261 	.word	0x20000261
    fc48:	0001b070 	.word	0x0001b070
    fc4c:	20000260 	.word	0x20000260

0000fc50 <hci_init>:
{
    fc50:	b508      	push	{r3, lr}
	err = common_init();
    fc52:	f7ff fcab 	bl	f5ac <common_init>
	if (err) {
    fc56:	4603      	mov	r3, r0
    fc58:	b108      	cbz	r0, fc5e <hci_init+0xe>
}
    fc5a:	4618      	mov	r0, r3
    fc5c:	bd08      	pop	{r3, pc}
	err = le_init();
    fc5e:	f7ff fcef 	bl	f640 <le_init>
	if (err) {
    fc62:	4603      	mov	r3, r0
    fc64:	2800      	cmp	r0, #0
    fc66:	d1f8      	bne.n	fc5a <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    fc68:	4b0a      	ldr	r3, [pc, #40]	; (fc94 <hci_init+0x44>)
    fc6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    fc6e:	f013 0f20 	tst.w	r3, #32
    fc72:	d104      	bne.n	fc7e <hci_init+0x2e>
		err = bt_br_init();
    fc74:	f007 fd7d 	bl	17772 <bt_br_init>
		if (err) {
    fc78:	4603      	mov	r3, r0
    fc7a:	2800      	cmp	r0, #0
    fc7c:	d1ed      	bne.n	fc5a <hci_init+0xa>
	err = set_event_mask();
    fc7e:	f7ff fd7b 	bl	f778 <set_event_mask>
	if (err) {
    fc82:	4603      	mov	r3, r0
    fc84:	2800      	cmp	r0, #0
    fc86:	d1e8      	bne.n	fc5a <hci_init+0xa>
	hci_vs_init();
    fc88:	f7ff fd94 	bl	f7b4 <hci_vs_init>
	err = bt_id_init();
    fc8c:	f000 fefa 	bl	10a84 <bt_id_init>
    fc90:	4603      	mov	r3, r0
	if (err) {
    fc92:	e7e2      	b.n	fc5a <hci_init+0xa>
    fc94:	200001a0 	.word	0x200001a0

0000fc98 <bt_hci_le_rand>:
{
    fc98:	b570      	push	{r4, r5, r6, lr}
    fc9a:	b082      	sub	sp, #8
    fc9c:	4606      	mov	r6, r0
    fc9e:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    fca0:	4b12      	ldr	r3, [pc, #72]	; (fcec <bt_hci_le_rand+0x54>)
    fca2:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    fca6:	2b00      	cmp	r3, #0
    fca8:	da1d      	bge.n	fce6 <bt_hci_le_rand+0x4e>
	while (len > 0) {
    fcaa:	b1c4      	cbz	r4, fcde <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
    fcac:	4625      	mov	r5, r4
    fcae:	2c08      	cmp	r4, #8
    fcb0:	bf28      	it	cs
    fcb2:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    fcb4:	aa01      	add	r2, sp, #4
    fcb6:	2100      	movs	r1, #0
    fcb8:	f242 0018 	movw	r0, #8216	; 0x2018
    fcbc:	f7ff fbb6 	bl	f42c <bt_hci_cmd_send_sync>
		if (err) {
    fcc0:	4603      	mov	r3, r0
    fcc2:	b968      	cbnz	r0, fce0 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
    fcc4:	9b01      	ldr	r3, [sp, #4]
    fcc6:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
    fcc8:	462a      	mov	r2, r5
    fcca:	3101      	adds	r1, #1
    fccc:	4630      	mov	r0, r6
    fcce:	f007 fc9c 	bl	1760a <memcpy>
		net_buf_unref(rsp);
    fcd2:	9801      	ldr	r0, [sp, #4]
    fcd4:	f007 ff3a 	bl	17b4c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    fcd8:	442e      	add	r6, r5
		len -= count;
    fcda:	1b64      	subs	r4, r4, r5
    fcdc:	e7e5      	b.n	fcaa <bt_hci_le_rand+0x12>
	return 0;
    fcde:	2300      	movs	r3, #0
}
    fce0:	4618      	mov	r0, r3
    fce2:	b002      	add	sp, #8
    fce4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    fce6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    fcea:	e7f9      	b.n	fce0 <bt_hci_le_rand+0x48>
    fcec:	200001a0 	.word	0x200001a0

0000fcf0 <bt_send>:
{
    fcf0:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    fcf2:	4b03      	ldr	r3, [pc, #12]	; (fd00 <bt_send+0x10>)
    fcf4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    fcf8:	695b      	ldr	r3, [r3, #20]
    fcfa:	4798      	blx	r3
}
    fcfc:	bd08      	pop	{r3, pc}
    fcfe:	bf00      	nop
    fd00:	200001a0 	.word	0x200001a0

0000fd04 <send_cmd>:
{
    fd04:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd06:	b083      	sub	sp, #12
    fd08:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fd0a:	2200      	movs	r2, #0
    fd0c:	2300      	movs	r3, #0
    fd0e:	4863      	ldr	r0, [pc, #396]	; (fe9c <send_cmd+0x198>)
    fd10:	f007 fee6 	bl	17ae0 <net_buf_get>
	BT_ASSERT(buf);
    fd14:	4604      	mov	r4, r0
    fd16:	2800      	cmp	r0, #0
    fd18:	f000 80a6 	beq.w	fe68 <send_cmd+0x164>
    fd1c:	4d60      	ldr	r5, [pc, #384]	; (fea0 <send_cmd+0x19c>)
    fd1e:	f04f 32ff 	mov.w	r2, #4294967295
    fd22:	f04f 33ff 	mov.w	r3, #4294967295
    fd26:	4628      	mov	r0, r5
    fd28:	f004 fffc 	bl	14d24 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    fd2c:	69ab      	ldr	r3, [r5, #24]
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d03d      	beq.n	fdae <send_cmd+0xaa>
		LOG_ERR("Uncleared pending sent_cmd");
    fd32:	466e      	mov	r6, sp
    fd34:	b088      	sub	sp, #32
    fd36:	466b      	mov	r3, sp
    fd38:	f113 0210 	adds.w	r2, r3, #16
    fd3c:	f000 80a2 	beq.w	fe84 <send_cmd+0x180>
    fd40:	210c      	movs	r1, #12
    fd42:	b142      	cbz	r2, fd56 <send_cmd+0x52>
    fd44:	4608      	mov	r0, r1
    fd46:	2904      	cmp	r1, #4
    fd48:	dd01      	ble.n	fd4e <send_cmd+0x4a>
    fd4a:	4d56      	ldr	r5, [pc, #344]	; (fea4 <send_cmd+0x1a0>)
    fd4c:	615d      	str	r5, [r3, #20]
    fd4e:	2808      	cmp	r0, #8
    fd50:	dd01      	ble.n	fd56 <send_cmd+0x52>
    fd52:	4855      	ldr	r0, [pc, #340]	; (fea8 <send_cmd+0x1a4>)
    fd54:	6198      	str	r0, [r3, #24]
    fd56:	290b      	cmp	r1, #11
    fd58:	f340 8097 	ble.w	fe8a <send_cmd+0x186>
    fd5c:	250c      	movs	r5, #12
    fd5e:	b13a      	cbz	r2, fd70 <send_cmd+0x6c>
    fd60:	2103      	movs	r1, #3
    fd62:	7139      	strb	r1, [r7, #4]
    fd64:	2100      	movs	r1, #0
    fd66:	7179      	strb	r1, [r7, #5]
    fd68:	71b9      	strb	r1, [r7, #6]
    fd6a:	71f9      	strb	r1, [r7, #7]
    fd6c:	6878      	ldr	r0, [r7, #4]
    fd6e:	6118      	str	r0, [r3, #16]
    fd70:	2100      	movs	r1, #0
    fd72:	f36f 0100 	bfc	r1, #0, #1
    fd76:	f36f 0141 	bfc	r1, #1, #1
    fd7a:	f36f 0182 	bfc	r1, #2, #1
    fd7e:	f36f 01c5 	bfc	r1, #3, #3
    fd82:	2301      	movs	r3, #1
    fd84:	f363 1188 	bfi	r1, r3, #6, #3
    fd88:	f3c5 050a 	ubfx	r5, r5, #0, #11
    fd8c:	f365 2153 	bfi	r1, r5, #9, #11
    fd90:	f36f 511f 	bfc	r1, #20, #12
    fd94:	2300      	movs	r3, #0
    fd96:	4845      	ldr	r0, [pc, #276]	; (feac <send_cmd+0x1a8>)
    fd98:	f7fc f866 	bl	be68 <z_impl_z_log_msg_static_create>
    fd9c:	46b5      	mov	sp, r6
		net_buf_unref(bt_dev.sent_cmd);
    fd9e:	4d44      	ldr	r5, [pc, #272]	; (feb0 <send_cmd+0x1ac>)
    fda0:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
    fda4:	f007 fed2 	bl	17b4c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fda8:	2300      	movs	r3, #0
    fdaa:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    fdae:	4620      	mov	r0, r4
    fdb0:	f007 feef 	bl	17b92 <net_buf_ref>
    fdb4:	4b3e      	ldr	r3, [pc, #248]	; (feb0 <send_cmd+0x1ac>)
    fdb6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
    fdba:	4620      	mov	r0, r4
    fdbc:	f7ff ff98 	bl	fcf0 <bt_send>
	if (err) {
    fdc0:	4605      	mov	r5, r0
    fdc2:	2800      	cmp	r0, #0
    fdc4:	d04d      	beq.n	fe62 <send_cmd+0x15e>
		LOG_ERR("Unable to send to driver (err %d)", err);
    fdc6:	466e      	mov	r6, sp
    fdc8:	b088      	sub	sp, #32
    fdca:	466b      	mov	r3, sp
    fdcc:	f113 0210 	adds.w	r2, r3, #16
    fdd0:	d05e      	beq.n	fe90 <send_cmd+0x18c>
    fdd2:	2110      	movs	r1, #16
    fdd4:	b17a      	cbz	r2, fdf6 <send_cmd+0xf2>
    fdd6:	4608      	mov	r0, r1
    fdd8:	2904      	cmp	r1, #4
    fdda:	dd03      	ble.n	fde4 <send_cmd+0xe0>
    fddc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; feb4 <send_cmd+0x1b0>
    fde0:	f8c3 c014 	str.w	ip, [r3, #20]
    fde4:	2808      	cmp	r0, #8
    fde6:	dd03      	ble.n	fdf0 <send_cmd+0xec>
    fde8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; fea8 <send_cmd+0x1a4>
    fdec:	f8c3 c018 	str.w	ip, [r3, #24]
    fdf0:	280c      	cmp	r0, #12
    fdf2:	dd00      	ble.n	fdf6 <send_cmd+0xf2>
    fdf4:	61dd      	str	r5, [r3, #28]
    fdf6:	290f      	cmp	r1, #15
    fdf8:	dd4d      	ble.n	fe96 <send_cmd+0x192>
    fdfa:	2510      	movs	r5, #16
    fdfc:	b13a      	cbz	r2, fe0e <send_cmd+0x10a>
    fdfe:	2104      	movs	r1, #4
    fe00:	7139      	strb	r1, [r7, #4]
    fe02:	2100      	movs	r1, #0
    fe04:	7179      	strb	r1, [r7, #5]
    fe06:	71b9      	strb	r1, [r7, #6]
    fe08:	71f9      	strb	r1, [r7, #7]
    fe0a:	6878      	ldr	r0, [r7, #4]
    fe0c:	6118      	str	r0, [r3, #16]
    fe0e:	2100      	movs	r1, #0
    fe10:	f36f 0100 	bfc	r1, #0, #1
    fe14:	f36f 0141 	bfc	r1, #1, #1
    fe18:	f36f 0182 	bfc	r1, #2, #1
    fe1c:	f36f 01c5 	bfc	r1, #3, #3
    fe20:	2301      	movs	r3, #1
    fe22:	f363 1188 	bfi	r1, r3, #6, #3
    fe26:	f3c5 050a 	ubfx	r5, r5, #0, #11
    fe2a:	f365 2153 	bfi	r1, r5, #9, #11
    fe2e:	f36f 511f 	bfc	r1, #20, #12
    fe32:	2300      	movs	r3, #0
    fe34:	481d      	ldr	r0, [pc, #116]	; (feac <send_cmd+0x1a8>)
    fe36:	f7fc f817 	bl	be68 <z_impl_z_log_msg_static_create>
    fe3a:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    fe3c:	4818      	ldr	r0, [pc, #96]	; (fea0 <send_cmd+0x19c>)
    fe3e:	f004 ff49 	bl	14cd4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fe42:	4620      	mov	r0, r4
    fe44:	f007 fda2 	bl	1798c <net_buf_id>
    fe48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    fe4c:	4b1a      	ldr	r3, [pc, #104]	; (feb8 <send_cmd+0x1b4>)
    fe4e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fe52:	4622      	mov	r2, r4
    fe54:	211f      	movs	r1, #31
    fe56:	8858      	ldrh	r0, [r3, #2]
    fe58:	f7fe fd5a 	bl	e910 <hci_cmd_done>
		net_buf_unref(buf);
    fe5c:	4620      	mov	r0, r4
    fe5e:	f007 fe75 	bl	17b4c <net_buf_unref>
}
    fe62:	370c      	adds	r7, #12
    fe64:	46bd      	mov	sp, r7
    fe66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf);
    fe68:	f640 235a 	movw	r3, #2650	; 0xa5a
    fe6c:	4a13      	ldr	r2, [pc, #76]	; (febc <send_cmd+0x1b8>)
    fe6e:	4914      	ldr	r1, [pc, #80]	; (fec0 <send_cmd+0x1bc>)
    fe70:	4814      	ldr	r0, [pc, #80]	; (fec4 <send_cmd+0x1c0>)
    fe72:	f006 fe54 	bl	16b1e <assert_print>
    fe76:	4040      	eors	r0, r0
    fe78:	f380 8811 	msr	BASEPRI, r0
    fe7c:	f04f 0003 	mov.w	r0, #3
    fe80:	df02      	svc	2
    fe82:	e74b      	b.n	fd1c <send_cmd+0x18>
		LOG_ERR("Uncleared pending sent_cmd");
    fe84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe88:	e75b      	b.n	fd42 <send_cmd+0x3e>
    fe8a:	f06f 051b 	mvn.w	r5, #27
    fe8e:	e766      	b.n	fd5e <send_cmd+0x5a>
		LOG_ERR("Unable to send to driver (err %d)", err);
    fe90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe94:	e79e      	b.n	fdd4 <send_cmd+0xd0>
    fe96:	f06f 051b 	mvn.w	r5, #27
    fe9a:	e7af      	b.n	fdfc <send_cmd+0xf8>
    fe9c:	200002ac 	.word	0x200002ac
    fea0:	20000288 	.word	0x20000288
    fea4:	0001b0c8 	.word	0x0001b0c8
    fea8:	0001b194 	.word	0x0001b194
    feac:	0001a0bc 	.word	0x0001a0bc
    feb0:	200001a0 	.word	0x200001a0
    feb4:	0001b0a0 	.word	0x0001b0a0
    feb8:	20001fe4 	.word	0x20001fe4
    febc:	0001adac 	.word	0x0001adac
    fec0:	0001b5c8 	.word	0x0001b5c8
    fec4:	0001adfc 	.word	0x0001adfc

0000fec8 <process_events>:
{
    fec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fecc:	b082      	sub	sp, #8
    fece:	af00      	add	r7, sp, #0
    fed0:	4604      	mov	r4, r0
    fed2:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
    fed4:	e03e      	b.n	ff54 <process_events+0x8c>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    fed6:	46e8      	mov	r8, sp
    fed8:	b088      	sub	sp, #32
    feda:	4669      	mov	r1, sp
    fedc:	f111 0210 	adds.w	r2, r1, #16
    fee0:	d046      	beq.n	ff70 <process_events+0xa8>
    fee2:	2010      	movs	r0, #16
    fee4:	b18a      	cbz	r2, ff0a <process_events+0x42>
    fee6:	4684      	mov	ip, r0
    fee8:	2804      	cmp	r0, #4
    feea:	dd03      	ble.n	fef4 <process_events+0x2c>
    feec:	f8df e094 	ldr.w	lr, [pc, #148]	; ff84 <process_events+0xbc>
    fef0:	f8c1 e014 	str.w	lr, [r1, #20]
    fef4:	f1bc 0f08 	cmp.w	ip, #8
    fef8:	dd03      	ble.n	ff02 <process_events+0x3a>
    fefa:	f8df e08c 	ldr.w	lr, [pc, #140]	; ff88 <process_events+0xc0>
    fefe:	f8c1 e018 	str.w	lr, [r1, #24]
    ff02:	f1bc 0f0c 	cmp.w	ip, #12
    ff06:	dd00      	ble.n	ff0a <process_events+0x42>
    ff08:	61cb      	str	r3, [r1, #28]
    ff0a:	280f      	cmp	r0, #15
    ff0c:	dd33      	ble.n	ff76 <process_events+0xae>
    ff0e:	2310      	movs	r3, #16
    ff10:	b13a      	cbz	r2, ff22 <process_events+0x5a>
    ff12:	2004      	movs	r0, #4
    ff14:	7138      	strb	r0, [r7, #4]
    ff16:	2000      	movs	r0, #0
    ff18:	7178      	strb	r0, [r7, #5]
    ff1a:	71b8      	strb	r0, [r7, #6]
    ff1c:	71f8      	strb	r0, [r7, #7]
    ff1e:	6878      	ldr	r0, [r7, #4]
    ff20:	6108      	str	r0, [r1, #16]
    ff22:	f36f 0600 	bfc	r6, #0, #1
    ff26:	f36f 0641 	bfc	r6, #1, #1
    ff2a:	f36f 0682 	bfc	r6, #2, #1
    ff2e:	f36f 06c5 	bfc	r6, #3, #3
    ff32:	2102      	movs	r1, #2
    ff34:	f361 1688 	bfi	r6, r1, #6, #3
    ff38:	f3c3 030a 	ubfx	r3, r3, #0, #11
    ff3c:	f363 2653 	bfi	r6, r3, #9, #11
    ff40:	f36f 561f 	bfc	r6, #20, #12
    ff44:	2300      	movs	r3, #0
    ff46:	4631      	mov	r1, r6
    ff48:	4810      	ldr	r0, [pc, #64]	; (ff8c <process_events+0xc4>)
    ff4a:	f7fb ff8d 	bl	be68 <z_impl_z_log_msg_static_create>
    ff4e:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
    ff50:	3414      	adds	r4, #20
    ff52:	3d01      	subs	r5, #1
    ff54:	b195      	cbz	r5, ff7c <process_events+0xb4>
		switch (ev->state) {
    ff56:	68e3      	ldr	r3, [r4, #12]
    ff58:	f3c3 3386 	ubfx	r3, r3, #14, #7
    ff5c:	2b02      	cmp	r3, #2
    ff5e:	d9f7      	bls.n	ff50 <process_events+0x88>
    ff60:	2b04      	cmp	r3, #4
    ff62:	d1b8      	bne.n	fed6 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
    ff64:	7b23      	ldrb	r3, [r4, #12]
    ff66:	2b00      	cmp	r3, #0
    ff68:	d1f2      	bne.n	ff50 <process_events+0x88>
				send_cmd();
    ff6a:	f7ff fecb 	bl	fd04 <send_cmd>
    ff6e:	e7ef      	b.n	ff50 <process_events+0x88>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    ff70:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ff74:	e7b6      	b.n	fee4 <process_events+0x1c>
    ff76:	f06f 031b 	mvn.w	r3, #27
    ff7a:	e7c9      	b.n	ff10 <process_events+0x48>
}
    ff7c:	3708      	adds	r7, #8
    ff7e:	46bd      	mov	sp, r7
    ff80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff84:	0001b0e8 	.word	0x0001b0e8
    ff88:	0001b1a0 	.word	0x0001b1a0
    ff8c:	0001a0bc 	.word	0x0001a0bc

0000ff90 <hci_tx_thread>:
{
    ff90:	b508      	push	{r3, lr}
    ff92:	e012      	b.n	ffba <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
    ff94:	f640 23c8 	movw	r3, #2760	; 0xac8
    ff98:	4a0f      	ldr	r2, [pc, #60]	; (ffd8 <hci_tx_thread+0x48>)
    ff9a:	4910      	ldr	r1, [pc, #64]	; (ffdc <hci_tx_thread+0x4c>)
    ff9c:	4810      	ldr	r0, [pc, #64]	; (ffe0 <hci_tx_thread+0x50>)
    ff9e:	f006 fdbe 	bl	16b1e <assert_print>
    ffa2:	4040      	eors	r0, r0
    ffa4:	f380 8811 	msr	BASEPRI, r0
    ffa8:	f04f 0003 	mov.w	r0, #3
    ffac:	df02      	svc	2
		process_events(events, ev_count);
    ffae:	2101      	movs	r1, #1
    ffb0:	480c      	ldr	r0, [pc, #48]	; (ffe4 <hci_tx_thread+0x54>)
    ffb2:	f7ff ff89 	bl	fec8 <process_events>
	z_impl_k_yield();
    ffb6:	f005 fad3 	bl	15560 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    ffba:	480a      	ldr	r0, [pc, #40]	; (ffe4 <hci_tx_thread+0x54>)
    ffbc:	68c3      	ldr	r3, [r0, #12]
    ffbe:	f36f 3394 	bfc	r3, #14, #7
    ffc2:	60c3      	str	r3, [r0, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    ffc4:	f04f 32ff 	mov.w	r2, #4294967295
    ffc8:	f04f 33ff 	mov.w	r3, #4294967295
    ffcc:	2101      	movs	r1, #1
    ffce:	f005 fdc5 	bl	15b5c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    ffd2:	2800      	cmp	r0, #0
    ffd4:	d1de      	bne.n	ff94 <hci_tx_thread+0x4>
    ffd6:	e7ea      	b.n	ffae <hci_tx_thread+0x1e>
    ffd8:	0001adac 	.word	0x0001adac
    ffdc:	0001af28 	.word	0x0001af28
    ffe0:	0001adfc 	.word	0x0001adfc
    ffe4:	200002dc 	.word	0x200002dc

0000ffe8 <hci_event_prio>:
{
    ffe8:	b570      	push	{r4, r5, r6, lr}
    ffea:	b082      	sub	sp, #8
    ffec:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    ffee:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    fff2:	4628      	mov	r0, r5
    fff4:	f007 fdfe 	bl	17bf4 <net_buf_simple_headroom>
    fff8:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    fffc:	8a23      	ldrh	r3, [r4, #16]
    fffe:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   10002:	2b01      	cmp	r3, #1
   10004:	d923      	bls.n	1004e <CONFIG_PM_SRAM_SIZE+0x4e>
	return net_buf_simple_pull_mem(&buf->b, len);
   10006:	2102      	movs	r1, #2
   10008:	4628      	mov	r0, r5
   1000a:	f007 fde3 	bl	17bd4 <net_buf_simple_pull_mem>
   1000e:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10010:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   10012:	2b05      	cmp	r3, #5
   10014:	d02b      	beq.n	1006e <CONFIG_PM_SRAM_SIZE+0x6e>
   10016:	d32c      	bcc.n	10072 <CONFIG_PM_SRAM_SIZE+0x72>
   10018:	3b0e      	subs	r3, #14
   1001a:	b2db      	uxtb	r3, r3
   1001c:	2b01      	cmp	r3, #1
   1001e:	d824      	bhi.n	1006a <CONFIG_PM_SRAM_SIZE+0x6a>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   10020:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10022:	f016 0f01 	tst.w	r6, #1
   10026:	d026      	beq.n	10076 <CONFIG_PM_SRAM_SIZE+0x76>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   10028:	2302      	movs	r3, #2
   1002a:	4a1c      	ldr	r2, [pc, #112]	; (1009c <CONFIG_PM_SRAM_SIZE+0x9c>)
   1002c:	4621      	mov	r1, r4
   1002e:	7828      	ldrb	r0, [r5, #0]
   10030:	f7fe fdf2 	bl	ec18 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   10034:	f016 0f02 	tst.w	r6, #2
   10038:	d02b      	beq.n	10092 <CONFIG_PM_SRAM_SIZE+0x92>
	buf->data = buf->__buf + state->offset;
   1003a:	6963      	ldr	r3, [r4, #20]
   1003c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10040:	4413      	add	r3, r2
   10042:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   10044:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10048:	8223      	strh	r3, [r4, #16]
}
   1004a:	b002      	add	sp, #8
   1004c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1004e:	f640 636f 	movw	r3, #3695	; 0xe6f
   10052:	4a13      	ldr	r2, [pc, #76]	; (100a0 <CONFIG_PM_SRAM_SIZE+0xa0>)
   10054:	4913      	ldr	r1, [pc, #76]	; (100a4 <CONFIG_PM_SRAM_SIZE+0xa4>)
   10056:	4814      	ldr	r0, [pc, #80]	; (100a8 <CONFIG_PM_SRAM_SIZE+0xa8>)
   10058:	f006 fd61 	bl	16b1e <assert_print>
   1005c:	4040      	eors	r0, r0
   1005e:	f380 8811 	msr	BASEPRI, r0
   10062:	f04f 0003 	mov.w	r0, #3
   10066:	df02      	svc	2
   10068:	e7cd      	b.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
		return BT_HCI_EVT_FLAG_RECV;
   1006a:	2602      	movs	r6, #2
   1006c:	e7d9      	b.n	10022 <CONFIG_PM_SRAM_SIZE+0x22>
	switch (evt) {
   1006e:	2603      	movs	r6, #3
   10070:	e7d7      	b.n	10022 <CONFIG_PM_SRAM_SIZE+0x22>
		return BT_HCI_EVT_FLAG_RECV;
   10072:	2602      	movs	r6, #2
   10074:	e7d5      	b.n	10022 <CONFIG_PM_SRAM_SIZE+0x22>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10076:	f640 6373 	movw	r3, #3699	; 0xe73
   1007a:	4a09      	ldr	r2, [pc, #36]	; (100a0 <CONFIG_PM_SRAM_SIZE+0xa0>)
   1007c:	490b      	ldr	r1, [pc, #44]	; (100ac <CONFIG_PM_SRAM_SIZE+0xac>)
   1007e:	480a      	ldr	r0, [pc, #40]	; (100a8 <CONFIG_PM_SRAM_SIZE+0xa8>)
   10080:	f006 fd4d 	bl	16b1e <assert_print>
   10084:	4040      	eors	r0, r0
   10086:	f380 8811 	msr	BASEPRI, r0
   1008a:	f04f 0003 	mov.w	r0, #3
   1008e:	df02      	svc	2
   10090:	e7ca      	b.n	10028 <CONFIG_PM_SRAM_SIZE+0x28>
		net_buf_unref(buf);
   10092:	4620      	mov	r0, r4
   10094:	f007 fd5a 	bl	17b4c <net_buf_unref>
}
   10098:	e7d7      	b.n	1004a <CONFIG_PM_SRAM_SIZE+0x4a>
   1009a:	bf00      	nop
   1009c:	0001b3a4 	.word	0x0001b3a4
   100a0:	0001adac 	.word	0x0001adac
   100a4:	0001ade0 	.word	0x0001ade0
   100a8:	0001adfc 	.word	0x0001adfc
   100ac:	0001b110 	.word	0x0001b110

000100b0 <bt_recv>:
{
   100b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   100b2:	b083      	sub	sp, #12
   100b4:	af00      	add	r7, sp, #0
   100b6:	4605      	mov	r5, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   100b8:	7e04      	ldrb	r4, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   100ba:	2c01      	cmp	r4, #1
   100bc:	d121      	bne.n	10102 <bt_recv+0x52>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   100be:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   100c0:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   100c2:	2b05      	cmp	r3, #5
   100c4:	d010      	beq.n	100e8 <bt_recv+0x38>
   100c6:	d311      	bcc.n	100ec <bt_recv+0x3c>
   100c8:	3b0e      	subs	r3, #14
   100ca:	b2db      	uxtb	r3, r3
   100cc:	2b01      	cmp	r3, #1
   100ce:	d809      	bhi.n	100e4 <bt_recv+0x34>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   100d0:	f014 0f01 	tst.w	r4, #1
   100d4:	d10c      	bne.n	100f0 <bt_recv+0x40>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   100d6:	f014 0f02 	tst.w	r4, #2
   100da:	d10d      	bne.n	100f8 <bt_recv+0x48>
		return 0;
   100dc:	2000      	movs	r0, #0
}
   100de:	370c      	adds	r7, #12
   100e0:	46bd      	mov	sp, r7
   100e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV;
   100e4:	2402      	movs	r4, #2
   100e6:	e7f3      	b.n	100d0 <bt_recv+0x20>
	switch (evt) {
   100e8:	2403      	movs	r4, #3
   100ea:	e7f1      	b.n	100d0 <bt_recv+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   100ec:	2402      	movs	r4, #2
   100ee:	e7ef      	b.n	100d0 <bt_recv+0x20>
			hci_event_prio(buf);
   100f0:	4628      	mov	r0, r5
   100f2:	f7ff ff79 	bl	ffe8 <hci_event_prio>
   100f6:	e7ee      	b.n	100d6 <bt_recv+0x26>
			rx_queue_put(buf);
   100f8:	4628      	mov	r0, r5
   100fa:	f7fe fe67 	bl	edcc <rx_queue_put>
		return 0;
   100fe:	2000      	movs	r0, #0
   10100:	e7ed      	b.n	100de <bt_recv+0x2e>
   10102:	4623      	mov	r3, r4
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   10104:	466c      	mov	r4, sp
   10106:	b088      	sub	sp, #32
   10108:	4669      	mov	r1, sp
   1010a:	f111 0210 	adds.w	r2, r1, #16
   1010e:	d038      	beq.n	10182 <bt_recv+0xd2>
   10110:	2010      	movs	r0, #16
   10112:	b16a      	cbz	r2, 10130 <bt_recv+0x80>
   10114:	4684      	mov	ip, r0
   10116:	2804      	cmp	r0, #4
   10118:	dd01      	ble.n	1011e <bt_recv+0x6e>
   1011a:	4e1d      	ldr	r6, [pc, #116]	; (10190 <bt_recv+0xe0>)
   1011c:	614e      	str	r6, [r1, #20]
   1011e:	f1bc 0f08 	cmp.w	ip, #8
   10122:	dd01      	ble.n	10128 <bt_recv+0x78>
   10124:	4e1b      	ldr	r6, [pc, #108]	; (10194 <bt_recv+0xe4>)
   10126:	618e      	str	r6, [r1, #24]
   10128:	f1bc 0f0c 	cmp.w	ip, #12
   1012c:	dd00      	ble.n	10130 <bt_recv+0x80>
   1012e:	61cb      	str	r3, [r1, #28]
   10130:	280f      	cmp	r0, #15
   10132:	dd29      	ble.n	10188 <bt_recv+0xd8>
   10134:	2310      	movs	r3, #16
   10136:	b13a      	cbz	r2, 10148 <bt_recv+0x98>
   10138:	2004      	movs	r0, #4
   1013a:	7138      	strb	r0, [r7, #4]
   1013c:	2000      	movs	r0, #0
   1013e:	7178      	strb	r0, [r7, #5]
   10140:	71b8      	strb	r0, [r7, #6]
   10142:	71f8      	strb	r0, [r7, #7]
   10144:	6878      	ldr	r0, [r7, #4]
   10146:	6108      	str	r0, [r1, #16]
   10148:	2100      	movs	r1, #0
   1014a:	f36f 0100 	bfc	r1, #0, #1
   1014e:	f36f 0141 	bfc	r1, #1, #1
   10152:	f36f 0182 	bfc	r1, #2, #1
   10156:	f36f 01c5 	bfc	r1, #3, #3
   1015a:	2001      	movs	r0, #1
   1015c:	f360 1188 	bfi	r1, r0, #6, #3
   10160:	f3c3 030a 	ubfx	r3, r3, #0, #11
   10164:	f363 2153 	bfi	r1, r3, #9, #11
   10168:	f36f 511f 	bfc	r1, #20, #12
   1016c:	2300      	movs	r3, #0
   1016e:	480a      	ldr	r0, [pc, #40]	; (10198 <bt_recv+0xe8>)
   10170:	f7fb fe7a 	bl	be68 <z_impl_z_log_msg_static_create>
   10174:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   10176:	4628      	mov	r0, r5
   10178:	f007 fce8 	bl	17b4c <net_buf_unref>
		return -EINVAL;
   1017c:	f06f 0015 	mvn.w	r0, #21
   10180:	e7ad      	b.n	100de <bt_recv+0x2e>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   10182:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10186:	e7c4      	b.n	10112 <bt_recv+0x62>
   10188:	f06f 031b 	mvn.w	r3, #27
   1018c:	e7d3      	b.n	10136 <bt_recv+0x86>
   1018e:	bf00      	nop
   10190:	0001b12c 	.word	0x0001b12c
   10194:	0001b30c 	.word	0x0001b30c
   10198:	0001a0bc 	.word	0x0001a0bc

0001019c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1019c:	4b0a      	ldr	r3, [pc, #40]	; (101c8 <bt_hci_driver_register+0x2c>)
   1019e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   101a2:	b943      	cbnz	r3, 101b6 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   101a4:	68c3      	ldr	r3, [r0, #12]
   101a6:	b14b      	cbz	r3, 101bc <bt_hci_driver_register+0x20>
   101a8:	6943      	ldr	r3, [r0, #20]
   101aa:	b153      	cbz	r3, 101c2 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   101ac:	4b06      	ldr	r3, [pc, #24]	; (101c8 <bt_hci_driver_register+0x2c>)
   101ae:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	return 0;
   101b2:	2000      	movs	r0, #0
   101b4:	4770      	bx	lr
		return -EALREADY;
   101b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   101ba:	4770      	bx	lr
		return -EINVAL;
   101bc:	f06f 0015 	mvn.w	r0, #21
   101c0:	4770      	bx	lr
   101c2:	f06f 0015 	mvn.w	r0, #21
}
   101c6:	4770      	bx	lr
   101c8:	200001a0 	.word	0x200001a0

000101cc <bt_finalize_init>:
{
   101cc:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   101ce:	4b09      	ldr	r3, [pc, #36]	; (101f4 <bt_finalize_init+0x28>)
   101d0:	f3bf 8f5b 	dmb	ish
   101d4:	e853 1f00 	ldrex	r1, [r3]
   101d8:	f041 0104 	orr.w	r1, r1, #4
   101dc:	e843 1200 	strex	r2, r1, [r3]
   101e0:	2a00      	cmp	r2, #0
   101e2:	d1f7      	bne.n	101d4 <bt_finalize_init+0x8>
   101e4:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   101e8:	2000      	movs	r0, #0
   101ea:	f000 fe3b 	bl	10e64 <bt_le_scan_update>
	bt_dev_show_info();
   101ee:	f7fe fef9 	bl	efe4 <bt_dev_show_info>
}
   101f2:	bd08      	pop	{r3, pc}
   101f4:	20000274 	.word	0x20000274

000101f8 <init_work>:
{
   101f8:	b508      	push	{r3, lr}
	err = bt_init();
   101fa:	f007 fafc 	bl	177f6 <bt_init>
	if (ready_cb) {
   101fe:	4b02      	ldr	r3, [pc, #8]	; (10208 <init_work+0x10>)
   10200:	681b      	ldr	r3, [r3, #0]
   10202:	b103      	cbz	r3, 10206 <init_work+0xe>
		ready_cb(err);
   10204:	4798      	blx	r3
}
   10206:	bd08      	pop	{r3, pc}
   10208:	20001ffc 	.word	0x20001ffc

0001020c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10210:	b08a      	sub	sp, #40	; 0x28
   10212:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   10214:	4b76      	ldr	r3, [pc, #472]	; (103f0 <bt_enable+0x1e4>)
   10216:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   1021a:	2b00      	cmp	r3, #0
   1021c:	d065      	beq.n	102ea <bt_enable+0xde>
   1021e:	4605      	mov	r5, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10220:	4b74      	ldr	r3, [pc, #464]	; (103f4 <bt_enable+0x1e8>)
   10222:	f3bf 8f5b 	dmb	ish
   10226:	e853 2f00 	ldrex	r2, [r3]
   1022a:	f022 0202 	bic.w	r2, r2, #2
   1022e:	e843 2100 	strex	r1, r2, [r3]
   10232:	2900      	cmp	r1, #0
   10234:	d1f7      	bne.n	10226 <bt_enable+0x1a>
   10236:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1023a:	f3bf 8f5b 	dmb	ish
   1023e:	e853 2f00 	ldrex	r2, [r3]
   10242:	f042 0101 	orr.w	r1, r2, #1
   10246:	e843 1000 	strex	r0, r1, [r3]
   1024a:	2800      	cmp	r0, #0
   1024c:	d1f7      	bne.n	1023e <bt_enable+0x32>
   1024e:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10252:	f012 0f01 	tst.w	r2, #1
   10256:	f040 80c7 	bne.w	103e8 <bt_enable+0x1dc>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   1025a:	4b67      	ldr	r3, [pc, #412]	; (103f8 <bt_enable+0x1ec>)
   1025c:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1025e:	4e67      	ldr	r6, [pc, #412]	; (103fc <bt_enable+0x1f0>)
   10260:	2201      	movs	r2, #1
   10262:	4611      	mov	r1, r2
   10264:	4630      	mov	r0, r6
   10266:	f009 f923 	bl	194b0 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1026a:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1026e:	f009 f8fc 	bl	1946a <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10272:	f8df 818c 	ldr.w	r8, [pc, #396]	; 10400 <bt_enable+0x1f4>
   10276:	2200      	movs	r2, #0
   10278:	2300      	movs	r3, #0
   1027a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1027e:	2400      	movs	r4, #0
   10280:	9404      	str	r4, [sp, #16]
   10282:	f06f 0308 	mvn.w	r3, #8
   10286:	9303      	str	r3, [sp, #12]
   10288:	9402      	str	r4, [sp, #8]
   1028a:	9401      	str	r4, [sp, #4]
   1028c:	9400      	str	r4, [sp, #0]
   1028e:	4b5d      	ldr	r3, [pc, #372]	; (10404 <bt_enable+0x1f8>)
   10290:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   10294:	495c      	ldr	r1, [pc, #368]	; (10408 <bt_enable+0x1fc>)
   10296:	4640      	mov	r0, r8
   10298:	f009 f816 	bl	192c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1029c:	495b      	ldr	r1, [pc, #364]	; (1040c <bt_enable+0x200>)
   1029e:	4640      	mov	r0, r8
   102a0:	f004 fb2c 	bl	148fc <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   102a4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 10410 <bt_enable+0x204>
   102a8:	4640      	mov	r0, r8
   102aa:	f009 f993 	bl	195d4 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   102ae:	9400      	str	r4, [sp, #0]
   102b0:	f06f 0307 	mvn.w	r3, #7
   102b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   102b8:	4956      	ldr	r1, [pc, #344]	; (10414 <bt_enable+0x208>)
   102ba:	4640      	mov	r0, r8
   102bc:	f004 fe48 	bl	14f50 <k_work_queue_start>
   102c0:	4955      	ldr	r1, [pc, #340]	; (10418 <bt_enable+0x20c>)
   102c2:	4640      	mov	r0, r8
   102c4:	f004 fb1a 	bl	148fc <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   102c8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   102ca:	68db      	ldr	r3, [r3, #12]
   102cc:	4798      	blx	r3
	if (err) {
   102ce:	4604      	mov	r4, r0
   102d0:	2800      	cmp	r0, #0
   102d2:	d147      	bne.n	10364 <bt_enable+0x158>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   102d4:	2d00      	cmp	r5, #0
   102d6:	f000 8083 	beq.w	103e0 <bt_enable+0x1d4>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   102da:	4850      	ldr	r0, [pc, #320]	; (1041c <bt_enable+0x210>)
   102dc:	f004 fe30 	bl	14f40 <k_work_submit>
	return 0;
}
   102e0:	4620      	mov	r0, r4
   102e2:	3708      	adds	r7, #8
   102e4:	46bd      	mov	sp, r7
   102e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   102ea:	466d      	mov	r5, sp
   102ec:	b088      	sub	sp, #32
   102ee:	462b      	mov	r3, r5
   102f0:	f115 0210 	adds.w	r2, r5, #16
   102f4:	d030      	beq.n	10358 <bt_enable+0x14c>
   102f6:	210c      	movs	r1, #12
   102f8:	b142      	cbz	r2, 1030c <bt_enable+0x100>
   102fa:	4608      	mov	r0, r1
   102fc:	2904      	cmp	r1, #4
   102fe:	dd01      	ble.n	10304 <bt_enable+0xf8>
   10300:	4c47      	ldr	r4, [pc, #284]	; (10420 <bt_enable+0x214>)
   10302:	615c      	str	r4, [r3, #20]
   10304:	2808      	cmp	r0, #8
   10306:	dd01      	ble.n	1030c <bt_enable+0x100>
   10308:	4846      	ldr	r0, [pc, #280]	; (10424 <bt_enable+0x218>)
   1030a:	6198      	str	r0, [r3, #24]
   1030c:	290b      	cmp	r1, #11
   1030e:	dd26      	ble.n	1035e <bt_enable+0x152>
   10310:	240c      	movs	r4, #12
   10312:	b13a      	cbz	r2, 10324 <bt_enable+0x118>
   10314:	2103      	movs	r1, #3
   10316:	7139      	strb	r1, [r7, #4]
   10318:	2100      	movs	r1, #0
   1031a:	7179      	strb	r1, [r7, #5]
   1031c:	71b9      	strb	r1, [r7, #6]
   1031e:	71f9      	strb	r1, [r7, #7]
   10320:	6878      	ldr	r0, [r7, #4]
   10322:	6118      	str	r0, [r3, #16]
   10324:	2100      	movs	r1, #0
   10326:	f36f 0100 	bfc	r1, #0, #1
   1032a:	f36f 0141 	bfc	r1, #1, #1
   1032e:	f36f 0182 	bfc	r1, #2, #1
   10332:	f36f 01c5 	bfc	r1, #3, #3
   10336:	2301      	movs	r3, #1
   10338:	f363 1188 	bfi	r1, r3, #6, #3
   1033c:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10340:	f363 2153 	bfi	r1, r3, #9, #11
   10344:	f36f 511f 	bfc	r1, #20, #12
   10348:	2300      	movs	r3, #0
   1034a:	4837      	ldr	r0, [pc, #220]	; (10428 <bt_enable+0x21c>)
   1034c:	f7fb fd8c 	bl	be68 <z_impl_z_log_msg_static_create>
   10350:	46ad      	mov	sp, r5
		return -ENODEV;
   10352:	f06f 0412 	mvn.w	r4, #18
   10356:	e7c3      	b.n	102e0 <bt_enable+0xd4>
		LOG_ERR("No HCI driver registered");
   10358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1035c:	e7cc      	b.n	102f8 <bt_enable+0xec>
   1035e:	f06f 041b 	mvn.w	r4, #27
   10362:	e7d6      	b.n	10312 <bt_enable+0x106>
		LOG_ERR("HCI driver open failed (%d)", err);
   10364:	466e      	mov	r6, sp
   10366:	b088      	sub	sp, #32
   10368:	4633      	mov	r3, r6
   1036a:	f116 0210 	adds.w	r2, r6, #16
   1036e:	d031      	beq.n	103d4 <bt_enable+0x1c8>
   10370:	2110      	movs	r1, #16
   10372:	b15a      	cbz	r2, 1038c <bt_enable+0x180>
   10374:	4608      	mov	r0, r1
   10376:	2904      	cmp	r1, #4
   10378:	dd01      	ble.n	1037e <bt_enable+0x172>
   1037a:	4d2c      	ldr	r5, [pc, #176]	; (1042c <bt_enable+0x220>)
   1037c:	615d      	str	r5, [r3, #20]
   1037e:	2808      	cmp	r0, #8
   10380:	dd01      	ble.n	10386 <bt_enable+0x17a>
   10382:	4d28      	ldr	r5, [pc, #160]	; (10424 <bt_enable+0x218>)
   10384:	619d      	str	r5, [r3, #24]
   10386:	280c      	cmp	r0, #12
   10388:	dd00      	ble.n	1038c <bt_enable+0x180>
   1038a:	61dc      	str	r4, [r3, #28]
   1038c:	290f      	cmp	r1, #15
   1038e:	dd24      	ble.n	103da <bt_enable+0x1ce>
   10390:	2510      	movs	r5, #16
   10392:	b13a      	cbz	r2, 103a4 <bt_enable+0x198>
   10394:	2104      	movs	r1, #4
   10396:	7139      	strb	r1, [r7, #4]
   10398:	2100      	movs	r1, #0
   1039a:	7179      	strb	r1, [r7, #5]
   1039c:	71b9      	strb	r1, [r7, #6]
   1039e:	71f9      	strb	r1, [r7, #7]
   103a0:	6878      	ldr	r0, [r7, #4]
   103a2:	6118      	str	r0, [r3, #16]
   103a4:	2100      	movs	r1, #0
   103a6:	f36f 0100 	bfc	r1, #0, #1
   103aa:	f36f 0141 	bfc	r1, #1, #1
   103ae:	f36f 0182 	bfc	r1, #2, #1
   103b2:	f36f 01c5 	bfc	r1, #3, #3
   103b6:	2301      	movs	r3, #1
   103b8:	f363 1188 	bfi	r1, r3, #6, #3
   103bc:	f3c5 030a 	ubfx	r3, r5, #0, #11
   103c0:	f363 2153 	bfi	r1, r3, #9, #11
   103c4:	f36f 511f 	bfc	r1, #20, #12
   103c8:	2300      	movs	r3, #0
   103ca:	4817      	ldr	r0, [pc, #92]	; (10428 <bt_enable+0x21c>)
   103cc:	f7fb fd4c 	bl	be68 <z_impl_z_log_msg_static_create>
   103d0:	46b5      	mov	sp, r6
		return err;
   103d2:	e785      	b.n	102e0 <bt_enable+0xd4>
		LOG_ERR("HCI driver open failed (%d)", err);
   103d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   103d8:	e7cb      	b.n	10372 <bt_enable+0x166>
   103da:	f06f 051b 	mvn.w	r5, #27
   103de:	e7d8      	b.n	10392 <bt_enable+0x186>
		return bt_init();
   103e0:	f007 fa09 	bl	177f6 <bt_init>
   103e4:	4604      	mov	r4, r0
   103e6:	e77b      	b.n	102e0 <bt_enable+0xd4>
		return -EALREADY;
   103e8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   103ec:	e778      	b.n	102e0 <bt_enable+0xd4>
   103ee:	bf00      	nop
   103f0:	200001a0 	.word	0x200001a0
   103f4:	20000274 	.word	0x20000274
   103f8:	20001ffc 	.word	0x20001ffc
   103fc:	20000288 	.word	0x20000288
   10400:	20001818 	.word	0x20001818
   10404:	0000ff91 	.word	0x0000ff91
   10408:	20002a40 	.word	0x20002a40
   1040c:	0001b164 	.word	0x0001b164
   10410:	200018d0 	.word	0x200018d0
   10414:	20003080 	.word	0x20003080
   10418:	0001b16c 	.word	0x0001b16c
   1041c:	20000264 	.word	0x20000264
   10420:	0001b144 	.word	0x0001b144
   10424:	0001b1b0 	.word	0x0001b1b0
   10428:	0001a0bc 	.word	0x0001a0bc
   1042c:	0001b174 	.word	0x0001b174

00010430 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10430:	f3bf 8f5b 	dmb	ish
   10434:	4b03      	ldr	r3, [pc, #12]	; (10444 <bt_is_ready+0x14>)
   10436:	6818      	ldr	r0, [r3, #0]
   10438:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1043c:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   10440:	4770      	bx	lr
   10442:	bf00      	nop
   10444:	20000274 	.word	0x20000274

00010448 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   10448:	b570      	push	{r4, r5, r6, lr}
   1044a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1044c:	2400      	movs	r4, #0
   1044e:	e001      	b.n	10454 <id_find+0xc>
   10450:	3401      	adds	r4, #1
   10452:	b2e4      	uxtb	r4, r4
   10454:	4b09      	ldr	r3, [pc, #36]	; (1047c <id_find+0x34>)
   10456:	79db      	ldrb	r3, [r3, #7]
   10458:	42a3      	cmp	r3, r4
   1045a:	d90b      	bls.n	10474 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1045c:	4626      	mov	r6, r4
   1045e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   10462:	2207      	movs	r2, #7
   10464:	4b05      	ldr	r3, [pc, #20]	; (1047c <id_find+0x34>)
   10466:	4419      	add	r1, r3
   10468:	4628      	mov	r0, r5
   1046a:	f007 f8bc 	bl	175e6 <memcmp>
   1046e:	2800      	cmp	r0, #0
   10470:	d1ee      	bne.n	10450 <id_find+0x8>
   10472:	e001      	b.n	10478 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   10474:	f06f 0601 	mvn.w	r6, #1
}
   10478:	4630      	mov	r0, r6
   1047a:	bd70      	pop	{r4, r5, r6, pc}
   1047c:	200001a0 	.word	0x200001a0

00010480 <set_random_address>:
{
   10480:	b570      	push	{r4, r5, r6, lr}
   10482:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   10484:	2206      	movs	r2, #6
   10486:	4914      	ldr	r1, [pc, #80]	; (104d8 <set_random_address+0x58>)
   10488:	f007 f8ad 	bl	175e6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1048c:	4605      	mov	r5, r0
   1048e:	b908      	cbnz	r0, 10494 <set_random_address+0x14>
}
   10490:	4628      	mov	r0, r5
   10492:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   10494:	2106      	movs	r1, #6
   10496:	f242 0005 	movw	r0, #8197	; 0x2005
   1049a:	f7fe ff89 	bl	f3b0 <bt_hci_cmd_create>
	if (!buf) {
   1049e:	4605      	mov	r5, r0
   104a0:	b1b8      	cbz	r0, 104d2 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   104a2:	2206      	movs	r2, #6
   104a4:	4621      	mov	r1, r4
   104a6:	300c      	adds	r0, #12
   104a8:	f007 fb81 	bl	17bae <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   104ac:	2200      	movs	r2, #0
   104ae:	4629      	mov	r1, r5
   104b0:	f242 0005 	movw	r0, #8197	; 0x2005
   104b4:	f7fe ffba 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
   104b8:	4605      	mov	r5, r0
   104ba:	2800      	cmp	r0, #0
   104bc:	d1e8      	bne.n	10490 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   104be:	4e06      	ldr	r6, [pc, #24]	; (104d8 <set_random_address+0x58>)
   104c0:	2206      	movs	r2, #6
   104c2:	4621      	mov	r1, r4
   104c4:	4630      	mov	r0, r6
   104c6:	f007 f8a0 	bl	1760a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   104ca:	2301      	movs	r3, #1
   104cc:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   104d0:	e7de      	b.n	10490 <set_random_address+0x10>
		return -ENOBUFS;
   104d2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   104d6:	e7db      	b.n	10490 <set_random_address+0x10>
   104d8:	20000209 	.word	0x20000209

000104dc <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   104dc:	b570      	push	{r4, r5, r6, lr}
   104de:	b082      	sub	sp, #8
   104e0:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   104e2:	460e      	mov	r6, r1
   104e4:	b129      	cbz	r1, 104f2 <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   104e6:	2207      	movs	r2, #7
   104e8:	4915      	ldr	r1, [pc, #84]	; (10540 <id_create+0x64>)
   104ea:	4630      	mov	r0, r6
   104ec:	f007 f87b 	bl	175e6 <memcmp>
   104f0:	b9d8      	cbnz	r0, 1052a <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   104f2:	4668      	mov	r0, sp
   104f4:	f007 f8f6 	bl	176e4 <bt_addr_le_create_static>
			if (err) {
   104f8:	4604      	mov	r4, r0
   104fa:	b998      	cbnz	r0, 10524 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   104fc:	4668      	mov	r0, sp
   104fe:	f7ff ffa3 	bl	10448 <id_find>
   10502:	2800      	cmp	r0, #0
   10504:	daf5      	bge.n	104f2 <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   10506:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1050a:	4b0e      	ldr	r3, [pc, #56]	; (10544 <id_create+0x68>)
   1050c:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   1050e:	2207      	movs	r2, #7
   10510:	4669      	mov	r1, sp
   10512:	4628      	mov	r0, r5
   10514:	f007 f879 	bl	1760a <memcpy>

		if (addr) {
   10518:	b126      	cbz	r6, 10524 <id_create+0x48>
   1051a:	2207      	movs	r2, #7
   1051c:	4629      	mov	r1, r5
   1051e:	4630      	mov	r0, r6
   10520:	f007 f873 	bl	1760a <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   10524:	4620      	mov	r0, r4
   10526:	b002      	add	sp, #8
   10528:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1052a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1052e:	2207      	movs	r2, #7
   10530:	4631      	mov	r1, r6
   10532:	4804      	ldr	r0, [pc, #16]	; (10544 <id_create+0x68>)
   10534:	4428      	add	r0, r5
   10536:	f007 f868 	bl	1760a <memcpy>
	return 0;
   1053a:	2400      	movs	r4, #0
}
   1053c:	e7f2      	b.n	10524 <id_create+0x48>
   1053e:	bf00      	nop
   10540:	0001ac64 	.word	0x0001ac64
   10544:	200001a0 	.word	0x200001a0

00010548 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   10548:	b5f0      	push	{r4, r5, r6, r7, lr}
   1054a:	b085      	sub	sp, #20
   1054c:	af00      	add	r7, sp, #0
   1054e:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   10550:	4605      	mov	r5, r0
   10552:	b188      	cbz	r0, 10578 <bt_id_create+0x30>
	return memcmp(a, b, sizeof(*a));
   10554:	2207      	movs	r2, #7
   10556:	4943      	ldr	r1, [pc, #268]	; (10664 <bt_id_create+0x11c>)
   10558:	f007 f845 	bl	175e6 <memcmp>
   1055c:	b160      	cbz	r0, 10578 <bt_id_create+0x30>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1055e:	782b      	ldrb	r3, [r5, #0]
   10560:	2b01      	cmp	r3, #1
   10562:	d136      	bne.n	105d2 <bt_id_create+0x8a>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   10564:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10566:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1056a:	2bc0      	cmp	r3, #192	; 0xc0
   1056c:	d131      	bne.n	105d2 <bt_id_create+0x8a>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   1056e:	4628      	mov	r0, r5
   10570:	f7ff ff6a 	bl	10448 <id_find>
   10574:	2800      	cmp	r0, #0
   10576:	da6c      	bge.n	10652 <bt_id_create+0x10a>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10578:	2c00      	cmp	r4, #0
   1057a:	d16d      	bne.n	10658 <bt_id_create+0x110>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1057c:	4b3a      	ldr	r3, [pc, #232]	; (10668 <bt_id_create+0x120>)
   1057e:	79db      	ldrb	r3, [r3, #7]
   10580:	2b01      	cmp	r3, #1
   10582:	d06c      	beq.n	1065e <bt_id_create+0x116>
   10584:	f3bf 8f5b 	dmb	ish
   10588:	4b38      	ldr	r3, [pc, #224]	; (1066c <bt_id_create+0x124>)
   1058a:	681b      	ldr	r3, [r3, #0]
   1058c:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10590:	f013 0f01 	tst.w	r3, #1
   10594:	d10d      	bne.n	105b2 <bt_id_create+0x6a>
		uint8_t zero_irk[16] = { 0 };
   10596:	2300      	movs	r3, #0
   10598:	603b      	str	r3, [r7, #0]
   1059a:	607b      	str	r3, [r7, #4]
   1059c:	60bb      	str	r3, [r7, #8]
   1059e:	60fb      	str	r3, [r7, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   105a0:	2d00      	cmp	r5, #0
   105a2:	d053      	beq.n	1064c <bt_id_create+0x104>
   105a4:	2207      	movs	r2, #7
   105a6:	492f      	ldr	r1, [pc, #188]	; (10664 <bt_id_create+0x11c>)
   105a8:	4628      	mov	r0, r5
   105aa:	f007 f81c 	bl	175e6 <memcmp>
   105ae:	2800      	cmp	r0, #0
   105b0:	d04c      	beq.n	1064c <bt_id_create+0x104>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   105b2:	4b2d      	ldr	r3, [pc, #180]	; (10668 <bt_id_create+0x120>)
   105b4:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   105b6:	4622      	mov	r2, r4
   105b8:	4629      	mov	r1, r5
   105ba:	4630      	mov	r0, r6
   105bc:	f7ff ff8e 	bl	104dc <id_create>
	if (err) {
   105c0:	b920      	cbnz	r0, 105cc <bt_id_create+0x84>
		return err;
	} else {
		bt_dev.id_count++;
   105c2:	4a29      	ldr	r2, [pc, #164]	; (10668 <bt_id_create+0x120>)
   105c4:	79d3      	ldrb	r3, [r2, #7]
   105c6:	3301      	adds	r3, #1
   105c8:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   105ca:	4630      	mov	r0, r6
}
   105cc:	3714      	adds	r7, #20
   105ce:	46bd      	mov	sp, r7
   105d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Only static random identity address supported");
   105d2:	466d      	mov	r5, sp
   105d4:	b088      	sub	sp, #32
   105d6:	466b      	mov	r3, sp
   105d8:	f113 0210 	adds.w	r2, r3, #16
   105dc:	d030      	beq.n	10640 <bt_id_create+0xf8>
   105de:	210c      	movs	r1, #12
   105e0:	b142      	cbz	r2, 105f4 <bt_id_create+0xac>
   105e2:	4608      	mov	r0, r1
   105e4:	2904      	cmp	r1, #4
   105e6:	dd01      	ble.n	105ec <bt_id_create+0xa4>
   105e8:	4c21      	ldr	r4, [pc, #132]	; (10670 <bt_id_create+0x128>)
   105ea:	615c      	str	r4, [r3, #20]
   105ec:	2808      	cmp	r0, #8
   105ee:	dd01      	ble.n	105f4 <bt_id_create+0xac>
   105f0:	4820      	ldr	r0, [pc, #128]	; (10674 <bt_id_create+0x12c>)
   105f2:	6198      	str	r0, [r3, #24]
   105f4:	290b      	cmp	r1, #11
   105f6:	dd26      	ble.n	10646 <bt_id_create+0xfe>
   105f8:	240c      	movs	r4, #12
   105fa:	b13a      	cbz	r2, 1060c <bt_id_create+0xc4>
   105fc:	2103      	movs	r1, #3
   105fe:	7039      	strb	r1, [r7, #0]
   10600:	2100      	movs	r1, #0
   10602:	7079      	strb	r1, [r7, #1]
   10604:	70b9      	strb	r1, [r7, #2]
   10606:	70f9      	strb	r1, [r7, #3]
   10608:	6838      	ldr	r0, [r7, #0]
   1060a:	6118      	str	r0, [r3, #16]
   1060c:	2100      	movs	r1, #0
   1060e:	f36f 0100 	bfc	r1, #0, #1
   10612:	f36f 0141 	bfc	r1, #1, #1
   10616:	f36f 0182 	bfc	r1, #2, #1
   1061a:	f36f 01c5 	bfc	r1, #3, #3
   1061e:	2301      	movs	r3, #1
   10620:	f363 1188 	bfi	r1, r3, #6, #3
   10624:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10628:	f363 2153 	bfi	r1, r3, #9, #11
   1062c:	f36f 511f 	bfc	r1, #20, #12
   10630:	2300      	movs	r3, #0
   10632:	4811      	ldr	r0, [pc, #68]	; (10678 <bt_id_create+0x130>)
   10634:	f7fb fc18 	bl	be68 <z_impl_z_log_msg_static_create>
   10638:	46ad      	mov	sp, r5
			return -EINVAL;
   1063a:	f06f 0015 	mvn.w	r0, #21
   1063e:	e7c5      	b.n	105cc <bt_id_create+0x84>
			LOG_ERR("Only static random identity address supported");
   10640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10644:	e7cc      	b.n	105e0 <bt_id_create+0x98>
   10646:	f06f 041b 	mvn.w	r4, #27
   1064a:	e7d6      	b.n	105fa <bt_id_create+0xb2>
			return -EINVAL;
   1064c:	f06f 0015 	mvn.w	r0, #21
   10650:	e7bc      	b.n	105cc <bt_id_create+0x84>
			return -EALREADY;
   10652:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10656:	e7b9      	b.n	105cc <bt_id_create+0x84>
		return -EINVAL;
   10658:	f06f 0015 	mvn.w	r0, #21
   1065c:	e7b6      	b.n	105cc <bt_id_create+0x84>
		return -ENOMEM;
   1065e:	f06f 000b 	mvn.w	r0, #11
   10662:	e7b3      	b.n	105cc <bt_id_create+0x84>
   10664:	0001ac64 	.word	0x0001ac64
   10668:	200001a0 	.word	0x200001a0
   1066c:	20000274 	.word	0x20000274
   10670:	0001b3e4 	.word	0x0001b3e4
   10674:	0001b560 	.word	0x0001b560
   10678:	0001a0c4 	.word	0x0001a0c4

0001067c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1067c:	b5b0      	push	{r4, r5, r7, lr}
   1067e:	b082      	sub	sp, #8
   10680:	af00      	add	r7, sp, #0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   10682:	2800      	cmp	r0, #0
   10684:	d040      	beq.n	10708 <bt_id_read_public_addr+0x8c>
   10686:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10688:	1d3a      	adds	r2, r7, #4
   1068a:	2100      	movs	r1, #0
   1068c:	f241 0009 	movw	r0, #4105	; 0x1009
   10690:	f7fe fecc 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
   10694:	2800      	cmp	r0, #0
   10696:	d079      	beq.n	1078c <bt_id_read_public_addr+0x110>
		LOG_WRN("Failed to read public address");
   10698:	466d      	mov	r5, sp
   1069a:	b088      	sub	sp, #32
   1069c:	466b      	mov	r3, sp
   1069e:	f113 0210 	adds.w	r2, r3, #16
   106a2:	d06d      	beq.n	10780 <bt_id_read_public_addr+0x104>
   106a4:	210c      	movs	r1, #12
   106a6:	b142      	cbz	r2, 106ba <bt_id_read_public_addr+0x3e>
   106a8:	4608      	mov	r0, r1
   106aa:	2904      	cmp	r1, #4
   106ac:	dd01      	ble.n	106b2 <bt_id_read_public_addr+0x36>
   106ae:	4c47      	ldr	r4, [pc, #284]	; (107cc <bt_id_read_public_addr+0x150>)
   106b0:	615c      	str	r4, [r3, #20]
   106b2:	2808      	cmp	r0, #8
   106b4:	dd01      	ble.n	106ba <bt_id_read_public_addr+0x3e>
   106b6:	4846      	ldr	r0, [pc, #280]	; (107d0 <bt_id_read_public_addr+0x154>)
   106b8:	6198      	str	r0, [r3, #24]
   106ba:	290b      	cmp	r1, #11
   106bc:	dd63      	ble.n	10786 <bt_id_read_public_addr+0x10a>
   106be:	240c      	movs	r4, #12
   106c0:	b13a      	cbz	r2, 106d2 <bt_id_read_public_addr+0x56>
   106c2:	2103      	movs	r1, #3
   106c4:	7039      	strb	r1, [r7, #0]
   106c6:	2100      	movs	r1, #0
   106c8:	7079      	strb	r1, [r7, #1]
   106ca:	70b9      	strb	r1, [r7, #2]
   106cc:	70f9      	strb	r1, [r7, #3]
   106ce:	6838      	ldr	r0, [r7, #0]
   106d0:	6118      	str	r0, [r3, #16]
   106d2:	2100      	movs	r1, #0
   106d4:	f36f 0100 	bfc	r1, #0, #1
   106d8:	f36f 0141 	bfc	r1, #1, #1
   106dc:	f36f 0182 	bfc	r1, #2, #1
   106e0:	f36f 01c5 	bfc	r1, #3, #3
   106e4:	2302      	movs	r3, #2
   106e6:	f363 1188 	bfi	r1, r3, #6, #3
   106ea:	f3c4 030a 	ubfx	r3, r4, #0, #11
   106ee:	f363 2153 	bfi	r1, r3, #9, #11
   106f2:	f36f 511f 	bfc	r1, #20, #12
   106f6:	2300      	movs	r3, #0
   106f8:	4836      	ldr	r0, [pc, #216]	; (107d4 <bt_id_read_public_addr+0x158>)
   106fa:	f7fb fbb5 	bl	be68 <z_impl_z_log_msg_static_create>
   106fe:	46ad      	mov	sp, r5
		return 0U;
   10700:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   10702:	3708      	adds	r7, #8
   10704:	46bd      	mov	sp, r7
   10706:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Invalid input parameters");
   10708:	466d      	mov	r5, sp
   1070a:	b088      	sub	sp, #32
   1070c:	466b      	mov	r3, sp
   1070e:	f113 0210 	adds.w	r2, r3, #16
   10712:	d02f      	beq.n	10774 <bt_id_read_public_addr+0xf8>
   10714:	210c      	movs	r1, #12
   10716:	b142      	cbz	r2, 1072a <bt_id_read_public_addr+0xae>
   10718:	4608      	mov	r0, r1
   1071a:	2904      	cmp	r1, #4
   1071c:	dd01      	ble.n	10722 <bt_id_read_public_addr+0xa6>
   1071e:	4c2e      	ldr	r4, [pc, #184]	; (107d8 <bt_id_read_public_addr+0x15c>)
   10720:	615c      	str	r4, [r3, #20]
   10722:	2808      	cmp	r0, #8
   10724:	dd01      	ble.n	1072a <bt_id_read_public_addr+0xae>
   10726:	482a      	ldr	r0, [pc, #168]	; (107d0 <bt_id_read_public_addr+0x154>)
   10728:	6198      	str	r0, [r3, #24]
   1072a:	290b      	cmp	r1, #11
   1072c:	dd25      	ble.n	1077a <bt_id_read_public_addr+0xfe>
   1072e:	240c      	movs	r4, #12
   10730:	b13a      	cbz	r2, 10742 <bt_id_read_public_addr+0xc6>
   10732:	2103      	movs	r1, #3
   10734:	7039      	strb	r1, [r7, #0]
   10736:	2100      	movs	r1, #0
   10738:	7079      	strb	r1, [r7, #1]
   1073a:	70b9      	strb	r1, [r7, #2]
   1073c:	70f9      	strb	r1, [r7, #3]
   1073e:	6838      	ldr	r0, [r7, #0]
   10740:	6118      	str	r0, [r3, #16]
   10742:	2100      	movs	r1, #0
   10744:	f36f 0100 	bfc	r1, #0, #1
   10748:	f36f 0141 	bfc	r1, #1, #1
   1074c:	f36f 0182 	bfc	r1, #2, #1
   10750:	f36f 01c5 	bfc	r1, #3, #3
   10754:	2302      	movs	r3, #2
   10756:	f363 1188 	bfi	r1, r3, #6, #3
   1075a:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1075e:	f363 2153 	bfi	r1, r3, #9, #11
   10762:	f36f 511f 	bfc	r1, #20, #12
   10766:	2300      	movs	r3, #0
   10768:	481a      	ldr	r0, [pc, #104]	; (107d4 <bt_id_read_public_addr+0x158>)
   1076a:	f7fb fb7d 	bl	be68 <z_impl_z_log_msg_static_create>
   1076e:	46ad      	mov	sp, r5
		return 0U;
   10770:	2000      	movs	r0, #0
   10772:	e7c6      	b.n	10702 <bt_id_read_public_addr+0x86>
		LOG_WRN("Invalid input parameters");
   10774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10778:	e7cd      	b.n	10716 <bt_id_read_public_addr+0x9a>
   1077a:	f06f 041b 	mvn.w	r4, #27
   1077e:	e7d7      	b.n	10730 <bt_id_read_public_addr+0xb4>
		LOG_WRN("Failed to read public address");
   10780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10784:	e78f      	b.n	106a6 <bt_id_read_public_addr+0x2a>
   10786:	f06f 041b 	mvn.w	r4, #27
   1078a:	e799      	b.n	106c0 <bt_id_read_public_addr+0x44>
	rp = (void *)rsp->data;
   1078c:	687b      	ldr	r3, [r7, #4]
   1078e:	68dc      	ldr	r4, [r3, #12]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10790:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   10792:	2206      	movs	r2, #6
   10794:	4911      	ldr	r1, [pc, #68]	; (107dc <bt_id_read_public_addr+0x160>)
   10796:	4620      	mov	r0, r4
   10798:	f006 ff25 	bl	175e6 <memcmp>
   1079c:	b128      	cbz	r0, 107aa <bt_id_read_public_addr+0x12e>
   1079e:	2206      	movs	r2, #6
   107a0:	490f      	ldr	r1, [pc, #60]	; (107e0 <bt_id_read_public_addr+0x164>)
   107a2:	4620      	mov	r0, r4
   107a4:	f006 ff1f 	bl	175e6 <memcmp>
   107a8:	b920      	cbnz	r0, 107b4 <bt_id_read_public_addr+0x138>
		net_buf_unref(rsp);
   107aa:	6878      	ldr	r0, [r7, #4]
   107ac:	f007 f9ce 	bl	17b4c <net_buf_unref>
		return 0U;
   107b0:	2000      	movs	r0, #0
   107b2:	e7a6      	b.n	10702 <bt_id_read_public_addr+0x86>
	memcpy(dst, src, sizeof(*dst));
   107b4:	2206      	movs	r2, #6
   107b6:	4621      	mov	r1, r4
   107b8:	1c68      	adds	r0, r5, #1
   107ba:	f006 ff26 	bl	1760a <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   107be:	2300      	movs	r3, #0
   107c0:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   107c2:	6878      	ldr	r0, [r7, #4]
   107c4:	f007 f9c2 	bl	17b4c <net_buf_unref>
	return 1U;
   107c8:	2001      	movs	r0, #1
   107ca:	e79a      	b.n	10702 <bt_id_read_public_addr+0x86>
   107cc:	0001b438 	.word	0x0001b438
   107d0:	0001b548 	.word	0x0001b548
   107d4:	0001a0c4 	.word	0x0001a0c4
   107d8:	0001b418 	.word	0x0001b418
   107dc:	0001ac74 	.word	0x0001ac74
   107e0:	0001ac6c 	.word	0x0001ac6c

000107e4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   107e4:	b500      	push	{lr}
   107e6:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   107e8:	4668      	mov	r0, sp
   107ea:	f7ff ff47 	bl	1067c <bt_id_read_public_addr>
   107ee:	4b06      	ldr	r3, [pc, #24]	; (10808 <bt_setup_public_id_addr+0x24>)
   107f0:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   107f2:	b918      	cbnz	r0, 107fc <bt_setup_public_id_addr+0x18>
		return 0;
   107f4:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   107f6:	b003      	add	sp, #12
   107f8:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   107fc:	2200      	movs	r2, #0
   107fe:	4669      	mov	r1, sp
   10800:	4610      	mov	r0, r2
   10802:	f7ff fe6b 	bl	104dc <id_create>
   10806:	e7f6      	b.n	107f6 <bt_setup_public_id_addr+0x12>
   10808:	200001a0 	.word	0x200001a0

0001080c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1080c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10810:	b083      	sub	sp, #12
   10812:	af00      	add	r7, sp, #0
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   10814:	4b6f      	ldr	r3, [pc, #444]	; (109d4 <bt_read_static_addr+0x1c8>)
   10816:	f893 50c2 	ldrb.w	r5, [r3, #194]	; 0xc2
   1081a:	f015 0501 	ands.w	r5, r5, #1
   1081e:	d13e      	bne.n	1089e <bt_read_static_addr+0x92>
		LOG_WRN("Read Static Addresses command not available");
   10820:	466e      	mov	r6, sp
   10822:	b088      	sub	sp, #32
   10824:	466b      	mov	r3, sp
   10826:	f113 0210 	adds.w	r2, r3, #16
   1082a:	d032      	beq.n	10892 <bt_read_static_addr+0x86>
   1082c:	210c      	movs	r1, #12
   1082e:	b142      	cbz	r2, 10842 <bt_read_static_addr+0x36>
   10830:	4608      	mov	r0, r1
   10832:	2904      	cmp	r1, #4
   10834:	dd01      	ble.n	1083a <bt_read_static_addr+0x2e>
   10836:	4c68      	ldr	r4, [pc, #416]	; (109d8 <bt_read_static_addr+0x1cc>)
   10838:	615c      	str	r4, [r3, #20]
   1083a:	2808      	cmp	r0, #8
   1083c:	dd01      	ble.n	10842 <bt_read_static_addr+0x36>
   1083e:	4867      	ldr	r0, [pc, #412]	; (109dc <bt_read_static_addr+0x1d0>)
   10840:	6198      	str	r0, [r3, #24]
   10842:	290b      	cmp	r1, #11
   10844:	dd28      	ble.n	10898 <bt_read_static_addr+0x8c>
   10846:	240c      	movs	r4, #12
   10848:	b13a      	cbz	r2, 1085a <bt_read_static_addr+0x4e>
   1084a:	2103      	movs	r1, #3
   1084c:	7039      	strb	r1, [r7, #0]
   1084e:	2100      	movs	r1, #0
   10850:	7079      	strb	r1, [r7, #1]
   10852:	70b9      	strb	r1, [r7, #2]
   10854:	70f9      	strb	r1, [r7, #3]
   10856:	6838      	ldr	r0, [r7, #0]
   10858:	6118      	str	r0, [r3, #16]
   1085a:	2100      	movs	r1, #0
   1085c:	f36f 0100 	bfc	r1, #0, #1
   10860:	f36f 0141 	bfc	r1, #1, #1
   10864:	f36f 0182 	bfc	r1, #2, #1
   10868:	f36f 01c5 	bfc	r1, #3, #3
   1086c:	2302      	movs	r3, #2
   1086e:	f363 1188 	bfi	r1, r3, #6, #3
   10872:	f3c4 040a 	ubfx	r4, r4, #0, #11
   10876:	f364 2153 	bfi	r1, r4, #9, #11
   1087a:	f36f 511f 	bfc	r1, #20, #12
   1087e:	2300      	movs	r3, #0
   10880:	4857      	ldr	r0, [pc, #348]	; (109e0 <bt_read_static_addr+0x1d4>)
   10882:	f7fb faf1 	bl	be68 <z_impl_z_log_msg_static_create>
   10886:	46b5      	mov	sp, r6
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   10888:	4628      	mov	r0, r5
   1088a:	370c      	adds	r7, #12
   1088c:	46bd      	mov	sp, r7
   1088e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Read Static Addresses command not available");
   10892:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10896:	e7ca      	b.n	1082e <bt_read_static_addr+0x22>
   10898:	f06f 041b 	mvn.w	r4, #27
   1089c:	e7d4      	b.n	10848 <bt_read_static_addr+0x3c>
   1089e:	4606      	mov	r6, r0
   108a0:	4689      	mov	r9, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   108a2:	1d3a      	adds	r2, r7, #4
   108a4:	2100      	movs	r1, #0
   108a6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   108aa:	f7fe fdbf 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
   108ae:	4604      	mov	r4, r0
   108b0:	b940      	cbnz	r0, 108c4 <bt_read_static_addr+0xb8>
	rp = (void *)rsp->data;
   108b2:	687b      	ldr	r3, [r7, #4]
   108b4:	f8d3 800c 	ldr.w	r8, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   108b8:	f898 5001 	ldrb.w	r5, [r8, #1]
   108bc:	454d      	cmp	r5, r9
   108be:	bf28      	it	cs
   108c0:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
   108c2:	e045      	b.n	10950 <bt_read_static_addr+0x144>
		LOG_WRN("Failed to read static addresses");
   108c4:	466d      	mov	r5, sp
   108c6:	b088      	sub	sp, #32
   108c8:	466b      	mov	r3, sp
   108ca:	f113 0210 	adds.w	r2, r3, #16
   108ce:	d02f      	beq.n	10930 <bt_read_static_addr+0x124>
   108d0:	210c      	movs	r1, #12
   108d2:	b142      	cbz	r2, 108e6 <bt_read_static_addr+0xda>
   108d4:	4608      	mov	r0, r1
   108d6:	2904      	cmp	r1, #4
   108d8:	dd01      	ble.n	108de <bt_read_static_addr+0xd2>
   108da:	4c42      	ldr	r4, [pc, #264]	; (109e4 <bt_read_static_addr+0x1d8>)
   108dc:	615c      	str	r4, [r3, #20]
   108de:	2808      	cmp	r0, #8
   108e0:	dd01      	ble.n	108e6 <bt_read_static_addr+0xda>
   108e2:	483e      	ldr	r0, [pc, #248]	; (109dc <bt_read_static_addr+0x1d0>)
   108e4:	6198      	str	r0, [r3, #24]
   108e6:	290b      	cmp	r1, #11
   108e8:	dd25      	ble.n	10936 <bt_read_static_addr+0x12a>
   108ea:	240c      	movs	r4, #12
   108ec:	b13a      	cbz	r2, 108fe <bt_read_static_addr+0xf2>
   108ee:	2103      	movs	r1, #3
   108f0:	7039      	strb	r1, [r7, #0]
   108f2:	2100      	movs	r1, #0
   108f4:	7079      	strb	r1, [r7, #1]
   108f6:	70b9      	strb	r1, [r7, #2]
   108f8:	70f9      	strb	r1, [r7, #3]
   108fa:	6838      	ldr	r0, [r7, #0]
   108fc:	6118      	str	r0, [r3, #16]
   108fe:	2100      	movs	r1, #0
   10900:	f36f 0100 	bfc	r1, #0, #1
   10904:	f36f 0141 	bfc	r1, #1, #1
   10908:	f36f 0182 	bfc	r1, #2, #1
   1090c:	f36f 01c5 	bfc	r1, #3, #3
   10910:	2302      	movs	r3, #2
   10912:	f363 1188 	bfi	r1, r3, #6, #3
   10916:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1091a:	f364 2153 	bfi	r1, r4, #9, #11
   1091e:	f36f 511f 	bfc	r1, #20, #12
   10922:	2300      	movs	r3, #0
   10924:	482e      	ldr	r0, [pc, #184]	; (109e0 <bt_read_static_addr+0x1d4>)
   10926:	f7fb fa9f 	bl	be68 <z_impl_z_log_msg_static_create>
   1092a:	46ad      	mov	sp, r5
		return 0;
   1092c:	2500      	movs	r5, #0
   1092e:	e7ab      	b.n	10888 <bt_read_static_addr+0x7c>
		LOG_WRN("Failed to read static addresses");
   10930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10934:	e7cd      	b.n	108d2 <bt_read_static_addr+0xc6>
   10936:	f06f 041b 	mvn.w	r4, #27
   1093a:	e7d7      	b.n	108ec <bt_read_static_addr+0xe0>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1093c:	2216      	movs	r2, #22
   1093e:	fb02 f004 	mul.w	r0, r2, r4
   10942:	eb08 0100 	add.w	r1, r8, r0
   10946:	3102      	adds	r1, #2
   10948:	4430      	add	r0, r6
   1094a:	f006 fe5e 	bl	1760a <memcpy>
	for (i = 0; i < cnt; i++) {
   1094e:	3401      	adds	r4, #1
   10950:	42a5      	cmp	r5, r4
   10952:	dcf3      	bgt.n	1093c <bt_read_static_addr+0x130>
	net_buf_unref(rsp);
   10954:	6878      	ldr	r0, [r7, #4]
   10956:	f007 f8f9 	bl	17b4c <net_buf_unref>
	if (!cnt) {
   1095a:	2d00      	cmp	r5, #0
   1095c:	d194      	bne.n	10888 <bt_read_static_addr+0x7c>
		LOG_WRN("No static addresses stored in controller");
   1095e:	466e      	mov	r6, sp
   10960:	b088      	sub	sp, #32
   10962:	466b      	mov	r3, sp
   10964:	f113 0210 	adds.w	r2, r3, #16
   10968:	d02e      	beq.n	109c8 <bt_read_static_addr+0x1bc>
   1096a:	210c      	movs	r1, #12
   1096c:	b142      	cbz	r2, 10980 <bt_read_static_addr+0x174>
   1096e:	4608      	mov	r0, r1
   10970:	2904      	cmp	r1, #4
   10972:	dd01      	ble.n	10978 <bt_read_static_addr+0x16c>
   10974:	4c1c      	ldr	r4, [pc, #112]	; (109e8 <bt_read_static_addr+0x1dc>)
   10976:	615c      	str	r4, [r3, #20]
   10978:	2808      	cmp	r0, #8
   1097a:	dd01      	ble.n	10980 <bt_read_static_addr+0x174>
   1097c:	4817      	ldr	r0, [pc, #92]	; (109dc <bt_read_static_addr+0x1d0>)
   1097e:	6198      	str	r0, [r3, #24]
   10980:	290b      	cmp	r1, #11
   10982:	dd24      	ble.n	109ce <bt_read_static_addr+0x1c2>
   10984:	240c      	movs	r4, #12
   10986:	b13a      	cbz	r2, 10998 <bt_read_static_addr+0x18c>
   10988:	2103      	movs	r1, #3
   1098a:	7039      	strb	r1, [r7, #0]
   1098c:	2100      	movs	r1, #0
   1098e:	7079      	strb	r1, [r7, #1]
   10990:	70b9      	strb	r1, [r7, #2]
   10992:	70f9      	strb	r1, [r7, #3]
   10994:	6838      	ldr	r0, [r7, #0]
   10996:	6118      	str	r0, [r3, #16]
   10998:	2100      	movs	r1, #0
   1099a:	f36f 0100 	bfc	r1, #0, #1
   1099e:	f36f 0141 	bfc	r1, #1, #1
   109a2:	f36f 0182 	bfc	r1, #2, #1
   109a6:	f36f 01c5 	bfc	r1, #3, #3
   109aa:	2302      	movs	r3, #2
   109ac:	f363 1188 	bfi	r1, r3, #6, #3
   109b0:	f3c4 030a 	ubfx	r3, r4, #0, #11
   109b4:	f363 2153 	bfi	r1, r3, #9, #11
   109b8:	f36f 511f 	bfc	r1, #20, #12
   109bc:	2300      	movs	r3, #0
   109be:	4808      	ldr	r0, [pc, #32]	; (109e0 <bt_read_static_addr+0x1d4>)
   109c0:	f7fb fa52 	bl	be68 <z_impl_z_log_msg_static_create>
   109c4:	46b5      	mov	sp, r6
   109c6:	e75f      	b.n	10888 <bt_read_static_addr+0x7c>
   109c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   109cc:	e7ce      	b.n	1096c <bt_read_static_addr+0x160>
   109ce:	f06f 041b 	mvn.w	r4, #27
   109d2:	e7d8      	b.n	10986 <bt_read_static_addr+0x17a>
   109d4:	200001a0 	.word	0x200001a0
   109d8:	0001b45c 	.word	0x0001b45c
   109dc:	0001b534 	.word	0x0001b534
   109e0:	0001a0c4 	.word	0x0001a0c4
   109e4:	0001b48c 	.word	0x0001b48c
   109e8:	0001b4b0 	.word	0x0001b4b0

000109ec <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   109ec:	b510      	push	{r4, lr}
   109ee:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   109f0:	4b17      	ldr	r3, [pc, #92]	; (10a50 <bt_setup_random_id_addr+0x64>)
   109f2:	79dc      	ldrb	r4, [r3, #7]
   109f4:	b934      	cbnz	r4, 10a04 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   109f6:	2101      	movs	r1, #1
   109f8:	a802      	add	r0, sp, #8
   109fa:	f7ff ff07 	bl	1080c <bt_read_static_addr>
   109fe:	4b14      	ldr	r3, [pc, #80]	; (10a50 <bt_setup_random_id_addr+0x64>)
   10a00:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   10a02:	b948      	cbnz	r0, 10a18 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   10a04:	2100      	movs	r1, #0
   10a06:	4608      	mov	r0, r1
   10a08:	f7ff fd9e 	bl	10548 <bt_id_create>
   10a0c:	4603      	mov	r3, r0
}
   10a0e:	4618      	mov	r0, r3
   10a10:	b008      	add	sp, #32
   10a12:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10a14:	3401      	adds	r4, #1
   10a16:	b2e4      	uxtb	r4, r4
   10a18:	4b0d      	ldr	r3, [pc, #52]	; (10a50 <bt_setup_random_id_addr+0x64>)
   10a1a:	79db      	ldrb	r3, [r3, #7]
   10a1c:	42a3      	cmp	r3, r4
   10a1e:	d914      	bls.n	10a4a <bt_setup_random_id_addr+0x5e>
   10a20:	2206      	movs	r2, #6
   10a22:	2116      	movs	r1, #22
   10a24:	ab02      	add	r3, sp, #8
   10a26:	fb01 3104 	mla	r1, r1, r4, r3
   10a2a:	f10d 0001 	add.w	r0, sp, #1
   10a2e:	f006 fdec 	bl	1760a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   10a32:	2301      	movs	r3, #1
   10a34:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   10a38:	2200      	movs	r2, #0
   10a3a:	4669      	mov	r1, sp
   10a3c:	4620      	mov	r0, r4
   10a3e:	f7ff fd4d 	bl	104dc <id_create>
				if (err) {
   10a42:	4603      	mov	r3, r0
   10a44:	2800      	cmp	r0, #0
   10a46:	d0e5      	beq.n	10a14 <bt_setup_random_id_addr+0x28>
   10a48:	e7e1      	b.n	10a0e <bt_setup_random_id_addr+0x22>
			return 0;
   10a4a:	2300      	movs	r3, #0
   10a4c:	e7df      	b.n	10a0e <bt_setup_random_id_addr+0x22>
   10a4e:	bf00      	nop
   10a50:	200001a0 	.word	0x200001a0

00010a54 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   10a54:	b181      	cbz	r1, 10a78 <bt_id_set_scan_own_addr+0x24>
{
   10a56:	b510      	push	{r4, lr}
   10a58:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   10a5a:	4b09      	ldr	r3, [pc, #36]	; (10a80 <bt_id_set_scan_own_addr+0x2c>)
   10a5c:	781b      	ldrb	r3, [r3, #0]
   10a5e:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   10a60:	f006 fed3 	bl	1780a <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   10a64:	b108      	cbz	r0, 10a6a <bt_id_set_scan_own_addr+0x16>
		} else {
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
   10a66:	2000      	movs	r0, #0
}
   10a68:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   10a6a:	f006 fed8 	bl	1781e <bt_id_set_private_addr>
			if (err) {
   10a6e:	2800      	cmp	r0, #0
   10a70:	d1fa      	bne.n	10a68 <bt_id_set_scan_own_addr+0x14>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   10a72:	2301      	movs	r3, #1
   10a74:	7023      	strb	r3, [r4, #0]
   10a76:	e7f7      	b.n	10a68 <bt_id_set_scan_own_addr+0x14>
		return -EINVAL;
   10a78:	f06f 0015 	mvn.w	r0, #21
}
   10a7c:	4770      	bx	lr
   10a7e:	bf00      	nop
   10a80:	200001a0 	.word	0x200001a0

00010a84 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   10a84:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a86:	b083      	sub	sp, #12
   10a88:	af00      	add	r7, sp, #0
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   10a8a:	4b67      	ldr	r3, [pc, #412]	; (10c28 <bt_id_init+0x1a4>)
   10a8c:	79db      	ldrb	r3, [r3, #7]
   10a8e:	b143      	cbz	r3, 10aa2 <bt_id_init+0x1e>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   10a90:	4b65      	ldr	r3, [pc, #404]	; (10c28 <bt_id_init+0x1a4>)
   10a92:	79db      	ldrb	r3, [r3, #7]
   10a94:	2b00      	cmp	r3, #0
   10a96:	d044      	beq.n	10b22 <bt_id_init+0x9e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   10a98:	2400      	movs	r4, #0
}
   10a9a:	4620      	mov	r0, r4
   10a9c:	370c      	adds	r7, #12
   10a9e:	46bd      	mov	sp, r7
   10aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_setup_public_id_addr();
   10aa2:	f7ff fe9f 	bl	107e4 <bt_setup_public_id_addr>
		if (err) {
   10aa6:	4604      	mov	r4, r0
   10aa8:	2800      	cmp	r0, #0
   10aaa:	d0f1      	beq.n	10a90 <bt_id_init+0xc>
			LOG_ERR("Unable to set identity address");
   10aac:	466e      	mov	r6, sp
   10aae:	b088      	sub	sp, #32
   10ab0:	466b      	mov	r3, sp
   10ab2:	f113 0210 	adds.w	r2, r3, #16
   10ab6:	d02e      	beq.n	10b16 <bt_id_init+0x92>
   10ab8:	210c      	movs	r1, #12
   10aba:	b142      	cbz	r2, 10ace <bt_id_init+0x4a>
   10abc:	4608      	mov	r0, r1
   10abe:	2904      	cmp	r1, #4
   10ac0:	dd01      	ble.n	10ac6 <bt_id_init+0x42>
   10ac2:	4d5a      	ldr	r5, [pc, #360]	; (10c2c <bt_id_init+0x1a8>)
   10ac4:	615d      	str	r5, [r3, #20]
   10ac6:	2808      	cmp	r0, #8
   10ac8:	dd01      	ble.n	10ace <bt_id_init+0x4a>
   10aca:	4859      	ldr	r0, [pc, #356]	; (10c30 <bt_id_init+0x1ac>)
   10acc:	6198      	str	r0, [r3, #24]
   10ace:	290b      	cmp	r1, #11
   10ad0:	dd24      	ble.n	10b1c <bt_id_init+0x98>
   10ad2:	250c      	movs	r5, #12
   10ad4:	b13a      	cbz	r2, 10ae6 <bt_id_init+0x62>
   10ad6:	2103      	movs	r1, #3
   10ad8:	7139      	strb	r1, [r7, #4]
   10ada:	2100      	movs	r1, #0
   10adc:	7179      	strb	r1, [r7, #5]
   10ade:	71b9      	strb	r1, [r7, #6]
   10ae0:	71f9      	strb	r1, [r7, #7]
   10ae2:	6878      	ldr	r0, [r7, #4]
   10ae4:	6118      	str	r0, [r3, #16]
   10ae6:	2100      	movs	r1, #0
   10ae8:	f36f 0100 	bfc	r1, #0, #1
   10aec:	f36f 0141 	bfc	r1, #1, #1
   10af0:	f36f 0182 	bfc	r1, #2, #1
   10af4:	f36f 01c5 	bfc	r1, #3, #3
   10af8:	2301      	movs	r3, #1
   10afa:	f363 1188 	bfi	r1, r3, #6, #3
   10afe:	f3c5 050a 	ubfx	r5, r5, #0, #11
   10b02:	f365 2153 	bfi	r1, r5, #9, #11
   10b06:	f36f 511f 	bfc	r1, #20, #12
   10b0a:	2300      	movs	r3, #0
   10b0c:	4849      	ldr	r0, [pc, #292]	; (10c34 <bt_id_init+0x1b0>)
   10b0e:	f7fb f9ab 	bl	be68 <z_impl_z_log_msg_static_create>
   10b12:	46b5      	mov	sp, r6
			return err;
   10b14:	e7c1      	b.n	10a9a <bt_id_init+0x16>
			LOG_ERR("Unable to set identity address");
   10b16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10b1a:	e7ce      	b.n	10aba <bt_id_init+0x36>
   10b1c:	f06f 051b 	mvn.w	r5, #27
   10b20:	e7d8      	b.n	10ad4 <bt_id_init+0x50>
		err = bt_setup_random_id_addr();
   10b22:	f7ff ff63 	bl	109ec <bt_setup_random_id_addr>
		if (err) {
   10b26:	4604      	mov	r4, r0
   10b28:	2800      	cmp	r0, #0
   10b2a:	d03b      	beq.n	10ba4 <bt_id_init+0x120>
			LOG_ERR("Unable to set identity address");
   10b2c:	466d      	mov	r5, sp
   10b2e:	b088      	sub	sp, #32
   10b30:	466b      	mov	r3, sp
   10b32:	f113 0210 	adds.w	r2, r3, #16
   10b36:	d02f      	beq.n	10b98 <bt_id_init+0x114>
   10b38:	210c      	movs	r1, #12
   10b3a:	b142      	cbz	r2, 10b4e <bt_id_init+0xca>
   10b3c:	4608      	mov	r0, r1
   10b3e:	2904      	cmp	r1, #4
   10b40:	dd01      	ble.n	10b46 <bt_id_init+0xc2>
   10b42:	4e3a      	ldr	r6, [pc, #232]	; (10c2c <bt_id_init+0x1a8>)
   10b44:	615e      	str	r6, [r3, #20]
   10b46:	2808      	cmp	r0, #8
   10b48:	dd01      	ble.n	10b4e <bt_id_init+0xca>
   10b4a:	4839      	ldr	r0, [pc, #228]	; (10c30 <bt_id_init+0x1ac>)
   10b4c:	6198      	str	r0, [r3, #24]
   10b4e:	290b      	cmp	r1, #11
   10b50:	dd25      	ble.n	10b9e <bt_id_init+0x11a>
   10b52:	f04f 0c0c 	mov.w	ip, #12
   10b56:	b13a      	cbz	r2, 10b68 <bt_id_init+0xe4>
   10b58:	2103      	movs	r1, #3
   10b5a:	7139      	strb	r1, [r7, #4]
   10b5c:	2100      	movs	r1, #0
   10b5e:	7179      	strb	r1, [r7, #5]
   10b60:	71b9      	strb	r1, [r7, #6]
   10b62:	71f9      	strb	r1, [r7, #7]
   10b64:	6878      	ldr	r0, [r7, #4]
   10b66:	6118      	str	r0, [r3, #16]
   10b68:	2100      	movs	r1, #0
   10b6a:	f36f 0100 	bfc	r1, #0, #1
   10b6e:	f36f 0141 	bfc	r1, #1, #1
   10b72:	f36f 0182 	bfc	r1, #2, #1
   10b76:	f36f 01c5 	bfc	r1, #3, #3
   10b7a:	2301      	movs	r3, #1
   10b7c:	f363 1188 	bfi	r1, r3, #6, #3
   10b80:	f3cc 030a 	ubfx	r3, ip, #0, #11
   10b84:	f363 2153 	bfi	r1, r3, #9, #11
   10b88:	f36f 511f 	bfc	r1, #20, #12
   10b8c:	2300      	movs	r3, #0
   10b8e:	4829      	ldr	r0, [pc, #164]	; (10c34 <bt_id_init+0x1b0>)
   10b90:	f7fb f96a 	bl	be68 <z_impl_z_log_msg_static_create>
   10b94:	46ad      	mov	sp, r5
			return err;
   10b96:	e780      	b.n	10a9a <bt_id_init+0x16>
			LOG_ERR("Unable to set identity address");
   10b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10b9c:	e7cd      	b.n	10b3a <bt_id_init+0xb6>
   10b9e:	f06f 0c1b 	mvn.w	ip, #27
   10ba2:	e7d8      	b.n	10b56 <bt_id_init+0xd2>
		err = set_random_address(&bt_dev.id_addr[0].a);
   10ba4:	4824      	ldr	r0, [pc, #144]	; (10c38 <bt_id_init+0x1b4>)
   10ba6:	f7ff fc6b 	bl	10480 <set_random_address>
		if (err) {
   10baa:	4604      	mov	r4, r0
   10bac:	2800      	cmp	r0, #0
   10bae:	f43f af74 	beq.w	10a9a <bt_id_init+0x16>
			LOG_ERR("Unable to set random address");
   10bb2:	466e      	mov	r6, sp
   10bb4:	b088      	sub	sp, #32
   10bb6:	466b      	mov	r3, sp
   10bb8:	f113 0210 	adds.w	r2, r3, #16
   10bbc:	d02e      	beq.n	10c1c <bt_id_init+0x198>
   10bbe:	210c      	movs	r1, #12
   10bc0:	b142      	cbz	r2, 10bd4 <bt_id_init+0x150>
   10bc2:	4608      	mov	r0, r1
   10bc4:	2904      	cmp	r1, #4
   10bc6:	dd01      	ble.n	10bcc <bt_id_init+0x148>
   10bc8:	4d1c      	ldr	r5, [pc, #112]	; (10c3c <bt_id_init+0x1b8>)
   10bca:	615d      	str	r5, [r3, #20]
   10bcc:	2808      	cmp	r0, #8
   10bce:	dd01      	ble.n	10bd4 <bt_id_init+0x150>
   10bd0:	4817      	ldr	r0, [pc, #92]	; (10c30 <bt_id_init+0x1ac>)
   10bd2:	6198      	str	r0, [r3, #24]
   10bd4:	290b      	cmp	r1, #11
   10bd6:	dd24      	ble.n	10c22 <bt_id_init+0x19e>
   10bd8:	250c      	movs	r5, #12
   10bda:	b13a      	cbz	r2, 10bec <bt_id_init+0x168>
   10bdc:	2103      	movs	r1, #3
   10bde:	7139      	strb	r1, [r7, #4]
   10be0:	2100      	movs	r1, #0
   10be2:	7179      	strb	r1, [r7, #5]
   10be4:	71b9      	strb	r1, [r7, #6]
   10be6:	71f9      	strb	r1, [r7, #7]
   10be8:	6878      	ldr	r0, [r7, #4]
   10bea:	6118      	str	r0, [r3, #16]
   10bec:	2100      	movs	r1, #0
   10bee:	f36f 0100 	bfc	r1, #0, #1
   10bf2:	f36f 0141 	bfc	r1, #1, #1
   10bf6:	f36f 0182 	bfc	r1, #2, #1
   10bfa:	f36f 01c5 	bfc	r1, #3, #3
   10bfe:	2301      	movs	r3, #1
   10c00:	f363 1188 	bfi	r1, r3, #6, #3
   10c04:	f3c5 050a 	ubfx	r5, r5, #0, #11
   10c08:	f365 2153 	bfi	r1, r5, #9, #11
   10c0c:	f36f 511f 	bfc	r1, #20, #12
   10c10:	2300      	movs	r3, #0
   10c12:	4808      	ldr	r0, [pc, #32]	; (10c34 <bt_id_init+0x1b0>)
   10c14:	f7fb f928 	bl	be68 <z_impl_z_log_msg_static_create>
   10c18:	46b5      	mov	sp, r6
			return err;
   10c1a:	e73e      	b.n	10a9a <bt_id_init+0x16>
			LOG_ERR("Unable to set random address");
   10c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10c20:	e7ce      	b.n	10bc0 <bt_id_init+0x13c>
   10c22:	f06f 051b 	mvn.w	r5, #27
   10c26:	e7d8      	b.n	10bda <bt_id_init+0x156>
   10c28:	200001a0 	.word	0x200001a0
   10c2c:	0001b4e0 	.word	0x0001b4e0
   10c30:	0001b528 	.word	0x0001b528
   10c34:	0001a0c4 	.word	0x0001a0c4
   10c38:	200001a1 	.word	0x200001a1
   10c3c:	0001b504 	.word	0x0001b504

00010c40 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   10c40:	b530      	push	{r4, r5, lr}
   10c42:	b087      	sub	sp, #28
   10c44:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   10c46:	2102      	movs	r1, #2
   10c48:	f242 000c 	movw	r0, #8204	; 0x200c
   10c4c:	f7fe fbb0 	bl	f3b0 <bt_hci_cmd_create>
	if (!buf) {
   10c50:	b330      	cbz	r0, 10ca0 <bt_le_scan_set_enable_legacy+0x60>
   10c52:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   10c54:	2102      	movs	r1, #2
   10c56:	300c      	adds	r0, #12
   10c58:	f006 ffa3 	bl	17ba2 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   10c5c:	2c01      	cmp	r4, #1
   10c5e:	d015      	beq.n	10c8c <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   10c60:	2300      	movs	r3, #0
   10c62:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   10c64:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   10c66:	2c01      	cmp	r4, #1
   10c68:	bf14      	ite	ne
   10c6a:	2400      	movne	r4, #0
   10c6c:	2401      	moveq	r4, #1
   10c6e:	9400      	str	r4, [sp, #0]
   10c70:	2306      	movs	r3, #6
   10c72:	4a0d      	ldr	r2, [pc, #52]	; (10ca8 <bt_le_scan_set_enable_legacy+0x68>)
   10c74:	a903      	add	r1, sp, #12
   10c76:	4628      	mov	r0, r5
   10c78:	f7fe fb88 	bl	f38c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   10c7c:	2200      	movs	r2, #0
   10c7e:	4629      	mov	r1, r5
   10c80:	f242 000c 	movw	r0, #8204	; 0x200c
   10c84:	f7fe fbd2 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   10c88:	b007      	add	sp, #28
   10c8a:	bd30      	pop	{r4, r5, pc}
   10c8c:	f3bf 8f5b 	dmb	ish
   10c90:	4b05      	ldr	r3, [pc, #20]	; (10ca8 <bt_le_scan_set_enable_legacy+0x68>)
   10c92:	681b      	ldr	r3, [r3, #0]
   10c94:	f3bf 8f5b 	dmb	ish
   10c98:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   10c9c:	7043      	strb	r3, [r0, #1]
   10c9e:	e7e1      	b.n	10c64 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   10ca0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10ca4:	e7f0      	b.n	10c88 <bt_le_scan_set_enable_legacy+0x48>
   10ca6:	bf00      	nop
   10ca8:	20000274 	.word	0x20000274

00010cac <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   10cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cb0:	b084      	sub	sp, #16
   10cb2:	4605      	mov	r5, r0
   10cb4:	4688      	mov	r8, r1
   10cb6:	4614      	mov	r4, r2
   10cb8:	4699      	mov	r9, r3
   10cba:	f3bf 8f5b 	dmb	ish
   10cbe:	4b3e      	ldr	r3, [pc, #248]	; (10db8 <le_adv_recv+0x10c>)
   10cc0:	681b      	ldr	r3, [r3, #0]
   10cc2:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	LOG_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr), info->adv_type, len,
		info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   10cc6:	f013 0f80 	tst.w	r3, #128	; 0x80
   10cca:	d003      	beq.n	10cd4 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   10ccc:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   10cce:	f013 0f04 	tst.w	r3, #4
   10cd2:	d16d      	bne.n	10db0 <le_adv_recv+0x104>
		LOG_DBG("Dropped direct adv report");
		return;
	}

	if (bt_addr_le_is_resolved(addr)) {
   10cd4:	4628      	mov	r0, r5
   10cd6:	f006 fd1d 	bl	17714 <bt_addr_le_is_resolved>
   10cda:	2800      	cmp	r0, #0
   10cdc:	d135      	bne.n	10d4a <le_adv_recv+0x9e>
		bt_addr_le_copy_resolved(&id_addr, addr);
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   10cde:	782b      	ldrb	r3, [r5, #0]
   10ce0:	2bff      	cmp	r3, #255	; 0xff
   10ce2:	d037      	beq.n	10d54 <le_adv_recv+0xa8>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   10ce4:	4629      	mov	r1, r5
   10ce6:	2000      	movs	r0, #0
   10ce8:	f006 fd91 	bl	1780e <bt_lookup_id_addr>
   10cec:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   10cee:	2207      	movs	r2, #7
   10cf0:	a801      	add	r0, sp, #4
   10cf2:	f006 fc8a 	bl	1760a <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
   10cf6:	4b31      	ldr	r3, [pc, #196]	; (10dbc <le_adv_recv+0x110>)
   10cf8:	681b      	ldr	r3, [r3, #0]
   10cfa:	b1c3      	cbz	r3, 10d2e <le_adv_recv+0x82>
	state->offset = net_buf_simple_headroom(buf);
   10cfc:	4620      	mov	r0, r4
   10cfe:	f006 ff79 	bl	17bf4 <net_buf_simple_headroom>
   10d02:	4605      	mov	r5, r0
   10d04:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   10d08:	88a6      	ldrh	r6, [r4, #4]
   10d0a:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   10d0e:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   10d12:	4b2a      	ldr	r3, [pc, #168]	; (10dbc <le_adv_recv+0x110>)
   10d14:	681f      	ldr	r7, [r3, #0]
   10d16:	4623      	mov	r3, r4
   10d18:	f898 2007 	ldrb.w	r2, [r8, #7]
   10d1c:	f998 1005 	ldrsb.w	r1, [r8, #5]
   10d20:	a801      	add	r0, sp, #4
   10d22:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   10d24:	68a3      	ldr	r3, [r4, #8]
   10d26:	fa13 f585 	uxtah	r5, r3, r5
   10d2a:	6025      	str	r5, [r4, #0]
	buf->len = state->len;
   10d2c:	80a6      	strh	r6, [r4, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
   10d2e:	ab01      	add	r3, sp, #4
   10d30:	f8c8 3000 	str.w	r3, [r8]
   10d34:	4b22      	ldr	r3, [pc, #136]	; (10dc0 <le_adv_recv+0x114>)
   10d36:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10d38:	b196      	cbz	r6, 10d60 <le_adv_recv+0xb4>
   10d3a:	3e08      	subs	r6, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   10d3c:	f116 0508 	adds.w	r5, r6, #8
   10d40:	d013      	beq.n	10d6a <le_adv_recv+0xbe>
	return node->next;
   10d42:	68b5      	ldr	r5, [r6, #8]
   10d44:	b18d      	cbz	r5, 10d6a <le_adv_recv+0xbe>
   10d46:	3d08      	subs	r5, #8
   10d48:	e00f      	b.n	10d6a <le_adv_recv+0xbe>
		bt_addr_le_copy_resolved(&id_addr, addr);
   10d4a:	4629      	mov	r1, r5
   10d4c:	a801      	add	r0, sp, #4
   10d4e:	f006 fcd7 	bl	17700 <bt_addr_le_copy_resolved>
   10d52:	e7d0      	b.n	10cf6 <le_adv_recv+0x4a>
   10d54:	2207      	movs	r2, #7
   10d56:	491b      	ldr	r1, [pc, #108]	; (10dc4 <le_adv_recv+0x118>)
   10d58:	a801      	add	r0, sp, #4
   10d5a:	f006 fc56 	bl	1760a <memcpy>
}
   10d5e:	e7ca      	b.n	10cf6 <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10d60:	4635      	mov	r5, r6
   10d62:	e002      	b.n	10d6a <le_adv_recv+0xbe>
   10d64:	462a      	mov	r2, r5
   10d66:	462e      	mov	r6, r5
   10d68:	4615      	mov	r5, r2
   10d6a:	b1f6      	cbz	r6, 10daa <le_adv_recv+0xfe>
		if (listener->recv) {
   10d6c:	6833      	ldr	r3, [r6, #0]
   10d6e:	b1ab      	cbz	r3, 10d9c <le_adv_recv+0xf0>
	state->offset = net_buf_simple_headroom(buf);
   10d70:	4620      	mov	r0, r4
   10d72:	f006 ff3f 	bl	17bf4 <net_buf_simple_headroom>
   10d76:	4607      	mov	r7, r0
   10d78:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   10d7c:	f8b4 a004 	ldrh.w	sl, [r4, #4]
   10d80:	f8ad a00e 	strh.w	sl, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   10d84:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
   10d88:	6833      	ldr	r3, [r6, #0]
   10d8a:	4621      	mov	r1, r4
   10d8c:	4640      	mov	r0, r8
   10d8e:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   10d90:	68a3      	ldr	r3, [r4, #8]
   10d92:	fa13 f787 	uxtah	r7, r3, r7
   10d96:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
   10d98:	f8a4 a004 	strh.w	sl, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10d9c:	2d00      	cmp	r5, #0
   10d9e:	d0e1      	beq.n	10d64 <le_adv_recv+0xb8>
   10da0:	68aa      	ldr	r2, [r5, #8]
   10da2:	2a00      	cmp	r2, #0
   10da4:	d0df      	beq.n	10d66 <le_adv_recv+0xba>
   10da6:	3a08      	subs	r2, #8
   10da8:	e7dd      	b.n	10d66 <le_adv_recv+0xba>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
   10daa:	2300      	movs	r3, #0
   10dac:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
#endif /* CONFIG_BT_CENTRAL */
}
   10db0:	b004      	add	sp, #16
   10db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10db6:	bf00      	nop
   10db8:	20000274 	.word	0x20000274
   10dbc:	20002008 	.word	0x20002008
   10dc0:	20002000 	.word	0x20002000
   10dc4:	0001ac64 	.word	0x0001ac64

00010dc8 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   10dc8:	4b01      	ldr	r3, [pc, #4]	; (10dd0 <bt_scan_reset+0x8>)
   10dca:	2200      	movs	r2, #0
   10dcc:	601a      	str	r2, [r3, #0]
}
   10dce:	4770      	bx	lr
   10dd0:	20002008 	.word	0x20002008

00010dd4 <start_le_scan_legacy>:
{
   10dd4:	b570      	push	{r4, r5, r6, lr}
   10dd6:	b082      	sub	sp, #8
   10dd8:	4604      	mov	r4, r0
   10dda:	460e      	mov	r6, r1
   10ddc:	4615      	mov	r5, r2
	(void)memset(&set_param, 0, sizeof(set_param));
   10dde:	2207      	movs	r2, #7
   10de0:	2100      	movs	r1, #0
   10de2:	4668      	mov	r0, sp
   10de4:	f006 fc40 	bl	17668 <memset>
	set_param.scan_type = scan_type;
   10de8:	f88d 4000 	strb.w	r4, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   10dec:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   10df0:	f8ad 5003 	strh.w	r5, [sp, #3]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   10df4:	2300      	movs	r3, #0
   10df6:	f88d 3006 	strb.w	r3, [sp, #6]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   10dfa:	2c01      	cmp	r4, #1
   10dfc:	bf14      	ite	ne
   10dfe:	2400      	movne	r4, #0
   10e00:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   10e02:	f10d 0105 	add.w	r1, sp, #5
   10e06:	4620      	mov	r0, r4
   10e08:	f7ff fe24 	bl	10a54 <bt_id_set_scan_own_addr>
	if (err) {
   10e0c:	4605      	mov	r5, r0
   10e0e:	b110      	cbz	r0, 10e16 <start_le_scan_legacy+0x42>
}
   10e10:	4628      	mov	r0, r5
   10e12:	b002      	add	sp, #8
   10e14:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   10e16:	2107      	movs	r1, #7
   10e18:	f242 000b 	movw	r0, #8203	; 0x200b
   10e1c:	f7fe fac8 	bl	f3b0 <bt_hci_cmd_create>
	if (!buf) {
   10e20:	4605      	mov	r5, r0
   10e22:	b1c8      	cbz	r0, 10e58 <start_le_scan_legacy+0x84>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10e24:	2207      	movs	r2, #7
   10e26:	4669      	mov	r1, sp
   10e28:	300c      	adds	r0, #12
   10e2a:	f006 fec0 	bl	17bae <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   10e2e:	2200      	movs	r2, #0
   10e30:	4629      	mov	r1, r5
   10e32:	f242 000b 	movw	r0, #8203	; 0x200b
   10e36:	f7fe faf9 	bl	f42c <bt_hci_cmd_send_sync>
	if (err) {
   10e3a:	4605      	mov	r5, r0
   10e3c:	2800      	cmp	r0, #0
   10e3e:	d1e7      	bne.n	10e10 <start_le_scan_legacy+0x3c>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   10e40:	2001      	movs	r0, #1
   10e42:	f006 fd5e 	bl	17902 <bt_le_scan_set_enable>
	if (err) {
   10e46:	4605      	mov	r5, r0
   10e48:	2800      	cmp	r0, #0
   10e4a:	d1e1      	bne.n	10e10 <start_le_scan_legacy+0x3c>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
   10e4c:	4622      	mov	r2, r4
   10e4e:	2108      	movs	r1, #8
   10e50:	4803      	ldr	r0, [pc, #12]	; (10e60 <start_le_scan_legacy+0x8c>)
   10e52:	f006 fd31 	bl	178b8 <atomic_set_bit_to>
	return 0;
   10e56:	e7db      	b.n	10e10 <start_le_scan_legacy+0x3c>
		return -ENOBUFS;
   10e58:	f06f 0568 	mvn.w	r5, #104	; 0x68
   10e5c:	e7d8      	b.n	10e10 <start_le_scan_legacy+0x3c>
   10e5e:	bf00      	nop
   10e60:	20000274 	.word	0x20000274

00010e64 <bt_le_scan_update>:
{
   10e64:	b508      	push	{r3, lr}
   10e66:	f3bf 8f5b 	dmb	ish
   10e6a:	4b0c      	ldr	r3, [pc, #48]	; (10e9c <bt_le_scan_update+0x38>)
   10e6c:	681b      	ldr	r3, [r3, #0]
   10e6e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10e72:	f013 0f80 	tst.w	r3, #128	; 0x80
   10e76:	d001      	beq.n	10e7c <bt_le_scan_update+0x18>
		return 0;
   10e78:	2000      	movs	r0, #0
}
   10e7a:	bd08      	pop	{r3, pc}
   10e7c:	f3bf 8f5b 	dmb	ish
   10e80:	4b06      	ldr	r3, [pc, #24]	; (10e9c <bt_le_scan_update+0x38>)
   10e82:	681b      	ldr	r3, [r3, #0]
   10e84:	f3bf 8f5b 	dmb	ish
   10e88:	f3c3 1080 	ubfx	r0, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10e8c:	f013 0f40 	tst.w	r3, #64	; 0x40
   10e90:	d0f3      	beq.n	10e7a <bt_le_scan_update+0x16>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   10e92:	2000      	movs	r0, #0
   10e94:	f006 fd35 	bl	17902 <bt_le_scan_set_enable>
		if (err) {
   10e98:	e7ef      	b.n	10e7a <bt_le_scan_update+0x16>
   10e9a:	bf00      	nop
   10e9c:	20000274 	.word	0x20000274

00010ea0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   10ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ea4:	b084      	sub	sp, #16
   10ea6:	af00      	add	r7, sp, #0
   10ea8:	4680      	mov	r8, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   10eaa:	f100 060c 	add.w	r6, r0, #12
   10eae:	4630      	mov	r0, r6
   10eb0:	f006 fe98 	bl	17be4 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);
   10eb4:	e062      	b.n	10f7c <bt_hci_le_adv_report+0xdc>

	while (num_reports--) {
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
			LOG_ERR("Unexpected end of buffer");
   10eb6:	466d      	mov	r5, sp
   10eb8:	b088      	sub	sp, #32
   10eba:	466b      	mov	r3, sp
   10ebc:	f113 0210 	adds.w	r2, r3, #16
   10ec0:	d031      	beq.n	10f26 <bt_hci_le_adv_report+0x86>
   10ec2:	210c      	movs	r1, #12
   10ec4:	b142      	cbz	r2, 10ed8 <bt_hci_le_adv_report+0x38>
   10ec6:	4608      	mov	r0, r1
   10ec8:	2904      	cmp	r1, #4
   10eca:	dd01      	ble.n	10ed0 <bt_hci_le_adv_report+0x30>
   10ecc:	4c4f      	ldr	r4, [pc, #316]	; (1100c <bt_hci_le_adv_report+0x16c>)
   10ece:	615c      	str	r4, [r3, #20]
   10ed0:	2808      	cmp	r0, #8
   10ed2:	dd01      	ble.n	10ed8 <bt_hci_le_adv_report+0x38>
   10ed4:	484e      	ldr	r0, [pc, #312]	; (11010 <bt_hci_le_adv_report+0x170>)
   10ed6:	6198      	str	r0, [r3, #24]
   10ed8:	290b      	cmp	r1, #11
   10eda:	dd27      	ble.n	10f2c <bt_hci_le_adv_report+0x8c>
   10edc:	240c      	movs	r4, #12
   10ede:	b13a      	cbz	r2, 10ef0 <bt_hci_le_adv_report+0x50>
   10ee0:	2103      	movs	r1, #3
   10ee2:	7039      	strb	r1, [r7, #0]
   10ee4:	2100      	movs	r1, #0
   10ee6:	7079      	strb	r1, [r7, #1]
   10ee8:	70b9      	strb	r1, [r7, #2]
   10eea:	70f9      	strb	r1, [r7, #3]
   10eec:	6838      	ldr	r0, [r7, #0]
   10eee:	6118      	str	r0, [r3, #16]
   10ef0:	2100      	movs	r1, #0
   10ef2:	f36f 0100 	bfc	r1, #0, #1
   10ef6:	f36f 0141 	bfc	r1, #1, #1
   10efa:	f36f 0182 	bfc	r1, #2, #1
   10efe:	f36f 01c5 	bfc	r1, #3, #3
   10f02:	2301      	movs	r3, #1
   10f04:	f363 1188 	bfi	r1, r3, #6, #3
   10f08:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10f0c:	f363 2153 	bfi	r1, r3, #9, #11
   10f10:	f36f 511f 	bfc	r1, #20, #12
   10f14:	2300      	movs	r3, #0
   10f16:	483f      	ldr	r0, [pc, #252]	; (11014 <bt_hci_le_adv_report+0x174>)
   10f18:	f7fa ffa6 	bl	be68 <z_impl_z_log_msg_static_create>
   10f1c:	46ad      	mov	sp, r5

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   10f1e:	3710      	adds	r7, #16
   10f20:	46bd      	mov	sp, r7
   10f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("Unexpected end of buffer");
   10f26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10f2a:	e7cb      	b.n	10ec4 <bt_hci_le_adv_report+0x24>
   10f2c:	f06f 041b 	mvn.w	r4, #27
   10f30:	e7d5      	b.n	10ede <bt_hci_le_adv_report+0x3e>
			LOG_ERR("Unexpected end of buffer");
   10f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10f36:	e03b      	b.n	10fb0 <bt_hci_le_adv_report+0x110>
   10f38:	f06f 041b 	mvn.w	r4, #27
   10f3c:	e045      	b.n	10fca <bt_hci_le_adv_report+0x12a>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   10f3e:	2301      	movs	r3, #1
   10f40:	733b      	strb	r3, [r7, #12]
		adv_info.secondary_phy = 0;
   10f42:	2200      	movs	r2, #0
   10f44:	737a      	strb	r2, [r7, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   10f46:	237f      	movs	r3, #127	; 0x7f
   10f48:	71bb      	strb	r3, [r7, #6]
		adv_info.rssi = evt->data[evt->length];
   10f4a:	7a03      	ldrb	r3, [r0, #8]
   10f4c:	4403      	add	r3, r0
   10f4e:	f993 3009 	ldrsb.w	r3, [r3, #9]
   10f52:	717b      	strb	r3, [r7, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   10f54:	23ff      	movs	r3, #255	; 0xff
   10f56:	713b      	strb	r3, [r7, #4]
		adv_info.interval = 0U;
   10f58:	817a      	strh	r2, [r7, #10]
		adv_info.adv_type = evt->evt_type;
   10f5a:	7800      	ldrb	r0, [r0, #0]
   10f5c:	71f8      	strb	r0, [r7, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   10f5e:	f006 fc78 	bl	17852 <get_adv_props_legacy>
   10f62:	8138      	strh	r0, [r7, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   10f64:	7a23      	ldrb	r3, [r4, #8]
   10f66:	4632      	mov	r2, r6
   10f68:	4639      	mov	r1, r7
   10f6a:	1c60      	adds	r0, r4, #1
   10f6c:	f7ff fe9e 	bl	10cac <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   10f70:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   10f72:	3101      	adds	r1, #1
   10f74:	4630      	mov	r0, r6
   10f76:	f006 fe25 	bl	17bc4 <net_buf_simple_pull>
	while (num_reports--) {
   10f7a:	4628      	mov	r0, r5
   10f7c:	1e45      	subs	r5, r0, #1
   10f7e:	b2ed      	uxtb	r5, r5
   10f80:	2800      	cmp	r0, #0
   10f82:	d0cc      	beq.n	10f1e <bt_hci_le_adv_report+0x7e>
		if (buf->len < sizeof(*evt)) {
   10f84:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   10f88:	2b08      	cmp	r3, #8
   10f8a:	d994      	bls.n	10eb6 <bt_hci_le_adv_report+0x16>
	return net_buf_simple_pull_mem(&buf->b, len);
   10f8c:	2109      	movs	r1, #9
   10f8e:	4630      	mov	r0, r6
   10f90:	f006 fe20 	bl	17bd4 <net_buf_simple_pull_mem>
   10f94:	4604      	mov	r4, r0
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   10f96:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   10f9a:	7a03      	ldrb	r3, [r0, #8]
   10f9c:	3301      	adds	r3, #1
   10f9e:	429a      	cmp	r2, r3
   10fa0:	d2cd      	bcs.n	10f3e <bt_hci_le_adv_report+0x9e>
			LOG_ERR("Unexpected end of buffer");
   10fa2:	466d      	mov	r5, sp
   10fa4:	b088      	sub	sp, #32
   10fa6:	466b      	mov	r3, sp
   10fa8:	f113 0210 	adds.w	r2, r3, #16
   10fac:	d0c1      	beq.n	10f32 <bt_hci_le_adv_report+0x92>
   10fae:	210c      	movs	r1, #12
   10fb0:	b142      	cbz	r2, 10fc4 <bt_hci_le_adv_report+0x124>
   10fb2:	4608      	mov	r0, r1
   10fb4:	2904      	cmp	r1, #4
   10fb6:	dd01      	ble.n	10fbc <bt_hci_le_adv_report+0x11c>
   10fb8:	4c14      	ldr	r4, [pc, #80]	; (1100c <bt_hci_le_adv_report+0x16c>)
   10fba:	615c      	str	r4, [r3, #20]
   10fbc:	2808      	cmp	r0, #8
   10fbe:	dd01      	ble.n	10fc4 <bt_hci_le_adv_report+0x124>
   10fc0:	4813      	ldr	r0, [pc, #76]	; (11010 <bt_hci_le_adv_report+0x170>)
   10fc2:	6198      	str	r0, [r3, #24]
   10fc4:	290b      	cmp	r1, #11
   10fc6:	ddb7      	ble.n	10f38 <bt_hci_le_adv_report+0x98>
   10fc8:	240c      	movs	r4, #12
   10fca:	b13a      	cbz	r2, 10fdc <bt_hci_le_adv_report+0x13c>
   10fcc:	2103      	movs	r1, #3
   10fce:	7039      	strb	r1, [r7, #0]
   10fd0:	2100      	movs	r1, #0
   10fd2:	7079      	strb	r1, [r7, #1]
   10fd4:	70b9      	strb	r1, [r7, #2]
   10fd6:	70f9      	strb	r1, [r7, #3]
   10fd8:	6838      	ldr	r0, [r7, #0]
   10fda:	6118      	str	r0, [r3, #16]
   10fdc:	2100      	movs	r1, #0
   10fde:	f36f 0100 	bfc	r1, #0, #1
   10fe2:	f36f 0141 	bfc	r1, #1, #1
   10fe6:	f36f 0182 	bfc	r1, #2, #1
   10fea:	f36f 01c5 	bfc	r1, #3, #3
   10fee:	2301      	movs	r3, #1
   10ff0:	f363 1188 	bfi	r1, r3, #6, #3
   10ff4:	f3c4 040a 	ubfx	r4, r4, #0, #11
   10ff8:	f364 2153 	bfi	r1, r4, #9, #11
   10ffc:	f36f 511f 	bfc	r1, #20, #12
   11000:	2300      	movs	r3, #0
   11002:	4804      	ldr	r0, [pc, #16]	; (11014 <bt_hci_le_adv_report+0x174>)
   11004:	f7fa ff30 	bl	be68 <z_impl_z_log_msg_static_create>
   11008:	46ad      	mov	sp, r5
   1100a:	e788      	b.n	10f1e <bt_hci_le_adv_report+0x7e>
   1100c:	0001b578 	.word	0x0001b578
   11010:	0001b598 	.word	0x0001b598
   11014:	0001a0cc 	.word	0x0001a0cc

00011018 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   11018:	b538      	push	{r3, r4, r5, lr}
   1101a:	f3bf 8f5b 	dmb	ish
   1101e:	4b3c      	ldr	r3, [pc, #240]	; (11110 <bt_le_scan_start+0xf8>)
   11020:	681b      	ldr	r3, [r3, #0]
   11022:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11026:	f013 0f04 	tst.w	r3, #4
   1102a:	d065      	beq.n	110f8 <bt_le_scan_start+0xe0>
   1102c:	4604      	mov	r4, r0
   1102e:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   11030:	f006 fc20 	bl	17874 <valid_le_scan_param>
   11034:	2800      	cmp	r0, #0
   11036:	d062      	beq.n	110fe <bt_le_scan_start+0xe6>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   11038:	7823      	ldrb	r3, [r4, #0]
   1103a:	b11b      	cbz	r3, 11044 <bt_le_scan_start+0x2c>
   1103c:	f006 fc07 	bl	1784e <bt_id_scan_random_addr_check>
   11040:	2800      	cmp	r0, #0
   11042:	d05f      	beq.n	11104 <bt_le_scan_start+0xec>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11044:	4b32      	ldr	r3, [pc, #200]	; (11110 <bt_le_scan_start+0xf8>)
   11046:	f3bf 8f5b 	dmb	ish
   1104a:	e853 2f00 	ldrex	r2, [r3]
   1104e:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   11052:	e843 1000 	strex	r0, r1, [r3]
   11056:	2800      	cmp	r0, #0
   11058:	d1f7      	bne.n	1104a <bt_le_scan_start+0x32>
   1105a:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1105e:	f012 0f80 	tst.w	r2, #128	; 0x80
   11062:	d152      	bne.n	1110a <bt_le_scan_start+0xf2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11064:	f3bf 8f5b 	dmb	ish
   11068:	681b      	ldr	r3, [r3, #0]
   1106a:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1106e:	f013 0f40 	tst.w	r3, #64	; 0x40
   11072:	d003      	beq.n	1107c <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   11074:	2000      	movs	r0, #0
   11076:	f006 fc44 	bl	17902 <bt_le_scan_set_enable>
		if (err) {
   1107a:	b988      	cbnz	r0, 110a0 <bt_le_scan_start+0x88>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   1107c:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   1107e:	f002 0201 	and.w	r2, r2, #1
   11082:	2109      	movs	r1, #9
   11084:	4822      	ldr	r0, [pc, #136]	; (11110 <bt_le_scan_start+0xf8>)
   11086:	f006 fc17 	bl	178b8 <atomic_set_bit_to>
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   1108a:	89a3      	ldrh	r3, [r4, #12]
   1108c:	b9b3      	cbnz	r3, 110bc <bt_le_scan_start+0xa4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   1108e:	8962      	ldrh	r2, [r4, #10]
   11090:	8921      	ldrh	r1, [r4, #8]
   11092:	7820      	ldrb	r0, [r4, #0]
   11094:	f7ff fe9e 	bl	10dd4 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   11098:	bb00      	cbnz	r0, 110dc <bt_le_scan_start+0xc4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   1109a:	4b1e      	ldr	r3, [pc, #120]	; (11114 <bt_le_scan_start+0xfc>)
   1109c:	601d      	str	r5, [r3, #0]

	return 0;
}
   1109e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   110a0:	4b1b      	ldr	r3, [pc, #108]	; (11110 <bt_le_scan_start+0xf8>)
   110a2:	f3bf 8f5b 	dmb	ish
   110a6:	e853 1f00 	ldrex	r1, [r3]
   110aa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   110ae:	e843 1200 	strex	r2, r1, [r3]
   110b2:	2a00      	cmp	r2, #0
   110b4:	d1f7      	bne.n	110a6 <bt_le_scan_start+0x8e>
   110b6:	f3bf 8f5b 	dmb	ish
			return err;
   110ba:	e7f0      	b.n	1109e <bt_le_scan_start+0x86>
   110bc:	4b14      	ldr	r3, [pc, #80]	; (11110 <bt_le_scan_start+0xf8>)
   110be:	f3bf 8f5b 	dmb	ish
   110c2:	e853 1f00 	ldrex	r1, [r3]
   110c6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   110ca:	e843 1200 	strex	r2, r1, [r3]
   110ce:	2a00      	cmp	r2, #0
   110d0:	d1f7      	bne.n	110c2 <bt_le_scan_start+0xaa>
   110d2:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   110d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   110da:	e7e0      	b.n	1109e <bt_le_scan_start+0x86>
   110dc:	4b0c      	ldr	r3, [pc, #48]	; (11110 <bt_le_scan_start+0xf8>)
   110de:	f3bf 8f5b 	dmb	ish
   110e2:	e853 1f00 	ldrex	r1, [r3]
   110e6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   110ea:	e843 1200 	strex	r2, r1, [r3]
   110ee:	2a00      	cmp	r2, #0
   110f0:	d1f7      	bne.n	110e2 <bt_le_scan_start+0xca>
   110f2:	f3bf 8f5b 	dmb	ish
		return err;
   110f6:	e7d2      	b.n	1109e <bt_le_scan_start+0x86>
		return -EAGAIN;
   110f8:	f06f 000a 	mvn.w	r0, #10
   110fc:	e7cf      	b.n	1109e <bt_le_scan_start+0x86>
		return -EINVAL;
   110fe:	f06f 0015 	mvn.w	r0, #21
   11102:	e7cc      	b.n	1109e <bt_le_scan_start+0x86>
		return -EINVAL;
   11104:	f06f 0015 	mvn.w	r0, #21
   11108:	e7c9      	b.n	1109e <bt_le_scan_start+0x86>
		return -EALREADY;
   1110a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1110e:	e7c6      	b.n	1109e <bt_le_scan_start+0x86>
   11110:	20000274 	.word	0x20000274
   11114:	20002008 	.word	0x20002008

00011118 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   11118:	4b03      	ldr	r3, [pc, #12]	; (11128 <pool_id+0x10>)
   1111a:	1ac0      	subs	r0, r0, r3
   1111c:	1080      	asrs	r0, r0, #2
}
   1111e:	4b03      	ldr	r3, [pc, #12]	; (1112c <pool_id+0x14>)
   11120:	fb03 f000 	mul.w	r0, r3, r0
   11124:	4770      	bx	lr
   11126:	bf00      	nop
   11128:	20000454 	.word	0x20000454
   1112c:	ba2e8ba3 	.word	0xba2e8ba3

00011130 <net_buf_pool_get>:
}
   11130:	222c      	movs	r2, #44	; 0x2c
   11132:	4b02      	ldr	r3, [pc, #8]	; (1113c <net_buf_pool_get+0xc>)
   11134:	fb02 3000 	mla	r0, r2, r0, r3
   11138:	4770      	bx	lr
   1113a:	bf00      	nop
   1113c:	20000454 	.word	0x20000454

00011140 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   11140:	4800      	ldr	r0, [pc, #0]	; (11144 <get_hf_flags+0x4>)
   11142:	4770      	bx	lr
   11144:	20002060 	.word	0x20002060

00011148 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11148:	4b03      	ldr	r3, [pc, #12]	; (11158 <get_subsys+0x10>)
   1114a:	1ac0      	subs	r0, r0, r3
   1114c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1114e:	4b03      	ldr	r3, [pc, #12]	; (1115c <get_subsys+0x14>)
   11150:	fb03 f000 	mul.w	r0, r3, r0
   11154:	4770      	bx	lr
   11156:	bf00      	nop
   11158:	20002020 	.word	0x20002020
   1115c:	b6db6db7 	.word	0xb6db6db7

00011160 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11160:	b538      	push	{r3, r4, r5, lr}
   11162:	4605      	mov	r5, r0
   11164:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11166:	f7ff ffef 	bl	11148 <get_subsys>
   1116a:	4601      	mov	r1, r0
   1116c:	2240      	movs	r2, #64	; 0x40
   1116e:	4803      	ldr	r0, [pc, #12]	; (1117c <onoff_stop+0x1c>)
   11170:	f006 fdde 	bl	17d30 <stop>
   11174:	4601      	mov	r1, r0
	notify(mgr, res);
   11176:	4628      	mov	r0, r5
   11178:	47a0      	blx	r4
}
   1117a:	bd38      	pop	{r3, r4, r5, pc}
   1117c:	00019eb0 	.word	0x00019eb0

00011180 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11180:	b530      	push	{r4, r5, lr}
   11182:	b083      	sub	sp, #12
   11184:	4605      	mov	r5, r0
   11186:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11188:	f7ff ffde 	bl	11148 <get_subsys>
   1118c:	4601      	mov	r1, r0
   1118e:	2340      	movs	r3, #64	; 0x40
   11190:	9300      	str	r3, [sp, #0]
   11192:	4623      	mov	r3, r4
   11194:	4a05      	ldr	r2, [pc, #20]	; (111ac <onoff_start+0x2c>)
   11196:	4806      	ldr	r0, [pc, #24]	; (111b0 <onoff_start+0x30>)
   11198:	f006 fde4 	bl	17d64 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1119c:	1e01      	subs	r1, r0, #0
   1119e:	db01      	blt.n	111a4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   111a0:	b003      	add	sp, #12
   111a2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   111a4:	4628      	mov	r0, r5
   111a6:	47a0      	blx	r4
}
   111a8:	e7fa      	b.n	111a0 <onoff_start+0x20>
   111aa:	bf00      	nop
   111ac:	00017dad 	.word	0x00017dad
   111b0:	00019eb0 	.word	0x00019eb0

000111b4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   111b4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   111b6:	b110      	cbz	r0, 111be <clock_event_handler+0xa>
   111b8:	2801      	cmp	r0, #1
   111ba:	d00d      	beq.n	111d8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   111bc:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   111be:	2100      	movs	r1, #0
   111c0:	4808      	ldr	r0, [pc, #32]	; (111e4 <clock_event_handler+0x30>)
   111c2:	f006 fd3e 	bl	17c42 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   111c6:	6883      	ldr	r3, [r0, #8]
   111c8:	f013 0f07 	tst.w	r3, #7
   111cc:	d1f6      	bne.n	111bc <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   111ce:	2100      	movs	r1, #0
   111d0:	4804      	ldr	r0, [pc, #16]	; (111e4 <clock_event_handler+0x30>)
   111d2:	f006 fd9b 	bl	17d0c <clkstarted_handle>
   111d6:	e7f1      	b.n	111bc <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   111d8:	2101      	movs	r1, #1
   111da:	4802      	ldr	r0, [pc, #8]	; (111e4 <clock_event_handler+0x30>)
   111dc:	f006 fd96 	bl	17d0c <clkstarted_handle>
}
   111e0:	e7ec      	b.n	111bc <clock_event_handler+0x8>
   111e2:	bf00      	nop
   111e4:	00019eb0 	.word	0x00019eb0

000111e8 <generic_hfclk_start>:
{
   111e8:	b510      	push	{r4, lr}
   111ea:	b082      	sub	sp, #8
	__asm__ volatile(
   111ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   111f0:	f3ef 8411 	mrs	r4, BASEPRI
   111f4:	f383 8812 	msr	BASEPRI_MAX, r3
   111f8:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   111fc:	4a14      	ldr	r2, [pc, #80]	; (11250 <generic_hfclk_start+0x68>)
   111fe:	6813      	ldr	r3, [r2, #0]
   11200:	f043 0102 	orr.w	r1, r3, #2
   11204:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11206:	f013 0f01 	tst.w	r3, #1
   1120a:	d109      	bne.n	11220 <generic_hfclk_start+0x38>
	bool already_started = false;
   1120c:	2300      	movs	r3, #0
	__asm__ volatile(
   1120e:	f384 8811 	msr	BASEPRI, r4
   11212:	f3bf 8f6f 	isb	sy
	if (already_started) {
   11216:	b9b3      	cbnz	r3, 11246 <generic_hfclk_start+0x5e>
	hfclk_start();
   11218:	f006 fdd0 	bl	17dbc <hfclk_start>
}
   1121c:	b002      	add	sp, #8
   1121e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   11220:	f10d 0207 	add.w	r2, sp, #7
   11224:	2101      	movs	r1, #1
   11226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1122a:	f006 fce7 	bl	17bfc <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1122e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11232:	2b01      	cmp	r3, #1
   11234:	d001      	beq.n	1123a <generic_hfclk_start+0x52>
	bool already_started = false;
   11236:	2300      	movs	r3, #0
   11238:	e7e9      	b.n	1120e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1123a:	f7ff ff81 	bl	11140 <get_hf_flags>
   1123e:	f006 fd52 	bl	17ce6 <set_on_state>
			already_started = true;
   11242:	2301      	movs	r3, #1
   11244:	e7e3      	b.n	1120e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   11246:	2100      	movs	r1, #0
   11248:	4802      	ldr	r0, [pc, #8]	; (11254 <generic_hfclk_start+0x6c>)
   1124a:	f006 fd5f 	bl	17d0c <clkstarted_handle>
		return;
   1124e:	e7e5      	b.n	1121c <generic_hfclk_start+0x34>
   11250:	20002070 	.word	0x20002070
   11254:	00019eb0 	.word	0x00019eb0

00011258 <generic_hfclk_stop>:
{
   11258:	b510      	push	{r4, lr}
	__asm__ volatile(
   1125a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1125e:	f3ef 8411 	mrs	r4, BASEPRI
   11262:	f383 8812 	msr	BASEPRI_MAX, r3
   11266:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1126a:	4a08      	ldr	r2, [pc, #32]	; (1128c <generic_hfclk_stop+0x34>)
   1126c:	6813      	ldr	r3, [r2, #0]
   1126e:	f023 0102 	bic.w	r1, r3, #2
   11272:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   11274:	f013 0f01 	tst.w	r3, #1
   11278:	d004      	beq.n	11284 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   1127a:	f384 8811 	msr	BASEPRI, r4
   1127e:	f3bf 8f6f 	isb	sy
}
   11282:	bd10      	pop	{r4, pc}
		hfclk_stop();
   11284:	f006 fd9f 	bl	17dc6 <hfclk_stop>
   11288:	e7f7      	b.n	1127a <generic_hfclk_stop+0x22>
   1128a:	bf00      	nop
   1128c:	20002070 	.word	0x20002070

00011290 <lfclk_spinwait>:
{
   11290:	b570      	push	{r4, r5, r6, lr}
   11292:	b082      	sub	sp, #8
   11294:	4606      	mov	r6, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11296:	f008 f800 	bl	1929a <k_is_in_isr>
   1129a:	b918      	cbnz	r0, 112a4 <lfclk_spinwait+0x14>
   1129c:	4604      	mov	r4, r0
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1129e:	4b1b      	ldr	r3, [pc, #108]	; (1130c <lfclk_spinwait+0x7c>)
   112a0:	781b      	ldrb	r3, [r3, #0]
   112a2:	b97b      	cbnz	r3, 112c4 <lfclk_spinwait+0x34>
	__asm__ volatile(
   112a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   112a8:	f3ef 8511 	mrs	r5, BASEPRI
   112ac:	f383 8812 	msr	BASEPRI_MAX, r3
   112b0:	f3bf 8f6f 	isb	sy
   112b4:	2401      	movs	r4, #1
	if (!isr_mode) {
   112b6:	b95c      	cbnz	r4, 112d0 <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   112b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   112bc:	2202      	movs	r2, #2
   112be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   112c2:	e005      	b.n	112d0 <lfclk_spinwait+0x40>
	int key = isr_mode ? irq_lock() : 0;
   112c4:	2500      	movs	r5, #0
   112c6:	e7f6      	b.n	112b6 <lfclk_spinwait+0x26>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   112c8:	b1ac      	cbz	r4, 112f6 <lfclk_spinwait+0x66>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   112ca:	4628      	mov	r0, r5
   112cc:	f7fb fab8 	bl	c840 <arch_cpu_atomic_idle>
   112d0:	aa01      	add	r2, sp, #4
   112d2:	2100      	movs	r1, #0
   112d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   112d8:	f006 fc90 	bl	17bfc <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   112dc:	2800      	cmp	r0, #0
   112de:	d0f3      	beq.n	112c8 <lfclk_spinwait+0x38>
		 && ((type == target_type)
   112e0:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   112e2:	b10b      	cbz	r3, 112e8 <lfclk_spinwait+0x58>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   112e4:	2e01      	cmp	r6, #1
   112e6:	d1ef      	bne.n	112c8 <lfclk_spinwait+0x38>
	if (isr_mode) {
   112e8:	b14c      	cbz	r4, 112fe <lfclk_spinwait+0x6e>
	__asm__ volatile(
   112ea:	f385 8811 	msr	BASEPRI, r5
   112ee:	f3bf 8f6f 	isb	sy
}
   112f2:	b002      	add	sp, #8
   112f4:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   112f6:	2001      	movs	r0, #1
   112f8:	f006 fd6f 	bl	17dda <k_msleep>
   112fc:	e7e8      	b.n	112d0 <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
   112fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11302:	2202      	movs	r2, #2
   11304:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11308:	e7f3      	b.n	112f2 <lfclk_spinwait+0x62>
   1130a:	bf00      	nop
   1130c:	200026e0 	.word	0x200026e0

00011310 <api_blocking_start>:
{
   11310:	b500      	push	{lr}
   11312:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11314:	f8cd d000 	str.w	sp, [sp]
   11318:	f8cd d004 	str.w	sp, [sp, #4]
   1131c:	2300      	movs	r3, #0
   1131e:	9302      	str	r3, [sp, #8]
   11320:	2301      	movs	r3, #1
   11322:	9303      	str	r3, [sp, #12]
   11324:	ab04      	add	r3, sp, #16
   11326:	9304      	str	r3, [sp, #16]
   11328:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1132a:	466b      	mov	r3, sp
   1132c:	4a06      	ldr	r2, [pc, #24]	; (11348 <api_blocking_start+0x38>)
   1132e:	f006 fd35 	bl	17d9c <api_start>
	if (err < 0) {
   11332:	2800      	cmp	r0, #0
   11334:	db05      	blt.n	11342 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   11336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1133a:	2300      	movs	r3, #0
   1133c:	4668      	mov	r0, sp
   1133e:	f003 fcf1 	bl	14d24 <z_impl_k_sem_take>
}
   11342:	b007      	add	sp, #28
   11344:	f85d fb04 	ldr.w	pc, [sp], #4
   11348:	00017e07 	.word	0x00017e07

0001134c <anomaly_132_workaround>:
{
   1134c:	b508      	push	{r3, lr}
	if (!once) {
   1134e:	4b06      	ldr	r3, [pc, #24]	; (11368 <anomaly_132_workaround+0x1c>)
   11350:	781b      	ldrb	r3, [r3, #0]
   11352:	b103      	cbz	r3, 11356 <anomaly_132_workaround+0xa>
}
   11354:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
   11356:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1135a:	f008 fb49 	bl	199f0 <z_impl_k_busy_wait>
		once = true;
   1135e:	4b02      	ldr	r3, [pc, #8]	; (11368 <anomaly_132_workaround+0x1c>)
   11360:	2201      	movs	r2, #1
   11362:	701a      	strb	r2, [r3, #0]
}
   11364:	e7f6      	b.n	11354 <anomaly_132_workaround+0x8>
   11366:	bf00      	nop
   11368:	200026dc 	.word	0x200026dc

0001136c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1136c:	b570      	push	{r4, r5, r6, lr}
   1136e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11370:	2200      	movs	r2, #0
   11372:	2101      	movs	r1, #1
   11374:	4610      	mov	r0, r2
   11376:	f006 f889 	bl	1748c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1137a:	4811      	ldr	r0, [pc, #68]	; (113c0 <clk_init+0x54>)
   1137c:	f001 fff2 	bl	13364 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11380:	4b10      	ldr	r3, [pc, #64]	; (113c4 <clk_init+0x58>)
   11382:	4298      	cmp	r0, r3
   11384:	d119      	bne.n	113ba <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11386:	f007 fb6d 	bl	18a64 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1138a:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1138c:	2c01      	cmp	r4, #1
   1138e:	d812      	bhi.n	113b6 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   11390:	4621      	mov	r1, r4
   11392:	4630      	mov	r0, r6
   11394:	f006 fc55 	bl	17c42 <get_sub_data>
   11398:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1139a:	4621      	mov	r1, r4
   1139c:	4630      	mov	r0, r6
   1139e:	f006 fc5d 	bl	17c5c <get_onoff_manager>
   113a2:	4909      	ldr	r1, [pc, #36]	; (113c8 <clk_init+0x5c>)
   113a4:	f005 f8d9 	bl	1655a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   113a8:	2800      	cmp	r0, #0
   113aa:	db05      	blt.n	113b8 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   113ac:	2301      	movs	r3, #1
   113ae:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   113b0:	441c      	add	r4, r3
   113b2:	b2e4      	uxtb	r4, r4
   113b4:	e7ea      	b.n	1138c <clk_init+0x20>
	}

	return 0;
   113b6:	2000      	movs	r0, #0
}
   113b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   113ba:	f06f 0004 	mvn.w	r0, #4
   113be:	e7fb      	b.n	113b8 <clk_init+0x4c>
   113c0:	000111b5 	.word	0x000111b5
   113c4:	0bad0000 	.word	0x0bad0000
   113c8:	0001b5dc 	.word	0x0001b5dc

000113cc <z_nrf_clock_control_lf_on>:
{
   113cc:	b510      	push	{r4, lr}
   113ce:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   113d0:	4b10      	ldr	r3, [pc, #64]	; (11414 <z_nrf_clock_control_lf_on+0x48>)
   113d2:	2101      	movs	r1, #1
   113d4:	f3bf 8f5b 	dmb	ish
   113d8:	e853 2f00 	ldrex	r2, [r3]
   113dc:	e843 1000 	strex	r0, r1, [r3]
   113e0:	2800      	cmp	r0, #0
   113e2:	d1f9      	bne.n	113d8 <z_nrf_clock_control_lf_on+0xc>
   113e4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   113e8:	b11a      	cbz	r2, 113f2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   113ea:	1e63      	subs	r3, r4, #1
   113ec:	2b01      	cmp	r3, #1
   113ee:	d90d      	bls.n	1140c <z_nrf_clock_control_lf_on+0x40>
}
   113f0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   113f2:	4809      	ldr	r0, [pc, #36]	; (11418 <z_nrf_clock_control_lf_on+0x4c>)
   113f4:	f006 fc32 	bl	17c5c <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   113f8:	4908      	ldr	r1, [pc, #32]	; (1141c <z_nrf_clock_control_lf_on+0x50>)
   113fa:	2300      	movs	r3, #0
   113fc:	604b      	str	r3, [r1, #4]
   113fe:	608b      	str	r3, [r1, #8]
   11400:	60cb      	str	r3, [r1, #12]
   11402:	2301      	movs	r3, #1
   11404:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   11406:	f005 f8c5 	bl	16594 <onoff_request>
   1140a:	e7ee      	b.n	113ea <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1140c:	4620      	mov	r0, r4
   1140e:	f7ff ff3f 	bl	11290 <lfclk_spinwait>
		break;
   11412:	e7ed      	b.n	113f0 <z_nrf_clock_control_lf_on+0x24>
   11414:	2000201c 	.word	0x2000201c
   11418:	00019eb0 	.word	0x00019eb0
   1141c:	2000200c 	.word	0x2000200c

00011420 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   11420:	b510      	push	{r4, lr}
   11422:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
   11424:	280a      	cmp	r0, #10
   11426:	d006      	beq.n	11436 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   11428:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1142a:	4806      	ldr	r0, [pc, #24]	; (11444 <console_out+0x24>)
   1142c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1142e:	685b      	ldr	r3, [r3, #4]
   11430:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   11432:	4620      	mov	r0, r4
   11434:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   11436:	4803      	ldr	r0, [pc, #12]	; (11444 <console_out+0x24>)
   11438:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1143a:	685b      	ldr	r3, [r3, #4]
   1143c:	210d      	movs	r1, #13
   1143e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   11440:	e7f2      	b.n	11428 <console_out+0x8>
   11442:	bf00      	nop
   11444:	00019f10 	.word	0x00019f10

00011448 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   11448:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1144a:	4c04      	ldr	r4, [pc, #16]	; (1145c <uart_console_hook_install+0x14>)
   1144c:	4620      	mov	r0, r4
   1144e:	f7fd f837 	bl	e4c0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   11452:	4620      	mov	r0, r4
   11454:	f7f9 fde8 	bl	b028 <__printk_hook_install>
#endif
}
   11458:	bd10      	pop	{r4, pc}
   1145a:	bf00      	nop
   1145c:	00011421 	.word	0x00011421

00011460 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   11460:	b508      	push	{r3, lr}
   11462:	4805      	ldr	r0, [pc, #20]	; (11478 <uart_console_init+0x18>)
   11464:	f007 fe73 	bl	1914e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   11468:	b118      	cbz	r0, 11472 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   1146a:	f7ff ffed 	bl	11448 <uart_console_hook_install>

	return 0;
   1146e:	2000      	movs	r0, #0
}
   11470:	bd08      	pop	{r3, pc}
		return -ENODEV;
   11472:	f06f 0012 	mvn.w	r0, #18
   11476:	e7fb      	b.n	11470 <uart_console_init+0x10>
   11478:	00019f10 	.word	0x00019f10

0001147c <random_byte_get>:
	__asm__ volatile(
   1147c:	f04f 0240 	mov.w	r2, #64	; 0x40
   11480:	f3ef 8311 	mrs	r3, BASEPRI
   11484:	f382 8812 	msr	BASEPRI_MAX, r2
   11488:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1148c:	4a0a      	ldr	r2, [pc, #40]	; (114b8 <random_byte_get+0x3c>)
   1148e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   11492:	b16a      	cbz	r2, 114b0 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   11494:	4a08      	ldr	r2, [pc, #32]	; (114b8 <random_byte_get+0x3c>)
   11496:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1149a:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1149c:	2100      	movs	r1, #0
   1149e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   114a2:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   114a6:	f383 8811 	msr	BASEPRI, r3
   114aa:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   114ae:	4770      	bx	lr
	int retval = -EAGAIN;
   114b0:	f06f 000a 	mvn.w	r0, #10
   114b4:	e7f7      	b.n	114a6 <random_byte_get+0x2a>
   114b6:	bf00      	nop
   114b8:	4000d000 	.word	0x4000d000

000114bc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   114bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   114be:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   114c0:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   114c2:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   114c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   114c8:	f3ef 8011 	mrs	r0, BASEPRI
   114cc:	f383 8812 	msr	BASEPRI_MAX, r3
   114d0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   114d4:	f89e 6000 	ldrb.w	r6, [lr]
   114d8:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   114da:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   114de:	1bad      	subs	r5, r5, r6
   114e0:	4025      	ands	r5, r4
	if (available < len) {
   114e2:	42aa      	cmp	r2, r5
   114e4:	d900      	bls.n	114e8 <rng_pool_get+0x2c>
		len = available;
   114e6:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   114e8:	eb06 0c02 	add.w	ip, r6, r2
   114ec:	ea0c 0c04 	and.w	ip, ip, r4
   114f0:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   114f4:	f380 8811 	msr	BASEPRI, r0
   114f8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   114fc:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   114fe:	e007      	b.n	11510 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   11500:	eb0e 0203 	add.w	r2, lr, r3
   11504:	7952      	ldrb	r2, [r2, #5]
   11506:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1150a:	3301      	adds	r3, #1
   1150c:	4023      	ands	r3, r4
	while (likely(len--)) {
   1150e:	4662      	mov	r2, ip
   11510:	f102 3cff 	add.w	ip, r2, #4294967295
   11514:	fa1f fc8c 	uxth.w	ip, ip
   11518:	2a00      	cmp	r2, #0
   1151a:	d1f1      	bne.n	11500 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1151c:	42be      	cmp	r6, r7
   1151e:	d10f      	bne.n	11540 <rng_pool_get+0x84>
	__asm__ volatile(
   11520:	f04f 0240 	mov.w	r2, #64	; 0x40
   11524:	f3ef 8311 	mrs	r3, BASEPRI
   11528:	f382 8812 	msr	BASEPRI_MAX, r2
   1152c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   11530:	f89e 2000 	ldrb.w	r2, [lr]
   11534:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   11538:	f383 8811 	msr	BASEPRI, r3
   1153c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   11540:	1a40      	subs	r0, r0, r1
   11542:	b280      	uxth	r0, r0
	available = available - len;
   11544:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   11546:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1154a:	42ab      	cmp	r3, r5
   1154c:	d302      	bcc.n	11554 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1154e:	4b02      	ldr	r3, [pc, #8]	; (11558 <rng_pool_get+0x9c>)
   11550:	2201      	movs	r2, #1
   11552:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   11554:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11556:	bf00      	nop
   11558:	4000d000 	.word	0x4000d000

0001155c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1155e:	460d      	mov	r5, r1
   11560:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   11562:	f013 0f01 	tst.w	r3, #1
   11566:	d103      	bne.n	11570 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   11568:	4826      	ldr	r0, [pc, #152]	; (11604 <entropy_nrf5_get_entropy_isr+0xa8>)
   1156a:	f7ff ffa7 	bl	114bc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1156e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   11570:	b90a      	cbnz	r2, 11576 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   11572:	4620      	mov	r0, r4
   11574:	e7fb      	b.n	1156e <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   11576:	f04f 0340 	mov.w	r3, #64	; 0x40
   1157a:	f3ef 8611 	mrs	r6, BASEPRI
   1157e:	f383 8812 	msr	BASEPRI_MAX, r3
   11582:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   11586:	200d      	movs	r0, #13
   11588:	f7fb fad0 	bl	cb2c <arch_irq_is_enabled>
   1158c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1158e:	200d      	movs	r0, #13
   11590:	f005 ff77 	bl	17482 <arch_irq_disable>
	__asm__ volatile(
   11594:	f386 8811 	msr	BASEPRI, r6
   11598:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1159c:	4b1a      	ldr	r3, [pc, #104]	; (11608 <entropy_nrf5_get_entropy_isr+0xac>)
   1159e:	2200      	movs	r2, #0
   115a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   115a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   115a8:	2201      	movs	r2, #1
   115aa:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115ac:	4b17      	ldr	r3, [pc, #92]	; (1160c <entropy_nrf5_get_entropy_isr+0xb0>)
   115ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   115b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   115b6:	4626      	mov	r6, r4
   115b8:	e00b      	b.n	115d2 <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   115ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   115be:	f3ef 8011 	mrs	r0, BASEPRI
   115c2:	f383 8812 	msr	BASEPRI_MAX, r3
   115c6:	f3bf 8f6f 	isb	sy
   115ca:	f7fb f939 	bl	c840 <arch_cpu_atomic_idle>
}
   115ce:	e000      	b.n	115d2 <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   115d0:	b18e      	cbz	r6, 115f6 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   115d2:	4b0d      	ldr	r3, [pc, #52]	; (11608 <entropy_nrf5_get_entropy_isr+0xac>)
   115d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   115d8:	2b00      	cmp	r3, #0
   115da:	d0ee      	beq.n	115ba <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   115dc:	f7ff ff4e 	bl	1147c <random_byte_get>
   115e0:	4b0a      	ldr	r3, [pc, #40]	; (1160c <entropy_nrf5_get_entropy_isr+0xb0>)
   115e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   115e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   115ea:	2800      	cmp	r0, #0
   115ec:	dbf0      	blt.n	115d0 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   115ee:	3e01      	subs	r6, #1
   115f0:	b2b6      	uxth	r6, r6
   115f2:	55a8      	strb	r0, [r5, r6]
   115f4:	e7ec      	b.n	115d0 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   115f6:	2f00      	cmp	r7, #0
   115f8:	d0bb      	beq.n	11572 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   115fa:	200d      	movs	r0, #13
   115fc:	f005 ff3c 	bl	17478 <arch_irq_enable>
   11600:	e7b7      	b.n	11572 <entropy_nrf5_get_entropy_isr+0x16>
   11602:	bf00      	nop
   11604:	200020a4 	.word	0x200020a4
   11608:	4000d000 	.word	0x4000d000
   1160c:	e000e100 	.word	0xe000e100

00011610 <isr>:
{
   11610:	b510      	push	{r4, lr}
	byte = random_byte_get();
   11612:	f7ff ff33 	bl	1147c <random_byte_get>
	if (byte < 0) {
   11616:	2800      	cmp	r0, #0
   11618:	db06      	blt.n	11628 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1161a:	b2c4      	uxtb	r4, r0
   1161c:	4621      	mov	r1, r4
   1161e:	480a      	ldr	r0, [pc, #40]	; (11648 <isr+0x38>)
   11620:	f006 fbfd 	bl	17e1e <rng_pool_put>
	if (ret < 0) {
   11624:	2800      	cmp	r0, #0
   11626:	db00      	blt.n	1162a <isr+0x1a>
}
   11628:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1162a:	4621      	mov	r1, r4
   1162c:	4807      	ldr	r0, [pc, #28]	; (1164c <isr+0x3c>)
   1162e:	f006 fbf6 	bl	17e1e <rng_pool_put>
		if (ret < 0) {
   11632:	2800      	cmp	r0, #0
   11634:	db03      	blt.n	1163e <isr+0x2e>
	z_impl_k_sem_give(sem);
   11636:	4806      	ldr	r0, [pc, #24]	; (11650 <isr+0x40>)
   11638:	f003 fb4c 	bl	14cd4 <z_impl_k_sem_give>
}
   1163c:	e7f4      	b.n	11628 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1163e:	4b05      	ldr	r3, [pc, #20]	; (11654 <isr+0x44>)
   11640:	2201      	movs	r2, #1
   11642:	605a      	str	r2, [r3, #4]
}
   11644:	e7f7      	b.n	11636 <isr+0x26>
   11646:	bf00      	nop
   11648:	200020a4 	.word	0x200020a4
   1164c:	200020b9 	.word	0x200020b9
   11650:	2000208c 	.word	0x2000208c
   11654:	4000d000 	.word	0x4000d000

00011658 <entropy_nrf5_get_entropy>:
{
   11658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1165a:	460f      	mov	r7, r1
   1165c:	4614      	mov	r4, r2
	while (len) {
   1165e:	e007      	b.n	11670 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   11660:	f04f 32ff 	mov.w	r2, #4294967295
   11664:	f04f 33ff 	mov.w	r3, #4294967295
   11668:	f106 0018 	add.w	r0, r6, #24
   1166c:	f003 fb5a 	bl	14d24 <z_impl_k_sem_take>
   11670:	b1bc      	cbz	r4, 116a2 <entropy_nrf5_get_entropy+0x4a>
   11672:	4e0d      	ldr	r6, [pc, #52]	; (116a8 <entropy_nrf5_get_entropy+0x50>)
   11674:	f04f 32ff 	mov.w	r2, #4294967295
   11678:	f04f 33ff 	mov.w	r3, #4294967295
   1167c:	4630      	mov	r0, r6
   1167e:	f003 fb51 	bl	14d24 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   11682:	4622      	mov	r2, r4
   11684:	4639      	mov	r1, r7
   11686:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1168a:	f7ff ff17 	bl	114bc <rng_pool_get>
   1168e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   11690:	4630      	mov	r0, r6
   11692:	f003 fb1f 	bl	14cd4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   11696:	2d00      	cmp	r5, #0
   11698:	d0e2      	beq.n	11660 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   1169a:	1b64      	subs	r4, r4, r5
   1169c:	b2a4      	uxth	r4, r4
		buf += bytes;
   1169e:	442f      	add	r7, r5
   116a0:	e7e6      	b.n	11670 <entropy_nrf5_get_entropy+0x18>
}
   116a2:	2000      	movs	r0, #0
   116a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116a6:	bf00      	nop
   116a8:	20002074 	.word	0x20002074

000116ac <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   116ac:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   116ae:	4c18      	ldr	r4, [pc, #96]	; (11710 <entropy_nrf5_init+0x64>)
   116b0:	2201      	movs	r2, #1
   116b2:	4611      	mov	r1, r2
   116b4:	4620      	mov	r0, r4
   116b6:	f007 fefb 	bl	194b0 <z_impl_k_sem_init>
   116ba:	2201      	movs	r2, #1
   116bc:	2100      	movs	r1, #0
   116be:	f104 0018 	add.w	r0, r4, #24
   116c2:	f007 fef5 	bl	194b0 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   116c6:	2204      	movs	r2, #4
   116c8:	2108      	movs	r1, #8
   116ca:	f104 0045 	add.w	r0, r4, #69	; 0x45
   116ce:	f006 fbb9 	bl	17e44 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   116d2:	220c      	movs	r2, #12
   116d4:	2110      	movs	r1, #16
   116d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   116da:	f006 fbb3 	bl	17e44 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   116de:	4b0d      	ldr	r3, [pc, #52]	; (11714 <entropy_nrf5_init+0x68>)
   116e0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   116e4:	f022 0201 	bic.w	r2, r2, #1
   116e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   116ec:	2400      	movs	r4, #0
   116ee:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   116f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   116f6:	2101      	movs	r1, #1
   116f8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   116fc:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   116fe:	4622      	mov	r2, r4
   11700:	200d      	movs	r0, #13
   11702:	f005 fec3 	bl	1748c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   11706:	200d      	movs	r0, #13
   11708:	f005 feb6 	bl	17478 <arch_irq_enable>

	return 0;
}
   1170c:	4620      	mov	r0, r4
   1170e:	bd10      	pop	{r4, pc}
   11710:	20002074 	.word	0x20002074
   11714:	4000d000 	.word	0x4000d000

00011718 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11718:	b908      	cbnz	r0, 1171e <get_dev+0x6>
   1171a:	4802      	ldr	r0, [pc, #8]	; (11724 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1171c:	4770      	bx	lr
	const struct device *dev = NULL;
   1171e:	2000      	movs	r0, #0
   11720:	4770      	bx	lr
   11722:	bf00      	nop
   11724:	00019ec8 	.word	0x00019ec8

00011728 <gpio_nrfx_pin_interrupt_configure>:
{
   11728:	b5f0      	push	{r4, r5, r6, r7, lr}
   1172a:	b085      	sub	sp, #20
   1172c:	460e      	mov	r6, r1
   1172e:	4619      	mov	r1, r3
	return port->config;
   11730:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11732:	7b1b      	ldrb	r3, [r3, #12]
   11734:	f006 051f 	and.w	r5, r6, #31
   11738:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1173c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   11740:	d022      	beq.n	11788 <gpio_nrfx_pin_interrupt_configure+0x60>
   11742:	4607      	mov	r7, r0
   11744:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   11746:	2300      	movs	r3, #0
   11748:	9301      	str	r3, [sp, #4]
   1174a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1174c:	4610      	mov	r0, r2
   1174e:	f006 fc6e 	bl	1802e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11752:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   11756:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   11758:	6899      	ldr	r1, [r3, #8]
   1175a:	40f1      	lsrs	r1, r6
   1175c:	f011 0f01 	tst.w	r1, #1
   11760:	d102      	bne.n	11768 <gpio_nrfx_pin_interrupt_configure+0x40>
   11762:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   11766:	d014      	beq.n	11792 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11768:	2300      	movs	r3, #0
   1176a:	aa01      	add	r2, sp, #4
   1176c:	4619      	mov	r1, r3
   1176e:	4628      	mov	r0, r5
   11770:	f002 f8f0 	bl	13954 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11774:	4b19      	ldr	r3, [pc, #100]	; (117dc <gpio_nrfx_pin_interrupt_configure+0xb4>)
   11776:	4298      	cmp	r0, r3
   11778:	d12c      	bne.n	117d4 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1177a:	2101      	movs	r1, #1
   1177c:	4628      	mov	r0, r5
   1177e:	f002 fa49 	bl	13c14 <nrfx_gpiote_trigger_enable>
	return 0;
   11782:	2000      	movs	r0, #0
}
   11784:	b005      	add	sp, #20
   11786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   11788:	4628      	mov	r0, r5
   1178a:	f002 fa7f 	bl	13c8c <nrfx_gpiote_trigger_disable>
		return 0;
   1178e:	2000      	movs	r0, #0
   11790:	e7f8      	b.n	11784 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   11792:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   11796:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1179a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   117a2:	f013 0f01 	tst.w	r3, #1
   117a6:	d1df      	bne.n	11768 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   117a8:	f10d 010f 	add.w	r1, sp, #15
   117ac:	4628      	mov	r0, r5
   117ae:	f002 f9d5 	bl	13b5c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   117b2:	4b0b      	ldr	r3, [pc, #44]	; (117e0 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   117b4:	4298      	cmp	r0, r3
   117b6:	d003      	beq.n	117c0 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
   117b8:	f10d 030f 	add.w	r3, sp, #15
   117bc:	9302      	str	r3, [sp, #8]
   117be:	e7d3      	b.n	11768 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   117c0:	f10d 000f 	add.w	r0, sp, #15
   117c4:	f002 fa1e 	bl	13c04 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   117c8:	4b04      	ldr	r3, [pc, #16]	; (117dc <gpio_nrfx_pin_interrupt_configure+0xb4>)
   117ca:	4298      	cmp	r0, r3
   117cc:	d0f4      	beq.n	117b8 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
   117ce:	f06f 000b 	mvn.w	r0, #11
   117d2:	e7d7      	b.n	11784 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   117d4:	f06f 0015 	mvn.w	r0, #21
   117d8:	e7d4      	b.n	11784 <gpio_nrfx_pin_interrupt_configure+0x5c>
   117da:	bf00      	nop
   117dc:	0bad0000 	.word	0x0bad0000
   117e0:	0bad0004 	.word	0x0bad0004

000117e4 <gpio_nrfx_pin_configure>:
{
   117e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117e8:	b086      	sub	sp, #24
   117ea:	460e      	mov	r6, r1
   117ec:	4614      	mov	r4, r2
	return port->config;
   117ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   117f2:	f898 300c 	ldrb.w	r3, [r8, #12]
   117f6:	f001 051f 	and.w	r5, r1, #31
   117fa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   117fe:	f10d 0117 	add.w	r1, sp, #23
   11802:	4628      	mov	r0, r5
   11804:	f002 f9aa 	bl	13b5c <nrfx_gpiote_channel_get>
   11808:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1180a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1180e:	d03a      	beq.n	11886 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11810:	2100      	movs	r1, #0
   11812:	9103      	str	r1, [sp, #12]
   11814:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11816:	460b      	mov	r3, r1
   11818:	aa03      	add	r2, sp, #12
   1181a:	4628      	mov	r0, r5
   1181c:	f002 f89a 	bl	13954 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11820:	4b33      	ldr	r3, [pc, #204]	; (118f0 <gpio_nrfx_pin_configure+0x10c>)
   11822:	4298      	cmp	r0, r3
   11824:	d161      	bne.n	118ea <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   11826:	429f      	cmp	r7, r3
   11828:	d03d      	beq.n	118a6 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   1182a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1182e:	d049      	beq.n	118c4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   11830:	f10d 0103 	add.w	r1, sp, #3
   11834:	4620      	mov	r0, r4
   11836:	f006 fb7f 	bl	17f38 <get_drive>
		if (rv != 0) {
   1183a:	4607      	mov	r7, r0
   1183c:	bb50      	cbnz	r0, 11894 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   1183e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11842:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   11846:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1184a:	bf0c      	ite	eq
   1184c:	2301      	moveq	r3, #1
   1184e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   11850:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   11854:	4620      	mov	r0, r4
   11856:	f006 fbb2 	bl	17fbe <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1185a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1185e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   11862:	d025      	beq.n	118b0 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   11864:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11868:	2301      	movs	r3, #1
   1186a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1186c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   11870:	2200      	movs	r2, #0
   11872:	a901      	add	r1, sp, #4
   11874:	4628      	mov	r0, r5
   11876:	f002 f901 	bl	13a7c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1187a:	4b1d      	ldr	r3, [pc, #116]	; (118f0 <gpio_nrfx_pin_configure+0x10c>)
   1187c:	4298      	cmp	r0, r3
   1187e:	d009      	beq.n	11894 <gpio_nrfx_pin_configure+0xb0>
   11880:	f06f 0715 	mvn.w	r7, #21
   11884:	e006      	b.n	11894 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   11886:	4628      	mov	r0, r5
   11888:	f002 fa2a 	bl	13ce0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1188c:	4b18      	ldr	r3, [pc, #96]	; (118f0 <gpio_nrfx_pin_configure+0x10c>)
   1188e:	429f      	cmp	r7, r3
   11890:	d004      	beq.n	1189c <gpio_nrfx_pin_configure+0xb8>
		return 0;
   11892:	2700      	movs	r7, #0
}
   11894:	4638      	mov	r0, r7
   11896:	b006      	add	sp, #24
   11898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   1189c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   118a0:	f002 f9a8 	bl	13bf4 <nrfx_gpiote_channel_free>
   118a4:	e7f5      	b.n	11892 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   118a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   118aa:	f002 f9a3 	bl	13bf4 <nrfx_gpiote_channel_free>
   118ae:	e7bc      	b.n	1182a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   118b0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   118b4:	d0dc      	beq.n	11870 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   118b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   118ba:	2301      	movs	r3, #1
   118bc:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   118be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   118c2:	e7d5      	b.n	11870 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   118c4:	4620      	mov	r0, r4
   118c6:	f006 fb7a 	bl	17fbe <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   118ca:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   118ce:	2300      	movs	r3, #0
   118d0:	461a      	mov	r2, r3
   118d2:	a902      	add	r1, sp, #8
   118d4:	4628      	mov	r0, r5
   118d6:	f002 f83d 	bl	13954 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   118da:	4b05      	ldr	r3, [pc, #20]	; (118f0 <gpio_nrfx_pin_configure+0x10c>)
   118dc:	4298      	cmp	r0, r3
   118de:	d101      	bne.n	118e4 <gpio_nrfx_pin_configure+0x100>
   118e0:	2700      	movs	r7, #0
   118e2:	e7d7      	b.n	11894 <gpio_nrfx_pin_configure+0xb0>
   118e4:	f06f 0715 	mvn.w	r7, #21
   118e8:	e7d4      	b.n	11894 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   118ea:	f06f 0715 	mvn.w	r7, #21
   118ee:	e7d1      	b.n	11894 <gpio_nrfx_pin_configure+0xb0>
   118f0:	0bad0000 	.word	0x0bad0000

000118f4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   118f4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   118f6:	f002 f973 	bl	13be0 <nrfx_gpiote_is_init>
   118fa:	b108      	cbz	r0, 11900 <gpio_nrfx_init+0xc>
		return 0;
   118fc:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   118fe:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   11900:	f002 f944 	bl	13b8c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   11904:	4b08      	ldr	r3, [pc, #32]	; (11928 <gpio_nrfx_init+0x34>)
   11906:	4298      	cmp	r0, r3
   11908:	d10a      	bne.n	11920 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1190a:	2100      	movs	r1, #0
   1190c:	4807      	ldr	r0, [pc, #28]	; (1192c <gpio_nrfx_init+0x38>)
   1190e:	f002 f91f 	bl	13b50 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11912:	2200      	movs	r2, #0
   11914:	2105      	movs	r1, #5
   11916:	2006      	movs	r0, #6
   11918:	f005 fdb8 	bl	1748c <z_arm_irq_priority_set>
	return 0;
   1191c:	2000      	movs	r0, #0
   1191e:	e7ee      	b.n	118fe <gpio_nrfx_init+0xa>
		return -EIO;
   11920:	f06f 0004 	mvn.w	r0, #4
   11924:	e7eb      	b.n	118fe <gpio_nrfx_init+0xa>
   11926:	bf00      	nop
   11928:	0bad0000 	.word	0x0bad0000
   1192c:	00018067 	.word	0x00018067

00011930 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   11930:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
   11932:	6843      	ldr	r3, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
   11934:	681b      	ldr	r3, [r3, #0]
NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
#else
    return p_reg->PSELSCL;
   11936:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
#else
    return p_reg->PSELSDA;
   1193a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1193e:	f002 fc01 	bl	14144 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   11942:	4b04      	ldr	r3, [pc, #16]	; (11954 <i2c_nrfx_twi_recover_bus+0x24>)
   11944:	4298      	cmp	r0, r3
   11946:	d101      	bne.n	1194c <i2c_nrfx_twi_recover_bus+0x1c>
   11948:	2000      	movs	r0, #0
}
   1194a:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1194c:	f06f 000f 	mvn.w	r0, #15
   11950:	e7fb      	b.n	1194a <i2c_nrfx_twi_recover_bus+0x1a>
   11952:	bf00      	nop
   11954:	0bad0000 	.word	0x0bad0000

00011958 <i2c_nrfx_twi_configure>:
{
   11958:	b5b0      	push	{r4, r5, r7, lr}
   1195a:	b082      	sub	sp, #8
   1195c:	af00      	add	r7, sp, #0
	const struct i2c_nrfx_twi_config *config = dev->config;
   1195e:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   11960:	6902      	ldr	r2, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   11962:	f011 0f01 	tst.w	r1, #1
   11966:	d152      	bne.n	11a0e <i2c_nrfx_twi_configure+0xb6>
	switch (I2C_SPEED_GET(dev_config)) {
   11968:	f3c1 0342 	ubfx	r3, r1, #1, #3
   1196c:	2b01      	cmp	r3, #1
   1196e:	d038      	beq.n	119e2 <i2c_nrfx_twi_configure+0x8a>
   11970:	2b02      	cmp	r3, #2
   11972:	d040      	beq.n	119f6 <i2c_nrfx_twi_configure+0x9e>
		LOG_ERR("unsupported speed");
   11974:	466d      	mov	r5, sp
   11976:	b088      	sub	sp, #32
   11978:	466b      	mov	r3, sp
   1197a:	f113 0210 	adds.w	r2, r3, #16
   1197e:	d040      	beq.n	11a02 <i2c_nrfx_twi_configure+0xaa>
   11980:	210c      	movs	r1, #12
   11982:	b142      	cbz	r2, 11996 <i2c_nrfx_twi_configure+0x3e>
   11984:	4608      	mov	r0, r1
   11986:	2904      	cmp	r1, #4
   11988:	dd01      	ble.n	1198e <i2c_nrfx_twi_configure+0x36>
   1198a:	4c22      	ldr	r4, [pc, #136]	; (11a14 <i2c_nrfx_twi_configure+0xbc>)
   1198c:	615c      	str	r4, [r3, #20]
   1198e:	2808      	cmp	r0, #8
   11990:	dd01      	ble.n	11996 <i2c_nrfx_twi_configure+0x3e>
   11992:	4821      	ldr	r0, [pc, #132]	; (11a18 <i2c_nrfx_twi_configure+0xc0>)
   11994:	6198      	str	r0, [r3, #24]
   11996:	290b      	cmp	r1, #11
   11998:	dd36      	ble.n	11a08 <i2c_nrfx_twi_configure+0xb0>
   1199a:	240c      	movs	r4, #12
   1199c:	b13a      	cbz	r2, 119ae <i2c_nrfx_twi_configure+0x56>
   1199e:	2103      	movs	r1, #3
   119a0:	7139      	strb	r1, [r7, #4]
   119a2:	2100      	movs	r1, #0
   119a4:	7179      	strb	r1, [r7, #5]
   119a6:	71b9      	strb	r1, [r7, #6]
   119a8:	71f9      	strb	r1, [r7, #7]
   119aa:	6878      	ldr	r0, [r7, #4]
   119ac:	6118      	str	r0, [r3, #16]
   119ae:	2100      	movs	r1, #0
   119b0:	f36f 0100 	bfc	r1, #0, #1
   119b4:	f36f 0141 	bfc	r1, #1, #1
   119b8:	f36f 0182 	bfc	r1, #2, #1
   119bc:	f36f 01c5 	bfc	r1, #3, #3
   119c0:	2301      	movs	r3, #1
   119c2:	f363 1188 	bfi	r1, r3, #6, #3
   119c6:	f3c4 030a 	ubfx	r3, r4, #0, #11
   119ca:	f363 2153 	bfi	r1, r3, #9, #11
   119ce:	f36f 511f 	bfc	r1, #20, #12
   119d2:	2300      	movs	r3, #0
   119d4:	4811      	ldr	r0, [pc, #68]	; (11a1c <i2c_nrfx_twi_configure+0xc4>)
   119d6:	f7fa fa47 	bl	be68 <z_impl_z_log_msg_static_create>
   119da:	46ad      	mov	sp, r5
		return -EINVAL;
   119dc:	f06f 0015 	mvn.w	r0, #21
   119e0:	e006      	b.n	119f0 <i2c_nrfx_twi_configure+0x98>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   119e2:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   119e4:	f04f 70cc 	mov.w	r0, #26738688	; 0x1980000
   119e8:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   119ec:	6351      	str	r1, [r2, #52]	; 0x34
	return 0;
   119ee:	2000      	movs	r0, #0
}
   119f0:	3708      	adds	r7, #8
   119f2:	46bd      	mov	sp, r7
   119f4:	bdb0      	pop	{r4, r5, r7, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   119f6:	6823      	ldr	r3, [r4, #0]
   119f8:	f04f 60cd 	mov.w	r0, #107479040	; 0x6680000
   119fc:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
}
   11a00:	e7f4      	b.n	119ec <i2c_nrfx_twi_configure+0x94>
		LOG_ERR("unsupported speed");
   11a02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11a06:	e7bc      	b.n	11982 <i2c_nrfx_twi_configure+0x2a>
   11a08:	f06f 041b 	mvn.w	r4, #27
   11a0c:	e7c6      	b.n	1199c <i2c_nrfx_twi_configure+0x44>
		return -EINVAL;
   11a0e:	f06f 0015 	mvn.w	r0, #21
   11a12:	e7ed      	b.n	119f0 <i2c_nrfx_twi_configure+0x98>
   11a14:	0001b6c4 	.word	0x0001b6c4
   11a18:	0001b768 	.word	0x0001b768
   11a1c:	0001a104 	.word	0x0001a104

00011a20 <i2c_nrfx_twi_transfer>:
{
   11a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a24:	b089      	sub	sp, #36	; 0x24
   11a26:	af00      	add	r7, sp, #0
   11a28:	6038      	str	r0, [r7, #0]
   11a2a:	460d      	mov	r5, r1
   11a2c:	4616      	mov	r6, r2
   11a2e:	469a      	mov	sl, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
   11a30:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   11a34:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   11a38:	f04f 32ff 	mov.w	r2, #4294967295
   11a3c:	f04f 33ff 	mov.w	r3, #4294967295
   11a40:	4640      	mov	r0, r8
   11a42:	f003 f96f 	bl	14d24 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   11a46:	f108 0b18 	add.w	fp, r8, #24
   11a4a:	2200      	movs	r2, #0
   11a4c:	2300      	movs	r3, #0
   11a4e:	4658      	mov	r0, fp
   11a50:	f003 f968 	bl	14d24 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   11a54:	4648      	mov	r0, r9
   11a56:	f002 fb2d 	bl	140b4 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   11a5a:	2400      	movs	r4, #0
	int ret = 0;
   11a5c:	607c      	str	r4, [r7, #4]
	for (size_t i = 0; i < num_msgs; i++) {
   11a5e:	e01c      	b.n	11a9a <i2c_nrfx_twi_transfer+0x7a>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   11a60:	f012 0f01 	tst.w	r2, #1
   11a64:	f040 80f1 	bne.w	11c4a <i2c_nrfx_twi_transfer+0x22a>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   11a68:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   11a6a:	f107 010c 	add.w	r1, r7, #12
   11a6e:	4648      	mov	r0, r9
   11a70:	f002 fb4e 	bl	14110 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   11a74:	4b77      	ldr	r3, [pc, #476]	; (11c54 <i2c_nrfx_twi_transfer+0x234>)
   11a76:	4298      	cmp	r0, r3
   11a78:	d13f      	bne.n	11afa <i2c_nrfx_twi_transfer+0xda>
   11a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11a7e:	2300      	movs	r3, #0
   11a80:	4658      	mov	r0, fp
   11a82:	f003 f94f 	bl	14d24 <z_impl_k_sem_take>
		if (ret != 0) {
   11a86:	6078      	str	r0, [r7, #4]
   11a88:	2800      	cmp	r0, #0
   11a8a:	d141      	bne.n	11b10 <i2c_nrfx_twi_transfer+0xf0>
		res = data->res;
   11a8c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   11a90:	4a70      	ldr	r2, [pc, #448]	; (11c54 <i2c_nrfx_twi_transfer+0x234>)
   11a92:	4293      	cmp	r3, r2
   11a94:	f040 8083 	bne.w	11b9e <i2c_nrfx_twi_transfer+0x17e>
	for (size_t i = 0; i < num_msgs; i++) {
   11a98:	3401      	adds	r4, #1
   11a9a:	42b4      	cmp	r4, r6
   11a9c:	f080 80ca 	bcs.w	11c34 <i2c_nrfx_twi_transfer+0x214>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   11aa0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11aa4:	0099      	lsls	r1, r3, #2
   11aa6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11aaa:	7a1a      	ldrb	r2, [r3, #8]
   11aac:	f012 0f08 	tst.w	r2, #8
   11ab0:	f040 80bd 	bne.w	11c2e <i2c_nrfx_twi_transfer+0x20e>
		nrfx_twi_xfer_desc_t cur_xfer = {
   11ab4:	2200      	movs	r2, #0
   11ab6:	60fa      	str	r2, [r7, #12]
   11ab8:	613a      	str	r2, [r7, #16]
   11aba:	617a      	str	r2, [r7, #20]
   11abc:	61ba      	str	r2, [r7, #24]
   11abe:	61fa      	str	r2, [r7, #28]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
   11ac0:	7a1a      	ldrb	r2, [r3, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   11ac2:	f002 0001 	and.w	r0, r2, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   11ac6:	7338      	strb	r0, [r7, #12]
   11ac8:	f887 a00d 	strb.w	sl, [r7, #13]
			.primary_length = msgs[i].len,
   11acc:	685b      	ldr	r3, [r3, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   11ace:	613b      	str	r3, [r7, #16]
			.p_primary_buf  = msgs[i].buf,
   11ad0:	586b      	ldr	r3, [r5, r1]
		nrfx_twi_xfer_desc_t cur_xfer = {
   11ad2:	61bb      	str	r3, [r7, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   11ad4:	f012 0f02 	tst.w	r2, #2
   11ad8:	d10d      	bne.n	11af6 <i2c_nrfx_twi_transfer+0xd6>
			if ((i < (num_msgs - 1)) &&
   11ada:	1e73      	subs	r3, r6, #1
   11adc:	42a3      	cmp	r3, r4
   11ade:	d9bf      	bls.n	11a60 <i2c_nrfx_twi_transfer+0x40>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
   11ae0:	1c63      	adds	r3, r4, #1
   11ae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11ae6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11aea:	7a1b      	ldrb	r3, [r3, #8]
			if ((i < (num_msgs - 1)) &&
   11aec:	f013 0f04 	tst.w	r3, #4
   11af0:	d1b6      	bne.n	11a60 <i2c_nrfx_twi_transfer+0x40>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   11af2:	2240      	movs	r2, #64	; 0x40
   11af4:	e7b9      	b.n	11a6a <i2c_nrfx_twi_transfer+0x4a>
		uint32_t xfer_flags = 0;
   11af6:	2200      	movs	r2, #0
   11af8:	e7b7      	b.n	11a6a <i2c_nrfx_twi_transfer+0x4a>
			if (res == NRFX_ERROR_BUSY) {
   11afa:	330b      	adds	r3, #11
   11afc:	4298      	cmp	r0, r3
   11afe:	d003      	beq.n	11b08 <i2c_nrfx_twi_transfer+0xe8>
				ret = -EIO;
   11b00:	f06f 0304 	mvn.w	r3, #4
   11b04:	607b      	str	r3, [r7, #4]
   11b06:	e095      	b.n	11c34 <i2c_nrfx_twi_transfer+0x214>
				ret = -EBUSY;
   11b08:	f06f 030f 	mvn.w	r3, #15
   11b0c:	607b      	str	r3, [r7, #4]
   11b0e:	e091      	b.n	11c34 <i2c_nrfx_twi_transfer+0x214>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   11b10:	466d      	mov	r5, sp
   11b12:	b088      	sub	sp, #32
   11b14:	466b      	mov	r3, sp
   11b16:	f113 0210 	adds.w	r2, r3, #16
   11b1a:	d03a      	beq.n	11b92 <i2c_nrfx_twi_transfer+0x172>
   11b1c:	2110      	movs	r1, #16
   11b1e:	b15a      	cbz	r2, 11b38 <i2c_nrfx_twi_transfer+0x118>
   11b20:	4608      	mov	r0, r1
   11b22:	2904      	cmp	r1, #4
   11b24:	dd01      	ble.n	11b2a <i2c_nrfx_twi_transfer+0x10a>
   11b26:	4e4c      	ldr	r6, [pc, #304]	; (11c58 <i2c_nrfx_twi_transfer+0x238>)
   11b28:	615e      	str	r6, [r3, #20]
   11b2a:	2808      	cmp	r0, #8
   11b2c:	dd01      	ble.n	11b32 <i2c_nrfx_twi_transfer+0x112>
   11b2e:	4e4b      	ldr	r6, [pc, #300]	; (11c5c <i2c_nrfx_twi_transfer+0x23c>)
   11b30:	619e      	str	r6, [r3, #24]
   11b32:	280c      	cmp	r0, #12
   11b34:	dd00      	ble.n	11b38 <i2c_nrfx_twi_transfer+0x118>
   11b36:	61dc      	str	r4, [r3, #28]
   11b38:	290f      	cmp	r1, #15
   11b3a:	dd2d      	ble.n	11b98 <i2c_nrfx_twi_transfer+0x178>
   11b3c:	2410      	movs	r4, #16
   11b3e:	b13a      	cbz	r2, 11b50 <i2c_nrfx_twi_transfer+0x130>
   11b40:	2104      	movs	r1, #4
   11b42:	7239      	strb	r1, [r7, #8]
   11b44:	2100      	movs	r1, #0
   11b46:	7279      	strb	r1, [r7, #9]
   11b48:	72b9      	strb	r1, [r7, #10]
   11b4a:	72f9      	strb	r1, [r7, #11]
   11b4c:	68b8      	ldr	r0, [r7, #8]
   11b4e:	6118      	str	r0, [r3, #16]
   11b50:	2100      	movs	r1, #0
   11b52:	f36f 0100 	bfc	r1, #0, #1
   11b56:	f36f 0141 	bfc	r1, #1, #1
   11b5a:	f36f 0182 	bfc	r1, #2, #1
   11b5e:	f36f 01c5 	bfc	r1, #3, #3
   11b62:	2301      	movs	r3, #1
   11b64:	f363 1188 	bfi	r1, r3, #6, #3
   11b68:	f3c4 040a 	ubfx	r4, r4, #0, #11
   11b6c:	f364 2153 	bfi	r1, r4, #9, #11
   11b70:	f36f 511f 	bfc	r1, #20, #12
   11b74:	2300      	movs	r3, #0
   11b76:	483a      	ldr	r0, [pc, #232]	; (11c60 <i2c_nrfx_twi_transfer+0x240>)
   11b78:	f7fa f976 	bl	be68 <z_impl_z_log_msg_static_create>
   11b7c:	46ad      	mov	sp, r5
			nrfx_twi_disable(&config->twi);
   11b7e:	4648      	mov	r0, r9
   11b80:	f002 faa8 	bl	140d4 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
   11b84:	6838      	ldr	r0, [r7, #0]
   11b86:	f7ff fed3 	bl	11930 <i2c_nrfx_twi_recover_bus>
			ret = -EIO;
   11b8a:	f06f 0304 	mvn.w	r3, #4
   11b8e:	607b      	str	r3, [r7, #4]
			break;
   11b90:	e050      	b.n	11c34 <i2c_nrfx_twi_transfer+0x214>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   11b92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11b96:	e7c2      	b.n	11b1e <i2c_nrfx_twi_transfer+0xfe>
   11b98:	f06f 041b 	mvn.w	r4, #27
   11b9c:	e7cf      	b.n	11b3e <i2c_nrfx_twi_transfer+0x11e>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   11b9e:	466d      	mov	r5, sp
   11ba0:	b08a      	sub	sp, #40	; 0x28
   11ba2:	4669      	mov	r1, sp
   11ba4:	f111 0210 	adds.w	r2, r1, #16
   11ba8:	d03b      	beq.n	11c22 <i2c_nrfx_twi_transfer+0x202>
   11baa:	2014      	movs	r0, #20
   11bac:	b192      	cbz	r2, 11bd4 <i2c_nrfx_twi_transfer+0x1b4>
   11bae:	4606      	mov	r6, r0
   11bb0:	2804      	cmp	r0, #4
   11bb2:	dd03      	ble.n	11bbc <i2c_nrfx_twi_transfer+0x19c>
   11bb4:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 11c64 <i2c_nrfx_twi_transfer+0x244>
   11bb8:	f8c1 c014 	str.w	ip, [r1, #20]
   11bbc:	2e08      	cmp	r6, #8
   11bbe:	dd03      	ble.n	11bc8 <i2c_nrfx_twi_transfer+0x1a8>
   11bc0:	f8df c098 	ldr.w	ip, [pc, #152]	; 11c5c <i2c_nrfx_twi_transfer+0x23c>
   11bc4:	f8c1 c018 	str.w	ip, [r1, #24]
   11bc8:	2e0c      	cmp	r6, #12
   11bca:	dd00      	ble.n	11bce <i2c_nrfx_twi_transfer+0x1ae>
   11bcc:	61cb      	str	r3, [r1, #28]
   11bce:	2e10      	cmp	r6, #16
   11bd0:	dd00      	ble.n	11bd4 <i2c_nrfx_twi_transfer+0x1b4>
   11bd2:	620c      	str	r4, [r1, #32]
   11bd4:	2813      	cmp	r0, #19
   11bd6:	dd27      	ble.n	11c28 <i2c_nrfx_twi_transfer+0x208>
   11bd8:	2314      	movs	r3, #20
   11bda:	b13a      	cbz	r2, 11bec <i2c_nrfx_twi_transfer+0x1cc>
   11bdc:	2005      	movs	r0, #5
   11bde:	7238      	strb	r0, [r7, #8]
   11be0:	2000      	movs	r0, #0
   11be2:	7278      	strb	r0, [r7, #9]
   11be4:	72b8      	strb	r0, [r7, #10]
   11be6:	72f8      	strb	r0, [r7, #11]
   11be8:	68b8      	ldr	r0, [r7, #8]
   11bea:	6108      	str	r0, [r1, #16]
   11bec:	2100      	movs	r1, #0
   11bee:	f36f 0100 	bfc	r1, #0, #1
   11bf2:	f36f 0141 	bfc	r1, #1, #1
   11bf6:	f36f 0182 	bfc	r1, #2, #1
   11bfa:	f36f 01c5 	bfc	r1, #3, #3
   11bfe:	2001      	movs	r0, #1
   11c00:	f360 1188 	bfi	r1, r0, #6, #3
   11c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
   11c08:	f363 2153 	bfi	r1, r3, #9, #11
   11c0c:	f36f 511f 	bfc	r1, #20, #12
   11c10:	2300      	movs	r3, #0
   11c12:	4813      	ldr	r0, [pc, #76]	; (11c60 <i2c_nrfx_twi_transfer+0x240>)
   11c14:	f7fa f928 	bl	be68 <z_impl_z_log_msg_static_create>
   11c18:	46ad      	mov	sp, r5
			ret = -EIO;
   11c1a:	f06f 0304 	mvn.w	r3, #4
   11c1e:	607b      	str	r3, [r7, #4]
			break;
   11c20:	e008      	b.n	11c34 <i2c_nrfx_twi_transfer+0x214>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   11c22:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11c26:	e7c1      	b.n	11bac <i2c_nrfx_twi_transfer+0x18c>
   11c28:	f06f 031b 	mvn.w	r3, #27
   11c2c:	e7d5      	b.n	11bda <i2c_nrfx_twi_transfer+0x1ba>
			ret = -ENOTSUP;
   11c2e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11c32:	607b      	str	r3, [r7, #4]
	nrfx_twi_disable(&config->twi);
   11c34:	4648      	mov	r0, r9
   11c36:	f002 fa4d 	bl	140d4 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   11c3a:	4640      	mov	r0, r8
   11c3c:	f003 f84a 	bl	14cd4 <z_impl_k_sem_give>
}
   11c40:	6878      	ldr	r0, [r7, #4]
   11c42:	3724      	adds	r7, #36	; 0x24
   11c44:	46bd      	mov	sp, r7
   11c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOTSUP;
   11c4a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11c4e:	607b      	str	r3, [r7, #4]
   11c50:	e7f0      	b.n	11c34 <i2c_nrfx_twi_transfer+0x214>
   11c52:	bf00      	nop
   11c54:	0bad0000 	.word	0x0bad0000
   11c58:	0001b6dc 	.word	0x0001b6dc
   11c5c:	0001b780 	.word	0x0001b780
   11c60:	0001a104 	.word	0x0001a104
   11c64:	0001b70c 	.word	0x0001b70c

00011c68 <event_handler>:
{
   11c68:	b508      	push	{r3, lr}
	switch (p_event->type) {
   11c6a:	7803      	ldrb	r3, [r0, #0]
   11c6c:	2b01      	cmp	r3, #1
   11c6e:	d00c      	beq.n	11c8a <event_handler+0x22>
   11c70:	2b02      	cmp	r3, #2
   11c72:	d00d      	beq.n	11c90 <event_handler+0x28>
   11c74:	b113      	cbz	r3, 11c7c <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
   11c76:	4b08      	ldr	r3, [pc, #32]	; (11c98 <event_handler+0x30>)
   11c78:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   11c7a:	e001      	b.n	11c80 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
   11c7c:	4b07      	ldr	r3, [pc, #28]	; (11c9c <event_handler+0x34>)
   11c7e:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
   11c80:	f101 0018 	add.w	r0, r1, #24
   11c84:	f003 f826 	bl	14cd4 <z_impl_k_sem_give>
}
   11c88:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   11c8a:	4b05      	ldr	r3, [pc, #20]	; (11ca0 <event_handler+0x38>)
   11c8c:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   11c8e:	e7f7      	b.n	11c80 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   11c90:	4b04      	ldr	r3, [pc, #16]	; (11ca4 <event_handler+0x3c>)
   11c92:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   11c94:	e7f4      	b.n	11c80 <event_handler+0x18>
   11c96:	bf00      	nop
   11c98:	0bad0001 	.word	0x0bad0001
   11c9c:	0bad0000 	.word	0x0bad0000
   11ca0:	0bae0001 	.word	0x0bae0001
   11ca4:	0bae0002 	.word	0x0bae0002

00011ca8 <init_twi>:
	.transfer    = i2c_nrfx_twi_transfer,
	.recover_bus = i2c_nrfx_twi_recover_bus,
};

static int init_twi(const struct device *dev)
{
   11ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11caa:	b083      	sub	sp, #12
   11cac:	af00      	add	r7, sp, #0
   11cae:	4604      	mov	r4, r0
	const struct i2c_nrfx_twi_config *config = dev->config;
   11cb0:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = dev->data;
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   11cb2:	6923      	ldr	r3, [r4, #16]
   11cb4:	4a32      	ldr	r2, [pc, #200]	; (11d80 <init_twi+0xd8>)
   11cb6:	f100 0108 	add.w	r1, r0, #8
   11cba:	f002 f9a3 	bl	14004 <nrfx_twi_init>
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   11cbe:	4b31      	ldr	r3, [pc, #196]	; (11d84 <init_twi+0xdc>)
   11cc0:	4298      	cmp	r0, r3
   11cc2:	d103      	bne.n	11ccc <init_twi+0x24>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
   11cc4:	2000      	movs	r0, #0
}
   11cc6:	370c      	adds	r7, #12
   11cc8:	46bd      	mov	sp, r7
   11cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to initialize device: %s",
   11ccc:	6821      	ldr	r1, [r4, #0]
   11cce:	466d      	mov	r5, sp
   11cd0:	2301      	movs	r3, #1
   11cd2:	713b      	strb	r3, [r7, #4]
   11cd4:	2303      	movs	r3, #3
   11cd6:	717b      	strb	r3, [r7, #5]
   11cd8:	b08a      	sub	sp, #40	; 0x28
   11cda:	466c      	mov	r4, sp
   11cdc:	f114 0210 	adds.w	r2, r4, #16
   11ce0:	d016      	beq.n	11d10 <init_twi+0x68>
   11ce2:	2012      	movs	r0, #18
   11ce4:	b142      	cbz	r2, 11cf8 <init_twi+0x50>
   11ce6:	4603      	mov	r3, r0
   11ce8:	2804      	cmp	r0, #4
   11cea:	dd01      	ble.n	11cf0 <init_twi+0x48>
   11cec:	4e26      	ldr	r6, [pc, #152]	; (11d88 <init_twi+0xe0>)
   11cee:	6166      	str	r6, [r4, #20]
   11cf0:	2b08      	cmp	r3, #8
   11cf2:	dd01      	ble.n	11cf8 <init_twi+0x50>
   11cf4:	4b25      	ldr	r3, [pc, #148]	; (11d8c <init_twi+0xe4>)
   11cf6:	61a3      	str	r3, [r4, #24]
   11cf8:	2301      	movs	r3, #1
   11cfa:	703b      	strb	r3, [r7, #0]
   11cfc:	2303      	movs	r3, #3
   11cfe:	707b      	strb	r3, [r7, #1]
   11d00:	b1a2      	cbz	r2, 11d2c <init_twi+0x84>
   11d02:	280c      	cmp	r0, #12
   11d04:	dd00      	ble.n	11d08 <init_twi+0x60>
   11d06:	61e1      	str	r1, [r4, #28]
   11d08:	f104 0320 	add.w	r3, r4, #32
   11d0c:	2100      	movs	r1, #0
   11d0e:	e00b      	b.n	11d28 <init_twi+0x80>
   11d10:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11d14:	e7e6      	b.n	11ce4 <init_twi+0x3c>
   11d16:	f101 0608 	add.w	r6, r1, #8
   11d1a:	eb06 0c07 	add.w	ip, r6, r7
   11d1e:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   11d22:	f803 cb01 	strb.w	ip, [r3], #1
   11d26:	3101      	adds	r1, #1
   11d28:	2901      	cmp	r1, #1
   11d2a:	d9f4      	bls.n	11d16 <init_twi+0x6e>
   11d2c:	2811      	cmp	r0, #17
   11d2e:	dd24      	ble.n	11d7a <init_twi+0xd2>
   11d30:	2312      	movs	r3, #18
   11d32:	b142      	cbz	r2, 11d46 <init_twi+0x9e>
   11d34:	2104      	movs	r1, #4
   11d36:	7139      	strb	r1, [r7, #4]
   11d38:	2100      	movs	r1, #0
   11d3a:	7179      	strb	r1, [r7, #5]
   11d3c:	71b9      	strb	r1, [r7, #6]
   11d3e:	2101      	movs	r1, #1
   11d40:	71f9      	strb	r1, [r7, #7]
   11d42:	6878      	ldr	r0, [r7, #4]
   11d44:	6120      	str	r0, [r4, #16]
   11d46:	2100      	movs	r1, #0
   11d48:	f36f 0100 	bfc	r1, #0, #1
   11d4c:	f36f 0141 	bfc	r1, #1, #1
   11d50:	f36f 0182 	bfc	r1, #2, #1
   11d54:	f36f 01c5 	bfc	r1, #3, #3
   11d58:	2001      	movs	r0, #1
   11d5a:	f360 1188 	bfi	r1, r0, #6, #3
   11d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   11d62:	f363 2153 	bfi	r1, r3, #9, #11
   11d66:	f36f 511f 	bfc	r1, #20, #12
   11d6a:	2300      	movs	r3, #0
   11d6c:	4808      	ldr	r0, [pc, #32]	; (11d90 <init_twi+0xe8>)
   11d6e:	f7fa f87b 	bl	be68 <z_impl_z_log_msg_static_create>
   11d72:	46ad      	mov	sp, r5
		return -EBUSY;
   11d74:	f06f 000f 	mvn.w	r0, #15
   11d78:	e7a5      	b.n	11cc6 <init_twi+0x1e>
		LOG_ERR("Failed to initialize device: %s",
   11d7a:	f06f 031b 	mvn.w	r3, #27
   11d7e:	e7d8      	b.n	11d32 <init_twi+0x8a>
   11d80:	00011c69 	.word	0x00011c69
   11d84:	0bad0000 	.word	0x0bad0000
   11d88:	0001b738 	.word	0x0001b738
   11d8c:	0001b75c 	.word	0x0001b75c
   11d90:	0001a104 	.word	0x0001a104

00011d94 <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11d94:	f04f 0c00 	mov.w	ip, #0
   11d98:	458c      	cmp	ip, r1
   11d9a:	f080 8100 	bcs.w	11f9e <pinctrl_configure_pins+0x20a>
{
   11d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11da2:	e037      	b.n	11e14 <pinctrl_configure_pins+0x80>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   11da4:	f04f 33ff 	mov.w	r3, #4294967295
   11da8:	e03e      	b.n	11e28 <pinctrl_configure_pins+0x94>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   11daa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11dae:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11db2:	4674      	mov	r4, lr
			write = 1U;
   11db4:	4675      	mov	r5, lr
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   11db6:	2b7f      	cmp	r3, #127	; 0x7f
   11db8:	d025      	beq.n	11e06 <pinctrl_configure_pins+0x72>
			if (write != NO_WRITE) {
   11dba:	f1b5 3fff 	cmp.w	r5, #4294967295
   11dbe:	d00b      	beq.n	11dd8 <pinctrl_configure_pins+0x44>
    if (value == 0)
   11dc0:	2d00      	cmp	r5, #0
   11dc2:	f040 80dc 	bne.w	11f7e <pinctrl_configure_pins+0x1ea>
    *p_pin = pin_number & 0x1F;
   11dc6:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11dca:	2501      	movs	r5, #1
   11dcc:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTCLR = clr_mask;
   11dd0:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   11dd4:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   11dd8:	59c5      	ldr	r5, [r0, r7]
   11dda:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   11dde:	d002      	beq.n	11de6 <pinctrl_configure_pins+0x52>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11de0:	f04f 0e01 	mov.w	lr, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   11de4:	2400      	movs	r4, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   11de6:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
   11dea:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   11dee:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   11df2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   11df6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   11dfa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   11dfe:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   11e02:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11e06:	f10c 0c01 	add.w	ip, ip, #1
   11e0a:	fa5f fc8c 	uxtb.w	ip, ip
   11e0e:	458c      	cmp	ip, r1
   11e10:	f080 80bf 	bcs.w	11f92 <pinctrl_configure_pins+0x1fe>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   11e14:	ea4f 078c 	mov.w	r7, ip, lsl #2
   11e18:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
   11e1c:	f3c4 2643 	ubfx	r6, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   11e20:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   11e24:	2b7f      	cmp	r3, #127	; 0x7f
   11e26:	d0bd      	beq.n	11da4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   11e28:	0c24      	lsrs	r4, r4, #16
   11e2a:	2c19      	cmp	r4, #25
   11e2c:	f200 80b3 	bhi.w	11f96 <pinctrl_configure_pins+0x202>
   11e30:	a501      	add	r5, pc, #4	; (adr r5, 11e38 <pinctrl_configure_pins+0xa4>)
   11e32:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
   11e36:	bf00      	nop
   11e38:	00011dab 	.word	0x00011dab
   11e3c:	00011ea1 	.word	0x00011ea1
   11e40:	00011eb1 	.word	0x00011eb1
   11e44:	00011ebf 	.word	0x00011ebf
   11e48:	00011ecf 	.word	0x00011ecf
   11e4c:	00011edd 	.word	0x00011edd
   11e50:	00011eeb 	.word	0x00011eeb
   11e54:	00011f97 	.word	0x00011f97
   11e58:	00011f97 	.word	0x00011f97
   11e5c:	00011f97 	.word	0x00011f97
   11e60:	00011f97 	.word	0x00011f97
   11e64:	00011efb 	.word	0x00011efb
   11e68:	00011f0d 	.word	0x00011f0d
   11e6c:	00011f97 	.word	0x00011f97
   11e70:	00011f97 	.word	0x00011f97
   11e74:	00011f97 	.word	0x00011f97
   11e78:	00011f97 	.word	0x00011f97
   11e7c:	00011f97 	.word	0x00011f97
   11e80:	00011f97 	.word	0x00011f97
   11e84:	00011f97 	.word	0x00011f97
   11e88:	00011f97 	.word	0x00011f97
   11e8c:	00011f97 	.word	0x00011f97
   11e90:	00011f1f 	.word	0x00011f1f
   11e94:	00011f31 	.word	0x00011f31
   11e98:	00011f43 	.word	0x00011f43
   11e9c:	00011f55 	.word	0x00011f55
			NRF_PSEL_UART(reg, RXD) = pin;
   11ea0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11ea4:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11ea8:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11eaa:	f04f 35ff 	mov.w	r5, #4294967295
			break;
   11eae:	e782      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
   11eb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11eb4:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11eb8:	4674      	mov	r4, lr
			write = 1U;
   11eba:	4675      	mov	r5, lr
			break;
   11ebc:	e77b      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
   11ebe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11ec2:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11ec6:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11ec8:	f04f 35ff 	mov.w	r5, #4294967295
			break;
   11ecc:	e773      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   11ece:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11ed2:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11ed6:	2401      	movs	r4, #1
			write = 0U;
   11ed8:	4675      	mov	r5, lr
			break;
   11eda:	e76c      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   11edc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11ee0:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11ee4:	4674      	mov	r4, lr
			write = 0U;
   11ee6:	2500      	movs	r5, #0
			break;
   11ee8:	e765      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   11eea:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11eee:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11ef2:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11ef4:	f04f 35ff 	mov.w	r5, #4294967295
			break;
   11ef8:	e75d      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   11efa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   11efe:	b396      	cbz	r6, 11f66 <pinctrl_configure_pins+0x1d2>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11f00:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11f04:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11f06:	f04f 35ff 	mov.w	r5, #4294967295
   11f0a:	e754      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   11f0c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   11f10:	b37e      	cbz	r6, 11f72 <pinctrl_configure_pins+0x1de>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11f12:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11f16:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11f18:	f04f 35ff 	mov.w	r5, #4294967295
   11f1c:	e74b      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   11f1e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   11f22:	59c5      	ldr	r5, [r0, r7]
   11f24:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11f28:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11f2c:	4674      	mov	r4, lr
			break;
   11f2e:	e742      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   11f30:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   11f34:	59c5      	ldr	r5, [r0, r7]
   11f36:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11f3a:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11f3e:	4674      	mov	r4, lr
			break;
   11f40:	e739      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   11f42:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   11f46:	59c5      	ldr	r5, [r0, r7]
   11f48:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11f4c:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11f50:	4674      	mov	r4, lr
			break;
   11f52:	e730      	b.n	11db6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   11f54:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   11f58:	59c5      	ldr	r5, [r0, r7]
   11f5a:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11f5e:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11f62:	4674      	mov	r4, lr
			break;
   11f64:	e727      	b.n	11db6 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11f66:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11f68:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
   11f6a:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
   11f6e:	2606      	movs	r6, #6
   11f70:	e721      	b.n	11db6 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11f72:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11f74:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
   11f76:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
   11f7a:	2606      	movs	r6, #6
   11f7c:	e71b      	b.n	11db6 <pinctrl_configure_pins+0x22>
    *p_pin = pin_number & 0x1F;
   11f7e:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11f82:	2501      	movs	r5, #1
   11f84:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTSET = set_mask;
   11f88:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   11f8c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
}
   11f90:	e722      	b.n	11dd8 <pinctrl_configure_pins+0x44>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   11f92:	2000      	movs	r0, #0
   11f94:	e001      	b.n	11f9a <pinctrl_configure_pins+0x206>
		switch (NRF_GET_FUN(pins[i])) {
   11f96:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   11f9e:	2000      	movs	r0, #0
}
   11fa0:	4770      	bx	lr
   11fa2:	bf00      	nop

00011fa4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   11fa4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   11fa6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   11fa8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   11fac:	d06f      	beq.n	1208e <baudrate_set+0xea>
   11fae:	d83a      	bhi.n	12026 <baudrate_set+0x82>
   11fb0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   11fb4:	d06e      	beq.n	12094 <baudrate_set+0xf0>
   11fb6:	d90a      	bls.n	11fce <baudrate_set+0x2a>
   11fb8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   11fbc:	d075      	beq.n	120aa <baudrate_set+0x106>
   11fbe:	d924      	bls.n	1200a <baudrate_set+0x66>
   11fc0:	f647 2312 	movw	r3, #31250	; 0x7a12
   11fc4:	4299      	cmp	r1, r3
   11fc6:	d12b      	bne.n	12020 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11fc8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11fcc:	e013      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   11fce:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   11fd2:	d061      	beq.n	12098 <baudrate_set+0xf4>
   11fd4:	d907      	bls.n	11fe6 <baudrate_set+0x42>
   11fd6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   11fda:	d063      	beq.n	120a4 <baudrate_set+0x100>
   11fdc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   11fe0:	d110      	bne.n	12004 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11fe2:	4b3c      	ldr	r3, [pc, #240]	; (120d4 <baudrate_set+0x130>)
   11fe4:	e007      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   11fe6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11fea:	d058      	beq.n	1209e <baudrate_set+0xfa>
   11fec:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   11ff0:	d105      	bne.n	11ffe <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   11ff2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11ff6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   11ffa:	2000      	movs	r0, #0
   11ffc:	4770      	bx	lr
	switch (baudrate) {
   11ffe:	f06f 0015 	mvn.w	r0, #21
   12002:	4770      	bx	lr
   12004:	f06f 0015 	mvn.w	r0, #21
   12008:	4770      	bx	lr
   1200a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1200e:	d04e      	beq.n	120ae <baudrate_set+0x10a>
   12010:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   12014:	d101      	bne.n	1201a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12016:	4b30      	ldr	r3, [pc, #192]	; (120d8 <baudrate_set+0x134>)
   12018:	e7ed      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   1201a:	f06f 0015 	mvn.w	r0, #21
   1201e:	4770      	bx	lr
   12020:	f06f 0015 	mvn.w	r0, #21
   12024:	4770      	bx	lr
   12026:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1202a:	d042      	beq.n	120b2 <baudrate_set+0x10e>
   1202c:	d909      	bls.n	12042 <baudrate_set+0x9e>
   1202e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   12032:	d046      	beq.n	120c2 <baudrate_set+0x11e>
   12034:	d91f      	bls.n	12076 <baudrate_set+0xd2>
   12036:	4b29      	ldr	r3, [pc, #164]	; (120dc <baudrate_set+0x138>)
   12038:	4299      	cmp	r1, r3
   1203a:	d148      	bne.n	120ce <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1203c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12040:	e7d9      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   12042:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   12046:	d037      	beq.n	120b8 <baudrate_set+0x114>
   12048:	d905      	bls.n	12056 <baudrate_set+0xb2>
   1204a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1204e:	d10f      	bne.n	12070 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12050:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12054:	e7cf      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   12056:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1205a:	4299      	cmp	r1, r3
   1205c:	d02e      	beq.n	120bc <baudrate_set+0x118>
   1205e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   12062:	d102      	bne.n	1206a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12064:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12068:	e7c5      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   1206a:	f06f 0015 	mvn.w	r0, #21
   1206e:	4770      	bx	lr
   12070:	f06f 0015 	mvn.w	r0, #21
   12074:	4770      	bx	lr
   12076:	4b1a      	ldr	r3, [pc, #104]	; (120e0 <baudrate_set+0x13c>)
   12078:	4299      	cmp	r1, r3
   1207a:	d025      	beq.n	120c8 <baudrate_set+0x124>
   1207c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   12080:	d102      	bne.n	12088 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12082:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12086:	e7b6      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   12088:	f06f 0015 	mvn.w	r0, #21
   1208c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1208e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12092:	e7b0      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12094:	4b13      	ldr	r3, [pc, #76]	; (120e4 <baudrate_set+0x140>)
   12096:	e7ae      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12098:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1209c:	e7ab      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   1209e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   120a2:	e7a8      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   120a4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   120a8:	e7a5      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   120aa:	4b0f      	ldr	r3, [pc, #60]	; (120e8 <baudrate_set+0x144>)
   120ac:	e7a3      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   120ae:	4b0f      	ldr	r3, [pc, #60]	; (120ec <baudrate_set+0x148>)
   120b0:	e7a1      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   120b2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   120b6:	e79e      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   120b8:	4b0d      	ldr	r3, [pc, #52]	; (120f0 <baudrate_set+0x14c>)
   120ba:	e79c      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   120bc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   120c0:	e799      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   120c2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   120c6:	e796      	b.n	11ff6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   120c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   120cc:	e793      	b.n	11ff6 <baudrate_set+0x52>
	switch (baudrate) {
   120ce:	f06f 0015 	mvn.w	r0, #21
}
   120d2:	4770      	bx	lr
   120d4:	0013b000 	.word	0x0013b000
   120d8:	004ea000 	.word	0x004ea000
   120dc:	000f4240 	.word	0x000f4240
   120e0:	0003d090 	.word	0x0003d090
   120e4:	00275000 	.word	0x00275000
   120e8:	0075c000 	.word	0x0075c000
   120ec:	003af000 	.word	0x003af000
   120f0:	013a9000 	.word	0x013a9000

000120f4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   120f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120f6:	4605      	mov	r5, r0
   120f8:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   120fa:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   120fc:	f007 f8cd 	bl	1929a <k_is_in_isr>
   12100:	b910      	cbnz	r0, 12108 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   12102:	4b12      	ldr	r3, [pc, #72]	; (1214c <uarte_nrfx_poll_out+0x58>)
   12104:	781b      	ldrb	r3, [r3, #0]
   12106:	b983      	cbnz	r3, 1212a <uarte_nrfx_poll_out+0x36>
   12108:	f04f 0340 	mov.w	r3, #64	; 0x40
   1210c:	f3ef 8411 	mrs	r4, BASEPRI
   12110:	f383 8812 	msr	BASEPRI_MAX, r3
   12114:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   12118:	4628      	mov	r0, r5
   1211a:	f006 f887 	bl	1822c <is_tx_ready>
   1211e:	b940      	cbnz	r0, 12132 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   12120:	f384 8811 	msr	BASEPRI, r4
   12124:	f3bf 8f6f 	isb	sy
}
   12128:	e7ee      	b.n	12108 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1212a:	4628      	mov	r0, r5
   1212c:	f006 f8e3 	bl	182f6 <wait_tx_ready>
   12130:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   12132:	693b      	ldr	r3, [r7, #16]
   12134:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   12136:	2201      	movs	r2, #1
   12138:	6939      	ldr	r1, [r7, #16]
   1213a:	4628      	mov	r0, r5
   1213c:	f006 f890 	bl	18260 <tx_start>
	__asm__ volatile(
   12140:	f384 8811 	msr	BASEPRI, r4
   12144:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   12148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1214a:	bf00      	nop
   1214c:	200026e0 	.word	0x200026e0

00012150 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   12150:	b5b0      	push	{r4, r5, r7, lr}
   12152:	b082      	sub	sp, #8
   12154:	af00      	add	r7, sp, #0
   12156:	4604      	mov	r4, r0
   12158:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1215a:	f101 0018 	add.w	r0, r1, #24
   1215e:	f001 fe0b 	bl	13d78 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   12162:	4b2a      	ldr	r3, [pc, #168]	; (1220c <endtx_stoptx_ppi_init+0xbc>)
   12164:	4298      	cmp	r0, r3
   12166:	d113      	bne.n	12190 <endtx_stoptx_ppi_init+0x40>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   12168:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1216a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1216e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12170:	4a27      	ldr	r2, [pc, #156]	; (12210 <endtx_stoptx_ppi_init+0xc0>)
   12172:	33a2      	adds	r3, #162	; 0xa2
   12174:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1217c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1217e:	7e29      	ldrb	r1, [r5, #24]
   12180:	2301      	movs	r3, #1
   12182:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   12184:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   12188:	2000      	movs	r0, #0
}
   1218a:	3708      	adds	r7, #8
   1218c:	46bd      	mov	sp, r7
   1218e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   12190:	466d      	mov	r5, sp
   12192:	b088      	sub	sp, #32
   12194:	466b      	mov	r3, sp
   12196:	f113 0210 	adds.w	r2, r3, #16
   1219a:	d030      	beq.n	121fe <endtx_stoptx_ppi_init+0xae>
   1219c:	210c      	movs	r1, #12
   1219e:	b142      	cbz	r2, 121b2 <endtx_stoptx_ppi_init+0x62>
   121a0:	4608      	mov	r0, r1
   121a2:	2904      	cmp	r1, #4
   121a4:	dd01      	ble.n	121aa <endtx_stoptx_ppi_init+0x5a>
   121a6:	4c1b      	ldr	r4, [pc, #108]	; (12214 <endtx_stoptx_ppi_init+0xc4>)
   121a8:	615c      	str	r4, [r3, #20]
   121aa:	2808      	cmp	r0, #8
   121ac:	dd01      	ble.n	121b2 <endtx_stoptx_ppi_init+0x62>
   121ae:	481a      	ldr	r0, [pc, #104]	; (12218 <endtx_stoptx_ppi_init+0xc8>)
   121b0:	6198      	str	r0, [r3, #24]
   121b2:	290b      	cmp	r1, #11
   121b4:	dd26      	ble.n	12204 <endtx_stoptx_ppi_init+0xb4>
   121b6:	240c      	movs	r4, #12
   121b8:	b13a      	cbz	r2, 121ca <endtx_stoptx_ppi_init+0x7a>
   121ba:	2103      	movs	r1, #3
   121bc:	7139      	strb	r1, [r7, #4]
   121be:	2100      	movs	r1, #0
   121c0:	7179      	strb	r1, [r7, #5]
   121c2:	71b9      	strb	r1, [r7, #6]
   121c4:	71f9      	strb	r1, [r7, #7]
   121c6:	6878      	ldr	r0, [r7, #4]
   121c8:	6118      	str	r0, [r3, #16]
   121ca:	2100      	movs	r1, #0
   121cc:	f36f 0100 	bfc	r1, #0, #1
   121d0:	f36f 0141 	bfc	r1, #1, #1
   121d4:	f36f 0182 	bfc	r1, #2, #1
   121d8:	f36f 01c5 	bfc	r1, #3, #3
   121dc:	2301      	movs	r3, #1
   121de:	f363 1188 	bfi	r1, r3, #6, #3
   121e2:	f3c4 040a 	ubfx	r4, r4, #0, #11
   121e6:	f364 2153 	bfi	r1, r4, #9, #11
   121ea:	f36f 511f 	bfc	r1, #20, #12
   121ee:	2300      	movs	r3, #0
   121f0:	480a      	ldr	r0, [pc, #40]	; (1221c <endtx_stoptx_ppi_init+0xcc>)
   121f2:	f7f9 fe39 	bl	be68 <z_impl_z_log_msg_static_create>
   121f6:	46ad      	mov	sp, r5
		return -EIO;
   121f8:	f06f 0004 	mvn.w	r0, #4
   121fc:	e7c5      	b.n	1218a <endtx_stoptx_ppi_init+0x3a>
		LOG_ERR("Failed to allocate PPI Channel");
   121fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12202:	e7cc      	b.n	1219e <endtx_stoptx_ppi_init+0x4e>
   12204:	f06f 041b 	mvn.w	r4, #27
   12208:	e7d6      	b.n	121b8 <endtx_stoptx_ppi_init+0x68>
   1220a:	bf00      	nop
   1220c:	0bad0000 	.word	0x0bad0000
   12210:	4001f000 	.word	0x4001f000
   12214:	0001b808 	.word	0x0001b808
   12218:	0001b82c 	.word	0x0001b82c
   1221c:	0001a15c 	.word	0x0001a15c

00012220 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12220:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   12224:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12228:	4b01      	ldr	r3, [pc, #4]	; (12230 <set_comparator+0x10>)
   1222a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1222e:	4770      	bx	lr
   12230:	40011000 	.word	0x40011000

00012234 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12238:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1223a:	4a02      	ldr	r2, [pc, #8]	; (12244 <event_enable+0x10>)
   1223c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   12240:	4770      	bx	lr
   12242:	bf00      	nop
   12244:	40011000 	.word	0x40011000

00012248 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1224c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1224e:	4a02      	ldr	r2, [pc, #8]	; (12258 <event_disable+0x10>)
   12250:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   12254:	4770      	bx	lr
   12256:	bf00      	nop
   12258:	40011000 	.word	0x40011000

0001225c <counter>:
     return p_reg->COUNTER;
   1225c:	4b01      	ldr	r3, [pc, #4]	; (12264 <counter+0x8>)
   1225e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   12262:	4770      	bx	lr
   12264:	40011000 	.word	0x40011000

00012268 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   12268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1226c:	4606      	mov	r6, r0
   1226e:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   12270:	f7ff ffea 	bl	12248 <event_disable>
	event_clear(chan);
   12274:	4630      	mov	r0, r6
   12276:	f006 f8e7 	bl	18448 <event_clear>
	uint32_t cc_val = req_cc;
   1227a:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1227c:	2703      	movs	r7, #3
   1227e:	e001      	b.n	12284 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   12280:	193d      	adds	r5, r7, r4
			cc_inc++;
   12282:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   12284:	4629      	mov	r1, r5
   12286:	4630      	mov	r0, r6
   12288:	f7ff ffca 	bl	12220 <set_comparator>
		event_enable(chan);
   1228c:	4630      	mov	r0, r6
   1228e:	f7ff ffd1 	bl	12234 <event_enable>
		now = counter();
   12292:	f7ff ffe3 	bl	1225c <counter>
   12296:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   12298:	1cc1      	adds	r1, r0, #3
   1229a:	4628      	mov	r0, r5
   1229c:	f006 f8c3 	bl	18426 <counter_sub>
   122a0:	4b0b      	ldr	r3, [pc, #44]	; (122d0 <set_alarm+0x68>)
   122a2:	4298      	cmp	r0, r3
   122a4:	d911      	bls.n	122ca <set_alarm+0x62>
			if (event_check(chan)) {
   122a6:	4630      	mov	r0, r6
   122a8:	f006 f8c1 	bl	1842e <event_check>
   122ac:	2800      	cmp	r0, #0
   122ae:	d0e7      	beq.n	12280 <set_alarm+0x18>
				now = counter();
   122b0:	f7ff ffd4 	bl	1225c <counter>
   122b4:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   122b6:	4641      	mov	r1, r8
   122b8:	f006 f8b5 	bl	18426 <counter_sub>
   122bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   122c0:	d903      	bls.n	122ca <set_alarm+0x62>
					event_clear(chan);
   122c2:	4630      	mov	r0, r6
   122c4:	f006 f8c0 	bl	18448 <event_clear>
   122c8:	e7da      	b.n	12280 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   122ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122ce:	bf00      	nop
   122d0:	007ffffd 	.word	0x007ffffd

000122d4 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
   122d4:	4b03      	ldr	r3, [pc, #12]	; (122e4 <int_event_disable_rtc+0x10>)
   122d6:	4a04      	ldr	r2, [pc, #16]	; (122e8 <int_event_disable_rtc+0x14>)
   122d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   122dc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
   122e0:	4770      	bx	lr
   122e2:	bf00      	nop
   122e4:	40011000 	.word	0x40011000
   122e8:	000f0003 	.word	0x000f0003

000122ec <compare_int_lock>:
{
   122ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   122ee:	2301      	movs	r3, #1
   122f0:	4083      	lsls	r3, r0
   122f2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   122f6:	4a0e      	ldr	r2, [pc, #56]	; (12330 <compare_int_lock+0x44>)
   122f8:	f3bf 8f5b 	dmb	ish
   122fc:	e852 1f00 	ldrex	r1, [r2]
   12300:	ea01 0e0c 	and.w	lr, r1, ip
   12304:	e842 e400 	strex	r4, lr, [r2]
   12308:	2c00      	cmp	r4, #0
   1230a:	d1f7      	bne.n	122fc <compare_int_lock+0x10>
   1230c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12310:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12314:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   12316:	4807      	ldr	r0, [pc, #28]	; (12334 <compare_int_lock+0x48>)
   12318:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1231c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12320:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   12324:	420b      	tst	r3, r1
}
   12326:	bf14      	ite	ne
   12328:	2001      	movne	r0, #1
   1232a:	2000      	moveq	r0, #0
   1232c:	bd10      	pop	{r4, pc}
   1232e:	bf00      	nop
   12330:	200020d8 	.word	0x200020d8
   12334:	40011000 	.word	0x40011000

00012338 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   12338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1233c:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   1233e:	4a14      	ldr	r2, [pc, #80]	; (12390 <channel_processing_check_and_clear+0x58>)
   12340:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   12344:	4213      	tst	r3, r2
   12346:	d101      	bne.n	1234c <channel_processing_check_and_clear+0x14>
	return false;
   12348:	2000      	movs	r0, #0
}
   1234a:	4770      	bx	lr
{
   1234c:	b510      	push	{r4, lr}
   1234e:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   12350:	2301      	movs	r3, #1
   12352:	4083      	lsls	r3, r0
   12354:	43db      	mvns	r3, r3
   12356:	490f      	ldr	r1, [pc, #60]	; (12394 <channel_processing_check_and_clear+0x5c>)
   12358:	f3bf 8f5b 	dmb	ish
   1235c:	e851 2f00 	ldrex	r2, [r1]
   12360:	ea02 0003 	and.w	r0, r2, r3
   12364:	e841 0c00 	strex	ip, r0, [r1]
   12368:	f1bc 0f00 	cmp.w	ip, #0
   1236c:	d1f6      	bne.n	1235c <channel_processing_check_and_clear+0x24>
   1236e:	f3bf 8f5b 	dmb	ish
   12372:	fa22 f304 	lsr.w	r3, r2, r4
   12376:	f013 0f01 	tst.w	r3, #1
   1237a:	d103      	bne.n	12384 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   1237c:	4620      	mov	r0, r4
   1237e:	f006 f856 	bl	1842e <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   12382:	b118      	cbz	r0, 1238c <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   12384:	4620      	mov	r0, r4
   12386:	f006 f85f 	bl	18448 <event_clear>
			return true;
   1238a:	2001      	movs	r0, #1
}
   1238c:	bd10      	pop	{r4, pc}
   1238e:	bf00      	nop
   12390:	40011000 	.word	0x40011000
   12394:	200020d4 	.word	0x200020d4

00012398 <compare_int_unlock>:
	if (key) {
   12398:	b901      	cbnz	r1, 1239c <compare_int_unlock+0x4>
}
   1239a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1239c:	2301      	movs	r3, #1
   1239e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   123a0:	4a11      	ldr	r2, [pc, #68]	; (123e8 <compare_int_unlock+0x50>)
   123a2:	f3bf 8f5b 	dmb	ish
   123a6:	e852 cf00 	ldrex	ip, [r2]
   123aa:	ea4c 0c03 	orr.w	ip, ip, r3
   123ae:	e842 c100 	strex	r1, ip, [r2]
   123b2:	2900      	cmp	r1, #0
   123b4:	d1f7      	bne.n	123a6 <compare_int_unlock+0xe>
   123b6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   123ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   123be:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   123c0:	4a0a      	ldr	r2, [pc, #40]	; (123ec <compare_int_unlock+0x54>)
   123c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   123c6:	f3bf 8f5b 	dmb	ish
   123ca:	4b09      	ldr	r3, [pc, #36]	; (123f0 <compare_int_unlock+0x58>)
   123cc:	681b      	ldr	r3, [r3, #0]
   123ce:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   123d2:	40c3      	lsrs	r3, r0
   123d4:	f013 0f01 	tst.w	r3, #1
   123d8:	d0df      	beq.n	1239a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123da:	4b06      	ldr	r3, [pc, #24]	; (123f4 <compare_int_unlock+0x5c>)
   123dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   123e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   123e4:	e7d9      	b.n	1239a <compare_int_unlock+0x2>
   123e6:	bf00      	nop
   123e8:	200020d8 	.word	0x200020d8
   123ec:	40011000 	.word	0x40011000
   123f0:	200020d4 	.word	0x200020d4
   123f4:	e000e100 	.word	0xe000e100

000123f8 <sys_clock_timeout_handler>:
{
   123f8:	b538      	push	{r3, r4, r5, lr}
   123fa:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   123fc:	4610      	mov	r0, r2
   123fe:	4619      	mov	r1, r3
   12400:	f006 f82e 	bl	18460 <absolute_time_to_cc>
   12404:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   12406:	490d      	ldr	r1, [pc, #52]	; (1243c <sys_clock_timeout_handler+0x44>)
   12408:	680b      	ldr	r3, [r1, #0]
   1240a:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   1240c:	181b      	adds	r3, r3, r0
   1240e:	684c      	ldr	r4, [r1, #4]
   12410:	f144 0400 	adc.w	r4, r4, #0
   12414:	600b      	str	r3, [r1, #0]
   12416:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   12418:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1241c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   12420:	d209      	bcs.n	12436 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   12422:	4b07      	ldr	r3, [pc, #28]	; (12440 <sys_clock_timeout_handler+0x48>)
   12424:	681b      	ldr	r3, [r3, #0]
   12426:	0a19      	lsrs	r1, r3, #8
   12428:	061b      	lsls	r3, r3, #24
   1242a:	18d4      	adds	r4, r2, r3
   1242c:	f141 0500 	adc.w	r5, r1, #0
   12430:	4b04      	ldr	r3, [pc, #16]	; (12444 <sys_clock_timeout_handler+0x4c>)
   12432:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   12436:	f003 fa5d 	bl	158f4 <sys_clock_announce>
}
   1243a:	bd38      	pop	{r3, r4, r5, pc}
   1243c:	200019b8 	.word	0x200019b8
   12440:	200020dc 	.word	0x200020dc
   12444:	200019c0 	.word	0x200019c0

00012448 <z_nrf_rtc_timer_read>:
{
   12448:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1244a:	4b0d      	ldr	r3, [pc, #52]	; (12480 <z_nrf_rtc_timer_read+0x38>)
   1244c:	681c      	ldr	r4, [r3, #0]
   1244e:	0a25      	lsrs	r5, r4, #8
   12450:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   12452:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   12456:	f7ff ff01 	bl	1225c <counter>
   1245a:	4603      	mov	r3, r0
	val += cntr;
   1245c:	1900      	adds	r0, r0, r4
   1245e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   12462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12466:	d20a      	bcs.n	1247e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   12468:	4b06      	ldr	r3, [pc, #24]	; (12484 <z_nrf_rtc_timer_read+0x3c>)
   1246a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1246e:	4290      	cmp	r0, r2
   12470:	eb71 0303 	sbcs.w	r3, r1, r3
   12474:	d203      	bcs.n	1247e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   12476:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1247a:	f141 0100 	adc.w	r1, r1, #0
}
   1247e:	bd38      	pop	{r3, r4, r5, pc}
   12480:	200020dc 	.word	0x200020dc
   12484:	200019c0 	.word	0x200019c0

00012488 <compare_set_nolocks>:
{
   12488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1248a:	4606      	mov	r6, r0
   1248c:	4614      	mov	r4, r2
   1248e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   12490:	4610      	mov	r0, r2
   12492:	4619      	mov	r1, r3
   12494:	f005 ffe4 	bl	18460 <absolute_time_to_cc>
   12498:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1249a:	f7ff ffd5 	bl	12448 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1249e:	42a0      	cmp	r0, r4
   124a0:	eb71 0305 	sbcs.w	r3, r1, r5
   124a4:	d215      	bcs.n	124d2 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   124a6:	1a20      	subs	r0, r4, r0
   124a8:	eb65 0101 	sbc.w	r1, r5, r1
   124ac:	4b17      	ldr	r3, [pc, #92]	; (1250c <compare_set_nolocks+0x84>)
   124ae:	4298      	cmp	r0, r3
   124b0:	f171 0100 	sbcs.w	r1, r1, #0
   124b4:	d227      	bcs.n	12506 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   124b6:	4b16      	ldr	r3, [pc, #88]	; (12510 <compare_set_nolocks+0x88>)
   124b8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   124bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   124c0:	42ab      	cmp	r3, r5
   124c2:	bf08      	it	eq
   124c4:	42a2      	cmpeq	r2, r4
   124c6:	d012      	beq.n	124ee <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   124c8:	4639      	mov	r1, r7
   124ca:	4630      	mov	r0, r6
   124cc:	f7ff fecc 	bl	12268 <set_alarm>
   124d0:	e00d      	b.n	124ee <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   124d2:	2301      	movs	r3, #1
   124d4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   124d6:	4a0f      	ldr	r2, [pc, #60]	; (12514 <compare_set_nolocks+0x8c>)
   124d8:	f3bf 8f5b 	dmb	ish
   124dc:	e852 0f00 	ldrex	r0, [r2]
   124e0:	4318      	orrs	r0, r3
   124e2:	e842 0100 	strex	r1, r0, [r2]
   124e6:	2900      	cmp	r1, #0
   124e8:	d1f8      	bne.n	124dc <compare_set_nolocks+0x54>
   124ea:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   124ee:	4b08      	ldr	r3, [pc, #32]	; (12510 <compare_set_nolocks+0x88>)
   124f0:	0132      	lsls	r2, r6, #4
   124f2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   124f6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   124fa:	9906      	ldr	r1, [sp, #24]
   124fc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   124fe:	9b07      	ldr	r3, [sp, #28]
   12500:	6073      	str	r3, [r6, #4]
	return ret;
   12502:	2000      	movs	r0, #0
}
   12504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   12506:	f06f 0015 	mvn.w	r0, #21
   1250a:	e7fb      	b.n	12504 <compare_set_nolocks+0x7c>
   1250c:	00800001 	.word	0x00800001
   12510:	200019a8 	.word	0x200019a8
   12514:	200020d4 	.word	0x200020d4

00012518 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   12518:	b530      	push	{r4, r5, lr}
   1251a:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
   1251c:	f7ff feda 	bl	122d4 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
   12520:	2300      	movs	r3, #0
   12522:	4a1d      	ldr	r2, [pc, #116]	; (12598 <sys_clock_driver_init+0x80>)
   12524:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12528:	2b00      	cmp	r3, #0
   1252a:	dd24      	ble.n	12576 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
   1252c:	4c1a      	ldr	r4, [pc, #104]	; (12598 <sys_clock_driver_init+0x80>)
   1252e:	2502      	movs	r5, #2
   12530:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12534:	4b19      	ldr	r3, [pc, #100]	; (1259c <sys_clock_driver_init+0x84>)
   12536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1253a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1253e:	2200      	movs	r2, #0
   12540:	2101      	movs	r1, #1
   12542:	2011      	movs	r0, #17
   12544:	f004 ffa2 	bl	1748c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12548:	2011      	movs	r0, #17
   1254a:	f004 ff95 	bl	17478 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1254e:	2301      	movs	r3, #1
   12550:	60a3      	str	r3, [r4, #8]
   12552:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12554:	4a12      	ldr	r2, [pc, #72]	; (125a0 <sys_clock_driver_init+0x88>)
   12556:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   12558:	2400      	movs	r4, #0
   1255a:	9401      	str	r4, [sp, #4]
   1255c:	4b11      	ldr	r3, [pc, #68]	; (125a4 <sys_clock_driver_init+0x8c>)
   1255e:	9300      	str	r3, [sp, #0]
   12560:	4a11      	ldr	r2, [pc, #68]	; (125a8 <sys_clock_driver_init+0x90>)
   12562:	2300      	movs	r3, #0
   12564:	4620      	mov	r0, r4
   12566:	f005 ff85 	bl	18474 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1256a:	4628      	mov	r0, r5
   1256c:	f7fe ff2e 	bl	113cc <z_nrf_clock_control_lf_on>

	return 0;
}
   12570:	4620      	mov	r0, r4
   12572:	b003      	add	sp, #12
   12574:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   12576:	4a0d      	ldr	r2, [pc, #52]	; (125ac <sys_clock_driver_init+0x94>)
   12578:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1257c:	f04f 30ff 	mov.w	r0, #4294967295
   12580:	f04f 31ff 	mov.w	r1, #4294967295
   12584:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12588:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1258c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1258e:	4902      	ldr	r1, [pc, #8]	; (12598 <sys_clock_driver_init+0x80>)
   12590:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12594:	3301      	adds	r3, #1
   12596:	e7c7      	b.n	12528 <sys_clock_driver_init+0x10>
   12598:	40011000 	.word	0x40011000
   1259c:	e000e100 	.word	0xe000e100
   125a0:	200020d8 	.word	0x200020d8
   125a4:	000123f9 	.word	0x000123f9
   125a8:	007fffff 	.word	0x007fffff
   125ac:	200019a8 	.word	0x200019a8

000125b0 <process_channel>:
{
   125b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   125b4:	b082      	sub	sp, #8
   125b6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   125b8:	f7ff febe 	bl	12338 <channel_processing_check_and_clear>
   125bc:	b910      	cbnz	r0, 125c4 <process_channel+0x14>
}
   125be:	b002      	add	sp, #8
   125c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   125c4:	f7ff ff40 	bl	12448 <z_nrf_rtc_timer_read>
   125c8:	4682      	mov	sl, r0
   125ca:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   125cc:	f005 ff4b 	bl	18466 <full_int_lock>
   125d0:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   125d2:	4b15      	ldr	r3, [pc, #84]	; (12628 <process_channel+0x78>)
   125d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   125d8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   125dc:	45c2      	cmp	sl, r8
   125de:	eb75 0509 	sbcs.w	r5, r5, r9
   125e2:	d20b      	bcs.n	125fc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   125e4:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   125e6:	4630      	mov	r0, r6
   125e8:	f005 ff41 	bl	1846e <full_int_unlock>
		if (handler) {
   125ec:	2d00      	cmp	r5, #0
   125ee:	d0e6      	beq.n	125be <process_channel+0xe>
			handler(chan, expire_time, user_context);
   125f0:	9700      	str	r7, [sp, #0]
   125f2:	4642      	mov	r2, r8
   125f4:	464b      	mov	r3, r9
   125f6:	4620      	mov	r0, r4
   125f8:	47a8      	blx	r5
}
   125fa:	e7e0      	b.n	125be <process_channel+0xe>
			handler = cc_data[chan].callback;
   125fc:	4a0a      	ldr	r2, [pc, #40]	; (12628 <process_channel+0x78>)
   125fe:	0123      	lsls	r3, r4, #4
   12600:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   12604:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   12606:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   12608:	2000      	movs	r0, #0
   1260a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1260c:	f04f 32ff 	mov.w	r2, #4294967295
   12610:	f04f 33ff 	mov.w	r3, #4294967295
   12614:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   12618:	4620      	mov	r0, r4
   1261a:	f7ff fe15 	bl	12248 <event_disable>
			event_clear(chan);
   1261e:	4620      	mov	r0, r4
   12620:	f005 ff12 	bl	18448 <event_clear>
   12624:	e7df      	b.n	125e6 <process_channel+0x36>
   12626:	bf00      	nop
   12628:	200019a8 	.word	0x200019a8

0001262c <rtc_nrf_isr>:
{
   1262c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1262e:	4b0e      	ldr	r3, [pc, #56]	; (12668 <rtc_nrf_isr+0x3c>)
   12630:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   12634:	f013 0f02 	tst.w	r3, #2
   12638:	d00d      	beq.n	12656 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1263a:	4b0b      	ldr	r3, [pc, #44]	; (12668 <rtc_nrf_isr+0x3c>)
   1263c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   12640:	b14b      	cbz	r3, 12656 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12642:	4b09      	ldr	r3, [pc, #36]	; (12668 <rtc_nrf_isr+0x3c>)
   12644:	2200      	movs	r2, #0
   12646:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1264a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1264e:	4a07      	ldr	r2, [pc, #28]	; (1266c <rtc_nrf_isr+0x40>)
   12650:	6813      	ldr	r3, [r2, #0]
   12652:	3301      	adds	r3, #1
   12654:	6013      	str	r3, [r2, #0]
{
   12656:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12658:	2c00      	cmp	r4, #0
   1265a:	dd00      	ble.n	1265e <rtc_nrf_isr+0x32>
}
   1265c:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1265e:	4620      	mov	r0, r4
   12660:	f7ff ffa6 	bl	125b0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12664:	3401      	adds	r4, #1
   12666:	e7f7      	b.n	12658 <rtc_nrf_isr+0x2c>
   12668:	40011000 	.word	0x40011000
   1266c:	200020dc 	.word	0x200020dc

00012670 <sys_clock_set_timeout>:
{
   12670:	b510      	push	{r4, lr}
   12672:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   12674:	f1b0 3fff 	cmp.w	r0, #4294967295
   12678:	d006      	beq.n	12688 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1267a:	2801      	cmp	r0, #1
   1267c:	dd09      	ble.n	12692 <sys_clock_set_timeout+0x22>
   1267e:	4b15      	ldr	r3, [pc, #84]	; (126d4 <sys_clock_set_timeout+0x64>)
   12680:	4298      	cmp	r0, r3
   12682:	dc24      	bgt.n	126ce <sys_clock_set_timeout+0x5e>
   12684:	4604      	mov	r4, r0
   12686:	e005      	b.n	12694 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   12688:	4b13      	ldr	r3, [pc, #76]	; (126d8 <sys_clock_set_timeout+0x68>)
   1268a:	2200      	movs	r2, #0
   1268c:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   1268e:	4c13      	ldr	r4, [pc, #76]	; (126dc <sys_clock_set_timeout+0x6c>)
   12690:	e003      	b.n	1269a <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   12692:	2401      	movs	r4, #1
		sys_busy = true;
   12694:	4b10      	ldr	r3, [pc, #64]	; (126d8 <sys_clock_set_timeout+0x68>)
   12696:	2201      	movs	r2, #1
   12698:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1269a:	f7ff fed5 	bl	12448 <z_nrf_rtc_timer_read>
   1269e:	4b10      	ldr	r3, [pc, #64]	; (126e0 <sys_clock_set_timeout+0x70>)
   126a0:	681a      	ldr	r2, [r3, #0]
   126a2:	685b      	ldr	r3, [r3, #4]
   126a4:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   126a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   126aa:	d300      	bcc.n	126ae <sys_clock_set_timeout+0x3e>
		cyc = 0;
   126ac:	2400      	movs	r4, #0
	cyc += unannounced;
   126ae:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   126b0:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   126b4:	d300      	bcc.n	126b8 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   126b6:	4c09      	ldr	r4, [pc, #36]	; (126dc <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   126b8:	2000      	movs	r0, #0
   126ba:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   126bc:	9001      	str	r0, [sp, #4]
   126be:	4909      	ldr	r1, [pc, #36]	; (126e4 <sys_clock_set_timeout+0x74>)
   126c0:	9100      	str	r1, [sp, #0]
   126c2:	f143 0300 	adc.w	r3, r3, #0
   126c6:	f005 fed5 	bl	18474 <compare_set>
}
   126ca:	b002      	add	sp, #8
   126cc:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   126ce:	4c03      	ldr	r4, [pc, #12]	; (126dc <sys_clock_set_timeout+0x6c>)
   126d0:	e7e0      	b.n	12694 <sys_clock_set_timeout+0x24>
   126d2:	bf00      	nop
   126d4:	007ffffe 	.word	0x007ffffe
   126d8:	200026df 	.word	0x200026df
   126dc:	007fffff 	.word	0x007fffff
   126e0:	200019b8 	.word	0x200019b8
   126e4:	000123f9 	.word	0x000123f9

000126e8 <sys_clock_elapsed>:
{
   126e8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   126ea:	f7ff fead 	bl	12448 <z_nrf_rtc_timer_read>
   126ee:	4b02      	ldr	r3, [pc, #8]	; (126f8 <sys_clock_elapsed+0x10>)
   126f0:	681b      	ldr	r3, [r3, #0]
}
   126f2:	1ac0      	subs	r0, r0, r3
   126f4:	bd08      	pop	{r3, pc}
   126f6:	bf00      	nop
   126f8:	200019b8 	.word	0x200019b8

000126fc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   126fc:	b508      	push	{r3, lr}
   126fe:	4602      	mov	r2, r0
   12700:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   12702:	4802      	ldr	r0, [pc, #8]	; (1270c <multithreading_lock_acquire+0x10>)
   12704:	f002 f9e6 	bl	14ad4 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   12708:	bd08      	pop	{r3, pc}
   1270a:	bf00      	nop
   1270c:	20000414 	.word	0x20000414

00012710 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   12710:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   12712:	4802      	ldr	r0, [pc, #8]	; (1271c <multithreading_lock_release+0xc>)
   12714:	f002 fa62 	bl	14bdc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   12718:	bd08      	pop	{r3, pc}
   1271a:	bf00      	nop
   1271c:	20000414 	.word	0x20000414

00012720 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12720:	b5b0      	push	{r4, r5, r7, lr}
   12722:	b082      	sub	sp, #8
   12724:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   12726:	f7f9 faa7 	bl	bc78 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1272a:	466c      	mov	r4, sp
   1272c:	b088      	sub	sp, #32
   1272e:	466b      	mov	r3, sp
   12730:	f113 0210 	adds.w	r2, r3, #16
   12734:	d031      	beq.n	1279a <k_sys_fatal_error_handler+0x7a>
   12736:	210c      	movs	r1, #12
   12738:	b142      	cbz	r2, 1274c <k_sys_fatal_error_handler+0x2c>
   1273a:	4608      	mov	r0, r1
   1273c:	2904      	cmp	r1, #4
   1273e:	dd01      	ble.n	12744 <k_sys_fatal_error_handler+0x24>
   12740:	4d19      	ldr	r5, [pc, #100]	; (127a8 <k_sys_fatal_error_handler+0x88>)
   12742:	615d      	str	r5, [r3, #20]
   12744:	2808      	cmp	r0, #8
   12746:	dd01      	ble.n	1274c <k_sys_fatal_error_handler+0x2c>
   12748:	4818      	ldr	r0, [pc, #96]	; (127ac <k_sys_fatal_error_handler+0x8c>)
   1274a:	6198      	str	r0, [r3, #24]
   1274c:	290b      	cmp	r1, #11
   1274e:	dd27      	ble.n	127a0 <k_sys_fatal_error_handler+0x80>
   12750:	f04f 0c0c 	mov.w	ip, #12
   12754:	b13a      	cbz	r2, 12766 <k_sys_fatal_error_handler+0x46>
   12756:	2103      	movs	r1, #3
   12758:	7139      	strb	r1, [r7, #4]
   1275a:	2100      	movs	r1, #0
   1275c:	7179      	strb	r1, [r7, #5]
   1275e:	71b9      	strb	r1, [r7, #6]
   12760:	71f9      	strb	r1, [r7, #7]
   12762:	6878      	ldr	r0, [r7, #4]
   12764:	6118      	str	r0, [r3, #16]
   12766:	2100      	movs	r1, #0
   12768:	f36f 0100 	bfc	r1, #0, #1
   1276c:	f36f 0141 	bfc	r1, #1, #1
   12770:	f36f 0182 	bfc	r1, #2, #1
   12774:	f36f 01c5 	bfc	r1, #3, #3
   12778:	2301      	movs	r3, #1
   1277a:	f363 1188 	bfi	r1, r3, #6, #3
   1277e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   12782:	f36c 2153 	bfi	r1, ip, #9, #11
   12786:	f36f 511f 	bfc	r1, #20, #12
   1278a:	2300      	movs	r3, #0
   1278c:	4808      	ldr	r0, [pc, #32]	; (127b0 <k_sys_fatal_error_handler+0x90>)
   1278e:	f7f9 fb6b 	bl	be68 <z_impl_z_log_msg_static_create>
   12792:	46a5      	mov	sp, r4
		sys_arch_reboot(0);
   12794:	2000      	movs	r0, #0
   12796:	f004 ff88 	bl	176aa <sys_arch_reboot>
		LOG_ERR("Resetting system");
   1279a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1279e:	e7cb      	b.n	12738 <k_sys_fatal_error_handler+0x18>
   127a0:	f06f 0c1b 	mvn.w	ip, #27
   127a4:	e7d6      	b.n	12754 <k_sys_fatal_error_handler+0x34>
   127a6:	bf00      	nop
   127a8:	0001b8ac 	.word	0x0001b8ac
   127ac:	0001b8c4 	.word	0x0001b8c4
   127b0:	0001a0f4 	.word	0x0001a0f4

000127b4 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   127b4:	b510      	push	{r4, lr}
   127b6:	4603      	mov	r3, r0
   127b8:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   127ba:	4803      	ldr	r0, [pc, #12]	; (127c8 <rand_prio_low_vector_get_blocking+0x14>)
   127bc:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   127be:	680c      	ldr	r4, [r1, #0]
   127c0:	4619      	mov	r1, r3
   127c2:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   127c4:	bd10      	pop	{r4, pc}
   127c6:	bf00      	nop
   127c8:	00019ee0 	.word	0x00019ee0

000127cc <sdc_assertion_handler>:
{
   127cc:	b5b0      	push	{r4, r5, r7, lr}
   127ce:	b082      	sub	sp, #8
   127d0:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   127d2:	466c      	mov	r4, sp
   127d4:	2301      	movs	r3, #1
   127d6:	713b      	strb	r3, [r7, #4]
   127d8:	2303      	movs	r3, #3
   127da:	717b      	strb	r3, [r7, #5]
   127dc:	b08a      	sub	sp, #40	; 0x28
   127de:	46ec      	mov	ip, sp
   127e0:	f11c 0210 	adds.w	r2, ip, #16
   127e4:	d021      	beq.n	1282a <sdc_assertion_handler+0x5e>
   127e6:	f04f 0e16 	mov.w	lr, #22
   127ea:	b15a      	cbz	r2, 12804 <sdc_assertion_handler+0x38>
   127ec:	4673      	mov	r3, lr
   127ee:	f1be 0f04 	cmp.w	lr, #4
   127f2:	dd02      	ble.n	127fa <sdc_assertion_handler+0x2e>
   127f4:	4d2c      	ldr	r5, [pc, #176]	; (128a8 <sdc_assertion_handler+0xdc>)
   127f6:	f8cc 5014 	str.w	r5, [ip, #20]
   127fa:	2b08      	cmp	r3, #8
   127fc:	dd02      	ble.n	12804 <sdc_assertion_handler+0x38>
   127fe:	4b2b      	ldr	r3, [pc, #172]	; (128ac <sdc_assertion_handler+0xe0>)
   12800:	f8cc 3018 	str.w	r3, [ip, #24]
   12804:	2301      	movs	r3, #1
   12806:	703b      	strb	r3, [r7, #0]
   12808:	2303      	movs	r3, #3
   1280a:	707b      	strb	r3, [r7, #1]
   1280c:	b1d2      	cbz	r2, 12844 <sdc_assertion_handler+0x78>
   1280e:	4673      	mov	r3, lr
   12810:	f1be 0f0c 	cmp.w	lr, #12
   12814:	dd01      	ble.n	1281a <sdc_assertion_handler+0x4e>
   12816:	f8cc 001c 	str.w	r0, [ip, #28]
   1281a:	2b10      	cmp	r3, #16
   1281c:	dd01      	ble.n	12822 <sdc_assertion_handler+0x56>
   1281e:	f8cc 1020 	str.w	r1, [ip, #32]
   12822:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   12826:	2100      	movs	r1, #0
   12828:	e00a      	b.n	12840 <sdc_assertion_handler+0x74>
   1282a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1282e:	e7dc      	b.n	127ea <sdc_assertion_handler+0x1e>
   12830:	f101 0008 	add.w	r0, r1, #8
   12834:	4438      	add	r0, r7
   12836:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1283a:	f803 0b01 	strb.w	r0, [r3], #1
   1283e:	3101      	adds	r1, #1
   12840:	2901      	cmp	r1, #1
   12842:	d9f5      	bls.n	12830 <sdc_assertion_handler+0x64>
   12844:	f1be 0f15 	cmp.w	lr, #21
   12848:	dd2b      	ble.n	128a2 <sdc_assertion_handler+0xd6>
   1284a:	2316      	movs	r3, #22
   1284c:	b14a      	cbz	r2, 12862 <sdc_assertion_handler+0x96>
   1284e:	2105      	movs	r1, #5
   12850:	7139      	strb	r1, [r7, #4]
   12852:	2100      	movs	r1, #0
   12854:	7179      	strb	r1, [r7, #5]
   12856:	71b9      	strb	r1, [r7, #6]
   12858:	2101      	movs	r1, #1
   1285a:	71f9      	strb	r1, [r7, #7]
   1285c:	6878      	ldr	r0, [r7, #4]
   1285e:	f8cc 0010 	str.w	r0, [ip, #16]
   12862:	2100      	movs	r1, #0
   12864:	f36f 0100 	bfc	r1, #0, #1
   12868:	f36f 0141 	bfc	r1, #1, #1
   1286c:	f36f 0182 	bfc	r1, #2, #1
   12870:	f36f 01c5 	bfc	r1, #3, #3
   12874:	2001      	movs	r0, #1
   12876:	f360 1188 	bfi	r1, r0, #6, #3
   1287a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1287e:	f363 2153 	bfi	r1, r3, #9, #11
   12882:	f36f 511f 	bfc	r1, #20, #12
   12886:	2300      	movs	r3, #0
   12888:	4809      	ldr	r0, [pc, #36]	; (128b0 <sdc_assertion_handler+0xe4>)
   1288a:	f7f9 faed 	bl	be68 <z_impl_z_log_msg_static_create>
   1288e:	46a5      	mov	sp, r4
	k_oops();
   12890:	4040      	eors	r0, r0
   12892:	f380 8811 	msr	BASEPRI, r0
   12896:	f04f 0003 	mov.w	r0, #3
   1289a:	df02      	svc	2
}
   1289c:	3708      	adds	r7, #8
   1289e:	46bd      	mov	sp, r7
   128a0:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   128a2:	f06f 031b 	mvn.w	r3, #27
   128a6:	e7d1      	b.n	1284c <sdc_assertion_handler+0x80>
   128a8:	0001b8ec 	.word	0x0001b8ec
   128ac:	0001baa4 	.word	0x0001baa4
   128b0:	0001a0dc 	.word	0x0001a0dc

000128b4 <event_packet_process>:
{
   128b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   128b6:	b083      	sub	sp, #12
   128b8:	af00      	add	r7, sp, #0
   128ba:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   128bc:	f005 fdf7 	bl	184ae <event_packet_is_discardable>
   128c0:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   128c2:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   128c4:	461d      	mov	r5, r3
   128c6:	b193      	cbz	r3, 128ee <event_packet_process+0x3a>
   128c8:	2200      	movs	r2, #0
   128ca:	2300      	movs	r3, #0
   128cc:	4629      	mov	r1, r5
   128ce:	f7fb feeb 	bl	e6a8 <bt_buf_get_evt>
	if (!evt_buf) {
   128d2:	4606      	mov	r6, r0
   128d4:	b180      	cbz	r0, 128f8 <event_packet_process+0x44>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   128d6:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   128d8:	3202      	adds	r2, #2
   128da:	4621      	mov	r1, r4
   128dc:	300c      	adds	r0, #12
   128de:	f005 f966 	bl	17bae <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   128e2:	4630      	mov	r0, r6
   128e4:	f7fd fbe4 	bl	100b0 <bt_recv>
}
   128e8:	370c      	adds	r7, #12
   128ea:	46bd      	mov	sp, r7
   128ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   128ee:	f04f 32ff 	mov.w	r2, #4294967295
   128f2:	f04f 33ff 	mov.w	r3, #4294967295
   128f6:	e7e9      	b.n	128cc <event_packet_process+0x18>
		if (discardable) {
   128f8:	2d00      	cmp	r5, #0
   128fa:	d1f5      	bne.n	128e8 <event_packet_process+0x34>
		LOG_ERR("No event buffer available");
   128fc:	466d      	mov	r5, sp
   128fe:	b088      	sub	sp, #32
   12900:	466b      	mov	r3, sp
   12902:	f113 0210 	adds.w	r2, r3, #16
   12906:	d02e      	beq.n	12966 <event_packet_process+0xb2>
   12908:	210c      	movs	r1, #12
   1290a:	b142      	cbz	r2, 1291e <event_packet_process+0x6a>
   1290c:	4608      	mov	r0, r1
   1290e:	2904      	cmp	r1, #4
   12910:	dd01      	ble.n	12916 <event_packet_process+0x62>
   12912:	4c18      	ldr	r4, [pc, #96]	; (12974 <event_packet_process+0xc0>)
   12914:	615c      	str	r4, [r3, #20]
   12916:	2808      	cmp	r0, #8
   12918:	dd01      	ble.n	1291e <event_packet_process+0x6a>
   1291a:	4817      	ldr	r0, [pc, #92]	; (12978 <event_packet_process+0xc4>)
   1291c:	6198      	str	r0, [r3, #24]
   1291e:	290b      	cmp	r1, #11
   12920:	dd24      	ble.n	1296c <event_packet_process+0xb8>
   12922:	240c      	movs	r4, #12
   12924:	b13a      	cbz	r2, 12936 <event_packet_process+0x82>
   12926:	2103      	movs	r1, #3
   12928:	7139      	strb	r1, [r7, #4]
   1292a:	2100      	movs	r1, #0
   1292c:	7179      	strb	r1, [r7, #5]
   1292e:	71b9      	strb	r1, [r7, #6]
   12930:	71f9      	strb	r1, [r7, #7]
   12932:	6878      	ldr	r0, [r7, #4]
   12934:	6118      	str	r0, [r3, #16]
   12936:	2100      	movs	r1, #0
   12938:	f36f 0100 	bfc	r1, #0, #1
   1293c:	f36f 0141 	bfc	r1, #1, #1
   12940:	f36f 0182 	bfc	r1, #2, #1
   12944:	f36f 01c5 	bfc	r1, #3, #3
   12948:	2301      	movs	r3, #1
   1294a:	f363 1188 	bfi	r1, r3, #6, #3
   1294e:	f3c4 040a 	ubfx	r4, r4, #0, #11
   12952:	f364 2153 	bfi	r1, r4, #9, #11
   12956:	f36f 511f 	bfc	r1, #20, #12
   1295a:	2300      	movs	r3, #0
   1295c:	4807      	ldr	r0, [pc, #28]	; (1297c <event_packet_process+0xc8>)
   1295e:	f7f9 fa83 	bl	be68 <z_impl_z_log_msg_static_create>
   12962:	46ad      	mov	sp, r5
		return;
   12964:	e7c0      	b.n	128e8 <event_packet_process+0x34>
		LOG_ERR("No event buffer available");
   12966:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1296a:	e7ce      	b.n	1290a <event_packet_process+0x56>
   1296c:	f06f 041b 	mvn.w	r4, #27
   12970:	e7d8      	b.n	12924 <event_packet_process+0x70>
   12972:	bf00      	nop
   12974:	0001b918 	.word	0x0001b918
   12978:	0001ba70 	.word	0x0001ba70
   1297c:	0001a0dc 	.word	0x0001a0dc

00012980 <data_packet_process>:
{
   12980:	b5b0      	push	{r4, r5, r7, lr}
   12982:	b082      	sub	sp, #8
   12984:	af00      	add	r7, sp, #0
   12986:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12988:	f04f 32ff 	mov.w	r2, #4294967295
   1298c:	f04f 33ff 	mov.w	r3, #4294967295
   12990:	2003      	movs	r0, #3
   12992:	f7fb fe57 	bl	e644 <bt_buf_get_rx>
	if (!data_buf) {
   12996:	b160      	cbz	r0, 129b2 <data_packet_process+0x32>
   12998:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1299a:	8862      	ldrh	r2, [r4, #2]
   1299c:	3204      	adds	r2, #4
   1299e:	4621      	mov	r1, r4
   129a0:	300c      	adds	r0, #12
   129a2:	f005 f904 	bl	17bae <net_buf_simple_add_mem>
	bt_recv(data_buf);
   129a6:	4628      	mov	r0, r5
   129a8:	f7fd fb82 	bl	100b0 <bt_recv>
}
   129ac:	3708      	adds	r7, #8
   129ae:	46bd      	mov	sp, r7
   129b0:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("No data buffer available");
   129b2:	466d      	mov	r5, sp
   129b4:	b088      	sub	sp, #32
   129b6:	466b      	mov	r3, sp
   129b8:	f113 0210 	adds.w	r2, r3, #16
   129bc:	d02e      	beq.n	12a1c <data_packet_process+0x9c>
   129be:	210c      	movs	r1, #12
   129c0:	b142      	cbz	r2, 129d4 <data_packet_process+0x54>
   129c2:	4608      	mov	r0, r1
   129c4:	2904      	cmp	r1, #4
   129c6:	dd01      	ble.n	129cc <data_packet_process+0x4c>
   129c8:	4c17      	ldr	r4, [pc, #92]	; (12a28 <data_packet_process+0xa8>)
   129ca:	615c      	str	r4, [r3, #20]
   129cc:	2808      	cmp	r0, #8
   129ce:	dd01      	ble.n	129d4 <data_packet_process+0x54>
   129d0:	4816      	ldr	r0, [pc, #88]	; (12a2c <data_packet_process+0xac>)
   129d2:	6198      	str	r0, [r3, #24]
   129d4:	290b      	cmp	r1, #11
   129d6:	dd24      	ble.n	12a22 <data_packet_process+0xa2>
   129d8:	240c      	movs	r4, #12
   129da:	b13a      	cbz	r2, 129ec <data_packet_process+0x6c>
   129dc:	2103      	movs	r1, #3
   129de:	7139      	strb	r1, [r7, #4]
   129e0:	2100      	movs	r1, #0
   129e2:	7179      	strb	r1, [r7, #5]
   129e4:	71b9      	strb	r1, [r7, #6]
   129e6:	71f9      	strb	r1, [r7, #7]
   129e8:	6878      	ldr	r0, [r7, #4]
   129ea:	6118      	str	r0, [r3, #16]
   129ec:	2100      	movs	r1, #0
   129ee:	f36f 0100 	bfc	r1, #0, #1
   129f2:	f36f 0141 	bfc	r1, #1, #1
   129f6:	f36f 0182 	bfc	r1, #2, #1
   129fa:	f36f 01c5 	bfc	r1, #3, #3
   129fe:	2301      	movs	r3, #1
   12a00:	f363 1188 	bfi	r1, r3, #6, #3
   12a04:	f3c4 030a 	ubfx	r3, r4, #0, #11
   12a08:	f363 2153 	bfi	r1, r3, #9, #11
   12a0c:	f36f 511f 	bfc	r1, #20, #12
   12a10:	2300      	movs	r3, #0
   12a12:	4807      	ldr	r0, [pc, #28]	; (12a30 <data_packet_process+0xb0>)
   12a14:	f7f9 fa28 	bl	be68 <z_impl_z_log_msg_static_create>
   12a18:	46ad      	mov	sp, r5
		return;
   12a1a:	e7c7      	b.n	129ac <data_packet_process+0x2c>
		LOG_ERR("No data buffer available");
   12a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12a20:	e7ce      	b.n	129c0 <data_packet_process+0x40>
   12a22:	f06f 041b 	mvn.w	r4, #27
   12a26:	e7d8      	b.n	129da <data_packet_process+0x5a>
   12a28:	0001b938 	.word	0x0001b938
   12a2c:	0001ba5c 	.word	0x0001ba5c
   12a30:	0001a0dc 	.word	0x0001a0dc

00012a34 <fetch_and_process_hci_msg>:
{
   12a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a36:	b083      	sub	sp, #12
   12a38:	af00      	add	r7, sp, #0
   12a3a:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   12a3c:	f04f 30ff 	mov.w	r0, #4294967295
   12a40:	f04f 31ff 	mov.w	r1, #4294967295
   12a44:	f7ff fe5a 	bl	126fc <multithreading_lock_acquire>
	if (!errcode) {
   12a48:	b118      	cbz	r0, 12a52 <fetch_and_process_hci_msg+0x1e>
		return false;
   12a4a:	2000      	movs	r0, #0
}
   12a4c:	370c      	adds	r7, #12
   12a4e:	46bd      	mov	sp, r7
   12a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   12a52:	1df9      	adds	r1, r7, #7
   12a54:	4620      	mov	r0, r4
   12a56:	f000 fb79 	bl	1314c <hci_internal_msg_get>
   12a5a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   12a5c:	f7ff fe58 	bl	12710 <multithreading_lock_release>
	if (errcode) {
   12a60:	2d00      	cmp	r5, #0
   12a62:	d1f2      	bne.n	12a4a <fetch_and_process_hci_msg+0x16>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   12a64:	79fb      	ldrb	r3, [r7, #7]
   12a66:	2b04      	cmp	r3, #4
   12a68:	d03a      	beq.n	12ae0 <fetch_and_process_hci_msg+0xac>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   12a6a:	2b02      	cmp	r3, #2
   12a6c:	d03d      	beq.n	12aea <fetch_and_process_hci_msg+0xb6>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   12a6e:	466d      	mov	r5, sp
   12a70:	b088      	sub	sp, #32
   12a72:	4669      	mov	r1, sp
   12a74:	f111 0210 	adds.w	r2, r1, #16
   12a78:	d03c      	beq.n	12af4 <fetch_and_process_hci_msg+0xc0>
   12a7a:	2010      	movs	r0, #16
   12a7c:	b15a      	cbz	r2, 12a96 <fetch_and_process_hci_msg+0x62>
   12a7e:	4604      	mov	r4, r0
   12a80:	2804      	cmp	r0, #4
   12a82:	dd01      	ble.n	12a88 <fetch_and_process_hci_msg+0x54>
   12a84:	4e1e      	ldr	r6, [pc, #120]	; (12b00 <fetch_and_process_hci_msg+0xcc>)
   12a86:	614e      	str	r6, [r1, #20]
   12a88:	2c08      	cmp	r4, #8
   12a8a:	dd01      	ble.n	12a90 <fetch_and_process_hci_msg+0x5c>
   12a8c:	4e1d      	ldr	r6, [pc, #116]	; (12b04 <fetch_and_process_hci_msg+0xd0>)
   12a8e:	618e      	str	r6, [r1, #24]
   12a90:	2c0c      	cmp	r4, #12
   12a92:	dd00      	ble.n	12a96 <fetch_and_process_hci_msg+0x62>
   12a94:	61cb      	str	r3, [r1, #28]
   12a96:	280f      	cmp	r0, #15
   12a98:	dd2f      	ble.n	12afa <fetch_and_process_hci_msg+0xc6>
   12a9a:	2310      	movs	r3, #16
   12a9c:	b13a      	cbz	r2, 12aae <fetch_and_process_hci_msg+0x7a>
   12a9e:	2004      	movs	r0, #4
   12aa0:	7038      	strb	r0, [r7, #0]
   12aa2:	2000      	movs	r0, #0
   12aa4:	7078      	strb	r0, [r7, #1]
   12aa6:	70b8      	strb	r0, [r7, #2]
   12aa8:	70f8      	strb	r0, [r7, #3]
   12aaa:	6838      	ldr	r0, [r7, #0]
   12aac:	6108      	str	r0, [r1, #16]
   12aae:	2100      	movs	r1, #0
   12ab0:	f36f 0100 	bfc	r1, #0, #1
   12ab4:	f36f 0141 	bfc	r1, #1, #1
   12ab8:	f36f 0182 	bfc	r1, #2, #1
   12abc:	f36f 01c5 	bfc	r1, #3, #3
   12ac0:	2401      	movs	r4, #1
   12ac2:	f364 1188 	bfi	r1, r4, #6, #3
   12ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12aca:	f363 2153 	bfi	r1, r3, #9, #11
   12ace:	f36f 511f 	bfc	r1, #20, #12
   12ad2:	2300      	movs	r3, #0
   12ad4:	480c      	ldr	r0, [pc, #48]	; (12b08 <fetch_and_process_hci_msg+0xd4>)
   12ad6:	f7f9 f9c7 	bl	be68 <z_impl_z_log_msg_static_create>
   12ada:	46ad      	mov	sp, r5
	return true;
   12adc:	4620      	mov	r0, r4
   12ade:	e7b5      	b.n	12a4c <fetch_and_process_hci_msg+0x18>
		event_packet_process(p_hci_buffer);
   12ae0:	4620      	mov	r0, r4
   12ae2:	f7ff fee7 	bl	128b4 <event_packet_process>
	return true;
   12ae6:	2001      	movs	r0, #1
   12ae8:	e7b0      	b.n	12a4c <fetch_and_process_hci_msg+0x18>
		data_packet_process(p_hci_buffer);
   12aea:	4620      	mov	r0, r4
   12aec:	f7ff ff48 	bl	12980 <data_packet_process>
	return true;
   12af0:	2001      	movs	r0, #1
   12af2:	e7ab      	b.n	12a4c <fetch_and_process_hci_msg+0x18>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   12af4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12af8:	e7c0      	b.n	12a7c <fetch_and_process_hci_msg+0x48>
   12afa:	f06f 031b 	mvn.w	r3, #27
   12afe:	e7cd      	b.n	12a9c <fetch_and_process_hci_msg+0x68>
   12b00:	0001b958 	.word	0x0001b958
   12b04:	0001ba88 	.word	0x0001ba88
   12b08:	0001a0dc 	.word	0x0001a0dc

00012b0c <receive_signal_raise>:
{
   12b0c:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   12b0e:	4902      	ldr	r1, [pc, #8]	; (12b18 <receive_signal_raise+0xc>)
   12b10:	4802      	ldr	r0, [pc, #8]	; (12b1c <receive_signal_raise+0x10>)
   12b12:	f006 fd55 	bl	195c0 <k_work_submit_to_queue>
}
   12b16:	bd08      	pop	{r3, pc}
   12b18:	20002128 	.word	0x20002128
   12b1c:	20001b50 	.word	0x20001b50

00012b20 <cmd_handle>:
{
   12b20:	b538      	push	{r3, r4, r5, lr}
   12b22:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   12b24:	f04f 30ff 	mov.w	r0, #4294967295
   12b28:	f04f 31ff 	mov.w	r1, #4294967295
   12b2c:	f7ff fde6 	bl	126fc <multithreading_lock_acquire>
	if (!errcode) {
   12b30:	4604      	mov	r4, r0
   12b32:	b108      	cbz	r0, 12b38 <cmd_handle+0x18>
}
   12b34:	4620      	mov	r0, r4
   12b36:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   12b38:	68e8      	ldr	r0, [r5, #12]
   12b3a:	f000 fadf 	bl	130fc <hci_internal_cmd_put>
   12b3e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   12b40:	f7ff fde6 	bl	12710 <multithreading_lock_release>
	if (errcode) {
   12b44:	2c00      	cmp	r4, #0
   12b46:	d1f5      	bne.n	12b34 <cmd_handle+0x14>
   12b48:	4902      	ldr	r1, [pc, #8]	; (12b54 <cmd_handle+0x34>)
   12b4a:	4803      	ldr	r0, [pc, #12]	; (12b58 <cmd_handle+0x38>)
   12b4c:	f006 fd38 	bl	195c0 <k_work_submit_to_queue>
	return 0;
   12b50:	e7f0      	b.n	12b34 <cmd_handle+0x14>
   12b52:	bf00      	nop
   12b54:	20002128 	.word	0x20002128
   12b58:	20001b50 	.word	0x20001b50

00012b5c <rand_prio_high_vector_get>:
{
   12b5c:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   12b5e:	4b08      	ldr	r3, [pc, #32]	; (12b80 <rand_prio_high_vector_get+0x24>)
   12b60:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   12b62:	685c      	ldr	r4, [r3, #4]
   12b64:	b144      	cbz	r4, 12b78 <rand_prio_high_vector_get+0x1c>
   12b66:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   12b68:	2300      	movs	r3, #0
   12b6a:	4601      	mov	r1, r0
   12b6c:	4804      	ldr	r0, [pc, #16]	; (12b80 <rand_prio_high_vector_get+0x24>)
   12b6e:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   12b70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   12b74:	b2c0      	uxtb	r0, r0
   12b76:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   12b78:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12b7c:	e7f8      	b.n	12b70 <rand_prio_high_vector_get+0x14>
   12b7e:	bf00      	nop
   12b80:	00019ee0 	.word	0x00019ee0

00012b84 <rand_prio_low_vector_get>:
{
   12b84:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   12b86:	4b08      	ldr	r3, [pc, #32]	; (12ba8 <rand_prio_low_vector_get+0x24>)
   12b88:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   12b8a:	685c      	ldr	r4, [r3, #4]
   12b8c:	b144      	cbz	r4, 12ba0 <rand_prio_low_vector_get+0x1c>
   12b8e:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   12b90:	2300      	movs	r3, #0
   12b92:	4601      	mov	r1, r0
   12b94:	4804      	ldr	r0, [pc, #16]	; (12ba8 <rand_prio_low_vector_get+0x24>)
   12b96:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   12b98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   12b9c:	b2c0      	uxtb	r0, r0
   12b9e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   12ba0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12ba4:	e7f8      	b.n	12b98 <rand_prio_low_vector_get+0x14>
   12ba6:	bf00      	nop
   12ba8:	00019ee0 	.word	0x00019ee0

00012bac <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   12bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bae:	b08b      	sub	sp, #44	; 0x2c
   12bb0:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   12bb2:	4985      	ldr	r1, [pc, #532]	; (12dc8 <hci_driver_open+0x21c>)
   12bb4:	4885      	ldr	r0, [pc, #532]	; (12dcc <hci_driver_open+0x220>)
   12bb6:	f006 fce7 	bl	19588 <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   12bba:	f107 0014 	add.w	r0, r7, #20
   12bbe:	f7ed fb07 	bl	1d0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   12bc2:	466c      	mov	r4, sp
   12bc4:	2301      	movs	r3, #1
   12bc6:	713b      	strb	r3, [r7, #4]
   12bc8:	2303      	movs	r3, #3
   12bca:	717b      	strb	r3, [r7, #5]
   12bcc:	b08a      	sub	sp, #40	; 0x28
   12bce:	46ec      	mov	ip, sp
   12bd0:	f11c 0210 	adds.w	r2, ip, #16
   12bd4:	d01a      	beq.n	12c0c <hci_driver_open+0x60>
   12bd6:	2012      	movs	r0, #18
   12bd8:	b152      	cbz	r2, 12bf0 <hci_driver_open+0x44>
   12bda:	4603      	mov	r3, r0
   12bdc:	2804      	cmp	r0, #4
   12bde:	dd02      	ble.n	12be6 <hci_driver_open+0x3a>
   12be0:	497b      	ldr	r1, [pc, #492]	; (12dd0 <hci_driver_open+0x224>)
   12be2:	f8cc 1014 	str.w	r1, [ip, #20]
   12be6:	2b08      	cmp	r3, #8
   12be8:	dd02      	ble.n	12bf0 <hci_driver_open+0x44>
   12bea:	4b7a      	ldr	r3, [pc, #488]	; (12dd4 <hci_driver_open+0x228>)
   12bec:	f8cc 3018 	str.w	r3, [ip, #24]
   12bf0:	2301      	movs	r3, #1
   12bf2:	703b      	strb	r3, [r7, #0]
   12bf4:	2303      	movs	r3, #3
   12bf6:	707b      	strb	r3, [r7, #1]
   12bf8:	b1b2      	cbz	r2, 12c28 <hci_driver_open+0x7c>
   12bfa:	280c      	cmp	r0, #12
   12bfc:	dd02      	ble.n	12c04 <hci_driver_open+0x58>
   12bfe:	4b76      	ldr	r3, [pc, #472]	; (12dd8 <hci_driver_open+0x22c>)
   12c00:	f8cc 301c 	str.w	r3, [ip, #28]
   12c04:	f10c 0320 	add.w	r3, ip, #32
   12c08:	2100      	movs	r1, #0
   12c0a:	e00b      	b.n	12c24 <hci_driver_open+0x78>
   12c0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12c10:	e7e2      	b.n	12bd8 <hci_driver_open+0x2c>
   12c12:	f101 0528 	add.w	r5, r1, #40	; 0x28
   12c16:	eb05 0e07 	add.w	lr, r5, r7
   12c1a:	f81e ec28 	ldrb.w	lr, [lr, #-40]
   12c1e:	f803 eb01 	strb.w	lr, [r3], #1
   12c22:	3101      	adds	r1, #1
   12c24:	2901      	cmp	r1, #1
   12c26:	d9f4      	bls.n	12c12 <hci_driver_open+0x66>
   12c28:	2811      	cmp	r0, #17
   12c2a:	dd41      	ble.n	12cb0 <hci_driver_open+0x104>
   12c2c:	2312      	movs	r3, #18
   12c2e:	b14a      	cbz	r2, 12c44 <hci_driver_open+0x98>
   12c30:	2104      	movs	r1, #4
   12c32:	7139      	strb	r1, [r7, #4]
   12c34:	2100      	movs	r1, #0
   12c36:	7179      	strb	r1, [r7, #5]
   12c38:	71b9      	strb	r1, [r7, #6]
   12c3a:	2101      	movs	r1, #1
   12c3c:	71f9      	strb	r1, [r7, #7]
   12c3e:	6878      	ldr	r0, [r7, #4]
   12c40:	f8cc 0010 	str.w	r0, [ip, #16]
   12c44:	2100      	movs	r1, #0
   12c46:	f36f 0100 	bfc	r1, #0, #1
   12c4a:	f36f 0141 	bfc	r1, #1, #1
   12c4e:	f36f 0182 	bfc	r1, #2, #1
   12c52:	f36f 01c5 	bfc	r1, #3, #3
   12c56:	2003      	movs	r0, #3
   12c58:	f360 1188 	bfi	r1, r0, #6, #3
   12c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12c60:	f363 2153 	bfi	r1, r3, #9, #11
   12c64:	2314      	movs	r3, #20
   12c66:	f363 511f 	bfi	r1, r3, #20, #12
   12c6a:	18fb      	adds	r3, r7, r3
   12c6c:	485b      	ldr	r0, [pc, #364]	; (12ddc <hci_driver_open+0x230>)
   12c6e:	f7f9 f8fb 	bl	be68 <z_impl_z_log_msg_static_create>
   12c72:	46a5      	mov	sp, r4
   12c74:	485a      	ldr	r0, [pc, #360]	; (12de0 <hci_driver_open+0x234>)
   12c76:	f006 fa6a 	bl	1914e <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   12c7a:	b1e0      	cbz	r0, 12cb6 <hci_driver_open+0x10a>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   12c7c:	4a59      	ldr	r2, [pc, #356]	; (12de4 <hci_driver_open+0x238>)
   12c7e:	f107 0308 	add.w	r3, r7, #8
   12c82:	ca07      	ldmia	r2, {r0, r1, r2}
   12c84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   12c88:	4618      	mov	r0, r3
   12c8a:	f7ed fc11 	bl	4b0 <sdc_rand_source_register>
	if (err) {
   12c8e:	4603      	mov	r3, r0
   12c90:	2800      	cmp	r0, #0
   12c92:	d14d      	bne.n	12d30 <hci_driver_open+0x184>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   12c94:	f04f 30ff 	mov.w	r0, #4294967295
   12c98:	f04f 31ff 	mov.w	r1, #4294967295
   12c9c:	f7ff fd2e 	bl	126fc <multithreading_lock_acquire>
	if (err) {
   12ca0:	4604      	mov	r4, r0
   12ca2:	2800      	cmp	r0, #0
   12ca4:	f000 8084 	beq.w	12db0 <hci_driver_open+0x204>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   12ca8:	4620      	mov	r0, r4
   12caa:	372c      	adds	r7, #44	; 0x2c
   12cac:	46bd      	mov	sp, r7
   12cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   12cb0:	f06f 031b 	mvn.w	r3, #27
   12cb4:	e7bb      	b.n	12c2e <hci_driver_open+0x82>
		LOG_ERR("Entropy source device not ready");
   12cb6:	466d      	mov	r5, sp
   12cb8:	b088      	sub	sp, #32
   12cba:	466b      	mov	r3, sp
   12cbc:	f113 0210 	adds.w	r2, r3, #16
   12cc0:	d030      	beq.n	12d24 <hci_driver_open+0x178>
   12cc2:	210c      	movs	r1, #12
   12cc4:	b142      	cbz	r2, 12cd8 <hci_driver_open+0x12c>
   12cc6:	4608      	mov	r0, r1
   12cc8:	2904      	cmp	r1, #4
   12cca:	dd01      	ble.n	12cd0 <hci_driver_open+0x124>
   12ccc:	4c46      	ldr	r4, [pc, #280]	; (12de8 <hci_driver_open+0x23c>)
   12cce:	615c      	str	r4, [r3, #20]
   12cd0:	2808      	cmp	r0, #8
   12cd2:	dd01      	ble.n	12cd8 <hci_driver_open+0x12c>
   12cd4:	483f      	ldr	r0, [pc, #252]	; (12dd4 <hci_driver_open+0x228>)
   12cd6:	6198      	str	r0, [r3, #24]
   12cd8:	290b      	cmp	r1, #11
   12cda:	dd26      	ble.n	12d2a <hci_driver_open+0x17e>
   12cdc:	240c      	movs	r4, #12
   12cde:	b13a      	cbz	r2, 12cf0 <hci_driver_open+0x144>
   12ce0:	2103      	movs	r1, #3
   12ce2:	7139      	strb	r1, [r7, #4]
   12ce4:	2100      	movs	r1, #0
   12ce6:	7179      	strb	r1, [r7, #5]
   12ce8:	71b9      	strb	r1, [r7, #6]
   12cea:	71f9      	strb	r1, [r7, #7]
   12cec:	6878      	ldr	r0, [r7, #4]
   12cee:	6118      	str	r0, [r3, #16]
   12cf0:	2100      	movs	r1, #0
   12cf2:	f36f 0100 	bfc	r1, #0, #1
   12cf6:	f36f 0141 	bfc	r1, #1, #1
   12cfa:	f36f 0182 	bfc	r1, #2, #1
   12cfe:	f36f 01c5 	bfc	r1, #3, #3
   12d02:	2301      	movs	r3, #1
   12d04:	f363 1188 	bfi	r1, r3, #6, #3
   12d08:	f3c4 040a 	ubfx	r4, r4, #0, #11
   12d0c:	f364 2153 	bfi	r1, r4, #9, #11
   12d10:	f36f 511f 	bfc	r1, #20, #12
   12d14:	2300      	movs	r3, #0
   12d16:	4831      	ldr	r0, [pc, #196]	; (12ddc <hci_driver_open+0x230>)
   12d18:	f7f9 f8a6 	bl	be68 <z_impl_z_log_msg_static_create>
   12d1c:	46ad      	mov	sp, r5
		return -ENODEV;
   12d1e:	f06f 0412 	mvn.w	r4, #18
   12d22:	e7c1      	b.n	12ca8 <hci_driver_open+0xfc>
		LOG_ERR("Entropy source device not ready");
   12d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12d28:	e7cc      	b.n	12cc4 <hci_driver_open+0x118>
   12d2a:	f06f 041b 	mvn.w	r4, #27
   12d2e:	e7d6      	b.n	12cde <hci_driver_open+0x132>
		LOG_ERR("Failed to register rand source (%d)", err);
   12d30:	466c      	mov	r4, sp
   12d32:	b088      	sub	sp, #32
   12d34:	4669      	mov	r1, sp
   12d36:	f111 0210 	adds.w	r2, r1, #16
   12d3a:	d033      	beq.n	12da4 <hci_driver_open+0x1f8>
   12d3c:	2010      	movs	r0, #16
   12d3e:	b15a      	cbz	r2, 12d58 <hci_driver_open+0x1ac>
   12d40:	4605      	mov	r5, r0
   12d42:	2804      	cmp	r0, #4
   12d44:	dd01      	ble.n	12d4a <hci_driver_open+0x19e>
   12d46:	4e29      	ldr	r6, [pc, #164]	; (12dec <hci_driver_open+0x240>)
   12d48:	614e      	str	r6, [r1, #20]
   12d4a:	2d08      	cmp	r5, #8
   12d4c:	dd01      	ble.n	12d52 <hci_driver_open+0x1a6>
   12d4e:	4e21      	ldr	r6, [pc, #132]	; (12dd4 <hci_driver_open+0x228>)
   12d50:	618e      	str	r6, [r1, #24]
   12d52:	2d0c      	cmp	r5, #12
   12d54:	dd00      	ble.n	12d58 <hci_driver_open+0x1ac>
   12d56:	61cb      	str	r3, [r1, #28]
   12d58:	280f      	cmp	r0, #15
   12d5a:	dd26      	ble.n	12daa <hci_driver_open+0x1fe>
   12d5c:	2310      	movs	r3, #16
   12d5e:	b13a      	cbz	r2, 12d70 <hci_driver_open+0x1c4>
   12d60:	2004      	movs	r0, #4
   12d62:	7138      	strb	r0, [r7, #4]
   12d64:	2000      	movs	r0, #0
   12d66:	7178      	strb	r0, [r7, #5]
   12d68:	71b8      	strb	r0, [r7, #6]
   12d6a:	71f8      	strb	r0, [r7, #7]
   12d6c:	6878      	ldr	r0, [r7, #4]
   12d6e:	6108      	str	r0, [r1, #16]
   12d70:	2100      	movs	r1, #0
   12d72:	f36f 0100 	bfc	r1, #0, #1
   12d76:	f36f 0141 	bfc	r1, #1, #1
   12d7a:	f36f 0182 	bfc	r1, #2, #1
   12d7e:	f36f 01c5 	bfc	r1, #3, #3
   12d82:	2001      	movs	r0, #1
   12d84:	f360 1188 	bfi	r1, r0, #6, #3
   12d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12d8c:	f363 2153 	bfi	r1, r3, #9, #11
   12d90:	f36f 511f 	bfc	r1, #20, #12
   12d94:	2300      	movs	r3, #0
   12d96:	4811      	ldr	r0, [pc, #68]	; (12ddc <hci_driver_open+0x230>)
   12d98:	f7f9 f866 	bl	be68 <z_impl_z_log_msg_static_create>
   12d9c:	46a5      	mov	sp, r4
		return -EINVAL;
   12d9e:	f06f 0415 	mvn.w	r4, #21
   12da2:	e781      	b.n	12ca8 <hci_driver_open+0xfc>
		LOG_ERR("Failed to register rand source (%d)", err);
   12da4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12da8:	e7c9      	b.n	12d3e <hci_driver_open+0x192>
   12daa:	f06f 031b 	mvn.w	r3, #27
   12dae:	e7d6      	b.n	12d5e <hci_driver_open+0x1b2>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   12db0:	490f      	ldr	r1, [pc, #60]	; (12df0 <hci_driver_open+0x244>)
   12db2:	4810      	ldr	r0, [pc, #64]	; (12df4 <hci_driver_open+0x248>)
   12db4:	f7ed fa7c 	bl	2b0 <sdc_enable>
	if (err) {
   12db8:	4604      	mov	r4, r0
   12dba:	b910      	cbnz	r0, 12dc2 <hci_driver_open+0x216>
	MULTITHREADING_LOCK_RELEASE();
   12dbc:	f7ff fca8 	bl	12710 <multithreading_lock_release>
	return 0;
   12dc0:	e772      	b.n	12ca8 <hci_driver_open+0xfc>
		MULTITHREADING_LOCK_RELEASE();
   12dc2:	f7ff fca5 	bl	12710 <multithreading_lock_release>
		return err;
   12dc6:	e76f      	b.n	12ca8 <hci_driver_open+0xfc>
   12dc8:	0001853f 	.word	0x0001853f
   12dcc:	20002128 	.word	0x20002128
   12dd0:	0001ae98 	.word	0x0001ae98
   12dd4:	0001ba4c 	.word	0x0001ba4c
   12dd8:	0001b998 	.word	0x0001b998
   12ddc:	0001a0dc 	.word	0x0001a0dc
   12de0:	00019ee0 	.word	0x00019ee0
   12de4:	0001a208 	.word	0x0001a208
   12de8:	0001b9c0 	.word	0x0001b9c0
   12dec:	0001b9e4 	.word	0x0001b9e4
   12df0:	200019c8 	.word	0x200019c8
   12df4:	00012b0d 	.word	0x00012b0d

00012df8 <configure_memory_usage>:
{
   12df8:	b5b0      	push	{r4, r5, r7, lr}
   12dfa:	b082      	sub	sp, #8
   12dfc:	af00      	add	r7, sp, #0
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   12dfe:	2000      	movs	r0, #0
   12e00:	7138      	strb	r0, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12e02:	1d3a      	adds	r2, r7, #4
   12e04:	2101      	movs	r1, #1
   12e06:	f7ed f9f1 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
   12e0a:	2800      	cmp	r0, #0
   12e0c:	db2b      	blt.n	12e66 <configure_memory_usage+0x6e>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   12e0e:	2108      	movs	r1, #8
   12e10:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12e12:	1d3a      	adds	r2, r7, #4
   12e14:	2000      	movs	r0, #0
   12e16:	f7ed f9e9 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
   12e1a:	2800      	cmp	r0, #0
   12e1c:	db23      	blt.n	12e66 <configure_memory_usage+0x6e>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   12e1e:	231b      	movs	r3, #27
   12e20:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   12e22:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   12e24:	2302      	movs	r3, #2
   12e26:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   12e28:	2103      	movs	r1, #3
   12e2a:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12e2c:	1d3a      	adds	r2, r7, #4
   12e2e:	2000      	movs	r0, #0
   12e30:	f7ed f9dc 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
   12e34:	2800      	cmp	r0, #0
   12e36:	db16      	blt.n	12e66 <configure_memory_usage+0x6e>
	cfg.event_length.event_length_us =
   12e38:	f641 534c 	movw	r3, #7500	; 0x1d4c
   12e3c:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12e3e:	1d3a      	adds	r2, r7, #4
   12e40:	2104      	movs	r1, #4
   12e42:	2000      	movs	r0, #0
   12e44:	f7ed f9d2 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
   12e48:	2800      	cmp	r0, #0
   12e4a:	db0c      	blt.n	12e66 <configure_memory_usage+0x6e>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   12e4c:	2303      	movs	r3, #3
   12e4e:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12e50:	1d3a      	adds	r2, r7, #4
   12e52:	2106      	movs	r1, #6
   12e54:	2000      	movs	r0, #0
   12e56:	f7ed f9c9 	bl	1ec <sdc_cfg_set>
		if (required_memory < 0) {
   12e5a:	2800      	cmp	r0, #0
   12e5c:	db03      	blt.n	12e66 <configure_memory_usage+0x6e>
	if (required_memory > sizeof(sdc_mempool)) {
   12e5e:	f5b0 7fc2 	cmp.w	r0, #388	; 0x184
   12e62:	d803      	bhi.n	12e6c <configure_memory_usage+0x74>
	return 0;
   12e64:	2000      	movs	r0, #0
}
   12e66:	3708      	adds	r7, #8
   12e68:	46bd      	mov	sp, r7
   12e6a:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   12e6c:	466c      	mov	r4, sp
   12e6e:	b08a      	sub	sp, #40	; 0x28
   12e70:	466b      	mov	r3, sp
   12e72:	f113 0210 	adds.w	r2, r3, #16
   12e76:	d042      	beq.n	12efe <configure_memory_usage+0x106>
   12e78:	2114      	movs	r1, #20
   12e7a:	b19a      	cbz	r2, 12ea4 <configure_memory_usage+0xac>
   12e7c:	468c      	mov	ip, r1
   12e7e:	2904      	cmp	r1, #4
   12e80:	dd01      	ble.n	12e86 <configure_memory_usage+0x8e>
   12e82:	4d22      	ldr	r5, [pc, #136]	; (12f0c <configure_memory_usage+0x114>)
   12e84:	615d      	str	r5, [r3, #20]
   12e86:	f1bc 0f08 	cmp.w	ip, #8
   12e8a:	dd01      	ble.n	12e90 <configure_memory_usage+0x98>
   12e8c:	4d20      	ldr	r5, [pc, #128]	; (12f10 <configure_memory_usage+0x118>)
   12e8e:	619d      	str	r5, [r3, #24]
   12e90:	f1bc 0f0c 	cmp.w	ip, #12
   12e94:	dd02      	ble.n	12e9c <configure_memory_usage+0xa4>
   12e96:	f44f 75c2 	mov.w	r5, #388	; 0x184
   12e9a:	61dd      	str	r5, [r3, #28]
   12e9c:	f1bc 0f10 	cmp.w	ip, #16
   12ea0:	dd00      	ble.n	12ea4 <configure_memory_usage+0xac>
   12ea2:	6218      	str	r0, [r3, #32]
   12ea4:	2913      	cmp	r1, #19
   12ea6:	dd2d      	ble.n	12f04 <configure_memory_usage+0x10c>
   12ea8:	f04f 0c14 	mov.w	ip, #20
   12eac:	b13a      	cbz	r2, 12ebe <configure_memory_usage+0xc6>
   12eae:	2105      	movs	r1, #5
   12eb0:	7039      	strb	r1, [r7, #0]
   12eb2:	2100      	movs	r1, #0
   12eb4:	7079      	strb	r1, [r7, #1]
   12eb6:	70b9      	strb	r1, [r7, #2]
   12eb8:	70f9      	strb	r1, [r7, #3]
   12eba:	6838      	ldr	r0, [r7, #0]
   12ebc:	6118      	str	r0, [r3, #16]
   12ebe:	2100      	movs	r1, #0
   12ec0:	f36f 0100 	bfc	r1, #0, #1
   12ec4:	f36f 0141 	bfc	r1, #1, #1
   12ec8:	f36f 0182 	bfc	r1, #2, #1
   12ecc:	f36f 01c5 	bfc	r1, #3, #3
   12ed0:	2301      	movs	r3, #1
   12ed2:	f363 1188 	bfi	r1, r3, #6, #3
   12ed6:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   12eda:	f36c 2153 	bfi	r1, ip, #9, #11
   12ede:	f36f 511f 	bfc	r1, #20, #12
   12ee2:	2300      	movs	r3, #0
   12ee4:	480b      	ldr	r0, [pc, #44]	; (12f14 <configure_memory_usage+0x11c>)
   12ee6:	f7f8 ffbf 	bl	be68 <z_impl_z_log_msg_static_create>
   12eea:	46a5      	mov	sp, r4
		k_panic();
   12eec:	4040      	eors	r0, r0
   12eee:	f380 8811 	msr	BASEPRI, r0
   12ef2:	f04f 0004 	mov.w	r0, #4
   12ef6:	df02      	svc	2
		return -ENOMEM;
   12ef8:	f06f 000b 	mvn.w	r0, #11
   12efc:	e7b3      	b.n	12e66 <configure_memory_usage+0x6e>
		LOG_ERR("Allocated memory too low: %u < %u",
   12efe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12f02:	e7ba      	b.n	12e7a <configure_memory_usage+0x82>
   12f04:	f06f 0c1b 	mvn.w	ip, #27
   12f08:	e7d0      	b.n	12eac <configure_memory_usage+0xb4>
   12f0a:	bf00      	nop
   12f0c:	0001ba0c 	.word	0x0001ba0c
   12f10:	0001ba34 	.word	0x0001ba34
   12f14:	0001a0dc 	.word	0x0001a0dc

00012f18 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   12f18:	b508      	push	{r3, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
   12f1a:	4806      	ldr	r0, [pc, #24]	; (12f34 <hci_driver_init+0x1c>)
   12f1c:	f7fd f93e 	bl	1019c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   12f20:	4805      	ldr	r0, [pc, #20]	; (12f38 <hci_driver_init+0x20>)
   12f22:	f7ed f9ef 	bl	304 <sdc_init>

	err = configure_supported_features();
   12f26:	f005 fb02 	bl	1852e <configure_supported_features>
	if (err) {
   12f2a:	b100      	cbz	r0, 12f2e <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   12f2c:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   12f2e:	f7ff ff63 	bl	12df8 <configure_memory_usage>
	if (err) {
   12f32:	e7fb      	b.n	12f2c <hci_driver_init+0x14>
   12f34:	0001bae8 	.word	0x0001bae8
   12f38:	000127cd 	.word	0x000127cd

00012f3c <hci_driver_receive_process>:
{
   12f3c:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   12f3e:	4805      	ldr	r0, [pc, #20]	; (12f54 <hci_driver_receive_process+0x18>)
   12f40:	f7ff fd78 	bl	12a34 <fetch_and_process_hci_msg>
   12f44:	b900      	cbnz	r0, 12f48 <hci_driver_receive_process+0xc>
}
   12f46:	bd08      	pop	{r3, pc}
   12f48:	4903      	ldr	r1, [pc, #12]	; (12f58 <hci_driver_receive_process+0x1c>)
   12f4a:	4804      	ldr	r0, [pc, #16]	; (12f5c <hci_driver_receive_process+0x20>)
   12f4c:	f006 fb38 	bl	195c0 <k_work_submit_to_queue>
   12f50:	e7f9      	b.n	12f46 <hci_driver_receive_process+0xa>
   12f52:	bf00      	nop
   12f54:	200020e0 	.word	0x200020e0
   12f58:	20002128 	.word	0x20002128
   12f5c:	20001b50 	.word	0x20001b50

00012f60 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   12f60:	f242 0332 	movw	r3, #8242	; 0x2032
   12f64:	4298      	cmp	r0, r3
   12f66:	d04a      	beq.n	12ffe <command_generates_command_complete_event+0x9e>
   12f68:	d82d      	bhi.n	12fc6 <command_generates_command_complete_event+0x66>
   12f6a:	f242 0326 	movw	r3, #8230	; 0x2026
   12f6e:	4298      	cmp	r0, r3
   12f70:	d847      	bhi.n	13002 <command_generates_command_complete_event+0xa2>
   12f72:	f242 030d 	movw	r3, #8205	; 0x200d
   12f76:	4298      	cmp	r0, r3
   12f78:	d218      	bcs.n	12fac <command_generates_command_complete_event+0x4c>
   12f7a:	f240 4306 	movw	r3, #1030	; 0x406
   12f7e:	4298      	cmp	r0, r3
   12f80:	d041      	beq.n	13006 <command_generates_command_complete_event+0xa6>
   12f82:	f240 431d 	movw	r3, #1053	; 0x41d
   12f86:	4298      	cmp	r0, r3
   12f88:	d001      	beq.n	12f8e <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   12f8a:	2001      	movs	r0, #1
   12f8c:	4770      	bx	lr
	switch (hci_opcode) {
   12f8e:	2000      	movs	r0, #0
   12f90:	4770      	bx	lr
   12f92:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   12f96:	382d      	subs	r0, #45	; 0x2d
   12f98:	b280      	uxth	r0, r0
   12f9a:	4b1e      	ldr	r3, [pc, #120]	; (13014 <command_generates_command_complete_event+0xb4>)
   12f9c:	40c3      	lsrs	r3, r0
   12f9e:	f013 0f01 	tst.w	r3, #1
   12fa2:	d101      	bne.n	12fa8 <command_generates_command_complete_event+0x48>
		return true;
   12fa4:	2001      	movs	r0, #1
   12fa6:	4770      	bx	lr
	switch (hci_opcode) {
   12fa8:	2000      	movs	r0, #0
   12faa:	4770      	bx	lr
   12fac:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   12fb0:	380d      	subs	r0, #13
   12fb2:	b280      	uxth	r0, r0
   12fb4:	4b18      	ldr	r3, [pc, #96]	; (13018 <command_generates_command_complete_event+0xb8>)
   12fb6:	40c3      	lsrs	r3, r0
   12fb8:	f013 0f01 	tst.w	r3, #1
   12fbc:	d101      	bne.n	12fc2 <command_generates_command_complete_event+0x62>
		return true;
   12fbe:	2001      	movs	r0, #1
   12fc0:	4770      	bx	lr
	switch (hci_opcode) {
   12fc2:	2000      	movs	r0, #0
   12fc4:	4770      	bx	lr
   12fc6:	f242 0385 	movw	r3, #8325	; 0x2085
   12fca:	4298      	cmp	r0, r3
   12fcc:	d80b      	bhi.n	12fe6 <command_generates_command_complete_event+0x86>
   12fce:	f242 036d 	movw	r3, #8301	; 0x206d
   12fd2:	4298      	cmp	r0, r3
   12fd4:	d2dd      	bcs.n	12f92 <command_generates_command_complete_event+0x32>
   12fd6:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   12fda:	3803      	subs	r0, #3
   12fdc:	b280      	uxth	r0, r0
   12fde:	2801      	cmp	r0, #1
   12fe0:	d913      	bls.n	1300a <command_generates_command_complete_event+0xaa>
		return true;
   12fe2:	2001      	movs	r0, #1
   12fe4:	4770      	bx	lr
	switch (hci_opcode) {
   12fe6:	f64f 5302 	movw	r3, #64770	; 0xfd02
   12fea:	4298      	cmp	r0, r3
   12fec:	d00f      	beq.n	1300e <command_generates_command_complete_event+0xae>
   12fee:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   12ff2:	4298      	cmp	r0, r3
   12ff4:	d001      	beq.n	12ffa <command_generates_command_complete_event+0x9a>
		return true;
   12ff6:	2001      	movs	r0, #1
	}
}
   12ff8:	4770      	bx	lr
	switch (hci_opcode) {
   12ffa:	2000      	movs	r0, #0
   12ffc:	4770      	bx	lr
   12ffe:	2000      	movs	r0, #0
   13000:	4770      	bx	lr
		return true;
   13002:	2001      	movs	r0, #1
   13004:	4770      	bx	lr
	switch (hci_opcode) {
   13006:	2000      	movs	r0, #0
   13008:	4770      	bx	lr
   1300a:	2000      	movs	r0, #0
   1300c:	4770      	bx	lr
   1300e:	2000      	movs	r0, #0
   13010:	4770      	bx	lr
   13012:	bf00      	nop
   13014:	01000401 	.word	0x01000401
   13018:	03001241 	.word	0x03001241

0001301c <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   1301c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1301e:	b083      	sub	sp, #12
   13020:	4607      	mov	r7, r0
   13022:	460e      	mov	r6, r1
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   13024:	7843      	ldrb	r3, [r0, #1]
   13026:	7805      	ldrb	r5, [r0, #0]
   13028:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1302c:	2304      	movs	r3, #4
   1302e:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   13032:	4b31      	ldr	r3, [pc, #196]	; (130f8 <cmd_put+0xdc>)
   13034:	681c      	ldr	r4, [r3, #0]
   13036:	b13c      	cbz	r4, 13048 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   13038:	f10d 0307 	add.w	r3, sp, #7
   1303c:	f10d 0206 	add.w	r2, sp, #6
   13040:	47a0      	blx	r4
   13042:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   13044:	2801      	cmp	r0, #1
   13046:	d11f      	bne.n	13088 <cmd_put+0x6c>

		switch (BT_OGF(opcode)) {
   13048:	0aab      	lsrs	r3, r5, #10
   1304a:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1304e:	d209      	bcs.n	13064 <cmd_put+0x48>
   13050:	2b03      	cmp	r3, #3
   13052:	d345      	bcc.n	130e0 <cmd_put+0xc4>
   13054:	3b03      	subs	r3, #3
   13056:	2b05      	cmp	r3, #5
   13058:	d844      	bhi.n	130e4 <cmd_put+0xc8>
   1305a:	e8df f003 	tbb	[pc, r3]
   1305e:	2921      	.short	0x2921
   13060:	39434331 	.word	0x39434331
   13064:	2b3f      	cmp	r3, #63	; 0x3f
   13066:	d107      	bne.n	13078 <cmd_put+0x5c>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   13068:	f10d 0206 	add.w	r2, sp, #6
   1306c:	4631      	mov	r1, r6
   1306e:	4638      	mov	r0, r7
   13070:	f005 fc25 	bl	188be <vs_cmd_put>
   13074:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   13076:	e000      	b.n	1307a <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
   13078:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   1307a:	4628      	mov	r0, r5
   1307c:	f7ff ff70 	bl	12f60 <command_generates_command_complete_event>
   13080:	f080 0001 	eor.w	r0, r0, #1
   13084:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   13088:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1308c:	b90b      	cbnz	r3, 13092 <cmd_put+0x76>
   1308e:	2c01      	cmp	r4, #1
   13090:	d12a      	bne.n	130e8 <cmd_put+0xcc>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   13092:	4622      	mov	r2, r4
   13094:	4629      	mov	r1, r5
   13096:	4630      	mov	r0, r6
   13098:	f005 fa55 	bl	18546 <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   1309c:	b003      	add	sp, #12
   1309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = controller_and_baseband_cmd_put(cmd_in,
   130a0:	f10d 0206 	add.w	r2, sp, #6
   130a4:	4631      	mov	r1, r6
   130a6:	4638      	mov	r0, r7
   130a8:	f005 fa68 	bl	1857c <controller_and_baseband_cmd_put>
   130ac:	4604      	mov	r4, r0
			break;
   130ae:	e7e4      	b.n	1307a <cmd_put+0x5e>
			status = info_param_cmd_put(cmd_in,
   130b0:	f10d 0206 	add.w	r2, sp, #6
   130b4:	4631      	mov	r1, r6
   130b6:	4638      	mov	r0, r7
   130b8:	f005 faf3 	bl	186a2 <info_param_cmd_put>
   130bc:	4604      	mov	r4, r0
			break;
   130be:	e7dc      	b.n	1307a <cmd_put+0x5e>
			status = status_param_cmd_put(cmd_in,
   130c0:	f10d 0206 	add.w	r2, sp, #6
   130c4:	4631      	mov	r1, r6
   130c6:	4638      	mov	r0, r7
   130c8:	f005 fa56 	bl	18578 <status_param_cmd_put>
   130cc:	4604      	mov	r4, r0
			break;
   130ce:	e7d4      	b.n	1307a <cmd_put+0x5e>
			status = le_controller_cmd_put(cmd_in,
   130d0:	f10d 0206 	add.w	r2, sp, #6
   130d4:	4631      	mov	r1, r6
   130d6:	4638      	mov	r0, r7
   130d8:	f005 fb71 	bl	187be <le_controller_cmd_put>
   130dc:	4604      	mov	r4, r0
			break;
   130de:	e7cc      	b.n	1307a <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
   130e0:	2401      	movs	r4, #1
   130e2:	e7ca      	b.n	1307a <cmd_put+0x5e>
   130e4:	2401      	movs	r4, #1
   130e6:	e7c8      	b.n	1307a <cmd_put+0x5e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   130e8:	4623      	mov	r3, r4
   130ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
   130ee:	4629      	mov	r1, r5
   130f0:	4630      	mov	r0, r6
   130f2:	f005 fa31 	bl	18558 <encode_command_complete_header>
}
   130f6:	e7d1      	b.n	1309c <cmd_put+0x80>
   130f8:	20002138 	.word	0x20002138

000130fc <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   130fc:	b538      	push	{r3, r4, r5, lr}
   130fe:	7842      	ldrb	r2, [r0, #1]
   13100:	7803      	ldrb	r3, [r0, #0]
   13102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13106:	b21c      	sxth	r4, r3
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   13108:	4b0e      	ldr	r3, [pc, #56]	; (13144 <hci_internal_cmd_put+0x48>)
   1310a:	781b      	ldrb	r3, [r3, #0]
   1310c:	b9b3      	cbnz	r3, 1313c <hci_internal_cmd_put+0x40>
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1310e:	4d0e      	ldr	r5, [pc, #56]	; (13148 <hci_internal_cmd_put+0x4c>)
   13110:	4629      	mov	r1, r5
   13112:	f7ff ff83 	bl	1301c <cmd_put>
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
   13116:	2301      	movs	r3, #1
   13118:	f805 3c01 	strb.w	r3, [r5, #-1]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1311c:	f242 0383 	movw	r3, #8323	; 0x2083
   13120:	429c      	cmp	r4, r3
   13122:	d001      	beq.n	13128 <hci_internal_cmd_put+0x2c>
		 */

		cmd_complete_or_status.occurred = false;
	}

	return 0;
   13124:	2000      	movs	r0, #0
}
   13126:	bd38      	pop	{r3, r4, r5, pc}
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
   13128:	1e6b      	subs	r3, r5, #1
   1312a:	785b      	ldrb	r3, [r3, #1]
		&&
   1312c:	2b0e      	cmp	r3, #14
   1312e:	d001      	beq.n	13134 <hci_internal_cmd_put+0x38>
	return 0;
   13130:	2000      	movs	r0, #0
   13132:	e7f8      	b.n	13126 <hci_internal_cmd_put+0x2a>
		cmd_complete_or_status.occurred = false;
   13134:	2000      	movs	r0, #0
   13136:	1e6b      	subs	r3, r5, #1
   13138:	7018      	strb	r0, [r3, #0]
   1313a:	e7f4      	b.n	13126 <hci_internal_cmd_put+0x2a>
		return -NRF_EPERM;
   1313c:	f04f 30ff 	mov.w	r0, #4294967295
   13140:	e7f1      	b.n	13126 <hci_internal_cmd_put+0x2a>
   13142:	bf00      	nop
   13144:	2000213c 	.word	0x2000213c
   13148:	2000213d 	.word	0x2000213d

0001314c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1314c:	b538      	push	{r3, r4, r5, lr}
   1314e:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <hci_internal_msg_get+0x28>)
   13152:	781b      	ldrb	r3, [r3, #0]
   13154:	b913      	cbnz	r3, 1315c <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   13156:	f7f5 fc34 	bl	89c2 <sdc_hci_get>
}
   1315a:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1315c:	4d05      	ldr	r5, [pc, #20]	; (13174 <hci_internal_msg_get+0x28>)
   1315e:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   13160:	3202      	adds	r2, #2
   13162:	1c69      	adds	r1, r5, #1
   13164:	f004 fa51 	bl	1760a <memcpy>
		cmd_complete_or_status.occurred = false;
   13168:	2000      	movs	r0, #0
   1316a:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1316c:	2304      	movs	r3, #4
   1316e:	7023      	strb	r3, [r4, #0]
		return 0;
   13170:	e7f3      	b.n	1315a <hci_internal_msg_get+0xe>
   13172:	bf00      	nop
   13174:	2000213c 	.word	0x2000213c

00013178 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   13178:	b538      	push	{r3, r4, r5, lr}
   1317a:	4605      	mov	r5, r0
   1317c:	460c      	mov	r4, r1
   1317e:	4809      	ldr	r0, [pc, #36]	; (131a4 <bt_rand+0x2c>)
   13180:	f005 ffe5 	bl	1914e <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   13184:	f080 0301 	eor.w	r3, r0, #1
   13188:	f013 0fff 	tst.w	r3, #255	; 0xff
   1318c:	d106      	bne.n	1319c <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1318e:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   13190:	4804      	ldr	r0, [pc, #16]	; (131a4 <bt_rand+0x2c>)
   13192:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   13194:	681b      	ldr	r3, [r3, #0]
   13196:	4629      	mov	r1, r5
   13198:	4798      	blx	r3
}
   1319a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1319c:	f06f 0012 	mvn.w	r0, #18
   131a0:	e7fb      	b.n	1319a <bt_rand+0x22>
   131a2:	bf00      	nop
   131a4:	00019ee0 	.word	0x00019ee0

000131a8 <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   131a8:	b500      	push	{lr}
   131aa:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   131ac:	f005 fbfe 	bl	189ac <m_config_clock_source_get>
   131b0:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   131b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   131b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   131bc:	2300      	movs	r3, #0
   131be:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
   131c2:	2310      	movs	r3, #16
   131c4:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   131c8:	2302      	movs	r3, #2
   131ca:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   131ce:	4a04      	ldr	r2, [pc, #16]	; (131e0 <mpsl_lib_init_internal+0x38>)
   131d0:	2119      	movs	r1, #25
   131d2:	4668      	mov	r0, sp
   131d4:	f7f4 fdb6 	bl	7d44 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   131d8:	b003      	add	sp, #12
   131da:	f85d fb04 	ldr.w	pc, [sp], #4
   131de:	bf00      	nop
   131e0:	000131e5 	.word	0x000131e5

000131e4 <m_assert_handler>:
{
   131e4:	b5b0      	push	{r4, r5, r7, lr}
   131e6:	b082      	sub	sp, #8
   131e8:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   131ea:	466c      	mov	r4, sp
   131ec:	2301      	movs	r3, #1
   131ee:	713b      	strb	r3, [r7, #4]
   131f0:	2303      	movs	r3, #3
   131f2:	717b      	strb	r3, [r7, #5]
   131f4:	b08a      	sub	sp, #40	; 0x28
   131f6:	46ec      	mov	ip, sp
   131f8:	f11c 0210 	adds.w	r2, ip, #16
   131fc:	d021      	beq.n	13242 <m_assert_handler+0x5e>
   131fe:	f04f 0e16 	mov.w	lr, #22
   13202:	b15a      	cbz	r2, 1321c <m_assert_handler+0x38>
   13204:	4673      	mov	r3, lr
   13206:	f1be 0f04 	cmp.w	lr, #4
   1320a:	dd02      	ble.n	13212 <m_assert_handler+0x2e>
   1320c:	4d2c      	ldr	r5, [pc, #176]	; (132c0 <m_assert_handler+0xdc>)
   1320e:	f8cc 5014 	str.w	r5, [ip, #20]
   13212:	2b08      	cmp	r3, #8
   13214:	dd02      	ble.n	1321c <m_assert_handler+0x38>
   13216:	4b2b      	ldr	r3, [pc, #172]	; (132c4 <m_assert_handler+0xe0>)
   13218:	f8cc 3018 	str.w	r3, [ip, #24]
   1321c:	2301      	movs	r3, #1
   1321e:	703b      	strb	r3, [r7, #0]
   13220:	2303      	movs	r3, #3
   13222:	707b      	strb	r3, [r7, #1]
   13224:	b1d2      	cbz	r2, 1325c <m_assert_handler+0x78>
   13226:	4673      	mov	r3, lr
   13228:	f1be 0f0c 	cmp.w	lr, #12
   1322c:	dd01      	ble.n	13232 <m_assert_handler+0x4e>
   1322e:	f8cc 001c 	str.w	r0, [ip, #28]
   13232:	2b10      	cmp	r3, #16
   13234:	dd01      	ble.n	1323a <m_assert_handler+0x56>
   13236:	f8cc 1020 	str.w	r1, [ip, #32]
   1323a:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   1323e:	2100      	movs	r1, #0
   13240:	e00a      	b.n	13258 <m_assert_handler+0x74>
   13242:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   13246:	e7dc      	b.n	13202 <m_assert_handler+0x1e>
   13248:	f101 0008 	add.w	r0, r1, #8
   1324c:	4438      	add	r0, r7
   1324e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   13252:	f803 0b01 	strb.w	r0, [r3], #1
   13256:	3101      	adds	r1, #1
   13258:	2901      	cmp	r1, #1
   1325a:	d9f5      	bls.n	13248 <m_assert_handler+0x64>
   1325c:	f1be 0f15 	cmp.w	lr, #21
   13260:	dd2b      	ble.n	132ba <m_assert_handler+0xd6>
   13262:	2316      	movs	r3, #22
   13264:	b14a      	cbz	r2, 1327a <m_assert_handler+0x96>
   13266:	2105      	movs	r1, #5
   13268:	7139      	strb	r1, [r7, #4]
   1326a:	2100      	movs	r1, #0
   1326c:	7179      	strb	r1, [r7, #5]
   1326e:	71b9      	strb	r1, [r7, #6]
   13270:	2101      	movs	r1, #1
   13272:	71f9      	strb	r1, [r7, #7]
   13274:	6878      	ldr	r0, [r7, #4]
   13276:	f8cc 0010 	str.w	r0, [ip, #16]
   1327a:	2100      	movs	r1, #0
   1327c:	f36f 0100 	bfc	r1, #0, #1
   13280:	f36f 0141 	bfc	r1, #1, #1
   13284:	f36f 0182 	bfc	r1, #2, #1
   13288:	f36f 01c5 	bfc	r1, #3, #3
   1328c:	2001      	movs	r0, #1
   1328e:	f360 1188 	bfi	r1, r0, #6, #3
   13292:	f3c3 030a 	ubfx	r3, r3, #0, #11
   13296:	f363 2153 	bfi	r1, r3, #9, #11
   1329a:	f36f 511f 	bfc	r1, #20, #12
   1329e:	2300      	movs	r3, #0
   132a0:	4809      	ldr	r0, [pc, #36]	; (132c8 <m_assert_handler+0xe4>)
   132a2:	f7f8 fde1 	bl	be68 <z_impl_z_log_msg_static_create>
   132a6:	46a5      	mov	sp, r4
	k_oops();
   132a8:	4040      	eors	r0, r0
   132aa:	f380 8811 	msr	BASEPRI, r0
   132ae:	f04f 0003 	mov.w	r0, #3
   132b2:	df02      	svc	2
}
   132b4:	3708      	adds	r7, #8
   132b6:	46bd      	mov	sp, r7
   132b8:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   132ba:	f06f 031b 	mvn.w	r3, #27
   132be:	e7d1      	b.n	13264 <m_assert_handler+0x80>
   132c0:	0001bb10 	.word	0x0001bb10
   132c4:	0001bb34 	.word	0x0001bb34
   132c8:	0001a124 	.word	0x0001a124

000132cc <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(void)
{
   132cc:	b530      	push	{r4, r5, lr}
   132ce:	b083      	sub	sp, #12

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   132d0:	4d0d      	ldr	r5, [pc, #52]	; (13308 <mpsl_low_prio_init+0x3c>)
   132d2:	2400      	movs	r4, #0
   132d4:	9400      	str	r4, [sp, #0]
   132d6:	f06f 0309 	mvn.w	r3, #9
   132da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   132de:	490b      	ldr	r1, [pc, #44]	; (1330c <mpsl_low_prio_init+0x40>)
   132e0:	4628      	mov	r0, r5
   132e2:	f001 fe35 	bl	14f50 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   132e6:	490a      	ldr	r1, [pc, #40]	; (13310 <mpsl_low_prio_init+0x44>)
   132e8:	4628      	mov	r0, r5
   132ea:	f001 fb07 	bl	148fc <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   132ee:	4909      	ldr	r1, [pc, #36]	; (13314 <mpsl_low_prio_init+0x48>)
   132f0:	4809      	ldr	r0, [pc, #36]	; (13318 <mpsl_low_prio_init+0x4c>)
   132f2:	f006 f949 	bl	19588 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   132f6:	4622      	mov	r2, r4
   132f8:	2104      	movs	r1, #4
   132fa:	2019      	movs	r0, #25
   132fc:	f004 f8c6 	bl	1748c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   13300:	4620      	mov	r0, r4
   13302:	b003      	add	sp, #12
   13304:	bd30      	pop	{r4, r5, pc}
   13306:	bf00      	nop
   13308:	20001b50 	.word	0x20001b50
   1330c:	200034c0 	.word	0x200034c0
   13310:	0001bb28 	.word	0x0001bb28
   13314:	00018a35 	.word	0x00018a35
   13318:	20002184 	.word	0x20002184

0001331c <mpsl_low_prio_irq_handler>:
{
   1331c:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1331e:	4902      	ldr	r1, [pc, #8]	; (13328 <mpsl_low_prio_irq_handler+0xc>)
   13320:	4802      	ldr	r0, [pc, #8]	; (1332c <mpsl_low_prio_irq_handler+0x10>)
   13322:	f006 f94d 	bl	195c0 <k_work_submit_to_queue>
}
   13326:	bd08      	pop	{r3, pc}
   13328:	20002184 	.word	0x20002184
   1332c:	20001b50 	.word	0x20001b50

00013330 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   13330:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   13332:	4b02      	ldr	r3, [pc, #8]	; (1333c <mpsl_hfclk_callback+0xc>)
   13334:	681b      	ldr	r3, [r3, #0]
   13336:	2000      	movs	r0, #0
   13338:	4798      	blx	r3
}
   1333a:	bd08      	pop	{r3, pc}
   1333c:	20002194 	.word	0x20002194

00013340 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   13340:	b508      	push	{r3, lr}
	switch (domain) {
   13342:	b128      	cbz	r0, 13350 <nrfx_clock_start+0x10>
   13344:	2801      	cmp	r0, #1
   13346:	d102      	bne.n	1334e <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   13348:	4804      	ldr	r0, [pc, #16]	; (1335c <nrfx_clock_start+0x1c>)
   1334a:	f7f4 fb7b 	bl	7a44 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1334e:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13350:	4b03      	ldr	r3, [pc, #12]	; (13360 <nrfx_clock_start+0x20>)
   13352:	681b      	ldr	r3, [r3, #0]
   13354:	2001      	movs	r0, #1
   13356:	4798      	blx	r3
}
   13358:	e7f9      	b.n	1334e <nrfx_clock_start+0xe>
   1335a:	bf00      	nop
   1335c:	00013331 	.word	0x00013331
   13360:	20002194 	.word	0x20002194

00013364 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   13364:	4b01      	ldr	r3, [pc, #4]	; (1336c <nrfx_clock_init+0x8>)
   13366:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   13368:	4801      	ldr	r0, [pc, #4]	; (13370 <nrfx_clock_init+0xc>)
   1336a:	4770      	bx	lr
   1336c:	20002194 	.word	0x20002194
   13370:	0bad0000 	.word	0x0bad0000

00013374 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   13374:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13378:	4905      	ldr	r1, [pc, #20]	; (13390 <__NVIC_SystemReset+0x1c>)
   1337a:	68ca      	ldr	r2, [r1, #12]
   1337c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13380:	4b04      	ldr	r3, [pc, #16]	; (13394 <__NVIC_SystemReset+0x20>)
   13382:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13384:	60cb      	str	r3, [r1, #12]
   13386:	f3bf 8f4f 	dsb	sy
    __NOP();
   1338a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1338c:	e7fd      	b.n	1338a <__NVIC_SystemReset+0x16>
   1338e:	bf00      	nop
   13390:	e000ed00 	.word	0xe000ed00
   13394:	05fa0004 	.word	0x05fa0004

00013398 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13398:	4b02      	ldr	r3, [pc, #8]	; (133a4 <nvmc_wait+0xc>)
   1339a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1339e:	2b00      	cmp	r3, #0
   133a0:	d0fa      	beq.n	13398 <nvmc_wait>
}
   133a2:	4770      	bx	lr
   133a4:	4001e000 	.word	0x4001e000

000133a8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   133a8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   133aa:	4b03      	ldr	r3, [pc, #12]	; (133b8 <nvmc_config+0x10>)
   133ac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   133b0:	f7ff fff2 	bl	13398 <nvmc_wait>
}
   133b4:	bd08      	pop	{r3, pc}
   133b6:	bf00      	nop
   133b8:	4001e000 	.word	0x4001e000

000133bc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   133bc:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   133be:	f005 fb56 	bl	18a6e <nrf52_errata_12>
   133c2:	b140      	cbz	r0, 133d6 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   133c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   133c8:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   133cc:	f3c3 2304 	ubfx	r3, r3, #8, #5
   133d0:	4a6b      	ldr	r2, [pc, #428]	; (13580 <SystemInit+0x1c4>)
   133d2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   133d6:	f005 fb5c 	bl	18a92 <nrf52_errata_16>
   133da:	b110      	cbz	r0, 133e2 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   133dc:	4b69      	ldr	r3, [pc, #420]	; (13584 <SystemInit+0x1c8>)
   133de:	4a6a      	ldr	r2, [pc, #424]	; (13588 <SystemInit+0x1cc>)
   133e0:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   133e2:	f005 fb6c 	bl	18abe <nrf52_errata_31>
   133e6:	b148      	cbz	r0, 133fc <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   133e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   133ec:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   133f0:	f3c3 3342 	ubfx	r3, r3, #13, #3
   133f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   133f8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   133fc:	f005 fb71 	bl	18ae2 <nrf52_errata_32>
   13400:	b130      	cbz	r0, 13410 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   13402:	4a62      	ldr	r2, [pc, #392]	; (1358c <SystemInit+0x1d0>)
   13404:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   13408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1340c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   13410:	f005 fb7d 	bl	18b0e <nrf52_errata_36>
   13414:	b140      	cbz	r0, 13428 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   13416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1341a:	2200      	movs	r2, #0
   1341c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   13420:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   13424:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   13428:	f005 fb83 	bl	18b32 <nrf52_errata_37>
   1342c:	b120      	cbz	r0, 13438 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1342e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13432:	2203      	movs	r2, #3
   13434:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   13438:	f005 fb91 	bl	18b5e <nrf52_errata_57>
   1343c:	b160      	cbz	r0, 13458 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1343e:	4b54      	ldr	r3, [pc, #336]	; (13590 <SystemInit+0x1d4>)
   13440:	2205      	movs	r2, #5
   13442:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   13446:	2201      	movs	r2, #1
   13448:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1344c:	2200      	movs	r2, #0
   1344e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   13452:	223f      	movs	r2, #63	; 0x3f
   13454:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   13458:	f005 fb97 	bl	18b8a <nrf52_errata_66>
   1345c:	2800      	cmp	r0, #0
   1345e:	d046      	beq.n	134ee <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   13460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13464:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   13468:	4b4a      	ldr	r3, [pc, #296]	; (13594 <SystemInit+0x1d8>)
   1346a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1346e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   13472:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   13476:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1347a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1347e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   13482:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   13486:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1348a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1348e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13492:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   13496:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1349a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1349e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   134a2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   134a6:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   134aa:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   134ae:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   134b2:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   134b6:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   134ba:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   134be:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   134c2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   134c6:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   134ca:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   134ce:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   134d2:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   134d6:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   134da:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   134de:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   134e2:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   134e6:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   134ea:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   134ee:	f005 fb6e 	bl	18bce <nrf52_errata_108>
   134f2:	b148      	cbz	r0, 13508 <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   134f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   134f8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   134fc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   13500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13504:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   13508:	f005 fb73 	bl	18bf2 <nrf52_errata_136>
   1350c:	b160      	cbz	r0, 13528 <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1350e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13512:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   13516:	f013 0f01 	tst.w	r3, #1
   1351a:	d005      	beq.n	13528 <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1351c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13520:	f06f 0201 	mvn.w	r2, #1
   13524:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   13528:	f005 fb75 	bl	18c16 <nrf52_errata_182>
   1352c:	b130      	cbz	r0, 1353c <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1352e:	4a1a      	ldr	r2, [pc, #104]	; (13598 <SystemInit+0x1dc>)
   13530:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   13534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13538:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   1353c:	f005 fb93 	bl	18c66 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13540:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   13548:	2b00      	cmp	r3, #0
   1354a:	db06      	blt.n	1355a <SystemInit+0x19e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1354c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13550:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13554:	2b00      	cmp	r3, #0
   13556:	db00      	blt.n	1355a <SystemInit+0x19e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   13558:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1355a:	2001      	movs	r0, #1
   1355c:	f7ff ff24 	bl	133a8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   13560:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   13564:	2515      	movs	r5, #21
   13566:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1356a:	f7ff ff15 	bl	13398 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1356e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   13572:	f7ff ff11 	bl	13398 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   13576:	2000      	movs	r0, #0
   13578:	f7ff ff16 	bl	133a8 <nvmc_config>
            NVIC_SystemReset();
   1357c:	f7ff fefa 	bl	13374 <__NVIC_SystemReset>
   13580:	40013000 	.word	0x40013000
   13584:	4007c000 	.word	0x4007c000
   13588:	baadf00d 	.word	0xbaadf00d
   1358c:	e000ed00 	.word	0xe000ed00
   13590:	40005000 	.word	0x40005000
   13594:	4000c000 	.word	0x4000c000
   13598:	40001000 	.word	0x40001000

0001359c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1359c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1359e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   135a0:	fab4 f384 	clz	r3, r4
   135a4:	f1c3 031f 	rsb	r3, r3, #31
   135a8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   135ac:	2b00      	cmp	r3, #0
   135ae:	db16      	blt.n	135de <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   135b0:	2201      	movs	r2, #1
   135b2:	fa02 f303 	lsl.w	r3, r2, r3
   135b6:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   135ba:	f3bf 8f5b 	dmb	ish
   135be:	e850 2f00 	ldrex	r2, [r0]
   135c2:	42a2      	cmp	r2, r4
   135c4:	d104      	bne.n	135d0 <nrfx_flag32_alloc+0x34>
   135c6:	e840 3e00 	strex	lr, r3, [r0]
   135ca:	f1be 0f00 	cmp.w	lr, #0
   135ce:	d1f6      	bne.n	135be <nrfx_flag32_alloc+0x22>
   135d0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   135d4:	d1e3      	bne.n	1359e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   135d6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   135da:	4802      	ldr	r0, [pc, #8]	; (135e4 <nrfx_flag32_alloc+0x48>)
}
   135dc:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   135de:	4802      	ldr	r0, [pc, #8]	; (135e8 <nrfx_flag32_alloc+0x4c>)
   135e0:	e7fc      	b.n	135dc <nrfx_flag32_alloc+0x40>
   135e2:	bf00      	nop
   135e4:	0bad0000 	.word	0x0bad0000
   135e8:	0bad0002 	.word	0x0bad0002

000135ec <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   135ec:	6803      	ldr	r3, [r0, #0]
   135ee:	40cb      	lsrs	r3, r1
   135f0:	f013 0f01 	tst.w	r3, #1
   135f4:	d115      	bne.n	13622 <nrfx_flag32_free+0x36>
{
   135f6:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   135f8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   135fa:	2301      	movs	r3, #1
   135fc:	408b      	lsls	r3, r1
   135fe:	4313      	orrs	r3, r2
   13600:	f3bf 8f5b 	dmb	ish
   13604:	e850 cf00 	ldrex	ip, [r0]
   13608:	4594      	cmp	ip, r2
   1360a:	d104      	bne.n	13616 <nrfx_flag32_free+0x2a>
   1360c:	e840 3e00 	strex	lr, r3, [r0]
   13610:	f1be 0f00 	cmp.w	lr, #0
   13614:	d1f6      	bne.n	13604 <nrfx_flag32_free+0x18>
   13616:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1361a:	d1ed      	bne.n	135f8 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   1361c:	4802      	ldr	r0, [pc, #8]	; (13628 <nrfx_flag32_free+0x3c>)
}
   1361e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   13622:	4802      	ldr	r0, [pc, #8]	; (1362c <nrfx_flag32_free+0x40>)
}
   13624:	4770      	bx	lr
   13626:	bf00      	nop
   13628:	0bad0000 	.word	0x0bad0000
   1362c:	0bad0004 	.word	0x0bad0004

00013630 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   13630:	3008      	adds	r0, #8
   13632:	4b03      	ldr	r3, [pc, #12]	; (13640 <pin_in_use+0x10>)
   13634:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13638:	f000 0001 	and.w	r0, r0, #1
   1363c:	4770      	bx	lr
   1363e:	bf00      	nop
   13640:	20000354 	.word	0x20000354

00013644 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   13644:	3008      	adds	r0, #8
   13646:	4b03      	ldr	r3, [pc, #12]	; (13654 <pin_in_use_by_te+0x10>)
   13648:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1364c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   13650:	4770      	bx	lr
   13652:	bf00      	nop
   13654:	20000354 	.word	0x20000354

00013658 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   13658:	3008      	adds	r0, #8
   1365a:	4b04      	ldr	r3, [pc, #16]	; (1366c <pin_has_trigger+0x14>)
   1365c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13660:	f010 001c 	ands.w	r0, r0, #28
   13664:	bf18      	it	ne
   13666:	2001      	movne	r0, #1
   13668:	4770      	bx	lr
   1366a:	bf00      	nop
   1366c:	20000354 	.word	0x20000354

00013670 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13670:	3008      	adds	r0, #8
   13672:	4b03      	ldr	r3, [pc, #12]	; (13680 <pin_is_output+0x10>)
   13674:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13678:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1367c:	4770      	bx	lr
   1367e:	bf00      	nop
   13680:	20000354 	.word	0x20000354

00013684 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13684:	3008      	adds	r0, #8
   13686:	4b02      	ldr	r3, [pc, #8]	; (13690 <pin_te_get+0xc>)
   13688:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1368c:	0b40      	lsrs	r0, r0, #13
   1368e:	4770      	bx	lr
   13690:	20000354 	.word	0x20000354

00013694 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   13694:	2200      	movs	r2, #0
   13696:	e004      	b.n	136a2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   13698:	f04f 33ff 	mov.w	r3, #4294967295
   1369c:	4283      	cmp	r3, r0
   1369e:	d00f      	beq.n	136c0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   136a0:	3201      	adds	r2, #1
   136a2:	2a1f      	cmp	r2, #31
   136a4:	d80a      	bhi.n	136bc <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   136a6:	f102 0308 	add.w	r3, r2, #8
   136aa:	4906      	ldr	r1, [pc, #24]	; (136c4 <handler_in_use+0x30>)
   136ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   136b0:	f413 7f80 	tst.w	r3, #256	; 0x100
   136b4:	d0f0      	beq.n	13698 <handler_in_use+0x4>
   136b6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   136ba:	e7ef      	b.n	1369c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   136bc:	2000      	movs	r0, #0
   136be:	4770      	bx	lr
            return true;
   136c0:	2001      	movs	r0, #1
}
   136c2:	4770      	bx	lr
   136c4:	20000354 	.word	0x20000354

000136c8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   136c8:	2300      	movs	r3, #0
   136ca:	b113      	cbz	r3, 136d2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   136cc:	f04f 30ff 	mov.w	r0, #4294967295
}
   136d0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   136d2:	4a07      	ldr	r2, [pc, #28]	; (136f0 <find_handler+0x28>)
   136d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   136d8:	4282      	cmp	r2, r0
   136da:	d001      	beq.n	136e0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   136dc:	3301      	adds	r3, #1
   136de:	e7f4      	b.n	136ca <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   136e0:	4a03      	ldr	r2, [pc, #12]	; (136f0 <find_handler+0x28>)
   136e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   136e6:	6852      	ldr	r2, [r2, #4]
   136e8:	428a      	cmp	r2, r1
   136ea:	d1f7      	bne.n	136dc <find_handler+0x14>
            return i;
   136ec:	4618      	mov	r0, r3
   136ee:	4770      	bx	lr
   136f0:	20000354 	.word	0x20000354

000136f4 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   136f4:	f100 0208 	add.w	r2, r0, #8
   136f8:	4b0d      	ldr	r3, [pc, #52]	; (13730 <get_initial_sense+0x3c>)
   136fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   136fe:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   13702:	2b04      	cmp	r3, #4
   13704:	d00d      	beq.n	13722 <get_initial_sense+0x2e>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   13706:	2b05      	cmp	r3, #5
   13708:	d00d      	beq.n	13726 <get_initial_sense+0x32>
    *p_pin = pin_number & 0x1F;
   1370a:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
   1370e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13712:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13716:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13718:	f013 0f01 	tst.w	r3, #1
   1371c:	d005      	beq.n	1372a <get_initial_sense+0x36>
   1371e:	2003      	movs	r0, #3
   13720:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
   13722:	2003      	movs	r0, #3
   13724:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   13726:	2002      	movs	r0, #2
   13728:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1372a:	2002      	movs	r0, #2
    }

    return sense;
}
   1372c:	4770      	bx	lr
   1372e:	bf00      	nop
   13730:	20000354 	.word	0x20000354

00013734 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13734:	3008      	adds	r0, #8
   13736:	4b06      	ldr	r3, [pc, #24]	; (13750 <channel_handler_get+0x1c>)
   13738:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1373c:	f410 7f80 	tst.w	r0, #256	; 0x100
   13740:	d004      	beq.n	1374c <channel_handler_get+0x18>
   13742:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   13746:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1374a:	4770      	bx	lr
        return NULL;
   1374c:	2000      	movs	r0, #0
}
   1374e:	4770      	bx	lr
   13750:	20000354 	.word	0x20000354

00013754 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   13754:	b570      	push	{r4, r5, r6, lr}
   13756:	4604      	mov	r4, r0
   13758:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1375a:	f7ff ffeb 	bl	13734 <channel_handler_get>

    if (handler)
   1375e:	b120      	cbz	r0, 1376a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   13760:	6806      	ldr	r6, [r0, #0]
   13762:	6842      	ldr	r2, [r0, #4]
   13764:	4629      	mov	r1, r5
   13766:	4620      	mov	r0, r4
   13768:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1376a:	4b04      	ldr	r3, [pc, #16]	; (1377c <call_handler+0x28>)
   1376c:	689b      	ldr	r3, [r3, #8]
   1376e:	b123      	cbz	r3, 1377a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   13770:	4a02      	ldr	r2, [pc, #8]	; (1377c <call_handler+0x28>)
   13772:	68d2      	ldr	r2, [r2, #12]
   13774:	4629      	mov	r1, r5
   13776:	4620      	mov	r0, r4
   13778:	4798      	blx	r3
    }
}
   1377a:	bd70      	pop	{r4, r5, r6, pc}
   1377c:	20000354 	.word	0x20000354

00013780 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13780:	f100 0208 	add.w	r2, r0, #8
   13784:	4b0e      	ldr	r3, [pc, #56]	; (137c0 <release_handler+0x40>)
   13786:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1378a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1378e:	d016      	beq.n	137be <release_handler+0x3e>
{
   13790:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13792:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   13796:	4610      	mov	r0, r2
   13798:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1379c:	4a08      	ldr	r2, [pc, #32]	; (137c0 <release_handler+0x40>)
   1379e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   137a2:	4620      	mov	r0, r4
   137a4:	f7ff ff76 	bl	13694 <handler_in_use>
   137a8:	b100      	cbz	r0, 137ac <release_handler+0x2c>
}
   137aa:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   137ac:	4804      	ldr	r0, [pc, #16]	; (137c0 <release_handler+0x40>)
   137ae:	2300      	movs	r3, #0
   137b0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   137b4:	4621      	mov	r1, r4
   137b6:	3054      	adds	r0, #84	; 0x54
   137b8:	f7ff ff18 	bl	135ec <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   137bc:	e7f5      	b.n	137aa <release_handler+0x2a>
   137be:	4770      	bx	lr
   137c0:	20000354 	.word	0x20000354

000137c4 <pin_handler_trigger_uninit>:
{
   137c4:	b510      	push	{r4, lr}
   137c6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   137c8:	f7ff ff3c 	bl	13644 <pin_in_use_by_te>
   137cc:	b140      	cbz	r0, 137e0 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   137ce:	4620      	mov	r0, r4
   137d0:	f7ff ff58 	bl	13684 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   137d4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   137d8:	4b06      	ldr	r3, [pc, #24]	; (137f4 <pin_handler_trigger_uninit+0x30>)
   137da:	2200      	movs	r2, #0
   137dc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   137e0:	4620      	mov	r0, r4
   137e2:	f7ff ffcd 	bl	13780 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   137e6:	3408      	adds	r4, #8
   137e8:	4b03      	ldr	r3, [pc, #12]	; (137f8 <pin_handler_trigger_uninit+0x34>)
   137ea:	2200      	movs	r2, #0
   137ec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   137f0:	bd10      	pop	{r4, pc}
   137f2:	bf00      	nop
   137f4:	40006000 	.word	0x40006000
   137f8:	20000354 	.word	0x20000354

000137fc <pin_handler_set>:
{
   137fc:	b570      	push	{r4, r5, r6, lr}
   137fe:	b082      	sub	sp, #8
   13800:	4605      	mov	r5, r0
   13802:	460e      	mov	r6, r1
   13804:	4614      	mov	r4, r2
    release_handler(pin);
   13806:	f7ff ffbb 	bl	13780 <release_handler>
    if (!handler)
   1380a:	b326      	cbz	r6, 13856 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1380c:	4621      	mov	r1, r4
   1380e:	4630      	mov	r0, r6
   13810:	f7ff ff5a 	bl	136c8 <find_handler>
    if (handler_id < 0)
   13814:	1e03      	subs	r3, r0, #0
   13816:	db13      	blt.n	13840 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   13818:	4910      	ldr	r1, [pc, #64]	; (1385c <pin_handler_set+0x60>)
   1381a:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1381e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   13822:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13824:	f105 0008 	add.w	r0, r5, #8
   13828:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   1382c:	025b      	lsls	r3, r3, #9
   1382e:	b29b      	uxth	r3, r3
   13830:	4313      	orrs	r3, r2
   13832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13836:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   1383a:	4809      	ldr	r0, [pc, #36]	; (13860 <pin_handler_set+0x64>)
}
   1383c:	b002      	add	sp, #8
   1383e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   13840:	f10d 0107 	add.w	r1, sp, #7
   13844:	4807      	ldr	r0, [pc, #28]	; (13864 <pin_handler_set+0x68>)
   13846:	f7ff fea9 	bl	1359c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1384a:	4b05      	ldr	r3, [pc, #20]	; (13860 <pin_handler_set+0x64>)
   1384c:	4298      	cmp	r0, r3
   1384e:	d1f5      	bne.n	1383c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   13850:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13854:	e7e0      	b.n	13818 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   13856:	4802      	ldr	r0, [pc, #8]	; (13860 <pin_handler_set+0x64>)
   13858:	e7f0      	b.n	1383c <pin_handler_set+0x40>
   1385a:	bf00      	nop
   1385c:	20000354 	.word	0x20000354
   13860:	0bad0000 	.word	0x0bad0000
   13864:	200003a8 	.word	0x200003a8

00013868 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   13868:	b5f0      	push	{r4, r5, r6, r7, lr}
   1386a:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
   1386c:	2300      	movs	r3, #0
   1386e:	a801      	add	r0, sp, #4
   13870:	e008      	b.n	13884 <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
   13872:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13876:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1387a:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1387e:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   13882:	3301      	adds	r3, #1
   13884:	2b00      	cmp	r3, #0
   13886:	d0f4      	beq.n	13872 <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13888:	2400      	movs	r4, #0
   1388a:	b3a4      	cbz	r4, 138f6 <port_event_handle+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1388c:	4b1e      	ldr	r3, [pc, #120]	; (13908 <port_event_handle+0xa0>)
   1388e:	2200      	movs	r2, #0
   13890:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   13894:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   13898:	a801      	add	r0, sp, #4
   1389a:	f005 faf4 	bl	18e86 <latch_pending_read_and_check>
   1389e:	2800      	cmp	r0, #0
   138a0:	d1f2      	bne.n	13888 <port_event_handle+0x20>
}
   138a2:	b003      	add	sp, #12
   138a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   138a6:	fa90 f0a0 	rbit	r0, r0
   138aa:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   138ae:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   138b2:	f100 0208 	add.w	r2, r0, #8
   138b6:	4b15      	ldr	r3, [pc, #84]	; (1390c <port_event_handle+0xa4>)
   138b8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   138bc:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   138be:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   138c2:	af01      	add	r7, sp, #4
   138c4:	5dba      	ldrb	r2, [r7, r6]
   138c6:	2501      	movs	r5, #1
   138c8:	fa05 f303 	lsl.w	r3, r5, r3
   138cc:	43db      	mvns	r3, r3
   138ce:	b25b      	sxtb	r3, r3
   138d0:	4013      	ands	r3, r2
   138d2:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   138d4:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   138d8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   138dc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   138e0:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   138e4:	f3c2 4201 	ubfx	r2, r2, #16, #2
   138e8:	f3c1 0182 	ubfx	r1, r1, #2, #3
   138ec:	f005 fa7c 	bl	18de8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   138f0:	40bd      	lsls	r5, r7
   138f2:	f8c6 5520 	str.w	r5, [r6, #1312]	; 0x520
            while (latch[i])
   138f6:	ab02      	add	r3, sp, #8
   138f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   138fc:	f853 0c04 	ldr.w	r0, [r3, #-4]
   13900:	2800      	cmp	r0, #0
   13902:	d1d0      	bne.n	138a6 <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13904:	3401      	adds	r4, #1
   13906:	e7c0      	b.n	1388a <port_event_handle+0x22>
   13908:	40006000 	.word	0x40006000
   1390c:	20000354 	.word	0x20000354

00013910 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   13910:	b538      	push	{r3, r4, r5, lr}
   13912:	4604      	mov	r4, r0
    while (mask)
   13914:	e018      	b.n	13948 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   13916:	fa94 f3a4 	rbit	r3, r4
   1391a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1391e:	2201      	movs	r2, #1
   13920:	409a      	lsls	r2, r3
   13922:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13926:	4a0a      	ldr	r2, [pc, #40]	; (13950 <gpiote_evt_handle+0x40>)
   13928:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1392c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   13930:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   13934:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13938:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1393c:	f005 fa4d 	bl	18dda <gpiote_polarity_to_trigger>
   13940:	4601      	mov	r1, r0
   13942:	4628      	mov	r0, r5
   13944:	f7ff ff06 	bl	13754 <call_handler>
    while (mask)
   13948:	2c00      	cmp	r4, #0
   1394a:	d1e4      	bne.n	13916 <gpiote_evt_handle+0x6>
    }
}
   1394c:	bd38      	pop	{r3, r4, r5, pc}
   1394e:	bf00      	nop
   13950:	40006000 	.word	0x40006000

00013954 <nrfx_gpiote_input_configure>:
{
   13954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13958:	b084      	sub	sp, #16
   1395a:	4604      	mov	r4, r0
   1395c:	4615      	mov	r5, r2
   1395e:	461e      	mov	r6, r3
    if (p_input_config)
   13960:	b309      	cbz	r1, 139a6 <nrfx_gpiote_input_configure+0x52>
   13962:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   13964:	f005 fa23 	bl	18dae <pin_is_task_output>
   13968:	2800      	cmp	r0, #0
   1396a:	d13f      	bne.n	139ec <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1396c:	2300      	movs	r3, #0
   1396e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   13972:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   13976:	9301      	str	r3, [sp, #4]
   13978:	9300      	str	r3, [sp, #0]
   1397a:	463b      	mov	r3, r7
   1397c:	f10d 020f 	add.w	r2, sp, #15
   13980:	f10d 010e 	add.w	r1, sp, #14
   13984:	4620      	mov	r0, r4
   13986:	f005 f9ba 	bl	18cfe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1398a:	4a38      	ldr	r2, [pc, #224]	; (13a6c <nrfx_gpiote_input_configure+0x118>)
   1398c:	f104 0108 	add.w	r1, r4, #8
   13990:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13994:	f023 0302 	bic.w	r3, r3, #2
   13998:	b29b      	uxth	r3, r3
   1399a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1399e:	f043 0301 	orr.w	r3, r3, #1
   139a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   139a6:	b1bd      	cbz	r5, 139d8 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   139a8:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   139aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   139ae:	4620      	mov	r0, r4
   139b0:	f7ff fe5e 	bl	13670 <pin_is_output>
   139b4:	b1e0      	cbz	r0, 139f0 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   139b6:	f1b8 0f00 	cmp.w	r8, #0
   139ba:	d151      	bne.n	13a60 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   139bc:	4a2b      	ldr	r2, [pc, #172]	; (13a6c <nrfx_gpiote_input_configure+0x118>)
   139be:	f104 0108 	add.w	r1, r4, #8
   139c2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   139c6:	f023 031c 	bic.w	r3, r3, #28
   139ca:	b29b      	uxth	r3, r3
   139cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   139d0:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   139d4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   139d8:	2e00      	cmp	r6, #0
   139da:	d045      	beq.n	13a68 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   139dc:	6872      	ldr	r2, [r6, #4]
   139de:	6831      	ldr	r1, [r6, #0]
   139e0:	4620      	mov	r0, r4
   139e2:	f7ff ff0b 	bl	137fc <pin_handler_set>
}
   139e6:	b004      	add	sp, #16
   139e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   139ec:	4820      	ldr	r0, [pc, #128]	; (13a70 <nrfx_gpiote_input_configure+0x11c>)
   139ee:	e7fa      	b.n	139e6 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   139f0:	4a1e      	ldr	r2, [pc, #120]	; (13a6c <nrfx_gpiote_input_configure+0x118>)
   139f2:	f104 0108 	add.w	r1, r4, #8
   139f6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   139fa:	f023 0320 	bic.w	r3, r3, #32
   139fe:	04db      	lsls	r3, r3, #19
   13a00:	0cdb      	lsrs	r3, r3, #19
   13a02:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   13a06:	f1b8 0f00 	cmp.w	r8, #0
   13a0a:	d0d7      	beq.n	139bc <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   13a0c:	2f03      	cmp	r7, #3
   13a0e:	d829      	bhi.n	13a64 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   13a10:	686b      	ldr	r3, [r5, #4]
   13a12:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   13a14:	b937      	cbnz	r7, 13a24 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   13a16:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   13a1a:	4b16      	ldr	r3, [pc, #88]	; (13a74 <nrfx_gpiote_input_configure+0x120>)
   13a1c:	2200      	movs	r2, #0
   13a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
   13a22:	e7cb      	b.n	139bc <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   13a24:	4638      	mov	r0, r7
   13a26:	f005 f9d9 	bl	18ddc <gpiote_trigger_to_polarity>
   13a2a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13a2c:	4811      	ldr	r0, [pc, #68]	; (13a74 <nrfx_gpiote_input_configure+0x120>)
   13a2e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   13a32:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   13a36:	f022 0203 	bic.w	r2, r2, #3
   13a3a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   13a3e:	4622      	mov	r2, r4
   13a40:	4629      	mov	r1, r5
   13a42:	f005 f924 	bl	18c8e <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13a46:	4a09      	ldr	r2, [pc, #36]	; (13a6c <nrfx_gpiote_input_configure+0x118>)
   13a48:	f104 0108 	add.w	r1, r4, #8
   13a4c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13a50:	036d      	lsls	r5, r5, #13
   13a52:	b2ad      	uxth	r5, r5
   13a54:	432b      	orrs	r3, r5
   13a56:	f043 0320 	orr.w	r3, r3, #32
   13a5a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   13a5e:	e7ad      	b.n	139bc <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   13a60:	4803      	ldr	r0, [pc, #12]	; (13a70 <nrfx_gpiote_input_configure+0x11c>)
   13a62:	e7c0      	b.n	139e6 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   13a64:	4802      	ldr	r0, [pc, #8]	; (13a70 <nrfx_gpiote_input_configure+0x11c>)
   13a66:	e7be      	b.n	139e6 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   13a68:	4803      	ldr	r0, [pc, #12]	; (13a78 <nrfx_gpiote_input_configure+0x124>)
   13a6a:	e7bc      	b.n	139e6 <nrfx_gpiote_input_configure+0x92>
   13a6c:	20000354 	.word	0x20000354
   13a70:	0bad0004 	.word	0x0bad0004
   13a74:	40006000 	.word	0x40006000
   13a78:	0bad0000 	.word	0x0bad0000

00013a7c <nrfx_gpiote_output_configure>:
{
   13a7c:	b570      	push	{r4, r5, r6, lr}
   13a7e:	b084      	sub	sp, #16
   13a80:	4604      	mov	r4, r0
   13a82:	4615      	mov	r5, r2
    if (p_config)
   13a84:	b329      	cbz	r1, 13ad2 <nrfx_gpiote_output_configure+0x56>
   13a86:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   13a88:	f005 f9a0 	bl	18dcc <pin_is_input>
   13a8c:	b120      	cbz	r0, 13a98 <nrfx_gpiote_output_configure+0x1c>
   13a8e:	4620      	mov	r0, r4
   13a90:	f7ff fdd8 	bl	13644 <pin_in_use_by_te>
   13a94:	2800      	cmp	r0, #0
   13a96:	d138      	bne.n	13b0a <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   13a98:	4620      	mov	r0, r4
   13a9a:	f7ff fddd 	bl	13658 <pin_has_trigger>
   13a9e:	b110      	cbz	r0, 13aa6 <nrfx_gpiote_output_configure+0x2a>
   13aa0:	7873      	ldrb	r3, [r6, #1]
   13aa2:	2b01      	cmp	r3, #1
   13aa4:	d031      	beq.n	13b0a <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   13aa6:	2301      	movs	r3, #1
   13aa8:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   13aac:	2300      	movs	r3, #0
   13aae:	9301      	str	r3, [sp, #4]
   13ab0:	9600      	str	r6, [sp, #0]
   13ab2:	1cb3      	adds	r3, r6, #2
   13ab4:	1c72      	adds	r2, r6, #1
   13ab6:	f10d 010f 	add.w	r1, sp, #15
   13aba:	4620      	mov	r0, r4
   13abc:	f005 f91f 	bl	18cfe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   13ac0:	4a1f      	ldr	r2, [pc, #124]	; (13b40 <nrfx_gpiote_output_configure+0xc4>)
   13ac2:	f104 0108 	add.w	r1, r4, #8
   13ac6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13aca:	f043 0303 	orr.w	r3, r3, #3
   13ace:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   13ad2:	b385      	cbz	r5, 13b36 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   13ad4:	4620      	mov	r0, r4
   13ad6:	f005 f979 	bl	18dcc <pin_is_input>
   13ada:	bb70      	cbnz	r0, 13b3a <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   13adc:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   13ade:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   13ae2:	4b18      	ldr	r3, [pc, #96]	; (13b44 <nrfx_gpiote_output_configure+0xc8>)
   13ae4:	2100      	movs	r1, #0
   13ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   13aea:	4a15      	ldr	r2, [pc, #84]	; (13b40 <nrfx_gpiote_output_configure+0xc4>)
   13aec:	f104 0108 	add.w	r1, r4, #8
   13af0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13af4:	f023 0320 	bic.w	r3, r3, #32
   13af8:	04db      	lsls	r3, r3, #19
   13afa:	0cdb      	lsrs	r3, r3, #19
   13afc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   13b00:	786b      	ldrb	r3, [r5, #1]
   13b02:	b923      	cbnz	r3, 13b0e <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   13b04:	4810      	ldr	r0, [pc, #64]	; (13b48 <nrfx_gpiote_output_configure+0xcc>)
}
   13b06:	b004      	add	sp, #16
   13b08:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   13b0a:	4810      	ldr	r0, [pc, #64]	; (13b4c <nrfx_gpiote_output_configure+0xd0>)
   13b0c:	e7fb      	b.n	13b06 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   13b0e:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   13b10:	9200      	str	r2, [sp, #0]
   13b12:	4622      	mov	r2, r4
   13b14:	4631      	mov	r1, r6
   13b16:	480b      	ldr	r0, [pc, #44]	; (13b44 <nrfx_gpiote_output_configure+0xc8>)
   13b18:	f005 f8d2 	bl	18cc0 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13b1c:	4a08      	ldr	r2, [pc, #32]	; (13b40 <nrfx_gpiote_output_configure+0xc4>)
   13b1e:	3408      	adds	r4, #8
   13b20:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   13b24:	0376      	lsls	r6, r6, #13
   13b26:	b2b6      	uxth	r6, r6
   13b28:	4333      	orrs	r3, r6
   13b2a:	f043 0320 	orr.w	r3, r3, #32
   13b2e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   13b32:	4805      	ldr	r0, [pc, #20]	; (13b48 <nrfx_gpiote_output_configure+0xcc>)
   13b34:	e7e7      	b.n	13b06 <nrfx_gpiote_output_configure+0x8a>
   13b36:	4804      	ldr	r0, [pc, #16]	; (13b48 <nrfx_gpiote_output_configure+0xcc>)
   13b38:	e7e5      	b.n	13b06 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   13b3a:	4804      	ldr	r0, [pc, #16]	; (13b4c <nrfx_gpiote_output_configure+0xd0>)
   13b3c:	e7e3      	b.n	13b06 <nrfx_gpiote_output_configure+0x8a>
   13b3e:	bf00      	nop
   13b40:	20000354 	.word	0x20000354
   13b44:	40006000 	.word	0x40006000
   13b48:	0bad0000 	.word	0x0bad0000
   13b4c:	0bad0004 	.word	0x0bad0004

00013b50 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   13b50:	4b01      	ldr	r3, [pc, #4]	; (13b58 <nrfx_gpiote_global_callback_set+0x8>)
   13b52:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   13b54:	60d9      	str	r1, [r3, #12]
}
   13b56:	4770      	bx	lr
   13b58:	20000354 	.word	0x20000354

00013b5c <nrfx_gpiote_channel_get>:
{
   13b5c:	b538      	push	{r3, r4, r5, lr}
   13b5e:	4604      	mov	r4, r0
   13b60:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   13b62:	f7ff fd6f 	bl	13644 <pin_in_use_by_te>
   13b66:	b140      	cbz	r0, 13b7a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13b68:	f104 0008 	add.w	r0, r4, #8
   13b6c:	4b04      	ldr	r3, [pc, #16]	; (13b80 <nrfx_gpiote_channel_get+0x24>)
   13b6e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   13b72:	0b5b      	lsrs	r3, r3, #13
   13b74:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   13b76:	4803      	ldr	r0, [pc, #12]	; (13b84 <nrfx_gpiote_channel_get+0x28>)
}
   13b78:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13b7a:	4803      	ldr	r0, [pc, #12]	; (13b88 <nrfx_gpiote_channel_get+0x2c>)
   13b7c:	e7fc      	b.n	13b78 <nrfx_gpiote_channel_get+0x1c>
   13b7e:	bf00      	nop
   13b80:	20000354 	.word	0x20000354
   13b84:	0bad0000 	.word	0x0bad0000
   13b88:	0bad0004 	.word	0x0bad0004

00013b8c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13b8c:	4b0f      	ldr	r3, [pc, #60]	; (13bcc <nrfx_gpiote_init+0x40>)
   13b8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   13b92:	b10b      	cbz	r3, 13b98 <nrfx_gpiote_init+0xc>
        return err_code;
   13b94:	480e      	ldr	r0, [pc, #56]	; (13bd0 <nrfx_gpiote_init+0x44>)
}
   13b96:	4770      	bx	lr
{
   13b98:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   13b9a:	4c0e      	ldr	r4, [pc, #56]	; (13bd4 <nrfx_gpiote_init+0x48>)
   13b9c:	2240      	movs	r2, #64	; 0x40
   13b9e:	2100      	movs	r1, #0
   13ba0:	4620      	mov	r0, r4
   13ba2:	f003 fd61 	bl	17668 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   13ba6:	2006      	movs	r0, #6
   13ba8:	f003 fc66 	bl	17478 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13bac:	4b0a      	ldr	r3, [pc, #40]	; (13bd8 <nrfx_gpiote_init+0x4c>)
   13bae:	2200      	movs	r2, #0
   13bb0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   13bb4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   13bb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   13bbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   13bc0:	2301      	movs	r3, #1
   13bc2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   13bc6:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
   13bc8:	4804      	ldr	r0, [pc, #16]	; (13bdc <nrfx_gpiote_init+0x50>)
}
   13bca:	bd10      	pop	{r4, pc}
   13bcc:	20000354 	.word	0x20000354
   13bd0:	0bad0005 	.word	0x0bad0005
   13bd4:	20000364 	.word	0x20000364
   13bd8:	40006000 	.word	0x40006000
   13bdc:	0bad0000 	.word	0x0bad0000

00013be0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   13be0:	4b03      	ldr	r3, [pc, #12]	; (13bf0 <nrfx_gpiote_is_init+0x10>)
   13be2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   13be6:	3800      	subs	r0, #0
   13be8:	bf18      	it	ne
   13bea:	2001      	movne	r0, #1
   13bec:	4770      	bx	lr
   13bee:	bf00      	nop
   13bf0:	20000354 	.word	0x20000354

00013bf4 <nrfx_gpiote_channel_free>:
{
   13bf4:	b508      	push	{r3, lr}
   13bf6:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   13bf8:	4801      	ldr	r0, [pc, #4]	; (13c00 <nrfx_gpiote_channel_free+0xc>)
   13bfa:	f7ff fcf7 	bl	135ec <nrfx_flag32_free>
}
   13bfe:	bd08      	pop	{r3, pc}
   13c00:	200003a4 	.word	0x200003a4

00013c04 <nrfx_gpiote_channel_alloc>:
{
   13c04:	b508      	push	{r3, lr}
   13c06:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   13c08:	4801      	ldr	r0, [pc, #4]	; (13c10 <nrfx_gpiote_channel_alloc+0xc>)
   13c0a:	f7ff fcc7 	bl	1359c <nrfx_flag32_alloc>
}
   13c0e:	bd08      	pop	{r3, pc}
   13c10:	200003a4 	.word	0x200003a4

00013c14 <nrfx_gpiote_trigger_enable>:
{
   13c14:	b538      	push	{r3, r4, r5, lr}
   13c16:	4604      	mov	r4, r0
   13c18:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13c1a:	f7ff fd13 	bl	13644 <pin_in_use_by_te>
   13c1e:	b300      	cbz	r0, 13c62 <nrfx_gpiote_trigger_enable+0x4e>
   13c20:	4620      	mov	r0, r4
   13c22:	f005 f8d3 	bl	18dcc <pin_is_input>
   13c26:	b1e0      	cbz	r0, 13c62 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   13c28:	4620      	mov	r0, r4
   13c2a:	f7ff fd2b 	bl	13684 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   13c2e:	0083      	lsls	r3, r0, #2
   13c30:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   13c34:	b29b      	uxth	r3, r3
   13c36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13c3a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13c3e:	2200      	movs	r2, #0
   13c40:	601a      	str	r2, [r3, #0]
   13c42:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   13c44:	4a10      	ldr	r2, [pc, #64]	; (13c88 <nrfx_gpiote_trigger_enable+0x74>)
   13c46:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   13c4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   13c4e:	f043 0301 	orr.w	r3, r3, #1
   13c52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   13c56:	b1ad      	cbz	r5, 13c84 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   13c58:	2301      	movs	r3, #1
   13c5a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   13c5c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   13c60:	e010      	b.n	13c84 <nrfx_gpiote_trigger_enable+0x70>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   13c62:	4620      	mov	r0, r4
   13c64:	f7ff fd46 	bl	136f4 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
   13c68:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13c6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13c70:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   13c74:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   13c78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13c7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   13c80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   13c84:	bd38      	pop	{r3, r4, r5, pc}
   13c86:	bf00      	nop
   13c88:	40006000 	.word	0x40006000

00013c8c <nrfx_gpiote_trigger_disable>:
{
   13c8c:	b510      	push	{r4, lr}
   13c8e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13c90:	f7ff fcd8 	bl	13644 <pin_in_use_by_te>
   13c94:	b1a0      	cbz	r0, 13cc0 <nrfx_gpiote_trigger_disable+0x34>
   13c96:	4620      	mov	r0, r4
   13c98:	f005 f898 	bl	18dcc <pin_is_input>
   13c9c:	b180      	cbz	r0, 13cc0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   13c9e:	4620      	mov	r0, r4
   13ca0:	f7ff fcf0 	bl	13684 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   13ca4:	2201      	movs	r2, #1
   13ca6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   13ca8:	4b0c      	ldr	r3, [pc, #48]	; (13cdc <nrfx_gpiote_trigger_disable+0x50>)
   13caa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13cae:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   13cb2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   13cb6:	f022 0203 	bic.w	r2, r2, #3
   13cba:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   13cbe:	e00b      	b.n	13cd8 <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
   13cc0:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13cc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13cc8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   13ccc:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   13cd0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   13cd4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   13cd8:	bd10      	pop	{r4, pc}
   13cda:	bf00      	nop
   13cdc:	40006000 	.word	0x40006000

00013ce0 <nrfx_gpiote_pin_uninit>:
{
   13ce0:	b510      	push	{r4, lr}
   13ce2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   13ce4:	f7ff fca4 	bl	13630 <pin_in_use>
   13ce8:	b908      	cbnz	r0, 13cee <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   13cea:	4809      	ldr	r0, [pc, #36]	; (13d10 <nrfx_gpiote_pin_uninit+0x30>)
}
   13cec:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   13cee:	4620      	mov	r0, r4
   13cf0:	f7ff ffcc 	bl	13c8c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   13cf4:	4620      	mov	r0, r4
   13cf6:	f7ff fd65 	bl	137c4 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   13cfa:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   13cfe:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   13d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13d06:	2202      	movs	r2, #2
   13d08:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   13d0c:	4801      	ldr	r0, [pc, #4]	; (13d14 <nrfx_gpiote_pin_uninit+0x34>)
   13d0e:	e7ed      	b.n	13cec <nrfx_gpiote_pin_uninit+0xc>
   13d10:	0bad0004 	.word	0x0bad0004
   13d14:	0bad0000 	.word	0x0bad0000

00013d18 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   13d18:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   13d1a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   13d1c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13d20:	2100      	movs	r1, #0
    uint32_t status = 0;
   13d22:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13d24:	e003      	b.n	13d2e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   13d26:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   13d28:	3304      	adds	r3, #4
   13d2a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13d2c:	3101      	adds	r1, #1
   13d2e:	2907      	cmp	r1, #7
   13d30:	d814      	bhi.n	13d5c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d32:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   13d36:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   13d3a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   13d3c:	2a00      	cmp	r2, #0
   13d3e:	d0f2      	beq.n	13d26 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   13d40:	4a0c      	ldr	r2, [pc, #48]	; (13d74 <nrfx_gpiote_irq_handler+0x5c>)
   13d42:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   13d46:	4210      	tst	r0, r2
   13d48:	d0ed      	beq.n	13d26 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   13d4a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   13d4e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13d52:	2500      	movs	r5, #0
   13d54:	6015      	str	r5, [r2, #0]
   13d56:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   13d58:	4304      	orrs	r4, r0
   13d5a:	e7e4      	b.n	13d26 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d5c:	4b05      	ldr	r3, [pc, #20]	; (13d74 <nrfx_gpiote_irq_handler+0x5c>)
   13d5e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   13d62:	b91b      	cbnz	r3, 13d6c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   13d64:	4620      	mov	r0, r4
   13d66:	f7ff fdd3 	bl	13910 <gpiote_evt_handle>
}
   13d6a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   13d6c:	f7ff fd7c 	bl	13868 <port_event_handle>
   13d70:	e7f8      	b.n	13d64 <nrfx_gpiote_irq_handler+0x4c>
   13d72:	bf00      	nop
   13d74:	40006000 	.word	0x40006000

00013d78 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   13d78:	b508      	push	{r3, lr}
   13d7a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   13d7c:	4801      	ldr	r0, [pc, #4]	; (13d84 <nrfx_ppi_channel_alloc+0xc>)
   13d7e:	f7ff fc0d 	bl	1359c <nrfx_flag32_alloc>
}
   13d82:	bd08      	pop	{r3, pc}
   13d84:	200003b0 	.word	0x200003b0

00013d88 <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
   13d88:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   13d8a:	f010 0f01 	tst.w	r0, #1
   13d8e:	d108      	bne.n	13da2 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   13d90:	4806      	ldr	r0, [pc, #24]	; (13dac <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   13d92:	f013 0f02 	tst.w	r3, #2
   13d96:	d000      	beq.n	13d9a <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   13d98:	4805      	ldr	r0, [pc, #20]	; (13db0 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   13d9a:	f013 0f04 	tst.w	r3, #4
   13d9e:	d102      	bne.n	13da6 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   13da0:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   13da2:	4804      	ldr	r0, [pc, #16]	; (13db4 <twi_process_error+0x2c>)
   13da4:	e7f5      	b.n	13d92 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   13da6:	4804      	ldr	r0, [pc, #16]	; (13db8 <twi_process_error+0x30>)
    return ret;
   13da8:	e7fa      	b.n	13da0 <twi_process_error+0x18>
   13daa:	bf00      	nop
   13dac:	0bad0001 	.word	0x0bad0001
   13db0:	0bae0001 	.word	0x0bae0001
   13db4:	0bae0000 	.word	0x0bae0000
   13db8:	0bae0002 	.word	0x0bae0002

00013dbc <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   13dbc:	b530      	push	{r4, r5, lr}
   13dbe:	b083      	sub	sp, #12
   13dc0:	4604      	mov	r4, r0
   13dc2:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   13dc4:	4b29      	ldr	r3, [pc, #164]	; (13e6c <twi_tx_start_transfer+0xb0>)
   13dc6:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13dc8:	2300      	movs	r3, #0
   13dca:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   13dce:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   13dd2:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   13dd6:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   13dda:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   13dde:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   13de2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   13de6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   13dea:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   13dee:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   13df0:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13df4:	2301      	movs	r3, #1
   13df6:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   13df8:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   13dfc:	2b01      	cmp	r3, #1
   13dfe:	d001      	beq.n	13e04 <twi_tx_start_transfer+0x48>
   13e00:	2301      	movs	r3, #1
   13e02:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   13e04:	4629      	mov	r1, r5
   13e06:	4620      	mov	r0, r4
   13e08:	f005 f864 	bl	18ed4 <twi_send_byte>

    if (p_cb->handler)
   13e0c:	682b      	ldr	r3, [r5, #0]
   13e0e:	b15b      	cbz	r3, 13e28 <twi_tx_start_transfer+0x6c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   13e10:	f240 2386 	movw	r3, #646	; 0x286
   13e14:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   13e16:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   13e18:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13e1c:	4814      	ldr	r0, [pc, #80]	; (13e70 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   13e1e:	b003      	add	sp, #12
   13e20:	bd30      	pop	{r4, r5, pc}
            hw_timeout--;
   13e22:	9b01      	ldr	r3, [sp, #4]
   13e24:	3b01      	subs	r3, #1
   13e26:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   13e28:	9b01      	ldr	r3, [sp, #4]
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	dd05      	ble.n	13e3a <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
   13e2e:	4629      	mov	r1, r5
   13e30:	4620      	mov	r0, r4
   13e32:	f005 f89e 	bl	18f72 <twi_transfer>
        while ((hw_timeout > 0) &&
   13e36:	2800      	cmp	r0, #0
   13e38:	d1f3      	bne.n	13e22 <twi_tx_start_transfer+0x66>
        if (p_cb->error)
   13e3a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13e3e:	b13b      	cbz	r3, 13e50 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
   13e40:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   13e44:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   13e48:	b170      	cbz	r0, 13e68 <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
   13e4a:	f7ff ff9d 	bl	13d88 <twi_process_error>
   13e4e:	e000      	b.n	13e52 <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13e50:	4807      	ldr	r0, [pc, #28]	; (13e70 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
   13e52:	9b01      	ldr	r3, [sp, #4]
   13e54:	2b00      	cmp	r3, #0
   13e56:	dce2      	bgt.n	13e1e <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   13e58:	2300      	movs	r3, #0
   13e5a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   13e5e:	2305      	movs	r3, #5
   13e60:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   13e64:	4803      	ldr	r0, [pc, #12]	; (13e74 <twi_tx_start_transfer+0xb8>)
    return ret_code;
   13e66:	e7da      	b.n	13e1e <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   13e68:	4802      	ldr	r0, [pc, #8]	; (13e74 <twi_tx_start_transfer+0xb8>)
   13e6a:	e7f2      	b.n	13e52 <twi_tx_start_transfer+0x96>
   13e6c:	000186a0 	.word	0x000186a0
   13e70:	0bad0000 	.word	0x0bad0000
   13e74:	0bad0001 	.word	0x0bad0001

00013e78 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   13e78:	b530      	push	{r4, r5, lr}
   13e7a:	b083      	sub	sp, #12
   13e7c:	4604      	mov	r4, r0
   13e7e:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   13e80:	4b2d      	ldr	r3, [pc, #180]	; (13f38 <twi_rx_start_transfer+0xc0>)
   13e82:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e84:	2300      	movs	r3, #0
   13e86:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   13e8a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   13e8e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   13e92:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   13e96:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   13e9a:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   13e9e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   13ea2:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   13ea6:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   13ea8:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   13eac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   13eae:	2b01      	cmp	r3, #1
   13eb0:	d015      	beq.n	13ede <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   13eb2:	2301      	movs	r3, #1
   13eb4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13eb8:	2301      	movs	r3, #1
   13eba:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   13ebc:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   13ec0:	2b02      	cmp	r3, #2
   13ec2:	d001      	beq.n	13ec8 <twi_rx_start_transfer+0x50>
   13ec4:	2301      	movs	r3, #1
   13ec6:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   13ec8:	682b      	ldr	r3, [r5, #0]
   13eca:	b19b      	cbz	r3, 13ef4 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   13ecc:	f240 2386 	movw	r3, #646	; 0x286
   13ed0:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   13ed2:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   13ed4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13ed8:	4818      	ldr	r0, [pc, #96]	; (13f3c <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   13eda:	b003      	add	sp, #12
   13edc:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   13ede:	6a0b      	ldr	r3, [r1, #32]
   13ee0:	f013 0f40 	tst.w	r3, #64	; 0x40
   13ee4:	d1e5      	bne.n	13eb2 <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
   13ee6:	2302      	movs	r3, #2
   13ee8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   13eec:	e7e4      	b.n	13eb8 <twi_rx_start_transfer+0x40>
               hw_timeout--;
   13eee:	9b01      	ldr	r3, [sp, #4]
   13ef0:	3b01      	subs	r3, #1
   13ef2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   13ef4:	9b01      	ldr	r3, [sp, #4]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	dd05      	ble.n	13f06 <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
   13efa:	4629      	mov	r1, r5
   13efc:	4620      	mov	r0, r4
   13efe:	f005 f838 	bl	18f72 <twi_transfer>
        while ((hw_timeout > 0) &&
   13f02:	2800      	cmp	r0, #0
   13f04:	d1f3      	bne.n	13eee <twi_rx_start_transfer+0x76>
        if (p_cb->error)
   13f06:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13f0a:	b13b      	cbz	r3, 13f1c <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
   13f0c:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   13f10:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   13f14:	b170      	cbz	r0, 13f34 <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
   13f16:	f7ff ff37 	bl	13d88 <twi_process_error>
   13f1a:	e000      	b.n	13f1e <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13f1c:	4807      	ldr	r0, [pc, #28]	; (13f3c <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
   13f1e:	9b01      	ldr	r3, [sp, #4]
   13f20:	2b00      	cmp	r3, #0
   13f22:	dcda      	bgt.n	13eda <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   13f24:	2300      	movs	r3, #0
   13f26:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   13f2a:	2305      	movs	r3, #5
   13f2c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   13f30:	4803      	ldr	r0, [pc, #12]	; (13f40 <twi_rx_start_transfer+0xc8>)
    return ret_code;
   13f32:	e7d2      	b.n	13eda <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   13f34:	4802      	ldr	r0, [pc, #8]	; (13f40 <twi_rx_start_transfer+0xc8>)
   13f36:	e7f2      	b.n	13f1e <twi_rx_start_transfer+0xa6>
   13f38:	000186a0 	.word	0x000186a0
   13f3c:	0bad0000 	.word	0x0bad0000
   13f40:	0bad0001 	.word	0x0bad0001

00013f44 <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
   13f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f46:	4607      	mov	r7, r0
   13f48:	460c      	mov	r4, r1
   13f4a:	4694      	mov	ip, r2
   13f4c:	461e      	mov	r6, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   13f4e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   13f52:	2b01      	cmp	r3, #1
   13f54:	d02c      	beq.n	13fb0 <twi_xfer+0x6c>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   13f56:	2b02      	cmp	r3, #2
   13f58:	d02f      	beq.n	13fba <twi_xfer+0x76>
    p_reg->INTENCLR = mask;
   13f5a:	4b27      	ldr	r3, [pc, #156]	; (13ff8 <twi_xfer+0xb4>)
   13f5c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
   13f60:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   13f64:	bb7b      	cbnz	r3, 13fc6 <twi_xfer+0x82>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   13f66:	f016 0f04 	tst.w	r6, #4
   13f6a:	bf0c      	ite	eq
   13f6c:	2301      	moveq	r3, #1
   13f6e:	2300      	movne	r3, #0
   13f70:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
   13f74:	6226      	str	r6, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   13f76:	f104 0e0c 	add.w	lr, r4, #12
   13f7a:	4665      	mov	r5, ip
   13f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13f7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   13f82:	682b      	ldr	r3, [r5, #0]
   13f84:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   13f88:	f8dc 3004 	ldr.w	r3, [ip, #4]
   13f8c:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   13f8e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   13f92:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
   13f94:	f89c 3001 	ldrb.w	r3, [ip, #1]
    p_reg->ADDRESS = address;
   13f98:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   13f9c:	f89c 3000 	ldrb.w	r3, [ip]
   13fa0:	2b01      	cmp	r3, #1
   13fa2:	d021      	beq.n	13fe8 <twi_xfer+0xa4>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   13fa4:	b9a3      	cbnz	r3, 13fd0 <twi_xfer+0x8c>
   13fa6:	f016 0f20 	tst.w	r6, #32
   13faa:	d01b      	beq.n	13fe4 <twi_xfer+0xa0>
   13fac:	2301      	movs	r3, #1
   13fae:	e010      	b.n	13fd2 <twi_xfer+0x8e>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   13fb0:	7812      	ldrb	r2, [r2, #0]
   13fb2:	2a01      	cmp	r2, #1
   13fb4:	d1cf      	bne.n	13f56 <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
   13fb6:	4811      	ldr	r0, [pc, #68]	; (13ffc <twi_xfer+0xb8>)
   13fb8:	e013      	b.n	13fe2 <twi_xfer+0x9e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   13fba:	f89c 3000 	ldrb.w	r3, [ip]
   13fbe:	2b01      	cmp	r3, #1
   13fc0:	d0cb      	beq.n	13f5a <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
   13fc2:	480e      	ldr	r0, [pc, #56]	; (13ffc <twi_xfer+0xb8>)
   13fc4:	e00d      	b.n	13fe2 <twi_xfer+0x9e>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   13fc6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   13fc8:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
        return err_code;
   13fcc:	480c      	ldr	r0, [pc, #48]	; (14000 <twi_xfer+0xbc>)
   13fce:	e008      	b.n	13fe2 <twi_xfer+0x9e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   13fd0:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   13fd2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
   13fd6:	4621      	mov	r1, r4
   13fd8:	4638      	mov	r0, r7
   13fda:	f7ff feef 	bl	13dbc <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
   13fde:	6823      	ldr	r3, [r4, #0]
   13fe0:	b13b      	cbz	r3, 13ff2 <twi_xfer+0xae>
    {
        p_cb->busy = false;
    }
    return err_code;
}
   13fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   13fe4:	2300      	movs	r3, #0
   13fe6:	e7f4      	b.n	13fd2 <twi_xfer+0x8e>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   13fe8:	4621      	mov	r1, r4
   13fea:	4638      	mov	r0, r7
   13fec:	f7ff ff44 	bl	13e78 <twi_rx_start_transfer>
   13ff0:	e7f5      	b.n	13fde <twi_xfer+0x9a>
        p_cb->busy = false;
   13ff2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   13ff6:	e7f4      	b.n	13fe2 <twi_xfer+0x9e>
   13ff8:	00044286 	.word	0x00044286
   13ffc:	0bad0005 	.word	0x0bad0005
   14000:	0bad000b 	.word	0x0bad000b

00014004 <nrfx_twi_init>:
{
   14004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14006:	7904      	ldrb	r4, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   14008:	6806      	ldr	r6, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1400a:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
   1400e:	4d26      	ldr	r5, [pc, #152]	; (140a8 <nrfx_twi_init+0xa4>)
   14010:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
   14014:	f89c 502e 	ldrb.w	r5, [ip, #46]	; 0x2e
   14018:	2d00      	cmp	r5, #0
   1401a:	d143      	bne.n	140a4 <nrfx_twi_init+0xa0>
    p_cb->handler         = event_handler;
   1401c:	4d22      	ldr	r5, [pc, #136]	; (140a8 <nrfx_twi_init+0xa4>)
   1401e:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
   14022:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
    p_cb->p_context       = p_context;
   14026:	f8cc 3004 	str.w	r3, [ip, #4]
    p_cb->int_mask        = 0;
   1402a:	2300      	movs	r3, #0
   1402c:	f8cc 3008 	str.w	r3, [ip, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   14030:	f88c 302d 	strb.w	r3, [ip, #45]	; 0x2d
    p_cb->repeated        = false;
   14034:	f88c 3031 	strb.w	r3, [ip, #49]	; 0x31
    p_cb->busy            = false;
   14038:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1403c:	7b4b      	ldrb	r3, [r1, #13]
   1403e:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   14042:	7b8b      	ldrb	r3, [r1, #14]
   14044:	f88c 3039 	strb.w	r3, [ip, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   14048:	b98b      	cbnz	r3, 1406e <nrfx_twi_init+0x6a>
        TWI_PIN_INIT(p_config->scl);
   1404a:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1404c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14050:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   14054:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14058:	f240 670c 	movw	r7, #1548	; 0x60c
   1405c:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   14060:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
   14062:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14066:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1406a:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1406e:	7bcb      	ldrb	r3, [r1, #15]
   14070:	b92b      	cbnz	r3, 1407e <nrfx_twi_init+0x7a>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   14072:	680d      	ldr	r5, [r1, #0]
   14074:	684b      	ldr	r3, [r1, #4]
    p_reg->PSELSCL = scl_pin;
   14076:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   1407a:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   1407e:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   14080:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
    if (p_cb->handler)
   14084:	b122      	cbz	r2, 14090 <nrfx_twi_init+0x8c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   14086:	6800      	ldr	r0, [r0, #0]
   14088:	f340 3007 	sbfx	r0, r0, #12, #8
   1408c:	f003 f9f4 	bl	17478 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14090:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   14094:	4b04      	ldr	r3, [pc, #16]	; (140a8 <nrfx_twi_init+0xa4>)
   14096:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1409a:	2201      	movs	r2, #1
   1409c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    return err_code;
   140a0:	4802      	ldr	r0, [pc, #8]	; (140ac <nrfx_twi_init+0xa8>)
}
   140a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   140a4:	4802      	ldr	r0, [pc, #8]	; (140b0 <nrfx_twi_init+0xac>)
   140a6:	e7fc      	b.n	140a2 <nrfx_twi_init+0x9e>
   140a8:	20002198 	.word	0x20002198
   140ac:	0bad0000 	.word	0x0bad0000
   140b0:	0bad0005 	.word	0x0bad0005

000140b4 <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   140b4:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   140b6:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   140b8:	2105      	movs	r1, #5
   140ba:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   140be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   140c2:	4a03      	ldr	r2, [pc, #12]	; (140d0 <nrfx_twi_enable+0x1c>)
   140c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   140c8:	2202      	movs	r2, #2
   140ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   140ce:	4770      	bx	lr
   140d0:	20002198 	.word	0x20002198

000140d4 <nrfx_twi_disable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   140d4:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   140d6:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   140d8:	490b      	ldr	r1, [pc, #44]	; (14108 <nrfx_twi_disable+0x34>)
   140da:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   140de:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   140e2:	f021 0103 	bic.w	r1, r1, #3
   140e6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   140ea:	2000      	movs	r0, #0
   140ec:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   140f0:	4a06      	ldr	r2, [pc, #24]	; (1410c <nrfx_twi_disable+0x38>)
   140f2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   140f6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   140fa:	f04f 0c01 	mov.w	ip, #1
   140fe:	f881 c02e 	strb.w	ip, [r1, #46]	; 0x2e
    p_cb->busy = false;
   14102:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
   14106:	4770      	bx	lr
   14108:	00044286 	.word	0x00044286
   1410c:	20002198 	.word	0x20002198

00014110 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   14110:	b508      	push	{r3, lr}
   14112:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14114:	f890 c004 	ldrb.w	ip, [r0, #4]
   14118:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1411c:	460a      	mov	r2, r1
   1411e:	4903      	ldr	r1, [pc, #12]	; (1412c <nrfx_twi_xfer+0x1c>)
   14120:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   14124:	6800      	ldr	r0, [r0, #0]
   14126:	f7ff ff0d 	bl	13f44 <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1412a:	bd08      	pop	{r3, pc}
   1412c:	20002198 	.word	0x20002198

00014130 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   14130:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
   14132:	4902      	ldr	r1, [pc, #8]	; (1413c <nrfx_twi_0_irq_handler+0xc>)
   14134:	4802      	ldr	r0, [pc, #8]	; (14140 <nrfx_twi_0_irq_handler+0x10>)
   14136:	f004 ff98 	bl	1906a <twi_irq_handler>
}
   1413a:	bd08      	pop	{r3, pc}
   1413c:	20002198 	.word	0x20002198
   14140:	40003000 	.word	0x40003000

00014144 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   14144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   14148:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1414c:	f04f 0801 	mov.w	r8, #1
   14150:	fa08 f600 	lsl.w	r6, r8, r0
    p_reg->OUTSET = set_mask;
   14154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14158:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1415c:	f001 071f 	and.w	r7, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14160:	fa08 f807 	lsl.w	r8, r8, r7
    p_reg->OUTSET = set_mask;
   14164:	f8c3 8508 	str.w	r8, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   14168:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   1416c:	f240 620d 	movw	r2, #1549	; 0x60d
   14170:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   14174:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
   14178:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1417c:	2004      	movs	r0, #4
   1417e:	f004 fd82 	bl	18c86 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   14182:	2400      	movs	r4, #0
   14184:	2c08      	cmp	r4, #8
   14186:	d816      	bhi.n	141b6 <nrfx_twi_twim_bus_recover+0x72>
    return p_reg->IN;
   14188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1418c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14190:	40fb      	lsrs	r3, r7
    {
        if (nrf_gpio_pin_read(sda_pin))
   14192:	f013 0f01 	tst.w	r3, #1
   14196:	d10e      	bne.n	141b6 <nrfx_twi_twim_bus_recover+0x72>
    p_reg->OUTCLR = clr_mask;
   14198:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   1419c:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   141a0:	2004      	movs	r0, #4
   141a2:	f004 fd70 	bl	18c86 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   141a6:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   141aa:	2004      	movs	r0, #4
   141ac:	f004 fd6b 	bl	18c86 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   141b0:	3401      	adds	r4, #1
   141b2:	b2e4      	uxtb	r4, r4
   141b4:	e7e6      	b.n	14184 <nrfx_twi_twim_bus_recover+0x40>
    p_reg->OUTCLR = clr_mask;
   141b6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   141ba:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   141be:	2004      	movs	r0, #4
   141c0:	f004 fd61 	bl	18c86 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   141c4:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   141c8:	2004      	movs	r0, #4
   141ca:	f004 fd5c 	bl	18c86 <nrfx_busy_wait>
    return p_reg->IN;
   141ce:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   141d2:	40fb      	lsrs	r3, r7

    if (nrf_gpio_pin_read(sda_pin))
   141d4:	f013 0f01 	tst.w	r3, #1
   141d8:	d002      	beq.n	141e0 <nrfx_twi_twim_bus_recover+0x9c>
    {
        return NRFX_SUCCESS;
   141da:	4802      	ldr	r0, [pc, #8]	; (141e4 <nrfx_twi_twim_bus_recover+0xa0>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   141dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INTERNAL;
   141e0:	4801      	ldr	r0, [pc, #4]	; (141e8 <nrfx_twi_twim_bus_recover+0xa4>)
   141e2:	e7fb      	b.n	141dc <nrfx_twi_twim_bus_recover+0x98>
   141e4:	0bad0000 	.word	0x0bad0000
   141e8:	0bad0001 	.word	0x0bad0001

000141ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   141ec:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   141ee:	4c11      	ldr	r4, [pc, #68]	; (14234 <_DoInit+0x48>)
   141f0:	2303      	movs	r3, #3
   141f2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   141f4:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   141f6:	4a10      	ldr	r2, [pc, #64]	; (14238 <_DoInit+0x4c>)
   141f8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   141fa:	4b10      	ldr	r3, [pc, #64]	; (1423c <_DoInit+0x50>)
   141fc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   141fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14202:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   14204:	2300      	movs	r3, #0
   14206:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   14208:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1420a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1420c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1420e:	4a0c      	ldr	r2, [pc, #48]	; (14240 <_DoInit+0x54>)
   14210:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   14212:	2210      	movs	r2, #16
   14214:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   14216:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   14218:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1421a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1421c:	4909      	ldr	r1, [pc, #36]	; (14244 <_DoInit+0x58>)
   1421e:	1de0      	adds	r0, r4, #7
   14220:	f003 f9aa 	bl	17578 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   14224:	4908      	ldr	r1, [pc, #32]	; (14248 <_DoInit+0x5c>)
   14226:	4620      	mov	r0, r4
   14228:	f003 f9a6 	bl	17578 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1422c:	2320      	movs	r3, #32
   1422e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   14230:	bd10      	pop	{r4, pc}
   14232:	bf00      	nop
   14234:	200025e4 	.word	0x200025e4
   14238:	0001bb78 	.word	0x0001bb78
   1423c:	200021e4 	.word	0x200021e4
   14240:	200021d4 	.word	0x200021d4
   14244:	0001bb84 	.word	0x0001bb84
   14248:	0001bb88 	.word	0x0001bb88

0001424c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14250:	4604      	mov	r4, r0
   14252:	460e      	mov	r6, r1
   14254:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   14256:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1425a:	4a2d      	ldr	r2, [pc, #180]	; (14310 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1425c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   14260:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   14262:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   14264:	42bb      	cmp	r3, r7
   14266:	d84c      	bhi.n	14302 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   14268:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1426c:	4a28      	ldr	r2, [pc, #160]	; (14310 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1426e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   14272:	f8d2 8020 	ldr.w	r8, [r2, #32]
   14276:	eba8 0907 	sub.w	r9, r8, r7
   1427a:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1427e:	4295      	cmp	r5, r2
   14280:	d904      	bls.n	1428c <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   14282:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   14284:	429d      	cmp	r5, r3
   14286:	d916      	bls.n	142b6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   14288:	2000      	movs	r0, #0
   1428a:	e03f      	b.n	1430c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1428c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 14310 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   14290:	1c63      	adds	r3, r4, #1
   14292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14296:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1429a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1429c:	462a      	mov	r2, r5
   1429e:	4631      	mov	r1, r6
   142a0:	4438      	add	r0, r7
   142a2:	f003 f9b2 	bl	1760a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   142a6:	442f      	add	r7, r5
   142a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   142ac:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   142b0:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   142b2:	2001      	movs	r0, #1
   142b4:	e02a      	b.n	1430c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   142b6:	1c43      	adds	r3, r0, #1
   142b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   142bc:	4a14      	ldr	r2, [pc, #80]	; (14310 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   142be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   142c2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   142c4:	464a      	mov	r2, r9
   142c6:	4631      	mov	r1, r6
   142c8:	4438      	add	r0, r7
   142ca:	f003 f99e 	bl	1760a <memcpy>
      NumBytes -= Rem;
   142ce:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   142d2:	eb18 0505 	adds.w	r5, r8, r5
   142d6:	d107      	bne.n	142e8 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   142d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   142dc:	4b0c      	ldr	r3, [pc, #48]	; (14310 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   142de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   142e2:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   142e4:	2001      	movs	r0, #1
   142e6:	e011      	b.n	1430c <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   142e8:	1c63      	adds	r3, r4, #1
   142ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   142ee:	4a08      	ldr	r2, [pc, #32]	; (14310 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   142f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   142f4:	462a      	mov	r2, r5
   142f6:	eb06 0109 	add.w	r1, r6, r9
   142fa:	6858      	ldr	r0, [r3, #4]
   142fc:	f003 f985 	bl	1760a <memcpy>
   14300:	e7ea      	b.n	142d8 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   14302:	1bdb      	subs	r3, r3, r7
   14304:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   14306:	42ab      	cmp	r3, r5
   14308:	d2c0      	bcs.n	1428c <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   1430a:	2000      	movs	r0, #0
}
   1430c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14310:	200025e4 	.word	0x200025e4

00014314 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   14314:	4b06      	ldr	r3, [pc, #24]	; (14330 <SEGGER_RTT_HasDataUp+0x1c>)
   14316:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1431a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1431e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   14320:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14324:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   14328:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1432a:	1a80      	subs	r0, r0, r2
   1432c:	4770      	bx	lr
   1432e:	bf00      	nop
   14330:	200025e4 	.word	0x200025e4

00014334 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   14334:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   14336:	f04f 32ff 	mov.w	r2, #4294967295
   1433a:	f04f 33ff 	mov.w	r3, #4294967295
   1433e:	4802      	ldr	r0, [pc, #8]	; (14348 <zephyr_rtt_mutex_lock+0x14>)
   14340:	f000 fbc8 	bl	14ad4 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   14344:	bd08      	pop	{r3, pc}
   14346:	bf00      	nop
   14348:	20000428 	.word	0x20000428

0001434c <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   1434c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1434e:	4802      	ldr	r0, [pc, #8]	; (14358 <zephyr_rtt_mutex_unlock+0xc>)
   14350:	f000 fc44 	bl	14bdc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   14354:	bd08      	pop	{r3, pc}
   14356:	bf00      	nop
   14358:	20000428 	.word	0x20000428

0001435c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1435c:	4b03      	ldr	r3, [pc, #12]	; (1436c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1435e:	e000      	b.n	14362 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   14360:	3318      	adds	r3, #24
	while (dev < __device_end) {
   14362:	4a03      	ldr	r2, [pc, #12]	; (14370 <z_device_state_init+0x14>)
   14364:	4293      	cmp	r3, r2
   14366:	d3fb      	bcc.n	14360 <z_device_state_init+0x4>
	}
}
   14368:	4770      	bx	lr
   1436a:	bf00      	nop
   1436c:	00019eb0 	.word	0x00019eb0
   14370:	00019f40 	.word	0x00019f40

00014374 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   14374:	2804      	cmp	r0, #4
   14376:	d80c      	bhi.n	14392 <reason_to_str+0x1e>
   14378:	e8df f000 	tbb	[pc, r0]
   1437c:	07050d03 	.word	0x07050d03
   14380:	09          	.byte	0x09
   14381:	00          	.byte	0x00
   14382:	4806      	ldr	r0, [pc, #24]	; (1439c <reason_to_str+0x28>)
   14384:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   14386:	4806      	ldr	r0, [pc, #24]	; (143a0 <reason_to_str+0x2c>)
   14388:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   1438a:	4806      	ldr	r0, [pc, #24]	; (143a4 <reason_to_str+0x30>)
   1438c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1438e:	4806      	ldr	r0, [pc, #24]	; (143a8 <reason_to_str+0x34>)
   14390:	4770      	bx	lr
	default:
		return "Unknown error";
   14392:	4806      	ldr	r0, [pc, #24]	; (143ac <reason_to_str+0x38>)
   14394:	4770      	bx	lr
		return "Unhandled interrupt";
   14396:	4806      	ldr	r0, [pc, #24]	; (143b0 <reason_to_str+0x3c>)
	}
}
   14398:	4770      	bx	lr
   1439a:	bf00      	nop
   1439c:	0001bb94 	.word	0x0001bb94
   143a0:	0001bbb8 	.word	0x0001bbb8
   143a4:	0001bbc8 	.word	0x0001bbc8
   143a8:	0001bbd4 	.word	0x0001bbd4
   143ac:	0001bbe4 	.word	0x0001bbe4
   143b0:	0001bba4 	.word	0x0001bba4

000143b4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   143b4:	b130      	cbz	r0, 143c4 <thread_name_get+0x10>
{
   143b6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   143b8:	f004 ff75 	bl	192a6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   143bc:	b120      	cbz	r0, 143c8 <thread_name_get+0x14>
   143be:	7803      	ldrb	r3, [r0, #0]
   143c0:	b123      	cbz	r3, 143cc <thread_name_get+0x18>
}
   143c2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   143c4:	4802      	ldr	r0, [pc, #8]	; (143d0 <thread_name_get+0x1c>)
}
   143c6:	4770      	bx	lr
		thread_name = "unknown";
   143c8:	4801      	ldr	r0, [pc, #4]	; (143d0 <thread_name_get+0x1c>)
   143ca:	e7fa      	b.n	143c2 <thread_name_get+0xe>
   143cc:	4800      	ldr	r0, [pc, #0]	; (143d0 <thread_name_get+0x1c>)
	return thread_name;
   143ce:	e7f8      	b.n	143c2 <thread_name_get+0xe>
   143d0:	0001acb8 	.word	0x0001acb8

000143d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   143d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   143d8:	b083      	sub	sp, #12
   143da:	af00      	add	r7, sp, #0
   143dc:	4606      	mov	r6, r0
   143de:	460c      	mov	r4, r1
	__asm__ volatile(
   143e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   143e4:	f3ef 8811 	mrs	r8, BASEPRI
   143e8:	f383 8812 	msr	BASEPRI_MAX, r3
   143ec:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   143f0:	f001 f972 	bl	156d8 <z_impl_z_current_get>
   143f4:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   143f6:	4630      	mov	r0, r6
   143f8:	f7ff ffbc 	bl	14374 <reason_to_str>
   143fc:	46e9      	mov	r9, sp
   143fe:	2302      	movs	r3, #2
   14400:	713b      	strb	r3, [r7, #4]
   14402:	2304      	movs	r3, #4
   14404:	717b      	strb	r3, [r7, #5]
   14406:	b08c      	sub	sp, #48	; 0x30
   14408:	46ec      	mov	ip, sp
   1440a:	f11c 0210 	adds.w	r2, ip, #16
   1440e:	d026      	beq.n	1445e <z_fatal_error+0x8a>
   14410:	f04f 0e1a 	mov.w	lr, #26
   14414:	b17a      	cbz	r2, 14436 <z_fatal_error+0x62>
   14416:	4673      	mov	r3, lr
   14418:	f1be 0f04 	cmp.w	lr, #4
   1441c:	dd02      	ble.n	14424 <z_fatal_error+0x50>
   1441e:	4986      	ldr	r1, [pc, #536]	; (14638 <z_fatal_error+0x264>)
   14420:	f8cc 1014 	str.w	r1, [ip, #20]
   14424:	2b08      	cmp	r3, #8
   14426:	dd02      	ble.n	1442e <z_fatal_error+0x5a>
   14428:	4984      	ldr	r1, [pc, #528]	; (1463c <z_fatal_error+0x268>)
   1442a:	f8cc 1018 	str.w	r1, [ip, #24]
   1442e:	2b0c      	cmp	r3, #12
   14430:	dd01      	ble.n	14436 <z_fatal_error+0x62>
   14432:	f8cc 601c 	str.w	r6, [ip, #28]
   14436:	2302      	movs	r3, #2
   14438:	703b      	strb	r3, [r7, #0]
   1443a:	2304      	movs	r3, #4
   1443c:	707b      	strb	r3, [r7, #1]
   1443e:	b1da      	cbz	r2, 14478 <z_fatal_error+0xa4>
   14440:	4673      	mov	r3, lr
   14442:	f1be 0f10 	cmp.w	lr, #16
   14446:	dd01      	ble.n	1444c <z_fatal_error+0x78>
   14448:	f8cc 0020 	str.w	r0, [ip, #32]
   1444c:	2b14      	cmp	r3, #20
   1444e:	dd02      	ble.n	14456 <z_fatal_error+0x82>
   14450:	2300      	movs	r3, #0
   14452:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   14456:	f10c 0328 	add.w	r3, ip, #40	; 0x28
   1445a:	2100      	movs	r1, #0
   1445c:	e00a      	b.n	14474 <z_fatal_error+0xa0>
   1445e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   14462:	e7d7      	b.n	14414 <z_fatal_error+0x40>
   14464:	f101 0008 	add.w	r0, r1, #8
   14468:	4438      	add	r0, r7
   1446a:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1446e:	f803 0b01 	strb.w	r0, [r3], #1
   14472:	3101      	adds	r1, #1
   14474:	2901      	cmp	r1, #1
   14476:	d9f5      	bls.n	14464 <z_fatal_error+0x90>
   14478:	f1be 0f19 	cmp.w	lr, #25
   1447c:	f340 808e 	ble.w	1459c <z_fatal_error+0x1c8>
   14480:	231a      	movs	r3, #26
   14482:	b14a      	cbz	r2, 14498 <z_fatal_error+0xc4>
   14484:	2106      	movs	r1, #6
   14486:	7139      	strb	r1, [r7, #4]
   14488:	2100      	movs	r1, #0
   1448a:	7179      	strb	r1, [r7, #5]
   1448c:	71b9      	strb	r1, [r7, #6]
   1448e:	2101      	movs	r1, #1
   14490:	71f9      	strb	r1, [r7, #7]
   14492:	6878      	ldr	r0, [r7, #4]
   14494:	f8cc 0010 	str.w	r0, [ip, #16]
   14498:	2100      	movs	r1, #0
   1449a:	f36f 0100 	bfc	r1, #0, #1
   1449e:	f36f 0141 	bfc	r1, #1, #1
   144a2:	f36f 0182 	bfc	r1, #2, #1
   144a6:	f36f 01c5 	bfc	r1, #3, #3
   144aa:	2001      	movs	r0, #1
   144ac:	f360 1188 	bfi	r1, r0, #6, #3
   144b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
   144b4:	f363 2153 	bfi	r1, r3, #9, #11
   144b8:	f36f 511f 	bfc	r1, #20, #12
   144bc:	2300      	movs	r3, #0
   144be:	4860      	ldr	r0, [pc, #384]	; (14640 <z_fatal_error+0x26c>)
   144c0:	f7f7 fcd2 	bl	be68 <z_impl_z_log_msg_static_create>
   144c4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   144c6:	2c00      	cmp	r4, #0
   144c8:	d03a      	beq.n	14540 <z_fatal_error+0x16c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   144ca:	69e3      	ldr	r3, [r4, #28]
   144cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   144d0:	b3b3      	cbz	r3, 14540 <z_fatal_error+0x16c>
		LOG_ERR("Fault during interrupt handling\n");
   144d2:	46e9      	mov	r9, sp
   144d4:	b088      	sub	sp, #32
   144d6:	466b      	mov	r3, sp
   144d8:	f113 0210 	adds.w	r2, r3, #16
   144dc:	d061      	beq.n	145a2 <z_fatal_error+0x1ce>
   144de:	210c      	movs	r1, #12
   144e0:	b152      	cbz	r2, 144f8 <z_fatal_error+0x124>
   144e2:	4608      	mov	r0, r1
   144e4:	2904      	cmp	r1, #4
   144e6:	dd03      	ble.n	144f0 <z_fatal_error+0x11c>
   144e8:	f8df c158 	ldr.w	ip, [pc, #344]	; 14644 <z_fatal_error+0x270>
   144ec:	f8c3 c014 	str.w	ip, [r3, #20]
   144f0:	2808      	cmp	r0, #8
   144f2:	dd01      	ble.n	144f8 <z_fatal_error+0x124>
   144f4:	4851      	ldr	r0, [pc, #324]	; (1463c <z_fatal_error+0x268>)
   144f6:	6198      	str	r0, [r3, #24]
   144f8:	290b      	cmp	r1, #11
   144fa:	dd55      	ble.n	145a8 <z_fatal_error+0x1d4>
   144fc:	f04f 0c0c 	mov.w	ip, #12
   14500:	b13a      	cbz	r2, 14512 <z_fatal_error+0x13e>
   14502:	2103      	movs	r1, #3
   14504:	7139      	strb	r1, [r7, #4]
   14506:	2100      	movs	r1, #0
   14508:	7179      	strb	r1, [r7, #5]
   1450a:	71b9      	strb	r1, [r7, #6]
   1450c:	71f9      	strb	r1, [r7, #7]
   1450e:	6878      	ldr	r0, [r7, #4]
   14510:	6118      	str	r0, [r3, #16]
   14512:	2100      	movs	r1, #0
   14514:	f36f 0100 	bfc	r1, #0, #1
   14518:	f36f 0141 	bfc	r1, #1, #1
   1451c:	f36f 0182 	bfc	r1, #2, #1
   14520:	f36f 01c5 	bfc	r1, #3, #3
   14524:	2301      	movs	r3, #1
   14526:	f363 1188 	bfi	r1, r3, #6, #3
   1452a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1452e:	f36c 2153 	bfi	r1, ip, #9, #11
   14532:	f36f 511f 	bfc	r1, #20, #12
   14536:	2300      	movs	r3, #0
   14538:	4841      	ldr	r0, [pc, #260]	; (14640 <z_fatal_error+0x26c>)
   1453a:	f7f7 fc95 	bl	be68 <z_impl_z_log_msg_static_create>
   1453e:	46cd      	mov	sp, r9
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   14540:	4628      	mov	r0, r5
   14542:	f7ff ff37 	bl	143b4 <thread_name_get>
   14546:	46e9      	mov	r9, sp
   14548:	2302      	movs	r3, #2
   1454a:	713b      	strb	r3, [r7, #4]
   1454c:	2304      	movs	r3, #4
   1454e:	717b      	strb	r3, [r7, #5]
   14550:	b08a      	sub	sp, #40	; 0x28
   14552:	46ec      	mov	ip, sp
   14554:	f11c 0210 	adds.w	r2, ip, #16
   14558:	d029      	beq.n	145ae <z_fatal_error+0x1da>
   1455a:	f04f 0e16 	mov.w	lr, #22
   1455e:	b17a      	cbz	r2, 14580 <z_fatal_error+0x1ac>
   14560:	4673      	mov	r3, lr
   14562:	f1be 0f04 	cmp.w	lr, #4
   14566:	dd02      	ble.n	1456e <z_fatal_error+0x19a>
   14568:	4937      	ldr	r1, [pc, #220]	; (14648 <z_fatal_error+0x274>)
   1456a:	f8cc 1014 	str.w	r1, [ip, #20]
   1456e:	2b08      	cmp	r3, #8
   14570:	dd02      	ble.n	14578 <z_fatal_error+0x1a4>
   14572:	4932      	ldr	r1, [pc, #200]	; (1463c <z_fatal_error+0x268>)
   14574:	f8cc 1018 	str.w	r1, [ip, #24]
   14578:	2b0c      	cmp	r3, #12
   1457a:	dd01      	ble.n	14580 <z_fatal_error+0x1ac>
   1457c:	f8cc 501c 	str.w	r5, [ip, #28]
   14580:	2302      	movs	r3, #2
   14582:	703b      	strb	r3, [r7, #0]
   14584:	2304      	movs	r3, #4
   14586:	707b      	strb	r3, [r7, #1]
   14588:	b1f2      	cbz	r2, 145c8 <z_fatal_error+0x1f4>
   1458a:	f1be 0f10 	cmp.w	lr, #16
   1458e:	dd01      	ble.n	14594 <z_fatal_error+0x1c0>
   14590:	f8cc 0020 	str.w	r0, [ip, #32]
   14594:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   14598:	2100      	movs	r1, #0
   1459a:	e013      	b.n	145c4 <z_fatal_error+0x1f0>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1459c:	f06f 031b 	mvn.w	r3, #27
   145a0:	e76f      	b.n	14482 <z_fatal_error+0xae>
		LOG_ERR("Fault during interrupt handling\n");
   145a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   145a6:	e79b      	b.n	144e0 <z_fatal_error+0x10c>
   145a8:	f06f 0c1b 	mvn.w	ip, #27
   145ac:	e7a8      	b.n	14500 <z_fatal_error+0x12c>
	LOG_ERR("Current thread: %p (%s)", thread,
   145ae:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   145b2:	e7d4      	b.n	1455e <z_fatal_error+0x18a>
   145b4:	f101 0008 	add.w	r0, r1, #8
   145b8:	4438      	add	r0, r7
   145ba:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   145be:	f803 0b01 	strb.w	r0, [r3], #1
   145c2:	3101      	adds	r1, #1
   145c4:	2901      	cmp	r1, #1
   145c6:	d9f5      	bls.n	145b4 <z_fatal_error+0x1e0>
   145c8:	f1be 0f15 	cmp.w	lr, #21
   145cc:	dd31      	ble.n	14632 <z_fatal_error+0x25e>
   145ce:	2316      	movs	r3, #22
   145d0:	b14a      	cbz	r2, 145e6 <z_fatal_error+0x212>
   145d2:	2105      	movs	r1, #5
   145d4:	7139      	strb	r1, [r7, #4]
   145d6:	2100      	movs	r1, #0
   145d8:	7179      	strb	r1, [r7, #5]
   145da:	71b9      	strb	r1, [r7, #6]
   145dc:	2101      	movs	r1, #1
   145de:	71f9      	strb	r1, [r7, #7]
   145e0:	6878      	ldr	r0, [r7, #4]
   145e2:	f8cc 0010 	str.w	r0, [ip, #16]
   145e6:	2100      	movs	r1, #0
   145e8:	f36f 0100 	bfc	r1, #0, #1
   145ec:	f36f 0141 	bfc	r1, #1, #1
   145f0:	f36f 0182 	bfc	r1, #2, #1
   145f4:	f36f 01c5 	bfc	r1, #3, #3
   145f8:	2001      	movs	r0, #1
   145fa:	f360 1188 	bfi	r1, r0, #6, #3
   145fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
   14602:	f363 2153 	bfi	r1, r3, #9, #11
   14606:	f36f 511f 	bfc	r1, #20, #12
   1460a:	2300      	movs	r3, #0
   1460c:	480c      	ldr	r0, [pc, #48]	; (14640 <z_fatal_error+0x26c>)
   1460e:	f7f7 fc2b 	bl	be68 <z_impl_z_log_msg_static_create>
   14612:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   14614:	4621      	mov	r1, r4
   14616:	4630      	mov	r0, r6
   14618:	f7fe f882 	bl	12720 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1461c:	f388 8811 	msr	BASEPRI, r8
   14620:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14624:	4628      	mov	r0, r5
   14626:	f7f9 fddf 	bl	e1e8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1462a:	370c      	adds	r7, #12
   1462c:	46bd      	mov	sp, r7
   1462e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   14632:	f06f 031b 	mvn.w	r3, #27
   14636:	e7cb      	b.n	145d0 <z_fatal_error+0x1fc>
   14638:	0001bbf4 	.word	0x0001bbf4
   1463c:	0001bc64 	.word	0x0001bc64
   14640:	0001a144 	.word	0x0001a144
   14644:	0001bc20 	.word	0x0001bc20
   14648:	0001bc48 	.word	0x0001bc48

0001464c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   1464c:	b570      	push	{r4, r5, r6, lr}
   1464e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14650:	4b12      	ldr	r3, [pc, #72]	; (1469c <z_sys_init_run_level+0x50>)
   14652:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14656:	e009      	b.n	1466c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   14658:	4243      	negs	r3, r0
   1465a:	e017      	b.n	1468c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1465c:	68ea      	ldr	r2, [r5, #12]
   1465e:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   14660:	68ea      	ldr	r2, [r5, #12]
   14662:	7853      	ldrb	r3, [r2, #1]
   14664:	f043 0301 	orr.w	r3, r3, #1
   14668:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1466a:	3408      	adds	r4, #8
   1466c:	1c73      	adds	r3, r6, #1
   1466e:	4a0b      	ldr	r2, [pc, #44]	; (1469c <z_sys_init_run_level+0x50>)
   14670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14674:	42a3      	cmp	r3, r4
   14676:	d910      	bls.n	1469a <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   14678:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   1467a:	b15d      	cbz	r5, 14694 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   1467c:	6823      	ldr	r3, [r4, #0]
   1467e:	4628      	mov	r0, r5
   14680:	4798      	blx	r3
			if (rc != 0) {
   14682:	4603      	mov	r3, r0
   14684:	2800      	cmp	r0, #0
   14686:	d0eb      	beq.n	14660 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   14688:	2800      	cmp	r0, #0
   1468a:	dbe5      	blt.n	14658 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1468c:	2bff      	cmp	r3, #255	; 0xff
   1468e:	dde5      	ble.n	1465c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   14690:	23ff      	movs	r3, #255	; 0xff
   14692:	e7e3      	b.n	1465c <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   14694:	6823      	ldr	r3, [r4, #0]
   14696:	4798      	blx	r3
   14698:	e7e7      	b.n	1466a <z_sys_init_run_level+0x1e>
		}
	}
}
   1469a:	bd70      	pop	{r4, r5, r6, pc}
   1469c:	0001bc84 	.word	0x0001bc84

000146a0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   146a0:	b510      	push	{r4, lr}
   146a2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   146a4:	23b8      	movs	r3, #184	; 0xb8
   146a6:	4c11      	ldr	r4, [pc, #68]	; (146ec <init_idle_thread+0x4c>)
   146a8:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   146ac:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   146b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   146b4:	4b0e      	ldr	r3, [pc, #56]	; (146f0 <init_idle_thread+0x50>)
   146b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
   146ba:	4a0e      	ldr	r2, [pc, #56]	; (146f4 <init_idle_thread+0x54>)
   146bc:	9205      	str	r2, [sp, #20]
   146be:	2201      	movs	r2, #1
   146c0:	9204      	str	r2, [sp, #16]
   146c2:	220f      	movs	r2, #15
   146c4:	9203      	str	r2, [sp, #12]
   146c6:	2200      	movs	r2, #0
   146c8:	9202      	str	r2, [sp, #8]
   146ca:	9201      	str	r2, [sp, #4]
   146cc:	9300      	str	r3, [sp, #0]
   146ce:	4b0a      	ldr	r3, [pc, #40]	; (146f8 <init_idle_thread+0x58>)
   146d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   146d4:	4909      	ldr	r1, [pc, #36]	; (146fc <init_idle_thread+0x5c>)
   146d6:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   146da:	4620      	mov	r0, r4
   146dc:	f000 f92e 	bl	1493c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   146e0:	7b63      	ldrb	r3, [r4, #13]
   146e2:	f023 0304 	bic.w	r3, r3, #4
   146e6:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   146e8:	b006      	add	sp, #24
   146ea:	bd10      	pop	{r4, pc}
   146ec:	20001c28 	.word	0x20001c28
   146f0:	2000268c 	.word	0x2000268c
   146f4:	0001bc74 	.word	0x0001bc74
   146f8:	00014a99 	.word	0x00014a99
   146fc:	20004140 	.word	0x20004140

00014700 <bg_thread_main>:
{
   14700:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   14702:	4b0a      	ldr	r3, [pc, #40]	; (1472c <bg_thread_main+0x2c>)
   14704:	2201      	movs	r2, #1
   14706:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   14708:	2003      	movs	r0, #3
   1470a:	f7ff ff9f 	bl	1464c <z_sys_init_run_level>
	boot_banner();
   1470e:	f001 fac1 	bl	15c94 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   14712:	2004      	movs	r0, #4
   14714:	f7ff ff9a 	bl	1464c <z_sys_init_run_level>
	z_init_static_threads();
   14718:	f000 f974 	bl	14a04 <z_init_static_threads>
	(void)main();
   1471c:	f7f5 fe96 	bl	a44c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14720:	4a03      	ldr	r2, [pc, #12]	; (14730 <bg_thread_main+0x30>)
   14722:	7b13      	ldrb	r3, [r2, #12]
   14724:	f023 0301 	bic.w	r3, r3, #1
   14728:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1472a:	bd08      	pop	{r3, pc}
   1472c:	200026e0 	.word	0x200026e0
   14730:	20001ce0 	.word	0x20001ce0

00014734 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   14734:	b508      	push	{r3, lr}
   14736:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   14738:	4a01      	ldr	r2, [pc, #4]	; (14740 <switch_to_main_thread+0xc>)
   1473a:	4802      	ldr	r0, [pc, #8]	; (14744 <switch_to_main_thread+0x10>)
   1473c:	f7f8 fad2 	bl	cce4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14740:	00014701 	.word	0x00014701
   14744:	20001ce0 	.word	0x20001ce0

00014748 <z_bss_zero>:
{
   14748:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1474a:	4803      	ldr	r0, [pc, #12]	; (14758 <z_bss_zero+0x10>)
   1474c:	4a03      	ldr	r2, [pc, #12]	; (1475c <z_bss_zero+0x14>)
   1474e:	1a12      	subs	r2, r2, r0
   14750:	2100      	movs	r1, #0
   14752:	f004 fd0c 	bl	1916e <z_early_memset>
}
   14756:	bd08      	pop	{r3, pc}
   14758:	200004d8 	.word	0x200004d8
   1475c:	200026e4 	.word	0x200026e4

00014760 <z_init_cpu>:
{
   14760:	b510      	push	{r4, lr}
   14762:	4604      	mov	r4, r0
	init_idle_thread(id);
   14764:	f7ff ff9c 	bl	146a0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   14768:	23b8      	movs	r3, #184	; 0xb8
   1476a:	490b      	ldr	r1, [pc, #44]	; (14798 <z_init_cpu+0x38>)
   1476c:	fb03 1104 	mla	r1, r3, r4, r1
   14770:	4a0a      	ldr	r2, [pc, #40]	; (1479c <z_init_cpu+0x3c>)
   14772:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1477a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   1477c:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1477e:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   14782:	4b07      	ldr	r3, [pc, #28]	; (147a0 <z_init_cpu+0x40>)
   14784:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   14788:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   1478c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   14790:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   14794:	6053      	str	r3, [r2, #4]
}
   14796:	bd10      	pop	{r4, pc}
   14798:	20001c28 	.word	0x20001c28
   1479c:	2000268c 	.word	0x2000268c
   147a0:	20003900 	.word	0x20003900

000147a4 <prepare_multithreading>:
{
   147a4:	b570      	push	{r4, r5, r6, lr}
   147a6:	b086      	sub	sp, #24
	z_sched_init();
   147a8:	f000 fed2 	bl	15550 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   147ac:	4d10      	ldr	r5, [pc, #64]	; (147f0 <prepare_multithreading+0x4c>)
   147ae:	4b11      	ldr	r3, [pc, #68]	; (147f4 <prepare_multithreading+0x50>)
   147b0:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   147b2:	4b11      	ldr	r3, [pc, #68]	; (147f8 <prepare_multithreading+0x54>)
   147b4:	9305      	str	r3, [sp, #20]
   147b6:	2301      	movs	r3, #1
   147b8:	9304      	str	r3, [sp, #16]
   147ba:	2400      	movs	r4, #0
   147bc:	9403      	str	r4, [sp, #12]
   147be:	9402      	str	r4, [sp, #8]
   147c0:	9401      	str	r4, [sp, #4]
   147c2:	9400      	str	r4, [sp, #0]
   147c4:	4b0d      	ldr	r3, [pc, #52]	; (147fc <prepare_multithreading+0x58>)
   147c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   147ca:	490d      	ldr	r1, [pc, #52]	; (14800 <prepare_multithreading+0x5c>)
   147cc:	4628      	mov	r0, r5
   147ce:	f000 f8b5 	bl	1493c <z_setup_new_thread>
   147d2:	4606      	mov	r6, r0
   147d4:	7b6b      	ldrb	r3, [r5, #13]
   147d6:	f023 0304 	bic.w	r3, r3, #4
   147da:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   147dc:	4628      	mov	r0, r5
   147de:	f004 ff7c 	bl	196da <z_ready_thread>
	z_init_cpu(0);
   147e2:	4620      	mov	r0, r4
   147e4:	f7ff ffbc 	bl	14760 <z_init_cpu>
}
   147e8:	4630      	mov	r0, r6
   147ea:	b006      	add	sp, #24
   147ec:	bd70      	pop	{r4, r5, r6, pc}
   147ee:	bf00      	nop
   147f0:	20001ce0 	.word	0x20001ce0
   147f4:	2000268c 	.word	0x2000268c
   147f8:	0001bc7c 	.word	0x0001bc7c
   147fc:	00014701 	.word	0x00014701
   14800:	200042c0 	.word	0x200042c0

00014804 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   14804:	b500      	push	{lr}
   14806:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   14808:	2000      	movs	r0, #0
   1480a:	f7ff ff1f 	bl	1464c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1480e:	4b1f      	ldr	r3, [pc, #124]	; (1488c <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14810:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   14814:	4c1e      	ldr	r4, [pc, #120]	; (14890 <z_cstart+0x8c>)
   14816:	6963      	ldr	r3, [r4, #20]
   14818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1481c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1481e:	23e0      	movs	r3, #224	; 0xe0
   14820:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   14824:	2320      	movs	r3, #32
   14826:	77e3      	strb	r3, [r4, #31]
   14828:	2500      	movs	r5, #0
   1482a:	7625      	strb	r5, [r4, #24]
   1482c:	7665      	strb	r5, [r4, #25]
   1482e:	76a5      	strb	r5, [r4, #26]
   14830:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14834:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14836:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1483a:	6263      	str	r3, [r4, #36]	; 0x24
   1483c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14840:	f7f9 fc38 	bl	e0b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14844:	f7f7 ffe8 	bl	c818 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14848:	f04f 33ff 	mov.w	r3, #4294967295
   1484c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1484e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   14850:	f7f9 fe14 	bl	e47c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   14854:	f7f9 fce2 	bl	e21c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   14858:	f7f7 f976 	bl	bb48 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1485c:	2401      	movs	r4, #1
   1485e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   14862:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   14866:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   14868:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   1486a:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1486c:	4b09      	ldr	r3, [pc, #36]	; (14894 <z_cstart+0x90>)
   1486e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   14872:	f7ff fd73 	bl	1435c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   14876:	4620      	mov	r0, r4
   14878:	f7ff fee8 	bl	1464c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1487c:	2002      	movs	r0, #2
   1487e:	f7ff fee5 	bl	1464c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   14882:	f7ff ff8f 	bl	147a4 <prepare_multithreading>
   14886:	f7ff ff55 	bl	14734 <switch_to_main_thread>
   1488a:	bf00      	nop
   1488c:	20004140 	.word	0x20004140
   14890:	e000ed00 	.word	0xe000ed00
   14894:	2000268c 	.word	0x2000268c

00014898 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   14898:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1489a:	4c06      	ldr	r4, [pc, #24]	; (148b4 <statics_init+0x1c>)
   1489c:	e005      	b.n	148aa <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1489e:	68a2      	ldr	r2, [r4, #8]
   148a0:	6861      	ldr	r1, [r4, #4]
   148a2:	4620      	mov	r0, r4
   148a4:	f004 fc6b 	bl	1917e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   148a8:	3414      	adds	r4, #20
   148aa:	4b03      	ldr	r3, [pc, #12]	; (148b8 <statics_init+0x20>)
   148ac:	429c      	cmp	r4, r3
   148ae:	d3f6      	bcc.n	1489e <statics_init+0x6>
		}
	}
	return 0;
}
   148b0:	2000      	movs	r0, #0
   148b2:	bd10      	pop	{r4, pc}
   148b4:	20000414 	.word	0x20000414
   148b8:	20000414 	.word	0x20000414

000148bc <z_thread_monitor_exit>:
	__asm__ volatile(
   148bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   148c0:	f3ef 8111 	mrs	r1, BASEPRI
   148c4:	f383 8812 	msr	BASEPRI_MAX, r3
   148c8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   148cc:	4b0a      	ldr	r3, [pc, #40]	; (148f8 <z_thread_monitor_exit+0x3c>)
   148ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   148d0:	4283      	cmp	r3, r0
   148d2:	d104      	bne.n	148de <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   148d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   148d6:	4b08      	ldr	r3, [pc, #32]	; (148f8 <z_thread_monitor_exit+0x3c>)
   148d8:	625a      	str	r2, [r3, #36]	; 0x24
   148da:	e007      	b.n	148ec <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   148dc:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   148de:	b113      	cbz	r3, 148e6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   148e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   148e2:	4282      	cmp	r2, r0
   148e4:	d1fa      	bne.n	148dc <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   148e6:	b10b      	cbz	r3, 148ec <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   148e8:	6f42      	ldr	r2, [r0, #116]	; 0x74
   148ea:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   148ec:	f381 8811 	msr	BASEPRI, r1
   148f0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   148f4:	4770      	bx	lr
   148f6:	bf00      	nop
   148f8:	2000268c 	.word	0x2000268c

000148fc <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   148fc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   148fe:	4604      	mov	r4, r0
   14900:	b140      	cbz	r0, 14914 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   14902:	221f      	movs	r2, #31
   14904:	f104 0078 	add.w	r0, r4, #120	; 0x78
   14908:	f002 fe40 	bl	1758c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1490c:	2000      	movs	r0, #0
   1490e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   14912:	bd10      	pop	{r4, pc}
		thread = _current;
   14914:	4b01      	ldr	r3, [pc, #4]	; (1491c <z_impl_k_thread_name_set+0x20>)
   14916:	689c      	ldr	r4, [r3, #8]
   14918:	e7f3      	b.n	14902 <z_impl_k_thread_name_set+0x6>
   1491a:	bf00      	nop
   1491c:	2000268c 	.word	0x2000268c

00014920 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   14920:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14922:	ea53 0102 	orrs.w	r1, r3, r2
   14926:	d102      	bne.n	1492e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   14928:	f004 fcbf 	bl	192aa <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1492c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1492e:	4902      	ldr	r1, [pc, #8]	; (14938 <schedule_new_thread+0x18>)
   14930:	3018      	adds	r0, #24
   14932:	f000 ff5f 	bl	157f4 <z_add_timeout>
   14936:	e7f9      	b.n	1492c <schedule_new_thread+0xc>
   14938:	00019767 	.word	0x00019767

0001493c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14940:	b085      	sub	sp, #20
   14942:	4604      	mov	r4, r0
   14944:	460f      	mov	r7, r1
   14946:	4615      	mov	r5, r2
   14948:	461e      	mov	r6, r3
   1494a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1494e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   14952:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   14956:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1495a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1495e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   14960:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   14962:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14964:	2204      	movs	r2, #4
   14966:	9911      	ldr	r1, [sp, #68]	; 0x44
   14968:	f004 fca3 	bl	192b2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1496c:	462a      	mov	r2, r5
   1496e:	4639      	mov	r1, r7
   14970:	4620      	mov	r0, r4
   14972:	f004 fc7f 	bl	19274 <setup_thread_stack>
   14976:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14978:	f8cd 8008 	str.w	r8, [sp, #8]
   1497c:	f8cd 9004 	str.w	r9, [sp, #4]
   14980:	f8cd a000 	str.w	sl, [sp]
   14984:	4633      	mov	r3, r6
   14986:	4602      	mov	r2, r0
   14988:	4639      	mov	r1, r7
   1498a:	4620      	mov	r0, r4
   1498c:	f7f8 f964 	bl	cc58 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   14990:	2300      	movs	r3, #0
   14992:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   14994:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   14996:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1499a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1499e:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   149a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   149a6:	f3ef 8211 	mrs	r2, BASEPRI
   149aa:	f383 8812 	msr	BASEPRI_MAX, r3
   149ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   149b2:	4b13      	ldr	r3, [pc, #76]	; (14a00 <z_setup_new_thread+0xc4>)
   149b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
   149b6:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   149b8:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
   149ba:	f382 8811 	msr	BASEPRI, r2
   149be:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   149c2:	f1bb 0f00 	cmp.w	fp, #0
   149c6:	d013      	beq.n	149f0 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   149c8:	221f      	movs	r2, #31
   149ca:	4659      	mov	r1, fp
   149cc:	f104 0078 	add.w	r0, r4, #120	; 0x78
   149d0:	f002 fddc 	bl	1758c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   149d4:	2300      	movs	r3, #0
   149d6:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   149da:	4b09      	ldr	r3, [pc, #36]	; (14a00 <z_setup_new_thread+0xc4>)
   149dc:	689b      	ldr	r3, [r3, #8]
   149de:	b15b      	cbz	r3, 149f8 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   149e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   149e4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   149e8:	4628      	mov	r0, r5
   149ea:	b005      	add	sp, #20
   149ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   149f0:	2300      	movs	r3, #0
   149f2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   149f6:	e7f0      	b.n	149da <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   149f8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   149fc:	e7f4      	b.n	149e8 <z_setup_new_thread+0xac>
   149fe:	bf00      	nop
   14a00:	2000268c 	.word	0x2000268c

00014a04 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   14a04:	b530      	push	{r4, r5, lr}
   14a06:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   14a08:	4c21      	ldr	r4, [pc, #132]	; (14a90 <z_init_static_threads+0x8c>)
   14a0a:	e014      	b.n	14a36 <z_init_static_threads+0x32>
		z_setup_new_thread(
   14a0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a0e:	9305      	str	r3, [sp, #20]
   14a10:	6a23      	ldr	r3, [r4, #32]
   14a12:	9304      	str	r3, [sp, #16]
   14a14:	69e3      	ldr	r3, [r4, #28]
   14a16:	9303      	str	r3, [sp, #12]
   14a18:	69a3      	ldr	r3, [r4, #24]
   14a1a:	9302      	str	r3, [sp, #8]
   14a1c:	6963      	ldr	r3, [r4, #20]
   14a1e:	9301      	str	r3, [sp, #4]
   14a20:	6923      	ldr	r3, [r4, #16]
   14a22:	9300      	str	r3, [sp, #0]
   14a24:	68e3      	ldr	r3, [r4, #12]
   14a26:	68a2      	ldr	r2, [r4, #8]
   14a28:	6861      	ldr	r1, [r4, #4]
   14a2a:	6820      	ldr	r0, [r4, #0]
   14a2c:	f7ff ff86 	bl	1493c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   14a30:	6823      	ldr	r3, [r4, #0]
   14a32:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   14a34:	342c      	adds	r4, #44	; 0x2c
   14a36:	4b17      	ldr	r3, [pc, #92]	; (14a94 <z_init_static_threads+0x90>)
   14a38:	429c      	cmp	r4, r3
   14a3a:	d3e7      	bcc.n	14a0c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   14a3c:	f000 fb4a 	bl	150d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   14a40:	4c13      	ldr	r4, [pc, #76]	; (14a90 <z_init_static_threads+0x8c>)
   14a42:	e000      	b.n	14a46 <z_init_static_threads+0x42>
   14a44:	342c      	adds	r4, #44	; 0x2c
   14a46:	4b13      	ldr	r3, [pc, #76]	; (14a94 <z_init_static_threads+0x90>)
   14a48:	429c      	cmp	r4, r3
   14a4a:	d21c      	bcs.n	14a86 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14a4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14a4e:	f1b0 3fff 	cmp.w	r0, #4294967295
   14a52:	d0f7      	beq.n	14a44 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   14a54:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   14a56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   14a5a:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
   14a5c:	03c9      	lsls	r1, r1, #15
   14a5e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   14a62:	03c0      	lsls	r0, r0, #15
   14a64:	f240 33e7 	movw	r3, #999	; 0x3e7
   14a68:	18c0      	adds	r0, r0, r3
   14a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a6e:	f04f 0300 	mov.w	r3, #0
   14a72:	f141 0100 	adc.w	r1, r1, #0
   14a76:	f7eb fb31 	bl	dc <__aeabi_uldivmod>
   14a7a:	4602      	mov	r2, r0
   14a7c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   14a7e:	4628      	mov	r0, r5
   14a80:	f7ff ff4e 	bl	14920 <schedule_new_thread>
   14a84:	e7de      	b.n	14a44 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   14a86:	f000 fd11 	bl	154ac <k_sched_unlock>
}
   14a8a:	b007      	add	sp, #28
   14a8c:	bd30      	pop	{r4, r5, pc}
   14a8e:	bf00      	nop
   14a90:	0001a078 	.word	0x0001a078
   14a94:	0001a078 	.word	0x0001a078

00014a98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   14a98:	b508      	push	{r3, lr}
   14a9a:	e001      	b.n	14aa0 <idle+0x8>
	arch_cpu_idle();
   14a9c:	f7f7 fec2 	bl	c824 <arch_cpu_idle>
	__asm__ volatile(
   14aa0:	f04f 0240 	mov.w	r2, #64	; 0x40
   14aa4:	f3ef 8311 	mrs	r3, BASEPRI
   14aa8:	f382 8812 	msr	BASEPRI_MAX, r2
   14aac:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   14ab0:	f004 ff7f 	bl	199b2 <z_get_next_timeout_expiry>
   14ab4:	4b05      	ldr	r3, [pc, #20]	; (14acc <idle+0x34>)
   14ab6:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
   14ab8:	4b05      	ldr	r3, [pc, #20]	; (14ad0 <idle+0x38>)
   14aba:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14abc:	2b00      	cmp	r3, #0
   14abe:	d0ed      	beq.n	14a9c <idle+0x4>
   14ac0:	f7f7 fdd4 	bl	c66c <pm_system_suspend>
   14ac4:	2800      	cmp	r0, #0
   14ac6:	d1eb      	bne.n	14aa0 <idle+0x8>
   14ac8:	e7e8      	b.n	14a9c <idle+0x4>
   14aca:	bf00      	nop
   14acc:	2000268c 	.word	0x2000268c
   14ad0:	200026e0 	.word	0x200026e0

00014ad4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   14ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ad8:	b082      	sub	sp, #8
   14ada:	4604      	mov	r4, r0
   14adc:	461e      	mov	r6, r3
   14ade:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ae2:	f3ef 8511 	mrs	r5, BASEPRI
   14ae6:	f383 8812 	msr	BASEPRI_MAX, r3
   14aea:	f3bf 8f6f 	isb	sy
   14aee:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14af0:	68c1      	ldr	r1, [r0, #12]
   14af2:	b999      	cbnz	r1, 14b1c <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   14af4:	2900      	cmp	r1, #0
   14af6:	d151      	bne.n	14b9c <z_impl_k_mutex_lock+0xc8>
   14af8:	4a36      	ldr	r2, [pc, #216]	; (14bd4 <z_impl_k_mutex_lock+0x100>)
   14afa:	6892      	ldr	r2, [r2, #8]
   14afc:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   14b00:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   14b02:	3101      	adds	r1, #1
   14b04:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   14b06:	4a33      	ldr	r2, [pc, #204]	; (14bd4 <z_impl_k_mutex_lock+0x100>)
   14b08:	6892      	ldr	r2, [r2, #8]
   14b0a:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   14b0c:	f383 8811 	msr	BASEPRI, r3
   14b10:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   14b14:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   14b16:	b002      	add	sp, #8
   14b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b1c:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14b1e:	6880      	ldr	r0, [r0, #8]
   14b20:	4a2c      	ldr	r2, [pc, #176]	; (14bd4 <z_impl_k_mutex_lock+0x100>)
   14b22:	6892      	ldr	r2, [r2, #8]
   14b24:	4290      	cmp	r0, r2
   14b26:	d0e5      	beq.n	14af4 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   14b28:	ea56 0107 	orrs.w	r1, r6, r7
   14b2c:	d038      	beq.n	14ba0 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   14b2e:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   14b32:	4641      	mov	r1, r8
   14b34:	f992 000e 	ldrsb.w	r0, [r2, #14]
   14b38:	f004 fbee 	bl	19318 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   14b3c:	4580      	cmp	r8, r0
   14b3e:	dc36      	bgt.n	14bae <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   14b40:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   14b44:	9700      	str	r7, [sp, #0]
   14b46:	9601      	str	r6, [sp, #4]
   14b48:	4622      	mov	r2, r4
   14b4a:	4629      	mov	r1, r5
   14b4c:	4822      	ldr	r0, [pc, #136]	; (14bd8 <z_impl_k_mutex_lock+0x104>)
   14b4e:	f000 fbf9 	bl	15344 <z_pend_curr>
	if (got_mutex == 0) {
   14b52:	2800      	cmp	r0, #0
   14b54:	d0df      	beq.n	14b16 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   14b56:	f04f 0340 	mov.w	r3, #64	; 0x40
   14b5a:	f3ef 8511 	mrs	r5, BASEPRI
   14b5e:	f383 8812 	msr	BASEPRI_MAX, r3
   14b62:	f3bf 8f6f 	isb	sy
   14b66:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   14b68:	68a3      	ldr	r3, [r4, #8]
   14b6a:	b343      	cbz	r3, 14bbe <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14b6c:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14b6e:	429c      	cmp	r4, r3
   14b70:	d023      	beq.n	14bba <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14b72:	b313      	cbz	r3, 14bba <z_impl_k_mutex_lock+0xe6>
   14b74:	6921      	ldr	r1, [r4, #16]
   14b76:	f993 000e 	ldrsb.w	r0, [r3, #14]
   14b7a:	f004 fbcd 	bl	19318 <new_prio_for_inheritance>
   14b7e:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   14b80:	4620      	mov	r0, r4
   14b82:	f004 fbd4 	bl	1932e <adjust_owner_prio>
   14b86:	b9e8      	cbnz	r0, 14bc4 <z_impl_k_mutex_lock+0xf0>
   14b88:	f1b8 0f00 	cmp.w	r8, #0
   14b8c:	d11a      	bne.n	14bc4 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   14b8e:	f386 8811 	msr	BASEPRI, r6
   14b92:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   14b96:	f06f 000a 	mvn.w	r0, #10
   14b9a:	e7bc      	b.n	14b16 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   14b9c:	6922      	ldr	r2, [r4, #16]
   14b9e:	e7af      	b.n	14b00 <z_impl_k_mutex_lock+0x2c>
   14ba0:	f385 8811 	msr	BASEPRI, r5
   14ba4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   14ba8:	f06f 000f 	mvn.w	r0, #15
   14bac:	e7b3      	b.n	14b16 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   14bae:	4601      	mov	r1, r0
   14bb0:	4620      	mov	r0, r4
   14bb2:	f004 fbbc 	bl	1932e <adjust_owner_prio>
   14bb6:	4680      	mov	r8, r0
   14bb8:	e7c4      	b.n	14b44 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14bba:	6921      	ldr	r1, [r4, #16]
   14bbc:	e7e0      	b.n	14b80 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   14bbe:	f1b8 0f00 	cmp.w	r8, #0
   14bc2:	d0e4      	beq.n	14b8e <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   14bc4:	4629      	mov	r1, r5
   14bc6:	4804      	ldr	r0, [pc, #16]	; (14bd8 <z_impl_k_mutex_lock+0x104>)
   14bc8:	f000 fa6e 	bl	150a8 <z_reschedule>
	return -EAGAIN;
   14bcc:	f06f 000a 	mvn.w	r0, #10
   14bd0:	e7a1      	b.n	14b16 <z_impl_k_mutex_lock+0x42>
   14bd2:	bf00      	nop
   14bd4:	2000268c 	.word	0x2000268c
   14bd8:	200026b4 	.word	0x200026b4

00014bdc <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   14bdc:	6883      	ldr	r3, [r0, #8]
   14bde:	b38b      	cbz	r3, 14c44 <z_impl_k_mutex_unlock+0x68>
{
   14be0:	b570      	push	{r4, r5, r6, lr}
   14be2:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   14be4:	4a1a      	ldr	r2, [pc, #104]	; (14c50 <z_impl_k_mutex_unlock+0x74>)
   14be6:	6892      	ldr	r2, [r2, #8]
   14be8:	4293      	cmp	r3, r2
   14bea:	d12e      	bne.n	14c4a <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   14bec:	68c3      	ldr	r3, [r0, #12]
   14bee:	2b01      	cmp	r3, #1
   14bf0:	d903      	bls.n	14bfa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   14bf2:	3b01      	subs	r3, #1
   14bf4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   14bf6:	2000      	movs	r0, #0
}
   14bf8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   14bfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   14bfe:	f3ef 8511 	mrs	r5, BASEPRI
   14c02:	f383 8812 	msr	BASEPRI_MAX, r3
   14c06:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   14c0a:	6901      	ldr	r1, [r0, #16]
   14c0c:	f004 fb8f 	bl	1932e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   14c10:	4620      	mov	r0, r4
   14c12:	f004 fe18 	bl	19846 <z_unpend_first_thread>
	mutex->owner = new_owner;
   14c16:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   14c18:	b168      	cbz	r0, 14c36 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   14c1a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14c1e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14c20:	2400      	movs	r4, #0
   14c22:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   14c26:	f004 fd58 	bl	196da <z_ready_thread>
		z_reschedule(&lock, key);
   14c2a:	4629      	mov	r1, r5
   14c2c:	4809      	ldr	r0, [pc, #36]	; (14c54 <z_impl_k_mutex_unlock+0x78>)
   14c2e:	f000 fa3b 	bl	150a8 <z_reschedule>
	return 0;
   14c32:	4620      	mov	r0, r4
   14c34:	e7e0      	b.n	14bf8 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   14c36:	2000      	movs	r0, #0
   14c38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14c3a:	f385 8811 	msr	BASEPRI, r5
   14c3e:	f3bf 8f6f 	isb	sy
   14c42:	e7d9      	b.n	14bf8 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   14c44:	f06f 0015 	mvn.w	r0, #21
}
   14c48:	4770      	bx	lr
		return -EPERM;
   14c4a:	f04f 30ff 	mov.w	r0, #4294967295
   14c4e:	e7d3      	b.n	14bf8 <z_impl_k_mutex_unlock+0x1c>
   14c50:	2000268c 	.word	0x2000268c
   14c54:	200026b4 	.word	0x200026b4

00014c58 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   14c58:	b510      	push	{r4, lr}
   14c5a:	b082      	sub	sp, #8
   14c5c:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14c5e:	4686      	mov	lr, r0
	__asm__ volatile(
   14c60:	f04f 0040 	mov.w	r0, #64	; 0x40
   14c64:	f3ef 8111 	mrs	r1, BASEPRI
   14c68:	f380 8812 	msr	BASEPRI_MAX, r0
   14c6c:	f3bf 8f6f 	isb	sy
   14c70:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   14c72:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14c76:	b1a0      	cbz	r0, 14ca2 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14c78:	6803      	ldr	r3, [r0, #0]
   14c7a:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   14c7e:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   14c82:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14c86:	4290      	cmp	r0, r2
   14c88:	d008      	beq.n	14c9c <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14c8a:	2101      	movs	r1, #1
   14c8c:	f004 fbde 	bl	1944c <z_queue_node_peek>
	__asm__ volatile(
   14c90:	f384 8811 	msr	BASEPRI, r4
   14c94:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   14c98:	b002      	add	sp, #8
   14c9a:	bd10      	pop	{r4, pc}
	list->tail = node;
   14c9c:	f8cc 3004 	str.w	r3, [ip, #4]
}
   14ca0:	e7f3      	b.n	14c8a <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14ca2:	ea53 0002 	orrs.w	r0, r3, r2
   14ca6:	d00a      	beq.n	14cbe <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   14ca8:	9200      	str	r2, [sp, #0]
   14caa:	9301      	str	r3, [sp, #4]
   14cac:	4672      	mov	r2, lr
   14cae:	4670      	mov	r0, lr
   14cb0:	f000 fb48 	bl	15344 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   14cb4:	b948      	cbnz	r0, 14cca <z_impl_k_queue_get+0x72>
   14cb6:	4b06      	ldr	r3, [pc, #24]	; (14cd0 <z_impl_k_queue_get+0x78>)
   14cb8:	689b      	ldr	r3, [r3, #8]
   14cba:	6958      	ldr	r0, [r3, #20]
   14cbc:	e7ec      	b.n	14c98 <z_impl_k_queue_get+0x40>
   14cbe:	f381 8811 	msr	BASEPRI, r1
   14cc2:	f3bf 8f6f 	isb	sy
		return NULL;
   14cc6:	2000      	movs	r0, #0
   14cc8:	e7e6      	b.n	14c98 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   14cca:	2000      	movs	r0, #0
   14ccc:	e7e4      	b.n	14c98 <z_impl_k_queue_get+0x40>
   14cce:	bf00      	nop
   14cd0:	2000268c 	.word	0x2000268c

00014cd4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   14cd4:	b538      	push	{r3, r4, r5, lr}
   14cd6:	4604      	mov	r4, r0
	__asm__ volatile(
   14cd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   14cdc:	f3ef 8511 	mrs	r5, BASEPRI
   14ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   14ce4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   14ce8:	f004 fdad 	bl	19846 <z_unpend_first_thread>

	if (thread != NULL) {
   14cec:	b148      	cbz	r0, 14d02 <z_impl_k_sem_give+0x2e>
   14cee:	2200      	movs	r2, #0
   14cf0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   14cf4:	f004 fcf1 	bl	196da <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   14cf8:	4629      	mov	r1, r5
   14cfa:	4809      	ldr	r0, [pc, #36]	; (14d20 <z_impl_k_sem_give+0x4c>)
   14cfc:	f000 f9d4 	bl	150a8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   14d00:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14d02:	68a3      	ldr	r3, [r4, #8]
   14d04:	68e2      	ldr	r2, [r4, #12]
   14d06:	4293      	cmp	r3, r2
   14d08:	d008      	beq.n	14d1c <z_impl_k_sem_give+0x48>
   14d0a:	2201      	movs	r2, #1
   14d0c:	4413      	add	r3, r2
   14d0e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14d10:	2102      	movs	r1, #2
   14d12:	f104 0010 	add.w	r0, r4, #16
   14d16:	f005 f84d 	bl	19db4 <z_handle_obj_poll_events>
}
   14d1a:	e7ed      	b.n	14cf8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14d1c:	2200      	movs	r2, #0
   14d1e:	e7f5      	b.n	14d0c <z_impl_k_sem_give+0x38>
   14d20:	200026b4 	.word	0x200026b4

00014d24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14d24:	b510      	push	{r4, lr}
   14d26:	b082      	sub	sp, #8
   14d28:	f04f 0440 	mov.w	r4, #64	; 0x40
   14d2c:	f3ef 8111 	mrs	r1, BASEPRI
   14d30:	f384 8812 	msr	BASEPRI_MAX, r4
   14d34:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   14d38:	6884      	ldr	r4, [r0, #8]
   14d3a:	b144      	cbz	r4, 14d4e <z_impl_k_sem_take+0x2a>
		sem->count--;
   14d3c:	3c01      	subs	r4, #1
   14d3e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   14d40:	f381 8811 	msr	BASEPRI, r1
   14d44:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   14d48:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   14d4a:	b002      	add	sp, #8
   14d4c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14d4e:	ea53 0402 	orrs.w	r4, r3, r2
   14d52:	d006      	beq.n	14d62 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14d54:	9200      	str	r2, [sp, #0]
   14d56:	9301      	str	r3, [sp, #4]
   14d58:	4602      	mov	r2, r0
   14d5a:	4805      	ldr	r0, [pc, #20]	; (14d70 <z_impl_k_sem_take+0x4c>)
   14d5c:	f000 faf2 	bl	15344 <z_pend_curr>
	return ret;
   14d60:	e7f3      	b.n	14d4a <z_impl_k_sem_take+0x26>
   14d62:	f381 8811 	msr	BASEPRI, r1
   14d66:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   14d6a:	f06f 000f 	mvn.w	r0, #15
   14d6e:	e7ec      	b.n	14d4a <z_impl_k_sem_take+0x26>
   14d70:	200026b4 	.word	0x200026b4

00014d74 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   14d74:	b370      	cbz	r0, 14dd4 <queue_submit_locked+0x60>
{
   14d76:	b538      	push	{r3, r4, r5, lr}
   14d78:	460d      	mov	r5, r1
   14d7a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   14d7c:	4b1b      	ldr	r3, [pc, #108]	; (14dec <queue_submit_locked+0x78>)
   14d7e:	689b      	ldr	r3, [r3, #8]
   14d80:	4283      	cmp	r3, r0
   14d82:	d01b      	beq.n	14dbc <queue_submit_locked+0x48>
   14d84:	2300      	movs	r3, #0
   14d86:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   14d88:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   14d8c:	f3c3 0180 	ubfx	r1, r3, #2, #1
   14d90:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   14d94:	f013 0f01 	tst.w	r3, #1
   14d98:	d01f      	beq.n	14dda <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   14d9a:	b101      	cbz	r1, 14d9e <queue_submit_locked+0x2a>
   14d9c:	b302      	cbz	r2, 14de0 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   14d9e:	b100      	cbz	r0, 14da2 <queue_submit_locked+0x2e>
   14da0:	b309      	cbz	r1, 14de6 <queue_submit_locked+0x72>
	parent->next = child;
   14da2:	2300      	movs	r3, #0
   14da4:	602b      	str	r3, [r5, #0]
	return list->tail;
   14da6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   14daa:	b173      	cbz	r3, 14dca <queue_submit_locked+0x56>
	parent->next = child;
   14dac:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14dae:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   14db2:	4620      	mov	r0, r4
   14db4:	f004 fba2 	bl	194fc <notify_queue_locked>
		ret = 1;
   14db8:	2001      	movs	r0, #1
	}

	return ret;
}
   14dba:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   14dbc:	f004 fa6d 	bl	1929a <k_is_in_isr>
   14dc0:	b908      	cbnz	r0, 14dc6 <queue_submit_locked+0x52>
   14dc2:	2301      	movs	r3, #1
   14dc4:	e7df      	b.n	14d86 <queue_submit_locked+0x12>
   14dc6:	2300      	movs	r3, #0
   14dc8:	e7dd      	b.n	14d86 <queue_submit_locked+0x12>
   14dca:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   14dce:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   14dd2:	e7ee      	b.n	14db2 <queue_submit_locked+0x3e>
		return -EINVAL;
   14dd4:	f06f 0015 	mvn.w	r0, #21
}
   14dd8:	4770      	bx	lr
		ret = -ENODEV;
   14dda:	f06f 0012 	mvn.w	r0, #18
   14dde:	e7ec      	b.n	14dba <queue_submit_locked+0x46>
		ret = -EBUSY;
   14de0:	f06f 000f 	mvn.w	r0, #15
   14de4:	e7e9      	b.n	14dba <queue_submit_locked+0x46>
		ret = -EBUSY;
   14de6:	f06f 000f 	mvn.w	r0, #15
   14dea:	e7e6      	b.n	14dba <queue_submit_locked+0x46>
   14dec:	2000268c 	.word	0x2000268c

00014df0 <finalize_cancel_locked>:
{
   14df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14df2:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   14df4:	68c3      	ldr	r3, [r0, #12]
   14df6:	f023 0302 	bic.w	r3, r3, #2
   14dfa:	60c3      	str	r3, [r0, #12]
	return list->head;
   14dfc:	4b13      	ldr	r3, [pc, #76]	; (14e4c <finalize_cancel_locked+0x5c>)
   14dfe:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   14e00:	b185      	cbz	r5, 14e24 <finalize_cancel_locked+0x34>
	return node->next;
   14e02:	682c      	ldr	r4, [r5, #0]
   14e04:	b104      	cbz	r4, 14e08 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14e06:	b10d      	cbz	r5, 14e0c <finalize_cancel_locked+0x1c>
   14e08:	2700      	movs	r7, #0
   14e0a:	e010      	b.n	14e2e <finalize_cancel_locked+0x3e>
   14e0c:	462c      	mov	r4, r5
   14e0e:	e7fb      	b.n	14e08 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   14e10:	462a      	mov	r2, r5
   14e12:	4639      	mov	r1, r7
   14e14:	480d      	ldr	r0, [pc, #52]	; (14e4c <finalize_cancel_locked+0x5c>)
   14e16:	f004 fb5e 	bl	194d6 <sys_slist_remove>
			k_sem_give(&wc->sem);
   14e1a:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   14e1e:	f7ff ff59 	bl	14cd4 <z_impl_k_sem_give>
}
   14e22:	e009      	b.n	14e38 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   14e24:	462c      	mov	r4, r5
   14e26:	e7ef      	b.n	14e08 <finalize_cancel_locked+0x18>
   14e28:	4623      	mov	r3, r4
   14e2a:	4625      	mov	r5, r4
   14e2c:	461c      	mov	r4, r3
   14e2e:	b165      	cbz	r5, 14e4a <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   14e30:	686b      	ldr	r3, [r5, #4]
   14e32:	42b3      	cmp	r3, r6
   14e34:	d0ec      	beq.n	14e10 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   14e36:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   14e38:	2c00      	cmp	r4, #0
   14e3a:	d0f5      	beq.n	14e28 <finalize_cancel_locked+0x38>
	return node->next;
   14e3c:	6823      	ldr	r3, [r4, #0]
   14e3e:	2b00      	cmp	r3, #0
   14e40:	d0f3      	beq.n	14e2a <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14e42:	2c00      	cmp	r4, #0
   14e44:	d1f1      	bne.n	14e2a <finalize_cancel_locked+0x3a>
   14e46:	4623      	mov	r3, r4
   14e48:	e7ef      	b.n	14e2a <finalize_cancel_locked+0x3a>
}
   14e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e4c:	200026b4 	.word	0x200026b4

00014e50 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   14e50:	b570      	push	{r4, r5, r6, lr}
   14e52:	b084      	sub	sp, #16
   14e54:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   14e56:	e016      	b.n	14e86 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   14e58:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   14e5c:	f023 0204 	bic.w	r2, r3, #4
   14e60:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   14e64:	f013 0f04 	tst.w	r3, #4
   14e68:	d15a      	bne.n	14f20 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   14e6a:	2300      	movs	r3, #0
   14e6c:	9302      	str	r3, [sp, #8]
   14e6e:	f04f 32ff 	mov.w	r2, #4294967295
   14e72:	f04f 33ff 	mov.w	r3, #4294967295
   14e76:	e9cd 2300 	strd	r2, r3, [sp]
   14e7a:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   14e7e:	4631      	mov	r1, r6
   14e80:	482e      	ldr	r0, [pc, #184]	; (14f3c <work_queue_main+0xec>)
   14e82:	f000 fc67 	bl	15754 <z_sched_wait>
	__asm__ volatile(
   14e86:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e8a:	f3ef 8611 	mrs	r6, BASEPRI
   14e8e:	f383 8812 	msr	BASEPRI_MAX, r3
   14e92:	f3bf 8f6f 	isb	sy
   14e96:	4632      	mov	r2, r6
	return list->head;
   14e98:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14e9c:	2c00      	cmp	r4, #0
   14e9e:	d0db      	beq.n	14e58 <work_queue_main+0x8>
	return node->next;
   14ea0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   14ea2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   14ea6:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14eaa:	428c      	cmp	r4, r1
   14eac:	d035      	beq.n	14f1a <work_queue_main+0xca>
	*flagp |= BIT(bit);
   14eae:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   14eb2:	f043 0302 	orr.w	r3, r3, #2
   14eb6:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   14eba:	68e3      	ldr	r3, [r4, #12]
   14ebc:	f043 0101 	orr.w	r1, r3, #1
   14ec0:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   14ec2:	f023 0304 	bic.w	r3, r3, #4
   14ec6:	f043 0301 	orr.w	r3, r3, #1
   14eca:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   14ecc:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   14ece:	f382 8811 	msr	BASEPRI, r2
   14ed2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   14ed6:	4620      	mov	r0, r4
   14ed8:	4798      	blx	r3
	__asm__ volatile(
   14eda:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ede:	f3ef 8611 	mrs	r6, BASEPRI
   14ee2:	f383 8812 	msr	BASEPRI_MAX, r3
   14ee6:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   14eea:	68e3      	ldr	r3, [r4, #12]
   14eec:	f023 0301 	bic.w	r3, r3, #1
   14ef0:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   14ef2:	f013 0f02 	tst.w	r3, #2
   14ef6:	d11d      	bne.n	14f34 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   14ef8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   14efc:	f023 0302 	bic.w	r3, r3, #2
   14f00:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   14f04:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   14f08:	f386 8811 	msr	BASEPRI, r6
   14f0c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   14f10:	2b00      	cmp	r3, #0
   14f12:	d1b8      	bne.n	14e86 <work_queue_main+0x36>
	z_impl_k_yield();
   14f14:	f000 fb24 	bl	15560 <z_impl_k_yield>
}
   14f18:	e7b5      	b.n	14e86 <work_queue_main+0x36>
	list->tail = node;
   14f1a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   14f1e:	e7c6      	b.n	14eae <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   14f20:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   14f24:	2200      	movs	r2, #0
   14f26:	2101      	movs	r1, #1
   14f28:	4620      	mov	r0, r4
   14f2a:	f004 fcc2 	bl	198b2 <z_sched_wake>
   14f2e:	2800      	cmp	r0, #0
   14f30:	d1f8      	bne.n	14f24 <work_queue_main+0xd4>
   14f32:	e79a      	b.n	14e6a <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   14f34:	4620      	mov	r0, r4
   14f36:	f7ff ff5b 	bl	14df0 <finalize_cancel_locked>
   14f3a:	e7dd      	b.n	14ef8 <work_queue_main+0xa8>
   14f3c:	200026bc 	.word	0x200026bc

00014f40 <k_work_submit>:
{
   14f40:	b508      	push	{r3, lr}
   14f42:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   14f44:	4801      	ldr	r0, [pc, #4]	; (14f4c <k_work_submit+0xc>)
   14f46:	f004 fb3b 	bl	195c0 <k_work_submit_to_queue>
}
   14f4a:	bd08      	pop	{r3, pc}
   14f4c:	20001db8 	.word	0x20001db8

00014f50 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   14f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f52:	b089      	sub	sp, #36	; 0x24
   14f54:	4604      	mov	r4, r0
   14f56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   14f58:	2000      	movs	r0, #0
   14f5a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   14f5e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   14f62:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   14f66:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   14f6a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   14f6e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   14f72:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   14f76:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   14f7a:	b1fd      	cbz	r5, 14fbc <k_work_queue_start+0x6c>
   14f7c:	7928      	ldrb	r0, [r5, #4]
   14f7e:	b9f8      	cbnz	r0, 14fc0 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   14f80:	2001      	movs	r0, #1
	*flagp = flags;
   14f82:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14f86:	f04f 36ff 	mov.w	r6, #4294967295
   14f8a:	f04f 37ff 	mov.w	r7, #4294967295
   14f8e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   14f92:	2000      	movs	r0, #0
   14f94:	9004      	str	r0, [sp, #16]
   14f96:	9303      	str	r3, [sp, #12]
   14f98:	9002      	str	r0, [sp, #8]
   14f9a:	9001      	str	r0, [sp, #4]
   14f9c:	9400      	str	r4, [sp, #0]
   14f9e:	4b0a      	ldr	r3, [pc, #40]	; (14fc8 <k_work_queue_start+0x78>)
   14fa0:	4620      	mov	r0, r4
   14fa2:	f004 f991 	bl	192c8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   14fa6:	b125      	cbz	r5, 14fb2 <k_work_queue_start+0x62>
   14fa8:	6829      	ldr	r1, [r5, #0]
   14faa:	b111      	cbz	r1, 14fb2 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   14fac:	4620      	mov	r0, r4
   14fae:	f7ff fca5 	bl	148fc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   14fb2:	4620      	mov	r0, r4
   14fb4:	f004 f979 	bl	192aa <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   14fb8:	b009      	add	sp, #36	; 0x24
   14fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   14fbc:	2001      	movs	r0, #1
   14fbe:	e7e0      	b.n	14f82 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   14fc0:	f240 1001 	movw	r0, #257	; 0x101
   14fc4:	e7dd      	b.n	14f82 <k_work_queue_start+0x32>
   14fc6:	bf00      	nop
   14fc8:	00014e51 	.word	0x00014e51

00014fcc <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   14fcc:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   14fce:	2b7f      	cmp	r3, #127	; 0x7f
   14fd0:	d811      	bhi.n	14ff6 <sliceable+0x2a>
	int ret = slice_ticks;
   14fd2:	4b0e      	ldr	r3, [pc, #56]	; (1500c <sliceable+0x40>)
   14fd4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   14fd6:	b17b      	cbz	r3, 14ff8 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14fd8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   14fdc:	4b0c      	ldr	r3, [pc, #48]	; (15010 <sliceable+0x44>)
   14fde:	681b      	ldr	r3, [r3, #0]
   14fe0:	429a      	cmp	r2, r3
   14fe2:	db0c      	blt.n	14ffe <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   14fe4:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   14fe6:	f013 0f1f 	tst.w	r3, #31
   14fea:	d10a      	bne.n	15002 <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   14fec:	4b09      	ldr	r3, [pc, #36]	; (15014 <sliceable+0x48>)
   14fee:	4298      	cmp	r0, r3
   14ff0:	d009      	beq.n	15006 <sliceable+0x3a>
   14ff2:	2301      	movs	r3, #1
   14ff4:	e000      	b.n	14ff8 <sliceable+0x2c>
   14ff6:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   14ff8:	f003 0001 	and.w	r0, r3, #1
   14ffc:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   14ffe:	2300      	movs	r3, #0
   15000:	e7fa      	b.n	14ff8 <sliceable+0x2c>
   15002:	2300      	movs	r3, #0
   15004:	e7f8      	b.n	14ff8 <sliceable+0x2c>
   15006:	2300      	movs	r3, #0
   15008:	e7f6      	b.n	14ff8 <sliceable+0x2c>
   1500a:	bf00      	nop
   1500c:	200026c8 	.word	0x200026c8
   15010:	200026c4 	.word	0x200026c4
   15014:	20001c28 	.word	0x20001c28

00015018 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   15018:	4b04      	ldr	r3, [pc, #16]	; (1502c <slice_timeout+0x14>)
   1501a:	1ac0      	subs	r0, r0, r3
   1501c:	10c0      	asrs	r0, r0, #3
   1501e:	4b04      	ldr	r3, [pc, #16]	; (15030 <slice_timeout+0x18>)
   15020:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   15024:	4b03      	ldr	r3, [pc, #12]	; (15034 <slice_timeout+0x1c>)
   15026:	2201      	movs	r2, #1
   15028:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   1502a:	4770      	bx	lr
   1502c:	20001d98 	.word	0x20001d98
   15030:	aaaaaaab 	.word	0xaaaaaaab
   15034:	200026c0 	.word	0x200026c0

00015038 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15038:	f1b3 3fff 	cmp.w	r3, #4294967295
   1503c:	bf08      	it	eq
   1503e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   15042:	d100      	bne.n	15046 <add_thread_timeout+0xe>
   15044:	4770      	bx	lr
{
   15046:	b508      	push	{r3, lr}
   15048:	4902      	ldr	r1, [pc, #8]	; (15054 <add_thread_timeout+0x1c>)
   1504a:	3018      	adds	r0, #24
   1504c:	f000 fbd2 	bl	157f4 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   15050:	bd08      	pop	{r3, pc}
   15052:	bf00      	nop
   15054:	00019767 	.word	0x00019767

00015058 <z_reset_time_slice>:
{
   15058:	b570      	push	{r4, r5, r6, lr}
   1505a:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   1505c:	4b0d      	ldr	r3, [pc, #52]	; (15094 <z_reset_time_slice+0x3c>)
   1505e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   15060:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15064:	4c0c      	ldr	r4, [pc, #48]	; (15098 <z_reset_time_slice+0x40>)
   15066:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1506a:	4620      	mov	r0, r4
   1506c:	f004 fc83 	bl	19976 <z_abort_timeout>
	slice_expired[cpu] = false;
   15070:	4b0a      	ldr	r3, [pc, #40]	; (1509c <z_reset_time_slice+0x44>)
   15072:	2200      	movs	r2, #0
   15074:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   15076:	4628      	mov	r0, r5
   15078:	f7ff ffa8 	bl	14fcc <sliceable>
   1507c:	b900      	cbnz	r0, 15080 <z_reset_time_slice+0x28>
}
   1507e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   15080:	4b07      	ldr	r3, [pc, #28]	; (150a0 <z_reset_time_slice+0x48>)
   15082:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   15084:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15086:	17d3      	asrs	r3, r2, #31
   15088:	4906      	ldr	r1, [pc, #24]	; (150a4 <z_reset_time_slice+0x4c>)
   1508a:	4620      	mov	r0, r4
   1508c:	f000 fbb2 	bl	157f4 <z_add_timeout>
}
   15090:	e7f5      	b.n	1507e <z_reset_time_slice+0x26>
   15092:	bf00      	nop
   15094:	2000268c 	.word	0x2000268c
   15098:	20001d98 	.word	0x20001d98
   1509c:	200026c0 	.word	0x200026c0
   150a0:	200026c8 	.word	0x200026c8
   150a4:	00015019 	.word	0x00015019

000150a8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   150a8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   150aa:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   150ac:	b959      	cbnz	r1, 150c6 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   150ae:	f3ef 8205 	mrs	r2, IPSR
   150b2:	b942      	cbnz	r2, 150c6 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   150b4:	4a06      	ldr	r2, [pc, #24]	; (150d0 <z_reschedule+0x28>)
   150b6:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
   150b8:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   150ba:	4290      	cmp	r0, r2
   150bc:	d003      	beq.n	150c6 <z_reschedule+0x1e>
	ret = arch_swap(key);
   150be:	4608      	mov	r0, r1
   150c0:	f7f7 fd72 	bl	cba8 <arch_swap>
		z_swap(lock, key);
   150c4:	e003      	b.n	150ce <z_reschedule+0x26>
   150c6:	f383 8811 	msr	BASEPRI, r3
   150ca:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   150ce:	bd08      	pop	{r3, pc}
   150d0:	2000268c 	.word	0x2000268c

000150d4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   150d4:	2300      	movs	r3, #0
	__asm__ volatile(
   150d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   150da:	f3ef 8111 	mrs	r1, BASEPRI
   150de:	f382 8812 	msr	BASEPRI_MAX, r2
   150e2:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   150e6:	e009      	b.n	150fc <k_sched_lock+0x28>
	--_current->base.sched_locked;
   150e8:	4b06      	ldr	r3, [pc, #24]	; (15104 <k_sched_lock+0x30>)
   150ea:	689a      	ldr	r2, [r3, #8]
   150ec:	7bd3      	ldrb	r3, [r2, #15]
   150ee:	3b01      	subs	r3, #1
   150f0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   150f2:	f381 8811 	msr	BASEPRI, r1
   150f6:	f3bf 8f6f 	isb	sy
   150fa:	2301      	movs	r3, #1
   150fc:	2b00      	cmp	r3, #0
   150fe:	d0f3      	beq.n	150e8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   15100:	4770      	bx	lr
   15102:	bf00      	nop
   15104:	2000268c 	.word	0x2000268c

00015108 <update_cache>:
{
   15108:	b538      	push	{r3, r4, r5, lr}
   1510a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1510c:	4810      	ldr	r0, [pc, #64]	; (15150 <update_cache+0x48>)
   1510e:	f004 fadd 	bl	196cc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15112:	4605      	mov	r5, r0
   15114:	b170      	cbz	r0, 15134 <update_cache+0x2c>
	if (preempt_ok != 0) {
   15116:	b984      	cbnz	r4, 1513a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   15118:	4b0e      	ldr	r3, [pc, #56]	; (15154 <update_cache+0x4c>)
   1511a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1511c:	7b5a      	ldrb	r2, [r3, #13]
   1511e:	f012 0f1f 	tst.w	r2, #31
   15122:	d10a      	bne.n	1513a <update_cache+0x32>
	return node->next != NULL;
   15124:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15126:	b942      	cbnz	r2, 1513a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   15128:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1512a:	2a7f      	cmp	r2, #127	; 0x7f
   1512c:	d905      	bls.n	1513a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1512e:	4a09      	ldr	r2, [pc, #36]	; (15154 <update_cache+0x4c>)
   15130:	6193      	str	r3, [r2, #24]
   15132:	e00b      	b.n	1514c <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15134:	4b07      	ldr	r3, [pc, #28]	; (15154 <update_cache+0x4c>)
   15136:	68dd      	ldr	r5, [r3, #12]
   15138:	e7ed      	b.n	15116 <update_cache+0xe>
		if (thread != _current) {
   1513a:	4b06      	ldr	r3, [pc, #24]	; (15154 <update_cache+0x4c>)
   1513c:	689b      	ldr	r3, [r3, #8]
   1513e:	42ab      	cmp	r3, r5
   15140:	d002      	beq.n	15148 <update_cache+0x40>
			z_reset_time_slice(thread);
   15142:	4628      	mov	r0, r5
   15144:	f7ff ff88 	bl	15058 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   15148:	4b02      	ldr	r3, [pc, #8]	; (15154 <update_cache+0x4c>)
   1514a:	619d      	str	r5, [r3, #24]
}
   1514c:	bd38      	pop	{r3, r4, r5, pc}
   1514e:	bf00      	nop
   15150:	200026a8 	.word	0x200026a8
   15154:	2000268c 	.word	0x2000268c

00015158 <move_thread_to_end_of_prio_q>:
{
   15158:	b538      	push	{r3, r4, r5, lr}
   1515a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1515c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1515e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15162:	2b00      	cmp	r3, #0
   15164:	db0a      	blt.n	1517c <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   15166:	7b6b      	ldrb	r3, [r5, #13]
   15168:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1516c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1516e:	4b1b      	ldr	r3, [pc, #108]	; (151dc <move_thread_to_end_of_prio_q+0x84>)
   15170:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15174:	429c      	cmp	r4, r3
   15176:	d110      	bne.n	1519a <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15178:	2400      	movs	r4, #0
   1517a:	e00e      	b.n	1519a <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1517c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15180:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15182:	4601      	mov	r1, r0
   15184:	4816      	ldr	r0, [pc, #88]	; (151e0 <move_thread_to_end_of_prio_q+0x88>)
   15186:	f004 fa6d 	bl	19664 <z_priq_dumb_remove>
}
   1518a:	e7ec      	b.n	15166 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1518c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1518e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15190:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15192:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15194:	6065      	str	r5, [r4, #4]
}
   15196:	e017      	b.n	151c8 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15198:	2400      	movs	r4, #0
   1519a:	b16c      	cbz	r4, 151b8 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1519c:	4621      	mov	r1, r4
   1519e:	4628      	mov	r0, r5
   151a0:	f004 fa22 	bl	195e8 <z_sched_prio_cmp>
   151a4:	2800      	cmp	r0, #0
   151a6:	dcf1      	bgt.n	1518c <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   151a8:	2c00      	cmp	r4, #0
   151aa:	d0f6      	beq.n	1519a <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   151ac:	4b0b      	ldr	r3, [pc, #44]	; (151dc <move_thread_to_end_of_prio_q+0x84>)
   151ae:	6a1b      	ldr	r3, [r3, #32]
   151b0:	429c      	cmp	r4, r3
   151b2:	d0f1      	beq.n	15198 <move_thread_to_end_of_prio_q+0x40>
   151b4:	6824      	ldr	r4, [r4, #0]
   151b6:	e7f0      	b.n	1519a <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   151b8:	4b08      	ldr	r3, [pc, #32]	; (151dc <move_thread_to_end_of_prio_q+0x84>)
   151ba:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   151bc:	f103 011c 	add.w	r1, r3, #28
   151c0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   151c2:	606a      	str	r2, [r5, #4]
	tail->next = node;
   151c4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   151c6:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
   151c8:	4b04      	ldr	r3, [pc, #16]	; (151dc <move_thread_to_end_of_prio_q+0x84>)
   151ca:	6898      	ldr	r0, [r3, #8]
   151cc:	42a8      	cmp	r0, r5
   151ce:	bf14      	ite	ne
   151d0:	2000      	movne	r0, #0
   151d2:	2001      	moveq	r0, #1
   151d4:	f7ff ff98 	bl	15108 <update_cache>
}
   151d8:	bd38      	pop	{r3, r4, r5, pc}
   151da:	bf00      	nop
   151dc:	2000268c 	.word	0x2000268c
   151e0:	200026a8 	.word	0x200026a8

000151e4 <z_time_slice>:
{
   151e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   151e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   151ea:	f3ef 8311 	mrs	r3, BASEPRI
   151ee:	f382 8812 	msr	BASEPRI_MAX, r2
   151f2:	f3bf 8f6f 	isb	sy
   151f6:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   151f8:	4b14      	ldr	r3, [pc, #80]	; (1524c <z_time_slice+0x68>)
   151fa:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   151fc:	4b14      	ldr	r3, [pc, #80]	; (15250 <z_time_slice+0x6c>)
   151fe:	681b      	ldr	r3, [r3, #0]
   15200:	42a3      	cmp	r3, r4
   15202:	d017      	beq.n	15234 <z_time_slice+0x50>
	pending_current = NULL;
   15204:	4b12      	ldr	r3, [pc, #72]	; (15250 <z_time_slice+0x6c>)
   15206:	2200      	movs	r2, #0
   15208:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1520a:	4b10      	ldr	r3, [pc, #64]	; (1524c <z_time_slice+0x68>)
   1520c:	7c1b      	ldrb	r3, [r3, #16]
   1520e:	4a11      	ldr	r2, [pc, #68]	; (15254 <z_time_slice+0x70>)
   15210:	5cd3      	ldrb	r3, [r2, r3]
   15212:	b153      	cbz	r3, 1522a <z_time_slice+0x46>
   15214:	4620      	mov	r0, r4
   15216:	f7ff fed9 	bl	14fcc <sliceable>
   1521a:	b130      	cbz	r0, 1522a <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   1521c:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   1521e:	f013 0f1f 	tst.w	r3, #31
   15222:	d00f      	beq.n	15244 <z_time_slice+0x60>
		z_reset_time_slice(curr);
   15224:	4620      	mov	r0, r4
   15226:	f7ff ff17 	bl	15058 <z_reset_time_slice>
	__asm__ volatile(
   1522a:	f385 8811 	msr	BASEPRI, r5
   1522e:	f3bf 8f6f 	isb	sy
}
   15232:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   15234:	4620      	mov	r0, r4
   15236:	f7ff ff0f 	bl	15058 <z_reset_time_slice>
   1523a:	f385 8811 	msr	BASEPRI, r5
   1523e:	f3bf 8f6f 	isb	sy
		return;
   15242:	e7f6      	b.n	15232 <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   15244:	4620      	mov	r0, r4
   15246:	f7ff ff87 	bl	15158 <move_thread_to_end_of_prio_q>
   1524a:	e7eb      	b.n	15224 <z_time_slice+0x40>
   1524c:	2000268c 	.word	0x2000268c
   15250:	200026bc 	.word	0x200026bc
   15254:	200026c0 	.word	0x200026c0

00015258 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   15258:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1525a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1525e:	2b00      	cmp	r3, #0
   15260:	db33      	blt.n	152ca <ready_thread+0x72>
{
   15262:	b570      	push	{r4, r5, r6, lr}
   15264:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15266:	f012 0f1f 	tst.w	r2, #31
   1526a:	d101      	bne.n	15270 <ready_thread+0x18>
	return node->next != NULL;
   1526c:	6986      	ldr	r6, [r0, #24]
   1526e:	b106      	cbz	r6, 15272 <ready_thread+0x1a>
}
   15270:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   15272:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15276:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   15278:	4b14      	ldr	r3, [pc, #80]	; (152cc <ready_thread+0x74>)
   1527a:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1527e:	429d      	cmp	r5, r3
   15280:	d108      	bne.n	15294 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15282:	4635      	mov	r5, r6
   15284:	e006      	b.n	15294 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   15286:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   15288:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1528a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1528c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1528e:	606c      	str	r4, [r5, #4]
}
   15290:	e017      	b.n	152c2 <ready_thread+0x6a>
   15292:	4635      	mov	r5, r6
   15294:	b16d      	cbz	r5, 152b2 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15296:	4629      	mov	r1, r5
   15298:	4620      	mov	r0, r4
   1529a:	f004 f9a5 	bl	195e8 <z_sched_prio_cmp>
   1529e:	2800      	cmp	r0, #0
   152a0:	dcf1      	bgt.n	15286 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   152a2:	2d00      	cmp	r5, #0
   152a4:	d0f6      	beq.n	15294 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   152a6:	4b09      	ldr	r3, [pc, #36]	; (152cc <ready_thread+0x74>)
   152a8:	6a1b      	ldr	r3, [r3, #32]
   152aa:	429d      	cmp	r5, r3
   152ac:	d0f1      	beq.n	15292 <ready_thread+0x3a>
   152ae:	682d      	ldr	r5, [r5, #0]
   152b0:	e7f0      	b.n	15294 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   152b2:	4b06      	ldr	r3, [pc, #24]	; (152cc <ready_thread+0x74>)
   152b4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   152b6:	f103 011c 	add.w	r1, r3, #28
   152ba:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   152bc:	6062      	str	r2, [r4, #4]
	tail->next = node;
   152be:	6014      	str	r4, [r2, #0]
	list->tail = node;
   152c0:	621c      	str	r4, [r3, #32]
		update_cache(0);
   152c2:	2000      	movs	r0, #0
   152c4:	f7ff ff20 	bl	15108 <update_cache>
}
   152c8:	e7d2      	b.n	15270 <ready_thread+0x18>
   152ca:	4770      	bx	lr
   152cc:	2000268c 	.word	0x2000268c

000152d0 <z_sched_start>:
{
   152d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   152d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   152d6:	f3ef 8411 	mrs	r4, BASEPRI
   152da:	f383 8812 	msr	BASEPRI_MAX, r3
   152de:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   152e2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   152e4:	f013 0f04 	tst.w	r3, #4
   152e8:	d104      	bne.n	152f4 <z_sched_start+0x24>
	__asm__ volatile(
   152ea:	f384 8811 	msr	BASEPRI, r4
   152ee:	f3bf 8f6f 	isb	sy
}
   152f2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   152f4:	f023 0304 	bic.w	r3, r3, #4
   152f8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   152fa:	f7ff ffad 	bl	15258 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   152fe:	4621      	mov	r1, r4
   15300:	4801      	ldr	r0, [pc, #4]	; (15308 <z_sched_start+0x38>)
   15302:	f7ff fed1 	bl	150a8 <z_reschedule>
   15306:	e7f4      	b.n	152f2 <z_sched_start+0x22>
   15308:	200026cc 	.word	0x200026cc

0001530c <unready_thread>:
{
   1530c:	b510      	push	{r4, lr}
   1530e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   15310:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   15312:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15316:	2b00      	cmp	r3, #0
   15318:	db08      	blt.n	1532c <unready_thread+0x20>
	update_cache(thread == _current);
   1531a:	4b08      	ldr	r3, [pc, #32]	; (1533c <unready_thread+0x30>)
   1531c:	6898      	ldr	r0, [r3, #8]
   1531e:	42a0      	cmp	r0, r4
   15320:	bf14      	ite	ne
   15322:	2000      	movne	r0, #0
   15324:	2001      	moveq	r0, #1
   15326:	f7ff feef 	bl	15108 <update_cache>
}
   1532a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1532c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15330:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15332:	4601      	mov	r1, r0
   15334:	4802      	ldr	r0, [pc, #8]	; (15340 <unready_thread+0x34>)
   15336:	f004 f995 	bl	19664 <z_priq_dumb_remove>
}
   1533a:	e7ee      	b.n	1531a <unready_thread+0xe>
   1533c:	2000268c 	.word	0x2000268c
   15340:	200026a8 	.word	0x200026a8

00015344 <z_pend_curr>:
{
   15344:	b510      	push	{r4, lr}
   15346:	460c      	mov	r4, r1
   15348:	4611      	mov	r1, r2
	pending_current = _current;
   1534a:	480a      	ldr	r0, [pc, #40]	; (15374 <z_pend_curr+0x30>)
   1534c:	6882      	ldr	r2, [r0, #8]
   1534e:	4b0a      	ldr	r3, [pc, #40]	; (15378 <z_pend_curr+0x34>)
   15350:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   15352:	f04f 0240 	mov.w	r2, #64	; 0x40
   15356:	f3ef 8311 	mrs	r3, BASEPRI
   1535a:	f382 8812 	msr	BASEPRI_MAX, r2
   1535e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   15362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15366:	6880      	ldr	r0, [r0, #8]
   15368:	f004 fa43 	bl	197f2 <pend_locked>
   1536c:	4620      	mov	r0, r4
   1536e:	f7f7 fc1b 	bl	cba8 <arch_swap>
}
   15372:	bd10      	pop	{r4, pc}
   15374:	2000268c 	.word	0x2000268c
   15378:	200026bc 	.word	0x200026bc

0001537c <z_set_prio>:
{
   1537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15380:	4605      	mov	r5, r0
   15382:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   15384:	2300      	movs	r3, #0
   15386:	f04f 0240 	mov.w	r2, #64	; 0x40
   1538a:	f3ef 8611 	mrs	r6, BASEPRI
   1538e:	f382 8812 	msr	BASEPRI_MAX, r2
   15392:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   15396:	4618      	mov	r0, r3
   15398:	e029      	b.n	153ee <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   1539a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1539c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1539e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   153a0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   153a2:	6065      	str	r5, [r4, #4]
}
   153a4:	e017      	b.n	153d6 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   153a6:	4644      	mov	r4, r8
   153a8:	b16c      	cbz	r4, 153c6 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   153aa:	4621      	mov	r1, r4
   153ac:	4628      	mov	r0, r5
   153ae:	f004 f91b 	bl	195e8 <z_sched_prio_cmp>
   153b2:	2800      	cmp	r0, #0
   153b4:	dcf1      	bgt.n	1539a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   153b6:	2c00      	cmp	r4, #0
   153b8:	d0f6      	beq.n	153a8 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   153ba:	4b1d      	ldr	r3, [pc, #116]	; (15430 <z_set_prio+0xb4>)
   153bc:	6a1b      	ldr	r3, [r3, #32]
   153be:	429c      	cmp	r4, r3
   153c0:	d0f1      	beq.n	153a6 <z_set_prio+0x2a>
   153c2:	6824      	ldr	r4, [r4, #0]
   153c4:	e7f0      	b.n	153a8 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   153c6:	4b1a      	ldr	r3, [pc, #104]	; (15430 <z_set_prio+0xb4>)
   153c8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   153ca:	f103 011c 	add.w	r1, r3, #28
   153ce:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   153d0:	606a      	str	r2, [r5, #4]
	tail->next = node;
   153d2:	6015      	str	r5, [r2, #0]
	list->tail = node;
   153d4:	621d      	str	r5, [r3, #32]
			update_cache(1);
   153d6:	2001      	movs	r0, #1
   153d8:	f7ff fe96 	bl	15108 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   153dc:	2001      	movs	r0, #1
   153de:	e001      	b.n	153e4 <z_set_prio+0x68>
			thread->base.prio = prio;
   153e0:	73af      	strb	r7, [r5, #14]
   153e2:	2000      	movs	r0, #0
	__asm__ volatile(
   153e4:	f386 8811 	msr	BASEPRI, r6
   153e8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   153ec:	2301      	movs	r3, #1
   153ee:	b9e3      	cbnz	r3, 1542a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   153f0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   153f2:	f013 0f1f 	tst.w	r3, #31
   153f6:	d1f3      	bne.n	153e0 <z_set_prio+0x64>
	return node->next != NULL;
   153f8:	f8d5 8018 	ldr.w	r8, [r5, #24]
   153fc:	f1b8 0f00 	cmp.w	r8, #0
   15400:	d1ee      	bne.n	153e0 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15406:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15408:	f8df 9028 	ldr.w	r9, [pc, #40]	; 15434 <z_set_prio+0xb8>
   1540c:	4629      	mov	r1, r5
   1540e:	4648      	mov	r0, r9
   15410:	f004 f928 	bl	19664 <z_priq_dumb_remove>
				thread->base.prio = prio;
   15414:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   15416:	7b6b      	ldrb	r3, [r5, #13]
   15418:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1541c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1541e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15422:	454c      	cmp	r4, r9
   15424:	d1c0      	bne.n	153a8 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15426:	4644      	mov	r4, r8
   15428:	e7be      	b.n	153a8 <z_set_prio+0x2c>
}
   1542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1542e:	bf00      	nop
   15430:	2000268c 	.word	0x2000268c
   15434:	200026a8 	.word	0x200026a8

00015438 <z_impl_k_thread_suspend>:
{
   15438:	b538      	push	{r3, r4, r5, lr}
   1543a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1543c:	3018      	adds	r0, #24
   1543e:	f004 fa9a 	bl	19976 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   15442:	2300      	movs	r3, #0
	__asm__ volatile(
   15444:	f04f 0240 	mov.w	r2, #64	; 0x40
   15448:	f3ef 8511 	mrs	r5, BASEPRI
   1544c:	f382 8812 	msr	BASEPRI_MAX, r2
   15450:	f3bf 8f6f 	isb	sy
   15454:	e010      	b.n	15478 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15456:	7b63      	ldrb	r3, [r4, #13]
   15458:	f043 0310 	orr.w	r3, r3, #16
   1545c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1545e:	4b11      	ldr	r3, [pc, #68]	; (154a4 <z_impl_k_thread_suspend+0x6c>)
   15460:	6898      	ldr	r0, [r3, #8]
   15462:	42a0      	cmp	r0, r4
   15464:	bf14      	ite	ne
   15466:	2000      	movne	r0, #0
   15468:	2001      	moveq	r0, #1
   1546a:	f7ff fe4d 	bl	15108 <update_cache>
	__asm__ volatile(
   1546e:	f385 8811 	msr	BASEPRI, r5
   15472:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15476:	2301      	movs	r3, #1
   15478:	b963      	cbnz	r3, 15494 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1547a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1547c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   15480:	2b00      	cmp	r3, #0
   15482:	dae8      	bge.n	15456 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15488:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1548a:	4621      	mov	r1, r4
   1548c:	4806      	ldr	r0, [pc, #24]	; (154a8 <z_impl_k_thread_suspend+0x70>)
   1548e:	f004 f8e9 	bl	19664 <z_priq_dumb_remove>
}
   15492:	e7e0      	b.n	15456 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   15494:	4b03      	ldr	r3, [pc, #12]	; (154a4 <z_impl_k_thread_suspend+0x6c>)
   15496:	689b      	ldr	r3, [r3, #8]
   15498:	42a3      	cmp	r3, r4
   1549a:	d000      	beq.n	1549e <z_impl_k_thread_suspend+0x66>
}
   1549c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   1549e:	f004 f8d5 	bl	1964c <z_reschedule_unlocked>
}
   154a2:	e7fb      	b.n	1549c <z_impl_k_thread_suspend+0x64>
   154a4:	2000268c 	.word	0x2000268c
   154a8:	200026a8 	.word	0x200026a8

000154ac <k_sched_unlock>:

void k_sched_unlock(void)
{
   154ac:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   154ae:	2300      	movs	r3, #0
	__asm__ volatile(
   154b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   154b4:	f3ef 8411 	mrs	r4, BASEPRI
   154b8:	f382 8812 	msr	BASEPRI_MAX, r2
   154bc:	f3bf 8f6f 	isb	sy
   154c0:	e00c      	b.n	154dc <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   154c2:	4b09      	ldr	r3, [pc, #36]	; (154e8 <k_sched_unlock+0x3c>)
   154c4:	689a      	ldr	r2, [r3, #8]
   154c6:	7bd3      	ldrb	r3, [r2, #15]
   154c8:	3301      	adds	r3, #1
   154ca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   154cc:	2000      	movs	r0, #0
   154ce:	f7ff fe1b 	bl	15108 <update_cache>
	__asm__ volatile(
   154d2:	f384 8811 	msr	BASEPRI, r4
   154d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   154da:	2301      	movs	r3, #1
   154dc:	2b00      	cmp	r3, #0
   154de:	d0f0      	beq.n	154c2 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   154e0:	f004 f8b4 	bl	1964c <z_reschedule_unlocked>
}
   154e4:	bd10      	pop	{r4, pc}
   154e6:	bf00      	nop
   154e8:	2000268c 	.word	0x2000268c

000154ec <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   154ec:	7b43      	ldrb	r3, [r0, #13]
   154ee:	f013 0f08 	tst.w	r3, #8
   154f2:	d12a      	bne.n	1554a <end_thread+0x5e>
{
   154f4:	b510      	push	{r4, lr}
   154f6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   154f8:	f043 0208 	orr.w	r2, r3, #8
   154fc:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   154fe:	f023 0220 	bic.w	r2, r3, #32
   15502:	f042 0208 	orr.w	r2, r2, #8
   15506:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   15508:	f012 0f80 	tst.w	r2, #128	; 0x80
   1550c:	d113      	bne.n	15536 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   1550e:	68a3      	ldr	r3, [r4, #8]
   15510:	b113      	cbz	r3, 15518 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   15512:	4620      	mov	r0, r4
   15514:	f004 f8ae 	bl	19674 <unpend_thread_no_timeout>
   15518:	f104 0018 	add.w	r0, r4, #24
   1551c:	f004 fa2b 	bl	19976 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   15520:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15524:	f004 f925 	bl	19772 <unpend_all>
		update_cache(1);
   15528:	2001      	movs	r0, #1
   1552a:	f7ff fded 	bl	15108 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1552e:	4620      	mov	r0, r4
   15530:	f7ff f9c4 	bl	148bc <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   15534:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15536:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1553a:	f043 0308 	orr.w	r3, r3, #8
   1553e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15540:	4601      	mov	r1, r0
   15542:	4802      	ldr	r0, [pc, #8]	; (1554c <end_thread+0x60>)
   15544:	f004 f88e 	bl	19664 <z_priq_dumb_remove>
}
   15548:	e7e1      	b.n	1550e <end_thread+0x22>
   1554a:	4770      	bx	lr
   1554c:	200026a8 	.word	0x200026a8

00015550 <z_sched_init>:
{
   15550:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   15552:	4802      	ldr	r0, [pc, #8]	; (1555c <z_sched_init+0xc>)
   15554:	f004 f9a9 	bl	198aa <init_ready_q>
}
   15558:	bd08      	pop	{r3, pc}
   1555a:	bf00      	nop
   1555c:	200026a4 	.word	0x200026a4

00015560 <z_impl_k_yield>:
{
   15560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15562:	f04f 0340 	mov.w	r3, #64	; 0x40
   15566:	f3ef 8611 	mrs	r6, BASEPRI
   1556a:	f383 8812 	msr	BASEPRI_MAX, r3
   1556e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   15572:	4c1d      	ldr	r4, [pc, #116]	; (155e8 <z_impl_k_yield+0x88>)
   15574:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15576:	7b4b      	ldrb	r3, [r1, #13]
   15578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1557c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1557e:	f104 071c 	add.w	r7, r4, #28
   15582:	4638      	mov	r0, r7
   15584:	f004 f86e 	bl	19664 <z_priq_dumb_remove>
	queue_thread(_current);
   15588:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1558a:	7b6b      	ldrb	r3, [r5, #13]
   1558c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15590:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   15592:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15594:	42bc      	cmp	r4, r7
   15596:	d108      	bne.n	155aa <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15598:	2400      	movs	r4, #0
   1559a:	e006      	b.n	155aa <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   1559c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1559e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   155a0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   155a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   155a4:	6065      	str	r5, [r4, #4]
}
   155a6:	e017      	b.n	155d8 <z_impl_k_yield+0x78>
   155a8:	2400      	movs	r4, #0
   155aa:	b16c      	cbz	r4, 155c8 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   155ac:	4621      	mov	r1, r4
   155ae:	4628      	mov	r0, r5
   155b0:	f004 f81a 	bl	195e8 <z_sched_prio_cmp>
   155b4:	2800      	cmp	r0, #0
   155b6:	dcf1      	bgt.n	1559c <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   155b8:	2c00      	cmp	r4, #0
   155ba:	d0f6      	beq.n	155aa <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   155bc:	4b0a      	ldr	r3, [pc, #40]	; (155e8 <z_impl_k_yield+0x88>)
   155be:	6a1b      	ldr	r3, [r3, #32]
   155c0:	429c      	cmp	r4, r3
   155c2:	d0f1      	beq.n	155a8 <z_impl_k_yield+0x48>
   155c4:	6824      	ldr	r4, [r4, #0]
   155c6:	e7f0      	b.n	155aa <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   155c8:	4b07      	ldr	r3, [pc, #28]	; (155e8 <z_impl_k_yield+0x88>)
   155ca:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   155cc:	f103 011c 	add.w	r1, r3, #28
   155d0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   155d2:	606a      	str	r2, [r5, #4]
	tail->next = node;
   155d4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   155d6:	621d      	str	r5, [r3, #32]
	update_cache(1);
   155d8:	2001      	movs	r0, #1
   155da:	f7ff fd95 	bl	15108 <update_cache>
   155de:	4630      	mov	r0, r6
   155e0:	f7f7 fae2 	bl	cba8 <arch_swap>
}
   155e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155e6:	bf00      	nop
   155e8:	2000268c 	.word	0x2000268c

000155ec <z_tick_sleep>:
{
   155ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   155f0:	ea50 0301 	orrs.w	r3, r0, r1
   155f4:	d038      	beq.n	15668 <z_tick_sleep+0x7c>
   155f6:	4604      	mov	r4, r0
   155f8:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   155fa:	f06f 0301 	mvn.w	r3, #1
   155fe:	1a1b      	subs	r3, r3, r0
   15600:	f04f 32ff 	mov.w	r2, #4294967295
   15604:	eb62 0201 	sbc.w	r2, r2, r1
   15608:	2b01      	cmp	r3, #1
   1560a:	f172 0200 	sbcs.w	r2, r2, #0
   1560e:	db2f      	blt.n	15670 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   15610:	f06f 0501 	mvn.w	r5, #1
   15614:	1a2d      	subs	r5, r5, r0
   15616:	f04f 0340 	mov.w	r3, #64	; 0x40
   1561a:	f3ef 8811 	mrs	r8, BASEPRI
   1561e:	f383 8812 	msr	BASEPRI_MAX, r3
   15622:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   15626:	4f14      	ldr	r7, [pc, #80]	; (15678 <z_tick_sleep+0x8c>)
   15628:	68b8      	ldr	r0, [r7, #8]
   1562a:	4b14      	ldr	r3, [pc, #80]	; (1567c <z_tick_sleep+0x90>)
   1562c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1562e:	f7ff fe6d 	bl	1530c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   15632:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15634:	4622      	mov	r2, r4
   15636:	4633      	mov	r3, r6
   15638:	4911      	ldr	r1, [pc, #68]	; (15680 <z_tick_sleep+0x94>)
   1563a:	3018      	adds	r0, #24
   1563c:	f000 f8da 	bl	157f4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15640:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15642:	7b53      	ldrb	r3, [r2, #13]
   15644:	f043 0310 	orr.w	r3, r3, #16
   15648:	7353      	strb	r3, [r2, #13]
   1564a:	4640      	mov	r0, r8
   1564c:	f7f7 faac 	bl	cba8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   15650:	f004 f9c6 	bl	199e0 <sys_clock_tick_get_32>
   15654:	1a28      	subs	r0, r5, r0
   15656:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1565a:	2801      	cmp	r0, #1
   1565c:	f173 0300 	sbcs.w	r3, r3, #0
   15660:	da00      	bge.n	15664 <z_tick_sleep+0x78>
	return 0;
   15662:	2000      	movs	r0, #0
}
   15664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   15668:	f7ff ff7a 	bl	15560 <z_impl_k_yield>
		return 0;
   1566c:	2000      	movs	r0, #0
   1566e:	e7f9      	b.n	15664 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   15670:	f004 f9b6 	bl	199e0 <sys_clock_tick_get_32>
   15674:	1905      	adds	r5, r0, r4
   15676:	e7ce      	b.n	15616 <z_tick_sleep+0x2a>
   15678:	2000268c 	.word	0x2000268c
   1567c:	200026bc 	.word	0x200026bc
   15680:	00019767 	.word	0x00019767

00015684 <z_impl_k_sleep>:
{
   15684:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15686:	f1b1 3fff 	cmp.w	r1, #4294967295
   1568a:	bf08      	it	eq
   1568c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   15690:	d018      	beq.n	156c4 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   15692:	f7ff ffab 	bl	155ec <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   15696:	17c2      	asrs	r2, r0, #31
   15698:	0151      	lsls	r1, r2, #5
   1569a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   1569e:	0143      	lsls	r3, r0, #5
   156a0:	1a1b      	subs	r3, r3, r0
   156a2:	eb61 0102 	sbc.w	r1, r1, r2
   156a6:	0089      	lsls	r1, r1, #2
   156a8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   156ac:	009b      	lsls	r3, r3, #2
   156ae:	181b      	adds	r3, r3, r0
   156b0:	eb42 0201 	adc.w	r2, r2, r1
   156b4:	00d2      	lsls	r2, r2, #3
   156b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   156ba:	f3c3 3310 	ubfx	r3, r3, #12, #17
   156be:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   156c2:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   156c4:	4b03      	ldr	r3, [pc, #12]	; (156d4 <z_impl_k_sleep+0x50>)
   156c6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   156c8:	f7ff feb6 	bl	15438 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   156cc:	f04f 30ff 	mov.w	r0, #4294967295
   156d0:	e7f7      	b.n	156c2 <z_impl_k_sleep+0x3e>
   156d2:	bf00      	nop
   156d4:	2000268c 	.word	0x2000268c

000156d8 <z_impl_z_current_get>:
}
   156d8:	4b01      	ldr	r3, [pc, #4]	; (156e0 <z_impl_z_current_get+0x8>)
   156da:	6898      	ldr	r0, [r3, #8]
   156dc:	4770      	bx	lr
   156de:	bf00      	nop
   156e0:	2000268c 	.word	0x2000268c

000156e4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   156e4:	b570      	push	{r4, r5, r6, lr}
   156e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   156ea:	f3ef 8511 	mrs	r5, BASEPRI
   156ee:	f383 8812 	msr	BASEPRI_MAX, r3
   156f2:	f3bf 8f6f 	isb	sy
   156f6:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   156f8:	7b03      	ldrb	r3, [r0, #12]
   156fa:	f013 0f01 	tst.w	r3, #1
   156fe:	d109      	bne.n	15714 <z_thread_abort+0x30>
   15700:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   15702:	7b43      	ldrb	r3, [r0, #13]
   15704:	f013 0f08 	tst.w	r3, #8
   15708:	d00f      	beq.n	1572a <z_thread_abort+0x46>
	__asm__ volatile(
   1570a:	f385 8811 	msr	BASEPRI, r5
   1570e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   15712:	e009      	b.n	15728 <z_thread_abort+0x44>
   15714:	f385 8811 	msr	BASEPRI, r5
   15718:	f3bf 8f6f 	isb	sy
		k_panic();
   1571c:	4040      	eors	r0, r0
   1571e:	f380 8811 	msr	BASEPRI, r0
   15722:	f04f 0004 	mov.w	r0, #4
   15726:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   15728:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   1572a:	f7ff fedf 	bl	154ec <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1572e:	4b08      	ldr	r3, [pc, #32]	; (15750 <z_thread_abort+0x6c>)
   15730:	689b      	ldr	r3, [r3, #8]
   15732:	42a3      	cmp	r3, r4
   15734:	d004      	beq.n	15740 <z_thread_abort+0x5c>
   15736:	f386 8811 	msr	BASEPRI, r6
   1573a:	f3bf 8f6f 	isb	sy
   1573e:	e7f3      	b.n	15728 <z_thread_abort+0x44>
   15740:	f3ef 8305 	mrs	r3, IPSR
   15744:	2b00      	cmp	r3, #0
   15746:	d1f6      	bne.n	15736 <z_thread_abort+0x52>
   15748:	4628      	mov	r0, r5
   1574a:	f7f7 fa2d 	bl	cba8 <arch_swap>
	return ret;
   1574e:	e7f2      	b.n	15736 <z_thread_abort+0x52>
   15750:	2000268c 	.word	0x2000268c

00015754 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   15754:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   15758:	b083      	sub	sp, #12
   1575a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1575c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   15760:	e9cd bc00 	strd	fp, ip, [sp]
   15764:	f7ff fdee 	bl	15344 <z_pend_curr>

	if (data != NULL) {
   15768:	b11c      	cbz	r4, 15772 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   1576a:	4b03      	ldr	r3, [pc, #12]	; (15778 <z_sched_wait+0x24>)
   1576c:	689b      	ldr	r3, [r3, #8]
   1576e:	695b      	ldr	r3, [r3, #20]
   15770:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   15772:	b003      	add	sp, #12
   15774:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   15778:	2000268c 	.word	0x2000268c

0001577c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1577c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1577e:	4806      	ldr	r0, [pc, #24]	; (15798 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   15780:	4a06      	ldr	r2, [pc, #24]	; (1579c <z_data_copy+0x20>)
   15782:	1a12      	subs	r2, r2, r0
   15784:	4906      	ldr	r1, [pc, #24]	; (157a0 <z_data_copy+0x24>)
   15786:	f003 fcf6 	bl	19176 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1578a:	4a06      	ldr	r2, [pc, #24]	; (157a4 <z_data_copy+0x28>)
   1578c:	4906      	ldr	r1, [pc, #24]	; (157a8 <z_data_copy+0x2c>)
   1578e:	4807      	ldr	r0, [pc, #28]	; (157ac <z_data_copy+0x30>)
   15790:	f003 fcf1 	bl	19176 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   15794:	bd08      	pop	{r3, pc}
   15796:	bf00      	nop
   15798:	20000000 	.word	0x20000000
   1579c:	200004d8 	.word	0x200004d8
   157a0:	0001bcdc 	.word	0x0001bcdc
   157a4:	00000000 	.word	0x00000000
   157a8:	0001bcdc 	.word	0x0001bcdc
   157ac:	20000000 	.word	0x20000000

000157b0 <first>:
	return list->head == list;
   157b0:	4b03      	ldr	r3, [pc, #12]	; (157c0 <first+0x10>)
   157b2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157b4:	4298      	cmp	r0, r3
   157b6:	d000      	beq.n	157ba <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   157b8:	4770      	bx	lr
   157ba:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   157bc:	e7fc      	b.n	157b8 <first+0x8>
   157be:	bf00      	nop
   157c0:	200003b4 	.word	0x200003b4

000157c4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   157c4:	b130      	cbz	r0, 157d4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   157c6:	4a04      	ldr	r2, [pc, #16]	; (157d8 <next+0x14>)
   157c8:	6852      	ldr	r2, [r2, #4]
   157ca:	4290      	cmp	r0, r2
   157cc:	d001      	beq.n	157d2 <next+0xe>
   157ce:	6800      	ldr	r0, [r0, #0]
   157d0:	4770      	bx	lr
   157d2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   157d4:	4770      	bx	lr
   157d6:	bf00      	nop
   157d8:	200003b4 	.word	0x200003b4

000157dc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   157dc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   157de:	4b04      	ldr	r3, [pc, #16]	; (157f0 <elapsed+0x14>)
   157e0:	681b      	ldr	r3, [r3, #0]
   157e2:	b10b      	cbz	r3, 157e8 <elapsed+0xc>
   157e4:	2000      	movs	r0, #0
}
   157e6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   157e8:	f7fc ff7e 	bl	126e8 <sys_clock_elapsed>
   157ec:	e7fb      	b.n	157e6 <elapsed+0xa>
   157ee:	bf00      	nop
   157f0:	200026cc 	.word	0x200026cc

000157f4 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   157f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   157f8:	bf08      	it	eq
   157fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   157fe:	d074      	beq.n	158ea <z_add_timeout+0xf6>
{
   15800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15804:	4604      	mov	r4, r0
   15806:	4692      	mov	sl, r2
   15808:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1580a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1580c:	2300      	movs	r3, #0
	__asm__ volatile(
   1580e:	f04f 0240 	mov.w	r2, #64	; 0x40
   15812:	f3ef 8711 	mrs	r7, BASEPRI
   15816:	f382 8812 	msr	BASEPRI_MAX, r2
   1581a:	f3bf 8f6f 	isb	sy
   1581e:	e026      	b.n	1586e <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   15820:	f11a 0801 	adds.w	r8, sl, #1
   15824:	f145 0900 	adc.w	r9, r5, #0
   15828:	f7ff ffd8 	bl	157dc <elapsed>
   1582c:	eb18 0300 	adds.w	r3, r8, r0
   15830:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   15834:	6123      	str	r3, [r4, #16]
   15836:	6160      	str	r0, [r4, #20]
   15838:	e03b      	b.n	158b2 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1583a:	1a52      	subs	r2, r2, r1
   1583c:	eb66 0303 	sbc.w	r3, r6, r3
   15840:	6102      	str	r2, [r0, #16]
   15842:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   15844:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   15846:	6063      	str	r3, [r4, #4]
	node->next = successor;
   15848:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1584a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1584c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1584e:	e005      	b.n	1585c <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   15850:	4b26      	ldr	r3, [pc, #152]	; (158ec <z_add_timeout+0xf8>)
   15852:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   15854:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   15856:	6062      	str	r2, [r4, #4]
	tail->next = node;
   15858:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1585a:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1585c:	f7ff ffa8 	bl	157b0 <first>
   15860:	4284      	cmp	r4, r0
   15862:	d03a      	beq.n	158da <z_add_timeout+0xe6>
	__asm__ volatile(
   15864:	f387 8811 	msr	BASEPRI, r7
   15868:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1586c:	2301      	movs	r3, #1
   1586e:	2b00      	cmp	r3, #0
   15870:	d139      	bne.n	158e6 <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   15872:	4653      	mov	r3, sl
   15874:	f06f 0101 	mvn.w	r1, #1
   15878:	ebb1 010a 	subs.w	r1, r1, sl
   1587c:	f04f 30ff 	mov.w	r0, #4294967295
   15880:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   15884:	2a00      	cmp	r2, #0
   15886:	dbcb      	blt.n	15820 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   15888:	4a19      	ldr	r2, [pc, #100]	; (158f0 <z_add_timeout+0xfc>)
   1588a:	6811      	ldr	r1, [r2, #0]
   1588c:	6852      	ldr	r2, [r2, #4]
   1588e:	185b      	adds	r3, r3, r1
   15890:	eb42 0205 	adc.w	r2, r2, r5
   15894:	f06f 0101 	mvn.w	r1, #1
   15898:	1ac9      	subs	r1, r1, r3
   1589a:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   1589e:	4608      	mov	r0, r1
   158a0:	461a      	mov	r2, r3
   158a2:	2901      	cmp	r1, #1
   158a4:	f173 0300 	sbcs.w	r3, r3, #0
   158a8:	da01      	bge.n	158ae <z_add_timeout+0xba>
   158aa:	2001      	movs	r0, #1
   158ac:	2200      	movs	r2, #0
   158ae:	6120      	str	r0, [r4, #16]
   158b0:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   158b2:	f7ff ff7d 	bl	157b0 <first>
   158b6:	2800      	cmp	r0, #0
   158b8:	d0ca      	beq.n	15850 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   158ba:	6902      	ldr	r2, [r0, #16]
   158bc:	6946      	ldr	r6, [r0, #20]
   158be:	6921      	ldr	r1, [r4, #16]
   158c0:	6963      	ldr	r3, [r4, #20]
   158c2:	4291      	cmp	r1, r2
   158c4:	eb73 0e06 	sbcs.w	lr, r3, r6
   158c8:	dbb7      	blt.n	1583a <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   158ca:	1a89      	subs	r1, r1, r2
   158cc:	eb63 0306 	sbc.w	r3, r3, r6
   158d0:	6121      	str	r1, [r4, #16]
   158d2:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   158d4:	f7ff ff76 	bl	157c4 <next>
   158d8:	e7ed      	b.n	158b6 <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   158da:	f004 f82f 	bl	1993c <next_timeout>
   158de:	2100      	movs	r1, #0
   158e0:	f7fc fec6 	bl	12670 <sys_clock_set_timeout>
   158e4:	e7be      	b.n	15864 <z_add_timeout+0x70>
		}
	}
}
   158e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   158ea:	4770      	bx	lr
   158ec:	200003b4 	.word	0x200003b4
   158f0:	20001db0 	.word	0x20001db0

000158f4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   158f4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   158f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   158fa:	f3ef 8611 	mrs	r6, BASEPRI
   158fe:	f383 8812 	msr	BASEPRI_MAX, r3
   15902:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   15906:	4b2b      	ldr	r3, [pc, #172]	; (159b4 <sys_clock_announce+0xc0>)
   15908:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   1590a:	f7ff ff51 	bl	157b0 <first>
   1590e:	4604      	mov	r4, r0

	for (t = first();
   15910:	e024      	b.n	1595c <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   15912:	4a29      	ldr	r2, [pc, #164]	; (159b8 <sys_clock_announce+0xc4>)
   15914:	6813      	ldr	r3, [r2, #0]
   15916:	6851      	ldr	r1, [r2, #4]
   15918:	195b      	adds	r3, r3, r5
   1591a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1591e:	6013      	str	r3, [r2, #0]
   15920:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   15922:	2200      	movs	r2, #0
   15924:	2300      	movs	r3, #0
   15926:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1592a:	4620      	mov	r0, r4
   1592c:	f003 ffef 	bl	1990e <remove_timeout>
	__asm__ volatile(
   15930:	f386 8811 	msr	BASEPRI, r6
   15934:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   15938:	68a3      	ldr	r3, [r4, #8]
   1593a:	4620      	mov	r0, r4
   1593c:	4798      	blx	r3
	__asm__ volatile(
   1593e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15942:	f3ef 8611 	mrs	r6, BASEPRI
   15946:	f383 8812 	msr	BASEPRI_MAX, r3
   1594a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1594e:	4a19      	ldr	r2, [pc, #100]	; (159b4 <sys_clock_announce+0xc0>)
   15950:	6813      	ldr	r3, [r2, #0]
   15952:	1b5b      	subs	r3, r3, r5
   15954:	6013      	str	r3, [r2, #0]
	     t = first()) {
   15956:	f7ff ff2b 	bl	157b0 <first>
   1595a:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   1595c:	b13c      	cbz	r4, 1596e <sys_clock_announce+0x7a>
   1595e:	6925      	ldr	r5, [r4, #16]
   15960:	6961      	ldr	r1, [r4, #20]
   15962:	4b14      	ldr	r3, [pc, #80]	; (159b4 <sys_clock_announce+0xc0>)
   15964:	681a      	ldr	r2, [r3, #0]
   15966:	17d3      	asrs	r3, r2, #31
   15968:	42aa      	cmp	r2, r5
   1596a:	418b      	sbcs	r3, r1
   1596c:	dad1      	bge.n	15912 <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   1596e:	b144      	cbz	r4, 15982 <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   15970:	6923      	ldr	r3, [r4, #16]
   15972:	6962      	ldr	r2, [r4, #20]
   15974:	490f      	ldr	r1, [pc, #60]	; (159b4 <sys_clock_announce+0xc0>)
   15976:	6809      	ldr	r1, [r1, #0]
   15978:	1a5b      	subs	r3, r3, r1
   1597a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1597e:	6123      	str	r3, [r4, #16]
   15980:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   15982:	4a0d      	ldr	r2, [pc, #52]	; (159b8 <sys_clock_announce+0xc4>)
   15984:	4d0b      	ldr	r5, [pc, #44]	; (159b4 <sys_clock_announce+0xc0>)
   15986:	6828      	ldr	r0, [r5, #0]
   15988:	6813      	ldr	r3, [r2, #0]
   1598a:	6851      	ldr	r1, [r2, #4]
   1598c:	181b      	adds	r3, r3, r0
   1598e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   15992:	6013      	str	r3, [r2, #0]
   15994:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   15996:	2400      	movs	r4, #0
   15998:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1599a:	f003 ffcf 	bl	1993c <next_timeout>
   1599e:	4621      	mov	r1, r4
   159a0:	f7fc fe66 	bl	12670 <sys_clock_set_timeout>
	__asm__ volatile(
   159a4:	f386 8811 	msr	BASEPRI, r6
   159a8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   159ac:	f7ff fc1a 	bl	151e4 <z_time_slice>
#endif
}
   159b0:	bd70      	pop	{r4, r5, r6, pc}
   159b2:	bf00      	nop
   159b4:	200026cc 	.word	0x200026cc
   159b8:	20001db0 	.word	0x20001db0

000159bc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   159bc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   159be:	2200      	movs	r2, #0
	__asm__ volatile(
   159c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   159c4:	f3ef 8411 	mrs	r4, BASEPRI
   159c8:	f383 8812 	msr	BASEPRI_MAX, r3
   159cc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   159d0:	4613      	mov	r3, r2
   159d2:	4611      	mov	r1, r2
   159d4:	e00c      	b.n	159f0 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   159d6:	f7ff ff01 	bl	157dc <elapsed>
   159da:	4a07      	ldr	r2, [pc, #28]	; (159f8 <sys_clock_tick_get+0x3c>)
   159dc:	6813      	ldr	r3, [r2, #0]
   159de:	6851      	ldr	r1, [r2, #4]
   159e0:	18c3      	adds	r3, r0, r3
   159e2:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   159e6:	f384 8811 	msr	BASEPRI, r4
   159ea:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   159ee:	2201      	movs	r2, #1
   159f0:	2a00      	cmp	r2, #0
   159f2:	d0f0      	beq.n	159d6 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   159f4:	4618      	mov	r0, r3
   159f6:	bd10      	pop	{r4, pc}
   159f8:	20001db0 	.word	0x20001db0

000159fc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   159fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   159fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   15a02:	f3ef 8311 	mrs	r3, BASEPRI
   15a06:	f382 8812 	msr	BASEPRI_MAX, r2
   15a0a:	f3bf 8f6f 	isb	sy
   15a0e:	461a      	mov	r2, r3
   15a10:	461d      	mov	r5, r3
	return node->next != NULL;
   15a12:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   15a14:	b123      	cbz	r3, 15a20 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
   15a16:	f382 8811 	msr	BASEPRI, r2
   15a1a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   15a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15a20:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15a22:	6a82      	ldr	r2, [r0, #40]	; 0x28
   15a24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   15a26:	ea52 0103 	orrs.w	r1, r2, r3
   15a2a:	d005      	beq.n	15a38 <z_timer_expiration_handler+0x3c>
   15a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
   15a30:	bf08      	it	eq
   15a32:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   15a36:	d129      	bne.n	15a8c <z_timer_expiration_handler+0x90>
	timer->status += 1U;
   15a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15a3a:	3301      	adds	r3, #1
   15a3c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   15a3e:	6a23      	ldr	r3, [r4, #32]
   15a40:	b17b      	cbz	r3, 15a62 <z_timer_expiration_handler+0x66>
   15a42:	f385 8811 	msr	BASEPRI, r5
   15a46:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   15a4a:	6a23      	ldr	r3, [r4, #32]
   15a4c:	4620      	mov	r0, r4
   15a4e:	4798      	blx	r3
	__asm__ volatile(
   15a50:	f04f 0240 	mov.w	r2, #64	; 0x40
   15a54:	f3ef 8311 	mrs	r3, BASEPRI
   15a58:	f382 8812 	msr	BASEPRI_MAX, r2
   15a5c:	f3bf 8f6f 	isb	sy
   15a60:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15a62:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   15a66:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a68:	42a3      	cmp	r3, r4
   15a6a:	d03f      	beq.n	15aec <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
   15a6c:	2c00      	cmp	r4, #0
   15a6e:	d03d      	beq.n	15aec <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
   15a70:	4620      	mov	r0, r4
   15a72:	f003 fdc3 	bl	195fc <z_unpend_thread_no_timeout>
   15a76:	2300      	movs	r3, #0
   15a78:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   15a7c:	f385 8811 	msr	BASEPRI, r5
   15a80:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   15a84:	4620      	mov	r0, r4
   15a86:	f003 fe28 	bl	196da <z_ready_thread>
   15a8a:	e7c8      	b.n	15a1e <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
   15a8c:	4616      	mov	r6, r2
   15a8e:	461f      	mov	r7, r3
   15a90:	2a01      	cmp	r2, #1
   15a92:	f173 0300 	sbcs.w	r3, r3, #0
   15a96:	da01      	bge.n	15a9c <z_timer_expiration_handler+0xa0>
   15a98:	2601      	movs	r6, #1
   15a9a:	2700      	movs	r7, #0
   15a9c:	3e01      	subs	r6, #1
   15a9e:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
   15aa2:	f003 ffa1 	bl	199e8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   15aa6:	3001      	adds	r0, #1
   15aa8:	f141 0100 	adc.w	r1, r1, #0
   15aac:	1980      	adds	r0, r0, r6
   15aae:	eb47 0101 	adc.w	r1, r7, r1
   15ab2:	2801      	cmp	r0, #1
   15ab4:	f171 0100 	sbcs.w	r1, r1, #0
   15ab8:	da08      	bge.n	15acc <z_timer_expiration_handler+0xd0>
   15aba:	f06f 0201 	mvn.w	r2, #1
   15abe:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15ac2:	490d      	ldr	r1, [pc, #52]	; (15af8 <z_timer_expiration_handler+0xfc>)
   15ac4:	4620      	mov	r0, r4
   15ac6:	f7ff fe95 	bl	157f4 <z_add_timeout>
   15aca:	e7b5      	b.n	15a38 <z_timer_expiration_handler+0x3c>
   15acc:	f003 ff8c 	bl	199e8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   15ad0:	3001      	adds	r0, #1
   15ad2:	f141 0100 	adc.w	r1, r1, #0
   15ad6:	1980      	adds	r0, r0, r6
   15ad8:	eb47 0301 	adc.w	r3, r7, r1
   15adc:	f06f 0201 	mvn.w	r2, #1
   15ae0:	1a12      	subs	r2, r2, r0
   15ae2:	f04f 31ff 	mov.w	r1, #4294967295
   15ae6:	eb61 0303 	sbc.w	r3, r1, r3
   15aea:	e7ea      	b.n	15ac2 <z_timer_expiration_handler+0xc6>
   15aec:	f385 8811 	msr	BASEPRI, r5
   15af0:	f3bf 8f6f 	isb	sy
		return;
   15af4:	e793      	b.n	15a1e <z_timer_expiration_handler+0x22>
   15af6:	bf00      	nop
   15af8:	000159fd 	.word	0x000159fd

00015afc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   15afc:	b570      	push	{r4, r5, r6, lr}
   15afe:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   15b00:	f1b3 3fff 	cmp.w	r3, #4294967295
   15b04:	bf08      	it	eq
   15b06:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   15b0a:	d01a      	beq.n	15b42 <z_impl_k_timer_start+0x46>
   15b0c:	4606      	mov	r6, r0
   15b0e:	4614      	mov	r4, r2
   15b10:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   15b12:	f06f 0201 	mvn.w	r2, #1
   15b16:	1b12      	subs	r2, r2, r4
   15b18:	f04f 32ff 	mov.w	r2, #4294967295
   15b1c:	eb62 0203 	sbc.w	r2, r2, r3
   15b20:	2a00      	cmp	r2, #0
   15b22:	db0f      	blt.n	15b44 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   15b24:	4630      	mov	r0, r6
   15b26:	f003 ff26 	bl	19976 <z_abort_timeout>
	timer->period = period;
   15b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15b2e:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
   15b32:	2300      	movs	r3, #0
   15b34:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15b36:	4622      	mov	r2, r4
   15b38:	462b      	mov	r3, r5
   15b3a:	4907      	ldr	r1, [pc, #28]	; (15b58 <z_impl_k_timer_start+0x5c>)
   15b3c:	4630      	mov	r0, r6
   15b3e:	f7ff fe59 	bl	157f4 <z_add_timeout>
		     duration);
}
   15b42:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
   15b44:	2c01      	cmp	r4, #1
   15b46:	f171 0100 	sbcs.w	r1, r1, #0
   15b4a:	da01      	bge.n	15b50 <z_impl_k_timer_start+0x54>
   15b4c:	2401      	movs	r4, #1
   15b4e:	2500      	movs	r5, #0
   15b50:	3c01      	subs	r4, #1
   15b52:	f145 35ff 	adc.w	r5, r5, #4294967295
   15b56:	e7e5      	b.n	15b24 <z_impl_k_timer_start+0x28>
   15b58:	000159fd 	.word	0x000159fd

00015b5c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   15b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b60:	b083      	sub	sp, #12
   15b62:	4607      	mov	r7, r0
   15b64:	4616      	mov	r6, r2
   15b66:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   15b68:	4b28      	ldr	r3, [pc, #160]	; (15c0c <z_impl_k_poll+0xb0>)
   15b6a:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   15b6c:	2301      	movs	r3, #1
   15b6e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   15b72:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   15b76:	ea55 0302 	orrs.w	r3, r5, r2
   15b7a:	bf0c      	ite	eq
   15b7c:	2301      	moveq	r3, #1
   15b7e:	2300      	movne	r3, #0
   15b80:	f104 0260 	add.w	r2, r4, #96	; 0x60
   15b84:	f004 f86a 	bl	19c5c <register_events>
   15b88:	4680      	mov	r8, r0
	__asm__ volatile(
   15b8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15b8e:	f3ef 8111 	mrs	r1, BASEPRI
   15b92:	f383 8812 	msr	BASEPRI_MAX, r3
   15b96:	f3bf 8f6f 	isb	sy
   15b9a:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   15b9c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   15ba0:	b30b      	cbz	r3, 15be6 <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   15ba2:	2300      	movs	r3, #0
   15ba4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15ba8:	ea55 0306 	orrs.w	r3, r5, r6
   15bac:	d026      	beq.n	15bfc <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   15bae:	9600      	str	r6, [sp, #0]
   15bb0:	9501      	str	r5, [sp, #4]
   15bb2:	4a17      	ldr	r2, [pc, #92]	; (15c10 <z_impl_k_poll+0xb4>)
   15bb4:	4817      	ldr	r0, [pc, #92]	; (15c14 <z_impl_k_poll+0xb8>)
   15bb6:	f7ff fbc5 	bl	15344 <z_pend_curr>
   15bba:	4604      	mov	r4, r0
   15bbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   15bc0:	f3ef 8211 	mrs	r2, BASEPRI
   15bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   15bc8:	f3bf 8f6f 	isb	sy
   15bcc:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   15bce:	4641      	mov	r1, r8
   15bd0:	4638      	mov	r0, r7
   15bd2:	f003 ffb7 	bl	19b44 <clear_event_registrations>
	__asm__ volatile(
   15bd6:	f385 8811 	msr	BASEPRI, r5
   15bda:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   15bde:	4620      	mov	r0, r4
   15be0:	b003      	add	sp, #12
   15be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   15be6:	460a      	mov	r2, r1
   15be8:	4601      	mov	r1, r0
   15bea:	4638      	mov	r0, r7
   15bec:	f003 ffaa 	bl	19b44 <clear_event_registrations>
   15bf0:	f389 8811 	msr	BASEPRI, r9
   15bf4:	f3bf 8f6f 	isb	sy
		return 0;
   15bf8:	2400      	movs	r4, #0
   15bfa:	e7f0      	b.n	15bde <z_impl_k_poll+0x82>
   15bfc:	f381 8811 	msr	BASEPRI, r1
   15c00:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   15c04:	f06f 040a 	mvn.w	r4, #10
   15c08:	e7e9      	b.n	15bde <z_impl_k_poll+0x82>
   15c0a:	bf00      	nop
   15c0c:	2000268c 	.word	0x2000268c
   15c10:	200003bc 	.word	0x200003bc
   15c14:	200026d0 	.word	0x200026d0

00015c18 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   15c18:	b538      	push	{r3, r4, r5, lr}
   15c1a:	4603      	mov	r3, r0
	__asm__ volatile(
   15c1c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15c20:	f3ef 8511 	mrs	r5, BASEPRI
   15c24:	f382 8812 	msr	BASEPRI_MAX, r2
   15c28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   15c2c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   15c2e:	2201      	movs	r2, #1
   15c30:	6082      	str	r2, [r0, #8]
	return list->head == list;
   15c32:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15c34:	4283      	cmp	r3, r0
   15c36:	d010      	beq.n	15c5a <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   15c38:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   15c3a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   15c3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15c3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15c40:	2300      	movs	r3, #0
   15c42:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15c44:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15c46:	2101      	movs	r1, #1
   15c48:	f004 f892 	bl	19d70 <signal_poll_event>
   15c4c:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   15c4e:	4629      	mov	r1, r5
   15c50:	4805      	ldr	r0, [pc, #20]	; (15c68 <z_impl_k_poll_signal_raise+0x50>)
   15c52:	f7ff fa29 	bl	150a8 <z_reschedule>
	return rc;
}
   15c56:	4620      	mov	r0, r4
   15c58:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15c5a:	f385 8811 	msr	BASEPRI, r5
   15c5e:	f3bf 8f6f 	isb	sy
		return 0;
   15c62:	2400      	movs	r4, #0
   15c64:	e7f7      	b.n	15c56 <z_impl_k_poll_signal_raise+0x3e>
   15c66:	bf00      	nop
   15c68:	200026d0 	.word	0x200026d0

00015c6c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   15c6c:	b538      	push	{r3, r4, r5, lr}
   15c6e:	4604      	mov	r4, r0
   15c70:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   15c72:	f003 fb12 	bl	1929a <k_is_in_isr>
   15c76:	b948      	cbnz	r0, 15c8c <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   15c78:	4b05      	ldr	r3, [pc, #20]	; (15c90 <z_thread_aligned_alloc+0x24>)
   15c7a:	689b      	ldr	r3, [r3, #8]
   15c7c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   15c80:	b118      	cbz	r0, 15c8a <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   15c82:	462a      	mov	r2, r5
   15c84:	4621      	mov	r1, r4
   15c86:	f004 f8a4 	bl	19dd2 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   15c8a:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   15c8c:	2000      	movs	r0, #0
	return ret;
   15c8e:	e7fc      	b.n	15c8a <z_thread_aligned_alloc+0x1e>
   15c90:	2000268c 	.word	0x2000268c

00015c94 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   15c94:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   15c96:	4802      	ldr	r0, [pc, #8]	; (15ca0 <boot_banner+0xc>)
   15c98:	f000 f953 	bl	15f42 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   15c9c:	bd08      	pop	{r3, pc}
   15c9e:	bf00      	nop
   15ca0:	0001bca0 	.word	0x0001bca0

00015ca4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   15ca4:	b510      	push	{r4, lr}
   15ca6:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
   15ca8:	4b08      	ldr	r3, [pc, #32]	; (15ccc <k_sys_work_q_init+0x28>)
   15caa:	9302      	str	r3, [sp, #8]
   15cac:	2400      	movs	r4, #0
   15cae:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   15cb2:	ab02      	add	r3, sp, #8
   15cb4:	9300      	str	r3, [sp, #0]
   15cb6:	f04f 33ff 	mov.w	r3, #4294967295
   15cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15cbe:	4904      	ldr	r1, [pc, #16]	; (15cd0 <k_sys_work_q_init+0x2c>)
   15cc0:	4804      	ldr	r0, [pc, #16]	; (15cd4 <k_sys_work_q_init+0x30>)
   15cc2:	f7ff f945 	bl	14f50 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   15cc6:	4620      	mov	r0, r4
   15cc8:	b004      	add	sp, #16
   15cca:	bd10      	pop	{r4, pc}
   15ccc:	0001bcd0 	.word	0x0001bcd0
   15cd0:	20004700 	.word	0x20004700
   15cd4:	20001db8 	.word	0x20001db8

00015cd8 <z_impl_gpio_pin_configure>:
{
   15cd8:	b538      	push	{r3, r4, r5, lr}
   15cda:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   15cdc:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   15cde:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   15ce0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   15ce4:	d007      	beq.n	15cf6 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   15ce6:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   15cea:	d004      	beq.n	15cf6 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   15cec:	f012 0f01 	tst.w	r2, #1
   15cf0:	d001      	beq.n	15cf6 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   15cf2:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   15cf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   15cfa:	f013 0f01 	tst.w	r3, #1
   15cfe:	d00a      	beq.n	15d16 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   15d00:	6823      	ldr	r3, [r4, #0]
   15d02:	f04f 0c01 	mov.w	ip, #1
   15d06:	fa0c fc01 	lsl.w	ip, ip, r1
   15d0a:	ea43 030c 	orr.w	r3, r3, ip
   15d0e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   15d10:	682b      	ldr	r3, [r5, #0]
   15d12:	4798      	blx	r3
}
   15d14:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15d16:	6823      	ldr	r3, [r4, #0]
   15d18:	f04f 0c01 	mov.w	ip, #1
   15d1c:	fa0c fc01 	lsl.w	ip, ip, r1
   15d20:	ea23 030c 	bic.w	r3, r3, ip
   15d24:	6023      	str	r3, [r4, #0]
   15d26:	e7f3      	b.n	15d10 <z_impl_gpio_pin_configure+0x38>

00015d28 <gpio_pin_configure_dt>:
{
   15d28:	b508      	push	{r3, lr}
   15d2a:	4603      	mov	r3, r0
   15d2c:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   15d2e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   15d30:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   15d32:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   15d34:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   15d38:	f7ff ffce 	bl	15cd8 <z_impl_gpio_pin_configure>
}
   15d3c:	bd08      	pop	{r3, pc}

00015d3e <gpio_pin_set_raw>:
{
   15d3e:	b508      	push	{r3, lr}
	if (value != 0)	{
   15d40:	b132      	cbz	r2, 15d50 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   15d42:	2301      	movs	r3, #1
   15d44:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   15d48:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   15d4a:	68db      	ldr	r3, [r3, #12]
   15d4c:	4798      	blx	r3
}
   15d4e:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   15d50:	2301      	movs	r3, #1
   15d52:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   15d56:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   15d58:	691b      	ldr	r3, [r3, #16]
   15d5a:	4798      	blx	r3
	return ret;
   15d5c:	e7f7      	b.n	15d4e <gpio_pin_set_raw+0x10>

00015d5e <gpio_pin_set>:
{
   15d5e:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   15d60:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   15d62:	681c      	ldr	r4, [r3, #0]
   15d64:	2301      	movs	r3, #1
   15d66:	408b      	lsls	r3, r1
   15d68:	421c      	tst	r4, r3
   15d6a:	d002      	beq.n	15d72 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   15d6c:	fab2 f282 	clz	r2, r2
   15d70:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   15d72:	f7ff ffe4 	bl	15d3e <gpio_pin_set_raw>
}
   15d76:	bd10      	pop	{r4, pc}

00015d78 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
   15d78:	b508      	push	{r3, lr}
   15d7a:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
   15d7c:	6800      	ldr	r0, [r0, #0]
   15d7e:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   15d80:	2101      	movs	r1, #1
   15d82:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
   15d84:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   15d86:	695b      	ldr	r3, [r3, #20]
   15d88:	4798      	blx	r3
}
   15d8a:	bd08      	pop	{r3, pc}

00015d8c <i2c_write_read>:
 * @retval negative on error.
 */
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
   15d8c:	b510      	push	{r4, lr}
   15d8e:	b086      	sub	sp, #24
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   15d90:	9200      	str	r2, [sp, #0]
	msg[0].len = num_write;
   15d92:	9301      	str	r3, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   15d94:	2300      	movs	r3, #0
   15d96:	f88d 3008 	strb.w	r3, [sp, #8]

	msg[1].buf = (uint8_t *)read_buf;
   15d9a:	9b08      	ldr	r3, [sp, #32]
   15d9c:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
   15d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15da0:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   15da2:	2307      	movs	r3, #7
   15da4:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   15da8:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   15daa:	689c      	ldr	r4, [r3, #8]
   15dac:	460b      	mov	r3, r1
   15dae:	2202      	movs	r2, #2
   15db0:	4669      	mov	r1, sp
   15db2:	47a0      	blx	r4

	return i2c_transfer(dev, msg, 2, addr);
}
   15db4:	b006      	add	sp, #24
   15db6:	bd10      	pop	{r4, pc}

00015db8 <k_msleep>:
{
   15db8:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   15dba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   15dbe:	17c1      	asrs	r1, r0, #31
   15dc0:	03c9      	lsls	r1, r1, #15
   15dc2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   15dc6:	03c0      	lsls	r0, r0, #15
   15dc8:	f240 33e7 	movw	r3, #999	; 0x3e7
   15dcc:	18c0      	adds	r0, r0, r3
   15dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15dd2:	f04f 0300 	mov.w	r3, #0
   15dd6:	f141 0100 	adc.w	r1, r1, #0
   15dda:	f7ea f97f 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   15dde:	f7ff fc51 	bl	15684 <z_impl_k_sleep>
}
   15de2:	bd08      	pop	{r3, pc}

00015de4 <cbprintf_via_va_list>:
{
   15de4:	b510      	push	{r4, lr}
   15de6:	460c      	mov	r4, r1
   15de8:	4611      	mov	r1, r2
   15dea:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   15dec:	9b02      	ldr	r3, [sp, #8]
   15dee:	47a0      	blx	r4
}
   15df0:	bd10      	pop	{r4, pc}

00015df2 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   15df2:	3840      	subs	r0, #64	; 0x40
   15df4:	b2c0      	uxtb	r0, r0
}
   15df6:	283a      	cmp	r0, #58	; 0x3a
   15df8:	bf8c      	ite	hi
   15dfa:	2000      	movhi	r0, #0
   15dfc:	2001      	movls	r0, #1
   15dfe:	4770      	bx	lr

00015e00 <get_package_len>:
{
   15e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e02:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   15e04:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   15e06:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   15e08:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   15e0a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   15e0e:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
   15e10:	2700      	movs	r7, #0
   15e12:	e006      	b.n	15e22 <get_package_len+0x22>
		buf++;
   15e14:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   15e16:	4620      	mov	r0, r4
   15e18:	f001 fbd2 	bl	175c0 <strlen>
   15e1c:	3001      	adds	r0, #1
   15e1e:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
   15e20:	3701      	adds	r7, #1
   15e22:	42af      	cmp	r7, r5
   15e24:	d3f6      	bcc.n	15e14 <get_package_len+0x14>
}
   15e26:	1ba0      	subs	r0, r4, r6
   15e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015e2a <append_string>:
{
   15e2a:	b570      	push	{r4, r5, r6, lr}
   15e2c:	4614      	mov	r4, r2
	if (cb == NULL) {
   15e2e:	b138      	cbz	r0, 15e40 <append_string+0x16>
   15e30:	460d      	mov	r5, r1
   15e32:	4619      	mov	r1, r3
   15e34:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   15e36:	b143      	cbz	r3, 15e4a <append_string+0x20>
	return cb(str, strl, ctx);
   15e38:	462a      	mov	r2, r5
   15e3a:	4620      	mov	r0, r4
   15e3c:	47b0      	blx	r6
}
   15e3e:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   15e40:	4610      	mov	r0, r2
   15e42:	f001 fbbd 	bl	175c0 <strlen>
   15e46:	3001      	adds	r0, #1
   15e48:	e7f9      	b.n	15e3e <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   15e4a:	4610      	mov	r0, r2
   15e4c:	f001 fbb8 	bl	175c0 <strlen>
   15e50:	b283      	uxth	r3, r0
   15e52:	3301      	adds	r3, #1
   15e54:	b299      	uxth	r1, r3
   15e56:	e7ef      	b.n	15e38 <append_string+0xe>

00015e58 <cbpprintf_external>:
	if (buf == NULL) {
   15e58:	b35b      	cbz	r3, 15eb2 <cbpprintf_external+0x5a>
{
   15e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e5e:	b082      	sub	sp, #8
   15e60:	4607      	mov	r7, r0
   15e62:	4688      	mov	r8, r1
   15e64:	4691      	mov	r9, r2
   15e66:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   15e68:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   15e6a:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   15e6c:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   15e6e:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   15e70:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   15e74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   15e78:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   15e7a:	f04f 0a00 	mov.w	sl, #0
   15e7e:	e00a      	b.n	15e96 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   15e80:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   15e84:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   15e88:	4620      	mov	r0, r4
   15e8a:	f001 fb99 	bl	175c0 <strlen>
   15e8e:	3001      	adds	r0, #1
   15e90:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   15e92:	f10a 0a01 	add.w	sl, sl, #1
   15e96:	45b2      	cmp	sl, r6
   15e98:	d3f2      	bcc.n	15e80 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   15e9a:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   15e9e:	9300      	str	r3, [sp, #0]
   15ea0:	686b      	ldr	r3, [r5, #4]
   15ea2:	464a      	mov	r2, r9
   15ea4:	4641      	mov	r1, r8
   15ea6:	4638      	mov	r0, r7
   15ea8:	f7ff ff9c 	bl	15de4 <cbprintf_via_va_list>
}
   15eac:	b002      	add	sp, #8
   15eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   15eb2:	f06f 0015 	mvn.w	r0, #21
}
   15eb6:	4770      	bx	lr

00015eb8 <is_ptr>:
{
   15eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ebc:	4604      	mov	r4, r0
   15ebe:	4688      	mov	r8, r1
	int cnt = 0;
   15ec0:	2700      	movs	r7, #0
	bool mod = false;
   15ec2:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   15ec4:	e007      	b.n	15ed6 <is_ptr+0x1e>
				if (c == 'p') {
   15ec6:	2d70      	cmp	r5, #112	; 0x70
   15ec8:	d018      	beq.n	15efc <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   15eca:	4628      	mov	r0, r5
   15ecc:	f7ff ff91 	bl	15df2 <is_fmt_spec>
   15ed0:	b9b8      	cbnz	r0, 15f02 <is_ptr+0x4a>
		if (c == '%') {
   15ed2:	2d25      	cmp	r5, #37	; 0x25
   15ed4:	d00e      	beq.n	15ef4 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   15ed6:	f814 5b01 	ldrb.w	r5, [r4], #1
   15eda:	b175      	cbz	r5, 15efa <is_ptr+0x42>
		if (mod) {
   15edc:	2e00      	cmp	r6, #0
   15ede:	d0f8      	beq.n	15ed2 <is_ptr+0x1a>
			if (cnt == n) {
   15ee0:	4547      	cmp	r7, r8
   15ee2:	d0f0      	beq.n	15ec6 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   15ee4:	4628      	mov	r0, r5
   15ee6:	f7ff ff84 	bl	15df2 <is_fmt_spec>
   15eea:	2800      	cmp	r0, #0
   15eec:	d0f1      	beq.n	15ed2 <is_ptr+0x1a>
				cnt++;
   15eee:	3701      	adds	r7, #1
				mod = false;
   15ef0:	2600      	movs	r6, #0
   15ef2:	e7ee      	b.n	15ed2 <is_ptr+0x1a>
			mod = !mod;
   15ef4:	f086 0601 	eor.w	r6, r6, #1
   15ef8:	e7ed      	b.n	15ed6 <is_ptr+0x1e>
	return false;
   15efa:	2600      	movs	r6, #0
}
   15efc:	4630      	mov	r0, r6
   15efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   15f02:	2600      	movs	r6, #0
   15f04:	e7fa      	b.n	15efc <is_ptr+0x44>

00015f06 <arch_printk_char_out>:
}
   15f06:	2000      	movs	r0, #0
   15f08:	4770      	bx	lr

00015f0a <str_out>:
{
   15f0a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   15f0c:	680c      	ldr	r4, [r1, #0]
   15f0e:	b154      	cbz	r4, 15f26 <str_out+0x1c>
   15f10:	688a      	ldr	r2, [r1, #8]
   15f12:	684b      	ldr	r3, [r1, #4]
   15f14:	429a      	cmp	r2, r3
   15f16:	da06      	bge.n	15f26 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   15f18:	3b01      	subs	r3, #1
   15f1a:	429a      	cmp	r2, r3
   15f1c:	d008      	beq.n	15f30 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   15f1e:	1c53      	adds	r3, r2, #1
   15f20:	608b      	str	r3, [r1, #8]
   15f22:	54a0      	strb	r0, [r4, r2]
   15f24:	e002      	b.n	15f2c <str_out+0x22>
		ctx->count++;
   15f26:	688b      	ldr	r3, [r1, #8]
   15f28:	3301      	adds	r3, #1
   15f2a:	608b      	str	r3, [r1, #8]
}
   15f2c:	bc10      	pop	{r4}
   15f2e:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   15f30:	1c53      	adds	r3, r2, #1
   15f32:	608b      	str	r3, [r1, #8]
   15f34:	2300      	movs	r3, #0
   15f36:	54a3      	strb	r3, [r4, r2]
   15f38:	e7f8      	b.n	15f2c <str_out+0x22>

00015f3a <vprintk>:
{
   15f3a:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   15f3c:	f001 f92f 	bl	1719e <z_log_vprintk>
}
   15f40:	bd08      	pop	{r3, pc}

00015f42 <printk>:
{
   15f42:	b40f      	push	{r0, r1, r2, r3}
   15f44:	b500      	push	{lr}
   15f46:	b083      	sub	sp, #12
   15f48:	a904      	add	r1, sp, #16
   15f4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   15f4e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   15f50:	f7ff fff3 	bl	15f3a <vprintk>
}
   15f54:	b003      	add	sp, #12
   15f56:	f85d eb04 	ldr.w	lr, [sp], #4
   15f5a:	b004      	add	sp, #16
   15f5c:	4770      	bx	lr

00015f5e <snprintk>:
{
   15f5e:	b40c      	push	{r2, r3}
   15f60:	b500      	push	{lr}
   15f62:	b083      	sub	sp, #12
   15f64:	ab04      	add	r3, sp, #16
   15f66:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   15f6a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   15f6c:	f7f5 f862 	bl	b034 <vsnprintk>
}
   15f70:	b003      	add	sp, #12
   15f72:	f85d eb04 	ldr.w	lr, [sp], #4
   15f76:	b002      	add	sp, #8
   15f78:	4770      	bx	lr

00015f7a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   15f7a:	b508      	push	{r3, lr}
   15f7c:	4604      	mov	r4, r0
   15f7e:	4608      	mov	r0, r1
   15f80:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   15f82:	461a      	mov	r2, r3
   15f84:	47a0      	blx	r4
	return z_impl_z_current_get();
   15f86:	f7ff fba7 	bl	156d8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   15f8a:	f7f8 f92d 	bl	e1e8 <z_impl_k_thread_abort>

00015f8e <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   15f8e:	00c9      	lsls	r1, r1, #3
   15f90:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   15f92:	4408      	add	r0, r1
   15f94:	4770      	bx	lr

00015f96 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15f96:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   15f9a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   15f9e:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   15fa0:	4299      	cmp	r1, r3
   15fa2:	d00c      	beq.n	15fbe <free_list_remove_bidx+0x28>
   15fa4:	4484      	add	ip, r0
   15fa6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   15faa:	3204      	adds	r2, #4
   15fac:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15fb0:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   15fb2:	3206      	adds	r2, #6
   15fb4:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   15fb6:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   15fb8:	3304      	adds	r3, #4
   15fba:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   15fbc:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   15fbe:	68c3      	ldr	r3, [r0, #12]
   15fc0:	2101      	movs	r1, #1
   15fc2:	4091      	lsls	r1, r2
   15fc4:	ea23 0301 	bic.w	r3, r3, r1
   15fc8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   15fca:	3204      	adds	r2, #4
   15fcc:	2300      	movs	r3, #0
   15fce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   15fd2:	4770      	bx	lr

00015fd4 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   15fd4:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   15fd6:	1d13      	adds	r3, r2, #4
   15fd8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   15fdc:	b974      	cbnz	r4, 15ffc <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   15fde:	68c3      	ldr	r3, [r0, #12]
   15fe0:	2401      	movs	r4, #1
   15fe2:	4094      	lsls	r4, r2
   15fe4:	4323      	orrs	r3, r4
   15fe6:	60c3      	str	r3, [r0, #12]
		b->next = c;
   15fe8:	3204      	adds	r2, #4
   15fea:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   15fee:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   15ff0:	1d1a      	adds	r2, r3, #4
   15ff2:	b289      	uxth	r1, r1
   15ff4:	5281      	strh	r1, [r0, r2]
   15ff6:	3306      	adds	r3, #6
   15ff8:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   15ffa:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   15ffc:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   15ffe:	3204      	adds	r2, #4
   16000:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   16002:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   16006:	f10c 0e04 	add.w	lr, ip, #4
   1600a:	f820 300e 	strh.w	r3, [r0, lr]
   1600e:	f10c 0c06 	add.w	ip, ip, #6
   16012:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   16016:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   16018:	3306      	adds	r3, #6
   1601a:	b289      	uxth	r1, r1
   1601c:	52c1      	strh	r1, [r0, r3]
   1601e:	5281      	strh	r1, [r0, r2]
   16020:	e7eb      	b.n	15ffa <free_list_add_bidx+0x26>

00016022 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   16022:	b500      	push	{lr}
	void *cmem = &buf[c];
   16024:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   16026:	3302      	adds	r3, #2
   16028:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1602c:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   16030:	1a89      	subs	r1, r1, r2
   16032:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16036:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   1603a:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1603e:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   16042:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   16044:	3302      	adds	r3, #2
   16046:	f820 e003 	strh.w	lr, [r0, r3]
   1604a:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   1604e:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   16050:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   16054:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   16058:	f85d fb04 	ldr.w	pc, [sp], #4

0001605c <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1605c:	b500      	push	{lr}
	void *cmem = &buf[c];
   1605e:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   16060:	3102      	adds	r1, #2
   16062:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   16066:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   1606a:	f10c 0c02 	add.w	ip, ip, #2
   1606e:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   16072:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16074:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16078:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   1607c:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   16080:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   16084:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   16088:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1608c:	f85d fb04 	ldr.w	pc, [sp], #4

00016090 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16090:	3904      	subs	r1, #4
   16092:	1a08      	subs	r0, r1, r0
}
   16094:	08c0      	lsrs	r0, r0, #3
   16096:	4770      	bx	lr

00016098 <free_list_remove>:
{
   16098:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1609a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1609e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   160a0:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   160a2:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   160a6:	f1c2 021f 	rsb	r2, r2, #31
   160aa:	f7ff ff74 	bl	15f96 <free_list_remove_bidx>
}
   160ae:	bd08      	pop	{r3, pc}

000160b0 <free_list_add>:
{
   160b0:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   160b2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   160b6:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   160b8:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   160ba:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   160be:	f1c2 021f 	rsb	r2, r2, #31
   160c2:	f7ff ff87 	bl	15fd4 <free_list_add_bidx>
}
   160c6:	bd08      	pop	{r3, pc}

000160c8 <free_chunk>:
{
   160c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160ca:	4604      	mov	r4, r0
   160cc:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   160ce:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   160d0:	1cb7      	adds	r7, r6, #2
   160d2:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   160d4:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   160d8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   160dc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   160de:	f013 0f01 	tst.w	r3, #1
   160e2:	d00c      	beq.n	160fe <free_chunk+0x36>
   160e4:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   160e6:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   160e8:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   160ec:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   160ee:	f013 0f01 	tst.w	r3, #1
   160f2:	d00e      	beq.n	16112 <free_chunk+0x4a>
	free_list_add(h, c);
   160f4:	4629      	mov	r1, r5
   160f6:	4620      	mov	r0, r4
   160f8:	f7ff ffda 	bl	160b0 <free_list_add>
}
   160fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   160fe:	f7ff ffcb 	bl	16098 <free_list_remove>
   16102:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   16104:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   16108:	4629      	mov	r1, r5
   1610a:	4620      	mov	r0, r4
   1610c:	f7ff ffa6 	bl	1605c <merge_chunks>
   16110:	e7e8      	b.n	160e4 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   16112:	4620      	mov	r0, r4
   16114:	f7ff ffc0 	bl	16098 <free_list_remove>
   16118:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1611a:	462a      	mov	r2, r5
   1611c:	1a69      	subs	r1, r5, r1
   1611e:	4620      	mov	r0, r4
   16120:	f7ff ff9c 	bl	1605c <merge_chunks>
   16124:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   16126:	1aed      	subs	r5, r5, r3
   16128:	e7e4      	b.n	160f4 <free_chunk+0x2c>

0001612a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1612a:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   1612c:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   16130:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   16134:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   16138:	b1cd      	cbz	r5, 1616e <alloc_chunk+0x44>
   1613a:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1613e:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   16142:	1d14      	adds	r4, r2, #4
   16144:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   16148:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   1614c:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   16150:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   16152:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   16156:	d914      	bls.n	16182 <alloc_chunk+0x58>
   16158:	4484      	add	ip, r0
   1615a:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   1615e:	1d16      	adds	r6, r2, #4
   16160:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   16164:	f1be 0e01 	subs.w	lr, lr, #1
   16168:	d001      	beq.n	1616e <alloc_chunk+0x44>
   1616a:	42a5      	cmp	r5, r4
   1616c:	d1e9      	bne.n	16142 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1616e:	68c4      	ldr	r4, [r0, #12]
   16170:	f1c3 0220 	rsb	r2, r3, #32
   16174:	2301      	movs	r3, #1
   16176:	4093      	lsls	r3, r2
   16178:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1617a:	401c      	ands	r4, r3
   1617c:	d105      	bne.n	1618a <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1617e:	4620      	mov	r0, r4
   16180:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   16182:	4621      	mov	r1, r4
   16184:	f7ff ff07 	bl	15f96 <free_list_remove_bidx>
				return c;
   16188:	e7f9      	b.n	1617e <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   1618a:	fa94 f2a4 	rbit	r2, r4
   1618e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   16192:	1d13      	adds	r3, r2, #4
   16194:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   16198:	4621      	mov	r1, r4
   1619a:	f7ff fefc 	bl	15f96 <free_list_remove_bidx>
		return c;
   1619e:	e7ee      	b.n	1617e <alloc_chunk+0x54>

000161a0 <sys_heap_free>:
	if (mem == NULL) {
   161a0:	b179      	cbz	r1, 161c2 <sys_heap_free+0x22>
{
   161a2:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   161a4:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   161a6:	4620      	mov	r0, r4
   161a8:	f7ff ff72 	bl	16090 <mem_to_chunkid>
   161ac:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   161ae:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   161b2:	8853      	ldrh	r3, [r2, #2]
   161b4:	f023 0301 	bic.w	r3, r3, #1
   161b8:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   161ba:	4620      	mov	r0, r4
   161bc:	f7ff ff84 	bl	160c8 <free_chunk>
}
   161c0:	bd10      	pop	{r4, pc}
   161c2:	4770      	bx	lr

000161c4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   161c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   161c6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   161c8:	b341      	cbz	r1, 1621c <sys_heap_alloc+0x58>
   161ca:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   161cc:	68aa      	ldr	r2, [r5, #8]
   161ce:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   161d2:	d925      	bls.n	16220 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   161d4:	330b      	adds	r3, #11
   161d6:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   161d8:	4621      	mov	r1, r4
   161da:	4628      	mov	r0, r5
   161dc:	f7ff ffa5 	bl	1612a <alloc_chunk>
	if (c == 0U) {
   161e0:	4607      	mov	r7, r0
   161e2:	b1f8      	cbz	r0, 16224 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   161e4:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   161e6:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   161ea:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   161ec:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   161f0:	d309      	bcc.n	16206 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   161f2:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   161f4:	885a      	ldrh	r2, [r3, #2]
   161f6:	f042 0201 	orr.w	r2, r2, #1
   161fa:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   161fc:	4639      	mov	r1, r7
   161fe:	4628      	mov	r0, r5
   16200:	f7ff fec5 	bl	15f8e <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   16206:	4404      	add	r4, r0
   16208:	4622      	mov	r2, r4
   1620a:	4601      	mov	r1, r0
   1620c:	4628      	mov	r0, r5
   1620e:	f7ff ff08 	bl	16022 <split_chunks>
		free_list_add(h, c + chunk_sz);
   16212:	4621      	mov	r1, r4
   16214:	4628      	mov	r0, r5
   16216:	f7ff ff4b 	bl	160b0 <free_list_add>
   1621a:	e7ea      	b.n	161f2 <sys_heap_alloc+0x2e>
		return NULL;
   1621c:	2000      	movs	r0, #0
   1621e:	e7f1      	b.n	16204 <sys_heap_alloc+0x40>
   16220:	2000      	movs	r0, #0
   16222:	e7ef      	b.n	16204 <sys_heap_alloc+0x40>
		return NULL;
   16224:	2000      	movs	r0, #0
   16226:	e7ed      	b.n	16204 <sys_heap_alloc+0x40>

00016228 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   16228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1622c:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   1622e:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   16230:	424b      	negs	r3, r1
   16232:	400b      	ands	r3, r1
	if (align != rew) {
   16234:	f101 39ff 	add.w	r9, r1, #4294967295
   16238:	ea19 0901 	ands.w	r9, r9, r1
   1623c:	d004      	beq.n	16248 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1623e:	2b03      	cmp	r3, #3
   16240:	d847      	bhi.n	162d2 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   16242:	464c      	mov	r4, r9
	rew = align & -align;
   16244:	4699      	mov	r9, r3
   16246:	e003      	b.n	16250 <sys_heap_aligned_alloc+0x28>
   16248:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   1624a:	2904      	cmp	r1, #4
   1624c:	d93c      	bls.n	162c8 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   1624e:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16250:	2d00      	cmp	r5, #0
   16252:	d056      	beq.n	16302 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   16254:	68b2      	ldr	r2, [r6, #8]
   16256:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   1625a:	d955      	bls.n	16308 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1625c:	1961      	adds	r1, r4, r5
   1625e:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16260:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16262:	08c9      	lsrs	r1, r1, #3
   16264:	4630      	mov	r0, r6
   16266:	f7ff ff60 	bl	1612a <alloc_chunk>

	if (c0 == 0) {
   1626a:	4607      	mov	r7, r0
   1626c:	2800      	cmp	r0, #0
   1626e:	d04e      	beq.n	1630e <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   16270:	4601      	mov	r1, r0
   16272:	4630      	mov	r0, r6
   16274:	f7ff fe8b 	bl	15f8e <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   16278:	eb00 0809 	add.w	r8, r0, r9
   1627c:	44a0      	add	r8, r4
   1627e:	f108 38ff 	add.w	r8, r8, #4294967295
   16282:	4264      	negs	r4, r4
   16284:	ea08 0804 	and.w	r8, r8, r4
   16288:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1628c:	eb08 0405 	add.w	r4, r8, r5
   16290:	3407      	adds	r4, #7
   16292:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   16296:	4641      	mov	r1, r8
   16298:	4630      	mov	r0, r6
   1629a:	f7ff fef9 	bl	16090 <mem_to_chunkid>
   1629e:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   162a0:	1ba4      	subs	r4, r4, r6
   162a2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   162a4:	4287      	cmp	r7, r0
   162a6:	d318      	bcc.n	162da <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   162a8:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   162aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   162ae:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   162b0:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   162b4:	429c      	cmp	r4, r3
   162b6:	d31a      	bcc.n	162ee <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   162b8:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   162ba:	8873      	ldrh	r3, [r6, #2]
   162bc:	f043 0301 	orr.w	r3, r3, #1
   162c0:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   162c2:	4640      	mov	r0, r8
   162c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   162c8:	4611      	mov	r1, r2
   162ca:	f7ff ff7b 	bl	161c4 <sys_heap_alloc>
   162ce:	4680      	mov	r8, r0
   162d0:	e7f7      	b.n	162c2 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   162d2:	464c      	mov	r4, r9
	rew = align & -align;
   162d4:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   162d6:	2304      	movs	r3, #4
   162d8:	e7ba      	b.n	16250 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   162da:	4602      	mov	r2, r0
   162dc:	4639      	mov	r1, r7
   162de:	4630      	mov	r0, r6
   162e0:	f7ff fe9f 	bl	16022 <split_chunks>
		free_list_add(h, c0);
   162e4:	4639      	mov	r1, r7
   162e6:	4630      	mov	r0, r6
   162e8:	f7ff fee2 	bl	160b0 <free_list_add>
   162ec:	e7dc      	b.n	162a8 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   162ee:	4622      	mov	r2, r4
   162f0:	4629      	mov	r1, r5
   162f2:	4630      	mov	r0, r6
   162f4:	f7ff fe95 	bl	16022 <split_chunks>
		free_list_add(h, c_end);
   162f8:	4621      	mov	r1, r4
   162fa:	4630      	mov	r0, r6
   162fc:	f7ff fed8 	bl	160b0 <free_list_add>
   16300:	e7da      	b.n	162b8 <sys_heap_aligned_alloc+0x90>
		return NULL;
   16302:	f04f 0800 	mov.w	r8, #0
   16306:	e7dc      	b.n	162c2 <sys_heap_aligned_alloc+0x9a>
   16308:	f04f 0800 	mov.w	r8, #0
   1630c:	e7d9      	b.n	162c2 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   1630e:	f04f 0800 	mov.w	r8, #0
   16312:	e7d6      	b.n	162c2 <sys_heap_aligned_alloc+0x9a>

00016314 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   16314:	b570      	push	{r4, r5, r6, lr}
   16316:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   16318:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1631a:	1dc8      	adds	r0, r1, #7
   1631c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16320:	440a      	add	r2, r1
   16322:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16326:	1a12      	subs	r2, r2, r0
   16328:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1632a:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1632c:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   1632e:	2300      	movs	r3, #0
   16330:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   16332:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   16336:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1633a:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   1633e:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16340:	1dce      	adds	r6, r1, #7
   16342:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16344:	e005      	b.n	16352 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   16346:	f103 0c04 	add.w	ip, r3, #4
   1634a:	2400      	movs	r4, #0
   1634c:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   16350:	3301      	adds	r3, #1
   16352:	4573      	cmp	r3, lr
   16354:	dbf7      	blt.n	16346 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16356:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   16358:	b2a4      	uxth	r4, r4
   1635a:	8044      	strh	r4, [r0, #2]
   1635c:	f04f 0c00 	mov.w	ip, #0
   16360:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16364:	f044 0401 	orr.w	r4, r4, #1
   16368:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1636a:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1636c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   16370:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   16374:	1ca5      	adds	r5, r4, #2
   16376:	f820 e005 	strh.w	lr, [r0, r5]
   1637a:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   1637c:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   16380:	1c95      	adds	r5, r2, #2
   16382:	f820 c005 	strh.w	ip, [r0, r5]
   16386:	4402      	add	r2, r0
   16388:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1638a:	8853      	ldrh	r3, [r2, #2]
   1638c:	f043 0301 	orr.w	r3, r3, #1
   16390:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   16392:	f7ff fe8d 	bl	160b0 <free_list_add>
}
   16396:	bd70      	pop	{r4, r5, r6, pc}

00016398 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   16398:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1639c:	8b03      	ldrh	r3, [r0, #24]
   1639e:	f023 0307 	bic.w	r3, r3, #7
   163a2:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   163a4:	8303      	strh	r3, [r0, #24]
}
   163a6:	4770      	bx	lr

000163a8 <notify_monitors>:
{
   163a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163ac:	4606      	mov	r6, r0
   163ae:	460f      	mov	r7, r1
   163b0:	4690      	mov	r8, r2
	return list->head;
   163b2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   163b4:	b121      	cbz	r1, 163c0 <notify_monitors+0x18>
	return node->next;
   163b6:	680c      	ldr	r4, [r1, #0]
   163b8:	b13c      	cbz	r4, 163ca <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   163ba:	b931      	cbnz	r1, 163ca <notify_monitors+0x22>
   163bc:	460c      	mov	r4, r1
   163be:	e004      	b.n	163ca <notify_monitors+0x22>
   163c0:	460c      	mov	r4, r1
   163c2:	e002      	b.n	163ca <notify_monitors+0x22>
   163c4:	4623      	mov	r3, r4
   163c6:	4621      	mov	r1, r4
   163c8:	461c      	mov	r4, r3
   163ca:	b169      	cbz	r1, 163e8 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   163cc:	684d      	ldr	r5, [r1, #4]
   163ce:	4643      	mov	r3, r8
   163d0:	463a      	mov	r2, r7
   163d2:	4630      	mov	r0, r6
   163d4:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   163d6:	2c00      	cmp	r4, #0
   163d8:	d0f4      	beq.n	163c4 <notify_monitors+0x1c>
	return node->next;
   163da:	6823      	ldr	r3, [r4, #0]
   163dc:	2b00      	cmp	r3, #0
   163de:	d0f2      	beq.n	163c6 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   163e0:	2c00      	cmp	r4, #0
   163e2:	d1f0      	bne.n	163c6 <notify_monitors+0x1e>
   163e4:	4623      	mov	r3, r4
   163e6:	e7ee      	b.n	163c6 <notify_monitors+0x1e>
}
   163e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000163ec <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   163ec:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   163ee:	f013 0307 	ands.w	r3, r3, #7
   163f2:	d103      	bne.n	163fc <process_recheck+0x10>
	return list->head;
   163f4:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   163f6:	b10a      	cbz	r2, 163fc <process_recheck+0x10>
		evt = EVT_START;
   163f8:	2003      	movs	r0, #3
   163fa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   163fc:	2b02      	cmp	r3, #2
   163fe:	d003      	beq.n	16408 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   16400:	2b01      	cmp	r3, #1
   16402:	d006      	beq.n	16412 <process_recheck+0x26>
	int evt = EVT_NOP;
   16404:	2000      	movs	r0, #0
   16406:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   16408:	8b42      	ldrh	r2, [r0, #26]
   1640a:	2a00      	cmp	r2, #0
   1640c:	d1f8      	bne.n	16400 <process_recheck+0x14>
		evt = EVT_STOP;
   1640e:	2004      	movs	r0, #4
   16410:	4770      	bx	lr
   16412:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   16414:	b10b      	cbz	r3, 1641a <process_recheck+0x2e>
		evt = EVT_RESET;
   16416:	2005      	movs	r0, #5
}
   16418:	4770      	bx	lr
	int evt = EVT_NOP;
   1641a:	2000      	movs	r0, #0
   1641c:	4770      	bx	lr

0001641e <process_complete>:
{
   1641e:	b510      	push	{r4, lr}
   16420:	4604      	mov	r4, r0
   16422:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16424:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   16426:	2a00      	cmp	r2, #0
   16428:	db07      	blt.n	1643a <process_complete+0x1c>
   1642a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1642e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   16430:	2a01      	cmp	r2, #1
   16432:	d90e      	bls.n	16452 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   16434:	2b04      	cmp	r3, #4
   16436:	d036      	beq.n	164a6 <process_complete+0x88>
}
   16438:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   1643a:	e9d0 0100 	ldrd	r0, r1, [r0]
   1643e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   16442:	2300      	movs	r3, #0
   16444:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   16446:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   16448:	2101      	movs	r1, #1
   1644a:	4620      	mov	r0, r4
   1644c:	f7ff ffa4 	bl	16398 <set_state>
   16450:	e7f2      	b.n	16438 <process_complete+0x1a>
		*clients = mgr->clients;
   16452:	e9d0 0100 	ldrd	r0, r1, [r0]
   16456:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1645a:	2200      	movs	r2, #0
   1645c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1645e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   16460:	2b06      	cmp	r3, #6
   16462:	d11b      	bne.n	1649c <process_complete+0x7e>
	return list->head;
   16464:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   16468:	b153      	cbz	r3, 16480 <process_complete+0x62>
				mgr->refs += 1U;
   1646a:	8b62      	ldrh	r2, [r4, #26]
   1646c:	3201      	adds	r2, #1
   1646e:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   16470:	461a      	mov	r2, r3
	return node->next;
   16472:	681b      	ldr	r3, [r3, #0]
   16474:	2b00      	cmp	r3, #0
   16476:	d0f7      	beq.n	16468 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16478:	2a00      	cmp	r2, #0
   1647a:	d1f5      	bne.n	16468 <process_complete+0x4a>
   1647c:	4613      	mov	r3, r2
   1647e:	e7f3      	b.n	16468 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   16480:	2102      	movs	r1, #2
   16482:	4620      	mov	r0, r4
   16484:	f7ff ff88 	bl	16398 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   16488:	4620      	mov	r0, r4
   1648a:	f7ff ffaf 	bl	163ec <process_recheck>
   1648e:	2800      	cmp	r0, #0
   16490:	d0d2      	beq.n	16438 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   16492:	8b23      	ldrh	r3, [r4, #24]
   16494:	f043 0320 	orr.w	r3, r3, #32
   16498:	8323      	strh	r3, [r4, #24]
   1649a:	e7cd      	b.n	16438 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1649c:	2100      	movs	r1, #0
   1649e:	4620      	mov	r0, r4
   164a0:	f7ff ff7a 	bl	16398 <set_state>
   164a4:	e7f0      	b.n	16488 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   164a6:	2100      	movs	r1, #0
   164a8:	f7ff ff76 	bl	16398 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   164ac:	4620      	mov	r0, r4
   164ae:	f7ff ff9d 	bl	163ec <process_recheck>
   164b2:	2800      	cmp	r0, #0
   164b4:	d0c0      	beq.n	16438 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   164b6:	8b23      	ldrh	r3, [r4, #24]
   164b8:	f043 0320 	orr.w	r3, r3, #32
   164bc:	8323      	strh	r3, [r4, #24]
}
   164be:	e7bb      	b.n	16438 <process_complete+0x1a>

000164c0 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   164c0:	b150      	cbz	r0, 164d8 <validate_args+0x18>
{
   164c2:	b510      	push	{r4, lr}
   164c4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   164c6:	b151      	cbz	r1, 164de <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   164c8:	1d08      	adds	r0, r1, #4
   164ca:	f000 f8c4 	bl	16656 <sys_notify_validate>
	if ((rv == 0)
   164ce:	b910      	cbnz	r0, 164d6 <validate_args+0x16>
	    && ((cli->notify.flags
   164d0:	68a3      	ldr	r3, [r4, #8]
   164d2:	2b03      	cmp	r3, #3
   164d4:	d806      	bhi.n	164e4 <validate_args+0x24>
}
   164d6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   164d8:	f06f 0015 	mvn.w	r0, #21
}
   164dc:	4770      	bx	lr
		return -EINVAL;
   164de:	f06f 0015 	mvn.w	r0, #21
   164e2:	e7f8      	b.n	164d6 <validate_args+0x16>
		rv = -EINVAL;
   164e4:	f06f 0015 	mvn.w	r0, #21
   164e8:	e7f5      	b.n	164d6 <validate_args+0x16>

000164ea <notify_one>:
{
   164ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164ee:	4607      	mov	r7, r0
   164f0:	460c      	mov	r4, r1
   164f2:	4616      	mov	r6, r2
   164f4:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   164f6:	4619      	mov	r1, r3
   164f8:	1d20      	adds	r0, r4, #4
   164fa:	f000 f8cb 	bl	16694 <sys_notify_finalize>
	if (cb) {
   164fe:	b128      	cbz	r0, 1650c <notify_one+0x22>
   16500:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   16502:	462b      	mov	r3, r5
   16504:	4632      	mov	r2, r6
   16506:	4621      	mov	r1, r4
   16508:	4638      	mov	r0, r7
   1650a:	47c0      	blx	r8
}
   1650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016510 <notify_all>:
{
   16510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16514:	4680      	mov	r8, r0
   16516:	460c      	mov	r4, r1
   16518:	4617      	mov	r7, r2
   1651a:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   1651c:	e004      	b.n	16528 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   1651e:	4633      	mov	r3, r6
   16520:	463a      	mov	r2, r7
   16522:	4640      	mov	r0, r8
   16524:	f7ff ffe1 	bl	164ea <notify_one>
	return list->head;
   16528:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1652a:	b131      	cbz	r1, 1653a <notify_all+0x2a>
	return node->next;
   1652c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1652e:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16530:	6863      	ldr	r3, [r4, #4]
   16532:	428b      	cmp	r3, r1
   16534:	d1f3      	bne.n	1651e <notify_all+0xe>
	list->tail = node;
   16536:	6065      	str	r5, [r4, #4]
}
   16538:	e7f1      	b.n	1651e <notify_all+0xe>
}
   1653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001653e <transition_complete>:
{
   1653e:	b508      	push	{r3, lr}
	__asm__ volatile(
   16540:	f04f 0c40 	mov.w	ip, #64	; 0x40
   16544:	f3ef 8211 	mrs	r2, BASEPRI
   16548:	f38c 8812 	msr	BASEPRI_MAX, ip
   1654c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   16550:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   16552:	2101      	movs	r1, #1
   16554:	f7f4 fd86 	bl	b064 <process_event>
}
   16558:	bd08      	pop	{r3, pc}

0001655a <onoff_manager_init>:
	if ((mgr == NULL)
   1655a:	4603      	mov	r3, r0
   1655c:	b170      	cbz	r0, 1657c <onoff_manager_init+0x22>
	    || (transitions == NULL)
   1655e:	b181      	cbz	r1, 16582 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   16560:	680a      	ldr	r2, [r1, #0]
   16562:	b18a      	cbz	r2, 16588 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   16564:	684a      	ldr	r2, [r1, #4]
   16566:	b192      	cbz	r2, 1658e <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   16568:	2000      	movs	r0, #0
   1656a:	6018      	str	r0, [r3, #0]
   1656c:	6058      	str	r0, [r3, #4]
   1656e:	6098      	str	r0, [r3, #8]
   16570:	60d8      	str	r0, [r3, #12]
   16572:	6118      	str	r0, [r3, #16]
   16574:	6158      	str	r0, [r3, #20]
   16576:	6198      	str	r0, [r3, #24]
   16578:	6119      	str	r1, [r3, #16]
	return 0;
   1657a:	4770      	bx	lr
		return -EINVAL;
   1657c:	f06f 0015 	mvn.w	r0, #21
   16580:	4770      	bx	lr
   16582:	f06f 0015 	mvn.w	r0, #21
   16586:	4770      	bx	lr
   16588:	f06f 0015 	mvn.w	r0, #21
   1658c:	4770      	bx	lr
   1658e:	f06f 0015 	mvn.w	r0, #21
}
   16592:	4770      	bx	lr

00016594 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   16594:	b570      	push	{r4, r5, r6, lr}
   16596:	4605      	mov	r5, r0
   16598:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1659a:	f7ff ff91 	bl	164c0 <validate_args>

	if (rv < 0) {
   1659e:	1e04      	subs	r4, r0, #0
   165a0:	db30      	blt.n	16604 <onoff_request+0x70>
   165a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   165a6:	f3ef 8211 	mrs	r2, BASEPRI
   165aa:	f383 8812 	msr	BASEPRI_MAX, r3
   165ae:	f3bf 8f6f 	isb	sy
   165b2:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   165b4:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   165b8:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   165bc:	8b6b      	ldrh	r3, [r5, #26]
   165be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   165c2:	428b      	cmp	r3, r1
   165c4:	d02c      	beq.n	16620 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   165c6:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   165c8:	f1bc 0f02 	cmp.w	ip, #2
   165cc:	d008      	beq.n	165e0 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   165ce:	f1bc 0f06 	cmp.w	ip, #6
   165d2:	d819      	bhi.n	16608 <onoff_request+0x74>
   165d4:	e8df f00c 	tbb	[pc, ip]
   165d8:	1818181e 	.word	0x1818181e
   165dc:	2a1e      	.short	0x2a1e
   165de:	1e          	.byte	0x1e
   165df:	00          	.byte	0x00
		mgr->refs += 1U;
   165e0:	3301      	adds	r3, #1
   165e2:	836b      	strh	r3, [r5, #26]
		notify = true;
   165e4:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   165e6:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   165e8:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   165ea:	b128      	cbz	r0, 165f8 <onoff_request+0x64>
	parent->next = child;
   165ec:	2000      	movs	r0, #0
   165ee:	6030      	str	r0, [r6, #0]
	return list->tail;
   165f0:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   165f2:	b308      	cbz	r0, 16638 <onoff_request+0xa4>
	parent->next = child;
   165f4:	6006      	str	r6, [r0, #0]
	list->tail = node;
   165f6:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   165f8:	bb09      	cbnz	r1, 1663e <onoff_request+0xaa>
	__asm__ volatile(
   165fa:	f38e 8811 	msr	BASEPRI, lr
   165fe:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   16602:	bb0b      	cbnz	r3, 16648 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   16604:	4620      	mov	r0, r4
   16606:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   16608:	f06f 0404 	mvn.w	r4, #4
   1660c:	2300      	movs	r3, #0
   1660e:	4619      	mov	r1, r3
   16610:	4618      	mov	r0, r3
   16612:	e7ea      	b.n	165ea <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   16614:	fabc f18c 	clz	r1, ip
   16618:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   1661a:	2300      	movs	r3, #0
		add_client = true;
   1661c:	2001      	movs	r0, #1
   1661e:	e7e4      	b.n	165ea <onoff_request+0x56>
		rv = -EAGAIN;
   16620:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   16624:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   16626:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   16628:	4618      	mov	r0, r3
   1662a:	e7de      	b.n	165ea <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   1662c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16630:	2300      	movs	r3, #0
   16632:	4619      	mov	r1, r3
   16634:	4618      	mov	r0, r3
   16636:	e7d8      	b.n	165ea <onoff_request+0x56>
   16638:	606e      	str	r6, [r5, #4]
	list->head = node;
   1663a:	602e      	str	r6, [r5, #0]
}
   1663c:	e7dc      	b.n	165f8 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   1663e:	2102      	movs	r1, #2
   16640:	4628      	mov	r0, r5
   16642:	f7f4 fd0f 	bl	b064 <process_event>
   16646:	e7dd      	b.n	16604 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   16648:	2300      	movs	r3, #0
   1664a:	4662      	mov	r2, ip
   1664c:	4631      	mov	r1, r6
   1664e:	4628      	mov	r0, r5
   16650:	f7ff ff4b 	bl	164ea <notify_one>
   16654:	e7d6      	b.n	16604 <onoff_request+0x70>

00016656 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16656:	4602      	mov	r2, r0
   16658:	b1b0      	cbz	r0, 16688 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1665a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1665c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16660:	2b02      	cmp	r3, #2
   16662:	d00b      	beq.n	1667c <sys_notify_validate+0x26>
   16664:	2b03      	cmp	r3, #3
   16666:	d004      	beq.n	16672 <sys_notify_validate+0x1c>
   16668:	2b01      	cmp	r3, #1
   1666a:	d004      	beq.n	16676 <sys_notify_validate+0x20>
   1666c:	f06f 0015 	mvn.w	r0, #21
   16670:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   16672:	6803      	ldr	r3, [r0, #0]
   16674:	b15b      	cbz	r3, 1668e <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   16676:	2000      	movs	r0, #0
   16678:	6090      	str	r0, [r2, #8]
   1667a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1667c:	6803      	ldr	r3, [r0, #0]
   1667e:	2b00      	cmp	r3, #0
   16680:	d1f9      	bne.n	16676 <sys_notify_validate+0x20>
			rv = -EINVAL;
   16682:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   16686:	4770      	bx	lr
		return -EINVAL;
   16688:	f06f 0015 	mvn.w	r0, #21
   1668c:	4770      	bx	lr
			rv = -EINVAL;
   1668e:	f06f 0015 	mvn.w	r0, #21
   16692:	4770      	bx	lr

00016694 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   16694:	b510      	push	{r4, lr}
   16696:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16698:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1669a:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1669e:	6081      	str	r1, [r0, #8]
	switch (method) {
   166a0:	2a02      	cmp	r2, #2
   166a2:	d004      	beq.n	166ae <sys_notify_finalize+0x1a>
   166a4:	2a03      	cmp	r2, #3
   166a6:	d105      	bne.n	166b4 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   166a8:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   166aa:	2000      	movs	r0, #0
		break;
   166ac:	e004      	b.n	166b8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   166ae:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   166b0:	2400      	movs	r4, #0
		break;
   166b2:	e001      	b.n	166b8 <sys_notify_finalize+0x24>
	switch (method) {
   166b4:	2400      	movs	r4, #0
   166b6:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   166b8:	2200      	movs	r2, #0
   166ba:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   166bc:	b108      	cbz	r0, 166c2 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   166be:	f7ff faab 	bl	15c18 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   166c2:	4620      	mov	r0, r4
   166c4:	bd10      	pop	{r4, pc}

000166c6 <extract_decimal>:
{
   166c6:	4684      	mov	ip, r0
	const char *sp = *str;
   166c8:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   166ca:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
   166cc:	e006      	b.n	166dc <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   166ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   166d2:	3201      	adds	r2, #1
   166d4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   166d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   166dc:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   166de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   166e2:	2909      	cmp	r1, #9
   166e4:	d9f3      	bls.n	166ce <extract_decimal+0x8>
	*str = sp;
   166e6:	f8cc 2000 	str.w	r2, [ip]
}
   166ea:	4770      	bx	lr

000166ec <extract_width>:
{
   166ec:	b530      	push	{r4, r5, lr}
   166ee:	b083      	sub	sp, #12
   166f0:	4604      	mov	r4, r0
   166f2:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   166f4:	7803      	ldrb	r3, [r0, #0]
   166f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   166fa:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   166fc:	460d      	mov	r5, r1
   166fe:	780b      	ldrb	r3, [r1, #0]
   16700:	2b2a      	cmp	r3, #42	; 0x2a
   16702:	d018      	beq.n	16736 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   16704:	a801      	add	r0, sp, #4
   16706:	f7ff ffde 	bl	166c6 <extract_decimal>
	if (sp != wp) {
   1670a:	9b01      	ldr	r3, [sp, #4]
   1670c:	429d      	cmp	r5, r3
   1670e:	d00f      	beq.n	16730 <extract_width+0x44>
		conv->width_present = true;
   16710:	7823      	ldrb	r3, [r4, #0]
   16712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16716:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   16718:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   1671a:	b2db      	uxtb	r3, r3
   1671c:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   16720:	2800      	cmp	r0, #0
   16722:	db10      	blt.n	16746 <extract_width+0x5a>
   16724:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   16726:	4313      	orrs	r3, r2
   16728:	7822      	ldrb	r2, [r4, #0]
   1672a:	f363 0241 	bfi	r2, r3, #1, #1
   1672e:	7022      	strb	r2, [r4, #0]
	return sp;
   16730:	9801      	ldr	r0, [sp, #4]
}
   16732:	b003      	add	sp, #12
   16734:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   16736:	7843      	ldrb	r3, [r0, #1]
   16738:	f043 0301 	orr.w	r3, r3, #1
   1673c:	7043      	strb	r3, [r0, #1]
		return ++sp;
   1673e:	4608      	mov	r0, r1
   16740:	3001      	adds	r0, #1
   16742:	9001      	str	r0, [sp, #4]
   16744:	e7f5      	b.n	16732 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   16746:	2201      	movs	r2, #1
   16748:	e7ed      	b.n	16726 <extract_width+0x3a>

0001674a <extract_prec>:
{
   1674a:	b510      	push	{r4, lr}
   1674c:	b082      	sub	sp, #8
   1674e:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   16750:	780b      	ldrb	r3, [r1, #0]
   16752:	2b2e      	cmp	r3, #46	; 0x2e
   16754:	bf14      	ite	ne
   16756:	2300      	movne	r3, #0
   16758:	2301      	moveq	r3, #1
   1675a:	7842      	ldrb	r2, [r0, #1]
   1675c:	f363 0241 	bfi	r2, r3, #1, #1
   16760:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   16762:	b1c3      	cbz	r3, 16796 <extract_prec+0x4c>
   16764:	4604      	mov	r4, r0
	++sp;
   16766:	9b01      	ldr	r3, [sp, #4]
   16768:	1c5a      	adds	r2, r3, #1
   1676a:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   1676c:	785b      	ldrb	r3, [r3, #1]
   1676e:	2b2a      	cmp	r3, #42	; 0x2a
   16770:	d013      	beq.n	1679a <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   16772:	a801      	add	r0, sp, #4
   16774:	f7ff ffa7 	bl	166c6 <extract_decimal>
	conv->prec_value = prec;
   16778:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   1677a:	7823      	ldrb	r3, [r4, #0]
   1677c:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   16780:	2800      	cmp	r0, #0
   16782:	db12      	blt.n	167aa <extract_prec+0x60>
   16784:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   16786:	4313      	orrs	r3, r2
   16788:	7822      	ldrb	r2, [r4, #0]
   1678a:	f363 0241 	bfi	r2, r3, #1, #1
   1678e:	7022      	strb	r2, [r4, #0]
	return sp;
   16790:	9801      	ldr	r0, [sp, #4]
}
   16792:	b002      	add	sp, #8
   16794:	bd10      	pop	{r4, pc}
		return sp;
   16796:	4608      	mov	r0, r1
   16798:	e7fb      	b.n	16792 <extract_prec+0x48>
		conv->prec_star = true;
   1679a:	7843      	ldrb	r3, [r0, #1]
   1679c:	f043 0304 	orr.w	r3, r3, #4
   167a0:	7043      	strb	r3, [r0, #1]
		return ++sp;
   167a2:	4610      	mov	r0, r2
   167a4:	3001      	adds	r0, #1
   167a6:	9001      	str	r0, [sp, #4]
   167a8:	e7f3      	b.n	16792 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   167aa:	2201      	movs	r2, #1
   167ac:	e7eb      	b.n	16786 <extract_prec+0x3c>

000167ae <extract_length>:
{
   167ae:	4602      	mov	r2, r0
	switch (*sp) {
   167b0:	780b      	ldrb	r3, [r1, #0]
   167b2:	3b4c      	subs	r3, #76	; 0x4c
   167b4:	2b2e      	cmp	r3, #46	; 0x2e
   167b6:	d85b      	bhi.n	16870 <extract_length+0xc2>
   167b8:	e8df f003 	tbb	[pc, r3]
   167bc:	5a5a5a4f 	.word	0x5a5a5a4f
   167c0:	5a5a5a5a 	.word	0x5a5a5a5a
   167c4:	5a5a5a5a 	.word	0x5a5a5a5a
   167c8:	5a5a5a5a 	.word	0x5a5a5a5a
   167cc:	5a5a5a5a 	.word	0x5a5a5a5a
   167d0:	5a5a5a5a 	.word	0x5a5a5a5a
   167d4:	5a5a5a5a 	.word	0x5a5a5a5a
   167d8:	5a3a5a18 	.word	0x5a3a5a18
   167dc:	5a5a5a29 	.word	0x5a5a5a29
   167e0:	5a5a5a5a 	.word	0x5a5a5a5a
   167e4:	5a5a5a48 	.word	0x5a5a5a48
   167e8:	5a5a      	.short	0x5a5a
   167ea:	41          	.byte	0x41
   167eb:	00          	.byte	0x00
		if (*++sp == 'h') {
   167ec:	1c48      	adds	r0, r1, #1
   167ee:	784b      	ldrb	r3, [r1, #1]
   167f0:	2b68      	cmp	r3, #104	; 0x68
   167f2:	d005      	beq.n	16800 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   167f4:	7853      	ldrb	r3, [r2, #1]
   167f6:	2102      	movs	r1, #2
   167f8:	f361 03c6 	bfi	r3, r1, #3, #4
   167fc:	7053      	strb	r3, [r2, #1]
   167fe:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   16800:	7853      	ldrb	r3, [r2, #1]
   16802:	2001      	movs	r0, #1
   16804:	f360 03c6 	bfi	r3, r0, #3, #4
   16808:	7053      	strb	r3, [r2, #1]
			++sp;
   1680a:	1c88      	adds	r0, r1, #2
   1680c:	4770      	bx	lr
		if (*++sp == 'l') {
   1680e:	1c48      	adds	r0, r1, #1
   16810:	784b      	ldrb	r3, [r1, #1]
   16812:	2b6c      	cmp	r3, #108	; 0x6c
   16814:	d005      	beq.n	16822 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   16816:	7853      	ldrb	r3, [r2, #1]
   16818:	2103      	movs	r1, #3
   1681a:	f361 03c6 	bfi	r3, r1, #3, #4
   1681e:	7053      	strb	r3, [r2, #1]
   16820:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   16822:	7853      	ldrb	r3, [r2, #1]
   16824:	2004      	movs	r0, #4
   16826:	f360 03c6 	bfi	r3, r0, #3, #4
   1682a:	7053      	strb	r3, [r2, #1]
			++sp;
   1682c:	1c88      	adds	r0, r1, #2
   1682e:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   16830:	7853      	ldrb	r3, [r2, #1]
   16832:	2005      	movs	r0, #5
   16834:	f360 03c6 	bfi	r3, r0, #3, #4
   16838:	7053      	strb	r3, [r2, #1]
		++sp;
   1683a:	1c48      	adds	r0, r1, #1
		break;
   1683c:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   1683e:	7853      	ldrb	r3, [r2, #1]
   16840:	2006      	movs	r0, #6
   16842:	f360 03c6 	bfi	r3, r0, #3, #4
   16846:	7053      	strb	r3, [r2, #1]
		++sp;
   16848:	1c48      	adds	r0, r1, #1
		break;
   1684a:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   1684c:	7853      	ldrb	r3, [r2, #1]
   1684e:	2007      	movs	r0, #7
   16850:	f360 03c6 	bfi	r3, r0, #3, #4
   16854:	7053      	strb	r3, [r2, #1]
		++sp;
   16856:	1c48      	adds	r0, r1, #1
		break;
   16858:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   1685a:	7853      	ldrb	r3, [r2, #1]
   1685c:	2008      	movs	r0, #8
   1685e:	f360 03c6 	bfi	r3, r0, #3, #4
   16862:	7053      	strb	r3, [r2, #1]
		++sp;
   16864:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   16866:	7813      	ldrb	r3, [r2, #0]
   16868:	f043 0302 	orr.w	r3, r3, #2
   1686c:	7013      	strb	r3, [r2, #0]
		break;
   1686e:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   16870:	7853      	ldrb	r3, [r2, #1]
   16872:	f36f 03c6 	bfc	r3, #3, #4
   16876:	7053      	strb	r3, [r2, #1]
		break;
   16878:	4608      	mov	r0, r1
}
   1687a:	4770      	bx	lr

0001687c <extract_specifier>:
{
   1687c:	b500      	push	{lr}
   1687e:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   16880:	4608      	mov	r0, r1
   16882:	f810 3b01 	ldrb.w	r3, [r0], #1
   16886:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   16888:	2b78      	cmp	r3, #120	; 0x78
   1688a:	d817      	bhi.n	168bc <extract_specifier+0x40>
   1688c:	2b6e      	cmp	r3, #110	; 0x6e
   1688e:	d229      	bcs.n	168e4 <extract_specifier+0x68>
   16890:	2b69      	cmp	r3, #105	; 0x69
   16892:	d813      	bhi.n	168bc <extract_specifier+0x40>
   16894:	2b58      	cmp	r3, #88	; 0x58
   16896:	d317      	bcc.n	168c8 <extract_specifier+0x4c>
   16898:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   1689c:	fa5f fc8c 	uxtb.w	ip, ip
   168a0:	2101      	movs	r1, #1
   168a2:	fa01 f10c 	lsl.w	r1, r1, ip
   168a6:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   168aa:	d114      	bne.n	168d6 <extract_specifier+0x5a>
   168ac:	f640 0c01 	movw	ip, #2049	; 0x801
   168b0:	ea11 0f0c 	tst.w	r1, ip
   168b4:	d155      	bne.n	16962 <extract_specifier+0xe6>
   168b6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   168ba:	d13a      	bne.n	16932 <extract_specifier+0xb6>
		conv->invalid = true;
   168bc:	7813      	ldrb	r3, [r2, #0]
   168be:	f043 0301 	orr.w	r3, r3, #1
   168c2:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   168c4:	2100      	movs	r1, #0
		break;
   168c6:	e042      	b.n	1694e <extract_specifier+0xd2>
	switch (conv->specifier) {
   168c8:	2b41      	cmp	r3, #65	; 0x41
   168ca:	d004      	beq.n	168d6 <extract_specifier+0x5a>
   168cc:	d3f6      	bcc.n	168bc <extract_specifier+0x40>
   168ce:	3b45      	subs	r3, #69	; 0x45
   168d0:	b2db      	uxtb	r3, r3
   168d2:	2b02      	cmp	r3, #2
   168d4:	d8f2      	bhi.n	168bc <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   168d6:	7893      	ldrb	r3, [r2, #2]
   168d8:	2104      	movs	r1, #4
   168da:	f361 0302 	bfi	r3, r1, #0, #3
   168de:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   168e0:	2101      	movs	r1, #1
			break;
   168e2:	e034      	b.n	1694e <extract_specifier+0xd2>
	switch (conv->specifier) {
   168e4:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   168e8:	b2c9      	uxtb	r1, r1
   168ea:	f04f 0c01 	mov.w	ip, #1
   168ee:	fa0c fc01 	lsl.w	ip, ip, r1
   168f2:	f240 4182 	movw	r1, #1154	; 0x482
   168f6:	ea1c 0f01 	tst.w	ip, r1
   168fa:	bf14      	ite	ne
   168fc:	f04f 0e01 	movne.w	lr, #1
   16900:	f04f 0e00 	moveq.w	lr, #0
   16904:	d12d      	bne.n	16962 <extract_specifier+0xe6>
   16906:	f01c 0f24 	tst.w	ip, #36	; 0x24
   1690a:	bf14      	ite	ne
   1690c:	2101      	movne	r1, #1
   1690e:	2100      	moveq	r1, #0
   16910:	d139      	bne.n	16986 <extract_specifier+0x10a>
   16912:	f01c 0c01 	ands.w	ip, ip, #1
   16916:	d0d1      	beq.n	168bc <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   16918:	7893      	ldrb	r3, [r2, #2]
   1691a:	f04f 0e03 	mov.w	lr, #3
   1691e:	f36e 0302 	bfi	r3, lr, #0, #3
   16922:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   16924:	7853      	ldrb	r3, [r2, #1]
   16926:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1692a:	2b40      	cmp	r3, #64	; 0x40
   1692c:	d10f      	bne.n	1694e <extract_specifier+0xd2>
			unsupported = true;
   1692e:	4661      	mov	r1, ip
   16930:	e00d      	b.n	1694e <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   16932:	7891      	ldrb	r1, [r2, #2]
   16934:	f04f 0c01 	mov.w	ip, #1
   16938:	f36c 0102 	bfi	r1, ip, #0, #3
   1693c:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1693e:	7851      	ldrb	r1, [r2, #1]
   16940:	f001 0178 	and.w	r1, r1, #120	; 0x78
   16944:	2940      	cmp	r1, #64	; 0x40
   16946:	d013      	beq.n	16970 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   16948:	2b63      	cmp	r3, #99	; 0x63
   1694a:	d018      	beq.n	1697e <extract_specifier+0x102>
	bool unsupported = false;
   1694c:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   1694e:	7813      	ldrb	r3, [r2, #0]
   16950:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   16954:	ea41 010c 	orr.w	r1, r1, ip
   16958:	f361 0341 	bfi	r3, r1, #1, #1
   1695c:	7013      	strb	r3, [r2, #0]
}
   1695e:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   16962:	7891      	ldrb	r1, [r2, #2]
   16964:	f04f 0c02 	mov.w	ip, #2
   16968:	f36c 0102 	bfi	r1, ip, #0, #3
   1696c:	7091      	strb	r1, [r2, #2]
   1696e:	e7e6      	b.n	1693e <extract_specifier+0xc2>
			conv->invalid = true;
   16970:	f892 c000 	ldrb.w	ip, [r2]
   16974:	f04c 0c01 	orr.w	ip, ip, #1
   16978:	f882 c000 	strb.w	ip, [r2]
   1697c:	e7e4      	b.n	16948 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1697e:	3900      	subs	r1, #0
   16980:	bf18      	it	ne
   16982:	2101      	movne	r1, #1
   16984:	e7e3      	b.n	1694e <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   16986:	7893      	ldrb	r3, [r2, #2]
   16988:	f04f 0c03 	mov.w	ip, #3
   1698c:	f36c 0302 	bfi	r3, ip, #0, #3
   16990:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   16992:	7853      	ldrb	r3, [r2, #1]
   16994:	f013 0f78 	tst.w	r3, #120	; 0x78
   16998:	d1d9      	bne.n	1694e <extract_specifier+0xd2>
	bool unsupported = false;
   1699a:	4671      	mov	r1, lr
   1699c:	e7d7      	b.n	1694e <extract_specifier+0xd2>

0001699e <extract_conversion>:
{
   1699e:	b510      	push	{r4, lr}
   169a0:	4604      	mov	r4, r0
   169a2:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   169a4:	2300      	movs	r3, #0
   169a6:	6023      	str	r3, [r4, #0]
   169a8:	6063      	str	r3, [r4, #4]
   169aa:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   169ac:	784b      	ldrb	r3, [r1, #1]
   169ae:	2b25      	cmp	r3, #37	; 0x25
   169b0:	d014      	beq.n	169dc <extract_conversion+0x3e>
   169b2:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   169b4:	4620      	mov	r0, r4
   169b6:	f7f4 fc0b 	bl	b1d0 <extract_flags>
   169ba:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   169bc:	4620      	mov	r0, r4
   169be:	f7ff fe95 	bl	166ec <extract_width>
   169c2:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   169c4:	4620      	mov	r0, r4
   169c6:	f7ff fec0 	bl	1674a <extract_prec>
   169ca:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   169cc:	4620      	mov	r0, r4
   169ce:	f7ff feee 	bl	167ae <extract_length>
   169d2:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   169d4:	4620      	mov	r0, r4
   169d6:	f7ff ff51 	bl	1687c <extract_specifier>
}
   169da:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   169dc:	3002      	adds	r0, #2
   169de:	70e3      	strb	r3, [r4, #3]
		return sp;
   169e0:	e7fb      	b.n	169da <extract_conversion+0x3c>

000169e2 <conversion_radix>:
	switch (specifier) {
   169e2:	286f      	cmp	r0, #111	; 0x6f
   169e4:	d00c      	beq.n	16a00 <conversion_radix+0x1e>
   169e6:	d905      	bls.n	169f4 <conversion_radix+0x12>
   169e8:	2870      	cmp	r0, #112	; 0x70
   169ea:	d00b      	beq.n	16a04 <conversion_radix+0x22>
   169ec:	2878      	cmp	r0, #120	; 0x78
   169ee:	d10b      	bne.n	16a08 <conversion_radix+0x26>
		return 16;
   169f0:	2010      	movs	r0, #16
   169f2:	4770      	bx	lr
	switch (specifier) {
   169f4:	2858      	cmp	r0, #88	; 0x58
   169f6:	d001      	beq.n	169fc <conversion_radix+0x1a>
   169f8:	200a      	movs	r0, #10
   169fa:	4770      	bx	lr
		return 16;
   169fc:	2010      	movs	r0, #16
   169fe:	4770      	bx	lr
		return 8;
   16a00:	2008      	movs	r0, #8
   16a02:	4770      	bx	lr
		return 16;
   16a04:	2010      	movs	r0, #16
   16a06:	4770      	bx	lr
	switch (specifier) {
   16a08:	200a      	movs	r0, #10
}
   16a0a:	4770      	bx	lr

00016a0c <encode_uint>:
{
   16a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a10:	4605      	mov	r5, r0
   16a12:	460c      	mov	r4, r1
   16a14:	4693      	mov	fp, r2
   16a16:	4699      	mov	r9, r3
   16a18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   16a1a:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   16a1c:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   16a20:	f7ff ffdf 	bl	169e2 <conversion_radix>
   16a24:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   16a26:	e015      	b.n	16a54 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16a28:	f1ba 0f19 	cmp.w	sl, #25
   16a2c:	d820      	bhi.n	16a70 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   16a2e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16a30:	3237      	adds	r2, #55	; 0x37
   16a32:	b2d2      	uxtb	r2, r2
   16a34:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   16a38:	4632      	mov	r2, r6
   16a3a:	4643      	mov	r3, r8
   16a3c:	4628      	mov	r0, r5
   16a3e:	4621      	mov	r1, r4
   16a40:	f7e9 fb4c 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   16a44:	42b5      	cmp	r5, r6
   16a46:	f174 0400 	sbcs.w	r4, r4, #0
   16a4a:	d315      	bcc.n	16a78 <encode_uint+0x6c>
   16a4c:	454f      	cmp	r7, r9
   16a4e:	d913      	bls.n	16a78 <encode_uint+0x6c>
		value /= radix;
   16a50:	4605      	mov	r5, r0
   16a52:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   16a54:	f04f 0800 	mov.w	r8, #0
   16a58:	4632      	mov	r2, r6
   16a5a:	4643      	mov	r3, r8
   16a5c:	4628      	mov	r0, r5
   16a5e:	4621      	mov	r1, r4
   16a60:	f7e9 fb3c 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16a64:	2a09      	cmp	r2, #9
   16a66:	d8df      	bhi.n	16a28 <encode_uint+0x1c>
   16a68:	b2d2      	uxtb	r2, r2
   16a6a:	3230      	adds	r2, #48	; 0x30
   16a6c:	b2d2      	uxtb	r2, r2
   16a6e:	e7e1      	b.n	16a34 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   16a70:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16a72:	3257      	adds	r2, #87	; 0x57
   16a74:	b2d2      	uxtb	r2, r2
   16a76:	e7dd      	b.n	16a34 <encode_uint+0x28>
	if (conv->flag_hash) {
   16a78:	f89b 3000 	ldrb.w	r3, [fp]
   16a7c:	f013 0f20 	tst.w	r3, #32
   16a80:	d003      	beq.n	16a8a <encode_uint+0x7e>
		if (radix == 8) {
   16a82:	2e08      	cmp	r6, #8
   16a84:	d004      	beq.n	16a90 <encode_uint+0x84>
		} else if (radix == 16) {
   16a86:	2e10      	cmp	r6, #16
   16a88:	d009      	beq.n	16a9e <encode_uint+0x92>
}
   16a8a:	4638      	mov	r0, r7
   16a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   16a90:	f89b 3002 	ldrb.w	r3, [fp, #2]
   16a94:	f043 0308 	orr.w	r3, r3, #8
   16a98:	f88b 3002 	strb.w	r3, [fp, #2]
   16a9c:	e7f5      	b.n	16a8a <encode_uint+0x7e>
			conv->altform_0c = true;
   16a9e:	f89b 3002 	ldrb.w	r3, [fp, #2]
   16aa2:	f043 0310 	orr.w	r3, r3, #16
   16aa6:	f88b 3002 	strb.w	r3, [fp, #2]
   16aaa:	e7ee      	b.n	16a8a <encode_uint+0x7e>

00016aac <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   16aac:	7843      	ldrb	r3, [r0, #1]
   16aae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   16ab2:	2b07      	cmp	r3, #7
   16ab4:	d818      	bhi.n	16ae8 <store_count+0x3c>
   16ab6:	e8df f003 	tbb	[pc, r3]
   16aba:	0604      	.short	0x0604
   16abc:	100c0a08 	.word	0x100c0a08
   16ac0:	1614      	.short	0x1614
		*(int *)dp = count;
   16ac2:	600a      	str	r2, [r1, #0]
		break;
   16ac4:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   16ac6:	700a      	strb	r2, [r1, #0]
		break;
   16ac8:	4770      	bx	lr
		*(short *)dp = (short)count;
   16aca:	800a      	strh	r2, [r1, #0]
		break;
   16acc:	4770      	bx	lr
		*(long *)dp = (long)count;
   16ace:	600a      	str	r2, [r1, #0]
		break;
   16ad0:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   16ad2:	17d3      	asrs	r3, r2, #31
   16ad4:	600a      	str	r2, [r1, #0]
   16ad6:	604b      	str	r3, [r1, #4]
		break;
   16ad8:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   16ada:	17d3      	asrs	r3, r2, #31
   16adc:	600a      	str	r2, [r1, #0]
   16ade:	604b      	str	r3, [r1, #4]
		break;
   16ae0:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   16ae2:	600a      	str	r2, [r1, #0]
		break;
   16ae4:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   16ae6:	600a      	str	r2, [r1, #0]
}
   16ae8:	4770      	bx	lr

00016aea <outs>:
{
   16aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16aee:	4607      	mov	r7, r0
   16af0:	460e      	mov	r6, r1
   16af2:	4614      	mov	r4, r2
   16af4:	4698      	mov	r8, r3
	size_t count = 0;
   16af6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16af8:	e006      	b.n	16b08 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   16afa:	4631      	mov	r1, r6
   16afc:	f814 0b01 	ldrb.w	r0, [r4], #1
   16b00:	47b8      	blx	r7
		if (rc < 0) {
   16b02:	2800      	cmp	r0, #0
   16b04:	db09      	blt.n	16b1a <outs+0x30>
		++count;
   16b06:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16b08:	4544      	cmp	r4, r8
   16b0a:	d3f6      	bcc.n	16afa <outs+0x10>
   16b0c:	f1b8 0f00 	cmp.w	r8, #0
   16b10:	d102      	bne.n	16b18 <outs+0x2e>
   16b12:	7823      	ldrb	r3, [r4, #0]
   16b14:	2b00      	cmp	r3, #0
   16b16:	d1f0      	bne.n	16afa <outs+0x10>
	return (int)count;
   16b18:	4628      	mov	r0, r5
}
   16b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016b1e <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   16b1e:	b40f      	push	{r0, r1, r2, r3}
   16b20:	b500      	push	{lr}
   16b22:	b083      	sub	sp, #12
   16b24:	a904      	add	r1, sp, #16
   16b26:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   16b2a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   16b2c:	f7ff fa05 	bl	15f3a <vprintk>

	va_end(ap);
}
   16b30:	b003      	add	sp, #12
   16b32:	f85d eb04 	ldr.w	lr, [sp], #4
   16b36:	b004      	add	sp, #16
   16b38:	4770      	bx	lr

00016b3a <free_space>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL) {
   16b3a:	6903      	ldr	r3, [r0, #16]
   16b3c:	f013 0f08 	tst.w	r3, #8
   16b40:	d108      	bne.n	16b54 <free_space+0x1a>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   16b42:	68c3      	ldr	r3, [r0, #12]
   16b44:	6802      	ldr	r2, [r0, #0]
   16b46:	4293      	cmp	r3, r2
   16b48:	d807      	bhi.n	16b5a <free_space+0x20>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   16b4a:	6a03      	ldr	r3, [r0, #32]
   16b4c:	1a9b      	subs	r3, r3, r2
   16b4e:	600b      	str	r3, [r1, #0]

	return true;
   16b50:	2001      	movs	r0, #1
}
   16b52:	4770      	bx	lr
		*res = 0;
   16b54:	2000      	movs	r0, #0
   16b56:	6008      	str	r0, [r1, #0]
		return false;
   16b58:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   16b5a:	1a9b      	subs	r3, r3, r2
   16b5c:	600b      	str	r3, [r1, #0]
		return false;
   16b5e:	2000      	movs	r0, #0
   16b60:	4770      	bx	lr

00016b62 <available>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   16b62:	6903      	ldr	r3, [r0, #16]
   16b64:	f013 0f08 	tst.w	r3, #8
   16b68:	d107      	bne.n	16b7a <available+0x18>
   16b6a:	6882      	ldr	r2, [r0, #8]
   16b6c:	6843      	ldr	r3, [r0, #4]
   16b6e:	429a      	cmp	r2, r3
   16b70:	d803      	bhi.n	16b7a <available+0x18>
		*res = buffer->size - buffer->tmp_rd_idx;
		return true;
	}

	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   16b72:	1a9b      	subs	r3, r3, r2
   16b74:	600b      	str	r3, [r1, #0]

	return false;
   16b76:	2000      	movs	r0, #0
}
   16b78:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_rd_idx;
   16b7a:	6a03      	ldr	r3, [r0, #32]
   16b7c:	6882      	ldr	r2, [r0, #8]
   16b7e:	1a9b      	subs	r3, r3, r2
   16b80:	600b      	str	r3, [r1, #0]
		return true;
   16b82:	2001      	movs	r0, #1
   16b84:	4770      	bx	lr

00016b86 <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   16b86:	b510      	push	{r4, lr}
   16b88:	b082      	sub	sp, #8
   16b8a:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   16b8c:	a901      	add	r1, sp, #4
   16b8e:	f7ff ffd4 	bl	16b3a <free_space>
   16b92:	b120      	cbz	r0, 16b9e <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   16b94:	68e3      	ldr	r3, [r4, #12]
   16b96:	9a01      	ldr	r2, [sp, #4]
   16b98:	4413      	add	r3, r2
   16b9a:	3b01      	subs	r3, #1
   16b9c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   16b9e:	6a20      	ldr	r0, [r4, #32]
   16ba0:	9b01      	ldr	r3, [sp, #4]
   16ba2:	1ac0      	subs	r0, r0, r3
}
   16ba4:	3801      	subs	r0, #1
   16ba6:	b002      	add	sp, #8
   16ba8:	bd10      	pop	{r4, pc}

00016baa <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   16baa:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   16bac:	6903      	ldr	r3, [r0, #16]
   16bae:	f013 0f04 	tst.w	r3, #4
   16bb2:	d100      	bne.n	16bb6 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   16bb4:	bd38      	pop	{r3, r4, r5, pc}
   16bb6:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   16bb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
   16bba:	f7ff ffe4 	bl	16b86 <get_usage>
   16bbe:	4285      	cmp	r5, r0
   16bc0:	d902      	bls.n	16bc8 <max_utilization_update+0x1e>
   16bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16bc4:	6260      	str	r0, [r4, #36]	; 0x24
   16bc6:	e7f5      	b.n	16bb4 <max_utilization_update+0xa>
   16bc8:	4620      	mov	r0, r4
   16bca:	f7ff ffdc 	bl	16b86 <get_usage>
   16bce:	e7f9      	b.n	16bc4 <max_utilization_update+0x1a>

00016bd0 <rd_idx_inc>:
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   16bd0:	68c3      	ldr	r3, [r0, #12]
	uint32_t i = idx + val;
   16bd2:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16bd4:	6903      	ldr	r3, [r0, #16]
   16bd6:	f013 0f01 	tst.w	r3, #1
   16bda:	d104      	bne.n	16be6 <rd_idx_inc+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
   16bdc:	6a02      	ldr	r2, [r0, #32]
   16bde:	4291      	cmp	r1, r2
   16be0:	d304      	bcc.n	16bec <rd_idx_inc+0x1c>
   16be2:	1a89      	subs	r1, r1, r2
   16be4:	e002      	b.n	16bec <rd_idx_inc+0x1c>
		return i & (buffer->size - 1);
   16be6:	6a02      	ldr	r2, [r0, #32]
   16be8:	3a01      	subs	r2, #1
   16bea:	4011      	ands	r1, r2
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   16bec:	60c1      	str	r1, [r0, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   16bee:	f023 0308 	bic.w	r3, r3, #8
   16bf2:	6103      	str	r3, [r0, #16]
}
   16bf4:	4770      	bx	lr

00016bf6 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   16bf6:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   16bf8:	2300      	movs	r3, #0
   16bfa:	f36f 0300 	bfc	r3, #0, #1
   16bfe:	f043 0302 	orr.w	r3, r3, #2
   16c02:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   16c06:	69c2      	ldr	r2, [r0, #28]
   16c08:	6804      	ldr	r4, [r0, #0]
   16c0a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16c0e:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   16c10:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16c12:	6902      	ldr	r2, [r0, #16]
   16c14:	f012 0f01 	tst.w	r2, #1
   16c18:	d104      	bne.n	16c24 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   16c1a:	6a04      	ldr	r4, [r0, #32]
   16c1c:	42a3      	cmp	r3, r4
   16c1e:	d304      	bcc.n	16c2a <add_skip_item+0x34>
   16c20:	1b1b      	subs	r3, r3, r4
   16c22:	e002      	b.n	16c2a <add_skip_item+0x34>
		return i & (buffer->size - 1);
   16c24:	6a04      	ldr	r4, [r0, #32]
   16c26:	3c01      	subs	r4, #1
   16c28:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16c2a:	6003      	str	r3, [r0, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16c2c:	68c4      	ldr	r4, [r0, #12]
   16c2e:	429c      	cmp	r4, r3
   16c30:	d00a      	beq.n	16c48 <add_skip_item+0x52>
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16c32:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   16c34:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16c36:	6903      	ldr	r3, [r0, #16]
   16c38:	f013 0f01 	tst.w	r3, #1
   16c3c:	d108      	bne.n	16c50 <add_skip_item+0x5a>
	return (i >= buffer->size) ? i - buffer->size : i;
   16c3e:	6a03      	ldr	r3, [r0, #32]
   16c40:	4299      	cmp	r1, r3
   16c42:	d308      	bcc.n	16c56 <add_skip_item+0x60>
   16c44:	1ac9      	subs	r1, r1, r3
   16c46:	e006      	b.n	16c56 <add_skip_item+0x60>
		buffer->flags |= MPSC_PBUF_FULL;
   16c48:	f042 0208 	orr.w	r2, r2, #8
   16c4c:	6102      	str	r2, [r0, #16]
   16c4e:	e7f0      	b.n	16c32 <add_skip_item+0x3c>
		return i & (buffer->size - 1);
   16c50:	6a03      	ldr	r3, [r0, #32]
   16c52:	3b01      	subs	r3, #1
   16c54:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16c56:	6041      	str	r1, [r0, #4]
}
   16c58:	bc10      	pop	{r4}
   16c5a:	4770      	bx	lr

00016c5c <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   16c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c60:	b083      	sub	sp, #12
   16c62:	4604      	mov	r4, r0
   16c64:	9101      	str	r1, [sp, #4]
   16c66:	4617      	mov	r7, r2
   16c68:	4698      	mov	r8, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   16c6a:	69c5      	ldr	r5, [r0, #28]
   16c6c:	68c6      	ldr	r6, [r0, #12]
   16c6e:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   16c72:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   16c76:	f003 0303 	and.w	r3, r3, #3
   16c7a:	2b02      	cmp	r3, #2
   16c7c:	d024      	beq.n	16cc8 <drop_item_locked+0x6c>
	return 0;
   16c7e:	2100      	movs	r1, #0
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   16c80:	2300      	movs	r3, #0
   16c82:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
   16c84:	f8c8 3000 	str.w	r3, [r8]

	if (skip_wlen) {
   16c88:	bb19      	cbnz	r1, 16cd2 <drop_item_locked+0x76>
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   16c8a:	6923      	ldr	r3, [r4, #16]
   16c8c:	f013 0f02 	tst.w	r3, #2
   16c90:	d073      	beq.n	16d7a <drop_item_locked+0x11e>
		return false;
	}

	uint32_t rd_wlen = buffer->get_wlen(item);
   16c92:	69a3      	ldr	r3, [r4, #24]
   16c94:	4658      	mov	r0, fp
   16c96:	4798      	blx	r3
   16c98:	4682      	mov	sl, r0
	return item->hdr.valid;
   16c9a:	f815 9026 	ldrb.w	r9, [r5, r6, lsl #2]

	/* If packet is busy need to be ommited. */
	if (!is_valid(item)) {
   16c9e:	f019 0901 	ands.w	r9, r9, #1
   16ca2:	d06c      	beq.n	16d7e <drop_item_locked+0x122>
		return false;
	} else if (item->hdr.busy) {
   16ca4:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   16ca8:	f013 0f02 	tst.w	r3, #2
   16cac:	d039      	beq.n	16d22 <drop_item_locked+0xc6>
		MPSC_PBUF_DBG(buffer, "no space: Found busy packet %p (len:%d)", item, rd_wlen);
		/* Add skip packet before claimed packet. */
		if (free_wlen) {
   16cae:	9b01      	ldr	r3, [sp, #4]
   16cb0:	b9bb      	cbnz	r3, 16ce2 <drop_item_locked+0x86>
			add_skip_item(buffer, free_wlen);
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
		}
		/* Move all indexes forward, after claimed packet. */
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   16cb2:	6862      	ldr	r2, [r4, #4]
	uint32_t i = idx + val;
   16cb4:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16cb6:	6923      	ldr	r3, [r4, #16]
   16cb8:	f013 0001 	ands.w	r0, r3, #1
   16cbc:	d116      	bne.n	16cec <drop_item_locked+0x90>
	return (i >= buffer->size) ? i - buffer->size : i;
   16cbe:	6a21      	ldr	r1, [r4, #32]
   16cc0:	428a      	cmp	r2, r1
   16cc2:	d316      	bcc.n	16cf2 <drop_item_locked+0x96>
   16cc4:	1a52      	subs	r2, r2, r1
   16cc6:	e014      	b.n	16cf2 <drop_item_locked+0x96>
		return item->skip.len;
   16cc8:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   16ccc:	f3c1 019d 	ubfx	r1, r1, #2, #30
   16cd0:	e7d6      	b.n	16c80 <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
   16cd2:	4620      	mov	r0, r4
   16cd4:	f7ff ff7c 	bl	16bd0 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   16cd8:	68e3      	ldr	r3, [r4, #12]
   16cda:	60a3      	str	r3, [r4, #8]
		return true;
   16cdc:	f04f 0901 	mov.w	r9, #1
   16ce0:	e04d      	b.n	16d7e <drop_item_locked+0x122>
			add_skip_item(buffer, free_wlen);
   16ce2:	4619      	mov	r1, r3
   16ce4:	4620      	mov	r0, r4
   16ce6:	f7ff ff86 	bl	16bf6 <add_skip_item>
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
   16cea:	e7e2      	b.n	16cb2 <drop_item_locked+0x56>
		return i & (buffer->size - 1);
   16cec:	6a21      	ldr	r1, [r4, #32]
   16cee:	3901      	subs	r1, #1
   16cf0:	400a      	ands	r2, r1
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   16cf2:	6062      	str	r2, [r4, #4]

		/* If allocation wrapped around the buffer and found busy packet
		 * that was already ommited, skip it again.
		 */
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16cf4:	68e1      	ldr	r1, [r4, #12]
   16cf6:	68a2      	ldr	r2, [r4, #8]
   16cf8:	4291      	cmp	r1, r2
   16cfa:	d006      	beq.n	16d0a <drop_item_locked+0xae>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
		}

		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   16cfc:	68a2      	ldr	r2, [r4, #8]
   16cfe:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   16d00:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   16d02:	f043 0308 	orr.w	r3, r3, #8
   16d06:	6123      	str	r3, [r4, #16]
   16d08:	e039      	b.n	16d7e <drop_item_locked+0x122>
	uint32_t i = idx + val;
   16d0a:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16d0c:	b920      	cbnz	r0, 16d18 <drop_item_locked+0xbc>
	return (i >= buffer->size) ? i - buffer->size : i;
   16d0e:	6a21      	ldr	r1, [r4, #32]
   16d10:	428a      	cmp	r2, r1
   16d12:	d304      	bcc.n	16d1e <drop_item_locked+0xc2>
   16d14:	1a52      	subs	r2, r2, r1
   16d16:	e002      	b.n	16d1e <drop_item_locked+0xc2>
		return i & (buffer->size - 1);
   16d18:	6a21      	ldr	r1, [r4, #32]
   16d1a:	3901      	subs	r1, #1
   16d1c:	400a      	ands	r2, r1
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   16d1e:	60a2      	str	r2, [r4, #8]
   16d20:	e7ec      	b.n	16cfc <drop_item_locked+0xa0>
	} else {
		/* Prepare packet dropping. */
		rd_idx_inc(buffer, rd_wlen);
   16d22:	4601      	mov	r1, r0
   16d24:	4620      	mov	r0, r4
   16d26:	f7ff ff53 	bl	16bd0 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   16d2a:	68e3      	ldr	r3, [r4, #12]
   16d2c:	60a3      	str	r3, [r4, #8]
		/* Temporary move tmp_wr idx forward to ensure that packet
		 * will not be dropped twice and content will not be
		 * overwritten.
		 */
		if (free_wlen) {
   16d2e:	9b01      	ldr	r3, [sp, #4]
   16d30:	b123      	cbz	r3, 16d3c <drop_item_locked+0xe0>
					.valid = 0,
					.busy = 0
				}
			};

			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   16d32:	69e3      	ldr	r3, [r4, #28]
   16d34:	6822      	ldr	r2, [r4, #0]
   16d36:	2100      	movs	r1, #0
   16d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   16d3c:	9b01      	ldr	r3, [sp, #4]
   16d3e:	4453      	add	r3, sl
   16d40:	f8c8 3000 	str.w	r3, [r8]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   16d44:	6822      	ldr	r2, [r4, #0]
	uint32_t i = idx + val;
   16d46:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16d48:	6922      	ldr	r2, [r4, #16]
   16d4a:	f012 0f01 	tst.w	r2, #1
   16d4e:	d104      	bne.n	16d5a <drop_item_locked+0xfe>
	return (i >= buffer->size) ? i - buffer->size : i;
   16d50:	6a21      	ldr	r1, [r4, #32]
   16d52:	428b      	cmp	r3, r1
   16d54:	d304      	bcc.n	16d60 <drop_item_locked+0x104>
   16d56:	1a5b      	subs	r3, r3, r1
   16d58:	e002      	b.n	16d60 <drop_item_locked+0x104>
		return i & (buffer->size - 1);
   16d5a:	6a21      	ldr	r1, [r4, #32]
   16d5c:	3901      	subs	r1, #1
   16d5e:	400b      	ands	r3, r1
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   16d60:	6023      	str	r3, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   16d62:	f042 0208 	orr.w	r2, r2, #8
   16d66:	6122      	str	r2, [r4, #16]
		item->hdr.valid = 0;
   16d68:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   16d6c:	f36f 0300 	bfc	r3, #0, #1
   16d70:	f805 3026 	strb.w	r3, [r5, r6, lsl #2]
		*item_to_drop = item;
   16d74:	f8c7 b000 	str.w	fp, [r7]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   16d78:	e001      	b.n	16d7e <drop_item_locked+0x122>
		return false;
   16d7a:	f04f 0900 	mov.w	r9, #0
			       item, rd_wlen);
	}

	return true;
}
   16d7e:	4648      	mov	r0, r9
   16d80:	b003      	add	sp, #12
   16d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016d86 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   16d86:	b430      	push	{r4, r5}
	uint32_t i = idx + val;
   16d88:	1853      	adds	r3, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16d8a:	6904      	ldr	r4, [r0, #16]
   16d8c:	f014 0f01 	tst.w	r4, #1
   16d90:	d104      	bne.n	16d9c <post_drop_action+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
   16d92:	6a05      	ldr	r5, [r0, #32]
   16d94:	42ab      	cmp	r3, r5
   16d96:	d304      	bcc.n	16da2 <post_drop_action+0x1c>
   16d98:	1b5b      	subs	r3, r3, r5
   16d9a:	e002      	b.n	16da2 <post_drop_action+0x1c>
		return i & (buffer->size - 1);
   16d9c:	6a05      	ldr	r5, [r0, #32]
   16d9e:	3d01      	subs	r5, #1
   16da0:	402b      	ands	r3, r5
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   16da2:	6805      	ldr	r5, [r0, #0]
   16da4:	429d      	cmp	r5, r3
   16da6:	d014      	beq.n	16dd2 <post_drop_action+0x4c>
		buffer->flags &= ~MPSC_PBUF_FULL;
		return;
	}

	/* Operation interrupted, mark area as to be skipped. */
	union mpsc_pbuf_generic skip = {
   16da8:	2300      	movs	r3, #0
   16daa:	f36f 0300 	bfc	r3, #0, #1
   16dae:	f043 0302 	orr.w	r3, r3, #2
   16db2:	f362 039f 	bfi	r3, r2, #2, #30
			.busy = 1,
			.len = tmp_wr_idx_shift
		}
	};

	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16db6:	69c4      	ldr	r4, [r0, #28]
   16db8:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   16dbc:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   16dbe:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16dc0:	6902      	ldr	r2, [r0, #16]
   16dc2:	f012 0f01 	tst.w	r2, #1
   16dc6:	d109      	bne.n	16ddc <post_drop_action+0x56>
	return (i >= buffer->size) ? i - buffer->size : i;
   16dc8:	6a02      	ldr	r2, [r0, #32]
   16dca:	4293      	cmp	r3, r2
   16dcc:	d309      	bcc.n	16de2 <post_drop_action+0x5c>
   16dce:	1a9b      	subs	r3, r3, r2
   16dd0:	e007      	b.n	16de2 <post_drop_action+0x5c>
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   16dd2:	6001      	str	r1, [r0, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   16dd4:	f024 0408 	bic.w	r4, r4, #8
   16dd8:	6104      	str	r4, [r0, #16]
		return;
   16dda:	e003      	b.n	16de4 <post_drop_action+0x5e>
		return i & (buffer->size - 1);
   16ddc:	6a02      	ldr	r2, [r0, #32]
   16dde:	3a01      	subs	r2, #1
   16de0:	4013      	ands	r3, r2
	buffer->wr_idx = idx_inc(buffer,
   16de2:	6043      	str	r3, [r0, #4]
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   16de4:	bc30      	pop	{r4, r5}
   16de6:	4770      	bx	lr

00016de8 <mpsc_pbuf_init>:
{
   16de8:	b538      	push	{r3, r4, r5, lr}
   16dea:	4604      	mov	r4, r0
   16dec:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   16dee:	221c      	movs	r2, #28
   16df0:	2100      	movs	r1, #0
   16df2:	f000 fc39 	bl	17668 <memset>
	buffer->get_wlen = cfg->get_wlen;
   16df6:	68eb      	ldr	r3, [r5, #12]
   16df8:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   16dfa:	68ab      	ldr	r3, [r5, #8]
   16dfc:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   16dfe:	682b      	ldr	r3, [r5, #0]
   16e00:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   16e02:	686b      	ldr	r3, [r5, #4]
   16e04:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   16e06:	2200      	movs	r2, #0
   16e08:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   16e0a:	692a      	ldr	r2, [r5, #16]
   16e0c:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   16e0e:	b12b      	cbz	r3, 16e1c <mpsc_pbuf_init+0x34>
   16e10:	1e59      	subs	r1, r3, #1
   16e12:	420b      	tst	r3, r1
   16e14:	d102      	bne.n	16e1c <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   16e16:	f042 0201 	orr.w	r2, r2, #1
   16e1a:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   16e1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   16e20:	2201      	movs	r2, #1
   16e22:	2100      	movs	r1, #0
   16e24:	f002 fb44 	bl	194b0 <z_impl_k_sem_init>
}
   16e28:	bd38      	pop	{r3, r4, r5, pc}

00016e2a <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   16e2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e2e:	b087      	sub	sp, #28
   16e30:	469a      	mov	sl, r3
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   16e32:	2300      	movs	r3, #0
   16e34:	9305      	str	r3, [sp, #20]
	bool cont = true;
	uint32_t free_wlen;
	uint32_t tmp_wr_idx_shift = 0;
   16e36:	9303      	str	r3, [sp, #12]
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   16e38:	6a03      	ldr	r3, [r0, #32]
   16e3a:	428b      	cmp	r3, r1
   16e3c:	f0c0 8089 	bcc.w	16f52 <mpsc_pbuf_alloc+0x128>
   16e40:	4604      	mov	r4, r0
   16e42:	4688      	mov	r8, r1
   16e44:	4691      	mov	r9, r2
	uint32_t tmp_wr_idx_val = 0;
   16e46:	2300      	movs	r3, #0
   16e48:	9301      	str	r3, [sp, #4]
	bool cont = true;
   16e4a:	2701      	movs	r7, #1
	union mpsc_pbuf_generic *item = NULL;
   16e4c:	469b      	mov	fp, r3
   16e4e:	e040      	b.n	16ed2 <mpsc_pbuf_alloc+0xa8>
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   16e50:	9901      	ldr	r1, [sp, #4]
   16e52:	4620      	mov	r0, r4
   16e54:	f7ff ff97 	bl	16d86 <post_drop_action>
			tmp_wr_idx_shift = 0;
   16e58:	2300      	movs	r3, #0
   16e5a:	9303      	str	r3, [sp, #12]
   16e5c:	e045      	b.n	16eea <mpsc_pbuf_alloc+0xc0>

		wrap = free_space(buffer, &free_wlen);

		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   16e5e:	69e3      	ldr	r3, [r4, #28]
   16e60:	6822      	ldr	r2, [r4, #0]
			item =
   16e62:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   16e66:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   16e6a:	f36f 0100 	bfc	r1, #0, #1
   16e6e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   16e72:	b2c9      	uxtb	r1, r1
   16e74:	f36f 0141 	bfc	r1, #1, #1
   16e78:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16e7c:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   16e7e:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16e80:	6922      	ldr	r2, [r4, #16]
   16e82:	f012 0f01 	tst.w	r2, #1
   16e86:	d104      	bne.n	16e92 <mpsc_pbuf_alloc+0x68>
	return (i >= buffer->size) ? i - buffer->size : i;
   16e88:	6a21      	ldr	r1, [r4, #32]
   16e8a:	428b      	cmp	r3, r1
   16e8c:	d304      	bcc.n	16e98 <mpsc_pbuf_alloc+0x6e>
   16e8e:	1a5b      	subs	r3, r3, r1
   16e90:	e002      	b.n	16e98 <mpsc_pbuf_alloc+0x6e>
		return i & (buffer->size - 1);
   16e92:	6a21      	ldr	r1, [r4, #32]
   16e94:	3901      	subs	r1, #1
   16e96:	400b      	ands	r3, r1
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16e98:	6023      	str	r3, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16e9a:	68e1      	ldr	r1, [r4, #12]
   16e9c:	4299      	cmp	r1, r3
   16e9e:	d001      	beq.n	16ea4 <mpsc_pbuf_alloc+0x7a>
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   16ea0:	2700      	movs	r7, #0
   16ea2:	e008      	b.n	16eb6 <mpsc_pbuf_alloc+0x8c>
		buffer->flags |= MPSC_PBUF_FULL;
   16ea4:	f042 0208 	orr.w	r2, r2, #8
   16ea8:	6122      	str	r2, [r4, #16]
			cont = false;
   16eaa:	2700      	movs	r7, #0
   16eac:	e003      	b.n	16eb6 <mpsc_pbuf_alloc+0x8c>
		} else if (wrap) {
			add_skip_item(buffer, free_wlen);
   16eae:	4620      	mov	r0, r4
   16eb0:	f7ff fea1 	bl	16bf6 <add_skip_item>
			cont = true;
   16eb4:	4637      	mov	r7, r6
   16eb6:	f385 8811 	msr	BASEPRI, r5
   16eba:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   16ebe:	9905      	ldr	r1, [sp, #20]
   16ec0:	b129      	cbz	r1, 16ece <mpsc_pbuf_alloc+0xa4>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   16ec2:	6963      	ldr	r3, [r4, #20]
   16ec4:	b10b      	cbz	r3, 16eca <mpsc_pbuf_alloc+0xa0>
				buffer->notify_drop(buffer, dropped_item);
   16ec6:	4620      	mov	r0, r4
   16ec8:	4798      	blx	r3
			}
			dropped_item = NULL;
   16eca:	2300      	movs	r3, #0
   16ecc:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   16ece:	2f00      	cmp	r7, #0
   16ed0:	d041      	beq.n	16f56 <mpsc_pbuf_alloc+0x12c>
	__asm__ volatile(
   16ed2:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ed6:	f3ef 8511 	mrs	r5, BASEPRI
   16eda:	f383 8812 	msr	BASEPRI_MAX, r3
   16ede:	f3bf 8f6f 	isb	sy
   16ee2:	9500      	str	r5, [sp, #0]
		if (tmp_wr_idx_shift) {
   16ee4:	9a03      	ldr	r2, [sp, #12]
   16ee6:	2a00      	cmp	r2, #0
   16ee8:	d1b2      	bne.n	16e50 <mpsc_pbuf_alloc+0x26>
		wrap = free_space(buffer, &free_wlen);
   16eea:	a904      	add	r1, sp, #16
   16eec:	4620      	mov	r0, r4
   16eee:	f7ff fe24 	bl	16b3a <free_space>
   16ef2:	4606      	mov	r6, r0
		if (free_wlen >= wlen) {
   16ef4:	9904      	ldr	r1, [sp, #16]
   16ef6:	4541      	cmp	r1, r8
   16ef8:	d2b1      	bcs.n	16e5e <mpsc_pbuf_alloc+0x34>
		} else if (wrap) {
   16efa:	2800      	cmp	r0, #0
   16efc:	d1d7      	bne.n	16eae <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16efe:	ea5a 0309 	orrs.w	r3, sl, r9
   16f02:	d10b      	bne.n	16f1c <mpsc_pbuf_alloc+0xf2>
		} else if (cont) {
   16f04:	2f00      	cmp	r7, #0
   16f06:	d0d6      	beq.n	16eb6 <mpsc_pbuf_alloc+0x8c>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   16f08:	6823      	ldr	r3, [r4, #0]
   16f0a:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
   16f0c:	ab03      	add	r3, sp, #12
   16f0e:	aa05      	add	r2, sp, #20
   16f10:	9904      	ldr	r1, [sp, #16]
   16f12:	4620      	mov	r0, r4
   16f14:	f7ff fea2 	bl	16c5c <drop_item_locked>
   16f18:	4607      	mov	r7, r0
   16f1a:	e7cc      	b.n	16eb6 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16f1c:	f002 f9bd 	bl	1929a <k_is_in_isr>
   16f20:	2800      	cmp	r0, #0
   16f22:	d1ef      	bne.n	16f04 <mpsc_pbuf_alloc+0xda>
	__asm__ volatile(
   16f24:	9b00      	ldr	r3, [sp, #0]
   16f26:	f383 8811 	msr	BASEPRI, r3
   16f2a:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   16f2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   16f32:	464a      	mov	r2, r9
   16f34:	4653      	mov	r3, sl
   16f36:	f7fd fef5 	bl	14d24 <z_impl_k_sem_take>
	__asm__ volatile(
   16f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   16f3e:	f3ef 8511 	mrs	r5, BASEPRI
   16f42:	f383 8812 	msr	BASEPRI_MAX, r3
   16f46:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   16f4a:	fab0 f780 	clz	r7, r0
   16f4e:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16f50:	e7b1      	b.n	16eb6 <mpsc_pbuf_alloc+0x8c>
		return NULL;
   16f52:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   16f56:	4658      	mov	r0, fp
   16f58:	b007      	add	sp, #28
   16f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016f5e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   16f5e:	b570      	push	{r4, r5, r6, lr}
   16f60:	4604      	mov	r4, r0
   16f62:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   16f64:	6983      	ldr	r3, [r0, #24]
   16f66:	4608      	mov	r0, r1
   16f68:	4798      	blx	r3
   16f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   16f6e:	f3ef 8611 	mrs	r6, BASEPRI
   16f72:	f383 8812 	msr	BASEPRI_MAX, r3
   16f76:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   16f7a:	782b      	ldrb	r3, [r5, #0]
   16f7c:	f043 0301 	orr.w	r3, r3, #1
   16f80:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16f82:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   16f84:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16f86:	6923      	ldr	r3, [r4, #16]
   16f88:	f013 0f01 	tst.w	r3, #1
   16f8c:	d104      	bne.n	16f98 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   16f8e:	6a23      	ldr	r3, [r4, #32]
   16f90:	4298      	cmp	r0, r3
   16f92:	d304      	bcc.n	16f9e <mpsc_pbuf_commit+0x40>
   16f94:	1ac0      	subs	r0, r0, r3
   16f96:	e002      	b.n	16f9e <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   16f98:	6a23      	ldr	r3, [r4, #32]
   16f9a:	3b01      	subs	r3, #1
   16f9c:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16f9e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   16fa0:	4620      	mov	r0, r4
   16fa2:	f7ff fe02 	bl	16baa <max_utilization_update>
	__asm__ volatile(
   16fa6:	f386 8811 	msr	BASEPRI, r6
   16faa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   16fae:	bd70      	pop	{r4, r5, r6, pc}

00016fb0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   16fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fb2:	b083      	sub	sp, #12
   16fb4:	4604      	mov	r4, r0
   16fb6:	e02e      	b.n	17016 <mpsc_pbuf_claim+0x66>
		return item->skip.len;
   16fb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   16fbc:	0880      	lsrs	r0, r0, #2
   16fbe:	d14e      	bne.n	1705e <mpsc_pbuf_claim+0xae>
   16fc0:	e044      	b.n	1704c <mpsc_pbuf_claim+0x9c>
		return i & (buffer->size - 1);
   16fc2:	6a22      	ldr	r2, [r4, #32]
   16fc4:	3a01      	subs	r2, #1
   16fc6:	4013      	ands	r3, r2
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   16fc8:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				rd_idx_inc(buffer, inc);
   16fca:	4620      	mov	r0, r4
   16fcc:	f7ff fe00 	bl	16bd0 <rd_idx_inc>
				cont = true;
   16fd0:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   16fd2:	e01b      	b.n	1700c <mpsc_pbuf_claim+0x5c>
			} else {
				item->hdr.busy = 1;
   16fd4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   16fd8:	f041 0102 	orr.w	r1, r1, #2
   16fdc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   16fe0:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   16fe2:	69a3      	ldr	r3, [r4, #24]
   16fe4:	4630      	mov	r0, r6
   16fe6:	4798      	blx	r3
	uint32_t i = idx + val;
   16fe8:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16fea:	6923      	ldr	r3, [r4, #16]
   16fec:	f013 0f01 	tst.w	r3, #1
   16ff0:	d104      	bne.n	16ffc <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
   16ff2:	6a23      	ldr	r3, [r4, #32]
   16ff4:	4298      	cmp	r0, r3
   16ff6:	d304      	bcc.n	17002 <mpsc_pbuf_claim+0x52>
   16ff8:	1ac0      	subs	r0, r0, r3
   16ffa:	e002      	b.n	17002 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
   16ffc:	6a23      	ldr	r3, [r4, #32]
   16ffe:	3b01      	subs	r3, #1
   17000:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   17002:	60a0      	str	r0, [r4, #8]
		cont = false;
   17004:	2300      	movs	r3, #0
   17006:	e001      	b.n	1700c <mpsc_pbuf_claim+0x5c>
   17008:	2300      	movs	r3, #0
			item = NULL;
   1700a:	461e      	mov	r6, r3
   1700c:	f385 8811 	msr	BASEPRI, r5
   17010:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   17014:	b393      	cbz	r3, 1707c <mpsc_pbuf_claim+0xcc>
	__asm__ volatile(
   17016:	f04f 0340 	mov.w	r3, #64	; 0x40
   1701a:	f3ef 8511 	mrs	r5, BASEPRI
   1701e:	f383 8812 	msr	BASEPRI_MAX, r3
   17022:	f3bf 8f6f 	isb	sy
		(void)available(buffer, &a);
   17026:	a901      	add	r1, sp, #4
   17028:	4620      	mov	r0, r4
   1702a:	f7ff fd9a 	bl	16b62 <available>
			&buffer->buf[buffer->tmp_rd_idx];
   1702e:	69e3      	ldr	r3, [r4, #28]
   17030:	68a2      	ldr	r2, [r4, #8]
		item = (union mpsc_pbuf_generic *)
   17032:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (!a || is_invalid(item)) {
   17036:	9901      	ldr	r1, [sp, #4]
   17038:	2900      	cmp	r1, #0
   1703a:	d0e5      	beq.n	17008 <mpsc_pbuf_claim+0x58>
	return !item->hdr.valid && !item->hdr.busy;
   1703c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
		if (!a || is_invalid(item)) {
   17040:	f011 0103 	ands.w	r1, r1, #3
   17044:	d017      	beq.n	17076 <mpsc_pbuf_claim+0xc6>
	if (item->hdr.busy && !item->hdr.valid) {
   17046:	2902      	cmp	r1, #2
   17048:	d0b6      	beq.n	16fb8 <mpsc_pbuf_claim+0x8>
	return 0;
   1704a:	2000      	movs	r0, #0
	return item->hdr.valid;
   1704c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			if (skip || !is_valid(item)) {
   17050:	f011 0f01 	tst.w	r1, #1
   17054:	d1be      	bne.n	16fd4 <mpsc_pbuf_claim+0x24>
					skip ? skip : buffer->get_wlen(item);
   17056:	b910      	cbnz	r0, 1705e <mpsc_pbuf_claim+0xae>
   17058:	69a3      	ldr	r3, [r4, #24]
   1705a:	4630      	mov	r0, r6
   1705c:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   1705e:	68a3      	ldr	r3, [r4, #8]
   17060:	4601      	mov	r1, r0
	uint32_t i = idx + val;
   17062:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17064:	6922      	ldr	r2, [r4, #16]
   17066:	f012 0f01 	tst.w	r2, #1
   1706a:	d1aa      	bne.n	16fc2 <mpsc_pbuf_claim+0x12>
	return (i >= buffer->size) ? i - buffer->size : i;
   1706c:	6a22      	ldr	r2, [r4, #32]
   1706e:	4293      	cmp	r3, r2
   17070:	d3aa      	bcc.n	16fc8 <mpsc_pbuf_claim+0x18>
   17072:	1a9b      	subs	r3, r3, r2
   17074:	e7a8      	b.n	16fc8 <mpsc_pbuf_claim+0x18>
		cont = false;
   17076:	2300      	movs	r3, #0
			item = NULL;
   17078:	461e      	mov	r6, r3
   1707a:	e7c7      	b.n	1700c <mpsc_pbuf_claim+0x5c>

	return item;
}
   1707c:	4630      	mov	r0, r6
   1707e:	b003      	add	sp, #12
   17080:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017082 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   17082:	b570      	push	{r4, r5, r6, lr}
   17084:	4604      	mov	r4, r0
   17086:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   17088:	6983      	ldr	r3, [r0, #24]
   1708a:	4608      	mov	r0, r1
   1708c:	4798      	blx	r3
   1708e:	4601      	mov	r1, r0
   17090:	f04f 0340 	mov.w	r3, #64	; 0x40
   17094:	f3ef 8611 	mrs	r6, BASEPRI
   17098:	f383 8812 	msr	BASEPRI_MAX, r3
   1709c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   170a0:	782b      	ldrb	r3, [r5, #0]
   170a2:	f36f 0300 	bfc	r3, #0, #1
   170a6:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   170a8:	6923      	ldr	r3, [r4, #16]
   170aa:	f013 0f02 	tst.w	r3, #2
   170ae:	d00a      	beq.n	170c6 <mpsc_pbuf_free+0x44>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   170b0:	69e3      	ldr	r3, [r4, #28]
   170b2:	68e2      	ldr	r2, [r4, #12]
   170b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   170b8:	42ab      	cmp	r3, r5
   170ba:	d004      	beq.n	170c6 <mpsc_pbuf_free+0x44>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
		}
		rd_idx_inc(buffer, wlen);
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   170bc:	682b      	ldr	r3, [r5, #0]
   170be:	f360 039f 	bfi	r3, r0, #2, #30
   170c2:	602b      	str	r3, [r5, #0]
   170c4:	e00a      	b.n	170dc <mpsc_pbuf_free+0x5a>
		witem->hdr.busy = 0;
   170c6:	782b      	ldrb	r3, [r5, #0]
   170c8:	f36f 0341 	bfc	r3, #1, #1
   170cc:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   170ce:	68e2      	ldr	r2, [r4, #12]
   170d0:	68a3      	ldr	r3, [r4, #8]
   170d2:	429a      	cmp	r2, r3
   170d4:	d00b      	beq.n	170ee <mpsc_pbuf_free+0x6c>
		rd_idx_inc(buffer, wlen);
   170d6:	4620      	mov	r0, r4
   170d8:	f7ff fd7a 	bl	16bd0 <rd_idx_inc>
	__asm__ volatile(
   170dc:	f386 8811 	msr	BASEPRI, r6
   170e0:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   170e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   170e8:	f7fd fdf4 	bl	14cd4 <z_impl_k_sem_give>
}
   170ec:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i = idx + val;
   170ee:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   170f0:	6922      	ldr	r2, [r4, #16]
   170f2:	f012 0f01 	tst.w	r2, #1
   170f6:	d104      	bne.n	17102 <mpsc_pbuf_free+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   170f8:	6a22      	ldr	r2, [r4, #32]
   170fa:	4293      	cmp	r3, r2
   170fc:	d304      	bcc.n	17108 <mpsc_pbuf_free+0x86>
   170fe:	1a9b      	subs	r3, r3, r2
   17100:	e002      	b.n	17108 <mpsc_pbuf_free+0x86>
		return i & (buffer->size - 1);
   17102:	6a22      	ldr	r2, [r4, #32]
   17104:	3a01      	subs	r2, #1
   17106:	4013      	ands	r3, r2
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   17108:	60a3      	str	r3, [r4, #8]
   1710a:	e7e4      	b.n	170d6 <mpsc_pbuf_free+0x54>

0001710c <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
   1710c:	b500      	push	{lr}
   1710e:	b083      	sub	sp, #12
	uint32_t a;

	(void)available(buffer, &a);
   17110:	a901      	add	r1, sp, #4
   17112:	f7ff fd26 	bl	16b62 <available>

	return a ? true : false;
}
   17116:	9801      	ldr	r0, [sp, #4]
   17118:	3800      	subs	r0, #0
   1711a:	bf18      	it	ne
   1711c:	2001      	movne	r0, #1
   1711e:	b003      	add	sp, #12
   17120:	f85d fb04 	ldr.w	pc, [sp], #4

00017124 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   17124:	4770      	bx	lr

00017126 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   17126:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   17128:	f013 0f04 	tst.w	r3, #4
   1712c:	d001      	beq.n	17132 <log_msg_generic_get_wlen+0xc>
	return 0;
   1712e:	2000      	movs	r0, #0
}
   17130:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   17132:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   17134:	f3c3 204a 	ubfx	r0, r3, #9, #11
   17138:	eb00 5013 	add.w	r0, r0, r3, lsr #20
   1713c:	3017      	adds	r0, #23
   1713e:	f020 0007 	bic.w	r0, r0, #7
   17142:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   17144:	4770      	bx	lr

00017146 <dummy_timestamp>:
}
   17146:	2000      	movs	r0, #0
   17148:	4770      	bx	lr

0001714a <msg_filter_check>:
}
   1714a:	2001      	movs	r0, #1
   1714c:	4770      	bx	lr

0001714e <default_get_timestamp>:
{
   1714e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   17150:	f001 f9a9 	bl	184a6 <sys_clock_cycle_get_32>
}
   17154:	bd08      	pop	{r3, pc}

00017156 <k_msleep>:
{
   17156:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   17158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1715c:	17c1      	asrs	r1, r0, #31
   1715e:	03c9      	lsls	r1, r1, #15
   17160:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17164:	03c0      	lsls	r0, r0, #15
   17166:	f240 33e7 	movw	r3, #999	; 0x3e7
   1716a:	18c0      	adds	r0, r0, r3
   1716c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17170:	f04f 0300 	mov.w	r3, #0
   17174:	f141 0100 	adc.w	r1, r1, #0
   17178:	f7e8 ffb0 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1717c:	f7fe fa82 	bl	15684 <z_impl_k_sleep>
}
   17180:	bd08      	pop	{r3, pc}

00017182 <msg_alloc>:
{
   17182:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   17184:	2200      	movs	r2, #0
   17186:	2300      	movs	r3, #0
   17188:	f7ff fe4f 	bl	16e2a <mpsc_pbuf_alloc>
}
   1718c:	bd08      	pop	{r3, pc}

0001718e <msg_free>:
{
   1718e:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   17190:	f7ff ff77 	bl	17082 <mpsc_pbuf_free>
}
   17194:	bd08      	pop	{r3, pc}

00017196 <msg_pending>:
{
   17196:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   17198:	f7ff ffb8 	bl	1710c <mpsc_pbuf_is_pending>
}
   1719c:	bd08      	pop	{r3, pc}

0001719e <z_log_vprintk>:
{
   1719e:	b500      	push	{lr}
   171a0:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   171a2:	9103      	str	r1, [sp, #12]
   171a4:	9002      	str	r0, [sp, #8]
   171a6:	2000      	movs	r0, #0
   171a8:	9001      	str	r0, [sp, #4]
   171aa:	9000      	str	r0, [sp, #0]
   171ac:	4603      	mov	r3, r0
   171ae:	4602      	mov	r2, r0
   171b0:	4601      	mov	r1, r0
   171b2:	f000 f845 	bl	17240 <z_impl_z_log_msg_runtime_vcreate>
}
   171b6:	b005      	add	sp, #20
   171b8:	f85d fb04 	ldr.w	pc, [sp], #4

000171bc <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   171bc:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   171be:	2001      	movs	r0, #1
   171c0:	f7f4 fc5c 	bl	ba7c <z_log_dropped>
}
   171c4:	bd08      	pop	{r3, pc}

000171c6 <z_log_msg_claim>:
{
   171c6:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   171c8:	f7f4 fcde 	bl	bb88 <z_log_msg_local_claim>
}
   171cc:	bd08      	pop	{r3, pc}

000171ce <msg_commit>:
{
   171ce:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   171d0:	f7ff fec5 	bl	16f5e <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   171d4:	f7f4 fd76 	bl	bcc4 <z_log_msg_post_finalize>
}
   171d8:	bd08      	pop	{r3, pc}

000171da <z_log_get_tag>:
}
   171da:	2000      	movs	r0, #0
   171dc:	4770      	bx	lr

000171de <z_cbprintf_cpy>:
{
   171de:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   171e0:	6853      	ldr	r3, [r2, #4]
   171e2:	6896      	ldr	r6, [r2, #8]
   171e4:	1b9b      	subs	r3, r3, r6
   171e6:	428b      	cmp	r3, r1
   171e8:	d30c      	bcc.n	17204 <z_cbprintf_cpy+0x26>
   171ea:	460c      	mov	r4, r1
   171ec:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   171ee:	6813      	ldr	r3, [r2, #0]
   171f0:	460a      	mov	r2, r1
   171f2:	4601      	mov	r1, r0
   171f4:	1998      	adds	r0, r3, r6
   171f6:	f000 fa08 	bl	1760a <memcpy>
	desc->off += len;
   171fa:	68ab      	ldr	r3, [r5, #8]
   171fc:	4423      	add	r3, r4
   171fe:	60ab      	str	r3, [r5, #8]
	return len;
   17200:	4620      	mov	r0, r4
}
   17202:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   17204:	f06f 001b 	mvn.w	r0, #27
   17208:	e7fb      	b.n	17202 <z_cbprintf_cpy+0x24>

0001720a <z_log_msg_finalize>:
{
   1720a:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   1720c:	b188      	cbz	r0, 17232 <z_log_msg_finalize+0x28>
   1720e:	460e      	mov	r6, r1
   17210:	4614      	mov	r4, r2
   17212:	4619      	mov	r1, r3
   17214:	4605      	mov	r5, r0
	if (data) {
   17216:	b133      	cbz	r3, 17226 <z_log_msg_finalize+0x1c>
		uint8_t *d = msg->data + desc.package_len;
   17218:	3010      	adds	r0, #16
   1721a:	f3c2 234a 	ubfx	r3, r2, #9, #11
		memcpy(d, data, desc.data_len);
   1721e:	0d12      	lsrs	r2, r2, #20
   17220:	4418      	add	r0, r3
   17222:	f000 f9f2 	bl	1760a <memcpy>
	msg->hdr.desc = desc;
   17226:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   17228:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   1722a:	4628      	mov	r0, r5
   1722c:	f7f4 fd8e 	bl	bd4c <z_log_msg_commit>
}
   17230:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   17232:	f7f4 fc23 	bl	ba7c <z_log_dropped>
		return;
   17236:	e7fb      	b.n	17230 <z_log_msg_finalize+0x26>

00017238 <z_log_msg_static_create>:
{
   17238:	b508      	push	{r3, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1723a:	f7f4 fe15 	bl	be68 <z_impl_z_log_msg_static_create>
}
   1723e:	bd08      	pop	{r3, pc}

00017240 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   17240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17244:	b085      	sub	sp, #20
   17246:	4681      	mov	r9, r0
   17248:	460d      	mov	r5, r1
   1724a:	4690      	mov	r8, r2
   1724c:	461e      	mov	r6, r3
   1724e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   17252:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   17254:	b3a7      	cbz	r7, 172c0 <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
   17256:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17258:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   1725a:	9300      	str	r3, [sp, #0]
   1725c:	463b      	mov	r3, r7
   1725e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17260:	2110      	movs	r1, #16
   17262:	2000      	movs	r0, #0
   17264:	f7f3 fa20 	bl	a6a8 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   17268:	4682      	mov	sl, r0
   1726a:	eb00 030b 	add.w	r3, r0, fp
   1726e:	3317      	adds	r3, #23
   17270:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   17274:	2400      	movs	r4, #0
   17276:	f36f 0400 	bfc	r4, #0, #1
   1727a:	f36f 0441 	bfc	r4, #1, #1
   1727e:	f36f 0482 	bfc	r4, #2, #1
   17282:	f369 04c5 	bfi	r4, r9, #3, #3
   17286:	f368 1488 	bfi	r4, r8, #6, #3
   1728a:	f360 2453 	bfi	r4, r0, #9, #11
   1728e:	f36b 541f 	bfi	r4, fp, #20, #12
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   17292:	0898      	lsrs	r0, r3, #2
   17294:	f7f4 fc70 	bl	bb78 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   17298:	4680      	mov	r8, r0
   1729a:	b140      	cbz	r0, 172ae <z_impl_z_log_msg_runtime_vcreate+0x6e>
   1729c:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1729e:	b137      	cbz	r7, 172ae <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   172a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   172a2:	9300      	str	r3, [sp, #0]
   172a4:	463b      	mov	r3, r7
   172a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   172a8:	4651      	mov	r1, sl
   172aa:	f7f3 f9fd 	bl	a6a8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   172ae:	4633      	mov	r3, r6
   172b0:	4622      	mov	r2, r4
   172b2:	4629      	mov	r1, r5
   172b4:	4640      	mov	r0, r8
   172b6:	f7ff ffa8 	bl	1720a <z_log_msg_finalize>
	}
}
   172ba:	b005      	add	sp, #20
   172bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   172c0:	2000      	movs	r0, #0
   172c2:	e7d1      	b.n	17268 <z_impl_z_log_msg_runtime_vcreate+0x28>

000172c4 <buffer_write>:
{
   172c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172c6:	4607      	mov	r7, r0
   172c8:	460d      	mov	r5, r1
   172ca:	4614      	mov	r4, r2
   172cc:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   172ce:	4632      	mov	r2, r6
   172d0:	4621      	mov	r1, r4
   172d2:	4628      	mov	r0, r5
   172d4:	47b8      	blx	r7
		buf += processed;
   172d6:	4405      	add	r5, r0
	} while (len != 0);
   172d8:	1a24      	subs	r4, r4, r0
   172da:	d1f8      	bne.n	172ce <buffer_write+0xa>
}
   172dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000172de <cbvprintf>:
{
   172de:	b510      	push	{r4, lr}
   172e0:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   172e2:	2400      	movs	r4, #0
   172e4:	9400      	str	r4, [sp, #0]
   172e6:	f7f3 ffd5 	bl	b294 <z_cbvprintf_impl>
}
   172ea:	b002      	add	sp, #8
   172ec:	bd10      	pop	{r4, pc}

000172ee <color_prefix>:
{
   172ee:	b508      	push	{r3, lr}
   172f0:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   172f2:	2201      	movs	r2, #1
   172f4:	f7f4 fec6 	bl	c084 <color_print>
}
   172f8:	bd08      	pop	{r3, pc}

000172fa <color_postfix>:
{
   172fa:	b508      	push	{r3, lr}
   172fc:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   172fe:	2200      	movs	r2, #0
   17300:	f7f4 fec0 	bl	c084 <color_print>
}
   17304:	bd08      	pop	{r3, pc}

00017306 <postfix_print>:
{
   17306:	b538      	push	{r3, r4, r5, lr}
   17308:	4605      	mov	r5, r0
   1730a:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   1730c:	f001 0101 	and.w	r1, r1, #1
   17310:	f7ff fff3 	bl	172fa <color_postfix>
	newline_print(output, flags);
   17314:	4621      	mov	r1, r4
   17316:	4628      	mov	r0, r5
   17318:	f7f4 ff3e 	bl	c198 <newline_print>
}
   1731c:	bd38      	pop	{r3, r4, r5, pc}

0001731e <log_msg_hexdump>:
{
   1731e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17322:	b083      	sub	sp, #12
   17324:	4680      	mov	r8, r0
   17326:	460e      	mov	r6, r1
   17328:	4615      	mov	r5, r2
   1732a:	461f      	mov	r7, r3
   1732c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   17330:	462c      	mov	r4, r5
   17332:	2d10      	cmp	r5, #16
   17334:	bf28      	it	cs
   17336:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   17338:	f8cd 9000 	str.w	r9, [sp]
   1733c:	463b      	mov	r3, r7
   1733e:	4622      	mov	r2, r4
   17340:	4631      	mov	r1, r6
   17342:	4640      	mov	r0, r8
   17344:	f7f4 ff3c 	bl	c1c0 <hexdump_line_print>
		data += length;
   17348:	4426      	add	r6, r4
	} while (len);
   1734a:	1b2d      	subs	r5, r5, r4
   1734c:	d1f0      	bne.n	17330 <log_msg_hexdump+0x12>
}
   1734e:	b003      	add	sp, #12
   17350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017354 <log_output_flush>:
{
   17354:	b510      	push	{r4, lr}
   17356:	4604      	mov	r4, r0
		     output->control_block->offset,
   17358:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1735a:	6853      	ldr	r3, [r2, #4]
   1735c:	6812      	ldr	r2, [r2, #0]
   1735e:	6881      	ldr	r1, [r0, #8]
   17360:	6800      	ldr	r0, [r0, #0]
   17362:	f7ff ffaf 	bl	172c4 <buffer_write>
	output->control_block->offset = 0;
   17366:	6863      	ldr	r3, [r4, #4]
   17368:	2200      	movs	r2, #0
   1736a:	601a      	str	r2, [r3, #0]
}
   1736c:	bd10      	pop	{r4, pc}

0001736e <out_func>:
{
   1736e:	b538      	push	{r3, r4, r5, lr}
   17370:	4605      	mov	r5, r0
   17372:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   17374:	684b      	ldr	r3, [r1, #4]
   17376:	681a      	ldr	r2, [r3, #0]
   17378:	68cb      	ldr	r3, [r1, #12]
   1737a:	429a      	cmp	r2, r3
   1737c:	d00f      	beq.n	1739e <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   1737e:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   17380:	f3bf 8f5b 	dmb	ish
   17384:	e853 2f00 	ldrex	r2, [r3]
   17388:	1c51      	adds	r1, r2, #1
   1738a:	e843 1000 	strex	r0, r1, [r3]
   1738e:	2800      	cmp	r0, #0
   17390:	d1f8      	bne.n	17384 <out_func+0x16>
   17392:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   17396:	68a3      	ldr	r3, [r4, #8]
   17398:	549d      	strb	r5, [r3, r2]
}
   1739a:	2000      	movs	r0, #0
   1739c:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   1739e:	4608      	mov	r0, r1
   173a0:	f7ff ffd8 	bl	17354 <log_output_flush>
   173a4:	e7eb      	b.n	1737e <out_func+0x10>

000173a6 <cr_out_func>:
{
   173a6:	b538      	push	{r3, r4, r5, lr}
   173a8:	4604      	mov	r4, r0
   173aa:	460d      	mov	r5, r1
	if (c == '\n') {
   173ac:	280a      	cmp	r0, #10
   173ae:	d005      	beq.n	173bc <cr_out_func+0x16>
	out_func(c, ctx);
   173b0:	4629      	mov	r1, r5
   173b2:	4620      	mov	r0, r4
   173b4:	f7ff ffdb 	bl	1736e <out_func>
}
   173b8:	2000      	movs	r0, #0
   173ba:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   173bc:	200d      	movs	r0, #13
   173be:	f7ff ffd6 	bl	1736e <out_func>
   173c2:	e7f5      	b.n	173b0 <cr_out_func+0xa>

000173c4 <k_msleep>:
{
   173c4:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   173c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   173ca:	17c1      	asrs	r1, r0, #31
   173cc:	03c9      	lsls	r1, r1, #15
   173ce:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   173d2:	03c0      	lsls	r0, r0, #15
   173d4:	f240 33e7 	movw	r3, #999	; 0x3e7
   173d8:	18c0      	adds	r0, r0, r3
   173da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   173de:	f04f 0300 	mov.w	r3, #0
   173e2:	f141 0100 	adc.w	r1, r1, #0
   173e6:	f7e8 fe79 	bl	dc <__aeabi_uldivmod>
   173ea:	f7fe f94b 	bl	15684 <z_impl_k_sleep>
}
   173ee:	bd08      	pop	{r3, pc}

000173f0 <log_backend_uart_init>:
}
   173f0:	4770      	bx	lr

000173f2 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   173f2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   173f4:	f001 021f 	and.w	r2, r1, #31
   173f8:	2301      	movs	r3, #1
   173fa:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   173fc:	0949      	lsrs	r1, r1, #5
   173fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17402:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17404:	f3bf 8f5b 	dmb	ish
   17408:	e850 2f00 	ldrex	r2, [r0]
   1740c:	ea02 0c01 	and.w	ip, r2, r1
   17410:	e840 ce00 	strex	lr, ip, [r0]
   17414:	f1be 0f00 	cmp.w	lr, #0
   17418:	d1f6      	bne.n	17408 <atomic_test_and_clear_bit+0x16>
   1741a:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   1741e:	4213      	tst	r3, r2
}
   17420:	bf14      	ite	ne
   17422:	2001      	movne	r0, #1
   17424:	2000      	moveq	r0, #0
   17426:	f85d fb04 	ldr.w	pc, [sp], #4

0001742a <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1742a:	f001 021f 	and.w	r2, r1, #31
   1742e:	2301      	movs	r3, #1
   17430:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17432:	0949      	lsrs	r1, r1, #5
   17434:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17438:	f3bf 8f5b 	dmb	ish
   1743c:	e850 2f00 	ldrex	r2, [r0]
   17440:	431a      	orrs	r2, r3
   17442:	e840 2100 	strex	r1, r2, [r0]
   17446:	2900      	cmp	r1, #0
   17448:	d1f8      	bne.n	1743c <atomic_set_bit+0x12>
   1744a:	f3bf 8f5b 	dmb	ish
}
   1744e:	4770      	bx	lr

00017450 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   17450:	2000      	movs	r0, #0
   17452:	4770      	bx	lr

00017454 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17454:	b538      	push	{r3, r4, r5, lr}
   17456:	4604      	mov	r4, r0

	if (esf != NULL) {
   17458:	460d      	mov	r5, r1
   1745a:	b111      	cbz	r1, 17462 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   1745c:	4608      	mov	r0, r1
   1745e:	f7f5 f9fb 	bl	c858 <esf_dump>
	}
	z_fatal_error(reason, esf);
   17462:	4629      	mov	r1, r5
   17464:	4620      	mov	r0, r4
   17466:	f7fc ffb5 	bl	143d4 <z_fatal_error>
}
   1746a:	bd38      	pop	{r3, r4, r5, pc}

0001746c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1746c:	b508      	push	{r3, lr}
   1746e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   17470:	6800      	ldr	r0, [r0, #0]
   17472:	f7ff ffef 	bl	17454 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   17476:	bd08      	pop	{r3, pc}

00017478 <arch_irq_enable>:
{
   17478:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   1747a:	b240      	sxtb	r0, r0
   1747c:	f7f5 fb22 	bl	cac4 <__NVIC_EnableIRQ>
}
   17480:	bd08      	pop	{r3, pc}

00017482 <arch_irq_disable>:
{
   17482:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   17484:	b240      	sxtb	r0, r0
   17486:	f7f5 fb2b 	bl	cae0 <__NVIC_DisableIRQ>
}
   1748a:	bd08      	pop	{r3, pc}

0001748c <z_arm_irq_priority_set>:
{
   1748c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1748e:	f012 0f01 	tst.w	r2, #1
   17492:	d104      	bne.n	1749e <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   17494:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   17496:	b240      	sxtb	r0, r0
   17498:	f7f5 fb34 	bl	cb04 <__NVIC_SetPriority>
}
   1749c:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1749e:	2100      	movs	r1, #0
   174a0:	e7f9      	b.n	17496 <z_arm_irq_priority_set+0xa>

000174a2 <z_irq_spurious>:
{
   174a2:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   174a4:	2100      	movs	r1, #0
   174a6:	2001      	movs	r0, #1
   174a8:	f7ff ffd4 	bl	17454 <z_arm_fatal_error>
}
   174ac:	bd08      	pop	{r3, pc}

000174ae <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   174ae:	b508      	push	{r3, lr}
	handler();
   174b0:	f7f5 fb5a 	bl	cb68 <z_SysNmiOnReset>
	z_arm_int_exit();
   174b4:	f7f5 fc4c 	bl	cd50 <z_arm_exc_exit>
}
   174b8:	bd08      	pop	{r3, pc}

000174ba <memory_fault_recoverable>:
}
   174ba:	2000      	movs	r0, #0
   174bc:	4770      	bx	lr

000174be <fault_handle>:
{
   174be:	b508      	push	{r3, lr}
	*recoverable = false;
   174c0:	2300      	movs	r3, #0
   174c2:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   174c4:	1ecb      	subs	r3, r1, #3
   174c6:	2b09      	cmp	r3, #9
   174c8:	d81a      	bhi.n	17500 <fault_handle+0x42>
   174ca:	e8df f003 	tbb	[pc, r3]
   174ce:	0905      	.short	0x0905
   174d0:	1919110d 	.word	0x1919110d
   174d4:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   174d8:	4611      	mov	r1, r2
   174da:	f7f6 fc27 	bl	dd2c <hard_fault>
}
   174de:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   174e0:	2100      	movs	r1, #0
   174e2:	f7f6 f9cf 	bl	d884 <mem_manage_fault>
		break;
   174e6:	e7fa      	b.n	174de <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   174e8:	2100      	movs	r1, #0
   174ea:	f7f5 fcbd 	bl	ce68 <bus_fault>
		break;
   174ee:	e7f6      	b.n	174de <fault_handle+0x20>
		reason = usage_fault(esf);
   174f0:	f7f5 ff1e 	bl	d330 <usage_fault>
		break;
   174f4:	e7f3      	b.n	174de <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   174f6:	4611      	mov	r1, r2
   174f8:	f7f6 f908 	bl	d70c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   174fc:	2000      	movs	r0, #0
		break;
   174fe:	e7ee      	b.n	174de <fault_handle+0x20>
		reserved_exception(esf, fault);
   17500:	f7f6 f94c 	bl	d79c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17504:	2000      	movs	r0, #0
	return reason;
   17506:	e7ea      	b.n	174de <fault_handle+0x20>

00017508 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   17508:	6843      	ldr	r3, [r0, #4]
   1750a:	1e5a      	subs	r2, r3, #1
		&&
   1750c:	4213      	tst	r3, r2
   1750e:	d106      	bne.n	1751e <mpu_partition_is_valid+0x16>
		&&
   17510:	2b1f      	cmp	r3, #31
   17512:	d906      	bls.n	17522 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   17514:	6803      	ldr	r3, [r0, #0]
		&&
   17516:	421a      	tst	r2, r3
   17518:	d005      	beq.n	17526 <mpu_partition_is_valid+0x1e>
   1751a:	2000      	movs	r0, #0
   1751c:	4770      	bx	lr
   1751e:	2000      	movs	r0, #0
   17520:	4770      	bx	lr
   17522:	2000      	movs	r0, #0
   17524:	4770      	bx	lr
   17526:	2001      	movs	r0, #1
}
   17528:	4770      	bx	lr

0001752a <mpu_configure_region>:
{
   1752a:	b500      	push	{lr}
   1752c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1752e:	680b      	ldr	r3, [r1, #0]
   17530:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   17532:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17534:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   17536:	2b20      	cmp	r3, #32
   17538:	d912      	bls.n	17560 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   1753a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1753e:	d811      	bhi.n	17564 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   17540:	3b01      	subs	r3, #1
   17542:	fab3 f383 	clz	r3, r3
   17546:	f1c3 031f 	rsb	r3, r3, #31
   1754a:	005b      	lsls	r3, r3, #1
   1754c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17550:	4313      	orrs	r3, r2
   17552:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   17554:	a901      	add	r1, sp, #4
   17556:	f7f6 fe95 	bl	e284 <region_allocate_and_init>
}
   1755a:	b005      	add	sp, #20
   1755c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   17560:	2308      	movs	r3, #8
   17562:	e7f5      	b.n	17550 <mpu_configure_region+0x26>
		return REGION_4G;
   17564:	233e      	movs	r3, #62	; 0x3e
   17566:	e7f3      	b.n	17550 <mpu_configure_region+0x26>

00017568 <arm_core_mpu_configure_static_mpu_regions>:
{
   17568:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1756a:	f7f6 ff4d 	bl	e408 <mpu_configure_static_mpu_regions>
}
   1756e:	bd08      	pop	{r3, pc}

00017570 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   17570:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   17572:	f7f6 ff53 	bl	e41c <mpu_configure_dynamic_mpu_regions>
}
   17576:	bd08      	pop	{r3, pc}

00017578 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   17578:	4602      	mov	r2, r0
   1757a:	e002      	b.n	17582 <strcpy+0xa>
		*d = *s;
   1757c:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   17580:	3101      	adds	r1, #1
	while (*s != '\0') {
   17582:	780b      	ldrb	r3, [r1, #0]
   17584:	2b00      	cmp	r3, #0
   17586:	d1f9      	bne.n	1757c <strcpy+0x4>
	}

	*d = '\0';
   17588:	7013      	strb	r3, [r2, #0]

	return dest;
}
   1758a:	4770      	bx	lr

0001758c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1758c:	4603      	mov	r3, r0
   1758e:	b1a2      	cbz	r2, 175ba <strncpy+0x2e>
{
   17590:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   17592:	780c      	ldrb	r4, [r1, #0]
   17594:	b12c      	cbz	r4, 175a2 <strncpy+0x16>
		*d = *s;
   17596:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   1759a:	3101      	adds	r1, #1
		d++;
		n--;
   1759c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   1759e:	2a00      	cmp	r2, #0
   175a0:	d1f7      	bne.n	17592 <strncpy+0x6>
	}

	while (n > 0) {
   175a2:	b122      	cbz	r2, 175ae <strncpy+0x22>
		*d = '\0';
   175a4:	2100      	movs	r1, #0
   175a6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   175aa:	3a01      	subs	r2, #1
   175ac:	e7f9      	b.n	175a2 <strncpy+0x16>
	}

	return dest;
}
   175ae:	bc10      	pop	{r4}
   175b0:	4770      	bx	lr
		*d = '\0';
   175b2:	2100      	movs	r1, #0
   175b4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   175b8:	3a01      	subs	r2, #1
	while (n > 0) {
   175ba:	2a00      	cmp	r2, #0
   175bc:	d1f9      	bne.n	175b2 <strncpy+0x26>
   175be:	4770      	bx	lr

000175c0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   175c0:	4603      	mov	r3, r0
	size_t n = 0;
   175c2:	2000      	movs	r0, #0

	while (*s != '\0') {
   175c4:	e001      	b.n	175ca <strlen+0xa>
		s++;
   175c6:	3301      	adds	r3, #1
		n++;
   175c8:	3001      	adds	r0, #1
	while (*s != '\0') {
   175ca:	781a      	ldrb	r2, [r3, #0]
   175cc:	2a00      	cmp	r2, #0
   175ce:	d1fa      	bne.n	175c6 <strlen+0x6>
	}

	return n;
}
   175d0:	4770      	bx	lr

000175d2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   175d2:	4603      	mov	r3, r0
	size_t n = 0;
   175d4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   175d6:	e001      	b.n	175dc <strnlen+0xa>
		s++;
   175d8:	3301      	adds	r3, #1
		n++;
   175da:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   175dc:	781a      	ldrb	r2, [r3, #0]
   175de:	b10a      	cbz	r2, 175e4 <strnlen+0x12>
   175e0:	4288      	cmp	r0, r1
   175e2:	d3f9      	bcc.n	175d8 <strnlen+0x6>
	}

	return n;
}
   175e4:	4770      	bx	lr

000175e6 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   175e6:	4613      	mov	r3, r2
   175e8:	b16a      	cbz	r2, 17606 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   175ea:	3b01      	subs	r3, #1
   175ec:	d007      	beq.n	175fe <memcmp+0x18>
   175ee:	f890 c000 	ldrb.w	ip, [r0]
   175f2:	780a      	ldrb	r2, [r1, #0]
   175f4:	4594      	cmp	ip, r2
   175f6:	d102      	bne.n	175fe <memcmp+0x18>
		c1++;
   175f8:	3001      	adds	r0, #1
		c2++;
   175fa:	3101      	adds	r1, #1
   175fc:	e7f5      	b.n	175ea <memcmp+0x4>
	}

	return *c1 - *c2;
   175fe:	7800      	ldrb	r0, [r0, #0]
   17600:	780b      	ldrb	r3, [r1, #0]
   17602:	1ac0      	subs	r0, r0, r3
   17604:	4770      	bx	lr
		return 0;
   17606:	2000      	movs	r0, #0
}
   17608:	4770      	bx	lr

0001760a <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1760a:	ea80 0301 	eor.w	r3, r0, r1
   1760e:	f013 0f03 	tst.w	r3, #3
   17612:	d001      	beq.n	17618 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   17614:	4603      	mov	r3, r0
   17616:	e023      	b.n	17660 <memcpy+0x56>
   17618:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1761a:	f013 0f03 	tst.w	r3, #3
   1761e:	d00f      	beq.n	17640 <memcpy+0x36>
			if (n == 0) {
   17620:	b30a      	cbz	r2, 17666 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   17622:	f811 cb01 	ldrb.w	ip, [r1], #1
   17626:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   1762a:	3a01      	subs	r2, #1
   1762c:	e7f5      	b.n	1761a <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   1762e:	f811 cb01 	ldrb.w	ip, [r1], #1
   17632:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   17636:	3a01      	subs	r2, #1
	while (n > 0) {
   17638:	2a00      	cmp	r2, #0
   1763a:	d1f8      	bne.n	1762e <memcpy+0x24>
	}

	return d;
}
   1763c:	bc10      	pop	{r4}
   1763e:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   17640:	2a03      	cmp	r2, #3
   17642:	d90d      	bls.n	17660 <memcpy+0x56>
{
   17644:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   17646:	f851 4b04 	ldr.w	r4, [r1], #4
   1764a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1764e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   17650:	2a03      	cmp	r2, #3
   17652:	d8f8      	bhi.n	17646 <memcpy+0x3c>
   17654:	e7f0      	b.n	17638 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   17656:	f811 cb01 	ldrb.w	ip, [r1], #1
   1765a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1765e:	3a01      	subs	r2, #1
	while (n > 0) {
   17660:	2a00      	cmp	r2, #0
   17662:	d1f8      	bne.n	17656 <memcpy+0x4c>
   17664:	4770      	bx	lr
}
   17666:	4770      	bx	lr

00017668 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   17668:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1766c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1766e:	e002      	b.n	17676 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   17670:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   17674:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   17676:	f013 0f03 	tst.w	r3, #3
   1767a:	d002      	beq.n	17682 <memset+0x1a>
		if (n == 0) {
   1767c:	2a00      	cmp	r2, #0
   1767e:	d1f7      	bne.n	17670 <memset+0x8>
   17680:	e00f      	b.n	176a2 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   17682:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   17684:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   17688:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1768c:	2a03      	cmp	r2, #3
   1768e:	d906      	bls.n	1769e <memset+0x36>
		*(d_word++) = c_word;
   17690:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   17694:	3a04      	subs	r2, #4
   17696:	e7f9      	b.n	1768c <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   17698:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1769c:	3a01      	subs	r2, #1
	while (n > 0) {
   1769e:	2a00      	cmp	r2, #0
   176a0:	d1fa      	bne.n	17698 <memset+0x30>
	}

	return buf;
}
   176a2:	4770      	bx	lr

000176a4 <_stdout_hook_default>:
}
   176a4:	f04f 30ff 	mov.w	r0, #4294967295
   176a8:	4770      	bx	lr

000176aa <sys_arch_reboot>:
{
   176aa:	b508      	push	{r3, lr}
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   176ac:	b2c0      	uxtb	r0, r0
   176ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   176b2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   176b6:	f7f6 ff09 	bl	e4cc <__NVIC_SystemReset>

000176ba <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   176ba:	2301      	movs	r3, #1
   176bc:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   176c0:	f3bf 8f4f 	dsb	sy
        __WFE();
   176c4:	bf20      	wfe
    while (true)
   176c6:	e7fd      	b.n	176c4 <nrf_power_system_off+0xa>

000176c8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   176c8:	2806      	cmp	r0, #6
   176ca:	d000      	beq.n	176ce <pm_state_set+0x6>
   176cc:	4770      	bx	lr
{
   176ce:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   176d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   176d4:	f7ff fff1 	bl	176ba <nrf_power_system_off>

000176d8 <pm_state_exit_post_ops>:
   176d8:	2300      	movs	r3, #0
   176da:	f383 8811 	msr	BASEPRI, r3
   176de:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   176e2:	4770      	bx	lr

000176e4 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   176e4:	b510      	push	{r4, lr}
   176e6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   176e8:	2301      	movs	r3, #1
   176ea:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   176ee:	2106      	movs	r1, #6
   176f0:	f7fb fd42 	bl	13178 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   176f4:	b918      	cbnz	r0, 176fe <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   176f6:	79a3      	ldrb	r3, [r4, #6]
   176f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   176fc:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   176fe:	bd10      	pop	{r4, pc}

00017700 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   17700:	b510      	push	{r4, lr}
   17702:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   17704:	2207      	movs	r2, #7
   17706:	f7ff ff80 	bl	1760a <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   1770a:	7823      	ldrb	r3, [r4, #0]
   1770c:	f023 0302 	bic.w	r3, r3, #2
   17710:	7023      	strb	r3, [r4, #0]
}
   17712:	bd10      	pop	{r4, pc}

00017714 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   17714:	7800      	ldrb	r0, [r0, #0]
}
   17716:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1771a:	4770      	bx	lr

0001771c <sys_put_le64>:
	dst[0] = val;
   1771c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1771e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   17722:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   17724:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   17726:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   17728:	0e00      	lsrs	r0, r0, #24
   1772a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1772c:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   1772e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   17732:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   17734:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   17736:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   17738:	0e09      	lsrs	r1, r1, #24
   1773a:	71d1      	strb	r1, [r2, #7]
}
   1773c:	4770      	bx	lr

0001773e <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
   1773e:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   17740:	79c3      	ldrb	r3, [r0, #7]
   17742:	7981      	ldrb	r1, [r0, #6]
   17744:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   17748:	7942      	ldrb	r2, [r0, #5]
   1774a:	7903      	ldrb	r3, [r0, #4]
   1774c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17750:	78c2      	ldrb	r2, [r0, #3]
   17752:	f890 c002 	ldrb.w	ip, [r0, #2]
   17756:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   1775a:	f890 e001 	ldrb.w	lr, [r0, #1]
   1775e:	7802      	ldrb	r2, [r0, #0]
   17760:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
   17764:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   17768:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1776c:	f85d fb04 	ldr.w	pc, [sp], #4

00017770 <hci_vendor_event>:
}
   17770:	4770      	bx	lr

00017772 <bt_br_init>:
}
   17772:	2000      	movs	r0, #0
   17774:	4770      	bx	lr

00017776 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   17776:	f001 0c1f 	and.w	ip, r1, #31
   1777a:	2301      	movs	r3, #1
   1777c:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   17780:	b172      	cbz	r2, 177a0 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17782:	0949      	lsrs	r1, r1, #5
   17784:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17788:	f3bf 8f5b 	dmb	ish
   1778c:	e850 2f00 	ldrex	r2, [r0]
   17790:	431a      	orrs	r2, r3
   17792:	e840 2100 	strex	r1, r2, [r0]
   17796:	2900      	cmp	r1, #0
   17798:	d1f8      	bne.n	1778c <atomic_set_bit_to+0x16>
   1779a:	f3bf 8f5b 	dmb	ish
   1779e:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   177a0:	0949      	lsrs	r1, r1, #5
   177a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   177a6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   177a8:	f3bf 8f5b 	dmb	ish
   177ac:	e850 2f00 	ldrex	r2, [r0]
   177b0:	401a      	ands	r2, r3
   177b2:	e840 2100 	strex	r1, r2, [r0]
   177b6:	2900      	cmp	r1, #0
   177b8:	d1f8      	bne.n	177ac <atomic_set_bit_to+0x36>
   177ba:	f3bf 8f5b 	dmb	ish
	}
}
   177be:	4770      	bx	lr

000177c0 <le_set_event_mask>:
{
   177c0:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   177c2:	2108      	movs	r1, #8
   177c4:	f242 0001 	movw	r0, #8193	; 0x2001
   177c8:	f7f7 fdf2 	bl	f3b0 <bt_hci_cmd_create>
	if (!buf) {
   177cc:	b180      	cbz	r0, 177f0 <le_set_event_mask+0x30>
   177ce:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   177d0:	2108      	movs	r1, #8
   177d2:	300c      	adds	r0, #12
   177d4:	f000 f9e5 	bl	17ba2 <net_buf_simple_add>
   177d8:	4602      	mov	r2, r0
	sys_put_le64(mask, cp_mask->events);
   177da:	2002      	movs	r0, #2
   177dc:	2100      	movs	r1, #0
   177de:	f7ff ff9d 	bl	1771c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   177e2:	2200      	movs	r2, #0
   177e4:	4621      	mov	r1, r4
   177e6:	f242 0001 	movw	r0, #8193	; 0x2001
   177ea:	f7f7 fe1f 	bl	f42c <bt_hci_cmd_send_sync>
}
   177ee:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   177f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   177f4:	e7fb      	b.n	177ee <le_set_event_mask+0x2e>

000177f6 <bt_init>:
{
   177f6:	b510      	push	{r4, lr}
	err = hci_init();
   177f8:	f7f8 fa2a 	bl	fc50 <hci_init>
	if (err) {
   177fc:	4604      	mov	r4, r0
   177fe:	b108      	cbz	r0, 17804 <bt_init+0xe>
}
   17800:	4620      	mov	r0, r4
   17802:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   17804:	f7f8 fce2 	bl	101cc <bt_finalize_init>
	return 0;
   17808:	e7fa      	b.n	17800 <bt_init+0xa>

0001780a <is_adv_using_rand_addr>:
}
   1780a:	2000      	movs	r0, #0
   1780c:	4770      	bx	lr

0001780e <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   1780e:	b910      	cbnz	r0, 17816 <bt_lookup_id_addr+0x8>
   17810:	b119      	cbz	r1, 1781a <bt_lookup_id_addr+0xc>
	return addr;
   17812:	4608      	mov	r0, r1
   17814:	4770      	bx	lr
		return NULL;
   17816:	2000      	movs	r0, #0
   17818:	4770      	bx	lr
   1781a:	2000      	movs	r0, #0
}
   1781c:	4770      	bx	lr

0001781e <bt_id_set_private_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   1781e:	b998      	cbnz	r0, 17848 <bt_id_set_private_addr+0x2a>
{
   17820:	b500      	push	{lr}
   17822:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   17824:	2106      	movs	r1, #6
   17826:	4668      	mov	r0, sp
   17828:	f7fb fca6 	bl	13178 <bt_rand>
	if (err) {
   1782c:	b110      	cbz	r0, 17834 <bt_id_set_private_addr+0x16>
}
   1782e:	b003      	add	sp, #12
   17830:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   17834:	f89d 3005 	ldrb.w	r3, [sp, #5]
   17838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1783c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   17840:	4668      	mov	r0, sp
   17842:	f7f8 fe1d 	bl	10480 <set_random_address>
	if (err)  {
   17846:	e7f2      	b.n	1782e <bt_id_set_private_addr+0x10>
		return -EINVAL;
   17848:	f06f 0015 	mvn.w	r0, #21
}
   1784c:	4770      	bx	lr

0001784e <bt_id_scan_random_addr_check>:
}
   1784e:	2001      	movs	r0, #1
   17850:	4770      	bx	lr

00017852 <get_adv_props_legacy>:
	switch (evt_type) {
   17852:	2804      	cmp	r0, #4
   17854:	d80a      	bhi.n	1786c <get_adv_props_legacy+0x1a>
   17856:	e8df f000 	tbb	[pc, r0]
   1785a:	0b03      	.short	0x0b03
   1785c:	050c      	.short	0x050c
   1785e:	07          	.byte	0x07
   1785f:	00          	.byte	0x00
   17860:	2003      	movs	r0, #3
   17862:	4770      	bx	lr
		return 0;
   17864:	2000      	movs	r0, #0
   17866:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   17868:	200a      	movs	r0, #10
   1786a:	4770      	bx	lr
		return 0;
   1786c:	2000      	movs	r0, #0
   1786e:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   17870:	2005      	movs	r0, #5
}
   17872:	4770      	bx	lr

00017874 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   17874:	7803      	ldrb	r3, [r0, #0]
   17876:	2b01      	cmp	r3, #1
   17878:	d814      	bhi.n	178a4 <valid_le_scan_param+0x30>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1787a:	6843      	ldr	r3, [r0, #4]
   1787c:	2b0f      	cmp	r3, #15
   1787e:	d813      	bhi.n	178a8 <valid_le_scan_param+0x34>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   17880:	8902      	ldrh	r2, [r0, #8]
   17882:	1f13      	subs	r3, r2, #4
   17884:	b29b      	uxth	r3, r3
   17886:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   1788a:	428b      	cmp	r3, r1
   1788c:	d80e      	bhi.n	178ac <valid_le_scan_param+0x38>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1788e:	8941      	ldrh	r1, [r0, #10]
   17890:	1f0b      	subs	r3, r1, #4
   17892:	b29b      	uxth	r3, r3
   17894:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   17898:	4283      	cmp	r3, r0
   1789a:	d809      	bhi.n	178b0 <valid_le_scan_param+0x3c>
	if (param->window > param->interval) {
   1789c:	428a      	cmp	r2, r1
   1789e:	d309      	bcc.n	178b4 <valid_le_scan_param+0x40>
	return true;
   178a0:	2001      	movs	r0, #1
   178a2:	4770      	bx	lr
		return false;
   178a4:	2000      	movs	r0, #0
   178a6:	4770      	bx	lr
		return false;
   178a8:	2000      	movs	r0, #0
   178aa:	4770      	bx	lr
		return false;
   178ac:	2000      	movs	r0, #0
   178ae:	4770      	bx	lr
		return false;
   178b0:	2000      	movs	r0, #0
   178b2:	4770      	bx	lr
		return false;
   178b4:	2000      	movs	r0, #0
}
   178b6:	4770      	bx	lr

000178b8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   178b8:	f001 0c1f 	and.w	ip, r1, #31
   178bc:	2301      	movs	r3, #1
   178be:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   178c2:	b172      	cbz	r2, 178e2 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   178c4:	0949      	lsrs	r1, r1, #5
   178c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   178ca:	f3bf 8f5b 	dmb	ish
   178ce:	e850 2f00 	ldrex	r2, [r0]
   178d2:	431a      	orrs	r2, r3
   178d4:	e840 2100 	strex	r1, r2, [r0]
   178d8:	2900      	cmp	r1, #0
   178da:	d1f8      	bne.n	178ce <atomic_set_bit_to+0x16>
   178dc:	f3bf 8f5b 	dmb	ish
   178e0:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178e2:	0949      	lsrs	r1, r1, #5
   178e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   178e8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   178ea:	f3bf 8f5b 	dmb	ish
   178ee:	e850 2f00 	ldrex	r2, [r0]
   178f2:	401a      	ands	r2, r3
   178f4:	e840 2100 	strex	r1, r2, [r0]
   178f8:	2900      	cmp	r1, #0
   178fa:	d1f8      	bne.n	178ee <atomic_set_bit_to+0x36>
   178fc:	f3bf 8f5b 	dmb	ish
}
   17900:	4770      	bx	lr

00017902 <bt_le_scan_set_enable>:
{
   17902:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   17904:	f7f9 f99c 	bl	10c40 <bt_le_scan_set_enable_legacy>
}
   17908:	bd08      	pop	{r3, pc}

0001790a <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   1790a:	b538      	push	{r3, r4, r5, lr}
   1790c:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1790e:	7f03      	ldrb	r3, [r0, #28]
   17910:	331b      	adds	r3, #27
   17912:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   17916:	8b02      	ldrh	r2, [r0, #24]
   17918:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1791a:	6a85      	ldr	r5, [r0, #40]	; 0x28
   1791c:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   17920:	f7f9 fbfa 	bl	11118 <pool_id>
   17924:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   17926:	7f23      	ldrb	r3, [r4, #28]
   17928:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   1792a:	4628      	mov	r0, r5
   1792c:	bd38      	pop	{r3, r4, r5, pc}

0001792e <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1792e:	4770      	bx	lr

00017930 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   17930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17934:	4604      	mov	r4, r0
   17936:	460d      	mov	r5, r1
   17938:	4617      	mov	r7, r2
   1793a:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1793c:	7a80      	ldrb	r0, [r0, #10]
   1793e:	f7f9 fbf7 	bl	11130 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   17942:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17944:	681b      	ldr	r3, [r3, #0]
   17946:	f8d3 8000 	ldr.w	r8, [r3]
   1794a:	463a      	mov	r2, r7
   1794c:	4633      	mov	r3, r6
   1794e:	4629      	mov	r1, r5
   17950:	4620      	mov	r0, r4
   17952:	47c0      	blx	r8
}
   17954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017958 <net_buf_destroy>:
{
   17958:	b510      	push	{r4, lr}
   1795a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1795c:	7a80      	ldrb	r0, [r0, #10]
   1795e:	f7f9 fbe7 	bl	11130 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   17962:	4621      	mov	r1, r4
   17964:	f001 fd99 	bl	1949a <k_queue_prepend>
}
   17968:	bd10      	pop	{r4, pc}

0001796a <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1796a:	b538      	push	{r3, r4, r5, lr}
   1796c:	4604      	mov	r4, r0
   1796e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17970:	7a80      	ldrb	r0, [r0, #10]
   17972:	f7f9 fbdd 	bl	11130 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   17976:	7a63      	ldrb	r3, [r4, #9]
   17978:	f013 0f01 	tst.w	r3, #1
   1797c:	d105      	bne.n	1798a <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1797e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17980:	681b      	ldr	r3, [r3, #0]
   17982:	689b      	ldr	r3, [r3, #8]
   17984:	4629      	mov	r1, r5
   17986:	4620      	mov	r0, r4
   17988:	4798      	blx	r3
}
   1798a:	bd38      	pop	{r3, r4, r5, pc}

0001798c <net_buf_id>:
{
   1798c:	b510      	push	{r4, lr}
   1798e:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17990:	7a80      	ldrb	r0, [r0, #10]
   17992:	f7f9 fbcd 	bl	11130 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17996:	7f03      	ldrb	r3, [r0, #28]
   17998:	331b      	adds	r3, #27
   1799a:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1799e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   179a0:	1aa4      	subs	r4, r4, r2
}
   179a2:	fbb4 f0f3 	udiv	r0, r4, r3
   179a6:	bd10      	pop	{r4, pc}

000179a8 <fixed_data_alloc>:
{
   179a8:	b570      	push	{r4, r5, r6, lr}
   179aa:	4604      	mov	r4, r0
   179ac:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   179ae:	7a80      	ldrb	r0, [r0, #10]
   179b0:	f7f9 fbbe 	bl	11130 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   179b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   179b6:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   179b8:	682a      	ldr	r2, [r5, #0]
   179ba:	6819      	ldr	r1, [r3, #0]
   179bc:	428a      	cmp	r2, r1
   179be:	bf28      	it	cs
   179c0:	460a      	movcs	r2, r1
   179c2:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   179c4:	685d      	ldr	r5, [r3, #4]
   179c6:	681e      	ldr	r6, [r3, #0]
   179c8:	4620      	mov	r0, r4
   179ca:	f7ff ffdf 	bl	1798c <net_buf_id>
}
   179ce:	fb00 5006 	mla	r0, r0, r6, r5
   179d2:	bd70      	pop	{r4, r5, r6, pc}

000179d4 <net_buf_reset>:
	buf->len  = 0U;
   179d4:	2300      	movs	r3, #0
   179d6:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   179d8:	6943      	ldr	r3, [r0, #20]
   179da:	60c3      	str	r3, [r0, #12]
}
   179dc:	4770      	bx	lr

000179de <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   179de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179e2:	b082      	sub	sp, #8
   179e4:	4605      	mov	r5, r0
   179e6:	9101      	str	r1, [sp, #4]
   179e8:	4616      	mov	r6, r2
   179ea:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   179ec:	4610      	mov	r0, r2
   179ee:	4619      	mov	r1, r3
   179f0:	f002 f804 	bl	199fc <sys_clock_timeout_end_calc>
   179f4:	4681      	mov	r9, r0
   179f6:	468a      	mov	sl, r1
	__asm__ volatile(
   179f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   179fc:	f3ef 8311 	mrs	r3, BASEPRI
   17a00:	f382 8812 	msr	BASEPRI_MAX, r2
   17a04:	f3bf 8f6f 	isb	sy
   17a08:	461a      	mov	r2, r3
   17a0a:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17a0c:	8b6b      	ldrh	r3, [r5, #26]
   17a0e:	b393      	cbz	r3, 17a76 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17a10:	8b2a      	ldrh	r2, [r5, #24]
   17a12:	4293      	cmp	r3, r2
   17a14:	d20b      	bcs.n	17a2e <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   17a16:	2200      	movs	r2, #0
   17a18:	2300      	movs	r3, #0
   17a1a:	4628      	mov	r0, r5
   17a1c:	f7fd f91c 	bl	14c58 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   17a20:	4604      	mov	r4, r0
   17a22:	b120      	cbz	r0, 17a2e <net_buf_alloc_len+0x50>
	__asm__ volatile(
   17a24:	f388 8811 	msr	BASEPRI, r8
   17a28:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   17a2c:	e00a      	b.n	17a44 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   17a2e:	8b69      	ldrh	r1, [r5, #26]
   17a30:	1e4b      	subs	r3, r1, #1
   17a32:	836b      	strh	r3, [r5, #26]
   17a34:	f388 8811 	msr	BASEPRI, r8
   17a38:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   17a3c:	4628      	mov	r0, r5
   17a3e:	f7ff ff64 	bl	1790a <pool_get_uninit>
   17a42:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17a44:	9b01      	ldr	r3, [sp, #4]
   17a46:	b3a3      	cbz	r3, 17ab2 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   17a48:	ea56 0307 	orrs.w	r3, r6, r7
   17a4c:	d005      	beq.n	17a5a <net_buf_alloc_len+0x7c>
   17a4e:	f1b7 3fff 	cmp.w	r7, #4294967295
   17a52:	bf08      	it	eq
   17a54:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17a58:	d11a      	bne.n	17a90 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17a5a:	4632      	mov	r2, r6
   17a5c:	463b      	mov	r3, r7
   17a5e:	a901      	add	r1, sp, #4
   17a60:	4620      	mov	r0, r4
   17a62:	f7ff ff65 	bl	17930 <data_alloc>
   17a66:	4605      	mov	r5, r0
   17a68:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   17a6a:	bb20      	cbnz	r0, 17ab6 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   17a6c:	4620      	mov	r0, r4
   17a6e:	f7ff ff73 	bl	17958 <net_buf_destroy>
			return NULL;
   17a72:	462c      	mov	r4, r5
   17a74:	e029      	b.n	17aca <net_buf_alloc_len+0xec>
   17a76:	f382 8811 	msr	BASEPRI, r2
   17a7a:	f3bf 8f6f 	isb	sy
   17a7e:	4632      	mov	r2, r6
   17a80:	463b      	mov	r3, r7
   17a82:	4628      	mov	r0, r5
   17a84:	f7fd f8e8 	bl	14c58 <z_impl_k_queue_get>
	if (!buf) {
   17a88:	4604      	mov	r4, r0
   17a8a:	2800      	cmp	r0, #0
   17a8c:	d1da      	bne.n	17a44 <net_buf_alloc_len+0x66>
   17a8e:	e01c      	b.n	17aca <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   17a90:	f7fd ff94 	bl	159bc <sys_clock_tick_get>
   17a94:	ebb9 0900 	subs.w	r9, r9, r0
   17a98:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   17a9c:	f1b9 0f01 	cmp.w	r9, #1
   17aa0:	f17a 0300 	sbcs.w	r3, sl, #0
   17aa4:	db02      	blt.n	17aac <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   17aa6:	464e      	mov	r6, r9
   17aa8:	4657      	mov	r7, sl
   17aaa:	e7d6      	b.n	17a5a <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   17aac:	2600      	movs	r6, #0
   17aae:	4637      	mov	r7, r6
   17ab0:	e7d3      	b.n	17a5a <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   17ab2:	2300      	movs	r3, #0
   17ab4:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   17ab6:	2301      	movs	r3, #1
   17ab8:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   17aba:	2300      	movs	r3, #0
   17abc:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   17abe:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   17ac0:	9b01      	ldr	r3, [sp, #4]
   17ac2:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   17ac4:	4620      	mov	r0, r4
   17ac6:	f7ff ff85 	bl	179d4 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17aca:	4620      	mov	r0, r4
   17acc:	b002      	add	sp, #8
   17ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017ad2 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   17ad2:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17ad4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   17ad6:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   17ad8:	6809      	ldr	r1, [r1, #0]
   17ada:	f7ff ff80 	bl	179de <net_buf_alloc_len>
}
   17ade:	bd08      	pop	{r3, pc}

00017ae0 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   17ae0:	b508      	push	{r3, lr}
   17ae2:	f7fd f8b9 	bl	14c58 <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   17ae6:	bd08      	pop	{r3, pc}

00017ae8 <net_buf_slist_put>:
	__asm__ volatile(
   17ae8:	f04f 0240 	mov.w	r2, #64	; 0x40
   17aec:	f3ef 8311 	mrs	r3, BASEPRI
   17af0:	f382 8812 	msr	BASEPRI_MAX, r2
   17af4:	f3bf 8f6f 	isb	sy
	parent->next = child;
   17af8:	2200      	movs	r2, #0
   17afa:	600a      	str	r2, [r1, #0]
	return list->tail;
   17afc:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   17afe:	b132      	cbz	r2, 17b0e <net_buf_slist_put+0x26>
	parent->next = child;
   17b00:	6011      	str	r1, [r2, #0]
	list->tail = node;
   17b02:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   17b04:	f383 8811 	msr	BASEPRI, r3
   17b08:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   17b0c:	4770      	bx	lr
   17b0e:	6041      	str	r1, [r0, #4]
	list->head = node;
   17b10:	6001      	str	r1, [r0, #0]
}
   17b12:	e7f7      	b.n	17b04 <net_buf_slist_put+0x1c>

00017b14 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   17b14:	4603      	mov	r3, r0
	__asm__ volatile(
   17b16:	f04f 0140 	mov.w	r1, #64	; 0x40
   17b1a:	f3ef 8211 	mrs	r2, BASEPRI
   17b1e:	f381 8812 	msr	BASEPRI_MAX, r1
   17b22:	f3bf 8f6f 	isb	sy
	return list->head;
   17b26:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   17b28:	b128      	cbz	r0, 17b36 <net_buf_slist_get+0x22>
	return node->next;
   17b2a:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   17b2c:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17b2e:	f8d3 c004 	ldr.w	ip, [r3, #4]
   17b32:	4560      	cmp	r0, ip
   17b34:	d004      	beq.n	17b40 <net_buf_slist_get+0x2c>
	__asm__ volatile(
   17b36:	f382 8811 	msr	BASEPRI, r2
   17b3a:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   17b3e:	4770      	bx	lr
	list->tail = node;
   17b40:	6059      	str	r1, [r3, #4]
}
   17b42:	e7f8      	b.n	17b36 <net_buf_slist_get+0x22>

00017b44 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17b44:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   17b46:	f001 fc9c 	bl	19482 <k_queue_append>
}
   17b4a:	bd08      	pop	{r3, pc}

00017b4c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17b4c:	b538      	push	{r3, r4, r5, lr}
   17b4e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   17b50:	e00a      	b.n	17b68 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   17b52:	2300      	movs	r3, #0
   17b54:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   17b56:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   17b58:	7aa0      	ldrb	r0, [r4, #10]
   17b5a:	f7f9 fae9 	bl	11130 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   17b5e:	6a03      	ldr	r3, [r0, #32]
   17b60:	b193      	cbz	r3, 17b88 <net_buf_unref+0x3c>
			pool->destroy(buf);
   17b62:	4620      	mov	r0, r4
   17b64:	4798      	blx	r3
{
   17b66:	462c      	mov	r4, r5
	while (buf) {
   17b68:	b194      	cbz	r4, 17b90 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   17b6a:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   17b6c:	7a23      	ldrb	r3, [r4, #8]
   17b6e:	3b01      	subs	r3, #1
   17b70:	b2db      	uxtb	r3, r3
   17b72:	7223      	strb	r3, [r4, #8]
   17b74:	b963      	cbnz	r3, 17b90 <net_buf_unref+0x44>
		if (buf->__buf) {
   17b76:	6961      	ldr	r1, [r4, #20]
   17b78:	2900      	cmp	r1, #0
   17b7a:	d0ea      	beq.n	17b52 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   17b7c:	4620      	mov	r0, r4
   17b7e:	f7ff fef4 	bl	1796a <data_unref>
			buf->__buf = NULL;
   17b82:	2300      	movs	r3, #0
   17b84:	6163      	str	r3, [r4, #20]
   17b86:	e7e4      	b.n	17b52 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   17b88:	4620      	mov	r0, r4
   17b8a:	f7ff fee5 	bl	17958 <net_buf_destroy>
   17b8e:	e7ea      	b.n	17b66 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   17b90:	bd38      	pop	{r3, r4, r5, pc}

00017b92 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17b92:	7a02      	ldrb	r2, [r0, #8]
   17b94:	3201      	adds	r2, #1
   17b96:	7202      	strb	r2, [r0, #8]
	return buf;
}
   17b98:	4770      	bx	lr

00017b9a <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17b9a:	6883      	ldr	r3, [r0, #8]
   17b9c:	440b      	add	r3, r1
   17b9e:	6003      	str	r3, [r0, #0]
}
   17ba0:	4770      	bx	lr

00017ba2 <net_buf_simple_add>:
	return buf->data + buf->len;
   17ba2:	6802      	ldr	r2, [r0, #0]
   17ba4:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   17ba6:	4419      	add	r1, r3
   17ba8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   17baa:	18d0      	adds	r0, r2, r3
   17bac:	4770      	bx	lr

00017bae <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   17bae:	b538      	push	{r3, r4, r5, lr}
   17bb0:	460d      	mov	r5, r1
   17bb2:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17bb4:	4611      	mov	r1, r2
   17bb6:	f7ff fff4 	bl	17ba2 <net_buf_simple_add>
   17bba:	4622      	mov	r2, r4
   17bbc:	4629      	mov	r1, r5
   17bbe:	f7ff fd24 	bl	1760a <memcpy>
}
   17bc2:	bd38      	pop	{r3, r4, r5, pc}

00017bc4 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   17bc4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   17bc6:	8882      	ldrh	r2, [r0, #4]
   17bc8:	1a52      	subs	r2, r2, r1
   17bca:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   17bcc:	6800      	ldr	r0, [r0, #0]
   17bce:	4408      	add	r0, r1
   17bd0:	6018      	str	r0, [r3, #0]
}
   17bd2:	4770      	bx	lr

00017bd4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   17bd4:	4603      	mov	r3, r0
	void *data = buf->data;
   17bd6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   17bd8:	889a      	ldrh	r2, [r3, #4]
   17bda:	1a52      	subs	r2, r2, r1
   17bdc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   17bde:	4401      	add	r1, r0
   17be0:	6019      	str	r1, [r3, #0]

	return data;
}
   17be2:	4770      	bx	lr

00017be4 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   17be4:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   17be6:	6803      	ldr	r3, [r0, #0]
   17be8:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   17bea:	2101      	movs	r1, #1
   17bec:	f7ff ffea 	bl	17bc4 <net_buf_simple_pull>

	return val;
}
   17bf0:	4620      	mov	r0, r4
   17bf2:	bd10      	pop	{r4, pc}

00017bf4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17bf4:	6802      	ldr	r2, [r0, #0]
   17bf6:	6880      	ldr	r0, [r0, #8]
}
   17bf8:	1a10      	subs	r0, r2, r0
   17bfa:	4770      	bx	lr

00017bfc <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   17bfc:	b119      	cbz	r1, 17c06 <nrf_clock_is_running+0xa>
   17bfe:	2901      	cmp	r1, #1
   17c00:	d00e      	beq.n	17c20 <nrf_clock_is_running+0x24>
   17c02:	2000      	movs	r0, #0
   17c04:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   17c06:	b122      	cbz	r2, 17c12 <nrf_clock_is_running+0x16>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17c08:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   17c0c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   17c10:	6013      	str	r3, [r2, #0]
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17c12:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   17c16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17c1a:	d10e      	bne.n	17c3a <nrf_clock_is_running+0x3e>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   17c1c:	2000      	movs	r0, #0
   17c1e:	4770      	bx	lr
            if (p_clk_src != NULL)
   17c20:	b122      	cbz	r2, 17c2c <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17c22:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   17c26:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   17c2a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17c2c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   17c30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17c34:	d103      	bne.n	17c3e <nrf_clock_is_running+0x42>
    return false;
   17c36:	2000      	movs	r0, #0
   17c38:	4770      	bx	lr
                return true;
   17c3a:	2001      	movs	r0, #1
   17c3c:	4770      	bx	lr
                return true;
   17c3e:	2001      	movs	r0, #1
}
   17c40:	4770      	bx	lr

00017c42 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   17c42:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   17c44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   17c48:	0089      	lsls	r1, r1, #2
   17c4a:	3138      	adds	r1, #56	; 0x38
}
   17c4c:	4408      	add	r0, r1
   17c4e:	4770      	bx	lr

00017c50 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   17c50:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   17c52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   17c56:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17c5a:	4770      	bx	lr

00017c5c <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   17c5c:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   17c5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   17c62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17c66:	4770      	bx	lr

00017c68 <get_status>:
{
   17c68:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   17c6a:	b2c9      	uxtb	r1, r1
   17c6c:	f7ff ffe9 	bl	17c42 <get_sub_data>
   17c70:	6880      	ldr	r0, [r0, #8]
}
   17c72:	f000 0007 	and.w	r0, r0, #7
   17c76:	bd08      	pop	{r3, pc}

00017c78 <set_off_state>:
	__asm__ volatile(
   17c78:	f04f 0340 	mov.w	r3, #64	; 0x40
   17c7c:	f3ef 8211 	mrs	r2, BASEPRI
   17c80:	f383 8812 	msr	BASEPRI_MAX, r3
   17c84:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17c88:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   17c8a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   17c8e:	d001      	beq.n	17c94 <set_off_state+0x1c>
   17c90:	428b      	cmp	r3, r1
   17c92:	d107      	bne.n	17ca4 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   17c94:	2301      	movs	r3, #1
   17c96:	6003      	str	r3, [r0, #0]
	int err = 0;
   17c98:	2000      	movs	r0, #0
	__asm__ volatile(
   17c9a:	f382 8811 	msr	BASEPRI, r2
   17c9e:	f3bf 8f6f 	isb	sy
}
   17ca2:	4770      	bx	lr
		err = -EPERM;
   17ca4:	f04f 30ff 	mov.w	r0, #4294967295
   17ca8:	e7f7      	b.n	17c9a <set_off_state+0x22>

00017caa <set_starting_state>:
	__asm__ volatile(
   17caa:	f04f 0340 	mov.w	r3, #64	; 0x40
   17cae:	f3ef 8211 	mrs	r2, BASEPRI
   17cb2:	f383 8812 	msr	BASEPRI_MAX, r3
   17cb6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17cba:	6803      	ldr	r3, [r0, #0]
   17cbc:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   17cc0:	f003 0307 	and.w	r3, r3, #7
   17cc4:	2b01      	cmp	r3, #1
   17cc6:	d008      	beq.n	17cda <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   17cc8:	458c      	cmp	ip, r1
   17cca:	d009      	beq.n	17ce0 <set_starting_state+0x36>
		err = -EPERM;
   17ccc:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   17cd0:	f382 8811 	msr	BASEPRI, r2
   17cd4:	f3bf 8f6f 	isb	sy
}
   17cd8:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   17cda:	6001      	str	r1, [r0, #0]
	int err = 0;
   17cdc:	2000      	movs	r0, #0
   17cde:	e7f7      	b.n	17cd0 <set_starting_state+0x26>
		err = -EALREADY;
   17ce0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17ce4:	e7f4      	b.n	17cd0 <set_starting_state+0x26>

00017ce6 <set_on_state>:
	__asm__ volatile(
   17ce6:	f04f 0340 	mov.w	r3, #64	; 0x40
   17cea:	f3ef 8211 	mrs	r2, BASEPRI
   17cee:	f383 8812 	msr	BASEPRI_MAX, r3
   17cf2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   17cf6:	6803      	ldr	r3, [r0, #0]
   17cf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17cfc:	f043 0302 	orr.w	r3, r3, #2
   17d00:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   17d02:	f382 8811 	msr	BASEPRI, r2
   17d06:	f3bf 8f6f 	isb	sy
}
   17d0a:	4770      	bx	lr

00017d0c <clkstarted_handle>:
{
   17d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d0e:	4606      	mov	r6, r0
   17d10:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   17d12:	f7ff ff96 	bl	17c42 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   17d16:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   17d18:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   17d1a:	2300      	movs	r3, #0
   17d1c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   17d20:	f7ff ffe1 	bl	17ce6 <set_on_state>
	if (callback) {
   17d24:	b11d      	cbz	r5, 17d2e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   17d26:	463a      	mov	r2, r7
   17d28:	4621      	mov	r1, r4
   17d2a:	4630      	mov	r0, r6
   17d2c:	47a8      	blx	r5
}
   17d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017d30 <stop>:
{
   17d30:	b570      	push	{r4, r5, r6, lr}
   17d32:	4606      	mov	r6, r0
   17d34:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   17d36:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   17d38:	4621      	mov	r1, r4
   17d3a:	f7ff ff82 	bl	17c42 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   17d3e:	4629      	mov	r1, r5
   17d40:	3008      	adds	r0, #8
   17d42:	f7ff ff99 	bl	17c78 <set_off_state>
	if (err < 0) {
   17d46:	2800      	cmp	r0, #0
   17d48:	db06      	blt.n	17d58 <stop+0x28>
	get_sub_config(dev, type)->stop();
   17d4a:	4621      	mov	r1, r4
   17d4c:	4630      	mov	r0, r6
   17d4e:	f7ff ff7f 	bl	17c50 <get_sub_config>
   17d52:	6843      	ldr	r3, [r0, #4]
   17d54:	4798      	blx	r3
	return 0;
   17d56:	2000      	movs	r0, #0
}
   17d58:	bd70      	pop	{r4, r5, r6, pc}

00017d5a <api_stop>:
{
   17d5a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   17d5c:	2280      	movs	r2, #128	; 0x80
   17d5e:	f7ff ffe7 	bl	17d30 <stop>
}
   17d62:	bd08      	pop	{r3, pc}

00017d64 <async_start>:
{
   17d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d68:	4606      	mov	r6, r0
   17d6a:	4690      	mov	r8, r2
   17d6c:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   17d6e:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   17d70:	4629      	mov	r1, r5
   17d72:	f7ff ff66 	bl	17c42 <get_sub_data>
   17d76:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   17d78:	9906      	ldr	r1, [sp, #24]
   17d7a:	3008      	adds	r0, #8
   17d7c:	f7ff ff95 	bl	17caa <set_starting_state>
	if (err < 0) {
   17d80:	2800      	cmp	r0, #0
   17d82:	db09      	blt.n	17d98 <async_start+0x34>
	subdata->cb = cb;
   17d84:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   17d88:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   17d8a:	4629      	mov	r1, r5
   17d8c:	4630      	mov	r0, r6
   17d8e:	f7ff ff5f 	bl	17c50 <get_sub_config>
   17d92:	6803      	ldr	r3, [r0, #0]
   17d94:	4798      	blx	r3
	return 0;
   17d96:	2000      	movs	r0, #0
}
   17d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017d9c <api_start>:
{
   17d9c:	b510      	push	{r4, lr}
   17d9e:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   17da0:	2480      	movs	r4, #128	; 0x80
   17da2:	9400      	str	r4, [sp, #0]
   17da4:	f7ff ffde 	bl	17d64 <async_start>
}
   17da8:	b002      	add	sp, #8
   17daa:	bd10      	pop	{r4, pc}

00017dac <onoff_started_callback>:
{
   17dac:	b510      	push	{r4, lr}
   17dae:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   17db0:	b2c9      	uxtb	r1, r1
   17db2:	f7ff ff53 	bl	17c5c <get_onoff_manager>
	notify(mgr, 0);
   17db6:	2100      	movs	r1, #0
   17db8:	47a0      	blx	r4
}
   17dba:	bd10      	pop	{r4, pc}

00017dbc <hfclk_start>:
{
   17dbc:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17dbe:	2001      	movs	r0, #1
   17dc0:	f7fb fabe 	bl	13340 <nrfx_clock_start>
}
   17dc4:	bd08      	pop	{r3, pc}

00017dc6 <hfclk_stop>:
{
   17dc6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17dc8:	2001      	movs	r0, #1
   17dca:	f000 fe44 	bl	18a56 <nrfx_clock_stop>
}
   17dce:	bd08      	pop	{r3, pc}

00017dd0 <lfclk_stop>:
{
   17dd0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   17dd2:	2000      	movs	r0, #0
   17dd4:	f000 fe3f 	bl	18a56 <nrfx_clock_stop>
}
   17dd8:	bd08      	pop	{r3, pc}

00017dda <k_msleep>:
{
   17dda:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   17ddc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   17de0:	17c1      	asrs	r1, r0, #31
   17de2:	03c9      	lsls	r1, r1, #15
   17de4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17de8:	03c0      	lsls	r0, r0, #15
   17dea:	f240 33e7 	movw	r3, #999	; 0x3e7
   17dee:	18c0      	adds	r0, r0, r3
   17df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17df4:	f04f 0300 	mov.w	r3, #0
   17df8:	f141 0100 	adc.w	r1, r1, #0
   17dfc:	f7e8 f96e 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   17e00:	f7fd fc40 	bl	15684 <z_impl_k_sleep>
}
   17e04:	bd08      	pop	{r3, pc}

00017e06 <blocking_start_callback>:
{
   17e06:	b508      	push	{r3, lr}
   17e08:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   17e0a:	f7fc ff63 	bl	14cd4 <z_impl_k_sem_give>
}
   17e0e:	bd08      	pop	{r3, pc}

00017e10 <lfclk_start>:
{
   17e10:	b508      	push	{r3, lr}
		anomaly_132_workaround();
   17e12:	f7f9 fa9b 	bl	1134c <anomaly_132_workaround>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   17e16:	2000      	movs	r0, #0
   17e18:	f7fb fa92 	bl	13340 <nrfx_clock_start>
}
   17e1c:	bd08      	pop	{r3, pc}

00017e1e <rng_pool_put>:
	uint8_t first = rngp->first_read;
   17e1e:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   17e20:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   17e22:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   17e26:	1a9a      	subs	r2, r3, r2
   17e28:	ea3c 0202 	bics.w	r2, ip, r2
   17e2c:	d007      	beq.n	17e3e <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   17e2e:	18c2      	adds	r2, r0, r3
   17e30:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   17e32:	3301      	adds	r3, #1
   17e34:	ea03 030c 	and.w	r3, r3, ip
   17e38:	7083      	strb	r3, [r0, #2]
	return 0;
   17e3a:	2000      	movs	r0, #0
   17e3c:	4770      	bx	lr
		return -ENOBUFS;
   17e3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17e42:	4770      	bx	lr

00017e44 <rng_pool_init>:
	rngp->first_alloc = 0U;
   17e44:	2300      	movs	r3, #0
   17e46:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   17e48:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   17e4a:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   17e4c:	3901      	subs	r1, #1
   17e4e:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   17e50:	7102      	strb	r2, [r0, #4]
}
   17e52:	4770      	bx	lr

00017e54 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   17e54:	2000      	movs	r0, #0
   17e56:	4770      	bx	lr

00017e58 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   17e58:	b538      	push	{r3, r4, r5, lr}
   17e5a:	460c      	mov	r4, r1
   17e5c:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   17e5e:	f7f8 fae7 	bl	10430 <bt_is_ready>
   17e62:	b120      	cbz	r0, 17e6e <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   17e64:	4629      	mov	r1, r5
   17e66:	4620      	mov	r0, r4
   17e68:	f7f7 ff16 	bl	fc98 <bt_hci_le_rand>
}
   17e6c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   17e6e:	f06f 000a 	mvn.w	r0, #10
   17e72:	e7fb      	b.n	17e6c <entropy_bt_get_entropy+0x14>

00017e74 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   17e74:	460b      	mov	r3, r1
   17e76:	b139      	cbz	r1, 17e88 <sys_slist_remove+0x14>
	return node->next;
   17e78:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   17e7a:	6019      	str	r1, [r3, #0]
	return list->tail;
   17e7c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   17e7e:	428a      	cmp	r2, r1
   17e80:	d009      	beq.n	17e96 <sys_slist_remove+0x22>
	parent->next = child;
   17e82:	2300      	movs	r3, #0
   17e84:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17e86:	4770      	bx	lr
	return node->next;
   17e88:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   17e8a:	6003      	str	r3, [r0, #0]
	return list->tail;
   17e8c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   17e8e:	428a      	cmp	r2, r1
   17e90:	d1f7      	bne.n	17e82 <sys_slist_remove+0xe>
	list->tail = node;
   17e92:	6043      	str	r3, [r0, #4]
}
   17e94:	e7f5      	b.n	17e82 <sys_slist_remove+0xe>
	list->tail = node;
   17e96:	6043      	str	r3, [r0, #4]
}
   17e98:	e7f3      	b.n	17e82 <sys_slist_remove+0xe>

00017e9a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17e9a:	b508      	push	{r3, lr}
   17e9c:	460a      	mov	r2, r1
	return list->head;
   17e9e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17ea0:	2100      	movs	r1, #0
   17ea2:	e001      	b.n	17ea8 <sys_slist_find_and_remove+0xe>
   17ea4:	4619      	mov	r1, r3
   17ea6:	681b      	ldr	r3, [r3, #0]
   17ea8:	b12b      	cbz	r3, 17eb6 <sys_slist_find_and_remove+0x1c>
   17eaa:	4293      	cmp	r3, r2
   17eac:	d1fa      	bne.n	17ea4 <sys_slist_find_and_remove+0xa>
   17eae:	f7ff ffe1 	bl	17e74 <sys_slist_remove>
   17eb2:	2001      	movs	r0, #1
   17eb4:	e000      	b.n	17eb8 <sys_slist_find_and_remove+0x1e>
   17eb6:	2000      	movs	r0, #0
   17eb8:	bd08      	pop	{r3, pc}

00017eba <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   17eba:	b570      	push	{r4, r5, r6, lr}
   17ebc:	4604      	mov	r4, r0
   17ebe:	460d      	mov	r5, r1
   17ec0:	4616      	mov	r6, r2
	return list->head;
   17ec2:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   17ec4:	b133      	cbz	r3, 17ed4 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   17ec6:	f7ff ffe8 	bl	17e9a <sys_slist_find_and_remove>
   17eca:	b970      	cbnz	r0, 17eea <gpio_manage_callback+0x30>
			if (!set) {
   17ecc:	b91e      	cbnz	r6, 17ed6 <gpio_manage_callback+0x1c>
				return -EINVAL;
   17ece:	f06f 0015 	mvn.w	r0, #21
   17ed2:	e006      	b.n	17ee2 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   17ed4:	b132      	cbz	r2, 17ee4 <gpio_manage_callback+0x2a>
   17ed6:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   17ed8:	602b      	str	r3, [r5, #0]
	list->head = node;
   17eda:	6025      	str	r5, [r4, #0]
	return list->tail;
   17edc:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   17ede:	b143      	cbz	r3, 17ef2 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   17ee0:	2000      	movs	r0, #0
}
   17ee2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   17ee4:	f06f 0015 	mvn.w	r0, #21
   17ee8:	e7fb      	b.n	17ee2 <gpio_manage_callback+0x28>
	if (set) {
   17eea:	2e00      	cmp	r6, #0
   17eec:	d1f3      	bne.n	17ed6 <gpio_manage_callback+0x1c>
	return 0;
   17eee:	2000      	movs	r0, #0
   17ef0:	e7f7      	b.n	17ee2 <gpio_manage_callback+0x28>
	list->tail = node;
   17ef2:	6065      	str	r5, [r4, #4]
   17ef4:	2000      	movs	r0, #0
}
   17ef6:	e7f4      	b.n	17ee2 <gpio_manage_callback+0x28>

00017ef8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   17ef8:	b570      	push	{r4, r5, r6, lr}
   17efa:	460e      	mov	r6, r1
   17efc:	4615      	mov	r5, r2
	return list->head;
   17efe:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17f00:	b121      	cbz	r1, 17f0c <gpio_fire_callbacks+0x14>
	return node->next;
   17f02:	680c      	ldr	r4, [r1, #0]
   17f04:	b13c      	cbz	r4, 17f16 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f06:	b931      	cbnz	r1, 17f16 <gpio_fire_callbacks+0x1e>
   17f08:	460c      	mov	r4, r1
   17f0a:	e004      	b.n	17f16 <gpio_fire_callbacks+0x1e>
   17f0c:	460c      	mov	r4, r1
   17f0e:	e002      	b.n	17f16 <gpio_fire_callbacks+0x1e>
   17f10:	4623      	mov	r3, r4
   17f12:	4621      	mov	r1, r4
   17f14:	461c      	mov	r4, r3
   17f16:	b171      	cbz	r1, 17f36 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   17f18:	688a      	ldr	r2, [r1, #8]
   17f1a:	402a      	ands	r2, r5
   17f1c:	d002      	beq.n	17f24 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17f1e:	684b      	ldr	r3, [r1, #4]
   17f20:	4630      	mov	r0, r6
   17f22:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17f24:	2c00      	cmp	r4, #0
   17f26:	d0f3      	beq.n	17f10 <gpio_fire_callbacks+0x18>
	return node->next;
   17f28:	6823      	ldr	r3, [r4, #0]
   17f2a:	2b00      	cmp	r3, #0
   17f2c:	d0f1      	beq.n	17f12 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f2e:	2c00      	cmp	r4, #0
   17f30:	d1ef      	bne.n	17f12 <gpio_fire_callbacks+0x1a>
   17f32:	4623      	mov	r3, r4
   17f34:	e7ed      	b.n	17f12 <gpio_fire_callbacks+0x1a>
		}
	}
}
   17f36:	bd70      	pop	{r4, r5, r6, pc}

00017f38 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17f38:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   17f3c:	0580      	lsls	r0, r0, #22
   17f3e:	0d80      	lsrs	r0, r0, #22
   17f40:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   17f44:	d033      	beq.n	17fae <get_drive+0x76>
   17f46:	d816      	bhi.n	17f76 <get_drive+0x3e>
   17f48:	2806      	cmp	r0, #6
   17f4a:	d02c      	beq.n	17fa6 <get_drive+0x6e>
   17f4c:	d906      	bls.n	17f5c <get_drive+0x24>
   17f4e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   17f52:	d10d      	bne.n	17f70 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   17f54:	2301      	movs	r3, #1
   17f56:	700b      	strb	r3, [r1, #0]
	return 0;
   17f58:	2000      	movs	r0, #0
		break;
   17f5a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17f5c:	b300      	cbz	r0, 17fa0 <get_drive+0x68>
   17f5e:	2802      	cmp	r0, #2
   17f60:	d103      	bne.n	17f6a <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   17f62:	2304      	movs	r3, #4
   17f64:	700b      	strb	r3, [r1, #0]
	return 0;
   17f66:	2000      	movs	r0, #0
		break;
   17f68:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17f6a:	f06f 0015 	mvn.w	r0, #21
   17f6e:	4770      	bx	lr
   17f70:	f06f 0015 	mvn.w	r0, #21
   17f74:	4770      	bx	lr
   17f76:	f240 2302 	movw	r3, #514	; 0x202
   17f7a:	4298      	cmp	r0, r3
   17f7c:	d01b      	beq.n	17fb6 <get_drive+0x7e>
   17f7e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   17f82:	d103      	bne.n	17f8c <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   17f84:	2303      	movs	r3, #3
   17f86:	700b      	strb	r3, [r1, #0]
	return 0;
   17f88:	2000      	movs	r0, #0
		break;
   17f8a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17f8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   17f90:	d103      	bne.n	17f9a <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   17f92:	2302      	movs	r3, #2
   17f94:	700b      	strb	r3, [r1, #0]
	return 0;
   17f96:	2000      	movs	r0, #0
		break;
   17f98:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17f9a:	f06f 0015 	mvn.w	r0, #21
   17f9e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   17fa0:	2000      	movs	r0, #0
   17fa2:	7008      	strb	r0, [r1, #0]
		break;
   17fa4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   17fa6:	2306      	movs	r3, #6
   17fa8:	700b      	strb	r3, [r1, #0]
	return 0;
   17faa:	2000      	movs	r0, #0
		break;
   17fac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   17fae:	2307      	movs	r3, #7
   17fb0:	700b      	strb	r3, [r1, #0]
	return 0;
   17fb2:	2000      	movs	r0, #0
		break;
   17fb4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   17fb6:	2305      	movs	r3, #5
   17fb8:	700b      	strb	r3, [r1, #0]
	return 0;
   17fba:	2000      	movs	r0, #0
}
   17fbc:	4770      	bx	lr

00017fbe <get_pull>:
	if (flags & GPIO_PULL_UP) {
   17fbe:	f010 0f10 	tst.w	r0, #16
   17fc2:	d104      	bne.n	17fce <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   17fc4:	f010 0f20 	tst.w	r0, #32
   17fc8:	d103      	bne.n	17fd2 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   17fca:	2000      	movs	r0, #0
   17fcc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   17fce:	2003      	movs	r0, #3
   17fd0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   17fd2:	2001      	movs	r0, #1
}
   17fd4:	4770      	bx	lr

00017fd6 <gpio_nrfx_port_get_raw>:
	return port->config;
   17fd6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17fd8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   17fda:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   17fde:	600b      	str	r3, [r1, #0]
}
   17fe0:	2000      	movs	r0, #0
   17fe2:	4770      	bx	lr

00017fe4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   17fe4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17fe6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   17fe8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   17fec:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   17ff0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   17ff4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   17ff8:	2000      	movs	r0, #0
   17ffa:	4770      	bx	lr

00017ffc <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   17ffc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17ffe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   18000:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   18004:	2000      	movs	r0, #0
   18006:	4770      	bx	lr

00018008 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   18008:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1800a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1800c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   18010:	2000      	movs	r0, #0
   18012:	4770      	bx	lr

00018014 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   18014:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18016:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   18018:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1801c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   18020:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   18022:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   18026:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1802a:	2000      	movs	r0, #0
   1802c:	4770      	bx	lr

0001802e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1802e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   18032:	d007      	beq.n	18044 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18034:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   18038:	d00d      	beq.n	18056 <get_trigger+0x28>
   1803a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1803e:	d008      	beq.n	18052 <get_trigger+0x24>
   18040:	2001      	movs	r0, #1
}
   18042:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   18044:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   18048:	d001      	beq.n	1804e <get_trigger+0x20>
   1804a:	2005      	movs	r0, #5
   1804c:	4770      	bx	lr
   1804e:	2004      	movs	r0, #4
   18050:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18052:	2002      	movs	r0, #2
   18054:	4770      	bx	lr
   18056:	2003      	movs	r0, #3
   18058:	4770      	bx	lr

0001805a <gpio_nrfx_manage_callback>:
{
   1805a:	b508      	push	{r3, lr}
	return port->data;
   1805c:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1805e:	3004      	adds	r0, #4
   18060:	f7ff ff2b 	bl	17eba <gpio_manage_callback>
}
   18064:	bd08      	pop	{r3, pc}

00018066 <nrfx_gpio_handler>:
{
   18066:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   18068:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1806c:	0940      	lsrs	r0, r0, #5
   1806e:	f7f9 fb53 	bl	11718 <get_dev>
	if (port == NULL) {
   18072:	b130      	cbz	r0, 18082 <nrfx_gpio_handler+0x1c>
   18074:	4601      	mov	r1, r0
	return port->data;
   18076:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   18078:	2201      	movs	r2, #1
   1807a:	40a2      	lsls	r2, r4
   1807c:	3004      	adds	r0, #4
   1807e:	f7ff ff3b 	bl	17ef8 <gpio_fire_callbacks>
}
   18082:	bd10      	pop	{r4, pc}

00018084 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   18084:	b510      	push	{r4, lr}
   18086:	b082      	sub	sp, #8
   18088:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1808a:	aa01      	add	r2, sp, #4
   1808c:	f000 f81c 	bl	180c8 <pinctrl_lookup_state>
	if (ret < 0) {
   18090:	2800      	cmp	r0, #0
   18092:	db05      	blt.n	180a0 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   18094:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   18096:	6822      	ldr	r2, [r4, #0]
   18098:	7919      	ldrb	r1, [r3, #4]
   1809a:	6818      	ldr	r0, [r3, #0]
   1809c:	f7f9 fe7a 	bl	11d94 <pinctrl_configure_pins>
}
   180a0:	b002      	add	sp, #8
   180a2:	bd10      	pop	{r4, pc}

000180a4 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   180a4:	b510      	push	{r4, lr}
   180a6:	4604      	mov	r4, r0
   180a8:	2200      	movs	r2, #0
   180aa:	2101      	movs	r1, #1
   180ac:	2003      	movs	r0, #3
   180ae:	f7ff f9ed 	bl	1748c <z_arm_irq_priority_set>
   180b2:	6863      	ldr	r3, [r4, #4]
   180b4:	2100      	movs	r1, #0
   180b6:	6998      	ldr	r0, [r3, #24]
   180b8:	f7ff ffe4 	bl	18084 <pinctrl_apply_state>
   180bc:	2800      	cmp	r0, #0
   180be:	db02      	blt.n	180c6 <twi_0_init+0x22>
   180c0:	4620      	mov	r0, r4
   180c2:	f7f9 fdf1 	bl	11ca8 <init_twi>
   180c6:	bd10      	pop	{r4, pc}

000180c8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   180c8:	b500      	push	{lr}
	*state = &config->states[0];
   180ca:	6843      	ldr	r3, [r0, #4]
   180cc:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   180ce:	e001      	b.n	180d4 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   180d0:	3308      	adds	r3, #8
   180d2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   180d4:	6813      	ldr	r3, [r2, #0]
   180d6:	f890 c008 	ldrb.w	ip, [r0, #8]
   180da:	f8d0 e004 	ldr.w	lr, [r0, #4]
   180de:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   180e2:	4563      	cmp	r3, ip
   180e4:	d205      	bcs.n	180f2 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   180e6:	f893 c005 	ldrb.w	ip, [r3, #5]
   180ea:	458c      	cmp	ip, r1
   180ec:	d1f0      	bne.n	180d0 <pinctrl_lookup_state+0x8>
			return 0;
   180ee:	2000      	movs	r0, #0
   180f0:	e001      	b.n	180f6 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   180f2:	f06f 0001 	mvn.w	r0, #1
}
   180f6:	f85d fb04 	ldr.w	pc, [sp], #4

000180fa <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   180fa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   180fc:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   180fe:	f04f 0140 	mov.w	r1, #64	; 0x40
   18102:	f3ef 8311 	mrs	r3, BASEPRI
   18106:	f381 8812 	msr	BASEPRI_MAX, r1
   1810a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1810e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   18112:	b131      	cbz	r1, 18122 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18114:	2100      	movs	r1, #0
   18116:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   1811a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1811e:	2101      	movs	r1, #1
   18120:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   18122:	f383 8811 	msr	BASEPRI, r3
   18126:	f3bf 8f6f 	isb	sy
}
   1812a:	4770      	bx	lr

0001812c <uarte_nrfx_isr_int>:
{
   1812c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1812e:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   18130:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   18132:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   18136:	f413 7f80 	tst.w	r3, #256	; 0x100
   1813a:	d002      	beq.n	18142 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1813c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18140:	b9d3      	cbnz	r3, 18178 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18142:	686b      	ldr	r3, [r5, #4]
   18144:	f013 0f10 	tst.w	r3, #16
   18148:	d015      	beq.n	18176 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   1814a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1814e:	f3ef 8311 	mrs	r3, BASEPRI
   18152:	f382 8812 	msr	BASEPRI_MAX, r2
   18156:	f3bf 8f6f 	isb	sy
   1815a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1815e:	b112      	cbz	r2, 18166 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18160:	2200      	movs	r2, #0
   18162:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   18166:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1816a:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   1816e:	f383 8811 	msr	BASEPRI, r3
   18172:	f3bf 8f6f 	isb	sy
}
   18176:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   18178:	f7ff ffbf 	bl	180fa <endtx_isr>
   1817c:	e7e1      	b.n	18142 <uarte_nrfx_isr_int+0x16>

0001817e <uarte_nrfx_configure>:
{
   1817e:	b570      	push	{r4, r5, r6, lr}
   18180:	b082      	sub	sp, #8
	struct uarte_nrfx_data *data = dev->data;
   18182:	6905      	ldr	r5, [r0, #16]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   18184:	794b      	ldrb	r3, [r1, #5]
   18186:	2b01      	cmp	r3, #1
   18188:	d137      	bne.n	181fa <uarte_nrfx_configure+0x7c>
   1818a:	4606      	mov	r6, r0
   1818c:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1818e:	798b      	ldrb	r3, [r1, #6]
   18190:	2b03      	cmp	r3, #3
   18192:	d135      	bne.n	18200 <uarte_nrfx_configure+0x82>
	switch (cfg->flow_ctrl) {
   18194:	79cb      	ldrb	r3, [r1, #7]
   18196:	b133      	cbz	r3, 181a6 <uarte_nrfx_configure+0x28>
   18198:	2b01      	cmp	r3, #1
   1819a:	d00e      	beq.n	181ba <uarte_nrfx_configure+0x3c>
   1819c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   181a0:	4618      	mov	r0, r3
   181a2:	b002      	add	sp, #8
   181a4:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   181a6:	2300      	movs	r3, #0
   181a8:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   181ac:	7923      	ldrb	r3, [r4, #4]
   181ae:	b143      	cbz	r3, 181c2 <uarte_nrfx_configure+0x44>
   181b0:	2b02      	cmp	r3, #2
   181b2:	d01e      	beq.n	181f2 <uarte_nrfx_configure+0x74>
   181b4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   181b8:	e7f2      	b.n	181a0 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   181ba:	2301      	movs	r3, #1
   181bc:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   181c0:	e7f4      	b.n	181ac <uarte_nrfx_configure+0x2e>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   181c2:	2300      	movs	r3, #0
   181c4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   181c8:	6821      	ldr	r1, [r4, #0]
   181ca:	4630      	mov	r0, r6
   181cc:	f7f9 feea 	bl	11fa4 <baudrate_set>
   181d0:	4603      	mov	r3, r0
   181d2:	b9c0      	cbnz	r0, 18206 <uarte_nrfx_configure+0x88>
	const struct uarte_nrfx_config *config = dev->config;
   181d4:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   181d6:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   181d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
   181dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   181e0:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   181e2:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   181e6:	3504      	adds	r5, #4
   181e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   181ec:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   181f0:	e7d6      	b.n	181a0 <uarte_nrfx_configure+0x22>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   181f2:	230e      	movs	r3, #14
   181f4:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   181f8:	e7e6      	b.n	181c8 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
   181fa:	f06f 0385 	mvn.w	r3, #133	; 0x85
   181fe:	e7cf      	b.n	181a0 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   18200:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18204:	e7cc      	b.n	181a0 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   18206:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1820a:	e7c9      	b.n	181a0 <uarte_nrfx_configure+0x22>

0001820c <uarte_nrfx_config_get>:
{
   1820c:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1820e:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   18210:	3304      	adds	r3, #4
   18212:	e893 0003 	ldmia.w	r3, {r0, r1}
   18216:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1821a:	2000      	movs	r0, #0
   1821c:	4770      	bx	lr

0001821e <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1821e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18220:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18222:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   18226:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1822a:	4770      	bx	lr

0001822c <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1822c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1822e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   18230:	685b      	ldr	r3, [r3, #4]
   18232:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18236:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1823a:	b929      	cbnz	r1, 18248 <is_tx_ready+0x1c>
   1823c:	b933      	cbnz	r3, 1824c <is_tx_ready+0x20>
   1823e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   18242:	b92b      	cbnz	r3, 18250 <is_tx_ready+0x24>
   18244:	2000      	movs	r0, #0
   18246:	4770      	bx	lr
   18248:	2001      	movs	r0, #1
   1824a:	4770      	bx	lr
   1824c:	2000      	movs	r0, #0
   1824e:	4770      	bx	lr
   18250:	2001      	movs	r0, #1
}
   18252:	4770      	bx	lr

00018254 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   18254:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18256:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18258:	2208      	movs	r2, #8
   1825a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1825e:	4770      	bx	lr

00018260 <tx_start>:
{
   18260:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   18262:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18264:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18266:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1826a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1826e:	2200      	movs	r2, #0
   18270:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   18274:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   18278:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1827c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18280:	685b      	ldr	r3, [r3, #4]
   18282:	f013 0f10 	tst.w	r3, #16
   18286:	d102      	bne.n	1828e <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18288:	2301      	movs	r3, #1
   1828a:	60a3      	str	r3, [r4, #8]
}
   1828c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1828e:	2101      	movs	r1, #1
   18290:	f7ff ffe0 	bl	18254 <uarte_enable>
    p_reg->INTENSET = mask;
   18294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18298:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1829c:	e7f4      	b.n	18288 <tx_start+0x28>

0001829e <uarte_nrfx_poll_in>:
{
   1829e:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   182a0:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   182a2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   182a4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   182a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   182aa:	b15a      	cbz	r2, 182c4 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   182ac:	6962      	ldr	r2, [r4, #20]
   182ae:	7812      	ldrb	r2, [r2, #0]
   182b0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182b2:	2000      	movs	r0, #0
   182b4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   182b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   182bc:	2201      	movs	r2, #1
   182be:	601a      	str	r2, [r3, #0]
}
   182c0:	bc10      	pop	{r4}
   182c2:	4770      	bx	lr
		return -1;
   182c4:	f04f 30ff 	mov.w	r0, #4294967295
   182c8:	e7fa      	b.n	182c0 <uarte_nrfx_poll_in+0x22>

000182ca <k_msleep>:
{
   182ca:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   182cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   182d0:	17c1      	asrs	r1, r0, #31
   182d2:	03c9      	lsls	r1, r1, #15
   182d4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   182d8:	03c0      	lsls	r0, r0, #15
   182da:	f240 33e7 	movw	r3, #999	; 0x3e7
   182de:	18c0      	adds	r0, r0, r3
   182e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   182e4:	f04f 0300 	mov.w	r3, #0
   182e8:	f141 0100 	adc.w	r1, r1, #0
   182ec:	f7e7 fef6 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   182f0:	f7fd f9c8 	bl	15684 <z_impl_k_sleep>
}
   182f4:	bd08      	pop	{r3, pc}

000182f6 <wait_tx_ready>:
{
   182f6:	b570      	push	{r4, r5, r6, lr}
   182f8:	4606      	mov	r6, r0
   182fa:	e013      	b.n	18324 <wait_tx_ready+0x2e>
		if (res) {
   182fc:	b17d      	cbz	r5, 1831e <wait_tx_ready+0x28>
	__asm__ volatile(
   182fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   18302:	f3ef 8411 	mrs	r4, BASEPRI
   18306:	f383 8812 	msr	BASEPRI_MAX, r3
   1830a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1830e:	4630      	mov	r0, r6
   18310:	f7ff ff8c 	bl	1822c <is_tx_ready>
   18314:	b998      	cbnz	r0, 1833e <wait_tx_ready+0x48>
	__asm__ volatile(
   18316:	f384 8811 	msr	BASEPRI, r4
   1831a:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   1831e:	2001      	movs	r0, #1
   18320:	f7ff ffd3 	bl	182ca <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   18324:	2464      	movs	r4, #100	; 0x64
   18326:	4630      	mov	r0, r6
   18328:	f7ff ff80 	bl	1822c <is_tx_ready>
   1832c:	4605      	mov	r5, r0
   1832e:	2800      	cmp	r0, #0
   18330:	d1e4      	bne.n	182fc <wait_tx_ready+0x6>
   18332:	2001      	movs	r0, #1
   18334:	f000 fca7 	bl	18c86 <nrfx_busy_wait>
   18338:	3c01      	subs	r4, #1
   1833a:	d1f4      	bne.n	18326 <wait_tx_ready+0x30>
   1833c:	e7de      	b.n	182fc <wait_tx_ready+0x6>
}
   1833e:	4620      	mov	r0, r4
   18340:	bd70      	pop	{r4, r5, r6, pc}

00018342 <pinctrl_apply_state>:
{
   18342:	b510      	push	{r4, lr}
   18344:	b082      	sub	sp, #8
   18346:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   18348:	aa01      	add	r2, sp, #4
   1834a:	f7ff febd 	bl	180c8 <pinctrl_lookup_state>
	if (ret < 0) {
   1834e:	2800      	cmp	r0, #0
   18350:	db05      	blt.n	1835e <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   18352:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   18354:	6822      	ldr	r2, [r4, #0]
   18356:	7919      	ldrb	r1, [r3, #4]
   18358:	6818      	ldr	r0, [r3, #0]
   1835a:	f7f9 fd1b 	bl	11d94 <pinctrl_configure_pins>
}
   1835e:	b002      	add	sp, #8
   18360:	bd10      	pop	{r4, pc}

00018362 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   18362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18366:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   18368:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1836a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1836c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18370:	2100      	movs	r1, #0
   18372:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   18376:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1837a:	68f8      	ldr	r0, [r7, #12]
   1837c:	f7ff ffe1 	bl	18342 <pinctrl_apply_state>
	if (err < 0) {
   18380:	1e05      	subs	r5, r0, #0
   18382:	db35      	blt.n	183f0 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   18384:	f108 0104 	add.w	r1, r8, #4
   18388:	4620      	mov	r0, r4
   1838a:	f7ff fef8 	bl	1817e <uarte_nrfx_configure>
	if (err) {
   1838e:	4605      	mov	r5, r0
   18390:	bb70      	cbnz	r0, 183f0 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   18392:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   18394:	f013 0f02 	tst.w	r3, #2
   18398:	d12d      	bne.n	183f6 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1839a:	2308      	movs	r3, #8
   1839c:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   183a0:	7a3b      	ldrb	r3, [r7, #8]
   183a2:	b95b      	cbnz	r3, 183bc <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   183a4:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   183a8:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   183ac:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   183b0:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   183b4:	2301      	movs	r3, #1
   183b6:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183ba:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   183bc:	687b      	ldr	r3, [r7, #4]
   183be:	f013 0f02 	tst.w	r3, #2
   183c2:	d103      	bne.n	183cc <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   183c4:	f44f 7380 	mov.w	r3, #256	; 0x100
   183c8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   183cc:	687b      	ldr	r3, [r7, #4]
   183ce:	f013 0f10 	tst.w	r3, #16
   183d2:	d003      	beq.n	183dc <uarte_instance_init+0x7a>
   183d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   183d8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   183dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   183e0:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   183e4:	2300      	movs	r3, #0
   183e6:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183ea:	2301      	movs	r3, #1
   183ec:	60b3      	str	r3, [r6, #8]
   183ee:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   183f0:	4628      	mov	r0, r5
   183f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   183f6:	4641      	mov	r1, r8
   183f8:	4630      	mov	r0, r6
   183fa:	f7f9 fea9 	bl	12150 <endtx_stoptx_ppi_init>
		if (err < 0) {
   183fe:	2800      	cmp	r0, #0
   18400:	dacb      	bge.n	1839a <uarte_instance_init+0x38>
			return err;
   18402:	4605      	mov	r5, r0
   18404:	e7f4      	b.n	183f0 <uarte_instance_init+0x8e>

00018406 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18406:	b510      	push	{r4, lr}
   18408:	4604      	mov	r4, r0
   1840a:	2200      	movs	r2, #0
   1840c:	2101      	movs	r1, #1
   1840e:	2002      	movs	r0, #2
   18410:	f7ff f83c 	bl	1748c <z_arm_irq_priority_set>
   18414:	2002      	movs	r0, #2
   18416:	f7ff f82f 	bl	17478 <arch_irq_enable>
   1841a:	2100      	movs	r1, #0
   1841c:	4620      	mov	r0, r4
   1841e:	f7ff ffa0 	bl	18362 <uarte_instance_init>
   18422:	bd10      	pop	{r4, pc}

00018424 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   18424:	4770      	bx	lr

00018426 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   18426:	1a40      	subs	r0, r0, r1
}
   18428:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1842c:	4770      	bx	lr

0001842e <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1842e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   18432:	009b      	lsls	r3, r3, #2
   18434:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1843a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1843e:	6818      	ldr	r0, [r3, #0]
}
   18440:	3800      	subs	r0, #0
   18442:	bf18      	it	ne
   18444:	2001      	movne	r0, #1
   18446:	4770      	bx	lr

00018448 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18448:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1844c:	009b      	lsls	r3, r3, #2
   1844e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18454:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   18458:	2200      	movs	r2, #0
   1845a:	601a      	str	r2, [r3, #0]
   1845c:	681b      	ldr	r3, [r3, #0]
}
   1845e:	4770      	bx	lr

00018460 <absolute_time_to_cc>:
}
   18460:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18464:	4770      	bx	lr

00018466 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18466:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1846a:	b672      	cpsid	i
}
   1846c:	4770      	bx	lr

0001846e <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1846e:	f380 8810 	msr	PRIMASK, r0
}
   18472:	4770      	bx	lr

00018474 <compare_set>:
{
   18474:	b5f0      	push	{r4, r5, r6, r7, lr}
   18476:	b083      	sub	sp, #12
   18478:	4604      	mov	r4, r0
   1847a:	4617      	mov	r7, r2
   1847c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1847e:	f7f9 ff35 	bl	122ec <compare_int_lock>
   18482:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   18484:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18486:	9301      	str	r3, [sp, #4]
   18488:	9b08      	ldr	r3, [sp, #32]
   1848a:	9300      	str	r3, [sp, #0]
   1848c:	463a      	mov	r2, r7
   1848e:	462b      	mov	r3, r5
   18490:	4620      	mov	r0, r4
   18492:	f7f9 fff9 	bl	12488 <compare_set_nolocks>
   18496:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   18498:	4631      	mov	r1, r6
   1849a:	4620      	mov	r0, r4
   1849c:	f7f9 ff7c 	bl	12398 <compare_int_unlock>
}
   184a0:	4628      	mov	r0, r5
   184a2:	b003      	add	sp, #12
   184a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000184a6 <sys_clock_cycle_get_32>:
{
   184a6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   184a8:	f7f9 ffce 	bl	12448 <z_nrf_rtc_timer_read>
}
   184ac:	bd08      	pop	{r3, pc}

000184ae <event_packet_is_discardable>:
	switch (hdr->evt) {
   184ae:	7803      	ldrb	r3, [r0, #0]
   184b0:	2b3e      	cmp	r3, #62	; 0x3e
   184b2:	d003      	beq.n	184bc <event_packet_is_discardable+0xe>
   184b4:	2bff      	cmp	r3, #255	; 0xff
   184b6:	d008      	beq.n	184ca <event_packet_is_discardable+0x1c>
   184b8:	2000      	movs	r0, #0
   184ba:	4770      	bx	lr
		switch (me->subevent) {
   184bc:	7883      	ldrb	r3, [r0, #2]
   184be:	2b02      	cmp	r3, #2
   184c0:	d001      	beq.n	184c6 <event_packet_is_discardable+0x18>
			return false;
   184c2:	2000      	movs	r0, #0
   184c4:	4770      	bx	lr
			return true;
   184c6:	2001      	movs	r0, #1
   184c8:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   184ca:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   184cc:	2b80      	cmp	r3, #128	; 0x80
   184ce:	d001      	beq.n	184d4 <event_packet_is_discardable+0x26>
			return false;
   184d0:	2000      	movs	r0, #0
}
   184d2:	4770      	bx	lr
			return true;
   184d4:	2001      	movs	r0, #1
   184d6:	4770      	bx	lr

000184d8 <hci_driver_send>:
{
   184d8:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   184da:	8a03      	ldrh	r3, [r0, #16]
   184dc:	b163      	cbz	r3, 184f8 <hci_driver_send+0x20>
   184de:	4604      	mov	r4, r0
   184e0:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   184e2:	b963      	cbnz	r3, 184fe <hci_driver_send+0x26>
		err = cmd_handle(buf);
   184e4:	f7fa fb1c 	bl	12b20 <cmd_handle>
	if (!err) {
   184e8:	4605      	mov	r5, r0
   184ea:	b108      	cbz	r0, 184f0 <hci_driver_send+0x18>
}
   184ec:	4628      	mov	r0, r5
   184ee:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   184f0:	4620      	mov	r0, r4
   184f2:	f7ff fb2b 	bl	17b4c <net_buf_unref>
   184f6:	e7f9      	b.n	184ec <hci_driver_send+0x14>
		return -EINVAL;
   184f8:	f06f 0515 	mvn.w	r5, #21
   184fc:	e7f6      	b.n	184ec <hci_driver_send+0x14>
		return -EINVAL;
   184fe:	f06f 0515 	mvn.w	r5, #21
   18502:	e7f3      	b.n	184ec <hci_driver_send+0x14>

00018504 <hci_driver_close>:
{
   18504:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   18506:	f04f 30ff 	mov.w	r0, #4294967295
   1850a:	f04f 31ff 	mov.w	r1, #4294967295
   1850e:	f7fa f8f5 	bl	126fc <multithreading_lock_acquire>
	if (err) {
   18512:	4604      	mov	r4, r0
   18514:	b108      	cbz	r0, 1851a <hci_driver_close+0x16>
}
   18516:	4620      	mov	r0, r4
   18518:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   1851a:	f7e7 feb7 	bl	28c <sdc_disable>
	if (err) {
   1851e:	4604      	mov	r4, r0
   18520:	b910      	cbnz	r0, 18528 <hci_driver_close+0x24>
	MULTITHREADING_LOCK_RELEASE();
   18522:	f7fa f8f5 	bl	12710 <multithreading_lock_release>
	return err;
   18526:	e7f6      	b.n	18516 <hci_driver_close+0x12>
		MULTITHREADING_LOCK_RELEASE();
   18528:	f7fa f8f2 	bl	12710 <multithreading_lock_release>
		return err;
   1852c:	e7f3      	b.n	18516 <hci_driver_close+0x12>

0001852e <configure_supported_features>:
{
   1852e:	b508      	push	{r3, lr}
				err = sdc_support_scan();
   18530:	f7e7 ff64 	bl	3fc <sdc_support_scan>
				if (err) {
   18534:	b900      	cbnz	r0, 18538 <configure_supported_features+0xa>
}
   18536:	bd08      	pop	{r3, pc}
					return -ENOTSUP;
   18538:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1853c:	e7fb      	b.n	18536 <configure_supported_features+0x8>

0001853e <receive_work_handler>:
{
   1853e:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   18540:	f7fa fcfc 	bl	12f3c <hci_driver_receive_process>
}
   18544:	bd08      	pop	{r3, pc}

00018546 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   18546:	230f      	movs	r3, #15
   18548:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1854a:	2304      	movs	r3, #4
   1854c:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   1854e:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   18550:	2301      	movs	r3, #1
   18552:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   18554:	8081      	strh	r1, [r0, #4]
}
   18556:	4770      	bx	lr

00018558 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18558:	f04f 0c0e 	mov.w	ip, #14
   1855c:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   18560:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   18562:	2201      	movs	r2, #1
   18564:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   18566:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1856a:	7143      	strb	r3, [r0, #5]
}
   1856c:	4770      	bx	lr

0001856e <le_read_supported_states>:
	*buf = states1;
   1856e:	2330      	movs	r3, #48	; 0x30
   18570:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   18572:	2300      	movs	r3, #0
   18574:	7103      	strb	r3, [r0, #4]
}
   18576:	4770      	bx	lr

00018578 <status_param_cmd_put>:
}
   18578:	2001      	movs	r0, #1
   1857a:	4770      	bx	lr

0001857c <controller_and_baseband_cmd_put>:
{
   1857c:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   1857e:	7842      	ldrb	r2, [r0, #1]
   18580:	7803      	ldrb	r3, [r0, #0]
   18582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18586:	b21b      	sxth	r3, r3
	switch (opcode)	{
   18588:	f640 4201 	movw	r2, #3073	; 0xc01
   1858c:	4293      	cmp	r3, r2
   1858e:	d005      	beq.n	1859c <controller_and_baseband_cmd_put+0x20>
   18590:	f640 4203 	movw	r2, #3075	; 0xc03
   18594:	4293      	cmp	r3, r2
   18596:	d005      	beq.n	185a4 <controller_and_baseband_cmd_put+0x28>
   18598:	2001      	movs	r0, #1
}
   1859a:	bd08      	pop	{r3, pc}
   1859c:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1859e:	f7f0 fa20 	bl	89e2 <sdc_hci_cmd_cb_set_event_mask>
   185a2:	e7fa      	b.n	1859a <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   185a4:	f7e8 f876 	bl	694 <sdc_hci_cmd_cb_reset>
   185a8:	e7f7      	b.n	1859a <controller_and_baseband_cmd_put+0x1e>

000185aa <supported_commands>:
{
   185aa:	b510      	push	{r4, lr}
   185ac:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   185ae:	2230      	movs	r2, #48	; 0x30
   185b0:	2100      	movs	r1, #0
   185b2:	f7ff f859 	bl	17668 <memset>
	cmds->hci_set_event_mask = 1;
   185b6:	7963      	ldrb	r3, [r4, #5]
   185b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   185bc:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   185be:	b2db      	uxtb	r3, r3
   185c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   185c4:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   185c6:	7ba3      	ldrb	r3, [r4, #14]
   185c8:	f043 0308 	orr.w	r3, r3, #8
   185cc:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   185ce:	b2db      	uxtb	r3, r3
   185d0:	f043 0320 	orr.w	r3, r3, #32
   185d4:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   185d6:	7be3      	ldrb	r3, [r4, #15]
   185d8:	f043 0302 	orr.w	r3, r3, #2
   185dc:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   185de:	7e63      	ldrb	r3, [r4, #25]
   185e0:	f043 0301 	orr.w	r3, r3, #1
   185e4:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   185e6:	b2db      	uxtb	r3, r3
   185e8:	f043 0302 	orr.w	r3, r3, #2
   185ec:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   185ee:	b2db      	uxtb	r3, r3
   185f0:	f043 0304 	orr.w	r3, r3, #4
   185f4:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   185f6:	b2db      	uxtb	r3, r3
   185f8:	f043 0310 	orr.w	r3, r3, #16
   185fc:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   185fe:	7ea3      	ldrb	r3, [r4, #26]
   18600:	f043 0304 	orr.w	r3, r3, #4
   18604:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   18606:	b2db      	uxtb	r3, r3
   18608:	f043 0308 	orr.w	r3, r3, #8
   1860c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   1860e:	b2db      	uxtb	r3, r3
   18610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18614:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   18616:	b2db      	uxtb	r3, r3
   18618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1861c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1861e:	7ee3      	ldrb	r3, [r4, #27]
   18620:	f043 0301 	orr.w	r3, r3, #1
   18624:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   18626:	b2db      	uxtb	r3, r3
   18628:	f043 0302 	orr.w	r3, r3, #2
   1862c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   1862e:	b2db      	uxtb	r3, r3
   18630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18634:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   18636:	b2db      	uxtb	r3, r3
   18638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1863c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   1863e:	7f23      	ldrb	r3, [r4, #28]
   18640:	f043 0308 	orr.w	r3, r3, #8
   18644:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   18646:	b2db      	uxtb	r3, r3
   18648:	f043 0310 	orr.w	r3, r3, #16
   1864c:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   1864e:	b2db      	uxtb	r3, r3
   18650:	f043 0320 	orr.w	r3, r3, #32
   18654:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   18656:	b2db      	uxtb	r3, r3
   18658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1865c:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v2 = 1;
   1865e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   18662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18666:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   1866a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1866e:	f043 0301 	orr.w	r3, r3, #1
   18672:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   18676:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1867a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1867e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   18682:	bd10      	pop	{r4, pc}

00018684 <supported_features>:
{
   18684:	b510      	push	{r4, lr}
   18686:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   18688:	2208      	movs	r2, #8
   1868a:	2100      	movs	r1, #0
   1868c:	f7fe ffec 	bl	17668 <memset>
	features->bdedr_not_supported = 1;
   18690:	7923      	ldrb	r3, [r4, #4]
   18692:	f043 0320 	orr.w	r3, r3, #32
   18696:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   18698:	b2db      	uxtb	r3, r3
   1869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1869e:	7123      	strb	r3, [r4, #4]
}
   186a0:	bd10      	pop	{r4, pc}

000186a2 <info_param_cmd_put>:
{
   186a2:	b508      	push	{r3, lr}
   186a4:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   186a6:	1d88      	adds	r0, r1, #6
   186a8:	f893 c001 	ldrb.w	ip, [r3, #1]
   186ac:	781b      	ldrb	r3, [r3, #0]
   186ae:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   186b2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   186b4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   186b8:	3b01      	subs	r3, #1
   186ba:	2b08      	cmp	r3, #8
   186bc:	d820      	bhi.n	18700 <info_param_cmd_put+0x5e>
   186be:	e8df f003 	tbb	[pc, r3]
   186c2:	0b05      	.short	0x0b05
   186c4:	1f1f1f12 	.word	0x1f1f1f12
   186c8:	1f1f      	.short	0x1f1f
   186ca:	19          	.byte	0x19
   186cb:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   186cc:	7813      	ldrb	r3, [r2, #0]
   186ce:	3308      	adds	r3, #8
   186d0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   186d2:	f7f0 f9de 	bl	8a92 <sdc_hci_cmd_ip_read_local_version_information>
   186d6:	e014      	b.n	18702 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   186d8:	7813      	ldrb	r3, [r2, #0]
   186da:	3340      	adds	r3, #64	; 0x40
   186dc:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   186de:	f7ff ff64 	bl	185aa <supported_commands>
		return 0;
   186e2:	2000      	movs	r0, #0
   186e4:	e00d      	b.n	18702 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   186e6:	7813      	ldrb	r3, [r2, #0]
   186e8:	3308      	adds	r3, #8
   186ea:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   186ec:	f7ff ffca 	bl	18684 <supported_features>
		return 0;
   186f0:	2000      	movs	r0, #0
   186f2:	e006      	b.n	18702 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   186f4:	7813      	ldrb	r3, [r2, #0]
   186f6:	3306      	adds	r3, #6
   186f8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   186fa:	f7f0 f9c8 	bl	8a8e <sdc_hci_cmd_ip_read_bd_addr>
   186fe:	e000      	b.n	18702 <info_param_cmd_put+0x60>
	switch (opcode)	{
   18700:	2001      	movs	r0, #1
}
   18702:	bd08      	pop	{r3, pc}

00018704 <le_supported_features>:
{
   18704:	b510      	push	{r4, lr}
   18706:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   18708:	2208      	movs	r2, #8
   1870a:	2100      	movs	r1, #0
   1870c:	f7fe ffac 	bl	17668 <memset>
	features->params.le_encryption = 1;
   18710:	7823      	ldrb	r3, [r4, #0]
   18712:	f043 0301 	orr.w	r3, r3, #1
   18716:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   18718:	b2db      	uxtb	r3, r3
   1871a:	f043 0304 	orr.w	r3, r3, #4
   1871e:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   18720:	b2db      	uxtb	r3, r3
   18722:	f043 0308 	orr.w	r3, r3, #8
   18726:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   18728:	b2db      	uxtb	r3, r3
   1872a:	f043 0310 	orr.w	r3, r3, #16
   1872e:	7023      	strb	r3, [r4, #0]
	features->params.extended_scanner_filter_policies = 1;
   18730:	b2db      	uxtb	r3, r3
   18732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18736:	7023      	strb	r3, [r4, #0]
	features->params.channel_selection_algorithm_2 = 1;
   18738:	7863      	ldrb	r3, [r4, #1]
   1873a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1873e:	7063      	strb	r3, [r4, #1]
}
   18740:	bd10      	pop	{r4, pc}

00018742 <vs_zephyr_supported_commands>:
{
   18742:	b510      	push	{r4, lr}
   18744:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   18746:	2202      	movs	r2, #2
   18748:	2100      	movs	r1, #0
   1874a:	f7fe ff8d 	bl	17668 <memset>
	cmds->read_version_info = 1;
   1874e:	7823      	ldrb	r3, [r4, #0]
   18750:	f043 0301 	orr.w	r3, r3, #1
   18754:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   18756:	b2db      	uxtb	r3, r3
   18758:	f043 0302 	orr.w	r3, r3, #2
   1875c:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   1875e:	b2db      	uxtb	r3, r3
   18760:	f043 0320 	orr.w	r3, r3, #32
   18764:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   18766:	7863      	ldrb	r3, [r4, #1]
   18768:	f043 0301 	orr.w	r3, r3, #1
   1876c:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   1876e:	b2db      	uxtb	r3, r3
   18770:	f043 0302 	orr.w	r3, r3, #2
   18774:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   18776:	b2db      	uxtb	r3, r3
   18778:	f043 0304 	orr.w	r3, r3, #4
   1877c:	7063      	strb	r3, [r4, #1]
}
   1877e:	bd10      	pop	{r4, pc}

00018780 <vs_supported_commands>:
{
   18780:	b510      	push	{r4, lr}
   18782:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   18784:	2202      	movs	r2, #2
   18786:	2100      	movs	r1, #0
   18788:	f7fe ff6e 	bl	17668 <memset>
	cmds->read_supported_vs_commands = 1;
   1878c:	7823      	ldrb	r3, [r4, #0]
   1878e:	f043 0301 	orr.w	r3, r3, #1
   18792:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   18794:	b2db      	uxtb	r3, r3
   18796:	f043 0302 	orr.w	r3, r3, #2
   1879a:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   1879c:	b2db      	uxtb	r3, r3
   1879e:	f043 0304 	orr.w	r3, r3, #4
   187a2:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   187a4:	b2db      	uxtb	r3, r3
   187a6:	f043 0308 	orr.w	r3, r3, #8
   187aa:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   187ac:	b2db      	uxtb	r3, r3
   187ae:	f043 0310 	orr.w	r3, r3, #16
   187b2:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   187b4:	b2db      	uxtb	r3, r3
   187b6:	f043 0320 	orr.w	r3, r3, #32
   187ba:	7023      	strb	r3, [r4, #0]
}
   187bc:	bd10      	pop	{r4, pc}

000187be <le_controller_cmd_put>:
{
   187be:	b508      	push	{r3, lr}
   187c0:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   187c2:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   187c4:	3106      	adds	r1, #6
   187c6:	f893 c001 	ldrb.w	ip, [r3, #1]
   187ca:	781b      	ldrb	r3, [r3, #0]
   187cc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   187d0:	b21b      	sxth	r3, r3
	switch (opcode)	{
   187d2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   187d6:	3b01      	subs	r3, #1
   187d8:	2b4a      	cmp	r3, #74	; 0x4a
   187da:	d86e      	bhi.n	188ba <le_controller_cmd_put+0xfc>
   187dc:	e8df f003 	tbb	[pc, r3]
   187e0:	6d302926 	.word	0x6d302926
   187e4:	6d6d6d38 	.word	0x6d6d6d38
   187e8:	3e3b6d6d 	.word	0x3e3b6d6d
   187ec:	48416d6d 	.word	0x48416d6d
   187f0:	6d6d4e4b 	.word	0x6d6d4e4b
   187f4:	57516d6d 	.word	0x57516d6d
   187f8:	5e6d6d6d 	.word	0x5e6d6d6d
   187fc:	6d6d6d6d 	.word	0x6d6d6d6d
   18800:	6d6d6d6d 	.word	0x6d6d6d6d
   18804:	6d6d6d6d 	.word	0x6d6d6d6d
   18808:	6d6d6d6d 	.word	0x6d6d6d6d
   1880c:	6d6d6d6d 	.word	0x6d6d6d6d
   18810:	6d6d6d6d 	.word	0x6d6d6d6d
   18814:	6d6d6d6d 	.word	0x6d6d6d6d
   18818:	6d6d6d6d 	.word	0x6d6d6d6d
   1881c:	6d6d6d6d 	.word	0x6d6d6d6d
   18820:	6d6d6d6d 	.word	0x6d6d6d6d
   18824:	6d6d6d6d 	.word	0x6d6d6d6d
   18828:	6d6d      	.short	0x6d6d
   1882a:	66          	.byte	0x66
   1882b:	00          	.byte	0x00
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1882c:	f7f0 f943 	bl	8ab6 <sdc_hci_cmd_le_set_event_mask>
   18830:	e044      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   18832:	7813      	ldrb	r3, [r2, #0]
   18834:	3303      	adds	r3, #3
   18836:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   18838:	4608      	mov	r0, r1
   1883a:	f7f0 f934 	bl	8aa6 <sdc_hci_cmd_le_read_buffer_size>
   1883e:	e03d      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   18840:	7813      	ldrb	r3, [r2, #0]
   18842:	3308      	adds	r3, #8
   18844:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   18846:	4608      	mov	r0, r1
   18848:	f7ff ff5c 	bl	18704 <le_supported_features>
		return 0;
   1884c:	2000      	movs	r0, #0
   1884e:	e035      	b.n	188bc <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   18850:	f7f0 f936 	bl	8ac0 <sdc_hci_cmd_le_set_random_address>
   18854:	e032      	b.n	188bc <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   18856:	f7f0 f937 	bl	8ac8 <sdc_hci_cmd_le_set_scan_params>
   1885a:	e02f      	b.n	188bc <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1885c:	f7f0 f932 	bl	8ac4 <sdc_hci_cmd_le_set_scan_enable>
   18860:	e02c      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   18862:	7813      	ldrb	r3, [r2, #0]
   18864:	3301      	adds	r3, #1
   18866:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   18868:	4608      	mov	r0, r1
   1886a:	f7f0 f91e 	bl	8aaa <sdc_hci_cmd_le_read_filter_accept_list_size>
   1886e:	e025      	b.n	188bc <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   18870:	f7f0 f913 	bl	8a9a <sdc_hci_cmd_le_clear_filter_accept_list>
   18874:	e022      	b.n	188bc <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   18876:	f7f0 f90e 	bl	8a96 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1887a:	e01f      	b.n	188bc <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1887c:	f7f0 f919 	bl	8ab2 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   18880:	e01c      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   18882:	7813      	ldrb	r3, [r2, #0]
   18884:	3310      	adds	r3, #16
   18886:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   18888:	f7f0 f909 	bl	8a9e <sdc_hci_cmd_le_encrypt>
   1888c:	e016      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1888e:	7813      	ldrb	r3, [r2, #0]
   18890:	3308      	adds	r3, #8
   18892:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   18894:	4608      	mov	r0, r1
   18896:	f7f0 f904 	bl	8aa2 <sdc_hci_cmd_le_rand>
   1889a:	e00f      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1889c:	7813      	ldrb	r3, [r2, #0]
   1889e:	3308      	adds	r3, #8
   188a0:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   188a2:	4608      	mov	r0, r1
   188a4:	f7ff fe63 	bl	1856e <le_read_supported_states>
		return 0;
   188a8:	2000      	movs	r0, #0
   188aa:	e007      	b.n	188bc <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   188ac:	7813      	ldrb	r3, [r2, #0]
   188ae:	3302      	adds	r3, #2
   188b0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   188b2:	4608      	mov	r0, r1
   188b4:	f7f0 f8fb 	bl	8aae <sdc_hci_cmd_le_read_transmit_power>
   188b8:	e000      	b.n	188bc <le_controller_cmd_put+0xfe>
	switch (opcode)	{
   188ba:	2001      	movs	r0, #1
}
   188bc:	bd08      	pop	{r3, pc}

000188be <vs_cmd_put>:
{
   188be:	b508      	push	{r3, lr}
   188c0:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   188c2:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   188c4:	3106      	adds	r1, #6
   188c6:	f893 c001 	ldrb.w	ip, [r3, #1]
   188ca:	781b      	ldrb	r3, [r3, #0]
   188cc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   188d0:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   188d4:	4563      	cmp	r3, ip
   188d6:	d90f      	bls.n	188f8 <vs_cmd_put+0x3a>
   188d8:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   188dc:	4563      	cmp	r3, ip
   188de:	d863      	bhi.n	189a8 <vs_cmd_put+0xea>
   188e0:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   188e4:	d31a      	bcc.n	1891c <vs_cmd_put+0x5e>
   188e6:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   188ea:	2b05      	cmp	r3, #5
   188ec:	d858      	bhi.n	189a0 <vs_cmd_put+0xe2>
   188ee:	e8df f003 	tbb	[pc, r3]
   188f2:	4840      	.short	0x4840
   188f4:	54514e4b 	.word	0x54514e4b
   188f8:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   188fc:	d801      	bhi.n	18902 <vs_cmd_put+0x44>
   188fe:	2001      	movs	r0, #1
}
   18900:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   18902:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   18906:	3b01      	subs	r3, #1
   18908:	2b0a      	cmp	r3, #10
   1890a:	d84b      	bhi.n	189a4 <vs_cmd_put+0xe6>
   1890c:	e8df f003 	tbb	[pc, r3]
   18910:	4a4a0f08 	.word	0x4a4a0f08
   18914:	4a4a274a 	.word	0x4a4a274a
   18918:	2017      	.short	0x2017
   1891a:	2a          	.byte	0x2a
   1891b:	00          	.byte	0x00
   1891c:	2001      	movs	r0, #1
   1891e:	e7ef      	b.n	18900 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   18920:	7813      	ldrb	r3, [r2, #0]
   18922:	330c      	adds	r3, #12
   18924:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   18926:	4608      	mov	r0, r1
   18928:	f7e7 ff5c 	bl	7e4 <sdc_hci_cmd_vs_zephyr_read_version_info>
   1892c:	e7e8      	b.n	18900 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1892e:	7813      	ldrb	r3, [r2, #0]
   18930:	3340      	adds	r3, #64	; 0x40
   18932:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   18934:	4608      	mov	r0, r1
   18936:	f7ff ff04 	bl	18742 <vs_zephyr_supported_commands>
		return 0;
   1893a:	2000      	movs	r0, #0
   1893c:	e7e0      	b.n	18900 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   1893e:	7813      	ldrb	r3, [r2, #0]
   18940:	1c58      	adds	r0, r3, #1
   18942:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   18944:	3317      	adds	r3, #23
   18946:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   18948:	4608      	mov	r0, r1
   1894a:	f7e7 feff 	bl	74c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1894e:	e7d7      	b.n	18900 <vs_cmd_put+0x42>
		*param_length_out +=
   18950:	7813      	ldrb	r3, [r2, #0]
   18952:	3320      	adds	r3, #32
   18954:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   18956:	4608      	mov	r0, r1
   18958:	f7e7 feb0 	bl	6bc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1895c:	e7d0      	b.n	18900 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1895e:	f7f0 f894 	bl	8a8a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   18962:	e7cd      	b.n	18900 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   18964:	7813      	ldrb	r3, [r2, #0]
   18966:	3301      	adds	r3, #1
   18968:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1896a:	4608      	mov	r0, r1
   1896c:	f7f0 f879 	bl	8a62 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   18970:	e7c6      	b.n	18900 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   18972:	7813      	ldrb	r3, [r2, #0]
   18974:	3340      	adds	r3, #64	; 0x40
   18976:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   18978:	4608      	mov	r0, r1
   1897a:	f7ff ff01 	bl	18780 <vs_supported_commands>
		return 0;
   1897e:	2000      	movs	r0, #0
   18980:	e7be      	b.n	18900 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   18982:	f7f0 f867 	bl	8a54 <sdc_hci_cmd_vs_llpm_mode_set>
   18986:	e7bb      	b.n	18900 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   18988:	f7f0 f838 	bl	89fc <sdc_hci_cmd_vs_conn_update>
   1898c:	e7b8      	b.n	18900 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1898e:	f7f0 f82d 	bl	89ec <sdc_hci_cmd_vs_conn_event_extend>
   18992:	e7b5      	b.n	18900 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   18994:	f7f0 f860 	bl	8a58 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   18998:	e7b2      	b.n	18900 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1899a:	f7f0 f859 	bl	8a50 <sdc_hci_cmd_vs_event_length_set>
   1899e:	e7af      	b.n	18900 <vs_cmd_put+0x42>
	switch (opcode)	{
   189a0:	2001      	movs	r0, #1
   189a2:	e7ad      	b.n	18900 <vs_cmd_put+0x42>
   189a4:	2001      	movs	r0, #1
   189a6:	e7ab      	b.n	18900 <vs_cmd_put+0x42>
   189a8:	2001      	movs	r0, #1
   189aa:	e7a9      	b.n	18900 <vs_cmd_put+0x42>

000189ac <m_config_clock_source_get>:
}
   189ac:	2000      	movs	r0, #0
   189ae:	4770      	bx	lr

000189b0 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   189b0:	4668      	mov	r0, sp
   189b2:	f020 0107 	bic.w	r1, r0, #7
   189b6:	468d      	mov	sp, r1
   189b8:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   189ba:	f7ee f987 	bl	6ccc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   189be:	f7f4 f8c3 	bl	cb48 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   189c2:	f7f4 f9c5 	bl	cd50 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   189c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   189ca:	4685      	mov	sp, r0
   189cc:	4770      	bx	lr

000189ce <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   189ce:	4668      	mov	r0, sp
   189d0:	f020 0107 	bic.w	r1, r0, #7
   189d4:	468d      	mov	sp, r1
   189d6:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   189d8:	f7ee f92e 	bl	6c38 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   189dc:	f7f4 f8b4 	bl	cb48 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   189e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   189e4:	4685      	mov	sp, r0
   189e6:	4770      	bx	lr

000189e8 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   189e8:	4668      	mov	r0, sp
   189ea:	f020 0107 	bic.w	r1, r0, #7
   189ee:	468d      	mov	sp, r1
   189f0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   189f2:	f7eb fdf9 	bl	45e8 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   189f6:	f7f4 f8a7 	bl	cb48 <_arch_isr_direct_pm>
   189fa:	f7f4 f9a9 	bl	cd50 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   189fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   18a02:	4685      	mov	sp, r0
   18a04:	4770      	bx	lr

00018a06 <mpsl_lib_init_sys>:
{
   18a06:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   18a08:	f7fa fbce 	bl	131a8 <mpsl_lib_init_internal>
	if (err) {
   18a0c:	4604      	mov	r4, r0
   18a0e:	b108      	cbz	r0, 18a14 <mpsl_lib_init_sys+0xe>
}
   18a10:	4620      	mov	r0, r4
   18a12:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18a14:	2201      	movs	r2, #1
   18a16:	2100      	movs	r1, #0
   18a18:	2008      	movs	r0, #8
   18a1a:	f7fe fd37 	bl	1748c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18a1e:	2201      	movs	r2, #1
   18a20:	2100      	movs	r1, #0
   18a22:	200b      	movs	r0, #11
   18a24:	f7fe fd32 	bl	1748c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18a28:	2201      	movs	r2, #1
   18a2a:	2100      	movs	r1, #0
   18a2c:	4610      	mov	r0, r2
   18a2e:	f7fe fd2d 	bl	1748c <z_arm_irq_priority_set>
	return 0;
   18a32:	e7ed      	b.n	18a10 <mpsl_lib_init_sys+0xa>

00018a34 <mpsl_low_prio_work_handler>:
{
   18a34:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18a36:	f04f 30ff 	mov.w	r0, #4294967295
   18a3a:	f04f 31ff 	mov.w	r1, #4294967295
   18a3e:	f7f9 fe5d 	bl	126fc <multithreading_lock_acquire>
	mpsl_low_priority_process();
   18a42:	f7f1 faac 	bl	9f9e <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   18a46:	f7f9 fe63 	bl	12710 <multithreading_lock_release>
}
   18a4a:	bd08      	pop	{r3, pc}

00018a4c <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   18a4c:	b508      	push	{r3, lr}

	mpsl_fem_init();
   18a4e:	f7f1 fc7c 	bl	a34a <mpsl_fem_init>

	return 0;
}
   18a52:	2000      	movs	r0, #0
   18a54:	bd08      	pop	{r3, pc}

00018a56 <nrfx_clock_stop>:
	switch (domain) {
   18a56:	2801      	cmp	r0, #1
   18a58:	d000      	beq.n	18a5c <nrfx_clock_stop+0x6>
   18a5a:	4770      	bx	lr
{
   18a5c:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   18a5e:	f7ee ffe3 	bl	7a28 <mpsl_clock_hfclk_release>
}
   18a62:	bd08      	pop	{r3, pc}

00018a64 <nrfx_clock_enable>:
}
   18a64:	4770      	bx	lr

00018a66 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   18a66:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   18a68:	f7ee fde8 	bl	763c <MPSL_IRQ_CLOCK_Handler>
}
   18a6c:	bd08      	pop	{r3, pc}

00018a6e <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18a6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18a72:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18a76:	f1b3 3fff 	cmp.w	r3, #4294967295
   18a7a:	d003      	beq.n	18a84 <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18a7c:	2b06      	cmp	r3, #6
   18a7e:	d006      	beq.n	18a8e <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18a80:	2000      	movs	r0, #0
   18a82:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18a84:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18a88:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18a8c:	e7f6      	b.n	18a7c <nrf52_errata_12+0xe>
                        return true;
   18a8e:	2001      	movs	r0, #1
    #endif
}
   18a90:	4770      	bx	lr

00018a92 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18a92:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18a96:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18a9a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18a9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18aa2:	2a06      	cmp	r2, #6
   18aa4:	d001      	beq.n	18aaa <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18aa6:	2000      	movs	r0, #0
   18aa8:	4770      	bx	lr
                switch(var2)
   18aaa:	3b03      	subs	r3, #3
   18aac:	2b00      	cmp	r3, #0
   18aae:	d804      	bhi.n	18aba <nrf52_errata_16+0x28>
   18ab0:	e8df f003 	tbb	[pc, r3]
   18ab4:	01          	.byte	0x01
   18ab5:	00          	.byte	0x00
   18ab6:	2001      	movs	r0, #1
   18ab8:	4770      	bx	lr
                        return false;
   18aba:	2000      	movs	r0, #0
    #endif
}
   18abc:	4770      	bx	lr

00018abe <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18abe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18ac2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
   18aca:	d003      	beq.n	18ad4 <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18acc:	2b06      	cmp	r3, #6
   18ace:	d006      	beq.n	18ade <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18ad0:	2000      	movs	r0, #0
   18ad2:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18ad4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18ad8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18adc:	e7f6      	b.n	18acc <nrf52_errata_31+0xe>
                        return true;
   18ade:	2001      	movs	r0, #1
    #endif
}
   18ae0:	4770      	bx	lr

00018ae2 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18ae2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18ae6:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18aea:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18aee:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18af2:	2a06      	cmp	r2, #6
   18af4:	d001      	beq.n	18afa <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18af6:	2000      	movs	r0, #0
   18af8:	4770      	bx	lr
                switch(var2)
   18afa:	3b03      	subs	r3, #3
   18afc:	2b00      	cmp	r3, #0
   18afe:	d804      	bhi.n	18b0a <nrf52_errata_32+0x28>
   18b00:	e8df f003 	tbb	[pc, r3]
   18b04:	01          	.byte	0x01
   18b05:	00          	.byte	0x00
   18b06:	2001      	movs	r0, #1
   18b08:	4770      	bx	lr
                        return false;
   18b0a:	2000      	movs	r0, #0
    #endif
}
   18b0c:	4770      	bx	lr

00018b0e <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b12:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18b16:	f1b3 3fff 	cmp.w	r3, #4294967295
   18b1a:	d003      	beq.n	18b24 <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18b1c:	2b06      	cmp	r3, #6
   18b1e:	d006      	beq.n	18b2e <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18b20:	2000      	movs	r0, #0
   18b22:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18b24:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18b28:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18b2c:	e7f6      	b.n	18b1c <nrf52_errata_36+0xe>
                        return true;
   18b2e:	2001      	movs	r0, #1
    #endif
}
   18b30:	4770      	bx	lr

00018b32 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18b32:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18b36:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18b3a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18b3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18b42:	2a06      	cmp	r2, #6
   18b44:	d001      	beq.n	18b4a <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18b46:	2000      	movs	r0, #0
   18b48:	4770      	bx	lr
                switch(var2)
   18b4a:	3b03      	subs	r3, #3
   18b4c:	2b00      	cmp	r3, #0
   18b4e:	d804      	bhi.n	18b5a <nrf52_errata_37+0x28>
   18b50:	e8df f003 	tbb	[pc, r3]
   18b54:	01          	.byte	0x01
   18b55:	00          	.byte	0x00
   18b56:	2001      	movs	r0, #1
   18b58:	4770      	bx	lr
                        return false;
   18b5a:	2000      	movs	r0, #0
    #endif
}
   18b5c:	4770      	bx	lr

00018b5e <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18b5e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18b62:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18b66:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18b6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18b6e:	2a06      	cmp	r2, #6
   18b70:	d001      	beq.n	18b76 <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18b72:	2000      	movs	r0, #0
   18b74:	4770      	bx	lr
                switch(var2)
   18b76:	3b03      	subs	r3, #3
   18b78:	2b00      	cmp	r3, #0
   18b7a:	d804      	bhi.n	18b86 <nrf52_errata_57+0x28>
   18b7c:	e8df f003 	tbb	[pc, r3]
   18b80:	01          	.byte	0x01
   18b81:	00          	.byte	0x00
   18b82:	2001      	movs	r0, #1
   18b84:	4770      	bx	lr
                        return false;
   18b86:	2000      	movs	r0, #0
    #endif
}
   18b88:	4770      	bx	lr

00018b8a <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18b8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b8e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18b92:	f1b3 3fff 	cmp.w	r3, #4294967295
   18b96:	d007      	beq.n	18ba8 <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   18b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18b9c:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18ba0:	2b06      	cmp	r3, #6
   18ba2:	d00a      	beq.n	18bba <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18ba4:	2000      	movs	r0, #0
   18ba6:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18ba8:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
   18bac:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18bb0:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
   18bb4:	f3c2 1203 	ubfx	r2, r2, #4, #4
   18bb8:	e7f2      	b.n	18ba0 <nrf52_errata_66+0x16>
                switch(var2)
   18bba:	3a03      	subs	r2, #3
   18bbc:	2a01      	cmp	r2, #1
   18bbe:	d804      	bhi.n	18bca <nrf52_errata_66+0x40>
   18bc0:	e8df f002 	tbb	[pc, r2]
   18bc4:	0101      	.short	0x0101
   18bc6:	2000      	movs	r0, #0
   18bc8:	4770      	bx	lr
                        return true;
   18bca:	2001      	movs	r0, #1
    #endif
}
   18bcc:	4770      	bx	lr

00018bce <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18bd2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   18bda:	d003      	beq.n	18be4 <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18bdc:	2b06      	cmp	r3, #6
   18bde:	d006      	beq.n	18bee <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18be0:	2000      	movs	r0, #0
   18be2:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18be4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18be8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18bec:	e7f6      	b.n	18bdc <nrf52_errata_108+0xe>
                        return true;
   18bee:	2001      	movs	r0, #1
    #endif
}
   18bf0:	4770      	bx	lr

00018bf2 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18bf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18bf6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
   18bfe:	d003      	beq.n	18c08 <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18c00:	2b06      	cmp	r3, #6
   18c02:	d006      	beq.n	18c12 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18c04:	2000      	movs	r0, #0
   18c06:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18c08:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18c0c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18c10:	e7f6      	b.n	18c00 <nrf52_errata_136+0xe>
                        return true;
   18c12:	2001      	movs	r0, #1
    #endif
}
   18c14:	4770      	bx	lr

00018c16 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c1a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18c1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18c22:	2a06      	cmp	r2, #6
   18c24:	d001      	beq.n	18c2a <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18c26:	2000      	movs	r0, #0
   18c28:	4770      	bx	lr
                switch(var2)
   18c2a:	2b05      	cmp	r3, #5
   18c2c:	d803      	bhi.n	18c36 <nrf52_errata_182+0x20>
   18c2e:	2b03      	cmp	r3, #3
   18c30:	d303      	bcc.n	18c3a <nrf52_errata_182+0x24>
   18c32:	2000      	movs	r0, #0
   18c34:	4770      	bx	lr
                        return true;
   18c36:	2001      	movs	r0, #1
   18c38:	4770      	bx	lr
                        return true;
   18c3a:	2001      	movs	r0, #1
    #endif
}
   18c3c:	4770      	bx	lr

00018c3e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c42:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18c46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18c4a:	2a06      	cmp	r2, #6
   18c4c:	d001      	beq.n	18c52 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18c4e:	2000      	movs	r0, #0
   18c50:	4770      	bx	lr
                switch(var2)
   18c52:	2b06      	cmp	r3, #6
   18c54:	d803      	bhi.n	18c5e <nrf52_configuration_249+0x20>
   18c56:	2b03      	cmp	r3, #3
   18c58:	d303      	bcc.n	18c62 <nrf52_configuration_249+0x24>
   18c5a:	2000      	movs	r0, #0
   18c5c:	4770      	bx	lr
                        return true;
   18c5e:	2001      	movs	r0, #1
   18c60:	4770      	bx	lr
                        return true;
   18c62:	2001      	movs	r0, #1
    #endif
}
   18c64:	4770      	bx	lr

00018c66 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   18c66:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   18c68:	f7ff ffe9 	bl	18c3e <nrf52_configuration_249>
   18c6c:	b138      	cbz	r0, 18c7e <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18c6e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18c72:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18c7a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   18c7e:	bd08      	pop	{r3, pc}

00018c80 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   18c80:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   18c82:	4780      	blx	r0
}
   18c84:	bd08      	pop	{r3, pc}

00018c86 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   18c86:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   18c88:	f000 feb2 	bl	199f0 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   18c8c:	bd08      	pop	{r3, pc}

00018c8e <nrf_gpiote_event_configure>:
{
   18c8e:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18c90:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   18c94:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   18c98:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   18c9c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   18ca0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18ca4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   18ca8:	0212      	lsls	r2, r2, #8
   18caa:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   18cae:	041b      	lsls	r3, r3, #16
   18cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18cb4:	431a      	orrs	r2, r3
   18cb6:	4314      	orrs	r4, r2
   18cb8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   18cbc:	bc10      	pop	{r4}
   18cbe:	4770      	bx	lr

00018cc0 <nrf_gpiote_task_configure>:
{
   18cc0:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   18cc2:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   18cc6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   18cca:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
   18cce:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   18cd2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18cd6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   18cda:	0212      	lsls	r2, r2, #8
   18cdc:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   18ce0:	041b      	lsls	r3, r3, #16
   18ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18ce6:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   18ce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   18cec:	051b      	lsls	r3, r3, #20
   18cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   18cf2:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18cf4:	4314      	orrs	r4, r2
   18cf6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   18cfa:	bc10      	pop	{r4}
   18cfc:	4770      	bx	lr

00018cfe <nrf_gpio_reconfigure>:
{
   18cfe:	b4f0      	push	{r4, r5, r6, r7}
   18d00:	461c      	mov	r4, r3
   18d02:	9e04      	ldr	r6, [sp, #16]
   18d04:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
   18d06:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18d0a:	f500 77e0 	add.w	r7, r0, #448	; 0x1c0
   18d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d12:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18d16:	460b      	mov	r3, r1
   18d18:	b389      	cbz	r1, 18d7e <nrf_gpio_reconfigure+0x80>
   18d1a:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18d1c:	b38a      	cbz	r2, 18d82 <nrf_gpio_reconfigure+0x84>
   18d1e:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18d22:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   18d26:	b37c      	cbz	r4, 18d88 <nrf_gpio_reconfigure+0x8a>
   18d28:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18d2c:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   18d30:	b36e      	cbz	r6, 18d8e <nrf_gpio_reconfigure+0x90>
   18d32:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   18d36:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   18d3a:	b35d      	cbz	r5, 18d94 <nrf_gpio_reconfigure+0x96>
   18d3c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18d40:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
   18d44:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18d48:	b33b      	cbz	r3, 18d9a <nrf_gpio_reconfigure+0x9c>
   18d4a:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18d4c:	b33a      	cbz	r2, 18d9e <nrf_gpio_reconfigure+0xa0>
   18d4e:	7812      	ldrb	r2, [r2, #0]
   18d50:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18d52:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18d54:	b32c      	cbz	r4, 18da2 <nrf_gpio_reconfigure+0xa4>
   18d56:	7822      	ldrb	r2, [r4, #0]
   18d58:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18d5a:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   18d5c:	b31e      	cbz	r6, 18da6 <nrf_gpio_reconfigure+0xa8>
   18d5e:	7832      	ldrb	r2, [r6, #0]
   18d60:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18d62:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   18d64:	b30d      	cbz	r5, 18daa <nrf_gpio_reconfigure+0xac>
   18d66:	782a      	ldrb	r2, [r5, #0]
   18d68:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   18d6a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18d6c:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   18d6e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   18d72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18d76:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   18d7a:	bcf0      	pop	{r4, r5, r6, r7}
   18d7c:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18d7e:	2100      	movs	r1, #0
   18d80:	e7cc      	b.n	18d1c <nrf_gpio_reconfigure+0x1e>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18d82:	f04f 0c00 	mov.w	ip, #0
   18d86:	e7cc      	b.n	18d22 <nrf_gpio_reconfigure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   18d88:	f04f 0c00 	mov.w	ip, #0
   18d8c:	e7ce      	b.n	18d2c <nrf_gpio_reconfigure+0x2e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   18d8e:	f04f 0c00 	mov.w	ip, #0
   18d92:	e7d0      	b.n	18d36 <nrf_gpio_reconfigure+0x38>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   18d94:	f04f 0c00 	mov.w	ip, #0
   18d98:	e7d2      	b.n	18d40 <nrf_gpio_reconfigure+0x42>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18d9a:	2300      	movs	r3, #0
   18d9c:	e7d6      	b.n	18d4c <nrf_gpio_reconfigure+0x4e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18d9e:	2200      	movs	r2, #0
   18da0:	e7d7      	b.n	18d52 <nrf_gpio_reconfigure+0x54>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18da2:	2200      	movs	r2, #0
   18da4:	e7d9      	b.n	18d5a <nrf_gpio_reconfigure+0x5c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   18da6:	2200      	movs	r2, #0
   18da8:	e7db      	b.n	18d62 <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   18daa:	2200      	movs	r2, #0
   18dac:	e7dd      	b.n	18d6a <nrf_gpio_reconfigure+0x6c>

00018dae <pin_is_task_output>:
{
   18dae:	b510      	push	{r4, lr}
   18db0:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18db2:	f7fa fc5d 	bl	13670 <pin_is_output>
   18db6:	b128      	cbz	r0, 18dc4 <pin_is_task_output+0x16>
   18db8:	4620      	mov	r0, r4
   18dba:	f7fa fc43 	bl	13644 <pin_in_use_by_te>
   18dbe:	b118      	cbz	r0, 18dc8 <pin_is_task_output+0x1a>
   18dc0:	2001      	movs	r0, #1
   18dc2:	e000      	b.n	18dc6 <pin_is_task_output+0x18>
   18dc4:	2000      	movs	r0, #0
}
   18dc6:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18dc8:	2000      	movs	r0, #0
   18dca:	e7fc      	b.n	18dc6 <pin_is_task_output+0x18>

00018dcc <pin_is_input>:
{
   18dcc:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   18dce:	f7fa fc4f 	bl	13670 <pin_is_output>
   18dd2:	f080 0001 	eor.w	r0, r0, #1
}
   18dd6:	b2c0      	uxtb	r0, r0
   18dd8:	bd08      	pop	{r3, pc}

00018dda <gpiote_polarity_to_trigger>:
}
   18dda:	4770      	bx	lr

00018ddc <gpiote_trigger_to_polarity>:
}
   18ddc:	4770      	bx	lr

00018dde <is_level>:
}
   18dde:	2803      	cmp	r0, #3
   18de0:	bf94      	ite	ls
   18de2:	2000      	movls	r0, #0
   18de4:	2001      	movhi	r0, #1
   18de6:	4770      	bx	lr

00018de8 <next_sense_cond_call_handler>:
{
   18de8:	b570      	push	{r4, r5, r6, lr}
   18dea:	4604      	mov	r4, r0
   18dec:	460d      	mov	r5, r1
   18dee:	4616      	mov	r6, r2
    if (is_level(trigger))
   18df0:	4608      	mov	r0, r1
   18df2:	f7ff fff4 	bl	18dde <is_level>
   18df6:	b9b8      	cbnz	r0, 18e28 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   18df8:	2e02      	cmp	r6, #2
   18dfa:	d038      	beq.n	18e6e <next_sense_cond_call_handler+0x86>
   18dfc:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   18dfe:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   18e06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18e0a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   18e0e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18e12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   18e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   18e1a:	2d03      	cmp	r5, #3
   18e1c:	d02b      	beq.n	18e76 <next_sense_cond_call_handler+0x8e>
   18e1e:	2e02      	cmp	r6, #2
   18e20:	d027      	beq.n	18e72 <next_sense_cond_call_handler+0x8a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   18e22:	2e03      	cmp	r6, #3
   18e24:	d02c      	beq.n	18e80 <next_sense_cond_call_handler+0x98>
}
   18e26:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   18e28:	4629      	mov	r1, r5
   18e2a:	4620      	mov	r0, r4
   18e2c:	f7fa fc92 	bl	13754 <call_handler>
    *p_pin = pin_number & 0x1F;
   18e30:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   18e34:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
   18e38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18e40:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   18e44:	429e      	cmp	r6, r3
   18e46:	d1ee      	bne.n	18e26 <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18e4c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   18e50:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   18e54:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   18e58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e5c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   18e60:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18e64:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   18e68:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   18e6c:	e7db      	b.n	18e26 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   18e6e:	2003      	movs	r0, #3
   18e70:	e7c5      	b.n	18dfe <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   18e72:	2d01      	cmp	r5, #1
   18e74:	d1d5      	bne.n	18e22 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
   18e76:	4629      	mov	r1, r5
   18e78:	4620      	mov	r0, r4
   18e7a:	f7fa fc6b 	bl	13754 <call_handler>
}
   18e7e:	e7d2      	b.n	18e26 <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   18e80:	2d02      	cmp	r5, #2
   18e82:	d1d0      	bne.n	18e26 <next_sense_cond_call_handler+0x3e>
   18e84:	e7f7      	b.n	18e76 <next_sense_cond_call_handler+0x8e>

00018e86 <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   18e86:	4684      	mov	ip, r0
   18e88:	2300      	movs	r3, #0
   18e8a:	e008      	b.n	18e9e <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   18e8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18e90:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   18e94:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   18e98:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   18e9c:	3301      	adds	r3, #1
   18e9e:	2b00      	cmp	r3, #0
   18ea0:	d0f4      	beq.n	18e8c <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   18ea2:	2300      	movs	r3, #0
   18ea4:	b10b      	cbz	r3, 18eaa <latch_pending_read_and_check+0x24>
    return false;
   18ea6:	2000      	movs	r0, #0
   18ea8:	4770      	bx	lr
        if (latch[port_idx])
   18eaa:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   18eae:	b90a      	cbnz	r2, 18eb4 <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   18eb0:	3301      	adds	r3, #1
   18eb2:	e7f7      	b.n	18ea4 <latch_pending_read_and_check+0x1e>
            return true;
   18eb4:	2001      	movs	r0, #1
}
   18eb6:	4770      	bx	lr

00018eb8 <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   18eb8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   18eba:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   18ebc:	429a      	cmp	r2, r3
   18ebe:	d007      	beq.n	18ed0 <xfer_completeness_check+0x18>
   18ec0:	2300      	movs	r3, #0
   18ec2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   18ec6:	2205      	movs	r2, #5
   18ec8:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   18ecc:	4618      	mov	r0, r3
   18ece:	4770      	bx	lr
        return true;
   18ed0:	2001      	movs	r0, #1
}
   18ed2:	4770      	bx	lr

00018ed4 <twi_send_byte>:
{
   18ed4:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   18ed6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   18ed8:	6a88      	ldr	r0, [r1, #40]	; 0x28
   18eda:	4282      	cmp	r2, r0
   18edc:	d205      	bcs.n	18eea <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   18ede:	6a49      	ldr	r1, [r1, #36]	; 0x24
   18ee0:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   18ee2:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   18ee6:	2001      	movs	r0, #1
}
   18ee8:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   18eea:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   18eee:	b930      	cbnz	r0, 18efe <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   18ef0:	6a0a      	ldr	r2, [r1, #32]
   18ef2:	f012 0f40 	tst.w	r2, #64	; 0x40
   18ef6:	d106      	bne.n	18f06 <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18ef8:	2001      	movs	r0, #1
   18efa:	6158      	str	r0, [r3, #20]
}
   18efc:	4770      	bx	lr
   18efe:	2201      	movs	r2, #1
   18f00:	61da      	str	r2, [r3, #28]
            return false;
   18f02:	2000      	movs	r0, #0
   18f04:	4770      	bx	lr
   18f06:	2201      	movs	r2, #1
   18f08:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   18f0a:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   18f0e:	4770      	bx	lr

00018f10 <twi_receive_byte>:
{
   18f10:	4684      	mov	ip, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   18f12:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   18f14:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   18f16:	4293      	cmp	r3, r2
   18f18:	d229      	bcs.n	18f6e <twi_receive_byte+0x5e>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   18f1a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   18f1c:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   18f20:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   18f22:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   18f24:	3301      	adds	r3, #1
   18f26:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   18f28:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   18f2a:	1e50      	subs	r0, r2, #1
   18f2c:	4283      	cmp	r3, r0
   18f2e:	d007      	beq.n	18f40 <twi_receive_byte+0x30>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   18f30:	4293      	cmp	r3, r2
   18f32:	d00d      	beq.n	18f50 <twi_receive_byte+0x40>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   18f34:	4293      	cmp	r3, r2
   18f36:	d011      	beq.n	18f5c <twi_receive_byte+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18f38:	2001      	movs	r0, #1
   18f3a:	f8cc 0020 	str.w	r0, [ip, #32]
}
   18f3e:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   18f40:	6a08      	ldr	r0, [r1, #32]
   18f42:	f010 0f40 	tst.w	r0, #64	; 0x40
   18f46:	d1f3      	bne.n	18f30 <twi_receive_byte+0x20>
    p_reg->SHORTS = mask;
   18f48:	2302      	movs	r3, #2
   18f4a:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
}
   18f4e:	e7f3      	b.n	18f38 <twi_receive_byte+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   18f50:	6a08      	ldr	r0, [r1, #32]
   18f52:	f010 0f40 	tst.w	r0, #64	; 0x40
   18f56:	d1ed      	bne.n	18f34 <twi_receive_byte+0x24>
            return true;
   18f58:	2001      	movs	r0, #1
}
   18f5a:	4770      	bx	lr
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   18f5c:	6a0b      	ldr	r3, [r1, #32]
   18f5e:	f013 0f40 	tst.w	r3, #64	; 0x40
   18f62:	d0e9      	beq.n	18f38 <twi_receive_byte+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   18f64:	2302      	movs	r3, #2
   18f66:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   18f6a:	2000      	movs	r0, #0
   18f6c:	4770      	bx	lr
    return true;
   18f6e:	2001      	movs	r0, #1
   18f70:	4770      	bx	lr

00018f72 <twi_transfer>:
{
   18f72:	b570      	push	{r4, r5, r6, lr}
   18f74:	4604      	mov	r4, r0
   18f76:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18f78:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   18f7c:	b1cb      	cbz	r3, 18fb2 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f7e:	2300      	movs	r3, #0
   18f80:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   18f84:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   18f88:	2601      	movs	r6, #1
    if (p_cb->error)
   18f8a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   18f8e:	b193      	cbz	r3, 18fb6 <twi_transfer+0x44>
   18f90:	2300      	movs	r3, #0
   18f92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f96:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18f9a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18f9e:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   18fa2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   18fa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   18faa:	2e00      	cmp	r6, #0
   18fac:	d14c      	bne.n	19048 <twi_transfer+0xd6>
    return true;
   18fae:	2001      	movs	r0, #1
}
   18fb0:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   18fb2:	2600      	movs	r6, #0
   18fb4:	e7e9      	b.n	18f8a <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18fb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   18fba:	b14b      	cbz	r3, 18fd0 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18fbc:	2300      	movs	r3, #0
   18fbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fc2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18fc6:	2301      	movs	r3, #1
   18fc8:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   18fca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   18fce:	e7ec      	b.n	18faa <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18fd0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   18fd4:	b1db      	cbz	r3, 1900e <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18fd6:	2300      	movs	r3, #0
   18fd8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18fdc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   18fe0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18fe2:	3301      	adds	r3, #1
   18fe4:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18fe6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   18fea:	b14b      	cbz	r3, 19000 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18fec:	2300      	movs	r3, #0
   18fee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ff2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18ff6:	2301      	movs	r3, #1
   18ff8:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   18ffa:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   18ffe:	e7d4      	b.n	18faa <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   19000:	4629      	mov	r1, r5
   19002:	4620      	mov	r0, r4
   19004:	f7ff ff66 	bl	18ed4 <twi_send_byte>
   19008:	2800      	cmp	r0, #0
   1900a:	d1ce      	bne.n	18faa <twi_transfer+0x38>
   1900c:	e7d0      	b.n	18fb0 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1900e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   19012:	2b00      	cmp	r3, #0
   19014:	d0c9      	beq.n	18faa <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19016:	2300      	movs	r3, #0
   19018:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1901c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19020:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   19024:	b14b      	cbz	r3, 1903a <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19026:	2300      	movs	r3, #0
   19028:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1902c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19030:	2301      	movs	r3, #1
   19032:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   19034:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   19038:	e7b7      	b.n	18faa <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   1903a:	4629      	mov	r1, r5
   1903c:	4620      	mov	r0, r4
   1903e:	f7ff ff67 	bl	18f10 <twi_receive_byte>
   19042:	2800      	cmp	r0, #0
   19044:	d1b1      	bne.n	18faa <twi_transfer+0x38>
   19046:	e7b3      	b.n	18fb0 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   19048:	2300      	movs	r3, #0
   1904a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   1904e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   19052:	b10b      	cbz	r3, 19058 <twi_transfer+0xe6>
        return false;
   19054:	2000      	movs	r0, #0
   19056:	e7ab      	b.n	18fb0 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   19058:	4629      	mov	r1, r5
   1905a:	4620      	mov	r0, r4
   1905c:	f7ff ff2c 	bl	18eb8 <xfer_completeness_check>
   19060:	f080 0001 	eor.w	r0, r0, #1
   19064:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   19068:	e7f4      	b.n	19054 <twi_transfer+0xe2>

0001906a <twi_irq_handler>:
{
   1906a:	b570      	push	{r4, r5, r6, lr}
   1906c:	b086      	sub	sp, #24
   1906e:	4605      	mov	r5, r0
   19070:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   19072:	f7ff ff7e 	bl	18f72 <twi_transfer>
   19076:	2800      	cmp	r0, #0
   19078:	d15e      	bne.n	19138 <twi_irq_handler+0xce>
    if (!p_cb->error &&
   1907a:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   1907e:	b926      	cbnz	r6, 1908a <twi_irq_handler+0x20>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   19080:	7b22      	ldrb	r2, [r4, #12]
   19082:	1e93      	subs	r3, r2, #2
   19084:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   19086:	2b01      	cmp	r3, #1
   19088:	d917      	bls.n	190ba <twi_irq_handler+0x50>
        event.xfer_desc = p_cb->xfer_desc;
   1908a:	f10d 0c04 	add.w	ip, sp, #4
   1908e:	f104 0e0c 	add.w	lr, r4, #12
   19092:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   19096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1909a:	f8de 3000 	ldr.w	r3, [lr]
   1909e:	f8cc 3000 	str.w	r3, [ip]
        if (p_cb->error)
   190a2:	b3c6      	cbz	r6, 19116 <twi_irq_handler+0xac>
    uint32_t error_source = p_reg->ERRORSRC;
   190a4:	f8d5 34c4 	ldr.w	r3, [r5, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   190a8:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   190ac:	f013 0f02 	tst.w	r3, #2
   190b0:	d01f      	beq.n	190f2 <twi_irq_handler+0x88>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   190b2:	2301      	movs	r3, #1
   190b4:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   190b8:	e030      	b.n	1911c <twi_irq_handler+0xb2>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   190ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   190bc:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   190be:	4299      	cmp	r1, r3
   190c0:	d1e3      	bne.n	1908a <twi_irq_handler+0x20>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   190c2:	69e3      	ldr	r3, [r4, #28]
   190c4:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   190c6:	6963      	ldr	r3, [r4, #20]
   190c8:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   190ca:	6a23      	ldr	r3, [r4, #32]
   190cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
   190d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   190d4:	2300      	movs	r3, #0
   190d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   190da:	2a03      	cmp	r2, #3
   190dc:	d004      	beq.n	190e8 <twi_irq_handler+0x7e>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   190de:	4621      	mov	r1, r4
   190e0:	4628      	mov	r0, r5
   190e2:	f7fa fec9 	bl	13e78 <twi_rx_start_transfer>
   190e6:	e027      	b.n	19138 <twi_irq_handler+0xce>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   190e8:	4621      	mov	r1, r4
   190ea:	4628      	mov	r0, r5
   190ec:	f7fa fe66 	bl	13dbc <twi_tx_start_transfer>
   190f0:	e022      	b.n	19138 <twi_irq_handler+0xce>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   190f2:	f013 0f04 	tst.w	r3, #4
   190f6:	d003      	beq.n	19100 <twi_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   190f8:	2302      	movs	r3, #2
   190fa:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   190fe:	e00d      	b.n	1911c <twi_irq_handler+0xb2>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   19100:	f013 0f01 	tst.w	r3, #1
   19104:	d003      	beq.n	1910e <twi_irq_handler+0xa4>
                event.type = NRFX_TWI_EVT_OVERRUN;
   19106:	2303      	movs	r3, #3
   19108:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   1910c:	e006      	b.n	1911c <twi_irq_handler+0xb2>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1910e:	2304      	movs	r3, #4
   19110:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   19114:	e002      	b.n	1911c <twi_irq_handler+0xb2>
            event.type = NRFX_TWI_EVT_DONE;
   19116:	2300      	movs	r3, #0
   19118:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1911c:	2300      	movs	r3, #0
   1911e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   19122:	6a23      	ldr	r3, [r4, #32]
   19124:	f013 0f04 	tst.w	r3, #4
   19128:	d002      	beq.n	19130 <twi_irq_handler+0xc6>
   1912a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1912e:	b11b      	cbz	r3, 19138 <twi_irq_handler+0xce>
            p_cb->handler(&event, p_cb->p_context);
   19130:	6823      	ldr	r3, [r4, #0]
   19132:	6861      	ldr	r1, [r4, #4]
   19134:	4668      	mov	r0, sp
   19136:	4798      	blx	r3
}
   19138:	b006      	add	sp, #24
   1913a:	bd70      	pop	{r4, r5, r6, pc}

0001913c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1913c:	b508      	push	{r3, lr}
  _DoInit();
   1913e:	f7fb f855 	bl	141ec <_DoInit>
}
   19142:	bd08      	pop	{r3, pc}

00019144 <rtt_init>:
{
   19144:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   19146:	f7ff fff9 	bl	1913c <SEGGER_RTT_Init>
}
   1914a:	2000      	movs	r0, #0
   1914c:	bd08      	pop	{r3, pc}

0001914e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1914e:	b160      	cbz	r0, 1916a <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   19150:	68c3      	ldr	r3, [r0, #12]
   19152:	785a      	ldrb	r2, [r3, #1]
   19154:	f012 0f01 	tst.w	r2, #1
   19158:	d003      	beq.n	19162 <z_device_is_ready+0x14>
   1915a:	781b      	ldrb	r3, [r3, #0]
   1915c:	b11b      	cbz	r3, 19166 <z_device_is_ready+0x18>
   1915e:	2000      	movs	r0, #0
   19160:	4770      	bx	lr
   19162:	2000      	movs	r0, #0
   19164:	4770      	bx	lr
   19166:	2001      	movs	r0, #1
   19168:	4770      	bx	lr
		return false;
   1916a:	2000      	movs	r0, #0
}
   1916c:	4770      	bx	lr

0001916e <z_early_memset>:
{
   1916e:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   19170:	f7fe fa7a 	bl	17668 <memset>
}
   19174:	bd08      	pop	{r3, pc}

00019176 <z_early_memcpy>:
{
   19176:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   19178:	f7fe fa47 	bl	1760a <memcpy>
}
   1917c:	bd08      	pop	{r3, pc}

0001917e <k_heap_init>:
{
   1917e:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   19180:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   19184:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   19186:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   19188:	f7fd f8c4 	bl	16314 <sys_heap_init>
}
   1918c:	bd10      	pop	{r4, pc}

0001918e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1918e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19192:	b085      	sub	sp, #20
   19194:	4607      	mov	r7, r0
   19196:	9103      	str	r1, [sp, #12]
   19198:	4692      	mov	sl, r2
   1919a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1919c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1919e:	4628      	mov	r0, r5
   191a0:	4621      	mov	r1, r4
   191a2:	f000 fc2b 	bl	199fc <sys_clock_timeout_end_calc>
   191a6:	4606      	mov	r6, r0
   191a8:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   191aa:	f1b4 3fff 	cmp.w	r4, #4294967295
   191ae:	bf08      	it	eq
   191b0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   191b4:	d00d      	beq.n	191d2 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   191b6:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   191ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   191be:	f3ef 8511 	mrs	r5, BASEPRI
   191c2:	f383 8812 	msr	BASEPRI_MAX, r3
   191c6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   191ca:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   191ce:	4644      	mov	r4, r8

	while (ret == NULL) {
   191d0:	e014      	b.n	191fc <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   191d2:	f04f 36ff 	mov.w	r6, #4294967295
   191d6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   191da:	e7ec      	b.n	191b6 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   191dc:	9000      	str	r0, [sp, #0]
   191de:	9101      	str	r1, [sp, #4]
   191e0:	f107 020c 	add.w	r2, r7, #12
   191e4:	4629      	mov	r1, r5
   191e6:	4658      	mov	r0, fp
   191e8:	f7fc f8ac 	bl	15344 <z_pend_curr>
   191ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   191f0:	f3ef 8511 	mrs	r5, BASEPRI
   191f4:	f383 8812 	msr	BASEPRI_MAX, r3
   191f8:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   191fc:	b9ac      	cbnz	r4, 1922a <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   191fe:	4652      	mov	r2, sl
   19200:	9903      	ldr	r1, [sp, #12]
   19202:	4638      	mov	r0, r7
   19204:	f7fd f810 	bl	16228 <sys_heap_aligned_alloc>
   19208:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1920a:	f7fc fbd7 	bl	159bc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1920e:	b964      	cbnz	r4, 1922a <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   19210:	1a30      	subs	r0, r6, r0
   19212:	eb69 0101 	sbc.w	r1, r9, r1
   19216:	2801      	cmp	r0, #1
   19218:	f171 0300 	sbcs.w	r3, r1, #0
   1921c:	db05      	blt.n	1922a <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   1921e:	f1b8 0f00 	cmp.w	r8, #0
   19222:	d1db      	bne.n	191dc <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   19224:	f04f 0801 	mov.w	r8, #1
   19228:	e7d8      	b.n	191dc <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   1922a:	f385 8811 	msr	BASEPRI, r5
   1922e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19232:	4620      	mov	r0, r4
   19234:	b005      	add	sp, #20
   19236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001923a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1923a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1923c:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1923e:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   19242:	f04f 0340 	mov.w	r3, #64	; 0x40
   19246:	f3ef 8511 	mrs	r5, BASEPRI
   1924a:	f383 8812 	msr	BASEPRI_MAX, r3
   1924e:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   19252:	f7fc ffa5 	bl	161a0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   19256:	f104 000c 	add.w	r0, r4, #12
   1925a:	f000 fb16 	bl	1988a <z_unpend_all>
   1925e:	b920      	cbnz	r0, 1926a <k_heap_free+0x30>
	__asm__ volatile(
   19260:	f385 8811 	msr	BASEPRI, r5
   19264:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   19268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   1926a:	4629      	mov	r1, r5
   1926c:	4638      	mov	r0, r7
   1926e:	f7fb ff1b 	bl	150a8 <z_reschedule>
   19272:	e7f9      	b.n	19268 <k_heap_free+0x2e>

00019274 <setup_thread_stack>:
{
   19274:	b410      	push	{r4}
   19276:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19278:	3207      	adds	r2, #7
   1927a:	f022 0207 	bic.w	r2, r2, #7
   1927e:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   19282:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   19286:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   1928a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   1928e:	2200      	movs	r2, #0
   19290:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   19294:	4408      	add	r0, r1
   19296:	bc10      	pop	{r4}
   19298:	4770      	bx	lr

0001929a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1929a:	f3ef 8005 	mrs	r0, IPSR
}
   1929e:	3800      	subs	r0, #0
   192a0:	bf18      	it	ne
   192a2:	2001      	movne	r0, #1
   192a4:	4770      	bx	lr

000192a6 <k_thread_name_get>:
}
   192a6:	3078      	adds	r0, #120	; 0x78
   192a8:	4770      	bx	lr

000192aa <z_impl_k_thread_start>:
{
   192aa:	b508      	push	{r3, lr}
	z_sched_start(thread);
   192ac:	f7fc f810 	bl	152d0 <z_sched_start>
}
   192b0:	bd08      	pop	{r3, pc}

000192b2 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   192b2:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   192b4:	2400      	movs	r4, #0
   192b6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   192b8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   192ba:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   192bc:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   192be:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   192c0:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   192c2:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   192c4:	bc10      	pop	{r4}
   192c6:	4770      	bx	lr

000192c8 <z_impl_k_thread_create>:
{
   192c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   192ca:	b087      	sub	sp, #28
   192cc:	4604      	mov	r4, r0
   192ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
   192d0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   192d2:	2700      	movs	r7, #0
   192d4:	9705      	str	r7, [sp, #20]
   192d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
   192d8:	9704      	str	r7, [sp, #16]
   192da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   192dc:	9703      	str	r7, [sp, #12]
   192de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   192e0:	9702      	str	r7, [sp, #8]
   192e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   192e4:	9701      	str	r7, [sp, #4]
   192e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   192e8:	9700      	str	r7, [sp, #0]
   192ea:	f7fb fb27 	bl	1493c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   192ee:	f1b5 3fff 	cmp.w	r5, #4294967295
   192f2:	bf08      	it	eq
   192f4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   192f8:	d102      	bne.n	19300 <z_impl_k_thread_create+0x38>
}
   192fa:	4620      	mov	r0, r4
   192fc:	b007      	add	sp, #28
   192fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   19300:	4632      	mov	r2, r6
   19302:	462b      	mov	r3, r5
   19304:	4620      	mov	r0, r4
   19306:	f7fb fb0b 	bl	14920 <schedule_new_thread>
   1930a:	e7f6      	b.n	192fa <z_impl_k_thread_create+0x32>

0001930c <z_pm_save_idle_exit>:
{
   1930c:	b508      	push	{r3, lr}
	pm_system_resume();
   1930e:	f7f3 f989 	bl	c624 <pm_system_resume>
	sys_clock_idle_exit();
   19312:	f7ff f887 	bl	18424 <sys_clock_idle_exit>
}
   19316:	bd08      	pop	{r3, pc}

00019318 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   19318:	4288      	cmp	r0, r1
   1931a:	da00      	bge.n	1931e <new_prio_for_inheritance+0x6>
   1931c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1931e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   19322:	db01      	blt.n	19328 <new_prio_for_inheritance+0x10>
   19324:	4608      	mov	r0, r1
   19326:	4770      	bx	lr
   19328:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1932c:	4770      	bx	lr

0001932e <adjust_owner_prio>:
{
   1932e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   19330:	6880      	ldr	r0, [r0, #8]
   19332:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19336:	428b      	cmp	r3, r1
   19338:	d101      	bne.n	1933e <adjust_owner_prio+0x10>
	return false;
   1933a:	2000      	movs	r0, #0
}
   1933c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1933e:	f7fc f81d 	bl	1537c <z_set_prio>
   19342:	e7fb      	b.n	1933c <adjust_owner_prio+0xe>

00019344 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19344:	680b      	ldr	r3, [r1, #0]
   19346:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1934a:	600b      	str	r3, [r1, #0]
	return list->tail;
   1934c:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1934e:	b132      	cbz	r2, 1935e <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19350:	6813      	ldr	r3, [r2, #0]
   19352:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   19356:	430b      	orrs	r3, r1
   19358:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1935a:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1935c:	4770      	bx	lr
	list->tail = node;
   1935e:	6041      	str	r1, [r0, #4]
	list->head = node;
   19360:	6001      	str	r1, [r0, #0]
}
   19362:	4770      	bx	lr

00019364 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   19364:	b508      	push	{r3, lr}
   19366:	b191      	cbz	r1, 1938e <sys_sflist_insert+0x2a>
   19368:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1936a:	680b      	ldr	r3, [r1, #0]
   1936c:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   19370:	2b03      	cmp	r3, #3
   19372:	d918      	bls.n	193a6 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19374:	6813      	ldr	r3, [r2, #0]
   19376:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1937a:	430b      	orrs	r3, r1
   1937c:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1937e:	f8dc 3000 	ldr.w	r3, [ip]
   19382:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   19386:	4313      	orrs	r3, r2
   19388:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   1938c:	bd08      	pop	{r3, pc}
	return list->head;
   1938e:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19390:	6813      	ldr	r3, [r2, #0]
   19392:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   19396:	430b      	orrs	r3, r1
   19398:	6013      	str	r3, [r2, #0]
	list->head = node;
   1939a:	6002      	str	r2, [r0, #0]
	return list->tail;
   1939c:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1939e:	2b00      	cmp	r3, #0
   193a0:	d1f4      	bne.n	1938c <sys_sflist_insert+0x28>
	list->tail = node;
   193a2:	6042      	str	r2, [r0, #4]
}
   193a4:	e7f2      	b.n	1938c <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   193a6:	4611      	mov	r1, r2
   193a8:	f7ff ffcc 	bl	19344 <sys_sflist_append>
   193ac:	e7ee      	b.n	1938c <sys_sflist_insert+0x28>

000193ae <prepare_thread_to_run>:
{
   193ae:	b508      	push	{r3, lr}
   193b0:	2200      	movs	r2, #0
   193b2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   193b6:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   193b8:	f000 f98f 	bl	196da <z_ready_thread>
}
   193bc:	bd08      	pop	{r3, pc}

000193be <queue_insert>:
{
   193be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193c2:	4604      	mov	r4, r0
   193c4:	460e      	mov	r6, r1
   193c6:	4615      	mov	r5, r2
   193c8:	461f      	mov	r7, r3
   193ca:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   193ce:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   193d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   193d6:	f3ef 8911 	mrs	r9, BASEPRI
   193da:	f382 8812 	msr	BASEPRI_MAX, r2
   193de:	f3bf 8f6f 	isb	sy
   193e2:	46ca      	mov	sl, r9
	if (is_append) {
   193e4:	b103      	cbz	r3, 193e8 <queue_insert+0x2a>
	return list->tail;
   193e6:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   193e8:	4640      	mov	r0, r8
   193ea:	f000 fa2c 	bl	19846 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   193ee:	b998      	cbnz	r0, 19418 <queue_insert+0x5a>
	if (alloc) {
   193f0:	b9df      	cbnz	r7, 1942a <queue_insert+0x6c>
	node->next_and_flags = flags;
   193f2:	2300      	movs	r3, #0
   193f4:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   193f6:	462a      	mov	r2, r5
   193f8:	4631      	mov	r1, r6
   193fa:	4620      	mov	r0, r4
   193fc:	f7ff ffb2 	bl	19364 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   19400:	2104      	movs	r1, #4
   19402:	f104 0010 	add.w	r0, r4, #16
   19406:	f000 fcd5 	bl	19db4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1940a:	4649      	mov	r1, r9
   1940c:	4640      	mov	r0, r8
   1940e:	f7fb fe4b 	bl	150a8 <z_reschedule>
	return 0;
   19412:	2000      	movs	r0, #0
}
   19414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   19418:	4629      	mov	r1, r5
   1941a:	f7ff ffc8 	bl	193ae <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1941e:	4649      	mov	r1, r9
   19420:	4640      	mov	r0, r8
   19422:	f7fb fe41 	bl	150a8 <z_reschedule>
		return 0;
   19426:	2000      	movs	r0, #0
   19428:	e7f4      	b.n	19414 <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   1942a:	2108      	movs	r1, #8
   1942c:	2000      	movs	r0, #0
   1942e:	f7fc fc1d 	bl	15c6c <z_thread_aligned_alloc>
		if (anode == NULL) {
   19432:	b120      	cbz	r0, 1943e <queue_insert+0x80>
		anode->data = data;
   19434:	6045      	str	r5, [r0, #4]
   19436:	2201      	movs	r2, #1
   19438:	6002      	str	r2, [r0, #0]
		data = anode;
   1943a:	4605      	mov	r5, r0
   1943c:	e7db      	b.n	193f6 <queue_insert+0x38>
	__asm__ volatile(
   1943e:	f38a 8811 	msr	BASEPRI, sl
   19442:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   19446:	f06f 000b 	mvn.w	r0, #11
   1944a:	e7e3      	b.n	19414 <queue_insert+0x56>

0001944c <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1944c:	b160      	cbz	r0, 19468 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1944e:	6803      	ldr	r3, [r0, #0]
   19450:	f013 0f03 	tst.w	r3, #3
   19454:	d008      	beq.n	19468 <z_queue_node_peek+0x1c>
{
   19456:	b510      	push	{r4, lr}
		ret = anode->data;
   19458:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1945a:	b909      	cbnz	r1, 19460 <z_queue_node_peek+0x14>
		ret = anode->data;
   1945c:	4620      	mov	r0, r4
}
   1945e:	bd10      	pop	{r4, pc}
			k_free(anode);
   19460:	f000 fcd0 	bl	19e04 <k_free>
		ret = anode->data;
   19464:	4620      	mov	r0, r4
   19466:	e7fa      	b.n	1945e <z_queue_node_peek+0x12>
}
   19468:	4770      	bx	lr

0001946a <z_impl_k_queue_init>:
	list->head = NULL;
   1946a:	2300      	movs	r3, #0
   1946c:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   1946e:	6043      	str	r3, [r0, #4]
   19470:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   19474:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   19476:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   19478:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1947c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1947e:	6143      	str	r3, [r0, #20]
}
   19480:	4770      	bx	lr

00019482 <k_queue_append>:
{
   19482:	b500      	push	{lr}
   19484:	b083      	sub	sp, #12
   19486:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   19488:	2301      	movs	r3, #1
   1948a:	9300      	str	r3, [sp, #0]
   1948c:	2300      	movs	r3, #0
   1948e:	4619      	mov	r1, r3
   19490:	f7ff ff95 	bl	193be <queue_insert>
}
   19494:	b003      	add	sp, #12
   19496:	f85d fb04 	ldr.w	pc, [sp], #4

0001949a <k_queue_prepend>:
{
   1949a:	b500      	push	{lr}
   1949c:	b083      	sub	sp, #12
   1949e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   194a0:	2100      	movs	r1, #0
   194a2:	9100      	str	r1, [sp, #0]
   194a4:	460b      	mov	r3, r1
   194a6:	f7ff ff8a 	bl	193be <queue_insert>
}
   194aa:	b003      	add	sp, #12
   194ac:	f85d fb04 	ldr.w	pc, [sp], #4

000194b0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   194b0:	b15a      	cbz	r2, 194ca <z_impl_k_sem_init+0x1a>
   194b2:	428a      	cmp	r2, r1
   194b4:	d30c      	bcc.n	194d0 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   194b6:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   194b8:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   194ba:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   194bc:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   194be:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   194c2:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   194c4:	6143      	str	r3, [r0, #20]
	return 0;
   194c6:	2000      	movs	r0, #0
   194c8:	4770      	bx	lr
		return -EINVAL;
   194ca:	f06f 0015 	mvn.w	r0, #21
   194ce:	4770      	bx	lr
   194d0:	f06f 0015 	mvn.w	r0, #21
}
   194d4:	4770      	bx	lr

000194d6 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   194d6:	460b      	mov	r3, r1
   194d8:	b139      	cbz	r1, 194ea <sys_slist_remove+0x14>
	return node->next;
   194da:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   194dc:	6019      	str	r1, [r3, #0]
	return list->tail;
   194de:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   194e0:	428a      	cmp	r2, r1
   194e2:	d009      	beq.n	194f8 <sys_slist_remove+0x22>
	parent->next = child;
   194e4:	2300      	movs	r3, #0
   194e6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   194e8:	4770      	bx	lr
	return node->next;
   194ea:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   194ec:	6003      	str	r3, [r0, #0]
	return list->tail;
   194ee:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   194f0:	428a      	cmp	r2, r1
   194f2:	d1f7      	bne.n	194e4 <sys_slist_remove+0xe>
	list->tail = node;
   194f4:	6043      	str	r3, [r0, #4]
}
   194f6:	e7f5      	b.n	194e4 <sys_slist_remove+0xe>
	list->tail = node;
   194f8:	6043      	str	r3, [r0, #4]
}
   194fa:	e7f3      	b.n	194e4 <sys_slist_remove+0xe>

000194fc <notify_queue_locked>:
	if (queue != NULL) {
   194fc:	b130      	cbz	r0, 1950c <notify_queue_locked+0x10>
{
   194fe:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   19500:	2200      	movs	r2, #0
   19502:	4611      	mov	r1, r2
   19504:	30c0      	adds	r0, #192	; 0xc0
   19506:	f000 f9d4 	bl	198b2 <z_sched_wake>
}
   1950a:	bd08      	pop	{r3, pc}
	bool rv = false;
   1950c:	2000      	movs	r0, #0
}
   1950e:	4770      	bx	lr

00019510 <submit_to_queue_locked>:
{
   19510:	b570      	push	{r4, r5, r6, lr}
   19512:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   19514:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19516:	f013 0f02 	tst.w	r3, #2
   1951a:	d122      	bne.n	19562 <submit_to_queue_locked+0x52>
   1951c:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1951e:	f013 0f04 	tst.w	r3, #4
   19522:	d123      	bne.n	1956c <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   19524:	680b      	ldr	r3, [r1, #0]
   19526:	b1ab      	cbz	r3, 19554 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   19528:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1952a:	f013 0f01 	tst.w	r3, #1
   1952e:	d014      	beq.n	1955a <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   19530:	68a3      	ldr	r3, [r4, #8]
   19532:	602b      	str	r3, [r5, #0]
			ret = 2;
   19534:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   19536:	4621      	mov	r1, r4
   19538:	6828      	ldr	r0, [r5, #0]
   1953a:	f7fb fc1b 	bl	14d74 <queue_submit_locked>
		if (rc < 0) {
   1953e:	2800      	cmp	r0, #0
   19540:	db11      	blt.n	19566 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   19542:	68e3      	ldr	r3, [r4, #12]
   19544:	f043 0304 	orr.w	r3, r3, #4
   19548:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1954a:	682b      	ldr	r3, [r5, #0]
   1954c:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   1954e:	b136      	cbz	r6, 1955e <submit_to_queue_locked+0x4e>
   19550:	4630      	mov	r0, r6
	return ret;
   19552:	e00a      	b.n	1956a <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   19554:	6883      	ldr	r3, [r0, #8]
   19556:	600b      	str	r3, [r1, #0]
   19558:	e7e6      	b.n	19528 <submit_to_queue_locked+0x18>
		ret = 1;
   1955a:	2601      	movs	r6, #1
   1955c:	e7eb      	b.n	19536 <submit_to_queue_locked+0x26>
   1955e:	4630      	mov	r0, r6
   19560:	e001      	b.n	19566 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   19562:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   19566:	2300      	movs	r3, #0
   19568:	602b      	str	r3, [r5, #0]
}
   1956a:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1956c:	2000      	movs	r0, #0
   1956e:	e7fa      	b.n	19566 <submit_to_queue_locked+0x56>

00019570 <z_reschedule_unlocked>:
{
   19570:	b508      	push	{r3, lr}
	__asm__ volatile(
   19572:	f04f 0340 	mov.w	r3, #64	; 0x40
   19576:	f3ef 8011 	mrs	r0, BASEPRI
   1957a:	f383 8812 	msr	BASEPRI_MAX, r3
   1957e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   19582:	f000 f855 	bl	19630 <z_reschedule_irqlock>
}
   19586:	bd08      	pop	{r3, pc}

00019588 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   19588:	2300      	movs	r3, #0
   1958a:	6003      	str	r3, [r0, #0]
   1958c:	6043      	str	r3, [r0, #4]
   1958e:	6083      	str	r3, [r0, #8]
   19590:	60c3      	str	r3, [r0, #12]
   19592:	6041      	str	r1, [r0, #4]
}
   19594:	4770      	bx	lr

00019596 <z_work_submit_to_queue>:
{
   19596:	b510      	push	{r4, lr}
   19598:	b082      	sub	sp, #8
   1959a:	9001      	str	r0, [sp, #4]
   1959c:	4608      	mov	r0, r1
   1959e:	f04f 0340 	mov.w	r3, #64	; 0x40
   195a2:	f3ef 8411 	mrs	r4, BASEPRI
   195a6:	f383 8812 	msr	BASEPRI_MAX, r3
   195aa:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   195ae:	a901      	add	r1, sp, #4
   195b0:	f7ff ffae 	bl	19510 <submit_to_queue_locked>
	__asm__ volatile(
   195b4:	f384 8811 	msr	BASEPRI, r4
   195b8:	f3bf 8f6f 	isb	sy
}
   195bc:	b002      	add	sp, #8
   195be:	bd10      	pop	{r4, pc}

000195c0 <k_work_submit_to_queue>:
{
   195c0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   195c2:	f7ff ffe8 	bl	19596 <z_work_submit_to_queue>
	if (ret > 0) {
   195c6:	1e04      	subs	r4, r0, #0
   195c8:	dc01      	bgt.n	195ce <k_work_submit_to_queue+0xe>
}
   195ca:	4620      	mov	r0, r4
   195cc:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   195ce:	f7ff ffcf 	bl	19570 <z_reschedule_unlocked>
	return ret;
   195d2:	e7fa      	b.n	195ca <k_work_submit_to_queue+0xa>

000195d4 <k_work_queue_init>:
{
   195d4:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   195d6:	22d8      	movs	r2, #216	; 0xd8
   195d8:	2100      	movs	r1, #0
   195da:	f7fe f845 	bl	17668 <memset>
}
   195de:	bd08      	pop	{r3, pc}

000195e0 <thread_active_elsewhere>:
}
   195e0:	2000      	movs	r0, #0
   195e2:	4770      	bx	lr

000195e4 <pended_on_thread>:
}
   195e4:	6880      	ldr	r0, [r0, #8]
   195e6:	4770      	bx	lr

000195e8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   195e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   195ec:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   195f0:	4283      	cmp	r3, r0
   195f2:	d001      	beq.n	195f8 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   195f4:	1ac0      	subs	r0, r0, r3
   195f6:	4770      	bx	lr
	return 0;
   195f8:	2000      	movs	r0, #0
}
   195fa:	4770      	bx	lr

000195fc <z_unpend_thread_no_timeout>:
{
   195fc:	b538      	push	{r3, r4, r5, lr}
   195fe:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   19600:	2300      	movs	r3, #0
	__asm__ volatile(
   19602:	f04f 0240 	mov.w	r2, #64	; 0x40
   19606:	f3ef 8511 	mrs	r5, BASEPRI
   1960a:	f382 8812 	msr	BASEPRI_MAX, r2
   1960e:	f3bf 8f6f 	isb	sy
   19612:	e004      	b.n	1961e <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   19614:	f385 8811 	msr	BASEPRI, r5
   19618:	f3bf 8f6f 	isb	sy
   1961c:	2301      	movs	r3, #1
   1961e:	b933      	cbnz	r3, 1962e <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   19620:	68a3      	ldr	r3, [r4, #8]
   19622:	2b00      	cmp	r3, #0
   19624:	d0f6      	beq.n	19614 <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   19626:	4620      	mov	r0, r4
   19628:	f000 f824 	bl	19674 <unpend_thread_no_timeout>
   1962c:	e7f2      	b.n	19614 <z_unpend_thread_no_timeout+0x18>
}
   1962e:	bd38      	pop	{r3, r4, r5, pc}

00019630 <z_reschedule_irqlock>:
{
   19630:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19632:	4603      	mov	r3, r0
   19634:	b928      	cbnz	r0, 19642 <z_reschedule_irqlock+0x12>
   19636:	f3ef 8205 	mrs	r2, IPSR
   1963a:	b912      	cbnz	r2, 19642 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1963c:	f7f3 fab4 	bl	cba8 <arch_swap>
	return ret;
   19640:	e003      	b.n	1964a <z_reschedule_irqlock+0x1a>
   19642:	f383 8811 	msr	BASEPRI, r3
   19646:	f3bf 8f6f 	isb	sy
}
   1964a:	bd08      	pop	{r3, pc}

0001964c <z_reschedule_unlocked>:
{
   1964c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1964e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19652:	f3ef 8011 	mrs	r0, BASEPRI
   19656:	f383 8812 	msr	BASEPRI_MAX, r3
   1965a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1965e:	f7ff ffe7 	bl	19630 <z_reschedule_irqlock>
}
   19662:	bd08      	pop	{r3, pc}

00019664 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   19664:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   19666:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   19668:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1966a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1966c:	2300      	movs	r3, #0
   1966e:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   19670:	604b      	str	r3, [r1, #4]
}
   19672:	4770      	bx	lr

00019674 <unpend_thread_no_timeout>:
{
   19674:	b510      	push	{r4, lr}
   19676:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   19678:	f7ff ffb4 	bl	195e4 <pended_on_thread>
   1967c:	4621      	mov	r1, r4
   1967e:	f7ff fff1 	bl	19664 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19682:	7b63      	ldrb	r3, [r4, #13]
   19684:	f023 0302 	bic.w	r3, r3, #2
   19688:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1968a:	2300      	movs	r3, #0
   1968c:	60a3      	str	r3, [r4, #8]
}
   1968e:	bd10      	pop	{r4, pc}

00019690 <z_unpend_thread>:
{
   19690:	b538      	push	{r3, r4, r5, lr}
   19692:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   19694:	2300      	movs	r3, #0
   19696:	f04f 0240 	mov.w	r2, #64	; 0x40
   1969a:	f3ef 8511 	mrs	r5, BASEPRI
   1969e:	f382 8812 	msr	BASEPRI_MAX, r2
   196a2:	f3bf 8f6f 	isb	sy
   196a6:	e004      	b.n	196b2 <z_unpend_thread+0x22>
	__asm__ volatile(
   196a8:	f385 8811 	msr	BASEPRI, r5
   196ac:	f3bf 8f6f 	isb	sy
   196b0:	2301      	movs	r3, #1
   196b2:	b933      	cbnz	r3, 196c2 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   196b4:	68a3      	ldr	r3, [r4, #8]
   196b6:	2b00      	cmp	r3, #0
   196b8:	d0f6      	beq.n	196a8 <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   196ba:	4620      	mov	r0, r4
   196bc:	f7ff ffda 	bl	19674 <unpend_thread_no_timeout>
   196c0:	e7f2      	b.n	196a8 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   196c2:	f104 0018 	add.w	r0, r4, #24
   196c6:	f000 f956 	bl	19976 <z_abort_timeout>
}
   196ca:	bd38      	pop	{r3, r4, r5, pc}

000196cc <z_priq_dumb_best>:
{
   196cc:	4603      	mov	r3, r0
	return list->head == list;
   196ce:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   196d0:	4283      	cmp	r3, r0
   196d2:	d000      	beq.n	196d6 <z_priq_dumb_best+0xa>
}
   196d4:	4770      	bx	lr
	struct k_thread *thread = NULL;
   196d6:	2000      	movs	r0, #0
	return thread;
   196d8:	e7fc      	b.n	196d4 <z_priq_dumb_best+0x8>

000196da <z_ready_thread>:
{
   196da:	b538      	push	{r3, r4, r5, lr}
   196dc:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   196de:	2300      	movs	r3, #0
	__asm__ volatile(
   196e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   196e4:	f3ef 8511 	mrs	r5, BASEPRI
   196e8:	f382 8812 	msr	BASEPRI_MAX, r2
   196ec:	f3bf 8f6f 	isb	sy
   196f0:	e004      	b.n	196fc <z_ready_thread+0x22>
	__asm__ volatile(
   196f2:	f385 8811 	msr	BASEPRI, r5
   196f6:	f3bf 8f6f 	isb	sy
   196fa:	2301      	movs	r3, #1
   196fc:	b943      	cbnz	r3, 19710 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   196fe:	4620      	mov	r0, r4
   19700:	f7ff ff6e 	bl	195e0 <thread_active_elsewhere>
   19704:	2800      	cmp	r0, #0
   19706:	d1f4      	bne.n	196f2 <z_ready_thread+0x18>
			ready_thread(thread);
   19708:	4620      	mov	r0, r4
   1970a:	f7fb fda5 	bl	15258 <ready_thread>
   1970e:	e7f0      	b.n	196f2 <z_ready_thread+0x18>
}
   19710:	bd38      	pop	{r3, r4, r5, pc}

00019712 <z_sched_wake_thread>:
{
   19712:	b570      	push	{r4, r5, r6, lr}
   19714:	4604      	mov	r4, r0
   19716:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   19718:	2300      	movs	r3, #0
	__asm__ volatile(
   1971a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1971e:	f3ef 8511 	mrs	r5, BASEPRI
   19722:	f382 8812 	msr	BASEPRI_MAX, r2
   19726:	f3bf 8f6f 	isb	sy
   1972a:	e007      	b.n	1973c <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   1972c:	4620      	mov	r0, r4
   1972e:	f7fb fd93 	bl	15258 <ready_thread>
	__asm__ volatile(
   19732:	f385 8811 	msr	BASEPRI, r5
   19736:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1973a:	2301      	movs	r3, #1
   1973c:	b993      	cbnz	r3, 19764 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1973e:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   19740:	f013 0f28 	tst.w	r3, #40	; 0x28
   19744:	d1f5      	bne.n	19732 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   19746:	68a3      	ldr	r3, [r4, #8]
   19748:	b113      	cbz	r3, 19750 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   1974a:	4620      	mov	r0, r4
   1974c:	f7ff ff92 	bl	19674 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19750:	7b63      	ldrb	r3, [r4, #13]
   19752:	f023 0204 	bic.w	r2, r3, #4
   19756:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   19758:	2e00      	cmp	r6, #0
   1975a:	d0e7      	beq.n	1972c <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1975c:	f023 0314 	bic.w	r3, r3, #20
   19760:	7363      	strb	r3, [r4, #13]
}
   19762:	e7e3      	b.n	1972c <z_sched_wake_thread+0x1a>
}
   19764:	bd70      	pop	{r4, r5, r6, pc}

00019766 <z_thread_timeout>:
{
   19766:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   19768:	2101      	movs	r1, #1
   1976a:	3818      	subs	r0, #24
   1976c:	f7ff ffd1 	bl	19712 <z_sched_wake_thread>
}
   19770:	bd08      	pop	{r3, pc}

00019772 <unpend_all>:
{
   19772:	b538      	push	{r3, r4, r5, lr}
   19774:	4605      	mov	r5, r0
	return list->head == list;
   19776:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19778:	42a5      	cmp	r5, r4
   1977a:	d00e      	beq.n	1979a <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1977c:	b16c      	cbz	r4, 1979a <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   1977e:	4620      	mov	r0, r4
   19780:	f7ff ff78 	bl	19674 <unpend_thread_no_timeout>
   19784:	f104 0018 	add.w	r0, r4, #24
   19788:	f000 f8f5 	bl	19976 <z_abort_timeout>
   1978c:	2300      	movs	r3, #0
   1978e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   19792:	4620      	mov	r0, r4
   19794:	f7fb fd60 	bl	15258 <ready_thread>
   19798:	e7ed      	b.n	19776 <unpend_all+0x4>
}
   1979a:	bd38      	pop	{r3, r4, r5, pc}

0001979c <add_to_waitq_locked>:
{
   1979c:	b570      	push	{r4, r5, r6, lr}
   1979e:	4605      	mov	r5, r0
   197a0:	460e      	mov	r6, r1
	unready_thread(thread);
   197a2:	f7fb fdb3 	bl	1530c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   197a6:	7b6b      	ldrb	r3, [r5, #13]
   197a8:	f043 0302 	orr.w	r3, r3, #2
   197ac:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   197ae:	b1fe      	cbz	r6, 197f0 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   197b0:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   197b2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   197b4:	42a6      	cmp	r6, r4
   197b6:	d108      	bne.n	197ca <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   197b8:	2400      	movs	r4, #0
   197ba:	e006      	b.n	197ca <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   197bc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   197be:	606b      	str	r3, [r5, #4]
	node->next = successor;
   197c0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   197c2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   197c4:	6065      	str	r5, [r4, #4]
}
   197c6:	e013      	b.n	197f0 <add_to_waitq_locked+0x54>
   197c8:	2400      	movs	r4, #0
   197ca:	b164      	cbz	r4, 197e6 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   197cc:	4621      	mov	r1, r4
   197ce:	4628      	mov	r0, r5
   197d0:	f7ff ff0a 	bl	195e8 <z_sched_prio_cmp>
   197d4:	2800      	cmp	r0, #0
   197d6:	dcf1      	bgt.n	197bc <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   197d8:	2c00      	cmp	r4, #0
   197da:	d0f6      	beq.n	197ca <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   197dc:	6873      	ldr	r3, [r6, #4]
   197de:	429c      	cmp	r4, r3
   197e0:	d0f2      	beq.n	197c8 <add_to_waitq_locked+0x2c>
   197e2:	6824      	ldr	r4, [r4, #0]
   197e4:	e7f1      	b.n	197ca <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   197e6:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   197e8:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   197ea:	606b      	str	r3, [r5, #4]
	tail->next = node;
   197ec:	601d      	str	r5, [r3, #0]
	list->tail = node;
   197ee:	6075      	str	r5, [r6, #4]
}
   197f0:	bd70      	pop	{r4, r5, r6, pc}

000197f2 <pend_locked>:
{
   197f2:	b570      	push	{r4, r5, r6, lr}
   197f4:	4604      	mov	r4, r0
   197f6:	4616      	mov	r6, r2
   197f8:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   197fa:	f7ff ffcf 	bl	1979c <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   197fe:	4632      	mov	r2, r6
   19800:	462b      	mov	r3, r5
   19802:	4620      	mov	r0, r4
   19804:	f7fb fc18 	bl	15038 <add_thread_timeout>
}
   19808:	bd70      	pop	{r4, r5, r6, pc}

0001980a <z_unpend1_no_timeout>:
{
   1980a:	b570      	push	{r4, r5, r6, lr}
   1980c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1980e:	2300      	movs	r3, #0
	__asm__ volatile(
   19810:	f04f 0240 	mov.w	r2, #64	; 0x40
   19814:	f3ef 8511 	mrs	r5, BASEPRI
   19818:	f382 8812 	msr	BASEPRI_MAX, r2
   1981c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   19820:	461c      	mov	r4, r3
   19822:	e004      	b.n	1982e <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   19824:	f385 8811 	msr	BASEPRI, r5
   19828:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1982c:	2301      	movs	r3, #1
   1982e:	b943      	cbnz	r3, 19842 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   19830:	4630      	mov	r0, r6
   19832:	f7ff ff4b 	bl	196cc <z_priq_dumb_best>
		if (thread != NULL) {
   19836:	4604      	mov	r4, r0
   19838:	2800      	cmp	r0, #0
   1983a:	d0f3      	beq.n	19824 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1983c:	f7ff ff1a 	bl	19674 <unpend_thread_no_timeout>
   19840:	e7f0      	b.n	19824 <z_unpend1_no_timeout+0x1a>
}
   19842:	4620      	mov	r0, r4
   19844:	bd70      	pop	{r4, r5, r6, pc}

00019846 <z_unpend_first_thread>:
{
   19846:	b570      	push	{r4, r5, r6, lr}
   19848:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1984a:	2300      	movs	r3, #0
	__asm__ volatile(
   1984c:	f04f 0240 	mov.w	r2, #64	; 0x40
   19850:	f3ef 8511 	mrs	r5, BASEPRI
   19854:	f382 8812 	msr	BASEPRI_MAX, r2
   19858:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1985c:	461c      	mov	r4, r3
   1985e:	e004      	b.n	1986a <z_unpend_first_thread+0x24>
	__asm__ volatile(
   19860:	f385 8811 	msr	BASEPRI, r5
   19864:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19868:	2301      	movs	r3, #1
   1986a:	b963      	cbnz	r3, 19886 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   1986c:	4630      	mov	r0, r6
   1986e:	f7ff ff2d 	bl	196cc <z_priq_dumb_best>
		if (thread != NULL) {
   19872:	4604      	mov	r4, r0
   19874:	2800      	cmp	r0, #0
   19876:	d0f3      	beq.n	19860 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   19878:	f7ff fefc 	bl	19674 <unpend_thread_no_timeout>
   1987c:	f104 0018 	add.w	r0, r4, #24
   19880:	f000 f879 	bl	19976 <z_abort_timeout>
   19884:	e7ec      	b.n	19860 <z_unpend_first_thread+0x1a>
}
   19886:	4620      	mov	r0, r4
   19888:	bd70      	pop	{r4, r5, r6, pc}

0001988a <z_unpend_all>:
{
   1988a:	b538      	push	{r3, r4, r5, lr}
   1988c:	4605      	mov	r5, r0
	int need_sched = 0;
   1988e:	2000      	movs	r0, #0
	return list->head == list;
   19890:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19892:	42a5      	cmp	r5, r4
   19894:	d008      	beq.n	198a8 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   19896:	b13c      	cbz	r4, 198a8 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   19898:	4620      	mov	r0, r4
   1989a:	f7ff fef9 	bl	19690 <z_unpend_thread>
		z_ready_thread(thread);
   1989e:	4620      	mov	r0, r4
   198a0:	f7ff ff1b 	bl	196da <z_ready_thread>
		need_sched = 1;
   198a4:	2001      	movs	r0, #1
   198a6:	e7f3      	b.n	19890 <z_unpend_all+0x6>
}
   198a8:	bd38      	pop	{r3, r4, r5, pc}

000198aa <init_ready_q>:
	sys_dlist_init(&rq->runq);
   198aa:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   198ac:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   198ae:	6083      	str	r3, [r0, #8]
}
   198b0:	4770      	bx	lr

000198b2 <z_sched_wake>:
{
   198b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   198b6:	4606      	mov	r6, r0
   198b8:	4688      	mov	r8, r1
   198ba:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   198bc:	2300      	movs	r3, #0
	__asm__ volatile(
   198be:	f04f 0240 	mov.w	r2, #64	; 0x40
   198c2:	f3ef 8511 	mrs	r5, BASEPRI
   198c6:	f382 8812 	msr	BASEPRI_MAX, r2
   198ca:	f3bf 8f6f 	isb	sy
	bool ret = false;
   198ce:	4699      	mov	r9, r3
   198d0:	e004      	b.n	198dc <z_sched_wake+0x2a>
	__asm__ volatile(
   198d2:	f385 8811 	msr	BASEPRI, r5
   198d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   198da:	2301      	movs	r3, #1
   198dc:	b9a3      	cbnz	r3, 19908 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   198de:	4630      	mov	r0, r6
   198e0:	f7ff fef4 	bl	196cc <z_priq_dumb_best>
		if (thread != NULL) {
   198e4:	4604      	mov	r4, r0
   198e6:	2800      	cmp	r0, #0
   198e8:	d0f3      	beq.n	198d2 <z_sched_wake+0x20>
   198ea:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   198ee:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   198f0:	f7ff fec0 	bl	19674 <unpend_thread_no_timeout>
   198f4:	f104 0018 	add.w	r0, r4, #24
   198f8:	f000 f83d 	bl	19976 <z_abort_timeout>
			ready_thread(thread);
   198fc:	4620      	mov	r0, r4
   198fe:	f7fb fcab 	bl	15258 <ready_thread>
			ret = true;
   19902:	f04f 0901 	mov.w	r9, #1
   19906:	e7e4      	b.n	198d2 <z_sched_wake+0x20>
}
   19908:	4648      	mov	r0, r9
   1990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001990e <remove_timeout>:
{
   1990e:	b510      	push	{r4, lr}
   19910:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   19912:	f7fb ff57 	bl	157c4 <next>
   19916:	b148      	cbz	r0, 1992c <remove_timeout+0x1e>
   19918:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1991a:	6903      	ldr	r3, [r0, #16]
   1991c:	6941      	ldr	r1, [r0, #20]
   1991e:	6920      	ldr	r0, [r4, #16]
   19920:	181b      	adds	r3, r3, r0
   19922:	6960      	ldr	r0, [r4, #20]
   19924:	eb41 0100 	adc.w	r1, r1, r0
   19928:	6113      	str	r3, [r2, #16]
   1992a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1992c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1992e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   19930:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19932:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19934:	2300      	movs	r3, #0
   19936:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   19938:	6063      	str	r3, [r4, #4]
}
   1993a:	bd10      	pop	{r4, pc}

0001993c <next_timeout>:
{
   1993c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1993e:	f7fb ff37 	bl	157b0 <first>
   19942:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   19944:	f7fb ff4a 	bl	157dc <elapsed>
	if ((to == NULL) ||
   19948:	b17c      	cbz	r4, 1996a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1994a:	6923      	ldr	r3, [r4, #16]
   1994c:	6962      	ldr	r2, [r4, #20]
   1994e:	1a1b      	subs	r3, r3, r0
   19950:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   19954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   19958:	f172 0100 	sbcs.w	r1, r2, #0
   1995c:	da08      	bge.n	19970 <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1995e:	2a00      	cmp	r2, #0
   19960:	db01      	blt.n	19966 <next_timeout+0x2a>
   19962:	4618      	mov	r0, r3
}
   19964:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   19966:	2300      	movs	r3, #0
   19968:	e7fb      	b.n	19962 <next_timeout+0x26>
		ret = MAX_WAIT;
   1996a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1996e:	e7f9      	b.n	19964 <next_timeout+0x28>
   19970:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   19974:	e7f6      	b.n	19964 <next_timeout+0x28>

00019976 <z_abort_timeout>:
{
   19976:	b570      	push	{r4, r5, r6, lr}
   19978:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1997a:	2300      	movs	r3, #0
	__asm__ volatile(
   1997c:	f04f 0240 	mov.w	r2, #64	; 0x40
   19980:	f3ef 8611 	mrs	r6, BASEPRI
   19984:	f382 8812 	msr	BASEPRI_MAX, r2
   19988:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1998c:	f06f 0015 	mvn.w	r0, #21
   19990:	e004      	b.n	1999c <z_abort_timeout+0x26>
	__asm__ volatile(
   19992:	f386 8811 	msr	BASEPRI, r6
   19996:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1999a:	2301      	movs	r3, #1
   1999c:	461d      	mov	r5, r3
   1999e:	b93b      	cbnz	r3, 199b0 <z_abort_timeout+0x3a>
	return node->next != NULL;
   199a0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   199a2:	2b00      	cmp	r3, #0
   199a4:	d0f5      	beq.n	19992 <z_abort_timeout+0x1c>
			remove_timeout(to);
   199a6:	4620      	mov	r0, r4
   199a8:	f7ff ffb1 	bl	1990e <remove_timeout>
			ret = 0;
   199ac:	4628      	mov	r0, r5
   199ae:	e7f0      	b.n	19992 <z_abort_timeout+0x1c>
}
   199b0:	bd70      	pop	{r4, r5, r6, pc}

000199b2 <z_get_next_timeout_expiry>:
{
   199b2:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   199b4:	2300      	movs	r3, #0
	__asm__ volatile(
   199b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   199ba:	f3ef 8411 	mrs	r4, BASEPRI
   199be:	f382 8812 	msr	BASEPRI_MAX, r2
   199c2:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   199c6:	f04f 30ff 	mov.w	r0, #4294967295
   199ca:	e006      	b.n	199da <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   199cc:	f7ff ffb6 	bl	1993c <next_timeout>
	__asm__ volatile(
   199d0:	f384 8811 	msr	BASEPRI, r4
   199d4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   199d8:	2301      	movs	r3, #1
   199da:	2b00      	cmp	r3, #0
   199dc:	d0f6      	beq.n	199cc <z_get_next_timeout_expiry+0x1a>
}
   199de:	bd10      	pop	{r4, pc}

000199e0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   199e0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   199e2:	f7fb ffeb 	bl	159bc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   199e6:	bd08      	pop	{r3, pc}

000199e8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   199e8:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   199ea:	f7fb ffe7 	bl	159bc <sys_clock_tick_get>
}
   199ee:	bd08      	pop	{r3, pc}

000199f0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   199f0:	b900      	cbnz	r0, 199f4 <z_impl_k_busy_wait+0x4>
   199f2:	4770      	bx	lr
{
   199f4:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   199f6:	f7f4 fd8f 	bl	e518 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   199fa:	bd08      	pop	{r3, pc}

000199fc <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   199fc:	b538      	push	{r3, r4, r5, lr}
   199fe:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19a00:	f1b1 3fff 	cmp.w	r1, #4294967295
   19a04:	bf08      	it	eq
   19a06:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   19a0a:	d020      	beq.n	19a4e <sys_clock_timeout_end_calc+0x52>
   19a0c:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19a0e:	ea51 0300 	orrs.w	r3, r1, r0
   19a12:	d009      	beq.n	19a28 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   19a14:	f06f 0301 	mvn.w	r3, #1
   19a18:	1a18      	subs	r0, r3, r0
   19a1a:	f04f 33ff 	mov.w	r3, #4294967295
   19a1e:	eb63 0101 	sbc.w	r1, r3, r1
   19a22:	2900      	cmp	r1, #0
   19a24:	db03      	blt.n	19a2e <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   19a26:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   19a28:	f7fb ffc8 	bl	159bc <sys_clock_tick_get>
   19a2c:	e7fb      	b.n	19a26 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   19a2e:	f7fb ffc5 	bl	159bc <sys_clock_tick_get>
   19a32:	4603      	mov	r3, r0
   19a34:	462a      	mov	r2, r5
   19a36:	46a4      	mov	ip, r4
   19a38:	2d01      	cmp	r5, #1
   19a3a:	f174 0400 	sbcs.w	r4, r4, #0
   19a3e:	da02      	bge.n	19a46 <sys_clock_timeout_end_calc+0x4a>
   19a40:	2201      	movs	r2, #1
   19a42:	f04f 0c00 	mov.w	ip, #0
   19a46:	1898      	adds	r0, r3, r2
   19a48:	eb41 010c 	adc.w	r1, r1, ip
   19a4c:	e7eb      	b.n	19a26 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   19a4e:	f04f 30ff 	mov.w	r0, #4294967295
   19a52:	4601      	mov	r1, r0
   19a54:	e7e7      	b.n	19a26 <sys_clock_timeout_end_calc+0x2a>

00019a56 <z_reschedule_unlocked>:
{
   19a56:	b508      	push	{r3, lr}
	__asm__ volatile(
   19a58:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a5c:	f3ef 8011 	mrs	r0, BASEPRI
   19a60:	f383 8812 	msr	BASEPRI_MAX, r3
   19a64:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   19a68:	f7ff fde2 	bl	19630 <z_reschedule_irqlock>
}
   19a6c:	bd08      	pop	{r3, pc}

00019a6e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   19a6e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   19a70:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   19a72:	2300      	movs	r3, #0
   19a74:	6303      	str	r3, [r0, #48]	; 0x30
   19a76:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   19a7a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   19a7c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   19a7e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   19a80:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   19a82:	6343      	str	r3, [r0, #52]	; 0x34
}
   19a84:	4770      	bx	lr

00019a86 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   19a86:	b510      	push	{r4, lr}
   19a88:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   19a8a:	f7ff ff74 	bl	19976 <z_abort_timeout>

	if (inactive) {
   19a8e:	b960      	cbnz	r0, 19aaa <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   19a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a92:	b10b      	cbz	r3, 19a98 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   19a94:	4620      	mov	r0, r4
   19a96:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   19a98:	f104 0018 	add.w	r0, r4, #24
   19a9c:	f7ff feb5 	bl	1980a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   19aa0:	b118      	cbz	r0, 19aaa <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   19aa2:	f7ff fe1a 	bl	196da <z_ready_thread>
			z_reschedule_unlocked();
   19aa6:	f7ff ffd6 	bl	19a56 <z_reschedule_unlocked>
		}
	}
}
   19aaa:	bd10      	pop	{r4, pc}

00019aac <is_condition_met>:
	switch (event->type) {
   19aac:	7b43      	ldrb	r3, [r0, #13]
   19aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19ab2:	3b01      	subs	r3, #1
   19ab4:	2b07      	cmp	r3, #7
   19ab6:	d826      	bhi.n	19b06 <is_condition_met+0x5a>
   19ab8:	e8df f003 	tbb	[pc, r3]
   19abc:	0d250414 	.word	0x0d250414
   19ac0:	1c252525 	.word	0x1c252525
		if (k_sem_count_get(event->sem) > 0U) {
   19ac4:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   19ac6:	689b      	ldr	r3, [r3, #8]
   19ac8:	b90b      	cbnz	r3, 19ace <is_condition_met+0x22>
	return false;
   19aca:	2000      	movs	r0, #0
   19acc:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19ace:	2302      	movs	r3, #2
   19ad0:	600b      	str	r3, [r1, #0]
			return true;
   19ad2:	2001      	movs	r0, #1
   19ad4:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   19ad6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   19ad8:	681b      	ldr	r3, [r3, #0]
   19ada:	b1b3      	cbz	r3, 19b0a <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   19adc:	2304      	movs	r3, #4
   19ade:	600b      	str	r3, [r1, #0]
			return true;
   19ae0:	2001      	movs	r0, #1
   19ae2:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   19ae4:	6903      	ldr	r3, [r0, #16]
   19ae6:	689b      	ldr	r3, [r3, #8]
   19ae8:	b90b      	cbnz	r3, 19aee <is_condition_met+0x42>
	return false;
   19aea:	2000      	movs	r0, #0
   19aec:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   19aee:	2001      	movs	r0, #1
   19af0:	6008      	str	r0, [r1, #0]
			return true;
   19af2:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   19af4:	6903      	ldr	r3, [r0, #16]
   19af6:	6a1b      	ldr	r3, [r3, #32]
   19af8:	b90b      	cbnz	r3, 19afe <is_condition_met+0x52>
	return false;
   19afa:	2000      	movs	r0, #0
}
   19afc:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   19afe:	2310      	movs	r3, #16
   19b00:	600b      	str	r3, [r1, #0]
			return true;
   19b02:	2001      	movs	r0, #1
   19b04:	4770      	bx	lr
	switch (event->type) {
   19b06:	2000      	movs	r0, #0
   19b08:	4770      	bx	lr
	return false;
   19b0a:	2000      	movs	r0, #0
   19b0c:	4770      	bx	lr

00019b0e <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   19b0e:	b108      	cbz	r0, 19b14 <poller_thread+0x6>
   19b10:	3860      	subs	r0, #96	; 0x60
   19b12:	4770      	bx	lr
}
   19b14:	4770      	bx	lr

00019b16 <clear_event_registration>:
	event->poller = NULL;
   19b16:	2300      	movs	r3, #0
   19b18:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   19b1a:	7b43      	ldrb	r3, [r0, #13]
   19b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19b20:	2b08      	cmp	r3, #8
   19b22:	d80e      	bhi.n	19b42 <clear_event_registration+0x2c>
   19b24:	f44f 728b 	mov.w	r2, #278	; 0x116
   19b28:	fa22 f303 	lsr.w	r3, r2, r3
   19b2c:	f013 0f01 	tst.w	r3, #1
   19b30:	d007      	beq.n	19b42 <clear_event_registration+0x2c>
	return node->next != NULL;
   19b32:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   19b34:	b12b      	cbz	r3, 19b42 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   19b36:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   19b38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19b3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19b3c:	2300      	movs	r3, #0
   19b3e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   19b40:	6043      	str	r3, [r0, #4]
}
   19b42:	4770      	bx	lr

00019b44 <clear_event_registrations>:
{
   19b44:	b570      	push	{r4, r5, r6, lr}
   19b46:	4606      	mov	r6, r0
   19b48:	4614      	mov	r4, r2
	while (num_events--) {
   19b4a:	e012      	b.n	19b72 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   19b4c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   19b50:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   19b54:	f7ff ffdf 	bl	19b16 <clear_event_registration>
	__asm__ volatile(
   19b58:	f384 8811 	msr	BASEPRI, r4
   19b5c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19b60:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b64:	f3ef 8411 	mrs	r4, BASEPRI
   19b68:	f383 8812 	msr	BASEPRI_MAX, r3
   19b6c:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   19b70:	4629      	mov	r1, r5
   19b72:	1e4d      	subs	r5, r1, #1
   19b74:	2900      	cmp	r1, #0
   19b76:	d1e9      	bne.n	19b4c <clear_event_registrations+0x8>
}
   19b78:	bd70      	pop	{r4, r5, r6, pc}

00019b7a <add_event>:
{
   19b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b7e:	4605      	mov	r5, r0
   19b80:	460e      	mov	r6, r1
	return list->head == list;
   19b82:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   19b84:	4298      	cmp	r0, r3
   19b86:	d015      	beq.n	19bb4 <add_event+0x3a>
   19b88:	4614      	mov	r4, r2
   19b8a:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   19b8c:	b193      	cbz	r3, 19bb4 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   19b8e:	6898      	ldr	r0, [r3, #8]
   19b90:	f7ff ffbd 	bl	19b0e <poller_thread>
   19b94:	4680      	mov	r8, r0
   19b96:	4620      	mov	r0, r4
   19b98:	f7ff ffb9 	bl	19b0e <poller_thread>
   19b9c:	4607      	mov	r7, r0
   19b9e:	4601      	mov	r1, r0
   19ba0:	4640      	mov	r0, r8
   19ba2:	f7ff fd21 	bl	195e8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   19ba6:	2800      	cmp	r0, #0
   19ba8:	dc04      	bgt.n	19bb4 <add_event+0x3a>
	return list->head == list;
   19baa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19bac:	42a5      	cmp	r5, r4
   19bae:	d10f      	bne.n	19bd0 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   19bb0:	2400      	movs	r4, #0
   19bb2:	e00d      	b.n	19bd0 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   19bb4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   19bb6:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   19bb8:	6073      	str	r3, [r6, #4]
	tail->next = node;
   19bba:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19bbc:	606e      	str	r6, [r5, #4]
}
   19bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   19bc2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   19bc4:	6073      	str	r3, [r6, #4]
	node->next = successor;
   19bc6:	6034      	str	r4, [r6, #0]
	prev->next = node;
   19bc8:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   19bca:	6066      	str	r6, [r4, #4]
			return;
   19bcc:	e7f7      	b.n	19bbe <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   19bce:	2400      	movs	r4, #0
   19bd0:	b19c      	cbz	r4, 19bfa <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   19bd2:	68a0      	ldr	r0, [r4, #8]
   19bd4:	f7ff ff9b 	bl	19b0e <poller_thread>
   19bd8:	4601      	mov	r1, r0
   19bda:	4638      	mov	r0, r7
   19bdc:	f7ff fd04 	bl	195e8 <z_sched_prio_cmp>
   19be0:	2800      	cmp	r0, #0
   19be2:	dcee      	bgt.n	19bc2 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   19be4:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   19be6:	686b      	ldr	r3, [r5, #4]
   19be8:	429c      	cmp	r4, r3
   19bea:	d0f0      	beq.n	19bce <add_event+0x54>
   19bec:	6824      	ldr	r4, [r4, #0]
   19bee:	2c00      	cmp	r4, #0
   19bf0:	d0ee      	beq.n	19bd0 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19bf2:	2a00      	cmp	r2, #0
   19bf4:	d1ec      	bne.n	19bd0 <add_event+0x56>
   19bf6:	4614      	mov	r4, r2
   19bf8:	e7ea      	b.n	19bd0 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   19bfa:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   19bfc:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   19bfe:	6073      	str	r3, [r6, #4]
	tail->next = node;
   19c00:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19c02:	606e      	str	r6, [r5, #4]
}
   19c04:	e7db      	b.n	19bbe <add_event+0x44>

00019c06 <register_event>:
{
   19c06:	b538      	push	{r3, r4, r5, lr}
   19c08:	4604      	mov	r4, r0
   19c0a:	460d      	mov	r5, r1
	switch (event->type) {
   19c0c:	7b43      	ldrb	r3, [r0, #13]
   19c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19c12:	3b01      	subs	r3, #1
   19c14:	2b07      	cmp	r3, #7
   19c16:	d80b      	bhi.n	19c30 <register_event+0x2a>
   19c18:	e8df f003 	tbb	[pc, r3]
   19c1c:	0c0a0413 	.word	0x0c0a0413
   19c20:	190a0a0a 	.word	0x190a0a0a
		add_event(&event->sem->poll_events, event, poller);
   19c24:	6900      	ldr	r0, [r0, #16]
   19c26:	460a      	mov	r2, r1
   19c28:	4621      	mov	r1, r4
   19c2a:	3010      	adds	r0, #16
   19c2c:	f7ff ffa5 	bl	19b7a <add_event>
	event->poller = poller;
   19c30:	60a5      	str	r5, [r4, #8]
}
   19c32:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   19c34:	6900      	ldr	r0, [r0, #16]
   19c36:	460a      	mov	r2, r1
   19c38:	4621      	mov	r1, r4
   19c3a:	3010      	adds	r0, #16
   19c3c:	f7ff ff9d 	bl	19b7a <add_event>
		break;
   19c40:	e7f6      	b.n	19c30 <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   19c42:	460a      	mov	r2, r1
   19c44:	4601      	mov	r1, r0
   19c46:	6900      	ldr	r0, [r0, #16]
   19c48:	f7ff ff97 	bl	19b7a <add_event>
		break;
   19c4c:	e7f0      	b.n	19c30 <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   19c4e:	6900      	ldr	r0, [r0, #16]
   19c50:	460a      	mov	r2, r1
   19c52:	4621      	mov	r1, r4
   19c54:	3024      	adds	r0, #36	; 0x24
   19c56:	f7ff ff90 	bl	19b7a <add_event>
		break;
   19c5a:	e7e9      	b.n	19c30 <register_event+0x2a>

00019c5c <register_events>:
{
   19c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c60:	b083      	sub	sp, #12
   19c62:	4680      	mov	r8, r0
   19c64:	460f      	mov	r7, r1
   19c66:	4691      	mov	r9, r2
   19c68:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   19c6a:	2500      	movs	r5, #0
	int events_registered = 0;
   19c6c:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   19c6e:	e00a      	b.n	19c86 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   19c70:	f1ba 0f00 	cmp.w	sl, #0
   19c74:	d102      	bne.n	19c7c <register_events+0x20>
   19c76:	f899 3000 	ldrb.w	r3, [r9]
   19c7a:	bb2b      	cbnz	r3, 19cc8 <register_events+0x6c>
	__asm__ volatile(
   19c7c:	f386 8811 	msr	BASEPRI, r6
   19c80:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19c84:	3501      	adds	r5, #1
   19c86:	42bd      	cmp	r5, r7
   19c88:	da25      	bge.n	19cd6 <register_events+0x7a>
	__asm__ volatile(
   19c8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c8e:	f3ef 8611 	mrs	r6, BASEPRI
   19c92:	f383 8812 	msr	BASEPRI_MAX, r3
   19c96:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   19c9a:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   19c9e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   19ca2:	a901      	add	r1, sp, #4
   19ca4:	4620      	mov	r0, r4
   19ca6:	f7ff ff01 	bl	19aac <is_condition_met>
   19caa:	2800      	cmp	r0, #0
   19cac:	d0e0      	beq.n	19c70 <register_events+0x14>
	event->poller = NULL;
   19cae:	2100      	movs	r1, #0
   19cb0:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   19cb2:	68e3      	ldr	r3, [r4, #12]
   19cb4:	f3c3 3286 	ubfx	r2, r3, #14, #7
   19cb8:	9801      	ldr	r0, [sp, #4]
   19cba:	4302      	orrs	r2, r0
   19cbc:	f362 3394 	bfi	r3, r2, #14, #7
   19cc0:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   19cc2:	f889 1000 	strb.w	r1, [r9]
   19cc6:	e7d9      	b.n	19c7c <register_events+0x20>
			register_event(&events[ii], poller);
   19cc8:	4649      	mov	r1, r9
   19cca:	4620      	mov	r0, r4
   19ccc:	f7ff ff9b 	bl	19c06 <register_event>
			events_registered += 1;
   19cd0:	f10b 0b01 	add.w	fp, fp, #1
   19cd4:	e7d2      	b.n	19c7c <register_events+0x20>
}
   19cd6:	4658      	mov	r0, fp
   19cd8:	b003      	add	sp, #12
   19cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019cde <signal_poller>:
{
   19cde:	b538      	push	{r3, r4, r5, lr}
   19ce0:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   19ce2:	6880      	ldr	r0, [r0, #8]
   19ce4:	f7ff ff13 	bl	19b0e <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   19ce8:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   19cea:	f013 0f02 	tst.w	r3, #2
   19cee:	d025      	beq.n	19d3c <signal_poller+0x5e>
   19cf0:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   19cf2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   19cf4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   19cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
   19cfa:	bf08      	it	eq
   19cfc:	f112 0f02 	cmneq.w	r2, #2
   19d00:	d01e      	beq.n	19d40 <signal_poller+0x62>
	z_unpend_thread(thread);
   19d02:	f7ff fcc5 	bl	19690 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   19d06:	2d08      	cmp	r5, #8
   19d08:	d00a      	beq.n	19d20 <signal_poller+0x42>
   19d0a:	2300      	movs	r3, #0
   19d0c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   19d10:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19d12:	f013 0f1f 	tst.w	r3, #31
   19d16:	d108      	bne.n	19d2a <signal_poller+0x4c>
	return node->next != NULL;
   19d18:	69a3      	ldr	r3, [r4, #24]
   19d1a:	b123      	cbz	r3, 19d26 <signal_poller+0x48>
   19d1c:	2300      	movs	r3, #0
   19d1e:	e005      	b.n	19d2c <signal_poller+0x4e>
   19d20:	f06f 0303 	mvn.w	r3, #3
   19d24:	e7f2      	b.n	19d0c <signal_poller+0x2e>
   19d26:	2301      	movs	r3, #1
   19d28:	e000      	b.n	19d2c <signal_poller+0x4e>
   19d2a:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   19d2c:	b90b      	cbnz	r3, 19d32 <signal_poller+0x54>
		return 0;
   19d2e:	2000      	movs	r0, #0
   19d30:	e005      	b.n	19d3e <signal_poller+0x60>
	z_ready_thread(thread);
   19d32:	4620      	mov	r0, r4
   19d34:	f7ff fcd1 	bl	196da <z_ready_thread>
	return 0;
   19d38:	2000      	movs	r0, #0
   19d3a:	e000      	b.n	19d3e <signal_poller+0x60>
		return 0;
   19d3c:	2000      	movs	r0, #0
}
   19d3e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   19d40:	f06f 000a 	mvn.w	r0, #10
   19d44:	e7fb      	b.n	19d3e <signal_poller+0x60>

00019d46 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   19d46:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   19d48:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   19d4a:	7823      	ldrb	r3, [r4, #0]
   19d4c:	b173      	cbz	r3, 19d6c <signal_triggered_work+0x26>
   19d4e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   19d52:	b15d      	cbz	r5, 19d6c <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   19d54:	f1a4 0614 	sub.w	r6, r4, #20
   19d58:	f104 0014 	add.w	r0, r4, #20
   19d5c:	f7ff fe0b 	bl	19976 <z_abort_timeout>
		twork->poll_result = 0;
   19d60:	2300      	movs	r3, #0
   19d62:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   19d64:	4631      	mov	r1, r6
   19d66:	4628      	mov	r0, r5
   19d68:	f7ff fc15 	bl	19596 <z_work_submit_to_queue>
	}

	return 0;
}
   19d6c:	2000      	movs	r0, #0
   19d6e:	bd70      	pop	{r4, r5, r6, pc}

00019d70 <signal_poll_event>:
{
   19d70:	b570      	push	{r4, r5, r6, lr}
   19d72:	4604      	mov	r4, r0
   19d74:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   19d76:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   19d78:	b1d6      	cbz	r6, 19db0 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   19d7a:	7873      	ldrb	r3, [r6, #1]
   19d7c:	2b01      	cmp	r3, #1
   19d7e:	d00d      	beq.n	19d9c <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   19d80:	2b02      	cmp	r3, #2
   19d82:	d012      	beq.n	19daa <signal_poll_event+0x3a>
		poller->is_polling = false;
   19d84:	2000      	movs	r0, #0
   19d86:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   19d88:	2300      	movs	r3, #0
   19d8a:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   19d8c:	68e3      	ldr	r3, [r4, #12]
   19d8e:	f3c3 3286 	ubfx	r2, r3, #14, #7
   19d92:	432a      	orrs	r2, r5
   19d94:	f362 3394 	bfi	r3, r2, #14, #7
   19d98:	60e3      	str	r3, [r4, #12]
}
   19d9a:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   19d9c:	f7ff ff9f 	bl	19cde <signal_poller>
		poller->is_polling = false;
   19da0:	2300      	movs	r3, #0
   19da2:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   19da4:	4298      	cmp	r0, r3
   19da6:	daef      	bge.n	19d88 <signal_poll_event+0x18>
   19da8:	e7f7      	b.n	19d9a <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   19daa:	f7ff ffcc 	bl	19d46 <signal_triggered_work>
   19dae:	e7f7      	b.n	19da0 <signal_poll_event+0x30>
	int retcode = 0;
   19db0:	2000      	movs	r0, #0
   19db2:	e7e9      	b.n	19d88 <signal_poll_event+0x18>

00019db4 <z_handle_obj_poll_events>:
{
   19db4:	b508      	push	{r3, lr}
   19db6:	4603      	mov	r3, r0
	return list->head == list;
   19db8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   19dba:	4283      	cmp	r3, r0
   19dbc:	d008      	beq.n	19dd0 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   19dbe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   19dc0:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   19dc2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19dc4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19dc6:	2300      	movs	r3, #0
   19dc8:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   19dca:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   19dcc:	f7ff ffd0 	bl	19d70 <signal_poll_event>
}
   19dd0:	bd08      	pop	{r3, pc}

00019dd2 <z_heap_aligned_alloc>:
{
   19dd2:	b5d0      	push	{r4, r6, r7, lr}
   19dd4:	b082      	sub	sp, #8
   19dd6:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   19dd8:	2300      	movs	r3, #0
   19dda:	3204      	adds	r2, #4
   19ddc:	d20e      	bcs.n	19dfc <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   19dde:	b97b      	cbnz	r3, 19e00 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   19de0:	2600      	movs	r6, #0
   19de2:	2700      	movs	r7, #0
   19de4:	e9cd 6700 	strd	r6, r7, [sp]
   19de8:	f041 0104 	orr.w	r1, r1, #4
   19dec:	4620      	mov	r0, r4
   19dee:	f7ff f9ce 	bl	1918e <k_heap_aligned_alloc>
	if (mem == NULL) {
   19df2:	b108      	cbz	r0, 19df8 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   19df4:	f840 4b04 	str.w	r4, [r0], #4
}
   19df8:	b002      	add	sp, #8
   19dfa:	bdd0      	pop	{r4, r6, r7, pc}
   19dfc:	2301      	movs	r3, #1
   19dfe:	e7ee      	b.n	19dde <z_heap_aligned_alloc+0xc>
		return NULL;
   19e00:	2000      	movs	r0, #0
   19e02:	e7f9      	b.n	19df8 <z_heap_aligned_alloc+0x26>

00019e04 <k_free>:
	if (ptr != NULL) {
   19e04:	b130      	cbz	r0, 19e14 <k_free+0x10>
{
   19e06:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   19e08:	1f01      	subs	r1, r0, #4
   19e0a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   19e0e:	f7ff fa14 	bl	1923a <k_heap_free>
}
   19e12:	bd08      	pop	{r3, pc}
   19e14:	4770      	bx	lr

00019e16 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   19e16:	4770      	bx	lr
