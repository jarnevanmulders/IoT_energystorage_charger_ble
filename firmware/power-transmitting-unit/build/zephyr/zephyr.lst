
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 42 00 20 dd c5 00 00 93 2b 01 00 95 c5 00 00     .B. .....+......
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	95 c5 00 00 95 c5 00 00 95 c5 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	45 c1 00 00 95 c5 00 00 00 00 00 00 ed c0 00 00     E...............
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	95 c5 00 00                                         ....

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	1d c2 00 00 0f 46 01 00 1d c2 00 00 1d c2 00 00     .....F..........

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	d7 45 01 00 1d c2 00 00 1d c2 00 00 f5 45 01 00     .E...........E..
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	1d c2 00 00 1d c2 00 00 1d c2 00 00 1d c2 00 00     ................
				parsing = false;
  d0:	1d c2 00 00 1d c2 00 00 1d c2 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_drsub>:
				if (*fmt == '%') {
      dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
					arg_idx++;
      e0:	e002      	b.n	e8 <__adddf3>
      e2:	bf00      	nop

000000e4 <__aeabi_dsub>:
					parsing = true;
      e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000e8 <__adddf3>:
					align = VA_STACK_ALIGN(int);
      e8:	b530      	push	{r4, r5, lr}
					size = sizeof(int);
      ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
			switch (*fmt) {
      ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f2:	ea94 0f05 	teq	r4, r5
      f6:	bf08      	it	eq
      f8:	ea90 0f02 	teqeq	r0, r2
      fc:	bf1f      	itttt	ne
      fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     102:	ea55 0c02 	orrsne.w	ip, r5, r2
     106:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     10e:	f000 80e2 	beq.w	2d6 <CONFIG_FLASH_SIZE+0xd6>
     112:	ea4f 5454 	mov.w	r4, r4, lsr #21
     116:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
				parsing = false;
     11a:	bfb8      	it	lt
			switch (*fmt) {
     11c:	426d      	neglt	r5, r5
     11e:	dd0c      	ble.n	13a <CONFIG_KOBJECT_TEXT_AREA+0x3a>
				arg_idx--;
     120:	442c      	add	r4, r5
     122:	ea80 0202 	eor.w	r2, r0, r2
				continue;
     126:	ea81 0303 	eor.w	r3, r1, r3
				parsing = false;
     12a:	ea82 0000 	eor.w	r0, r2, r0
			switch (*fmt) {
     12e:	ea83 0101 	eor.w	r1, r3, r1
     132:	ea80 0202 	eor.w	r2, r0, r2
				parsing = false;
     136:	ea81 0303 	eor.w	r3, r1, r3
			if (*++fmt == '\0') {
     13a:	2d36      	cmp	r5, #54	; 0x36
     13c:	bf88      	it	hi
     13e:	bd30      	pophi	{r4, r5, pc}
     140:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
			if (!parsing) {
     144:	ea4f 3101 	mov.w	r1, r1, lsl #12
			switch (*fmt) {
     148:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     14c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     150:	d002      	beq.n	158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     152:	4240      	negs	r0, r0
     154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     158:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     15c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     160:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     164:	d002      	beq.n	16c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x22>
     166:	4252      	negs	r2, r2
     168:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16c:	ea94 0f05 	teq	r4, r5
     170:	f000 80a7 	beq.w	2c2 <CONFIG_FLASH_SIZE+0xc2>
     174:	f1a4 0401 	sub.w	r4, r4, #1
     178:	f1d5 0e20 	rsbs	lr, r5, #32
     17c:	db0d      	blt.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     17e:	fa02 fc0e 	lsl.w	ip, r2, lr
     182:	fa22 f205 	lsr.w	r2, r2, r5
     186:	1880      	adds	r0, r0, r2
     188:	f141 0100 	adc.w	r1, r1, #0
     18c:	fa03 f20e 	lsl.w	r2, r3, lr
     190:	1880      	adds	r0, r0, r2
     192:	fa43 f305 	asr.w	r3, r3, r5
     196:	4159      	adcs	r1, r3
     198:	e00e      	b.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     19a:	f1a5 0520 	sub.w	r5, r5, #32
     19e:	f10e 0e20 	add.w	lr, lr, #32
     1a2:	2a01      	cmp	r2, #1
     1a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     1a8:	bf28      	it	cs
     1aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     1ae:	fa43 f305 	asr.w	r3, r3, r5
     1b2:	18c0      	adds	r0, r0, r3
     1b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1bc:	d507      	bpl.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1be:	f04f 0e00 	mov.w	lr, #0
     1c2:	f1dc 0c00 	rsbs	ip, ip, #0
     1c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ca:	eb6e 0101 	sbc.w	r1, lr, r1
     1ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d2:	d31b      	bcc.n	20c <CONFIG_FLASH_SIZE+0xc>
     1d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1d8:	d30c      	bcc.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
     1da:	0849      	lsrs	r1, r1, #1
     1dc:	ea5f 0030 	movs.w	r0, r0, rrx
     1e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e4:	f104 0401 	add.w	r4, r4, #1
     1e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f0:	f080 809a 	bcs.w	328 <CONFIG_FLASH_SIZE+0x128>
     1f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1f8:	bf08      	it	eq
     1fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1fe:	f150 0000 	adcs.w	r0, r0, #0
     202:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     206:	ea41 0105 	orr.w	r1, r1, r5
     20a:	bd30      	pop	{r4, r5, pc}
     20c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     210:	4140      	adcs	r0, r0
     212:	eb41 0101 	adc.w	r1, r1, r1
     216:	3c01      	subs	r4, #1
				parsing = false;
     218:	bf28      	it	cs
     21a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
				align = VA_STACK_ALIGN(size_t);
     21e:	d2e9      	bcs.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
				size = sizeof(size_t);
     220:	f091 0f00 	teq	r1, #0
				align = VA_STACK_ALIGN(ptrdiff_t);
     224:	bf04      	itt	eq
     226:	4601      	moveq	r1, r0
				size = sizeof(ptrdiff_t);
     228:	2000      	moveq	r0, #0
				continue;
     22a:	fab1 f381 	clz	r3, r1
				if (fmt[-1] == 'l') {
     22e:	bf08      	it	eq
     230:	3320      	addeq	r3, #32
				parsing = false;
     232:	f1a3 030b 	sub.w	r3, r3, #11
		buf = (void *) ROUND_UP(buf, align);
     236:	f1b3 0220 	subs.w	r2, r3, #32
     23a:	da0c      	bge.n	256 <CONFIG_FLASH_SIZE+0x56>
     23c:	320c      	adds	r2, #12
     23e:	dd08      	ble.n	252 <CONFIG_FLASH_SIZE+0x52>
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	f102 0c14 	add.w	ip, r2, #20
     244:	f1c2 020c 	rsb	r2, r2, #12
     248:	fa01 f00c 	lsl.w	r0, r1, ip
		if (is_str_arg) {
     24c:	fa21 f102 	lsr.w	r1, r1, r2
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     250:	e00c      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     252:	f102 0214 	add.w	r2, r2, #20
     256:	bfd8      	it	le

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	f1c2 0c20 	rsble	ip, r2, #32
     25c:	fa01 f102 	lsl.w	r1, r1, r2
			long long v = va_arg(ap, long long);
     260:	fa20 fc0c 	lsr.w	ip, r0, ip
     264:	bfdc      	itt	le
     266:	ea41 010c 	orrle.w	r1, r1, ip
     26a:	4090      	lslle	r0, r2
     26c:	1ae4      	subs	r4, r4, r3
     26e:	bfa2      	ittt	ge
     270:	eb01 5104 	addge.w	r1, r1, r4, lsl #20

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     274:	4329      	orrge	r1, r5
     276:	bd30      	popge	{r4, r5, pc}
				}
			}
			buf += sizeof(long long);
     278:	ea6f 0404 	mvn.w	r4, r4
					if (fmt[-2] == 'l') {
     27c:	3c1f      	subs	r4, #31
     27e:	da1c      	bge.n	2ba <CONFIG_FLASH_SIZE+0xba>
     280:	340c      	adds	r4, #12
     282:	dc0e      	bgt.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
				parsing = false;
     284:	f104 0414 	add.w	r4, r4, #20
						align = VA_STACK_ALIGN(long);
     288:	f1c4 0220 	rsb	r2, r4, #32
						size = sizeof(long);
     28c:	fa20 f004 	lsr.w	r0, r0, r4
						align = VA_STACK_ALIGN(long long);
     290:	fa01 f302 	lsl.w	r3, r1, r2
						size = sizeof(long long);
     294:	ea40 0003 	orr.w	r0, r0, r3
				if (fmt[-1] == 'L') {
     298:	fa21 f304 	lsr.w	r3, r1, r4
     29c:	ea45 0103 	orr.w	r1, r5, r3
					v.d = va_arg(ap, double);
     2a0:	bd30      	pop	{r4, r5, pc}
     2a2:	f1c4 040c 	rsb	r4, r4, #12
     2a6:	f1c4 0220 	rsb	r2, r4, #32
     2aa:	fa20 f002 	lsr.w	r0, r0, r2
     2ae:	fa01 f304 	lsl.w	r3, r1, r4
				buf = (void *) ROUND_UP(buf, align);
     2b2:	ea40 0003 	orr.w	r0, r0, r3
				if (buf0 != NULL) {
     2b6:	4629      	mov	r1, r5
					if (BUF_OFFSET + size > len) {
     2b8:	bd30      	pop	{r4, r5, pc}
     2ba:	fa21 f004 	lsr.w	r0, r1, r4
     2be:	4629      	mov	r1, r5
					} else if (fmt[-1] == 'L') {
     2c0:	bd30      	pop	{r4, r5, pc}
     2c2:	f094 0f00 	teq	r4, #0
						*(double *)buf = v.d;
     2c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
				buf += size;
     2ca:	bf06      	itte	eq
				parsing = false;
     2cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
				continue;
     2d0:	3401      	addeq	r4, #1
     2d2:	3d01      	subne	r5, #1
     2d4:	e74e      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
					v.ld = va_arg(ap, long double);
     2d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2da:	bf18      	it	ne
     2dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e0:	d029      	beq.n	336 <CONFIG_FLASH_SIZE+0x136>
     2e2:	ea94 0f05 	teq	r4, r5
     2e6:	bf08      	it	eq
					size = sizeof(long double);
     2e8:	ea90 0f02 	teqeq	r0, r2
						return -ENOSPC;
     2ec:	d005      	beq.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2ee:	ea54 0c00 	orrs.w	ip, r4, r0
						*(long double *)buf = v.ld;
     2f2:	bf04      	itt	eq
     2f4:	4619      	moveq	r1, r3
				parsing = false;
     2f6:	4610      	moveq	r0, r2
				align = VA_STACK_ALIGN(void *);
     2f8:	bd30      	pop	{r4, r5, pc}
     2fa:	ea91 0f03 	teq	r1, r3
				size = sizeof(void *);
     2fe:	bf1e      	ittt	ne
				is_str_arg = true;
     300:	2100      	movne	r1, #0
				parsing = false;
     302:	2000      	movne	r0, #0
				align = VA_STACK_ALIGN(void *);
     304:	bd30      	popne	{r4, r5, pc}
     306:	ea5f 5c54 	movs.w	ip, r4, lsr #21
				size = sizeof(void *);
     30a:	d105      	bne.n	318 <CONFIG_FLASH_SIZE+0x118>
			s = va_arg(ap, char *);
     30c:	0040      	lsls	r0, r0, #1
     30e:	4149      	adcs	r1, r1
     310:	bf28      	it	cs
     312:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     316:	bd30      	pop	{r4, r5, pc}
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     318:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
			if (*++fmt == '\0') {
     31c:	bf3c      	itt	cc
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     31e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     322:	bd30      	popcc	{r4, r5, pc}
     324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     328:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     32c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     330:	f04f 0000 	mov.w	r0, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     334:	bd30      	pop	{r4, r5, pc}
     336:	ea7f 5c64 	mvns.w	ip, r4, asr #21
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     33a:	bf1a      	itte	ne
     33c:	4619      	movne	r1, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	4610      	movne	r0, r2
     340:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     344:	bf1c      	itt	ne
						s_rw_cnt++;
     346:	460b      	movne	r3, r1
     348:	4602      	movne	r2, r0
     34a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
				} else if (is_ro) {
     34e:	bf06      	itte	eq
					len += 1;
     350:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     354:	ea91 0f03 	teqeq	r1, r3
				} else if (rws_pos_en) {
     358:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
					len += 2;
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	bf00      	nop

00000360 <__aeabi_ui2d>:
					len += strlen(s) + 1 + 1;
     360:	f090 0f00 	teq	r0, #0
     364:	bf04      	itt	eq
     366:	2100      	moveq	r1, #0
     368:	4770      	bxeq	lr
     36a:	b530      	push	{r4, r5, lr}
			int v = va_arg(ap, int);
     36c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     370:	f104 0432 	add.w	r4, r4, #50	; 0x32
			if (buf0 != NULL) {
     374:	f04f 0500 	mov.w	r5, #0
			buf += sizeof(int);
     378:	f04f 0100 	mov.w	r1, #0
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     37c:	e750      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     37e:	bf00      	nop

00000380 <__aeabi_i2d>:
     380:	f090 0f00 	teq	r0, #0
     384:	bf04      	itt	eq

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     386:	2100      	moveq	r1, #0
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     388:	4770      	bxeq	lr
     38a:	b530      	push	{r4, r5, lr}

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     38c:	f44f 6480 	mov.w	r4, #1024	; 0x400

	if (rws_pos_en) {
     390:	f104 0432 	add.w	r4, r4, #50	; 0x32
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     394:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     398:	bf48      	it	mi
     39a:	4240      	negmi	r0, r0
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     39c:	f04f 0100 	mov.w	r1, #0
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     3a0:	e73e      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     3a2:	bf00      	nop

000003a4 <__aeabi_f2d>:
     3a4:	0042      	lsls	r2, r0, #1
     3a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3aa:	ea4f 0131 	mov.w	r1, r1, rrx
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b2:	bf1f      	itttt	ne
     3b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
		for (i = 0; i < s_idx; i++) {
     3bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c0:	4770      	bxne	lr
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3c6:	bf08      	it	eq
     3c8:	4770      	bxeq	lr
     3ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3ce:	bf04      	itt	eq
     3d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3d4:	4770      	bxeq	lr
     3d6:	b530      	push	{r4, r5, lr}
			if (BUF_OFFSET + 1 > len) {
     3d8:	f44f 7460 	mov.w	r4, #896	; 0x380
     3dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
			*buf++ = pos;
     3e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e4:	e71c      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
		for (i = 0; i < s_idx; i++) {
     3e6:	bf00      	nop

000003e8 <__aeabi_ul2d>:
     3e8:	ea50 0201 	orrs.w	r2, r0, r1
		if (rws_pos_en) {
     3ec:	bf08      	it	eq
     3ee:	4770      	bxeq	lr
			*buf++ = str_ptr_arg[i];
     3f0:	b530      	push	{r4, r5, lr}
     3f2:	f04f 0500 	mov.w	r5, #0
     3f6:	e00a      	b.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>

000003f8 <__aeabi_l2d>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
			size = 0;
     3fe:	4770      	bxeq	lr
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     400:	b530      	push	{r4, r5, lr}
     402:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     406:	d502      	bpl.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>
     408:	4240      	negs	r0, r0
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     40a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     40e:	f44f 6480 	mov.w	r4, #1024	; 0x400
     412:	f104 0432 	add.w	r4, r4, #50	; 0x32
     416:	ea5f 5c91 	movs.w	ip, r1, lsr #22
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     41a:	f43f aed8 	beq.w	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     41e:	f04f 0203 	mov.w	r2, #3
		buf += size;
     422:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
	for (i = 0; i < s_idx; i++) {
     426:	bf18      	it	ne
     428:	3203      	addne	r2, #3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     42a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42e:	bf18      	it	ne
     430:	3203      	addne	r2, #3
     432:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     436:	f1c2 0320 	rsb	r3, r2, #32
     43a:	fa00 fc03 	lsl.w	ip, r0, r3
     43e:	fa20 f002 	lsr.w	r0, r0, r2
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     442:	fa01 fe03 	lsl.w	lr, r1, r3
     446:	ea40 000e 	orr.w	r0, r0, lr
     44a:	fa21 f102 	lsr.w	r1, r1, r2
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     44e:	4414      	add	r4, r2
     450:	e6bd      	b.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     452:	bf00      	nop

00000454 <__aeabi_dmul>:
			size = strlen(s) + 1;
     454:	b570      	push	{r4, r5, r6, lr}
     456:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     45e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     462:	bf1d      	ittte	ne
     464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
		return -EFAULT;
     468:	ea94 0f0c 	teqne	r4, ip
		return -ENOSPC;
     46c:	ea95 0f0c 	teqne	r5, ip
     470:	f000 f8de 	bleq	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
			return -ENOSPC;
     474:	442c      	add	r4, r5
     476:	ea81 0603 	eor.w	r6, r1, r3
					return -EINVAL;
     47a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
					return -EINVAL;
     47e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     482:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
			return -EINVAL;
     486:	bf18      	it	ne
     488:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
		return -EINVAL;
     48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
				return -ENOSPC;
     490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     494:	d038      	beq.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
			return -ENOSPC;
     496:	fba0 ce02 	umull	ip, lr, r0, r2
     49a:	f04f 0500 	mov.w	r5, #0
     49e:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4a6:	fbe0 e503 	umlal	lr, r5, r0, r3
     4aa:	f04f 0600 	mov.w	r6, #0
     4ae:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b2:	f09c 0f00 	teq	ip, #0
     4b6:	bf18      	it	ne
     4b8:	f04e 0e01 	orrne.w	lr, lr, #1
     4bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4c8:	d204      	bcs.n	4d4 <__data_size+0x6c>
     4ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4ce:	416d      	adcs	r5, r5
     4d0:	eb46 0606 	adc.w	r6, r6, r6
     4d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4ec:	bf88      	it	hi
     4ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f2:	d81e      	bhi.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     4f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4f8:	bf08      	it	eq
     4fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     4fe:	f150 0000 	adcs.w	r0, r0, #0
     502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     506:	bd70      	pop	{r4, r5, r6, pc}
     508:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     50c:	ea46 0101 	orr.w	r1, r6, r1
     510:	ea40 0002 	orr.w	r0, r0, r2
     514:	ea81 0103 	eor.w	r1, r1, r3
     518:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     51c:	bfc2      	ittt	gt
     51e:	ebd4 050c 	rsbsgt	r5, r4, ip
     522:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     526:	bd70      	popgt	{r4, r5, r6, pc}
     528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     52c:	f04f 0e00 	mov.w	lr, #0
     530:	3c01      	subs	r4, #1
     532:	f300 80ab 	bgt.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     536:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53a:	bfde      	ittt	le
     53c:	2000      	movle	r0, #0
     53e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     542:	bd70      	pople	{r4, r5, r6, pc}
     544:	f1c4 0400 	rsb	r4, r4, #0
     548:	3c20      	subs	r4, #32
     54a:	da35      	bge.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
     54c:	340c      	adds	r4, #12
     54e:	dc1b      	bgt.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
     550:	f104 0414 	add.w	r4, r4, #20
     554:	f1c4 0520 	rsb	r5, r4, #32
     558:	fa00 f305 	lsl.w	r3, r0, r5
     55c:	fa20 f004 	lsr.w	r0, r0, r4
     560:	fa01 f205 	lsl.w	r2, r1, r5
     564:	ea40 0002 	orr.w	r0, r0, r2
     568:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     574:	fa21 f604 	lsr.w	r6, r1, r4
     578:	eb42 0106 	adc.w	r1, r2, r6
     57c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     580:	bf08      	it	eq
     582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     586:	bd70      	pop	{r4, r5, r6, pc}
     588:	f1c4 040c 	rsb	r4, r4, #12
     58c:	f1c4 0520 	rsb	r5, r4, #32
     590:	fa00 f304 	lsl.w	r3, r0, r4
     594:	fa20 f005 	lsr.w	r0, r0, r5
     598:	fa01 f204 	lsl.w	r2, r1, r4
     59c:	ea40 0002 	orr.w	r0, r0, r2
     5a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5a8:	f141 0100 	adc.w	r1, r1, #0
     5ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b0:	bf08      	it	eq
     5b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	f1c4 0520 	rsb	r5, r4, #32
     5bc:	fa00 f205 	lsl.w	r2, r0, r5
     5c0:	ea4e 0e02 	orr.w	lr, lr, r2
     5c4:	fa20 f304 	lsr.w	r3, r0, r4
     5c8:	fa01 f205 	lsl.w	r2, r1, r5
     5cc:	ea43 0302 	orr.w	r3, r3, r2
     5d0:	fa21 f004 	lsr.w	r0, r1, r4
     5d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5d8:	fa21 f204 	lsr.w	r2, r1, r4
     5dc:	ea20 0002 	bic.w	r0, r0, r2
     5e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5e8:	bf08      	it	eq
     5ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ee:	bd70      	pop	{r4, r5, r6, pc}
     5f0:	f094 0f00 	teq	r4, #0
     5f4:	d10f      	bne.n	616 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     5f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fa:	0040      	lsls	r0, r0, #1
     5fc:	eb41 0101 	adc.w	r1, r1, r1
     600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     604:	bf08      	it	eq
     606:	3c01      	subeq	r4, #1
     608:	d0f7      	beq.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
     60a:	ea41 0106 	orr.w	r1, r1, r6
     60e:	f095 0f00 	teq	r5, #0
     612:	bf18      	it	ne
     614:	4770      	bxne	lr
     616:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61a:	0052      	lsls	r2, r2, #1
     61c:	eb43 0303 	adc.w	r3, r3, r3
     620:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     624:	bf08      	it	eq
     626:	3d01      	subeq	r5, #1
     628:	d0f7      	beq.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     62a:	ea43 0306 	orr.w	r3, r3, r6
     62e:	4770      	bx	lr
     630:	ea94 0f0c 	teq	r4, ip
     634:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     638:	bf18      	it	ne
     63a:	ea95 0f0c 	teqne	r5, ip
     63e:	d00c      	beq.n	65a <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     640:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     644:	bf18      	it	ne
     646:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64a:	d1d1      	bne.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     64c:	ea81 0103 	eor.w	r1, r1, r3
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	f04f 0000 	mov.w	r0, #0
     658:	bd70      	pop	{r4, r5, r6, pc}
     65a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     65e:	bf06      	itte	eq
     660:	4610      	moveq	r0, r2
     662:	4619      	moveq	r1, r3
     664:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     668:	d019      	beq.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     66a:	ea94 0f0c 	teq	r4, ip
     66e:	d102      	bne.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     670:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     674:	d113      	bne.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     676:	ea95 0f0c 	teq	r5, ip
     67a:	d105      	bne.n	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     67c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     680:	bf1c      	itt	ne
     682:	4610      	movne	r0, r2
     684:	4619      	movne	r1, r3
     686:	d10a      	bne.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     688:	ea81 0103 	eor.w	r1, r1, r3
     68c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     690:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     698:	f04f 0000 	mov.w	r0, #0
     69c:	bd70      	pop	{r4, r5, r6, pc}
     69e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6a6:	bd70      	pop	{r4, r5, r6, pc}

000006a8 <__aeabi_ddiv>:
     6a8:	b570      	push	{r4, r5, r6, lr}
     6aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6b6:	bf1d      	ittte	ne
     6b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6bc:	ea94 0f0c 	teqne	r4, ip
     6c0:	ea95 0f0c 	teqne	r5, ip
     6c4:	f000 f8a7 	bleq	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     6c8:	eba4 0405 	sub.w	r4, r4, r5
     6cc:	ea81 0e03 	eor.w	lr, r1, r3
     6d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6d8:	f000 8088 	beq.w	7ec <__aeabi_ddiv+0x144>
     6dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
     6fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     700:	429d      	cmp	r5, r3
     702:	bf08      	it	eq
     704:	4296      	cmpeq	r6, r2
     706:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70a:	f504 7440 	add.w	r4, r4, #768	; 0x300
     70e:	d202      	bcs.n	716 <__aeabi_ddiv+0x6e>
     710:	085b      	lsrs	r3, r3, #1
     712:	ea4f 0232 	mov.w	r2, r2, rrx
     716:	1ab6      	subs	r6, r6, r2
     718:	eb65 0503 	sbc.w	r5, r5, r3
     71c:	085b      	lsrs	r3, r3, #1
     71e:	ea4f 0232 	mov.w	r2, r2, rrx
     722:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     726:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72a:	ebb6 0e02 	subs.w	lr, r6, r2
     72e:	eb75 0e03 	sbcs.w	lr, r5, r3
     732:	bf22      	ittt	cs
     734:	1ab6      	subcs	r6, r6, r2
     736:	4675      	movcs	r5, lr
     738:	ea40 000c 	orrcs.w	r0, r0, ip
     73c:	085b      	lsrs	r3, r3, #1
     73e:	ea4f 0232 	mov.w	r2, r2, rrx
     742:	ebb6 0e02 	subs.w	lr, r6, r2
     746:	eb75 0e03 	sbcs.w	lr, r5, r3
     74a:	bf22      	ittt	cs
     74c:	1ab6      	subcs	r6, r6, r2
     74e:	4675      	movcs	r5, lr
     750:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     754:	085b      	lsrs	r3, r3, #1
     756:	ea4f 0232 	mov.w	r2, r2, rrx
     75a:	ebb6 0e02 	subs.w	lr, r6, r2
     75e:	eb75 0e03 	sbcs.w	lr, r5, r3
     762:	bf22      	ittt	cs
     764:	1ab6      	subcs	r6, r6, r2
     766:	4675      	movcs	r5, lr
     768:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     76c:	085b      	lsrs	r3, r3, #1
     76e:	ea4f 0232 	mov.w	r2, r2, rrx
     772:	ebb6 0e02 	subs.w	lr, r6, r2
     776:	eb75 0e03 	sbcs.w	lr, r5, r3
     77a:	bf22      	ittt	cs
     77c:	1ab6      	subcs	r6, r6, r2
     77e:	4675      	movcs	r5, lr
     780:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     784:	ea55 0e06 	orrs.w	lr, r5, r6
     788:	d018      	beq.n	7bc <__aeabi_ddiv+0x114>
     78a:	ea4f 1505 	mov.w	r5, r5, lsl #4
     78e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     792:	ea4f 1606 	mov.w	r6, r6, lsl #4
     796:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     79e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7a6:	d1c0      	bne.n	72a <__aeabi_ddiv+0x82>
     7a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7ac:	d10b      	bne.n	7c6 <__aeabi_ddiv+0x11e>
     7ae:	ea41 0100 	orr.w	r1, r1, r0
     7b2:	f04f 0000 	mov.w	r0, #0
     7b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7ba:	e7b6      	b.n	72a <__aeabi_ddiv+0x82>
     7bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c0:	bf04      	itt	eq
     7c2:	4301      	orreq	r1, r0
     7c4:	2000      	moveq	r0, #0
     7c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ca:	bf88      	it	hi
     7cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d0:	f63f aeaf 	bhi.w	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     7d4:	ebb5 0c03 	subs.w	ip, r5, r3
     7d8:	bf04      	itt	eq
     7da:	ebb6 0c02 	subseq.w	ip, r6, r2
     7de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e2:	f150 0000 	adcs.w	r0, r0, #0
     7e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ea:	bd70      	pop	{r4, r5, r6, pc}
     7ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7f8:	bfc2      	ittt	gt
     7fa:	ebd4 050c 	rsbsgt	r5, r4, ip
     7fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     802:	bd70      	popgt	{r4, r5, r6, pc}
     804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     808:	f04f 0e00 	mov.w	lr, #0
     80c:	3c01      	subs	r4, #1
     80e:	e690      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     810:	ea45 0e06 	orr.w	lr, r5, r6
     814:	e68d      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     816:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81a:	ea94 0f0c 	teq	r4, ip
     81e:	bf08      	it	eq
     820:	ea95 0f0c 	teqeq	r5, ip
     824:	f43f af3b 	beq.w	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     828:	ea94 0f0c 	teq	r4, ip
     82c:	d10a      	bne.n	844 <__z_interrupt_stack_SIZEOF+0x4>
     82e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     832:	f47f af34 	bne.w	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     836:	ea95 0f0c 	teq	r5, ip
     83a:	f47f af25 	bne.w	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     83e:	4610      	mov	r0, r2
     840:	4619      	mov	r1, r3
     842:	e72c      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     844:	ea95 0f0c 	teq	r5, ip
     848:	d106      	bne.n	858 <__z_interrupt_stack_SIZEOF+0x18>
     84a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     84e:	f43f aefd 	beq.w	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     852:	4610      	mov	r0, r2
     854:	4619      	mov	r1, r3
     856:	e722      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     85c:	bf18      	it	ne
     85e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     862:	f47f aec5 	bne.w	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     866:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86a:	f47f af0d 	bne.w	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     86e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     872:	f47f aeeb 	bne.w	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     876:	e712      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>

00000878 <__aeabi_d2iz>:
     878:	ea4f 0241 	mov.w	r2, r1, lsl #1
     87c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     880:	d215      	bcs.n	8ae <__aeabi_d2iz+0x36>
     882:	d511      	bpl.n	8a8 <__aeabi_d2iz+0x30>
     884:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     888:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     88c:	d912      	bls.n	8b4 <__aeabi_d2iz+0x3c>
     88e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     896:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     89a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     89e:	fa23 f002 	lsr.w	r0, r3, r2
     8a2:	bf18      	it	ne
     8a4:	4240      	negne	r0, r0
     8a6:	4770      	bx	lr
     8a8:	f04f 0000 	mov.w	r0, #0
     8ac:	4770      	bx	lr
     8ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8b2:	d105      	bne.n	8c0 <__aeabi_d2iz+0x48>
     8b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8b8:	bf08      	it	eq
     8ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8be:	4770      	bx	lr
     8c0:	f04f 0000 	mov.w	r0, #0
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop

000008c8 <__aeabi_uldivmod>:
     8c8:	b953      	cbnz	r3, 8e0 <__aeabi_uldivmod+0x18>
     8ca:	b94a      	cbnz	r2, 8e0 <__aeabi_uldivmod+0x18>
     8cc:	2900      	cmp	r1, #0
     8ce:	bf08      	it	eq
     8d0:	2800      	cmpeq	r0, #0
     8d2:	bf1c      	itt	ne
     8d4:	f04f 31ff 	movne.w	r1, #4294967295
     8d8:	f04f 30ff 	movne.w	r0, #4294967295
     8dc:	f000 b80c 	b.w	8f8 <__aeabi_idiv0>
     8e0:	f1ad 0c08 	sub.w	ip, sp, #8
     8e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8e8:	f007 ffcc 	bl	8884 <__udivmoddi4>
     8ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f4:	b004      	add	sp, #16
     8f6:	4770      	bx	lr

000008f8 <__aeabi_idiv0>:
     8f8:	4770      	bx	lr
     8fa:	bf00      	nop
     8fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     8fe:	4c14      	ldr	r4, [pc, #80]	; (950 <__aeabi_idiv0+0x58>)
     900:	7a20      	ldrb	r0, [r4, #8]
     902:	f88d 0001 	strb.w	r0, [sp, #1]
     906:	79e0      	ldrb	r0, [r4, #7]
     908:	f88d 0000 	strb.w	r0, [sp]
     90c:	79a0      	ldrb	r0, [r4, #6]
     90e:	f8ad 0004 	strh.w	r0, [sp, #4]
     912:	7960      	ldrb	r0, [r4, #5]
     914:	f8ad 0002 	strh.w	r0, [sp, #2]
     918:	4668      	mov	r0, sp
     91a:	f003 f839 	bl	3990 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     91e:	b108      	cbz	r0, 924 <__aeabi_idiv0+0x2c>
     920:	21ad      	movs	r1, #173	; 0xad
     922:	e010      	b.n	946 <__aeabi_idiv0+0x4e>
     924:	68e0      	ldr	r0, [r4, #12]
     926:	9002      	str	r0, [sp, #8]
     928:	a802      	add	r0, sp, #8
     92a:	f003 f847 	bl	39bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     92e:	b108      	cbz	r0, 934 <__aeabi_idiv0+0x3c>
     930:	21b1      	movs	r1, #177	; 0xb1
     932:	e008      	b.n	946 <__aeabi_idiv0+0x4e>
     934:	4807      	ldr	r0, [pc, #28]	; (954 <__aeabi_idiv0+0x5c>)
     936:	6800      	ldr	r0, [r0, #0]
     938:	9003      	str	r0, [sp, #12]
     93a:	a803      	add	r0, sp, #12
     93c:	f009 fc24 	bl	a188 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     940:	2800      	cmp	r0, #0
     942:	d003      	beq.n	94c <__aeabi_idiv0+0x54>
     944:	21b5      	movs	r1, #181	; 0xb5
     946:	2003      	movs	r0, #3
     948:	f000 f91a 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     94c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     94e:	0000      	.short	0x0000
     950:	20000b50 	.word	0x20000b50
     954:	00000c0c 	.word	0x00000c0c
     958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     95c:	4f16      	ldr	r7, [pc, #88]	; (9b8 <__aeabi_idiv0+0xc0>)
     95e:	4604      	mov	r4, r0
     960:	4616      	mov	r6, r2
     962:	78f8      	ldrb	r0, [r7, #3]
     964:	460d      	mov	r5, r1
     966:	b178      	cbz	r0, 988 <__aeabi_idiv0+0x90>
     968:	7c28      	ldrb	r0, [r5, #16]
     96a:	b168      	cbz	r0, 988 <__aeabi_idiv0+0x90>
     96c:	6820      	ldr	r0, [r4, #0]
     96e:	2225      	movs	r2, #37	; 0x25
     970:	1cc0      	adds	r0, r0, #3
     972:	f020 0003 	bic.w	r0, r0, #3
     976:	6020      	str	r0, [r4, #0]
     978:	7c29      	ldrb	r1, [r5, #16]
     97a:	b106      	cbz	r6, 97e <__aeabi_idiv0+0x86>
     97c:	2000      	movs	r0, #0
     97e:	f000 fcbf 	bl	1300 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     982:	6821      	ldr	r1, [r4, #0]
     984:	4408      	add	r0, r1
     986:	6020      	str	r0, [r4, #0]
     988:	7d28      	ldrb	r0, [r5, #20]
     98a:	2800      	cmp	r0, #0
     98c:	d012      	beq.n	9b4 <__aeabi_idiv0+0xbc>
     98e:	78f8      	ldrb	r0, [r7, #3]
     990:	2800      	cmp	r0, #0
     992:	d00f      	beq.n	9b4 <__aeabi_idiv0+0xbc>
     994:	7c28      	ldrb	r0, [r5, #16]
     996:	2800      	cmp	r0, #0
     998:	d00c      	beq.n	9b4 <__aeabi_idiv0+0xbc>
     99a:	6820      	ldr	r0, [r4, #0]
     99c:	1dc0      	adds	r0, r0, #7
     99e:	f020 0007 	bic.w	r0, r0, #7
     9a2:	6020      	str	r0, [r4, #0]
     9a4:	7d29      	ldrb	r1, [r5, #20]
     9a6:	b106      	cbz	r6, 9aa <__aeabi_idiv0+0xb2>
     9a8:	2000      	movs	r0, #0
     9aa:	f001 f935 	bl	1c18 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
     9ae:	6821      	ldr	r1, [r4, #0]
     9b0:	4408      	add	r0, r1
     9b2:	6020      	str	r0, [r4, #0]
     9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9b8:	20000040 	.word	0x20000040

000009bc <sdc_build_revision_get>:
     9bc:	b510      	push	{r4, lr}
     9be:	b128      	cbz	r0, 9cc <sdc_build_revision_get+0x10>
     9c0:	2214      	movs	r2, #20
     9c2:	4904      	ldr	r1, [pc, #16]	; (9d4 <sdc_build_revision_get+0x18>)
     9c4:	f009 ffb2 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     9c8:	2000      	movs	r0, #0
     9ca:	bd10      	pop	{r4, pc}
     9cc:	f06f 0015 	mvn.w	r0, #21
     9d0:	bd10      	pop	{r4, pc}
     9d2:	0000      	.short	0x0000
     9d4:	00000c34 	.word	0x00000c34

000009d8 <sdc_cfg_set>:
     9d8:	b570      	push	{r4, r5, r6, lr}
     9da:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     9de:	bb88      	cbnz	r0, a44 <sdc_cfg_set+0x6c>
     9e0:	4c23      	ldr	r4, [pc, #140]	; (a70 <sdc_cfg_set+0x98>)
     9e2:	7860      	ldrb	r0, [r4, #1]
     9e4:	b108      	cbz	r0, 9ea <sdc_cfg_set+0x12>
     9e6:	11a8      	asrs	r0, r5, #6
     9e8:	bd70      	pop	{r4, r5, r6, pc}
     9ea:	b1f9      	cbz	r1, a2c <sdc_cfg_set+0x54>
     9ec:	f06f 0015 	mvn.w	r0, #21
     9f0:	2a00      	cmp	r2, #0
     9f2:	d0f9      	beq.n	9e8 <sdc_cfg_set+0x10>
     9f4:	4b1f      	ldr	r3, [pc, #124]	; (a74 <sdc_cfg_set+0x9c>)
     9f6:	2909      	cmp	r1, #9
     9f8:	d234      	bcs.n	a64 <sdc_cfg_set+0x8c>
     9fa:	e8df f001 	tbb	[pc, r1]
     9fe:	0533      	.short	0x0533
     a00:	33180833 	.word	0x33180833
     a04:	0024331b 	.word	0x0024331b
     a08:	7810      	ldrb	r0, [r2, #0]
     a0a:	7018      	strb	r0, [r3, #0]
     a0c:	e01f      	b.n	a4e <sdc_cfg_set+0x76>
     a0e:	7891      	ldrb	r1, [r2, #2]
     a10:	2900      	cmp	r1, #0
     a12:	d0e9      	beq.n	9e8 <sdc_cfg_set+0x10>
     a14:	78d1      	ldrb	r1, [r2, #3]
     a16:	2900      	cmp	r1, #0
     a18:	d0e6      	beq.n	9e8 <sdc_cfg_set+0x10>
     a1a:	7811      	ldrb	r1, [r2, #0]
     a1c:	291b      	cmp	r1, #27
     a1e:	d3e3      	bcc.n	9e8 <sdc_cfg_set+0x10>
     a20:	7851      	ldrb	r1, [r2, #1]
     a22:	291b      	cmp	r1, #27
     a24:	d3e0      	bcc.n	9e8 <sdc_cfg_set+0x10>
     a26:	6810      	ldr	r0, [r2, #0]
     a28:	f8c3 0005 	str.w	r0, [r3, #5]
     a2c:	e00f      	b.n	a4e <sdc_cfg_set+0x76>
     a2e:	6810      	ldr	r0, [r2, #0]
     a30:	60d8      	str	r0, [r3, #12]
     a32:	e00c      	b.n	a4e <sdc_cfg_set+0x76>
     a34:	78e1      	ldrb	r1, [r4, #3]
     a36:	b111      	cbz	r1, a3e <sdc_cfg_set+0x66>
     a38:	7811      	ldrb	r1, [r2, #0]
     a3a:	2902      	cmp	r1, #2
     a3c:	d3d4      	bcc.n	9e8 <sdc_cfg_set+0x10>
     a3e:	7810      	ldrb	r0, [r2, #0]
     a40:	7418      	strb	r0, [r3, #16]
     a42:	e004      	b.n	a4e <sdc_cfg_set+0x76>
     a44:	e00e      	b.n	a64 <sdc_cfg_set+0x8c>
     a46:	8811      	ldrh	r1, [r2, #0]
     a48:	29ff      	cmp	r1, #255	; 0xff
     a4a:	d8cd      	bhi.n	9e8 <sdc_cfg_set+0x10>
     a4c:	7519      	strb	r1, [r3, #20]
     a4e:	2201      	movs	r2, #1
     a50:	4908      	ldr	r1, [pc, #32]	; (a74 <sdc_cfg_set+0x9c>)
     a52:	2000      	movs	r0, #0
     a54:	f008 f866 	bl	8b24 <__udivmoddi4+0x2a0>
     a58:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     a5c:	db04      	blt.n	a68 <sdc_cfg_set+0x90>
     a5e:	f06f 000b 	mvn.w	r0, #11
     a62:	bd70      	pop	{r4, r5, r6, pc}
     a64:	4628      	mov	r0, r5
     a66:	bd70      	pop	{r4, r5, r6, pc}
     a68:	2101      	movs	r1, #1
     a6a:	70a1      	strb	r1, [r4, #2]
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	0000      	.short	0x0000
     a70:	20000040 	.word	0x20000040
     a74:	20000b50 	.word	0x20000b50

00000a78 <sdc_disable>:
     a78:	b510      	push	{r4, lr}
     a7a:	4c07      	ldr	r4, [pc, #28]	; (a98 <sdc_disable+0x20>)
     a7c:	7860      	ldrb	r0, [r4, #1]
     a7e:	b120      	cbz	r0, a8a <sdc_disable+0x12>
     a80:	f003 f888 	bl	3b94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     a84:	7820      	ldrb	r0, [r4, #0]
     a86:	f007 fe1d 	bl	86c4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     a8a:	f000 fc85 	bl	1398 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     a8e:	f000 fd5d 	bl	154c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     a92:	2000      	movs	r0, #0
     a94:	7060      	strb	r0, [r4, #1]
     a96:	bd10      	pop	{r4, pc}
     a98:	20000040 	.word	0x20000040

00000a9c <sdc_enable>:
     a9c:	b570      	push	{r4, r5, r6, lr}
     a9e:	460c      	mov	r4, r1
     aa0:	0005      	movs	r5, r0
     aa2:	d002      	beq.n	aaa <sdc_enable+0xe>
     aa4:	b10c      	cbz	r4, aaa <sdc_enable+0xe>
     aa6:	0760      	lsls	r0, r4, #29
     aa8:	d002      	beq.n	ab0 <sdc_enable+0x14>
     aaa:	f06f 0015 	mvn.w	r0, #21
     aae:	bd70      	pop	{r4, r5, r6, pc}
     ab0:	f000 f8e6 	bl	c80 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     ab4:	b1a8      	cbz	r0, ae2 <sdc_enable+0x46>
     ab6:	4628      	mov	r0, r5
     ab8:	f007 fdca 	bl	8650 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     abc:	4d0a      	ldr	r5, [pc, #40]	; (ae8 <sdc_enable+0x4c>)
     abe:	2200      	movs	r2, #0
     ac0:	490a      	ldr	r1, [pc, #40]	; (aec <sdc_enable+0x50>)
     ac2:	7028      	strb	r0, [r5, #0]
     ac4:	4620      	mov	r0, r4
     ac6:	f008 f82d 	bl	8b24 <__udivmoddi4+0x2a0>
     aca:	f009 fd05 	bl	a4d8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     ace:	2100      	movs	r1, #0
     ad0:	7828      	ldrb	r0, [r5, #0]
     ad2:	f003 f847 	bl	3b64 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     ad6:	f7ff ff11 	bl	8fc <__aeabi_idiv0+0x4>
     ada:	2001      	movs	r0, #1
     adc:	7068      	strb	r0, [r5, #1]
     ade:	2000      	movs	r0, #0
     ae0:	bd70      	pop	{r4, r5, r6, pc}
     ae2:	f04f 30ff 	mov.w	r0, #4294967295
     ae6:	bd70      	pop	{r4, r5, r6, pc}
     ae8:	20000040 	.word	0x20000040
     aec:	20000b50 	.word	0x20000b50

00000af0 <sdc_init>:
     af0:	b530      	push	{r4, r5, lr}
     af2:	b089      	sub	sp, #36	; 0x24
     af4:	0005      	movs	r5, r0
     af6:	d00c      	beq.n	b12 <sdc_init+0x22>
     af8:	f007 fd52 	bl	85a0 <mpsl_is_initialized>
     afc:	f04f 34ff 	mov.w	r4, #4294967295
     b00:	b120      	cbz	r0, b0c <sdc_init+0x1c>
     b02:	f007 fc03 	bl	830c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     b06:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     b0a:	d905      	bls.n	b18 <sdc_init+0x28>
     b0c:	4620      	mov	r0, r4
     b0e:	b009      	add	sp, #36	; 0x24
     b10:	bd30      	pop	{r4, r5, pc}
     b12:	f06f 0015 	mvn.w	r0, #21
     b16:	e7fa      	b.n	b0e <sdc_init+0x1e>
     b18:	4c14      	ldr	r4, [pc, #80]	; (b6c <sdc_init+0x7c>)
     b1a:	4815      	ldr	r0, [pc, #84]	; (b70 <sdc_init+0x80>)
     b1c:	6065      	str	r5, [r4, #4]
     b1e:	f000 f9bd 	bl	e9c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     b22:	2000      	movs	r0, #0
     b24:	7060      	strb	r0, [r4, #1]
     b26:	70a0      	strb	r0, [r4, #2]
     b28:	70e0      	strb	r0, [r4, #3]
     b2a:	4601      	mov	r1, r0
     b2c:	2224      	movs	r2, #36	; 0x24
     b2e:	4668      	mov	r0, sp
     b30:	f009 ff76 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     b34:	2224      	movs	r2, #36	; 0x24
     b36:	490f      	ldr	r1, [pc, #60]	; (b74 <sdc_init+0x84>)
     b38:	4668      	mov	r0, sp
     b3a:	f009 fef7 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     b3e:	2224      	movs	r2, #36	; 0x24
     b40:	4669      	mov	r1, sp
     b42:	480d      	ldr	r0, [pc, #52]	; (b78 <sdc_init+0x88>)
     b44:	f009 fef2 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     b48:	f3ef 8410 	mrs	r4, PRIMASK
     b4c:	b672      	cpsid	i
     b4e:	f000 fc31 	bl	13b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     b52:	480a      	ldr	r0, [pc, #40]	; (b7c <sdc_init+0x8c>)
     b54:	f000 fd06 	bl	1564 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     b58:	b118      	cbz	r0, b62 <sdc_init+0x72>
     b5a:	21cb      	movs	r1, #203	; 0xcb
     b5c:	2003      	movs	r0, #3
     b5e:	f000 f80f 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b62:	b904      	cbnz	r4, b66 <sdc_init+0x76>
     b64:	b662      	cpsie	i
     b66:	2000      	movs	r0, #0
     b68:	e7d1      	b.n	b0e <sdc_init+0x1e>
     b6a:	0000      	.short	0x0000
     b6c:	20000040 	.word	0x20000040
     b70:	000008fd 	.word	0x000008fd
     b74:	00000c10 	.word	0x00000c10
     b78:	20000b50 	.word	0x20000b50
     b7c:	00000cad 	.word	0x00000cad

00000b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     b80:	b50e      	push	{r1, r2, r3, lr}
     b82:	b672      	cpsid	i
     b84:	4a15      	ldr	r2, [pc, #84]	; (bdc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     b86:	6855      	ldr	r5, [r2, #4]
     b88:	b1dd      	cbz	r5, bc2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     b8a:	2200      	movs	r2, #0
     b8c:	4603      	mov	r3, r0
     b8e:	466e      	mov	r6, sp
     b90:	240a      	movs	r4, #10
     b92:	e003      	b.n	b9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     b94:	fbb0 f0f4 	udiv	r0, r0, r4
     b98:	1c52      	adds	r2, r2, #1
     b9a:	b2d2      	uxtb	r2, r2
     b9c:	2800      	cmp	r0, #0
     b9e:	d1f9      	bne.n	b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     ba0:	54b0      	strb	r0, [r6, r2]
     ba2:	e00a      	b.n	bba <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     ba4:	b2d8      	uxtb	r0, r3
     ba6:	fbb0 f7f4 	udiv	r7, r0, r4
     baa:	fbb3 f3f4 	udiv	r3, r3, r4
     bae:	fb04 0017 	mls	r0, r4, r7, r0
     bb2:	1e52      	subs	r2, r2, #1
     bb4:	b2d2      	uxtb	r2, r2
     bb6:	3030      	adds	r0, #48	; 0x30
     bb8:	54b0      	strb	r0, [r6, r2]
     bba:	2a00      	cmp	r2, #0
     bbc:	d1f2      	bne.n	ba4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     bbe:	4630      	mov	r0, r6
     bc0:	47a8      	blx	r5
     bc2:	f3bf 8f4f 	dsb	sy
     bc6:	4806      	ldr	r0, [pc, #24]	; (be0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     bc8:	6801      	ldr	r1, [r0, #0]
     bca:	4a06      	ldr	r2, [pc, #24]	; (be4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     bcc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     bd0:	4311      	orrs	r1, r2
     bd2:	6001      	str	r1, [r0, #0]
     bd4:	f3bf 8f4f 	dsb	sy
     bd8:	bf00      	nop
     bda:	e7fd      	b.n	bd8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     bdc:	20000040 	.word	0x20000040
     be0:	e000ed0c 	.word	0xe000ed0c
     be4:	05fa0004 	.word	0x05fa0004

00000be8 <sdc_support_scan>:
     be8:	4807      	ldr	r0, [pc, #28]	; (c08 <sdc_support_scan+0x20>)
     bea:	b510      	push	{r4, lr}
     bec:	7881      	ldrb	r1, [r0, #2]
     bee:	7842      	ldrb	r2, [r0, #1]
     bf0:	4311      	orrs	r1, r2
     bf2:	d002      	beq.n	bfa <sdc_support_scan+0x12>
     bf4:	f04f 30ff 	mov.w	r0, #4294967295
     bf8:	bd10      	pop	{r4, pc}
     bfa:	2101      	movs	r1, #1
     bfc:	70c1      	strb	r1, [r0, #3]
     bfe:	f002 ffd9 	bl	3bb4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
     c02:	2000      	movs	r0, #0
     c04:	bd10      	pop	{r4, pc}
     c06:	0000      	.short	0x0000
     c08:	20000040 	.word	0x20000040
     c0c:	00000001 	.word	0x00000001
     c10:	00000001 	.word	0x00000001
     c14:	031b1b00 	.word	0x031b1b00
     c18:	00000002 	.word	0x00000002
     c1c:	00001d4c 	.word	0x00001d4c
     c20:	00000003 	.word	0x00000003
     c24:	00000008 	.word	0x00000008
	...
     c34:	c12e7ee0 	.word	0xc12e7ee0
     c38:	2385055e 	.word	0x2385055e
     c3c:	fadc1546 	.word	0xfadc1546
     c40:	707d298e 	.word	0x707d298e
     c44:	fca59310 	.word	0xfca59310

00000c48 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     c48:	4a05      	ldr	r2, [pc, #20]	; (c60 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     c4a:	b510      	push	{r4, lr}
     c4c:	6852      	ldr	r2, [r2, #4]
     c4e:	b112      	cbz	r2, c56 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c54:	4710      	bx	r2
     c56:	2192      	movs	r1, #146	; 0x92
     c58:	2004      	movs	r0, #4
     c5a:	f7ff ff91 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c5e:	0000      	.short	0x0000
     c60:	20000b74 	.word	0x20000b74

00000c64 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     c64:	4a05      	ldr	r2, [pc, #20]	; (c7c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     c66:	b510      	push	{r4, lr}
     c68:	6892      	ldr	r2, [r2, #8]
     c6a:	b112      	cbz	r2, c72 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c70:	4710      	bx	r2
     c72:	2198      	movs	r1, #152	; 0x98
     c74:	2004      	movs	r0, #4
     c76:	f7ff ff83 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c7a:	0000      	.short	0x0000
     c7c:	20000b74 	.word	0x20000b74

00000c80 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     c80:	4805      	ldr	r0, [pc, #20]	; (c98 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     c82:	6801      	ldr	r1, [r0, #0]
     c84:	b129      	cbz	r1, c92 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     c86:	6841      	ldr	r1, [r0, #4]
     c88:	b119      	cbz	r1, c92 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     c8a:	6880      	ldr	r0, [r0, #8]
     c8c:	b108      	cbz	r0, c92 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     c8e:	2001      	movs	r0, #1
     c90:	4770      	bx	lr
     c92:	2000      	movs	r0, #0
     c94:	4770      	bx	lr
     c96:	0000      	.short	0x0000
     c98:	20000b74 	.word	0x20000b74

00000c9c <sdc_rand_source_register>:
     c9c:	4902      	ldr	r1, [pc, #8]	; (ca8 <sdc_rand_source_register+0xc>)
     c9e:	c80d      	ldmia	r0, {r0, r2, r3}
     ca0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     ca4:	2000      	movs	r0, #0
     ca6:	4770      	bx	lr
     ca8:	20000b74 	.word	0x20000b74

00000cac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cae:	4c12      	ldr	r4, [pc, #72]	; (cf8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     cb0:	2600      	movs	r6, #0
     cb2:	6825      	ldr	r5, [r4, #0]
     cb4:	e011      	b.n	cda <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     cb6:	9800      	ldr	r0, [sp, #0]
     cb8:	2802      	cmp	r0, #2
     cba:	d002      	beq.n	cc2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     cbc:	2803      	cmp	r0, #3
     cbe:	d10c      	bne.n	cda <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     cc0:	e006      	b.n	cd0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     cc2:	6820      	ldr	r0, [r4, #0]
     cc4:	b110      	cbz	r0, ccc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     cc6:	2000      	movs	r0, #0
     cc8:	6026      	str	r6, [r4, #0]
     cca:	e005      	b.n	cd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     ccc:	2128      	movs	r1, #40	; 0x28
     cce:	e00c      	b.n	cea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     cd0:	6820      	ldr	r0, [r4, #0]
     cd2:	b168      	cbz	r0, cf0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     cd4:	2001      	movs	r0, #1
     cd6:	6026      	str	r6, [r4, #0]
     cd8:	47a8      	blx	r5
     cda:	4668      	mov	r0, sp
     cdc:	f000 fc08 	bl	14f0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     ce0:	2800      	cmp	r0, #0
     ce2:	d0e8      	beq.n	cb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     ce4:	2805      	cmp	r0, #5
     ce6:	d005      	beq.n	cf4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     ce8:	2135      	movs	r1, #53	; 0x35
     cea:	2004      	movs	r0, #4
     cec:	f7ff ff48 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     cf0:	212d      	movs	r1, #45	; 0x2d
     cf2:	e7fa      	b.n	cea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cf6:	0000      	.short	0x0000
     cf8:	20000048 	.word	0x20000048

00000cfc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d00:	4605      	mov	r5, r0
     d02:	4925      	ldr	r1, [pc, #148]	; (d98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     d04:	1d00      	adds	r0, r0, #4
     d06:	f501 7784 	add.w	r7, r1, #264	; 0x108
     d0a:	2600      	movs	r6, #0
     d0c:	6008      	str	r0, [r1, #0]
     d0e:	7838      	ldrb	r0, [r7, #0]
     d10:	b150      	cbz	r0, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     d12:	78ba      	ldrb	r2, [r7, #2]
     d14:	463c      	mov	r4, r7
     d16:	1c79      	adds	r1, r7, #1
     d18:	4628      	mov	r0, r5
     d1a:	1c92      	adds	r2, r2, #2
     d1c:	f009 fe06 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     d20:	7026      	strb	r6, [r4, #0]
     d22:	2004      	movs	r0, #4
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	481b      	ldr	r0, [pc, #108]	; (d98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     d2a:	f000 fde3 	bl	18f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     d2e:	4604      	mov	r4, r0
     d30:	2802      	cmp	r0, #2
     d32:	d004      	beq.n	d3e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     d34:	2c04      	cmp	r4, #4
     d36:	d007      	beq.n	d48 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     d38:	2c08      	cmp	r4, #8
     d3a:	d027      	beq.n	d8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     d3c:	e02a      	b.n	d94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     d3e:	4916      	ldr	r1, [pc, #88]	; (d98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     d40:	4628      	mov	r0, r5
     d42:	f007 ff34 	bl	8bae <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     d46:	e025      	b.n	d94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     d48:	4913      	ldr	r1, [pc, #76]	; (d98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     d4a:	4628      	mov	r0, r5
     d4c:	f007 ff94 	bl	8c78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     d50:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     d54:	d303      	bcc.n	d5e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x62>
     d56:	21c7      	movs	r1, #199	; 0xc7
     d58:	2008      	movs	r0, #8
     d5a:	f7ff ff11 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     d5e:	2800      	cmp	r0, #0
     d60:	d0d5      	beq.n	d0e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     d62:	f895 9000 	ldrb.w	r9, [r5]
     d66:	f895 8002 	ldrb.w	r8, [r5, #2]
     d6a:	4648      	mov	r0, r9
     d6c:	f000 f844 	bl	df8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     d70:	2800      	cmp	r0, #0
     d72:	d0cc      	beq.n	d0e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     d74:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
     d78:	d10c      	bne.n	d94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     d7a:	4640      	mov	r0, r8
     d7c:	f1b8 0f12 	cmp.w	r8, #18
     d80:	d0c5      	beq.n	d0e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     d82:	f000 f84b 	bl	e1c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     d86:	2800      	cmp	r0, #0
     d88:	d0c1      	beq.n	d0e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     d8a:	e003      	b.n	d94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     d8c:	4902      	ldr	r1, [pc, #8]	; (d98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     d8e:	4628      	mov	r0, r5
     d90:	f007 ff3b 	bl	8c0a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     d94:	4620      	mov	r0, r4
     d96:	e7c5      	b.n	d24 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     d98:	20000b80 	.word	0x20000b80
     d9c:	b570      	push	{r4, r5, r6, lr}
     d9e:	780a      	ldrb	r2, [r1, #0]
     da0:	7082      	strb	r2, [r0, #2]
     da2:	b33a      	cbz	r2, df4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     da4:	2a01      	cmp	r2, #1
     da6:	d825      	bhi.n	df4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     da8:	2313      	movs	r3, #19
     daa:	7003      	strb	r3, [r0, #0]
     dac:	2300      	movs	r3, #0
     dae:	e00a      	b.n	dc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
     db0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     db4:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     db8:	78a6      	ldrb	r6, [r4, #2]
     dba:	70ee      	strb	r6, [r5, #3]
     dbc:	8864      	ldrh	r4, [r4, #2]
     dbe:	0a24      	lsrs	r4, r4, #8
     dc0:	1c5b      	adds	r3, r3, #1
     dc2:	712c      	strb	r4, [r5, #4]
     dc4:	b2db      	uxtb	r3, r3
     dc6:	4293      	cmp	r3, r2
     dc8:	d3f2      	bcc.n	db0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     dca:	2300      	movs	r3, #0
     dcc:	e00b      	b.n	de6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
     dce:	bf00      	nop
     dd0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     dd4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     dd8:	792e      	ldrb	r6, [r5, #4]
     dda:	7166      	strb	r6, [r4, #5]
     ddc:	88ad      	ldrh	r5, [r5, #4]
     dde:	0a2d      	lsrs	r5, r5, #8
     de0:	1c5b      	adds	r3, r3, #1
     de2:	71a5      	strb	r5, [r4, #6]
     de4:	b2db      	uxtb	r3, r3
     de6:	4293      	cmp	r3, r2
     de8:	d3f2      	bcc.n	dd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
     dea:	2101      	movs	r1, #1
     dec:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     df0:	b2c0      	uxtb	r0, r0
     df2:	bd70      	pop	{r4, r5, r6, pc}
     df4:	2000      	movs	r0, #0
     df6:	bd70      	pop	{r4, r5, r6, pc}

00000df8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     df8:	2840      	cmp	r0, #64	; 0x40
     dfa:	d203      	bcs.n	e04 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     dfc:	1e40      	subs	r0, r0, #1
     dfe:	b2c1      	uxtb	r1, r0
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     e02:	e005      	b.n	e10 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     e04:	28ff      	cmp	r0, #255	; 0xff
     e06:	d005      	beq.n	e14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     e08:	3840      	subs	r0, #64	; 0x40
     e0a:	b2c1      	uxtb	r1, r0
     e0c:	4802      	ldr	r0, [pc, #8]	; (e18 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     e0e:	3008      	adds	r0, #8
     e10:	f008 b9c4 	b.w	919c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     e14:	2001      	movs	r0, #1
     e16:	4770      	bx	lr
     e18:	2000004c 	.word	0x2000004c

00000e1c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     e1c:	1e40      	subs	r0, r0, #1
     e1e:	b2c1      	uxtb	r1, r0
     e20:	4801      	ldr	r0, [pc, #4]	; (e28 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     e22:	f008 b9bb 	b.w	919c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     e26:	0000      	.short	0x0000
     e28:	2000005c 	.word	0x2000005c

00000e2c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     e2c:	4902      	ldr	r1, [pc, #8]	; (e38 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     e2e:	6802      	ldr	r2, [r0, #0]
     e30:	610a      	str	r2, [r1, #16]
     e32:	6840      	ldr	r0, [r0, #4]
     e34:	6148      	str	r0, [r1, #20]
     e36:	4770      	bx	lr
     e38:	2000004c 	.word	0x2000004c

00000e3c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     e3c:	4905      	ldr	r1, [pc, #20]	; (e54 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     e3e:	6802      	ldr	r2, [r0, #0]
     e40:	600a      	str	r2, [r1, #0]
     e42:	6840      	ldr	r0, [r0, #4]
     e44:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     e48:	600a      	str	r2, [r1, #0]
     e4a:	4a03      	ldr	r2, [pc, #12]	; (e58 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     e4c:	4310      	orrs	r0, r2
     e4e:	6048      	str	r0, [r1, #4]
     e50:	4770      	bx	lr
     e52:	0000      	.short	0x0000
     e54:	2000004c 	.word	0x2000004c
     e58:	024007f8 	.word	0x024007f8

00000e5c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     e5c:	4807      	ldr	r0, [pc, #28]	; (e7c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     e5e:	f04f 31ff 	mov.w	r1, #4294967295
     e62:	2200      	movs	r2, #0
     e64:	6001      	str	r1, [r0, #0]
     e66:	0cc9      	lsrs	r1, r1, #19
     e68:	6041      	str	r1, [r0, #4]
     e6a:	f100 0108 	add.w	r1, r0, #8
     e6e:	201f      	movs	r0, #31
     e70:	600a      	str	r2, [r1, #0]
     e72:	604a      	str	r2, [r1, #4]
     e74:	3108      	adds	r1, #8
     e76:	e9c1 0200 	strd	r0, r2, [r1]
     e7a:	4770      	bx	lr
     e7c:	2000004c 	.word	0x2000004c

00000e80 <sdc_hci_cmd_cb_reset>:
     e80:	b510      	push	{r4, lr}
     e82:	f7ff ffeb 	bl	e5c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     e86:	f009 f993 	bl	a1b0 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     e8a:	4604      	mov	r4, r0
     e8c:	4802      	ldr	r0, [pc, #8]	; (e98 <sdc_hci_cmd_cb_reset+0x18>)
     e8e:	6800      	ldr	r0, [r0, #0]
     e90:	b100      	cbz	r0, e94 <sdc_hci_cmd_cb_reset+0x14>
     e92:	4780      	blx	r0
     e94:	4620      	mov	r0, r4
     e96:	bd10      	pop	{r4, pc}
     e98:	20000064 	.word	0x20000064

00000e9c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     e9c:	4901      	ldr	r1, [pc, #4]	; (ea4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     e9e:	6008      	str	r0, [r1, #0]
     ea0:	4770      	bx	lr
     ea2:	0000      	.short	0x0000
     ea4:	20000064 	.word	0x20000064

00000ea8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     eac:	4604      	mov	r4, r0
     eae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     eb2:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     eb6:	4d1f      	ldr	r5, [pc, #124]	; (f34 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     eb8:	4e1e      	ldr	r6, [pc, #120]	; (f34 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     eba:	3d10      	subs	r5, #16
     ebc:	2210      	movs	r2, #16
     ebe:	2100      	movs	r1, #0
     ec0:	4620      	mov	r0, r4
     ec2:	f009 fdad 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     ec6:	2210      	movs	r2, #16
     ec8:	2100      	movs	r1, #0
     eca:	f104 0010 	add.w	r0, r4, #16
     ece:	f009 fda7 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     ed2:	6828      	ldr	r0, [r5, #0]
     ed4:	1c40      	adds	r0, r0, #1
     ed6:	d108      	bne.n	eea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     ed8:	6868      	ldr	r0, [r5, #4]
     eda:	1c40      	adds	r0, r0, #1
     edc:	d105      	bne.n	eea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     ede:	68a8      	ldr	r0, [r5, #8]
     ee0:	1c40      	adds	r0, r0, #1
     ee2:	d102      	bne.n	eea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     ee4:	68e8      	ldr	r0, [r5, #12]
     ee6:	1c40      	adds	r0, r0, #1
     ee8:	d007      	beq.n	efa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     eea:	6828      	ldr	r0, [r5, #0]
     eec:	686a      	ldr	r2, [r5, #4]
     eee:	68a9      	ldr	r1, [r5, #8]
     ef0:	68eb      	ldr	r3, [r5, #12]
     ef2:	6120      	str	r0, [r4, #16]
     ef4:	6162      	str	r2, [r4, #20]
     ef6:	61a1      	str	r1, [r4, #24]
     ef8:	61e3      	str	r3, [r4, #28]
     efa:	2000      	movs	r0, #0
     efc:	f000 fb86 	bl	160c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     f00:	4387      	bics	r7, r0
     f02:	07f8      	lsls	r0, r7, #31
     f04:	d113      	bne.n	f2e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     f06:	6830      	ldr	r0, [r6, #0]
     f08:	1c40      	adds	r0, r0, #1
     f0a:	d108      	bne.n	f1e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     f0c:	6870      	ldr	r0, [r6, #4]
     f0e:	1c40      	adds	r0, r0, #1
     f10:	d105      	bne.n	f1e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     f12:	68b0      	ldr	r0, [r6, #8]
     f14:	1c40      	adds	r0, r0, #1
     f16:	d102      	bne.n	f1e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     f18:	68f0      	ldr	r0, [r6, #12]
     f1a:	1c40      	adds	r0, r0, #1
     f1c:	d007      	beq.n	f2e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     f1e:	6832      	ldr	r2, [r6, #0]
     f20:	6870      	ldr	r0, [r6, #4]
     f22:	68b1      	ldr	r1, [r6, #8]
     f24:	68f3      	ldr	r3, [r6, #12]
     f26:	6022      	str	r2, [r4, #0]
     f28:	6060      	str	r0, [r4, #4]
     f2a:	60a1      	str	r1, [r4, #8]
     f2c:	60e3      	str	r3, [r4, #12]
     f2e:	2000      	movs	r0, #0
     f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f34:	10000090 	.word	0x10000090

00000f38 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     f38:	b538      	push	{r3, r4, r5, lr}
     f3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     f3e:	4604      	mov	r4, r0
     f40:	4822      	ldr	r0, [pc, #136]	; (fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>)
     f42:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     f46:	4d21      	ldr	r5, [pc, #132]	; (fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>)
     f48:	6802      	ldr	r2, [r0, #0]
     f4a:	3d14      	subs	r5, #20
     f4c:	1c52      	adds	r2, r2, #1
     f4e:	d104      	bne.n	f5a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     f50:	6842      	ldr	r2, [r0, #4]
     f52:	43d2      	mvns	r2, r2
     f54:	0412      	lsls	r2, r2, #16
     f56:	0c12      	lsrs	r2, r2, #16
     f58:	d035      	beq.n	fc6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x26>
     f5a:	07c9      	lsls	r1, r1, #31
     f5c:	d033      	beq.n	fc6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x26>
     f5e:	6801      	ldr	r1, [r0, #0]
     f60:	6840      	ldr	r0, [r0, #4]
     f62:	f8ad 0000 	strh.w	r0, [sp]
     f66:	f8c4 1001 	str.w	r1, [r4, #1]
     f6a:	f8bd 0000 	ldrh.w	r0, [sp]
     f6e:	f8a4 0005 	strh.w	r0, [r4, #5]
     f72:	79a0      	ldrb	r0, [r4, #6]
     f74:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     f78:	71a0      	strb	r0, [r4, #6]
     f7a:	6828      	ldr	r0, [r5, #0]
     f7c:	1c40      	adds	r0, r0, #1
     f7e:	d00c      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f80:	6868      	ldr	r0, [r5, #4]
     f82:	1c40      	adds	r0, r0, #1
     f84:	d009      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f86:	68a8      	ldr	r0, [r5, #8]
     f88:	1c40      	adds	r0, r0, #1
     f8a:	d006      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f8c:	68e8      	ldr	r0, [r5, #12]
     f8e:	1c40      	adds	r0, r0, #1
     f90:	d003      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f92:	2000      	movs	r0, #0
     f94:	f000 fb3a 	bl	160c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     f98:	b140      	cbz	r0, fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>
     f9a:	2210      	movs	r2, #16
     f9c:	2100      	movs	r1, #0
     f9e:	1de0      	adds	r0, r4, #7
     fa0:	f009 fd3e 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     fa4:	2001      	movs	r0, #1
     fa6:	7020      	strb	r0, [r4, #0]
     fa8:	2000      	movs	r0, #0
     faa:	bd38      	pop	{r3, r4, r5, pc}
     fac:	682a      	ldr	r2, [r5, #0]
     fae:	6869      	ldr	r1, [r5, #4]
     fb0:	68a8      	ldr	r0, [r5, #8]
     fb2:	68eb      	ldr	r3, [r5, #12]
     fb4:	f8c4 2007 	str.w	r2, [r4, #7]
     fb8:	f8c4 100b 	str.w	r1, [r4, #11]
     fbc:	f8c4 000f 	str.w	r0, [r4, #15]
     fc0:	f8c4 3013 	str.w	r3, [r4, #19]
     fc4:	e7ee      	b.n	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     fc6:	2000      	movs	r0, #0
     fc8:	e7ed      	b.n	fa6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x6>
     fca:	0000      	.short	0x0000
     fcc:	100000a4 	.word	0x100000a4

00000fd0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     fd0:	2102      	movs	r1, #2
     fd2:	8001      	strh	r1, [r0, #0]
     fd4:	8041      	strh	r1, [r0, #2]
     fd6:	2100      	movs	r1, #0
     fd8:	7101      	strb	r1, [r0, #4]
     fda:	21e0      	movs	r1, #224	; 0xe0
     fdc:	7141      	strb	r1, [r0, #5]
     fde:	f642 617e 	movw	r1, #11902	; 0x2e7e
     fe2:	80c1      	strh	r1, [r0, #6]
     fe4:	4901      	ldr	r1, [pc, #4]	; (fec <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     fe6:	6081      	str	r1, [r0, #8]
     fe8:	2000      	movs	r0, #0
     fea:	4770      	bx	lr
     fec:	85055ec1 	.word	0x85055ec1
     ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ff4:	798c      	ldrb	r4, [r1, #6]
     ff6:	f8dd e018 	ldr.w	lr, [sp, #24]
     ffa:	2c08      	cmp	r4, #8
     ffc:	d901      	bls.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     ffe:	21db      	movs	r1, #219	; 0xdb
    1000:	e02c      	b.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    1002:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    1006:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
    100a:	b10d      	cbz	r5, 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    100c:	21dc      	movs	r1, #220	; 0xdc
    100e:	e025      	b.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    1010:	79cd      	ldrb	r5, [r1, #7]
    1012:	2d00      	cmp	r5, #0
    1014:	d045      	beq.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    1016:	006f      	lsls	r7, r5, #1
    1018:	370a      	adds	r7, #10
    101a:	681d      	ldr	r5, [r3, #0]
    101c:	2c02      	cmp	r4, #2
    101e:	443d      	add	r5, r7
    1020:	d901      	bls.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    1022:	4626      	mov	r6, r4
    1024:	e001      	b.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
    1026:	f04f 0602 	mov.w	r6, #2
    102a:	442e      	add	r6, r5
    102c:	f1a6 0601 	sub.w	r6, r6, #1
    1030:	d901      	bls.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1032:	4625      	mov	r5, r4
    1034:	e001      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    1036:	f04f 0502 	mov.w	r5, #2
    103a:	f1a5 0501 	sub.w	r5, r5, #1
    103e:	ea26 0605 	bic.w	r6, r6, r5
    1042:	888d      	ldrh	r5, [r1, #4]
    1044:	4425      	add	r5, r4
    1046:	f1a4 0401 	sub.w	r4, r4, #1
    104a:	f1a5 0501 	sub.w	r5, r5, #1
    104e:	ea25 0504 	bic.w	r5, r5, r4
    1052:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1056:	42a5      	cmp	r5, r4
    1058:	d303      	bcc.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    105a:	21e7      	movs	r1, #231	; 0xe7
    105c:	2017      	movs	r0, #23
    105e:	f7ff fd8f 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1062:	f1be 0f00 	cmp.w	lr, #0
    1066:	d118      	bne.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    1068:	1bf4      	subs	r4, r6, r7
    106a:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    106e:	8025      	strh	r5, [r4, #0]
    1070:	79c8      	ldrb	r0, [r1, #7]
    1072:	70a0      	strb	r0, [r4, #2]
    1074:	2001      	movs	r0, #1
    1076:	70e0      	strb	r0, [r4, #3]
    1078:	7122      	strb	r2, [r4, #4]
    107a:	6808      	ldr	r0, [r1, #0]
    107c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    1080:	0c00      	lsrs	r0, r0, #16
    1082:	80e0      	strh	r0, [r4, #6]
    1084:	8808      	ldrh	r0, [r1, #0]
    1086:	8120      	strh	r0, [r4, #8]
    1088:	2000      	movs	r0, #0
    108a:	e003      	b.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    108c:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    1090:	1c40      	adds	r0, r0, #1
    1092:	817a      	strh	r2, [r7, #10]
    1094:	79cf      	ldrb	r7, [r1, #7]
    1096:	4287      	cmp	r7, r0
    1098:	d8f8      	bhi.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    109a:	79c8      	ldrb	r0, [r1, #7]
    109c:	fb00 6005 	mla	r0, r0, r5, r6
    10a0:	6018      	str	r0, [r3, #0]
    10a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10a6:	0000      	.short	0x0000
    10a8:	20000068 	.word	0x20000068
    10ac:	b530      	push	{r4, r5, lr}
    10ae:	4603      	mov	r3, r0
    10b0:	ea4f 0002 	mov.w	r0, r2
    10b4:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    10b8:	8964      	ldrh	r4, [r4, #10]
    10ba:	428c      	cmp	r4, r1
    10bc:	d009      	beq.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    10be:	789c      	ldrb	r4, [r3, #2]
    10c0:	1c40      	adds	r0, r0, #1
    10c2:	fbb0 f5f4 	udiv	r5, r0, r4
    10c6:	fb04 0015 	mls	r0, r4, r5, r0
    10ca:	b2c0      	uxtb	r0, r0
    10cc:	4290      	cmp	r0, r2
    10ce:	d1f1      	bne.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    10d0:	20ff      	movs	r0, #255	; 0xff
    10d2:	bd30      	pop	{r4, r5, pc}

000010d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    10d4:	4a08      	ldr	r2, [pc, #32]	; (10f8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    10d6:	b510      	push	{r4, lr}
    10d8:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    10dc:	4601      	mov	r1, r0
    10de:	4620      	mov	r0, r4
    10e0:	f008 fa70 	bl	95c4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    10e4:	4601      	mov	r1, r0
    10e6:	28ff      	cmp	r0, #255	; 0xff
    10e8:	d004      	beq.n	10f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    10ea:	4620      	mov	r0, r4
    10ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    10f0:	f008 ba7c 	b.w	95ec <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    10f4:	2000      	movs	r0, #0
    10f6:	bd10      	pop	{r4, pc}
    10f8:	20000068 	.word	0x20000068

000010fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    10fc:	b570      	push	{r4, r5, r6, lr}
    10fe:	4604      	mov	r4, r0
    1100:	7808      	ldrb	r0, [r1, #0]
    1102:	784a      	ldrb	r2, [r1, #1]
    1104:	b086      	sub	sp, #24
    1106:	4290      	cmp	r0, r2
    1108:	d902      	bls.n	1110 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    110a:	f44f 7184 	mov.w	r1, #264	; 0x108
    110e:	e006      	b.n	111e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    1110:	9401      	str	r4, [sp, #4]
    1112:	b13c      	cbz	r4, 1124 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    1114:	2300      	movs	r3, #0
    1116:	0760      	lsls	r0, r4, #29
    1118:	d006      	beq.n	1128 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    111a:	f240 1119 	movw	r1, #281	; 0x119
    111e:	2017      	movs	r0, #23
    1120:	f7ff fd2e 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1124:	2301      	movs	r3, #1
    1126:	e7f6      	b.n	1116 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    1128:	480b      	ldr	r0, [pc, #44]	; (1158 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>)
    112a:	2200      	movs	r2, #0
    112c:	4e0b      	ldr	r6, [pc, #44]	; (115c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>)
    112e:	6002      	str	r2, [r0, #0]
    1130:	7849      	ldrb	r1, [r1, #1]
    1132:	e9d6 5000 	ldrd	r5, r0, [r6]
    1136:	68b6      	ldr	r6, [r6, #8]
    1138:	f361 601f 	bfi	r0, r1, #24, #8
    113c:	e9cd 5002 	strd	r5, r0, [sp, #8]
    1140:	9300      	str	r3, [sp, #0]
    1142:	9604      	str	r6, [sp, #16]
    1144:	ab01      	add	r3, sp, #4
    1146:	a902      	add	r1, sp, #8
    1148:	4610      	mov	r0, r2
    114a:	f7ff ff51 	bl	ff0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    114e:	9801      	ldr	r0, [sp, #4]
    1150:	b006      	add	sp, #24
    1152:	1b00      	subs	r0, r0, r4
    1154:	bd70      	pop	{r4, r5, r6, pc}
    1156:	0000      	.short	0x0000
    1158:	20000068 	.word	0x20000068
    115c:	000011f0 	.word	0x000011f0

00001160 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1160:	b510      	push	{r4, lr}
    1162:	4604      	mov	r4, r0
    1164:	7980      	ldrb	r0, [r0, #6]
    1166:	490e      	ldr	r1, [pc, #56]	; (11a0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    1168:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    116c:	b1a8      	cbz	r0, 119a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    116e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    1172:	79e1      	ldrb	r1, [r4, #7]
    1174:	7882      	ldrb	r2, [r0, #2]
    1176:	4291      	cmp	r1, r2
    1178:	d20f      	bcs.n	119a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    117a:	1c4a      	adds	r2, r1, #1
    117c:	71e2      	strb	r2, [r4, #7]
    117e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1182:	8952      	ldrh	r2, [r2, #10]
    1184:	429a      	cmp	r2, r3
    1186:	d0f4      	beq.n	1172 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    1188:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    118c:	8952      	ldrh	r2, [r2, #10]
    118e:	80a2      	strh	r2, [r4, #4]
    1190:	f008 fa2c 	bl	95ec <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    1194:	6020      	str	r0, [r4, #0]
    1196:	2000      	movs	r0, #0
    1198:	bd10      	pop	{r4, pc}
    119a:	2005      	movs	r0, #5
    119c:	bd10      	pop	{r4, pc}
    119e:	0000      	.short	0x0000
    11a0:	20000068 	.word	0x20000068

000011a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    11a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11a8:	4606      	mov	r6, r0
    11aa:	4810      	ldr	r0, [pc, #64]	; (11ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    11ac:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    11b0:	4631      	mov	r1, r6
    11b2:	4628      	mov	r0, r5
    11b4:	f008 fa06 	bl	95c4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    11b8:	4604      	mov	r4, r0
    11ba:	28ff      	cmp	r0, #255	; 0xff
    11bc:	d012      	beq.n	11e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    11be:	f8d5 0006 	ldr.w	r0, [r5, #6]
    11c2:	4621      	mov	r1, r4
    11c4:	ea4f 4730 	mov.w	r7, r0, ror #16
    11c8:	4628      	mov	r0, r5
    11ca:	f008 fa0f 	bl	95ec <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    11ce:	4601      	mov	r1, r0
    11d0:	4630      	mov	r0, r6
    11d2:	47b8      	blx	r7
    11d4:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    11d8:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    11dc:	8148      	strh	r0, [r1, #10]
    11de:	2000      	movs	r0, #0
    11e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11e4:	f243 0002 	movw	r0, #12290	; 0x3002
    11e8:	e7fa      	b.n	11e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    11ea:	0000      	.short	0x0000
    11ec:	20000068 	.word	0x20000068
    11f0:	00009ee1 	.word	0x00009ee1
    11f4:	000802a8 	.word	0x000802a8
    11f8:	00000000 	.word	0x00000000

000011fc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    11fc:	b570      	push	{r4, r5, r6, lr}
    11fe:	4c14      	ldr	r4, [pc, #80]	; (1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1200:	6823      	ldr	r3, [r4, #0]
    1202:	b18b      	cbz	r3, 1228 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1204:	7a19      	ldrb	r1, [r3, #8]
    1206:	4281      	cmp	r1, r0
    1208:	d912      	bls.n	1230 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    120a:	685a      	ldr	r2, [r3, #4]
    120c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1210:	b171      	cbz	r1, 1230 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1212:	2500      	movs	r5, #0
    1214:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1218:	884a      	ldrh	r2, [r1, #2]
    121a:	6818      	ldr	r0, [r3, #0]
    121c:	f008 f9c5 	bl	95aa <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1220:	6821      	ldr	r1, [r4, #0]
    1222:	2000      	movs	r0, #0
    1224:	7a0a      	ldrb	r2, [r1, #8]
    1226:	e00c      	b.n	1242 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1228:	21c6      	movs	r1, #198	; 0xc6
    122a:	2018      	movs	r0, #24
    122c:	f7ff fca8 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1230:	f243 0002 	movw	r0, #12290	; 0x3002
    1234:	bd70      	pop	{r4, r5, r6, pc}
    1236:	684b      	ldr	r3, [r1, #4]
    1238:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    123c:	b933      	cbnz	r3, 124c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    123e:	1c40      	adds	r0, r0, #1
    1240:	b2c0      	uxtb	r0, r0
    1242:	4282      	cmp	r2, r0
    1244:	d8f7      	bhi.n	1236 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1246:	6808      	ldr	r0, [r1, #0]
    1248:	f008 f9a4 	bl	9594 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    124c:	2000      	movs	r0, #0
    124e:	bd70      	pop	{r4, r5, r6, pc}
    1250:	2000006c 	.word	0x2000006c

00001254 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1258:	460d      	mov	r5, r1
    125a:	0004      	movs	r4, r0
    125c:	4690      	mov	r8, r2
    125e:	f04f 0600 	mov.w	r6, #0
    1262:	d006      	beq.n	1272 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1264:	2700      	movs	r7, #0
    1266:	07a0      	lsls	r0, r4, #30
    1268:	d005      	beq.n	1276 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    126a:	2186      	movs	r1, #134	; 0x86
    126c:	2018      	movs	r0, #24
    126e:	f7ff fc87 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1272:	2701      	movs	r7, #1
    1274:	e7f7      	b.n	1266 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1276:	b1cd      	cbz	r5, 12ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1278:	4611      	mov	r1, r2
    127a:	2000      	movs	r0, #0
    127c:	f008 f96e 	bl	955c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1280:	300c      	adds	r0, #12
    1282:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1286:	b98f      	cbnz	r7, 12ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1288:	4f0a      	ldr	r7, [pc, #40]	; (12b4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    128a:	f104 000c 	add.w	r0, r4, #12
    128e:	00aa      	lsls	r2, r5, #2
    1290:	603c      	str	r4, [r7, #0]
    1292:	7225      	strb	r5, [r4, #8]
    1294:	6060      	str	r0, [r4, #4]
    1296:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    129a:	6020      	str	r0, [r4, #0]
    129c:	2100      	movs	r1, #0
    129e:	6860      	ldr	r0, [r4, #4]
    12a0:	f009 fbbe 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12a4:	4641      	mov	r1, r8
    12a6:	6838      	ldr	r0, [r7, #0]
    12a8:	f008 f958 	bl	955c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12ac:	4630      	mov	r0, r6
    12ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12b2:	0000      	.short	0x0000
    12b4:	2000006c 	.word	0x2000006c

000012b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    12b8:	490a      	ldr	r1, [pc, #40]	; (12e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    12ba:	b510      	push	{r4, lr}
    12bc:	4602      	mov	r2, r0
    12be:	6809      	ldr	r1, [r1, #0]
    12c0:	2000      	movs	r0, #0
    12c2:	b159      	cbz	r1, 12dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    12c4:	7a0b      	ldrb	r3, [r1, #8]
    12c6:	4293      	cmp	r3, r2
    12c8:	d907      	bls.n	12da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    12ca:	6849      	ldr	r1, [r1, #4]
    12cc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    12d0:	2900      	cmp	r1, #0
    12d2:	d002      	beq.n	12da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    12d4:	f831 0b04 	ldrh.w	r0, [r1], #4
    12d8:	4408      	add	r0, r1
    12da:	bd10      	pop	{r4, pc}
    12dc:	21fa      	movs	r1, #250	; 0xfa
    12de:	2018      	movs	r0, #24
    12e0:	f7ff fc4e 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12e4:	2000006c 	.word	0x2000006c

000012e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    12e8:	4801      	ldr	r0, [pc, #4]	; (12f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    12ea:	7840      	ldrb	r0, [r0, #1]
    12ec:	4770      	bx	lr
    12ee:	0000      	.short	0x0000
    12f0:	20000070 	.word	0x20000070

000012f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    12f4:	4801      	ldr	r0, [pc, #4]	; (12fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    12f6:	6840      	ldr	r0, [r0, #4]
    12f8:	4770      	bx	lr
    12fa:	0000      	.short	0x0000
    12fc:	20000070 	.word	0x20000070

00001300 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1304:	460c      	mov	r4, r1
    1306:	4607      	mov	r7, r0
    1308:	4616      	mov	r6, r2
    130a:	2125      	movs	r1, #37	; 0x25
    130c:	4610      	mov	r0, r2
    130e:	460d      	mov	r5, r1
    1310:	4622      	mov	r2, r4
    1312:	f008 f8e2 	bl	94da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1316:	4680      	mov	r8, r0
    1318:	b157      	cbz	r7, 1330 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    131a:	4638      	mov	r0, r7
    131c:	4641      	mov	r1, r8
    131e:	4632      	mov	r2, r6
    1320:	462b      	mov	r3, r5
    1322:	9400      	str	r4, [sp, #0]
    1324:	f008 f894 	bl	9450 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1328:	4803      	ldr	r0, [pc, #12]	; (1338 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    132a:	6047      	str	r7, [r0, #4]
    132c:	7004      	strb	r4, [r0, #0]
    132e:	7046      	strb	r6, [r0, #1]
    1330:	4640      	mov	r0, r8
    1332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1336:	0000      	.short	0x0000
    1338:	20000070 	.word	0x20000070

0000133c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    133c:	4802      	ldr	r0, [pc, #8]	; (1348 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    133e:	7842      	ldrb	r2, [r0, #1]
    1340:	7801      	ldrb	r1, [r0, #0]
    1342:	6840      	ldr	r0, [r0, #4]
    1344:	f7ff bfdc 	b.w	1300 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    1348:	20000070 	.word	0x20000070
    134c:	b530      	push	{r4, r5, lr}
    134e:	490d      	ldr	r1, [pc, #52]	; (1384 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    1350:	2001      	movs	r0, #1
    1352:	6048      	str	r0, [r1, #4]
    1354:	1e82      	subs	r2, r0, #2
    1356:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    135a:	490b      	ldr	r1, [pc, #44]	; (1388 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    135c:	6088      	str	r0, [r1, #8]
    135e:	2300      	movs	r3, #0
    1360:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1364:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1368:	4c08      	ldr	r4, [pc, #32]	; (138c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    136a:	6023      	str	r3, [r4, #0]
    136c:	1d25      	adds	r5, r4, #4
    136e:	6028      	str	r0, [r5, #0]
    1370:	6088      	str	r0, [r1, #8]
    1372:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1376:	6023      	str	r3, [r4, #0]
    1378:	6028      	str	r0, [r5, #0]
    137a:	4906      	ldr	r1, [pc, #24]	; (1394 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    137c:	4804      	ldr	r0, [pc, #16]	; (1390 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    137e:	6008      	str	r0, [r1, #0]
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	0000      	.short	0x0000
    1384:	4000e000 	.word	0x4000e000
    1388:	4000f000 	.word	0x4000f000
    138c:	4000f500 	.word	0x4000f500
    1390:	3ff60000 	.word	0x3ff60000
    1394:	4001f508 	.word	0x4001f508

00001398 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1398:	b510      	push	{r4, lr}
    139a:	f7ff ffd7 	bl	134c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    139e:	f008 f96f 	bl	9680 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    13a2:	4903      	ldr	r1, [pc, #12]	; (13b0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    13a4:	4801      	ldr	r0, [pc, #4]	; (13ac <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    13a6:	6008      	str	r0, [r1, #0]
    13a8:	bd10      	pop	{r4, pc}
    13aa:	0000      	.short	0x0000
    13ac:	3ff60000 	.word	0x3ff60000
    13b0:	4001f508 	.word	0x4001f508

000013b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    13b4:	b510      	push	{r4, lr}
    13b6:	f7ff ffc9 	bl	134c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    13ba:	f008 f961 	bl	9680 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    13be:	f000 f887 	bl	14d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    13c2:	4905      	ldr	r1, [pc, #20]	; (13d8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    13c4:	4803      	ldr	r0, [pc, #12]	; (13d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    13c6:	6008      	str	r0, [r1, #0]
    13c8:	f000 f8b8 	bl	153c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    13cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    13d0:	f000 b8dc 	b.w	158c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    13d4:	3ff60000 	.word	0x3ff60000
    13d8:	4001f508 	.word	0x4001f508
    13dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13e0:	4682      	mov	sl, r0
    13e2:	4838      	ldr	r0, [pc, #224]	; (14c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    13e4:	f009 f9b1 	bl	a74a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    13e8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 14c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    13ec:	b128      	cbz	r0, 13fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    13ee:	2601      	movs	r6, #1
    13f0:	f10b 0001 	add.w	r0, fp, #1
    13f4:	21ff      	movs	r1, #255	; 0xff
    13f6:	7001      	strb	r1, [r0, #0]
    13f8:	e000      	b.n	13fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    13fa:	2600      	movs	r6, #0
    13fc:	f44f 7580 	mov.w	r5, #256	; 0x100
    1400:	4c31      	ldr	r4, [pc, #196]	; (14c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1402:	f04f 0800 	mov.w	r8, #0
    1406:	1d2f      	adds	r7, r5, #4
    1408:	2101      	movs	r1, #1
    140a:	6061      	str	r1, [r4, #4]
    140c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1410:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1414:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1418:	6021      	str	r1, [r4, #0]
    141a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 14cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    141e:	e01c      	b.n	145a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1420:	f8d9 0000 	ldr.w	r0, [r9]
    1424:	06c0      	lsls	r0, r0, #27
    1426:	d518      	bpl.n	145a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1428:	200e      	movs	r0, #14
    142a:	f008 f938 	bl	969e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    142e:	f3ef 8010 	mrs	r0, PRIMASK
    1432:	9000      	str	r0, [sp, #0]
    1434:	b672      	cpsid	i
    1436:	2103      	movs	r1, #3
    1438:	4620      	mov	r0, r4
    143a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    143e:	4629      	mov	r1, r5
    1440:	f008 f93a 	bl	96b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    1444:	b930      	cbnz	r0, 1454 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1446:	4639      	mov	r1, r7
    1448:	4620      	mov	r0, r4
    144a:	f008 f935 	bl	96b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    144e:	b908      	cbnz	r0, 1454 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1450:	f009 fa12 	bl	a878 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1454:	9800      	ldr	r0, [sp, #0]
    1456:	b900      	cbnz	r0, 145a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1458:	b662      	cpsie	i
    145a:	4629      	mov	r1, r5
    145c:	4620      	mov	r0, r4
    145e:	f008 f92b 	bl	96b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    1462:	b928      	cbnz	r0, 1470 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1464:	4639      	mov	r1, r7
    1466:	4620      	mov	r0, r4
    1468:	f008 f926 	bl	96b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    146c:	2800      	cmp	r0, #0
    146e:	d0d7      	beq.n	1420 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1470:	4639      	mov	r1, r7
    1472:	4620      	mov	r0, r4
    1474:	f008 f920 	bl	96b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    1478:	2800      	cmp	r0, #0
    147a:	d1c5      	bne.n	1408 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    147c:	bb06      	cbnz	r6, 14c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    147e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1482:	f88d 1000 	strb.w	r1, [sp]
    1486:	9900      	ldr	r1, [sp, #0]
    1488:	9100      	str	r1, [sp, #0]
    148a:	f89d 1000 	ldrb.w	r1, [sp]
    148e:	b109      	cbz	r1, 1494 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1490:	2501      	movs	r5, #1
    1492:	e000      	b.n	1496 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1494:	2500      	movs	r5, #0
    1496:	f10b 0001 	add.w	r0, fp, #1
    149a:	f880 8000 	strb.w	r8, [r0]
    149e:	2003      	movs	r0, #3
    14a0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    14a4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    14a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    14ac:	200e      	movs	r0, #14
    14ae:	f008 f8f6 	bl	969e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    14b2:	4804      	ldr	r0, [pc, #16]	; (14c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    14b4:	f009 f960 	bl	a778 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    14b8:	b115      	cbz	r5, 14c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    14ba:	2011      	movs	r0, #17
    14bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14c0:	2000      	movs	r0, #0
    14c2:	e7fb      	b.n	14bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    14c4:	20000174 	.word	0x20000174
    14c8:	4000e000 	.word	0x4000e000
    14cc:	e000ed10 	.word	0xe000ed10

000014d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    14d0:	b510      	push	{r4, lr}
    14d2:	4806      	ldr	r0, [pc, #24]	; (14ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    14d4:	f009 f94c 	bl	a770 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    14d8:	b118      	cbz	r0, 14e2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    14da:	2130      	movs	r1, #48	; 0x30
    14dc:	201d      	movs	r0, #29
    14de:	f7ff fb4f 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14e2:	4802      	ldr	r0, [pc, #8]	; (14ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    14e4:	2100      	movs	r1, #0
    14e6:	7041      	strb	r1, [r0, #1]
    14e8:	bd10      	pop	{r4, pc}
    14ea:	0000      	.short	0x0000
    14ec:	20000174 	.word	0x20000174

000014f0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    14f0:	b570      	push	{r4, r5, r6, lr}
    14f2:	4911      	ldr	r1, [pc, #68]	; (1538 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    14f4:	680a      	ldr	r2, [r1, #0]
    14f6:	b1ea      	cbz	r2, 1534 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    14f8:	2300      	movs	r3, #0
    14fa:	461d      	mov	r5, r3
    14fc:	2401      	movs	r4, #1
    14fe:	684a      	ldr	r2, [r1, #4]
    1500:	1c52      	adds	r2, r2, #1
    1502:	604a      	str	r2, [r1, #4]
    1504:	2a09      	cmp	r2, #9
    1506:	d300      	bcc.n	150a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1508:	604d      	str	r5, [r1, #4]
    150a:	790e      	ldrb	r6, [r1, #4]
    150c:	fa04 f206 	lsl.w	r2, r4, r6
    1510:	680e      	ldr	r6, [r1, #0]
    1512:	4216      	tst	r6, r2
    1514:	d00b      	beq.n	152e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1516:	f3ef 8310 	mrs	r3, PRIMASK
    151a:	b672      	cpsid	i
    151c:	680c      	ldr	r4, [r1, #0]
    151e:	4394      	bics	r4, r2
    1520:	600c      	str	r4, [r1, #0]
    1522:	b903      	cbnz	r3, 1526 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1524:	b662      	cpsie	i
    1526:	6849      	ldr	r1, [r1, #4]
    1528:	6001      	str	r1, [r0, #0]
    152a:	2000      	movs	r0, #0
    152c:	bd70      	pop	{r4, r5, r6, pc}
    152e:	1c5b      	adds	r3, r3, #1
    1530:	2b09      	cmp	r3, #9
    1532:	d3e4      	bcc.n	14fe <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1534:	2005      	movs	r0, #5
    1536:	bd70      	pop	{r4, r5, r6, pc}
    1538:	20000078 	.word	0x20000078

0000153c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    153c:	4802      	ldr	r0, [pc, #8]	; (1548 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    153e:	2100      	movs	r1, #0
    1540:	6001      	str	r1, [r0, #0]
    1542:	6041      	str	r1, [r0, #4]
    1544:	4770      	bx	lr
    1546:	0000      	.short	0x0000
    1548:	20000078 	.word	0x20000078

0000154c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    154c:	b510      	push	{r4, lr}
    154e:	4c04      	ldr	r4, [pc, #16]	; (1560 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1550:	7820      	ldrb	r0, [r4, #0]
    1552:	28ff      	cmp	r0, #255	; 0xff
    1554:	d003      	beq.n	155e <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1556:	f007 f8b5 	bl	86c4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    155a:	20ff      	movs	r0, #255	; 0xff
    155c:	7020      	strb	r0, [r4, #0]
    155e:	bd10      	pop	{r4, pc}
    1560:	20000000 	.word	0x20000000

00001564 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1564:	b510      	push	{r4, lr}
    1566:	4c08      	ldr	r4, [pc, #32]	; (1588 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1568:	7861      	ldrb	r1, [r4, #1]
    156a:	b109      	cbz	r1, 1570 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    156c:	200f      	movs	r0, #15
    156e:	bd10      	pop	{r4, pc}
    1570:	f007 f86e 	bl	8650 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1574:	7020      	strb	r0, [r4, #0]
    1576:	28ff      	cmp	r0, #255	; 0xff
    1578:	d001      	beq.n	157e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    157a:	2000      	movs	r0, #0
    157c:	bd10      	pop	{r4, pc}
    157e:	2173      	movs	r1, #115	; 0x73
    1580:	201f      	movs	r0, #31
    1582:	f7ff fafd 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1586:	0000      	.short	0x0000
    1588:	20000000 	.word	0x20000000

0000158c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    158c:	4901      	ldr	r1, [pc, #4]	; (1594 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    158e:	2000      	movs	r0, #0
    1590:	7048      	strb	r0, [r1, #1]
    1592:	4770      	bx	lr
    1594:	20000000 	.word	0x20000000
    1598:	4905      	ldr	r1, [pc, #20]	; (15b0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    159a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    159c:	4282      	cmp	r2, r0
    159e:	d105      	bne.n	15ac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    15a0:	2000      	movs	r0, #0
    15a2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15aa:	8488      	strh	r0, [r1, #36]	; 0x24
    15ac:	4770      	bx	lr
    15ae:	0000      	.short	0x0000
    15b0:	20000e4c 	.word	0x20000e4c

000015b4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    15b4:	4a0a      	ldr	r2, [pc, #40]	; (15e0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    15b6:	b110      	cbz	r0, 15be <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    15b8:	2801      	cmp	r0, #1
    15ba:	d007      	beq.n	15cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    15bc:	e00e      	b.n	15dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    15be:	7850      	ldrb	r0, [r2, #1]
    15c0:	b160      	cbz	r0, 15dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    15c2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    15c6:	6008      	str	r0, [r1, #0]
    15c8:	88d0      	ldrh	r0, [r2, #6]
    15ca:	e004      	b.n	15d6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    15cc:	7810      	ldrb	r0, [r2, #0]
    15ce:	b128      	cbz	r0, 15dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    15d0:	6890      	ldr	r0, [r2, #8]
    15d2:	6008      	str	r0, [r1, #0]
    15d4:	8990      	ldrh	r0, [r2, #12]
    15d6:	8088      	strh	r0, [r1, #4]
    15d8:	2001      	movs	r0, #1
    15da:	4770      	bx	lr
    15dc:	2000      	movs	r0, #0
    15de:	4770      	bx	lr
    15e0:	20000176 	.word	0x20000176

000015e4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    15e4:	4a08      	ldr	r2, [pc, #32]	; (1608 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    15e6:	2301      	movs	r3, #1
    15e8:	b138      	cbz	r0, 15fa <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    15ea:	2801      	cmp	r0, #1
    15ec:	d104      	bne.n	15f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    15ee:	7013      	strb	r3, [r2, #0]
    15f0:	6808      	ldr	r0, [r1, #0]
    15f2:	6090      	str	r0, [r2, #8]
    15f4:	8888      	ldrh	r0, [r1, #4]
    15f6:	8190      	strh	r0, [r2, #12]
    15f8:	4770      	bx	lr
    15fa:	7053      	strb	r3, [r2, #1]
    15fc:	6808      	ldr	r0, [r1, #0]
    15fe:	f8c2 0002 	str.w	r0, [r2, #2]
    1602:	8888      	ldrh	r0, [r1, #4]
    1604:	80d0      	strh	r0, [r2, #6]
    1606:	4770      	bx	lr
    1608:	20000176 	.word	0x20000176

0000160c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    160c:	4906      	ldr	r1, [pc, #24]	; (1628 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    160e:	b110      	cbz	r0, 1616 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1610:	2801      	cmp	r0, #1
    1612:	d002      	beq.n	161a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1614:	e005      	b.n	1622 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1616:	7848      	ldrb	r0, [r1, #1]
    1618:	e000      	b.n	161c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    161a:	7808      	ldrb	r0, [r1, #0]
    161c:	b108      	cbz	r0, 1622 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    161e:	2001      	movs	r0, #1
    1620:	4770      	bx	lr
    1622:	2000      	movs	r0, #0
    1624:	4770      	bx	lr
    1626:	0000      	.short	0x0000
    1628:	20000176 	.word	0x20000176

0000162c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    162c:	4901      	ldr	r1, [pc, #4]	; (1634 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    162e:	7708      	strb	r0, [r1, #28]
    1630:	4770      	bx	lr
    1632:	0000      	.short	0x0000
    1634:	2000055a 	.word	0x2000055a

00001638 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    1638:	4800      	ldr	r0, [pc, #0]	; (163c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    163a:	4770      	bx	lr
    163c:	20000ffc 	.word	0x20000ffc

00001640 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    1640:	4904      	ldr	r1, [pc, #16]	; (1654 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    1642:	784a      	ldrb	r2, [r1, #1]
    1644:	4282      	cmp	r2, r0
    1646:	d903      	bls.n	1650 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    1648:	4408      	add	r0, r1
    164a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    164e:	4770      	bx	lr
    1650:	2000      	movs	r0, #0
    1652:	4770      	bx	lr
    1654:	20000e72 	.word	0x20000e72

00001658 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    1658:	4904      	ldr	r1, [pc, #16]	; (166c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    165a:	784a      	ldrb	r2, [r1, #1]
    165c:	4282      	cmp	r2, r0
    165e:	d903      	bls.n	1668 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    1660:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    1664:	3082      	adds	r0, #130	; 0x82
    1666:	4770      	bx	lr
    1668:	2000      	movs	r0, #0
    166a:	4770      	bx	lr
    166c:	20000e72 	.word	0x20000e72

00001670 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    1670:	4a05      	ldr	r2, [pc, #20]	; (1688 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    1672:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1676:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    167a:	6802      	ldr	r2, [r0, #0]
    167c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    1680:	8880      	ldrh	r0, [r0, #4]
    1682:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    1686:	4770      	bx	lr
    1688:	20000e72 	.word	0x20000e72

0000168c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1690:	4607      	mov	r7, r0
    1692:	2400      	movs	r4, #0
    1694:	4d10      	ldr	r5, [pc, #64]	; (16d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    1696:	e019      	b.n	16cc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    1698:	4620      	mov	r0, r4
    169a:	f7ff ffdd 	bl	1658 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    169e:	0003      	movs	r3, r0
    16a0:	d012      	beq.n	16c8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    16a2:	1928      	adds	r0, r5, r4
    16a4:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    16a8:	b970      	cbnz	r0, 16c8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    16aa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    16ae:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    16b2:	f506 7685 	add.w	r6, r6, #266	; 0x10a
    16b6:	463a      	mov	r2, r7
    16b8:	4631      	mov	r1, r6
    16ba:	4618      	mov	r0, r3
    16bc:	f008 f845 	bl	974a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    16c0:	4630      	mov	r0, r6
    16c2:	4621      	mov	r1, r4
    16c4:	f7ff ffd4 	bl	1670 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    16c8:	1c64      	adds	r4, r4, #1
    16ca:	b2e4      	uxtb	r4, r4
    16cc:	7868      	ldrb	r0, [r5, #1]
    16ce:	42a0      	cmp	r0, r4
    16d0:	d8e2      	bhi.n	1698 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    16d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16d6:	0000      	.short	0x0000
    16d8:	20000e72 	.word	0x20000e72

000016dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    16dc:	4904      	ldr	r1, [pc, #16]	; (16f0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    16de:	784a      	ldrb	r2, [r1, #1]
    16e0:	4282      	cmp	r2, r0
    16e2:	d903      	bls.n	16ec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    16e4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    16e8:	1c80      	adds	r0, r0, #2
    16ea:	4770      	bx	lr
    16ec:	2000      	movs	r0, #0
    16ee:	4770      	bx	lr
    16f0:	20000e72 	.word	0x20000e72

000016f4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    16f4:	4908      	ldr	r1, [pc, #32]	; (1718 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    16f6:	784a      	ldrb	r2, [r1, #1]
    16f8:	4282      	cmp	r2, r0
    16fa:	d903      	bls.n	1704 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    16fc:	180a      	adds	r2, r1, r0
    16fe:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
    1702:	b10a      	cbz	r2, 1708 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    1704:	2000      	movs	r0, #0
    1706:	4770      	bx	lr
    1708:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    170c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1710:	f500 7085 	add.w	r0, r0, #266	; 0x10a
    1714:	4770      	bx	lr
    1716:	0000      	.short	0x0000
    1718:	20000e72 	.word	0x20000e72

0000171c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    171c:	b510      	push	{r4, lr}
    171e:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    1722:	2100      	movs	r1, #0
    1724:	4805      	ldr	r0, [pc, #20]	; (173c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    1726:	f009 f97b 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    172a:	4805      	ldr	r0, [pc, #20]	; (1740 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    172c:	2100      	movs	r1, #0
    172e:	7001      	strb	r1, [r0, #0]
    1730:	7041      	strb	r1, [r0, #1]
    1732:	f44f 7161 	mov.w	r1, #900	; 0x384
    1736:	8041      	strh	r1, [r0, #2]
    1738:	bd10      	pop	{r4, pc}
    173a:	0000      	.short	0x0000
    173c:	20000e72 	.word	0x20000e72
    1740:	2000016c 	.word	0x2000016c

00001744 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    1744:	4b0b      	ldr	r3, [pc, #44]	; (1774 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    1746:	b510      	push	{r4, lr}
    1748:	785c      	ldrb	r4, [r3, #1]
    174a:	4284      	cmp	r4, r0
    174c:	d910      	bls.n	1770 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    174e:	4418      	add	r0, r3
    1750:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    1754:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1758:	4418      	add	r0, r3
    175a:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    175e:	700b      	strb	r3, [r1, #0]
    1760:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    1764:	6011      	str	r1, [r2, #0]
    1766:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    176a:	8090      	strh	r0, [r2, #4]
    176c:	2001      	movs	r0, #1
    176e:	bd10      	pop	{r4, pc}
    1770:	2000      	movs	r0, #0
    1772:	bd10      	pop	{r4, pc}
    1774:	20000e72 	.word	0x20000e72

00001778 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    1778:	4801      	ldr	r0, [pc, #4]	; (1780 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    177a:	8840      	ldrh	r0, [r0, #2]
    177c:	4770      	bx	lr
    177e:	0000      	.short	0x0000
    1780:	2000016c 	.word	0x2000016c

00001784 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    1784:	b570      	push	{r4, r5, r6, lr}
    1786:	2401      	movs	r4, #1
    1788:	4616      	mov	r6, r2
    178a:	4625      	mov	r5, r4
    178c:	f000 f856 	bl	183c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    1790:	2808      	cmp	r0, #8
    1792:	d019      	beq.n	17c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    1794:	f000 f83e 	bl	1814 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    1798:	4603      	mov	r3, r0
    179a:	2808      	cmp	r0, #8
    179c:	d014      	beq.n	17c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    179e:	b106      	cbz	r6, 17a2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x1e>
    17a0:	7033      	strb	r3, [r6, #0]
    17a2:	4618      	mov	r0, r3
    17a4:	f7ff ff9a 	bl	16dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    17a8:	b170      	cbz	r0, 17c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    17aa:	480a      	ldr	r0, [pc, #40]	; (17d4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x50>)
    17ac:	7841      	ldrb	r1, [r0, #1]
    17ae:	4299      	cmp	r1, r3
    17b0:	d903      	bls.n	17ba <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x36>
    17b2:	18c1      	adds	r1, r0, r3
    17b4:	f891 514a 	ldrb.w	r5, [r1, #330]	; 0x14a
    17b8:	e000      	b.n	17bc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    17ba:	2500      	movs	r5, #0
    17bc:	4418      	add	r0, r3
    17be:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    17c2:	2801      	cmp	r0, #1
    17c4:	d003      	beq.n	17ce <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x4a>
    17c6:	2400      	movs	r4, #0
    17c8:	ea44 0005 	orr.w	r0, r4, r5
    17cc:	bd70      	pop	{r4, r5, r6, pc}
    17ce:	2401      	movs	r4, #1
    17d0:	e7fa      	b.n	17c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    17d2:	0000      	.short	0x0000
    17d4:	20000e72 	.word	0x20000e72

000017d8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    17d8:	4901      	ldr	r1, [pc, #4]	; (17e0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    17da:	7048      	strb	r0, [r1, #1]
    17dc:	4770      	bx	lr
    17de:	0000      	.short	0x0000
    17e0:	2000016c 	.word	0x2000016c
    17e4:	4602      	mov	r2, r0
    17e6:	4809      	ldr	r0, [pc, #36]	; (180c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    17e8:	b510      	push	{r4, lr}
    17ea:	7800      	ldrb	r0, [r0, #0]
    17ec:	460b      	mov	r3, r1
    17ee:	b158      	cbz	r0, 1808 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    17f0:	4807      	ldr	r0, [pc, #28]	; (1810 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    17f2:	7841      	ldrb	r1, [r0, #1]
    17f4:	b141      	cbz	r1, 1808 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    17f6:	b10b      	cbz	r3, 17fc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    17f8:	1c80      	adds	r0, r0, #2
    17fa:	e001      	b.n	1800 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    17fc:	4804      	ldr	r0, [pc, #16]	; (1810 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    17fe:	3082      	adds	r0, #130	; 0x82
    1800:	f002 fa2e 	bl	3c60 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    1804:	2001      	movs	r0, #1
    1806:	bd10      	pop	{r4, pc}
    1808:	2000      	movs	r0, #0
    180a:	bd10      	pop	{r4, pc}
    180c:	2000016c 	.word	0x2000016c
    1810:	20000e72 	.word	0x20000e72
    1814:	4908      	ldr	r1, [pc, #32]	; (1838 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    1816:	b510      	push	{r4, lr}
    1818:	4603      	mov	r3, r0
    181a:	2000      	movs	r0, #0
    181c:	784a      	ldrb	r2, [r1, #1]
    181e:	e006      	b.n	182e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    1820:	180c      	adds	r4, r1, r0
    1822:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    1826:	429c      	cmp	r4, r3
    1828:	d004      	beq.n	1834 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    182a:	1c40      	adds	r0, r0, #1
    182c:	b2c0      	uxtb	r0, r0
    182e:	4282      	cmp	r2, r0
    1830:	d8f6      	bhi.n	1820 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    1832:	2008      	movs	r0, #8
    1834:	bd10      	pop	{r4, pc}
    1836:	0000      	.short	0x0000
    1838:	20000e72 	.word	0x20000e72
    183c:	b5f0      	push	{r4, r5, r6, r7, lr}
    183e:	4c1a      	ldr	r4, [pc, #104]	; (18a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    1840:	4603      	mov	r3, r0
    1842:	2000      	movs	r0, #0
    1844:	7825      	ldrb	r5, [r4, #0]
    1846:	e02b      	b.n	18a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    1848:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    184c:	4422      	add	r2, r4
    184e:	780f      	ldrb	r7, [r1, #0]
    1850:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    1854:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    1858:	ea87 070c 	eor.w	r7, r7, ip
    185c:	405e      	eors	r6, r3
    185e:	443e      	add	r6, r7
    1860:	784f      	ldrb	r7, [r1, #1]
    1862:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    1866:	ea87 070c 	eor.w	r7, r7, ip
    186a:	443e      	add	r6, r7
    186c:	788f      	ldrb	r7, [r1, #2]
    186e:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    1872:	ea87 070c 	eor.w	r7, r7, ip
    1876:	443e      	add	r6, r7
    1878:	78cf      	ldrb	r7, [r1, #3]
    187a:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    187e:	ea87 070c 	eor.w	r7, r7, ip
    1882:	443e      	add	r6, r7
    1884:	790f      	ldrb	r7, [r1, #4]
    1886:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    188a:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    188e:	ea87 070c 	eor.w	r7, r7, ip
    1892:	443e      	add	r6, r7
    1894:	794f      	ldrb	r7, [r1, #5]
    1896:	4057      	eors	r7, r2
    1898:	42f7      	cmn	r7, r6
    189a:	d004      	beq.n	18a6 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    189c:	1c40      	adds	r0, r0, #1
    189e:	b2c0      	uxtb	r0, r0
    18a0:	4285      	cmp	r5, r0
    18a2:	d8d1      	bhi.n	1848 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    18a4:	2008      	movs	r0, #8
    18a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18a8:	20000e72 	.word	0x20000e72

000018ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    18ac:	4902      	ldr	r1, [pc, #8]	; (18b8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    18ae:	f991 1000 	ldrsb.w	r1, [r1]
    18b2:	f008 b844 	b.w	993e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    18b6:	0000      	.short	0x0000
    18b8:	20000184 	.word	0x20000184

000018bc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    18bc:	b508      	push	{r3, lr}
    18be:	207f      	movs	r0, #127	; 0x7f
    18c0:	f88d 0000 	strb.w	r0, [sp]
    18c4:	4668      	mov	r0, sp
    18c6:	f002 fdaf 	bl	4428 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    18ca:	b140      	cbz	r0, 18de <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    18cc:	4805      	ldr	r0, [pc, #20]	; (18e4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    18ce:	7840      	ldrb	r0, [r0, #1]
    18d0:	4240      	negs	r0, r0
    18d2:	b241      	sxtb	r1, r0
    18d4:	f99d 0000 	ldrsb.w	r0, [sp]
    18d8:	f008 f831 	bl	993e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    18dc:	bd08      	pop	{r3, pc}
    18de:	f99d 0000 	ldrsb.w	r0, [sp]
    18e2:	bd08      	pop	{r3, pc}
    18e4:	20000184 	.word	0x20000184

000018e8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    18e8:	4a01      	ldr	r2, [pc, #4]	; (18f0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    18ea:	7010      	strb	r0, [r2, #0]
    18ec:	7051      	strb	r1, [r2, #1]
    18ee:	4770      	bx	lr
    18f0:	20000184 	.word	0x20000184

000018f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    18f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 1aa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ac>
    18fc:	4f69      	ldr	r7, [pc, #420]	; (1aa4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    18fe:	4683      	mov	fp, r0
    1900:	f04f 0a01 	mov.w	sl, #1
    1904:	2600      	movs	r6, #0
    1906:	6878      	ldr	r0, [r7, #4]
    1908:	4635      	mov	r5, r6
    190a:	7a00      	ldrb	r0, [r0, #8]
    190c:	f88d 0000 	strb.w	r0, [sp]
    1910:	9800      	ldr	r0, [sp, #0]
    1912:	9000      	str	r0, [sp, #0]
    1914:	f89d 1000 	ldrb.w	r1, [sp]
    1918:	2910      	cmp	r1, #16
    191a:	d106      	bne.n	192a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    191c:	f899 1013 	ldrb.w	r1, [r9, #19]
    1920:	b119      	cbz	r1, 192a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1922:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    1926:	2800      	cmp	r0, #0
    1928:	d077      	beq.n	1a1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    192a:	f88d 6000 	strb.w	r6, [sp]
    192e:	4668      	mov	r0, sp
    1930:	f000 f8c2 	bl	1ab8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    1934:	f89d 1000 	ldrb.w	r1, [sp]
    1938:	2900      	cmp	r1, #0
    193a:	d1f8      	bne.n	192e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    193c:	2800      	cmp	r0, #0
    193e:	d06c      	beq.n	1a1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1940:	4604      	mov	r4, r0
    1942:	7a00      	ldrb	r0, [r0, #8]
    1944:	f88d 0000 	strb.w	r0, [sp]
    1948:	9800      	ldr	r0, [sp, #0]
    194a:	9000      	str	r0, [sp, #0]
    194c:	f89d 8000 	ldrb.w	r8, [sp]
    1950:	f104 0008 	add.w	r0, r4, #8
    1954:	2105      	movs	r1, #5
    1956:	9000      	str	r0, [sp, #0]
    1958:	7001      	strb	r1, [r0, #0]
    195a:	4640      	mov	r0, r8
    195c:	f1b8 0f06 	cmp.w	r8, #6
    1960:	d030      	beq.n	19c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd0>
    1962:	dc07      	bgt.n	1974 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    1964:	2802      	cmp	r0, #2
    1966:	d00f      	beq.n	1988 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    1968:	2803      	cmp	r0, #3
    196a:	d019      	beq.n	19a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    196c:	f1b8 0f04 	cmp.w	r8, #4
    1970:	d107      	bne.n	1982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8e>
    1972:	e01f      	b.n	19b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    1974:	2808      	cmp	r0, #8
    1976:	d035      	beq.n	19e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    1978:	280f      	cmp	r0, #15
    197a:	d052      	beq.n	1a22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    197c:	f1b8 0f10 	cmp.w	r8, #16
    1980:	d059      	beq.n	1a36 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    1982:	f240 214a 	movw	r1, #586	; 0x24a
    1986:	e064      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    1988:	6862      	ldr	r2, [r4, #4]
    198a:	b132      	cbz	r2, 199a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    198c:	4659      	mov	r1, fp
    198e:	4620      	mov	r0, r4
    1990:	4790      	blx	r2
    1992:	2004      	movs	r0, #4
    1994:	f360 0507 	bfi	r5, r0, #0, #8
    1998:	e05e      	b.n	1a58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    199a:	f240 11c3 	movw	r1, #451	; 0x1c3
    199e:	e058      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    19a0:	6862      	ldr	r2, [r4, #4]
    19a2:	b122      	cbz	r2, 19ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xba>
    19a4:	4659      	mov	r1, fp
    19a6:	4620      	mov	r0, r4
    19a8:	4790      	blx	r2
    19aa:	4605      	mov	r5, r0
    19ac:	e054      	b.n	1a58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    19ae:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    19b2:	e04e      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    19b4:	6861      	ldr	r1, [r4, #4]
    19b6:	b111      	cbz	r1, 19be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    19b8:	4620      	mov	r0, r4
    19ba:	4788      	blx	r1
    19bc:	e04c      	b.n	1a58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    19be:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    19c2:	e046      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    19c4:	6862      	ldr	r2, [r4, #4]
    19c6:	b132      	cbz	r2, 19d6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    19c8:	4659      	mov	r1, fp
    19ca:	4620      	mov	r0, r4
    19cc:	4790      	blx	r2
    19ce:	f001 fad1 	bl	2f74 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    19d2:	b118      	cbz	r0, 19dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    19d4:	e01f      	b.n	1a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    19d6:	f240 2111 	movw	r1, #529	; 0x211
    19da:	e03a      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    19dc:	f000 fac4 	bl	1f68 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    19e0:	b3a0      	cbz	r0, 1a4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    19e2:	e018      	b.n	1a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    19e4:	4601      	mov	r1, r0
    19e6:	6860      	ldr	r0, [r4, #4]
    19e8:	465d      	mov	r5, fp
    19ea:	b118      	cbz	r0, 19f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    19ec:	8804      	ldrh	r4, [r0, #0]
    19ee:	2908      	cmp	r1, #8
    19f0:	d111      	bne.n	1a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    19f2:	e001      	b.n	19f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    19f4:	21e5      	movs	r1, #229	; 0xe5
    19f6:	e02c      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    19f8:	4620      	mov	r0, r4
    19fa:	f7ff fc5d 	bl	12b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    19fe:	b170      	cbz	r0, 1a1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1a00:	706e      	strb	r6, [r5, #1]
    1a02:	220f      	movs	r2, #15
    1a04:	702a      	strb	r2, [r5, #0]
    1a06:	80ec      	strh	r4, [r5, #6]
    1a08:	f8a5 a008 	strh.w	sl, [r5, #8]
    1a0c:	4631      	mov	r1, r6
    1a0e:	f885 a004 	strb.w	sl, [r5, #4]
    1a12:	f007 fd46 	bl	94a2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    1a16:	2004      	movs	r0, #4
    1a18:	613e      	str	r6, [r7, #16]
    1a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a1e:	21c5      	movs	r1, #197	; 0xc5
    1a20:	e017      	b.n	1a52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    1a22:	f88b 6001 	strb.w	r6, [fp, #1]
    1a26:	211a      	movs	r1, #26
    1a28:	f88b 1000 	strb.w	r1, [fp]
    1a2c:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1a30:	f8cb 1004 	str.w	r1, [fp, #4]
    1a34:	e7ad      	b.n	1992 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    1a36:	481c      	ldr	r0, [pc, #112]	; (1aa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>)
    1a38:	6802      	ldr	r2, [r0, #0]
    1a3a:	b122      	cbz	r2, 1a46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    1a3c:	6860      	ldr	r0, [r4, #4]
    1a3e:	b130      	cbz	r0, 1a4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15a>
    1a40:	8800      	ldrh	r0, [r0, #0]
    1a42:	4659      	mov	r1, fp
    1a44:	4790      	blx	r2
    1a46:	2002      	movs	r0, #2
    1a48:	613e      	str	r6, [r7, #16]
    1a4a:	e7e6      	b.n	1a1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1a4c:	e004      	b.n	1a58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    1a4e:	f44f 7110 	mov.w	r1, #576	; 0x240
    1a52:	2010      	movs	r0, #16
    1a54:	f7ff f894 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a58:	f3c5 2007 	ubfx	r0, r5, #8, #8
    1a5c:	2801      	cmp	r0, #1
    1a5e:	d010      	beq.n	1a82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    1a60:	f3ef 8010 	mrs	r0, PRIMASK
    1a64:	b672      	cpsid	i
    1a66:	7a21      	ldrb	r1, [r4, #8]
    1a68:	f88d 1000 	strb.w	r1, [sp]
    1a6c:	9900      	ldr	r1, [sp, #0]
    1a6e:	9100      	str	r1, [sp, #0]
    1a70:	f89d 1000 	ldrb.w	r1, [sp]
    1a74:	2905      	cmp	r1, #5
    1a76:	d008      	beq.n	1a8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    1a78:	b139      	cbz	r1, 1a8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    1a7a:	f366 0507 	bfi	r5, r6, #0, #8
    1a7e:	b138      	cbz	r0, 1a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    1a80:	e007      	b.n	1a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    1a82:	9800      	ldr	r0, [sp, #0]
    1a84:	4641      	mov	r1, r8
    1a86:	7001      	strb	r1, [r0, #0]
    1a88:	e003      	b.n	1a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    1a8a:	7226      	strb	r6, [r4, #8]
    1a8c:	613e      	str	r6, [r7, #16]
    1a8e:	e7f6      	b.n	1a7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18a>
    1a90:	b662      	cpsie	i
    1a92:	f015 0fff 	tst.w	r5, #255	; 0xff
    1a96:	f43f af36 	beq.w	1906 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    1a9a:	b2e8      	uxtb	r0, r5
    1a9c:	e7bd      	b.n	1a1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1a9e:	0000      	.short	0x0000
    1aa0:	20000d8c 	.word	0x20000d8c
    1aa4:	20000db8 	.word	0x20000db8
    1aa8:	20000080 	.word	0x20000080

00001aac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    1aac:	4901      	ldr	r1, [pc, #4]	; (1ab4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    1aae:	7008      	strb	r0, [r1, #0]
    1ab0:	f000 b864 	b.w	1b7c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    1ab4:	20000186 	.word	0x20000186
    1ab8:	b538      	push	{r3, r4, r5, lr}
    1aba:	4603      	mov	r3, r0
    1abc:	4917      	ldr	r1, [pc, #92]	; (1b1c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    1abe:	2000      	movs	r0, #0
    1ac0:	7018      	strb	r0, [r3, #0]
    1ac2:	6908      	ldr	r0, [r1, #16]
    1ac4:	2401      	movs	r4, #1
    1ac6:	b140      	cbz	r0, 1ada <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    1ac8:	7a02      	ldrb	r2, [r0, #8]
    1aca:	f88d 2000 	strb.w	r2, [sp]
    1ace:	9a00      	ldr	r2, [sp, #0]
    1ad0:	9200      	str	r2, [sp, #0]
    1ad2:	f89d 5000 	ldrb.w	r5, [sp]
    1ad6:	2d00      	cmp	r5, #0
    1ad8:	d111      	bne.n	1afe <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    1ada:	6848      	ldr	r0, [r1, #4]
    1adc:	7a02      	ldrb	r2, [r0, #8]
    1ade:	f88d 2000 	strb.w	r2, [sp]
    1ae2:	9a00      	ldr	r2, [sp, #0]
    1ae4:	9200      	str	r2, [sp, #0]
    1ae6:	f89d 5000 	ldrb.w	r5, [sp]
    1aea:	2d01      	cmp	r5, #1
    1aec:	d006      	beq.n	1afc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    1aee:	f3ef 8210 	mrs	r2, PRIMASK
    1af2:	b672      	cpsid	i
    1af4:	6805      	ldr	r5, [r0, #0]
    1af6:	604d      	str	r5, [r1, #4]
    1af8:	b112      	cbz	r2, 1b00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    1afa:	e002      	b.n	1b02 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    1afc:	2000      	movs	r0, #0
    1afe:	bd38      	pop	{r3, r4, r5, pc}
    1b00:	b662      	cpsie	i
    1b02:	7a02      	ldrb	r2, [r0, #8]
    1b04:	f88d 2000 	strb.w	r2, [sp]
    1b08:	9a00      	ldr	r2, [sp, #0]
    1b0a:	9200      	str	r2, [sp, #0]
    1b0c:	f89d 5000 	ldrb.w	r5, [sp]
    1b10:	b10d      	cbz	r5, 1b16 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    1b12:	6108      	str	r0, [r1, #16]
    1b14:	bd38      	pop	{r3, r4, r5, pc}
    1b16:	701c      	strb	r4, [r3, #0]
    1b18:	bd38      	pop	{r3, r4, r5, pc}
    1b1a:	0000      	.short	0x0000
    1b1c:	20000db8 	.word	0x20000db8
    1b20:	b538      	push	{r3, r4, r5, lr}
    1b22:	b1d0      	cbz	r0, 1b5a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    1b24:	6041      	str	r1, [r0, #4]
    1b26:	f100 0108 	add.w	r1, r0, #8
    1b2a:	700a      	strb	r2, [r1, #0]
    1b2c:	f3ef 8310 	mrs	r3, PRIMASK
    1b30:	b672      	cpsid	i
    1b32:	4c10      	ldr	r4, [pc, #64]	; (1b74 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    1b34:	6004      	str	r4, [r0, #0]
    1b36:	1f21      	subs	r1, r4, #4
    1b38:	684a      	ldr	r2, [r1, #4]
    1b3a:	b14a      	cbz	r2, 1b50 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1b3c:	7a12      	ldrb	r2, [r2, #8]
    1b3e:	f88d 2000 	strb.w	r2, [sp]
    1b42:	9a00      	ldr	r2, [sp, #0]
    1b44:	9200      	str	r2, [sp, #0]
    1b46:	f89d 5000 	ldrb.w	r5, [sp]
    1b4a:	2d01      	cmp	r5, #1
    1b4c:	d100      	bne.n	1b50 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1b4e:	600c      	str	r4, [r1, #0]
    1b50:	680a      	ldr	r2, [r1, #0]
    1b52:	6010      	str	r0, [r2, #0]
    1b54:	6008      	str	r0, [r1, #0]
    1b56:	b12b      	cbz	r3, 1b64 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    1b58:	e005      	b.n	1b66 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    1b5a:	f240 2175 	movw	r1, #629	; 0x275
    1b5e:	2010      	movs	r0, #16
    1b60:	f7ff f80e 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b64:	b662      	cpsie	i
    1b66:	4804      	ldr	r0, [pc, #16]	; (1b78 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    1b68:	7800      	ldrb	r0, [r0, #0]
    1b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1b6e:	f006 bd8d 	b.w	868c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b72:	0000      	.short	0x0000
    1b74:	20000dbc 	.word	0x20000dbc
    1b78:	20000186 	.word	0x20000186
    1b7c:	b510      	push	{r4, lr}
    1b7e:	2214      	movs	r2, #20
    1b80:	2100      	movs	r1, #0
    1b82:	4808      	ldr	r0, [pc, #32]	; (1ba4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1b84:	f008 ff4c 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1b88:	4806      	ldr	r0, [pc, #24]	; (1ba4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1b8a:	2212      	movs	r2, #18
    1b8c:	2100      	movs	r1, #0
    1b8e:	3814      	subs	r0, #20
    1b90:	f008 ff46 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1b94:	4803      	ldr	r0, [pc, #12]	; (1ba4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1b96:	2101      	movs	r1, #1
    1b98:	7301      	strb	r1, [r0, #12]
    1b9a:	1d01      	adds	r1, r0, #4
    1b9c:	6041      	str	r1, [r0, #4]
    1b9e:	6001      	str	r1, [r0, #0]
    1ba0:	bd10      	pop	{r4, pc}
    1ba2:	0000      	.short	0x0000
    1ba4:	20000db8 	.word	0x20000db8

00001ba8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    1ba8:	b510      	push	{r4, lr}
    1baa:	4804      	ldr	r0, [pc, #16]	; (1bbc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    1bac:	f007 ff46 	bl	9a3c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    1bb0:	4802      	ldr	r0, [pc, #8]	; (1bbc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    1bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1bb6:	3008      	adds	r0, #8
    1bb8:	f007 bf40 	b.w	9a3c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    1bbc:	20000084 	.word	0x20000084

00001bc0 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    1bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc2:	f007 ff4f 	bl	9a64 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    1bc6:	4604      	mov	r4, r0
    1bc8:	460d      	mov	r5, r1
    1bca:	466a      	mov	r2, sp
    1bcc:	f000 f862 	bl	1c94 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1bd0:	b108      	cbz	r0, 1bd6 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    1bd2:	2001      	movs	r0, #1
    1bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bd6:	480f      	ldr	r0, [pc, #60]	; (1c14 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    1bd8:	7803      	ldrb	r3, [r0, #0]
    1bda:	7841      	ldrb	r1, [r0, #1]
    1bdc:	428b      	cmp	r3, r1
    1bde:	d101      	bne.n	1be4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    1be0:	2000      	movs	r0, #0
    1be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1be4:	461a      	mov	r2, r3
    1be6:	6841      	ldr	r1, [r0, #4]
    1be8:	e008      	b.n	1bfc <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    1bea:	bf00      	nop
    1bec:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1bf0:	1e52      	subs	r2, r2, #1
    1bf2:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    1bf6:	e9c6 7c00 	strd	r7, ip, [r6]
    1bfa:	b2d2      	uxtb	r2, r2
    1bfc:	f89d 6000 	ldrb.w	r6, [sp]
    1c00:	42b2      	cmp	r2, r6
    1c02:	d8f3      	bhi.n	1bec <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    1c04:	b2f2      	uxtb	r2, r6
    1c06:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    1c0a:	1c5b      	adds	r3, r3, #1
    1c0c:	e9c1 4500 	strd	r4, r5, [r1]
    1c10:	7003      	strb	r3, [r0, #0]
    1c12:	e7de      	b.n	1bd2 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    1c14:	20000094 	.word	0x20000094

00001c18 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    1c18:	b510      	push	{r4, lr}
    1c1a:	0742      	lsls	r2, r0, #29
    1c1c:	d003      	beq.n	1c26 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    1c1e:	2163      	movs	r1, #99	; 0x63
    1c20:	2048      	movs	r0, #72	; 0x48
    1c22:	f7fe ffad 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c26:	b120      	cbz	r0, 1c32 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    1c28:	4a03      	ldr	r2, [pc, #12]	; (1c38 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    1c2a:	7051      	strb	r1, [r2, #1]
    1c2c:	6050      	str	r0, [r2, #4]
    1c2e:	2000      	movs	r0, #0
    1c30:	7010      	strb	r0, [r2, #0]
    1c32:	00c8      	lsls	r0, r1, #3
    1c34:	bd10      	pop	{r4, pc}
    1c36:	0000      	.short	0x0000
    1c38:	20000094 	.word	0x20000094

00001c3c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    1c3c:	b538      	push	{r3, r4, r5, lr}
    1c3e:	f007 ff11 	bl	9a64 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    1c42:	466a      	mov	r2, sp
    1c44:	f000 f826 	bl	1c94 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1c48:	2800      	cmp	r0, #0
    1c4a:	d014      	beq.n	1c76 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    1c4c:	4a0a      	ldr	r2, [pc, #40]	; (1c78 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    1c4e:	7810      	ldrb	r0, [r2, #0]
    1c50:	1e40      	subs	r0, r0, #1
    1c52:	b2c1      	uxtb	r1, r0
    1c54:	7011      	strb	r1, [r2, #0]
    1c56:	f89d 0000 	ldrb.w	r0, [sp]
    1c5a:	6852      	ldr	r2, [r2, #4]
    1c5c:	e008      	b.n	1c70 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    1c5e:	bf00      	nop
    1c60:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    1c64:	1c40      	adds	r0, r0, #1
    1c66:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    1c6a:	e9c3 4500 	strd	r4, r5, [r3]
    1c6e:	b2c0      	uxtb	r0, r0
    1c70:	4288      	cmp	r0, r1
    1c72:	d3f5      	bcc.n	1c60 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    1c74:	2001      	movs	r0, #1
    1c76:	bd38      	pop	{r3, r4, r5, pc}
    1c78:	20000094 	.word	0x20000094

00001c7c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    1c7c:	4901      	ldr	r1, [pc, #4]	; (1c84 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    1c7e:	2000      	movs	r0, #0
    1c80:	7008      	strb	r0, [r1, #0]
    1c82:	4770      	bx	lr
    1c84:	20000094 	.word	0x20000094

00001c88 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    1c88:	4801      	ldr	r0, [pc, #4]	; (1c90 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    1c8a:	7840      	ldrb	r0, [r0, #1]
    1c8c:	4770      	bx	lr
    1c8e:	0000      	.short	0x0000
    1c90:	20000094 	.word	0x20000094
    1c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c96:	4d20      	ldr	r5, [pc, #128]	; (1d18 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    1c98:	2300      	movs	r3, #0
    1c9a:	7013      	strb	r3, [r2, #0]
    1c9c:	782b      	ldrb	r3, [r5, #0]
    1c9e:	b323      	cbz	r3, 1cea <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    1ca0:	2400      	movs	r4, #0
    1ca2:	1e5b      	subs	r3, r3, #1
    1ca4:	b2db      	uxtb	r3, r3
    1ca6:	f8d5 c004 	ldr.w	ip, [r5, #4]
    1caa:	e00b      	b.n	1cc4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    1cac:	18e5      	adds	r5, r4, r3
    1cae:	086d      	lsrs	r5, r5, #1
    1cb0:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    1cb4:	e9d6 7600 	ldrd	r7, r6, [r6]
    1cb8:	1a3f      	subs	r7, r7, r0
    1cba:	418e      	sbcs	r6, r1
    1cbc:	d201      	bcs.n	1cc2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    1cbe:	462c      	mov	r4, r5
    1cc0:	e000      	b.n	1cc4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    1cc2:	462b      	mov	r3, r5
    1cc4:	1b1d      	subs	r5, r3, r4
    1cc6:	2d01      	cmp	r5, #1
    1cc8:	dcf0      	bgt.n	1cac <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    1cca:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    1cce:	e9d6 5600 	ldrd	r5, r6, [r6]
    1cd2:	ea80 0705 	eor.w	r7, r0, r5
    1cd6:	ea81 0e06 	eor.w	lr, r1, r6
    1cda:	ea57 070e 	orrs.w	r7, r7, lr
    1cde:	d005      	beq.n	1cec <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    1ce0:	1b45      	subs	r5, r0, r5
    1ce2:	eb71 0506 	sbcs.w	r5, r1, r6
    1ce6:	d203      	bcs.n	1cf0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    1ce8:	7014      	strb	r4, [r2, #0]
    1cea:	e010      	b.n	1d0e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    1cec:	7014      	strb	r4, [r2, #0]
    1cee:	e011      	b.n	1d14 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    1cf0:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    1cf4:	e9d5 4500 	ldrd	r4, r5, [r5]
    1cf8:	ea80 0604 	eor.w	r6, r0, r4
    1cfc:	ea81 0705 	eor.w	r7, r1, r5
    1d00:	433e      	orrs	r6, r7
    1d02:	d006      	beq.n	1d12 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    1d04:	1b00      	subs	r0, r0, r4
    1d06:	41a9      	sbcs	r1, r5
    1d08:	d300      	bcc.n	1d0c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    1d0a:	1c5b      	adds	r3, r3, #1
    1d0c:	7013      	strb	r3, [r2, #0]
    1d0e:	2000      	movs	r0, #0
    1d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d12:	7013      	strb	r3, [r2, #0]
    1d14:	2001      	movs	r0, #1
    1d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d18:	20000094 	.word	0x20000094

00001d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    1d1c:	4801      	ldr	r0, [pc, #4]	; (1d24 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    1d1e:	6840      	ldr	r0, [r0, #4]
    1d20:	30a0      	adds	r0, #160	; 0xa0
    1d22:	4770      	bx	lr
    1d24:	2000009c 	.word	0x2000009c

00001d28 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    1d28:	b510      	push	{r4, lr}
    1d2a:	4c21      	ldr	r4, [pc, #132]	; (1db0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64>)
    1d2c:	6860      	ldr	r0, [r4, #4]
    1d2e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    1d32:	f007 fec7 	bl	9ac4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    1d36:	6861      	ldr	r1, [r4, #4]
    1d38:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    1d3c:	314a      	adds	r1, #74	; 0x4a
    1d3e:	f7ff fc39 	bl	15b4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    1d42:	6860      	ldr	r0, [r4, #4]
    1d44:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    1d48:	f007 fec3 	bl	9ad2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    1d4c:	6861      	ldr	r1, [r4, #4]
    1d4e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    1d52:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1d56:	314a      	adds	r1, #74	; 0x4a
    1d58:	f007 fea0 	bl	9a9c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    1d5c:	b930      	cbnz	r0, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5e:	6861      	ldr	r1, [r4, #4]
    1d60:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1d64:	314a      	adds	r1, #74	; 0x4a
    1d66:	f007 fea2 	bl	9aae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1d6a:	b108      	cbz	r0, 1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1d6c:	2101      	movs	r1, #1
    1d6e:	e000      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d70:	2100      	movs	r1, #0
    1d72:	6860      	ldr	r0, [r4, #4]
    1d74:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    1d78:	b919      	cbnz	r1, 1d82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d7a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1d7e:	2800      	cmp	r0, #0
    1d80:	d014      	beq.n	1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1d82:	f7ff fcf9 	bl	1778 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    1d86:	490b      	ldr	r1, [pc, #44]	; (1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>)
    1d88:	fba0 2301 	umull	r2, r3, r0, r1
    1d8c:	6860      	ldr	r0, [r4, #4]
    1d8e:	3090      	adds	r0, #144	; 0x90
    1d90:	f007 fefd 	bl	9b8e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    1d94:	6860      	ldr	r0, [r4, #4]
    1d96:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1d9a:	b110      	cbz	r0, 1da2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d9c:	2000      	movs	r0, #0
    1d9e:	f7ff fc75 	bl	168c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    1da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1da6:	2000      	movs	r0, #0
    1da8:	f000 bcc0 	b.w	272c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x750>
    1dac:	bd10      	pop	{r4, pc}
    1dae:	0000      	.short	0x0000
    1db0:	2000009c 	.word	0x2000009c
    1db4:	000f4240 	.word	0x000f4240

00001db8 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    1db8:	4a04      	ldr	r2, [pc, #16]	; (1dcc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    1dba:	2803      	cmp	r0, #3
    1dbc:	6852      	ldr	r2, [r2, #4]
    1dbe:	d100      	bne.n	1dc2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    1dc0:	6551      	str	r1, [r2, #84]	; 0x54
    1dc2:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    1dc6:	2000      	movs	r0, #0
    1dc8:	4770      	bx	lr
    1dca:	0000      	.short	0x0000
    1dcc:	2000009c 	.word	0x2000009c

00001dd0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    1dd0:	480a      	ldr	r0, [pc, #40]	; (1dfc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    1dd2:	6841      	ldr	r1, [r0, #4]
    1dd4:	6e88      	ldr	r0, [r1, #104]	; 0x68
    1dd6:	b170      	cbz	r0, 1df6 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    1dd8:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    1ddc:	22ff      	movs	r2, #255	; 0xff
    1dde:	7002      	strb	r2, [r0, #0]
    1de0:	2200      	movs	r2, #0
    1de2:	668a      	str	r2, [r1, #104]	; 0x68
    1de4:	7002      	strb	r2, [r0, #0]
    1de6:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    1dea:	2001      	movs	r0, #1
    1dec:	4088      	lsls	r0, r1
    1dee:	4904      	ldr	r1, [pc, #16]	; (1e00 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    1df0:	6008      	str	r0, [r1, #0]
    1df2:	2000      	movs	r0, #0
    1df4:	4770      	bx	lr
    1df6:	200c      	movs	r0, #12
    1df8:	4770      	bx	lr
    1dfa:	0000      	.short	0x0000
    1dfc:	2000009c 	.word	0x2000009c
    1e00:	4001f508 	.word	0x4001f508

00001e04 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    1e04:	4602      	mov	r2, r0
    1e06:	480c      	ldr	r0, [pc, #48]	; (1e38 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    1e08:	b510      	push	{r4, lr}
    1e0a:	6082      	str	r2, [r0, #8]
    1e0c:	68c0      	ldr	r0, [r0, #12]
    1e0e:	460c      	mov	r4, r1
    1e10:	b168      	cbz	r0, 1e2e <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    1e12:	f000 fe69 	bl	2ae8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0c>
    1e16:	f007 ffa0 	bl	9d5a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    1e1a:	4620      	mov	r0, r4
    1e1c:	f000 f830 	bl	1e80 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    1e20:	2800      	cmp	r0, #0
    1e22:	d007      	beq.n	1e34 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    1e24:	f640 11bb 	movw	r1, #2491	; 0x9bb
    1e28:	2032      	movs	r0, #50	; 0x32
    1e2a:	f7fe fea9 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e2e:	f640 11b5 	movw	r1, #2485	; 0x9b5
    1e32:	e7f9      	b.n	1e28 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    1e34:	bd10      	pop	{r4, pc}
    1e36:	0000      	.short	0x0000
    1e38:	2000009c 	.word	0x2000009c

00001e3c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    1e3c:	4902      	ldr	r1, [pc, #8]	; (1e48 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    1e3e:	4801      	ldr	r0, [pc, #4]	; (1e44 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    1e40:	60c8      	str	r0, [r1, #12]
    1e42:	4770      	bx	lr
    1e44:	00002c9c 	.word	0x00002c9c
    1e48:	2000009c 	.word	0x2000009c

00001e4c <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	4605      	mov	r5, r0
    1e50:	f7ff fa4a 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    1e54:	4604      	mov	r4, r0
    1e56:	f7ff fa4d 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    1e5a:	4621      	mov	r1, r4
    1e5c:	f007 fe95 	bl	9b8a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    1e60:	0001      	movs	r1, r0
    1e62:	d006      	beq.n	1e72 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    1e64:	4805      	ldr	r0, [pc, #20]	; (1e7c <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    1e66:	68c0      	ldr	r0, [r0, #12]
    1e68:	6802      	ldr	r2, [r0, #0]
    1e6a:	4628      	mov	r0, r5
    1e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e70:	4710      	bx	r2
    1e72:	f640 21b1 	movw	r1, #2737	; 0xab1
    1e76:	2032      	movs	r0, #50	; 0x32
    1e78:	f7fe fe82 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e7c:	2000009c 	.word	0x2000009c

00001e80 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    1e80:	b570      	push	{r4, r5, r6, lr}
    1e82:	4d19      	ldr	r5, [pc, #100]	; (1ee8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    1e84:	4604      	mov	r4, r0
    1e86:	6868      	ldr	r0, [r5, #4]
    1e88:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    1e8c:	2901      	cmp	r1, #1
    1e8e:	d004      	beq.n	1e9a <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    1e90:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    1e94:	b108      	cbz	r0, 1e9a <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    1e96:	200c      	movs	r0, #12
    1e98:	bd70      	pop	{r4, r5, r6, pc}
    1e9a:	f7ff fa4f 	bl	133c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    1e9e:	f007 ff5c 	bl	9d5a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    1ea2:	f000 f8b9 	bl	2018 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    1ea6:	2246      	movs	r2, #70	; 0x46
    1ea8:	2100      	movs	r1, #0
    1eaa:	6868      	ldr	r0, [r5, #4]
    1eac:	f008 fdb8 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1eb0:	6869      	ldr	r1, [r5, #4]
    1eb2:	2200      	movs	r2, #0
    1eb4:	2001      	movs	r0, #1
    1eb6:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    1eba:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    1ebe:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    1ec2:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    1ec6:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    1eca:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    1ece:	2007      	movs	r0, #7
    1ed0:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    1ed4:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    1ed8:	23ff      	movs	r3, #255	; 0xff
    1eda:	7003      	strb	r3, [r0, #0]
    1edc:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    1ee0:	668a      	str	r2, [r1, #104]	; 0x68
    1ee2:	7002      	strb	r2, [r0, #0]
    1ee4:	2000      	movs	r0, #0
    1ee6:	bd70      	pop	{r4, r5, r6, pc}
    1ee8:	2000009c 	.word	0x2000009c

00001eec <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    1eec:	4805      	ldr	r0, [pc, #20]	; (1f04 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    1eee:	b510      	push	{r4, lr}
    1ef0:	6840      	ldr	r0, [r0, #4]
    1ef2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    1ef6:	f007 fde5 	bl	9ac4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    1efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1efe:	f7ff bb85 	b.w	160c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1f02:	0000      	.short	0x0000
    1f04:	2000009c 	.word	0x2000009c

00001f08 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    1f08:	b140      	cbz	r0, 1f1c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    1f0a:	2802      	cmp	r0, #2
    1f0c:	d006      	beq.n	1f1c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    1f0e:	2200      	movs	r2, #0
    1f10:	4903      	ldr	r1, [pc, #12]	; (1f20 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    1f12:	6849      	ldr	r1, [r1, #4]
    1f14:	f801 2f51 	strb.w	r2, [r1, #81]!
    1f18:	7208      	strb	r0, [r1, #8]
    1f1a:	4770      	bx	lr
    1f1c:	2201      	movs	r2, #1
    1f1e:	e7f7      	b.n	1f10 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    1f20:	2000009c 	.word	0x2000009c

00001f24 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    1f24:	b510      	push	{r4, lr}
    1f26:	4603      	mov	r3, r0
    1f28:	7800      	ldrb	r0, [r0, #0]
    1f2a:	07c0      	lsls	r0, r0, #31
    1f2c:	d005      	beq.n	1f3a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    1f2e:	7858      	ldrb	r0, [r3, #1]
    1f30:	2100      	movs	r1, #0
    1f32:	f7ff ff41 	bl	1db8 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    1f36:	2800      	cmp	r0, #0
    1f38:	d10c      	bne.n	1f54 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    1f3a:	4c07      	ldr	r4, [pc, #28]	; (1f58 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    1f3c:	7898      	ldrb	r0, [r3, #2]
    1f3e:	6861      	ldr	r1, [r4, #4]
    1f40:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    1f44:	78d8      	ldrb	r0, [r3, #3]
    1f46:	f7ff ffdf 	bl	1f08 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    1f4a:	6861      	ldr	r1, [r4, #4]
    1f4c:	7918      	ldrb	r0, [r3, #4]
    1f4e:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    1f52:	2000      	movs	r0, #0
    1f54:	bd10      	pop	{r4, pc}
    1f56:	0000      	.short	0x0000
    1f58:	2000009c 	.word	0x2000009c

00001f5c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    1f5c:	4801      	ldr	r0, [pc, #4]	; (1f64 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    1f5e:	68c0      	ldr	r0, [r0, #12]
    1f60:	6840      	ldr	r0, [r0, #4]
    1f62:	4700      	bx	r0
    1f64:	2000009c 	.word	0x2000009c

00001f68 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    1f68:	4807      	ldr	r0, [pc, #28]	; (1f88 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    1f6a:	b508      	push	{r3, lr}
    1f6c:	6840      	ldr	r0, [r0, #4]
    1f6e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    1f72:	f88d 0000 	strb.w	r0, [sp]
    1f76:	9800      	ldr	r0, [sp, #0]
    1f78:	9000      	str	r0, [sp, #0]
    1f7a:	f89d 0000 	ldrb.w	r0, [sp]
    1f7e:	2800      	cmp	r0, #0
    1f80:	d000      	beq.n	1f84 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    1f82:	2001      	movs	r0, #1
    1f84:	bd08      	pop	{r3, pc}
    1f86:	0000      	.short	0x0000
    1f88:	2000009c 	.word	0x2000009c

00001f8c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    1f8c:	b510      	push	{r4, lr}
    1f8e:	f000 f903 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1f92:	4b0c      	ldr	r3, [pc, #48]	; (1fc4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    1f94:	b140      	cbz	r0, 1fa8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    1f96:	6858      	ldr	r0, [r3, #4]
    1f98:	2101      	movs	r1, #1
    1f9a:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    1f9e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1fa0:	8809      	ldrh	r1, [r1, #0]
    1fa2:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    1fa6:	e004      	b.n	1fb2 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    1fa8:	6859      	ldr	r1, [r3, #4]
    1faa:	2000      	movs	r0, #0
    1fac:	f801 0f42 	strb.w	r0, [r1, #66]!
    1fb0:	8048      	strh	r0, [r1, #2]
    1fb2:	6858      	ldr	r0, [r3, #4]
    1fb4:	2202      	movs	r2, #2
    1fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fba:	4903      	ldr	r1, [pc, #12]	; (1fc8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    1fbc:	3038      	adds	r0, #56	; 0x38
    1fbe:	f007 bd29 	b.w	9a14 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1fc2:	0000      	.short	0x0000
    1fc4:	2000009c 	.word	0x2000009c
    1fc8:	00002a81 	.word	0x00002a81

00001fcc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    1fcc:	4802      	ldr	r0, [pc, #8]	; (1fd8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    1fce:	6840      	ldr	r0, [r0, #4]
    1fd0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1fd4:	4770      	bx	lr
    1fd6:	0000      	.short	0x0000
    1fd8:	2000009c 	.word	0x2000009c

00001fdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    1fdc:	b510      	push	{r4, lr}
    1fde:	f000 f8db 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1fe2:	490c      	ldr	r1, [pc, #48]	; (2014 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    1fe4:	b128      	cbz	r0, 1ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    1fe6:	6848      	ldr	r0, [r1, #4]
    1fe8:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    1fec:	2801      	cmp	r0, #1
    1fee:	d00e      	beq.n	200e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    1ff0:	e00c      	b.n	200c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    1ff2:	6849      	ldr	r1, [r1, #4]
    1ff4:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    1ff8:	2801      	cmp	r0, #1
    1ffa:	d001      	beq.n	2000 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    1ffc:	2802      	cmp	r0, #2
    1ffe:	d105      	bne.n	200c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    2000:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    2004:	2801      	cmp	r0, #1
    2006:	d003      	beq.n	2010 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    2008:	2803      	cmp	r0, #3
    200a:	d001      	beq.n	2010 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    200c:	2000      	movs	r0, #0
    200e:	bd10      	pop	{r4, pc}
    2010:	2001      	movs	r0, #1
    2012:	bd10      	pop	{r4, pc}
    2014:	2000009c 	.word	0x2000009c
    2018:	b510      	push	{r4, lr}
    201a:	4c07      	ldr	r4, [pc, #28]	; (2038 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    201c:	6860      	ldr	r0, [r4, #4]
    201e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    2022:	2800      	cmp	r0, #0
    2024:	d007      	beq.n	2036 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    2026:	f001 ff13 	bl	3e50 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    202a:	f001 fe31 	bl	3c90 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    202e:	6861      	ldr	r1, [r4, #4]
    2030:	2000      	movs	r0, #0
    2032:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    2036:	bd10      	pop	{r4, pc}
    2038:	2000009c 	.word	0x2000009c
    203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2040:	4d10      	ldr	r5, [pc, #64]	; (2084 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    2042:	4606      	mov	r6, r0
    2044:	460f      	mov	r7, r1
    2046:	6868      	ldr	r0, [r5, #4]
    2048:	490f      	ldr	r1, [pc, #60]	; (2088 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    204a:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    204e:	5c0c      	ldrb	r4, [r1, r0]
    2050:	4620      	mov	r0, r4
    2052:	f002 fa2f 	bl	44b4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2056:	6868      	ldr	r0, [r5, #4]
    2058:	2101      	movs	r1, #1
    205a:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
    205e:	2025      	movs	r0, #37	; 0x25
    2060:	f002 f9fe 	bl	4460 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2064:	4638      	mov	r0, r7
    2066:	f002 f939 	bl	42dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    206a:	f04f 0101 	mov.w	r1, #1
    206e:	4608      	mov	r0, r1
    2070:	b126      	cbz	r6, 207c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    2072:	f001 ff99 	bl	3fa8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    2076:	b918      	cbnz	r0, 2080 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    2078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    207c:	f001 ff5a 	bl	3f34 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    2080:	2001      	movs	r0, #1
    2082:	e7f9      	b.n	2078 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    2084:	2000009c 	.word	0x2000009c
    2088:	0000ab6a 	.word	0x0000ab6a
    208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    208e:	2600      	movs	r6, #0
    2090:	460f      	mov	r7, r1
    2092:	4605      	mov	r5, r0
    2094:	f88d 6000 	strb.w	r6, [sp]
    2098:	466b      	mov	r3, sp
    209a:	f000 f895 	bl	21c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ec>
    209e:	0001      	movs	r1, r0
    20a0:	4810      	ldr	r0, [pc, #64]	; (20e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>)
    20a2:	d003      	beq.n	20ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    20a4:	6840      	ldr	r0, [r0, #4]
    20a6:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    20aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20ac:	6840      	ldr	r0, [r0, #4]
    20ae:	f89d 1000 	ldrb.w	r1, [sp]
    20b2:	2f07      	cmp	r7, #7
    20b4:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    20b8:	d301      	bcc.n	20be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2>
    20ba:	4634      	mov	r4, r6
    20bc:	e002      	b.n	20c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    20be:	0022      	movs	r2, r4
    20c0:	d100      	bne.n	20c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    20c2:	460c      	mov	r4, r1
    20c4:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    20c8:	6869      	ldr	r1, [r5, #4]
    20ca:	2900      	cmp	r1, #0
    20cc:	d0ed      	beq.n	20aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce>
    20ce:	7c69      	ldrb	r1, [r5, #17]
    20d0:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    20d4:	6869      	ldr	r1, [r5, #4]
    20d6:	680a      	ldr	r2, [r1, #0]
    20d8:	f840 2f83 	str.w	r2, [r0, #131]!
    20dc:	8889      	ldrh	r1, [r1, #4]
    20de:	8081      	strh	r1, [r0, #4]
    20e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20e2:	0000      	.short	0x0000
    20e4:	2000009c 	.word	0x2000009c
    20e8:	b510      	push	{r4, lr}
    20ea:	4915      	ldr	r1, [pc, #84]	; (2140 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x164>)
    20ec:	6842      	ldr	r2, [r0, #4]
    20ee:	6849      	ldr	r1, [r1, #4]
    20f0:	7813      	ldrb	r3, [r2, #0]
    20f2:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    20f6:	42a3      	cmp	r3, r4
    20f8:	d11f      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    20fa:	7853      	ldrb	r3, [r2, #1]
    20fc:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    2100:	42a3      	cmp	r3, r4
    2102:	d11a      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    2104:	7893      	ldrb	r3, [r2, #2]
    2106:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    210a:	42a3      	cmp	r3, r4
    210c:	d115      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    210e:	78d3      	ldrb	r3, [r2, #3]
    2110:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    2114:	42a3      	cmp	r3, r4
    2116:	d110      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    2118:	7913      	ldrb	r3, [r2, #4]
    211a:	f891 4087 	ldrb.w	r4, [r1, #135]	; 0x87
    211e:	42a3      	cmp	r3, r4
    2120:	d10b      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    2122:	7952      	ldrb	r2, [r2, #5]
    2124:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
    2128:	429a      	cmp	r2, r3
    212a:	d106      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    212c:	7c40      	ldrb	r0, [r0, #17]
    212e:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    2132:	4288      	cmp	r0, r1
    2134:	d101      	bne.n	213a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    2136:	2001      	movs	r0, #1
    2138:	bd10      	pop	{r4, pc}
    213a:	2000      	movs	r0, #0
    213c:	bd10      	pop	{r4, pc}
    213e:	0000      	.short	0x0000
    2140:	2000009c 	.word	0x2000009c
    2144:	b510      	push	{r4, lr}
    2146:	7801      	ldrb	r1, [r0, #0]
    2148:	b08c      	sub	sp, #48	; 0x30
    214a:	f001 040f 	and.w	r4, r1, #15
    214e:	4622      	mov	r2, r4
    2150:	a901      	add	r1, sp, #4
    2152:	f000 fe31 	bl	2db8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    2156:	f001 fe9d 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    215a:	f000 fb27 	bl	27ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d0>
    215e:	2c04      	cmp	r4, #4
    2160:	d114      	bne.n	218c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    2162:	a801      	add	r0, sp, #4
    2164:	f7ff ffc0 	bl	20e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    2168:	b180      	cbz	r0, 218c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    216a:	a80b      	add	r0, sp, #44	; 0x2c
    216c:	f000 fb26 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    2170:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    2174:	9000      	str	r0, [sp, #0]
    2176:	4807      	ldr	r0, [pc, #28]	; (2194 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>)
    2178:	6840      	ldr	r0, [r0, #4]
    217a:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    217e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    2182:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    2186:	a801      	add	r0, sp, #4
    2188:	f007 fd9c 	bl	9cc4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    218c:	b00c      	add	sp, #48	; 0x30
    218e:	2005      	movs	r0, #5
    2190:	bd10      	pop	{r4, pc}
    2192:	0000      	.short	0x0000
    2194:	2000009c 	.word	0x2000009c
    2198:	4804      	ldr	r0, [pc, #16]	; (21ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d0>)
    219a:	6840      	ldr	r0, [r0, #4]
    219c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    21a0:	2803      	cmp	r0, #3
    21a2:	d001      	beq.n	21a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1cc>
    21a4:	2000      	movs	r0, #0
    21a6:	4770      	bx	lr
    21a8:	2001      	movs	r0, #1
    21aa:	4770      	bx	lr
    21ac:	2000009c 	.word	0x2000009c
    21b0:	7c82      	ldrb	r2, [r0, #18]
    21b2:	6883      	ldr	r3, [r0, #8]
    21b4:	4803      	ldr	r0, [pc, #12]	; (21c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e8>)
    21b6:	6841      	ldr	r1, [r0, #4]
    21b8:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    21bc:	314a      	adds	r1, #74	; 0x4a
    21be:	f007 ba94 	b.w	96ea <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    21c2:	0000      	.short	0x0000
    21c4:	2000009c 	.word	0x2000009c
    21c8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    21ca:	6841      	ldr	r1, [r0, #4]
    21cc:	461e      	mov	r6, r3
    21ce:	4604      	mov	r4, r0
    21d0:	b301      	cbz	r1, 2214 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x238>
    21d2:	7c60      	ldrb	r0, [r4, #17]
    21d4:	f007 fc6b 	bl	9aae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    21d8:	4d19      	ldr	r5, [pc, #100]	; (2240 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    21da:	6869      	ldr	r1, [r5, #4]
    21dc:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    21e0:	b141      	cbz	r1, 21f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    21e2:	b138      	cbz	r0, 21f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    21e4:	f007 fb17 	bl	9816 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    21e8:	6869      	ldr	r1, [r5, #4]
    21ea:	f801 0f78 	strb.w	r0, [r1, #120]!
    21ee:	7048      	strb	r0, [r1, #1]
    21f0:	2001      	movs	r0, #1
    21f2:	71c8      	strb	r0, [r1, #7]
    21f4:	6868      	ldr	r0, [r5, #4]
    21f6:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    21fa:	28ff      	cmp	r0, #255	; 0xff
    21fc:	d00c      	beq.n	2218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23c>
    21fe:	466a      	mov	r2, sp
    2200:	a902      	add	r1, sp, #8
    2202:	f7ff fa9f 	bl	1744 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    2206:	b1a8      	cbz	r0, 2234 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    2208:	4669      	mov	r1, sp
    220a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    220e:	f007 fc22 	bl	9a56 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    2212:	7030      	strb	r0, [r6, #0]
    2214:	2000      	movs	r0, #0
    2216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2218:	7c60      	ldrb	r0, [r4, #17]
    221a:	6861      	ldr	r1, [r4, #4]
    221c:	f007 fc1b 	bl	9a56 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    2220:	7030      	strb	r0, [r6, #0]
    2222:	686a      	ldr	r2, [r5, #4]
    2224:	7c60      	ldrb	r0, [r4, #17]
    2226:	6861      	ldr	r1, [r4, #4]
    2228:	3278      	adds	r2, #120	; 0x78
    222a:	f7ff faab 	bl	1784 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    222e:	f080 0001 	eor.w	r0, r0, #1
    2232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2234:	f640 5134 	movw	r1, #3380	; 0xd34
    2238:	2032      	movs	r0, #50	; 0x32
    223a:	f7fe fca1 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    223e:	0000      	.short	0x0000
    2240:	2000009c 	.word	0x2000009c
    2244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2248:	4c4c      	ldr	r4, [pc, #304]	; (237c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    224a:	4606      	mov	r6, r0
    224c:	2100      	movs	r1, #0
    224e:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    2252:	3570      	adds	r5, #112	; 0x70
    2254:	8001      	strh	r1, [r0, #0]
    2256:	2e03      	cmp	r6, #3
    2258:	d002      	beq.n	2260 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>
    225a:	2e05      	cmp	r6, #5
    225c:	d004      	beq.n	2268 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x28c>
    225e:	e051      	b.n	2304 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    2260:	2103      	movs	r1, #3
    2262:	f007 fba0 	bl	99a6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2266:	e04d      	b.n	2304 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    2268:	2105      	movs	r1, #5
    226a:	f007 fb9c 	bl	99a6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    226e:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    2272:	6d41      	ldr	r1, [r0, #84]	; 0x54
    2274:	6949      	ldr	r1, [r1, #20]
    2276:	f8c7 100f 	str.w	r1, [r7, #15]
    227a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    227c:	69c9      	ldr	r1, [r1, #28]
    227e:	74f9      	strb	r1, [r7, #19]
    2280:	0a0a      	lsrs	r2, r1, #8
    2282:	753a      	strb	r2, [r7, #20]
    2284:	0c09      	lsrs	r1, r1, #16
    2286:	7579      	strb	r1, [r7, #21]
    2288:	6d40      	ldr	r0, [r0, #84]	; 0x54
    228a:	6901      	ldr	r1, [r0, #16]
    228c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    228e:	f007 fb4c 	bl	992a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    2292:	75b8      	strb	r0, [r7, #22]
    2294:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    2298:	6d40      	ldr	r0, [r0, #84]	; 0x54
    229a:	6901      	ldr	r1, [r0, #16]
    229c:	6a00      	ldr	r0, [r0, #32]
    229e:	f007 fb35 	bl	990c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    22a2:	75f8      	strb	r0, [r7, #23]
    22a4:	0a00      	lsrs	r0, r0, #8
    22a6:	7638      	strb	r0, [r7, #24]
    22a8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    22ac:	6d40      	ldr	r0, [r0, #84]	; 0x54
    22ae:	6900      	ldr	r0, [r0, #16]
    22b0:	f007 fae9 	bl	9886 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    22b4:	7678      	strb	r0, [r7, #25]
    22b6:	0a00      	lsrs	r0, r0, #8
    22b8:	76b8      	strb	r0, [r7, #26]
    22ba:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    22be:	6d41      	ldr	r1, [r0, #84]	; 0x54
    22c0:	8b09      	ldrh	r1, [r1, #24]
    22c2:	f807 1f1b 	strb.w	r1, [r7, #27]!
    22c6:	0a09      	lsrs	r1, r1, #8
    22c8:	7079      	strb	r1, [r7, #1]
    22ca:	6d41      	ldr	r1, [r0, #84]	; 0x54
    22cc:	8b49      	ldrh	r1, [r1, #26]
    22ce:	70b9      	strb	r1, [r7, #2]
    22d0:	0a09      	lsrs	r1, r1, #8
    22d2:	70f9      	strb	r1, [r7, #3]
    22d4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    22d6:	f851 2fae 	ldr.w	r2, [r1, #174]!
    22da:	607a      	str	r2, [r7, #4]
    22dc:	7909      	ldrb	r1, [r1, #4]
    22de:	7239      	strb	r1, [r7, #8]
    22e0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    22e2:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    22e6:	7a78      	ldrb	r0, [r7, #9]
    22e8:	f001 011f 	and.w	r1, r1, #31
    22ec:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    22f0:	4308      	orrs	r0, r1
    22f2:	7278      	strb	r0, [r7, #9]
    22f4:	f001 fcac 	bl	3c50 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    22f8:	7a79      	ldrb	r1, [r7, #9]
    22fa:	f001 011f 	and.w	r1, r1, #31
    22fe:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    2302:	7279      	strb	r1, [r7, #9]
    2304:	f105 0113 	add.w	r1, r5, #19
    2308:	68a0      	ldr	r0, [r4, #8]
    230a:	f007 fb67 	bl	99dc <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    230e:	7ea9      	ldrb	r1, [r5, #26]
    2310:	68a0      	ldr	r0, [r4, #8]
    2312:	f007 fb69 	bl	99e8 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2316:	6860      	ldr	r0, [r4, #4]
    2318:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    231c:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    2320:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    2324:	b188      	cbz	r0, 234a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    2326:	f7ff ff37 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    232a:	b130      	cbz	r0, 233a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    232c:	6860      	ldr	r0, [r4, #4]
    232e:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    2332:	b111      	cbz	r1, 233a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    2334:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    2338:	e002      	b.n	2340 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    233a:	6860      	ldr	r0, [r4, #4]
    233c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    2340:	f7ff f9d8 	bl	16f4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    2344:	b108      	cbz	r0, 234a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    2346:	2701      	movs	r7, #1
    2348:	4605      	mov	r5, r0
    234a:	4629      	mov	r1, r5
    234c:	68a0      	ldr	r0, [r4, #8]
    234e:	f007 fb52 	bl	99f6 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    2352:	4639      	mov	r1, r7
    2354:	68a0      	ldr	r0, [r4, #8]
    2356:	f007 fb54 	bl	9a02 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    235a:	68a0      	ldr	r0, [r4, #8]
    235c:	f001 ffbe 	bl	42dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2360:	2e05      	cmp	r6, #5
    2362:	d108      	bne.n	2376 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    2364:	6860      	ldr	r0, [r4, #4]
    2366:	682a      	ldr	r2, [r5, #0]
    2368:	6d41      	ldr	r1, [r0, #84]	; 0x54
    236a:	f8c1 200a 	str.w	r2, [r1, #10]
    236e:	88aa      	ldrh	r2, [r5, #4]
    2370:	81ca      	strh	r2, [r1, #14]
    2372:	6d40      	ldr	r0, [r0, #84]	; 0x54
    2374:	7247      	strb	r7, [r0, #9]
    2376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    237a:	0000      	.short	0x0000
    237c:	2000009c 	.word	0x2000009c
    2380:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2384:	4f65      	ldr	r7, [pc, #404]	; (251c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x540>)
    2386:	4604      	mov	r4, r0
    2388:	6878      	ldr	r0, [r7, #4]
    238a:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    238e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    2392:	b180      	cbz	r0, 23b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3da>
    2394:	2600      	movs	r6, #0
    2396:	2500      	movs	r5, #0
    2398:	7ca0      	ldrb	r0, [r4, #18]
    239a:	68a1      	ldr	r1, [r4, #8]
    239c:	f007 fb87 	bl	9aae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    23a0:	4682      	mov	sl, r0
    23a2:	f7ff fef9 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    23a6:	b140      	cbz	r0, 23ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    23a8:	6878      	ldr	r0, [r7, #4]
    23aa:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    23ae:	b121      	cbz	r1, 23ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    23b0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    23b4:	e004      	b.n	23c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e4>
    23b6:	2601      	movs	r6, #1
    23b8:	e7ed      	b.n	2396 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    23ba:	6878      	ldr	r0, [r7, #4]
    23bc:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    23c0:	4683      	mov	fp, r0
    23c2:	f7ff f949 	bl	1658 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    23c6:	ea5f 0900 	movs.w	r9, r0
    23ca:	d00c      	beq.n	23e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    23cc:	4658      	mov	r0, fp
    23ce:	f7ff f937 	bl	1640 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    23d2:	b100      	cbz	r0, 23d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fa>
    23d4:	2601      	movs	r6, #1
    23d6:	f1ba 0f00 	cmp.w	sl, #0
    23da:	d004      	beq.n	23e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    23dc:	4648      	mov	r0, r9
    23de:	68a1      	ldr	r1, [r4, #8]
    23e0:	f007 f9e8 	bl	97b4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    23e4:	4605      	mov	r5, r0
    23e6:	6878      	ldr	r0, [r7, #4]
    23e8:	46b9      	mov	r9, r7
    23ea:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    23ee:	b10d      	cbz	r5, 23f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x418>
    23f0:	f047 0702 	orr.w	r7, r7, #2
    23f4:	f7ff fed0 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    23f8:	b3a0      	cbz	r0, 2464 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x488>
    23fa:	6860      	ldr	r0, [r4, #4]
    23fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2400:	7802      	ldrb	r2, [r0, #0]
    2402:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    2406:	429a      	cmp	r2, r3
    2408:	d11f      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    240a:	7842      	ldrb	r2, [r0, #1]
    240c:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    2410:	429a      	cmp	r2, r3
    2412:	d11a      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    2414:	7882      	ldrb	r2, [r0, #2]
    2416:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    241a:	429a      	cmp	r2, r3
    241c:	d115      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    241e:	78c2      	ldrb	r2, [r0, #3]
    2420:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    2424:	429a      	cmp	r2, r3
    2426:	d110      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    2428:	7902      	ldrb	r2, [r0, #4]
    242a:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    242e:	429a      	cmp	r2, r3
    2430:	d10b      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    2432:	7940      	ldrb	r0, [r0, #5]
    2434:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    2438:	4290      	cmp	r0, r2
    243a:	d106      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    243c:	7c60      	ldrb	r0, [r4, #17]
    243e:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    2442:	4288      	cmp	r0, r1
    2444:	d101      	bne.n	244a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    2446:	2001      	movs	r0, #1
    2448:	e000      	b.n	244c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x470>
    244a:	2000      	movs	r0, #0
    244c:	4f34      	ldr	r7, [pc, #208]	; (2520 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x544>)
    244e:	4682      	mov	sl, r0
    2450:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    2454:	2808      	cmp	r0, #8
    2456:	d006      	beq.n	2466 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    2458:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    245c:	4288      	cmp	r0, r1
    245e:	d102      	bne.n	2466 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    2460:	2001      	movs	r0, #1
    2462:	e001      	b.n	2468 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>
    2464:	e021      	b.n	24aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    2466:	2000      	movs	r0, #0
    2468:	4681      	mov	r9, r0
    246a:	b925      	cbnz	r5, 2476 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49a>
    246c:	b12e      	cbz	r6, 247a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    246e:	4620      	mov	r0, r4
    2470:	f7ff fe9e 	bl	21b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    2474:	b108      	cbz	r0, 247a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    2476:	2001      	movs	r0, #1
    2478:	e000      	b.n	247c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a0>
    247a:	2000      	movs	r0, #0
    247c:	f1b8 0f00 	cmp.w	r8, #0
    2480:	d009      	beq.n	2496 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    2482:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    2486:	2901      	cmp	r1, #1
    2488:	d003      	beq.n	2492 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b6>
    248a:	b921      	cbnz	r1, 2496 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    248c:	ea5a 0109 	orrs.w	r1, sl, r9
    2490:	d001      	beq.n	2496 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    2492:	2101      	movs	r1, #1
    2494:	e000      	b.n	2498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4bc>
    2496:	2100      	movs	r1, #0
    2498:	4208      	tst	r0, r1
    249a:	d003      	beq.n	24a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    249c:	200c      	movs	r0, #12
    249e:	b004      	add	sp, #16
    24a0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    24a4:	f001 fcf6 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    24a8:	e036      	b.n	2518 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    24aa:	f001 fcf3 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    24ae:	f1b8 0f00 	cmp.w	r8, #0
    24b2:	d031      	beq.n	2518 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    24b4:	4620      	mov	r0, r4
    24b6:	f7ff fe7b 	bl	21b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    24ba:	b900      	cbnz	r0, 24be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e2>
    24bc:	b175      	cbz	r5, 24dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x500>
    24be:	a803      	add	r0, sp, #12
    24c0:	f000 f97c 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    24c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    24c8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    24cc:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    24d0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    24d4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    24d8:	463b      	mov	r3, r7
    24da:	e018      	b.n	250e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x532>
    24dc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    24e0:	464d      	mov	r5, r9
    24e2:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    24e6:	2803      	cmp	r0, #3
    24e8:	d001      	beq.n	24ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x512>
    24ea:	2802      	cmp	r0, #2
    24ec:	d114      	bne.n	2518 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    24ee:	f1ba 0f00 	cmp.w	sl, #0
    24f2:	d011      	beq.n	2518 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    24f4:	a803      	add	r0, sp, #12
    24f6:	f000 f961 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    24fa:	686a      	ldr	r2, [r5, #4]
    24fc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    2500:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    2504:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    2508:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    250c:	23fe      	movs	r3, #254	; 0xfe
    250e:	2101      	movs	r1, #1
    2510:	4620      	mov	r0, r4
    2512:	324a      	adds	r2, #74	; 0x4a
    2514:	f007 fb5e 	bl	9bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    2518:	2005      	movs	r0, #5
    251a:	e7c0      	b.n	249e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c2>
    251c:	2000009c 	.word	0x2000009c
    2520:	20000580 	.word	0x20000580
    2524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2526:	4c3f      	ldr	r4, [pc, #252]	; (2624 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x648>)
    2528:	4605      	mov	r5, r0
    252a:	6860      	ldr	r0, [r4, #4]
    252c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    2530:	2900      	cmp	r1, #0
    2532:	d06c      	beq.n	260e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x632>
    2534:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    2538:	2802      	cmp	r0, #2
    253a:	d02c      	beq.n	2596 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ba>
    253c:	2801      	cmp	r0, #1
    253e:	d043      	beq.n	25c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    2540:	f7ff fe2a 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2544:	2800      	cmp	r0, #0
    2546:	d067      	beq.n	2618 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x63c>
    2548:	686a      	ldr	r2, [r5, #4]
    254a:	6861      	ldr	r1, [r4, #4]
    254c:	7810      	ldrb	r0, [r2, #0]
    254e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    2552:	4298      	cmp	r0, r3
    2554:	d14c      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    2556:	7850      	ldrb	r0, [r2, #1]
    2558:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    255c:	4298      	cmp	r0, r3
    255e:	d147      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    2560:	7890      	ldrb	r0, [r2, #2]
    2562:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    2566:	4298      	cmp	r0, r3
    2568:	d142      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    256a:	78d0      	ldrb	r0, [r2, #3]
    256c:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    2570:	4298      	cmp	r0, r3
    2572:	d13d      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    2574:	7910      	ldrb	r0, [r2, #4]
    2576:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    257a:	4298      	cmp	r0, r3
    257c:	d138      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    257e:	7950      	ldrb	r0, [r2, #5]
    2580:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    2584:	4290      	cmp	r0, r2
    2586:	d133      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    2588:	7c68      	ldrb	r0, [r5, #17]
    258a:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    258e:	4290      	cmp	r0, r2
    2590:	d12e      	bne.n	25f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x614>
    2592:	2001      	movs	r0, #1
    2594:	e02d      	b.n	25f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x616>
    2596:	a803      	add	r0, sp, #12
    2598:	f000 f910 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    259c:	6862      	ldr	r2, [r4, #4]
    259e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    25a2:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    25a6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    25aa:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    25ae:	23ff      	movs	r3, #255	; 0xff
    25b0:	2100      	movs	r1, #0
    25b2:	4628      	mov	r0, r5
    25b4:	324a      	adds	r2, #74	; 0x4a
    25b6:	f007 fb0d 	bl	9bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    25ba:	6861      	ldr	r1, [r4, #4]
    25bc:	2001      	movs	r0, #1
    25be:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    25c2:	200b      	movs	r0, #11
    25c4:	b004      	add	sp, #16
    25c6:	bd70      	pop	{r4, r5, r6, pc}
    25c8:	a803      	add	r0, sp, #12
    25ca:	f000 f8f7 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    25ce:	6862      	ldr	r2, [r4, #4]
    25d0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    25d4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    25d8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    25dc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    25e0:	23ff      	movs	r3, #255	; 0xff
    25e2:	2100      	movs	r1, #0
    25e4:	4628      	mov	r0, r5
    25e6:	324a      	adds	r2, #74	; 0x4a
    25e8:	f007 faf4 	bl	9bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    25ec:	2005      	movs	r0, #5
    25ee:	e7e9      	b.n	25c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e8>
    25f0:	2000      	movs	r0, #0
    25f2:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    25f6:	2901      	cmp	r1, #1
    25f8:	d00c      	beq.n	2614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x638>
    25fa:	b958      	cbnz	r0, 2614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x638>
    25fc:	490a      	ldr	r1, [pc, #40]	; (2628 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64c>)
    25fe:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    2602:	2808      	cmp	r0, #8
    2604:	d003      	beq.n	260e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x632>
    2606:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    260a:	4281      	cmp	r1, r0
    260c:	d002      	beq.n	2614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x638>
    260e:	f001 fc41 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2612:	e7eb      	b.n	25ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x610>
    2614:	200c      	movs	r0, #12
    2616:	e7d5      	b.n	25c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e8>
    2618:	f640 61e5 	movw	r1, #3813	; 0xee5
    261c:	2032      	movs	r0, #50	; 0x32
    261e:	f7fe faaf 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2622:	0000      	.short	0x0000
    2624:	2000009c 	.word	0x2000009c
    2628:	20000580 	.word	0x20000580
    262c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    262e:	4c1e      	ldr	r4, [pc, #120]	; (26a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>)
    2630:	4605      	mov	r5, r0
    2632:	6860      	ldr	r0, [r4, #4]
    2634:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    2638:	b129      	cbz	r1, 2646 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x66a>
    263a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    263e:	2802      	cmp	r0, #2
    2640:	d004      	beq.n	264c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x670>
    2642:	2801      	cmp	r0, #1
    2644:	d01b      	beq.n	267e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    2646:	f001 fc25 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    264a:	e02a      	b.n	26a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c6>
    264c:	a803      	add	r0, sp, #12
    264e:	f000 f8b5 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    2652:	6862      	ldr	r2, [r4, #4]
    2654:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    2658:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    265c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    2660:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    2664:	23ff      	movs	r3, #255	; 0xff
    2666:	2106      	movs	r1, #6
    2668:	4628      	mov	r0, r5
    266a:	324a      	adds	r2, #74	; 0x4a
    266c:	f007 fab2 	bl	9bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    2670:	6862      	ldr	r2, [r4, #4]
    2672:	200b      	movs	r0, #11
    2674:	2100      	movs	r1, #0
    2676:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    267a:	b004      	add	sp, #16
    267c:	bd70      	pop	{r4, r5, r6, pc}
    267e:	a803      	add	r0, sp, #12
    2680:	f000 f89c 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    2684:	6862      	ldr	r2, [r4, #4]
    2686:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    268a:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    268e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    2692:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    2696:	23ff      	movs	r3, #255	; 0xff
    2698:	2106      	movs	r1, #6
    269a:	4628      	mov	r0, r5
    269c:	324a      	adds	r2, #74	; 0x4a
    269e:	f007 fa99 	bl	9bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    26a2:	2005      	movs	r0, #5
    26a4:	e7e9      	b.n	267a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x69e>
    26a6:	0000      	.short	0x0000
    26a8:	2000009c 	.word	0x2000009c
    26ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    26ae:	b389      	cbz	r1, 2714 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    26b0:	2901      	cmp	r1, #1
    26b2:	d034      	beq.n	271e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x742>
    26b4:	2505      	movs	r5, #5
    26b6:	2902      	cmp	r1, #2
    26b8:	d004      	beq.n	26c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e8>
    26ba:	2906      	cmp	r1, #6
    26bc:	d025      	beq.n	270a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x72e>
    26be:	f001 fbe9 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    26c2:	e01f      	b.n	2704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x728>
    26c4:	4606      	mov	r6, r0
    26c6:	f001 fbe5 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    26ca:	4c17      	ldr	r4, [pc, #92]	; (2728 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74c>)
    26cc:	6860      	ldr	r0, [r4, #4]
    26ce:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    26d2:	b1b9      	cbz	r1, 2704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x728>
    26d4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    26d8:	2801      	cmp	r0, #1
    26da:	d001      	beq.n	26e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x704>
    26dc:	2802      	cmp	r0, #2
    26de:	d111      	bne.n	2704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x728>
    26e0:	a803      	add	r0, sp, #12
    26e2:	f000 f86b 	bl	27bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    26e6:	6862      	ldr	r2, [r4, #4]
    26e8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    26ec:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    26f0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    26f4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    26f8:	23ff      	movs	r3, #255	; 0xff
    26fa:	2102      	movs	r1, #2
    26fc:	4630      	mov	r0, r6
    26fe:	324a      	adds	r2, #74	; 0x4a
    2700:	f007 fa68 	bl	9bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    2704:	b004      	add	sp, #16
    2706:	4628      	mov	r0, r5
    2708:	bd70      	pop	{r4, r5, r6, pc}
    270a:	b004      	add	sp, #16
    270c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2710:	f7ff bf8c 	b.w	262c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x650>
    2714:	b004      	add	sp, #16
    2716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    271a:	f7ff bf03 	b.w	2524 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x548>
    271e:	b004      	add	sp, #16
    2720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2724:	f7ff be2c 	b.w	2380 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    2728:	2000009c 	.word	0x2000009c
    272c:	b570      	push	{r4, r5, r6, lr}
    272e:	4c11      	ldr	r4, [pc, #68]	; (2774 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x798>)
    2730:	4605      	mov	r5, r0
    2732:	6861      	ldr	r1, [r4, #4]
    2734:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    2738:	2800      	cmp	r0, #0
    273a:	d019      	beq.n	2770 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x794>
    273c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    2740:	2800      	cmp	r0, #0
    2742:	d015      	beq.n	2770 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x794>
    2744:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    2748:	314a      	adds	r1, #74	; 0x4a
    274a:	f007 f9b0 	bl	9aae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    274e:	b140      	cbz	r0, 2762 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    2750:	f7fe ff72 	bl	1638 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    2754:	6861      	ldr	r1, [r4, #4]
    2756:	462a      	mov	r2, r5
    2758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    275c:	314a      	adds	r1, #74	; 0x4a
    275e:	f006 bff4 	b.w	974a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    2762:	6860      	ldr	r0, [r4, #4]
    2764:	4629      	mov	r1, r5
    2766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    276a:	304a      	adds	r0, #74	; 0x4a
    276c:	f006 bfdc 	b.w	9728 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    2770:	bd70      	pop	{r4, r5, r6, pc}
    2772:	0000      	.short	0x0000
    2774:	2000009c 	.word	0x2000009c
    2778:	4602      	mov	r2, r0
    277a:	480b      	ldr	r0, [pc, #44]	; (27a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>)
    277c:	b082      	sub	sp, #8
    277e:	6840      	ldr	r0, [r0, #4]
    2780:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    2784:	f88d 1000 	strb.w	r1, [sp]
    2788:	9900      	ldr	r1, [sp, #0]
    278a:	9100      	str	r1, [sp, #0]
    278c:	f89d 1000 	ldrb.w	r1, [sp]
    2790:	2900      	cmp	r1, #0
    2792:	d107      	bne.n	27a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    2794:	6e81      	ldr	r1, [r0, #104]	; 0x68
    2796:	2900      	cmp	r1, #0
    2798:	d004      	beq.n	27a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    279a:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    279e:	b002      	add	sp, #8
    27a0:	f004 bd76 	b.w	7290 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    27a4:	b002      	add	sp, #8
    27a6:	4770      	bx	lr
    27a8:	2000009c 	.word	0x2000009c
    27ac:	b510      	push	{r4, lr}
    27ae:	f7ff f885 	bl	18bc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    27b2:	4901      	ldr	r1, [pc, #4]	; (27b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7dc>)
    27b4:	7008      	strb	r0, [r1, #0]
    27b6:	bd10      	pop	{r4, pc}
    27b8:	2000009c 	.word	0x2000009c
    27bc:	4a07      	ldr	r2, [pc, #28]	; (27dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>)
    27be:	b510      	push	{r4, lr}
    27c0:	f992 1000 	ldrsb.w	r1, [r2]
    27c4:	297f      	cmp	r1, #127	; 0x7f
    27c6:	d003      	beq.n	27d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f4>
    27c8:	7001      	strb	r1, [r0, #0]
    27ca:	207f      	movs	r0, #127	; 0x7f
    27cc:	7010      	strb	r0, [r2, #0]
    27ce:	bd10      	pop	{r4, pc}
    27d0:	f240 414d 	movw	r1, #1101	; 0x44d
    27d4:	2032      	movs	r0, #50	; 0x32
    27d6:	f7fe f9d3 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27da:	0000      	.short	0x0000
    27dc:	2000009c 	.word	0x2000009c
    27e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27e4:	4607      	mov	r7, r0
    27e6:	f7fe fd7f 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    27ea:	4604      	mov	r4, r0
    27ec:	f7fe fd82 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    27f0:	4621      	mov	r1, r4
    27f2:	f007 f9ca 	bl	9b8a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    27f6:	0005      	movs	r5, r0
    27f8:	d012      	beq.n	2820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x844>
    27fa:	4c2d      	ldr	r4, [pc, #180]	; (28b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d4>)
    27fc:	6860      	ldr	r0, [r4, #4]
    27fe:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    2802:	2801      	cmp	r0, #1
    2804:	d004      	beq.n	2810 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x834>
    2806:	2802      	cmp	r0, #2
    2808:	d002      	beq.n	2810 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x834>
    280a:	f7ff fcc5 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    280e:	b150      	cbz	r0, 2826 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84a>
    2810:	f06f 0613 	mvn.w	r6, #19
    2814:	b33f      	cbz	r7, 2866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88a>
    2816:	4628      	mov	r0, r5
    2818:	f007 f89c 	bl	9954 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    281c:	b950      	cbnz	r0, 2834 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x858>
    281e:	e005      	b.n	282c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x850>
    2820:	f241 5157 	movw	r1, #5463	; 0x1557
    2824:	e03a      	b.n	289c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    2826:	f241 515d 	movw	r1, #5469	; 0x155d
    282a:	e037      	b.n	289c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    282c:	4628      	mov	r0, r5
    282e:	f007 f8ad 	bl	998c <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    2832:	b1c0      	cbz	r0, 2866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88a>
    2834:	6861      	ldr	r1, [r4, #4]
    2836:	4628      	mov	r0, r5
    2838:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    283c:	2a05      	cmp	r2, #5
    283e:	d202      	bcs.n	2846 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86a>
    2840:	f241 41dc 	movw	r1, #5340	; 0x14dc
    2844:	e02a      	b.n	289c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    2846:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    284a:	2a0b      	cmp	r2, #11
    284c:	d302      	bcc.n	2854 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    284e:	f241 41dd 	movw	r1, #5341	; 0x14dd
    2852:	e023      	b.n	289c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    2854:	68e2      	ldr	r2, [r4, #12]
    2856:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    285a:	6952      	ldr	r2, [r2, #20]
    285c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    2860:	5851      	ldr	r1, [r2, r1]
    2862:	4788      	blx	r1
    2864:	e016      	b.n	2894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    2866:	6860      	ldr	r0, [r4, #4]
    2868:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    286c:	2905      	cmp	r1, #5
    286e:	d202      	bcs.n	2876 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x89a>
    2870:	f241 514d 	movw	r1, #5453	; 0x154d
    2874:	e012      	b.n	289c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    2876:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    287a:	290b      	cmp	r1, #11
    287c:	d302      	bcc.n	2884 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8a8>
    287e:	f241 514e 	movw	r1, #5454	; 0x154e
    2882:	e00b      	b.n	289c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    2884:	68e1      	ldr	r1, [r4, #12]
    2886:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    288a:	6989      	ldr	r1, [r1, #24]
    288c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2890:	5808      	ldr	r0, [r1, r0]
    2892:	4780      	blx	r0
    2894:	280f      	cmp	r0, #15
    2896:	d304      	bcc.n	28a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c6>
    2898:	f241 5172 	movw	r1, #5490	; 0x1572
    289c:	2032      	movs	r0, #50	; 0x32
    289e:	f7fe f96f 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28a2:	68e1      	ldr	r1, [r4, #12]
    28a4:	6909      	ldr	r1, [r1, #16]
    28a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    28aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28ae:	4700      	bx	r0
    28b0:	2000009c 	.word	0x2000009c
    28b4:	b510      	push	{r4, lr}
    28b6:	b118      	cbz	r0, 28c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e4>
    28b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    28bc:	f000 b906 	b.w	2acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>
    28c0:	2900      	cmp	r1, #0
    28c2:	d01d      	beq.n	2900 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    28c4:	480f      	ldr	r0, [pc, #60]	; (2904 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x928>)
    28c6:	6841      	ldr	r1, [r0, #4]
    28c8:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    28cc:	2a0b      	cmp	r2, #11
    28ce:	d202      	bcs.n	28d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fa>
    28d0:	f241 612d 	movw	r1, #5677	; 0x162d
    28d4:	e005      	b.n	28e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x906>
    28d6:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    28da:	2a0f      	cmp	r2, #15
    28dc:	d304      	bcc.n	28e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    28de:	f241 612e 	movw	r1, #5678	; 0x162e
    28e2:	2032      	movs	r0, #50	; 0x32
    28e4:	f7fe f94c 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28e8:	68c0      	ldr	r0, [r0, #12]
    28ea:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    28ee:	6880      	ldr	r0, [r0, #8]
    28f0:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    28f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    28f8:	5840      	ldr	r0, [r0, r1]
    28fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    28fe:	4700      	bx	r0
    2900:	bd10      	pop	{r4, pc}
    2902:	0000      	.short	0x0000
    2904:	2000009c 	.word	0x2000009c
    2908:	b510      	push	{r4, lr}
    290a:	f7fe fced 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    290e:	4604      	mov	r4, r0
    2910:	f7fe fcf0 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2914:	4621      	mov	r1, r4
    2916:	f007 f938 	bl	9b8a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    291a:	b150      	cbz	r0, 2932 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x956>
    291c:	f001 fcde 	bl	42dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2920:	2000      	movs	r0, #0
    2922:	f001 fbad 	bl	4080 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2926:	4905      	ldr	r1, [pc, #20]	; (293c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>)
    2928:	2006      	movs	r0, #6
    292a:	6849      	ldr	r1, [r1, #4]
    292c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2930:	bd10      	pop	{r4, pc}
    2932:	f44f 61c6 	mov.w	r1, #1584	; 0x630
    2936:	2032      	movs	r0, #50	; 0x32
    2938:	f7fe f922 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    293c:	2000009c 	.word	0x2000009c
    2940:	490f      	ldr	r1, [pc, #60]	; (2980 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>)
    2942:	b510      	push	{r4, lr}
    2944:	6848      	ldr	r0, [r1, #4]
    2946:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    294a:	2a05      	cmp	r2, #5
    294c:	d202      	bcs.n	2954 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x978>
    294e:	f241 6161 	movw	r1, #5729	; 0x1661
    2952:	e005      	b.n	2960 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    2954:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    2958:	2a0b      	cmp	r2, #11
    295a:	d304      	bcc.n	2966 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x98a>
    295c:	f241 6162 	movw	r1, #5730	; 0x1662
    2960:	2032      	movs	r0, #50	; 0x32
    2962:	f7fe f90d 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2966:	68c9      	ldr	r1, [r1, #12]
    2968:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    296c:	68c9      	ldr	r1, [r1, #12]
    296e:	f06f 0213 	mvn.w	r2, #19
    2972:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2976:	5808      	ldr	r0, [r1, r0]
    2978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    297c:	4700      	bx	r0
    297e:	0000      	.short	0x0000
    2980:	2000009c 	.word	0x2000009c
    2984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2988:	4c2c      	ldr	r4, [pc, #176]	; (2a3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa60>)
    298a:	4605      	mov	r5, r0
    298c:	460e      	mov	r6, r1
    298e:	6860      	ldr	r0, [r4, #4]
    2990:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2994:	b120      	cbz	r0, 29a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    2996:	2801      	cmp	r0, #1
    2998:	d002      	beq.n	29a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    299a:	200c      	movs	r0, #12
    299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29a0:	f001 fbf6 	bl	4190 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    29a4:	f001 fa54 	bl	3e50 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    29a8:	f001 f972 	bl	3c90 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    29ac:	4824      	ldr	r0, [pc, #144]	; (2a40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa64>)
    29ae:	f001 fb5f 	bl	4070 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    29b2:	4824      	ldr	r0, [pc, #144]	; (2a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa68>)
    29b4:	f001 fd4e 	bl	4454 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    29b8:	4823      	ldr	r0, [pc, #140]	; (2a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa6c>)
    29ba:	f001 fd41 	bl	4440 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    29be:	4630      	mov	r0, r6
    29c0:	f001 fc8c 	bl	42dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29c4:	7968      	ldrb	r0, [r5, #5]
    29c6:	b110      	cbz	r0, 29ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f2>
    29c8:	2001      	movs	r0, #1
    29ca:	f7ff fed5 	bl	2778 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x79c>
    29ce:	7928      	ldrb	r0, [r5, #4]
    29d0:	2803      	cmp	r0, #3
    29d2:	d001      	beq.n	29d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9fc>
    29d4:	b118      	cbz	r0, 29de <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa02>
    29d6:	e018      	b.n	2a0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa2e>
    29d8:	f640 2152 	movw	r1, #2642	; 0xa52
    29dc:	e02a      	b.n	2a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa58>
    29de:	6861      	ldr	r1, [r4, #4]
    29e0:	2000      	movs	r0, #0
    29e2:	2503      	movs	r5, #3
    29e4:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    29e8:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    29ec:	1c52      	adds	r2, r2, #1
    29ee:	fbb2 f7f5 	udiv	r7, r2, r5
    29f2:	fb05 2217 	mls	r2, r5, r7, r2
    29f6:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    29fa:	fa23 f202 	lsr.w	r2, r3, r2
    29fe:	07d2      	lsls	r2, r2, #31
    2a00:	d103      	bne.n	2a0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa2e>
    2a02:	1c40      	adds	r0, r0, #1
    2a04:	b2c0      	uxtb	r0, r0
    2a06:	2803      	cmp	r0, #3
    2a08:	d3ee      	bcc.n	29e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0c>
    2a0a:	6860      	ldr	r0, [r4, #4]
    2a0c:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    2a10:	f001 fc42 	bl	4298 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2a14:	4631      	mov	r1, r6
    2a16:	2001      	movs	r0, #1
    2a18:	f7ff fb10 	bl	203c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d0bd      	beq.n	299c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c0>
    2a20:	f000 f8d8 	bl	2bd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf8>
    2a24:	4809      	ldr	r0, [pc, #36]	; (2a4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa70>)
    2a26:	6800      	ldr	r0, [r0, #0]
    2a28:	2803      	cmp	r0, #3
    2a2a:	d001      	beq.n	2a30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa54>
    2a2c:	2000      	movs	r0, #0
    2a2e:	e7b5      	b.n	299c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c0>
    2a30:	f44f 6126 	mov.w	r1, #2656	; 0xa60
    2a34:	2032      	movs	r0, #50	; 0x32
    2a36:	f7fe f8a3 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a3a:	0000      	.short	0x0000
    2a3c:	2000009c 	.word	0x2000009c
    2a40:	00002cb8 	.word	0x00002cb8
    2a44:	00555555 	.word	0x00555555
    2a48:	8e89bed6 	.word	0x8e89bed6
    2a4c:	40001550 	.word	0x40001550
    2a50:	b510      	push	{r4, lr}
    2a52:	2000      	movs	r0, #0
    2a54:	f7ff fe90 	bl	2778 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x79c>
    2a58:	4808      	ldr	r0, [pc, #32]	; (2a7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa0>)
    2a5a:	6840      	ldr	r0, [r0, #4]
    2a5c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2a60:	b128      	cbz	r0, 2a6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa92>
    2a62:	2801      	cmp	r0, #1
    2a64:	d003      	beq.n	2a6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa92>
    2a66:	2802      	cmp	r0, #2
    2a68:	d004      	beq.n	2a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa98>
    2a6a:	200c      	movs	r0, #12
    2a6c:	bd10      	pop	{r4, pc}
    2a6e:	f000 f82d 	bl	2acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>
    2a72:	e001      	b.n	2a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa9c>
    2a74:	f000 f840 	bl	2af8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb1c>
    2a78:	2000      	movs	r0, #0
    2a7a:	bd10      	pop	{r4, pc}
    2a7c:	2000009c 	.word	0x2000009c
    2a80:	b510      	push	{r4, lr}
    2a82:	2000      	movs	r0, #0
    2a84:	7048      	strb	r0, [r1, #1]
    2a86:	2019      	movs	r0, #25
    2a88:	7008      	strb	r0, [r1, #0]
    2a8a:	480f      	ldr	r0, [pc, #60]	; (2ac8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaec>)
    2a8c:	6840      	ldr	r0, [r0, #4]
    2a8e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    2a92:	6048      	str	r0, [r1, #4]
    2a94:	7908      	ldrb	r0, [r1, #4]
    2a96:	2801      	cmp	r0, #1
    2a98:	d114      	bne.n	2ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xae8>
    2a9a:	88cc      	ldrh	r4, [r1, #6]
    2a9c:	2100      	movs	r1, #0
    2a9e:	4620      	mov	r0, r4
    2aa0:	f7fe fb18 	bl	10d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2aa4:	2800      	cmp	r0, #0
    2aa6:	d00d      	beq.n	2ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xae8>
    2aa8:	4620      	mov	r0, r4
    2aaa:	f006 fe1c 	bl	96e6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    2aae:	2100      	movs	r1, #0
    2ab0:	4620      	mov	r0, r4
    2ab2:	f7fe fb77 	bl	11a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    2ab6:	2800      	cmp	r0, #0
    2ab8:	d004      	beq.n	2ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xae8>
    2aba:	f240 4115 	movw	r1, #1045	; 0x415
    2abe:	2032      	movs	r0, #50	; 0x32
    2ac0:	f7fe f85e 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ac4:	bd10      	pop	{r4, pc}
    2ac6:	0000      	.short	0x0000
    2ac8:	2000009c 	.word	0x2000009c
    2acc:	b510      	push	{r4, lr}
    2ace:	f7ff faa3 	bl	2018 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    2ad2:	4904      	ldr	r1, [pc, #16]	; (2ae4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb08>)
    2ad4:	2001      	movs	r0, #1
    2ad6:	6849      	ldr	r1, [r1, #4]
    2ad8:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ae0:	f000 ba4e 	b.w	2f80 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    2ae4:	2000009c 	.word	0x2000009c
    2ae8:	4902      	ldr	r1, [pc, #8]	; (2af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb18>)
    2aea:	2000      	movs	r0, #0
    2aec:	6849      	ldr	r1, [r1, #4]
    2aee:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2af2:	4770      	bx	lr
    2af4:	2000009c 	.word	0x2000009c
    2af8:	b570      	push	{r4, r5, r6, lr}
    2afa:	f7fe fbf5 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2afe:	4604      	mov	r4, r0
    2b00:	f7fe fbf8 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2b04:	4621      	mov	r1, r4
    2b06:	f007 f840 	bl	9b8a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    2b0a:	0004      	movs	r4, r0
    2b0c:	d020      	beq.n	2b50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb74>
    2b0e:	f007 f849 	bl	9ba4 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    2b12:	2000      	movs	r0, #0
    2b14:	f000 f988 	bl	2e28 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    2b18:	b1f8      	cbz	r0, 2b5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb7e>
    2b1a:	4d20      	ldr	r5, [pc, #128]	; (2b9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc0>)
    2b1c:	6868      	ldr	r0, [r5, #4]
    2b1e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2b22:	2802      	cmp	r0, #2
    2b24:	d003      	beq.n	2b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb52>
    2b26:	4621      	mov	r1, r4
    2b28:	2000      	movs	r0, #0
    2b2a:	f7ff fa87 	bl	203c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2b2e:	1ce0      	adds	r0, r4, #3
    2b30:	f006 fe6e 	bl	9810 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    2b34:	6869      	ldr	r1, [r5, #4]
    2b36:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    2b3a:	b128      	cbz	r0, 2b48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb6c>
    2b3c:	2440      	movs	r4, #64	; 0x40
    2b3e:	f001 f8c7 	bl	3cd0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    2b42:	4620      	mov	r0, r4
    2b44:	f001 f992 	bl	3e6c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    2b48:	f7ff fb26 	bl	2198 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2b4c:	b970      	cbnz	r0, 2b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb90>
    2b4e:	e008      	b.n	2b62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb86>
    2b50:	f240 511e 	movw	r1, #1310	; 0x51e
    2b54:	2032      	movs	r0, #50	; 0x32
    2b56:	f7fe f813 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2b5e:	f7ff bfb5 	b.w	2acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>
    2b62:	6868      	ldr	r0, [r5, #4]
    2b64:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    2b68:	2802      	cmp	r0, #2
    2b6a:	d104      	bne.n	2b76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb9a>
    2b6c:	2100      	movs	r1, #0
    2b6e:	2201      	movs	r2, #1
    2b70:	4608      	mov	r0, r1
    2b72:	f001 fc3b 	bl	43ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2b76:	6868      	ldr	r0, [r5, #4]
    2b78:	21ff      	movs	r1, #255	; 0xff
    2b7a:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    2b7e:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    2b82:	2100      	movs	r1, #0
    2b84:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    2b88:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    2b8c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    2b90:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    2b94:	2105      	movs	r1, #5
    2b96:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    2b9a:	bd70      	pop	{r4, r5, r6, pc}
    2b9c:	2000009c 	.word	0x2000009c
    2ba0:	b510      	push	{r4, lr}
    2ba2:	2003      	movs	r0, #3
    2ba4:	f000 f940 	bl	2e28 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    2ba8:	b168      	cbz	r0, 2bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbea>
    2baa:	2003      	movs	r0, #3
    2bac:	f7ff fb4a 	bl	2244 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    2bb0:	2201      	movs	r2, #1
    2bb2:	4611      	mov	r1, r2
    2bb4:	2000      	movs	r0, #0
    2bb6:	f001 fc19 	bl	43ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2bba:	4905      	ldr	r1, [pc, #20]	; (2bd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf4>)
    2bbc:	200b      	movs	r0, #11
    2bbe:	6849      	ldr	r1, [r1, #4]
    2bc0:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2bc4:	bd10      	pop	{r4, pc}
    2bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2bca:	f7ff bf7f 	b.w	2acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>
    2bce:	0000      	.short	0x0000
    2bd0:	2000009c 	.word	0x2000009c
    2bd4:	b570      	push	{r4, r5, r6, lr}
    2bd6:	4d19      	ldr	r5, [pc, #100]	; (2c3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc60>)
    2bd8:	2000      	movs	r0, #0
    2bda:	686c      	ldr	r4, [r5, #4]
    2bdc:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    2be0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    2be4:	b910      	cbnz	r0, 2bec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc10>
    2be6:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    2bea:	b308      	cbz	r0, 2c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>
    2bec:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    2bf0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2bf4:	4050      	eors	r0, r2
    2bf6:	ea70 0101 	orns	r1, r0, r1
    2bfa:	d019      	beq.n	2c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>
    2bfc:	f007 fd04 	bl	a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2c00:	e9d4 2300 	ldrd	r2, r3, [r4]
    2c04:	1a80      	subs	r0, r0, r2
    2c06:	4199      	sbcs	r1, r3
    2c08:	d312      	bcc.n	2c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>
    2c0a:	f7fe fdb5 	bl	1778 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    2c0e:	490c      	ldr	r1, [pc, #48]	; (2c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc64>)
    2c10:	fba0 2301 	umull	r2, r3, r0, r1
    2c14:	6868      	ldr	r0, [r5, #4]
    2c16:	3090      	adds	r0, #144	; 0x90
    2c18:	f006 ffb9 	bl	9b8e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    2c1c:	6868      	ldr	r0, [r5, #4]
    2c1e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    2c22:	b110      	cbz	r0, 2c2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc4e>
    2c24:	2001      	movs	r0, #1
    2c26:	f7fe fd31 	bl	168c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    2c2a:	2001      	movs	r0, #1
    2c2c:	f7ff fd7e 	bl	272c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x750>
    2c30:	6869      	ldr	r1, [r5, #4]
    2c32:	2002      	movs	r0, #2
    2c34:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2c38:	bd70      	pop	{r4, r5, r6, pc}
    2c3a:	0000      	.short	0x0000
    2c3c:	2000009c 	.word	0x2000009c
    2c40:	000f4240 	.word	0x000f4240
    2c44:	00002ae9 	.word	0x00002ae9
    2c48:	00002acd 	.word	0x00002acd
    2c4c:	00009b4b 	.word	0x00009b4b
    2c50:	00009b4b 	.word	0x00009b4b
    2c54:	00009b4b 	.word	0x00009b4b
    2c58:	00002af9 	.word	0x00002af9
    2c5c:	00009b4b 	.word	0x00009b4b
    2c60:	00009b4b 	.word	0x00009b4b
    2c64:	00009b4b 	.word	0x00009b4b
    2c68:	00009b4b 	.word	0x00009b4b
    2c6c:	00009b4b 	.word	0x00009b4b
    2c70:	00002ba1 	.word	0x00002ba1
    2c74:	00009b4b 	.word	0x00009b4b
    2c78:	00009b4b 	.word	0x00009b4b
    2c7c:	00009b4b 	.word	0x00009b4b
    2c80:	00002909 	.word	0x00002909
    2c84:	00009b55 	.word	0x00009b55
    2c88:	00009b63 	.word	0x00009b63
    2c8c:	00009afb 	.word	0x00009afb
    2c90:	00009b05 	.word	0x00009b05
    2c94:	00009b13 	.word	0x00009b13
    2c98:	00002145 	.word	0x00002145
    2c9c:	00002985 	.word	0x00002985
    2ca0:	00002a51 	.word	0x00002a51
    2ca4:	00002c80 	.word	0x00002c80
    2ca8:	00002c84 	.word	0x00002c84
    2cac:	00002c44 	.word	0x00002c44
    2cb0:	00002c94 	.word	0x00002c94
    2cb4:	00002c8c 	.word	0x00002c8c
    2cb8:	00002941 	.word	0x00002941
    2cbc:	000027e1 	.word	0x000027e1
    2cc0:	000028b5 	.word	0x000028b5
    2cc4:	00009b75 	.word	0x00009b75
    2cc8:	b570      	push	{r4, r5, r6, lr}
    2cca:	4604      	mov	r4, r0
    2ccc:	7800      	ldrb	r0, [r0, #0]
    2cce:	2805      	cmp	r0, #5
    2cd0:	d001      	beq.n	2cd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcfa>
    2cd2:	2148      	movs	r1, #72	; 0x48
    2cd4:	e058      	b.n	2d88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdac>
    2cd6:	7ba0      	ldrb	r0, [r4, #14]
    2cd8:	06c0      	lsls	r0, r0, #27
    2cda:	d401      	bmi.n	2ce0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd04>
    2cdc:	2149      	movs	r1, #73	; 0x49
    2cde:	e053      	b.n	2d88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdac>
    2ce0:	221c      	movs	r2, #28
    2ce2:	1d21      	adds	r1, r4, #4
    2ce4:	482f      	ldr	r0, [pc, #188]	; (2da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc8>)
    2ce6:	f007 fe21 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2cea:	482e      	ldr	r0, [pc, #184]	; (2da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc8>)
    2cec:	7b22      	ldrb	r2, [r4, #12]
    2cee:	f104 0120 	add.w	r1, r4, #32
    2cf2:	301c      	adds	r0, #28
    2cf4:	f007 fe1a 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2cf8:	482a      	ldr	r0, [pc, #168]	; (2da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc8>)
    2cfa:	f04f 0201 	mov.w	r2, #1
    2cfe:	7a81      	ldrb	r1, [r0, #10]
    2d00:	0749      	lsls	r1, r1, #29
    2d02:	d502      	bpl.n	2d0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd2e>
    2d04:	7cc1      	ldrb	r1, [r0, #19]
    2d06:	29fe      	cmp	r1, #254	; 0xfe
    2d08:	d00c      	beq.n	2d24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd48>
    2d0a:	2304      	movs	r3, #4
    2d0c:	7023      	strb	r3, [r4, #0]
    2d0e:	6801      	ldr	r1, [r0, #0]
    2d10:	6061      	str	r1, [r4, #4]
    2d12:	6841      	ldr	r1, [r0, #4]
    2d14:	60a1      	str	r1, [r4, #8]
    2d16:	8901      	ldrh	r1, [r0, #8]
    2d18:	81a1      	strh	r1, [r4, #12]
    2d1a:	7a81      	ldrb	r1, [r0, #10]
    2d1c:	070d      	lsls	r5, r1, #28
    2d1e:	d519      	bpl.n	2d54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd78>
    2d20:	73a3      	strb	r3, [r4, #14]
    2d22:	e02d      	b.n	2d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>
    2d24:	2113      	movs	r1, #19
    2d26:	7021      	strb	r1, [r4, #0]
    2d28:	7801      	ldrb	r1, [r0, #0]
    2d2a:	7121      	strb	r1, [r4, #4]
    2d2c:	7162      	strb	r2, [r4, #5]
    2d2e:	7841      	ldrb	r1, [r0, #1]
    2d30:	71a1      	strb	r1, [r4, #6]
    2d32:	f8d0 1002 	ldr.w	r1, [r0, #2]
    2d36:	f8c4 1007 	str.w	r1, [r4, #7]
    2d3a:	88c1      	ldrh	r1, [r0, #6]
    2d3c:	f8a4 100b 	strh.w	r1, [r4, #11]
    2d40:	21fe      	movs	r1, #254	; 0xfe
    2d42:	7361      	strb	r1, [r4, #13]
    2d44:	6941      	ldr	r1, [r0, #20]
    2d46:	f8c4 100e 	str.w	r1, [r4, #14]
    2d4a:	8b01      	ldrh	r1, [r0, #24]
    2d4c:	8261      	strh	r1, [r4, #18]
    2d4e:	7a40      	ldrb	r0, [r0, #9]
    2d50:	7520      	strb	r0, [r4, #20]
    2d52:	bd70      	pop	{r4, r5, r6, pc}
    2d54:	07cb      	lsls	r3, r1, #31
    2d56:	d003      	beq.n	2d60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd84>
    2d58:	078b      	lsls	r3, r1, #30
    2d5a:	d501      	bpl.n	2d60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd84>
    2d5c:	2100      	movs	r1, #0
    2d5e:	e00e      	b.n	2d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda2>
    2d60:	074b      	lsls	r3, r1, #29
    2d62:	d501      	bpl.n	2d68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8c>
    2d64:	73a2      	strb	r2, [r4, #14]
    2d66:	e00b      	b.n	2d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>
    2d68:	07ca      	lsls	r2, r1, #31
    2d6a:	d110      	bne.n	2d8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb2>
    2d6c:	078a      	lsls	r2, r1, #30
    2d6e:	d501      	bpl.n	2d74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd98>
    2d70:	2102      	movs	r1, #2
    2d72:	e004      	b.n	2d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda2>
    2d74:	07ca      	lsls	r2, r1, #31
    2d76:	d10a      	bne.n	2d8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb2>
    2d78:	0789      	lsls	r1, r1, #30
    2d7a:	d408      	bmi.n	2d8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb2>
    2d7c:	2103      	movs	r1, #3
    2d7e:	73a1      	strb	r1, [r4, #14]
    2d80:	7a02      	ldrb	r2, [r0, #8]
    2d82:	2a1f      	cmp	r2, #31
    2d84:	d905      	bls.n	2d92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb6>
    2d86:	218d      	movs	r1, #141	; 0x8d
    2d88:	2033      	movs	r0, #51	; 0x33
    2d8a:	f7fd fef9 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d8e:	218a      	movs	r1, #138	; 0x8a
    2d90:	e7fa      	b.n	2d88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdac>
    2d92:	f104 000f 	add.w	r0, r4, #15
    2d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2d9a:	4902      	ldr	r1, [pc, #8]	; (2da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc8>)
    2d9c:	311c      	adds	r1, #28
    2d9e:	f007 bdc5 	b.w	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2da2:	0000      	.short	0x0000
    2da4:	2000100c 	.word	0x2000100c
    2da8:	2100      	movs	r1, #0
    2daa:	7201      	strb	r1, [r0, #8]
    2dac:	2206      	movs	r2, #6
    2dae:	4901      	ldr	r1, [pc, #4]	; (2db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdd8>)
    2db0:	f006 be30 	b.w	9a14 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2db4:	00009d5f 	.word	0x00009d5f

00002db8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    2db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dbc:	4616      	mov	r6, r2
    2dbe:	460c      	mov	r4, r1
    2dc0:	4605      	mov	r5, r0
    2dc2:	f006 fddf 	bl	9984 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    2dc6:	7460      	strb	r0, [r4, #17]
    2dc8:	4628      	mov	r0, r5
    2dca:	f006 fdd8 	bl	997e <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    2dce:	74a0      	strb	r0, [r4, #18]
    2dd0:	1cea      	adds	r2, r5, #3
    2dd2:	4b14      	ldr	r3, [pc, #80]	; (2e24 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    2dd4:	1d90      	adds	r0, r2, #6
    2dd6:	2100      	movs	r1, #0
    2dd8:	2e07      	cmp	r6, #7
    2dda:	d21f      	bcs.n	2e1c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    2ddc:	e8df f006 	tbb	[pc, r6]
    2de0:	1e110b04 	.word	0x1e110b04
    2de4:	00041e13 	.word	0x00041e13
    2de8:	781b      	ldrb	r3, [r3, #0]
    2dea:	e00d      	b.n	2e08 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    2dec:	60e0      	str	r0, [r4, #12]
    2dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2df2:	60e1      	str	r1, [r4, #12]
    2df4:	e7fb      	b.n	2dee <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    2df6:	785b      	ldrb	r3, [r3, #1]
    2df8:	7063      	strb	r3, [r4, #1]
    2dfa:	e9c4 2001 	strd	r2, r0, [r4, #4]
    2dfe:	7421      	strb	r1, [r4, #16]
    2e00:	e7f7      	b.n	2df2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    2e02:	789b      	ldrb	r3, [r3, #2]
    2e04:	e000      	b.n	2e08 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    2e06:	78db      	ldrb	r3, [r3, #3]
    2e08:	7063      	strb	r3, [r4, #1]
    2e0a:	e9c4 2101 	strd	r2, r1, [r4, #4]
    2e0e:	786a      	ldrb	r2, [r5, #1]
    2e10:	1f92      	subs	r2, r2, #6
    2e12:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    2e16:	7422      	strb	r2, [r4, #16]
    2e18:	d0eb      	beq.n	2df2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    2e1a:	e7e7      	b.n	2dec <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    2e1c:	7061      	strb	r1, [r4, #1]
    2e1e:	6061      	str	r1, [r4, #4]
    2e20:	60a1      	str	r1, [r4, #8]
    2e22:	e7ec      	b.n	2dfe <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    2e24:	0000ab6d 	.word	0x0000ab6d

00002e28 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    2e28:	b570      	push	{r4, r5, r6, lr}
    2e2a:	4605      	mov	r5, r0
    2e2c:	f007 fbec 	bl	a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2e30:	4c16      	ldr	r4, [pc, #88]	; (2e8c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    2e32:	6921      	ldr	r1, [r4, #16]
    2e34:	1a46      	subs	r6, r0, r1
    2e36:	b155      	cbz	r5, 2e4e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    2e38:	2d03      	cmp	r5, #3
    2e3a:	d00d      	beq.n	2e58 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    2e3c:	2d04      	cmp	r5, #4
    2e3e:	d00e      	beq.n	2e5e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    2e40:	2d06      	cmp	r5, #6
    2e42:	d01d      	beq.n	2e80 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    2e44:	f240 31d6 	movw	r1, #982	; 0x3d6
    2e48:	2021      	movs	r0, #33	; 0x21
    2e4a:	f7fd fe99 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e4e:	2001      	movs	r0, #1
    2e50:	f007 f823 	bl	9e9a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2e54:	3098      	adds	r0, #152	; 0x98
    2e56:	e004      	b.n	2e62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    2e58:	f44f 7057 	mov.w	r0, #860	; 0x35c
    2e5c:	e001      	b.n	2e62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    2e5e:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    2e62:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2e64:	1835      	adds	r5, r6, r0
    2e66:	39f9      	subs	r1, #249	; 0xf9
    2e68:	428d      	cmp	r5, r1
    2e6a:	d307      	bcc.n	2e7c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    2e6c:	2600      	movs	r6, #0
    2e6e:	f000 fa1b 	bl	32a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    2e72:	b140      	cbz	r0, 2e86 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    2e74:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2e76:	38f9      	subs	r0, #249	; 0xf9
    2e78:	4285      	cmp	r5, r0
    2e7a:	d203      	bcs.n	2e84 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    2e7c:	2601      	movs	r6, #1
    2e7e:	e002      	b.n	2e86 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    2e80:	2001      	movs	r0, #1
    2e82:	bd70      	pop	{r4, r5, r6, pc}
    2e84:	2600      	movs	r6, #0
    2e86:	4630      	mov	r0, r6
    2e88:	bd70      	pop	{r4, r5, r6, pc}
    2e8a:	0000      	.short	0x0000
    2e8c:	20000628 	.word	0x20000628

00002e90 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    2e90:	b570      	push	{r4, r5, r6, lr}
    2e92:	b086      	sub	sp, #24
    2e94:	4606      	mov	r6, r0
    2e96:	b111      	cbz	r1, 2e9e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    2e98:	2011      	movs	r0, #17
    2e9a:	b006      	add	sp, #24
    2e9c:	bd70      	pop	{r4, r5, r6, pc}
    2e9e:	4c17      	ldr	r4, [pc, #92]	; (2efc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    2ea0:	7820      	ldrb	r0, [r4, #0]
    2ea2:	b108      	cbz	r0, 2ea8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    2ea4:	200c      	movs	r0, #12
    2ea6:	e7f8      	b.n	2e9a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    2ea8:	f7fe ff38 	bl	1d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2eac:	4605      	mov	r5, r0
    2eae:	2000      	movs	r0, #0
    2eb0:	7060      	strb	r0, [r4, #1]
    2eb2:	2004      	movs	r0, #4
    2eb4:	7020      	strb	r0, [r4, #0]
    2eb6:	f000 fa3d 	bl	3334 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    2eba:	64a0      	str	r0, [r4, #72]	; 0x48
    2ebc:	2100      	movs	r1, #0
    2ebe:	4810      	ldr	r0, [pc, #64]	; (2f00 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    2ec0:	f004 f814 	bl	6eec <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    2ec4:	7028      	strb	r0, [r5, #0]
    2ec6:	2820      	cmp	r0, #32
    2ec8:	d00d      	beq.n	2ee6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    2eca:	4633      	mov	r3, r6
    2ecc:	2200      	movs	r2, #0
    2ece:	2101      	movs	r1, #1
    2ed0:	4668      	mov	r0, sp
    2ed2:	f000 fa89 	bl	33e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    2ed6:	b148      	cbz	r0, 2eec <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    2ed8:	7828      	ldrb	r0, [r5, #0]
    2eda:	4669      	mov	r1, sp
    2edc:	f006 fff7 	bl	9ece <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    2ee0:	b138      	cbz	r0, 2ef2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    2ee2:	2000      	movs	r0, #0
    2ee4:	e7d9      	b.n	2e9a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    2ee6:	f240 3162 	movw	r1, #866	; 0x362
    2eea:	e004      	b.n	2ef6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2eec:	f44f 7159 	mov.w	r1, #868	; 0x364
    2ef0:	e001      	b.n	2ef6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2ef2:	f240 3165 	movw	r1, #869	; 0x365
    2ef6:	2021      	movs	r0, #33	; 0x21
    2ef8:	f7fd fe42 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2efc:	20000628 	.word	0x20000628
    2f00:	00003071 	.word	0x00003071

00002f04 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    2f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f08:	2700      	movs	r7, #0
    2f0a:	f7fe ff07 	bl	1d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2f0e:	4c18      	ldr	r4, [pc, #96]	; (2f70 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    2f10:	4605      	mov	r5, r0
    2f12:	7820      	ldrb	r0, [r4, #0]
    2f14:	2804      	cmp	r0, #4
    2f16:	d005      	beq.n	2f24 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    2f18:	7820      	ldrb	r0, [r4, #0]
    2f1a:	2805      	cmp	r0, #5
    2f1c:	d002      	beq.n	2f24 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    2f1e:	200c      	movs	r0, #12
    2f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f24:	2001      	movs	r0, #1
    2f26:	7060      	strb	r0, [r4, #1]
    2f28:	7b20      	ldrb	r0, [r4, #12]
    2f2a:	b160      	cbz	r0, 2f46 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    2f2c:	f3ef 8610 	mrs	r6, PRIMASK
    2f30:	b672      	cpsid	i
    2f32:	7b20      	ldrb	r0, [r4, #12]
    2f34:	b128      	cbz	r0, 2f42 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    2f36:	7b60      	ldrb	r0, [r4, #13]
    2f38:	b118      	cbz	r0, 2f42 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    2f3a:	f006 fdd4 	bl	9ae6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2f3e:	f000 f887 	bl	3050 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    2f42:	b126      	cbz	r6, 2f4e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    2f44:	e004      	b.n	2f50 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    2f46:	7828      	ldrb	r0, [r5, #0]
    2f48:	f003 fd4e 	bl	69e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    2f4c:	e000      	b.n	2f50 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    2f4e:	b662      	cpsie	i
    2f50:	7828      	ldrb	r0, [r5, #0]
    2f52:	f003 feb3 	bl	6cbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    2f56:	f000 fb9f 	bl	3698 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    2f5a:	2000      	movs	r0, #0
    2f5c:	7060      	strb	r0, [r4, #1]
    2f5e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    2f62:	b100      	cbz	r0, 2f66 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    2f64:	270c      	movs	r7, #12
    2f66:	f000 fbc3 	bl	36f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    2f6a:	4638      	mov	r0, r7
    2f6c:	e7d8      	b.n	2f20 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    2f6e:	0000      	.short	0x0000
    2f70:	20000628 	.word	0x20000628

00002f74 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    2f74:	4801      	ldr	r0, [pc, #4]	; (2f7c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    2f76:	7800      	ldrb	r0, [r0, #0]
    2f78:	4770      	bx	lr
    2f7a:	0000      	.short	0x0000
    2f7c:	20000628 	.word	0x20000628

00002f80 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    2f80:	b510      	push	{r4, lr}
    2f82:	4c10      	ldr	r4, [pc, #64]	; (2fc4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    2f84:	b086      	sub	sp, #24
    2f86:	7b20      	ldrb	r0, [r4, #12]
    2f88:	b1b0      	cbz	r0, 2fb8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    2f8a:	7860      	ldrb	r0, [r4, #1]
    2f8c:	b9a0      	cbnz	r0, 2fb8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    2f8e:	2300      	movs	r3, #0
    2f90:	461a      	mov	r2, r3
    2f92:	4619      	mov	r1, r3
    2f94:	4668      	mov	r0, sp
    2f96:	f000 fa27 	bl	33e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    2f9a:	b158      	cbz	r0, 2fb4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    2f9c:	f7fe febe 	bl	1d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2fa0:	7800      	ldrb	r0, [r0, #0]
    2fa2:	4669      	mov	r1, sp
    2fa4:	f006 ff93 	bl	9ece <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    2fa8:	b930      	cbnz	r0, 2fb8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    2faa:	f240 71bc 	movw	r1, #1980	; 0x7bc
    2fae:	2021      	movs	r0, #33	; 0x21
    2fb0:	f7fd fde6 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fb4:	2001      	movs	r0, #1
    2fb6:	70a0      	strb	r0, [r4, #2]
    2fb8:	b006      	add	sp, #24
    2fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fbe:	f000 b847 	b.w	3050 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    2fc2:	0000      	.short	0x0000
    2fc4:	20000628 	.word	0x20000628

00002fc8 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    2fc8:	b508      	push	{r3, lr}
    2fca:	2260      	movs	r2, #96	; 0x60
    2fcc:	2100      	movs	r1, #0
    2fce:	480c      	ldr	r0, [pc, #48]	; (3000 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    2fd0:	f007 fd26 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2fd4:	f7fe fea2 	bl	1d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2fd8:	2120      	movs	r1, #32
    2fda:	7001      	strb	r1, [r0, #0]
    2fdc:	f000 f812 	bl	3004 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    2fe0:	b120      	cbz	r0, 2fec <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    2fe2:	f240 2135 	movw	r1, #565	; 0x235
    2fe6:	2021      	movs	r0, #33	; 0x21
    2fe8:	f7fd fdca 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fec:	f242 7010 	movw	r0, #10000	; 0x2710
    2ff0:	9000      	str	r0, [sp, #0]
    2ff2:	2201      	movs	r2, #1
    2ff4:	4669      	mov	r1, sp
    2ff6:	1080      	asrs	r0, r0, #2
    2ff8:	f000 f8dc 	bl	31b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    2ffc:	bd08      	pop	{r3, pc}
    2ffe:	0000      	.short	0x0000
    3000:	20000628 	.word	0x20000628

00003004 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    3004:	4803      	ldr	r0, [pc, #12]	; (3014 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    3006:	b510      	push	{r4, lr}
    3008:	7800      	ldrb	r0, [r0, #0]
    300a:	b108      	cbz	r0, 3010 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    300c:	f7ff ff7a 	bl	2f04 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    3010:	2000      	movs	r0, #0
    3012:	bd10      	pop	{r4, pc}
    3014:	20000628 	.word	0x20000628

00003018 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    3018:	490c      	ldr	r1, [pc, #48]	; (304c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    301a:	b508      	push	{r3, lr}
    301c:	7809      	ldrb	r1, [r1, #0]
    301e:	b121      	cbz	r1, 302a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    3020:	f44f 7147 	mov.w	r1, #796	; 0x31c
    3024:	2021      	movs	r0, #33	; 0x21
    3026:	f7fd fdab 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    302a:	2300      	movs	r3, #0
    302c:	9300      	str	r3, [sp, #0]
    302e:	7801      	ldrb	r1, [r0, #0]
    3030:	461a      	mov	r2, r3
    3032:	07c9      	lsls	r1, r1, #31
    3034:	d003      	beq.n	303e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    3036:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    303a:	2201      	movs	r2, #1
    303c:	9000      	str	r0, [sp, #0]
    303e:	4669      	mov	r1, sp
    3040:	4618      	mov	r0, r3
    3042:	f000 f8b7 	bl	31b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    3046:	2000      	movs	r0, #0
    3048:	bd08      	pop	{r3, pc}
    304a:	0000      	.short	0x0000
    304c:	20000628 	.word	0x20000628
    3050:	b510      	push	{r4, lr}
    3052:	4c06      	ldr	r4, [pc, #24]	; (306c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54>)
    3054:	7b20      	ldrb	r0, [r4, #12]
    3056:	2800      	cmp	r0, #0
    3058:	d006      	beq.n	3068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50>
    305a:	f001 f865 	bl	4128 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    305e:	f003 ff69 	bl	6f34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    3062:	2000      	movs	r0, #0
    3064:	7320      	strb	r0, [r4, #12]
    3066:	7360      	strb	r0, [r4, #13]
    3068:	bd10      	pop	{r4, pc}
    306a:	0000      	.short	0x0000
    306c:	20000628 	.word	0x20000628
    3070:	b5f0      	push	{r4, r5, r6, r7, lr}
    3072:	b087      	sub	sp, #28
    3074:	460d      	mov	r5, r1
    3076:	f7fe fe51 	bl	1d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    307a:	2701      	movs	r7, #1
    307c:	4c3f      	ldr	r4, [pc, #252]	; (317c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>)
    307e:	2d09      	cmp	r5, #9
    3080:	d278      	bcs.n	3174 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x15c>
    3082:	e8df f005 	tbb	[pc, r5]
    3086:	3905      	.short	0x3905
    3088:	774a4f4f 	.word	0x774a4f4f
    308c:	00726d64 	.word	0x00726d64
    3090:	7327      	strb	r7, [r4, #12]
    3092:	7861      	ldrb	r1, [r4, #1]
    3094:	2900      	cmp	r1, #0
    3096:	d12d      	bne.n	30f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    3098:	7800      	ldrb	r0, [r0, #0]
    309a:	f002 ff49 	bl	5f30 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    309e:	4605      	mov	r5, r0
    30a0:	460e      	mov	r6, r1
    30a2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    30a6:	f000 fb3f 	bl	3728 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    30aa:	b118      	cbz	r0, 30b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>
    30ac:	2000      	movs	r0, #0
    30ae:	f88d 0004 	strb.w	r0, [sp, #4]
    30b2:	e001      	b.n	30b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    30b4:	f88d 7004 	strb.w	r7, [sp, #4]
    30b8:	f000 f950 	bl	335c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    30bc:	4633      	mov	r3, r6
    30be:	462a      	mov	r2, r5
    30c0:	f006 ff07 	bl	9ed2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    30c4:	6861      	ldr	r1, [r4, #4]
    30c6:	fbb0 f2f1 	udiv	r2, r0, r1
    30ca:	fb01 0012 	mls	r0, r1, r2, r0
    30ce:	b150      	cbz	r0, 30e6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xce>
    30d0:	f05f 0000 	movs.w	r0, #0
    30d4:	f88d 0005 	strb.w	r0, [sp, #5]
    30d8:	4668      	mov	r0, sp
    30da:	f7fe feb7 	bl	1e4c <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    30de:	b120      	cbz	r0, 30ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd2>
    30e0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    30e4:	e043      	b.n	316e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    30e6:	2001      	movs	r0, #1
    30e8:	e7f4      	b.n	30d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>
    30ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
    30ec:	38e8      	subs	r0, #232	; 0xe8
    30ee:	63a0      	str	r0, [r4, #56]	; 0x38
    30f0:	f003 fffc 	bl	70ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    30f4:	b007      	add	sp, #28
    30f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f8:	7860      	ldrb	r0, [r4, #1]
    30fa:	b130      	cbz	r0, 310a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf2>
    30fc:	f006 fcf3 	bl	9ae6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    3100:	b007      	add	sp, #28
    3102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3106:	f7ff bfa3 	b.w	3050 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    310a:	7367      	strb	r7, [r4, #13]
    310c:	f7fe ff26 	bl	1f5c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    3110:	2800      	cmp	r0, #0
    3112:	d0ef      	beq.n	30f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    3114:	f240 11e1 	movw	r1, #481	; 0x1e1
    3118:	e029      	b.n	316e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    311a:	b007      	add	sp, #28
    311c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3120:	f001 b9ce 	b.w	44c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    3124:	7805      	ldrb	r5, [r0, #0]
    3126:	2300      	movs	r3, #0
    3128:	2201      	movs	r2, #1
    312a:	4619      	mov	r1, r3
    312c:	4668      	mov	r0, sp
    312e:	f000 f95b 	bl	33e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    3132:	b140      	cbz	r0, 3146 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12e>
    3134:	4669      	mov	r1, sp
    3136:	4628      	mov	r0, r5
    3138:	f006 fec9 	bl	9ece <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    313c:	2800      	cmp	r0, #0
    313e:	d1d9      	bne.n	30f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    3140:	f240 71d7 	movw	r1, #2007	; 0x7d7
    3144:	e013      	b.n	316e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    3146:	70a7      	strb	r7, [r4, #2]
    3148:	f000 f81a 	bl	3180 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    314c:	e7d2      	b.n	30f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    314e:	f000 f8ab 	bl	32a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    3152:	2800      	cmp	r0, #0
    3154:	d1ce      	bne.n	30f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    3156:	b007      	add	sp, #28
    3158:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    315c:	f006 bcc1 	b.w	9ae2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    3160:	b007      	add	sp, #28
    3162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3166:	f000 b80b 	b.w	3180 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    316a:	f240 2113 	movw	r1, #531	; 0x213
    316e:	2021      	movs	r0, #33	; 0x21
    3170:	f7fd fd06 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3174:	f240 2117 	movw	r1, #535	; 0x217
    3178:	e7f9      	b.n	316e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    317a:	0000      	.short	0x0000
    317c:	20000628 	.word	0x20000628
    3180:	b510      	push	{r4, lr}
    3182:	4c0b      	ldr	r4, [pc, #44]	; (31b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x198>)
    3184:	7820      	ldrb	r0, [r4, #0]
    3186:	b138      	cbz	r0, 3198 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x180>
    3188:	f000 fa86 	bl	3698 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    318c:	78a0      	ldrb	r0, [r4, #2]
    318e:	b150      	cbz	r0, 31a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    3190:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3194:	b128      	cbz	r0, 31a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18a>
    3196:	e006      	b.n	31a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    3198:	f240 117b 	movw	r1, #379	; 0x17b
    319c:	2021      	movs	r0, #33	; 0x21
    319e:	f7fd fcef 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31a2:	f7fe fef3 	bl	1f8c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    31a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    31aa:	f000 baa1 	b.w	36f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    31ae:	0000      	.short	0x0000
    31b0:	20000628 	.word	0x20000628
    31b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31b8:	4d11      	ldr	r5, [pc, #68]	; (3200 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e8>)
    31ba:	4616      	mov	r6, r2
    31bc:	460f      	mov	r7, r1
    31be:	2400      	movs	r4, #0
    31c0:	6068      	str	r0, [r5, #4]
    31c2:	f006 fe5f 	bl	9e84 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    31c6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 3204 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ec>
    31ca:	2100      	movs	r1, #0
    31cc:	f81c 2001 	ldrb.w	r2, [ip, r1]
    31d0:	4232      	tst	r2, r6
    31d2:	d007      	beq.n	31e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    31d4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    31d8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    31dc:	1a1b      	subs	r3, r3, r0
    31de:	1c64      	adds	r4, r4, #1
    31e0:	b2e4      	uxtb	r4, r4
    31e2:	6093      	str	r3, [r2, #8]
    31e4:	1c49      	adds	r1, r1, #1
    31e6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    31ea:	d0ef      	beq.n	31cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1b4>
    31ec:	f016 0f0e 	tst.w	r6, #14
    31f0:	d004      	beq.n	31fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e4>
    31f2:	f240 7103 	movw	r1, #1795	; 0x703
    31f6:	2021      	movs	r0, #33	; 0x21
    31f8:	f7fd fcc2 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3200:	20000628 	.word	0x20000628
    3204:	0000ab71 	.word	0x0000ab71
    3208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    320c:	b086      	sub	sp, #24
    320e:	4692      	mov	sl, r2
    3210:	4607      	mov	r7, r0
    3212:	4689      	mov	r9, r1
    3214:	f000 fa94 	bl	3740 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    3218:	4d22      	ldr	r5, [pc, #136]	; (32a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x28c>)
    321a:	f04f 0800 	mov.w	r8, #0
    321e:	686a      	ldr	r2, [r5, #4]
    3220:	1886      	adds	r6, r0, r2
    3222:	eb41 0108 	adc.w	r1, r1, r8
    3226:	460c      	mov	r4, r1
    3228:	460b      	mov	r3, r1
    322a:	4632      	mov	r2, r6
    322c:	4638      	mov	r0, r7
    322e:	4649      	mov	r1, r9
    3230:	f006 fe4f 	bl	9ed2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    3234:	4607      	mov	r7, r0
    3236:	f006 fe43 	bl	9ec0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    323a:	4287      	cmp	r7, r0
    323c:	da13      	bge.n	3266 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24e>
    323e:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    3242:	f000 fa7d 	bl	3740 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    3246:	4632      	mov	r2, r6
    3248:	4623      	mov	r3, r4
    324a:	f006 fe42 	bl	9ed2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    324e:	6869      	ldr	r1, [r5, #4]
    3250:	fbb0 f1f1 	udiv	r1, r0, r1
    3254:	f8ca 1000 	str.w	r1, [sl]
    3258:	6868      	ldr	r0, [r5, #4]
    325a:	1980      	adds	r0, r0, r6
    325c:	eb48 0104 	adc.w	r1, r8, r4
    3260:	b006      	add	sp, #24
    3262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3266:	f88d 8000 	strb.w	r8, [sp]
    326a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    326c:	9001      	str	r0, [sp, #4]
    326e:	f006 fdf2 	bl	9e56 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    3272:	f8ad 0008 	strh.w	r0, [sp, #8]
    3276:	2001      	movs	r0, #1
    3278:	f88d 000b 	strb.w	r0, [sp, #11]
    327c:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    3280:	f000 fa5e 	bl	3740 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    3284:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3288:	f000 f9ec 	bl	3664 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    328c:	f88d 000a 	strb.w	r0, [sp, #10]
    3290:	4668      	mov	r0, sp
    3292:	6869      	ldr	r1, [r5, #4]
    3294:	f006 fafd 	bl	9892 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    3298:	f8ca 0000 	str.w	r0, [sl]
    329c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    32a0:	e7de      	b.n	3260 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    32a2:	0000      	.short	0x0000
    32a4:	20000628 	.word	0x20000628
    32a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32ac:	f007 f9ac 	bl	a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    32b0:	4c1f      	ldr	r4, [pc, #124]	; (3330 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>)
    32b2:	4606      	mov	r6, r0
    32b4:	460d      	mov	r5, r1
    32b6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    32ba:	f000 f9d3 	bl	3664 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    32be:	4607      	mov	r7, r0
    32c0:	f002 fdec 	bl	5e9c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    32c4:	4602      	mov	r2, r0
    32c6:	2867      	cmp	r0, #103	; 0x67
    32c8:	d323      	bcc.n	3312 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    32ca:	1c50      	adds	r0, r2, #1
    32cc:	d024      	beq.n	3318 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x300>
    32ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
    32d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    32d2:	1888      	adds	r0, r1, r2
    32d4:	4283      	cmp	r3, r0
    32d6:	d800      	bhi.n	32da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2c2>
    32d8:	1a5a      	subs	r2, r3, r1
    32da:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    32de:	1830      	adds	r0, r6, r0
    32e0:	f145 31ff 	adc.w	r1, r5, #4294967295
    32e4:	f000 fa42 	bl	376c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    32e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    32ea:	4408      	add	r0, r1
    32ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    32ee:	1a45      	subs	r5, r0, r1
    32f0:	f241 3088 	movw	r0, #5000	; 0x1388
    32f4:	4285      	cmp	r5, r0
    32f6:	d900      	bls.n	32fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e2>
    32f8:	4605      	mov	r5, r0
    32fa:	f007 f985 	bl	a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    32fe:	1b80      	subs	r0, r0, r6
    3300:	f100 00a1 	add.w	r0, r0, #161	; 0xa1
    3304:	4285      	cmp	r5, r0
    3306:	d304      	bcc.n	3312 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    3308:	4639      	mov	r1, r7
    330a:	4628      	mov	r0, r5
    330c:	f002 fcd6 	bl	5cbc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    3310:	b120      	cbz	r0, 331c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x304>
    3312:	2000      	movs	r0, #0
    3314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3318:	6b60      	ldr	r0, [r4, #52]	; 0x34
    331a:	e7e7      	b.n	32ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d4>
    331c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    331e:	4428      	add	r0, r5
    3320:	6320      	str	r0, [r4, #48]	; 0x30
    3322:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    3324:	4428      	add	r0, r5
    3326:	63a0      	str	r0, [r4, #56]	; 0x38
    3328:	f003 fee0 	bl	70ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    332c:	2001      	movs	r0, #1
    332e:	e7f1      	b.n	3314 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fc>
    3330:	20000628 	.word	0x20000628
    3334:	b510      	push	{r4, lr}
    3336:	2400      	movs	r4, #0
    3338:	f006 fda4 	bl	9e84 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    333c:	4a06      	ldr	r2, [pc, #24]	; (3358 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x340>)
    333e:	2100      	movs	r1, #0
    3340:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    3344:	4404      	add	r4, r0
    3346:	689b      	ldr	r3, [r3, #8]
    3348:	1c49      	adds	r1, r1, #1
    334a:	441c      	add	r4, r3
    334c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    3350:	d0f6      	beq.n	3340 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x328>
    3352:	4620      	mov	r0, r4
    3354:	bd10      	pop	{r4, pc}
    3356:	0000      	.short	0x0000
    3358:	20000628 	.word	0x20000628
    335c:	4901      	ldr	r1, [pc, #4]	; (3364 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34c>)
    335e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    3362:	4770      	bx	lr
    3364:	20000628 	.word	0x20000628
    3368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    336c:	4606      	mov	r6, r0
    336e:	481d      	ldr	r0, [pc, #116]	; (33e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    3370:	4688      	mov	r8, r1
    3372:	4615      	mov	r5, r2
    3374:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    3378:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    337c:	2701      	movs	r7, #1
    337e:	4050      	eors	r0, r2
    3380:	b086      	sub	sp, #24
    3382:	ea70 0101 	orns	r1, r0, r1
    3386:	d021      	beq.n	33cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    3388:	2400      	movs	r4, #0
    338a:	f88d 4000 	strb.w	r4, [sp]
    338e:	9501      	str	r5, [sp, #4]
    3390:	f006 fd61 	bl	9e56 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    3394:	f8ad 0008 	strh.w	r0, [sp, #8]
    3398:	f88d 700b 	strb.w	r7, [sp, #11]
    339c:	f006 fd90 	bl	9ec0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    33a0:	1982      	adds	r2, r0, r6
    33a2:	eb44 0008 	adc.w	r0, r4, r8
    33a6:	e9cd 2004 	strd	r2, r0, [sp, #16]
    33aa:	2002      	movs	r0, #2
    33ac:	f88d 000a 	strb.w	r0, [sp, #10]
    33b0:	4668      	mov	r0, sp
    33b2:	f003 f95f 	bl	6674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    33b6:	b168      	cbz	r0, 33d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3bc>
    33b8:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    33bc:	194a      	adds	r2, r1, r5
    33be:	4909      	ldr	r1, [pc, #36]	; (33e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    33c0:	4160      	adcs	r0, r4
    33c2:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    33c6:	1a9a      	subs	r2, r3, r2
    33c8:	4181      	sbcs	r1, r0
    33ca:	d408      	bmi.n	33de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c6>
    33cc:	2001      	movs	r0, #1
    33ce:	b006      	add	sp, #24
    33d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33d4:	f240 5135 	movw	r1, #1333	; 0x535
    33d8:	2021      	movs	r0, #33	; 0x21
    33da:	f7fd fbd1 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    33de:	2000      	movs	r0, #0
    33e0:	e7f5      	b.n	33ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b6>
    33e2:	0000      	.short	0x0000
    33e4:	20000628 	.word	0x20000628
    33e8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33ec:	b087      	sub	sp, #28
    33ee:	4614      	mov	r4, r2
    33f0:	4606      	mov	r6, r0
    33f2:	f007 f909 	bl	a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    33f6:	4d99      	ldr	r5, [pc, #612]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    33f8:	4680      	mov	r8, r0
    33fa:	4689      	mov	r9, r1
    33fc:	68a8      	ldr	r0, [r5, #8]
    33fe:	f04f 0a00 	mov.w	sl, #0
    3402:	9002      	str	r0, [sp, #8]
    3404:	f7ff ff96 	bl	3334 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    3408:	6869      	ldr	r1, [r5, #4]
    340a:	4288      	cmp	r0, r1
    340c:	d101      	bne.n	3412 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fa>
    340e:	2001      	movs	r0, #1
    3410:	e000      	b.n	3414 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fc>
    3412:	2000      	movs	r0, #0
    3414:	9004      	str	r0, [sp, #16]
    3416:	4020      	ands	r0, r4
    3418:	9003      	str	r0, [sp, #12]
    341a:	9808      	ldr	r0, [sp, #32]
    341c:	2800      	cmp	r0, #0
    341e:	d07f      	beq.n	3520 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    3420:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    3424:	eb18 0b02 	adds.w	fp, r8, r2
    3428:	f149 0400 	adc.w	r4, r9, #0
    342c:	f000 fa8a 	bl	3944 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    3430:	9000      	str	r0, [sp, #0]
    3432:	488a      	ldr	r0, [pc, #552]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    3434:	7800      	ldrb	r0, [r0, #0]
    3436:	4f89      	ldr	r7, [pc, #548]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    3438:	3740      	adds	r7, #64	; 0x40
    343a:	2805      	cmp	r0, #5
    343c:	d135      	bne.n	34aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    343e:	4887      	ldr	r0, [pc, #540]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    3440:	6a00      	ldr	r0, [r0, #32]
    3442:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    3446:	f000 fa63 	bl	3910 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    344a:	9900      	ldr	r1, [sp, #0]
    344c:	4605      	mov	r5, r0
    344e:	4288      	cmp	r0, r1
    3450:	d009      	beq.n	3466 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44e>
    3452:	4882      	ldr	r0, [pc, #520]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    3454:	4629      	mov	r1, r5
    3456:	6a00      	ldr	r0, [r0, #32]
    3458:	f500 700a 	add.w	r0, r0, #552	; 0x228
    345c:	f000 fa0c 	bl	3878 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    3460:	2000      	movs	r0, #0
    3462:	61b8      	str	r0, [r7, #24]
    3464:	e00c      	b.n	3480 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x468>
    3466:	497d      	ldr	r1, [pc, #500]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    3468:	6a08      	ldr	r0, [r1, #32]
    346a:	f500 700a 	add.w	r0, r0, #552	; 0x228
    346e:	61b8      	str	r0, [r7, #24]
    3470:	6a08      	ldr	r0, [r1, #32]
    3472:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    3474:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    3478:	4282      	cmp	r2, r0
    347a:	d300      	bcc.n	347e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x466>
    347c:	4610      	mov	r0, r2
    347e:	6488      	str	r0, [r1, #72]	; 0x48
    3480:	4876      	ldr	r0, [pc, #472]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    3482:	6a00      	ldr	r0, [r0, #32]
    3484:	b158      	cbz	r0, 349e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x486>
    3486:	b16d      	cbz	r5, 34a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48c>
    3488:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    348c:	f8d5 c000 	ldr.w	ip, [r5]
    3490:	eb1c 0303 	adds.w	r3, ip, r3
    3494:	eb41 010a 	adc.w	r1, r1, sl
    3498:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    349c:	e005      	b.n	34aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    349e:	f240 7193 	movw	r1, #1939	; 0x793
    34a2:	e01a      	b.n	34da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    34a4:	2100      	movs	r1, #0
    34a6:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    34aa:	4638      	mov	r0, r7
    34ac:	9900      	ldr	r1, [sp, #0]
    34ae:	f000 f9e3 	bl	3878 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    34b2:	486a      	ldr	r0, [pc, #424]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    34b4:	9a00      	ldr	r2, [sp, #0]
    34b6:	6845      	ldr	r5, [r0, #4]
    34b8:	b192      	cbz	r2, 34e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c8>
    34ba:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    34be:	6817      	ldr	r7, [r2, #0]
    34c0:	e9cd b400 	strd	fp, r4, [sp]
    34c4:	18f8      	adds	r0, r7, r3
    34c6:	eb41 010a 	adc.w	r1, r1, sl
    34ca:	462a      	mov	r2, r5
    34cc:	f006 fd29 	bl	9f22 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    34d0:	4601      	mov	r1, r0
    34d2:	42a8      	cmp	r0, r5
    34d4:	d905      	bls.n	34e2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4ca>
    34d6:	f240 31f9 	movw	r1, #1017	; 0x3f9
    34da:	2021      	movs	r0, #33	; 0x21
    34dc:	f7fd fb50 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34e0:	2100      	movs	r1, #0
    34e2:	eb1b 0501 	adds.w	r5, fp, r1
    34e6:	495d      	ldr	r1, [pc, #372]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    34e8:	4650      	mov	r0, sl
    34ea:	4144      	adcs	r4, r0
    34ec:	684a      	ldr	r2, [r1, #4]
    34ee:	1aab      	subs	r3, r5, r2
    34f0:	eb64 020a 	sbc.w	r2, r4, sl
    34f4:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    34f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    34fa:	3128      	adds	r1, #40	; 0x28
    34fc:	b152      	cbz	r2, 3514 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    34fe:	f242 7310 	movw	r3, #10000	; 0x2710
    3502:	435a      	muls	r2, r3
    3504:	18aa      	adds	r2, r5, r2
    3506:	eb44 000a 	adc.w	r0, r4, sl
    350a:	e9c1 2000 	strd	r2, r0, [r1]
    350e:	2001      	movs	r0, #1
    3510:	e051      	b.n	35b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59e>
    3512:	e005      	b.n	3520 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    3514:	f04f 30ff 	mov.w	r0, #4294967295
    3518:	0842      	lsrs	r2, r0, #1
    351a:	e9c1 0200 	strd	r0, r2, [r1]
    351e:	e7f6      	b.n	350e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f6>
    3520:	9803      	ldr	r0, [sp, #12]
    3522:	b1d8      	cbz	r0, 355c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x544>
    3524:	2001      	movs	r0, #1
    3526:	f006 fcb8 	bl	9e9a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    352a:	4604      	mov	r4, r0
    352c:	2001      	movs	r0, #1
    352e:	f000 fee5 	bl	42fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    3532:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    3536:	4401      	add	r1, r0
    3538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    353c:	fbb1 f0f0 	udiv	r0, r1, r0
    3540:	1822      	adds	r2, r4, r0
    3542:	4640      	mov	r0, r8
    3544:	4649      	mov	r1, r9
    3546:	32f9      	adds	r2, #249	; 0xf9
    3548:	f7ff ff0e 	bl	3368 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    354c:	b908      	cbnz	r0, 3552 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x53a>
    354e:	2000      	movs	r0, #0
    3550:	9002      	str	r0, [sp, #8]
    3552:	4645      	mov	r5, r8
    3554:	464c      	mov	r4, r9
    3556:	f8cd a014 	str.w	sl, [sp, #20]
    355a:	e02d      	b.n	35b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    355c:	b13c      	cbz	r4, 356e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x556>
    355e:	aa05      	add	r2, sp, #20
    3560:	4640      	mov	r0, r8
    3562:	4649      	mov	r1, r9
    3564:	f7ff fe50 	bl	3208 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f0>
    3568:	4605      	mov	r5, r0
    356a:	460c      	mov	r4, r1
    356c:	e024      	b.n	35b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    356e:	4640      	mov	r0, r8
    3570:	4649      	mov	r1, r9
    3572:	f000 f8e5 	bl	3740 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    3576:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>
    357a:	4602      	mov	r2, r0
    357c:	4608      	mov	r0, r1
    357e:	f8db 1008 	ldr.w	r1, [fp, #8]
    3582:	9102      	str	r1, [sp, #8]
    3584:	f8db 3004 	ldr.w	r3, [fp, #4]
    3588:	4657      	mov	r7, sl
    358a:	189d      	adds	r5, r3, r2
    358c:	eb4a 0400 	adc.w	r4, sl, r0
    3590:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    3594:	f000 f8c8 	bl	3728 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    3598:	f8db 1004 	ldr.w	r1, [fp, #4]
    359c:	4348      	muls	r0, r1
    359e:	9000      	str	r0, [sp, #0]
    35a0:	f7ff fedc 	bl	335c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    35a4:	9a00      	ldr	r2, [sp, #0]
    35a6:	1880      	adds	r0, r0, r2
    35a8:	4179      	adcs	r1, r7
    35aa:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    35ae:	4621      	mov	r1, r4
    35b0:	4628      	mov	r0, r5
    35b2:	f000 f8b9 	bl	3728 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    35b6:	9005      	str	r0, [sp, #20]
    35b8:	2001      	movs	r0, #1
    35ba:	f006 fc6e 	bl	9e9a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    35be:	4607      	mov	r7, r0
    35c0:	2001      	movs	r0, #1
    35c2:	f000 fe9b 	bl	42fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    35c6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    35ca:	4401      	add	r1, r0
    35cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    35d0:	fbb1 f0f0 	udiv	r0, r1, r0
    35d4:	4407      	add	r7, r0
    35d6:	4628      	mov	r0, r5
    35d8:	4621      	mov	r1, r4
    35da:	37f9      	adds	r7, #249	; 0xf9
    35dc:	9a02      	ldr	r2, [sp, #8]
    35de:	f000 f8c5 	bl	376c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    35e2:	491e      	ldr	r1, [pc, #120]	; (365c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    35e4:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    35e8:	6892      	ldr	r2, [r2, #8]
    35ea:	4282      	cmp	r2, r0
    35ec:	d800      	bhi.n	35f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d8>
    35ee:	4610      	mov	r0, r2
    35f0:	6348      	str	r0, [r1, #52]	; 0x34
    35f2:	9a08      	ldr	r2, [sp, #32]
    35f4:	b10a      	cbz	r2, 35fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e2>
    35f6:	e9c1 5404 	strd	r5, r4, [r1, #16]
    35fa:	e9c1 5406 	strd	r5, r4, [r1, #24]
    35fe:	468b      	mov	fp, r1
    3600:	9904      	ldr	r1, [sp, #16]
    3602:	b111      	cbz	r1, 360a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f2>
    3604:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    3608:	e001      	b.n	360e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f6>
    360a:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    360e:	2001      	movs	r0, #1
    3610:	72f0      	strb	r0, [r6, #11]
    3612:	f006 fc20 	bl	9e56 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    3616:	8130      	strh	r0, [r6, #8]
    3618:	4628      	mov	r0, r5
    361a:	4621      	mov	r1, r4
    361c:	f000 f822 	bl	3664 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    3620:	72b0      	strb	r0, [r6, #10]
    3622:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    3626:	6070      	str	r0, [r6, #4]
    3628:	9803      	ldr	r0, [sp, #12]
    362a:	b148      	cbz	r0, 3640 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    362c:	2001      	movs	r0, #1
    362e:	7030      	strb	r0, [r6, #0]
    3630:	4a0b      	ldr	r2, [pc, #44]	; (3660 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x648>)
    3632:	4640      	mov	r0, r8
    3634:	4649      	mov	r1, r9
    3636:	f000 f899 	bl	376c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    363a:	1bc0      	subs	r0, r0, r7
    363c:	6130      	str	r0, [r6, #16]
    363e:	e003      	b.n	3648 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x630>
    3640:	f886 a000 	strb.w	sl, [r6]
    3644:	e9c6 5404 	strd	r5, r4, [r6, #16]
    3648:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    364c:	42b8      	cmp	r0, r7
    364e:	d303      	bcc.n	3658 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x640>
    3650:	2001      	movs	r0, #1
    3652:	b00b      	add	sp, #44	; 0x2c
    3654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3658:	2000      	movs	r0, #0
    365a:	e7fa      	b.n	3652 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63a>
    365c:	20000628 	.word	0x20000628
    3660:	0f424000 	.word	0x0f424000
    3664:	b570      	push	{r4, r5, r6, lr}
    3666:	4604      	mov	r4, r0
    3668:	480a      	ldr	r0, [pc, #40]	; (3694 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>)
    366a:	460d      	mov	r5, r1
    366c:	7801      	ldrb	r1, [r0, #0]
    366e:	2904      	cmp	r1, #4
    3670:	d10d      	bne.n	368e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    3672:	6840      	ldr	r0, [r0, #4]
    3674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3678:	0046      	lsls	r6, r0, #1
    367a:	f7ff fe6f 	bl	335c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    367e:	4622      	mov	r2, r4
    3680:	462b      	mov	r3, r5
    3682:	f006 fc26 	bl	9ed2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    3686:	42b0      	cmp	r0, r6
    3688:	d201      	bcs.n	368e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    368a:	2002      	movs	r0, #2
    368c:	bd70      	pop	{r4, r5, r6, pc}
    368e:	2001      	movs	r0, #1
    3690:	bd70      	pop	{r4, r5, r6, pc}
    3692:	0000      	.short	0x0000
    3694:	20000628 	.word	0x20000628
    3698:	b570      	push	{r4, r5, r6, lr}
    369a:	4d14      	ldr	r5, [pc, #80]	; (36ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d4>)
    369c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    36a0:	f105 0440 	add.w	r4, r5, #64	; 0x40
    36a4:	2800      	cmp	r0, #0
    36a6:	7828      	ldrb	r0, [r5, #0]
    36a8:	d00f      	beq.n	36ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6b2>
    36aa:	2805      	cmp	r0, #5
    36ac:	d004      	beq.n	36b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    36ae:	f240 2157 	movw	r1, #599	; 0x257
    36b2:	2021      	movs	r0, #33	; 0x21
    36b4:	f7fd fa64 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36b8:	4620      	mov	r0, r4
    36ba:	f006 fbe9 	bl	9e90 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    36be:	b178      	cbz	r0, 36e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    36c0:	4620      	mov	r0, r4
    36c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36c6:	f000 b8b5 	b.w	3834 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    36ca:	2805      	cmp	r0, #5
    36cc:	d108      	bne.n	36e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    36ce:	4620      	mov	r0, r4
    36d0:	f006 fbde 	bl	9e90 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    36d4:	b920      	cbnz	r0, 36e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    36d6:	6a28      	ldr	r0, [r5, #32]
    36d8:	f500 700a 	add.w	r0, r0, #552	; 0x228
    36dc:	f000 f8fa 	bl	38d4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    36e0:	4620      	mov	r0, r4
    36e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36e6:	f000 b8f5 	b.w	38d4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    36ea:	0000      	.short	0x0000
    36ec:	20000628 	.word	0x20000628
    36f0:	b510      	push	{r4, lr}
    36f2:	f7fe fb6d 	bl	1dd0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    36f6:	490b      	ldr	r1, [pc, #44]	; (3724 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    36f8:	2000      	movs	r0, #0
    36fa:	7088      	strb	r0, [r1, #2]
    36fc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    3700:	6208      	str	r0, [r1, #32]
    3702:	7008      	strb	r0, [r1, #0]
    3704:	f7fe fb0a 	bl	1d1c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    3708:	4604      	mov	r4, r0
    370a:	7800      	ldrb	r0, [r0, #0]
    370c:	f003 fab4 	bl	6c78 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    3710:	b110      	cbz	r0, 3718 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>
    3712:	2020      	movs	r0, #32
    3714:	7020      	strb	r0, [r4, #0]
    3716:	bd10      	pop	{r4, pc}
    3718:	f240 3192 	movw	r1, #914	; 0x392
    371c:	2021      	movs	r0, #33	; 0x21
    371e:	f7fd fa2f 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3722:	0000      	.short	0x0000
    3724:	20000628 	.word	0x20000628
    3728:	b510      	push	{r4, lr}
    372a:	4604      	mov	r4, r0
    372c:	f7ff fe16 	bl	335c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    3730:	4902      	ldr	r1, [pc, #8]	; (373c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x724>)
    3732:	1a20      	subs	r0, r4, r0
    3734:	6849      	ldr	r1, [r1, #4]
    3736:	fbb0 f0f1 	udiv	r0, r0, r1
    373a:	bd10      	pop	{r4, pc}
    373c:	20000628 	.word	0x20000628
    3740:	b570      	push	{r4, r5, r6, lr}
    3742:	4604      	mov	r4, r0
    3744:	460d      	mov	r5, r1
    3746:	f7ff fe09 	bl	335c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    374a:	4622      	mov	r2, r4
    374c:	462b      	mov	r3, r5
    374e:	f006 fbc0 	bl	9ed2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    3752:	4905      	ldr	r1, [pc, #20]	; (3768 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x750>)
    3754:	684c      	ldr	r4, [r1, #4]
    3756:	fbb0 f0f4 	udiv	r0, r0, r4
    375a:	4344      	muls	r4, r0
    375c:	f7ff fdfe 	bl	335c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    3760:	1900      	adds	r0, r0, r4
    3762:	f141 0100 	adc.w	r1, r1, #0
    3766:	bd70      	pop	{r4, r5, r6, pc}
    3768:	20000628 	.word	0x20000628
    376c:	4b0a      	ldr	r3, [pc, #40]	; (3798 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x780>)
    376e:	b510      	push	{r4, lr}
    3770:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    3774:	1a20      	subs	r0, r4, r0
    3776:	eb63 0301 	sbc.w	r3, r3, r1
    377a:	2400      	movs	r4, #0
    377c:	4621      	mov	r1, r4
    377e:	1a24      	subs	r4, r4, r0
    3780:	4199      	sbcs	r1, r3
    3782:	da06      	bge.n	3792 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    3784:	2100      	movs	r1, #0
    3786:	1a14      	subs	r4, r2, r0
    3788:	eb71 0403 	sbcs.w	r4, r1, r3
    378c:	da00      	bge.n	3790 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x778>
    378e:	4610      	mov	r0, r2
    3790:	bd10      	pop	{r4, pc}
    3792:	2000      	movs	r0, #0
    3794:	bd10      	pop	{r4, pc}
    3796:	0000      	.short	0x0000
    3798:	20000628 	.word	0x20000628

0000379c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    379c:	4902      	ldr	r1, [pc, #8]	; (37a8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0xc>)
    379e:	2000      	movs	r0, #0
    37a0:	6008      	str	r0, [r1, #0]
    37a2:	6048      	str	r0, [r1, #4]
    37a4:	f000 b808 	b.w	37b8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    37a8:	200000ac 	.word	0x200000ac

000037ac <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    37ac:	4901      	ldr	r1, [pc, #4]	; (37b4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    37ae:	7048      	strb	r0, [r1, #1]
    37b0:	4770      	bx	lr
    37b2:	0000      	.short	0x0000
    37b4:	200000ac 	.word	0x200000ac
    37b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    37bc:	4e1c      	ldr	r6, [pc, #112]	; (3830 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x84>)
    37be:	2001      	movs	r0, #1
    37c0:	7030      	strb	r0, [r6, #0]
    37c2:	2400      	movs	r4, #0
    37c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    37c8:	e016      	b.n	37f8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x4c>
    37ca:	2100      	movs	r1, #0
    37cc:	f7fd fc82 	bl	10d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    37d0:	0005      	movs	r5, r0
    37d2:	d014      	beq.n	37fe <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x52>
    37d4:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    37d8:	f003 fa70 	bl	6cbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    37dc:	f885 4248 	strb.w	r4, [r5, #584]	; 0x248
    37e0:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    37e4:	f003 fa48 	bl	6c78 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    37e8:	b160      	cbz	r0, 3804 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x58>
    37ea:	2020      	movs	r0, #32
    37ec:	f885 0249 	strb.w	r0, [r5, #585]	; 0x249
    37f0:	f505 700a 	add.w	r0, r5, #552	; 0x228
    37f4:	f000 f86e 	bl	38d4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    37f8:	9400      	str	r4, [sp, #0]
    37fa:	9401      	str	r4, [sp, #4]
    37fc:	e010      	b.n	3820 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    37fe:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    3802:	e001      	b.n	3808 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x5c>
    3804:	f240 11bf 	movw	r1, #447	; 0x1bf
    3808:	2035      	movs	r0, #53	; 0x35
    380a:	f7fd f9b9 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    380e:	9800      	ldr	r0, [sp, #0]
    3810:	b130      	cbz	r0, 3820 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3812:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    3816:	b119      	cbz	r1, 3820 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3818:	8800      	ldrh	r0, [r0, #0]
    381a:	42b8      	cmp	r0, r7
    381c:	d1d5      	bne.n	37ca <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x1e>
    381e:	e004      	b.n	382a <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x7e>
    3820:	4668      	mov	r0, sp
    3822:	f7fd fc9d 	bl	1160 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3826:	2800      	cmp	r0, #0
    3828:	d0f1      	beq.n	380e <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x62>
    382a:	7034      	strb	r4, [r6, #0]
    382c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3830:	200000ac 	.word	0x200000ac

00003834 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    3834:	b510      	push	{r4, lr}
    3836:	6981      	ldr	r1, [r0, #24]
    3838:	b119      	cbz	r1, 3842 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    383a:	6882      	ldr	r2, [r0, #8]
    383c:	688b      	ldr	r3, [r1, #8]
    383e:	429a      	cmp	r2, r3
    3840:	d203      	bcs.n	384a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    3842:	21c6      	movs	r1, #198	; 0xc6
    3844:	2037      	movs	r0, #55	; 0x37
    3846:	f7fd f99b 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    384a:	6942      	ldr	r2, [r0, #20]
    384c:	614a      	str	r2, [r1, #20]
    384e:	6903      	ldr	r3, [r0, #16]
    3850:	610b      	str	r3, [r1, #16]
    3852:	b10a      	cbz	r2, 3858 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    3854:	6111      	str	r1, [r2, #16]
    3856:	e001      	b.n	385c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    3858:	4a06      	ldr	r2, [pc, #24]	; (3874 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    385a:	6011      	str	r1, [r2, #0]
    385c:	690a      	ldr	r2, [r1, #16]
    385e:	b132      	cbz	r2, 386e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    3860:	6151      	str	r1, [r2, #20]
    3862:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    3866:	4410      	add	r0, r2
    3868:	688a      	ldr	r2, [r1, #8]
    386a:	1a80      	subs	r0, r0, r2
    386c:	e000      	b.n	3870 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    386e:	2000      	movs	r0, #0
    3870:	60c8      	str	r0, [r1, #12]
    3872:	bd10      	pop	{r4, pc}
    3874:	200000b4 	.word	0x200000b4

00003878 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    3878:	b510      	push	{r4, lr}
    387a:	2200      	movs	r2, #0
    387c:	6141      	str	r1, [r0, #20]
    387e:	b189      	cbz	r1, 38a4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    3880:	690b      	ldr	r3, [r1, #16]
    3882:	6108      	str	r0, [r1, #16]
    3884:	6103      	str	r3, [r0, #16]
    3886:	b103      	cbz	r3, 388a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    3888:	6158      	str	r0, [r3, #20]
    388a:	6941      	ldr	r1, [r0, #20]
    388c:	60c2      	str	r2, [r0, #12]
    388e:	2900      	cmp	r1, #0
    3890:	d00f      	beq.n	38b2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    3892:	68cb      	ldr	r3, [r1, #12]
    3894:	b163      	cbz	r3, 38b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    3896:	6884      	ldr	r4, [r0, #8]
    3898:	42a3      	cmp	r3, r4
    389a:	d207      	bcs.n	38ac <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    389c:	212b      	movs	r1, #43	; 0x2b
    389e:	2037      	movs	r0, #55	; 0x37
    38a0:	f7fd f96e 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    38a4:	4903      	ldr	r1, [pc, #12]	; (38b4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    38a6:	6102      	str	r2, [r0, #16]
    38a8:	6008      	str	r0, [r1, #0]
    38aa:	e7ee      	b.n	388a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    38ac:	1b1b      	subs	r3, r3, r4
    38ae:	60c3      	str	r3, [r0, #12]
    38b0:	60ca      	str	r2, [r1, #12]
    38b2:	bd10      	pop	{r4, pc}
    38b4:	200000b4 	.word	0x200000b4

000038b8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>:
    38b8:	6941      	ldr	r1, [r0, #20]
    38ba:	b929      	cbnz	r1, 38c8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    38bc:	6901      	ldr	r1, [r0, #16]
    38be:	b919      	cbnz	r1, 38c8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    38c0:	4903      	ldr	r1, [pc, #12]	; (38d0 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x18>)
    38c2:	6809      	ldr	r1, [r1, #0]
    38c4:	4281      	cmp	r1, r0
    38c6:	d101      	bne.n	38cc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x14>
    38c8:	2001      	movs	r0, #1
    38ca:	4770      	bx	lr
    38cc:	2000      	movs	r0, #0
    38ce:	4770      	bx	lr
    38d0:	200000b4 	.word	0x200000b4

000038d4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    38d4:	6941      	ldr	r1, [r0, #20]
    38d6:	b149      	cbz	r1, 38ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    38d8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    38dc:	441a      	add	r2, r3
    38de:	68cb      	ldr	r3, [r1, #12]
    38e0:	441a      	add	r2, r3
    38e2:	60ca      	str	r2, [r1, #12]
    38e4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    38e8:	6111      	str	r1, [r2, #16]
    38ea:	e002      	b.n	38f2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    38ec:	4a07      	ldr	r2, [pc, #28]	; (390c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x38>)
    38ee:	6901      	ldr	r1, [r0, #16]
    38f0:	6011      	str	r1, [r2, #0]
    38f2:	6902      	ldr	r2, [r0, #16]
    38f4:	2100      	movs	r1, #0
    38f6:	b112      	cbz	r2, 38fe <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x2a>
    38f8:	6943      	ldr	r3, [r0, #20]
    38fa:	6153      	str	r3, [r2, #20]
    38fc:	e002      	b.n	3904 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    38fe:	6942      	ldr	r2, [r0, #20]
    3900:	b102      	cbz	r2, 3904 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    3902:	60d1      	str	r1, [r2, #12]
    3904:	6101      	str	r1, [r0, #16]
    3906:	6141      	str	r1, [r0, #20]
    3908:	4770      	bx	lr
    390a:	0000      	.short	0x0000
    390c:	200000b4 	.word	0x200000b4

00003910 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    3910:	b510      	push	{r4, lr}
    3912:	4604      	mov	r4, r0
    3914:	490a      	ldr	r1, [pc, #40]	; (3940 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    3916:	2000      	movs	r0, #0
    3918:	4602      	mov	r2, r0
    391a:	6809      	ldr	r1, [r1, #0]
    391c:	1e43      	subs	r3, r0, #1
    391e:	e008      	b.n	3932 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    3920:	68ca      	ldr	r2, [r1, #12]
    3922:	42a2      	cmp	r2, r4
    3924:	d303      	bcc.n	392e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    3926:	429a      	cmp	r2, r3
    3928:	d201      	bcs.n	392e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    392a:	4613      	mov	r3, r2
    392c:	4608      	mov	r0, r1
    392e:	460a      	mov	r2, r1
    3930:	6909      	ldr	r1, [r1, #16]
    3932:	2900      	cmp	r1, #0
    3934:	d1f4      	bne.n	3920 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    3936:	2800      	cmp	r0, #0
    3938:	d100      	bne.n	393c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    393a:	4610      	mov	r0, r2
    393c:	bd10      	pop	{r4, pc}
    393e:	0000      	.short	0x0000
    3940:	200000b4 	.word	0x200000b4

00003944 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    3944:	4804      	ldr	r0, [pc, #16]	; (3958 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    3946:	6801      	ldr	r1, [r0, #0]
    3948:	2000      	movs	r0, #0
    394a:	e001      	b.n	3950 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    394c:	4608      	mov	r0, r1
    394e:	6909      	ldr	r1, [r1, #16]
    3950:	2900      	cmp	r1, #0
    3952:	d1fb      	bne.n	394c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    3954:	4770      	bx	lr
    3956:	0000      	.short	0x0000
    3958:	200000b4 	.word	0x200000b4

0000395c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    395c:	4801      	ldr	r0, [pc, #4]	; (3964 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    395e:	2100      	movs	r1, #0
    3960:	6001      	str	r1, [r0, #0]
    3962:	4770      	bx	lr
    3964:	200000b4 	.word	0x200000b4

00003968 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    3968:	4903      	ldr	r1, [pc, #12]	; (3978 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    396a:	2000      	movs	r0, #0
    396c:	6809      	ldr	r1, [r1, #0]
    396e:	2900      	cmp	r1, #0
    3970:	d000      	beq.n	3974 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    3972:	200c      	movs	r0, #12
    3974:	4770      	bx	lr
    3976:	0000      	.short	0x0000
    3978:	200000b4 	.word	0x200000b4

0000397c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    397c:	4903      	ldr	r1, [pc, #12]	; (398c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    397e:	884a      	ldrh	r2, [r1, #2]
    3980:	8002      	strh	r2, [r0, #0]
    3982:	7809      	ldrb	r1, [r1, #0]
    3984:	7081      	strb	r1, [r0, #2]
    3986:	2000      	movs	r0, #0
    3988:	4770      	bx	lr
    398a:	0000      	.short	0x0000
    398c:	20000d8c 	.word	0x20000d8c

00003990 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    3990:	7801      	ldrb	r1, [r0, #0]
    3992:	b171      	cbz	r1, 39b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    3994:	7841      	ldrb	r1, [r0, #1]
    3996:	b161      	cbz	r1, 39b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    3998:	8841      	ldrh	r1, [r0, #2]
    399a:	291b      	cmp	r1, #27
    399c:	d309      	bcc.n	39b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    399e:	8881      	ldrh	r1, [r0, #4]
    39a0:	291b      	cmp	r1, #27
    39a2:	d306      	bcc.n	39b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    39a4:	4904      	ldr	r1, [pc, #16]	; (39b8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    39a6:	6802      	ldr	r2, [r0, #0]
    39a8:	600a      	str	r2, [r1, #0]
    39aa:	8880      	ldrh	r0, [r0, #4]
    39ac:	8088      	strh	r0, [r1, #4]
    39ae:	2000      	movs	r0, #0
    39b0:	4770      	bx	lr
    39b2:	2012      	movs	r0, #18
    39b4:	4770      	bx	lr
    39b6:	0000      	.short	0x0000
    39b8:	20000d8c 	.word	0x20000d8c

000039bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    39bc:	6800      	ldr	r0, [r0, #0]
    39be:	f240 41e2 	movw	r1, #1250	; 0x4e2
    39c2:	4288      	cmp	r0, r1
    39c4:	d303      	bcc.n	39ce <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    39c6:	4903      	ldr	r1, [pc, #12]	; (39d4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    39c8:	6088      	str	r0, [r1, #8]
    39ca:	2000      	movs	r0, #0
    39cc:	4770      	bx	lr
    39ce:	2012      	movs	r0, #18
    39d0:	4770      	bx	lr
    39d2:	0000      	.short	0x0000
    39d4:	20000d8c 	.word	0x20000d8c

000039d8 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    39d8:	b510      	push	{r4, lr}
    39da:	b086      	sub	sp, #24
    39dc:	4604      	mov	r4, r0
    39de:	f006 fc6d 	bl	a2bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xbc>
    39e2:	2800      	cmp	r0, #0
    39e4:	d103      	bne.n	39ee <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    39e6:	f006 fd0d 	bl	a404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    39ea:	b110      	cbz	r0, 39f2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    39ec:	200c      	movs	r0, #12
    39ee:	b006      	add	sp, #24
    39f0:	bd10      	pop	{r4, pc}
    39f2:	2102      	movs	r1, #2
    39f4:	f104 0010 	add.w	r0, r4, #16
    39f8:	f000 f882 	bl	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
    39fc:	78a0      	ldrb	r0, [r4, #2]
    39fe:	f88d 0008 	strb.w	r0, [sp, #8]
    3a02:	78a0      	ldrb	r0, [r4, #2]
    3a04:	f88d 0000 	strb.w	r0, [sp]
    3a08:	7860      	ldrb	r0, [r4, #1]
    3a0a:	f88d 0003 	strb.w	r0, [sp, #3]
    3a0e:	7820      	ldrb	r0, [r4, #0]
    3a10:	f88d 0002 	strb.w	r0, [sp, #2]
    3a14:	7e20      	ldrb	r0, [r4, #24]
    3a16:	f88d 0004 	strb.w	r0, [sp, #4]
    3a1a:	78a0      	ldrb	r0, [r4, #2]
    3a1c:	07c0      	lsls	r0, r0, #31
    3a1e:	d00b      	beq.n	3a38 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    3a20:	78e0      	ldrb	r0, [r4, #3]
    3a22:	2801      	cmp	r0, #1
    3a24:	d011      	beq.n	3a4a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    3a26:	b190      	cbz	r0, 3a4e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    3a28:	f05f 0000 	movs.w	r0, #0
    3a2c:	f88d 0001 	strb.w	r0, [sp, #1]
    3a30:	68a0      	ldr	r0, [r4, #8]
    3a32:	9003      	str	r0, [sp, #12]
    3a34:	6920      	ldr	r0, [r4, #16]
    3a36:	9004      	str	r0, [sp, #16]
    3a38:	a802      	add	r0, sp, #8
    3a3a:	f7ff faed 	bl	3018 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    3a3e:	2800      	cmp	r0, #0
    3a40:	d1d5      	bne.n	39ee <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    3a42:	4668      	mov	r0, sp
    3a44:	f7fe fa6e 	bl	1f24 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    3a48:	e7d1      	b.n	39ee <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    3a4a:	2002      	movs	r0, #2
    3a4c:	e7ee      	b.n	3a2c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    3a4e:	2001      	movs	r0, #1
    3a50:	e7ec      	b.n	3a2c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

00003a54 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    3a54:	4801      	ldr	r0, [pc, #4]	; (3a5c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    3a56:	f990 0000 	ldrsb.w	r0, [r0]
    3a5a:	4770      	bx	lr
    3a5c:	200000b8 	.word	0x200000b8

00003a60 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    3a60:	4a03      	ldr	r2, [pc, #12]	; (3a70 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    3a62:	e9d2 1200 	ldrd	r1, r2, [r2]
    3a66:	6001      	str	r1, [r0, #0]
    3a68:	6042      	str	r2, [r0, #4]
    3a6a:	2000      	movs	r0, #0
    3a6c:	4770      	bx	lr
    3a6e:	0000      	.short	0x0000
    3a70:	00003b54 	.word	0x00003b54
    3a74:	b510      	push	{r4, lr}
    3a76:	480e      	ldr	r0, [pc, #56]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a78:	2100      	movs	r1, #0
    3a7a:	4b0e      	ldr	r3, [pc, #56]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a7c:	74c1      	strb	r1, [r0, #19]
    3a7e:	8281      	strh	r1, [r0, #20]
    3a80:	221b      	movs	r2, #27
    3a82:	801a      	strh	r2, [r3, #0]
    3a84:	f44f 74a4 	mov.w	r4, #328	; 0x148
    3a88:	805c      	strh	r4, [r3, #2]
    3a8a:	809a      	strh	r2, [r3, #4]
    3a8c:	80dc      	strh	r4, [r3, #6]
    3a8e:	7381      	strb	r1, [r0, #14]
    3a90:	73c1      	strb	r1, [r0, #15]
    3a92:	2303      	movs	r3, #3
    3a94:	7003      	strb	r3, [r0, #0]
    3a96:	2302      	movs	r3, #2
    3a98:	7043      	strb	r3, [r0, #1]
    3a9a:	8042      	strh	r2, [r0, #2]
    3a9c:	8082      	strh	r2, [r0, #4]
    3a9e:	f640 62a6 	movw	r2, #3750	; 0xea6
    3aa2:	6082      	str	r2, [r0, #8]
    3aa4:	7481      	strb	r1, [r0, #18]
    3aa6:	7301      	strb	r1, [r0, #12]
    3aa8:	4802      	ldr	r0, [pc, #8]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3aaa:	1f80      	subs	r0, r0, #6
    3aac:	7001      	strb	r1, [r0, #0]
    3aae:	bd10      	pop	{r4, pc}
    3ab0:	20000d8c 	.word	0x20000d8c
    3ab4:	200000c6 	.word	0x200000c6
    3ab8:	4904      	ldr	r1, [pc, #16]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    3abe:	4288      	cmp	r0, r1
    3ac0:	d301      	bcc.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3ac2:	2000      	movs	r0, #0
    3ac4:	4770      	bx	lr
    3ac6:	2001      	movs	r0, #1
    3ac8:	4770      	bx	lr
    3aca:	0000      	.short	0x0000
    3acc:	0270f3cc 	.word	0x0270f3cc
    3ad0:	4904      	ldr	r1, [pc, #16]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3ad2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    3ad6:	4288      	cmp	r0, r1
    3ad8:	d301      	bcc.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3ada:	2000      	movs	r0, #0
    3adc:	4770      	bx	lr
    3ade:	2001      	movs	r0, #1
    3ae0:	4770      	bx	lr
    3ae2:	0000      	.short	0x0000
    3ae4:	009c363d 	.word	0x009c363d
    3ae8:	4904      	ldr	r1, [pc, #16]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3aea:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    3aee:	4288      	cmp	r0, r1
    3af0:	d301      	bcc.n	3af6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e>
    3af2:	2000      	movs	r0, #0
    3af4:	4770      	bx	lr
    3af6:	2001      	movs	r0, #1
    3af8:	4770      	bx	lr
    3afa:	0000      	.short	0x0000
    3afc:	009c363d 	.word	0x009c363d
    3b00:	b530      	push	{r4, r5, lr}
    3b02:	2200      	movs	r2, #0
    3b04:	4d07      	ldr	r5, [pc, #28]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3b06:	e009      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
    3b08:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    3b0c:	462b      	mov	r3, r5
    3b0e:	429c      	cmp	r4, r3
    3b10:	d800      	bhi.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3b12:	4623      	mov	r3, r4
    3b14:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    3b18:	1c52      	adds	r2, r2, #1
    3b1a:	b2d2      	uxtb	r2, r2
    3b1c:	428a      	cmp	r2, r1
    3b1e:	d3f3      	bcc.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3b20:	bd30      	pop	{r4, r5, pc}
    3b22:	0000      	.short	0x0000
    3b24:	00f42400 	.word	0x00f42400
    3b28:	4a09      	ldr	r2, [pc, #36]	; (3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>)
    3b2a:	4290      	cmp	r0, r2
    3b2c:	d80b      	bhi.n	3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b2e:	2901      	cmp	r1, #1
    3b30:	d002      	beq.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b32:	2904      	cmp	r1, #4
    3b34:	d003      	beq.n	3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
    3b36:	e008      	b.n	3b4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb2>
    3b38:	f240 7153 	movw	r1, #1875	; 0x753
    3b3c:	e001      	b.n	3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b3e:	f640 11c4 	movw	r1, #2500	; 0x9c4
    3b42:	4288      	cmp	r0, r1
    3b44:	d201      	bcs.n	3b4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb2>
    3b46:	2000      	movs	r0, #0
    3b48:	4770      	bx	lr
    3b4a:	2001      	movs	r0, #1
    3b4c:	4770      	bx	lr
    3b4e:	0000      	.short	0x0000
    3b50:	0270fd8f 	.word	0x0270fd8f
    3b54:	0d10770d 	.word	0x0d10770d
    3b58:	10770059 	.word	0x10770059
	...

00003b64 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	460d      	mov	r5, r1
    3b68:	f7fd ffa0 	bl	1aac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    3b6c:	4c05      	ldr	r4, [pc, #20]	; (3b84 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    3b6e:	6065      	str	r5, [r4, #4]
    3b70:	68a0      	ldr	r0, [r4, #8]
    3b72:	f006 fc72 	bl	a45a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    3b76:	f006 fb20 	bl	a1ba <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    3b7a:	f7fe f815 	bl	1ba8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    3b7e:	2001      	movs	r0, #1
    3b80:	7020      	strb	r0, [r4, #0]
    3b82:	bd70      	pop	{r4, r5, r6, pc}
    3b84:	200000d0 	.word	0x200000d0

00003b88 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    3b88:	4801      	ldr	r0, [pc, #4]	; (3b90 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    3b8a:	7800      	ldrb	r0, [r0, #0]
    3b8c:	4770      	bx	lr
    3b8e:	0000      	.short	0x0000
    3b90:	200000d0 	.word	0x200000d0

00003b94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    3b94:	b510      	push	{r4, lr}
    3b96:	4c06      	ldr	r4, [pc, #24]	; (3bb0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    3b98:	68e0      	ldr	r0, [r4, #12]
    3b9a:	f006 fc5e 	bl	a45a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    3b9e:	6920      	ldr	r0, [r4, #16]
    3ba0:	f006 fc5b 	bl	a45a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    3ba4:	f006 fb2c 	bl	a200 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    3ba8:	2000      	movs	r0, #0
    3baa:	7020      	strb	r0, [r4, #0]
    3bac:	bd10      	pop	{r4, pc}
    3bae:	0000      	.short	0x0000
    3bb0:	200000d0 	.word	0x200000d0

00003bb4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    3bb4:	b510      	push	{r4, lr}
    3bb6:	4905      	ldr	r1, [pc, #20]	; (3bcc <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    3bb8:	4805      	ldr	r0, [pc, #20]	; (3bd0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    3bba:	f006 fc41 	bl	a440 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    3bbe:	4804      	ldr	r0, [pc, #16]	; (3bd0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    3bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bc4:	4903      	ldr	r1, [pc, #12]	; (3bd4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    3bc6:	1d00      	adds	r0, r0, #4
    3bc8:	f006 bc3a 	b.w	a440 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    3bcc:	200000e4 	.word	0x200000e4
    3bd0:	200000d8 	.word	0x200000d8
    3bd4:	200000ec 	.word	0x200000ec
    3bd8:	b510      	push	{r4, lr}
    3bda:	f7ff febf 	bl	395c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    3bde:	f7ff f9f3 	bl	2fc8 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    3be2:	f7ff fddb 	bl	379c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    3be6:	f7ff ff35 	bl	3a54 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    3bea:	4601      	mov	r1, r0
    3bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bf0:	4801      	ldr	r0, [pc, #4]	; (3bf8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x44>)
    3bf2:	f7fe b907 	b.w	1e04 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    3bf6:	0000      	.short	0x0000
    3bf8:	20001047 	.word	0x20001047

00003bfc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    3bfc:	4806      	ldr	r0, [pc, #24]	; (3c18 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    3bfe:	8801      	ldrh	r1, [r0, #0]
    3c00:	7900      	ldrb	r0, [r0, #4]
    3c02:	0602      	lsls	r2, r0, #24
    3c04:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    3c08:	f000 0001 	and.w	r0, r0, #1
    3c0c:	1800      	adds	r0, r0, r0
    3c0e:	b2c0      	uxtb	r0, r0
    3c10:	f040 0001 	orr.w	r0, r0, #1
    3c14:	4770      	bx	lr
    3c16:	0000      	.short	0x0000
    3c18:	20000020 	.word	0x20000020

00003c1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    3c1c:	b510      	push	{r4, lr}
    3c1e:	f004 fb75 	bl	830c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3c22:	2200      	movs	r2, #0
    3c24:	4b08      	ldr	r3, [pc, #32]	; (3c48 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    3c26:	4611      	mov	r1, r2
    3c28:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3c2c:	4284      	cmp	r4, r0
    3c2e:	d303      	bcc.n	3c38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    3c30:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3c34:	7882      	ldrb	r2, [r0, #2]
    3c36:	e003      	b.n	3c40 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    3c38:	1c49      	adds	r1, r1, #1
    3c3a:	b2c9      	uxtb	r1, r1
    3c3c:	290c      	cmp	r1, #12
    3c3e:	d3f3      	bcc.n	3c28 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    3c40:	4802      	ldr	r0, [pc, #8]	; (3c4c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    3c42:	7002      	strb	r2, [r0, #0]
    3c44:	bd10      	pop	{r4, pc}
    3c46:	0000      	.short	0x0000
    3c48:	0000a4a8 	.word	0x0000a4a8
    3c4c:	20000187 	.word	0x20000187

00003c50 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    3c50:	4802      	ldr	r0, [pc, #8]	; (3c5c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    3c52:	7800      	ldrb	r0, [r0, #0]
    3c54:	f000 0007 	and.w	r0, r0, #7
    3c58:	4770      	bx	lr
    3c5a:	0000      	.short	0x0000
    3c5c:	20000187 	.word	0x20000187

00003c60 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    3c60:	b570      	push	{r4, r5, r6, lr}
    3c62:	4605      	mov	r5, r0
    3c64:	4616      	mov	r6, r2
    3c66:	460c      	mov	r4, r1
    3c68:	2002      	movs	r0, #2
    3c6a:	f000 f8bd 	bl	3de8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3c6e:	4906      	ldr	r1, [pc, #24]	; (3c88 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    3c70:	2001      	movs	r0, #1
    3c72:	1ef6      	subs	r6, r6, #3
    3c74:	7008      	strb	r0, [r1, #0]
    3c76:	4805      	ldr	r0, [pc, #20]	; (3c8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    3c78:	6006      	str	r6, [r0, #0]
    3c7a:	4804      	ldr	r0, [pc, #16]	; (3c8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    3c7c:	3808      	subs	r0, #8
    3c7e:	6005      	str	r5, [r0, #0]
    3c80:	1f00      	subs	r0, r0, #4
    3c82:	6004      	str	r4, [r0, #0]
    3c84:	bd70      	pop	{r4, r5, r6, pc}
    3c86:	0000      	.short	0x0000
    3c88:	20000188 	.word	0x20000188
    3c8c:	4000f510 	.word	0x4000f510

00003c90 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    3c90:	b510      	push	{r4, lr}
    3c92:	4c0c      	ldr	r4, [pc, #48]	; (3cc4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    3c94:	7820      	ldrb	r0, [r4, #0]
    3c96:	b180      	cbz	r0, 3cba <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    3c98:	490b      	ldr	r1, [pc, #44]	; (3cc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    3c9a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3c9e:	6008      	str	r0, [r1, #0]
    3ca0:	f000 f86a 	bl	3d78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    3ca4:	2100      	movs	r1, #0
    3ca6:	b120      	cbz	r0, 3cb2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    3ca8:	2001      	movs	r0, #1
    3caa:	7060      	strb	r0, [r4, #1]
    3cac:	4807      	ldr	r0, [pc, #28]	; (3ccc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    3cae:	6800      	ldr	r0, [r0, #0]
    3cb0:	e001      	b.n	3cb6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    3cb2:	7061      	strb	r1, [r4, #1]
    3cb4:	2010      	movs	r0, #16
    3cb6:	70a0      	strb	r0, [r4, #2]
    3cb8:	7021      	strb	r1, [r4, #0]
    3cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cbe:	2000      	movs	r0, #0
    3cc0:	f000 b892 	b.w	3de8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3cc4:	20000188 	.word	0x20000188
    3cc8:	4001f508 	.word	0x4001f508
    3ccc:	4000f400 	.word	0x4000f400

00003cd0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    3cd0:	b510      	push	{r4, lr}
    3cd2:	2002      	movs	r0, #2
    3cd4:	f000 f888 	bl	3de8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3cd8:	4904      	ldr	r1, [pc, #16]	; (3cec <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    3cda:	2001      	movs	r0, #1
    3cdc:	7008      	strb	r0, [r1, #0]
    3cde:	f000 f859 	bl	3d94 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    3ce2:	4903      	ldr	r1, [pc, #12]	; (3cf0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    3ce4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3ce8:	6008      	str	r0, [r1, #0]
    3cea:	bd10      	pop	{r4, pc}
    3cec:	20000188 	.word	0x20000188
    3cf0:	4001f504 	.word	0x4001f504

00003cf4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    3cf4:	4803      	ldr	r0, [pc, #12]	; (3d04 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    3cf6:	2100      	movs	r1, #0
    3cf8:	7001      	strb	r1, [r0, #0]
    3cfa:	7041      	strb	r1, [r0, #1]
    3cfc:	2110      	movs	r1, #16
    3cfe:	7081      	strb	r1, [r0, #2]
    3d00:	4770      	bx	lr
    3d02:	0000      	.short	0x0000
    3d04:	20000188 	.word	0x20000188

00003d08 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    3d08:	4807      	ldr	r0, [pc, #28]	; (3d28 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    3d0a:	b510      	push	{r4, lr}
    3d0c:	7801      	ldrb	r1, [r0, #0]
    3d0e:	b141      	cbz	r1, 3d22 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    3d10:	f000 f832 	bl	3d78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    3d14:	b118      	cbz	r0, 3d1e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    3d16:	4805      	ldr	r0, [pc, #20]	; (3d2c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    3d18:	6800      	ldr	r0, [r0, #0]
    3d1a:	b2c0      	uxtb	r0, r0
    3d1c:	bd10      	pop	{r4, pc}
    3d1e:	2010      	movs	r0, #16
    3d20:	bd10      	pop	{r4, pc}
    3d22:	7880      	ldrb	r0, [r0, #2]
    3d24:	bd10      	pop	{r4, pc}
    3d26:	0000      	.short	0x0000
    3d28:	20000188 	.word	0x20000188
    3d2c:	4000f400 	.word	0x4000f400

00003d30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    3d30:	4808      	ldr	r0, [pc, #32]	; (3d54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    3d32:	b510      	push	{r4, lr}
    3d34:	7801      	ldrb	r1, [r0, #0]
    3d36:	b159      	cbz	r1, 3d50 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    3d38:	4807      	ldr	r0, [pc, #28]	; (3d58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    3d3a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3d3e:	b128      	cbz	r0, 3d4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    3d40:	f000 f80c 	bl	3d5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    3d44:	2800      	cmp	r0, #0
    3d46:	d000      	beq.n	3d4a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    3d48:	2001      	movs	r0, #1
    3d4a:	bd10      	pop	{r4, pc}
    3d4c:	2002      	movs	r0, #2
    3d4e:	bd10      	pop	{r4, pc}
    3d50:	7840      	ldrb	r0, [r0, #1]
    3d52:	bd10      	pop	{r4, pc}
    3d54:	20000188 	.word	0x20000188
    3d58:	4000f000 	.word	0x4000f000
    3d5c:	4805      	ldr	r0, [pc, #20]	; (3d74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    3d5e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    3d62:	b111      	cbz	r1, 3d6a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    3d64:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    3d68:	b108      	cbz	r0, 3d6e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    3d6a:	2000      	movs	r0, #0
    3d6c:	4770      	bx	lr
    3d6e:	2001      	movs	r0, #1
    3d70:	4770      	bx	lr
    3d72:	0000      	.short	0x0000
    3d74:	4000f000 	.word	0x4000f000
    3d78:	4805      	ldr	r0, [pc, #20]	; (3d90 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    3d7a:	b510      	push	{r4, lr}
    3d7c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3d80:	b120      	cbz	r0, 3d8c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    3d82:	f7ff ffeb 	bl	3d5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    3d86:	b108      	cbz	r0, 3d8c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    3d88:	2001      	movs	r0, #1
    3d8a:	bd10      	pop	{r4, pc}
    3d8c:	2000      	movs	r0, #0
    3d8e:	bd10      	pop	{r4, pc}
    3d90:	4000f000 	.word	0x4000f000
    3d94:	4804      	ldr	r0, [pc, #16]	; (3da8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    3d96:	2100      	movs	r1, #0
    3d98:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3d9c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    3da0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    3da4:	4770      	bx	lr
    3da6:	0000      	.short	0x0000
    3da8:	4000f000 	.word	0x4000f000

00003dac <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    3dac:	b570      	push	{r4, r5, r6, lr}
    3dae:	4d05      	ldr	r5, [pc, #20]	; (3dc4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    3db0:	2400      	movs	r4, #0
    3db2:	7828      	ldrb	r0, [r5, #0]
    3db4:	b110      	cbz	r0, 3dbc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    3db6:	f000 f80f 	bl	3dd8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    3dba:	702c      	strb	r4, [r5, #0]
    3dbc:	706c      	strb	r4, [r5, #1]
    3dbe:	70ac      	strb	r4, [r5, #2]
    3dc0:	bd70      	pop	{r4, r5, r6, pc}
    3dc2:	0000      	.short	0x0000
    3dc4:	2000018b 	.word	0x2000018b

00003dc8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    3dc8:	4802      	ldr	r0, [pc, #8]	; (3dd4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    3dca:	2100      	movs	r1, #0
    3dcc:	7001      	strb	r1, [r0, #0]
    3dce:	7041      	strb	r1, [r0, #1]
    3dd0:	7081      	strb	r1, [r0, #2]
    3dd2:	4770      	bx	lr
    3dd4:	2000018b 	.word	0x2000018b
    3dd8:	4902      	ldr	r1, [pc, #8]	; (3de4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    3dda:	4801      	ldr	r0, [pc, #4]	; (3de0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    3ddc:	6008      	str	r0, [r1, #0]
    3dde:	4770      	bx	lr
    3de0:	02020000 	.word	0x02020000
    3de4:	4001f508 	.word	0x4001f508

00003de8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    3de8:	b510      	push	{r4, lr}
    3dea:	4604      	mov	r4, r0
    3dec:	f000 f820 	bl	3e30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    3df0:	2c00      	cmp	r4, #0
    3df2:	d00e      	beq.n	3e12 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    3df4:	4a0b      	ldr	r2, [pc, #44]	; (3e24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    3df6:	480b      	ldr	r0, [pc, #44]	; (3e24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    3df8:	490b      	ldr	r1, [pc, #44]	; (3e28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    3dfa:	3214      	adds	r2, #20
    3dfc:	2c01      	cmp	r4, #1
    3dfe:	d005      	beq.n	3e0c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    3e00:	2c02      	cmp	r4, #2
    3e02:	d007      	beq.n	3e14 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    3e04:	2182      	movs	r1, #130	; 0x82
    3e06:	203d      	movs	r0, #61	; 0x3d
    3e08:	f7fc feba 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e0c:	2302      	movs	r3, #2
    3e0e:	6003      	str	r3, [r0, #0]
    3e10:	6011      	str	r1, [r2, #0]
    3e12:	bd10      	pop	{r4, pc}
    3e14:	2303      	movs	r3, #3
    3e16:	6003      	str	r3, [r0, #0]
    3e18:	6011      	str	r1, [r2, #0]
    3e1a:	4904      	ldr	r1, [pc, #16]	; (3e2c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    3e1c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3e20:	6008      	str	r0, [r1, #0]
    3e22:	bd10      	pop	{r4, pc}
    3e24:	4000f500 	.word	0x4000f500
    3e28:	2000124b 	.word	0x2000124b
    3e2c:	4001f504 	.word	0x4001f504
    3e30:	4805      	ldr	r0, [pc, #20]	; (3e48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    3e32:	b510      	push	{r4, lr}
    3e34:	2100      	movs	r1, #0
    3e36:	6001      	str	r1, [r0, #0]
    3e38:	6001      	str	r1, [r0, #0]
    3e3a:	f7ff ffb7 	bl	3dac <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    3e3e:	4903      	ldr	r1, [pc, #12]	; (3e4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    3e40:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3e44:	6008      	str	r0, [r1, #0]
    3e46:	bd10      	pop	{r4, pc}
    3e48:	4000f500 	.word	0x4000f500
    3e4c:	4001f508 	.word	0x4001f508

00003e50 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    3e50:	4805      	ldr	r0, [pc, #20]	; (3e68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    3e52:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3e56:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    3e5a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3e5e:	2100      	movs	r1, #0
    3e60:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    3e64:	4770      	bx	lr
    3e66:	0000      	.short	0x0000
    3e68:	40001000 	.word	0x40001000

00003e6c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    3e6c:	4904      	ldr	r1, [pc, #16]	; (3e80 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    3e6e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    3e72:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    3e76:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    3e7a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3e7e:	4770      	bx	lr
    3e80:	40001000 	.word	0x40001000

00003e84 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    3e84:	4902      	ldr	r1, [pc, #8]	; (3e90 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    3e86:	5c08      	ldrb	r0, [r1, r0]
    3e88:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3e8c:	4770      	bx	lr
    3e8e:	0000      	.short	0x0000
    3e90:	00004a7a 	.word	0x00004a7a

00003e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    3e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e96:	4c24      	ldr	r4, [pc, #144]	; (3f28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    3e98:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3e9c:	f010 0f10 	tst.w	r0, #16
    3ea0:	d001      	beq.n	3ea6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    3ea2:	2701      	movs	r7, #1
    3ea4:	e000      	b.n	3ea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    3ea6:	2700      	movs	r7, #0
    3ea8:	2010      	movs	r0, #16
    3eaa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3eae:	2002      	movs	r0, #2
    3eb0:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3eb4:	481d      	ldr	r0, [pc, #116]	; (3f2c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    3eb6:	2500      	movs	r5, #0
    3eb8:	491d      	ldr	r1, [pc, #116]	; (3f30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    3eba:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    3ebe:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    3ec2:	6008      	str	r0, [r1, #0]
    3ec4:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    3ec8:	f44f 7688 	mov.w	r6, #272	; 0x110
    3ecc:	f010 0fff 	tst.w	r0, #255	; 0xff
    3ed0:	d019      	beq.n	3f06 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    3ed2:	20ff      	movs	r0, #255	; 0xff
    3ed4:	f88d 0000 	strb.w	r0, [sp]
    3ed8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3edc:	2001      	movs	r0, #1
    3ede:	6120      	str	r0, [r4, #16]
    3ee0:	e005      	b.n	3eee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    3ee2:	bf00      	nop
    3ee4:	f89d 0000 	ldrb.w	r0, [sp]
    3ee8:	1e40      	subs	r0, r0, #1
    3eea:	f88d 0000 	strb.w	r0, [sp]
    3eee:	f89d 0000 	ldrb.w	r0, [sp]
    3ef2:	b128      	cbz	r0, 3f00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    3ef4:	4631      	mov	r1, r6
    3ef6:	4620      	mov	r0, r4
    3ef8:	f006 fb35 	bl	a566 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3efc:	2800      	cmp	r0, #0
    3efe:	d0f1      	beq.n	3ee4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    3f00:	f89d 0000 	ldrb.w	r0, [sp]
    3f04:	b158      	cbz	r0, 3f1e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    3f06:	f000 fbcd 	bl	46a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    3f0a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3f0e:	f000 fd35 	bl	497c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    3f12:	2f00      	cmp	r7, #0
    3f14:	d002      	beq.n	3f1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    3f16:	2010      	movs	r0, #16
    3f18:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f1e:	f640 0194 	movw	r1, #2196	; 0x894
    3f22:	203e      	movs	r0, #62	; 0x3e
    3f24:	f7fc fe2c 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f28:	40001000 	.word	0x40001000
    3f2c:	20000ddc 	.word	0x20000ddc
    3f30:	4001f508 	.word	0x4001f508

00003f34 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    3f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f38:	4d18      	ldr	r5, [pc, #96]	; (3f9c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    3f3a:	4607      	mov	r7, r0
    3f3c:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    3f40:	07c2      	lsls	r2, r0, #31
    3f42:	d00f      	beq.n	3f64 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    3f44:	4c16      	ldr	r4, [pc, #88]	; (3fa0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    3f46:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    3f4a:	f042 0201 	orr.w	r2, r2, #1
    3f4e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    3f52:	f040 0002 	orr.w	r0, r0, #2
    3f56:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    3f5a:	2601      	movs	r6, #1
    3f5c:	b13f      	cbz	r7, 3f6e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    3f5e:	2f01      	cmp	r7, #1
    3f60:	d00b      	beq.n	3f7a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    3f62:	e010      	b.n	3f86 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3f64:	f240 716f 	movw	r1, #1903	; 0x76f
    3f68:	203e      	movs	r0, #62	; 0x3e
    3f6a:	f7fc fe09 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f6e:	4608      	mov	r0, r1
    3f70:	f000 fd5e 	bl	4a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    3f74:	726e      	strb	r6, [r5, #9]
    3f76:	6026      	str	r6, [r4, #0]
    3f78:	e005      	b.n	3f86 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3f7a:	4608      	mov	r0, r1
    3f7c:	f000 fd3e 	bl	49fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    3f80:	2002      	movs	r0, #2
    3f82:	7268      	strb	r0, [r5, #9]
    3f84:	6066      	str	r6, [r4, #4]
    3f86:	4807      	ldr	r0, [pc, #28]	; (3fa4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3f88:	64c6      	str	r6, [r0, #76]	; 0x4c
    3f8a:	4806      	ldr	r0, [pc, #24]	; (3fa4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3f8c:	300c      	adds	r0, #12
    3f8e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3f92:	4638      	mov	r0, r7
    3f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f98:	f000 bcc2 	b.w	4920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    3f9c:	20000ddc 	.word	0x20000ddc
    3fa0:	40001000 	.word	0x40001000
    3fa4:	40008000 	.word	0x40008000

00003fa8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    3fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fac:	4c2c      	ldr	r4, [pc, #176]	; (4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>)
    3fae:	0006      	movs	r6, r0
    3fb0:	4d2c      	ldr	r5, [pc, #176]	; (4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>)
    3fb2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3fb6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>
    3fba:	f040 0002 	orr.w	r0, r0, #2
    3fbe:	4689      	mov	r9, r1
    3fc0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3fc4:	f04f 0700 	mov.w	r7, #0
    3fc8:	d002      	beq.n	3fd0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    3fca:	2e01      	cmp	r6, #1
    3fcc:	d020      	beq.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    3fce:	e036      	b.n	403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>
    3fd0:	4608      	mov	r0, r1
    3fd2:	f000 fd2d 	bl	4a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    3fd6:	2001      	movs	r0, #1
    3fd8:	7260      	strb	r0, [r4, #9]
    3fda:	79e0      	ldrb	r0, [r4, #7]
    3fdc:	2801      	cmp	r0, #1
    3fde:	d105      	bne.n	3fec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    3fe0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    3fe4:	f040 0008 	orr.w	r0, r0, #8
    3fe8:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3fec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3fee:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    3ff2:	6260      	str	r0, [r4, #36]	; 0x24
    3ff4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3ff8:	f8c8 0000 	str.w	r0, [r8]
    3ffc:	491b      	ldr	r1, [pc, #108]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    3ffe:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    4002:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4006:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    400a:	fbb0 f7f1 	udiv	r7, r0, r1
    400e:	e016      	b.n	403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>
    4010:	4608      	mov	r0, r1
    4012:	f000 fcf3 	bl	49fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    4016:	2002      	movs	r0, #2
    4018:	7260      	strb	r0, [r4, #9]
    401a:	79e0      	ldrb	r0, [r4, #7]
    401c:	2801      	cmp	r0, #1
    401e:	d105      	bne.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    4020:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    4024:	f040 0004 	orr.w	r0, r0, #4
    4028:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    402c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    402e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    4032:	6260      	str	r0, [r4, #36]	; 0x24
    4034:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4038:	f8c8 0000 	str.w	r0, [r8]
    403c:	2729      	movs	r7, #41	; 0x29
    403e:	f000 fb9d 	bl	477c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    4042:	f006 fad8 	bl	a5f6 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    4046:	b120      	cbz	r0, 4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
    4048:	f7ff ff24 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    404c:	2000      	movs	r0, #0
    404e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4052:	2100      	movs	r1, #0
    4054:	4630      	mov	r0, r6
    4056:	f000 fc63 	bl	4920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    405a:	4638      	mov	r0, r7
    405c:	e7f7      	b.n	404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
    405e:	0000      	.short	0x0000
    4060:	20000ddc 	.word	0x20000ddc
    4064:	40001000 	.word	0x40001000
    4068:	4001f504 	.word	0x4001f504
    406c:	00004a74 	.word	0x00004a74

00004070 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    4070:	b510      	push	{r4, lr}
    4072:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    4074:	4901      	ldr	r1, [pc, #4]	; (407c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    4076:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    407a:	bd10      	pop	{r4, pc}
    407c:	20000dcc 	.word	0x20000dcc

00004080 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    4080:	b570      	push	{r4, r5, r6, lr}
    4082:	4c0f      	ldr	r4, [pc, #60]	; (40c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    4084:	4603      	mov	r3, r0
    4086:	2002      	movs	r0, #2
    4088:	7320      	strb	r0, [r4, #12]
    408a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    408e:	2096      	movs	r0, #150	; 0x96
    4090:	f894 1020 	ldrb.w	r1, [r4, #32]
    4094:	7d22      	ldrb	r2, [r4, #20]
    4096:	2d01      	cmp	r5, #1
    4098:	d00e      	beq.n	40b8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    409a:	f000 fd27 	bl	4aec <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    409e:	6120      	str	r0, [r4, #16]
    40a0:	4808      	ldr	r0, [pc, #32]	; (40c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    40a2:	2100      	movs	r1, #0
    40a4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    40a8:	6921      	ldr	r1, [r4, #16]
    40aa:	69e0      	ldr	r0, [r4, #28]
    40ac:	4408      	add	r0, r1
    40ae:	4905      	ldr	r1, [pc, #20]	; (40c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    40b0:	1d09      	adds	r1, r1, #4
    40b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    40b6:	bd70      	pop	{r4, r5, r6, pc}
    40b8:	f000 fd36 	bl	4b28 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    40bc:	e7ef      	b.n	409e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    40be:	0000      	.short	0x0000
    40c0:	20000ddc 	.word	0x20000ddc
    40c4:	40008000 	.word	0x40008000

000040c8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    40c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40cc:	2234      	movs	r2, #52	; 0x34
    40ce:	2100      	movs	r1, #0
    40d0:	4813      	ldr	r0, [pc, #76]	; (4120 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    40d2:	f006 fca5 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    40d6:	f000 fc51 	bl	497c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    40da:	f006 fb62 	bl	a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    40de:	4d11      	ldr	r5, [pc, #68]	; (4124 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    40e0:	4e10      	ldr	r6, [pc, #64]	; (4124 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    40e2:	2400      	movs	r4, #0
    40e4:	4f0f      	ldr	r7, [pc, #60]	; (4124 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    40e6:	3508      	adds	r5, #8
    40e8:	3610      	adds	r6, #16
    40ea:	b928      	cbnz	r0, 40f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    40ec:	f006 fb70 	bl	a7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    40f0:	b910      	cbnz	r0, 40f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    40f2:	f006 fb77 	bl	a7e4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    40f6:	b108      	cbz	r0, 40fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    40f8:	2224      	movs	r2, #36	; 0x24
    40fa:	e006      	b.n	410a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    40fc:	f006 fbb2 	bl	a864 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4100:	b910      	cbnz	r0, 4108 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    4102:	f006 fba5 	bl	a850 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    4106:	b140      	cbz	r0, 411a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    4108:	2240      	movs	r2, #64	; 0x40
    410a:	21ff      	movs	r1, #255	; 0xff
    410c:	4638      	mov	r0, r7
    410e:	f006 fc87 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4112:	602c      	str	r4, [r5, #0]
    4114:	6034      	str	r4, [r6, #0]
    4116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    411a:	2238      	movs	r2, #56	; 0x38
    411c:	e7f5      	b.n	410a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    411e:	0000      	.short	0x0000
    4120:	20000ddc 	.word	0x20000ddc
    4124:	40000e00 	.word	0x40000e00

00004128 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    4128:	b510      	push	{r4, lr}
    412a:	f000 fbdb 	bl	48e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    412e:	f7ff feb1 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4132:	f004 fb67 	bl	8804 <mpsl_fem_disable>
    4136:	b130      	cbz	r0, 4146 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    4138:	1c40      	adds	r0, r0, #1
    413a:	d004      	beq.n	4146 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    413c:	f240 5165 	movw	r1, #1381	; 0x565
    4140:	203e      	movs	r0, #62	; 0x3e
    4142:	f7fc fd1d 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4146:	480f      	ldr	r0, [pc, #60]	; (4184 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    4148:	4a0f      	ldr	r2, [pc, #60]	; (4188 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    414a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    414c:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    4150:	6011      	str	r1, [r2, #0]
    4152:	2400      	movs	r4, #0
    4154:	6244      	str	r4, [r0, #36]	; 0x24
    4156:	7304      	strb	r4, [r0, #12]
    4158:	61c4      	str	r4, [r0, #28]
    415a:	6184      	str	r4, [r0, #24]
    415c:	f000 fbc2 	bl	48e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    4160:	480a      	ldr	r0, [pc, #40]	; (418c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    4162:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    4166:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    416a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    416e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    4172:	2001      	movs	r0, #1
    4174:	f006 f9e6 	bl	a544 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    4178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    417c:	2001      	movs	r0, #1
    417e:	f006 b9d4 	b.w	a52a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    4182:	0000      	.short	0x0000
    4184:	20000ddc 	.word	0x20000ddc
    4188:	4001f508 	.word	0x4001f508
    418c:	40008000 	.word	0x40008000

00004190 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    4190:	b570      	push	{r4, r5, r6, lr}
    4192:	2001      	movs	r0, #1
    4194:	f006 f9d6 	bl	a544 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    4198:	4c37      	ldr	r4, [pc, #220]	; (4278 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    419a:	2000      	movs	r0, #0
    419c:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    41a0:	2001      	movs	r0, #1
    41a2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    41a6:	f006 fb33 	bl	a810 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    41aa:	4d34      	ldr	r5, [pc, #208]	; (427c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    41ac:	b118      	cbz	r0, 41b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    41ae:	6828      	ldr	r0, [r5, #0]
    41b0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    41b4:	6028      	str	r0, [r5, #0]
    41b6:	f006 fb1f 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41ba:	b128      	cbz	r0, 41c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    41bc:	6828      	ldr	r0, [r5, #0]
    41be:	4930      	ldr	r1, [pc, #192]	; (4280 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    41c0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    41c4:	4308      	orrs	r0, r1
    41c6:	6028      	str	r0, [r5, #0]
    41c8:	f006 fb32 	bl	a830 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    41cc:	b138      	cbz	r0, 41de <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    41ce:	482b      	ldr	r0, [pc, #172]	; (427c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    41d0:	1d00      	adds	r0, r0, #4
    41d2:	6801      	ldr	r1, [r0, #0]
    41d4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    41d8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    41dc:	6001      	str	r1, [r0, #0]
    41de:	4927      	ldr	r1, [pc, #156]	; (427c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    41e0:	4828      	ldr	r0, [pc, #160]	; (4284 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    41e2:	313c      	adds	r1, #60	; 0x3c
    41e4:	6008      	str	r0, [r1, #0]
    41e6:	f004 fb47 	bl	8878 <mpsl_fem_device_config_254_apply_get>
    41ea:	b140      	cbz	r0, 41fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    41ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    41f0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    41f4:	1c41      	adds	r1, r0, #1
    41f6:	d002      	beq.n	41fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    41f8:	4920      	ldr	r1, [pc, #128]	; (427c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    41fa:	3110      	adds	r1, #16
    41fc:	6008      	str	r0, [r1, #0]
    41fe:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4202:	6e00      	ldr	r0, [r0, #96]	; 0x60
    4204:	1c41      	adds	r1, r0, #1
    4206:	d004      	beq.n	4212 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    4208:	491f      	ldr	r1, [pc, #124]	; (4288 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    420a:	680a      	ldr	r2, [r1, #0]
    420c:	f360 4217 	bfi	r2, r0, #16, #8
    4210:	600a      	str	r2, [r1, #0]
    4212:	f240 1103 	movw	r1, #259	; 0x103
    4216:	f240 605b 	movw	r0, #1627	; 0x65b
    421a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    421e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4222:	2001      	movs	r0, #1
    4224:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    4228:	f000 f842 	bl	42b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    422c:	f240 2001 	movw	r0, #513	; 0x201
    4230:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    4234:	2002      	movs	r0, #2
    4236:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    423a:	4914      	ldr	r1, [pc, #80]	; (428c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    423c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    4240:	6008      	str	r0, [r1, #0]
    4242:	4913      	ldr	r1, [pc, #76]	; (4290 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    4244:	2000      	movs	r0, #0
    4246:	8608      	strh	r0, [r1, #48]	; 0x30
    4248:	3110      	adds	r1, #16
    424a:	61c8      	str	r0, [r1, #28]
    424c:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    4250:	2001      	movs	r0, #1
    4252:	f006 f96a 	bl	a52a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    4256:	2010      	movs	r0, #16
    4258:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    425c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4260:	2002      	movs	r0, #2
    4262:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    4266:	480b      	ldr	r0, [pc, #44]	; (4294 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    4268:	6800      	ldr	r0, [r0, #0]
    426a:	2800      	cmp	r0, #0
    426c:	d002      	beq.n	4274 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    426e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4272:	4700      	bx	r0
    4274:	bd70      	pop	{r4, r5, r6, pc}
    4276:	0000      	.short	0x0000
    4278:	40001000 	.word	0x40001000
    427c:	4000173c 	.word	0x4000173c
    4280:	80000096 	.word	0x80000096
    4284:	8900002c 	.word	0x8900002c
    4288:	4000158c 	.word	0x4000158c
    428c:	4001f504 	.word	0x4001f504
    4290:	20000dcc 	.word	0x20000dcc
    4294:	200000f4 	.word	0x200000f4

00004298 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    4298:	4901      	ldr	r1, [pc, #4]	; (42a0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    429a:	7548      	strb	r0, [r1, #21]
    429c:	4770      	bx	lr
    429e:	0000      	.short	0x0000
    42a0:	20000ddc 	.word	0x20000ddc

000042a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    42a4:	4901      	ldr	r1, [pc, #4]	; (42ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    42a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    42aa:	4770      	bx	lr
    42ac:	00004ac8 	.word	0x00004ac8

000042b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    42b0:	4908      	ldr	r1, [pc, #32]	; (42d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    42b2:	b510      	push	{r4, lr}
    42b4:	7508      	strb	r0, [r1, #20]
    42b6:	4908      	ldr	r1, [pc, #32]	; (42d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    42b8:	2801      	cmp	r0, #1
    42ba:	d006      	beq.n	42ca <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    42bc:	2802      	cmp	r0, #2
    42be:	d006      	beq.n	42ce <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    42c0:	f640 516c 	movw	r1, #3436	; 0xd6c
    42c4:	203e      	movs	r0, #62	; 0x3e
    42c6:	f7fc fc5b 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42ca:	2003      	movs	r0, #3
    42cc:	e000      	b.n	42d0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    42ce:	2004      	movs	r0, #4
    42d0:	6008      	str	r0, [r1, #0]
    42d2:	bd10      	pop	{r4, pc}
    42d4:	20000ddc 	.word	0x20000ddc
    42d8:	40001510 	.word	0x40001510

000042dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    42dc:	4905      	ldr	r1, [pc, #20]	; (42f4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    42de:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    42e2:	4805      	ldr	r0, [pc, #20]	; (42f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    42e4:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    42e8:	f041 0101 	orr.w	r1, r1, #1
    42ec:	7001      	strb	r1, [r0, #0]
    42ee:	f000 ba0b 	b.w	4708 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    42f2:	0000      	.short	0x0000
    42f4:	40001000 	.word	0x40001000
    42f8:	20000ddc 	.word	0x20000ddc

000042fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    42fc:	4901      	ldr	r1, [pc, #4]	; (4304 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    42fe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4302:	4770      	bx	lr
    4304:	00004ad4 	.word	0x00004ad4

00004308 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    4308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    430c:	4e30      	ldr	r6, [pc, #192]	; (43d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    430e:	4c31      	ldr	r4, [pc, #196]	; (43d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    4310:	4688      	mov	r8, r1
    4312:	0007      	movs	r7, r0
    4314:	4615      	mov	r5, r2
    4316:	f04f 0901 	mov.w	r9, #1
    431a:	d006      	beq.n	432a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    431c:	2f01      	cmp	r7, #1
    431e:	d012      	beq.n	4346 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    4320:	f640 0117 	movw	r1, #2071	; 0x817
    4324:	203e      	movs	r0, #62	; 0x3e
    4326:	f7fc fc2b 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    432a:	4610      	mov	r0, r2
    432c:	f000 fb80 	bl	4a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    4330:	4829      	ldr	r0, [pc, #164]	; (43d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    4332:	f884 9009 	strb.w	r9, [r4, #9]
    4336:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    433a:	4640      	mov	r0, r8
    433c:	f000 fb26 	bl	498c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    4340:	4605      	mov	r5, r0
    4342:	4630      	mov	r0, r6
    4344:	e00c      	b.n	4360 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    4346:	4610      	mov	r0, r2
    4348:	f000 fb58 	bl	49fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    434c:	2002      	movs	r0, #2
    434e:	7260      	strb	r0, [r4, #9]
    4350:	f649 71ba 	movw	r1, #40890	; 0x9fba
    4354:	4640      	mov	r0, r8
    4356:	f000 fb19 	bl	498c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    435a:	4605      	mov	r5, r0
    435c:	481c      	ldr	r0, [pc, #112]	; (43d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    435e:	1d00      	adds	r0, r0, #4
    4360:	f000 fad2 	bl	4908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    4364:	f8df 8074 	ldr.w	r8, [pc, #116]	; 43dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    4368:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    436c:	f8df a074 	ldr.w	sl, [pc, #116]	; 43e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    4370:	481b      	ldr	r0, [pc, #108]	; (43e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    4372:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    4376:	2010      	movs	r0, #16
    4378:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    437c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    437e:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    4382:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    4386:	6260      	str	r0, [r4, #36]	; 0x24
    4388:	4817      	ldr	r0, [pc, #92]	; (43e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    438a:	6006      	str	r6, [r0, #0]
    438c:	f000 f9f6 	bl	477c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    4390:	4641      	mov	r1, r8
    4392:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    4396:	4811      	ldr	r0, [pc, #68]	; (43dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    4398:	300c      	adds	r0, #12
    439a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    439e:	42a8      	cmp	r0, r5
    43a0:	d310      	bcc.n	43c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    43a2:	2000      	movs	r0, #0
    43a4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    43a8:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    43ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    43ae:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    43b2:	6260      	str	r0, [r4, #36]	; 0x24
    43b4:	480c      	ldr	r0, [pc, #48]	; (43e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    43b6:	1d00      	adds	r0, r0, #4
    43b8:	6006      	str	r6, [r0, #0]
    43ba:	f7ff fd6b 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    43be:	2000      	movs	r0, #0
    43c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43c4:	4629      	mov	r1, r5
    43c6:	4638      	mov	r0, r7
    43c8:	f000 faaa 	bl	4920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    43cc:	2001      	movs	r0, #1
    43ce:	e7f7      	b.n	43c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    43d0:	40001000 	.word	0x40001000
    43d4:	20000ddc 	.word	0x20000ddc
    43d8:	00004a74 	.word	0x00004a74
    43dc:	40008000 	.word	0x40008000
    43e0:	40008140 	.word	0x40008140
    43e4:	4001f098 	.word	0x4001f098
    43e8:	4001f504 	.word	0x4001f504

000043ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    43ec:	4b0d      	ldr	r3, [pc, #52]	; (4424 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    43ee:	b510      	push	{r4, lr}
    43f0:	71d8      	strb	r0, [r3, #7]
    43f2:	729a      	strb	r2, [r3, #10]
    43f4:	b151      	cbz	r1, 440c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    43f6:	2002      	movs	r0, #2
    43f8:	7218      	strb	r0, [r3, #8]
    43fa:	2801      	cmp	r0, #1
    43fc:	d008      	beq.n	4410 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    43fe:	2802      	cmp	r0, #2
    4400:	d00f      	beq.n	4422 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    4402:	f640 2144 	movw	r1, #2628	; 0xa44
    4406:	203e      	movs	r0, #62	; 0x3e
    4408:	f7fc fbba 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    440c:	2001      	movs	r0, #1
    440e:	e7f3      	b.n	43f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    4410:	7a58      	ldrb	r0, [r3, #9]
    4412:	2802      	cmp	r0, #2
    4414:	d105      	bne.n	4422 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    4416:	f000 f93b 	bl	4690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    441a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    441e:	f000 ba49 	b.w	48b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    4422:	bd10      	pop	{r4, pc}
    4424:	20000ddc 	.word	0x20000ddc

00004428 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    4428:	4904      	ldr	r1, [pc, #16]	; (443c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    442a:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    442e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    4432:	4249      	negs	r1, r1
    4434:	7001      	strb	r1, [r0, #0]
    4436:	2001      	movs	r0, #1
    4438:	4770      	bx	lr
    443a:	0000      	.short	0x0000
    443c:	40001000 	.word	0x40001000

00004440 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    4440:	4903      	ldr	r1, [pc, #12]	; (4450 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    4442:	0e02      	lsrs	r2, r0, #24
    4444:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    4448:	0200      	lsls	r0, r0, #8
    444a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    444e:	4770      	bx	lr
    4450:	40001000 	.word	0x40001000

00004454 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    4454:	4901      	ldr	r1, [pc, #4]	; (445c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    4456:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    445a:	4770      	bx	lr
    445c:	40001000 	.word	0x40001000

00004460 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    4460:	b510      	push	{r4, lr}
    4462:	2200      	movs	r2, #0
    4464:	2901      	cmp	r1, #1
    4466:	d006      	beq.n	4476 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    4468:	2902      	cmp	r1, #2
    446a:	d002      	beq.n	4472 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    446c:	f240 21d2 	movw	r1, #722	; 0x2d2
    4470:	e014      	b.n	449c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    4472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4476:	490b      	ldr	r1, [pc, #44]	; (44a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    4478:	430a      	orrs	r2, r1
    447a:	490b      	ldr	r1, [pc, #44]	; (44a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    447c:	600a      	str	r2, [r1, #0]
    447e:	490b      	ldr	r1, [pc, #44]	; (44ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    4480:	4308      	orrs	r0, r1
    4482:	4909      	ldr	r1, [pc, #36]	; (44a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    4484:	1d09      	adds	r1, r1, #4
    4486:	6008      	str	r0, [r1, #0]
    4488:	4809      	ldr	r0, [pc, #36]	; (44b0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    448a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    448e:	b2c0      	uxtb	r0, r0
    4490:	2803      	cmp	r0, #3
    4492:	d001      	beq.n	4498 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    4494:	280b      	cmp	r0, #11
    4496:	d104      	bne.n	44a2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    4498:	f240 21ea 	movw	r1, #746	; 0x2ea
    449c:	203e      	movs	r0, #62	; 0x3e
    449e:	f7fc fb6f 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a2:	bd10      	pop	{r4, pc}
    44a4:	00100108 	.word	0x00100108
    44a8:	40001514 	.word	0x40001514
    44ac:	02030000 	.word	0x02030000
    44b0:	40001000 	.word	0x40001000

000044b4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    44b4:	4901      	ldr	r1, [pc, #4]	; (44bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    44b6:	7588      	strb	r0, [r1, #22]
    44b8:	4770      	bx	lr
    44ba:	0000      	.short	0x0000
    44bc:	20000ddc 	.word	0x20000ddc

000044c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    44c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    44c4:	4851      	ldr	r0, [pc, #324]	; (460c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    44c6:	f04f 0a01 	mov.w	sl, #1
    44ca:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    44ce:	484f      	ldr	r0, [pc, #316]	; (460c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    44d0:	300c      	adds	r0, #12
    44d2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    44d6:	f006 f88c 	bl	a5f2 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    44da:	4c4d      	ldr	r4, [pc, #308]	; (4610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    44dc:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    44e0:	f000 f8e0 	bl	46a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    44e4:	494b      	ldr	r1, [pc, #300]	; (4614 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    44e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    44e8:	6008      	str	r0, [r1, #0]
    44ea:	f8df 812c 	ldr.w	r8, [pc, #300]	; 4618 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    44ee:	2000      	movs	r0, #0
    44f0:	6260      	str	r0, [r4, #36]	; 0x24
    44f2:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    44f6:	f240 131d 	movw	r3, #285	; 0x11d
    44fa:	439a      	bics	r2, r3
    44fc:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    4500:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    4504:	f000 f94e 	bl	47a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    4508:	4605      	mov	r5, r0
    450a:	4840      	ldr	r0, [pc, #256]	; (460c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    450c:	3008      	adds	r0, #8
    450e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    4512:	4e3e      	ldr	r6, [pc, #248]	; (460c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    4514:	61e0      	str	r0, [r4, #28]
    4516:	1d36      	adds	r6, r6, #4
    4518:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    451c:	61a0      	str	r0, [r4, #24]
    451e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    4522:	7d21      	ldrb	r1, [r4, #20]
    4524:	f884 1020 	strb.w	r1, [r4, #32]
    4528:	7a61      	ldrb	r1, [r4, #9]
    452a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    452e:	46a1      	mov	r9, r4
    4530:	2400      	movs	r4, #0
    4532:	4639      	mov	r1, r7
    4534:	4628      	mov	r0, r5
    4536:	f000 f983 	bl	4840 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    453a:	b910      	cbnz	r0, 4542 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    453c:	f8c8 a010 	str.w	sl, [r8, #16]
    4540:	2401      	movs	r4, #1
    4542:	4f33      	ldr	r7, [pc, #204]	; (4610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    4544:	07e8      	lsls	r0, r5, #31
    4546:	f1a7 0710 	sub.w	r7, r7, #16
    454a:	d120      	bne.n	458e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    454c:	07a8      	lsls	r0, r5, #30
    454e:	d527      	bpl.n	45a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    4550:	f006 f96e 	bl	a830 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4554:	b9f0      	cbnz	r0, 4594 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    4556:	f006 f95b 	bl	a810 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    455a:	b9d8      	cbnz	r0, 4594 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    455c:	482f      	ldr	r0, [pc, #188]	; (461c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    455e:	6800      	ldr	r0, [r0, #0]
    4560:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    4564:	f3c0 6300 	ubfx	r3, r0, #24, #1
    4568:	f000 020f 	and.w	r2, r0, #15
    456c:	f3c0 1103 	ubfx	r1, r0, #4, #4
    4570:	f3c0 2803 	ubfx	r8, r0, #8, #4
    4574:	b173      	cbz	r3, 4594 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    4576:	b11a      	cbz	r2, 4580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    4578:	b111      	cbz	r1, 4580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    457a:	f1b8 0f00 	cmp.w	r8, #0
    457e:	d109      	bne.n	4594 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    4580:	f3c0 4004 	ubfx	r0, r0, #16, #5
    4584:	2801      	cmp	r0, #1
    4586:	d105      	bne.n	4594 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    4588:	f1bc 0f03 	cmp.w	ip, #3
    458c:	d202      	bcs.n	4594 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    458e:	6838      	ldr	r0, [r7, #0]
    4590:	4780      	blx	r0
    4592:	e00e      	b.n	45b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    4594:	f345 0080 	sbfx	r0, r5, #2, #1
    4598:	4621      	mov	r1, r4
    459a:	1c40      	adds	r0, r0, #1
    459c:	687a      	ldr	r2, [r7, #4]
    459e:	e007      	b.n	45b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    45a0:	f015 0f28 	tst.w	r5, #40	; 0x28
    45a4:	d005      	beq.n	45b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    45a6:	f345 1140 	sbfx	r1, r5, #5, #1
    45aa:	68ba      	ldr	r2, [r7, #8]
    45ac:	4620      	mov	r0, r4
    45ae:	1c49      	adds	r1, r1, #1
    45b0:	4790      	blx	r2
    45b2:	06e8      	lsls	r0, r5, #27
    45b4:	d501      	bpl.n	45ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    45b6:	68f8      	ldr	r0, [r7, #12]
    45b8:	4780      	blx	r0
    45ba:	f899 1009 	ldrb.w	r1, [r9, #9]
    45be:	4648      	mov	r0, r9
    45c0:	2902      	cmp	r1, #2
    45c2:	d120      	bne.n	4606 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    45c4:	7b01      	ldrb	r1, [r0, #12]
    45c6:	2900      	cmp	r1, #0
    45c8:	d01d      	beq.n	4606 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    45ca:	2902      	cmp	r1, #2
    45cc:	d004      	beq.n	45d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    45ce:	2901      	cmp	r1, #1
    45d0:	d009      	beq.n	45e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    45d2:	f640 4156 	movw	r1, #3158	; 0xc56
    45d6:	e00d      	b.n	45f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    45d8:	69c1      	ldr	r1, [r0, #28]
    45da:	f8d9 0010 	ldr.w	r0, [r9, #16]
    45de:	4408      	add	r0, r1
    45e0:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    45e4:	e00b      	b.n	45fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    45e6:	6901      	ldr	r1, [r0, #16]
    45e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
    45ec:	4281      	cmp	r1, r0
    45ee:	d804      	bhi.n	45fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    45f0:	f640 4157 	movw	r1, #3159	; 0xc57
    45f4:	203e      	movs	r0, #62	; 0x3e
    45f6:	f7fc fac3 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45fa:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    45fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4602:	f000 b961 	b.w	48c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    4606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    460a:	0000      	.short	0x0000
    460c:	40008000 	.word	0x40008000
    4610:	20000ddc 	.word	0x20000ddc
    4614:	4001f508 	.word	0x4001f508
    4618:	40001000 	.word	0x40001000
    461c:	40001450 	.word	0x40001450
    4620:	480b      	ldr	r0, [pc, #44]	; (4650 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    4622:	7d81      	ldrb	r1, [r0, #22]
    4624:	480b      	ldr	r0, [pc, #44]	; (4654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    4626:	5c40      	ldrb	r0, [r0, r1]
    4628:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    462c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    4630:	d204      	bcs.n	463c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    4632:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    4636:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    463a:	e001      	b.n	4640 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    463c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    4640:	4a05      	ldr	r2, [pc, #20]	; (4658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    4642:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    4646:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    464a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    464e:	4770      	bx	lr
    4650:	20000ddc 	.word	0x20000ddc
    4654:	00004a7a 	.word	0x00004a7a
    4658:	40001000 	.word	0x40001000
    465c:	b508      	push	{r3, lr}
    465e:	490b      	ldr	r1, [pc, #44]	; (468c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    4660:	466b      	mov	r3, sp
    4662:	f991 2015 	ldrsb.w	r2, [r1, #21]
    4666:	7d89      	ldrb	r1, [r1, #22]
    4668:	f000 faaa 	bl	4bc0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    466c:	f99d 0000 	ldrsb.w	r0, [sp]
    4670:	f000 fa7a 	bl	4b68 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    4674:	f10d 0001 	add.w	r0, sp, #1
    4678:	f004 f8e8 	bl	884c <mpsl_fem_pa_gain_set>
    467c:	2800      	cmp	r0, #0
    467e:	d004      	beq.n	468a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    4680:	f240 51e6 	movw	r1, #1510	; 0x5e6
    4684:	203e      	movs	r0, #62	; 0x3e
    4686:	f7fc fa7b 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    468a:	bd08      	pop	{r3, pc}
    468c:	20000ddc 	.word	0x20000ddc
    4690:	4803      	ldr	r0, [pc, #12]	; (46a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    4692:	7a01      	ldrb	r1, [r0, #8]
    4694:	2901      	cmp	r1, #1
    4696:	d102      	bne.n	469e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    4698:	7a80      	ldrb	r0, [r0, #10]
    469a:	f7ff bfdf 	b.w	465c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    469e:	4770      	bx	lr
    46a0:	20000ddc 	.word	0x20000ddc
    46a4:	480d      	ldr	r0, [pc, #52]	; (46dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    46a6:	b510      	push	{r4, lr}
    46a8:	7a40      	ldrb	r0, [r0, #9]
    46aa:	2801      	cmp	r0, #1
    46ac:	d00c      	beq.n	46c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    46ae:	2802      	cmp	r0, #2
    46b0:	d113      	bne.n	46da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    46b2:	f004 f8ad 	bl	8810 <mpsl_fem_lna_configuration_clear>
    46b6:	2800      	cmp	r0, #0
    46b8:	d00f      	beq.n	46da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    46ba:	1c40      	adds	r0, r0, #1
    46bc:	d00d      	beq.n	46da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    46be:	f640 01ab 	movw	r1, #2219	; 0x8ab
    46c2:	203e      	movs	r0, #62	; 0x3e
    46c4:	f7fc fa5c 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c8:	f004 f8b4 	bl	8834 <mpsl_fem_pa_configuration_clear>
    46cc:	2800      	cmp	r0, #0
    46ce:	d004      	beq.n	46da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    46d0:	1c40      	adds	r0, r0, #1
    46d2:	d002      	beq.n	46da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    46d4:	f640 01a5 	movw	r1, #2213	; 0x8a5
    46d8:	e7f3      	b.n	46c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    46da:	bd10      	pop	{r4, pc}
    46dc:	20000ddc 	.word	0x20000ddc
    46e0:	4808      	ldr	r0, [pc, #32]	; (4704 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    46e2:	2100      	movs	r1, #0
    46e4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    46e8:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    46ec:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    46f0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    46f4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    46f8:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    46fc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    4700:	4770      	bx	lr
    4702:	0000      	.short	0x0000
    4704:	40001000 	.word	0x40001000
    4708:	4818      	ldr	r0, [pc, #96]	; (476c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    470a:	b510      	push	{r4, lr}
    470c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    4710:	07c1      	lsls	r1, r0, #31
    4712:	d029      	beq.n	4768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    4714:	0781      	lsls	r1, r0, #30
    4716:	d514      	bpl.n	4742 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    4718:	4815      	ldr	r0, [pc, #84]	; (4770 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    471a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    471e:	f041 0101 	orr.w	r1, r1, #1
    4722:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4726:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    472a:	b2c0      	uxtb	r0, r0
    472c:	280b      	cmp	r0, #11
    472e:	d005      	beq.n	473c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    4730:	280a      	cmp	r0, #10
    4732:	d003      	beq.n	473c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    4734:	2803      	cmp	r0, #3
    4736:	d001      	beq.n	473c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    4738:	2802      	cmp	r0, #2
    473a:	d115      	bne.n	4768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    473c:	f240 610f 	movw	r1, #1551	; 0x60f
    4740:	e00f      	b.n	4762 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    4742:	0740      	lsls	r0, r0, #29
    4744:	d510      	bpl.n	4768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    4746:	480a      	ldr	r0, [pc, #40]	; (4770 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    4748:	490a      	ldr	r1, [pc, #40]	; (4774 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    474a:	3008      	adds	r0, #8
    474c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    4750:	f44f 71a0 	mov.w	r1, #320	; 0x140
    4754:	4808      	ldr	r0, [pc, #32]	; (4778 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    4756:	f005 ff0b 	bl	a570 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    475a:	2800      	cmp	r0, #0
    475c:	d004      	beq.n	4768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    475e:	f240 6117 	movw	r1, #1559	; 0x617
    4762:	203e      	movs	r0, #62	; 0x3e
    4764:	f7fc fa0c 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4768:	bd10      	pop	{r4, pc}
    476a:	0000      	.short	0x0000
    476c:	20000ddc 	.word	0x20000ddc
    4770:	40001000 	.word	0x40001000
    4774:	4001f098 	.word	0x4001f098
    4778:	40008000 	.word	0x40008000
    477c:	4808      	ldr	r0, [pc, #32]	; (47a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    477e:	4601      	mov	r1, r0
    4780:	79c2      	ldrb	r2, [r0, #7]
    4782:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    4786:	b112      	cbz	r2, 478e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    4788:	2a01      	cmp	r2, #1
    478a:	d003      	beq.n	4794 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    478c:	e006      	b.n	479c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    478e:	f041 0102 	orr.w	r1, r1, #2
    4792:	e001      	b.n	4798 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    4794:	f041 0104 	orr.w	r1, r1, #4
    4798:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    479c:	f7ff bfb4 	b.w	4708 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    47a0:	20000ddc 	.word	0x20000ddc
    47a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47a8:	4d22      	ldr	r5, [pc, #136]	; (4834 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    47aa:	2400      	movs	r4, #0
    47ac:	7b28      	ldrb	r0, [r5, #12]
    47ae:	b138      	cbz	r0, 47c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    47b0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    47b4:	4820      	ldr	r0, [pc, #128]	; (4838 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    47b6:	f005 fedb 	bl	a570 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    47ba:	b108      	cbz	r0, 47c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    47bc:	2701      	movs	r7, #1
    47be:	e000      	b.n	47c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    47c0:	2700      	movs	r7, #0
    47c2:	7a68      	ldrb	r0, [r5, #9]
    47c4:	4e1d      	ldr	r6, [pc, #116]	; (483c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    47c6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    47ca:	2801      	cmp	r0, #1
    47cc:	d002      	beq.n	47d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    47ce:	2802      	cmp	r0, #2
    47d0:	d006      	beq.n	47e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    47d2:	e016      	b.n	4802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    47d4:	4630      	mov	r0, r6
    47d6:	f005 fec6 	bl	a566 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    47da:	b190      	cbz	r0, 4802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    47dc:	2408      	movs	r4, #8
    47de:	e010      	b.n	4802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    47e0:	4630      	mov	r0, r6
    47e2:	f005 fec0 	bl	a566 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    47e6:	b100      	cbz	r0, 47ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    47e8:	2402      	movs	r4, #2
    47ea:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    47ee:	43c0      	mvns	r0, r0
    47f0:	f340 0000 	sbfx	r0, r0, #0, #1
    47f4:	1c40      	adds	r0, r0, #1
    47f6:	d101      	bne.n	47fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    47f8:	f044 0404 	orr.w	r4, r4, #4
    47fc:	b10f      	cbz	r7, 4802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    47fe:	f044 0401 	orr.w	r4, r4, #1
    4802:	f014 0f0b 	tst.w	r4, #11
    4806:	d107      	bne.n	4818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    4808:	f44f 7188 	mov.w	r1, #272	; 0x110
    480c:	4630      	mov	r0, r6
    480e:	f005 feaa 	bl	a566 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    4812:	b108      	cbz	r0, 4818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    4814:	f044 0410 	orr.w	r4, r4, #16
    4818:	f7ff ff62 	bl	46e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    481c:	06e0      	lsls	r0, r4, #27
    481e:	d506      	bpl.n	482e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    4820:	0720      	lsls	r0, r4, #28
    4822:	d404      	bmi.n	482e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    4824:	7a68      	ldrb	r0, [r5, #9]
    4826:	2801      	cmp	r0, #1
    4828:	d101      	bne.n	482e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    482a:	f044 0420 	orr.w	r4, r4, #32
    482e:	4620      	mov	r0, r4
    4830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4834:	20000ddc 	.word	0x20000ddc
    4838:	40008000 	.word	0x40008000
    483c:	40001000 	.word	0x40001000
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	4c1a      	ldr	r4, [pc, #104]	; (48b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    4846:	460d      	mov	r5, r1
    4848:	7a21      	ldrb	r1, [r4, #8]
    484a:	b129      	cbz	r1, 4858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    484c:	f010 0f11 	tst.w	r0, #17
    4850:	d007      	beq.n	4862 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    4852:	f7ff fb1f 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4856:	e024      	b.n	48a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    4858:	f000 f890 	bl	497c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    485c:	2000      	movs	r0, #0
    485e:	7320      	strb	r0, [r4, #12]
    4860:	e01f      	b.n	48a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    4862:	2901      	cmp	r1, #1
    4864:	d001      	beq.n	486a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    4866:	2601      	movs	r6, #1
    4868:	e000      	b.n	486c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    486a:	2600      	movs	r6, #0
    486c:	79e0      	ldrb	r0, [r4, #7]
    486e:	2801      	cmp	r0, #1
    4870:	d00e      	beq.n	4890 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    4872:	2700      	movs	r7, #0
    4874:	f000 f882 	bl	497c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    4878:	2196      	movs	r1, #150	; 0x96
    487a:	4630      	mov	r0, r6
    487c:	f000 f894 	bl	49a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    4880:	4601      	mov	r1, r0
    4882:	b14f      	cbz	r7, 4898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    4884:	353b      	adds	r5, #59	; 0x3b
    4886:	428d      	cmp	r5, r1
    4888:	d904      	bls.n	4894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    488a:	2000      	movs	r0, #0
    488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4890:	2701      	movs	r7, #1
    4892:	e7ef      	b.n	4874 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    4894:	2001      	movs	r0, #1
    4896:	71e0      	strb	r0, [r4, #7]
    4898:	7aa2      	ldrb	r2, [r4, #10]
    489a:	4630      	mov	r0, r6
    489c:	f7ff fd34 	bl	4308 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    48a0:	b108      	cbz	r0, 48a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    48a2:	2001      	movs	r0, #1
    48a4:	e7f2      	b.n	488c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    48a6:	f640 21a5 	movw	r1, #2725	; 0xaa5
    48aa:	203e      	movs	r0, #62	; 0x3e
    48ac:	f7fc f968 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48b0:	20000ddc 	.word	0x20000ddc
    48b4:	4803      	ldr	r0, [pc, #12]	; (48c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    48b6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    48ba:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    48be:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    48c2:	4770      	bx	lr
    48c4:	40001000 	.word	0x40001000
    48c8:	4804      	ldr	r0, [pc, #16]	; (48dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    48ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
    48cc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    48d0:	6241      	str	r1, [r0, #36]	; 0x24
    48d2:	4903      	ldr	r1, [pc, #12]	; (48e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    48d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    48d8:	6008      	str	r0, [r1, #0]
    48da:	4770      	bx	lr
    48dc:	20000ddc 	.word	0x20000ddc
    48e0:	4001f504 	.word	0x4001f504
    48e4:	4a07      	ldr	r2, [pc, #28]	; (4904 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    48e6:	2000      	movs	r0, #0
    48e8:	3208      	adds	r2, #8
    48ea:	4906      	ldr	r1, [pc, #24]	; (4904 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    48ec:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    48f0:	1d0a      	adds	r2, r1, #4
    48f2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    48f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    48fa:	4902      	ldr	r1, [pc, #8]	; (4904 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    48fc:	310c      	adds	r1, #12
    48fe:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4902:	4770      	bx	lr
    4904:	40008000 	.word	0x40008000
    4908:	4903      	ldr	r1, [pc, #12]	; (4918 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    490a:	79c9      	ldrb	r1, [r1, #7]
    490c:	2900      	cmp	r1, #0
    490e:	d102      	bne.n	4916 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    4910:	4902      	ldr	r1, [pc, #8]	; (491c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    4912:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    4916:	4770      	bx	lr
    4918:	20000ddc 	.word	0x20000ddc
    491c:	4001f098 	.word	0x4001f098
    4920:	b510      	push	{r4, lr}
    4922:	4a14      	ldr	r2, [pc, #80]	; (4974 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    4924:	b120      	cbz	r0, 4930 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    4926:	2801      	cmp	r0, #1
    4928:	d011      	beq.n	494e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    492a:	f240 7153 	movw	r1, #1875	; 0x753
    492e:	e01c      	b.n	496a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    4930:	f101 0028 	add.w	r0, r1, #40	; 0x28
    4934:	e9c2 1002 	strd	r1, r0, [r2, #8]
    4938:	490f      	ldr	r1, [pc, #60]	; (4978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    493a:	480e      	ldr	r0, [pc, #56]	; (4974 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    493c:	f003 ff80 	bl	8840 <mpsl_fem_pa_configuration_set>
    4940:	2800      	cmp	r0, #0
    4942:	d015      	beq.n	4970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    4944:	1c40      	adds	r0, r0, #1
    4946:	d013      	beq.n	4970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    4948:	f240 7142 	movw	r1, #1858	; 0x742
    494c:	e00d      	b.n	496a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    494e:	f101 0029 	add.w	r0, r1, #41	; 0x29
    4952:	e9c2 1002 	strd	r1, r0, [r2, #8]
    4956:	4908      	ldr	r1, [pc, #32]	; (4978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    4958:	4806      	ldr	r0, [pc, #24]	; (4974 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    495a:	f003 ff5f 	bl	881c <mpsl_fem_lna_configuration_set>
    495e:	2800      	cmp	r0, #0
    4960:	d006      	beq.n	4970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    4962:	1c40      	adds	r0, r0, #1
    4964:	d004      	beq.n	4970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    4966:	f240 714f 	movw	r1, #1871	; 0x74f
    496a:	203e      	movs	r0, #62	; 0x3e
    496c:	f7fc f908 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4970:	bd10      	pop	{r4, pc}
    4972:	0000      	.short	0x0000
    4974:	200000f8 	.word	0x200000f8
    4978:	00004aa4 	.word	0x00004aa4
    497c:	4802      	ldr	r0, [pc, #8]	; (4988 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    497e:	2100      	movs	r1, #0
    4980:	71c1      	strb	r1, [r0, #7]
    4982:	7201      	strb	r1, [r0, #8]
    4984:	7241      	strb	r1, [r0, #9]
    4986:	4770      	bx	lr
    4988:	20000ddc 	.word	0x20000ddc
    498c:	4a05      	ldr	r2, [pc, #20]	; (49a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    498e:	79d2      	ldrb	r2, [r2, #7]
    4990:	2a01      	cmp	r2, #1
    4992:	d006      	beq.n	49a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    4994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4998:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    499c:	fbb1 f1f2 	udiv	r1, r1, r2
    49a0:	1a40      	subs	r0, r0, r1
    49a2:	4770      	bx	lr
    49a4:	20000ddc 	.word	0x20000ddc
    49a8:	b570      	push	{r4, r5, r6, lr}
    49aa:	4c13      	ldr	r4, [pc, #76]	; (49f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    49ac:	4603      	mov	r3, r0
    49ae:	460d      	mov	r5, r1
    49b0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    49b4:	2000      	movs	r0, #0
    49b6:	b15a      	cbz	r2, 49d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    49b8:	4621      	mov	r1, r4
    49ba:	f891 1020 	ldrb.w	r1, [r1, #32]
    49be:	b163      	cbz	r3, 49da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    49c0:	2b01      	cmp	r3, #1
    49c2:	d111      	bne.n	49e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    49c4:	2a01      	cmp	r2, #1
    49c6:	4628      	mov	r0, r5
    49c8:	d012      	beq.n	49f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    49ca:	f005 fdd6 	bl	a57a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    49ce:	e009      	b.n	49e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    49d0:	f640 0158 	movw	r1, #2136	; 0x858
    49d4:	203e      	movs	r0, #62	; 0x3e
    49d6:	f7fc f8d3 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49da:	2a01      	cmp	r2, #1
    49dc:	4628      	mov	r0, r5
    49de:	d004      	beq.n	49ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    49e0:	f005 fdd9 	bl	a596 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    49e4:	69e1      	ldr	r1, [r4, #28]
    49e6:	4408      	add	r0, r1
    49e8:	bd70      	pop	{r4, r5, r6, pc}
    49ea:	f000 f8d1 	bl	4b90 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    49ee:	e7f9      	b.n	49e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    49f0:	f000 f8c0 	bl	4b74 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    49f4:	e7f6      	b.n	49e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    49f6:	0000      	.short	0x0000
    49f8:	20000ddc 	.word	0x20000ddc
    49fc:	b510      	push	{r4, lr}
    49fe:	f7ff fc57 	bl	42b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    4a02:	f7ff fe0d 	bl	4620 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    4a06:	f7ff fe43 	bl	4690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    4a0a:	f7ff ff53 	bl	48b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    4a0e:	f005 ff0f 	bl	a830 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4a12:	2800      	cmp	r0, #0
    4a14:	d108      	bne.n	4a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    4a16:	f005 fefb 	bl	a810 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d104      	bne.n	4a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    4a1e:	4803      	ldr	r0, [pc, #12]	; (4a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    4a20:	6801      	ldr	r1, [r0, #0]
    4a22:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    4a26:	6001      	str	r1, [r0, #0]
    4a28:	bd10      	pop	{r4, pc}
    4a2a:	0000      	.short	0x0000
    4a2c:	40001568 	.word	0x40001568
    4a30:	b510      	push	{r4, lr}
    4a32:	4604      	mov	r4, r0
    4a34:	f7ff fc3c 	bl	42b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    4a38:	f7ff fdf2 	bl	4620 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    4a3c:	4620      	mov	r0, r4
    4a3e:	f7ff fe0d 	bl	465c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    4a42:	f005 fef5 	bl	a830 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4a46:	2800      	cmp	r0, #0
    4a48:	d00d      	beq.n	4a66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    4a4a:	4a09      	ldr	r2, [pc, #36]	; (4a70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    4a4c:	6811      	ldr	r1, [r2, #0]
    4a4e:	0650      	lsls	r0, r2, #25
    4a50:	2c02      	cmp	r4, #2
    4a52:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    4a56:	d007      	beq.n	4a68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    4a58:	f3c0 2006 	ubfx	r0, r0, #8, #7
    4a5c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    4a60:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    4a64:	6010      	str	r0, [r2, #0]
    4a66:	bd10      	pop	{r4, pc}
    4a68:	f3c0 6006 	ubfx	r0, r0, #24, #7
    4a6c:	e7f6      	b.n	4a5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    4a6e:	0000      	.short	0x0000
    4a70:	40001588 	.word	0x40001588
    4a74:	a62c0000 	.word	0xa62c0000
    4a78:	0604a1e0 	.word	0x0604a1e0
    4a7c:	0e0c0a08 	.word	0x0e0c0a08
    4a80:	16141210 	.word	0x16141210
    4a84:	201e1c18 	.word	0x201e1c18
    4a88:	28262422 	.word	0x28262422
    4a8c:	302e2c2a 	.word	0x302e2c2a
    4a90:	38363432 	.word	0x38363432
    4a94:	403e3c3a 	.word	0x403e3c3a
    4a98:	48464442 	.word	0x48464442
    4a9c:	024e4c4a 	.word	0x024e4c4a
    4aa0:	0000501a 	.word	0x0000501a
    4aa4:	00000001 	.word	0x00000001
    4aa8:	40001110 	.word	0x40001110
	...
    4ac0:	00001e14 	.word	0x00001e14
    4ac4:	00001130 	.word	0x00001130
    4ac8:	00000000 	.word	0x00000000
    4acc:	00000028 	.word	0x00000028
    4ad0:	00000018 	.word	0x00000018
    4ad4:	00000000 	.word	0x00000000
    4ad8:	00001e14 	.word	0x00001e14
    4adc:	00001130 	.word	0x00001130
    4ae0:	00000000 	.word	0x00000000
    4ae4:	00001770 	.word	0x00001770
    4ae8:	00000fa0 	.word	0x00000fa0

00004aec <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    4aec:	b570      	push	{r4, r5, r6, lr}
    4aee:	4605      	mov	r5, r0
    4af0:	4614      	mov	r4, r2
    4af2:	4608      	mov	r0, r1
    4af4:	f7ff fc02 	bl	42fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4af8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4afc:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    4b00:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    4b04:	4807      	ldr	r0, [pc, #28]	; (4b24 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    4b06:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    4b0a:	4408      	add	r0, r1
    4b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4b10:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    4b14:	fbb0 f5f1 	udiv	r5, r0, r1
    4b18:	4620      	mov	r0, r4
    4b1a:	f7ff fbc3 	bl	42a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b1e:	4428      	add	r0, r5
    4b20:	1d40      	adds	r0, r0, #5
    4b22:	bd70      	pop	{r4, r5, r6, pc}
    4b24:	00004bb4 	.word	0x00004bb4

00004b28 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    4b28:	b570      	push	{r4, r5, r6, lr}
    4b2a:	4d0e      	ldr	r5, [pc, #56]	; (4b64 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4b2c:	461c      	mov	r4, r3
    4b2e:	3d08      	subs	r5, #8
    4b30:	4b0c      	ldr	r3, [pc, #48]	; (4b64 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4b32:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    4b36:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    4b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4b3e:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    4b42:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4b46:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4b4a:	4418      	add	r0, r3
    4b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4b50:	fbb0 f5f1 	udiv	r5, r0, r1
    4b54:	4610      	mov	r0, r2
    4b56:	f7ff fba5 	bl	42a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b5a:	4428      	add	r0, r5
    4b5c:	4420      	add	r0, r4
    4b5e:	1d40      	adds	r0, r0, #5
    4b60:	bd70      	pop	{r4, r5, r6, pc}
    4b62:	0000      	.short	0x0000
    4b64:	00004bb4 	.word	0x00004bb4

00004b68 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    4b68:	4901      	ldr	r1, [pc, #4]	; (4b70 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    4b6a:	b2c0      	uxtb	r0, r0
    4b6c:	6008      	str	r0, [r1, #0]
    4b6e:	4770      	bx	lr
    4b70:	4000150c 	.word	0x4000150c

00004b74 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    4b74:	4a05      	ldr	r2, [pc, #20]	; (4b8c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    4b76:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    4b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b7e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    4b82:	fbb1 f1f2 	udiv	r1, r1, r2
    4b86:	4408      	add	r0, r1
    4b88:	1e80      	subs	r0, r0, #2
    4b8a:	4770      	bx	lr
    4b8c:	00004bac 	.word	0x00004bac

00004b90 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    4b90:	4a05      	ldr	r2, [pc, #20]	; (4ba8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    4b92:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    4b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b9a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    4b9e:	fbb1 f1f2 	udiv	r1, r1, r2
    4ba2:	4408      	add	r0, r1
    4ba4:	4770      	bx	lr
    4ba6:	0000      	.short	0x0000
    4ba8:	00004bac 	.word	0x00004bac
    4bac:	05dc0000 	.word	0x05dc0000
    4bb0:	000003e8 	.word	0x000003e8
    4bb4:	00000000 	.word	0x00000000
    4bb8:	00001e14 	.word	0x00001e14
    4bbc:	00001130 	.word	0x00001130

00004bc0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    4bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4bc4:	461e      	mov	r6, r3
    4bc6:	4617      	mov	r7, r2
    4bc8:	460c      	mov	r4, r1
    4bca:	4605      	mov	r5, r0
    4bcc:	f000 f856 	bl	4c7c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    4bd0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4c78 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    4bd4:	4680      	mov	r8, r0
    4bd6:	f899 0000 	ldrb.w	r0, [r9]
    4bda:	42a8      	cmp	r0, r5
    4bdc:	d110      	bne.n	4c00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4bde:	f899 1001 	ldrb.w	r1, [r9, #1]
    4be2:	4648      	mov	r0, r9
    4be4:	42a1      	cmp	r1, r4
    4be6:	d10b      	bne.n	4c00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4be8:	f990 1002 	ldrsb.w	r1, [r0, #2]
    4bec:	42b9      	cmp	r1, r7
    4bee:	d107      	bne.n	4c00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4bf0:	78c2      	ldrb	r2, [r0, #3]
    4bf2:	4542      	cmp	r2, r8
    4bf4:	d104      	bne.n	4c00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4bf6:	8881      	ldrh	r1, [r0, #4]
    4bf8:	8031      	strh	r1, [r6, #0]
    4bfa:	7980      	ldrb	r0, [r0, #6]
    4bfc:	70b0      	strb	r0, [r6, #2]
    4bfe:	e037      	b.n	4c70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    4c00:	463a      	mov	r2, r7
    4c02:	4621      	mov	r1, r4
    4c04:	2d01      	cmp	r5, #1
    4c06:	d009      	beq.n	4c1c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    4c08:	2d02      	cmp	r5, #2
    4c0a:	d009      	beq.n	4c20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    4c0c:	2d04      	cmp	r5, #4
    4c0e:	d009      	beq.n	4c24 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    4c10:	2d08      	cmp	r5, #8
    4c12:	d009      	beq.n	4c28 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    4c14:	f240 4161 	movw	r1, #1121	; 0x461
    4c18:	2006      	movs	r0, #6
    4c1a:	e00c      	b.n	4c36 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    4c1c:	2000      	movs	r0, #0
    4c1e:	e004      	b.n	4c2a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4c20:	2001      	movs	r0, #1
    4c22:	e002      	b.n	4c2a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4c24:	2003      	movs	r0, #3
    4c26:	e000      	b.n	4c2a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4c28:	2002      	movs	r0, #2
    4c2a:	466b      	mov	r3, sp
    4c2c:	f000 f89e 	bl	4d6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    4c30:	b118      	cbz	r0, 4c3a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    4c32:	213d      	movs	r1, #61	; 0x3d
    4c34:	2075      	movs	r0, #117	; 0x75
    4c36:	f7fb ffa3 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c3a:	4620      	mov	r0, r4
    4c3c:	f7ff f922 	bl	3e84 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    4c40:	4602      	mov	r2, r0
    4c42:	2300      	movs	r3, #0
    4c44:	4631      	mov	r1, r6
    4c46:	f99d 0000 	ldrsb.w	r0, [sp]
    4c4a:	f003 fe0b 	bl	8864 <mpsl_fem_tx_power_split>
    4c4e:	4601      	mov	r1, r0
    4c50:	f889 1007 	strb.w	r1, [r9, #7]
    4c54:	8831      	ldrh	r1, [r6, #0]
    4c56:	f8a9 1004 	strh.w	r1, [r9, #4]
    4c5a:	78b1      	ldrb	r1, [r6, #2]
    4c5c:	f889 1006 	strb.w	r1, [r9, #6]
    4c60:	f889 5000 	strb.w	r5, [r9]
    4c64:	f889 4001 	strb.w	r4, [r9, #1]
    4c68:	f889 7002 	strb.w	r7, [r9, #2]
    4c6c:	f889 8003 	strb.w	r8, [r9, #3]
    4c70:	f999 0007 	ldrsb.w	r0, [r9, #7]
    4c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c78:	20000190 	.word	0x20000190

00004c7c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    4c7c:	4801      	ldr	r0, [pc, #4]	; (4c84 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    4c7e:	7800      	ldrb	r0, [r0, #0]
    4c80:	4770      	bx	lr
    4c82:	0000      	.short	0x0000
    4c84:	20000110 	.word	0x20000110

00004c88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    4c88:	b570      	push	{r4, r5, r6, lr}
    4c8a:	4c17      	ldr	r4, [pc, #92]	; (4ce8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    4c8c:	7860      	ldrb	r0, [r4, #1]
    4c8e:	2800      	cmp	r0, #0
    4c90:	d123      	bne.n	4cda <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    4c92:	2001      	movs	r0, #1
    4c94:	7060      	strb	r0, [r4, #1]
    4c96:	f005 fda5 	bl	a7e4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    4c9a:	f06f 0527 	mvn.w	r5, #39	; 0x27
    4c9e:	b928      	cbnz	r0, 4cac <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    4ca0:	f005 fdd6 	bl	a850 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    4ca4:	b910      	cbnz	r0, 4cac <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    4ca6:	f005 fddd 	bl	a864 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4caa:	b120      	cbz	r0, 4cb6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    4cac:	480f      	ldr	r0, [pc, #60]	; (4cec <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    4cae:	6060      	str	r0, [r4, #4]
    4cb0:	70a5      	strb	r5, [r4, #2]
    4cb2:	2008      	movs	r0, #8
    4cb4:	e010      	b.n	4cd8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    4cb6:	f005 fd6a 	bl	a78e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4cba:	b940      	cbnz	r0, 4cce <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    4cbc:	f005 fd71 	bl	a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4cc0:	b928      	cbnz	r0, 4cce <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    4cc2:	f005 fd85 	bl	a7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4cc6:	b910      	cbnz	r0, 4cce <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    4cc8:	f005 fd96 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4ccc:	b130      	cbz	r0, 4cdc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    4cce:	4807      	ldr	r0, [pc, #28]	; (4cec <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    4cd0:	3031      	adds	r0, #49	; 0x31
    4cd2:	6060      	str	r0, [r4, #4]
    4cd4:	70a5      	strb	r5, [r4, #2]
    4cd6:	2004      	movs	r0, #4
    4cd8:	70e0      	strb	r0, [r4, #3]
    4cda:	bd70      	pop	{r4, r5, r6, pc}
    4cdc:	f240 113f 	movw	r1, #319	; 0x13f
    4ce0:	2074      	movs	r0, #116	; 0x74
    4ce2:	f003 fc01 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ce6:	0000      	.short	0x0000
    4ce8:	20000110 	.word	0x20000110
    4cec:	0000ab80 	.word	0x0000ab80

00004cf0 <mpsl_tx_power_radio_supported_power_adjust>:
    4cf0:	4a06      	ldr	r2, [pc, #24]	; (4d0c <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    4cf2:	b500      	push	{lr}
    4cf4:	f992 2003 	ldrsb.w	r2, [r2, #3]
    4cf8:	4290      	cmp	r0, r2
    4cfa:	db01      	blt.n	4d00 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    4cfc:	4610      	mov	r0, r2
    4cfe:	bd00      	pop	{pc}
    4d00:	f000 f808 	bl	4d14 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    4d04:	4902      	ldr	r1, [pc, #8]	; (4d10 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    4d06:	5608      	ldrsb	r0, [r1, r0]
    4d08:	bd00      	pop	{pc}
    4d0a:	0000      	.short	0x0000
    4d0c:	20000110 	.word	0x20000110
    4d10:	0000ab72 	.word	0x0000ab72

00004d14 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    4d14:	4602      	mov	r2, r0
    4d16:	4813      	ldr	r0, [pc, #76]	; (4d64 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    4d18:	b510      	push	{r4, lr}
    4d1a:	f990 3003 	ldrsb.w	r3, [r0, #3]
    4d1e:	429a      	cmp	r2, r3
    4d20:	db01      	blt.n	4d26 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    4d22:	200d      	movs	r0, #13
    4d24:	bd10      	pop	{r4, pc}
    4d26:	f990 3002 	ldrsb.w	r3, [r0, #2]
    4d2a:	429a      	cmp	r2, r3
    4d2c:	dc01      	bgt.n	4d32 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    4d2e:	2000      	movs	r0, #0
    4d30:	bd10      	pop	{r4, pc}
    4d32:	b101      	cbz	r1, 4d36 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    4d34:	2101      	movs	r1, #1
    4d36:	1ad4      	subs	r4, r2, r3
    4d38:	6843      	ldr	r3, [r0, #4]
    4d3a:	5d18      	ldrb	r0, [r3, r4]
    4d3c:	4c0a      	ldr	r4, [pc, #40]	; (4d68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    4d3e:	5624      	ldrsb	r4, [r4, r0]
    4d40:	4294      	cmp	r4, r2
    4d42:	d0f5      	beq.n	4d30 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4d44:	4c08      	ldr	r4, [pc, #32]	; (4d68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    4d46:	4408      	add	r0, r1
    4d48:	343f      	adds	r4, #63	; 0x3f
    4d4a:	b2c0      	uxtb	r0, r0
    4d4c:	b2d2      	uxtb	r2, r2
    4d4e:	42a3      	cmp	r3, r4
    4d50:	d1ee      	bne.n	4d30 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4d52:	2900      	cmp	r1, #0
    4d54:	d0ec      	beq.n	4d30 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4d56:	2a01      	cmp	r2, #1
    4d58:	d001      	beq.n	4d5e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    4d5a:	2a02      	cmp	r2, #2
    4d5c:	d1e8      	bne.n	4d30 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4d5e:	1c40      	adds	r0, r0, #1
    4d60:	b2c0      	uxtb	r0, r0
    4d62:	bd10      	pop	{r4, pc}
    4d64:	20000110 	.word	0x20000110
    4d68:	0000ab72 	.word	0x0000ab72

00004d6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    4d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d70:	461c      	mov	r4, r3
    4d72:	4690      	mov	r8, r2
    4d74:	460d      	mov	r5, r1
    4d76:	4606      	mov	r6, r0
    4d78:	f06f 0715 	mvn.w	r7, #21
    4d7c:	2804      	cmp	r0, #4
    4d7e:	d804      	bhi.n	4d8a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4d80:	b11c      	cbz	r4, 4d8a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4d82:	f005 fc13 	bl	a5ac <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    4d86:	42a8      	cmp	r0, r5
    4d88:	d802      	bhi.n	4d90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    4d8a:	4638      	mov	r0, r7
    4d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d90:	4805      	ldr	r0, [pc, #20]	; (4da8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    4d92:	4642      	mov	r2, r8
    4d94:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4d98:	b118      	cbz	r0, 4da2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    4d9a:	5740      	ldrsb	r0, [r0, r5]
    4d9c:	4282      	cmp	r2, r0
    4d9e:	dd00      	ble.n	4da2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    4da0:	4602      	mov	r2, r0
    4da2:	7022      	strb	r2, [r4, #0]
    4da4:	2000      	movs	r0, #0
    4da6:	e7f1      	b.n	4d8c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    4da8:	20000e10 	.word	0x20000e10

00004dac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    4dac:	4801      	ldr	r0, [pc, #4]	; (4db4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    4dae:	7800      	ldrb	r0, [r0, #0]
    4db0:	4770      	bx	lr
    4db2:	0000      	.short	0x0000
    4db4:	20000118 	.word	0x20000118

00004db8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    4db8:	4905      	ldr	r1, [pc, #20]	; (4dd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    4dba:	780a      	ldrb	r2, [r1, #0]
    4dbc:	4290      	cmp	r0, r2
    4dbe:	d301      	bcc.n	4dc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    4dc0:	2000      	movs	r0, #0
    4dc2:	4770      	bx	lr
    4dc4:	6849      	ldr	r1, [r1, #4]
    4dc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4dca:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    4dce:	4770      	bx	lr
    4dd0:	20000118 	.word	0x20000118

00004dd4 <MPSL_IRQ_RADIO_Handler>:
    4dd4:	490d      	ldr	r1, [pc, #52]	; (4e0c <MPSL_IRQ_RADIO_Handler+0x38>)
    4dd6:	b510      	push	{r4, lr}
    4dd8:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    4ddc:	2820      	cmp	r0, #32
    4dde:	d00f      	beq.n	4e00 <MPSL_IRQ_RADIO_Handler+0x2c>
    4de0:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    4de4:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    4de8:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    4dec:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    4df0:	6840      	ldr	r0, [r0, #4]
    4df2:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    4df6:	680a      	ldr	r2, [r1, #0]
    4df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dfc:	2104      	movs	r1, #4
    4dfe:	4710      	bx	r2
    4e00:	f640 017f 	movw	r1, #2175	; 0x87f
    4e04:	2070      	movs	r0, #112	; 0x70
    4e06:	f003 fb6f 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4e0a:	0000      	.short	0x0000
    4e0c:	20000b08 	.word	0x20000b08
    4e10:	b570      	push	{r4, r5, r6, lr}
    4e12:	4605      	mov	r5, r0
    4e14:	2a20      	cmp	r2, #32
    4e16:	d028      	beq.n	4e6a <MPSL_IRQ_RADIO_Handler+0x96>
    4e18:	4819      	ldr	r0, [pc, #100]	; (4e80 <MPSL_IRQ_RADIO_Handler+0xac>)
    4e1a:	4c1a      	ldr	r4, [pc, #104]	; (4e84 <MPSL_IRQ_RADIO_Handler+0xb0>)
    4e1c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    4e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4e24:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    4e28:	4423      	add	r3, r4
    4e2a:	2920      	cmp	r1, #32
    4e2c:	d022      	beq.n	4e74 <MPSL_IRQ_RADIO_Handler+0xa0>
    4e2e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    4e32:	7840      	ldrb	r0, [r0, #1]
    4e34:	784c      	ldrb	r4, [r1, #1]
    4e36:	7048      	strb	r0, [r1, #1]
    4e38:	4620      	mov	r0, r4
    4e3a:	4601      	mov	r1, r0
    4e3c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    4e40:	4291      	cmp	r1, r2
    4e42:	7005      	strb	r5, [r0, #0]
    4e44:	7840      	ldrb	r0, [r0, #1]
    4e46:	d1f8      	bne.n	4e3a <MPSL_IRQ_RADIO_Handler+0x66>
    4e48:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    4e4c:	2a20      	cmp	r2, #32
    4e4e:	bf1a      	itte	ne
    4e50:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    4e54:	7054      	strbne	r4, [r2, #1]
    4e56:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    4e5a:	2220      	movs	r2, #32
    4e5c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    4e60:	f88c 2001 	strb.w	r2, [ip, #1]
    4e64:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    4e68:	bd70      	pop	{r4, r5, r6, pc}
    4e6a:	f240 2186 	movw	r1, #646	; 0x286
    4e6e:	2070      	movs	r0, #112	; 0x70
    4e70:	f003 fb3a 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4e74:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    4e78:	7840      	ldrb	r0, [r0, #1]
    4e7a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    4e7e:	e7db      	b.n	4e38 <MPSL_IRQ_RADIO_Handler+0x64>
    4e80:	20000a88 	.word	0x20000a88
    4e84:	20000b08 	.word	0x20000b08
    4e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e8c:	b08f      	sub	sp, #60	; 0x3c
    4e8e:	4615      	mov	r5, r2
    4e90:	461e      	mov	r6, r3
    4e92:	460c      	mov	r4, r1
    4e94:	f002 fa7c 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    4e98:	1828      	adds	r0, r5, r0
    4e9a:	f146 0100 	adc.w	r1, r6, #0
    4e9e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4ea2:	e9d4 2300 	ldrd	r2, r3, [r4]
    4ea6:	1a80      	subs	r0, r0, r2
    4ea8:	eb71 0003 	sbcs.w	r0, r1, r3
    4eac:	f0c0 80e5 	bcc.w	507a <MPSL_IRQ_RADIO_Handler+0x2a6>
    4eb0:	a808      	add	r0, sp, #32
    4eb2:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    4eb6:	900a      	str	r0, [sp, #40]	; 0x28
    4eb8:	48bc      	ldr	r0, [pc, #752]	; (51ac <MPSL_IRQ_RADIO_Handler+0x3d8>)
    4eba:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    4ebe:	4408      	add	r0, r1
    4ec0:	9009      	str	r0, [sp, #36]	; 0x24
    4ec2:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    4ec6:	2020      	movs	r0, #32
    4ec8:	f10d 091c 	add.w	r9, sp, #28
    4ecc:	f88d 001c 	strb.w	r0, [sp, #28]
    4ed0:	2d20      	cmp	r5, #32
    4ed2:	d036      	beq.n	4f42 <MPSL_IRQ_RADIO_Handler+0x16e>
    4ed4:	48b6      	ldr	r0, [pc, #728]	; (51b0 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    4ed6:	2600      	movs	r6, #0
    4ed8:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    4edc:	48b5      	ldr	r0, [pc, #724]	; (51b4 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    4ede:	e9d4 7300 	ldrd	r7, r3, [r4]
    4ee2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    4ee6:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4eea:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    4eee:	eb18 0101 	adds.w	r1, r8, r1
    4ef2:	4172      	adcs	r2, r6
    4ef4:	1a79      	subs	r1, r7, r1
    4ef6:	eb73 0102 	sbcs.w	r1, r3, r2
    4efa:	d322      	bcc.n	4f42 <MPSL_IRQ_RADIO_Handler+0x16e>
    4efc:	89e1      	ldrh	r1, [r4, #14]
    4efe:	b1c9      	cbz	r1, 4f34 <MPSL_IRQ_RADIO_Handler+0x160>
    4f00:	89c0      	ldrh	r0, [r0, #14]
    4f02:	b9b8      	cbnz	r0, 4f34 <MPSL_IRQ_RADIO_Handler+0x160>
    4f04:	f003 f950 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4f08:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4f0c:	bf08      	it	eq
    4f0e:	200d      	moveq	r0, #13
    4f10:	d00b      	beq.n	4f2a <MPSL_IRQ_RADIO_Handler+0x156>
    4f12:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4f16:	3856      	subs	r0, #86	; 0x56
    4f18:	bf08      	it	eq
    4f1a:	201c      	moveq	r0, #28
    4f1c:	d005      	beq.n	4f2a <MPSL_IRQ_RADIO_Handler+0x156>
    4f1e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4f22:	389f      	subs	r0, #159	; 0x9f
    4f24:	bf14      	ite	ne
    4f26:	4630      	movne	r0, r6
    4f28:	2032      	moveq	r0, #50	; 0x32
    4f2a:	1c40      	adds	r0, r0, #1
    4f2c:	ebb7 0108 	subs.w	r1, r7, r8
    4f30:	4281      	cmp	r1, r0
    4f32:	db06      	blt.n	4f42 <MPSL_IRQ_RADIO_Handler+0x16e>
    4f34:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    4f38:	f889 5000 	strb.w	r5, [r9]
    4f3c:	7845      	ldrb	r5, [r0, #1]
    4f3e:	2d20      	cmp	r5, #32
    4f40:	d1cc      	bne.n	4edc <MPSL_IRQ_RADIO_Handler+0x108>
    4f42:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f44:	f899 1000 	ldrb.w	r1, [r9]
    4f48:	2d20      	cmp	r5, #32
    4f4a:	7001      	strb	r1, [r0, #0]
    4f4c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4f50:	f000 8128 	beq.w	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4f54:	4896      	ldr	r0, [pc, #600]	; (51b0 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    4f56:	4f97      	ldr	r7, [pc, #604]	; (51b4 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    4f58:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4f5c:	2600      	movs	r6, #0
    4f5e:	9004      	str	r0, [sp, #16]
    4f60:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    4f64:	f10a 0008 	add.w	r0, sl, #8
    4f68:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4f6c:	f8d4 b000 	ldr.w	fp, [r4]
    4f70:	e9d0 8300 	ldrd	r8, r3, [r0]
    4f74:	eb1b 0202 	adds.w	r2, fp, r2
    4f78:	4171      	adcs	r1, r6
    4f7a:	ebb8 0202 	subs.w	r2, r8, r2
    4f7e:	eb73 0101 	sbcs.w	r1, r3, r1
    4f82:	d320      	bcc.n	4fc6 <MPSL_IRQ_RADIO_Handler+0x1f2>
    4f84:	89c0      	ldrh	r0, [r0, #14]
    4f86:	2800      	cmp	r0, #0
    4f88:	f000 810c 	beq.w	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4f8c:	89e0      	ldrh	r0, [r4, #14]
    4f8e:	2800      	cmp	r0, #0
    4f90:	f040 8108 	bne.w	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4f94:	f003 f908 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4f98:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4f9c:	bf08      	it	eq
    4f9e:	200d      	moveq	r0, #13
    4fa0:	d00b      	beq.n	4fba <MPSL_IRQ_RADIO_Handler+0x1e6>
    4fa2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4fa6:	3856      	subs	r0, #86	; 0x56
    4fa8:	bf08      	it	eq
    4faa:	201c      	moveq	r0, #28
    4fac:	d005      	beq.n	4fba <MPSL_IRQ_RADIO_Handler+0x1e6>
    4fae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4fb2:	389f      	subs	r0, #159	; 0x9f
    4fb4:	bf14      	ite	ne
    4fb6:	4630      	movne	r0, r6
    4fb8:	2032      	moveq	r0, #50	; 0x32
    4fba:	1c41      	adds	r1, r0, #1
    4fbc:	ebb8 000b 	subs.w	r0, r8, fp
    4fc0:	4288      	cmp	r0, r1
    4fc2:	f280 80ef 	bge.w	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4fc6:	f889 5000 	strb.w	r5, [r9]
    4fca:	f89a 0018 	ldrb.w	r0, [sl, #24]
    4fce:	7c21      	ldrb	r1, [r4, #16]
    4fd0:	4281      	cmp	r1, r0
    4fd2:	d207      	bcs.n	4fe4 <MPSL_IRQ_RADIO_Handler+0x210>
    4fd4:	9804      	ldr	r0, [sp, #16]
    4fd6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4fda:	7845      	ldrb	r5, [r0, #1]
    4fdc:	2d20      	cmp	r5, #32
    4fde:	d1bf      	bne.n	4f60 <MPSL_IRQ_RADIO_Handler+0x18c>
    4fe0:	f000 b8e0 	b.w	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4fe4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    4fe8:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    4fec:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    4ff0:	f8d0 9008 	ldr.w	r9, [r0, #8]
    4ff4:	8ac0      	ldrh	r0, [r0, #22]
    4ff6:	eb19 0502 	adds.w	r5, r9, r2
    4ffa:	eb41 0806 	adc.w	r8, r1, r6
    4ffe:	bbb0      	cbnz	r0, 506e <MPSL_IRQ_RADIO_Handler+0x29a>
    5000:	89e0      	ldrh	r0, [r4, #14]
    5002:	b3a0      	cbz	r0, 506e <MPSL_IRQ_RADIO_Handler+0x29a>
    5004:	f003 f8d0 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5008:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    500c:	bf08      	it	eq
    500e:	200d      	moveq	r0, #13
    5010:	d00b      	beq.n	502a <MPSL_IRQ_RADIO_Handler+0x256>
    5012:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5016:	3856      	subs	r0, #86	; 0x56
    5018:	bf08      	it	eq
    501a:	201c      	moveq	r0, #28
    501c:	d005      	beq.n	502a <MPSL_IRQ_RADIO_Handler+0x256>
    501e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5022:	389f      	subs	r0, #159	; 0x9f
    5024:	bf14      	ite	ne
    5026:	4630      	movne	r0, r6
    5028:	2032      	moveq	r0, #50	; 0x32
    502a:	1c41      	adds	r1, r0, #1
    502c:	ebb5 0009 	subs.w	r0, r5, r9
    5030:	4288      	cmp	r0, r1
    5032:	da1c      	bge.n	506e <MPSL_IRQ_RADIO_Handler+0x29a>
    5034:	f003 f8b8 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5038:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    503c:	bf08      	it	eq
    503e:	200d      	moveq	r0, #13
    5040:	d00b      	beq.n	505a <MPSL_IRQ_RADIO_Handler+0x286>
    5042:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5046:	3856      	subs	r0, #86	; 0x56
    5048:	bf08      	it	eq
    504a:	201c      	moveq	r0, #28
    504c:	d005      	beq.n	505a <MPSL_IRQ_RADIO_Handler+0x286>
    504e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5052:	389f      	subs	r0, #159	; 0x9f
    5054:	bf14      	ite	ne
    5056:	4630      	movne	r0, r6
    5058:	2032      	moveq	r0, #50	; 0x32
    505a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    505e:	1c40      	adds	r0, r0, #1
    5060:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    5064:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5068:	1815      	adds	r5, r2, r0
    506a:	eb43 0806 	adc.w	r8, r3, r6
    506e:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    5072:	1b49      	subs	r1, r1, r5
    5074:	eb70 0008 	sbcs.w	r0, r0, r8
    5078:	d203      	bcs.n	5082 <MPSL_IRQ_RADIO_Handler+0x2ae>
    507a:	b00f      	add	sp, #60	; 0x3c
    507c:	2000      	movs	r0, #0
    507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5082:	e9c4 5800 	strd	r5, r8, [r4]
    5086:	9818      	ldr	r0, [sp, #96]	; 0x60
    5088:	900b      	str	r0, [sp, #44]	; 0x2c
    508a:	a808      	add	r0, sp, #32
    508c:	900a      	str	r0, [sp, #40]	; 0x28
    508e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5090:	f10d 0a1c 	add.w	sl, sp, #28
    5094:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    5098:	2020      	movs	r0, #32
    509a:	f88d 001c 	strb.w	r0, [sp, #28]
    509e:	2d20      	cmp	r5, #32
    50a0:	d037      	beq.n	5112 <MPSL_IRQ_RADIO_Handler+0x33e>
    50a2:	4843      	ldr	r0, [pc, #268]	; (51b0 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    50a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    50a6:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    50aa:	bf00      	nop
    50ac:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    50b0:	e9d4 8300 	ldrd	r8, r3, [r4]
    50b4:	f850 9f08 	ldr.w	r9, [r0, #8]!
    50b8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    50bc:	eb19 0202 	adds.w	r2, r9, r2
    50c0:	4171      	adcs	r1, r6
    50c2:	ebb8 0202 	subs.w	r2, r8, r2
    50c6:	eb73 0101 	sbcs.w	r1, r3, r1
    50ca:	d322      	bcc.n	5112 <MPSL_IRQ_RADIO_Handler+0x33e>
    50cc:	89e1      	ldrh	r1, [r4, #14]
    50ce:	b1c9      	cbz	r1, 5104 <MPSL_IRQ_RADIO_Handler+0x330>
    50d0:	89c0      	ldrh	r0, [r0, #14]
    50d2:	b9b8      	cbnz	r0, 5104 <MPSL_IRQ_RADIO_Handler+0x330>
    50d4:	f003 f868 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    50d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    50dc:	bf08      	it	eq
    50de:	200d      	moveq	r0, #13
    50e0:	d00b      	beq.n	50fa <MPSL_IRQ_RADIO_Handler+0x326>
    50e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    50e6:	3856      	subs	r0, #86	; 0x56
    50e8:	bf08      	it	eq
    50ea:	201c      	moveq	r0, #28
    50ec:	d005      	beq.n	50fa <MPSL_IRQ_RADIO_Handler+0x326>
    50ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    50f2:	389f      	subs	r0, #159	; 0x9f
    50f4:	bf14      	ite	ne
    50f6:	4630      	movne	r0, r6
    50f8:	2032      	moveq	r0, #50	; 0x32
    50fa:	1c41      	adds	r1, r0, #1
    50fc:	ebb8 0009 	subs.w	r0, r8, r9
    5100:	4288      	cmp	r0, r1
    5102:	db06      	blt.n	5112 <MPSL_IRQ_RADIO_Handler+0x33e>
    5104:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    5108:	f88a 5000 	strb.w	r5, [sl]
    510c:	7845      	ldrb	r5, [r0, #1]
    510e:	2d20      	cmp	r5, #32
    5110:	d1cc      	bne.n	50ac <MPSL_IRQ_RADIO_Handler+0x2d8>
    5112:	980a      	ldr	r0, [sp, #40]	; 0x28
    5114:	f89a 1000 	ldrb.w	r1, [sl]
    5118:	2d20      	cmp	r5, #32
    511a:	7001      	strb	r1, [r0, #0]
    511c:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    5120:	d040      	beq.n	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    5122:	4923      	ldr	r1, [pc, #140]	; (51b0 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    5124:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    5128:	f8cd 000c 	str.w	r0, [sp, #12]
    512c:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    5130:	f109 0008 	add.w	r0, r9, #8
    5134:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    5138:	f8d4 b000 	ldr.w	fp, [r4]
    513c:	e9d0 a300 	ldrd	sl, r3, [r0]
    5140:	eb1b 0202 	adds.w	r2, fp, r2
    5144:	4171      	adcs	r1, r6
    5146:	ebba 0202 	subs.w	r2, sl, r2
    514a:	eb73 0101 	sbcs.w	r1, r3, r1
    514e:	d31b      	bcc.n	5188 <MPSL_IRQ_RADIO_Handler+0x3b4>
    5150:	89c0      	ldrh	r0, [r0, #14]
    5152:	b338      	cbz	r0, 51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    5154:	89e0      	ldrh	r0, [r4, #14]
    5156:	bb28      	cbnz	r0, 51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    5158:	f003 f826 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    515c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    5160:	bf08      	it	eq
    5162:	200d      	moveq	r0, #13
    5164:	d00b      	beq.n	517e <MPSL_IRQ_RADIO_Handler+0x3aa>
    5166:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    516a:	3856      	subs	r0, #86	; 0x56
    516c:	bf08      	it	eq
    516e:	201c      	moveq	r0, #28
    5170:	d005      	beq.n	517e <MPSL_IRQ_RADIO_Handler+0x3aa>
    5172:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5176:	389f      	subs	r0, #159	; 0x9f
    5178:	bf14      	ite	ne
    517a:	4630      	movne	r0, r6
    517c:	2032      	moveq	r0, #50	; 0x32
    517e:	1c41      	adds	r1, r0, #1
    5180:	ebba 000b 	subs.w	r0, sl, fp
    5184:	4288      	cmp	r0, r1
    5186:	da0d      	bge.n	51a4 <MPSL_IRQ_RADIO_Handler+0x3d0>
    5188:	f888 5000 	strb.w	r5, [r8]
    518c:	f899 1018 	ldrb.w	r1, [r9, #24]
    5190:	7c20      	ldrb	r0, [r4, #16]
    5192:	4288      	cmp	r0, r1
    5194:	f4bf af26 	bcs.w	4fe4 <MPSL_IRQ_RADIO_Handler+0x210>
    5198:	9803      	ldr	r0, [sp, #12]
    519a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    519e:	7845      	ldrb	r5, [r0, #1]
    51a0:	2d20      	cmp	r5, #32
    51a2:	d1c3      	bne.n	512c <MPSL_IRQ_RADIO_Handler+0x358>
    51a4:	b00f      	add	sp, #60	; 0x3c
    51a6:	2001      	movs	r0, #1
    51a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ac:	20000b08 	.word	0x20000b08
    51b0:	20000a88 	.word	0x20000a88
    51b4:	20000688 	.word	0x20000688
    51b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51bc:	b083      	sub	sp, #12
    51be:	4691      	mov	r9, r2
    51c0:	4604      	mov	r4, r0
    51c2:	460d      	mov	r5, r1
    51c4:	4698      	mov	r8, r3
    51c6:	aa01      	add	r2, sp, #4
    51c8:	4669      	mov	r1, sp
    51ca:	4618      	mov	r0, r3
    51cc:	f002 f8fc 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    51d0:	f002 fe12 	bl	7df8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    51d4:	f002 f8dc 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    51d8:	4607      	mov	r7, r0
    51da:	481e      	ldr	r0, [pc, #120]	; (5254 <MPSL_IRQ_RADIO_Handler+0x480>)
    51dc:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    51e0:	2600      	movs	r6, #0
    51e2:	2920      	cmp	r1, #32
    51e4:	d009      	beq.n	51fa <MPSL_IRQ_RADIO_Handler+0x426>
    51e6:	6882      	ldr	r2, [r0, #8]
    51e8:	68c1      	ldr	r1, [r0, #12]
    51ea:	6900      	ldr	r0, [r0, #16]
    51ec:	1d83      	adds	r3, r0, #6
    51ee:	f146 0000 	adc.w	r0, r6, #0
    51f2:	18d4      	adds	r4, r2, r3
    51f4:	eb41 0500 	adc.w	r5, r1, r0
    51f8:	e026      	b.n	5248 <MPSL_IRQ_RADIO_Handler+0x474>
    51fa:	340a      	adds	r4, #10
    51fc:	f145 0500 	adc.w	r5, r5, #0
    5200:	f1b8 0f00 	cmp.w	r8, #0
    5204:	d017      	beq.n	5236 <MPSL_IRQ_RADIO_Handler+0x462>
    5206:	f003 f8f7 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    520a:	b9a0      	cbnz	r0, 5236 <MPSL_IRQ_RADIO_Handler+0x462>
    520c:	f002 ffcc 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5210:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    5214:	bf08      	it	eq
    5216:	200d      	moveq	r0, #13
    5218:	d00b      	beq.n	5232 <MPSL_IRQ_RADIO_Handler+0x45e>
    521a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    521e:	3856      	subs	r0, #86	; 0x56
    5220:	bf08      	it	eq
    5222:	201c      	moveq	r0, #28
    5224:	d005      	beq.n	5232 <MPSL_IRQ_RADIO_Handler+0x45e>
    5226:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    522a:	389f      	subs	r0, #159	; 0x9f
    522c:	bf14      	ite	ne
    522e:	4630      	movne	r0, r6
    5230:	2032      	moveq	r0, #50	; 0x32
    5232:	1904      	adds	r4, r0, r4
    5234:	4175      	adcs	r5, r6
    5236:	f1b9 0f00 	cmp.w	r9, #0
    523a:	d105      	bne.n	5248 <MPSL_IRQ_RADIO_Handler+0x474>
    523c:	9800      	ldr	r0, [sp, #0]
    523e:	4287      	cmp	r7, r0
    5240:	d902      	bls.n	5248 <MPSL_IRQ_RADIO_Handler+0x474>
    5242:	1a38      	subs	r0, r7, r0
    5244:	1904      	adds	r4, r0, r4
    5246:	4175      	adcs	r5, r6
    5248:	b003      	add	sp, #12
    524a:	4620      	mov	r0, r4
    524c:	4629      	mov	r1, r5
    524e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5252:	0000      	.short	0x0000
    5254:	20000b08 	.word	0x20000b08
    5258:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    525c:	b081      	sub	sp, #4
    525e:	4605      	mov	r5, r0
    5260:	9802      	ldr	r0, [sp, #8]
    5262:	494a      	ldr	r1, [pc, #296]	; (538c <MPSL_IRQ_RADIO_Handler+0x5b8>)
    5264:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5268:	4408      	add	r0, r1
    526a:	2600      	movs	r6, #0
    526c:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5270:	2020      	movs	r0, #32
    5272:	4692      	mov	sl, r2
    5274:	7010      	strb	r0, [r2, #0]
    5276:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    527a:	2c20      	cmp	r4, #32
    527c:	d036      	beq.n	52ec <MPSL_IRQ_RADIO_Handler+0x518>
    527e:	9902      	ldr	r1, [sp, #8]
    5280:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    5284:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    5288:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    528c:	e9d5 7300 	ldrd	r7, r3, [r5]
    5290:	f850 8f08 	ldr.w	r8, [r0, #8]!
    5294:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    5298:	eb18 0202 	adds.w	r2, r8, r2
    529c:	4171      	adcs	r1, r6
    529e:	1aba      	subs	r2, r7, r2
    52a0:	eb73 0101 	sbcs.w	r1, r3, r1
    52a4:	d322      	bcc.n	52ec <MPSL_IRQ_RADIO_Handler+0x518>
    52a6:	89e9      	ldrh	r1, [r5, #14]
    52a8:	b1c9      	cbz	r1, 52de <MPSL_IRQ_RADIO_Handler+0x50a>
    52aa:	89c0      	ldrh	r0, [r0, #14]
    52ac:	b9b8      	cbnz	r0, 52de <MPSL_IRQ_RADIO_Handler+0x50a>
    52ae:	f002 ff7b 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    52b2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    52b6:	bf08      	it	eq
    52b8:	200d      	moveq	r0, #13
    52ba:	d00b      	beq.n	52d4 <MPSL_IRQ_RADIO_Handler+0x500>
    52bc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    52c0:	3856      	subs	r0, #86	; 0x56
    52c2:	bf08      	it	eq
    52c4:	201c      	moveq	r0, #28
    52c6:	d005      	beq.n	52d4 <MPSL_IRQ_RADIO_Handler+0x500>
    52c8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    52cc:	389f      	subs	r0, #159	; 0x9f
    52ce:	bf14      	ite	ne
    52d0:	4630      	movne	r0, r6
    52d2:	2032      	moveq	r0, #50	; 0x32
    52d4:	1c41      	adds	r1, r0, #1
    52d6:	ebb7 0008 	subs.w	r0, r7, r8
    52da:	4288      	cmp	r0, r1
    52dc:	db06      	blt.n	52ec <MPSL_IRQ_RADIO_Handler+0x518>
    52de:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    52e2:	f88a 4000 	strb.w	r4, [sl]
    52e6:	7844      	ldrb	r4, [r0, #1]
    52e8:	2c20      	cmp	r4, #32
    52ea:	d1cd      	bne.n	5288 <MPSL_IRQ_RADIO_Handler+0x4b4>
    52ec:	9804      	ldr	r0, [sp, #16]
    52ee:	f89a 1000 	ldrb.w	r1, [sl]
    52f2:	2c20      	cmp	r4, #32
    52f4:	7001      	strb	r1, [r0, #0]
    52f6:	9f04      	ldr	r7, [sp, #16]
    52f8:	9802      	ldr	r0, [sp, #8]
    52fa:	d042      	beq.n	5382 <MPSL_IRQ_RADIO_Handler+0x5ae>
    52fc:	4924      	ldr	r1, [pc, #144]	; (5390 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    52fe:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    5302:	9000      	str	r0, [sp, #0]
    5304:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    5308:	f8d5 b000 	ldr.w	fp, [r5]
    530c:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    5310:	f108 0008 	add.w	r0, r8, #8
    5314:	eb1b 0201 	adds.w	r2, fp, r1
    5318:	eb43 0106 	adc.w	r1, r3, r6
    531c:	e9d0 a300 	ldrd	sl, r3, [r0]
    5320:	ebba 0202 	subs.w	r2, sl, r2
    5324:	eb73 0101 	sbcs.w	r1, r3, r1
    5328:	d31b      	bcc.n	5362 <MPSL_IRQ_RADIO_Handler+0x58e>
    532a:	89c0      	ldrh	r0, [r0, #14]
    532c:	b348      	cbz	r0, 5382 <MPSL_IRQ_RADIO_Handler+0x5ae>
    532e:	89e8      	ldrh	r0, [r5, #14]
    5330:	bb38      	cbnz	r0, 5382 <MPSL_IRQ_RADIO_Handler+0x5ae>
    5332:	f002 ff39 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5336:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    533a:	bf08      	it	eq
    533c:	200d      	moveq	r0, #13
    533e:	d00b      	beq.n	5358 <MPSL_IRQ_RADIO_Handler+0x584>
    5340:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5344:	3856      	subs	r0, #86	; 0x56
    5346:	bf08      	it	eq
    5348:	201c      	moveq	r0, #28
    534a:	d005      	beq.n	5358 <MPSL_IRQ_RADIO_Handler+0x584>
    534c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5350:	389f      	subs	r0, #159	; 0x9f
    5352:	bf14      	ite	ne
    5354:	4630      	movne	r0, r6
    5356:	2032      	moveq	r0, #50	; 0x32
    5358:	1c41      	adds	r1, r0, #1
    535a:	ebba 000b 	subs.w	r0, sl, fp
    535e:	4288      	cmp	r0, r1
    5360:	da0f      	bge.n	5382 <MPSL_IRQ_RADIO_Handler+0x5ae>
    5362:	703c      	strb	r4, [r7, #0]
    5364:	f898 1018 	ldrb.w	r1, [r8, #24]
    5368:	7c28      	ldrb	r0, [r5, #16]
    536a:	4288      	cmp	r0, r1
    536c:	d303      	bcc.n	5376 <MPSL_IRQ_RADIO_Handler+0x5a2>
    536e:	b005      	add	sp, #20
    5370:	2000      	movs	r0, #0
    5372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5376:	9800      	ldr	r0, [sp, #0]
    5378:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    537c:	7844      	ldrb	r4, [r0, #1]
    537e:	2c20      	cmp	r4, #32
    5380:	d1c0      	bne.n	5304 <MPSL_IRQ_RADIO_Handler+0x530>
    5382:	b005      	add	sp, #20
    5384:	2001      	movs	r0, #1
    5386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    538a:	0000      	.short	0x0000
    538c:	20000b08 	.word	0x20000b08
    5390:	20000a88 	.word	0x20000a88
    5394:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5398:	b09c      	sub	sp, #112	; 0x70
    539a:	461f      	mov	r7, r3
    539c:	f002 fa64 	bl	7868 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    53a0:	4604      	mov	r4, r0
    53a2:	460d      	mov	r5, r1
    53a4:	f002 fd28 	bl	7df8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    53a8:	4606      	mov	r6, r0
    53aa:	981e      	ldr	r0, [sp, #120]	; 0x78
    53ac:	2801      	cmp	r0, #1
    53ae:	bf18      	it	ne
    53b0:	2802      	cmpne	r0, #2
    53b2:	d005      	beq.n	53c0 <MPSL_IRQ_RADIO_Handler+0x5ec>
    53b4:	f640 1156 	movw	r1, #2390	; 0x956
    53b8:	f04f 0070 	mov.w	r0, #112	; 0x70
    53bc:	f003 f894 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    53c0:	49fe      	ldr	r1, [pc, #1016]	; (57bc <MPSL_IRQ_RADIO_Handler+0x9e8>)
    53c2:	2001      	movs	r0, #1
    53c4:	6008      	str	r0, [r1, #0]
    53c6:	49fe      	ldr	r1, [pc, #1016]	; (57c0 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    53c8:	6889      	ldr	r1, [r1, #8]
    53ca:	6008      	str	r0, [r1, #0]
    53cc:	2000      	movs	r0, #0
    53ce:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    53d2:	900c      	str	r0, [sp, #48]	; 0x30
    53d4:	1e40      	subs	r0, r0, #1
    53d6:	900d      	str	r0, [sp, #52]	; 0x34
    53d8:	48fa      	ldr	r0, [pc, #1000]	; (57c4 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    53da:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    53de:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    53e2:	f100 0108 	add.w	r1, r0, #8
    53e6:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    53ea:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    53ee:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    53f2:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    53f6:	980e      	ldr	r0, [sp, #56]	; 0x38
    53f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    53fc:	f005 f906 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5400:	4602      	mov	r2, r0
    5402:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    5406:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    540a:	4bef      	ldr	r3, [pc, #956]	; (57c8 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    540c:	4440      	add	r0, r8
    540e:	1c41      	adds	r1, r0, #1
    5410:	1850      	adds	r0, r2, r1
    5412:	429a      	cmp	r2, r3
    5414:	d856      	bhi.n	54c4 <MPSL_IRQ_RADIO_Handler+0x6f0>
    5416:	4aed      	ldr	r2, [pc, #948]	; (57cc <MPSL_IRQ_RADIO_Handler+0x9f8>)
    5418:	4291      	cmp	r1, r2
    541a:	dc5b      	bgt.n	54d4 <MPSL_IRQ_RADIO_Handler+0x700>
    541c:	4252      	negs	r2, r2
    541e:	4291      	cmp	r1, r2
    5420:	db60      	blt.n	54e4 <MPSL_IRQ_RADIO_Handler+0x710>
    5422:	1c59      	adds	r1, r3, #1
    5424:	4281      	cmp	r1, r0
    5426:	bfdc      	itt	le
    5428:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    542c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    5430:	dd05      	ble.n	543e <MPSL_IRQ_RADIO_Handler+0x66a>
    5432:	2800      	cmp	r0, #0
    5434:	bfbc      	itt	lt
    5436:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    543a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    543e:	9017      	str	r0, [sp, #92]	; 0x5c
    5440:	48e3      	ldr	r0, [pc, #908]	; (57d0 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    5442:	f1b8 0f00 	cmp.w	r8, #0
    5446:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    544a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    544e:	bf14      	ite	ne
    5450:	f04f 0a01 	movne.w	sl, #1
    5454:	f04f 0a00 	moveq.w	sl, #0
    5458:	f002 ffce 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    545c:	9019      	str	r0, [sp, #100]	; 0x64
    545e:	f1ba 0f00 	cmp.w	sl, #0
    5462:	d00b      	beq.n	547c <MPSL_IRQ_RADIO_Handler+0x6a8>
    5464:	49db      	ldr	r1, [pc, #876]	; (57d4 <MPSL_IRQ_RADIO_Handler+0xa00>)
    5466:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    546a:	ea6f 0200 	mvn.w	r2, r0
    546e:	ea72 0001 	orns	r0, r2, r1
    5472:	bf02      	ittt	eq
    5474:	9819      	ldreq	r0, [sp, #100]	; 0x64
    5476:	2800      	cmpeq	r0, #0
    5478:	2701      	moveq	r7, #1
    547a:	d001      	beq.n	5480 <MPSL_IRQ_RADIO_Handler+0x6ac>
    547c:	f04f 0700 	mov.w	r7, #0
    5480:	f002 fe92 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5484:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    5488:	bf08      	it	eq
    548a:	200d      	moveq	r0, #13
    548c:	d00b      	beq.n	54a6 <MPSL_IRQ_RADIO_Handler+0x6d2>
    548e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5492:	3856      	subs	r0, #86	; 0x56
    5494:	bf08      	it	eq
    5496:	201c      	moveq	r0, #28
    5498:	d005      	beq.n	54a6 <MPSL_IRQ_RADIO_Handler+0x6d2>
    549a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    549e:	389f      	subs	r0, #159	; 0x9f
    54a0:	bf14      	ite	ne
    54a2:	2000      	movne	r0, #0
    54a4:	2032      	moveq	r0, #50	; 0x32
    54a6:	f04f 0900 	mov.w	r9, #0
    54aa:	46cb      	mov	fp, r9
    54ac:	9016      	str	r0, [sp, #88]	; 0x58
    54ae:	4546      	cmp	r6, r8
    54b0:	d936      	bls.n	5520 <MPSL_IRQ_RADIO_Handler+0x74c>
    54b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    54b4:	43f3      	mvns	r3, r6
    54b6:	f8df c310 	ldr.w	ip, [pc, #784]	; 57c8 <MPSL_IRQ_RADIO_Handler+0x9f4>
    54ba:	18c8      	adds	r0, r1, r3
    54bc:	46e9      	mov	r9, sp
    54be:	aa1a      	add	r2, sp, #104	; 0x68
    54c0:	4561      	cmp	r1, ip
    54c2:	d904      	bls.n	54ce <MPSL_IRQ_RADIO_Handler+0x6fa>
    54c4:	f240 517f 	movw	r1, #1407	; 0x57f
    54c8:	2070      	movs	r0, #112	; 0x70
    54ca:	f003 f80d 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    54ce:	49bf      	ldr	r1, [pc, #764]	; (57cc <MPSL_IRQ_RADIO_Handler+0x9f8>)
    54d0:	428b      	cmp	r3, r1
    54d2:	dd04      	ble.n	54de <MPSL_IRQ_RADIO_Handler+0x70a>
    54d4:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    54d8:	2070      	movs	r0, #112	; 0x70
    54da:	f003 f805 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    54de:	49be      	ldr	r1, [pc, #760]	; (57d8 <MPSL_IRQ_RADIO_Handler+0xa04>)
    54e0:	428b      	cmp	r3, r1
    54e2:	da04      	bge.n	54ee <MPSL_IRQ_RADIO_Handler+0x71a>
    54e4:	f240 5181 	movw	r1, #1409	; 0x581
    54e8:	2070      	movs	r0, #112	; 0x70
    54ea:	f002 fffd 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    54ee:	49bb      	ldr	r1, [pc, #748]	; (57dc <MPSL_IRQ_RADIO_Handler+0xa08>)
    54f0:	4281      	cmp	r1, r0
    54f2:	bfdc      	itt	le
    54f4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    54f8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    54fc:	dd05      	ble.n	550a <MPSL_IRQ_RADIO_Handler+0x736>
    54fe:	2800      	cmp	r0, #0
    5500:	bfbc      	itt	lt
    5502:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    5506:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    550a:	4649      	mov	r1, r9
    550c:	f001 ff5c 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5510:	9800      	ldr	r0, [sp, #0]
    5512:	990e      	ldr	r1, [sp, #56]	; 0x38
    5514:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5518:	9000      	str	r0, [sp, #0]
    551a:	1a08      	subs	r0, r1, r0
    551c:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    5520:	2f00      	cmp	r7, #0
    5522:	bf18      	it	ne
    5524:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    5528:	d105      	bne.n	5536 <MPSL_IRQ_RADIO_Handler+0x762>
    552a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    552e:	2800      	cmp	r0, #0
    5530:	bf18      	it	ne
    5532:	f04f 0b02 	movne.w	fp, #2
    5536:	43e0      	mvns	r0, r4
    5538:	ea70 0005 	orns	r0, r0, r5
    553c:	d022      	beq.n	5584 <MPSL_IRQ_RADIO_Handler+0x7b0>
    553e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    5542:	1a22      	subs	r2, r4, r0
    5544:	eb75 0201 	sbcs.w	r2, r5, r1
    5548:	d20c      	bcs.n	5564 <MPSL_IRQ_RADIO_Handler+0x790>
    554a:	1b02      	subs	r2, r0, r4
    554c:	eb61 0105 	sbc.w	r1, r1, r5
    5550:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    5554:	f171 0100 	sbcs.w	r1, r1, #0
    5558:	d311      	bcc.n	557e <MPSL_IRQ_RADIO_Handler+0x7aa>
    555a:	f640 1195 	movw	r1, #2453	; 0x995
    555e:	2070      	movs	r0, #112	; 0x70
    5560:	f002 ffc2 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5564:	1a22      	subs	r2, r4, r0
    5566:	eb65 0101 	sbc.w	r1, r5, r1
    556a:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    556e:	f171 0100 	sbcs.w	r1, r1, #0
    5572:	d304      	bcc.n	557e <MPSL_IRQ_RADIO_Handler+0x7aa>
    5574:	f640 1199 	movw	r1, #2457	; 0x999
    5578:	2070      	movs	r0, #112	; 0x70
    557a:	f002 ffb5 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    557e:	1b00      	subs	r0, r0, r4
    5580:	2801      	cmp	r0, #1
    5582:	da03      	bge.n	558c <MPSL_IRQ_RADIO_Handler+0x7b8>
    5584:	981c      	ldr	r0, [sp, #112]	; 0x70
    5586:	901a      	str	r0, [sp, #104]	; 0x68
    5588:	2003      	movs	r0, #3
    558a:	e00d      	b.n	55a8 <MPSL_IRQ_RADIO_Handler+0x7d4>
    558c:	b157      	cbz	r7, 55a4 <MPSL_IRQ_RADIO_Handler+0x7d0>
    558e:	4891      	ldr	r0, [pc, #580]	; (57d4 <MPSL_IRQ_RADIO_Handler+0xa00>)
    5590:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    5594:	b130      	cbz	r0, 55a4 <MPSL_IRQ_RADIO_Handler+0x7d0>
    5596:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    559a:	f110 0b00 	adds.w	fp, r0, #0
    559e:	bf18      	it	ne
    55a0:	f04f 0b02 	movne.w	fp, #2
    55a4:	2000      	movs	r0, #0
    55a6:	941a      	str	r4, [sp, #104]	; 0x68
    55a8:	4483      	add	fp, r0
    55aa:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    55ae:	ebb0 0009 	subs.w	r0, r0, r9
    55b2:	f162 0100 	sbc.w	r1, r2, #0
    55b6:	1e42      	subs	r2, r0, #1
    55b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    55ba:	f141 3eff 	adc.w	lr, r1, #4294967295
    55be:	1ad3      	subs	r3, r2, r3
    55c0:	455b      	cmp	r3, fp
    55c2:	db08      	blt.n	55d6 <MPSL_IRQ_RADIO_Handler+0x802>
    55c4:	f1b9 0f00 	cmp.w	r9, #0
    55c8:	d032      	beq.n	5630 <MPSL_IRQ_RADIO_Handler+0x85c>
    55ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    55cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    55d0:	444b      	add	r3, r9
    55d2:	9310      	str	r3, [sp, #64]	; 0x40
    55d4:	e02c      	b.n	5630 <MPSL_IRQ_RADIO_Handler+0x85c>
    55d6:	f1b9 0f00 	cmp.w	r9, #0
    55da:	d005      	beq.n	55e8 <MPSL_IRQ_RADIO_Handler+0x814>
    55dc:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    55e0:	b920      	cbnz	r0, 55ec <MPSL_IRQ_RADIO_Handler+0x818>
    55e2:	f002 fbff 	bl	7de4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    55e6:	b108      	cbz	r0, 55ec <MPSL_IRQ_RADIO_Handler+0x818>
    55e8:	b9af      	cbnz	r7, 5616 <MPSL_IRQ_RADIO_Handler+0x842>
    55ea:	e00c      	b.n	5606 <MPSL_IRQ_RADIO_Handler+0x832>
    55ec:	b92f      	cbnz	r7, 55fa <MPSL_IRQ_RADIO_Handler+0x826>
    55ee:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    55f2:	2800      	cmp	r0, #0
    55f4:	bf18      	it	ne
    55f6:	f1ab 0b02 	subne.w	fp, fp, #2
    55fa:	f04f 0900 	mov.w	r9, #0
    55fe:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    5602:	464e      	mov	r6, r9
    5604:	e007      	b.n	5616 <MPSL_IRQ_RADIO_Handler+0x842>
    5606:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    560a:	b120      	cbz	r0, 5616 <MPSL_IRQ_RADIO_Handler+0x842>
    560c:	2000      	movs	r0, #0
    560e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    5612:	f1ab 0b02 	sub.w	fp, fp, #2
    5616:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    561a:	ebb0 0009 	subs.w	r0, r0, r9
    561e:	f162 0100 	sbc.w	r1, r2, #0
    5622:	1e42      	subs	r2, r0, #1
    5624:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5626:	f141 3eff 	adc.w	lr, r1, #4294967295
    562a:	1ad3      	subs	r3, r2, r3
    562c:	455b      	cmp	r3, fp
    562e:	db7d      	blt.n	572c <MPSL_IRQ_RADIO_Handler+0x958>
    5630:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5632:	b99b      	cbnz	r3, 565c <MPSL_IRQ_RADIO_Handler+0x888>
    5634:	4b67      	ldr	r3, [pc, #412]	; (57d4 <MPSL_IRQ_RADIO_Handler+0xa00>)
    5636:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    563a:	ea6f 090c 	mvn.w	r9, ip
    563e:	ea79 0903 	orns	r9, r9, r3
    5642:	d00b      	beq.n	565c <MPSL_IRQ_RADIO_Handler+0x888>
    5644:	ebb0 0c0c 	subs.w	ip, r0, ip
    5648:	9816      	ldr	r0, [sp, #88]	; 0x58
    564a:	eb61 0303 	sbc.w	r3, r1, r3
    564e:	ebbc 0000 	subs.w	r0, ip, r0
    5652:	f173 0000 	sbcs.w	r0, r3, #0
    5656:	bf38      	it	cc
    5658:	2000      	movcc	r0, #0
    565a:	d300      	bcc.n	565e <MPSL_IRQ_RADIO_Handler+0x88a>
    565c:	2001      	movs	r0, #1
    565e:	ea3a 0000 	bics.w	r0, sl, r0
    5662:	d163      	bne.n	572c <MPSL_IRQ_RADIO_Handler+0x958>
    5664:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    5668:	e9cd 0107 	strd	r0, r1, [sp, #28]
    566c:	981e      	ldr	r0, [sp, #120]	; 0x78
    566e:	4691      	mov	r9, r2
    5670:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    5674:	46f3      	mov	fp, lr
    5676:	2700      	movs	r7, #0
    5678:	f002 fd96 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    567c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    5680:	bf08      	it	eq
    5682:	200d      	moveq	r0, #13
    5684:	d00b      	beq.n	569e <MPSL_IRQ_RADIO_Handler+0x8ca>
    5686:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    568a:	3856      	subs	r0, #86	; 0x56
    568c:	bf08      	it	eq
    568e:	201c      	moveq	r0, #28
    5690:	d005      	beq.n	569e <MPSL_IRQ_RADIO_Handler+0x8ca>
    5692:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5696:	389f      	subs	r0, #159	; 0x9f
    5698:	bf14      	ite	ne
    569a:	4638      	movne	r0, r7
    569c:	2032      	moveq	r0, #50	; 0x32
    569e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    56a2:	300b      	adds	r0, #11
    56a4:	ebb9 0202 	subs.w	r2, r9, r2
    56a8:	eb6b 0303 	sbc.w	r3, fp, r3
    56ac:	1a10      	subs	r0, r2, r0
    56ae:	f173 0000 	sbcs.w	r0, r3, #0
    56b2:	d22a      	bcs.n	570a <MPSL_IRQ_RADIO_Handler+0x936>
    56b4:	9819      	ldr	r0, [sp, #100]	; 0x64
    56b6:	2801      	cmp	r0, #1
    56b8:	d002      	beq.n	56c0 <MPSL_IRQ_RADIO_Handler+0x8ec>
    56ba:	9818      	ldr	r0, [sp, #96]	; 0x60
    56bc:	b148      	cbz	r0, 56d2 <MPSL_IRQ_RADIO_Handler+0x8fe>
    56be:	e017      	b.n	56f0 <MPSL_IRQ_RADIO_Handler+0x91c>
    56c0:	43e0      	mvns	r0, r4
    56c2:	ea70 0005 	orns	r0, r0, r5
    56c6:	d127      	bne.n	5718 <MPSL_IRQ_RADIO_Handler+0x944>
    56c8:	f640 01d7 	movw	r1, #2263	; 0x8d7
    56cc:	2070      	movs	r0, #112	; 0x70
    56ce:	f002 ff0b 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    56d2:	43e0      	mvns	r0, r4
    56d4:	ea70 0005 	orns	r0, r0, r5
    56d8:	d00a      	beq.n	56f0 <MPSL_IRQ_RADIO_Handler+0x91c>
    56da:	d01d      	beq.n	5718 <MPSL_IRQ_RADIO_Handler+0x944>
    56dc:	ebb4 0009 	subs.w	r0, r4, r9
    56e0:	eb65 010b 	sbc.w	r1, r5, fp
    56e4:	2300      	movs	r3, #0
    56e6:	f1d0 0204 	rsbs	r2, r0, #4
    56ea:	eb73 0201 	sbcs.w	r2, r3, r1
    56ee:	da06      	bge.n	56fe <MPSL_IRQ_RADIO_Handler+0x92a>
    56f0:	464c      	mov	r4, r9
    56f2:	465d      	mov	r5, fp
    56f4:	4620      	mov	r0, r4
    56f6:	4629      	mov	r1, r5
    56f8:	f001 ff96 	bl	7628 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    56fc:	e00c      	b.n	5718 <MPSL_IRQ_RADIO_Handler+0x944>
    56fe:	2200      	movs	r2, #0
    5700:	1a10      	subs	r0, r2, r0
    5702:	eb72 0001 	sbcs.w	r0, r2, r1
    5706:	db11      	blt.n	572c <MPSL_IRQ_RADIO_Handler+0x958>
    5708:	e006      	b.n	5718 <MPSL_IRQ_RADIO_Handler+0x944>
    570a:	464c      	mov	r4, r9
    570c:	465d      	mov	r5, fp
    570e:	4620      	mov	r0, r4
    5710:	4629      	mov	r1, r5
    5712:	f001 ff89 	bl	7628 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    5716:	4657      	mov	r7, sl
    5718:	43e1      	mvns	r1, r4
    571a:	ea71 0005 	orns	r0, r1, r5
    571e:	d071      	beq.n	5804 <MPSL_IRQ_RADIO_Handler+0xa30>
    5720:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    5724:	f04f 0b00 	mov.w	fp, #0
    5728:	990e      	ldr	r1, [sp, #56]	; 0x38
    572a:	e000      	b.n	572e <MPSL_IRQ_RADIO_Handler+0x95a>
    572c:	e06f      	b.n	580e <MPSL_IRQ_RADIO_Handler+0xa3a>
    572e:	1a0b      	subs	r3, r1, r0
    5730:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    5734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5738:	eb11 010c 	adds.w	r1, r1, ip
    573c:	1a08      	subs	r0, r1, r0
    573e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5742:	2b01      	cmp	r3, #1
    5744:	d363      	bcc.n	580e <MPSL_IRQ_RADIO_Handler+0xa3a>
    5746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    574a:	bf98      	it	ls
    574c:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    5750:	d85d      	bhi.n	580e <MPSL_IRQ_RADIO_Handler+0xa3a>
    5752:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    5756:	f004 ff59 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    575a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    575c:	4a1b      	ldr	r2, [pc, #108]	; (57cc <MPSL_IRQ_RADIO_Handler+0x9f8>)
    575e:	1a0d      	subs	r5, r1, r0
    5760:	1aaa      	subs	r2, r5, r2
    5762:	f17b 0200 	sbcs.w	r2, fp, #0
    5766:	d316      	bcc.n	5796 <MPSL_IRQ_RADIO_Handler+0x9c2>
    5768:	4b18      	ldr	r3, [pc, #96]	; (57cc <MPSL_IRQ_RADIO_Handler+0x9f8>)
    576a:	1a42      	subs	r2, r0, r1
    576c:	1ad3      	subs	r3, r2, r3
    576e:	f17b 0300 	sbcs.w	r3, fp, #0
    5772:	d310      	bcc.n	5796 <MPSL_IRQ_RADIO_Handler+0x9c2>
    5774:	4b14      	ldr	r3, [pc, #80]	; (57c8 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    5776:	42ab      	cmp	r3, r5
    5778:	bf3e      	ittt	cc
    577a:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    577e:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    5782:	1845      	addcc	r5, r0, r1
    5784:	d307      	bcc.n	5796 <MPSL_IRQ_RADIO_Handler+0x9c2>
    5786:	4293      	cmp	r3, r2
    5788:	d245      	bcs.n	5816 <MPSL_IRQ_RADIO_Handler+0xa42>
    578a:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    578e:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    5792:	4408      	add	r0, r1
    5794:	4245      	negs	r5, r0
    5796:	f8df 903c 	ldr.w	r9, [pc, #60]	; 57d4 <MPSL_IRQ_RADIO_Handler+0xa00>
    579a:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    579e:	b378      	cbz	r0, 5800 <MPSL_IRQ_RADIO_Handler+0xa2c>
    57a0:	981e      	ldr	r0, [sp, #120]	; 0x78
    57a2:	2801      	cmp	r0, #1
    57a4:	d005      	beq.n	57b2 <MPSL_IRQ_RADIO_Handler+0x9de>
    57a6:	2002      	movs	r0, #2
    57a8:	f002 f9ca 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    57ac:	2001      	movs	r0, #1
    57ae:	f002 f9c7 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    57b2:	45b0      	cmp	r8, r6
    57b4:	d240      	bcs.n	5838 <MPSL_IRQ_RADIO_Handler+0xa64>
    57b6:	eba5 0106 	sub.w	r1, r5, r6
    57ba:	e011      	b.n	57e0 <MPSL_IRQ_RADIO_Handler+0xa0c>
    57bc:	40000508 	.word	0x40000508
    57c0:	20000120 	.word	0x20000120
    57c4:	20000688 	.word	0x20000688
    57c8:	1e847fff 	.word	0x1e847fff
    57cc:	0f424000 	.word	0x0f424000
    57d0:	20000a88 	.word	0x20000a88
    57d4:	20000b08 	.word	0x20000b08
    57d8:	f0bdc000 	.word	0xf0bdc000
    57dc:	1e848000 	.word	0x1e848000
    57e0:	f04f 0002 	mov.w	r0, #2
    57e4:	f002 f8f2 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    57e8:	b398      	cbz	r0, 5852 <MPSL_IRQ_RADIO_Handler+0xa7e>
    57ea:	f1b8 0f00 	cmp.w	r8, #0
    57ee:	bf1c      	itt	ne
    57f0:	eba5 0108 	subne.w	r1, r5, r8
    57f4:	2001      	movne	r0, #1
    57f6:	d035      	beq.n	5864 <MPSL_IRQ_RADIO_Handler+0xa90>
    57f8:	f002 f8e8 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    57fc:	b348      	cbz	r0, 5852 <MPSL_IRQ_RADIO_Handler+0xa7e>
    57fe:	e031      	b.n	5864 <MPSL_IRQ_RADIO_Handler+0xa90>
    5800:	e00e      	b.n	5820 <MPSL_IRQ_RADIO_Handler+0xa4c>
    5802:	e7ff      	b.n	5804 <MPSL_IRQ_RADIO_Handler+0xa30>
    5804:	f640 2103 	movw	r1, #2563	; 0xa03
    5808:	2070      	movs	r0, #112	; 0x70
    580a:	f002 fe6d 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    580e:	b020      	add	sp, #128	; 0x80
    5810:	2000      	movs	r0, #0
    5812:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5816:	f640 21d7 	movw	r1, #2775	; 0xad7
    581a:	2070      	movs	r0, #112	; 0x70
    581c:	f002 fe64 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5820:	45b0      	cmp	r8, r6
    5822:	bf34      	ite	cc
    5824:	4630      	movcc	r0, r6
    5826:	4640      	movcs	r0, r8
    5828:	301e      	adds	r0, #30
    582a:	42a8      	cmp	r0, r5
    582c:	dbb8      	blt.n	57a0 <MPSL_IRQ_RADIO_Handler+0x9cc>
    582e:	f640 2117 	movw	r1, #2583	; 0xa17
    5832:	2070      	movs	r0, #112	; 0x70
    5834:	f002 fe58 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5838:	d90c      	bls.n	5854 <MPSL_IRQ_RADIO_Handler+0xa80>
    583a:	eba5 0108 	sub.w	r1, r5, r8
    583e:	2001      	movs	r0, #1
    5840:	f002 f8c4 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5844:	b128      	cbz	r0, 5852 <MPSL_IRQ_RADIO_Handler+0xa7e>
    5846:	2e00      	cmp	r6, #0
    5848:	bf1c      	itt	ne
    584a:	1ba9      	subne	r1, r5, r6
    584c:	2002      	movne	r0, #2
    584e:	d009      	beq.n	5864 <MPSL_IRQ_RADIO_Handler+0xa90>
    5850:	e7d2      	b.n	57f8 <MPSL_IRQ_RADIO_Handler+0xa24>
    5852:	e034      	b.n	58be <MPSL_IRQ_RADIO_Handler+0xaea>
    5854:	ea56 0008 	orrs.w	r0, r6, r8
    5858:	d004      	beq.n	5864 <MPSL_IRQ_RADIO_Handler+0xa90>
    585a:	f640 113a 	movw	r1, #2362	; 0x93a
    585e:	2070      	movs	r0, #112	; 0x70
    5860:	f002 fe42 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5864:	4629      	mov	r1, r5
    5866:	2000      	movs	r0, #0
    5868:	f002 f8b0 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    586c:	b338      	cbz	r0, 58be <MPSL_IRQ_RADIO_Handler+0xaea>
    586e:	2601      	movs	r6, #1
    5870:	f1ba 0f00 	cmp.w	sl, #0
    5874:	bf04      	itt	eq
    5876:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    587a:	2800      	cmpeq	r0, #0
    587c:	d000      	beq.n	5880 <MPSL_IRQ_RADIO_Handler+0xaac>
    587e:	b347      	cbz	r7, 58d2 <MPSL_IRQ_RADIO_Handler+0xafe>
    5880:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    5884:	ea6f 0101 	mvn.w	r1, r1
    5888:	ea71 0000 	orns	r0, r1, r0
    588c:	d006      	beq.n	589c <MPSL_IRQ_RADIO_Handler+0xac8>
    588e:	f002 fc91 	bl	81b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    5892:	f04f 30ff 	mov.w	r0, #4294967295
    5896:	4601      	mov	r1, r0
    5898:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    589c:	b1ff      	cbz	r7, 58de <MPSL_IRQ_RADIO_Handler+0xb0a>
    589e:	9816      	ldr	r0, [sp, #88]	; 0x58
    58a0:	1a20      	subs	r0, r4, r0
    58a2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    58a6:	f04f 0005 	mov.w	r0, #5
    58aa:	f002 f88f 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    58ae:	b370      	cbz	r0, 590e <MPSL_IRQ_RADIO_Handler+0xb3a>
    58b0:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    58b4:	2800      	cmp	r0, #0
    58b6:	bf08      	it	eq
    58b8:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    58bc:	e017      	b.n	58ee <MPSL_IRQ_RADIO_Handler+0xb1a>
    58be:	2002      	movs	r0, #2
    58c0:	f002 f93e 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    58c4:	2001      	movs	r0, #1
    58c6:	f002 f93b 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    58ca:	b020      	add	sp, #128	; 0x80
    58cc:	2000      	movs	r0, #0
    58ce:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    58d2:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    58d6:	43c0      	mvns	r0, r0
    58d8:	ea70 0001 	orns	r0, r0, r1
    58dc:	d012      	beq.n	5904 <MPSL_IRQ_RADIO_Handler+0xb30>
    58de:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    58e2:	b120      	cbz	r0, 58ee <MPSL_IRQ_RADIO_Handler+0xb1a>
    58e4:	2005      	movs	r0, #5
    58e6:	f002 f92b 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    58ea:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    58ee:	eba5 0008 	sub.w	r0, r5, r8
    58f2:	f1a0 0119 	sub.w	r1, r0, #25
    58f6:	2900      	cmp	r1, #0
    58f8:	dc0f      	bgt.n	591a <MPSL_IRQ_RADIO_Handler+0xb46>
    58fa:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    58fe:	2070      	movs	r0, #112	; 0x70
    5900:	f002 fdf2 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5904:	f002 fc72 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5908:	f002 f83e 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    590c:	e7c4      	b.n	5898 <MPSL_IRQ_RADIO_Handler+0xac4>
    590e:	e7ff      	b.n	5910 <MPSL_IRQ_RADIO_Handler+0xb3c>
    5910:	f240 21e6 	movw	r1, #742	; 0x2e6
    5914:	2070      	movs	r0, #112	; 0x70
    5916:	f002 fde7 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    591a:	2003      	movs	r0, #3
    591c:	f002 f856 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5920:	b338      	cbz	r0, 5972 <MPSL_IRQ_RADIO_Handler+0xb9e>
    5922:	4816      	ldr	r0, [pc, #88]	; (597c <MPSL_IRQ_RADIO_Handler+0xba8>)
    5924:	6880      	ldr	r0, [r0, #8]
    5926:	f8c0 b000 	str.w	fp, [r0]
    592a:	4815      	ldr	r0, [pc, #84]	; (5980 <MPSL_IRQ_RADIO_Handler+0xbac>)
    592c:	f8c0 b000 	str.w	fp, [r0]
    5930:	ac0c      	add	r4, sp, #48	; 0x30
    5932:	4814      	ldr	r0, [pc, #80]	; (5984 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    5934:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    5938:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    593c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    5940:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    5944:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    5948:	ac10      	add	r4, sp, #64	; 0x40
    594a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    594e:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    5952:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    5956:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    595a:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    595e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    5962:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    5966:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    596a:	b020      	add	sp, #128	; 0x80
    596c:	2001      	movs	r0, #1
    596e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5972:	f640 2148 	movw	r1, #2632	; 0xa48
    5976:	2070      	movs	r0, #112	; 0x70
    5978:	f002 fdb6 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    597c:	20000120 	.word	0x20000120
    5980:	40000508 	.word	0x40000508
    5984:	20000a88 	.word	0x20000a88
    5988:	b570      	push	{r4, r5, r6, lr}
    598a:	4d1d      	ldr	r5, [pc, #116]	; (5a00 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    598c:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    5990:	2820      	cmp	r0, #32
    5992:	bf18      	it	ne
    5994:	bd70      	popne	{r4, r5, r6, pc}
    5996:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    599a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    599e:	4428      	add	r0, r5
    59a0:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    59a4:	2c20      	cmp	r4, #32
    59a6:	d026      	beq.n	59f6 <MPSL_IRQ_RADIO_Handler+0xc22>
    59a8:	4b16      	ldr	r3, [pc, #88]	; (5a04 <MPSL_IRQ_RADIO_Handler+0xc30>)
    59aa:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    59ae:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    59b2:	7849      	ldrb	r1, [r1, #1]
    59b4:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    59b8:	20ff      	movs	r0, #255	; 0xff
    59ba:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    59be:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    59c2:	4621      	mov	r1, r4
    59c4:	2002      	movs	r0, #2
    59c6:	f000 f88b 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    59ca:	2000      	movs	r0, #0
    59cc:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    59d0:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    59d4:	480c      	ldr	r0, [pc, #48]	; (5a08 <MPSL_IRQ_RADIO_Handler+0xc34>)
    59d6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    59da:	7e00      	ldrb	r0, [r0, #24]
    59dc:	2800      	cmp	r0, #0
    59de:	bf08      	it	eq
    59e0:	f002 feea 	bleq	87b8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    59e4:	2000      	movs	r0, #0
    59e6:	4909      	ldr	r1, [pc, #36]	; (5a0c <MPSL_IRQ_RADIO_Handler+0xc38>)
    59e8:	6849      	ldr	r1, [r1, #4]
    59ea:	2900      	cmp	r1, #0
    59ec:	bf08      	it	eq
    59ee:	bd70      	popeq	{r4, r5, r6, pc}
    59f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    59f4:	4708      	bx	r1
    59f6:	f240 311d 	movw	r1, #797	; 0x31d
    59fa:	2070      	movs	r0, #112	; 0x70
    59fc:	f002 fd74 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5a00:	20000b08 	.word	0x20000b08
    5a04:	20000a88 	.word	0x20000a88
    5a08:	20000688 	.word	0x20000688
    5a0c:	20000120 	.word	0x20000120
    5a10:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5a14:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5ad0 <MPSL_IRQ_RADIO_Handler+0xcfc>
    5a18:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    5a1c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    5a20:	4440      	add	r0, r8
    5a22:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    5a26:	2c20      	cmp	r4, #32
    5a28:	bf08      	it	eq
    5a2a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5a2e:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 5ad4 <MPSL_IRQ_RADIO_Handler+0xd00>
    5a32:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5ad8 <MPSL_IRQ_RADIO_Handler+0xd04>
    5a36:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    5a3a:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    5a3e:	2607      	movs	r6, #7
    5a40:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    5a44:	2801      	cmp	r0, #1
    5a46:	d00e      	beq.n	5a66 <MPSL_IRQ_RADIO_Handler+0xc92>
    5a48:	2804      	cmp	r0, #4
    5a4a:	bf08      	it	eq
    5a4c:	2602      	moveq	r6, #2
    5a4e:	d00a      	beq.n	5a66 <MPSL_IRQ_RADIO_Handler+0xc92>
    5a50:	2805      	cmp	r0, #5
    5a52:	bf0c      	ite	eq
    5a54:	2603      	moveq	r6, #3
    5a56:	2806      	cmpne	r0, #6
    5a58:	d005      	beq.n	5a66 <MPSL_IRQ_RADIO_Handler+0xc92>
    5a5a:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    5a5e:	f04f 0070 	mov.w	r0, #112	; 0x70
    5a62:	f002 fd41 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5a66:	f1bb 0f00 	cmp.w	fp, #0
    5a6a:	bf18      	it	ne
    5a6c:	f3af 8000 	nopne.w
    5a70:	f3ef 8010 	mrs	r0, PRIMASK
    5a74:	b672      	cpsid	i
    5a76:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    5a7a:	784a      	ldrb	r2, [r1, #1]
    5a7c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    5a80:	4441      	add	r1, r8
    5a82:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    5a86:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    5a8a:	42a2      	cmp	r2, r4
    5a8c:	bf04      	itt	eq
    5a8e:	2220      	moveq	r2, #32
    5a90:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    5a94:	b1a8      	cbz	r0, 5ac2 <MPSL_IRQ_RADIO_Handler+0xcee>
    5a96:	462a      	mov	r2, r5
    5a98:	4621      	mov	r1, r4
    5a9a:	2001      	movs	r0, #1
    5a9c:	f000 f820 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5aa0:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    5aa4:	e9d1 2000 	ldrd	r2, r0, [r1]
    5aa8:	4631      	mov	r1, r6
    5aaa:	4790      	blx	r2
    5aac:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    5ab0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    5ab4:	4440      	add	r0, r8
    5ab6:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    5aba:	2c20      	cmp	r4, #32
    5abc:	d1bd      	bne.n	5a3a <MPSL_IRQ_RADIO_Handler+0xc66>
    5abe:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5ac2:	4806      	ldr	r0, [pc, #24]	; (5adc <MPSL_IRQ_RADIO_Handler+0xd08>)
    5ac4:	2800      	cmp	r0, #0
    5ac6:	bf18      	it	ne
    5ac8:	f3af 8000 	nopne.w
    5acc:	b662      	cpsie	i
    5ace:	e7e2      	b.n	5a96 <MPSL_IRQ_RADIO_Handler+0xcc2>
    5ad0:	20000b08 	.word	0x20000b08
    5ad4:	00000000 	.word	0x00000000
    5ad8:	20000a88 	.word	0x20000a88
    5adc:	00000000 	.word	0x00000000
    5ae0:	f8df c058 	ldr.w	ip, [pc, #88]	; 5b3c <MPSL_IRQ_RADIO_Handler+0xd68>
    5ae4:	b510      	push	{r4, lr}
    5ae6:	2300      	movs	r3, #0
    5ae8:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    5aec:	2807      	cmp	r0, #7
    5aee:	d21f      	bcs.n	5b30 <MPSL_IRQ_RADIO_Handler+0xd5c>
    5af0:	e8df f000 	tbb	[pc, r0]
    5af4:	05050505 	.word	0x05050505
    5af8:	00040404 	.word	0x00040404
    5afc:	2301      	movs	r3, #1
    5afe:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    5b02:	2b00      	cmp	r3, #0
    5b04:	bf08      	it	eq
    5b06:	bd10      	popeq	{r4, pc}
    5b08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5b0c:	480c      	ldr	r0, [pc, #48]	; (5b40 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    5b0e:	4402      	add	r2, r0
    5b10:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    5b14:	2820      	cmp	r0, #32
    5b16:	bf0e      	itee	eq
    5b18:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    5b1c:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    5b20:	7041      	strbne	r1, [r0, #1]
    5b22:	2020      	movs	r0, #32
    5b24:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    5b28:	7058      	strb	r0, [r3, #1]
    5b2a:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    5b2e:	bd10      	pop	{r4, pc}
    5b30:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5b34:	2070      	movs	r0, #112	; 0x70
    5b36:	f002 fcd7 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5b3a:	0000      	.short	0x0000
    5b3c:	20000a88 	.word	0x20000a88
    5b40:	20000b08 	.word	0x20000b08
    5b44:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5b48:	460f      	mov	r7, r1
    5b4a:	4680      	mov	r8, r0
    5b4c:	f8df b154 	ldr.w	fp, [pc, #340]	; 5ca4 <MPSL_IRQ_RADIO_Handler+0xed0>
    5b50:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    5b54:	4458      	add	r0, fp
    5b56:	f1b8 0f01 	cmp.w	r8, #1
    5b5a:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5b5e:	4625      	mov	r5, r4
    5b60:	bf18      	it	ne
    5b62:	f1b8 0f02 	cmpne.w	r8, #2
    5b66:	d005      	beq.n	5b74 <MPSL_IRQ_RADIO_Handler+0xda0>
    5b68:	f640 217e 	movw	r1, #2686	; 0xa7e
    5b6c:	f04f 0070 	mov.w	r0, #112	; 0x70
    5b70:	f002 fcba 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5b74:	2d20      	cmp	r5, #32
    5b76:	d041      	beq.n	5bfc <MPSL_IRQ_RADIO_Handler+0xe28>
    5b78:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    5b7c:	2600      	movs	r6, #0
    5b7e:	2800      	cmp	r0, #0
    5b80:	bf08      	it	eq
    5b82:	2602      	moveq	r6, #2
    5b84:	f001 fd4a 	bl	761c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    5b88:	f8df 911c 	ldr.w	r9, [pc, #284]	; 5ca8 <MPSL_IRQ_RADIO_Handler+0xed4>
    5b8c:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    5b90:	6899      	ldr	r1, [r3, #8]
    5b92:	691b      	ldr	r3, [r3, #16]
    5b94:	1a0a      	subs	r2, r1, r0
    5b96:	18c9      	adds	r1, r1, r3
    5b98:	1a09      	subs	r1, r1, r0
    5b9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5ba2:	4296      	cmp	r6, r2
    5ba4:	bf99      	ittee	ls
    5ba6:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    5baa:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5bae:	4a3f      	ldrhi	r2, [pc, #252]	; (5cac <MPSL_IRQ_RADIO_Handler+0xed8>)
    5bb0:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    5bb4:	d920      	bls.n	5bf8 <MPSL_IRQ_RADIO_Handler+0xe24>
    5bb6:	4622      	mov	r2, r4
    5bb8:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    5bbc:	784c      	ldrb	r4, [r1, #1]
    5bbe:	2c20      	cmp	r4, #32
    5bc0:	d012      	beq.n	5be8 <MPSL_IRQ_RADIO_Handler+0xe14>
    5bc2:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    5bc6:	6899      	ldr	r1, [r3, #8]
    5bc8:	691b      	ldr	r3, [r3, #16]
    5bca:	ebb1 0c00 	subs.w	ip, r1, r0
    5bce:	18c9      	adds	r1, r1, r3
    5bd0:	1a09      	subs	r1, r1, r0
    5bd2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    5bd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5bda:	4566      	cmp	r6, ip
    5bdc:	bf9c      	itt	ls
    5bde:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    5be2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5be6:	d8e6      	bhi.n	5bb6 <MPSL_IRQ_RADIO_Handler+0xde2>
    5be8:	2a20      	cmp	r2, #32
    5bea:	d005      	beq.n	5bf8 <MPSL_IRQ_RADIO_Handler+0xe24>
    5bec:	463b      	mov	r3, r7
    5bee:	2120      	movs	r1, #32
    5bf0:	2004      	movs	r0, #4
    5bf2:	f7ff f90d 	bl	4e10 <MPSL_IRQ_RADIO_Handler+0x3c>
    5bf6:	4604      	mov	r4, r0
    5bf8:	42ac      	cmp	r4, r5
    5bfa:	d113      	bne.n	5c24 <MPSL_IRQ_RADIO_Handler+0xe50>
    5bfc:	482c      	ldr	r0, [pc, #176]	; (5cb0 <MPSL_IRQ_RADIO_Handler+0xedc>)
    5bfe:	2800      	cmp	r0, #0
    5c00:	bf18      	it	ne
    5c02:	f3af 8000 	nopne.w
    5c06:	f001 febf 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5c0a:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    5c0e:	2a20      	cmp	r2, #32
    5c10:	d00b      	beq.n	5c2a <MPSL_IRQ_RADIO_Handler+0xe56>
    5c12:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    5c16:	1c84      	adds	r4, r0, #2
    5c18:	f141 0c00 	adc.w	ip, r1, #0
    5c1c:	1b1b      	subs	r3, r3, r4
    5c1e:	eb72 020c 	sbcs.w	r2, r2, ip
    5c22:	d202      	bcs.n	5c2a <MPSL_IRQ_RADIO_Handler+0xe56>
    5c24:	2000      	movs	r0, #0
    5c26:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5c2a:	2d20      	cmp	r5, #32
    5c2c:	d013      	beq.n	5c56 <MPSL_IRQ_RADIO_Handler+0xe82>
    5c2e:	462b      	mov	r3, r5
    5c30:	4642      	mov	r2, r8
    5c32:	f7ff fbaf 	bl	5394 <MPSL_IRQ_RADIO_Handler+0x5c0>
    5c36:	2800      	cmp	r0, #0
    5c38:	bf1e      	ittt	ne
    5c3a:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    5c3e:	2002      	movne	r0, #2
    5c40:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5c44:	463b      	mov	r3, r7
    5c46:	462a      	mov	r2, r5
    5c48:	2120      	movs	r1, #32
    5c4a:	2004      	movs	r0, #4
    5c4c:	f7ff f8e0 	bl	4e10 <MPSL_IRQ_RADIO_Handler+0x3c>
    5c50:	2000      	movs	r0, #0
    5c52:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5c56:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    5c5a:	43c0      	mvns	r0, r0
    5c5c:	ea70 0001 	orns	r0, r0, r1
    5c60:	d005      	beq.n	5c6e <MPSL_IRQ_RADIO_Handler+0xe9a>
    5c62:	f002 faa7 	bl	81b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    5c66:	f04f 30ff 	mov.w	r0, #4294967295
    5c6a:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    5c6e:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    5c72:	b128      	cbz	r0, 5c80 <MPSL_IRQ_RADIO_Handler+0xeac>
    5c74:	2005      	movs	r0, #5
    5c76:	f001 ff63 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5c7a:	2000      	movs	r0, #0
    5c7c:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    5c80:	2004      	movs	r0, #4
    5c82:	f001 ff5d 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5c86:	f001 ffc3 	bl	7c10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    5c8a:	490a      	ldr	r1, [pc, #40]	; (5cb4 <MPSL_IRQ_RADIO_Handler+0xee0>)
    5c8c:	2020      	movs	r0, #32
    5c8e:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    5c92:	6889      	ldr	r1, [r1, #8]
    5c94:	2000      	movs	r0, #0
    5c96:	6008      	str	r0, [r1, #0]
    5c98:	4907      	ldr	r1, [pc, #28]	; (5cb8 <MPSL_IRQ_RADIO_Handler+0xee4>)
    5c9a:	6008      	str	r0, [r1, #0]
    5c9c:	2001      	movs	r0, #1
    5c9e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5ca2:	0000      	.short	0x0000
    5ca4:	20000b08 	.word	0x20000b08
    5ca8:	20000688 	.word	0x20000688
    5cac:	20000a88 	.word	0x20000a88
    5cb0:	00000000 	.word	0x00000000
    5cb4:	20000120 	.word	0x20000120
    5cb8:	40000508 	.word	0x40000508

00005cbc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    5cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cc0:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 5e88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    5cc4:	4606      	mov	r6, r0
    5cc6:	b08f      	sub	sp, #60	; 0x3c
    5cc8:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    5ccc:	468a      	mov	sl, r1
    5cce:	2820      	cmp	r0, #32
    5cd0:	d061      	beq.n	5d96 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    5cd2:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    5cd6:	f10b 0408 	add.w	r4, fp, #8
    5cda:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    5cde:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    5ce2:	2120      	movs	r1, #32
    5ce4:	f88d 1018 	strb.w	r1, [sp, #24]
    5ce8:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    5cec:	f8db 2008 	ldr.w	r2, [fp, #8]
    5cf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5cf4:	4459      	add	r1, fp
    5cf6:	2700      	movs	r7, #0
    5cf8:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    5cfc:	f8db 1010 	ldr.w	r1, [fp, #16]
    5d00:	1851      	adds	r1, r2, r1
    5d02:	910a      	str	r1, [sp, #40]	; 0x28
    5d04:	f8db 0000 	ldr.w	r0, [fp]
    5d08:	aa09      	add	r2, sp, #36	; 0x24
    5d0a:	4430      	add	r0, r6
    5d0c:	a907      	add	r1, sp, #28
    5d0e:	f001 fb5b 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5d12:	f8d9 0010 	ldr.w	r0, [r9, #16]
    5d16:	9907      	ldr	r1, [sp, #28]
    5d18:	f8d9 2008 	ldr.w	r2, [r9, #8]
    5d1c:	1840      	adds	r0, r0, r1
    5d1e:	1810      	adds	r0, r2, r0
    5d20:	2e67      	cmp	r6, #103	; 0x67
    5d22:	d33d      	bcc.n	5da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5d24:	4959      	ldr	r1, [pc, #356]	; (5e8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    5d26:	2200      	movs	r2, #0
    5d28:	1b89      	subs	r1, r1, r6
    5d2a:	eb72 0107 	sbcs.w	r1, r2, r7
    5d2e:	d337      	bcc.n	5da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5d30:	6821      	ldr	r1, [r4, #0]
    5d32:	4694      	mov	ip, r2
    5d34:	1a40      	subs	r0, r0, r1
    5d36:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    5d3a:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    5d3e:	eb7c 010c 	sbcs.w	r1, ip, ip
    5d42:	d32d      	bcc.n	5da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5d44:	60a0      	str	r0, [r4, #8]
    5d46:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    5d4a:	f884 a010 	strb.w	sl, [r4, #16]
    5d4e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    5d52:	f10d 0b18 	add.w	fp, sp, #24
    5d56:	2d20      	cmp	r5, #32
    5d58:	d055      	beq.n	5e06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5d5a:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    5d5e:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    5d62:	9001      	str	r0, [sp, #4]
    5d64:	484a      	ldr	r0, [pc, #296]	; (5e90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    5d66:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    5d6a:	f8d4 a000 	ldr.w	sl, [r4]
    5d6e:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    5d72:	f108 0008 	add.w	r0, r8, #8
    5d76:	eb1a 0201 	adds.w	r2, sl, r1
    5d7a:	eb43 0107 	adc.w	r1, r3, r7
    5d7e:	e9d0 9300 	ldrd	r9, r3, [r0]
    5d82:	ebb9 0202 	subs.w	r2, r9, r2
    5d86:	eb73 0101 	sbcs.w	r1, r3, r1
    5d8a:	d325      	bcc.n	5dd8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    5d8c:	89c0      	ldrh	r0, [r0, #14]
    5d8e:	b398      	cbz	r0, 5df8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    5d90:	89e0      	ldrh	r0, [r4, #14]
    5d92:	b148      	cbz	r0, 5da8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    5d94:	e037      	b.n	5e06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5d96:	f640 3135 	movw	r1, #2869	; 0xb35
    5d9a:	2070      	movs	r0, #112	; 0x70
    5d9c:	f002 fba4 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5da0:	b00f      	add	sp, #60	; 0x3c
    5da2:	2001      	movs	r0, #1
    5da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5da8:	f002 f9fe 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5dac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    5db0:	bf08      	it	eq
    5db2:	200d      	moveq	r0, #13
    5db4:	d00b      	beq.n	5dce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    5db6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5dba:	3856      	subs	r0, #86	; 0x56
    5dbc:	bf08      	it	eq
    5dbe:	201c      	moveq	r0, #28
    5dc0:	d005      	beq.n	5dce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    5dc2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5dc6:	389f      	subs	r0, #159	; 0x9f
    5dc8:	bf14      	ite	ne
    5dca:	4638      	movne	r0, r7
    5dcc:	2032      	moveq	r0, #50	; 0x32
    5dce:	1c41      	adds	r1, r0, #1
    5dd0:	ebb9 000a 	subs.w	r0, r9, sl
    5dd4:	4288      	cmp	r0, r1
    5dd6:	da16      	bge.n	5e06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5dd8:	f88b 5000 	strb.w	r5, [fp]
    5ddc:	f898 0018 	ldrb.w	r0, [r8, #24]
    5de0:	7c21      	ldrb	r1, [r4, #16]
    5de2:	4281      	cmp	r1, r0
    5de4:	d309      	bcc.n	5dfa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    5de6:	6821      	ldr	r1, [r4, #0]
    5de8:	980a      	ldr	r0, [sp, #40]	; 0x28
    5dea:	1a40      	subs	r0, r0, r1
    5dec:	60a0      	str	r0, [r4, #8]
    5dee:	b00f      	add	sp, #60	; 0x3c
    5df0:	f04f 0002 	mov.w	r0, #2
    5df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5df8:	e005      	b.n	5e06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5dfa:	9801      	ldr	r0, [sp, #4]
    5dfc:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    5e00:	7845      	ldrb	r5, [r0, #1]
    5e02:	2d20      	cmp	r5, #32
    5e04:	d1ae      	bne.n	5d64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    5e06:	2005      	movs	r0, #5
    5e08:	f001 fe9a 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5e0c:	4d1e      	ldr	r5, [pc, #120]	; (5e88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    5e0e:	f04f 30ff 	mov.w	r0, #4294967295
    5e12:	6068      	str	r0, [r5, #4]
    5e14:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    5e18:	f89d 2018 	ldrb.w	r2, [sp, #24]
    5e1c:	2120      	movs	r1, #32
    5e1e:	2a20      	cmp	r2, #32
    5e20:	d003      	beq.n	5e2a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    5e22:	2005      	movs	r0, #5
    5e24:	f7fe fff4 	bl	4e10 <MPSL_IRQ_RADIO_Handler+0x3c>
    5e28:	e004      	b.n	5e34 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    5e2a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5e2e:	4428      	add	r0, r5
    5e30:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    5e34:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    5e38:	4916      	ldr	r1, [pc, #88]	; (5e94 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    5e3a:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    5e3e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    5e42:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    5e46:	7048      	strb	r0, [r1, #1]
    5e48:	6828      	ldr	r0, [r5, #0]
    5e4a:	4430      	add	r0, r6
    5e4c:	6028      	str	r0, [r5, #0]
    5e4e:	20ff      	movs	r0, #255	; 0xff
    5e50:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    5e54:	7e68      	ldrb	r0, [r5, #25]
    5e56:	2801      	cmp	r0, #1
    5e58:	d10a      	bne.n	5e70 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    5e5a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    5e5e:	6823      	ldr	r3, [r4, #0]
    5e60:	1818      	adds	r0, r3, r0
    5e62:	f142 0100 	adc.w	r1, r2, #0
    5e66:	1e40      	subs	r0, r0, #1
    5e68:	f141 31ff 	adc.w	r1, r1, #4294967295
    5e6c:	f001 fc8a 	bl	7784 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5e70:	f89d 0018 	ldrb.w	r0, [sp, #24]
    5e74:	2820      	cmp	r0, #32
    5e76:	d003      	beq.n	5e80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    5e78:	4807      	ldr	r0, [pc, #28]	; (5e98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    5e7a:	7840      	ldrb	r0, [r0, #1]
    5e7c:	f002 fc06 	bl	868c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5e80:	b00f      	add	sp, #60	; 0x3c
    5e82:	2000      	movs	r0, #0
    5e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e88:	20000b08 	.word	0x20000b08
    5e8c:	0f424000 	.word	0x0f424000
    5e90:	20000688 	.word	0x20000688
    5e94:	20000a88 	.word	0x20000a88
    5e98:	20000120 	.word	0x20000120

00005e9c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    5e9c:	b570      	push	{r4, r5, r6, lr}
    5e9e:	4a23      	ldr	r2, [pc, #140]	; (5f2c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    5ea0:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    5ea4:	2920      	cmp	r1, #32
    5ea6:	d039      	beq.n	5f1c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    5ea8:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    5eac:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    5eb0:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    5eb4:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    5eb8:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    5ebc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ec0:	4411      	add	r1, r2
    5ec2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    5ec6:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    5eca:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    5ece:	2920      	cmp	r1, #32
    5ed0:	d029      	beq.n	5f26 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    5ed2:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    5ed6:	7e2d      	ldrb	r5, [r5, #24]
    5ed8:	42a8      	cmp	r0, r5
    5eda:	bf3c      	itt	cc
    5edc:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    5ee0:	7849      	ldrbcc	r1, [r1, #1]
    5ee2:	d3f4      	bcc.n	5ece <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    5ee4:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    5ee8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    5eec:	f8dc 5008 	ldr.w	r5, [ip, #8]
    5ef0:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    5ef4:	6814      	ldr	r4, [r2, #0]
    5ef6:	1828      	adds	r0, r5, r0
    5ef8:	f146 0200 	adc.w	r2, r6, #0
    5efc:	ebb1 0c00 	subs.w	ip, r1, r0
    5f00:	eb73 0202 	sbcs.w	r2, r3, r2
    5f04:	d308      	bcc.n	5f18 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    5f06:	1a08      	subs	r0, r1, r0
    5f08:	f004 fb80 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5f0c:	f104 0167 	add.w	r1, r4, #103	; 0x67
    5f10:	4281      	cmp	r1, r0
    5f12:	bf9c      	itt	ls
    5f14:	1b00      	subls	r0, r0, r4
    5f16:	bd70      	popls	{r4, r5, r6, pc}
    5f18:	2000      	movs	r0, #0
    5f1a:	bd70      	pop	{r4, r5, r6, pc}
    5f1c:	f640 3108 	movw	r1, #2824	; 0xb08
    5f20:	2070      	movs	r0, #112	; 0x70
    5f22:	f002 fae1 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5f26:	f04f 30ff 	mov.w	r0, #4294967295
    5f2a:	bd70      	pop	{r4, r5, r6, pc}
    5f2c:	20000b08 	.word	0x20000b08

00005f30 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    5f30:	490a      	ldr	r1, [pc, #40]	; (5f5c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    5f32:	b510      	push	{r4, lr}
    5f34:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    5f38:	f100 0408 	add.w	r4, r0, #8
    5f3c:	e9d4 0100 	ldrd	r0, r1, [r4]
    5f40:	f001 f9c4 	bl	72cc <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5f44:	89e3      	ldrh	r3, [r4, #14]
    5f46:	2200      	movs	r2, #0
    5f48:	18c3      	adds	r3, r0, r3
    5f4a:	7b20      	ldrb	r0, [r4, #12]
    5f4c:	4151      	adcs	r1, r2
    5f4e:	1818      	adds	r0, r3, r0
    5f50:	4151      	adcs	r1, r2
    5f52:	1c40      	adds	r0, r0, #1
    5f54:	f141 0100 	adc.w	r1, r1, #0
    5f58:	bd10      	pop	{r4, pc}
    5f5a:	0000      	.short	0x0000
    5f5c:	20000688 	.word	0x20000688

00005f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    5f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f62:	4d6f      	ldr	r5, [pc, #444]	; (6120 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    5f64:	2600      	movs	r6, #0
    5f66:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    5f6a:	2701      	movs	r7, #1
    5f6c:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    5f70:	4b6c      	ldr	r3, [pc, #432]	; (6124 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    5f72:	2808      	cmp	r0, #8
    5f74:	d273      	bcs.n	605e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    5f76:	e8df f000 	tbb	[pc, r0]
    5f7a:	7804      	.short	0x7804
    5f7c:	47ceb3a0 	.word	0x47ceb3a0
    5f80:	bdb8      	.short	0xbdb8
    5f82:	43c8      	mvns	r0, r1
    5f84:	ea70 0002 	orns	r0, r0, r2
    5f88:	d105      	bne.n	5f96 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    5f8a:	f002 f92f 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5f8e:	f001 fcfb 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f92:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5f96:	8ae0      	ldrh	r0, [r4, #22]
    5f98:	b110      	cbz	r0, 5fa0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    5f9a:	f002 fa2d 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    5f9e:	b180      	cbz	r0, 5fc2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    5fa0:	f7ff fcf2 	bl	5988 <MPSL_IRQ_RADIO_Handler+0xbb4>
    5fa4:	20ff      	movs	r0, #255	; 0xff
    5fa6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    5faa:	6861      	ldr	r1, [r4, #4]
    5fac:	f1b1 3fff 	cmp.w	r1, #4294967295
    5fb0:	d003      	beq.n	5fba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    5fb2:	2005      	movs	r0, #5
    5fb4:	f001 fd0a 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5fb8:	b140      	cbz	r0, 5fcc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    5fba:	7e60      	ldrb	r0, [r4, #25]
    5fbc:	2801      	cmp	r0, #1
    5fbe:	d114      	bne.n	5fea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    5fc0:	e009      	b.n	5fd6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    5fc2:	f640 012c 	movw	r1, #2092	; 0x82c
    5fc6:	2070      	movs	r0, #112	; 0x70
    5fc8:	f002 fa8e 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5fcc:	f640 0131 	movw	r1, #2097	; 0x831
    5fd0:	2070      	movs	r0, #112	; 0x70
    5fd2:	f002 fa89 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5fd6:	68a2      	ldr	r2, [r4, #8]
    5fd8:	6920      	ldr	r0, [r4, #16]
    5fda:	68e1      	ldr	r1, [r4, #12]
    5fdc:	1810      	adds	r0, r2, r0
    5fde:	4171      	adcs	r1, r6
    5fe0:	1e40      	subs	r0, r0, #1
    5fe2:	f141 31ff 	adc.w	r1, r1, #4294967295
    5fe6:	f001 fbcd 	bl	7784 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5fea:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5fee:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5ff2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5ff6:	6840      	ldr	r0, [r0, #4]
    5ff8:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5ffc:	680a      	ldr	r2, [r1, #0]
    5ffe:	b001      	add	sp, #4
    6000:	2101      	movs	r1, #1
    6002:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6006:	4710      	bx	r2
    6008:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    600c:	b160      	cbz	r0, 6028 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    600e:	43c8      	mvns	r0, r1
    6010:	ea70 0002 	orns	r0, r0, r2
    6014:	d105      	bne.n	6022 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    6016:	f002 f8e9 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    601a:	f001 fcb5 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    601e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    6022:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    6026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6028:	f7ff fcae 	bl	5988 <MPSL_IRQ_RADIO_Handler+0xbb4>
    602c:	f04f 30ff 	mov.w	r0, #4294967295
    6030:	6060      	str	r0, [r4, #4]
    6032:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    6036:	f88d 0000 	strb.w	r0, [sp]
    603a:	f89d 0000 	ldrb.w	r0, [sp]
    603e:	b178      	cbz	r0, 6060 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    6040:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6044:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    6048:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    604c:	6840      	ldr	r0, [r0, #4]
    604e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    6052:	680a      	ldr	r2, [r1, #0]
    6054:	b001      	add	sp, #4
    6056:	2106      	movs	r1, #6
    6058:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    605c:	4710      	bx	r2
    605e:	e05a      	b.n	6116 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    6060:	f640 0148 	movw	r1, #2120	; 0x848
    6064:	2070      	movs	r0, #112	; 0x70
    6066:	f002 fa3f 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    606a:	f7ff fc8d 	bl	5988 <MPSL_IRQ_RADIO_Handler+0xbb4>
    606e:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    6072:	f002 f9c1 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6076:	b130      	cbz	r0, 6086 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    6078:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    607c:	43c9      	mvns	r1, r1
    607e:	ea71 0000 	orns	r0, r1, r0
    6082:	d005      	beq.n	6090 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    6084:	e00a      	b.n	609c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    6086:	f640 0156 	movw	r1, #2134	; 0x856
    608a:	2070      	movs	r0, #112	; 0x70
    608c:	f002 fa2c 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6090:	f002 f8ac 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    6094:	f001 fc78 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6098:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    609c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    60a0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    60a4:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    60a8:	6840      	ldr	r0, [r0, #4]
    60aa:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    60ae:	680a      	ldr	r2, [r1, #0]
    60b0:	b001      	add	sp, #4
    60b2:	2100      	movs	r1, #0
    60b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    60b8:	4710      	bx	r2
    60ba:	f001 fe7f 	bl	7dbc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    60be:	8ae0      	ldrh	r0, [r4, #22]
    60c0:	b110      	cbz	r0, 60c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    60c2:	f002 f999 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    60c6:	b130      	cbz	r0, 60d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    60c8:	f001 fe8c 	bl	7de4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    60cc:	2800      	cmp	r0, #0
    60ce:	bf18      	it	ne
    60d0:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    60d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60d6:	f44f 6106 	mov.w	r1, #2144	; 0x860
    60da:	2070      	movs	r0, #112	; 0x70
    60dc:	f002 fa04 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    60e0:	4811      	ldr	r0, [pc, #68]	; (6128 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    60e2:	6007      	str	r7, [r0, #0]
    60e4:	6898      	ldr	r0, [r3, #8]
    60e6:	6007      	str	r7, [r0, #0]
    60e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60ea:	7818      	ldrb	r0, [r3, #0]
    60ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    60f0:	f002 bacc 	b.w	868c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    60f4:	f7ff fc48 	bl	5988 <MPSL_IRQ_RADIO_Handler+0xbb4>
    60f8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    60fc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    6100:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    6104:	6840      	ldr	r0, [r0, #4]
    6106:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    610a:	680a      	ldr	r2, [r1, #0]
    610c:	b001      	add	sp, #4
    610e:	2105      	movs	r1, #5
    6110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6114:	4710      	bx	r2
    6116:	f640 0173 	movw	r1, #2163	; 0x873
    611a:	2070      	movs	r0, #112	; 0x70
    611c:	f002 f9e4 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6120:	20000688 	.word	0x20000688
    6124:	20000120 	.word	0x20000120
    6128:	40000508 	.word	0x40000508

0000612c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    612c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6130:	48f7      	ldr	r0, [pc, #988]	; (6510 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    6132:	b097      	sub	sp, #92	; 0x5c
    6134:	460c      	mov	r4, r1
    6136:	6800      	ldr	r0, [r0, #0]
    6138:	4ff6      	ldr	r7, [pc, #984]	; (6514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    613a:	05c0      	lsls	r0, r0, #23
    613c:	0dc0      	lsrs	r0, r0, #23
    613e:	d00e      	beq.n	615e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    6140:	3810      	subs	r0, #16
    6142:	b240      	sxtb	r0, r0
    6144:	2800      	cmp	r0, #0
    6146:	bfb8      	it	lt
    6148:	f000 000f 	andlt.w	r0, r0, #15
    614c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    6150:	bfac      	ite	ge
    6152:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    6156:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    615a:	0940      	lsrs	r0, r0, #5
    615c:	d00c      	beq.n	6178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    615e:	7820      	ldrb	r0, [r4, #0]
    6160:	f04f 0a00 	mov.w	sl, #0
    6164:	2800      	cmp	r0, #0
    6166:	bf18      	it	ne
    6168:	2801      	cmpne	r0, #1
    616a:	d017      	beq.n	619c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    616c:	f240 61f9 	movw	r1, #1785	; 0x6f9
    6170:	f04f 0070 	mov.w	r0, #112	; 0x70
    6174:	f002 f9b8 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6178:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    617c:	f04f 0a01 	mov.w	sl, #1
    6180:	2820      	cmp	r0, #32
    6182:	d006      	beq.n	6192 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    6184:	7820      	ldrb	r0, [r4, #0]
    6186:	b148      	cbz	r0, 619c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    6188:	f240 61f5 	movw	r1, #1781	; 0x6f5
    618c:	2070      	movs	r0, #112	; 0x70
    618e:	f002 f9ab 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6192:	f240 61f2 	movw	r1, #1778	; 0x6f2
    6196:	2070      	movs	r0, #112	; 0x70
    6198:	f002 f9a6 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    619c:	f8df b378 	ldr.w	fp, [pc, #888]	; 6518 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    61a0:	f1bb 0f00 	cmp.w	fp, #0
    61a4:	d004      	beq.n	61b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    61a6:	2100      	movs	r1, #0
    61a8:	f240 60fc 	movw	r0, #1788	; 0x6fc
    61ac:	f3af 8000 	nop.w
    61b0:	2000      	movs	r0, #0
    61b2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    61b6:	a905      	add	r1, sp, #20
    61b8:	9112      	str	r1, [sp, #72]	; 0x48
    61ba:	49d8      	ldr	r1, [pc, #864]	; (651c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    61bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    61be:	f04f 0801 	mov.w	r8, #1
    61c2:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    61c6:	9001      	str	r0, [sp, #4]
    61c8:	f1bb 0f00 	cmp.w	fp, #0
    61cc:	d004      	beq.n	61d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    61ce:	2100      	movs	r1, #0
    61d0:	f240 7007 	movw	r0, #1799	; 0x707
    61d4:	f3af 8000 	nop.w
    61d8:	f1b8 0f00 	cmp.w	r8, #0
    61dc:	d009      	beq.n	61f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    61de:	bf00      	nop
    61e0:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    61e4:	2500      	movs	r5, #0
    61e6:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    61ea:	f1ba 0f00 	cmp.w	sl, #0
    61ee:	d007      	beq.n	6200 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    61f0:	e03e      	b.n	6270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    61f2:	48cb      	ldr	r0, [pc, #812]	; (6520 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    61f4:	2800      	cmp	r0, #0
    61f6:	bf18      	it	ne
    61f8:	f3af 8000 	nopne.w
    61fc:	b662      	cpsie	i
    61fe:	e7ef      	b.n	61e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    6200:	46b1      	mov	r9, r6
    6202:	2001      	movs	r0, #1
    6204:	ea20 0609 	bic.w	r6, r0, r9
    6208:	48c6      	ldr	r0, [pc, #792]	; (6524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    620a:	2240      	movs	r2, #64	; 0x40
    620c:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    6210:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    6214:	f004 fb8a 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6218:	f1bb 0f00 	cmp.w	fp, #0
    621c:	d004      	beq.n	6228 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    621e:	2100      	movs	r1, #0
    6220:	f240 503c 	movw	r0, #1340	; 0x53c
    6224:	f3af 8000 	nop.w
    6228:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    622c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    6230:	4439      	add	r1, r7
    6232:	4438      	add	r0, r7
    6234:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    6236:	8502      	strh	r2, [r0, #40]	; 0x28
    6238:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    623c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    6240:	f1bb 0f00 	cmp.w	fp, #0
    6244:	d004      	beq.n	6250 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    6246:	2100      	movs	r1, #0
    6248:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    624c:	f3af 8000 	nop.w
    6250:	f1bb 0f00 	cmp.w	fp, #0
    6254:	d004      	beq.n	6260 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    6256:	2100      	movs	r1, #0
    6258:	f240 7011 	movw	r0, #1809	; 0x711
    625c:	f3af 8000 	nop.w
    6260:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    6264:	f88d 0020 	strb.w	r0, [sp, #32]
    6268:	f89d 0020 	ldrb.w	r0, [sp, #32]
    626c:	2800      	cmp	r0, #0
    626e:	d1ab      	bne.n	61c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    6270:	f1bb 0f00 	cmp.w	fp, #0
    6274:	d004      	beq.n	6280 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    6276:	2100      	movs	r1, #0
    6278:	f240 701b 	movw	r0, #1819	; 0x71b
    627c:	f3af 8000 	nop.w
    6280:	f001 fb82 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6284:	4681      	mov	r9, r0
    6286:	a802      	add	r0, sp, #8
    6288:	900a      	str	r0, [sp, #40]	; 0x28
    628a:	4688      	mov	r8, r1
    628c:	8921      	ldrh	r1, [r4, #8]
    628e:	4628      	mov	r0, r5
    6290:	f361 401f 	bfi	r0, r1, #16, #16
    6294:	4601      	mov	r1, r0
    6296:	7aa2      	ldrb	r2, [r4, #10]
    6298:	4628      	mov	r0, r5
    629a:	f362 0007 	bfi	r0, r2, #0, #8
    629e:	7ae2      	ldrb	r2, [r4, #11]
    62a0:	f362 200f 	bfi	r0, r2, #8, #8
    62a4:	7822      	ldrb	r2, [r4, #0]
    62a6:	9502      	str	r5, [sp, #8]
    62a8:	f362 4017 	bfi	r0, r2, #16, #8
    62ac:	e9cd 5104 	strd	r5, r1, [sp, #16]
    62b0:	e9cd 0506 	strd	r0, r5, [sp, #24]
    62b4:	9503      	str	r5, [sp, #12]
    62b6:	7820      	ldrb	r0, [r4, #0]
    62b8:	b380      	cbz	r0, 631c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    62ba:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    62be:	499a      	ldr	r1, [pc, #616]	; (6528 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    62c0:	1a08      	subs	r0, r1, r0
    62c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    62c4:	f101 020c 	add.w	r2, r1, #12
    62c8:	a914      	add	r1, sp, #80	; 0x50
    62ca:	f001 f87d 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    62ce:	2200      	movs	r2, #0
    62d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62d4:	4648      	mov	r0, r9
    62d6:	4641      	mov	r1, r8
    62d8:	f7fe ff6e 	bl	51b8 <MPSL_IRQ_RADIO_Handler+0x3e4>
    62dc:	468c      	mov	ip, r1
    62de:	7ae1      	ldrb	r1, [r4, #11]
    62e0:	2900      	cmp	r1, #0
    62e2:	bf0c      	ite	eq
    62e4:	217a      	moveq	r1, #122	; 0x7a
    62e6:	214a      	movne	r1, #74	; 0x4a
    62e8:	6862      	ldr	r2, [r4, #4]
    62ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
    62ee:	4411      	add	r1, r2
    62f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    62f4:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    62f8:	441a      	add	r2, r3
    62fa:	4411      	add	r1, r2
    62fc:	1c88      	adds	r0, r1, #2
    62fe:	f001 f847 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6302:	9600      	str	r6, [sp, #0]
    6304:	9004      	str	r0, [sp, #16]
    6306:	464a      	mov	r2, r9
    6308:	4643      	mov	r3, r8
    630a:	6920      	ldr	r0, [r4, #16]
    630c:	990a      	ldr	r1, [sp, #40]	; 0x28
    630e:	f7fe fdbb 	bl	4e88 <MPSL_IRQ_RADIO_Handler+0xb4>
    6312:	2800      	cmp	r0, #0
    6314:	bf08      	it	eq
    6316:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    631a:	e046      	b.n	63aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    631c:	e7ff      	b.n	631e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    631e:	4648      	mov	r0, r9
    6320:	4641      	mov	r1, r8
    6322:	f000 ffd3 	bl	72cc <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6326:	f8df c204 	ldr.w	ip, [pc, #516]	; 652c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    632a:	4602      	mov	r2, r0
    632c:	eb10 0c0c 	adds.w	ip, r0, ip
    6330:	460b      	mov	r3, r1
    6332:	f141 0e00 	adc.w	lr, r1, #0
    6336:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    633a:	ebb0 0c0c 	subs.w	ip, r0, ip
    633e:	eb71 0c0e 	sbcs.w	ip, r1, lr
    6342:	d229      	bcs.n	6398 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    6344:	3229      	adds	r2, #41	; 0x29
    6346:	f143 0300 	adc.w	r3, r3, #0
    634a:	1a82      	subs	r2, r0, r2
    634c:	eb71 0203 	sbcs.w	r2, r1, r3
    6350:	d322      	bcc.n	6398 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    6352:	8922      	ldrh	r2, [r4, #8]
    6354:	ab0a      	add	r3, sp, #40	; 0x28
    6356:	1a80      	subs	r0, r0, r2
    6358:	eb61 0105 	sbc.w	r1, r1, r5
    635c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    635e:	1e40      	subs	r0, r0, #1
    6360:	9200      	str	r2, [sp, #0]
    6362:	f141 31ff 	adc.w	r1, r1, #4294967295
    6366:	aa0d      	add	r2, sp, #52	; 0x34
    6368:	f000 ffd4 	bl	7314 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    636c:	7ae0      	ldrb	r0, [r4, #11]
    636e:	2800      	cmp	r0, #0
    6370:	bf0c      	ite	eq
    6372:	207a      	moveq	r0, #122	; 0x7a
    6374:	204a      	movne	r0, #74	; 0x4a
    6376:	990d      	ldr	r1, [sp, #52]	; 0x34
    6378:	8922      	ldrh	r2, [r4, #8]
    637a:	4408      	add	r0, r1
    637c:	6861      	ldr	r1, [r4, #4]
    637e:	4411      	add	r1, r2
    6380:	4408      	add	r0, r1
    6382:	1c80      	adds	r0, r0, #2
    6384:	f001 f804 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6388:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    638c:	e9cd 1202 	strd	r1, r2, [sp, #8]
    6390:	1a40      	subs	r0, r0, r1
    6392:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6396:	e007      	b.n	63a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    6398:	f1b9 0101 	subs.w	r1, r9, #1
    639c:	f148 30ff 	adc.w	r0, r8, #4294967295
    63a0:	e9cd 1002 	strd	r1, r0, [sp, #8]
    63a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    63a8:	9004      	str	r0, [sp, #16]
    63aa:	f1bb 0f00 	cmp.w	fp, #0
    63ae:	d004      	beq.n	63ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    63b0:	2100      	movs	r1, #0
    63b2:	f240 7022 	movw	r0, #1826	; 0x722
    63b6:	f3af 8000 	nop.w
    63ba:	495a      	ldr	r1, [pc, #360]	; (6524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    63bc:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    63c0:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    63c4:	9108      	str	r1, [sp, #32]
    63c6:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    63ca:	a802      	add	r0, sp, #8
    63cc:	2901      	cmp	r1, #1
    63ce:	bf18      	it	ne
    63d0:	2902      	cmpne	r1, #2
    63d2:	d141      	bne.n	6458 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    63d4:	9511      	str	r5, [sp, #68]	; 0x44
    63d6:	9a02      	ldr	r2, [sp, #8]
    63d8:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    63dc:	1a53      	subs	r3, r2, r1
    63de:	f8dd c010 	ldr.w	ip, [sp, #16]
    63e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    63e6:	eb12 020c 	adds.w	r2, r2, ip
    63ea:	1a51      	subs	r1, r2, r1
    63ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    63f0:	2b02      	cmp	r3, #2
    63f2:	d374      	bcc.n	64de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    63f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    63f8:	bf98      	it	ls
    63fa:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    63fe:	d86e      	bhi.n	64de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    6400:	2501      	movs	r5, #1
    6402:	ab14      	add	r3, sp, #80	; 0x50
    6404:	aa0e      	add	r2, sp, #56	; 0x38
    6406:	4631      	mov	r1, r6
    6408:	f7fe ff26 	bl	5258 <MPSL_IRQ_RADIO_Handler+0x484>
    640c:	2800      	cmp	r0, #0
    640e:	d06d      	beq.n	64ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    6410:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6414:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    6418:	4633      	mov	r3, r6
    641a:	428a      	cmp	r2, r1
    641c:	d06a      	beq.n	64f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    641e:	2005      	movs	r0, #5
    6420:	f7fe fcf6 	bl	4e10 <MPSL_IRQ_RADIO_Handler+0x3c>
    6424:	9908      	ldr	r1, [sp, #32]
    6426:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    642a:	7048      	strb	r0, [r1, #1]
    642c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    6430:	2820      	cmp	r0, #32
    6432:	bf01      	itttt	eq
    6434:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    6438:	4438      	addeq	r0, r7
    643a:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    643e:	9511      	streq	r5, [sp, #68]	; 0x44
    6440:	bf1e      	ittt	ne
    6442:	9908      	ldrne	r1, [sp, #32]
    6444:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    6448:	f880 8001 	strbne.w	r8, [r0, #1]
    644c:	4632      	mov	r2, r6
    644e:	4641      	mov	r1, r8
    6450:	f05f 0003 	movs.w	r0, #3
    6454:	f7ff fb44 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6458:	f1bb 0f00 	cmp.w	fp, #0
    645c:	d004      	beq.n	6468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    645e:	2100      	movs	r1, #0
    6460:	f240 7027 	movw	r0, #1831	; 0x727
    6464:	f3af 8000 	nop.w
    6468:	4831      	ldr	r0, [pc, #196]	; (6530 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    646a:	2800      	cmp	r0, #0
    646c:	bf18      	it	ne
    646e:	f3af 8000 	nopne.w
    6472:	f3ef 8810 	mrs	r8, PRIMASK
    6476:	b672      	cpsid	i
    6478:	f1bb 0f00 	cmp.w	fp, #0
    647c:	d004      	beq.n	6488 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    647e:	2100      	movs	r1, #0
    6480:	f240 702d 	movw	r0, #1837	; 0x72d
    6484:	f3af 8000 	nop.w
    6488:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    648c:	f88d 0020 	strb.w	r0, [sp, #32]
    6490:	f89d 0020 	ldrb.w	r0, [sp, #32]
    6494:	2800      	cmp	r0, #0
    6496:	f47f ae97 	bne.w	61c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    649a:	f1bb 0f00 	cmp.w	fp, #0
    649e:	d004      	beq.n	64aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    64a0:	2100      	movs	r1, #0
    64a2:	f240 7035 	movw	r0, #1845	; 0x735
    64a6:	f3af 8000 	nop.w
    64aa:	f10d 0e04 	add.w	lr, sp, #4
    64ae:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    64b2:	f100 0e08 	add.w	lr, r0, #8
    64b6:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    64ba:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    64be:	e9c0 1206 	strd	r1, r2, [r0, #24]
    64c2:	b325      	cbz	r5, 650e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    64c4:	f1bb 0f00 	cmp.w	fp, #0
    64c8:	d004      	beq.n	64d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    64ca:	2100      	movs	r1, #0
    64cc:	f240 7042 	movw	r0, #1858	; 0x742
    64d0:	f3af 8000 	nop.w
    64d4:	f1ba 0f00 	cmp.w	sl, #0
    64d8:	d146      	bne.n	6568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    64da:	e02b      	b.n	6534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    64dc:	e7ff      	b.n	64de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    64de:	4632      	mov	r2, r6
    64e0:	4641      	mov	r1, r8
    64e2:	2004      	movs	r0, #4
    64e4:	f7ff fafc 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    64e8:	2501      	movs	r5, #1
    64ea:	e7b5      	b.n	6458 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    64ec:	4632      	mov	r2, r6
    64ee:	4641      	mov	r1, r8
    64f0:	2004      	movs	r0, #4
    64f2:	e7af      	b.n	6454 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    64f4:	2920      	cmp	r1, #32
    64f6:	bf1d      	ittte	ne
    64f8:	9808      	ldrne	r0, [sp, #32]
    64fa:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    64fe:	7840      	ldrbne	r0, [r0, #1]
    6500:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    6504:	bf04      	itt	eq
    6506:	4438      	addeq	r0, r7
    6508:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    650c:	e78a      	b.n	6424 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    650e:	e03b      	b.n	6588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    6510:	e000ed04 	.word	0xe000ed04
    6514:	20000b08 	.word	0x20000b08
    6518:	00000000 	.word	0x00000000
    651c:	20000688 	.word	0x20000688
    6520:	00000000 	.word	0x00000000
    6524:	20000a88 	.word	0x20000a88
    6528:	1e847fff 	.word	0x1e847fff
    652c:	0f424000 	.word	0x0f424000
    6530:	00000000 	.word	0x00000000
    6534:	9811      	ldr	r0, [sp, #68]	; 0x44
    6536:	f010 0fff 	tst.w	r0, #255	; 0xff
    653a:	d015      	beq.n	6568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    653c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    6540:	2820      	cmp	r0, #32
    6542:	d111      	bne.n	6568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    6544:	f1bb 0f00 	cmp.w	fp, #0
    6548:	d004      	beq.n	6554 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    654a:	2100      	movs	r1, #0
    654c:	f240 7047 	movw	r0, #1863	; 0x747
    6550:	f3af 8000 	nop.w
    6554:	4631      	mov	r1, r6
    6556:	2002      	movs	r0, #2
    6558:	f7ff faf4 	bl	5b44 <MPSL_IRQ_RADIO_Handler+0xd70>
    655c:	9010      	str	r0, [sp, #64]	; 0x40
    655e:	b918      	cbnz	r0, 6568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    6560:	7820      	ldrb	r0, [r4, #0]
    6562:	b300      	cbz	r0, 65a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    6564:	2801      	cmp	r0, #1
    6566:	d02e      	beq.n	65c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    6568:	f1bb 0f00 	cmp.w	fp, #0
    656c:	d004      	beq.n	6578 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    656e:	2100      	movs	r1, #0
    6570:	f240 7064 	movw	r0, #1892	; 0x764
    6574:	f3af 8000 	nop.w
    6578:	20ff      	movs	r0, #255	; 0xff
    657a:	f1ba 0f00 	cmp.w	sl, #0
    657e:	bf18      	it	ne
    6580:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    6584:	d029      	beq.n	65da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    6586:	2501      	movs	r5, #1
    6588:	f1bb 0f00 	cmp.w	fp, #0
    658c:	d004      	beq.n	6598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    658e:	2100      	movs	r1, #0
    6590:	f240 7075 	movw	r0, #1909	; 0x775
    6594:	f3af 8000 	nop.w
    6598:	9810      	ldr	r0, [sp, #64]	; 0x40
    659a:	4c34      	ldr	r4, [pc, #208]	; (666c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    659c:	2802      	cmp	r0, #2
    659e:	d025      	beq.n	65ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    65a0:	2801      	cmp	r0, #1
    65a2:	d02b      	beq.n	65fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    65a4:	e02f      	b.n	6606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    65a6:	f1bb 0f00 	cmp.w	fp, #0
    65aa:	d004      	beq.n	65b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    65ac:	2100      	movs	r1, #0
    65ae:	f240 704f 	movw	r0, #1871	; 0x74f
    65b2:	f3af 8000 	nop.w
    65b6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    65ba:	2004      	movs	r0, #4
    65bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    65be:	f7ff fa8f 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    65c2:	2501      	movs	r5, #1
    65c4:	e7e0      	b.n	6588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    65c6:	f1bb 0f00 	cmp.w	fp, #0
    65ca:	f43f adfd 	beq.w	61c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    65ce:	2100      	movs	r1, #0
    65d0:	f240 705a 	movw	r0, #1882	; 0x75a
    65d4:	f3af 8000 	nop.w
    65d8:	e5f6      	b.n	61c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    65da:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    65de:	2101      	movs	r1, #1
    65e0:	4391      	bics	r1, r2
    65e2:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    65e6:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    65ea:	e7cc      	b.n	6586 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    65ec:	68b8      	ldr	r0, [r7, #8]
    65ee:	ebb0 0009 	subs.w	r0, r0, r9
    65f2:	f004 f80b 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    65f6:	6861      	ldr	r1, [r4, #4]
    65f8:	b921      	cbnz	r1, 6604 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    65fa:	e004      	b.n	6606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    65fc:	6861      	ldr	r1, [r4, #4]
    65fe:	f04f 30ff 	mov.w	r0, #4294967295
    6602:	b101      	cbz	r1, 6606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    6604:	4788      	blx	r1
    6606:	f1b8 0f00 	cmp.w	r8, #0
    660a:	d028      	beq.n	665e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    660c:	f1bb 0f00 	cmp.w	fp, #0
    6610:	d004      	beq.n	661c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    6612:	2100      	movs	r1, #0
    6614:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    6618:	f3af 8000 	nop.w
    661c:	b19d      	cbz	r5, 6646 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    661e:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    6622:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6626:	4438      	add	r0, r7
    6628:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    662c:	2820      	cmp	r0, #32
    662e:	d00a      	beq.n	6646 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    6630:	f1bb 0f00 	cmp.w	fp, #0
    6634:	d004      	beq.n	6640 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    6636:	2100      	movs	r1, #0
    6638:	f240 708f 	movw	r0, #1935	; 0x78f
    663c:	f3af 8000 	nop.w
    6640:	7860      	ldrb	r0, [r4, #1]
    6642:	f002 f823 	bl	868c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6646:	f1bb 0f00 	cmp.w	fp, #0
    664a:	d004      	beq.n	6656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    664c:	2100      	movs	r1, #0
    664e:	f240 7094 	movw	r0, #1940	; 0x794
    6652:	f3af 8000 	nop.w
    6656:	b019      	add	sp, #100	; 0x64
    6658:	4628      	mov	r0, r5
    665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    665e:	4804      	ldr	r0, [pc, #16]	; (6670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    6660:	2800      	cmp	r0, #0
    6662:	bf18      	it	ne
    6664:	f3af 8000 	nopne.w
    6668:	b662      	cpsie	i
    666a:	e7cf      	b.n	660c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    666c:	20000120 	.word	0x20000120
    6670:	00000000 	.word	0x00000000

00006674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    6674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6678:	4604      	mov	r4, r0
    667a:	7800      	ldrb	r0, [r0, #0]
    667c:	b095      	sub	sp, #84	; 0x54
    667e:	b118      	cbz	r0, 6688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    6680:	b015      	add	sp, #84	; 0x54
    6682:	2000      	movs	r0, #0
    6684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6688:	48d1      	ldr	r0, [pc, #836]	; (69d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    668a:	6800      	ldr	r0, [r0, #0]
    668c:	05c0      	lsls	r0, r0, #23
    668e:	0dc0      	lsrs	r0, r0, #23
    6690:	d00e      	beq.n	66b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    6692:	3810      	subs	r0, #16
    6694:	b240      	sxtb	r0, r0
    6696:	2800      	cmp	r0, #0
    6698:	bfb8      	it	lt
    669a:	f000 000f 	andlt.w	r0, r0, #15
    669e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    66a2:	bfac      	ite	ge
    66a4:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    66a8:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    66ac:	0940      	lsrs	r0, r0, #5
    66ae:	d0e7      	beq.n	6680 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    66b0:	a80d      	add	r0, sp, #52	; 0x34
    66b2:	f8df 9320 	ldr.w	r9, [pc, #800]	; 69d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    66b6:	9009      	str	r0, [sp, #36]	; 0x24
    66b8:	f1b9 0f00 	cmp.w	r9, #0
    66bc:	d004      	beq.n	66c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    66be:	2100      	movs	r1, #0
    66c0:	f240 50c5 	movw	r0, #1477	; 0x5c5
    66c4:	f3af 8000 	nop.w
    66c8:	f8df 830c 	ldr.w	r8, [pc, #780]	; 69d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    66cc:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    66d0:	2500      	movs	r5, #0
    66d2:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    66d6:	9503      	str	r5, [sp, #12]
    66d8:	f1b9 0f00 	cmp.w	r9, #0
    66dc:	d004      	beq.n	66e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    66de:	2100      	movs	r1, #0
    66e0:	f240 50ca 	movw	r0, #1482	; 0x5ca
    66e4:	f3af 8000 	nop.w
    66e8:	2001      	movs	r0, #1
    66ea:	ea20 0a06 	bic.w	sl, r0, r6
    66ee:	48bb      	ldr	r0, [pc, #748]	; (69dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    66f0:	2240      	movs	r2, #64	; 0x40
    66f2:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    66f6:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    66fa:	f004 f917 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    66fe:	f1b9 0f00 	cmp.w	r9, #0
    6702:	d004      	beq.n	670e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    6704:	2100      	movs	r1, #0
    6706:	f240 503c 	movw	r0, #1340	; 0x53c
    670a:	f3af 8000 	nop.w
    670e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6712:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    6716:	eb01 0208 	add.w	r2, r1, r8
    671a:	4440      	add	r0, r8
    671c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    671e:	8501      	strh	r1, [r0, #40]	; 0x28
    6720:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    6724:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    6728:	f1b9 0f00 	cmp.w	r9, #0
    672c:	d004      	beq.n	6738 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    672e:	2100      	movs	r1, #0
    6730:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6734:	f3af 8000 	nop.w
    6738:	f1b9 0f00 	cmp.w	r9, #0
    673c:	d004      	beq.n	6748 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    673e:	2100      	movs	r1, #0
    6740:	f240 50cf 	movw	r0, #1487	; 0x5cf
    6744:	f3af 8000 	nop.w
    6748:	f001 f91e 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    674c:	460f      	mov	r7, r1
    674e:	4606      	mov	r6, r0
    6750:	8921      	ldrh	r1, [r4, #8]
    6752:	4628      	mov	r0, r5
    6754:	f361 401f 	bfi	r0, r1, #16, #16
    6758:	4601      	mov	r1, r0
    675a:	7aa2      	ldrb	r2, [r4, #10]
    675c:	4628      	mov	r0, r5
    675e:	f362 0007 	bfi	r0, r2, #0, #8
    6762:	7ae2      	ldrb	r2, [r4, #11]
    6764:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    6768:	f362 200f 	bfi	r0, r2, #8, #8
    676c:	7822      	ldrb	r2, [r4, #0]
    676e:	950a      	str	r5, [sp, #40]	; 0x28
    6770:	f362 4017 	bfi	r0, r2, #16, #8
    6774:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    6778:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    677c:	950b      	str	r5, [sp, #44]	; 0x2c
    677e:	7820      	ldrb	r0, [r4, #0]
    6780:	b388      	cbz	r0, 67e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    6782:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    6786:	4896      	ldr	r0, [pc, #600]	; (69e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    6788:	f10b 020c 	add.w	r2, fp, #12
    678c:	1a40      	subs	r0, r0, r1
    678e:	a911      	add	r1, sp, #68	; 0x44
    6790:	f000 fe1a 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6794:	2200      	movs	r2, #0
    6796:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    679a:	4630      	mov	r0, r6
    679c:	4639      	mov	r1, r7
    679e:	f7fe fd0b 	bl	51b8 <MPSL_IRQ_RADIO_Handler+0x3e4>
    67a2:	4684      	mov	ip, r0
    67a4:	7ae0      	ldrb	r0, [r4, #11]
    67a6:	460b      	mov	r3, r1
    67a8:	2800      	cmp	r0, #0
    67aa:	bf0c      	ite	eq
    67ac:	207a      	moveq	r0, #122	; 0x7a
    67ae:	204a      	movne	r0, #74	; 0x4a
    67b0:	6861      	ldr	r1, [r4, #4]
    67b2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    67b6:	4408      	add	r0, r1
    67b8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    67bc:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    67c0:	4411      	add	r1, r2
    67c2:	4408      	add	r0, r1
    67c4:	1c80      	adds	r0, r0, #2
    67c6:	f000 fde3 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    67ca:	f8cd a000 	str.w	sl, [sp]
    67ce:	900c      	str	r0, [sp, #48]	; 0x30
    67d0:	4632      	mov	r2, r6
    67d2:	463b      	mov	r3, r7
    67d4:	4659      	mov	r1, fp
    67d6:	6920      	ldr	r0, [r4, #16]
    67d8:	f7fe fb56 	bl	4e88 <MPSL_IRQ_RADIO_Handler+0xb4>
    67dc:	2800      	cmp	r0, #0
    67de:	bf08      	it	eq
    67e0:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    67e4:	e045      	b.n	6872 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    67e6:	e7ff      	b.n	67e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    67e8:	4630      	mov	r0, r6
    67ea:	4639      	mov	r1, r7
    67ec:	f000 fd6e 	bl	72cc <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    67f0:	4b7c      	ldr	r3, [pc, #496]	; (69e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    67f2:	4602      	mov	r2, r0
    67f4:	eb10 0c03 	adds.w	ip, r0, r3
    67f8:	468b      	mov	fp, r1
    67fa:	f141 0300 	adc.w	r3, r1, #0
    67fe:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6802:	ebb0 0c0c 	subs.w	ip, r0, ip
    6806:	eb71 0303 	sbcs.w	r3, r1, r3
    680a:	d22a      	bcs.n	6862 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    680c:	3229      	adds	r2, #41	; 0x29
    680e:	f14b 0300 	adc.w	r3, fp, #0
    6812:	1a82      	subs	r2, r0, r2
    6814:	eb71 0203 	sbcs.w	r2, r1, r3
    6818:	d323      	bcc.n	6862 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    681a:	8922      	ldrh	r2, [r4, #8]
    681c:	ab12      	add	r3, sp, #72	; 0x48
    681e:	1a80      	subs	r0, r0, r2
    6820:	eb61 0105 	sbc.w	r1, r1, r5
    6824:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6826:	1e40      	subs	r0, r0, #1
    6828:	9200      	str	r2, [sp, #0]
    682a:	f141 31ff 	adc.w	r1, r1, #4294967295
    682e:	aa07      	add	r2, sp, #28
    6830:	f000 fd70 	bl	7314 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    6834:	7ae0      	ldrb	r0, [r4, #11]
    6836:	2800      	cmp	r0, #0
    6838:	bf0c      	ite	eq
    683a:	207a      	moveq	r0, #122	; 0x7a
    683c:	204a      	movne	r0, #74	; 0x4a
    683e:	9907      	ldr	r1, [sp, #28]
    6840:	8922      	ldrh	r2, [r4, #8]
    6842:	4408      	add	r0, r1
    6844:	6861      	ldr	r1, [r4, #4]
    6846:	4411      	add	r1, r2
    6848:	4408      	add	r0, r1
    684a:	1c80      	adds	r0, r0, #2
    684c:	f000 fda0 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6850:	4601      	mov	r1, r0
    6852:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    6856:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    685a:	1a08      	subs	r0, r1, r0
    685c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6860:	e006      	b.n	6870 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    6862:	1e70      	subs	r0, r6, #1
    6864:	f147 31ff 	adc.w	r1, r7, #4294967295
    6868:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    686c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6870:	900c      	str	r0, [sp, #48]	; 0x30
    6872:	f1b9 0f00 	cmp.w	r9, #0
    6876:	d004      	beq.n	6882 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    6878:	2100      	movs	r1, #0
    687a:	f240 50d5 	movw	r0, #1493	; 0x5d5
    687e:	f3af 8000 	nop.w
    6882:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    6886:	f8d8 1008 	ldr.w	r1, [r8, #8]
    688a:	1808      	adds	r0, r1, r0
    688c:	eb42 0105 	adc.w	r1, r2, r5
    6890:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    6894:	2a20      	cmp	r2, #32
    6896:	d009      	beq.n	68ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    6898:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    689c:	1a12      	subs	r2, r2, r0
    689e:	eb73 0201 	sbcs.w	r2, r3, r1
    68a2:	d203      	bcs.n	68ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    68a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    68a8:	2001      	movs	r0, #1
    68aa:	9003      	str	r0, [sp, #12]
    68ac:	f1b9 0f00 	cmp.w	r9, #0
    68b0:	d004      	beq.n	68bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    68b2:	2100      	movs	r1, #0
    68b4:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    68b8:	f3af 8000 	nop.w
    68bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    68be:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    68c2:	1a0a      	subs	r2, r1, r0
    68c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    68c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    68ca:	18c9      	adds	r1, r1, r3
    68cc:	1a08      	subs	r0, r1, r0
    68ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    68d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    68d6:	bf98      	it	ls
    68d8:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    68dc:	d80b      	bhi.n	68f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    68de:	4632      	mov	r2, r6
    68e0:	463b      	mov	r3, r7
    68e2:	a90a      	add	r1, sp, #40	; 0x28
    68e4:	483f      	ldr	r0, [pc, #252]	; (69e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    68e6:	f8cd a000 	str.w	sl, [sp]
    68ea:	f7fe facd 	bl	4e88 <MPSL_IRQ_RADIO_Handler+0xb4>
    68ee:	9903      	ldr	r1, [sp, #12]
    68f0:	4308      	orrs	r0, r1
    68f2:	d145      	bne.n	6980 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    68f4:	e05f      	b.n	69b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    68f6:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    68fa:	aa05      	add	r2, sp, #20
    68fc:	a903      	add	r1, sp, #12
    68fe:	4658      	mov	r0, fp
    6900:	f000 fd62 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6904:	f001 fa78 	bl	7df8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    6908:	f000 fd42 	bl	7390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    690c:	4682      	mov	sl, r0
    690e:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    6912:	2820      	cmp	r0, #32
    6914:	d00a      	beq.n	692c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    6916:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    691a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    691e:	1d80      	adds	r0, r0, #6
    6920:	f145 0100 	adc.w	r1, r5, #0
    6924:	181e      	adds	r6, r3, r0
    6926:	eb42 0701 	adc.w	r7, r2, r1
    692a:	e024      	b.n	6976 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    692c:	360a      	adds	r6, #10
    692e:	f147 0700 	adc.w	r7, r7, #0
    6932:	f1bb 0f00 	cmp.w	fp, #0
    6936:	d017      	beq.n	6968 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    6938:	f001 fd5e 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    693c:	b9a0      	cbnz	r0, 6968 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    693e:	f001 fc33 	bl	81a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6942:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    6946:	bf08      	it	eq
    6948:	200d      	moveq	r0, #13
    694a:	d00b      	beq.n	6964 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    694c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6950:	3856      	subs	r0, #86	; 0x56
    6952:	bf08      	it	eq
    6954:	201c      	moveq	r0, #28
    6956:	d005      	beq.n	6964 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    6958:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    695c:	389f      	subs	r0, #159	; 0x9f
    695e:	bf14      	ite	ne
    6960:	4628      	movne	r0, r5
    6962:	2032      	moveq	r0, #50	; 0x32
    6964:	1986      	adds	r6, r0, r6
    6966:	416f      	adcs	r7, r5
    6968:	9803      	ldr	r0, [sp, #12]
    696a:	4582      	cmp	sl, r0
    696c:	d903      	bls.n	6976 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    696e:	ebaa 0000 	sub.w	r0, sl, r0
    6972:	1986      	adds	r6, r0, r6
    6974:	416f      	adcs	r7, r5
    6976:	201f      	movs	r0, #31
    6978:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    697c:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    6980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6984:	f000 fca2 	bl	72cc <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6988:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    698c:	1880      	adds	r0, r0, r2
    698e:	eb41 0205 	adc.w	r2, r1, r5
    6992:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    6996:	1840      	adds	r0, r0, r1
    6998:	eb42 0105 	adc.w	r1, r2, r5
    699c:	1c40      	adds	r0, r0, #1
    699e:	f141 0100 	adc.w	r1, r1, #0
    69a2:	f1b9 0f00 	cmp.w	r9, #0
    69a6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    69aa:	d004      	beq.n	69b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    69ac:	2100      	movs	r1, #0
    69ae:	f240 50fa 	movw	r0, #1530	; 0x5fa
    69b2:	f3af 8000 	nop.w
    69b6:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    69ba:	f88d 0000 	strb.w	r0, [sp]
    69be:	f89d 0000 	ldrb.w	r0, [sp]
    69c2:	2800      	cmp	r0, #0
    69c4:	f47f ae78 	bne.w	66b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    69c8:	b015      	add	sp, #84	; 0x54
    69ca:	2001      	movs	r0, #1
    69cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69d0:	e000ed04 	.word	0xe000ed04
    69d4:	00000000 	.word	0x00000000
    69d8:	20000b08 	.word	0x20000b08
    69dc:	20000a88 	.word	0x20000a88
    69e0:	1e847fff 	.word	0x1e847fff
    69e4:	0f424000 	.word	0x0f424000

000069e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    69e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69ec:	4d9d      	ldr	r5, [pc, #628]	; (6c64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    69ee:	b08c      	sub	sp, #48	; 0x30
    69f0:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    69f4:	2000      	movs	r0, #0
    69f6:	9007      	str	r0, [sp, #28]
    69f8:	9008      	str	r0, [sp, #32]
    69fa:	2001      	movs	r0, #1
    69fc:	4c9a      	ldr	r4, [pc, #616]	; (6c68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    69fe:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    6a02:	f04f 0800 	mov.w	r8, #0
    6a06:	4607      	mov	r7, r0
    6a08:	9006      	str	r0, [sp, #24]
    6a0a:	b124      	cbz	r4, 6a16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    6a0c:	2100      	movs	r1, #0
    6a0e:	f240 70a5 	movw	r0, #1957	; 0x7a5
    6a12:	f3af 8000 	nop.w
    6a16:	9806      	ldr	r0, [sp, #24]
    6a18:	2800      	cmp	r0, #0
    6a1a:	d03c      	beq.n	6a96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    6a1c:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    6a20:	b124      	cbz	r4, 6a2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    6a22:	2100      	movs	r1, #0
    6a24:	f240 70aa 	movw	r0, #1962	; 0x7aa
    6a28:	f3af 8000 	nop.w
    6a2c:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    6a30:	2240      	movs	r2, #64	; 0x40
    6a32:	ea27 060a 	bic.w	r6, r7, sl
    6a36:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    6a3a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    6a3e:	4683      	mov	fp, r0
    6a40:	f003 ff74 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a44:	b124      	cbz	r4, 6a50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    6a46:	2100      	movs	r1, #0
    6a48:	f240 503c 	movw	r0, #1340	; 0x53c
    6a4c:	f3af 8000 	nop.w
    6a50:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    6a54:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    6a58:	4428      	add	r0, r5
    6a5a:	4429      	add	r1, r5
    6a5c:	9000      	str	r0, [sp, #0]
    6a5e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    6a60:	8502      	strh	r2, [r0, #40]	; 0x28
    6a62:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    6a66:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    6a6a:	b124      	cbz	r4, 6a76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    6a6c:	2100      	movs	r1, #0
    6a6e:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6a72:	f3af 8000 	nop.w
    6a76:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    6a7a:	f88d 0008 	strb.w	r0, [sp, #8]
    6a7e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6a82:	b178      	cbz	r0, 6aa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    6a84:	2c00      	cmp	r4, #0
    6a86:	bf1c      	itt	ne
    6a88:	2100      	movne	r1, #0
    6a8a:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    6a8e:	d0bc      	beq.n	6a0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    6a90:	f3af 8000 	nop.w
    6a94:	e7b9      	b.n	6a0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    6a96:	4875      	ldr	r0, [pc, #468]	; (6c6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    6a98:	2800      	cmp	r0, #0
    6a9a:	bf18      	it	ne
    6a9c:	f3af 8000 	nopne.w
    6aa0:	b662      	cpsie	i
    6aa2:	e7bb      	b.n	6a1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    6aa4:	b124      	cbz	r4, 6ab0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    6aa6:	2100      	movs	r1, #0
    6aa8:	f240 70b4 	movw	r0, #1972	; 0x7b4
    6aac:	f3af 8000 	nop.w
    6ab0:	980c      	ldr	r0, [sp, #48]	; 0x30
    6ab2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    6ab6:	2803      	cmp	r0, #3
    6ab8:	d17e      	bne.n	6bb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    6aba:	9a00      	ldr	r2, [sp, #0]
    6abc:	990c      	ldr	r1, [sp, #48]	; 0x30
    6abe:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    6ac2:	4288      	cmp	r0, r1
    6ac4:	bf14      	ite	ne
    6ac6:	f04f 0a00 	movne.w	sl, #0
    6aca:	f04f 0a01 	moveq.w	sl, #1
    6ace:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    6ad2:	4683      	mov	fp, r0
    6ad4:	2220      	movs	r2, #32
    6ad6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    6ada:	e003      	b.n	6ae4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    6adc:	4602      	mov	r2, r0
    6ade:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    6ae2:	7840      	ldrb	r0, [r0, #1]
    6ae4:	4288      	cmp	r0, r1
    6ae6:	d002      	beq.n	6aee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    6ae8:	2820      	cmp	r0, #32
    6aea:	d00a      	beq.n	6b02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6aec:	e7f6      	b.n	6adc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    6aee:	2820      	cmp	r0, #32
    6af0:	d007      	beq.n	6b02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6af2:	4583      	cmp	fp, r0
    6af4:	d107      	bne.n	6b06 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    6af6:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    6afa:	7840      	ldrb	r0, [r0, #1]
    6afc:	f88c 0000 	strb.w	r0, [ip]
    6b00:	e007      	b.n	6b12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    6b02:	4640      	mov	r0, r8
    6b04:	e00c      	b.n	6b20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    6b06:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    6b0a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    6b0e:	7840      	ldrb	r0, [r0, #1]
    6b10:	7048      	strb	r0, [r1, #1]
    6b12:	b124      	cbz	r4, 6b1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    6b14:	2100      	movs	r1, #0
    6b16:	f240 40a4 	movw	r0, #1188	; 0x4a4
    6b1a:	f3af 8000 	nop.w
    6b1e:	4638      	mov	r0, r7
    6b20:	46c3      	mov	fp, r8
    6b22:	ea10 0f0a 	tst.w	r0, sl
    6b26:	bf18      	it	ne
    6b28:	46bb      	movne	fp, r7
    6b2a:	2800      	cmp	r0, #0
    6b2c:	d04e      	beq.n	6bcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    6b2e:	b124      	cbz	r4, 6b3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    6b30:	2100      	movs	r1, #0
    6b32:	f240 70b9 	movw	r0, #1977	; 0x7b9
    6b36:	f3af 8000 	nop.w
    6b3a:	4632      	mov	r2, r6
    6b3c:	2001      	movs	r0, #1
    6b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6b40:	f7fe ffce 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6b44:	b124      	cbz	r4, 6b50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    6b46:	2100      	movs	r1, #0
    6b48:	f240 70c2 	movw	r0, #1986	; 0x7c2
    6b4c:	f3af 8000 	nop.w
    6b50:	4847      	ldr	r0, [pc, #284]	; (6c70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    6b52:	2800      	cmp	r0, #0
    6b54:	bf18      	it	ne
    6b56:	f3af 8000 	nopne.w
    6b5a:	f3ef 8010 	mrs	r0, PRIMASK
    6b5e:	b672      	cpsid	i
    6b60:	9006      	str	r0, [sp, #24]
    6b62:	b124      	cbz	r4, 6b6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    6b64:	2100      	movs	r1, #0
    6b66:	f240 70c7 	movw	r0, #1991	; 0x7c7
    6b6a:	f3af 8000 	nop.w
    6b6e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    6b72:	f88d 0008 	strb.w	r0, [sp, #8]
    6b76:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6b7a:	b138      	cbz	r0, 6b8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    6b7c:	2c00      	cmp	r4, #0
    6b7e:	bf1c      	itt	ne
    6b80:	2100      	movne	r1, #0
    6b82:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    6b86:	f43f af40 	beq.w	6a0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    6b8a:	e781      	b.n	6a90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    6b8c:	f1bb 0f00 	cmp.w	fp, #0
    6b90:	d009      	beq.n	6ba6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    6b92:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    6b96:	2820      	cmp	r0, #32
    6b98:	d105      	bne.n	6ba6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    6b9a:	4631      	mov	r1, r6
    6b9c:	2002      	movs	r0, #2
    6b9e:	f7fe ffd1 	bl	5b44 <MPSL_IRQ_RADIO_Handler+0xd70>
    6ba2:	9008      	str	r0, [sp, #32]
    6ba4:	b1f8      	cbz	r0, 6be6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    6ba6:	b124      	cbz	r4, 6bb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    6ba8:	2100      	movs	r1, #0
    6baa:	f240 70df 	movw	r0, #2015	; 0x7df
    6bae:	f3af 8000 	nop.w
    6bb2:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    6bb6:	e000      	b.n	6bba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    6bb8:	e008      	b.n	6bcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    6bba:	ea27 0000 	bic.w	r0, r7, r0
    6bbe:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    6bc2:	20ff      	movs	r0, #255	; 0xff
    6bc4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    6bc8:	2001      	movs	r0, #1
    6bca:	9007      	str	r0, [sp, #28]
    6bcc:	b124      	cbz	r4, 6bd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    6bce:	2100      	movs	r1, #0
    6bd0:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    6bd4:	f3af 8000 	nop.w
    6bd8:	9808      	ldr	r0, [sp, #32]
    6bda:	4e26      	ldr	r6, [pc, #152]	; (6c74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    6bdc:	2802      	cmp	r0, #2
    6bde:	d009      	beq.n	6bf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    6be0:	2801      	cmp	r0, #1
    6be2:	d027      	beq.n	6c34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    6be4:	e02b      	b.n	6c3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6be6:	b354      	cbz	r4, 6c3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6be8:	2100      	movs	r1, #0
    6bea:	f240 70da 	movw	r0, #2010	; 0x7da
    6bee:	f3af 8000 	nop.w
    6bf2:	e7ec      	b.n	6bce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    6bf4:	f000 fec8 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6bf8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    6bfc:	ebb3 0c00 	subs.w	ip, r3, r0
    6c00:	eb72 0c01 	sbcs.w	ip, r2, r1
    6c04:	d204      	bcs.n	6c10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    6c06:	f240 71ee 	movw	r1, #2030	; 0x7ee
    6c0a:	2070      	movs	r0, #112	; 0x70
    6c0c:	f001 fc6c 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6c10:	1a18      	subs	r0, r3, r0
    6c12:	eb62 0101 	sbc.w	r1, r2, r1
    6c16:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    6c1a:	f171 0100 	sbcs.w	r1, r1, #0
    6c1e:	d304      	bcc.n	6c2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    6c20:	f240 71ef 	movw	r1, #2031	; 0x7ef
    6c24:	2070      	movs	r0, #112	; 0x70
    6c26:	f001 fc5f 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6c2a:	f003 fcef 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6c2e:	6871      	ldr	r1, [r6, #4]
    6c30:	b129      	cbz	r1, 6c3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6c32:	e003      	b.n	6c3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    6c34:	6871      	ldr	r1, [r6, #4]
    6c36:	f04f 30ff 	mov.w	r0, #4294967295
    6c3a:	b101      	cbz	r1, 6c3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6c3c:	4788      	blx	r1
    6c3e:	9806      	ldr	r0, [sp, #24]
    6c40:	b148      	cbz	r0, 6c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    6c42:	b124      	cbz	r4, 6c4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    6c44:	2100      	movs	r1, #0
    6c46:	f240 70ff 	movw	r0, #2047	; 0x7ff
    6c4a:	f3af 8000 	nop.w
    6c4e:	9807      	ldr	r0, [sp, #28]
    6c50:	b00d      	add	sp, #52	; 0x34
    6c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c56:	4805      	ldr	r0, [pc, #20]	; (6c6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    6c58:	2800      	cmp	r0, #0
    6c5a:	bf18      	it	ne
    6c5c:	f3af 8000 	nopne.w
    6c60:	b662      	cpsie	i
    6c62:	e7ee      	b.n	6c42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    6c64:	20000b08 	.word	0x20000b08
	...
    6c74:	20000120 	.word	0x20000120

00006c78 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    6c78:	b510      	push	{r4, lr}
    6c7a:	2820      	cmp	r0, #32
    6c7c:	d211      	bcs.n	6ca2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    6c7e:	490e      	ldr	r1, [pc, #56]	; (6cb8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    6c80:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    6c84:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    6c88:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    6c8c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    6c90:	b13b      	cbz	r3, 6ca2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    6c92:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    6c96:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    6c9a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    6c9e:	2a01      	cmp	r2, #1
    6ca0:	d001      	beq.n	6ca6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    6ca2:	2000      	movs	r0, #0
    6ca4:	bd10      	pop	{r4, pc}
    6ca6:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    6caa:	4601      	mov	r1, r0
    6cac:	2000      	movs	r0, #0
    6cae:	f7fe ff17 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6cb2:	2001      	movs	r0, #1
    6cb4:	bd10      	pop	{r4, pc}
    6cb6:	0000      	.short	0x0000
    6cb8:	20000b08 	.word	0x20000b08

00006cbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    6cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc0:	4e86      	ldr	r6, [pc, #536]	; (6edc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    6cc2:	4680      	mov	r8, r0
    6cc4:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    6cc8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    6ccc:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    6cd0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    6cd4:	2800      	cmp	r0, #0
    6cd6:	d071      	beq.n	6dbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    6cd8:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    6cdc:	4d80      	ldr	r5, [pc, #512]	; (6ee0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    6cde:	b125      	cbz	r5, 6cea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    6ce0:	2100      	movs	r1, #0
    6ce2:	f640 307b 	movw	r0, #2939	; 0xb7b
    6ce6:	f3af 8000 	nop.w
    6cea:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    6cee:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6cf2:	2801      	cmp	r0, #1
    6cf4:	d018      	beq.n	6d28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    6cf6:	b2c0      	uxtb	r0, r0
    6cf8:	2804      	cmp	r0, #4
    6cfa:	bf1c      	itt	ne
    6cfc:	2805      	cmpne	r0, #5
    6cfe:	2806      	cmpne	r0, #6
    6d00:	d061      	beq.n	6dc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    6d02:	b12d      	cbz	r5, 6d10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    6d04:	f04f 0100 	mov.w	r1, #0
    6d08:	f640 3087 	movw	r0, #2951	; 0xb87
    6d0c:	f3af 8000 	nop.w
    6d10:	f003 fdb2 	bl	a878 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6d14:	b125      	cbz	r5, 6d20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    6d16:	2100      	movs	r1, #0
    6d18:	f640 308b 	movw	r0, #2955	; 0xb8b
    6d1c:	f3af 8000 	nop.w
    6d20:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6d24:	2801      	cmp	r0, #1
    6d26:	d1e6      	bne.n	6cf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    6d28:	2401      	movs	r4, #1
    6d2a:	b125      	cbz	r5, 6d36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    6d2c:	2100      	movs	r1, #0
    6d2e:	f640 3092 	movw	r0, #2962	; 0xb92
    6d32:	f3af 8000 	nop.w
    6d36:	2c00      	cmp	r4, #0
    6d38:	d04b      	beq.n	6dd2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    6d3a:	2000      	movs	r0, #0
    6d3c:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6d40:	b125      	cbz	r5, 6d4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    6d42:	2100      	movs	r1, #0
    6d44:	f640 3097 	movw	r0, #2967	; 0xb97
    6d48:	f3af 8000 	nop.w
    6d4c:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    6d50:	2001      	movs	r0, #1
    6d52:	ea20 090b 	bic.w	r9, r0, fp
    6d56:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    6d5a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    6d5e:	2240      	movs	r2, #64	; 0x40
    6d60:	f003 fde4 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6d64:	b125      	cbz	r5, 6d70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    6d66:	2100      	movs	r1, #0
    6d68:	f240 503c 	movw	r0, #1340	; 0x53c
    6d6c:	f3af 8000 	nop.w
    6d70:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    6d74:	eb00 0a06 	add.w	sl, r0, r6
    6d78:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    6d7c:	4430      	add	r0, r6
    6d7e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    6d80:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    6d84:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    6d88:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    6d8c:	b125      	cbz	r5, 6d98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    6d8e:	2100      	movs	r1, #0
    6d90:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6d94:	f3af 8000 	nop.w
    6d98:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    6d9c:	f88d 0000 	strb.w	r0, [sp]
    6da0:	f89d 0000 	ldrb.w	r0, [sp]
    6da4:	b1e0      	cbz	r0, 6de0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    6da6:	2d00      	cmp	r5, #0
    6da8:	bf1c      	itt	ne
    6daa:	2100      	movne	r1, #0
    6dac:	f640 309d 	movwne	r0, #2973	; 0xb9d
    6db0:	d0bb      	beq.n	6d2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    6db2:	bf00      	nop
    6db4:	f3af 8000 	nop.w
    6db8:	e7b7      	b.n	6d2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    6dba:	e7ff      	b.n	6dbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    6dbc:	f640 3172 	movw	r1, #2930	; 0xb72
    6dc0:	2070      	movs	r0, #112	; 0x70
    6dc2:	f001 fb91 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6dc6:	464a      	mov	r2, r9
    6dc8:	4641      	mov	r1, r8
    6dca:	2001      	movs	r0, #1
    6dcc:	f7fe fe88 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6dd0:	e7a0      	b.n	6d14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    6dd2:	4844      	ldr	r0, [pc, #272]	; (6ee4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    6dd4:	2800      	cmp	r0, #0
    6dd6:	bf18      	it	ne
    6dd8:	f3af 8000 	nopne.w
    6ddc:	b662      	cpsie	i
    6dde:	e7ac      	b.n	6d3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    6de0:	b125      	cbz	r5, 6dec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    6de2:	2100      	movs	r1, #0
    6de4:	f640 30a1 	movw	r0, #2977	; 0xba1
    6de8:	f3af 8000 	nop.w
    6dec:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    6df0:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    6df4:	4640      	mov	r0, r8
    6df6:	461c      	mov	r4, r3
    6df8:	f04f 0b20 	mov.w	fp, #32
    6dfc:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    6e00:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    6e04:	e004      	b.n	6e10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    6e06:	46a3      	mov	fp, r4
    6e08:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    6e0c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    6e10:	4284      	cmp	r4, r0
    6e12:	d002      	beq.n	6e1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    6e14:	2c20      	cmp	r4, #32
    6e16:	d02b      	beq.n	6e70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    6e18:	e7f5      	b.n	6e06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    6e1a:	2c20      	cmp	r4, #32
    6e1c:	d028      	beq.n	6e70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    6e1e:	42a3      	cmp	r3, r4
    6e20:	d104      	bne.n	6e2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    6e22:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    6e26:	7840      	ldrb	r0, [r0, #1]
    6e28:	7008      	strb	r0, [r1, #0]
    6e2a:	e005      	b.n	6e38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    6e2c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    6e30:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    6e34:	7840      	ldrb	r0, [r0, #1]
    6e36:	7048      	strb	r0, [r1, #1]
    6e38:	f1ba 0f00 	cmp.w	sl, #0
    6e3c:	d011      	beq.n	6e62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6e3e:	b125      	cbz	r5, 6e4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    6e40:	2100      	movs	r1, #0
    6e42:	f240 409c 	movw	r0, #1180	; 0x49c
    6e46:	f3af 8000 	nop.w
    6e4a:	f89a 0000 	ldrb.w	r0, [sl]
    6e4e:	42a0      	cmp	r0, r4
    6e50:	d107      	bne.n	6e62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6e52:	b125      	cbz	r5, 6e5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    6e54:	2100      	movs	r1, #0
    6e56:	f240 409f 	movw	r0, #1183	; 0x49f
    6e5a:	f3af 8000 	nop.w
    6e5e:	f88a b000 	strb.w	fp, [sl]
    6e62:	b15d      	cbz	r5, 6e7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6e64:	2100      	movs	r1, #0
    6e66:	f240 40a4 	movw	r0, #1188	; 0x4a4
    6e6a:	f3af 8000 	nop.w
    6e6e:	e000      	b.n	6e72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    6e70:	b125      	cbz	r5, 6e7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6e72:	2100      	movs	r1, #0
    6e74:	f640 30a5 	movw	r0, #2981	; 0xba5
    6e78:	f3af 8000 	nop.w
    6e7c:	481a      	ldr	r0, [pc, #104]	; (6ee8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    6e7e:	2800      	cmp	r0, #0
    6e80:	bf18      	it	ne
    6e82:	f3af 8000 	nopne.w
    6e86:	f3ef 8410 	mrs	r4, PRIMASK
    6e8a:	b672      	cpsid	i
    6e8c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    6e90:	f88d 0000 	strb.w	r0, [sp]
    6e94:	f89d 0000 	ldrb.w	r0, [sp]
    6e98:	b138      	cbz	r0, 6eaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    6e9a:	2d00      	cmp	r5, #0
    6e9c:	bf1c      	itt	ne
    6e9e:	2100      	movne	r1, #0
    6ea0:	f640 30ab 	movwne	r0, #2987	; 0xbab
    6ea4:	f43f af41 	beq.w	6d2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    6ea8:	e784      	b.n	6db4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    6eaa:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    6eae:	20ff      	movs	r0, #255	; 0xff
    6eb0:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6eb4:	b154      	cbz	r4, 6ecc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    6eb6:	2d00      	cmp	r5, #0
    6eb8:	bf08      	it	eq
    6eba:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ebe:	2100      	movs	r1, #0
    6ec0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6ec4:	f3af 8000 	nop.w
    6ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ecc:	4805      	ldr	r0, [pc, #20]	; (6ee4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    6ece:	2800      	cmp	r0, #0
    6ed0:	bf18      	it	ne
    6ed2:	f3af 8000 	nopne.w
    6ed6:	b662      	cpsie	i
    6ed8:	e7ed      	b.n	6eb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    6eda:	0000      	.short	0x0000
    6edc:	20000b08 	.word	0x20000b08
	...

00006eec <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    6eec:	b570      	push	{r4, r5, r6, lr}
    6eee:	460d      	mov	r5, r1
    6ef0:	4606      	mov	r6, r0
    6ef2:	f001 fa6f 	bl	83d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    6ef6:	480d      	ldr	r0, [pc, #52]	; (6f2c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    6ef8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    6efc:	2400      	movs	r4, #0
    6efe:	3880      	subs	r0, #128	; 0x80
    6f00:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    6f04:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    6f08:	b129      	cbz	r1, 6f16 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    6f0a:	1c61      	adds	r1, r4, #1
    6f0c:	b2cc      	uxtb	r4, r1
    6f0e:	2c20      	cmp	r4, #32
    6f10:	d3f8      	bcc.n	6f04 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    6f12:	2020      	movs	r0, #32
    6f14:	bd70      	pop	{r4, r5, r6, pc}
    6f16:	4806      	ldr	r0, [pc, #24]	; (6f30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    6f18:	4621      	mov	r1, r4
    6f1a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6f1e:	e9c0 6500 	strd	r6, r5, [r0]
    6f22:	2001      	movs	r0, #1
    6f24:	f7fe fddc 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6f28:	4620      	mov	r0, r4
    6f2a:	bd70      	pop	{r4, r5, r6, pc}
    6f2c:	20000b08 	.word	0x20000b08
    6f30:	20000688 	.word	0x20000688

00006f34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    6f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f38:	f000 fd26 	bl	7988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6f3c:	4606      	mov	r6, r0
    6f3e:	460f      	mov	r7, r1
    6f40:	f000 fe66 	bl	7c10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    6f44:	4c65      	ldr	r4, [pc, #404]	; (70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>)
    6f46:	6860      	ldr	r0, [r4, #4]
    6f48:	f1b0 3fff 	cmp.w	r0, #4294967295
    6f4c:	bf1c      	itt	ne
    6f4e:	f04f 30ff 	movne.w	r0, #4294967295
    6f52:	6060      	strne	r0, [r4, #4]
    6f54:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    6f58:	f8df b184 	ldr.w	fp, [pc, #388]	; 70e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    6f5c:	2500      	movs	r5, #0
    6f5e:	bb10      	cbnz	r0, 6fa6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6f60:	f44f 710c 	mov.w	r1, #560	; 0x230
    6f64:	6920      	ldr	r0, [r4, #16]
    6f66:	f001 fa21 	bl	83ac <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    6f6a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    6f6e:	68a1      	ldr	r1, [r4, #8]
    6f70:	1818      	adds	r0, r3, r0
    6f72:	eb45 0305 	adc.w	r3, r5, r5
    6f76:	1809      	adds	r1, r1, r0
    6f78:	eb42 0003 	adc.w	r0, r2, r3
    6f7c:	1a71      	subs	r1, r6, r1
    6f7e:	eb77 0000 	sbcs.w	r0, r7, r0
    6f82:	d310      	bcc.n	6fa6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6f84:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6f88:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    6f8c:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    6f90:	6840      	ldr	r0, [r0, #4]
    6f92:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    6f96:	680a      	ldr	r2, [r1, #0]
    6f98:	2108      	movs	r1, #8
    6f9a:	4790      	blx	r2
    6f9c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    6fa0:	2070      	movs	r0, #112	; 0x70
    6fa2:	f001 faa1 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6fa6:	7e60      	ldrb	r0, [r4, #25]
    6fa8:	b180      	cbz	r0, 6fcc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    6faa:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    6fae:	f88d 0000 	strb.w	r0, [sp]
    6fb2:	f89d 0000 	ldrb.w	r0, [sp]
    6fb6:	b148      	cbz	r0, 6fcc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    6fb8:	f000 fc5c 	bl	7874 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    6fbc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    6fc0:	b150      	cbz	r0, 6fd8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    6fc2:	f240 31cd 	movw	r1, #973	; 0x3cd
    6fc6:	2070      	movs	r0, #112	; 0x70
    6fc8:	f001 fa8e 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6fcc:	1cf0      	adds	r0, r6, #3
    6fce:	f147 0100 	adc.w	r1, r7, #0
    6fd2:	f000 fb29 	bl	7628 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    6fd6:	e7f1      	b.n	6fbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    6fd8:	2001      	movs	r0, #1
    6fda:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    6fde:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6fe2:	2820      	cmp	r0, #32
    6fe4:	d020      	beq.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    6fe6:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    6fea:	2020      	movs	r0, #32
    6fec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    6ff0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    6ff4:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    6ff8:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    6ffc:	6025      	str	r5, [r4, #0]
    6ffe:	f000 ff01 	bl	7e04 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    7002:	f884 0020 	strb.w	r0, [r4, #32]
    7006:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    700a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    700e:	eb00 0a04 	add.w	sl, r0, r4
    7012:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    7016:	2820      	cmp	r0, #32
    7018:	d01c      	beq.n	7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    701a:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    701e:	f89b 001a 	ldrb.w	r0, [fp, #26]
    7022:	2801      	cmp	r0, #1
    7024:	d005      	beq.n	7032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    7026:	e015      	b.n	7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7028:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    702c:	2070      	movs	r0, #112	; 0x70
    702e:	f001 fa5b 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7032:	2201      	movs	r2, #1
    7034:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    7038:	4630      	mov	r0, r6
    703a:	4639      	mov	r1, r7
    703c:	f7fe f8bc 	bl	51b8 <MPSL_IRQ_RADIO_Handler+0x3e4>
    7040:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    7044:	1a12      	subs	r2, r2, r0
    7046:	eb73 0201 	sbcs.w	r2, r3, r1
    704a:	bf24      	itt	cs
    704c:	f10b 0208 	addcs.w	r2, fp, #8
    7050:	e9c2 0100 	strdcs	r0, r1, [r2]
    7054:	4641      	mov	r1, r8
    7056:	2001      	movs	r0, #1
    7058:	f7fe fd74 	bl	5b44 <MPSL_IRQ_RADIO_Handler+0xd70>
    705c:	0007      	movs	r7, r0
    705e:	d0f9      	beq.n	7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7060:	4820      	ldr	r0, [pc, #128]	; (70e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>)
    7062:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    7066:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    706a:	2802      	cmp	r0, #2
    706c:	d104      	bne.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    706e:	4642      	mov	r2, r8
    7070:	4649      	mov	r1, r9
    7072:	2006      	movs	r0, #6
    7074:	f7fe fd34 	bl	5ae0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    7078:	20ff      	movs	r0, #255	; 0xff
    707a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    707e:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    7082:	f8df 8064 	ldr.w	r8, [pc, #100]	; 70e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    7086:	2820      	cmp	r0, #32
    7088:	bf1c      	itt	ne
    708a:	f898 0001 	ldrbne.w	r0, [r8, #1]
    708e:	f001 fafd 	blne	868c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7092:	f894 0020 	ldrb.w	r0, [r4, #32]
    7096:	b128      	cbz	r0, 70a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    7098:	f000 fe90 	bl	7dbc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    709c:	f884 5020 	strb.w	r5, [r4, #32]
    70a0:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    70a4:	2f02      	cmp	r7, #2
    70a6:	d00f      	beq.n	70c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    70a8:	2f01      	cmp	r7, #1
    70aa:	bf18      	it	ne
    70ac:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70b0:	f04f 30ff 	mov.w	r0, #4294967295
    70b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    70b8:	2900      	cmp	r1, #0
    70ba:	bf08      	it	eq
    70bc:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70c0:	b001      	add	sp, #4
    70c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c6:	4708      	bx	r1
    70c8:	68a0      	ldr	r0, [r4, #8]
    70ca:	1b80      	subs	r0, r0, r6
    70cc:	f003 fa9e 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    70d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    70d4:	2900      	cmp	r1, #0
    70d6:	d1f3      	bne.n	70c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>
    70d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70dc:	20000b08 	.word	0x20000b08
    70e0:	20000688 	.word	0x20000688
    70e4:	20000a88 	.word	0x20000a88
    70e8:	20000120 	.word	0x20000120

000070ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    70ec:	b570      	push	{r4, r5, r6, lr}
    70ee:	4c42      	ldr	r4, [pc, #264]	; (71f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    70f0:	4605      	mov	r5, r0
    70f2:	b082      	sub	sp, #8
    70f4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    70f8:	2820      	cmp	r0, #32
    70fa:	d008      	beq.n	710e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    70fc:	6860      	ldr	r0, [r4, #4]
    70fe:	f1b0 3fff 	cmp.w	r0, #4294967295
    7102:	d009      	beq.n	7118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    7104:	f640 21b6 	movw	r1, #2742	; 0xab6
    7108:	2070      	movs	r0, #112	; 0x70
    710a:	f001 f9ed 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    710e:	f640 21b5 	movw	r1, #2741	; 0xab5
    7112:	2070      	movs	r0, #112	; 0x70
    7114:	f001 f9e8 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7118:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    711c:	4937      	ldr	r1, [pc, #220]	; (71fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    711e:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    7122:	68b0      	ldr	r0, [r6, #8]
    7124:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7128:	f003 fa70 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    712c:	4602      	mov	r2, r0
    712e:	8af0      	ldrh	r0, [r6, #22]
    7130:	7d31      	ldrb	r1, [r6, #20]
    7132:	4b33      	ldr	r3, [pc, #204]	; (7200 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    7134:	4408      	add	r0, r1
    7136:	1c40      	adds	r0, r0, #1
    7138:	1811      	adds	r1, r2, r0
    713a:	429a      	cmp	r2, r3
    713c:	d817      	bhi.n	716e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    713e:	4a31      	ldr	r2, [pc, #196]	; (7204 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    7140:	4290      	cmp	r0, r2
    7142:	dc1b      	bgt.n	717c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    7144:	f1c2 0c00 	rsb	ip, r2, #0
    7148:	4560      	cmp	r0, ip
    714a:	db1e      	blt.n	718a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    714c:	0056      	lsls	r6, r2, #1
    714e:	428e      	cmp	r6, r1
    7150:	bfdc      	itt	le
    7152:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    7156:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    715a:	dd05      	ble.n	7168 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    715c:	2900      	cmp	r1, #0
    715e:	bfbc      	itt	lt
    7160:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    7164:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    7168:	1948      	adds	r0, r1, r5
    716a:	4299      	cmp	r1, r3
    716c:	d904      	bls.n	7178 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    716e:	f240 517f 	movw	r1, #1407	; 0x57f
    7172:	2070      	movs	r0, #112	; 0x70
    7174:	f001 f9b8 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7178:	4295      	cmp	r5, r2
    717a:	dd04      	ble.n	7186 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    717c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    7180:	2070      	movs	r0, #112	; 0x70
    7182:	f001 f9b1 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7186:	4565      	cmp	r5, ip
    7188:	da04      	bge.n	7194 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    718a:	f240 5181 	movw	r1, #1409	; 0x581
    718e:	2070      	movs	r0, #112	; 0x70
    7190:	f001 f9aa 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7194:	4286      	cmp	r6, r0
    7196:	bfdc      	itt	le
    7198:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    719c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    71a0:	dd05      	ble.n	71ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    71a2:	2800      	cmp	r0, #0
    71a4:	bfbc      	itt	lt
    71a6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    71aa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    71ae:	aa01      	add	r2, sp, #4
    71b0:	4669      	mov	r1, sp
    71b2:	f000 f909 	bl	73c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    71b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    71ba:	280f      	cmp	r0, #15
    71bc:	bf8c      	ite	hi
    71be:	2001      	movhi	r0, #1
    71c0:	2000      	movls	r0, #0
    71c2:	9900      	ldr	r1, [sp, #0]
    71c4:	4408      	add	r0, r1
    71c6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    71ca:	6061      	str	r1, [r4, #4]
    71cc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    71d0:	f88d 0000 	strb.w	r0, [sp]
    71d4:	f89d 0000 	ldrb.w	r0, [sp]
    71d8:	2800      	cmp	r0, #0
    71da:	bf04      	itt	eq
    71dc:	b002      	addeq	sp, #8
    71de:	bd70      	popeq	{r4, r5, r6, pc}
    71e0:	2005      	movs	r0, #5
    71e2:	f000 fbf3 	bl	79cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    71e6:	2800      	cmp	r0, #0
    71e8:	bf1c      	itt	ne
    71ea:	b002      	addne	sp, #8
    71ec:	bd70      	popne	{r4, r5, r6, pc}
    71ee:	f640 21bd 	movw	r1, #2749	; 0xabd
    71f2:	2070      	movs	r0, #112	; 0x70
    71f4:	f001 f978 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    71f8:	20000b08 	.word	0x20000b08
    71fc:	20000688 	.word	0x20000688
    7200:	1e847fff 	.word	0x1e847fff
    7204:	0f424000 	.word	0x0f424000

00007208 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    7208:	b570      	push	{r4, r5, r6, lr}
    720a:	4c1e      	ldr	r4, [pc, #120]	; (7284 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    720c:	2120      	movs	r1, #32
    720e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    7212:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    7216:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    721a:	2000      	movs	r0, #0
    721c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    7220:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    7224:	1e42      	subs	r2, r0, #1
    7226:	e9c4 0200 	strd	r0, r2, [r4]
    722a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    722e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    7232:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    7236:	f884 0020 	strb.w	r0, [r4, #32]
    723a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    723e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    7242:	1e41      	subs	r1, r0, #1
    7244:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    7248:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    724c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    7250:	2210      	movs	r2, #16
    7252:	7088      	strb	r0, [r1, #2]
    7254:	f801 0f04 	strb.w	r0, [r1, #4]!
    7258:	1e52      	subs	r2, r2, #1
    725a:	d1fa      	bne.n	7252 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    725c:	f000 fddc 	bl	7e18 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    7260:	4d09      	ldr	r5, [pc, #36]	; (7288 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    7262:	2601      	movs	r6, #1
    7264:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    7268:	20ff      	movs	r0, #255	; 0xff
    726a:	7028      	strb	r0, [r5, #0]
    726c:	4807      	ldr	r0, [pc, #28]	; (728c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    726e:	f001 f9ef 	bl	8650 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    7272:	7068      	strb	r0, [r5, #1]
    7274:	f001 fa5a 	bl	872c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    7278:	60a8      	str	r0, [r5, #8]
    727a:	f000 fd5f 	bl	7d3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    727e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    7282:	bd70      	pop	{r4, r5, r6, pc}
    7284:	20000b08 	.word	0x20000b08
    7288:	20000120 	.word	0x20000120
    728c:	00005a11 	.word	0x00005a11

00007290 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    7290:	b570      	push	{r4, r5, r6, lr}
    7292:	4605      	mov	r5, r0
    7294:	2001      	movs	r0, #1
    7296:	fa00 f405 	lsl.w	r4, r0, r5
    729a:	460e      	mov	r6, r1
    729c:	2a00      	cmp	r2, #0
    729e:	bf08      	it	eq
    72a0:	4808      	ldreq	r0, [pc, #32]	; (72c4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    72a2:	d00c      	beq.n	72be <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    72a4:	2000      	movs	r0, #0
    72a6:	f000 fd2f 	bl	7d08 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    72aa:	00e9      	lsls	r1, r5, #3
    72ac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    72b0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    72b4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    72b8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    72bc:	4802      	ldr	r0, [pc, #8]	; (72c8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    72be:	6004      	str	r4, [r0, #0]
    72c0:	bd70      	pop	{r4, r5, r6, pc}
    72c2:	0000      	.short	0x0000
    72c4:	4001f508 	.word	0x4001f508
    72c8:	4001f504 	.word	0x4001f504

000072cc <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    72cc:	0e03      	lsrs	r3, r0, #24
    72ce:	b430      	push	{r4, r5}
    72d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    72d4:	f8df c038 	ldr.w	ip, [pc, #56]	; 7310 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    72d8:	0e09      	lsrs	r1, r1, #24
    72da:	fba3 250c 	umull	r2, r5, r3, ip
    72de:	fb01 510c 	mla	r1, r1, ip, r5
    72e2:	2400      	movs	r4, #0
    72e4:	fb03 1104 	mla	r1, r3, r4, r1
    72e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
    72ec:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    72f0:	f643 5c09 	movw	ip, #15625	; 0x3d09
    72f4:	fb13 f30c 	smulbb	r3, r3, ip
    72f8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    72fc:	fb10 f00c 	smulbb	r0, r0, ip
    7300:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7304:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    7308:	1880      	adds	r0, r0, r2
    730a:	4161      	adcs	r1, r4
    730c:	bc30      	pop	{r4, r5}
    730e:	4770      	bx	lr
    7310:	1e848000 	.word	0x1e848000

00007314 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    7314:	b570      	push	{r4, r5, r6, lr}
    7316:	b084      	sub	sp, #16
    7318:	4615      	mov	r5, r2
    731a:	aa01      	add	r2, sp, #4
    731c:	461c      	mov	r4, r3
    731e:	9200      	str	r2, [sp, #0]
    7320:	9e08      	ldr	r6, [sp, #32]
    7322:	ab02      	add	r3, sp, #8
    7324:	4a17      	ldr	r2, [pc, #92]	; (7384 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    7326:	f003 faf2 	bl	a90e <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    732a:	9801      	ldr	r0, [sp, #4]
    732c:	f248 6237 	movw	r2, #34359	; 0x8637
    7330:	0b41      	lsrs	r1, r0, #13
    7332:	4351      	muls	r1, r2
    7334:	0c09      	lsrs	r1, r1, #16
    7336:	4a14      	ldr	r2, [pc, #80]	; (7388 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    7338:	024b      	lsls	r3, r1, #9
    733a:	fb01 0102 	mla	r1, r1, r2, r0
    733e:	4813      	ldr	r0, [pc, #76]	; (738c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    7340:	4348      	muls	r0, r1
    7342:	0d42      	lsrs	r2, r0, #21
    7344:	1898      	adds	r0, r3, r2
    7346:	f643 5309 	movw	r3, #15625	; 0x3d09
    734a:	fb12 f303 	smulbb	r3, r2, r3
    734e:	f503 7280 	add.w	r2, r3, #256	; 0x100
    7352:	f643 5c08 	movw	ip, #15624	; 0x3d08
    7356:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    735a:	4463      	add	r3, ip
    735c:	b2d2      	uxtb	r2, r2
    735e:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    7362:	bf84      	itt	hi
    7364:	2200      	movhi	r2, #0
    7366:	1c40      	addhi	r0, r0, #1
    7368:	7032      	strb	r2, [r6, #0]
    736a:	9b02      	ldr	r3, [sp, #8]
    736c:	0a19      	lsrs	r1, r3, #8
    736e:	061b      	lsls	r3, r3, #24
    7370:	1818      	adds	r0, r3, r0
    7372:	f141 0100 	adc.w	r1, r1, #0
    7376:	e9c4 0100 	strd	r0, r1, [r4]
    737a:	9801      	ldr	r0, [sp, #4]
    737c:	6028      	str	r0, [r5, #0]
    737e:	b004      	add	sp, #16
    7380:	bd70      	pop	{r4, r5, r6, pc}
    7382:	0000      	.short	0x0000
    7384:	1e848000 	.word	0x1e848000
    7388:	ffffc2f7 	.word	0xffffc2f7
    738c:	00010c6f 	.word	0x00010c6f

00007390 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    7390:	0b41      	lsrs	r1, r0, #13
    7392:	f248 6237 	movw	r2, #34359	; 0x8637
    7396:	4351      	muls	r1, r2
    7398:	0c0a      	lsrs	r2, r1, #16
    739a:	4b09      	ldr	r3, [pc, #36]	; (73c0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    739c:	0251      	lsls	r1, r2, #9
    739e:	fb02 0203 	mla	r2, r2, r3, r0
    73a2:	4808      	ldr	r0, [pc, #32]	; (73c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    73a4:	4350      	muls	r0, r2
    73a6:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    73aa:	306e      	adds	r0, #110	; 0x6e
    73ac:	0d40      	lsrs	r0, r0, #21
    73ae:	425b      	negs	r3, r3
    73b0:	fb10 f303 	smulbb	r3, r0, r3
    73b4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    73b8:	bf88      	it	hi
    73ba:	1c49      	addhi	r1, r1, #1
    73bc:	4408      	add	r0, r1
    73be:	4770      	bx	lr
    73c0:	ffffc2f7 	.word	0xffffc2f7
    73c4:	00010c6f 	.word	0x00010c6f

000073c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    73c8:	0b43      	lsrs	r3, r0, #13
    73ca:	f248 6c37 	movw	ip, #34359	; 0x8637
    73ce:	fb03 f30c 	mul.w	r3, r3, ip
    73d2:	b430      	push	{r4, r5}
    73d4:	0c1b      	lsrs	r3, r3, #16
    73d6:	f8df c044 	ldr.w	ip, [pc, #68]	; 741c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    73da:	025c      	lsls	r4, r3, #9
    73dc:	fb03 030c 	mla	r3, r3, ip, r0
    73e0:	480f      	ldr	r0, [pc, #60]	; (7420 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    73e2:	4358      	muls	r0, r3
    73e4:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    73e8:	eb04 000c 	add.w	r0, r4, ip
    73ec:	f643 5409 	movw	r4, #15625	; 0x3d09
    73f0:	fb1c f404 	smulbb	r4, ip, r4
    73f4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    73f8:	f643 5508 	movw	r5, #15624	; 0x3d08
    73fc:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    7400:	442c      	add	r4, r5
    7402:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    7406:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    740a:	bf84      	itt	hi
    740c:	f04f 0c00 	movhi.w	ip, #0
    7410:	1c40      	addhi	r0, r0, #1
    7412:	6008      	str	r0, [r1, #0]
    7414:	f882 c000 	strb.w	ip, [r2]
    7418:	bc30      	pop	{r4, r5}
    741a:	4770      	bx	lr
    741c:	ffffc2f7 	.word	0xffffc2f7
    7420:	00010c6f 	.word	0x00010c6f

00007424 <MPSL_IRQ_RTC0_Handler>:
    7424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7428:	2400      	movs	r4, #0
    742a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 74ac <MPSL_IRQ_RTC0_Handler+0x88>
    742e:	4d20      	ldr	r5, [pc, #128]	; (74b0 <MPSL_IRQ_RTC0_Handler+0x8c>)
    7430:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    7434:	f44f 78a0 	mov.w	r8, #320	; 0x140
    7438:	ea4f 0604 	mov.w	r6, r4
    743c:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    7440:	fa07 f004 	lsl.w	r0, r7, r4
    7444:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    7448:	4202      	tst	r2, r0
    744a:	d01a      	beq.n	7482 <MPSL_IRQ_RTC0_Handler+0x5e>
    744c:	4a18      	ldr	r2, [pc, #96]	; (74b0 <MPSL_IRQ_RTC0_Handler+0x8c>)
    744e:	5852      	ldr	r2, [r2, r1]
    7450:	b1ba      	cbz	r2, 7482 <MPSL_IRQ_RTC0_Handler+0x5e>
    7452:	506e      	str	r6, [r5, r1]
    7454:	00a1      	lsls	r1, r4, #2
    7456:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    745a:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    745e:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    7462:	f8d9 2000 	ldr.w	r2, [r9]
    7466:	1a89      	subs	r1, r1, r2
    7468:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    746c:	2902      	cmp	r1, #2
    746e:	d302      	bcc.n	7476 <MPSL_IRQ_RTC0_Handler+0x52>
    7470:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    7474:	d905      	bls.n	7482 <MPSL_IRQ_RTC0_Handler+0x5e>
    7476:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    747a:	1d20      	adds	r0, r4, #4
    747c:	b2c0      	uxtb	r0, r0
    747e:	f7fe fd6f 	bl	5f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    7482:	1c60      	adds	r0, r4, #1
    7484:	b2c4      	uxtb	r4, r0
    7486:	2c03      	cmp	r4, #3
    7488:	d3d8      	bcc.n	743c <MPSL_IRQ_RTC0_Handler+0x18>
    748a:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    748e:	b128      	cbz	r0, 749c <MPSL_IRQ_RTC0_Handler+0x78>
    7490:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    7494:	4807      	ldr	r0, [pc, #28]	; (74b4 <MPSL_IRQ_RTC0_Handler+0x90>)
    7496:	6881      	ldr	r1, [r0, #8]
    7498:	1c49      	adds	r1, r1, #1
    749a:	6081      	str	r1, [r0, #8]
    749c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    74a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    74a4:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    74a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74ac:	4000b504 	.word	0x4000b504
    74b0:	4000b000 	.word	0x4000b000
    74b4:	20000028 	.word	0x20000028

000074b8 <MPSL_IRQ_TIMER0_Handler>:
    74b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74bc:	4d38      	ldr	r5, [pc, #224]	; (75a0 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    74be:	7828      	ldrb	r0, [r5, #0]
    74c0:	2804      	cmp	r0, #4
    74c2:	d068      	beq.n	7596 <MPSL_IRQ_TIMER0_Handler+0xde>
    74c4:	1ca8      	adds	r0, r5, #2
    74c6:	2201      	movs	r2, #1
    74c8:	7801      	ldrb	r1, [r0, #0]
    74ca:	b159      	cbz	r1, 74e4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    74cc:	2901      	cmp	r1, #1
    74ce:	bf08      	it	eq
    74d0:	706a      	strbeq	r2, [r5, #1]
    74d2:	d002      	beq.n	74da <MPSL_IRQ_TIMER0_Handler+0x22>
    74d4:	7869      	ldrb	r1, [r5, #1]
    74d6:	2900      	cmp	r1, #0
    74d8:	d058      	beq.n	758c <MPSL_IRQ_TIMER0_Handler+0xd4>
    74da:	2102      	movs	r1, #2
    74dc:	7001      	strb	r1, [r0, #0]
    74de:	7840      	ldrb	r0, [r0, #1]
    74e0:	f000 fb2e 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    74e4:	4c2f      	ldr	r4, [pc, #188]	; (75a4 <MPSL_IRQ_TIMER0_Handler+0xec>)
    74e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    74ea:	f04f 0800 	mov.w	r8, #0
    74ee:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    74f2:	f44f 7780 	mov.w	r7, #256	; 0x100
    74f6:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    74fa:	d00a      	beq.n	7512 <MPSL_IRQ_TIMER0_Handler+0x5a>
    74fc:	482a      	ldr	r0, [pc, #168]	; (75a8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    74fe:	6800      	ldr	r0, [r0, #0]
    7500:	b138      	cbz	r0, 7512 <MPSL_IRQ_TIMER0_Handler+0x5a>
    7502:	2003      	movs	r0, #3
    7504:	f000 fb1c 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    7508:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    750c:	2003      	movs	r0, #3
    750e:	f7fe fd27 	bl	5f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    7512:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7516:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    751a:	d00a      	beq.n	7532 <MPSL_IRQ_TIMER0_Handler+0x7a>
    751c:	4823      	ldr	r0, [pc, #140]	; (75ac <MPSL_IRQ_TIMER0_Handler+0xf4>)
    751e:	6800      	ldr	r0, [r0, #0]
    7520:	b138      	cbz	r0, 7532 <MPSL_IRQ_TIMER0_Handler+0x7a>
    7522:	2002      	movs	r0, #2
    7524:	f000 fb0c 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    7528:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    752c:	2002      	movs	r0, #2
    752e:	f7fe fd17 	bl	5f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    7532:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7536:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    753a:	d00a      	beq.n	7552 <MPSL_IRQ_TIMER0_Handler+0x9a>
    753c:	481c      	ldr	r0, [pc, #112]	; (75b0 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    753e:	6800      	ldr	r0, [r0, #0]
    7540:	b138      	cbz	r0, 7552 <MPSL_IRQ_TIMER0_Handler+0x9a>
    7542:	2001      	movs	r0, #1
    7544:	f000 fafc 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    7548:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    754c:	2001      	movs	r0, #1
    754e:	f7fe fd07 	bl	5f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    7552:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7556:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    755a:	bf08      	it	eq
    755c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7560:	4814      	ldr	r0, [pc, #80]	; (75b4 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    7562:	6800      	ldr	r0, [r0, #0]
    7564:	2800      	cmp	r0, #0
    7566:	bf08      	it	eq
    7568:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    756c:	2000      	movs	r0, #0
    756e:	f000 fae7 	bl	7b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    7572:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    7576:	2004      	movs	r0, #4
    7578:	7028      	strb	r0, [r5, #0]
    757a:	f8c5 8004 	str.w	r8, [r5, #4]
    757e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    7582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7586:	2000      	movs	r0, #0
    7588:	f7fe bcea 	b.w	5f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    758c:	f240 5169 	movw	r1, #1385	; 0x569
    7590:	206c      	movs	r0, #108	; 0x6c
    7592:	f000 ffa9 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    759a:	2007      	movs	r0, #7
    759c:	f7fe bce0 	b.w	5f60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    75a0:	20000028 	.word	0x20000028
    75a4:	40008000 	.word	0x40008000
    75a8:	4000814c 	.word	0x4000814c
    75ac:	40008148 	.word	0x40008148
    75b0:	40008144 	.word	0x40008144
    75b4:	40008140 	.word	0x40008140
    75b8:	2201      	movs	r2, #1
    75ba:	0211      	lsls	r1, r2, #8
    75bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    75c0:	2000      	movs	r0, #0
    75c2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    75c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    75ca:	f3bf 8f4f 	dsb	sy
    75ce:	f3bf 8f6f 	isb	sy
    75d2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    75d6:	490e      	ldr	r1, [pc, #56]	; (7610 <MPSL_IRQ_TIMER0_Handler+0x158>)
    75d8:	f841 2f04 	str.w	r2, [r1, #4]!
    75dc:	1e43      	subs	r3, r0, #1
    75de:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    75e2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    75e6:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    75ea:	4b0a      	ldr	r3, [pc, #40]	; (7614 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    75ec:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    75f0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    75f4:	1d1b      	adds	r3, r3, #4
    75f6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    75fa:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    75fe:	1d1b      	adds	r3, r3, #4
    7600:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    7604:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    7608:	60ca      	str	r2, [r1, #12]
    760a:	4903      	ldr	r1, [pc, #12]	; (7618 <MPSL_IRQ_TIMER0_Handler+0x160>)
    760c:	7048      	strb	r0, [r1, #1]
    760e:	4770      	bx	lr
    7610:	40008000 	.word	0x40008000
    7614:	40008004 	.word	0x40008004
    7618:	20000028 	.word	0x20000028

0000761c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    761c:	4801      	ldr	r0, [pc, #4]	; (7624 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    761e:	6800      	ldr	r0, [r0, #0]
    7620:	4770      	bx	lr
    7622:	0000      	.short	0x0000
    7624:	4000b504 	.word	0x4000b504

00007628 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    7628:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    762c:	f8df 8130 	ldr.w	r8, [pc, #304]	; 7760 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    7630:	4604      	mov	r4, r0
    7632:	f1a8 0702 	sub.w	r7, r8, #2
    7636:	460e      	mov	r6, r1
    7638:	f898 c000 	ldrb.w	ip, [r8]
    763c:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    7640:	f1bc 0f01 	cmp.w	ip, #1
    7644:	d106      	bne.n	7654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    7646:	ea81 0204 	eor.w	r2, r1, r4
    764a:	4070      	eors	r0, r6
    764c:	4310      	orrs	r0, r2
    764e:	bf08      	it	eq
    7650:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7654:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    7658:	4a42      	ldr	r2, [pc, #264]	; (7764 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    765a:	6010      	str	r0, [r2, #0]
    765c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    7660:	f1bc 0f00 	cmp.w	ip, #0
    7664:	bf07      	ittee	eq
    7666:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    766a:	2200      	moveq	r2, #0
    766c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    7670:	2201      	movne	r2, #1
    7672:	483d      	ldr	r0, [pc, #244]	; (7768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    7674:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    7678:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    767c:	2500      	movs	r5, #0
    767e:	f44f 79a0 	mov.w	r9, #320	; 0x140
    7682:	2a02      	cmp	r2, #2
    7684:	d207      	bcs.n	7696 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    7686:	bf00      	nop
    7688:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    768c:	50c5      	str	r5, [r0, r3]
    768e:	1c52      	adds	r2, r2, #1
    7690:	b2d2      	uxtb	r2, r2
    7692:	2a02      	cmp	r2, #2
    7694:	d3f8      	bcc.n	7688 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    7696:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    769a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    769e:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    76a2:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    76a6:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    76aa:	4a30      	ldr	r2, [pc, #192]	; (776c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    76ac:	f8d2 9000 	ldr.w	r9, [r2]
    76b0:	eba3 0909 	sub.w	r9, r3, r9
    76b4:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    76b8:	f04f 0901 	mov.w	r9, #1
    76bc:	f1ba 0f02 	cmp.w	sl, #2
    76c0:	d32e      	bcc.n	7720 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    76c2:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    76c6:	d82b      	bhi.n	7720 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    76c8:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    76cc:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    76d0:	f1bc 0f00 	cmp.w	ip, #0
    76d4:	d005      	beq.n	76e2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    76d6:	6810      	ldr	r0, [r2, #0]
    76d8:	1a08      	subs	r0, r1, r0
    76da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    76de:	2802      	cmp	r0, #2
    76e0:	d3f9      	bcc.n	76d6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    76e2:	f8c7 9004 	str.w	r9, [r7, #4]
    76e6:	703d      	strb	r5, [r7, #0]
    76e8:	f7ff ff66 	bl	75b8 <MPSL_IRQ_TIMER0_Handler+0x100>
    76ec:	4820      	ldr	r0, [pc, #128]	; (7770 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    76ee:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    76f2:	f365 0101 	bfi	r1, r5, #0, #2
    76f6:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    76fa:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    76fe:	2102      	movs	r1, #2
    7700:	f361 0201 	bfi	r2, r1, #0, #2
    7704:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    7708:	2110      	movs	r1, #16
    770a:	fa91 f1a1 	rbit	r1, r1
    770e:	fab1 f181 	clz	r1, r1
    7712:	2909      	cmp	r1, #9
    7714:	d909      	bls.n	772a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    7716:	f240 3155 	movw	r1, #853	; 0x355
    771a:	a016      	add	r0, pc, #88	; (adr r0, 7774 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    771c:	f000 feb8 	bl	8490 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    7720:	f240 31b2 	movw	r1, #946	; 0x3b2
    7724:	206c      	movs	r0, #108	; 0x6c
    7726:	f000 fedf 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    772a:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    772e:	f8c0 900c 	str.w	r9, [r0, #12]
    7732:	6879      	ldr	r1, [r7, #4]
    7734:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7738:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    773c:	f44f 7180 	mov.w	r1, #256	; 0x100
    7740:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    7744:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7748:	490d      	ldr	r1, [pc, #52]	; (7780 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    774a:	0480      	lsls	r0, r0, #18
    774c:	6008      	str	r0, [r1, #0]
    774e:	e9c7 4604 	strd	r4, r6, [r7, #16]
    7752:	2004      	movs	r0, #4
    7754:	f888 0001 	strb.w	r0, [r8, #1]
    7758:	f888 9000 	strb.w	r9, [r8]
    775c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7760:	2000002a 	.word	0x2000002a
    7764:	4001f508 	.word	0x4001f508
    7768:	4000b000 	.word	0x4000b000
    776c:	4000b504 	.word	0x4000b504
    7770:	40008000 	.word	0x40008000
    7774:	5f66726e 	.word	0x5f66726e
    7778:	656d6974 	.word	0x656d6974
    777c:	00682e72 	.word	0x00682e72
    7780:	4001f504 	.word	0x4001f504

00007784 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    7784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7788:	4c31      	ldr	r4, [pc, #196]	; (7850 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    778a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    778e:	ea82 0c00 	eor.w	ip, r2, r0
    7792:	404b      	eors	r3, r1
    7794:	ea5c 0303 	orrs.w	r3, ip, r3
    7798:	bf14      	ite	ne
    779a:	2301      	movne	r3, #1
    779c:	2300      	moveq	r3, #0
    779e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 7854 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    77a2:	f89c 8000 	ldrb.w	r8, [ip]
    77a6:	f1b8 0f02 	cmp.w	r8, #2
    77aa:	d002      	beq.n	77b2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    77ac:	2b00      	cmp	r3, #0
    77ae:	d03f      	beq.n	7830 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    77b0:	e003      	b.n	77ba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    77b2:	2b00      	cmp	r3, #0
    77b4:	bf08      	it	eq
    77b6:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77ba:	7863      	ldrb	r3, [r4, #1]
    77bc:	b3bb      	cbz	r3, 782e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    77be:	4d26      	ldr	r5, [pc, #152]	; (7858 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    77c0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    77c4:	602b      	str	r3, [r5, #0]
    77c6:	4e25      	ldr	r6, [pc, #148]	; (785c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    77c8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    77cc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    77d0:	462f      	mov	r7, r5
    77d2:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    77d6:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    77da:	2500      	movs	r5, #0
    77dc:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    77e0:	4d1f      	ldr	r5, [pc, #124]	; (7860 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    77e2:	f8d5 9000 	ldr.w	r9, [r5]
    77e6:	eba3 0909 	sub.w	r9, r3, r9
    77ea:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    77ee:	f1b9 0f02 	cmp.w	r9, #2
    77f2:	d327      	bcc.n	7844 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    77f4:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    77f8:	d824      	bhi.n	7844 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    77fa:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    77fe:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    7802:	f1b8 0f00 	cmp.w	r8, #0
    7806:	d005      	beq.n	7814 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    7808:	682b      	ldr	r3, [r5, #0]
    780a:	1ad3      	subs	r3, r2, r3
    780c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7810:	2b02      	cmp	r3, #2
    7812:	d3f9      	bcc.n	7808 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    7814:	4d13      	ldr	r5, [pc, #76]	; (7864 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    7816:	2202      	movs	r2, #2
    7818:	0753      	lsls	r3, r2, #29
    781a:	602b      	str	r3, [r5, #0]
    781c:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7820:	2004      	movs	r0, #4
    7822:	f88c 0001 	strb.w	r0, [ip, #1]
    7826:	f88c 2000 	strb.w	r2, [ip]
    782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    782e:	e004      	b.n	783a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    7830:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    7834:	206c      	movs	r0, #108	; 0x6c
    7836:	f000 fe57 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    783a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    783e:	206c      	movs	r0, #108	; 0x6c
    7840:	f000 fe52 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7844:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    7848:	206c      	movs	r0, #108	; 0x6c
    784a:	f000 fe4d 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    784e:	0000      	.short	0x0000
    7850:	20000028 	.word	0x20000028
    7854:	2000002a 	.word	0x2000002a
    7858:	4001f508 	.word	0x4001f508
    785c:	4000b000 	.word	0x4000b000
    7860:	4000b504 	.word	0x4000b504
    7864:	4001f504 	.word	0x4001f504

00007868 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    7868:	4901      	ldr	r1, [pc, #4]	; (7870 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    786a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    786e:	4770      	bx	lr
    7870:	20000028 	.word	0x20000028

00007874 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    7874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7878:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 7970 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    787c:	f89c 4000 	ldrb.w	r4, [ip]
    7880:	2c00      	cmp	r4, #0
    7882:	bf07      	ittee	eq
    7884:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    7888:	2100      	moveq	r1, #0
    788a:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    788e:	2101      	movne	r1, #1
    7890:	4838      	ldr	r0, [pc, #224]	; (7974 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    7892:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    7896:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    789a:	2300      	movs	r3, #0
    789c:	2902      	cmp	r1, #2
    789e:	bf38      	it	cc
    78a0:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    78a4:	d207      	bcs.n	78b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    78a6:	bf00      	nop
    78a8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    78ac:	5083      	str	r3, [r0, r2]
    78ae:	1c49      	adds	r1, r1, #1
    78b0:	b2c9      	uxtb	r1, r1
    78b2:	2902      	cmp	r1, #2
    78b4:	d3f8      	bcc.n	78a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    78b6:	2c02      	cmp	r4, #2
    78b8:	d004      	beq.n	78c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    78ba:	f240 31db 	movw	r1, #987	; 0x3db
    78be:	206c      	movs	r0, #108	; 0x6c
    78c0:	f000 fe12 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    78c4:	f3ef 8210 	mrs	r2, PRIMASK
    78c8:	b672      	cpsid	i
    78ca:	4c2b      	ldr	r4, [pc, #172]	; (7978 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    78cc:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    78d0:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    78d4:	b12d      	cbz	r5, 78e2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    78d6:	68a1      	ldr	r1, [r4, #8]
    78d8:	1c49      	adds	r1, r1, #1
    78da:	60a1      	str	r1, [r4, #8]
    78dc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    78e0:	e7f4      	b.n	78cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    78e2:	68a0      	ldr	r0, [r4, #8]
    78e4:	b902      	cbnz	r2, 78e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    78e6:	b662      	cpsie	i
    78e8:	0a02      	lsrs	r2, r0, #8
    78ea:	0600      	lsls	r0, r0, #24
    78ec:	1840      	adds	r0, r0, r1
    78ee:	eb42 0103 	adc.w	r1, r2, r3
    78f2:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    78f6:	1cc0      	adds	r0, r0, #3
    78f8:	f141 0100 	adc.w	r1, r1, #0
    78fc:	4f1f      	ldr	r7, [pc, #124]	; (797c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    78fe:	2601      	movs	r6, #1
    7900:	4d1f      	ldr	r5, [pc, #124]	; (7980 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    7902:	ea80 0902 	eor.w	r9, r0, r2
    7906:	ea81 0808 	eor.w	r8, r1, r8
    790a:	ea59 0808 	orrs.w	r8, r9, r8
    790e:	d00e      	beq.n	792e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7910:	f8d7 8000 	ldr.w	r8, [r7]
    7914:	eba2 0808 	sub.w	r8, r2, r8
    7918:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    791c:	f1b8 0f04 	cmp.w	r8, #4
    7920:	d305      	bcc.n	792e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7922:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    7926:	d802      	bhi.n	792e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7928:	f7ff fe7e 	bl	7628 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    792c:	e01b      	b.n	7966 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    792e:	6838      	ldr	r0, [r7, #0]
    7930:	1a10      	subs	r0, r2, r0
    7932:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7936:	2802      	cmp	r0, #2
    7938:	d313      	bcc.n	7962 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    793a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    793e:	d810      	bhi.n	7962 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    7940:	4910      	ldr	r1, [pc, #64]	; (7984 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    7942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7946:	6008      	str	r0, [r1, #0]
    7948:	6066      	str	r6, [r4, #4]
    794a:	7023      	strb	r3, [r4, #0]
    794c:	606e      	str	r6, [r5, #4]
    794e:	60ee      	str	r6, [r5, #12]
    7950:	0040      	lsls	r0, r0, #1
    7952:	1f09      	subs	r1, r1, #4
    7954:	6008      	str	r0, [r1, #0]
    7956:	2004      	movs	r0, #4
    7958:	f88c 0001 	strb.w	r0, [ip, #1]
    795c:	f88c 6000 	strb.w	r6, [ip]
    7960:	e001      	b.n	7966 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7962:	6066      	str	r6, [r4, #4]
    7964:	7023      	strb	r3, [r4, #0]
    7966:	6860      	ldr	r0, [r4, #4]
    7968:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7970:	2000002a 	.word	0x2000002a
    7974:	4000b000 	.word	0x4000b000
    7978:	20000028 	.word	0x20000028
    797c:	4000b504 	.word	0x4000b504
    7980:	40008000 	.word	0x40008000
    7984:	4001f508 	.word	0x4001f508

00007988 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    7988:	b410      	push	{r4}
    798a:	f3ef 8410 	mrs	r4, PRIMASK
    798e:	b672      	cpsid	i
    7990:	4a0c      	ldr	r2, [pc, #48]	; (79c4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    7992:	490d      	ldr	r1, [pc, #52]	; (79c8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    7994:	f04f 0c00 	mov.w	ip, #0
    7998:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    799c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    79a0:	b12b      	cbz	r3, 79ae <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    79a2:	6888      	ldr	r0, [r1, #8]
    79a4:	1c40      	adds	r0, r0, #1
    79a6:	6088      	str	r0, [r1, #8]
    79a8:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    79ac:	e7f4      	b.n	7998 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    79ae:	6889      	ldr	r1, [r1, #8]
    79b0:	b904      	cbnz	r4, 79b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    79b2:	b662      	cpsie	i
    79b4:	0a0a      	lsrs	r2, r1, #8
    79b6:	0609      	lsls	r1, r1, #24
    79b8:	1808      	adds	r0, r1, r0
    79ba:	bc10      	pop	{r4}
    79bc:	eb42 010c 	adc.w	r1, r2, ip
    79c0:	4770      	bx	lr
    79c2:	0000      	.short	0x0000
    79c4:	4000b000 	.word	0x4000b000
    79c8:	20000028 	.word	0x20000028

000079cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    79cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d0:	4a56      	ldr	r2, [pc, #344]	; (7b2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    79d2:	2501      	movs	r5, #1
    79d4:	2400      	movs	r4, #0
    79d6:	f892 c000 	ldrb.w	ip, [r2]
    79da:	7852      	ldrb	r2, [r2, #1]
    79dc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    79e0:	2807      	cmp	r0, #7
    79e2:	d27d      	bcs.n	7ae0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    79e4:	e8df f000 	tbb	[pc, r0]
    79e8:	04040404 	.word	0x04040404
    79ec:	00606060 	.word	0x00606060
    79f0:	4b4f      	ldr	r3, [pc, #316]	; (7b30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    79f2:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    79f6:	43ff      	mvns	r7, r7
    79f8:	ea77 0708 	orns	r7, r7, r8
    79fc:	bf04      	itt	eq
    79fe:	785b      	ldrbeq	r3, [r3, #1]
    7a00:	2b00      	cmpeq	r3, #0
    7a02:	d003      	beq.n	7a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    7a04:	f1bc 0f02 	cmp.w	ip, #2
    7a08:	d005      	beq.n	7a16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    7a0a:	e026      	b.n	7a5a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    7a0c:	f44f 6186 	mov.w	r1, #1072	; 0x430
    7a10:	206c      	movs	r0, #108	; 0x6c
    7a12:	f000 fd69 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7a16:	1f13      	subs	r3, r2, #4
    7a18:	b2db      	uxtb	r3, r3
    7a1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7a1e:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    7a22:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    7a26:	2300      	movs	r3, #0
    7a28:	f1bc 0f01 	cmp.w	ip, #1
    7a2c:	d003      	beq.n	7a36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    7a2e:	f1bc 0f02 	cmp.w	ip, #2
    7a32:	d008      	beq.n	7a46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    7a34:	e00e      	b.n	7a54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    7a36:	2a04      	cmp	r2, #4
    7a38:	bf24      	itt	cs
    7a3a:	6837      	ldrcs	r7, [r6, #0]
    7a3c:	2f00      	cmpcs	r7, #0
    7a3e:	bf08      	it	eq
    7a40:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    7a44:	e006      	b.n	7a54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    7a46:	2a04      	cmp	r2, #4
    7a48:	bf24      	itt	cs
    7a4a:	6837      	ldrcs	r7, [r6, #0]
    7a4c:	2f00      	cmpcs	r7, #0
    7a4e:	bf08      	it	eq
    7a50:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    7a54:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    7a58:	d1e5      	bne.n	7a26 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    7a5a:	4b36      	ldr	r3, [pc, #216]	; (7b34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    7a5c:	f100 0210 	add.w	r2, r0, #16
    7a60:	fa05 f202 	lsl.w	r2, r5, r2
    7a64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    7a68:	f04f 0c40 	mov.w	ip, #64	; 0x40
    7a6c:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    7a70:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    7a74:	449c      	add	ip, r3
    7a76:	f8cc 5000 	str.w	r5, [ip]
    7a7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a7e:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    7a82:	eba1 0c0c 	sub.w	ip, r1, ip
    7a86:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    7a8a:	f1bc 0f03 	cmp.w	ip, #3
    7a8e:	bf3e      	ittt	cc
    7a90:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    7a94:	2000      	movcc	r0, #0
    7a96:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a9a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    7a9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    7aa2:	2001      	movs	r0, #1
    7aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aa8:	f1bc 0f00 	cmp.w	ip, #0
    7aac:	d006      	beq.n	7abc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    7aae:	4282      	cmp	r2, r0
    7ab0:	d104      	bne.n	7abc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    7ab2:	f44f 618a 	mov.w	r1, #1104	; 0x450
    7ab6:	206c      	movs	r0, #108	; 0x6c
    7ab8:	f000 fd16 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7abc:	1f00      	subs	r0, r0, #4
    7abe:	b2c2      	uxtb	r2, r0
    7ac0:	2a03      	cmp	r2, #3
    7ac2:	d304      	bcc.n	7ace <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    7ac4:	f44f 7127 	mov.w	r1, #668	; 0x29c
    7ac8:	206c      	movs	r0, #108	; 0x6c
    7aca:	f000 fd0d 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ace:	4b1a      	ldr	r3, [pc, #104]	; (7b38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    7ad0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    7ad4:	4090      	lsls	r0, r2
    7ad6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    7ada:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    7ade:	e000      	b.n	7ae2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    7ae0:	e01f      	b.n	7b22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    7ae2:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    7ae6:	f843 400c 	str.w	r4, [r3, ip]
    7aea:	f8df c050 	ldr.w	ip, [pc, #80]	; 7b3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    7aee:	f8dc c000 	ldr.w	ip, [ip]
    7af2:	eba1 0c0c 	sub.w	ip, r1, ip
    7af6:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    7afa:	f1bc 0f02 	cmp.w	ip, #2
    7afe:	d30d      	bcc.n	7b1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    7b00:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    7b04:	d80a      	bhi.n	7b1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    7b06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7b0a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    7b0e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    7b12:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    7b16:	4628      	mov	r0, r5
    7b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b1c:	4620      	mov	r0, r4
    7b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b22:	f240 4154 	movw	r1, #1108	; 0x454
    7b26:	206c      	movs	r0, #108	; 0x6c
    7b28:	f000 fcde 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7b2c:	2000002a 	.word	0x2000002a
    7b30:	20000028 	.word	0x20000028
    7b34:	40008000 	.word	0x40008000
    7b38:	4000b000 	.word	0x4000b000
    7b3c:	4000b504 	.word	0x4000b504

00007b40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    7b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b42:	2101      	movs	r1, #1
    7b44:	2600      	movs	r6, #0
    7b46:	f44f 77a0 	mov.w	r7, #320	; 0x140
    7b4a:	2807      	cmp	r0, #7
    7b4c:	d24a      	bcs.n	7be4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    7b4e:	e8df f000 	tbb	[pc, r0]
    7b52:	0404      	.short	0x0404
    7b54:	18180404 	.word	0x18180404
    7b58:	0018      	.short	0x0018
    7b5a:	f100 0210 	add.w	r2, r0, #16
    7b5e:	fa01 f202 	lsl.w	r2, r1, r2
    7b62:	4923      	ldr	r1, [pc, #140]	; (7bf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    7b64:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    7b68:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    7b6c:	2200      	movs	r2, #0
    7b6e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    7b72:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    7b76:	508e      	str	r6, [r1, r2]
    7b78:	491e      	ldr	r1, [pc, #120]	; (7bf4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    7b7a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7b7e:	9000      	str	r0, [sp, #0]
    7b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b82:	4d1d      	ldr	r5, [pc, #116]	; (7bf8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    7b84:	1f01      	subs	r1, r0, #4
    7b86:	b2cc      	uxtb	r4, r1
    7b88:	7829      	ldrb	r1, [r5, #0]
    7b8a:	b181      	cbz	r1, 7bae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    7b8c:	786a      	ldrb	r2, [r5, #1]
    7b8e:	4282      	cmp	r2, r0
    7b90:	d10d      	bne.n	7bae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    7b92:	4a1a      	ldr	r2, [pc, #104]	; (7bfc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    7b94:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    7b98:	6010      	str	r0, [r2, #0]
    7b9a:	2901      	cmp	r1, #1
    7b9c:	bf08      	it	eq
    7b9e:	f7ff fd0b 	bleq	75b8 <MPSL_IRQ_TIMER0_Handler+0x100>
    7ba2:	702e      	strb	r6, [r5, #0]
    7ba4:	4a16      	ldr	r2, [pc, #88]	; (7c00 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    7ba6:	f04f 30ff 	mov.w	r0, #4294967295
    7baa:	e9c2 0004 	strd	r0, r0, [r2, #16]
    7bae:	4915      	ldr	r1, [pc, #84]	; (7c04 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    7bb0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    7bb4:	40a0      	lsls	r0, r4
    7bb6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    7bba:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    7bbe:	00a0      	lsls	r0, r4, #2
    7bc0:	4408      	add	r0, r1
    7bc2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7bc6:	4a10      	ldr	r2, [pc, #64]	; (7c08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    7bc8:	6812      	ldr	r2, [r2, #0]
    7bca:	1a80      	subs	r0, r0, r2
    7bcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7bd0:	2802      	cmp	r0, #2
    7bd2:	bf24      	itt	cs
    7bd4:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    7bd8:	500e      	strcs	r6, [r1, r0]
    7bda:	480c      	ldr	r0, [pc, #48]	; (7c0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    7bdc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    7be0:	9000      	str	r0, [sp, #0]
    7be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7be4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7be8:	206c      	movs	r0, #108	; 0x6c
    7bea:	f000 fc7d 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7bee:	0000      	.short	0x0000
    7bf0:	40008000 	.word	0x40008000
    7bf4:	40008140 	.word	0x40008140
    7bf8:	2000002a 	.word	0x2000002a
    7bfc:	4001f508 	.word	0x4001f508
    7c00:	20000028 	.word	0x20000028
    7c04:	4000b000 	.word	0x4000b000
    7c08:	4000b504 	.word	0x4000b504
    7c0c:	4000b140 	.word	0x4000b140

00007c10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    7c10:	481a      	ldr	r0, [pc, #104]	; (7c7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    7c12:	7800      	ldrb	r0, [r0, #0]
    7c14:	2800      	cmp	r0, #0
    7c16:	bf07      	ittee	eq
    7c18:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    7c1c:	2100      	moveq	r1, #0
    7c1e:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    7c22:	2101      	movne	r1, #1
    7c24:	4a16      	ldr	r2, [pc, #88]	; (7c80 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    7c26:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    7c2a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7c2e:	2000      	movs	r0, #0
    7c30:	2902      	cmp	r1, #2
    7c32:	bf38      	it	cc
    7c34:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    7c38:	d207      	bcs.n	7c4a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    7c3a:	bf00      	nop
    7c3c:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    7c40:	50d0      	str	r0, [r2, r3]
    7c42:	1c49      	adds	r1, r1, #1
    7c44:	b2c9      	uxtb	r1, r1
    7c46:	2902      	cmp	r1, #2
    7c48:	d3f8      	bcc.n	7c3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    7c4a:	490e      	ldr	r1, [pc, #56]	; (7c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    7c4c:	f04f 32ff 	mov.w	r2, #4294967295
    7c50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    7c54:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7c58:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    7c5c:	1d0a      	adds	r2, r1, #4
    7c5e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7c62:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    7c66:	1d12      	adds	r2, r2, #4
    7c68:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7c6c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    7c70:	1d12      	adds	r2, r2, #4
    7c72:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7c76:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    7c7a:	4770      	bx	lr
    7c7c:	2000002a 	.word	0x2000002a
    7c80:	4000b000 	.word	0x4000b000
    7c84:	40008000 	.word	0x40008000

00007c88 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    7c88:	b570      	push	{r4, r5, r6, lr}
    7c8a:	f3ef 8110 	mrs	r1, PRIMASK
    7c8e:	b672      	cpsid	i
    7c90:	2400      	movs	r4, #0
    7c92:	4b0d      	ldr	r3, [pc, #52]	; (7cc8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    7c94:	4a0d      	ldr	r2, [pc, #52]	; (7ccc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    7c96:	bf00      	nop
    7c98:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    7c9c:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    7ca0:	f1bc 0f00 	cmp.w	ip, #0
    7ca4:	d005      	beq.n	7cb2 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    7ca6:	6890      	ldr	r0, [r2, #8]
    7ca8:	1c40      	adds	r0, r0, #1
    7caa:	6090      	str	r0, [r2, #8]
    7cac:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    7cb0:	e7f2      	b.n	7c98 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    7cb2:	6895      	ldr	r5, [r2, #8]
    7cb4:	b901      	cbnz	r1, 7cb8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    7cb6:	b662      	cpsie	i
    7cb8:	f002 fca8 	bl	a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    7cbc:	4a04      	ldr	r2, [pc, #16]	; (7cd0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    7cbe:	4621      	mov	r1, r4
    7cc0:	fbe5 0102 	umlal	r0, r1, r5, r2
    7cc4:	bd70      	pop	{r4, r5, r6, pc}
    7cc6:	0000      	.short	0x0000
    7cc8:	4000b000 	.word	0x4000b000
    7ccc:	20000028 	.word	0x20000028
    7cd0:	1e848000 	.word	0x1e848000

00007cd4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    7cd4:	b510      	push	{r4, lr}
    7cd6:	2807      	cmp	r0, #7
    7cd8:	d20d      	bcs.n	7cf6 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    7cda:	e8df f000 	tbb	[pc, r0]
    7cde:	0404      	.short	0x0404
    7ce0:	06060404 	.word	0x06060404
    7ce4:	0006      	.short	0x0006
    7ce6:	4906      	ldr	r1, [pc, #24]	; (7d00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    7ce8:	e002      	b.n	7cf0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    7cea:	1f00      	subs	r0, r0, #4
    7cec:	4905      	ldr	r1, [pc, #20]	; (7d04 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    7cee:	b2c0      	uxtb	r0, r0
    7cf0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7cf4:	bd10      	pop	{r4, pc}
    7cf6:	f240 417b 	movw	r1, #1147	; 0x47b
    7cfa:	206c      	movs	r0, #108	; 0x6c
    7cfc:	f000 fbf4 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7d00:	40008140 	.word	0x40008140
    7d04:	4000b140 	.word	0x4000b140

00007d08 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    7d08:	b510      	push	{r4, lr}
    7d0a:	2807      	cmp	r0, #7
    7d0c:	d20d      	bcs.n	7d2a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    7d0e:	e8df f000 	tbb	[pc, r0]
    7d12:	0404      	.short	0x0404
    7d14:	06060404 	.word	0x06060404
    7d18:	0006      	.short	0x0006
    7d1a:	4906      	ldr	r1, [pc, #24]	; (7d34 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    7d1c:	e002      	b.n	7d24 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    7d1e:	1f00      	subs	r0, r0, #4
    7d20:	4905      	ldr	r1, [pc, #20]	; (7d38 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    7d22:	b2c0      	uxtb	r0, r0
    7d24:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7d28:	bd10      	pop	{r4, pc}
    7d2a:	f240 417b 	movw	r1, #1147	; 0x47b
    7d2e:	206c      	movs	r0, #108	; 0x6c
    7d30:	f000 fbda 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7d34:	40008140 	.word	0x40008140
    7d38:	4000b140 	.word	0x4000b140

00007d3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    7d3c:	b570      	push	{r4, r5, r6, lr}
    7d3e:	481b      	ldr	r0, [pc, #108]	; (7dac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    7d40:	2400      	movs	r4, #0
    7d42:	2104      	movs	r1, #4
    7d44:	7004      	strb	r4, [r0, #0]
    7d46:	1e80      	subs	r0, r0, #2
    7d48:	7001      	strb	r1, [r0, #0]
    7d4a:	1f49      	subs	r1, r1, #5
    7d4c:	e9c0 1104 	strd	r1, r1, [r0, #16]
    7d50:	6084      	str	r4, [r0, #8]
    7d52:	f7ff fc31 	bl	75b8 <MPSL_IRQ_TIMER0_Handler+0x100>
    7d56:	2501      	movs	r5, #1
    7d58:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    7d5c:	02eb      	lsls	r3, r5, #11
    7d5e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    7d62:	f3bf 8f4f 	dsb	sy
    7d66:	f3bf 8f6f 	isb	sy
    7d6a:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    7d6e:	4a10      	ldr	r2, [pc, #64]	; (7db0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    7d70:	6055      	str	r5, [r2, #4]
    7d72:	6095      	str	r5, [r2, #8]
    7d74:	480f      	ldr	r0, [pc, #60]	; (7db4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    7d76:	6801      	ldr	r1, [r0, #0]
    7d78:	2900      	cmp	r1, #0
    7d7a:	d1fc      	bne.n	7d76 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    7d7c:	480e      	ldr	r0, [pc, #56]	; (7db8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    7d7e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7d82:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    7d86:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    7d8a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    7d8e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    7d92:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    7d96:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    7d9a:	6015      	str	r5, [r2, #0]
    7d9c:	f44f 7082 	mov.w	r0, #260	; 0x104
    7da0:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    7da4:	2002      	movs	r0, #2
    7da6:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    7daa:	bd70      	pop	{r4, r5, r6, pc}
    7dac:	2000002a 	.word	0x2000002a
    7db0:	4000b000 	.word	0x4000b000
    7db4:	4000b504 	.word	0x4000b504
    7db8:	00070002 	.word	0x00070002

00007dbc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    7dbc:	4808      	ldr	r0, [pc, #32]	; (7de0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    7dbe:	f990 0000 	ldrsb.w	r0, [r0]
    7dc2:	2800      	cmp	r0, #0
    7dc4:	bfb8      	it	lt
    7dc6:	4770      	bxlt	lr
    7dc8:	f000 011f 	and.w	r1, r0, #31
    7dcc:	2201      	movs	r2, #1
    7dce:	fa02 f101 	lsl.w	r1, r2, r1
    7dd2:	0940      	lsrs	r0, r0, #5
    7dd4:	0080      	lsls	r0, r0, #2
    7dd6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7dda:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7dde:	4770      	bx	lr
    7de0:	20000198 	.word	0x20000198

00007de4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    7de4:	4803      	ldr	r0, [pc, #12]	; (7df4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    7de6:	7800      	ldrb	r0, [r0, #0]
    7de8:	2803      	cmp	r0, #3
    7dea:	bf0c      	ite	eq
    7dec:	2001      	moveq	r0, #1
    7dee:	2000      	movne	r0, #0
    7df0:	4770      	bx	lr
    7df2:	0000      	.short	0x0000
    7df4:	20000170 	.word	0x20000170

00007df8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    7df8:	4801      	ldr	r0, [pc, #4]	; (7e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    7dfa:	8840      	ldrh	r0, [r0, #2]
    7dfc:	4770      	bx	lr
    7dfe:	0000      	.short	0x0000
    7e00:	20000170 	.word	0x20000170

00007e04 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    7e04:	4803      	ldr	r0, [pc, #12]	; (7e14 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    7e06:	7800      	ldrb	r0, [r0, #0]
    7e08:	2802      	cmp	r0, #2
    7e0a:	bf16      	itet	ne
    7e0c:	2803      	cmpne	r0, #3
    7e0e:	2001      	moveq	r0, #1
    7e10:	2000      	movne	r0, #0
    7e12:	4770      	bx	lr
    7e14:	20000170 	.word	0x20000170

00007e18 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    7e18:	4802      	ldr	r0, [pc, #8]	; (7e24 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    7e1a:	2100      	movs	r1, #0
    7e1c:	7001      	strb	r1, [r0, #0]
    7e1e:	8041      	strh	r1, [r0, #2]
    7e20:	4770      	bx	lr
    7e22:	0000      	.short	0x0000
    7e24:	20000170 	.word	0x20000170

00007e28 <MPSL_IRQ_CLOCK_Handler>:
    7e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e2c:	4c16      	ldr	r4, [pc, #88]	; (7e88 <MPSL_IRQ_CLOCK_Handler+0x60>)
    7e2e:	7a60      	ldrb	r0, [r4, #9]
    7e30:	2800      	cmp	r0, #0
    7e32:	d027      	beq.n	7e84 <MPSL_IRQ_CLOCK_Handler+0x5c>
    7e34:	f44f 7180 	mov.w	r1, #256	; 0x100
    7e38:	058d      	lsls	r5, r1, #22
    7e3a:	4628      	mov	r0, r5
    7e3c:	f002 fc11 	bl	a662 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7e40:	4680      	mov	r8, r0
    7e42:	f44f 7182 	mov.w	r1, #260	; 0x104
    7e46:	4628      	mov	r0, r5
    7e48:	f002 fc0b 	bl	a662 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7e4c:	2600      	movs	r6, #0
    7e4e:	4607      	mov	r7, r0
    7e50:	f1b8 0f00 	cmp.w	r8, #0
    7e54:	d009      	beq.n	7e6a <MPSL_IRQ_CLOCK_Handler+0x42>
    7e56:	2001      	movs	r0, #1
    7e58:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7e5c:	7920      	ldrb	r0, [r4, #4]
    7e5e:	b120      	cbz	r0, 7e6a <MPSL_IRQ_CLOCK_Handler+0x42>
    7e60:	7126      	strb	r6, [r4, #4]
    7e62:	69e0      	ldr	r0, [r4, #28]
    7e64:	b108      	cbz	r0, 7e6a <MPSL_IRQ_CLOCK_Handler+0x42>
    7e66:	4780      	blx	r0
    7e68:	61e6      	str	r6, [r4, #28]
    7e6a:	b137      	cbz	r7, 7e7a <MPSL_IRQ_CLOCK_Handler+0x52>
    7e6c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    7e70:	2002      	movs	r0, #2
    7e72:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7e76:	f000 fa57 	bl	8328 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    7e7a:	4640      	mov	r0, r8
    7e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e80:	f000 b858 	b.w	7f34 <MPSL_IRQ_CLOCK_Handler+0x10c>
    7e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e88:	2000012c 	.word	0x2000012c
    7e8c:	b510      	push	{r4, lr}
    7e8e:	f002 fc92 	bl	a7b6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    7e92:	b930      	cbnz	r0, 7ea2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    7e94:	f002 fcb0 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7e98:	b918      	cbnz	r0, 7ea2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    7e9a:	f002 fce3 	bl	a864 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d002      	beq.n	7ea8 <MPSL_IRQ_CLOCK_Handler+0x80>
    7ea2:	4902      	ldr	r1, [pc, #8]	; (7eac <MPSL_IRQ_CLOCK_Handler+0x84>)
    7ea4:	2002      	movs	r0, #2
    7ea6:	6008      	str	r0, [r1, #0]
    7ea8:	bd10      	pop	{r4, pc}
    7eaa:	0000      	.short	0x0000
    7eac:	40000c34 	.word	0x40000c34
    7eb0:	b570      	push	{r4, r5, r6, lr}
    7eb2:	f000 f99b 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7eb6:	f000 fa9f 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7eba:	4c09      	ldr	r4, [pc, #36]	; (7ee0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    7ebc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7ec0:	b130      	cbz	r0, 7ed0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    7ec2:	f7ff ffe3 	bl	7e8c <MPSL_IRQ_CLOCK_Handler+0x64>
    7ec6:	2001      	movs	r0, #1
    7ec8:	6128      	str	r0, [r5, #16]
    7eca:	2004      	movs	r0, #4
    7ecc:	72a0      	strb	r0, [r4, #10]
    7ece:	e004      	b.n	7eda <MPSL_IRQ_CLOCK_Handler+0xb2>
    7ed0:	2003      	movs	r0, #3
    7ed2:	72a0      	strb	r0, [r4, #10]
    7ed4:	2001      	movs	r0, #1
    7ed6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7eda:	2000      	movs	r0, #0
    7edc:	71e0      	strb	r0, [r4, #7]
    7ede:	bd70      	pop	{r4, r5, r6, pc}
    7ee0:	2000012c 	.word	0x2000012c
    7ee4:	b570      	push	{r4, r5, r6, lr}
    7ee6:	4c12      	ldr	r4, [pc, #72]	; (7f30 <MPSL_IRQ_CLOCK_Handler+0x108>)
    7ee8:	79a0      	ldrb	r0, [r4, #6]
    7eea:	b1e0      	cbz	r0, 7f26 <MPSL_IRQ_CLOCK_Handler+0xfe>
    7eec:	79e1      	ldrb	r1, [r4, #7]
    7eee:	1e40      	subs	r0, r0, #1
    7ef0:	4281      	cmp	r1, r0
    7ef2:	da18      	bge.n	7f26 <MPSL_IRQ_CLOCK_Handler+0xfe>
    7ef4:	f000 fa80 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7ef8:	4605      	mov	r5, r0
    7efa:	f000 fb69 	bl	85d0 <mpsl_temperature_get>
    7efe:	79a1      	ldrb	r1, [r4, #6]
    7f00:	2901      	cmp	r1, #1
    7f02:	d902      	bls.n	7f0a <MPSL_IRQ_CLOCK_Handler+0xe2>
    7f04:	79e1      	ldrb	r1, [r4, #7]
    7f06:	1c49      	adds	r1, r1, #1
    7f08:	71e1      	strb	r1, [r4, #7]
    7f0a:	b10d      	cbz	r5, 7f10 <MPSL_IRQ_CLOCK_Handler+0xe8>
    7f0c:	6961      	ldr	r1, [r4, #20]
    7f0e:	e000      	b.n	7f12 <MPSL_IRQ_CLOCK_Handler+0xea>
    7f10:	6921      	ldr	r1, [r4, #16]
    7f12:	1a41      	subs	r1, r0, r1
    7f14:	2902      	cmp	r1, #2
    7f16:	da02      	bge.n	7f1e <MPSL_IRQ_CLOCK_Handler+0xf6>
    7f18:	f111 0f02 	cmn.w	r1, #2
    7f1c:	dc07      	bgt.n	7f2e <MPSL_IRQ_CLOCK_Handler+0x106>
    7f1e:	b10d      	cbz	r5, 7f24 <MPSL_IRQ_CLOCK_Handler+0xfc>
    7f20:	6160      	str	r0, [r4, #20]
    7f22:	e000      	b.n	7f26 <MPSL_IRQ_CLOCK_Handler+0xfe>
    7f24:	6120      	str	r0, [r4, #16]
    7f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f2a:	f7ff bfc1 	b.w	7eb0 <MPSL_IRQ_CLOCK_Handler+0x88>
    7f2e:	bd70      	pop	{r4, r5, r6, pc}
    7f30:	2000012c 	.word	0x2000012c
    7f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f38:	4606      	mov	r6, r0
    7f3a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7f3e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7f42:	4628      	mov	r0, r5
    7f44:	f002 fb8d 	bl	a662 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7f48:	4680      	mov	r8, r0
    7f4a:	f44f 7188 	mov.w	r1, #272	; 0x110
    7f4e:	4628      	mov	r0, r5
    7f50:	f002 fb87 	bl	a662 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7f54:	4c27      	ldr	r4, [pc, #156]	; (7ff4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    7f56:	4682      	mov	sl, r0
    7f58:	7827      	ldrb	r7, [r4, #0]
    7f5a:	f104 0008 	add.w	r0, r4, #8
    7f5e:	f002 fbf4 	bl	a74a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    7f62:	b110      	cbz	r0, 7f6a <MPSL_IRQ_CLOCK_Handler+0x142>
    7f64:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    7f68:	e016      	b.n	7f98 <MPSL_IRQ_CLOCK_Handler+0x170>
    7f6a:	f04f 0901 	mov.w	r9, #1
    7f6e:	b146      	cbz	r6, 7f82 <MPSL_IRQ_CLOCK_Handler+0x15a>
    7f70:	7aa0      	ldrb	r0, [r4, #10]
    7f72:	2803      	cmp	r0, #3
    7f74:	d105      	bne.n	7f82 <MPSL_IRQ_CLOCK_Handler+0x15a>
    7f76:	2004      	movs	r0, #4
    7f78:	72a0      	strb	r0, [r4, #10]
    7f7a:	f7ff ff87 	bl	7e8c <MPSL_IRQ_CLOCK_Handler+0x64>
    7f7e:	f8c5 9010 	str.w	r9, [r5, #16]
    7f82:	2600      	movs	r6, #0
    7f84:	f1b8 0f00 	cmp.w	r8, #0
    7f88:	d018      	beq.n	7fbc <MPSL_IRQ_CLOCK_Handler+0x194>
    7f8a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    7f8e:	7aa0      	ldrb	r0, [r4, #10]
    7f90:	2804      	cmp	r0, #4
    7f92:	d004      	beq.n	7f9e <MPSL_IRQ_CLOCK_Handler+0x176>
    7f94:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    7f98:	206d      	movs	r0, #109	; 0x6d
    7f9a:	f000 faa5 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7f9e:	f002 fc0a 	bl	a7b6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    7fa2:	b928      	cbnz	r0, 7fb0 <MPSL_IRQ_CLOCK_Handler+0x188>
    7fa4:	f002 fc28 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7fa8:	b910      	cbnz	r0, 7fb0 <MPSL_IRQ_CLOCK_Handler+0x188>
    7faa:	f002 fc5b 	bl	a864 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7fae:	b108      	cbz	r0, 7fb4 <MPSL_IRQ_CLOCK_Handler+0x18c>
    7fb0:	4811      	ldr	r0, [pc, #68]	; (7ff8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    7fb2:	6006      	str	r6, [r0, #0]
    7fb4:	2002      	movs	r0, #2
    7fb6:	72a0      	strb	r0, [r4, #10]
    7fb8:	f000 f8fc 	bl	81b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7fbc:	f1ba 0f00 	cmp.w	sl, #0
    7fc0:	d008      	beq.n	7fd4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    7fc2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    7fc6:	7aa0      	ldrb	r0, [r4, #10]
    7fc8:	2802      	cmp	r0, #2
    7fca:	d101      	bne.n	7fd0 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    7fcc:	f7ff ff8a 	bl	7ee4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    7fd0:	f8c5 9014 	str.w	r9, [r5, #20]
    7fd4:	b13f      	cbz	r7, 7fe6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    7fd6:	7026      	strb	r6, [r4, #0]
    7fd8:	7aa0      	ldrb	r0, [r4, #10]
    7fda:	2802      	cmp	r0, #2
    7fdc:	d101      	bne.n	7fe2 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    7fde:	f7ff ff67 	bl	7eb0 <MPSL_IRQ_CLOCK_Handler+0x88>
    7fe2:	f000 f8e7 	bl	81b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7fe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fea:	4802      	ldr	r0, [pc, #8]	; (7ff4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    7fec:	3008      	adds	r0, #8
    7fee:	f002 bbc3 	b.w	a778 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    7ff2:	0000      	.short	0x0000
    7ff4:	2000012c 	.word	0x2000012c
    7ff8:	40000c34 	.word	0x40000c34
    7ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8000:	4c49      	ldr	r4, [pc, #292]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    8002:	2700      	movs	r7, #0
    8004:	4606      	mov	r6, r0
    8006:	61a7      	str	r7, [r4, #24]
    8008:	7842      	ldrb	r2, [r0, #1]
    800a:	7881      	ldrb	r1, [r0, #2]
    800c:	7800      	ldrb	r0, [r0, #0]
    800e:	72e0      	strb	r0, [r4, #11]
    8010:	7162      	strb	r2, [r4, #5]
    8012:	71a1      	strb	r1, [r4, #6]
    8014:	71e7      	strb	r7, [r4, #7]
    8016:	f04f 0801 	mov.w	r8, #1
    801a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    801e:	2805      	cmp	r0, #5
    8020:	d225      	bcs.n	806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
    8022:	e8df f000 	tbb	[pc, r0]
    8026:	0310      	.short	0x0310
    8028:	00222006 	.word	0x00222006
    802c:	f8c4 8018 	str.w	r8, [r4, #24]
    8030:	e009      	b.n	8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
    8032:	f000 f8db 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    8036:	2101      	movs	r1, #1
    8038:	4628      	mov	r0, r5
    803a:	f002 fb17 	bl	a66c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    803e:	2800      	cmp	r0, #0
    8040:	d0f9      	beq.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
    8042:	2002      	movs	r0, #2
    8044:	61a0      	str	r0, [r4, #24]
    8046:	f002 fb3d 	bl	a6c4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    804a:	b1c0      	cbz	r0, 807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    804c:	f000 f9ee 	bl	842c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    8050:	7e21      	ldrb	r1, [r4, #24]
    8052:	f001 0103 	and.w	r1, r1, #3
    8056:	4288      	cmp	r0, r1
    8058:	d111      	bne.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    805a:	79b0      	ldrb	r0, [r6, #6]
    805c:	b160      	cbz	r0, 8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    805e:	2002      	movs	r0, #2
    8060:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    8064:	e044      	b.n	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
    8066:	4831      	ldr	r0, [pc, #196]	; (812c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c>)
    8068:	e7ec      	b.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
    806a:	4831      	ldr	r0, [pc, #196]	; (8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>)
    806c:	e7ea      	b.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
    806e:	f240 313d 	movw	r1, #829	; 0x33d
    8072:	206d      	movs	r0, #109	; 0x6d
    8074:	f000 fa38 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8078:	f000 f9ac 	bl	83d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    807c:	e038      	b.n	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
    807e:	f8c5 800c 	str.w	r8, [r5, #12]
    8082:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    8086:	69a0      	ldr	r0, [r4, #24]
    8088:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    808c:	f002 fb7f 	bl	a78e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8090:	b940      	cbnz	r0, 80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    8092:	f002 fb86 	bl	a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8096:	b928      	cbnz	r0, 80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    8098:	f002 fb9a 	bl	a7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    809c:	b910      	cbnz	r0, 80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    809e:	f002 fbab 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    80a2:	b138      	cbz	r0, 80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
    80a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    80a8:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    80ac:	4921      	ldr	r1, [pc, #132]	; (8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>)
    80ae:	f3c0 3042 	ubfx	r0, r0, #13, #3
    80b2:	6008      	str	r0, [r1, #0]
    80b4:	f002 fb6b 	bl	a78e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    80b8:	b940      	cbnz	r0, 80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    80ba:	f002 fb72 	bl	a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    80be:	b928      	cbnz	r0, 80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    80c0:	f002 fb86 	bl	a7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    80c4:	b910      	cbnz	r0, 80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    80c6:	f002 fb97 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    80ca:	b118      	cbz	r0, 80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80cc:	4919      	ldr	r1, [pc, #100]	; (8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>)
    80ce:	3110      	adds	r1, #16
    80d0:	f8c1 8000 	str.w	r8, [r1]
    80d4:	f8c5 8008 	str.w	r8, [r5, #8]
    80d8:	2002      	movs	r0, #2
    80da:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    80de:	79b0      	ldrb	r0, [r6, #6]
    80e0:	b930      	cbnz	r0, 80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
    80e2:	f000 f829 	bl	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    80e6:	2002      	movs	r0, #2
    80e8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    80ec:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    80f0:	79a0      	ldrb	r0, [r4, #6]
    80f2:	b170      	cbz	r0, 8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
    80f4:	7830      	ldrb	r0, [r6, #0]
    80f6:	b960      	cbnz	r0, 8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
    80f8:	f000 f97e 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    80fc:	4606      	mov	r6, r0
    80fe:	f000 fa67 	bl	85d0 <mpsl_temperature_get>
    8102:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8106:	b116      	cbz	r6, 810e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10e>
    8108:	e9c4 1004 	strd	r1, r0, [r4, #16]
    810c:	e001      	b.n	8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
    810e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    8112:	2101      	movs	r1, #1
    8114:	4628      	mov	r0, r5
    8116:	f002 faa9 	bl	a66c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    811a:	b108      	cbz	r0, 8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>
    811c:	f000 f966 	bl	83ec <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    8120:	72a7      	strb	r7, [r4, #10]
    8122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8126:	0000      	.short	0x0000
    8128:	2000012c 	.word	0x2000012c
    812c:	00020001 	.word	0x00020001
    8130:	00030001 	.word	0x00030001
    8134:	4000053c 	.word	0x4000053c
    8138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    813c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    8140:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    8144:	f010 0f02 	tst.w	r0, #2
    8148:	d011      	beq.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
    814a:	4c16      	ldr	r4, [pc, #88]	; (81a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a4>)
    814c:	6820      	ldr	r0, [r4, #0]
    814e:	43c0      	mvns	r0, r0
    8150:	f340 1600 	sbfx	r6, r0, #4, #1
    8154:	6820      	ldr	r0, [r4, #0]
    8156:	f040 0010 	orr.w	r0, r0, #16
    815a:	6020      	str	r0, [r4, #0]
    815c:	f44f 7782 	mov.w	r7, #260	; 0x104
    8160:	4639      	mov	r1, r7
    8162:	4628      	mov	r0, r5
    8164:	1c76      	adds	r6, r6, #1
    8166:	f002 fa7c 	bl	a662 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    816a:	b128      	cbz	r0, 8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    816c:	e00a      	b.n	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    816e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    8172:	206d      	movs	r0, #109	; 0x6d
    8174:	f000 f9b8 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8178:	f002 fb80 	bl	a87c <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    817c:	e002      	b.n	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    817e:	bf00      	nop
    8180:	f002 fb7a 	bl	a878 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    8184:	4639      	mov	r1, r7
    8186:	4628      	mov	r0, r5
    8188:	f002 fa6b 	bl	a662 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    818c:	2800      	cmp	r0, #0
    818e:	d0f7      	beq.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    8190:	f000 f920 	bl	83d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    8194:	2e00      	cmp	r6, #0
    8196:	d103      	bne.n	81a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0>
    8198:	6820      	ldr	r0, [r4, #0]
    819a:	f020 0010 	bic.w	r0, r0, #16
    819e:	6020      	str	r0, [r4, #0]
    81a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81a4:	e000ed10 	.word	0xe000ed10

000081a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    81a8:	4801      	ldr	r0, [pc, #4]	; (81b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    81aa:	89c0      	ldrh	r0, [r0, #14]
    81ac:	4770      	bx	lr
    81ae:	0000      	.short	0x0000
    81b0:	2000012c 	.word	0x2000012c

000081b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    81b4:	b510      	push	{r4, lr}
    81b6:	f3ef 8410 	mrs	r4, PRIMASK
    81ba:	b672      	cpsid	i
    81bc:	480a      	ldr	r0, [pc, #40]	; (81e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    81be:	7841      	ldrb	r1, [r0, #1]
    81c0:	b129      	cbz	r1, 81ce <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    81c2:	7841      	ldrb	r1, [r0, #1]
    81c4:	1e49      	subs	r1, r1, #1
    81c6:	7041      	strb	r1, [r0, #1]
    81c8:	7841      	ldrb	r1, [r0, #1]
    81ca:	b129      	cbz	r1, 81d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    81cc:	e008      	b.n	81e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    81ce:	f240 1119 	movw	r1, #281	; 0x119
    81d2:	206d      	movs	r0, #109	; 0x6d
    81d4:	f000 f988 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    81d8:	7880      	ldrb	r0, [r0, #2]
    81da:	b908      	cbnz	r0, 81e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    81dc:	f000 f91a 	bl	8414 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    81e0:	2c00      	cmp	r4, #0
    81e2:	d100      	bne.n	81e6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    81e4:	b662      	cpsie	i
    81e6:	bd10      	pop	{r4, pc}
    81e8:	2000012c 	.word	0x2000012c

000081ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    81ec:	b510      	push	{r4, lr}
    81ee:	f3ef 8410 	mrs	r4, PRIMASK
    81f2:	b672      	cpsid	i
    81f4:	4806      	ldr	r0, [pc, #24]	; (8210 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    81f6:	7841      	ldrb	r1, [r0, #1]
    81f8:	1c49      	adds	r1, r1, #1
    81fa:	7041      	strb	r1, [r0, #1]
    81fc:	7840      	ldrb	r0, [r0, #1]
    81fe:	2801      	cmp	r0, #1
    8200:	d101      	bne.n	8206 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    8202:	f002 fa4a 	bl	a69a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    8206:	2c00      	cmp	r4, #0
    8208:	d100      	bne.n	820c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    820a:	b662      	cpsie	i
    820c:	bd10      	pop	{r4, pc}
    820e:	0000      	.short	0x0000
    8210:	2000012c 	.word	0x2000012c

00008214 <mpsl_clock_hfclk_release>:
    8214:	4805      	ldr	r0, [pc, #20]	; (822c <mpsl_clock_hfclk_release+0x18>)
    8216:	b510      	push	{r4, lr}
    8218:	78c1      	ldrb	r1, [r0, #3]
    821a:	b121      	cbz	r1, 8226 <mpsl_clock_hfclk_release+0x12>
    821c:	2100      	movs	r1, #0
    821e:	7101      	strb	r1, [r0, #4]
    8220:	70c1      	strb	r1, [r0, #3]
    8222:	f7ff ffc7 	bl	81b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    8226:	2000      	movs	r0, #0
    8228:	bd10      	pop	{r4, pc}
    822a:	0000      	.short	0x0000
    822c:	2000012c 	.word	0x2000012c

00008230 <mpsl_clock_hfclk_request>:
    8230:	b570      	push	{r4, r5, r6, lr}
    8232:	4c0c      	ldr	r4, [pc, #48]	; (8264 <mpsl_clock_hfclk_request+0x34>)
    8234:	78e1      	ldrb	r1, [r4, #3]
    8236:	b961      	cbnz	r1, 8252 <mpsl_clock_hfclk_request+0x22>
    8238:	2501      	movs	r5, #1
    823a:	70e5      	strb	r5, [r4, #3]
    823c:	61e0      	str	r0, [r4, #28]
    823e:	f7ff ffd5 	bl	81ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    8242:	f000 f8d9 	bl	83f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8246:	b130      	cbz	r0, 8256 <mpsl_clock_hfclk_request+0x26>
    8248:	69e0      	ldr	r0, [r4, #28]
    824a:	b110      	cbz	r0, 8252 <mpsl_clock_hfclk_request+0x22>
    824c:	4780      	blx	r0
    824e:	2000      	movs	r0, #0
    8250:	61e0      	str	r0, [r4, #28]
    8252:	2000      	movs	r0, #0
    8254:	bd70      	pop	{r4, r5, r6, pc}
    8256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    825a:	7125      	strb	r5, [r4, #4]
    825c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    8260:	e7f7      	b.n	8252 <mpsl_clock_hfclk_request+0x22>
    8262:	0000      	.short	0x0000
    8264:	2000012c 	.word	0x2000012c

00008268 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    8268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    826c:	0005      	movs	r5, r0
    826e:	f06f 0015 	mvn.w	r0, #21
    8272:	d03f      	beq.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    8274:	7829      	ldrb	r1, [r5, #0]
    8276:	2904      	cmp	r1, #4
    8278:	d83c      	bhi.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    827a:	2900      	cmp	r1, #0
    827c:	7869      	ldrb	r1, [r5, #1]
    827e:	d03b      	beq.n	82f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    8280:	2900      	cmp	r1, #0
    8282:	d137      	bne.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    8284:	78a9      	ldrb	r1, [r5, #2]
    8286:	2900      	cmp	r1, #0
    8288:	d134      	bne.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    828a:	2000      	movs	r0, #0
    828c:	f002 f9d8 	bl	a640 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    8290:	2000      	movs	r0, #0
    8292:	f002 f9c8 	bl	a626 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    8296:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    829a:	f04f 31ff 	mov.w	r1, #4294967295
    829e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    82a2:	2600      	movs	r6, #0
    82a4:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    82a8:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    82ac:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    82b0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    82b4:	4c14      	ldr	r4, [pc, #80]	; (8308 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    82b6:	7066      	strb	r6, [r4, #1]
    82b8:	88a8      	ldrh	r0, [r5, #4]
    82ba:	81a0      	strh	r0, [r4, #12]
    82bc:	f002 f9e4 	bl	a688 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    82c0:	2701      	movs	r7, #1
    82c2:	b108      	cbz	r0, 82c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    82c4:	70e7      	strb	r7, [r4, #3]
    82c6:	7067      	strb	r7, [r4, #1]
    82c8:	2101      	movs	r1, #1
    82ca:	4640      	mov	r0, r8
    82cc:	f002 f9ce 	bl	a66c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    82d0:	b108      	cbz	r0, 82d6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    82d2:	f000 f88b 	bl	83ec <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    82d6:	f240 50f5 	movw	r0, #1525	; 0x5f5
    82da:	81e0      	strh	r0, [r4, #14]
    82dc:	4628      	mov	r0, r5
    82de:	f7ff fe8d 	bl	7ffc <MPSL_IRQ_CLOCK_Handler+0x1d4>
    82e2:	7267      	strb	r7, [r4, #9]
    82e4:	2000      	movs	r0, #0
    82e6:	f002 f99e 	bl	a626 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    82ea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    82ee:	4630      	mov	r0, r6
    82f0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    82f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82f8:	2900      	cmp	r1, #0
    82fa:	d0fb      	beq.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    82fc:	2920      	cmp	r1, #32
    82fe:	d8f9      	bhi.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    8300:	78a9      	ldrb	r1, [r5, #2]
    8302:	2921      	cmp	r1, #33	; 0x21
    8304:	d9c1      	bls.n	828a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    8306:	e7f5      	b.n	82f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    8308:	2000012c 	.word	0x2000012c

0000830c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    830c:	4801      	ldr	r0, [pc, #4]	; (8314 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    830e:	8980      	ldrh	r0, [r0, #12]
    8310:	4770      	bx	lr
    8312:	0000      	.short	0x0000
    8314:	2000012c 	.word	0x2000012c

00008318 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    8318:	4802      	ldr	r0, [pc, #8]	; (8324 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    831a:	7a80      	ldrb	r0, [r0, #10]
    831c:	2800      	cmp	r0, #0
    831e:	d000      	beq.n	8322 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    8320:	2001      	movs	r0, #1
    8322:	4770      	bx	lr
    8324:	2000012c 	.word	0x2000012c

00008328 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    8328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    832a:	4d1f      	ldr	r5, [pc, #124]	; (83a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    832c:	7ae8      	ldrb	r0, [r5, #11]
    832e:	2800      	cmp	r0, #0
    8330:	d10f      	bne.n	8352 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    8332:	7e28      	ldrb	r0, [r5, #24]
    8334:	f000 0003 	and.w	r0, r0, #3
    8338:	f002 f9b4 	bl	a6a4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    833c:	2800      	cmp	r0, #0
    833e:	d008      	beq.n	8352 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    8340:	f3ef 8110 	mrs	r1, PRIMASK
    8344:	b672      	cpsid	i
    8346:	f7ff ffe7 	bl	8318 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    834a:	b118      	cbz	r0, 8354 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    834c:	2900      	cmp	r1, #0
    834e:	d100      	bne.n	8352 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    8350:	b662      	cpsie	i
    8352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8354:	2601      	movs	r6, #1
    8356:	72ae      	strb	r6, [r5, #10]
    8358:	b901      	cbnz	r1, 835c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    835a:	b662      	cpsie	i
    835c:	2018      	movs	r0, #24
    835e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    8362:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    8366:	61a6      	str	r6, [r4, #24]
    8368:	f44f 7020 	mov.w	r0, #640	; 0x280
    836c:	f8ad 0000 	strh.w	r0, [sp]
    8370:	f8bd 0000 	ldrh.w	r0, [sp]
    8374:	1e41      	subs	r1, r0, #1
    8376:	f8ad 1000 	strh.w	r1, [sp]
    837a:	d2f9      	bcs.n	8370 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    837c:	2700      	movs	r7, #0
    837e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    8382:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    8386:	4808      	ldr	r0, [pc, #32]	; (83a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    8388:	3008      	adds	r0, #8
    838a:	f002 f9f1 	bl	a770 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    838e:	702f      	strb	r7, [r5, #0]
    8390:	f7ff fd8e 	bl	7eb0 <MPSL_IRQ_CLOCK_Handler+0x88>
    8394:	6166      	str	r6, [r4, #20]
    8396:	7968      	ldrb	r0, [r5, #5]
    8398:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    839c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    83a0:	2018      	movs	r0, #24
    83a2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    83a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83a8:	2000012c 	.word	0x2000012c

000083ac <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    83ac:	4602      	mov	r2, r0
    83ae:	b510      	push	{r4, lr}
    83b0:	2000      	movs	r0, #0
    83b2:	2900      	cmp	r1, #0
    83b4:	d00a      	beq.n	83cc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    83b6:	2a00      	cmp	r2, #0
    83b8:	d008      	beq.n	83cc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    83ba:	fba2 0101 	umull	r0, r1, r2, r1
    83be:	1e40      	subs	r0, r0, #1
    83c0:	4a03      	ldr	r2, [pc, #12]	; (83d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    83c2:	f141 31ff 	adc.w	r1, r1, #4294967295
    83c6:	f002 fa5b 	bl	a880 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    83ca:	1c40      	adds	r0, r0, #1
    83cc:	bd10      	pop	{r4, pc}
    83ce:	0000      	.short	0x0000
    83d0:	000f4240 	.word	0x000f4240

000083d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    83d4:	b510      	push	{r4, lr}
    83d6:	4c04      	ldr	r4, [pc, #16]	; (83e8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    83d8:	7e20      	ldrb	r0, [r4, #24]
    83da:	f000 0003 	and.w	r0, r0, #3
    83de:	f002 f961 	bl	a6a4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    83e2:	2800      	cmp	r0, #0
    83e4:	d0f8      	beq.n	83d8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    83e6:	bd10      	pop	{r4, pc}
    83e8:	2000012c 	.word	0x2000012c

000083ec <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    83ec:	4901      	ldr	r1, [pc, #4]	; (83f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    83ee:	2001      	movs	r0, #1
    83f0:	7008      	strb	r0, [r1, #0]
    83f2:	4770      	bx	lr
    83f4:	20000199 	.word	0x20000199

000083f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    83f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    83fc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    8400:	b918      	cbnz	r0, 840a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    8402:	4803      	ldr	r0, [pc, #12]	; (8410 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    8404:	7800      	ldrb	r0, [r0, #0]
    8406:	2800      	cmp	r0, #0
    8408:	d000      	beq.n	840c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    840a:	2001      	movs	r0, #1
    840c:	4770      	bx	lr
    840e:	0000      	.short	0x0000
    8410:	20000199 	.word	0x20000199

00008414 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    8414:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8418:	2101      	movs	r1, #1
    841a:	6041      	str	r1, [r0, #4]
    841c:	2100      	movs	r1, #0
    841e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8422:	4801      	ldr	r0, [pc, #4]	; (8428 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    8424:	7001      	strb	r1, [r0, #0]
    8426:	4770      	bx	lr
    8428:	20000199 	.word	0x20000199

0000842c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    842c:	4802      	ldr	r0, [pc, #8]	; (8438 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    842e:	6800      	ldr	r0, [r0, #0]
    8430:	f000 0003 	and.w	r0, r0, #3
    8434:	4770      	bx	lr
    8436:	0000      	.short	0x0000
    8438:	4000041c 	.word	0x4000041c
    843c:	b510      	push	{r4, lr}
    843e:	b131      	cbz	r1, 844e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    8440:	2901      	cmp	r1, #1
    8442:	d007      	beq.n	8454 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    8444:	f240 3102 	movw	r1, #770	; 0x302
    8448:	a005      	add	r0, pc, #20	; (adr r0, 8460 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    844a:	f000 f821 	bl	8490 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    844e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    8452:	e001      	b.n	8458 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    8454:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    8458:	f000 0001 	and.w	r0, r0, #1
    845c:	bd10      	pop	{r4, pc}
    845e:	0000      	.short	0x0000
    8460:	5f66726e 	.word	0x5f66726e
    8464:	636f6c63 	.word	0x636f6c63
    8468:	00682e6b 	.word	0x00682e6b
    846c:	f3bf 8f4f 	dsb	sy
    8470:	4805      	ldr	r0, [pc, #20]	; (8488 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    8472:	6801      	ldr	r1, [r0, #0]
    8474:	4a05      	ldr	r2, [pc, #20]	; (848c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    8476:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    847a:	4311      	orrs	r1, r2
    847c:	6001      	str	r1, [r0, #0]
    847e:	f3bf 8f4f 	dsb	sy
    8482:	bf00      	nop
    8484:	e7fd      	b.n	8482 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    8486:	0000      	.short	0x0000
    8488:	e000ed0c 	.word	0xe000ed0c
    848c:	05fa0004 	.word	0x05fa0004

00008490 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    8490:	b672      	cpsid	i
    8492:	4a03      	ldr	r2, [pc, #12]	; (84a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    8494:	6852      	ldr	r2, [r2, #4]
    8496:	b102      	cbz	r2, 849a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    8498:	4790      	blx	r2
    849a:	f7ff ffe7 	bl	846c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    849e:	0000      	.short	0x0000
    84a0:	2000014c 	.word	0x2000014c
    84a4:	4806      	ldr	r0, [pc, #24]	; (84c0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    84a6:	b510      	push	{r4, lr}
    84a8:	2100      	movs	r1, #0
    84aa:	6001      	str	r1, [r0, #0]
    84ac:	2101      	movs	r1, #1
    84ae:	6001      	str	r1, [r0, #0]
    84b0:	4608      	mov	r0, r1
    84b2:	f002 f91e 	bl	a6f2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    84b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84ba:	2001      	movs	r0, #1
    84bc:	f002 b90c 	b.w	a6d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    84c0:	40001ffc 	.word	0x40001ffc
    84c4:	4807      	ldr	r0, [pc, #28]	; (84e4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    84c6:	b510      	push	{r4, lr}
    84c8:	2101      	movs	r1, #1
    84ca:	6041      	str	r1, [r0, #4]
    84cc:	1e89      	subs	r1, r1, #2
    84ce:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    84d2:	200c      	movs	r0, #12
    84d4:	f002 f90d 	bl	a6f2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    84d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84dc:	200c      	movs	r0, #12
    84de:	f002 b8fb 	b.w	a6d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    84e2:	0000      	.short	0x0000
    84e4:	4000c000 	.word	0x4000c000

000084e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    84e8:	b50e      	push	{r1, r2, r3, lr}
    84ea:	b672      	cpsid	i
    84ec:	4a0f      	ldr	r2, [pc, #60]	; (852c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    84ee:	6855      	ldr	r5, [r2, #4]
    84f0:	b1d5      	cbz	r5, 8528 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    84f2:	2200      	movs	r2, #0
    84f4:	4603      	mov	r3, r0
    84f6:	466e      	mov	r6, sp
    84f8:	240a      	movs	r4, #10
    84fa:	e003      	b.n	8504 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    84fc:	fbb0 f0f4 	udiv	r0, r0, r4
    8500:	1c52      	adds	r2, r2, #1
    8502:	b2d2      	uxtb	r2, r2
    8504:	2800      	cmp	r0, #0
    8506:	d1f9      	bne.n	84fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    8508:	54b0      	strb	r0, [r6, r2]
    850a:	e009      	b.n	8520 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    850c:	fbb3 f0f4 	udiv	r0, r3, r4
    8510:	fb04 3010 	mls	r0, r4, r0, r3
    8514:	fbb3 f3f4 	udiv	r3, r3, r4
    8518:	1e52      	subs	r2, r2, #1
    851a:	b2d2      	uxtb	r2, r2
    851c:	3030      	adds	r0, #48	; 0x30
    851e:	54b0      	strb	r0, [r6, r2]
    8520:	2a00      	cmp	r2, #0
    8522:	d1f3      	bne.n	850c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    8524:	4630      	mov	r0, r6
    8526:	47a8      	blx	r5
    8528:	f7ff ffa0 	bl	846c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    852c:	2000014c 	.word	0x2000014c

00008530 <mpsl_init>:
    8530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8534:	4c18      	ldr	r4, [pc, #96]	; (8598 <mpsl_init+0x68>)
    8536:	4606      	mov	r6, r0
    8538:	4617      	mov	r7, r2
    853a:	7860      	ldrb	r0, [r4, #1]
    853c:	460d      	mov	r5, r1
    853e:	b118      	cbz	r0, 8548 <mpsl_init+0x18>
    8540:	f04f 30ff 	mov.w	r0, #4294967295
    8544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8548:	f7fc fb9e 	bl	4c88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    854c:	b906      	cbnz	r6, 8550 <mpsl_init+0x20>
    854e:	4e13      	ldr	r6, [pc, #76]	; (859c <mpsl_init+0x6c>)
    8550:	6067      	str	r7, [r4, #4]
    8552:	7025      	strb	r5, [r4, #0]
    8554:	f7ff ffa6 	bl	84a4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    8558:	f7ff ffb4 	bl	84c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    855c:	4630      	mov	r0, r6
    855e:	f7ff fe83 	bl	8268 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    8562:	0006      	movs	r6, r0
    8564:	d1ee      	bne.n	8544 <mpsl_init+0x14>
    8566:	f7fe fe4f 	bl	7208 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    856a:	f7ff fedd 	bl	8328 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    856e:	f002 f830 	bl	a5d2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    8572:	4628      	mov	r0, r5
    8574:	f002 f8b0 	bl	a6d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    8578:	2001      	movs	r0, #1
    857a:	2d00      	cmp	r5, #0
    857c:	db09      	blt.n	8592 <mpsl_init+0x62>
    857e:	f005 011f 	and.w	r1, r5, #31
    8582:	fa00 f101 	lsl.w	r1, r0, r1
    8586:	096a      	lsrs	r2, r5, #5
    8588:	0092      	lsls	r2, r2, #2
    858a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    858e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    8592:	7060      	strb	r0, [r4, #1]
    8594:	4630      	mov	r0, r6
    8596:	e7d5      	b.n	8544 <mpsl_init+0x14>
    8598:	2000014c 	.word	0x2000014c
    859c:	0000a714 	.word	0x0000a714

000085a0 <mpsl_is_initialized>:
    85a0:	4801      	ldr	r0, [pc, #4]	; (85a8 <mpsl_is_initialized+0x8>)
    85a2:	7840      	ldrb	r0, [r0, #1]
    85a4:	4770      	bx	lr
    85a6:	0000      	.short	0x0000
    85a8:	2000014c 	.word	0x2000014c

000085ac <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    85ac:	4807      	ldr	r0, [pc, #28]	; (85cc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    85ae:	f990 0000 	ldrsb.w	r0, [r0]
    85b2:	2800      	cmp	r0, #0
    85b4:	db09      	blt.n	85ca <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    85b6:	f000 021f 	and.w	r2, r0, #31
    85ba:	2101      	movs	r1, #1
    85bc:	4091      	lsls	r1, r2
    85be:	0940      	lsrs	r0, r0, #5
    85c0:	0080      	lsls	r0, r0, #2
    85c2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    85c6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    85ca:	4770      	bx	lr
    85cc:	2000014c 	.word	0x2000014c

000085d0 <mpsl_temperature_get>:
    85d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85d4:	2501      	movs	r5, #1
    85d6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    85da:	0329      	lsls	r1, r5, #12
    85dc:	f04f 0800 	mov.w	r8, #0
    85e0:	4640      	mov	r0, r8
    85e2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    85e6:	f3bf 8f4f 	dsb	sy
    85ea:	f3bf 8f6f 	isb	sy
    85ee:	4c16      	ldr	r4, [pc, #88]	; (8648 <mpsl_temperature_get+0x78>)
    85f0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    85f4:	200c      	movs	r0, #12
    85f6:	f002 f89b 	bl	a730 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    85fa:	4e14      	ldr	r6, [pc, #80]	; (864c <mpsl_temperature_get+0x7c>)
    85fc:	6830      	ldr	r0, [r6, #0]
    85fe:	43c0      	mvns	r0, r0
    8600:	f340 1700 	sbfx	r7, r0, #4, #1
    8604:	6830      	ldr	r0, [r6, #0]
    8606:	f040 0010 	orr.w	r0, r0, #16
    860a:	6030      	str	r0, [r6, #0]
    860c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    8610:	6025      	str	r5, [r4, #0]
    8612:	1c7f      	adds	r7, r7, #1
    8614:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    8618:	b108      	cbz	r0, 861e <mpsl_temperature_get+0x4e>
    861a:	b11f      	cbz	r7, 8624 <mpsl_temperature_get+0x54>
    861c:	e006      	b.n	862c <mpsl_temperature_get+0x5c>
    861e:	f002 f92b 	bl	a878 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    8622:	e7f7      	b.n	8614 <mpsl_temperature_get+0x44>
    8624:	6830      	ldr	r0, [r6, #0]
    8626:	f020 0010 	bic.w	r0, r0, #16
    862a:	6030      	str	r0, [r6, #0]
    862c:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    8630:	6065      	str	r5, [r4, #4]
    8632:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    8636:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    863a:	200c      	movs	r0, #12
    863c:	f002 f878 	bl	a730 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    8640:	4630      	mov	r0, r6
    8642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8646:	0000      	.short	0x0000
    8648:	4000c000 	.word	0x4000c000
    864c:	e000ed10 	.word	0xe000ed10

00008650 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    8650:	b510      	push	{r4, lr}
    8652:	4602      	mov	r2, r0
    8654:	2005      	movs	r0, #5
    8656:	490c      	ldr	r1, [pc, #48]	; (8688 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    8658:	e004      	b.n	8664 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    865a:	bf00      	nop
    865c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    8660:	791b      	ldrb	r3, [r3, #4]
    8662:	b133      	cbz	r3, 8672 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    8664:	1e40      	subs	r0, r0, #1
    8666:	b2c0      	uxtb	r0, r0
    8668:	d2f8      	bcs.n	865c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    866a:	2148      	movs	r1, #72	; 0x48
    866c:	2069      	movs	r0, #105	; 0x69
    866e:	f7ff ff3b 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8672:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    8676:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    867a:	2200      	movs	r2, #0
    867c:	714a      	strb	r2, [r1, #5]
    867e:	718a      	strb	r2, [r1, #6]
    8680:	2201      	movs	r2, #1
    8682:	710a      	strb	r2, [r1, #4]
    8684:	bd10      	pop	{r4, pc}
    8686:	0000      	.short	0x0000
    8688:	20000e24 	.word	0x20000e24

0000868c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    868c:	b510      	push	{r4, lr}
    868e:	2805      	cmp	r0, #5
    8690:	d301      	bcc.n	8696 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    8692:	2158      	movs	r1, #88	; 0x58
    8694:	e006      	b.n	86a4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    8696:	490a      	ldr	r1, [pc, #40]	; (86c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    8698:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    869c:	7901      	ldrb	r1, [r0, #4]
    869e:	2901      	cmp	r1, #1
    86a0:	d003      	beq.n	86aa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    86a2:	2159      	movs	r1, #89	; 0x59
    86a4:	2069      	movs	r0, #105	; 0x69
    86a6:	f7ff ff1f 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    86aa:	7941      	ldrb	r1, [r0, #5]
    86ac:	7982      	ldrb	r2, [r0, #6]
    86ae:	1c49      	adds	r1, r1, #1
    86b0:	b2c9      	uxtb	r1, r1
    86b2:	428a      	cmp	r2, r1
    86b4:	d000      	beq.n	86b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    86b6:	7141      	strb	r1, [r0, #5]
    86b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86bc:	f7ff bf76 	b.w	85ac <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    86c0:	20000e24 	.word	0x20000e24

000086c4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    86c4:	b510      	push	{r4, lr}
    86c6:	2805      	cmp	r0, #5
    86c8:	d303      	bcc.n	86d2 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    86ca:	214f      	movs	r1, #79	; 0x4f
    86cc:	2069      	movs	r0, #105	; 0x69
    86ce:	f7ff ff0b 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    86d2:	4a03      	ldr	r2, [pc, #12]	; (86e0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    86d4:	2100      	movs	r1, #0
    86d6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    86da:	7101      	strb	r1, [r0, #4]
    86dc:	bd10      	pop	{r4, pc}
    86de:	0000      	.short	0x0000
    86e0:	20000e24 	.word	0x20000e24

000086e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    86e4:	b570      	push	{r4, r5, r6, lr}
    86e6:	2505      	movs	r5, #5
    86e8:	4e0e      	ldr	r6, [pc, #56]	; (8724 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    86ea:	4c0f      	ldr	r4, [pc, #60]	; (8728 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    86ec:	e016      	b.n	871c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    86ee:	7821      	ldrb	r1, [r4, #0]
    86f0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    86f4:	7902      	ldrb	r2, [r0, #4]
    86f6:	2a01      	cmp	r2, #1
    86f8:	d108      	bne.n	870c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    86fa:	7942      	ldrb	r2, [r0, #5]
    86fc:	7983      	ldrb	r3, [r0, #6]
    86fe:	429a      	cmp	r2, r3
    8700:	d004      	beq.n	870c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    8702:	7942      	ldrb	r2, [r0, #5]
    8704:	7182      	strb	r2, [r0, #6]
    8706:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    870a:	4780      	blx	r0
    870c:	7820      	ldrb	r0, [r4, #0]
    870e:	1c40      	adds	r0, r0, #1
    8710:	b2c0      	uxtb	r0, r0
    8712:	7020      	strb	r0, [r4, #0]
    8714:	2805      	cmp	r0, #5
    8716:	d301      	bcc.n	871c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    8718:	2000      	movs	r0, #0
    871a:	7020      	strb	r0, [r4, #0]
    871c:	1e6d      	subs	r5, r5, #1
    871e:	b2ed      	uxtb	r5, r5
    8720:	d2e5      	bcs.n	86ee <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    8722:	bd70      	pop	{r4, r5, r6, pc}
    8724:	20000e24 	.word	0x20000e24
    8728:	2000019a 	.word	0x2000019a

0000872c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    872c:	b500      	push	{lr}
    872e:	f002 f82e 	bl	a78e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8732:	b940      	cbnz	r0, 8746 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    8734:	f002 f835 	bl	a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8738:	b928      	cbnz	r0, 8746 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    873a:	f002 f849 	bl	a7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    873e:	b910      	cbnz	r0, 8746 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    8740:	f002 f85a 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8744:	b108      	cbz	r0, 874a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    8746:	4802      	ldr	r0, [pc, #8]	; (8750 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    8748:	bd00      	pop	{pc}
    874a:	4802      	ldr	r0, [pc, #8]	; (8754 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    874c:	bd00      	pop	{pc}
    874e:	0000      	.short	0x0000
    8750:	4000050c 	.word	0x4000050c
    8754:	4001e700 	.word	0x4001e700
    8758:	b510      	push	{r4, lr}
    875a:	f002 f84d 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    875e:	b330      	cbz	r0, 87ae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    8760:	f3ef 8010 	mrs	r0, PRIMASK
    8764:	b1c8      	cbz	r0, 879a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    8766:	2100      	movs	r1, #0
    8768:	b672      	cpsid	i
    876a:	4812      	ldr	r0, [pc, #72]	; (87b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    876c:	6802      	ldr	r2, [r0, #0]
    876e:	6803      	ldr	r3, [r0, #0]
    8770:	f3c2 1200 	ubfx	r2, r2, #4, #1
    8774:	f043 0310 	orr.w	r3, r3, #16
    8778:	6003      	str	r3, [r0, #0]
    877a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    877e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8782:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    8786:	431c      	orrs	r4, r3
    8788:	d000      	beq.n	878c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    878a:	bf40      	sev
    878c:	bf20      	wfe
    878e:	bf00      	nop
    8790:	bf00      	nop
    8792:	bf00      	nop
    8794:	bf00      	nop
    8796:	b112      	cbz	r2, 879e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    8798:	e005      	b.n	87a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    879a:	2101      	movs	r1, #1
    879c:	e7e4      	b.n	8768 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    879e:	6802      	ldr	r2, [r0, #0]
    87a0:	f022 0210 	bic.w	r2, r2, #16
    87a4:	6002      	str	r2, [r0, #0]
    87a6:	2900      	cmp	r1, #0
    87a8:	d000      	beq.n	87ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    87aa:	b662      	cpsie	i
    87ac:	bd10      	pop	{r4, pc}
    87ae:	bf20      	wfe
    87b0:	bd10      	pop	{r4, pc}
    87b2:	0000      	.short	0x0000
    87b4:	e000ed10 	.word	0xe000ed10

000087b8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    87b8:	4901      	ldr	r1, [pc, #4]	; (87c0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    87ba:	2001      	movs	r0, #1
    87bc:	7088      	strb	r0, [r1, #2]
    87be:	4770      	bx	lr
    87c0:	20000154 	.word	0x20000154

000087c4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    87c4:	0000aaf9 0000ab31 0000ab1b 0000ab09     ....1...........
    87d4:	0000ab15 0000ab03 0000aaf7 0000aaf5     ................
    87e4:	0000ab2d 0000ab21 0000ab0f 0000aafd     -...!...........
    87f4:	0000aaef 0000aae7 0000aaeb 0000aae1     ................

00008804 <mpsl_fem_disable>:
    8804:	4801      	ldr	r0, [pc, #4]	; (880c <mpsl_fem_disable+0x8>)
    8806:	6800      	ldr	r0, [r0, #0]
    8808:	6800      	ldr	r0, [r0, #0]
    880a:	4700      	bx	r0
    880c:	20000168 	.word	0x20000168

00008810 <mpsl_fem_lna_configuration_clear>:
    8810:	4801      	ldr	r0, [pc, #4]	; (8818 <mpsl_fem_lna_configuration_clear+0x8>)
    8812:	6800      	ldr	r0, [r0, #0]
    8814:	6940      	ldr	r0, [r0, #20]
    8816:	4700      	bx	r0
    8818:	20000168 	.word	0x20000168

0000881c <mpsl_fem_lna_configuration_set>:
    881c:	4a01      	ldr	r2, [pc, #4]	; (8824 <mpsl_fem_lna_configuration_set+0x8>)
    881e:	6812      	ldr	r2, [r2, #0]
    8820:	68d2      	ldr	r2, [r2, #12]
    8822:	4710      	bx	r2
    8824:	20000168 	.word	0x20000168

00008828 <mpsl_fem_lna_is_configured>:
    8828:	4901      	ldr	r1, [pc, #4]	; (8830 <mpsl_fem_lna_is_configured+0x8>)
    882a:	6809      	ldr	r1, [r1, #0]
    882c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    882e:	4708      	bx	r1
    8830:	20000168 	.word	0x20000168

00008834 <mpsl_fem_pa_configuration_clear>:
    8834:	4801      	ldr	r0, [pc, #4]	; (883c <mpsl_fem_pa_configuration_clear+0x8>)
    8836:	6800      	ldr	r0, [r0, #0]
    8838:	6900      	ldr	r0, [r0, #16]
    883a:	4700      	bx	r0
    883c:	20000168 	.word	0x20000168

00008840 <mpsl_fem_pa_configuration_set>:
    8840:	4a01      	ldr	r2, [pc, #4]	; (8848 <mpsl_fem_pa_configuration_set+0x8>)
    8842:	6812      	ldr	r2, [r2, #0]
    8844:	6892      	ldr	r2, [r2, #8]
    8846:	4710      	bx	r2
    8848:	20000168 	.word	0x20000168

0000884c <mpsl_fem_pa_gain_set>:
    884c:	4901      	ldr	r1, [pc, #4]	; (8854 <mpsl_fem_pa_gain_set+0x8>)
    884e:	6809      	ldr	r1, [r1, #0]
    8850:	6a49      	ldr	r1, [r1, #36]	; 0x24
    8852:	4708      	bx	r1
    8854:	20000168 	.word	0x20000168

00008858 <mpsl_fem_pa_is_configured>:
    8858:	4901      	ldr	r1, [pc, #4]	; (8860 <mpsl_fem_pa_is_configured+0x8>)
    885a:	6809      	ldr	r1, [r1, #0]
    885c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    885e:	4708      	bx	r1
    8860:	20000168 	.word	0x20000168

00008864 <mpsl_fem_tx_power_split>:
    8864:	b430      	push	{r4, r5}
    8866:	4c03      	ldr	r4, [pc, #12]	; (8874 <mpsl_fem_tx_power_split+0x10>)
    8868:	6824      	ldr	r4, [r4, #0]
    886a:	6864      	ldr	r4, [r4, #4]
    886c:	46a4      	mov	ip, r4
    886e:	bc30      	pop	{r4, r5}
    8870:	4760      	bx	ip
    8872:	0000      	.short	0x0000
    8874:	20000168 	.word	0x20000168

00008878 <mpsl_fem_device_config_254_apply_get>:
    8878:	4801      	ldr	r0, [pc, #4]	; (8880 <mpsl_fem_device_config_254_apply_get+0x8>)
    887a:	7800      	ldrb	r0, [r0, #0]
    887c:	4770      	bx	lr
    887e:	0000      	.short	0x0000
    8880:	2000019b 	.word	0x2000019b

00008884 <__udivmoddi4>:
    8884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8888:	4686      	mov	lr, r0
    888a:	468c      	mov	ip, r1
    888c:	4608      	mov	r0, r1
    888e:	9e08      	ldr	r6, [sp, #32]
    8890:	4615      	mov	r5, r2
    8892:	4674      	mov	r4, lr
    8894:	4619      	mov	r1, r3
    8896:	2b00      	cmp	r3, #0
    8898:	f040 80c2 	bne.w	8a20 <__udivmoddi4+0x19c>
    889c:	4285      	cmp	r5, r0
    889e:	fab2 f282 	clz	r2, r2
    88a2:	d945      	bls.n	8930 <__udivmoddi4+0xac>
    88a4:	b14a      	cbz	r2, 88ba <__udivmoddi4+0x36>
    88a6:	f1c2 0320 	rsb	r3, r2, #32
    88aa:	fa00 fc02 	lsl.w	ip, r0, r2
    88ae:	fa2e f303 	lsr.w	r3, lr, r3
    88b2:	4095      	lsls	r5, r2
    88b4:	ea43 0c0c 	orr.w	ip, r3, ip
    88b8:	4094      	lsls	r4, r2
    88ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    88be:	b2a8      	uxth	r0, r5
    88c0:	fbbc f8fe 	udiv	r8, ip, lr
    88c4:	0c23      	lsrs	r3, r4, #16
    88c6:	fb0e cc18 	mls	ip, lr, r8, ip
    88ca:	fb08 f900 	mul.w	r9, r8, r0
    88ce:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    88d2:	4599      	cmp	r9, r3
    88d4:	d928      	bls.n	8928 <__udivmoddi4+0xa4>
    88d6:	18eb      	adds	r3, r5, r3
    88d8:	f108 37ff 	add.w	r7, r8, #4294967295
    88dc:	d204      	bcs.n	88e8 <__udivmoddi4+0x64>
    88de:	4599      	cmp	r9, r3
    88e0:	d902      	bls.n	88e8 <__udivmoddi4+0x64>
    88e2:	f1a8 0702 	sub.w	r7, r8, #2
    88e6:	442b      	add	r3, r5
    88e8:	eba3 0309 	sub.w	r3, r3, r9
    88ec:	b2a4      	uxth	r4, r4
    88ee:	fbb3 fcfe 	udiv	ip, r3, lr
    88f2:	fb0e 331c 	mls	r3, lr, ip, r3
    88f6:	fb0c f000 	mul.w	r0, ip, r0
    88fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    88fe:	42a0      	cmp	r0, r4
    8900:	d914      	bls.n	892c <__udivmoddi4+0xa8>
    8902:	192c      	adds	r4, r5, r4
    8904:	f10c 33ff 	add.w	r3, ip, #4294967295
    8908:	d204      	bcs.n	8914 <__udivmoddi4+0x90>
    890a:	42a0      	cmp	r0, r4
    890c:	d902      	bls.n	8914 <__udivmoddi4+0x90>
    890e:	f1ac 0302 	sub.w	r3, ip, #2
    8912:	442c      	add	r4, r5
    8914:	1a24      	subs	r4, r4, r0
    8916:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    891a:	b11e      	cbz	r6, 8924 <__udivmoddi4+0xa0>
    891c:	40d4      	lsrs	r4, r2
    891e:	2300      	movs	r3, #0
    8920:	6034      	str	r4, [r6, #0]
    8922:	6073      	str	r3, [r6, #4]
    8924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8928:	4647      	mov	r7, r8
    892a:	e7dd      	b.n	88e8 <__udivmoddi4+0x64>
    892c:	4663      	mov	r3, ip
    892e:	e7f1      	b.n	8914 <__udivmoddi4+0x90>
    8930:	bb92      	cbnz	r2, 8998 <__udivmoddi4+0x114>
    8932:	1b43      	subs	r3, r0, r5
    8934:	2101      	movs	r1, #1
    8936:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    893a:	b2af      	uxth	r7, r5
    893c:	fbb3 fcfe 	udiv	ip, r3, lr
    8940:	0c20      	lsrs	r0, r4, #16
    8942:	fb0e 331c 	mls	r3, lr, ip, r3
    8946:	fb0c f807 	mul.w	r8, ip, r7
    894a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    894e:	4598      	cmp	r8, r3
    8950:	d962      	bls.n	8a18 <__udivmoddi4+0x194>
    8952:	18eb      	adds	r3, r5, r3
    8954:	f10c 30ff 	add.w	r0, ip, #4294967295
    8958:	d204      	bcs.n	8964 <__udivmoddi4+0xe0>
    895a:	4598      	cmp	r8, r3
    895c:	d902      	bls.n	8964 <__udivmoddi4+0xe0>
    895e:	f1ac 0002 	sub.w	r0, ip, #2
    8962:	442b      	add	r3, r5
    8964:	eba3 0308 	sub.w	r3, r3, r8
    8968:	b2a4      	uxth	r4, r4
    896a:	fbb3 fcfe 	udiv	ip, r3, lr
    896e:	fb0e 331c 	mls	r3, lr, ip, r3
    8972:	fb0c f707 	mul.w	r7, ip, r7
    8976:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    897a:	42a7      	cmp	r7, r4
    897c:	d94e      	bls.n	8a1c <__udivmoddi4+0x198>
    897e:	192c      	adds	r4, r5, r4
    8980:	f10c 33ff 	add.w	r3, ip, #4294967295
    8984:	d204      	bcs.n	8990 <__udivmoddi4+0x10c>
    8986:	42a7      	cmp	r7, r4
    8988:	d902      	bls.n	8990 <__udivmoddi4+0x10c>
    898a:	f1ac 0302 	sub.w	r3, ip, #2
    898e:	442c      	add	r4, r5
    8990:	1be4      	subs	r4, r4, r7
    8992:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8996:	e7c0      	b.n	891a <__udivmoddi4+0x96>
    8998:	f1c2 0320 	rsb	r3, r2, #32
    899c:	fa20 f103 	lsr.w	r1, r0, r3
    89a0:	4095      	lsls	r5, r2
    89a2:	4090      	lsls	r0, r2
    89a4:	fa2e f303 	lsr.w	r3, lr, r3
    89a8:	4303      	orrs	r3, r0
    89aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    89ae:	b2af      	uxth	r7, r5
    89b0:	fbb1 fcfe 	udiv	ip, r1, lr
    89b4:	fb0e 101c 	mls	r0, lr, ip, r1
    89b8:	0c19      	lsrs	r1, r3, #16
    89ba:	fb0c f807 	mul.w	r8, ip, r7
    89be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    89c2:	4588      	cmp	r8, r1
    89c4:	fa04 f402 	lsl.w	r4, r4, r2
    89c8:	d922      	bls.n	8a10 <__udivmoddi4+0x18c>
    89ca:	1869      	adds	r1, r5, r1
    89cc:	f10c 30ff 	add.w	r0, ip, #4294967295
    89d0:	d204      	bcs.n	89dc <__udivmoddi4+0x158>
    89d2:	4588      	cmp	r8, r1
    89d4:	d902      	bls.n	89dc <__udivmoddi4+0x158>
    89d6:	f1ac 0002 	sub.w	r0, ip, #2
    89da:	4429      	add	r1, r5
    89dc:	eba1 0108 	sub.w	r1, r1, r8
    89e0:	b29b      	uxth	r3, r3
    89e2:	fbb1 fcfe 	udiv	ip, r1, lr
    89e6:	fb0e 111c 	mls	r1, lr, ip, r1
    89ea:	fb0c f707 	mul.w	r7, ip, r7
    89ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    89f2:	429f      	cmp	r7, r3
    89f4:	d90e      	bls.n	8a14 <__udivmoddi4+0x190>
    89f6:	18eb      	adds	r3, r5, r3
    89f8:	f10c 31ff 	add.w	r1, ip, #4294967295
    89fc:	d204      	bcs.n	8a08 <__udivmoddi4+0x184>
    89fe:	429f      	cmp	r7, r3
    8a00:	d902      	bls.n	8a08 <__udivmoddi4+0x184>
    8a02:	f1ac 0102 	sub.w	r1, ip, #2
    8a06:	442b      	add	r3, r5
    8a08:	1bdb      	subs	r3, r3, r7
    8a0a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8a0e:	e792      	b.n	8936 <__udivmoddi4+0xb2>
    8a10:	4660      	mov	r0, ip
    8a12:	e7e3      	b.n	89dc <__udivmoddi4+0x158>
    8a14:	4661      	mov	r1, ip
    8a16:	e7f7      	b.n	8a08 <__udivmoddi4+0x184>
    8a18:	4660      	mov	r0, ip
    8a1a:	e7a3      	b.n	8964 <__udivmoddi4+0xe0>
    8a1c:	4663      	mov	r3, ip
    8a1e:	e7b7      	b.n	8990 <__udivmoddi4+0x10c>
    8a20:	4283      	cmp	r3, r0
    8a22:	d906      	bls.n	8a32 <__udivmoddi4+0x1ae>
    8a24:	b916      	cbnz	r6, 8a2c <__udivmoddi4+0x1a8>
    8a26:	2100      	movs	r1, #0
    8a28:	4608      	mov	r0, r1
    8a2a:	e77b      	b.n	8924 <__udivmoddi4+0xa0>
    8a2c:	e9c6 e000 	strd	lr, r0, [r6]
    8a30:	e7f9      	b.n	8a26 <__udivmoddi4+0x1a2>
    8a32:	fab3 f783 	clz	r7, r3
    8a36:	b98f      	cbnz	r7, 8a5c <__udivmoddi4+0x1d8>
    8a38:	4283      	cmp	r3, r0
    8a3a:	d301      	bcc.n	8a40 <__udivmoddi4+0x1bc>
    8a3c:	4572      	cmp	r2, lr
    8a3e:	d808      	bhi.n	8a52 <__udivmoddi4+0x1ce>
    8a40:	ebbe 0402 	subs.w	r4, lr, r2
    8a44:	eb60 0303 	sbc.w	r3, r0, r3
    8a48:	2001      	movs	r0, #1
    8a4a:	469c      	mov	ip, r3
    8a4c:	b91e      	cbnz	r6, 8a56 <__udivmoddi4+0x1d2>
    8a4e:	2100      	movs	r1, #0
    8a50:	e768      	b.n	8924 <__udivmoddi4+0xa0>
    8a52:	4638      	mov	r0, r7
    8a54:	e7fa      	b.n	8a4c <__udivmoddi4+0x1c8>
    8a56:	e9c6 4c00 	strd	r4, ip, [r6]
    8a5a:	e7f8      	b.n	8a4e <__udivmoddi4+0x1ca>
    8a5c:	f1c7 0c20 	rsb	ip, r7, #32
    8a60:	40bb      	lsls	r3, r7
    8a62:	fa22 f40c 	lsr.w	r4, r2, ip
    8a66:	431c      	orrs	r4, r3
    8a68:	fa2e f10c 	lsr.w	r1, lr, ip
    8a6c:	fa20 f30c 	lsr.w	r3, r0, ip
    8a70:	40b8      	lsls	r0, r7
    8a72:	4301      	orrs	r1, r0
    8a74:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8a78:	fa0e f507 	lsl.w	r5, lr, r7
    8a7c:	fbb3 f8f9 	udiv	r8, r3, r9
    8a80:	fa1f fe84 	uxth.w	lr, r4
    8a84:	fb09 3018 	mls	r0, r9, r8, r3
    8a88:	0c0b      	lsrs	r3, r1, #16
    8a8a:	fb08 fa0e 	mul.w	sl, r8, lr
    8a8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8a92:	459a      	cmp	sl, r3
    8a94:	fa02 f207 	lsl.w	r2, r2, r7
    8a98:	d940      	bls.n	8b1c <__udivmoddi4+0x298>
    8a9a:	18e3      	adds	r3, r4, r3
    8a9c:	f108 30ff 	add.w	r0, r8, #4294967295
    8aa0:	d204      	bcs.n	8aac <__udivmoddi4+0x228>
    8aa2:	459a      	cmp	sl, r3
    8aa4:	d902      	bls.n	8aac <__udivmoddi4+0x228>
    8aa6:	f1a8 0002 	sub.w	r0, r8, #2
    8aaa:	4423      	add	r3, r4
    8aac:	eba3 030a 	sub.w	r3, r3, sl
    8ab0:	b289      	uxth	r1, r1
    8ab2:	fbb3 f8f9 	udiv	r8, r3, r9
    8ab6:	fb09 3318 	mls	r3, r9, r8, r3
    8aba:	fb08 fe0e 	mul.w	lr, r8, lr
    8abe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8ac2:	458e      	cmp	lr, r1
    8ac4:	d92c      	bls.n	8b20 <__udivmoddi4+0x29c>
    8ac6:	1861      	adds	r1, r4, r1
    8ac8:	f108 33ff 	add.w	r3, r8, #4294967295
    8acc:	d204      	bcs.n	8ad8 <__udivmoddi4+0x254>
    8ace:	458e      	cmp	lr, r1
    8ad0:	d902      	bls.n	8ad8 <__udivmoddi4+0x254>
    8ad2:	f1a8 0302 	sub.w	r3, r8, #2
    8ad6:	4421      	add	r1, r4
    8ad8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8adc:	fba0 9802 	umull	r9, r8, r0, r2
    8ae0:	eba1 010e 	sub.w	r1, r1, lr
    8ae4:	4541      	cmp	r1, r8
    8ae6:	46ce      	mov	lr, r9
    8ae8:	4643      	mov	r3, r8
    8aea:	d302      	bcc.n	8af2 <__udivmoddi4+0x26e>
    8aec:	d106      	bne.n	8afc <__udivmoddi4+0x278>
    8aee:	454d      	cmp	r5, r9
    8af0:	d204      	bcs.n	8afc <__udivmoddi4+0x278>
    8af2:	ebb9 0e02 	subs.w	lr, r9, r2
    8af6:	eb68 0304 	sbc.w	r3, r8, r4
    8afa:	3801      	subs	r0, #1
    8afc:	2e00      	cmp	r6, #0
    8afe:	d0a6      	beq.n	8a4e <__udivmoddi4+0x1ca>
    8b00:	ebb5 020e 	subs.w	r2, r5, lr
    8b04:	eb61 0103 	sbc.w	r1, r1, r3
    8b08:	fa01 fc0c 	lsl.w	ip, r1, ip
    8b0c:	fa22 f307 	lsr.w	r3, r2, r7
    8b10:	ea4c 0303 	orr.w	r3, ip, r3
    8b14:	40f9      	lsrs	r1, r7
    8b16:	e9c6 3100 	strd	r3, r1, [r6]
    8b1a:	e798      	b.n	8a4e <__udivmoddi4+0x1ca>
    8b1c:	4640      	mov	r0, r8
    8b1e:	e7c5      	b.n	8aac <__udivmoddi4+0x228>
    8b20:	4643      	mov	r3, r8
    8b22:	e7d9      	b.n	8ad8 <__udivmoddi4+0x254>
    8b24:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    8b28:	4681      	mov	r9, r0
    8b2a:	ea5f 0802 	movs.w	r8, r2
    8b2e:	f100 0007 	add.w	r0, r0, #7
    8b32:	f020 0007 	bic.w	r0, r0, #7
    8b36:	f04f 0200 	mov.w	r2, #0
    8b3a:	e9cd 0200 	strd	r0, r2, [sp]
    8b3e:	780a      	ldrb	r2, [r1, #0]
    8b40:	460c      	mov	r4, r1
    8b42:	f88d 2005 	strb.w	r2, [sp, #5]
    8b46:	d000      	beq.n	8b4a <__udivmoddi4+0x2c6>
    8b48:	2000      	movs	r0, #0
    8b4a:	a901      	add	r1, sp, #4
    8b4c:	f7f8 fad6 	bl	10fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    8b50:	9900      	ldr	r1, [sp, #0]
    8b52:	2600      	movs	r6, #0
    8b54:	4408      	add	r0, r1
    8b56:	9000      	str	r0, [sp, #0]
    8b58:	7820      	ldrb	r0, [r4, #0]
    8b5a:	7861      	ldrb	r1, [r4, #1]
    8b5c:	4635      	mov	r5, r6
    8b5e:	4408      	add	r0, r1
    8b60:	b2c7      	uxtb	r7, r0
    8b62:	e008      	b.n	8b76 <__udivmoddi4+0x2f2>
    8b64:	7a23      	ldrb	r3, [r4, #8]
    8b66:	79e2      	ldrb	r2, [r4, #7]
    8b68:	79a1      	ldrb	r1, [r4, #6]
    8b6a:	7960      	ldrb	r0, [r4, #5]
    8b6c:	f000 fd47 	bl	95fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    8b70:	1c6d      	adds	r5, r5, #1
    8b72:	4406      	add	r6, r0
    8b74:	b2ed      	uxtb	r5, r5
    8b76:	42bd      	cmp	r5, r7
    8b78:	d3f4      	bcc.n	8b64 <__udivmoddi4+0x2e0>
    8b7a:	9800      	ldr	r0, [sp, #0]
    8b7c:	1cc0      	adds	r0, r0, #3
    8b7e:	f020 0003 	bic.w	r0, r0, #3
    8b82:	9000      	str	r0, [sp, #0]
    8b84:	f1b8 0f00 	cmp.w	r8, #0
    8b88:	d000      	beq.n	8b8c <__udivmoddi4+0x308>
    8b8a:	2000      	movs	r0, #0
    8b8c:	4632      	mov	r2, r6
    8b8e:	4639      	mov	r1, r7
    8b90:	f7f8 fb60 	bl	1254 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    8b94:	9900      	ldr	r1, [sp, #0]
    8b96:	4642      	mov	r2, r8
    8b98:	4408      	add	r0, r1
    8b9a:	9000      	str	r0, [sp, #0]
    8b9c:	4621      	mov	r1, r4
    8b9e:	4668      	mov	r0, sp
    8ba0:	f7f7 feda 	bl	958 <__aeabi_idiv0+0x60>
    8ba4:	9900      	ldr	r1, [sp, #0]
    8ba6:	eba1 0009 	sub.w	r0, r1, r9
    8baa:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

00008bae <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    8bae:	b510      	push	{r4, lr}
    8bb0:	460c      	mov	r4, r1
    8bb2:	7909      	ldrb	r1, [r1, #4]
    8bb4:	7001      	strb	r1, [r0, #0]
    8bb6:	7841      	ldrb	r1, [r0, #1]
    8bb8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    8bbc:	7041      	strb	r1, [r0, #1]
    8bbe:	88a2      	ldrh	r2, [r4, #4]
    8bc0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    8bc4:	4311      	orrs	r1, r2
    8bc6:	7041      	strb	r1, [r0, #1]
    8bc8:	79a2      	ldrb	r2, [r4, #6]
    8bca:	7082      	strb	r2, [r0, #2]
    8bcc:	88e2      	ldrh	r2, [r4, #6]
    8bce:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    8bd2:	0a12      	lsrs	r2, r2, #8
    8bd4:	70c2      	strb	r2, [r0, #3]
    8bd6:	7041      	strb	r1, [r0, #1]
    8bd8:	7a22      	ldrb	r2, [r4, #8]
    8bda:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    8bde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    8be2:	7041      	strb	r1, [r0, #1]
    8be4:	7a62      	ldrb	r2, [r4, #9]
    8be6:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    8bea:	7041      	strb	r1, [r0, #1]
    8bec:	6821      	ldr	r1, [r4, #0]
    8bee:	1d02      	adds	r2, r0, #4
    8bf0:	4291      	cmp	r1, r2
    8bf2:	d006      	beq.n	8c02 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    8bf4:	88e2      	ldrh	r2, [r4, #6]
    8bf6:	2afb      	cmp	r2, #251	; 0xfb
    8bf8:	d300      	bcc.n	8bfc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    8bfa:	22fb      	movs	r2, #251	; 0xfb
    8bfc:	1d00      	adds	r0, r0, #4
    8bfe:	f001 fe95 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8c02:	79a0      	ldrb	r0, [r4, #6]
    8c04:	1d00      	adds	r0, r0, #4
    8c06:	b2c0      	uxtb	r0, r0
    8c08:	bd10      	pop	{r4, pc}

00008c0a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    8c0a:	b430      	push	{r4, r5}
    8c0c:	790a      	ldrb	r2, [r1, #4]
    8c0e:	7002      	strb	r2, [r0, #0]
    8c10:	7842      	ldrb	r2, [r0, #1]
    8c12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    8c16:	7042      	strb	r2, [r0, #1]
    8c18:	888b      	ldrh	r3, [r1, #4]
    8c1a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    8c1e:	431a      	orrs	r2, r3
    8c20:	7042      	strb	r2, [r0, #1]
    8c22:	798b      	ldrb	r3, [r1, #6]
    8c24:	7083      	strb	r3, [r0, #2]
    8c26:	78c3      	ldrb	r3, [r0, #3]
    8c28:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    8c2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8c30:	70c3      	strb	r3, [r0, #3]
    8c32:	88cc      	ldrh	r4, [r1, #6]
    8c34:	f3c4 2405 	ubfx	r4, r4, #8, #6
    8c38:	4323      	orrs	r3, r4
    8c3a:	70c3      	strb	r3, [r0, #3]
    8c3c:	7042      	strb	r2, [r0, #1]
    8c3e:	7a0c      	ldrb	r4, [r1, #8]
    8c40:	f004 0403 	and.w	r4, r4, #3
    8c44:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    8c48:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    8c4c:	7042      	strb	r2, [r0, #1]
    8c4e:	7a4c      	ldrb	r4, [r1, #9]
    8c50:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    8c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8c58:	7042      	strb	r2, [r0, #1]
    8c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8c5e:	70c2      	strb	r2, [r0, #3]
    8c60:	680b      	ldr	r3, [r1, #0]
    8c62:	1d02      	adds	r2, r0, #4
    8c64:	4293      	cmp	r3, r2
    8c66:	d005      	beq.n	8c74 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    8c68:	88ca      	ldrh	r2, [r1, #6]
    8c6a:	bc30      	pop	{r4, r5}
    8c6c:	4619      	mov	r1, r3
    8c6e:	1d00      	adds	r0, r0, #4
    8c70:	f001 be5c 	b.w	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8c74:	bc30      	pop	{r4, r5}
    8c76:	4770      	bx	lr

00008c78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    8c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c7c:	4604      	mov	r4, r0
    8c7e:	f891 c000 	ldrb.w	ip, [r1]
    8c82:	460d      	mov	r5, r1
    8c84:	2000      	movs	r0, #0
    8c86:	2711      	movs	r7, #17
    8c88:	263e      	movs	r6, #62	; 0x3e
    8c8a:	2312      	movs	r3, #18
    8c8c:	22ff      	movs	r2, #255	; 0xff
    8c8e:	f04f 0b0c 	mov.w	fp, #12
    8c92:	f04f 0905 	mov.w	r9, #5
    8c96:	f04f 0a03 	mov.w	sl, #3
    8c9a:	f104 010d 	add.w	r1, r4, #13
    8c9e:	f04f 0e14 	mov.w	lr, #20
    8ca2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    8ca6:	d26f      	bcs.n	8d88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    8ca8:	e8df f00c 	tbb	[pc, ip]
    8cac:	47452d6e 	.word	0x47452d6e
    8cb0:	a76eef4c 	.word	0xa76eef4c
    8cb4:	edf0c2b1 	.word	0xedf0c2b1
    8cb8:	e9eaebec 	.word	0xe9eaebec
    8cbc:	6f6e12e8 	.word	0x6f6e12e8
    8cc0:	e6e78c6e 	.word	0xe6e78c6e
    8cc4:	e2e3e4e5 	.word	0xe2e3e4e5
    8cc8:	dedfe0e1 	.word	0xdedfe0e1
    8ccc:	00dc6edd 	.word	0x00dc6edd
    8cd0:	200e      	movs	r0, #14
    8cd2:	7020      	strb	r0, [r4, #0]
    8cd4:	7968      	ldrb	r0, [r5, #5]
    8cd6:	70e0      	strb	r0, [r4, #3]
    8cd8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8cdc:	0a00      	lsrs	r0, r0, #8
    8cde:	7120      	strb	r0, [r4, #4]
    8ce0:	7928      	ldrb	r0, [r5, #4]
    8ce2:	70a0      	strb	r0, [r4, #2]
    8ce4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8ce8:	3883      	subs	r0, #131	; 0x83
    8cea:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    8cee:	d003      	beq.n	8cf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x80>
    8cf0:	2136      	movs	r1, #54	; 0x36
    8cf2:	20c7      	movs	r0, #199	; 0xc7
    8cf4:	f7f7 ff44 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cf8:	4652      	mov	r2, sl
    8cfa:	1de9      	adds	r1, r5, #7
    8cfc:	1d60      	adds	r0, r4, #5
    8cfe:	f001 fe15 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d02:	2007      	movs	r0, #7
    8d04:	e151      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8d06:	f884 b000 	strb.w	fp, [r4]
    8d0a:	7928      	ldrb	r0, [r5, #4]
    8d0c:	70a0      	strb	r0, [r4, #2]
    8d0e:	7968      	ldrb	r0, [r5, #5]
    8d10:	70e0      	strb	r0, [r4, #3]
    8d12:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8d16:	0a00      	lsrs	r0, r0, #8
    8d18:	7120      	strb	r0, [r4, #4]
    8d1a:	79e8      	ldrb	r0, [r5, #7]
    8d1c:	7160      	strb	r0, [r4, #5]
    8d1e:	7a28      	ldrb	r0, [r5, #8]
    8d20:	71a0      	strb	r0, [r4, #6]
    8d22:	8928      	ldrh	r0, [r5, #8]
    8d24:	0a00      	lsrs	r0, r0, #8
    8d26:	71e0      	strb	r0, [r4, #7]
    8d28:	7aa8      	ldrb	r0, [r5, #10]
    8d2a:	7220      	strb	r0, [r4, #8]
    8d2c:	8968      	ldrh	r0, [r5, #10]
    8d2e:	0a00      	lsrs	r0, r0, #8
    8d30:	7260      	strb	r0, [r4, #9]
    8d32:	2008      	movs	r0, #8
    8d34:	e139      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8d36:	2010      	movs	r0, #16
    8d38:	e000      	b.n	8d3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc4>
    8d3a:	201a      	movs	r0, #26
    8d3c:	7020      	strb	r0, [r4, #0]
    8d3e:	7928      	ldrb	r0, [r5, #4]
    8d40:	70a0      	strb	r0, [r4, #2]
    8d42:	e138      	b.n	8fb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
    8d44:	7026      	strb	r6, [r4, #0]
    8d46:	2002      	movs	r0, #2
    8d48:	70a0      	strb	r0, [r4, #2]
    8d4a:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    8d4e:	70e0      	strb	r0, [r4, #3]
    8d50:	7aa8      	ldrb	r0, [r5, #10]
    8d52:	7120      	strb	r0, [r4, #4]
    8d54:	7868      	ldrb	r0, [r5, #1]
    8d56:	7160      	strb	r0, [r4, #5]
    8d58:	f8d5 0002 	ldr.w	r0, [r5, #2]
    8d5c:	f8c4 0006 	str.w	r0, [r4, #6]
    8d60:	88e8      	ldrh	r0, [r5, #6]
    8d62:	8160      	strh	r0, [r4, #10]
    8d64:	7a28      	ldrb	r0, [r5, #8]
    8d66:	7320      	strb	r0, [r4, #12]
    8d68:	7a2e      	ldrb	r6, [r5, #8]
    8d6a:	2e1f      	cmp	r6, #31
    8d6c:	d300      	bcc.n	8d70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xf8>
    8d6e:	261f      	movs	r6, #31
    8d70:	4608      	mov	r0, r1
    8d72:	4632      	mov	r2, r6
    8d74:	f105 010b 	add.w	r1, r5, #11
    8d78:	f001 fdd8 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d7c:	360d      	adds	r6, #13
    8d7e:	7a69      	ldrb	r1, [r5, #9]
    8d80:	55a1      	strb	r1, [r4, r6]
    8d82:	1e76      	subs	r6, r6, #1
    8d84:	b2f0      	uxtb	r0, r6
    8d86:	e10e      	b.n	8fa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8d88:	e111      	b.n	8fae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    8d8a:	7026      	strb	r6, [r4, #0]
    8d8c:	200b      	movs	r0, #11
    8d8e:	70a0      	strb	r0, [r4, #2]
    8d90:	7928      	ldrb	r0, [r5, #4]
    8d92:	70e0      	strb	r0, [r4, #3]
    8d94:	7968      	ldrb	r0, [r5, #5]
    8d96:	7120      	strb	r0, [r4, #4]
    8d98:	79a8      	ldrb	r0, [r5, #6]
    8d9a:	7160      	strb	r0, [r4, #5]
    8d9c:	f8d5 0007 	ldr.w	r0, [r5, #7]
    8da0:	f8c4 0006 	str.w	r0, [r4, #6]
    8da4:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    8da8:	8160      	strh	r0, [r4, #10]
    8daa:	7b68      	ldrb	r0, [r5, #13]
    8dac:	7320      	strb	r0, [r4, #12]
    8dae:	f8d5 000e 	ldr.w	r0, [r5, #14]
    8db2:	f8c4 000d 	str.w	r0, [r4, #13]
    8db6:	8a68      	ldrh	r0, [r5, #18]
    8db8:	f8a4 0011 	strh.w	r0, [r4, #17]
    8dbc:	7d28      	ldrb	r0, [r5, #20]
    8dbe:	74e0      	strb	r0, [r4, #19]
    8dc0:	4618      	mov	r0, r3
    8dc2:	e0f2      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8dc4:	2029      	movs	r0, #41	; 0x29
    8dc6:	f7f8 f829 	bl	e1c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    8dca:	b148      	cbz	r0, 8de0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x168>
    8dcc:	7026      	strb	r6, [r4, #0]
    8dce:	2029      	movs	r0, #41	; 0x29
    8dd0:	70a0      	strb	r0, [r4, #2]
    8dd2:	2221      	movs	r2, #33	; 0x21
    8dd4:	1d29      	adds	r1, r5, #4
    8dd6:	1ce0      	adds	r0, r4, #3
    8dd8:	f001 fda8 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8ddc:	2022      	movs	r0, #34	; 0x22
    8dde:	e0e4      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8de0:	200a      	movs	r0, #10
    8de2:	f7f8 f81b 	bl	e1c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    8de6:	2800      	cmp	r0, #0
    8de8:	4629      	mov	r1, r5
    8dea:	4620      	mov	r0, r4
    8dec:	d002      	beq.n	8df4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x17c>
    8dee:	f000 f9a1 	bl	9134 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    8df2:	e0d8      	b.n	8fa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8df4:	f000 f975 	bl	90e2 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    8df8:	e0d5      	b.n	8fa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8dfa:	7026      	strb	r6, [r4, #0]
    8dfc:	f884 e002 	strb.w	lr, [r4, #2]
    8e00:	7928      	ldrb	r0, [r5, #4]
    8e02:	70e0      	strb	r0, [r4, #3]
    8e04:	88a8      	ldrh	r0, [r5, #4]
    8e06:	0a00      	lsrs	r0, r0, #8
    8e08:	7120      	strb	r0, [r4, #4]
    8e0a:	79a8      	ldrb	r0, [r5, #6]
    8e0c:	e106      	b.n	901c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8e0e:	223e      	movs	r2, #62	; 0x3e
    8e10:	7022      	strb	r2, [r4, #0]
    8e12:	2204      	movs	r2, #4
    8e14:	70a2      	strb	r2, [r4, #2]
    8e16:	6868      	ldr	r0, [r5, #4]
    8e18:	f8c4 0003 	str.w	r0, [r4, #3]
    8e1c:	68a8      	ldr	r0, [r5, #8]
    8e1e:	f8c4 0007 	str.w	r0, [r4, #7]
    8e22:	89a8      	ldrh	r0, [r5, #12]
    8e24:	f8a4 000b 	strh.w	r0, [r4, #11]
    8e28:	7ba8      	ldrb	r0, [r5, #14]
    8e2a:	7360      	strb	r0, [r4, #13]
    8e2c:	200c      	movs	r0, #12
    8e2e:	e0bc      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8e30:	7026      	strb	r6, [r4, #0]
    8e32:	f884 a002 	strb.w	sl, [r4, #2]
    8e36:	7928      	ldrb	r0, [r5, #4]
    8e38:	70e0      	strb	r0, [r4, #3]
    8e3a:	79a8      	ldrb	r0, [r5, #6]
    8e3c:	7120      	strb	r0, [r4, #4]
    8e3e:	88e8      	ldrh	r0, [r5, #6]
    8e40:	0a00      	lsrs	r0, r0, #8
    8e42:	7160      	strb	r0, [r4, #5]
    8e44:	7a28      	ldrb	r0, [r5, #8]
    8e46:	71a0      	strb	r0, [r4, #6]
    8e48:	8928      	ldrh	r0, [r5, #8]
    8e4a:	0a00      	lsrs	r0, r0, #8
    8e4c:	71e0      	strb	r0, [r4, #7]
    8e4e:	7aa8      	ldrb	r0, [r5, #10]
    8e50:	7220      	strb	r0, [r4, #8]
    8e52:	8968      	ldrh	r0, [r5, #10]
    8e54:	0a00      	lsrs	r0, r0, #8
    8e56:	7260      	strb	r0, [r4, #9]
    8e58:	7b28      	ldrb	r0, [r5, #12]
    8e5a:	72a0      	strb	r0, [r4, #10]
    8e5c:	89a8      	ldrh	r0, [r5, #12]
    8e5e:	0a00      	lsrs	r0, r0, #8
    8e60:	72e0      	strb	r0, [r4, #11]
    8e62:	e118      	b.n	9096 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    8e64:	e126      	b.n	90b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x43c>
    8e66:	e0fa      	b.n	905e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    8e68:	e0db      	b.n	9022 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3aa>
    8e6a:	e106      	b.n	907a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    8e6c:	e115      	b.n	909a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x422>
    8e6e:	e0cd      	b.n	900c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x394>
    8e70:	e0b5      	b.n	8fde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x366>
    8e72:	e0b1      	b.n	8fd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
    8e74:	e09d      	b.n	8fb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    8e76:	e0a0      	b.n	8fba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    8e78:	e043      	b.n	8f02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28a>
    8e7a:	e03f      	b.n	8efc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    8e7c:	e054      	b.n	8f28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    8e7e:	e04e      	b.n	8f1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a6>
    8e80:	e031      	b.n	8ee6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    8e82:	e025      	b.n	8ed0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x258>
    8e84:	e018      	b.n	8eb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    8e86:	e015      	b.n	8eb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    8e88:	e000      	b.n	8e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    8e8a:	e056      	b.n	8f3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    8e8c:	7026      	strb	r6, [r4, #0]
    8e8e:	f884 9002 	strb.w	r9, [r4, #2]
    8e92:	7928      	ldrb	r0, [r5, #4]
    8e94:	70e0      	strb	r0, [r4, #3]
    8e96:	88a8      	ldrh	r0, [r5, #4]
    8e98:	0a00      	lsrs	r0, r0, #8
    8e9a:	7120      	strb	r0, [r4, #4]
    8e9c:	f8d5 0006 	ldr.w	r0, [r5, #6]
    8ea0:	f8c4 0005 	str.w	r0, [r4, #5]
    8ea4:	f8d5 000a 	ldr.w	r0, [r5, #10]
    8ea8:	f8c4 0009 	str.w	r0, [r4, #9]
    8eac:	89e8      	ldrh	r0, [r5, #14]
    8eae:	f8a4 000d 	strh.w	r0, [r4, #13]
    8eb2:	e114      	b.n	90de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x466>
    8eb4:	7027      	strb	r7, [r4, #0]
    8eb6:	e039      	b.n	8f2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b4>
    8eb8:	f884 9000 	strb.w	r9, [r4]
    8ebc:	7928      	ldrb	r0, [r5, #4]
    8ebe:	70a0      	strb	r0, [r4, #2]
    8ec0:	7968      	ldrb	r0, [r5, #5]
    8ec2:	70e0      	strb	r0, [r4, #3]
    8ec4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8ec8:	0a00      	lsrs	r0, r0, #8
    8eca:	7120      	strb	r0, [r4, #4]
    8ecc:	79e8      	ldrb	r0, [r5, #7]
    8ece:	e0a5      	b.n	901c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8ed0:	2008      	movs	r0, #8
    8ed2:	7020      	strb	r0, [r4, #0]
    8ed4:	7928      	ldrb	r0, [r5, #4]
    8ed6:	70a0      	strb	r0, [r4, #2]
    8ed8:	79a8      	ldrb	r0, [r5, #6]
    8eda:	70e0      	strb	r0, [r4, #3]
    8edc:	88e8      	ldrh	r0, [r5, #6]
    8ede:	0a00      	lsrs	r0, r0, #8
    8ee0:	7120      	strb	r0, [r4, #4]
    8ee2:	7a28      	ldrb	r0, [r5, #8]
    8ee4:	e09a      	b.n	901c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8ee6:	2030      	movs	r0, #48	; 0x30
    8ee8:	7020      	strb	r0, [r4, #0]
    8eea:	7928      	ldrb	r0, [r5, #4]
    8eec:	70a0      	strb	r0, [r4, #2]
    8eee:	79a8      	ldrb	r0, [r5, #6]
    8ef0:	70e0      	strb	r0, [r4, #3]
    8ef2:	88e8      	ldrh	r0, [r5, #6]
    8ef4:	0a00      	lsrs	r0, r0, #8
    8ef6:	7120      	strb	r0, [r4, #4]
    8ef8:	2003      	movs	r0, #3
    8efa:	e056      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8efc:	7026      	strb	r6, [r4, #0]
    8efe:	2007      	movs	r0, #7
    8f00:	e091      	b.n	9026 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    8f02:	7026      	strb	r6, [r4, #0]
    8f04:	f884 b002 	strb.w	fp, [r4, #2]
    8f08:	7928      	ldrb	r0, [r5, #4]
    8f0a:	70e0      	strb	r0, [r4, #3]
    8f0c:	79a8      	ldrb	r0, [r5, #6]
    8f0e:	7120      	strb	r0, [r4, #4]
    8f10:	88e8      	ldrh	r0, [r5, #6]
    8f12:	0a00      	lsrs	r0, r0, #8
    8f14:	7160      	strb	r0, [r4, #5]
    8f16:	7a28      	ldrb	r0, [r5, #8]
    8f18:	71a0      	strb	r0, [r4, #6]
    8f1a:	7a68      	ldrb	r0, [r5, #9]
    8f1c:	e059      	b.n	8fd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    8f1e:	1d29      	adds	r1, r5, #4
    8f20:	4620      	mov	r0, r4
    8f22:	f7f7 ff3b 	bl	d9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    8f26:	e03e      	b.n	8fa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8f28:	2057      	movs	r0, #87	; 0x57
    8f2a:	7020      	strb	r0, [r4, #0]
    8f2c:	7928      	ldrb	r0, [r5, #4]
    8f2e:	70a0      	strb	r0, [r4, #2]
    8f30:	88a8      	ldrh	r0, [r5, #4]
    8f32:	0a00      	lsrs	r0, r0, #8
    8f34:	70e0      	strb	r0, [r4, #3]
    8f36:	2002      	movs	r0, #2
    8f38:	e037      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8f3a:	7026      	strb	r6, [r4, #0]
    8f3c:	220d      	movs	r2, #13
    8f3e:	70a2      	strb	r2, [r4, #2]
    8f40:	792a      	ldrb	r2, [r5, #4]
    8f42:	70e2      	strb	r2, [r4, #3]
    8f44:	89ea      	ldrh	r2, [r5, #14]
    8f46:	80a2      	strh	r2, [r4, #4]
    8f48:	796a      	ldrb	r2, [r5, #5]
    8f4a:	71a2      	strb	r2, [r4, #6]
    8f4c:	f8d5 2006 	ldr.w	r2, [r5, #6]
    8f50:	f8c4 2007 	str.w	r2, [r4, #7]
    8f54:	896a      	ldrh	r2, [r5, #10]
    8f56:	f8a4 200b 	strh.w	r2, [r4, #11]
    8f5a:	7c2a      	ldrb	r2, [r5, #16]
    8f5c:	4620      	mov	r0, r4
    8f5e:	7362      	strb	r2, [r4, #13]
    8f60:	1d29      	adds	r1, r5, #4
    8f62:	7c6a      	ldrb	r2, [r5, #17]
    8f64:	7382      	strb	r2, [r0, #14]
    8f66:	7b8a      	ldrb	r2, [r1, #14]
    8f68:	73c2      	strb	r2, [r0, #15]
    8f6a:	7e8a      	ldrb	r2, [r1, #26]
    8f6c:	7402      	strb	r2, [r0, #16]
    8f6e:	7a4a      	ldrb	r2, [r1, #9]
    8f70:	7442      	strb	r2, [r0, #17]
    8f72:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    8f76:	f8ad 2000 	strh.w	r2, [sp]
    8f7a:	8242      	strh	r2, [r0, #18]
    8f7c:	7cca      	ldrb	r2, [r1, #19]
    8f7e:	7502      	strb	r2, [r0, #20]
    8f80:	694a      	ldr	r2, [r1, #20]
    8f82:	f8c0 2015 	str.w	r2, [r0, #21]
    8f86:	8b0a      	ldrh	r2, [r1, #24]
    8f88:	f8a0 2019 	strh.w	r2, [r0, #25]
    8f8c:	7a0a      	ldrb	r2, [r1, #8]
    8f8e:	76c2      	strb	r2, [r0, #27]
    8f90:	7a0d      	ldrb	r5, [r1, #8]
    8f92:	2de5      	cmp	r5, #229	; 0xe5
    8f94:	d300      	bcc.n	8f98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    8f96:	25e5      	movs	r5, #229	; 0xe5
    8f98:	462a      	mov	r2, r5
    8f9a:	301c      	adds	r0, #28
    8f9c:	311c      	adds	r1, #28
    8f9e:	f001 fcc5 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8fa2:	351a      	adds	r5, #26
    8fa4:	b2e8      	uxtb	r0, r5
    8fa6:	2800      	cmp	r0, #0
    8fa8:	d001      	beq.n	8fae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    8faa:	7060      	strb	r0, [r4, #1]
    8fac:	1c80      	adds	r0, r0, #2
    8fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fb2:	7026      	strb	r6, [r4, #0]
    8fb4:	70a7      	strb	r7, [r4, #2]
    8fb6:	2001      	movs	r0, #1
    8fb8:	e7f7      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8fba:	7026      	strb	r6, [r4, #0]
    8fbc:	70a3      	strb	r3, [r4, #2]
    8fbe:	7928      	ldrb	r0, [r5, #4]
    8fc0:	70e0      	strb	r0, [r4, #3]
    8fc2:	7968      	ldrb	r0, [r5, #5]
    8fc4:	7120      	strb	r0, [r4, #4]
    8fc6:	79a8      	ldrb	r0, [r5, #6]
    8fc8:	7160      	strb	r0, [r4, #5]
    8fca:	88e8      	ldrh	r0, [r5, #6]
    8fcc:	0a00      	lsrs	r0, r0, #8
    8fce:	71a0      	strb	r0, [r4, #6]
    8fd0:	7a28      	ldrb	r0, [r5, #8]
    8fd2:	71e0      	strb	r0, [r4, #7]
    8fd4:	2006      	movs	r0, #6
    8fd6:	e7e8      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8fd8:	7026      	strb	r6, [r4, #0]
    8fda:	2020      	movs	r0, #32
    8fdc:	e041      	b.n	9062 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ea>
    8fde:	7026      	strb	r6, [r4, #0]
    8fe0:	2021      	movs	r0, #33	; 0x21
    8fe2:	70a0      	strb	r0, [r4, #2]
    8fe4:	7928      	ldrb	r0, [r5, #4]
    8fe6:	70e0      	strb	r0, [r4, #3]
    8fe8:	7968      	ldrb	r0, [r5, #5]
    8fea:	7120      	strb	r0, [r4, #4]
    8fec:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8ff0:	0a00      	lsrs	r0, r0, #8
    8ff2:	7160      	strb	r0, [r4, #5]
    8ff4:	79e8      	ldrb	r0, [r5, #7]
    8ff6:	71a0      	strb	r0, [r4, #6]
    8ff8:	7a28      	ldrb	r0, [r5, #8]
    8ffa:	71e0      	strb	r0, [r4, #7]
    8ffc:	7a68      	ldrb	r0, [r5, #9]
    8ffe:	7220      	strb	r0, [r4, #8]
    9000:	7aa8      	ldrb	r0, [r5, #10]
    9002:	7260      	strb	r0, [r4, #9]
    9004:	7ae8      	ldrb	r0, [r5, #11]
    9006:	72a0      	strb	r0, [r4, #10]
    9008:	2009      	movs	r0, #9
    900a:	e7ce      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    900c:	7022      	strb	r2, [r4, #0]
    900e:	20a1      	movs	r0, #161	; 0xa1
    9010:	70a0      	strb	r0, [r4, #2]
    9012:	7928      	ldrb	r0, [r5, #4]
    9014:	70e0      	strb	r0, [r4, #3]
    9016:	7968      	ldrb	r0, [r5, #5]
    9018:	7120      	strb	r0, [r4, #4]
    901a:	2000      	movs	r0, #0
    901c:	7160      	strb	r0, [r4, #5]
    901e:	2004      	movs	r0, #4
    9020:	e7c3      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    9022:	7022      	strb	r2, [r4, #0]
    9024:	20a2      	movs	r0, #162	; 0xa2
    9026:	70a0      	strb	r0, [r4, #2]
    9028:	7928      	ldrb	r0, [r5, #4]
    902a:	70e0      	strb	r0, [r4, #3]
    902c:	88a8      	ldrh	r0, [r5, #4]
    902e:	0a00      	lsrs	r0, r0, #8
    9030:	7120      	strb	r0, [r4, #4]
    9032:	79a8      	ldrb	r0, [r5, #6]
    9034:	7160      	strb	r0, [r4, #5]
    9036:	88e8      	ldrh	r0, [r5, #6]
    9038:	0a00      	lsrs	r0, r0, #8
    903a:	71a0      	strb	r0, [r4, #6]
    903c:	7a28      	ldrb	r0, [r5, #8]
    903e:	71e0      	strb	r0, [r4, #7]
    9040:	8928      	ldrh	r0, [r5, #8]
    9042:	0a00      	lsrs	r0, r0, #8
    9044:	7220      	strb	r0, [r4, #8]
    9046:	7aa8      	ldrb	r0, [r5, #10]
    9048:	7260      	strb	r0, [r4, #9]
    904a:	8968      	ldrh	r0, [r5, #10]
    904c:	0a00      	lsrs	r0, r0, #8
    904e:	72a0      	strb	r0, [r4, #10]
    9050:	7b28      	ldrb	r0, [r5, #12]
    9052:	72e0      	strb	r0, [r4, #11]
    9054:	89a8      	ldrh	r0, [r5, #12]
    9056:	0a00      	lsrs	r0, r0, #8
    9058:	7320      	strb	r0, [r4, #12]
    905a:	200b      	movs	r0, #11
    905c:	e7a5      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    905e:	7022      	strb	r2, [r4, #0]
    9060:	20a3      	movs	r0, #163	; 0xa3
    9062:	70a0      	strb	r0, [r4, #2]
    9064:	7928      	ldrb	r0, [r5, #4]
    9066:	70e0      	strb	r0, [r4, #3]
    9068:	88a8      	ldrh	r0, [r5, #4]
    906a:	0a00      	lsrs	r0, r0, #8
    906c:	7120      	strb	r0, [r4, #4]
    906e:	79a8      	ldrb	r0, [r5, #6]
    9070:	7160      	strb	r0, [r4, #5]
    9072:	79e8      	ldrb	r0, [r5, #7]
    9074:	71a0      	strb	r0, [r4, #6]
    9076:	2005      	movs	r0, #5
    9078:	e797      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    907a:	7026      	strb	r6, [r4, #0]
    907c:	2013      	movs	r0, #19
    907e:	70a0      	strb	r0, [r4, #2]
    9080:	7928      	ldrb	r0, [r5, #4]
    9082:	70e0      	strb	r0, [r4, #3]
    9084:	7968      	ldrb	r0, [r5, #5]
    9086:	7120      	strb	r0, [r4, #4]
    9088:	f8d5 0006 	ldr.w	r0, [r5, #6]
    908c:	f8c4 0005 	str.w	r0, [r4, #5]
    9090:	8968      	ldrh	r0, [r5, #10]
    9092:	f8a4 0009 	strh.w	r0, [r4, #9]
    9096:	200a      	movs	r0, #10
    9098:	e787      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    909a:	7022      	strb	r2, [r4, #0]
    909c:	20a4      	movs	r0, #164	; 0xa4
    909e:	70a0      	strb	r0, [r4, #2]
    90a0:	7928      	ldrb	r0, [r5, #4]
    90a2:	70e0      	strb	r0, [r4, #3]
    90a4:	88a8      	ldrh	r0, [r5, #4]
    90a6:	0a00      	lsrs	r0, r0, #8
    90a8:	7120      	strb	r0, [r4, #4]
    90aa:	79a8      	ldrb	r0, [r5, #6]
    90ac:	7160      	strb	r0, [r4, #5]
    90ae:	79e8      	ldrb	r0, [r5, #7]
    90b0:	71a0      	strb	r0, [r4, #6]
    90b2:	e626      	b.n	8d02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x8a>
    90b4:	7022      	strb	r2, [r4, #0]
    90b6:	2080      	movs	r0, #128	; 0x80
    90b8:	70a0      	strb	r0, [r4, #2]
    90ba:	88a9      	ldrh	r1, [r5, #4]
    90bc:	f8a4 1003 	strh.w	r1, [r4, #3]
    90c0:	88e9      	ldrh	r1, [r5, #6]
    90c2:	f8a4 1005 	strh.w	r1, [r4, #5]
    90c6:	7a29      	ldrb	r1, [r5, #8]
    90c8:	71e1      	strb	r1, [r4, #7]
    90ca:	8969      	ldrh	r1, [r5, #10]
    90cc:	8121      	strh	r1, [r4, #8]
    90ce:	89a9      	ldrh	r1, [r5, #12]
    90d0:	8161      	strh	r1, [r4, #10]
    90d2:	89e9      	ldrh	r1, [r5, #14]
    90d4:	81a1      	strh	r1, [r4, #12]
    90d6:	7c29      	ldrb	r1, [r5, #16]
    90d8:	f001 0101 	and.w	r1, r1, #1
    90dc:	73a1      	strb	r1, [r4, #14]
    90de:	200d      	movs	r0, #13
    90e0:	e763      	b.n	8faa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>

000090e2 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    90e2:	223e      	movs	r2, #62	; 0x3e
    90e4:	7002      	strb	r2, [r0, #0]
    90e6:	2201      	movs	r2, #1
    90e8:	7082      	strb	r2, [r0, #2]
    90ea:	790a      	ldrb	r2, [r1, #4]
    90ec:	70c2      	strb	r2, [r0, #3]
    90ee:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    90f2:	7102      	strb	r2, [r0, #4]
    90f4:	880a      	ldrh	r2, [r1, #0]
    90f6:	0a12      	lsrs	r2, r2, #8
    90f8:	7142      	strb	r2, [r0, #5]
    90fa:	788a      	ldrb	r2, [r1, #2]
    90fc:	7182      	strb	r2, [r0, #6]
    90fe:	78ca      	ldrb	r2, [r1, #3]
    9100:	71c2      	strb	r2, [r0, #7]
    9102:	684a      	ldr	r2, [r1, #4]
    9104:	6082      	str	r2, [r0, #8]
    9106:	890a      	ldrh	r2, [r1, #8]
    9108:	8182      	strh	r2, [r0, #12]
    910a:	7d8a      	ldrb	r2, [r1, #22]
    910c:	7382      	strb	r2, [r0, #14]
    910e:	8aca      	ldrh	r2, [r1, #22]
    9110:	0a12      	lsrs	r2, r2, #8
    9112:	73c2      	strb	r2, [r0, #15]
    9114:	7e0a      	ldrb	r2, [r1, #24]
    9116:	7402      	strb	r2, [r0, #16]
    9118:	8b0a      	ldrh	r2, [r1, #24]
    911a:	0a12      	lsrs	r2, r2, #8
    911c:	7442      	strb	r2, [r0, #17]
    911e:	7e8a      	ldrb	r2, [r1, #26]
    9120:	7482      	strb	r2, [r0, #18]
    9122:	8b4a      	ldrh	r2, [r1, #26]
    9124:	0a12      	lsrs	r2, r2, #8
    9126:	74c2      	strb	r2, [r0, #19]
    9128:	7f09      	ldrb	r1, [r1, #28]
    912a:	7501      	strb	r1, [r0, #20]
    912c:	2113      	movs	r1, #19
    912e:	7041      	strb	r1, [r0, #1]
    9130:	4608      	mov	r0, r1
    9132:	4770      	bx	lr
    9134:	223e      	movs	r2, #62	; 0x3e
    9136:	7002      	strb	r2, [r0, #0]
    9138:	220a      	movs	r2, #10
    913a:	7082      	strb	r2, [r0, #2]
    913c:	790a      	ldrb	r2, [r1, #4]
    913e:	70c2      	strb	r2, [r0, #3]
    9140:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    9144:	7102      	strb	r2, [r0, #4]
    9146:	880a      	ldrh	r2, [r1, #0]
    9148:	0a12      	lsrs	r2, r2, #8
    914a:	7142      	strb	r2, [r0, #5]
    914c:	788a      	ldrb	r2, [r1, #2]
    914e:	7182      	strb	r2, [r0, #6]
    9150:	78ca      	ldrb	r2, [r1, #3]
    9152:	71c2      	strb	r2, [r0, #7]
    9154:	684a      	ldr	r2, [r1, #4]
    9156:	6082      	str	r2, [r0, #8]
    9158:	890a      	ldrh	r2, [r1, #8]
    915a:	8182      	strh	r2, [r0, #12]
    915c:	f8d1 200a 	ldr.w	r2, [r1, #10]
    9160:	f8c0 200e 	str.w	r2, [r0, #14]
    9164:	89ca      	ldrh	r2, [r1, #14]
    9166:	8242      	strh	r2, [r0, #18]
    9168:	690a      	ldr	r2, [r1, #16]
    916a:	6142      	str	r2, [r0, #20]
    916c:	8a8a      	ldrh	r2, [r1, #20]
    916e:	8302      	strh	r2, [r0, #24]
    9170:	7d8a      	ldrb	r2, [r1, #22]
    9172:	7682      	strb	r2, [r0, #26]
    9174:	8aca      	ldrh	r2, [r1, #22]
    9176:	0a12      	lsrs	r2, r2, #8
    9178:	76c2      	strb	r2, [r0, #27]
    917a:	7e0a      	ldrb	r2, [r1, #24]
    917c:	7702      	strb	r2, [r0, #28]
    917e:	8b0a      	ldrh	r2, [r1, #24]
    9180:	0a12      	lsrs	r2, r2, #8
    9182:	7742      	strb	r2, [r0, #29]
    9184:	7e8a      	ldrb	r2, [r1, #26]
    9186:	7782      	strb	r2, [r0, #30]
    9188:	8b4a      	ldrh	r2, [r1, #26]
    918a:	0a12      	lsrs	r2, r2, #8
    918c:	77c2      	strb	r2, [r0, #31]
    918e:	7f09      	ldrb	r1, [r1, #28]
    9190:	f880 1020 	strb.w	r1, [r0, #32]
    9194:	211f      	movs	r1, #31
    9196:	7041      	strb	r1, [r0, #1]
    9198:	4608      	mov	r0, r1
    919a:	4770      	bx	lr
    919c:	094a      	lsrs	r2, r1, #5
    919e:	f001 011f 	and.w	r1, r1, #31
    91a2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    91a6:	40c8      	lsrs	r0, r1
    91a8:	f000 0001 	and.w	r0, r0, #1
    91ac:	4770      	bx	lr

000091ae <sdc_hci_get>:
    91ae:	b510      	push	{r4, lr}
    91b0:	460c      	mov	r4, r1
    91b2:	b130      	cbz	r0, 91c2 <sdc_hci_get+0x14>
    91b4:	b12c      	cbz	r4, 91c2 <sdc_hci_get+0x14>
    91b6:	f7f7 fda1 	bl	cfc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    91ba:	b128      	cbz	r0, 91c8 <sdc_hci_get+0x1a>
    91bc:	7020      	strb	r0, [r4, #0]
    91be:	2000      	movs	r0, #0
    91c0:	bd10      	pop	{r4, pc}
    91c2:	f06f 0015 	mvn.w	r0, #21
    91c6:	bd10      	pop	{r4, pc}
    91c8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    91cc:	bd10      	pop	{r4, pc}

000091ce <sdc_hci_cmd_cb_set_event_mask>:
    91ce:	b510      	push	{r4, lr}
    91d0:	f7f7 fe34 	bl	e3c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    91d4:	2000      	movs	r0, #0
    91d6:	bd10      	pop	{r4, pc}

000091d8 <sdc_hci_cmd_vs_conn_event_extend>:
    91d8:	b508      	push	{r3, lr}
    91da:	7800      	ldrb	r0, [r0, #0]
    91dc:	f88d 0000 	strb.w	r0, [sp]
    91e0:	4668      	mov	r0, sp
    91e2:	f000 ffd1 	bl	a188 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    91e6:	bd08      	pop	{r3, pc}

000091e8 <sdc_hci_cmd_vs_conn_update>:
    91e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    91ea:	2100      	movs	r1, #0
    91ec:	9100      	str	r1, [sp, #0]
    91ee:	9101      	str	r1, [sp, #4]
    91f0:	9102      	str	r1, [sp, #8]
    91f2:	9103      	str	r1, [sp, #12]
    91f4:	f8d0 1002 	ldr.w	r1, [r0, #2]
    91f8:	f641 524c 	movw	r2, #7500	; 0x1d4c
    91fc:	4291      	cmp	r1, r2
    91fe:	d304      	bcc.n	920a <sdc_hci_cmd_vs_conn_update+0x22>
    9200:	f240 42e2 	movw	r2, #1250	; 0x4e2
    9204:	fbb1 f1f2 	udiv	r1, r1, r2
    9208:	e005      	b.n	9216 <sdc_hci_cmd_vs_conn_update+0x2e>
    920a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    920e:	fbb1 f1f2 	udiv	r1, r1, r2
    9212:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    9216:	8802      	ldrh	r2, [r0, #0]
    9218:	b289      	uxth	r1, r1
    921a:	f8ad 2000 	strh.w	r2, [sp]
    921e:	f8ad 1002 	strh.w	r1, [sp, #2]
    9222:	f8ad 1004 	strh.w	r1, [sp, #4]
    9226:	88c1      	ldrh	r1, [r0, #6]
    9228:	f8ad 1006 	strh.w	r1, [sp, #6]
    922c:	8900      	ldrh	r0, [r0, #8]
    922e:	f8ad 0008 	strh.w	r0, [sp, #8]
    9232:	4668      	mov	r0, sp
    9234:	f000 fec3 	bl	9fbe <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    9238:	b004      	add	sp, #16
    923a:	bd10      	pop	{r4, pc}

0000923c <sdc_hci_cmd_vs_event_length_set>:
    923c:	f7fa bbbe 	b.w	39bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00009240 <sdc_hci_cmd_vs_llpm_mode_set>:
    9240:	2001      	movs	r0, #1
    9242:	4770      	bx	lr

00009244 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    9244:	7800      	ldrb	r0, [r0, #0]
    9246:	b100      	cbz	r0, 924a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    9248:	2001      	movs	r0, #1
    924a:	f000 bf87 	b.w	a15c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000924e <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    924e:	b510      	push	{r4, lr}
    9250:	4604      	mov	r4, r0
    9252:	f7ff f9bd 	bl	85d0 <mpsl_temperature_get>
    9256:	17c1      	asrs	r1, r0, #31
    9258:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    925c:	1080      	asrs	r0, r0, #2
    925e:	287f      	cmp	r0, #127	; 0x7f
    9260:	dd01      	ble.n	9266 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    9262:	207f      	movs	r0, #127	; 0x7f
    9264:	e004      	b.n	9270 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    9266:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    926a:	4288      	cmp	r0, r1
    926c:	da00      	bge.n	9270 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    926e:	4608      	mov	r0, r1
    9270:	7020      	strb	r0, [r4, #0]
    9272:	2000      	movs	r0, #0
    9274:	bd10      	pop	{r4, pc}

00009276 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    9276:	f000 bf76 	b.w	a166 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000927a <sdc_hci_cmd_ip_read_bd_addr>:
    927a:	f000 bf8d 	b.w	a198 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000927e <sdc_hci_cmd_ip_read_local_version_information>:
    927e:	f7fa bbef 	b.w	3a60 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00009282 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    9282:	f000 be78 	b.w	9f76 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00009286 <sdc_hci_cmd_le_clear_filter_accept_list>:
    9286:	f000 be8d 	b.w	9fa4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000928a <sdc_hci_cmd_le_encrypt>:
    928a:	f000 bedb 	b.w	a044 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000928e <sdc_hci_cmd_le_rand>:
    928e:	f000 bee2 	b.w	a056 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00009292 <sdc_hci_cmd_le_read_buffer_size>:
    9292:	f7fa bb73 	b.w	397c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00009296 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    9296:	f000 bef4 	b.w	a082 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000929a <sdc_hci_cmd_le_read_transmit_power>:
    929a:	f000 bee2 	b.w	a062 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000929e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    929e:	f000 bef7 	b.w	a090 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

000092a2 <sdc_hci_cmd_le_set_event_mask>:
    92a2:	b510      	push	{r4, lr}
    92a4:	f7f7 fdc2 	bl	e2c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    92a8:	2000      	movs	r0, #0
    92aa:	bd10      	pop	{r4, pc}

000092ac <sdc_hci_cmd_le_set_random_address>:
    92ac:	f000 bf05 	b.w	a0ba <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

000092b0 <sdc_hci_cmd_le_set_scan_enable>:
    92b0:	f000 bf11 	b.w	a0d6 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

000092b4 <sdc_hci_cmd_le_set_scan_params>:
    92b4:	f000 bf25 	b.w	a102 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    92b8:	b570      	push	{r4, r5, r6, lr}
    92ba:	880b      	ldrh	r3, [r1, #0]
    92bc:	7cc4      	ldrb	r4, [r0, #19]
    92be:	f100 0518 	add.w	r5, r0, #24
    92c2:	f3c3 060e 	ubfx	r6, r3, #0, #15
    92c6:	8802      	ldrh	r2, [r0, #0]
    92c8:	4435      	add	r5, r6
    92ca:	1d64      	adds	r4, r4, #5
    92cc:	882d      	ldrh	r5, [r5, #0]
    92ce:	4422      	add	r2, r4
    92d0:	b292      	uxth	r2, r2
    92d2:	4425      	add	r5, r4
    92d4:	1e54      	subs	r4, r2, #1
    92d6:	442c      	add	r4, r5
    92d8:	fb94 f4f2 	sdiv	r4, r4, r2
    92dc:	fb02 6204 	mla	r2, r2, r4, r6
    92e0:	8840      	ldrh	r0, [r0, #2]
    92e2:	b292      	uxth	r2, r2
    92e4:	4290      	cmp	r0, r2
    92e6:	d903      	bls.n	92f0 <sdc_hci_cmd_le_set_scan_params+0x3c>
    92e8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    92ec:	4310      	orrs	r0, r2
    92ee:	e002      	b.n	92f6 <sdc_hci_cmd_le_set_scan_params+0x42>
    92f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    92f4:	4398      	bics	r0, r3
    92f6:	8008      	strh	r0, [r1, #0]
    92f8:	bd70      	pop	{r4, r5, r6, pc}
    92fa:	0442      	lsls	r2, r0, #17
    92fc:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    9300:	d107      	bne.n	9312 <sdc_hci_cmd_le_set_scan_params+0x5e>
    9302:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    9306:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    930a:	4288      	cmp	r0, r1
    930c:	d001      	beq.n	9312 <sdc_hci_cmd_le_set_scan_params+0x5e>
    930e:	2001      	movs	r0, #1
    9310:	4770      	bx	lr
    9312:	2000      	movs	r0, #0
    9314:	4770      	bx	lr

00009316 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    9316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    931a:	4604      	mov	r4, r0
    931c:	f100 0318 	add.w	r3, r0, #24
    9320:	88c0      	ldrh	r0, [r0, #6]
    9322:	460e      	mov	r6, r1
    9324:	f3c0 070e 	ubfx	r7, r0, #0, #15
    9328:	8a20      	ldrh	r0, [r4, #16]
    932a:	19d9      	adds	r1, r3, r7
    932c:	b108      	cbz	r0, 9332 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    932e:	42b0      	cmp	r0, r6
    9330:	d202      	bcs.n	9338 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    9332:	2000      	movs	r0, #0
    9334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9338:	89a0      	ldrh	r0, [r4, #12]
    933a:	2500      	movs	r5, #0
    933c:	b140      	cbz	r0, 9350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    933e:	f8b1 c000 	ldrh.w	ip, [r1]
    9342:	4560      	cmp	r0, ip
    9344:	d006      	beq.n	9354 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    9346:	f44f 7101 	mov.w	r1, #516	; 0x204
    934a:	2014      	movs	r0, #20
    934c:	f7f7 fc18 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9350:	800d      	strh	r5, [r1, #0]
    9352:	e00e      	b.n	9372 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    9354:	f894 c013 	ldrb.w	ip, [r4, #19]
    9358:	4418      	add	r0, r3
    935a:	f10c 0c05 	add.w	ip, ip, #5
    935e:	44bc      	add	ip, r7
    9360:	4460      	add	r0, ip
    9362:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    9366:	f820 cc03 	strh.w	ip, [r0, #-3]
    936a:	f894 c016 	ldrb.w	ip, [r4, #22]
    936e:	f800 cc01 	strb.w	ip, [r0, #-1]
    9372:	89a0      	ldrh	r0, [r4, #12]
    9374:	4430      	add	r0, r6
    9376:	81a0      	strh	r0, [r4, #12]
    9378:	8808      	ldrh	r0, [r1, #0]
    937a:	4430      	add	r0, r6
    937c:	8008      	strh	r0, [r1, #0]
    937e:	b12a      	cbz	r2, 938c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    9380:	1da1      	adds	r1, r4, #6
    9382:	4620      	mov	r0, r4
    9384:	f7ff ff98 	bl	92b8 <sdc_hci_cmd_le_set_scan_params+0x4>
    9388:	81a5      	strh	r5, [r4, #12]
    938a:	e00a      	b.n	93a2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    938c:	7ce0      	ldrb	r0, [r4, #19]
    938e:	89a1      	ldrh	r1, [r4, #12]
    9390:	1d40      	adds	r0, r0, #5
    9392:	4438      	add	r0, r7
    9394:	4419      	add	r1, r3
    9396:	4408      	add	r0, r1
    9398:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    939c:	82a1      	strh	r1, [r4, #20]
    939e:	7880      	ldrb	r0, [r0, #2]
    93a0:	75a0      	strb	r0, [r4, #22]
    93a2:	8225      	strh	r5, [r4, #16]
    93a4:	2001      	movs	r0, #1
    93a6:	e7c5      	b.n	9334 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

000093a8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    93a8:	1c80      	adds	r0, r0, #2
    93aa:	4770      	bx	lr

000093ac <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    93ac:	b510      	push	{r4, lr}
    93ae:	88c2      	ldrh	r2, [r0, #6]
    93b0:	8903      	ldrh	r3, [r0, #8]
    93b2:	f3c2 010e 	ubfx	r1, r2, #0, #15
    93b6:	f3c3 040e 	ubfx	r4, r3, #0, #15
    93ba:	1a61      	subs	r1, r4, r1
    93bc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    93c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    93c4:	429a      	cmp	r2, r3
    93c6:	d101      	bne.n	93cc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    93c8:	8842      	ldrh	r2, [r0, #2]
    93ca:	4411      	add	r1, r2
    93cc:	7cc2      	ldrb	r2, [r0, #19]
    93ce:	8800      	ldrh	r0, [r0, #0]
    93d0:	4410      	add	r0, r2
    93d2:	1d40      	adds	r0, r0, #5
    93d4:	b280      	uxth	r0, r0
    93d6:	fb91 f0f0 	sdiv	r0, r1, r0
    93da:	b280      	uxth	r0, r0
    93dc:	bd10      	pop	{r4, pc}

000093de <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    93de:	b510      	push	{r4, lr}
    93e0:	4604      	mov	r4, r0
    93e2:	88c0      	ldrh	r0, [r0, #6]
    93e4:	88a1      	ldrh	r1, [r4, #4]
    93e6:	4281      	cmp	r1, r0
    93e8:	d003      	beq.n	93f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    93ea:	8960      	ldrh	r0, [r4, #10]
    93ec:	b908      	cbnz	r0, 93f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    93ee:	89e0      	ldrh	r0, [r4, #14]
    93f0:	b108      	cbz	r0, 93f6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    93f2:	2000      	movs	r0, #0
    93f4:	bd10      	pop	{r4, pc}
    93f6:	1d21      	adds	r1, r4, #4
    93f8:	4620      	mov	r0, r4
    93fa:	f7ff ff5d 	bl	92b8 <sdc_hci_cmd_le_set_scan_params+0x4>
    93fe:	2000      	movs	r0, #0
    9400:	81e0      	strh	r0, [r4, #14]
    9402:	2001      	movs	r0, #1
    9404:	bd10      	pop	{r4, pc}

00009406 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    9406:	b510      	push	{r4, lr}
    9408:	88c4      	ldrh	r4, [r0, #6]
    940a:	8883      	ldrh	r3, [r0, #4]
    940c:	4601      	mov	r1, r0
    940e:	f100 0218 	add.w	r2, r0, #24
    9412:	f3c3 000e 	ubfx	r0, r3, #0, #15
    9416:	4410      	add	r0, r2
    9418:	42a3      	cmp	r3, r4
    941a:	d002      	beq.n	9422 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    941c:	8949      	ldrh	r1, [r1, #10]
    941e:	2900      	cmp	r1, #0
    9420:	d000      	beq.n	9424 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    9422:	2000      	movs	r0, #0
    9424:	bd10      	pop	{r4, pc}

00009426 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    9426:	8803      	ldrh	r3, [r0, #0]
    9428:	2b45      	cmp	r3, #69	; 0x45
    942a:	d200      	bcs.n	942e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    942c:	2345      	movs	r3, #69	; 0x45
    942e:	8013      	strh	r3, [r2, #0]
    9430:	88c2      	ldrh	r2, [r0, #6]
    9432:	f3c2 030e 	ubfx	r3, r2, #0, #15
    9436:	f100 0218 	add.w	r2, r0, #24
    943a:	441a      	add	r2, r3
    943c:	600a      	str	r2, [r1, #0]
    943e:	8980      	ldrh	r0, [r0, #12]
    9440:	4770      	bx	lr

00009442 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    9442:	7cc0      	ldrb	r0, [r0, #19]
    9444:	1d40      	adds	r0, r0, #5
    9446:	4408      	add	r0, r1
    9448:	1ec0      	subs	r0, r0, #3
    944a:	6010      	str	r0, [r2, #0]
    944c:	8808      	ldrh	r0, [r1, #0]
    944e:	4770      	bx	lr

00009450 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    9450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9454:	461d      	mov	r5, r3
    9456:	4616      	mov	r6, r2
    9458:	9f06      	ldr	r7, [sp, #24]
    945a:	460b      	mov	r3, r1
    945c:	4604      	mov	r4, r0
    945e:	463a      	mov	r2, r7
    9460:	4629      	mov	r1, r5
    9462:	4630      	mov	r0, r6
    9464:	f000 f839 	bl	94da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    9468:	4283      	cmp	r3, r0
    946a:	d201      	bcs.n	9470 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    946c:	219e      	movs	r1, #158	; 0x9e
    946e:	e012      	b.n	9496 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    9470:	07a0      	lsls	r0, r4, #30
    9472:	d001      	beq.n	9478 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    9474:	219f      	movs	r1, #159	; 0x9f
    9476:	e00e      	b.n	9496 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    9478:	2218      	movs	r2, #24
    947a:	2100      	movs	r1, #0
    947c:	4620      	mov	r0, r4
    947e:	f001 facf 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9482:	19a8      	adds	r0, r5, r6
    9484:	1d40      	adds	r0, r0, #5
    9486:	4378      	muls	r0, r7
    9488:	b280      	uxth	r0, r0
    948a:	74e5      	strb	r5, [r4, #19]
    948c:	8060      	strh	r0, [r4, #2]
    948e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9492:	d903      	bls.n	949c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    9494:	21a4      	movs	r1, #164	; 0xa4
    9496:	2014      	movs	r0, #20
    9498:	f7f7 fb72 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    949c:	8026      	strh	r6, [r4, #0]
    949e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000094a2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    94a2:	b570      	push	{r4, r5, r6, lr}
    94a4:	460b      	mov	r3, r1
    94a6:	4604      	mov	r4, r0
    94a8:	f100 0118 	add.w	r1, r0, #24
    94ac:	8902      	ldrh	r2, [r0, #8]
    94ae:	8880      	ldrh	r0, [r0, #4]
    94b0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    94b4:	440d      	add	r5, r1
    94b6:	4282      	cmp	r2, r0
    94b8:	d101      	bne.n	94be <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    94ba:	2000      	movs	r0, #0
    94bc:	bd70      	pop	{r4, r5, r6, pc}
    94be:	b123      	cbz	r3, 94ca <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    94c0:	7ce2      	ldrb	r2, [r4, #19]
    94c2:	1ca9      	adds	r1, r5, #2
    94c4:	4618      	mov	r0, r3
    94c6:	f001 fa31 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    94ca:	882d      	ldrh	r5, [r5, #0]
    94cc:	f104 0108 	add.w	r1, r4, #8
    94d0:	4620      	mov	r0, r4
    94d2:	f7ff fef1 	bl	92b8 <sdc_hci_cmd_le_set_scan_params+0x4>
    94d6:	4628      	mov	r0, r5
    94d8:	bd70      	pop	{r4, r5, r6, pc}

000094da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    94da:	4401      	add	r1, r0
    94dc:	1d49      	adds	r1, r1, #5
    94de:	4351      	muls	r1, r2
    94e0:	b28a      	uxth	r2, r1
    94e2:	2100      	movs	r1, #0
    94e4:	2845      	cmp	r0, #69	; 0x45
    94e6:	d202      	bcs.n	94ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    94e8:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    94ec:	b281      	uxth	r1, r0
    94ee:	3218      	adds	r2, #24
    94f0:	1850      	adds	r0, r2, r1
    94f2:	b280      	uxth	r0, r0
    94f4:	4770      	bx	lr

000094f6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    94f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94fa:	4688      	mov	r8, r1
    94fc:	88c1      	ldrh	r1, [r0, #6]
    94fe:	4604      	mov	r4, r0
    9500:	8900      	ldrh	r0, [r0, #8]
    9502:	f3c1 060e 	ubfx	r6, r1, #0, #15
    9506:	f104 0518 	add.w	r5, r4, #24
    950a:	f3c0 070e 	ubfx	r7, r0, #0, #15
    950e:	eb05 0906 	add.w	r9, r5, r6
    9512:	f7ff fef2 	bl	92fa <sdc_hci_cmd_le_set_scan_params+0x46>
    9516:	2200      	movs	r2, #0
    9518:	b998      	cbnz	r0, 9542 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    951a:	8820      	ldrh	r0, [r4, #0]
    951c:	2845      	cmp	r0, #69	; 0x45
    951e:	d200      	bcs.n	9522 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    9520:	2045      	movs	r0, #69	; 0x45
    9522:	42b7      	cmp	r7, r6
    9524:	d906      	bls.n	9534 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    9526:	7ce3      	ldrb	r3, [r4, #19]
    9528:	1bb9      	subs	r1, r7, r6
    952a:	1ac9      	subs	r1, r1, r3
    952c:	1f49      	subs	r1, r1, #5
    952e:	4281      	cmp	r1, r0
    9530:	da00      	bge.n	9534 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    9532:	4608      	mov	r0, r1
    9534:	89a1      	ldrh	r1, [r4, #12]
    9536:	b111      	cbz	r1, 953e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    9538:	f8b9 3000 	ldrh.w	r3, [r9]
    953c:	1ac0      	subs	r0, r0, r3
    953e:	4540      	cmp	r0, r8
    9540:	da03      	bge.n	954a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    9542:	8222      	strh	r2, [r4, #16]
    9544:	2000      	movs	r0, #0
    9546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    954a:	7ce0      	ldrb	r0, [r4, #19]
    954c:	4429      	add	r1, r5
    954e:	1d40      	adds	r0, r0, #5
    9550:	4430      	add	r0, r6
    9552:	4408      	add	r0, r1
    9554:	f8a4 8010 	strh.w	r8, [r4, #16]
    9558:	1ec0      	subs	r0, r0, #3
    955a:	e7f4      	b.n	9546 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000955c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    955c:	b510      	push	{r4, lr}
    955e:	000c      	movs	r4, r1
    9560:	d004      	beq.n	956c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    9562:	2c08      	cmp	r4, #8
    9564:	d207      	bcs.n	9576 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    9566:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    956a:	e00a      	b.n	9582 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    956c:	b108      	cbz	r0, 9572 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    956e:	2100      	movs	r1, #0
    9570:	6001      	str	r1, [r0, #0]
    9572:	2000      	movs	r0, #0
    9574:	bd10      	pop	{r4, pc}
    9576:	b158      	cbz	r0, 9590 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    9578:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    957c:	d304      	bcc.n	9588 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    957e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    9582:	2015      	movs	r0, #21
    9584:	f7f7 fafc 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9588:	b2a1      	uxth	r1, r4
    958a:	6800      	ldr	r0, [r0, #0]
    958c:	f000 f814 	bl	95b8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    9590:	1d20      	adds	r0, r4, #4
    9592:	bd10      	pop	{r4, pc}

00009594 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    9594:	2100      	movs	r1, #0
    9596:	6802      	ldr	r2, [r0, #0]
    9598:	e003      	b.n	95a2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    959a:	8893      	ldrh	r3, [r2, #4]
    959c:	6812      	ldr	r2, [r2, #0]
    959e:	4419      	add	r1, r3
    95a0:	b289      	uxth	r1, r1
    95a2:	2a00      	cmp	r2, #0
    95a4:	d1f9      	bne.n	959a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    95a6:	f000 b807 	b.w	95b8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

000095aa <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    95aa:	2300      	movs	r3, #0
    95ac:	600b      	str	r3, [r1, #0]
    95ae:	808a      	strh	r2, [r1, #4]
    95b0:	6802      	ldr	r2, [r0, #0]
    95b2:	600a      	str	r2, [r1, #0]
    95b4:	6001      	str	r1, [r0, #0]
    95b6:	4770      	bx	lr
    95b8:	2300      	movs	r3, #0
    95ba:	6043      	str	r3, [r0, #4]
    95bc:	1d02      	adds	r2, r0, #4
    95be:	8101      	strh	r1, [r0, #8]
    95c0:	6002      	str	r2, [r0, #0]
    95c2:	4770      	bx	lr
    95c4:	b170      	cbz	r0, 95e4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3a>
    95c6:	7882      	ldrb	r2, [r0, #2]
    95c8:	fbb1 f3f2 	udiv	r3, r1, r2
    95cc:	fb02 1213 	mls	r2, r2, r3, r1
    95d0:	b2d2      	uxtb	r2, r2
    95d2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    95d6:	895b      	ldrh	r3, [r3, #10]
    95d8:	428b      	cmp	r3, r1
    95da:	d101      	bne.n	95e0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x36>
    95dc:	4610      	mov	r0, r2
    95de:	4770      	bx	lr
    95e0:	78c3      	ldrb	r3, [r0, #3]
    95e2:	b10b      	cbz	r3, 95e8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3e>
    95e4:	20ff      	movs	r0, #255	; 0xff
    95e6:	4770      	bx	lr
    95e8:	f7f7 bd60 	b.w	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    95ec:	8802      	ldrh	r2, [r0, #0]
    95ee:	fb01 0102 	mla	r1, r1, r2, r0
    95f2:	7880      	ldrb	r0, [r0, #2]
    95f4:	220a      	movs	r2, #10
    95f6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    95fa:	4408      	add	r0, r1
    95fc:	4770      	bx	lr

000095fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    95fe:	b570      	push	{r4, r5, r6, lr}
    9600:	460e      	mov	r6, r1
    9602:	461d      	mov	r5, r3
    9604:	4611      	mov	r1, r2
    9606:	f000 f813 	bl	9630 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    960a:	4604      	mov	r4, r0
    960c:	4629      	mov	r1, r5
    960e:	4630      	mov	r0, r6
    9610:	f000 f804 	bl	961c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    9614:	4420      	add	r0, r4
    9616:	1d00      	adds	r0, r0, #4
    9618:	b280      	uxth	r0, r0
    961a:	bd70      	pop	{r4, r5, r6, pc}
    961c:	b510      	push	{r4, lr}
    961e:	460a      	mov	r2, r1
    9620:	2109      	movs	r1, #9
    9622:	f7ff ff5a 	bl	94da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    9626:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    962a:	1cc0      	adds	r0, r0, #3
    962c:	4008      	ands	r0, r1
    962e:	bd10      	pop	{r4, pc}
    9630:	b510      	push	{r4, lr}
    9632:	460a      	mov	r2, r1
    9634:	210a      	movs	r1, #10
    9636:	f7ff ff50 	bl	94da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    963a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    963e:	1cc0      	adds	r0, r0, #3
    9640:	4008      	ands	r0, r1
    9642:	bd10      	pop	{r4, pc}
    9644:	2800      	cmp	r0, #0
    9646:	db09      	blt.n	965c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    9648:	f000 021f 	and.w	r2, r0, #31
    964c:	2101      	movs	r1, #1
    964e:	4091      	lsls	r1, r2
    9650:	0940      	lsrs	r0, r0, #5
    9652:	0080      	lsls	r0, r0, #2
    9654:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9658:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    965c:	4770      	bx	lr
    965e:	2800      	cmp	r0, #0
    9660:	db0d      	blt.n	967e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    9662:	f000 021f 	and.w	r2, r0, #31
    9666:	2101      	movs	r1, #1
    9668:	4091      	lsls	r1, r2
    966a:	0940      	lsrs	r0, r0, #5
    966c:	0080      	lsls	r0, r0, #2
    966e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9672:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9676:	f3bf 8f4f 	dsb	sy
    967a:	f3bf 8f6f 	isb	sy
    967e:	4770      	bx	lr
    9680:	b510      	push	{r4, lr}
    9682:	200e      	movs	r0, #14
    9684:	f7ff ffeb 	bl	965e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    9688:	200e      	movs	r0, #14
    968a:	f7ff ffdb 	bl	9644 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    968e:	200f      	movs	r0, #15
    9690:	f7ff ffe5 	bl	965e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    9694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9698:	200f      	movs	r0, #15
    969a:	f7ff bfd3 	b.w	9644 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    969e:	2800      	cmp	r0, #0
    96a0:	db09      	blt.n	96b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    96a2:	f000 021f 	and.w	r2, r0, #31
    96a6:	2101      	movs	r1, #1
    96a8:	4091      	lsls	r1, r2
    96aa:	0940      	lsrs	r0, r0, #5
    96ac:	0080      	lsls	r0, r0, #2
    96ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    96b2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    96b6:	4770      	bx	lr
    96b8:	5840      	ldr	r0, [r0, r1]
    96ba:	2800      	cmp	r0, #0
    96bc:	d000      	beq.n	96c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    96be:	2001      	movs	r0, #1
    96c0:	4770      	bx	lr

000096c2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    96c2:	b510      	push	{r4, lr}
    96c4:	4604      	mov	r4, r0
    96c6:	4620      	mov	r0, r4
    96c8:	f7f7 fe88 	bl	13dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    96cc:	2811      	cmp	r0, #17
    96ce:	d0fa      	beq.n	96c6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    96d0:	bd10      	pop	{r4, pc}

000096d2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    96d2:	b510      	push	{r4, lr}
    96d4:	f7ff fff5 	bl	96c2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    96d8:	2800      	cmp	r0, #0
    96da:	d003      	beq.n	96e4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    96dc:	21a9      	movs	r1, #169	; 0xa9
    96de:	201d      	movs	r0, #29
    96e0:	f7f7 fa4e 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96e4:	bd10      	pop	{r4, pc}

000096e6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    96e6:	f7f7 bf57 	b.w	1598 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

000096ea <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    96ea:	b510      	push	{r4, lr}
    96ec:	4050      	eors	r0, r2
    96ee:	780a      	ldrb	r2, [r1, #0]
    96f0:	781c      	ldrb	r4, [r3, #0]
    96f2:	4062      	eors	r2, r4
    96f4:	4410      	add	r0, r2
    96f6:	784a      	ldrb	r2, [r1, #1]
    96f8:	785c      	ldrb	r4, [r3, #1]
    96fa:	4062      	eors	r2, r4
    96fc:	4410      	add	r0, r2
    96fe:	788a      	ldrb	r2, [r1, #2]
    9700:	789c      	ldrb	r4, [r3, #2]
    9702:	4062      	eors	r2, r4
    9704:	4410      	add	r0, r2
    9706:	78ca      	ldrb	r2, [r1, #3]
    9708:	78dc      	ldrb	r4, [r3, #3]
    970a:	4062      	eors	r2, r4
    970c:	4410      	add	r0, r2
    970e:	790a      	ldrb	r2, [r1, #4]
    9710:	791c      	ldrb	r4, [r3, #4]
    9712:	7949      	ldrb	r1, [r1, #5]
    9714:	4062      	eors	r2, r4
    9716:	4410      	add	r0, r2
    9718:	795a      	ldrb	r2, [r3, #5]
    971a:	4051      	eors	r1, r2
    971c:	42c1      	cmn	r1, r0
    971e:	d101      	bne.n	9724 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    9720:	2001      	movs	r0, #1
    9722:	bd10      	pop	{r4, pc}
    9724:	2000      	movs	r0, #0
    9726:	bd10      	pop	{r4, pc}

00009728 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    9728:	b510      	push	{r4, lr}
    972a:	2900      	cmp	r1, #0
    972c:	4604      	mov	r4, r0
    972e:	f04f 0106 	mov.w	r1, #6
    9732:	d002      	beq.n	973a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    9734:	f7f7 fa88 	bl	c48 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9738:	e001      	b.n	973e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    973a:	f7f7 fa93 	bl	c64 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    973e:	7960      	ldrb	r0, [r4, #5]
    9740:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9744:	7160      	strb	r0, [r4, #5]
    9746:	bd10      	pop	{r4, pc}

00009748 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    9748:	4770      	bx	lr

0000974a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    974a:	b530      	push	{r4, r5, lr}
    974c:	460c      	mov	r4, r1
    974e:	4605      	mov	r5, r0
    9750:	b08d      	sub	sp, #52	; 0x34
    9752:	f04f 0103 	mov.w	r1, #3
    9756:	f104 0003 	add.w	r0, r4, #3
    975a:	b112      	cbz	r2, 9762 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    975c:	f7f7 fa74 	bl	c48 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9760:	e001      	b.n	9766 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    9762:	f7f7 fa7f 	bl	c64 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9766:	7960      	ldrb	r0, [r4, #5]
    9768:	220d      	movs	r2, #13
    976a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    976e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    9772:	7160      	strb	r0, [r4, #5]
    9774:	2100      	movs	r1, #0
    9776:	a804      	add	r0, sp, #16
    9778:	f001 f952 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    977c:	78e0      	ldrb	r0, [r4, #3]
    977e:	f88d 001f 	strb.w	r0, [sp, #31]
    9782:	7920      	ldrb	r0, [r4, #4]
    9784:	f88d 001e 	strb.w	r0, [sp, #30]
    9788:	7960      	ldrb	r0, [r4, #5]
    978a:	f88d 001d 	strb.w	r0, [sp, #29]
    978e:	2210      	movs	r2, #16
    9790:	4629      	mov	r1, r5
    9792:	4668      	mov	r0, sp
    9794:	f001 f8ca 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9798:	4668      	mov	r0, sp
    979a:	f7ff ff9a 	bl	96d2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    979e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    97a2:	7020      	strb	r0, [r4, #0]
    97a4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    97a8:	7060      	strb	r0, [r4, #1]
    97aa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    97ae:	70a0      	strb	r0, [r4, #2]
    97b0:	b00d      	add	sp, #52	; 0x34
    97b2:	bd30      	pop	{r4, r5, pc}

000097b4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    97b4:	b530      	push	{r4, r5, lr}
    97b6:	b08d      	sub	sp, #52	; 0x34
    97b8:	460c      	mov	r4, r1
    97ba:	4605      	mov	r5, r0
    97bc:	220d      	movs	r2, #13
    97be:	2100      	movs	r1, #0
    97c0:	a804      	add	r0, sp, #16
    97c2:	f001 f92d 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    97c6:	78e0      	ldrb	r0, [r4, #3]
    97c8:	f88d 001f 	strb.w	r0, [sp, #31]
    97cc:	7920      	ldrb	r0, [r4, #4]
    97ce:	f88d 001e 	strb.w	r0, [sp, #30]
    97d2:	7960      	ldrb	r0, [r4, #5]
    97d4:	f88d 001d 	strb.w	r0, [sp, #29]
    97d8:	2210      	movs	r2, #16
    97da:	4629      	mov	r1, r5
    97dc:	4668      	mov	r0, sp
    97de:	f001 f8a5 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    97e2:	4668      	mov	r0, sp
    97e4:	f7ff ff75 	bl	96d2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    97e8:	7820      	ldrb	r0, [r4, #0]
    97ea:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    97ee:	4288      	cmp	r0, r1
    97f0:	d10c      	bne.n	980c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    97f2:	7860      	ldrb	r0, [r4, #1]
    97f4:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    97f8:	4288      	cmp	r0, r1
    97fa:	d107      	bne.n	980c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    97fc:	78a0      	ldrb	r0, [r4, #2]
    97fe:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    9802:	4288      	cmp	r0, r1
    9804:	d102      	bne.n	980c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    9806:	2001      	movs	r0, #1
    9808:	b00d      	add	sp, #52	; 0x34
    980a:	bd30      	pop	{r4, r5, pc}
    980c:	2000      	movs	r0, #0
    980e:	e7fb      	b.n	9808 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

00009810 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    9810:	2101      	movs	r1, #1
    9812:	f7f7 bfe7 	b.w	17e4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

00009816 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    9816:	b510      	push	{r4, lr}
    9818:	f000 fe69 	bl	a4ee <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    981c:	b118      	cbz	r0, 9826 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    981e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9822:	f7fa ba71 	b.w	3d08 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    9826:	20ff      	movs	r0, #255	; 0xff
    9828:	bd10      	pop	{r4, pc}

0000982a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    982a:	b570      	push	{r4, r5, r6, lr}
    982c:	460e      	mov	r6, r1
    982e:	b08c      	sub	sp, #48	; 0x30
    9830:	4614      	mov	r4, r2
    9832:	4601      	mov	r1, r0
    9834:	461d      	mov	r5, r3
    9836:	2210      	movs	r2, #16
    9838:	4668      	mov	r0, sp
    983a:	f000 f85a 	bl	98f2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    983e:	2210      	movs	r2, #16
    9840:	4631      	mov	r1, r6
    9842:	a804      	add	r0, sp, #16
    9844:	f000 f855 	bl	98f2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9848:	4668      	mov	r0, sp
    984a:	f7ff ff42 	bl	96d2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    984e:	a908      	add	r1, sp, #32
    9850:	f04f 0210 	mov.w	r2, #16
    9854:	4628      	mov	r0, r5
    9856:	b11c      	cbz	r4, 9860 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    9858:	f000 f84b 	bl	98f2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    985c:	b00c      	add	sp, #48	; 0x30
    985e:	bd70      	pop	{r4, r5, r6, pc}
    9860:	f001 f864 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9864:	e7fa      	b.n	985c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00009866 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    9866:	b510      	push	{r4, lr}
    9868:	460c      	mov	r4, r1
    986a:	2100      	movs	r1, #0
    986c:	f7f7 fc32 	bl	10d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9870:	6060      	str	r0, [r4, #4]
    9872:	b110      	cbz	r0, 987a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    9874:	2000      	movs	r0, #0
    9876:	7020      	strb	r0, [r4, #0]
    9878:	bd10      	pop	{r4, pc}
    987a:	2002      	movs	r0, #2
    987c:	bd10      	pop	{r4, pc}

0000987e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    987e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9882:	4348      	muls	r0, r1
    9884:	4770      	bx	lr

00009886 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    9886:	f240 41e2 	movw	r1, #1250	; 0x4e2
    988a:	fbb0 f0f1 	udiv	r0, r0, r1
    988e:	b280      	uxth	r0, r0
    9890:	4770      	bx	lr

00009892 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    9892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9896:	4607      	mov	r7, r0
    9898:	460e      	mov	r6, r1
    989a:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    989e:	f7fc fee9 	bl	6674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    98a2:	b198      	cbz	r0, 98cc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    98a4:	b31e      	cbz	r6, 98ee <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    98a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    98aa:	1b40      	subs	r0, r0, r5
    98ac:	2300      	movs	r3, #0
    98ae:	eb61 0104 	sbc.w	r1, r1, r4
    98b2:	461a      	mov	r2, r3
    98b4:	1a1b      	subs	r3, r3, r0
    98b6:	418a      	sbcs	r2, r1
    98b8:	da19      	bge.n	98ee <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    98ba:	1c42      	adds	r2, r0, #1
    98bc:	f171 0100 	sbcs.w	r1, r1, #0
    98c0:	db07      	blt.n	98d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    98c2:	f240 211a 	movw	r1, #538	; 0x21a
    98c6:	2029      	movs	r0, #41	; 0x29
    98c8:	f7f7 f95a 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98cc:	f44f 7104 	mov.w	r1, #528	; 0x210
    98d0:	e7f9      	b.n	98c6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    98d2:	4430      	add	r0, r6
    98d4:	1e40      	subs	r0, r0, #1
    98d6:	fbb0 f1f6 	udiv	r1, r0, r6
    98da:	fb01 f006 	mul.w	r0, r1, r6
    98de:	1828      	adds	r0, r5, r0
    98e0:	f144 0400 	adc.w	r4, r4, #0
    98e4:	e9c7 0404 	strd	r0, r4, [r7, #16]
    98e8:	4608      	mov	r0, r1
    98ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ee:	2000      	movs	r0, #0
    98f0:	e7fb      	b.n	98ea <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

000098f2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    98f2:	b530      	push	{r4, r5, lr}
    98f4:	4613      	mov	r3, r2
    98f6:	e006      	b.n	9906 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    98f8:	18cc      	adds	r4, r1, r3
    98fa:	1ad5      	subs	r5, r2, r3
    98fc:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    9900:	1e5b      	subs	r3, r3, #1
    9902:	5544      	strb	r4, [r0, r5]
    9904:	b2db      	uxtb	r3, r3
    9906:	2b00      	cmp	r3, #0
    9908:	d1f6      	bne.n	98f8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    990a:	bd30      	pop	{r4, r5, pc}

0000990c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    990c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9910:	fbb0 f0f1 	udiv	r0, r0, r1
    9914:	b280      	uxth	r0, r0
    9916:	4770      	bx	lr

00009918 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    9918:	f240 2171 	movw	r1, #625	; 0x271
    991c:	fb10 f001 	smulbb	r0, r0, r1
    9920:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9924:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    9928:	4770      	bx	lr

0000992a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    992a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    992e:	fbb0 f0f1 	udiv	r0, r0, r1
    9932:	b2c0      	uxtb	r0, r0
    9934:	4770      	bx	lr

00009936 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    9936:	2100      	movs	r1, #0
    9938:	4608      	mov	r0, r1
    993a:	f7f7 bfd5 	b.w	18e8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    993e:	4401      	add	r1, r0
    9940:	2914      	cmp	r1, #20
    9942:	dd01      	ble.n	9948 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    9944:	2014      	movs	r0, #20
    9946:	4770      	bx	lr
    9948:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    994c:	4281      	cmp	r1, r0
    994e:	dbfa      	blt.n	9946 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    9950:	b248      	sxtb	r0, r1
    9952:	4770      	bx	lr

00009954 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    9954:	7841      	ldrb	r1, [r0, #1]
    9956:	7800      	ldrb	r0, [r0, #0]
    9958:	f010 000f 	ands.w	r0, r0, #15
    995c:	d005      	beq.n	996a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    995e:	2801      	cmp	r0, #1
    9960:	d007      	beq.n	9972 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    9962:	2802      	cmp	r0, #2
    9964:	d001      	beq.n	996a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    9966:	2806      	cmp	r0, #6
    9968:	d105      	bne.n	9976 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    996a:	1f89      	subs	r1, r1, #6
    996c:	291f      	cmp	r1, #31
    996e:	d904      	bls.n	997a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    9970:	e001      	b.n	9976 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    9972:	290c      	cmp	r1, #12
    9974:	d001      	beq.n	997a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    9976:	2000      	movs	r0, #0
    9978:	4770      	bx	lr
    997a:	2001      	movs	r0, #1
    997c:	4770      	bx	lr

0000997e <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    997e:	7800      	ldrb	r0, [r0, #0]
    9980:	09c0      	lsrs	r0, r0, #7
    9982:	4770      	bx	lr

00009984 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    9984:	7800      	ldrb	r0, [r0, #0]
    9986:	f3c0 1080 	ubfx	r0, r0, #6, #1
    998a:	4770      	bx	lr

0000998c <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    998c:	7801      	ldrb	r1, [r0, #0]
    998e:	f001 010f 	and.w	r1, r1, #15
    9992:	2904      	cmp	r1, #4
    9994:	d105      	bne.n	99a2 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    9996:	7840      	ldrb	r0, [r0, #1]
    9998:	1f80      	subs	r0, r0, #6
    999a:	281f      	cmp	r0, #31
    999c:	d801      	bhi.n	99a2 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    999e:	2001      	movs	r0, #1
    99a0:	4770      	bx	lr
    99a2:	2000      	movs	r0, #0
    99a4:	4770      	bx	lr

000099a6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    99a6:	b510      	push	{r4, lr}
    99a8:	7802      	ldrb	r2, [r0, #0]
    99aa:	f001 030f 	and.w	r3, r1, #15
    99ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    99b2:	431a      	orrs	r2, r3
    99b4:	7002      	strb	r2, [r0, #0]
    99b6:	2907      	cmp	r1, #7
    99b8:	d20c      	bcs.n	99d4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    99ba:	e8df f001 	tbb	[pc, r1]
    99be:	0604      	.short	0x0604
    99c0:	08040604 	.word	0x08040604
    99c4:	0004      	.short	0x0004
    99c6:	2106      	movs	r1, #6
    99c8:	e002      	b.n	99d0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    99ca:	210c      	movs	r1, #12
    99cc:	e000      	b.n	99d0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    99ce:	2122      	movs	r1, #34	; 0x22
    99d0:	7041      	strb	r1, [r0, #1]
    99d2:	bd10      	pop	{r4, pc}
    99d4:	21a8      	movs	r1, #168	; 0xa8
    99d6:	202a      	movs	r0, #42	; 0x2a
    99d8:	f7f7 f8d2 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000099dc <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    99dc:	680a      	ldr	r2, [r1, #0]
    99de:	f840 2f09 	str.w	r2, [r0, #9]!
    99e2:	8889      	ldrh	r1, [r1, #4]
    99e4:	8081      	strh	r1, [r0, #4]
    99e6:	4770      	bx	lr

000099e8 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    99e8:	7802      	ldrb	r2, [r0, #0]
    99ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    99ee:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    99f2:	7002      	strb	r2, [r0, #0]
    99f4:	4770      	bx	lr

000099f6 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    99f6:	680a      	ldr	r2, [r1, #0]
    99f8:	f840 2f03 	str.w	r2, [r0, #3]!
    99fc:	8889      	ldrh	r1, [r1, #4]
    99fe:	8081      	strh	r1, [r0, #4]
    9a00:	4770      	bx	lr

00009a02 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    9a02:	7802      	ldrb	r2, [r0, #0]
    9a04:	2340      	movs	r3, #64	; 0x40
    9a06:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    9a0a:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    9a0e:	430a      	orrs	r2, r1
    9a10:	7002      	strb	r2, [r0, #0]
    9a12:	4770      	bx	lr

00009a14 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    9a14:	b508      	push	{r3, lr}
    9a16:	7a03      	ldrb	r3, [r0, #8]
    9a18:	f88d 3000 	strb.w	r3, [sp]
    9a1c:	9b00      	ldr	r3, [sp, #0]
    9a1e:	9300      	str	r3, [sp, #0]
    9a20:	f89d 3000 	ldrb.w	r3, [sp]
    9a24:	b123      	cbz	r3, 9a30 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    9a26:	f240 21c2 	movw	r1, #706	; 0x2c2
    9a2a:	2010      	movs	r0, #16
    9a2c:	f7f7 f8a8 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9a34:	f7f8 b874 	b.w	1b20 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

00009a38 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    9a38:	f7f8 b8a0 	b.w	1b7c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    9a3c:	b510      	push	{r4, lr}
    9a3e:	4604      	mov	r4, r0
    9a40:	2108      	movs	r1, #8
    9a42:	4620      	mov	r0, r4
    9a44:	f7f7 f90e 	bl	c64 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9a48:	6820      	ldr	r0, [r4, #0]
    9a4a:	2800      	cmp	r0, #0
    9a4c:	d102      	bne.n	9a54 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    9a4e:	6860      	ldr	r0, [r4, #4]
    9a50:	2800      	cmp	r0, #0
    9a52:	d0f5      	beq.n	9a40 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    9a54:	bd10      	pop	{r4, pc}

00009a56 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    9a56:	b508      	push	{r3, lr}
    9a58:	f000 f804 	bl	9a64 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    9a5c:	466a      	mov	r2, sp
    9a5e:	f7f8 f919 	bl	1c94 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    9a62:	bd08      	pop	{r3, pc}
    9a64:	b530      	push	{r4, r5, lr}
    9a66:	784c      	ldrb	r4, [r1, #1]
    9a68:	4603      	mov	r3, r0
    9a6a:	7808      	ldrb	r0, [r1, #0]
    9a6c:	788d      	ldrb	r5, [r1, #2]
    9a6e:	0e22      	lsrs	r2, r4, #24
    9a70:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    9a74:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    9a78:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    9a7c:	78cd      	ldrb	r5, [r1, #3]
    9a7e:	790c      	ldrb	r4, [r1, #4]
    9a80:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    9a84:	4322      	orrs	r2, r4
    9a86:	7949      	ldrb	r1, [r1, #5]
    9a88:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    9a8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9a90:	4611      	mov	r1, r2
    9a92:	2b01      	cmp	r3, #1
    9a94:	d101      	bne.n	9a9a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    9a96:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    9a9a:	bd30      	pop	{r4, r5, pc}
    9a9c:	2801      	cmp	r0, #1
    9a9e:	d102      	bne.n	9aa6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    9aa0:	7948      	ldrb	r0, [r1, #5]
    9aa2:	0980      	lsrs	r0, r0, #6
    9aa4:	d001      	beq.n	9aaa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    9aa6:	2000      	movs	r0, #0
    9aa8:	4770      	bx	lr
    9aaa:	2001      	movs	r0, #1
    9aac:	4770      	bx	lr
    9aae:	2801      	cmp	r0, #1
    9ab0:	d106      	bne.n	9ac0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    9ab2:	7948      	ldrb	r0, [r1, #5]
    9ab4:	2101      	movs	r1, #1
    9ab6:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    9aba:	d101      	bne.n	9ac0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    9abc:	2001      	movs	r0, #1
    9abe:	4770      	bx	lr
    9ac0:	2000      	movs	r0, #0
    9ac2:	4770      	bx	lr
    9ac4:	b118      	cbz	r0, 9ace <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    9ac6:	2802      	cmp	r0, #2
    9ac8:	d001      	beq.n	9ace <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    9aca:	2001      	movs	r0, #1
    9acc:	4770      	bx	lr
    9ace:	2000      	movs	r0, #0
    9ad0:	4770      	bx	lr
    9ad2:	2802      	cmp	r0, #2
    9ad4:	d003      	beq.n	9ade <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    9ad6:	2803      	cmp	r0, #3
    9ad8:	d001      	beq.n	9ade <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    9ada:	2000      	movs	r0, #0
    9adc:	4770      	bx	lr
    9ade:	2001      	movs	r0, #1
    9ae0:	4770      	bx	lr

00009ae2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    9ae2:	f7f8 bff3 	b.w	2acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>

00009ae6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    9ae6:	b510      	push	{r4, lr}
    9ae8:	2000      	movs	r0, #0
    9aea:	f7f8 fe45 	bl	2778 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x79c>
    9aee:	f7f8 fa93 	bl	2018 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9af2:	f7f8 fff9 	bl	2ae8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0c>
    9af6:	2000      	movs	r0, #0
    9af8:	bd10      	pop	{r4, pc}
    9afa:	b510      	push	{r4, lr}
    9afc:	f000 f83c 	bl	9b78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    9b00:	2005      	movs	r0, #5
    9b02:	bd10      	pop	{r4, pc}
    9b04:	b510      	push	{r4, lr}
    9b06:	f7f8 fe51 	bl	27ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d0>
    9b0a:	f7fa f9c3 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9b0e:	2005      	movs	r0, #5
    9b10:	bd10      	pop	{r4, pc}
    9b12:	b530      	push	{r4, r5, lr}
    9b14:	b08b      	sub	sp, #44	; 0x2c
    9b16:	4605      	mov	r5, r0
    9b18:	f7f8 fe48 	bl	27ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d0>
    9b1c:	7828      	ldrb	r0, [r5, #0]
    9b1e:	4669      	mov	r1, sp
    9b20:	f000 040f 	and.w	r4, r0, #15
    9b24:	4622      	mov	r2, r4
    9b26:	4628      	mov	r0, r5
    9b28:	f7f9 f946 	bl	2db8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    9b2c:	2200      	movs	r2, #0
    9b2e:	4621      	mov	r1, r4
    9b30:	4668      	mov	r0, sp
    9b32:	f7f8 faab 	bl	208c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    9b36:	4621      	mov	r1, r4
    9b38:	4668      	mov	r0, sp
    9b3a:	f7f8 fdb7 	bl	26ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    9b3e:	4604      	mov	r4, r0
    9b40:	f7f8 fa6a 	bl	2018 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9b44:	b00b      	add	sp, #44	; 0x2c
    9b46:	4620      	mov	r0, r4
    9b48:	bd30      	pop	{r4, r5, pc}
    9b4a:	f240 31af 	movw	r1, #943	; 0x3af
    9b4e:	2032      	movs	r0, #50	; 0x32
    9b50:	f7f7 f816 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b54:	b510      	push	{r4, lr}
    9b56:	f000 f80f 	bl	9b78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    9b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b5e:	f7f8 bfcb 	b.w	2af8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb1c>
    9b62:	b510      	push	{r4, lr}
    9b64:	f7f8 fe22 	bl	27ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d0>
    9b68:	f7fa f994 	bl	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b70:	f7f8 bfc2 	b.w	2af8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb1c>
    9b74:	f7f8 bfaa 	b.w	2acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>
    9b78:	b510      	push	{r4, lr}
    9b7a:	f7f8 fe17 	bl	27ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d0>
    9b7e:	f7f8 fa4b 	bl	2018 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b86:	f7fa b985 	b.w	3e94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9b8a:	f7ff bcb4 	b.w	94f6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    9b8e:	b570      	push	{r4, r5, r6, lr}
    9b90:	4614      	mov	r4, r2
    9b92:	461d      	mov	r5, r3
    9b94:	4606      	mov	r6, r0
    9b96:	f000 fd37 	bl	a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9b9a:	1900      	adds	r0, r0, r4
    9b9c:	4169      	adcs	r1, r5
    9b9e:	e9c6 0100 	strd	r0, r1, [r6]
    9ba2:	bd70      	pop	{r4, r5, r6, pc}

00009ba4 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    9ba4:	b510      	push	{r4, lr}
    9ba6:	f7f7 fba5 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9baa:	f000 f944 	bl	9e36 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    9bae:	4604      	mov	r4, r0
    9bb0:	221c      	movs	r2, #28
    9bb2:	2100      	movs	r1, #0
    9bb4:	3009      	adds	r0, #9
    9bb6:	f000 ff33 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9bba:	207f      	movs	r0, #127	; 0x7f
    9bbc:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    9bc0:	21ff      	movs	r1, #255	; 0xff
    9bc2:	75e1      	strb	r1, [r4, #23]
    9bc4:	72a1      	strb	r1, [r4, #10]
    9bc6:	7721      	strb	r1, [r4, #28]
    9bc8:	7ce0      	ldrb	r0, [r4, #19]
    9bca:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    9bce:	3020      	adds	r0, #32
    9bd0:	74e0      	strb	r0, [r4, #19]
    9bd2:	bd10      	pop	{r4, pc}

00009bd4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    9bd4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9bd8:	461d      	mov	r5, r3
    9bda:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    9bde:	4616      	mov	r6, r2
    9be0:	4688      	mov	r8, r1
    9be2:	4681      	mov	r9, r0
    9be4:	f7f7 fb86 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9be8:	4604      	mov	r4, r0
    9bea:	f7ff fbdf 	bl	93ac <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9bee:	2801      	cmp	r0, #1
    9bf0:	d066      	beq.n	9cc0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    9bf2:	4620      	mov	r0, r4
    9bf4:	f000 f91f 	bl	9e36 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    9bf8:	4604      	mov	r4, r0
    9bfa:	221c      	movs	r2, #28
    9bfc:	2100      	movs	r1, #0
    9bfe:	3009      	adds	r0, #9
    9c00:	f000 ff0e 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9c04:	2701      	movs	r7, #1
    9c06:	7267      	strb	r7, [r4, #9]
    9c08:	ea5f 0008 	movs.w	r0, r8
    9c0c:	d009      	beq.n	9c22 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    9c0e:	2801      	cmp	r0, #1
    9c10:	d00b      	beq.n	9c2a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    9c12:	2802      	cmp	r0, #2
    9c14:	d02d      	beq.n	9c72 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    9c16:	f1b8 0f06 	cmp.w	r8, #6
    9c1a:	d02c      	beq.n	9c76 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    9c1c:	f240 310b 	movw	r1, #779	; 0x30b
    9c20:	e04b      	b.n	9cba <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    9c22:	7ce0      	ldrb	r0, [r4, #19]
    9c24:	f040 0001 	orr.w	r0, r0, #1
    9c28:	e026      	b.n	9c78 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    9c2a:	7ce0      	ldrb	r0, [r4, #19]
    9c2c:	f040 0005 	orr.w	r0, r0, #5
    9c30:	f040 0010 	orr.w	r0, r0, #16
    9c34:	74e0      	strb	r0, [r4, #19]
    9c36:	f104 030a 	add.w	r3, r4, #10
    9c3a:	1c5a      	adds	r2, r3, #1
    9c3c:	4648      	mov	r0, r9
    9c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9c40:	f000 f8de 	bl	9e00 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    9c44:	f884 a012 	strb.w	sl, [r4, #18]
    9c48:	7567      	strb	r7, [r4, #21]
    9c4a:	2000      	movs	r0, #0
    9c4c:	75a0      	strb	r0, [r4, #22]
    9c4e:	20ff      	movs	r0, #255	; 0xff
    9c50:	75e0      	strb	r0, [r4, #23]
    9c52:	7ce1      	ldrb	r1, [r4, #19]
    9c54:	0749      	lsls	r1, r1, #29
    9c56:	d518      	bpl.n	9c8a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    9c58:	f104 001d 	add.w	r0, r4, #29
    9c5c:	1e41      	subs	r1, r0, #1
    9c5e:	2d02      	cmp	r5, #2
    9c60:	d00d      	beq.n	9c7e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    9c62:	2d03      	cmp	r5, #3
    9c64:	d00b      	beq.n	9c7e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    9c66:	f8d9 2008 	ldr.w	r2, [r9, #8]
    9c6a:	6813      	ldr	r3, [r2, #0]
    9c6c:	6003      	str	r3, [r0, #0]
    9c6e:	8892      	ldrh	r2, [r2, #4]
    9c70:	e008      	b.n	9c84 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    9c72:	7ce0      	ldrb	r0, [r4, #19]
    9c74:	e7dc      	b.n	9c30 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    9c76:	7ce0      	ldrb	r0, [r4, #19]
    9c78:	f040 0002 	orr.w	r0, r0, #2
    9c7c:	e7d8      	b.n	9c30 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    9c7e:	6832      	ldr	r2, [r6, #0]
    9c80:	6002      	str	r2, [r0, #0]
    9c82:	88b2      	ldrh	r2, [r6, #4]
    9c84:	8082      	strh	r2, [r0, #4]
    9c86:	700d      	strb	r5, [r1, #0]
    9c88:	e000      	b.n	9c8c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    9c8a:	7720      	strb	r0, [r4, #28]
    9c8c:	207f      	movs	r0, #127	; 0x7f
    9c8e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    9c92:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    9c96:	f7f7 fb27 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9c9a:	4605      	mov	r5, r0
    9c9c:	f7f7 fb2a 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9ca0:	2201      	movs	r2, #1
    9ca2:	4629      	mov	r1, r5
    9ca4:	f000 f8d0 	bl	9e48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    9ca8:	b128      	cbz	r0, 9cb6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    9caa:	4620      	mov	r0, r4
    9cac:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9cb0:	2100      	movs	r1, #0
    9cb2:	f7f9 b879 	b.w	2da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdcc>
    9cb6:	f240 312b 	movw	r1, #811	; 0x32b
    9cba:	2033      	movs	r0, #51	; 0x33
    9cbc:	f7f6 ff60 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cc0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

00009cc4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    9cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9cc8:	461e      	mov	r6, r3
    9cca:	4617      	mov	r7, r2
    9ccc:	4689      	mov	r9, r1
    9cce:	4682      	mov	sl, r0
    9cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    9cd4:	f7f7 fb0e 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9cd8:	4604      	mov	r4, r0
    9cda:	f7ff fb67 	bl	93ac <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9cde:	2801      	cmp	r0, #1
    9ce0:	d039      	beq.n	9d56 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    9ce2:	4620      	mov	r0, r4
    9ce4:	f000 f8a7 	bl	9e36 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    9ce8:	4604      	mov	r4, r0
    9cea:	221c      	movs	r2, #28
    9cec:	2100      	movs	r1, #0
    9cee:	3009      	adds	r0, #9
    9cf0:	f000 fe96 	bl	aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9cf4:	2501      	movs	r5, #1
    9cf6:	f104 030a 	add.w	r3, r4, #10
    9cfa:	7265      	strb	r5, [r4, #9]
    9cfc:	1c5a      	adds	r2, r3, #1
    9cfe:	4649      	mov	r1, r9
    9d00:	4650      	mov	r0, sl
    9d02:	f000 f87d 	bl	9e00 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    9d06:	f884 8012 	strb.w	r8, [r4, #18]
    9d0a:	7ce0      	ldrb	r0, [r4, #19]
    9d0c:	21ff      	movs	r1, #255	; 0xff
    9d0e:	f367 0000 	bfi	r0, r7, #0, #1
    9d12:	f040 001a 	orr.w	r0, r0, #26
    9d16:	74e0      	strb	r0, [r4, #19]
    9d18:	7565      	strb	r5, [r4, #21]
    9d1a:	2000      	movs	r0, #0
    9d1c:	75a0      	strb	r0, [r4, #22]
    9d1e:	75e1      	strb	r1, [r4, #23]
    9d20:	7721      	strb	r1, [r4, #28]
    9d22:	207f      	movs	r0, #127	; 0x7f
    9d24:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    9d28:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    9d2c:	f7f7 fadc 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9d30:	4605      	mov	r5, r0
    9d32:	f7f7 fadf 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9d36:	2201      	movs	r2, #1
    9d38:	4629      	mov	r1, r5
    9d3a:	f000 f885 	bl	9e48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    9d3e:	b128      	cbz	r0, 9d4c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    9d40:	4620      	mov	r0, r4
    9d42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d46:	2100      	movs	r1, #0
    9d48:	f7f9 b82e 	b.w	2da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdcc>
    9d4c:	f44f 7156 	mov.w	r1, #856	; 0x358
    9d50:	2033      	movs	r0, #51	; 0x33
    9d52:	f7f6 ff15 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009d5a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    9d5a:	f7ff bf23 	b.w	9ba4 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    9d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d60:	b08b      	sub	sp, #44	; 0x2c
    9d62:	460f      	mov	r7, r1
    9d64:	f7f7 fac6 	bl	12f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9d68:	4604      	mov	r4, r0
    9d6a:	f7ff fb4c 	bl	9406 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    9d6e:	0005      	movs	r5, r0
    9d70:	d00c      	beq.n	9d8c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    9d72:	4620      	mov	r0, r4
    9d74:	4629      	mov	r1, r5
    9d76:	aa0a      	add	r2, sp, #40	; 0x28
    9d78:	f7ff fb63 	bl	9442 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    9d7c:	4606      	mov	r6, r0
    9d7e:	f7f7 fab3 	bl	12e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9d82:	42b0      	cmp	r0, r6
    9d84:	d005      	beq.n	9d92 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    9d86:	f240 11ab 	movw	r1, #427	; 0x1ab
    9d8a:	e036      	b.n	9dfa <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    9d8c:	f240 11a1 	movw	r1, #417	; 0x1a1
    9d90:	e033      	b.n	9dfa <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    9d92:	4669      	mov	r1, sp
    9d94:	980a      	ldr	r0, [sp, #40]	; 0x28
    9d96:	f000 f859 	bl	9e4c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    9d9a:	1d3e      	adds	r6, r7, #4
    9d9c:	4628      	mov	r0, r5
    9d9e:	f7ff fb03 	bl	93a8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    9da2:	4605      	mov	r5, r0
    9da4:	f100 0109 	add.w	r1, r0, #9
    9da8:	221c      	movs	r2, #28
    9daa:	4630      	mov	r0, r6
    9dac:	f000 fdbe 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9db0:	7ce8      	ldrb	r0, [r5, #19]
    9db2:	f04f 0500 	mov.w	r5, #0
    9db6:	06c1      	lsls	r1, r0, #27
    9db8:	d50d      	bpl.n	9dd6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    9dba:	0740      	lsls	r0, r0, #29
    9dbc:	d40a      	bmi.n	9dd4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    9dbe:	f89d 2010 	ldrb.w	r2, [sp, #16]
    9dc2:	f106 001c 	add.w	r0, r6, #28
    9dc6:	9903      	ldr	r1, [sp, #12]
    9dc8:	f000 fdb0 	bl	a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9dcc:	f89d 0010 	ldrb.w	r0, [sp, #16]
    9dd0:	7230      	strb	r0, [r6, #8]
    9dd2:	e000      	b.n	9dd6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    9dd4:	7235      	strb	r5, [r6, #8]
    9dd6:	707d      	strb	r5, [r7, #1]
    9dd8:	2005      	movs	r0, #5
    9dda:	7038      	strb	r0, [r7, #0]
    9ddc:	4638      	mov	r0, r7
    9dde:	f7f8 ff73 	bl	2cc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcec>
    9de2:	4620      	mov	r0, r4
    9de4:	f7ff fafb 	bl	93de <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    9de8:	b128      	cbz	r0, 9df6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    9dea:	4620      	mov	r0, r4
    9dec:	2100      	movs	r1, #0
    9dee:	f7ff fb58 	bl	94a2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    9df2:	b00b      	add	sp, #44	; 0x2c
    9df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9df6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    9dfa:	2033      	movs	r0, #51	; 0x33
    9dfc:	f7f6 fec0 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e00:	b510      	push	{r4, lr}
    9e02:	461c      	mov	r4, r3
    9e04:	460b      	mov	r3, r1
    9e06:	29ff      	cmp	r1, #255	; 0xff
    9e08:	d00d      	beq.n	9e26 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    9e0a:	4621      	mov	r1, r4
    9e0c:	4618      	mov	r0, r3
    9e0e:	f7f7 fc99 	bl	1744 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    9e12:	b120      	cbz	r0, 9e1e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    9e14:	7820      	ldrb	r0, [r4, #0]
    9e16:	f040 0002 	orr.w	r0, r0, #2
    9e1a:	7020      	strb	r0, [r4, #0]
    9e1c:	bd10      	pop	{r4, pc}
    9e1e:	21dc      	movs	r1, #220	; 0xdc
    9e20:	2033      	movs	r0, #51	; 0x33
    9e22:	f7f6 fead 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e26:	7c41      	ldrb	r1, [r0, #17]
    9e28:	7021      	strb	r1, [r4, #0]
    9e2a:	6840      	ldr	r0, [r0, #4]
    9e2c:	6801      	ldr	r1, [r0, #0]
    9e2e:	6011      	str	r1, [r2, #0]
    9e30:	8880      	ldrh	r0, [r0, #4]
    9e32:	8090      	strh	r0, [r2, #4]
    9e34:	bd10      	pop	{r4, pc}
    9e36:	b51c      	push	{r2, r3, r4, lr}
    9e38:	4669      	mov	r1, sp
    9e3a:	aa01      	add	r2, sp, #4
    9e3c:	f7ff faf3 	bl	9426 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    9e40:	9800      	ldr	r0, [sp, #0]
    9e42:	f7ff fab1 	bl	93a8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    9e46:	bd1c      	pop	{r2, r3, r4, pc}
    9e48:	f7ff ba65 	b.w	9316 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

00009e4c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    9e4c:	7802      	ldrb	r2, [r0, #0]
    9e4e:	f002 020f 	and.w	r2, r2, #15
    9e52:	f7f8 bfb1 	b.w	2db8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

00009e56 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    9e56:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9e58:	256e      	movs	r5, #110	; 0x6e
    9e5a:	4668      	mov	r0, sp
    9e5c:	f7fe fcfc 	bl	8858 <mpsl_fem_pa_is_configured>
    9e60:	f89d 0000 	ldrb.w	r0, [sp]
    9e64:	b108      	cbz	r0, 9e6a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    9e66:	2401      	movs	r4, #1
    9e68:	e000      	b.n	9e6c <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    9e6a:	2400      	movs	r4, #0
    9e6c:	a801      	add	r0, sp, #4
    9e6e:	f7fe fcdb 	bl	8828 <mpsl_fem_lna_is_configured>
    9e72:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9e76:	b100      	cbz	r0, 9e7a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    9e78:	2001      	movs	r0, #1
    9e7a:	4304      	orrs	r4, r0
    9e7c:	d000      	beq.n	9e80 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    9e7e:	2578      	movs	r5, #120	; 0x78
    9e80:	4628      	mov	r0, r5
    9e82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00009e84 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    9e84:	b510      	push	{r4, lr}
    9e86:	f7ff ffe6 	bl	9e56 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    9e8a:	306b      	adds	r0, #107	; 0x6b
    9e8c:	b280      	uxth	r0, r0
    9e8e:	bd10      	pop	{r4, pc}
    9e90:	6980      	ldr	r0, [r0, #24]
    9e92:	2800      	cmp	r0, #0
    9e94:	d000      	beq.n	9e98 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    9e96:	2001      	movs	r0, #1
    9e98:	4770      	bx	lr
    9e9a:	b510      	push	{r4, lr}
    9e9c:	2802      	cmp	r0, #2
    9e9e:	d007      	beq.n	9eb0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2c>
    9ea0:	2108      	movs	r1, #8
    9ea2:	2801      	cmp	r0, #1
    9ea4:	d006      	beq.n	9eb4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x30>
    9ea6:	f44f 7182 	mov.w	r1, #260	; 0x104
    9eaa:	2005      	movs	r0, #5
    9eac:	f7f6 fe68 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eb0:	2104      	movs	r1, #4
    9eb2:	e7f6      	b.n	9ea2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    9eb4:	202a      	movs	r0, #42	; 0x2a
    9eb6:	2228      	movs	r2, #40	; 0x28
    9eb8:	fb11 2000 	smlabb	r0, r1, r0, r2
    9ebc:	b280      	uxth	r0, r0
    9ebe:	bd10      	pop	{r4, pc}
    9ec0:	b510      	push	{r4, lr}
    9ec2:	f7ff ffc8 	bl	9e56 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    9ec6:	f500 7083 	add.w	r0, r0, #262	; 0x106
    9eca:	b280      	uxth	r0, r0
    9ecc:	bd10      	pop	{r4, pc}
    9ece:	f7fc b92d 	b.w	612c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9ed2:	1a10      	subs	r0, r2, r0
    9ed4:	4770      	bx	lr

00009ed6 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    9ed6:	b510      	push	{r4, lr}
    9ed8:	f7f9 fc6e 	bl	37b8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    9edc:	2000      	movs	r0, #0
    9ede:	bd10      	pop	{r4, pc}

00009ee0 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    9ee0:	b510      	push	{r4, lr}
    9ee2:	460c      	mov	r4, r1
    9ee4:	f7f7 f98a 	bl	11fc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    9ee8:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    9eec:	2820      	cmp	r0, #32
    9eee:	d006      	beq.n	9efe <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x1e>
    9ef0:	f7fc fee4 	bl	6cbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9ef4:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    9ef8:	f7fc febe 	bl	6c78 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9efc:	b158      	cbz	r0, 9f16 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x36>
    9efe:	f504 700a 	add.w	r0, r4, #552	; 0x228
    9f02:	4604      	mov	r4, r0
    9f04:	f7f9 fcd8 	bl	38b8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>
    9f08:	2800      	cmp	r0, #0
    9f0a:	d009      	beq.n	9f20 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x40>
    9f0c:	4620      	mov	r0, r4
    9f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f12:	f7f9 bcdf 	b.w	38d4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    9f16:	f640 318a 	movw	r1, #2954	; 0xb8a
    9f1a:	2036      	movs	r0, #54	; 0x36
    9f1c:	f7f6 fe30 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f20:	bd10      	pop	{r4, pc}

00009f22 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    9f22:	b510      	push	{r4, lr}
    9f24:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    9f28:	1ac3      	subs	r3, r0, r3
    9f2a:	eb61 0104 	sbc.w	r1, r1, r4
    9f2e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    9f32:	17e0      	asrs	r0, r4, #31
    9f34:	1ae4      	subs	r4, r4, r3
    9f36:	4188      	sbcs	r0, r1
    9f38:	da05      	bge.n	9f46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    9f3a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9f3e:	1a18      	subs	r0, r3, r0
    9f40:	f171 0000 	sbcs.w	r0, r1, #0
    9f44:	db03      	blt.n	9f4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    9f46:	21b6      	movs	r1, #182	; 0xb6
    9f48:	2037      	movs	r0, #55	; 0x37
    9f4a:	f7f6 fe19 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f4e:	2900      	cmp	r1, #0
    9f50:	da00      	bge.n	9f54 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    9f52:	425b      	negs	r3, r3
    9f54:	fbb3 f0f2 	udiv	r0, r3, r2
    9f58:	fb02 3010 	mls	r0, r2, r0, r3
    9f5c:	2900      	cmp	r1, #0
    9f5e:	da02      	bge.n	9f66 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9f60:	2800      	cmp	r0, #0
    9f62:	d000      	beq.n	9f66 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9f64:	1a10      	subs	r0, r2, r0
    9f66:	bd10      	pop	{r4, pc}
    9f68:	b118      	cbz	r0, 9f72 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    9f6a:	2802      	cmp	r0, #2
    9f6c:	d001      	beq.n	9f72 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    9f6e:	2001      	movs	r0, #1
    9f70:	4770      	bx	lr
    9f72:	2000      	movs	r0, #0
    9f74:	4770      	bx	lr

00009f76 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    9f76:	b510      	push	{r4, lr}
    9f78:	4604      	mov	r4, r0
    9f7a:	f000 fa56 	bl	a42a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    9f7e:	b108      	cbz	r0, 9f84 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    9f80:	200c      	movs	r0, #12
    9f82:	bd10      	pop	{r4, pc}
    9f84:	7820      	ldrb	r0, [r4, #0]
    9f86:	b118      	cbz	r0, 9f90 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    9f88:	2801      	cmp	r0, #1
    9f8a:	d001      	beq.n	9f90 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    9f8c:	2012      	movs	r0, #18
    9f8e:	bd10      	pop	{r4, pc}
    9f90:	f7ff ffea 	bl	9f68 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    9f94:	1c61      	adds	r1, r4, #1
    9f96:	f7f7 fe13 	bl	1bc0 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    9f9a:	b108      	cbz	r0, 9fa0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    9f9c:	2000      	movs	r0, #0
    9f9e:	bd10      	pop	{r4, pc}
    9fa0:	2007      	movs	r0, #7
    9fa2:	bd10      	pop	{r4, pc}

00009fa4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    9fa4:	b510      	push	{r4, lr}
    9fa6:	f000 fa40 	bl	a42a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    9faa:	b108      	cbz	r0, 9fb0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    9fac:	200c      	movs	r0, #12
    9fae:	bd10      	pop	{r4, pc}
    9fb0:	f7f7 fe64 	bl	1c7c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    9fb4:	2000      	movs	r0, #0
    9fb6:	f7f7 fc0f 	bl	17d8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    9fba:	2000      	movs	r0, #0
    9fbc:	bd10      	pop	{r4, pc}

00009fbe <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    9fbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9fc2:	4605      	mov	r5, r0
    9fc4:	f000 f8fb 	bl	a1be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    9fc8:	2800      	cmp	r0, #0
    9fca:	d112      	bne.n	9ff2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    9fcc:	8828      	ldrh	r0, [r5, #0]
    9fce:	2100      	movs	r1, #0
    9fd0:	f7f7 f880 	bl	10d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9fd4:	0004      	movs	r4, r0
    9fd6:	d00e      	beq.n	9ff6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    9fd8:	f000 f9fe 	bl	a3d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>
    9fdc:	b158      	cbz	r0, 9ff6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    9fde:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    9fe2:	f88d 0000 	strb.w	r0, [sp]
    9fe6:	9800      	ldr	r0, [sp, #0]
    9fe8:	9000      	str	r0, [sp, #0]
    9fea:	f89d 0000 	ldrb.w	r0, [sp]
    9fee:	b120      	cbz	r0, 9ffa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    9ff0:	203a      	movs	r0, #58	; 0x3a
    9ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ff6:	2002      	movs	r0, #2
    9ff8:	e7fb      	b.n	9ff2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    9ffa:	f04f 0800 	mov.w	r8, #0
    9ffe:	88a8      	ldrh	r0, [r5, #4]
    a000:	f7ff fc3d 	bl	987e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a004:	4607      	mov	r7, r0
    a006:	4601      	mov	r1, r0
    a008:	2005      	movs	r0, #5
    a00a:	f7ff fc85 	bl	9918 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a00e:	4606      	mov	r6, r0
    a010:	4639      	mov	r1, r7
    a012:	2008      	movs	r0, #8
    a014:	f7ff fc80 	bl	9918 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a018:	42b0      	cmp	r0, r6
    a01a:	d301      	bcc.n	a020 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    a01c:	42be      	cmp	r6, r7
    a01e:	d301      	bcc.n	a024 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    a020:	2012      	movs	r0, #18
    a022:	e7e6      	b.n	9ff2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    a024:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    a028:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    a02c:	88e8      	ldrh	r0, [r5, #6]
    a02e:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    a032:	8928      	ldrh	r0, [r5, #8]
    a034:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    a038:	f504 7419 	add.w	r4, r4, #612	; 0x264
    a03c:	20ff      	movs	r0, #255	; 0xff
    a03e:	7020      	strb	r0, [r4, #0]
    a040:	2000      	movs	r0, #0
    a042:	e7d6      	b.n	9ff2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000a044 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    a044:	b510      	push	{r4, lr}
    a046:	460b      	mov	r3, r1
    a048:	2201      	movs	r2, #1
    a04a:	f100 0110 	add.w	r1, r0, #16
    a04e:	f7ff fbec 	bl	982a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a052:	2000      	movs	r0, #0
    a054:	bd10      	pop	{r4, pc}

0000a056 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    a056:	b510      	push	{r4, lr}
    a058:	2108      	movs	r1, #8
    a05a:	f7f6 fe03 	bl	c64 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    a05e:	2000      	movs	r0, #0
    a060:	bd10      	pop	{r4, pc}

0000a062 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    a062:	b510      	push	{r4, lr}
    a064:	4604      	mov	r4, r0
    a066:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a06a:	f000 f9d6 	bl	a41a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    a06e:	f7f7 fc1d 	bl	18ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    a072:	7020      	strb	r0, [r4, #0]
    a074:	f000 f9ad 	bl	a3d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    a078:	f7f7 fc18 	bl	18ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    a07c:	7060      	strb	r0, [r4, #1]
    a07e:	2000      	movs	r0, #0
    a080:	bd10      	pop	{r4, pc}

0000a082 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    a082:	b510      	push	{r4, lr}
    a084:	4604      	mov	r4, r0
    a086:	f7f7 fdff 	bl	1c88 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    a08a:	7020      	strb	r0, [r4, #0]
    a08c:	2000      	movs	r0, #0
    a08e:	bd10      	pop	{r4, pc}

0000a090 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    a090:	b510      	push	{r4, lr}
    a092:	4604      	mov	r4, r0
    a094:	f000 f9c9 	bl	a42a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    a098:	b108      	cbz	r0, a09e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    a09a:	200c      	movs	r0, #12
    a09c:	bd10      	pop	{r4, pc}
    a09e:	7820      	ldrb	r0, [r4, #0]
    a0a0:	b108      	cbz	r0, a0a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    a0a2:	2801      	cmp	r0, #1
    a0a4:	d107      	bne.n	a0b6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    a0a6:	f7ff ff5f 	bl	9f68 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    a0aa:	1c61      	adds	r1, r4, #1
    a0ac:	f7f7 fdc6 	bl	1c3c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    a0b0:	b108      	cbz	r0, a0b6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    a0b2:	2000      	movs	r0, #0
    a0b4:	bd10      	pop	{r4, pc}
    a0b6:	2012      	movs	r0, #18
    a0b8:	bd10      	pop	{r4, pc}

0000a0ba <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    a0ba:	b510      	push	{r4, lr}
    a0bc:	4604      	mov	r4, r0
    a0be:	2001      	movs	r0, #1
    a0c0:	f000 f8af 	bl	a222 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    a0c4:	b128      	cbz	r0, a0d2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    a0c6:	4621      	mov	r1, r4
    a0c8:	2001      	movs	r0, #1
    a0ca:	f7f7 fa8b 	bl	15e4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    a0ce:	2000      	movs	r0, #0
    a0d0:	bd10      	pop	{r4, pc}
    a0d2:	200c      	movs	r0, #12
    a0d4:	bd10      	pop	{r4, pc}

0000a0d6 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    a0d6:	b51c      	push	{r2, r3, r4, lr}
    a0d8:	7801      	ldrb	r1, [r0, #0]
    a0da:	f88d 1000 	strb.w	r1, [sp]
    a0de:	7840      	ldrb	r0, [r0, #1]
    a0e0:	f88d 0001 	strb.w	r0, [sp, #1]
    a0e4:	2000      	movs	r0, #0
    a0e6:	f8ad 0002 	strh.w	r0, [sp, #2]
    a0ea:	f8ad 0004 	strh.w	r0, [sp, #4]
    a0ee:	4601      	mov	r1, r0
    a0f0:	4668      	mov	r0, sp
    a0f2:	f000 f8c3 	bl	a27c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>
    a0f6:	2800      	cmp	r0, #0
    a0f8:	d102      	bne.n	a100 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    a0fa:	4668      	mov	r0, sp
    a0fc:	f000 f89d 	bl	a23a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a>
    a100:	bd1c      	pop	{r2, r3, r4, pc}

0000a102 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    a102:	b500      	push	{lr}
    a104:	b087      	sub	sp, #28
    a106:	7941      	ldrb	r1, [r0, #5]
    a108:	f88d 1000 	strb.w	r1, [sp]
    a10c:	7981      	ldrb	r1, [r0, #6]
    a10e:	f88d 1001 	strb.w	r1, [sp, #1]
    a112:	2101      	movs	r1, #1
    a114:	f88d 1002 	strb.w	r1, [sp, #2]
    a118:	7801      	ldrb	r1, [r0, #0]
    a11a:	f88d 1003 	strb.w	r1, [sp, #3]
    a11e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    a122:	f240 2271 	movw	r2, #625	; 0x271
    a126:	4351      	muls	r1, r2
    a128:	9102      	str	r1, [sp, #8]
    a12a:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    a12e:	4350      	muls	r0, r2
    a130:	9004      	str	r0, [sp, #16]
    a132:	2007      	movs	r0, #7
    a134:	f88d 0018 	strb.w	r0, [sp, #24]
    a138:	2000      	movs	r0, #0
    a13a:	f88d 0019 	strb.w	r0, [sp, #25]
    a13e:	9804      	ldr	r0, [sp, #16]
    a140:	f7f9 fcd2 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    a144:	b140      	cbz	r0, a158 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    a146:	9802      	ldr	r0, [sp, #8]
    a148:	f7f9 fcc2 	bl	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    a14c:	b120      	cbz	r0, a158 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    a14e:	4668      	mov	r0, sp
    a150:	f7f9 fc42 	bl	39d8 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    a154:	b007      	add	sp, #28
    a156:	bd00      	pop	{pc}
    a158:	2030      	movs	r0, #48	; 0x30
    a15a:	e7fb      	b.n	a154 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000a15c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    a15c:	b510      	push	{r4, lr}
    a15e:	f7f7 fa65 	bl	162c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    a162:	2000      	movs	r0, #0
    a164:	bd10      	pop	{r4, pc}

0000a166 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    a166:	b510      	push	{r4, lr}
    a168:	4604      	mov	r4, r0
    a16a:	f7f9 fd0d 	bl	3b88 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    a16e:	b118      	cbz	r0, a178 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    a170:	2000      	movs	r0, #0
    a172:	f000 f856 	bl	a222 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    a176:	b128      	cbz	r0, a184 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    a178:	4621      	mov	r1, r4
    a17a:	2000      	movs	r0, #0
    a17c:	f7f7 fa32 	bl	15e4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    a180:	2000      	movs	r0, #0
    a182:	bd10      	pop	{r4, pc}
    a184:	200c      	movs	r0, #12
    a186:	bd10      	pop	{r4, pc}

0000a188 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    a188:	b510      	push	{r4, lr}
    a18a:	7800      	ldrb	r0, [r0, #0]
    a18c:	b100      	cbz	r0, a190 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    a18e:	2001      	movs	r0, #1
    a190:	f7f9 fb0c 	bl	37ac <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    a194:	2000      	movs	r0, #0
    a196:	bd10      	pop	{r4, pc}

0000a198 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    a198:	b510      	push	{r4, lr}
    a19a:	4604      	mov	r4, r0
    a19c:	4601      	mov	r1, r0
    a19e:	2000      	movs	r0, #0
    a1a0:	f7f7 fa08 	bl	15b4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    a1a4:	b910      	cbnz	r0, a1ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    a1a6:	2000      	movs	r0, #0
    a1a8:	6020      	str	r0, [r4, #0]
    a1aa:	80a0      	strh	r0, [r4, #4]
    a1ac:	2000      	movs	r0, #0
    a1ae:	bd10      	pop	{r4, pc}

0000a1b0 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    a1b0:	b510      	push	{r4, lr}
    a1b2:	f7f9 fcef 	bl	3b94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    a1b6:	2000      	movs	r0, #0
    a1b8:	bd10      	pop	{r4, pc}

0000a1ba <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a1ba:	f000 b821 	b.w	a200 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000a1be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    a1be:	b510      	push	{r4, lr}
    a1c0:	4604      	mov	r4, r0
    a1c2:	2000      	movs	r0, #0
    a1c4:	8822      	ldrh	r2, [r4, #0]
    a1c6:	b086      	sub	sp, #24
    a1c8:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    a1cc:	39ff      	subs	r1, #255	; 0xff
    a1ce:	d008      	beq.n	a1e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    a1d0:	a903      	add	r1, sp, #12
    a1d2:	4610      	mov	r0, r2
    a1d4:	f7ff fb47 	bl	9866 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a1d8:	b110      	cbz	r0, a1e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    a1da:	2002      	movs	r0, #2
    a1dc:	b006      	add	sp, #24
    a1de:	bd10      	pop	{r4, pc}
    a1e0:	9804      	ldr	r0, [sp, #16]
    a1e2:	8921      	ldrh	r1, [r4, #8]
    a1e4:	89a3      	ldrh	r3, [r4, #12]
    a1e6:	8962      	ldrh	r2, [r4, #10]
    a1e8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    a1ec:	88e3      	ldrh	r3, [r4, #6]
    a1ee:	88a2      	ldrh	r2, [r4, #4]
    a1f0:	8861      	ldrh	r1, [r4, #2]
    a1f2:	f000 f8c3 	bl	a37c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    a1f6:	b108      	cbz	r0, a1fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    a1f8:	2000      	movs	r0, #0
    a1fa:	e7ef      	b.n	a1dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    a1fc:	2030      	movs	r0, #48	; 0x30
    a1fe:	e7ed      	b.n	a1dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000a200 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a200:	b510      	push	{r4, lr}
    a202:	f7ff faa1 	bl	9748 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a206:	f7f7 fa89 	bl	171c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a20a:	f7f9 fd07 	bl	3c1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    a20e:	f7ff fc13 	bl	9a38 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    a212:	f7ff fb90 	bl	9936 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    a216:	f7f7 fd31 	bl	1c7c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    a21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a21e:	f7f9 bc29 	b.w	3a74 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    a222:	b510      	push	{r4, lr}
    a224:	f000 f8ee 	bl	a404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    a228:	b128      	cbz	r0, a236 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    a22a:	f7f7 fecf 	bl	1fcc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    a22e:	2801      	cmp	r0, #1
    a230:	d001      	beq.n	a236 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    a232:	2000      	movs	r0, #0
    a234:	bd10      	pop	{r4, pc}
    a236:	2001      	movs	r0, #1
    a238:	bd10      	pop	{r4, pc}
    a23a:	b510      	push	{r4, lr}
    a23c:	4604      	mov	r4, r0
    a23e:	7800      	ldrb	r0, [r0, #0]
    a240:	2801      	cmp	r0, #1
    a242:	d009      	beq.n	a258 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    a244:	f7f8 fe96 	bl	2f74 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    a248:	2805      	cmp	r0, #5
    a24a:	d003      	beq.n	a254 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>
    a24c:	f7f8 fe5a 	bl	2f04 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    a250:	2800      	cmp	r0, #0
    a252:	d000      	beq.n	a256 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    a254:	200c      	movs	r0, #12
    a256:	bd10      	pop	{r4, pc}
    a258:	f7f7 fe86 	bl	1f68 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    a25c:	b108      	cbz	r0, a262 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    a25e:	203a      	movs	r0, #58	; 0x3a
    a260:	bd10      	pop	{r4, pc}
    a262:	f7f7 fe43 	bl	1eec <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    a266:	b138      	cbz	r0, a278 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    a268:	f7f7 fd5e 	bl	1d28 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    a26c:	88a1      	ldrh	r1, [r4, #4]
    a26e:	8860      	ldrh	r0, [r4, #2]
    a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a274:	f7f8 be0c 	b.w	2e90 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    a278:	2012      	movs	r0, #18
    a27a:	bd10      	pop	{r4, pc}
    a27c:	7802      	ldrb	r2, [r0, #0]
    a27e:	2a01      	cmp	r2, #1
    a280:	d001      	beq.n	a286 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x86>
    a282:	b1ba      	cbz	r2, a2b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    a284:	e018      	b.n	a2b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    a286:	7842      	ldrb	r2, [r0, #1]
    a288:	b13a      	cbz	r2, a29a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    a28a:	2a01      	cmp	r2, #1
    a28c:	d005      	beq.n	a29a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    a28e:	2a02      	cmp	r2, #2
    a290:	d112      	bne.n	a2b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    a292:	b189      	cbz	r1, a2b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    a294:	8881      	ldrh	r1, [r0, #4]
    a296:	b179      	cbz	r1, a2b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    a298:	e000      	b.n	a29c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    a29a:	b159      	cbz	r1, a2b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    a29c:	8841      	ldrh	r1, [r0, #2]
    a29e:	b149      	cbz	r1, a2b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    a2a0:	8880      	ldrh	r0, [r0, #4]
    a2a2:	b138      	cbz	r0, a2b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    a2a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    a2a8:	0049      	lsls	r1, r1, #1
    a2aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    a2ae:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    a2b2:	d201      	bcs.n	a2b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    a2b4:	2000      	movs	r0, #0
    a2b6:	4770      	bx	lr
    a2b8:	2012      	movs	r0, #18
    a2ba:	4770      	bx	lr
    a2bc:	b570      	push	{r4, r5, r6, lr}
    a2be:	4604      	mov	r4, r0
    a2c0:	7800      	ldrb	r0, [r0, #0]
    a2c2:	2500      	movs	r5, #0
    a2c4:	2801      	cmp	r0, #1
    a2c6:	d004      	beq.n	a2d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    a2c8:	b118      	cbz	r0, a2d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    a2ca:	2802      	cmp	r0, #2
    a2cc:	d001      	beq.n	a2d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    a2ce:	2803      	cmp	r0, #3
    a2d0:	d139      	bne.n	a346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    a2d2:	7860      	ldrb	r0, [r4, #1]
    a2d4:	b128      	cbz	r0, a2e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    a2d6:	2801      	cmp	r0, #1
    a2d8:	d003      	beq.n	a2e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    a2da:	2802      	cmp	r0, #2
    a2dc:	d001      	beq.n	a2e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    a2de:	2803      	cmp	r0, #3
    a2e0:	d131      	bne.n	a346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    a2e2:	7e60      	ldrb	r0, [r4, #25]
    a2e4:	b948      	cbnz	r0, a2fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    a2e6:	78a0      	ldrb	r0, [r4, #2]
    a2e8:	2801      	cmp	r0, #1
    a2ea:	d12c      	bne.n	a346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    a2ec:	f7f9 fc86 	bl	3bfc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a2f0:	4601      	mov	r1, r0
    a2f2:	78a0      	ldrb	r0, [r4, #2]
    a2f4:	ea30 0101 	bics.w	r1, r0, r1
    a2f8:	d001      	beq.n	a2fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    a2fa:	2011      	movs	r0, #17
    a2fc:	bd70      	pop	{r4, r5, r6, pc}
    a2fe:	07c0      	lsls	r0, r0, #31
    a300:	d006      	beq.n	a310 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x110>
    a302:	78e0      	ldrb	r0, [r4, #3]
    a304:	2301      	movs	r3, #1
    a306:	6922      	ldr	r2, [r4, #16]
    a308:	68a1      	ldr	r1, [r4, #8]
    a30a:	f000 f820 	bl	a34e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    a30e:	4605      	mov	r5, r0
    a310:	78a0      	ldrb	r0, [r4, #2]
    a312:	0780      	lsls	r0, r0, #30
    a314:	d506      	bpl.n	a324 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    a316:	78e0      	ldrb	r0, [r4, #3]
    a318:	2302      	movs	r3, #2
    a31a:	6922      	ldr	r2, [r4, #16]
    a31c:	68a1      	ldr	r1, [r4, #8]
    a31e:	f000 f816 	bl	a34e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    a322:	4305      	orrs	r5, r0
    a324:	78a0      	ldrb	r0, [r4, #2]
    a326:	0740      	lsls	r0, r0, #29
    a328:	d506      	bpl.n	a338 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x138>
    a32a:	78e0      	ldrb	r0, [r4, #3]
    a32c:	2304      	movs	r3, #4
    a32e:	6922      	ldr	r2, [r4, #16]
    a330:	68a1      	ldr	r1, [r4, #8]
    a332:	f000 f80c 	bl	a34e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    a336:	4305      	orrs	r5, r0
    a338:	b10d      	cbz	r5, a33e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    a33a:	4628      	mov	r0, r5
    a33c:	bd70      	pop	{r4, r5, r6, pc}
    a33e:	7e20      	ldrb	r0, [r4, #24]
    a340:	b108      	cbz	r0, a346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    a342:	2807      	cmp	r0, #7
    a344:	d901      	bls.n	a34a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    a346:	2012      	movs	r0, #18
    a348:	bd70      	pop	{r4, r5, r6, pc}
    a34a:	2000      	movs	r0, #0
    a34c:	bd70      	pop	{r4, r5, r6, pc}
    a34e:	b570      	push	{r4, r5, r6, lr}
    a350:	4614      	mov	r4, r2
    a352:	460d      	mov	r5, r1
    a354:	b108      	cbz	r0, a35a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15a>
    a356:	2801      	cmp	r0, #1
    a358:	d10a      	bne.n	a370 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    a35a:	4619      	mov	r1, r3
    a35c:	4610      	mov	r0, r2
    a35e:	f7f9 fbe3 	bl	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    a362:	b138      	cbz	r0, a374 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a364:	4628      	mov	r0, r5
    a366:	f7f9 fba7 	bl	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    a36a:	b118      	cbz	r0, a374 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a36c:	42ac      	cmp	r4, r5
    a36e:	d903      	bls.n	a378 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    a370:	2012      	movs	r0, #18
    a372:	bd70      	pop	{r4, r5, r6, pc}
    a374:	2030      	movs	r0, #48	; 0x30
    a376:	bd70      	pop	{r4, r5, r6, pc}
    a378:	2000      	movs	r0, #0
    a37a:	bd70      	pop	{r4, r5, r6, pc}
    a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a380:	461d      	mov	r5, r3
    a382:	4610      	mov	r0, r2
    a384:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    a388:	1f8b      	subs	r3, r1, #6
    a38a:	f640 427a 	movw	r2, #3194	; 0xc7a
    a38e:	9e08      	ldr	r6, [sp, #32]
    a390:	4293      	cmp	r3, r2
    a392:	d81c      	bhi.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a394:	1f83      	subs	r3, r0, #6
    a396:	4293      	cmp	r3, r2
    a398:	d819      	bhi.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a39a:	4281      	cmp	r1, r0
    a39c:	d817      	bhi.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a39e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    a3a2:	d214      	bcs.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a3a4:	f1a4 010a 	sub.w	r1, r4, #10
    a3a8:	1f12      	subs	r2, r2, #4
    a3aa:	4291      	cmp	r1, r2
    a3ac:	d80f      	bhi.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a3ae:	f7ff fa66 	bl	987e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a3b2:	1c6d      	adds	r5, r5, #1
    a3b4:	4368      	muls	r0, r5
    a3b6:	f240 2171 	movw	r1, #625	; 0x271
    a3ba:	0040      	lsls	r0, r0, #1
    a3bc:	434c      	muls	r4, r1
    a3be:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    a3c2:	d204      	bcs.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a3c4:	42b7      	cmp	r7, r6
    a3c6:	d802      	bhi.n	a3ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    a3c8:	2001      	movs	r0, #1
    a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3ce:	2000      	movs	r0, #0
    a3d0:	e7fb      	b.n	a3ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    a3d2:	207f      	movs	r0, #127	; 0x7f
    a3d4:	f000 b821 	b.w	a41a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    a3d8:	b508      	push	{r3, lr}
    a3da:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    a3de:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    a3e2:	f88d 0000 	strb.w	r0, [sp]
    a3e6:	9800      	ldr	r0, [sp, #0]
    a3e8:	9000      	str	r0, [sp, #0]
    a3ea:	f89d 0000 	ldrb.w	r0, [sp]
    a3ee:	b100      	cbz	r0, a3f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    a3f0:	2001      	movs	r0, #1
    a3f2:	1e40      	subs	r0, r0, #1
    a3f4:	4208      	tst	r0, r1
    a3f6:	d003      	beq.n	a400 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    a3f8:	2904      	cmp	r1, #4
    a3fa:	d001      	beq.n	a400 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    a3fc:	2001      	movs	r0, #1
    a3fe:	bd08      	pop	{r3, pc}
    a400:	2000      	movs	r0, #0
    a402:	bd08      	pop	{r3, pc}
    a404:	b510      	push	{r4, lr}
    a406:	f7f8 fdb5 	bl	2f74 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    a40a:	2804      	cmp	r0, #4
    a40c:	d003      	beq.n	a416 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    a40e:	2805      	cmp	r0, #5
    a410:	d001      	beq.n	a416 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    a412:	2000      	movs	r0, #0
    a414:	bd10      	pop	{r4, pc}
    a416:	2001      	movs	r0, #1
    a418:	bd10      	pop	{r4, pc}
    a41a:	b508      	push	{r3, lr}
    a41c:	f640 1288 	movw	r2, #2440	; 0x988
    a420:	2300      	movs	r3, #0
    a422:	4669      	mov	r1, sp
    a424:	f7fe fa1e 	bl	8864 <mpsl_fem_tx_power_split>
    a428:	bd08      	pop	{r3, pc}
    a42a:	b510      	push	{r4, lr}
    a42c:	f7ff ffea 	bl	a404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    a430:	b120      	cbz	r0, a43c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    a432:	f7f7 fdd3 	bl	1fdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    a436:	b108      	cbz	r0, a43c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    a438:	2001      	movs	r0, #1
    a43a:	bd10      	pop	{r4, pc}
    a43c:	2000      	movs	r0, #0
    a43e:	bd10      	pop	{r4, pc}
    a440:	6802      	ldr	r2, [r0, #0]
    a442:	b912      	cbnz	r2, a44a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    a444:	6001      	str	r1, [r0, #0]
    a446:	4770      	bx	lr
    a448:	4602      	mov	r2, r0
    a44a:	6850      	ldr	r0, [r2, #4]
    a44c:	b108      	cbz	r0, a452 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x252>
    a44e:	428a      	cmp	r2, r1
    a450:	d1fa      	bne.n	a448 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x248>
    a452:	428a      	cmp	r2, r1
    a454:	d0f7      	beq.n	a446 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
    a456:	6051      	str	r1, [r2, #4]
    a458:	4770      	bx	lr
    a45a:	b510      	push	{r4, lr}
    a45c:	4604      	mov	r4, r0
    a45e:	e002      	b.n	a466 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    a460:	6820      	ldr	r0, [r4, #0]
    a462:	4780      	blx	r0
    a464:	6864      	ldr	r4, [r4, #4]
    a466:	2c00      	cmp	r4, #0
    a468:	d1fa      	bne.n	a460 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
    a46a:	bd10      	pop	{r4, pc}
    a46c:	b510      	push	{r4, lr}
    a46e:	f7f7 fce5 	bl	1e3c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    a472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a476:	f7f9 bbaf 	b.w	3bd8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x24>
    a47a:	b510      	push	{r4, lr}
    a47c:	f7f8 fdc2 	bl	3004 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    a480:	b110      	cbz	r0, a488 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x288>
    a482:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    a486:	e004      	b.n	a492 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    a488:	f7ff fd25 	bl	9ed6 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    a48c:	b120      	cbz	r0, a498 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x298>
    a48e:	f240 114f 	movw	r1, #335	; 0x14f
    a492:	2001      	movs	r0, #1
    a494:	f7f6 fb74 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a498:	f7f9 fadc 	bl	3a54 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    a49c:	f7f7 fcf0 	bl	1e80 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    a4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4a4:	f7f9 ba60 	b.w	3968 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    a4a8:	000b0001 	.word	0x000b0001
    a4ac:	000a0002 	.word	0x000a0002
    a4b0:	00090005 	.word	0x00090005
    a4b4:	0008000a 	.word	0x0008000a
    a4b8:	00070014 	.word	0x00070014
    a4bc:	0006001e 	.word	0x0006001e
    a4c0:	00050032 	.word	0x00050032
    a4c4:	0004004b 	.word	0x0004004b
    a4c8:	00030064 	.word	0x00030064
    a4cc:	00020096 	.word	0x00020096
    a4d0:	000100fa 	.word	0x000100fa
    a4d4:	000001f4 	.word	0x000001f4

0000a4d8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    a4d8:	b510      	push	{r4, lr}
    a4da:	f7f9 fdf5 	bl	40c8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    a4de:	f000 f818 	bl	a512 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    a4e2:	f7f9 fc07 	bl	3cf4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    a4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4ea:	f7f9 bc6d 	b.w	3dc8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000a4ee <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    a4ee:	b510      	push	{r4, lr}
    a4f0:	24c8      	movs	r4, #200	; 0xc8
    a4f2:	1e64      	subs	r4, r4, #1
    a4f4:	b2e4      	uxtb	r4, r4
    a4f6:	f7f9 fc1b 	bl	3d30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    a4fa:	2802      	cmp	r0, #2
    a4fc:	d003      	beq.n	a506 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    a4fe:	2801      	cmp	r0, #1
    a500:	d000      	beq.n	a504 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    a502:	2000      	movs	r0, #0
    a504:	bd10      	pop	{r4, pc}
    a506:	2c00      	cmp	r4, #0
    a508:	d1f3      	bne.n	a4f2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    a50a:	21ed      	movs	r1, #237	; 0xed
    a50c:	203b      	movs	r0, #59	; 0x3b
    a50e:	f7f6 fb37 	bl	b80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000a512 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    a512:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a516:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a51a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    a51e:	f3bf 8f4f 	dsb	sy
    a522:	f3bf 8f6f 	isb	sy
    a526:	f7f9 bc83 	b.w	3e30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    a52a:	2800      	cmp	r0, #0
    a52c:	db09      	blt.n	a542 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    a52e:	f000 021f 	and.w	r2, r0, #31
    a532:	2101      	movs	r1, #1
    a534:	4091      	lsls	r1, r2
    a536:	0940      	lsrs	r0, r0, #5
    a538:	0080      	lsls	r0, r0, #2
    a53a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a53e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a542:	4770      	bx	lr
    a544:	2800      	cmp	r0, #0
    a546:	db0d      	blt.n	a564 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    a548:	f000 021f 	and.w	r2, r0, #31
    a54c:	2101      	movs	r1, #1
    a54e:	4091      	lsls	r1, r2
    a550:	0940      	lsrs	r0, r0, #5
    a552:	0080      	lsls	r0, r0, #2
    a554:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a558:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a55c:	f3bf 8f4f 	dsb	sy
    a560:	f3bf 8f6f 	isb	sy
    a564:	4770      	bx	lr
    a566:	5840      	ldr	r0, [r0, r1]
    a568:	2800      	cmp	r0, #0
    a56a:	d000      	beq.n	a56e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    a56c:	2001      	movs	r0, #1
    a56e:	4770      	bx	lr
    a570:	5840      	ldr	r0, [r0, r1]
    a572:	2800      	cmp	r0, #0
    a574:	d000      	beq.n	a578 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    a576:	2001      	movs	r0, #1
    a578:	4770      	bx	lr

0000a57a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    a57a:	b510      	push	{r4, lr}
    a57c:	4604      	mov	r4, r0
    a57e:	4608      	mov	r0, r1
    a580:	f7f9 febc 	bl	42fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a588:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    a58c:	fbb0 f0f1 	udiv	r0, r0, r1
    a590:	1a20      	subs	r0, r4, r0
    a592:	1e80      	subs	r0, r0, #2
    a594:	bd10      	pop	{r4, pc}

0000a596 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    a596:	b510      	push	{r4, lr}
    a598:	4604      	mov	r4, r0
    a59a:	4608      	mov	r0, r1
    a59c:	f7f9 feae 	bl	42fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a5a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a5a4:	fbb0 f0f1 	udiv	r0, r0, r1
    a5a8:	1a20      	subs	r0, r4, r0
    a5aa:	bd10      	pop	{r4, pc}
    a5ac:	2804      	cmp	r0, #4
    a5ae:	d202      	bcs.n	a5b6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    a5b0:	f04f 0028 	mov.w	r0, #40	; 0x28
    a5b4:	4770      	bx	lr
    a5b6:	d102      	bne.n	a5be <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    a5b8:	f04f 0010 	mov.w	r0, #16
    a5bc:	4770      	bx	lr
    a5be:	f04f 0000 	mov.w	r0, #0
    a5c2:	4770      	bx	lr
    a5c4:	2100      	movs	r1, #0
    a5c6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    a5ca:	f800 1f24 	strb.w	r1, [r0, #36]!
    a5ce:	7041      	strb	r1, [r0, #1]
    a5d0:	4770      	bx	lr

0000a5d2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    a5d2:	b570      	push	{r4, r5, r6, lr}
    a5d4:	f7fa fbea 	bl	4dac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    a5d8:	4605      	mov	r5, r0
    a5da:	2400      	movs	r4, #0
    a5dc:	e006      	b.n	a5ec <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    a5de:	4620      	mov	r0, r4
    a5e0:	f7fa fbea 	bl	4db8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    a5e4:	f7ff ffee 	bl	a5c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    a5e8:	1c64      	adds	r4, r4, #1
    a5ea:	b2e4      	uxtb	r4, r4
    a5ec:	42ac      	cmp	r4, r5
    a5ee:	d3f6      	bcc.n	a5de <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    a5f0:	bd70      	pop	{r4, r5, r6, pc}

0000a5f2 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    a5f2:	f7fd b813 	b.w	761c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000a5f6 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    a5f6:	b510      	push	{r4, lr}
    a5f8:	2000      	movs	r0, #0
    a5fa:	f7fd fb6b 	bl	7cd4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    a5fe:	6800      	ldr	r0, [r0, #0]
    a600:	2800      	cmp	r0, #0
    a602:	bf18      	it	ne
    a604:	2001      	movne	r0, #1
    a606:	bd10      	pop	{r4, pc}

0000a608 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    a608:	f7fd bb3e 	b.w	7c88 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0000a60c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    a60c:	0a41      	lsrs	r1, r0, #9
    a60e:	f643 5209 	movw	r2, #15625	; 0x3d09
    a612:	4351      	muls	r1, r2
    a614:	f3c0 0008 	ubfx	r0, r0, #0, #9
    a618:	fb10 f002 	smulbb	r0, r0, r2
    a61c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    a620:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    a624:	4770      	bx	lr
    a626:	2800      	cmp	r0, #0
    a628:	db09      	blt.n	a63e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    a62a:	f000 021f 	and.w	r2, r0, #31
    a62e:	2101      	movs	r1, #1
    a630:	4091      	lsls	r1, r2
    a632:	0940      	lsrs	r0, r0, #5
    a634:	0080      	lsls	r0, r0, #2
    a636:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a63a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a63e:	4770      	bx	lr
    a640:	2800      	cmp	r0, #0
    a642:	db0d      	blt.n	a660 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    a644:	f000 021f 	and.w	r2, r0, #31
    a648:	2101      	movs	r1, #1
    a64a:	4091      	lsls	r1, r2
    a64c:	0940      	lsrs	r0, r0, #5
    a64e:	0080      	lsls	r0, r0, #2
    a650:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a654:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a658:	f3bf 8f4f 	dsb	sy
    a65c:	f3bf 8f6f 	isb	sy
    a660:	4770      	bx	lr
    a662:	5840      	ldr	r0, [r0, r1]
    a664:	2800      	cmp	r0, #0
    a666:	d000      	beq.n	a66a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    a668:	2001      	movs	r0, #1
    a66a:	4770      	bx	lr
    a66c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    a670:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    a674:	f002 0201 	and.w	r2, r2, #1
    a678:	03c0      	lsls	r0, r0, #15
    a67a:	d503      	bpl.n	a684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    a67c:	428a      	cmp	r2, r1
    a67e:	d101      	bne.n	a684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    a680:	2001      	movs	r0, #1
    a682:	4770      	bx	lr
    a684:	2000      	movs	r0, #0
    a686:	4770      	bx	lr

0000a688 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    a688:	b510      	push	{r4, lr}
    a68a:	2101      	movs	r1, #1
    a68c:	0788      	lsls	r0, r1, #30
    a68e:	f7fd fed5 	bl	843c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    a692:	2800      	cmp	r0, #0
    a694:	d000      	beq.n	a698 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    a696:	2001      	movs	r0, #1
    a698:	bd10      	pop	{r4, pc}

0000a69a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    a69a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a69e:	2101      	movs	r1, #1
    a6a0:	6001      	str	r1, [r0, #0]
    a6a2:	4770      	bx	lr

0000a6a4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    a6a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    a6a8:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    a6ac:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    a6b0:	f002 0203 	and.w	r2, r2, #3
    a6b4:	03c9      	lsls	r1, r1, #15
    a6b6:	d503      	bpl.n	a6c0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    a6b8:	4282      	cmp	r2, r0
    a6ba:	d101      	bne.n	a6c0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    a6bc:	2001      	movs	r0, #1
    a6be:	4770      	bx	lr
    a6c0:	2000      	movs	r0, #0
    a6c2:	4770      	bx	lr

0000a6c4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    a6c4:	b510      	push	{r4, lr}
    a6c6:	2100      	movs	r1, #0
    a6c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a6cc:	f7fd feb6 	bl	843c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    a6d0:	2800      	cmp	r0, #0
    a6d2:	d000      	beq.n	a6d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    a6d4:	2001      	movs	r0, #1
    a6d6:	bd10      	pop	{r4, pc}
    a6d8:	2800      	cmp	r0, #0
    a6da:	db09      	blt.n	a6f0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    a6dc:	f000 021f 	and.w	r2, r0, #31
    a6e0:	2101      	movs	r1, #1
    a6e2:	4091      	lsls	r1, r2
    a6e4:	0940      	lsrs	r0, r0, #5
    a6e6:	0080      	lsls	r0, r0, #2
    a6e8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a6ec:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a6f0:	4770      	bx	lr
    a6f2:	2800      	cmp	r0, #0
    a6f4:	db0d      	blt.n	a712 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    a6f6:	f000 021f 	and.w	r2, r0, #31
    a6fa:	2101      	movs	r1, #1
    a6fc:	4091      	lsls	r1, r2
    a6fe:	0940      	lsrs	r0, r0, #5
    a700:	0080      	lsls	r0, r0, #2
    a702:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a706:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a70a:	f3bf 8f4f 	dsb	sy
    a70e:	f3bf 8f6f 	isb	sy
    a712:	4770      	bx	lr
    a714:	00021000 	.word	0x00021000
    a718:	000000fa 	.word	0x000000fa
    a71c:	5faee8ff 	.word	0x5faee8ff
    a720:	c87c9577 	.word	0xc87c9577
    a724:	18146227 	.word	0x18146227
    a728:	c65deae6 	.word	0xc65deae6
    a72c:	3a723992 	.word	0x3a723992
    a730:	2800      	cmp	r0, #0
    a732:	db09      	blt.n	a748 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    a734:	f000 021f 	and.w	r2, r0, #31
    a738:	2101      	movs	r1, #1
    a73a:	4091      	lsls	r1, r2
    a73c:	0940      	lsrs	r0, r0, #5
    a73e:	0080      	lsls	r0, r0, #2
    a740:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a744:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a748:	4770      	bx	lr

0000a74a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    a74a:	f3ef 8110 	mrs	r1, PRIMASK
    a74e:	b672      	cpsid	i
    a750:	7802      	ldrb	r2, [r0, #0]
    a752:	2a01      	cmp	r2, #1
    a754:	d001      	beq.n	a75a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    a756:	2201      	movs	r2, #1
    a758:	e000      	b.n	a75c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    a75a:	2200      	movs	r2, #0
    a75c:	2301      	movs	r3, #1
    a75e:	7003      	strb	r3, [r0, #0]
    a760:	b901      	cbnz	r1, a764 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    a762:	b662      	cpsie	i
    a764:	b10a      	cbz	r2, a76a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    a766:	2000      	movs	r0, #0
    a768:	4770      	bx	lr
    a76a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a76e:	4770      	bx	lr

0000a770 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    a770:	2100      	movs	r1, #0
    a772:	7001      	strb	r1, [r0, #0]
    a774:	4608      	mov	r0, r1
    a776:	4770      	bx	lr

0000a778 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    a778:	f3ef 8110 	mrs	r1, PRIMASK
    a77c:	b672      	cpsid	i
    a77e:	2200      	movs	r2, #0
    a780:	7002      	strb	r2, [r0, #0]
    a782:	b901      	cbnz	r1, a786 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    a784:	b662      	cpsie	i
    a786:	2000      	movs	r0, #0
    a788:	4770      	bx	lr

0000a78a <mpsl_low_priority_process>:
    a78a:	f7fd bfab 	b.w	86e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000a78e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    a78e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a792:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a796:	280f      	cmp	r0, #15
    a798:	d001      	beq.n	a79e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    a79a:	2000      	movs	r0, #0
    a79c:	4770      	bx	lr
    a79e:	2001      	movs	r0, #1
    a7a0:	4770      	bx	lr

0000a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    a7a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a7a6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a7aa:	280a      	cmp	r0, #10
    a7ac:	d001      	beq.n	a7b2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    a7ae:	2000      	movs	r0, #0
    a7b0:	4770      	bx	lr
    a7b2:	2001      	movs	r0, #1
    a7b4:	4770      	bx	lr

0000a7b6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    a7b6:	b500      	push	{lr}
    a7b8:	f7ff fff3 	bl	a7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    a7bc:	b120      	cbz	r0, a7c8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    a7be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a7c2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a7c6:	b108      	cbz	r0, a7cc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    a7c8:	2000      	movs	r0, #0
    a7ca:	bd00      	pop	{pc}
    a7cc:	2001      	movs	r0, #1
    a7ce:	bd00      	pop	{pc}

0000a7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    a7d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a7d4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a7d8:	280e      	cmp	r0, #14
    a7da:	d001      	beq.n	a7e0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    a7dc:	2000      	movs	r0, #0
    a7de:	4770      	bx	lr
    a7e0:	2001      	movs	r0, #1
    a7e2:	4770      	bx	lr

0000a7e4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    a7e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a7e8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a7ec:	2810      	cmp	r0, #16
    a7ee:	d001      	beq.n	a7f4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    a7f0:	2000      	movs	r0, #0
    a7f2:	4770      	bx	lr
    a7f4:	2001      	movs	r0, #1
    a7f6:	4770      	bx	lr

0000a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    a7f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a7fc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a800:	2806      	cmp	r0, #6
    a802:	d003      	beq.n	a80c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a804:	1c40      	adds	r0, r0, #1
    a806:	d001      	beq.n	a80c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a808:	2000      	movs	r0, #0
    a80a:	4770      	bx	lr
    a80c:	2001      	movs	r0, #1
    a80e:	4770      	bx	lr

0000a810 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    a810:	b500      	push	{lr}
    a812:	f7ff fff1 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a816:	b148      	cbz	r0, a82c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a818:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a81c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a820:	2806      	cmp	r0, #6
    a822:	d303      	bcc.n	a82c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a824:	1c40      	adds	r0, r0, #1
    a826:	d001      	beq.n	a82c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a828:	2001      	movs	r0, #1
    a82a:	bd00      	pop	{pc}
    a82c:	2000      	movs	r0, #0
    a82e:	bd00      	pop	{pc}

0000a830 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    a830:	b500      	push	{lr}
    a832:	f7ff ffe1 	bl	a7f8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a836:	b138      	cbz	r0, a848 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    a838:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a83c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a840:	2806      	cmp	r0, #6
    a842:	d303      	bcc.n	a84c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a844:	1c40      	adds	r0, r0, #1
    a846:	d001      	beq.n	a84c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a848:	2000      	movs	r0, #0
    a84a:	bd00      	pop	{pc}
    a84c:	2001      	movs	r0, #1
    a84e:	bd00      	pop	{pc}

0000a850 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    a850:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a854:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a858:	280d      	cmp	r0, #13
    a85a:	d001      	beq.n	a860 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    a85c:	2000      	movs	r0, #0
    a85e:	4770      	bx	lr
    a860:	2001      	movs	r0, #1
    a862:	4770      	bx	lr

0000a864 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    a864:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a868:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a86c:	2808      	cmp	r0, #8
    a86e:	d001      	beq.n	a874 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    a870:	2000      	movs	r0, #0
    a872:	4770      	bx	lr
    a874:	2001      	movs	r0, #1
    a876:	4770      	bx	lr

0000a878 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    a878:	f7fd bf6e 	b.w	8758 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a87c <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    a87c:	f7fd bf6c 	b.w	8758 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a880 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a884:	428a      	cmp	r2, r1
    a886:	d803      	bhi.n	a890 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    a888:	2179      	movs	r1, #121	; 0x79
    a88a:	2096      	movs	r0, #150	; 0x96
    a88c:	f7fd fe2c 	bl	84e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a890:	fab2 f382 	clz	r3, r2
    a894:	b143      	cbz	r3, a8a8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    a896:	4099      	lsls	r1, r3
    a898:	f1c3 0c20 	rsb	ip, r3, #32
    a89c:	fa20 fc0c 	lsr.w	ip, r0, ip
    a8a0:	4098      	lsls	r0, r3
    a8a2:	ea41 010c 	orr.w	r1, r1, ip
    a8a6:	409a      	lsls	r2, r3
    a8a8:	0c13      	lsrs	r3, r2, #16
    a8aa:	fbb1 f5f3 	udiv	r5, r1, r3
    a8ae:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    a8b2:	b287      	uxth	r7, r0
    a8b4:	fbb1 f0f3 	udiv	r0, r1, r3
    a8b8:	fb03 1615 	mls	r6, r3, r5, r1
    a8bc:	b294      	uxth	r4, r2
    a8be:	fb00 f504 	mul.w	r5, r0, r4
    a8c2:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    a8c6:	42b5      	cmp	r5, r6
    a8c8:	d905      	bls.n	a8d6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    a8ca:	1bad      	subs	r5, r5, r6
    a8cc:	4295      	cmp	r5, r2
    a8ce:	bf94      	ite	ls
    a8d0:	2501      	movls	r5, #1
    a8d2:	2502      	movhi	r5, #2
    a8d4:	1b40      	subs	r0, r0, r5
    a8d6:	0409      	lsls	r1, r1, #16
    a8d8:	0405      	lsls	r5, r0, #16
    a8da:	eb11 010c 	adds.w	r1, r1, ip
    a8de:	fba0 0c02 	umull	r0, ip, r0, r2
    a8e2:	1a09      	subs	r1, r1, r0
    a8e4:	fbb1 f0f3 	udiv	r0, r1, r3
    a8e8:	fbb1 fcf3 	udiv	ip, r1, r3
    a8ec:	fb03 131c 	mls	r3, r3, ip, r1
    a8f0:	fb00 f104 	mul.w	r1, r0, r4
    a8f4:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    a8f8:	4299      	cmp	r1, r3
    a8fa:	d905      	bls.n	a908 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    a8fc:	1ac9      	subs	r1, r1, r3
    a8fe:	4291      	cmp	r1, r2
    a900:	bf94      	ite	ls
    a902:	2101      	movls	r1, #1
    a904:	2102      	movhi	r1, #2
    a906:	1a40      	subs	r0, r0, r1
    a908:	4328      	orrs	r0, r5
    a90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a90e <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    a90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a912:	461e      	mov	r6, r3
    a914:	4615      	mov	r5, r2
    a916:	4604      	mov	r4, r0
    a918:	9f06      	ldr	r7, [sp, #24]
    a91a:	f7ff ffb1 	bl	a880 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    a91e:	6030      	str	r0, [r6, #0]
    a920:	fba0 0105 	umull	r0, r1, r0, r5
    a924:	1a20      	subs	r0, r4, r0
    a926:	6038      	str	r0, [r7, #0]
    a928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a92c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    a92c:	b4f0      	push	{r4, r5, r6, r7}
    a92e:	ea80 0c01 	eor.w	ip, r0, r1
    a932:	4603      	mov	r3, r0
    a934:	f01c 0f03 	tst.w	ip, #3
    a938:	d13c      	bne.n	a9b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a93a:	f013 0f03 	tst.w	r3, #3
    a93e:	d00b      	beq.n	a958 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a940:	2a00      	cmp	r2, #0
    a942:	bf04      	itt	eq
    a944:	bcf0      	popeq	{r4, r5, r6, r7}
    a946:	4770      	bxeq	lr
    a948:	f811 cb01 	ldrb.w	ip, [r1], #1
    a94c:	f803 cb01 	strb.w	ip, [r3], #1
    a950:	1e52      	subs	r2, r2, #1
    a952:	f013 0f03 	tst.w	r3, #3
    a956:	d1f3      	bne.n	a940 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a958:	2a03      	cmp	r2, #3
    a95a:	d94f      	bls.n	a9fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a960:	d24c      	bcs.n	a9fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a962:	f1c2 0c00 	rsb	ip, r2, #0
    a966:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a96a:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a96e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a972:	f1cc 0c00 	rsb	ip, ip, #0
    a976:	f1bc 0f00 	cmp.w	ip, #0
    a97a:	dd1b      	ble.n	a9b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a97c:	1f0d      	subs	r5, r1, #4
    a97e:	1f1c      	subs	r4, r3, #4
    a980:	f01c 0f01 	tst.w	ip, #1
    a984:	d003      	beq.n	a98e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a986:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a98a:	f844 6f04 	str.w	r6, [r4, #4]!
    a98e:	ea5f 066c 	movs.w	r6, ip, asr #1
    a992:	d007      	beq.n	a9a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a994:	686f      	ldr	r7, [r5, #4]
    a996:	6067      	str	r7, [r4, #4]
    a998:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a99c:	f844 7f08 	str.w	r7, [r4, #8]!
    a9a0:	1e76      	subs	r6, r6, #1
    a9a2:	d1f7      	bne.n	a994 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a9a4:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a9a8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a9ac:	f1cc 0c00 	rsb	ip, ip, #0
    a9b0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a9b4:	2a00      	cmp	r2, #0
    a9b6:	bf04      	itt	eq
    a9b8:	bcf0      	popeq	{r4, r5, r6, r7}
    a9ba:	4770      	bxeq	lr
    a9bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a9c0:	d226      	bcs.n	aa10 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a9c2:	2a00      	cmp	r2, #0
    a9c4:	bfdc      	itt	le
    a9c6:	bcf0      	pople	{r4, r5, r6, r7}
    a9c8:	4770      	bxle	lr
    a9ca:	1e49      	subs	r1, r1, #1
    a9cc:	1e5b      	subs	r3, r3, #1
    a9ce:	f012 0f01 	tst.w	r2, #1
    a9d2:	d003      	beq.n	a9dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a9d4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a9d8:	f803 cf01 	strb.w	ip, [r3, #1]!
    a9dc:	1052      	asrs	r2, r2, #1
    a9de:	bf04      	itt	eq
    a9e0:	bcf0      	popeq	{r4, r5, r6, r7}
    a9e2:	4770      	bxeq	lr
    a9e4:	f891 c001 	ldrb.w	ip, [r1, #1]
    a9e8:	f883 c001 	strb.w	ip, [r3, #1]
    a9ec:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a9f0:	f803 cf02 	strb.w	ip, [r3, #2]!
    a9f4:	1e52      	subs	r2, r2, #1
    a9f6:	d1f5      	bne.n	a9e4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a9f8:	bcf0      	pop	{r4, r5, r6, r7}
    a9fa:	4770      	bx	lr
    a9fc:	2a04      	cmp	r2, #4
    a9fe:	d3d9      	bcc.n	a9b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    aa00:	f851 cb04 	ldr.w	ip, [r1], #4
    aa04:	1f12      	subs	r2, r2, #4
    aa06:	f843 cb04 	str.w	ip, [r3], #4
    aa0a:	2a04      	cmp	r2, #4
    aa0c:	d2f8      	bcs.n	aa00 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    aa0e:	e7d1      	b.n	a9b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    aa10:	f811 cb01 	ldrb.w	ip, [r1], #1
    aa14:	f803 cb01 	strb.w	ip, [r3], #1
    aa18:	1e52      	subs	r2, r2, #1
    aa1a:	d1f9      	bne.n	aa10 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    aa1c:	bcf0      	pop	{r4, r5, r6, r7}
    aa1e:	4770      	bx	lr

0000aa20 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    aa20:	b470      	push	{r4, r5, r6}
    aa22:	4603      	mov	r3, r0
    aa24:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    aa28:	f010 0f03 	tst.w	r0, #3
    aa2c:	d009      	beq.n	aa42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    aa2e:	2a00      	cmp	r2, #0
    aa30:	bf04      	itt	eq
    aa32:	bc70      	popeq	{r4, r5, r6}
    aa34:	4770      	bxeq	lr
    aa36:	f803 cb01 	strb.w	ip, [r3], #1
    aa3a:	1e52      	subs	r2, r2, #1
    aa3c:	f013 0f03 	tst.w	r3, #3
    aa40:	d1f5      	bne.n	aa2e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    aa42:	b2c9      	uxtb	r1, r1
    aa44:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    aa48:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    aa4c:	2a03      	cmp	r2, #3
    aa4e:	d939      	bls.n	aac4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    aa50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    aa54:	d236      	bcs.n	aac4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    aa56:	4251      	negs	r1, r2
    aa58:	17cc      	asrs	r4, r1, #31
    aa5a:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    aa5e:	1089      	asrs	r1, r1, #2
    aa60:	424e      	negs	r6, r1
    aa62:	2e00      	cmp	r6, #0
    aa64:	dd11      	ble.n	aa8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    aa66:	1f19      	subs	r1, r3, #4
    aa68:	f016 0f01 	tst.w	r6, #1
    aa6c:	bf18      	it	ne
    aa6e:	f841 5f04 	strne.w	r5, [r1, #4]!
    aa72:	1074      	asrs	r4, r6, #1
    aa74:	d004      	beq.n	aa80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    aa76:	604d      	str	r5, [r1, #4]
    aa78:	f841 5f08 	str.w	r5, [r1, #8]!
    aa7c:	1e64      	subs	r4, r4, #1
    aa7e:	d1fa      	bne.n	aa76 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    aa80:	4271      	negs	r1, r6
    aa82:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    aa86:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    aa8a:	2a00      	cmp	r2, #0
    aa8c:	bf04      	itt	eq
    aa8e:	bc70      	popeq	{r4, r5, r6}
    aa90:	4770      	bxeq	lr
    aa92:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    aa96:	d21d      	bcs.n	aad4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    aa98:	2a00      	cmp	r2, #0
    aa9a:	bfdc      	itt	le
    aa9c:	bc70      	pople	{r4, r5, r6}
    aa9e:	4770      	bxle	lr
    aaa0:	1e59      	subs	r1, r3, #1
    aaa2:	f012 0f01 	tst.w	r2, #1
    aaa6:	bf18      	it	ne
    aaa8:	f801 cf01 	strbne.w	ip, [r1, #1]!
    aaac:	1052      	asrs	r2, r2, #1
    aaae:	bf04      	itt	eq
    aab0:	bc70      	popeq	{r4, r5, r6}
    aab2:	4770      	bxeq	lr
    aab4:	f881 c001 	strb.w	ip, [r1, #1]
    aab8:	f801 cf02 	strb.w	ip, [r1, #2]!
    aabc:	1e52      	subs	r2, r2, #1
    aabe:	d1f9      	bne.n	aab4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    aac0:	bc70      	pop	{r4, r5, r6}
    aac2:	4770      	bx	lr
    aac4:	2a04      	cmp	r2, #4
    aac6:	d3e0      	bcc.n	aa8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    aac8:	1f12      	subs	r2, r2, #4
    aaca:	f843 5b04 	str.w	r5, [r3], #4
    aace:	2a04      	cmp	r2, #4
    aad0:	d2fa      	bcs.n	aac8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    aad2:	e7da      	b.n	aa8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    aad4:	f803 cb01 	strb.w	ip, [r3], #1
    aad8:	1e52      	subs	r2, r2, #1
    aada:	d1fb      	bne.n	aad4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    aadc:	bc70      	pop	{r4, r5, r6}
    aade:	4770      	bx	lr
    aae0:	f04f 30ff 	mov.w	r0, #4294967295
    aae4:	4770      	bx	lr
    aae6:	2000      	movs	r0, #0
    aae8:	4770      	bx	lr
    aaea:	2000      	movs	r0, #0
    aaec:	4770      	bx	lr
    aaee:	f04f 30ff 	mov.w	r0, #4294967295
    aaf2:	4770      	bx	lr
    aaf4:	4770      	bx	lr
    aaf6:	4770      	bx	lr
    aaf8:	2000      	movs	r0, #0
    aafa:	4770      	bx	lr
    aafc:	2100      	movs	r1, #0
    aafe:	7001      	strb	r1, [r0, #0]
    ab00:	4770      	bx	lr
    ab02:	f04f 30ff 	mov.w	r0, #4294967295
    ab06:	4770      	bx	lr
    ab08:	f04f 30ff 	mov.w	r0, #4294967295
    ab0c:	4770      	bx	lr
    ab0e:	2100      	movs	r1, #0
    ab10:	7001      	strb	r1, [r0, #0]
    ab12:	4770      	bx	lr
    ab14:	f04f 30ff 	mov.w	r0, #4294967295
    ab18:	4770      	bx	lr
    ab1a:	f04f 30ff 	mov.w	r0, #4294967295
    ab1e:	4770      	bx	lr
    ab20:	7800      	ldrb	r0, [r0, #0]
    ab22:	2800      	cmp	r0, #0
    ab24:	d001      	beq.n	ab2a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    ab26:	f06f 0015 	mvn.w	r0, #21
    ab2a:	4770      	bx	lr
    ab2c:	2000      	movs	r0, #0
    ab2e:	4770      	bx	lr
    ab30:	2200      	movs	r2, #0
    ab32:	f000 b802 	b.w	ab3a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000ab36 <mpsl_fem_init>:
    ab36:	f7fa b8a7 	b.w	4c88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000ab3a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    ab3a:	b570      	push	{r4, r5, r6, lr}
    ab3c:	4614      	mov	r4, r2
    ab3e:	460d      	mov	r5, r1
    ab40:	1b00      	subs	r0, r0, r4
    ab42:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    ab46:	4288      	cmp	r0, r1
    ab48:	da01      	bge.n	ab4e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    ab4a:	4608      	mov	r0, r1
    ab4c:	e002      	b.n	ab54 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    ab4e:	287f      	cmp	r0, #127	; 0x7f
    ab50:	dd00      	ble.n	ab54 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    ab52:	207f      	movs	r0, #127	; 0x7f
    ab54:	4619      	mov	r1, r3
    ab56:	b240      	sxtb	r0, r0
    ab58:	f7fa f8ca 	bl	4cf0 <mpsl_tx_power_radio_supported_power_adjust>
    ab5c:	7028      	strb	r0, [r5, #0]
    ab5e:	706c      	strb	r4, [r5, #1]
    ab60:	2100      	movs	r1, #0
    ab62:	4420      	add	r0, r4
    ab64:	70a9      	strb	r1, [r5, #2]
    ab66:	b240      	sxtb	r0, r0
    ab68:	bd70      	pop	{r4, r5, r6, pc}
    ab6a:	2625      	.short	0x2625
    ab6c:	27          	.byte	0x27
    ab6d:	01          	.byte	0x01
    ab6e:	0103      	.short	0x0103
    ab70:	01          	.byte	0x01
    ab71:	01          	.byte	0x01
    ab72:	ecd8      	.short	0xecd8
    ab74:	fcf8f4f0 	.word	0xfcf8f4f0
    ab78:	04030200 	.word	0x04030200
    ab7c:	08070605 	.word	0x08070605
	...
    ab94:	01010101 	.word	0x01010101
    ab98:	02020202 	.word	0x02020202
    ab9c:	03030303 	.word	0x03030303
    aba0:	04040404 	.word	0x04040404
    aba4:	05050505 	.word	0x05050505
    aba8:	08070606 	.word	0x08070606
    abac:	0c0b0a09 	.word	0x0c0b0a09
    abb0:	0000000d 	.word	0x0000000d
	...
    abc4:	01010100 	.word	0x01010100
    abc8:	02020201 	.word	0x02020201
    abcc:	03030302 	.word	0x03030302
    abd0:	04040403 	.word	0x04040403
    abd4:	05050504 	.word	0x05050504
    abd8:	06060605 	.word	0x06060605
    abdc:	00000908 	.word	0x00000908

0000abe0 <main>:
extern int32_t three_volt_supply_voltage_mv;
extern int32_t five_volt_supply_voltage_mv;
extern int32_t vamp_supply_voltage_mv;

int main(void)
{
    abe0:	b508      	push	{r3, lr}
	int err;

	gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);		// 
    abe2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    abe6:	482a      	ldr	r0, [pc, #168]	; (ac90 <main+0xb0>)
    abe8:	f006 ffe8 	bl	11bbc <gpio_pin_configure_dt>

	printk("Start");
    abec:	4829      	ldr	r0, [pc, #164]	; (ac94 <main+0xb4>)
    abee:	f007 f97d 	bl	11eec <printk>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    abf2:	2201      	movs	r2, #1
    abf4:	210d      	movs	r1, #13
    abf6:	4828      	ldr	r0, [pc, #160]	; (ac98 <main+0xb8>)
    abf8:	f006 fffb 	bl	11bf2 <gpio_pin_set>

	gpio_pin_set_dt(&led, 1);

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    abfc:	2000      	movs	r0, #0
    abfe:	f002 fb37 	bl	d270 <bt_enable>
	if (err) {
    ac02:	2800      	cmp	r0, #0
    ac04:	d13e      	bne.n	ac84 <main+0xa4>

	
	// gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);

	
	gpio_pin_toggle_dt(&led);
    ac06:	4822      	ldr	r0, [pc, #136]	; (ac90 <main+0xb0>)
    ac08:	f007 f800 	bl	11c0c <gpio_pin_toggle_dt>

    // Start observer
	(void)observer_start();
    ac0c:	f000 f932 	bl	ae74 <observer_start>

    // Init peripherals (ADS and programmable load)
    perihperals_init();
    ac10:	f007 f8e5 	bl	11dde <perihperals_init>

	// Set prereg on 10V
	peripherals_set_pre_reg_voltage(4000);
    ac14:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    ac18:	f000 fb46 	bl	b2a8 <peripherals_set_pre_reg_voltage>

	while (1)
	{
		gpio_pin_toggle_dt(&led);
    ac1c:	481c      	ldr	r0, [pc, #112]	; (ac90 <main+0xb0>)
    ac1e:	f006 fff5 	bl	11c0c <gpio_pin_toggle_dt>
		k_msleep(500);
    ac22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    ac26:	f006 fffb 	bl	11c20 <k_msleep>

        peripherals_update_all_ads1115_channels();
    ac2a:	f000 fbad 	bl	b388 <peripherals_update_all_ads1115_channels>

		printk("\n");
    ac2e:	481b      	ldr	r0, [pc, #108]	; (ac9c <main+0xbc>)
    ac30:	f007 f95c 	bl	11eec <printk>
		printk("uav_battery_voltage_mv: %d\n", uav_battery_voltage_mv);
    ac34:	4b1a      	ldr	r3, [pc, #104]	; (aca0 <main+0xc0>)
    ac36:	f9b3 1000 	ldrsh.w	r1, [r3]
    ac3a:	481a      	ldr	r0, [pc, #104]	; (aca4 <main+0xc4>)
    ac3c:	f007 f956 	bl	11eec <printk>
		printk("uav_current_ma: %d\n", uav_current_ma);
    ac40:	4b19      	ldr	r3, [pc, #100]	; (aca8 <main+0xc8>)
    ac42:	f9b3 1000 	ldrsh.w	r1, [r3]
    ac46:	4819      	ldr	r0, [pc, #100]	; (acac <main+0xcc>)
    ac48:	f007 f950 	bl	11eec <printk>
		printk("pre_reg_input_current_ma: %d\n", pre_reg_input_current_ma);
    ac4c:	4b18      	ldr	r3, [pc, #96]	; (acb0 <main+0xd0>)
    ac4e:	f9b3 1000 	ldrsh.w	r1, [r3]
    ac52:	4818      	ldr	r0, [pc, #96]	; (acb4 <main+0xd4>)
    ac54:	f007 f94a 	bl	11eec <printk>
		printk("pre_reg_output_current_ma: %d\n", pre_reg_output_current_ma);
    ac58:	4b17      	ldr	r3, [pc, #92]	; (acb8 <main+0xd8>)
    ac5a:	f9b3 1000 	ldrsh.w	r1, [r3]
    ac5e:	4817      	ldr	r0, [pc, #92]	; (acbc <main+0xdc>)
    ac60:	f007 f944 	bl	11eec <printk>

		printk("three_volt_supply_voltage_mv: %d\n", three_volt_supply_voltage_mv);
    ac64:	4b16      	ldr	r3, [pc, #88]	; (acc0 <main+0xe0>)
    ac66:	6819      	ldr	r1, [r3, #0]
    ac68:	4816      	ldr	r0, [pc, #88]	; (acc4 <main+0xe4>)
    ac6a:	f007 f93f 	bl	11eec <printk>
		printk("five_volt_supply_voltage_mv: %d\n", five_volt_supply_voltage_mv);
    ac6e:	4b16      	ldr	r3, [pc, #88]	; (acc8 <main+0xe8>)
    ac70:	6819      	ldr	r1, [r3, #0]
    ac72:	4816      	ldr	r0, [pc, #88]	; (accc <main+0xec>)
    ac74:	f007 f93a 	bl	11eec <printk>
		printk("vamp_supply_voltage_mv: %d\n", vamp_supply_voltage_mv);
    ac78:	4b15      	ldr	r3, [pc, #84]	; (acd0 <main+0xf0>)
    ac7a:	6819      	ldr	r1, [r3, #0]
    ac7c:	4815      	ldr	r0, [pc, #84]	; (acd4 <main+0xf4>)
    ac7e:	f007 f935 	bl	11eec <printk>
	while (1)
    ac82:	e7cb      	b.n	ac1c <main+0x3c>
    ac84:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    ac86:	4814      	ldr	r0, [pc, #80]	; (acd8 <main+0xf8>)
    ac88:	f007 f930 	bl	11eec <printk>
	}


	printk("Exiting %s thread.\n", __func__);
	return 0;
}
    ac8c:	2000      	movs	r0, #0
    ac8e:	bd08      	pop	{r3, pc}
    ac90:	00015f48 	.word	0x00015f48
    ac94:	00015e38 	.word	0x00015e38
    ac98:	00015b08 	.word	0x00015b08
    ac9c:	000160e0 	.word	0x000160e0
    aca0:	200021c8 	.word	0x200021c8
    aca4:	00015e60 	.word	0x00015e60
    aca8:	200021c6 	.word	0x200021c6
    acac:	00015e7c 	.word	0x00015e7c
    acb0:	200021c4 	.word	0x200021c4
    acb4:	00015e90 	.word	0x00015e90
    acb8:	200021c2 	.word	0x200021c2
    acbc:	00015eb0 	.word	0x00015eb0
    acc0:	20001a98 	.word	0x20001a98
    acc4:	00015ed0 	.word	0x00015ed0
    acc8:	20001a94 	.word	0x20001a94
    accc:	00015ef4 	.word	0x00015ef4
    acd0:	20001a90 	.word	0x20001a90
    acd4:	00015f18 	.word	0x00015f18
    acd8:	00015e40 	.word	0x00015e40

0000acdc <extract_data>:
uint16_t input_voltage_mv;
uint16_t supply_voltage_mv;
uint16_t buck_current_ma;

static void extract_data(uint8_t *buffer, uint8_t len){
	input_voltage_mv = *(buffer + 17) << 8 | *(buffer + 18);
    acdc:	7c42      	ldrb	r2, [r0, #17]
    acde:	7c83      	ldrb	r3, [r0, #18]
    ace0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ace4:	4a07      	ldr	r2, [pc, #28]	; (ad04 <extract_data+0x28>)
    ace6:	8013      	strh	r3, [r2, #0]
	supply_voltage_mv = *(buffer + 19) << 8 | *(buffer + 20);
    ace8:	7cc2      	ldrb	r2, [r0, #19]
    acea:	7d03      	ldrb	r3, [r0, #20]
    acec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acf0:	4a05      	ldr	r2, [pc, #20]	; (ad08 <extract_data+0x2c>)
    acf2:	8013      	strh	r3, [r2, #0]
	buck_current_ma = *(buffer + 21) << 8 | *(buffer + 22);
    acf4:	7d42      	ldrb	r2, [r0, #21]
    acf6:	7d83      	ldrb	r3, [r0, #22]
    acf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acfc:	4a03      	ldr	r2, [pc, #12]	; (ad0c <extract_data+0x30>)
    acfe:	8013      	strh	r3, [r2, #0]
}
    ad00:	4770      	bx	lr
    ad02:	bf00      	nop
    ad04:	200021bc 	.word	0x200021bc
    ad08:	200021ba 	.word	0x200021ba
    ad0c:	200021b8 	.word	0x200021b8

0000ad10 <print_buffer>:

static void print_buffer(uint8_t *buffer, uint8_t len){
    ad10:	b570      	push	{r4, r5, r6, lr}
    ad12:	4606      	mov	r6, r0
    ad14:	460d      	mov	r5, r1
	// Print full message
	for (size_t i = 0; i < len; i++) {
    ad16:	2400      	movs	r4, #0
    ad18:	e004      	b.n	ad24 <print_buffer+0x14>
        printk("%02X ", *(buffer + i));
    ad1a:	5d31      	ldrb	r1, [r6, r4]
    ad1c:	4804      	ldr	r0, [pc, #16]	; (ad30 <print_buffer+0x20>)
    ad1e:	f007 f8e5 	bl	11eec <printk>
	for (size_t i = 0; i < len; i++) {
    ad22:	3401      	adds	r4, #1
    ad24:	42a5      	cmp	r5, r4
    ad26:	d8f8      	bhi.n	ad1a <print_buffer+0xa>
    }
	printk("\n");	
    ad28:	4802      	ldr	r0, [pc, #8]	; (ad34 <print_buffer+0x24>)
    ad2a:	f007 f8df 	bl	11eec <printk>
}
    ad2e:	bd70      	pop	{r4, r5, r6, pc}
    ad30:	00015f50 	.word	0x00015f50
    ad34:	000160e0 	.word	0x000160e0

0000ad38 <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
    ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad3a:	b08b      	sub	sp, #44	; 0x2c
    ad3c:	4604      	mov	r4, r0
    ad3e:	460d      	mov	r5, r1
    ad40:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
    ad42:	7803      	ldrb	r3, [r0, #0]
    ad44:	2b03      	cmp	r3, #3
    ad46:	d82c      	bhi.n	ada2 <bt_addr_le_to_str+0x6a>
    ad48:	e8df f003 	tbb	[pc, r3]
    ad4c:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ad50:	4917      	ldr	r1, [pc, #92]	; (adb0 <bt_addr_le_to_str+0x78>)
    ad52:	a807      	add	r0, sp, #28
    ad54:	f007 ffb6 	bl	12cc4 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    ad58:	7963      	ldrb	r3, [r4, #5]
    ad5a:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    ad5c:	78e1      	ldrb	r1, [r4, #3]
    ad5e:	78a0      	ldrb	r0, [r4, #2]
    ad60:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ad62:	f10d 0c1c 	add.w	ip, sp, #28
    ad66:	f8cd c014 	str.w	ip, [sp, #20]
    ad6a:	9704      	str	r7, [sp, #16]
    ad6c:	9003      	str	r0, [sp, #12]
    ad6e:	9102      	str	r1, [sp, #8]
    ad70:	9201      	str	r2, [sp, #4]
    ad72:	9300      	str	r3, [sp, #0]
    ad74:	79a3      	ldrb	r3, [r4, #6]
    ad76:	4a0f      	ldr	r2, [pc, #60]	; (adb4 <bt_addr_le_to_str+0x7c>)
    ad78:	4631      	mov	r1, r6
    ad7a:	4628      	mov	r0, r5
    ad7c:	f007 f8c4 	bl	11f08 <snprintk>
}
    ad80:	b00b      	add	sp, #44	; 0x2c
    ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    ad84:	490c      	ldr	r1, [pc, #48]	; (adb8 <bt_addr_le_to_str+0x80>)
    ad86:	a807      	add	r0, sp, #28
    ad88:	f007 ff9c 	bl	12cc4 <strcpy>
		break;
    ad8c:	e7e4      	b.n	ad58 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
    ad8e:	490b      	ldr	r1, [pc, #44]	; (adbc <bt_addr_le_to_str+0x84>)
    ad90:	a807      	add	r0, sp, #28
    ad92:	f007 ff97 	bl	12cc4 <strcpy>
		break;
    ad96:	e7df      	b.n	ad58 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
    ad98:	4909      	ldr	r1, [pc, #36]	; (adc0 <bt_addr_le_to_str+0x88>)
    ad9a:	a807      	add	r0, sp, #28
    ad9c:	f007 ff92 	bl	12cc4 <strcpy>
		break;
    ada0:	e7da      	b.n	ad58 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ada2:	4a08      	ldr	r2, [pc, #32]	; (adc4 <bt_addr_le_to_str+0x8c>)
    ada4:	210a      	movs	r1, #10
    ada6:	a807      	add	r0, sp, #28
    ada8:	f007 f8ae 	bl	11f08 <snprintk>
		break;
    adac:	e7d4      	b.n	ad58 <bt_addr_le_to_str+0x20>
    adae:	bf00      	nop
    adb0:	00015f58 	.word	0x00015f58
    adb4:	00015f88 	.word	0x00015f88
    adb8:	00015f60 	.word	0x00015f60
    adbc:	00015f68 	.word	0x00015f68
    adc0:	00015f74 	.word	0x00015f74
    adc4:	00015f80 	.word	0x00015f80

0000adc8 <device_found>:

static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{
    adc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adcc:	b092      	sub	sp, #72	; 0x48
    adce:	4680      	mov	r8, r0
    add0:	460e      	mov	r6, r1
    add2:	4617      	mov	r7, r2
    add4:	461c      	mov	r4, r3
	char addr_str[BT_ADDR_LE_STR_LEN];

	// Desired - buffer name rx adv
	char ds_name_buffer [] = RX_DEVICE_NAME;
    add6:	4d1f      	ldr	r5, [pc, #124]	; (ae54 <device_found+0x8c>)
    add8:	f10d 0c0c 	add.w	ip, sp, #12
    addc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ade0:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    ade4:	f88c 3000 	strb.w	r3, [ip]
	uint8_t buffer_cmp_len = sizeof(ds_name_buffer) - 1;

	// Scanned - buffer name rx adv
	char sc_name_buffer [buffer_cmp_len];
	memcpy(sc_name_buffer, ad->data + 2, buffer_cmp_len);
    ade8:	6821      	ldr	r1, [r4, #0]
    adea:	220c      	movs	r2, #12
    adec:	3102      	adds	r1, #2
    adee:	a80f      	add	r0, sp, #60	; 0x3c
    adf0:	f007 ffb1 	bl	12d56 <memcpy>
	// Print buffers to check similarity
	// print_buffer(ds_name_buffer, buffer_cmp_len);
	// print_buffer(sc_name_buffer, buffer_cmp_len);

	// Compare both buffer
	int result = memcmp(ds_name_buffer, sc_name_buffer, buffer_cmp_len);
    adf4:	220c      	movs	r2, #12
    adf6:	a90f      	add	r1, sp, #60	; 0x3c
    adf8:	eb0d 0002 	add.w	r0, sp, r2
    adfc:	f007 ff99 	bl	12d32 <memcmp>

	if(result == 0){
    ae00:	b110      	cbz	r0, ae08 <device_found+0x40>

		printk("input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
		printk("supply_voltage_mv: %"PRId32" mV\n", supply_voltage_mv);
		printk("buck_current_ma: %"PRId32" mA\n", buck_current_ma);
	}
}
    ae02:	b012      	add	sp, #72	; 0x48
    ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    ae08:	221e      	movs	r2, #30
    ae0a:	a907      	add	r1, sp, #28
    ae0c:	4640      	mov	r0, r8
    ae0e:	f7ff ff93 	bl	ad38 <bt_addr_le_to_str>
			addr_str, rssi, type, ad->len);
    ae12:	88a3      	ldrh	r3, [r4, #4]
		printk("Device found: %s (RSSI %d), type %u, AD data len %u\n",
    ae14:	9300      	str	r3, [sp, #0]
    ae16:	463b      	mov	r3, r7
    ae18:	4632      	mov	r2, r6
    ae1a:	a907      	add	r1, sp, #28
    ae1c:	480e      	ldr	r0, [pc, #56]	; (ae58 <device_found+0x90>)
    ae1e:	f007 f865 	bl	11eec <printk>
		print_buffer(ad->data, ad->len);
    ae22:	7921      	ldrb	r1, [r4, #4]
    ae24:	6820      	ldr	r0, [r4, #0]
    ae26:	f7ff ff73 	bl	ad10 <print_buffer>
		extract_data(ad->data, ad->len);
    ae2a:	7921      	ldrb	r1, [r4, #4]
    ae2c:	6820      	ldr	r0, [r4, #0]
    ae2e:	f7ff ff55 	bl	acdc <extract_data>
		printk("input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
    ae32:	4b0a      	ldr	r3, [pc, #40]	; (ae5c <device_found+0x94>)
    ae34:	8819      	ldrh	r1, [r3, #0]
    ae36:	480a      	ldr	r0, [pc, #40]	; (ae60 <device_found+0x98>)
    ae38:	f007 f858 	bl	11eec <printk>
		printk("supply_voltage_mv: %"PRId32" mV\n", supply_voltage_mv);
    ae3c:	4b09      	ldr	r3, [pc, #36]	; (ae64 <device_found+0x9c>)
    ae3e:	8819      	ldrh	r1, [r3, #0]
    ae40:	4809      	ldr	r0, [pc, #36]	; (ae68 <device_found+0xa0>)
    ae42:	f007 f853 	bl	11eec <printk>
		printk("buck_current_ma: %"PRId32" mA\n", buck_current_ma);
    ae46:	4b09      	ldr	r3, [pc, #36]	; (ae6c <device_found+0xa4>)
    ae48:	8819      	ldrh	r1, [r3, #0]
    ae4a:	4809      	ldr	r0, [pc, #36]	; (ae70 <device_found+0xa8>)
    ae4c:	f007 f84e 	bl	11eec <printk>
}
    ae50:	e7d7      	b.n	ae02 <device_found+0x3a>
    ae52:	bf00      	nop
    ae54:	00016034 	.word	0x00016034
    ae58:	00015fac 	.word	0x00015fac
    ae5c:	200021bc 	.word	0x200021bc
    ae60:	00015fe4 	.word	0x00015fe4
    ae64:	200021ba 	.word	0x200021ba
    ae68:	00016000 	.word	0x00016000
    ae6c:	200021b8 	.word	0x200021b8
    ae70:	0001601c 	.word	0x0001601c

0000ae74 <observer_start>:


int observer_start(void)
{
    ae74:	b510      	push	{r4, lr}
    ae76:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    ae78:	2300      	movs	r3, #0
    ae7a:	9301      	str	r3, [sp, #4]
    ae7c:	9302      	str	r3, [sp, #8]
    ae7e:	9303      	str	r3, [sp, #12]
    ae80:	9304      	str	r3, [sp, #16]
    ae82:	9305      	str	r3, [sp, #20]
    ae84:	2301      	movs	r3, #1
    ae86:	9302      	str	r3, [sp, #8]
    ae88:	2360      	movs	r3, #96	; 0x60
    ae8a:	f8ad 300c 	strh.w	r3, [sp, #12]
    ae8e:	2330      	movs	r3, #48	; 0x30
    ae90:	f8ad 300e 	strh.w	r3, [sp, #14]
	};
	int err;


	// while(1){
	err = bt_le_scan_start(&scan_param, device_found);
    ae94:	4908      	ldr	r1, [pc, #32]	; (aeb8 <observer_start+0x44>)
    ae96:	a801      	add	r0, sp, #4
    ae98:	f002 fd68 	bl	d96c <bt_le_scan_start>
	if (err) {
    ae9c:	4604      	mov	r4, r0
    ae9e:	b928      	cbnz	r0, aeac <observer_start+0x38>
		printk("Start scanning failed (err %d)\n", err);
		return err;
	}
	printk("Started scanning...\n");
    aea0:	4806      	ldr	r0, [pc, #24]	; (aebc <observer_start+0x48>)
    aea2:	f007 f823 	bl	11eec <printk>

	// 	k_msleep(1000);
	// }

	return 0;
    aea6:	4620      	mov	r0, r4
    aea8:	b006      	add	sp, #24
    aeaa:	bd10      	pop	{r4, pc}
		printk("Start scanning failed (err %d)\n", err);
    aeac:	4601      	mov	r1, r0
    aeae:	4804      	ldr	r0, [pc, #16]	; (aec0 <observer_start+0x4c>)
    aeb0:	f007 f81c 	bl	11eec <printk>
		return err;
    aeb4:	e7f7      	b.n	aea6 <observer_start+0x32>
    aeb6:	bf00      	nop
    aeb8:	0000adc9 	.word	0x0000adc9
    aebc:	00016064 	.word	0x00016064
    aec0:	00016044 	.word	0x00016044

0000aec4 <ads1115_set_measure_mode>:
convRate ads1115_get_conv_rate(){
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    return (convRate)(currentConfReg & 0xE0);
}
    
void ads1115_set_measure_mode(measureMode mode){
    aec4:	b510      	push	{r4, lr}
    aec6:	4604      	mov	r4, r0
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    aec8:	2001      	movs	r0, #1
    aeca:	f006 ff0d 	bl	11ce8 <read_register>
    deviceMeasureMode = mode;
    aece:	4b05      	ldr	r3, [pc, #20]	; (aee4 <ads1115_set_measure_mode+0x20>)
    aed0:	801c      	strh	r4, [r3, #0]
    currentConfReg &= ~(0x8100);    
    aed2:	f647 61ff 	movw	r1, #32511	; 0x7eff
    aed6:	4001      	ands	r1, r0
    currentConfReg |= mode;
    write_register(ADS1115_CONFIG_REG, currentConfReg);
    aed8:	4321      	orrs	r1, r4
    aeda:	2001      	movs	r0, #1
    aedc:	f006 ff23 	bl	11d26 <write_register>
}
    aee0:	bd10      	pop	{r4, pc}
    aee2:	bf00      	nop
    aee4:	200021be 	.word	0x200021be

0000aee8 <ads1115_set_voltage_range_mV>:

void ads1115_set_voltage_range_mV(range range){
    aee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aeec:	4604      	mov	r4, r0
    uint16_t currentVoltageRange = voltageRange;
    aeee:	4b48      	ldr	r3, [pc, #288]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    aef0:	881f      	ldrh	r7, [r3, #0]
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    aef2:	2001      	movs	r0, #1
    aef4:	f006 fef8 	bl	11ce8 <read_register>
    aef8:	4605      	mov	r5, r0
    uint16_t currentRange = (currentConfReg >> 9) & 7;
    aefa:	f3c0 2842 	ubfx	r8, r0, #9, #3
    uint16_t currentAlertPinMode = currentConfReg & 3;
    aefe:	f000 0603 	and.w	r6, r0, #3
    
    ads1115_set_measure_mode(ADS1115_SINGLE);
    af02:	f44f 7080 	mov.w	r0, #256	; 0x100
    af06:	f7ff ffdd 	bl	aec4 <ads1115_set_measure_mode>
    
    switch(range){
    af0a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
    af0e:	d031      	beq.n	af74 <ads1115_set_voltage_range_mV+0x8c>
    af10:	d820      	bhi.n	af54 <ads1115_set_voltage_range_mV+0x6c>
    af12:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    af16:	d028      	beq.n	af6a <ads1115_set_voltage_range_mV+0x82>
    af18:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    af1c:	d104      	bne.n	af28 <ads1115_set_voltage_range_mV+0x40>
            break;
        case ADS1115_RANGE_4096:
            voltageRange = 4096;
            break;
        case ADS1115_RANGE_2048:
            voltageRange = 2048;
    af1e:	4b3c      	ldr	r3, [pc, #240]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    af20:	f44f 6200 	mov.w	r2, #2048	; 0x800
    af24:	801a      	strh	r2, [r3, #0]
        case ADS1115_RANGE_0256:
            voltageRange = 256;
            break;
    }
    
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    af26:	e006      	b.n	af36 <ads1115_set_voltage_range_mV+0x4e>
    switch(range){
    af28:	b91c      	cbnz	r4, af32 <ads1115_set_voltage_range_mV+0x4a>
            voltageRange = 6144;
    af2a:	4b39      	ldr	r3, [pc, #228]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    af2c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    af30:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    af32:	45a0      	cmp	r8, r4
    af34:	d001      	beq.n	af3a <ads1115_set_voltage_range_mV+0x52>
    af36:	2e03      	cmp	r6, #3
    af38:	d126      	bne.n	af88 <ads1115_set_voltage_range_mV+0xa0>
        alertLimit = read_register(ADS1115_LO_THRESH_REG);
        alertLimit = alertLimit * (currentVoltageRange * 1.0 / voltageRange);
        write_register(ADS1115_LO_THRESH_REG, alertLimit);
    }
    
    currentConfReg &= ~(0x8E00);    
    af3a:	f247 11ff 	movw	r1, #29183	; 0x71ff
    af3e:	4029      	ands	r1, r5
    currentConfReg |= range;
    write_register(ADS1115_CONFIG_REG, currentConfReg);
    af40:	4321      	orrs	r1, r4
    af42:	2001      	movs	r0, #1
    af44:	f006 feef 	bl	11d26 <write_register>
    convRate rate = ads1115_get_conv_rate();
    af48:	f006 fede 	bl	11d08 <ads1115_get_conv_rate>
    ads1115_delay_acc_to_rate(rate);
    af4c:	f006 fe9a 	bl	11c84 <ads1115_delay_acc_to_rate>
}
    af50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(range){
    af54:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    af58:	d011      	beq.n	af7e <ads1115_set_voltage_range_mV+0x96>
    af5a:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
    af5e:	d1e8      	bne.n	af32 <ads1115_set_voltage_range_mV+0x4a>
            voltageRange = 256;
    af60:	4b2b      	ldr	r3, [pc, #172]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    af62:	f44f 7280 	mov.w	r2, #256	; 0x100
    af66:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    af68:	e7e5      	b.n	af36 <ads1115_set_voltage_range_mV+0x4e>
            voltageRange = 4096;
    af6a:	4b29      	ldr	r3, [pc, #164]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    af6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    af70:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    af72:	e7e0      	b.n	af36 <ads1115_set_voltage_range_mV+0x4e>
            voltageRange = 1024;
    af74:	4b26      	ldr	r3, [pc, #152]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    af76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    af7a:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    af7c:	e7db      	b.n	af36 <ads1115_set_voltage_range_mV+0x4e>
            voltageRange = 512;
    af7e:	4b24      	ldr	r3, [pc, #144]	; (b010 <ads1115_set_voltage_range_mV+0x128>)
    af80:	f44f 7200 	mov.w	r2, #512	; 0x200
    af84:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    af86:	e7d6      	b.n	af36 <ads1115_set_voltage_range_mV+0x4e>
        int16_t alertLimit = read_register(ADS1115_HI_THRESH_REG);
    af88:	2003      	movs	r0, #3
    af8a:	f006 fead 	bl	11ce8 <read_register>
    af8e:	fa0f fb80 	sxth.w	fp, r0
        alertLimit = alertLimit * (currentVoltageRange * 1.0 / voltageRange);
    af92:	4638      	mov	r0, r7
    af94:	f7f5 f9f4 	bl	380 <__aeabi_i2d>
    af98:	4606      	mov	r6, r0
    af9a:	460f      	mov	r7, r1
    af9c:	f8df a070 	ldr.w	sl, [pc, #112]	; b010 <ads1115_set_voltage_range_mV+0x128>
    afa0:	f8ba 0000 	ldrh.w	r0, [sl]
    afa4:	f7f5 f9ec 	bl	380 <__aeabi_i2d>
    afa8:	4602      	mov	r2, r0
    afaa:	460b      	mov	r3, r1
    afac:	4630      	mov	r0, r6
    afae:	4639      	mov	r1, r7
    afb0:	f7f5 fb7a 	bl	6a8 <__aeabi_ddiv>
    afb4:	4680      	mov	r8, r0
    afb6:	4689      	mov	r9, r1
    afb8:	4658      	mov	r0, fp
    afba:	f7f5 f9e1 	bl	380 <__aeabi_i2d>
    afbe:	4642      	mov	r2, r8
    afc0:	464b      	mov	r3, r9
    afc2:	f7f5 fa47 	bl	454 <__aeabi_dmul>
    afc6:	f7f5 fc57 	bl	878 <__aeabi_d2iz>
        write_register(ADS1115_HI_THRESH_REG, alertLimit);
    afca:	b281      	uxth	r1, r0
    afcc:	2003      	movs	r0, #3
    afce:	f006 feaa 	bl	11d26 <write_register>
        alertLimit = read_register(ADS1115_LO_THRESH_REG);
    afd2:	2002      	movs	r0, #2
    afd4:	f006 fe88 	bl	11ce8 <read_register>
    afd8:	fa0f f880 	sxth.w	r8, r0
        alertLimit = alertLimit * (currentVoltageRange * 1.0 / voltageRange);
    afdc:	f8ba 0000 	ldrh.w	r0, [sl]
    afe0:	f7f5 f9ce 	bl	380 <__aeabi_i2d>
    afe4:	4602      	mov	r2, r0
    afe6:	460b      	mov	r3, r1
    afe8:	4630      	mov	r0, r6
    afea:	4639      	mov	r1, r7
    afec:	f7f5 fb5c 	bl	6a8 <__aeabi_ddiv>
    aff0:	4606      	mov	r6, r0
    aff2:	460f      	mov	r7, r1
    aff4:	4640      	mov	r0, r8
    aff6:	f7f5 f9c3 	bl	380 <__aeabi_i2d>
    affa:	4632      	mov	r2, r6
    affc:	463b      	mov	r3, r7
    affe:	f7f5 fa29 	bl	454 <__aeabi_dmul>
    b002:	f7f5 fc39 	bl	878 <__aeabi_d2iz>
        write_register(ADS1115_LO_THRESH_REG, alertLimit);
    b006:	b281      	uxth	r1, r0
    b008:	2002      	movs	r0, #2
    b00a:	f006 fe8c 	bl	11d26 <write_register>
    b00e:	e794      	b.n	af3a <ads1115_set_voltage_range_mV+0x52>
    b010:	200021c0 	.word	0x200021c0

0000b014 <ads1115_init>:
uint8_t ads1115_init(){    
    b014:	b508      	push	{r3, lr}
    uint8_t success = twowire_write(DEVICE_ADDRESS);
    b016:	2048      	movs	r0, #72	; 0x48
    b018:	f000 f8b0 	bl	b17c <twowire_write>
    if(success){
    b01c:	b108      	cbz	r0, b022 <ads1115_init+0xe>
        return 0;
    b01e:	2000      	movs	r0, #0
}
    b020:	bd08      	pop	{r3, pc}
    write_register(ADS1115_CONFIG_REG, ADS1115_REG_RESET_VAL);
    b022:	f248 5183 	movw	r1, #34179	; 0x8583
    b026:	2001      	movs	r0, #1
    b028:	f006 fe7d 	bl	11d26 <write_register>
    ads1115_set_voltage_range_mV(ADS1115_RANGE_2048);
    b02c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    b030:	f7ff ff5a 	bl	aee8 <ads1115_set_voltage_range_mV>
    write_register(ADS1115_LO_THRESH_REG, 0x8000);
    b034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b038:	2002      	movs	r0, #2
    b03a:	f006 fe74 	bl	11d26 <write_register>
    write_register(ADS1115_HI_THRESH_REG, 0x7FFF);
    b03e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    b042:	2003      	movs	r0, #3
    b044:	f006 fe6f 	bl	11d26 <write_register>
    deviceMeasureMode = ADS1115_SINGLE;
    b048:	4b04      	ldr	r3, [pc, #16]	; (b05c <ads1115_init+0x48>)
    b04a:	f44f 7280 	mov.w	r2, #256	; 0x100
    b04e:	801a      	strh	r2, [r3, #0]
    autoRangeMode = 0;
    b050:	4b03      	ldr	r3, [pc, #12]	; (b060 <ads1115_init+0x4c>)
    b052:	2200      	movs	r2, #0
    b054:	701a      	strb	r2, [r3, #0]
    return 1;
    b056:	2001      	movs	r0, #1
    b058:	e7e2      	b.n	b020 <ads1115_init+0xc>
    b05a:	bf00      	nop
    b05c:	200021be 	.word	0x200021be
    b060:	200021cc 	.word	0x200021cc

0000b064 <ads1115_set_auto_range>:

void ads1115_set_auto_range(){
    b064:	b538      	push	{r3, r4, r5, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    b066:	2001      	movs	r0, #1
    b068:	f006 fe3e 	bl	11ce8 <read_register>
    b06c:	4604      	mov	r4, r0
    ads1115_set_voltage_range_mV(ADS1115_RANGE_6144);
    b06e:	2000      	movs	r0, #0
    b070:	f7ff ff3a 	bl	aee8 <ads1115_set_voltage_range_mV>
    
    if(deviceMeasureMode == ADS1115_SINGLE){
    b074:	4b1e      	ldr	r3, [pc, #120]	; (b0f0 <ads1115_set_auto_range+0x8c>)
    b076:	881b      	ldrh	r3, [r3, #0]
    b078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b07c:	d019      	beq.n	b0b2 <ads1115_set_auto_range+0x4e>
        ads1115_set_measure_mode(ADS1115_CONTINUOUS);
        convRate rate = ads1115_get_conv_rate();
        ads1115_delay_acc_to_rate(rate);
    }
    
    int16_t rawResult = abs(read_register(ADS1115_CONV_REG));
    b07e:	2000      	movs	r0, #0
    b080:	f006 fe32 	bl	11ce8 <read_register>
    b084:	b203      	sxth	r3, r0
    range optRange = ADS1115_RANGE_6144;
    
    if(rawResult < 1093){
    b086:	f240 4244 	movw	r2, #1092	; 0x444
    b08a:	4293      	cmp	r3, r2
    b08c:	dd19      	ble.n	b0c2 <ads1115_set_auto_range+0x5e>
        optRange = ADS1115_RANGE_0256;
    }
    else if(rawResult < 2185){
    b08e:	f640 0288 	movw	r2, #2184	; 0x888
    b092:	4293      	cmp	r3, r2
    b094:	dd1f      	ble.n	b0d6 <ads1115_set_auto_range+0x72>
        optRange = ADS1115_RANGE_0512;
    }
    else if(rawResult < 4370){
    b096:	f241 1211 	movw	r2, #4369	; 0x1111
    b09a:	4293      	cmp	r3, r2
    b09c:	dd1e      	ble.n	b0dc <ads1115_set_auto_range+0x78>
        optRange = ADS1115_RANGE_1024;
    }
    else if(rawResult < 8738){
    b09e:	f242 2221 	movw	r2, #8737	; 0x2221
    b0a2:	4293      	cmp	r3, r2
    b0a4:	dd1d      	ble.n	b0e2 <ads1115_set_auto_range+0x7e>
        optRange = ADS1115_RANGE_2048;
    }
    else if(rawResult < 17476){
    b0a6:	f244 4243 	movw	r2, #17475	; 0x4443
    b0aa:	4293      	cmp	r3, r2
    b0ac:	dd1c      	ble.n	b0e8 <ads1115_set_auto_range+0x84>
    range optRange = ADS1115_RANGE_6144;
    b0ae:	2500      	movs	r5, #0
    b0b0:	e009      	b.n	b0c6 <ads1115_set_auto_range+0x62>
        ads1115_set_measure_mode(ADS1115_CONTINUOUS);
    b0b2:	2000      	movs	r0, #0
    b0b4:	f7ff ff06 	bl	aec4 <ads1115_set_measure_mode>
        convRate rate = ads1115_get_conv_rate();
    b0b8:	f006 fe26 	bl	11d08 <ads1115_get_conv_rate>
        ads1115_delay_acc_to_rate(rate);
    b0bc:	f006 fde2 	bl	11c84 <ads1115_delay_acc_to_rate>
    b0c0:	e7dd      	b.n	b07e <ads1115_set_auto_range+0x1a>
        optRange = ADS1115_RANGE_0256;
    b0c2:	f44f 6520 	mov.w	r5, #2560	; 0xa00
        optRange = ADS1115_RANGE_4096;
    }
    
    write_register(ADS1115_CONFIG_REG, currentConfReg);
    b0c6:	4621      	mov	r1, r4
    b0c8:	2001      	movs	r0, #1
    b0ca:	f006 fe2c 	bl	11d26 <write_register>
    ads1115_set_voltage_range_mV(optRange); 
    b0ce:	4628      	mov	r0, r5
    b0d0:	f7ff ff0a 	bl	aee8 <ads1115_set_voltage_range_mV>
}
    b0d4:	bd38      	pop	{r3, r4, r5, pc}
        optRange = ADS1115_RANGE_0512;
    b0d6:	f44f 6500 	mov.w	r5, #2048	; 0x800
    b0da:	e7f4      	b.n	b0c6 <ads1115_set_auto_range+0x62>
        optRange = ADS1115_RANGE_1024;
    b0dc:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    b0e0:	e7f1      	b.n	b0c6 <ads1115_set_auto_range+0x62>
        optRange = ADS1115_RANGE_2048;
    b0e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    b0e6:	e7ee      	b.n	b0c6 <ads1115_set_auto_range+0x62>
        optRange = ADS1115_RANGE_4096;
    b0e8:	f44f 7500 	mov.w	r5, #512	; 0x200
    b0ec:	e7eb      	b.n	b0c6 <ads1115_set_auto_range+0x62>
    b0ee:	bf00      	nop
    b0f0:	200021be 	.word	0x200021be

0000b0f4 <ads1115_get_raw_result>:
    int16_t rawResult = ads1115_get_raw_result();
    int16_t result = (int16_t)(rawResult * voltageRange / ADS1115_REG_FACTOR);
    return result;
}

int16_t ads1115_get_raw_result(){
    b0f4:	b508      	push	{r3, lr}
    int16_t rawResult = read_register(ADS1115_CONV_REG);
    b0f6:	2000      	movs	r0, #0
    b0f8:	f006 fdf6 	bl	11ce8 <read_register>
    b0fc:	b200      	sxth	r0, r0
    if(autoRangeMode){
    b0fe:	4b14      	ldr	r3, [pc, #80]	; (b150 <ads1115_get_raw_result+0x5c>)
    b100:	781b      	ldrb	r3, [r3, #0]
    b102:	b31b      	cbz	r3, b14c <ads1115_get_raw_result+0x58>
        if((abs(rawResult) > 26214) && (voltageRange != 6144)){ // 80%
    b104:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
    b108:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    b10c:	b29b      	uxth	r3, r3
    b10e:	f246 6266 	movw	r2, #26214	; 0x6666
    b112:	4293      	cmp	r3, r2
    b114:	d904      	bls.n	b120 <ads1115_get_raw_result+0x2c>
    b116:	4a0f      	ldr	r2, [pc, #60]	; (b154 <ads1115_get_raw_result+0x60>)
    b118:	8812      	ldrh	r2, [r2, #0]
    b11a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
    b11e:	d10f      	bne.n	b140 <ads1115_get_raw_result+0x4c>
            ads1115_set_auto_range();
            rawResult = read_register(ADS1115_CONV_REG);
        }
        else if((abs(rawResult) < 9800) && (voltageRange != 256)){ //30%
    b120:	f242 6247 	movw	r2, #9799	; 0x2647
    b124:	4293      	cmp	r3, r2
    b126:	d811      	bhi.n	b14c <ads1115_get_raw_result+0x58>
    b128:	4b0a      	ldr	r3, [pc, #40]	; (b154 <ads1115_get_raw_result+0x60>)
    b12a:	881b      	ldrh	r3, [r3, #0]
    b12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b130:	d00c      	beq.n	b14c <ads1115_get_raw_result+0x58>
            ads1115_set_auto_range();
    b132:	f7ff ff97 	bl	b064 <ads1115_set_auto_range>
            rawResult = read_register(ADS1115_CONV_REG);
    b136:	2000      	movs	r0, #0
    b138:	f006 fdd6 	bl	11ce8 <read_register>
    b13c:	b200      	sxth	r0, r0
    b13e:	e005      	b.n	b14c <ads1115_get_raw_result+0x58>
            ads1115_set_auto_range();
    b140:	f7ff ff90 	bl	b064 <ads1115_set_auto_range>
            rawResult = read_register(ADS1115_CONV_REG);
    b144:	2000      	movs	r0, #0
    b146:	f006 fdcf 	bl	11ce8 <read_register>
    b14a:	b200      	sxth	r0, r0
        }
    }
    return rawResult;
}
    b14c:	bd08      	pop	{r3, pc}
    b14e:	bf00      	nop
    b150:	200021cc 	.word	0x200021cc
    b154:	200021c0 	.word	0x200021c0

0000b158 <ads1115_get_result_mV>:
int16_t ads1115_get_result_mV(){
    b158:	b508      	push	{r3, lr}
    int16_t rawResult = ads1115_get_raw_result();
    b15a:	f7ff ffcb 	bl	b0f4 <ads1115_get_raw_result>
    int16_t result = (int16_t)(rawResult * voltageRange / ADS1115_REG_FACTOR);
    b15e:	4b06      	ldr	r3, [pc, #24]	; (b178 <ads1115_get_result_mV+0x20>)
    b160:	881b      	ldrh	r3, [r3, #0]
    b162:	fb03 f000 	mul.w	r0, r3, r0
    b166:	2800      	cmp	r0, #0
    b168:	db02      	blt.n	b170 <ads1115_get_result_mV+0x18>
}
    b16a:	f340 30cf 	sbfx	r0, r0, #15, #16
    b16e:	bd08      	pop	{r3, pc}
    int16_t result = (int16_t)(rawResult * voltageRange / ADS1115_REG_FACTOR);
    b170:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
    b174:	307f      	adds	r0, #127	; 0x7f
    b176:	e7f8      	b.n	b16a <ads1115_get_result_mV+0x12>
    b178:	200021c0 	.word	0x200021c0

0000b17c <twowire_write>:

#include "twowire.h"

const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(i2c0));

uint8_t twowire_write(uint8_t devaddr){
    b17c:	b510      	push	{r4, lr}
    b17e:	4604      	mov	r4, r0
    int ret;
    if (!device_is_ready(dev))
    b180:	4b09      	ldr	r3, [pc, #36]	; (b1a8 <twowire_write+0x2c>)
    b182:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b184:	f009 fdf6 	bl	14d74 <z_device_is_ready>
    b188:	b158      	cbz	r0, b1a2 <twowire_write+0x26>
        return -ENODEV;
    ret = i2c_write(dev, NULL, 0, devaddr);
    b18a:	4623      	mov	r3, r4
    b18c:	2200      	movs	r2, #0
    b18e:	4611      	mov	r1, r2
    b190:	4805      	ldr	r0, [pc, #20]	; (b1a8 <twowire_write+0x2c>)
    b192:	6800      	ldr	r0, [r0, #0]
    b194:	f006 fdff 	bl	11d96 <i2c_write>
    if (ret)
    b198:	b908      	cbnz	r0, b19e <twowire_write+0x22>
        return ret;
    return 0;
    b19a:	2000      	movs	r0, #0
}
    b19c:	bd10      	pop	{r4, pc}
        return ret;
    b19e:	b2c0      	uxtb	r0, r0
    b1a0:	e7fc      	b.n	b19c <twowire_write+0x20>
        return -ENODEV;
    b1a2:	20ed      	movs	r0, #237	; 0xed
    b1a4:	e7fa      	b.n	b19c <twowire_write+0x20>
    b1a6:	bf00      	nop
    b1a8:	20000370 	.word	0x20000370

0000b1ac <twowire_write_register>:

uint8_t twowire_write_register(uint8_t devaddr, uint8_t regaddr){
    b1ac:	b530      	push	{r4, r5, lr}
    b1ae:	b083      	sub	sp, #12
    b1b0:	4604      	mov	r4, r0
    b1b2:	460d      	mov	r5, r1
    int ret;
    if (!device_is_ready(dev))
    b1b4:	4b0a      	ldr	r3, [pc, #40]	; (b1e0 <twowire_write_register+0x34>)
    b1b6:	6818      	ldr	r0, [r3, #0]
    b1b8:	f009 fddc 	bl	14d74 <z_device_is_ready>
    b1bc:	b170      	cbz	r0, b1dc <twowire_write_register+0x30>
        return -ENODEV;
    uint8_t buf [1] = {regaddr};
    b1be:	f88d 5004 	strb.w	r5, [sp, #4]
    ret = i2c_write(dev, buf, 1, devaddr);
    b1c2:	4623      	mov	r3, r4
    b1c4:	2201      	movs	r2, #1
    b1c6:	a901      	add	r1, sp, #4
    b1c8:	4805      	ldr	r0, [pc, #20]	; (b1e0 <twowire_write_register+0x34>)
    b1ca:	6800      	ldr	r0, [r0, #0]
    b1cc:	f006 fde3 	bl	11d96 <i2c_write>
    if (ret)
    b1d0:	b910      	cbnz	r0, b1d8 <twowire_write_register+0x2c>
        return ret;
    return 0;
    b1d2:	2000      	movs	r0, #0
}
    b1d4:	b003      	add	sp, #12
    b1d6:	bd30      	pop	{r4, r5, pc}
        return ret;
    b1d8:	b2c0      	uxtb	r0, r0
    b1da:	e7fb      	b.n	b1d4 <twowire_write_register+0x28>
        return -ENODEV;
    b1dc:	20ed      	movs	r0, #237	; 0xed
    b1de:	e7f9      	b.n	b1d4 <twowire_write_register+0x28>
    b1e0:	20000370 	.word	0x20000370

0000b1e4 <twowire_read_register_data>:

uint8_t twowire_read_register_data(uint8_t devaddr, uint8_t regaddr, uint8_t *regval){
    b1e4:	b530      	push	{r4, r5, lr}
    b1e6:	b085      	sub	sp, #20
    b1e8:	4604      	mov	r4, r0
    b1ea:	4615      	mov	r5, r2
    b1ec:	f88d 100f 	strb.w	r1, [sp, #15]
    int ret;
    if (!device_is_ready(dev)) 
    b1f0:	4b0b      	ldr	r3, [pc, #44]	; (b220 <twowire_read_register_data+0x3c>)
    b1f2:	6818      	ldr	r0, [r3, #0]
    b1f4:	f009 fdbe 	bl	14d74 <z_device_is_ready>
    b1f8:	b180      	cbz	r0, b21c <twowire_read_register_data+0x38>
        return -ENODEV;
    ret = i2c_write_read(dev, devaddr, &regaddr, 1, regval, 2);
    b1fa:	2302      	movs	r3, #2
    b1fc:	9301      	str	r3, [sp, #4]
    b1fe:	9500      	str	r5, [sp, #0]
    b200:	2301      	movs	r3, #1
    b202:	f10d 020f 	add.w	r2, sp, #15
    b206:	4621      	mov	r1, r4
    b208:	4805      	ldr	r0, [pc, #20]	; (b220 <twowire_read_register_data+0x3c>)
    b20a:	6800      	ldr	r0, [r0, #0]
    b20c:	f006 fdd1 	bl	11db2 <i2c_write_read>
    if (ret) 
    b210:	b910      	cbnz	r0, b218 <twowire_read_register_data+0x34>
        return ret;
    return 0;
    b212:	2000      	movs	r0, #0
}
    b214:	b005      	add	sp, #20
    b216:	bd30      	pop	{r4, r5, pc}
        return ret;
    b218:	b2c0      	uxtb	r0, r0
    b21a:	e7fb      	b.n	b214 <twowire_read_register_data+0x30>
        return -ENODEV;
    b21c:	20ed      	movs	r0, #237	; 0xed
    b21e:	e7f9      	b.n	b214 <twowire_read_register_data+0x30>
    b220:	20000370 	.word	0x20000370

0000b224 <twowire_write_register_byte>:

uint8_t twowire_write_register_byte(uint8_t devaddr, uint8_t regaddr, uint8_t regval){
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	b082      	sub	sp, #8
    b228:	4604      	mov	r4, r0
    b22a:	460e      	mov	r6, r1
    b22c:	4615      	mov	r5, r2
    int ret;
    if (!device_is_ready(dev))
    b22e:	4b0c      	ldr	r3, [pc, #48]	; (b260 <twowire_write_register_byte+0x3c>)
    b230:	6818      	ldr	r0, [r3, #0]
    b232:	f009 fd9f 	bl	14d74 <z_device_is_ready>
    b236:	b180      	cbz	r0, b25a <twowire_write_register_byte+0x36>
        return -ENODEV;
    uint8_t buf [2] = {regaddr, regval};
    b238:	f88d 6004 	strb.w	r6, [sp, #4]
    b23c:	f88d 5005 	strb.w	r5, [sp, #5]
    ret = i2c_write(dev, buf, 2, devaddr);
    b240:	4623      	mov	r3, r4
    b242:	2202      	movs	r2, #2
    b244:	a901      	add	r1, sp, #4
    b246:	4806      	ldr	r0, [pc, #24]	; (b260 <twowire_write_register_byte+0x3c>)
    b248:	6800      	ldr	r0, [r0, #0]
    b24a:	f006 fda4 	bl	11d96 <i2c_write>
    if (ret)
    b24e:	b910      	cbnz	r0, b256 <twowire_write_register_byte+0x32>
        return ret;
    return 0;
    b250:	2000      	movs	r0, #0
}
    b252:	b002      	add	sp, #8
    b254:	bd70      	pop	{r4, r5, r6, pc}
        return ret;
    b256:	b2c0      	uxtb	r0, r0
    b258:	e7fb      	b.n	b252 <twowire_write_register_byte+0x2e>
        return -ENODEV;
    b25a:	20ed      	movs	r0, #237	; 0xed
    b25c:	e7f9      	b.n	b252 <twowire_write_register_byte+0x2e>
    b25e:	bf00      	nop
    b260:	20000370 	.word	0x20000370

0000b264 <twowire_write_register_data>:

uint8_t twowire_write_register_data(uint8_t devaddr, uint8_t regaddr, uint16_t regval){
    b264:	b570      	push	{r4, r5, r6, lr}
    b266:	b082      	sub	sp, #8
    b268:	4606      	mov	r6, r0
    b26a:	460d      	mov	r5, r1
    b26c:	4614      	mov	r4, r2
    int ret;
    if (!device_is_ready(dev))
    b26e:	4a0d      	ldr	r2, [pc, #52]	; (b2a4 <twowire_write_register_data+0x40>)
    b270:	6810      	ldr	r0, [r2, #0]
    b272:	f009 fd7f 	bl	14d74 <z_device_is_ready>
    b276:	b198      	cbz	r0, b2a0 <twowire_write_register_data+0x3c>
        return -ENODEV;
    uint8_t buf [3] = {regaddr, (uint8_t)(regval >> 8), (uint8_t)(regval)};
    b278:	f88d 5004 	strb.w	r5, [sp, #4]
    b27c:	0a23      	lsrs	r3, r4, #8
    b27e:	f88d 3005 	strb.w	r3, [sp, #5]
    b282:	f88d 4006 	strb.w	r4, [sp, #6]
    ret = i2c_write(dev, buf, 3, devaddr);
    b286:	4633      	mov	r3, r6
    b288:	2203      	movs	r2, #3
    b28a:	a901      	add	r1, sp, #4
    b28c:	4805      	ldr	r0, [pc, #20]	; (b2a4 <twowire_write_register_data+0x40>)
    b28e:	6800      	ldr	r0, [r0, #0]
    b290:	f006 fd81 	bl	11d96 <i2c_write>
    if (ret)
    b294:	b910      	cbnz	r0, b29c <twowire_write_register_data+0x38>
        return ret;
    return 0;
    b296:	2000      	movs	r0, #0
    b298:	b002      	add	sp, #8
    b29a:	bd70      	pop	{r4, r5, r6, pc}
        return ret;
    b29c:	b2c0      	uxtb	r0, r0
    b29e:	e7fb      	b.n	b298 <twowire_write_register_data+0x34>
        return -ENODEV;
    b2a0:	20ed      	movs	r0, #237	; 0xed
    b2a2:	e7f9      	b.n	b298 <twowire_write_register_data+0x34>
    b2a4:	20000370 	.word	0x20000370

0000b2a8 <peripherals_set_pre_reg_voltage>:
int16_t uav_battery_voltage_mv = 0;
int16_t uav_current_ma = 0;
int16_t pre_reg_input_current_ma = 0;
int16_t pre_reg_output_current_ma = 0; 

void peripherals_set_pre_reg_voltage(uint16_t voltage_mv){
    b2a8:	b510      	push	{r4, lr}
    
    // Calculate lower resistor value
    uint16_t fb_res_l = LT8330_REFERENCE_VOLTAGE_MV*LT8330_FB_RES_H/(voltage_mv - LT8330_REFERENCE_VOLTAGE_MV);
    b2aa:	f5a0 60c8 	sub.w	r0, r0, #1600	; 0x640
    b2ae:	4c09      	ldr	r4, [pc, #36]	; (b2d4 <peripherals_set_pre_reg_voltage+0x2c>)
    b2b0:	fb94 f4f0 	sdiv	r4, r4, r0

    // Convert to hex value
    uint8_t value = (uint8_t)(fb_res_l*128/TPL_INTERNAL_RES);
    b2b4:	b2a4      	uxth	r4, r4
    b2b6:	01e4      	lsls	r4, r4, #7
    b2b8:	4b07      	ldr	r3, [pc, #28]	; (b2d8 <peripherals_set_pre_reg_voltage+0x30>)
    b2ba:	fb83 3404 	smull	r3, r4, r3, r4
    b2be:	f3c4 3407 	ubfx	r4, r4, #12, #8

    printk("%d \n", value);
    b2c2:	4621      	mov	r1, r4
    b2c4:	4805      	ldr	r0, [pc, #20]	; (b2dc <peripherals_set_pre_reg_voltage+0x34>)
    b2c6:	f006 fe11 	bl	11eec <printk>
    
    // Update TPL --> programmable load
    TPL0401x_update_resistance(value);
    b2ca:	4620      	mov	r0, r4
    b2cc:	f006 fd99 	bl	11e02 <TPL0401x_update_resistance>
}
    b2d0:	bd10      	pop	{r4, pc}
    b2d2:	bf00      	nop
    b2d4:	00f42400 	.word	0x00f42400
    b2d8:	68db8bad 	.word	0x68db8bad
    b2dc:	0001607c 	.word	0x0001607c

0000b2e0 <peripherals_convert_readings>:
  voltage = ads1115_get_result_mV();
  return voltage;
}

void peripherals_convert_readings(){
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    b2e0:	2300      	movs	r3, #0
    b2e2:	e00a      	b.n	b2fa <peripherals_convert_readings+0x1a>
        switch (i){
            case 0: uav_battery_voltage_mv = channel_voltage[i]*110/10;     break;
    b2e4:	4a21      	ldr	r2, [pc, #132]	; (b36c <peripherals_convert_readings+0x8c>)
    b2e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    b2ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    b2ee:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    b2f2:	491f      	ldr	r1, [pc, #124]	; (b370 <peripherals_convert_readings+0x90>)
    b2f4:	800a      	strh	r2, [r1, #0]
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    b2f6:	3301      	adds	r3, #1
    b2f8:	b2db      	uxtb	r3, r3
    b2fa:	2b03      	cmp	r3, #3
    b2fc:	d835      	bhi.n	b36a <peripherals_convert_readings+0x8a>
        switch (i){
    b2fe:	2b03      	cmp	r3, #3
    b300:	d8f9      	bhi.n	b2f6 <peripherals_convert_readings+0x16>
    b302:	a201      	add	r2, pc, #4	; (adr r2, b308 <peripherals_convert_readings+0x28>)
    b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b308:	0000b2e5 	.word	0x0000b2e5
    b30c:	0000b319 	.word	0x0000b319
    b310:	0000b33b 	.word	0x0000b33b
    b314:	0000b353 	.word	0x0000b353
            case 1: uav_current_ma = channel_voltage[i]*147*100/50/47;      break; // multiply by 100   ===== dividing by 0.01 (voltage divider 100k - 47k)
    b318:	4a14      	ldr	r2, [pc, #80]	; (b36c <peripherals_convert_readings+0x8c>)
    b31a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    b31e:	f44f 7193 	mov.w	r1, #294	; 0x126
    b322:	fb01 f202 	mul.w	r2, r1, r2
    b326:	4913      	ldr	r1, [pc, #76]	; (b374 <peripherals_convert_readings+0x94>)
    b328:	fb81 0102 	smull	r0, r1, r1, r2
    b32c:	4411      	add	r1, r2
    b32e:	17d2      	asrs	r2, r2, #31
    b330:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    b334:	4910      	ldr	r1, [pc, #64]	; (b378 <peripherals_convert_readings+0x98>)
    b336:	800a      	strh	r2, [r1, #0]
    b338:	e7dd      	b.n	b2f6 <peripherals_convert_readings+0x16>
            case 2: pre_reg_input_current_ma = channel_voltage[i]*10/50;    break; // multiply by 10    ===== dividing by 0.1
    b33a:	4a0c      	ldr	r2, [pc, #48]	; (b36c <peripherals_convert_readings+0x8c>)
    b33c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    b340:	490e      	ldr	r1, [pc, #56]	; (b37c <peripherals_convert_readings+0x9c>)
    b342:	fb81 0102 	smull	r0, r1, r1, r2
    b346:	17d2      	asrs	r2, r2, #31
    b348:	ebc2 0261 	rsb	r2, r2, r1, asr #1
    b34c:	490c      	ldr	r1, [pc, #48]	; (b380 <peripherals_convert_readings+0xa0>)
    b34e:	800a      	strh	r2, [r1, #0]
    b350:	e7d1      	b.n	b2f6 <peripherals_convert_readings+0x16>
            case 3: pre_reg_output_current_ma = channel_voltage[i]*10/50;   break; // multiply by 10    ===== dividing by 0.1
    b352:	4a06      	ldr	r2, [pc, #24]	; (b36c <peripherals_convert_readings+0x8c>)
    b354:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    b358:	4908      	ldr	r1, [pc, #32]	; (b37c <peripherals_convert_readings+0x9c>)
    b35a:	fb81 0102 	smull	r0, r1, r1, r2
    b35e:	17d2      	asrs	r2, r2, #31
    b360:	ebc2 0261 	rsb	r2, r2, r1, asr #1
    b364:	4907      	ldr	r1, [pc, #28]	; (b384 <peripherals_convert_readings+0xa4>)
    b366:	800a      	strh	r2, [r1, #0]
    b368:	e7c5      	b.n	b2f6 <peripherals_convert_readings+0x16>
            default: break;
        }
    }
    b36a:	4770      	bx	lr
    b36c:	20001a88 	.word	0x20001a88
    b370:	200021c8 	.word	0x200021c8
    b374:	ae4c415d 	.word	0xae4c415d
    b378:	200021c6 	.word	0x200021c6
    b37c:	66666667 	.word	0x66666667
    b380:	200021c4 	.word	0x200021c4
    b384:	200021c2 	.word	0x200021c2

0000b388 <peripherals_update_all_ads1115_channels>:
void peripherals_update_all_ads1115_channels(){
    b388:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    b38a:	2400      	movs	r4, #0
    b38c:	e007      	b.n	b39e <peripherals_update_all_ads1115_channels+0x16>
        channel_voltage[i] = peripherals_ads1115_read_channel(i);
    b38e:	4620      	mov	r0, r4
    b390:	f006 fd2b 	bl	11dea <peripherals_ads1115_read_channel>
    b394:	4b04      	ldr	r3, [pc, #16]	; (b3a8 <peripherals_update_all_ads1115_channels+0x20>)
    b396:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    b39a:	3401      	adds	r4, #1
    b39c:	b2e4      	uxtb	r4, r4
    b39e:	2c03      	cmp	r4, #3
    b3a0:	d9f5      	bls.n	b38e <peripherals_update_all_ads1115_channels+0x6>
    peripherals_convert_readings();
    b3a2:	f7ff ff9d 	bl	b2e0 <peripherals_convert_readings>
}
    b3a6:	bd10      	pop	{r4, pc}
    b3a8:	20001a88 	.word	0x20001a88

0000b3ac <update_adc_readings>:
	}
}


// Update ADC voltages
void update_adc_readings(struct adc_sequence *sequence){
    b3ac:	b530      	push	{r4, r5, lr}
    b3ae:	b083      	sub	sp, #12
    b3b0:	4605      	mov	r5, r0
    int err = 0;
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b3b2:	2400      	movs	r4, #0
    b3b4:	e003      	b.n	b3be <update_adc_readings+0x12>
		(void)adc_sequence_init_dt(&adc_channels[i], sequence);

		// Read ADC channel
		err = adc_read(adc_channels[i].dev, sequence);
		if (err < 0) {
			printk("Could not read (%d)\n", err);
    b3b6:	4824      	ldr	r0, [pc, #144]	; (b448 <update_adc_readings+0x9c>)
    b3b8:	f006 fd98 	bl	11eec <printk>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b3bc:	3401      	adds	r4, #1
    b3be:	2c02      	cmp	r4, #2
    b3c0:	d83f      	bhi.n	b442 <update_adc_readings+0x96>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
    b3c2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    b3c6:	4b21      	ldr	r3, [pc, #132]	; (b44c <update_adc_readings+0xa0>)
    b3c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b3cc:	795b      	ldrb	r3, [r3, #5]
    b3ce:	b153      	cbz	r3, b3e6 <update_adc_readings+0x3a>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b3d0:	4b1e      	ldr	r3, [pc, #120]	; (b44c <update_adc_readings+0xa0>)
    b3d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b3d6:	7919      	ldrb	r1, [r3, #4]
    b3d8:	2201      	movs	r2, #1
    b3da:	408a      	lsls	r2, r1
    b3dc:	606a      	str	r2, [r5, #4]
	seq->resolution = spec->resolution;
    b3de:	7c1a      	ldrb	r2, [r3, #16]
    b3e0:	742a      	strb	r2, [r5, #16]
	seq->oversampling = spec->oversampling;
    b3e2:	7c5b      	ldrb	r3, [r3, #17]
    b3e4:	746b      	strb	r3, [r5, #17]
		err = adc_read(adc_channels[i].dev, sequence);
    b3e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    b3ea:	4a18      	ldr	r2, [pc, #96]	; (b44c <update_adc_readings+0xa0>)
    b3ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	const struct adc_driver_api *api =
    b3f0:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, sequence);
    b3f2:	685b      	ldr	r3, [r3, #4]
    b3f4:	4629      	mov	r1, r5
    b3f6:	4798      	blx	r3
		if (err < 0) {
    b3f8:	1e01      	subs	r1, r0, #0
    b3fa:	dbdc      	blt.n	b3b6 <update_adc_readings+0xa>
			continue;
		}

		// Convert to mv
		int32_t val_mv;
		val_mv = (int32_t)buf;
    b3fc:	4b14      	ldr	r3, [pc, #80]	; (b450 <update_adc_readings+0xa4>)
    b3fe:	f9b3 3000 	ldrsh.w	r3, [r3]
    b402:	9301      	str	r3, [sp, #4]
		err = adc_raw_to_millivolts_dt(&adc_channels[i], &val_mv);
    b404:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    b408:	a901      	add	r1, sp, #4
    b40a:	4b10      	ldr	r3, [pc, #64]	; (b44c <update_adc_readings+0xa0>)
    b40c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b410:	f006 fd34 	bl	11e7c <adc_raw_to_millivolts_dt>

		// Conversion (take into account voltage dividers)
		switch (i){
    b414:	2c01      	cmp	r4, #1
    b416:	d007      	beq.n	b428 <update_adc_readings+0x7c>
    b418:	2c02      	cmp	r4, #2
    b41a:	d00d      	beq.n	b438 <update_adc_readings+0x8c>
    b41c:	2c00      	cmp	r4, #0
    b41e:	d1cd      	bne.n	b3bc <update_adc_readings+0x10>
			case 0: three_volt_supply_voltage_mv = val_mv; 					break;
    b420:	4b0c      	ldr	r3, [pc, #48]	; (b454 <update_adc_readings+0xa8>)
    b422:	9a01      	ldr	r2, [sp, #4]
    b424:	601a      	str	r2, [r3, #0]
    b426:	e7c9      	b.n	b3bc <update_adc_readings+0x10>
			// case 1: break;
			// case 2: break;
			// case 3: break;
			// case 4: break;
			case 1: vamp_supply_voltage_mv = (int32_t)(val_mv * (110/10)); 	break;
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    b42e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    b432:	4a09      	ldr	r2, [pc, #36]	; (b458 <update_adc_readings+0xac>)
    b434:	6013      	str	r3, [r2, #0]
    b436:	e7c1      	b.n	b3bc <update_adc_readings+0x10>
			case 2: five_volt_supply_voltage_mv = (int32_t)(val_mv * 2); 	break;
    b438:	9b01      	ldr	r3, [sp, #4]
    b43a:	005b      	lsls	r3, r3, #1
    b43c:	4a07      	ldr	r2, [pc, #28]	; (b45c <update_adc_readings+0xb0>)
    b43e:	6013      	str	r3, [r2, #0]
    b440:	e7bc      	b.n	b3bc <update_adc_readings+0x10>
			default: break;
		}
	}
}
    b442:	b003      	add	sp, #12
    b444:	bd30      	pop	{r4, r5, pc}
    b446:	bf00      	nop
    b448:	00016084 	.word	0x00016084
    b44c:	000160e4 	.word	0x000160e4
    b450:	200021ca 	.word	0x200021ca
    b454:	20001a98 	.word	0x20001a98
    b458:	20001a90 	.word	0x20001a90
    b45c:	20001a94 	.word	0x20001a94

0000b460 <adc_read_start>:
void adc_read_start(void){
    b460:	b510      	push	{r4, lr}
    b462:	b086      	sub	sp, #24
	struct adc_sequence sequence = {
    b464:	2400      	movs	r4, #0
    b466:	9401      	str	r4, [sp, #4]
    b468:	9402      	str	r4, [sp, #8]
    b46a:	9403      	str	r4, [sp, #12]
    b46c:	9404      	str	r4, [sp, #16]
    b46e:	9405      	str	r4, [sp, #20]
    b470:	4b1a      	ldr	r3, [pc, #104]	; (b4dc <adc_read_start+0x7c>)
    b472:	9303      	str	r3, [sp, #12]
    b474:	2302      	movs	r3, #2
    b476:	9304      	str	r3, [sp, #16]
    b478:	2301      	movs	r3, #1
    b47a:	f88d 3016 	strb.w	r3, [sp, #22]
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b47e:	e00b      	b.n	b498 <adc_read_start+0x38>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
    b480:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    b484:	4b16      	ldr	r3, [pc, #88]	; (b4e0 <adc_read_start+0x80>)
    b486:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    b48a:	6819      	ldr	r1, [r3, #0]
    b48c:	4815      	ldr	r0, [pc, #84]	; (b4e4 <adc_read_start+0x84>)
    b48e:	f006 fd2d 	bl	11eec <printk>
}
    b492:	b006      	add	sp, #24
    b494:	bd10      	pop	{r4, pc}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b496:	3401      	adds	r4, #1
    b498:	2c02      	cmp	r4, #2
    b49a:	d817      	bhi.n	b4cc <adc_read_start+0x6c>
		if (!device_is_ready(adc_channels[i].dev)) {
    b49c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    b4a0:	4a0f      	ldr	r2, [pc, #60]	; (b4e0 <adc_read_start+0x80>)
    b4a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    b4a6:	f009 fc65 	bl	14d74 <z_device_is_ready>
    b4aa:	2800      	cmp	r0, #0
    b4ac:	d0e8      	beq.n	b480 <adc_read_start+0x20>
		err = adc_channel_setup_dt(&adc_channels[i]);
    b4ae:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    b4b2:	4b0b      	ldr	r3, [pc, #44]	; (b4e0 <adc_read_start+0x80>)
    b4b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b4b8:	f006 fcaa 	bl	11e10 <adc_channel_setup_dt>
		if (err < 0) {
    b4bc:	2800      	cmp	r0, #0
    b4be:	daea      	bge.n	b496 <adc_read_start+0x36>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b4c0:	4602      	mov	r2, r0
    b4c2:	4621      	mov	r1, r4
    b4c4:	4808      	ldr	r0, [pc, #32]	; (b4e8 <adc_read_start+0x88>)
    b4c6:	f006 fd11 	bl	11eec <printk>
			return 0;
    b4ca:	e7e2      	b.n	b492 <adc_read_start+0x32>
		k_msleep(100);
    b4cc:	2064      	movs	r0, #100	; 0x64
    b4ce:	f006 fcac 	bl	11e2a <k_msleep>
		update_adc_readings(&sequence);
    b4d2:	a801      	add	r0, sp, #4
    b4d4:	f7ff ff6a 	bl	b3ac <update_adc_readings>
	while (1)
    b4d8:	e7f8      	b.n	b4cc <adc_read_start+0x6c>
    b4da:	bf00      	nop
    b4dc:	200021ca 	.word	0x200021ca
    b4e0:	000160e4 	.word	0x000160e4
    b4e4:	0001609c 	.word	0x0001609c
    b4e8:	000160c0 	.word	0x000160c0

0000b4ec <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
    b4ec:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
    b4ee:	4b02      	ldr	r3, [pc, #8]	; (b4f8 <char_out+0xc>)
    b4f0:	681b      	ldr	r3, [r3, #0]
    b4f2:	4798      	blx	r3
}
    b4f4:	bd08      	pop	{r3, pc}
    b4f6:	bf00      	nop
    b4f8:	20000374 	.word	0x20000374

0000b4fc <__printk_hook_install>:
	_char_out = fn;
    b4fc:	4b01      	ldr	r3, [pc, #4]	; (b504 <__printk_hook_install+0x8>)
    b4fe:	6018      	str	r0, [r3, #0]
}
    b500:	4770      	bx	lr
    b502:	bf00      	nop
    b504:	20000374 	.word	0x20000374

0000b508 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    b508:	b500      	push	{lr}
    b50a:	b083      	sub	sp, #12
    b50c:	4602      	mov	r2, r0
    b50e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    b510:	2100      	movs	r1, #0
    b512:	9100      	str	r1, [sp, #0]
    b514:	4802      	ldr	r0, [pc, #8]	; (b520 <vprintk+0x18>)
    b516:	f000 f935 	bl	b784 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b51a:	b003      	add	sp, #12
    b51c:	f85d fb04 	ldr.w	pc, [sp], #4
    b520:	0000b4ed 	.word	0x0000b4ed

0000b524 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    b524:	b510      	push	{r4, lr}
    b526:	b086      	sub	sp, #24
    b528:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    b52a:	9003      	str	r0, [sp, #12]
    b52c:	9104      	str	r1, [sp, #16]
    b52e:	2100      	movs	r1, #0
    b530:	9105      	str	r1, [sp, #20]
    b532:	9100      	str	r1, [sp, #0]
    b534:	a903      	add	r1, sp, #12
    b536:	4806      	ldr	r0, [pc, #24]	; (b550 <vsnprintk+0x2c>)
    b538:	f000 f924 	bl	b784 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    b53c:	9b05      	ldr	r3, [sp, #20]
    b53e:	9a04      	ldr	r2, [sp, #16]
    b540:	4293      	cmp	r3, r2
    b542:	da01      	bge.n	b548 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    b544:	2200      	movs	r2, #0
    b546:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    b548:	9805      	ldr	r0, [sp, #20]
    b54a:	b006      	add	sp, #24
    b54c:	bd10      	pop	{r4, pc}
    b54e:	bf00      	nop
    b550:	00011ebd 	.word	0x00011ebd

0000b554 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b558:	b083      	sub	sp, #12
    b55a:	4604      	mov	r4, r0
    b55c:	4608      	mov	r0, r1
    b55e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b560:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b562:	f013 0f08 	tst.w	r3, #8
    b566:	d105      	bne.n	b574 <process_event+0x20>
    b568:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    b56c:	2300      	movs	r3, #0
    b56e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    b570:	9301      	str	r3, [sp, #4]
}
    b572:	e055      	b.n	b620 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    b574:	2901      	cmp	r1, #1
    b576:	d009      	beq.n	b58c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    b578:	f043 0320 	orr.w	r3, r3, #32
    b57c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    b57e:	f385 8811 	msr	BASEPRI, r5
    b582:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b586:	b003      	add	sp, #12
    b588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    b58c:	f043 0310 	orr.w	r3, r3, #16
    b590:	8323      	strh	r3, [r4, #24]
    b592:	e7f4      	b.n	b57e <process_event+0x2a>
			evt = process_recheck(mgr);
    b594:	4620      	mov	r0, r4
    b596:	f006 fefe 	bl	12396 <process_recheck>
    b59a:	e043      	b.n	b624 <process_event+0xd0>
			res = mgr->last_res;
    b59c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    b5a0:	464a      	mov	r2, r9
    b5a2:	4669      	mov	r1, sp
    b5a4:	4620      	mov	r0, r4
    b5a6:	f006 ff0f 	bl	123c8 <process_complete>
		onoff_transition_fn transit = NULL;
    b5aa:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b5ae:	8b23      	ldrh	r3, [r4, #24]
    b5b0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b5b4:	42b7      	cmp	r7, r6
    b5b6:	d069      	beq.n	b68c <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    b5b8:	68a2      	ldr	r2, [r4, #8]
    b5ba:	2a00      	cmp	r2, #0
    b5bc:	d066      	beq.n	b68c <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b5be:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b5c0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    b5c4:	8323      	strh	r3, [r4, #24]
    b5c6:	f385 8811 	msr	BASEPRI, r5
    b5ca:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    b5ce:	2a00      	cmp	r2, #0
    b5d0:	d164      	bne.n	b69c <process_event+0x148>
    b5d2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    b5d4:	b12b      	cbz	r3, b5e2 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    b5d6:	464b      	mov	r3, r9
    b5d8:	463a      	mov	r2, r7
    b5da:	4669      	mov	r1, sp
    b5dc:	4620      	mov	r0, r4
    b5de:	f006 ff6c 	bl	124ba <notify_all>
			if (transit != NULL) {
    b5e2:	f1b8 0f00 	cmp.w	r8, #0
    b5e6:	d002      	beq.n	b5ee <process_event+0x9a>
				transit(mgr, transition_complete);
    b5e8:	4934      	ldr	r1, [pc, #208]	; (b6bc <process_event+0x168>)
    b5ea:	4620      	mov	r0, r4
    b5ec:	47c0      	blx	r8
	__asm__ volatile(
    b5ee:	f04f 0340 	mov.w	r3, #64	; 0x40
    b5f2:	f3ef 8511 	mrs	r5, BASEPRI
    b5f6:	f383 8812 	msr	BASEPRI_MAX, r3
    b5fa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b5fe:	8b23      	ldrh	r3, [r4, #24]
    b600:	f023 0308 	bic.w	r3, r3, #8
    b604:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b606:	8b23      	ldrh	r3, [r4, #24]
    b608:	f013 0f10 	tst.w	r3, #16
    b60c:	d04c      	beq.n	b6a8 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b60e:	f023 0310 	bic.w	r3, r3, #16
    b612:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    b614:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    b616:	8b26      	ldrh	r6, [r4, #24]
    b618:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    b61c:	2800      	cmp	r0, #0
    b61e:	d0ae      	beq.n	b57e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    b620:	2802      	cmp	r0, #2
    b622:	d0b7      	beq.n	b594 <process_event+0x40>
		if (evt == EVT_NOP) {
    b624:	2800      	cmp	r0, #0
    b626:	d0aa      	beq.n	b57e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    b628:	3801      	subs	r0, #1
    b62a:	2804      	cmp	r0, #4
    b62c:	d82a      	bhi.n	b684 <process_event+0x130>
    b62e:	a301      	add	r3, pc, #4	; (adr r3, b634 <process_event+0xe0>)
    b630:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    b634:	0000b59d 	.word	0x0000b59d
    b638:	0000b685 	.word	0x0000b685
    b63c:	0000b649 	.word	0x0000b649
    b640:	0000b65d 	.word	0x0000b65d
    b644:	0000b671 	.word	0x0000b671
			transit = mgr->transitions->start;
    b648:	6923      	ldr	r3, [r4, #16]
    b64a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    b64e:	2106      	movs	r1, #6
    b650:	4620      	mov	r0, r4
    b652:	f006 fe76 	bl	12342 <set_state>
		res = 0;
    b656:	f04f 0900 	mov.w	r9, #0
    b65a:	e7a8      	b.n	b5ae <process_event+0x5a>
			transit = mgr->transitions->stop;
    b65c:	6923      	ldr	r3, [r4, #16]
    b65e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    b662:	2104      	movs	r1, #4
    b664:	4620      	mov	r0, r4
    b666:	f006 fe6c 	bl	12342 <set_state>
		res = 0;
    b66a:	f04f 0900 	mov.w	r9, #0
    b66e:	e79e      	b.n	b5ae <process_event+0x5a>
			transit = mgr->transitions->reset;
    b670:	6923      	ldr	r3, [r4, #16]
    b672:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    b676:	2105      	movs	r1, #5
    b678:	4620      	mov	r0, r4
    b67a:	f006 fe62 	bl	12342 <set_state>
		res = 0;
    b67e:	f04f 0900 	mov.w	r9, #0
    b682:	e794      	b.n	b5ae <process_event+0x5a>
		if (evt == EVT_NOP) {
    b684:	f04f 0800 	mov.w	r8, #0
    b688:	46c1      	mov	r9, r8
    b68a:	e790      	b.n	b5ae <process_event+0x5a>
    b68c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    b68e:	b10a      	cbz	r2, b694 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b690:	2200      	movs	r2, #0
    b692:	e795      	b.n	b5c0 <process_event+0x6c>
		    || (transit != NULL)) {
    b694:	f1b8 0f00 	cmp.w	r8, #0
    b698:	d192      	bne.n	b5c0 <process_event+0x6c>
    b69a:	e7b4      	b.n	b606 <process_event+0xb2>
				notify_monitors(mgr, state, res);
    b69c:	464a      	mov	r2, r9
    b69e:	4639      	mov	r1, r7
    b6a0:	4620      	mov	r0, r4
    b6a2:	f006 fe56 	bl	12352 <notify_monitors>
    b6a6:	e794      	b.n	b5d2 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b6a8:	f013 0f20 	tst.w	r3, #32
    b6ac:	d004      	beq.n	b6b8 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b6ae:	f023 0320 	bic.w	r3, r3, #32
    b6b2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    b6b4:	2002      	movs	r0, #2
    b6b6:	e7ae      	b.n	b616 <process_event+0xc2>
		evt = EVT_NOP;
    b6b8:	2000      	movs	r0, #0
    b6ba:	e7ac      	b.n	b616 <process_event+0xc2>
    b6bc:	000124e9 	.word	0x000124e9

0000b6c0 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    b6c0:	4684      	mov	ip, r0
    b6c2:	4608      	mov	r0, r1
	bool loop = true;
    b6c4:	2201      	movs	r2, #1
    b6c6:	e026      	b.n	b716 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    b6c8:	f89c 3000 	ldrb.w	r3, [ip]
    b6cc:	f043 0304 	orr.w	r3, r3, #4
    b6d0:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    b6d4:	b1f2      	cbz	r2, b714 <extract_flags+0x54>
			++sp;
    b6d6:	3001      	adds	r0, #1
    b6d8:	e01c      	b.n	b714 <extract_flags+0x54>
			conv->flag_plus = true;
    b6da:	f89c 3000 	ldrb.w	r3, [ip]
    b6de:	f043 0308 	orr.w	r3, r3, #8
    b6e2:	f88c 3000 	strb.w	r3, [ip]
			break;
    b6e6:	e7f5      	b.n	b6d4 <extract_flags+0x14>
			conv->flag_space = true;
    b6e8:	f89c 3000 	ldrb.w	r3, [ip]
    b6ec:	f043 0310 	orr.w	r3, r3, #16
    b6f0:	f88c 3000 	strb.w	r3, [ip]
			break;
    b6f4:	e7ee      	b.n	b6d4 <extract_flags+0x14>
			conv->flag_hash = true;
    b6f6:	f89c 3000 	ldrb.w	r3, [ip]
    b6fa:	f043 0320 	orr.w	r3, r3, #32
    b6fe:	f88c 3000 	strb.w	r3, [ip]
			break;
    b702:	e7e7      	b.n	b6d4 <extract_flags+0x14>
			conv->flag_zero = true;
    b704:	f89c 3000 	ldrb.w	r3, [ip]
    b708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b70c:	f88c 3000 	strb.w	r3, [ip]
			break;
    b710:	e7e0      	b.n	b6d4 <extract_flags+0x14>
		switch (*sp) {
    b712:	2200      	movs	r2, #0
		}
	} while (loop);
    b714:	b342      	cbz	r2, b768 <extract_flags+0xa8>
		switch (*sp) {
    b716:	7803      	ldrb	r3, [r0, #0]
    b718:	3b20      	subs	r3, #32
    b71a:	2b10      	cmp	r3, #16
    b71c:	d8f9      	bhi.n	b712 <extract_flags+0x52>
    b71e:	a101      	add	r1, pc, #4	; (adr r1, b724 <extract_flags+0x64>)
    b720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    b724:	0000b6e9 	.word	0x0000b6e9
    b728:	0000b713 	.word	0x0000b713
    b72c:	0000b713 	.word	0x0000b713
    b730:	0000b6f7 	.word	0x0000b6f7
    b734:	0000b713 	.word	0x0000b713
    b738:	0000b713 	.word	0x0000b713
    b73c:	0000b713 	.word	0x0000b713
    b740:	0000b713 	.word	0x0000b713
    b744:	0000b713 	.word	0x0000b713
    b748:	0000b713 	.word	0x0000b713
    b74c:	0000b713 	.word	0x0000b713
    b750:	0000b6db 	.word	0x0000b6db
    b754:	0000b713 	.word	0x0000b713
    b758:	0000b6c9 	.word	0x0000b6c9
    b75c:	0000b713 	.word	0x0000b713
    b760:	0000b713 	.word	0x0000b713
    b764:	0000b705 	.word	0x0000b705

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    b768:	f89c 3000 	ldrb.w	r3, [ip]
    b76c:	f003 0344 	and.w	r3, r3, #68	; 0x44
    b770:	2b44      	cmp	r3, #68	; 0x44
    b772:	d000      	beq.n	b776 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    b774:	4770      	bx	lr
		conv->flag_zero = false;
    b776:	f89c 3000 	ldrb.w	r3, [ip]
    b77a:	f36f 1386 	bfc	r3, #6, #1
    b77e:	f88c 3000 	strb.w	r3, [ip]
    b782:	e7f7      	b.n	b774 <extract_flags+0xb4>

0000b784 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b788:	b091      	sub	sp, #68	; 0x44
    b78a:	4606      	mov	r6, r0
    b78c:	460d      	mov	r5, r1
    b78e:	4691      	mov	r9, r2
    b790:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b792:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b794:	f899 0000 	ldrb.w	r0, [r9]
    b798:	2800      	cmp	r0, #0
    b79a:	f000 82b9 	beq.w	bd10 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    b79e:	2825      	cmp	r0, #37	; 0x25
    b7a0:	d008      	beq.n	b7b4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    b7a2:	f109 0901 	add.w	r9, r9, #1
    b7a6:	4629      	mov	r1, r5
    b7a8:	47b0      	blx	r6
    b7aa:	2800      	cmp	r0, #0
    b7ac:	f2c0 82b1 	blt.w	bd12 <z_cbvprintf_impl+0x58e>
    b7b0:	3401      	adds	r4, #1
			continue;
    b7b2:	e7ef      	b.n	b794 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    b7b4:	2300      	movs	r3, #0
    b7b6:	9304      	str	r3, [sp, #16]
    b7b8:	9305      	str	r3, [sp, #20]
    b7ba:	9306      	str	r3, [sp, #24]
    b7bc:	9307      	str	r3, [sp, #28]
    b7be:	9308      	str	r3, [sp, #32]
    b7c0:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    b7c2:	4649      	mov	r1, r9
    b7c4:	a806      	add	r0, sp, #24
    b7c6:	f007 f8bf 	bl	12948 <extract_conversion>
    b7ca:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    b7cc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b7d0:	f013 0f01 	tst.w	r3, #1
    b7d4:	f000 8097 	beq.w	b906 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    b7d8:	9b03      	ldr	r3, [sp, #12]
    b7da:	1d1a      	adds	r2, r3, #4
    b7dc:	9203      	str	r2, [sp, #12]
    b7de:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    b7e0:	2f00      	cmp	r7, #0
    b7e2:	f2c0 8088 	blt.w	b8f6 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    b7e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b7ea:	f013 0f04 	tst.w	r3, #4
    b7ee:	f000 809c 	beq.w	b92a <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    b7f2:	9b03      	ldr	r3, [sp, #12]
    b7f4:	1d1a      	adds	r2, r3, #4
    b7f6:	9203      	str	r2, [sp, #12]
    b7f8:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    b7fc:	f1ba 0f00 	cmp.w	sl, #0
    b800:	f2c0 808a 	blt.w	b918 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    b804:	2300      	movs	r3, #0
    b806:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    b808:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    b80a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b80e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    b812:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b816:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    b81a:	2b01      	cmp	r3, #1
    b81c:	f000 808e 	beq.w	b93c <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    b820:	2b02      	cmp	r3, #2
    b822:	f000 80d3 	beq.w	b9cc <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    b826:	2b04      	cmp	r3, #4
    b828:	f000 8124 	beq.w	ba74 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    b82c:	2b03      	cmp	r3, #3
    b82e:	f000 813b 	beq.w	baa8 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    b832:	f89d 8018 	ldrb.w	r8, [sp, #24]
    b836:	f018 0b03 	ands.w	fp, r8, #3
    b83a:	f040 813b 	bne.w	bab4 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    b83e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b842:	3b25      	subs	r3, #37	; 0x25
    b844:	2b53      	cmp	r3, #83	; 0x53
    b846:	f200 81ca 	bhi.w	bbde <z_cbvprintf_impl+0x45a>
    b84a:	e8df f013 	tbh	[pc, r3, lsl #1]
    b84e:	0140      	.short	0x0140
    b850:	01c801c8 	.word	0x01c801c8
    b854:	01c801c8 	.word	0x01c801c8
    b858:	01c801c8 	.word	0x01c801c8
    b85c:	01c801c8 	.word	0x01c801c8
    b860:	01c801c8 	.word	0x01c801c8
    b864:	01c801c8 	.word	0x01c801c8
    b868:	01c801c8 	.word	0x01c801c8
    b86c:	01c801c8 	.word	0x01c801c8
    b870:	01c801c8 	.word	0x01c801c8
    b874:	01c801c8 	.word	0x01c801c8
    b878:	01c801c8 	.word	0x01c801c8
    b87c:	01c801c8 	.word	0x01c801c8
    b880:	01c801c8 	.word	0x01c801c8
    b884:	01c801c8 	.word	0x01c801c8
    b888:	01c801c8 	.word	0x01c801c8
    b88c:	01c801c8 	.word	0x01c801c8
    b890:	01c801c8 	.word	0x01c801c8
    b894:	01c801c8 	.word	0x01c801c8
    b898:	01c801c8 	.word	0x01c801c8
    b89c:	01c801c8 	.word	0x01c801c8
    b8a0:	01c801c8 	.word	0x01c801c8
    b8a4:	01c801c8 	.word	0x01c801c8
    b8a8:	01c801c8 	.word	0x01c801c8
    b8ac:	01c801c8 	.word	0x01c801c8
    b8b0:	01c801c8 	.word	0x01c801c8
    b8b4:	01c80181 	.word	0x01c80181
    b8b8:	01c801c8 	.word	0x01c801c8
    b8bc:	01c801c8 	.word	0x01c801c8
    b8c0:	01c801c8 	.word	0x01c801c8
    b8c4:	01c801c8 	.word	0x01c801c8
    b8c8:	015e01c8 	.word	0x015e01c8
    b8cc:	01c80167 	.word	0x01c80167
    b8d0:	01c801c8 	.word	0x01c801c8
    b8d4:	016701c8 	.word	0x016701c8
    b8d8:	01c801c8 	.word	0x01c801c8
    b8dc:	01c801c8 	.word	0x01c801c8
    b8e0:	018101bd 	.word	0x018101bd
    b8e4:	01c801a1 	.word	0x01c801a1
    b8e8:	014d01c8 	.word	0x014d01c8
    b8ec:	018101c8 	.word	0x018101c8
    b8f0:	01c801c8 	.word	0x01c801c8
    b8f4:	0181      	.short	0x0181
				conv->flag_dash = true;
    b8f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b8fa:	f043 0304 	orr.w	r3, r3, #4
    b8fe:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    b902:	427f      	negs	r7, r7
    b904:	e76f      	b.n	b7e6 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    b906:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    b90a:	2b00      	cmp	r3, #0
    b90c:	db02      	blt.n	b914 <z_cbvprintf_impl+0x190>
		int width = -1;
    b90e:	f04f 37ff 	mov.w	r7, #4294967295
    b912:	e768      	b.n	b7e6 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    b914:	9f07      	ldr	r7, [sp, #28]
    b916:	e766      	b.n	b7e6 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    b918:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b91c:	f36f 0341 	bfc	r3, #1, #1
    b920:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    b924:	f04f 3aff 	mov.w	sl, #4294967295
    b928:	e76c      	b.n	b804 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    b92a:	f013 0f02 	tst.w	r3, #2
    b92e:	d002      	beq.n	b936 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    b930:	f8dd a020 	ldr.w	sl, [sp, #32]
    b934:	e766      	b.n	b804 <z_cbvprintf_impl+0x80>
		int precision = -1;
    b936:	f04f 3aff 	mov.w	sl, #4294967295
    b93a:	e763      	b.n	b804 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    b93c:	1ecb      	subs	r3, r1, #3
    b93e:	2b04      	cmp	r3, #4
    b940:	d804      	bhi.n	b94c <z_cbvprintf_impl+0x1c8>
    b942:	e8df f003 	tbb	[pc, r3]
    b946:	1d0b      	.short	0x1d0b
    b948:	3529      	.short	0x3529
    b94a:	35          	.byte	0x35
    b94b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b94c:	9b03      	ldr	r3, [sp, #12]
    b94e:	1d1a      	adds	r2, r3, #4
    b950:	9203      	str	r2, [sp, #12]
    b952:	681b      	ldr	r3, [r3, #0]
    b954:	17da      	asrs	r2, r3, #31
    b956:	9304      	str	r3, [sp, #16]
    b958:	9205      	str	r2, [sp, #20]
				break;
    b95a:	e006      	b.n	b96a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    b95c:	9b03      	ldr	r3, [sp, #12]
    b95e:	1d1a      	adds	r2, r3, #4
    b960:	9203      	str	r2, [sp, #12]
    b962:	681b      	ldr	r3, [r3, #0]
    b964:	17da      	asrs	r2, r3, #31
    b966:	9304      	str	r3, [sp, #16]
    b968:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    b96a:	2901      	cmp	r1, #1
    b96c:	d028      	beq.n	b9c0 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    b96e:	2902      	cmp	r1, #2
    b970:	f47f af5f 	bne.w	b832 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    b974:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    b978:	17da      	asrs	r2, r3, #31
    b97a:	9304      	str	r3, [sp, #16]
    b97c:	9205      	str	r2, [sp, #20]
    b97e:	e758      	b.n	b832 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    b980:	9b03      	ldr	r3, [sp, #12]
    b982:	3307      	adds	r3, #7
    b984:	f023 0307 	bic.w	r3, r3, #7
    b988:	f103 0208 	add.w	r2, r3, #8
    b98c:	9203      	str	r2, [sp, #12]
    b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b992:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b996:	e7e8      	b.n	b96a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    b998:	9b03      	ldr	r3, [sp, #12]
    b99a:	3307      	adds	r3, #7
    b99c:	f023 0307 	bic.w	r3, r3, #7
    b9a0:	f103 0208 	add.w	r2, r3, #8
    b9a4:	9203      	str	r2, [sp, #12]
    b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b9aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b9ae:	e7dc      	b.n	b96a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b9b0:	9b03      	ldr	r3, [sp, #12]
    b9b2:	1d1a      	adds	r2, r3, #4
    b9b4:	9203      	str	r2, [sp, #12]
    b9b6:	681b      	ldr	r3, [r3, #0]
    b9b8:	17da      	asrs	r2, r3, #31
				value->sint =
    b9ba:	9304      	str	r3, [sp, #16]
    b9bc:	9205      	str	r2, [sp, #20]
				break;
    b9be:	e7d4      	b.n	b96a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    b9c0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    b9c4:	17da      	asrs	r2, r3, #31
    b9c6:	9304      	str	r3, [sp, #16]
    b9c8:	9205      	str	r2, [sp, #20]
    b9ca:	e732      	b.n	b832 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    b9cc:	1ecb      	subs	r3, r1, #3
    b9ce:	2b04      	cmp	r3, #4
    b9d0:	d804      	bhi.n	b9dc <z_cbvprintf_impl+0x258>
    b9d2:	e8df f003 	tbb	[pc, r3]
    b9d6:	1f0b      	.short	0x1f0b
    b9d8:	4135      	.short	0x4135
    b9da:	41          	.byte	0x41
    b9db:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    b9dc:	9b03      	ldr	r3, [sp, #12]
    b9de:	1d1a      	adds	r2, r3, #4
    b9e0:	9203      	str	r2, [sp, #12]
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	9304      	str	r3, [sp, #16]
    b9e6:	2300      	movs	r3, #0
    b9e8:	9305      	str	r3, [sp, #20]
				break;
    b9ea:	e01e      	b.n	ba2a <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    b9ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    b9f0:	2b63      	cmp	r3, #99	; 0x63
    b9f2:	d007      	beq.n	ba04 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    b9f4:	9b03      	ldr	r3, [sp, #12]
    b9f6:	1d1a      	adds	r2, r3, #4
    b9f8:	9203      	str	r2, [sp, #12]
    b9fa:	681b      	ldr	r3, [r3, #0]
    b9fc:	9304      	str	r3, [sp, #16]
    b9fe:	2300      	movs	r3, #0
    ba00:	9305      	str	r3, [sp, #20]
    ba02:	e012      	b.n	ba2a <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    ba04:	9b03      	ldr	r3, [sp, #12]
    ba06:	1d1a      	adds	r2, r3, #4
    ba08:	9203      	str	r2, [sp, #12]
    ba0a:	681b      	ldr	r3, [r3, #0]
    ba0c:	9304      	str	r3, [sp, #16]
    ba0e:	2300      	movs	r3, #0
    ba10:	9305      	str	r3, [sp, #20]
    ba12:	e00a      	b.n	ba2a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    ba14:	9b03      	ldr	r3, [sp, #12]
    ba16:	3307      	adds	r3, #7
    ba18:	f023 0307 	bic.w	r3, r3, #7
    ba1c:	f103 0208 	add.w	r2, r3, #8
    ba20:	9203      	str	r2, [sp, #12]
    ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    ba26:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    ba2a:	2901      	cmp	r1, #1
    ba2c:	d01c      	beq.n	ba68 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    ba2e:	2902      	cmp	r1, #2
    ba30:	f47f aeff 	bne.w	b832 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    ba34:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ba38:	9304      	str	r3, [sp, #16]
    ba3a:	2300      	movs	r3, #0
    ba3c:	9305      	str	r3, [sp, #20]
    ba3e:	e6f8      	b.n	b832 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    ba40:	9b03      	ldr	r3, [sp, #12]
    ba42:	3307      	adds	r3, #7
    ba44:	f023 0307 	bic.w	r3, r3, #7
    ba48:	f103 0208 	add.w	r2, r3, #8
    ba4c:	9203      	str	r2, [sp, #12]
    ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    ba52:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    ba56:	e7e8      	b.n	ba2a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    ba58:	9b03      	ldr	r3, [sp, #12]
    ba5a:	1d1a      	adds	r2, r3, #4
    ba5c:	9203      	str	r2, [sp, #12]
    ba5e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    ba60:	9304      	str	r3, [sp, #16]
    ba62:	2300      	movs	r3, #0
    ba64:	9305      	str	r3, [sp, #20]
				break;
    ba66:	e7e0      	b.n	ba2a <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    ba68:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ba6c:	9304      	str	r3, [sp, #16]
    ba6e:	2300      	movs	r3, #0
    ba70:	9305      	str	r3, [sp, #20]
    ba72:	e6de      	b.n	b832 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    ba74:	2908      	cmp	r1, #8
    ba76:	d00b      	beq.n	ba90 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    ba78:	9b03      	ldr	r3, [sp, #12]
    ba7a:	3307      	adds	r3, #7
    ba7c:	f023 0307 	bic.w	r3, r3, #7
    ba80:	f103 0208 	add.w	r2, r3, #8
    ba84:	9203      	str	r2, [sp, #12]
    ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ba8e:	e6d0      	b.n	b832 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    ba90:	9b03      	ldr	r3, [sp, #12]
    ba92:	3307      	adds	r3, #7
    ba94:	f023 0307 	bic.w	r3, r3, #7
    ba98:	f103 0208 	add.w	r2, r3, #8
    ba9c:	9203      	str	r2, [sp, #12]
    ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    baa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    baa6:	e6c4      	b.n	b832 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    baa8:	9b03      	ldr	r3, [sp, #12]
    baaa:	1d1a      	adds	r2, r3, #4
    baac:	9203      	str	r2, [sp, #12]
    baae:	681b      	ldr	r3, [r3, #0]
    bab0:	9304      	str	r3, [sp, #16]
    bab2:	e6be      	b.n	b832 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    bab4:	9f02      	ldr	r7, [sp, #8]
    bab6:	463b      	mov	r3, r7
    bab8:	464a      	mov	r2, r9
    baba:	4629      	mov	r1, r5
    babc:	4630      	mov	r0, r6
    babe:	f006 ffe9 	bl	12a94 <outs>
    bac2:	2800      	cmp	r0, #0
    bac4:	f2c0 8125 	blt.w	bd12 <z_cbvprintf_impl+0x58e>
    bac8:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    baca:	46b9      	mov	r9, r7
			continue;
    bacc:	e662      	b.n	b794 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    bace:	4629      	mov	r1, r5
    bad0:	2025      	movs	r0, #37	; 0x25
    bad2:	47b0      	blx	r6
    bad4:	2800      	cmp	r0, #0
    bad6:	f2c0 811c 	blt.w	bd12 <z_cbvprintf_impl+0x58e>
    bada:	3401      	adds	r4, #1
		char sign = 0;
    badc:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    bade:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    bae2:	f04f 0900 	mov.w	r9, #0
			break;
    bae6:	e07f      	b.n	bbe8 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    bae8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    baec:	f1ba 0f00 	cmp.w	sl, #0
    baf0:	db07      	blt.n	bb02 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    baf2:	4651      	mov	r1, sl
    baf4:	4648      	mov	r0, r9
    baf6:	f007 f912 	bl	12d1e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    bafa:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    bafe:	46d8      	mov	r8, fp
			precision = -1;

			break;
    bb00:	e072      	b.n	bbe8 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    bb02:	4648      	mov	r0, r9
    bb04:	f007 f902 	bl	12d0c <strlen>
    bb08:	e7f7      	b.n	bafa <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    bb0a:	9b04      	ldr	r3, [sp, #16]
    bb0c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    bb10:	46d8      	mov	r8, fp
			bpe = buf + 1;
    bb12:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    bb16:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    bb1a:	e065      	b.n	bbe8 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    bb1c:	f018 0f08 	tst.w	r8, #8
    bb20:	d105      	bne.n	bb2e <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    bb22:	f018 0810 	ands.w	r8, r8, #16
    bb26:	d004      	beq.n	bb32 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    bb28:	f04f 0820 	mov.w	r8, #32
    bb2c:	e001      	b.n	bb32 <z_cbvprintf_impl+0x3ae>
				sign = '+';
    bb2e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    bb32:	9a04      	ldr	r2, [sp, #16]
    bb34:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    bb36:	2b00      	cmp	r3, #0
    bb38:	db02      	blt.n	bb40 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    bb3a:	9204      	str	r2, [sp, #16]
    bb3c:	9305      	str	r3, [sp, #20]
    bb3e:	e008      	b.n	bb52 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    bb40:	4252      	negs	r2, r2
    bb42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bb46:	9204      	str	r2, [sp, #16]
    bb48:	9305      	str	r3, [sp, #20]
				sign = '-';
    bb4a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    bb4e:	e000      	b.n	bb52 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    bb50:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    bb52:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    bb56:	9300      	str	r3, [sp, #0]
    bb58:	ab0a      	add	r3, sp, #40	; 0x28
    bb5a:	aa06      	add	r2, sp, #24
    bb5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    bb60:	f006 ff29 	bl	129b6 <encode_uint>
    bb64:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    bb66:	f1ba 0f00 	cmp.w	sl, #0
    bb6a:	db6c      	blt.n	bc46 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    bb6c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    bb70:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    bb74:	f89d 2018 	ldrb.w	r2, [sp, #24]
    bb78:	f36f 1286 	bfc	r2, #6, #1
    bb7c:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    bb80:	459a      	cmp	sl, r3
    bb82:	d963      	bls.n	bc4c <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    bb84:	ebaa 0303 	sub.w	r3, sl, r3
    bb88:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    bb8a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    bb8e:	e02b      	b.n	bbe8 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    bb90:	9804      	ldr	r0, [sp, #16]
    bb92:	b928      	cbnz	r0, bba0 <z_cbvprintf_impl+0x41c>
		char sign = 0;
    bb94:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    bb96:	f8df a180 	ldr.w	sl, [pc, #384]	; bd18 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    bb9a:	f1aa 0905 	sub.w	r9, sl, #5
    bb9e:	e023      	b.n	bbe8 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    bba0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    bba4:	9300      	str	r3, [sp, #0]
    bba6:	ab0a      	add	r3, sp, #40	; 0x28
    bba8:	aa06      	add	r2, sp, #24
    bbaa:	2100      	movs	r1, #0
    bbac:	f006 ff03 	bl	129b6 <encode_uint>
    bbb0:	4681      	mov	r9, r0
				conv->altform_0c = true;
    bbb2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    bbb6:	f043 0310 	orr.w	r3, r3, #16
    bbba:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    bbbe:	2378      	movs	r3, #120	; 0x78
    bbc0:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    bbc4:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    bbc6:	e7ce      	b.n	bb66 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    bbc8:	4622      	mov	r2, r4
    bbca:	9904      	ldr	r1, [sp, #16]
    bbcc:	a806      	add	r0, sp, #24
    bbce:	f006 ff42 	bl	12a56 <store_count>
		char sign = 0;
    bbd2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    bbd4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    bbd8:	f04f 0900 	mov.w	r9, #0
			}

			break;
    bbdc:	e004      	b.n	bbe8 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    bbde:	46d8      	mov	r8, fp
    bbe0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    bbe4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    bbe8:	f1b9 0f00 	cmp.w	r9, #0
    bbec:	f000 808d 	beq.w	bd0a <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    bbf0:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    bbf4:	f1b8 0f00 	cmp.w	r8, #0
    bbf8:	d000      	beq.n	bbfc <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    bbfa:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    bbfc:	f89d 201a 	ldrb.w	r2, [sp, #26]
    bc00:	f012 0f10 	tst.w	r2, #16
    bc04:	d025      	beq.n	bc52 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    bc06:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    bc08:	9907      	ldr	r1, [sp, #28]
    bc0a:	440b      	add	r3, r1
		if (conv->pad_fp) {
    bc0c:	f012 0f40 	tst.w	r2, #64	; 0x40
    bc10:	d001      	beq.n	bc16 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    bc12:	9a08      	ldr	r2, [sp, #32]
    bc14:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    bc16:	2f00      	cmp	r7, #0
    bc18:	dd31      	ble.n	bc7e <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    bc1a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    bc1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    bc20:	f013 0f04 	tst.w	r3, #4
    bc24:	d12b      	bne.n	bc7e <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    bc26:	f013 0f40 	tst.w	r3, #64	; 0x40
    bc2a:	d017      	beq.n	bc5c <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    bc2c:	f1b8 0f00 	cmp.w	r8, #0
    bc30:	d017      	beq.n	bc62 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    bc32:	4629      	mov	r1, r5
    bc34:	4640      	mov	r0, r8
    bc36:	47b0      	blx	r6
    bc38:	2800      	cmp	r0, #0
    bc3a:	db6a      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bc3c:	3401      	adds	r4, #1
						sign = 0;
    bc3e:	46d8      	mov	r8, fp
					}
					pad = '0';
    bc40:	f04f 0b30 	mov.w	fp, #48	; 0x30
    bc44:	e00f      	b.n	bc66 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    bc46:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    bc4a:	e7cd      	b.n	bbe8 <z_cbvprintf_impl+0x464>
    bc4c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    bc50:	e7ca      	b.n	bbe8 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    bc52:	f012 0f08 	tst.w	r2, #8
    bc56:	d0d7      	beq.n	bc08 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    bc58:	3301      	adds	r3, #1
    bc5a:	e7d5      	b.n	bc08 <z_cbvprintf_impl+0x484>
				char pad = ' ';
    bc5c:	f04f 0b20 	mov.w	fp, #32
    bc60:	e001      	b.n	bc66 <z_cbvprintf_impl+0x4e2>
					pad = '0';
    bc62:	f04f 0b30 	mov.w	fp, #48	; 0x30
    bc66:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    bc68:	1e5f      	subs	r7, r3, #1
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	dd07      	ble.n	bc7e <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    bc6e:	4629      	mov	r1, r5
    bc70:	4658      	mov	r0, fp
    bc72:	47b0      	blx	r6
    bc74:	2800      	cmp	r0, #0
    bc76:	db4c      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bc78:	3401      	adds	r4, #1
				while (width-- > 0) {
    bc7a:	463b      	mov	r3, r7
    bc7c:	e7f4      	b.n	bc68 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    bc7e:	f1b8 0f00 	cmp.w	r8, #0
    bc82:	d005      	beq.n	bc90 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    bc84:	4629      	mov	r1, r5
    bc86:	4640      	mov	r0, r8
    bc88:	47b0      	blx	r6
    bc8a:	2800      	cmp	r0, #0
    bc8c:	db41      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bc8e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    bc90:	f89d 301a 	ldrb.w	r3, [sp, #26]
    bc94:	f3c3 1200 	ubfx	r2, r3, #4, #1
    bc98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    bc9c:	431a      	orrs	r2, r3
    bc9e:	d005      	beq.n	bcac <z_cbvprintf_impl+0x528>
				OUTC('0');
    bca0:	4629      	mov	r1, r5
    bca2:	2030      	movs	r0, #48	; 0x30
    bca4:	47b0      	blx	r6
    bca6:	2800      	cmp	r0, #0
    bca8:	db33      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bcaa:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    bcac:	f89d 301a 	ldrb.w	r3, [sp, #26]
    bcb0:	f013 0f10 	tst.w	r3, #16
    bcb4:	d006      	beq.n	bcc4 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    bcb6:	4629      	mov	r1, r5
    bcb8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    bcbc:	47b0      	blx	r6
    bcbe:	2800      	cmp	r0, #0
    bcc0:	db27      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bcc2:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    bcc4:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    bcc6:	f103 38ff 	add.w	r8, r3, #4294967295
    bcca:	2b00      	cmp	r3, #0
    bccc:	dd07      	ble.n	bcde <z_cbvprintf_impl+0x55a>
				OUTC('0');
    bcce:	4629      	mov	r1, r5
    bcd0:	2030      	movs	r0, #48	; 0x30
    bcd2:	47b0      	blx	r6
    bcd4:	2800      	cmp	r0, #0
    bcd6:	db1c      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bcd8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    bcda:	4643      	mov	r3, r8
    bcdc:	e7f3      	b.n	bcc6 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    bcde:	4653      	mov	r3, sl
    bce0:	464a      	mov	r2, r9
    bce2:	4629      	mov	r1, r5
    bce4:	4630      	mov	r0, r6
    bce6:	f006 fed5 	bl	12a94 <outs>
    bcea:	2800      	cmp	r0, #0
    bcec:	db11      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bcee:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    bcf0:	2f00      	cmp	r7, #0
    bcf2:	dd07      	ble.n	bd04 <z_cbvprintf_impl+0x580>
			OUTC(' ');
    bcf4:	4629      	mov	r1, r5
    bcf6:	2020      	movs	r0, #32
    bcf8:	47b0      	blx	r6
    bcfa:	2800      	cmp	r0, #0
    bcfc:	db09      	blt.n	bd12 <z_cbvprintf_impl+0x58e>
    bcfe:	3401      	adds	r4, #1
			--width;
    bd00:	3f01      	subs	r7, #1
    bd02:	e7f5      	b.n	bcf0 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    bd04:	f8dd 9008 	ldr.w	r9, [sp, #8]
    bd08:	e544      	b.n	b794 <z_cbvprintf_impl+0x10>
    bd0a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    bd0e:	e541      	b.n	b794 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    bd10:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    bd12:	b011      	add	sp, #68	; 0x44
    bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd18:	00016139 	.word	0x00016139

0000bd1c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bd1c:	f003 bc88 	b.w	f630 <SystemInit>

0000bd20 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	4605      	mov	r5, r0
    bd24:	f04f 0340 	mov.w	r3, #64	; 0x40
    bd28:	f3ef 8611 	mrs	r6, BASEPRI
    bd2c:	f383 8812 	msr	BASEPRI_MAX, r3
    bd30:	f3bf 8f6f 	isb	sy
    bd34:	4b0e      	ldr	r3, [pc, #56]	; (bd70 <pm_state_notify+0x50>)
    bd36:	681c      	ldr	r4, [r3, #0]
    bd38:	e00d      	b.n	bd56 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    bd3a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    bd3c:	b13a      	cbz	r2, bd4e <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    bd3e:	4b0d      	ldr	r3, [pc, #52]	; (bd74 <pm_state_notify+0x54>)
    bd40:	7c1b      	ldrb	r3, [r3, #16]
    bd42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bd46:	490c      	ldr	r1, [pc, #48]	; (bd78 <pm_state_notify+0x58>)
    bd48:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    bd4c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    bd4e:	4623      	mov	r3, r4
	return node->next;
    bd50:	6824      	ldr	r4, [r4, #0]
    bd52:	b104      	cbz	r4, bd56 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    bd54:	b123      	cbz	r3, bd60 <pm_state_notify+0x40>
    bd56:	b12c      	cbz	r4, bd64 <pm_state_notify+0x44>
		if (entering_state) {
    bd58:	2d00      	cmp	r5, #0
    bd5a:	d0ee      	beq.n	bd3a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    bd5c:	6862      	ldr	r2, [r4, #4]
    bd5e:	e7ed      	b.n	bd3c <pm_state_notify+0x1c>
    bd60:	461c      	mov	r4, r3
    bd62:	e7f8      	b.n	bd56 <pm_state_notify+0x36>
	__asm__ volatile(
    bd64:	f386 8811 	msr	BASEPRI, r6
    bd68:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    bd6c:	bd70      	pop	{r4, r5, r6, pc}
    bd6e:	bf00      	nop
    bd70:	20001ab4 	.word	0x20001ab4
    bd74:	20002174 	.word	0x20002174
    bd78:	20001aa8 	.word	0x20001aa8

0000bd7c <pm_exit_pos_ops>:
{
    bd7c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    bd7e:	4b06      	ldr	r3, [pc, #24]	; (bd98 <pm_exit_pos_ops+0x1c>)
    bd80:	b123      	cbz	r3, bd8c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    bd82:	7841      	ldrb	r1, [r0, #1]
    bd84:	7800      	ldrb	r0, [r0, #0]
    bd86:	f007 f84d 	bl	12e24 <pm_state_exit_post_ops>
}
    bd8a:	bd08      	pop	{r3, pc}
    bd8c:	2300      	movs	r3, #0
    bd8e:	f383 8811 	msr	BASEPRI, r3
    bd92:	f3bf 8f6f 	isb	sy
    bd96:	e7f8      	b.n	bd8a <pm_exit_pos_ops+0xe>
    bd98:	00012e25 	.word	0x00012e25

0000bd9c <pm_system_resume>:

void pm_system_resume(void)
{
    bd9c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    bd9e:	4b0e      	ldr	r3, [pc, #56]	; (bdd8 <pm_system_resume+0x3c>)
    bda0:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    bda2:	4621      	mov	r1, r4
    bda4:	480d      	ldr	r0, [pc, #52]	; (bddc <pm_system_resume+0x40>)
    bda6:	f006 fe9e 	bl	12ae6 <atomic_test_and_clear_bit>
    bdaa:	b900      	cbnz	r0, bdae <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    bdac:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    bdae:	0065      	lsls	r5, r4, #1
    bdb0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    bdb4:	4e0a      	ldr	r6, [pc, #40]	; (bde0 <pm_system_resume+0x44>)
    bdb6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    bdba:	f7ff ffdf 	bl	bd7c <pm_exit_pos_ops>
		pm_state_notify(false);
    bdbe:	2000      	movs	r0, #0
    bdc0:	f7ff ffae 	bl	bd20 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    bdc4:	192b      	adds	r3, r5, r4
    bdc6:	0099      	lsls	r1, r3, #2
    bdc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    bdcc:	2200      	movs	r2, #0
    bdce:	5072      	str	r2, [r6, r1]
    bdd0:	605a      	str	r2, [r3, #4]
    bdd2:	609a      	str	r2, [r3, #8]
}
    bdd4:	e7ea      	b.n	bdac <pm_system_resume+0x10>
    bdd6:	bf00      	nop
    bdd8:	20002174 	.word	0x20002174
    bddc:	20001abc 	.word	0x20001abc
    bde0:	20001aa8 	.word	0x20001aa8

0000bde4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bde6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    bde8:	4b38      	ldr	r3, [pc, #224]	; (becc <pm_system_suspend+0xe8>)
    bdea:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    bdec:	f04f 0340 	mov.w	r3, #64	; 0x40
    bdf0:	f3ef 8611 	mrs	r6, BASEPRI
    bdf4:	f383 8812 	msr	BASEPRI_MAX, r3
    bdf8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    bdfc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    be00:	4b33      	ldr	r3, [pc, #204]	; (bed0 <pm_system_suspend+0xec>)
    be02:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    be06:	2b00      	cmp	r3, #0
    be08:	d039      	beq.n	be7e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    be0a:	4b32      	ldr	r3, [pc, #200]	; (bed4 <pm_system_suspend+0xf0>)
    be0c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    be10:	4f2f      	ldr	r7, [pc, #188]	; (bed0 <pm_system_suspend+0xec>)
    be12:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    be16:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    be1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    be1e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    be22:	2300      	movs	r3, #0
    be24:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    be28:	f386 8811 	msr	BASEPRI, r6
    be2c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    be30:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    be34:	4a27      	ldr	r2, [pc, #156]	; (bed4 <pm_system_suspend+0xf0>)
    be36:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    be3a:	2b00      	cmp	r3, #0
    be3c:	d044      	beq.n	bec8 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    be3e:	f1b5 3fff 	cmp.w	r5, #4294967295
    be42:	d12b      	bne.n	be9c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    be44:	f005 f890 	bl	10f68 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    be48:	2001      	movs	r0, #1
    be4a:	f7ff ff69 	bl	bd20 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    be4e:	4621      	mov	r1, r4
    be50:	4821      	ldr	r0, [pc, #132]	; (bed8 <pm_system_suspend+0xf4>)
    be52:	f006 fe64 	bl	12b1e <atomic_set_bit>
	if (pm_state_set != NULL) {
    be56:	4b21      	ldr	r3, [pc, #132]	; (bedc <pm_system_suspend+0xf8>)
    be58:	b15b      	cbz	r3, be72 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    be5a:	4a1e      	ldr	r2, [pc, #120]	; (bed4 <pm_system_suspend+0xf0>)
    be5c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    be60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    be64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    be68:	7859      	ldrb	r1, [r3, #1]
    be6a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    be6e:	f006 ffd1 	bl	12e14 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    be72:	f7ff ff93 	bl	bd9c <pm_system_resume>
	k_sched_unlock();
    be76:	f005 fa63 	bl	11340 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    be7a:	2001      	movs	r0, #1
}
    be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    be7e:	4601      	mov	r1, r0
    be80:	4620      	mov	r0, r4
    be82:	f000 f831 	bl	bee8 <pm_policy_next_state>
		if (info != NULL) {
    be86:	2800      	cmp	r0, #0
    be88:	d0ce      	beq.n	be28 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    be8a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    be8e:	4b11      	ldr	r3, [pc, #68]	; (bed4 <pm_system_suspend+0xf0>)
    be90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    be94:	c807      	ldmia	r0, {r0, r1, r2}
    be96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    be9a:	e7c5      	b.n	be28 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    be9c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    bea0:	4b0c      	ldr	r3, [pc, #48]	; (bed4 <pm_system_suspend+0xf0>)
    bea2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bea6:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    bea8:	0c41      	lsrs	r1, r0, #17
    beaa:	03c0      	lsls	r0, r0, #15
    beac:	4b0c      	ldr	r3, [pc, #48]	; (bee0 <pm_system_suspend+0xfc>)
    beae:	18c0      	adds	r0, r0, r3
    beb0:	4a0c      	ldr	r2, [pc, #48]	; (bee4 <pm_system_suspend+0x100>)
    beb2:	f04f 0300 	mov.w	r3, #0
    beb6:	f141 0100 	adc.w	r1, r1, #0
    beba:	f7f4 fd05 	bl	8c8 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    bebe:	2101      	movs	r1, #1
    bec0:	1a28      	subs	r0, r5, r0
    bec2:	f003 f8e3 	bl	f08c <sys_clock_set_timeout>
    bec6:	e7bd      	b.n	be44 <pm_system_suspend+0x60>
		return false;
    bec8:	2000      	movs	r0, #0
    beca:	e7d7      	b.n	be7c <pm_system_suspend+0x98>
    becc:	20002174 	.word	0x20002174
    bed0:	20001a9c 	.word	0x20001a9c
    bed4:	20001aa8 	.word	0x20001aa8
    bed8:	20001abc 	.word	0x20001abc
    bedc:	00012e15 	.word	0x00012e15
    bee0:	000f423f 	.word	0x000f423f
    bee4:	000f4240 	.word	0x000f4240

0000bee8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beec:	b082      	sub	sp, #8
    beee:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    bef0:	a901      	add	r1, sp, #4
    bef2:	f000 f845 	bl	bf80 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bef6:	1e44      	subs	r4, r0, #1
    bef8:	b224      	sxth	r4, r4
    befa:	e007      	b.n	bf0c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    befc:	f1b6 3fff 	cmp.w	r6, #4294967295
    bf00:	d033      	beq.n	bf6a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    bf02:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    bf04:	45b0      	cmp	r8, r6
    bf06:	d930      	bls.n	bf6a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bf08:	3c01      	subs	r4, #1
    bf0a:	b224      	sxth	r4, r4
    bf0c:	2c00      	cmp	r4, #0
    bf0e:	db2b      	blt.n	bf68 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    bf10:	9b01      	ldr	r3, [sp, #4]
    bf12:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    bf16:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    bf1a:	7869      	ldrb	r1, [r5, #1]
    bf1c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    bf20:	f006 fe10 	bl	12b44 <pm_policy_state_lock_is_active>
    bf24:	2800      	cmp	r0, #0
    bf26:	d1ef      	bne.n	bf08 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    bf28:	6868      	ldr	r0, [r5, #4]
    bf2a:	0c41      	lsrs	r1, r0, #17
    bf2c:	03c0      	lsls	r0, r0, #15
    bf2e:	4f11      	ldr	r7, [pc, #68]	; (bf74 <pm_policy_next_state+0x8c>)
    bf30:	19c0      	adds	r0, r0, r7
    bf32:	4a11      	ldr	r2, [pc, #68]	; (bf78 <pm_policy_next_state+0x90>)
    bf34:	f04f 0300 	mov.w	r3, #0
    bf38:	f141 0100 	adc.w	r1, r1, #0
    bf3c:	f7f4 fcc4 	bl	8c8 <__aeabi_uldivmod>
    bf40:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    bf42:	68ab      	ldr	r3, [r5, #8]
    bf44:	0c59      	lsrs	r1, r3, #17
    bf46:	03db      	lsls	r3, r3, #15
    bf48:	19d8      	adds	r0, r3, r7
    bf4a:	4a0b      	ldr	r2, [pc, #44]	; (bf78 <pm_policy_next_state+0x90>)
    bf4c:	f04f 0300 	mov.w	r3, #0
    bf50:	f141 0100 	adc.w	r1, r1, #0
    bf54:	f7f4 fcb8 	bl	8c8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bf58:	4b08      	ldr	r3, [pc, #32]	; (bf7c <pm_policy_next_state+0x94>)
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    bf60:	d0cc      	beq.n	befc <pm_policy_next_state+0x14>
    bf62:	4283      	cmp	r3, r0
    bf64:	d8ca      	bhi.n	befc <pm_policy_next_state+0x14>
    bf66:	e7cf      	b.n	bf08 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    bf68:	2500      	movs	r5, #0
}
    bf6a:	4628      	mov	r0, r5
    bf6c:	b002      	add	sp, #8
    bf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf72:	bf00      	nop
    bf74:	000f423f 	.word	0x000f423f
    bf78:	000f4240 	.word	0x000f4240
    bf7c:	20000378 	.word	0x20000378

0000bf80 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    bf80:	b908      	cbnz	r0, bf86 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    bf82:	4b02      	ldr	r3, [pc, #8]	; (bf8c <pm_state_cpu_get_all+0xc>)
    bf84:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    bf86:	2000      	movs	r0, #0
    bf88:	4770      	bx	lr
    bf8a:	bf00      	nop
    bf8c:	00016140 	.word	0x00016140

0000bf90 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    bf90:	4901      	ldr	r1, [pc, #4]	; (bf98 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    bf92:	2210      	movs	r2, #16
	str	r2, [r1]
    bf94:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    bf96:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    bf98:	e000ed10 	.word	0xe000ed10

0000bf9c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    bf9c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    bf9e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    bfa0:	f380 8811 	msr	BASEPRI, r0
	isb
    bfa4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    bfa8:	f3bf 8f4f 	dsb	sy
    bfac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    bfae:	b662      	cpsie	i
	isb
    bfb0:	f3bf 8f6f 	isb	sy

	bx	lr
    bfb4:	4770      	bx	lr
    bfb6:	bf00      	nop

0000bfb8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    bfb8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    bfba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    bfbc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    bfc0:	f3bf 8f4f 	dsb	sy
    bfc4:	bf20      	wfe

	msr	BASEPRI, r0
    bfc6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    bfca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    bfcc:	4770      	bx	lr
    bfce:	bf00      	nop

0000bfd0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bfd0:	2800      	cmp	r0, #0
    bfd2:	db07      	blt.n	bfe4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bfd4:	f000 021f 	and.w	r2, r0, #31
    bfd8:	0940      	lsrs	r0, r0, #5
    bfda:	2301      	movs	r3, #1
    bfdc:	4093      	lsls	r3, r2
    bfde:	4a02      	ldr	r2, [pc, #8]	; (bfe8 <__NVIC_EnableIRQ+0x18>)
    bfe0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    bfe4:	4770      	bx	lr
    bfe6:	bf00      	nop
    bfe8:	e000e100 	.word	0xe000e100

0000bfec <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bfec:	2800      	cmp	r0, #0
    bfee:	db0c      	blt.n	c00a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bff0:	f000 021f 	and.w	r2, r0, #31
    bff4:	0940      	lsrs	r0, r0, #5
    bff6:	2301      	movs	r3, #1
    bff8:	4093      	lsls	r3, r2
    bffa:	3020      	adds	r0, #32
    bffc:	4a03      	ldr	r2, [pc, #12]	; (c00c <__NVIC_DisableIRQ+0x20>)
    bffe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c006:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c00a:	4770      	bx	lr
    c00c:	e000e100 	.word	0xe000e100

0000c010 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c010:	2800      	cmp	r0, #0
    c012:	db08      	blt.n	c026 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c014:	0149      	lsls	r1, r1, #5
    c016:	b2c9      	uxtb	r1, r1
    c018:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    c01c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    c020:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    c024:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c026:	f000 000f 	and.w	r0, r0, #15
    c02a:	0149      	lsls	r1, r1, #5
    c02c:	b2c9      	uxtb	r1, r1
    c02e:	4b01      	ldr	r3, [pc, #4]	; (c034 <__NVIC_SetPriority+0x24>)
    c030:	5419      	strb	r1, [r3, r0]
  }
}
    c032:	4770      	bx	lr
    c034:	e000ed14 	.word	0xe000ed14

0000c038 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c038:	0942      	lsrs	r2, r0, #5
    c03a:	4b05      	ldr	r3, [pc, #20]	; (c050 <arch_irq_is_enabled+0x18>)
    c03c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c040:	f000 001f 	and.w	r0, r0, #31
    c044:	2301      	movs	r3, #1
    c046:	fa03 f000 	lsl.w	r0, r3, r0
}
    c04a:	4010      	ands	r0, r2
    c04c:	4770      	bx	lr
    c04e:	bf00      	nop
    c050:	e000e100 	.word	0xe000e100

0000c054 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    c054:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    c056:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    c058:	4b05      	ldr	r3, [pc, #20]	; (c070 <_arch_isr_direct_pm+0x1c>)
    c05a:	695b      	ldr	r3, [r3, #20]
    c05c:	b90b      	cbnz	r3, c062 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    c05e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    c060:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    c062:	4b03      	ldr	r3, [pc, #12]	; (c070 <_arch_isr_direct_pm+0x1c>)
    c064:	2200      	movs	r2, #0
    c066:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    c068:	f008 ff7b 	bl	14f62 <z_pm_save_idle_exit>
    c06c:	e7f7      	b.n	c05e <_arch_isr_direct_pm+0xa>
    c06e:	bf00      	nop
    c070:	20002174 	.word	0x20002174

0000c074 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c074:	bf30      	wfi
    b z_SysNmiOnReset
    c076:	f7ff bffd 	b.w	c074 <z_SysNmiOnReset>
    c07a:	bf00      	nop

0000c07c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c07c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c07e:	4b0b      	ldr	r3, [pc, #44]	; (c0ac <z_arm_prep_c+0x30>)
    c080:	4a0b      	ldr	r2, [pc, #44]	; (c0b0 <z_arm_prep_c+0x34>)
    c082:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    c086:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    c088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c08c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    c090:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c094:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    c098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c09c:	f004 faa0 	bl	105e0 <z_bss_zero>
	z_data_copy();
    c0a0:	f005 fab6 	bl	11610 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c0a4:	f000 fa80 	bl	c5a8 <z_arm_interrupt_init>
	z_cstart();
    c0a8:	f004 faf8 	bl	1069c <z_cstart>
    c0ac:	e000ed00 	.word	0xe000ed00
    c0b0:	00000000 	.word	0x00000000

0000c0b4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c0b4:	4a0a      	ldr	r2, [pc, #40]	; (c0e0 <arch_swap+0x2c>)
    c0b6:	6893      	ldr	r3, [r2, #8]
    c0b8:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    c0bc:	4909      	ldr	r1, [pc, #36]	; (c0e4 <arch_swap+0x30>)
    c0be:	6809      	ldr	r1, [r1, #0]
    c0c0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c0c4:	4908      	ldr	r1, [pc, #32]	; (c0e8 <arch_swap+0x34>)
    c0c6:	684b      	ldr	r3, [r1, #4]
    c0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c0cc:	604b      	str	r3, [r1, #4]
    c0ce:	2300      	movs	r3, #0
    c0d0:	f383 8811 	msr	BASEPRI, r3
    c0d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c0d8:	6893      	ldr	r3, [r2, #8]
}
    c0da:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    c0de:	4770      	bx	lr
    c0e0:	20002174 	.word	0x20002174
    c0e4:	000165f8 	.word	0x000165f8
    c0e8:	e000ed00 	.word	0xe000ed00

0000c0ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c0ec:	4913      	ldr	r1, [pc, #76]	; (c13c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c0ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c0f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c0f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c0f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c0fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c0fe:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    c100:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c104:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c108:	4f0d      	ldr	r7, [pc, #52]	; (c140 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c10a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c10e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    c110:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c112:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c114:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    c118:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c11a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c11e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    c122:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    c124:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    c126:	f000 faef 	bl	c708 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    c12a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c12e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c132:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c136:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c13a:	4770      	bx	lr
    ldr r1, =_kernel
    c13c:	20002174 	.word	0x20002174
    ldr v4, =_SCS_ICSR
    c140:	e000ed04 	.word	0xe000ed04

0000c144 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c144:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c148:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c14a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c14e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c152:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c154:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c158:	2902      	cmp	r1, #2
    beq _oops
    c15a:	d0ff      	beq.n	c15c <_oops>

0000c15c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c15c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    c15e:	f006 fcf7 	bl	12b50 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    c162:	bd01      	pop	{r0, pc}

0000c164 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    c164:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c166:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    c16a:	490e      	ldr	r1, [pc, #56]	; (c1a4 <arch_new_thread+0x40>)
    c16c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    c170:	f021 0101 	bic.w	r1, r1, #1
    c174:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    c178:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c17c:	9b01      	ldr	r3, [sp, #4]
    c17e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    c182:	9b02      	ldr	r3, [sp, #8]
    c184:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    c188:	9b03      	ldr	r3, [sp, #12]
    c18a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c18e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c192:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    c196:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    c198:	2300      	movs	r3, #0
    c19a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c19e:	bc10      	pop	{r4}
    c1a0:	4770      	bx	lr
    c1a2:	bf00      	nop
    c1a4:	00011f25 	.word	0x00011f25

0000c1a8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    c1a8:	4b10      	ldr	r3, [pc, #64]	; (c1ec <z_check_thread_stack_fail+0x44>)
    c1aa:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    c1ac:	b1bb      	cbz	r3, c1de <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c1ae:	f110 0f16 	cmn.w	r0, #22
    c1b2:	d00b      	beq.n	c1cc <z_check_thread_stack_fail+0x24>
    c1b4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    c1b8:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    c1bc:	4584      	cmp	ip, r0
    c1be:	d810      	bhi.n	c1e2 <z_check_thread_stack_fail+0x3a>
    c1c0:	4282      	cmp	r2, r0
    c1c2:	d910      	bls.n	c1e6 <z_check_thread_stack_fail+0x3e>
    c1c4:	428a      	cmp	r2, r1
    c1c6:	d807      	bhi.n	c1d8 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    c1c8:	2000      	movs	r0, #0
    c1ca:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c1cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    c1d0:	428a      	cmp	r2, r1
    c1d2:	d801      	bhi.n	c1d8 <z_check_thread_stack_fail+0x30>
	return 0;
    c1d4:	2000      	movs	r0, #0
}
    c1d6:	4770      	bx	lr
		return thread->stack_info.start;
    c1d8:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    c1dc:	4770      	bx	lr
		return 0;
    c1de:	2000      	movs	r0, #0
    c1e0:	4770      	bx	lr
	return 0;
    c1e2:	2000      	movs	r0, #0
    c1e4:	4770      	bx	lr
    c1e6:	2000      	movs	r0, #0
    c1e8:	4770      	bx	lr
    c1ea:	bf00      	nop
    c1ec:	20002174 	.word	0x20002174

0000c1f0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    c1f0:	b508      	push	{r3, lr}
    c1f2:	460d      	mov	r5, r1
    c1f4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c1f6:	4b08      	ldr	r3, [pc, #32]	; (c218 <arch_switch_to_main_thread+0x28>)
    c1f8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    c1fa:	f000 fa85 	bl	c708 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c1fe:	4620      	mov	r0, r4
    c200:	f385 8809 	msr	PSP, r5
    c204:	2100      	movs	r1, #0
    c206:	b663      	cpsie	if
    c208:	f381 8811 	msr	BASEPRI, r1
    c20c:	f3bf 8f6f 	isb	sy
    c210:	2200      	movs	r2, #0
    c212:	2300      	movs	r3, #0
    c214:	f005 fe86 	bl	11f24 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c218:	20002174 	.word	0x20002174

0000c21c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c21c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c21e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c220:	4a0b      	ldr	r2, [pc, #44]	; (c250 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c222:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    c224:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    c226:	bf1e      	ittt	ne
	movne	r1, #0
    c228:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c22a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    c22c:	f008 fe99 	blne	14f62 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c230:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    c232:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    c236:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c23a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    c23e:	4905      	ldr	r1, [pc, #20]	; (c254 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c240:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c242:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c244:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    c246:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    c24a:	4903      	ldr	r1, [pc, #12]	; (c258 <_isr_wrapper+0x3c>)
	bx r1
    c24c:	4708      	bx	r1
    c24e:	0000      	.short	0x0000
	ldr r2, =_kernel
    c250:	20002174 	.word	0x20002174
	ldr r1, =_sw_isr_table
    c254:	00015b98 	.word	0x00015b98
	ldr r1, =z_arm_int_exit
    c258:	0000c25d 	.word	0x0000c25d

0000c25c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    c25c:	4b04      	ldr	r3, [pc, #16]	; (c270 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    c25e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    c260:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    c262:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    c264:	d003      	beq.n	c26e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    c266:	4903      	ldr	r1, [pc, #12]	; (c274 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    c268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    c26c:	600a      	str	r2, [r1, #0]

0000c26e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    c26e:	4770      	bx	lr
	ldr r3, =_kernel
    c270:	20002174 	.word	0x20002174
	ldr r1, =_SCS_ICSR
    c274:	e000ed04 	.word	0xe000ed04

0000c278 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    c278:	b538      	push	{r3, r4, r5, lr}
    c27a:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    c27c:	4b20      	ldr	r3, [pc, #128]	; (c300 <bus_fault+0x88>)
    c27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c280:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c284:	d119      	bne.n	c2ba <bus_fault+0x42>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    c286:	2416      	movs	r4, #22
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    c288:	4b1d      	ldr	r3, [pc, #116]	; (c300 <bus_fault+0x88>)
    c28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c28c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c290:	d000      	beq.n	c294 <bus_fault+0x1c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    c292:	2418      	movs	r4, #24
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c294:	4b1a      	ldr	r3, [pc, #104]	; (c300 <bus_fault+0x88>)
    c296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c298:	f413 7f00 	tst.w	r3, #512	; 0x200
    c29c:	d010      	beq.n	c2c0 <bus_fault+0x48>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c29e:	4b18      	ldr	r3, [pc, #96]	; (c300 <bus_fault+0x88>)
    c2a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    c2a8:	d009      	beq.n	c2be <bus_fault+0x46>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    c2aa:	b1d9      	cbz	r1, c2e4 <bus_fault+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c2ac:	4a14      	ldr	r2, [pc, #80]	; (c300 <bus_fault+0x88>)
    c2ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c2b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c2b4:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c2b6:	2419      	movs	r4, #25
    c2b8:	e002      	b.n	c2c0 <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_STACKING;
    c2ba:	2417      	movs	r4, #23
    c2bc:	e7e4      	b.n	c288 <bus_fault+0x10>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c2be:	2419      	movs	r4, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c2c0:	4b0f      	ldr	r3, [pc, #60]	; (c300 <bus_fault+0x88>)
    c2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c2c8:	d000      	beq.n	c2cc <bus_fault+0x54>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    c2ca:	241a      	movs	r4, #26
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    c2cc:	4b0c      	ldr	r3, [pc, #48]	; (c300 <bus_fault+0x88>)
    c2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    c2d4:	d108      	bne.n	c2e8 <bus_fault+0x70>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    c2d6:	4b0a      	ldr	r3, [pc, #40]	; (c300 <bus_fault+0x88>)
    c2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    c2de:	d004      	beq.n	c2ea <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    c2e0:	241c      	movs	r4, #28
    c2e2:	e002      	b.n	c2ea <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c2e4:	2419      	movs	r4, #25
    c2e6:	e7eb      	b.n	c2c0 <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    c2e8:	241b      	movs	r4, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c2ea:	4a05      	ldr	r2, [pc, #20]	; (c300 <bus_fault+0x88>)
    c2ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c2ee:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    c2f2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    c2f4:	2101      	movs	r1, #1
    c2f6:	f006 fc52 	bl	12b9e <memory_fault_recoverable>
    c2fa:	7028      	strb	r0, [r5, #0]

	return reason;
}
    c2fc:	4620      	mov	r0, r4
    c2fe:	bd38      	pop	{r3, r4, r5, pc}
    c300:	e000ed00 	.word	0xe000ed00

0000c304 <usage_fault>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c304:	4b17      	ldr	r3, [pc, #92]	; (c364 <usage_fault+0x60>)
    c306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c308:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    c30c:	d125      	bne.n	c35a <usage_fault+0x56>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    c30e:	201d      	movs	r0, #29
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c310:	4b14      	ldr	r3, [pc, #80]	; (c364 <usage_fault+0x60>)
    c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c314:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    c318:	d000      	beq.n	c31c <usage_fault+0x18>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    c31a:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c31c:	4b11      	ldr	r3, [pc, #68]	; (c364 <usage_fault+0x60>)
    c31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c320:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    c324:	d000      	beq.n	c328 <usage_fault+0x24>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    c326:	2021      	movs	r0, #33	; 0x21
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c328:	4b0e      	ldr	r3, [pc, #56]	; (c364 <usage_fault+0x60>)
    c32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c32c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    c330:	d000      	beq.n	c334 <usage_fault+0x30>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    c332:	2022      	movs	r0, #34	; 0x22
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c334:	4b0b      	ldr	r3, [pc, #44]	; (c364 <usage_fault+0x60>)
    c336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c338:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    c33c:	d000      	beq.n	c340 <usage_fault+0x3c>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    c33e:	2023      	movs	r0, #35	; 0x23
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c340:	4b08      	ldr	r3, [pc, #32]	; (c364 <usage_fault+0x60>)
    c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c344:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    c348:	d109      	bne.n	c35e <usage_fault+0x5a>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c34a:	4a06      	ldr	r2, [pc, #24]	; (c364 <usage_fault+0x60>)
    c34c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c34e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    c352:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    c356:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    c358:	4770      	bx	lr
		reason = K_ERR_ARM_USAGE_DIV_0;
    c35a:	201e      	movs	r0, #30
    c35c:	e7d8      	b.n	c310 <usage_fault+0xc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    c35e:	2024      	movs	r0, #36	; 0x24
    c360:	e7f3      	b.n	c34a <usage_fault+0x46>
    c362:	bf00      	nop
    c364:	e000ed00 	.word	0xe000ed00

0000c368 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    c368:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c36a:	4b0d      	ldr	r3, [pc, #52]	; (c3a0 <z_arm_is_synchronous_svc+0x38>)
    c36c:	695a      	ldr	r2, [r3, #20]
    c36e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c372:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c378:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    c37c:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c380:	695a      	ldr	r2, [r3, #20]
    c382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    c386:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c38c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c390:	f64d 7302 	movw	r3, #57090	; 0xdf02
    c394:	4299      	cmp	r1, r3
    c396:	d001      	beq.n	c39c <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    c398:	2000      	movs	r0, #0
    c39a:	4770      	bx	lr
		return true;
    c39c:	2001      	movs	r0, #1
}
    c39e:	4770      	bx	lr
    c3a0:	e000ed00 	.word	0xe000ed00

0000c3a4 <mem_manage_fault>:
{
    c3a4:	b570      	push	{r4, r5, r6, lr}
    c3a6:	4604      	mov	r4, r0
    c3a8:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c3aa:	4b32      	ldr	r3, [pc, #200]	; (c474 <mem_manage_fault+0xd0>)
    c3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3ae:	f013 0f10 	tst.w	r3, #16
    c3b2:	d11a      	bne.n	c3ea <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    c3b4:	2510      	movs	r5, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c3b6:	4b2f      	ldr	r3, [pc, #188]	; (c474 <mem_manage_fault+0xd0>)
    c3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3ba:	f013 0f08 	tst.w	r3, #8
    c3be:	d000      	beq.n	c3c2 <mem_manage_fault+0x1e>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    c3c0:	2512      	movs	r5, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c3c2:	4b2c      	ldr	r3, [pc, #176]	; (c474 <mem_manage_fault+0xd0>)
    c3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3c6:	f013 0f02 	tst.w	r3, #2
    c3ca:	d010      	beq.n	c3ee <mem_manage_fault+0x4a>
		uint32_t temp = SCB->MMFAR;
    c3cc:	4b29      	ldr	r3, [pc, #164]	; (c474 <mem_manage_fault+0xd0>)
    c3ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3d2:	f013 0f80 	tst.w	r3, #128	; 0x80
    c3d6:	d03d      	beq.n	c454 <mem_manage_fault+0xb0>
			if (from_hard_fault != 0) {
    c3d8:	2900      	cmp	r1, #0
    c3da:	d03f      	beq.n	c45c <mem_manage_fault+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c3dc:	4a25      	ldr	r2, [pc, #148]	; (c474 <mem_manage_fault+0xd0>)
    c3de:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c3e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c3e4:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    c3e6:	2513      	movs	r5, #19
    c3e8:	e003      	b.n	c3f2 <mem_manage_fault+0x4e>
		reason = K_ERR_ARM_MEM_STACKING;
    c3ea:	2511      	movs	r5, #17
    c3ec:	e7e3      	b.n	c3b6 <mem_manage_fault+0x12>
	uint32_t mmfar = -EINVAL;
    c3ee:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c3f2:	4b20      	ldr	r3, [pc, #128]	; (c474 <mem_manage_fault+0xd0>)
    c3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3f6:	f013 0f01 	tst.w	r3, #1
    c3fa:	d000      	beq.n	c3fe <mem_manage_fault+0x5a>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    c3fc:	2514      	movs	r5, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c3fe:	4b1d      	ldr	r3, [pc, #116]	; (c474 <mem_manage_fault+0xd0>)
    c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c402:	f013 0f20 	tst.w	r3, #32
    c406:	d000      	beq.n	c40a <mem_manage_fault+0x66>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    c408:	2515      	movs	r5, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c40a:	4b1a      	ldr	r3, [pc, #104]	; (c474 <mem_manage_fault+0xd0>)
    c40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c40e:	f013 0f10 	tst.w	r3, #16
    c412:	d104      	bne.n	c41e <mem_manage_fault+0x7a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c414:	4b17      	ldr	r3, [pc, #92]	; (c474 <mem_manage_fault+0xd0>)
    c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c418:	f013 0f02 	tst.w	r3, #2
    c41c:	d004      	beq.n	c428 <mem_manage_fault+0x84>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    c41e:	4b15      	ldr	r3, [pc, #84]	; (c474 <mem_manage_fault+0xd0>)
    c420:	685b      	ldr	r3, [r3, #4]
    c422:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c426:	d11b      	bne.n	c460 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c428:	4b12      	ldr	r3, [pc, #72]	; (c474 <mem_manage_fault+0xd0>)
    c42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c42c:	f013 0f20 	tst.w	r3, #32
    c430:	d004      	beq.n	c43c <mem_manage_fault+0x98>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    c432:	4a10      	ldr	r2, [pc, #64]	; (c474 <mem_manage_fault+0xd0>)
    c434:	6a53      	ldr	r3, [r2, #36]	; 0x24
    c436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c43a:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c43c:	4a0d      	ldr	r2, [pc, #52]	; (c474 <mem_manage_fault+0xd0>)
    c43e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c440:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    c444:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    c446:	2101      	movs	r1, #1
    c448:	4620      	mov	r0, r4
    c44a:	f006 fba8 	bl	12b9e <memory_fault_recoverable>
    c44e:	7030      	strb	r0, [r6, #0]
}
    c450:	4628      	mov	r0, r5
    c452:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    c454:	f06f 0015 	mvn.w	r0, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    c458:	2513      	movs	r5, #19
    c45a:	e7ca      	b.n	c3f2 <mem_manage_fault+0x4e>
    c45c:	2513      	movs	r5, #19
    c45e:	e7c8      	b.n	c3f2 <mem_manage_fault+0x4e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    c460:	4621      	mov	r1, r4
    c462:	f7ff fea1 	bl	c1a8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    c466:	2800      	cmp	r0, #0
    c468:	d0de      	beq.n	c428 <mem_manage_fault+0x84>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    c46a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    c46e:	2502      	movs	r5, #2
    c470:	e7da      	b.n	c428 <mem_manage_fault+0x84>
    c472:	bf00      	nop
    c474:	e000ed00 	.word	0xe000ed00

0000c478 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    c478:	b538      	push	{r3, r4, r5, lr}
    c47a:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    c47c:	2300      	movs	r3, #0
    c47e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c480:	4b1a      	ldr	r3, [pc, #104]	; (c4ec <hard_fault+0x74>)
    c482:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    c484:	f010 0002 	ands.w	r0, r0, #2
    c488:	d12d      	bne.n	c4e6 <hard_fault+0x6e>
    c48a:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c48e:	2b00      	cmp	r3, #0
    c490:	db2a      	blt.n	c4e8 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c492:	4b16      	ldr	r3, [pc, #88]	; (c4ec <hard_fault+0x74>)
    c494:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    c496:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    c49a:	d025      	beq.n	c4e8 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    c49c:	4628      	mov	r0, r5
    c49e:	f7ff ff63 	bl	c368 <z_arm_is_synchronous_svc>
    c4a2:	b108      	cbz	r0, c4a8 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    c4a4:	6828      	ldr	r0, [r5, #0]
    c4a6:	e01f      	b.n	c4e8 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    c4a8:	4b10      	ldr	r3, [pc, #64]	; (c4ec <hard_fault+0x74>)
    c4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c4ac:	f013 0fff 	tst.w	r3, #255	; 0xff
    c4b0:	d10d      	bne.n	c4ce <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    c4b2:	4b0e      	ldr	r3, [pc, #56]	; (c4ec <hard_fault+0x74>)
    c4b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c4b6:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    c4ba:	d10e      	bne.n	c4da <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    c4bc:	4b0b      	ldr	r3, [pc, #44]	; (c4ec <hard_fault+0x74>)
    c4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c4c4:	d310      	bcc.n	c4e8 <hard_fault+0x70>
			reason = usage_fault(esf);
    c4c6:	4628      	mov	r0, r5
    c4c8:	f7ff ff1c 	bl	c304 <usage_fault>
    c4cc:	e00c      	b.n	c4e8 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    c4ce:	4622      	mov	r2, r4
    c4d0:	2101      	movs	r1, #1
    c4d2:	4628      	mov	r0, r5
    c4d4:	f7ff ff66 	bl	c3a4 <mem_manage_fault>
    c4d8:	e006      	b.n	c4e8 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    c4da:	4622      	mov	r2, r4
    c4dc:	2101      	movs	r1, #1
    c4de:	4628      	mov	r0, r5
    c4e0:	f7ff feca 	bl	c278 <bus_fault>
    c4e4:	e000      	b.n	c4e8 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c4e6:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    c4e8:	bd38      	pop	{r3, r4, r5, pc}
    c4ea:	bf00      	nop
    c4ec:	e000ed00 	.word	0xe000ed00

0000c4f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    c4f0:	b570      	push	{r4, r5, r6, lr}
    c4f2:	b08a      	sub	sp, #40	; 0x28
    c4f4:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c4f6:	4b22      	ldr	r3, [pc, #136]	; (c580 <z_arm_fault+0x90>)
    c4f8:	6859      	ldr	r1, [r3, #4]
    c4fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
    c4fe:	2300      	movs	r3, #0
    c500:	f383 8811 	msr	BASEPRI, r3
    c504:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    c508:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    c50c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    c510:	d115      	bne.n	c53e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    c512:	f002 030c 	and.w	r3, r2, #12
    c516:	2b08      	cmp	r3, #8
    c518:	d014      	beq.n	c544 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c51a:	f012 0f08 	tst.w	r2, #8
    c51e:	d00b      	beq.n	c538 <z_arm_fault+0x48>
	*nested_exc = false;
    c520:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    c522:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    c526:	4620      	mov	r0, r4
    c528:	f006 fb3e 	bl	12ba8 <fault_handle>
    c52c:	4605      	mov	r5, r0
	if (recoverable) {
    c52e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c532:	b153      	cbz	r3, c54a <z_arm_fault+0x5a>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    c534:	b00a      	add	sp, #40	; 0x28
    c536:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    c538:	4604      	mov	r4, r0
			*nested_exc = true;
    c53a:	2601      	movs	r6, #1
    c53c:	e7f1      	b.n	c522 <z_arm_fault+0x32>
	*nested_exc = false;
    c53e:	2600      	movs	r6, #0
		return NULL;
    c540:	4634      	mov	r4, r6
    c542:	e7ee      	b.n	c522 <z_arm_fault+0x32>
	*nested_exc = false;
    c544:	2600      	movs	r6, #0
		return NULL;
    c546:	4634      	mov	r4, r6
    c548:	e7eb      	b.n	c522 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c54a:	2220      	movs	r2, #32
    c54c:	4621      	mov	r1, r4
    c54e:	a801      	add	r0, sp, #4
    c550:	f006 fc01 	bl	12d56 <memcpy>
	if (nested_exc) {
    c554:	b14e      	cbz	r6, c56a <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c556:	9b08      	ldr	r3, [sp, #32]
    c558:	f3c3 0208 	ubfx	r2, r3, #0, #9
    c55c:	b95a      	cbnz	r2, c576 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c55e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    c562:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    c566:	9308      	str	r3, [sp, #32]
    c568:	e005      	b.n	c576 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c56a:	9b08      	ldr	r3, [sp, #32]
    c56c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c570:	f023 0301 	bic.w	r3, r3, #1
    c574:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    c576:	a901      	add	r1, sp, #4
    c578:	4628      	mov	r0, r5
    c57a:	f006 fae5 	bl	12b48 <z_arm_fatal_error>
    c57e:	e7d9      	b.n	c534 <z_arm_fault+0x44>
    c580:	e000ed00 	.word	0xe000ed00

0000c584 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c584:	4a02      	ldr	r2, [pc, #8]	; (c590 <z_arm_fault_init+0xc>)
    c586:	6953      	ldr	r3, [r2, #20]
    c588:	f043 0310 	orr.w	r3, r3, #16
    c58c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    c58e:	4770      	bx	lr
    c590:	e000ed00 	.word	0xe000ed00

0000c594 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    c594:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    c598:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    c59c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    c59e:	4672      	mov	r2, lr
	bl z_arm_fault
    c5a0:	f7ff ffa6 	bl	c4f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    c5a4:	bd01      	pop	{r0, pc}
    c5a6:	bf00      	nop

0000c5a8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    c5a8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c5aa:	e006      	b.n	c5ba <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c5ac:	f003 030f 	and.w	r3, r3, #15
    c5b0:	4909      	ldr	r1, [pc, #36]	; (c5d8 <z_arm_interrupt_init+0x30>)
    c5b2:	4419      	add	r1, r3
    c5b4:	2340      	movs	r3, #64	; 0x40
    c5b6:	760b      	strb	r3, [r1, #24]
    c5b8:	3201      	adds	r2, #1
    c5ba:	2a26      	cmp	r2, #38	; 0x26
    c5bc:	dc0a      	bgt.n	c5d4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    c5be:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	dbf3      	blt.n	c5ac <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c5c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    c5c8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    c5cc:	2140      	movs	r1, #64	; 0x40
    c5ce:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    c5d2:	e7f1      	b.n	c5b8 <z_arm_interrupt_init+0x10>
	}
}
    c5d4:	4770      	bx	lr
    c5d6:	bf00      	nop
    c5d8:	e000ecfc 	.word	0xe000ecfc

0000c5dc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    c5dc:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    c5de:	4913      	ldr	r1, [pc, #76]	; (c62c <__start+0x50>)
    strb r0, [r1]
    c5e0:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    c5e2:	2000      	movs	r0, #0
    msr CONTROL, r0
    c5e4:	f380 8814 	msr	CONTROL, r0
    isb
    c5e8:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    c5ec:	f7ff fb96 	bl	bd1c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    c5f0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    c5f2:	490f      	ldr	r1, [pc, #60]	; (c630 <__start+0x54>)
    str r0, [r1]
    c5f4:	6008      	str	r0, [r1, #0]
    dsb
    c5f6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c5fa:	480e      	ldr	r0, [pc, #56]	; (c634 <__start+0x58>)
    msr msp, r0
    c5fc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    c600:	f000 f830 	bl	c664 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c604:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    c606:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    c60a:	480b      	ldr	r0, [pc, #44]	; (c638 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c60c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    c610:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c612:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    c616:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    c61a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    c61c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    c61e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    c622:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    c626:	f7ff fd29 	bl	c07c <z_arm_prep_c>
    c62a:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    c62c:	200021d2 	.word	0x200021d2
    ldr r1, =_SCS_MPU_CTRL
    c630:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c634:	200042c0 	.word	0x200042c0
    ldr r0, =z_interrupt_stacks
    c638:	20003500 	.word	0x20003500

0000c63c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    c63c:	4b08      	ldr	r3, [pc, #32]	; (c660 <z_arm_clear_arm_mpu_config+0x24>)
    c63e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    c642:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    c646:	2300      	movs	r3, #0
    c648:	e006      	b.n	c658 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    c64a:	4a05      	ldr	r2, [pc, #20]	; (c660 <z_arm_clear_arm_mpu_config+0x24>)
    c64c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    c650:	2100      	movs	r1, #0
    c652:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    c656:	3301      	adds	r3, #1
    c658:	4283      	cmp	r3, r0
    c65a:	dbf6      	blt.n	c64a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    c65c:	4770      	bx	lr
    c65e:	bf00      	nop
    c660:	e000ed00 	.word	0xe000ed00

0000c664 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    c664:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    c666:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    c668:	2400      	movs	r4, #0
    c66a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    c66e:	f7ff ffe5 	bl	c63c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    c672:	4623      	mov	r3, r4
    c674:	e008      	b.n	c688 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    c676:	f103 0120 	add.w	r1, r3, #32
    c67a:	4a0e      	ldr	r2, [pc, #56]	; (c6b4 <z_arm_init_arch_hw_at_boot+0x50>)
    c67c:	f04f 30ff 	mov.w	r0, #4294967295
    c680:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    c684:	3301      	adds	r3, #1
    c686:	b2db      	uxtb	r3, r3
    c688:	2b07      	cmp	r3, #7
    c68a:	d9f4      	bls.n	c676 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    c68c:	2300      	movs	r3, #0
    c68e:	e008      	b.n	c6a2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    c690:	f103 0160 	add.w	r1, r3, #96	; 0x60
    c694:	4a07      	ldr	r2, [pc, #28]	; (c6b4 <z_arm_init_arch_hw_at_boot+0x50>)
    c696:	f04f 30ff 	mov.w	r0, #4294967295
    c69a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    c69e:	3301      	adds	r3, #1
    c6a0:	b2db      	uxtb	r3, r3
    c6a2:	2b07      	cmp	r3, #7
    c6a4:	d9f4      	bls.n	c690 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    c6a6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    c6a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c6ac:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    c6b0:	bd10      	pop	{r4, pc}
    c6b2:	bf00      	nop
    c6b4:	e000e100 	.word	0xe000e100

0000c6b8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    c6b8:	b508      	push	{r3, lr}
	if (_current == thread) {
    c6ba:	4b0a      	ldr	r3, [pc, #40]	; (c6e4 <z_impl_k_thread_abort+0x2c>)
    c6bc:	689b      	ldr	r3, [r3, #8]
    c6be:	4283      	cmp	r3, r0
    c6c0:	d002      	beq.n	c6c8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    c6c2:	f004 ff59 	bl	11578 <z_thread_abort>
}
    c6c6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c6c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    c6cc:	2b00      	cmp	r3, #0
    c6ce:	d0f8      	beq.n	c6c2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c6d0:	4b05      	ldr	r3, [pc, #20]	; (c6e8 <z_impl_k_thread_abort+0x30>)
    c6d2:	685a      	ldr	r2, [r3, #4]
    c6d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    c6d8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    c6da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c6dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c6e0:	625a      	str	r2, [r3, #36]	; 0x24
    c6e2:	e7ee      	b.n	c6c2 <z_impl_k_thread_abort+0xa>
    c6e4:	20002174 	.word	0x20002174
    c6e8:	e000ed00 	.word	0xe000ed00

0000c6ec <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    c6ec:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    c6ee:	4b03      	ldr	r3, [pc, #12]	; (c6fc <z_arm_configure_static_mpu_regions+0x10>)
    c6f0:	4a03      	ldr	r2, [pc, #12]	; (c700 <z_arm_configure_static_mpu_regions+0x14>)
    c6f2:	2101      	movs	r1, #1
    c6f4:	4803      	ldr	r0, [pc, #12]	; (c704 <z_arm_configure_static_mpu_regions+0x18>)
    c6f6:	f006 fadd 	bl	12cb4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    c6fa:	bd08      	pop	{r3, pc}
    c6fc:	20010000 	.word	0x20010000
    c700:	20000000 	.word	0x20000000
    c704:	00016140 	.word	0x00016140

0000c708 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    c708:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    c70a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    c70e:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    c710:	4804      	ldr	r0, [pc, #16]	; (c724 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    c712:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    c714:	2340      	movs	r3, #64	; 0x40
    c716:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    c718:	4b03      	ldr	r3, [pc, #12]	; (c728 <z_arm_configure_dynamic_mpu_regions+0x20>)
    c71a:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    c71c:	2101      	movs	r1, #1
    c71e:	f006 facd 	bl	12cbc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    c722:	bd08      	pop	{r3, pc}
    c724:	20001ac0 	.word	0x20001ac0
    c728:	150b0000 	.word	0x150b0000

0000c72c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    c72c:	4a08      	ldr	r2, [pc, #32]	; (c750 <region_init+0x24>)
    c72e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c732:	680b      	ldr	r3, [r1, #0]
    c734:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    c738:	4303      	orrs	r3, r0
    c73a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c73e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c742:	688b      	ldr	r3, [r1, #8]
    c744:	f043 0301 	orr.w	r3, r3, #1
    c748:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    c74c:	4770      	bx	lr
    c74e:	bf00      	nop
    c750:	e000ed00 	.word	0xe000ed00

0000c754 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    c754:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    c756:	4c03      	ldr	r4, [pc, #12]	; (c764 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    c758:	2301      	movs	r3, #1
    c75a:	7822      	ldrb	r2, [r4, #0]
    c75c:	f006 fa82 	bl	12c64 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c760:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    c762:	bd10      	pop	{r4, pc}
    c764:	200021cd 	.word	0x200021cd

0000c768 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    c768:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    c76a:	2300      	movs	r3, #0
    c76c:	4a09      	ldr	r2, [pc, #36]	; (c794 <mpu_configure_dynamic_mpu_regions+0x2c>)
    c76e:	7812      	ldrb	r2, [r2, #0]
    c770:	f006 fa78 	bl	12c64 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    c774:	f110 0f16 	cmn.w	r0, #22
    c778:	d00a      	beq.n	c790 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    c77a:	4603      	mov	r3, r0
    c77c:	e006      	b.n	c78c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    c77e:	4a06      	ldr	r2, [pc, #24]	; (c798 <mpu_configure_dynamic_mpu_regions+0x30>)
    c780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    c784:	2100      	movs	r1, #0
    c786:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    c78a:	3301      	adds	r3, #1
    c78c:	2b07      	cmp	r3, #7
    c78e:	ddf6      	ble.n	c77e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    c790:	bd08      	pop	{r3, pc}
    c792:	bf00      	nop
    c794:	200021cd 	.word	0x200021cd
    c798:	e000ed00 	.word	0xe000ed00

0000c79c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c79c:	4b04      	ldr	r3, [pc, #16]	; (c7b0 <arm_core_mpu_enable+0x14>)
    c79e:	2205      	movs	r2, #5
    c7a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c7a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c7a8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c7ac:	4770      	bx	lr
    c7ae:	bf00      	nop
    c7b0:	e000ed00 	.word	0xe000ed00

0000c7b4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c7b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c7b8:	4b02      	ldr	r3, [pc, #8]	; (c7c4 <arm_core_mpu_disable+0x10>)
    c7ba:	2200      	movs	r2, #0
    c7bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c7c0:	4770      	bx	lr
    c7c2:	bf00      	nop
    c7c4:	e000ed00 	.word	0xe000ed00

0000c7c8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    c7c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c7ca:	4b0e      	ldr	r3, [pc, #56]	; (c804 <z_arm_mpu_init+0x3c>)
    c7cc:	681d      	ldr	r5, [r3, #0]
    c7ce:	2d08      	cmp	r5, #8
    c7d0:	d815      	bhi.n	c7fe <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    c7d2:	f7ff ffef 	bl	c7b4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c7d6:	2400      	movs	r4, #0
    c7d8:	e009      	b.n	c7ee <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    c7da:	4b0a      	ldr	r3, [pc, #40]	; (c804 <z_arm_mpu_init+0x3c>)
    c7dc:	6859      	ldr	r1, [r3, #4]
    c7de:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c7e2:	0093      	lsls	r3, r2, #2
    c7e4:	4419      	add	r1, r3
    c7e6:	4620      	mov	r0, r4
    c7e8:	f7ff ffa0 	bl	c72c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c7ec:	3401      	adds	r4, #1
    c7ee:	42a5      	cmp	r5, r4
    c7f0:	d8f3      	bhi.n	c7da <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c7f2:	4b05      	ldr	r3, [pc, #20]	; (c808 <z_arm_mpu_init+0x40>)
    c7f4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    c7f6:	f7ff ffd1 	bl	c79c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c7fa:	2000      	movs	r0, #0
}
    c7fc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    c7fe:	f04f 30ff 	mov.w	r0, #4294967295
    c802:	e7fb      	b.n	c7fc <z_arm_mpu_init+0x34>
    c804:	00016150 	.word	0x00016150
    c808:	200021cd 	.word	0x200021cd

0000c80c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    c80c:	4b01      	ldr	r3, [pc, #4]	; (c814 <__stdout_hook_install+0x8>)
    c80e:	6018      	str	r0, [r3, #0]
}
    c810:	4770      	bx	lr
    c812:	bf00      	nop
    c814:	2000037c 	.word	0x2000037c

0000c818 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    c818:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c81c:	4905      	ldr	r1, [pc, #20]	; (c834 <__NVIC_SystemReset+0x1c>)
    c81e:	68ca      	ldr	r2, [r1, #12]
    c820:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c824:	4b04      	ldr	r3, [pc, #16]	; (c838 <__NVIC_SystemReset+0x20>)
    c826:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c828:	60cb      	str	r3, [r1, #12]
    c82a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c82e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c830:	e7fd      	b.n	c82e <__NVIC_SystemReset+0x16>
    c832:	bf00      	nop
    c834:	e000ed00 	.word	0xe000ed00
    c838:	05fa0004 	.word	0x05fa0004

0000c83c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    c83c:	f04f 0240 	mov.w	r2, #64	; 0x40
    c840:	f3ef 8311 	mrs	r3, BASEPRI
    c844:	f382 8812 	msr	BASEPRI_MAX, r2
    c848:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c84c:	4a04      	ldr	r2, [pc, #16]	; (c860 <nordicsemi_nrf52_init+0x24>)
    c84e:	2101      	movs	r1, #1
    c850:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    c854:	f383 8811 	msr	BASEPRI, r3
    c858:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c85c:	2000      	movs	r0, #0
    c85e:	4770      	bx	lr
    c860:	4001e000 	.word	0x4001e000

0000c864 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c864:	b130      	cbz	r0, c874 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    c866:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c868:	4b03      	ldr	r3, [pc, #12]	; (c878 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c86a:	0180      	lsls	r0, r0, #6
    c86c:	f043 0301 	orr.w	r3, r3, #1
    c870:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    c872:	bd08      	pop	{r3, pc}
    c874:	4770      	bx	lr
    c876:	bf00      	nop
    c878:	00015e30 	.word	0x00015e30

0000c87c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    c87c:	b508      	push	{r3, lr}
    c87e:	4804      	ldr	r0, [pc, #16]	; (c890 <xoshiro128_initialize+0x14>)
    c880:	f008 fa78 	bl	14d74 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
    c884:	b108      	cbz	r0, c88a <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
    c886:	2000      	movs	r0, #0
}
    c888:	bd08      	pop	{r3, pc}
		return -ENODEV;
    c88a:	f06f 0012 	mvn.w	r0, #18
    c88e:	e7fb      	b.n	c888 <xoshiro128_initialize+0xc>
    c890:	00015b20 	.word	0x00015b20

0000c894 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    c894:	b538      	push	{r3, r4, r5, lr}
    c896:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    c898:	4805      	ldr	r0, [pc, #20]	; (c8b0 <bt_buf_get_rx+0x1c>)
    c89a:	f006 fd67 	bl	1336c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c89e:	4605      	mov	r5, r0
    c8a0:	b120      	cbz	r0, c8ac <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    c8a2:	2100      	movs	r1, #0
    c8a4:	300c      	adds	r0, #12
    c8a6:	f006 fdc5 	bl	13434 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c8aa:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c8ac:	4628      	mov	r0, r5
    c8ae:	bd38      	pop	{r3, r4, r5, pc}
    c8b0:	200004e4 	.word	0x200004e4

0000c8b4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c8b4:	b538      	push	{r3, r4, r5, lr}
    c8b6:	4602      	mov	r2, r0
    c8b8:	460b      	mov	r3, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c8ba:	490e      	ldr	r1, [pc, #56]	; (c8f4 <bt_buf_get_cmd_complete+0x40>)
    c8bc:	2000      	movs	r0, #0
    c8be:	f3bf 8f5b 	dmb	ish
    c8c2:	e851 4f00 	ldrex	r4, [r1]
    c8c6:	e841 0500 	strex	r5, r0, [r1]
    c8ca:	2d00      	cmp	r5, #0
    c8cc:	d1f9      	bne.n	c8c2 <bt_buf_get_cmd_complete+0xe>
    c8ce:	f3bf 8f5b 	dmb	ish
    c8d2:	4625      	mov	r5, r4
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    c8d4:	b92c      	cbnz	r4, c8e2 <bt_buf_get_cmd_complete+0x2e>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c8d6:	2001      	movs	r0, #1
    c8d8:	f7ff ffdc 	bl	c894 <bt_buf_get_rx>
    c8dc:	4605      	mov	r5, r0
}
    c8de:	4628      	mov	r0, r5
    c8e0:	bd38      	pop	{r3, r4, r5, pc}
    c8e2:	2301      	movs	r3, #1
    c8e4:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    c8e6:	4601      	mov	r1, r0
    c8e8:	8220      	strh	r0, [r4, #16]
    c8ea:	f104 000c 	add.w	r0, r4, #12
    c8ee:	f006 fda1 	bl	13434 <net_buf_simple_reserve>
		return buf;
    c8f2:	e7f4      	b.n	c8de <bt_buf_get_cmd_complete+0x2a>
    c8f4:	200002a0 	.word	0x200002a0

0000c8f8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    c8f8:	b510      	push	{r4, lr}
	switch (evt) {
    c8fa:	f1a0 0c0e 	sub.w	ip, r0, #14
    c8fe:	f1bc 0f01 	cmp.w	ip, #1
    c902:	d906      	bls.n	c912 <bt_buf_get_evt+0x1a>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
    c904:	b959      	cbnz	r1, c91e <bt_buf_get_evt+0x26>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c906:	2001      	movs	r0, #1
    c908:	f7ff ffc4 	bl	c894 <bt_buf_get_rx>
    c90c:	4604      	mov	r4, r0
	}
}
    c90e:	4620      	mov	r0, r4
    c910:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    c912:	4610      	mov	r0, r2
    c914:	4619      	mov	r1, r3
    c916:	f7ff ffcd 	bl	c8b4 <bt_buf_get_cmd_complete>
    c91a:	4604      	mov	r4, r0
    c91c:	e7f7      	b.n	c90e <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
    c91e:	4806      	ldr	r0, [pc, #24]	; (c938 <bt_buf_get_evt+0x40>)
    c920:	f006 fd24 	bl	1336c <net_buf_alloc_fixed>
			if (buf) {
    c924:	4604      	mov	r4, r0
    c926:	2800      	cmp	r0, #0
    c928:	d0f1      	beq.n	c90e <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
    c92a:	2100      	movs	r1, #0
    c92c:	300c      	adds	r0, #12
    c92e:	f006 fd81 	bl	13434 <net_buf_simple_reserve>
    c932:	2301      	movs	r3, #1
    c934:	7623      	strb	r3, [r4, #24]
			return buf;
    c936:	e7ea      	b.n	c90e <bt_buf_get_evt+0x16>
    c938:	2000048c 	.word	0x2000048c

0000c93c <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c93c:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    c93e:	7851      	ldrb	r1, [r2, #1]
    c940:	4b08      	ldr	r3, [pc, #32]	; (c964 <read_local_ver_complete+0x28>)
    c942:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c946:	8851      	ldrh	r1, [r2, #2]
    c948:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    c94c:	7911      	ldrb	r1, [r2, #4]
    c94e:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c952:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    c956:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c95a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    c95e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
    c962:	4770      	bx	lr
    c964:	200001a0 	.word	0x200001a0

0000c968 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    c968:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    c96a:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    c96c:	3001      	adds	r0, #1
    c96e:	f006 fa8c 	bl	12e8a <sys_get_le64>
    c972:	4b02      	ldr	r3, [pc, #8]	; (c97c <le_read_supp_states_complete+0x14>)
    c974:	e9c3 0138 	strd	r0, r1, [r3, #224]	; 0xe0
}
    c978:	bd08      	pop	{r3, pc}
    c97a:	bf00      	nop
    c97c:	200001a0 	.word	0x200001a0

0000c980 <hci_reset_complete>:
{
    c980:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
    c982:	68c3      	ldr	r3, [r0, #12]
    c984:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    c986:	b99b      	cbnz	r3, c9b0 <hci_reset_complete+0x30>
		bt_scan_reset();
    c988:	f000 ff84 	bl	d894 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c98c:	4b09      	ldr	r3, [pc, #36]	; (c9b4 <hci_reset_complete+0x34>)
    c98e:	f3bf 8f5b 	dmb	ish
    c992:	681a      	ldr	r2, [r3, #0]
    c994:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c998:	f002 0209 	and.w	r2, r2, #9
    c99c:	f3bf 8f5b 	dmb	ish
    c9a0:	e853 1f00 	ldrex	r1, [r3]
    c9a4:	e843 2000 	strex	r0, r2, [r3]
    c9a8:	2800      	cmp	r0, #0
    c9aa:	d1f9      	bne.n	c9a0 <hci_reset_complete+0x20>
    c9ac:	f3bf 8f5b 	dmb	ish
}
    c9b0:	bd08      	pop	{r3, pc}
    c9b2:	bf00      	nop
    c9b4:	20000274 	.word	0x20000274

0000c9b8 <read_local_features_complete>:
{
    c9b8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    c9ba:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c9bc:	2208      	movs	r2, #8
    c9be:	3101      	adds	r1, #1
    c9c0:	4801      	ldr	r0, [pc, #4]	; (c9c8 <read_local_features_complete+0x10>)
    c9c2:	f006 f9c8 	bl	12d56 <memcpy>
}
    c9c6:	bd08      	pop	{r3, pc}
    c9c8:	20000218 	.word	0x20000218

0000c9cc <read_supported_commands_complete>:
{
    c9cc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    c9ce:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    c9d0:	2240      	movs	r2, #64	; 0x40
    c9d2:	3101      	adds	r1, #1
    c9d4:	4801      	ldr	r0, [pc, #4]	; (c9dc <read_supported_commands_complete+0x10>)
    c9d6:	f006 f9be 	bl	12d56 <memcpy>
}
    c9da:	bd08      	pop	{r3, pc}
    c9dc:	20000220 	.word	0x20000220

0000c9e0 <read_le_features_complete>:
{
    c9e0:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    c9e2:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c9e4:	2208      	movs	r2, #8
    c9e6:	3101      	adds	r1, #1
    c9e8:	4801      	ldr	r0, [pc, #4]	; (c9f0 <read_le_features_complete+0x10>)
    c9ea:	f006 f9b4 	bl	12d56 <memcpy>
}
    c9ee:	bd08      	pop	{r3, pc}
    c9f0:	20000278 	.word	0x20000278

0000c9f4 <hci_cmd_done>:
{
    c9f4:	b570      	push	{r4, r5, r6, lr}
    c9f6:	4606      	mov	r6, r0
    c9f8:	460d      	mov	r5, r1
    c9fa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c9fc:	7a90      	ldrb	r0, [r2, #10]
    c9fe:	f001 f841 	bl	da84 <net_buf_pool_get>
    ca02:	4b28      	ldr	r3, [pc, #160]	; (caa4 <hci_cmd_done+0xb0>)
    ca04:	4283      	cmp	r3, r0
    ca06:	d000      	beq.n	ca0a <hci_cmd_done+0x16>
}
    ca08:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
    ca0a:	4620      	mov	r0, r4
    ca0c:	f006 fc0b 	bl	13226 <net_buf_id>
    ca10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca14:	4b24      	ldr	r3, [pc, #144]	; (caa8 <hci_cmd_done+0xb4>)
    ca16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca1a:	885b      	ldrh	r3, [r3, #2]
    ca1c:	42b3      	cmp	r3, r6
    ca1e:	d1f3      	bne.n	ca08 <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
    ca20:	4b22      	ldr	r3, [pc, #136]	; (caac <hci_cmd_done+0xb8>)
    ca22:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    ca26:	b128      	cbz	r0, ca34 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
    ca28:	f006 fcdd 	bl	133e6 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ca2c:	4b1f      	ldr	r3, [pc, #124]	; (caac <hci_cmd_done+0xb8>)
    ca2e:	2200      	movs	r2, #0
    ca30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    ca34:	4620      	mov	r0, r4
    ca36:	f006 fbf6 	bl	13226 <net_buf_id>
    ca3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca3e:	4b1a      	ldr	r3, [pc, #104]	; (caa8 <hci_cmd_done+0xb4>)
    ca40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca44:	685b      	ldr	r3, [r3, #4]
    ca46:	b103      	cbz	r3, ca4a <hci_cmd_done+0x56>
    ca48:	b1ed      	cbz	r5, ca86 <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
    ca4a:	4620      	mov	r0, r4
    ca4c:	f006 fbeb 	bl	13226 <net_buf_id>
    ca50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca54:	4b14      	ldr	r3, [pc, #80]	; (caa8 <hci_cmd_done+0xb4>)
    ca56:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca5a:	689b      	ldr	r3, [r3, #8]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d0d3      	beq.n	ca08 <hci_cmd_done+0x14>
		cmd(buf)->status = status;
    ca60:	4620      	mov	r0, r4
    ca62:	f006 fbe0 	bl	13226 <net_buf_id>
    ca66:	4e10      	ldr	r6, [pc, #64]	; (caa8 <hci_cmd_done+0xb4>)
    ca68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca6c:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    ca70:	4620      	mov	r0, r4
    ca72:	f006 fbd8 	bl	13226 <net_buf_id>
    ca76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca7a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    ca7e:	68b0      	ldr	r0, [r6, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ca80:	f004 f872 	bl	10b68 <z_impl_k_sem_give>
}
    ca84:	e7c0      	b.n	ca08 <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ca86:	4620      	mov	r0, r4
    ca88:	f006 fbcd 	bl	13226 <net_buf_id>
    ca8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca90:	4b05      	ldr	r3, [pc, #20]	; (caa8 <hci_cmd_done+0xb4>)
    ca92:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca96:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ca98:	7a1a      	ldrb	r2, [r3, #8]
    ca9a:	6859      	ldr	r1, [r3, #4]
    ca9c:	6818      	ldr	r0, [r3, #0]
    ca9e:	f006 fa32 	bl	12f06 <atomic_set_bit_to>
    caa2:	e7d2      	b.n	ca4a <hci_cmd_done+0x56>
    caa4:	200004b8 	.word	0x200004b8
    caa8:	20001acc 	.word	0x20001acc
    caac:	200001a0 	.word	0x200001a0

0000cab0 <hci_cmd_status>:
{
    cab0:	b538      	push	{r3, r4, r5, lr}
    cab2:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    cab4:	2104      	movs	r1, #4
    cab6:	300c      	adds	r0, #12
    cab8:	f006 fcd9 	bl	1346e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    cabc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    cabe:	4622      	mov	r2, r4
    cac0:	7801      	ldrb	r1, [r0, #0]
    cac2:	8840      	ldrh	r0, [r0, #2]
    cac4:	f7ff ff96 	bl	c9f4 <hci_cmd_done>
	if (ncmd) {
    cac8:	b905      	cbnz	r5, cacc <hci_cmd_status+0x1c>
}
    caca:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    cacc:	4801      	ldr	r0, [pc, #4]	; (cad4 <hci_cmd_status+0x24>)
    cace:	f004 f84b 	bl	10b68 <z_impl_k_sem_give>
    cad2:	e7fa      	b.n	caca <hci_cmd_status+0x1a>
    cad4:	20000288 	.word	0x20000288

0000cad8 <hci_cmd_complete>:
{
    cad8:	b538      	push	{r3, r4, r5, lr}
    cada:	4604      	mov	r4, r0
    cadc:	2103      	movs	r1, #3
    cade:	300c      	adds	r0, #12
    cae0:	f006 fcc5 	bl	1346e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    cae4:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    cae6:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
    cae8:	4622      	mov	r2, r4
    caea:	7819      	ldrb	r1, [r3, #0]
    caec:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    caf0:	f7ff ff80 	bl	c9f4 <hci_cmd_done>
	if (ncmd) {
    caf4:	b905      	cbnz	r5, caf8 <hci_cmd_complete+0x20>
}
    caf6:	bd38      	pop	{r3, r4, r5, pc}
    caf8:	4801      	ldr	r0, [pc, #4]	; (cb00 <hci_cmd_complete+0x28>)
    cafa:	f004 f835 	bl	10b68 <z_impl_k_sem_give>
    cafe:	e7fa      	b.n	caf6 <hci_cmd_complete+0x1e>
    cb00:	20000288 	.word	0x20000288

0000cb04 <hci_event>:
{
    cb04:	b538      	push	{r3, r4, r5, lr}
    cb06:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cb08:	8a03      	ldrh	r3, [r0, #16]
    cb0a:	2b01      	cmp	r3, #1
    cb0c:	d91b      	bls.n	cb46 <hci_event+0x42>
    cb0e:	2102      	movs	r1, #2
    cb10:	f104 000c 	add.w	r0, r4, #12
    cb14:	f006 fcab 	bl	1346e <net_buf_simple_pull_mem>
    cb18:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    cb1a:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    cb1c:	2b05      	cmp	r3, #5
    cb1e:	d022      	beq.n	cb66 <hci_event+0x62>
    cb20:	d323      	bcc.n	cb6a <hci_event+0x66>
    cb22:	3b0e      	subs	r3, #14
    cb24:	b2db      	uxtb	r3, r3
    cb26:	2b01      	cmp	r3, #1
    cb28:	d81b      	bhi.n	cb62 <hci_event+0x5e>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    cb2a:	2301      	movs	r3, #1
    cb2c:	f013 0f02 	tst.w	r3, #2
    cb30:	d01d      	beq.n	cb6e <hci_event+0x6a>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    cb32:	2303      	movs	r3, #3
    cb34:	4a15      	ldr	r2, [pc, #84]	; (cb8c <hci_event+0x88>)
    cb36:	4621      	mov	r1, r4
    cb38:	7828      	ldrb	r0, [r5, #0]
    cb3a:	f006 f9dd 	bl	12ef8 <handle_event>
	net_buf_unref(buf);
    cb3e:	4620      	mov	r0, r4
    cb40:	f006 fc51 	bl	133e6 <net_buf_unref>
}
    cb44:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cb46:	f640 2347 	movw	r3, #2631	; 0xa47
    cb4a:	4a11      	ldr	r2, [pc, #68]	; (cb90 <hci_event+0x8c>)
    cb4c:	4911      	ldr	r1, [pc, #68]	; (cb94 <hci_event+0x90>)
    cb4e:	4812      	ldr	r0, [pc, #72]	; (cb98 <hci_event+0x94>)
    cb50:	f005 ffba 	bl	12ac8 <assert_print>
    cb54:	4040      	eors	r0, r0
    cb56:	f380 8811 	msr	BASEPRI, r0
    cb5a:	f04f 0003 	mov.w	r0, #3
    cb5e:	df02      	svc	2
    cb60:	e7d5      	b.n	cb0e <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
    cb62:	2302      	movs	r3, #2
    cb64:	e7e2      	b.n	cb2c <hci_event+0x28>
	switch (evt) {
    cb66:	2303      	movs	r3, #3
    cb68:	e7e0      	b.n	cb2c <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
    cb6a:	2302      	movs	r3, #2
    cb6c:	e7de      	b.n	cb2c <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    cb6e:	f640 234b 	movw	r3, #2635	; 0xa4b
    cb72:	4a07      	ldr	r2, [pc, #28]	; (cb90 <hci_event+0x8c>)
    cb74:	4909      	ldr	r1, [pc, #36]	; (cb9c <hci_event+0x98>)
    cb76:	4808      	ldr	r0, [pc, #32]	; (cb98 <hci_event+0x94>)
    cb78:	f005 ffa6 	bl	12ac8 <assert_print>
    cb7c:	4040      	eors	r0, r0
    cb7e:	f380 8811 	msr	BASEPRI, r0
    cb82:	f04f 0003 	mov.w	r0, #3
    cb86:	df02      	svc	2
    cb88:	e7d3      	b.n	cb32 <hci_event+0x2e>
    cb8a:	bf00      	nop
    cb8c:	000162d8 	.word	0x000162d8
    cb90:	000161c4 	.word	0x000161c4
    cb94:	000161f8 	.word	0x000161f8
    cb98:	00016214 	.word	0x00016214
    cb9c:	00016234 	.word	0x00016234

0000cba0 <hci_le_meta_event>:
{
    cba0:	b510      	push	{r4, lr}
    cba2:	4604      	mov	r4, r0
    cba4:	2101      	movs	r1, #1
    cba6:	300c      	adds	r0, #12
    cba8:	f006 fc61 	bl	1346e <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    cbac:	2301      	movs	r3, #1
    cbae:	4a03      	ldr	r2, [pc, #12]	; (cbbc <hci_le_meta_event+0x1c>)
    cbb0:	4621      	mov	r1, r4
    cbb2:	7800      	ldrb	r0, [r0, #0]
    cbb4:	f006 f9a0 	bl	12ef8 <handle_event>
}
    cbb8:	bd10      	pop	{r4, pc}
    cbba:	bf00      	nop
    cbbc:	000162f0 	.word	0x000162f0

0000cbc0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    cbc0:	b508      	push	{r3, lr}
    cbc2:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    cbc4:	4803      	ldr	r0, [pc, #12]	; (cbd4 <rx_queue_put+0x14>)
    cbc6:	f006 fbdc 	bl	13382 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    cbca:	4903      	ldr	r1, [pc, #12]	; (cbd8 <rx_queue_put+0x18>)
    cbcc:	4803      	ldr	r0, [pc, #12]	; (cbdc <rx_queue_put+0x1c>)
    cbce:	f008 fb22 	bl	15216 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
    cbd2:	bd08      	pop	{r3, pc}
    cbd4:	200002a4 	.word	0x200002a4
    cbd8:	20000394 	.word	0x20000394
    cbdc:	200014c8 	.word	0x200014c8

0000cbe0 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    cbe0:	b508      	push	{r3, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    cbe2:	480a      	ldr	r0, [pc, #40]	; (cc0c <rx_work_handler+0x2c>)
    cbe4:	f006 fbe3 	bl	133ae <net_buf_slist_get>
	if (!buf) {
    cbe8:	b160      	cbz	r0, cc04 <rx_work_handler+0x24>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cbea:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    cbec:	2a01      	cmp	r2, #1
    cbee:	d00a      	beq.n	cc06 <rx_work_handler+0x26>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    cbf0:	f006 fbf9 	bl	133e6 <net_buf_unref>
	return list->head;
    cbf4:	4b06      	ldr	r3, [pc, #24]	; (cc10 <rx_work_handler+0x30>)
    cbf6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    cbfa:	b11b      	cbz	r3, cc04 <rx_work_handler+0x24>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    cbfc:	4905      	ldr	r1, [pc, #20]	; (cc14 <rx_work_handler+0x34>)
    cbfe:	4806      	ldr	r0, [pc, #24]	; (cc18 <rx_work_handler+0x38>)
    cc00:	f008 fb09 	bl	15216 <k_work_submit_to_queue>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    cc04:	bd08      	pop	{r3, pc}
		hci_event(buf);
    cc06:	f7ff ff7d 	bl	cb04 <hci_event>
		break;
    cc0a:	e7f3      	b.n	cbf4 <rx_work_handler+0x14>
    cc0c:	200002a4 	.word	0x200002a4
    cc10:	200001a0 	.word	0x200001a0
    cc14:	20000394 	.word	0x20000394
    cc18:	200014c8 	.word	0x200014c8

0000cc1c <bt_hci_cmd_state_set_init>:
{
    cc1c:	b510      	push	{r4, lr}
    cc1e:	460c      	mov	r4, r1
	state->target = target;
    cc20:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    cc22:	604b      	str	r3, [r1, #4]
	state->val = val;
    cc24:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cc28:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    cc2a:	f006 fafc 	bl	13226 <net_buf_id>
    cc2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cc32:	4b02      	ldr	r3, [pc, #8]	; (cc3c <bt_hci_cmd_state_set_init+0x20>)
    cc34:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    cc38:	605c      	str	r4, [r3, #4]
}
    cc3a:	bd10      	pop	{r4, pc}
    cc3c:	20001acc 	.word	0x20001acc

0000cc40 <bt_hci_cmd_create>:
{
    cc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc44:	4606      	mov	r6, r0
    cc46:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
    cc48:	f04f 32ff 	mov.w	r2, #4294967295
    cc4c:	f04f 33ff 	mov.w	r3, #4294967295
    cc50:	4818      	ldr	r0, [pc, #96]	; (ccb4 <bt_hci_cmd_create+0x74>)
    cc52:	f006 fb8b 	bl	1336c <net_buf_alloc_fixed>
    cc56:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    cc58:	f100 090c 	add.w	r9, r0, #12
    cc5c:	2100      	movs	r1, #0
    cc5e:	4648      	mov	r0, r9
    cc60:	f006 fbe8 	bl	13434 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    cc64:	f04f 0800 	mov.w	r8, #0
    cc68:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    cc6c:	4620      	mov	r0, r4
    cc6e:	f006 fada 	bl	13226 <net_buf_id>
    cc72:	4d11      	ldr	r5, [pc, #68]	; (ccb8 <bt_hci_cmd_create+0x78>)
    cc74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cc78:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    cc7c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    cc7e:	4620      	mov	r0, r4
    cc80:	f006 fad1 	bl	13226 <net_buf_id>
    cc84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cc88:	eb05 0380 	add.w	r3, r5, r0, lsl #2
    cc8c:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
    cc90:	4620      	mov	r0, r4
    cc92:	f006 fac8 	bl	13226 <net_buf_id>
    cc96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cc9a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    cc9e:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    cca2:	2103      	movs	r1, #3
    cca4:	4648      	mov	r0, r9
    cca6:	f006 fbc9 	bl	1343c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    ccaa:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    ccac:	7087      	strb	r7, [r0, #2]
}
    ccae:	4620      	mov	r0, r4
    ccb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ccb4:	200004b8 	.word	0x200004b8
    ccb8:	20001acc 	.word	0x20001acc

0000ccbc <bt_hci_cmd_send_sync>:
{
    ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccbe:	b087      	sub	sp, #28
    ccc0:	4606      	mov	r6, r0
    ccc2:	4615      	mov	r5, r2
	if (!buf) {
    ccc4:	460c      	mov	r4, r1
    ccc6:	b359      	cbz	r1, cd20 <bt_hci_cmd_send_sync+0x64>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ccc8:	2201      	movs	r2, #1
    ccca:	2100      	movs	r1, #0
    cccc:	4668      	mov	r0, sp
    ccce:	f008 fa1a 	bl	15106 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    ccd2:	4620      	mov	r0, r4
    ccd4:	f006 faa7 	bl	13226 <net_buf_id>
    ccd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ccdc:	4b26      	ldr	r3, [pc, #152]	; (cd78 <bt_hci_cmd_send_sync+0xbc>)
    ccde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    cce2:	f8c3 d008 	str.w	sp, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    cce6:	4620      	mov	r0, r4
    cce8:	f006 fba0 	bl	1342c <net_buf_ref>
    ccec:	4601      	mov	r1, r0
    ccee:	4823      	ldr	r0, [pc, #140]	; (cd7c <bt_hci_cmd_send_sync+0xc0>)
    ccf0:	f006 fb75 	bl	133de <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    ccf4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ccf8:	2300      	movs	r3, #0
    ccfa:	4668      	mov	r0, sp
    ccfc:	f003 ff5c 	bl	10bb8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    cd00:	4607      	mov	r7, r0
    cd02:	b9a8      	cbnz	r0, cd30 <bt_hci_cmd_send_sync+0x74>
	status = cmd(buf)->status;
    cd04:	4620      	mov	r0, r4
    cd06:	f006 fa8e 	bl	13226 <net_buf_id>
    cd0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cd0e:	4b1a      	ldr	r3, [pc, #104]	; (cd78 <bt_hci_cmd_send_sync+0xbc>)
    cd10:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
    cd14:	b9fe      	cbnz	r6, cd56 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
    cd16:	b34d      	cbz	r5, cd6c <bt_hci_cmd_send_sync+0xb0>
		*rsp = buf;
    cd18:	602c      	str	r4, [r5, #0]
	return 0;
    cd1a:	2000      	movs	r0, #0
}
    cd1c:	b007      	add	sp, #28
    cd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    cd20:	f7ff ff8e 	bl	cc40 <bt_hci_cmd_create>
		if (!buf) {
    cd24:	4604      	mov	r4, r0
    cd26:	2800      	cmp	r0, #0
    cd28:	d1ce      	bne.n	ccc8 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
    cd2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cd2e:	e7f5      	b.n	cd1c <bt_hci_cmd_send_sync+0x60>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    cd30:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    cd34:	4a12      	ldr	r2, [pc, #72]	; (cd80 <bt_hci_cmd_send_sync+0xc4>)
    cd36:	4913      	ldr	r1, [pc, #76]	; (cd84 <bt_hci_cmd_send_sync+0xc8>)
    cd38:	4813      	ldr	r0, [pc, #76]	; (cd88 <bt_hci_cmd_send_sync+0xcc>)
    cd3a:	f005 fec5 	bl	12ac8 <assert_print>
    cd3e:	463a      	mov	r2, r7
    cd40:	4631      	mov	r1, r6
    cd42:	4812      	ldr	r0, [pc, #72]	; (cd8c <bt_hci_cmd_send_sync+0xd0>)
    cd44:	f005 fec0 	bl	12ac8 <assert_print>
    cd48:	4040      	eors	r0, r0
    cd4a:	f380 8811 	msr	BASEPRI, r0
    cd4e:	f04f 0003 	mov.w	r0, #3
    cd52:	df02      	svc	2
    cd54:	e7d6      	b.n	cd04 <bt_hci_cmd_send_sync+0x48>
		net_buf_unref(buf);
    cd56:	4620      	mov	r0, r4
    cd58:	f006 fb45 	bl	133e6 <net_buf_unref>
		switch (status) {
    cd5c:	2e09      	cmp	r6, #9
    cd5e:	d002      	beq.n	cd66 <bt_hci_cmd_send_sync+0xaa>
			return -EIO;
    cd60:	f06f 0004 	mvn.w	r0, #4
    cd64:	e7da      	b.n	cd1c <bt_hci_cmd_send_sync+0x60>
			return -ECONNREFUSED;
    cd66:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    cd6a:	e7d7      	b.n	cd1c <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
    cd6c:	4620      	mov	r0, r4
    cd6e:	f006 fb3a 	bl	133e6 <net_buf_unref>
	return 0;
    cd72:	2000      	movs	r0, #0
    cd74:	e7d2      	b.n	cd1c <bt_hci_cmd_send_sync+0x60>
    cd76:	bf00      	nop
    cd78:	20001acc 	.word	0x20001acc
    cd7c:	200002ac 	.word	0x200002ac
    cd80:	000161c4 	.word	0x000161c4
    cd84:	00016264 	.word	0x00016264
    cd88:	00016214 	.word	0x00016214
    cd8c:	00016270 	.word	0x00016270

0000cd90 <common_init>:
{
    cd90:	b510      	push	{r4, lr}
    cd92:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    cd94:	4b22      	ldr	r3, [pc, #136]	; (ce20 <common_init+0x90>)
    cd96:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cd9a:	689b      	ldr	r3, [r3, #8]
    cd9c:	f013 0f01 	tst.w	r3, #1
    cda0:	d10d      	bne.n	cdbe <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    cda2:	aa01      	add	r2, sp, #4
    cda4:	2100      	movs	r1, #0
    cda6:	f640 4003 	movw	r0, #3075	; 0xc03
    cdaa:	f7ff ff87 	bl	ccbc <bt_hci_cmd_send_sync>
		if (err) {
    cdae:	4604      	mov	r4, r0
    cdb0:	b968      	cbnz	r0, cdce <common_init+0x3e>
		hci_reset_complete(rsp);
    cdb2:	9801      	ldr	r0, [sp, #4]
    cdb4:	f7ff fde4 	bl	c980 <hci_reset_complete>
		net_buf_unref(rsp);
    cdb8:	9801      	ldr	r0, [sp, #4]
    cdba:	f006 fb14 	bl	133e6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    cdbe:	aa01      	add	r2, sp, #4
    cdc0:	2100      	movs	r1, #0
    cdc2:	f241 0003 	movw	r0, #4099	; 0x1003
    cdc6:	f7ff ff79 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    cdca:	4604      	mov	r4, r0
    cdcc:	b110      	cbz	r0, cdd4 <common_init+0x44>
}
    cdce:	4620      	mov	r0, r4
    cdd0:	b002      	add	sp, #8
    cdd2:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
    cdd4:	9801      	ldr	r0, [sp, #4]
    cdd6:	f7ff fdef 	bl	c9b8 <read_local_features_complete>
	net_buf_unref(rsp);
    cdda:	9801      	ldr	r0, [sp, #4]
    cddc:	f006 fb03 	bl	133e6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    cde0:	aa01      	add	r2, sp, #4
    cde2:	2100      	movs	r1, #0
    cde4:	f241 0001 	movw	r0, #4097	; 0x1001
    cde8:	f7ff ff68 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    cdec:	4604      	mov	r4, r0
    cdee:	2800      	cmp	r0, #0
    cdf0:	d1ed      	bne.n	cdce <common_init+0x3e>
	read_local_ver_complete(rsp);
    cdf2:	9801      	ldr	r0, [sp, #4]
    cdf4:	f7ff fda2 	bl	c93c <read_local_ver_complete>
	net_buf_unref(rsp);
    cdf8:	9801      	ldr	r0, [sp, #4]
    cdfa:	f006 faf4 	bl	133e6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    cdfe:	aa01      	add	r2, sp, #4
    ce00:	2100      	movs	r1, #0
    ce02:	f241 0002 	movw	r0, #4098	; 0x1002
    ce06:	f7ff ff59 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    ce0a:	4604      	mov	r4, r0
    ce0c:	2800      	cmp	r0, #0
    ce0e:	d1de      	bne.n	cdce <common_init+0x3e>
	read_supported_commands_complete(rsp);
    ce10:	9801      	ldr	r0, [sp, #4]
    ce12:	f7ff fddb 	bl	c9cc <read_supported_commands_complete>
	net_buf_unref(rsp);
    ce16:	9801      	ldr	r0, [sp, #4]
    ce18:	f006 fae5 	bl	133e6 <net_buf_unref>
	return 0;
    ce1c:	e7d7      	b.n	cdce <common_init+0x3e>
    ce1e:	bf00      	nop
    ce20:	200001a0 	.word	0x200001a0

0000ce24 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    ce24:	4b2b      	ldr	r3, [pc, #172]	; (ced4 <le_init+0xb0>)
    ce26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    ce2a:	f013 0f40 	tst.w	r3, #64	; 0x40
    ce2e:	d049      	beq.n	cec4 <le_init+0xa0>
{
    ce30:	b510      	push	{r4, lr}
    ce32:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    ce34:	aa01      	add	r2, sp, #4
    ce36:	2100      	movs	r1, #0
    ce38:	f242 0003 	movw	r0, #8195	; 0x2003
    ce3c:	f7ff ff3e 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    ce40:	4603      	mov	r3, r0
    ce42:	b110      	cbz	r0, ce4a <le_init+0x26>
}
    ce44:	4618      	mov	r0, r3
    ce46:	b002      	add	sp, #8
    ce48:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
    ce4a:	9801      	ldr	r0, [sp, #4]
    ce4c:	f7ff fdc8 	bl	c9e0 <read_le_features_complete>
	net_buf_unref(rsp);
    ce50:	9801      	ldr	r0, [sp, #4]
    ce52:	f006 fac8 	bl	133e6 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    ce56:	4b1f      	ldr	r3, [pc, #124]	; (ced4 <le_init+0xb0>)
    ce58:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    ce5c:	f013 0f20 	tst.w	r3, #32
    ce60:	d018      	beq.n	ce94 <le_init+0x70>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    ce62:	4b1c      	ldr	r3, [pc, #112]	; (ced4 <le_init+0xb0>)
    ce64:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    ce68:	f013 0f08 	tst.w	r3, #8
    ce6c:	d00e      	beq.n	ce8c <le_init+0x68>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    ce6e:	aa01      	add	r2, sp, #4
    ce70:	2100      	movs	r1, #0
    ce72:	f242 001c 	movw	r0, #8220	; 0x201c
    ce76:	f7ff ff21 	bl	ccbc <bt_hci_cmd_send_sync>
		if (err) {
    ce7a:	4603      	mov	r3, r0
    ce7c:	2800      	cmp	r0, #0
    ce7e:	d1e1      	bne.n	ce44 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    ce80:	9801      	ldr	r0, [sp, #4]
    ce82:	f7ff fd71 	bl	c968 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    ce86:	9801      	ldr	r0, [sp, #4]
    ce88:	f006 faad 	bl	133e6 <net_buf_unref>
	return  le_set_event_mask();
    ce8c:	f006 f866 	bl	12f5c <le_set_event_mask>
    ce90:	4603      	mov	r3, r0
    ce92:	e7d7      	b.n	ce44 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    ce94:	2102      	movs	r1, #2
    ce96:	f640 406d 	movw	r0, #3181	; 0xc6d
    ce9a:	f7ff fed1 	bl	cc40 <bt_hci_cmd_create>
		if (!buf) {
    ce9e:	4604      	mov	r4, r0
    cea0:	b1a0      	cbz	r0, cecc <le_init+0xa8>
    cea2:	2102      	movs	r1, #2
    cea4:	300c      	adds	r0, #12
    cea6:	f006 fac9 	bl	1343c <net_buf_simple_add>
		cp_le->le = 0x01;
    ceaa:	2301      	movs	r3, #1
    ceac:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    ceae:	2200      	movs	r2, #0
    ceb0:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    ceb2:	4621      	mov	r1, r4
    ceb4:	f640 406d 	movw	r0, #3181	; 0xc6d
    ceb8:	f7ff ff00 	bl	ccbc <bt_hci_cmd_send_sync>
		if (err) {
    cebc:	4603      	mov	r3, r0
    cebe:	2800      	cmp	r0, #0
    cec0:	d0cf      	beq.n	ce62 <le_init+0x3e>
    cec2:	e7bf      	b.n	ce44 <le_init+0x20>
		return -ENODEV;
    cec4:	f06f 0312 	mvn.w	r3, #18
}
    cec8:	4618      	mov	r0, r3
    ceca:	4770      	bx	lr
			return -ENOBUFS;
    cecc:	f06f 0368 	mvn.w	r3, #104	; 0x68
    ced0:	e7b8      	b.n	ce44 <le_init+0x20>
    ced2:	bf00      	nop
    ced4:	200001a0 	.word	0x200001a0

0000ced8 <set_event_mask>:
{
    ced8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    ceda:	2108      	movs	r1, #8
    cedc:	f640 4001 	movw	r0, #3073	; 0xc01
    cee0:	f7ff feae 	bl	cc40 <bt_hci_cmd_create>
	if (!buf) {
    cee4:	b188      	cbz	r0, cf0a <set_event_mask+0x32>
    cee6:	4604      	mov	r4, r0
    cee8:	2108      	movs	r1, #8
    ceea:	300c      	adds	r0, #12
    ceec:	f006 faa6 	bl	1343c <net_buf_simple_add>
    cef0:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
    cef2:	4807      	ldr	r0, [pc, #28]	; (cf10 <set_event_mask+0x38>)
    cef4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    cef8:	f005 ffb6 	bl	12e68 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    cefc:	2200      	movs	r2, #0
    cefe:	4621      	mov	r1, r4
    cf00:	f640 4001 	movw	r0, #3073	; 0xc01
    cf04:	f7ff feda 	bl	ccbc <bt_hci_cmd_send_sync>
}
    cf08:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
    cf0a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cf0e:	e7fb      	b.n	cf08 <set_event_mask+0x30>
    cf10:	02008000 	.word	0x02008000

0000cf14 <hci_vs_init>:
{
    cf14:	b510      	push	{r4, lr}
    cf16:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    cf18:	aa01      	add	r2, sp, #4
    cf1a:	2100      	movs	r1, #0
    cf1c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    cf20:	f7ff fecc 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    cf24:	b108      	cbz	r0, cf2a <hci_vs_init+0x16>
}
    cf26:	b002      	add	sp, #8
    cf28:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    cf2a:	9801      	ldr	r0, [sp, #4]
    cf2c:	f006 fa5b 	bl	133e6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    cf30:	aa01      	add	r2, sp, #4
    cf32:	2100      	movs	r1, #0
    cf34:	f64f 4002 	movw	r0, #64514	; 0xfc02
    cf38:	f7ff fec0 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    cf3c:	2800      	cmp	r0, #0
    cf3e:	d1f2      	bne.n	cf26 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    cf40:	9b01      	ldr	r3, [sp, #4]
    cf42:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    cf44:	4c0f      	ldr	r4, [pc, #60]	; (cf84 <hci_vs_init+0x70>)
    cf46:	2202      	movs	r2, #2
    cf48:	3101      	adds	r1, #1
    cf4a:	4620      	mov	r0, r4
    cf4c:	f005 ff03 	bl	12d56 <memcpy>
	net_buf_unref(rsp);
    cf50:	9801      	ldr	r0, [sp, #4]
    cf52:	f006 fa48 	bl	133e6 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    cf56:	7823      	ldrb	r3, [r4, #0]
    cf58:	f013 0f04 	tst.w	r3, #4
    cf5c:	d0e3      	beq.n	cf26 <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    cf5e:	aa01      	add	r2, sp, #4
    cf60:	2100      	movs	r1, #0
    cf62:	f64f 4003 	movw	r0, #64515	; 0xfc03
    cf66:	f7ff fea9 	bl	ccbc <bt_hci_cmd_send_sync>
		if (err) {
    cf6a:	2800      	cmp	r0, #0
    cf6c:	d1db      	bne.n	cf26 <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
    cf6e:	9b01      	ldr	r3, [sp, #4]
    cf70:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
    cf72:	2201      	movs	r2, #1
    cf74:	4411      	add	r1, r2
    cf76:	1e60      	subs	r0, r4, #1
    cf78:	f005 feed 	bl	12d56 <memcpy>
		net_buf_unref(rsp);
    cf7c:	9801      	ldr	r0, [sp, #4]
    cf7e:	f006 fa32 	bl	133e6 <net_buf_unref>
    cf82:	e7d0      	b.n	cf26 <hci_vs_init+0x12>
    cf84:	20000261 	.word	0x20000261

0000cf88 <hci_init>:
{
    cf88:	b508      	push	{r3, lr}
	err = common_init();
    cf8a:	f7ff ff01 	bl	cd90 <common_init>
	if (err) {
    cf8e:	4603      	mov	r3, r0
    cf90:	b108      	cbz	r0, cf96 <hci_init+0xe>
}
    cf92:	4618      	mov	r0, r3
    cf94:	bd08      	pop	{r3, pc}
	err = le_init();
    cf96:	f7ff ff45 	bl	ce24 <le_init>
	if (err) {
    cf9a:	4603      	mov	r3, r0
    cf9c:	2800      	cmp	r0, #0
    cf9e:	d1f8      	bne.n	cf92 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    cfa0:	4b0a      	ldr	r3, [pc, #40]	; (cfcc <hci_init+0x44>)
    cfa2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    cfa6:	f013 0f20 	tst.w	r3, #32
    cfaa:	d104      	bne.n	cfb6 <hci_init+0x2e>
		err = bt_br_init();
    cfac:	f005 ffa9 	bl	12f02 <bt_br_init>
		if (err) {
    cfb0:	4603      	mov	r3, r0
    cfb2:	2800      	cmp	r0, #0
    cfb4:	d1ed      	bne.n	cf92 <hci_init+0xa>
	err = set_event_mask();
    cfb6:	f7ff ff8f 	bl	ced8 <set_event_mask>
	if (err) {
    cfba:	4603      	mov	r3, r0
    cfbc:	2800      	cmp	r0, #0
    cfbe:	d1e8      	bne.n	cf92 <hci_init+0xa>
	hci_vs_init();
    cfc0:	f7ff ffa8 	bl	cf14 <hci_vs_init>
	err = bt_id_init();
    cfc4:	f000 fb88 	bl	d6d8 <bt_id_init>
    cfc8:	4603      	mov	r3, r0
	if (err) {
    cfca:	e7e2      	b.n	cf92 <hci_init+0xa>
    cfcc:	200001a0 	.word	0x200001a0

0000cfd0 <bt_hci_le_rand>:
{
    cfd0:	b570      	push	{r4, r5, r6, lr}
    cfd2:	b082      	sub	sp, #8
    cfd4:	4606      	mov	r6, r0
    cfd6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cfd8:	4b12      	ldr	r3, [pc, #72]	; (d024 <bt_hci_le_rand+0x54>)
    cfda:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    cfde:	2b00      	cmp	r3, #0
    cfe0:	da1d      	bge.n	d01e <bt_hci_le_rand+0x4e>
	while (len > 0) {
    cfe2:	b1c4      	cbz	r4, d016 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
    cfe4:	4625      	mov	r5, r4
    cfe6:	2c08      	cmp	r4, #8
    cfe8:	bf28      	it	cs
    cfea:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cfec:	aa01      	add	r2, sp, #4
    cfee:	2100      	movs	r1, #0
    cff0:	f242 0018 	movw	r0, #8216	; 0x2018
    cff4:	f7ff fe62 	bl	ccbc <bt_hci_cmd_send_sync>
		if (err) {
    cff8:	4603      	mov	r3, r0
    cffa:	b968      	cbnz	r0, d018 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
    cffc:	9b01      	ldr	r3, [sp, #4]
    cffe:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
    d000:	462a      	mov	r2, r5
    d002:	3101      	adds	r1, #1
    d004:	4630      	mov	r0, r6
    d006:	f005 fea6 	bl	12d56 <memcpy>
		net_buf_unref(rsp);
    d00a:	9801      	ldr	r0, [sp, #4]
    d00c:	f006 f9eb 	bl	133e6 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    d010:	442e      	add	r6, r5
		len -= count;
    d012:	1b64      	subs	r4, r4, r5
    d014:	e7e5      	b.n	cfe2 <bt_hci_le_rand+0x12>
	return 0;
    d016:	2300      	movs	r3, #0
}
    d018:	4618      	mov	r0, r3
    d01a:	b002      	add	sp, #8
    d01c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    d01e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d022:	e7f9      	b.n	d018 <bt_hci_le_rand+0x48>
    d024:	200001a0 	.word	0x200001a0

0000d028 <bt_send>:
{
    d028:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    d02a:	4b03      	ldr	r3, [pc, #12]	; (d038 <bt_send+0x10>)
    d02c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d030:	695b      	ldr	r3, [r3, #20]
    d032:	4798      	blx	r3
}
    d034:	bd08      	pop	{r3, pc}
    d036:	bf00      	nop
    d038:	200001a0 	.word	0x200001a0

0000d03c <send_cmd>:
{
    d03c:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    d03e:	2200      	movs	r2, #0
    d040:	2300      	movs	r3, #0
    d042:	4821      	ldr	r0, [pc, #132]	; (d0c8 <send_cmd+0x8c>)
    d044:	f006 f999 	bl	1337a <net_buf_get>
	BT_ASSERT(buf);
    d048:	4604      	mov	r4, r0
    d04a:	b1d8      	cbz	r0, d084 <send_cmd+0x48>
    d04c:	4d1f      	ldr	r5, [pc, #124]	; (d0cc <send_cmd+0x90>)
    d04e:	f04f 32ff 	mov.w	r2, #4294967295
    d052:	f04f 33ff 	mov.w	r3, #4294967295
    d056:	4628      	mov	r0, r5
    d058:	f003 fdae 	bl	10bb8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    d05c:	69a8      	ldr	r0, [r5, #24]
    d05e:	b130      	cbz	r0, d06e <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
    d060:	f006 f9c1 	bl	133e6 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d064:	f1a5 03e8 	sub.w	r3, r5, #232	; 0xe8
    d068:	2200      	movs	r2, #0
    d06a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    d06e:	4620      	mov	r0, r4
    d070:	f006 f9dc 	bl	1342c <net_buf_ref>
    d074:	4b16      	ldr	r3, [pc, #88]	; (d0d0 <send_cmd+0x94>)
    d076:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
    d07a:	4620      	mov	r0, r4
    d07c:	f7ff ffd4 	bl	d028 <bt_send>
	if (err) {
    d080:	b970      	cbnz	r0, d0a0 <send_cmd+0x64>
}
    d082:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    d084:	f640 235a 	movw	r3, #2650	; 0xa5a
    d088:	4a12      	ldr	r2, [pc, #72]	; (d0d4 <send_cmd+0x98>)
    d08a:	4913      	ldr	r1, [pc, #76]	; (d0d8 <send_cmd+0x9c>)
    d08c:	4813      	ldr	r0, [pc, #76]	; (d0dc <send_cmd+0xa0>)
    d08e:	f005 fd1b 	bl	12ac8 <assert_print>
    d092:	4040      	eors	r0, r0
    d094:	f380 8811 	msr	BASEPRI, r0
    d098:	f04f 0003 	mov.w	r0, #3
    d09c:	df02      	svc	2
    d09e:	e7d5      	b.n	d04c <send_cmd+0x10>
	z_impl_k_sem_give(sem);
    d0a0:	480a      	ldr	r0, [pc, #40]	; (d0cc <send_cmd+0x90>)
    d0a2:	f003 fd61 	bl	10b68 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    d0a6:	4620      	mov	r0, r4
    d0a8:	f006 f8bd 	bl	13226 <net_buf_id>
    d0ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d0b0:	4b0b      	ldr	r3, [pc, #44]	; (d0e0 <send_cmd+0xa4>)
    d0b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    d0b6:	4622      	mov	r2, r4
    d0b8:	211f      	movs	r1, #31
    d0ba:	8858      	ldrh	r0, [r3, #2]
    d0bc:	f7ff fc9a 	bl	c9f4 <hci_cmd_done>
		net_buf_unref(buf);
    d0c0:	4620      	mov	r0, r4
    d0c2:	f006 f990 	bl	133e6 <net_buf_unref>
    d0c6:	e7dc      	b.n	d082 <send_cmd+0x46>
    d0c8:	200002ac 	.word	0x200002ac
    d0cc:	20000288 	.word	0x20000288
    d0d0:	200001a0 	.word	0x200001a0
    d0d4:	000161c4 	.word	0x000161c4
    d0d8:	00016334 	.word	0x00016334
    d0dc:	00016214 	.word	0x00016214
    d0e0:	20001acc 	.word	0x20001acc

0000d0e4 <hci_tx_thread>:
{
    d0e4:	b508      	push	{r3, lr}
    d0e6:	e012      	b.n	d10e <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
    d0e8:	f640 23c8 	movw	r3, #2760	; 0xac8
    d0ec:	4a0f      	ldr	r2, [pc, #60]	; (d12c <hci_tx_thread+0x48>)
    d0ee:	4910      	ldr	r1, [pc, #64]	; (d130 <hci_tx_thread+0x4c>)
    d0f0:	4810      	ldr	r0, [pc, #64]	; (d134 <hci_tx_thread+0x50>)
    d0f2:	f005 fce9 	bl	12ac8 <assert_print>
    d0f6:	4040      	eors	r0, r0
    d0f8:	f380 8811 	msr	BASEPRI, r0
    d0fc:	f04f 0003 	mov.w	r0, #3
    d100:	df02      	svc	2
		process_events(events, ev_count);
    d102:	2101      	movs	r1, #1
    d104:	480c      	ldr	r0, [pc, #48]	; (d138 <hci_tx_thread+0x54>)
    d106:	f005 ff44 	bl	12f92 <process_events>
	z_impl_k_yield();
    d10a:	f004 f973 	bl	113f4 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    d10e:	480a      	ldr	r0, [pc, #40]	; (d138 <hci_tx_thread+0x54>)
    d110:	68c3      	ldr	r3, [r0, #12]
    d112:	f36f 3394 	bfc	r3, #14, #7
    d116:	60c3      	str	r3, [r0, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    d118:	f04f 32ff 	mov.w	r2, #4294967295
    d11c:	f04f 33ff 	mov.w	r3, #4294967295
    d120:	2101      	movs	r1, #1
    d122:	f004 fc65 	bl	119f0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    d126:	2800      	cmp	r0, #0
    d128:	d1de      	bne.n	d0e8 <hci_tx_thread+0x4>
    d12a:	e7ea      	b.n	d102 <hci_tx_thread+0x1e>
    d12c:	000161c4 	.word	0x000161c4
    d130:	00016264 	.word	0x00016264
    d134:	00016214 	.word	0x00016214
    d138:	20000380 	.word	0x20000380

0000d13c <hci_event_prio>:
{
    d13c:	b570      	push	{r4, r5, r6, lr}
    d13e:	b082      	sub	sp, #8
    d140:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    d142:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    d146:	4628      	mov	r0, r5
    d148:	f006 f9a1 	bl	1348e <net_buf_simple_headroom>
    d14c:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    d150:	8a23      	ldrh	r3, [r4, #16]
    d152:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d156:	2b01      	cmp	r3, #1
    d158:	d923      	bls.n	d1a2 <hci_event_prio+0x66>
	return net_buf_simple_pull_mem(&buf->b, len);
    d15a:	2102      	movs	r1, #2
    d15c:	4628      	mov	r0, r5
    d15e:	f006 f986 	bl	1346e <net_buf_simple_pull_mem>
    d162:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d164:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    d166:	2b05      	cmp	r3, #5
    d168:	d02b      	beq.n	d1c2 <hci_event_prio+0x86>
    d16a:	d32c      	bcc.n	d1c6 <hci_event_prio+0x8a>
    d16c:	3b0e      	subs	r3, #14
    d16e:	b2db      	uxtb	r3, r3
    d170:	2b01      	cmp	r3, #1
    d172:	d824      	bhi.n	d1be <hci_event_prio+0x82>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    d174:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d176:	f016 0f01 	tst.w	r6, #1
    d17a:	d026      	beq.n	d1ca <hci_event_prio+0x8e>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    d17c:	2302      	movs	r3, #2
    d17e:	4a1c      	ldr	r2, [pc, #112]	; (d1f0 <hci_event_prio+0xb4>)
    d180:	4621      	mov	r1, r4
    d182:	7828      	ldrb	r0, [r5, #0]
    d184:	f005 feb8 	bl	12ef8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d188:	f016 0f02 	tst.w	r6, #2
    d18c:	d02b      	beq.n	d1e6 <hci_event_prio+0xaa>
	buf->data = buf->__buf + state->offset;
    d18e:	6963      	ldr	r3, [r4, #20]
    d190:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d194:	4413      	add	r3, r2
    d196:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
    d198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d19c:	8223      	strh	r3, [r4, #16]
}
    d19e:	b002      	add	sp, #8
    d1a0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d1a2:	f640 636f 	movw	r3, #3695	; 0xe6f
    d1a6:	4a13      	ldr	r2, [pc, #76]	; (d1f4 <hci_event_prio+0xb8>)
    d1a8:	4913      	ldr	r1, [pc, #76]	; (d1f8 <hci_event_prio+0xbc>)
    d1aa:	4814      	ldr	r0, [pc, #80]	; (d1fc <hci_event_prio+0xc0>)
    d1ac:	f005 fc8c 	bl	12ac8 <assert_print>
    d1b0:	4040      	eors	r0, r0
    d1b2:	f380 8811 	msr	BASEPRI, r0
    d1b6:	f04f 0003 	mov.w	r0, #3
    d1ba:	df02      	svc	2
    d1bc:	e7cd      	b.n	d15a <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
    d1be:	2602      	movs	r6, #2
    d1c0:	e7d9      	b.n	d176 <hci_event_prio+0x3a>
	switch (evt) {
    d1c2:	2603      	movs	r6, #3
    d1c4:	e7d7      	b.n	d176 <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
    d1c6:	2602      	movs	r6, #2
    d1c8:	e7d5      	b.n	d176 <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d1ca:	f640 6373 	movw	r3, #3699	; 0xe73
    d1ce:	4a09      	ldr	r2, [pc, #36]	; (d1f4 <hci_event_prio+0xb8>)
    d1d0:	490b      	ldr	r1, [pc, #44]	; (d200 <hci_event_prio+0xc4>)
    d1d2:	480a      	ldr	r0, [pc, #40]	; (d1fc <hci_event_prio+0xc0>)
    d1d4:	f005 fc78 	bl	12ac8 <assert_print>
    d1d8:	4040      	eors	r0, r0
    d1da:	f380 8811 	msr	BASEPRI, r0
    d1de:	f04f 0003 	mov.w	r0, #3
    d1e2:	df02      	svc	2
    d1e4:	e7ca      	b.n	d17c <hci_event_prio+0x40>
		net_buf_unref(buf);
    d1e6:	4620      	mov	r0, r4
    d1e8:	f006 f8fd 	bl	133e6 <net_buf_unref>
}
    d1ec:	e7d7      	b.n	d19e <hci_event_prio+0x62>
    d1ee:	bf00      	nop
    d1f0:	000162c8 	.word	0x000162c8
    d1f4:	000161c4 	.word	0x000161c4
    d1f8:	000161f8 	.word	0x000161f8
    d1fc:	00016214 	.word	0x00016214
    d200:	0001629c 	.word	0x0001629c

0000d204 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    d204:	4b0a      	ldr	r3, [pc, #40]	; (d230 <bt_hci_driver_register+0x2c>)
    d206:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d20a:	b943      	cbnz	r3, d21e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    d20c:	68c3      	ldr	r3, [r0, #12]
    d20e:	b14b      	cbz	r3, d224 <bt_hci_driver_register+0x20>
    d210:	6943      	ldr	r3, [r0, #20]
    d212:	b153      	cbz	r3, d22a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    d214:	4b06      	ldr	r3, [pc, #24]	; (d230 <bt_hci_driver_register+0x2c>)
    d216:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	return 0;
    d21a:	2000      	movs	r0, #0
    d21c:	4770      	bx	lr
		return -EALREADY;
    d21e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d222:	4770      	bx	lr
		return -EINVAL;
    d224:	f06f 0015 	mvn.w	r0, #21
    d228:	4770      	bx	lr
    d22a:	f06f 0015 	mvn.w	r0, #21
}
    d22e:	4770      	bx	lr
    d230:	200001a0 	.word	0x200001a0

0000d234 <bt_finalize_init>:
{
    d234:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d236:	4b08      	ldr	r3, [pc, #32]	; (d258 <bt_finalize_init+0x24>)
    d238:	f3bf 8f5b 	dmb	ish
    d23c:	e853 1f00 	ldrex	r1, [r3]
    d240:	f041 0104 	orr.w	r1, r1, #4
    d244:	e843 1200 	strex	r2, r1, [r3]
    d248:	2a00      	cmp	r2, #0
    d24a:	d1f7      	bne.n	d23c <bt_finalize_init+0x8>
    d24c:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
    d250:	2000      	movs	r0, #0
    d252:	f000 fb6d 	bl	d930 <bt_le_scan_update>
}
    d256:	bd08      	pop	{r3, pc}
    d258:	20000274 	.word	0x20000274

0000d25c <init_work>:
{
    d25c:	b508      	push	{r3, lr}
	err = bt_init();
    d25e:	f005 fed5 	bl	1300c <bt_init>
	if (ready_cb) {
    d262:	4b02      	ldr	r3, [pc, #8]	; (d26c <init_work+0x10>)
    d264:	681b      	ldr	r3, [r3, #0]
    d266:	b103      	cbz	r3, d26a <init_work+0xe>
		ready_cb(err);
    d268:	4798      	blx	r3
}
    d26a:	bd08      	pop	{r3, pc}
    d26c:	20001ae4 	.word	0x20001ae4

0000d270 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    d270:	b5f0      	push	{r4, r5, r6, r7, lr}
    d272:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    d274:	4b36      	ldr	r3, [pc, #216]	; (d350 <bt_enable+0xe0>)
    d276:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d27a:	2b00      	cmp	r3, #0
    d27c:	d061      	beq.n	d342 <bt_enable+0xd2>
    d27e:	4605      	mov	r5, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d280:	4b34      	ldr	r3, [pc, #208]	; (d354 <bt_enable+0xe4>)
    d282:	f3bf 8f5b 	dmb	ish
    d286:	e853 2f00 	ldrex	r2, [r3]
    d28a:	f022 0202 	bic.w	r2, r2, #2
    d28e:	e843 2100 	strex	r1, r2, [r3]
    d292:	2900      	cmp	r1, #0
    d294:	d1f7      	bne.n	d286 <bt_enable+0x16>
    d296:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d29a:	f3bf 8f5b 	dmb	ish
    d29e:	e853 2f00 	ldrex	r2, [r3]
    d2a2:	f042 0101 	orr.w	r1, r2, #1
    d2a6:	e843 1000 	strex	r0, r1, [r3]
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d1f7      	bne.n	d29e <bt_enable+0x2e>
    d2ae:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d2b2:	f012 0f01 	tst.w	r2, #1
    d2b6:	d147      	bne.n	d348 <bt_enable+0xd8>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    d2b8:	4b27      	ldr	r3, [pc, #156]	; (d358 <bt_enable+0xe8>)
    d2ba:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d2bc:	4e27      	ldr	r6, [pc, #156]	; (d35c <bt_enable+0xec>)
    d2be:	2201      	movs	r2, #1
    d2c0:	4611      	mov	r1, r2
    d2c2:	4630      	mov	r0, r6
    d2c4:	f007 ff1f 	bl	15106 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    d2c8:	f106 0024 	add.w	r0, r6, #36	; 0x24
    d2cc:	f007 fef8 	bl	150c0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d2d0:	4f23      	ldr	r7, [pc, #140]	; (d360 <bt_enable+0xf0>)
    d2d2:	2200      	movs	r2, #0
    d2d4:	2300      	movs	r3, #0
    d2d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d2da:	2400      	movs	r4, #0
    d2dc:	9404      	str	r4, [sp, #16]
    d2de:	f06f 0308 	mvn.w	r3, #8
    d2e2:	9303      	str	r3, [sp, #12]
    d2e4:	9402      	str	r4, [sp, #8]
    d2e6:	9401      	str	r4, [sp, #4]
    d2e8:	9400      	str	r4, [sp, #0]
    d2ea:	4b1e      	ldr	r3, [pc, #120]	; (d364 <bt_enable+0xf4>)
    d2ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    d2f0:	491d      	ldr	r1, [pc, #116]	; (d368 <bt_enable+0xf8>)
    d2f2:	4638      	mov	r0, r7
    d2f4:	f007 fe13 	bl	14f1e <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    d2f8:	491c      	ldr	r1, [pc, #112]	; (d36c <bt_enable+0xfc>)
    d2fa:	4638      	mov	r0, r7
    d2fc:	f003 fa48 	bl	10790 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
    d300:	4f1b      	ldr	r7, [pc, #108]	; (d370 <bt_enable+0x100>)
    d302:	4638      	mov	r0, r7
    d304:	f007 ff91 	bl	1522a <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    d308:	9400      	str	r4, [sp, #0]
    d30a:	f06f 0307 	mvn.w	r3, #7
    d30e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d312:	4918      	ldr	r1, [pc, #96]	; (d374 <bt_enable+0x104>)
    d314:	4638      	mov	r0, r7
    d316:	f003 fd65 	bl	10de4 <k_work_queue_start>
    d31a:	4917      	ldr	r1, [pc, #92]	; (d378 <bt_enable+0x108>)
    d31c:	4638      	mov	r0, r7
    d31e:	f003 fa37 	bl	10790 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    d322:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    d324:	68db      	ldr	r3, [r3, #12]
    d326:	4798      	blx	r3
	if (err) {
    d328:	4604      	mov	r4, r0
    d32a:	b918      	cbnz	r0, d334 <bt_enable+0xc4>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    d32c:	b12d      	cbz	r5, d33a <bt_enable+0xca>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
    d32e:	4813      	ldr	r0, [pc, #76]	; (d37c <bt_enable+0x10c>)
    d330:	f003 fd50 	bl	10dd4 <k_work_submit>
	return 0;
}
    d334:	4620      	mov	r0, r4
    d336:	b009      	add	sp, #36	; 0x24
    d338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return bt_init();
    d33a:	f005 fe67 	bl	1300c <bt_init>
    d33e:	4604      	mov	r4, r0
    d340:	e7f8      	b.n	d334 <bt_enable+0xc4>
		return -ENODEV;
    d342:	f06f 0412 	mvn.w	r4, #18
    d346:	e7f5      	b.n	d334 <bt_enable+0xc4>
		return -EALREADY;
    d348:	f06f 0477 	mvn.w	r4, #119	; 0x77
    d34c:	e7f2      	b.n	d334 <bt_enable+0xc4>
    d34e:	bf00      	nop
    d350:	200001a0 	.word	0x200001a0
    d354:	20000274 	.word	0x20000274
    d358:	20001ae4 	.word	0x20001ae4
    d35c:	20000288 	.word	0x20000288
    d360:	20001410 	.word	0x20001410
    d364:	0000d0e5 	.word	0x0000d0e5
    d368:	20002640 	.word	0x20002640
    d36c:	000162b8 	.word	0x000162b8
    d370:	200014c8 	.word	0x200014c8
    d374:	20002c80 	.word	0x20002c80
    d378:	000162c0 	.word	0x000162c0
    d37c:	20000264 	.word	0x20000264

0000d380 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d380:	f3bf 8f5b 	dmb	ish
    d384:	4b03      	ldr	r3, [pc, #12]	; (d394 <bt_is_ready+0x14>)
    d386:	6818      	ldr	r0, [r3, #0]
    d388:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d38c:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    d390:	4770      	bx	lr
    d392:	bf00      	nop
    d394:	20000274 	.word	0x20000274

0000d398 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    d398:	b570      	push	{r4, r5, r6, lr}
    d39a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    d39c:	2400      	movs	r4, #0
    d39e:	e001      	b.n	d3a4 <id_find+0xc>
    d3a0:	3401      	adds	r4, #1
    d3a2:	b2e4      	uxtb	r4, r4
    d3a4:	4b09      	ldr	r3, [pc, #36]	; (d3cc <id_find+0x34>)
    d3a6:	79db      	ldrb	r3, [r3, #7]
    d3a8:	42a3      	cmp	r3, r4
    d3aa:	d90b      	bls.n	d3c4 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    d3ac:	4626      	mov	r6, r4
    d3ae:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    d3b2:	2207      	movs	r2, #7
    d3b4:	4b05      	ldr	r3, [pc, #20]	; (d3cc <id_find+0x34>)
    d3b6:	4419      	add	r1, r3
    d3b8:	4628      	mov	r0, r5
    d3ba:	f005 fcba 	bl	12d32 <memcmp>
    d3be:	2800      	cmp	r0, #0
    d3c0:	d1ee      	bne.n	d3a0 <id_find+0x8>
    d3c2:	e001      	b.n	d3c8 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
    d3c4:	f06f 0601 	mvn.w	r6, #1
}
    d3c8:	4630      	mov	r0, r6
    d3ca:	bd70      	pop	{r4, r5, r6, pc}
    d3cc:	200001a0 	.word	0x200001a0

0000d3d0 <set_random_address>:
{
    d3d0:	b570      	push	{r4, r5, r6, lr}
    d3d2:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    d3d4:	2206      	movs	r2, #6
    d3d6:	4914      	ldr	r1, [pc, #80]	; (d428 <set_random_address+0x58>)
    d3d8:	f005 fcab 	bl	12d32 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    d3dc:	4605      	mov	r5, r0
    d3de:	b908      	cbnz	r0, d3e4 <set_random_address+0x14>
}
    d3e0:	4628      	mov	r0, r5
    d3e2:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    d3e4:	2106      	movs	r1, #6
    d3e6:	f242 0005 	movw	r0, #8197	; 0x2005
    d3ea:	f7ff fc29 	bl	cc40 <bt_hci_cmd_create>
	if (!buf) {
    d3ee:	4605      	mov	r5, r0
    d3f0:	b1b8      	cbz	r0, d422 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d3f2:	2206      	movs	r2, #6
    d3f4:	4621      	mov	r1, r4
    d3f6:	300c      	adds	r0, #12
    d3f8:	f006 f826 	bl	13448 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    d3fc:	2200      	movs	r2, #0
    d3fe:	4629      	mov	r1, r5
    d400:	f242 0005 	movw	r0, #8197	; 0x2005
    d404:	f7ff fc5a 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    d408:	4605      	mov	r5, r0
    d40a:	2800      	cmp	r0, #0
    d40c:	d1e8      	bne.n	d3e0 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    d40e:	4e06      	ldr	r6, [pc, #24]	; (d428 <set_random_address+0x58>)
    d410:	2206      	movs	r2, #6
    d412:	4621      	mov	r1, r4
    d414:	4630      	mov	r0, r6
    d416:	f005 fc9e 	bl	12d56 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    d41a:	2301      	movs	r3, #1
    d41c:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
    d420:	e7de      	b.n	d3e0 <set_random_address+0x10>
		return -ENOBUFS;
    d422:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d426:	e7db      	b.n	d3e0 <set_random_address+0x10>
    d428:	20000209 	.word	0x20000209

0000d42c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
    d42c:	b570      	push	{r4, r5, r6, lr}
    d42e:	b082      	sub	sp, #8
    d430:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d432:	460e      	mov	r6, r1
    d434:	b129      	cbz	r1, d442 <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
    d436:	2207      	movs	r2, #7
    d438:	4915      	ldr	r1, [pc, #84]	; (d490 <id_create+0x64>)
    d43a:	4630      	mov	r0, r6
    d43c:	f005 fc79 	bl	12d32 <memcmp>
    d440:	b9d8      	cbnz	r0, d47a <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
    d442:	4668      	mov	r0, sp
    d444:	f005 fcf4 	bl	12e30 <bt_addr_le_create_static>
			if (err) {
    d448:	4604      	mov	r4, r0
    d44a:	b998      	cbnz	r0, d474 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
    d44c:	4668      	mov	r0, sp
    d44e:	f7ff ffa3 	bl	d398 <id_find>
    d452:	2800      	cmp	r0, #0
    d454:	daf5      	bge.n	d442 <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    d456:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    d45a:	4b0e      	ldr	r3, [pc, #56]	; (d494 <id_create+0x68>)
    d45c:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
    d45e:	2207      	movs	r2, #7
    d460:	4669      	mov	r1, sp
    d462:	4628      	mov	r0, r5
    d464:	f005 fc77 	bl	12d56 <memcpy>

		if (addr) {
    d468:	b126      	cbz	r6, d474 <id_create+0x48>
    d46a:	2207      	movs	r2, #7
    d46c:	4629      	mov	r1, r5
    d46e:	4630      	mov	r0, r6
    d470:	f005 fc71 	bl	12d56 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
    d474:	4620      	mov	r0, r4
    d476:	b002      	add	sp, #8
    d478:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    d47a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    d47e:	2207      	movs	r2, #7
    d480:	4631      	mov	r1, r6
    d482:	4804      	ldr	r0, [pc, #16]	; (d494 <id_create+0x68>)
    d484:	4428      	add	r0, r5
    d486:	f005 fc66 	bl	12d56 <memcpy>
	return 0;
    d48a:	2400      	movs	r4, #0
}
    d48c:	e7f2      	b.n	d474 <id_create+0x48>
    d48e:	bf00      	nop
    d490:	00016184 	.word	0x00016184
    d494:	200001a0 	.word	0x200001a0

0000d498 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    d498:	b570      	push	{r4, r5, r6, lr}
    d49a:	b084      	sub	sp, #16
    d49c:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d49e:	4605      	mov	r5, r0
    d4a0:	b188      	cbz	r0, d4c6 <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
    d4a2:	2207      	movs	r2, #7
    d4a4:	4926      	ldr	r1, [pc, #152]	; (d540 <bt_id_create+0xa8>)
    d4a6:	f005 fc44 	bl	12d32 <memcmp>
    d4aa:	b160      	cbz	r0, d4c6 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d4ac:	782b      	ldrb	r3, [r5, #0]
    d4ae:	2b01      	cmp	r3, #1
    d4b0:	d136      	bne.n	d520 <bt_id_create+0x88>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
    d4b2:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d4b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d4b8:	2bc0      	cmp	r3, #192	; 0xc0
    d4ba:	d134      	bne.n	d526 <bt_id_create+0x8e>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
    d4bc:	4628      	mov	r0, r5
    d4be:	f7ff ff6b 	bl	d398 <id_find>
    d4c2:	2800      	cmp	r0, #0
    d4c4:	da32      	bge.n	d52c <bt_id_create+0x94>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    d4c6:	2c00      	cmp	r4, #0
    d4c8:	d133      	bne.n	d532 <bt_id_create+0x9a>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    d4ca:	4b1e      	ldr	r3, [pc, #120]	; (d544 <bt_id_create+0xac>)
    d4cc:	79db      	ldrb	r3, [r3, #7]
    d4ce:	2b01      	cmp	r3, #1
    d4d0:	d032      	beq.n	d538 <bt_id_create+0xa0>
    d4d2:	f3bf 8f5b 	dmb	ish
    d4d6:	4b1c      	ldr	r3, [pc, #112]	; (d548 <bt_id_create+0xb0>)
    d4d8:	681b      	ldr	r3, [r3, #0]
    d4da:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d4de:	f013 0f01 	tst.w	r3, #1
    d4e2:	d10b      	bne.n	d4fc <bt_id_create+0x64>
		uint8_t zero_irk[16] = { 0 };
    d4e4:	2300      	movs	r3, #0
    d4e6:	9300      	str	r3, [sp, #0]
    d4e8:	9301      	str	r3, [sp, #4]
    d4ea:	9302      	str	r3, [sp, #8]
    d4ec:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    d4ee:	b1a5      	cbz	r5, d51a <bt_id_create+0x82>
    d4f0:	2207      	movs	r2, #7
    d4f2:	4913      	ldr	r1, [pc, #76]	; (d540 <bt_id_create+0xa8>)
    d4f4:	4628      	mov	r0, r5
    d4f6:	f005 fc1c 	bl	12d32 <memcmp>
    d4fa:	b170      	cbz	r0, d51a <bt_id_create+0x82>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
    d4fc:	4b11      	ldr	r3, [pc, #68]	; (d544 <bt_id_create+0xac>)
    d4fe:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
    d500:	4622      	mov	r2, r4
    d502:	4629      	mov	r1, r5
    d504:	4630      	mov	r0, r6
    d506:	f7ff ff91 	bl	d42c <id_create>
	if (err) {
    d50a:	b920      	cbnz	r0, d516 <bt_id_create+0x7e>
		return err;
	} else {
		bt_dev.id_count++;
    d50c:	4a0d      	ldr	r2, [pc, #52]	; (d544 <bt_id_create+0xac>)
    d50e:	79d3      	ldrb	r3, [r2, #7]
    d510:	3301      	adds	r3, #1
    d512:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
    d514:	4630      	mov	r0, r6
}
    d516:	b004      	add	sp, #16
    d518:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    d51a:	f06f 0015 	mvn.w	r0, #21
    d51e:	e7fa      	b.n	d516 <bt_id_create+0x7e>
			return -EINVAL;
    d520:	f06f 0015 	mvn.w	r0, #21
    d524:	e7f7      	b.n	d516 <bt_id_create+0x7e>
    d526:	f06f 0015 	mvn.w	r0, #21
    d52a:	e7f4      	b.n	d516 <bt_id_create+0x7e>
			return -EALREADY;
    d52c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d530:	e7f1      	b.n	d516 <bt_id_create+0x7e>
		return -EINVAL;
    d532:	f06f 0015 	mvn.w	r0, #21
    d536:	e7ee      	b.n	d516 <bt_id_create+0x7e>
		return -ENOMEM;
    d538:	f06f 000b 	mvn.w	r0, #11
    d53c:	e7eb      	b.n	d516 <bt_id_create+0x7e>
    d53e:	bf00      	nop
    d540:	00016184 	.word	0x00016184
    d544:	200001a0 	.word	0x200001a0
    d548:	20000274 	.word	0x20000274

0000d54c <bt_id_read_public_addr>:
{
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    d54c:	b360      	cbz	r0, d5a8 <bt_id_read_public_addr+0x5c>
{
    d54e:	b530      	push	{r4, r5, lr}
    d550:	b083      	sub	sp, #12
    d552:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    d554:	aa01      	add	r2, sp, #4
    d556:	2100      	movs	r1, #0
    d558:	f241 0009 	movw	r0, #4105	; 0x1009
    d55c:	f7ff fbae 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    d560:	b110      	cbz	r0, d568 <bt_id_read_public_addr+0x1c>
		LOG_WRN("Failed to read public address");
		return 0U;
    d562:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    d564:	b003      	add	sp, #12
    d566:	bd30      	pop	{r4, r5, pc}
	rp = (void *)rsp->data;
    d568:	9b01      	ldr	r3, [sp, #4]
    d56a:	68dc      	ldr	r4, [r3, #12]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d56c:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
    d56e:	2206      	movs	r2, #6
    d570:	490e      	ldr	r1, [pc, #56]	; (d5ac <bt_id_read_public_addr+0x60>)
    d572:	4620      	mov	r0, r4
    d574:	f005 fbdd 	bl	12d32 <memcmp>
    d578:	b128      	cbz	r0, d586 <bt_id_read_public_addr+0x3a>
    d57a:	2206      	movs	r2, #6
    d57c:	490c      	ldr	r1, [pc, #48]	; (d5b0 <bt_id_read_public_addr+0x64>)
    d57e:	4620      	mov	r0, r4
    d580:	f005 fbd7 	bl	12d32 <memcmp>
    d584:	b920      	cbnz	r0, d590 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
    d586:	9801      	ldr	r0, [sp, #4]
    d588:	f005 ff2d 	bl	133e6 <net_buf_unref>
		return 0U;
    d58c:	2000      	movs	r0, #0
    d58e:	e7e9      	b.n	d564 <bt_id_read_public_addr+0x18>
	memcpy(dst, src, sizeof(*dst));
    d590:	2206      	movs	r2, #6
    d592:	4621      	mov	r1, r4
    d594:	1c68      	adds	r0, r5, #1
    d596:	f005 fbde 	bl	12d56 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
    d59a:	2300      	movs	r3, #0
    d59c:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
    d59e:	9801      	ldr	r0, [sp, #4]
    d5a0:	f005 ff21 	bl	133e6 <net_buf_unref>
	return 1U;
    d5a4:	2001      	movs	r0, #1
    d5a6:	e7dd      	b.n	d564 <bt_id_read_public_addr+0x18>
		return 0U;
    d5a8:	2000      	movs	r0, #0
}
    d5aa:	4770      	bx	lr
    d5ac:	00016194 	.word	0x00016194
    d5b0:	0001618c 	.word	0x0001618c

0000d5b4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    d5b4:	b500      	push	{lr}
    d5b6:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    d5b8:	4668      	mov	r0, sp
    d5ba:	f7ff ffc7 	bl	d54c <bt_id_read_public_addr>
    d5be:	4b06      	ldr	r3, [pc, #24]	; (d5d8 <bt_setup_public_id_addr+0x24>)
    d5c0:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    d5c2:	b918      	cbnz	r0, d5cc <bt_setup_public_id_addr+0x18>
		return 0;
    d5c4:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
    d5c6:	b003      	add	sp, #12
    d5c8:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
    d5cc:	2200      	movs	r2, #0
    d5ce:	4669      	mov	r1, sp
    d5d0:	4610      	mov	r0, r2
    d5d2:	f7ff ff2b 	bl	d42c <id_create>
    d5d6:	e7f6      	b.n	d5c6 <bt_setup_public_id_addr+0x12>
    d5d8:	200001a0 	.word	0x200001a0

0000d5dc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5e0:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d5e2:	4b16      	ldr	r3, [pc, #88]	; (d63c <bt_read_static_addr+0x60>)
    d5e4:	f893 50c2 	ldrb.w	r5, [r3, #194]	; 0xc2
    d5e8:	f015 0501 	ands.w	r5, r5, #1
    d5ec:	d103      	bne.n	d5f6 <bt_read_static_addr+0x1a>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    d5ee:	4628      	mov	r0, r5
    d5f0:	b002      	add	sp, #8
    d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5f6:	4606      	mov	r6, r0
    d5f8:	4688      	mov	r8, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    d5fa:	aa01      	add	r2, sp, #4
    d5fc:	2100      	movs	r1, #0
    d5fe:	f64f 4009 	movw	r0, #64521	; 0xfc09
    d602:	f7ff fb5b 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    d606:	4604      	mov	r4, r0
    d608:	b9a8      	cbnz	r0, d636 <bt_read_static_addr+0x5a>
	rp = (void *)rsp->data;
    d60a:	9b01      	ldr	r3, [sp, #4]
    d60c:	68df      	ldr	r7, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    d60e:	787d      	ldrb	r5, [r7, #1]
    d610:	4545      	cmp	r5, r8
    d612:	bf28      	it	cs
    d614:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
    d616:	e008      	b.n	d62a <bt_read_static_addr+0x4e>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    d618:	2216      	movs	r2, #22
    d61a:	fb02 f004 	mul.w	r0, r2, r4
    d61e:	1839      	adds	r1, r7, r0
    d620:	3102      	adds	r1, #2
    d622:	4430      	add	r0, r6
    d624:	f005 fb97 	bl	12d56 <memcpy>
	for (i = 0; i < cnt; i++) {
    d628:	3401      	adds	r4, #1
    d62a:	42a5      	cmp	r5, r4
    d62c:	dcf4      	bgt.n	d618 <bt_read_static_addr+0x3c>
	net_buf_unref(rsp);
    d62e:	9801      	ldr	r0, [sp, #4]
    d630:	f005 fed9 	bl	133e6 <net_buf_unref>
	if (!cnt) {
    d634:	e7db      	b.n	d5ee <bt_read_static_addr+0x12>
		return 0;
    d636:	2500      	movs	r5, #0
    d638:	e7d9      	b.n	d5ee <bt_read_static_addr+0x12>
    d63a:	bf00      	nop
    d63c:	200001a0 	.word	0x200001a0

0000d640 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    d640:	b510      	push	{r4, lr}
    d642:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    d644:	4b17      	ldr	r3, [pc, #92]	; (d6a4 <bt_setup_random_id_addr+0x64>)
    d646:	79dc      	ldrb	r4, [r3, #7]
    d648:	b934      	cbnz	r4, d658 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    d64a:	2101      	movs	r1, #1
    d64c:	a802      	add	r0, sp, #8
    d64e:	f7ff ffc5 	bl	d5dc <bt_read_static_addr>
    d652:	4b14      	ldr	r3, [pc, #80]	; (d6a4 <bt_setup_random_id_addr+0x64>)
    d654:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
    d656:	b948      	cbnz	r0, d66c <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    d658:	2100      	movs	r1, #0
    d65a:	4608      	mov	r0, r1
    d65c:	f7ff ff1c 	bl	d498 <bt_id_create>
    d660:	4603      	mov	r3, r0
}
    d662:	4618      	mov	r0, r3
    d664:	b008      	add	sp, #32
    d666:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    d668:	3401      	adds	r4, #1
    d66a:	b2e4      	uxtb	r4, r4
    d66c:	4b0d      	ldr	r3, [pc, #52]	; (d6a4 <bt_setup_random_id_addr+0x64>)
    d66e:	79db      	ldrb	r3, [r3, #7]
    d670:	42a3      	cmp	r3, r4
    d672:	d914      	bls.n	d69e <bt_setup_random_id_addr+0x5e>
    d674:	2206      	movs	r2, #6
    d676:	2116      	movs	r1, #22
    d678:	ab02      	add	r3, sp, #8
    d67a:	fb01 3104 	mla	r1, r1, r4, r3
    d67e:	f10d 0001 	add.w	r0, sp, #1
    d682:	f005 fb68 	bl	12d56 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    d686:	2301      	movs	r3, #1
    d688:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    d68c:	2200      	movs	r2, #0
    d68e:	4669      	mov	r1, sp
    d690:	4620      	mov	r0, r4
    d692:	f7ff fecb 	bl	d42c <id_create>
				if (err) {
    d696:	4603      	mov	r3, r0
    d698:	2800      	cmp	r0, #0
    d69a:	d0e5      	beq.n	d668 <bt_setup_random_id_addr+0x28>
    d69c:	e7e1      	b.n	d662 <bt_setup_random_id_addr+0x22>
			return 0;
    d69e:	2300      	movs	r3, #0
    d6a0:	e7df      	b.n	d662 <bt_setup_random_id_addr+0x22>
    d6a2:	bf00      	nop
    d6a4:	200001a0 	.word	0x200001a0

0000d6a8 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
    d6a8:	b181      	cbz	r1, d6cc <bt_id_set_scan_own_addr+0x24>
{
    d6aa:	b510      	push	{r4, lr}
    d6ac:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    d6ae:	4b09      	ldr	r3, [pc, #36]	; (d6d4 <bt_id_set_scan_own_addr+0x2c>)
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    d6b4:	f005 fcb4 	bl	13020 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    d6b8:	b108      	cbz	r0, d6be <bt_id_set_scan_own_addr+0x16>
		} else {
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
    d6ba:	2000      	movs	r0, #0
}
    d6bc:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    d6be:	f005 fcb9 	bl	13034 <bt_id_set_private_addr>
			if (err) {
    d6c2:	2800      	cmp	r0, #0
    d6c4:	d1fa      	bne.n	d6bc <bt_id_set_scan_own_addr+0x14>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d6c6:	2301      	movs	r3, #1
    d6c8:	7023      	strb	r3, [r4, #0]
    d6ca:	e7f7      	b.n	d6bc <bt_id_set_scan_own_addr+0x14>
		return -EINVAL;
    d6cc:	f06f 0015 	mvn.w	r0, #21
}
    d6d0:	4770      	bx	lr
    d6d2:	bf00      	nop
    d6d4:	200001a0 	.word	0x200001a0

0000d6d8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    d6d8:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d6da:	4b0a      	ldr	r3, [pc, #40]	; (d704 <bt_id_init+0x2c>)
    d6dc:	79db      	ldrb	r3, [r3, #7]
    d6de:	b123      	cbz	r3, d6ea <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d6e0:	4b08      	ldr	r3, [pc, #32]	; (d704 <bt_id_init+0x2c>)
    d6e2:	79db      	ldrb	r3, [r3, #7]
    d6e4:	b133      	cbz	r3, d6f4 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    d6e6:	2000      	movs	r0, #0
}
    d6e8:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
    d6ea:	f7ff ff63 	bl	d5b4 <bt_setup_public_id_addr>
		if (err) {
    d6ee:	2800      	cmp	r0, #0
    d6f0:	d0f6      	beq.n	d6e0 <bt_id_init+0x8>
    d6f2:	e7f9      	b.n	d6e8 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
    d6f4:	f7ff ffa4 	bl	d640 <bt_setup_random_id_addr>
		if (err) {
    d6f8:	2800      	cmp	r0, #0
    d6fa:	d1f5      	bne.n	d6e8 <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
    d6fc:	4802      	ldr	r0, [pc, #8]	; (d708 <bt_id_init+0x30>)
    d6fe:	f7ff fe67 	bl	d3d0 <set_random_address>
		if (err) {
    d702:	e7f1      	b.n	d6e8 <bt_id_init+0x10>
    d704:	200001a0 	.word	0x200001a0
    d708:	200001a1 	.word	0x200001a1

0000d70c <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    d70c:	b530      	push	{r4, r5, lr}
    d70e:	b087      	sub	sp, #28
    d710:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    d712:	2102      	movs	r1, #2
    d714:	f242 000c 	movw	r0, #8204	; 0x200c
    d718:	f7ff fa92 	bl	cc40 <bt_hci_cmd_create>
	if (!buf) {
    d71c:	b330      	cbz	r0, d76c <bt_le_scan_set_enable_legacy+0x60>
    d71e:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
    d720:	2102      	movs	r1, #2
    d722:	300c      	adds	r0, #12
    d724:	f005 fe8a 	bl	1343c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    d728:	2c01      	cmp	r4, #1
    d72a:	d015      	beq.n	d758 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    d72c:	2300      	movs	r3, #0
    d72e:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
    d730:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    d732:	2c01      	cmp	r4, #1
    d734:	bf14      	ite	ne
    d736:	2400      	movne	r4, #0
    d738:	2401      	moveq	r4, #1
    d73a:	9400      	str	r4, [sp, #0]
    d73c:	2306      	movs	r3, #6
    d73e:	4a0d      	ldr	r2, [pc, #52]	; (d774 <bt_le_scan_set_enable_legacy+0x68>)
    d740:	a903      	add	r1, sp, #12
    d742:	4628      	mov	r0, r5
    d744:	f7ff fa6a 	bl	cc1c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    d748:	2200      	movs	r2, #0
    d74a:	4629      	mov	r1, r5
    d74c:	f242 000c 	movw	r0, #8204	; 0x200c
    d750:	f7ff fab4 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    d754:	b007      	add	sp, #28
    d756:	bd30      	pop	{r4, r5, pc}
    d758:	f3bf 8f5b 	dmb	ish
    d75c:	4b05      	ldr	r3, [pc, #20]	; (d774 <bt_le_scan_set_enable_legacy+0x68>)
    d75e:	681b      	ldr	r3, [r3, #0]
    d760:	f3bf 8f5b 	dmb	ish
    d764:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    d768:	7043      	strb	r3, [r0, #1]
    d76a:	e7e1      	b.n	d730 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
    d76c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d770:	e7f0      	b.n	d754 <bt_le_scan_set_enable_legacy+0x48>
    d772:	bf00      	nop
    d774:	20000274 	.word	0x20000274

0000d778 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
    d778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d77c:	b084      	sub	sp, #16
    d77e:	4605      	mov	r5, r0
    d780:	4688      	mov	r8, r1
    d782:	4614      	mov	r4, r2
    d784:	4699      	mov	r9, r3
    d786:	f3bf 8f5b 	dmb	ish
    d78a:	4b3e      	ldr	r3, [pc, #248]	; (d884 <le_adv_recv+0x10c>)
    d78c:	681b      	ldr	r3, [r3, #0]
    d78e:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	LOG_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr), info->adv_type, len,
		info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    d792:	f013 0f80 	tst.w	r3, #128	; 0x80
    d796:	d003      	beq.n	d7a0 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
    d798:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    d79a:	f013 0f04 	tst.w	r3, #4
    d79e:	d16d      	bne.n	d87c <le_adv_recv+0x104>
		LOG_DBG("Dropped direct adv report");
		return;
	}

	if (bt_addr_le_is_resolved(addr)) {
    d7a0:	4628      	mov	r0, r5
    d7a2:	f005 fb5d 	bl	12e60 <bt_addr_le_is_resolved>
    d7a6:	2800      	cmp	r0, #0
    d7a8:	d135      	bne.n	d816 <le_adv_recv+0x9e>
		bt_addr_le_copy_resolved(&id_addr, addr);
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    d7aa:	782b      	ldrb	r3, [r5, #0]
    d7ac:	2bff      	cmp	r3, #255	; 0xff
    d7ae:	d037      	beq.n	d820 <le_adv_recv+0xa8>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
    d7b0:	4629      	mov	r1, r5
    d7b2:	2000      	movs	r0, #0
    d7b4:	f005 fc36 	bl	13024 <bt_lookup_id_addr>
    d7b8:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
    d7ba:	2207      	movs	r2, #7
    d7bc:	a801      	add	r0, sp, #4
    d7be:	f005 faca 	bl	12d56 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
    d7c2:	4b31      	ldr	r3, [pc, #196]	; (d888 <le_adv_recv+0x110>)
    d7c4:	681b      	ldr	r3, [r3, #0]
    d7c6:	b1c3      	cbz	r3, d7fa <le_adv_recv+0x82>
	state->offset = net_buf_simple_headroom(buf);
    d7c8:	4620      	mov	r0, r4
    d7ca:	f005 fe60 	bl	1348e <net_buf_simple_headroom>
    d7ce:	4605      	mov	r5, r0
    d7d0:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
    d7d4:	88a6      	ldrh	r6, [r4, #4]
    d7d6:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
    d7da:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    d7de:	4b2a      	ldr	r3, [pc, #168]	; (d888 <le_adv_recv+0x110>)
    d7e0:	681f      	ldr	r7, [r3, #0]
    d7e2:	4623      	mov	r3, r4
    d7e4:	f898 2007 	ldrb.w	r2, [r8, #7]
    d7e8:	f998 1005 	ldrsb.w	r1, [r8, #5]
    d7ec:	a801      	add	r0, sp, #4
    d7ee:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    d7f0:	68a3      	ldr	r3, [r4, #8]
    d7f2:	fa13 f585 	uxtah	r5, r3, r5
    d7f6:	6025      	str	r5, [r4, #0]
	buf->len = state->len;
    d7f8:	80a6      	strh	r6, [r4, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
    d7fa:	ab01      	add	r3, sp, #4
    d7fc:	f8c8 3000 	str.w	r3, [r8]
    d800:	4b22      	ldr	r3, [pc, #136]	; (d88c <le_adv_recv+0x114>)
    d802:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d804:	b196      	cbz	r6, d82c <le_adv_recv+0xb4>
    d806:	3e08      	subs	r6, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
    d808:	f116 0508 	adds.w	r5, r6, #8
    d80c:	d013      	beq.n	d836 <le_adv_recv+0xbe>
	return node->next;
    d80e:	68b5      	ldr	r5, [r6, #8]
    d810:	b18d      	cbz	r5, d836 <le_adv_recv+0xbe>
    d812:	3d08      	subs	r5, #8
    d814:	e00f      	b.n	d836 <le_adv_recv+0xbe>
		bt_addr_le_copy_resolved(&id_addr, addr);
    d816:	4629      	mov	r1, r5
    d818:	a801      	add	r0, sp, #4
    d81a:	f005 fb17 	bl	12e4c <bt_addr_le_copy_resolved>
    d81e:	e7d0      	b.n	d7c2 <le_adv_recv+0x4a>
    d820:	2207      	movs	r2, #7
    d822:	491b      	ldr	r1, [pc, #108]	; (d890 <le_adv_recv+0x118>)
    d824:	a801      	add	r0, sp, #4
    d826:	f005 fa96 	bl	12d56 <memcpy>
}
    d82a:	e7ca      	b.n	d7c2 <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d82c:	4635      	mov	r5, r6
    d82e:	e002      	b.n	d836 <le_adv_recv+0xbe>
    d830:	462a      	mov	r2, r5
    d832:	462e      	mov	r6, r5
    d834:	4615      	mov	r5, r2
    d836:	b1f6      	cbz	r6, d876 <le_adv_recv+0xfe>
		if (listener->recv) {
    d838:	6833      	ldr	r3, [r6, #0]
    d83a:	b1ab      	cbz	r3, d868 <le_adv_recv+0xf0>
	state->offset = net_buf_simple_headroom(buf);
    d83c:	4620      	mov	r0, r4
    d83e:	f005 fe26 	bl	1348e <net_buf_simple_headroom>
    d842:	4607      	mov	r7, r0
    d844:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
    d848:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    d84c:	f8ad a00e 	strh.w	sl, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
    d850:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
    d854:	6833      	ldr	r3, [r6, #0]
    d856:	4621      	mov	r1, r4
    d858:	4640      	mov	r0, r8
    d85a:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    d85c:	68a3      	ldr	r3, [r4, #8]
    d85e:	fa13 f787 	uxtah	r7, r3, r7
    d862:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
    d864:	f8a4 a004 	strh.w	sl, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d868:	2d00      	cmp	r5, #0
    d86a:	d0e1      	beq.n	d830 <le_adv_recv+0xb8>
    d86c:	68aa      	ldr	r2, [r5, #8]
    d86e:	2a00      	cmp	r2, #0
    d870:	d0df      	beq.n	d832 <le_adv_recv+0xba>
    d872:	3a08      	subs	r2, #8
    d874:	e7dd      	b.n	d832 <le_adv_recv+0xba>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
    d876:	2300      	movs	r3, #0
    d878:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
#endif /* CONFIG_BT_CENTRAL */
}
    d87c:	b004      	add	sp, #16
    d87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d882:	bf00      	nop
    d884:	20000274 	.word	0x20000274
    d888:	20001af0 	.word	0x20001af0
    d88c:	20001ae8 	.word	0x20001ae8
    d890:	00016184 	.word	0x00016184

0000d894 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    d894:	4b01      	ldr	r3, [pc, #4]	; (d89c <bt_scan_reset+0x8>)
    d896:	2200      	movs	r2, #0
    d898:	601a      	str	r2, [r3, #0]
}
    d89a:	4770      	bx	lr
    d89c:	20001af0 	.word	0x20001af0

0000d8a0 <start_le_scan_legacy>:
{
    d8a0:	b570      	push	{r4, r5, r6, lr}
    d8a2:	b082      	sub	sp, #8
    d8a4:	4604      	mov	r4, r0
    d8a6:	460e      	mov	r6, r1
    d8a8:	4615      	mov	r5, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    d8aa:	2207      	movs	r2, #7
    d8ac:	2100      	movs	r1, #0
    d8ae:	4668      	mov	r0, sp
    d8b0:	f005 fa80 	bl	12db4 <memset>
	set_param.scan_type = scan_type;
    d8b4:	f88d 4000 	strb.w	r4, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    d8b8:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    d8bc:	f8ad 5003 	strh.w	r5, [sp, #3]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    d8c0:	2300      	movs	r3, #0
    d8c2:	f88d 3006 	strb.w	r3, [sp, #6]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    d8c6:	2c01      	cmp	r4, #1
    d8c8:	bf14      	ite	ne
    d8ca:	2400      	movne	r4, #0
    d8cc:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    d8ce:	f10d 0105 	add.w	r1, sp, #5
    d8d2:	4620      	mov	r0, r4
    d8d4:	f7ff fee8 	bl	d6a8 <bt_id_set_scan_own_addr>
	if (err) {
    d8d8:	4605      	mov	r5, r0
    d8da:	b110      	cbz	r0, d8e2 <start_le_scan_legacy+0x42>
}
    d8dc:	4628      	mov	r0, r5
    d8de:	b002      	add	sp, #8
    d8e0:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    d8e2:	2107      	movs	r1, #7
    d8e4:	f242 000b 	movw	r0, #8203	; 0x200b
    d8e8:	f7ff f9aa 	bl	cc40 <bt_hci_cmd_create>
	if (!buf) {
    d8ec:	4605      	mov	r5, r0
    d8ee:	b1c8      	cbz	r0, d924 <start_le_scan_legacy+0x84>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d8f0:	2207      	movs	r2, #7
    d8f2:	4669      	mov	r1, sp
    d8f4:	300c      	adds	r0, #12
    d8f6:	f005 fda7 	bl	13448 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    d8fa:	2200      	movs	r2, #0
    d8fc:	4629      	mov	r1, r5
    d8fe:	f242 000b 	movw	r0, #8203	; 0x200b
    d902:	f7ff f9db 	bl	ccbc <bt_hci_cmd_send_sync>
	if (err) {
    d906:	4605      	mov	r5, r0
    d908:	2800      	cmp	r0, #0
    d90a:	d1e7      	bne.n	d8dc <start_le_scan_legacy+0x3c>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d90c:	2001      	movs	r0, #1
    d90e:	f005 fc03 	bl	13118 <bt_le_scan_set_enable>
	if (err) {
    d912:	4605      	mov	r5, r0
    d914:	2800      	cmp	r0, #0
    d916:	d1e1      	bne.n	d8dc <start_le_scan_legacy+0x3c>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    d918:	4622      	mov	r2, r4
    d91a:	2108      	movs	r1, #8
    d91c:	4803      	ldr	r0, [pc, #12]	; (d92c <start_le_scan_legacy+0x8c>)
    d91e:	f005 fbd6 	bl	130ce <atomic_set_bit_to>
	return 0;
    d922:	e7db      	b.n	d8dc <start_le_scan_legacy+0x3c>
		return -ENOBUFS;
    d924:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d928:	e7d8      	b.n	d8dc <start_le_scan_legacy+0x3c>
    d92a:	bf00      	nop
    d92c:	20000274 	.word	0x20000274

0000d930 <bt_le_scan_update>:
{
    d930:	b508      	push	{r3, lr}
    d932:	f3bf 8f5b 	dmb	ish
    d936:	4b0c      	ldr	r3, [pc, #48]	; (d968 <bt_le_scan_update+0x38>)
    d938:	681b      	ldr	r3, [r3, #0]
    d93a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    d93e:	f013 0f80 	tst.w	r3, #128	; 0x80
    d942:	d001      	beq.n	d948 <bt_le_scan_update+0x18>
		return 0;
    d944:	2000      	movs	r0, #0
}
    d946:	bd08      	pop	{r3, pc}
    d948:	f3bf 8f5b 	dmb	ish
    d94c:	4b06      	ldr	r3, [pc, #24]	; (d968 <bt_le_scan_update+0x38>)
    d94e:	681b      	ldr	r3, [r3, #0]
    d950:	f3bf 8f5b 	dmb	ish
    d954:	f3c3 1080 	ubfx	r0, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    d958:	f013 0f40 	tst.w	r3, #64	; 0x40
    d95c:	d0f3      	beq.n	d946 <bt_le_scan_update+0x16>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d95e:	2000      	movs	r0, #0
    d960:	f005 fbda 	bl	13118 <bt_le_scan_set_enable>
		if (err) {
    d964:	e7ef      	b.n	d946 <bt_le_scan_update+0x16>
    d966:	bf00      	nop
    d968:	20000274 	.word	0x20000274

0000d96c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    d96c:	b538      	push	{r3, r4, r5, lr}
    d96e:	f3bf 8f5b 	dmb	ish
    d972:	4b3c      	ldr	r3, [pc, #240]	; (da64 <bt_le_scan_start+0xf8>)
    d974:	681b      	ldr	r3, [r3, #0]
    d976:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d97a:	f013 0f04 	tst.w	r3, #4
    d97e:	d065      	beq.n	da4c <bt_le_scan_start+0xe0>
    d980:	4604      	mov	r4, r0
    d982:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
    d984:	f005 fb81 	bl	1308a <valid_le_scan_param>
    d988:	2800      	cmp	r0, #0
    d98a:	d062      	beq.n	da52 <bt_le_scan_start+0xe6>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
    d98c:	7823      	ldrb	r3, [r4, #0]
    d98e:	b11b      	cbz	r3, d998 <bt_le_scan_start+0x2c>
    d990:	f005 fb68 	bl	13064 <bt_id_scan_random_addr_check>
    d994:	2800      	cmp	r0, #0
    d996:	d05f      	beq.n	da58 <bt_le_scan_start+0xec>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d998:	4b32      	ldr	r3, [pc, #200]	; (da64 <bt_le_scan_start+0xf8>)
    d99a:	f3bf 8f5b 	dmb	ish
    d99e:	e853 2f00 	ldrex	r2, [r3]
    d9a2:	f042 0180 	orr.w	r1, r2, #128	; 0x80
    d9a6:	e843 1000 	strex	r0, r1, [r3]
    d9aa:	2800      	cmp	r0, #0
    d9ac:	d1f7      	bne.n	d99e <bt_le_scan_start+0x32>
    d9ae:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    d9b2:	f012 0f80 	tst.w	r2, #128	; 0x80
    d9b6:	d152      	bne.n	da5e <bt_le_scan_start+0xf2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9b8:	f3bf 8f5b 	dmb	ish
    d9bc:	681b      	ldr	r3, [r3, #0]
    d9be:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    d9c2:	f013 0f40 	tst.w	r3, #64	; 0x40
    d9c6:	d003      	beq.n	d9d0 <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d9c8:	2000      	movs	r0, #0
    d9ca:	f005 fba5 	bl	13118 <bt_le_scan_set_enable>
		if (err) {
    d9ce:	b988      	cbnz	r0, d9f4 <bt_le_scan_start+0x88>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
    d9d0:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    d9d2:	f002 0201 	and.w	r2, r2, #1
    d9d6:	2109      	movs	r1, #9
    d9d8:	4822      	ldr	r0, [pc, #136]	; (da64 <bt_le_scan_start+0xf8>)
    d9da:	f005 fb78 	bl	130ce <atomic_set_bit_to>
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
    d9de:	89a3      	ldrh	r3, [r4, #12]
    d9e0:	b9b3      	cbnz	r3, da10 <bt_le_scan_start+0xa4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
    d9e2:	8962      	ldrh	r2, [r4, #10]
    d9e4:	8921      	ldrh	r1, [r4, #8]
    d9e6:	7820      	ldrb	r0, [r4, #0]
    d9e8:	f7ff ff5a 	bl	d8a0 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
    d9ec:	bb00      	cbnz	r0, da30 <bt_le_scan_start+0xc4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
    d9ee:	4b1e      	ldr	r3, [pc, #120]	; (da68 <bt_le_scan_start+0xfc>)
    d9f0:	601d      	str	r5, [r3, #0]

	return 0;
}
    d9f2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d9f4:	4b1b      	ldr	r3, [pc, #108]	; (da64 <bt_le_scan_start+0xf8>)
    d9f6:	f3bf 8f5b 	dmb	ish
    d9fa:	e853 1f00 	ldrex	r1, [r3]
    d9fe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    da02:	e843 1200 	strex	r2, r1, [r3]
    da06:	2a00      	cmp	r2, #0
    da08:	d1f7      	bne.n	d9fa <bt_le_scan_start+0x8e>
    da0a:	f3bf 8f5b 	dmb	ish
			return err;
    da0e:	e7f0      	b.n	d9f2 <bt_le_scan_start+0x86>
    da10:	4b14      	ldr	r3, [pc, #80]	; (da64 <bt_le_scan_start+0xf8>)
    da12:	f3bf 8f5b 	dmb	ish
    da16:	e853 1f00 	ldrex	r1, [r3]
    da1a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    da1e:	e843 1200 	strex	r2, r1, [r3]
    da22:	2a00      	cmp	r2, #0
    da24:	d1f7      	bne.n	da16 <bt_le_scan_start+0xaa>
    da26:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
    da2a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    da2e:	e7e0      	b.n	d9f2 <bt_le_scan_start+0x86>
    da30:	4b0c      	ldr	r3, [pc, #48]	; (da64 <bt_le_scan_start+0xf8>)
    da32:	f3bf 8f5b 	dmb	ish
    da36:	e853 1f00 	ldrex	r1, [r3]
    da3a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    da3e:	e843 1200 	strex	r2, r1, [r3]
    da42:	2a00      	cmp	r2, #0
    da44:	d1f7      	bne.n	da36 <bt_le_scan_start+0xca>
    da46:	f3bf 8f5b 	dmb	ish
		return err;
    da4a:	e7d2      	b.n	d9f2 <bt_le_scan_start+0x86>
		return -EAGAIN;
    da4c:	f06f 000a 	mvn.w	r0, #10
    da50:	e7cf      	b.n	d9f2 <bt_le_scan_start+0x86>
		return -EINVAL;
    da52:	f06f 0015 	mvn.w	r0, #21
    da56:	e7cc      	b.n	d9f2 <bt_le_scan_start+0x86>
		return -EINVAL;
    da58:	f06f 0015 	mvn.w	r0, #21
    da5c:	e7c9      	b.n	d9f2 <bt_le_scan_start+0x86>
		return -EALREADY;
    da5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    da62:	e7c6      	b.n	d9f2 <bt_le_scan_start+0x86>
    da64:	20000274 	.word	0x20000274
    da68:	20001af0 	.word	0x20001af0

0000da6c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
    da6c:	4b03      	ldr	r3, [pc, #12]	; (da7c <pool_id+0x10>)
    da6e:	1ac0      	subs	r0, r0, r3
    da70:	1080      	asrs	r0, r0, #2
}
    da72:	4b03      	ldr	r3, [pc, #12]	; (da80 <pool_id+0x14>)
    da74:	fb03 f000 	mul.w	r0, r3, r0
    da78:	4770      	bx	lr
    da7a:	bf00      	nop
    da7c:	2000048c 	.word	0x2000048c
    da80:	ba2e8ba3 	.word	0xba2e8ba3

0000da84 <net_buf_pool_get>:
}
    da84:	222c      	movs	r2, #44	; 0x2c
    da86:	4b02      	ldr	r3, [pc, #8]	; (da90 <net_buf_pool_get+0xc>)
    da88:	fb02 3000 	mla	r0, r2, r0, r3
    da8c:	4770      	bx	lr
    da8e:	bf00      	nop
    da90:	2000048c 	.word	0x2000048c

0000da94 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
    da94:	2813      	cmp	r0, #19
    da96:	d810      	bhi.n	daba <adc_gain_invert+0x26>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
    da98:	4b0c      	ldr	r3, [pc, #48]	; (dacc <adc_gain_invert+0x38>)
    da9a:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
    da9e:	b17b      	cbz	r3, dac0 <adc_gain_invert+0x2c>
    daa0:	4a0a      	ldr	r2, [pc, #40]	; (dacc <adc_gain_invert+0x38>)
    daa2:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    daa6:	7852      	ldrb	r2, [r2, #1]
    daa8:	b16a      	cbz	r2, dac6 <adc_gain_invert+0x32>
			*value = (gdp->mul * *value) / gdp->div;
    daaa:	6808      	ldr	r0, [r1, #0]
    daac:	fb00 f303 	mul.w	r3, r0, r3
    dab0:	fb93 f3f2 	sdiv	r3, r3, r2
    dab4:	600b      	str	r3, [r1, #0]
			rv = 0;
    dab6:	2000      	movs	r0, #0
    dab8:	4770      	bx	lr
	int rv = -EINVAL;
    daba:	f06f 0015 	mvn.w	r0, #21
    dabe:	4770      	bx	lr
    dac0:	f06f 0015 	mvn.w	r0, #21
    dac4:	4770      	bx	lr
    dac6:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
    daca:	4770      	bx	lr
    dacc:	00016348 	.word	0x00016348

0000dad0 <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    dad0:	b570      	push	{r4, r5, r6, lr}
    dad2:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
    dad4:	2300      	movs	r3, #0
    dad6:	9300      	str	r3, [sp, #0]
    dad8:	f8cd 3003 	str.w	r3, [sp, #3]
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    dadc:	790d      	ldrb	r5, [r1, #4]
    dade:	f005 051f 	and.w	r5, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    dae2:	2d07      	cmp	r5, #7
    dae4:	f200 8086 	bhi.w	dbf4 <adc_nrfx_channel_setup+0x124>
    dae8:	460c      	mov	r4, r1
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    daea:	780b      	ldrb	r3, [r1, #0]
    daec:	2b0b      	cmp	r3, #11
    daee:	f200 8084 	bhi.w	dbfa <adc_nrfx_channel_setup+0x12a>
    daf2:	e8df f003 	tbb	[pc, r3]
    daf6:	0609      	.short	0x0609
    daf8:	19821511 	.word	0x19821511
    dafc:	211d8282 	.word	0x211d8282
    db00:	2582      	.short	0x2582
	case ADC_GAIN_1_6:
		config.gain = NRF_SAADC_GAIN1_6;
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
    db02:	2301      	movs	r3, #1
    db04:	f88d 3002 	strb.w	r3, [sp, #2]
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    db08:	7863      	ldrb	r3, [r4, #1]
    db0a:	2b03      	cmp	r3, #3
    db0c:	d01c      	beq.n	db48 <adc_nrfx_channel_setup+0x78>
    db0e:	2b04      	cmp	r3, #4
    db10:	d01d      	beq.n	db4e <adc_nrfx_channel_setup+0x7e>
    db12:	f06f 0015 	mvn.w	r0, #21
    db16:	e05b      	b.n	dbd0 <adc_nrfx_channel_setup+0x100>
		config.gain = NRF_SAADC_GAIN1_4;
    db18:	2302      	movs	r3, #2
    db1a:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    db1e:	e7f3      	b.n	db08 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_3;
    db20:	2303      	movs	r3, #3
    db22:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    db26:	e7ef      	b.n	db08 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_2;
    db28:	2304      	movs	r3, #4
    db2a:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    db2e:	e7eb      	b.n	db08 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1;
    db30:	2305      	movs	r3, #5
    db32:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    db36:	e7e7      	b.n	db08 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN2;
    db38:	2306      	movs	r3, #6
    db3a:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    db3e:	e7e3      	b.n	db08 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN4;
    db40:	2307      	movs	r3, #7
    db42:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    db46:	e7df      	b.n	db08 <adc_nrfx_channel_setup+0x38>
	case ADC_REF_INTERNAL:
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    db48:	2301      	movs	r3, #1
    db4a:	f88d 3003 	strb.w	r3, [sp, #3]
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
    db4e:	8863      	ldrh	r3, [r4, #2]
    db50:	2b00      	cmp	r3, #0
    db52:	d03f      	beq.n	dbd4 <adc_nrfx_channel_setup+0x104>
    db54:	f244 0228 	movw	r2, #16424	; 0x4028
    db58:	4293      	cmp	r3, r2
    db5a:	d851      	bhi.n	dc00 <adc_nrfx_channel_setup+0x130>
    db5c:	f244 0203 	movw	r2, #16387	; 0x4003
    db60:	4293      	cmp	r3, r2
    db62:	d350      	bcc.n	dc06 <adc_nrfx_channel_setup+0x136>
    db64:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    db68:	3b03      	subs	r3, #3
    db6a:	2b25      	cmp	r3, #37	; 0x25
    db6c:	d84e      	bhi.n	dc0c <adc_nrfx_channel_setup+0x13c>
    db6e:	e8df f003 	tbb	[pc, r3]
    db72:	4d16      	.short	0x4d16
    db74:	4d4d4d13 	.word	0x4d4d4d13
    db78:	4d4d314d 	.word	0x4d4d314d
    db7c:	4d354d4d 	.word	0x4d354d4d
    db80:	394d4d4d 	.word	0x394d4d4d
    db84:	4d4d4d4d 	.word	0x4d4d4d4d
    db88:	4d4d4d4d 	.word	0x4d4d4d4d
    db8c:	4d4d4d4d 	.word	0x4d4d4d4d
    db90:	4d4d4d4d 	.word	0x4d4d4d4d
    db94:	3d4d4d4d 	.word	0x3d4d4d4d
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3):
		config.acq_time = NRF_SAADC_ACQTIME_3US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 5):
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    db98:	2301      	movs	r3, #1
    db9a:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
		return -EINVAL;
	}

	config.mode = (channel_cfg->differential ?
    db9e:	7923      	ldrb	r3, [r4, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    dba0:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    dba4:	f88d 3005 	strb.w	r3, [sp, #5]
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */

	nrf_saadc_channel_init(NRF_SAADC, channel_id, &config);
    dba8:	4e1a      	ldr	r6, [pc, #104]	; (dc14 <adc_nrfx_channel_setup+0x144>)
    dbaa:	466a      	mov	r2, sp
    dbac:	4629      	mov	r1, r5
    dbae:	4630      	mov	r0, r6
    dbb0:	f005 fc71 	bl	13496 <nrf_saadc_channel_init>
	nrf_saadc_channel_input_set(NRF_SAADC,
				    channel_id,
				    NRF_SAADC_INPUT_DISABLED,
				    channel_cfg->input_negative);
    dbb4:	79a1      	ldrb	r1, [r4, #6]
NRF_STATIC_INLINE void nrf_saadc_channel_input_set(NRF_SAADC_Type *  p_reg,
                                                   uint8_t           channel,
                                                   nrf_saadc_input_t pselp,
                                                   nrf_saadc_input_t pseln)
{
    p_reg->CH[channel].PSELN = pseln;
    dbb6:	f105 0351 	add.w	r3, r5, #81	; 0x51
    dbba:	011a      	lsls	r2, r3, #4
    dbbc:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    dbc0:	6059      	str	r1, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    dbc2:	2000      	movs	r0, #0
    dbc4:	50b0      	str	r0, [r6, r2]

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    dbc6:	7962      	ldrb	r2, [r4, #5]
    dbc8:	4b13      	ldr	r3, [pc, #76]	; (dc18 <adc_nrfx_channel_setup+0x148>)
    dbca:	442b      	add	r3, r5
    dbcc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
    dbd0:	b002      	add	sp, #8
    dbd2:	bd70      	pop	{r4, r5, r6, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    dbd4:	2302      	movs	r3, #2
    dbd6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    dbda:	e7e0      	b.n	db9e <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    dbdc:	2303      	movs	r3, #3
    dbde:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    dbe2:	e7dc      	b.n	db9e <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    dbe4:	2304      	movs	r3, #4
    dbe6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    dbea:	e7d8      	b.n	db9e <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    dbec:	2305      	movs	r3, #5
    dbee:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    dbf2:	e7d4      	b.n	db9e <adc_nrfx_channel_setup+0xce>
		return -EINVAL;
    dbf4:	f06f 0015 	mvn.w	r0, #21
    dbf8:	e7ea      	b.n	dbd0 <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->gain) {
    dbfa:	f06f 0015 	mvn.w	r0, #21
    dbfe:	e7e7      	b.n	dbd0 <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->acquisition_time) {
    dc00:	f06f 0015 	mvn.w	r0, #21
    dc04:	e7e4      	b.n	dbd0 <adc_nrfx_channel_setup+0x100>
    dc06:	f06f 0015 	mvn.w	r0, #21
    dc0a:	e7e1      	b.n	dbd0 <adc_nrfx_channel_setup+0x100>
    dc0c:	f06f 0015 	mvn.w	r0, #21
    dc10:	e7de      	b.n	dbd0 <adc_nrfx_channel_setup+0x100>
    dc12:	bf00      	nop
    dc14:	40007000 	.word	0x40007000
    dc18:	200002c8 	.word	0x200002c8

0000dc1c <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    dc1c:	4b07      	ldr	r3, [pc, #28]	; (dc3c <adc_context_start_sampling+0x20>)
    dc1e:	2201      	movs	r2, #1
    dc20:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    dc24:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    dc28:	b113      	cbz	r3, dc30 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc2a:	4b04      	ldr	r3, [pc, #16]	; (dc3c <adc_context_start_sampling+0x20>)
    dc2c:	60da      	str	r2, [r3, #12]
}
    dc2e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc30:	4b02      	ldr	r3, [pc, #8]	; (dc3c <adc_context_start_sampling+0x20>)
    dc32:	2201      	movs	r2, #1
    dc34:	601a      	str	r2, [r3, #0]
    dc36:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    dc38:	4770      	bx	lr
    dc3a:	bf00      	nop
    dc3c:	40007000 	.word	0x40007000

0000dc40 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    dc40:	b949      	cbnz	r1, dc56 <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    dc42:	4b05      	ldr	r3, [pc, #20]	; (dc58 <adc_context_update_buffer_pointer+0x18>)
    dc44:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    dc48:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    dc4c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    dc4e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    dc52:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    dc56:	4770      	bx	lr
    dc58:	40007000 	.word	0x40007000

0000dc5c <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    dc5c:	7c03      	ldrb	r3, [r0, #16]
    dc5e:	3b08      	subs	r3, #8
    dc60:	2b06      	cmp	r3, #6
    dc62:	d811      	bhi.n	dc88 <set_resolution+0x2c>
    dc64:	e8df f003 	tbb	[pc, r3]
    dc68:	100e1004 	.word	0x100e1004
    dc6c:	1006      	.short	0x1006
    dc6e:	0c          	.byte	0x0c
    dc6f:	00          	.byte	0x00
    dc70:	2200      	movs	r2, #0
    dc72:	e000      	b.n	dc76 <set_resolution+0x1a>
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    dc74:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    dc76:	4b06      	ldr	r3, [pc, #24]	; (dc90 <set_resolution+0x34>)
    dc78:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    dc7c:	2000      	movs	r0, #0
    dc7e:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    dc80:	2203      	movs	r2, #3
		break;
    dc82:	e7f8      	b.n	dc76 <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    dc84:	2201      	movs	r2, #1
    dc86:	e7f6      	b.n	dc76 <set_resolution+0x1a>
	switch (sequence->resolution) {
    dc88:	f06f 0015 	mvn.w	r0, #21
}
    dc8c:	4770      	bx	lr
    dc8e:	bf00      	nop
    dc90:	40007000 	.word	0x40007000

0000dc94 <set_oversampling>:
static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    dc94:	2901      	cmp	r1, #1
    dc96:	d901      	bls.n	dc9c <set_oversampling+0x8>
    dc98:	7c43      	ldrb	r3, [r0, #17]
    dc9a:	b973      	cbnz	r3, dcba <set_oversampling+0x26>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    dc9c:	7c43      	ldrb	r3, [r0, #17]
    dc9e:	2b08      	cmp	r3, #8
    dca0:	d80e      	bhi.n	dcc0 <set_oversampling+0x2c>
    dca2:	e8df f003 	tbb	[pc, r3]
    dca6:	0505      	.short	0x0505
    dca8:	05050505 	.word	0x05050505
    dcac:	0505      	.short	0x0505
    dcae:	05          	.byte	0x05
    dcaf:	00          	.byte	0x00
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    dcb0:	4a05      	ldr	r2, [pc, #20]	; (dcc8 <set_oversampling+0x34>)
    dcb2:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
			    sequence->oversampling);
		return -EINVAL;
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    dcb6:	2000      	movs	r0, #0
    dcb8:	4770      	bx	lr
		return -EINVAL;
    dcba:	f06f 0015 	mvn.w	r0, #21
    dcbe:	4770      	bx	lr
	switch (sequence->oversampling) {
    dcc0:	f06f 0015 	mvn.w	r0, #21
}
    dcc4:	4770      	bx	lr
    dcc6:	bf00      	nop
    dcc8:	40007000 	.word	0x40007000

0000dccc <adc_context_enable_timer>:
	}
}

#ifdef ADC_CONTEXT_USES_KERNEL_TIMER
static inline void adc_context_enable_timer(struct adc_context *ctx)
{
    dccc:	b510      	push	{r4, lr}
    dcce:	b082      	sub	sp, #8
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    dcd0:	f100 0408 	add.w	r4, r0, #8
    dcd4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    dcd8:	0c41      	lsrs	r1, r0, #17
    dcda:	03c0      	lsls	r0, r0, #15
    dcdc:	4b08      	ldr	r3, [pc, #32]	; (dd00 <adc_context_enable_timer+0x34>)
    dcde:	18c0      	adds	r0, r0, r3
    dce0:	4a08      	ldr	r2, [pc, #32]	; (dd04 <adc_context_enable_timer+0x38>)
    dce2:	f04f 0300 	mov.w	r3, #0
    dce6:	f141 0100 	adc.w	r1, r1, #0
    dcea:	f7f2 fded 	bl	8c8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    dcee:	9000      	str	r0, [sp, #0]
    dcf0:	9101      	str	r1, [sp, #4]
    dcf2:	2200      	movs	r2, #0
    dcf4:	2300      	movs	r3, #0
    dcf6:	4620      	mov	r0, r4
    dcf8:	f003 fe4a 	bl	11990 <z_impl_k_timer_start>
}
    dcfc:	b002      	add	sp, #8
    dcfe:	bd10      	pop	{r4, pc}
    dd00:	000f423f 	.word	0x000f423f
    dd04:	000f4240 	.word	0x000f4240

0000dd08 <start_read>:
	return 0;
}

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    dd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int error;
	uint32_t selected_channels = sequence->channels;
    dd0a:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    dd0c:	1e73      	subs	r3, r6, #1
    dd0e:	2bfe      	cmp	r3, #254	; 0xfe
    dd10:	d855      	bhi.n	ddbe <start_read+0xb6>
    dd12:	460d      	mov	r5, r1
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    dd14:	2300      	movs	r3, #0
	active_channels = 0U;
    dd16:	461c      	mov	r4, r3
    dd18:	e009      	b.n	dd2e <start_read+0x26>
    p_reg->CH[channel].PSELP = pselp;
    dd1a:	f103 0251 	add.w	r2, r3, #81	; 0x51
    dd1e:	0112      	lsls	r2, r2, #4
    dd20:	492a      	ldr	r1, [pc, #168]	; (ddcc <start_read+0xc4>)
    dd22:	2000      	movs	r0, #0
    dd24:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    dd26:	3301      	adds	r3, #1
    dd28:	b2db      	uxtb	r3, r3
    dd2a:	2b07      	cmp	r3, #7
    dd2c:	d822      	bhi.n	dd74 <start_read+0x6c>
		if (selected_channels & BIT(channel_id)) {
    dd2e:	461a      	mov	r2, r3
    dd30:	fa26 f103 	lsr.w	r1, r6, r3
    dd34:	f011 0f01 	tst.w	r1, #1
    dd38:	d0ef      	beq.n	dd1a <start_read+0x12>
			if (m_data.positive_inputs[channel_id] == 0U) {
    dd3a:	4925      	ldr	r1, [pc, #148]	; (ddd0 <start_read+0xc8>)
    dd3c:	4419      	add	r1, r3
    dd3e:	f891 70a0 	ldrb.w	r7, [r1, #160]	; 0xa0
    dd42:	2f00      	cmp	r7, #0
    dd44:	d03e      	beq.n	ddc4 <start_read+0xbc>
				(sequence->oversampling != 0U ?
    dd46:	7c69      	ldrb	r1, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    dd48:	3900      	subs	r1, #0
    dd4a:	bf18      	it	ne
    dd4c:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    dd4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; ddcc <start_read+0xc4>
    dd52:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    dd56:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    dd5a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    dd5e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    dd62:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    dd66:	3251      	adds	r2, #81	; 0x51
    dd68:	0112      	lsls	r2, r2, #4
    dd6a:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    dd6e:	3401      	adds	r4, #1
    dd70:	b2e4      	uxtb	r4, r4
    dd72:	e7d8      	b.n	dd26 <start_read+0x1e>

	error = set_resolution(sequence);
    dd74:	4628      	mov	r0, r5
    dd76:	f7ff ff71 	bl	dc5c <set_resolution>
	if (error) {
    dd7a:	4603      	mov	r3, r0
    dd7c:	b108      	cbz	r0, dd82 <start_read+0x7a>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    dd7e:	4618      	mov	r0, r3
    dd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    dd82:	4621      	mov	r1, r4
    dd84:	4628      	mov	r0, r5
    dd86:	f7ff ff85 	bl	dc94 <set_oversampling>
	if (error) {
    dd8a:	4603      	mov	r3, r0
    dd8c:	2800      	cmp	r0, #0
    dd8e:	d1f6      	bne.n	dd7e <start_read+0x76>
	error = check_buffer_size(sequence, active_channels);
    dd90:	4621      	mov	r1, r4
    dd92:	4628      	mov	r0, r5
    dd94:	f005 fbb4 	bl	13500 <check_buffer_size>
	if (error) {
    dd98:	4603      	mov	r3, r0
    dd9a:	2800      	cmp	r0, #0
    dd9c:	d1ef      	bne.n	dd7e <start_read+0x76>
			      (nrf_saadc_value_t *)sequence->buffer,
    dd9e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    dda0:	4b0a      	ldr	r3, [pc, #40]	; (ddcc <start_read+0xc4>)
    dda2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    dda6:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
	adc_context_start_read(&m_data.ctx, sequence);
    ddaa:	4c09      	ldr	r4, [pc, #36]	; (ddd0 <start_read+0xc8>)
    ddac:	4629      	mov	r1, r5
    ddae:	4620      	mov	r0, r4
    ddb0:	f005 fbe1 	bl	13576 <adc_context_start_read>
	error = adc_context_wait_for_completion(&m_data.ctx);
    ddb4:	4620      	mov	r0, r4
    ddb6:	f005 fbd3 	bl	13560 <adc_context_wait_for_completion>
    ddba:	4603      	mov	r3, r0
	return error;
    ddbc:	e7df      	b.n	dd7e <start_read+0x76>
		return -EINVAL;
    ddbe:	f06f 0315 	mvn.w	r3, #21
    ddc2:	e7dc      	b.n	dd7e <start_read+0x76>
				return -EINVAL;
    ddc4:	f06f 0315 	mvn.w	r3, #21
    ddc8:	e7d9      	b.n	dd7e <start_read+0x76>
    ddca:	bf00      	nop
    ddcc:	40007000 	.word	0x40007000
    ddd0:	200002c8 	.word	0x200002c8

0000ddd4 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    ddd4:	b570      	push	{r4, r5, r6, lr}
    ddd6:	4604      	mov	r4, r0
    ddd8:	460d      	mov	r5, r1
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
    ddda:	4e08      	ldr	r6, [pc, #32]	; (ddfc <adc_nrfx_read+0x28>)
    dddc:	2200      	movs	r2, #0
    ddde:	4611      	mov	r1, r2
    dde0:	4630      	mov	r0, r6
    dde2:	f005 fbb4 	bl	1354e <adc_context_lock>
	error = start_read(dev, sequence);
    dde6:	4629      	mov	r1, r5
    dde8:	4620      	mov	r0, r4
    ddea:	f7ff ff8d 	bl	dd08 <start_read>
    ddee:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    ddf0:	f106 0040 	add.w	r0, r6, #64	; 0x40
    ddf4:	f002 feb8 	bl	10b68 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    ddf8:	4620      	mov	r0, r4
    ddfa:	bd70      	pop	{r4, r5, r6, pc}
    ddfc:	200002c8 	.word	0x200002c8

0000de00 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    de00:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de02:	4b0d      	ldr	r3, [pc, #52]	; (de38 <init_saadc+0x38>)
    de04:	2400      	movs	r4, #0
    de06:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    de0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    de0e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    de12:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    de16:	2212      	movs	r2, #18
    de18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    de1c:	2007      	movs	r0, #7
    de1e:	f004 fe9d 	bl	12b5c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    de22:	4622      	mov	r2, r4
    de24:	2101      	movs	r1, #1
    de26:	2007      	movs	r0, #7
    de28:	f004 fea2 	bl	12b70 <z_arm_irq_priority_set>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);
    de2c:	4803      	ldr	r0, [pc, #12]	; (de3c <init_saadc+0x3c>)
    de2e:	f005 fbd1 	bl	135d4 <adc_context_unlock_unconditionally>

	return 0;
}
    de32:	4620      	mov	r0, r4
    de34:	bd10      	pop	{r4, pc}
    de36:	bf00      	nop
    de38:	40007000 	.word	0x40007000
    de3c:	200002c8 	.word	0x200002c8

0000de40 <saadc_irq_handler>:
{
    de40:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    de42:	4b11      	ldr	r3, [pc, #68]	; (de88 <saadc_irq_handler+0x48>)
    de44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    de48:	b973      	cbnz	r3, de68 <saadc_irq_handler+0x28>
    de4a:	4b0f      	ldr	r3, [pc, #60]	; (de88 <saadc_irq_handler+0x48>)
    de4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    de50:	b14b      	cbz	r3, de66 <saadc_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de52:	4b0d      	ldr	r3, [pc, #52]	; (de88 <saadc_irq_handler+0x48>)
    de54:	2200      	movs	r2, #0
    de56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    de5a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    de5e:	2201      	movs	r2, #1
    de60:	609a      	str	r2, [r3, #8]
    de62:	601a      	str	r2, [r3, #0]
    de64:	605a      	str	r2, [r3, #4]
}
    de66:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de68:	4b07      	ldr	r3, [pc, #28]	; (de88 <saadc_irq_handler+0x48>)
    de6a:	2200      	movs	r2, #0
    de6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    de70:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    de74:	2101      	movs	r1, #1
    de76:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    de78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		adc_context_on_sampling_done(&m_data.ctx, dev);
    de7c:	4601      	mov	r1, r0
    de7e:	4803      	ldr	r0, [pc, #12]	; (de8c <saadc_irq_handler+0x4c>)
    de80:	f005 fbb0 	bl	135e4 <adc_context_on_sampling_done>
    de84:	e7ef      	b.n	de66 <saadc_irq_handler+0x26>
    de86:	bf00      	nop
    de88:	40007000 	.word	0x40007000
    de8c:	200002c8 	.word	0x200002c8

0000de90 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    de90:	4800      	ldr	r0, [pc, #0]	; (de94 <get_hf_flags+0x4>)
    de92:	4770      	bx	lr
    de94:	20001b48 	.word	0x20001b48

0000de98 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    de98:	4b03      	ldr	r3, [pc, #12]	; (dea8 <get_subsys+0x10>)
    de9a:	1ac0      	subs	r0, r0, r3
    de9c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    de9e:	4b03      	ldr	r3, [pc, #12]	; (deac <get_subsys+0x14>)
    dea0:	fb03 f000 	mul.w	r0, r3, r0
    dea4:	4770      	bx	lr
    dea6:	bf00      	nop
    dea8:	20001b08 	.word	0x20001b08
    deac:	b6db6db7 	.word	0xb6db6db7

0000deb0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    deb0:	b538      	push	{r3, r4, r5, lr}
    deb2:	4605      	mov	r5, r0
    deb4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    deb6:	f7ff ffef 	bl	de98 <get_subsys>
    deba:	4601      	mov	r1, r0
    debc:	2240      	movs	r2, #64	; 0x40
    debe:	4803      	ldr	r0, [pc, #12]	; (decc <onoff_stop+0x1c>)
    dec0:	f005 fc76 	bl	137b0 <stop>
    dec4:	4601      	mov	r1, r0
	notify(mgr, res);
    dec6:	4628      	mov	r0, r5
    dec8:	47a0      	blx	r4
}
    deca:	bd38      	pop	{r3, r4, r5, pc}
    decc:	00015af0 	.word	0x00015af0

0000ded0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    ded0:	b530      	push	{r4, r5, lr}
    ded2:	b083      	sub	sp, #12
    ded4:	4605      	mov	r5, r0
    ded6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ded8:	f7ff ffde 	bl	de98 <get_subsys>
    dedc:	4601      	mov	r1, r0
    dede:	2340      	movs	r3, #64	; 0x40
    dee0:	9300      	str	r3, [sp, #0]
    dee2:	4623      	mov	r3, r4
    dee4:	4a05      	ldr	r2, [pc, #20]	; (defc <onoff_start+0x2c>)
    dee6:	4806      	ldr	r0, [pc, #24]	; (df00 <onoff_start+0x30>)
    dee8:	f005 fc7c 	bl	137e4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    deec:	1e01      	subs	r1, r0, #0
    deee:	db01      	blt.n	def4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    def0:	b003      	add	sp, #12
    def2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    def4:	4628      	mov	r0, r5
    def6:	47a0      	blx	r4
}
    def8:	e7fa      	b.n	def0 <onoff_start+0x20>
    defa:	bf00      	nop
    defc:	0001382d 	.word	0x0001382d
    df00:	00015af0 	.word	0x00015af0

0000df04 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    df04:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    df06:	b110      	cbz	r0, df0e <clock_event_handler+0xa>
    df08:	2801      	cmp	r0, #1
    df0a:	d00d      	beq.n	df28 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    df0c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    df0e:	2100      	movs	r1, #0
    df10:	4808      	ldr	r0, [pc, #32]	; (df34 <clock_event_handler+0x30>)
    df12:	f005 fbd8 	bl	136c6 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    df16:	6883      	ldr	r3, [r0, #8]
    df18:	f013 0f07 	tst.w	r3, #7
    df1c:	d1f6      	bne.n	df0c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    df1e:	2100      	movs	r1, #0
    df20:	4804      	ldr	r0, [pc, #16]	; (df34 <clock_event_handler+0x30>)
    df22:	f005 fc33 	bl	1378c <clkstarted_handle>
    df26:	e7f1      	b.n	df0c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    df28:	2101      	movs	r1, #1
    df2a:	4802      	ldr	r0, [pc, #8]	; (df34 <clock_event_handler+0x30>)
    df2c:	f005 fc2e 	bl	1378c <clkstarted_handle>
}
    df30:	e7ec      	b.n	df0c <clock_event_handler+0x8>
    df32:	bf00      	nop
    df34:	00015af0 	.word	0x00015af0

0000df38 <generic_hfclk_start>:
{
    df38:	b510      	push	{r4, lr}
    df3a:	b082      	sub	sp, #8
	__asm__ volatile(
    df3c:	f04f 0340 	mov.w	r3, #64	; 0x40
    df40:	f3ef 8411 	mrs	r4, BASEPRI
    df44:	f383 8812 	msr	BASEPRI_MAX, r3
    df48:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    df4c:	4a14      	ldr	r2, [pc, #80]	; (dfa0 <generic_hfclk_start+0x68>)
    df4e:	6813      	ldr	r3, [r2, #0]
    df50:	f043 0102 	orr.w	r1, r3, #2
    df54:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    df56:	f013 0f01 	tst.w	r3, #1
    df5a:	d109      	bne.n	df70 <generic_hfclk_start+0x38>
	bool already_started = false;
    df5c:	2300      	movs	r3, #0
	__asm__ volatile(
    df5e:	f384 8811 	msr	BASEPRI, r4
    df62:	f3bf 8f6f 	isb	sy
	if (already_started) {
    df66:	b9b3      	cbnz	r3, df96 <generic_hfclk_start+0x5e>
	hfclk_start();
    df68:	f005 fc68 	bl	1383c <hfclk_start>
}
    df6c:	b002      	add	sp, #8
    df6e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    df70:	f10d 0207 	add.w	r2, sp, #7
    df74:	2101      	movs	r1, #1
    df76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    df7a:	f005 fb81 	bl	13680 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    df7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df82:	2b01      	cmp	r3, #1
    df84:	d001      	beq.n	df8a <generic_hfclk_start+0x52>
	bool already_started = false;
    df86:	2300      	movs	r3, #0
    df88:	e7e9      	b.n	df5e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    df8a:	f7ff ff81 	bl	de90 <get_hf_flags>
    df8e:	f005 fbea 	bl	13766 <set_on_state>
			already_started = true;
    df92:	2301      	movs	r3, #1
    df94:	e7e3      	b.n	df5e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    df96:	2100      	movs	r1, #0
    df98:	4802      	ldr	r0, [pc, #8]	; (dfa4 <generic_hfclk_start+0x6c>)
    df9a:	f005 fbf7 	bl	1378c <clkstarted_handle>
		return;
    df9e:	e7e5      	b.n	df6c <generic_hfclk_start+0x34>
    dfa0:	20001b58 	.word	0x20001b58
    dfa4:	00015af0 	.word	0x00015af0

0000dfa8 <generic_hfclk_stop>:
{
    dfa8:	b510      	push	{r4, lr}
	__asm__ volatile(
    dfaa:	f04f 0340 	mov.w	r3, #64	; 0x40
    dfae:	f3ef 8411 	mrs	r4, BASEPRI
    dfb2:	f383 8812 	msr	BASEPRI_MAX, r3
    dfb6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    dfba:	4a08      	ldr	r2, [pc, #32]	; (dfdc <generic_hfclk_stop+0x34>)
    dfbc:	6813      	ldr	r3, [r2, #0]
    dfbe:	f023 0102 	bic.w	r1, r3, #2
    dfc2:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    dfc4:	f013 0f01 	tst.w	r3, #1
    dfc8:	d004      	beq.n	dfd4 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    dfca:	f384 8811 	msr	BASEPRI, r4
    dfce:	f3bf 8f6f 	isb	sy
}
    dfd2:	bd10      	pop	{r4, pc}
		hfclk_stop();
    dfd4:	f005 fc37 	bl	13846 <hfclk_stop>
    dfd8:	e7f7      	b.n	dfca <generic_hfclk_stop+0x22>
    dfda:	bf00      	nop
    dfdc:	20001b58 	.word	0x20001b58

0000dfe0 <lfclk_spinwait>:
{
    dfe0:	b570      	push	{r4, r5, r6, lr}
    dfe2:	b082      	sub	sp, #8
    dfe4:	4606      	mov	r6, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    dfe6:	f006 ff85 	bl	14ef4 <k_is_in_isr>
    dfea:	b918      	cbnz	r0, dff4 <lfclk_spinwait+0x14>
    dfec:	4604      	mov	r4, r0
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    dfee:	4b1b      	ldr	r3, [pc, #108]	; (e05c <lfclk_spinwait+0x7c>)
    dff0:	781b      	ldrb	r3, [r3, #0]
    dff2:	b97b      	cbnz	r3, e014 <lfclk_spinwait+0x34>
	__asm__ volatile(
    dff4:	f04f 0340 	mov.w	r3, #64	; 0x40
    dff8:	f3ef 8511 	mrs	r5, BASEPRI
    dffc:	f383 8812 	msr	BASEPRI_MAX, r3
    e000:	f3bf 8f6f 	isb	sy
    e004:	2401      	movs	r4, #1
	if (!isr_mode) {
    e006:	b95c      	cbnz	r4, e020 <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    e008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e00c:	2202      	movs	r2, #2
    e00e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e012:	e005      	b.n	e020 <lfclk_spinwait+0x40>
	int key = isr_mode ? irq_lock() : 0;
    e014:	2500      	movs	r5, #0
    e016:	e7f6      	b.n	e006 <lfclk_spinwait+0x26>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    e018:	b1ac      	cbz	r4, e046 <lfclk_spinwait+0x66>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    e01a:	4628      	mov	r0, r5
    e01c:	f7fd ffcc 	bl	bfb8 <arch_cpu_atomic_idle>
    e020:	aa01      	add	r2, sp, #4
    e022:	2100      	movs	r1, #0
    e024:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e028:	f005 fb2a 	bl	13680 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    e02c:	2800      	cmp	r0, #0
    e02e:	d0f3      	beq.n	e018 <lfclk_spinwait+0x38>
		 && ((type == target_type)
    e030:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    e032:	b10b      	cbz	r3, e038 <lfclk_spinwait+0x58>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    e034:	2e01      	cmp	r6, #1
    e036:	d1ef      	bne.n	e018 <lfclk_spinwait+0x38>
	if (isr_mode) {
    e038:	b14c      	cbz	r4, e04e <lfclk_spinwait+0x6e>
	__asm__ volatile(
    e03a:	f385 8811 	msr	BASEPRI, r5
    e03e:	f3bf 8f6f 	isb	sy
}
    e042:	b002      	add	sp, #8
    e044:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    e046:	2001      	movs	r0, #1
    e048:	f005 fc07 	bl	1385a <k_msleep>
    e04c:	e7e8      	b.n	e020 <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
    e04e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e052:	2202      	movs	r2, #2
    e054:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e058:	e7f3      	b.n	e042 <lfclk_spinwait+0x62>
    e05a:	bf00      	nop
    e05c:	200021d2 	.word	0x200021d2

0000e060 <api_blocking_start>:
{
    e060:	b500      	push	{lr}
    e062:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e064:	f8cd d000 	str.w	sp, [sp]
    e068:	f8cd d004 	str.w	sp, [sp, #4]
    e06c:	2300      	movs	r3, #0
    e06e:	9302      	str	r3, [sp, #8]
    e070:	2301      	movs	r3, #1
    e072:	9303      	str	r3, [sp, #12]
    e074:	ab04      	add	r3, sp, #16
    e076:	9304      	str	r3, [sp, #16]
    e078:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    e07a:	466b      	mov	r3, sp
    e07c:	4a06      	ldr	r2, [pc, #24]	; (e098 <api_blocking_start+0x38>)
    e07e:	f005 fbcd 	bl	1381c <api_start>
	if (err < 0) {
    e082:	2800      	cmp	r0, #0
    e084:	db05      	blt.n	e092 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
    e086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e08a:	2300      	movs	r3, #0
    e08c:	4668      	mov	r0, sp
    e08e:	f002 fd93 	bl	10bb8 <z_impl_k_sem_take>
}
    e092:	b007      	add	sp, #28
    e094:	f85d fb04 	ldr.w	pc, [sp], #4
    e098:	00013887 	.word	0x00013887

0000e09c <anomaly_132_workaround>:
{
    e09c:	b508      	push	{r3, lr}
	if (!once) {
    e09e:	4b06      	ldr	r3, [pc, #24]	; (e0b8 <anomaly_132_workaround+0x1c>)
    e0a0:	781b      	ldrb	r3, [r3, #0]
    e0a2:	b103      	cbz	r3, e0a6 <anomaly_132_workaround+0xa>
}
    e0a4:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    e0a6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    e0aa:	f007 facc 	bl	15646 <z_impl_k_busy_wait>
		once = true;
    e0ae:	4b02      	ldr	r3, [pc, #8]	; (e0b8 <anomaly_132_workaround+0x1c>)
    e0b0:	2201      	movs	r2, #1
    e0b2:	701a      	strb	r2, [r3, #0]
}
    e0b4:	e7f6      	b.n	e0a4 <anomaly_132_workaround+0x8>
    e0b6:	bf00      	nop
    e0b8:	200021ce 	.word	0x200021ce

0000e0bc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    e0bc:	b570      	push	{r4, r5, r6, lr}
    e0be:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e0c0:	2200      	movs	r2, #0
    e0c2:	2101      	movs	r1, #1
    e0c4:	4610      	mov	r0, r2
    e0c6:	f004 fd53 	bl	12b70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    e0ca:	4811      	ldr	r0, [pc, #68]	; (e110 <clk_init+0x54>)
    e0cc:	f001 fa84 	bl	f5d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e0d0:	4b10      	ldr	r3, [pc, #64]	; (e114 <clk_init+0x58>)
    e0d2:	4298      	cmp	r0, r3
    e0d4:	d119      	bne.n	e10a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e0d6:	f006 fad8 	bl	1468a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    e0da:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    e0dc:	2c01      	cmp	r4, #1
    e0de:	d812      	bhi.n	e106 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    e0e0:	4621      	mov	r1, r4
    e0e2:	4630      	mov	r0, r6
    e0e4:	f005 faef 	bl	136c6 <get_sub_data>
    e0e8:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    e0ea:	4621      	mov	r1, r4
    e0ec:	4630      	mov	r0, r6
    e0ee:	f005 faf5 	bl	136dc <get_onoff_manager>
    e0f2:	4909      	ldr	r1, [pc, #36]	; (e118 <clk_init+0x5c>)
    e0f4:	f004 fa06 	bl	12504 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    e0f8:	2800      	cmp	r0, #0
    e0fa:	db05      	blt.n	e108 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e0fc:	2301      	movs	r3, #1
    e0fe:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    e100:	441c      	add	r4, r3
    e102:	b2e4      	uxtb	r4, r4
    e104:	e7ea      	b.n	e0dc <clk_init+0x20>
	}

	return 0;
    e106:	2000      	movs	r0, #0
}
    e108:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    e10a:	f06f 0004 	mvn.w	r0, #4
    e10e:	e7fb      	b.n	e108 <clk_init+0x4c>
    e110:	0000df05 	.word	0x0000df05
    e114:	0bad0000 	.word	0x0bad0000
    e118:	0001639c 	.word	0x0001639c

0000e11c <z_nrf_clock_control_lf_on>:
{
    e11c:	b510      	push	{r4, lr}
    e11e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e120:	4b10      	ldr	r3, [pc, #64]	; (e164 <z_nrf_clock_control_lf_on+0x48>)
    e122:	2101      	movs	r1, #1
    e124:	f3bf 8f5b 	dmb	ish
    e128:	e853 2f00 	ldrex	r2, [r3]
    e12c:	e843 1000 	strex	r0, r1, [r3]
    e130:	2800      	cmp	r0, #0
    e132:	d1f9      	bne.n	e128 <z_nrf_clock_control_lf_on+0xc>
    e134:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    e138:	b11a      	cbz	r2, e142 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    e13a:	1e63      	subs	r3, r4, #1
    e13c:	2b01      	cmp	r3, #1
    e13e:	d90d      	bls.n	e15c <z_nrf_clock_control_lf_on+0x40>
}
    e140:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    e142:	4809      	ldr	r0, [pc, #36]	; (e168 <z_nrf_clock_control_lf_on+0x4c>)
    e144:	f005 faca 	bl	136dc <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    e148:	4908      	ldr	r1, [pc, #32]	; (e16c <z_nrf_clock_control_lf_on+0x50>)
    e14a:	2300      	movs	r3, #0
    e14c:	604b      	str	r3, [r1, #4]
    e14e:	608b      	str	r3, [r1, #8]
    e150:	60cb      	str	r3, [r1, #12]
    e152:	2301      	movs	r3, #1
    e154:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    e156:	f004 f9f2 	bl	1253e <onoff_request>
    e15a:	e7ee      	b.n	e13a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    e15c:	4620      	mov	r0, r4
    e15e:	f7ff ff3f 	bl	dfe0 <lfclk_spinwait>
		break;
    e162:	e7ed      	b.n	e140 <z_nrf_clock_control_lf_on+0x24>
    e164:	20001b04 	.word	0x20001b04
    e168:	00015af0 	.word	0x00015af0
    e16c:	20001af4 	.word	0x20001af4

0000e170 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    e170:	b510      	push	{r4, lr}
    e172:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    e174:	280a      	cmp	r0, #10
    e176:	d006      	beq.n	e186 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    e178:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    e17a:	4806      	ldr	r0, [pc, #24]	; (e194 <console_out+0x24>)
    e17c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    e17e:	685b      	ldr	r3, [r3, #4]
    e180:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    e182:	4620      	mov	r0, r4
    e184:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    e186:	4803      	ldr	r0, [pc, #12]	; (e194 <console_out+0x24>)
    e188:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    e18a:	685b      	ldr	r3, [r3, #4]
    e18c:	210d      	movs	r1, #13
    e18e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    e190:	e7f2      	b.n	e178 <console_out+0x8>
    e192:	bf00      	nop
    e194:	00015b50 	.word	0x00015b50

0000e198 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    e198:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    e19a:	4c04      	ldr	r4, [pc, #16]	; (e1ac <uart_console_hook_install+0x14>)
    e19c:	4620      	mov	r0, r4
    e19e:	f7fe fb35 	bl	c80c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    e1a2:	4620      	mov	r0, r4
    e1a4:	f7fd f9aa 	bl	b4fc <__printk_hook_install>
#endif
}
    e1a8:	bd10      	pop	{r4, pc}
    e1aa:	bf00      	nop
    e1ac:	0000e171 	.word	0x0000e171

0000e1b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    e1b0:	b508      	push	{r3, lr}
    e1b2:	4805      	ldr	r0, [pc, #20]	; (e1c8 <uart_console_init+0x18>)
    e1b4:	f006 fdde 	bl	14d74 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    e1b8:	b118      	cbz	r0, e1c2 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    e1ba:	f7ff ffed 	bl	e198 <uart_console_hook_install>

	return 0;
    e1be:	2000      	movs	r0, #0
}
    e1c0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    e1c2:	f06f 0012 	mvn.w	r0, #18
    e1c6:	e7fb      	b.n	e1c0 <uart_console_init+0x10>
    e1c8:	00015b50 	.word	0x00015b50

0000e1cc <random_byte_get>:
	__asm__ volatile(
    e1cc:	f04f 0240 	mov.w	r2, #64	; 0x40
    e1d0:	f3ef 8311 	mrs	r3, BASEPRI
    e1d4:	f382 8812 	msr	BASEPRI_MAX, r2
    e1d8:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e1dc:	4a0a      	ldr	r2, [pc, #40]	; (e208 <random_byte_get+0x3c>)
    e1de:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    e1e2:	b16a      	cbz	r2, e200 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    e1e4:	4a08      	ldr	r2, [pc, #32]	; (e208 <random_byte_get+0x3c>)
    e1e6:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
    e1ea:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e1ec:	2100      	movs	r1, #0
    e1ee:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    e1f2:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
    e1f6:	f383 8811 	msr	BASEPRI, r3
    e1fa:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    e1fe:	4770      	bx	lr
	int retval = -EAGAIN;
    e200:	f06f 000a 	mvn.w	r0, #10
    e204:	e7f7      	b.n	e1f6 <random_byte_get+0x2a>
    e206:	bf00      	nop
    e208:	4000d000 	.word	0x4000d000

0000e20c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e20e:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
    e210:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
    e212:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
    e214:	f04f 0340 	mov.w	r3, #64	; 0x40
    e218:	f3ef 8011 	mrs	r0, BASEPRI
    e21c:	f383 8812 	msr	BASEPRI_MAX, r3
    e220:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    e224:	f89e 6000 	ldrb.w	r6, [lr]
    e228:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    e22a:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
    e22e:	1bad      	subs	r5, r5, r6
    e230:	4025      	ands	r5, r4
	if (available < len) {
    e232:	42aa      	cmp	r2, r5
    e234:	d900      	bls.n	e238 <rng_pool_get+0x2c>
		len = available;
    e236:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    e238:	eb06 0c02 	add.w	ip, r6, r2
    e23c:	ea0c 0c04 	and.w	ip, ip, r4
    e240:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
    e244:	f380 8811 	msr	BASEPRI, r0
    e248:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
    e24c:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    e24e:	e007      	b.n	e260 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
    e250:	eb0e 0203 	add.w	r2, lr, r3
    e254:	7952      	ldrb	r2, [r2, #5]
    e256:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
    e25a:	3301      	adds	r3, #1
    e25c:	4023      	ands	r3, r4
	while (likely(len--)) {
    e25e:	4662      	mov	r2, ip
    e260:	f102 3cff 	add.w	ip, r2, #4294967295
    e264:	fa1f fc8c 	uxth.w	ip, ip
    e268:	2a00      	cmp	r2, #0
    e26a:	d1f1      	bne.n	e250 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    e26c:	42be      	cmp	r6, r7
    e26e:	d10f      	bne.n	e290 <rng_pool_get+0x84>
	__asm__ volatile(
    e270:	f04f 0240 	mov.w	r2, #64	; 0x40
    e274:	f3ef 8311 	mrs	r3, BASEPRI
    e278:	f382 8812 	msr	BASEPRI_MAX, r2
    e27c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    e280:	f89e 2000 	ldrb.w	r2, [lr]
    e284:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
    e288:	f383 8811 	msr	BASEPRI, r3
    e28c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    e290:	1a40      	subs	r0, r0, r1
    e292:	b280      	uxth	r0, r0
	available = available - len;
    e294:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
    e296:	f89e 3004 	ldrb.w	r3, [lr, #4]
    e29a:	42ab      	cmp	r3, r5
    e29c:	d302      	bcc.n	e2a4 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e29e:	4b02      	ldr	r3, [pc, #8]	; (e2a8 <rng_pool_get+0x9c>)
    e2a0:	2201      	movs	r2, #1
    e2a2:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    e2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2a6:	bf00      	nop
    e2a8:	4000d000 	.word	0x4000d000

0000e2ac <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
    e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2ae:	460d      	mov	r5, r1
    e2b0:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e2b2:	f013 0f01 	tst.w	r3, #1
    e2b6:	d103      	bne.n	e2c0 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    e2b8:	4826      	ldr	r0, [pc, #152]	; (e354 <entropy_nrf5_get_entropy_isr+0xa8>)
    e2ba:	f7ff ffa7 	bl	e20c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
    e2c0:	b90a      	cbnz	r2, e2c6 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
    e2c2:	4620      	mov	r0, r4
    e2c4:	e7fb      	b.n	e2be <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
    e2c6:	f04f 0340 	mov.w	r3, #64	; 0x40
    e2ca:	f3ef 8611 	mrs	r6, BASEPRI
    e2ce:	f383 8812 	msr	BASEPRI_MAX, r3
    e2d2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    e2d6:	200d      	movs	r0, #13
    e2d8:	f7fd feae 	bl	c038 <arch_irq_is_enabled>
    e2dc:	4607      	mov	r7, r0
		irq_disable(IRQN);
    e2de:	200d      	movs	r0, #13
    e2e0:	f004 fc41 	bl	12b66 <arch_irq_disable>
	__asm__ volatile(
    e2e4:	f386 8811 	msr	BASEPRI, r6
    e2e8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e2ec:	4b1a      	ldr	r3, [pc, #104]	; (e358 <entropy_nrf5_get_entropy_isr+0xac>)
    e2ee:	2200      	movs	r2, #0
    e2f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e2f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e2f8:	2201      	movs	r2, #1
    e2fa:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e2fc:	4b17      	ldr	r3, [pc, #92]	; (e35c <entropy_nrf5_get_entropy_isr+0xb0>)
    e2fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e302:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e306:	4626      	mov	r6, r4
    e308:	e00b      	b.n	e322 <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
    e30a:	f04f 0340 	mov.w	r3, #64	; 0x40
    e30e:	f3ef 8011 	mrs	r0, BASEPRI
    e312:	f383 8812 	msr	BASEPRI_MAX, r3
    e316:	f3bf 8f6f 	isb	sy
    e31a:	f7fd fe4d 	bl	bfb8 <arch_cpu_atomic_idle>
}
    e31e:	e000      	b.n	e322 <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
    e320:	b18e      	cbz	r6, e346 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e322:	4b0d      	ldr	r3, [pc, #52]	; (e358 <entropy_nrf5_get_entropy_isr+0xac>)
    e324:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    e328:	2b00      	cmp	r3, #0
    e32a:	d0ee      	beq.n	e30a <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
    e32c:	f7ff ff4e 	bl	e1cc <random_byte_get>
    e330:	4b0a      	ldr	r3, [pc, #40]	; (e35c <entropy_nrf5_get_entropy_isr+0xb0>)
    e332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e336:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
    e33a:	2800      	cmp	r0, #0
    e33c:	dbf0      	blt.n	e320 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
    e33e:	3e01      	subs	r6, #1
    e340:	b2b6      	uxth	r6, r6
    e342:	55a8      	strb	r0, [r5, r6]
    e344:	e7ec      	b.n	e320 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
    e346:	2f00      	cmp	r7, #0
    e348:	d0bb      	beq.n	e2c2 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
    e34a:	200d      	movs	r0, #13
    e34c:	f004 fc06 	bl	12b5c <arch_irq_enable>
    e350:	e7b7      	b.n	e2c2 <entropy_nrf5_get_entropy_isr+0x16>
    e352:	bf00      	nop
    e354:	20001b8c 	.word	0x20001b8c
    e358:	4000d000 	.word	0x4000d000
    e35c:	e000e100 	.word	0xe000e100

0000e360 <isr>:
{
    e360:	b510      	push	{r4, lr}
	byte = random_byte_get();
    e362:	f7ff ff33 	bl	e1cc <random_byte_get>
	if (byte < 0) {
    e366:	2800      	cmp	r0, #0
    e368:	db06      	blt.n	e378 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    e36a:	b2c4      	uxtb	r4, r0
    e36c:	4621      	mov	r1, r4
    e36e:	480a      	ldr	r0, [pc, #40]	; (e398 <isr+0x38>)
    e370:	f005 fa95 	bl	1389e <rng_pool_put>
	if (ret < 0) {
    e374:	2800      	cmp	r0, #0
    e376:	db00      	blt.n	e37a <isr+0x1a>
}
    e378:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
    e37a:	4621      	mov	r1, r4
    e37c:	4807      	ldr	r0, [pc, #28]	; (e39c <isr+0x3c>)
    e37e:	f005 fa8e 	bl	1389e <rng_pool_put>
		if (ret < 0) {
    e382:	2800      	cmp	r0, #0
    e384:	db03      	blt.n	e38e <isr+0x2e>
	z_impl_k_sem_give(sem);
    e386:	4806      	ldr	r0, [pc, #24]	; (e3a0 <isr+0x40>)
    e388:	f002 fbee 	bl	10b68 <z_impl_k_sem_give>
}
    e38c:	e7f4      	b.n	e378 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e38e:	4b05      	ldr	r3, [pc, #20]	; (e3a4 <isr+0x44>)
    e390:	2201      	movs	r2, #1
    e392:	605a      	str	r2, [r3, #4]
}
    e394:	e7f7      	b.n	e386 <isr+0x26>
    e396:	bf00      	nop
    e398:	20001b8c 	.word	0x20001b8c
    e39c:	20001ba1 	.word	0x20001ba1
    e3a0:	20001b74 	.word	0x20001b74
    e3a4:	4000d000 	.word	0x4000d000

0000e3a8 <entropy_nrf5_get_entropy>:
{
    e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3aa:	460f      	mov	r7, r1
    e3ac:	4614      	mov	r4, r2
	while (len) {
    e3ae:	e007      	b.n	e3c0 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
    e3b0:	f04f 32ff 	mov.w	r2, #4294967295
    e3b4:	f04f 33ff 	mov.w	r3, #4294967295
    e3b8:	f106 0018 	add.w	r0, r6, #24
    e3bc:	f002 fbfc 	bl	10bb8 <z_impl_k_sem_take>
    e3c0:	b1bc      	cbz	r4, e3f2 <entropy_nrf5_get_entropy+0x4a>
    e3c2:	4e0d      	ldr	r6, [pc, #52]	; (e3f8 <entropy_nrf5_get_entropy+0x50>)
    e3c4:	f04f 32ff 	mov.w	r2, #4294967295
    e3c8:	f04f 33ff 	mov.w	r3, #4294967295
    e3cc:	4630      	mov	r0, r6
    e3ce:	f002 fbf3 	bl	10bb8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e3d2:	4622      	mov	r2, r4
    e3d4:	4639      	mov	r1, r7
    e3d6:	f106 0045 	add.w	r0, r6, #69	; 0x45
    e3da:	f7ff ff17 	bl	e20c <rng_pool_get>
    e3de:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
    e3e0:	4630      	mov	r0, r6
    e3e2:	f002 fbc1 	bl	10b68 <z_impl_k_sem_give>
		if (bytes == 0U) {
    e3e6:	2d00      	cmp	r5, #0
    e3e8:	d0e2      	beq.n	e3b0 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
    e3ea:	1b64      	subs	r4, r4, r5
    e3ec:	b2a4      	uxth	r4, r4
		buf += bytes;
    e3ee:	442f      	add	r7, r5
    e3f0:	e7e6      	b.n	e3c0 <entropy_nrf5_get_entropy+0x18>
}
    e3f2:	2000      	movs	r0, #0
    e3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3f6:	bf00      	nop
    e3f8:	20001b5c 	.word	0x20001b5c

0000e3fc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    e3fc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e3fe:	4c18      	ldr	r4, [pc, #96]	; (e460 <entropy_nrf5_init+0x64>)
    e400:	2201      	movs	r2, #1
    e402:	4611      	mov	r1, r2
    e404:	4620      	mov	r0, r4
    e406:	f006 fe7e 	bl	15106 <z_impl_k_sem_init>
    e40a:	2201      	movs	r2, #1
    e40c:	2100      	movs	r1, #0
    e40e:	f104 0018 	add.w	r0, r4, #24
    e412:	f006 fe78 	bl	15106 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
    e416:	2204      	movs	r2, #4
    e418:	2108      	movs	r1, #8
    e41a:	f104 0045 	add.w	r0, r4, #69	; 0x45
    e41e:	f005 fa51 	bl	138c4 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
    e422:	220c      	movs	r2, #12
    e424:	2110      	movs	r1, #16
    e426:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e42a:	f005 fa4b 	bl	138c4 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    e42e:	4b0d      	ldr	r3, [pc, #52]	; (e464 <entropy_nrf5_init+0x68>)
    e430:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    e434:	f022 0201 	bic.w	r2, r2, #1
    e438:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e43c:	2400      	movs	r4, #0
    e43e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    e442:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e446:	2101      	movs	r1, #1
    e448:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e44c:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    e44e:	4622      	mov	r2, r4
    e450:	200d      	movs	r0, #13
    e452:	f004 fb8d 	bl	12b70 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    e456:	200d      	movs	r0, #13
    e458:	f004 fb80 	bl	12b5c <arch_irq_enable>

	return 0;
}
    e45c:	4620      	mov	r0, r4
    e45e:	bd10      	pop	{r4, pc}
    e460:	20001b5c 	.word	0x20001b5c
    e464:	4000d000 	.word	0x4000d000

0000e468 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    e468:	b908      	cbnz	r0, e46e <get_dev+0x6>
    e46a:	4802      	ldr	r0, [pc, #8]	; (e474 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    e46c:	4770      	bx	lr
	const struct device *dev = NULL;
    e46e:	2000      	movs	r0, #0
    e470:	4770      	bx	lr
    e472:	bf00      	nop
    e474:	00015b08 	.word	0x00015b08

0000e478 <gpio_nrfx_pin_interrupt_configure>:
{
    e478:	b5f0      	push	{r4, r5, r6, r7, lr}
    e47a:	b085      	sub	sp, #20
    e47c:	460e      	mov	r6, r1
    e47e:	4619      	mov	r1, r3
	return port->config;
    e480:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    e482:	7b1b      	ldrb	r3, [r3, #12]
    e484:	f006 051f 	and.w	r5, r6, #31
    e488:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    e48c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    e490:	d022      	beq.n	e4d8 <gpio_nrfx_pin_interrupt_configure+0x60>
    e492:	4607      	mov	r7, r0
    e494:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    e496:	2300      	movs	r3, #0
    e498:	9301      	str	r3, [sp, #4]
    e49a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    e49c:	4610      	mov	r0, r2
    e49e:	f005 fb06 	bl	13aae <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    e4a2:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    e4a6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    e4a8:	6899      	ldr	r1, [r3, #8]
    e4aa:	40f1      	lsrs	r1, r6
    e4ac:	f011 0f01 	tst.w	r1, #1
    e4b0:	d102      	bne.n	e4b8 <gpio_nrfx_pin_interrupt_configure+0x40>
    e4b2:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    e4b6:	d014      	beq.n	e4e2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e4b8:	2300      	movs	r3, #0
    e4ba:	aa01      	add	r2, sp, #4
    e4bc:	4619      	mov	r1, r3
    e4be:	4628      	mov	r0, r5
    e4c0:	f001 fb82 	bl	fbc8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    e4c4:	4b19      	ldr	r3, [pc, #100]	; (e52c <gpio_nrfx_pin_interrupt_configure+0xb4>)
    e4c6:	4298      	cmp	r0, r3
    e4c8:	d12c      	bne.n	e524 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    e4ca:	2101      	movs	r1, #1
    e4cc:	4628      	mov	r0, r5
    e4ce:	f001 fcdb 	bl	fe88 <nrfx_gpiote_trigger_enable>
	return 0;
    e4d2:	2000      	movs	r0, #0
}
    e4d4:	b005      	add	sp, #20
    e4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    e4d8:	4628      	mov	r0, r5
    e4da:	f001 fd11 	bl	ff00 <nrfx_gpiote_trigger_disable>
		return 0;
    e4de:	2000      	movs	r0, #0
    e4e0:	e7f8      	b.n	e4d4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    e4e2:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e4e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e4ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    e4f2:	f013 0f01 	tst.w	r3, #1
    e4f6:	d1df      	bne.n	e4b8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e4f8:	f10d 010f 	add.w	r1, sp, #15
    e4fc:	4628      	mov	r0, r5
    e4fe:	f001 fc67 	bl	fdd0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    e502:	4b0b      	ldr	r3, [pc, #44]	; (e530 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    e504:	4298      	cmp	r0, r3
    e506:	d003      	beq.n	e510 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    e508:	f10d 030f 	add.w	r3, sp, #15
    e50c:	9302      	str	r3, [sp, #8]
    e50e:	e7d3      	b.n	e4b8 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    e510:	f10d 000f 	add.w	r0, sp, #15
    e514:	f001 fcb0 	bl	fe78 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    e518:	4b04      	ldr	r3, [pc, #16]	; (e52c <gpio_nrfx_pin_interrupt_configure+0xb4>)
    e51a:	4298      	cmp	r0, r3
    e51c:	d0f4      	beq.n	e508 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    e51e:	f06f 000b 	mvn.w	r0, #11
    e522:	e7d7      	b.n	e4d4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    e524:	f06f 0015 	mvn.w	r0, #21
    e528:	e7d4      	b.n	e4d4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    e52a:	bf00      	nop
    e52c:	0bad0000 	.word	0x0bad0000
    e530:	0bad0004 	.word	0x0bad0004

0000e534 <gpio_nrfx_pin_configure>:
{
    e534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e538:	b086      	sub	sp, #24
    e53a:	460e      	mov	r6, r1
    e53c:	4614      	mov	r4, r2
	return port->config;
    e53e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e542:	f898 300c 	ldrb.w	r3, [r8, #12]
    e546:	f001 051f 	and.w	r5, r1, #31
    e54a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e54e:	f10d 0117 	add.w	r1, sp, #23
    e552:	4628      	mov	r0, r5
    e554:	f001 fc3c 	bl	fdd0 <nrfx_gpiote_channel_get>
    e558:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    e55a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    e55e:	d03a      	beq.n	e5d6 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    e560:	2100      	movs	r1, #0
    e562:	9103      	str	r1, [sp, #12]
    e564:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e566:	460b      	mov	r3, r1
    e568:	aa03      	add	r2, sp, #12
    e56a:	4628      	mov	r0, r5
    e56c:	f001 fb2c 	bl	fbc8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    e570:	4b33      	ldr	r3, [pc, #204]	; (e640 <gpio_nrfx_pin_configure+0x10c>)
    e572:	4298      	cmp	r0, r3
    e574:	d161      	bne.n	e63a <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    e576:	429f      	cmp	r7, r3
    e578:	d03d      	beq.n	e5f6 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    e57a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    e57e:	d049      	beq.n	e614 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    e580:	f10d 0103 	add.w	r1, sp, #3
    e584:	4620      	mov	r0, r4
    e586:	f005 fa17 	bl	139b8 <get_drive>
		if (rv != 0) {
    e58a:	4607      	mov	r7, r0
    e58c:	bb50      	cbnz	r0, e5e4 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    e58e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e592:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    e596:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    e59a:	bf0c      	ite	eq
    e59c:	2301      	moveq	r3, #1
    e59e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    e5a0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    e5a4:	4620      	mov	r0, r4
    e5a6:	f005 fa4a 	bl	13a3e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    e5aa:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    e5ae:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    e5b2:	d025      	beq.n	e600 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    e5b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    e5b8:	2301      	movs	r3, #1
    e5ba:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    e5bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    e5c0:	2200      	movs	r2, #0
    e5c2:	a901      	add	r1, sp, #4
    e5c4:	4628      	mov	r0, r5
    e5c6:	f001 fb93 	bl	fcf0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    e5ca:	4b1d      	ldr	r3, [pc, #116]	; (e640 <gpio_nrfx_pin_configure+0x10c>)
    e5cc:	4298      	cmp	r0, r3
    e5ce:	d009      	beq.n	e5e4 <gpio_nrfx_pin_configure+0xb0>
    e5d0:	f06f 0715 	mvn.w	r7, #21
    e5d4:	e006      	b.n	e5e4 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    e5d6:	4628      	mov	r0, r5
    e5d8:	f001 fcbc 	bl	ff54 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    e5dc:	4b18      	ldr	r3, [pc, #96]	; (e640 <gpio_nrfx_pin_configure+0x10c>)
    e5de:	429f      	cmp	r7, r3
    e5e0:	d004      	beq.n	e5ec <gpio_nrfx_pin_configure+0xb8>
		return 0;
    e5e2:	2700      	movs	r7, #0
}
    e5e4:	4638      	mov	r0, r7
    e5e6:	b006      	add	sp, #24
    e5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    e5ec:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e5f0:	f001 fc3a 	bl	fe68 <nrfx_gpiote_channel_free>
    e5f4:	e7f5      	b.n	e5e2 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    e5f6:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e5fa:	f001 fc35 	bl	fe68 <nrfx_gpiote_channel_free>
    e5fe:	e7bc      	b.n	e57a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    e600:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    e604:	d0dc      	beq.n	e5c0 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    e606:	f8d8 2004 	ldr.w	r2, [r8, #4]
    e60a:	2301      	movs	r3, #1
    e60c:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    e60e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    e612:	e7d5      	b.n	e5c0 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    e614:	4620      	mov	r0, r4
    e616:	f005 fa12 	bl	13a3e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    e61a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    e61e:	2300      	movs	r3, #0
    e620:	461a      	mov	r2, r3
    e622:	a902      	add	r1, sp, #8
    e624:	4628      	mov	r0, r5
    e626:	f001 facf 	bl	fbc8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    e62a:	4b05      	ldr	r3, [pc, #20]	; (e640 <gpio_nrfx_pin_configure+0x10c>)
    e62c:	4298      	cmp	r0, r3
    e62e:	d101      	bne.n	e634 <gpio_nrfx_pin_configure+0x100>
    e630:	2700      	movs	r7, #0
    e632:	e7d7      	b.n	e5e4 <gpio_nrfx_pin_configure+0xb0>
    e634:	f06f 0715 	mvn.w	r7, #21
    e638:	e7d4      	b.n	e5e4 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    e63a:	f06f 0715 	mvn.w	r7, #21
    e63e:	e7d1      	b.n	e5e4 <gpio_nrfx_pin_configure+0xb0>
    e640:	0bad0000 	.word	0x0bad0000

0000e644 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    e644:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    e646:	f001 fc05 	bl	fe54 <nrfx_gpiote_is_init>
    e64a:	b108      	cbz	r0, e650 <gpio_nrfx_init+0xc>
		return 0;
    e64c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    e64e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    e650:	f001 fbd6 	bl	fe00 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    e654:	4b08      	ldr	r3, [pc, #32]	; (e678 <gpio_nrfx_init+0x34>)
    e656:	4298      	cmp	r0, r3
    e658:	d10a      	bne.n	e670 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    e65a:	2100      	movs	r1, #0
    e65c:	4807      	ldr	r0, [pc, #28]	; (e67c <gpio_nrfx_init+0x38>)
    e65e:	f001 fbb1 	bl	fdc4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e662:	2200      	movs	r2, #0
    e664:	2105      	movs	r1, #5
    e666:	2006      	movs	r0, #6
    e668:	f004 fa82 	bl	12b70 <z_arm_irq_priority_set>
	return 0;
    e66c:	2000      	movs	r0, #0
    e66e:	e7ee      	b.n	e64e <gpio_nrfx_init+0xa>
		return -EIO;
    e670:	f06f 0004 	mvn.w	r0, #4
    e674:	e7eb      	b.n	e64e <gpio_nrfx_init+0xa>
    e676:	bf00      	nop
    e678:	0bad0000 	.word	0x0bad0000
    e67c:	00013ae7 	.word	0x00013ae7

0000e680 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    e680:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    e682:	6843      	ldr	r3, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    e684:	681b      	ldr	r3, [r3, #0]
NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
#else
    return p_reg->PSELSCL;
    e686:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
#else
    return p_reg->PSELSDA;
    e68a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    e68e:	f001 fe93 	bl	103b8 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    e692:	4b04      	ldr	r3, [pc, #16]	; (e6a4 <i2c_nrfx_twi_recover_bus+0x24>)
    e694:	4298      	cmp	r0, r3
    e696:	d101      	bne.n	e69c <i2c_nrfx_twi_recover_bus+0x1c>
    e698:	2000      	movs	r0, #0
}
    e69a:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    e69c:	f06f 000f 	mvn.w	r0, #15
    e6a0:	e7fb      	b.n	e69a <i2c_nrfx_twi_recover_bus+0x1a>
    e6a2:	bf00      	nop
    e6a4:	0bad0000 	.word	0x0bad0000

0000e6a8 <i2c_nrfx_twi_transfer>:
{
    e6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6ac:	b089      	sub	sp, #36	; 0x24
    e6ae:	4682      	mov	sl, r0
    e6b0:	460d      	mov	r5, r1
    e6b2:	4616      	mov	r6, r2
    e6b4:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    e6b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    e6ba:	6907      	ldr	r7, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    e6bc:	f04f 32ff 	mov.w	r2, #4294967295
    e6c0:	f04f 33ff 	mov.w	r3, #4294967295
    e6c4:	4638      	mov	r0, r7
    e6c6:	f002 fa77 	bl	10bb8 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    e6ca:	f107 0b18 	add.w	fp, r7, #24
    e6ce:	2200      	movs	r2, #0
    e6d0:	2300      	movs	r3, #0
    e6d2:	4658      	mov	r0, fp
    e6d4:	f002 fa70 	bl	10bb8 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    e6d8:	4640      	mov	r0, r8
    e6da:	f001 fe25 	bl	10328 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    e6de:	2400      	movs	r4, #0
	int ret = 0;
    e6e0:	9401      	str	r4, [sp, #4]
	for (size_t i = 0; i < num_msgs; i++) {
    e6e2:	e018      	b.n	e716 <i2c_nrfx_twi_transfer+0x6e>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    e6e4:	f012 0f01 	tst.w	r2, #1
    e6e8:	d166      	bne.n	e7b8 <i2c_nrfx_twi_transfer+0x110>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    e6ea:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    e6ec:	a903      	add	r1, sp, #12
    e6ee:	4640      	mov	r0, r8
    e6f0:	f001 fe48 	bl	10384 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    e6f4:	4b34      	ldr	r3, [pc, #208]	; (e7c8 <i2c_nrfx_twi_transfer+0x120>)
    e6f6:	4298      	cmp	r0, r3
    e6f8:	d13c      	bne.n	e774 <i2c_nrfx_twi_transfer+0xcc>
    e6fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e6fe:	2300      	movs	r3, #0
    e700:	4658      	mov	r0, fp
    e702:	f002 fa59 	bl	10bb8 <z_impl_k_sem_take>
		if (ret != 0) {
    e706:	9001      	str	r0, [sp, #4]
    e708:	2800      	cmp	r0, #0
    e70a:	d13e      	bne.n	e78a <i2c_nrfx_twi_transfer+0xe2>
		res = data->res;
    e70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    e70e:	4b2e      	ldr	r3, [pc, #184]	; (e7c8 <i2c_nrfx_twi_transfer+0x120>)
    e710:	429a      	cmp	r2, r3
    e712:	d155      	bne.n	e7c0 <i2c_nrfx_twi_transfer+0x118>
	for (size_t i = 0; i < num_msgs; i++) {
    e714:	3401      	adds	r4, #1
    e716:	42b4      	cmp	r4, r6
    e718:	d244      	bcs.n	e7a4 <i2c_nrfx_twi_transfer+0xfc>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    e71a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    e71e:	0099      	lsls	r1, r3, #2
    e720:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e724:	7a1a      	ldrb	r2, [r3, #8]
    e726:	f012 0f08 	tst.w	r2, #8
    e72a:	d138      	bne.n	e79e <i2c_nrfx_twi_transfer+0xf6>
		nrfx_twi_xfer_desc_t cur_xfer = {
    e72c:	2200      	movs	r2, #0
    e72e:	9203      	str	r2, [sp, #12]
    e730:	9204      	str	r2, [sp, #16]
    e732:	9205      	str	r2, [sp, #20]
    e734:	9206      	str	r2, [sp, #24]
    e736:	9207      	str	r2, [sp, #28]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
    e738:	7a1a      	ldrb	r2, [r3, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    e73a:	f002 0001 	and.w	r0, r2, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    e73e:	f88d 000c 	strb.w	r0, [sp, #12]
    e742:	f88d 900d 	strb.w	r9, [sp, #13]
			.primary_length = msgs[i].len,
    e746:	685b      	ldr	r3, [r3, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    e748:	9304      	str	r3, [sp, #16]
			.p_primary_buf  = msgs[i].buf,
    e74a:	586b      	ldr	r3, [r5, r1]
		nrfx_twi_xfer_desc_t cur_xfer = {
    e74c:	9306      	str	r3, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    e74e:	f012 0f02 	tst.w	r2, #2
    e752:	d10d      	bne.n	e770 <i2c_nrfx_twi_transfer+0xc8>
			if ((i < (num_msgs - 1)) &&
    e754:	1e73      	subs	r3, r6, #1
    e756:	42a3      	cmp	r3, r4
    e758:	d9c4      	bls.n	e6e4 <i2c_nrfx_twi_transfer+0x3c>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
    e75a:	1c63      	adds	r3, r4, #1
    e75c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e760:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e764:	7a1b      	ldrb	r3, [r3, #8]
			if ((i < (num_msgs - 1)) &&
    e766:	f013 0f04 	tst.w	r3, #4
    e76a:	d1bb      	bne.n	e6e4 <i2c_nrfx_twi_transfer+0x3c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    e76c:	2240      	movs	r2, #64	; 0x40
    e76e:	e7bd      	b.n	e6ec <i2c_nrfx_twi_transfer+0x44>
		uint32_t xfer_flags = 0;
    e770:	2200      	movs	r2, #0
    e772:	e7bb      	b.n	e6ec <i2c_nrfx_twi_transfer+0x44>
			if (res == NRFX_ERROR_BUSY) {
    e774:	330b      	adds	r3, #11
    e776:	4298      	cmp	r0, r3
    e778:	d003      	beq.n	e782 <i2c_nrfx_twi_transfer+0xda>
				ret = -EIO;
    e77a:	f06f 0304 	mvn.w	r3, #4
    e77e:	9301      	str	r3, [sp, #4]
    e780:	e010      	b.n	e7a4 <i2c_nrfx_twi_transfer+0xfc>
				ret = -EBUSY;
    e782:	f06f 030f 	mvn.w	r3, #15
    e786:	9301      	str	r3, [sp, #4]
    e788:	e00c      	b.n	e7a4 <i2c_nrfx_twi_transfer+0xfc>
			nrfx_twi_disable(&config->twi);
    e78a:	4640      	mov	r0, r8
    e78c:	f001 fddc 	bl	10348 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    e790:	4650      	mov	r0, sl
    e792:	f7ff ff75 	bl	e680 <i2c_nrfx_twi_recover_bus>
			ret = -EIO;
    e796:	f06f 0304 	mvn.w	r3, #4
    e79a:	9301      	str	r3, [sp, #4]
			break;
    e79c:	e002      	b.n	e7a4 <i2c_nrfx_twi_transfer+0xfc>
			ret = -ENOTSUP;
    e79e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e7a2:	9301      	str	r3, [sp, #4]
	nrfx_twi_disable(&config->twi);
    e7a4:	4640      	mov	r0, r8
    e7a6:	f001 fdcf 	bl	10348 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    e7aa:	4638      	mov	r0, r7
    e7ac:	f002 f9dc 	bl	10b68 <z_impl_k_sem_give>
}
    e7b0:	9801      	ldr	r0, [sp, #4]
    e7b2:	b009      	add	sp, #36	; 0x24
    e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOTSUP;
    e7b8:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e7bc:	9301      	str	r3, [sp, #4]
    e7be:	e7f1      	b.n	e7a4 <i2c_nrfx_twi_transfer+0xfc>
			ret = -EIO;
    e7c0:	f06f 0304 	mvn.w	r3, #4
    e7c4:	9301      	str	r3, [sp, #4]
    e7c6:	e7ed      	b.n	e7a4 <i2c_nrfx_twi_transfer+0xfc>
    e7c8:	0bad0000 	.word	0x0bad0000

0000e7cc <event_handler>:
{
    e7cc:	b508      	push	{r3, lr}
	switch (p_event->type) {
    e7ce:	7803      	ldrb	r3, [r0, #0]
    e7d0:	2b01      	cmp	r3, #1
    e7d2:	d00c      	beq.n	e7ee <event_handler+0x22>
    e7d4:	2b02      	cmp	r3, #2
    e7d6:	d00d      	beq.n	e7f4 <event_handler+0x28>
    e7d8:	b113      	cbz	r3, e7e0 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    e7da:	4b08      	ldr	r3, [pc, #32]	; (e7fc <event_handler+0x30>)
    e7dc:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    e7de:	e001      	b.n	e7e4 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    e7e0:	4b07      	ldr	r3, [pc, #28]	; (e800 <event_handler+0x34>)
    e7e2:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
    e7e4:	f101 0018 	add.w	r0, r1, #24
    e7e8:	f002 f9be 	bl	10b68 <z_impl_k_sem_give>
}
    e7ec:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    e7ee:	4b05      	ldr	r3, [pc, #20]	; (e804 <event_handler+0x38>)
    e7f0:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    e7f2:	e7f7      	b.n	e7e4 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    e7f4:	4b04      	ldr	r3, [pc, #16]	; (e808 <event_handler+0x3c>)
    e7f6:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    e7f8:	e7f4      	b.n	e7e4 <event_handler+0x18>
    e7fa:	bf00      	nop
    e7fc:	0bad0001 	.word	0x0bad0001
    e800:	0bad0000 	.word	0x0bad0000
    e804:	0bae0001 	.word	0x0bae0001
    e808:	0bae0002 	.word	0x0bae0002

0000e80c <init_twi>:
	.transfer    = i2c_nrfx_twi_transfer,
	.recover_bus = i2c_nrfx_twi_recover_bus,
};

static int init_twi(const struct device *dev)
{
    e80c:	b508      	push	{r3, lr}
    e80e:	4603      	mov	r3, r0
	const struct i2c_nrfx_twi_config *config = dev->config;
    e810:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = dev->data;
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    e812:	691b      	ldr	r3, [r3, #16]
    e814:	4a06      	ldr	r2, [pc, #24]	; (e830 <init_twi+0x24>)
    e816:	f100 0108 	add.w	r1, r0, #8
    e81a:	f001 fd2d 	bl	10278 <nrfx_twi_init>
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    e81e:	4b05      	ldr	r3, [pc, #20]	; (e834 <init_twi+0x28>)
    e820:	4298      	cmp	r0, r3
    e822:	d101      	bne.n	e828 <init_twi+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
    e824:	2000      	movs	r0, #0
}
    e826:	bd08      	pop	{r3, pc}
		return -EBUSY;
    e828:	f06f 000f 	mvn.w	r0, #15
    e82c:	e7fb      	b.n	e826 <init_twi+0x1a>
    e82e:	bf00      	nop
    e830:	0000e7cd 	.word	0x0000e7cd
    e834:	0bad0000 	.word	0x0bad0000

0000e838 <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e838:	f04f 0c00 	mov.w	ip, #0
    e83c:	458c      	cmp	ip, r1
    e83e:	f080 8100 	bcs.w	ea42 <pinctrl_configure_pins+0x20a>
{
    e842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e846:	e037      	b.n	e8b8 <pinctrl_configure_pins+0x80>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    e848:	f04f 33ff 	mov.w	r3, #4294967295
    e84c:	e03e      	b.n	e8cc <pinctrl_configure_pins+0x94>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    e84e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e852:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e856:	4674      	mov	r4, lr
			write = 1U;
    e858:	4675      	mov	r5, lr
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    e85a:	2b7f      	cmp	r3, #127	; 0x7f
    e85c:	d025      	beq.n	e8aa <pinctrl_configure_pins+0x72>
			if (write != NO_WRITE) {
    e85e:	f1b5 3fff 	cmp.w	r5, #4294967295
    e862:	d00b      	beq.n	e87c <pinctrl_configure_pins+0x44>
    if (value == 0)
    e864:	2d00      	cmp	r5, #0
    e866:	f040 80dc 	bne.w	ea22 <pinctrl_configure_pins+0x1ea>
    *p_pin = pin_number & 0x1F;
    e86a:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e86e:	2501      	movs	r5, #1
    e870:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTCLR = clr_mask;
    e874:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    e878:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    e87c:	59c5      	ldr	r5, [r0, r7]
    e87e:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    e882:	d002      	beq.n	e88a <pinctrl_configure_pins+0x52>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e884:	f04f 0e01 	mov.w	lr, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    e888:	2400      	movs	r4, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    e88a:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
    e88e:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    e892:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    e896:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e89a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    e89e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e8a2:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    e8a6:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e8aa:	f10c 0c01 	add.w	ip, ip, #1
    e8ae:	fa5f fc8c 	uxtb.w	ip, ip
    e8b2:	458c      	cmp	ip, r1
    e8b4:	f080 80bf 	bcs.w	ea36 <pinctrl_configure_pins+0x1fe>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    e8b8:	ea4f 078c 	mov.w	r7, ip, lsl #2
    e8bc:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    e8c0:	f3c4 2643 	ubfx	r6, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    e8c4:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    e8c8:	2b7f      	cmp	r3, #127	; 0x7f
    e8ca:	d0bd      	beq.n	e848 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    e8cc:	0c24      	lsrs	r4, r4, #16
    e8ce:	2c19      	cmp	r4, #25
    e8d0:	f200 80b3 	bhi.w	ea3a <pinctrl_configure_pins+0x202>
    e8d4:	a501      	add	r5, pc, #4	; (adr r5, e8dc <pinctrl_configure_pins+0xa4>)
    e8d6:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
    e8da:	bf00      	nop
    e8dc:	0000e84f 	.word	0x0000e84f
    e8e0:	0000e945 	.word	0x0000e945
    e8e4:	0000e955 	.word	0x0000e955
    e8e8:	0000e963 	.word	0x0000e963
    e8ec:	0000e973 	.word	0x0000e973
    e8f0:	0000e981 	.word	0x0000e981
    e8f4:	0000e98f 	.word	0x0000e98f
    e8f8:	0000ea3b 	.word	0x0000ea3b
    e8fc:	0000ea3b 	.word	0x0000ea3b
    e900:	0000ea3b 	.word	0x0000ea3b
    e904:	0000ea3b 	.word	0x0000ea3b
    e908:	0000e99f 	.word	0x0000e99f
    e90c:	0000e9b1 	.word	0x0000e9b1
    e910:	0000ea3b 	.word	0x0000ea3b
    e914:	0000ea3b 	.word	0x0000ea3b
    e918:	0000ea3b 	.word	0x0000ea3b
    e91c:	0000ea3b 	.word	0x0000ea3b
    e920:	0000ea3b 	.word	0x0000ea3b
    e924:	0000ea3b 	.word	0x0000ea3b
    e928:	0000ea3b 	.word	0x0000ea3b
    e92c:	0000ea3b 	.word	0x0000ea3b
    e930:	0000ea3b 	.word	0x0000ea3b
    e934:	0000e9c3 	.word	0x0000e9c3
    e938:	0000e9d5 	.word	0x0000e9d5
    e93c:	0000e9e7 	.word	0x0000e9e7
    e940:	0000e9f9 	.word	0x0000e9f9
			NRF_PSEL_UART(reg, RXD) = pin;
    e944:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e948:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e94c:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e94e:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    e952:	e782      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
    e954:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e958:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e95c:	4674      	mov	r4, lr
			write = 1U;
    e95e:	4675      	mov	r5, lr
			break;
    e960:	e77b      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
    e962:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e966:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e96a:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e96c:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    e970:	e773      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    e972:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e976:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e97a:	2401      	movs	r4, #1
			write = 0U;
    e97c:	4675      	mov	r5, lr
			break;
    e97e:	e76c      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    e980:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e984:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e988:	4674      	mov	r4, lr
			write = 0U;
    e98a:	2500      	movs	r5, #0
			break;
    e98c:	e765      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    e98e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e992:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e996:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e998:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    e99c:	e75d      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    e99e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    e9a2:	b396      	cbz	r6, ea0a <pinctrl_configure_pins+0x1d2>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e9a4:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e9a8:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e9aa:	f04f 35ff 	mov.w	r5, #4294967295
    e9ae:	e754      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    e9b0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    e9b4:	b37e      	cbz	r6, ea16 <pinctrl_configure_pins+0x1de>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e9b6:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e9ba:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e9bc:	f04f 35ff 	mov.w	r5, #4294967295
    e9c0:	e74b      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    e9c2:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    e9c6:	59c5      	ldr	r5, [r0, r7]
    e9c8:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e9cc:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e9d0:	4674      	mov	r4, lr
			break;
    e9d2:	e742      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    e9d4:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    e9d8:	59c5      	ldr	r5, [r0, r7]
    e9da:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e9de:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e9e2:	4674      	mov	r4, lr
			break;
    e9e4:	e739      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    e9e6:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    e9ea:	59c5      	ldr	r5, [r0, r7]
    e9ec:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e9f0:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e9f4:	4674      	mov	r4, lr
			break;
    e9f6:	e730      	b.n	e85a <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    e9f8:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    e9fc:	59c5      	ldr	r5, [r0, r7]
    e9fe:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ea02:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ea06:	4674      	mov	r4, lr
			break;
    ea08:	e727      	b.n	e85a <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    ea0a:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    ea0c:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
    ea0e:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
    ea12:	2606      	movs	r6, #6
    ea14:	e721      	b.n	e85a <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    ea16:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    ea18:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
    ea1a:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
    ea1e:	2606      	movs	r6, #6
    ea20:	e71b      	b.n	e85a <pinctrl_configure_pins+0x22>
    *p_pin = pin_number & 0x1F;
    ea22:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    ea26:	2501      	movs	r5, #1
    ea28:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTSET = set_mask;
    ea2c:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    ea30:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
}
    ea34:	e722      	b.n	e87c <pinctrl_configure_pins+0x44>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    ea36:	2000      	movs	r0, #0
    ea38:	e001      	b.n	ea3e <pinctrl_configure_pins+0x206>
		switch (NRF_GET_FUN(pins[i])) {
    ea3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ea3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
    ea42:	2000      	movs	r0, #0
}
    ea44:	4770      	bx	lr
    ea46:	bf00      	nop

0000ea48 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    ea48:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    ea4a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    ea4c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    ea50:	d06f      	beq.n	eb32 <baudrate_set+0xea>
    ea52:	d83a      	bhi.n	eaca <baudrate_set+0x82>
    ea54:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    ea58:	d06e      	beq.n	eb38 <baudrate_set+0xf0>
    ea5a:	d90a      	bls.n	ea72 <baudrate_set+0x2a>
    ea5c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    ea60:	d075      	beq.n	eb4e <baudrate_set+0x106>
    ea62:	d924      	bls.n	eaae <baudrate_set+0x66>
    ea64:	f647 2312 	movw	r3, #31250	; 0x7a12
    ea68:	4299      	cmp	r1, r3
    ea6a:	d12b      	bne.n	eac4 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ea6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ea70:	e013      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    ea72:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    ea76:	d061      	beq.n	eb3c <baudrate_set+0xf4>
    ea78:	d907      	bls.n	ea8a <baudrate_set+0x42>
    ea7a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    ea7e:	d063      	beq.n	eb48 <baudrate_set+0x100>
    ea80:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    ea84:	d110      	bne.n	eaa8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    ea86:	4b3c      	ldr	r3, [pc, #240]	; (eb78 <baudrate_set+0x130>)
    ea88:	e007      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    ea8a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    ea8e:	d058      	beq.n	eb42 <baudrate_set+0xfa>
    ea90:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    ea94:	d105      	bne.n	eaa2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    ea96:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    ea9a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    ea9e:	2000      	movs	r0, #0
    eaa0:	4770      	bx	lr
	switch (baudrate) {
    eaa2:	f06f 0015 	mvn.w	r0, #21
    eaa6:	4770      	bx	lr
    eaa8:	f06f 0015 	mvn.w	r0, #21
    eaac:	4770      	bx	lr
    eaae:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    eab2:	d04e      	beq.n	eb52 <baudrate_set+0x10a>
    eab4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    eab8:	d101      	bne.n	eabe <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    eaba:	4b30      	ldr	r3, [pc, #192]	; (eb7c <baudrate_set+0x134>)
    eabc:	e7ed      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eabe:	f06f 0015 	mvn.w	r0, #21
    eac2:	4770      	bx	lr
    eac4:	f06f 0015 	mvn.w	r0, #21
    eac8:	4770      	bx	lr
    eaca:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    eace:	d042      	beq.n	eb56 <baudrate_set+0x10e>
    ead0:	d909      	bls.n	eae6 <baudrate_set+0x9e>
    ead2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    ead6:	d046      	beq.n	eb66 <baudrate_set+0x11e>
    ead8:	d91f      	bls.n	eb1a <baudrate_set+0xd2>
    eada:	4b29      	ldr	r3, [pc, #164]	; (eb80 <baudrate_set+0x138>)
    eadc:	4299      	cmp	r1, r3
    eade:	d148      	bne.n	eb72 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    eae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eae4:	e7d9      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eae6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    eaea:	d037      	beq.n	eb5c <baudrate_set+0x114>
    eaec:	d905      	bls.n	eafa <baudrate_set+0xb2>
    eaee:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    eaf2:	d10f      	bne.n	eb14 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    eaf4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    eaf8:	e7cf      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eafa:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    eafe:	4299      	cmp	r1, r3
    eb00:	d02e      	beq.n	eb60 <baudrate_set+0x118>
    eb02:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    eb06:	d102      	bne.n	eb0e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    eb08:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    eb0c:	e7c5      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eb0e:	f06f 0015 	mvn.w	r0, #21
    eb12:	4770      	bx	lr
    eb14:	f06f 0015 	mvn.w	r0, #21
    eb18:	4770      	bx	lr
    eb1a:	4b1a      	ldr	r3, [pc, #104]	; (eb84 <baudrate_set+0x13c>)
    eb1c:	4299      	cmp	r1, r3
    eb1e:	d025      	beq.n	eb6c <baudrate_set+0x124>
    eb20:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    eb24:	d102      	bne.n	eb2c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    eb26:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    eb2a:	e7b6      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eb2c:	f06f 0015 	mvn.w	r0, #21
    eb30:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    eb32:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    eb36:	e7b0      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    eb38:	4b13      	ldr	r3, [pc, #76]	; (eb88 <baudrate_set+0x140>)
    eb3a:	e7ae      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    eb3c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    eb40:	e7ab      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eb42:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    eb46:	e7a8      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    eb48:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    eb4c:	e7a5      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    eb4e:	4b0f      	ldr	r3, [pc, #60]	; (eb8c <baudrate_set+0x144>)
    eb50:	e7a3      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    eb52:	4b0f      	ldr	r3, [pc, #60]	; (eb90 <baudrate_set+0x148>)
    eb54:	e7a1      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    eb56:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    eb5a:	e79e      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    eb5c:	4b0d      	ldr	r3, [pc, #52]	; (eb94 <baudrate_set+0x14c>)
    eb5e:	e79c      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    eb60:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    eb64:	e799      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    eb66:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    eb6a:	e796      	b.n	ea9a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    eb6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    eb70:	e793      	b.n	ea9a <baudrate_set+0x52>
	switch (baudrate) {
    eb72:	f06f 0015 	mvn.w	r0, #21
}
    eb76:	4770      	bx	lr
    eb78:	0013b000 	.word	0x0013b000
    eb7c:	004ea000 	.word	0x004ea000
    eb80:	000f4240 	.word	0x000f4240
    eb84:	0003d090 	.word	0x0003d090
    eb88:	00275000 	.word	0x00275000
    eb8c:	0075c000 	.word	0x0075c000
    eb90:	003af000 	.word	0x003af000
    eb94:	013a9000 	.word	0x013a9000

0000eb98 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb9a:	4605      	mov	r5, r0
    eb9c:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    eb9e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    eba0:	f006 f9a8 	bl	14ef4 <k_is_in_isr>
    eba4:	b910      	cbnz	r0, ebac <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    eba6:	4b12      	ldr	r3, [pc, #72]	; (ebf0 <uarte_nrfx_poll_out+0x58>)
    eba8:	781b      	ldrb	r3, [r3, #0]
    ebaa:	b983      	cbnz	r3, ebce <uarte_nrfx_poll_out+0x36>
    ebac:	f04f 0340 	mov.w	r3, #64	; 0x40
    ebb0:	f3ef 8411 	mrs	r4, BASEPRI
    ebb4:	f383 8812 	msr	BASEPRI_MAX, r3
    ebb8:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    ebbc:	4628      	mov	r0, r5
    ebbe:	f005 f896 	bl	13cee <is_tx_ready>
    ebc2:	b940      	cbnz	r0, ebd6 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    ebc4:	f384 8811 	msr	BASEPRI, r4
    ebc8:	f3bf 8f6f 	isb	sy
}
    ebcc:	e7ee      	b.n	ebac <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    ebce:	4628      	mov	r0, r5
    ebd0:	f005 f8f2 	bl	13db8 <wait_tx_ready>
    ebd4:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    ebd6:	693b      	ldr	r3, [r7, #16]
    ebd8:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    ebda:	2201      	movs	r2, #1
    ebdc:	6939      	ldr	r1, [r7, #16]
    ebde:	4628      	mov	r0, r5
    ebe0:	f005 f89f 	bl	13d22 <tx_start>
	__asm__ volatile(
    ebe4:	f384 8811 	msr	BASEPRI, r4
    ebe8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    ebec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ebee:	bf00      	nop
    ebf0:	200021d2 	.word	0x200021d2

0000ebf4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    ebf4:	b538      	push	{r3, r4, r5, lr}
    ebf6:	4604      	mov	r4, r0
    ebf8:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    ebfa:	f101 0018 	add.w	r0, r1, #24
    ebfe:	f001 f9f5 	bl	ffec <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    ec02:	4b0c      	ldr	r3, [pc, #48]	; (ec34 <endtx_stoptx_ppi_init+0x40>)
    ec04:	4298      	cmp	r0, r3
    ec06:	d111      	bne.n	ec2c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    ec08:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    ec0a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    ec0e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ec10:	4a09      	ldr	r2, [pc, #36]	; (ec38 <endtx_stoptx_ppi_init+0x44>)
    ec12:	33a2      	adds	r3, #162	; 0xa2
    ec14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ec18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ec1c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    ec1e:	7e29      	ldrb	r1, [r5, #24]
    ec20:	2301      	movs	r3, #1
    ec22:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    ec24:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    ec28:	2000      	movs	r0, #0
}
    ec2a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    ec2c:	f06f 0004 	mvn.w	r0, #4
    ec30:	e7fb      	b.n	ec2a <endtx_stoptx_ppi_init+0x36>
    ec32:	bf00      	nop
    ec34:	0bad0000 	.word	0x0bad0000
    ec38:	4001f000 	.word	0x4001f000

0000ec3c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ec3c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    ec40:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    ec44:	4b01      	ldr	r3, [pc, #4]	; (ec4c <set_comparator+0x10>)
    ec46:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    ec4a:	4770      	bx	lr
    ec4c:	40011000 	.word	0x40011000

0000ec50 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ec50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ec54:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    ec56:	4a02      	ldr	r2, [pc, #8]	; (ec60 <event_enable+0x10>)
    ec58:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    ec5c:	4770      	bx	lr
    ec5e:	bf00      	nop
    ec60:	40011000 	.word	0x40011000

0000ec64 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ec64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ec68:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    ec6a:	4a02      	ldr	r2, [pc, #8]	; (ec74 <event_disable+0x10>)
    ec6c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    ec70:	4770      	bx	lr
    ec72:	bf00      	nop
    ec74:	40011000 	.word	0x40011000

0000ec78 <counter>:
     return p_reg->COUNTER;
    ec78:	4b01      	ldr	r3, [pc, #4]	; (ec80 <counter+0x8>)
    ec7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    ec7e:	4770      	bx	lr
    ec80:	40011000 	.word	0x40011000

0000ec84 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    ec84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec88:	4606      	mov	r6, r0
    ec8a:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    ec8c:	f7ff ffea 	bl	ec64 <event_disable>
	event_clear(chan);
    ec90:	4630      	mov	r0, r6
    ec92:	f005 f93a 	bl	13f0a <event_clear>
	uint32_t cc_val = req_cc;
    ec96:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    ec98:	2703      	movs	r7, #3
    ec9a:	e001      	b.n	eca0 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    ec9c:	193d      	adds	r5, r7, r4
			cc_inc++;
    ec9e:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    eca0:	4629      	mov	r1, r5
    eca2:	4630      	mov	r0, r6
    eca4:	f7ff ffca 	bl	ec3c <set_comparator>
		event_enable(chan);
    eca8:	4630      	mov	r0, r6
    ecaa:	f7ff ffd1 	bl	ec50 <event_enable>
		now = counter();
    ecae:	f7ff ffe3 	bl	ec78 <counter>
    ecb2:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    ecb4:	1cc1      	adds	r1, r0, #3
    ecb6:	4628      	mov	r0, r5
    ecb8:	f005 f916 	bl	13ee8 <counter_sub>
    ecbc:	4b0b      	ldr	r3, [pc, #44]	; (ecec <set_alarm+0x68>)
    ecbe:	4298      	cmp	r0, r3
    ecc0:	d911      	bls.n	ece6 <set_alarm+0x62>
			if (event_check(chan)) {
    ecc2:	4630      	mov	r0, r6
    ecc4:	f005 f914 	bl	13ef0 <event_check>
    ecc8:	2800      	cmp	r0, #0
    ecca:	d0e7      	beq.n	ec9c <set_alarm+0x18>
				now = counter();
    eccc:	f7ff ffd4 	bl	ec78 <counter>
    ecd0:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    ecd2:	4641      	mov	r1, r8
    ecd4:	f005 f908 	bl	13ee8 <counter_sub>
    ecd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ecdc:	d903      	bls.n	ece6 <set_alarm+0x62>
					event_clear(chan);
    ecde:	4630      	mov	r0, r6
    ece0:	f005 f913 	bl	13f0a <event_clear>
    ece4:	e7da      	b.n	ec9c <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    ece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecea:	bf00      	nop
    ecec:	007ffffd 	.word	0x007ffffd

0000ecf0 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    ecf0:	4b03      	ldr	r3, [pc, #12]	; (ed00 <int_event_disable_rtc+0x10>)
    ecf2:	4a04      	ldr	r2, [pc, #16]	; (ed04 <int_event_disable_rtc+0x14>)
    ecf4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    ecf8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    ecfc:	4770      	bx	lr
    ecfe:	bf00      	nop
    ed00:	40011000 	.word	0x40011000
    ed04:	000f0003 	.word	0x000f0003

0000ed08 <compare_int_lock>:
{
    ed08:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    ed0a:	2301      	movs	r3, #1
    ed0c:	4083      	lsls	r3, r0
    ed0e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ed12:	4a0e      	ldr	r2, [pc, #56]	; (ed4c <compare_int_lock+0x44>)
    ed14:	f3bf 8f5b 	dmb	ish
    ed18:	e852 1f00 	ldrex	r1, [r2]
    ed1c:	ea01 0e0c 	and.w	lr, r1, ip
    ed20:	e842 e400 	strex	r4, lr, [r2]
    ed24:	2c00      	cmp	r4, #0
    ed26:	d1f7      	bne.n	ed18 <compare_int_lock+0x10>
    ed28:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ed2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ed30:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    ed32:	4807      	ldr	r0, [pc, #28]	; (ed50 <compare_int_lock+0x48>)
    ed34:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    ed38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ed3c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    ed40:	420b      	tst	r3, r1
}
    ed42:	bf14      	ite	ne
    ed44:	2001      	movne	r0, #1
    ed46:	2000      	moveq	r0, #0
    ed48:	bd10      	pop	{r4, pc}
    ed4a:	bf00      	nop
    ed4c:	20001bc0 	.word	0x20001bc0
    ed50:	40011000 	.word	0x40011000

0000ed54 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    ed54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ed58:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    ed5a:	4a14      	ldr	r2, [pc, #80]	; (edac <channel_processing_check_and_clear+0x58>)
    ed5c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    ed60:	4213      	tst	r3, r2
    ed62:	d101      	bne.n	ed68 <channel_processing_check_and_clear+0x14>
	return false;
    ed64:	2000      	movs	r0, #0
}
    ed66:	4770      	bx	lr
{
    ed68:	b510      	push	{r4, lr}
    ed6a:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    ed6c:	2301      	movs	r3, #1
    ed6e:	4083      	lsls	r3, r0
    ed70:	43db      	mvns	r3, r3
    ed72:	490f      	ldr	r1, [pc, #60]	; (edb0 <channel_processing_check_and_clear+0x5c>)
    ed74:	f3bf 8f5b 	dmb	ish
    ed78:	e851 2f00 	ldrex	r2, [r1]
    ed7c:	ea02 0003 	and.w	r0, r2, r3
    ed80:	e841 0c00 	strex	ip, r0, [r1]
    ed84:	f1bc 0f00 	cmp.w	ip, #0
    ed88:	d1f6      	bne.n	ed78 <channel_processing_check_and_clear+0x24>
    ed8a:	f3bf 8f5b 	dmb	ish
    ed8e:	fa22 f304 	lsr.w	r3, r2, r4
    ed92:	f013 0f01 	tst.w	r3, #1
    ed96:	d103      	bne.n	eda0 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    ed98:	4620      	mov	r0, r4
    ed9a:	f005 f8a9 	bl	13ef0 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    ed9e:	b118      	cbz	r0, eda8 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    eda0:	4620      	mov	r0, r4
    eda2:	f005 f8b2 	bl	13f0a <event_clear>
			return true;
    eda6:	2001      	movs	r0, #1
}
    eda8:	bd10      	pop	{r4, pc}
    edaa:	bf00      	nop
    edac:	40011000 	.word	0x40011000
    edb0:	20001bbc 	.word	0x20001bbc

0000edb4 <compare_int_unlock>:
	if (key) {
    edb4:	b901      	cbnz	r1, edb8 <compare_int_unlock+0x4>
}
    edb6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    edb8:	2301      	movs	r3, #1
    edba:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    edbc:	4a11      	ldr	r2, [pc, #68]	; (ee04 <compare_int_unlock+0x50>)
    edbe:	f3bf 8f5b 	dmb	ish
    edc2:	e852 cf00 	ldrex	ip, [r2]
    edc6:	ea4c 0c03 	orr.w	ip, ip, r3
    edca:	e842 c100 	strex	r1, ip, [r2]
    edce:	2900      	cmp	r1, #0
    edd0:	d1f7      	bne.n	edc2 <compare_int_unlock+0xe>
    edd2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    edd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    edda:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    eddc:	4a0a      	ldr	r2, [pc, #40]	; (ee08 <compare_int_unlock+0x54>)
    edde:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ede2:	f3bf 8f5b 	dmb	ish
    ede6:	4b09      	ldr	r3, [pc, #36]	; (ee0c <compare_int_unlock+0x58>)
    ede8:	681b      	ldr	r3, [r3, #0]
    edea:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    edee:	40c3      	lsrs	r3, r0
    edf0:	f013 0f01 	tst.w	r3, #1
    edf4:	d0df      	beq.n	edb6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    edf6:	4b06      	ldr	r3, [pc, #24]	; (ee10 <compare_int_unlock+0x5c>)
    edf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    edfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    ee00:	e7d9      	b.n	edb6 <compare_int_unlock+0x2>
    ee02:	bf00      	nop
    ee04:	20001bc0 	.word	0x20001bc0
    ee08:	40011000 	.word	0x40011000
    ee0c:	20001bbc 	.word	0x20001bbc
    ee10:	e000e100 	.word	0xe000e100

0000ee14 <sys_clock_timeout_handler>:
{
    ee14:	b538      	push	{r3, r4, r5, lr}
    ee16:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    ee18:	4610      	mov	r0, r2
    ee1a:	4619      	mov	r1, r3
    ee1c:	f005 f881 	bl	13f22 <absolute_time_to_cc>
    ee20:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    ee22:	490d      	ldr	r1, [pc, #52]	; (ee58 <sys_clock_timeout_handler+0x44>)
    ee24:	680b      	ldr	r3, [r1, #0]
    ee26:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    ee28:	181b      	adds	r3, r3, r0
    ee2a:	684c      	ldr	r4, [r1, #4]
    ee2c:	f144 0400 	adc.w	r4, r4, #0
    ee30:	600b      	str	r3, [r1, #0]
    ee32:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    ee34:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    ee38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    ee3c:	d209      	bcs.n	ee52 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    ee3e:	4b07      	ldr	r3, [pc, #28]	; (ee5c <sys_clock_timeout_handler+0x48>)
    ee40:	681b      	ldr	r3, [r3, #0]
    ee42:	0a19      	lsrs	r1, r3, #8
    ee44:	061b      	lsls	r3, r3, #24
    ee46:	18d4      	adds	r4, r2, r3
    ee48:	f141 0500 	adc.w	r5, r1, #0
    ee4c:	4b04      	ldr	r3, [pc, #16]	; (ee60 <sys_clock_timeout_handler+0x4c>)
    ee4e:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    ee52:	f002 fc99 	bl	11788 <sys_clock_announce>
}
    ee56:	bd38      	pop	{r3, r4, r5, pc}
    ee58:	200015b0 	.word	0x200015b0
    ee5c:	20001bc4 	.word	0x20001bc4
    ee60:	200015b8 	.word	0x200015b8

0000ee64 <z_nrf_rtc_timer_read>:
{
    ee64:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    ee66:	4b0d      	ldr	r3, [pc, #52]	; (ee9c <z_nrf_rtc_timer_read+0x38>)
    ee68:	681c      	ldr	r4, [r3, #0]
    ee6a:	0a25      	lsrs	r5, r4, #8
    ee6c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    ee6e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    ee72:	f7ff ff01 	bl	ec78 <counter>
    ee76:	4603      	mov	r3, r0
	val += cntr;
    ee78:	1900      	adds	r0, r0, r4
    ee7a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    ee7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ee82:	d20a      	bcs.n	ee9a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    ee84:	4b06      	ldr	r3, [pc, #24]	; (eea0 <z_nrf_rtc_timer_read+0x3c>)
    ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee8a:	4290      	cmp	r0, r2
    ee8c:	eb71 0303 	sbcs.w	r3, r1, r3
    ee90:	d203      	bcs.n	ee9a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    ee92:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    ee96:	f141 0100 	adc.w	r1, r1, #0
}
    ee9a:	bd38      	pop	{r3, r4, r5, pc}
    ee9c:	20001bc4 	.word	0x20001bc4
    eea0:	200015b8 	.word	0x200015b8

0000eea4 <compare_set_nolocks>:
{
    eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eea6:	4606      	mov	r6, r0
    eea8:	4614      	mov	r4, r2
    eeaa:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    eeac:	4610      	mov	r0, r2
    eeae:	4619      	mov	r1, r3
    eeb0:	f005 f837 	bl	13f22 <absolute_time_to_cc>
    eeb4:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    eeb6:	f7ff ffd5 	bl	ee64 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    eeba:	42a0      	cmp	r0, r4
    eebc:	eb71 0305 	sbcs.w	r3, r1, r5
    eec0:	d215      	bcs.n	eeee <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    eec2:	1a20      	subs	r0, r4, r0
    eec4:	eb65 0101 	sbc.w	r1, r5, r1
    eec8:	4b17      	ldr	r3, [pc, #92]	; (ef28 <compare_set_nolocks+0x84>)
    eeca:	4298      	cmp	r0, r3
    eecc:	f171 0100 	sbcs.w	r1, r1, #0
    eed0:	d227      	bcs.n	ef22 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    eed2:	4b16      	ldr	r3, [pc, #88]	; (ef2c <compare_set_nolocks+0x88>)
    eed4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    eed8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    eedc:	42ab      	cmp	r3, r5
    eede:	bf08      	it	eq
    eee0:	42a2      	cmpeq	r2, r4
    eee2:	d012      	beq.n	ef0a <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    eee4:	4639      	mov	r1, r7
    eee6:	4630      	mov	r0, r6
    eee8:	f7ff fecc 	bl	ec84 <set_alarm>
    eeec:	e00d      	b.n	ef0a <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    eeee:	2301      	movs	r3, #1
    eef0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    eef2:	4a0f      	ldr	r2, [pc, #60]	; (ef30 <compare_set_nolocks+0x8c>)
    eef4:	f3bf 8f5b 	dmb	ish
    eef8:	e852 0f00 	ldrex	r0, [r2]
    eefc:	4318      	orrs	r0, r3
    eefe:	e842 0100 	strex	r1, r0, [r2]
    ef02:	2900      	cmp	r1, #0
    ef04:	d1f8      	bne.n	eef8 <compare_set_nolocks+0x54>
    ef06:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    ef0a:	4b08      	ldr	r3, [pc, #32]	; (ef2c <compare_set_nolocks+0x88>)
    ef0c:	0132      	lsls	r2, r6, #4
    ef0e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    ef12:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    ef16:	9906      	ldr	r1, [sp, #24]
    ef18:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    ef1a:	9b07      	ldr	r3, [sp, #28]
    ef1c:	6073      	str	r3, [r6, #4]
	return ret;
    ef1e:	2000      	movs	r0, #0
}
    ef20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    ef22:	f06f 0015 	mvn.w	r0, #21
    ef26:	e7fb      	b.n	ef20 <compare_set_nolocks+0x7c>
    ef28:	00800001 	.word	0x00800001
    ef2c:	200015a0 	.word	0x200015a0
    ef30:	20001bbc 	.word	0x20001bbc

0000ef34 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    ef34:	b530      	push	{r4, r5, lr}
    ef36:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    ef38:	f7ff feda 	bl	ecf0 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    ef3c:	2300      	movs	r3, #0
    ef3e:	4a1d      	ldr	r2, [pc, #116]	; (efb4 <sys_clock_driver_init+0x80>)
    ef40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ef44:	2b00      	cmp	r3, #0
    ef46:	dd24      	ble.n	ef92 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    ef48:	4c1a      	ldr	r4, [pc, #104]	; (efb4 <sys_clock_driver_init+0x80>)
    ef4a:	2502      	movs	r5, #2
    ef4c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ef50:	4b19      	ldr	r3, [pc, #100]	; (efb8 <sys_clock_driver_init+0x84>)
    ef52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ef56:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    ef5a:	2200      	movs	r2, #0
    ef5c:	2101      	movs	r1, #1
    ef5e:	2011      	movs	r0, #17
    ef60:	f003 fe06 	bl	12b70 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    ef64:	2011      	movs	r0, #17
    ef66:	f003 fdf9 	bl	12b5c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ef6a:	2301      	movs	r3, #1
    ef6c:	60a3      	str	r3, [r4, #8]
    ef6e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    ef70:	4a12      	ldr	r2, [pc, #72]	; (efbc <sys_clock_driver_init+0x88>)
    ef72:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    ef74:	2400      	movs	r4, #0
    ef76:	9401      	str	r4, [sp, #4]
    ef78:	4b11      	ldr	r3, [pc, #68]	; (efc0 <sys_clock_driver_init+0x8c>)
    ef7a:	9300      	str	r3, [sp, #0]
    ef7c:	4a11      	ldr	r2, [pc, #68]	; (efc4 <sys_clock_driver_init+0x90>)
    ef7e:	2300      	movs	r3, #0
    ef80:	4620      	mov	r0, r4
    ef82:	f004 ffd8 	bl	13f36 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    ef86:	4628      	mov	r0, r5
    ef88:	f7ff f8c8 	bl	e11c <z_nrf_clock_control_lf_on>

	return 0;
}
    ef8c:	4620      	mov	r0, r4
    ef8e:	b003      	add	sp, #12
    ef90:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ef92:	4a0d      	ldr	r2, [pc, #52]	; (efc8 <sys_clock_driver_init+0x94>)
    ef94:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    ef98:	f04f 30ff 	mov.w	r0, #4294967295
    ef9c:	f04f 31ff 	mov.w	r1, #4294967295
    efa0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    efa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    efa8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    efaa:	4902      	ldr	r1, [pc, #8]	; (efb4 <sys_clock_driver_init+0x80>)
    efac:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    efb0:	3301      	adds	r3, #1
    efb2:	e7c7      	b.n	ef44 <sys_clock_driver_init+0x10>
    efb4:	40011000 	.word	0x40011000
    efb8:	e000e100 	.word	0xe000e100
    efbc:	20001bc0 	.word	0x20001bc0
    efc0:	0000ee15 	.word	0x0000ee15
    efc4:	007fffff 	.word	0x007fffff
    efc8:	200015a0 	.word	0x200015a0

0000efcc <process_channel>:
{
    efcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efd0:	b082      	sub	sp, #8
    efd2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    efd4:	f7ff febe 	bl	ed54 <channel_processing_check_and_clear>
    efd8:	b910      	cbnz	r0, efe0 <process_channel+0x14>
}
    efda:	b002      	add	sp, #8
    efdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    efe0:	f7ff ff40 	bl	ee64 <z_nrf_rtc_timer_read>
    efe4:	4682      	mov	sl, r0
    efe6:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    efe8:	f004 ff9e 	bl	13f28 <full_int_lock>
    efec:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    efee:	4b15      	ldr	r3, [pc, #84]	; (f044 <process_channel+0x78>)
    eff0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    eff4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    eff8:	45c2      	cmp	sl, r8
    effa:	eb75 0509 	sbcs.w	r5, r5, r9
    effe:	d20b      	bcs.n	f018 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    f000:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    f002:	4630      	mov	r0, r6
    f004:	f004 ff94 	bl	13f30 <full_int_unlock>
		if (handler) {
    f008:	2d00      	cmp	r5, #0
    f00a:	d0e6      	beq.n	efda <process_channel+0xe>
			handler(chan, expire_time, user_context);
    f00c:	9700      	str	r7, [sp, #0]
    f00e:	4642      	mov	r2, r8
    f010:	464b      	mov	r3, r9
    f012:	4620      	mov	r0, r4
    f014:	47a8      	blx	r5
}
    f016:	e7e0      	b.n	efda <process_channel+0xe>
			handler = cc_data[chan].callback;
    f018:	4a0a      	ldr	r2, [pc, #40]	; (f044 <process_channel+0x78>)
    f01a:	0123      	lsls	r3, r4, #4
    f01c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    f020:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    f022:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    f024:	2000      	movs	r0, #0
    f026:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    f028:	f04f 32ff 	mov.w	r2, #4294967295
    f02c:	f04f 33ff 	mov.w	r3, #4294967295
    f030:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    f034:	4620      	mov	r0, r4
    f036:	f7ff fe15 	bl	ec64 <event_disable>
			event_clear(chan);
    f03a:	4620      	mov	r0, r4
    f03c:	f004 ff65 	bl	13f0a <event_clear>
    f040:	e7df      	b.n	f002 <process_channel+0x36>
    f042:	bf00      	nop
    f044:	200015a0 	.word	0x200015a0

0000f048 <rtc_nrf_isr>:
{
    f048:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    f04a:	4b0e      	ldr	r3, [pc, #56]	; (f084 <rtc_nrf_isr+0x3c>)
    f04c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    f050:	f013 0f02 	tst.w	r3, #2
    f054:	d00d      	beq.n	f072 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f056:	4b0b      	ldr	r3, [pc, #44]	; (f084 <rtc_nrf_isr+0x3c>)
    f058:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f05c:	b14b      	cbz	r3, f072 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f05e:	4b09      	ldr	r3, [pc, #36]	; (f084 <rtc_nrf_isr+0x3c>)
    f060:	2200      	movs	r2, #0
    f062:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f066:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    f06a:	4a07      	ldr	r2, [pc, #28]	; (f088 <rtc_nrf_isr+0x40>)
    f06c:	6813      	ldr	r3, [r2, #0]
    f06e:	3301      	adds	r3, #1
    f070:	6013      	str	r3, [r2, #0]
{
    f072:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    f074:	2c00      	cmp	r4, #0
    f076:	dd00      	ble.n	f07a <rtc_nrf_isr+0x32>
}
    f078:	bd10      	pop	{r4, pc}
		process_channel(chan);
    f07a:	4620      	mov	r0, r4
    f07c:	f7ff ffa6 	bl	efcc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    f080:	3401      	adds	r4, #1
    f082:	e7f7      	b.n	f074 <rtc_nrf_isr+0x2c>
    f084:	40011000 	.word	0x40011000
    f088:	20001bc4 	.word	0x20001bc4

0000f08c <sys_clock_set_timeout>:
{
    f08c:	b510      	push	{r4, lr}
    f08e:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    f090:	f1b0 3fff 	cmp.w	r0, #4294967295
    f094:	d006      	beq.n	f0a4 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    f096:	2801      	cmp	r0, #1
    f098:	dd09      	ble.n	f0ae <sys_clock_set_timeout+0x22>
    f09a:	4b15      	ldr	r3, [pc, #84]	; (f0f0 <sys_clock_set_timeout+0x64>)
    f09c:	4298      	cmp	r0, r3
    f09e:	dc24      	bgt.n	f0ea <sys_clock_set_timeout+0x5e>
    f0a0:	4604      	mov	r4, r0
    f0a2:	e005      	b.n	f0b0 <sys_clock_set_timeout+0x24>
		sys_busy = false;
    f0a4:	4b13      	ldr	r3, [pc, #76]	; (f0f4 <sys_clock_set_timeout+0x68>)
    f0a6:	2200      	movs	r2, #0
    f0a8:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    f0aa:	4c13      	ldr	r4, [pc, #76]	; (f0f8 <sys_clock_set_timeout+0x6c>)
    f0ac:	e003      	b.n	f0b6 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    f0ae:	2401      	movs	r4, #1
		sys_busy = true;
    f0b0:	4b10      	ldr	r3, [pc, #64]	; (f0f4 <sys_clock_set_timeout+0x68>)
    f0b2:	2201      	movs	r2, #1
    f0b4:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    f0b6:	f7ff fed5 	bl	ee64 <z_nrf_rtc_timer_read>
    f0ba:	4b10      	ldr	r3, [pc, #64]	; (f0fc <sys_clock_set_timeout+0x70>)
    f0bc:	681a      	ldr	r2, [r3, #0]
    f0be:	685b      	ldr	r3, [r3, #4]
    f0c0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    f0c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    f0c6:	d300      	bcc.n	f0ca <sys_clock_set_timeout+0x3e>
		cyc = 0;
    f0c8:	2400      	movs	r4, #0
	cyc += unannounced;
    f0ca:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    f0cc:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    f0d0:	d300      	bcc.n	f0d4 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    f0d2:	4c09      	ldr	r4, [pc, #36]	; (f0f8 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    f0d4:	2000      	movs	r0, #0
    f0d6:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    f0d8:	9001      	str	r0, [sp, #4]
    f0da:	4909      	ldr	r1, [pc, #36]	; (f100 <sys_clock_set_timeout+0x74>)
    f0dc:	9100      	str	r1, [sp, #0]
    f0de:	f143 0300 	adc.w	r3, r3, #0
    f0e2:	f004 ff28 	bl	13f36 <compare_set>
}
    f0e6:	b002      	add	sp, #8
    f0e8:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    f0ea:	4c03      	ldr	r4, [pc, #12]	; (f0f8 <sys_clock_set_timeout+0x6c>)
    f0ec:	e7e0      	b.n	f0b0 <sys_clock_set_timeout+0x24>
    f0ee:	bf00      	nop
    f0f0:	007ffffe 	.word	0x007ffffe
    f0f4:	200021d1 	.word	0x200021d1
    f0f8:	007fffff 	.word	0x007fffff
    f0fc:	200015b0 	.word	0x200015b0
    f100:	0000ee15 	.word	0x0000ee15

0000f104 <sys_clock_elapsed>:
{
    f104:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    f106:	f7ff fead 	bl	ee64 <z_nrf_rtc_timer_read>
    f10a:	4b02      	ldr	r3, [pc, #8]	; (f114 <sys_clock_elapsed+0x10>)
    f10c:	681b      	ldr	r3, [r3, #0]
}
    f10e:	1ac0      	subs	r0, r0, r3
    f110:	bd08      	pop	{r3, pc}
    f112:	bf00      	nop
    f114:	200015b0 	.word	0x200015b0

0000f118 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    f118:	b508      	push	{r3, lr}
    f11a:	4602      	mov	r2, r0
    f11c:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    f11e:	4802      	ldr	r0, [pc, #8]	; (f128 <multithreading_lock_acquire+0x10>)
    f120:	f001 fc22 	bl	10968 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
    f124:	bd08      	pop	{r3, pc}
    f126:	bf00      	nop
    f128:	20000478 	.word	0x20000478

0000f12c <multithreading_lock_release>:

void multithreading_lock_release(void)
{
    f12c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    f12e:	4802      	ldr	r0, [pc, #8]	; (f138 <multithreading_lock_release+0xc>)
    f130:	f001 fc9e 	bl	10a70 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
    f134:	bd08      	pop	{r3, pc}
    f136:	bf00      	nop
    f138:	20000478 	.word	0x20000478

0000f13c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
    f13c:	b510      	push	{r4, lr}
    f13e:	4603      	mov	r3, r0
    f140:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
    f142:	4803      	ldr	r0, [pc, #12]	; (f150 <rand_prio_low_vector_get_blocking+0x14>)
    f144:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    f146:	680c      	ldr	r4, [r1, #0]
    f148:	4619      	mov	r1, r3
    f14a:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
    f14c:	bd10      	pop	{r4, pc}
    f14e:	bf00      	nop
    f150:	00015b20 	.word	0x00015b20

0000f154 <receive_signal_raise>:
{
    f154:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    f156:	4902      	ldr	r1, [pc, #8]	; (f160 <receive_signal_raise+0xc>)
    f158:	4802      	ldr	r0, [pc, #8]	; (f164 <receive_signal_raise+0x10>)
    f15a:	f006 f85c 	bl	15216 <k_work_submit_to_queue>
}
    f15e:	bd08      	pop	{r3, pc}
    f160:	20001c10 	.word	0x20001c10
    f164:	20001748 	.word	0x20001748

0000f168 <cmd_handle>:
{
    f168:	b538      	push	{r3, r4, r5, lr}
    f16a:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
    f16c:	f04f 30ff 	mov.w	r0, #4294967295
    f170:	f04f 31ff 	mov.w	r1, #4294967295
    f174:	f7ff ffd0 	bl	f118 <multithreading_lock_acquire>
	if (!errcode) {
    f178:	4604      	mov	r4, r0
    f17a:	b108      	cbz	r0, f180 <cmd_handle+0x18>
}
    f17c:	4620      	mov	r0, r4
    f17e:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
    f180:	68e8      	ldr	r0, [r5, #12]
    f182:	f000 f969 	bl	f458 <hci_internal_cmd_put>
    f186:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    f188:	f7ff ffd0 	bl	f12c <multithreading_lock_release>
	if (errcode) {
    f18c:	2c00      	cmp	r4, #0
    f18e:	d1f5      	bne.n	f17c <cmd_handle+0x14>
    f190:	4902      	ldr	r1, [pc, #8]	; (f19c <cmd_handle+0x34>)
    f192:	4803      	ldr	r0, [pc, #12]	; (f1a0 <cmd_handle+0x38>)
    f194:	f006 f83f 	bl	15216 <k_work_submit_to_queue>
	return 0;
    f198:	e7f0      	b.n	f17c <cmd_handle+0x14>
    f19a:	bf00      	nop
    f19c:	20001c10 	.word	0x20001c10
    f1a0:	20001748 	.word	0x20001748

0000f1a4 <rand_prio_high_vector_get>:
{
    f1a4:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    f1a6:	4b08      	ldr	r3, [pc, #32]	; (f1c8 <rand_prio_high_vector_get+0x24>)
    f1a8:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    f1aa:	685c      	ldr	r4, [r3, #4]
    f1ac:	b144      	cbz	r4, f1c0 <rand_prio_high_vector_get+0x1c>
    f1ae:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    f1b0:	2300      	movs	r3, #0
    f1b2:	4601      	mov	r1, r0
    f1b4:	4804      	ldr	r0, [pc, #16]	; (f1c8 <rand_prio_high_vector_get+0x24>)
    f1b6:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
    f1b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    f1bc:	b2c0      	uxtb	r0, r0
    f1be:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    f1c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f1c4:	e7f8      	b.n	f1b8 <rand_prio_high_vector_get+0x14>
    f1c6:	bf00      	nop
    f1c8:	00015b20 	.word	0x00015b20

0000f1cc <rand_prio_low_vector_get>:
{
    f1cc:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
    f1ce:	4b08      	ldr	r3, [pc, #32]	; (f1f0 <rand_prio_low_vector_get+0x24>)
    f1d0:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
    f1d2:	685c      	ldr	r4, [r3, #4]
    f1d4:	b144      	cbz	r4, f1e8 <rand_prio_low_vector_get+0x1c>
    f1d6:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
    f1d8:	2300      	movs	r3, #0
    f1da:	4601      	mov	r1, r0
    f1dc:	4804      	ldr	r0, [pc, #16]	; (f1f0 <rand_prio_low_vector_get+0x24>)
    f1de:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
    f1e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    f1e4:	b2c0      	uxtb	r0, r0
    f1e6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    f1e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f1ec:	e7f8      	b.n	f1e0 <rand_prio_low_vector_get+0x14>
    f1ee:	bf00      	nop
    f1f0:	00015b20 	.word	0x00015b20

0000f1f4 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    f1f4:	b510      	push	{r4, lr}
    f1f6:	b088      	sub	sp, #32
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    f1f8:	4918      	ldr	r1, [pc, #96]	; (f25c <hci_driver_open+0x68>)
    f1fa:	4819      	ldr	r0, [pc, #100]	; (f260 <hci_driver_open+0x6c>)
    f1fc:	f005 ffef 	bl	151de <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    f200:	a803      	add	r0, sp, #12
    f202:	f7f1 fbdb 	bl	9bc <sdc_build_revision_get>
    f206:	4817      	ldr	r0, [pc, #92]	; (f264 <hci_driver_open+0x70>)
    f208:	f005 fdb4 	bl	14d74 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    f20c:	b1f8      	cbz	r0, f24e <hci_driver_open+0x5a>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    f20e:	4a16      	ldr	r2, [pc, #88]	; (f268 <hci_driver_open+0x74>)
    f210:	466b      	mov	r3, sp
    f212:	ca07      	ldmia	r2, {r0, r1, r2}
    f214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    f218:	4618      	mov	r0, r3
    f21a:	f7f1 fd3f 	bl	c9c <sdc_rand_source_register>
	if (err) {
    f21e:	b9c8      	cbnz	r0, f254 <hci_driver_open+0x60>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    f220:	f04f 30ff 	mov.w	r0, #4294967295
    f224:	f04f 31ff 	mov.w	r1, #4294967295
    f228:	f7ff ff76 	bl	f118 <multithreading_lock_acquire>
	if (err) {
    f22c:	4604      	mov	r4, r0
    f22e:	b110      	cbz	r0, f236 <hci_driver_open+0x42>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
    f230:	4620      	mov	r0, r4
    f232:	b008      	add	sp, #32
    f234:	bd10      	pop	{r4, pc}
	err = sdc_enable(receive_signal_raise, sdc_mempool);
    f236:	490d      	ldr	r1, [pc, #52]	; (f26c <hci_driver_open+0x78>)
    f238:	480d      	ldr	r0, [pc, #52]	; (f270 <hci_driver_open+0x7c>)
    f23a:	f7f1 fc2f 	bl	a9c <sdc_enable>
	if (err) {
    f23e:	4604      	mov	r4, r0
    f240:	b910      	cbnz	r0, f248 <hci_driver_open+0x54>
	MULTITHREADING_LOCK_RELEASE();
    f242:	f7ff ff73 	bl	f12c <multithreading_lock_release>
	return 0;
    f246:	e7f3      	b.n	f230 <hci_driver_open+0x3c>
		MULTITHREADING_LOCK_RELEASE();
    f248:	f7ff ff70 	bl	f12c <multithreading_lock_release>
		return err;
    f24c:	e7f0      	b.n	f230 <hci_driver_open+0x3c>
		return -ENODEV;
    f24e:	f06f 0412 	mvn.w	r4, #18
    f252:	e7ed      	b.n	f230 <hci_driver_open+0x3c>
		return -EINVAL;
    f254:	f06f 0415 	mvn.w	r4, #21
    f258:	e7ea      	b.n	f230 <hci_driver_open+0x3c>
    f25a:	bf00      	nop
    f25c:	00014157 	.word	0x00014157
    f260:	20001c10 	.word	0x20001c10
    f264:	00015b20 	.word	0x00015b20
    f268:	00015e20 	.word	0x00015e20
    f26c:	200015c0 	.word	0x200015c0
    f270:	0000f155 	.word	0x0000f155

0000f274 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
    f274:	b508      	push	{r3, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
    f276:	4806      	ldr	r0, [pc, #24]	; (f290 <hci_driver_init+0x1c>)
    f278:	f7fd ffc4 	bl	d204 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    f27c:	4805      	ldr	r0, [pc, #20]	; (f294 <hci_driver_init+0x20>)
    f27e:	f7f1 fc37 	bl	af0 <sdc_init>

	err = configure_supported_features();
    f282:	f004 ff17 	bl	140b4 <configure_supported_features>
	if (err) {
    f286:	b100      	cbz	r0, f28a <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
    f288:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
    f28a:	f004 ff1b 	bl	140c4 <configure_memory_usage>
	if (err) {
    f28e:	e7fb      	b.n	f288 <hci_driver_init+0x14>
    f290:	0001657c 	.word	0x0001657c
    f294:	00013f71 	.word	0x00013f71

0000f298 <hci_driver_receive_process>:
{
    f298:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
    f29a:	4805      	ldr	r0, [pc, #20]	; (f2b0 <hci_driver_receive_process+0x18>)
    f29c:	f004 feb6 	bl	1400c <fetch_and_process_hci_msg>
    f2a0:	b900      	cbnz	r0, f2a4 <hci_driver_receive_process+0xc>
}
    f2a2:	bd08      	pop	{r3, pc}
    f2a4:	4903      	ldr	r1, [pc, #12]	; (f2b4 <hci_driver_receive_process+0x1c>)
    f2a6:	4804      	ldr	r0, [pc, #16]	; (f2b8 <hci_driver_receive_process+0x20>)
    f2a8:	f005 ffb5 	bl	15216 <k_work_submit_to_queue>
    f2ac:	e7f9      	b.n	f2a2 <hci_driver_receive_process+0xa>
    f2ae:	bf00      	nop
    f2b0:	20001bc8 	.word	0x20001bc8
    f2b4:	20001c10 	.word	0x20001c10
    f2b8:	20001748 	.word	0x20001748

0000f2bc <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
    f2bc:	f242 0332 	movw	r3, #8242	; 0x2032
    f2c0:	4298      	cmp	r0, r3
    f2c2:	d04a      	beq.n	f35a <command_generates_command_complete_event+0x9e>
    f2c4:	d82d      	bhi.n	f322 <command_generates_command_complete_event+0x66>
    f2c6:	f242 0326 	movw	r3, #8230	; 0x2026
    f2ca:	4298      	cmp	r0, r3
    f2cc:	d847      	bhi.n	f35e <command_generates_command_complete_event+0xa2>
    f2ce:	f242 030d 	movw	r3, #8205	; 0x200d
    f2d2:	4298      	cmp	r0, r3
    f2d4:	d218      	bcs.n	f308 <command_generates_command_complete_event+0x4c>
    f2d6:	f240 4306 	movw	r3, #1030	; 0x406
    f2da:	4298      	cmp	r0, r3
    f2dc:	d041      	beq.n	f362 <command_generates_command_complete_event+0xa6>
    f2de:	f240 431d 	movw	r3, #1053	; 0x41d
    f2e2:	4298      	cmp	r0, r3
    f2e4:	d001      	beq.n	f2ea <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
    f2e6:	2001      	movs	r0, #1
    f2e8:	4770      	bx	lr
	switch (hci_opcode) {
    f2ea:	2000      	movs	r0, #0
    f2ec:	4770      	bx	lr
    f2ee:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
    f2f2:	382d      	subs	r0, #45	; 0x2d
    f2f4:	b280      	uxth	r0, r0
    f2f6:	4b1e      	ldr	r3, [pc, #120]	; (f370 <command_generates_command_complete_event+0xb4>)
    f2f8:	40c3      	lsrs	r3, r0
    f2fa:	f013 0f01 	tst.w	r3, #1
    f2fe:	d101      	bne.n	f304 <command_generates_command_complete_event+0x48>
		return true;
    f300:	2001      	movs	r0, #1
    f302:	4770      	bx	lr
	switch (hci_opcode) {
    f304:	2000      	movs	r0, #0
    f306:	4770      	bx	lr
    f308:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
    f30c:	380d      	subs	r0, #13
    f30e:	b280      	uxth	r0, r0
    f310:	4b18      	ldr	r3, [pc, #96]	; (f374 <command_generates_command_complete_event+0xb8>)
    f312:	40c3      	lsrs	r3, r0
    f314:	f013 0f01 	tst.w	r3, #1
    f318:	d101      	bne.n	f31e <command_generates_command_complete_event+0x62>
		return true;
    f31a:	2001      	movs	r0, #1
    f31c:	4770      	bx	lr
	switch (hci_opcode) {
    f31e:	2000      	movs	r0, #0
    f320:	4770      	bx	lr
    f322:	f242 0385 	movw	r3, #8325	; 0x2085
    f326:	4298      	cmp	r0, r3
    f328:	d80b      	bhi.n	f342 <command_generates_command_complete_event+0x86>
    f32a:	f242 036d 	movw	r3, #8301	; 0x206d
    f32e:	4298      	cmp	r0, r3
    f330:	d2dd      	bcs.n	f2ee <command_generates_command_complete_event+0x32>
    f332:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
    f336:	3803      	subs	r0, #3
    f338:	b280      	uxth	r0, r0
    f33a:	2801      	cmp	r0, #1
    f33c:	d913      	bls.n	f366 <command_generates_command_complete_event+0xaa>
		return true;
    f33e:	2001      	movs	r0, #1
    f340:	4770      	bx	lr
	switch (hci_opcode) {
    f342:	f64f 5302 	movw	r3, #64770	; 0xfd02
    f346:	4298      	cmp	r0, r3
    f348:	d00f      	beq.n	f36a <command_generates_command_complete_event+0xae>
    f34a:	f64f 530a 	movw	r3, #64778	; 0xfd0a
    f34e:	4298      	cmp	r0, r3
    f350:	d001      	beq.n	f356 <command_generates_command_complete_event+0x9a>
		return true;
    f352:	2001      	movs	r0, #1
	}
}
    f354:	4770      	bx	lr
	switch (hci_opcode) {
    f356:	2000      	movs	r0, #0
    f358:	4770      	bx	lr
    f35a:	2000      	movs	r0, #0
    f35c:	4770      	bx	lr
		return true;
    f35e:	2001      	movs	r0, #1
    f360:	4770      	bx	lr
	switch (hci_opcode) {
    f362:	2000      	movs	r0, #0
    f364:	4770      	bx	lr
    f366:	2000      	movs	r0, #0
    f368:	4770      	bx	lr
    f36a:	2000      	movs	r0, #0
    f36c:	4770      	bx	lr
    f36e:	bf00      	nop
    f370:	01000401 	.word	0x01000401
    f374:	03001241 	.word	0x03001241

0000f378 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
    f378:	b5f0      	push	{r4, r5, r6, r7, lr}
    f37a:	b083      	sub	sp, #12
    f37c:	4607      	mov	r7, r0
    f37e:	460e      	mov	r6, r1
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    f380:	7843      	ldrb	r3, [r0, #1]
    f382:	7805      	ldrb	r5, [r0, #0]
    f384:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    f388:	2304      	movs	r3, #4
    f38a:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
    f38e:	4b31      	ldr	r3, [pc, #196]	; (f454 <cmd_put+0xdc>)
    f390:	681c      	ldr	r4, [r3, #0]
    f392:	b13c      	cbz	r4, f3a4 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
    f394:	f10d 0307 	add.w	r3, sp, #7
    f398:	f10d 0206 	add.w	r2, sp, #6
    f39c:	47a0      	blx	r4
    f39e:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    f3a0:	2801      	cmp	r0, #1
    f3a2:	d11f      	bne.n	f3e4 <cmd_put+0x6c>

		switch (BT_OGF(opcode)) {
    f3a4:	0aab      	lsrs	r3, r5, #10
    f3a6:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
    f3aa:	d209      	bcs.n	f3c0 <cmd_put+0x48>
    f3ac:	2b03      	cmp	r3, #3
    f3ae:	d345      	bcc.n	f43c <cmd_put+0xc4>
    f3b0:	3b03      	subs	r3, #3
    f3b2:	2b05      	cmp	r3, #5
    f3b4:	d844      	bhi.n	f440 <cmd_put+0xc8>
    f3b6:	e8df f003 	tbb	[pc, r3]
    f3ba:	2921      	.short	0x2921
    f3bc:	39434331 	.word	0x39434331
    f3c0:	2b3f      	cmp	r3, #63	; 0x3f
    f3c2:	d107      	bne.n	f3d4 <cmd_put+0x5c>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
    f3c4:	f10d 0206 	add.w	r2, sp, #6
    f3c8:	4631      	mov	r1, r6
    f3ca:	4638      	mov	r0, r7
    f3cc:	f005 f883 	bl	144d6 <vs_cmd_put>
    f3d0:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
    f3d2:	e000      	b.n	f3d6 <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
    f3d4:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
    f3d6:	4628      	mov	r0, r5
    f3d8:	f7ff ff70 	bl	f2bc <command_generates_command_complete_event>
    f3dc:	f080 0001 	eor.w	r0, r0, #1
    f3e0:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
    f3e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f3e8:	b90b      	cbnz	r3, f3ee <cmd_put+0x76>
    f3ea:	2c01      	cmp	r4, #1
    f3ec:	d12a      	bne.n	f444 <cmd_put+0xcc>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
    f3ee:	4622      	mov	r2, r4
    f3f0:	4629      	mov	r1, r5
    f3f2:	4630      	mov	r0, r6
    f3f4:	f004 feb3 	bl	1415e <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
    f3f8:	b003      	add	sp, #12
    f3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = controller_and_baseband_cmd_put(cmd_in,
    f3fc:	f10d 0206 	add.w	r2, sp, #6
    f400:	4631      	mov	r1, r6
    f402:	4638      	mov	r0, r7
    f404:	f004 fec6 	bl	14194 <controller_and_baseband_cmd_put>
    f408:	4604      	mov	r4, r0
			break;
    f40a:	e7e4      	b.n	f3d6 <cmd_put+0x5e>
			status = info_param_cmd_put(cmd_in,
    f40c:	f10d 0206 	add.w	r2, sp, #6
    f410:	4631      	mov	r1, r6
    f412:	4638      	mov	r0, r7
    f414:	f004 ff51 	bl	142ba <info_param_cmd_put>
    f418:	4604      	mov	r4, r0
			break;
    f41a:	e7dc      	b.n	f3d6 <cmd_put+0x5e>
			status = status_param_cmd_put(cmd_in,
    f41c:	f10d 0206 	add.w	r2, sp, #6
    f420:	4631      	mov	r1, r6
    f422:	4638      	mov	r0, r7
    f424:	f004 feb4 	bl	14190 <status_param_cmd_put>
    f428:	4604      	mov	r4, r0
			break;
    f42a:	e7d4      	b.n	f3d6 <cmd_put+0x5e>
			status = le_controller_cmd_put(cmd_in,
    f42c:	f10d 0206 	add.w	r2, sp, #6
    f430:	4631      	mov	r1, r6
    f432:	4638      	mov	r0, r7
    f434:	f004 ffcf 	bl	143d6 <le_controller_cmd_put>
    f438:	4604      	mov	r4, r0
			break;
    f43a:	e7cc      	b.n	f3d6 <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
    f43c:	2401      	movs	r4, #1
    f43e:	e7ca      	b.n	f3d6 <cmd_put+0x5e>
    f440:	2401      	movs	r4, #1
    f442:	e7c8      	b.n	f3d6 <cmd_put+0x5e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    f444:	4623      	mov	r3, r4
    f446:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f44a:	4629      	mov	r1, r5
    f44c:	4630      	mov	r0, r6
    f44e:	f004 fe8f 	bl	14170 <encode_command_complete_header>
}
    f452:	e7d1      	b.n	f3f8 <cmd_put+0x80>
    f454:	20001c20 	.word	0x20001c20

0000f458 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    f458:	b538      	push	{r3, r4, r5, lr}
    f45a:	7842      	ldrb	r2, [r0, #1]
    f45c:	7803      	ldrb	r3, [r0, #0]
    f45e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f462:	b21c      	sxth	r4, r3
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    f464:	4b0e      	ldr	r3, [pc, #56]	; (f4a0 <hci_internal_cmd_put+0x48>)
    f466:	781b      	ldrb	r3, [r3, #0]
    f468:	b9b3      	cbnz	r3, f498 <hci_internal_cmd_put+0x40>
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
    f46a:	4d0e      	ldr	r5, [pc, #56]	; (f4a4 <hci_internal_cmd_put+0x4c>)
    f46c:	4629      	mov	r1, r5
    f46e:	f7ff ff83 	bl	f378 <cmd_put>
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
    f472:	2301      	movs	r3, #1
    f474:	f805 3c01 	strb.w	r3, [r5, #-1]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
    f478:	f242 0383 	movw	r3, #8323	; 0x2083
    f47c:	429c      	cmp	r4, r3
    f47e:	d001      	beq.n	f484 <hci_internal_cmd_put+0x2c>
		 */

		cmd_complete_or_status.occurred = false;
	}

	return 0;
    f480:	2000      	movs	r0, #0
}
    f482:	bd38      	pop	{r3, r4, r5, pc}
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
    f484:	1e6b      	subs	r3, r5, #1
    f486:	785b      	ldrb	r3, [r3, #1]
		&&
    f488:	2b0e      	cmp	r3, #14
    f48a:	d001      	beq.n	f490 <hci_internal_cmd_put+0x38>
	return 0;
    f48c:	2000      	movs	r0, #0
    f48e:	e7f8      	b.n	f482 <hci_internal_cmd_put+0x2a>
		cmd_complete_or_status.occurred = false;
    f490:	2000      	movs	r0, #0
    f492:	1e6b      	subs	r3, r5, #1
    f494:	7018      	strb	r0, [r3, #0]
    f496:	e7f4      	b.n	f482 <hci_internal_cmd_put+0x2a>
		return -NRF_EPERM;
    f498:	f04f 30ff 	mov.w	r0, #4294967295
    f49c:	e7f1      	b.n	f482 <hci_internal_cmd_put+0x2a>
    f49e:	bf00      	nop
    f4a0:	20001c24 	.word	0x20001c24
    f4a4:	20001c25 	.word	0x20001c25

0000f4a8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    f4a8:	b538      	push	{r3, r4, r5, lr}
    f4aa:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
    f4ac:	4b08      	ldr	r3, [pc, #32]	; (f4d0 <hci_internal_msg_get+0x28>)
    f4ae:	781b      	ldrb	r3, [r3, #0]
    f4b0:	b913      	cbnz	r3, f4b8 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
    f4b2:	f7f9 fe7c 	bl	91ae <sdc_hci_get>
}
    f4b6:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
    f4b8:	4d05      	ldr	r5, [pc, #20]	; (f4d0 <hci_internal_msg_get+0x28>)
    f4ba:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
    f4bc:	3202      	adds	r2, #2
    f4be:	1c69      	adds	r1, r5, #1
    f4c0:	f003 fc49 	bl	12d56 <memcpy>
		cmd_complete_or_status.occurred = false;
    f4c4:	2000      	movs	r0, #0
    f4c6:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    f4c8:	2304      	movs	r3, #4
    f4ca:	7023      	strb	r3, [r4, #0]
		return 0;
    f4cc:	e7f3      	b.n	f4b6 <hci_internal_msg_get+0xe>
    f4ce:	bf00      	nop
    f4d0:	20001c24 	.word	0x20001c24

0000f4d4 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    f4d4:	b538      	push	{r3, r4, r5, lr}
    f4d6:	4605      	mov	r5, r0
    f4d8:	460c      	mov	r4, r1
    f4da:	4809      	ldr	r0, [pc, #36]	; (f500 <bt_rand+0x2c>)
    f4dc:	f005 fc4a 	bl	14d74 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    f4e0:	f080 0301 	eor.w	r3, r0, #1
    f4e4:	f013 0fff 	tst.w	r3, #255	; 0xff
    f4e8:	d106      	bne.n	f4f8 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
    f4ea:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
    f4ec:	4804      	ldr	r0, [pc, #16]	; (f500 <bt_rand+0x2c>)
    f4ee:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
    f4f0:	681b      	ldr	r3, [r3, #0]
    f4f2:	4629      	mov	r1, r5
    f4f4:	4798      	blx	r3
}
    f4f6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    f4f8:	f06f 0012 	mvn.w	r0, #18
    f4fc:	e7fb      	b.n	f4f6 <bt_rand+0x22>
    f4fe:	bf00      	nop
    f500:	00015b20 	.word	0x00015b20

0000f504 <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
    f504:	b500      	push	{lr}
    f506:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
    f508:	f005 f863 	bl	145d2 <m_config_clock_source_get>
    f50c:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    f510:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    f514:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
    f518:	2300      	movs	r3, #0
    f51a:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
    f51e:	2310      	movs	r3, #16
    f520:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    f524:	2302      	movs	r3, #2
    f526:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f52a:	4a04      	ldr	r2, [pc, #16]	; (f53c <mpsl_lib_init_internal+0x38>)
    f52c:	2119      	movs	r1, #25
    f52e:	4668      	mov	r0, sp
    f530:	f7f8 fffe 	bl	8530 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
    f534:	b003      	add	sp, #12
    f536:	f85d fb04 	ldr.w	pc, [sp], #4
    f53a:	bf00      	nop
    f53c:	000145c5 	.word	0x000145c5

0000f540 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(void)
{
    f540:	b530      	push	{r4, r5, lr}
    f542:	b083      	sub	sp, #12

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    f544:	4d0d      	ldr	r5, [pc, #52]	; (f57c <mpsl_low_prio_init+0x3c>)
    f546:	2400      	movs	r4, #0
    f548:	9400      	str	r4, [sp, #0]
    f54a:	f06f 0309 	mvn.w	r3, #9
    f54e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f552:	490b      	ldr	r1, [pc, #44]	; (f580 <mpsl_low_prio_init+0x40>)
    f554:	4628      	mov	r0, r5
    f556:	f001 fc45 	bl	10de4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    f55a:	490a      	ldr	r1, [pc, #40]	; (f584 <mpsl_low_prio_init+0x44>)
    f55c:	4628      	mov	r0, r5
    f55e:	f001 f917 	bl	10790 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    f562:	4909      	ldr	r1, [pc, #36]	; (f588 <mpsl_low_prio_init+0x48>)
    f564:	4809      	ldr	r0, [pc, #36]	; (f58c <mpsl_low_prio_init+0x4c>)
    f566:	f005 fe3a 	bl	151de <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    f56a:	4622      	mov	r2, r4
    f56c:	2104      	movs	r1, #4
    f56e:	2019      	movs	r0, #25
    f570:	f003 fafe 	bl	12b70 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    f574:	4620      	mov	r0, r4
    f576:	b003      	add	sp, #12
    f578:	bd30      	pop	{r4, r5, pc}
    f57a:	bf00      	nop
    f57c:	20001748 	.word	0x20001748
    f580:	200030c0 	.word	0x200030c0
    f584:	000165a4 	.word	0x000165a4
    f588:	0001465b 	.word	0x0001465b
    f58c:	20001c6c 	.word	0x20001c6c

0000f590 <mpsl_low_prio_irq_handler>:
{
    f590:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    f592:	4902      	ldr	r1, [pc, #8]	; (f59c <mpsl_low_prio_irq_handler+0xc>)
    f594:	4802      	ldr	r0, [pc, #8]	; (f5a0 <mpsl_low_prio_irq_handler+0x10>)
    f596:	f005 fe3e 	bl	15216 <k_work_submit_to_queue>
}
    f59a:	bd08      	pop	{r3, pc}
    f59c:	20001c6c 	.word	0x20001c6c
    f5a0:	20001748 	.word	0x20001748

0000f5a4 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
    f5a4:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f5a6:	4b02      	ldr	r3, [pc, #8]	; (f5b0 <mpsl_hfclk_callback+0xc>)
    f5a8:	681b      	ldr	r3, [r3, #0]
    f5aa:	2000      	movs	r0, #0
    f5ac:	4798      	blx	r3
}
    f5ae:	bd08      	pop	{r3, pc}
    f5b0:	20001c7c 	.word	0x20001c7c

0000f5b4 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    f5b4:	b508      	push	{r3, lr}
	switch (domain) {
    f5b6:	b128      	cbz	r0, f5c4 <nrfx_clock_start+0x10>
    f5b8:	2801      	cmp	r0, #1
    f5ba:	d102      	bne.n	f5c2 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    f5bc:	4804      	ldr	r0, [pc, #16]	; (f5d0 <nrfx_clock_start+0x1c>)
    f5be:	f7f8 fe37 	bl	8230 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    f5c2:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f5c4:	4b03      	ldr	r3, [pc, #12]	; (f5d4 <nrfx_clock_start+0x20>)
    f5c6:	681b      	ldr	r3, [r3, #0]
    f5c8:	2001      	movs	r0, #1
    f5ca:	4798      	blx	r3
}
    f5cc:	e7f9      	b.n	f5c2 <nrfx_clock_start+0xe>
    f5ce:	bf00      	nop
    f5d0:	0000f5a5 	.word	0x0000f5a5
    f5d4:	20001c7c 	.word	0x20001c7c

0000f5d8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    f5d8:	4b01      	ldr	r3, [pc, #4]	; (f5e0 <nrfx_clock_init+0x8>)
    f5da:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    f5dc:	4801      	ldr	r0, [pc, #4]	; (f5e4 <nrfx_clock_init+0xc>)
    f5de:	4770      	bx	lr
    f5e0:	20001c7c 	.word	0x20001c7c
    f5e4:	0bad0000 	.word	0x0bad0000

0000f5e8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    f5e8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f5ec:	4905      	ldr	r1, [pc, #20]	; (f604 <__NVIC_SystemReset+0x1c>)
    f5ee:	68ca      	ldr	r2, [r1, #12]
    f5f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f5f4:	4b04      	ldr	r3, [pc, #16]	; (f608 <__NVIC_SystemReset+0x20>)
    f5f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f5f8:	60cb      	str	r3, [r1, #12]
    f5fa:	f3bf 8f4f 	dsb	sy
    __NOP();
    f5fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f600:	e7fd      	b.n	f5fe <__NVIC_SystemReset+0x16>
    f602:	bf00      	nop
    f604:	e000ed00 	.word	0xe000ed00
    f608:	05fa0004 	.word	0x05fa0004

0000f60c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    f60c:	4b02      	ldr	r3, [pc, #8]	; (f618 <nvmc_wait+0xc>)
    f60e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    f612:	2b00      	cmp	r3, #0
    f614:	d0fa      	beq.n	f60c <nvmc_wait>
}
    f616:	4770      	bx	lr
    f618:	4001e000 	.word	0x4001e000

0000f61c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    f61c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f61e:	4b03      	ldr	r3, [pc, #12]	; (f62c <nvmc_config+0x10>)
    f620:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    f624:	f7ff fff2 	bl	f60c <nvmc_wait>
}
    f628:	bd08      	pop	{r3, pc}
    f62a:	bf00      	nop
    f62c:	4001e000 	.word	0x4001e000

0000f630 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    f630:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    f632:	f005 f82f 	bl	14694 <nrf52_errata_12>
    f636:	b140      	cbz	r0, f64a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    f638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f63c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    f640:	f3c3 2304 	ubfx	r3, r3, #8, #5
    f644:	4a6b      	ldr	r2, [pc, #428]	; (f7f4 <SystemInit+0x1c4>)
    f646:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    f64a:	f005 f835 	bl	146b8 <nrf52_errata_16>
    f64e:	b110      	cbz	r0, f656 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    f650:	4b69      	ldr	r3, [pc, #420]	; (f7f8 <SystemInit+0x1c8>)
    f652:	4a6a      	ldr	r2, [pc, #424]	; (f7fc <SystemInit+0x1cc>)
    f654:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    f656:	f005 f845 	bl	146e4 <nrf52_errata_31>
    f65a:	b148      	cbz	r0, f670 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    f65c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f660:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    f664:	f3c3 3342 	ubfx	r3, r3, #13, #3
    f668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    f66c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    f670:	f005 f84a 	bl	14708 <nrf52_errata_32>
    f674:	b130      	cbz	r0, f684 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    f676:	4a62      	ldr	r2, [pc, #392]	; (f800 <SystemInit+0x1d0>)
    f678:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    f67c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f680:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    f684:	f005 f856 	bl	14734 <nrf52_errata_36>
    f688:	b140      	cbz	r0, f69c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    f68a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f68e:	2200      	movs	r2, #0
    f690:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    f694:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    f698:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    f69c:	f005 f85c 	bl	14758 <nrf52_errata_37>
    f6a0:	b120      	cbz	r0, f6ac <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    f6a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f6a6:	2203      	movs	r2, #3
    f6a8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    f6ac:	f005 f86a 	bl	14784 <nrf52_errata_57>
    f6b0:	b160      	cbz	r0, f6cc <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    f6b2:	4b54      	ldr	r3, [pc, #336]	; (f804 <SystemInit+0x1d4>)
    f6b4:	2205      	movs	r2, #5
    f6b6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    f6ba:	2201      	movs	r2, #1
    f6bc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    f6c0:	2200      	movs	r2, #0
    f6c2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    f6c6:	223f      	movs	r2, #63	; 0x3f
    f6c8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    f6cc:	f005 f870 	bl	147b0 <nrf52_errata_66>
    f6d0:	2800      	cmp	r0, #0
    f6d2:	d046      	beq.n	f762 <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    f6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f6d8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    f6dc:	4b4a      	ldr	r3, [pc, #296]	; (f808 <SystemInit+0x1d8>)
    f6de:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    f6e2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    f6e6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    f6ea:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    f6ee:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    f6f2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    f6f6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    f6fa:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    f6fe:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    f702:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    f706:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    f70a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    f70e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    f712:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    f716:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    f71a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    f71e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    f722:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    f726:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    f72a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    f72e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    f732:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    f736:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    f73a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    f73e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    f742:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    f746:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    f74a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    f74e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    f752:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    f756:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    f75a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    f75e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    f762:	f005 f847 	bl	147f4 <nrf52_errata_108>
    f766:	b148      	cbz	r0, f77c <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    f768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f76c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    f770:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    f774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    f778:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    f77c:	f005 f84c 	bl	14818 <nrf52_errata_136>
    f780:	b160      	cbz	r0, f79c <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    f782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f786:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    f78a:	f013 0f01 	tst.w	r3, #1
    f78e:	d005      	beq.n	f79c <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    f790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f794:	f06f 0201 	mvn.w	r2, #1
    f798:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    f79c:	f005 f84e 	bl	1483c <nrf52_errata_182>
    f7a0:	b130      	cbz	r0, f7b0 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    f7a2:	4a1a      	ldr	r2, [pc, #104]	; (f80c <SystemInit+0x1dc>)
    f7a4:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    f7a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f7ac:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    f7b0:	f005 f86c 	bl	1488c <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    f7b4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    f7b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    f7bc:	2b00      	cmp	r3, #0
    f7be:	db06      	blt.n	f7ce <SystemInit+0x19e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    f7c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    f7c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    f7c8:	2b00      	cmp	r3, #0
    f7ca:	db00      	blt.n	f7ce <SystemInit+0x19e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    f7cc:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    f7ce:	2001      	movs	r0, #1
    f7d0:	f7ff ff24 	bl	f61c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    f7d4:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    f7d8:	2515      	movs	r5, #21
    f7da:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    f7de:	f7ff ff15 	bl	f60c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    f7e2:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    f7e6:	f7ff ff11 	bl	f60c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    f7ea:	2000      	movs	r0, #0
    f7ec:	f7ff ff16 	bl	f61c <nvmc_config>
            NVIC_SystemReset();
    f7f0:	f7ff fefa 	bl	f5e8 <__NVIC_SystemReset>
    f7f4:	40013000 	.word	0x40013000
    f7f8:	4007c000 	.word	0x4007c000
    f7fc:	baadf00d 	.word	0xbaadf00d
    f800:	e000ed00 	.word	0xe000ed00
    f804:	40005000 	.word	0x40005000
    f808:	4000c000 	.word	0x4000c000
    f80c:	40001000 	.word	0x40001000

0000f810 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    f810:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    f812:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    f814:	fab4 f384 	clz	r3, r4
    f818:	f1c3 031f 	rsb	r3, r3, #31
    f81c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    f820:	2b00      	cmp	r3, #0
    f822:	db16      	blt.n	f852 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    f824:	2201      	movs	r2, #1
    f826:	fa02 f303 	lsl.w	r3, r2, r3
    f82a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f82e:	f3bf 8f5b 	dmb	ish
    f832:	e850 2f00 	ldrex	r2, [r0]
    f836:	42a2      	cmp	r2, r4
    f838:	d104      	bne.n	f844 <nrfx_flag32_alloc+0x34>
    f83a:	e840 3e00 	strex	lr, r3, [r0]
    f83e:	f1be 0f00 	cmp.w	lr, #0
    f842:	d1f6      	bne.n	f832 <nrfx_flag32_alloc+0x22>
    f844:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f848:	d1e3      	bne.n	f812 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    f84a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    f84e:	4802      	ldr	r0, [pc, #8]	; (f858 <nrfx_flag32_alloc+0x48>)
}
    f850:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    f852:	4802      	ldr	r0, [pc, #8]	; (f85c <nrfx_flag32_alloc+0x4c>)
    f854:	e7fc      	b.n	f850 <nrfx_flag32_alloc+0x40>
    f856:	bf00      	nop
    f858:	0bad0000 	.word	0x0bad0000
    f85c:	0bad0002 	.word	0x0bad0002

0000f860 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    f860:	6803      	ldr	r3, [r0, #0]
    f862:	40cb      	lsrs	r3, r1
    f864:	f013 0f01 	tst.w	r3, #1
    f868:	d115      	bne.n	f896 <nrfx_flag32_free+0x36>
{
    f86a:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    f86c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    f86e:	2301      	movs	r3, #1
    f870:	408b      	lsls	r3, r1
    f872:	4313      	orrs	r3, r2
    f874:	f3bf 8f5b 	dmb	ish
    f878:	e850 cf00 	ldrex	ip, [r0]
    f87c:	4594      	cmp	ip, r2
    f87e:	d104      	bne.n	f88a <nrfx_flag32_free+0x2a>
    f880:	e840 3e00 	strex	lr, r3, [r0]
    f884:	f1be 0f00 	cmp.w	lr, #0
    f888:	d1f6      	bne.n	f878 <nrfx_flag32_free+0x18>
    f88a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f88e:	d1ed      	bne.n	f86c <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    f890:	4802      	ldr	r0, [pc, #8]	; (f89c <nrfx_flag32_free+0x3c>)
}
    f892:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    f896:	4802      	ldr	r0, [pc, #8]	; (f8a0 <nrfx_flag32_free+0x40>)
}
    f898:	4770      	bx	lr
    f89a:	bf00      	nop
    f89c:	0bad0000 	.word	0x0bad0000
    f8a0:	0bad0004 	.word	0x0bad0004

0000f8a4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    f8a4:	3008      	adds	r0, #8
    f8a6:	4b03      	ldr	r3, [pc, #12]	; (f8b4 <pin_in_use+0x10>)
    f8a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f8ac:	f000 0001 	and.w	r0, r0, #1
    f8b0:	4770      	bx	lr
    f8b2:	bf00      	nop
    f8b4:	200003f8 	.word	0x200003f8

0000f8b8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    f8b8:	3008      	adds	r0, #8
    f8ba:	4b03      	ldr	r3, [pc, #12]	; (f8c8 <pin_in_use_by_te+0x10>)
    f8bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f8c0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f8c4:	4770      	bx	lr
    f8c6:	bf00      	nop
    f8c8:	200003f8 	.word	0x200003f8

0000f8cc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    f8cc:	3008      	adds	r0, #8
    f8ce:	4b04      	ldr	r3, [pc, #16]	; (f8e0 <pin_has_trigger+0x14>)
    f8d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f8d4:	f010 001c 	ands.w	r0, r0, #28
    f8d8:	bf18      	it	ne
    f8da:	2001      	movne	r0, #1
    f8dc:	4770      	bx	lr
    f8de:	bf00      	nop
    f8e0:	200003f8 	.word	0x200003f8

0000f8e4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f8e4:	3008      	adds	r0, #8
    f8e6:	4b03      	ldr	r3, [pc, #12]	; (f8f4 <pin_is_output+0x10>)
    f8e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f8ec:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f8f0:	4770      	bx	lr
    f8f2:	bf00      	nop
    f8f4:	200003f8 	.word	0x200003f8

0000f8f8 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f8f8:	3008      	adds	r0, #8
    f8fa:	4b02      	ldr	r3, [pc, #8]	; (f904 <pin_te_get+0xc>)
    f8fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f900:	0b40      	lsrs	r0, r0, #13
    f902:	4770      	bx	lr
    f904:	200003f8 	.word	0x200003f8

0000f908 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f908:	2200      	movs	r2, #0
    f90a:	e004      	b.n	f916 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f90c:	f04f 33ff 	mov.w	r3, #4294967295
    f910:	4283      	cmp	r3, r0
    f912:	d00f      	beq.n	f934 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f914:	3201      	adds	r2, #1
    f916:	2a1f      	cmp	r2, #31
    f918:	d80a      	bhi.n	f930 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f91a:	f102 0308 	add.w	r3, r2, #8
    f91e:	4906      	ldr	r1, [pc, #24]	; (f938 <handler_in_use+0x30>)
    f920:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f924:	f413 7f80 	tst.w	r3, #256	; 0x100
    f928:	d0f0      	beq.n	f90c <handler_in_use+0x4>
    f92a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    f92e:	e7ef      	b.n	f910 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    f930:	2000      	movs	r0, #0
    f932:	4770      	bx	lr
            return true;
    f934:	2001      	movs	r0, #1
}
    f936:	4770      	bx	lr
    f938:	200003f8 	.word	0x200003f8

0000f93c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    f93c:	2300      	movs	r3, #0
    f93e:	b113      	cbz	r3, f946 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    f940:	f04f 30ff 	mov.w	r0, #4294967295
}
    f944:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f946:	4a07      	ldr	r2, [pc, #28]	; (f964 <find_handler+0x28>)
    f948:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    f94c:	4282      	cmp	r2, r0
    f94e:	d001      	beq.n	f954 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    f950:	3301      	adds	r3, #1
    f952:	e7f4      	b.n	f93e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f954:	4a03      	ldr	r2, [pc, #12]	; (f964 <find_handler+0x28>)
    f956:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f95a:	6852      	ldr	r2, [r2, #4]
    f95c:	428a      	cmp	r2, r1
    f95e:	d1f7      	bne.n	f950 <find_handler+0x14>
            return i;
    f960:	4618      	mov	r0, r3
    f962:	4770      	bx	lr
    f964:	200003f8 	.word	0x200003f8

0000f968 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f968:	f100 0208 	add.w	r2, r0, #8
    f96c:	4b0d      	ldr	r3, [pc, #52]	; (f9a4 <get_initial_sense+0x3c>)
    f96e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    f972:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    f976:	2b04      	cmp	r3, #4
    f978:	d00d      	beq.n	f996 <get_initial_sense+0x2e>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    f97a:	2b05      	cmp	r3, #5
    f97c:	d00d      	beq.n	f99a <get_initial_sense+0x32>
    *p_pin = pin_number & 0x1F;
    f97e:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
    f982:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f986:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    f98a:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    f98c:	f013 0f01 	tst.w	r3, #1
    f990:	d005      	beq.n	f99e <get_initial_sense+0x36>
    f992:	2003      	movs	r0, #3
    f994:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
    f996:	2003      	movs	r0, #3
    f998:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    f99a:	2002      	movs	r0, #2
    f99c:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    f99e:	2002      	movs	r0, #2
    }

    return sense;
}
    f9a0:	4770      	bx	lr
    f9a2:	bf00      	nop
    f9a4:	200003f8 	.word	0x200003f8

0000f9a8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f9a8:	3008      	adds	r0, #8
    f9aa:	4b06      	ldr	r3, [pc, #24]	; (f9c4 <channel_handler_get+0x1c>)
    f9ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    f9b0:	f410 7f80 	tst.w	r0, #256	; 0x100
    f9b4:	d004      	beq.n	f9c0 <channel_handler_get+0x18>
    f9b6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    f9ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f9be:	4770      	bx	lr
        return NULL;
    f9c0:	2000      	movs	r0, #0
}
    f9c2:	4770      	bx	lr
    f9c4:	200003f8 	.word	0x200003f8

0000f9c8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    f9c8:	b570      	push	{r4, r5, r6, lr}
    f9ca:	4604      	mov	r4, r0
    f9cc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    f9ce:	f7ff ffeb 	bl	f9a8 <channel_handler_get>

    if (handler)
    f9d2:	b120      	cbz	r0, f9de <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    f9d4:	6806      	ldr	r6, [r0, #0]
    f9d6:	6842      	ldr	r2, [r0, #4]
    f9d8:	4629      	mov	r1, r5
    f9da:	4620      	mov	r0, r4
    f9dc:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    f9de:	4b04      	ldr	r3, [pc, #16]	; (f9f0 <call_handler+0x28>)
    f9e0:	689b      	ldr	r3, [r3, #8]
    f9e2:	b123      	cbz	r3, f9ee <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    f9e4:	4a02      	ldr	r2, [pc, #8]	; (f9f0 <call_handler+0x28>)
    f9e6:	68d2      	ldr	r2, [r2, #12]
    f9e8:	4629      	mov	r1, r5
    f9ea:	4620      	mov	r0, r4
    f9ec:	4798      	blx	r3
    }
}
    f9ee:	bd70      	pop	{r4, r5, r6, pc}
    f9f0:	200003f8 	.word	0x200003f8

0000f9f4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f9f4:	f100 0208 	add.w	r2, r0, #8
    f9f8:	4b0e      	ldr	r3, [pc, #56]	; (fa34 <release_handler+0x40>)
    f9fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    f9fe:	f413 7f80 	tst.w	r3, #256	; 0x100
    fa02:	d016      	beq.n	fa32 <release_handler+0x3e>
{
    fa04:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    fa06:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    fa0a:	4610      	mov	r0, r2
    fa0c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    fa10:	4a08      	ldr	r2, [pc, #32]	; (fa34 <release_handler+0x40>)
    fa12:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    fa16:	4620      	mov	r0, r4
    fa18:	f7ff ff76 	bl	f908 <handler_in_use>
    fa1c:	b100      	cbz	r0, fa20 <release_handler+0x2c>
}
    fa1e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    fa20:	4804      	ldr	r0, [pc, #16]	; (fa34 <release_handler+0x40>)
    fa22:	2300      	movs	r3, #0
    fa24:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    fa28:	4621      	mov	r1, r4
    fa2a:	3054      	adds	r0, #84	; 0x54
    fa2c:	f7ff ff18 	bl	f860 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    fa30:	e7f5      	b.n	fa1e <release_handler+0x2a>
    fa32:	4770      	bx	lr
    fa34:	200003f8 	.word	0x200003f8

0000fa38 <pin_handler_trigger_uninit>:
{
    fa38:	b510      	push	{r4, lr}
    fa3a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    fa3c:	f7ff ff3c 	bl	f8b8 <pin_in_use_by_te>
    fa40:	b140      	cbz	r0, fa54 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    fa42:	4620      	mov	r0, r4
    fa44:	f7ff ff58 	bl	f8f8 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    fa48:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    fa4c:	4b06      	ldr	r3, [pc, #24]	; (fa68 <pin_handler_trigger_uninit+0x30>)
    fa4e:	2200      	movs	r2, #0
    fa50:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    fa54:	4620      	mov	r0, r4
    fa56:	f7ff ffcd 	bl	f9f4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    fa5a:	3408      	adds	r4, #8
    fa5c:	4b03      	ldr	r3, [pc, #12]	; (fa6c <pin_handler_trigger_uninit+0x34>)
    fa5e:	2200      	movs	r2, #0
    fa60:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    fa64:	bd10      	pop	{r4, pc}
    fa66:	bf00      	nop
    fa68:	40006000 	.word	0x40006000
    fa6c:	200003f8 	.word	0x200003f8

0000fa70 <pin_handler_set>:
{
    fa70:	b570      	push	{r4, r5, r6, lr}
    fa72:	b082      	sub	sp, #8
    fa74:	4605      	mov	r5, r0
    fa76:	460e      	mov	r6, r1
    fa78:	4614      	mov	r4, r2
    release_handler(pin);
    fa7a:	f7ff ffbb 	bl	f9f4 <release_handler>
    if (!handler)
    fa7e:	b326      	cbz	r6, faca <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    fa80:	4621      	mov	r1, r4
    fa82:	4630      	mov	r0, r6
    fa84:	f7ff ff5a 	bl	f93c <find_handler>
    if (handler_id < 0)
    fa88:	1e03      	subs	r3, r0, #0
    fa8a:	db13      	blt.n	fab4 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    fa8c:	4910      	ldr	r1, [pc, #64]	; (fad0 <pin_handler_set+0x60>)
    fa8e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    fa92:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    fa96:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    fa98:	f105 0008 	add.w	r0, r5, #8
    fa9c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    faa0:	025b      	lsls	r3, r3, #9
    faa2:	b29b      	uxth	r3, r3
    faa4:	4313      	orrs	r3, r2
    faa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    faaa:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    faae:	4809      	ldr	r0, [pc, #36]	; (fad4 <pin_handler_set+0x64>)
}
    fab0:	b002      	add	sp, #8
    fab2:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    fab4:	f10d 0107 	add.w	r1, sp, #7
    fab8:	4807      	ldr	r0, [pc, #28]	; (fad8 <pin_handler_set+0x68>)
    faba:	f7ff fea9 	bl	f810 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    fabe:	4b05      	ldr	r3, [pc, #20]	; (fad4 <pin_handler_set+0x64>)
    fac0:	4298      	cmp	r0, r3
    fac2:	d1f5      	bne.n	fab0 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    fac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fac8:	e7e0      	b.n	fa8c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    faca:	4802      	ldr	r0, [pc, #8]	; (fad4 <pin_handler_set+0x64>)
    facc:	e7f0      	b.n	fab0 <pin_handler_set+0x40>
    face:	bf00      	nop
    fad0:	200003f8 	.word	0x200003f8
    fad4:	0bad0000 	.word	0x0bad0000
    fad8:	2000044c 	.word	0x2000044c

0000fadc <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
    fade:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    fae0:	2300      	movs	r3, #0
    fae2:	a801      	add	r0, sp, #4
    fae4:	e008      	b.n	faf8 <__kernel_ram_size+0x8>
        *p_masks = gpio_regs[i]->LATCH;
    fae6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    faea:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    faee:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    faf2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    faf6:	3301      	adds	r3, #1
    faf8:	2b00      	cmp	r3, #0
    fafa:	d0f4      	beq.n	fae6 <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    fafc:	2400      	movs	r4, #0
    fafe:	b3a4      	cbz	r4, fb6a <__kernel_ram_size+0x7a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fb00:	4b1e      	ldr	r3, [pc, #120]	; (fb7c <__kernel_ram_size+0x8c>)
    fb02:	2200      	movs	r2, #0
    fb04:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    fb08:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    fb0c:	a801      	add	r0, sp, #4
    fb0e:	f004 ffcd 	bl	14aac <latch_pending_read_and_check>
    fb12:	2800      	cmp	r0, #0
    fb14:	d1f2      	bne.n	fafc <__kernel_ram_size+0xc>
}
    fb16:	b003      	add	sp, #12
    fb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    fb1a:	fa90 f0a0 	rbit	r0, r0
    fb1e:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    fb22:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    fb26:	f100 0208 	add.w	r2, r0, #8
    fb2a:	4b15      	ldr	r3, [pc, #84]	; (fb80 <__kernel_ram_size+0x90>)
    fb2c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    fb30:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    fb32:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    fb36:	af01      	add	r7, sp, #4
    fb38:	5dba      	ldrb	r2, [r7, r6]
    fb3a:	2501      	movs	r5, #1
    fb3c:	fa05 f303 	lsl.w	r3, r5, r3
    fb40:	43db      	mvns	r3, r3
    fb42:	b25b      	sxtb	r3, r3
    fb44:	4013      	ands	r3, r2
    fb46:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    fb48:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    fb4c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    fb50:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    fb54:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    fb58:	f3c2 4201 	ubfx	r2, r2, #16, #2
    fb5c:	f3c1 0182 	ubfx	r1, r1, #2, #3
    fb60:	f004 ff55 	bl	14a0e <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    fb64:	40bd      	lsls	r5, r7
    fb66:	f8c6 5520 	str.w	r5, [r6, #1312]	; 0x520
            while (latch[i])
    fb6a:	ab02      	add	r3, sp, #8
    fb6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fb70:	f853 0c04 	ldr.w	r0, [r3, #-4]
    fb74:	2800      	cmp	r0, #0
    fb76:	d1d0      	bne.n	fb1a <__kernel_ram_size+0x2a>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    fb78:	3401      	adds	r4, #1
    fb7a:	e7c0      	b.n	fafe <__kernel_ram_size+0xe>
    fb7c:	40006000 	.word	0x40006000
    fb80:	200003f8 	.word	0x200003f8

0000fb84 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    fb84:	b538      	push	{r3, r4, r5, lr}
    fb86:	4604      	mov	r4, r0
    while (mask)
    fb88:	e018      	b.n	fbbc <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    fb8a:	fa94 f3a4 	rbit	r3, r4
    fb8e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    fb92:	2201      	movs	r2, #1
    fb94:	409a      	lsls	r2, r3
    fb96:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    fb9a:	4a0a      	ldr	r2, [pc, #40]	; (fbc4 <gpiote_evt_handle+0x40>)
    fb9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    fba0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    fba4:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    fba8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    fbac:	f3c0 4001 	ubfx	r0, r0, #16, #2
    fbb0:	f004 ff26 	bl	14a00 <gpiote_polarity_to_trigger>
    fbb4:	4601      	mov	r1, r0
    fbb6:	4628      	mov	r0, r5
    fbb8:	f7ff ff06 	bl	f9c8 <call_handler>
    while (mask)
    fbbc:	2c00      	cmp	r4, #0
    fbbe:	d1e4      	bne.n	fb8a <gpiote_evt_handle+0x6>
    }
}
    fbc0:	bd38      	pop	{r3, r4, r5, pc}
    fbc2:	bf00      	nop
    fbc4:	40006000 	.word	0x40006000

0000fbc8 <nrfx_gpiote_input_configure>:
{
    fbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbcc:	b084      	sub	sp, #16
    fbce:	4604      	mov	r4, r0
    fbd0:	4615      	mov	r5, r2
    fbd2:	461e      	mov	r6, r3
    if (p_input_config)
    fbd4:	b309      	cbz	r1, fc1a <nrfx_gpiote_input_configure+0x52>
    fbd6:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    fbd8:	f004 fefc 	bl	149d4 <pin_is_task_output>
    fbdc:	2800      	cmp	r0, #0
    fbde:	d13f      	bne.n	fc60 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    fbe0:	2300      	movs	r3, #0
    fbe2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    fbe6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    fbea:	9301      	str	r3, [sp, #4]
    fbec:	9300      	str	r3, [sp, #0]
    fbee:	463b      	mov	r3, r7
    fbf0:	f10d 020f 	add.w	r2, sp, #15
    fbf4:	f10d 010e 	add.w	r1, sp, #14
    fbf8:	4620      	mov	r0, r4
    fbfa:	f004 fe93 	bl	14924 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    fbfe:	4a38      	ldr	r2, [pc, #224]	; (fce0 <nrfx_gpiote_input_configure+0x118>)
    fc00:	f104 0108 	add.w	r1, r4, #8
    fc04:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fc08:	f023 0302 	bic.w	r3, r3, #2
    fc0c:	b29b      	uxth	r3, r3
    fc0e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    fc12:	f043 0301 	orr.w	r3, r3, #1
    fc16:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    fc1a:	b1bd      	cbz	r5, fc4c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    fc1c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    fc1e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    fc22:	4620      	mov	r0, r4
    fc24:	f7ff fe5e 	bl	f8e4 <pin_is_output>
    fc28:	b1e0      	cbz	r0, fc64 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    fc2a:	f1b8 0f00 	cmp.w	r8, #0
    fc2e:	d151      	bne.n	fcd4 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    fc30:	4a2b      	ldr	r2, [pc, #172]	; (fce0 <nrfx_gpiote_input_configure+0x118>)
    fc32:	f104 0108 	add.w	r1, r4, #8
    fc36:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fc3a:	f023 031c 	bic.w	r3, r3, #28
    fc3e:	b29b      	uxth	r3, r3
    fc40:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    fc44:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    fc48:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    fc4c:	2e00      	cmp	r6, #0
    fc4e:	d045      	beq.n	fcdc <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    fc50:	6872      	ldr	r2, [r6, #4]
    fc52:	6831      	ldr	r1, [r6, #0]
    fc54:	4620      	mov	r0, r4
    fc56:	f7ff ff0b 	bl	fa70 <pin_handler_set>
}
    fc5a:	b004      	add	sp, #16
    fc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    fc60:	4820      	ldr	r0, [pc, #128]	; (fce4 <nrfx_gpiote_input_configure+0x11c>)
    fc62:	e7fa      	b.n	fc5a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    fc64:	4a1e      	ldr	r2, [pc, #120]	; (fce0 <nrfx_gpiote_input_configure+0x118>)
    fc66:	f104 0108 	add.w	r1, r4, #8
    fc6a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fc6e:	f023 0320 	bic.w	r3, r3, #32
    fc72:	04db      	lsls	r3, r3, #19
    fc74:	0cdb      	lsrs	r3, r3, #19
    fc76:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    fc7a:	f1b8 0f00 	cmp.w	r8, #0
    fc7e:	d0d7      	beq.n	fc30 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    fc80:	2f03      	cmp	r7, #3
    fc82:	d829      	bhi.n	fcd8 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    fc84:	686b      	ldr	r3, [r5, #4]
    fc86:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    fc88:	b937      	cbnz	r7, fc98 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    fc8a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    fc8e:	4b16      	ldr	r3, [pc, #88]	; (fce8 <nrfx_gpiote_input_configure+0x120>)
    fc90:	2200      	movs	r2, #0
    fc92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    fc96:	e7cb      	b.n	fc30 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    fc98:	4638      	mov	r0, r7
    fc9a:	f004 feb2 	bl	14a02 <gpiote_trigger_to_polarity>
    fc9e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    fca0:	4811      	ldr	r0, [pc, #68]	; (fce8 <nrfx_gpiote_input_configure+0x120>)
    fca2:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    fca6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    fcaa:	f022 0203 	bic.w	r2, r2, #3
    fcae:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    fcb2:	4622      	mov	r2, r4
    fcb4:	4629      	mov	r1, r5
    fcb6:	f004 fdfd 	bl	148b4 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    fcba:	4a09      	ldr	r2, [pc, #36]	; (fce0 <nrfx_gpiote_input_configure+0x118>)
    fcbc:	f104 0108 	add.w	r1, r4, #8
    fcc0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fcc4:	036d      	lsls	r5, r5, #13
    fcc6:	b2ad      	uxth	r5, r5
    fcc8:	432b      	orrs	r3, r5
    fcca:	f043 0320 	orr.w	r3, r3, #32
    fcce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    fcd2:	e7ad      	b.n	fc30 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    fcd4:	4803      	ldr	r0, [pc, #12]	; (fce4 <nrfx_gpiote_input_configure+0x11c>)
    fcd6:	e7c0      	b.n	fc5a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    fcd8:	4802      	ldr	r0, [pc, #8]	; (fce4 <nrfx_gpiote_input_configure+0x11c>)
    fcda:	e7be      	b.n	fc5a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    fcdc:	4803      	ldr	r0, [pc, #12]	; (fcec <nrfx_gpiote_input_configure+0x124>)
    fcde:	e7bc      	b.n	fc5a <nrfx_gpiote_input_configure+0x92>
    fce0:	200003f8 	.word	0x200003f8
    fce4:	0bad0004 	.word	0x0bad0004
    fce8:	40006000 	.word	0x40006000
    fcec:	0bad0000 	.word	0x0bad0000

0000fcf0 <nrfx_gpiote_output_configure>:
{
    fcf0:	b570      	push	{r4, r5, r6, lr}
    fcf2:	b084      	sub	sp, #16
    fcf4:	4604      	mov	r4, r0
    fcf6:	4615      	mov	r5, r2
    if (p_config)
    fcf8:	b329      	cbz	r1, fd46 <nrfx_gpiote_output_configure+0x56>
    fcfa:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    fcfc:	f004 fe79 	bl	149f2 <pin_is_input>
    fd00:	b120      	cbz	r0, fd0c <nrfx_gpiote_output_configure+0x1c>
    fd02:	4620      	mov	r0, r4
    fd04:	f7ff fdd8 	bl	f8b8 <pin_in_use_by_te>
    fd08:	2800      	cmp	r0, #0
    fd0a:	d138      	bne.n	fd7e <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    fd0c:	4620      	mov	r0, r4
    fd0e:	f7ff fddd 	bl	f8cc <pin_has_trigger>
    fd12:	b110      	cbz	r0, fd1a <nrfx_gpiote_output_configure+0x2a>
    fd14:	7873      	ldrb	r3, [r6, #1]
    fd16:	2b01      	cmp	r3, #1
    fd18:	d031      	beq.n	fd7e <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    fd1a:	2301      	movs	r3, #1
    fd1c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    fd20:	2300      	movs	r3, #0
    fd22:	9301      	str	r3, [sp, #4]
    fd24:	9600      	str	r6, [sp, #0]
    fd26:	1cb3      	adds	r3, r6, #2
    fd28:	1c72      	adds	r2, r6, #1
    fd2a:	f10d 010f 	add.w	r1, sp, #15
    fd2e:	4620      	mov	r0, r4
    fd30:	f004 fdf8 	bl	14924 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    fd34:	4a1f      	ldr	r2, [pc, #124]	; (fdb4 <nrfx_gpiote_output_configure+0xc4>)
    fd36:	f104 0108 	add.w	r1, r4, #8
    fd3a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fd3e:	f043 0303 	orr.w	r3, r3, #3
    fd42:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    fd46:	b385      	cbz	r5, fdaa <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    fd48:	4620      	mov	r0, r4
    fd4a:	f004 fe52 	bl	149f2 <pin_is_input>
    fd4e:	bb70      	cbnz	r0, fdae <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    fd50:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    fd52:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    fd56:	4b18      	ldr	r3, [pc, #96]	; (fdb8 <nrfx_gpiote_output_configure+0xc8>)
    fd58:	2100      	movs	r1, #0
    fd5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    fd5e:	4a15      	ldr	r2, [pc, #84]	; (fdb4 <nrfx_gpiote_output_configure+0xc4>)
    fd60:	f104 0108 	add.w	r1, r4, #8
    fd64:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fd68:	f023 0320 	bic.w	r3, r3, #32
    fd6c:	04db      	lsls	r3, r3, #19
    fd6e:	0cdb      	lsrs	r3, r3, #19
    fd70:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    fd74:	786b      	ldrb	r3, [r5, #1]
    fd76:	b923      	cbnz	r3, fd82 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    fd78:	4810      	ldr	r0, [pc, #64]	; (fdbc <nrfx_gpiote_output_configure+0xcc>)
}
    fd7a:	b004      	add	sp, #16
    fd7c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    fd7e:	4810      	ldr	r0, [pc, #64]	; (fdc0 <nrfx_gpiote_output_configure+0xd0>)
    fd80:	e7fb      	b.n	fd7a <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    fd82:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    fd84:	9200      	str	r2, [sp, #0]
    fd86:	4622      	mov	r2, r4
    fd88:	4631      	mov	r1, r6
    fd8a:	480b      	ldr	r0, [pc, #44]	; (fdb8 <nrfx_gpiote_output_configure+0xc8>)
    fd8c:	f004 fdab 	bl	148e6 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    fd90:	4a08      	ldr	r2, [pc, #32]	; (fdb4 <nrfx_gpiote_output_configure+0xc4>)
    fd92:	3408      	adds	r4, #8
    fd94:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    fd98:	0376      	lsls	r6, r6, #13
    fd9a:	b2b6      	uxth	r6, r6
    fd9c:	4333      	orrs	r3, r6
    fd9e:	f043 0320 	orr.w	r3, r3, #32
    fda2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    fda6:	4805      	ldr	r0, [pc, #20]	; (fdbc <nrfx_gpiote_output_configure+0xcc>)
    fda8:	e7e7      	b.n	fd7a <nrfx_gpiote_output_configure+0x8a>
    fdaa:	4804      	ldr	r0, [pc, #16]	; (fdbc <nrfx_gpiote_output_configure+0xcc>)
    fdac:	e7e5      	b.n	fd7a <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    fdae:	4804      	ldr	r0, [pc, #16]	; (fdc0 <nrfx_gpiote_output_configure+0xd0>)
    fdb0:	e7e3      	b.n	fd7a <nrfx_gpiote_output_configure+0x8a>
    fdb2:	bf00      	nop
    fdb4:	200003f8 	.word	0x200003f8
    fdb8:	40006000 	.word	0x40006000
    fdbc:	0bad0000 	.word	0x0bad0000
    fdc0:	0bad0004 	.word	0x0bad0004

0000fdc4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    fdc4:	4b01      	ldr	r3, [pc, #4]	; (fdcc <nrfx_gpiote_global_callback_set+0x8>)
    fdc6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    fdc8:	60d9      	str	r1, [r3, #12]
}
    fdca:	4770      	bx	lr
    fdcc:	200003f8 	.word	0x200003f8

0000fdd0 <nrfx_gpiote_channel_get>:
{
    fdd0:	b538      	push	{r3, r4, r5, lr}
    fdd2:	4604      	mov	r4, r0
    fdd4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    fdd6:	f7ff fd6f 	bl	f8b8 <pin_in_use_by_te>
    fdda:	b140      	cbz	r0, fdee <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fddc:	f104 0008 	add.w	r0, r4, #8
    fde0:	4b04      	ldr	r3, [pc, #16]	; (fdf4 <nrfx_gpiote_channel_get+0x24>)
    fde2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    fde6:	0b5b      	lsrs	r3, r3, #13
    fde8:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    fdea:	4803      	ldr	r0, [pc, #12]	; (fdf8 <nrfx_gpiote_channel_get+0x28>)
}
    fdec:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    fdee:	4803      	ldr	r0, [pc, #12]	; (fdfc <nrfx_gpiote_channel_get+0x2c>)
    fdf0:	e7fc      	b.n	fdec <nrfx_gpiote_channel_get+0x1c>
    fdf2:	bf00      	nop
    fdf4:	200003f8 	.word	0x200003f8
    fdf8:	0bad0000 	.word	0x0bad0000
    fdfc:	0bad0004 	.word	0x0bad0004

0000fe00 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    fe00:	4b0f      	ldr	r3, [pc, #60]	; (fe40 <nrfx_gpiote_init+0x40>)
    fe02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    fe06:	b10b      	cbz	r3, fe0c <nrfx_gpiote_init+0xc>
        return err_code;
    fe08:	480e      	ldr	r0, [pc, #56]	; (fe44 <nrfx_gpiote_init+0x44>)
}
    fe0a:	4770      	bx	lr
{
    fe0c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    fe0e:	4c0e      	ldr	r4, [pc, #56]	; (fe48 <nrfx_gpiote_init+0x48>)
    fe10:	2240      	movs	r2, #64	; 0x40
    fe12:	2100      	movs	r1, #0
    fe14:	4620      	mov	r0, r4
    fe16:	f002 ffcd 	bl	12db4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    fe1a:	2006      	movs	r0, #6
    fe1c:	f002 fe9e 	bl	12b5c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fe20:	4b0a      	ldr	r3, [pc, #40]	; (fe4c <nrfx_gpiote_init+0x4c>)
    fe22:	2200      	movs	r2, #0
    fe24:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    fe28:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    fe2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    fe30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    fe34:	2301      	movs	r3, #1
    fe36:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    fe3a:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
    fe3c:	4804      	ldr	r0, [pc, #16]	; (fe50 <nrfx_gpiote_init+0x50>)
}
    fe3e:	bd10      	pop	{r4, pc}
    fe40:	200003f8 	.word	0x200003f8
    fe44:	0bad0005 	.word	0x0bad0005
    fe48:	20000408 	.word	0x20000408
    fe4c:	40006000 	.word	0x40006000
    fe50:	0bad0000 	.word	0x0bad0000

0000fe54 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    fe54:	4b03      	ldr	r3, [pc, #12]	; (fe64 <nrfx_gpiote_is_init+0x10>)
    fe56:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    fe5a:	3800      	subs	r0, #0
    fe5c:	bf18      	it	ne
    fe5e:	2001      	movne	r0, #1
    fe60:	4770      	bx	lr
    fe62:	bf00      	nop
    fe64:	200003f8 	.word	0x200003f8

0000fe68 <nrfx_gpiote_channel_free>:
{
    fe68:	b508      	push	{r3, lr}
    fe6a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    fe6c:	4801      	ldr	r0, [pc, #4]	; (fe74 <nrfx_gpiote_channel_free+0xc>)
    fe6e:	f7ff fcf7 	bl	f860 <nrfx_flag32_free>
}
    fe72:	bd08      	pop	{r3, pc}
    fe74:	20000448 	.word	0x20000448

0000fe78 <nrfx_gpiote_channel_alloc>:
{
    fe78:	b508      	push	{r3, lr}
    fe7a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    fe7c:	4801      	ldr	r0, [pc, #4]	; (fe84 <nrfx_gpiote_channel_alloc+0xc>)
    fe7e:	f7ff fcc7 	bl	f810 <nrfx_flag32_alloc>
}
    fe82:	bd08      	pop	{r3, pc}
    fe84:	20000448 	.word	0x20000448

0000fe88 <nrfx_gpiote_trigger_enable>:
{
    fe88:	b538      	push	{r3, r4, r5, lr}
    fe8a:	4604      	mov	r4, r0
    fe8c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fe8e:	f7ff fd13 	bl	f8b8 <pin_in_use_by_te>
    fe92:	b300      	cbz	r0, fed6 <nrfx_gpiote_trigger_enable+0x4e>
    fe94:	4620      	mov	r0, r4
    fe96:	f004 fdac 	bl	149f2 <pin_is_input>
    fe9a:	b1e0      	cbz	r0, fed6 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    fe9c:	4620      	mov	r0, r4
    fe9e:	f7ff fd2b 	bl	f8f8 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    fea2:	0083      	lsls	r3, r0, #2
    fea4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    fea8:	b29b      	uxth	r3, r3
    feaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    feae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    feb2:	2200      	movs	r2, #0
    feb4:	601a      	str	r2, [r3, #0]
    feb6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    feb8:	4a10      	ldr	r2, [pc, #64]	; (fefc <nrfx_gpiote_trigger_enable+0x74>)
    feba:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    febe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    fec2:	f043 0301 	orr.w	r3, r3, #1
    fec6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    feca:	b1ad      	cbz	r5, fef8 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    fecc:	2301      	movs	r3, #1
    fece:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    fed0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    fed4:	e010      	b.n	fef8 <nrfx_gpiote_trigger_enable+0x70>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    fed6:	4620      	mov	r0, r4
    fed8:	f7ff fd46 	bl	f968 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
    fedc:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    fee0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    fee4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    fee8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    feec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    fef0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    fef4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    fef8:	bd38      	pop	{r3, r4, r5, pc}
    fefa:	bf00      	nop
    fefc:	40006000 	.word	0x40006000

0000ff00 <nrfx_gpiote_trigger_disable>:
{
    ff00:	b510      	push	{r4, lr}
    ff02:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ff04:	f7ff fcd8 	bl	f8b8 <pin_in_use_by_te>
    ff08:	b1a0      	cbz	r0, ff34 <nrfx_gpiote_trigger_disable+0x34>
    ff0a:	4620      	mov	r0, r4
    ff0c:	f004 fd71 	bl	149f2 <pin_is_input>
    ff10:	b180      	cbz	r0, ff34 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    ff12:	4620      	mov	r0, r4
    ff14:	f7ff fcf0 	bl	f8f8 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    ff18:	2201      	movs	r2, #1
    ff1a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    ff1c:	4b0c      	ldr	r3, [pc, #48]	; (ff50 <nrfx_gpiote_trigger_disable+0x50>)
    ff1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    ff22:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    ff26:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    ff2a:	f022 0203 	bic.w	r2, r2, #3
    ff2e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    ff32:	e00b      	b.n	ff4c <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    ff34:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ff38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ff3c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    ff40:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    ff44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    ff48:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    ff4c:	bd10      	pop	{r4, pc}
    ff4e:	bf00      	nop
    ff50:	40006000 	.word	0x40006000

0000ff54 <nrfx_gpiote_pin_uninit>:
{
    ff54:	b510      	push	{r4, lr}
    ff56:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    ff58:	f7ff fca4 	bl	f8a4 <pin_in_use>
    ff5c:	b908      	cbnz	r0, ff62 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    ff5e:	4809      	ldr	r0, [pc, #36]	; (ff84 <nrfx_gpiote_pin_uninit+0x30>)
}
    ff60:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    ff62:	4620      	mov	r0, r4
    ff64:	f7ff ffcc 	bl	ff00 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    ff68:	4620      	mov	r0, r4
    ff6a:	f7ff fd65 	bl	fa38 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    ff6e:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    ff72:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    ff76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    ff7a:	2202      	movs	r2, #2
    ff7c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    ff80:	4801      	ldr	r0, [pc, #4]	; (ff88 <nrfx_gpiote_pin_uninit+0x34>)
    ff82:	e7ed      	b.n	ff60 <nrfx_gpiote_pin_uninit+0xc>
    ff84:	0bad0004 	.word	0x0bad0004
    ff88:	0bad0000 	.word	0x0bad0000

0000ff8c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    ff8c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    ff8e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    ff90:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ff94:	2100      	movs	r1, #0
    uint32_t status = 0;
    ff96:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ff98:	e003      	b.n	ffa2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    ff9a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    ff9c:	3304      	adds	r3, #4
    ff9e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ffa0:	3101      	adds	r1, #1
    ffa2:	2907      	cmp	r1, #7
    ffa4:	d814      	bhi.n	ffd0 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ffa6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    ffaa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    ffae:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    ffb0:	2a00      	cmp	r2, #0
    ffb2:	d0f2      	beq.n	ff9a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    ffb4:	4a0c      	ldr	r2, [pc, #48]	; (ffe8 <nrfx_gpiote_irq_handler+0x5c>)
    ffb6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    ffba:	4210      	tst	r0, r2
    ffbc:	d0ed      	beq.n	ff9a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    ffbe:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    ffc2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ffc6:	2500      	movs	r5, #0
    ffc8:	6015      	str	r5, [r2, #0]
    ffca:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    ffcc:	4304      	orrs	r4, r0
    ffce:	e7e4      	b.n	ff9a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ffd0:	4b05      	ldr	r3, [pc, #20]	; (ffe8 <nrfx_gpiote_irq_handler+0x5c>)
    ffd2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    ffd6:	b91b      	cbnz	r3, ffe0 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    ffd8:	4620      	mov	r0, r4
    ffda:	f7ff fdd3 	bl	fb84 <gpiote_evt_handle>
}
    ffde:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    ffe0:	f7ff fd7c 	bl	fadc <port_event_handle>
    ffe4:	e7f8      	b.n	ffd8 <nrfx_gpiote_irq_handler+0x4c>
    ffe6:	bf00      	nop
    ffe8:	40006000 	.word	0x40006000

0000ffec <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    ffec:	b508      	push	{r3, lr}
    ffee:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    fff0:	4801      	ldr	r0, [pc, #4]	; (fff8 <nrfx_ppi_channel_alloc+0xc>)
    fff2:	f7ff fc0d 	bl	f810 <nrfx_flag32_alloc>
}
    fff6:	bd08      	pop	{r3, pc}
    fff8:	20000454 	.word	0x20000454

0000fffc <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    fffc:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    fffe:	f010 0f01 	tst.w	r0, #1
   10002:	d108      	bne.n	10016 <CONFIG_PM_SRAM_SIZE+0x16>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   10004:	4806      	ldr	r0, [pc, #24]	; (10020 <CONFIG_PM_SRAM_SIZE+0x20>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   10006:	f013 0f02 	tst.w	r3, #2
   1000a:	d000      	beq.n	1000e <CONFIG_PM_SRAM_SIZE+0xe>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1000c:	4805      	ldr	r0, [pc, #20]	; (10024 <CONFIG_PM_SRAM_SIZE+0x24>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1000e:	f013 0f04 	tst.w	r3, #4
   10012:	d102      	bne.n	1001a <CONFIG_PM_SRAM_SIZE+0x1a>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   10014:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   10016:	4804      	ldr	r0, [pc, #16]	; (10028 <CONFIG_PM_SRAM_SIZE+0x28>)
   10018:	e7f5      	b.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1001a:	4804      	ldr	r0, [pc, #16]	; (1002c <CONFIG_PM_SRAM_SIZE+0x2c>)
    return ret;
   1001c:	e7fa      	b.n	10014 <CONFIG_PM_SRAM_SIZE+0x14>
   1001e:	bf00      	nop
   10020:	0bad0001 	.word	0x0bad0001
   10024:	0bae0001 	.word	0x0bae0001
   10028:	0bae0000 	.word	0x0bae0000
   1002c:	0bae0002 	.word	0x0bae0002

00010030 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   10030:	b530      	push	{r4, r5, lr}
   10032:	b083      	sub	sp, #12
   10034:	4604      	mov	r4, r0
   10036:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   10038:	4b29      	ldr	r3, [pc, #164]	; (100e0 <twi_tx_start_transfer+0xb0>)
   1003a:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1003c:	2300      	movs	r3, #0
   1003e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   10042:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   10046:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1004a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1004e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   10052:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   10056:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1005a:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1005e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   10062:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   10064:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10068:	2301      	movs	r3, #1
   1006a:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1006c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   10070:	2b01      	cmp	r3, #1
   10072:	d001      	beq.n	10078 <twi_tx_start_transfer+0x48>
   10074:	2301      	movs	r3, #1
   10076:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   10078:	4629      	mov	r1, r5
   1007a:	4620      	mov	r0, r4
   1007c:	f004 fd3d 	bl	14afa <twi_send_byte>

    if (p_cb->handler)
   10080:	682b      	ldr	r3, [r5, #0]
   10082:	b15b      	cbz	r3, 1009c <twi_tx_start_transfer+0x6c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   10084:	f240 2386 	movw	r3, #646	; 0x286
   10088:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1008a:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   1008c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   10090:	4814      	ldr	r0, [pc, #80]	; (100e4 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   10092:	b003      	add	sp, #12
   10094:	bd30      	pop	{r4, r5, pc}
            hw_timeout--;
   10096:	9b01      	ldr	r3, [sp, #4]
   10098:	3b01      	subs	r3, #1
   1009a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1009c:	9b01      	ldr	r3, [sp, #4]
   1009e:	2b00      	cmp	r3, #0
   100a0:	dd05      	ble.n	100ae <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
   100a2:	4629      	mov	r1, r5
   100a4:	4620      	mov	r0, r4
   100a6:	f004 fd77 	bl	14b98 <twi_transfer>
        while ((hw_timeout > 0) &&
   100aa:	2800      	cmp	r0, #0
   100ac:	d1f3      	bne.n	10096 <twi_tx_start_transfer+0x66>
        if (p_cb->error)
   100ae:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   100b2:	b13b      	cbz	r3, 100c4 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
   100b4:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   100b8:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   100bc:	b170      	cbz	r0, 100dc <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
   100be:	f7ff ff9d 	bl	fffc <twi_process_error>
   100c2:	e000      	b.n	100c6 <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   100c4:	4807      	ldr	r0, [pc, #28]	; (100e4 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
   100c6:	9b01      	ldr	r3, [sp, #4]
   100c8:	2b00      	cmp	r3, #0
   100ca:	dce2      	bgt.n	10092 <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   100cc:	2300      	movs	r3, #0
   100ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   100d2:	2305      	movs	r3, #5
   100d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   100d8:	4803      	ldr	r0, [pc, #12]	; (100e8 <twi_tx_start_transfer+0xb8>)
    return ret_code;
   100da:	e7da      	b.n	10092 <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   100dc:	4802      	ldr	r0, [pc, #8]	; (100e8 <twi_tx_start_transfer+0xb8>)
   100de:	e7f2      	b.n	100c6 <twi_tx_start_transfer+0x96>
   100e0:	000186a0 	.word	0x000186a0
   100e4:	0bad0000 	.word	0x0bad0000
   100e8:	0bad0001 	.word	0x0bad0001

000100ec <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   100ec:	b530      	push	{r4, r5, lr}
   100ee:	b083      	sub	sp, #12
   100f0:	4604      	mov	r4, r0
   100f2:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   100f4:	4b2d      	ldr	r3, [pc, #180]	; (101ac <twi_rx_start_transfer+0xc0>)
   100f6:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   100f8:	2300      	movs	r3, #0
   100fa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   100fe:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   10102:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   10106:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1010a:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1010e:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   10112:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   10116:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1011a:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1011c:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   10120:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   10122:	2b01      	cmp	r3, #1
   10124:	d015      	beq.n	10152 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   10126:	2301      	movs	r3, #1
   10128:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1012c:	2301      	movs	r3, #1
   1012e:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   10130:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   10134:	2b02      	cmp	r3, #2
   10136:	d001      	beq.n	1013c <twi_rx_start_transfer+0x50>
   10138:	2301      	movs	r3, #1
   1013a:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1013c:	682b      	ldr	r3, [r5, #0]
   1013e:	b19b      	cbz	r3, 10168 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   10140:	f240 2386 	movw	r3, #646	; 0x286
   10144:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   10146:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   10148:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1014c:	4818      	ldr	r0, [pc, #96]	; (101b0 <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1014e:	b003      	add	sp, #12
   10150:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   10152:	6a0b      	ldr	r3, [r1, #32]
   10154:	f013 0f40 	tst.w	r3, #64	; 0x40
   10158:	d1e5      	bne.n	10126 <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
   1015a:	2302      	movs	r3, #2
   1015c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   10160:	e7e4      	b.n	1012c <twi_rx_start_transfer+0x40>
               hw_timeout--;
   10162:	9b01      	ldr	r3, [sp, #4]
   10164:	3b01      	subs	r3, #1
   10166:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   10168:	9b01      	ldr	r3, [sp, #4]
   1016a:	2b00      	cmp	r3, #0
   1016c:	dd05      	ble.n	1017a <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
   1016e:	4629      	mov	r1, r5
   10170:	4620      	mov	r0, r4
   10172:	f004 fd11 	bl	14b98 <twi_transfer>
        while ((hw_timeout > 0) &&
   10176:	2800      	cmp	r0, #0
   10178:	d1f3      	bne.n	10162 <twi_rx_start_transfer+0x76>
        if (p_cb->error)
   1017a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1017e:	b13b      	cbz	r3, 10190 <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
   10180:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   10184:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   10188:	b170      	cbz	r0, 101a8 <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
   1018a:	f7ff ff37 	bl	fffc <twi_process_error>
   1018e:	e000      	b.n	10192 <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   10190:	4807      	ldr	r0, [pc, #28]	; (101b0 <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
   10192:	9b01      	ldr	r3, [sp, #4]
   10194:	2b00      	cmp	r3, #0
   10196:	dcda      	bgt.n	1014e <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   10198:	2300      	movs	r3, #0
   1019a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1019e:	2305      	movs	r3, #5
   101a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   101a4:	4803      	ldr	r0, [pc, #12]	; (101b4 <twi_rx_start_transfer+0xc8>)
    return ret_code;
   101a6:	e7d2      	b.n	1014e <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   101a8:	4802      	ldr	r0, [pc, #8]	; (101b4 <twi_rx_start_transfer+0xc8>)
   101aa:	e7f2      	b.n	10192 <twi_rx_start_transfer+0xa6>
   101ac:	000186a0 	.word	0x000186a0
   101b0:	0bad0000 	.word	0x0bad0000
   101b4:	0bad0001 	.word	0x0bad0001

000101b8 <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
   101b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101ba:	4607      	mov	r7, r0
   101bc:	460c      	mov	r4, r1
   101be:	4694      	mov	ip, r2
   101c0:	461e      	mov	r6, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   101c2:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   101c6:	2b01      	cmp	r3, #1
   101c8:	d02c      	beq.n	10224 <twi_xfer+0x6c>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   101ca:	2b02      	cmp	r3, #2
   101cc:	d02f      	beq.n	1022e <twi_xfer+0x76>
    p_reg->INTENCLR = mask;
   101ce:	4b27      	ldr	r3, [pc, #156]	; (1026c <twi_xfer+0xb4>)
   101d0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
   101d4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   101d8:	bb7b      	cbnz	r3, 1023a <twi_xfer+0x82>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   101da:	f016 0f04 	tst.w	r6, #4
   101de:	bf0c      	ite	eq
   101e0:	2301      	moveq	r3, #1
   101e2:	2300      	movne	r3, #0
   101e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
   101e8:	6226      	str	r6, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   101ea:	f104 0e0c 	add.w	lr, r4, #12
   101ee:	4665      	mov	r5, ip
   101f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   101f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   101f6:	682b      	ldr	r3, [r5, #0]
   101f8:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   101fc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10200:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   10202:	f8dc 300c 	ldr.w	r3, [ip, #12]
   10206:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
   10208:	f89c 3001 	ldrb.w	r3, [ip, #1]
    p_reg->ADDRESS = address;
   1020c:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   10210:	f89c 3000 	ldrb.w	r3, [ip]
   10214:	2b01      	cmp	r3, #1
   10216:	d021      	beq.n	1025c <twi_xfer+0xa4>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   10218:	b9a3      	cbnz	r3, 10244 <twi_xfer+0x8c>
   1021a:	f016 0f20 	tst.w	r6, #32
   1021e:	d01b      	beq.n	10258 <twi_xfer+0xa0>
   10220:	2301      	movs	r3, #1
   10222:	e010      	b.n	10246 <twi_xfer+0x8e>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   10224:	7812      	ldrb	r2, [r2, #0]
   10226:	2a01      	cmp	r2, #1
   10228:	d1cf      	bne.n	101ca <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
   1022a:	4811      	ldr	r0, [pc, #68]	; (10270 <twi_xfer+0xb8>)
   1022c:	e013      	b.n	10256 <twi_xfer+0x9e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1022e:	f89c 3000 	ldrb.w	r3, [ip]
   10232:	2b01      	cmp	r3, #1
   10234:	d0cb      	beq.n	101ce <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
   10236:	480e      	ldr	r0, [pc, #56]	; (10270 <twi_xfer+0xb8>)
   10238:	e00d      	b.n	10256 <twi_xfer+0x9e>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1023a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1023c:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
        return err_code;
   10240:	480c      	ldr	r0, [pc, #48]	; (10274 <twi_xfer+0xbc>)
   10242:	e008      	b.n	10256 <twi_xfer+0x9e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   10244:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   10246:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1024a:	4621      	mov	r1, r4
   1024c:	4638      	mov	r0, r7
   1024e:	f7ff feef 	bl	10030 <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
   10252:	6823      	ldr	r3, [r4, #0]
   10254:	b13b      	cbz	r3, 10266 <twi_xfer+0xae>
    {
        p_cb->busy = false;
    }
    return err_code;
}
   10256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   10258:	2300      	movs	r3, #0
   1025a:	e7f4      	b.n	10246 <twi_xfer+0x8e>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1025c:	4621      	mov	r1, r4
   1025e:	4638      	mov	r0, r7
   10260:	f7ff ff44 	bl	100ec <twi_rx_start_transfer>
   10264:	e7f5      	b.n	10252 <twi_xfer+0x9a>
        p_cb->busy = false;
   10266:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   1026a:	e7f4      	b.n	10256 <twi_xfer+0x9e>
   1026c:	00044286 	.word	0x00044286
   10270:	0bad0005 	.word	0x0bad0005
   10274:	0bad000b 	.word	0x0bad000b

00010278 <nrfx_twi_init>:
{
   10278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1027a:	7904      	ldrb	r4, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1027c:	6806      	ldr	r6, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1027e:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
   10282:	4d26      	ldr	r5, [pc, #152]	; (1031c <nrfx_twi_init+0xa4>)
   10284:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
   10288:	f89c 502e 	ldrb.w	r5, [ip, #46]	; 0x2e
   1028c:	2d00      	cmp	r5, #0
   1028e:	d143      	bne.n	10318 <nrfx_twi_init+0xa0>
    p_cb->handler         = event_handler;
   10290:	4d22      	ldr	r5, [pc, #136]	; (1031c <nrfx_twi_init+0xa4>)
   10292:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
   10296:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
    p_cb->p_context       = p_context;
   1029a:	f8cc 3004 	str.w	r3, [ip, #4]
    p_cb->int_mask        = 0;
   1029e:	2300      	movs	r3, #0
   102a0:	f8cc 3008 	str.w	r3, [ip, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   102a4:	f88c 302d 	strb.w	r3, [ip, #45]	; 0x2d
    p_cb->repeated        = false;
   102a8:	f88c 3031 	strb.w	r3, [ip, #49]	; 0x31
    p_cb->busy            = false;
   102ac:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   102b0:	7b4b      	ldrb	r3, [r1, #13]
   102b2:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   102b6:	7b8b      	ldrb	r3, [r1, #14]
   102b8:	f88c 3039 	strb.w	r3, [ip, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   102bc:	b98b      	cbnz	r3, 102e2 <nrfx_twi_init+0x6a>
        TWI_PIN_INIT(p_config->scl);
   102be:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   102c0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   102c4:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   102c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   102cc:	f240 670c 	movw	r7, #1548	; 0x60c
   102d0:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   102d4:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
   102d6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   102da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   102de:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   102e2:	7bcb      	ldrb	r3, [r1, #15]
   102e4:	b92b      	cbnz	r3, 102f2 <nrfx_twi_init+0x7a>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   102e6:	680d      	ldr	r5, [r1, #0]
   102e8:	684b      	ldr	r3, [r1, #4]
    p_reg->PSELSCL = scl_pin;
   102ea:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   102ee:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   102f2:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   102f4:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
    if (p_cb->handler)
   102f8:	b122      	cbz	r2, 10304 <nrfx_twi_init+0x8c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   102fa:	6800      	ldr	r0, [r0, #0]
   102fc:	f340 3007 	sbfx	r0, r0, #12, #8
   10300:	f002 fc2c 	bl	12b5c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   10304:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   10308:	4b04      	ldr	r3, [pc, #16]	; (1031c <nrfx_twi_init+0xa4>)
   1030a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1030e:	2201      	movs	r2, #1
   10310:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    return err_code;
   10314:	4802      	ldr	r0, [pc, #8]	; (10320 <nrfx_twi_init+0xa8>)
}
   10316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   10318:	4802      	ldr	r0, [pc, #8]	; (10324 <nrfx_twi_init+0xac>)
   1031a:	e7fc      	b.n	10316 <nrfx_twi_init+0x9e>
   1031c:	20001c80 	.word	0x20001c80
   10320:	0bad0000 	.word	0x0bad0000
   10324:	0bad0005 	.word	0x0bad0005

00010328 <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10328:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1032a:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1032c:	2105      	movs	r1, #5
   1032e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   10332:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   10336:	4a03      	ldr	r2, [pc, #12]	; (10344 <nrfx_twi_enable+0x1c>)
   10338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1033c:	2202      	movs	r2, #2
   1033e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   10342:	4770      	bx	lr
   10344:	20001c80 	.word	0x20001c80

00010348 <nrfx_twi_disable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10348:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1034a:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   1034c:	490b      	ldr	r1, [pc, #44]	; (1037c <nrfx_twi_disable+0x34>)
   1034e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   10352:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   10356:	f021 0103 	bic.w	r1, r1, #3
   1035a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1035e:	2000      	movs	r0, #0
   10360:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   10364:	4a06      	ldr	r2, [pc, #24]	; (10380 <nrfx_twi_disable+0x38>)
   10366:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1036a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   1036e:	f04f 0c01 	mov.w	ip, #1
   10372:	f881 c02e 	strb.w	ip, [r1, #46]	; 0x2e
    p_cb->busy = false;
   10376:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
   1037a:	4770      	bx	lr
   1037c:	00044286 	.word	0x00044286
   10380:	20001c80 	.word	0x20001c80

00010384 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   10384:	b508      	push	{r3, lr}
   10386:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10388:	f890 c004 	ldrb.w	ip, [r0, #4]
   1038c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   10390:	460a      	mov	r2, r1
   10392:	4903      	ldr	r1, [pc, #12]	; (103a0 <nrfx_twi_xfer+0x1c>)
   10394:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10398:	6800      	ldr	r0, [r0, #0]
   1039a:	f7ff ff0d 	bl	101b8 <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1039e:	bd08      	pop	{r3, pc}
   103a0:	20001c80 	.word	0x20001c80

000103a4 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   103a4:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
   103a6:	4902      	ldr	r1, [pc, #8]	; (103b0 <nrfx_twi_0_irq_handler+0xc>)
   103a8:	4802      	ldr	r0, [pc, #8]	; (103b4 <nrfx_twi_0_irq_handler+0x10>)
   103aa:	f004 fc71 	bl	14c90 <twi_irq_handler>
}
   103ae:	bd08      	pop	{r3, pc}
   103b0:	20001c80 	.word	0x20001c80
   103b4:	40003000 	.word	0x40003000

000103b8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   103b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   103bc:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   103c0:	f04f 0801 	mov.w	r8, #1
   103c4:	fa08 f600 	lsl.w	r6, r8, r0
    p_reg->OUTSET = set_mask;
   103c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   103cc:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   103d0:	f001 071f 	and.w	r7, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   103d4:	fa08 f807 	lsl.w	r8, r8, r7
    p_reg->OUTSET = set_mask;
   103d8:	f8c3 8508 	str.w	r8, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   103dc:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   103e0:	f240 620d 	movw	r2, #1549	; 0x60d
   103e4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   103e8:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
   103ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   103f0:	2004      	movs	r0, #4
   103f2:	f004 fa5b 	bl	148ac <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   103f6:	2400      	movs	r4, #0
   103f8:	2c08      	cmp	r4, #8
   103fa:	d816      	bhi.n	1042a <nrfx_twi_twim_bus_recover+0x72>
    return p_reg->IN;
   103fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   10400:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   10404:	40fb      	lsrs	r3, r7
    {
        if (nrf_gpio_pin_read(sda_pin))
   10406:	f013 0f01 	tst.w	r3, #1
   1040a:	d10e      	bne.n	1042a <nrfx_twi_twim_bus_recover+0x72>
    p_reg->OUTCLR = clr_mask;
   1040c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   10410:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   10414:	2004      	movs	r0, #4
   10416:	f004 fa49 	bl	148ac <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   1041a:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   1041e:	2004      	movs	r0, #4
   10420:	f004 fa44 	bl	148ac <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   10424:	3401      	adds	r4, #1
   10426:	b2e4      	uxtb	r4, r4
   10428:	e7e6      	b.n	103f8 <nrfx_twi_twim_bus_recover+0x40>
    p_reg->OUTCLR = clr_mask;
   1042a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1042e:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   10432:	2004      	movs	r0, #4
   10434:	f004 fa3a 	bl	148ac <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   10438:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   1043c:	2004      	movs	r0, #4
   1043e:	f004 fa35 	bl	148ac <nrfx_busy_wait>
    return p_reg->IN;
   10442:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   10446:	40fb      	lsrs	r3, r7

    if (nrf_gpio_pin_read(sda_pin))
   10448:	f013 0f01 	tst.w	r3, #1
   1044c:	d002      	beq.n	10454 <nrfx_twi_twim_bus_recover+0x9c>
    {
        return NRFX_SUCCESS;
   1044e:	4802      	ldr	r0, [pc, #8]	; (10458 <nrfx_twi_twim_bus_recover+0xa0>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   10450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INTERNAL;
   10454:	4801      	ldr	r0, [pc, #4]	; (1045c <nrfx_twi_twim_bus_recover+0xa4>)
   10456:	e7fb      	b.n	10450 <nrfx_twi_twim_bus_recover+0x98>
   10458:	0bad0000 	.word	0x0bad0000
   1045c:	0bad0001 	.word	0x0bad0001

00010460 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   10460:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   10462:	4c14      	ldr	r4, [pc, #80]	; (104b4 <_DoInit+0x54>)
   10464:	2303      	movs	r3, #3
   10466:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   10468:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1046a:	4a13      	ldr	r2, [pc, #76]	; (104b8 <_DoInit+0x58>)
   1046c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1046e:	4b13      	ldr	r3, [pc, #76]	; (104bc <_DoInit+0x5c>)
   10470:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   10472:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10476:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   10478:	2300      	movs	r3, #0
   1047a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1047c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1047e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   10480:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   10482:	4a0f      	ldr	r2, [pc, #60]	; (104c0 <_DoInit+0x60>)
   10484:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   10486:	2210      	movs	r2, #16
   10488:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1048a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1048c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1048e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   10490:	490c      	ldr	r1, [pc, #48]	; (104c4 <_DoInit+0x64>)
   10492:	1de0      	adds	r0, r4, #7
   10494:	f002 fc16 	bl	12cc4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   10498:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1049c:	490a      	ldr	r1, [pc, #40]	; (104c8 <_DoInit+0x68>)
   1049e:	4620      	mov	r0, r4
   104a0:	f002 fc10 	bl	12cc4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   104a4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   104a8:	2320      	movs	r3, #32
   104aa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   104ac:	f3bf 8f5f 	dmb	sy
}
   104b0:	bd10      	pop	{r4, pc}
   104b2:	bf00      	nop
   104b4:	200020cc 	.word	0x200020cc
   104b8:	000165e0 	.word	0x000165e0
   104bc:	20001ccc 	.word	0x20001ccc
   104c0:	20001cbc 	.word	0x20001cbc
   104c4:	000165ec 	.word	0x000165ec
   104c8:	000165f0 	.word	0x000165f0

000104cc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   104cc:	4b03      	ldr	r3, [pc, #12]	; (104dc <z_device_state_init+0x10>)

	while (dev < __device_end) {
   104ce:	e000      	b.n	104d2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   104d0:	3318      	adds	r3, #24
	while (dev < __device_end) {
   104d2:	4a03      	ldr	r2, [pc, #12]	; (104e0 <z_device_state_init+0x14>)
   104d4:	4293      	cmp	r3, r2
   104d6:	d3fb      	bcc.n	104d0 <z_device_state_init+0x4>
	}
}
   104d8:	4770      	bx	lr
   104da:	bf00      	nop
   104dc:	00015af0 	.word	0x00015af0
   104e0:	00015b98 	.word	0x00015b98

000104e4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   104e4:	b570      	push	{r4, r5, r6, lr}
   104e6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   104e8:	4b12      	ldr	r3, [pc, #72]	; (10534 <z_sys_init_run_level+0x50>)
   104ea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   104ee:	e009      	b.n	10504 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   104f0:	4243      	negs	r3, r0
   104f2:	e017      	b.n	10524 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   104f4:	68ea      	ldr	r2, [r5, #12]
   104f6:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   104f8:	68ea      	ldr	r2, [r5, #12]
   104fa:	7853      	ldrb	r3, [r2, #1]
   104fc:	f043 0301 	orr.w	r3, r3, #1
   10500:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10502:	3408      	adds	r4, #8
   10504:	1c73      	adds	r3, r6, #1
   10506:	4a0b      	ldr	r2, [pc, #44]	; (10534 <z_sys_init_run_level+0x50>)
   10508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1050c:	42a3      	cmp	r3, r4
   1050e:	d910      	bls.n	10532 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   10510:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   10512:	b15d      	cbz	r5, 1052c <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   10514:	6823      	ldr	r3, [r4, #0]
   10516:	4628      	mov	r0, r5
   10518:	4798      	blx	r3
			if (rc != 0) {
   1051a:	4603      	mov	r3, r0
   1051c:	2800      	cmp	r0, #0
   1051e:	d0eb      	beq.n	104f8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   10520:	2800      	cmp	r0, #0
   10522:	dbe5      	blt.n	104f0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   10524:	2bff      	cmp	r3, #255	; 0xff
   10526:	dde5      	ble.n	104f4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   10528:	23ff      	movs	r3, #255	; 0xff
   1052a:	e7e3      	b.n	104f4 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   1052c:	6823      	ldr	r3, [r4, #0]
   1052e:	4798      	blx	r3
   10530:	e7e7      	b.n	10502 <z_sys_init_run_level+0x1e>
		}
	}
}
   10532:	bd70      	pop	{r4, r5, r6, pc}
   10534:	0001660c 	.word	0x0001660c

00010538 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   10538:	b510      	push	{r4, lr}
   1053a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1053c:	23b8      	movs	r3, #184	; 0xb8
   1053e:	4c11      	ldr	r4, [pc, #68]	; (10584 <init_idle_thread+0x4c>)
   10540:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   10544:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1054c:	4b0e      	ldr	r3, [pc, #56]	; (10588 <init_idle_thread+0x50>)
   1054e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
   10552:	4a0e      	ldr	r2, [pc, #56]	; (1058c <init_idle_thread+0x54>)
   10554:	9205      	str	r2, [sp, #20]
   10556:	2201      	movs	r2, #1
   10558:	9204      	str	r2, [sp, #16]
   1055a:	220f      	movs	r2, #15
   1055c:	9203      	str	r2, [sp, #12]
   1055e:	2200      	movs	r2, #0
   10560:	9202      	str	r2, [sp, #8]
   10562:	9201      	str	r2, [sp, #4]
   10564:	9300      	str	r3, [sp, #0]
   10566:	4b0a      	ldr	r3, [pc, #40]	; (10590 <init_idle_thread+0x58>)
   10568:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1056c:	4909      	ldr	r1, [pc, #36]	; (10594 <init_idle_thread+0x5c>)
   1056e:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   10572:	4620      	mov	r0, r4
   10574:	f000 f92c 	bl	107d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10578:	7b63      	ldrb	r3, [r4, #13]
   1057a:	f023 0304 	bic.w	r3, r3, #4
   1057e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   10580:	b006      	add	sp, #24
   10582:	bd10      	pop	{r4, pc}
   10584:	20001820 	.word	0x20001820
   10588:	20002174 	.word	0x20002174
   1058c:	000165fc 	.word	0x000165fc
   10590:	0001092d 	.word	0x0001092d
   10594:	20003d40 	.word	0x20003d40

00010598 <bg_thread_main>:
{
   10598:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1059a:	4b0a      	ldr	r3, [pc, #40]	; (105c4 <bg_thread_main+0x2c>)
   1059c:	2201      	movs	r2, #1
   1059e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   105a0:	2003      	movs	r0, #3
   105a2:	f7ff ff9f 	bl	104e4 <z_sys_init_run_level>
	boot_banner();
   105a6:	f001 fabf 	bl	11b28 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   105aa:	2004      	movs	r0, #4
   105ac:	f7ff ff9a 	bl	104e4 <z_sys_init_run_level>
	z_init_static_threads();
   105b0:	f000 f972 	bl	10898 <z_init_static_threads>
	(void)main();
   105b4:	f7fa fb14 	bl	abe0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   105b8:	4a03      	ldr	r2, [pc, #12]	; (105c8 <bg_thread_main+0x30>)
   105ba:	7b13      	ldrb	r3, [r2, #12]
   105bc:	f023 0301 	bic.w	r3, r3, #1
   105c0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   105c2:	bd08      	pop	{r3, pc}
   105c4:	200021d2 	.word	0x200021d2
   105c8:	200018d8 	.word	0x200018d8

000105cc <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   105cc:	b508      	push	{r3, lr}
   105ce:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   105d0:	4a01      	ldr	r2, [pc, #4]	; (105d8 <switch_to_main_thread+0xc>)
   105d2:	4802      	ldr	r0, [pc, #8]	; (105dc <switch_to_main_thread+0x10>)
   105d4:	f7fb fe0c 	bl	c1f0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   105d8:	00010599 	.word	0x00010599
   105dc:	200018d8 	.word	0x200018d8

000105e0 <z_bss_zero>:
{
   105e0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   105e2:	4803      	ldr	r0, [pc, #12]	; (105f0 <z_bss_zero+0x10>)
   105e4:	4a03      	ldr	r2, [pc, #12]	; (105f4 <z_bss_zero+0x14>)
   105e6:	1a12      	subs	r2, r2, r0
   105e8:	2100      	movs	r1, #0
   105ea:	f004 fbed 	bl	14dc8 <z_early_memset>
}
   105ee:	bd08      	pop	{r3, pc}
   105f0:	20000510 	.word	0x20000510
   105f4:	200021d4 	.word	0x200021d4

000105f8 <z_init_cpu>:
{
   105f8:	b510      	push	{r4, lr}
   105fa:	4604      	mov	r4, r0
	init_idle_thread(id);
   105fc:	f7ff ff9c 	bl	10538 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   10600:	23b8      	movs	r3, #184	; 0xb8
   10602:	490b      	ldr	r1, [pc, #44]	; (10630 <z_init_cpu+0x38>)
   10604:	fb03 1104 	mla	r1, r3, r4, r1
   10608:	4a0a      	ldr	r2, [pc, #40]	; (10634 <z_init_cpu+0x3c>)
   1060a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1060e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10612:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   10614:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10616:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   1061a:	4b07      	ldr	r3, [pc, #28]	; (10638 <z_init_cpu+0x40>)
   1061c:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   10620:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   10624:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   10628:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   1062c:	6053      	str	r3, [r2, #4]
}
   1062e:	bd10      	pop	{r4, pc}
   10630:	20001820 	.word	0x20001820
   10634:	20002174 	.word	0x20002174
   10638:	20003500 	.word	0x20003500

0001063c <prepare_multithreading>:
{
   1063c:	b570      	push	{r4, r5, r6, lr}
   1063e:	b086      	sub	sp, #24
	z_sched_init();
   10640:	f000 fed0 	bl	113e4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   10644:	4d10      	ldr	r5, [pc, #64]	; (10688 <prepare_multithreading+0x4c>)
   10646:	4b11      	ldr	r3, [pc, #68]	; (1068c <prepare_multithreading+0x50>)
   10648:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1064a:	4b11      	ldr	r3, [pc, #68]	; (10690 <prepare_multithreading+0x54>)
   1064c:	9305      	str	r3, [sp, #20]
   1064e:	2301      	movs	r3, #1
   10650:	9304      	str	r3, [sp, #16]
   10652:	2400      	movs	r4, #0
   10654:	9403      	str	r4, [sp, #12]
   10656:	9402      	str	r4, [sp, #8]
   10658:	9401      	str	r4, [sp, #4]
   1065a:	9400      	str	r4, [sp, #0]
   1065c:	4b0d      	ldr	r3, [pc, #52]	; (10694 <prepare_multithreading+0x58>)
   1065e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10662:	490d      	ldr	r1, [pc, #52]	; (10698 <prepare_multithreading+0x5c>)
   10664:	4628      	mov	r0, r5
   10666:	f000 f8b3 	bl	107d0 <z_setup_new_thread>
   1066a:	4606      	mov	r6, r0
   1066c:	7b6b      	ldrb	r3, [r5, #13]
   1066e:	f023 0304 	bic.w	r3, r3, #4
   10672:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   10674:	4628      	mov	r0, r5
   10676:	f004 fe5b 	bl	15330 <z_ready_thread>
	z_init_cpu(0);
   1067a:	4620      	mov	r0, r4
   1067c:	f7ff ffbc 	bl	105f8 <z_init_cpu>
}
   10680:	4630      	mov	r0, r6
   10682:	b006      	add	sp, #24
   10684:	bd70      	pop	{r4, r5, r6, pc}
   10686:	bf00      	nop
   10688:	200018d8 	.word	0x200018d8
   1068c:	20002174 	.word	0x20002174
   10690:	00016604 	.word	0x00016604
   10694:	00010599 	.word	0x00010599
   10698:	20003ec0 	.word	0x20003ec0

0001069c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1069c:	b500      	push	{lr}
   1069e:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   106a0:	2000      	movs	r0, #0
   106a2:	f7ff ff1f 	bl	104e4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   106a6:	4b1e      	ldr	r3, [pc, #120]	; (10720 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   106a8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   106ac:	4c1d      	ldr	r4, [pc, #116]	; (10724 <z_cstart+0x88>)
   106ae:	6963      	ldr	r3, [r4, #20]
   106b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   106b4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   106b6:	23e0      	movs	r3, #224	; 0xe0
   106b8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   106bc:	2320      	movs	r3, #32
   106be:	77e3      	strb	r3, [r4, #31]
   106c0:	2500      	movs	r5, #0
   106c2:	7625      	strb	r5, [r4, #24]
   106c4:	7665      	strb	r5, [r4, #25]
   106c6:	76a5      	strb	r5, [r4, #26]
   106c8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   106cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   106ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   106d2:	6263      	str	r3, [r4, #36]	; 0x24
   106d4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   106d8:	f7fb ff54 	bl	c584 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   106dc:	f7fb fc58 	bl	bf90 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   106e0:	f04f 33ff 	mov.w	r3, #4294967295
   106e4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   106e6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   106e8:	f7fc f86e 	bl	c7c8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   106ec:	f7fb fffe 	bl	c6ec <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   106f0:	2401      	movs	r4, #1
   106f2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   106f6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   106fa:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   106fc:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   106fe:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   10700:	4b09      	ldr	r3, [pc, #36]	; (10728 <z_cstart+0x8c>)
   10702:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10706:	f7ff fee1 	bl	104cc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1070a:	4620      	mov	r0, r4
   1070c:	f7ff feea 	bl	104e4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   10710:	2002      	movs	r0, #2
   10712:	f7ff fee7 	bl	104e4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   10716:	f7ff ff91 	bl	1063c <prepare_multithreading>
   1071a:	f7ff ff57 	bl	105cc <switch_to_main_thread>
   1071e:	bf00      	nop
   10720:	20003d40 	.word	0x20003d40
   10724:	e000ed00 	.word	0xe000ed00
   10728:	20002174 	.word	0x20002174

0001072c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1072c:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1072e:	4c06      	ldr	r4, [pc, #24]	; (10748 <statics_init+0x1c>)
   10730:	e005      	b.n	1073e <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   10732:	68a2      	ldr	r2, [r4, #8]
   10734:	6861      	ldr	r1, [r4, #4]
   10736:	4620      	mov	r0, r4
   10738:	f004 fb4e 	bl	14dd8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1073c:	3414      	adds	r4, #20
   1073e:	4b03      	ldr	r3, [pc, #12]	; (1074c <statics_init+0x20>)
   10740:	429c      	cmp	r4, r3
   10742:	d3f6      	bcc.n	10732 <statics_init+0x6>
		}
	}
	return 0;
}
   10744:	2000      	movs	r0, #0
   10746:	bd10      	pop	{r4, pc}
   10748:	20000476 	.word	0x20000476
   1074c:	20000476 	.word	0x20000476

00010750 <z_thread_monitor_exit>:
	__asm__ volatile(
   10750:	f04f 0340 	mov.w	r3, #64	; 0x40
   10754:	f3ef 8111 	mrs	r1, BASEPRI
   10758:	f383 8812 	msr	BASEPRI_MAX, r3
   1075c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   10760:	4b0a      	ldr	r3, [pc, #40]	; (1078c <z_thread_monitor_exit+0x3c>)
   10762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10764:	4283      	cmp	r3, r0
   10766:	d104      	bne.n	10772 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   10768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1076a:	4b08      	ldr	r3, [pc, #32]	; (1078c <z_thread_monitor_exit+0x3c>)
   1076c:	625a      	str	r2, [r3, #36]	; 0x24
   1076e:	e007      	b.n	10780 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   10770:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   10772:	b113      	cbz	r3, 1077a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   10774:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   10776:	4282      	cmp	r2, r0
   10778:	d1fa      	bne.n	10770 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1077a:	b10b      	cbz	r3, 10780 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1077c:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1077e:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   10780:	f381 8811 	msr	BASEPRI, r1
   10784:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   10788:	4770      	bx	lr
   1078a:	bf00      	nop
   1078c:	20002174 	.word	0x20002174

00010790 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   10790:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   10792:	4604      	mov	r4, r0
   10794:	b140      	cbz	r0, 107a8 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   10796:	221f      	movs	r2, #31
   10798:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1079c:	f002 fa9c 	bl	12cd8 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   107a0:	2000      	movs	r0, #0
   107a2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   107a6:	bd10      	pop	{r4, pc}
		thread = _current;
   107a8:	4b01      	ldr	r3, [pc, #4]	; (107b0 <z_impl_k_thread_name_set+0x20>)
   107aa:	689c      	ldr	r4, [r3, #8]
   107ac:	e7f3      	b.n	10796 <z_impl_k_thread_name_set+0x6>
   107ae:	bf00      	nop
   107b0:	20002174 	.word	0x20002174

000107b4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   107b4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   107b6:	ea53 0102 	orrs.w	r1, r3, r2
   107ba:	d102      	bne.n	107c2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   107bc:	f004 fba0 	bl	14f00 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   107c0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   107c2:	4902      	ldr	r1, [pc, #8]	; (107cc <schedule_new_thread+0x18>)
   107c4:	3018      	adds	r0, #24
   107c6:	f000 ff5f 	bl	11688 <z_add_timeout>
   107ca:	e7f9      	b.n	107c0 <schedule_new_thread+0xc>
   107cc:	000153bd 	.word	0x000153bd

000107d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   107d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107d4:	b085      	sub	sp, #20
   107d6:	4604      	mov	r4, r0
   107d8:	460f      	mov	r7, r1
   107da:	4615      	mov	r5, r2
   107dc:	461e      	mov	r6, r3
   107de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   107e2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   107e6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   107ea:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   107ee:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   107f2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   107f4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   107f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   107f8:	2204      	movs	r2, #4
   107fa:	9911      	ldr	r1, [sp, #68]	; 0x44
   107fc:	f004 fb84 	bl	14f08 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   10800:	462a      	mov	r2, r5
   10802:	4639      	mov	r1, r7
   10804:	4620      	mov	r0, r4
   10806:	f004 fb62 	bl	14ece <setup_thread_stack>
   1080a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1080c:	f8cd 8008 	str.w	r8, [sp, #8]
   10810:	f8cd 9004 	str.w	r9, [sp, #4]
   10814:	f8cd a000 	str.w	sl, [sp]
   10818:	4633      	mov	r3, r6
   1081a:	4602      	mov	r2, r0
   1081c:	4639      	mov	r1, r7
   1081e:	4620      	mov	r0, r4
   10820:	f7fb fca0 	bl	c164 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   10824:	2300      	movs	r3, #0
   10826:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   10828:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1082a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1082e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   10832:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   10836:	f04f 0340 	mov.w	r3, #64	; 0x40
   1083a:	f3ef 8211 	mrs	r2, BASEPRI
   1083e:	f383 8812 	msr	BASEPRI_MAX, r3
   10842:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   10846:	4b13      	ldr	r3, [pc, #76]	; (10894 <z_setup_new_thread+0xc4>)
   10848:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1084a:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1084c:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
   1084e:	f382 8811 	msr	BASEPRI, r2
   10852:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   10856:	f1bb 0f00 	cmp.w	fp, #0
   1085a:	d013      	beq.n	10884 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   1085c:	221f      	movs	r2, #31
   1085e:	4659      	mov	r1, fp
   10860:	f104 0078 	add.w	r0, r4, #120	; 0x78
   10864:	f002 fa38 	bl	12cd8 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   10868:	2300      	movs	r3, #0
   1086a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1086e:	4b09      	ldr	r3, [pc, #36]	; (10894 <z_setup_new_thread+0xc4>)
   10870:	689b      	ldr	r3, [r3, #8]
   10872:	b15b      	cbz	r3, 1088c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   10874:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   10878:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1087c:	4628      	mov	r0, r5
   1087e:	b005      	add	sp, #20
   10880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   10884:	2300      	movs	r3, #0
   10886:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1088a:	e7f0      	b.n	1086e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1088c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   10890:	e7f4      	b.n	1087c <z_setup_new_thread+0xac>
   10892:	bf00      	nop
   10894:	20002174 	.word	0x20002174

00010898 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   10898:	b530      	push	{r4, r5, lr}
   1089a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1089c:	4c21      	ldr	r4, [pc, #132]	; (10924 <z_init_static_threads+0x8c>)
   1089e:	e014      	b.n	108ca <z_init_static_threads+0x32>
		z_setup_new_thread(
   108a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   108a2:	9305      	str	r3, [sp, #20]
   108a4:	6a23      	ldr	r3, [r4, #32]
   108a6:	9304      	str	r3, [sp, #16]
   108a8:	69e3      	ldr	r3, [r4, #28]
   108aa:	9303      	str	r3, [sp, #12]
   108ac:	69a3      	ldr	r3, [r4, #24]
   108ae:	9302      	str	r3, [sp, #8]
   108b0:	6963      	ldr	r3, [r4, #20]
   108b2:	9301      	str	r3, [sp, #4]
   108b4:	6923      	ldr	r3, [r4, #16]
   108b6:	9300      	str	r3, [sp, #0]
   108b8:	68e3      	ldr	r3, [r4, #12]
   108ba:	68a2      	ldr	r2, [r4, #8]
   108bc:	6861      	ldr	r1, [r4, #4]
   108be:	6820      	ldr	r0, [r4, #0]
   108c0:	f7ff ff86 	bl	107d0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   108c4:	6823      	ldr	r3, [r4, #0]
   108c6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   108c8:	342c      	adds	r4, #44	; 0x2c
   108ca:	4b17      	ldr	r3, [pc, #92]	; (10928 <z_init_static_threads+0x90>)
   108cc:	429c      	cmp	r4, r3
   108ce:	d3e7      	bcc.n	108a0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   108d0:	f000 fb4a 	bl	10f68 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   108d4:	4c13      	ldr	r4, [pc, #76]	; (10924 <z_init_static_threads+0x8c>)
   108d6:	e000      	b.n	108da <z_init_static_threads+0x42>
   108d8:	342c      	adds	r4, #44	; 0x2c
   108da:	4b13      	ldr	r3, [pc, #76]	; (10928 <z_init_static_threads+0x90>)
   108dc:	429c      	cmp	r4, r3
   108de:	d21c      	bcs.n	1091a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   108e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   108e2:	f1b0 3fff 	cmp.w	r0, #4294967295
   108e6:	d0f7      	beq.n	108d8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   108e8:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   108ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   108ee:	17c1      	asrs	r1, r0, #31
   108f0:	03c9      	lsls	r1, r1, #15
   108f2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   108f6:	03c0      	lsls	r0, r0, #15
   108f8:	f240 33e7 	movw	r3, #999	; 0x3e7
   108fc:	18c0      	adds	r0, r0, r3
   108fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10902:	f04f 0300 	mov.w	r3, #0
   10906:	f141 0100 	adc.w	r1, r1, #0
   1090a:	f7ef ffdd 	bl	8c8 <__aeabi_uldivmod>
   1090e:	4602      	mov	r2, r0
   10910:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   10912:	4628      	mov	r0, r5
   10914:	f7ff ff4e 	bl	107b4 <schedule_new_thread>
   10918:	e7de      	b.n	108d8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1091a:	f000 fd11 	bl	11340 <k_sched_unlock>
}
   1091e:	b007      	add	sp, #28
   10920:	bd30      	pop	{r4, r5, pc}
   10922:	bf00      	nop
   10924:	00015cd0 	.word	0x00015cd0
   10928:	00015cfc 	.word	0x00015cfc

0001092c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1092c:	b508      	push	{r3, lr}
   1092e:	e001      	b.n	10934 <idle+0x8>
	arch_cpu_idle();
   10930:	f7fb fb34 	bl	bf9c <arch_cpu_idle>
	__asm__ volatile(
   10934:	f04f 0240 	mov.w	r2, #64	; 0x40
   10938:	f3ef 8311 	mrs	r3, BASEPRI
   1093c:	f382 8812 	msr	BASEPRI_MAX, r2
   10940:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   10944:	f004 fe60 	bl	15608 <z_get_next_timeout_expiry>
   10948:	4b05      	ldr	r3, [pc, #20]	; (10960 <idle+0x34>)
   1094a:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
   1094c:	4b05      	ldr	r3, [pc, #20]	; (10964 <idle+0x38>)
   1094e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10950:	2b00      	cmp	r3, #0
   10952:	d0ed      	beq.n	10930 <idle+0x4>
   10954:	f7fb fa46 	bl	bde4 <pm_system_suspend>
   10958:	2800      	cmp	r0, #0
   1095a:	d1eb      	bne.n	10934 <idle+0x8>
   1095c:	e7e8      	b.n	10930 <idle+0x4>
   1095e:	bf00      	nop
   10960:	20002174 	.word	0x20002174
   10964:	200021d2 	.word	0x200021d2

00010968 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1096c:	b082      	sub	sp, #8
   1096e:	4604      	mov	r4, r0
   10970:	461e      	mov	r6, r3
   10972:	f04f 0340 	mov.w	r3, #64	; 0x40
   10976:	f3ef 8511 	mrs	r5, BASEPRI
   1097a:	f383 8812 	msr	BASEPRI_MAX, r3
   1097e:	f3bf 8f6f 	isb	sy
   10982:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10984:	68c1      	ldr	r1, [r0, #12]
   10986:	b999      	cbnz	r1, 109b0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   10988:	2900      	cmp	r1, #0
   1098a:	d151      	bne.n	10a30 <z_impl_k_mutex_lock+0xc8>
   1098c:	4a36      	ldr	r2, [pc, #216]	; (10a68 <z_impl_k_mutex_lock+0x100>)
   1098e:	6892      	ldr	r2, [r2, #8]
   10990:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10994:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   10996:	3101      	adds	r1, #1
   10998:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1099a:	4a33      	ldr	r2, [pc, #204]	; (10a68 <z_impl_k_mutex_lock+0x100>)
   1099c:	6892      	ldr	r2, [r2, #8]
   1099e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   109a0:	f383 8811 	msr	BASEPRI, r3
   109a4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   109a8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   109aa:	b002      	add	sp, #8
   109ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109b0:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   109b2:	6880      	ldr	r0, [r0, #8]
   109b4:	4a2c      	ldr	r2, [pc, #176]	; (10a68 <z_impl_k_mutex_lock+0x100>)
   109b6:	6892      	ldr	r2, [r2, #8]
   109b8:	4290      	cmp	r0, r2
   109ba:	d0e5      	beq.n	10988 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   109bc:	ea56 0107 	orrs.w	r1, r6, r7
   109c0:	d038      	beq.n	10a34 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   109c2:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   109c6:	4641      	mov	r1, r8
   109c8:	f992 000e 	ldrsb.w	r0, [r2, #14]
   109cc:	f004 facf 	bl	14f6e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   109d0:	4580      	cmp	r8, r0
   109d2:	dc36      	bgt.n	10a42 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   109d4:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   109d8:	9700      	str	r7, [sp, #0]
   109da:	9601      	str	r6, [sp, #4]
   109dc:	4622      	mov	r2, r4
   109de:	4629      	mov	r1, r5
   109e0:	4822      	ldr	r0, [pc, #136]	; (10a6c <z_impl_k_mutex_lock+0x104>)
   109e2:	f000 fbf9 	bl	111d8 <z_pend_curr>
	if (got_mutex == 0) {
   109e6:	2800      	cmp	r0, #0
   109e8:	d0df      	beq.n	109aa <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   109ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   109ee:	f3ef 8511 	mrs	r5, BASEPRI
   109f2:	f383 8812 	msr	BASEPRI_MAX, r3
   109f6:	f3bf 8f6f 	isb	sy
   109fa:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   109fc:	68a3      	ldr	r3, [r4, #8]
   109fe:	b343      	cbz	r3, 10a52 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10a00:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a02:	429c      	cmp	r4, r3
   10a04:	d023      	beq.n	10a4e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10a06:	b313      	cbz	r3, 10a4e <z_impl_k_mutex_lock+0xe6>
   10a08:	6921      	ldr	r1, [r4, #16]
   10a0a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   10a0e:	f004 faae 	bl	14f6e <new_prio_for_inheritance>
   10a12:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   10a14:	4620      	mov	r0, r4
   10a16:	f004 fab5 	bl	14f84 <adjust_owner_prio>
   10a1a:	b9e8      	cbnz	r0, 10a58 <z_impl_k_mutex_lock+0xf0>
   10a1c:	f1b8 0f00 	cmp.w	r8, #0
   10a20:	d11a      	bne.n	10a58 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   10a22:	f386 8811 	msr	BASEPRI, r6
   10a26:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   10a2a:	f06f 000a 	mvn.w	r0, #10
   10a2e:	e7bc      	b.n	109aa <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   10a30:	6922      	ldr	r2, [r4, #16]
   10a32:	e7af      	b.n	10994 <z_impl_k_mutex_lock+0x2c>
   10a34:	f385 8811 	msr	BASEPRI, r5
   10a38:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   10a3c:	f06f 000f 	mvn.w	r0, #15
   10a40:	e7b3      	b.n	109aa <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   10a42:	4601      	mov	r1, r0
   10a44:	4620      	mov	r0, r4
   10a46:	f004 fa9d 	bl	14f84 <adjust_owner_prio>
   10a4a:	4680      	mov	r8, r0
   10a4c:	e7c4      	b.n	109d8 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10a4e:	6921      	ldr	r1, [r4, #16]
   10a50:	e7e0      	b.n	10a14 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   10a52:	f1b8 0f00 	cmp.w	r8, #0
   10a56:	d0e4      	beq.n	10a22 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   10a58:	4629      	mov	r1, r5
   10a5a:	4804      	ldr	r0, [pc, #16]	; (10a6c <z_impl_k_mutex_lock+0x104>)
   10a5c:	f000 fa6e 	bl	10f3c <z_reschedule>
	return -EAGAIN;
   10a60:	f06f 000a 	mvn.w	r0, #10
   10a64:	e7a1      	b.n	109aa <z_impl_k_mutex_lock+0x42>
   10a66:	bf00      	nop
   10a68:	20002174 	.word	0x20002174
   10a6c:	2000219c 	.word	0x2000219c

00010a70 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10a70:	6883      	ldr	r3, [r0, #8]
   10a72:	b38b      	cbz	r3, 10ad8 <z_impl_k_mutex_unlock+0x68>
{
   10a74:	b570      	push	{r4, r5, r6, lr}
   10a76:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10a78:	4a1a      	ldr	r2, [pc, #104]	; (10ae4 <z_impl_k_mutex_unlock+0x74>)
   10a7a:	6892      	ldr	r2, [r2, #8]
   10a7c:	4293      	cmp	r3, r2
   10a7e:	d12e      	bne.n	10ade <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10a80:	68c3      	ldr	r3, [r0, #12]
   10a82:	2b01      	cmp	r3, #1
   10a84:	d903      	bls.n	10a8e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   10a86:	3b01      	subs	r3, #1
   10a88:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   10a8a:	2000      	movs	r0, #0
}
   10a8c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   10a8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a92:	f3ef 8511 	mrs	r5, BASEPRI
   10a96:	f383 8812 	msr	BASEPRI_MAX, r3
   10a9a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10a9e:	6901      	ldr	r1, [r0, #16]
   10aa0:	f004 fa70 	bl	14f84 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10aa4:	4620      	mov	r0, r4
   10aa6:	f004 fcf9 	bl	1549c <z_unpend_first_thread>
	mutex->owner = new_owner;
   10aaa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   10aac:	b168      	cbz	r0, 10aca <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   10aae:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10ab2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10ab4:	2400      	movs	r4, #0
   10ab6:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   10aba:	f004 fc39 	bl	15330 <z_ready_thread>
		z_reschedule(&lock, key);
   10abe:	4629      	mov	r1, r5
   10ac0:	4809      	ldr	r0, [pc, #36]	; (10ae8 <z_impl_k_mutex_unlock+0x78>)
   10ac2:	f000 fa3b 	bl	10f3c <z_reschedule>
	return 0;
   10ac6:	4620      	mov	r0, r4
   10ac8:	e7e0      	b.n	10a8c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   10aca:	2000      	movs	r0, #0
   10acc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10ace:	f385 8811 	msr	BASEPRI, r5
   10ad2:	f3bf 8f6f 	isb	sy
   10ad6:	e7d9      	b.n	10a8c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   10ad8:	f06f 0015 	mvn.w	r0, #21
}
   10adc:	4770      	bx	lr
		return -EPERM;
   10ade:	f04f 30ff 	mov.w	r0, #4294967295
   10ae2:	e7d3      	b.n	10a8c <z_impl_k_mutex_unlock+0x1c>
   10ae4:	20002174 	.word	0x20002174
   10ae8:	2000219c 	.word	0x2000219c

00010aec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   10aec:	b510      	push	{r4, lr}
   10aee:	b082      	sub	sp, #8
   10af0:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   10af2:	4686      	mov	lr, r0
	__asm__ volatile(
   10af4:	f04f 0040 	mov.w	r0, #64	; 0x40
   10af8:	f3ef 8111 	mrs	r1, BASEPRI
   10afc:	f380 8812 	msr	BASEPRI_MAX, r0
   10b00:	f3bf 8f6f 	isb	sy
   10b04:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   10b06:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   10b0a:	b1a0      	cbz	r0, 10b36 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   10b0c:	6803      	ldr	r3, [r0, #0]
   10b0e:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   10b12:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   10b16:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   10b1a:	4290      	cmp	r0, r2
   10b1c:	d008      	beq.n	10b30 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   10b1e:	2101      	movs	r1, #1
   10b20:	f004 fabf 	bl	150a2 <z_queue_node_peek>
	__asm__ volatile(
   10b24:	f384 8811 	msr	BASEPRI, r4
   10b28:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   10b2c:	b002      	add	sp, #8
   10b2e:	bd10      	pop	{r4, pc}
	list->tail = node;
   10b30:	f8cc 3004 	str.w	r3, [ip, #4]
}
   10b34:	e7f3      	b.n	10b1e <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10b36:	ea53 0002 	orrs.w	r0, r3, r2
   10b3a:	d00a      	beq.n	10b52 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   10b3c:	9200      	str	r2, [sp, #0]
   10b3e:	9301      	str	r3, [sp, #4]
   10b40:	4672      	mov	r2, lr
   10b42:	4670      	mov	r0, lr
   10b44:	f000 fb48 	bl	111d8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   10b48:	b948      	cbnz	r0, 10b5e <z_impl_k_queue_get+0x72>
   10b4a:	4b06      	ldr	r3, [pc, #24]	; (10b64 <z_impl_k_queue_get+0x78>)
   10b4c:	689b      	ldr	r3, [r3, #8]
   10b4e:	6958      	ldr	r0, [r3, #20]
   10b50:	e7ec      	b.n	10b2c <z_impl_k_queue_get+0x40>
   10b52:	f381 8811 	msr	BASEPRI, r1
   10b56:	f3bf 8f6f 	isb	sy
		return NULL;
   10b5a:	2000      	movs	r0, #0
   10b5c:	e7e6      	b.n	10b2c <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   10b5e:	2000      	movs	r0, #0
   10b60:	e7e4      	b.n	10b2c <z_impl_k_queue_get+0x40>
   10b62:	bf00      	nop
   10b64:	20002174 	.word	0x20002174

00010b68 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10b68:	b538      	push	{r3, r4, r5, lr}
   10b6a:	4604      	mov	r4, r0
	__asm__ volatile(
   10b6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b70:	f3ef 8511 	mrs	r5, BASEPRI
   10b74:	f383 8812 	msr	BASEPRI_MAX, r3
   10b78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10b7c:	f004 fc8e 	bl	1549c <z_unpend_first_thread>

	if (thread != NULL) {
   10b80:	b148      	cbz	r0, 10b96 <z_impl_k_sem_give+0x2e>
   10b82:	2200      	movs	r2, #0
   10b84:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10b88:	f004 fbd2 	bl	15330 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10b8c:	4629      	mov	r1, r5
   10b8e:	4809      	ldr	r0, [pc, #36]	; (10bb4 <z_impl_k_sem_give+0x4c>)
   10b90:	f000 f9d4 	bl	10f3c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10b94:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10b96:	68a3      	ldr	r3, [r4, #8]
   10b98:	68e2      	ldr	r2, [r4, #12]
   10b9a:	4293      	cmp	r3, r2
   10b9c:	d008      	beq.n	10bb0 <z_impl_k_sem_give+0x48>
   10b9e:	2201      	movs	r2, #1
   10ba0:	4413      	add	r3, r2
   10ba2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10ba4:	2102      	movs	r1, #2
   10ba6:	f104 0010 	add.w	r0, r4, #16
   10baa:	f004 ff22 	bl	159f2 <z_handle_obj_poll_events>
}
   10bae:	e7ed      	b.n	10b8c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10bb0:	2200      	movs	r2, #0
   10bb2:	e7f5      	b.n	10ba0 <z_impl_k_sem_give+0x38>
   10bb4:	2000219c 	.word	0x2000219c

00010bb8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10bb8:	b510      	push	{r4, lr}
   10bba:	b082      	sub	sp, #8
   10bbc:	f04f 0440 	mov.w	r4, #64	; 0x40
   10bc0:	f3ef 8111 	mrs	r1, BASEPRI
   10bc4:	f384 8812 	msr	BASEPRI_MAX, r4
   10bc8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10bcc:	6884      	ldr	r4, [r0, #8]
   10bce:	b144      	cbz	r4, 10be2 <z_impl_k_sem_take+0x2a>
		sem->count--;
   10bd0:	3c01      	subs	r4, #1
   10bd2:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   10bd4:	f381 8811 	msr	BASEPRI, r1
   10bd8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10bdc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10bde:	b002      	add	sp, #8
   10be0:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10be2:	ea53 0402 	orrs.w	r4, r3, r2
   10be6:	d006      	beq.n	10bf6 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10be8:	9200      	str	r2, [sp, #0]
   10bea:	9301      	str	r3, [sp, #4]
   10bec:	4602      	mov	r2, r0
   10bee:	4805      	ldr	r0, [pc, #20]	; (10c04 <z_impl_k_sem_take+0x4c>)
   10bf0:	f000 faf2 	bl	111d8 <z_pend_curr>
	return ret;
   10bf4:	e7f3      	b.n	10bde <z_impl_k_sem_take+0x26>
   10bf6:	f381 8811 	msr	BASEPRI, r1
   10bfa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10bfe:	f06f 000f 	mvn.w	r0, #15
   10c02:	e7ec      	b.n	10bde <z_impl_k_sem_take+0x26>
   10c04:	2000219c 	.word	0x2000219c

00010c08 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   10c08:	b370      	cbz	r0, 10c68 <queue_submit_locked+0x60>
{
   10c0a:	b538      	push	{r3, r4, r5, lr}
   10c0c:	460d      	mov	r5, r1
   10c0e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10c10:	4b1b      	ldr	r3, [pc, #108]	; (10c80 <queue_submit_locked+0x78>)
   10c12:	689b      	ldr	r3, [r3, #8]
   10c14:	4283      	cmp	r3, r0
   10c16:	d01b      	beq.n	10c50 <queue_submit_locked+0x48>
   10c18:	2300      	movs	r3, #0
   10c1a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   10c1c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   10c20:	f3c3 0180 	ubfx	r1, r3, #2, #1
   10c24:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10c28:	f013 0f01 	tst.w	r3, #1
   10c2c:	d01f      	beq.n	10c6e <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   10c2e:	b101      	cbz	r1, 10c32 <queue_submit_locked+0x2a>
   10c30:	b302      	cbz	r2, 10c74 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   10c32:	b100      	cbz	r0, 10c36 <queue_submit_locked+0x2e>
   10c34:	b309      	cbz	r1, 10c7a <queue_submit_locked+0x72>
	parent->next = child;
   10c36:	2300      	movs	r3, #0
   10c38:	602b      	str	r3, [r5, #0]
	return list->tail;
   10c3a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   10c3e:	b173      	cbz	r3, 10c5e <queue_submit_locked+0x56>
	parent->next = child;
   10c40:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10c42:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   10c46:	4620      	mov	r0, r4
   10c48:	f004 fa83 	bl	15152 <notify_queue_locked>
		ret = 1;
   10c4c:	2001      	movs	r0, #1
	}

	return ret;
}
   10c4e:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10c50:	f004 f950 	bl	14ef4 <k_is_in_isr>
   10c54:	b908      	cbnz	r0, 10c5a <queue_submit_locked+0x52>
   10c56:	2301      	movs	r3, #1
   10c58:	e7df      	b.n	10c1a <queue_submit_locked+0x12>
   10c5a:	2300      	movs	r3, #0
   10c5c:	e7dd      	b.n	10c1a <queue_submit_locked+0x12>
   10c5e:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   10c62:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   10c66:	e7ee      	b.n	10c46 <queue_submit_locked+0x3e>
		return -EINVAL;
   10c68:	f06f 0015 	mvn.w	r0, #21
}
   10c6c:	4770      	bx	lr
		ret = -ENODEV;
   10c6e:	f06f 0012 	mvn.w	r0, #18
   10c72:	e7ec      	b.n	10c4e <queue_submit_locked+0x46>
		ret = -EBUSY;
   10c74:	f06f 000f 	mvn.w	r0, #15
   10c78:	e7e9      	b.n	10c4e <queue_submit_locked+0x46>
		ret = -EBUSY;
   10c7a:	f06f 000f 	mvn.w	r0, #15
   10c7e:	e7e6      	b.n	10c4e <queue_submit_locked+0x46>
   10c80:	20002174 	.word	0x20002174

00010c84 <finalize_cancel_locked>:
{
   10c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c86:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   10c88:	68c3      	ldr	r3, [r0, #12]
   10c8a:	f023 0302 	bic.w	r3, r3, #2
   10c8e:	60c3      	str	r3, [r0, #12]
	return list->head;
   10c90:	4b13      	ldr	r3, [pc, #76]	; (10ce0 <finalize_cancel_locked+0x5c>)
   10c92:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10c94:	b185      	cbz	r5, 10cb8 <finalize_cancel_locked+0x34>
	return node->next;
   10c96:	682c      	ldr	r4, [r5, #0]
   10c98:	b104      	cbz	r4, 10c9c <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10c9a:	b10d      	cbz	r5, 10ca0 <finalize_cancel_locked+0x1c>
   10c9c:	2700      	movs	r7, #0
   10c9e:	e010      	b.n	10cc2 <finalize_cancel_locked+0x3e>
   10ca0:	462c      	mov	r4, r5
   10ca2:	e7fb      	b.n	10c9c <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   10ca4:	462a      	mov	r2, r5
   10ca6:	4639      	mov	r1, r7
   10ca8:	480d      	ldr	r0, [pc, #52]	; (10ce0 <finalize_cancel_locked+0x5c>)
   10caa:	f004 fa3f 	bl	1512c <sys_slist_remove>
			k_sem_give(&wc->sem);
   10cae:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   10cb2:	f7ff ff59 	bl	10b68 <z_impl_k_sem_give>
}
   10cb6:	e009      	b.n	10ccc <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10cb8:	462c      	mov	r4, r5
   10cba:	e7ef      	b.n	10c9c <finalize_cancel_locked+0x18>
   10cbc:	4623      	mov	r3, r4
   10cbe:	4625      	mov	r5, r4
   10cc0:	461c      	mov	r4, r3
   10cc2:	b165      	cbz	r5, 10cde <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   10cc4:	686b      	ldr	r3, [r5, #4]
   10cc6:	42b3      	cmp	r3, r6
   10cc8:	d0ec      	beq.n	10ca4 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   10cca:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10ccc:	2c00      	cmp	r4, #0
   10cce:	d0f5      	beq.n	10cbc <finalize_cancel_locked+0x38>
	return node->next;
   10cd0:	6823      	ldr	r3, [r4, #0]
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	d0f3      	beq.n	10cbe <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10cd6:	2c00      	cmp	r4, #0
   10cd8:	d1f1      	bne.n	10cbe <finalize_cancel_locked+0x3a>
   10cda:	4623      	mov	r3, r4
   10cdc:	e7ef      	b.n	10cbe <finalize_cancel_locked+0x3a>
}
   10cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ce0:	2000219c 	.word	0x2000219c

00010ce4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   10ce4:	b570      	push	{r4, r5, r6, lr}
   10ce6:	b084      	sub	sp, #16
   10ce8:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   10cea:	e016      	b.n	10d1a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   10cec:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   10cf0:	f023 0204 	bic.w	r2, r3, #4
   10cf4:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   10cf8:	f013 0f04 	tst.w	r3, #4
   10cfc:	d15a      	bne.n	10db4 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   10cfe:	2300      	movs	r3, #0
   10d00:	9302      	str	r3, [sp, #8]
   10d02:	f04f 32ff 	mov.w	r2, #4294967295
   10d06:	f04f 33ff 	mov.w	r3, #4294967295
   10d0a:	e9cd 2300 	strd	r2, r3, [sp]
   10d0e:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   10d12:	4631      	mov	r1, r6
   10d14:	482e      	ldr	r0, [pc, #184]	; (10dd0 <work_queue_main+0xec>)
   10d16:	f000 fc67 	bl	115e8 <z_sched_wait>
	__asm__ volatile(
   10d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d1e:	f3ef 8611 	mrs	r6, BASEPRI
   10d22:	f383 8812 	msr	BASEPRI_MAX, r3
   10d26:	f3bf 8f6f 	isb	sy
   10d2a:	4632      	mov	r2, r6
	return list->head;
   10d2c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   10d30:	2c00      	cmp	r4, #0
   10d32:	d0db      	beq.n	10cec <work_queue_main+0x8>
	return node->next;
   10d34:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   10d36:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   10d3a:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10d3e:	428c      	cmp	r4, r1
   10d40:	d035      	beq.n	10dae <work_queue_main+0xca>
	*flagp |= BIT(bit);
   10d42:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   10d46:	f043 0302 	orr.w	r3, r3, #2
   10d4a:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   10d4e:	68e3      	ldr	r3, [r4, #12]
   10d50:	f043 0101 	orr.w	r1, r3, #1
   10d54:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   10d56:	f023 0304 	bic.w	r3, r3, #4
   10d5a:	f043 0301 	orr.w	r3, r3, #1
   10d5e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   10d60:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   10d62:	f382 8811 	msr	BASEPRI, r2
   10d66:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   10d6a:	4620      	mov	r0, r4
   10d6c:	4798      	blx	r3
	__asm__ volatile(
   10d6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d72:	f3ef 8611 	mrs	r6, BASEPRI
   10d76:	f383 8812 	msr	BASEPRI_MAX, r3
   10d7a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   10d7e:	68e3      	ldr	r3, [r4, #12]
   10d80:	f023 0301 	bic.w	r3, r3, #1
   10d84:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10d86:	f013 0f02 	tst.w	r3, #2
   10d8a:	d11d      	bne.n	10dc8 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   10d8c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   10d90:	f023 0302 	bic.w	r3, r3, #2
   10d94:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   10d98:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   10d9c:	f386 8811 	msr	BASEPRI, r6
   10da0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   10da4:	2b00      	cmp	r3, #0
   10da6:	d1b8      	bne.n	10d1a <work_queue_main+0x36>
	z_impl_k_yield();
   10da8:	f000 fb24 	bl	113f4 <z_impl_k_yield>
}
   10dac:	e7b5      	b.n	10d1a <work_queue_main+0x36>
	list->tail = node;
   10dae:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   10db2:	e7c6      	b.n	10d42 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   10db4:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   10db8:	2200      	movs	r2, #0
   10dba:	2101      	movs	r1, #1
   10dbc:	4620      	mov	r0, r4
   10dbe:	f004 fba3 	bl	15508 <z_sched_wake>
   10dc2:	2800      	cmp	r0, #0
   10dc4:	d1f8      	bne.n	10db8 <work_queue_main+0xd4>
   10dc6:	e79a      	b.n	10cfe <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   10dc8:	4620      	mov	r0, r4
   10dca:	f7ff ff5b 	bl	10c84 <finalize_cancel_locked>
   10dce:	e7dd      	b.n	10d8c <work_queue_main+0xa8>
   10dd0:	200021a4 	.word	0x200021a4

00010dd4 <k_work_submit>:
{
   10dd4:	b508      	push	{r3, lr}
   10dd6:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   10dd8:	4801      	ldr	r0, [pc, #4]	; (10de0 <k_work_submit+0xc>)
   10dda:	f004 fa1c 	bl	15216 <k_work_submit_to_queue>
}
   10dde:	bd08      	pop	{r3, pc}
   10de0:	200019b0 	.word	0x200019b0

00010de4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   10de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10de6:	b089      	sub	sp, #36	; 0x24
   10de8:	4604      	mov	r4, r0
   10dea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   10dec:	2000      	movs	r0, #0
   10dee:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   10df2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   10df6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   10dfa:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   10dfe:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   10e02:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   10e06:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   10e0a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   10e0e:	b1fd      	cbz	r5, 10e50 <k_work_queue_start+0x6c>
   10e10:	7928      	ldrb	r0, [r5, #4]
   10e12:	b9f8      	cbnz	r0, 10e54 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10e14:	2001      	movs	r0, #1
	*flagp = flags;
   10e16:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10e1a:	f04f 36ff 	mov.w	r6, #4294967295
   10e1e:	f04f 37ff 	mov.w	r7, #4294967295
   10e22:	e9cd 6706 	strd	r6, r7, [sp, #24]
   10e26:	2000      	movs	r0, #0
   10e28:	9004      	str	r0, [sp, #16]
   10e2a:	9303      	str	r3, [sp, #12]
   10e2c:	9002      	str	r0, [sp, #8]
   10e2e:	9001      	str	r0, [sp, #4]
   10e30:	9400      	str	r4, [sp, #0]
   10e32:	4b0a      	ldr	r3, [pc, #40]	; (10e5c <k_work_queue_start+0x78>)
   10e34:	4620      	mov	r0, r4
   10e36:	f004 f872 	bl	14f1e <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   10e3a:	b125      	cbz	r5, 10e46 <k_work_queue_start+0x62>
   10e3c:	6829      	ldr	r1, [r5, #0]
   10e3e:	b111      	cbz	r1, 10e46 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   10e40:	4620      	mov	r0, r4
   10e42:	f7ff fca5 	bl	10790 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   10e46:	4620      	mov	r0, r4
   10e48:	f004 f85a 	bl	14f00 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   10e4c:	b009      	add	sp, #36	; 0x24
   10e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10e50:	2001      	movs	r0, #1
   10e52:	e7e0      	b.n	10e16 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   10e54:	f240 1001 	movw	r0, #257	; 0x101
   10e58:	e7dd      	b.n	10e16 <k_work_queue_start+0x32>
   10e5a:	bf00      	nop
   10e5c:	00010ce5 	.word	0x00010ce5

00010e60 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   10e60:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   10e62:	2b7f      	cmp	r3, #127	; 0x7f
   10e64:	d811      	bhi.n	10e8a <sliceable+0x2a>
	int ret = slice_ticks;
   10e66:	4b0e      	ldr	r3, [pc, #56]	; (10ea0 <sliceable+0x40>)
   10e68:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   10e6a:	b17b      	cbz	r3, 10e8c <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10e6c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10e70:	4b0c      	ldr	r3, [pc, #48]	; (10ea4 <sliceable+0x44>)
   10e72:	681b      	ldr	r3, [r3, #0]
   10e74:	429a      	cmp	r2, r3
   10e76:	db0c      	blt.n	10e92 <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   10e78:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   10e7a:	f013 0f1f 	tst.w	r3, #31
   10e7e:	d10a      	bne.n	10e96 <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   10e80:	4b09      	ldr	r3, [pc, #36]	; (10ea8 <sliceable+0x48>)
   10e82:	4298      	cmp	r0, r3
   10e84:	d009      	beq.n	10e9a <sliceable+0x3a>
   10e86:	2301      	movs	r3, #1
   10e88:	e000      	b.n	10e8c <sliceable+0x2c>
   10e8a:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   10e8c:	f003 0001 	and.w	r0, r3, #1
   10e90:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   10e92:	2300      	movs	r3, #0
   10e94:	e7fa      	b.n	10e8c <sliceable+0x2c>
   10e96:	2300      	movs	r3, #0
   10e98:	e7f8      	b.n	10e8c <sliceable+0x2c>
   10e9a:	2300      	movs	r3, #0
   10e9c:	e7f6      	b.n	10e8c <sliceable+0x2c>
   10e9e:	bf00      	nop
   10ea0:	200021b0 	.word	0x200021b0
   10ea4:	200021ac 	.word	0x200021ac
   10ea8:	20001820 	.word	0x20001820

00010eac <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   10eac:	4b04      	ldr	r3, [pc, #16]	; (10ec0 <slice_timeout+0x14>)
   10eae:	1ac0      	subs	r0, r0, r3
   10eb0:	10c0      	asrs	r0, r0, #3
   10eb2:	4b04      	ldr	r3, [pc, #16]	; (10ec4 <slice_timeout+0x18>)
   10eb4:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   10eb8:	4b03      	ldr	r3, [pc, #12]	; (10ec8 <slice_timeout+0x1c>)
   10eba:	2201      	movs	r2, #1
   10ebc:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   10ebe:	4770      	bx	lr
   10ec0:	20001990 	.word	0x20001990
   10ec4:	aaaaaaab 	.word	0xaaaaaaab
   10ec8:	200021a8 	.word	0x200021a8

00010ecc <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
   10ed0:	bf08      	it	eq
   10ed2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10ed6:	d100      	bne.n	10eda <add_thread_timeout+0xe>
   10ed8:	4770      	bx	lr
{
   10eda:	b508      	push	{r3, lr}
   10edc:	4902      	ldr	r1, [pc, #8]	; (10ee8 <add_thread_timeout+0x1c>)
   10ede:	3018      	adds	r0, #24
   10ee0:	f000 fbd2 	bl	11688 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   10ee4:	bd08      	pop	{r3, pc}
   10ee6:	bf00      	nop
   10ee8:	000153bd 	.word	0x000153bd

00010eec <z_reset_time_slice>:
{
   10eec:	b570      	push	{r4, r5, r6, lr}
   10eee:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   10ef0:	4b0d      	ldr	r3, [pc, #52]	; (10f28 <z_reset_time_slice+0x3c>)
   10ef2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   10ef4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10ef8:	4c0c      	ldr	r4, [pc, #48]	; (10f2c <z_reset_time_slice+0x40>)
   10efa:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   10efe:	4620      	mov	r0, r4
   10f00:	f004 fb64 	bl	155cc <z_abort_timeout>
	slice_expired[cpu] = false;
   10f04:	4b0a      	ldr	r3, [pc, #40]	; (10f30 <z_reset_time_slice+0x44>)
   10f06:	2200      	movs	r2, #0
   10f08:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   10f0a:	4628      	mov	r0, r5
   10f0c:	f7ff ffa8 	bl	10e60 <sliceable>
   10f10:	b900      	cbnz	r0, 10f14 <z_reset_time_slice+0x28>
}
   10f12:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   10f14:	4b07      	ldr	r3, [pc, #28]	; (10f34 <z_reset_time_slice+0x48>)
   10f16:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   10f18:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   10f1a:	17d3      	asrs	r3, r2, #31
   10f1c:	4906      	ldr	r1, [pc, #24]	; (10f38 <z_reset_time_slice+0x4c>)
   10f1e:	4620      	mov	r0, r4
   10f20:	f000 fbb2 	bl	11688 <z_add_timeout>
}
   10f24:	e7f5      	b.n	10f12 <z_reset_time_slice+0x26>
   10f26:	bf00      	nop
   10f28:	20002174 	.word	0x20002174
   10f2c:	20001990 	.word	0x20001990
   10f30:	200021a8 	.word	0x200021a8
   10f34:	200021b0 	.word	0x200021b0
   10f38:	00010ead 	.word	0x00010ead

00010f3c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   10f3c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   10f3e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10f40:	b959      	cbnz	r1, 10f5a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10f42:	f3ef 8205 	mrs	r2, IPSR
   10f46:	b942      	cbnz	r2, 10f5a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   10f48:	4a06      	ldr	r2, [pc, #24]	; (10f64 <z_reschedule+0x28>)
   10f4a:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
   10f4c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   10f4e:	4290      	cmp	r0, r2
   10f50:	d003      	beq.n	10f5a <z_reschedule+0x1e>
	ret = arch_swap(key);
   10f52:	4608      	mov	r0, r1
   10f54:	f7fb f8ae 	bl	c0b4 <arch_swap>
		z_swap(lock, key);
   10f58:	e003      	b.n	10f62 <z_reschedule+0x26>
   10f5a:	f383 8811 	msr	BASEPRI, r3
   10f5e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   10f62:	bd08      	pop	{r3, pc}
   10f64:	20002174 	.word	0x20002174

00010f68 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   10f68:	2300      	movs	r3, #0
	__asm__ volatile(
   10f6a:	f04f 0240 	mov.w	r2, #64	; 0x40
   10f6e:	f3ef 8111 	mrs	r1, BASEPRI
   10f72:	f382 8812 	msr	BASEPRI_MAX, r2
   10f76:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   10f7a:	e009      	b.n	10f90 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   10f7c:	4b06      	ldr	r3, [pc, #24]	; (10f98 <k_sched_lock+0x30>)
   10f7e:	689a      	ldr	r2, [r3, #8]
   10f80:	7bd3      	ldrb	r3, [r2, #15]
   10f82:	3b01      	subs	r3, #1
   10f84:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10f86:	f381 8811 	msr	BASEPRI, r1
   10f8a:	f3bf 8f6f 	isb	sy
   10f8e:	2301      	movs	r3, #1
   10f90:	2b00      	cmp	r3, #0
   10f92:	d0f3      	beq.n	10f7c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   10f94:	4770      	bx	lr
   10f96:	bf00      	nop
   10f98:	20002174 	.word	0x20002174

00010f9c <update_cache>:
{
   10f9c:	b538      	push	{r3, r4, r5, lr}
   10f9e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   10fa0:	4810      	ldr	r0, [pc, #64]	; (10fe4 <update_cache+0x48>)
   10fa2:	f004 f9be 	bl	15322 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10fa6:	4605      	mov	r5, r0
   10fa8:	b170      	cbz	r0, 10fc8 <update_cache+0x2c>
	if (preempt_ok != 0) {
   10faa:	b984      	cbnz	r4, 10fce <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   10fac:	4b0e      	ldr	r3, [pc, #56]	; (10fe8 <update_cache+0x4c>)
   10fae:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   10fb0:	7b5a      	ldrb	r2, [r3, #13]
   10fb2:	f012 0f1f 	tst.w	r2, #31
   10fb6:	d10a      	bne.n	10fce <update_cache+0x32>
	return node->next != NULL;
   10fb8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10fba:	b942      	cbnz	r2, 10fce <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   10fbc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   10fbe:	2a7f      	cmp	r2, #127	; 0x7f
   10fc0:	d905      	bls.n	10fce <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   10fc2:	4a09      	ldr	r2, [pc, #36]	; (10fe8 <update_cache+0x4c>)
   10fc4:	6193      	str	r3, [r2, #24]
   10fc6:	e00b      	b.n	10fe0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10fc8:	4b07      	ldr	r3, [pc, #28]	; (10fe8 <update_cache+0x4c>)
   10fca:	68dd      	ldr	r5, [r3, #12]
   10fcc:	e7ed      	b.n	10faa <update_cache+0xe>
		if (thread != _current) {
   10fce:	4b06      	ldr	r3, [pc, #24]	; (10fe8 <update_cache+0x4c>)
   10fd0:	689b      	ldr	r3, [r3, #8]
   10fd2:	42ab      	cmp	r3, r5
   10fd4:	d002      	beq.n	10fdc <update_cache+0x40>
			z_reset_time_slice(thread);
   10fd6:	4628      	mov	r0, r5
   10fd8:	f7ff ff88 	bl	10eec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   10fdc:	4b02      	ldr	r3, [pc, #8]	; (10fe8 <update_cache+0x4c>)
   10fde:	619d      	str	r5, [r3, #24]
}
   10fe0:	bd38      	pop	{r3, r4, r5, pc}
   10fe2:	bf00      	nop
   10fe4:	20002190 	.word	0x20002190
   10fe8:	20002174 	.word	0x20002174

00010fec <move_thread_to_end_of_prio_q>:
{
   10fec:	b538      	push	{r3, r4, r5, lr}
   10fee:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   10ff0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   10ff2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10ff6:	2b00      	cmp	r3, #0
   10ff8:	db0a      	blt.n	11010 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   10ffa:	7b6b      	ldrb	r3, [r5, #13]
   10ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11000:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11002:	4b1b      	ldr	r3, [pc, #108]	; (11070 <move_thread_to_end_of_prio_q+0x84>)
   11004:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11008:	429c      	cmp	r4, r3
   1100a:	d110      	bne.n	1102e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1100c:	2400      	movs	r4, #0
   1100e:	e00e      	b.n	1102e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11014:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11016:	4601      	mov	r1, r0
   11018:	4816      	ldr	r0, [pc, #88]	; (11074 <move_thread_to_end_of_prio_q+0x88>)
   1101a:	f004 f94e 	bl	152ba <z_priq_dumb_remove>
}
   1101e:	e7ec      	b.n	10ffa <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   11020:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   11022:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11024:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11026:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11028:	6065      	str	r5, [r4, #4]
}
   1102a:	e017      	b.n	1105c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1102c:	2400      	movs	r4, #0
   1102e:	b16c      	cbz	r4, 1104c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11030:	4621      	mov	r1, r4
   11032:	4628      	mov	r0, r5
   11034:	f004 f903 	bl	1523e <z_sched_prio_cmp>
   11038:	2800      	cmp	r0, #0
   1103a:	dcf1      	bgt.n	11020 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1103c:	2c00      	cmp	r4, #0
   1103e:	d0f6      	beq.n	1102e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   11040:	4b0b      	ldr	r3, [pc, #44]	; (11070 <move_thread_to_end_of_prio_q+0x84>)
   11042:	6a1b      	ldr	r3, [r3, #32]
   11044:	429c      	cmp	r4, r3
   11046:	d0f1      	beq.n	1102c <move_thread_to_end_of_prio_q+0x40>
   11048:	6824      	ldr	r4, [r4, #0]
   1104a:	e7f0      	b.n	1102e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   1104c:	4b08      	ldr	r3, [pc, #32]	; (11070 <move_thread_to_end_of_prio_q+0x84>)
   1104e:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   11050:	f103 011c 	add.w	r1, r3, #28
   11054:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11056:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11058:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1105a:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
   1105c:	4b04      	ldr	r3, [pc, #16]	; (11070 <move_thread_to_end_of_prio_q+0x84>)
   1105e:	6898      	ldr	r0, [r3, #8]
   11060:	42a8      	cmp	r0, r5
   11062:	bf14      	ite	ne
   11064:	2000      	movne	r0, #0
   11066:	2001      	moveq	r0, #1
   11068:	f7ff ff98 	bl	10f9c <update_cache>
}
   1106c:	bd38      	pop	{r3, r4, r5, pc}
   1106e:	bf00      	nop
   11070:	20002174 	.word	0x20002174
   11074:	20002190 	.word	0x20002190

00011078 <z_time_slice>:
{
   11078:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1107a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1107e:	f3ef 8311 	mrs	r3, BASEPRI
   11082:	f382 8812 	msr	BASEPRI_MAX, r2
   11086:	f3bf 8f6f 	isb	sy
   1108a:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   1108c:	4b14      	ldr	r3, [pc, #80]	; (110e0 <z_time_slice+0x68>)
   1108e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   11090:	4b14      	ldr	r3, [pc, #80]	; (110e4 <z_time_slice+0x6c>)
   11092:	681b      	ldr	r3, [r3, #0]
   11094:	42a3      	cmp	r3, r4
   11096:	d017      	beq.n	110c8 <z_time_slice+0x50>
	pending_current = NULL;
   11098:	4b12      	ldr	r3, [pc, #72]	; (110e4 <z_time_slice+0x6c>)
   1109a:	2200      	movs	r2, #0
   1109c:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1109e:	4b10      	ldr	r3, [pc, #64]	; (110e0 <z_time_slice+0x68>)
   110a0:	7c1b      	ldrb	r3, [r3, #16]
   110a2:	4a11      	ldr	r2, [pc, #68]	; (110e8 <z_time_slice+0x70>)
   110a4:	5cd3      	ldrb	r3, [r2, r3]
   110a6:	b153      	cbz	r3, 110be <z_time_slice+0x46>
   110a8:	4620      	mov	r0, r4
   110aa:	f7ff fed9 	bl	10e60 <sliceable>
   110ae:	b130      	cbz	r0, 110be <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   110b0:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   110b2:	f013 0f1f 	tst.w	r3, #31
   110b6:	d00f      	beq.n	110d8 <z_time_slice+0x60>
		z_reset_time_slice(curr);
   110b8:	4620      	mov	r0, r4
   110ba:	f7ff ff17 	bl	10eec <z_reset_time_slice>
	__asm__ volatile(
   110be:	f385 8811 	msr	BASEPRI, r5
   110c2:	f3bf 8f6f 	isb	sy
}
   110c6:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   110c8:	4620      	mov	r0, r4
   110ca:	f7ff ff0f 	bl	10eec <z_reset_time_slice>
   110ce:	f385 8811 	msr	BASEPRI, r5
   110d2:	f3bf 8f6f 	isb	sy
		return;
   110d6:	e7f6      	b.n	110c6 <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   110d8:	4620      	mov	r0, r4
   110da:	f7ff ff87 	bl	10fec <move_thread_to_end_of_prio_q>
   110de:	e7eb      	b.n	110b8 <z_time_slice+0x40>
   110e0:	20002174 	.word	0x20002174
   110e4:	200021a4 	.word	0x200021a4
   110e8:	200021a8 	.word	0x200021a8

000110ec <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   110ec:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   110ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
   110f2:	2b00      	cmp	r3, #0
   110f4:	db33      	blt.n	1115e <ready_thread+0x72>
{
   110f6:	b570      	push	{r4, r5, r6, lr}
   110f8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   110fa:	f012 0f1f 	tst.w	r2, #31
   110fe:	d101      	bne.n	11104 <ready_thread+0x18>
	return node->next != NULL;
   11100:	6986      	ldr	r6, [r0, #24]
   11102:	b106      	cbz	r6, 11106 <ready_thread+0x1a>
}
   11104:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   11106:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1110a:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   1110c:	4b14      	ldr	r3, [pc, #80]	; (11160 <ready_thread+0x74>)
   1110e:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11112:	429d      	cmp	r5, r3
   11114:	d108      	bne.n	11128 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11116:	4635      	mov	r5, r6
   11118:	e006      	b.n	11128 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1111a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1111c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1111e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   11120:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11122:	606c      	str	r4, [r5, #4]
}
   11124:	e017      	b.n	11156 <ready_thread+0x6a>
   11126:	4635      	mov	r5, r6
   11128:	b16d      	cbz	r5, 11146 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1112a:	4629      	mov	r1, r5
   1112c:	4620      	mov	r0, r4
   1112e:	f004 f886 	bl	1523e <z_sched_prio_cmp>
   11132:	2800      	cmp	r0, #0
   11134:	dcf1      	bgt.n	1111a <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11136:	2d00      	cmp	r5, #0
   11138:	d0f6      	beq.n	11128 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1113a:	4b09      	ldr	r3, [pc, #36]	; (11160 <ready_thread+0x74>)
   1113c:	6a1b      	ldr	r3, [r3, #32]
   1113e:	429d      	cmp	r5, r3
   11140:	d0f1      	beq.n	11126 <ready_thread+0x3a>
   11142:	682d      	ldr	r5, [r5, #0]
   11144:	e7f0      	b.n	11128 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   11146:	4b06      	ldr	r3, [pc, #24]	; (11160 <ready_thread+0x74>)
   11148:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   1114a:	f103 011c 	add.w	r1, r3, #28
   1114e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11150:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11152:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11154:	621c      	str	r4, [r3, #32]
		update_cache(0);
   11156:	2000      	movs	r0, #0
   11158:	f7ff ff20 	bl	10f9c <update_cache>
}
   1115c:	e7d2      	b.n	11104 <ready_thread+0x18>
   1115e:	4770      	bx	lr
   11160:	20002174 	.word	0x20002174

00011164 <z_sched_start>:
{
   11164:	b510      	push	{r4, lr}
	__asm__ volatile(
   11166:	f04f 0340 	mov.w	r3, #64	; 0x40
   1116a:	f3ef 8411 	mrs	r4, BASEPRI
   1116e:	f383 8812 	msr	BASEPRI_MAX, r3
   11172:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   11176:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   11178:	f013 0f04 	tst.w	r3, #4
   1117c:	d104      	bne.n	11188 <z_sched_start+0x24>
	__asm__ volatile(
   1117e:	f384 8811 	msr	BASEPRI, r4
   11182:	f3bf 8f6f 	isb	sy
}
   11186:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11188:	f023 0304 	bic.w	r3, r3, #4
   1118c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1118e:	f7ff ffad 	bl	110ec <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11192:	4621      	mov	r1, r4
   11194:	4801      	ldr	r0, [pc, #4]	; (1119c <z_sched_start+0x38>)
   11196:	f7ff fed1 	bl	10f3c <z_reschedule>
   1119a:	e7f4      	b.n	11186 <z_sched_start+0x22>
   1119c:	200021b4 	.word	0x200021b4

000111a0 <unready_thread>:
{
   111a0:	b510      	push	{r4, lr}
   111a2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   111a4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   111a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   111aa:	2b00      	cmp	r3, #0
   111ac:	db08      	blt.n	111c0 <unready_thread+0x20>
	update_cache(thread == _current);
   111ae:	4b08      	ldr	r3, [pc, #32]	; (111d0 <unready_thread+0x30>)
   111b0:	6898      	ldr	r0, [r3, #8]
   111b2:	42a0      	cmp	r0, r4
   111b4:	bf14      	ite	ne
   111b6:	2000      	movne	r0, #0
   111b8:	2001      	moveq	r0, #1
   111ba:	f7ff feef 	bl	10f9c <update_cache>
}
   111be:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   111c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   111c4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   111c6:	4601      	mov	r1, r0
   111c8:	4802      	ldr	r0, [pc, #8]	; (111d4 <unready_thread+0x34>)
   111ca:	f004 f876 	bl	152ba <z_priq_dumb_remove>
}
   111ce:	e7ee      	b.n	111ae <unready_thread+0xe>
   111d0:	20002174 	.word	0x20002174
   111d4:	20002190 	.word	0x20002190

000111d8 <z_pend_curr>:
{
   111d8:	b510      	push	{r4, lr}
   111da:	460c      	mov	r4, r1
   111dc:	4611      	mov	r1, r2
	pending_current = _current;
   111de:	480a      	ldr	r0, [pc, #40]	; (11208 <z_pend_curr+0x30>)
   111e0:	6882      	ldr	r2, [r0, #8]
   111e2:	4b0a      	ldr	r3, [pc, #40]	; (1120c <z_pend_curr+0x34>)
   111e4:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   111e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   111ea:	f3ef 8311 	mrs	r3, BASEPRI
   111ee:	f382 8812 	msr	BASEPRI_MAX, r2
   111f2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   111f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111fa:	6880      	ldr	r0, [r0, #8]
   111fc:	f004 f924 	bl	15448 <pend_locked>
   11200:	4620      	mov	r0, r4
   11202:	f7fa ff57 	bl	c0b4 <arch_swap>
}
   11206:	bd10      	pop	{r4, pc}
   11208:	20002174 	.word	0x20002174
   1120c:	200021a4 	.word	0x200021a4

00011210 <z_set_prio>:
{
   11210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11214:	4605      	mov	r5, r0
   11216:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   11218:	2300      	movs	r3, #0
   1121a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1121e:	f3ef 8611 	mrs	r6, BASEPRI
   11222:	f382 8812 	msr	BASEPRI_MAX, r2
   11226:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1122a:	4618      	mov	r0, r3
   1122c:	e029      	b.n	11282 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   1122e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11230:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11232:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11234:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11236:	6065      	str	r5, [r4, #4]
}
   11238:	e017      	b.n	1126a <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1123a:	4644      	mov	r4, r8
   1123c:	b16c      	cbz	r4, 1125a <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1123e:	4621      	mov	r1, r4
   11240:	4628      	mov	r0, r5
   11242:	f003 fffc 	bl	1523e <z_sched_prio_cmp>
   11246:	2800      	cmp	r0, #0
   11248:	dcf1      	bgt.n	1122e <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1124a:	2c00      	cmp	r4, #0
   1124c:	d0f6      	beq.n	1123c <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   1124e:	4b1d      	ldr	r3, [pc, #116]	; (112c4 <z_set_prio+0xb4>)
   11250:	6a1b      	ldr	r3, [r3, #32]
   11252:	429c      	cmp	r4, r3
   11254:	d0f1      	beq.n	1123a <z_set_prio+0x2a>
   11256:	6824      	ldr	r4, [r4, #0]
   11258:	e7f0      	b.n	1123c <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   1125a:	4b1a      	ldr	r3, [pc, #104]	; (112c4 <z_set_prio+0xb4>)
   1125c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   1125e:	f103 011c 	add.w	r1, r3, #28
   11262:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11264:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11266:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11268:	621d      	str	r5, [r3, #32]
			update_cache(1);
   1126a:	2001      	movs	r0, #1
   1126c:	f7ff fe96 	bl	10f9c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11270:	2001      	movs	r0, #1
   11272:	e001      	b.n	11278 <z_set_prio+0x68>
			thread->base.prio = prio;
   11274:	73af      	strb	r7, [r5, #14]
   11276:	2000      	movs	r0, #0
	__asm__ volatile(
   11278:	f386 8811 	msr	BASEPRI, r6
   1127c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11280:	2301      	movs	r3, #1
   11282:	b9e3      	cbnz	r3, 112be <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   11284:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11286:	f013 0f1f 	tst.w	r3, #31
   1128a:	d1f3      	bne.n	11274 <z_set_prio+0x64>
	return node->next != NULL;
   1128c:	f8d5 8018 	ldr.w	r8, [r5, #24]
   11290:	f1b8 0f00 	cmp.w	r8, #0
   11294:	d1ee      	bne.n	11274 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1129a:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1129c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 112c8 <z_set_prio+0xb8>
   112a0:	4629      	mov	r1, r5
   112a2:	4648      	mov	r0, r9
   112a4:	f004 f809 	bl	152ba <z_priq_dumb_remove>
				thread->base.prio = prio;
   112a8:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   112aa:	7b6b      	ldrb	r3, [r5, #13]
   112ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   112b0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   112b2:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   112b6:	454c      	cmp	r4, r9
   112b8:	d1c0      	bne.n	1123c <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   112ba:	4644      	mov	r4, r8
   112bc:	e7be      	b.n	1123c <z_set_prio+0x2c>
}
   112be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   112c2:	bf00      	nop
   112c4:	20002174 	.word	0x20002174
   112c8:	20002190 	.word	0x20002190

000112cc <z_impl_k_thread_suspend>:
{
   112cc:	b538      	push	{r3, r4, r5, lr}
   112ce:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   112d0:	3018      	adds	r0, #24
   112d2:	f004 f97b 	bl	155cc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   112d6:	2300      	movs	r3, #0
	__asm__ volatile(
   112d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   112dc:	f3ef 8511 	mrs	r5, BASEPRI
   112e0:	f382 8812 	msr	BASEPRI_MAX, r2
   112e4:	f3bf 8f6f 	isb	sy
   112e8:	e010      	b.n	1130c <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   112ea:	7b63      	ldrb	r3, [r4, #13]
   112ec:	f043 0310 	orr.w	r3, r3, #16
   112f0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   112f2:	4b11      	ldr	r3, [pc, #68]	; (11338 <z_impl_k_thread_suspend+0x6c>)
   112f4:	6898      	ldr	r0, [r3, #8]
   112f6:	42a0      	cmp	r0, r4
   112f8:	bf14      	ite	ne
   112fa:	2000      	movne	r0, #0
   112fc:	2001      	moveq	r0, #1
   112fe:	f7ff fe4d 	bl	10f9c <update_cache>
	__asm__ volatile(
   11302:	f385 8811 	msr	BASEPRI, r5
   11306:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1130a:	2301      	movs	r3, #1
   1130c:	b963      	cbnz	r3, 11328 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1130e:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   11310:	f994 300d 	ldrsb.w	r3, [r4, #13]
   11314:	2b00      	cmp	r3, #0
   11316:	dae8      	bge.n	112ea <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11318:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1131c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1131e:	4621      	mov	r1, r4
   11320:	4806      	ldr	r0, [pc, #24]	; (1133c <z_impl_k_thread_suspend+0x70>)
   11322:	f003 ffca 	bl	152ba <z_priq_dumb_remove>
}
   11326:	e7e0      	b.n	112ea <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   11328:	4b03      	ldr	r3, [pc, #12]	; (11338 <z_impl_k_thread_suspend+0x6c>)
   1132a:	689b      	ldr	r3, [r3, #8]
   1132c:	42a3      	cmp	r3, r4
   1132e:	d000      	beq.n	11332 <z_impl_k_thread_suspend+0x66>
}
   11330:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   11332:	f003 ffb6 	bl	152a2 <z_reschedule_unlocked>
}
   11336:	e7fb      	b.n	11330 <z_impl_k_thread_suspend+0x64>
   11338:	20002174 	.word	0x20002174
   1133c:	20002190 	.word	0x20002190

00011340 <k_sched_unlock>:

void k_sched_unlock(void)
{
   11340:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   11342:	2300      	movs	r3, #0
	__asm__ volatile(
   11344:	f04f 0240 	mov.w	r2, #64	; 0x40
   11348:	f3ef 8411 	mrs	r4, BASEPRI
   1134c:	f382 8812 	msr	BASEPRI_MAX, r2
   11350:	f3bf 8f6f 	isb	sy
   11354:	e00c      	b.n	11370 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   11356:	4b09      	ldr	r3, [pc, #36]	; (1137c <k_sched_unlock+0x3c>)
   11358:	689a      	ldr	r2, [r3, #8]
   1135a:	7bd3      	ldrb	r3, [r2, #15]
   1135c:	3301      	adds	r3, #1
   1135e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11360:	2000      	movs	r0, #0
   11362:	f7ff fe1b 	bl	10f9c <update_cache>
	__asm__ volatile(
   11366:	f384 8811 	msr	BASEPRI, r4
   1136a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1136e:	2301      	movs	r3, #1
   11370:	2b00      	cmp	r3, #0
   11372:	d0f0      	beq.n	11356 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   11374:	f003 ff95 	bl	152a2 <z_reschedule_unlocked>
}
   11378:	bd10      	pop	{r4, pc}
   1137a:	bf00      	nop
   1137c:	20002174 	.word	0x20002174

00011380 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   11380:	7b43      	ldrb	r3, [r0, #13]
   11382:	f013 0f08 	tst.w	r3, #8
   11386:	d12a      	bne.n	113de <end_thread+0x5e>
{
   11388:	b510      	push	{r4, lr}
   1138a:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1138c:	f043 0208 	orr.w	r2, r3, #8
   11390:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11392:	f023 0220 	bic.w	r2, r3, #32
   11396:	f042 0208 	orr.w	r2, r2, #8
   1139a:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1139c:	f012 0f80 	tst.w	r2, #128	; 0x80
   113a0:	d113      	bne.n	113ca <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   113a2:	68a3      	ldr	r3, [r4, #8]
   113a4:	b113      	cbz	r3, 113ac <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   113a6:	4620      	mov	r0, r4
   113a8:	f003 ff8f 	bl	152ca <unpend_thread_no_timeout>
   113ac:	f104 0018 	add.w	r0, r4, #24
   113b0:	f004 f90c 	bl	155cc <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   113b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   113b8:	f004 f806 	bl	153c8 <unpend_all>
		update_cache(1);
   113bc:	2001      	movs	r0, #1
   113be:	f7ff fded 	bl	10f9c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   113c2:	4620      	mov	r0, r4
   113c4:	f7ff f9c4 	bl	10750 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   113c8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   113ca:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   113ce:	f043 0308 	orr.w	r3, r3, #8
   113d2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   113d4:	4601      	mov	r1, r0
   113d6:	4802      	ldr	r0, [pc, #8]	; (113e0 <end_thread+0x60>)
   113d8:	f003 ff6f 	bl	152ba <z_priq_dumb_remove>
}
   113dc:	e7e1      	b.n	113a2 <end_thread+0x22>
   113de:	4770      	bx	lr
   113e0:	20002190 	.word	0x20002190

000113e4 <z_sched_init>:
{
   113e4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   113e6:	4802      	ldr	r0, [pc, #8]	; (113f0 <z_sched_init+0xc>)
   113e8:	f004 f88a 	bl	15500 <init_ready_q>
}
   113ec:	bd08      	pop	{r3, pc}
   113ee:	bf00      	nop
   113f0:	2000218c 	.word	0x2000218c

000113f4 <z_impl_k_yield>:
{
   113f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   113f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   113fa:	f3ef 8611 	mrs	r6, BASEPRI
   113fe:	f383 8812 	msr	BASEPRI_MAX, r3
   11402:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   11406:	4c1d      	ldr	r4, [pc, #116]	; (1147c <z_impl_k_yield+0x88>)
   11408:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1140a:	7b4b      	ldrb	r3, [r1, #13]
   1140c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11410:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11412:	f104 071c 	add.w	r7, r4, #28
   11416:	4638      	mov	r0, r7
   11418:	f003 ff4f 	bl	152ba <z_priq_dumb_remove>
	queue_thread(_current);
   1141c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1141e:	7b6b      	ldrb	r3, [r5, #13]
   11420:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11424:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11426:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11428:	42bc      	cmp	r4, r7
   1142a:	d108      	bne.n	1143e <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1142c:	2400      	movs	r4, #0
   1142e:	e006      	b.n	1143e <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   11430:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11432:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11434:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11436:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11438:	6065      	str	r5, [r4, #4]
}
   1143a:	e017      	b.n	1146c <z_impl_k_yield+0x78>
   1143c:	2400      	movs	r4, #0
   1143e:	b16c      	cbz	r4, 1145c <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11440:	4621      	mov	r1, r4
   11442:	4628      	mov	r0, r5
   11444:	f003 fefb 	bl	1523e <z_sched_prio_cmp>
   11448:	2800      	cmp	r0, #0
   1144a:	dcf1      	bgt.n	11430 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1144c:	2c00      	cmp	r4, #0
   1144e:	d0f6      	beq.n	1143e <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   11450:	4b0a      	ldr	r3, [pc, #40]	; (1147c <z_impl_k_yield+0x88>)
   11452:	6a1b      	ldr	r3, [r3, #32]
   11454:	429c      	cmp	r4, r3
   11456:	d0f1      	beq.n	1143c <z_impl_k_yield+0x48>
   11458:	6824      	ldr	r4, [r4, #0]
   1145a:	e7f0      	b.n	1143e <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   1145c:	4b07      	ldr	r3, [pc, #28]	; (1147c <z_impl_k_yield+0x88>)
   1145e:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   11460:	f103 011c 	add.w	r1, r3, #28
   11464:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11466:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11468:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1146a:	621d      	str	r5, [r3, #32]
	update_cache(1);
   1146c:	2001      	movs	r0, #1
   1146e:	f7ff fd95 	bl	10f9c <update_cache>
   11472:	4630      	mov	r0, r6
   11474:	f7fa fe1e 	bl	c0b4 <arch_swap>
}
   11478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1147a:	bf00      	nop
   1147c:	20002174 	.word	0x20002174

00011480 <z_tick_sleep>:
{
   11480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   11484:	ea50 0301 	orrs.w	r3, r0, r1
   11488:	d038      	beq.n	114fc <z_tick_sleep+0x7c>
   1148a:	4604      	mov	r4, r0
   1148c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   1148e:	f06f 0301 	mvn.w	r3, #1
   11492:	1a1b      	subs	r3, r3, r0
   11494:	f04f 32ff 	mov.w	r2, #4294967295
   11498:	eb62 0201 	sbc.w	r2, r2, r1
   1149c:	2b01      	cmp	r3, #1
   1149e:	f172 0200 	sbcs.w	r2, r2, #0
   114a2:	db2f      	blt.n	11504 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   114a4:	f06f 0501 	mvn.w	r5, #1
   114a8:	1a2d      	subs	r5, r5, r0
   114aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   114ae:	f3ef 8811 	mrs	r8, BASEPRI
   114b2:	f383 8812 	msr	BASEPRI_MAX, r3
   114b6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   114ba:	4f14      	ldr	r7, [pc, #80]	; (1150c <z_tick_sleep+0x8c>)
   114bc:	68b8      	ldr	r0, [r7, #8]
   114be:	4b14      	ldr	r3, [pc, #80]	; (11510 <z_tick_sleep+0x90>)
   114c0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   114c2:	f7ff fe6d 	bl	111a0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   114c6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   114c8:	4622      	mov	r2, r4
   114ca:	4633      	mov	r3, r6
   114cc:	4911      	ldr	r1, [pc, #68]	; (11514 <z_tick_sleep+0x94>)
   114ce:	3018      	adds	r0, #24
   114d0:	f000 f8da 	bl	11688 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   114d4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   114d6:	7b53      	ldrb	r3, [r2, #13]
   114d8:	f043 0310 	orr.w	r3, r3, #16
   114dc:	7353      	strb	r3, [r2, #13]
   114de:	4640      	mov	r0, r8
   114e0:	f7fa fde8 	bl	c0b4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   114e4:	f004 f8a7 	bl	15636 <sys_clock_tick_get_32>
   114e8:	1a28      	subs	r0, r5, r0
   114ea:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   114ee:	2801      	cmp	r0, #1
   114f0:	f173 0300 	sbcs.w	r3, r3, #0
   114f4:	da00      	bge.n	114f8 <z_tick_sleep+0x78>
	return 0;
   114f6:	2000      	movs	r0, #0
}
   114f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   114fc:	f7ff ff7a 	bl	113f4 <z_impl_k_yield>
		return 0;
   11500:	2000      	movs	r0, #0
   11502:	e7f9      	b.n	114f8 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   11504:	f004 f897 	bl	15636 <sys_clock_tick_get_32>
   11508:	1905      	adds	r5, r0, r4
   1150a:	e7ce      	b.n	114aa <z_tick_sleep+0x2a>
   1150c:	20002174 	.word	0x20002174
   11510:	200021a4 	.word	0x200021a4
   11514:	000153bd 	.word	0x000153bd

00011518 <z_impl_k_sleep>:
{
   11518:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1151a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1151e:	bf08      	it	eq
   11520:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   11524:	d018      	beq.n	11558 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   11526:	f7ff ffab 	bl	11480 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1152a:	17c2      	asrs	r2, r0, #31
   1152c:	0151      	lsls	r1, r2, #5
   1152e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   11532:	0143      	lsls	r3, r0, #5
   11534:	1a1b      	subs	r3, r3, r0
   11536:	eb61 0102 	sbc.w	r1, r1, r2
   1153a:	0089      	lsls	r1, r1, #2
   1153c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   11540:	009b      	lsls	r3, r3, #2
   11542:	181b      	adds	r3, r3, r0
   11544:	eb42 0201 	adc.w	r2, r2, r1
   11548:	00d2      	lsls	r2, r2, #3
   1154a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1154e:	f3c3 3310 	ubfx	r3, r3, #12, #17
   11552:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   11556:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   11558:	4b03      	ldr	r3, [pc, #12]	; (11568 <z_impl_k_sleep+0x50>)
   1155a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1155c:	f7ff feb6 	bl	112cc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   11560:	f04f 30ff 	mov.w	r0, #4294967295
   11564:	e7f7      	b.n	11556 <z_impl_k_sleep+0x3e>
   11566:	bf00      	nop
   11568:	20002174 	.word	0x20002174

0001156c <z_impl_z_current_get>:
}
   1156c:	4b01      	ldr	r3, [pc, #4]	; (11574 <z_impl_z_current_get+0x8>)
   1156e:	6898      	ldr	r0, [r3, #8]
   11570:	4770      	bx	lr
   11572:	bf00      	nop
   11574:	20002174 	.word	0x20002174

00011578 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   11578:	b570      	push	{r4, r5, r6, lr}
   1157a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1157e:	f3ef 8511 	mrs	r5, BASEPRI
   11582:	f383 8812 	msr	BASEPRI_MAX, r3
   11586:	f3bf 8f6f 	isb	sy
   1158a:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1158c:	7b03      	ldrb	r3, [r0, #12]
   1158e:	f013 0f01 	tst.w	r3, #1
   11592:	d109      	bne.n	115a8 <z_thread_abort+0x30>
   11594:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11596:	7b43      	ldrb	r3, [r0, #13]
   11598:	f013 0f08 	tst.w	r3, #8
   1159c:	d00f      	beq.n	115be <z_thread_abort+0x46>
	__asm__ volatile(
   1159e:	f385 8811 	msr	BASEPRI, r5
   115a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   115a6:	e009      	b.n	115bc <z_thread_abort+0x44>
   115a8:	f385 8811 	msr	BASEPRI, r5
   115ac:	f3bf 8f6f 	isb	sy
		k_panic();
   115b0:	4040      	eors	r0, r0
   115b2:	f380 8811 	msr	BASEPRI, r0
   115b6:	f04f 0004 	mov.w	r0, #4
   115ba:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   115bc:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   115be:	f7ff fedf 	bl	11380 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   115c2:	4b08      	ldr	r3, [pc, #32]	; (115e4 <z_thread_abort+0x6c>)
   115c4:	689b      	ldr	r3, [r3, #8]
   115c6:	42a3      	cmp	r3, r4
   115c8:	d004      	beq.n	115d4 <z_thread_abort+0x5c>
   115ca:	f386 8811 	msr	BASEPRI, r6
   115ce:	f3bf 8f6f 	isb	sy
   115d2:	e7f3      	b.n	115bc <z_thread_abort+0x44>
   115d4:	f3ef 8305 	mrs	r3, IPSR
   115d8:	2b00      	cmp	r3, #0
   115da:	d1f6      	bne.n	115ca <z_thread_abort+0x52>
   115dc:	4628      	mov	r0, r5
   115de:	f7fa fd69 	bl	c0b4 <arch_swap>
	return ret;
   115e2:	e7f2      	b.n	115ca <z_thread_abort+0x52>
   115e4:	20002174 	.word	0x20002174

000115e8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   115e8:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   115ec:	b083      	sub	sp, #12
   115ee:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   115f0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   115f4:	e9cd bc00 	strd	fp, ip, [sp]
   115f8:	f7ff fdee 	bl	111d8 <z_pend_curr>

	if (data != NULL) {
   115fc:	b11c      	cbz	r4, 11606 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   115fe:	4b03      	ldr	r3, [pc, #12]	; (1160c <z_sched_wait+0x24>)
   11600:	689b      	ldr	r3, [r3, #8]
   11602:	695b      	ldr	r3, [r3, #20]
   11604:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   11606:	b003      	add	sp, #12
   11608:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   1160c:	20002174 	.word	0x20002174

00011610 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11610:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   11612:	4806      	ldr	r0, [pc, #24]	; (1162c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   11614:	4a06      	ldr	r2, [pc, #24]	; (11630 <z_data_copy+0x20>)
   11616:	1a12      	subs	r2, r2, r0
   11618:	4906      	ldr	r1, [pc, #24]	; (11634 <z_data_copy+0x24>)
   1161a:	f003 fbd9 	bl	14dd0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1161e:	4a06      	ldr	r2, [pc, #24]	; (11638 <z_data_copy+0x28>)
   11620:	4906      	ldr	r1, [pc, #24]	; (1163c <z_data_copy+0x2c>)
   11622:	4807      	ldr	r0, [pc, #28]	; (11640 <z_data_copy+0x30>)
   11624:	f003 fbd4 	bl	14dd0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11628:	bd08      	pop	{r3, pc}
   1162a:	bf00      	nop
   1162c:	20000000 	.word	0x20000000
   11630:	20000510 	.word	0x20000510
   11634:	00016664 	.word	0x00016664
   11638:	00000000 	.word	0x00000000
   1163c:	00016664 	.word	0x00016664
   11640:	20000000 	.word	0x20000000

00011644 <first>:
	return list->head == list;
   11644:	4b03      	ldr	r3, [pc, #12]	; (11654 <first+0x10>)
   11646:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11648:	4298      	cmp	r0, r3
   1164a:	d000      	beq.n	1164e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1164c:	4770      	bx	lr
   1164e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   11650:	e7fc      	b.n	1164c <first+0x8>
   11652:	bf00      	nop
   11654:	20000458 	.word	0x20000458

00011658 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11658:	b130      	cbz	r0, 11668 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1165a:	4a04      	ldr	r2, [pc, #16]	; (1166c <next+0x14>)
   1165c:	6852      	ldr	r2, [r2, #4]
   1165e:	4290      	cmp	r0, r2
   11660:	d001      	beq.n	11666 <next+0xe>
   11662:	6800      	ldr	r0, [r0, #0]
   11664:	4770      	bx	lr
   11666:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   11668:	4770      	bx	lr
   1166a:	bf00      	nop
   1166c:	20000458 	.word	0x20000458

00011670 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   11670:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11672:	4b04      	ldr	r3, [pc, #16]	; (11684 <elapsed+0x14>)
   11674:	681b      	ldr	r3, [r3, #0]
   11676:	b10b      	cbz	r3, 1167c <elapsed+0xc>
   11678:	2000      	movs	r0, #0
}
   1167a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1167c:	f7fd fd42 	bl	f104 <sys_clock_elapsed>
   11680:	e7fb      	b.n	1167a <elapsed+0xa>
   11682:	bf00      	nop
   11684:	200021b4 	.word	0x200021b4

00011688 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11688:	f1b3 3fff 	cmp.w	r3, #4294967295
   1168c:	bf08      	it	eq
   1168e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11692:	d074      	beq.n	1177e <z_add_timeout+0xf6>
{
   11694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11698:	4604      	mov	r4, r0
   1169a:	4692      	mov	sl, r2
   1169c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1169e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   116a0:	2300      	movs	r3, #0
	__asm__ volatile(
   116a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   116a6:	f3ef 8711 	mrs	r7, BASEPRI
   116aa:	f382 8812 	msr	BASEPRI_MAX, r2
   116ae:	f3bf 8f6f 	isb	sy
   116b2:	e026      	b.n	11702 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   116b4:	f11a 0801 	adds.w	r8, sl, #1
   116b8:	f145 0900 	adc.w	r9, r5, #0
   116bc:	f7ff ffd8 	bl	11670 <elapsed>
   116c0:	eb18 0300 	adds.w	r3, r8, r0
   116c4:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   116c8:	6123      	str	r3, [r4, #16]
   116ca:	6160      	str	r0, [r4, #20]
   116cc:	e03b      	b.n	11746 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   116ce:	1a52      	subs	r2, r2, r1
   116d0:	eb66 0303 	sbc.w	r3, r6, r3
   116d4:	6102      	str	r2, [r0, #16]
   116d6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   116d8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   116da:	6063      	str	r3, [r4, #4]
	node->next = successor;
   116dc:	6020      	str	r0, [r4, #0]
	prev->next = node;
   116de:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   116e0:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   116e2:	e005      	b.n	116f0 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   116e4:	4b26      	ldr	r3, [pc, #152]	; (11780 <z_add_timeout+0xf8>)
   116e6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   116e8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   116ea:	6062      	str	r2, [r4, #4]
	tail->next = node;
   116ec:	6014      	str	r4, [r2, #0]
	list->tail = node;
   116ee:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   116f0:	f7ff ffa8 	bl	11644 <first>
   116f4:	4284      	cmp	r4, r0
   116f6:	d03a      	beq.n	1176e <z_add_timeout+0xe6>
	__asm__ volatile(
   116f8:	f387 8811 	msr	BASEPRI, r7
   116fc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   11700:	2301      	movs	r3, #1
   11702:	2b00      	cmp	r3, #0
   11704:	d139      	bne.n	1177a <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11706:	4653      	mov	r3, sl
   11708:	f06f 0101 	mvn.w	r1, #1
   1170c:	ebb1 010a 	subs.w	r1, r1, sl
   11710:	f04f 30ff 	mov.w	r0, #4294967295
   11714:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11718:	2a00      	cmp	r2, #0
   1171a:	dbcb      	blt.n	116b4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1171c:	4a19      	ldr	r2, [pc, #100]	; (11784 <z_add_timeout+0xfc>)
   1171e:	6811      	ldr	r1, [r2, #0]
   11720:	6852      	ldr	r2, [r2, #4]
   11722:	185b      	adds	r3, r3, r1
   11724:	eb42 0205 	adc.w	r2, r2, r5
   11728:	f06f 0101 	mvn.w	r1, #1
   1172c:	1ac9      	subs	r1, r1, r3
   1172e:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   11732:	4608      	mov	r0, r1
   11734:	461a      	mov	r2, r3
   11736:	2901      	cmp	r1, #1
   11738:	f173 0300 	sbcs.w	r3, r3, #0
   1173c:	da01      	bge.n	11742 <z_add_timeout+0xba>
   1173e:	2001      	movs	r0, #1
   11740:	2200      	movs	r2, #0
   11742:	6120      	str	r0, [r4, #16]
   11744:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   11746:	f7ff ff7d 	bl	11644 <first>
   1174a:	2800      	cmp	r0, #0
   1174c:	d0ca      	beq.n	116e4 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   1174e:	6902      	ldr	r2, [r0, #16]
   11750:	6946      	ldr	r6, [r0, #20]
   11752:	6921      	ldr	r1, [r4, #16]
   11754:	6963      	ldr	r3, [r4, #20]
   11756:	4291      	cmp	r1, r2
   11758:	eb73 0e06 	sbcs.w	lr, r3, r6
   1175c:	dbb7      	blt.n	116ce <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   1175e:	1a89      	subs	r1, r1, r2
   11760:	eb63 0306 	sbc.w	r3, r3, r6
   11764:	6121      	str	r1, [r4, #16]
   11766:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   11768:	f7ff ff76 	bl	11658 <next>
   1176c:	e7ed      	b.n	1174a <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   1176e:	f003 ff10 	bl	15592 <next_timeout>
   11772:	2100      	movs	r1, #0
   11774:	f7fd fc8a 	bl	f08c <sys_clock_set_timeout>
   11778:	e7be      	b.n	116f8 <z_add_timeout+0x70>
		}
	}
}
   1177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1177e:	4770      	bx	lr
   11780:	20000458 	.word	0x20000458
   11784:	200019a8 	.word	0x200019a8

00011788 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   11788:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1178a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1178e:	f3ef 8611 	mrs	r6, BASEPRI
   11792:	f383 8812 	msr	BASEPRI_MAX, r3
   11796:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1179a:	4b2b      	ldr	r3, [pc, #172]	; (11848 <sys_clock_announce+0xc0>)
   1179c:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   1179e:	f7ff ff51 	bl	11644 <first>
   117a2:	4604      	mov	r4, r0

	for (t = first();
   117a4:	e024      	b.n	117f0 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   117a6:	4a29      	ldr	r2, [pc, #164]	; (1184c <sys_clock_announce+0xc4>)
   117a8:	6813      	ldr	r3, [r2, #0]
   117aa:	6851      	ldr	r1, [r2, #4]
   117ac:	195b      	adds	r3, r3, r5
   117ae:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   117b2:	6013      	str	r3, [r2, #0]
   117b4:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   117b6:	2200      	movs	r2, #0
   117b8:	2300      	movs	r3, #0
   117ba:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   117be:	4620      	mov	r0, r4
   117c0:	f003 fed0 	bl	15564 <remove_timeout>
	__asm__ volatile(
   117c4:	f386 8811 	msr	BASEPRI, r6
   117c8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   117cc:	68a3      	ldr	r3, [r4, #8]
   117ce:	4620      	mov	r0, r4
   117d0:	4798      	blx	r3
	__asm__ volatile(
   117d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   117d6:	f3ef 8611 	mrs	r6, BASEPRI
   117da:	f383 8812 	msr	BASEPRI_MAX, r3
   117de:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   117e2:	4a19      	ldr	r2, [pc, #100]	; (11848 <sys_clock_announce+0xc0>)
   117e4:	6813      	ldr	r3, [r2, #0]
   117e6:	1b5b      	subs	r3, r3, r5
   117e8:	6013      	str	r3, [r2, #0]
	     t = first()) {
   117ea:	f7ff ff2b 	bl	11644 <first>
   117ee:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   117f0:	b13c      	cbz	r4, 11802 <sys_clock_announce+0x7a>
   117f2:	6925      	ldr	r5, [r4, #16]
   117f4:	6961      	ldr	r1, [r4, #20]
   117f6:	4b14      	ldr	r3, [pc, #80]	; (11848 <sys_clock_announce+0xc0>)
   117f8:	681a      	ldr	r2, [r3, #0]
   117fa:	17d3      	asrs	r3, r2, #31
   117fc:	42aa      	cmp	r2, r5
   117fe:	418b      	sbcs	r3, r1
   11800:	dad1      	bge.n	117a6 <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   11802:	b144      	cbz	r4, 11816 <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   11804:	6923      	ldr	r3, [r4, #16]
   11806:	6962      	ldr	r2, [r4, #20]
   11808:	490f      	ldr	r1, [pc, #60]	; (11848 <sys_clock_announce+0xc0>)
   1180a:	6809      	ldr	r1, [r1, #0]
   1180c:	1a5b      	subs	r3, r3, r1
   1180e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   11812:	6123      	str	r3, [r4, #16]
   11814:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   11816:	4a0d      	ldr	r2, [pc, #52]	; (1184c <sys_clock_announce+0xc4>)
   11818:	4d0b      	ldr	r5, [pc, #44]	; (11848 <sys_clock_announce+0xc0>)
   1181a:	6828      	ldr	r0, [r5, #0]
   1181c:	6813      	ldr	r3, [r2, #0]
   1181e:	6851      	ldr	r1, [r2, #4]
   11820:	181b      	adds	r3, r3, r0
   11822:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   11826:	6013      	str	r3, [r2, #0]
   11828:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   1182a:	2400      	movs	r4, #0
   1182c:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1182e:	f003 feb0 	bl	15592 <next_timeout>
   11832:	4621      	mov	r1, r4
   11834:	f7fd fc2a 	bl	f08c <sys_clock_set_timeout>
	__asm__ volatile(
   11838:	f386 8811 	msr	BASEPRI, r6
   1183c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   11840:	f7ff fc1a 	bl	11078 <z_time_slice>
#endif
}
   11844:	bd70      	pop	{r4, r5, r6, pc}
   11846:	bf00      	nop
   11848:	200021b4 	.word	0x200021b4
   1184c:	200019a8 	.word	0x200019a8

00011850 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11850:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   11852:	2200      	movs	r2, #0
	__asm__ volatile(
   11854:	f04f 0340 	mov.w	r3, #64	; 0x40
   11858:	f3ef 8411 	mrs	r4, BASEPRI
   1185c:	f383 8812 	msr	BASEPRI_MAX, r3
   11860:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   11864:	4613      	mov	r3, r2
   11866:	4611      	mov	r1, r2
   11868:	e00c      	b.n	11884 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   1186a:	f7ff ff01 	bl	11670 <elapsed>
   1186e:	4a07      	ldr	r2, [pc, #28]	; (1188c <sys_clock_tick_get+0x3c>)
   11870:	6813      	ldr	r3, [r2, #0]
   11872:	6851      	ldr	r1, [r2, #4]
   11874:	18c3      	adds	r3, r0, r3
   11876:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   1187a:	f384 8811 	msr	BASEPRI, r4
   1187e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   11882:	2201      	movs	r2, #1
   11884:	2a00      	cmp	r2, #0
   11886:	d0f0      	beq.n	1186a <sys_clock_tick_get+0x1a>
	}
	return t;
}
   11888:	4618      	mov	r0, r3
   1188a:	bd10      	pop	{r4, pc}
   1188c:	200019a8 	.word	0x200019a8

00011890 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   11890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11892:	f04f 0240 	mov.w	r2, #64	; 0x40
   11896:	f3ef 8311 	mrs	r3, BASEPRI
   1189a:	f382 8812 	msr	BASEPRI_MAX, r2
   1189e:	f3bf 8f6f 	isb	sy
   118a2:	461a      	mov	r2, r3
   118a4:	461d      	mov	r5, r3
	return node->next != NULL;
   118a6:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   118a8:	b123      	cbz	r3, 118b4 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
   118aa:	f382 8811 	msr	BASEPRI, r2
   118ae:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   118b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118b4:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   118b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
   118b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   118ba:	ea52 0103 	orrs.w	r1, r2, r3
   118be:	d005      	beq.n	118cc <z_timer_expiration_handler+0x3c>
   118c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   118c4:	bf08      	it	eq
   118c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   118ca:	d129      	bne.n	11920 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
   118cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   118ce:	3301      	adds	r3, #1
   118d0:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   118d2:	6a23      	ldr	r3, [r4, #32]
   118d4:	b17b      	cbz	r3, 118f6 <z_timer_expiration_handler+0x66>
   118d6:	f385 8811 	msr	BASEPRI, r5
   118da:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   118de:	6a23      	ldr	r3, [r4, #32]
   118e0:	4620      	mov	r0, r4
   118e2:	4798      	blx	r3
	__asm__ volatile(
   118e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   118e8:	f3ef 8311 	mrs	r3, BASEPRI
   118ec:	f382 8812 	msr	BASEPRI_MAX, r2
   118f0:	f3bf 8f6f 	isb	sy
   118f4:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   118f6:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   118fa:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   118fc:	42a3      	cmp	r3, r4
   118fe:	d03f      	beq.n	11980 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
   11900:	2c00      	cmp	r4, #0
   11902:	d03d      	beq.n	11980 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
   11904:	4620      	mov	r0, r4
   11906:	f003 fca4 	bl	15252 <z_unpend_thread_no_timeout>
   1190a:	2300      	movs	r3, #0
   1190c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   11910:	f385 8811 	msr	BASEPRI, r5
   11914:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   11918:	4620      	mov	r0, r4
   1191a:	f003 fd09 	bl	15330 <z_ready_thread>
   1191e:	e7c8      	b.n	118b2 <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
   11920:	4616      	mov	r6, r2
   11922:	461f      	mov	r7, r3
   11924:	2a01      	cmp	r2, #1
   11926:	f173 0300 	sbcs.w	r3, r3, #0
   1192a:	da01      	bge.n	11930 <z_timer_expiration_handler+0xa0>
   1192c:	2601      	movs	r6, #1
   1192e:	2700      	movs	r7, #0
   11930:	3e01      	subs	r6, #1
   11932:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
   11936:	f003 fe82 	bl	1563e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   1193a:	3001      	adds	r0, #1
   1193c:	f141 0100 	adc.w	r1, r1, #0
   11940:	1980      	adds	r0, r0, r6
   11942:	eb47 0101 	adc.w	r1, r7, r1
   11946:	2801      	cmp	r0, #1
   11948:	f171 0100 	sbcs.w	r1, r1, #0
   1194c:	da08      	bge.n	11960 <z_timer_expiration_handler+0xd0>
   1194e:	f06f 0201 	mvn.w	r2, #1
   11952:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11956:	490d      	ldr	r1, [pc, #52]	; (1198c <z_timer_expiration_handler+0xfc>)
   11958:	4620      	mov	r0, r4
   1195a:	f7ff fe95 	bl	11688 <z_add_timeout>
   1195e:	e7b5      	b.n	118cc <z_timer_expiration_handler+0x3c>
   11960:	f003 fe6d 	bl	1563e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   11964:	3001      	adds	r0, #1
   11966:	f141 0100 	adc.w	r1, r1, #0
   1196a:	1980      	adds	r0, r0, r6
   1196c:	eb47 0301 	adc.w	r3, r7, r1
   11970:	f06f 0201 	mvn.w	r2, #1
   11974:	1a12      	subs	r2, r2, r0
   11976:	f04f 31ff 	mov.w	r1, #4294967295
   1197a:	eb61 0303 	sbc.w	r3, r1, r3
   1197e:	e7ea      	b.n	11956 <z_timer_expiration_handler+0xc6>
   11980:	f385 8811 	msr	BASEPRI, r5
   11984:	f3bf 8f6f 	isb	sy
		return;
   11988:	e793      	b.n	118b2 <z_timer_expiration_handler+0x22>
   1198a:	bf00      	nop
   1198c:	00011891 	.word	0x00011891

00011990 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   11990:	b570      	push	{r4, r5, r6, lr}
   11992:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   11994:	f1b3 3fff 	cmp.w	r3, #4294967295
   11998:	bf08      	it	eq
   1199a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1199e:	d01a      	beq.n	119d6 <z_impl_k_timer_start+0x46>
   119a0:	4606      	mov	r6, r0
   119a2:	4614      	mov	r4, r2
   119a4:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   119a6:	f06f 0201 	mvn.w	r2, #1
   119aa:	1b12      	subs	r2, r2, r4
   119ac:	f04f 32ff 	mov.w	r2, #4294967295
   119b0:	eb62 0203 	sbc.w	r2, r2, r3
   119b4:	2a00      	cmp	r2, #0
   119b6:	db0f      	blt.n	119d8 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   119b8:	4630      	mov	r0, r6
   119ba:	f003 fe07 	bl	155cc <z_abort_timeout>
	timer->period = period;
   119be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   119c2:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
   119c6:	2300      	movs	r3, #0
   119c8:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   119ca:	4622      	mov	r2, r4
   119cc:	462b      	mov	r3, r5
   119ce:	4907      	ldr	r1, [pc, #28]	; (119ec <z_impl_k_timer_start+0x5c>)
   119d0:	4630      	mov	r0, r6
   119d2:	f7ff fe59 	bl	11688 <z_add_timeout>
		     duration);
}
   119d6:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
   119d8:	2c01      	cmp	r4, #1
   119da:	f171 0100 	sbcs.w	r1, r1, #0
   119de:	da01      	bge.n	119e4 <z_impl_k_timer_start+0x54>
   119e0:	2401      	movs	r4, #1
   119e2:	2500      	movs	r5, #0
   119e4:	3c01      	subs	r4, #1
   119e6:	f145 35ff 	adc.w	r5, r5, #4294967295
   119ea:	e7e5      	b.n	119b8 <z_impl_k_timer_start+0x28>
   119ec:	00011891 	.word	0x00011891

000119f0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   119f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119f4:	b083      	sub	sp, #12
   119f6:	4607      	mov	r7, r0
   119f8:	4616      	mov	r6, r2
   119fa:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   119fc:	4b28      	ldr	r3, [pc, #160]	; (11aa0 <z_impl_k_poll+0xb0>)
   119fe:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   11a00:	2301      	movs	r3, #1
   11a02:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   11a06:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   11a0a:	ea55 0302 	orrs.w	r3, r5, r2
   11a0e:	bf0c      	ite	eq
   11a10:	2301      	moveq	r3, #1
   11a12:	2300      	movne	r3, #0
   11a14:	f104 0260 	add.w	r2, r4, #96	; 0x60
   11a18:	f003 ff3f 	bl	1589a <register_events>
   11a1c:	4680      	mov	r8, r0
	__asm__ volatile(
   11a1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11a22:	f3ef 8111 	mrs	r1, BASEPRI
   11a26:	f383 8812 	msr	BASEPRI_MAX, r3
   11a2a:	f3bf 8f6f 	isb	sy
   11a2e:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   11a30:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   11a34:	b30b      	cbz	r3, 11a7a <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   11a36:	2300      	movs	r3, #0
   11a38:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11a3c:	ea55 0306 	orrs.w	r3, r5, r6
   11a40:	d026      	beq.n	11a90 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11a42:	9600      	str	r6, [sp, #0]
   11a44:	9501      	str	r5, [sp, #4]
   11a46:	4a17      	ldr	r2, [pc, #92]	; (11aa4 <z_impl_k_poll+0xb4>)
   11a48:	4817      	ldr	r0, [pc, #92]	; (11aa8 <z_impl_k_poll+0xb8>)
   11a4a:	f7ff fbc5 	bl	111d8 <z_pend_curr>
   11a4e:	4604      	mov	r4, r0
   11a50:	f04f 0340 	mov.w	r3, #64	; 0x40
   11a54:	f3ef 8211 	mrs	r2, BASEPRI
   11a58:	f383 8812 	msr	BASEPRI_MAX, r3
   11a5c:	f3bf 8f6f 	isb	sy
   11a60:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   11a62:	4641      	mov	r1, r8
   11a64:	4638      	mov	r0, r7
   11a66:	f003 fe8c 	bl	15782 <clear_event_registrations>
	__asm__ volatile(
   11a6a:	f385 8811 	msr	BASEPRI, r5
   11a6e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   11a72:	4620      	mov	r0, r4
   11a74:	b003      	add	sp, #12
   11a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   11a7a:	460a      	mov	r2, r1
   11a7c:	4601      	mov	r1, r0
   11a7e:	4638      	mov	r0, r7
   11a80:	f003 fe7f 	bl	15782 <clear_event_registrations>
   11a84:	f389 8811 	msr	BASEPRI, r9
   11a88:	f3bf 8f6f 	isb	sy
		return 0;
   11a8c:	2400      	movs	r4, #0
   11a8e:	e7f0      	b.n	11a72 <z_impl_k_poll+0x82>
   11a90:	f381 8811 	msr	BASEPRI, r1
   11a94:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   11a98:	f06f 040a 	mvn.w	r4, #10
   11a9c:	e7e9      	b.n	11a72 <z_impl_k_poll+0x82>
   11a9e:	bf00      	nop
   11aa0:	20002174 	.word	0x20002174
   11aa4:	20000460 	.word	0x20000460
   11aa8:	200021b8 	.word	0x200021b8

00011aac <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   11aac:	b538      	push	{r3, r4, r5, lr}
   11aae:	4603      	mov	r3, r0
	__asm__ volatile(
   11ab0:	f04f 0240 	mov.w	r2, #64	; 0x40
   11ab4:	f3ef 8511 	mrs	r5, BASEPRI
   11ab8:	f382 8812 	msr	BASEPRI_MAX, r2
   11abc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   11ac0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   11ac2:	2201      	movs	r2, #1
   11ac4:	6082      	str	r2, [r0, #8]
	return list->head == list;
   11ac6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   11ac8:	4283      	cmp	r3, r0
   11aca:	d010      	beq.n	11aee <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   11acc:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   11ace:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   11ad0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11ad2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11ad4:	2300      	movs	r3, #0
   11ad6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   11ad8:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11ada:	2101      	movs	r1, #1
   11adc:	f003 ff67 	bl	159ae <signal_poll_event>
   11ae0:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   11ae2:	4629      	mov	r1, r5
   11ae4:	4805      	ldr	r0, [pc, #20]	; (11afc <z_impl_k_poll_signal_raise+0x50>)
   11ae6:	f7ff fa29 	bl	10f3c <z_reschedule>
	return rc;
}
   11aea:	4620      	mov	r0, r4
   11aec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11aee:	f385 8811 	msr	BASEPRI, r5
   11af2:	f3bf 8f6f 	isb	sy
		return 0;
   11af6:	2400      	movs	r4, #0
   11af8:	e7f7      	b.n	11aea <z_impl_k_poll_signal_raise+0x3e>
   11afa:	bf00      	nop
   11afc:	200021b8 	.word	0x200021b8

00011b00 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   11b00:	b538      	push	{r3, r4, r5, lr}
   11b02:	4604      	mov	r4, r0
   11b04:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   11b06:	f003 f9f5 	bl	14ef4 <k_is_in_isr>
   11b0a:	b948      	cbnz	r0, 11b20 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   11b0c:	4b05      	ldr	r3, [pc, #20]	; (11b24 <z_thread_aligned_alloc+0x24>)
   11b0e:	689b      	ldr	r3, [r3, #8]
   11b10:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   11b14:	b118      	cbz	r0, 11b1e <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   11b16:	462a      	mov	r2, r5
   11b18:	4621      	mov	r1, r4
   11b1a:	f003 ff79 	bl	15a10 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   11b1e:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   11b20:	2000      	movs	r0, #0
	return ret;
   11b22:	e7fc      	b.n	11b1e <z_thread_aligned_alloc+0x1e>
   11b24:	20002174 	.word	0x20002174

00011b28 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   11b28:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   11b2a:	4802      	ldr	r0, [pc, #8]	; (11b34 <boot_banner+0xc>)
   11b2c:	f000 f9de 	bl	11eec <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   11b30:	bd08      	pop	{r3, pc}
   11b32:	bf00      	nop
   11b34:	00016628 	.word	0x00016628

00011b38 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   11b38:	b510      	push	{r4, lr}
   11b3a:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
   11b3c:	4b08      	ldr	r3, [pc, #32]	; (11b60 <k_sys_work_q_init+0x28>)
   11b3e:	9302      	str	r3, [sp, #8]
   11b40:	2400      	movs	r4, #0
   11b42:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   11b46:	ab02      	add	r3, sp, #8
   11b48:	9300      	str	r3, [sp, #0]
   11b4a:	f04f 33ff 	mov.w	r3, #4294967295
   11b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11b52:	4904      	ldr	r1, [pc, #16]	; (11b64 <k_sys_work_q_init+0x2c>)
   11b54:	4804      	ldr	r0, [pc, #16]	; (11b68 <k_sys_work_q_init+0x30>)
   11b56:	f7ff f945 	bl	10de4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   11b5a:	4620      	mov	r0, r4
   11b5c:	b004      	add	sp, #16
   11b5e:	bd10      	pop	{r4, pc}
   11b60:	00016658 	.word	0x00016658
   11b64:	20004300 	.word	0x20004300
   11b68:	200019b0 	.word	0x200019b0

00011b6c <z_impl_gpio_pin_configure>:
{
   11b6c:	b538      	push	{r3, r4, r5, lr}
   11b6e:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   11b70:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   11b72:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   11b74:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   11b78:	d007      	beq.n	11b8a <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   11b7a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   11b7e:	d004      	beq.n	11b8a <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   11b80:	f012 0f01 	tst.w	r2, #1
   11b84:	d001      	beq.n	11b8a <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   11b86:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   11b8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11b8e:	f013 0f01 	tst.w	r3, #1
   11b92:	d00a      	beq.n	11baa <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11b94:	6823      	ldr	r3, [r4, #0]
   11b96:	f04f 0c01 	mov.w	ip, #1
   11b9a:	fa0c fc01 	lsl.w	ip, ip, r1
   11b9e:	ea43 030c 	orr.w	r3, r3, ip
   11ba2:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   11ba4:	682b      	ldr	r3, [r5, #0]
   11ba6:	4798      	blx	r3
}
   11ba8:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11baa:	6823      	ldr	r3, [r4, #0]
   11bac:	f04f 0c01 	mov.w	ip, #1
   11bb0:	fa0c fc01 	lsl.w	ip, ip, r1
   11bb4:	ea23 030c 	bic.w	r3, r3, ip
   11bb8:	6023      	str	r3, [r4, #0]
   11bba:	e7f3      	b.n	11ba4 <z_impl_gpio_pin_configure+0x38>

00011bbc <gpio_pin_configure_dt>:
{
   11bbc:	b508      	push	{r3, lr}
   11bbe:	4603      	mov	r3, r0
   11bc0:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   11bc2:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   11bc4:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   11bc6:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   11bc8:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   11bcc:	f7ff ffce 	bl	11b6c <z_impl_gpio_pin_configure>
}
   11bd0:	bd08      	pop	{r3, pc}

00011bd2 <gpio_pin_set_raw>:
{
   11bd2:	b508      	push	{r3, lr}
	if (value != 0)	{
   11bd4:	b132      	cbz	r2, 11be4 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   11bd6:	2301      	movs	r3, #1
   11bd8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   11bdc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   11bde:	68db      	ldr	r3, [r3, #12]
   11be0:	4798      	blx	r3
}
   11be2:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   11be4:	2301      	movs	r3, #1
   11be6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   11bea:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   11bec:	691b      	ldr	r3, [r3, #16]
   11bee:	4798      	blx	r3
	return ret;
   11bf0:	e7f7      	b.n	11be2 <gpio_pin_set_raw+0x10>

00011bf2 <gpio_pin_set>:
{
   11bf2:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   11bf4:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11bf6:	681c      	ldr	r4, [r3, #0]
   11bf8:	2301      	movs	r3, #1
   11bfa:	408b      	lsls	r3, r1
   11bfc:	421c      	tst	r4, r3
   11bfe:	d002      	beq.n	11c06 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   11c00:	fab2 f282 	clz	r2, r2
   11c04:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   11c06:	f7ff ffe4 	bl	11bd2 <gpio_pin_set_raw>
}
   11c0a:	bd10      	pop	{r4, pc}

00011c0c <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
   11c0c:	b508      	push	{r3, lr}
   11c0e:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
   11c10:	6800      	ldr	r0, [r0, #0]
   11c12:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   11c14:	2101      	movs	r1, #1
   11c16:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
   11c18:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   11c1a:	695b      	ldr	r3, [r3, #20]
   11c1c:	4798      	blx	r3
}
   11c1e:	bd08      	pop	{r3, pc}

00011c20 <k_msleep>:
{
   11c20:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11c22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11c26:	17c1      	asrs	r1, r0, #31
   11c28:	03c9      	lsls	r1, r1, #15
   11c2a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11c2e:	03c0      	lsls	r0, r0, #15
   11c30:	f240 33e7 	movw	r3, #999	; 0x3e7
   11c34:	18c0      	adds	r0, r0, r3
   11c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11c3a:	f04f 0300 	mov.w	r3, #0
   11c3e:	f141 0100 	adc.w	r1, r1, #0
   11c42:	f7ee fe41 	bl	8c8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11c46:	f7ff fc67 	bl	11518 <z_impl_k_sleep>
}
   11c4a:	bd08      	pop	{r3, pc}

00011c4c <k_msleep>:
{
   11c4c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11c4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11c52:	17c1      	asrs	r1, r0, #31
   11c54:	03c9      	lsls	r1, r1, #15
   11c56:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11c5a:	03c0      	lsls	r0, r0, #15
   11c5c:	f240 33e7 	movw	r3, #999	; 0x3e7
   11c60:	18c0      	adds	r0, r0, r3
   11c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11c66:	f04f 0300 	mov.w	r3, #0
   11c6a:	f141 0100 	adc.w	r1, r1, #0
   11c6e:	f7ee fe2b 	bl	8c8 <__aeabi_uldivmod>
   11c72:	f7ff fc51 	bl	11518 <z_impl_k_sleep>
}
   11c76:	bd08      	pop	{r3, pc}

00011c78 <ads1115_reset>:
void ads1115_reset(){
   11c78:	b508      	push	{r3, lr}
    twowire_write_register(DEVICE_ADDRESS, ADS1115_RESET);
   11c7a:	2106      	movs	r1, #6
   11c7c:	2048      	movs	r0, #72	; 0x48
   11c7e:	f7f9 fa95 	bl	b1ac <twowire_write_register>
}
   11c82:	bd08      	pop	{r3, pc}

00011c84 <ads1115_delay_acc_to_rate>:
void ads1115_delay_acc_to_rate(convRate cr){
   11c84:	b508      	push	{r3, lr}
    switch(cr){
   11c86:	2880      	cmp	r0, #128	; 0x80
   11c88:	d026      	beq.n	11cd8 <ads1115_delay_acc_to_rate+0x54>
   11c8a:	d80f      	bhi.n	11cac <ads1115_delay_acc_to_rate+0x28>
   11c8c:	2840      	cmp	r0, #64	; 0x40
   11c8e:	d01f      	beq.n	11cd0 <ads1115_delay_acc_to_rate+0x4c>
   11c90:	d905      	bls.n	11c9e <ads1115_delay_acc_to_rate+0x1a>
   11c92:	2860      	cmp	r0, #96	; 0x60
   11c94:	d11b      	bne.n	11cce <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(16);
   11c96:	2010      	movs	r0, #16
   11c98:	f7ff ffd8 	bl	11c4c <k_msleep>
            break;
   11c9c:	e017      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>
    switch(cr){
   11c9e:	b198      	cbz	r0, 11cc8 <ads1115_delay_acc_to_rate+0x44>
   11ca0:	2820      	cmp	r0, #32
   11ca2:	d114      	bne.n	11cce <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(65);
   11ca4:	2041      	movs	r0, #65	; 0x41
   11ca6:	f7ff ffd1 	bl	11c4c <k_msleep>
            break;
   11caa:	e010      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>
    switch(cr){
   11cac:	28c0      	cmp	r0, #192	; 0xc0
   11cae:	d017      	beq.n	11ce0 <ads1115_delay_acc_to_rate+0x5c>
   11cb0:	28e0      	cmp	r0, #224	; 0xe0
   11cb2:	d103      	bne.n	11cbc <ads1115_delay_acc_to_rate+0x38>
            k_msleep(2);
   11cb4:	2002      	movs	r0, #2
   11cb6:	f7ff ffc9 	bl	11c4c <k_msleep>
}
   11cba:	e008      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>
    switch(cr){
   11cbc:	28a0      	cmp	r0, #160	; 0xa0
   11cbe:	d106      	bne.n	11cce <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(4);
   11cc0:	2004      	movs	r0, #4
   11cc2:	f7ff ffc3 	bl	11c4c <k_msleep>
            break;
   11cc6:	e002      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(130);
   11cc8:	2082      	movs	r0, #130	; 0x82
   11cca:	f7ff ffbf 	bl	11c4c <k_msleep>
}
   11cce:	bd08      	pop	{r3, pc}
            k_msleep(32);
   11cd0:	2020      	movs	r0, #32
   11cd2:	f7ff ffbb 	bl	11c4c <k_msleep>
            break;
   11cd6:	e7fa      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(8);
   11cd8:	2008      	movs	r0, #8
   11cda:	f7ff ffb7 	bl	11c4c <k_msleep>
            break;
   11cde:	e7f6      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(3);
   11ce0:	2003      	movs	r0, #3
   11ce2:	f7ff ffb3 	bl	11c4c <k_msleep>
            break;
   11ce6:	e7f2      	b.n	11cce <ads1115_delay_acc_to_rate+0x4a>

00011ce8 <read_register>:

uint32_t map(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax){
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
}

uint16_t read_register(uint8_t regaddr){
   11ce8:	b500      	push	{lr}
   11cea:	b083      	sub	sp, #12
   11cec:	4601      	mov	r1, r0
    uint8_t read_buffer [2];
    twowire_read_register_data(DEVICE_ADDRESS, regaddr, read_buffer);
   11cee:	aa01      	add	r2, sp, #4
   11cf0:	2048      	movs	r0, #72	; 0x48
   11cf2:	f7f9 fa77 	bl	b1e4 <twowire_read_register_data>
    return (uint16_t)(read_buffer[0] << 8 | read_buffer[1]);
   11cf6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11cfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
   11cfe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   11d02:	b003      	add	sp, #12
   11d04:	f85d fb04 	ldr.w	pc, [sp], #4

00011d08 <ads1115_get_conv_rate>:
convRate ads1115_get_conv_rate(){
   11d08:	b508      	push	{r3, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11d0a:	2001      	movs	r0, #1
   11d0c:	f7ff ffec 	bl	11ce8 <read_register>
}
   11d10:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   11d14:	bd08      	pop	{r3, pc}

00011d16 <ads1115_is_busy>:
uint8_t ads1115_is_busy(){
   11d16:	b508      	push	{r3, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11d18:	2001      	movs	r0, #1
   11d1a:	f7ff ffe5 	bl	11ce8 <read_register>
    return (!(currentConfReg>>15) & 1);
   11d1e:	b200      	sxth	r0, r0
}
   11d20:	43c0      	mvns	r0, r0
   11d22:	0fc0      	lsrs	r0, r0, #31
   11d24:	bd08      	pop	{r3, pc}

00011d26 <write_register>:

void write_register(uint8_t regaddr, uint16_t regval){
   11d26:	b508      	push	{r3, lr}
   11d28:	460a      	mov	r2, r1
    twowire_write_register_data(DEVICE_ADDRESS, regaddr, regval);
   11d2a:	4601      	mov	r1, r0
   11d2c:	2048      	movs	r0, #72	; 0x48
   11d2e:	f7f9 fa99 	bl	b264 <twowire_write_register_data>
   11d32:	bd08      	pop	{r3, pc}

00011d34 <ads1115_set_compare_channels>:
void ads1115_set_compare_channels(mux mux){
   11d34:	b538      	push	{r3, r4, r5, lr}
   11d36:	4605      	mov	r5, r0
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11d38:	2001      	movs	r0, #1
   11d3a:	f7ff ffd5 	bl	11ce8 <read_register>
    currentConfReg &= ~(0xF000);    
   11d3e:	f3c0 040b 	ubfx	r4, r0, #0, #12
    currentConfReg |= (mux);
   11d42:	432c      	orrs	r4, r5
    write_register(ADS1115_CONFIG_REG, currentConfReg);
   11d44:	4621      	mov	r1, r4
   11d46:	2001      	movs	r0, #1
   11d48:	f7ff ffed 	bl	11d26 <write_register>
    if(!(currentConfReg & 0x0100)){  // => if not single shot mode
   11d4c:	f414 7f80 	tst.w	r4, #256	; 0x100
   11d50:	d000      	beq.n	11d54 <ads1115_set_compare_channels+0x20>
}
   11d52:	bd38      	pop	{r3, r4, r5, pc}
        convRate rate = ads1115_get_conv_rate();      
   11d54:	f7ff ffd8 	bl	11d08 <ads1115_get_conv_rate>
   11d58:	4604      	mov	r4, r0
        ads1115_delay_acc_to_rate(rate);
   11d5a:	f7ff ff93 	bl	11c84 <ads1115_delay_acc_to_rate>
        ads1115_delay_acc_to_rate(rate);               
   11d5e:	4620      	mov	r0, r4
   11d60:	f7ff ff90 	bl	11c84 <ads1115_delay_acc_to_rate>
}
   11d64:	e7f5      	b.n	11d52 <ads1115_set_compare_channels+0x1e>

00011d66 <ads1115_set_single_channel>:
    if (channel >=  4)
   11d66:	2803      	cmp	r0, #3
   11d68:	d900      	bls.n	11d6c <ads1115_set_single_channel+0x6>
   11d6a:	4770      	bx	lr
void ads1115_set_single_channel(uint8_t channel) {
   11d6c:	b508      	push	{r3, lr}
    ads1115_set_compare_channels((mux)(ADS1115_COMP_0_GND + ADS1115_COMP_INC*channel));
   11d6e:	3004      	adds	r0, #4
   11d70:	0300      	lsls	r0, r0, #12
   11d72:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
   11d76:	f7ff ffdd 	bl	11d34 <ads1115_set_compare_channels>
}
   11d7a:	bd08      	pop	{r3, pc}

00011d7c <ads1115_start_single_measurement>:
void ads1115_start_single_measurement(){
   11d7c:	b508      	push	{r3, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11d7e:	2001      	movs	r0, #1
   11d80:	f7ff ffb2 	bl	11ce8 <read_register>
    currentConfReg |= (1 << 15);
   11d84:	ea6f 4140 	mvn.w	r1, r0, lsl #17
   11d88:	ea6f 4151 	mvn.w	r1, r1, lsr #17
    write_register(ADS1115_CONFIG_REG, currentConfReg);
   11d8c:	b289      	uxth	r1, r1
   11d8e:	2001      	movs	r0, #1
   11d90:	f7ff ffc9 	bl	11d26 <write_register>
}
   11d94:	bd08      	pop	{r3, pc}

00011d96 <i2c_write>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
   11d96:	b510      	push	{r4, lr}
   11d98:	b084      	sub	sp, #16
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
   11d9a:	9101      	str	r1, [sp, #4]
	msg.len = num_bytes;
   11d9c:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   11d9e:	2202      	movs	r2, #2
   11da0:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
   11da4:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   11da6:	6894      	ldr	r4, [r2, #8]
   11da8:	2201      	movs	r2, #1
   11daa:	a901      	add	r1, sp, #4
   11dac:	47a0      	blx	r4

	return i2c_transfer(dev, &msg, 1, addr);
}
   11dae:	b004      	add	sp, #16
   11db0:	bd10      	pop	{r4, pc}

00011db2 <i2c_write_read>:
 * @retval negative on error.
 */
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
   11db2:	b510      	push	{r4, lr}
   11db4:	b086      	sub	sp, #24
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   11db6:	9200      	str	r2, [sp, #0]
	msg[0].len = num_write;
   11db8:	9301      	str	r3, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   11dba:	2300      	movs	r3, #0
   11dbc:	f88d 3008 	strb.w	r3, [sp, #8]

	msg[1].buf = (uint8_t *)read_buf;
   11dc0:	9b08      	ldr	r3, [sp, #32]
   11dc2:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
   11dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11dc6:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   11dc8:	2307      	movs	r3, #7
   11dca:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   11dce:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   11dd0:	689c      	ldr	r4, [r3, #8]
   11dd2:	460b      	mov	r3, r1
   11dd4:	2202      	movs	r2, #2
   11dd6:	4669      	mov	r1, sp
   11dd8:	47a0      	blx	r4

	return i2c_transfer(dev, msg, 2, addr);
}
   11dda:	b006      	add	sp, #24
   11ddc:	bd10      	pop	{r4, pc}

00011dde <perihperals_init>:
void perihperals_init(){
   11dde:	b508      	push	{r3, lr}
    ads1115_reset();
   11de0:	f7ff ff4a 	bl	11c78 <ads1115_reset>
    ads1115_init();
   11de4:	f7f9 f916 	bl	b014 <ads1115_init>
}
   11de8:	bd08      	pop	{r3, pc}

00011dea <peripherals_ads1115_read_channel>:
int16_t peripherals_ads1115_read_channel(uint8_t channel){
   11dea:	b508      	push	{r3, lr}
  ads1115_set_single_channel(channel);
   11dec:	f7ff ffbb 	bl	11d66 <ads1115_set_single_channel>
  ads1115_start_single_measurement();
   11df0:	f7ff ffc4 	bl	11d7c <ads1115_start_single_measurement>
  while(ads1115_is_busy()){}
   11df4:	f7ff ff8f 	bl	11d16 <ads1115_is_busy>
   11df8:	2800      	cmp	r0, #0
   11dfa:	d1fb      	bne.n	11df4 <peripherals_ads1115_read_channel+0xa>
  voltage = ads1115_get_result_mV();
   11dfc:	f7f9 f9ac 	bl	b158 <ads1115_get_result_mV>
}
   11e00:	bd08      	pop	{r3, pc}

00011e02 <TPL0401x_update_resistance>:
 ******************************************************************************/

#include "TPL0401x.h"


void TPL0401x_update_resistance(uint8_t value){
   11e02:	b508      	push	{r3, lr}
   11e04:	4602      	mov	r2, r0
    twowire_write_register_byte(TPL_ADDRESS, REG_WIPER, value);
   11e06:	2100      	movs	r1, #0
   11e08:	202e      	movs	r0, #46	; 0x2e
   11e0a:	f7f9 fa0b 	bl	b224 <twowire_write_register_byte>
}
   11e0e:	bd08      	pop	{r3, pc}

00011e10 <adc_channel_setup_dt>:
{
   11e10:	b508      	push	{r3, lr}
	if (!spec->channel_cfg_dt_node_exists) {
   11e12:	7943      	ldrb	r3, [r0, #5]
   11e14:	b133      	cbz	r3, 11e24 <adc_channel_setup_dt+0x14>
   11e16:	4601      	mov	r1, r0
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
   11e18:	f851 0b06 	ldr.w	r0, [r1], #6
	const struct adc_driver_api *api =
   11e1c:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
   11e1e:	681b      	ldr	r3, [r3, #0]
   11e20:	4798      	blx	r3
}
   11e22:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   11e24:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11e28:	e7fb      	b.n	11e22 <adc_channel_setup_dt+0x12>

00011e2a <k_msleep>:
{
   11e2a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11e2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11e30:	17c1      	asrs	r1, r0, #31
   11e32:	03c9      	lsls	r1, r1, #15
   11e34:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11e38:	03c0      	lsls	r0, r0, #15
   11e3a:	f240 33e7 	movw	r3, #999	; 0x3e7
   11e3e:	18c0      	adds	r0, r0, r3
   11e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e44:	f04f 0300 	mov.w	r3, #0
   11e48:	f141 0100 	adc.w	r1, r1, #0
   11e4c:	f7ee fd3c 	bl	8c8 <__aeabi_uldivmod>
   11e50:	f7ff fb62 	bl	11518 <z_impl_k_sleep>
}
   11e54:	bd08      	pop	{r3, pc}

00011e56 <adc_raw_to_millivolts>:
{
   11e56:	b530      	push	{r4, r5, lr}
   11e58:	b083      	sub	sp, #12
   11e5a:	4684      	mov	ip, r0
   11e5c:	4608      	mov	r0, r1
   11e5e:	4615      	mov	r5, r2
   11e60:	461c      	mov	r4, r3
	int32_t adc_mv = *valp * ref_mv;
   11e62:	681b      	ldr	r3, [r3, #0]
   11e64:	fb0c f303 	mul.w	r3, ip, r3
   11e68:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   11e6a:	a901      	add	r1, sp, #4
   11e6c:	f7fb fe12 	bl	da94 <adc_gain_invert>
	if (ret == 0) {
   11e70:	b910      	cbnz	r0, 11e78 <adc_raw_to_millivolts+0x22>
		*valp = (adc_mv >> resolution);
   11e72:	9b01      	ldr	r3, [sp, #4]
   11e74:	412b      	asrs	r3, r5
   11e76:	6023      	str	r3, [r4, #0]
}
   11e78:	b003      	add	sp, #12
   11e7a:	bd30      	pop	{r4, r5, pc}

00011e7c <adc_raw_to_millivolts_dt>:
	if (!spec->channel_cfg_dt_node_exists) {
   11e7c:	7942      	ldrb	r2, [r0, #5]
   11e7e:	b1c2      	cbz	r2, 11eb2 <adc_raw_to_millivolts_dt+0x36>
{
   11e80:	b508      	push	{r3, lr}
   11e82:	4684      	mov	ip, r0
   11e84:	460b      	mov	r3, r1
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
   11e86:	79c2      	ldrb	r2, [r0, #7]
   11e88:	2a04      	cmp	r2, #4
   11e8a:	d00e      	beq.n	11eaa <adc_raw_to_millivolts_dt+0x2e>
		vref_mv = spec->vref_mv;
   11e8c:	89c0      	ldrh	r0, [r0, #14]
	resolution = spec->resolution;
   11e8e:	f89c 2010 	ldrb.w	r2, [ip, #16]
	if (spec->channel_cfg.differential) {
   11e92:	f89c 100a 	ldrb.w	r1, [ip, #10]
   11e96:	f011 0f20 	tst.w	r1, #32
   11e9a:	d001      	beq.n	11ea0 <adc_raw_to_millivolts_dt+0x24>
		resolution -= 1U;
   11e9c:	3a01      	subs	r2, #1
   11e9e:	b2d2      	uxtb	r2, r2
	return adc_raw_to_millivolts(vref_mv, spec->channel_cfg.gain,
   11ea0:	f89c 1006 	ldrb.w	r1, [ip, #6]
   11ea4:	f7ff ffd7 	bl	11e56 <adc_raw_to_millivolts>
}
   11ea8:	bd08      	pop	{r3, pc}
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
   11eaa:	6802      	ldr	r2, [r0, #0]
	const struct adc_driver_api *api =
   11eac:	6892      	ldr	r2, [r2, #8]
	return api->ref_internal;
   11eae:	8910      	ldrh	r0, [r2, #8]
   11eb0:	e7ed      	b.n	11e8e <adc_raw_to_millivolts_dt+0x12>
		return -ENOTSUP;
   11eb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11eb6:	4770      	bx	lr

00011eb8 <arch_printk_char_out>:
}
   11eb8:	2000      	movs	r0, #0
   11eba:	4770      	bx	lr

00011ebc <str_out>:
{
   11ebc:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11ebe:	680c      	ldr	r4, [r1, #0]
   11ec0:	b154      	cbz	r4, 11ed8 <str_out+0x1c>
   11ec2:	688a      	ldr	r2, [r1, #8]
   11ec4:	684b      	ldr	r3, [r1, #4]
   11ec6:	429a      	cmp	r2, r3
   11ec8:	da06      	bge.n	11ed8 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   11eca:	3b01      	subs	r3, #1
   11ecc:	429a      	cmp	r2, r3
   11ece:	d008      	beq.n	11ee2 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   11ed0:	1c53      	adds	r3, r2, #1
   11ed2:	608b      	str	r3, [r1, #8]
   11ed4:	54a0      	strb	r0, [r4, r2]
   11ed6:	e002      	b.n	11ede <str_out+0x22>
		ctx->count++;
   11ed8:	688b      	ldr	r3, [r1, #8]
   11eda:	3301      	adds	r3, #1
   11edc:	608b      	str	r3, [r1, #8]
}
   11ede:	bc10      	pop	{r4}
   11ee0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   11ee2:	1c53      	adds	r3, r2, #1
   11ee4:	608b      	str	r3, [r1, #8]
   11ee6:	2300      	movs	r3, #0
   11ee8:	54a3      	strb	r3, [r4, r2]
   11eea:	e7f8      	b.n	11ede <str_out+0x22>

00011eec <printk>:
{
   11eec:	b40f      	push	{r0, r1, r2, r3}
   11eee:	b500      	push	{lr}
   11ef0:	b083      	sub	sp, #12
   11ef2:	a904      	add	r1, sp, #16
   11ef4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11ef8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   11efa:	f7f9 fb05 	bl	b508 <vprintk>
}
   11efe:	b003      	add	sp, #12
   11f00:	f85d eb04 	ldr.w	lr, [sp], #4
   11f04:	b004      	add	sp, #16
   11f06:	4770      	bx	lr

00011f08 <snprintk>:
{
   11f08:	b40c      	push	{r2, r3}
   11f0a:	b500      	push	{lr}
   11f0c:	b083      	sub	sp, #12
   11f0e:	ab04      	add	r3, sp, #16
   11f10:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11f14:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11f16:	f7f9 fb05 	bl	b524 <vsnprintk>
}
   11f1a:	b003      	add	sp, #12
   11f1c:	f85d eb04 	ldr.w	lr, [sp], #4
   11f20:	b002      	add	sp, #8
   11f22:	4770      	bx	lr

00011f24 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11f24:	b508      	push	{r3, lr}
   11f26:	4604      	mov	r4, r0
   11f28:	4608      	mov	r0, r1
   11f2a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11f2c:	461a      	mov	r2, r3
   11f2e:	47a0      	blx	r4
	return z_impl_z_current_get();
   11f30:	f7ff fb1c 	bl	1156c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11f34:	f7fa fbc0 	bl	c6b8 <z_impl_k_thread_abort>

00011f38 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   11f38:	00c9      	lsls	r1, r1, #3
   11f3a:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   11f3c:	4408      	add	r0, r1
   11f3e:	4770      	bx	lr

00011f40 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11f40:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11f44:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   11f48:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   11f4a:	4299      	cmp	r1, r3
   11f4c:	d00c      	beq.n	11f68 <free_list_remove_bidx+0x28>
   11f4e:	4484      	add	ip, r0
   11f50:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   11f54:	3204      	adds	r2, #4
   11f56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11f5a:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   11f5c:	3206      	adds	r2, #6
   11f5e:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   11f60:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   11f62:	3304      	adds	r3, #4
   11f64:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   11f66:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   11f68:	68c3      	ldr	r3, [r0, #12]
   11f6a:	2101      	movs	r1, #1
   11f6c:	4091      	lsls	r1, r2
   11f6e:	ea23 0301 	bic.w	r3, r3, r1
   11f72:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11f74:	3204      	adds	r2, #4
   11f76:	2300      	movs	r3, #0
   11f78:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   11f7c:	4770      	bx	lr

00011f7e <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   11f7e:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   11f80:	1d13      	adds	r3, r2, #4
   11f82:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   11f86:	b974      	cbnz	r4, 11fa6 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   11f88:	68c3      	ldr	r3, [r0, #12]
   11f8a:	2401      	movs	r4, #1
   11f8c:	4094      	lsls	r4, r2
   11f8e:	4323      	orrs	r3, r4
   11f90:	60c3      	str	r3, [r0, #12]
		b->next = c;
   11f92:	3204      	adds	r2, #4
   11f94:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   11f98:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   11f9a:	1d1a      	adds	r2, r3, #4
   11f9c:	b289      	uxth	r1, r1
   11f9e:	5281      	strh	r1, [r0, r2]
   11fa0:	3306      	adds	r3, #6
   11fa2:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   11fa4:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   11fa6:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   11fa8:	3204      	adds	r2, #4
   11faa:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   11fac:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   11fb0:	f10c 0e04 	add.w	lr, ip, #4
   11fb4:	f820 300e 	strh.w	r3, [r0, lr]
   11fb8:	f10c 0c06 	add.w	ip, ip, #6
   11fbc:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   11fc0:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   11fc2:	3306      	adds	r3, #6
   11fc4:	b289      	uxth	r1, r1
   11fc6:	52c1      	strh	r1, [r0, r3]
   11fc8:	5281      	strh	r1, [r0, r2]
   11fca:	e7eb      	b.n	11fa4 <free_list_add_bidx+0x26>

00011fcc <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   11fcc:	b500      	push	{lr}
	void *cmem = &buf[c];
   11fce:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   11fd0:	3302      	adds	r3, #2
   11fd2:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   11fd6:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   11fda:	1a89      	subs	r1, r1, r2
   11fdc:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11fe0:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   11fe4:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11fe8:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   11fec:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   11fee:	3302      	adds	r3, #2
   11ff0:	f820 e003 	strh.w	lr, [r0, r3]
   11ff4:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   11ff8:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   11ffa:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   11ffe:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   12002:	f85d fb04 	ldr.w	pc, [sp], #4

00012006 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   12006:	b500      	push	{lr}
	void *cmem = &buf[c];
   12008:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   1200a:	3102      	adds	r1, #2
   1200c:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   12010:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   12014:	f10c 0c02 	add.w	ip, ip, #2
   12018:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1201c:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1201e:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12022:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   12026:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   1202a:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   1202e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   12032:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   12036:	f85d fb04 	ldr.w	pc, [sp], #4

0001203a <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1203a:	3904      	subs	r1, #4
   1203c:	1a08      	subs	r0, r1, r0
}
   1203e:	08c0      	lsrs	r0, r0, #3
   12040:	4770      	bx	lr

00012042 <free_list_remove>:
{
   12042:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   12044:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   12048:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1204a:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1204c:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   12050:	f1c2 021f 	rsb	r2, r2, #31
   12054:	f7ff ff74 	bl	11f40 <free_list_remove_bidx>
}
   12058:	bd08      	pop	{r3, pc}

0001205a <free_list_add>:
{
   1205a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1205c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   12060:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   12062:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   12064:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   12068:	f1c2 021f 	rsb	r2, r2, #31
   1206c:	f7ff ff87 	bl	11f7e <free_list_add_bidx>
}
   12070:	bd08      	pop	{r3, pc}

00012072 <free_chunk>:
{
   12072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12074:	4604      	mov	r4, r0
   12076:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   12078:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   1207a:	1cb7      	adds	r7, r6, #2
   1207c:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   1207e:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   12082:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   12086:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   12088:	f013 0f01 	tst.w	r3, #1
   1208c:	d00c      	beq.n	120a8 <free_chunk+0x36>
   1208e:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   12090:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   12092:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   12096:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   12098:	f013 0f01 	tst.w	r3, #1
   1209c:	d00e      	beq.n	120bc <free_chunk+0x4a>
	free_list_add(h, c);
   1209e:	4629      	mov	r1, r5
   120a0:	4620      	mov	r0, r4
   120a2:	f7ff ffda 	bl	1205a <free_list_add>
}
   120a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   120a8:	f7ff ffcb 	bl	12042 <free_list_remove>
   120ac:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   120ae:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   120b2:	4629      	mov	r1, r5
   120b4:	4620      	mov	r0, r4
   120b6:	f7ff ffa6 	bl	12006 <merge_chunks>
   120ba:	e7e8      	b.n	1208e <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   120bc:	4620      	mov	r0, r4
   120be:	f7ff ffc0 	bl	12042 <free_list_remove>
   120c2:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   120c4:	462a      	mov	r2, r5
   120c6:	1a69      	subs	r1, r5, r1
   120c8:	4620      	mov	r0, r4
   120ca:	f7ff ff9c 	bl	12006 <merge_chunks>
   120ce:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   120d0:	1aed      	subs	r5, r5, r3
   120d2:	e7e4      	b.n	1209e <free_chunk+0x2c>

000120d4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   120d4:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   120d6:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   120da:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   120de:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   120e2:	b1cd      	cbz	r5, 12118 <alloc_chunk+0x44>
   120e4:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   120e8:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   120ec:	1d14      	adds	r4, r2, #4
   120ee:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   120f2:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   120f6:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   120fa:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   120fc:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   12100:	d914      	bls.n	1212c <alloc_chunk+0x58>
   12102:	4484      	add	ip, r0
   12104:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   12108:	1d16      	adds	r6, r2, #4
   1210a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1210e:	f1be 0e01 	subs.w	lr, lr, #1
   12112:	d001      	beq.n	12118 <alloc_chunk+0x44>
   12114:	42a5      	cmp	r5, r4
   12116:	d1e9      	bne.n	120ec <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   12118:	68c4      	ldr	r4, [r0, #12]
   1211a:	f1c3 0220 	rsb	r2, r3, #32
   1211e:	2301      	movs	r3, #1
   12120:	4093      	lsls	r3, r2
   12122:	425b      	negs	r3, r3

	if (bmask != 0U) {
   12124:	401c      	ands	r4, r3
   12126:	d105      	bne.n	12134 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   12128:	4620      	mov	r0, r4
   1212a:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   1212c:	4621      	mov	r1, r4
   1212e:	f7ff ff07 	bl	11f40 <free_list_remove_bidx>
				return c;
   12132:	e7f9      	b.n	12128 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   12134:	fa94 f2a4 	rbit	r2, r4
   12138:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1213c:	1d13      	adds	r3, r2, #4
   1213e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   12142:	4621      	mov	r1, r4
   12144:	f7ff fefc 	bl	11f40 <free_list_remove_bidx>
		return c;
   12148:	e7ee      	b.n	12128 <alloc_chunk+0x54>

0001214a <sys_heap_free>:
	if (mem == NULL) {
   1214a:	b179      	cbz	r1, 1216c <sys_heap_free+0x22>
{
   1214c:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   1214e:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   12150:	4620      	mov	r0, r4
   12152:	f7ff ff72 	bl	1203a <mem_to_chunkid>
   12156:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   12158:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1215c:	8853      	ldrh	r3, [r2, #2]
   1215e:	f023 0301 	bic.w	r3, r3, #1
   12162:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   12164:	4620      	mov	r0, r4
   12166:	f7ff ff84 	bl	12072 <free_chunk>
}
   1216a:	bd10      	pop	{r4, pc}
   1216c:	4770      	bx	lr

0001216e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1216e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   12170:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   12172:	b341      	cbz	r1, 121c6 <sys_heap_alloc+0x58>
   12174:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   12176:	68aa      	ldr	r2, [r5, #8]
   12178:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1217c:	d925      	bls.n	121ca <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1217e:	330b      	adds	r3, #11
   12180:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   12182:	4621      	mov	r1, r4
   12184:	4628      	mov	r0, r5
   12186:	f7ff ffa5 	bl	120d4 <alloc_chunk>
	if (c == 0U) {
   1218a:	4607      	mov	r7, r0
   1218c:	b1f8      	cbz	r0, 121ce <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   1218e:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   12190:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   12194:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   12196:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1219a:	d309      	bcc.n	121b0 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   1219c:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1219e:	885a      	ldrh	r2, [r3, #2]
   121a0:	f042 0201 	orr.w	r2, r2, #1
   121a4:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   121a6:	4639      	mov	r1, r7
   121a8:	4628      	mov	r0, r5
   121aa:	f7ff fec5 	bl	11f38 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   121ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   121b0:	4404      	add	r4, r0
   121b2:	4622      	mov	r2, r4
   121b4:	4601      	mov	r1, r0
   121b6:	4628      	mov	r0, r5
   121b8:	f7ff ff08 	bl	11fcc <split_chunks>
		free_list_add(h, c + chunk_sz);
   121bc:	4621      	mov	r1, r4
   121be:	4628      	mov	r0, r5
   121c0:	f7ff ff4b 	bl	1205a <free_list_add>
   121c4:	e7ea      	b.n	1219c <sys_heap_alloc+0x2e>
		return NULL;
   121c6:	2000      	movs	r0, #0
   121c8:	e7f1      	b.n	121ae <sys_heap_alloc+0x40>
   121ca:	2000      	movs	r0, #0
   121cc:	e7ef      	b.n	121ae <sys_heap_alloc+0x40>
		return NULL;
   121ce:	2000      	movs	r0, #0
   121d0:	e7ed      	b.n	121ae <sys_heap_alloc+0x40>

000121d2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   121d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121d6:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   121d8:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   121da:	424b      	negs	r3, r1
   121dc:	400b      	ands	r3, r1
	if (align != rew) {
   121de:	f101 39ff 	add.w	r9, r1, #4294967295
   121e2:	ea19 0901 	ands.w	r9, r9, r1
   121e6:	d004      	beq.n	121f2 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   121e8:	2b03      	cmp	r3, #3
   121ea:	d847      	bhi.n	1227c <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   121ec:	464c      	mov	r4, r9
	rew = align & -align;
   121ee:	4699      	mov	r9, r3
   121f0:	e003      	b.n	121fa <sys_heap_aligned_alloc+0x28>
   121f2:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   121f4:	2904      	cmp	r1, #4
   121f6:	d93c      	bls.n	12272 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   121f8:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   121fa:	2d00      	cmp	r5, #0
   121fc:	d056      	beq.n	122ac <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   121fe:	68b2      	ldr	r2, [r6, #8]
   12200:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   12204:	d955      	bls.n	122b2 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   12206:	1961      	adds	r1, r4, r5
   12208:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1220a:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1220c:	08c9      	lsrs	r1, r1, #3
   1220e:	4630      	mov	r0, r6
   12210:	f7ff ff60 	bl	120d4 <alloc_chunk>

	if (c0 == 0) {
   12214:	4607      	mov	r7, r0
   12216:	2800      	cmp	r0, #0
   12218:	d04e      	beq.n	122b8 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   1221a:	4601      	mov	r1, r0
   1221c:	4630      	mov	r0, r6
   1221e:	f7ff fe8b 	bl	11f38 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12222:	eb00 0809 	add.w	r8, r0, r9
   12226:	44a0      	add	r8, r4
   12228:	f108 38ff 	add.w	r8, r8, #4294967295
   1222c:	4264      	negs	r4, r4
   1222e:	ea08 0804 	and.w	r8, r8, r4
   12232:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12236:	eb08 0405 	add.w	r4, r8, r5
   1223a:	3407      	adds	r4, #7
   1223c:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   12240:	4641      	mov	r1, r8
   12242:	4630      	mov	r0, r6
   12244:	f7ff fef9 	bl	1203a <mem_to_chunkid>
   12248:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   1224a:	1ba4      	subs	r4, r4, r6
   1224c:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   1224e:	4287      	cmp	r7, r0
   12250:	d318      	bcc.n	12284 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   12252:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   12254:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   12258:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   1225a:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1225e:	429c      	cmp	r4, r3
   12260:	d31a      	bcc.n	12298 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   12262:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12264:	8873      	ldrh	r3, [r6, #2]
   12266:	f043 0301 	orr.w	r3, r3, #1
   1226a:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1226c:	4640      	mov	r0, r8
   1226e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   12272:	4611      	mov	r1, r2
   12274:	f7ff ff7b 	bl	1216e <sys_heap_alloc>
   12278:	4680      	mov	r8, r0
   1227a:	e7f7      	b.n	1226c <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   1227c:	464c      	mov	r4, r9
	rew = align & -align;
   1227e:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   12280:	2304      	movs	r3, #4
   12282:	e7ba      	b.n	121fa <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   12284:	4602      	mov	r2, r0
   12286:	4639      	mov	r1, r7
   12288:	4630      	mov	r0, r6
   1228a:	f7ff fe9f 	bl	11fcc <split_chunks>
		free_list_add(h, c0);
   1228e:	4639      	mov	r1, r7
   12290:	4630      	mov	r0, r6
   12292:	f7ff fee2 	bl	1205a <free_list_add>
   12296:	e7dc      	b.n	12252 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   12298:	4622      	mov	r2, r4
   1229a:	4629      	mov	r1, r5
   1229c:	4630      	mov	r0, r6
   1229e:	f7ff fe95 	bl	11fcc <split_chunks>
		free_list_add(h, c_end);
   122a2:	4621      	mov	r1, r4
   122a4:	4630      	mov	r0, r6
   122a6:	f7ff fed8 	bl	1205a <free_list_add>
   122aa:	e7da      	b.n	12262 <sys_heap_aligned_alloc+0x90>
		return NULL;
   122ac:	f04f 0800 	mov.w	r8, #0
   122b0:	e7dc      	b.n	1226c <sys_heap_aligned_alloc+0x9a>
   122b2:	f04f 0800 	mov.w	r8, #0
   122b6:	e7d9      	b.n	1226c <sys_heap_aligned_alloc+0x9a>
		return NULL;
   122b8:	f04f 0800 	mov.w	r8, #0
   122bc:	e7d6      	b.n	1226c <sys_heap_aligned_alloc+0x9a>

000122be <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   122be:	b570      	push	{r4, r5, r6, lr}
   122c0:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   122c2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   122c4:	1dc8      	adds	r0, r1, #7
   122c6:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   122ca:	440a      	add	r2, r1
   122cc:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   122d0:	1a12      	subs	r2, r2, r0
   122d2:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   122d4:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   122d6:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   122d8:	2300      	movs	r3, #0
   122da:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   122dc:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   122e0:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   122e4:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   122e8:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   122ea:	1dce      	adds	r6, r1, #7
   122ec:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   122ee:	e005      	b.n	122fc <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   122f0:	f103 0c04 	add.w	ip, r3, #4
   122f4:	2400      	movs	r4, #0
   122f6:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   122fa:	3301      	adds	r3, #1
   122fc:	4573      	cmp	r3, lr
   122fe:	dbf7      	blt.n	122f0 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12300:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   12302:	b2a4      	uxth	r4, r4
   12304:	8044      	strh	r4, [r0, #2]
   12306:	f04f 0c00 	mov.w	ip, #0
   1230a:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1230e:	f044 0401 	orr.w	r4, r4, #1
   12312:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12314:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12316:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   1231a:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   1231e:	1ca5      	adds	r5, r4, #2
   12320:	f820 e005 	strh.w	lr, [r0, r5]
   12324:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   12326:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   1232a:	1c95      	adds	r5, r2, #2
   1232c:	f820 c005 	strh.w	ip, [r0, r5]
   12330:	4402      	add	r2, r0
   12332:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12334:	8853      	ldrh	r3, [r2, #2]
   12336:	f043 0301 	orr.w	r3, r3, #1
   1233a:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1233c:	f7ff fe8d 	bl	1205a <free_list_add>
}
   12340:	bd70      	pop	{r4, r5, r6, pc}

00012342 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   12342:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12346:	8b03      	ldrh	r3, [r0, #24]
   12348:	f023 0307 	bic.w	r3, r3, #7
   1234c:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1234e:	8303      	strh	r3, [r0, #24]
}
   12350:	4770      	bx	lr

00012352 <notify_monitors>:
{
   12352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12356:	4606      	mov	r6, r0
   12358:	460f      	mov	r7, r1
   1235a:	4690      	mov	r8, r2
	return list->head;
   1235c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1235e:	b121      	cbz	r1, 1236a <notify_monitors+0x18>
	return node->next;
   12360:	680c      	ldr	r4, [r1, #0]
   12362:	b13c      	cbz	r4, 12374 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12364:	b931      	cbnz	r1, 12374 <notify_monitors+0x22>
   12366:	460c      	mov	r4, r1
   12368:	e004      	b.n	12374 <notify_monitors+0x22>
   1236a:	460c      	mov	r4, r1
   1236c:	e002      	b.n	12374 <notify_monitors+0x22>
   1236e:	4623      	mov	r3, r4
   12370:	4621      	mov	r1, r4
   12372:	461c      	mov	r4, r3
   12374:	b169      	cbz	r1, 12392 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   12376:	684d      	ldr	r5, [r1, #4]
   12378:	4643      	mov	r3, r8
   1237a:	463a      	mov	r2, r7
   1237c:	4630      	mov	r0, r6
   1237e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12380:	2c00      	cmp	r4, #0
   12382:	d0f4      	beq.n	1236e <notify_monitors+0x1c>
	return node->next;
   12384:	6823      	ldr	r3, [r4, #0]
   12386:	2b00      	cmp	r3, #0
   12388:	d0f2      	beq.n	12370 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1238a:	2c00      	cmp	r4, #0
   1238c:	d1f0      	bne.n	12370 <notify_monitors+0x1e>
   1238e:	4623      	mov	r3, r4
   12390:	e7ee      	b.n	12370 <notify_monitors+0x1e>
}
   12392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012396 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12396:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   12398:	f013 0307 	ands.w	r3, r3, #7
   1239c:	d103      	bne.n	123a6 <process_recheck+0x10>
	return list->head;
   1239e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   123a0:	b10a      	cbz	r2, 123a6 <process_recheck+0x10>
		evt = EVT_START;
   123a2:	2003      	movs	r0, #3
   123a4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   123a6:	2b02      	cmp	r3, #2
   123a8:	d003      	beq.n	123b2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   123aa:	2b01      	cmp	r3, #1
   123ac:	d006      	beq.n	123bc <process_recheck+0x26>
	int evt = EVT_NOP;
   123ae:	2000      	movs	r0, #0
   123b0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   123b2:	8b42      	ldrh	r2, [r0, #26]
   123b4:	2a00      	cmp	r2, #0
   123b6:	d1f8      	bne.n	123aa <process_recheck+0x14>
		evt = EVT_STOP;
   123b8:	2004      	movs	r0, #4
   123ba:	4770      	bx	lr
   123bc:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   123be:	b10b      	cbz	r3, 123c4 <process_recheck+0x2e>
		evt = EVT_RESET;
   123c0:	2005      	movs	r0, #5
}
   123c2:	4770      	bx	lr
	int evt = EVT_NOP;
   123c4:	2000      	movs	r0, #0
   123c6:	4770      	bx	lr

000123c8 <process_complete>:
{
   123c8:	b510      	push	{r4, lr}
   123ca:	4604      	mov	r4, r0
   123cc:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   123ce:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   123d0:	2a00      	cmp	r2, #0
   123d2:	db07      	blt.n	123e4 <process_complete+0x1c>
   123d4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   123d8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   123da:	2a01      	cmp	r2, #1
   123dc:	d90e      	bls.n	123fc <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   123de:	2b04      	cmp	r3, #4
   123e0:	d036      	beq.n	12450 <process_complete+0x88>
}
   123e2:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   123e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   123e8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   123ec:	2300      	movs	r3, #0
   123ee:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   123f0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   123f2:	2101      	movs	r1, #1
   123f4:	4620      	mov	r0, r4
   123f6:	f7ff ffa4 	bl	12342 <set_state>
   123fa:	e7f2      	b.n	123e2 <process_complete+0x1a>
		*clients = mgr->clients;
   123fc:	e9d0 0100 	ldrd	r0, r1, [r0]
   12400:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   12404:	2200      	movs	r2, #0
   12406:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   12408:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1240a:	2b06      	cmp	r3, #6
   1240c:	d11b      	bne.n	12446 <process_complete+0x7e>
	return list->head;
   1240e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12412:	b153      	cbz	r3, 1242a <process_complete+0x62>
				mgr->refs += 1U;
   12414:	8b62      	ldrh	r2, [r4, #26]
   12416:	3201      	adds	r2, #1
   12418:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1241a:	461a      	mov	r2, r3
	return node->next;
   1241c:	681b      	ldr	r3, [r3, #0]
   1241e:	2b00      	cmp	r3, #0
   12420:	d0f7      	beq.n	12412 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12422:	2a00      	cmp	r2, #0
   12424:	d1f5      	bne.n	12412 <process_complete+0x4a>
   12426:	4613      	mov	r3, r2
   12428:	e7f3      	b.n	12412 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   1242a:	2102      	movs	r1, #2
   1242c:	4620      	mov	r0, r4
   1242e:	f7ff ff88 	bl	12342 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   12432:	4620      	mov	r0, r4
   12434:	f7ff ffaf 	bl	12396 <process_recheck>
   12438:	2800      	cmp	r0, #0
   1243a:	d0d2      	beq.n	123e2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1243c:	8b23      	ldrh	r3, [r4, #24]
   1243e:	f043 0320 	orr.w	r3, r3, #32
   12442:	8323      	strh	r3, [r4, #24]
   12444:	e7cd      	b.n	123e2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   12446:	2100      	movs	r1, #0
   12448:	4620      	mov	r0, r4
   1244a:	f7ff ff7a 	bl	12342 <set_state>
   1244e:	e7f0      	b.n	12432 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   12450:	2100      	movs	r1, #0
   12452:	f7ff ff76 	bl	12342 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   12456:	4620      	mov	r0, r4
   12458:	f7ff ff9d 	bl	12396 <process_recheck>
   1245c:	2800      	cmp	r0, #0
   1245e:	d0c0      	beq.n	123e2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12460:	8b23      	ldrh	r3, [r4, #24]
   12462:	f043 0320 	orr.w	r3, r3, #32
   12466:	8323      	strh	r3, [r4, #24]
}
   12468:	e7bb      	b.n	123e2 <process_complete+0x1a>

0001246a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1246a:	b150      	cbz	r0, 12482 <validate_args+0x18>
{
   1246c:	b510      	push	{r4, lr}
   1246e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   12470:	b151      	cbz	r1, 12488 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   12472:	1d08      	adds	r0, r1, #4
   12474:	f000 f8c4 	bl	12600 <sys_notify_validate>
	if ((rv == 0)
   12478:	b910      	cbnz	r0, 12480 <validate_args+0x16>
	    && ((cli->notify.flags
   1247a:	68a3      	ldr	r3, [r4, #8]
   1247c:	2b03      	cmp	r3, #3
   1247e:	d806      	bhi.n	1248e <validate_args+0x24>
}
   12480:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12482:	f06f 0015 	mvn.w	r0, #21
}
   12486:	4770      	bx	lr
		return -EINVAL;
   12488:	f06f 0015 	mvn.w	r0, #21
   1248c:	e7f8      	b.n	12480 <validate_args+0x16>
		rv = -EINVAL;
   1248e:	f06f 0015 	mvn.w	r0, #21
   12492:	e7f5      	b.n	12480 <validate_args+0x16>

00012494 <notify_one>:
{
   12494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12498:	4607      	mov	r7, r0
   1249a:	460c      	mov	r4, r1
   1249c:	4616      	mov	r6, r2
   1249e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   124a0:	4619      	mov	r1, r3
   124a2:	1d20      	adds	r0, r4, #4
   124a4:	f000 f8cb 	bl	1263e <sys_notify_finalize>
	if (cb) {
   124a8:	b128      	cbz	r0, 124b6 <notify_one+0x22>
   124aa:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   124ac:	462b      	mov	r3, r5
   124ae:	4632      	mov	r2, r6
   124b0:	4621      	mov	r1, r4
   124b2:	4638      	mov	r0, r7
   124b4:	47c0      	blx	r8
}
   124b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000124ba <notify_all>:
{
   124ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   124be:	4680      	mov	r8, r0
   124c0:	460c      	mov	r4, r1
   124c2:	4617      	mov	r7, r2
   124c4:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   124c6:	e004      	b.n	124d2 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   124c8:	4633      	mov	r3, r6
   124ca:	463a      	mov	r2, r7
   124cc:	4640      	mov	r0, r8
   124ce:	f7ff ffe1 	bl	12494 <notify_one>
	return list->head;
   124d2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   124d4:	b131      	cbz	r1, 124e4 <notify_all+0x2a>
	return node->next;
   124d6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   124d8:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   124da:	6863      	ldr	r3, [r4, #4]
   124dc:	428b      	cmp	r3, r1
   124de:	d1f3      	bne.n	124c8 <notify_all+0xe>
	list->tail = node;
   124e0:	6065      	str	r5, [r4, #4]
}
   124e2:	e7f1      	b.n	124c8 <notify_all+0xe>
}
   124e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000124e8 <transition_complete>:
{
   124e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   124ea:	f04f 0c40 	mov.w	ip, #64	; 0x40
   124ee:	f3ef 8211 	mrs	r2, BASEPRI
   124f2:	f38c 8812 	msr	BASEPRI_MAX, ip
   124f6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   124fa:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   124fc:	2101      	movs	r1, #1
   124fe:	f7f9 f829 	bl	b554 <process_event>
}
   12502:	bd08      	pop	{r3, pc}

00012504 <onoff_manager_init>:
	if ((mgr == NULL)
   12504:	4603      	mov	r3, r0
   12506:	b170      	cbz	r0, 12526 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   12508:	b181      	cbz	r1, 1252c <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   1250a:	680a      	ldr	r2, [r1, #0]
   1250c:	b18a      	cbz	r2, 12532 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   1250e:	684a      	ldr	r2, [r1, #4]
   12510:	b192      	cbz	r2, 12538 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   12512:	2000      	movs	r0, #0
   12514:	6018      	str	r0, [r3, #0]
   12516:	6058      	str	r0, [r3, #4]
   12518:	6098      	str	r0, [r3, #8]
   1251a:	60d8      	str	r0, [r3, #12]
   1251c:	6118      	str	r0, [r3, #16]
   1251e:	6158      	str	r0, [r3, #20]
   12520:	6198      	str	r0, [r3, #24]
   12522:	6119      	str	r1, [r3, #16]
	return 0;
   12524:	4770      	bx	lr
		return -EINVAL;
   12526:	f06f 0015 	mvn.w	r0, #21
   1252a:	4770      	bx	lr
   1252c:	f06f 0015 	mvn.w	r0, #21
   12530:	4770      	bx	lr
   12532:	f06f 0015 	mvn.w	r0, #21
   12536:	4770      	bx	lr
   12538:	f06f 0015 	mvn.w	r0, #21
}
   1253c:	4770      	bx	lr

0001253e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1253e:	b570      	push	{r4, r5, r6, lr}
   12540:	4605      	mov	r5, r0
   12542:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12544:	f7ff ff91 	bl	1246a <validate_args>

	if (rv < 0) {
   12548:	1e04      	subs	r4, r0, #0
   1254a:	db30      	blt.n	125ae <onoff_request+0x70>
   1254c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12550:	f3ef 8211 	mrs	r2, BASEPRI
   12554:	f383 8812 	msr	BASEPRI_MAX, r3
   12558:	f3bf 8f6f 	isb	sy
   1255c:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1255e:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   12562:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12566:	8b6b      	ldrh	r3, [r5, #26]
   12568:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1256c:	428b      	cmp	r3, r1
   1256e:	d02c      	beq.n	125ca <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   12570:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   12572:	f1bc 0f02 	cmp.w	ip, #2
   12576:	d008      	beq.n	1258a <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   12578:	f1bc 0f06 	cmp.w	ip, #6
   1257c:	d819      	bhi.n	125b2 <onoff_request+0x74>
   1257e:	e8df f00c 	tbb	[pc, ip]
   12582:	181e      	.short	0x181e
   12584:	2a1e1818 	.word	0x2a1e1818
   12588:	1e          	.byte	0x1e
   12589:	00          	.byte	0x00
		mgr->refs += 1U;
   1258a:	3301      	adds	r3, #1
   1258c:	836b      	strh	r3, [r5, #26]
		notify = true;
   1258e:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   12590:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   12592:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   12594:	b128      	cbz	r0, 125a2 <onoff_request+0x64>
	parent->next = child;
   12596:	2000      	movs	r0, #0
   12598:	6030      	str	r0, [r6, #0]
	return list->tail;
   1259a:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1259c:	b308      	cbz	r0, 125e2 <onoff_request+0xa4>
	parent->next = child;
   1259e:	6006      	str	r6, [r0, #0]
	list->tail = node;
   125a0:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   125a2:	bb09      	cbnz	r1, 125e8 <onoff_request+0xaa>
	__asm__ volatile(
   125a4:	f38e 8811 	msr	BASEPRI, lr
   125a8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   125ac:	bb0b      	cbnz	r3, 125f2 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   125ae:	4620      	mov	r0, r4
   125b0:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   125b2:	f06f 0404 	mvn.w	r4, #4
   125b6:	2300      	movs	r3, #0
   125b8:	4619      	mov	r1, r3
   125ba:	4618      	mov	r0, r3
   125bc:	e7ea      	b.n	12594 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   125be:	fabc f18c 	clz	r1, ip
   125c2:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   125c4:	2300      	movs	r3, #0
		add_client = true;
   125c6:	2001      	movs	r0, #1
   125c8:	e7e4      	b.n	12594 <onoff_request+0x56>
		rv = -EAGAIN;
   125ca:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   125ce:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   125d0:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   125d2:	4618      	mov	r0, r3
   125d4:	e7de      	b.n	12594 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   125d6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   125da:	2300      	movs	r3, #0
   125dc:	4619      	mov	r1, r3
   125de:	4618      	mov	r0, r3
   125e0:	e7d8      	b.n	12594 <onoff_request+0x56>
   125e2:	606e      	str	r6, [r5, #4]
	list->head = node;
   125e4:	602e      	str	r6, [r5, #0]
}
   125e6:	e7dc      	b.n	125a2 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   125e8:	2102      	movs	r1, #2
   125ea:	4628      	mov	r0, r5
   125ec:	f7f8 ffb2 	bl	b554 <process_event>
   125f0:	e7dd      	b.n	125ae <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   125f2:	2300      	movs	r3, #0
   125f4:	4662      	mov	r2, ip
   125f6:	4631      	mov	r1, r6
   125f8:	4628      	mov	r0, r5
   125fa:	f7ff ff4b 	bl	12494 <notify_one>
   125fe:	e7d6      	b.n	125ae <onoff_request+0x70>

00012600 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   12600:	4602      	mov	r2, r0
   12602:	b1b0      	cbz	r0, 12632 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12604:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   12606:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1260a:	2b02      	cmp	r3, #2
   1260c:	d00b      	beq.n	12626 <sys_notify_validate+0x26>
   1260e:	2b03      	cmp	r3, #3
   12610:	d004      	beq.n	1261c <sys_notify_validate+0x1c>
   12612:	2b01      	cmp	r3, #1
   12614:	d004      	beq.n	12620 <sys_notify_validate+0x20>
   12616:	f06f 0015 	mvn.w	r0, #21
   1261a:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1261c:	6803      	ldr	r3, [r0, #0]
   1261e:	b15b      	cbz	r3, 12638 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   12620:	2000      	movs	r0, #0
   12622:	6090      	str	r0, [r2, #8]
   12624:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   12626:	6803      	ldr	r3, [r0, #0]
   12628:	2b00      	cmp	r3, #0
   1262a:	d1f9      	bne.n	12620 <sys_notify_validate+0x20>
			rv = -EINVAL;
   1262c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   12630:	4770      	bx	lr
		return -EINVAL;
   12632:	f06f 0015 	mvn.w	r0, #21
   12636:	4770      	bx	lr
			rv = -EINVAL;
   12638:	f06f 0015 	mvn.w	r0, #21
   1263c:	4770      	bx	lr

0001263e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1263e:	b510      	push	{r4, lr}
   12640:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12642:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   12644:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   12648:	6081      	str	r1, [r0, #8]
	switch (method) {
   1264a:	2a02      	cmp	r2, #2
   1264c:	d004      	beq.n	12658 <sys_notify_finalize+0x1a>
   1264e:	2a03      	cmp	r2, #3
   12650:	d105      	bne.n	1265e <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12652:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12654:	2000      	movs	r0, #0
		break;
   12656:	e004      	b.n	12662 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   12658:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1265a:	2400      	movs	r4, #0
		break;
   1265c:	e001      	b.n	12662 <sys_notify_finalize+0x24>
	switch (method) {
   1265e:	2400      	movs	r4, #0
   12660:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12662:	2200      	movs	r2, #0
   12664:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12666:	b108      	cbz	r0, 1266c <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   12668:	f7ff fa20 	bl	11aac <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1266c:	4620      	mov	r0, r4
   1266e:	bd10      	pop	{r4, pc}

00012670 <extract_decimal>:
{
   12670:	4684      	mov	ip, r0
	const char *sp = *str;
   12672:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   12674:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12676:	e006      	b.n	12686 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   12678:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1267c:	3201      	adds	r2, #1
   1267e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   12682:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12686:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12688:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1268c:	2909      	cmp	r1, #9
   1268e:	d9f3      	bls.n	12678 <extract_decimal+0x8>
	*str = sp;
   12690:	f8cc 2000 	str.w	r2, [ip]
}
   12694:	4770      	bx	lr

00012696 <extract_width>:
{
   12696:	b530      	push	{r4, r5, lr}
   12698:	b083      	sub	sp, #12
   1269a:	4604      	mov	r4, r0
   1269c:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   1269e:	7803      	ldrb	r3, [r0, #0]
   126a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   126a4:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   126a6:	460d      	mov	r5, r1
   126a8:	780b      	ldrb	r3, [r1, #0]
   126aa:	2b2a      	cmp	r3, #42	; 0x2a
   126ac:	d018      	beq.n	126e0 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   126ae:	a801      	add	r0, sp, #4
   126b0:	f7ff ffde 	bl	12670 <extract_decimal>
	if (sp != wp) {
   126b4:	9b01      	ldr	r3, [sp, #4]
   126b6:	429d      	cmp	r5, r3
   126b8:	d00f      	beq.n	126da <extract_width+0x44>
		conv->width_present = true;
   126ba:	7823      	ldrb	r3, [r4, #0]
   126bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   126c0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   126c2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   126c4:	b2db      	uxtb	r3, r3
   126c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   126ca:	2800      	cmp	r0, #0
   126cc:	db10      	blt.n	126f0 <extract_width+0x5a>
   126ce:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   126d0:	4313      	orrs	r3, r2
   126d2:	7822      	ldrb	r2, [r4, #0]
   126d4:	f363 0241 	bfi	r2, r3, #1, #1
   126d8:	7022      	strb	r2, [r4, #0]
	return sp;
   126da:	9801      	ldr	r0, [sp, #4]
}
   126dc:	b003      	add	sp, #12
   126de:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   126e0:	7843      	ldrb	r3, [r0, #1]
   126e2:	f043 0301 	orr.w	r3, r3, #1
   126e6:	7043      	strb	r3, [r0, #1]
		return ++sp;
   126e8:	4608      	mov	r0, r1
   126ea:	3001      	adds	r0, #1
   126ec:	9001      	str	r0, [sp, #4]
   126ee:	e7f5      	b.n	126dc <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   126f0:	2201      	movs	r2, #1
   126f2:	e7ed      	b.n	126d0 <extract_width+0x3a>

000126f4 <extract_prec>:
{
   126f4:	b510      	push	{r4, lr}
   126f6:	b082      	sub	sp, #8
   126f8:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   126fa:	780b      	ldrb	r3, [r1, #0]
   126fc:	2b2e      	cmp	r3, #46	; 0x2e
   126fe:	bf14      	ite	ne
   12700:	2300      	movne	r3, #0
   12702:	2301      	moveq	r3, #1
   12704:	7842      	ldrb	r2, [r0, #1]
   12706:	f363 0241 	bfi	r2, r3, #1, #1
   1270a:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   1270c:	b1c3      	cbz	r3, 12740 <extract_prec+0x4c>
   1270e:	4604      	mov	r4, r0
	++sp;
   12710:	9b01      	ldr	r3, [sp, #4]
   12712:	1c5a      	adds	r2, r3, #1
   12714:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   12716:	785b      	ldrb	r3, [r3, #1]
   12718:	2b2a      	cmp	r3, #42	; 0x2a
   1271a:	d013      	beq.n	12744 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   1271c:	a801      	add	r0, sp, #4
   1271e:	f7ff ffa7 	bl	12670 <extract_decimal>
	conv->prec_value = prec;
   12722:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   12724:	7823      	ldrb	r3, [r4, #0]
   12726:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   1272a:	2800      	cmp	r0, #0
   1272c:	db12      	blt.n	12754 <extract_prec+0x60>
   1272e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   12730:	4313      	orrs	r3, r2
   12732:	7822      	ldrb	r2, [r4, #0]
   12734:	f363 0241 	bfi	r2, r3, #1, #1
   12738:	7022      	strb	r2, [r4, #0]
	return sp;
   1273a:	9801      	ldr	r0, [sp, #4]
}
   1273c:	b002      	add	sp, #8
   1273e:	bd10      	pop	{r4, pc}
		return sp;
   12740:	4608      	mov	r0, r1
   12742:	e7fb      	b.n	1273c <extract_prec+0x48>
		conv->prec_star = true;
   12744:	7843      	ldrb	r3, [r0, #1]
   12746:	f043 0304 	orr.w	r3, r3, #4
   1274a:	7043      	strb	r3, [r0, #1]
		return ++sp;
   1274c:	4610      	mov	r0, r2
   1274e:	3001      	adds	r0, #1
   12750:	9001      	str	r0, [sp, #4]
   12752:	e7f3      	b.n	1273c <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   12754:	2201      	movs	r2, #1
   12756:	e7eb      	b.n	12730 <extract_prec+0x3c>

00012758 <extract_length>:
{
   12758:	4602      	mov	r2, r0
	switch (*sp) {
   1275a:	780b      	ldrb	r3, [r1, #0]
   1275c:	3b4c      	subs	r3, #76	; 0x4c
   1275e:	2b2e      	cmp	r3, #46	; 0x2e
   12760:	d85b      	bhi.n	1281a <extract_length+0xc2>
   12762:	e8df f003 	tbb	[pc, r3]
   12766:	5a4f      	.short	0x5a4f
   12768:	5a5a5a5a 	.word	0x5a5a5a5a
   1276c:	5a5a5a5a 	.word	0x5a5a5a5a
   12770:	5a5a5a5a 	.word	0x5a5a5a5a
   12774:	5a5a5a5a 	.word	0x5a5a5a5a
   12778:	5a5a5a5a 	.word	0x5a5a5a5a
   1277c:	5a5a5a5a 	.word	0x5a5a5a5a
   12780:	5a185a5a 	.word	0x5a185a5a
   12784:	5a295a3a 	.word	0x5a295a3a
   12788:	5a5a5a5a 	.word	0x5a5a5a5a
   1278c:	5a485a5a 	.word	0x5a485a5a
   12790:	5a5a5a5a 	.word	0x5a5a5a5a
   12794:	41          	.byte	0x41
   12795:	00          	.byte	0x00
		if (*++sp == 'h') {
   12796:	1c48      	adds	r0, r1, #1
   12798:	784b      	ldrb	r3, [r1, #1]
   1279a:	2b68      	cmp	r3, #104	; 0x68
   1279c:	d005      	beq.n	127aa <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   1279e:	7853      	ldrb	r3, [r2, #1]
   127a0:	2102      	movs	r1, #2
   127a2:	f361 03c6 	bfi	r3, r1, #3, #4
   127a6:	7053      	strb	r3, [r2, #1]
   127a8:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   127aa:	7853      	ldrb	r3, [r2, #1]
   127ac:	2001      	movs	r0, #1
   127ae:	f360 03c6 	bfi	r3, r0, #3, #4
   127b2:	7053      	strb	r3, [r2, #1]
			++sp;
   127b4:	1c88      	adds	r0, r1, #2
   127b6:	4770      	bx	lr
		if (*++sp == 'l') {
   127b8:	1c48      	adds	r0, r1, #1
   127ba:	784b      	ldrb	r3, [r1, #1]
   127bc:	2b6c      	cmp	r3, #108	; 0x6c
   127be:	d005      	beq.n	127cc <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   127c0:	7853      	ldrb	r3, [r2, #1]
   127c2:	2103      	movs	r1, #3
   127c4:	f361 03c6 	bfi	r3, r1, #3, #4
   127c8:	7053      	strb	r3, [r2, #1]
   127ca:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   127cc:	7853      	ldrb	r3, [r2, #1]
   127ce:	2004      	movs	r0, #4
   127d0:	f360 03c6 	bfi	r3, r0, #3, #4
   127d4:	7053      	strb	r3, [r2, #1]
			++sp;
   127d6:	1c88      	adds	r0, r1, #2
   127d8:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   127da:	7853      	ldrb	r3, [r2, #1]
   127dc:	2005      	movs	r0, #5
   127de:	f360 03c6 	bfi	r3, r0, #3, #4
   127e2:	7053      	strb	r3, [r2, #1]
		++sp;
   127e4:	1c48      	adds	r0, r1, #1
		break;
   127e6:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   127e8:	7853      	ldrb	r3, [r2, #1]
   127ea:	2006      	movs	r0, #6
   127ec:	f360 03c6 	bfi	r3, r0, #3, #4
   127f0:	7053      	strb	r3, [r2, #1]
		++sp;
   127f2:	1c48      	adds	r0, r1, #1
		break;
   127f4:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   127f6:	7853      	ldrb	r3, [r2, #1]
   127f8:	2007      	movs	r0, #7
   127fa:	f360 03c6 	bfi	r3, r0, #3, #4
   127fe:	7053      	strb	r3, [r2, #1]
		++sp;
   12800:	1c48      	adds	r0, r1, #1
		break;
   12802:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   12804:	7853      	ldrb	r3, [r2, #1]
   12806:	2008      	movs	r0, #8
   12808:	f360 03c6 	bfi	r3, r0, #3, #4
   1280c:	7053      	strb	r3, [r2, #1]
		++sp;
   1280e:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   12810:	7813      	ldrb	r3, [r2, #0]
   12812:	f043 0302 	orr.w	r3, r3, #2
   12816:	7013      	strb	r3, [r2, #0]
		break;
   12818:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   1281a:	7853      	ldrb	r3, [r2, #1]
   1281c:	f36f 03c6 	bfc	r3, #3, #4
   12820:	7053      	strb	r3, [r2, #1]
		break;
   12822:	4608      	mov	r0, r1
}
   12824:	4770      	bx	lr

00012826 <extract_specifier>:
{
   12826:	b500      	push	{lr}
   12828:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   1282a:	4608      	mov	r0, r1
   1282c:	f810 3b01 	ldrb.w	r3, [r0], #1
   12830:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   12832:	2b78      	cmp	r3, #120	; 0x78
   12834:	d817      	bhi.n	12866 <extract_specifier+0x40>
   12836:	2b6e      	cmp	r3, #110	; 0x6e
   12838:	d229      	bcs.n	1288e <extract_specifier+0x68>
   1283a:	2b69      	cmp	r3, #105	; 0x69
   1283c:	d813      	bhi.n	12866 <extract_specifier+0x40>
   1283e:	2b58      	cmp	r3, #88	; 0x58
   12840:	d317      	bcc.n	12872 <extract_specifier+0x4c>
   12842:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   12846:	fa5f fc8c 	uxtb.w	ip, ip
   1284a:	2101      	movs	r1, #1
   1284c:	fa01 f10c 	lsl.w	r1, r1, ip
   12850:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12854:	d114      	bne.n	12880 <extract_specifier+0x5a>
   12856:	f640 0c01 	movw	ip, #2049	; 0x801
   1285a:	ea11 0f0c 	tst.w	r1, ip
   1285e:	d155      	bne.n	1290c <extract_specifier+0xe6>
   12860:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12864:	d13a      	bne.n	128dc <extract_specifier+0xb6>
		conv->invalid = true;
   12866:	7813      	ldrb	r3, [r2, #0]
   12868:	f043 0301 	orr.w	r3, r3, #1
   1286c:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   1286e:	2100      	movs	r1, #0
		break;
   12870:	e042      	b.n	128f8 <extract_specifier+0xd2>
	switch (conv->specifier) {
   12872:	2b41      	cmp	r3, #65	; 0x41
   12874:	d004      	beq.n	12880 <extract_specifier+0x5a>
   12876:	d3f6      	bcc.n	12866 <extract_specifier+0x40>
   12878:	3b45      	subs	r3, #69	; 0x45
   1287a:	b2db      	uxtb	r3, r3
   1287c:	2b02      	cmp	r3, #2
   1287e:	d8f2      	bhi.n	12866 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   12880:	7893      	ldrb	r3, [r2, #2]
   12882:	2104      	movs	r1, #4
   12884:	f361 0302 	bfi	r3, r1, #0, #3
   12888:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   1288a:	2101      	movs	r1, #1
			break;
   1288c:	e034      	b.n	128f8 <extract_specifier+0xd2>
	switch (conv->specifier) {
   1288e:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   12892:	b2c9      	uxtb	r1, r1
   12894:	f04f 0c01 	mov.w	ip, #1
   12898:	fa0c fc01 	lsl.w	ip, ip, r1
   1289c:	f240 4182 	movw	r1, #1154	; 0x482
   128a0:	ea1c 0f01 	tst.w	ip, r1
   128a4:	bf14      	ite	ne
   128a6:	f04f 0e01 	movne.w	lr, #1
   128aa:	f04f 0e00 	moveq.w	lr, #0
   128ae:	d12d      	bne.n	1290c <extract_specifier+0xe6>
   128b0:	f01c 0f24 	tst.w	ip, #36	; 0x24
   128b4:	bf14      	ite	ne
   128b6:	2101      	movne	r1, #1
   128b8:	2100      	moveq	r1, #0
   128ba:	d139      	bne.n	12930 <extract_specifier+0x10a>
   128bc:	f01c 0c01 	ands.w	ip, ip, #1
   128c0:	d0d1      	beq.n	12866 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   128c2:	7893      	ldrb	r3, [r2, #2]
   128c4:	f04f 0e03 	mov.w	lr, #3
   128c8:	f36e 0302 	bfi	r3, lr, #0, #3
   128cc:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   128ce:	7853      	ldrb	r3, [r2, #1]
   128d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   128d4:	2b40      	cmp	r3, #64	; 0x40
   128d6:	d10f      	bne.n	128f8 <extract_specifier+0xd2>
			unsupported = true;
   128d8:	4661      	mov	r1, ip
   128da:	e00d      	b.n	128f8 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   128dc:	7891      	ldrb	r1, [r2, #2]
   128de:	f04f 0c01 	mov.w	ip, #1
   128e2:	f36c 0102 	bfi	r1, ip, #0, #3
   128e6:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   128e8:	7851      	ldrb	r1, [r2, #1]
   128ea:	f001 0178 	and.w	r1, r1, #120	; 0x78
   128ee:	2940      	cmp	r1, #64	; 0x40
   128f0:	d013      	beq.n	1291a <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   128f2:	2b63      	cmp	r3, #99	; 0x63
   128f4:	d018      	beq.n	12928 <extract_specifier+0x102>
	bool unsupported = false;
   128f6:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   128f8:	7813      	ldrb	r3, [r2, #0]
   128fa:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   128fe:	ea41 010c 	orr.w	r1, r1, ip
   12902:	f361 0341 	bfi	r3, r1, #1, #1
   12906:	7013      	strb	r3, [r2, #0]
}
   12908:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   1290c:	7891      	ldrb	r1, [r2, #2]
   1290e:	f04f 0c02 	mov.w	ip, #2
   12912:	f36c 0102 	bfi	r1, ip, #0, #3
   12916:	7091      	strb	r1, [r2, #2]
   12918:	e7e6      	b.n	128e8 <extract_specifier+0xc2>
			conv->invalid = true;
   1291a:	f892 c000 	ldrb.w	ip, [r2]
   1291e:	f04c 0c01 	orr.w	ip, ip, #1
   12922:	f882 c000 	strb.w	ip, [r2]
   12926:	e7e4      	b.n	128f2 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12928:	3900      	subs	r1, #0
   1292a:	bf18      	it	ne
   1292c:	2101      	movne	r1, #1
   1292e:	e7e3      	b.n	128f8 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   12930:	7893      	ldrb	r3, [r2, #2]
   12932:	f04f 0c03 	mov.w	ip, #3
   12936:	f36c 0302 	bfi	r3, ip, #0, #3
   1293a:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   1293c:	7853      	ldrb	r3, [r2, #1]
   1293e:	f013 0f78 	tst.w	r3, #120	; 0x78
   12942:	d1d9      	bne.n	128f8 <extract_specifier+0xd2>
	bool unsupported = false;
   12944:	4671      	mov	r1, lr
   12946:	e7d7      	b.n	128f8 <extract_specifier+0xd2>

00012948 <extract_conversion>:
{
   12948:	b510      	push	{r4, lr}
   1294a:	4604      	mov	r4, r0
   1294c:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   1294e:	2300      	movs	r3, #0
   12950:	6023      	str	r3, [r4, #0]
   12952:	6063      	str	r3, [r4, #4]
   12954:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   12956:	784b      	ldrb	r3, [r1, #1]
   12958:	2b25      	cmp	r3, #37	; 0x25
   1295a:	d014      	beq.n	12986 <extract_conversion+0x3e>
   1295c:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   1295e:	4620      	mov	r0, r4
   12960:	f7f8 feae 	bl	b6c0 <extract_flags>
   12964:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   12966:	4620      	mov	r0, r4
   12968:	f7ff fe95 	bl	12696 <extract_width>
   1296c:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   1296e:	4620      	mov	r0, r4
   12970:	f7ff fec0 	bl	126f4 <extract_prec>
   12974:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   12976:	4620      	mov	r0, r4
   12978:	f7ff feee 	bl	12758 <extract_length>
   1297c:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   1297e:	4620      	mov	r0, r4
   12980:	f7ff ff51 	bl	12826 <extract_specifier>
}
   12984:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   12986:	3002      	adds	r0, #2
   12988:	70e3      	strb	r3, [r4, #3]
		return sp;
   1298a:	e7fb      	b.n	12984 <extract_conversion+0x3c>

0001298c <conversion_radix>:
	switch (specifier) {
   1298c:	286f      	cmp	r0, #111	; 0x6f
   1298e:	d00c      	beq.n	129aa <conversion_radix+0x1e>
   12990:	d905      	bls.n	1299e <conversion_radix+0x12>
   12992:	2870      	cmp	r0, #112	; 0x70
   12994:	d00b      	beq.n	129ae <conversion_radix+0x22>
   12996:	2878      	cmp	r0, #120	; 0x78
   12998:	d10b      	bne.n	129b2 <conversion_radix+0x26>
		return 16;
   1299a:	2010      	movs	r0, #16
   1299c:	4770      	bx	lr
	switch (specifier) {
   1299e:	2858      	cmp	r0, #88	; 0x58
   129a0:	d001      	beq.n	129a6 <conversion_radix+0x1a>
   129a2:	200a      	movs	r0, #10
   129a4:	4770      	bx	lr
		return 16;
   129a6:	2010      	movs	r0, #16
   129a8:	4770      	bx	lr
		return 8;
   129aa:	2008      	movs	r0, #8
   129ac:	4770      	bx	lr
		return 16;
   129ae:	2010      	movs	r0, #16
   129b0:	4770      	bx	lr
	switch (specifier) {
   129b2:	200a      	movs	r0, #10
}
   129b4:	4770      	bx	lr

000129b6 <encode_uint>:
{
   129b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129ba:	4605      	mov	r5, r0
   129bc:	460c      	mov	r4, r1
   129be:	4693      	mov	fp, r2
   129c0:	4699      	mov	r9, r3
   129c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   129c4:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   129c6:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   129ca:	f7ff ffdf 	bl	1298c <conversion_radix>
   129ce:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   129d0:	e015      	b.n	129fe <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   129d2:	f1ba 0f19 	cmp.w	sl, #25
   129d6:	d820      	bhi.n	12a1a <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   129d8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   129da:	3237      	adds	r2, #55	; 0x37
   129dc:	b2d2      	uxtb	r2, r2
   129de:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   129e2:	4632      	mov	r2, r6
   129e4:	4643      	mov	r3, r8
   129e6:	4628      	mov	r0, r5
   129e8:	4621      	mov	r1, r4
   129ea:	f7ed ff6d 	bl	8c8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   129ee:	42b5      	cmp	r5, r6
   129f0:	f174 0400 	sbcs.w	r4, r4, #0
   129f4:	d315      	bcc.n	12a22 <encode_uint+0x6c>
   129f6:	454f      	cmp	r7, r9
   129f8:	d913      	bls.n	12a22 <encode_uint+0x6c>
		value /= radix;
   129fa:	4605      	mov	r5, r0
   129fc:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   129fe:	f04f 0800 	mov.w	r8, #0
   12a02:	4632      	mov	r2, r6
   12a04:	4643      	mov	r3, r8
   12a06:	4628      	mov	r0, r5
   12a08:	4621      	mov	r1, r4
   12a0a:	f7ed ff5d 	bl	8c8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12a0e:	2a09      	cmp	r2, #9
   12a10:	d8df      	bhi.n	129d2 <encode_uint+0x1c>
   12a12:	b2d2      	uxtb	r2, r2
   12a14:	3230      	adds	r2, #48	; 0x30
   12a16:	b2d2      	uxtb	r2, r2
   12a18:	e7e1      	b.n	129de <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12a1a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12a1c:	3257      	adds	r2, #87	; 0x57
   12a1e:	b2d2      	uxtb	r2, r2
   12a20:	e7dd      	b.n	129de <encode_uint+0x28>
	if (conv->flag_hash) {
   12a22:	f89b 3000 	ldrb.w	r3, [fp]
   12a26:	f013 0f20 	tst.w	r3, #32
   12a2a:	d003      	beq.n	12a34 <encode_uint+0x7e>
		if (radix == 8) {
   12a2c:	2e08      	cmp	r6, #8
   12a2e:	d004      	beq.n	12a3a <encode_uint+0x84>
		} else if (radix == 16) {
   12a30:	2e10      	cmp	r6, #16
   12a32:	d009      	beq.n	12a48 <encode_uint+0x92>
}
   12a34:	4638      	mov	r0, r7
   12a36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   12a3a:	f89b 3002 	ldrb.w	r3, [fp, #2]
   12a3e:	f043 0308 	orr.w	r3, r3, #8
   12a42:	f88b 3002 	strb.w	r3, [fp, #2]
   12a46:	e7f5      	b.n	12a34 <encode_uint+0x7e>
			conv->altform_0c = true;
   12a48:	f89b 3002 	ldrb.w	r3, [fp, #2]
   12a4c:	f043 0310 	orr.w	r3, r3, #16
   12a50:	f88b 3002 	strb.w	r3, [fp, #2]
   12a54:	e7ee      	b.n	12a34 <encode_uint+0x7e>

00012a56 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   12a56:	7843      	ldrb	r3, [r0, #1]
   12a58:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   12a5c:	2b07      	cmp	r3, #7
   12a5e:	d818      	bhi.n	12a92 <store_count+0x3c>
   12a60:	e8df f003 	tbb	[pc, r3]
   12a64:	0a080604 	.word	0x0a080604
   12a68:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   12a6c:	600a      	str	r2, [r1, #0]
		break;
   12a6e:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   12a70:	700a      	strb	r2, [r1, #0]
		break;
   12a72:	4770      	bx	lr
		*(short *)dp = (short)count;
   12a74:	800a      	strh	r2, [r1, #0]
		break;
   12a76:	4770      	bx	lr
		*(long *)dp = (long)count;
   12a78:	600a      	str	r2, [r1, #0]
		break;
   12a7a:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   12a7c:	17d3      	asrs	r3, r2, #31
   12a7e:	600a      	str	r2, [r1, #0]
   12a80:	604b      	str	r3, [r1, #4]
		break;
   12a82:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   12a84:	17d3      	asrs	r3, r2, #31
   12a86:	600a      	str	r2, [r1, #0]
   12a88:	604b      	str	r3, [r1, #4]
		break;
   12a8a:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   12a8c:	600a      	str	r2, [r1, #0]
		break;
   12a8e:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12a90:	600a      	str	r2, [r1, #0]
}
   12a92:	4770      	bx	lr

00012a94 <outs>:
{
   12a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a98:	4607      	mov	r7, r0
   12a9a:	460e      	mov	r6, r1
   12a9c:	4614      	mov	r4, r2
   12a9e:	4698      	mov	r8, r3
	size_t count = 0;
   12aa0:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12aa2:	e006      	b.n	12ab2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   12aa4:	4631      	mov	r1, r6
   12aa6:	f814 0b01 	ldrb.w	r0, [r4], #1
   12aaa:	47b8      	blx	r7
		if (rc < 0) {
   12aac:	2800      	cmp	r0, #0
   12aae:	db09      	blt.n	12ac4 <outs+0x30>
		++count;
   12ab0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12ab2:	4544      	cmp	r4, r8
   12ab4:	d3f6      	bcc.n	12aa4 <outs+0x10>
   12ab6:	f1b8 0f00 	cmp.w	r8, #0
   12aba:	d102      	bne.n	12ac2 <outs+0x2e>
   12abc:	7823      	ldrb	r3, [r4, #0]
   12abe:	2b00      	cmp	r3, #0
   12ac0:	d1f0      	bne.n	12aa4 <outs+0x10>
	return (int)count;
   12ac2:	4628      	mov	r0, r5
}
   12ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012ac8 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   12ac8:	b40f      	push	{r0, r1, r2, r3}
   12aca:	b500      	push	{lr}
   12acc:	b083      	sub	sp, #12
   12ace:	a904      	add	r1, sp, #16
   12ad0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   12ad4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   12ad6:	f7f8 fd17 	bl	b508 <vprintk>

	va_end(ap);
}
   12ada:	b003      	add	sp, #12
   12adc:	f85d eb04 	ldr.w	lr, [sp], #4
   12ae0:	b004      	add	sp, #16
   12ae2:	4770      	bx	lr

00012ae4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   12ae4:	4770      	bx	lr

00012ae6 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   12ae6:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   12ae8:	f001 021f 	and.w	r2, r1, #31
   12aec:	2301      	movs	r3, #1
   12aee:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12af0:	0949      	lsrs	r1, r1, #5
   12af2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   12af6:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12af8:	f3bf 8f5b 	dmb	ish
   12afc:	e850 2f00 	ldrex	r2, [r0]
   12b00:	ea02 0c01 	and.w	ip, r2, r1
   12b04:	e840 ce00 	strex	lr, ip, [r0]
   12b08:	f1be 0f00 	cmp.w	lr, #0
   12b0c:	d1f6      	bne.n	12afc <atomic_test_and_clear_bit+0x16>
   12b0e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   12b12:	4213      	tst	r3, r2
}
   12b14:	bf14      	ite	ne
   12b16:	2001      	movne	r0, #1
   12b18:	2000      	moveq	r0, #0
   12b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00012b1e <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12b1e:	f001 021f 	and.w	r2, r1, #31
   12b22:	2301      	movs	r3, #1
   12b24:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12b26:	0949      	lsrs	r1, r1, #5
   12b28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12b2c:	f3bf 8f5b 	dmb	ish
   12b30:	e850 2f00 	ldrex	r2, [r0]
   12b34:	431a      	orrs	r2, r3
   12b36:	e840 2100 	strex	r1, r2, [r0]
   12b3a:	2900      	cmp	r1, #0
   12b3c:	d1f8      	bne.n	12b30 <atomic_set_bit+0x12>
   12b3e:	f3bf 8f5b 	dmb	ish
}
   12b42:	4770      	bx	lr

00012b44 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   12b44:	2000      	movs	r0, #0
   12b46:	4770      	bx	lr

00012b48 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12b48:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12b4a:	f002 f923 	bl	14d94 <z_fatal_error>
}
   12b4e:	bd08      	pop	{r3, pc}

00012b50 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   12b50:	b508      	push	{r3, lr}
   12b52:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12b54:	6800      	ldr	r0, [r0, #0]
   12b56:	f7ff fff7 	bl	12b48 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   12b5a:	bd08      	pop	{r3, pc}

00012b5c <arch_irq_enable>:
{
   12b5c:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   12b5e:	b240      	sxtb	r0, r0
   12b60:	f7f9 fa36 	bl	bfd0 <__NVIC_EnableIRQ>
}
   12b64:	bd08      	pop	{r3, pc}

00012b66 <arch_irq_disable>:
{
   12b66:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   12b68:	b240      	sxtb	r0, r0
   12b6a:	f7f9 fa3f 	bl	bfec <__NVIC_DisableIRQ>
}
   12b6e:	bd08      	pop	{r3, pc}

00012b70 <z_arm_irq_priority_set>:
{
   12b70:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12b72:	f012 0f01 	tst.w	r2, #1
   12b76:	d104      	bne.n	12b82 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   12b78:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12b7a:	b240      	sxtb	r0, r0
   12b7c:	f7f9 fa48 	bl	c010 <__NVIC_SetPriority>
}
   12b80:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12b82:	2100      	movs	r1, #0
   12b84:	e7f9      	b.n	12b7a <z_arm_irq_priority_set+0xa>

00012b86 <z_irq_spurious>:
{
   12b86:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12b88:	2100      	movs	r1, #0
   12b8a:	2001      	movs	r0, #1
   12b8c:	f7ff ffdc 	bl	12b48 <z_arm_fatal_error>
}
   12b90:	bd08      	pop	{r3, pc}

00012b92 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   12b92:	b508      	push	{r3, lr}
	handler();
   12b94:	f7f9 fa6e 	bl	c074 <z_SysNmiOnReset>
	z_arm_int_exit();
   12b98:	f7f9 fb60 	bl	c25c <z_arm_exc_exit>
}
   12b9c:	bd08      	pop	{r3, pc}

00012b9e <memory_fault_recoverable>:
}
   12b9e:	2000      	movs	r0, #0
   12ba0:	4770      	bx	lr

00012ba2 <debug_monitor>:
	*recoverable = false;
   12ba2:	2300      	movs	r3, #0
   12ba4:	700b      	strb	r3, [r1, #0]
}
   12ba6:	4770      	bx	lr

00012ba8 <fault_handle>:
{
   12ba8:	b508      	push	{r3, lr}
	*recoverable = false;
   12baa:	2300      	movs	r3, #0
   12bac:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   12bae:	1ecb      	subs	r3, r1, #3
   12bb0:	2b09      	cmp	r3, #9
   12bb2:	d81a      	bhi.n	12bea <fault_handle+0x42>
   12bb4:	e8df f003 	tbb	[pc, r3]
   12bb8:	110d0905 	.word	0x110d0905
   12bbc:	19191919 	.word	0x19191919
   12bc0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   12bc2:	4611      	mov	r1, r2
   12bc4:	f7f9 fc58 	bl	c478 <hard_fault>
		break;
   12bc8:	e010      	b.n	12bec <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   12bca:	2100      	movs	r1, #0
   12bcc:	f7f9 fbea 	bl	c3a4 <mem_manage_fault>
		break;
   12bd0:	e00c      	b.n	12bec <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   12bd2:	2100      	movs	r1, #0
   12bd4:	f7f9 fb50 	bl	c278 <bus_fault>
		break;
   12bd8:	e008      	b.n	12bec <fault_handle+0x44>
		reason = usage_fault(esf);
   12bda:	f7f9 fb93 	bl	c304 <usage_fault>
		break;
   12bde:	e005      	b.n	12bec <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   12be0:	4611      	mov	r1, r2
   12be2:	f7ff ffde 	bl	12ba2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12be6:	2000      	movs	r0, #0
		break;
   12be8:	e000      	b.n	12bec <fault_handle+0x44>
	switch (fault) {
   12bea:	2000      	movs	r0, #0
}
   12bec:	bd08      	pop	{r3, pc}

00012bee <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   12bee:	6843      	ldr	r3, [r0, #4]
   12bf0:	1e5a      	subs	r2, r3, #1
		&&
   12bf2:	4213      	tst	r3, r2
   12bf4:	d106      	bne.n	12c04 <mpu_partition_is_valid+0x16>
		&&
   12bf6:	2b1f      	cmp	r3, #31
   12bf8:	d906      	bls.n	12c08 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   12bfa:	6803      	ldr	r3, [r0, #0]
		&&
   12bfc:	421a      	tst	r2, r3
   12bfe:	d005      	beq.n	12c0c <mpu_partition_is_valid+0x1e>
   12c00:	2000      	movs	r0, #0
   12c02:	4770      	bx	lr
   12c04:	2000      	movs	r0, #0
   12c06:	4770      	bx	lr
   12c08:	2000      	movs	r0, #0
   12c0a:	4770      	bx	lr
   12c0c:	2001      	movs	r0, #1
}
   12c0e:	4770      	bx	lr

00012c10 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   12c10:	2807      	cmp	r0, #7
   12c12:	d805      	bhi.n	12c20 <region_allocate_and_init+0x10>
{
   12c14:	b510      	push	{r4, lr}
   12c16:	4604      	mov	r4, r0
	region_init(index, region_conf);
   12c18:	f7f9 fd88 	bl	c72c <region_init>
	return index;
   12c1c:	4620      	mov	r0, r4
}
   12c1e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12c20:	f06f 0015 	mvn.w	r0, #21
}
   12c24:	4770      	bx	lr

00012c26 <mpu_configure_region>:
{
   12c26:	b500      	push	{lr}
   12c28:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   12c2a:	680b      	ldr	r3, [r1, #0]
   12c2c:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   12c2e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12c30:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   12c32:	2b20      	cmp	r3, #32
   12c34:	d912      	bls.n	12c5c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   12c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   12c3a:	d811      	bhi.n	12c60 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12c3c:	3b01      	subs	r3, #1
   12c3e:	fab3 f383 	clz	r3, r3
   12c42:	f1c3 031f 	rsb	r3, r3, #31
   12c46:	005b      	lsls	r3, r3, #1
   12c48:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12c4c:	4313      	orrs	r3, r2
   12c4e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   12c50:	a901      	add	r1, sp, #4
   12c52:	f7ff ffdd 	bl	12c10 <region_allocate_and_init>
}
   12c56:	b005      	add	sp, #20
   12c58:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   12c5c:	2308      	movs	r3, #8
   12c5e:	e7f5      	b.n	12c4c <mpu_configure_region+0x26>
		return REGION_4G;
   12c60:	233e      	movs	r3, #62	; 0x3e
   12c62:	e7f3      	b.n	12c4c <mpu_configure_region+0x26>

00012c64 <mpu_configure_regions>:
{
   12c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c68:	4680      	mov	r8, r0
   12c6a:	460f      	mov	r7, r1
   12c6c:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   12c6e:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   12c70:	2500      	movs	r5, #0
   12c72:	e009      	b.n	12c88 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12c74:	4621      	mov	r1, r4
   12c76:	b2f0      	uxtb	r0, r6
   12c78:	f7ff ffd5 	bl	12c26 <mpu_configure_region>
   12c7c:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   12c7e:	f110 0f16 	cmn.w	r0, #22
   12c82:	d014      	beq.n	12cae <mpu_configure_regions+0x4a>
		reg_index++;
   12c84:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   12c86:	3501      	adds	r5, #1
   12c88:	42bd      	cmp	r5, r7
   12c8a:	da10      	bge.n	12cae <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   12c8c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   12c90:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   12c94:	6862      	ldr	r2, [r4, #4]
   12c96:	2a00      	cmp	r2, #0
   12c98:	d0f5      	beq.n	12c86 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   12c9a:	f1b9 0f00 	cmp.w	r9, #0
   12c9e:	d0e9      	beq.n	12c74 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   12ca0:	4620      	mov	r0, r4
   12ca2:	f7ff ffa4 	bl	12bee <mpu_partition_is_valid>
		if (do_sanity_check &&
   12ca6:	2800      	cmp	r0, #0
   12ca8:	d1e4      	bne.n	12c74 <mpu_configure_regions+0x10>
			return -EINVAL;
   12caa:	f06f 0615 	mvn.w	r6, #21
}
   12cae:	4630      	mov	r0, r6
   12cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012cb4 <arm_core_mpu_configure_static_mpu_regions>:
{
   12cb4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12cb6:	f7f9 fd4d 	bl	c754 <mpu_configure_static_mpu_regions>
}
   12cba:	bd08      	pop	{r3, pc}

00012cbc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   12cbc:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   12cbe:	f7f9 fd53 	bl	c768 <mpu_configure_dynamic_mpu_regions>
}
   12cc2:	bd08      	pop	{r3, pc}

00012cc4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   12cc4:	4602      	mov	r2, r0
   12cc6:	e002      	b.n	12cce <strcpy+0xa>
		*d = *s;
   12cc8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   12ccc:	3101      	adds	r1, #1
	while (*s != '\0') {
   12cce:	780b      	ldrb	r3, [r1, #0]
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d1f9      	bne.n	12cc8 <strcpy+0x4>
	}

	*d = '\0';
   12cd4:	7013      	strb	r3, [r2, #0]

	return dest;
}
   12cd6:	4770      	bx	lr

00012cd8 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   12cd8:	4603      	mov	r3, r0
   12cda:	b1a2      	cbz	r2, 12d06 <strncpy+0x2e>
{
   12cdc:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   12cde:	780c      	ldrb	r4, [r1, #0]
   12ce0:	b12c      	cbz	r4, 12cee <strncpy+0x16>
		*d = *s;
   12ce2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   12ce6:	3101      	adds	r1, #1
		d++;
		n--;
   12ce8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   12cea:	2a00      	cmp	r2, #0
   12cec:	d1f7      	bne.n	12cde <strncpy+0x6>
	}

	while (n > 0) {
   12cee:	b122      	cbz	r2, 12cfa <strncpy+0x22>
		*d = '\0';
   12cf0:	2100      	movs	r1, #0
   12cf2:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   12cf6:	3a01      	subs	r2, #1
   12cf8:	e7f9      	b.n	12cee <strncpy+0x16>
	}

	return dest;
}
   12cfa:	bc10      	pop	{r4}
   12cfc:	4770      	bx	lr
		*d = '\0';
   12cfe:	2100      	movs	r1, #0
   12d00:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12d04:	3a01      	subs	r2, #1
	while (n > 0) {
   12d06:	2a00      	cmp	r2, #0
   12d08:	d1f9      	bne.n	12cfe <strncpy+0x26>
   12d0a:	4770      	bx	lr

00012d0c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12d0c:	4603      	mov	r3, r0
	size_t n = 0;
   12d0e:	2000      	movs	r0, #0

	while (*s != '\0') {
   12d10:	e001      	b.n	12d16 <strlen+0xa>
		s++;
   12d12:	3301      	adds	r3, #1
		n++;
   12d14:	3001      	adds	r0, #1
	while (*s != '\0') {
   12d16:	781a      	ldrb	r2, [r3, #0]
   12d18:	2a00      	cmp	r2, #0
   12d1a:	d1fa      	bne.n	12d12 <strlen+0x6>
	}

	return n;
}
   12d1c:	4770      	bx	lr

00012d1e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12d1e:	4603      	mov	r3, r0
	size_t n = 0;
   12d20:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   12d22:	e001      	b.n	12d28 <strnlen+0xa>
		s++;
   12d24:	3301      	adds	r3, #1
		n++;
   12d26:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   12d28:	781a      	ldrb	r2, [r3, #0]
   12d2a:	b10a      	cbz	r2, 12d30 <strnlen+0x12>
   12d2c:	4288      	cmp	r0, r1
   12d2e:	d3f9      	bcc.n	12d24 <strnlen+0x6>
	}

	return n;
}
   12d30:	4770      	bx	lr

00012d32 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12d32:	4613      	mov	r3, r2
   12d34:	b16a      	cbz	r2, 12d52 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12d36:	3b01      	subs	r3, #1
   12d38:	d007      	beq.n	12d4a <memcmp+0x18>
   12d3a:	f890 c000 	ldrb.w	ip, [r0]
   12d3e:	780a      	ldrb	r2, [r1, #0]
   12d40:	4594      	cmp	ip, r2
   12d42:	d102      	bne.n	12d4a <memcmp+0x18>
		c1++;
   12d44:	3001      	adds	r0, #1
		c2++;
   12d46:	3101      	adds	r1, #1
   12d48:	e7f5      	b.n	12d36 <memcmp+0x4>
	}

	return *c1 - *c2;
   12d4a:	7800      	ldrb	r0, [r0, #0]
   12d4c:	780b      	ldrb	r3, [r1, #0]
   12d4e:	1ac0      	subs	r0, r0, r3
   12d50:	4770      	bx	lr
		return 0;
   12d52:	2000      	movs	r0, #0
}
   12d54:	4770      	bx	lr

00012d56 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12d56:	ea80 0301 	eor.w	r3, r0, r1
   12d5a:	f013 0f03 	tst.w	r3, #3
   12d5e:	d001      	beq.n	12d64 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   12d60:	4603      	mov	r3, r0
   12d62:	e023      	b.n	12dac <memcpy+0x56>
   12d64:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   12d66:	f013 0f03 	tst.w	r3, #3
   12d6a:	d00f      	beq.n	12d8c <memcpy+0x36>
			if (n == 0) {
   12d6c:	b30a      	cbz	r2, 12db2 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   12d6e:	f811 cb01 	ldrb.w	ip, [r1], #1
   12d72:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   12d76:	3a01      	subs	r2, #1
   12d78:	e7f5      	b.n	12d66 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   12d7a:	f811 cb01 	ldrb.w	ip, [r1], #1
   12d7e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12d82:	3a01      	subs	r2, #1
	while (n > 0) {
   12d84:	2a00      	cmp	r2, #0
   12d86:	d1f8      	bne.n	12d7a <memcpy+0x24>
	}

	return d;
}
   12d88:	bc10      	pop	{r4}
   12d8a:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   12d8c:	2a03      	cmp	r2, #3
   12d8e:	d90d      	bls.n	12dac <memcpy+0x56>
{
   12d90:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   12d92:	f851 4b04 	ldr.w	r4, [r1], #4
   12d96:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   12d9a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   12d9c:	2a03      	cmp	r2, #3
   12d9e:	d8f8      	bhi.n	12d92 <memcpy+0x3c>
   12da0:	e7f0      	b.n	12d84 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   12da2:	f811 cb01 	ldrb.w	ip, [r1], #1
   12da6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12daa:	3a01      	subs	r2, #1
	while (n > 0) {
   12dac:	2a00      	cmp	r2, #0
   12dae:	d1f8      	bne.n	12da2 <memcpy+0x4c>
   12db0:	4770      	bx	lr
}
   12db2:	4770      	bx	lr

00012db4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   12db4:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   12db8:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12dba:	e002      	b.n	12dc2 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   12dbc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12dc0:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12dc2:	f013 0f03 	tst.w	r3, #3
   12dc6:	d002      	beq.n	12dce <memset+0x1a>
		if (n == 0) {
   12dc8:	2a00      	cmp	r2, #0
   12dca:	d1f7      	bne.n	12dbc <memset+0x8>
   12dcc:	e00f      	b.n	12dee <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   12dce:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   12dd0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   12dd4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   12dd8:	2a03      	cmp	r2, #3
   12dda:	d906      	bls.n	12dea <memset+0x36>
		*(d_word++) = c_word;
   12ddc:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   12de0:	3a04      	subs	r2, #4
   12de2:	e7f9      	b.n	12dd8 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   12de4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12de8:	3a01      	subs	r2, #1
	while (n > 0) {
   12dea:	2a00      	cmp	r2, #0
   12dec:	d1fa      	bne.n	12de4 <memset+0x30>
	}

	return buf;
}
   12dee:	4770      	bx	lr

00012df0 <_stdout_hook_default>:
}
   12df0:	f04f 30ff 	mov.w	r0, #4294967295
   12df4:	4770      	bx	lr

00012df6 <sys_arch_reboot>:
{
   12df6:	b508      	push	{r3, lr}
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   12df8:	b2c0      	uxtb	r0, r0
   12dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12dfe:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   12e02:	f7f9 fd09 	bl	c818 <__NVIC_SystemReset>

00012e06 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   12e06:	2301      	movs	r3, #1
   12e08:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   12e0c:	f3bf 8f4f 	dsb	sy
        __WFE();
   12e10:	bf20      	wfe
    while (true)
   12e12:	e7fd      	b.n	12e10 <nrf_power_system_off+0xa>

00012e14 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   12e14:	2806      	cmp	r0, #6
   12e16:	d000      	beq.n	12e1a <pm_state_set+0x6>
   12e18:	4770      	bx	lr
{
   12e1a:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   12e1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   12e20:	f7ff fff1 	bl	12e06 <nrf_power_system_off>

00012e24 <pm_state_exit_post_ops>:
   12e24:	2300      	movs	r3, #0
   12e26:	f383 8811 	msr	BASEPRI, r3
   12e2a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12e2e:	4770      	bx	lr

00012e30 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   12e30:	b510      	push	{r4, lr}
   12e32:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   12e34:	2301      	movs	r3, #1
   12e36:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   12e3a:	2106      	movs	r1, #6
   12e3c:	f7fc fb4a 	bl	f4d4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   12e40:	b918      	cbnz	r0, 12e4a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   12e42:	79a3      	ldrb	r3, [r4, #6]
   12e44:	f063 033f 	orn	r3, r3, #63	; 0x3f
   12e48:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   12e4a:	bd10      	pop	{r4, pc}

00012e4c <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   12e4c:	b510      	push	{r4, lr}
   12e4e:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   12e50:	2207      	movs	r2, #7
   12e52:	f7ff ff80 	bl	12d56 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   12e56:	7823      	ldrb	r3, [r4, #0]
   12e58:	f023 0302 	bic.w	r3, r3, #2
   12e5c:	7023      	strb	r3, [r4, #0]
}
   12e5e:	bd10      	pop	{r4, pc}

00012e60 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   12e60:	7800      	ldrb	r0, [r0, #0]
}
   12e62:	f3c0 0040 	ubfx	r0, r0, #1, #1
   12e66:	4770      	bx	lr

00012e68 <sys_put_le64>:
	dst[0] = val;
   12e68:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   12e6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12e6e:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   12e70:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   12e72:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   12e74:	0e00      	lsrs	r0, r0, #24
   12e76:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   12e78:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   12e7a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   12e7e:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   12e80:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   12e82:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   12e84:	0e09      	lsrs	r1, r1, #24
   12e86:	71d1      	strb	r1, [r2, #7]
}
   12e88:	4770      	bx	lr

00012e8a <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
   12e8a:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   12e8c:	79c3      	ldrb	r3, [r0, #7]
   12e8e:	7981      	ldrb	r1, [r0, #6]
   12e90:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   12e94:	7942      	ldrb	r2, [r0, #5]
   12e96:	7903      	ldrb	r3, [r0, #4]
   12e98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12e9c:	78c2      	ldrb	r2, [r0, #3]
   12e9e:	f890 c002 	ldrb.w	ip, [r0, #2]
   12ea2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   12ea6:	f890 e001 	ldrb.w	lr, [r0, #1]
   12eaa:	7802      	ldrb	r2, [r0, #0]
   12eac:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
   12eb0:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   12eb4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   12eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00012ebc <handle_event_common>:
{
   12ebc:	b510      	push	{r4, lr}
   12ebe:	4686      	mov	lr, r0
   12ec0:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   12ec2:	f04f 0c00 	mov.w	ip, #0
   12ec6:	4563      	cmp	r3, ip
   12ec8:	d910      	bls.n	12eec <handle_event_common+0x30>
		const struct event_handler *handler = &handlers[i];
   12eca:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   12ece:	f812 403c 	ldrb.w	r4, [r2, ip, lsl #3]
   12ed2:	4574      	cmp	r4, lr
   12ed4:	d107      	bne.n	12ee6 <handle_event_common+0x2a>
		if (buf->len < handler->min_len) {
   12ed6:	8a02      	ldrh	r2, [r0, #16]
   12ed8:	784b      	ldrb	r3, [r1, #1]
   12eda:	429a      	cmp	r2, r3
   12edc:	d309      	bcc.n	12ef2 <handle_event_common+0x36>
		handler->handler(buf);
   12ede:	684b      	ldr	r3, [r1, #4]
   12ee0:	4798      	blx	r3
		return 0;
   12ee2:	2000      	movs	r0, #0
}
   12ee4:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   12ee6:	f10c 0c01 	add.w	ip, ip, #1
   12eea:	e7ec      	b.n	12ec6 <handle_event_common+0xa>
	return -EOPNOTSUPP;
   12eec:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   12ef0:	e7f8      	b.n	12ee4 <handle_event_common+0x28>
			return -EINVAL;
   12ef2:	f06f 0015 	mvn.w	r0, #21
   12ef6:	e7f5      	b.n	12ee4 <handle_event_common+0x28>

00012ef8 <handle_event>:
{
   12ef8:	b508      	push	{r3, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   12efa:	f7ff ffdf 	bl	12ebc <handle_event_common>
}
   12efe:	bd08      	pop	{r3, pc}

00012f00 <hci_vendor_event>:
}
   12f00:	4770      	bx	lr

00012f02 <bt_br_init>:
}
   12f02:	2000      	movs	r0, #0
   12f04:	4770      	bx	lr

00012f06 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f06:	f001 0c1f 	and.w	ip, r1, #31
   12f0a:	2301      	movs	r3, #1
   12f0c:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   12f10:	b172      	cbz	r2, 12f30 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f12:	0949      	lsrs	r1, r1, #5
   12f14:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   12f18:	f3bf 8f5b 	dmb	ish
   12f1c:	e850 2f00 	ldrex	r2, [r0]
   12f20:	431a      	orrs	r2, r3
   12f22:	e840 2100 	strex	r1, r2, [r0]
   12f26:	2900      	cmp	r1, #0
   12f28:	d1f8      	bne.n	12f1c <atomic_set_bit_to+0x16>
   12f2a:	f3bf 8f5b 	dmb	ish
   12f2e:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12f30:	0949      	lsrs	r1, r1, #5
   12f32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   12f36:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f38:	f3bf 8f5b 	dmb	ish
   12f3c:	e850 2f00 	ldrex	r2, [r0]
   12f40:	401a      	ands	r2, r3
   12f42:	e840 2100 	strex	r1, r2, [r0]
   12f46:	2900      	cmp	r1, #0
   12f48:	d1f8      	bne.n	12f3c <atomic_set_bit_to+0x36>
   12f4a:	f3bf 8f5b 	dmb	ish
	}
}
   12f4e:	4770      	bx	lr

00012f50 <hci_hardware_error>:
{
   12f50:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   12f52:	2101      	movs	r1, #1
   12f54:	300c      	adds	r0, #12
   12f56:	f000 fa8a 	bl	1346e <net_buf_simple_pull_mem>
}
   12f5a:	bd08      	pop	{r3, pc}

00012f5c <le_set_event_mask>:
{
   12f5c:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12f5e:	2108      	movs	r1, #8
   12f60:	f242 0001 	movw	r0, #8193	; 0x2001
   12f64:	f7f9 fe6c 	bl	cc40 <bt_hci_cmd_create>
	if (!buf) {
   12f68:	b180      	cbz	r0, 12f8c <le_set_event_mask+0x30>
   12f6a:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   12f6c:	2108      	movs	r1, #8
   12f6e:	300c      	adds	r0, #12
   12f70:	f000 fa64 	bl	1343c <net_buf_simple_add>
   12f74:	4602      	mov	r2, r0
	sys_put_le64(mask, cp_mask->events);
   12f76:	2002      	movs	r0, #2
   12f78:	2100      	movs	r1, #0
   12f7a:	f7ff ff75 	bl	12e68 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   12f7e:	2200      	movs	r2, #0
   12f80:	4621      	mov	r1, r4
   12f82:	f242 0001 	movw	r0, #8193	; 0x2001
   12f86:	f7f9 fe99 	bl	ccbc <bt_hci_cmd_send_sync>
}
   12f8a:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   12f8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12f90:	e7fb      	b.n	12f8a <le_set_event_mask+0x2e>

00012f92 <process_events>:
{
   12f92:	b538      	push	{r3, r4, r5, lr}
   12f94:	4604      	mov	r4, r0
   12f96:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   12f98:	e001      	b.n	12f9e <process_events+0xc>
	for (; count; ev++, count--) {
   12f9a:	3414      	adds	r4, #20
   12f9c:	3d01      	subs	r5, #1
   12f9e:	b155      	cbz	r5, 12fb6 <process_events+0x24>
		switch (ev->state) {
   12fa0:	68e3      	ldr	r3, [r4, #12]
   12fa2:	f3c3 3386 	ubfx	r3, r3, #14, #7
   12fa6:	2b04      	cmp	r3, #4
   12fa8:	d1f7      	bne.n	12f9a <process_events+0x8>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12faa:	7b23      	ldrb	r3, [r4, #12]
   12fac:	2b00      	cmp	r3, #0
   12fae:	d1f4      	bne.n	12f9a <process_events+0x8>
				send_cmd();
   12fb0:	f7fa f844 	bl	d03c <send_cmd>
   12fb4:	e7f1      	b.n	12f9a <process_events+0x8>
}
   12fb6:	bd38      	pop	{r3, r4, r5, pc}

00012fb8 <bt_recv>:
{
   12fb8:	b538      	push	{r3, r4, r5, lr}
   12fba:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12fbc:	7e05      	ldrb	r5, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   12fbe:	2d01      	cmp	r5, #1
   12fc0:	d11f      	bne.n	13002 <bt_recv+0x4a>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   12fc2:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12fc4:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   12fc6:	2b05      	cmp	r3, #5
   12fc8:	d00e      	beq.n	12fe8 <bt_recv+0x30>
   12fca:	d30f      	bcc.n	12fec <bt_recv+0x34>
   12fcc:	3b0e      	subs	r3, #14
   12fce:	b2db      	uxtb	r3, r3
   12fd0:	2b01      	cmp	r3, #1
   12fd2:	d807      	bhi.n	12fe4 <bt_recv+0x2c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12fd4:	f015 0f01 	tst.w	r5, #1
   12fd8:	d10a      	bne.n	12ff0 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12fda:	f015 0f02 	tst.w	r5, #2
   12fde:	d10b      	bne.n	12ff8 <bt_recv+0x40>
		return 0;
   12fe0:	2000      	movs	r0, #0
}
   12fe2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV;
   12fe4:	2502      	movs	r5, #2
   12fe6:	e7f5      	b.n	12fd4 <bt_recv+0x1c>
	switch (evt) {
   12fe8:	2503      	movs	r5, #3
   12fea:	e7f3      	b.n	12fd4 <bt_recv+0x1c>
		return BT_HCI_EVT_FLAG_RECV;
   12fec:	2502      	movs	r5, #2
   12fee:	e7f1      	b.n	12fd4 <bt_recv+0x1c>
			hci_event_prio(buf);
   12ff0:	4620      	mov	r0, r4
   12ff2:	f7fa f8a3 	bl	d13c <hci_event_prio>
   12ff6:	e7f0      	b.n	12fda <bt_recv+0x22>
			rx_queue_put(buf);
   12ff8:	4620      	mov	r0, r4
   12ffa:	f7f9 fde1 	bl	cbc0 <rx_queue_put>
		return 0;
   12ffe:	2000      	movs	r0, #0
   13000:	e7ef      	b.n	12fe2 <bt_recv+0x2a>
		net_buf_unref(buf);
   13002:	f000 f9f0 	bl	133e6 <net_buf_unref>
		return -EINVAL;
   13006:	f06f 0015 	mvn.w	r0, #21
   1300a:	e7ea      	b.n	12fe2 <bt_recv+0x2a>

0001300c <bt_init>:
{
   1300c:	b510      	push	{r4, lr}
	err = hci_init();
   1300e:	f7f9 ffbb 	bl	cf88 <hci_init>
	if (err) {
   13012:	4604      	mov	r4, r0
   13014:	b108      	cbz	r0, 1301a <bt_init+0xe>
}
   13016:	4620      	mov	r0, r4
   13018:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   1301a:	f7fa f90b 	bl	d234 <bt_finalize_init>
	return 0;
   1301e:	e7fa      	b.n	13016 <bt_init+0xa>

00013020 <is_adv_using_rand_addr>:
}
   13020:	2000      	movs	r0, #0
   13022:	4770      	bx	lr

00013024 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   13024:	b910      	cbnz	r0, 1302c <bt_lookup_id_addr+0x8>
   13026:	b119      	cbz	r1, 13030 <bt_lookup_id_addr+0xc>
	return addr;
   13028:	4608      	mov	r0, r1
   1302a:	4770      	bx	lr
		return NULL;
   1302c:	2000      	movs	r0, #0
   1302e:	4770      	bx	lr
   13030:	2000      	movs	r0, #0
}
   13032:	4770      	bx	lr

00013034 <bt_id_set_private_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   13034:	b998      	cbnz	r0, 1305e <bt_id_set_private_addr+0x2a>
{
   13036:	b500      	push	{lr}
   13038:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1303a:	2106      	movs	r1, #6
   1303c:	4668      	mov	r0, sp
   1303e:	f7fc fa49 	bl	f4d4 <bt_rand>
	if (err) {
   13042:	b110      	cbz	r0, 1304a <bt_id_set_private_addr+0x16>
}
   13044:	b003      	add	sp, #12
   13046:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   1304a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1304e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13052:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   13056:	4668      	mov	r0, sp
   13058:	f7fa f9ba 	bl	d3d0 <set_random_address>
	if (err)  {
   1305c:	e7f2      	b.n	13044 <bt_id_set_private_addr+0x10>
		return -EINVAL;
   1305e:	f06f 0015 	mvn.w	r0, #21
}
   13062:	4770      	bx	lr

00013064 <bt_id_scan_random_addr_check>:
}
   13064:	2001      	movs	r0, #1
   13066:	4770      	bx	lr

00013068 <get_adv_props_legacy>:
	switch (evt_type) {
   13068:	2804      	cmp	r0, #4
   1306a:	d80a      	bhi.n	13082 <get_adv_props_legacy+0x1a>
   1306c:	e8df f000 	tbb	[pc, r0]
   13070:	050c0b03 	.word	0x050c0b03
   13074:	07          	.byte	0x07
   13075:	00          	.byte	0x00
   13076:	2003      	movs	r0, #3
   13078:	4770      	bx	lr
		return 0;
   1307a:	2000      	movs	r0, #0
   1307c:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   1307e:	200a      	movs	r0, #10
   13080:	4770      	bx	lr
		return 0;
   13082:	2000      	movs	r0, #0
   13084:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   13086:	2005      	movs	r0, #5
}
   13088:	4770      	bx	lr

0001308a <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1308a:	7803      	ldrb	r3, [r0, #0]
   1308c:	2b01      	cmp	r3, #1
   1308e:	d814      	bhi.n	130ba <valid_le_scan_param+0x30>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   13090:	6843      	ldr	r3, [r0, #4]
   13092:	2b0f      	cmp	r3, #15
   13094:	d813      	bhi.n	130be <valid_le_scan_param+0x34>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   13096:	8902      	ldrh	r2, [r0, #8]
   13098:	1f13      	subs	r3, r2, #4
   1309a:	b29b      	uxth	r3, r3
   1309c:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   130a0:	428b      	cmp	r3, r1
   130a2:	d80e      	bhi.n	130c2 <valid_le_scan_param+0x38>
	if (param->window < 0x0004 || param->window > 0x4000) {
   130a4:	8941      	ldrh	r1, [r0, #10]
   130a6:	1f0b      	subs	r3, r1, #4
   130a8:	b29b      	uxth	r3, r3
   130aa:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   130ae:	4283      	cmp	r3, r0
   130b0:	d809      	bhi.n	130c6 <valid_le_scan_param+0x3c>
	if (param->window > param->interval) {
   130b2:	428a      	cmp	r2, r1
   130b4:	d309      	bcc.n	130ca <valid_le_scan_param+0x40>
	return true;
   130b6:	2001      	movs	r0, #1
   130b8:	4770      	bx	lr
		return false;
   130ba:	2000      	movs	r0, #0
   130bc:	4770      	bx	lr
		return false;
   130be:	2000      	movs	r0, #0
   130c0:	4770      	bx	lr
		return false;
   130c2:	2000      	movs	r0, #0
   130c4:	4770      	bx	lr
		return false;
   130c6:	2000      	movs	r0, #0
   130c8:	4770      	bx	lr
		return false;
   130ca:	2000      	movs	r0, #0
}
   130cc:	4770      	bx	lr

000130ce <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   130ce:	f001 0c1f 	and.w	ip, r1, #31
   130d2:	2301      	movs	r3, #1
   130d4:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   130d8:	b172      	cbz	r2, 130f8 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   130da:	0949      	lsrs	r1, r1, #5
   130dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   130e0:	f3bf 8f5b 	dmb	ish
   130e4:	e850 2f00 	ldrex	r2, [r0]
   130e8:	431a      	orrs	r2, r3
   130ea:	e840 2100 	strex	r1, r2, [r0]
   130ee:	2900      	cmp	r1, #0
   130f0:	d1f8      	bne.n	130e4 <atomic_set_bit_to+0x16>
   130f2:	f3bf 8f5b 	dmb	ish
   130f6:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   130f8:	0949      	lsrs	r1, r1, #5
   130fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   130fe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13100:	f3bf 8f5b 	dmb	ish
   13104:	e850 2f00 	ldrex	r2, [r0]
   13108:	401a      	ands	r2, r3
   1310a:	e840 2100 	strex	r1, r2, [r0]
   1310e:	2900      	cmp	r1, #0
   13110:	d1f8      	bne.n	13104 <atomic_set_bit_to+0x36>
   13112:	f3bf 8f5b 	dmb	ish
}
   13116:	4770      	bx	lr

00013118 <bt_le_scan_set_enable>:
{
   13118:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   1311a:	f7fa faf7 	bl	d70c <bt_le_scan_set_enable_legacy>
}
   1311e:	bd08      	pop	{r3, pc}

00013120 <bt_hci_le_adv_report>:
{
   13120:	b5f0      	push	{r4, r5, r6, r7, lr}
   13122:	b085      	sub	sp, #20
   13124:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   13126:	f100 060c 	add.w	r6, r0, #12
   1312a:	4630      	mov	r0, r6
   1312c:	f000 f9a7 	bl	1347e <net_buf_simple_pull_u8>
	LOG_DBG("Adv number of reports %u",  num_reports);
   13130:	e026      	b.n	13180 <bt_hci_le_adv_report+0x60>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   13132:	2301      	movs	r3, #1
   13134:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   13138:	2200      	movs	r2, #0
   1313a:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1313e:	237f      	movs	r3, #127	; 0x7f
   13140:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   13144:	7a03      	ldrb	r3, [r0, #8]
   13146:	4403      	add	r3, r0
   13148:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1314c:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   13150:	23ff      	movs	r3, #255	; 0xff
   13152:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   13156:	f8ad 200a 	strh.w	r2, [sp, #10]
		adv_info.adv_type = evt->evt_type;
   1315a:	7800      	ldrb	r0, [r0, #0]
   1315c:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   13160:	f7ff ff82 	bl	13068 <get_adv_props_legacy>
   13164:	f8ad 0008 	strh.w	r0, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   13168:	7a23      	ldrb	r3, [r4, #8]
   1316a:	4632      	mov	r2, r6
   1316c:	4669      	mov	r1, sp
   1316e:	1c60      	adds	r0, r4, #1
   13170:	f7fa fb02 	bl	d778 <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   13174:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   13176:	3101      	adds	r1, #1
   13178:	4630      	mov	r0, r6
   1317a:	f000 f970 	bl	1345e <net_buf_simple_pull>
	while (num_reports--) {
   1317e:	4628      	mov	r0, r5
   13180:	1e45      	subs	r5, r0, #1
   13182:	b2ed      	uxtb	r5, r5
   13184:	b160      	cbz	r0, 131a0 <bt_hci_le_adv_report+0x80>
		if (buf->len < sizeof(*evt)) {
   13186:	8a3b      	ldrh	r3, [r7, #16]
   13188:	2b08      	cmp	r3, #8
   1318a:	d909      	bls.n	131a0 <bt_hci_le_adv_report+0x80>
	return net_buf_simple_pull_mem(&buf->b, len);
   1318c:	2109      	movs	r1, #9
   1318e:	4630      	mov	r0, r6
   13190:	f000 f96d 	bl	1346e <net_buf_simple_pull_mem>
   13194:	4604      	mov	r4, r0
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   13196:	8a3a      	ldrh	r2, [r7, #16]
   13198:	7a03      	ldrb	r3, [r0, #8]
   1319a:	3301      	adds	r3, #1
   1319c:	429a      	cmp	r2, r3
   1319e:	d2c8      	bcs.n	13132 <bt_hci_le_adv_report+0x12>
}
   131a0:	b005      	add	sp, #20
   131a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000131a4 <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   131a4:	b538      	push	{r3, r4, r5, lr}
   131a6:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   131a8:	7f03      	ldrb	r3, [r0, #28]
   131aa:	331b      	adds	r3, #27
   131ac:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   131b0:	8b02      	ldrh	r2, [r0, #24]
   131b2:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   131b4:	6a85      	ldr	r5, [r0, #40]	; 0x28
   131b6:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   131ba:	f7fa fc57 	bl	da6c <pool_id>
   131be:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   131c0:	7f23      	ldrb	r3, [r4, #28]
   131c2:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   131c4:	4628      	mov	r0, r5
   131c6:	bd38      	pop	{r3, r4, r5, pc}

000131c8 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   131c8:	4770      	bx	lr

000131ca <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   131ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131ce:	4604      	mov	r4, r0
   131d0:	460d      	mov	r5, r1
   131d2:	4617      	mov	r7, r2
   131d4:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   131d6:	7a80      	ldrb	r0, [r0, #10]
   131d8:	f7fa fc54 	bl	da84 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   131dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   131de:	681b      	ldr	r3, [r3, #0]
   131e0:	f8d3 8000 	ldr.w	r8, [r3]
   131e4:	463a      	mov	r2, r7
   131e6:	4633      	mov	r3, r6
   131e8:	4629      	mov	r1, r5
   131ea:	4620      	mov	r0, r4
   131ec:	47c0      	blx	r8
}
   131ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000131f2 <net_buf_destroy>:
{
   131f2:	b510      	push	{r4, lr}
   131f4:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   131f6:	7a80      	ldrb	r0, [r0, #10]
   131f8:	f7fa fc44 	bl	da84 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   131fc:	4621      	mov	r1, r4
   131fe:	f001 ff77 	bl	150f0 <k_queue_prepend>
}
   13202:	bd10      	pop	{r4, pc}

00013204 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   13204:	b538      	push	{r3, r4, r5, lr}
   13206:	4604      	mov	r4, r0
   13208:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1320a:	7a80      	ldrb	r0, [r0, #10]
   1320c:	f7fa fc3a 	bl	da84 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13210:	7a63      	ldrb	r3, [r4, #9]
   13212:	f013 0f01 	tst.w	r3, #1
   13216:	d105      	bne.n	13224 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   13218:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1321a:	681b      	ldr	r3, [r3, #0]
   1321c:	689b      	ldr	r3, [r3, #8]
   1321e:	4629      	mov	r1, r5
   13220:	4620      	mov	r0, r4
   13222:	4798      	blx	r3
}
   13224:	bd38      	pop	{r3, r4, r5, pc}

00013226 <net_buf_id>:
{
   13226:	b510      	push	{r4, lr}
   13228:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1322a:	7a80      	ldrb	r0, [r0, #10]
   1322c:	f7fa fc2a 	bl	da84 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13230:	7f03      	ldrb	r3, [r0, #28]
   13232:	331b      	adds	r3, #27
   13234:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13238:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1323a:	1aa4      	subs	r4, r4, r2
}
   1323c:	fbb4 f0f3 	udiv	r0, r4, r3
   13240:	bd10      	pop	{r4, pc}

00013242 <fixed_data_alloc>:
{
   13242:	b570      	push	{r4, r5, r6, lr}
   13244:	4604      	mov	r4, r0
   13246:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13248:	7a80      	ldrb	r0, [r0, #10]
   1324a:	f7fa fc1b 	bl	da84 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1324e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13250:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   13252:	682a      	ldr	r2, [r5, #0]
   13254:	6819      	ldr	r1, [r3, #0]
   13256:	428a      	cmp	r2, r1
   13258:	bf28      	it	cs
   1325a:	460a      	movcs	r2, r1
   1325c:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1325e:	685d      	ldr	r5, [r3, #4]
   13260:	681e      	ldr	r6, [r3, #0]
   13262:	4620      	mov	r0, r4
   13264:	f7ff ffdf 	bl	13226 <net_buf_id>
}
   13268:	fb00 5006 	mla	r0, r0, r6, r5
   1326c:	bd70      	pop	{r4, r5, r6, pc}

0001326e <net_buf_reset>:
	buf->len  = 0U;
   1326e:	2300      	movs	r3, #0
   13270:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   13272:	6943      	ldr	r3, [r0, #20]
   13274:	60c3      	str	r3, [r0, #12]
}
   13276:	4770      	bx	lr

00013278 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   13278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1327c:	b082      	sub	sp, #8
   1327e:	4605      	mov	r5, r0
   13280:	9101      	str	r1, [sp, #4]
   13282:	4616      	mov	r6, r2
   13284:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   13286:	4610      	mov	r0, r2
   13288:	4619      	mov	r1, r3
   1328a:	f002 f9e2 	bl	15652 <sys_clock_timeout_end_calc>
   1328e:	4681      	mov	r9, r0
   13290:	468a      	mov	sl, r1
	__asm__ volatile(
   13292:	f04f 0240 	mov.w	r2, #64	; 0x40
   13296:	f3ef 8311 	mrs	r3, BASEPRI
   1329a:	f382 8812 	msr	BASEPRI_MAX, r2
   1329e:	f3bf 8f6f 	isb	sy
   132a2:	461a      	mov	r2, r3
   132a4:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   132a6:	8b6b      	ldrh	r3, [r5, #26]
   132a8:	b393      	cbz	r3, 13310 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   132aa:	8b2a      	ldrh	r2, [r5, #24]
   132ac:	4293      	cmp	r3, r2
   132ae:	d20b      	bcs.n	132c8 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   132b0:	2200      	movs	r2, #0
   132b2:	2300      	movs	r3, #0
   132b4:	4628      	mov	r0, r5
   132b6:	f7fd fc19 	bl	10aec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   132ba:	4604      	mov	r4, r0
   132bc:	b120      	cbz	r0, 132c8 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   132be:	f388 8811 	msr	BASEPRI, r8
   132c2:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   132c6:	e00a      	b.n	132de <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   132c8:	8b69      	ldrh	r1, [r5, #26]
   132ca:	1e4b      	subs	r3, r1, #1
   132cc:	836b      	strh	r3, [r5, #26]
   132ce:	f388 8811 	msr	BASEPRI, r8
   132d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   132d6:	4628      	mov	r0, r5
   132d8:	f7ff ff64 	bl	131a4 <pool_get_uninit>
   132dc:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   132de:	9b01      	ldr	r3, [sp, #4]
   132e0:	b3a3      	cbz	r3, 1334c <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   132e2:	ea56 0307 	orrs.w	r3, r6, r7
   132e6:	d005      	beq.n	132f4 <net_buf_alloc_len+0x7c>
   132e8:	f1b7 3fff 	cmp.w	r7, #4294967295
   132ec:	bf08      	it	eq
   132ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   132f2:	d11a      	bne.n	1332a <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   132f4:	4632      	mov	r2, r6
   132f6:	463b      	mov	r3, r7
   132f8:	a901      	add	r1, sp, #4
   132fa:	4620      	mov	r0, r4
   132fc:	f7ff ff65 	bl	131ca <data_alloc>
   13300:	4605      	mov	r5, r0
   13302:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   13304:	bb20      	cbnz	r0, 13350 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   13306:	4620      	mov	r0, r4
   13308:	f7ff ff73 	bl	131f2 <net_buf_destroy>
			return NULL;
   1330c:	462c      	mov	r4, r5
   1330e:	e029      	b.n	13364 <net_buf_alloc_len+0xec>
   13310:	f382 8811 	msr	BASEPRI, r2
   13314:	f3bf 8f6f 	isb	sy
   13318:	4632      	mov	r2, r6
   1331a:	463b      	mov	r3, r7
   1331c:	4628      	mov	r0, r5
   1331e:	f7fd fbe5 	bl	10aec <z_impl_k_queue_get>
	if (!buf) {
   13322:	4604      	mov	r4, r0
   13324:	2800      	cmp	r0, #0
   13326:	d1da      	bne.n	132de <net_buf_alloc_len+0x66>
   13328:	e01c      	b.n	13364 <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   1332a:	f7fe fa91 	bl	11850 <sys_clock_tick_get>
   1332e:	ebb9 0900 	subs.w	r9, r9, r0
   13332:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   13336:	f1b9 0f01 	cmp.w	r9, #1
   1333a:	f17a 0300 	sbcs.w	r3, sl, #0
   1333e:	db02      	blt.n	13346 <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   13340:	464e      	mov	r6, r9
   13342:	4657      	mov	r7, sl
   13344:	e7d6      	b.n	132f4 <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   13346:	2600      	movs	r6, #0
   13348:	4637      	mov	r7, r6
   1334a:	e7d3      	b.n	132f4 <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1334c:	2300      	movs	r3, #0
   1334e:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   13350:	2301      	movs	r3, #1
   13352:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   13354:	2300      	movs	r3, #0
   13356:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   13358:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   1335a:	9b01      	ldr	r3, [sp, #4]
   1335c:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   1335e:	4620      	mov	r0, r4
   13360:	f7ff ff85 	bl	1326e <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   13364:	4620      	mov	r0, r4
   13366:	b002      	add	sp, #8
   13368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001336c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   1336c:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1336e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   13370:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13372:	6809      	ldr	r1, [r1, #0]
   13374:	f7ff ff80 	bl	13278 <net_buf_alloc_len>
}
   13378:	bd08      	pop	{r3, pc}

0001337a <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1337a:	b508      	push	{r3, lr}
   1337c:	f7fd fbb6 	bl	10aec <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   13380:	bd08      	pop	{r3, pc}

00013382 <net_buf_slist_put>:
	__asm__ volatile(
   13382:	f04f 0240 	mov.w	r2, #64	; 0x40
   13386:	f3ef 8311 	mrs	r3, BASEPRI
   1338a:	f382 8812 	msr	BASEPRI_MAX, r2
   1338e:	f3bf 8f6f 	isb	sy
	parent->next = child;
   13392:	2200      	movs	r2, #0
   13394:	600a      	str	r2, [r1, #0]
	return list->tail;
   13396:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   13398:	b132      	cbz	r2, 133a8 <net_buf_slist_put+0x26>
	parent->next = child;
   1339a:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1339c:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   1339e:	f383 8811 	msr	BASEPRI, r3
   133a2:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   133a6:	4770      	bx	lr
   133a8:	6041      	str	r1, [r0, #4]
	list->head = node;
   133aa:	6001      	str	r1, [r0, #0]
}
   133ac:	e7f7      	b.n	1339e <net_buf_slist_put+0x1c>

000133ae <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   133ae:	4603      	mov	r3, r0
	__asm__ volatile(
   133b0:	f04f 0140 	mov.w	r1, #64	; 0x40
   133b4:	f3ef 8211 	mrs	r2, BASEPRI
   133b8:	f381 8812 	msr	BASEPRI_MAX, r1
   133bc:	f3bf 8f6f 	isb	sy
	return list->head;
   133c0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   133c2:	b128      	cbz	r0, 133d0 <net_buf_slist_get+0x22>
	return node->next;
   133c4:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   133c6:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   133c8:	f8d3 c004 	ldr.w	ip, [r3, #4]
   133cc:	4560      	cmp	r0, ip
   133ce:	d004      	beq.n	133da <net_buf_slist_get+0x2c>
	__asm__ volatile(
   133d0:	f382 8811 	msr	BASEPRI, r2
   133d4:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   133d8:	4770      	bx	lr
	list->tail = node;
   133da:	6059      	str	r1, [r3, #4]
}
   133dc:	e7f8      	b.n	133d0 <net_buf_slist_get+0x22>

000133de <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   133de:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   133e0:	f001 fe7a 	bl	150d8 <k_queue_append>
}
   133e4:	bd08      	pop	{r3, pc}

000133e6 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   133e6:	b538      	push	{r3, r4, r5, lr}
   133e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   133ea:	e00a      	b.n	13402 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   133ec:	2300      	movs	r3, #0
   133ee:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   133f0:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   133f2:	7aa0      	ldrb	r0, [r4, #10]
   133f4:	f7fa fb46 	bl	da84 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   133f8:	6a03      	ldr	r3, [r0, #32]
   133fa:	b193      	cbz	r3, 13422 <net_buf_unref+0x3c>
			pool->destroy(buf);
   133fc:	4620      	mov	r0, r4
   133fe:	4798      	blx	r3
{
   13400:	462c      	mov	r4, r5
	while (buf) {
   13402:	b194      	cbz	r4, 1342a <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   13404:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   13406:	7a23      	ldrb	r3, [r4, #8]
   13408:	3b01      	subs	r3, #1
   1340a:	b2db      	uxtb	r3, r3
   1340c:	7223      	strb	r3, [r4, #8]
   1340e:	b963      	cbnz	r3, 1342a <net_buf_unref+0x44>
		if (buf->__buf) {
   13410:	6961      	ldr	r1, [r4, #20]
   13412:	2900      	cmp	r1, #0
   13414:	d0ea      	beq.n	133ec <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   13416:	4620      	mov	r0, r4
   13418:	f7ff fef4 	bl	13204 <data_unref>
			buf->__buf = NULL;
   1341c:	2300      	movs	r3, #0
   1341e:	6163      	str	r3, [r4, #20]
   13420:	e7e4      	b.n	133ec <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   13422:	4620      	mov	r0, r4
   13424:	f7ff fee5 	bl	131f2 <net_buf_destroy>
   13428:	e7ea      	b.n	13400 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   1342a:	bd38      	pop	{r3, r4, r5, pc}

0001342c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1342c:	7a02      	ldrb	r2, [r0, #8]
   1342e:	3201      	adds	r2, #1
   13430:	7202      	strb	r2, [r0, #8]
	return buf;
}
   13432:	4770      	bx	lr

00013434 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13434:	6883      	ldr	r3, [r0, #8]
   13436:	440b      	add	r3, r1
   13438:	6003      	str	r3, [r0, #0]
}
   1343a:	4770      	bx	lr

0001343c <net_buf_simple_add>:
	return buf->data + buf->len;
   1343c:	6802      	ldr	r2, [r0, #0]
   1343e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13440:	4419      	add	r1, r3
   13442:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13444:	18d0      	adds	r0, r2, r3
   13446:	4770      	bx	lr

00013448 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13448:	b538      	push	{r3, r4, r5, lr}
   1344a:	460d      	mov	r5, r1
   1344c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1344e:	4611      	mov	r1, r2
   13450:	f7ff fff4 	bl	1343c <net_buf_simple_add>
   13454:	4622      	mov	r2, r4
   13456:	4629      	mov	r1, r5
   13458:	f7ff fc7d 	bl	12d56 <memcpy>
}
   1345c:	bd38      	pop	{r3, r4, r5, pc}

0001345e <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1345e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   13460:	8882      	ldrh	r2, [r0, #4]
   13462:	1a52      	subs	r2, r2, r1
   13464:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   13466:	6800      	ldr	r0, [r0, #0]
   13468:	4408      	add	r0, r1
   1346a:	6018      	str	r0, [r3, #0]
}
   1346c:	4770      	bx	lr

0001346e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1346e:	4603      	mov	r3, r0
	void *data = buf->data;
   13470:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   13472:	889a      	ldrh	r2, [r3, #4]
   13474:	1a52      	subs	r2, r2, r1
   13476:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   13478:	4401      	add	r1, r0
   1347a:	6019      	str	r1, [r3, #0]

	return data;
}
   1347c:	4770      	bx	lr

0001347e <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1347e:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   13480:	6803      	ldr	r3, [r0, #0]
   13482:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13484:	2101      	movs	r1, #1
   13486:	f7ff ffea 	bl	1345e <net_buf_simple_pull>

	return val;
}
   1348a:	4620      	mov	r0, r4
   1348c:	bd10      	pop	{r4, pc}

0001348e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1348e:	6802      	ldr	r2, [r0, #0]
   13490:	6880      	ldr	r0, [r0, #8]
}
   13492:	1a10      	subs	r0, r2, r0
   13494:	4770      	bx	lr

00013496 <nrf_saadc_channel_init>:
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
   13496:	7813      	ldrb	r3, [r2, #0]
   13498:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
   1349c:	f892 c001 	ldrb.w	ip, [r2, #1]
   134a0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   134a4:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
   134a8:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   134ac:	f892 c002 	ldrb.w	ip, [r2, #2]
   134b0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   134b4:	f40c 6ce0 	and.w	ip, ip, #1792	; 0x700
   134b8:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
   134bc:	f892 c003 	ldrb.w	ip, [r2, #3]
   134c0:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
   134c4:	f40c 5c80 	and.w	ip, ip, #4096	; 0x1000
   134c8:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
   134cc:	f892 c004 	ldrb.w	ip, [r2, #4]
   134d0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   134d4:	f40c 2ce0 	and.w	ip, ip, #458752	; 0x70000
   134d8:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   134dc:	f892 c005 	ldrb.w	ip, [r2, #5]
   134e0:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   134e4:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
   134e8:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
   134ec:	7992      	ldrb	r2, [r2, #6]
   134ee:	0612      	lsls	r2, r2, #24
   134f0:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
   134f4:	4313      	orrs	r3, r2
    p_reg->CH[channel].CONFIG =
   134f6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   134fa:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
}
   134fe:	4770      	bx	lr

00013500 <check_buffer_size>:
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   13500:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
   13502:	6803      	ldr	r3, [r0, #0]
   13504:	b113      	cbz	r3, 1350c <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   13506:	899b      	ldrh	r3, [r3, #12]
   13508:	fb03 1101 	mla	r1, r3, r1, r1
	if (sequence->buffer_size < needed_buffer_size) {
   1350c:	68c3      	ldr	r3, [r0, #12]
   1350e:	428b      	cmp	r3, r1
   13510:	d301      	bcc.n	13516 <check_buffer_size+0x16>
	return 0;
   13512:	2000      	movs	r0, #0
   13514:	4770      	bx	lr
		return -ENOMEM;
   13516:	f06f 000b 	mvn.w	r0, #11
}
   1351a:	4770      	bx	lr

0001351c <adc_context_request_next_sampling>:
{
   1351c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1351e:	f3bf 8f5b 	dmb	ish
   13522:	e850 3f00 	ldrex	r3, [r0]
   13526:	1c5a      	adds	r2, r3, #1
   13528:	e840 2100 	strex	r1, r2, [r0]
   1352c:	2900      	cmp	r1, #0
   1352e:	d1f8      	bne.n	13522 <adc_context_request_next_sampling+0x6>
   13530:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   13534:	b11b      	cbz	r3, 1353e <adc_context_request_next_sampling+0x22>
		ctx->status = -EBUSY;
   13536:	f06f 030f 	mvn.w	r3, #15
   1353a:	6703      	str	r3, [r0, #112]	; 0x70
}
   1353c:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
   1353e:	f7fa fb6d 	bl	dc1c <adc_context_start_sampling>
   13542:	e7fb      	b.n	1353c <adc_context_request_next_sampling+0x20>

00013544 <adc_context_on_timer_expired>:
{
	k_timer_stop(&ctx->timer);
}

static void adc_context_on_timer_expired(struct k_timer *timer_id)
{
   13544:	b508      	push	{r3, lr}
	struct adc_context *ctx =
		CONTAINER_OF(timer_id, struct adc_context, timer);

	adc_context_request_next_sampling(ctx);
   13546:	3808      	subs	r0, #8
   13548:	f7ff ffe8 	bl	1351c <adc_context_request_next_sampling>
}
   1354c:	bd08      	pop	{r3, pc}

0001354e <adc_context_lock>:
#endif /* ADC_CONTEXT_USES_KERNEL_TIMER */

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
   1354e:	b508      	push	{r3, lr}
	k_sem_take(&ctx->lock, K_FOREVER);
   13550:	3040      	adds	r0, #64	; 0x40
	return z_impl_k_sem_take(sem, timeout);
   13552:	f04f 32ff 	mov.w	r2, #4294967295
   13556:	f04f 33ff 	mov.w	r3, #4294967295
   1355a:	f7fd fb2d 	bl	10bb8 <z_impl_k_sem_take>

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
	ctx->signal = signal;
#endif /* CONFIG_ADC_ASYNC */
}
   1355e:	bd08      	pop	{r3, pc}

00013560 <adc_context_wait_for_completion>:
		k_sem_give(&ctx->lock);
	}
}

static inline int adc_context_wait_for_completion(struct adc_context *ctx)
{
   13560:	b510      	push	{r4, lr}
   13562:	4604      	mov	r4, r0
	if (ctx->asynchronous) {
		return 0;
	}
#endif /* CONFIG_ADC_ASYNC */

	k_sem_take(&ctx->sync, K_FOREVER);
   13564:	3058      	adds	r0, #88	; 0x58
   13566:	f04f 32ff 	mov.w	r2, #4294967295
   1356a:	f04f 33ff 	mov.w	r3, #4294967295
   1356e:	f7fd fb23 	bl	10bb8 <z_impl_k_sem_take>
	return ctx->status;
}
   13572:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13574:	bd10      	pop	{r4, pc}

00013576 <adc_context_start_read>:
	k_sem_give(&ctx->sync);
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
   13576:	b538      	push	{r3, r4, r5, lr}
   13578:	4684      	mov	ip, r0
   1357a:	460d      	mov	r5, r1
	ctx->sequence = *sequence;
   1357c:	f100 0e74 	add.w	lr, r0, #116	; 0x74
   13580:	460c      	mov	r4, r1
   13582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   13588:	6823      	ldr	r3, [r4, #0]
   1358a:	f8ce 3000 	str.w	r3, [lr]
	ctx->status = 0;
   1358e:	2300      	movs	r3, #0
   13590:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
   13594:	682b      	ldr	r3, [r5, #0]
   13596:	b153      	cbz	r3, 135ae <adc_context_start_read+0x38>
		ctx->options = *sequence->options;
   13598:	f10c 0488 	add.w	r4, ip, #136	; 0x88
   1359c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1359e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   135a2:	f8cc 4074 	str.w	r4, [ip, #116]	; 0x74
		ctx->sampling_index = 0U;
   135a6:	2300      	movs	r3, #0
   135a8:	f8ac 3098 	strh.w	r3, [ip, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   135ac:	b918      	cbnz	r0, 135b6 <adc_context_start_read+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   135ae:	4660      	mov	r0, ip
   135b0:	f7fa fb34 	bl	dc1c <adc_context_start_sampling>
}
   135b4:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   135b6:	2300      	movs	r3, #0
   135b8:	f3bf 8f5b 	dmb	ish
   135bc:	e85c 2f00 	ldrex	r2, [ip]
   135c0:	e84c 3100 	strex	r1, r3, [ip]
   135c4:	2900      	cmp	r1, #0
   135c6:	d1f9      	bne.n	135bc <adc_context_start_read+0x46>
   135c8:	f3bf 8f5b 	dmb	ish
			adc_context_enable_timer(ctx);
   135cc:	4660      	mov	r0, ip
   135ce:	f7fa fb7d 	bl	dccc <adc_context_enable_timer>
			return;
   135d2:	e7ef      	b.n	135b4 <adc_context_start_read+0x3e>

000135d4 <adc_context_unlock_unconditionally>:
{
   135d4:	b508      	push	{r3, lr}
	return sem->count;
   135d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
   135d8:	b103      	cbz	r3, 135dc <adc_context_unlock_unconditionally+0x8>
}
   135da:	bd08      	pop	{r3, pc}
		k_sem_give(&ctx->lock);
   135dc:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
   135de:	f7fd fac3 	bl	10b68 <z_impl_k_sem_give>
}
   135e2:	e7fa      	b.n	135da <adc_context_unlock_unconditionally+0x6>

000135e4 <adc_context_on_sampling_done>:
 * depending on the realized sequence) is done. It calls the defined callback
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
   135e4:	b510      	push	{r4, lr}
   135e6:	4604      	mov	r4, r0
	if (ctx->sequence.options) {
   135e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
   135ea:	b30b      	cbz	r3, 13630 <adc_context_on_sampling_done+0x4c>
   135ec:	4608      	mov	r0, r1
		adc_sequence_callback callback = ctx->options.callback;
   135ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   135f2:	b143      	cbz	r3, 13606 <adc_context_on_sampling_done+0x22>
			action = callback(dev,
   135f4:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   135f8:	f104 0174 	add.w	r1, r4, #116	; 0x74
   135fc:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   135fe:	2801      	cmp	r0, #1
   13600:	d00d      	beq.n	1361e <adc_context_on_sampling_done+0x3a>
   13602:	2802      	cmp	r0, #2
   13604:	d00e      	beq.n	13624 <adc_context_on_sampling_done+0x40>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   13606:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
			    ctx->options.extra_samplings) {
   1360a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
			if (ctx->sampling_index <
   1360e:	4293      	cmp	r3, r2
   13610:	d213      	bcs.n	1363a <adc_context_on_sampling_done+0x56>
				++ctx->sampling_index;
   13612:	3301      	adds	r3, #1
   13614:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
		bool repeat = false;
   13618:	2100      	movs	r1, #0
		bool finish = false;
   1361a:	460b      	mov	r3, r1
   1361c:	e004      	b.n	13628 <adc_context_on_sampling_done+0x44>
		switch (action) {
   1361e:	2101      	movs	r1, #1
   13620:	2300      	movs	r3, #0
   13622:	e001      	b.n	13628 <adc_context_on_sampling_done+0x44>
		bool repeat = false;
   13624:	2100      	movs	r1, #0
			finish = true;
   13626:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
   13628:	b153      	cbz	r3, 13640 <adc_context_on_sampling_done+0x5c>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1362a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1362e:	bb13      	cbnz	r3, 13676 <adc_context_on_sampling_done+0x92>
	k_sem_give(&ctx->sync);
   13630:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13634:	f7fd fa98 	bl	10b68 <z_impl_k_sem_give>
			adc_context_disable_timer(ctx);
		}
	}

	adc_context_complete(ctx, 0);
}
   13638:	bd10      	pop	{r4, pc}
		bool repeat = false;
   1363a:	2100      	movs	r1, #0
				finish = true;
   1363c:	2301      	movs	r3, #1
   1363e:	e7f3      	b.n	13628 <adc_context_on_sampling_done+0x44>
			adc_context_update_buffer_pointer(ctx, repeat);
   13640:	4620      	mov	r0, r4
   13642:	f7fa fafd 	bl	dc40 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
   13646:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1364a:	b91b      	cbnz	r3, 13654 <adc_context_on_sampling_done+0x70>
				adc_context_start_sampling(ctx);
   1364c:	4620      	mov	r0, r4
   1364e:	f7fa fae5 	bl	dc1c <adc_context_start_sampling>
   13652:	e7f1      	b.n	13638 <adc_context_on_sampling_done+0x54>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13654:	f3bf 8f5b 	dmb	ish
   13658:	e854 3f00 	ldrex	r3, [r4]
   1365c:	1e5a      	subs	r2, r3, #1
   1365e:	e844 2100 	strex	r1, r2, [r4]
   13662:	2900      	cmp	r1, #0
   13664:	d1f8      	bne.n	13658 <adc_context_on_sampling_done+0x74>
   13666:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1366a:	2b01      	cmp	r3, #1
   1366c:	dde4      	ble.n	13638 <adc_context_on_sampling_done+0x54>
				adc_context_start_sampling(ctx);
   1366e:	4620      	mov	r0, r4
   13670:	f7fa fad4 	bl	dc1c <adc_context_start_sampling>
			return;
   13674:	e7e0      	b.n	13638 <adc_context_on_sampling_done+0x54>
	k_timer_stop(&ctx->timer);
   13676:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_timer_stop(timer);
   1367a:	f002 f823 	bl	156c4 <z_impl_k_timer_stop>
}
   1367e:	e7d7      	b.n	13630 <adc_context_on_sampling_done+0x4c>

00013680 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   13680:	b119      	cbz	r1, 1368a <nrf_clock_is_running+0xa>
   13682:	2901      	cmp	r1, #1
   13684:	d00e      	beq.n	136a4 <nrf_clock_is_running+0x24>
   13686:	2000      	movs	r0, #0
   13688:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   1368a:	b122      	cbz	r2, 13696 <nrf_clock_is_running+0x16>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1368c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13690:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13694:	6013      	str	r3, [r2, #0]
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13696:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1369a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1369e:	d10e      	bne.n	136be <nrf_clock_is_running+0x3e>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   136a0:	2000      	movs	r0, #0
   136a2:	4770      	bx	lr
            if (p_clk_src != NULL)
   136a4:	b122      	cbz	r2, 136b0 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   136a6:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   136aa:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   136ae:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   136b0:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   136b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   136b8:	d103      	bne.n	136c2 <nrf_clock_is_running+0x42>
    return false;
   136ba:	2000      	movs	r0, #0
   136bc:	4770      	bx	lr
                return true;
   136be:	2001      	movs	r0, #1
   136c0:	4770      	bx	lr
                return true;
   136c2:	2001      	movs	r0, #1
}
   136c4:	4770      	bx	lr

000136c6 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   136c6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   136c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   136cc:	0089      	lsls	r1, r1, #2
   136ce:	3138      	adds	r1, #56	; 0x38
}
   136d0:	4408      	add	r0, r1
   136d2:	4770      	bx	lr

000136d4 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   136d4:	6840      	ldr	r0, [r0, #4]
}
   136d6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   136da:	4770      	bx	lr

000136dc <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   136dc:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   136de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   136e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   136e6:	4770      	bx	lr

000136e8 <get_status>:
{
   136e8:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   136ea:	b2c9      	uxtb	r1, r1
   136ec:	f7ff ffeb 	bl	136c6 <get_sub_data>
   136f0:	6880      	ldr	r0, [r0, #8]
}
   136f2:	f000 0007 	and.w	r0, r0, #7
   136f6:	bd08      	pop	{r3, pc}

000136f8 <set_off_state>:
	__asm__ volatile(
   136f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   136fc:	f3ef 8211 	mrs	r2, BASEPRI
   13700:	f383 8812 	msr	BASEPRI_MAX, r3
   13704:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13708:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1370a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1370e:	d001      	beq.n	13714 <set_off_state+0x1c>
   13710:	428b      	cmp	r3, r1
   13712:	d107      	bne.n	13724 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13714:	2301      	movs	r3, #1
   13716:	6003      	str	r3, [r0, #0]
	int err = 0;
   13718:	2000      	movs	r0, #0
	__asm__ volatile(
   1371a:	f382 8811 	msr	BASEPRI, r2
   1371e:	f3bf 8f6f 	isb	sy
}
   13722:	4770      	bx	lr
		err = -EPERM;
   13724:	f04f 30ff 	mov.w	r0, #4294967295
   13728:	e7f7      	b.n	1371a <set_off_state+0x22>

0001372a <set_starting_state>:
	__asm__ volatile(
   1372a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1372e:	f3ef 8211 	mrs	r2, BASEPRI
   13732:	f383 8812 	msr	BASEPRI_MAX, r3
   13736:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1373a:	6803      	ldr	r3, [r0, #0]
   1373c:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   13740:	f003 0307 	and.w	r3, r3, #7
   13744:	2b01      	cmp	r3, #1
   13746:	d008      	beq.n	1375a <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   13748:	458c      	cmp	ip, r1
   1374a:	d009      	beq.n	13760 <set_starting_state+0x36>
		err = -EPERM;
   1374c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   13750:	f382 8811 	msr	BASEPRI, r2
   13754:	f3bf 8f6f 	isb	sy
}
   13758:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1375a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1375c:	2000      	movs	r0, #0
   1375e:	e7f7      	b.n	13750 <set_starting_state+0x26>
		err = -EALREADY;
   13760:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13764:	e7f4      	b.n	13750 <set_starting_state+0x26>

00013766 <set_on_state>:
	__asm__ volatile(
   13766:	f04f 0340 	mov.w	r3, #64	; 0x40
   1376a:	f3ef 8211 	mrs	r2, BASEPRI
   1376e:	f383 8812 	msr	BASEPRI_MAX, r3
   13772:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   13776:	6803      	ldr	r3, [r0, #0]
   13778:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1377c:	f043 0302 	orr.w	r3, r3, #2
   13780:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   13782:	f382 8811 	msr	BASEPRI, r2
   13786:	f3bf 8f6f 	isb	sy
}
   1378a:	4770      	bx	lr

0001378c <clkstarted_handle>:
{
   1378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1378e:	4606      	mov	r6, r0
   13790:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13792:	f7ff ff98 	bl	136c6 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   13796:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   13798:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1379a:	2300      	movs	r3, #0
   1379c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   137a0:	f7ff ffe1 	bl	13766 <set_on_state>
	if (callback) {
   137a4:	b11d      	cbz	r5, 137ae <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   137a6:	463a      	mov	r2, r7
   137a8:	4621      	mov	r1, r4
   137aa:	4630      	mov	r0, r6
   137ac:	47a8      	blx	r5
}
   137ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000137b0 <stop>:
{
   137b0:	b570      	push	{r4, r5, r6, lr}
   137b2:	4606      	mov	r6, r0
   137b4:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   137b6:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   137b8:	4621      	mov	r1, r4
   137ba:	f7ff ff84 	bl	136c6 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   137be:	4629      	mov	r1, r5
   137c0:	3008      	adds	r0, #8
   137c2:	f7ff ff99 	bl	136f8 <set_off_state>
	if (err < 0) {
   137c6:	2800      	cmp	r0, #0
   137c8:	db06      	blt.n	137d8 <stop+0x28>
	get_sub_config(dev, type)->stop();
   137ca:	4621      	mov	r1, r4
   137cc:	4630      	mov	r0, r6
   137ce:	f7ff ff81 	bl	136d4 <get_sub_config>
   137d2:	6843      	ldr	r3, [r0, #4]
   137d4:	4798      	blx	r3
	return 0;
   137d6:	2000      	movs	r0, #0
}
   137d8:	bd70      	pop	{r4, r5, r6, pc}

000137da <api_stop>:
{
   137da:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   137dc:	2280      	movs	r2, #128	; 0x80
   137de:	f7ff ffe7 	bl	137b0 <stop>
}
   137e2:	bd08      	pop	{r3, pc}

000137e4 <async_start>:
{
   137e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137e8:	4606      	mov	r6, r0
   137ea:	4690      	mov	r8, r2
   137ec:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   137ee:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   137f0:	4629      	mov	r1, r5
   137f2:	f7ff ff68 	bl	136c6 <get_sub_data>
   137f6:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   137f8:	9906      	ldr	r1, [sp, #24]
   137fa:	3008      	adds	r0, #8
   137fc:	f7ff ff95 	bl	1372a <set_starting_state>
	if (err < 0) {
   13800:	2800      	cmp	r0, #0
   13802:	db09      	blt.n	13818 <async_start+0x34>
	subdata->cb = cb;
   13804:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   13808:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1380a:	4629      	mov	r1, r5
   1380c:	4630      	mov	r0, r6
   1380e:	f7ff ff61 	bl	136d4 <get_sub_config>
   13812:	6803      	ldr	r3, [r0, #0]
   13814:	4798      	blx	r3
	return 0;
   13816:	2000      	movs	r0, #0
}
   13818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001381c <api_start>:
{
   1381c:	b510      	push	{r4, lr}
   1381e:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   13820:	2480      	movs	r4, #128	; 0x80
   13822:	9400      	str	r4, [sp, #0]
   13824:	f7ff ffde 	bl	137e4 <async_start>
}
   13828:	b002      	add	sp, #8
   1382a:	bd10      	pop	{r4, pc}

0001382c <onoff_started_callback>:
{
   1382c:	b510      	push	{r4, lr}
   1382e:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   13830:	b2c9      	uxtb	r1, r1
   13832:	f7ff ff53 	bl	136dc <get_onoff_manager>
	notify(mgr, 0);
   13836:	2100      	movs	r1, #0
   13838:	47a0      	blx	r4
}
   1383a:	bd10      	pop	{r4, pc}

0001383c <hfclk_start>:
{
   1383c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1383e:	2001      	movs	r0, #1
   13840:	f7fb feb8 	bl	f5b4 <nrfx_clock_start>
}
   13844:	bd08      	pop	{r3, pc}

00013846 <hfclk_stop>:
{
   13846:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13848:	2001      	movs	r0, #1
   1384a:	f000 ff17 	bl	1467c <nrfx_clock_stop>
}
   1384e:	bd08      	pop	{r3, pc}

00013850 <lfclk_stop>:
{
   13850:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   13852:	2000      	movs	r0, #0
   13854:	f000 ff12 	bl	1467c <nrfx_clock_stop>
}
   13858:	bd08      	pop	{r3, pc}

0001385a <k_msleep>:
{
   1385a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1385c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13860:	17c1      	asrs	r1, r0, #31
   13862:	03c9      	lsls	r1, r1, #15
   13864:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   13868:	03c0      	lsls	r0, r0, #15
   1386a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1386e:	18c0      	adds	r0, r0, r3
   13870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13874:	f04f 0300 	mov.w	r3, #0
   13878:	f141 0100 	adc.w	r1, r1, #0
   1387c:	f7ed f824 	bl	8c8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   13880:	f7fd fe4a 	bl	11518 <z_impl_k_sleep>
}
   13884:	bd08      	pop	{r3, pc}

00013886 <blocking_start_callback>:
{
   13886:	b508      	push	{r3, lr}
   13888:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1388a:	f7fd f96d 	bl	10b68 <z_impl_k_sem_give>
}
   1388e:	bd08      	pop	{r3, pc}

00013890 <lfclk_start>:
{
   13890:	b508      	push	{r3, lr}
		anomaly_132_workaround();
   13892:	f7fa fc03 	bl	e09c <anomaly_132_workaround>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   13896:	2000      	movs	r0, #0
   13898:	f7fb fe8c 	bl	f5b4 <nrfx_clock_start>
}
   1389c:	bd08      	pop	{r3, pc}

0001389e <rng_pool_put>:
	uint8_t first = rngp->first_read;
   1389e:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   138a0:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   138a2:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   138a6:	1a9a      	subs	r2, r3, r2
   138a8:	ea3c 0202 	bics.w	r2, ip, r2
   138ac:	d007      	beq.n	138be <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   138ae:	18c2      	adds	r2, r0, r3
   138b0:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   138b2:	3301      	adds	r3, #1
   138b4:	ea03 030c 	and.w	r3, r3, ip
   138b8:	7083      	strb	r3, [r0, #2]
	return 0;
   138ba:	2000      	movs	r0, #0
   138bc:	4770      	bx	lr
		return -ENOBUFS;
   138be:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   138c2:	4770      	bx	lr

000138c4 <rng_pool_init>:
	rngp->first_alloc = 0U;
   138c4:	2300      	movs	r3, #0
   138c6:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   138c8:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   138ca:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   138cc:	3901      	subs	r1, #1
   138ce:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   138d0:	7102      	strb	r2, [r0, #4]
}
   138d2:	4770      	bx	lr

000138d4 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   138d4:	2000      	movs	r0, #0
   138d6:	4770      	bx	lr

000138d8 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   138d8:	b538      	push	{r3, r4, r5, lr}
   138da:	460c      	mov	r4, r1
   138dc:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   138de:	f7f9 fd4f 	bl	d380 <bt_is_ready>
   138e2:	b120      	cbz	r0, 138ee <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   138e4:	4629      	mov	r1, r5
   138e6:	4620      	mov	r0, r4
   138e8:	f7f9 fb72 	bl	cfd0 <bt_hci_le_rand>
}
   138ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   138ee:	f06f 000a 	mvn.w	r0, #10
   138f2:	e7fb      	b.n	138ec <entropy_bt_get_entropy+0x14>

000138f4 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   138f4:	460b      	mov	r3, r1
   138f6:	b139      	cbz	r1, 13908 <sys_slist_remove+0x14>
	return node->next;
   138f8:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   138fa:	6019      	str	r1, [r3, #0]
	return list->tail;
   138fc:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   138fe:	428a      	cmp	r2, r1
   13900:	d009      	beq.n	13916 <sys_slist_remove+0x22>
	parent->next = child;
   13902:	2300      	movs	r3, #0
   13904:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13906:	4770      	bx	lr
	return node->next;
   13908:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1390a:	6003      	str	r3, [r0, #0]
	return list->tail;
   1390c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1390e:	428a      	cmp	r2, r1
   13910:	d1f7      	bne.n	13902 <sys_slist_remove+0xe>
	list->tail = node;
   13912:	6043      	str	r3, [r0, #4]
}
   13914:	e7f5      	b.n	13902 <sys_slist_remove+0xe>
	list->tail = node;
   13916:	6043      	str	r3, [r0, #4]
}
   13918:	e7f3      	b.n	13902 <sys_slist_remove+0xe>

0001391a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1391a:	b508      	push	{r3, lr}
   1391c:	460a      	mov	r2, r1
	return list->head;
   1391e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13920:	2100      	movs	r1, #0
   13922:	e001      	b.n	13928 <sys_slist_find_and_remove+0xe>
   13924:	4619      	mov	r1, r3
   13926:	681b      	ldr	r3, [r3, #0]
   13928:	b12b      	cbz	r3, 13936 <sys_slist_find_and_remove+0x1c>
   1392a:	4293      	cmp	r3, r2
   1392c:	d1fa      	bne.n	13924 <sys_slist_find_and_remove+0xa>
   1392e:	f7ff ffe1 	bl	138f4 <sys_slist_remove>
   13932:	2001      	movs	r0, #1
   13934:	e000      	b.n	13938 <sys_slist_find_and_remove+0x1e>
   13936:	2000      	movs	r0, #0
   13938:	bd08      	pop	{r3, pc}

0001393a <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   1393a:	b570      	push	{r4, r5, r6, lr}
   1393c:	4604      	mov	r4, r0
   1393e:	460d      	mov	r5, r1
   13940:	4616      	mov	r6, r2
	return list->head;
   13942:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   13944:	b133      	cbz	r3, 13954 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   13946:	f7ff ffe8 	bl	1391a <sys_slist_find_and_remove>
   1394a:	b970      	cbnz	r0, 1396a <gpio_manage_callback+0x30>
			if (!set) {
   1394c:	b91e      	cbnz	r6, 13956 <gpio_manage_callback+0x1c>
				return -EINVAL;
   1394e:	f06f 0015 	mvn.w	r0, #21
   13952:	e006      	b.n	13962 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   13954:	b132      	cbz	r2, 13964 <gpio_manage_callback+0x2a>
   13956:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   13958:	602b      	str	r3, [r5, #0]
	list->head = node;
   1395a:	6025      	str	r5, [r4, #0]
	return list->tail;
   1395c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1395e:	b143      	cbz	r3, 13972 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   13960:	2000      	movs	r0, #0
}
   13962:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13964:	f06f 0015 	mvn.w	r0, #21
   13968:	e7fb      	b.n	13962 <gpio_manage_callback+0x28>
	if (set) {
   1396a:	2e00      	cmp	r6, #0
   1396c:	d1f3      	bne.n	13956 <gpio_manage_callback+0x1c>
	return 0;
   1396e:	2000      	movs	r0, #0
   13970:	e7f7      	b.n	13962 <gpio_manage_callback+0x28>
	list->tail = node;
   13972:	6065      	str	r5, [r4, #4]
   13974:	2000      	movs	r0, #0
}
   13976:	e7f4      	b.n	13962 <gpio_manage_callback+0x28>

00013978 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   13978:	b570      	push	{r4, r5, r6, lr}
   1397a:	460e      	mov	r6, r1
   1397c:	4615      	mov	r5, r2
	return list->head;
   1397e:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13980:	b121      	cbz	r1, 1398c <gpio_fire_callbacks+0x14>
	return node->next;
   13982:	680c      	ldr	r4, [r1, #0]
   13984:	b13c      	cbz	r4, 13996 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13986:	b931      	cbnz	r1, 13996 <gpio_fire_callbacks+0x1e>
   13988:	460c      	mov	r4, r1
   1398a:	e004      	b.n	13996 <gpio_fire_callbacks+0x1e>
   1398c:	460c      	mov	r4, r1
   1398e:	e002      	b.n	13996 <gpio_fire_callbacks+0x1e>
   13990:	4623      	mov	r3, r4
   13992:	4621      	mov	r1, r4
   13994:	461c      	mov	r4, r3
   13996:	b171      	cbz	r1, 139b6 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   13998:	688a      	ldr	r2, [r1, #8]
   1399a:	402a      	ands	r2, r5
   1399c:	d002      	beq.n	139a4 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1399e:	684b      	ldr	r3, [r1, #4]
   139a0:	4630      	mov	r0, r6
   139a2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   139a4:	2c00      	cmp	r4, #0
   139a6:	d0f3      	beq.n	13990 <gpio_fire_callbacks+0x18>
	return node->next;
   139a8:	6823      	ldr	r3, [r4, #0]
   139aa:	2b00      	cmp	r3, #0
   139ac:	d0f1      	beq.n	13992 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   139ae:	2c00      	cmp	r4, #0
   139b0:	d1ef      	bne.n	13992 <gpio_fire_callbacks+0x1a>
   139b2:	4623      	mov	r3, r4
   139b4:	e7ed      	b.n	13992 <gpio_fire_callbacks+0x1a>
		}
	}
}
   139b6:	bd70      	pop	{r4, r5, r6, pc}

000139b8 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   139b8:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   139bc:	0580      	lsls	r0, r0, #22
   139be:	0d80      	lsrs	r0, r0, #22
   139c0:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   139c4:	d033      	beq.n	13a2e <get_drive+0x76>
   139c6:	d816      	bhi.n	139f6 <get_drive+0x3e>
   139c8:	2806      	cmp	r0, #6
   139ca:	d02c      	beq.n	13a26 <get_drive+0x6e>
   139cc:	d906      	bls.n	139dc <get_drive+0x24>
   139ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   139d2:	d10d      	bne.n	139f0 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   139d4:	2301      	movs	r3, #1
   139d6:	700b      	strb	r3, [r1, #0]
	return 0;
   139d8:	2000      	movs	r0, #0
		break;
   139da:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   139dc:	b300      	cbz	r0, 13a20 <get_drive+0x68>
   139de:	2802      	cmp	r0, #2
   139e0:	d103      	bne.n	139ea <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   139e2:	2304      	movs	r3, #4
   139e4:	700b      	strb	r3, [r1, #0]
	return 0;
   139e6:	2000      	movs	r0, #0
		break;
   139e8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   139ea:	f06f 0015 	mvn.w	r0, #21
   139ee:	4770      	bx	lr
   139f0:	f06f 0015 	mvn.w	r0, #21
   139f4:	4770      	bx	lr
   139f6:	f240 2302 	movw	r3, #514	; 0x202
   139fa:	4298      	cmp	r0, r3
   139fc:	d01b      	beq.n	13a36 <get_drive+0x7e>
   139fe:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   13a02:	d103      	bne.n	13a0c <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   13a04:	2303      	movs	r3, #3
   13a06:	700b      	strb	r3, [r1, #0]
	return 0;
   13a08:	2000      	movs	r0, #0
		break;
   13a0a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13a0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13a10:	d103      	bne.n	13a1a <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   13a12:	2302      	movs	r3, #2
   13a14:	700b      	strb	r3, [r1, #0]
	return 0;
   13a16:	2000      	movs	r0, #0
		break;
   13a18:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13a1a:	f06f 0015 	mvn.w	r0, #21
   13a1e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   13a20:	2000      	movs	r0, #0
   13a22:	7008      	strb	r0, [r1, #0]
		break;
   13a24:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   13a26:	2306      	movs	r3, #6
   13a28:	700b      	strb	r3, [r1, #0]
	return 0;
   13a2a:	2000      	movs	r0, #0
		break;
   13a2c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   13a2e:	2307      	movs	r3, #7
   13a30:	700b      	strb	r3, [r1, #0]
	return 0;
   13a32:	2000      	movs	r0, #0
		break;
   13a34:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   13a36:	2305      	movs	r3, #5
   13a38:	700b      	strb	r3, [r1, #0]
	return 0;
   13a3a:	2000      	movs	r0, #0
}
   13a3c:	4770      	bx	lr

00013a3e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   13a3e:	f010 0f10 	tst.w	r0, #16
   13a42:	d104      	bne.n	13a4e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   13a44:	f010 0f20 	tst.w	r0, #32
   13a48:	d103      	bne.n	13a52 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   13a4a:	2000      	movs	r0, #0
   13a4c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   13a4e:	2003      	movs	r0, #3
   13a50:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   13a52:	2001      	movs	r0, #1
}
   13a54:	4770      	bx	lr

00013a56 <gpio_nrfx_port_get_raw>:
	return port->config;
   13a56:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13a58:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   13a5a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   13a5e:	600b      	str	r3, [r1, #0]
}
   13a60:	2000      	movs	r0, #0
   13a62:	4770      	bx	lr

00013a64 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   13a64:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13a66:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   13a68:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   13a6c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   13a70:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   13a74:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   13a78:	2000      	movs	r0, #0
   13a7a:	4770      	bx	lr

00013a7c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   13a7c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13a7e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   13a80:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   13a84:	2000      	movs	r0, #0
   13a86:	4770      	bx	lr

00013a88 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   13a88:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13a8a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   13a8c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   13a90:	2000      	movs	r0, #0
   13a92:	4770      	bx	lr

00013a94 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   13a94:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13a96:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   13a98:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   13a9c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   13aa0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   13aa2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   13aa6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   13aaa:	2000      	movs	r0, #0
   13aac:	4770      	bx	lr

00013aae <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   13aae:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   13ab2:	d007      	beq.n	13ac4 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13ab4:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   13ab8:	d00d      	beq.n	13ad6 <get_trigger+0x28>
   13aba:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   13abe:	d008      	beq.n	13ad2 <get_trigger+0x24>
   13ac0:	2001      	movs	r0, #1
}
   13ac2:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   13ac4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   13ac8:	d001      	beq.n	13ace <get_trigger+0x20>
   13aca:	2005      	movs	r0, #5
   13acc:	4770      	bx	lr
   13ace:	2004      	movs	r0, #4
   13ad0:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13ad2:	2002      	movs	r0, #2
   13ad4:	4770      	bx	lr
   13ad6:	2003      	movs	r0, #3
   13ad8:	4770      	bx	lr

00013ada <gpio_nrfx_manage_callback>:
{
   13ada:	b508      	push	{r3, lr}
	return port->data;
   13adc:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13ade:	3004      	adds	r0, #4
   13ae0:	f7ff ff2b 	bl	1393a <gpio_manage_callback>
}
   13ae4:	bd08      	pop	{r3, pc}

00013ae6 <nrfx_gpio_handler>:
{
   13ae6:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   13ae8:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   13aec:	0940      	lsrs	r0, r0, #5
   13aee:	f7fa fcbb 	bl	e468 <get_dev>
	if (port == NULL) {
   13af2:	b130      	cbz	r0, 13b02 <nrfx_gpio_handler+0x1c>
   13af4:	4601      	mov	r1, r0
	return port->data;
   13af6:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   13af8:	2201      	movs	r2, #1
   13afa:	40a2      	lsls	r2, r4
   13afc:	3004      	adds	r0, #4
   13afe:	f7ff ff3b 	bl	13978 <gpio_fire_callbacks>
}
   13b02:	bd10      	pop	{r4, pc}

00013b04 <i2c_nrfx_twi_configure>:
{
   13b04:	b410      	push	{r4}
	const struct i2c_nrfx_twi_config *config = dev->config;
   13b06:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   13b08:	6902      	ldr	r2, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   13b0a:	f011 0f01 	tst.w	r1, #1
   13b0e:	d117      	bne.n	13b40 <i2c_nrfx_twi_configure+0x3c>
	switch (I2C_SPEED_GET(dev_config)) {
   13b10:	f3c1 0342 	ubfx	r3, r1, #1, #3
   13b14:	2b01      	cmp	r3, #1
   13b16:	d004      	beq.n	13b22 <i2c_nrfx_twi_configure+0x1e>
   13b18:	2b02      	cmp	r3, #2
   13b1a:	d00b      	beq.n	13b34 <i2c_nrfx_twi_configure+0x30>
   13b1c:	f06f 0015 	mvn.w	r0, #21
   13b20:	e006      	b.n	13b30 <i2c_nrfx_twi_configure+0x2c>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   13b22:	6823      	ldr	r3, [r4, #0]
    p_reg->FREQUENCY = frequency;
   13b24:	f04f 70cc 	mov.w	r0, #26738688	; 0x1980000
   13b28:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   13b2c:	6351      	str	r1, [r2, #52]	; 0x34
	return 0;
   13b2e:	2000      	movs	r0, #0
}
   13b30:	bc10      	pop	{r4}
   13b32:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   13b34:	6823      	ldr	r3, [r4, #0]
   13b36:	f04f 60cd 	mov.w	r0, #107479040	; 0x6680000
   13b3a:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
}
   13b3e:	e7f5      	b.n	13b2c <i2c_nrfx_twi_configure+0x28>
		return -EINVAL;
   13b40:	f06f 0015 	mvn.w	r0, #21
   13b44:	e7f4      	b.n	13b30 <i2c_nrfx_twi_configure+0x2c>

00013b46 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   13b46:	b510      	push	{r4, lr}
   13b48:	b082      	sub	sp, #8
   13b4a:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   13b4c:	aa01      	add	r2, sp, #4
   13b4e:	f000 f81c 	bl	13b8a <pinctrl_lookup_state>
	if (ret < 0) {
   13b52:	2800      	cmp	r0, #0
   13b54:	db05      	blt.n	13b62 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   13b56:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13b58:	6822      	ldr	r2, [r4, #0]
   13b5a:	7919      	ldrb	r1, [r3, #4]
   13b5c:	6818      	ldr	r0, [r3, #0]
   13b5e:	f7fa fe6b 	bl	e838 <pinctrl_configure_pins>
}
   13b62:	b002      	add	sp, #8
   13b64:	bd10      	pop	{r4, pc}

00013b66 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   13b66:	b510      	push	{r4, lr}
   13b68:	4604      	mov	r4, r0
   13b6a:	2200      	movs	r2, #0
   13b6c:	2101      	movs	r1, #1
   13b6e:	2003      	movs	r0, #3
   13b70:	f7fe fffe 	bl	12b70 <z_arm_irq_priority_set>
   13b74:	6863      	ldr	r3, [r4, #4]
   13b76:	2100      	movs	r1, #0
   13b78:	6998      	ldr	r0, [r3, #24]
   13b7a:	f7ff ffe4 	bl	13b46 <pinctrl_apply_state>
   13b7e:	2800      	cmp	r0, #0
   13b80:	db02      	blt.n	13b88 <twi_0_init+0x22>
   13b82:	4620      	mov	r0, r4
   13b84:	f7fa fe42 	bl	e80c <init_twi>
   13b88:	bd10      	pop	{r4, pc}

00013b8a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   13b8a:	b500      	push	{lr}
	*state = &config->states[0];
   13b8c:	6843      	ldr	r3, [r0, #4]
   13b8e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   13b90:	e001      	b.n	13b96 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   13b92:	3308      	adds	r3, #8
   13b94:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   13b96:	6813      	ldr	r3, [r2, #0]
   13b98:	f890 c008 	ldrb.w	ip, [r0, #8]
   13b9c:	f8d0 e004 	ldr.w	lr, [r0, #4]
   13ba0:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   13ba4:	4563      	cmp	r3, ip
   13ba6:	d205      	bcs.n	13bb4 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   13ba8:	f893 c005 	ldrb.w	ip, [r3, #5]
   13bac:	458c      	cmp	ip, r1
   13bae:	d1f0      	bne.n	13b92 <pinctrl_lookup_state+0x8>
			return 0;
   13bb0:	2000      	movs	r0, #0
   13bb2:	e001      	b.n	13bb8 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   13bb4:	f06f 0001 	mvn.w	r0, #1
}
   13bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00013bbc <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   13bbc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13bbe:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   13bc0:	f04f 0140 	mov.w	r1, #64	; 0x40
   13bc4:	f3ef 8311 	mrs	r3, BASEPRI
   13bc8:	f381 8812 	msr	BASEPRI_MAX, r1
   13bcc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13bd0:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   13bd4:	b131      	cbz	r1, 13be4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13bd6:	2100      	movs	r1, #0
   13bd8:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   13bdc:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13be0:	2101      	movs	r1, #1
   13be2:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   13be4:	f383 8811 	msr	BASEPRI, r3
   13be8:	f3bf 8f6f 	isb	sy
}
   13bec:	4770      	bx	lr

00013bee <uarte_nrfx_isr_int>:
{
   13bee:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   13bf0:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   13bf2:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   13bf4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   13bf8:	f413 7f80 	tst.w	r3, #256	; 0x100
   13bfc:	d002      	beq.n	13c04 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13bfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13c02:	b9d3      	cbnz	r3, 13c3a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13c04:	686b      	ldr	r3, [r5, #4]
   13c06:	f013 0f10 	tst.w	r3, #16
   13c0a:	d015      	beq.n	13c38 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   13c0c:	f04f 0240 	mov.w	r2, #64	; 0x40
   13c10:	f3ef 8311 	mrs	r3, BASEPRI
   13c14:	f382 8812 	msr	BASEPRI_MAX, r2
   13c18:	f3bf 8f6f 	isb	sy
   13c1c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13c20:	b112      	cbz	r2, 13c28 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13c22:	2200      	movs	r2, #0
   13c24:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   13c28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   13c2c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   13c30:	f383 8811 	msr	BASEPRI, r3
   13c34:	f3bf 8f6f 	isb	sy
}
   13c38:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   13c3a:	f7ff ffbf 	bl	13bbc <endtx_isr>
   13c3e:	e7e1      	b.n	13c04 <uarte_nrfx_isr_int+0x16>

00013c40 <uarte_nrfx_configure>:
{
   13c40:	b570      	push	{r4, r5, r6, lr}
   13c42:	b082      	sub	sp, #8
	struct uarte_nrfx_data *data = dev->data;
   13c44:	6905      	ldr	r5, [r0, #16]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   13c46:	794b      	ldrb	r3, [r1, #5]
   13c48:	2b01      	cmp	r3, #1
   13c4a:	d137      	bne.n	13cbc <uarte_nrfx_configure+0x7c>
   13c4c:	4606      	mov	r6, r0
   13c4e:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13c50:	798b      	ldrb	r3, [r1, #6]
   13c52:	2b03      	cmp	r3, #3
   13c54:	d135      	bne.n	13cc2 <uarte_nrfx_configure+0x82>
	switch (cfg->flow_ctrl) {
   13c56:	79cb      	ldrb	r3, [r1, #7]
   13c58:	b133      	cbz	r3, 13c68 <uarte_nrfx_configure+0x28>
   13c5a:	2b01      	cmp	r3, #1
   13c5c:	d00e      	beq.n	13c7c <uarte_nrfx_configure+0x3c>
   13c5e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   13c62:	4618      	mov	r0, r3
   13c64:	b002      	add	sp, #8
   13c66:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   13c68:	2300      	movs	r3, #0
   13c6a:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   13c6e:	7923      	ldrb	r3, [r4, #4]
   13c70:	b143      	cbz	r3, 13c84 <uarte_nrfx_configure+0x44>
   13c72:	2b02      	cmp	r3, #2
   13c74:	d01e      	beq.n	13cb4 <uarte_nrfx_configure+0x74>
   13c76:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13c7a:	e7f2      	b.n	13c62 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   13c7c:	2301      	movs	r3, #1
   13c7e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   13c82:	e7f4      	b.n	13c6e <uarte_nrfx_configure+0x2e>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   13c84:	2300      	movs	r3, #0
   13c86:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13c8a:	6821      	ldr	r1, [r4, #0]
   13c8c:	4630      	mov	r0, r6
   13c8e:	f7fa fedb 	bl	ea48 <baudrate_set>
   13c92:	4603      	mov	r3, r0
   13c94:	b9c0      	cbnz	r0, 13cc8 <uarte_nrfx_configure+0x88>
	const struct uarte_nrfx_config *config = dev->config;
   13c96:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   13c98:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13c9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
   13c9e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13ca2:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13ca4:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   13ca8:	3504      	adds	r5, #4
   13caa:	e894 0003 	ldmia.w	r4, {r0, r1}
   13cae:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   13cb2:	e7d6      	b.n	13c62 <uarte_nrfx_configure+0x22>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   13cb4:	230e      	movs	r3, #14
   13cb6:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   13cba:	e7e6      	b.n	13c8a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
   13cbc:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13cc0:	e7cf      	b.n	13c62 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   13cc2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13cc6:	e7cc      	b.n	13c62 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   13cc8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13ccc:	e7c9      	b.n	13c62 <uarte_nrfx_configure+0x22>

00013cce <uarte_nrfx_config_get>:
{
   13cce:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   13cd0:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   13cd2:	3304      	adds	r3, #4
   13cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
   13cd8:	e882 0003 	stmia.w	r2, {r0, r1}
}
   13cdc:	2000      	movs	r0, #0
   13cde:	4770      	bx	lr

00013ce0 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   13ce0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13ce2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13ce4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   13ce8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   13cec:	4770      	bx	lr

00013cee <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   13cee:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13cf0:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   13cf2:	685b      	ldr	r3, [r3, #4]
   13cf4:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13cf8:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   13cfc:	b929      	cbnz	r1, 13d0a <is_tx_ready+0x1c>
   13cfe:	b933      	cbnz	r3, 13d0e <is_tx_ready+0x20>
   13d00:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   13d04:	b92b      	cbnz	r3, 13d12 <is_tx_ready+0x24>
   13d06:	2000      	movs	r0, #0
   13d08:	4770      	bx	lr
   13d0a:	2001      	movs	r0, #1
   13d0c:	4770      	bx	lr
   13d0e:	2000      	movs	r0, #0
   13d10:	4770      	bx	lr
   13d12:	2001      	movs	r0, #1
}
   13d14:	4770      	bx	lr

00013d16 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   13d16:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13d18:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13d1a:	2208      	movs	r2, #8
   13d1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   13d20:	4770      	bx	lr

00013d22 <tx_start>:
{
   13d22:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   13d24:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13d26:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13d28:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13d2c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d30:	2200      	movs	r2, #0
   13d32:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   13d36:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   13d3a:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   13d3e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13d42:	685b      	ldr	r3, [r3, #4]
   13d44:	f013 0f10 	tst.w	r3, #16
   13d48:	d102      	bne.n	13d50 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d4a:	2301      	movs	r3, #1
   13d4c:	60a3      	str	r3, [r4, #8]
}
   13d4e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   13d50:	2101      	movs	r1, #1
   13d52:	f7ff ffe0 	bl	13d16 <uarte_enable>
    p_reg->INTENSET = mask;
   13d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   13d5a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   13d5e:	e7f4      	b.n	13d4a <tx_start+0x28>

00013d60 <uarte_nrfx_poll_in>:
{
   13d60:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   13d62:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   13d64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13d66:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   13d6c:	b15a      	cbz	r2, 13d86 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   13d6e:	6962      	ldr	r2, [r4, #20]
   13d70:	7812      	ldrb	r2, [r2, #0]
   13d72:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d74:	2000      	movs	r0, #0
   13d76:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   13d7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d7e:	2201      	movs	r2, #1
   13d80:	601a      	str	r2, [r3, #0]
}
   13d82:	bc10      	pop	{r4}
   13d84:	4770      	bx	lr
		return -1;
   13d86:	f04f 30ff 	mov.w	r0, #4294967295
   13d8a:	e7fa      	b.n	13d82 <uarte_nrfx_poll_in+0x22>

00013d8c <k_msleep>:
{
   13d8c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   13d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13d92:	17c1      	asrs	r1, r0, #31
   13d94:	03c9      	lsls	r1, r1, #15
   13d96:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   13d9a:	03c0      	lsls	r0, r0, #15
   13d9c:	f240 33e7 	movw	r3, #999	; 0x3e7
   13da0:	18c0      	adds	r0, r0, r3
   13da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13da6:	f04f 0300 	mov.w	r3, #0
   13daa:	f141 0100 	adc.w	r1, r1, #0
   13dae:	f7ec fd8b 	bl	8c8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   13db2:	f7fd fbb1 	bl	11518 <z_impl_k_sleep>
}
   13db6:	bd08      	pop	{r3, pc}

00013db8 <wait_tx_ready>:
{
   13db8:	b570      	push	{r4, r5, r6, lr}
   13dba:	4606      	mov	r6, r0
   13dbc:	e013      	b.n	13de6 <wait_tx_ready+0x2e>
		if (res) {
   13dbe:	b17d      	cbz	r5, 13de0 <wait_tx_ready+0x28>
	__asm__ volatile(
   13dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   13dc4:	f3ef 8411 	mrs	r4, BASEPRI
   13dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   13dcc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   13dd0:	4630      	mov	r0, r6
   13dd2:	f7ff ff8c 	bl	13cee <is_tx_ready>
   13dd6:	b998      	cbnz	r0, 13e00 <wait_tx_ready+0x48>
	__asm__ volatile(
   13dd8:	f384 8811 	msr	BASEPRI, r4
   13ddc:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   13de0:	2001      	movs	r0, #1
   13de2:	f7ff ffd3 	bl	13d8c <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   13de6:	2464      	movs	r4, #100	; 0x64
   13de8:	4630      	mov	r0, r6
   13dea:	f7ff ff80 	bl	13cee <is_tx_ready>
   13dee:	4605      	mov	r5, r0
   13df0:	2800      	cmp	r0, #0
   13df2:	d1e4      	bne.n	13dbe <wait_tx_ready+0x6>
   13df4:	2001      	movs	r0, #1
   13df6:	f000 fd59 	bl	148ac <nrfx_busy_wait>
   13dfa:	3c01      	subs	r4, #1
   13dfc:	d1f4      	bne.n	13de8 <wait_tx_ready+0x30>
   13dfe:	e7de      	b.n	13dbe <wait_tx_ready+0x6>
}
   13e00:	4620      	mov	r0, r4
   13e02:	bd70      	pop	{r4, r5, r6, pc}

00013e04 <pinctrl_apply_state>:
{
   13e04:	b510      	push	{r4, lr}
   13e06:	b082      	sub	sp, #8
   13e08:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   13e0a:	aa01      	add	r2, sp, #4
   13e0c:	f7ff febd 	bl	13b8a <pinctrl_lookup_state>
	if (ret < 0) {
   13e10:	2800      	cmp	r0, #0
   13e12:	db05      	blt.n	13e20 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   13e14:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13e16:	6822      	ldr	r2, [r4, #0]
   13e18:	7919      	ldrb	r1, [r3, #4]
   13e1a:	6818      	ldr	r0, [r3, #0]
   13e1c:	f7fa fd0c 	bl	e838 <pinctrl_configure_pins>
}
   13e20:	b002      	add	sp, #8
   13e22:	bd10      	pop	{r4, pc}

00013e24 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   13e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e28:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   13e2a:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   13e2c:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   13e2e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13e32:	2100      	movs	r1, #0
   13e34:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   13e38:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   13e3c:	68f8      	ldr	r0, [r7, #12]
   13e3e:	f7ff ffe1 	bl	13e04 <pinctrl_apply_state>
	if (err < 0) {
   13e42:	1e05      	subs	r5, r0, #0
   13e44:	db35      	blt.n	13eb2 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   13e46:	f108 0104 	add.w	r1, r8, #4
   13e4a:	4620      	mov	r0, r4
   13e4c:	f7ff fef8 	bl	13c40 <uarte_nrfx_configure>
	if (err) {
   13e50:	4605      	mov	r5, r0
   13e52:	bb70      	cbnz	r0, 13eb2 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   13e54:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   13e56:	f013 0f02 	tst.w	r3, #2
   13e5a:	d12d      	bne.n	13eb8 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13e5c:	2308      	movs	r3, #8
   13e5e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   13e62:	7a3b      	ldrb	r3, [r7, #8]
   13e64:	b95b      	cbnz	r3, 13e7e <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e66:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   13e6a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   13e6e:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13e72:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13e76:	2301      	movs	r3, #1
   13e78:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e7c:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   13e7e:	687b      	ldr	r3, [r7, #4]
   13e80:	f013 0f02 	tst.w	r3, #2
   13e84:	d103      	bne.n	13e8e <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   13e86:	f44f 7380 	mov.w	r3, #256	; 0x100
   13e8a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13e8e:	687b      	ldr	r3, [r7, #4]
   13e90:	f013 0f10 	tst.w	r3, #16
   13e94:	d003      	beq.n	13e9e <uarte_instance_init+0x7a>
   13e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   13e9a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   13e9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13ea2:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13ea6:	2300      	movs	r3, #0
   13ea8:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13eac:	2301      	movs	r3, #1
   13eae:	60b3      	str	r3, [r6, #8]
   13eb0:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   13eb2:	4628      	mov	r0, r5
   13eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   13eb8:	4641      	mov	r1, r8
   13eba:	4630      	mov	r0, r6
   13ebc:	f7fa fe9a 	bl	ebf4 <endtx_stoptx_ppi_init>
		if (err < 0) {
   13ec0:	2800      	cmp	r0, #0
   13ec2:	dacb      	bge.n	13e5c <uarte_instance_init+0x38>
			return err;
   13ec4:	4605      	mov	r5, r0
   13ec6:	e7f4      	b.n	13eb2 <uarte_instance_init+0x8e>

00013ec8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   13ec8:	b510      	push	{r4, lr}
   13eca:	4604      	mov	r4, r0
   13ecc:	2200      	movs	r2, #0
   13ece:	2101      	movs	r1, #1
   13ed0:	2002      	movs	r0, #2
   13ed2:	f7fe fe4d 	bl	12b70 <z_arm_irq_priority_set>
   13ed6:	2002      	movs	r0, #2
   13ed8:	f7fe fe40 	bl	12b5c <arch_irq_enable>
   13edc:	2100      	movs	r1, #0
   13ede:	4620      	mov	r0, r4
   13ee0:	f7ff ffa0 	bl	13e24 <uarte_instance_init>
   13ee4:	bd10      	pop	{r4, pc}

00013ee6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   13ee6:	4770      	bx	lr

00013ee8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   13ee8:	1a40      	subs	r0, r0, r1
}
   13eea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13eee:	4770      	bx	lr

00013ef0 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13ef0:	f100 0350 	add.w	r3, r0, #80	; 0x50
   13ef4:	009b      	lsls	r3, r3, #2
   13ef6:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13efc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13f00:	6818      	ldr	r0, [r3, #0]
}
   13f02:	3800      	subs	r0, #0
   13f04:	bf18      	it	ne
   13f06:	2001      	movne	r0, #1
   13f08:	4770      	bx	lr

00013f0a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13f0a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   13f0e:	009b      	lsls	r3, r3, #2
   13f10:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13f12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13f16:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13f1a:	2200      	movs	r2, #0
   13f1c:	601a      	str	r2, [r3, #0]
   13f1e:	681b      	ldr	r3, [r3, #0]
}
   13f20:	4770      	bx	lr

00013f22 <absolute_time_to_cc>:
}
   13f22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13f26:	4770      	bx	lr

00013f28 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   13f28:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   13f2c:	b672      	cpsid	i
}
   13f2e:	4770      	bx	lr

00013f30 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13f30:	f380 8810 	msr	PRIMASK, r0
}
   13f34:	4770      	bx	lr

00013f36 <compare_set>:
{
   13f36:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f38:	b083      	sub	sp, #12
   13f3a:	4604      	mov	r4, r0
   13f3c:	4617      	mov	r7, r2
   13f3e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   13f40:	f7fa fee2 	bl	ed08 <compare_int_lock>
   13f44:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   13f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13f48:	9301      	str	r3, [sp, #4]
   13f4a:	9b08      	ldr	r3, [sp, #32]
   13f4c:	9300      	str	r3, [sp, #0]
   13f4e:	463a      	mov	r2, r7
   13f50:	462b      	mov	r3, r5
   13f52:	4620      	mov	r0, r4
   13f54:	f7fa ffa6 	bl	eea4 <compare_set_nolocks>
   13f58:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   13f5a:	4631      	mov	r1, r6
   13f5c:	4620      	mov	r0, r4
   13f5e:	f7fa ff29 	bl	edb4 <compare_int_unlock>
}
   13f62:	4628      	mov	r0, r5
   13f64:	b003      	add	sp, #12
   13f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013f68 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13f68:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   13f6a:	2000      	movs	r0, #0
   13f6c:	f7fe ff43 	bl	12df6 <sys_arch_reboot>

00013f70 <sdc_assertion_handler>:
	k_oops();
   13f70:	4040      	eors	r0, r0
   13f72:	f380 8811 	msr	BASEPRI, r0
   13f76:	f04f 0003 	mov.w	r0, #3
   13f7a:	df02      	svc	2
}
   13f7c:	4770      	bx	lr

00013f7e <event_packet_is_discardable>:
	switch (hdr->evt) {
   13f7e:	7803      	ldrb	r3, [r0, #0]
   13f80:	2b3e      	cmp	r3, #62	; 0x3e
   13f82:	d003      	beq.n	13f8c <event_packet_is_discardable+0xe>
   13f84:	2bff      	cmp	r3, #255	; 0xff
   13f86:	d008      	beq.n	13f9a <event_packet_is_discardable+0x1c>
   13f88:	2000      	movs	r0, #0
   13f8a:	4770      	bx	lr
		switch (me->subevent) {
   13f8c:	7883      	ldrb	r3, [r0, #2]
   13f8e:	2b02      	cmp	r3, #2
   13f90:	d001      	beq.n	13f96 <event_packet_is_discardable+0x18>
			return false;
   13f92:	2000      	movs	r0, #0
   13f94:	4770      	bx	lr
			return true;
   13f96:	2001      	movs	r0, #1
   13f98:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   13f9a:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   13f9c:	2b80      	cmp	r3, #128	; 0x80
   13f9e:	d001      	beq.n	13fa4 <event_packet_is_discardable+0x26>
			return false;
   13fa0:	2000      	movs	r0, #0
}
   13fa2:	4770      	bx	lr
			return true;
   13fa4:	2001      	movs	r0, #1
   13fa6:	4770      	bx	lr

00013fa8 <event_packet_process>:
{
   13fa8:	b538      	push	{r3, r4, r5, lr}
   13faa:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   13fac:	f7ff ffe7 	bl	13f7e <event_packet_is_discardable>
   13fb0:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   13fb2:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   13fb4:	4619      	mov	r1, r3
   13fb6:	b17b      	cbz	r3, 13fd8 <event_packet_process+0x30>
   13fb8:	2200      	movs	r2, #0
   13fba:	2300      	movs	r3, #0
   13fbc:	f7f8 fc9c 	bl	c8f8 <bt_buf_get_evt>
	if (!evt_buf) {
   13fc0:	4605      	mov	r5, r0
   13fc2:	b140      	cbz	r0, 13fd6 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   13fc4:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13fc6:	3202      	adds	r2, #2
   13fc8:	4621      	mov	r1, r4
   13fca:	300c      	adds	r0, #12
   13fcc:	f7ff fa3c 	bl	13448 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   13fd0:	4628      	mov	r0, r5
   13fd2:	f7fe fff1 	bl	12fb8 <bt_recv>
}
   13fd6:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   13fd8:	f04f 32ff 	mov.w	r2, #4294967295
   13fdc:	f04f 33ff 	mov.w	r3, #4294967295
   13fe0:	e7ec      	b.n	13fbc <event_packet_process+0x14>

00013fe2 <data_packet_process>:
{
   13fe2:	b538      	push	{r3, r4, r5, lr}
   13fe4:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   13fe6:	f04f 32ff 	mov.w	r2, #4294967295
   13fea:	f04f 33ff 	mov.w	r3, #4294967295
   13fee:	2003      	movs	r0, #3
   13ff0:	f7f8 fc50 	bl	c894 <bt_buf_get_rx>
	if (!data_buf) {
   13ff4:	b148      	cbz	r0, 1400a <data_packet_process+0x28>
   13ff6:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   13ff8:	8862      	ldrh	r2, [r4, #2]
   13ffa:	3204      	adds	r2, #4
   13ffc:	4621      	mov	r1, r4
   13ffe:	300c      	adds	r0, #12
   14000:	f7ff fa22 	bl	13448 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   14004:	4628      	mov	r0, r5
   14006:	f7fe ffd7 	bl	12fb8 <bt_recv>
}
   1400a:	bd38      	pop	{r3, r4, r5, pc}

0001400c <fetch_and_process_hci_msg>:
{
   1400c:	b530      	push	{r4, r5, lr}
   1400e:	b083      	sub	sp, #12
   14010:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   14012:	f04f 30ff 	mov.w	r0, #4294967295
   14016:	f04f 31ff 	mov.w	r1, #4294967295
   1401a:	f7fb f87d 	bl	f118 <multithreading_lock_acquire>
	if (!errcode) {
   1401e:	b110      	cbz	r0, 14026 <fetch_and_process_hci_msg+0x1a>
		return false;
   14020:	2000      	movs	r0, #0
}
   14022:	b003      	add	sp, #12
   14024:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   14026:	f10d 0107 	add.w	r1, sp, #7
   1402a:	4620      	mov	r0, r4
   1402c:	f7fb fa3c 	bl	f4a8 <hci_internal_msg_get>
   14030:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   14032:	f7fb f87b 	bl	f12c <multithreading_lock_release>
	if (errcode) {
   14036:	2d00      	cmp	r5, #0
   14038:	d1f2      	bne.n	14020 <fetch_and_process_hci_msg+0x14>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1403a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1403e:	2b04      	cmp	r3, #4
   14040:	d003      	beq.n	1404a <fetch_and_process_hci_msg+0x3e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   14042:	2b02      	cmp	r3, #2
   14044:	d006      	beq.n	14054 <fetch_and_process_hci_msg+0x48>
	return true;
   14046:	2001      	movs	r0, #1
   14048:	e7eb      	b.n	14022 <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   1404a:	4620      	mov	r0, r4
   1404c:	f7ff ffac 	bl	13fa8 <event_packet_process>
	return true;
   14050:	2001      	movs	r0, #1
   14052:	e7e6      	b.n	14022 <fetch_and_process_hci_msg+0x16>
		data_packet_process(p_hci_buffer);
   14054:	4620      	mov	r0, r4
   14056:	f7ff ffc4 	bl	13fe2 <data_packet_process>
	return true;
   1405a:	2001      	movs	r0, #1
   1405c:	e7e1      	b.n	14022 <fetch_and_process_hci_msg+0x16>

0001405e <hci_driver_send>:
{
   1405e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   14060:	8a03      	ldrh	r3, [r0, #16]
   14062:	b163      	cbz	r3, 1407e <hci_driver_send+0x20>
   14064:	4604      	mov	r4, r0
   14066:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   14068:	b963      	cbnz	r3, 14084 <hci_driver_send+0x26>
		err = cmd_handle(buf);
   1406a:	f7fb f87d 	bl	f168 <cmd_handle>
	if (!err) {
   1406e:	4605      	mov	r5, r0
   14070:	b108      	cbz	r0, 14076 <hci_driver_send+0x18>
}
   14072:	4628      	mov	r0, r5
   14074:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   14076:	4620      	mov	r0, r4
   14078:	f7ff f9b5 	bl	133e6 <net_buf_unref>
   1407c:	e7f9      	b.n	14072 <hci_driver_send+0x14>
		return -EINVAL;
   1407e:	f06f 0515 	mvn.w	r5, #21
   14082:	e7f6      	b.n	14072 <hci_driver_send+0x14>
		return -EINVAL;
   14084:	f06f 0515 	mvn.w	r5, #21
   14088:	e7f3      	b.n	14072 <hci_driver_send+0x14>

0001408a <hci_driver_close>:
{
   1408a:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   1408c:	f04f 30ff 	mov.w	r0, #4294967295
   14090:	f04f 31ff 	mov.w	r1, #4294967295
   14094:	f7fb f840 	bl	f118 <multithreading_lock_acquire>
	if (err) {
   14098:	4604      	mov	r4, r0
   1409a:	b108      	cbz	r0, 140a0 <hci_driver_close+0x16>
}
   1409c:	4620      	mov	r0, r4
   1409e:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   140a0:	f7ec fcea 	bl	a78 <sdc_disable>
	if (err) {
   140a4:	4604      	mov	r4, r0
   140a6:	b910      	cbnz	r0, 140ae <hci_driver_close+0x24>
	MULTITHREADING_LOCK_RELEASE();
   140a8:	f7fb f840 	bl	f12c <multithreading_lock_release>
	return err;
   140ac:	e7f6      	b.n	1409c <hci_driver_close+0x12>
		MULTITHREADING_LOCK_RELEASE();
   140ae:	f7fb f83d 	bl	f12c <multithreading_lock_release>
		return err;
   140b2:	e7f3      	b.n	1409c <hci_driver_close+0x12>

000140b4 <configure_supported_features>:
{
   140b4:	b508      	push	{r3, lr}
				err = sdc_support_scan();
   140b6:	f7ec fd97 	bl	be8 <sdc_support_scan>
				if (err) {
   140ba:	b900      	cbnz	r0, 140be <configure_supported_features+0xa>
}
   140bc:	bd08      	pop	{r3, pc}
					return -ENOTSUP;
   140be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   140c2:	e7fb      	b.n	140bc <configure_supported_features+0x8>

000140c4 <configure_memory_usage>:
{
   140c4:	b500      	push	{lr}
   140c6:	b083      	sub	sp, #12
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   140c8:	2000      	movs	r0, #0
   140ca:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   140ce:	aa01      	add	r2, sp, #4
   140d0:	2101      	movs	r1, #1
   140d2:	f7ec fc81 	bl	9d8 <sdc_cfg_set>
	if (required_memory < 0) {
   140d6:	2800      	cmp	r0, #0
   140d8:	db31      	blt.n	1413e <configure_memory_usage+0x7a>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   140da:	2108      	movs	r1, #8
   140dc:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   140e0:	aa01      	add	r2, sp, #4
   140e2:	2000      	movs	r0, #0
   140e4:	f7ec fc78 	bl	9d8 <sdc_cfg_set>
	if (required_memory < 0) {
   140e8:	2800      	cmp	r0, #0
   140ea:	db28      	blt.n	1413e <configure_memory_usage+0x7a>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   140ec:	231b      	movs	r3, #27
   140ee:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   140f2:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   140f6:	2302      	movs	r3, #2
   140f8:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   140fc:	2103      	movs	r1, #3
   140fe:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14102:	aa01      	add	r2, sp, #4
   14104:	2000      	movs	r0, #0
   14106:	f7ec fc67 	bl	9d8 <sdc_cfg_set>
	if (required_memory < 0) {
   1410a:	2800      	cmp	r0, #0
   1410c:	db17      	blt.n	1413e <configure_memory_usage+0x7a>
	cfg.event_length.event_length_us =
   1410e:	f641 534c 	movw	r3, #7500	; 0x1d4c
   14112:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14114:	aa01      	add	r2, sp, #4
   14116:	2104      	movs	r1, #4
   14118:	2000      	movs	r0, #0
   1411a:	f7ec fc5d 	bl	9d8 <sdc_cfg_set>
	if (required_memory < 0) {
   1411e:	2800      	cmp	r0, #0
   14120:	db0d      	blt.n	1413e <configure_memory_usage+0x7a>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   14122:	2303      	movs	r3, #3
   14124:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14128:	aa01      	add	r2, sp, #4
   1412a:	2106      	movs	r1, #6
   1412c:	2000      	movs	r0, #0
   1412e:	f7ec fc53 	bl	9d8 <sdc_cfg_set>
		if (required_memory < 0) {
   14132:	2800      	cmp	r0, #0
   14134:	db03      	blt.n	1413e <configure_memory_usage+0x7a>
	if (required_memory > sizeof(sdc_mempool)) {
   14136:	f5b0 7fc2 	cmp.w	r0, #388	; 0x184
   1413a:	d803      	bhi.n	14144 <configure_memory_usage+0x80>
	return 0;
   1413c:	2000      	movs	r0, #0
}
   1413e:	b003      	add	sp, #12
   14140:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   14144:	4040      	eors	r0, r0
   14146:	f380 8811 	msr	BASEPRI, r0
   1414a:	f04f 0004 	mov.w	r0, #4
   1414e:	df02      	svc	2
		return -ENOMEM;
   14150:	f06f 000b 	mvn.w	r0, #11
   14154:	e7f3      	b.n	1413e <configure_memory_usage+0x7a>

00014156 <receive_work_handler>:
{
   14156:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   14158:	f7fb f89e 	bl	f298 <hci_driver_receive_process>
}
   1415c:	bd08      	pop	{r3, pc}

0001415e <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1415e:	230f      	movs	r3, #15
   14160:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   14162:	2304      	movs	r3, #4
   14164:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   14166:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   14168:	2301      	movs	r3, #1
   1416a:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   1416c:	8081      	strh	r1, [r0, #4]
}
   1416e:	4770      	bx	lr

00014170 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   14170:	f04f 0c0e 	mov.w	ip, #14
   14174:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   14178:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   1417a:	2201      	movs	r2, #1
   1417c:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   1417e:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   14182:	7143      	strb	r3, [r0, #5]
}
   14184:	4770      	bx	lr

00014186 <le_read_supported_states>:
	*buf = states1;
   14186:	2330      	movs	r3, #48	; 0x30
   14188:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   1418a:	2300      	movs	r3, #0
   1418c:	7103      	strb	r3, [r0, #4]
}
   1418e:	4770      	bx	lr

00014190 <status_param_cmd_put>:
}
   14190:	2001      	movs	r0, #1
   14192:	4770      	bx	lr

00014194 <controller_and_baseband_cmd_put>:
{
   14194:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   14196:	7842      	ldrb	r2, [r0, #1]
   14198:	7803      	ldrb	r3, [r0, #0]
   1419a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1419e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   141a0:	f640 4201 	movw	r2, #3073	; 0xc01
   141a4:	4293      	cmp	r3, r2
   141a6:	d005      	beq.n	141b4 <controller_and_baseband_cmd_put+0x20>
   141a8:	f640 4203 	movw	r2, #3075	; 0xc03
   141ac:	4293      	cmp	r3, r2
   141ae:	d005      	beq.n	141bc <controller_and_baseband_cmd_put+0x28>
   141b0:	2001      	movs	r0, #1
}
   141b2:	bd08      	pop	{r3, pc}
   141b4:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   141b6:	f7f5 f80a 	bl	91ce <sdc_hci_cmd_cb_set_event_mask>
   141ba:	e7fa      	b.n	141b2 <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   141bc:	f7ec fe60 	bl	e80 <sdc_hci_cmd_cb_reset>
   141c0:	e7f7      	b.n	141b2 <controller_and_baseband_cmd_put+0x1e>

000141c2 <supported_commands>:
{
   141c2:	b510      	push	{r4, lr}
   141c4:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   141c6:	2230      	movs	r2, #48	; 0x30
   141c8:	2100      	movs	r1, #0
   141ca:	f7fe fdf3 	bl	12db4 <memset>
	cmds->hci_set_event_mask = 1;
   141ce:	7963      	ldrb	r3, [r4, #5]
   141d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   141d4:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   141d6:	b2db      	uxtb	r3, r3
   141d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   141dc:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   141de:	7ba3      	ldrb	r3, [r4, #14]
   141e0:	f043 0308 	orr.w	r3, r3, #8
   141e4:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   141e6:	b2db      	uxtb	r3, r3
   141e8:	f043 0320 	orr.w	r3, r3, #32
   141ec:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   141ee:	7be3      	ldrb	r3, [r4, #15]
   141f0:	f043 0302 	orr.w	r3, r3, #2
   141f4:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   141f6:	7e63      	ldrb	r3, [r4, #25]
   141f8:	f043 0301 	orr.w	r3, r3, #1
   141fc:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   141fe:	b2db      	uxtb	r3, r3
   14200:	f043 0302 	orr.w	r3, r3, #2
   14204:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   14206:	b2db      	uxtb	r3, r3
   14208:	f043 0304 	orr.w	r3, r3, #4
   1420c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   1420e:	b2db      	uxtb	r3, r3
   14210:	f043 0310 	orr.w	r3, r3, #16
   14214:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   14216:	7ea3      	ldrb	r3, [r4, #26]
   14218:	f043 0304 	orr.w	r3, r3, #4
   1421c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   1421e:	b2db      	uxtb	r3, r3
   14220:	f043 0308 	orr.w	r3, r3, #8
   14224:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   14226:	b2db      	uxtb	r3, r3
   14228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1422c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   1422e:	b2db      	uxtb	r3, r3
   14230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14234:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   14236:	7ee3      	ldrb	r3, [r4, #27]
   14238:	f043 0301 	orr.w	r3, r3, #1
   1423c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   1423e:	b2db      	uxtb	r3, r3
   14240:	f043 0302 	orr.w	r3, r3, #2
   14244:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   14246:	b2db      	uxtb	r3, r3
   14248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1424c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   1424e:	b2db      	uxtb	r3, r3
   14250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14254:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   14256:	7f23      	ldrb	r3, [r4, #28]
   14258:	f043 0308 	orr.w	r3, r3, #8
   1425c:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   1425e:	b2db      	uxtb	r3, r3
   14260:	f043 0310 	orr.w	r3, r3, #16
   14264:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   14266:	b2db      	uxtb	r3, r3
   14268:	f043 0320 	orr.w	r3, r3, #32
   1426c:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   1426e:	b2db      	uxtb	r3, r3
   14270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14274:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v2 = 1;
   14276:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1427e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   14282:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   14286:	f043 0301 	orr.w	r3, r3, #1
   1428a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   1428e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   14292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14296:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   1429a:	bd10      	pop	{r4, pc}

0001429c <supported_features>:
{
   1429c:	b510      	push	{r4, lr}
   1429e:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   142a0:	2208      	movs	r2, #8
   142a2:	2100      	movs	r1, #0
   142a4:	f7fe fd86 	bl	12db4 <memset>
	features->bdedr_not_supported = 1;
   142a8:	7923      	ldrb	r3, [r4, #4]
   142aa:	f043 0320 	orr.w	r3, r3, #32
   142ae:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   142b0:	b2db      	uxtb	r3, r3
   142b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   142b6:	7123      	strb	r3, [r4, #4]
}
   142b8:	bd10      	pop	{r4, pc}

000142ba <info_param_cmd_put>:
{
   142ba:	b508      	push	{r3, lr}
   142bc:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   142be:	1d88      	adds	r0, r1, #6
   142c0:	f893 c001 	ldrb.w	ip, [r3, #1]
   142c4:	781b      	ldrb	r3, [r3, #0]
   142c6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   142ca:	b21b      	sxth	r3, r3
	switch (opcode)	{
   142cc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   142d0:	3b01      	subs	r3, #1
   142d2:	2b08      	cmp	r3, #8
   142d4:	d820      	bhi.n	14318 <info_param_cmd_put+0x5e>
   142d6:	e8df f003 	tbb	[pc, r3]
   142da:	0b05      	.short	0x0b05
   142dc:	1f1f1f12 	.word	0x1f1f1f12
   142e0:	1f1f      	.short	0x1f1f
   142e2:	19          	.byte	0x19
   142e3:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   142e4:	7813      	ldrb	r3, [r2, #0]
   142e6:	3308      	adds	r3, #8
   142e8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   142ea:	f7f4 ffc8 	bl	927e <sdc_hci_cmd_ip_read_local_version_information>
   142ee:	e014      	b.n	1431a <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   142f0:	7813      	ldrb	r3, [r2, #0]
   142f2:	3340      	adds	r3, #64	; 0x40
   142f4:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   142f6:	f7ff ff64 	bl	141c2 <supported_commands>
		return 0;
   142fa:	2000      	movs	r0, #0
   142fc:	e00d      	b.n	1431a <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   142fe:	7813      	ldrb	r3, [r2, #0]
   14300:	3308      	adds	r3, #8
   14302:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   14304:	f7ff ffca 	bl	1429c <supported_features>
		return 0;
   14308:	2000      	movs	r0, #0
   1430a:	e006      	b.n	1431a <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1430c:	7813      	ldrb	r3, [r2, #0]
   1430e:	3306      	adds	r3, #6
   14310:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   14312:	f7f4 ffb2 	bl	927a <sdc_hci_cmd_ip_read_bd_addr>
   14316:	e000      	b.n	1431a <info_param_cmd_put+0x60>
	switch (opcode)	{
   14318:	2001      	movs	r0, #1
}
   1431a:	bd08      	pop	{r3, pc}

0001431c <le_supported_features>:
{
   1431c:	b510      	push	{r4, lr}
   1431e:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   14320:	2208      	movs	r2, #8
   14322:	2100      	movs	r1, #0
   14324:	f7fe fd46 	bl	12db4 <memset>
	features->params.le_encryption = 1;
   14328:	7823      	ldrb	r3, [r4, #0]
   1432a:	f043 0301 	orr.w	r3, r3, #1
   1432e:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   14330:	b2db      	uxtb	r3, r3
   14332:	f043 0304 	orr.w	r3, r3, #4
   14336:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   14338:	b2db      	uxtb	r3, r3
   1433a:	f043 0308 	orr.w	r3, r3, #8
   1433e:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   14340:	b2db      	uxtb	r3, r3
   14342:	f043 0310 	orr.w	r3, r3, #16
   14346:	7023      	strb	r3, [r4, #0]
	features->params.extended_scanner_filter_policies = 1;
   14348:	b2db      	uxtb	r3, r3
   1434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1434e:	7023      	strb	r3, [r4, #0]
	features->params.channel_selection_algorithm_2 = 1;
   14350:	7863      	ldrb	r3, [r4, #1]
   14352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14356:	7063      	strb	r3, [r4, #1]
}
   14358:	bd10      	pop	{r4, pc}

0001435a <vs_zephyr_supported_commands>:
{
   1435a:	b510      	push	{r4, lr}
   1435c:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1435e:	2202      	movs	r2, #2
   14360:	2100      	movs	r1, #0
   14362:	f7fe fd27 	bl	12db4 <memset>
	cmds->read_version_info = 1;
   14366:	7823      	ldrb	r3, [r4, #0]
   14368:	f043 0301 	orr.w	r3, r3, #1
   1436c:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   1436e:	b2db      	uxtb	r3, r3
   14370:	f043 0302 	orr.w	r3, r3, #2
   14374:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   14376:	b2db      	uxtb	r3, r3
   14378:	f043 0320 	orr.w	r3, r3, #32
   1437c:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   1437e:	7863      	ldrb	r3, [r4, #1]
   14380:	f043 0301 	orr.w	r3, r3, #1
   14384:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   14386:	b2db      	uxtb	r3, r3
   14388:	f043 0302 	orr.w	r3, r3, #2
   1438c:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   1438e:	b2db      	uxtb	r3, r3
   14390:	f043 0304 	orr.w	r3, r3, #4
   14394:	7063      	strb	r3, [r4, #1]
}
   14396:	bd10      	pop	{r4, pc}

00014398 <vs_supported_commands>:
{
   14398:	b510      	push	{r4, lr}
   1439a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1439c:	2202      	movs	r2, #2
   1439e:	2100      	movs	r1, #0
   143a0:	f7fe fd08 	bl	12db4 <memset>
	cmds->read_supported_vs_commands = 1;
   143a4:	7823      	ldrb	r3, [r4, #0]
   143a6:	f043 0301 	orr.w	r3, r3, #1
   143aa:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   143ac:	b2db      	uxtb	r3, r3
   143ae:	f043 0302 	orr.w	r3, r3, #2
   143b2:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   143b4:	b2db      	uxtb	r3, r3
   143b6:	f043 0304 	orr.w	r3, r3, #4
   143ba:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   143bc:	b2db      	uxtb	r3, r3
   143be:	f043 0308 	orr.w	r3, r3, #8
   143c2:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   143c4:	b2db      	uxtb	r3, r3
   143c6:	f043 0310 	orr.w	r3, r3, #16
   143ca:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   143cc:	b2db      	uxtb	r3, r3
   143ce:	f043 0320 	orr.w	r3, r3, #32
   143d2:	7023      	strb	r3, [r4, #0]
}
   143d4:	bd10      	pop	{r4, pc}

000143d6 <le_controller_cmd_put>:
{
   143d6:	b508      	push	{r3, lr}
   143d8:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   143da:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   143dc:	3106      	adds	r1, #6
   143de:	f893 c001 	ldrb.w	ip, [r3, #1]
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   143e8:	b21b      	sxth	r3, r3
	switch (opcode)	{
   143ea:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   143ee:	3b01      	subs	r3, #1
   143f0:	2b4a      	cmp	r3, #74	; 0x4a
   143f2:	d86e      	bhi.n	144d2 <le_controller_cmd_put+0xfc>
   143f4:	e8df f003 	tbb	[pc, r3]
   143f8:	6d302926 	.word	0x6d302926
   143fc:	6d6d6d38 	.word	0x6d6d6d38
   14400:	3e3b6d6d 	.word	0x3e3b6d6d
   14404:	48416d6d 	.word	0x48416d6d
   14408:	6d6d4e4b 	.word	0x6d6d4e4b
   1440c:	57516d6d 	.word	0x57516d6d
   14410:	5e6d6d6d 	.word	0x5e6d6d6d
   14414:	6d6d6d6d 	.word	0x6d6d6d6d
   14418:	6d6d6d6d 	.word	0x6d6d6d6d
   1441c:	6d6d6d6d 	.word	0x6d6d6d6d
   14420:	6d6d6d6d 	.word	0x6d6d6d6d
   14424:	6d6d6d6d 	.word	0x6d6d6d6d
   14428:	6d6d6d6d 	.word	0x6d6d6d6d
   1442c:	6d6d6d6d 	.word	0x6d6d6d6d
   14430:	6d6d6d6d 	.word	0x6d6d6d6d
   14434:	6d6d6d6d 	.word	0x6d6d6d6d
   14438:	6d6d6d6d 	.word	0x6d6d6d6d
   1443c:	6d6d6d6d 	.word	0x6d6d6d6d
   14440:	6d6d      	.short	0x6d6d
   14442:	66          	.byte	0x66
   14443:	00          	.byte	0x00
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   14444:	f7f4 ff2d 	bl	92a2 <sdc_hci_cmd_le_set_event_mask>
   14448:	e044      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1444a:	7813      	ldrb	r3, [r2, #0]
   1444c:	3303      	adds	r3, #3
   1444e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   14450:	4608      	mov	r0, r1
   14452:	f7f4 ff1e 	bl	9292 <sdc_hci_cmd_le_read_buffer_size>
   14456:	e03d      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   14458:	7813      	ldrb	r3, [r2, #0]
   1445a:	3308      	adds	r3, #8
   1445c:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   1445e:	4608      	mov	r0, r1
   14460:	f7ff ff5c 	bl	1431c <le_supported_features>
		return 0;
   14464:	2000      	movs	r0, #0
   14466:	e035      	b.n	144d4 <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   14468:	f7f4 ff20 	bl	92ac <sdc_hci_cmd_le_set_random_address>
   1446c:	e032      	b.n	144d4 <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1446e:	f7f4 ff21 	bl	92b4 <sdc_hci_cmd_le_set_scan_params>
   14472:	e02f      	b.n	144d4 <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   14474:	f7f4 ff1c 	bl	92b0 <sdc_hci_cmd_le_set_scan_enable>
   14478:	e02c      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1447a:	7813      	ldrb	r3, [r2, #0]
   1447c:	3301      	adds	r3, #1
   1447e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   14480:	4608      	mov	r0, r1
   14482:	f7f4 ff08 	bl	9296 <sdc_hci_cmd_le_read_filter_accept_list_size>
   14486:	e025      	b.n	144d4 <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   14488:	f7f4 fefd 	bl	9286 <sdc_hci_cmd_le_clear_filter_accept_list>
   1448c:	e022      	b.n	144d4 <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1448e:	f7f4 fef8 	bl	9282 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   14492:	e01f      	b.n	144d4 <le_controller_cmd_put+0xfe>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   14494:	f7f4 ff03 	bl	929e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   14498:	e01c      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1449a:	7813      	ldrb	r3, [r2, #0]
   1449c:	3310      	adds	r3, #16
   1449e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   144a0:	f7f4 fef3 	bl	928a <sdc_hci_cmd_le_encrypt>
   144a4:	e016      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   144a6:	7813      	ldrb	r3, [r2, #0]
   144a8:	3308      	adds	r3, #8
   144aa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   144ac:	4608      	mov	r0, r1
   144ae:	f7f4 feee 	bl	928e <sdc_hci_cmd_le_rand>
   144b2:	e00f      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   144b4:	7813      	ldrb	r3, [r2, #0]
   144b6:	3308      	adds	r3, #8
   144b8:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   144ba:	4608      	mov	r0, r1
   144bc:	f7ff fe63 	bl	14186 <le_read_supported_states>
		return 0;
   144c0:	2000      	movs	r0, #0
   144c2:	e007      	b.n	144d4 <le_controller_cmd_put+0xfe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   144c4:	7813      	ldrb	r3, [r2, #0]
   144c6:	3302      	adds	r3, #2
   144c8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   144ca:	4608      	mov	r0, r1
   144cc:	f7f4 fee5 	bl	929a <sdc_hci_cmd_le_read_transmit_power>
   144d0:	e000      	b.n	144d4 <le_controller_cmd_put+0xfe>
	switch (opcode)	{
   144d2:	2001      	movs	r0, #1
}
   144d4:	bd08      	pop	{r3, pc}

000144d6 <vs_cmd_put>:
{
   144d6:	b508      	push	{r3, lr}
   144d8:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   144da:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   144dc:	3106      	adds	r1, #6
   144de:	f893 c001 	ldrb.w	ip, [r3, #1]
   144e2:	781b      	ldrb	r3, [r3, #0]
   144e4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   144e8:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   144ec:	4563      	cmp	r3, ip
   144ee:	d90f      	bls.n	14510 <vs_cmd_put+0x3a>
   144f0:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   144f4:	4563      	cmp	r3, ip
   144f6:	d863      	bhi.n	145c0 <vs_cmd_put+0xea>
   144f8:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   144fc:	d31a      	bcc.n	14534 <vs_cmd_put+0x5e>
   144fe:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   14502:	2b05      	cmp	r3, #5
   14504:	d858      	bhi.n	145b8 <vs_cmd_put+0xe2>
   14506:	e8df f003 	tbb	[pc, r3]
   1450a:	4840      	.short	0x4840
   1450c:	54514e4b 	.word	0x54514e4b
   14510:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   14514:	d801      	bhi.n	1451a <vs_cmd_put+0x44>
   14516:	2001      	movs	r0, #1
}
   14518:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   1451a:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1451e:	3b01      	subs	r3, #1
   14520:	2b0a      	cmp	r3, #10
   14522:	d84b      	bhi.n	145bc <vs_cmd_put+0xe6>
   14524:	e8df f003 	tbb	[pc, r3]
   14528:	4a4a0f08 	.word	0x4a4a0f08
   1452c:	4a4a274a 	.word	0x4a4a274a
   14530:	2017      	.short	0x2017
   14532:	2a          	.byte	0x2a
   14533:	00          	.byte	0x00
   14534:	2001      	movs	r0, #1
   14536:	e7ef      	b.n	14518 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   14538:	7813      	ldrb	r3, [r2, #0]
   1453a:	330c      	adds	r3, #12
   1453c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1453e:	4608      	mov	r0, r1
   14540:	f7ec fd46 	bl	fd0 <sdc_hci_cmd_vs_zephyr_read_version_info>
   14544:	e7e8      	b.n	14518 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   14546:	7813      	ldrb	r3, [r2, #0]
   14548:	3340      	adds	r3, #64	; 0x40
   1454a:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   1454c:	4608      	mov	r0, r1
   1454e:	f7ff ff04 	bl	1435a <vs_zephyr_supported_commands>
		return 0;
   14552:	2000      	movs	r0, #0
   14554:	e7e0      	b.n	14518 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   14556:	7813      	ldrb	r3, [r2, #0]
   14558:	1c58      	adds	r0, r3, #1
   1455a:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1455c:	3317      	adds	r3, #23
   1455e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   14560:	4608      	mov	r0, r1
   14562:	f7ec fce9 	bl	f38 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   14566:	e7d7      	b.n	14518 <vs_cmd_put+0x42>
		*param_length_out +=
   14568:	7813      	ldrb	r3, [r2, #0]
   1456a:	3320      	adds	r3, #32
   1456c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1456e:	4608      	mov	r0, r1
   14570:	f7ec fc9a 	bl	ea8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   14574:	e7d0      	b.n	14518 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   14576:	f7f4 fe7e 	bl	9276 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1457a:	e7cd      	b.n	14518 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1457c:	7813      	ldrb	r3, [r2, #0]
   1457e:	3301      	adds	r3, #1
   14580:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   14582:	4608      	mov	r0, r1
   14584:	f7f4 fe63 	bl	924e <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   14588:	e7c6      	b.n	14518 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1458a:	7813      	ldrb	r3, [r2, #0]
   1458c:	3340      	adds	r3, #64	; 0x40
   1458e:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   14590:	4608      	mov	r0, r1
   14592:	f7ff ff01 	bl	14398 <vs_supported_commands>
		return 0;
   14596:	2000      	movs	r0, #0
   14598:	e7be      	b.n	14518 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1459a:	f7f4 fe51 	bl	9240 <sdc_hci_cmd_vs_llpm_mode_set>
   1459e:	e7bb      	b.n	14518 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   145a0:	f7f4 fe22 	bl	91e8 <sdc_hci_cmd_vs_conn_update>
   145a4:	e7b8      	b.n	14518 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   145a6:	f7f4 fe17 	bl	91d8 <sdc_hci_cmd_vs_conn_event_extend>
   145aa:	e7b5      	b.n	14518 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   145ac:	f7f4 fe4a 	bl	9244 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   145b0:	e7b2      	b.n	14518 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   145b2:	f7f4 fe43 	bl	923c <sdc_hci_cmd_vs_event_length_set>
   145b6:	e7af      	b.n	14518 <vs_cmd_put+0x42>
	switch (opcode)	{
   145b8:	2001      	movs	r0, #1
   145ba:	e7ad      	b.n	14518 <vs_cmd_put+0x42>
   145bc:	2001      	movs	r0, #1
   145be:	e7ab      	b.n	14518 <vs_cmd_put+0x42>
   145c0:	2001      	movs	r0, #1
   145c2:	e7a9      	b.n	14518 <vs_cmd_put+0x42>

000145c4 <m_assert_handler>:
	k_oops();
   145c4:	4040      	eors	r0, r0
   145c6:	f380 8811 	msr	BASEPRI, r0
   145ca:	f04f 0003 	mov.w	r0, #3
   145ce:	df02      	svc	2
}
   145d0:	4770      	bx	lr

000145d2 <m_config_clock_source_get>:
}
   145d2:	2000      	movs	r0, #0
   145d4:	4770      	bx	lr

000145d6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   145d6:	4668      	mov	r0, sp
   145d8:	f020 0107 	bic.w	r1, r0, #7
   145dc:	468d      	mov	sp, r1
   145de:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   145e0:	f7f2 ff6a 	bl	74b8 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   145e4:	f7f7 fd36 	bl	c054 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   145e8:	f7f7 fe38 	bl	c25c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   145ec:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   145f0:	4685      	mov	sp, r0
   145f2:	4770      	bx	lr

000145f4 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   145f4:	4668      	mov	r0, sp
   145f6:	f020 0107 	bic.w	r1, r0, #7
   145fa:	468d      	mov	sp, r1
   145fc:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   145fe:	f7f2 ff11 	bl	7424 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   14602:	f7f7 fd27 	bl	c054 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   14606:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1460a:	4685      	mov	sp, r0
   1460c:	4770      	bx	lr

0001460e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1460e:	4668      	mov	r0, sp
   14610:	f020 0107 	bic.w	r1, r0, #7
   14614:	468d      	mov	sp, r1
   14616:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   14618:	f7f0 fbdc 	bl	4dd4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1461c:	f7f7 fd1a 	bl	c054 <_arch_isr_direct_pm>
   14620:	f7f7 fe1c 	bl	c25c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   14624:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   14628:	4685      	mov	sp, r0
   1462a:	4770      	bx	lr

0001462c <mpsl_lib_init_sys>:
{
   1462c:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   1462e:	f7fa ff69 	bl	f504 <mpsl_lib_init_internal>
	if (err) {
   14632:	4604      	mov	r4, r0
   14634:	b108      	cbz	r0, 1463a <mpsl_lib_init_sys+0xe>
}
   14636:	4620      	mov	r0, r4
   14638:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1463a:	2201      	movs	r2, #1
   1463c:	2100      	movs	r1, #0
   1463e:	2008      	movs	r0, #8
   14640:	f7fe fa96 	bl	12b70 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   14644:	2201      	movs	r2, #1
   14646:	2100      	movs	r1, #0
   14648:	200b      	movs	r0, #11
   1464a:	f7fe fa91 	bl	12b70 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1464e:	2201      	movs	r2, #1
   14650:	2100      	movs	r1, #0
   14652:	4610      	mov	r0, r2
   14654:	f7fe fa8c 	bl	12b70 <z_arm_irq_priority_set>
	return 0;
   14658:	e7ed      	b.n	14636 <mpsl_lib_init_sys+0xa>

0001465a <mpsl_low_prio_work_handler>:
{
   1465a:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1465c:	f04f 30ff 	mov.w	r0, #4294967295
   14660:	f04f 31ff 	mov.w	r1, #4294967295
   14664:	f7fa fd58 	bl	f118 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   14668:	f7f6 f88f 	bl	a78a <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   1466c:	f7fa fd5e 	bl	f12c <multithreading_lock_release>
}
   14670:	bd08      	pop	{r3, pc}

00014672 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   14672:	b508      	push	{r3, lr}

	mpsl_fem_init();
   14674:	f7f6 fa5f 	bl	ab36 <mpsl_fem_init>

	return 0;
}
   14678:	2000      	movs	r0, #0
   1467a:	bd08      	pop	{r3, pc}

0001467c <nrfx_clock_stop>:
	switch (domain) {
   1467c:	2801      	cmp	r0, #1
   1467e:	d000      	beq.n	14682 <nrfx_clock_stop+0x6>
   14680:	4770      	bx	lr
{
   14682:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   14684:	f7f3 fdc6 	bl	8214 <mpsl_clock_hfclk_release>
}
   14688:	bd08      	pop	{r3, pc}

0001468a <nrfx_clock_enable>:
}
   1468a:	4770      	bx	lr

0001468c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   1468c:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   1468e:	f7f3 fbcb 	bl	7e28 <MPSL_IRQ_CLOCK_Handler>
}
   14692:	bd08      	pop	{r3, pc}

00014694 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14694:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14698:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1469c:	f1b3 3fff 	cmp.w	r3, #4294967295
   146a0:	d003      	beq.n	146aa <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   146a2:	2b06      	cmp	r3, #6
   146a4:	d006      	beq.n	146b4 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   146a6:	2000      	movs	r0, #0
   146a8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   146aa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   146ae:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   146b2:	e7f6      	b.n	146a2 <nrf52_errata_12+0xe>
                        return true;
   146b4:	2001      	movs	r0, #1
    #endif
}
   146b6:	4770      	bx	lr

000146b8 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   146b8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   146bc:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   146c0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   146c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   146c8:	2a06      	cmp	r2, #6
   146ca:	d001      	beq.n	146d0 <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   146cc:	2000      	movs	r0, #0
   146ce:	4770      	bx	lr
                switch(var2)
   146d0:	3b03      	subs	r3, #3
   146d2:	2b00      	cmp	r3, #0
   146d4:	d804      	bhi.n	146e0 <nrf52_errata_16+0x28>
   146d6:	e8df f003 	tbb	[pc, r3]
   146da:	01          	.byte	0x01
   146db:	00          	.byte	0x00
   146dc:	2001      	movs	r0, #1
   146de:	4770      	bx	lr
                        return false;
   146e0:	2000      	movs	r0, #0
    #endif
}
   146e2:	4770      	bx	lr

000146e4 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   146e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   146e8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   146ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   146f0:	d003      	beq.n	146fa <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   146f2:	2b06      	cmp	r3, #6
   146f4:	d006      	beq.n	14704 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   146f6:	2000      	movs	r0, #0
   146f8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   146fa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   146fe:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14702:	e7f6      	b.n	146f2 <nrf52_errata_31+0xe>
                        return true;
   14704:	2001      	movs	r0, #1
    #endif
}
   14706:	4770      	bx	lr

00014708 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14708:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1470c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14710:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14714:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14718:	2a06      	cmp	r2, #6
   1471a:	d001      	beq.n	14720 <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1471c:	2000      	movs	r0, #0
   1471e:	4770      	bx	lr
                switch(var2)
   14720:	3b03      	subs	r3, #3
   14722:	2b00      	cmp	r3, #0
   14724:	d804      	bhi.n	14730 <nrf52_errata_32+0x28>
   14726:	e8df f003 	tbb	[pc, r3]
   1472a:	01          	.byte	0x01
   1472b:	00          	.byte	0x00
   1472c:	2001      	movs	r0, #1
   1472e:	4770      	bx	lr
                        return false;
   14730:	2000      	movs	r0, #0
    #endif
}
   14732:	4770      	bx	lr

00014734 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14738:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1473c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14740:	d003      	beq.n	1474a <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14742:	2b06      	cmp	r3, #6
   14744:	d006      	beq.n	14754 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14746:	2000      	movs	r0, #0
   14748:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1474a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1474e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14752:	e7f6      	b.n	14742 <nrf52_errata_36+0xe>
                        return true;
   14754:	2001      	movs	r0, #1
    #endif
}
   14756:	4770      	bx	lr

00014758 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14758:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1475c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14760:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14764:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14768:	2a06      	cmp	r2, #6
   1476a:	d001      	beq.n	14770 <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1476c:	2000      	movs	r0, #0
   1476e:	4770      	bx	lr
                switch(var2)
   14770:	3b03      	subs	r3, #3
   14772:	2b00      	cmp	r3, #0
   14774:	d804      	bhi.n	14780 <nrf52_errata_37+0x28>
   14776:	e8df f003 	tbb	[pc, r3]
   1477a:	01          	.byte	0x01
   1477b:	00          	.byte	0x00
   1477c:	2001      	movs	r0, #1
   1477e:	4770      	bx	lr
                        return false;
   14780:	2000      	movs	r0, #0
    #endif
}
   14782:	4770      	bx	lr

00014784 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14784:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   14788:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1478c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14790:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14794:	2a06      	cmp	r2, #6
   14796:	d001      	beq.n	1479c <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   14798:	2000      	movs	r0, #0
   1479a:	4770      	bx	lr
                switch(var2)
   1479c:	3b03      	subs	r3, #3
   1479e:	2b00      	cmp	r3, #0
   147a0:	d804      	bhi.n	147ac <nrf52_errata_57+0x28>
   147a2:	e8df f003 	tbb	[pc, r3]
   147a6:	01          	.byte	0x01
   147a7:	00          	.byte	0x00
   147a8:	2001      	movs	r0, #1
   147aa:	4770      	bx	lr
                        return false;
   147ac:	2000      	movs	r0, #0
    #endif
}
   147ae:	4770      	bx	lr

000147b0 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   147b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   147b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   147b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   147bc:	d007      	beq.n	147ce <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   147be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   147c2:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   147c6:	2b06      	cmp	r3, #6
   147c8:	d00a      	beq.n	147e0 <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   147ca:	2000      	movs	r0, #0
   147cc:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   147ce:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
   147d2:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   147d6:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
   147da:	f3c2 1203 	ubfx	r2, r2, #4, #4
   147de:	e7f2      	b.n	147c6 <nrf52_errata_66+0x16>
                switch(var2)
   147e0:	3a03      	subs	r2, #3
   147e2:	2a01      	cmp	r2, #1
   147e4:	d804      	bhi.n	147f0 <nrf52_errata_66+0x40>
   147e6:	e8df f002 	tbb	[pc, r2]
   147ea:	0101      	.short	0x0101
   147ec:	2000      	movs	r0, #0
   147ee:	4770      	bx	lr
                        return true;
   147f0:	2001      	movs	r0, #1
    #endif
}
   147f2:	4770      	bx	lr

000147f4 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   147f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   147f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   147fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   14800:	d003      	beq.n	1480a <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14802:	2b06      	cmp	r3, #6
   14804:	d006      	beq.n	14814 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14806:	2000      	movs	r0, #0
   14808:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1480a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1480e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14812:	e7f6      	b.n	14802 <nrf52_errata_108+0xe>
                        return true;
   14814:	2001      	movs	r0, #1
    #endif
}
   14816:	4770      	bx	lr

00014818 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14818:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1481c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14820:	f1b3 3fff 	cmp.w	r3, #4294967295
   14824:	d003      	beq.n	1482e <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14826:	2b06      	cmp	r3, #6
   14828:	d006      	beq.n	14838 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1482a:	2000      	movs	r0, #0
   1482c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1482e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   14832:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14836:	e7f6      	b.n	14826 <nrf52_errata_136+0xe>
                        return true;
   14838:	2001      	movs	r0, #1
    #endif
}
   1483a:	4770      	bx	lr

0001483c <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1483c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14840:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14844:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14848:	2a06      	cmp	r2, #6
   1484a:	d001      	beq.n	14850 <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1484c:	2000      	movs	r0, #0
   1484e:	4770      	bx	lr
                switch(var2)
   14850:	2b05      	cmp	r3, #5
   14852:	d803      	bhi.n	1485c <nrf52_errata_182+0x20>
   14854:	2b03      	cmp	r3, #3
   14856:	d303      	bcc.n	14860 <nrf52_errata_182+0x24>
   14858:	2000      	movs	r0, #0
   1485a:	4770      	bx	lr
                        return true;
   1485c:	2001      	movs	r0, #1
   1485e:	4770      	bx	lr
                        return true;
   14860:	2001      	movs	r0, #1
    #endif
}
   14862:	4770      	bx	lr

00014864 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14868:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1486c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14870:	2a06      	cmp	r2, #6
   14872:	d001      	beq.n	14878 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14874:	2000      	movs	r0, #0
   14876:	4770      	bx	lr
                switch(var2)
   14878:	2b06      	cmp	r3, #6
   1487a:	d803      	bhi.n	14884 <nrf52_configuration_249+0x20>
   1487c:	2b03      	cmp	r3, #3
   1487e:	d303      	bcc.n	14888 <nrf52_configuration_249+0x24>
   14880:	2000      	movs	r0, #0
   14882:	4770      	bx	lr
                        return true;
   14884:	2001      	movs	r0, #1
   14886:	4770      	bx	lr
                        return true;
   14888:	2001      	movs	r0, #1
    #endif
}
   1488a:	4770      	bx	lr

0001488c <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   1488c:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1488e:	f7ff ffe9 	bl	14864 <nrf52_configuration_249>
   14892:	b138      	cbz	r0, 148a4 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   14894:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1489c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   148a0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   148a4:	bd08      	pop	{r3, pc}

000148a6 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   148a6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   148a8:	4780      	blx	r0
}
   148aa:	bd08      	pop	{r3, pc}

000148ac <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   148ac:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   148ae:	f000 feca 	bl	15646 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   148b2:	bd08      	pop	{r3, pc}

000148b4 <nrf_gpiote_event_configure>:
{
   148b4:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   148b6:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   148ba:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   148be:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   148c2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   148c6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   148ca:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   148ce:	0212      	lsls	r2, r2, #8
   148d0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   148d4:	041b      	lsls	r3, r3, #16
   148d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   148da:	431a      	orrs	r2, r3
   148dc:	4314      	orrs	r4, r2
   148de:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   148e2:	bc10      	pop	{r4}
   148e4:	4770      	bx	lr

000148e6 <nrf_gpiote_task_configure>:
{
   148e6:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   148e8:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   148ec:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   148f0:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
   148f4:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   148f8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   148fc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14900:	0212      	lsls	r2, r2, #8
   14902:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14906:	041b      	lsls	r3, r3, #16
   14908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1490c:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1490e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14912:	051b      	lsls	r3, r3, #20
   14914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14918:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1491a:	4314      	orrs	r4, r2
   1491c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   14920:	bc10      	pop	{r4}
   14922:	4770      	bx	lr

00014924 <nrf_gpio_reconfigure>:
{
   14924:	b4f0      	push	{r4, r5, r6, r7}
   14926:	461c      	mov	r4, r3
   14928:	9e04      	ldr	r6, [sp, #16]
   1492a:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
   1492c:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14930:	f500 77e0 	add.w	r7, r0, #448	; 0x1c0
   14934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14938:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1493c:	460b      	mov	r3, r1
   1493e:	b389      	cbz	r1, 149a4 <nrf_gpio_reconfigure+0x80>
   14940:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14942:	b38a      	cbz	r2, 149a8 <nrf_gpio_reconfigure+0x84>
   14944:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14948:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1494c:	b37c      	cbz	r4, 149ae <nrf_gpio_reconfigure+0x8a>
   1494e:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14952:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14956:	b36e      	cbz	r6, 149b4 <nrf_gpio_reconfigure+0x90>
   14958:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1495c:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   14960:	b35d      	cbz	r5, 149ba <nrf_gpio_reconfigure+0x96>
   14962:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14966:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
   1496a:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1496e:	b33b      	cbz	r3, 149c0 <nrf_gpio_reconfigure+0x9c>
   14970:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14972:	b33a      	cbz	r2, 149c4 <nrf_gpio_reconfigure+0xa0>
   14974:	7812      	ldrb	r2, [r2, #0]
   14976:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14978:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1497a:	b32c      	cbz	r4, 149c8 <nrf_gpio_reconfigure+0xa4>
   1497c:	7822      	ldrb	r2, [r4, #0]
   1497e:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14980:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14982:	b31e      	cbz	r6, 149cc <nrf_gpio_reconfigure+0xa8>
   14984:	7832      	ldrb	r2, [r6, #0]
   14986:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14988:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1498a:	b30d      	cbz	r5, 149d0 <nrf_gpio_reconfigure+0xac>
   1498c:	782a      	ldrb	r2, [r5, #0]
   1498e:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14990:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14992:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   14994:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   14998:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1499c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   149a0:	bcf0      	pop	{r4, r5, r6, r7}
   149a2:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   149a4:	2100      	movs	r1, #0
   149a6:	e7cc      	b.n	14942 <nrf_gpio_reconfigure+0x1e>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   149a8:	f04f 0c00 	mov.w	ip, #0
   149ac:	e7cc      	b.n	14948 <nrf_gpio_reconfigure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   149ae:	f04f 0c00 	mov.w	ip, #0
   149b2:	e7ce      	b.n	14952 <nrf_gpio_reconfigure+0x2e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   149b4:	f04f 0c00 	mov.w	ip, #0
   149b8:	e7d0      	b.n	1495c <nrf_gpio_reconfigure+0x38>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   149ba:	f04f 0c00 	mov.w	ip, #0
   149be:	e7d2      	b.n	14966 <nrf_gpio_reconfigure+0x42>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   149c0:	2300      	movs	r3, #0
   149c2:	e7d6      	b.n	14972 <nrf_gpio_reconfigure+0x4e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   149c4:	2200      	movs	r2, #0
   149c6:	e7d7      	b.n	14978 <nrf_gpio_reconfigure+0x54>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   149c8:	2200      	movs	r2, #0
   149ca:	e7d9      	b.n	14980 <nrf_gpio_reconfigure+0x5c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   149cc:	2200      	movs	r2, #0
   149ce:	e7db      	b.n	14988 <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   149d0:	2200      	movs	r2, #0
   149d2:	e7dd      	b.n	14990 <nrf_gpio_reconfigure+0x6c>

000149d4 <pin_is_task_output>:
{
   149d4:	b510      	push	{r4, lr}
   149d6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   149d8:	f7fa ff84 	bl	f8e4 <pin_is_output>
   149dc:	b128      	cbz	r0, 149ea <pin_is_task_output+0x16>
   149de:	4620      	mov	r0, r4
   149e0:	f7fa ff6a 	bl	f8b8 <pin_in_use_by_te>
   149e4:	b118      	cbz	r0, 149ee <pin_is_task_output+0x1a>
   149e6:	2001      	movs	r0, #1
   149e8:	e000      	b.n	149ec <pin_is_task_output+0x18>
   149ea:	2000      	movs	r0, #0
}
   149ec:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   149ee:	2000      	movs	r0, #0
   149f0:	e7fc      	b.n	149ec <pin_is_task_output+0x18>

000149f2 <pin_is_input>:
{
   149f2:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   149f4:	f7fa ff76 	bl	f8e4 <pin_is_output>
   149f8:	f080 0001 	eor.w	r0, r0, #1
}
   149fc:	b2c0      	uxtb	r0, r0
   149fe:	bd08      	pop	{r3, pc}

00014a00 <gpiote_polarity_to_trigger>:
}
   14a00:	4770      	bx	lr

00014a02 <gpiote_trigger_to_polarity>:
}
   14a02:	4770      	bx	lr

00014a04 <is_level>:
}
   14a04:	2803      	cmp	r0, #3
   14a06:	bf94      	ite	ls
   14a08:	2000      	movls	r0, #0
   14a0a:	2001      	movhi	r0, #1
   14a0c:	4770      	bx	lr

00014a0e <next_sense_cond_call_handler>:
{
   14a0e:	b570      	push	{r4, r5, r6, lr}
   14a10:	4604      	mov	r4, r0
   14a12:	460d      	mov	r5, r1
   14a14:	4616      	mov	r6, r2
    if (is_level(trigger))
   14a16:	4608      	mov	r0, r1
   14a18:	f7ff fff4 	bl	14a04 <is_level>
   14a1c:	b9b8      	cbnz	r0, 14a4e <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14a1e:	2e02      	cmp	r6, #2
   14a20:	d038      	beq.n	14a94 <next_sense_cond_call_handler+0x86>
   14a22:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   14a24:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14a28:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   14a2c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14a30:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   14a34:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14a38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   14a40:	2d03      	cmp	r5, #3
   14a42:	d02b      	beq.n	14a9c <next_sense_cond_call_handler+0x8e>
   14a44:	2e02      	cmp	r6, #2
   14a46:	d027      	beq.n	14a98 <next_sense_cond_call_handler+0x8a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14a48:	2e03      	cmp	r6, #3
   14a4a:	d02c      	beq.n	14aa6 <next_sense_cond_call_handler+0x98>
}
   14a4c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   14a4e:	4629      	mov	r1, r5
   14a50:	4620      	mov	r0, r4
   14a52:	f7fa ffb9 	bl	f9c8 <call_handler>
    *p_pin = pin_number & 0x1F;
   14a56:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14a5a:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
   14a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a66:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   14a6a:	429e      	cmp	r6, r3
   14a6c:	d1ee      	bne.n	14a4c <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14a6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14a72:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   14a76:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14a7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   14a7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14a82:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14a86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14a8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14a8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   14a92:	e7db      	b.n	14a4c <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14a94:	2003      	movs	r0, #3
   14a96:	e7c5      	b.n	14a24 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14a98:	2d01      	cmp	r5, #1
   14a9a:	d1d5      	bne.n	14a48 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
   14a9c:	4629      	mov	r1, r5
   14a9e:	4620      	mov	r0, r4
   14aa0:	f7fa ff92 	bl	f9c8 <call_handler>
}
   14aa4:	e7d2      	b.n	14a4c <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   14aa6:	2d02      	cmp	r5, #2
   14aa8:	d1d0      	bne.n	14a4c <next_sense_cond_call_handler+0x3e>
   14aaa:	e7f7      	b.n	14a9c <next_sense_cond_call_handler+0x8e>

00014aac <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   14aac:	4684      	mov	ip, r0
   14aae:	2300      	movs	r3, #0
   14ab0:	e008      	b.n	14ac4 <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   14ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14ab6:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14aba:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   14abe:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14ac2:	3301      	adds	r3, #1
   14ac4:	2b00      	cmp	r3, #0
   14ac6:	d0f4      	beq.n	14ab2 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14ac8:	2300      	movs	r3, #0
   14aca:	b10b      	cbz	r3, 14ad0 <latch_pending_read_and_check+0x24>
    return false;
   14acc:	2000      	movs	r0, #0
   14ace:	4770      	bx	lr
        if (latch[port_idx])
   14ad0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   14ad4:	b90a      	cbnz	r2, 14ada <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14ad6:	3301      	adds	r3, #1
   14ad8:	e7f7      	b.n	14aca <latch_pending_read_and_check+0x1e>
            return true;
   14ada:	2001      	movs	r0, #1
}
   14adc:	4770      	bx	lr

00014ade <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   14ade:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   14ae0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   14ae2:	429a      	cmp	r2, r3
   14ae4:	d007      	beq.n	14af6 <xfer_completeness_check+0x18>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   14ae6:	2300      	movs	r3, #0
   14ae8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   14aec:	2205      	movs	r2, #5
   14aee:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   14af2:	4618      	mov	r0, r3
   14af4:	4770      	bx	lr
        return true;
   14af6:	2001      	movs	r0, #1
}
   14af8:	4770      	bx	lr

00014afa <twi_send_byte>:
{
   14afa:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   14afc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   14afe:	6a88      	ldr	r0, [r1, #40]	; 0x28
   14b00:	4282      	cmp	r2, r0
   14b02:	d205      	bcs.n	14b10 <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   14b04:	6a49      	ldr	r1, [r1, #36]	; 0x24
   14b06:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   14b08:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   14b0c:	2001      	movs	r0, #1
}
   14b0e:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   14b10:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   14b14:	b930      	cbnz	r0, 14b24 <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   14b16:	6a0a      	ldr	r2, [r1, #32]
   14b18:	f012 0f40 	tst.w	r2, #64	; 0x40
   14b1c:	d106      	bne.n	14b2c <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b1e:	2001      	movs	r0, #1
   14b20:	6158      	str	r0, [r3, #20]
}
   14b22:	4770      	bx	lr
   14b24:	2201      	movs	r2, #1
   14b26:	61da      	str	r2, [r3, #28]
            return false;
   14b28:	2000      	movs	r0, #0
   14b2a:	4770      	bx	lr
   14b2c:	2201      	movs	r2, #1
   14b2e:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   14b30:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   14b34:	4770      	bx	lr

00014b36 <twi_receive_byte>:
{
   14b36:	4684      	mov	ip, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   14b38:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14b3a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   14b3c:	4293      	cmp	r3, r2
   14b3e:	d229      	bcs.n	14b94 <twi_receive_byte+0x5e>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   14b40:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   14b42:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   14b46:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   14b48:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14b4a:	3301      	adds	r3, #1
   14b4c:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14b4e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   14b50:	1e50      	subs	r0, r2, #1
   14b52:	4283      	cmp	r3, r0
   14b54:	d007      	beq.n	14b66 <twi_receive_byte+0x30>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14b56:	4293      	cmp	r3, r2
   14b58:	d00d      	beq.n	14b76 <twi_receive_byte+0x40>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   14b5a:	4293      	cmp	r3, r2
   14b5c:	d011      	beq.n	14b82 <twi_receive_byte+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b5e:	2001      	movs	r0, #1
   14b60:	f8cc 0020 	str.w	r0, [ip, #32]
}
   14b64:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14b66:	6a08      	ldr	r0, [r1, #32]
   14b68:	f010 0f40 	tst.w	r0, #64	; 0x40
   14b6c:	d1f3      	bne.n	14b56 <twi_receive_byte+0x20>
    p_reg->SHORTS = mask;
   14b6e:	2302      	movs	r3, #2
   14b70:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
}
   14b74:	e7f3      	b.n	14b5e <twi_receive_byte+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14b76:	6a08      	ldr	r0, [r1, #32]
   14b78:	f010 0f40 	tst.w	r0, #64	; 0x40
   14b7c:	d1ed      	bne.n	14b5a <twi_receive_byte+0x24>
            return true;
   14b7e:	2001      	movs	r0, #1
}
   14b80:	4770      	bx	lr
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   14b82:	6a0b      	ldr	r3, [r1, #32]
   14b84:	f013 0f40 	tst.w	r3, #64	; 0x40
   14b88:	d0e9      	beq.n	14b5e <twi_receive_byte+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   14b8a:	2302      	movs	r3, #2
   14b8c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   14b90:	2000      	movs	r0, #0
   14b92:	4770      	bx	lr
    return true;
   14b94:	2001      	movs	r0, #1
   14b96:	4770      	bx	lr

00014b98 <twi_transfer>:
{
   14b98:	b570      	push	{r4, r5, r6, lr}
   14b9a:	4604      	mov	r4, r0
   14b9c:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14b9e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   14ba2:	b1cb      	cbz	r3, 14bd8 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ba4:	2300      	movs	r3, #0
   14ba6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   14baa:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   14bae:	2601      	movs	r6, #1
    if (p_cb->error)
   14bb0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14bb4:	b193      	cbz	r3, 14bdc <twi_transfer+0x44>
   14bb6:	2300      	movs	r3, #0
   14bb8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14bbc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   14bc0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   14bc4:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   14bc8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   14bcc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   14bd0:	2e00      	cmp	r6, #0
   14bd2:	d14c      	bne.n	14c6e <twi_transfer+0xd6>
    return true;
   14bd4:	2001      	movs	r0, #1
}
   14bd6:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   14bd8:	2600      	movs	r6, #0
   14bda:	e7e9      	b.n	14bb0 <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14bdc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14be0:	b14b      	cbz	r3, 14bf6 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14be2:	2300      	movs	r3, #0
   14be4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14be8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14bec:	2301      	movs	r3, #1
   14bee:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   14bf0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14bf4:	e7ec      	b.n	14bd0 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14bf6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   14bfa:	b1db      	cbz	r3, 14c34 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14bfc:	2300      	movs	r3, #0
   14bfe:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   14c02:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   14c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14c08:	3301      	adds	r3, #1
   14c0a:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14c10:	b14b      	cbz	r3, 14c26 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c12:	2300      	movs	r3, #0
   14c14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14c18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c1c:	2301      	movs	r3, #1
   14c1e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   14c20:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14c24:	e7d4      	b.n	14bd0 <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   14c26:	4629      	mov	r1, r5
   14c28:	4620      	mov	r0, r4
   14c2a:	f7ff ff66 	bl	14afa <twi_send_byte>
   14c2e:	2800      	cmp	r0, #0
   14c30:	d1ce      	bne.n	14bd0 <twi_transfer+0x38>
   14c32:	e7d0      	b.n	14bd6 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   14c38:	2b00      	cmp	r3, #0
   14c3a:	d0c9      	beq.n	14bd0 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c3c:	2300      	movs	r3, #0
   14c3e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   14c42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14c4a:	b14b      	cbz	r3, 14c60 <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c4c:	2300      	movs	r3, #0
   14c4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14c52:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c56:	2301      	movs	r3, #1
   14c58:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   14c5a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14c5e:	e7b7      	b.n	14bd0 <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   14c60:	4629      	mov	r1, r5
   14c62:	4620      	mov	r0, r4
   14c64:	f7ff ff67 	bl	14b36 <twi_receive_byte>
   14c68:	2800      	cmp	r0, #0
   14c6a:	d1b1      	bne.n	14bd0 <twi_transfer+0x38>
   14c6c:	e7b3      	b.n	14bd6 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   14c6e:	2300      	movs	r3, #0
   14c70:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   14c74:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14c78:	b10b      	cbz	r3, 14c7e <twi_transfer+0xe6>
        return false;
   14c7a:	2000      	movs	r0, #0
   14c7c:	e7ab      	b.n	14bd6 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   14c7e:	4629      	mov	r1, r5
   14c80:	4620      	mov	r0, r4
   14c82:	f7ff ff2c 	bl	14ade <xfer_completeness_check>
   14c86:	f080 0001 	eor.w	r0, r0, #1
   14c8a:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   14c8e:	e7f4      	b.n	14c7a <twi_transfer+0xe2>

00014c90 <twi_irq_handler>:
{
   14c90:	b570      	push	{r4, r5, r6, lr}
   14c92:	b086      	sub	sp, #24
   14c94:	4605      	mov	r5, r0
   14c96:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   14c98:	f7ff ff7e 	bl	14b98 <twi_transfer>
   14c9c:	2800      	cmp	r0, #0
   14c9e:	d15e      	bne.n	14d5e <twi_irq_handler+0xce>
    if (!p_cb->error &&
   14ca0:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   14ca4:	b926      	cbnz	r6, 14cb0 <twi_irq_handler+0x20>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   14ca6:	7b22      	ldrb	r2, [r4, #12]
   14ca8:	1e93      	subs	r3, r2, #2
   14caa:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   14cac:	2b01      	cmp	r3, #1
   14cae:	d917      	bls.n	14ce0 <twi_irq_handler+0x50>
        event.xfer_desc = p_cb->xfer_desc;
   14cb0:	f10d 0c04 	add.w	ip, sp, #4
   14cb4:	f104 0e0c 	add.w	lr, r4, #12
   14cb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14cbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14cc0:	f8de 3000 	ldr.w	r3, [lr]
   14cc4:	f8cc 3000 	str.w	r3, [ip]
        if (p_cb->error)
   14cc8:	b3c6      	cbz	r6, 14d3c <twi_irq_handler+0xac>
    uint32_t error_source = p_reg->ERRORSRC;
   14cca:	f8d5 34c4 	ldr.w	r3, [r5, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   14cce:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   14cd2:	f013 0f02 	tst.w	r3, #2
   14cd6:	d01f      	beq.n	14d18 <twi_irq_handler+0x88>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   14cd8:	2301      	movs	r3, #1
   14cda:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   14cde:	e030      	b.n	14d42 <twi_irq_handler+0xb2>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   14ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14ce2:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   14ce4:	4299      	cmp	r1, r3
   14ce6:	d1e3      	bne.n	14cb0 <twi_irq_handler+0x20>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   14ce8:	69e3      	ldr	r3, [r4, #28]
   14cea:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   14cec:	6963      	ldr	r3, [r4, #20]
   14cee:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   14cf0:	6a23      	ldr	r3, [r4, #32]
   14cf2:	f3c3 1340 	ubfx	r3, r3, #5, #1
   14cf6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   14cfa:	2300      	movs	r3, #0
   14cfc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   14d00:	2a03      	cmp	r2, #3
   14d02:	d004      	beq.n	14d0e <twi_irq_handler+0x7e>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   14d04:	4621      	mov	r1, r4
   14d06:	4628      	mov	r0, r5
   14d08:	f7fb f9f0 	bl	100ec <twi_rx_start_transfer>
   14d0c:	e027      	b.n	14d5e <twi_irq_handler+0xce>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   14d0e:	4621      	mov	r1, r4
   14d10:	4628      	mov	r0, r5
   14d12:	f7fb f98d 	bl	10030 <twi_tx_start_transfer>
   14d16:	e022      	b.n	14d5e <twi_irq_handler+0xce>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   14d18:	f013 0f04 	tst.w	r3, #4
   14d1c:	d003      	beq.n	14d26 <twi_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   14d1e:	2302      	movs	r3, #2
   14d20:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   14d24:	e00d      	b.n	14d42 <twi_irq_handler+0xb2>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   14d26:	f013 0f01 	tst.w	r3, #1
   14d2a:	d003      	beq.n	14d34 <twi_irq_handler+0xa4>
                event.type = NRFX_TWI_EVT_OVERRUN;
   14d2c:	2303      	movs	r3, #3
   14d2e:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   14d32:	e006      	b.n	14d42 <twi_irq_handler+0xb2>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   14d34:	2304      	movs	r3, #4
   14d36:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   14d3a:	e002      	b.n	14d42 <twi_irq_handler+0xb2>
            event.type = NRFX_TWI_EVT_DONE;
   14d3c:	2300      	movs	r3, #0
   14d3e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   14d42:	2300      	movs	r3, #0
   14d44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   14d48:	6a23      	ldr	r3, [r4, #32]
   14d4a:	f013 0f04 	tst.w	r3, #4
   14d4e:	d002      	beq.n	14d56 <twi_irq_handler+0xc6>
   14d50:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   14d54:	b11b      	cbz	r3, 14d5e <twi_irq_handler+0xce>
            p_cb->handler(&event, p_cb->p_context);
   14d56:	6823      	ldr	r3, [r4, #0]
   14d58:	6861      	ldr	r1, [r4, #4]
   14d5a:	4668      	mov	r0, sp
   14d5c:	4798      	blx	r3
}
   14d5e:	b006      	add	sp, #24
   14d60:	bd70      	pop	{r4, r5, r6, pc}

00014d62 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   14d62:	b508      	push	{r3, lr}
  _DoInit();
   14d64:	f7fb fb7c 	bl	10460 <_DoInit>
}
   14d68:	bd08      	pop	{r3, pc}

00014d6a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   14d6a:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   14d6c:	f7ff fff9 	bl	14d62 <SEGGER_RTT_Init>

	return 0;
}
   14d70:	2000      	movs	r0, #0
   14d72:	bd08      	pop	{r3, pc}

00014d74 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   14d74:	b160      	cbz	r0, 14d90 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   14d76:	68c3      	ldr	r3, [r0, #12]
   14d78:	785a      	ldrb	r2, [r3, #1]
   14d7a:	f012 0f01 	tst.w	r2, #1
   14d7e:	d003      	beq.n	14d88 <z_device_is_ready+0x14>
   14d80:	781b      	ldrb	r3, [r3, #0]
   14d82:	b11b      	cbz	r3, 14d8c <z_device_is_ready+0x18>
   14d84:	2000      	movs	r0, #0
   14d86:	4770      	bx	lr
   14d88:	2000      	movs	r0, #0
   14d8a:	4770      	bx	lr
   14d8c:	2001      	movs	r0, #1
   14d8e:	4770      	bx	lr
		return false;
   14d90:	2000      	movs	r0, #0
}
   14d92:	4770      	bx	lr

00014d94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d96:	4605      	mov	r5, r0
   14d98:	460e      	mov	r6, r1
	__asm__ volatile(
   14d9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   14d9e:	f3ef 8711 	mrs	r7, BASEPRI
   14da2:	f383 8812 	msr	BASEPRI_MAX, r3
   14da6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   14daa:	f7fc fbdf 	bl	1156c <z_impl_z_current_get>
   14dae:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   14db0:	4631      	mov	r1, r6
   14db2:	4628      	mov	r0, r5
   14db4:	f7ff f8d8 	bl	13f68 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14db8:	f387 8811 	msr	BASEPRI, r7
   14dbc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14dc0:	4620      	mov	r0, r4
   14dc2:	f7f7 fc79 	bl	c6b8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   14dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014dc8 <z_early_memset>:
{
   14dc8:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   14dca:	f7fd fff3 	bl	12db4 <memset>
}
   14dce:	bd08      	pop	{r3, pc}

00014dd0 <z_early_memcpy>:
{
   14dd0:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   14dd2:	f7fd ffc0 	bl	12d56 <memcpy>
}
   14dd6:	bd08      	pop	{r3, pc}

00014dd8 <k_heap_init>:
{
   14dd8:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   14dda:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   14dde:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   14de0:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   14de2:	f7fd fa6c 	bl	122be <sys_heap_init>
}
   14de6:	bd10      	pop	{r4, pc}

00014de8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   14de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dec:	b085      	sub	sp, #20
   14dee:	4607      	mov	r7, r0
   14df0:	9103      	str	r1, [sp, #12]
   14df2:	4692      	mov	sl, r2
   14df4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14df6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   14df8:	4628      	mov	r0, r5
   14dfa:	4621      	mov	r1, r4
   14dfc:	f000 fc29 	bl	15652 <sys_clock_timeout_end_calc>
   14e00:	4606      	mov	r6, r0
   14e02:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   14e04:	f1b4 3fff 	cmp.w	r4, #4294967295
   14e08:	bf08      	it	eq
   14e0a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   14e0e:	d00d      	beq.n	14e2c <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   14e10:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   14e14:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e18:	f3ef 8511 	mrs	r5, BASEPRI
   14e1c:	f383 8812 	msr	BASEPRI_MAX, r3
   14e20:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   14e24:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   14e28:	4644      	mov	r4, r8

	while (ret == NULL) {
   14e2a:	e014      	b.n	14e56 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   14e2c:	f04f 36ff 	mov.w	r6, #4294967295
   14e30:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   14e34:	e7ec      	b.n	14e10 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   14e36:	9000      	str	r0, [sp, #0]
   14e38:	9101      	str	r1, [sp, #4]
   14e3a:	f107 020c 	add.w	r2, r7, #12
   14e3e:	4629      	mov	r1, r5
   14e40:	4658      	mov	r0, fp
   14e42:	f7fc f9c9 	bl	111d8 <z_pend_curr>
   14e46:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e4a:	f3ef 8511 	mrs	r5, BASEPRI
   14e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   14e52:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   14e56:	b9ac      	cbnz	r4, 14e84 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   14e58:	4652      	mov	r2, sl
   14e5a:	9903      	ldr	r1, [sp, #12]
   14e5c:	4638      	mov	r0, r7
   14e5e:	f7fd f9b8 	bl	121d2 <sys_heap_aligned_alloc>
   14e62:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   14e64:	f7fc fcf4 	bl	11850 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   14e68:	b964      	cbnz	r4, 14e84 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   14e6a:	1a30      	subs	r0, r6, r0
   14e6c:	eb69 0101 	sbc.w	r1, r9, r1
   14e70:	2801      	cmp	r0, #1
   14e72:	f171 0300 	sbcs.w	r3, r1, #0
   14e76:	db05      	blt.n	14e84 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   14e78:	f1b8 0f00 	cmp.w	r8, #0
   14e7c:	d1db      	bne.n	14e36 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   14e7e:	f04f 0801 	mov.w	r8, #1
   14e82:	e7d8      	b.n	14e36 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   14e84:	f385 8811 	msr	BASEPRI, r5
   14e88:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   14e8c:	4620      	mov	r0, r4
   14e8e:	b005      	add	sp, #20
   14e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014e94 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   14e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e96:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   14e98:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   14e9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ea0:	f3ef 8511 	mrs	r5, BASEPRI
   14ea4:	f383 8812 	msr	BASEPRI_MAX, r3
   14ea8:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   14eac:	f7fd f94d 	bl	1214a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   14eb0:	f104 000c 	add.w	r0, r4, #12
   14eb4:	f000 fb14 	bl	154e0 <z_unpend_all>
   14eb8:	b920      	cbnz	r0, 14ec4 <k_heap_free+0x30>
	__asm__ volatile(
   14eba:	f385 8811 	msr	BASEPRI, r5
   14ebe:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   14ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   14ec4:	4629      	mov	r1, r5
   14ec6:	4638      	mov	r0, r7
   14ec8:	f7fc f838 	bl	10f3c <z_reschedule>
   14ecc:	e7f9      	b.n	14ec2 <k_heap_free+0x2e>

00014ece <setup_thread_stack>:
{
   14ece:	b410      	push	{r4}
   14ed0:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14ed2:	3207      	adds	r2, #7
   14ed4:	f022 0207 	bic.w	r2, r2, #7
   14ed8:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   14edc:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   14ee0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   14ee4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   14ee8:	2200      	movs	r2, #0
   14eea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   14eee:	4408      	add	r0, r1
   14ef0:	bc10      	pop	{r4}
   14ef2:	4770      	bx	lr

00014ef4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14ef4:	f3ef 8005 	mrs	r0, IPSR
}
   14ef8:	3800      	subs	r0, #0
   14efa:	bf18      	it	ne
   14efc:	2001      	movne	r0, #1
   14efe:	4770      	bx	lr

00014f00 <z_impl_k_thread_start>:
{
   14f00:	b508      	push	{r3, lr}
	z_sched_start(thread);
   14f02:	f7fc f92f 	bl	11164 <z_sched_start>
}
   14f06:	bd08      	pop	{r3, pc}

00014f08 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   14f08:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   14f0a:	2400      	movs	r4, #0
   14f0c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   14f0e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   14f10:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   14f12:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   14f14:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   14f16:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   14f18:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   14f1a:	bc10      	pop	{r4}
   14f1c:	4770      	bx	lr

00014f1e <z_impl_k_thread_create>:
{
   14f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f20:	b087      	sub	sp, #28
   14f22:	4604      	mov	r4, r0
   14f24:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14f26:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14f28:	2700      	movs	r7, #0
   14f2a:	9705      	str	r7, [sp, #20]
   14f2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   14f2e:	9704      	str	r7, [sp, #16]
   14f30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   14f32:	9703      	str	r7, [sp, #12]
   14f34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14f36:	9702      	str	r7, [sp, #8]
   14f38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   14f3a:	9701      	str	r7, [sp, #4]
   14f3c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   14f3e:	9700      	str	r7, [sp, #0]
   14f40:	f7fb fc46 	bl	107d0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   14f44:	f1b5 3fff 	cmp.w	r5, #4294967295
   14f48:	bf08      	it	eq
   14f4a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   14f4e:	d102      	bne.n	14f56 <z_impl_k_thread_create+0x38>
}
   14f50:	4620      	mov	r0, r4
   14f52:	b007      	add	sp, #28
   14f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   14f56:	4632      	mov	r2, r6
   14f58:	462b      	mov	r3, r5
   14f5a:	4620      	mov	r0, r4
   14f5c:	f7fb fc2a 	bl	107b4 <schedule_new_thread>
   14f60:	e7f6      	b.n	14f50 <z_impl_k_thread_create+0x32>

00014f62 <z_pm_save_idle_exit>:
{
   14f62:	b508      	push	{r3, lr}
	pm_system_resume();
   14f64:	f7f6 ff1a 	bl	bd9c <pm_system_resume>
	sys_clock_idle_exit();
   14f68:	f7fe ffbd 	bl	13ee6 <sys_clock_idle_exit>
}
   14f6c:	bd08      	pop	{r3, pc}

00014f6e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   14f6e:	4288      	cmp	r0, r1
   14f70:	da00      	bge.n	14f74 <new_prio_for_inheritance+0x6>
   14f72:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   14f74:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   14f78:	db01      	blt.n	14f7e <new_prio_for_inheritance+0x10>
   14f7a:	4608      	mov	r0, r1
   14f7c:	4770      	bx	lr
   14f7e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   14f82:	4770      	bx	lr

00014f84 <adjust_owner_prio>:
{
   14f84:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   14f86:	6880      	ldr	r0, [r0, #8]
   14f88:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14f8c:	428b      	cmp	r3, r1
   14f8e:	d101      	bne.n	14f94 <adjust_owner_prio+0x10>
	return false;
   14f90:	2000      	movs	r0, #0
}
   14f92:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   14f94:	f7fc f93c 	bl	11210 <z_set_prio>
   14f98:	e7fb      	b.n	14f92 <adjust_owner_prio+0xe>

00014f9a <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14f9a:	680b      	ldr	r3, [r1, #0]
   14f9c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14fa0:	600b      	str	r3, [r1, #0]
	return list->tail;
   14fa2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   14fa4:	b132      	cbz	r2, 14fb4 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14fa6:	6813      	ldr	r3, [r2, #0]
   14fa8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14fac:	430b      	orrs	r3, r1
   14fae:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14fb0:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   14fb2:	4770      	bx	lr
	list->tail = node;
   14fb4:	6041      	str	r1, [r0, #4]
	list->head = node;
   14fb6:	6001      	str	r1, [r0, #0]
}
   14fb8:	4770      	bx	lr

00014fba <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   14fba:	b508      	push	{r3, lr}
   14fbc:	b191      	cbz	r1, 14fe4 <sys_sflist_insert+0x2a>
   14fbe:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14fc0:	680b      	ldr	r3, [r1, #0]
   14fc2:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   14fc6:	2b03      	cmp	r3, #3
   14fc8:	d918      	bls.n	14ffc <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14fca:	6813      	ldr	r3, [r2, #0]
   14fcc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14fd0:	430b      	orrs	r3, r1
   14fd2:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14fd4:	f8dc 3000 	ldr.w	r3, [ip]
   14fd8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14fdc:	4313      	orrs	r3, r2
   14fde:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   14fe2:	bd08      	pop	{r3, pc}
	return list->head;
   14fe4:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14fe6:	6813      	ldr	r3, [r2, #0]
   14fe8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14fec:	430b      	orrs	r3, r1
   14fee:	6013      	str	r3, [r2, #0]
	list->head = node;
   14ff0:	6002      	str	r2, [r0, #0]
	return list->tail;
   14ff2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	d1f4      	bne.n	14fe2 <sys_sflist_insert+0x28>
	list->tail = node;
   14ff8:	6042      	str	r2, [r0, #4]
}
   14ffa:	e7f2      	b.n	14fe2 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   14ffc:	4611      	mov	r1, r2
   14ffe:	f7ff ffcc 	bl	14f9a <sys_sflist_append>
   15002:	e7ee      	b.n	14fe2 <sys_sflist_insert+0x28>

00015004 <prepare_thread_to_run>:
{
   15004:	b508      	push	{r3, lr}
   15006:	2200      	movs	r2, #0
   15008:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1500c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   1500e:	f000 f98f 	bl	15330 <z_ready_thread>
}
   15012:	bd08      	pop	{r3, pc}

00015014 <queue_insert>:
{
   15014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15018:	4604      	mov	r4, r0
   1501a:	460e      	mov	r6, r1
   1501c:	4615      	mov	r5, r2
   1501e:	461f      	mov	r7, r3
   15020:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15024:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   15028:	f04f 0240 	mov.w	r2, #64	; 0x40
   1502c:	f3ef 8911 	mrs	r9, BASEPRI
   15030:	f382 8812 	msr	BASEPRI_MAX, r2
   15034:	f3bf 8f6f 	isb	sy
   15038:	46ca      	mov	sl, r9
	if (is_append) {
   1503a:	b103      	cbz	r3, 1503e <queue_insert+0x2a>
	return list->tail;
   1503c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1503e:	4640      	mov	r0, r8
   15040:	f000 fa2c 	bl	1549c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   15044:	b998      	cbnz	r0, 1506e <queue_insert+0x5a>
	if (alloc) {
   15046:	b9df      	cbnz	r7, 15080 <queue_insert+0x6c>
	node->next_and_flags = flags;
   15048:	2300      	movs	r3, #0
   1504a:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   1504c:	462a      	mov	r2, r5
   1504e:	4631      	mov	r1, r6
   15050:	4620      	mov	r0, r4
   15052:	f7ff ffb2 	bl	14fba <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   15056:	2104      	movs	r1, #4
   15058:	f104 0010 	add.w	r0, r4, #16
   1505c:	f000 fcc9 	bl	159f2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   15060:	4649      	mov	r1, r9
   15062:	4640      	mov	r0, r8
   15064:	f7fb ff6a 	bl	10f3c <z_reschedule>
	return 0;
   15068:	2000      	movs	r0, #0
}
   1506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   1506e:	4629      	mov	r1, r5
   15070:	f7ff ffc8 	bl	15004 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   15074:	4649      	mov	r1, r9
   15076:	4640      	mov	r0, r8
   15078:	f7fb ff60 	bl	10f3c <z_reschedule>
		return 0;
   1507c:	2000      	movs	r0, #0
   1507e:	e7f4      	b.n	1506a <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   15080:	2108      	movs	r1, #8
   15082:	2000      	movs	r0, #0
   15084:	f7fc fd3c 	bl	11b00 <z_thread_aligned_alloc>
		if (anode == NULL) {
   15088:	b120      	cbz	r0, 15094 <queue_insert+0x80>
		anode->data = data;
   1508a:	6045      	str	r5, [r0, #4]
   1508c:	2201      	movs	r2, #1
   1508e:	6002      	str	r2, [r0, #0]
		data = anode;
   15090:	4605      	mov	r5, r0
   15092:	e7db      	b.n	1504c <queue_insert+0x38>
	__asm__ volatile(
   15094:	f38a 8811 	msr	BASEPRI, sl
   15098:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1509c:	f06f 000b 	mvn.w	r0, #11
   150a0:	e7e3      	b.n	1506a <queue_insert+0x56>

000150a2 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   150a2:	b160      	cbz	r0, 150be <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   150a4:	6803      	ldr	r3, [r0, #0]
   150a6:	f013 0f03 	tst.w	r3, #3
   150aa:	d008      	beq.n	150be <z_queue_node_peek+0x1c>
{
   150ac:	b510      	push	{r4, lr}
		ret = anode->data;
   150ae:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   150b0:	b909      	cbnz	r1, 150b6 <z_queue_node_peek+0x14>
		ret = anode->data;
   150b2:	4620      	mov	r0, r4
}
   150b4:	bd10      	pop	{r4, pc}
			k_free(anode);
   150b6:	f000 fcc4 	bl	15a42 <k_free>
		ret = anode->data;
   150ba:	4620      	mov	r0, r4
   150bc:	e7fa      	b.n	150b4 <z_queue_node_peek+0x12>
}
   150be:	4770      	bx	lr

000150c0 <z_impl_k_queue_init>:
	list->head = NULL;
   150c0:	2300      	movs	r3, #0
   150c2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   150c4:	6043      	str	r3, [r0, #4]
   150c6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   150ca:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   150cc:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   150ce:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   150d2:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   150d4:	6143      	str	r3, [r0, #20]
}
   150d6:	4770      	bx	lr

000150d8 <k_queue_append>:
{
   150d8:	b500      	push	{lr}
   150da:	b083      	sub	sp, #12
   150dc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   150de:	2301      	movs	r3, #1
   150e0:	9300      	str	r3, [sp, #0]
   150e2:	2300      	movs	r3, #0
   150e4:	4619      	mov	r1, r3
   150e6:	f7ff ff95 	bl	15014 <queue_insert>
}
   150ea:	b003      	add	sp, #12
   150ec:	f85d fb04 	ldr.w	pc, [sp], #4

000150f0 <k_queue_prepend>:
{
   150f0:	b500      	push	{lr}
   150f2:	b083      	sub	sp, #12
   150f4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   150f6:	2100      	movs	r1, #0
   150f8:	9100      	str	r1, [sp, #0]
   150fa:	460b      	mov	r3, r1
   150fc:	f7ff ff8a 	bl	15014 <queue_insert>
}
   15100:	b003      	add	sp, #12
   15102:	f85d fb04 	ldr.w	pc, [sp], #4

00015106 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   15106:	b15a      	cbz	r2, 15120 <z_impl_k_sem_init+0x1a>
   15108:	428a      	cmp	r2, r1
   1510a:	d30c      	bcc.n	15126 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1510c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1510e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   15110:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   15112:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   15114:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   15118:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1511a:	6143      	str	r3, [r0, #20]
	return 0;
   1511c:	2000      	movs	r0, #0
   1511e:	4770      	bx	lr
		return -EINVAL;
   15120:	f06f 0015 	mvn.w	r0, #21
   15124:	4770      	bx	lr
   15126:	f06f 0015 	mvn.w	r0, #21
}
   1512a:	4770      	bx	lr

0001512c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1512c:	460b      	mov	r3, r1
   1512e:	b139      	cbz	r1, 15140 <sys_slist_remove+0x14>
	return node->next;
   15130:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   15132:	6019      	str	r1, [r3, #0]
	return list->tail;
   15134:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   15136:	428a      	cmp	r2, r1
   15138:	d009      	beq.n	1514e <sys_slist_remove+0x22>
	parent->next = child;
   1513a:	2300      	movs	r3, #0
   1513c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1513e:	4770      	bx	lr
	return node->next;
   15140:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   15142:	6003      	str	r3, [r0, #0]
	return list->tail;
   15144:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   15146:	428a      	cmp	r2, r1
   15148:	d1f7      	bne.n	1513a <sys_slist_remove+0xe>
	list->tail = node;
   1514a:	6043      	str	r3, [r0, #4]
}
   1514c:	e7f5      	b.n	1513a <sys_slist_remove+0xe>
	list->tail = node;
   1514e:	6043      	str	r3, [r0, #4]
}
   15150:	e7f3      	b.n	1513a <sys_slist_remove+0xe>

00015152 <notify_queue_locked>:
	if (queue != NULL) {
   15152:	b130      	cbz	r0, 15162 <notify_queue_locked+0x10>
{
   15154:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   15156:	2200      	movs	r2, #0
   15158:	4611      	mov	r1, r2
   1515a:	30c0      	adds	r0, #192	; 0xc0
   1515c:	f000 f9d4 	bl	15508 <z_sched_wake>
}
   15160:	bd08      	pop	{r3, pc}
	bool rv = false;
   15162:	2000      	movs	r0, #0
}
   15164:	4770      	bx	lr

00015166 <submit_to_queue_locked>:
{
   15166:	b570      	push	{r4, r5, r6, lr}
   15168:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1516a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1516c:	f013 0f02 	tst.w	r3, #2
   15170:	d122      	bne.n	151b8 <submit_to_queue_locked+0x52>
   15172:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   15174:	f013 0f04 	tst.w	r3, #4
   15178:	d123      	bne.n	151c2 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   1517a:	680b      	ldr	r3, [r1, #0]
   1517c:	b1ab      	cbz	r3, 151aa <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   1517e:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   15180:	f013 0f01 	tst.w	r3, #1
   15184:	d014      	beq.n	151b0 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   15186:	68a3      	ldr	r3, [r4, #8]
   15188:	602b      	str	r3, [r5, #0]
			ret = 2;
   1518a:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   1518c:	4621      	mov	r1, r4
   1518e:	6828      	ldr	r0, [r5, #0]
   15190:	f7fb fd3a 	bl	10c08 <queue_submit_locked>
		if (rc < 0) {
   15194:	2800      	cmp	r0, #0
   15196:	db11      	blt.n	151bc <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   15198:	68e3      	ldr	r3, [r4, #12]
   1519a:	f043 0304 	orr.w	r3, r3, #4
   1519e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   151a0:	682b      	ldr	r3, [r5, #0]
   151a2:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   151a4:	b136      	cbz	r6, 151b4 <submit_to_queue_locked+0x4e>
   151a6:	4630      	mov	r0, r6
	return ret;
   151a8:	e00a      	b.n	151c0 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   151aa:	6883      	ldr	r3, [r0, #8]
   151ac:	600b      	str	r3, [r1, #0]
   151ae:	e7e6      	b.n	1517e <submit_to_queue_locked+0x18>
		ret = 1;
   151b0:	2601      	movs	r6, #1
   151b2:	e7eb      	b.n	1518c <submit_to_queue_locked+0x26>
   151b4:	4630      	mov	r0, r6
   151b6:	e001      	b.n	151bc <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   151b8:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   151bc:	2300      	movs	r3, #0
   151be:	602b      	str	r3, [r5, #0]
}
   151c0:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   151c2:	2000      	movs	r0, #0
   151c4:	e7fa      	b.n	151bc <submit_to_queue_locked+0x56>

000151c6 <z_reschedule_unlocked>:
{
   151c6:	b508      	push	{r3, lr}
	__asm__ volatile(
   151c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   151cc:	f3ef 8011 	mrs	r0, BASEPRI
   151d0:	f383 8812 	msr	BASEPRI_MAX, r3
   151d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   151d8:	f000 f855 	bl	15286 <z_reschedule_irqlock>
}
   151dc:	bd08      	pop	{r3, pc}

000151de <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   151de:	2300      	movs	r3, #0
   151e0:	6003      	str	r3, [r0, #0]
   151e2:	6043      	str	r3, [r0, #4]
   151e4:	6083      	str	r3, [r0, #8]
   151e6:	60c3      	str	r3, [r0, #12]
   151e8:	6041      	str	r1, [r0, #4]
}
   151ea:	4770      	bx	lr

000151ec <z_work_submit_to_queue>:
{
   151ec:	b510      	push	{r4, lr}
   151ee:	b082      	sub	sp, #8
   151f0:	9001      	str	r0, [sp, #4]
   151f2:	4608      	mov	r0, r1
   151f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   151f8:	f3ef 8411 	mrs	r4, BASEPRI
   151fc:	f383 8812 	msr	BASEPRI_MAX, r3
   15200:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   15204:	a901      	add	r1, sp, #4
   15206:	f7ff ffae 	bl	15166 <submit_to_queue_locked>
	__asm__ volatile(
   1520a:	f384 8811 	msr	BASEPRI, r4
   1520e:	f3bf 8f6f 	isb	sy
}
   15212:	b002      	add	sp, #8
   15214:	bd10      	pop	{r4, pc}

00015216 <k_work_submit_to_queue>:
{
   15216:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   15218:	f7ff ffe8 	bl	151ec <z_work_submit_to_queue>
	if (ret > 0) {
   1521c:	1e04      	subs	r4, r0, #0
   1521e:	dc01      	bgt.n	15224 <k_work_submit_to_queue+0xe>
}
   15220:	4620      	mov	r0, r4
   15222:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   15224:	f7ff ffcf 	bl	151c6 <z_reschedule_unlocked>
	return ret;
   15228:	e7fa      	b.n	15220 <k_work_submit_to_queue+0xa>

0001522a <k_work_queue_init>:
{
   1522a:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1522c:	22d8      	movs	r2, #216	; 0xd8
   1522e:	2100      	movs	r1, #0
   15230:	f7fd fdc0 	bl	12db4 <memset>
}
   15234:	bd08      	pop	{r3, pc}

00015236 <thread_active_elsewhere>:
}
   15236:	2000      	movs	r0, #0
   15238:	4770      	bx	lr

0001523a <pended_on_thread>:
}
   1523a:	6880      	ldr	r0, [r0, #8]
   1523c:	4770      	bx	lr

0001523e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1523e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15242:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15246:	4283      	cmp	r3, r0
   15248:	d001      	beq.n	1524e <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1524a:	1ac0      	subs	r0, r0, r3
   1524c:	4770      	bx	lr
	return 0;
   1524e:	2000      	movs	r0, #0
}
   15250:	4770      	bx	lr

00015252 <z_unpend_thread_no_timeout>:
{
   15252:	b538      	push	{r3, r4, r5, lr}
   15254:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15256:	2300      	movs	r3, #0
	__asm__ volatile(
   15258:	f04f 0240 	mov.w	r2, #64	; 0x40
   1525c:	f3ef 8511 	mrs	r5, BASEPRI
   15260:	f382 8812 	msr	BASEPRI_MAX, r2
   15264:	f3bf 8f6f 	isb	sy
   15268:	e004      	b.n	15274 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   1526a:	f385 8811 	msr	BASEPRI, r5
   1526e:	f3bf 8f6f 	isb	sy
   15272:	2301      	movs	r3, #1
   15274:	b933      	cbnz	r3, 15284 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   15276:	68a3      	ldr	r3, [r4, #8]
   15278:	2b00      	cmp	r3, #0
   1527a:	d0f6      	beq.n	1526a <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   1527c:	4620      	mov	r0, r4
   1527e:	f000 f824 	bl	152ca <unpend_thread_no_timeout>
   15282:	e7f2      	b.n	1526a <z_unpend_thread_no_timeout+0x18>
}
   15284:	bd38      	pop	{r3, r4, r5, pc}

00015286 <z_reschedule_irqlock>:
{
   15286:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15288:	4603      	mov	r3, r0
   1528a:	b928      	cbnz	r0, 15298 <z_reschedule_irqlock+0x12>
   1528c:	f3ef 8205 	mrs	r2, IPSR
   15290:	b912      	cbnz	r2, 15298 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   15292:	f7f6 ff0f 	bl	c0b4 <arch_swap>
	return ret;
   15296:	e003      	b.n	152a0 <z_reschedule_irqlock+0x1a>
   15298:	f383 8811 	msr	BASEPRI, r3
   1529c:	f3bf 8f6f 	isb	sy
}
   152a0:	bd08      	pop	{r3, pc}

000152a2 <z_reschedule_unlocked>:
{
   152a2:	b508      	push	{r3, lr}
	__asm__ volatile(
   152a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   152a8:	f3ef 8011 	mrs	r0, BASEPRI
   152ac:	f383 8812 	msr	BASEPRI_MAX, r3
   152b0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   152b4:	f7ff ffe7 	bl	15286 <z_reschedule_irqlock>
}
   152b8:	bd08      	pop	{r3, pc}

000152ba <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   152ba:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   152bc:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   152be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   152c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   152c2:	2300      	movs	r3, #0
   152c4:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   152c6:	604b      	str	r3, [r1, #4]
}
   152c8:	4770      	bx	lr

000152ca <unpend_thread_no_timeout>:
{
   152ca:	b510      	push	{r4, lr}
   152cc:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   152ce:	f7ff ffb4 	bl	1523a <pended_on_thread>
   152d2:	4621      	mov	r1, r4
   152d4:	f7ff fff1 	bl	152ba <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   152d8:	7b63      	ldrb	r3, [r4, #13]
   152da:	f023 0302 	bic.w	r3, r3, #2
   152de:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   152e0:	2300      	movs	r3, #0
   152e2:	60a3      	str	r3, [r4, #8]
}
   152e4:	bd10      	pop	{r4, pc}

000152e6 <z_unpend_thread>:
{
   152e6:	b538      	push	{r3, r4, r5, lr}
   152e8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   152ea:	2300      	movs	r3, #0
   152ec:	f04f 0240 	mov.w	r2, #64	; 0x40
   152f0:	f3ef 8511 	mrs	r5, BASEPRI
   152f4:	f382 8812 	msr	BASEPRI_MAX, r2
   152f8:	f3bf 8f6f 	isb	sy
   152fc:	e004      	b.n	15308 <z_unpend_thread+0x22>
	__asm__ volatile(
   152fe:	f385 8811 	msr	BASEPRI, r5
   15302:	f3bf 8f6f 	isb	sy
   15306:	2301      	movs	r3, #1
   15308:	b933      	cbnz	r3, 15318 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   1530a:	68a3      	ldr	r3, [r4, #8]
   1530c:	2b00      	cmp	r3, #0
   1530e:	d0f6      	beq.n	152fe <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   15310:	4620      	mov	r0, r4
   15312:	f7ff ffda 	bl	152ca <unpend_thread_no_timeout>
   15316:	e7f2      	b.n	152fe <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   15318:	f104 0018 	add.w	r0, r4, #24
   1531c:	f000 f956 	bl	155cc <z_abort_timeout>
}
   15320:	bd38      	pop	{r3, r4, r5, pc}

00015322 <z_priq_dumb_best>:
{
   15322:	4603      	mov	r3, r0
	return list->head == list;
   15324:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15326:	4283      	cmp	r3, r0
   15328:	d000      	beq.n	1532c <z_priq_dumb_best+0xa>
}
   1532a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1532c:	2000      	movs	r0, #0
	return thread;
   1532e:	e7fc      	b.n	1532a <z_priq_dumb_best+0x8>

00015330 <z_ready_thread>:
{
   15330:	b538      	push	{r3, r4, r5, lr}
   15332:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15334:	2300      	movs	r3, #0
	__asm__ volatile(
   15336:	f04f 0240 	mov.w	r2, #64	; 0x40
   1533a:	f3ef 8511 	mrs	r5, BASEPRI
   1533e:	f382 8812 	msr	BASEPRI_MAX, r2
   15342:	f3bf 8f6f 	isb	sy
   15346:	e004      	b.n	15352 <z_ready_thread+0x22>
	__asm__ volatile(
   15348:	f385 8811 	msr	BASEPRI, r5
   1534c:	f3bf 8f6f 	isb	sy
   15350:	2301      	movs	r3, #1
   15352:	b943      	cbnz	r3, 15366 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15354:	4620      	mov	r0, r4
   15356:	f7ff ff6e 	bl	15236 <thread_active_elsewhere>
   1535a:	2800      	cmp	r0, #0
   1535c:	d1f4      	bne.n	15348 <z_ready_thread+0x18>
			ready_thread(thread);
   1535e:	4620      	mov	r0, r4
   15360:	f7fb fec4 	bl	110ec <ready_thread>
   15364:	e7f0      	b.n	15348 <z_ready_thread+0x18>
}
   15366:	bd38      	pop	{r3, r4, r5, pc}

00015368 <z_sched_wake_thread>:
{
   15368:	b570      	push	{r4, r5, r6, lr}
   1536a:	4604      	mov	r4, r0
   1536c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   1536e:	2300      	movs	r3, #0
	__asm__ volatile(
   15370:	f04f 0240 	mov.w	r2, #64	; 0x40
   15374:	f3ef 8511 	mrs	r5, BASEPRI
   15378:	f382 8812 	msr	BASEPRI_MAX, r2
   1537c:	f3bf 8f6f 	isb	sy
   15380:	e007      	b.n	15392 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   15382:	4620      	mov	r0, r4
   15384:	f7fb feb2 	bl	110ec <ready_thread>
	__asm__ volatile(
   15388:	f385 8811 	msr	BASEPRI, r5
   1538c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15390:	2301      	movs	r3, #1
   15392:	b993      	cbnz	r3, 153ba <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   15394:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   15396:	f013 0f28 	tst.w	r3, #40	; 0x28
   1539a:	d1f5      	bne.n	15388 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   1539c:	68a3      	ldr	r3, [r4, #8]
   1539e:	b113      	cbz	r3, 153a6 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   153a0:	4620      	mov	r0, r4
   153a2:	f7ff ff92 	bl	152ca <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   153a6:	7b63      	ldrb	r3, [r4, #13]
   153a8:	f023 0204 	bic.w	r2, r3, #4
   153ac:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   153ae:	2e00      	cmp	r6, #0
   153b0:	d0e7      	beq.n	15382 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   153b2:	f023 0314 	bic.w	r3, r3, #20
   153b6:	7363      	strb	r3, [r4, #13]
}
   153b8:	e7e3      	b.n	15382 <z_sched_wake_thread+0x1a>
}
   153ba:	bd70      	pop	{r4, r5, r6, pc}

000153bc <z_thread_timeout>:
{
   153bc:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   153be:	2101      	movs	r1, #1
   153c0:	3818      	subs	r0, #24
   153c2:	f7ff ffd1 	bl	15368 <z_sched_wake_thread>
}
   153c6:	bd08      	pop	{r3, pc}

000153c8 <unpend_all>:
{
   153c8:	b538      	push	{r3, r4, r5, lr}
   153ca:	4605      	mov	r5, r0
	return list->head == list;
   153cc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   153ce:	42a5      	cmp	r5, r4
   153d0:	d00e      	beq.n	153f0 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   153d2:	b16c      	cbz	r4, 153f0 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   153d4:	4620      	mov	r0, r4
   153d6:	f7ff ff78 	bl	152ca <unpend_thread_no_timeout>
   153da:	f104 0018 	add.w	r0, r4, #24
   153de:	f000 f8f5 	bl	155cc <z_abort_timeout>
   153e2:	2300      	movs	r3, #0
   153e4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   153e8:	4620      	mov	r0, r4
   153ea:	f7fb fe7f 	bl	110ec <ready_thread>
   153ee:	e7ed      	b.n	153cc <unpend_all+0x4>
}
   153f0:	bd38      	pop	{r3, r4, r5, pc}

000153f2 <add_to_waitq_locked>:
{
   153f2:	b570      	push	{r4, r5, r6, lr}
   153f4:	4605      	mov	r5, r0
   153f6:	460e      	mov	r6, r1
	unready_thread(thread);
   153f8:	f7fb fed2 	bl	111a0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   153fc:	7b6b      	ldrb	r3, [r5, #13]
   153fe:	f043 0302 	orr.w	r3, r3, #2
   15402:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   15404:	b1fe      	cbz	r6, 15446 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   15406:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15408:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1540a:	42a6      	cmp	r6, r4
   1540c:	d108      	bne.n	15420 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1540e:	2400      	movs	r4, #0
   15410:	e006      	b.n	15420 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   15412:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15414:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15416:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15418:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1541a:	6065      	str	r5, [r4, #4]
}
   1541c:	e013      	b.n	15446 <add_to_waitq_locked+0x54>
   1541e:	2400      	movs	r4, #0
   15420:	b164      	cbz	r4, 1543c <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15422:	4621      	mov	r1, r4
   15424:	4628      	mov	r0, r5
   15426:	f7ff ff0a 	bl	1523e <z_sched_prio_cmp>
   1542a:	2800      	cmp	r0, #0
   1542c:	dcf1      	bgt.n	15412 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1542e:	2c00      	cmp	r4, #0
   15430:	d0f6      	beq.n	15420 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   15432:	6873      	ldr	r3, [r6, #4]
   15434:	429c      	cmp	r4, r3
   15436:	d0f2      	beq.n	1541e <add_to_waitq_locked+0x2c>
   15438:	6824      	ldr	r4, [r4, #0]
   1543a:	e7f1      	b.n	15420 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   1543c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1543e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   15440:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15442:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15444:	6075      	str	r5, [r6, #4]
}
   15446:	bd70      	pop	{r4, r5, r6, pc}

00015448 <pend_locked>:
{
   15448:	b570      	push	{r4, r5, r6, lr}
   1544a:	4604      	mov	r4, r0
   1544c:	4616      	mov	r6, r2
   1544e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   15450:	f7ff ffcf 	bl	153f2 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   15454:	4632      	mov	r2, r6
   15456:	462b      	mov	r3, r5
   15458:	4620      	mov	r0, r4
   1545a:	f7fb fd37 	bl	10ecc <add_thread_timeout>
}
   1545e:	bd70      	pop	{r4, r5, r6, pc}

00015460 <z_unpend1_no_timeout>:
{
   15460:	b570      	push	{r4, r5, r6, lr}
   15462:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   15464:	2300      	movs	r3, #0
	__asm__ volatile(
   15466:	f04f 0240 	mov.w	r2, #64	; 0x40
   1546a:	f3ef 8511 	mrs	r5, BASEPRI
   1546e:	f382 8812 	msr	BASEPRI_MAX, r2
   15472:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   15476:	461c      	mov	r4, r3
   15478:	e004      	b.n	15484 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   1547a:	f385 8811 	msr	BASEPRI, r5
   1547e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15482:	2301      	movs	r3, #1
   15484:	b943      	cbnz	r3, 15498 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   15486:	4630      	mov	r0, r6
   15488:	f7ff ff4b 	bl	15322 <z_priq_dumb_best>
		if (thread != NULL) {
   1548c:	4604      	mov	r4, r0
   1548e:	2800      	cmp	r0, #0
   15490:	d0f3      	beq.n	1547a <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   15492:	f7ff ff1a 	bl	152ca <unpend_thread_no_timeout>
   15496:	e7f0      	b.n	1547a <z_unpend1_no_timeout+0x1a>
}
   15498:	4620      	mov	r0, r4
   1549a:	bd70      	pop	{r4, r5, r6, pc}

0001549c <z_unpend_first_thread>:
{
   1549c:	b570      	push	{r4, r5, r6, lr}
   1549e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   154a0:	2300      	movs	r3, #0
	__asm__ volatile(
   154a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   154a6:	f3ef 8511 	mrs	r5, BASEPRI
   154aa:	f382 8812 	msr	BASEPRI_MAX, r2
   154ae:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   154b2:	461c      	mov	r4, r3
   154b4:	e004      	b.n	154c0 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   154b6:	f385 8811 	msr	BASEPRI, r5
   154ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   154be:	2301      	movs	r3, #1
   154c0:	b963      	cbnz	r3, 154dc <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   154c2:	4630      	mov	r0, r6
   154c4:	f7ff ff2d 	bl	15322 <z_priq_dumb_best>
		if (thread != NULL) {
   154c8:	4604      	mov	r4, r0
   154ca:	2800      	cmp	r0, #0
   154cc:	d0f3      	beq.n	154b6 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   154ce:	f7ff fefc 	bl	152ca <unpend_thread_no_timeout>
   154d2:	f104 0018 	add.w	r0, r4, #24
   154d6:	f000 f879 	bl	155cc <z_abort_timeout>
   154da:	e7ec      	b.n	154b6 <z_unpend_first_thread+0x1a>
}
   154dc:	4620      	mov	r0, r4
   154de:	bd70      	pop	{r4, r5, r6, pc}

000154e0 <z_unpend_all>:
{
   154e0:	b538      	push	{r3, r4, r5, lr}
   154e2:	4605      	mov	r5, r0
	int need_sched = 0;
   154e4:	2000      	movs	r0, #0
	return list->head == list;
   154e6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   154e8:	42a5      	cmp	r5, r4
   154ea:	d008      	beq.n	154fe <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   154ec:	b13c      	cbz	r4, 154fe <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   154ee:	4620      	mov	r0, r4
   154f0:	f7ff fef9 	bl	152e6 <z_unpend_thread>
		z_ready_thread(thread);
   154f4:	4620      	mov	r0, r4
   154f6:	f7ff ff1b 	bl	15330 <z_ready_thread>
		need_sched = 1;
   154fa:	2001      	movs	r0, #1
   154fc:	e7f3      	b.n	154e6 <z_unpend_all+0x6>
}
   154fe:	bd38      	pop	{r3, r4, r5, pc}

00015500 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   15500:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   15502:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   15504:	6083      	str	r3, [r0, #8]
}
   15506:	4770      	bx	lr

00015508 <z_sched_wake>:
{
   15508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1550c:	4606      	mov	r6, r0
   1550e:	4688      	mov	r8, r1
   15510:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   15512:	2300      	movs	r3, #0
	__asm__ volatile(
   15514:	f04f 0240 	mov.w	r2, #64	; 0x40
   15518:	f3ef 8511 	mrs	r5, BASEPRI
   1551c:	f382 8812 	msr	BASEPRI_MAX, r2
   15520:	f3bf 8f6f 	isb	sy
	bool ret = false;
   15524:	4699      	mov	r9, r3
   15526:	e004      	b.n	15532 <z_sched_wake+0x2a>
	__asm__ volatile(
   15528:	f385 8811 	msr	BASEPRI, r5
   1552c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15530:	2301      	movs	r3, #1
   15532:	b9a3      	cbnz	r3, 1555e <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   15534:	4630      	mov	r0, r6
   15536:	f7ff fef4 	bl	15322 <z_priq_dumb_best>
		if (thread != NULL) {
   1553a:	4604      	mov	r4, r0
   1553c:	2800      	cmp	r0, #0
   1553e:	d0f3      	beq.n	15528 <z_sched_wake+0x20>
   15540:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   15544:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   15546:	f7ff fec0 	bl	152ca <unpend_thread_no_timeout>
   1554a:	f104 0018 	add.w	r0, r4, #24
   1554e:	f000 f83d 	bl	155cc <z_abort_timeout>
			ready_thread(thread);
   15552:	4620      	mov	r0, r4
   15554:	f7fb fdca 	bl	110ec <ready_thread>
			ret = true;
   15558:	f04f 0901 	mov.w	r9, #1
   1555c:	e7e4      	b.n	15528 <z_sched_wake+0x20>
}
   1555e:	4648      	mov	r0, r9
   15560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015564 <remove_timeout>:
{
   15564:	b510      	push	{r4, lr}
   15566:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   15568:	f7fc f876 	bl	11658 <next>
   1556c:	b148      	cbz	r0, 15582 <remove_timeout+0x1e>
   1556e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   15570:	6903      	ldr	r3, [r0, #16]
   15572:	6941      	ldr	r1, [r0, #20]
   15574:	6920      	ldr	r0, [r4, #16]
   15576:	181b      	adds	r3, r3, r0
   15578:	6960      	ldr	r0, [r4, #20]
   1557a:	eb41 0100 	adc.w	r1, r1, r0
   1557e:	6113      	str	r3, [r2, #16]
   15580:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   15582:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   15584:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   15586:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15588:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1558a:	2300      	movs	r3, #0
   1558c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1558e:	6063      	str	r3, [r4, #4]
}
   15590:	bd10      	pop	{r4, pc}

00015592 <next_timeout>:
{
   15592:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   15594:	f7fc f856 	bl	11644 <first>
   15598:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1559a:	f7fc f869 	bl	11670 <elapsed>
	if ((to == NULL) ||
   1559e:	b17c      	cbz	r4, 155c0 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   155a0:	6923      	ldr	r3, [r4, #16]
   155a2:	6962      	ldr	r2, [r4, #20]
   155a4:	1a1b      	subs	r3, r3, r0
   155a6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   155aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   155ae:	f172 0100 	sbcs.w	r1, r2, #0
   155b2:	da08      	bge.n	155c6 <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   155b4:	2a00      	cmp	r2, #0
   155b6:	db01      	blt.n	155bc <next_timeout+0x2a>
   155b8:	4618      	mov	r0, r3
}
   155ba:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   155bc:	2300      	movs	r3, #0
   155be:	e7fb      	b.n	155b8 <next_timeout+0x26>
		ret = MAX_WAIT;
   155c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   155c4:	e7f9      	b.n	155ba <next_timeout+0x28>
   155c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   155ca:	e7f6      	b.n	155ba <next_timeout+0x28>

000155cc <z_abort_timeout>:
{
   155cc:	b570      	push	{r4, r5, r6, lr}
   155ce:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   155d0:	2300      	movs	r3, #0
	__asm__ volatile(
   155d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   155d6:	f3ef 8611 	mrs	r6, BASEPRI
   155da:	f382 8812 	msr	BASEPRI_MAX, r2
   155de:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   155e2:	f06f 0015 	mvn.w	r0, #21
   155e6:	e004      	b.n	155f2 <z_abort_timeout+0x26>
	__asm__ volatile(
   155e8:	f386 8811 	msr	BASEPRI, r6
   155ec:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   155f0:	2301      	movs	r3, #1
   155f2:	461d      	mov	r5, r3
   155f4:	b93b      	cbnz	r3, 15606 <z_abort_timeout+0x3a>
	return node->next != NULL;
   155f6:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   155f8:	2b00      	cmp	r3, #0
   155fa:	d0f5      	beq.n	155e8 <z_abort_timeout+0x1c>
			remove_timeout(to);
   155fc:	4620      	mov	r0, r4
   155fe:	f7ff ffb1 	bl	15564 <remove_timeout>
			ret = 0;
   15602:	4628      	mov	r0, r5
   15604:	e7f0      	b.n	155e8 <z_abort_timeout+0x1c>
}
   15606:	bd70      	pop	{r4, r5, r6, pc}

00015608 <z_get_next_timeout_expiry>:
{
   15608:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1560a:	2300      	movs	r3, #0
	__asm__ volatile(
   1560c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15610:	f3ef 8411 	mrs	r4, BASEPRI
   15614:	f382 8812 	msr	BASEPRI_MAX, r2
   15618:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1561c:	f04f 30ff 	mov.w	r0, #4294967295
   15620:	e006      	b.n	15630 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   15622:	f7ff ffb6 	bl	15592 <next_timeout>
	__asm__ volatile(
   15626:	f384 8811 	msr	BASEPRI, r4
   1562a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1562e:	2301      	movs	r3, #1
   15630:	2b00      	cmp	r3, #0
   15632:	d0f6      	beq.n	15622 <z_get_next_timeout_expiry+0x1a>
}
   15634:	bd10      	pop	{r4, pc}

00015636 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   15636:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   15638:	f7fc f90a 	bl	11850 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1563c:	bd08      	pop	{r3, pc}

0001563e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1563e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   15640:	f7fc f906 	bl	11850 <sys_clock_tick_get>
}
   15644:	bd08      	pop	{r3, pc}

00015646 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15646:	b900      	cbnz	r0, 1564a <z_impl_k_busy_wait+0x4>
   15648:	4770      	bx	lr
{
   1564a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1564c:	f7f7 f90a 	bl	c864 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15650:	bd08      	pop	{r3, pc}

00015652 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   15652:	b538      	push	{r3, r4, r5, lr}
   15654:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15656:	f1b1 3fff 	cmp.w	r1, #4294967295
   1565a:	bf08      	it	eq
   1565c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   15660:	d020      	beq.n	156a4 <sys_clock_timeout_end_calc+0x52>
   15662:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15664:	ea51 0300 	orrs.w	r3, r1, r0
   15668:	d009      	beq.n	1567e <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1566a:	f06f 0301 	mvn.w	r3, #1
   1566e:	1a18      	subs	r0, r3, r0
   15670:	f04f 33ff 	mov.w	r3, #4294967295
   15674:	eb63 0101 	sbc.w	r1, r3, r1
   15678:	2900      	cmp	r1, #0
   1567a:	db03      	blt.n	15684 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1567c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   1567e:	f7fc f8e7 	bl	11850 <sys_clock_tick_get>
   15682:	e7fb      	b.n	1567c <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   15684:	f7fc f8e4 	bl	11850 <sys_clock_tick_get>
   15688:	4603      	mov	r3, r0
   1568a:	462a      	mov	r2, r5
   1568c:	46a4      	mov	ip, r4
   1568e:	2d01      	cmp	r5, #1
   15690:	f174 0400 	sbcs.w	r4, r4, #0
   15694:	da02      	bge.n	1569c <sys_clock_timeout_end_calc+0x4a>
   15696:	2201      	movs	r2, #1
   15698:	f04f 0c00 	mov.w	ip, #0
   1569c:	1898      	adds	r0, r3, r2
   1569e:	eb41 010c 	adc.w	r1, r1, ip
   156a2:	e7eb      	b.n	1567c <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   156a4:	f04f 30ff 	mov.w	r0, #4294967295
   156a8:	4601      	mov	r1, r0
   156aa:	e7e7      	b.n	1567c <sys_clock_timeout_end_calc+0x2a>

000156ac <z_reschedule_unlocked>:
{
   156ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   156ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   156b2:	f3ef 8011 	mrs	r0, BASEPRI
   156b6:	f383 8812 	msr	BASEPRI_MAX, r3
   156ba:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   156be:	f7ff fde2 	bl	15286 <z_reschedule_irqlock>
}
   156c2:	bd08      	pop	{r3, pc}

000156c4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   156c4:	b510      	push	{r4, lr}
   156c6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   156c8:	f7ff ff80 	bl	155cc <z_abort_timeout>

	if (inactive) {
   156cc:	b960      	cbnz	r0, 156e8 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   156ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   156d0:	b10b      	cbz	r3, 156d6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   156d2:	4620      	mov	r0, r4
   156d4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   156d6:	f104 0018 	add.w	r0, r4, #24
   156da:	f7ff fec1 	bl	15460 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   156de:	b118      	cbz	r0, 156e8 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   156e0:	f7ff fe26 	bl	15330 <z_ready_thread>
			z_reschedule_unlocked();
   156e4:	f7ff ffe2 	bl	156ac <z_reschedule_unlocked>
		}
	}
}
   156e8:	bd10      	pop	{r4, pc}

000156ea <is_condition_met>:
	switch (event->type) {
   156ea:	7b43      	ldrb	r3, [r0, #13]
   156ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   156f0:	3b01      	subs	r3, #1
   156f2:	2b07      	cmp	r3, #7
   156f4:	d826      	bhi.n	15744 <is_condition_met+0x5a>
   156f6:	e8df f003 	tbb	[pc, r3]
   156fa:	0414      	.short	0x0414
   156fc:	25250d25 	.word	0x25250d25
   15700:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   15702:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   15704:	689b      	ldr	r3, [r3, #8]
   15706:	b90b      	cbnz	r3, 1570c <is_condition_met+0x22>
	return false;
   15708:	2000      	movs	r0, #0
   1570a:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1570c:	2302      	movs	r3, #2
   1570e:	600b      	str	r3, [r1, #0]
			return true;
   15710:	2001      	movs	r0, #1
   15712:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   15714:	6903      	ldr	r3, [r0, #16]
	return list->head;
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	b1b3      	cbz	r3, 15748 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1571a:	2304      	movs	r3, #4
   1571c:	600b      	str	r3, [r1, #0]
			return true;
   1571e:	2001      	movs	r0, #1
   15720:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   15722:	6903      	ldr	r3, [r0, #16]
   15724:	689b      	ldr	r3, [r3, #8]
   15726:	b90b      	cbnz	r3, 1572c <is_condition_met+0x42>
	return false;
   15728:	2000      	movs	r0, #0
   1572a:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   1572c:	2001      	movs	r0, #1
   1572e:	6008      	str	r0, [r1, #0]
			return true;
   15730:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   15732:	6903      	ldr	r3, [r0, #16]
   15734:	6a1b      	ldr	r3, [r3, #32]
   15736:	b90b      	cbnz	r3, 1573c <is_condition_met+0x52>
	return false;
   15738:	2000      	movs	r0, #0
}
   1573a:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1573c:	2310      	movs	r3, #16
   1573e:	600b      	str	r3, [r1, #0]
			return true;
   15740:	2001      	movs	r0, #1
   15742:	4770      	bx	lr
	switch (event->type) {
   15744:	2000      	movs	r0, #0
   15746:	4770      	bx	lr
	return false;
   15748:	2000      	movs	r0, #0
   1574a:	4770      	bx	lr

0001574c <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1574c:	b108      	cbz	r0, 15752 <poller_thread+0x6>
   1574e:	3860      	subs	r0, #96	; 0x60
   15750:	4770      	bx	lr
}
   15752:	4770      	bx	lr

00015754 <clear_event_registration>:
	event->poller = NULL;
   15754:	2300      	movs	r3, #0
   15756:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   15758:	7b43      	ldrb	r3, [r0, #13]
   1575a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1575e:	2b08      	cmp	r3, #8
   15760:	d80e      	bhi.n	15780 <clear_event_registration+0x2c>
   15762:	f44f 728b 	mov.w	r2, #278	; 0x116
   15766:	fa22 f303 	lsr.w	r3, r2, r3
   1576a:	f013 0f01 	tst.w	r3, #1
   1576e:	d007      	beq.n	15780 <clear_event_registration+0x2c>
   15770:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   15772:	b12b      	cbz	r3, 15780 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   15774:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   15776:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15778:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1577a:	2300      	movs	r3, #0
   1577c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1577e:	6043      	str	r3, [r0, #4]
}
   15780:	4770      	bx	lr

00015782 <clear_event_registrations>:
{
   15782:	b570      	push	{r4, r5, r6, lr}
   15784:	4606      	mov	r6, r0
   15786:	4614      	mov	r4, r2
	while (num_events--) {
   15788:	e012      	b.n	157b0 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   1578a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1578e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   15792:	f7ff ffdf 	bl	15754 <clear_event_registration>
	__asm__ volatile(
   15796:	f384 8811 	msr	BASEPRI, r4
   1579a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1579e:	f04f 0340 	mov.w	r3, #64	; 0x40
   157a2:	f3ef 8411 	mrs	r4, BASEPRI
   157a6:	f383 8812 	msr	BASEPRI_MAX, r3
   157aa:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   157ae:	4629      	mov	r1, r5
   157b0:	1e4d      	subs	r5, r1, #1
   157b2:	2900      	cmp	r1, #0
   157b4:	d1e9      	bne.n	1578a <clear_event_registrations+0x8>
}
   157b6:	bd70      	pop	{r4, r5, r6, pc}

000157b8 <add_event>:
{
   157b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157bc:	4605      	mov	r5, r0
   157be:	460e      	mov	r6, r1
	return list->head == list;
   157c0:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   157c2:	4298      	cmp	r0, r3
   157c4:	d015      	beq.n	157f2 <add_event+0x3a>
   157c6:	4614      	mov	r4, r2
   157c8:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   157ca:	b193      	cbz	r3, 157f2 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   157cc:	6898      	ldr	r0, [r3, #8]
   157ce:	f7ff ffbd 	bl	1574c <poller_thread>
   157d2:	4680      	mov	r8, r0
   157d4:	4620      	mov	r0, r4
   157d6:	f7ff ffb9 	bl	1574c <poller_thread>
   157da:	4607      	mov	r7, r0
   157dc:	4601      	mov	r1, r0
   157de:	4640      	mov	r0, r8
   157e0:	f7ff fd2d 	bl	1523e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   157e4:	2800      	cmp	r0, #0
   157e6:	dc04      	bgt.n	157f2 <add_event+0x3a>
	return list->head == list;
   157e8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157ea:	42a5      	cmp	r5, r4
   157ec:	d10f      	bne.n	1580e <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   157ee:	2400      	movs	r4, #0
   157f0:	e00d      	b.n	1580e <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   157f2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   157f4:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   157f6:	6073      	str	r3, [r6, #4]
	tail->next = node;
   157f8:	601e      	str	r6, [r3, #0]
	list->tail = node;
   157fa:	606e      	str	r6, [r5, #4]
}
   157fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   15800:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15802:	6073      	str	r3, [r6, #4]
	node->next = successor;
   15804:	6034      	str	r4, [r6, #0]
	prev->next = node;
   15806:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   15808:	6066      	str	r6, [r4, #4]
			return;
   1580a:	e7f7      	b.n	157fc <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1580c:	2400      	movs	r4, #0
   1580e:	b19c      	cbz	r4, 15838 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   15810:	68a0      	ldr	r0, [r4, #8]
   15812:	f7ff ff9b 	bl	1574c <poller_thread>
   15816:	4601      	mov	r1, r0
   15818:	4638      	mov	r0, r7
   1581a:	f7ff fd10 	bl	1523e <z_sched_prio_cmp>
   1581e:	2800      	cmp	r0, #0
   15820:	dcee      	bgt.n	15800 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15822:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   15824:	686b      	ldr	r3, [r5, #4]
   15826:	429c      	cmp	r4, r3
   15828:	d0f0      	beq.n	1580c <add_event+0x54>
   1582a:	6824      	ldr	r4, [r4, #0]
   1582c:	2c00      	cmp	r4, #0
   1582e:	d0ee      	beq.n	1580e <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15830:	2a00      	cmp	r2, #0
   15832:	d1ec      	bne.n	1580e <add_event+0x56>
   15834:	4614      	mov	r4, r2
   15836:	e7ea      	b.n	1580e <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   15838:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1583a:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   1583c:	6073      	str	r3, [r6, #4]
	tail->next = node;
   1583e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15840:	606e      	str	r6, [r5, #4]
}
   15842:	e7db      	b.n	157fc <add_event+0x44>

00015844 <register_event>:
{
   15844:	b538      	push	{r3, r4, r5, lr}
   15846:	4604      	mov	r4, r0
   15848:	460d      	mov	r5, r1
	switch (event->type) {
   1584a:	7b43      	ldrb	r3, [r0, #13]
   1584c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15850:	3b01      	subs	r3, #1
   15852:	2b07      	cmp	r3, #7
   15854:	d80b      	bhi.n	1586e <register_event+0x2a>
   15856:	e8df f003 	tbb	[pc, r3]
   1585a:	0413      	.short	0x0413
   1585c:	0a0a0c0a 	.word	0x0a0a0c0a
   15860:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   15862:	6900      	ldr	r0, [r0, #16]
   15864:	460a      	mov	r2, r1
   15866:	4621      	mov	r1, r4
   15868:	3010      	adds	r0, #16
   1586a:	f7ff ffa5 	bl	157b8 <add_event>
	event->poller = poller;
   1586e:	60a5      	str	r5, [r4, #8]
}
   15870:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   15872:	6900      	ldr	r0, [r0, #16]
   15874:	460a      	mov	r2, r1
   15876:	4621      	mov	r1, r4
   15878:	3010      	adds	r0, #16
   1587a:	f7ff ff9d 	bl	157b8 <add_event>
		break;
   1587e:	e7f6      	b.n	1586e <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   15880:	460a      	mov	r2, r1
   15882:	4601      	mov	r1, r0
   15884:	6900      	ldr	r0, [r0, #16]
   15886:	f7ff ff97 	bl	157b8 <add_event>
		break;
   1588a:	e7f0      	b.n	1586e <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   1588c:	6900      	ldr	r0, [r0, #16]
   1588e:	460a      	mov	r2, r1
   15890:	4621      	mov	r1, r4
   15892:	3024      	adds	r0, #36	; 0x24
   15894:	f7ff ff90 	bl	157b8 <add_event>
		break;
   15898:	e7e9      	b.n	1586e <register_event+0x2a>

0001589a <register_events>:
{
   1589a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1589e:	b083      	sub	sp, #12
   158a0:	4680      	mov	r8, r0
   158a2:	460f      	mov	r7, r1
   158a4:	4691      	mov	r9, r2
   158a6:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   158a8:	2500      	movs	r5, #0
	int events_registered = 0;
   158aa:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   158ac:	e00a      	b.n	158c4 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   158ae:	f1ba 0f00 	cmp.w	sl, #0
   158b2:	d102      	bne.n	158ba <register_events+0x20>
   158b4:	f899 3000 	ldrb.w	r3, [r9]
   158b8:	bb2b      	cbnz	r3, 15906 <register_events+0x6c>
	__asm__ volatile(
   158ba:	f386 8811 	msr	BASEPRI, r6
   158be:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   158c2:	3501      	adds	r5, #1
   158c4:	42bd      	cmp	r5, r7
   158c6:	da25      	bge.n	15914 <register_events+0x7a>
	__asm__ volatile(
   158c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   158cc:	f3ef 8611 	mrs	r6, BASEPRI
   158d0:	f383 8812 	msr	BASEPRI_MAX, r3
   158d4:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   158d8:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   158dc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   158e0:	a901      	add	r1, sp, #4
   158e2:	4620      	mov	r0, r4
   158e4:	f7ff ff01 	bl	156ea <is_condition_met>
   158e8:	2800      	cmp	r0, #0
   158ea:	d0e0      	beq.n	158ae <register_events+0x14>
	event->poller = NULL;
   158ec:	2100      	movs	r1, #0
   158ee:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   158f0:	68e3      	ldr	r3, [r4, #12]
   158f2:	f3c3 3286 	ubfx	r2, r3, #14, #7
   158f6:	9801      	ldr	r0, [sp, #4]
   158f8:	4302      	orrs	r2, r0
   158fa:	f362 3394 	bfi	r3, r2, #14, #7
   158fe:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   15900:	f889 1000 	strb.w	r1, [r9]
   15904:	e7d9      	b.n	158ba <register_events+0x20>
			register_event(&events[ii], poller);
   15906:	4649      	mov	r1, r9
   15908:	4620      	mov	r0, r4
   1590a:	f7ff ff9b 	bl	15844 <register_event>
			events_registered += 1;
   1590e:	f10b 0b01 	add.w	fp, fp, #1
   15912:	e7d2      	b.n	158ba <register_events+0x20>
}
   15914:	4658      	mov	r0, fp
   15916:	b003      	add	sp, #12
   15918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001591c <signal_poller>:
{
   1591c:	b538      	push	{r3, r4, r5, lr}
   1591e:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   15920:	6880      	ldr	r0, [r0, #8]
   15922:	f7ff ff13 	bl	1574c <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   15926:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   15928:	f013 0f02 	tst.w	r3, #2
   1592c:	d025      	beq.n	1597a <signal_poller+0x5e>
   1592e:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   15930:	6a82      	ldr	r2, [r0, #40]	; 0x28
   15932:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   15934:	f1b3 3fff 	cmp.w	r3, #4294967295
   15938:	bf08      	it	eq
   1593a:	f112 0f02 	cmneq.w	r2, #2
   1593e:	d01e      	beq.n	1597e <signal_poller+0x62>
	z_unpend_thread(thread);
   15940:	f7ff fcd1 	bl	152e6 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   15944:	2d08      	cmp	r5, #8
   15946:	d00a      	beq.n	1595e <signal_poller+0x42>
   15948:	2300      	movs	r3, #0
   1594a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   1594e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15950:	f013 0f1f 	tst.w	r3, #31
   15954:	d108      	bne.n	15968 <signal_poller+0x4c>
	return node->next != NULL;
   15956:	69a3      	ldr	r3, [r4, #24]
   15958:	b123      	cbz	r3, 15964 <signal_poller+0x48>
   1595a:	2300      	movs	r3, #0
   1595c:	e005      	b.n	1596a <signal_poller+0x4e>
   1595e:	f06f 0303 	mvn.w	r3, #3
   15962:	e7f2      	b.n	1594a <signal_poller+0x2e>
   15964:	2301      	movs	r3, #1
   15966:	e000      	b.n	1596a <signal_poller+0x4e>
   15968:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   1596a:	b90b      	cbnz	r3, 15970 <signal_poller+0x54>
		return 0;
   1596c:	2000      	movs	r0, #0
   1596e:	e005      	b.n	1597c <signal_poller+0x60>
	z_ready_thread(thread);
   15970:	4620      	mov	r0, r4
   15972:	f7ff fcdd 	bl	15330 <z_ready_thread>
	return 0;
   15976:	2000      	movs	r0, #0
   15978:	e000      	b.n	1597c <signal_poller+0x60>
		return 0;
   1597a:	2000      	movs	r0, #0
}
   1597c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1597e:	f06f 000a 	mvn.w	r0, #10
   15982:	e7fb      	b.n	1597c <signal_poller+0x60>

00015984 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   15984:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   15986:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   15988:	7823      	ldrb	r3, [r4, #0]
   1598a:	b173      	cbz	r3, 159aa <signal_triggered_work+0x26>
   1598c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   15990:	b15d      	cbz	r5, 159aa <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   15992:	f1a4 0614 	sub.w	r6, r4, #20
   15996:	f104 0014 	add.w	r0, r4, #20
   1599a:	f7ff fe17 	bl	155cc <z_abort_timeout>
		twork->poll_result = 0;
   1599e:	2300      	movs	r3, #0
   159a0:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   159a2:	4631      	mov	r1, r6
   159a4:	4628      	mov	r0, r5
   159a6:	f7ff fc21 	bl	151ec <z_work_submit_to_queue>
	}

	return 0;
}
   159aa:	2000      	movs	r0, #0
   159ac:	bd70      	pop	{r4, r5, r6, pc}

000159ae <signal_poll_event>:
{
   159ae:	b570      	push	{r4, r5, r6, lr}
   159b0:	4604      	mov	r4, r0
   159b2:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   159b4:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   159b6:	b1d6      	cbz	r6, 159ee <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   159b8:	7873      	ldrb	r3, [r6, #1]
   159ba:	2b01      	cmp	r3, #1
   159bc:	d00d      	beq.n	159da <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   159be:	2b02      	cmp	r3, #2
   159c0:	d012      	beq.n	159e8 <signal_poll_event+0x3a>
		poller->is_polling = false;
   159c2:	2000      	movs	r0, #0
   159c4:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   159c6:	2300      	movs	r3, #0
   159c8:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   159ca:	68e3      	ldr	r3, [r4, #12]
   159cc:	f3c3 3286 	ubfx	r2, r3, #14, #7
   159d0:	432a      	orrs	r2, r5
   159d2:	f362 3394 	bfi	r3, r2, #14, #7
   159d6:	60e3      	str	r3, [r4, #12]
}
   159d8:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   159da:	f7ff ff9f 	bl	1591c <signal_poller>
		poller->is_polling = false;
   159de:	2300      	movs	r3, #0
   159e0:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   159e2:	4298      	cmp	r0, r3
   159e4:	daef      	bge.n	159c6 <signal_poll_event+0x18>
   159e6:	e7f7      	b.n	159d8 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   159e8:	f7ff ffcc 	bl	15984 <signal_triggered_work>
   159ec:	e7f7      	b.n	159de <signal_poll_event+0x30>
	int retcode = 0;
   159ee:	2000      	movs	r0, #0
   159f0:	e7e9      	b.n	159c6 <signal_poll_event+0x18>

000159f2 <z_handle_obj_poll_events>:
{
   159f2:	b508      	push	{r3, lr}
   159f4:	4603      	mov	r3, r0
	return list->head == list;
   159f6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   159f8:	4283      	cmp	r3, r0
   159fa:	d008      	beq.n	15a0e <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   159fc:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   159fe:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   15a00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15a02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15a04:	2300      	movs	r3, #0
   15a06:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15a08:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   15a0a:	f7ff ffd0 	bl	159ae <signal_poll_event>
}
   15a0e:	bd08      	pop	{r3, pc}

00015a10 <z_heap_aligned_alloc>:
{
   15a10:	b5d0      	push	{r4, r6, r7, lr}
   15a12:	b082      	sub	sp, #8
   15a14:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   15a16:	2300      	movs	r3, #0
   15a18:	3204      	adds	r2, #4
   15a1a:	d20e      	bcs.n	15a3a <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   15a1c:	b97b      	cbnz	r3, 15a3e <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   15a1e:	2600      	movs	r6, #0
   15a20:	2700      	movs	r7, #0
   15a22:	e9cd 6700 	strd	r6, r7, [sp]
   15a26:	f041 0104 	orr.w	r1, r1, #4
   15a2a:	4620      	mov	r0, r4
   15a2c:	f7ff f9dc 	bl	14de8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   15a30:	b108      	cbz	r0, 15a36 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   15a32:	f840 4b04 	str.w	r4, [r0], #4
}
   15a36:	b002      	add	sp, #8
   15a38:	bdd0      	pop	{r4, r6, r7, pc}
   15a3a:	2301      	movs	r3, #1
   15a3c:	e7ee      	b.n	15a1c <z_heap_aligned_alloc+0xc>
		return NULL;
   15a3e:	2000      	movs	r0, #0
   15a40:	e7f9      	b.n	15a36 <z_heap_aligned_alloc+0x26>

00015a42 <k_free>:
	if (ptr != NULL) {
   15a42:	b130      	cbz	r0, 15a52 <k_free+0x10>
{
   15a44:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   15a46:	1f01      	subs	r1, r0, #4
   15a48:	f850 0c04 	ldr.w	r0, [r0, #-4]
   15a4c:	f7ff fa22 	bl	14e94 <k_heap_free>
}
   15a50:	bd08      	pop	{r3, pc}
   15a52:	4770      	bx	lr

00015a54 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   15a54:	4770      	bx	lr
	...
