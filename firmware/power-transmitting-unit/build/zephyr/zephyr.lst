
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 46 00 20 f1 c3 00 00 47 2a 01 00 a9 c3 00 00     .F. ....G*......
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	a9 c3 00 00 a9 c3 00 00 a9 c3 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	59 bf 00 00 a9 c3 00 00 00 00 00 00 01 bf 00 00     Y...............
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	a9 c3 00 00                                         ....

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	31 c0 00 00 ef 47 01 00 31 c0 00 00 31 c0 00 00     1....G..1...1...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	b7 47 01 00 31 c0 00 00 31 c0 00 00 d5 47 01 00     .G..1...1....G..
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	31 c0 00 00 31 c0 00 00 31 c0 00 00 31 c0 00 00     1...1...1...1...
				parsing = false;
  d0:	31 c0 00 00 31 c0 00 00 31 c0 00 00                 1...1...1...

Disassembly of section text:

000000dc <__aeabi_drsub>:
				if (*fmt == '%') {
      dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
					arg_idx++;
      e0:	e002      	b.n	e8 <__adddf3>
      e2:	bf00      	nop

000000e4 <__aeabi_dsub>:
					parsing = true;
      e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000e8 <__adddf3>:
					align = VA_STACK_ALIGN(int);
      e8:	b530      	push	{r4, r5, lr}
					size = sizeof(int);
      ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
			switch (*fmt) {
      ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f2:	ea94 0f05 	teq	r4, r5
      f6:	bf08      	it	eq
      f8:	ea90 0f02 	teqeq	r0, r2
      fc:	bf1f      	itttt	ne
      fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     102:	ea55 0c02 	orrsne.w	ip, r5, r2
     106:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     10e:	f000 80e2 	beq.w	2d6 <CONFIG_FLASH_SIZE+0xd6>
     112:	ea4f 5454 	mov.w	r4, r4, lsr #21
     116:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
				parsing = false;
     11a:	bfb8      	it	lt
			switch (*fmt) {
     11c:	426d      	neglt	r5, r5
     11e:	dd0c      	ble.n	13a <CONFIG_KOBJECT_TEXT_AREA+0x3a>
				arg_idx--;
     120:	442c      	add	r4, r5
     122:	ea80 0202 	eor.w	r2, r0, r2
				continue;
     126:	ea81 0303 	eor.w	r3, r1, r3
				parsing = false;
     12a:	ea82 0000 	eor.w	r0, r2, r0
			switch (*fmt) {
     12e:	ea83 0101 	eor.w	r1, r3, r1
     132:	ea80 0202 	eor.w	r2, r0, r2
				parsing = false;
     136:	ea81 0303 	eor.w	r3, r1, r3
			if (*++fmt == '\0') {
     13a:	2d36      	cmp	r5, #54	; 0x36
     13c:	bf88      	it	hi
     13e:	bd30      	pophi	{r4, r5, pc}
     140:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
			if (!parsing) {
     144:	ea4f 3101 	mov.w	r1, r1, lsl #12
			switch (*fmt) {
     148:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     14c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     150:	d002      	beq.n	158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     152:	4240      	negs	r0, r0
     154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     158:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     15c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     160:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     164:	d002      	beq.n	16c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x22>
     166:	4252      	negs	r2, r2
     168:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16c:	ea94 0f05 	teq	r4, r5
     170:	f000 80a7 	beq.w	2c2 <CONFIG_FLASH_SIZE+0xc2>
     174:	f1a4 0401 	sub.w	r4, r4, #1
     178:	f1d5 0e20 	rsbs	lr, r5, #32
     17c:	db0d      	blt.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     17e:	fa02 fc0e 	lsl.w	ip, r2, lr
     182:	fa22 f205 	lsr.w	r2, r2, r5
     186:	1880      	adds	r0, r0, r2
     188:	f141 0100 	adc.w	r1, r1, #0
     18c:	fa03 f20e 	lsl.w	r2, r3, lr
     190:	1880      	adds	r0, r0, r2
     192:	fa43 f305 	asr.w	r3, r3, r5
     196:	4159      	adcs	r1, r3
     198:	e00e      	b.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     19a:	f1a5 0520 	sub.w	r5, r5, #32
     19e:	f10e 0e20 	add.w	lr, lr, #32
     1a2:	2a01      	cmp	r2, #1
     1a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     1a8:	bf28      	it	cs
     1aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     1ae:	fa43 f305 	asr.w	r3, r3, r5
     1b2:	18c0      	adds	r0, r0, r3
     1b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1bc:	d507      	bpl.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1be:	f04f 0e00 	mov.w	lr, #0
     1c2:	f1dc 0c00 	rsbs	ip, ip, #0
     1c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ca:	eb6e 0101 	sbc.w	r1, lr, r1
     1ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d2:	d31b      	bcc.n	20c <CONFIG_FLASH_SIZE+0xc>
     1d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1d8:	d30c      	bcc.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
     1da:	0849      	lsrs	r1, r1, #1
     1dc:	ea5f 0030 	movs.w	r0, r0, rrx
     1e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e4:	f104 0401 	add.w	r4, r4, #1
     1e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f0:	f080 809a 	bcs.w	328 <CONFIG_FLASH_SIZE+0x128>
     1f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1f8:	bf08      	it	eq
     1fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1fe:	f150 0000 	adcs.w	r0, r0, #0
     202:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     206:	ea41 0105 	orr.w	r1, r1, r5
     20a:	bd30      	pop	{r4, r5, pc}
     20c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     210:	4140      	adcs	r0, r0
     212:	eb41 0101 	adc.w	r1, r1, r1
     216:	3c01      	subs	r4, #1
				parsing = false;
     218:	bf28      	it	cs
     21a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
				align = VA_STACK_ALIGN(size_t);
     21e:	d2e9      	bcs.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
				size = sizeof(size_t);
     220:	f091 0f00 	teq	r1, #0
				align = VA_STACK_ALIGN(ptrdiff_t);
     224:	bf04      	itt	eq
     226:	4601      	moveq	r1, r0
				size = sizeof(ptrdiff_t);
     228:	2000      	moveq	r0, #0
				continue;
     22a:	fab1 f381 	clz	r3, r1
				if (fmt[-1] == 'l') {
     22e:	bf08      	it	eq
     230:	3320      	addeq	r3, #32
				parsing = false;
     232:	f1a3 030b 	sub.w	r3, r3, #11
		buf = (void *) ROUND_UP(buf, align);
     236:	f1b3 0220 	subs.w	r2, r3, #32
     23a:	da0c      	bge.n	256 <CONFIG_FLASH_SIZE+0x56>
     23c:	320c      	adds	r2, #12
     23e:	dd08      	ble.n	252 <CONFIG_FLASH_SIZE+0x52>
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	f102 0c14 	add.w	ip, r2, #20
     244:	f1c2 020c 	rsb	r2, r2, #12
     248:	fa01 f00c 	lsl.w	r0, r1, ip
		if (is_str_arg) {
     24c:	fa21 f102 	lsr.w	r1, r1, r2
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     250:	e00c      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     252:	f102 0214 	add.w	r2, r2, #20
     256:	bfd8      	it	le

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	f1c2 0c20 	rsble	ip, r2, #32
     25c:	fa01 f102 	lsl.w	r1, r1, r2
			long long v = va_arg(ap, long long);
     260:	fa20 fc0c 	lsr.w	ip, r0, ip
     264:	bfdc      	itt	le
     266:	ea41 010c 	orrle.w	r1, r1, ip
     26a:	4090      	lslle	r0, r2
     26c:	1ae4      	subs	r4, r4, r3
     26e:	bfa2      	ittt	ge
     270:	eb01 5104 	addge.w	r1, r1, r4, lsl #20

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     274:	4329      	orrge	r1, r5
     276:	bd30      	popge	{r4, r5, pc}
				}
			}
			buf += sizeof(long long);
     278:	ea6f 0404 	mvn.w	r4, r4
					if (fmt[-2] == 'l') {
     27c:	3c1f      	subs	r4, #31
     27e:	da1c      	bge.n	2ba <CONFIG_FLASH_SIZE+0xba>
     280:	340c      	adds	r4, #12
     282:	dc0e      	bgt.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
				parsing = false;
     284:	f104 0414 	add.w	r4, r4, #20
						align = VA_STACK_ALIGN(long);
     288:	f1c4 0220 	rsb	r2, r4, #32
						size = sizeof(long);
     28c:	fa20 f004 	lsr.w	r0, r0, r4
						align = VA_STACK_ALIGN(long long);
     290:	fa01 f302 	lsl.w	r3, r1, r2
						size = sizeof(long long);
     294:	ea40 0003 	orr.w	r0, r0, r3
				if (fmt[-1] == 'L') {
     298:	fa21 f304 	lsr.w	r3, r1, r4
     29c:	ea45 0103 	orr.w	r1, r5, r3
					v.d = va_arg(ap, double);
     2a0:	bd30      	pop	{r4, r5, pc}
     2a2:	f1c4 040c 	rsb	r4, r4, #12
     2a6:	f1c4 0220 	rsb	r2, r4, #32
     2aa:	fa20 f002 	lsr.w	r0, r0, r2
     2ae:	fa01 f304 	lsl.w	r3, r1, r4
				buf = (void *) ROUND_UP(buf, align);
     2b2:	ea40 0003 	orr.w	r0, r0, r3
				if (buf0 != NULL) {
     2b6:	4629      	mov	r1, r5
					if (BUF_OFFSET + size > len) {
     2b8:	bd30      	pop	{r4, r5, pc}
     2ba:	fa21 f004 	lsr.w	r0, r1, r4
     2be:	4629      	mov	r1, r5
					} else if (fmt[-1] == 'L') {
     2c0:	bd30      	pop	{r4, r5, pc}
     2c2:	f094 0f00 	teq	r4, #0
						*(double *)buf = v.d;
     2c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
				buf += size;
     2ca:	bf06      	itte	eq
				parsing = false;
     2cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
				continue;
     2d0:	3401      	addeq	r4, #1
     2d2:	3d01      	subne	r5, #1
     2d4:	e74e      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
					v.ld = va_arg(ap, long double);
     2d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2da:	bf18      	it	ne
     2dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e0:	d029      	beq.n	336 <CONFIG_FLASH_SIZE+0x136>
     2e2:	ea94 0f05 	teq	r4, r5
     2e6:	bf08      	it	eq
					size = sizeof(long double);
     2e8:	ea90 0f02 	teqeq	r0, r2
						return -ENOSPC;
     2ec:	d005      	beq.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2ee:	ea54 0c00 	orrs.w	ip, r4, r0
						*(long double *)buf = v.ld;
     2f2:	bf04      	itt	eq
     2f4:	4619      	moveq	r1, r3
				parsing = false;
     2f6:	4610      	moveq	r0, r2
				align = VA_STACK_ALIGN(void *);
     2f8:	bd30      	pop	{r4, r5, pc}
     2fa:	ea91 0f03 	teq	r1, r3
				size = sizeof(void *);
     2fe:	bf1e      	ittt	ne
				is_str_arg = true;
     300:	2100      	movne	r1, #0
				parsing = false;
     302:	2000      	movne	r0, #0
				align = VA_STACK_ALIGN(void *);
     304:	bd30      	popne	{r4, r5, pc}
     306:	ea5f 5c54 	movs.w	ip, r4, lsr #21
				size = sizeof(void *);
     30a:	d105      	bne.n	318 <CONFIG_FLASH_SIZE+0x118>
			s = va_arg(ap, char *);
     30c:	0040      	lsls	r0, r0, #1
     30e:	4149      	adcs	r1, r1
     310:	bf28      	it	cs
     312:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     316:	bd30      	pop	{r4, r5, pc}
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     318:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
			if (*++fmt == '\0') {
     31c:	bf3c      	itt	cc
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     31e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     322:	bd30      	popcc	{r4, r5, pc}
     324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     328:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     32c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     330:	f04f 0000 	mov.w	r0, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     334:	bd30      	pop	{r4, r5, pc}
     336:	ea7f 5c64 	mvns.w	ip, r4, asr #21
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     33a:	bf1a      	itte	ne
     33c:	4619      	movne	r1, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	4610      	movne	r0, r2
     340:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     344:	bf1c      	itt	ne
						s_rw_cnt++;
     346:	460b      	movne	r3, r1
     348:	4602      	movne	r2, r0
     34a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
				} else if (is_ro) {
     34e:	bf06      	itte	eq
					len += 1;
     350:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     354:	ea91 0f03 	teqeq	r1, r3
				} else if (rws_pos_en) {
     358:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
					len += 2;
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	bf00      	nop

00000360 <__aeabi_ui2d>:
					len += strlen(s) + 1 + 1;
     360:	f090 0f00 	teq	r0, #0
     364:	bf04      	itt	eq
     366:	2100      	moveq	r1, #0
     368:	4770      	bxeq	lr
     36a:	b530      	push	{r4, r5, lr}
			int v = va_arg(ap, int);
     36c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     370:	f104 0432 	add.w	r4, r4, #50	; 0x32
			if (buf0 != NULL) {
     374:	f04f 0500 	mov.w	r5, #0
			buf += sizeof(int);
     378:	f04f 0100 	mov.w	r1, #0
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     37c:	e750      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     37e:	bf00      	nop

00000380 <__aeabi_i2d>:
     380:	f090 0f00 	teq	r0, #0
     384:	bf04      	itt	eq

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     386:	2100      	moveq	r1, #0
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     388:	4770      	bxeq	lr
     38a:	b530      	push	{r4, r5, lr}

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     38c:	f44f 6480 	mov.w	r4, #1024	; 0x400

	if (rws_pos_en) {
     390:	f104 0432 	add.w	r4, r4, #50	; 0x32
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     394:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     398:	bf48      	it	mi
     39a:	4240      	negmi	r0, r0
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     39c:	f04f 0100 	mov.w	r1, #0
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     3a0:	e73e      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     3a2:	bf00      	nop

000003a4 <__aeabi_f2d>:
     3a4:	0042      	lsls	r2, r0, #1
     3a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3aa:	ea4f 0131 	mov.w	r1, r1, rrx
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b2:	bf1f      	itttt	ne
     3b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
		for (i = 0; i < s_idx; i++) {
     3bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c0:	4770      	bxne	lr
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3c6:	bf08      	it	eq
     3c8:	4770      	bxeq	lr
     3ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3ce:	bf04      	itt	eq
     3d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3d4:	4770      	bxeq	lr
     3d6:	b530      	push	{r4, r5, lr}
			if (BUF_OFFSET + 1 > len) {
     3d8:	f44f 7460 	mov.w	r4, #896	; 0x380
     3dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
			*buf++ = pos;
     3e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e4:	e71c      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
		for (i = 0; i < s_idx; i++) {
     3e6:	bf00      	nop

000003e8 <__aeabi_ul2d>:
     3e8:	ea50 0201 	orrs.w	r2, r0, r1
		if (rws_pos_en) {
     3ec:	bf08      	it	eq
     3ee:	4770      	bxeq	lr
			*buf++ = str_ptr_arg[i];
     3f0:	b530      	push	{r4, r5, lr}
     3f2:	f04f 0500 	mov.w	r5, #0
     3f6:	e00a      	b.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>

000003f8 <__aeabi_l2d>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
			size = 0;
     3fe:	4770      	bxeq	lr
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     400:	b530      	push	{r4, r5, lr}
     402:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     406:	d502      	bpl.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>
     408:	4240      	negs	r0, r0
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     40a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     40e:	f44f 6480 	mov.w	r4, #1024	; 0x400
     412:	f104 0432 	add.w	r4, r4, #50	; 0x32
     416:	ea5f 5c91 	movs.w	ip, r1, lsr #22
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     41a:	f43f aed8 	beq.w	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     41e:	f04f 0203 	mov.w	r2, #3
		buf += size;
     422:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
	for (i = 0; i < s_idx; i++) {
     426:	bf18      	it	ne
     428:	3203      	addne	r2, #3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     42a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42e:	bf18      	it	ne
     430:	3203      	addne	r2, #3
     432:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     436:	f1c2 0320 	rsb	r3, r2, #32
     43a:	fa00 fc03 	lsl.w	ip, r0, r3
     43e:	fa20 f002 	lsr.w	r0, r0, r2
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     442:	fa01 fe03 	lsl.w	lr, r1, r3
     446:	ea40 000e 	orr.w	r0, r0, lr
     44a:	fa21 f102 	lsr.w	r1, r1, r2
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     44e:	4414      	add	r4, r2
     450:	e6bd      	b.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     452:	bf00      	nop

00000454 <__aeabi_dmul>:
			size = strlen(s) + 1;
     454:	b570      	push	{r4, r5, r6, lr}
     456:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     45e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     462:	bf1d      	ittte	ne
     464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
		return -EFAULT;
     468:	ea94 0f0c 	teqne	r4, ip
		return -ENOSPC;
     46c:	ea95 0f0c 	teqne	r5, ip
     470:	f000 f8de 	bleq	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
			return -ENOSPC;
     474:	442c      	add	r4, r5
     476:	ea81 0603 	eor.w	r6, r1, r3
					return -EINVAL;
     47a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
					return -EINVAL;
     47e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     482:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
			return -EINVAL;
     486:	bf18      	it	ne
     488:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
		return -EINVAL;
     48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
				return -ENOSPC;
     490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     494:	d038      	beq.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
			return -ENOSPC;
     496:	fba0 ce02 	umull	ip, lr, r0, r2
     49a:	f04f 0500 	mov.w	r5, #0
     49e:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4a6:	fbe0 e503 	umlal	lr, r5, r0, r3
     4aa:	f04f 0600 	mov.w	r6, #0
     4ae:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b2:	f09c 0f00 	teq	ip, #0
     4b6:	bf18      	it	ne
     4b8:	f04e 0e01 	orrne.w	lr, lr, #1
     4bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4c8:	d204      	bcs.n	4d4 <__data_size+0x5c>
     4ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4ce:	416d      	adcs	r5, r5
     4d0:	eb46 0606 	adc.w	r6, r6, r6
     4d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4ec:	bf88      	it	hi
     4ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f2:	d81e      	bhi.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     4f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4f8:	bf08      	it	eq
     4fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     4fe:	f150 0000 	adcs.w	r0, r0, #0
     502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     506:	bd70      	pop	{r4, r5, r6, pc}
     508:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     50c:	ea46 0101 	orr.w	r1, r6, r1
     510:	ea40 0002 	orr.w	r0, r0, r2
     514:	ea81 0103 	eor.w	r1, r1, r3
     518:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     51c:	bfc2      	ittt	gt
     51e:	ebd4 050c 	rsbsgt	r5, r4, ip
     522:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     526:	bd70      	popgt	{r4, r5, r6, pc}
     528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     52c:	f04f 0e00 	mov.w	lr, #0
     530:	3c01      	subs	r4, #1
     532:	f300 80ab 	bgt.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     536:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53a:	bfde      	ittt	le
     53c:	2000      	movle	r0, #0
     53e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     542:	bd70      	pople	{r4, r5, r6, pc}
     544:	f1c4 0400 	rsb	r4, r4, #0
     548:	3c20      	subs	r4, #32
     54a:	da35      	bge.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
     54c:	340c      	adds	r4, #12
     54e:	dc1b      	bgt.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
     550:	f104 0414 	add.w	r4, r4, #20
     554:	f1c4 0520 	rsb	r5, r4, #32
     558:	fa00 f305 	lsl.w	r3, r0, r5
     55c:	fa20 f004 	lsr.w	r0, r0, r4
     560:	fa01 f205 	lsl.w	r2, r1, r5
     564:	ea40 0002 	orr.w	r0, r0, r2
     568:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     574:	fa21 f604 	lsr.w	r6, r1, r4
     578:	eb42 0106 	adc.w	r1, r2, r6
     57c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     580:	bf08      	it	eq
     582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     586:	bd70      	pop	{r4, r5, r6, pc}
     588:	f1c4 040c 	rsb	r4, r4, #12
     58c:	f1c4 0520 	rsb	r5, r4, #32
     590:	fa00 f304 	lsl.w	r3, r0, r4
     594:	fa20 f005 	lsr.w	r0, r0, r5
     598:	fa01 f204 	lsl.w	r2, r1, r4
     59c:	ea40 0002 	orr.w	r0, r0, r2
     5a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5a8:	f141 0100 	adc.w	r1, r1, #0
     5ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b0:	bf08      	it	eq
     5b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	f1c4 0520 	rsb	r5, r4, #32
     5bc:	fa00 f205 	lsl.w	r2, r0, r5
     5c0:	ea4e 0e02 	orr.w	lr, lr, r2
     5c4:	fa20 f304 	lsr.w	r3, r0, r4
     5c8:	fa01 f205 	lsl.w	r2, r1, r5
     5cc:	ea43 0302 	orr.w	r3, r3, r2
     5d0:	fa21 f004 	lsr.w	r0, r1, r4
     5d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5d8:	fa21 f204 	lsr.w	r2, r1, r4
     5dc:	ea20 0002 	bic.w	r0, r0, r2
     5e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5e8:	bf08      	it	eq
     5ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ee:	bd70      	pop	{r4, r5, r6, pc}
     5f0:	f094 0f00 	teq	r4, #0
     5f4:	d10f      	bne.n	616 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     5f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fa:	0040      	lsls	r0, r0, #1
     5fc:	eb41 0101 	adc.w	r1, r1, r1
     600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     604:	bf08      	it	eq
     606:	3c01      	subeq	r4, #1
     608:	d0f7      	beq.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
     60a:	ea41 0106 	orr.w	r1, r1, r6
     60e:	f095 0f00 	teq	r5, #0
     612:	bf18      	it	ne
     614:	4770      	bxne	lr
     616:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61a:	0052      	lsls	r2, r2, #1
     61c:	eb43 0303 	adc.w	r3, r3, r3
     620:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     624:	bf08      	it	eq
     626:	3d01      	subeq	r5, #1
     628:	d0f7      	beq.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     62a:	ea43 0306 	orr.w	r3, r3, r6
     62e:	4770      	bx	lr
     630:	ea94 0f0c 	teq	r4, ip
     634:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     638:	bf18      	it	ne
     63a:	ea95 0f0c 	teqne	r5, ip
     63e:	d00c      	beq.n	65a <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     640:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     644:	bf18      	it	ne
     646:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64a:	d1d1      	bne.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     64c:	ea81 0103 	eor.w	r1, r1, r3
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	f04f 0000 	mov.w	r0, #0
     658:	bd70      	pop	{r4, r5, r6, pc}
     65a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     65e:	bf06      	itte	eq
     660:	4610      	moveq	r0, r2
     662:	4619      	moveq	r1, r3
     664:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     668:	d019      	beq.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     66a:	ea94 0f0c 	teq	r4, ip
     66e:	d102      	bne.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     670:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     674:	d113      	bne.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     676:	ea95 0f0c 	teq	r5, ip
     67a:	d105      	bne.n	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     67c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     680:	bf1c      	itt	ne
     682:	4610      	movne	r0, r2
     684:	4619      	movne	r1, r3
     686:	d10a      	bne.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     688:	ea81 0103 	eor.w	r1, r1, r3
     68c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     690:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     698:	f04f 0000 	mov.w	r0, #0
     69c:	bd70      	pop	{r4, r5, r6, pc}
     69e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6a6:	bd70      	pop	{r4, r5, r6, pc}

000006a8 <__aeabi_ddiv>:
     6a8:	b570      	push	{r4, r5, r6, lr}
     6aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6b6:	bf1d      	ittte	ne
     6b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6bc:	ea94 0f0c 	teqne	r4, ip
     6c0:	ea95 0f0c 	teqne	r5, ip
     6c4:	f000 f8a7 	bleq	816 <CONFIG_ISR_STACK_SIZE+0x16>
     6c8:	eba4 0405 	sub.w	r4, r4, r5
     6cc:	ea81 0e03 	eor.w	lr, r1, r3
     6d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6d8:	f000 8088 	beq.w	7ec <__aeabi_ddiv+0x144>
     6dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
     6fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     700:	429d      	cmp	r5, r3
     702:	bf08      	it	eq
     704:	4296      	cmpeq	r6, r2
     706:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70a:	f504 7440 	add.w	r4, r4, #768	; 0x300
     70e:	d202      	bcs.n	716 <__aeabi_ddiv+0x6e>
     710:	085b      	lsrs	r3, r3, #1
     712:	ea4f 0232 	mov.w	r2, r2, rrx
     716:	1ab6      	subs	r6, r6, r2
     718:	eb65 0503 	sbc.w	r5, r5, r3
     71c:	085b      	lsrs	r3, r3, #1
     71e:	ea4f 0232 	mov.w	r2, r2, rrx
     722:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     726:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72a:	ebb6 0e02 	subs.w	lr, r6, r2
     72e:	eb75 0e03 	sbcs.w	lr, r5, r3
     732:	bf22      	ittt	cs
     734:	1ab6      	subcs	r6, r6, r2
     736:	4675      	movcs	r5, lr
     738:	ea40 000c 	orrcs.w	r0, r0, ip
     73c:	085b      	lsrs	r3, r3, #1
     73e:	ea4f 0232 	mov.w	r2, r2, rrx
     742:	ebb6 0e02 	subs.w	lr, r6, r2
     746:	eb75 0e03 	sbcs.w	lr, r5, r3
     74a:	bf22      	ittt	cs
     74c:	1ab6      	subcs	r6, r6, r2
     74e:	4675      	movcs	r5, lr
     750:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     754:	085b      	lsrs	r3, r3, #1
     756:	ea4f 0232 	mov.w	r2, r2, rrx
     75a:	ebb6 0e02 	subs.w	lr, r6, r2
     75e:	eb75 0e03 	sbcs.w	lr, r5, r3
     762:	bf22      	ittt	cs
     764:	1ab6      	subcs	r6, r6, r2
     766:	4675      	movcs	r5, lr
     768:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     76c:	085b      	lsrs	r3, r3, #1
     76e:	ea4f 0232 	mov.w	r2, r2, rrx
     772:	ebb6 0e02 	subs.w	lr, r6, r2
     776:	eb75 0e03 	sbcs.w	lr, r5, r3
     77a:	bf22      	ittt	cs
     77c:	1ab6      	subcs	r6, r6, r2
     77e:	4675      	movcs	r5, lr
     780:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     784:	ea55 0e06 	orrs.w	lr, r5, r6
     788:	d018      	beq.n	7bc <__aeabi_ddiv+0x114>
     78a:	ea4f 1505 	mov.w	r5, r5, lsl #4
     78e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     792:	ea4f 1606 	mov.w	r6, r6, lsl #4
     796:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     79e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7a6:	d1c0      	bne.n	72a <__aeabi_ddiv+0x82>
     7a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7ac:	d10b      	bne.n	7c6 <__aeabi_ddiv+0x11e>
     7ae:	ea41 0100 	orr.w	r1, r1, r0
     7b2:	f04f 0000 	mov.w	r0, #0
     7b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7ba:	e7b6      	b.n	72a <__aeabi_ddiv+0x82>
     7bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c0:	bf04      	itt	eq
     7c2:	4301      	orreq	r1, r0
     7c4:	2000      	moveq	r0, #0
     7c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ca:	bf88      	it	hi
     7cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d0:	f63f aeaf 	bhi.w	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     7d4:	ebb5 0c03 	subs.w	ip, r5, r3
     7d8:	bf04      	itt	eq
     7da:	ebb6 0c02 	subseq.w	ip, r6, r2
     7de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e2:	f150 0000 	adcs.w	r0, r0, #0
     7e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ea:	bd70      	pop	{r4, r5, r6, pc}
     7ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7f8:	bfc2      	ittt	gt
     7fa:	ebd4 050c 	rsbsgt	r5, r4, ip
     7fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     802:	bd70      	popgt	{r4, r5, r6, pc}
     804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     808:	f04f 0e00 	mov.w	lr, #0
     80c:	3c01      	subs	r4, #1
     80e:	e690      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     810:	ea45 0e06 	orr.w	lr, r5, r6
     814:	e68d      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     816:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81a:	ea94 0f0c 	teq	r4, ip
     81e:	bf08      	it	eq
     820:	ea95 0f0c 	teqeq	r5, ip
     824:	f43f af3b 	beq.w	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     828:	ea94 0f0c 	teq	r4, ip
     82c:	d10a      	bne.n	844 <__z_interrupt_stack_SIZEOF+0x4>
     82e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     832:	f47f af34 	bne.w	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     836:	ea95 0f0c 	teq	r5, ip
     83a:	f47f af25 	bne.w	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     83e:	4610      	mov	r0, r2
     840:	4619      	mov	r1, r3
     842:	e72c      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     844:	ea95 0f0c 	teq	r5, ip
     848:	d106      	bne.n	858 <__z_interrupt_stack_SIZEOF+0x18>
     84a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     84e:	f43f aefd 	beq.w	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     852:	4610      	mov	r0, r2
     854:	4619      	mov	r1, r3
     856:	e722      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     85c:	bf18      	it	ne
     85e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     862:	f47f aec5 	bne.w	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     866:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86a:	f47f af0d 	bne.w	688 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     86e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     872:	f47f aeeb 	bne.w	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     876:	e712      	b.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>

00000878 <__aeabi_d2iz>:
     878:	ea4f 0241 	mov.w	r2, r1, lsl #1
     87c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     880:	d215      	bcs.n	8ae <__aeabi_d2iz+0x36>
     882:	d511      	bpl.n	8a8 <__aeabi_d2iz+0x30>
     884:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     888:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     88c:	d912      	bls.n	8b4 <__aeabi_d2iz+0x3c>
     88e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     896:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     89a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     89e:	fa23 f002 	lsr.w	r0, r3, r2
     8a2:	bf18      	it	ne
     8a4:	4240      	negne	r0, r0
     8a6:	4770      	bx	lr
     8a8:	f04f 0000 	mov.w	r0, #0
     8ac:	4770      	bx	lr
     8ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8b2:	d105      	bne.n	8c0 <__aeabi_d2iz+0x48>
     8b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8b8:	bf08      	it	eq
     8ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8be:	4770      	bx	lr
     8c0:	f04f 0000 	mov.w	r0, #0
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop

000008c8 <__aeabi_uldivmod>:
     8c8:	b953      	cbnz	r3, 8e0 <__aeabi_uldivmod+0x18>
     8ca:	b94a      	cbnz	r2, 8e0 <__aeabi_uldivmod+0x18>
     8cc:	2900      	cmp	r1, #0
     8ce:	bf08      	it	eq
     8d0:	2800      	cmpeq	r0, #0
     8d2:	bf1c      	itt	ne
     8d4:	f04f 31ff 	movne.w	r1, #4294967295
     8d8:	f04f 30ff 	movne.w	r0, #4294967295
     8dc:	f000 b80c 	b.w	8f8 <__aeabi_idiv0>
     8e0:	f1ad 0c08 	sub.w	ip, sp, #8
     8e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8e8:	f007 fb84 	bl	7ff4 <__udivmoddi4>
     8ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f4:	b004      	add	sp, #16
     8f6:	4770      	bx	lr

000008f8 <__aeabi_idiv0>:
     8f8:	4770      	bx	lr
     8fa:	bf00      	nop
     8fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     8fe:	4c14      	ldr	r4, [pc, #80]	; (950 <__aeabi_idiv0+0x58>)
     900:	7a20      	ldrb	r0, [r4, #8]
     902:	f88d 0001 	strb.w	r0, [sp, #1]
     906:	79e0      	ldrb	r0, [r4, #7]
     908:	f88d 0000 	strb.w	r0, [sp]
     90c:	79a0      	ldrb	r0, [r4, #6]
     90e:	f8ad 0004 	strh.w	r0, [sp, #4]
     912:	7960      	ldrb	r0, [r4, #5]
     914:	f8ad 0002 	strh.w	r0, [sp, #2]
     918:	4668      	mov	r0, sp
     91a:	f002 fbe1 	bl	30e0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     91e:	b108      	cbz	r0, 924 <__aeabi_idiv0+0x2c>
     920:	21ad      	movs	r1, #173	; 0xad
     922:	e010      	b.n	946 <__aeabi_idiv0+0x4e>
     924:	68e0      	ldr	r0, [r4, #12]
     926:	9002      	str	r0, [sp, #8]
     928:	a802      	add	r0, sp, #8
     92a:	f002 fbef 	bl	310c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     92e:	b108      	cbz	r0, 934 <__aeabi_idiv0+0x3c>
     930:	21b1      	movs	r1, #177	; 0xb1
     932:	e008      	b.n	946 <__aeabi_idiv0+0x4e>
     934:	4807      	ldr	r0, [pc, #28]	; (954 <__aeabi_idiv0+0x5c>)
     936:	6800      	ldr	r0, [r0, #0]
     938:	9003      	str	r0, [sp, #12]
     93a:	a803      	add	r0, sp, #12
     93c:	f009 fac7 	bl	9ece <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     940:	2800      	cmp	r0, #0
     942:	d003      	beq.n	94c <__aeabi_idiv0+0x54>
     944:	21b5      	movs	r1, #181	; 0xb5
     946:	2003      	movs	r0, #3
     948:	f000 f8e4 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     94c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     94e:	0000      	.short	0x0000
     950:	20000a58 	.word	0x20000a58
     954:	00000b9c 	.word	0x00000b9c

00000958 <sdc_build_revision_get>:
     958:	b510      	push	{r4, lr}
     95a:	b128      	cbz	r0, 968 <sdc_build_revision_get+0x10>
     95c:	2214      	movs	r2, #20
     95e:	4904      	ldr	r1, [pc, #16]	; (970 <sdc_build_revision_get+0x18>)
     960:	f009 ff3c 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     964:	2000      	movs	r0, #0
     966:	bd10      	pop	{r4, pc}
     968:	f06f 0015 	mvn.w	r0, #21
     96c:	bd10      	pop	{r4, pc}
     96e:	0000      	.short	0x0000
     970:	00000bc4 	.word	0x00000bc4

00000974 <sdc_cfg_set>:
     974:	b570      	push	{r4, r5, r6, lr}
     976:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     97a:	bb78      	cbnz	r0, 9dc <sdc_cfg_set+0x68>
     97c:	4c22      	ldr	r4, [pc, #136]	; (a08 <sdc_cfg_set+0x94>)
     97e:	7860      	ldrb	r0, [r4, #1]
     980:	b108      	cbz	r0, 986 <sdc_cfg_set+0x12>
     982:	11a8      	asrs	r0, r5, #6
     984:	bd70      	pop	{r4, r5, r6, pc}
     986:	b1f9      	cbz	r1, 9c8 <sdc_cfg_set+0x54>
     988:	f06f 0015 	mvn.w	r0, #21
     98c:	2a00      	cmp	r2, #0
     98e:	d0f9      	beq.n	984 <sdc_cfg_set+0x10>
     990:	4b1e      	ldr	r3, [pc, #120]	; (a0c <sdc_cfg_set+0x98>)
     992:	1e89      	subs	r1, r1, #2
     994:	2907      	cmp	r1, #7
     996:	d231      	bcs.n	9fc <sdc_cfg_set+0x88>
     998:	e8df f001 	tbb	[pc, r1]
     99c:	1a170704 	.word	0x1a170704
     9a0:	00211d30 	.word	0x00211d30
     9a4:	7810      	ldrb	r0, [r2, #0]
     9a6:	7058      	strb	r0, [r3, #1]
     9a8:	e01d      	b.n	9e6 <sdc_cfg_set+0x72>
     9aa:	7891      	ldrb	r1, [r2, #2]
     9ac:	2900      	cmp	r1, #0
     9ae:	d0e9      	beq.n	984 <sdc_cfg_set+0x10>
     9b0:	78d1      	ldrb	r1, [r2, #3]
     9b2:	2900      	cmp	r1, #0
     9b4:	d0e6      	beq.n	984 <sdc_cfg_set+0x10>
     9b6:	7811      	ldrb	r1, [r2, #0]
     9b8:	291b      	cmp	r1, #27
     9ba:	d3e3      	bcc.n	984 <sdc_cfg_set+0x10>
     9bc:	7851      	ldrb	r1, [r2, #1]
     9be:	291b      	cmp	r1, #27
     9c0:	d3e0      	bcc.n	984 <sdc_cfg_set+0x10>
     9c2:	6810      	ldr	r0, [r2, #0]
     9c4:	f8c3 0005 	str.w	r0, [r3, #5]
     9c8:	e00d      	b.n	9e6 <sdc_cfg_set+0x72>
     9ca:	6810      	ldr	r0, [r2, #0]
     9cc:	60d8      	str	r0, [r3, #12]
     9ce:	e00a      	b.n	9e6 <sdc_cfg_set+0x72>
     9d0:	7810      	ldrb	r0, [r2, #0]
     9d2:	7098      	strb	r0, [r3, #2]
     9d4:	e007      	b.n	9e6 <sdc_cfg_set+0x72>
     9d6:	8810      	ldrh	r0, [r2, #0]
     9d8:	8258      	strh	r0, [r3, #18]
     9da:	e004      	b.n	9e6 <sdc_cfg_set+0x72>
     9dc:	e00e      	b.n	9fc <sdc_cfg_set+0x88>
     9de:	8811      	ldrh	r1, [r2, #0]
     9e0:	29ff      	cmp	r1, #255	; 0xff
     9e2:	d8cf      	bhi.n	984 <sdc_cfg_set+0x10>
     9e4:	7519      	strb	r1, [r3, #20]
     9e6:	2201      	movs	r2, #1
     9e8:	4908      	ldr	r1, [pc, #32]	; (a0c <sdc_cfg_set+0x98>)
     9ea:	2000      	movs	r0, #0
     9ec:	f007 fc52 	bl	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
     9f0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     9f4:	db04      	blt.n	a00 <sdc_cfg_set+0x8c>
     9f6:	f06f 000b 	mvn.w	r0, #11
     9fa:	bd70      	pop	{r4, r5, r6, pc}
     9fc:	4628      	mov	r0, r5
     9fe:	bd70      	pop	{r4, r5, r6, pc}
     a00:	2101      	movs	r1, #1
     a02:	70a1      	strb	r1, [r4, #2]
     a04:	bd70      	pop	{r4, r5, r6, pc}
     a06:	0000      	.short	0x0000
     a08:	20000040 	.word	0x20000040
     a0c:	20000a58 	.word	0x20000a58

00000a10 <sdc_disable>:
     a10:	b510      	push	{r4, lr}
     a12:	4c07      	ldr	r4, [pc, #28]	; (a30 <sdc_disable+0x20>)
     a14:	7860      	ldrb	r0, [r4, #1]
     a16:	b120      	cbz	r0, a22 <sdc_disable+0x12>
     a18:	f002 fd10 	bl	343c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     a1c:	7820      	ldrb	r0, [r4, #0]
     a1e:	f007 fa09 	bl	7e34 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     a22:	f000 fddb 	bl	15dc <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     a26:	f000 feb3 	bl	1790 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     a2a:	2000      	movs	r0, #0
     a2c:	7060      	strb	r0, [r4, #1]
     a2e:	bd10      	pop	{r4, pc}
     a30:	20000040 	.word	0x20000040

00000a34 <sdc_enable>:
     a34:	b570      	push	{r4, r5, r6, lr}
     a36:	460c      	mov	r4, r1
     a38:	0005      	movs	r5, r0
     a3a:	d002      	beq.n	a42 <sdc_enable+0xe>
     a3c:	b10c      	cbz	r4, a42 <sdc_enable+0xe>
     a3e:	0760      	lsls	r0, r4, #29
     a40:	d002      	beq.n	a48 <sdc_enable+0x14>
     a42:	f06f 0015 	mvn.w	r0, #21
     a46:	bd70      	pop	{r4, r5, r6, pc}
     a48:	f000 f8e2 	bl	c10 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     a4c:	b1a8      	cbz	r0, a7a <sdc_enable+0x46>
     a4e:	4628      	mov	r0, r5
     a50:	f007 f9b6 	bl	7dc0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     a54:	4d0a      	ldr	r5, [pc, #40]	; (a80 <sdc_enable+0x4c>)
     a56:	2200      	movs	r2, #0
     a58:	490a      	ldr	r1, [pc, #40]	; (a84 <sdc_enable+0x50>)
     a5a:	7028      	strb	r0, [r5, #0]
     a5c:	4620      	mov	r0, r4
     a5e:	f007 fc19 	bl	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
     a62:	f009 fc88 	bl	a376 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     a66:	2100      	movs	r1, #0
     a68:	7828      	ldrb	r0, [r5, #0]
     a6a:	f002 fcd1 	bl	3410 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     a6e:	f7ff ff45 	bl	8fc <__aeabi_idiv0+0x4>
     a72:	2001      	movs	r0, #1
     a74:	7068      	strb	r0, [r5, #1]
     a76:	2000      	movs	r0, #0
     a78:	bd70      	pop	{r4, r5, r6, pc}
     a7a:	f04f 30ff 	mov.w	r0, #4294967295
     a7e:	bd70      	pop	{r4, r5, r6, pc}
     a80:	20000040 	.word	0x20000040
     a84:	20000a58 	.word	0x20000a58

00000a88 <sdc_init>:
     a88:	b530      	push	{r4, r5, lr}
     a8a:	b089      	sub	sp, #36	; 0x24
     a8c:	0004      	movs	r4, r0
     a8e:	d00c      	beq.n	aaa <sdc_init+0x22>
     a90:	f007 f93e 	bl	7d10 <mpsl_is_initialized>
     a94:	f04f 35ff 	mov.w	r5, #4294967295
     a98:	b120      	cbz	r0, aa4 <sdc_init+0x1c>
     a9a:	f006 ffef 	bl	7a7c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     a9e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     aa2:	d905      	bls.n	ab0 <sdc_init+0x28>
     aa4:	4628      	mov	r0, r5
     aa6:	b009      	add	sp, #36	; 0x24
     aa8:	bd30      	pop	{r4, r5, pc}
     aaa:	f06f 0015 	mvn.w	r0, #21
     aae:	e7fa      	b.n	aa6 <sdc_init+0x1e>
     ab0:	4d13      	ldr	r5, [pc, #76]	; (b00 <sdc_init+0x78>)
     ab2:	4814      	ldr	r0, [pc, #80]	; (b04 <sdc_init+0x7c>)
     ab4:	606c      	str	r4, [r5, #4]
     ab6:	f000 f9bf 	bl	e38 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     aba:	2000      	movs	r0, #0
     abc:	7068      	strb	r0, [r5, #1]
     abe:	70a8      	strb	r0, [r5, #2]
     ac0:	4601      	mov	r1, r0
     ac2:	2224      	movs	r2, #36	; 0x24
     ac4:	4668      	mov	r0, sp
     ac6:	f009 ff03 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     aca:	2224      	movs	r2, #36	; 0x24
     acc:	490e      	ldr	r1, [pc, #56]	; (b08 <sdc_init+0x80>)
     ace:	4668      	mov	r0, sp
     ad0:	f009 fe84 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     ad4:	2224      	movs	r2, #36	; 0x24
     ad6:	4669      	mov	r1, sp
     ad8:	480c      	ldr	r0, [pc, #48]	; (b0c <sdc_init+0x84>)
     ada:	f009 fe7f 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     ade:	f3ef 8410 	mrs	r4, PRIMASK
     ae2:	b672      	cpsid	i
     ae4:	f000 fd88 	bl	15f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     ae8:	4809      	ldr	r0, [pc, #36]	; (b10 <sdc_init+0x88>)
     aea:	f000 fe5d 	bl	17a8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     aee:	b118      	cbz	r0, af8 <sdc_init+0x70>
     af0:	21cb      	movs	r1, #203	; 0xcb
     af2:	2003      	movs	r0, #3
     af4:	f000 f80e 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     af8:	b904      	cbnz	r4, afc <sdc_init+0x74>
     afa:	b662      	cpsie	i
     afc:	2000      	movs	r0, #0
     afe:	e7d2      	b.n	aa6 <sdc_init+0x1e>
     b00:	20000040 	.word	0x20000040
     b04:	000008fd 	.word	0x000008fd
     b08:	00000ba0 	.word	0x00000ba0
     b0c:	20000a58 	.word	0x20000a58
     b10:	00000c3d 	.word	0x00000c3d

00000b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     b14:	b50e      	push	{r1, r2, r3, lr}
     b16:	b672      	cpsid	i
     b18:	4a15      	ldr	r2, [pc, #84]	; (b70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     b1a:	6855      	ldr	r5, [r2, #4]
     b1c:	b1dd      	cbz	r5, b56 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     b1e:	2200      	movs	r2, #0
     b20:	4603      	mov	r3, r0
     b22:	466e      	mov	r6, sp
     b24:	240a      	movs	r4, #10
     b26:	e003      	b.n	b30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     b28:	fbb0 f0f4 	udiv	r0, r0, r4
     b2c:	1c52      	adds	r2, r2, #1
     b2e:	b2d2      	uxtb	r2, r2
     b30:	2800      	cmp	r0, #0
     b32:	d1f9      	bne.n	b28 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     b34:	54b0      	strb	r0, [r6, r2]
     b36:	e00a      	b.n	b4e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     b38:	b2d8      	uxtb	r0, r3
     b3a:	fbb0 f7f4 	udiv	r7, r0, r4
     b3e:	fbb3 f3f4 	udiv	r3, r3, r4
     b42:	fb04 0017 	mls	r0, r4, r7, r0
     b46:	1e52      	subs	r2, r2, #1
     b48:	b2d2      	uxtb	r2, r2
     b4a:	3030      	adds	r0, #48	; 0x30
     b4c:	54b0      	strb	r0, [r6, r2]
     b4e:	2a00      	cmp	r2, #0
     b50:	d1f2      	bne.n	b38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     b52:	4630      	mov	r0, r6
     b54:	47a8      	blx	r5
     b56:	f3bf 8f4f 	dsb	sy
     b5a:	4806      	ldr	r0, [pc, #24]	; (b74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     b5c:	6801      	ldr	r1, [r0, #0]
     b5e:	4a06      	ldr	r2, [pc, #24]	; (b78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     b60:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     b64:	4311      	orrs	r1, r2
     b66:	6001      	str	r1, [r0, #0]
     b68:	f3bf 8f4f 	dsb	sy
     b6c:	bf00      	nop
     b6e:	e7fd      	b.n	b6c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     b70:	20000040 	.word	0x20000040
     b74:	e000ed0c 	.word	0xe000ed0c
     b78:	05fa0004 	.word	0x05fa0004

00000b7c <sdc_support_adv>:
     b7c:	4806      	ldr	r0, [pc, #24]	; (b98 <sdc_support_adv+0x1c>)
     b7e:	b510      	push	{r4, lr}
     b80:	7881      	ldrb	r1, [r0, #2]
     b82:	7840      	ldrb	r0, [r0, #1]
     b84:	4301      	orrs	r1, r0
     b86:	d002      	beq.n	b8e <sdc_support_adv+0x12>
     b88:	f04f 30ff 	mov.w	r0, #4294967295
     b8c:	bd10      	pop	{r4, pc}
     b8e:	f002 fc65 	bl	345c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     b92:	2000      	movs	r0, #0
     b94:	bd10      	pop	{r4, pc}
     b96:	0000      	.short	0x0000
     b98:	20000040 	.word	0x20000040
     b9c:	00000001 	.word	0x00000001
     ba0:	00010100 	.word	0x00010100
     ba4:	031b1b00 	.word	0x031b1b00
     ba8:	00000002 	.word	0x00000002
     bac:	00001d4c 	.word	0x00001d4c
     bb0:	001f0000 	.word	0x001f0000
     bb4:	00000008 	.word	0x00000008
	...
     bc4:	c12e7ee0 	.word	0xc12e7ee0
     bc8:	2385055e 	.word	0x2385055e
     bcc:	fadc1546 	.word	0xfadc1546
     bd0:	707d298e 	.word	0x707d298e
     bd4:	fca59310 	.word	0xfca59310

00000bd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     bd8:	4a05      	ldr	r2, [pc, #20]	; (bf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     bda:	b510      	push	{r4, lr}
     bdc:	6852      	ldr	r2, [r2, #4]
     bde:	b112      	cbz	r2, be6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     be4:	4710      	bx	r2
     be6:	2192      	movs	r1, #146	; 0x92
     be8:	2004      	movs	r0, #4
     bea:	f7ff ff93 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bee:	0000      	.short	0x0000
     bf0:	20000a7c 	.word	0x20000a7c

00000bf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     bf4:	4a05      	ldr	r2, [pc, #20]	; (c0c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     bf6:	b510      	push	{r4, lr}
     bf8:	6892      	ldr	r2, [r2, #8]
     bfa:	b112      	cbz	r2, c02 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c00:	4710      	bx	r2
     c02:	2198      	movs	r1, #152	; 0x98
     c04:	2004      	movs	r0, #4
     c06:	f7ff ff85 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c0a:	0000      	.short	0x0000
     c0c:	20000a7c 	.word	0x20000a7c

00000c10 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     c10:	4805      	ldr	r0, [pc, #20]	; (c28 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     c12:	6801      	ldr	r1, [r0, #0]
     c14:	b129      	cbz	r1, c22 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     c16:	6841      	ldr	r1, [r0, #4]
     c18:	b119      	cbz	r1, c22 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     c1a:	6880      	ldr	r0, [r0, #8]
     c1c:	b108      	cbz	r0, c22 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     c1e:	2001      	movs	r0, #1
     c20:	4770      	bx	lr
     c22:	2000      	movs	r0, #0
     c24:	4770      	bx	lr
     c26:	0000      	.short	0x0000
     c28:	20000a7c 	.word	0x20000a7c

00000c2c <sdc_rand_source_register>:
     c2c:	4902      	ldr	r1, [pc, #8]	; (c38 <sdc_rand_source_register+0xc>)
     c2e:	c80d      	ldmia	r0, {r0, r2, r3}
     c30:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     c34:	2000      	movs	r0, #0
     c36:	4770      	bx	lr
     c38:	20000a7c 	.word	0x20000a7c

00000c3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c3e:	4c12      	ldr	r4, [pc, #72]	; (c88 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     c40:	2600      	movs	r6, #0
     c42:	6825      	ldr	r5, [r4, #0]
     c44:	e011      	b.n	c6a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c46:	9800      	ldr	r0, [sp, #0]
     c48:	2802      	cmp	r0, #2
     c4a:	d002      	beq.n	c52 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     c4c:	2803      	cmp	r0, #3
     c4e:	d10c      	bne.n	c6a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c50:	e006      	b.n	c60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c52:	6820      	ldr	r0, [r4, #0]
     c54:	b110      	cbz	r0, c5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c56:	2000      	movs	r0, #0
     c58:	6026      	str	r6, [r4, #0]
     c5a:	e005      	b.n	c68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c5c:	2128      	movs	r1, #40	; 0x28
     c5e:	e00c      	b.n	c7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c60:	6820      	ldr	r0, [r4, #0]
     c62:	b168      	cbz	r0, c80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c64:	2001      	movs	r0, #1
     c66:	6026      	str	r6, [r4, #0]
     c68:	47a8      	blx	r5
     c6a:	4668      	mov	r0, sp
     c6c:	f000 fd62 	bl	1734 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c70:	2800      	cmp	r0, #0
     c72:	d0e8      	beq.n	c46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c74:	2805      	cmp	r0, #5
     c76:	d005      	beq.n	c84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c78:	2135      	movs	r1, #53	; 0x35
     c7a:	2004      	movs	r0, #4
     c7c:	f7ff ff4a 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c80:	212d      	movs	r1, #45	; 0x2d
     c82:	e7fa      	b.n	c7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c86:	0000      	.short	0x0000
     c88:	20000048 	.word	0x20000048

00000c8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c8c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     c90:	4e28      	ldr	r6, [pc, #160]	; (d34 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c92:	4605      	mov	r5, r0
     c94:	1d00      	adds	r0, r0, #4
     c96:	f106 0744 	add.w	r7, r6, #68	; 0x44
     c9a:	6030      	str	r0, [r6, #0]
     c9c:	7838      	ldrb	r0, [r7, #0]
     c9e:	b158      	cbz	r0, cb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     ca0:	78ba      	ldrb	r2, [r7, #2]
     ca2:	463c      	mov	r4, r7
     ca4:	1c79      	adds	r1, r7, #1
     ca6:	4628      	mov	r0, r5
     ca8:	1c92      	adds	r2, r2, #2
     caa:	f009 fd97 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     cae:	2000      	movs	r0, #0
     cb0:	7020      	strb	r0, [r4, #0]
     cb2:	2004      	movs	r0, #4
     cb4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     cb8:	481e      	ldr	r0, [pc, #120]	; (d34 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     cba:	f000 ff7d 	bl	1bb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     cbe:	4604      	mov	r4, r0
     cc0:	2802      	cmp	r0, #2
     cc2:	d004      	beq.n	cce <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     cc4:	2c04      	cmp	r4, #4
     cc6:	d007      	beq.n	cd8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     cc8:	2c08      	cmp	r4, #8
     cca:	d02c      	beq.n	d26 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
     ccc:	e02f      	b.n	d2e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     cce:	4919      	ldr	r1, [pc, #100]	; (d34 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     cd0:	4628      	mov	r0, r5
     cd2:	f007 fb64 	bl	839e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     cd6:	e02a      	b.n	d2e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     cd8:	7830      	ldrb	r0, [r6, #0]
     cda:	2808      	cmp	r0, #8
     cdc:	d104      	bne.n	ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     cde:	2105      	movs	r1, #5
     ce0:	203e      	movs	r0, #62	; 0x3e
     ce2:	f007 fb48 	bl	8376 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x376>
     ce6:	b150      	cbz	r0, cfe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
     ce8:	4912      	ldr	r1, [pc, #72]	; (d34 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     cea:	4628      	mov	r0, r5
     cec:	f007 fbbc 	bl	8468 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     cf0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     cf4:	d30e      	bcc.n	d14 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
     cf6:	21c7      	movs	r1, #199	; 0xc7
     cf8:	2008      	movs	r0, #8
     cfa:	f7ff ff0b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     cfe:	88b0      	ldrh	r0, [r6, #4]
     d00:	f8ad 0000 	strh.w	r0, [sp]
     d04:	a901      	add	r1, sp, #4
     d06:	4668      	mov	r0, sp
     d08:	f007 fe00 	bl	890c <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     d0c:	2800      	cmp	r0, #0
     d0e:	d0c5      	beq.n	c9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     d10:	21a8      	movs	r1, #168	; 0xa8
     d12:	e7f1      	b.n	cf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
     d14:	2800      	cmp	r0, #0
     d16:	d0c1      	beq.n	c9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     d18:	78a9      	ldrb	r1, [r5, #2]
     d1a:	7828      	ldrb	r0, [r5, #0]
     d1c:	f007 fb2b 	bl	8376 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x376>
     d20:	2800      	cmp	r0, #0
     d22:	d0bb      	beq.n	c9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     d24:	e003      	b.n	d2e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     d26:	4903      	ldr	r1, [pc, #12]	; (d34 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     d28:	4628      	mov	r0, r5
     d2a:	f007 fb66 	bl	83fa <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     d2e:	4620      	mov	r0, r4
     d30:	e7c0      	b.n	cb4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     d32:	0000      	.short	0x0000
     d34:	20000a88 	.word	0x20000a88
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	780a      	ldrb	r2, [r1, #0]
     d3c:	7082      	strb	r2, [r0, #2]
     d3e:	b33a      	cbz	r2, d90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     d40:	2a01      	cmp	r2, #1
     d42:	d825      	bhi.n	d90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     d44:	2313      	movs	r3, #19
     d46:	7003      	strb	r3, [r0, #0]
     d48:	2300      	movs	r3, #0
     d4a:	e00a      	b.n	d62 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
     d4c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     d50:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     d54:	78a6      	ldrb	r6, [r4, #2]
     d56:	70ee      	strb	r6, [r5, #3]
     d58:	8864      	ldrh	r4, [r4, #2]
     d5a:	0a24      	lsrs	r4, r4, #8
     d5c:	1c5b      	adds	r3, r3, #1
     d5e:	712c      	strb	r4, [r5, #4]
     d60:	b2db      	uxtb	r3, r3
     d62:	4293      	cmp	r3, r2
     d64:	d3f2      	bcc.n	d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
     d66:	2300      	movs	r3, #0
     d68:	e00b      	b.n	d82 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
     d6a:	bf00      	nop
     d6c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d70:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d74:	792e      	ldrb	r6, [r5, #4]
     d76:	7166      	strb	r6, [r4, #5]
     d78:	88ad      	ldrh	r5, [r5, #4]
     d7a:	0a2d      	lsrs	r5, r5, #8
     d7c:	1c5b      	adds	r3, r3, #1
     d7e:	71a5      	strb	r5, [r4, #6]
     d80:	b2db      	uxtb	r3, r3
     d82:	4293      	cmp	r3, r2
     d84:	d3f2      	bcc.n	d6c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
     d86:	2101      	movs	r1, #1
     d88:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d8c:	b2c0      	uxtb	r0, r0
     d8e:	bd70      	pop	{r4, r5, r6, pc}
     d90:	2000      	movs	r0, #0
     d92:	bd70      	pop	{r4, r5, r6, pc}

00000d94 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d94:	2840      	cmp	r0, #64	; 0x40
     d96:	d203      	bcs.n	da0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d98:	1e40      	subs	r0, r0, #1
     d9a:	b2c1      	uxtb	r1, r0
     d9c:	4805      	ldr	r0, [pc, #20]	; (db4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d9e:	e005      	b.n	dac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     da0:	28ff      	cmp	r0, #255	; 0xff
     da2:	d005      	beq.n	db0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     da4:	3840      	subs	r0, #64	; 0x40
     da6:	b2c1      	uxtb	r1, r0
     da8:	4802      	ldr	r0, [pc, #8]	; (db4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     daa:	3008      	adds	r0, #8
     dac:	f007 bd5b 	b.w	8866 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     db0:	2001      	movs	r0, #1
     db2:	4770      	bx	lr
     db4:	2000004c 	.word	0x2000004c

00000db8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     db8:	1e40      	subs	r0, r0, #1
     dba:	b2c1      	uxtb	r1, r0
     dbc:	4801      	ldr	r0, [pc, #4]	; (dc4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     dbe:	f007 bd52 	b.w	8866 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     dc2:	0000      	.short	0x0000
     dc4:	2000005c 	.word	0x2000005c

00000dc8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     dc8:	4902      	ldr	r1, [pc, #8]	; (dd4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     dca:	6802      	ldr	r2, [r0, #0]
     dcc:	610a      	str	r2, [r1, #16]
     dce:	6840      	ldr	r0, [r0, #4]
     dd0:	6148      	str	r0, [r1, #20]
     dd2:	4770      	bx	lr
     dd4:	2000004c 	.word	0x2000004c

00000dd8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     dd8:	4905      	ldr	r1, [pc, #20]	; (df0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     dda:	6802      	ldr	r2, [r0, #0]
     ddc:	600a      	str	r2, [r1, #0]
     dde:	6840      	ldr	r0, [r0, #4]
     de0:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     de4:	600a      	str	r2, [r1, #0]
     de6:	4a03      	ldr	r2, [pc, #12]	; (df4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     de8:	4310      	orrs	r0, r2
     dea:	6048      	str	r0, [r1, #4]
     dec:	4770      	bx	lr
     dee:	0000      	.short	0x0000
     df0:	2000004c 	.word	0x2000004c
     df4:	024007f8 	.word	0x024007f8

00000df8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     df8:	4807      	ldr	r0, [pc, #28]	; (e18 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dfa:	f04f 31ff 	mov.w	r1, #4294967295
     dfe:	2200      	movs	r2, #0
     e00:	6001      	str	r1, [r0, #0]
     e02:	0cc9      	lsrs	r1, r1, #19
     e04:	6041      	str	r1, [r0, #4]
     e06:	f100 0108 	add.w	r1, r0, #8
     e0a:	201f      	movs	r0, #31
     e0c:	600a      	str	r2, [r1, #0]
     e0e:	604a      	str	r2, [r1, #4]
     e10:	3108      	adds	r1, #8
     e12:	e9c1 0200 	strd	r0, r2, [r1]
     e16:	4770      	bx	lr
     e18:	2000004c 	.word	0x2000004c

00000e1c <sdc_hci_cmd_cb_reset>:
     e1c:	b510      	push	{r4, lr}
     e1e:	f7ff ffeb 	bl	df8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     e22:	f009 f923 	bl	a06c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     e26:	4604      	mov	r4, r0
     e28:	4802      	ldr	r0, [pc, #8]	; (e34 <sdc_hci_cmd_cb_reset+0x18>)
     e2a:	6800      	ldr	r0, [r0, #0]
     e2c:	b100      	cbz	r0, e30 <sdc_hci_cmd_cb_reset+0x14>
     e2e:	4780      	blx	r0
     e30:	4620      	mov	r0, r4
     e32:	bd10      	pop	{r4, pc}
     e34:	20000064 	.word	0x20000064

00000e38 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     e38:	4901      	ldr	r1, [pc, #4]	; (e40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     e3a:	6008      	str	r0, [r1, #0]
     e3c:	4770      	bx	lr
     e3e:	0000      	.short	0x0000
     e40:	20000064 	.word	0x20000064

00000e44 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e48:	4604      	mov	r4, r0
     e4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     e4e:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     e52:	4d1f      	ldr	r5, [pc, #124]	; (ed0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     e54:	4e1e      	ldr	r6, [pc, #120]	; (ed0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     e56:	3d10      	subs	r5, #16
     e58:	2210      	movs	r2, #16
     e5a:	2100      	movs	r1, #0
     e5c:	4620      	mov	r0, r4
     e5e:	f009 fd37 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e62:	2210      	movs	r2, #16
     e64:	2100      	movs	r1, #0
     e66:	f104 0010 	add.w	r0, r4, #16
     e6a:	f009 fd31 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e6e:	6828      	ldr	r0, [r5, #0]
     e70:	1c40      	adds	r0, r0, #1
     e72:	d108      	bne.n	e86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     e74:	6868      	ldr	r0, [r5, #4]
     e76:	1c40      	adds	r0, r0, #1
     e78:	d105      	bne.n	e86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     e7a:	68a8      	ldr	r0, [r5, #8]
     e7c:	1c40      	adds	r0, r0, #1
     e7e:	d102      	bne.n	e86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     e80:	68e8      	ldr	r0, [r5, #12]
     e82:	1c40      	adds	r0, r0, #1
     e84:	d007      	beq.n	e96 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     e86:	6828      	ldr	r0, [r5, #0]
     e88:	686a      	ldr	r2, [r5, #4]
     e8a:	68a9      	ldr	r1, [r5, #8]
     e8c:	68eb      	ldr	r3, [r5, #12]
     e8e:	6120      	str	r0, [r4, #16]
     e90:	6162      	str	r2, [r4, #20]
     e92:	61a1      	str	r1, [r4, #24]
     e94:	61e3      	str	r3, [r4, #28]
     e96:	2000      	movs	r0, #0
     e98:	f000 fcda 	bl	1850 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e9c:	4387      	bics	r7, r0
     e9e:	07f8      	lsls	r0, r7, #31
     ea0:	d113      	bne.n	eca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     ea2:	6830      	ldr	r0, [r6, #0]
     ea4:	1c40      	adds	r0, r0, #1
     ea6:	d108      	bne.n	eba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     ea8:	6870      	ldr	r0, [r6, #4]
     eaa:	1c40      	adds	r0, r0, #1
     eac:	d105      	bne.n	eba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     eae:	68b0      	ldr	r0, [r6, #8]
     eb0:	1c40      	adds	r0, r0, #1
     eb2:	d102      	bne.n	eba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     eb4:	68f0      	ldr	r0, [r6, #12]
     eb6:	1c40      	adds	r0, r0, #1
     eb8:	d007      	beq.n	eca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     eba:	6832      	ldr	r2, [r6, #0]
     ebc:	6870      	ldr	r0, [r6, #4]
     ebe:	68b1      	ldr	r1, [r6, #8]
     ec0:	68f3      	ldr	r3, [r6, #12]
     ec2:	6022      	str	r2, [r4, #0]
     ec4:	6060      	str	r0, [r4, #4]
     ec6:	60a1      	str	r1, [r4, #8]
     ec8:	60e3      	str	r3, [r4, #12]
     eca:	2000      	movs	r0, #0
     ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ed0:	10000090 	.word	0x10000090

00000ed4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     ed4:	b538      	push	{r3, r4, r5, lr}
     ed6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     eda:	4604      	mov	r4, r0
     edc:	4822      	ldr	r0, [pc, #136]	; (f68 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     ede:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     ee2:	4d21      	ldr	r5, [pc, #132]	; (f68 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     ee4:	6802      	ldr	r2, [r0, #0]
     ee6:	3d14      	subs	r5, #20
     ee8:	1c52      	adds	r2, r2, #1
     eea:	d104      	bne.n	ef6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     eec:	6842      	ldr	r2, [r0, #4]
     eee:	43d2      	mvns	r2, r2
     ef0:	0412      	lsls	r2, r2, #16
     ef2:	0c12      	lsrs	r2, r2, #16
     ef4:	d035      	beq.n	f62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     ef6:	07c9      	lsls	r1, r1, #31
     ef8:	d033      	beq.n	f62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     efa:	6801      	ldr	r1, [r0, #0]
     efc:	6840      	ldr	r0, [r0, #4]
     efe:	f8ad 0000 	strh.w	r0, [sp]
     f02:	f8c4 1001 	str.w	r1, [r4, #1]
     f06:	f8bd 0000 	ldrh.w	r0, [sp]
     f0a:	f8a4 0005 	strh.w	r0, [r4, #5]
     f0e:	79a0      	ldrb	r0, [r4, #6]
     f10:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     f14:	71a0      	strb	r0, [r4, #6]
     f16:	6828      	ldr	r0, [r5, #0]
     f18:	1c40      	adds	r0, r0, #1
     f1a:	d00c      	beq.n	f36 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f1c:	6868      	ldr	r0, [r5, #4]
     f1e:	1c40      	adds	r0, r0, #1
     f20:	d009      	beq.n	f36 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f22:	68a8      	ldr	r0, [r5, #8]
     f24:	1c40      	adds	r0, r0, #1
     f26:	d006      	beq.n	f36 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f28:	68e8      	ldr	r0, [r5, #12]
     f2a:	1c40      	adds	r0, r0, #1
     f2c:	d003      	beq.n	f36 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     f2e:	2000      	movs	r0, #0
     f30:	f000 fc8e 	bl	1850 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     f34:	b140      	cbz	r0, f48 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     f36:	2210      	movs	r2, #16
     f38:	2100      	movs	r1, #0
     f3a:	1de0      	adds	r0, r4, #7
     f3c:	f009 fcc8 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     f40:	2001      	movs	r0, #1
     f42:	7020      	strb	r0, [r4, #0]
     f44:	2000      	movs	r0, #0
     f46:	bd38      	pop	{r3, r4, r5, pc}
     f48:	682a      	ldr	r2, [r5, #0]
     f4a:	6869      	ldr	r1, [r5, #4]
     f4c:	68a8      	ldr	r0, [r5, #8]
     f4e:	68eb      	ldr	r3, [r5, #12]
     f50:	f8c4 2007 	str.w	r2, [r4, #7]
     f54:	f8c4 100b 	str.w	r1, [r4, #11]
     f58:	f8c4 000f 	str.w	r0, [r4, #15]
     f5c:	f8c4 3013 	str.w	r3, [r4, #19]
     f60:	e7ee      	b.n	f40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     f62:	2000      	movs	r0, #0
     f64:	e7ed      	b.n	f42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     f66:	0000      	.short	0x0000
     f68:	100000a4 	.word	0x100000a4

00000f6c <sdc_hci_cmd_vs_zephyr_read_version_info>:
     f6c:	2102      	movs	r1, #2
     f6e:	8001      	strh	r1, [r0, #0]
     f70:	8041      	strh	r1, [r0, #2]
     f72:	2100      	movs	r1, #0
     f74:	7101      	strb	r1, [r0, #4]
     f76:	21e0      	movs	r1, #224	; 0xe0
     f78:	7141      	strb	r1, [r0, #5]
     f7a:	f642 617e 	movw	r1, #11902	; 0x2e7e
     f7e:	80c1      	strh	r1, [r0, #6]
     f80:	4901      	ldr	r1, [pc, #4]	; (f88 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     f82:	6081      	str	r1, [r0, #8]
     f84:	2000      	movs	r0, #0
     f86:	4770      	bx	lr
     f88:	85055ec1 	.word	0x85055ec1
     f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f90:	798c      	ldrb	r4, [r1, #6]
     f92:	f8dd e018 	ldr.w	lr, [sp, #24]
     f96:	2c08      	cmp	r4, #8
     f98:	d901      	bls.n	f9e <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     f9a:	21db      	movs	r1, #219	; 0xdb
     f9c:	e02c      	b.n	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
     f9e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
     fa2:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     fa6:	b10d      	cbz	r5, fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>
     fa8:	21dc      	movs	r1, #220	; 0xdc
     faa:	e025      	b.n	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
     fac:	79cd      	ldrb	r5, [r1, #7]
     fae:	2d00      	cmp	r5, #0
     fb0:	d045      	beq.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
     fb2:	006f      	lsls	r7, r5, #1
     fb4:	370a      	adds	r7, #10
     fb6:	681d      	ldr	r5, [r3, #0]
     fb8:	2c02      	cmp	r4, #2
     fba:	443d      	add	r5, r7
     fbc:	d901      	bls.n	fc2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x22>
     fbe:	4626      	mov	r6, r4
     fc0:	e001      	b.n	fc6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x26>
     fc2:	f04f 0602 	mov.w	r6, #2
     fc6:	442e      	add	r6, r5
     fc8:	f1a6 0601 	sub.w	r6, r6, #1
     fcc:	d901      	bls.n	fd2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32>
     fce:	4625      	mov	r5, r4
     fd0:	e001      	b.n	fd6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x36>
     fd2:	f04f 0502 	mov.w	r5, #2
     fd6:	f1a5 0501 	sub.w	r5, r5, #1
     fda:	ea26 0605 	bic.w	r6, r6, r5
     fde:	888d      	ldrh	r5, [r1, #4]
     fe0:	4425      	add	r5, r4
     fe2:	f1a4 0401 	sub.w	r4, r4, #1
     fe6:	f1a5 0501 	sub.w	r5, r5, #1
     fea:	ea25 0504 	bic.w	r5, r5, r4
     fee:	f64f 74ff 	movw	r4, #65535	; 0xffff
     ff2:	42a5      	cmp	r5, r4
     ff4:	d303      	bcc.n	ffe <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5e>
     ff6:	21e7      	movs	r1, #231	; 0xe7
     ff8:	2017      	movs	r0, #23
     ffa:	f7ff fd8b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ffe:	f1be 0f00 	cmp.w	lr, #0
    1002:	d118      	bne.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1004:	1bf4      	subs	r4, r6, r7
    1006:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    100a:	8025      	strh	r5, [r4, #0]
    100c:	79c8      	ldrb	r0, [r1, #7]
    100e:	70a0      	strb	r0, [r4, #2]
    1010:	2001      	movs	r0, #1
    1012:	70e0      	strb	r0, [r4, #3]
    1014:	7122      	strb	r2, [r4, #4]
    1016:	6808      	ldr	r0, [r1, #0]
    1018:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    101c:	0c00      	lsrs	r0, r0, #16
    101e:	80e0      	strh	r0, [r4, #6]
    1020:	8808      	ldrh	r0, [r1, #0]
    1022:	8120      	strh	r0, [r4, #8]
    1024:	2000      	movs	r0, #0
    1026:	e003      	b.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1028:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    102c:	1c40      	adds	r0, r0, #1
    102e:	817a      	strh	r2, [r7, #10]
    1030:	79cf      	ldrb	r7, [r1, #7]
    1032:	4287      	cmp	r7, r0
    1034:	d8f8      	bhi.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	79c8      	ldrb	r0, [r1, #7]
    1038:	fb00 6005 	mla	r0, r0, r5, r6
    103c:	6018      	str	r0, [r3, #0]
    103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1042:	0000      	.short	0x0000
    1044:	20000068 	.word	0x20000068
    1048:	b530      	push	{r4, r5, lr}
    104a:	4603      	mov	r3, r0
    104c:	ea4f 0002 	mov.w	r0, r2
    1050:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    1054:	8964      	ldrh	r4, [r4, #10]
    1056:	428c      	cmp	r4, r1
    1058:	d009      	beq.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    105a:	789c      	ldrb	r4, [r3, #2]
    105c:	1c40      	adds	r0, r0, #1
    105e:	fbb0 f5f4 	udiv	r5, r0, r4
    1062:	fb04 0015 	mls	r0, r4, r5, r0
    1066:	b2c0      	uxtb	r0, r0
    1068:	4290      	cmp	r0, r2
    106a:	d1f1      	bne.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    106c:	20ff      	movs	r0, #255	; 0xff
    106e:	bd30      	pop	{r4, r5, pc}

00001070 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    1070:	b570      	push	{r4, r5, r6, lr}
    1072:	4605      	mov	r5, r0
    1074:	4819      	ldr	r0, [pc, #100]	; (10dc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
    1076:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    107a:	b364      	cbz	r4, 10d6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    107c:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
    1080:	d304      	bcc.n	108c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
    1082:	f240 2125 	movw	r1, #549	; 0x225
    1086:	2017      	movs	r0, #23
    1088:	f7ff fd44 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    108c:	4629      	mov	r1, r5
    108e:	4620      	mov	r0, r4
    1090:	f007 fd3c 	bl	8b0c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1094:	4601      	mov	r1, r0
    1096:	28ff      	cmp	r0, #255	; 0xff
    1098:	d004      	beq.n	10a4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
    109a:	4620      	mov	r0, r4
    109c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    10a0:	f007 bd48 	b.w	8b34 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10a4:	78a0      	ldrb	r0, [r4, #2]
    10a6:	fbb5 f1f0 	udiv	r1, r5, r0
    10aa:	fb00 5011 	mls	r0, r0, r1, r5
    10ae:	b2c6      	uxtb	r6, r0
    10b0:	4632      	mov	r2, r6
    10b2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    10b6:	4620      	mov	r0, r4
    10b8:	f7ff ffc6 	bl	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    10bc:	4602      	mov	r2, r0
    10be:	28ff      	cmp	r0, #255	; 0xff
    10c0:	d009      	beq.n	10d6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    10c2:	42b2      	cmp	r2, r6
    10c4:	d001      	beq.n	10ca <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
    10c6:	2000      	movs	r0, #0
    10c8:	70e0      	strb	r0, [r4, #3]
    10ca:	4629      	mov	r1, r5
    10cc:	4620      	mov	r0, r4
    10ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    10d2:	f007 bd15 	b.w	8b00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    10d6:	2000      	movs	r0, #0
    10d8:	bd70      	pop	{r4, r5, r6, pc}
    10da:	0000      	.short	0x0000
    10dc:	20000068 	.word	0x20000068

000010e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    10e0:	4a08      	ldr	r2, [pc, #32]	; (1104 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    10e2:	b510      	push	{r4, lr}
    10e4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    10e8:	4601      	mov	r1, r0
    10ea:	4620      	mov	r0, r4
    10ec:	f007 fd0e 	bl	8b0c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    10f0:	4601      	mov	r1, r0
    10f2:	28ff      	cmp	r0, #255	; 0xff
    10f4:	d004      	beq.n	1100 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    10f6:	4620      	mov	r0, r4
    10f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    10fc:	f007 bd1a 	b.w	8b34 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1100:	2000      	movs	r0, #0
    1102:	bd10      	pop	{r4, pc}
    1104:	20000068 	.word	0x20000068

00001108 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1108:	b5f0      	push	{r4, r5, r6, r7, lr}
    110a:	b089      	sub	sp, #36	; 0x24
    110c:	0004      	movs	r4, r0
    110e:	460e      	mov	r6, r1
    1110:	9406      	str	r4, [sp, #24]
    1112:	d007      	beq.n	1124 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    1114:	2500      	movs	r5, #0
    1116:	0760      	lsls	r0, r4, #29
    1118:	d006      	beq.n	1128 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    111a:	f240 1119 	movw	r1, #281	; 0x119
    111e:	2017      	movs	r0, #23
    1120:	f7ff fcf8 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1124:	2501      	movs	r5, #1
    1126:	e7f6      	b.n	1116 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1128:	4814      	ldr	r0, [pc, #80]	; (117c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    112a:	2200      	movs	r2, #0
    112c:	4f14      	ldr	r7, [pc, #80]	; (1180 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    112e:	6002      	str	r2, [r0, #0]
    1130:	6042      	str	r2, [r0, #4]
    1132:	e9d7 1000 	ldrd	r1, r0, [r7]
    1136:	f896 c000 	ldrb.w	ip, [r6]
    113a:	68bb      	ldr	r3, [r7, #8]
    113c:	f36c 601f 	bfi	r0, ip, #24, #8
    1140:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1144:	e9cd 5100 	strd	r5, r1, [sp]
    1148:	ab06      	add	r3, sp, #24
    114a:	a901      	add	r1, sp, #4
    114c:	4610      	mov	r0, r2
    114e:	f7ff ff1d 	bl	f8c <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    1152:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1156:	7873      	ldrb	r3, [r6, #1]
    1158:	697a      	ldr	r2, [r7, #20]
    115a:	f363 601f 	bfi	r0, r3, #24, #8
    115e:	e9cd 0202 	strd	r0, r2, [sp, #8]
    1162:	e9cd 5100 	strd	r5, r1, [sp]
    1166:	ab06      	add	r3, sp, #24
    1168:	2200      	movs	r2, #0
    116a:	a901      	add	r1, sp, #4
    116c:	2001      	movs	r0, #1
    116e:	f7ff ff0d 	bl	f8c <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    1172:	9806      	ldr	r0, [sp, #24]
    1174:	b009      	add	sp, #36	; 0x24
    1176:	1b00      	subs	r0, r0, r4
    1178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    117a:	0000      	.short	0x0000
    117c:	20000068 	.word	0x20000068
    1180:	00001270 	.word	0x00001270

00001184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1184:	b510      	push	{r4, lr}
    1186:	4604      	mov	r4, r0
    1188:	7980      	ldrb	r0, [r0, #6]
    118a:	490e      	ldr	r1, [pc, #56]	; (11c4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    118c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1190:	b1a8      	cbz	r0, 11be <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    1192:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    1196:	79e1      	ldrb	r1, [r4, #7]
    1198:	7882      	ldrb	r2, [r0, #2]
    119a:	4291      	cmp	r1, r2
    119c:	d20f      	bcs.n	11be <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    119e:	1c4a      	adds	r2, r1, #1
    11a0:	71e2      	strb	r2, [r4, #7]
    11a2:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    11a6:	8952      	ldrh	r2, [r2, #10]
    11a8:	429a      	cmp	r2, r3
    11aa:	d0f4      	beq.n	1196 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    11ac:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    11b0:	8952      	ldrh	r2, [r2, #10]
    11b2:	80a2      	strh	r2, [r4, #4]
    11b4:	f007 fcbe 	bl	8b34 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    11b8:	6020      	str	r0, [r4, #0]
    11ba:	2000      	movs	r0, #0
    11bc:	bd10      	pop	{r4, pc}
    11be:	2005      	movs	r0, #5
    11c0:	bd10      	pop	{r4, pc}
    11c2:	0000      	.short	0x0000
    11c4:	20000068 	.word	0x20000068

000011c8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    11c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11cc:	4607      	mov	r7, r0
    11ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
    11d2:	8038      	strh	r0, [r7, #0]
    11d4:	4812      	ldr	r0, [pc, #72]	; (1220 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    11d6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    11da:	b1ec      	cbz	r4, 1218 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    11dc:	78a5      	ldrb	r5, [r4, #2]
    11de:	7920      	ldrb	r0, [r4, #4]
    11e0:	fbb0 f1f5 	udiv	r1, r0, r5
    11e4:	fb05 0611 	mls	r6, r5, r1, r0
    11e8:	4632      	mov	r2, r6
    11ea:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    11ee:	4620      	mov	r0, r4
    11f0:	f7ff ff2a 	bl	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    11f4:	4602      	mov	r2, r0
    11f6:	28ff      	cmp	r0, #255	; 0xff
    11f8:	d00e      	beq.n	1218 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    11fa:	1ba8      	subs	r0, r5, r6
    11fc:	4410      	add	r0, r2
    11fe:	fbb0 f1f5 	udiv	r1, r0, r5
    1202:	fb05 0011 	mls	r0, r5, r1, r0
    1206:	7921      	ldrb	r1, [r4, #4]
    1208:	4408      	add	r0, r1
    120a:	b281      	uxth	r1, r0
    120c:	8039      	strh	r1, [r7, #0]
    120e:	4620      	mov	r0, r4
    1210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1214:	f007 bc74 	b.w	8b00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1218:	2000      	movs	r0, #0
    121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    121e:	0000      	.short	0x0000
    1220:	20000068 	.word	0x20000068

00001224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1228:	4606      	mov	r6, r0
    122a:	4810      	ldr	r0, [pc, #64]	; (126c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    122c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    1230:	4631      	mov	r1, r6
    1232:	4628      	mov	r0, r5
    1234:	f007 fc6a 	bl	8b0c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1238:	4604      	mov	r4, r0
    123a:	28ff      	cmp	r0, #255	; 0xff
    123c:	d012      	beq.n	1264 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    123e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    1242:	4621      	mov	r1, r4
    1244:	ea4f 4730 	mov.w	r7, r0, ror #16
    1248:	4628      	mov	r0, r5
    124a:	f007 fc73 	bl	8b34 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    124e:	4601      	mov	r1, r0
    1250:	4630      	mov	r0, r6
    1252:	47b8      	blx	r7
    1254:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1258:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    125c:	8148      	strh	r0, [r1, #10]
    125e:	2000      	movs	r0, #0
    1260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1264:	f243 0002 	movw	r0, #12290	; 0x3002
    1268:	e7fa      	b.n	1260 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    126a:	0000      	.short	0x0000
    126c:	20000068 	.word	0x20000068
    1270:	00009a95 	.word	0x00009a95
    1274:	000802f8 	.word	0x000802f8
    1278:	00000000 	.word	0x00000000
    127c:	00009389 	.word	0x00009389
    1280:	00080118 	.word	0x00080118
    1284:	00000000 	.word	0x00000000

00001288 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1288:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    128c:	4c24      	ldr	r4, [pc, #144]	; (1320 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    128e:	4606      	mov	r6, r0
    1290:	b081      	sub	sp, #4
    1292:	6820      	ldr	r0, [r4, #0]
    1294:	469a      	mov	sl, r3
    1296:	4693      	mov	fp, r2
    1298:	b158      	cbz	r0, 12b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    129a:	7a01      	ldrb	r1, [r0, #8]
    129c:	42b1      	cmp	r1, r6
    129e:	d903      	bls.n	12a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    12a0:	6840      	ldr	r0, [r0, #4]
    12a2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    12a6:	b140      	cbz	r0, 12ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    12a8:	f243 0002 	movw	r0, #12290	; 0x3002
    12ac:	b005      	add	sp, #20
    12ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12b2:	21a5      	movs	r1, #165	; 0xa5
    12b4:	2018      	movs	r0, #24
    12b6:	f7ff fc2d 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12ba:	4619      	mov	r1, r3
    12bc:	9802      	ldr	r0, [sp, #8]
    12be:	f007 fc74 	bl	8baa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    12c2:	4680      	mov	r8, r0
    12c4:	4658      	mov	r0, fp
    12c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    12c8:	f007 fc65 	bl	8b96 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    12cc:	4605      	mov	r5, r0
    12ce:	eb08 0005 	add.w	r0, r8, r5
    12d2:	1d00      	adds	r0, r0, #4
    12d4:	b287      	uxth	r7, r0
    12d6:	6820      	ldr	r0, [r4, #0]
    12d8:	46a1      	mov	r9, r4
    12da:	4639      	mov	r1, r7
    12dc:	6800      	ldr	r0, [r0, #0]
    12de:	f007 fbaa 	bl	8a36 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    12e2:	0004      	movs	r4, r0
    12e4:	d01a      	beq.n	131c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    12e6:	8067      	strh	r7, [r4, #2]
    12e8:	8025      	strh	r5, [r4, #0]
    12ea:	4629      	mov	r1, r5
    12ec:	1d20      	adds	r0, r4, #4
    12ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    12f0:	4607      	mov	r7, r0
    12f2:	465a      	mov	r2, fp
    12f4:	2309      	movs	r3, #9
    12f6:	9500      	str	r5, [sp, #0]
    12f8:	f007 fb4a 	bl	8990 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    12fc:	8820      	ldrh	r0, [r4, #0]
    12fe:	4641      	mov	r1, r8
    1300:	4438      	add	r0, r7
    1302:	230a      	movs	r3, #10
    1304:	9a02      	ldr	r2, [sp, #8]
    1306:	f8cd a000 	str.w	sl, [sp]
    130a:	f007 fb41 	bl	8990 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    130e:	f8d9 0000 	ldr.w	r0, [r9]
    1312:	6840      	ldr	r0, [r0, #4]
    1314:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1318:	2000      	movs	r0, #0
    131a:	e7c7      	b.n	12ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    131c:	2004      	movs	r0, #4
    131e:	e7c5      	b.n	12ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1320:	20000070 	.word	0x20000070

00001324 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1324:	b570      	push	{r4, r5, r6, lr}
    1326:	4c14      	ldr	r4, [pc, #80]	; (1378 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1328:	6823      	ldr	r3, [r4, #0]
    132a:	b18b      	cbz	r3, 1350 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    132c:	7a19      	ldrb	r1, [r3, #8]
    132e:	4281      	cmp	r1, r0
    1330:	d912      	bls.n	1358 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1332:	685a      	ldr	r2, [r3, #4]
    1334:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1338:	b171      	cbz	r1, 1358 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    133a:	2500      	movs	r5, #0
    133c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1340:	884a      	ldrh	r2, [r1, #2]
    1342:	6818      	ldr	r0, [r3, #0]
    1344:	f007 fbcf 	bl	8ae6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1348:	6821      	ldr	r1, [r4, #0]
    134a:	2000      	movs	r0, #0
    134c:	7a0a      	ldrb	r2, [r1, #8]
    134e:	e00c      	b.n	136a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1350:	21c6      	movs	r1, #198	; 0xc6
    1352:	2018      	movs	r0, #24
    1354:	f7ff fbde 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1358:	f243 0002 	movw	r0, #12290	; 0x3002
    135c:	bd70      	pop	{r4, r5, r6, pc}
    135e:	684b      	ldr	r3, [r1, #4]
    1360:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1364:	b933      	cbnz	r3, 1374 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1366:	1c40      	adds	r0, r0, #1
    1368:	b2c0      	uxtb	r0, r0
    136a:	4282      	cmp	r2, r0
    136c:	d8f7      	bhi.n	135e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    136e:	6808      	ldr	r0, [r1, #0]
    1370:	f007 fbae 	bl	8ad0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1374:	2000      	movs	r0, #0
    1376:	bd70      	pop	{r4, r5, r6, pc}
    1378:	20000070 	.word	0x20000070

0000137c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1380:	460d      	mov	r5, r1
    1382:	0004      	movs	r4, r0
    1384:	4690      	mov	r8, r2
    1386:	f04f 0600 	mov.w	r6, #0
    138a:	d006      	beq.n	139a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    138c:	2700      	movs	r7, #0
    138e:	07a0      	lsls	r0, r4, #30
    1390:	d005      	beq.n	139e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1392:	2186      	movs	r1, #134	; 0x86
    1394:	2018      	movs	r0, #24
    1396:	f7ff fbbd 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    139a:	2701      	movs	r7, #1
    139c:	e7f7      	b.n	138e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    139e:	b1cd      	cbz	r5, 13d4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    13a0:	4611      	mov	r1, r2
    13a2:	2000      	movs	r0, #0
    13a4:	f007 fb78 	bl	8a98 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    13a8:	300c      	adds	r0, #12
    13aa:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    13ae:	b98f      	cbnz	r7, 13d4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    13b0:	4f0a      	ldr	r7, [pc, #40]	; (13dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    13b2:	f104 000c 	add.w	r0, r4, #12
    13b6:	00aa      	lsls	r2, r5, #2
    13b8:	603c      	str	r4, [r7, #0]
    13ba:	7225      	strb	r5, [r4, #8]
    13bc:	6060      	str	r0, [r4, #4]
    13be:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    13c2:	6020      	str	r0, [r4, #0]
    13c4:	2100      	movs	r1, #0
    13c6:	6860      	ldr	r0, [r4, #4]
    13c8:	f009 fa82 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    13cc:	4641      	mov	r1, r8
    13ce:	6838      	ldr	r0, [r7, #0]
    13d0:	f007 fb62 	bl	8a98 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    13d4:	4630      	mov	r0, r6
    13d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13da:	0000      	.short	0x0000
    13dc:	20000070 	.word	0x20000070

000013e0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    13e0:	490a      	ldr	r1, [pc, #40]	; (140c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    13e2:	b510      	push	{r4, lr}
    13e4:	4602      	mov	r2, r0
    13e6:	6809      	ldr	r1, [r1, #0]
    13e8:	2000      	movs	r0, #0
    13ea:	b159      	cbz	r1, 1404 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    13ec:	7a0b      	ldrb	r3, [r1, #8]
    13ee:	4293      	cmp	r3, r2
    13f0:	d907      	bls.n	1402 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    13f2:	6849      	ldr	r1, [r1, #4]
    13f4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    13f8:	2900      	cmp	r1, #0
    13fa:	d002      	beq.n	1402 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    13fc:	f831 0b04 	ldrh.w	r0, [r1], #4
    1400:	4408      	add	r0, r1
    1402:	bd10      	pop	{r4, pc}
    1404:	21fa      	movs	r1, #250	; 0xfa
    1406:	2018      	movs	r0, #24
    1408:	f7ff fb84 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    140c:	20000070 	.word	0x20000070
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	4b1e      	ldr	r3, [pc, #120]	; (148c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1414:	6845      	ldr	r5, [r0, #4]
    1416:	4604      	mov	r4, r0
    1418:	2200      	movs	r2, #0
    141a:	b1a1      	cbz	r1, 1446 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    141c:	2001      	movs	r0, #1
    141e:	7060      	strb	r0, [r4, #1]
    1420:	8858      	ldrh	r0, [r3, #2]
    1422:	0881      	lsrs	r1, r0, #2
    1424:	f05f 0000 	movs.w	r0, #0
    1428:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    142c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1430:	831a      	strh	r2, [r3, #24]
    1432:	8419      	strh	r1, [r3, #32]
    1434:	fb00 5301 	mla	r3, r0, r1, r5
    1438:	6073      	str	r3, [r6, #4]
    143a:	1823      	adds	r3, r4, r0
    143c:	1c40      	adds	r0, r0, #1
    143e:	751a      	strb	r2, [r3, #20]
    1440:	2804      	cmp	r0, #4
    1442:	d3f1      	bcc.n	1428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1444:	bd70      	pop	{r4, r5, r6, pc}
    1446:	7062      	strb	r2, [r4, #1]
    1448:	f05f 0000 	movs.w	r0, #0
    144c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1450:	830a      	strh	r2, [r1, #24]
    1452:	840a      	strh	r2, [r1, #32]
    1454:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1458:	604a      	str	r2, [r1, #4]
    145a:	1821      	adds	r1, r4, r0
    145c:	1c40      	adds	r0, r0, #1
    145e:	750a      	strb	r2, [r1, #20]
    1460:	2804      	cmp	r0, #4
    1462:	d3f3      	bcc.n	144c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1464:	8858      	ldrh	r0, [r3, #2]
    1466:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    146a:	d201      	bcs.n	1470 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    146c:	0846      	lsrs	r6, r0, #1
    146e:	e000      	b.n	1472 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1470:	26ff      	movs	r6, #255	; 0xff
    1472:	f007 fc0e 	bl	8c92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1476:	6065      	str	r5, [r4, #4]
    1478:	8420      	strh	r0, [r4, #32]
    147a:	1829      	adds	r1, r5, r0
    147c:	60a1      	str	r1, [r4, #8]
    147e:	8466      	strh	r6, [r4, #34]	; 0x22
    1480:	60e5      	str	r5, [r4, #12]
    1482:	84a0      	strh	r0, [r4, #36]	; 0x24
    1484:	6121      	str	r1, [r4, #16]
    1486:	84e6      	strh	r6, [r4, #38]	; 0x26
    1488:	bd70      	pop	{r4, r5, r6, pc}
    148a:	0000      	.short	0x0000
    148c:	20000074 	.word	0x20000074

00001490 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1494:	b158      	cbz	r0, 14ae <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1496:	2500      	movs	r5, #0
    1498:	4411      	add	r1, r2
    149a:	4e24      	ldr	r6, [pc, #144]	; (152c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    149c:	b2cc      	uxtb	r4, r1
    149e:	2700      	movs	r7, #0
    14a0:	7034      	strb	r4, [r6, #0]
    14a2:	0781      	lsls	r1, r0, #30
    14a4:	d005      	beq.n	14b2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    14a6:	214e      	movs	r1, #78	; 0x4e
    14a8:	2009      	movs	r0, #9
    14aa:	f7ff fb33 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14ae:	2501      	movs	r5, #1
    14b0:	e7f2      	b.n	1498 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    14b2:	2b1f      	cmp	r3, #31
    14b4:	d804      	bhi.n	14c0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    14b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    14ba:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    14be:	e009      	b.n	14d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    14c0:	0059      	lsls	r1, r3, #1
    14c2:	2bff      	cmp	r3, #255	; 0xff
    14c4:	d90c      	bls.n	14e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    14c6:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    14ca:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    14ce:	d200      	bcs.n	14d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    14d0:	4611      	mov	r1, r2
    14d2:	b289      	uxth	r1, r1
    14d4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    14d8:	1cc9      	adds	r1, r1, #3
    14da:	4011      	ands	r1, r2
    14dc:	b135      	cbz	r5, 14ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    14de:	e007      	b.n	14f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    14e0:	227c      	movs	r2, #124	; 0x7c
    14e2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    14e6:	d3f4      	bcc.n	14d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    14e8:	217c      	movs	r1, #124	; 0x7c
    14ea:	e7f2      	b.n	14d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    14ec:	6070      	str	r0, [r6, #4]
    14ee:	8071      	strh	r1, [r6, #2]
    14f0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    14f4:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    14f8:	2200      	movs	r2, #0
    14fa:	6876      	ldr	r6, [r6, #4]
    14fc:	f04f 0c01 	mov.w	ip, #1
    1500:	e00d      	b.n	151e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1502:	b94d      	cbnz	r5, 1518 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1504:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1508:	eb00 0e03 	add.w	lr, r0, r3
    150c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1510:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1514:	f8c7 e004 	str.w	lr, [r7, #4]
    1518:	1c52      	adds	r2, r2, #1
    151a:	440b      	add	r3, r1
    151c:	b2d2      	uxtb	r2, r2
    151e:	42a2      	cmp	r2, r4
    1520:	d3ef      	bcc.n	1502 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1522:	1ddb      	adds	r3, r3, #7
    1524:	f023 0007 	bic.w	r0, r3, #7
    1528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    152c:	20000074 	.word	0x20000074

00001530 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1530:	b570      	push	{r4, r5, r6, lr}
    1532:	4a10      	ldr	r2, [pc, #64]	; (1574 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1534:	2000      	movs	r0, #0
    1536:	6851      	ldr	r1, [r2, #4]
    1538:	7812      	ldrb	r2, [r2, #0]
    153a:	e014      	b.n	1566 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    153c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1540:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1544:	b16b      	cbz	r3, 1562 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1546:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    154a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    154e:	d00c      	beq.n	156a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    1550:	2500      	movs	r5, #0
    1552:	70a5      	strb	r5, [r4, #2]
    1554:	2101      	movs	r1, #1
    1556:	4620      	mov	r0, r4
    1558:	f7ff ff5a 	bl	1410 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    155c:	7025      	strb	r5, [r4, #0]
    155e:	4620      	mov	r0, r4
    1560:	bd70      	pop	{r4, r5, r6, pc}
    1562:	1c40      	adds	r0, r0, #1
    1564:	b2c0      	uxtb	r0, r0
    1566:	4290      	cmp	r0, r2
    1568:	d3e8      	bcc.n	153c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    156a:	21a9      	movs	r1, #169	; 0xa9
    156c:	2009      	movs	r0, #9
    156e:	f7ff fad1 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1572:	0000      	.short	0x0000
    1574:	20000074 	.word	0x20000074

00001578 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1578:	4804      	ldr	r0, [pc, #16]	; (158c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    157a:	b510      	push	{r4, lr}
    157c:	8840      	ldrh	r0, [r0, #2]
    157e:	0884      	lsrs	r4, r0, #2
    1580:	f007 fb87 	bl	8c92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1584:	4284      	cmp	r4, r0
    1586:	d300      	bcc.n	158a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1588:	4620      	mov	r0, r4
    158a:	bd10      	pop	{r4, pc}
    158c:	20000074 	.word	0x20000074
    1590:	b530      	push	{r4, r5, lr}
    1592:	490d      	ldr	r1, [pc, #52]	; (15c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1594:	2001      	movs	r0, #1
    1596:	6048      	str	r0, [r1, #4]
    1598:	1e82      	subs	r2, r0, #2
    159a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    159e:	490b      	ldr	r1, [pc, #44]	; (15cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    15a0:	6088      	str	r0, [r1, #8]
    15a2:	2300      	movs	r3, #0
    15a4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    15a8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    15ac:	4c08      	ldr	r4, [pc, #32]	; (15d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    15ae:	6023      	str	r3, [r4, #0]
    15b0:	1d25      	adds	r5, r4, #4
    15b2:	6028      	str	r0, [r5, #0]
    15b4:	6088      	str	r0, [r1, #8]
    15b6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    15ba:	6023      	str	r3, [r4, #0]
    15bc:	6028      	str	r0, [r5, #0]
    15be:	4906      	ldr	r1, [pc, #24]	; (15d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    15c0:	4804      	ldr	r0, [pc, #16]	; (15d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    15c2:	6008      	str	r0, [r1, #0]
    15c4:	bd30      	pop	{r4, r5, pc}
    15c6:	0000      	.short	0x0000
    15c8:	4000e000 	.word	0x4000e000
    15cc:	4000f000 	.word	0x4000f000
    15d0:	4000f500 	.word	0x4000f500
    15d4:	3ff60000 	.word	0x3ff60000
    15d8:	4001f508 	.word	0x4001f508

000015dc <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    15dc:	b510      	push	{r4, lr}
    15de:	f7ff ffd7 	bl	1590 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    15e2:	f007 fc2d 	bl	8e40 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    15e6:	4903      	ldr	r1, [pc, #12]	; (15f4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    15e8:	4801      	ldr	r0, [pc, #4]	; (15f0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    15ea:	6008      	str	r0, [r1, #0]
    15ec:	bd10      	pop	{r4, pc}
    15ee:	0000      	.short	0x0000
    15f0:	3ff60000 	.word	0x3ff60000
    15f4:	4001f508 	.word	0x4001f508

000015f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    15f8:	b510      	push	{r4, lr}
    15fa:	f7ff ffc9 	bl	1590 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    15fe:	f007 fc1f 	bl	8e40 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1602:	f000 f887 	bl	1714 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1606:	4905      	ldr	r1, [pc, #20]	; (161c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1608:	4803      	ldr	r0, [pc, #12]	; (1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    160a:	6008      	str	r0, [r1, #0]
    160c:	f000 f8b8 	bl	1780 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1614:	f000 b8dc 	b.w	17d0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1618:	3ff60000 	.word	0x3ff60000
    161c:	4001f508 	.word	0x4001f508
    1620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1624:	4682      	mov	sl, r0
    1626:	4838      	ldr	r0, [pc, #224]	; (1708 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1628:	f008 ffe7 	bl	a5fa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    162c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1708 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1630:	b128      	cbz	r0, 163e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1632:	2601      	movs	r6, #1
    1634:	f10b 0001 	add.w	r0, fp, #1
    1638:	21ff      	movs	r1, #255	; 0xff
    163a:	7001      	strb	r1, [r0, #0]
    163c:	e000      	b.n	1640 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    163e:	2600      	movs	r6, #0
    1640:	f44f 7580 	mov.w	r5, #256	; 0x100
    1644:	4c31      	ldr	r4, [pc, #196]	; (170c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1646:	f04f 0800 	mov.w	r8, #0
    164a:	1d2f      	adds	r7, r5, #4
    164c:	2101      	movs	r1, #1
    164e:	6061      	str	r1, [r4, #4]
    1650:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1654:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1658:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    165c:	6021      	str	r1, [r4, #0]
    165e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1710 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    1662:	e01c      	b.n	169e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1664:	f8d9 0000 	ldr.w	r0, [r9]
    1668:	06c0      	lsls	r0, r0, #27
    166a:	d518      	bpl.n	169e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    166c:	200e      	movs	r0, #14
    166e:	f007 fbf6 	bl	8e5e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1672:	f3ef 8010 	mrs	r0, PRIMASK
    1676:	9000      	str	r0, [sp, #0]
    1678:	b672      	cpsid	i
    167a:	2103      	movs	r1, #3
    167c:	4620      	mov	r0, r4
    167e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1682:	4629      	mov	r1, r5
    1684:	f007 fbf8 	bl	8e78 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1688:	b930      	cbnz	r0, 1698 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    168a:	4639      	mov	r1, r7
    168c:	4620      	mov	r0, r4
    168e:	f007 fbf3 	bl	8e78 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1692:	b908      	cbnz	r0, 1698 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1694:	f009 f848 	bl	a728 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1698:	9800      	ldr	r0, [sp, #0]
    169a:	b900      	cbnz	r0, 169e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    169c:	b662      	cpsie	i
    169e:	4629      	mov	r1, r5
    16a0:	4620      	mov	r0, r4
    16a2:	f007 fbe9 	bl	8e78 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    16a6:	b928      	cbnz	r0, 16b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    16a8:	4639      	mov	r1, r7
    16aa:	4620      	mov	r0, r4
    16ac:	f007 fbe4 	bl	8e78 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    16b0:	2800      	cmp	r0, #0
    16b2:	d0d7      	beq.n	1664 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    16b4:	4639      	mov	r1, r7
    16b6:	4620      	mov	r0, r4
    16b8:	f007 fbde 	bl	8e78 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    16bc:	2800      	cmp	r0, #0
    16be:	d1c5      	bne.n	164c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    16c0:	bb06      	cbnz	r6, 1704 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    16c2:	f89b 1001 	ldrb.w	r1, [fp, #1]
    16c6:	f88d 1000 	strb.w	r1, [sp]
    16ca:	9900      	ldr	r1, [sp, #0]
    16cc:	9100      	str	r1, [sp, #0]
    16ce:	f89d 1000 	ldrb.w	r1, [sp]
    16d2:	b109      	cbz	r1, 16d8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    16d4:	2501      	movs	r5, #1
    16d6:	e000      	b.n	16da <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    16d8:	2500      	movs	r5, #0
    16da:	f10b 0001 	add.w	r0, fp, #1
    16de:	f880 8000 	strb.w	r8, [r0]
    16e2:	2003      	movs	r0, #3
    16e4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    16e8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    16ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    16f0:	200e      	movs	r0, #14
    16f2:	f007 fbb4 	bl	8e5e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    16f6:	4804      	ldr	r0, [pc, #16]	; (1708 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    16f8:	f008 ff96 	bl	a628 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    16fc:	b115      	cbz	r5, 1704 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    16fe:	2011      	movs	r0, #17
    1700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1704:	2000      	movs	r0, #0
    1706:	e7fb      	b.n	1700 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1708:	20000174 	.word	0x20000174
    170c:	4000e000 	.word	0x4000e000
    1710:	e000ed10 	.word	0xe000ed10

00001714 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1714:	b510      	push	{r4, lr}
    1716:	4806      	ldr	r0, [pc, #24]	; (1730 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1718:	f008 ff82 	bl	a620 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    171c:	b118      	cbz	r0, 1726 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    171e:	2130      	movs	r1, #48	; 0x30
    1720:	201d      	movs	r0, #29
    1722:	f7ff f9f7 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1726:	4802      	ldr	r0, [pc, #8]	; (1730 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1728:	2100      	movs	r1, #0
    172a:	7041      	strb	r1, [r0, #1]
    172c:	bd10      	pop	{r4, pc}
    172e:	0000      	.short	0x0000
    1730:	20000174 	.word	0x20000174

00001734 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1734:	b570      	push	{r4, r5, r6, lr}
    1736:	4911      	ldr	r1, [pc, #68]	; (177c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1738:	680a      	ldr	r2, [r1, #0]
    173a:	b1ea      	cbz	r2, 1778 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    173c:	2300      	movs	r3, #0
    173e:	461d      	mov	r5, r3
    1740:	2401      	movs	r4, #1
    1742:	684a      	ldr	r2, [r1, #4]
    1744:	1c52      	adds	r2, r2, #1
    1746:	604a      	str	r2, [r1, #4]
    1748:	2a09      	cmp	r2, #9
    174a:	d300      	bcc.n	174e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    174c:	604d      	str	r5, [r1, #4]
    174e:	790e      	ldrb	r6, [r1, #4]
    1750:	fa04 f206 	lsl.w	r2, r4, r6
    1754:	680e      	ldr	r6, [r1, #0]
    1756:	4216      	tst	r6, r2
    1758:	d00b      	beq.n	1772 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    175a:	f3ef 8310 	mrs	r3, PRIMASK
    175e:	b672      	cpsid	i
    1760:	680c      	ldr	r4, [r1, #0]
    1762:	4394      	bics	r4, r2
    1764:	600c      	str	r4, [r1, #0]
    1766:	b903      	cbnz	r3, 176a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1768:	b662      	cpsie	i
    176a:	6849      	ldr	r1, [r1, #4]
    176c:	6001      	str	r1, [r0, #0]
    176e:	2000      	movs	r0, #0
    1770:	bd70      	pop	{r4, r5, r6, pc}
    1772:	1c5b      	adds	r3, r3, #1
    1774:	2b09      	cmp	r3, #9
    1776:	d3e4      	bcc.n	1742 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1778:	2005      	movs	r0, #5
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	2000007c 	.word	0x2000007c

00001780 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1780:	4802      	ldr	r0, [pc, #8]	; (178c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1782:	2100      	movs	r1, #0
    1784:	6001      	str	r1, [r0, #0]
    1786:	6041      	str	r1, [r0, #4]
    1788:	4770      	bx	lr
    178a:	0000      	.short	0x0000
    178c:	2000007c 	.word	0x2000007c

00001790 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1790:	b510      	push	{r4, lr}
    1792:	4c04      	ldr	r4, [pc, #16]	; (17a4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1794:	7820      	ldrb	r0, [r4, #0]
    1796:	28ff      	cmp	r0, #255	; 0xff
    1798:	d003      	beq.n	17a2 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    179a:	f006 fb4b 	bl	7e34 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    179e:	20ff      	movs	r0, #255	; 0xff
    17a0:	7020      	strb	r0, [r4, #0]
    17a2:	bd10      	pop	{r4, pc}
    17a4:	20000000 	.word	0x20000000

000017a8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    17a8:	b510      	push	{r4, lr}
    17aa:	4c08      	ldr	r4, [pc, #32]	; (17cc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    17ac:	7861      	ldrb	r1, [r4, #1]
    17ae:	b109      	cbz	r1, 17b4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    17b0:	200f      	movs	r0, #15
    17b2:	bd10      	pop	{r4, pc}
    17b4:	f006 fb04 	bl	7dc0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    17b8:	7020      	strb	r0, [r4, #0]
    17ba:	28ff      	cmp	r0, #255	; 0xff
    17bc:	d001      	beq.n	17c2 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    17be:	2000      	movs	r0, #0
    17c0:	bd10      	pop	{r4, pc}
    17c2:	2173      	movs	r1, #115	; 0x73
    17c4:	201f      	movs	r0, #31
    17c6:	f7ff f9a5 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17ca:	0000      	.short	0x0000
    17cc:	20000000 	.word	0x20000000

000017d0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    17d0:	4901      	ldr	r1, [pc, #4]	; (17d8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    17d2:	2000      	movs	r0, #0
    17d4:	7048      	strb	r0, [r1, #1]
    17d6:	4770      	bx	lr
    17d8:	20000000 	.word	0x20000000
    17dc:	4905      	ldr	r1, [pc, #20]	; (17f4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    17de:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17e0:	4282      	cmp	r2, r0
    17e2:	d105      	bne.n	17f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    17e4:	2000      	movs	r0, #0
    17e6:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    17ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    17ee:	8488      	strh	r0, [r1, #36]	; 0x24
    17f0:	4770      	bx	lr
    17f2:	0000      	.short	0x0000
    17f4:	20000ca8 	.word	0x20000ca8

000017f8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    17f8:	4a0a      	ldr	r2, [pc, #40]	; (1824 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    17fa:	b110      	cbz	r0, 1802 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    17fc:	2801      	cmp	r0, #1
    17fe:	d007      	beq.n	1810 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1800:	e00e      	b.n	1820 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1802:	7850      	ldrb	r0, [r2, #1]
    1804:	b160      	cbz	r0, 1820 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1806:	f8d2 0002 	ldr.w	r0, [r2, #2]
    180a:	6008      	str	r0, [r1, #0]
    180c:	88d0      	ldrh	r0, [r2, #6]
    180e:	e004      	b.n	181a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1810:	7810      	ldrb	r0, [r2, #0]
    1812:	b128      	cbz	r0, 1820 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1814:	6890      	ldr	r0, [r2, #8]
    1816:	6008      	str	r0, [r1, #0]
    1818:	8990      	ldrh	r0, [r2, #12]
    181a:	8088      	strh	r0, [r1, #4]
    181c:	2001      	movs	r0, #1
    181e:	4770      	bx	lr
    1820:	2000      	movs	r0, #0
    1822:	4770      	bx	lr
    1824:	20000176 	.word	0x20000176

00001828 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1828:	4a08      	ldr	r2, [pc, #32]	; (184c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    182a:	2301      	movs	r3, #1
    182c:	b138      	cbz	r0, 183e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    182e:	2801      	cmp	r0, #1
    1830:	d104      	bne.n	183c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1832:	7013      	strb	r3, [r2, #0]
    1834:	6808      	ldr	r0, [r1, #0]
    1836:	6090      	str	r0, [r2, #8]
    1838:	8888      	ldrh	r0, [r1, #4]
    183a:	8190      	strh	r0, [r2, #12]
    183c:	4770      	bx	lr
    183e:	7053      	strb	r3, [r2, #1]
    1840:	6808      	ldr	r0, [r1, #0]
    1842:	f8c2 0002 	str.w	r0, [r2, #2]
    1846:	8888      	ldrh	r0, [r1, #4]
    1848:	80d0      	strh	r0, [r2, #6]
    184a:	4770      	bx	lr
    184c:	20000176 	.word	0x20000176

00001850 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1850:	4906      	ldr	r1, [pc, #24]	; (186c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    1852:	b110      	cbz	r0, 185a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1854:	2801      	cmp	r0, #1
    1856:	d002      	beq.n	185e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1858:	e005      	b.n	1866 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    185a:	7848      	ldrb	r0, [r1, #1]
    185c:	e000      	b.n	1860 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    185e:	7808      	ldrb	r0, [r1, #0]
    1860:	b108      	cbz	r0, 1866 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1862:	2001      	movs	r0, #1
    1864:	4770      	bx	lr
    1866:	2000      	movs	r0, #0
    1868:	4770      	bx	lr
    186a:	0000      	.short	0x0000
    186c:	20000176 	.word	0x20000176

00001870 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    1870:	4901      	ldr	r1, [pc, #4]	; (1878 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    1872:	7708      	strb	r0, [r1, #28]
    1874:	4770      	bx	lr
    1876:	0000      	.short	0x0000
    1878:	2000056a 	.word	0x2000056a

0000187c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    187c:	4800      	ldr	r0, [pc, #0]	; (1880 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    187e:	4770      	bx	lr
    1880:	20000e58 	.word	0x20000e58

00001884 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    1884:	4904      	ldr	r1, [pc, #16]	; (1898 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    1886:	784a      	ldrb	r2, [r1, #1]
    1888:	4282      	cmp	r2, r0
    188a:	d903      	bls.n	1894 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    188c:	4408      	add	r0, r1
    188e:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    1892:	4770      	bx	lr
    1894:	2000      	movs	r0, #0
    1896:	4770      	bx	lr
    1898:	20000cce 	.word	0x20000cce

0000189c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    189c:	4904      	ldr	r1, [pc, #16]	; (18b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    189e:	784a      	ldrb	r2, [r1, #1]
    18a0:	4282      	cmp	r2, r0
    18a2:	d903      	bls.n	18ac <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    18a4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    18a8:	3082      	adds	r0, #130	; 0x82
    18aa:	4770      	bx	lr
    18ac:	2000      	movs	r0, #0
    18ae:	4770      	bx	lr
    18b0:	20000cce 	.word	0x20000cce

000018b4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    18b4:	4a05      	ldr	r2, [pc, #20]	; (18cc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    18b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    18be:	6802      	ldr	r2, [r0, #0]
    18c0:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    18c4:	8880      	ldrh	r0, [r0, #4]
    18c6:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    18ca:	4770      	bx	lr
    18cc:	20000cce 	.word	0x20000cce

000018d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    18d0:	4904      	ldr	r1, [pc, #16]	; (18e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    18d2:	784a      	ldrb	r2, [r1, #1]
    18d4:	4282      	cmp	r2, r0
    18d6:	d903      	bls.n	18e0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    18d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    18dc:	1c80      	adds	r0, r0, #2
    18de:	4770      	bx	lr
    18e0:	2000      	movs	r0, #0
    18e2:	4770      	bx	lr
    18e4:	20000cce 	.word	0x20000cce

000018e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    18e8:	b510      	push	{r4, lr}
    18ea:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    18ee:	2100      	movs	r1, #0
    18f0:	4805      	ldr	r0, [pc, #20]	; (1908 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    18f2:	f008 ffed 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    18f6:	4805      	ldr	r0, [pc, #20]	; (190c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    18f8:	2100      	movs	r1, #0
    18fa:	7001      	strb	r1, [r0, #0]
    18fc:	7041      	strb	r1, [r0, #1]
    18fe:	f44f 7161 	mov.w	r1, #900	; 0x384
    1902:	8041      	strh	r1, [r0, #2]
    1904:	bd10      	pop	{r4, pc}
    1906:	0000      	.short	0x0000
    1908:	20000cce 	.word	0x20000cce
    190c:	2000016c 	.word	0x2000016c

00001910 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    1910:	4b0b      	ldr	r3, [pc, #44]	; (1940 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    1912:	b510      	push	{r4, lr}
    1914:	785c      	ldrb	r4, [r3, #1]
    1916:	4284      	cmp	r4, r0
    1918:	d910      	bls.n	193c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    191a:	4418      	add	r0, r3
    191c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    1920:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1924:	4418      	add	r0, r3
    1926:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    192a:	700b      	strb	r3, [r1, #0]
    192c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    1930:	6011      	str	r1, [r2, #0]
    1932:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    1936:	8090      	strh	r0, [r2, #4]
    1938:	2001      	movs	r0, #1
    193a:	bd10      	pop	{r4, pc}
    193c:	2000      	movs	r0, #0
    193e:	bd10      	pop	{r4, pc}
    1940:	20000cce 	.word	0x20000cce

00001944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    1944:	4801      	ldr	r0, [pc, #4]	; (194c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    1946:	8840      	ldrh	r0, [r0, #2]
    1948:	4770      	bx	lr
    194a:	0000      	.short	0x0000
    194c:	2000016c 	.word	0x2000016c

00001950 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    1950:	4905      	ldr	r1, [pc, #20]	; (1968 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    1952:	784a      	ldrb	r2, [r1, #1]
    1954:	4282      	cmp	r2, r0
    1956:	d903      	bls.n	1960 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    1958:	4408      	add	r0, r1
    195a:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    195e:	b108      	cbz	r0, 1964 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    1960:	2000      	movs	r0, #0
    1962:	4770      	bx	lr
    1964:	2001      	movs	r0, #1
    1966:	4770      	bx	lr
    1968:	20000cce 	.word	0x20000cce

0000196c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    196c:	4901      	ldr	r1, [pc, #4]	; (1974 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    196e:	7048      	strb	r0, [r1, #1]
    1970:	4770      	bx	lr
    1972:	0000      	.short	0x0000
    1974:	2000016c 	.word	0x2000016c
    1978:	4602      	mov	r2, r0
    197a:	4809      	ldr	r0, [pc, #36]	; (19a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    197c:	b510      	push	{r4, lr}
    197e:	7800      	ldrb	r0, [r0, #0]
    1980:	460b      	mov	r3, r1
    1982:	b158      	cbz	r0, 199c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    1984:	4807      	ldr	r0, [pc, #28]	; (19a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    1986:	7841      	ldrb	r1, [r0, #1]
    1988:	b141      	cbz	r1, 199c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    198a:	b10b      	cbz	r3, 1990 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    198c:	1c80      	adds	r0, r0, #2
    198e:	e001      	b.n	1994 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    1990:	4804      	ldr	r0, [pc, #16]	; (19a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    1992:	3082      	adds	r0, #130	; 0x82
    1994:	f001 fdb6 	bl	3504 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    1998:	2001      	movs	r0, #1
    199a:	bd10      	pop	{r4, pc}
    199c:	2000      	movs	r0, #0
    199e:	bd10      	pop	{r4, pc}
    19a0:	2000016c 	.word	0x2000016c
    19a4:	20000cce 	.word	0x20000cce
    19a8:	4908      	ldr	r1, [pc, #32]	; (19cc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    19aa:	b510      	push	{r4, lr}
    19ac:	4603      	mov	r3, r0
    19ae:	2000      	movs	r0, #0
    19b0:	784a      	ldrb	r2, [r1, #1]
    19b2:	e006      	b.n	19c2 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    19b4:	180c      	adds	r4, r1, r0
    19b6:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    19ba:	429c      	cmp	r4, r3
    19bc:	d004      	beq.n	19c8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    19be:	1c40      	adds	r0, r0, #1
    19c0:	b2c0      	uxtb	r0, r0
    19c2:	4282      	cmp	r2, r0
    19c4:	d8f6      	bhi.n	19b4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    19c6:	2008      	movs	r0, #8
    19c8:	bd10      	pop	{r4, pc}
    19ca:	0000      	.short	0x0000
    19cc:	20000cce 	.word	0x20000cce
    19d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d2:	4c1a      	ldr	r4, [pc, #104]	; (1a3c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    19d4:	4603      	mov	r3, r0
    19d6:	2000      	movs	r0, #0
    19d8:	7825      	ldrb	r5, [r4, #0]
    19da:	e02b      	b.n	1a34 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    19dc:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    19e0:	4422      	add	r2, r4
    19e2:	780f      	ldrb	r7, [r1, #0]
    19e4:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    19e8:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    19ec:	ea87 070c 	eor.w	r7, r7, ip
    19f0:	405e      	eors	r6, r3
    19f2:	443e      	add	r6, r7
    19f4:	784f      	ldrb	r7, [r1, #1]
    19f6:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    19fa:	ea87 070c 	eor.w	r7, r7, ip
    19fe:	443e      	add	r6, r7
    1a00:	788f      	ldrb	r7, [r1, #2]
    1a02:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    1a06:	ea87 070c 	eor.w	r7, r7, ip
    1a0a:	443e      	add	r6, r7
    1a0c:	78cf      	ldrb	r7, [r1, #3]
    1a0e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    1a12:	ea87 070c 	eor.w	r7, r7, ip
    1a16:	443e      	add	r6, r7
    1a18:	790f      	ldrb	r7, [r1, #4]
    1a1a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    1a1e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    1a22:	ea87 070c 	eor.w	r7, r7, ip
    1a26:	443e      	add	r6, r7
    1a28:	794f      	ldrb	r7, [r1, #5]
    1a2a:	4057      	eors	r7, r2
    1a2c:	42f7      	cmn	r7, r6
    1a2e:	d004      	beq.n	1a3a <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    1a30:	1c40      	adds	r0, r0, #1
    1a32:	b2c0      	uxtb	r0, r0
    1a34:	4285      	cmp	r5, r0
    1a36:	d8d1      	bhi.n	19dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    1a38:	2008      	movs	r0, #8
    1a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a3c:	20000cce 	.word	0x20000cce

00001a40 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    1a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a44:	4604      	mov	r4, r0
    1a46:	f100 0580 	add.w	r5, r0, #128	; 0x80
    1a4a:	f04f 0901 	mov.w	r9, #1
    1a4e:	b171      	cbz	r1, 1a6e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    1a50:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    1a54:	1e7e      	subs	r6, r7, #1
    1a56:	2901      	cmp	r1, #1
    1a58:	d029      	beq.n	1aae <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    1a5a:	2902      	cmp	r1, #2
    1a5c:	d04e      	beq.n	1afc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    1a5e:	2903      	cmp	r1, #3
    1a60:	d123      	bne.n	1aaa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    1a62:	4639      	mov	r1, r7
    1a64:	4630      	mov	r0, r6
    1a66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a6a:	f007 bb1d 	b.w	90a8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    1a6e:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    1a72:	2100      	movs	r1, #0
    1a74:	f008 ff2c 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1a78:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    1a7c:	4924      	ldr	r1, [pc, #144]	; (1b10 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    1a7e:	66e9      	str	r1, [r5, #108]	; 0x6c
    1a80:	4620      	mov	r0, r4
    1a82:	2107      	movs	r1, #7
    1a84:	6729      	str	r1, [r5, #112]	; 0x70
    1a86:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    1a8a:	f021 0104 	bic.w	r1, r1, #4
    1a8e:	7001      	strb	r1, [r0, #0]
    1a90:	20fe      	movs	r0, #254	; 0xfe
    1a92:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    1a96:	207f      	movs	r0, #127	; 0x7f
    1a98:	7668      	strb	r0, [r5, #25]
    1a9a:	481e      	ldr	r0, [pc, #120]	; (1b14 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    1a9c:	60a8      	str	r0, [r5, #8]
    1a9e:	2000      	movs	r0, #0
    1aa0:	e9c5 0000 	strd	r0, r0, [r5]
    1aa4:	2020      	movs	r0, #32
    1aa6:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    1aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1aae:	f04f 0800 	mov.w	r8, #0
    1ab2:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    1ab6:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    1aba:	6921      	ldr	r1, [r4, #16]
    1abc:	4816      	ldr	r0, [pc, #88]	; (1b18 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    1abe:	460a      	mov	r2, r1
    1ac0:	4408      	add	r0, r1
    1ac2:	fbb0 f0f1 	udiv	r0, r0, r1
    1ac6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    1aca:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1ace:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    1ad2:	8b63      	ldrh	r3, [r4, #26]
    1ad4:	4628      	mov	r0, r5
    1ad6:	f000 f821 	bl	1b1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    1ada:	4639      	mov	r1, r7
    1adc:	4630      	mov	r0, r6
    1ade:	f007 fae3 	bl	90a8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    1ae2:	f008 fdfd 	bl	a6e0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    1ae6:	b118      	cbz	r0, 1af0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    1ae8:	6960      	ldr	r0, [r4, #20]
    1aea:	f000 f9a9 	bl	1e40 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    1aee:	b110      	cbz	r0, 1af6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    1af0:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    1af4:	e7d9      	b.n	1aaa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    1af6:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    1afa:	e7d6      	b.n	1aaa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    1afc:	6901      	ldr	r1, [r0, #16]
    1afe:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    1b02:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    1b06:	4628      	mov	r0, r5
    1b08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b0c:	f000 b806 	b.w	1b1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    1b10:	c404492f 	.word	0xc404492f
    1b14:	fffce000 	.word	0xfffce000
    1b18:	01c9c37f 	.word	0x01c9c37f
    1b1c:	b510      	push	{r4, lr}
    1b1e:	2400      	movs	r4, #0
    1b20:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    1b24:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    1b28:	434c      	muls	r4, r1
    1b2a:	fbb4 f4f2 	udiv	r4, r4, r2
    1b2e:	f820 4910 	strh.w	r4, [r0], #-16
    1b32:	f240 2471 	movw	r4, #625	; 0x271
    1b36:	4363      	muls	r3, r4
    1b38:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1b3c:	1e5b      	subs	r3, r3, #1
    1b3e:	fbb3 f3f2 	udiv	r3, r3, r2
    1b42:	81c3      	strh	r3, [r0, #14]
    1b44:	4b09      	ldr	r3, [pc, #36]	; (1b6c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    1b46:	fbb3 f3f2 	udiv	r3, r3, r2
    1b4a:	1c5b      	adds	r3, r3, #1
    1b4c:	8283      	strh	r3, [r0, #20]
    1b4e:	8903      	ldrh	r3, [r0, #8]
    1b50:	4363      	muls	r3, r4
    1b52:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1b56:	1e5b      	subs	r3, r3, #1
    1b58:	fbb3 f3f2 	udiv	r3, r3, r2
    1b5c:	6043      	str	r3, [r0, #4]
    1b5e:	6803      	ldr	r3, [r0, #0]
    1b60:	434b      	muls	r3, r1
    1b62:	fbb3 f1f2 	udiv	r1, r3, r2
    1b66:	6001      	str	r1, [r0, #0]
    1b68:	bd10      	pop	{r4, pc}
    1b6a:	0000      	.short	0x0000
    1b6c:	02625a00 	.word	0x02625a00

00001b70 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    1b70:	4902      	ldr	r1, [pc, #8]	; (1b7c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    1b72:	f991 1000 	ldrsb.w	r1, [r1]
    1b76:	f007 ba8c 	b.w	9092 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    1b7a:	0000      	.short	0x0000
    1b7c:	20000184 	.word	0x20000184

00001b80 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    1b80:	b508      	push	{r3, lr}
    1b82:	207f      	movs	r0, #127	; 0x7f
    1b84:	f88d 0000 	strb.w	r0, [sp]
    1b88:	4668      	mov	r0, sp
    1b8a:	f002 f89f 	bl	3ccc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    1b8e:	b140      	cbz	r0, 1ba2 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    1b90:	4805      	ldr	r0, [pc, #20]	; (1ba8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    1b92:	7840      	ldrb	r0, [r0, #1]
    1b94:	4240      	negs	r0, r0
    1b96:	b241      	sxtb	r1, r0
    1b98:	f99d 0000 	ldrsb.w	r0, [sp]
    1b9c:	f007 fa79 	bl	9092 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    1ba0:	bd08      	pop	{r3, pc}
    1ba2:	f99d 0000 	ldrsb.w	r0, [sp]
    1ba6:	bd08      	pop	{r3, pc}
    1ba8:	20000184 	.word	0x20000184

00001bac <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    1bac:	4a01      	ldr	r2, [pc, #4]	; (1bb4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    1bae:	7010      	strb	r0, [r2, #0]
    1bb0:	7051      	strb	r1, [r2, #1]
    1bb2:	4770      	bx	lr
    1bb4:	20000184 	.word	0x20000184

00001bb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    1bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1d38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    1bc0:	4f5e      	ldr	r7, [pc, #376]	; (1d3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    1bc2:	4683      	mov	fp, r0
    1bc4:	f04f 0a01 	mov.w	sl, #1
    1bc8:	2600      	movs	r6, #0
    1bca:	6878      	ldr	r0, [r7, #4]
    1bcc:	4635      	mov	r5, r6
    1bce:	7a00      	ldrb	r0, [r0, #8]
    1bd0:	f88d 0000 	strb.w	r0, [sp]
    1bd4:	9800      	ldr	r0, [sp, #0]
    1bd6:	9000      	str	r0, [sp, #0]
    1bd8:	f89d 1000 	ldrb.w	r1, [sp]
    1bdc:	2910      	cmp	r1, #16
    1bde:	d106      	bne.n	1bee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1be0:	f899 1013 	ldrb.w	r1, [r9, #19]
    1be4:	b119      	cbz	r1, 1bee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1be6:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    1bea:	2800      	cmp	r0, #0
    1bec:	d073      	beq.n	1cd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1bee:	f88d 6000 	strb.w	r6, [sp]
    1bf2:	4668      	mov	r0, sp
    1bf4:	f000 f8ac 	bl	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1bf8:	f89d 1000 	ldrb.w	r1, [sp]
    1bfc:	2900      	cmp	r1, #0
    1bfe:	d1f8      	bne.n	1bf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1c00:	2800      	cmp	r0, #0
    1c02:	d068      	beq.n	1cd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1c04:	4604      	mov	r4, r0
    1c06:	7a00      	ldrb	r0, [r0, #8]
    1c08:	f88d 0000 	strb.w	r0, [sp]
    1c0c:	9800      	ldr	r0, [sp, #0]
    1c0e:	9000      	str	r0, [sp, #0]
    1c10:	f89d 8000 	ldrb.w	r8, [sp]
    1c14:	f104 0008 	add.w	r0, r4, #8
    1c18:	2105      	movs	r1, #5
    1c1a:	9000      	str	r0, [sp, #0]
    1c1c:	7001      	strb	r1, [r0, #0]
    1c1e:	4640      	mov	r0, r8
    1c20:	f1b8 0f08 	cmp.w	r8, #8
    1c24:	d042      	beq.n	1cac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    1c26:	dc07      	bgt.n	1c38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    1c28:	2802      	cmp	r0, #2
    1c2a:	d00d      	beq.n	1c48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    1c2c:	2803      	cmp	r0, #3
    1c2e:	d017      	beq.n	1c60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    1c30:	f1b8 0f04 	cmp.w	r8, #4
    1c34:	d105      	bne.n	1c42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    1c36:	e01d      	b.n	1c74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    1c38:	280f      	cmp	r0, #15
    1c3a:	d052      	beq.n	1ce2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1c3c:	f1b8 0f10 	cmp.w	r8, #16
    1c40:	d059      	beq.n	1cf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    1c42:	f240 214a 	movw	r1, #586	; 0x24a
    1c46:	e065      	b.n	1d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1c48:	6862      	ldr	r2, [r4, #4]
    1c4a:	b132      	cbz	r2, 1c5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    1c4c:	4659      	mov	r1, fp
    1c4e:	4620      	mov	r0, r4
    1c50:	4790      	blx	r2
    1c52:	2004      	movs	r0, #4
    1c54:	f360 0507 	bfi	r5, r0, #0, #8
    1c58:	e010      	b.n	1c7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    1c5a:	f240 11c3 	movw	r1, #451	; 0x1c3
    1c5e:	e059      	b.n	1d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1c60:	6862      	ldr	r2, [r4, #4]
    1c62:	b122      	cbz	r2, 1c6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    1c64:	4659      	mov	r1, fp
    1c66:	4620      	mov	r0, r4
    1c68:	4790      	blx	r2
    1c6a:	4605      	mov	r5, r0
    1c6c:	e006      	b.n	1c7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    1c6e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    1c72:	e04f      	b.n	1d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1c74:	6861      	ldr	r1, [r4, #4]
    1c76:	b1b1      	cbz	r1, 1ca6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    1c78:	4620      	mov	r0, r4
    1c7a:	4788      	blx	r1
    1c7c:	f3c5 2007 	ubfx	r0, r5, #8, #8
    1c80:	2801      	cmp	r0, #1
    1c82:	d04a      	beq.n	1d1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    1c84:	f3ef 8110 	mrs	r1, PRIMASK
    1c88:	b672      	cpsid	i
    1c8a:	7a20      	ldrb	r0, [r4, #8]
    1c8c:	f88d 0000 	strb.w	r0, [sp]
    1c90:	9800      	ldr	r0, [sp, #0]
    1c92:	9000      	str	r0, [sp, #0]
    1c94:	f89d 0000 	ldrb.w	r0, [sp]
    1c98:	2805      	cmp	r0, #5
    1c9a:	d042      	beq.n	1d22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    1c9c:	b3b0      	cbz	r0, 1d0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    1c9e:	f366 0507 	bfi	r5, r6, #0, #8
    1ca2:	b3a1      	cbz	r1, 1d0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    1ca4:	e041      	b.n	1d2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    1ca6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    1caa:	e033      	b.n	1d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1cac:	6860      	ldr	r0, [r4, #4]
    1cae:	465d      	mov	r5, fp
    1cb0:	b198      	cbz	r0, 1cda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    1cb2:	8804      	ldrh	r4, [r0, #0]
    1cb4:	4620      	mov	r0, r4
    1cb6:	f7ff fb93 	bl	13e0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1cba:	b180      	cbz	r0, 1cde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1cbc:	706e      	strb	r6, [r5, #1]
    1cbe:	210d      	movs	r1, #13
    1cc0:	7029      	strb	r1, [r5, #0]
    1cc2:	80ec      	strh	r4, [r5, #6]
    1cc4:	f8a5 a008 	strh.w	sl, [r5, #8]
    1cc8:	f885 a004 	strb.w	sl, [r5, #4]
    1ccc:	4631      	mov	r1, r6
    1cce:	f006 fe88 	bl	89e2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    1cd2:	2004      	movs	r0, #4
    1cd4:	613e      	str	r6, [r7, #16]
    1cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cda:	21e5      	movs	r1, #229	; 0xe5
    1cdc:	e01a      	b.n	1d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1cde:	21c5      	movs	r1, #197	; 0xc5
    1ce0:	e018      	b.n	1d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1ce2:	f88b 6001 	strb.w	r6, [fp, #1]
    1ce6:	2116      	movs	r1, #22
    1ce8:	f88b 1000 	strb.w	r1, [fp]
    1cec:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1cf0:	f8cb 1004 	str.w	r1, [fp, #4]
    1cf4:	e7ad      	b.n	1c52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    1cf6:	4812      	ldr	r0, [pc, #72]	; (1d40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    1cf8:	6802      	ldr	r2, [r0, #0]
    1cfa:	b122      	cbz	r2, 1d06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    1cfc:	6860      	ldr	r0, [r4, #4]
    1cfe:	b138      	cbz	r0, 1d10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    1d00:	8800      	ldrh	r0, [r0, #0]
    1d02:	4659      	mov	r1, fp
    1d04:	4790      	blx	r2
    1d06:	2002      	movs	r0, #2
    1d08:	613e      	str	r6, [r7, #16]
    1d0a:	e7e4      	b.n	1cd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1d0c:	e009      	b.n	1d22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    1d0e:	e00b      	b.n	1d28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    1d10:	f44f 7110 	mov.w	r1, #576	; 0x240
    1d14:	2010      	movs	r0, #16
    1d16:	f7fe fefd 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d1a:	9800      	ldr	r0, [sp, #0]
    1d1c:	4641      	mov	r1, r8
    1d1e:	7001      	strb	r1, [r0, #0]
    1d20:	e003      	b.n	1d2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    1d22:	7226      	strb	r6, [r4, #8]
    1d24:	613e      	str	r6, [r7, #16]
    1d26:	e7bc      	b.n	1ca2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    1d28:	b662      	cpsie	i
    1d2a:	f015 0fff 	tst.w	r5, #255	; 0xff
    1d2e:	f43f af4c 	beq.w	1bca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    1d32:	b2e8      	uxtb	r0, r5
    1d34:	e7cf      	b.n	1cd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1d36:	0000      	.short	0x0000
    1d38:	20000bd0 	.word	0x20000bd0
    1d3c:	20000bfc 	.word	0x20000bfc
    1d40:	20000084 	.word	0x20000084

00001d44 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    1d44:	4901      	ldr	r1, [pc, #4]	; (1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>)
    1d46:	7008      	strb	r0, [r1, #0]
    1d48:	f000 b864 	b.w	1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>
    1d4c:	20000186 	.word	0x20000186
    1d50:	b538      	push	{r3, r4, r5, lr}
    1d52:	4603      	mov	r3, r0
    1d54:	4917      	ldr	r1, [pc, #92]	; (1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>)
    1d56:	2000      	movs	r0, #0
    1d58:	7018      	strb	r0, [r3, #0]
    1d5a:	6908      	ldr	r0, [r1, #16]
    1d5c:	2401      	movs	r4, #1
    1d5e:	b140      	cbz	r0, 1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d60:	7a02      	ldrb	r2, [r0, #8]
    1d62:	f88d 2000 	strb.w	r2, [sp]
    1d66:	9a00      	ldr	r2, [sp, #0]
    1d68:	9200      	str	r2, [sp, #0]
    1d6a:	f89d 5000 	ldrb.w	r5, [sp]
    1d6e:	2d00      	cmp	r5, #0
    1d70:	d111      	bne.n	1d96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a>
    1d72:	6848      	ldr	r0, [r1, #4]
    1d74:	7a02      	ldrb	r2, [r0, #8]
    1d76:	f88d 2000 	strb.w	r2, [sp]
    1d7a:	9a00      	ldr	r2, [sp, #0]
    1d7c:	9200      	str	r2, [sp, #0]
    1d7e:	f89d 5000 	ldrb.w	r5, [sp]
    1d82:	2d01      	cmp	r5, #1
    1d84:	d006      	beq.n	1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d86:	f3ef 8210 	mrs	r2, PRIMASK
    1d8a:	b672      	cpsid	i
    1d8c:	6805      	ldr	r5, [r0, #0]
    1d8e:	604d      	str	r5, [r1, #4]
    1d90:	b112      	cbz	r2, 1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d92:	e002      	b.n	1d9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e>
    1d94:	2000      	movs	r0, #0
    1d96:	bd38      	pop	{r3, r4, r5, pc}
    1d98:	b662      	cpsie	i
    1d9a:	7a02      	ldrb	r2, [r0, #8]
    1d9c:	f88d 2000 	strb.w	r2, [sp]
    1da0:	9a00      	ldr	r2, [sp, #0]
    1da2:	9200      	str	r2, [sp, #0]
    1da4:	f89d 5000 	ldrb.w	r5, [sp]
    1da8:	b10d      	cbz	r5, 1dae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62>
    1daa:	6108      	str	r0, [r1, #16]
    1dac:	bd38      	pop	{r3, r4, r5, pc}
    1dae:	701c      	strb	r4, [r3, #0]
    1db0:	bd38      	pop	{r3, r4, r5, pc}
    1db2:	0000      	.short	0x0000
    1db4:	20000bfc 	.word	0x20000bfc
    1db8:	b538      	push	{r3, r4, r5, lr}
    1dba:	b1d0      	cbz	r0, 1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1dbc:	6041      	str	r1, [r0, #4]
    1dbe:	f100 0108 	add.w	r1, r0, #8
    1dc2:	700a      	strb	r2, [r1, #0]
    1dc4:	f3ef 8310 	mrs	r3, PRIMASK
    1dc8:	b672      	cpsid	i
    1dca:	4c10      	ldr	r4, [pc, #64]	; (1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>)
    1dcc:	6004      	str	r4, [r0, #0]
    1dce:	1f21      	subs	r1, r4, #4
    1dd0:	684a      	ldr	r2, [r1, #4]
    1dd2:	b14a      	cbz	r2, 1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1dd4:	7a12      	ldrb	r2, [r2, #8]
    1dd6:	f88d 2000 	strb.w	r2, [sp]
    1dda:	9a00      	ldr	r2, [sp, #0]
    1ddc:	9200      	str	r2, [sp, #0]
    1dde:	f89d 5000 	ldrb.w	r5, [sp]
    1de2:	2d01      	cmp	r5, #1
    1de4:	d100      	bne.n	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1de6:	600c      	str	r4, [r1, #0]
    1de8:	680a      	ldr	r2, [r1, #0]
    1dea:	6010      	str	r0, [r2, #0]
    1dec:	6008      	str	r0, [r1, #0]
    1dee:	b12b      	cbz	r3, 1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1df0:	e005      	b.n	1dfe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df2:	f240 2175 	movw	r1, #629	; 0x275
    1df6:	2010      	movs	r0, #16
    1df8:	f7fe fe8c 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1dfc:	b662      	cpsie	i
    1dfe:	4804      	ldr	r0, [pc, #16]	; (1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>)
    1e00:	7800      	ldrb	r0, [r0, #0]
    1e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1e06:	f005 bff9 	b.w	7dfc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1e0a:	0000      	.short	0x0000
    1e0c:	20000c00 	.word	0x20000c00
    1e10:	20000186 	.word	0x20000186
    1e14:	b510      	push	{r4, lr}
    1e16:	2214      	movs	r2, #20
    1e18:	2100      	movs	r1, #0
    1e1a:	4808      	ldr	r0, [pc, #32]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1e1c:	f008 fd58 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1e20:	4806      	ldr	r0, [pc, #24]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1e22:	2212      	movs	r2, #18
    1e24:	2100      	movs	r1, #0
    1e26:	3814      	subs	r0, #20
    1e28:	f008 fd52 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1e2c:	4803      	ldr	r0, [pc, #12]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1e2e:	2101      	movs	r1, #1
    1e30:	7301      	strb	r1, [r0, #12]
    1e32:	1d01      	adds	r1, r0, #4
    1e34:	6041      	str	r1, [r0, #4]
    1e36:	6001      	str	r1, [r0, #0]
    1e38:	bd10      	pop	{r4, pc}
    1e3a:	0000      	.short	0x0000
    1e3c:	20000bfc 	.word	0x20000bfc

00001e40 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e42:	f06f 021f 	mvn.w	r2, #31
    1e46:	0c01      	lsrs	r1, r0, #16
    1e48:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    1e4c:	251f      	movs	r5, #31
    1e4e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    1e52:	3854      	subs	r0, #84	; 0x54
    1e54:	d00d      	beq.n	1e72 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1e56:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    1e5a:	3855      	subs	r0, #85	; 0x55
    1e5c:	d009      	beq.n	1e72 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1e5e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    1e62:	38aa      	subs	r0, #170	; 0xaa
    1e64:	d005      	beq.n	1e72 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1e66:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    1e6a:	38aa      	subs	r0, #170	; 0xaa
    1e6c:	d001      	beq.n	1e72 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1e6e:	2001      	movs	r0, #1
    1e70:	e000      	b.n	1e74 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    1e72:	2000      	movs	r0, #0
    1e74:	2200      	movs	r2, #0
    1e76:	4613      	mov	r3, r2
    1e78:	ea4f 0402 	mov.w	r4, r2
    1e7c:	ea82 0701 	eor.w	r7, r2, r1
    1e80:	43ff      	mvns	r7, r7
    1e82:	431f      	orrs	r7, r3
    1e84:	1c7f      	adds	r7, r7, #1
    1e86:	d00f      	beq.n	1ea8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    1e88:	f006 0701 	and.w	r7, r6, #1
    1e8c:	0852      	lsrs	r2, r2, #1
    1e8e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    1e92:	f005 0701 	and.w	r7, r5, #1
    1e96:	085b      	lsrs	r3, r3, #1
    1e98:	0876      	lsrs	r6, r6, #1
    1e9a:	086d      	lsrs	r5, r5, #1
    1e9c:	1c64      	adds	r4, r4, #1
    1e9e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    1ea2:	2c16      	cmp	r4, #22
    1ea4:	d3ea      	bcc.n	1e7c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    1ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea8:	2000      	movs	r0, #0
    1eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001eac <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    1eac:	b510      	push	{r4, lr}
    1eae:	4804      	ldr	r0, [pc, #16]	; (1ec0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    1eb0:	f007 f9d3 	bl	925a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    1eb4:	4802      	ldr	r0, [pc, #8]	; (1ec0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    1eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1eba:	3008      	adds	r0, #8
    1ebc:	f007 b9cd 	b.w	925a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    1ec0:	20000088 	.word	0x20000088

00001ec4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    1ec4:	4801      	ldr	r0, [pc, #4]	; (1ecc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    1ec6:	f000 b809 	b.w	1edc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    1eca:	0000      	.short	0x0000
    1ecc:	20000088 	.word	0x20000088

00001ed0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    1ed0:	4801      	ldr	r0, [pc, #4]	; (1ed8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    1ed2:	f000 b803 	b.w	1edc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    1ed6:	0000      	.short	0x0000
    1ed8:	20000090 	.word	0x20000090
    1edc:	b510      	push	{r4, lr}
    1ede:	e9d0 2100 	ldrd	r2, r1, [r0]
    1ee2:	4b09      	ldr	r3, [pc, #36]	; (1f08 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    1ee4:	4c09      	ldr	r4, [pc, #36]	; (1f0c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    1ee6:	4353      	muls	r3, r2
    1ee8:	4354      	muls	r4, r2
    1eea:	4051      	eors	r1, r2
    1eec:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    1ef0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    1ef4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    1ef8:	e9c0 2100 	strd	r2, r1, [r0]
    1efc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    1f00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1f04:	4618      	mov	r0, r3
    1f06:	bd10      	pop	{r4, pc}
    1f08:	c6ef3760 	.word	0xc6ef3760
    1f0c:	9e3779bb 	.word	0x9e3779bb

00001f10 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    1f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f12:	f007 f9c7 	bl	92a4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    1f16:	4604      	mov	r4, r0
    1f18:	460d      	mov	r5, r1
    1f1a:	466a      	mov	r2, sp
    1f1c:	f000 f862 	bl	1fe4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1f20:	b108      	cbz	r0, 1f26 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    1f22:	2001      	movs	r0, #1
    1f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f26:	480f      	ldr	r0, [pc, #60]	; (1f64 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    1f28:	7803      	ldrb	r3, [r0, #0]
    1f2a:	7841      	ldrb	r1, [r0, #1]
    1f2c:	428b      	cmp	r3, r1
    1f2e:	d101      	bne.n	1f34 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    1f30:	2000      	movs	r0, #0
    1f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f34:	461a      	mov	r2, r3
    1f36:	6841      	ldr	r1, [r0, #4]
    1f38:	e008      	b.n	1f4c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    1f3a:	bf00      	nop
    1f3c:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1f40:	1e52      	subs	r2, r2, #1
    1f42:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    1f46:	e9c6 7c00 	strd	r7, ip, [r6]
    1f4a:	b2d2      	uxtb	r2, r2
    1f4c:	f89d 6000 	ldrb.w	r6, [sp]
    1f50:	42b2      	cmp	r2, r6
    1f52:	d8f3      	bhi.n	1f3c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    1f54:	b2f2      	uxtb	r2, r6
    1f56:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    1f5a:	1c5b      	adds	r3, r3, #1
    1f5c:	e9c1 4500 	strd	r4, r5, [r1]
    1f60:	7003      	strb	r3, [r0, #0]
    1f62:	e7de      	b.n	1f22 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    1f64:	20000098 	.word	0x20000098

00001f68 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    1f68:	b510      	push	{r4, lr}
    1f6a:	0742      	lsls	r2, r0, #29
    1f6c:	d003      	beq.n	1f76 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    1f6e:	2163      	movs	r1, #99	; 0x63
    1f70:	2048      	movs	r0, #72	; 0x48
    1f72:	f7fe fdcf 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f76:	b120      	cbz	r0, 1f82 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    1f78:	4a03      	ldr	r2, [pc, #12]	; (1f88 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    1f7a:	7051      	strb	r1, [r2, #1]
    1f7c:	6050      	str	r0, [r2, #4]
    1f7e:	2000      	movs	r0, #0
    1f80:	7010      	strb	r0, [r2, #0]
    1f82:	00c8      	lsls	r0, r1, #3
    1f84:	bd10      	pop	{r4, pc}
    1f86:	0000      	.short	0x0000
    1f88:	20000098 	.word	0x20000098

00001f8c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    1f8c:	b538      	push	{r3, r4, r5, lr}
    1f8e:	f007 f989 	bl	92a4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    1f92:	466a      	mov	r2, sp
    1f94:	f000 f826 	bl	1fe4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1f98:	2800      	cmp	r0, #0
    1f9a:	d014      	beq.n	1fc6 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    1f9c:	4a0a      	ldr	r2, [pc, #40]	; (1fc8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    1f9e:	7810      	ldrb	r0, [r2, #0]
    1fa0:	1e40      	subs	r0, r0, #1
    1fa2:	b2c1      	uxtb	r1, r0
    1fa4:	7011      	strb	r1, [r2, #0]
    1fa6:	f89d 0000 	ldrb.w	r0, [sp]
    1faa:	6852      	ldr	r2, [r2, #4]
    1fac:	e008      	b.n	1fc0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    1fae:	bf00      	nop
    1fb0:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    1fb4:	1c40      	adds	r0, r0, #1
    1fb6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    1fba:	e9c3 4500 	strd	r4, r5, [r3]
    1fbe:	b2c0      	uxtb	r0, r0
    1fc0:	4288      	cmp	r0, r1
    1fc2:	d3f5      	bcc.n	1fb0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    1fc4:	2001      	movs	r0, #1
    1fc6:	bd38      	pop	{r3, r4, r5, pc}
    1fc8:	20000098 	.word	0x20000098

00001fcc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    1fcc:	4901      	ldr	r1, [pc, #4]	; (1fd4 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    1fce:	2000      	movs	r0, #0
    1fd0:	7008      	strb	r0, [r1, #0]
    1fd2:	4770      	bx	lr
    1fd4:	20000098 	.word	0x20000098

00001fd8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    1fd8:	4801      	ldr	r0, [pc, #4]	; (1fe0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    1fda:	7840      	ldrb	r0, [r0, #1]
    1fdc:	4770      	bx	lr
    1fde:	0000      	.short	0x0000
    1fe0:	20000098 	.word	0x20000098
    1fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fe6:	4d20      	ldr	r5, [pc, #128]	; (2068 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    1fe8:	2300      	movs	r3, #0
    1fea:	7013      	strb	r3, [r2, #0]
    1fec:	782b      	ldrb	r3, [r5, #0]
    1fee:	b323      	cbz	r3, 203a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    1ff0:	2400      	movs	r4, #0
    1ff2:	1e5b      	subs	r3, r3, #1
    1ff4:	b2db      	uxtb	r3, r3
    1ff6:	f8d5 c004 	ldr.w	ip, [r5, #4]
    1ffa:	e00b      	b.n	2014 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    1ffc:	18e5      	adds	r5, r4, r3
    1ffe:	086d      	lsrs	r5, r5, #1
    2000:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    2004:	e9d6 7600 	ldrd	r7, r6, [r6]
    2008:	1a3f      	subs	r7, r7, r0
    200a:	418e      	sbcs	r6, r1
    200c:	d201      	bcs.n	2012 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    200e:	462c      	mov	r4, r5
    2010:	e000      	b.n	2014 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    2012:	462b      	mov	r3, r5
    2014:	1b1d      	subs	r5, r3, r4
    2016:	2d01      	cmp	r5, #1
    2018:	dcf0      	bgt.n	1ffc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    201a:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    201e:	e9d6 5600 	ldrd	r5, r6, [r6]
    2022:	ea80 0705 	eor.w	r7, r0, r5
    2026:	ea81 0e06 	eor.w	lr, r1, r6
    202a:	ea57 070e 	orrs.w	r7, r7, lr
    202e:	d005      	beq.n	203c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    2030:	1b45      	subs	r5, r0, r5
    2032:	eb71 0506 	sbcs.w	r5, r1, r6
    2036:	d203      	bcs.n	2040 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    2038:	7014      	strb	r4, [r2, #0]
    203a:	e010      	b.n	205e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    203c:	7014      	strb	r4, [r2, #0]
    203e:	e011      	b.n	2064 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    2040:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    2044:	e9d5 4500 	ldrd	r4, r5, [r5]
    2048:	ea80 0604 	eor.w	r6, r0, r4
    204c:	ea81 0705 	eor.w	r7, r1, r5
    2050:	433e      	orrs	r6, r7
    2052:	d006      	beq.n	2062 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    2054:	1b00      	subs	r0, r0, r4
    2056:	41a9      	sbcs	r1, r5
    2058:	d300      	bcc.n	205c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    205a:	1c5b      	adds	r3, r3, #1
    205c:	7013      	strb	r3, [r2, #0]
    205e:	2000      	movs	r0, #0
    2060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2062:	7013      	strb	r3, [r2, #0]
    2064:	2001      	movs	r0, #1
    2066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2068:	20000098 	.word	0x20000098

0000206c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    206c:	b570      	push	{r4, r5, r6, lr}
    206e:	4604      	mov	r4, r0
    2070:	7c00      	ldrb	r0, [r0, #16]
    2072:	b300      	cbz	r0, 20b6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    2074:	2802      	cmp	r0, #2
    2076:	d01e      	beq.n	20b6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    2078:	f05f 0001 	movs.w	r0, #1
    207c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    2080:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    2084:	460d      	mov	r5, r1
    2086:	b1c0      	cbz	r0, 20ba <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    2088:	7de0      	ldrb	r0, [r4, #23]
    208a:	b1f0      	cbz	r0, 20ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    208c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    2090:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    2094:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    2098:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    209c:	7c20      	ldrb	r0, [r4, #16]
    209e:	f007 f931 	bl	9304 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    20a2:	7620      	strb	r0, [r4, #24]
    20a4:	2008      	movs	r0, #8
    20a6:	7660      	strb	r0, [r4, #25]
    20a8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    20ac:	4629      	mov	r1, r5
    20ae:	f007 f915 	bl	92dc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    20b2:	b9a8      	cbnz	r0, 20e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    20b4:	e00e      	b.n	20d4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    20b6:	2000      	movs	r0, #0
    20b8:	e7e0      	b.n	207c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    20ba:	2000      	movs	r0, #0
    20bc:	f7ff fb9c 	bl	17f8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    20c0:	2800      	cmp	r0, #0
    20c2:	d1eb      	bne.n	209c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    20c4:	f240 41ba 	movw	r1, #1210	; 0x4ba
    20c8:	e001      	b.n	20ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    20ca:	f240 41be 	movw	r1, #1214	; 0x4be
    20ce:	202d      	movs	r0, #45	; 0x2d
    20d0:	f7fe fd20 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20d4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    20d8:	4629      	mov	r1, r5
    20da:	f007 f908 	bl	92ee <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    20de:	b100      	cbz	r0, 20e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    20e0:	2001      	movs	r0, #1
    20e2:	76a0      	strb	r0, [r4, #26]
    20e4:	7e20      	ldrb	r0, [r4, #24]
    20e6:	b130      	cbz	r0, 20f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    20e8:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    20ec:	f104 0158 	add.w	r1, r4, #88	; 0x58
    20f0:	f006 ff4d 	bl	8f8e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    20f4:	7660      	strb	r0, [r4, #25]
    20f6:	f7ff fc25 	bl	1944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    20fa:	490c      	ldr	r1, [pc, #48]	; (212c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    20fc:	fba0 2301 	umull	r2, r3, r0, r1
    2100:	f104 0048 	add.w	r0, r4, #72	; 0x48
    2104:	f007 fa68 	bl	95d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    2108:	2100      	movs	r1, #0
    210a:	4620      	mov	r0, r4
    210c:	f007 fa1d 	bl	954a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    2110:	2000      	movs	r0, #0
    2112:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    2116:	78a0      	ldrb	r0, [r4, #2]
    2118:	0740      	lsls	r0, r0, #29
    211a:	d505      	bpl.n	2128 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    211c:	4620      	mov	r0, r4
    211e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2122:	2100      	movs	r1, #0
    2124:	f000 bd84 	b.w	2c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    2128:	bd70      	pop	{r4, r5, r6, pc}
    212a:	0000      	.short	0x0000
    212c:	000f4240 	.word	0x000f4240

00002130 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    2130:	b530      	push	{r4, r5, lr}
    2132:	460c      	mov	r4, r1
    2134:	b08d      	sub	sp, #52	; 0x34
    2136:	4605      	mov	r5, r0
    2138:	4601      	mov	r1, r0
    213a:	2224      	movs	r2, #36	; 0x24
    213c:	a802      	add	r0, sp, #8
    213e:	f008 fb4d 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2142:	a80b      	add	r0, sp, #44	; 0x2c
    2144:	f007 faa5 	bl	9692 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    2148:	7aa0      	ldrb	r0, [r4, #10]
    214a:	f88d 0018 	strb.w	r0, [sp, #24]
    214e:	7820      	ldrb	r0, [r4, #0]
    2150:	f88d 0008 	strb.w	r0, [sp, #8]
    2154:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    2158:	f8ad 0000 	strh.w	r0, [sp]
    215c:	f89d 0000 	ldrb.w	r0, [sp]
    2160:	f000 0101 	and.w	r1, r0, #1
    2164:	f3c0 0240 	ubfx	r2, r0, #1, #1
    2168:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    216c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    2170:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    2174:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    2178:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    217c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    2180:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2184:	f3c0 1240 	ubfx	r2, r0, #5, #1
    2188:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    218c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2190:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    2194:	f8ad 000a 	strh.w	r0, [sp, #10]
    2198:	7d20      	ldrb	r0, [r4, #20]
    219a:	2801      	cmp	r0, #1
    219c:	d006      	beq.n	21ac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    219e:	2802      	cmp	r0, #2
    21a0:	d004      	beq.n	21ac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    21a2:	f240 21e9 	movw	r1, #745	; 0x2e9
    21a6:	2006      	movs	r0, #6
    21a8:	f7fe fcb4 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    21ac:	f88d 000c 	strb.w	r0, [sp, #12]
    21b0:	7a61      	ldrb	r1, [r4, #9]
    21b2:	a80b      	add	r0, sp, #44	; 0x2c
    21b4:	f007 fa54 	bl	9660 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    21b8:	7d20      	ldrb	r0, [r4, #20]
    21ba:	2101      	movs	r1, #1
    21bc:	2802      	cmp	r0, #2
    21be:	d102      	bne.n	21c6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    21c0:	7d60      	ldrb	r0, [r4, #21]
    21c2:	1c40      	adds	r0, r0, #1
    21c4:	b2c1      	uxtb	r1, r0
    21c6:	7ea0      	ldrb	r0, [r4, #26]
    21c8:	1c40      	adds	r0, r0, #1
    21ca:	b2c2      	uxtb	r2, r0
    21cc:	a80b      	add	r0, sp, #44	; 0x2c
    21ce:	f007 fa0e 	bl	95ee <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    21d2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    21d6:	0700      	lsls	r0, r0, #28
    21d8:	d501      	bpl.n	21de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    21da:	2000      	movs	r0, #0
    21dc:	e020      	b.n	2220 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    21de:	a80b      	add	r0, sp, #44	; 0x2c
    21e0:	f007 fa17 	bl	9612 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    21e4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    21e8:	2228      	movs	r2, #40	; 0x28
    21ea:	f000 fd7d 	bl	2ce8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    21ee:	f240 2171 	movw	r1, #625	; 0x271
    21f2:	f200 20db 	addw	r0, r0, #731	; 0x2db
    21f6:	fbb0 f0f1 	udiv	r0, r0, r1
    21fa:	4348      	muls	r0, r1
    21fc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    2200:	f240 2371 	movw	r3, #625	; 0x271
    2204:	0a0a      	lsrs	r2, r1, #8
    2206:	f240 2171 	movw	r1, #625	; 0x271
    220a:	434a      	muls	r2, r1
    220c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    2210:	0a09      	lsrs	r1, r1, #8
    2212:	4359      	muls	r1, r3
    2214:	4290      	cmp	r0, r2
    2216:	d801      	bhi.n	221c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    2218:	9204      	str	r2, [sp, #16]
    221a:	e004      	b.n	2226 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    221c:	4288      	cmp	r0, r1
    221e:	d801      	bhi.n	2224 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    2220:	9004      	str	r0, [sp, #16]
    2222:	e000      	b.n	2226 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    2224:	9104      	str	r1, [sp, #16]
    2226:	7ca0      	ldrb	r0, [r4, #18]
    2228:	f88d 0017 	strb.w	r0, [sp, #23]
    222c:	7e20      	ldrb	r0, [r4, #24]
    222e:	2801      	cmp	r0, #1
    2230:	d000      	beq.n	2234 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    2232:	2000      	movs	r0, #0
    2234:	f88d 0014 	strb.w	r0, [sp, #20]
    2238:	6b68      	ldr	r0, [r5, #52]	; 0x34
    223a:	f006 fd38 	bl	8cae <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    223e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    2240:	f006 fddd 	bl	8dfe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    2244:	2224      	movs	r2, #36	; 0x24
    2246:	a902      	add	r1, sp, #8
    2248:	4628      	mov	r0, r5
    224a:	f008 fac7 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    224e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2250:	62a8      	str	r0, [r5, #40]	; 0x28
    2252:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    2256:	85a8      	strh	r0, [r5, #44]	; 0x2c
    2258:	7ae0      	ldrb	r0, [r4, #11]
    225a:	b168      	cbz	r0, 2278 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    225c:	2802      	cmp	r0, #2
    225e:	d00b      	beq.n	2278 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    2260:	f05f 0001 	movs.w	r0, #1
    2264:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    2268:	68e0      	ldr	r0, [r4, #12]
    226a:	65a8      	str	r0, [r5, #88]	; 0x58
    226c:	8a20      	ldrh	r0, [r4, #16]
    226e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    2272:	b00d      	add	sp, #52	; 0x34
    2274:	2000      	movs	r0, #0
    2276:	bd30      	pop	{r4, r5, pc}
    2278:	2000      	movs	r0, #0
    227a:	e7f3      	b.n	2264 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

0000227c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    227c:	4a0a      	ldr	r2, [pc, #40]	; (22a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    227e:	b510      	push	{r4, lr}
    2280:	2100      	movs	r1, #0
    2282:	7011      	strb	r1, [r2, #0]
    2284:	4c09      	ldr	r4, [pc, #36]	; (22ac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    2286:	6060      	str	r0, [r4, #4]
    2288:	f000 f822 	bl	22d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    228c:	b110      	cbz	r0, 2294 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    228e:	f240 312e 	movw	r1, #814	; 0x32e
    2292:	e004      	b.n	229e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    2294:	68a0      	ldr	r0, [r4, #8]
    2296:	2800      	cmp	r0, #0
    2298:	d104      	bne.n	22a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    229a:	f240 3131 	movw	r1, #817	; 0x331
    229e:	202d      	movs	r0, #45	; 0x2d
    22a0:	f7fe fc38 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22a4:	bd10      	pop	{r4, pc}
    22a6:	0000      	.short	0x0000
    22a8:	20000c10 	.word	0x20000c10
    22ac:	200000a0 	.word	0x200000a0

000022b0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    22b0:	4902      	ldr	r1, [pc, #8]	; (22bc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    22b2:	4801      	ldr	r0, [pc, #4]	; (22b8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    22b4:	6088      	str	r0, [r1, #8]
    22b6:	4770      	bx	lr
    22b8:	00002cd0 	.word	0x00002cd0
    22bc:	200000a0 	.word	0x200000a0

000022c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    22c0:	4902      	ldr	r1, [pc, #8]	; (22cc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    22c2:	6008      	str	r0, [r1, #0]
    22c4:	6889      	ldr	r1, [r1, #8]
    22c6:	6809      	ldr	r1, [r1, #0]
    22c8:	4708      	bx	r1
    22ca:	0000      	.short	0x0000
    22cc:	200000a0 	.word	0x200000a0

000022d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    22d0:	4808      	ldr	r0, [pc, #32]	; (22f4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    22d2:	b510      	push	{r4, lr}
    22d4:	7800      	ldrb	r0, [r0, #0]
    22d6:	b110      	cbz	r0, 22de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    22d8:	240c      	movs	r4, #12
    22da:	4620      	mov	r0, r4
    22dc:	bd10      	pop	{r4, pc}
    22de:	2400      	movs	r4, #0
    22e0:	2218      	movs	r2, #24
    22e2:	4621      	mov	r1, r4
    22e4:	4803      	ldr	r0, [pc, #12]	; (22f4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    22e6:	f008 faf3 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    22ea:	f001 fa03 	bl	36f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    22ee:	f001 f921 	bl	3534 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    22f2:	e7f2      	b.n	22da <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    22f4:	20000c10 	.word	0x20000c10

000022f8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    22f8:	4904      	ldr	r1, [pc, #16]	; (230c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    22fa:	b510      	push	{r4, lr}
    22fc:	7809      	ldrb	r1, [r1, #0]
    22fe:	2901      	cmp	r1, #1
    2300:	d101      	bne.n	2306 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    2302:	f000 fbcd 	bl	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    2306:	2000      	movs	r0, #0
    2308:	bd10      	pop	{r4, pc}
    230a:	0000      	.short	0x0000
    230c:	20000c10 	.word	0x20000c10

00002310 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    2310:	b510      	push	{r4, lr}
    2312:	4604      	mov	r4, r0
    2314:	7880      	ldrb	r0, [r0, #2]
    2316:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    231a:	b158      	cbz	r0, 2334 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    231c:	233c      	movs	r3, #60	; 0x3c
    231e:	22ff      	movs	r2, #255	; 0xff
    2320:	4620      	mov	r0, r4
    2322:	69e1      	ldr	r1, [r4, #28]
    2324:	f000 fbe2 	bl	2aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    2328:	2202      	movs	r2, #2
    232a:	4904      	ldr	r1, [pc, #16]	; (233c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    232c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2330:	f006 ff7f 	bl	9232 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2334:	2001      	movs	r0, #1
    2336:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    233a:	bd10      	pop	{r4, pc}
    233c:	000094e3 	.word	0x000094e3
    2340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2344:	000f      	movs	r7, r1
    2346:	4604      	mov	r4, r0
    2348:	d023      	beq.n	2392 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    234a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    234e:	4605      	mov	r5, r0
    2350:	f007 f988 	bl	9664 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    2354:	b9b0      	cbnz	r0, 2384 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    2356:	78a0      	ldrb	r0, [r4, #2]
    2358:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    235c:	b350      	cbz	r0, 23b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    235e:	4628      	mov	r0, r5
    2360:	f007 f957 	bl	9612 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    2364:	4606      	mov	r6, r0
    2366:	4628      	mov	r0, r5
    2368:	f007 f97c 	bl	9664 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    236c:	1a30      	subs	r0, r6, r0
    236e:	b2c0      	uxtb	r0, r0
    2370:	f007 f9cd 	bl	970e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    2374:	4601      	mov	r1, r0
    2376:	4835      	ldr	r0, [pc, #212]	; (244c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    2378:	6842      	ldr	r2, [r0, #4]
    237a:	4411      	add	r1, r2
    237c:	6041      	str	r1, [r0, #4]
    237e:	4628      	mov	r0, r5
    2380:	f007 f98e 	bl	96a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    2384:	4628      	mov	r0, r5
    2386:	f007 f950 	bl	962a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    238a:	4601      	mov	r1, r0
    238c:	4620      	mov	r0, r4
    238e:	f007 f918 	bl	95c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    2392:	4d2f      	ldr	r5, [pc, #188]	; (2450 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    2394:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    2398:	2100      	movs	r1, #0
    239a:	6868      	ldr	r0, [r5, #4]
    239c:	8001      	strh	r1, [r0, #0]
    239e:	f007 f891 	bl	94c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    23a2:	8860      	ldrh	r0, [r4, #2]
    23a4:	2813      	cmp	r0, #19
    23a6:	d013      	beq.n	23d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    23a8:	dc09      	bgt.n	23be <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    23aa:	2810      	cmp	r0, #16
    23ac:	d036      	beq.n	241c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    23ae:	2812      	cmp	r0, #18
    23b0:	d109      	bne.n	23c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    23b2:	e031      	b.n	2418 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    23b4:	4620      	mov	r0, r4
    23b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    23ba:	f000 bb71 	b.w	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    23be:	2815      	cmp	r0, #21
    23c0:	d00f      	beq.n	23e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    23c2:	281d      	cmp	r0, #29
    23c4:	d00d      	beq.n	23e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    23c6:	f240 6173 	movw	r1, #1651	; 0x673
    23ca:	202d      	movs	r0, #45	; 0x2d
    23cc:	f7fe fba2 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23d0:	2100      	movs	r1, #0
    23d2:	6868      	ldr	r0, [r5, #4]
    23d4:	f006 fea6 	bl	9124 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    23d8:	2101      	movs	r1, #1
    23da:	6868      	ldr	r0, [r5, #4]
    23dc:	f007 f872 	bl	94c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    23e0:	e020      	b.n	2424 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    23e2:	2101      	movs	r1, #1
    23e4:	6868      	ldr	r0, [r5, #4]
    23e6:	f006 fe9d 	bl	9124 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    23ea:	2101      	movs	r1, #1
    23ec:	6868      	ldr	r0, [r5, #4]
    23ee:	f007 f869 	bl	94c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    23f2:	b136      	cbz	r6, 2402 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    23f4:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    23f8:	6868      	ldr	r0, [r5, #4]
    23fa:	f006 feae 	bl	915a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    23fe:	2101      	movs	r1, #1
    2400:	e006      	b.n	2410 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    2402:	f104 0158 	add.w	r1, r4, #88	; 0x58
    2406:	6868      	ldr	r0, [r5, #4]
    2408:	f006 fea7 	bl	915a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    240c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    2410:	6868      	ldr	r0, [r5, #4]
    2412:	f006 fea8 	bl	9166 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2416:	e005      	b.n	2424 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    2418:	2106      	movs	r1, #6
    241a:	e000      	b.n	241e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    241c:	2102      	movs	r1, #2
    241e:	6868      	ldr	r0, [r5, #4]
    2420:	f006 fe80 	bl	9124 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2424:	4620      	mov	r0, r4
    2426:	f000 fc31 	bl	2c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>
    242a:	8860      	ldrh	r0, [r4, #2]
    242c:	281d      	cmp	r0, #29
    242e:	d007      	beq.n	2440 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    2430:	2815      	cmp	r0, #21
    2432:	d005      	beq.n	2440 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    2434:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    2438:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    243a:	6868      	ldr	r0, [r5, #4]
    243c:	f006 fe62 	bl	9104 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    2440:	4639      	mov	r1, r7
    2442:	4620      	mov	r0, r4
    2444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2448:	f000 b9f4 	b.w	2834 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    244c:	20000c10 	.word	0x20000c10
    2450:	200000a0 	.word	0x200000a0
    2454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2458:	4d2f      	ldr	r5, [pc, #188]	; (2518 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    245a:	4680      	mov	r8, r0
    245c:	7828      	ldrb	r0, [r5, #0]
    245e:	2802      	cmp	r0, #2
    2460:	d005      	beq.n	246e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    2462:	7828      	ldrb	r0, [r5, #0]
    2464:	2803      	cmp	r0, #3
    2466:	d002      	beq.n	246e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    2468:	f640 512d 	movw	r1, #3373	; 0xd2d
    246c:	e02b      	b.n	24c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    246e:	4c2b      	ldr	r4, [pc, #172]	; (251c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    2470:	6826      	ldr	r6, [r4, #0]
    2472:	7b30      	ldrb	r0, [r6, #12]
    2474:	b118      	cbz	r0, 247e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    2476:	f7ff fb83 	bl	1b80 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    247a:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    247e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    2482:	2700      	movs	r7, #0
    2484:	f1b8 0f00 	cmp.w	r8, #0
    2488:	f89c 0000 	ldrb.w	r0, [ip]
    248c:	f000 060f 	and.w	r6, r0, #15
    2490:	d027      	beq.n	24e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    2492:	6821      	ldr	r1, [r4, #0]
    2494:	09c0      	lsrs	r0, r0, #7
    2496:	f101 0351 	add.w	r3, r1, #81	; 0x51
    249a:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    249e:	f10c 0109 	add.w	r1, ip, #9
    24a2:	f006 fd02 	bl	8eaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    24a6:	b1e0      	cbz	r0, 24e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    24a8:	4639      	mov	r1, r7
    24aa:	6860      	ldr	r0, [r4, #4]
    24ac:	f006 fe1a 	bl	90e4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    24b0:	b1b8      	cbz	r0, 24e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    24b2:	782a      	ldrb	r2, [r5, #0]
    24b4:	6820      	ldr	r0, [r4, #0]
    24b6:	4631      	mov	r1, r6
    24b8:	2a02      	cmp	r2, #2
    24ba:	d007      	beq.n	24cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    24bc:	782a      	ldrb	r2, [r5, #0]
    24be:	2a03      	cmp	r2, #3
    24c0:	d004      	beq.n	24cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    24c2:	f640 5106 	movw	r1, #3334	; 0xd06
    24c6:	202d      	movs	r0, #45	; 0x2d
    24c8:	f7fe fb24 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    24cc:	68a2      	ldr	r2, [r4, #8]
    24ce:	782b      	ldrb	r3, [r5, #0]
    24d0:	6952      	ldr	r2, [r2, #20]
    24d2:	f06f 0607 	mvn.w	r6, #7
    24d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    24da:	58d2      	ldr	r2, [r2, r3]
    24dc:	4790      	blx	r2
    24de:	4606      	mov	r6, r0
    24e0:	e000      	b.n	24e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    24e2:	2601      	movs	r6, #1
    24e4:	7ba8      	ldrb	r0, [r5, #14]
    24e6:	b118      	cbz	r0, 24f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    24e8:	f001 f904 	bl	36f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    24ec:	f001 f822 	bl	3534 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    24f0:	2e00      	cmp	r6, #0
    24f2:	d00f      	beq.n	2514 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    24f4:	6820      	ldr	r0, [r4, #0]
    24f6:	f007 f920 	bl	973a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    24fa:	b130      	cbz	r0, 250a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    24fc:	f001 f91c 	bl	3738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2500:	68a0      	ldr	r0, [r4, #8]
    2502:	6880      	ldr	r0, [r0, #8]
    2504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2508:	4700      	bx	r0
    250a:	6820      	ldr	r0, [r4, #0]
    250c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2510:	f000 bac6 	b.w	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    2514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2518:	20000c10 	.word	0x20000c10
    251c:	200000a0 	.word	0x200000a0
    2520:	b510      	push	{r4, lr}
    2522:	2903      	cmp	r1, #3
    2524:	d002      	beq.n	252c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    2526:	2905      	cmp	r1, #5
    2528:	d10a      	bne.n	2540 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    252a:	e002      	b.n	2532 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    252c:	f000 fb4e 	bl	2bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    2530:	e003      	b.n	253a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    2532:	4904      	ldr	r1, [pc, #16]	; (2544 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    2534:	6809      	ldr	r1, [r1, #0]
    2536:	b109      	cbz	r1, 253c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    2538:	4788      	blx	r1
    253a:	b108      	cbz	r0, 2540 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    253c:	2000      	movs	r0, #0
    253e:	bd10      	pop	{r4, pc}
    2540:	2001      	movs	r0, #1
    2542:	bd10      	pop	{r4, pc}
    2544:	200000ac 	.word	0x200000ac
    2548:	4a09      	ldr	r2, [pc, #36]	; (2570 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    254a:	0003      	movs	r3, r0
    254c:	6810      	ldr	r0, [r2, #0]
    254e:	d001      	beq.n	2554 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    2550:	f000 baa6 	b.w	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    2554:	2900      	cmp	r1, #0
    2556:	d009      	beq.n	256c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    2558:	6891      	ldr	r1, [r2, #8]
    255a:	4a06      	ldr	r2, [pc, #24]	; (2574 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    255c:	6909      	ldr	r1, [r1, #16]
    255e:	7812      	ldrb	r2, [r2, #0]
    2560:	f06f 030f 	mvn.w	r3, #15
    2564:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2568:	5889      	ldr	r1, [r1, r2]
    256a:	4708      	bx	r1
    256c:	4770      	bx	lr
    256e:	0000      	.short	0x0000
    2570:	200000a0 	.word	0x200000a0
    2574:	20000c10 	.word	0x20000c10
    2578:	b570      	push	{r4, r5, r6, lr}
    257a:	4604      	mov	r4, r0
    257c:	8840      	ldrh	r0, [r0, #2]
    257e:	2810      	cmp	r0, #16
    2580:	d019      	beq.n	25b6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    2582:	4d10      	ldr	r5, [pc, #64]	; (25c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    2584:	7ba8      	ldrb	r0, [r5, #14]
    2586:	b120      	cbz	r0, 2592 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    2588:	f000 fff4 	bl	3574 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    258c:	2040      	movs	r0, #64	; 0x40
    258e:	f001 f8bf 	bl	3710 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    2592:	480d      	ldr	r0, [pc, #52]	; (25c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    2594:	6840      	ldr	r0, [r0, #4]
    2596:	f001 faf3 	bl	3b80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    259a:	78a0      	ldrb	r0, [r4, #2]
    259c:	0740      	lsls	r0, r0, #29
    259e:	d404      	bmi.n	25aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    25a0:	2100      	movs	r1, #0
    25a2:	7922      	ldrb	r2, [r4, #4]
    25a4:	4608      	mov	r0, r1
    25a6:	f001 fb73 	bl	3c90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    25aa:	2000      	movs	r0, #0
    25ac:	f001 f9ba 	bl	3924 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    25b0:	2002      	movs	r0, #2
    25b2:	7028      	strb	r0, [r5, #0]
    25b4:	bd70      	pop	{r4, r5, r6, pc}
    25b6:	4620      	mov	r0, r4
    25b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25bc:	2101      	movs	r1, #1
    25be:	f7ff bebf 	b.w	2340 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    25c2:	0000      	.short	0x0000
    25c4:	20000c10 	.word	0x20000c10
    25c8:	200000a0 	.word	0x200000a0
    25cc:	b510      	push	{r4, lr}
    25ce:	4c12      	ldr	r4, [pc, #72]	; (2618 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
    25d0:	6820      	ldr	r0, [r4, #0]
    25d2:	f000 f825 	bl	2620 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    25d6:	6820      	ldr	r0, [r4, #0]
    25d8:	f007 f8af 	bl	973a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    25dc:	2800      	cmp	r0, #0
    25de:	6820      	ldr	r0, [r4, #0]
    25e0:	d00b      	beq.n	25fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
    25e2:	490e      	ldr	r1, [pc, #56]	; (261c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
    25e4:	780a      	ldrb	r2, [r1, #0]
    25e6:	2a02      	cmp	r2, #2
    25e8:	d00b      	beq.n	2602 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    25ea:	780a      	ldrb	r2, [r1, #0]
    25ec:	2a03      	cmp	r2, #3
    25ee:	d008      	beq.n	2602 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    25f0:	f640 4137 	movw	r1, #3127	; 0xc37
    25f4:	202d      	movs	r0, #45	; 0x2d
    25f6:	f7fe fa8d 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    25fe:	f000 ba4f 	b.w	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    2602:	68a2      	ldr	r2, [r4, #8]
    2604:	7809      	ldrb	r1, [r1, #0]
    2606:	68d2      	ldr	r2, [r2, #12]
    2608:	f06f 0307 	mvn.w	r3, #7
    260c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2610:	5851      	ldr	r1, [r2, r1]
    2612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2616:	4708      	bx	r1
    2618:	200000a0 	.word	0x200000a0
    261c:	20000c10 	.word	0x20000c10
    2620:	b510      	push	{r4, lr}
    2622:	7b01      	ldrb	r1, [r0, #12]
    2624:	b121      	cbz	r1, 2630 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
    2626:	4604      	mov	r4, r0
    2628:	f7ff faaa 	bl	1b80 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    262c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2630:	4805      	ldr	r0, [pc, #20]	; (2648 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
    2632:	7b80      	ldrb	r0, [r0, #14]
    2634:	2800      	cmp	r0, #0
    2636:	d005      	beq.n	2644 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
    2638:	f001 f85c 	bl	36f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2640:	f000 bf78 	b.w	3534 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    2644:	bd10      	pop	{r4, pc}
    2646:	0000      	.short	0x0000
    2648:	20000c10 	.word	0x20000c10

0000264c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    264c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2650:	4d5c      	ldr	r5, [pc, #368]	; (27c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    2652:	4604      	mov	r4, r0
    2654:	b086      	sub	sp, #24
    2656:	7828      	ldrb	r0, [r5, #0]
    2658:	bbe8      	cbnz	r0, 26d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    265a:	7820      	ldrb	r0, [r4, #0]
    265c:	28ff      	cmp	r0, #255	; 0xff
    265e:	d04b      	beq.n	26f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    2660:	f04f 0800 	mov.w	r8, #0
    2664:	f8a5 800c 	strh.w	r8, [r5, #12]
    2668:	f8c5 8004 	str.w	r8, [r5, #4]
    266c:	f885 8001 	strb.w	r8, [r5, #1]
    2670:	f885 8002 	strb.w	r8, [r5, #2]
    2674:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    2678:	4b53      	ldr	r3, [pc, #332]	; (27c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    267a:	4e54      	ldr	r6, [pc, #336]	; (27cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    267c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    267e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    2682:	68b0      	ldr	r0, [r6, #8]
    2684:	6840      	ldr	r0, [r0, #4]
    2686:	9003      	str	r0, [sp, #12]
    2688:	4668      	mov	r0, sp
    268a:	f001 f943 	bl	3914 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    268e:	f001 f9d1 	bl	3a34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2692:	f001 f82f 	bl	36f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    2696:	f000 ff4d 	bl	3534 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    269a:	484d      	ldr	r0, [pc, #308]	; (27d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    269c:	f001 fb22 	bl	3ce4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    26a0:	484c      	ldr	r0, [pc, #304]	; (27d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    26a2:	f001 fb29 	bl	3cf8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    26a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    26aa:	4607      	mov	r7, r0
    26ac:	f006 fff8 	bl	96a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    26b0:	4638      	mov	r0, r7
    26b2:	f006 ffba 	bl	962a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    26b6:	4601      	mov	r1, r0
    26b8:	4620      	mov	r0, r4
    26ba:	f006 ff82 	bl	95c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    26be:	f994 000e 	ldrsb.w	r0, [r4, #14]
    26c2:	f001 fa3b 	bl	3b3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    26c6:	7921      	ldrb	r1, [r4, #4]
    26c8:	2000      	movs	r0, #0
    26ca:	f001 f8bf 	bl	384c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    26ce:	2101      	movs	r1, #1
    26d0:	60a8      	str	r0, [r5, #8]
    26d2:	b1a8      	cbz	r0, 2700 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    26d4:	e000      	b.n	26d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    26d6:	e00f      	b.n	26f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    26d8:	f104 0138 	add.w	r1, r4, #56	; 0x38
    26dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    26de:	f006 fb55 	bl	8d8c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    26e2:	4607      	mov	r7, r0
    26e4:	f104 0140 	add.w	r1, r4, #64	; 0x40
    26e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    26ea:	f006 fb52 	bl	8d92 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    26ee:	b14f      	cbz	r7, 2704 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    26f0:	f894 1020 	ldrb.w	r1, [r4, #32]
    26f4:	b951      	cbnz	r1, 270c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    26f6:	e005      	b.n	2704 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    26f8:	200c      	movs	r0, #12
    26fa:	b006      	add	sp, #24
    26fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2700:	7029      	strb	r1, [r5, #0]
    2702:	e05c      	b.n	27be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    2704:	b120      	cbz	r0, 2710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    2706:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    270a:	b108      	cbz	r0, 2710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    270c:	2701      	movs	r7, #1
    270e:	e000      	b.n	2712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    2710:	2700      	movs	r7, #0
    2712:	7ea0      	ldrb	r0, [r4, #26]
    2714:	b920      	cbnz	r0, 2720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    2716:	7e20      	ldrb	r0, [r4, #24]
    2718:	b910      	cbnz	r0, 2720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    271a:	78a0      	ldrb	r0, [r4, #2]
    271c:	0740      	lsls	r0, r0, #29
    271e:	d523      	bpl.n	2768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    2720:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    2724:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2728:	4050      	eors	r0, r2
    272a:	ea70 0101 	orns	r1, r0, r1
    272e:	d006      	beq.n	273e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    2730:	f007 fec2 	bl	a4b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2734:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    2738:	1a80      	subs	r0, r0, r2
    273a:	4199      	sbcs	r1, r3
    273c:	d200      	bcs.n	2740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    273e:	b19f      	cbz	r7, 2768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    2740:	f7ff f900 	bl	1944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    2744:	4924      	ldr	r1, [pc, #144]	; (27d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    2746:	fba0 2301 	umull	r2, r3, r0, r1
    274a:	f104 0048 	add.w	r0, r4, #72	; 0x48
    274e:	f006 ff43 	bl	95d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    2752:	2101      	movs	r1, #1
    2754:	4620      	mov	r0, r4
    2756:	f006 fef8 	bl	954a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    275a:	78a0      	ldrb	r0, [r4, #2]
    275c:	0740      	lsls	r0, r0, #29
    275e:	d503      	bpl.n	2768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    2760:	2101      	movs	r1, #1
    2762:	4620      	mov	r0, r4
    2764:	f000 fa64 	bl	2c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    2768:	6870      	ldr	r0, [r6, #4]
    276a:	1cc0      	adds	r0, r0, #3
    276c:	f006 fc02 	bl	8f74 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    2770:	73a8      	strb	r0, [r5, #14]
    2772:	78a0      	ldrb	r0, [r4, #2]
    2774:	07c0      	lsls	r0, r0, #31
    2776:	d022      	beq.n	27be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    2778:	f8cd 8010 	str.w	r8, [sp, #16]
    277c:	20ff      	movs	r0, #255	; 0xff
    277e:	f8cd 8014 	str.w	r8, [sp, #20]
    2782:	73e8      	strb	r0, [r5, #15]
    2784:	69e6      	ldr	r6, [r4, #28]
    2786:	f106 070a 	add.w	r7, r6, #10
    278a:	e013      	b.n	27b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    278c:	9c04      	ldr	r4, [sp, #16]
    278e:	42b4      	cmp	r4, r6
    2790:	d010      	beq.n	27b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    2792:	7a72      	ldrb	r2, [r6, #9]
    2794:	7a60      	ldrb	r0, [r4, #9]
    2796:	463b      	mov	r3, r7
    2798:	f104 010a 	add.w	r1, r4, #10
    279c:	f006 fb85 	bl	8eaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    27a0:	b140      	cbz	r0, 27b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    27a2:	78a0      	ldrb	r0, [r4, #2]
    27a4:	73e8      	strb	r0, [r5, #15]
    27a6:	f8d4 0003 	ldr.w	r0, [r4, #3]
    27aa:	6128      	str	r0, [r5, #16]
    27ac:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    27b0:	82a8      	strh	r0, [r5, #20]
    27b2:	e004      	b.n	27be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    27b4:	a804      	add	r0, sp, #16
    27b6:	f7fe fce5 	bl	1184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    27ba:	2800      	cmp	r0, #0
    27bc:	d0e6      	beq.n	278c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    27be:	2000      	movs	r0, #0
    27c0:	e79b      	b.n	26fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    27c2:	0000      	.short	0x0000
    27c4:	20000c10 	.word	0x20000c10
    27c8:	00002cb0 	.word	0x00002cb0
    27cc:	200000a0 	.word	0x200000a0
    27d0:	8e89bed6 	.word	0x8e89bed6
    27d4:	00555555 	.word	0x00555555
    27d8:	000f4240 	.word	0x000f4240
    27dc:	b510      	push	{r4, lr}
    27de:	4604      	mov	r4, r0
    27e0:	f7ff ff34 	bl	264c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    27e4:	2800      	cmp	r0, #0
    27e6:	d108      	bne.n	27fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    27e8:	4804      	ldr	r0, [pc, #16]	; (27fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    27ea:	7800      	ldrb	r0, [r0, #0]
    27ec:	2801      	cmp	r0, #1
    27ee:	d003      	beq.n	27f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    27f0:	2100      	movs	r1, #0
    27f2:	4620      	mov	r0, r4
    27f4:	f7ff fda4 	bl	2340 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    27f8:	2000      	movs	r0, #0
    27fa:	bd10      	pop	{r4, pc}
    27fc:	20000c10 	.word	0x20000c10
    2800:	480a      	ldr	r0, [pc, #40]	; (282c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    2802:	b510      	push	{r4, lr}
    2804:	490a      	ldr	r1, [pc, #40]	; (2830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    2806:	6804      	ldr	r4, [r0, #0]
    2808:	7808      	ldrb	r0, [r1, #0]
    280a:	2800      	cmp	r0, #0
    280c:	d00d      	beq.n	282a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    280e:	7808      	ldrb	r0, [r1, #0]
    2810:	2802      	cmp	r0, #2
    2812:	d002      	beq.n	281a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    2814:	7808      	ldrb	r0, [r1, #0]
    2816:	2803      	cmp	r0, #3
    2818:	d102      	bne.n	2820 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    281a:	4620      	mov	r0, r4
    281c:	f7ff ff00 	bl	2620 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    2820:	4620      	mov	r0, r4
    2822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2826:	f000 b93b 	b.w	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    282a:	bd10      	pop	{r4, pc}
    282c:	200000a0 	.word	0x200000a0
    2830:	20000c10 	.word	0x20000c10
    2834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2838:	4604      	mov	r4, r0
    283a:	4829      	ldr	r0, [pc, #164]	; (28e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    283c:	460d      	mov	r5, r1
    283e:	6840      	ldr	r0, [r0, #4]
    2840:	f001 f99e 	bl	3b80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2844:	4e27      	ldr	r6, [pc, #156]	; (28e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    2846:	2004      	movs	r0, #4
    2848:	7030      	strb	r0, [r6, #0]
    284a:	b355      	cbz	r5, 28a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    284c:	8860      	ldrh	r0, [r4, #2]
    284e:	2810      	cmp	r0, #16
    2850:	d023      	beq.n	289a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    2852:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2856:	4680      	mov	r8, r0
    2858:	68b5      	ldr	r5, [r6, #8]
    285a:	f006 feda 	bl	9612 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    285e:	4607      	mov	r7, r0
    2860:	4640      	mov	r0, r8
    2862:	f006 feff 	bl	9664 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    2866:	1a38      	subs	r0, r7, r0
    2868:	1e40      	subs	r0, r0, #1
    286a:	b2c0      	uxtb	r0, r0
    286c:	8861      	ldrh	r1, [r4, #2]
    286e:	2228      	movs	r2, #40	; 0x28
    2870:	f000 fa5a 	bl	2d28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    2874:	4405      	add	r5, r0
    2876:	78a0      	ldrb	r0, [r4, #2]
    2878:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    287c:	b130      	cbz	r0, 288c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    287e:	6870      	ldr	r0, [r6, #4]
    2880:	4405      	add	r5, r0
    2882:	f006 ff48 	bl	9716 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    2886:	4428      	add	r0, r5
    2888:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    288c:	7922      	ldrb	r2, [r4, #4]
    288e:	4629      	mov	r1, r5
    2890:	2000      	movs	r0, #0
    2892:	f001 f98b 	bl	3bac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    2896:	b920      	cbnz	r0, 28a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    2898:	e00c      	b.n	28b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    289a:	7921      	ldrb	r1, [r4, #4]
    289c:	2000      	movs	r0, #0
    289e:	f000 ff9b 	bl	37d8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    28a2:	8860      	ldrh	r0, [r4, #2]
    28a4:	2813      	cmp	r0, #19
    28a6:	d011      	beq.n	28cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    28a8:	dc07      	bgt.n	28ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    28aa:	2810      	cmp	r0, #16
    28ac:	d015      	beq.n	28da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    28ae:	2812      	cmp	r0, #18
    28b0:	d107      	bne.n	28c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    28b2:	e00b      	b.n	28cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    28b4:	f640 51a8 	movw	r1, #3496	; 0xda8
    28b8:	e005      	b.n	28c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    28ba:	2815      	cmp	r0, #21
    28bc:	d006      	beq.n	28cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    28be:	281d      	cmp	r0, #29
    28c0:	d004      	beq.n	28cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    28c2:	f640 51bc 	movw	r1, #3516	; 0xdbc
    28c6:	202d      	movs	r0, #45	; 0x2d
    28c8:	f7fe f924 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28cc:	7922      	ldrb	r2, [r4, #4]
    28ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28d2:	2101      	movs	r1, #1
    28d4:	2000      	movs	r0, #0
    28d6:	f001 b9db 	b.w	3c90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    28da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28de:	0000      	.short	0x0000
    28e0:	200000a0 	.word	0x200000a0
    28e4:	20000c10 	.word	0x20000c10
    28e8:	b538      	push	{r3, r4, r5, lr}
    28ea:	4604      	mov	r4, r0
    28ec:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    28f0:	460b      	mov	r3, r1
    28f2:	f88d 0000 	strb.w	r0, [sp]
    28f6:	9800      	ldr	r0, [sp, #0]
    28f8:	9000      	str	r0, [sp, #0]
    28fa:	f89d 0000 	ldrb.w	r0, [sp]
    28fe:	2800      	cmp	r0, #0
    2900:	d13a      	bne.n	2978 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    2902:	7820      	ldrb	r0, [r4, #0]
    2904:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    2908:	2bff      	cmp	r3, #255	; 0xff
    290a:	d010      	beq.n	292e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    290c:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    2910:	1e51      	subs	r1, r2, #1
    2912:	4618      	mov	r0, r3
    2914:	f7fe fffc 	bl	1910 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    2918:	b130      	cbz	r0, 2928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    291a:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    291e:	f040 0002 	orr.w	r0, r0, #2
    2922:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    2926:	e011      	b.n	294c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    2928:	f241 0118 	movw	r1, #4120	; 0x1018
    292c:	e021      	b.n	2972 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    292e:	4813      	ldr	r0, [pc, #76]	; (297c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    2930:	6840      	ldr	r0, [r0, #4]
    2932:	7801      	ldrb	r1, [r0, #0]
    2934:	f3c1 1180 	ubfx	r1, r1, #6, #1
    2938:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    293c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    2940:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    2944:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    2948:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    294c:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    2950:	287f      	cmp	r0, #127	; 0x7f
    2952:	d00c      	beq.n	296e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    2954:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    2958:	207f      	movs	r0, #127	; 0x7f
    295a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    295e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    2962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2966:	2202      	movs	r2, #2
    2968:	4905      	ldr	r1, [pc, #20]	; (2980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    296a:	f006 bc62 	b.w	9232 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    296e:	f640 616c 	movw	r1, #3692	; 0xe6c
    2972:	202d      	movs	r0, #45	; 0x2d
    2974:	f7fe f8ce 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2978:	bd38      	pop	{r3, r4, r5, pc}
    297a:	0000      	.short	0x0000
    297c:	200000a0 	.word	0x200000a0
    2980:	00009533 	.word	0x00009533
    2984:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2988:	4616      	mov	r6, r2
    298a:	4604      	mov	r4, r0
    298c:	2903      	cmp	r1, #3
    298e:	d004      	beq.n	299a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    2990:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    2994:	b108      	cbz	r0, 299a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    2996:	2001      	movs	r0, #1
    2998:	e000      	b.n	299c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    299a:	2000      	movs	r0, #0
    299c:	2500      	movs	r5, #0
    299e:	2903      	cmp	r1, #3
    29a0:	d003      	beq.n	29aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    29a2:	2701      	movs	r7, #1
    29a4:	2905      	cmp	r1, #5
    29a6:	d005      	beq.n	29b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    29a8:	e008      	b.n	29bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    29aa:	78a1      	ldrb	r1, [r4, #2]
    29ac:	2702      	movs	r7, #2
    29ae:	f3c1 0140 	ubfx	r1, r1, #1, #1
    29b2:	e001      	b.n	29b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    29b4:	78a1      	ldrb	r1, [r4, #2]
    29b6:	07c9      	lsls	r1, r1, #31
    29b8:	2900      	cmp	r1, #0
    29ba:	d06b      	beq.n	2a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    29bc:	2800      	cmp	r0, #0
    29be:	d169      	bne.n	2a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    29c0:	4835      	ldr	r0, [pc, #212]	; (2a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    29c2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2a9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    29c6:	7b80      	ldrb	r0, [r0, #14]
    29c8:	b180      	cbz	r0, 29ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    29ca:	f006 fad6 	bl	8f7a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    29ce:	7030      	strb	r0, [r6, #0]
    29d0:	28ff      	cmp	r0, #255	; 0xff
    29d2:	d014      	beq.n	29fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    29d4:	b2c0      	uxtb	r0, r0
    29d6:	466a      	mov	r2, sp
    29d8:	a902      	add	r1, sp, #8
    29da:	f7fe ff99 	bl	1910 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    29de:	b148      	cbz	r0, 29f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    29e0:	4669      	mov	r1, sp
    29e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    29e6:	f006 fc56 	bl	9296 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    29ea:	4605      	mov	r5, r0
    29ec:	7830      	ldrb	r0, [r6, #0]
    29ee:	28ff      	cmp	r0, #255	; 0xff
    29f0:	d005      	beq.n	29fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    29f2:	e00d      	b.n	2a10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    29f4:	f640 719b 	movw	r1, #3995	; 0xf9b
    29f8:	202d      	movs	r0, #45	; 0x2d
    29fa:	f7fe f88b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2a02:	f811 0b03 	ldrb.w	r0, [r1], #3
    2a06:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2a0a:	f006 fc44 	bl	9296 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    2a0e:	4605      	mov	r5, r0
    2a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2a14:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    2a18:	f104 0358 	add.w	r3, r4, #88	; 0x58
    2a1c:	f811 0b03 	ldrb.w	r0, [r1], #3
    2a20:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2a24:	f006 fa41 	bl	8eaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    2a28:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2a2c:	4680      	mov	r8, r0
    2a2e:	f811 0b03 	ldrb.w	r0, [r1], #3
    2a32:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2a36:	f006 faaa 	bl	8f8e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    2a3a:	4681      	mov	r9, r0
    2a3c:	f7fe ff88 	bl	1950 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    2a40:	b138      	cbz	r0, 2a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    2a42:	4648      	mov	r0, r9
    2a44:	f7fe ff44 	bl	18d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2a48:	b118      	cbz	r0, 2a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    2a4a:	2110      	movs	r1, #16
    2a4c:	f006 fb0e 	bl	906c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    2a50:	b138      	cbz	r0, 2a62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    2a52:	2100      	movs	r1, #0
    2a54:	7830      	ldrb	r0, [r6, #0]
    2a56:	28ff      	cmp	r0, #255	; 0xff
    2a58:	d00c      	beq.n	2a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    2a5a:	f1b8 0f00 	cmp.w	r8, #0
    2a5e:	d105      	bne.n	2a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    2a60:	e001      	b.n	2a66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    2a62:	2101      	movs	r1, #1
    2a64:	e7f6      	b.n	2a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    2a66:	7e62      	ldrb	r2, [r4, #25]
    2a68:	4282      	cmp	r2, r0
    2a6a:	d101      	bne.n	2a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    2a6c:	2001      	movs	r0, #1
    2a6e:	e003      	b.n	2a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    2a70:	2000      	movs	r0, #0
    2a72:	e001      	b.n	2a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    2a74:	ea28 0001 	bic.w	r0, r8, r1
    2a78:	78a2      	ldrb	r2, [r4, #2]
    2a7a:	0752      	lsls	r2, r2, #29
    2a7c:	d501      	bpl.n	2a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    2a7e:	b930      	cbnz	r0, 2a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    2a80:	e008      	b.n	2a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    2a82:	b939      	cbnz	r1, 2a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    2a84:	b91d      	cbnz	r5, 2a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    2a86:	7be0      	ldrb	r0, [r4, #15]
    2a88:	b108      	cbz	r0, 2a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    2a8a:	42b8      	cmp	r0, r7
    2a8c:	d102      	bne.n	2a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    2a8e:	2001      	movs	r0, #1
    2a90:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2a94:	2000      	movs	r0, #0
    2a96:	e7fb      	b.n	2a90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    2a98:	20000c10 	.word	0x20000c10
    2a9c:	200000a0 	.word	0x200000a0
    2aa0:	b570      	push	{r4, r5, r6, lr}
    2aa2:	4604      	mov	r4, r0
    2aa4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    2aa6:	4d10      	ldr	r5, [pc, #64]	; (2ae8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    2aa8:	1c40      	adds	r0, r0, #1
    2aaa:	8620      	strh	r0, [r4, #48]	; 0x30
    2aac:	7ba8      	ldrb	r0, [r5, #14]
    2aae:	2600      	movs	r6, #0
    2ab0:	b120      	cbz	r0, 2abc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    2ab2:	f000 fe1f 	bl	36f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    2ab6:	f000 fd3d 	bl	3534 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    2aba:	73ae      	strb	r6, [r5, #14]
    2abc:	702e      	strb	r6, [r5, #0]
    2abe:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    2ac2:	b108      	cbz	r0, 2ac8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    2ac4:	2101      	movs	r1, #1
    2ac6:	e00a      	b.n	2ade <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    2ac8:	7b60      	ldrb	r0, [r4, #13]
    2aca:	b138      	cbz	r0, 2adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    2acc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    2ace:	4288      	cmp	r0, r1
    2ad0:	d804      	bhi.n	2adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    2ad2:	2101      	movs	r1, #1
    2ad4:	4620      	mov	r0, r4
    2ad6:	f006 fe42 	bl	975e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    2adc:	2100      	movs	r1, #0
    2ade:	4620      	mov	r0, r4
    2ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ae4:	f006 be3b 	b.w	975e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    2ae8:	20000c10 	.word	0x20000c10
    2aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2af0:	4604      	mov	r4, r0
    2af2:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    2af6:	8808      	ldrh	r0, [r1, #0]
    2af8:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    2afc:	20ff      	movs	r0, #255	; 0xff
    2afe:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    2b02:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2b06:	4616      	mov	r6, r2
    2b08:	460d      	mov	r5, r1
    2b0a:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d14b      	bne.n	2baa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    2b12:	6928      	ldr	r0, [r5, #16]
    2b14:	f006 fa63 	bl	8fde <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    2b18:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    2b1c:	8b28      	ldrh	r0, [r5, #24]
    2b1e:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    2b22:	8b68      	ldrh	r0, [r5, #26]
    2b24:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    2b28:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    2b2c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    2b30:	7e20      	ldrb	r0, [r4, #24]
    2b32:	f104 0151 	add.w	r1, r4, #81	; 0x51
    2b36:	460f      	mov	r7, r1
    2b38:	2500      	movs	r5, #0
    2b3a:	b120      	cbz	r0, 2b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    2b3c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    2b40:	f006 fbd5 	bl	92ee <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    2b44:	b940      	cbnz	r0, 2b58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    2b46:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2b4a:	b170      	cbz	r0, 2b6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    2b4c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    2b50:	4639      	mov	r1, r7
    2b52:	f006 fbc3 	bl	92dc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    2b56:	b140      	cbz	r0, 2b6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    2b58:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    2b5c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    2b60:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    2b64:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    2b68:	e003      	b.n	2b72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    2b6a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    2b6e:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    2b72:	4815      	ldr	r0, [pc, #84]	; (2bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
    2b74:	2eff      	cmp	r6, #255	; 0xff
    2b76:	6840      	ldr	r0, [r0, #4]
    2b78:	7801      	ldrb	r1, [r0, #0]
    2b7a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    2b7e:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    2b82:	f850 1f03 	ldr.w	r1, [r0, #3]!
    2b86:	d017      	beq.n	2bb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
    2b88:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    2b8c:	8880      	ldrh	r0, [r0, #4]
    2b8e:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    2b92:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    2b96:	1e51      	subs	r1, r2, #1
    2b98:	4630      	mov	r0, r6
    2b9a:	f7fe feb9 	bl	1910 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    2b9e:	b130      	cbz	r0, 2bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
    2ba0:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    2ba4:	f040 0002 	orr.w	r0, r0, #2
    2ba8:	7020      	strb	r0, [r4, #0]
    2baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bae:	f640 418b 	movw	r1, #3211	; 0xc8b
    2bb2:	202d      	movs	r0, #45	; 0x2d
    2bb4:	f7fd ffae 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bb8:	f844 1f7a 	str.w	r1, [r4, #122]!
    2bbc:	8880      	ldrh	r0, [r0, #4]
    2bbe:	80a0      	strh	r0, [r4, #4]
    2bc0:	60e5      	str	r5, [r4, #12]
    2bc2:	8225      	strh	r5, [r4, #16]
    2bc4:	e7f1      	b.n	2baa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    2bc6:	0000      	.short	0x0000
    2bc8:	200000a0 	.word	0x200000a0
    2bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bce:	4604      	mov	r4, r0
    2bd0:	20ff      	movs	r0, #255	; 0xff
    2bd2:	f88d 0000 	strb.w	r0, [sp]
    2bd6:	2501      	movs	r5, #1
    2bd8:	466a      	mov	r2, sp
    2bda:	2103      	movs	r1, #3
    2bdc:	4620      	mov	r0, r4
    2bde:	f7ff fed1 	bl	2984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    2be2:	b1e8      	cbz	r0, 2c20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
    2be4:	7b20      	ldrb	r0, [r4, #12]
    2be6:	b120      	cbz	r0, 2bf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a6>
    2be8:	f89d 1000 	ldrb.w	r1, [sp]
    2bec:	4620      	mov	r0, r4
    2bee:	f7ff fe7b 	bl	28e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    2bf2:	4e0d      	ldr	r6, [pc, #52]	; (2c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    2bf4:	2100      	movs	r1, #0
    2bf6:	6870      	ldr	r0, [r6, #4]
    2bf8:	8001      	strh	r1, [r0, #0]
    2bfa:	2104      	movs	r1, #4
    2bfc:	f006 fa92 	bl	9124 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2c00:	4620      	mov	r0, r4
    2c02:	f000 f843 	bl	2c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>
    2c06:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    2c0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2c0c:	6870      	ldr	r0, [r6, #4]
    2c0e:	f006 fac0 	bl	9192 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    2c12:	4906      	ldr	r1, [pc, #24]	; (2c2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    2c14:	2005      	movs	r0, #5
    2c16:	7008      	strb	r0, [r1, #0]
    2c18:	6870      	ldr	r0, [r6, #4]
    2c1a:	f000 ffb1 	bl	3b80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2c1e:	e000      	b.n	2c22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    2c20:	2500      	movs	r5, #0
    2c22:	4628      	mov	r0, r5
    2c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c26:	0000      	.short	0x0000
    2c28:	200000a0 	.word	0x200000a0
    2c2c:	20000c10 	.word	0x20000c10
    2c30:	b570      	push	{r4, r5, r6, lr}
    2c32:	4604      	mov	r4, r0
    2c34:	460e      	mov	r6, r1
    2c36:	7e40      	ldrb	r0, [r0, #25]
    2c38:	f7fe fe4a 	bl	18d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2c3c:	0005      	movs	r5, r0
    2c3e:	d019      	beq.n	2c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
    2c40:	2110      	movs	r1, #16
    2c42:	f006 fa13 	bl	906c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    2c46:	2800      	cmp	r0, #0
    2c48:	d114      	bne.n	2c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
    2c4a:	2001      	movs	r0, #1
    2c4c:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    2c50:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    2c54:	4632      	mov	r2, r6
    2c56:	460c      	mov	r4, r1
    2c58:	4628      	mov	r0, r5
    2c5a:	f006 f956 	bl	8f0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    2c5e:	4621      	mov	r1, r4
    2c60:	4c05      	ldr	r4, [pc, #20]	; (2c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62c>)
    2c62:	6860      	ldr	r0, [r4, #4]
    2c64:	f006 fa79 	bl	915a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    2c68:	6860      	ldr	r0, [r4, #4]
    2c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2c6e:	2101      	movs	r1, #1
    2c70:	f006 ba79 	b.w	9166 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2c74:	bd70      	pop	{r4, r5, r6, pc}
    2c76:	0000      	.short	0x0000
    2c78:	200000a0 	.word	0x200000a0
    2c7c:	4802      	ldr	r0, [pc, #8]	; (2c88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
    2c7e:	2101      	movs	r1, #1
    2c80:	6800      	ldr	r0, [r0, #0]
    2c82:	f7ff bb5d 	b.w	2340 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    2c86:	0000      	.short	0x0000
    2c88:	200000a0 	.word	0x200000a0
    2c8c:	b570      	push	{r4, r5, r6, lr}
    2c8e:	4d07      	ldr	r5, [pc, #28]	; (2cac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>)
    2c90:	4604      	mov	r4, r0
    2c92:	f100 0151 	add.w	r1, r0, #81	; 0x51
    2c96:	6868      	ldr	r0, [r5, #4]
    2c98:	f006 fa6c 	bl	9174 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    2c9c:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    2ca0:	6868      	ldr	r0, [r5, #4]
    2ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ca6:	f006 ba6b 	b.w	9180 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    2caa:	0000      	.short	0x0000
    2cac:	200000a0 	.word	0x200000a0
    2cb0:	000025cd 	.word	0x000025cd
    2cb4:	00002455 	.word	0x00002455
    2cb8:	00002549 	.word	0x00002549
    2cbc:	00000000 	.word	0x00000000
    2cc0:	00002521 	.word	0x00002521
    2cc4:	00002579 	.word	0x00002579
    2cc8:	000094d7 	.word	0x000094d7
    2ccc:	000094dd 	.word	0x000094dd
    2cd0:	000027dd 	.word	0x000027dd
    2cd4:	00002801 	.word	0x00002801
    2cd8:	00002c7d 	.word	0x00002c7d
    2cdc:	00002ccc 	.word	0x00002ccc
    2ce0:	00002cc4 	.word	0x00002cc4
    2ce4:	00002cc0 	.word	0x00002cc0

00002ce8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    2ce8:	b510      	push	{r4, lr}
    2cea:	1e42      	subs	r2, r0, #1
    2cec:	2a02      	cmp	r2, #2
    2cee:	d901      	bls.n	2cf4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    2cf0:	21ca      	movs	r1, #202	; 0xca
    2cf2:	e009      	b.n	2d08 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    2cf4:	1e40      	subs	r0, r0, #1
    2cf6:	2910      	cmp	r1, #16
    2cf8:	d009      	beq.n	2d0e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    2cfa:	2912      	cmp	r1, #18
    2cfc:	d00c      	beq.n	2d18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    2cfe:	2913      	cmp	r1, #19
    2d00:	d00a      	beq.n	2d18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    2d02:	2915      	cmp	r1, #21
    2d04:	d005      	beq.n	2d12 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    2d06:	21d8      	movs	r1, #216	; 0xd8
    2d08:	202f      	movs	r0, #47	; 0x2f
    2d0a:	f7fd ff03 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d0e:	4905      	ldr	r1, [pc, #20]	; (2d24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2d10:	e004      	b.n	2d1c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    2d12:	4904      	ldr	r1, [pc, #16]	; (2d24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2d14:	1d89      	adds	r1, r1, #6
    2d16:	e001      	b.n	2d1c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    2d18:	4902      	ldr	r1, [pc, #8]	; (2d24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2d1a:	1f89      	subs	r1, r1, #6
    2d1c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    2d20:	bd10      	pop	{r4, pc}
    2d22:	0000      	.short	0x0000
    2d24:	0000972e 	.word	0x0000972e

00002d28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    2d28:	1e42      	subs	r2, r0, #1
    2d2a:	b510      	push	{r4, lr}
    2d2c:	b2d2      	uxtb	r2, r2
    2d2e:	2a01      	cmp	r2, #1
    2d30:	d903      	bls.n	2d3a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    2d32:	291d      	cmp	r1, #29
    2d34:	d001      	beq.n	2d3a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    2d36:	21ee      	movs	r1, #238	; 0xee
    2d38:	e00d      	b.n	2d56 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    2d3a:	2913      	cmp	r1, #19
    2d3c:	d013      	beq.n	2d66 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    2d3e:	dc04      	bgt.n	2d4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    2d40:	2910      	cmp	r1, #16
    2d42:	d00b      	beq.n	2d5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    2d44:	2912      	cmp	r1, #18
    2d46:	d104      	bne.n	2d52 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    2d48:	e00d      	b.n	2d66 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    2d4a:	2915      	cmp	r1, #21
    2d4c:	d008      	beq.n	2d60 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    2d4e:	291d      	cmp	r1, #29
    2d50:	d00e      	beq.n	2d70 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    2d52:	f44f 7181 	mov.w	r1, #258	; 0x102
    2d56:	202f      	movs	r0, #47	; 0x2f
    2d58:	f7fd fedc 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d5c:	4807      	ldr	r0, [pc, #28]	; (2d7c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    2d5e:	e004      	b.n	2d6a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    2d60:	4806      	ldr	r0, [pc, #24]	; (2d7c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    2d62:	3008      	adds	r0, #8
    2d64:	e001      	b.n	2d6a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    2d66:	4805      	ldr	r0, [pc, #20]	; (2d7c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    2d68:	1d00      	adds	r0, r0, #4
    2d6a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    2d6e:	bd10      	pop	{r4, pc}
    2d70:	f240 315a 	movw	r1, #858	; 0x35a
    2d74:	fb10 f001 	smulbb	r0, r0, r1
    2d78:	bd10      	pop	{r4, pc}
    2d7a:	0000      	.short	0x0000
    2d7c:	0000971c 	.word	0x0000971c

00002d80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    2d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d84:	4604      	mov	r4, r0
    2d86:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    2d8a:	4616      	mov	r6, r2
    2d8c:	460f      	mov	r7, r1
    2d8e:	2800      	cmp	r0, #0
    2d90:	d15e      	bne.n	2e50 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    2d92:	4621      	mov	r1, r4
    2d94:	484d      	ldr	r0, [pc, #308]	; (2ecc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    2d96:	f003 fc99 	bl	66cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    2d9a:	4605      	mov	r5, r0
    2d9c:	2820      	cmp	r0, #32
    2d9e:	d057      	beq.n	2e50 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    2da0:	2250      	movs	r2, #80	; 0x50
    2da2:	2100      	movs	r1, #0
    2da4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    2da8:	f007 fd92 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2dac:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    2db0:	2501      	movs	r5, #1
    2db2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    2db6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    2dba:	b137      	cbz	r7, 2dca <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    2dbc:	f7ff f888 	bl	1ed0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    2dc0:	f000 0007 	and.w	r0, r0, #7
    2dc4:	1c40      	adds	r0, r0, #1
    2dc6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    2dca:	4620      	mov	r0, r4
    2dcc:	f006 fd92 	bl	98f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    2dd0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    2dd4:	2002      	movs	r0, #2
    2dd6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    2dda:	46a8      	mov	r8, r5
    2ddc:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    2de0:	2500      	movs	r5, #0
    2de2:	f804 5fe8 	strb.w	r5, [r4, #232]!
    2de6:	f004 fd97 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2dea:	4607      	mov	r7, r0
    2dec:	f007 fb5b 	bl	a4a6 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    2df0:	8921      	ldrh	r1, [r4, #8]
    2df2:	3ce8      	subs	r4, #232	; 0xe8
    2df4:	4288      	cmp	r0, r1
    2df6:	d800      	bhi.n	2dfa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    2df8:	4608      	mov	r0, r1
    2dfa:	4438      	add	r0, r7
    2dfc:	30ce      	adds	r0, #206	; 0xce
    2dfe:	b287      	uxth	r7, r0
    2e00:	4620      	mov	r0, r4
    2e02:	f006 fb27 	bl	9454 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    2e06:	b330      	cbz	r0, 2e56 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    2e08:	f007 fa9b 	bl	a342 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    2e0c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    2e10:	b281      	uxth	r1, r0
    2e12:	4630      	mov	r0, r6
    2e14:	f004 fe82 	bl	7b1c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2e18:	4430      	add	r0, r6
    2e1a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    2e1e:	3490      	adds	r4, #144	; 0x90
    2e20:	f007 fb4a 	bl	a4b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2e24:	19c0      	adds	r0, r0, r7
    2e26:	4169      	adcs	r1, r5
    2e28:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    2e2c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    2e30:	f824 5c6e 	strh.w	r5, [r4, #-110]
    2e34:	2001      	movs	r0, #1
    2e36:	f006 fc6a 	bl	970e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    2e3a:	f200 1015 	addw	r0, r0, #277	; 0x115
    2e3e:	1a30      	subs	r0, r6, r0
    2e40:	6460      	str	r0, [r4, #68]	; 0x44
    2e42:	f04f 30ff 	mov.w	r0, #4294967295
    2e46:	0841      	lsrs	r1, r0, #1
    2e48:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2e4c:	3c90      	subs	r4, #144	; 0x90
    2e4e:	e025      	b.n	2e9c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    2e50:	200c      	movs	r0, #12
    2e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e56:	2100      	movs	r1, #0
    2e58:	4620      	mov	r0, r4
    2e5a:	f006 fd18 	bl	988e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    2e5e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2ed0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    2e62:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    2e66:	2000      	movs	r0, #0
    2e68:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    2e6c:	b149      	cbz	r1, 2e82 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    2e6e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    2e70:	b139      	cbz	r1, 2e82 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    2e72:	f7ff f82d 	bl	1ed0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    2e76:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    2e7a:	fbb0 f2f1 	udiv	r2, r0, r1
    2e7e:	fb01 0012 	mls	r0, r1, r2, r0
    2e82:	4407      	add	r7, r0
    2e84:	f007 fb18 	bl	a4b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2e88:	19c0      	adds	r0, r0, r7
    2e8a:	4169      	adcs	r1, r5
    2e8c:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    2e90:	b19e      	cbz	r6, 2eba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    2e92:	1980      	adds	r0, r0, r6
    2e94:	eb51 0105 	adcs.w	r1, r1, r5
    2e98:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    2e9c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    2ea0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    2ea4:	f006 fd24 	bl	98f0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    2ea8:	b158      	cbz	r0, 2ec2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    2eaa:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    2eae:	2100      	movs	r1, #0
    2eb0:	4620      	mov	r0, r4
    2eb2:	f006 faff 	bl	94b4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    2eb6:	2000      	movs	r0, #0
    2eb8:	e7cb      	b.n	2e52 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    2eba:	f04f 30ff 	mov.w	r0, #4294967295
    2ebe:	0841      	lsrs	r1, r0, #1
    2ec0:	e7ea      	b.n	2e98 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    2ec2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    2ec6:	2030      	movs	r0, #48	; 0x30
    2ec8:	f7fd fe24 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ecc:	000099d5 	.word	0x000099d5
    2ed0:	200000b0 	.word	0x200000b0

00002ed4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    2ed4:	4901      	ldr	r1, [pc, #4]	; (2edc <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    2ed6:	8088      	strh	r0, [r1, #4]
    2ed8:	4770      	bx	lr
    2eda:	0000      	.short	0x0000
    2edc:	200000b0 	.word	0x200000b0

00002ee0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    2ee0:	4805      	ldr	r0, [pc, #20]	; (2ef8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    2ee2:	2100      	movs	r1, #0
    2ee4:	7001      	strb	r1, [r0, #0]
    2ee6:	2201      	movs	r2, #1
    2ee8:	7082      	strb	r2, [r0, #2]
    2eea:	7041      	strb	r1, [r0, #1]
    2eec:	f242 7110 	movw	r1, #10000	; 0x2710
    2ef0:	8081      	strh	r1, [r0, #4]
    2ef2:	f000 b803 	b.w	2efc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    2ef6:	0000      	.short	0x0000
    2ef8:	200000b0 	.word	0x200000b0

00002efc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    2efc:	b51c      	push	{r2, r3, r4, lr}
    2efe:	4909      	ldr	r1, [pc, #36]	; (2f24 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    2f00:	e9d1 0100 	ldrd	r0, r1, [r1]
    2f04:	e9cd 0100 	strd	r0, r1, [sp]
    2f08:	e002      	b.n	2f10 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    2f0a:	9800      	ldr	r0, [sp, #0]
    2f0c:	f006 fc3b 	bl	9786 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    2f10:	4668      	mov	r0, sp
    2f12:	f7fe f937 	bl	1184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    2f16:	2800      	cmp	r0, #0
    2f18:	d0f7      	beq.n	2f0a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    2f1a:	f000 f80b 	bl	2f34 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0xc>
    2f1e:	2000      	movs	r0, #0
    2f20:	bd1c      	pop	{r2, r3, r4, pc}
    2f22:	0000      	.short	0x0000
    2f24:	00002f98 	.word	0x00002f98

00002f28 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    2f28:	4901      	ldr	r1, [pc, #4]	; (2f30 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    2f2a:	7008      	strb	r0, [r1, #0]
    2f2c:	4770      	bx	lr
    2f2e:	0000      	.short	0x0000
    2f30:	200000b0 	.word	0x200000b0
    2f34:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2f38:	4d16      	ldr	r5, [pc, #88]	; (2f94 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x6c>)
    2f3a:	2001      	movs	r0, #1
    2f3c:	7068      	strb	r0, [r5, #1]
    2f3e:	2400      	movs	r4, #0
    2f40:	f64f 76ff 	movw	r6, #65535	; 0xffff
    2f44:	e00b      	b.n	2f5e <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x36>
    2f46:	2100      	movs	r1, #0
    2f48:	f7fe f8ca 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2f4c:	0007      	movs	r7, r0
    2f4e:	d009      	beq.n	2f64 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x3c>
    2f50:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    2f54:	f003 faa2 	bl	649c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    2f58:	4638      	mov	r0, r7
    2f5a:	f006 fd2e 	bl	99ba <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1e2>
    2f5e:	9400      	str	r4, [sp, #0]
    2f60:	9401      	str	r4, [sp, #4]
    2f62:	e00e      	b.n	2f82 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    2f64:	f44f 7191 	mov.w	r1, #290	; 0x122
    2f68:	2030      	movs	r0, #48	; 0x30
    2f6a:	f7fd fdd3 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f6e:	9800      	ldr	r0, [sp, #0]
    2f70:	b138      	cbz	r0, 2f82 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    2f72:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    2f76:	2920      	cmp	r1, #32
    2f78:	d003      	beq.n	2f82 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    2f7a:	8800      	ldrh	r0, [r0, #0]
    2f7c:	42b0      	cmp	r0, r6
    2f7e:	d1e2      	bne.n	2f46 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x1e>
    2f80:	e004      	b.n	2f8c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x64>
    2f82:	4668      	mov	r0, sp
    2f84:	f7fe f8fe 	bl	1184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    2f88:	2800      	cmp	r0, #0
    2f8a:	d0f0      	beq.n	2f6e <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x46>
    2f8c:	706c      	strb	r4, [r5, #1]
    2f8e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    2f92:	0000      	.short	0x0000
    2f94:	200000b0 	.word	0x200000b0
    2f98:	00000000 	.word	0x00000000
    2f9c:	00010000 	.word	0x00010000
    2fa0:	00000000 	.word	0x00000000
    2fa4:	00010000 	.word	0x00010000
    2fa8:	00000000 	.word	0x00000000
    2fac:	00001e14 	.word	0x00001e14
    2fb0:	00001130 	.word	0x00001130
    2fb4:	00fa01f4 	.word	0x00fa01f4
    2fb8:	00640096 	.word	0x00640096
    2fbc:	0032004b 	.word	0x0032004b
    2fc0:	0014001e 	.word	0x0014001e
    2fc4:	0005000a 	.word	0x0005000a
    2fc8:	00010002 	.word	0x00010002

00002fcc <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    2fcc:	b570      	push	{r4, r5, r6, lr}
    2fce:	6844      	ldr	r4, [r0, #4]
    2fd0:	220d      	movs	r2, #13
    2fd2:	f504 7598 	add.w	r5, r4, #304	; 0x130
    2fd6:	2100      	movs	r1, #0
    2fd8:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    2fdc:	f007 fc78 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2fe0:	f44f 70a3 	mov.w	r0, #326	; 0x146
    2fe4:	2100      	movs	r1, #0
    2fe6:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    2fea:	5501      	strb	r1, [r0, r4]
    2fec:	f8a5 1017 	strh.w	r1, [r5, #23]
    2ff0:	7669      	strb	r1, [r5, #25]
    2ff2:	4608      	mov	r0, r1
    2ff4:	f05f 017f 	movs.w	r1, #127	; 0x7f
    2ff8:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    2ffc:	1c40      	adds	r0, r0, #1
    2ffe:	b2c0      	uxtb	r0, r0
    3000:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    3004:	2802      	cmp	r0, #2
    3006:	d3f7      	bcc.n	2ff8 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    3008:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    300c:	4620      	mov	r0, r4
    300e:	f006 fd5e 	bl	9ace <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    3012:	2000      	movs	r0, #0
    3014:	21ff      	movs	r1, #255	; 0xff
    3016:	1822      	adds	r2, r4, r0
    3018:	1c40      	adds	r0, r0, #1
    301a:	b2c0      	uxtb	r0, r0
    301c:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    3020:	2802      	cmp	r0, #2
    3022:	d3f8      	bcc.n	3016 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    3024:	bd70      	pop	{r4, r5, r6, pc}
	...

00003028 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    3028:	4903      	ldr	r1, [pc, #12]	; (3038 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    302a:	884a      	ldrh	r2, [r1, #2]
    302c:	8002      	strh	r2, [r0, #0]
    302e:	7809      	ldrb	r1, [r1, #0]
    3030:	7081      	strb	r1, [r0, #2]
    3032:	2000      	movs	r0, #0
    3034:	4770      	bx	lr
    3036:	0000      	.short	0x0000
    3038:	20000bd0 	.word	0x20000bd0

0000303c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    303c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3040:	460f      	mov	r7, r1
    3042:	4605      	mov	r5, r0
    3044:	7806      	ldrb	r6, [r0, #0]
    3046:	f007 f88f 	bl	a168 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    304a:	2800      	cmp	r0, #0
    304c:	d10e      	bne.n	306c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    304e:	4628      	mov	r0, r5
    3050:	f007 f864 	bl	a11c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa2>
    3054:	2800      	cmp	r0, #0
    3056:	d109      	bne.n	306c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    3058:	2101      	movs	r1, #1
    305a:	4630      	mov	r0, r6
    305c:	f7fe f840 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    3060:	0004      	movs	r4, r0
    3062:	d005      	beq.n	3070 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    3064:	f006 fbb8 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    3068:	b170      	cbz	r0, 3088 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    306a:	200c      	movs	r0, #12
    306c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3070:	2101      	movs	r1, #1
    3072:	4630      	mov	r0, r6
    3074:	f7fd fffc 	bl	1070 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    3078:	0004      	movs	r4, r0
    307a:	d013      	beq.n	30a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    307c:	4817      	ldr	r0, [pc, #92]	; (30dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    307e:	f990 1000 	ldrsb.w	r1, [r0]
    3082:	4620      	mov	r0, r4
    3084:	f006 f985 	bl	9392 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    3088:	4620      	mov	r0, r4
    308a:	f006 f9ed 	bl	9468 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    308e:	7038      	strb	r0, [r7, #0]
    3090:	74e8      	strb	r0, [r5, #19]
    3092:	4629      	mov	r1, r5
    3094:	4620      	mov	r0, r4
    3096:	f7ff f84b 	bl	2130 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    309a:	4606      	mov	r6, r0
    309c:	7e68      	ldrb	r0, [r5, #25]
    309e:	b1d0      	cbz	r0, 30d6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    30a0:	b12e      	cbz	r6, 30ae <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    30a2:	e018      	b.n	30d6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    30a4:	f241 512e 	movw	r1, #5422	; 0x152e
    30a8:	2039      	movs	r0, #57	; 0x39
    30aa:	f7fd fd33 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30ae:	2200      	movs	r2, #0
    30b0:	4668      	mov	r0, sp
    30b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    30b4:	f005 fdfe 	bl	8cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    30b8:	2200      	movs	r2, #0
    30ba:	2101      	movs	r1, #1
    30bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    30be:	f005 fe73 	bl	8da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    30c2:	2204      	movs	r2, #4
    30c4:	4668      	mov	r0, sp
    30c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    30c8:	f005 fdf4 	bl	8cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    30cc:	2200      	movs	r2, #0
    30ce:	4611      	mov	r1, r2
    30d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    30d2:	f005 fe69 	bl	8da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    30d6:	4630      	mov	r0, r6
    30d8:	e7c8      	b.n	306c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    30da:	0000      	.short	0x0000
    30dc:	200000c4 	.word	0x200000c4

000030e0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    30e0:	7801      	ldrb	r1, [r0, #0]
    30e2:	b171      	cbz	r1, 3102 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    30e4:	7841      	ldrb	r1, [r0, #1]
    30e6:	b161      	cbz	r1, 3102 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    30e8:	8841      	ldrh	r1, [r0, #2]
    30ea:	291b      	cmp	r1, #27
    30ec:	d309      	bcc.n	3102 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    30ee:	8881      	ldrh	r1, [r0, #4]
    30f0:	291b      	cmp	r1, #27
    30f2:	d306      	bcc.n	3102 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    30f4:	4904      	ldr	r1, [pc, #16]	; (3108 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    30f6:	6802      	ldr	r2, [r0, #0]
    30f8:	600a      	str	r2, [r1, #0]
    30fa:	8880      	ldrh	r0, [r0, #4]
    30fc:	8088      	strh	r0, [r1, #4]
    30fe:	2000      	movs	r0, #0
    3100:	4770      	bx	lr
    3102:	2012      	movs	r0, #18
    3104:	4770      	bx	lr
    3106:	0000      	.short	0x0000
    3108:	20000bd0 	.word	0x20000bd0

0000310c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    310c:	6800      	ldr	r0, [r0, #0]
    310e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    3112:	4288      	cmp	r0, r1
    3114:	d303      	bcc.n	311e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    3116:	4903      	ldr	r1, [pc, #12]	; (3124 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    3118:	6088      	str	r0, [r1, #8]
    311a:	2000      	movs	r0, #0
    311c:	4770      	bx	lr
    311e:	2012      	movs	r0, #18
    3120:	4770      	bx	lr
    3122:	0000      	.short	0x0000
    3124:	20000bd0 	.word	0x20000bd0

00003128 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    3128:	4a03      	ldr	r2, [pc, #12]	; (3138 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    312a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    312e:	6001      	str	r1, [r0, #0]
    3130:	6042      	str	r2, [r0, #4]
    3132:	2000      	movs	r0, #0
    3134:	4770      	bx	lr
    3136:	0000      	.short	0x0000
    3138:	000033e8 	.word	0x000033e8

0000313c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    313c:	b570      	push	{r4, r5, r6, lr}
    313e:	b086      	sub	sp, #24
    3140:	4604      	mov	r4, r0
    3142:	f000 f9af 	bl	34a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3146:	0940      	lsrs	r0, r0, #5
    3148:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    314c:	4e2d      	ldr	r6, [pc, #180]	; (3204 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    314e:	07c0      	lsls	r0, r0, #31
    3150:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    3154:	d002      	beq.n	315c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    3156:	8871      	ldrh	r1, [r6, #2]
    3158:	88b0      	ldrh	r0, [r6, #4]
    315a:	e001      	b.n	3160 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    315c:	211b      	movs	r1, #27
    315e:	4608      	mov	r0, r1
    3160:	84e9      	strh	r1, [r5, #38]	; 0x26
    3162:	8528      	strh	r0, [r5, #40]	; 0x28
    3164:	f000 f99e 	bl	34a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3168:	0788      	lsls	r0, r1, #30
    316a:	f04f 0501 	mov.w	r5, #1
    316e:	d505      	bpl.n	317c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    3170:	f88d 5000 	strb.w	r5, [sp]
    3174:	4668      	mov	r0, sp
    3176:	9401      	str	r4, [sp, #4]
    3178:	f7ff ff28 	bl	2fcc <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    317c:	68b0      	ldr	r0, [r6, #8]
    317e:	62e0      	str	r0, [r4, #44]	; 0x2c
    3180:	f641 514c 	movw	r1, #7500	; 0x1d4c
    3184:	6121      	str	r1, [r4, #16]
    3186:	8821      	ldrh	r1, [r4, #0]
    3188:	f8ad 1004 	strh.w	r1, [sp, #4]
    318c:	7bb1      	ldrb	r1, [r6, #14]
    318e:	f88d 1006 	strb.w	r1, [sp, #6]
    3192:	7bf1      	ldrb	r1, [r6, #15]
    3194:	f88d 1007 	strb.w	r1, [sp, #7]
    3198:	8a31      	ldrh	r1, [r6, #16]
    319a:	f8ad 1008 	strh.w	r1, [sp, #8]
    319e:	a904      	add	r1, sp, #16
    31a0:	9100      	str	r1, [sp, #0]
    31a2:	4628      	mov	r0, r5
    31a4:	ab03      	add	r3, sp, #12
    31a6:	aa01      	add	r2, sp, #4
    31a8:	4621      	mov	r1, r4
    31aa:	f007 f82a 	bl	a202 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    31ae:	b138      	cbz	r0, 31c0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    31b0:	8820      	ldrh	r0, [r4, #0]
    31b2:	2100      	movs	r1, #0
    31b4:	f7fe f836 	bl	1224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    31b8:	b308      	cbz	r0, 31fe <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    31ba:	f240 517d 	movw	r1, #1405	; 0x57d
    31be:	e01b      	b.n	31f8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    31c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    31c4:	f88d 0014 	strb.w	r0, [sp, #20]
    31c8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    31cc:	f88d 0015 	strb.w	r0, [sp, #21]
    31d0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    31d4:	f8ad 0016 	strh.w	r0, [sp, #22]
    31d8:	a905      	add	r1, sp, #20
    31da:	4620      	mov	r0, r4
    31dc:	f005 ff05 	bl	8fea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    31e0:	7870      	ldrb	r0, [r6, #1]
    31e2:	9000      	str	r0, [sp, #0]
    31e4:	7833      	ldrb	r3, [r6, #0]
    31e6:	88b2      	ldrh	r2, [r6, #4]
    31e8:	8871      	ldrh	r1, [r6, #2]
    31ea:	8820      	ldrh	r0, [r4, #0]
    31ec:	f7fe f84c 	bl	1288 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    31f0:	2800      	cmp	r0, #0
    31f2:	d005      	beq.n	3200 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    31f4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    31f8:	2039      	movs	r0, #57	; 0x39
    31fa:	f7fd fc8b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31fe:	2009      	movs	r0, #9
    3200:	b006      	add	sp, #24
    3202:	bd70      	pop	{r4, r5, r6, pc}
    3204:	20000bd0 	.word	0x20000bd0
    3208:	b51c      	push	{r2, r3, r4, lr}
    320a:	4909      	ldr	r1, [pc, #36]	; (3230 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf4>)
    320c:	e9d1 0100 	ldrd	r0, r1, [r1]
    3210:	e9cd 0100 	strd	r0, r1, [sp]
    3214:	e005      	b.n	3222 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    3216:	9800      	ldr	r0, [sp, #0]
    3218:	f006 fade 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    321c:	b108      	cbz	r0, 3222 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    321e:	2001      	movs	r0, #1
    3220:	bd1c      	pop	{r2, r3, r4, pc}
    3222:	4668      	mov	r0, sp
    3224:	f7fd ffae 	bl	1184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3228:	2800      	cmp	r0, #0
    322a:	d0f4      	beq.n	3216 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xda>
    322c:	2000      	movs	r0, #0
    322e:	bd1c      	pop	{r2, r3, r4, pc}
    3230:	000033e8 	.word	0x000033e8
    3234:	b510      	push	{r4, lr}
    3236:	480d      	ldr	r0, [pc, #52]	; (326c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x130>)
    3238:	2100      	movs	r1, #0
    323a:	4b0d      	ldr	r3, [pc, #52]	; (3270 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x134>)
    323c:	74c1      	strb	r1, [r0, #19]
    323e:	8281      	strh	r1, [r0, #20]
    3240:	221b      	movs	r2, #27
    3242:	801a      	strh	r2, [r3, #0]
    3244:	f44f 74a4 	mov.w	r4, #328	; 0x148
    3248:	805c      	strh	r4, [r3, #2]
    324a:	809a      	strh	r2, [r3, #4]
    324c:	80dc      	strh	r4, [r3, #6]
    324e:	7381      	strb	r1, [r0, #14]
    3250:	73c1      	strb	r1, [r0, #15]
    3252:	2303      	movs	r3, #3
    3254:	7003      	strb	r3, [r0, #0]
    3256:	2302      	movs	r3, #2
    3258:	7043      	strb	r3, [r0, #1]
    325a:	8042      	strh	r2, [r0, #2]
    325c:	8082      	strh	r2, [r0, #4]
    325e:	f640 62a6 	movw	r2, #3750	; 0xea6
    3262:	6082      	str	r2, [r0, #8]
    3264:	7481      	strb	r1, [r0, #18]
    3266:	7301      	strb	r1, [r0, #12]
    3268:	bd10      	pop	{r4, pc}
    326a:	0000      	.short	0x0000
    326c:	20000bd0 	.word	0x20000bd0
    3270:	200000cc 	.word	0x200000cc
    3274:	b510      	push	{r4, lr}
    3276:	2101      	movs	r1, #1
    3278:	2000      	movs	r0, #0
    327a:	f7fd ff31 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    327e:	0004      	movs	r4, r0
    3280:	d10a      	bne.n	3298 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x15c>
    3282:	2101      	movs	r1, #1
    3284:	f7fd fef4 	bl	1070 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    3288:	0004      	movs	r4, r0
    328a:	d007      	beq.n	329c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x160>
    328c:	4806      	ldr	r0, [pc, #24]	; (32a8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x16c>)
    328e:	f990 1000 	ldrsb.w	r1, [r0]
    3292:	4620      	mov	r0, r4
    3294:	f006 f87d 	bl	9392 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    3298:	4620      	mov	r0, r4
    329a:	bd10      	pop	{r4, pc}
    329c:	f240 3113 	movw	r1, #787	; 0x313
    32a0:	2039      	movs	r0, #57	; 0x39
    32a2:	f7fd fc37 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32a6:	0000      	.short	0x0000
    32a8:	200000c4 	.word	0x200000c4

000032ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    32ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ae:	460c      	mov	r4, r1
    32b0:	4605      	mov	r5, r0
    32b2:	f006 f8dc 	bl	946e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    32b6:	b158      	cbz	r0, 32d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    32b8:	4628      	mov	r0, r5
    32ba:	f006 f8cb 	bl	9454 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    32be:	b148      	cbz	r0, 32d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    32c0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    32c4:	2112      	movs	r1, #18
    32c6:	b108      	cbz	r0, 32cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    32c8:	2880      	cmp	r0, #128	; 0x80
    32ca:	d903      	bls.n	32d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    32cc:	4608      	mov	r0, r1
    32ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32d0:	2142      	movs	r1, #66	; 0x42
    32d2:	e7fb      	b.n	32cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    32d4:	4628      	mov	r0, r5
    32d6:	f006 f8ae 	bl	9436 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    32da:	b120      	cbz	r0, 32e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    32dc:	4628      	mov	r0, r5
    32de:	f006 f819 	bl	9314 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    32e2:	b110      	cbz	r0, 32ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    32e4:	e005      	b.n	32f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    32e6:	210c      	movs	r1, #12
    32e8:	e7f0      	b.n	32cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    32ea:	4628      	mov	r0, r5
    32ec:	f006 f8ac 	bl	9448 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    32f0:	b120      	cbz	r0, 32fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    32f2:	4628      	mov	r0, r5
    32f4:	f006 fa70 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    32f8:	b930      	cbnz	r0, 3308 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    32fa:	e001      	b.n	3300 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    32fc:	2012      	movs	r0, #18
    32fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3300:	4628      	mov	r0, r5
    3302:	f006 f822 	bl	934a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    3306:	b108      	cbz	r0, 330c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    3308:	200c      	movs	r0, #12
    330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    330c:	4628      	mov	r0, r5
    330e:	f7fe fead 	bl	206c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    3312:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    3316:	f242 7010 	movw	r0, #10000	; 0x2710
    331a:	4346      	muls	r6, r0
    331c:	78e1      	ldrb	r1, [r4, #3]
    331e:	4628      	mov	r0, r5
    3320:	f006 f880 	bl	9424 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    3324:	4628      	mov	r0, r5
    3326:	f006 f891 	bl	944c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    332a:	b1a8      	cbz	r0, 3358 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    332c:	2100      	movs	r1, #0
    332e:	4668      	mov	r0, sp
    3330:	f7fd ff4a 	bl	11c8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    3334:	0004      	movs	r4, r0
    3336:	d019      	beq.n	336c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    3338:	2100      	movs	r1, #0
    333a:	f7fe fb81 	bl	1a40 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    333e:	f8bd 0000 	ldrh.w	r0, [sp]
    3342:	8020      	strh	r0, [r4, #0]
    3344:	4621      	mov	r1, r4
    3346:	4628      	mov	r0, r5
    3348:	f006 f8a8 	bl	949c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    334c:	4628      	mov	r0, r5
    334e:	f006 f885 	bl	945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    3352:	b168      	cbz	r0, 3370 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    3354:	2001      	movs	r0, #1
    3356:	e00e      	b.n	3376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    3358:	4632      	mov	r2, r6
    335a:	2100      	movs	r1, #0
    335c:	4628      	mov	r0, r5
    335e:	f7ff fd0f 	bl	2d80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    3362:	2800      	cmp	r0, #0
    3364:	d0d1      	beq.n	330a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    3366:	f241 7168 	movw	r1, #5992	; 0x1768
    336a:	e012      	b.n	3392 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    336c:	200d      	movs	r0, #13
    336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3370:	4628      	mov	r0, r5
    3372:	f006 f891 	bl	9498 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    3376:	4601      	mov	r1, r0
    3378:	4620      	mov	r0, r4
    337a:	f7ff fedf 	bl	313c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    337e:	2800      	cmp	r0, #0
    3380:	d1f5      	bne.n	336e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    3382:	4632      	mov	r2, r6
    3384:	4621      	mov	r1, r4
    3386:	4628      	mov	r0, r5
    3388:	f7ff fcfa 	bl	2d80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    338c:	b120      	cbz	r0, 3398 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    338e:	f241 718b 	movw	r1, #6027	; 0x178b
    3392:	2039      	movs	r0, #57	; 0x39
    3394:	f7fd fbbe 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3398:	4804      	ldr	r0, [pc, #16]	; (33ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    339a:	6843      	ldr	r3, [r0, #4]
    339c:	b123      	cbz	r3, 33a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    339e:	2200      	movs	r2, #0
    33a0:	f504 7199 	add.w	r1, r4, #306	; 0x132
    33a4:	4620      	mov	r0, r4
    33a6:	4798      	blx	r3
    33a8:	2000      	movs	r0, #0
    33aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ac:	200000c4 	.word	0x200000c4
    33b0:	b51c      	push	{r2, r3, r4, lr}
    33b2:	490c      	ldr	r1, [pc, #48]	; (33e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x138>)
    33b4:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    33b8:	e9cd 0100 	strd	r0, r1, [sp]
    33bc:	e00a      	b.n	33d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    33be:	9c00      	ldr	r4, [sp, #0]
    33c0:	4620      	mov	r0, r4
    33c2:	f006 fa09 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    33c6:	b128      	cbz	r0, 33d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    33c8:	4620      	mov	r0, r4
    33ca:	f006 f876 	bl	94ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    33ce:	b108      	cbz	r0, 33d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    33d0:	2001      	movs	r0, #1
    33d2:	bd1c      	pop	{r2, r3, r4, pc}
    33d4:	4668      	mov	r0, sp
    33d6:	f7fd fed5 	bl	1184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    33da:	2800      	cmp	r0, #0
    33dc:	d0ef      	beq.n	33be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x112>
    33de:	2000      	movs	r0, #0
    33e0:	bd1c      	pop	{r2, r3, r4, pc}
    33e2:	0000      	.short	0x0000
    33e4:	000033e8 	.word	0x000033e8
    33e8:	00000000 	.word	0x00000000
    33ec:	00010000 	.word	0x00010000
    33f0:	00000000 	.word	0x00000000
    33f4:	00010000 	.word	0x00010000
    33f8:	0d10770d 	.word	0x0d10770d
    33fc:	10770059 	.word	0x10770059
    3400:	00000000 	.word	0x00000000
    3404:	00010000 	.word	0x00010000
    3408:	00000000 	.word	0x00000000
    340c:	00010000 	.word	0x00010000

00003410 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    3410:	b510      	push	{r4, lr}
    3412:	f7fe fc97 	bl	1d44 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    3416:	4c05      	ldr	r4, [pc, #20]	; (342c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    3418:	6860      	ldr	r0, [r4, #4]
    341a:	f006 ff89 	bl	a330 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    341e:	f006 fe2a 	bl	a076 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    3422:	f7fe fd43 	bl	1eac <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    3426:	2001      	movs	r0, #1
    3428:	7020      	strb	r0, [r4, #0]
    342a:	bd10      	pop	{r4, pc}
    342c:	200000d4 	.word	0x200000d4

00003430 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    3430:	4801      	ldr	r0, [pc, #4]	; (3438 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    3432:	7800      	ldrb	r0, [r0, #0]
    3434:	4770      	bx	lr
    3436:	0000      	.short	0x0000
    3438:	200000d4 	.word	0x200000d4

0000343c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    343c:	b510      	push	{r4, lr}
    343e:	4c06      	ldr	r4, [pc, #24]	; (3458 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    3440:	68a0      	ldr	r0, [r4, #8]
    3442:	f006 ff75 	bl	a330 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    3446:	68e0      	ldr	r0, [r4, #12]
    3448:	f006 ff72 	bl	a330 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    344c:	f006 fe15 	bl	a07a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    3450:	2000      	movs	r0, #0
    3452:	7020      	strb	r0, [r4, #0]
    3454:	bd10      	pop	{r4, pc}
    3456:	0000      	.short	0x0000
    3458:	200000d4 	.word	0x200000d4

0000345c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    345c:	b510      	push	{r4, lr}
    345e:	4905      	ldr	r1, [pc, #20]	; (3474 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    3460:	4805      	ldr	r0, [pc, #20]	; (3478 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    3462:	f006 ff58 	bl	a316 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    3466:	4804      	ldr	r0, [pc, #16]	; (3478 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    3468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    346c:	4903      	ldr	r1, [pc, #12]	; (347c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    346e:	1d00      	adds	r0, r0, #4
    3470:	f006 bf51 	b.w	a316 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    3474:	200000e4 	.word	0x200000e4
    3478:	200000d8 	.word	0x200000d8
    347c:	200000ec 	.word	0x200000ec

00003480 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    3480:	4801      	ldr	r0, [pc, #4]	; (3488 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    3482:	7840      	ldrb	r0, [r0, #1]
    3484:	4770      	bx	lr
    3486:	0000      	.short	0x0000
    3488:	200000d4 	.word	0x200000d4
    348c:	b510      	push	{r4, lr}
    348e:	f7fe ff0f 	bl	22b0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    3492:	f7ff fd25 	bl	2ee0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    3496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    349a:	4801      	ldr	r0, [pc, #4]	; (34a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    349c:	f7fe beee 	b.w	227c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    34a0:	20000e68 	.word	0x20000e68

000034a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    34a4:	4901      	ldr	r1, [pc, #4]	; (34ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    34a6:	e9d1 0100 	ldrd	r0, r1, [r1]
    34aa:	4770      	bx	lr
    34ac:	20000020 	.word	0x20000020

000034b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    34b0:	4806      	ldr	r0, [pc, #24]	; (34cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    34b2:	8801      	ldrh	r1, [r0, #0]
    34b4:	7900      	ldrb	r0, [r0, #4]
    34b6:	0602      	lsls	r2, r0, #24
    34b8:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    34bc:	f000 0001 	and.w	r0, r0, #1
    34c0:	1800      	adds	r0, r0, r0
    34c2:	b2c0      	uxtb	r0, r0
    34c4:	f040 0001 	orr.w	r0, r0, #1
    34c8:	4770      	bx	lr
    34ca:	0000      	.short	0x0000
    34cc:	20000020 	.word	0x20000020

000034d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    34d0:	b510      	push	{r4, lr}
    34d2:	f004 fad3 	bl	7a7c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    34d6:	2200      	movs	r2, #0
    34d8:	4b08      	ldr	r3, [pc, #32]	; (34fc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    34da:	4611      	mov	r1, r2
    34dc:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    34e0:	4284      	cmp	r4, r0
    34e2:	d303      	bcc.n	34ec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    34e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    34e8:	7882      	ldrb	r2, [r0, #2]
    34ea:	e003      	b.n	34f4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    34ec:	1c49      	adds	r1, r1, #1
    34ee:	b2c9      	uxtb	r1, r1
    34f0:	290c      	cmp	r1, #12
    34f2:	d3f3      	bcc.n	34dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    34f4:	4802      	ldr	r0, [pc, #8]	; (3500 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    34f6:	7002      	strb	r2, [r0, #0]
    34f8:	bd10      	pop	{r4, pc}
    34fa:	0000      	.short	0x0000
    34fc:	0000a346 	.word	0x0000a346
    3500:	20000187 	.word	0x20000187

00003504 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    3504:	b570      	push	{r4, r5, r6, lr}
    3506:	4605      	mov	r5, r0
    3508:	4616      	mov	r6, r2
    350a:	460c      	mov	r4, r1
    350c:	2002      	movs	r0, #2
    350e:	f000 f8bd 	bl	368c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3512:	4906      	ldr	r1, [pc, #24]	; (352c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    3514:	2001      	movs	r0, #1
    3516:	1ef6      	subs	r6, r6, #3
    3518:	7008      	strb	r0, [r1, #0]
    351a:	4805      	ldr	r0, [pc, #20]	; (3530 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    351c:	6006      	str	r6, [r0, #0]
    351e:	4804      	ldr	r0, [pc, #16]	; (3530 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    3520:	3808      	subs	r0, #8
    3522:	6005      	str	r5, [r0, #0]
    3524:	1f00      	subs	r0, r0, #4
    3526:	6004      	str	r4, [r0, #0]
    3528:	bd70      	pop	{r4, r5, r6, pc}
    352a:	0000      	.short	0x0000
    352c:	20000188 	.word	0x20000188
    3530:	4000f510 	.word	0x4000f510

00003534 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    3534:	b510      	push	{r4, lr}
    3536:	4c0c      	ldr	r4, [pc, #48]	; (3568 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    3538:	7820      	ldrb	r0, [r4, #0]
    353a:	b180      	cbz	r0, 355e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    353c:	490b      	ldr	r1, [pc, #44]	; (356c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    353e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3542:	6008      	str	r0, [r1, #0]
    3544:	f000 f86a 	bl	361c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    3548:	2100      	movs	r1, #0
    354a:	b120      	cbz	r0, 3556 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    354c:	2001      	movs	r0, #1
    354e:	7060      	strb	r0, [r4, #1]
    3550:	4807      	ldr	r0, [pc, #28]	; (3570 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    3552:	6800      	ldr	r0, [r0, #0]
    3554:	e001      	b.n	355a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    3556:	7061      	strb	r1, [r4, #1]
    3558:	2010      	movs	r0, #16
    355a:	70a0      	strb	r0, [r4, #2]
    355c:	7021      	strb	r1, [r4, #0]
    355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3562:	2000      	movs	r0, #0
    3564:	f000 b892 	b.w	368c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3568:	20000188 	.word	0x20000188
    356c:	4001f508 	.word	0x4001f508
    3570:	4000f400 	.word	0x4000f400

00003574 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    3574:	b510      	push	{r4, lr}
    3576:	2002      	movs	r0, #2
    3578:	f000 f888 	bl	368c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    357c:	4904      	ldr	r1, [pc, #16]	; (3590 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    357e:	2001      	movs	r0, #1
    3580:	7008      	strb	r0, [r1, #0]
    3582:	f000 f859 	bl	3638 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    3586:	4903      	ldr	r1, [pc, #12]	; (3594 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    3588:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    358c:	6008      	str	r0, [r1, #0]
    358e:	bd10      	pop	{r4, pc}
    3590:	20000188 	.word	0x20000188
    3594:	4001f504 	.word	0x4001f504

00003598 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    3598:	4803      	ldr	r0, [pc, #12]	; (35a8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    359a:	2100      	movs	r1, #0
    359c:	7001      	strb	r1, [r0, #0]
    359e:	7041      	strb	r1, [r0, #1]
    35a0:	2110      	movs	r1, #16
    35a2:	7081      	strb	r1, [r0, #2]
    35a4:	4770      	bx	lr
    35a6:	0000      	.short	0x0000
    35a8:	20000188 	.word	0x20000188

000035ac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    35ac:	4807      	ldr	r0, [pc, #28]	; (35cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    35ae:	b510      	push	{r4, lr}
    35b0:	7801      	ldrb	r1, [r0, #0]
    35b2:	b141      	cbz	r1, 35c6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    35b4:	f000 f832 	bl	361c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    35b8:	b118      	cbz	r0, 35c2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    35ba:	4805      	ldr	r0, [pc, #20]	; (35d0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    35bc:	6800      	ldr	r0, [r0, #0]
    35be:	b2c0      	uxtb	r0, r0
    35c0:	bd10      	pop	{r4, pc}
    35c2:	2010      	movs	r0, #16
    35c4:	bd10      	pop	{r4, pc}
    35c6:	7880      	ldrb	r0, [r0, #2]
    35c8:	bd10      	pop	{r4, pc}
    35ca:	0000      	.short	0x0000
    35cc:	20000188 	.word	0x20000188
    35d0:	4000f400 	.word	0x4000f400

000035d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    35d4:	4808      	ldr	r0, [pc, #32]	; (35f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    35d6:	b510      	push	{r4, lr}
    35d8:	7801      	ldrb	r1, [r0, #0]
    35da:	b159      	cbz	r1, 35f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    35dc:	4807      	ldr	r0, [pc, #28]	; (35fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    35de:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    35e2:	b128      	cbz	r0, 35f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    35e4:	f000 f80c 	bl	3600 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    35e8:	2800      	cmp	r0, #0
    35ea:	d000      	beq.n	35ee <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    35ec:	2001      	movs	r0, #1
    35ee:	bd10      	pop	{r4, pc}
    35f0:	2002      	movs	r0, #2
    35f2:	bd10      	pop	{r4, pc}
    35f4:	7840      	ldrb	r0, [r0, #1]
    35f6:	bd10      	pop	{r4, pc}
    35f8:	20000188 	.word	0x20000188
    35fc:	4000f000 	.word	0x4000f000
    3600:	4805      	ldr	r0, [pc, #20]	; (3618 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    3602:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    3606:	b111      	cbz	r1, 360e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    3608:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    360c:	b108      	cbz	r0, 3612 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    360e:	2000      	movs	r0, #0
    3610:	4770      	bx	lr
    3612:	2001      	movs	r0, #1
    3614:	4770      	bx	lr
    3616:	0000      	.short	0x0000
    3618:	4000f000 	.word	0x4000f000
    361c:	4805      	ldr	r0, [pc, #20]	; (3634 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    361e:	b510      	push	{r4, lr}
    3620:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3624:	b120      	cbz	r0, 3630 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    3626:	f7ff ffeb 	bl	3600 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    362a:	b108      	cbz	r0, 3630 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    362c:	2001      	movs	r0, #1
    362e:	bd10      	pop	{r4, pc}
    3630:	2000      	movs	r0, #0
    3632:	bd10      	pop	{r4, pc}
    3634:	4000f000 	.word	0x4000f000
    3638:	4804      	ldr	r0, [pc, #16]	; (364c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    363a:	2100      	movs	r1, #0
    363c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3640:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    3644:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    3648:	4770      	bx	lr
    364a:	0000      	.short	0x0000
    364c:	4000f000 	.word	0x4000f000

00003650 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    3650:	b570      	push	{r4, r5, r6, lr}
    3652:	4d05      	ldr	r5, [pc, #20]	; (3668 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    3654:	2400      	movs	r4, #0
    3656:	7828      	ldrb	r0, [r5, #0]
    3658:	b110      	cbz	r0, 3660 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    365a:	f000 f80f 	bl	367c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    365e:	702c      	strb	r4, [r5, #0]
    3660:	706c      	strb	r4, [r5, #1]
    3662:	70ac      	strb	r4, [r5, #2]
    3664:	bd70      	pop	{r4, r5, r6, pc}
    3666:	0000      	.short	0x0000
    3668:	2000018b 	.word	0x2000018b

0000366c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    366c:	4802      	ldr	r0, [pc, #8]	; (3678 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    366e:	2100      	movs	r1, #0
    3670:	7001      	strb	r1, [r0, #0]
    3672:	7041      	strb	r1, [r0, #1]
    3674:	7081      	strb	r1, [r0, #2]
    3676:	4770      	bx	lr
    3678:	2000018b 	.word	0x2000018b
    367c:	4902      	ldr	r1, [pc, #8]	; (3688 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    367e:	4801      	ldr	r0, [pc, #4]	; (3684 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    3680:	6008      	str	r0, [r1, #0]
    3682:	4770      	bx	lr
    3684:	02020000 	.word	0x02020000
    3688:	4001f508 	.word	0x4001f508

0000368c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    368c:	b510      	push	{r4, lr}
    368e:	4604      	mov	r4, r0
    3690:	f000 f820 	bl	36d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    3694:	2c00      	cmp	r4, #0
    3696:	d00e      	beq.n	36b6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    3698:	4a0b      	ldr	r2, [pc, #44]	; (36c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    369a:	480b      	ldr	r0, [pc, #44]	; (36c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    369c:	490b      	ldr	r1, [pc, #44]	; (36cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    369e:	3214      	adds	r2, #20
    36a0:	2c01      	cmp	r4, #1
    36a2:	d005      	beq.n	36b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    36a4:	2c02      	cmp	r4, #2
    36a6:	d007      	beq.n	36b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    36a8:	2182      	movs	r1, #130	; 0x82
    36aa:	203d      	movs	r0, #61	; 0x3d
    36ac:	f7fd fa32 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36b0:	2302      	movs	r3, #2
    36b2:	6003      	str	r3, [r0, #0]
    36b4:	6011      	str	r1, [r2, #0]
    36b6:	bd10      	pop	{r4, pc}
    36b8:	2303      	movs	r3, #3
    36ba:	6003      	str	r3, [r0, #0]
    36bc:	6011      	str	r1, [r2, #0]
    36be:	4904      	ldr	r1, [pc, #16]	; (36d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    36c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    36c4:	6008      	str	r0, [r1, #0]
    36c6:	bd10      	pop	{r4, pc}
    36c8:	4000f500 	.word	0x4000f500
    36cc:	2000106c 	.word	0x2000106c
    36d0:	4001f504 	.word	0x4001f504
    36d4:	4805      	ldr	r0, [pc, #20]	; (36ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    36d6:	b510      	push	{r4, lr}
    36d8:	2100      	movs	r1, #0
    36da:	6001      	str	r1, [r0, #0]
    36dc:	6001      	str	r1, [r0, #0]
    36de:	f7ff ffb7 	bl	3650 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    36e2:	4903      	ldr	r1, [pc, #12]	; (36f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    36e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    36e8:	6008      	str	r0, [r1, #0]
    36ea:	bd10      	pop	{r4, pc}
    36ec:	4000f500 	.word	0x4000f500
    36f0:	4001f508 	.word	0x4001f508

000036f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    36f4:	4805      	ldr	r0, [pc, #20]	; (370c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    36f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    36fa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    36fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3702:	2100      	movs	r1, #0
    3704:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    3708:	4770      	bx	lr
    370a:	0000      	.short	0x0000
    370c:	40001000 	.word	0x40001000

00003710 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    3710:	4904      	ldr	r1, [pc, #16]	; (3724 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    3712:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    3716:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    371a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    371e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3722:	4770      	bx	lr
    3724:	40001000 	.word	0x40001000

00003728 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    3728:	4902      	ldr	r1, [pc, #8]	; (3734 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    372a:	5c08      	ldrb	r0, [r1, r0]
    372c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3730:	4770      	bx	lr
    3732:	0000      	.short	0x0000
    3734:	0000431e 	.word	0x0000431e

00003738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    3738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    373a:	4c24      	ldr	r4, [pc, #144]	; (37cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    373c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3740:	f010 0f10 	tst.w	r0, #16
    3744:	d001      	beq.n	374a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    3746:	2701      	movs	r7, #1
    3748:	e000      	b.n	374c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    374a:	2700      	movs	r7, #0
    374c:	2010      	movs	r0, #16
    374e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3752:	2002      	movs	r0, #2
    3754:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3758:	481d      	ldr	r0, [pc, #116]	; (37d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    375a:	2500      	movs	r5, #0
    375c:	491d      	ldr	r1, [pc, #116]	; (37d4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    375e:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    3762:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    3766:	6008      	str	r0, [r1, #0]
    3768:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    376c:	f44f 7688 	mov.w	r6, #272	; 0x110
    3770:	f010 0fff 	tst.w	r0, #255	; 0xff
    3774:	d019      	beq.n	37aa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    3776:	20ff      	movs	r0, #255	; 0xff
    3778:	f88d 0000 	strb.w	r0, [sp]
    377c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3780:	2001      	movs	r0, #1
    3782:	6120      	str	r0, [r4, #16]
    3784:	e005      	b.n	3792 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    3786:	bf00      	nop
    3788:	f89d 0000 	ldrb.w	r0, [sp]
    378c:	1e40      	subs	r0, r0, #1
    378e:	f88d 0000 	strb.w	r0, [sp]
    3792:	f89d 0000 	ldrb.w	r0, [sp]
    3796:	b128      	cbz	r0, 37a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    3798:	4631      	mov	r1, r6
    379a:	4620      	mov	r0, r4
    379c:	f006 fe32 	bl	a404 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    37a0:	2800      	cmp	r0, #0
    37a2:	d0f1      	beq.n	3788 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    37a4:	f89d 0000 	ldrb.w	r0, [sp]
    37a8:	b158      	cbz	r0, 37c2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    37aa:	f000 fbcd 	bl	3f48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    37ae:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    37b2:	f000 fd35 	bl	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    37b6:	2f00      	cmp	r7, #0
    37b8:	d002      	beq.n	37c0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    37ba:	2010      	movs	r0, #16
    37bc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37c2:	f640 0194 	movw	r1, #2196	; 0x894
    37c6:	203e      	movs	r0, #62	; 0x3e
    37c8:	f7fd f9a4 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    37cc:	40001000 	.word	0x40001000
    37d0:	20000c38 	.word	0x20000c38
    37d4:	4001f508 	.word	0x4001f508

000037d8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    37d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37dc:	4d18      	ldr	r5, [pc, #96]	; (3840 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    37de:	4607      	mov	r7, r0
    37e0:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    37e4:	07c2      	lsls	r2, r0, #31
    37e6:	d00f      	beq.n	3808 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    37e8:	4c16      	ldr	r4, [pc, #88]	; (3844 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    37ea:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    37ee:	f042 0201 	orr.w	r2, r2, #1
    37f2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    37f6:	f040 0002 	orr.w	r0, r0, #2
    37fa:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    37fe:	2601      	movs	r6, #1
    3800:	b13f      	cbz	r7, 3812 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    3802:	2f01      	cmp	r7, #1
    3804:	d00b      	beq.n	381e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    3806:	e010      	b.n	382a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3808:	f240 716f 	movw	r1, #1903	; 0x76f
    380c:	203e      	movs	r0, #62	; 0x3e
    380e:	f7fd f981 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3812:	4608      	mov	r0, r1
    3814:	f000 fd5e 	bl	42d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d4>
    3818:	726e      	strb	r6, [r5, #9]
    381a:	6026      	str	r6, [r4, #0]
    381c:	e005      	b.n	382a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    381e:	4608      	mov	r0, r1
    3820:	f000 fd3e 	bl	42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>
    3824:	2002      	movs	r0, #2
    3826:	7268      	strb	r0, [r5, #9]
    3828:	6066      	str	r6, [r4, #4]
    382a:	4807      	ldr	r0, [pc, #28]	; (3848 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    382c:	64c6      	str	r6, [r0, #76]	; 0x4c
    382e:	4806      	ldr	r0, [pc, #24]	; (3848 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3830:	300c      	adds	r0, #12
    3832:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3836:	4638      	mov	r0, r7
    3838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    383c:	f000 bcc2 	b.w	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    3840:	20000c38 	.word	0x20000c38
    3844:	40001000 	.word	0x40001000
    3848:	40008000 	.word	0x40008000

0000384c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3850:	4c2c      	ldr	r4, [pc, #176]	; (3904 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    3852:	0006      	movs	r6, r0
    3854:	4d2c      	ldr	r5, [pc, #176]	; (3908 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    3856:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    385a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 390c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    385e:	f040 0002 	orr.w	r0, r0, #2
    3862:	4689      	mov	r9, r1
    3864:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3868:	f04f 0700 	mov.w	r7, #0
    386c:	d002      	beq.n	3874 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    386e:	2e01      	cmp	r6, #1
    3870:	d020      	beq.n	38b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    3872:	e036      	b.n	38e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    3874:	4608      	mov	r0, r1
    3876:	f000 fd2d 	bl	42d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d4>
    387a:	2001      	movs	r0, #1
    387c:	7260      	strb	r0, [r4, #9]
    387e:	79e0      	ldrb	r0, [r4, #7]
    3880:	2801      	cmp	r0, #1
    3882:	d105      	bne.n	3890 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    3884:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    3888:	f040 0008 	orr.w	r0, r0, #8
    388c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3890:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3892:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    3896:	6260      	str	r0, [r4, #36]	; 0x24
    3898:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    389c:	f8c8 0000 	str.w	r0, [r8]
    38a0:	491b      	ldr	r1, [pc, #108]	; (3910 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    38a2:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    38a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    38aa:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    38ae:	fbb0 f7f1 	udiv	r7, r0, r1
    38b2:	e016      	b.n	38e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    38b4:	4608      	mov	r0, r1
    38b6:	f000 fcf3 	bl	42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>
    38ba:	2002      	movs	r0, #2
    38bc:	7260      	strb	r0, [r4, #9]
    38be:	79e0      	ldrb	r0, [r4, #7]
    38c0:	2801      	cmp	r0, #1
    38c2:	d105      	bne.n	38d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    38c4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    38c8:	f040 0004 	orr.w	r0, r0, #4
    38cc:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    38d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    38d2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    38d6:	6260      	str	r0, [r4, #36]	; 0x24
    38d8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    38dc:	f8c8 0000 	str.w	r0, [r8]
    38e0:	2729      	movs	r7, #41	; 0x29
    38e2:	f000 fb9d 	bl	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    38e6:	f006 fdd5 	bl	a494 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    38ea:	b120      	cbz	r0, 38f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    38ec:	f7ff ff24 	bl	3738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    38f0:	2000      	movs	r0, #0
    38f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38f6:	2100      	movs	r1, #0
    38f8:	4630      	mov	r0, r6
    38fa:	f000 fc63 	bl	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    38fe:	4638      	mov	r0, r7
    3900:	e7f7      	b.n	38f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    3902:	0000      	.short	0x0000
    3904:	20000c38 	.word	0x20000c38
    3908:	40001000 	.word	0x40001000
    390c:	4001f504 	.word	0x4001f504
    3910:	00004318 	.word	0x00004318

00003914 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    3914:	b510      	push	{r4, lr}
    3916:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    3918:	4901      	ldr	r1, [pc, #4]	; (3920 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    391a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    391e:	bd10      	pop	{r4, pc}
    3920:	20000c28 	.word	0x20000c28

00003924 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    3924:	b570      	push	{r4, r5, r6, lr}
    3926:	4c0f      	ldr	r4, [pc, #60]	; (3964 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    3928:	4603      	mov	r3, r0
    392a:	2002      	movs	r0, #2
    392c:	7320      	strb	r0, [r4, #12]
    392e:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    3932:	2096      	movs	r0, #150	; 0x96
    3934:	f894 1020 	ldrb.w	r1, [r4, #32]
    3938:	7d22      	ldrb	r2, [r4, #20]
    393a:	2d01      	cmp	r5, #1
    393c:	d00e      	beq.n	395c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    393e:	f000 fd27 	bl	4390 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    3942:	6120      	str	r0, [r4, #16]
    3944:	4808      	ldr	r0, [pc, #32]	; (3968 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    3946:	2100      	movs	r1, #0
    3948:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    394c:	6921      	ldr	r1, [r4, #16]
    394e:	69e0      	ldr	r0, [r4, #28]
    3950:	4408      	add	r0, r1
    3952:	4905      	ldr	r1, [pc, #20]	; (3968 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    3954:	1d09      	adds	r1, r1, #4
    3956:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    395a:	bd70      	pop	{r4, r5, r6, pc}
    395c:	f000 fd36 	bl	43cc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    3960:	e7ef      	b.n	3942 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    3962:	0000      	.short	0x0000
    3964:	20000c38 	.word	0x20000c38
    3968:	40008000 	.word	0x40008000

0000396c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3970:	2234      	movs	r2, #52	; 0x34
    3972:	2100      	movs	r1, #0
    3974:	4813      	ldr	r0, [pc, #76]	; (39c4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    3976:	f006 ffab 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    397a:	f000 fc51 	bl	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    397e:	f006 fe68 	bl	a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3982:	4d11      	ldr	r5, [pc, #68]	; (39c8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    3984:	4e10      	ldr	r6, [pc, #64]	; (39c8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    3986:	2400      	movs	r4, #0
    3988:	4f0f      	ldr	r7, [pc, #60]	; (39c8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    398a:	3508      	adds	r5, #8
    398c:	3610      	adds	r6, #16
    398e:	b928      	cbnz	r0, 399c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3990:	f006 fe76 	bl	a680 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3994:	b910      	cbnz	r0, 399c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3996:	f006 fe7d 	bl	a694 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    399a:	b108      	cbz	r0, 39a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    399c:	2224      	movs	r2, #36	; 0x24
    399e:	e006      	b.n	39ae <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    39a0:	f006 feb8 	bl	a714 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    39a4:	b910      	cbnz	r0, 39ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    39a6:	f006 feab 	bl	a700 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    39aa:	b140      	cbz	r0, 39be <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    39ac:	2240      	movs	r2, #64	; 0x40
    39ae:	21ff      	movs	r1, #255	; 0xff
    39b0:	4638      	mov	r0, r7
    39b2:	f006 ff8d 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    39b6:	602c      	str	r4, [r5, #0]
    39b8:	6034      	str	r4, [r6, #0]
    39ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39be:	2238      	movs	r2, #56	; 0x38
    39c0:	e7f5      	b.n	39ae <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    39c2:	0000      	.short	0x0000
    39c4:	20000c38 	.word	0x20000c38
    39c8:	40000e00 	.word	0x40000e00

000039cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    39cc:	b510      	push	{r4, lr}
    39ce:	f000 fbdb 	bl	4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>
    39d2:	f7ff feb1 	bl	3738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    39d6:	f004 facd 	bl	7f74 <mpsl_fem_disable>
    39da:	b130      	cbz	r0, 39ea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    39dc:	1c40      	adds	r0, r0, #1
    39de:	d004      	beq.n	39ea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    39e0:	f240 5165 	movw	r1, #1381	; 0x565
    39e4:	203e      	movs	r0, #62	; 0x3e
    39e6:	f7fd f895 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39ea:	480f      	ldr	r0, [pc, #60]	; (3a28 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    39ec:	4a0f      	ldr	r2, [pc, #60]	; (3a2c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    39ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    39f0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    39f4:	6011      	str	r1, [r2, #0]
    39f6:	2400      	movs	r4, #0
    39f8:	6244      	str	r4, [r0, #36]	; 0x24
    39fa:	7304      	strb	r4, [r0, #12]
    39fc:	61c4      	str	r4, [r0, #28]
    39fe:	6184      	str	r4, [r0, #24]
    3a00:	f000 fbc2 	bl	4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>
    3a04:	480a      	ldr	r0, [pc, #40]	; (3a30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    3a06:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3a0a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3a0e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3a12:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    3a16:	2001      	movs	r0, #1
    3a18:	f006 fce3 	bl	a3e2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    3a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3a20:	2001      	movs	r0, #1
    3a22:	f006 bcd1 	b.w	a3c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3a26:	0000      	.short	0x0000
    3a28:	20000c38 	.word	0x20000c38
    3a2c:	4001f508 	.word	0x4001f508
    3a30:	40008000 	.word	0x40008000

00003a34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    3a34:	b570      	push	{r4, r5, r6, lr}
    3a36:	2001      	movs	r0, #1
    3a38:	f006 fcd3 	bl	a3e2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    3a3c:	4c37      	ldr	r4, [pc, #220]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3a3e:	2000      	movs	r0, #0
    3a40:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    3a44:	2001      	movs	r0, #1
    3a46:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    3a4a:	f006 fe39 	bl	a6c0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3a4e:	4d34      	ldr	r5, [pc, #208]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a50:	b118      	cbz	r0, 3a5a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    3a52:	6828      	ldr	r0, [r5, #0]
    3a54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    3a58:	6028      	str	r0, [r5, #0]
    3a5a:	f006 fe25 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a5e:	b128      	cbz	r0, 3a6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    3a60:	6828      	ldr	r0, [r5, #0]
    3a62:	4930      	ldr	r1, [pc, #192]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3a64:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    3a68:	4308      	orrs	r0, r1
    3a6a:	6028      	str	r0, [r5, #0]
    3a6c:	f006 fe38 	bl	a6e0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3a70:	b138      	cbz	r0, 3a82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    3a72:	482b      	ldr	r0, [pc, #172]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a74:	1d00      	adds	r0, r0, #4
    3a76:	6801      	ldr	r1, [r0, #0]
    3a78:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    3a7c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    3a80:	6001      	str	r1, [r0, #0]
    3a82:	4927      	ldr	r1, [pc, #156]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a84:	4828      	ldr	r0, [pc, #160]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3a86:	313c      	adds	r1, #60	; 0x3c
    3a88:	6008      	str	r0, [r1, #0]
    3a8a:	f004 faad 	bl	7fe8 <mpsl_fem_device_config_254_apply_get>
    3a8e:	b140      	cbz	r0, 3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3a94:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    3a98:	1c41      	adds	r1, r0, #1
    3a9a:	d002      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a9c:	4920      	ldr	r1, [pc, #128]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a9e:	3110      	adds	r1, #16
    3aa0:	6008      	str	r0, [r1, #0]
    3aa2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3aa6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    3aa8:	1c41      	adds	r1, r0, #1
    3aaa:	d004      	beq.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
    3aac:	491f      	ldr	r1, [pc, #124]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3aae:	680a      	ldr	r2, [r1, #0]
    3ab0:	f360 4217 	bfi	r2, r0, #16, #8
    3ab4:	600a      	str	r2, [r1, #0]
    3ab6:	f240 1103 	movw	r1, #259	; 0x103
    3aba:	f240 605b 	movw	r0, #1627	; 0x65b
    3abe:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    3ac2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3ac6:	2001      	movs	r0, #1
    3ac8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    3acc:	f000 f842 	bl	3b54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3ad0:	f240 2001 	movw	r0, #513	; 0x201
    3ad4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    3ad8:	2002      	movs	r0, #2
    3ada:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3ade:	4914      	ldr	r1, [pc, #80]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3ae0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    3ae4:	6008      	str	r0, [r1, #0]
    3ae6:	4913      	ldr	r1, [pc, #76]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3ae8:	2000      	movs	r0, #0
    3aea:	8608      	strh	r0, [r1, #48]	; 0x30
    3aec:	3110      	adds	r1, #16
    3aee:	61c8      	str	r0, [r1, #28]
    3af0:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    3af4:	2001      	movs	r0, #1
    3af6:	f006 fc67 	bl	a3c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3afa:	2010      	movs	r0, #16
    3afc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3b00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3b04:	2002      	movs	r0, #2
    3b06:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    3b0a:	480b      	ldr	r0, [pc, #44]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3b0c:	6800      	ldr	r0, [r0, #0]
    3b0e:	2800      	cmp	r0, #0
    3b10:	d002      	beq.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3b16:	4700      	bx	r0
    3b18:	bd70      	pop	{r4, r5, r6, pc}
    3b1a:	0000      	.short	0x0000
    3b1c:	40001000 	.word	0x40001000
    3b20:	4000173c 	.word	0x4000173c
    3b24:	80000096 	.word	0x80000096
    3b28:	8900002c 	.word	0x8900002c
    3b2c:	4000158c 	.word	0x4000158c
    3b30:	4001f504 	.word	0x4001f504
    3b34:	20000c28 	.word	0x20000c28
    3b38:	200000f4 	.word	0x200000f4

00003b3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    3b3c:	4901      	ldr	r1, [pc, #4]	; (3b44 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    3b3e:	7548      	strb	r0, [r1, #21]
    3b40:	4770      	bx	lr
    3b42:	0000      	.short	0x0000
    3b44:	20000c38 	.word	0x20000c38

00003b48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    3b48:	4901      	ldr	r1, [pc, #4]	; (3b50 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    3b4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3b4e:	4770      	bx	lr
    3b50:	0000436c 	.word	0x0000436c

00003b54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    3b54:	4908      	ldr	r1, [pc, #32]	; (3b78 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    3b56:	b510      	push	{r4, lr}
    3b58:	7508      	strb	r0, [r1, #20]
    3b5a:	4908      	ldr	r1, [pc, #32]	; (3b7c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    3b5c:	2801      	cmp	r0, #1
    3b5e:	d006      	beq.n	3b6e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    3b60:	2802      	cmp	r0, #2
    3b62:	d006      	beq.n	3b72 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    3b64:	f640 516c 	movw	r1, #3436	; 0xd6c
    3b68:	203e      	movs	r0, #62	; 0x3e
    3b6a:	f7fc ffd3 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b6e:	2003      	movs	r0, #3
    3b70:	e000      	b.n	3b74 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    3b72:	2004      	movs	r0, #4
    3b74:	6008      	str	r0, [r1, #0]
    3b76:	bd10      	pop	{r4, pc}
    3b78:	20000c38 	.word	0x20000c38
    3b7c:	40001510 	.word	0x40001510

00003b80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    3b80:	4905      	ldr	r1, [pc, #20]	; (3b98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    3b82:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    3b86:	4805      	ldr	r0, [pc, #20]	; (3b9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    3b88:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    3b8c:	f041 0101 	orr.w	r1, r1, #1
    3b90:	7001      	strb	r1, [r0, #0]
    3b92:	f000 ba0b 	b.w	3fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3b96:	0000      	.short	0x0000
    3b98:	40001000 	.word	0x40001000
    3b9c:	20000c38 	.word	0x20000c38

00003ba0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    3ba0:	4901      	ldr	r1, [pc, #4]	; (3ba8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    3ba2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ba6:	4770      	bx	lr
    3ba8:	00004378 	.word	0x00004378

00003bac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    3bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bb0:	4e30      	ldr	r6, [pc, #192]	; (3c74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3bb2:	4c31      	ldr	r4, [pc, #196]	; (3c78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    3bb4:	4688      	mov	r8, r1
    3bb6:	0007      	movs	r7, r0
    3bb8:	4615      	mov	r5, r2
    3bba:	f04f 0901 	mov.w	r9, #1
    3bbe:	d006      	beq.n	3bce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    3bc0:	2f01      	cmp	r7, #1
    3bc2:	d012      	beq.n	3bea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    3bc4:	f640 0117 	movw	r1, #2071	; 0x817
    3bc8:	203e      	movs	r0, #62	; 0x3e
    3bca:	f7fc ffa3 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bce:	4610      	mov	r0, r2
    3bd0:	f000 fb80 	bl	42d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d4>
    3bd4:	4829      	ldr	r0, [pc, #164]	; (3c7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    3bd6:	f884 9009 	strb.w	r9, [r4, #9]
    3bda:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    3bde:	4640      	mov	r0, r8
    3be0:	f000 fb26 	bl	4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>
    3be4:	4605      	mov	r5, r0
    3be6:	4630      	mov	r0, r6
    3be8:	e00c      	b.n	3c04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    3bea:	4610      	mov	r0, r2
    3bec:	f000 fb58 	bl	42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>
    3bf0:	2002      	movs	r0, #2
    3bf2:	7260      	strb	r0, [r4, #9]
    3bf4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    3bf8:	4640      	mov	r0, r8
    3bfa:	f000 fb19 	bl	4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>
    3bfe:	4605      	mov	r5, r0
    3c00:	481c      	ldr	r0, [pc, #112]	; (3c74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3c02:	1d00      	adds	r0, r0, #4
    3c04:	f000 fad2 	bl	41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>
    3c08:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3c80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    3c0c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    3c10:	f8df a074 	ldr.w	sl, [pc, #116]	; 3c88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    3c14:	481b      	ldr	r0, [pc, #108]	; (3c84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    3c16:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    3c1a:	2010      	movs	r0, #16
    3c1c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    3c20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3c22:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    3c26:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    3c2a:	6260      	str	r0, [r4, #36]	; 0x24
    3c2c:	4817      	ldr	r0, [pc, #92]	; (3c8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3c2e:	6006      	str	r6, [r0, #0]
    3c30:	f000 f9f6 	bl	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    3c34:	4641      	mov	r1, r8
    3c36:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    3c3a:	4811      	ldr	r0, [pc, #68]	; (3c80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    3c3c:	300c      	adds	r0, #12
    3c3e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3c42:	42a8      	cmp	r0, r5
    3c44:	d310      	bcc.n	3c68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    3c46:	2000      	movs	r0, #0
    3c48:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3c4c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    3c50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3c52:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    3c56:	6260      	str	r0, [r4, #36]	; 0x24
    3c58:	480c      	ldr	r0, [pc, #48]	; (3c8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3c5a:	1d00      	adds	r0, r0, #4
    3c5c:	6006      	str	r6, [r0, #0]
    3c5e:	f7ff fd6b 	bl	3738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c62:	2000      	movs	r0, #0
    3c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c68:	4629      	mov	r1, r5
    3c6a:	4638      	mov	r0, r7
    3c6c:	f000 faaa 	bl	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    3c70:	2001      	movs	r0, #1
    3c72:	e7f7      	b.n	3c64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    3c74:	40001000 	.word	0x40001000
    3c78:	20000c38 	.word	0x20000c38
    3c7c:	00004318 	.word	0x00004318
    3c80:	40008000 	.word	0x40008000
    3c84:	40008140 	.word	0x40008140
    3c88:	4001f098 	.word	0x4001f098
    3c8c:	4001f504 	.word	0x4001f504

00003c90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    3c90:	4b0d      	ldr	r3, [pc, #52]	; (3cc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    3c92:	b510      	push	{r4, lr}
    3c94:	71d8      	strb	r0, [r3, #7]
    3c96:	729a      	strb	r2, [r3, #10]
    3c98:	b151      	cbz	r1, 3cb0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    3c9a:	2002      	movs	r0, #2
    3c9c:	7218      	strb	r0, [r3, #8]
    3c9e:	2801      	cmp	r0, #1
    3ca0:	d008      	beq.n	3cb4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    3ca2:	2802      	cmp	r0, #2
    3ca4:	d00f      	beq.n	3cc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3ca6:	f640 2144 	movw	r1, #2628	; 0xa44
    3caa:	203e      	movs	r0, #62	; 0x3e
    3cac:	f7fc ff32 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cb0:	2001      	movs	r0, #1
    3cb2:	e7f3      	b.n	3c9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    3cb4:	7a58      	ldrb	r0, [r3, #9]
    3cb6:	2802      	cmp	r0, #2
    3cb8:	d105      	bne.n	3cc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3cba:	f000 f93b 	bl	3f34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    3cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cc2:	f000 ba49 	b.w	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    3cc6:	bd10      	pop	{r4, pc}
    3cc8:	20000c38 	.word	0x20000c38

00003ccc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    3ccc:	4904      	ldr	r1, [pc, #16]	; (3ce0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    3cce:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    3cd2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    3cd6:	4249      	negs	r1, r1
    3cd8:	7001      	strb	r1, [r0, #0]
    3cda:	2001      	movs	r0, #1
    3cdc:	4770      	bx	lr
    3cde:	0000      	.short	0x0000
    3ce0:	40001000 	.word	0x40001000

00003ce4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    3ce4:	4903      	ldr	r1, [pc, #12]	; (3cf4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    3ce6:	0e02      	lsrs	r2, r0, #24
    3ce8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    3cec:	0200      	lsls	r0, r0, #8
    3cee:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    3cf2:	4770      	bx	lr
    3cf4:	40001000 	.word	0x40001000

00003cf8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    3cf8:	4901      	ldr	r1, [pc, #4]	; (3d00 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    3cfa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3cfe:	4770      	bx	lr
    3d00:	40001000 	.word	0x40001000

00003d04 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    3d04:	b510      	push	{r4, lr}
    3d06:	2200      	movs	r2, #0
    3d08:	2901      	cmp	r1, #1
    3d0a:	d006      	beq.n	3d1a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    3d0c:	2902      	cmp	r1, #2
    3d0e:	d002      	beq.n	3d16 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    3d10:	f240 21d2 	movw	r1, #722	; 0x2d2
    3d14:	e014      	b.n	3d40 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    3d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3d1a:	490b      	ldr	r1, [pc, #44]	; (3d48 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    3d1c:	430a      	orrs	r2, r1
    3d1e:	490b      	ldr	r1, [pc, #44]	; (3d4c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3d20:	600a      	str	r2, [r1, #0]
    3d22:	490b      	ldr	r1, [pc, #44]	; (3d50 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    3d24:	4308      	orrs	r0, r1
    3d26:	4909      	ldr	r1, [pc, #36]	; (3d4c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3d28:	1d09      	adds	r1, r1, #4
    3d2a:	6008      	str	r0, [r1, #0]
    3d2c:	4809      	ldr	r0, [pc, #36]	; (3d54 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    3d2e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3d32:	b2c0      	uxtb	r0, r0
    3d34:	2803      	cmp	r0, #3
    3d36:	d001      	beq.n	3d3c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    3d38:	280b      	cmp	r0, #11
    3d3a:	d104      	bne.n	3d46 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    3d3c:	f240 21ea 	movw	r1, #746	; 0x2ea
    3d40:	203e      	movs	r0, #62	; 0x3e
    3d42:	f7fc fee7 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d46:	bd10      	pop	{r4, pc}
    3d48:	00100108 	.word	0x00100108
    3d4c:	40001514 	.word	0x40001514
    3d50:	02030000 	.word	0x02030000
    3d54:	40001000 	.word	0x40001000

00003d58 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    3d58:	4901      	ldr	r1, [pc, #4]	; (3d60 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    3d5a:	7588      	strb	r0, [r1, #22]
    3d5c:	4770      	bx	lr
    3d5e:	0000      	.short	0x0000
    3d60:	20000c38 	.word	0x20000c38

00003d64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    3d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d68:	4851      	ldr	r0, [pc, #324]	; (3eb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d6a:	f04f 0a01 	mov.w	sl, #1
    3d6e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    3d72:	484f      	ldr	r0, [pc, #316]	; (3eb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d74:	300c      	adds	r0, #12
    3d76:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    3d7a:	f006 fb89 	bl	a490 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    3d7e:	4c4d      	ldr	r4, [pc, #308]	; (3eb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3d80:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    3d84:	f000 f8e0 	bl	3f48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    3d88:	494b      	ldr	r1, [pc, #300]	; (3eb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    3d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3d8c:	6008      	str	r0, [r1, #0]
    3d8e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3ebc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    3d92:	2000      	movs	r0, #0
    3d94:	6260      	str	r0, [r4, #36]	; 0x24
    3d96:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    3d9a:	f240 131d 	movw	r3, #285	; 0x11d
    3d9e:	439a      	bics	r2, r3
    3da0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    3da4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3da8:	f000 f94e 	bl	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
    3dac:	4605      	mov	r5, r0
    3dae:	4840      	ldr	r0, [pc, #256]	; (3eb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3db0:	3008      	adds	r0, #8
    3db2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3db6:	4e3e      	ldr	r6, [pc, #248]	; (3eb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3db8:	61e0      	str	r0, [r4, #28]
    3dba:	1d36      	adds	r6, r6, #4
    3dbc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    3dc0:	61a0      	str	r0, [r4, #24]
    3dc2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3dc6:	7d21      	ldrb	r1, [r4, #20]
    3dc8:	f884 1020 	strb.w	r1, [r4, #32]
    3dcc:	7a61      	ldrb	r1, [r4, #9]
    3dce:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3dd2:	46a1      	mov	r9, r4
    3dd4:	2400      	movs	r4, #0
    3dd6:	4639      	mov	r1, r7
    3dd8:	4628      	mov	r0, r5
    3dda:	f000 f983 	bl	40e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe4>
    3dde:	b910      	cbnz	r0, 3de6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    3de0:	f8c8 a010 	str.w	sl, [r8, #16]
    3de4:	2401      	movs	r4, #1
    3de6:	4f33      	ldr	r7, [pc, #204]	; (3eb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3de8:	07e8      	lsls	r0, r5, #31
    3dea:	f1a7 0710 	sub.w	r7, r7, #16
    3dee:	d120      	bne.n	3e32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    3df0:	07a8      	lsls	r0, r5, #30
    3df2:	d527      	bpl.n	3e44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    3df4:	f006 fc74 	bl	a6e0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3df8:	b9f0      	cbnz	r0, 3e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3dfa:	f006 fc61 	bl	a6c0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3dfe:	b9d8      	cbnz	r0, 3e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3e00:	482f      	ldr	r0, [pc, #188]	; (3ec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    3e02:	6800      	ldr	r0, [r0, #0]
    3e04:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    3e08:	f3c0 6300 	ubfx	r3, r0, #24, #1
    3e0c:	f000 020f 	and.w	r2, r0, #15
    3e10:	f3c0 1103 	ubfx	r1, r0, #4, #4
    3e14:	f3c0 2803 	ubfx	r8, r0, #8, #4
    3e18:	b173      	cbz	r3, 3e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3e1a:	b11a      	cbz	r2, 3e24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3e1c:	b111      	cbz	r1, 3e24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3e1e:	f1b8 0f00 	cmp.w	r8, #0
    3e22:	d109      	bne.n	3e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3e24:	f3c0 4004 	ubfx	r0, r0, #16, #5
    3e28:	2801      	cmp	r0, #1
    3e2a:	d105      	bne.n	3e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3e2c:	f1bc 0f03 	cmp.w	ip, #3
    3e30:	d202      	bcs.n	3e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3e32:	6838      	ldr	r0, [r7, #0]
    3e34:	4780      	blx	r0
    3e36:	e00e      	b.n	3e56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3e38:	f345 0080 	sbfx	r0, r5, #2, #1
    3e3c:	4621      	mov	r1, r4
    3e3e:	1c40      	adds	r0, r0, #1
    3e40:	687a      	ldr	r2, [r7, #4]
    3e42:	e007      	b.n	3e54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    3e44:	f015 0f28 	tst.w	r5, #40	; 0x28
    3e48:	d005      	beq.n	3e56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3e4a:	f345 1140 	sbfx	r1, r5, #5, #1
    3e4e:	68ba      	ldr	r2, [r7, #8]
    3e50:	4620      	mov	r0, r4
    3e52:	1c49      	adds	r1, r1, #1
    3e54:	4790      	blx	r2
    3e56:	06e8      	lsls	r0, r5, #27
    3e58:	d501      	bpl.n	3e5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    3e5a:	68f8      	ldr	r0, [r7, #12]
    3e5c:	4780      	blx	r0
    3e5e:	f899 1009 	ldrb.w	r1, [r9, #9]
    3e62:	4648      	mov	r0, r9
    3e64:	2902      	cmp	r1, #2
    3e66:	d120      	bne.n	3eaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3e68:	7b01      	ldrb	r1, [r0, #12]
    3e6a:	2900      	cmp	r1, #0
    3e6c:	d01d      	beq.n	3eaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3e6e:	2902      	cmp	r1, #2
    3e70:	d004      	beq.n	3e7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    3e72:	2901      	cmp	r1, #1
    3e74:	d009      	beq.n	3e8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    3e76:	f640 4156 	movw	r1, #3158	; 0xc56
    3e7a:	e00d      	b.n	3e98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    3e7c:	69c1      	ldr	r1, [r0, #28]
    3e7e:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3e82:	4408      	add	r0, r1
    3e84:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    3e88:	e00b      	b.n	3ea2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    3e8a:	6901      	ldr	r1, [r0, #16]
    3e8c:	f8d9 001c 	ldr.w	r0, [r9, #28]
    3e90:	4281      	cmp	r1, r0
    3e92:	d804      	bhi.n	3e9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    3e94:	f640 4157 	movw	r1, #3159	; 0xc57
    3e98:	203e      	movs	r0, #62	; 0x3e
    3e9a:	f7fc fe3b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e9e:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    3ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ea6:	f000 b961 	b.w	416c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16c>
    3eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3eae:	0000      	.short	0x0000
    3eb0:	40008000 	.word	0x40008000
    3eb4:	20000c38 	.word	0x20000c38
    3eb8:	4001f508 	.word	0x4001f508
    3ebc:	40001000 	.word	0x40001000
    3ec0:	40001450 	.word	0x40001450
    3ec4:	480b      	ldr	r0, [pc, #44]	; (3ef4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    3ec6:	7d81      	ldrb	r1, [r0, #22]
    3ec8:	480b      	ldr	r0, [pc, #44]	; (3ef8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    3eca:	5c40      	ldrb	r0, [r0, r1]
    3ecc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3ed0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    3ed4:	d204      	bcs.n	3ee0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    3ed6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    3eda:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3ede:	e001      	b.n	3ee4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    3ee0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    3ee4:	4a05      	ldr	r2, [pc, #20]	; (3efc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    3ee6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    3eea:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    3eee:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    3ef2:	4770      	bx	lr
    3ef4:	20000c38 	.word	0x20000c38
    3ef8:	0000431e 	.word	0x0000431e
    3efc:	40001000 	.word	0x40001000
    3f00:	b508      	push	{r3, lr}
    3f02:	490b      	ldr	r1, [pc, #44]	; (3f30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    3f04:	466b      	mov	r3, sp
    3f06:	f991 2015 	ldrsb.w	r2, [r1, #21]
    3f0a:	7d89      	ldrb	r1, [r1, #22]
    3f0c:	f000 faaa 	bl	4464 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    3f10:	f99d 0000 	ldrsb.w	r0, [sp]
    3f14:	f000 fa7a 	bl	440c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    3f18:	f10d 0001 	add.w	r0, sp, #1
    3f1c:	f004 f84e 	bl	7fbc <mpsl_fem_pa_gain_set>
    3f20:	2800      	cmp	r0, #0
    3f22:	d004      	beq.n	3f2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    3f24:	f240 51e6 	movw	r1, #1510	; 0x5e6
    3f28:	203e      	movs	r0, #62	; 0x3e
    3f2a:	f7fc fdf3 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f2e:	bd08      	pop	{r3, pc}
    3f30:	20000c38 	.word	0x20000c38
    3f34:	4803      	ldr	r0, [pc, #12]	; (3f44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    3f36:	7a01      	ldrb	r1, [r0, #8]
    3f38:	2901      	cmp	r1, #1
    3f3a:	d102      	bne.n	3f42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    3f3c:	7a80      	ldrb	r0, [r0, #10]
    3f3e:	f7ff bfdf 	b.w	3f00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3f42:	4770      	bx	lr
    3f44:	20000c38 	.word	0x20000c38
    3f48:	480d      	ldr	r0, [pc, #52]	; (3f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	7a40      	ldrb	r0, [r0, #9]
    3f4e:	2801      	cmp	r0, #1
    3f50:	d00c      	beq.n	3f6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    3f52:	2802      	cmp	r0, #2
    3f54:	d113      	bne.n	3f7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f56:	f004 f813 	bl	7f80 <mpsl_fem_lna_configuration_clear>
    3f5a:	2800      	cmp	r0, #0
    3f5c:	d00f      	beq.n	3f7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f5e:	1c40      	adds	r0, r0, #1
    3f60:	d00d      	beq.n	3f7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f62:	f640 01ab 	movw	r1, #2219	; 0x8ab
    3f66:	203e      	movs	r0, #62	; 0x3e
    3f68:	f7fc fdd4 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f6c:	f004 f81a 	bl	7fa4 <mpsl_fem_pa_configuration_clear>
    3f70:	2800      	cmp	r0, #0
    3f72:	d004      	beq.n	3f7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f74:	1c40      	adds	r0, r0, #1
    3f76:	d002      	beq.n	3f7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f78:	f640 01a5 	movw	r1, #2213	; 0x8a5
    3f7c:	e7f3      	b.n	3f66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    3f7e:	bd10      	pop	{r4, pc}
    3f80:	20000c38 	.word	0x20000c38
    3f84:	4808      	ldr	r0, [pc, #32]	; (3fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    3f86:	2100      	movs	r1, #0
    3f88:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3f8c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    3f90:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    3f94:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    3f98:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    3f9c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    3fa0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    3fa4:	4770      	bx	lr
    3fa6:	0000      	.short	0x0000
    3fa8:	40001000 	.word	0x40001000
    3fac:	4818      	ldr	r0, [pc, #96]	; (4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>)
    3fae:	b510      	push	{r4, lr}
    3fb0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    3fb4:	07c1      	lsls	r1, r0, #31
    3fb6:	d029      	beq.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    3fb8:	0781      	lsls	r1, r0, #30
    3fba:	d514      	bpl.n	3fe6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    3fbc:	4815      	ldr	r0, [pc, #84]	; (4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>)
    3fbe:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3fc2:	f041 0101 	orr.w	r1, r1, #1
    3fc6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3fca:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3fce:	b2c0      	uxtb	r0, r0
    3fd0:	280b      	cmp	r0, #11
    3fd2:	d005      	beq.n	3fe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3fd4:	280a      	cmp	r0, #10
    3fd6:	d003      	beq.n	3fe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3fd8:	2803      	cmp	r0, #3
    3fda:	d001      	beq.n	3fe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3fdc:	2802      	cmp	r0, #2
    3fde:	d115      	bne.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    3fe0:	f240 610f 	movw	r1, #1551	; 0x60f
    3fe4:	e00f      	b.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
    3fe6:	0740      	lsls	r0, r0, #29
    3fe8:	d510      	bpl.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    3fea:	480a      	ldr	r0, [pc, #40]	; (4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>)
    3fec:	490a      	ldr	r1, [pc, #40]	; (4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>)
    3fee:	3008      	adds	r0, #8
    3ff0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    3ff4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3ff8:	4808      	ldr	r0, [pc, #32]	; (401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>)
    3ffa:	f006 fa08 	bl	a40e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3ffe:	2800      	cmp	r0, #0
    4000:	d004      	beq.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    4002:	f240 6117 	movw	r1, #1559	; 0x617
    4006:	203e      	movs	r0, #62	; 0x3e
    4008:	f7fc fd84 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    400c:	bd10      	pop	{r4, pc}
    400e:	0000      	.short	0x0000
    4010:	20000c38 	.word	0x20000c38
    4014:	40001000 	.word	0x40001000
    4018:	4001f098 	.word	0x4001f098
    401c:	40008000 	.word	0x40008000
    4020:	4808      	ldr	r0, [pc, #32]	; (4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>)
    4022:	4601      	mov	r1, r0
    4024:	79c2      	ldrb	r2, [r0, #7]
    4026:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    402a:	b112      	cbz	r2, 4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    402c:	2a01      	cmp	r2, #1
    402e:	d003      	beq.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
    4030:	e006      	b.n	4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>
    4032:	f041 0102 	orr.w	r1, r1, #2
    4036:	e001      	b.n	403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>
    4038:	f041 0104 	orr.w	r1, r1, #4
    403c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    4040:	f7ff bfb4 	b.w	3fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    4044:	20000c38 	.word	0x20000c38
    4048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    404c:	4d22      	ldr	r5, [pc, #136]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    404e:	2400      	movs	r4, #0
    4050:	7b28      	ldrb	r0, [r5, #12]
    4052:	b138      	cbz	r0, 4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
    4054:	f44f 71a2 	mov.w	r1, #324	; 0x144
    4058:	4820      	ldr	r0, [pc, #128]	; (40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>)
    405a:	f006 f9d8 	bl	a40e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    405e:	b108      	cbz	r0, 4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
    4060:	2701      	movs	r7, #1
    4062:	e000      	b.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    4064:	2700      	movs	r7, #0
    4066:	7a68      	ldrb	r0, [r5, #9]
    4068:	4e1d      	ldr	r6, [pc, #116]	; (40e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe0>)
    406a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    406e:	2801      	cmp	r0, #1
    4070:	d002      	beq.n	4078 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x78>
    4072:	2802      	cmp	r0, #2
    4074:	d006      	beq.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    4076:	e016      	b.n	40a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa6>
    4078:	4630      	mov	r0, r6
    407a:	f006 f9c3 	bl	a404 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    407e:	b190      	cbz	r0, 40a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa6>
    4080:	2408      	movs	r4, #8
    4082:	e010      	b.n	40a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa6>
    4084:	4630      	mov	r0, r6
    4086:	f006 f9bd 	bl	a404 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    408a:	b100      	cbz	r0, 408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
    408c:	2402      	movs	r4, #2
    408e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    4092:	43c0      	mvns	r0, r0
    4094:	f340 0000 	sbfx	r0, r0, #0, #1
    4098:	1c40      	adds	r0, r0, #1
    409a:	d101      	bne.n	40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>
    409c:	f044 0404 	orr.w	r4, r4, #4
    40a0:	b10f      	cbz	r7, 40a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa6>
    40a2:	f044 0401 	orr.w	r4, r4, #1
    40a6:	f014 0f0b 	tst.w	r4, #11
    40aa:	d107      	bne.n	40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>
    40ac:	f44f 7188 	mov.w	r1, #272	; 0x110
    40b0:	4630      	mov	r0, r6
    40b2:	f006 f9a7 	bl	a404 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    40b6:	b108      	cbz	r0, 40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>
    40b8:	f044 0410 	orr.w	r4, r4, #16
    40bc:	f7ff ff62 	bl	3f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    40c0:	06e0      	lsls	r0, r4, #27
    40c2:	d506      	bpl.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40c4:	0720      	lsls	r0, r4, #28
    40c6:	d404      	bmi.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40c8:	7a68      	ldrb	r0, [r5, #9]
    40ca:	2801      	cmp	r0, #1
    40cc:	d101      	bne.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40ce:	f044 0420 	orr.w	r4, r4, #32
    40d2:	4620      	mov	r0, r4
    40d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40d8:	20000c38 	.word	0x20000c38
    40dc:	40008000 	.word	0x40008000
    40e0:	40001000 	.word	0x40001000
    40e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40e8:	4c1a      	ldr	r4, [pc, #104]	; (4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>)
    40ea:	460d      	mov	r5, r1
    40ec:	7a21      	ldrb	r1, [r4, #8]
    40ee:	b129      	cbz	r1, 40fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xfc>
    40f0:	f010 0f11 	tst.w	r0, #17
    40f4:	d007      	beq.n	4106 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x106>
    40f6:	f7ff fb1f 	bl	3738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    40fa:	e024      	b.n	4146 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x146>
    40fc:	f000 f890 	bl	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    4100:	2000      	movs	r0, #0
    4102:	7320      	strb	r0, [r4, #12]
    4104:	e01f      	b.n	4146 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x146>
    4106:	2901      	cmp	r1, #1
    4108:	d001      	beq.n	410e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10e>
    410a:	2601      	movs	r6, #1
    410c:	e000      	b.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
    410e:	2600      	movs	r6, #0
    4110:	79e0      	ldrb	r0, [r4, #7]
    4112:	2801      	cmp	r0, #1
    4114:	d00e      	beq.n	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    4116:	2700      	movs	r7, #0
    4118:	f000 f882 	bl	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    411c:	2196      	movs	r1, #150	; 0x96
    411e:	4630      	mov	r0, r6
    4120:	f000 f894 	bl	424c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24c>
    4124:	4601      	mov	r1, r0
    4126:	b14f      	cbz	r7, 413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>
    4128:	353b      	adds	r5, #59	; 0x3b
    412a:	428d      	cmp	r5, r1
    412c:	d904      	bls.n	4138 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x138>
    412e:	2000      	movs	r0, #0
    4130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4134:	2701      	movs	r7, #1
    4136:	e7ef      	b.n	4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>
    4138:	2001      	movs	r0, #1
    413a:	71e0      	strb	r0, [r4, #7]
    413c:	7aa2      	ldrb	r2, [r4, #10]
    413e:	4630      	mov	r0, r6
    4140:	f7ff fd34 	bl	3bac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    4144:	b108      	cbz	r0, 414a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14a>
    4146:	2001      	movs	r0, #1
    4148:	e7f2      	b.n	4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>
    414a:	f640 21a5 	movw	r1, #2725	; 0xaa5
    414e:	203e      	movs	r0, #62	; 0x3e
    4150:	f7fc fce0 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4154:	20000c38 	.word	0x20000c38
    4158:	4803      	ldr	r0, [pc, #12]	; (4168 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x168>)
    415a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    415e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    4162:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4166:	4770      	bx	lr
    4168:	40001000 	.word	0x40001000
    416c:	4804      	ldr	r0, [pc, #16]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    416e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4170:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    4174:	6241      	str	r1, [r0, #36]	; 0x24
    4176:	4903      	ldr	r1, [pc, #12]	; (4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>)
    4178:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    417c:	6008      	str	r0, [r1, #0]
    417e:	4770      	bx	lr
    4180:	20000c38 	.word	0x20000c38
    4184:	4001f504 	.word	0x4001f504
    4188:	4a07      	ldr	r2, [pc, #28]	; (41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>)
    418a:	2000      	movs	r0, #0
    418c:	3208      	adds	r2, #8
    418e:	4906      	ldr	r1, [pc, #24]	; (41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>)
    4190:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4194:	1d0a      	adds	r2, r1, #4
    4196:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    419a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    419e:	4902      	ldr	r1, [pc, #8]	; (41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>)
    41a0:	310c      	adds	r1, #12
    41a2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    41a6:	4770      	bx	lr
    41a8:	40008000 	.word	0x40008000
    41ac:	4903      	ldr	r1, [pc, #12]	; (41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>)
    41ae:	79c9      	ldrb	r1, [r1, #7]
    41b0:	2900      	cmp	r1, #0
    41b2:	d102      	bne.n	41ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ba>
    41b4:	4902      	ldr	r1, [pc, #8]	; (41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>)
    41b6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    41ba:	4770      	bx	lr
    41bc:	20000c38 	.word	0x20000c38
    41c0:	4001f098 	.word	0x4001f098
    41c4:	b510      	push	{r4, lr}
    41c6:	4a14      	ldr	r2, [pc, #80]	; (4218 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x218>)
    41c8:	b120      	cbz	r0, 41d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d4>
    41ca:	2801      	cmp	r0, #1
    41cc:	d011      	beq.n	41f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f2>
    41ce:	f240 7153 	movw	r1, #1875	; 0x753
    41d2:	e01c      	b.n	420e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20e>
    41d4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    41d8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    41dc:	490f      	ldr	r1, [pc, #60]	; (421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>)
    41de:	480e      	ldr	r0, [pc, #56]	; (4218 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x218>)
    41e0:	f003 fee6 	bl	7fb0 <mpsl_fem_pa_configuration_set>
    41e4:	2800      	cmp	r0, #0
    41e6:	d015      	beq.n	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    41e8:	1c40      	adds	r0, r0, #1
    41ea:	d013      	beq.n	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    41ec:	f240 7142 	movw	r1, #1858	; 0x742
    41f0:	e00d      	b.n	420e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20e>
    41f2:	f101 0029 	add.w	r0, r1, #41	; 0x29
    41f6:	e9c2 1002 	strd	r1, r0, [r2, #8]
    41fa:	4908      	ldr	r1, [pc, #32]	; (421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>)
    41fc:	4806      	ldr	r0, [pc, #24]	; (4218 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x218>)
    41fe:	f003 fec5 	bl	7f8c <mpsl_fem_lna_configuration_set>
    4202:	2800      	cmp	r0, #0
    4204:	d006      	beq.n	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    4206:	1c40      	adds	r0, r0, #1
    4208:	d004      	beq.n	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    420a:	f240 714f 	movw	r1, #1871	; 0x74f
    420e:	203e      	movs	r0, #62	; 0x3e
    4210:	f7fc fc80 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4214:	bd10      	pop	{r4, pc}
    4216:	0000      	.short	0x0000
    4218:	200000f8 	.word	0x200000f8
    421c:	00004348 	.word	0x00004348
    4220:	4802      	ldr	r0, [pc, #8]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    4222:	2100      	movs	r1, #0
    4224:	71c1      	strb	r1, [r0, #7]
    4226:	7201      	strb	r1, [r0, #8]
    4228:	7241      	strb	r1, [r0, #9]
    422a:	4770      	bx	lr
    422c:	20000c38 	.word	0x20000c38
    4230:	4a05      	ldr	r2, [pc, #20]	; (4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>)
    4232:	79d2      	ldrb	r2, [r2, #7]
    4234:	2a01      	cmp	r2, #1
    4236:	d006      	beq.n	4246 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x246>
    4238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    423c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    4240:	fbb1 f1f2 	udiv	r1, r1, r2
    4244:	1a40      	subs	r0, r0, r1
    4246:	4770      	bx	lr
    4248:	20000c38 	.word	0x20000c38
    424c:	b570      	push	{r4, r5, r6, lr}
    424e:	4c13      	ldr	r4, [pc, #76]	; (429c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29c>)
    4250:	4603      	mov	r3, r0
    4252:	460d      	mov	r5, r1
    4254:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    4258:	2000      	movs	r0, #0
    425a:	b15a      	cbz	r2, 4274 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x274>
    425c:	4621      	mov	r1, r4
    425e:	f891 1020 	ldrb.w	r1, [r1, #32]
    4262:	b163      	cbz	r3, 427e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27e>
    4264:	2b01      	cmp	r3, #1
    4266:	d111      	bne.n	428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>
    4268:	2a01      	cmp	r2, #1
    426a:	4628      	mov	r0, r5
    426c:	d012      	beq.n	4294 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x294>
    426e:	f006 f8d3 	bl	a418 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    4272:	e009      	b.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    4274:	f640 0158 	movw	r1, #2136	; 0x858
    4278:	203e      	movs	r0, #62	; 0x3e
    427a:	f7fc fc4b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    427e:	2a01      	cmp	r2, #1
    4280:	4628      	mov	r0, r5
    4282:	d004      	beq.n	428e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28e>
    4284:	f006 f8d6 	bl	a434 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    4288:	69e1      	ldr	r1, [r4, #28]
    428a:	4408      	add	r0, r1
    428c:	bd70      	pop	{r4, r5, r6, pc}
    428e:	f000 f8d1 	bl	4434 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    4292:	e7f9      	b.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    4294:	f000 f8c0 	bl	4418 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    4298:	e7f6      	b.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    429a:	0000      	.short	0x0000
    429c:	20000c38 	.word	0x20000c38
    42a0:	b510      	push	{r4, lr}
    42a2:	f7ff fc57 	bl	3b54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    42a6:	f7ff fe0d 	bl	3ec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    42aa:	f7ff fe43 	bl	3f34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    42ae:	f7ff ff53 	bl	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    42b2:	f006 fa15 	bl	a6e0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    42b6:	2800      	cmp	r0, #0
    42b8:	d108      	bne.n	42cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2cc>
    42ba:	f006 fa01 	bl	a6c0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    42be:	2800      	cmp	r0, #0
    42c0:	d104      	bne.n	42cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2cc>
    42c2:	4803      	ldr	r0, [pc, #12]	; (42d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d0>)
    42c4:	6801      	ldr	r1, [r0, #0]
    42c6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    42ca:	6001      	str	r1, [r0, #0]
    42cc:	bd10      	pop	{r4, pc}
    42ce:	0000      	.short	0x0000
    42d0:	40001568 	.word	0x40001568
    42d4:	b510      	push	{r4, lr}
    42d6:	4604      	mov	r4, r0
    42d8:	f7ff fc3c 	bl	3b54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    42dc:	f7ff fdf2 	bl	3ec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    42e0:	4620      	mov	r0, r4
    42e2:	f7ff fe0d 	bl	3f00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    42e6:	f006 f9fb 	bl	a6e0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    42ea:	2800      	cmp	r0, #0
    42ec:	d00d      	beq.n	430a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30a>
    42ee:	4a09      	ldr	r2, [pc, #36]	; (4314 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x314>)
    42f0:	6811      	ldr	r1, [r2, #0]
    42f2:	0650      	lsls	r0, r2, #25
    42f4:	2c02      	cmp	r4, #2
    42f6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    42fa:	d007      	beq.n	430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    42fc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    4300:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    4304:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    4308:	6010      	str	r0, [r2, #0]
    430a:	bd10      	pop	{r4, pc}
    430c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    4310:	e7f6      	b.n	4300 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x300>
    4312:	0000      	.short	0x0000
    4314:	40001588 	.word	0x40001588
    4318:	a62c0000 	.word	0xa62c0000
    431c:	0604a1e0 	.word	0x0604a1e0
    4320:	0e0c0a08 	.word	0x0e0c0a08
    4324:	16141210 	.word	0x16141210
    4328:	201e1c18 	.word	0x201e1c18
    432c:	28262422 	.word	0x28262422
    4330:	302e2c2a 	.word	0x302e2c2a
    4334:	38363432 	.word	0x38363432
    4338:	403e3c3a 	.word	0x403e3c3a
    433c:	48464442 	.word	0x48464442
    4340:	024e4c4a 	.word	0x024e4c4a
    4344:	0000501a 	.word	0x0000501a
    4348:	00000001 	.word	0x00000001
    434c:	40001110 	.word	0x40001110
	...
    4364:	00001e14 	.word	0x00001e14
    4368:	00001130 	.word	0x00001130
    436c:	00000000 	.word	0x00000000
    4370:	00000028 	.word	0x00000028
    4374:	00000018 	.word	0x00000018
    4378:	00000000 	.word	0x00000000
    437c:	00001e14 	.word	0x00001e14
    4380:	00001130 	.word	0x00001130
    4384:	00000000 	.word	0x00000000
    4388:	00001770 	.word	0x00001770
    438c:	00000fa0 	.word	0x00000fa0

00004390 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    4390:	b570      	push	{r4, r5, r6, lr}
    4392:	4605      	mov	r5, r0
    4394:	4614      	mov	r4, r2
    4396:	4608      	mov	r0, r1
    4398:	f7ff fc02 	bl	3ba0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    439c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    43a0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    43a4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    43a8:	4807      	ldr	r0, [pc, #28]	; (43c8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    43aa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    43ae:	4408      	add	r0, r1
    43b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    43b4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    43b8:	fbb0 f5f1 	udiv	r5, r0, r1
    43bc:	4620      	mov	r0, r4
    43be:	f7ff fbc3 	bl	3b48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    43c2:	4428      	add	r0, r5
    43c4:	1d40      	adds	r0, r0, #5
    43c6:	bd70      	pop	{r4, r5, r6, pc}
    43c8:	00004458 	.word	0x00004458

000043cc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    43cc:	b570      	push	{r4, r5, r6, lr}
    43ce:	4d0e      	ldr	r5, [pc, #56]	; (4408 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    43d0:	461c      	mov	r4, r3
    43d2:	3d08      	subs	r5, #8
    43d4:	4b0c      	ldr	r3, [pc, #48]	; (4408 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    43d6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    43da:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    43de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    43e2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    43e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    43ea:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    43ee:	4418      	add	r0, r3
    43f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    43f4:	fbb0 f5f1 	udiv	r5, r0, r1
    43f8:	4610      	mov	r0, r2
    43fa:	f7ff fba5 	bl	3b48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    43fe:	4428      	add	r0, r5
    4400:	4420      	add	r0, r4
    4402:	1d40      	adds	r0, r0, #5
    4404:	bd70      	pop	{r4, r5, r6, pc}
    4406:	0000      	.short	0x0000
    4408:	00004458 	.word	0x00004458

0000440c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    440c:	4901      	ldr	r1, [pc, #4]	; (4414 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    440e:	b2c0      	uxtb	r0, r0
    4410:	6008      	str	r0, [r1, #0]
    4412:	4770      	bx	lr
    4414:	4000150c 	.word	0x4000150c

00004418 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    4418:	4a05      	ldr	r2, [pc, #20]	; (4430 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    441a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    441e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4422:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    4426:	fbb1 f1f2 	udiv	r1, r1, r2
    442a:	4408      	add	r0, r1
    442c:	1e80      	subs	r0, r0, #2
    442e:	4770      	bx	lr
    4430:	00004450 	.word	0x00004450

00004434 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    4434:	4a05      	ldr	r2, [pc, #20]	; (444c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    4436:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    443a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    443e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    4442:	fbb1 f1f2 	udiv	r1, r1, r2
    4446:	4408      	add	r0, r1
    4448:	4770      	bx	lr
    444a:	0000      	.short	0x0000
    444c:	00004450 	.word	0x00004450
    4450:	05dc0000 	.word	0x05dc0000
    4454:	000003e8 	.word	0x000003e8
    4458:	00000000 	.word	0x00000000
    445c:	00001e14 	.word	0x00001e14
    4460:	00001130 	.word	0x00001130

00004464 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    4464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4468:	461e      	mov	r6, r3
    446a:	4617      	mov	r7, r2
    446c:	460c      	mov	r4, r1
    446e:	4605      	mov	r5, r0
    4470:	f000 f856 	bl	4520 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    4474:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 451c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    4478:	4680      	mov	r8, r0
    447a:	f899 0000 	ldrb.w	r0, [r9]
    447e:	42a8      	cmp	r0, r5
    4480:	d110      	bne.n	44a4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4482:	f899 1001 	ldrb.w	r1, [r9, #1]
    4486:	4648      	mov	r0, r9
    4488:	42a1      	cmp	r1, r4
    448a:	d10b      	bne.n	44a4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    448c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    4490:	42b9      	cmp	r1, r7
    4492:	d107      	bne.n	44a4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4494:	78c2      	ldrb	r2, [r0, #3]
    4496:	4542      	cmp	r2, r8
    4498:	d104      	bne.n	44a4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    449a:	8881      	ldrh	r1, [r0, #4]
    449c:	8031      	strh	r1, [r6, #0]
    449e:	7980      	ldrb	r0, [r0, #6]
    44a0:	70b0      	strb	r0, [r6, #2]
    44a2:	e037      	b.n	4514 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    44a4:	463a      	mov	r2, r7
    44a6:	4621      	mov	r1, r4
    44a8:	2d01      	cmp	r5, #1
    44aa:	d009      	beq.n	44c0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    44ac:	2d02      	cmp	r5, #2
    44ae:	d009      	beq.n	44c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    44b0:	2d04      	cmp	r5, #4
    44b2:	d009      	beq.n	44c8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    44b4:	2d08      	cmp	r5, #8
    44b6:	d009      	beq.n	44cc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    44b8:	f240 4161 	movw	r1, #1121	; 0x461
    44bc:	2006      	movs	r0, #6
    44be:	e00c      	b.n	44da <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    44c0:	2000      	movs	r0, #0
    44c2:	e004      	b.n	44ce <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    44c4:	2001      	movs	r0, #1
    44c6:	e002      	b.n	44ce <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    44c8:	2003      	movs	r0, #3
    44ca:	e000      	b.n	44ce <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    44cc:	2002      	movs	r0, #2
    44ce:	466b      	mov	r3, sp
    44d0:	f000 f89e 	bl	4610 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    44d4:	b118      	cbz	r0, 44de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    44d6:	213d      	movs	r1, #61	; 0x3d
    44d8:	2075      	movs	r0, #117	; 0x75
    44da:	f7fc fb1b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44de:	4620      	mov	r0, r4
    44e0:	f7ff f922 	bl	3728 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    44e4:	4602      	mov	r2, r0
    44e6:	2300      	movs	r3, #0
    44e8:	4631      	mov	r1, r6
    44ea:	f99d 0000 	ldrsb.w	r0, [sp]
    44ee:	f003 fd71 	bl	7fd4 <mpsl_fem_tx_power_split>
    44f2:	4601      	mov	r1, r0
    44f4:	f889 1007 	strb.w	r1, [r9, #7]
    44f8:	8831      	ldrh	r1, [r6, #0]
    44fa:	f8a9 1004 	strh.w	r1, [r9, #4]
    44fe:	78b1      	ldrb	r1, [r6, #2]
    4500:	f889 1006 	strb.w	r1, [r9, #6]
    4504:	f889 5000 	strb.w	r5, [r9]
    4508:	f889 4001 	strb.w	r4, [r9, #1]
    450c:	f889 7002 	strb.w	r7, [r9, #2]
    4510:	f889 8003 	strb.w	r8, [r9, #3]
    4514:	f999 0007 	ldrsb.w	r0, [r9, #7]
    4518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    451c:	20000190 	.word	0x20000190

00004520 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    4520:	4801      	ldr	r0, [pc, #4]	; (4528 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    4522:	7800      	ldrb	r0, [r0, #0]
    4524:	4770      	bx	lr
    4526:	0000      	.short	0x0000
    4528:	20000110 	.word	0x20000110

0000452c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    452c:	b570      	push	{r4, r5, r6, lr}
    452e:	4c17      	ldr	r4, [pc, #92]	; (458c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    4530:	7860      	ldrb	r0, [r4, #1]
    4532:	2800      	cmp	r0, #0
    4534:	d123      	bne.n	457e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    4536:	2001      	movs	r0, #1
    4538:	7060      	strb	r0, [r4, #1]
    453a:	f006 f8ab 	bl	a694 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    453e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    4542:	b928      	cbnz	r0, 4550 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    4544:	f006 f8dc 	bl	a700 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    4548:	b910      	cbnz	r0, 4550 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    454a:	f006 f8e3 	bl	a714 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    454e:	b120      	cbz	r0, 455a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    4550:	480f      	ldr	r0, [pc, #60]	; (4590 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    4552:	6060      	str	r0, [r4, #4]
    4554:	70a5      	strb	r5, [r4, #2]
    4556:	2008      	movs	r0, #8
    4558:	e010      	b.n	457c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    455a:	f006 f870 	bl	a63e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    455e:	b940      	cbnz	r0, 4572 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    4560:	f006 f877 	bl	a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4564:	b928      	cbnz	r0, 4572 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    4566:	f006 f88b 	bl	a680 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    456a:	b910      	cbnz	r0, 4572 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    456c:	f006 f89c 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4570:	b130      	cbz	r0, 4580 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    4572:	4807      	ldr	r0, [pc, #28]	; (4590 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    4574:	3031      	adds	r0, #49	; 0x31
    4576:	6060      	str	r0, [r4, #4]
    4578:	70a5      	strb	r5, [r4, #2]
    457a:	2004      	movs	r0, #4
    457c:	70e0      	strb	r0, [r4, #3]
    457e:	bd70      	pop	{r4, r5, r6, pc}
    4580:	f240 113f 	movw	r1, #319	; 0x13f
    4584:	2074      	movs	r0, #116	; 0x74
    4586:	f003 fb67 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    458a:	0000      	.short	0x0000
    458c:	20000110 	.word	0x20000110
    4590:	0000aa28 	.word	0x0000aa28

00004594 <mpsl_tx_power_radio_supported_power_adjust>:
    4594:	4a06      	ldr	r2, [pc, #24]	; (45b0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    4596:	b500      	push	{lr}
    4598:	f992 2003 	ldrsb.w	r2, [r2, #3]
    459c:	4290      	cmp	r0, r2
    459e:	db01      	blt.n	45a4 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    45a0:	4610      	mov	r0, r2
    45a2:	bd00      	pop	{pc}
    45a4:	f000 f808 	bl	45b8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    45a8:	4902      	ldr	r1, [pc, #8]	; (45b4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    45aa:	5608      	ldrsb	r0, [r1, r0]
    45ac:	bd00      	pop	{pc}
    45ae:	0000      	.short	0x0000
    45b0:	20000110 	.word	0x20000110
    45b4:	0000aa1a 	.word	0x0000aa1a

000045b8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    45b8:	4602      	mov	r2, r0
    45ba:	4813      	ldr	r0, [pc, #76]	; (4608 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    45bc:	b510      	push	{r4, lr}
    45be:	f990 3003 	ldrsb.w	r3, [r0, #3]
    45c2:	429a      	cmp	r2, r3
    45c4:	db01      	blt.n	45ca <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    45c6:	200d      	movs	r0, #13
    45c8:	bd10      	pop	{r4, pc}
    45ca:	f990 3002 	ldrsb.w	r3, [r0, #2]
    45ce:	429a      	cmp	r2, r3
    45d0:	dc01      	bgt.n	45d6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    45d2:	2000      	movs	r0, #0
    45d4:	bd10      	pop	{r4, pc}
    45d6:	b101      	cbz	r1, 45da <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    45d8:	2101      	movs	r1, #1
    45da:	1ad4      	subs	r4, r2, r3
    45dc:	6843      	ldr	r3, [r0, #4]
    45de:	5d18      	ldrb	r0, [r3, r4]
    45e0:	4c0a      	ldr	r4, [pc, #40]	; (460c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    45e2:	5624      	ldrsb	r4, [r4, r0]
    45e4:	4294      	cmp	r4, r2
    45e6:	d0f5      	beq.n	45d4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    45e8:	4c08      	ldr	r4, [pc, #32]	; (460c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    45ea:	4408      	add	r0, r1
    45ec:	343f      	adds	r4, #63	; 0x3f
    45ee:	b2c0      	uxtb	r0, r0
    45f0:	b2d2      	uxtb	r2, r2
    45f2:	42a3      	cmp	r3, r4
    45f4:	d1ee      	bne.n	45d4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    45f6:	2900      	cmp	r1, #0
    45f8:	d0ec      	beq.n	45d4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    45fa:	2a01      	cmp	r2, #1
    45fc:	d001      	beq.n	4602 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    45fe:	2a02      	cmp	r2, #2
    4600:	d1e8      	bne.n	45d4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4602:	1c40      	adds	r0, r0, #1
    4604:	b2c0      	uxtb	r0, r0
    4606:	bd10      	pop	{r4, pc}
    4608:	20000110 	.word	0x20000110
    460c:	0000aa1a 	.word	0x0000aa1a

00004610 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    4610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4614:	461c      	mov	r4, r3
    4616:	4690      	mov	r8, r2
    4618:	460d      	mov	r5, r1
    461a:	4606      	mov	r6, r0
    461c:	f06f 0715 	mvn.w	r7, #21
    4620:	2804      	cmp	r0, #4
    4622:	d804      	bhi.n	462e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4624:	b11c      	cbz	r4, 462e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4626:	f005 ff10 	bl	a44a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    462a:	42a8      	cmp	r0, r5
    462c:	d802      	bhi.n	4634 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    462e:	4638      	mov	r0, r7
    4630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4634:	4805      	ldr	r0, [pc, #20]	; (464c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    4636:	4642      	mov	r2, r8
    4638:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    463c:	b118      	cbz	r0, 4646 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    463e:	5740      	ldrsb	r0, [r0, r5]
    4640:	4282      	cmp	r2, r0
    4642:	dd00      	ble.n	4646 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    4644:	4602      	mov	r2, r0
    4646:	7022      	strb	r2, [r4, #0]
    4648:	2000      	movs	r0, #0
    464a:	e7f1      	b.n	4630 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    464c:	20000c6c 	.word	0x20000c6c

00004650 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    4650:	4801      	ldr	r0, [pc, #4]	; (4658 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    4652:	7800      	ldrb	r0, [r0, #0]
    4654:	4770      	bx	lr
    4656:	0000      	.short	0x0000
    4658:	20000118 	.word	0x20000118

0000465c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    465c:	4905      	ldr	r1, [pc, #20]	; (4674 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    465e:	780a      	ldrb	r2, [r1, #0]
    4660:	4290      	cmp	r0, r2
    4662:	d301      	bcc.n	4668 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    4664:	2000      	movs	r0, #0
    4666:	4770      	bx	lr
    4668:	6849      	ldr	r1, [r1, #4]
    466a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    466e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    4672:	4770      	bx	lr
    4674:	20000118 	.word	0x20000118

00004678 <MPSL_IRQ_RADIO_Handler>:
    4678:	490d      	ldr	r1, [pc, #52]	; (46b0 <MPSL_IRQ_RADIO_Handler+0x38>)
    467a:	b510      	push	{r4, lr}
    467c:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    4680:	2820      	cmp	r0, #32
    4682:	d00f      	beq.n	46a4 <MPSL_IRQ_RADIO_Handler+0x2c>
    4684:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    4688:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    468c:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    4690:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    4694:	6840      	ldr	r0, [r0, #4]
    4696:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    469a:	680a      	ldr	r2, [r1, #0]
    469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46a0:	2104      	movs	r1, #4
    46a2:	4710      	bx	r2
    46a4:	f640 017f 	movw	r1, #2175	; 0x87f
    46a8:	2070      	movs	r0, #112	; 0x70
    46aa:	f003 fad5 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46ae:	0000      	.short	0x0000
    46b0:	20000a10 	.word	0x20000a10
    46b4:	b570      	push	{r4, r5, r6, lr}
    46b6:	4605      	mov	r5, r0
    46b8:	2a20      	cmp	r2, #32
    46ba:	d028      	beq.n	470e <MPSL_IRQ_RADIO_Handler+0x96>
    46bc:	4819      	ldr	r0, [pc, #100]	; (4724 <MPSL_IRQ_RADIO_Handler+0xac>)
    46be:	4c1a      	ldr	r4, [pc, #104]	; (4728 <MPSL_IRQ_RADIO_Handler+0xb0>)
    46c0:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    46c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    46c8:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    46cc:	4423      	add	r3, r4
    46ce:	2920      	cmp	r1, #32
    46d0:	d022      	beq.n	4718 <MPSL_IRQ_RADIO_Handler+0xa0>
    46d2:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    46d6:	7840      	ldrb	r0, [r0, #1]
    46d8:	784c      	ldrb	r4, [r1, #1]
    46da:	7048      	strb	r0, [r1, #1]
    46dc:	4620      	mov	r0, r4
    46de:	4601      	mov	r1, r0
    46e0:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    46e4:	4291      	cmp	r1, r2
    46e6:	7005      	strb	r5, [r0, #0]
    46e8:	7840      	ldrb	r0, [r0, #1]
    46ea:	d1f8      	bne.n	46de <MPSL_IRQ_RADIO_Handler+0x66>
    46ec:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    46f0:	2a20      	cmp	r2, #32
    46f2:	bf1a      	itte	ne
    46f4:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    46f8:	7054      	strbne	r4, [r2, #1]
    46fa:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    46fe:	2220      	movs	r2, #32
    4700:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    4704:	f88c 2001 	strb.w	r2, [ip, #1]
    4708:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    470c:	bd70      	pop	{r4, r5, r6, pc}
    470e:	f240 2186 	movw	r1, #646	; 0x286
    4712:	2070      	movs	r0, #112	; 0x70
    4714:	f003 faa0 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4718:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    471c:	7840      	ldrb	r0, [r0, #1]
    471e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    4722:	e7db      	b.n	46dc <MPSL_IRQ_RADIO_Handler+0x64>
    4724:	20000990 	.word	0x20000990
    4728:	20000a10 	.word	0x20000a10
    472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4730:	b08f      	sub	sp, #60	; 0x3c
    4732:	4615      	mov	r5, r2
    4734:	461e      	mov	r6, r3
    4736:	460c      	mov	r4, r1
    4738:	f002 f9fc 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    473c:	1828      	adds	r0, r5, r0
    473e:	f146 0100 	adc.w	r1, r6, #0
    4742:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4746:	e9d4 2300 	ldrd	r2, r3, [r4]
    474a:	1a80      	subs	r0, r0, r2
    474c:	eb71 0003 	sbcs.w	r0, r1, r3
    4750:	f0c0 80e5 	bcc.w	491e <MPSL_IRQ_RADIO_Handler+0x2a6>
    4754:	a808      	add	r0, sp, #32
    4756:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    475a:	900a      	str	r0, [sp, #40]	; 0x28
    475c:	48bc      	ldr	r0, [pc, #752]	; (4a50 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    475e:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    4762:	4408      	add	r0, r1
    4764:	9009      	str	r0, [sp, #36]	; 0x24
    4766:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    476a:	2020      	movs	r0, #32
    476c:	f10d 091c 	add.w	r9, sp, #28
    4770:	f88d 001c 	strb.w	r0, [sp, #28]
    4774:	2d20      	cmp	r5, #32
    4776:	d036      	beq.n	47e6 <MPSL_IRQ_RADIO_Handler+0x16e>
    4778:	48b6      	ldr	r0, [pc, #728]	; (4a54 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    477a:	2600      	movs	r6, #0
    477c:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    4780:	48b5      	ldr	r0, [pc, #724]	; (4a58 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    4782:	e9d4 7300 	ldrd	r7, r3, [r4]
    4786:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    478a:	f850 8f08 	ldr.w	r8, [r0, #8]!
    478e:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    4792:	eb18 0101 	adds.w	r1, r8, r1
    4796:	4172      	adcs	r2, r6
    4798:	1a79      	subs	r1, r7, r1
    479a:	eb73 0102 	sbcs.w	r1, r3, r2
    479e:	d322      	bcc.n	47e6 <MPSL_IRQ_RADIO_Handler+0x16e>
    47a0:	89e1      	ldrh	r1, [r4, #14]
    47a2:	b1c9      	cbz	r1, 47d8 <MPSL_IRQ_RADIO_Handler+0x160>
    47a4:	89c0      	ldrh	r0, [r0, #14]
    47a6:	b9b8      	cbnz	r0, 47d8 <MPSL_IRQ_RADIO_Handler+0x160>
    47a8:	f003 f8b6 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    47ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    47b0:	bf08      	it	eq
    47b2:	200d      	moveq	r0, #13
    47b4:	d00b      	beq.n	47ce <MPSL_IRQ_RADIO_Handler+0x156>
    47b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    47ba:	3856      	subs	r0, #86	; 0x56
    47bc:	bf08      	it	eq
    47be:	201c      	moveq	r0, #28
    47c0:	d005      	beq.n	47ce <MPSL_IRQ_RADIO_Handler+0x156>
    47c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    47c6:	389f      	subs	r0, #159	; 0x9f
    47c8:	bf14      	ite	ne
    47ca:	4630      	movne	r0, r6
    47cc:	2032      	moveq	r0, #50	; 0x32
    47ce:	1c40      	adds	r0, r0, #1
    47d0:	ebb7 0108 	subs.w	r1, r7, r8
    47d4:	4281      	cmp	r1, r0
    47d6:	db06      	blt.n	47e6 <MPSL_IRQ_RADIO_Handler+0x16e>
    47d8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    47dc:	f889 5000 	strb.w	r5, [r9]
    47e0:	7845      	ldrb	r5, [r0, #1]
    47e2:	2d20      	cmp	r5, #32
    47e4:	d1cc      	bne.n	4780 <MPSL_IRQ_RADIO_Handler+0x108>
    47e6:	980a      	ldr	r0, [sp, #40]	; 0x28
    47e8:	f899 1000 	ldrb.w	r1, [r9]
    47ec:	2d20      	cmp	r5, #32
    47ee:	7001      	strb	r1, [r0, #0]
    47f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    47f4:	f000 8128 	beq.w	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47f8:	4896      	ldr	r0, [pc, #600]	; (4a54 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    47fa:	4f97      	ldr	r7, [pc, #604]	; (4a58 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    47fc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4800:	2600      	movs	r6, #0
    4802:	9004      	str	r0, [sp, #16]
    4804:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    4808:	f10a 0008 	add.w	r0, sl, #8
    480c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4810:	f8d4 b000 	ldr.w	fp, [r4]
    4814:	e9d0 8300 	ldrd	r8, r3, [r0]
    4818:	eb1b 0202 	adds.w	r2, fp, r2
    481c:	4171      	adcs	r1, r6
    481e:	ebb8 0202 	subs.w	r2, r8, r2
    4822:	eb73 0101 	sbcs.w	r1, r3, r1
    4826:	d320      	bcc.n	486a <MPSL_IRQ_RADIO_Handler+0x1f2>
    4828:	89c0      	ldrh	r0, [r0, #14]
    482a:	2800      	cmp	r0, #0
    482c:	f000 810c 	beq.w	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4830:	89e0      	ldrh	r0, [r4, #14]
    4832:	2800      	cmp	r0, #0
    4834:	f040 8108 	bne.w	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4838:	f003 f86e 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    483c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4840:	bf08      	it	eq
    4842:	200d      	moveq	r0, #13
    4844:	d00b      	beq.n	485e <MPSL_IRQ_RADIO_Handler+0x1e6>
    4846:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    484a:	3856      	subs	r0, #86	; 0x56
    484c:	bf08      	it	eq
    484e:	201c      	moveq	r0, #28
    4850:	d005      	beq.n	485e <MPSL_IRQ_RADIO_Handler+0x1e6>
    4852:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4856:	389f      	subs	r0, #159	; 0x9f
    4858:	bf14      	ite	ne
    485a:	4630      	movne	r0, r6
    485c:	2032      	moveq	r0, #50	; 0x32
    485e:	1c41      	adds	r1, r0, #1
    4860:	ebb8 000b 	subs.w	r0, r8, fp
    4864:	4288      	cmp	r0, r1
    4866:	f280 80ef 	bge.w	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    486a:	f889 5000 	strb.w	r5, [r9]
    486e:	f89a 0018 	ldrb.w	r0, [sl, #24]
    4872:	7c21      	ldrb	r1, [r4, #16]
    4874:	4281      	cmp	r1, r0
    4876:	d207      	bcs.n	4888 <MPSL_IRQ_RADIO_Handler+0x210>
    4878:	9804      	ldr	r0, [sp, #16]
    487a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    487e:	7845      	ldrb	r5, [r0, #1]
    4880:	2d20      	cmp	r5, #32
    4882:	d1bf      	bne.n	4804 <MPSL_IRQ_RADIO_Handler+0x18c>
    4884:	f000 b8e0 	b.w	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4888:	f89d 0020 	ldrb.w	r0, [sp, #32]
    488c:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    4890:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    4894:	f8d0 9008 	ldr.w	r9, [r0, #8]
    4898:	8ac0      	ldrh	r0, [r0, #22]
    489a:	eb19 0502 	adds.w	r5, r9, r2
    489e:	eb41 0806 	adc.w	r8, r1, r6
    48a2:	bbb0      	cbnz	r0, 4912 <MPSL_IRQ_RADIO_Handler+0x29a>
    48a4:	89e0      	ldrh	r0, [r4, #14]
    48a6:	b3a0      	cbz	r0, 4912 <MPSL_IRQ_RADIO_Handler+0x29a>
    48a8:	f003 f836 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    48ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    48b0:	bf08      	it	eq
    48b2:	200d      	moveq	r0, #13
    48b4:	d00b      	beq.n	48ce <MPSL_IRQ_RADIO_Handler+0x256>
    48b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    48ba:	3856      	subs	r0, #86	; 0x56
    48bc:	bf08      	it	eq
    48be:	201c      	moveq	r0, #28
    48c0:	d005      	beq.n	48ce <MPSL_IRQ_RADIO_Handler+0x256>
    48c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    48c6:	389f      	subs	r0, #159	; 0x9f
    48c8:	bf14      	ite	ne
    48ca:	4630      	movne	r0, r6
    48cc:	2032      	moveq	r0, #50	; 0x32
    48ce:	1c41      	adds	r1, r0, #1
    48d0:	ebb5 0009 	subs.w	r0, r5, r9
    48d4:	4288      	cmp	r0, r1
    48d6:	da1c      	bge.n	4912 <MPSL_IRQ_RADIO_Handler+0x29a>
    48d8:	f003 f81e 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    48dc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    48e0:	bf08      	it	eq
    48e2:	200d      	moveq	r0, #13
    48e4:	d00b      	beq.n	48fe <MPSL_IRQ_RADIO_Handler+0x286>
    48e6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    48ea:	3856      	subs	r0, #86	; 0x56
    48ec:	bf08      	it	eq
    48ee:	201c      	moveq	r0, #28
    48f0:	d005      	beq.n	48fe <MPSL_IRQ_RADIO_Handler+0x286>
    48f2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    48f6:	389f      	subs	r0, #159	; 0x9f
    48f8:	bf14      	ite	ne
    48fa:	4630      	movne	r0, r6
    48fc:	2032      	moveq	r0, #50	; 0x32
    48fe:	f89d 1020 	ldrb.w	r1, [sp, #32]
    4902:	1c40      	adds	r0, r0, #1
    4904:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    4908:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    490c:	1815      	adds	r5, r2, r0
    490e:	eb43 0806 	adc.w	r8, r3, r6
    4912:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    4916:	1b49      	subs	r1, r1, r5
    4918:	eb70 0008 	sbcs.w	r0, r0, r8
    491c:	d203      	bcs.n	4926 <MPSL_IRQ_RADIO_Handler+0x2ae>
    491e:	b00f      	add	sp, #60	; 0x3c
    4920:	2000      	movs	r0, #0
    4922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4926:	e9c4 5800 	strd	r5, r8, [r4]
    492a:	9818      	ldr	r0, [sp, #96]	; 0x60
    492c:	900b      	str	r0, [sp, #44]	; 0x2c
    492e:	a808      	add	r0, sp, #32
    4930:	900a      	str	r0, [sp, #40]	; 0x28
    4932:	9809      	ldr	r0, [sp, #36]	; 0x24
    4934:	f10d 0a1c 	add.w	sl, sp, #28
    4938:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    493c:	2020      	movs	r0, #32
    493e:	f88d 001c 	strb.w	r0, [sp, #28]
    4942:	2d20      	cmp	r5, #32
    4944:	d037      	beq.n	49b6 <MPSL_IRQ_RADIO_Handler+0x33e>
    4946:	4843      	ldr	r0, [pc, #268]	; (4a54 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    4948:	990b      	ldr	r1, [sp, #44]	; 0x2c
    494a:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    494e:	bf00      	nop
    4950:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    4954:	e9d4 8300 	ldrd	r8, r3, [r4]
    4958:	f850 9f08 	ldr.w	r9, [r0, #8]!
    495c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4960:	eb19 0202 	adds.w	r2, r9, r2
    4964:	4171      	adcs	r1, r6
    4966:	ebb8 0202 	subs.w	r2, r8, r2
    496a:	eb73 0101 	sbcs.w	r1, r3, r1
    496e:	d322      	bcc.n	49b6 <MPSL_IRQ_RADIO_Handler+0x33e>
    4970:	89e1      	ldrh	r1, [r4, #14]
    4972:	b1c9      	cbz	r1, 49a8 <MPSL_IRQ_RADIO_Handler+0x330>
    4974:	89c0      	ldrh	r0, [r0, #14]
    4976:	b9b8      	cbnz	r0, 49a8 <MPSL_IRQ_RADIO_Handler+0x330>
    4978:	f002 ffce 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    497c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4980:	bf08      	it	eq
    4982:	200d      	moveq	r0, #13
    4984:	d00b      	beq.n	499e <MPSL_IRQ_RADIO_Handler+0x326>
    4986:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    498a:	3856      	subs	r0, #86	; 0x56
    498c:	bf08      	it	eq
    498e:	201c      	moveq	r0, #28
    4990:	d005      	beq.n	499e <MPSL_IRQ_RADIO_Handler+0x326>
    4992:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4996:	389f      	subs	r0, #159	; 0x9f
    4998:	bf14      	ite	ne
    499a:	4630      	movne	r0, r6
    499c:	2032      	moveq	r0, #50	; 0x32
    499e:	1c41      	adds	r1, r0, #1
    49a0:	ebb8 0009 	subs.w	r0, r8, r9
    49a4:	4288      	cmp	r0, r1
    49a6:	db06      	blt.n	49b6 <MPSL_IRQ_RADIO_Handler+0x33e>
    49a8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    49ac:	f88a 5000 	strb.w	r5, [sl]
    49b0:	7845      	ldrb	r5, [r0, #1]
    49b2:	2d20      	cmp	r5, #32
    49b4:	d1cc      	bne.n	4950 <MPSL_IRQ_RADIO_Handler+0x2d8>
    49b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    49b8:	f89a 1000 	ldrb.w	r1, [sl]
    49bc:	2d20      	cmp	r5, #32
    49be:	7001      	strb	r1, [r0, #0]
    49c0:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    49c4:	d040      	beq.n	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    49c6:	4923      	ldr	r1, [pc, #140]	; (4a54 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    49c8:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    49cc:	f8cd 000c 	str.w	r0, [sp, #12]
    49d0:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    49d4:	f109 0008 	add.w	r0, r9, #8
    49d8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    49dc:	f8d4 b000 	ldr.w	fp, [r4]
    49e0:	e9d0 a300 	ldrd	sl, r3, [r0]
    49e4:	eb1b 0202 	adds.w	r2, fp, r2
    49e8:	4171      	adcs	r1, r6
    49ea:	ebba 0202 	subs.w	r2, sl, r2
    49ee:	eb73 0101 	sbcs.w	r1, r3, r1
    49f2:	d31b      	bcc.n	4a2c <MPSL_IRQ_RADIO_Handler+0x3b4>
    49f4:	89c0      	ldrh	r0, [r0, #14]
    49f6:	b338      	cbz	r0, 4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    49f8:	89e0      	ldrh	r0, [r4, #14]
    49fa:	bb28      	cbnz	r0, 4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    49fc:	f002 ff8c 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4a00:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4a04:	bf08      	it	eq
    4a06:	200d      	moveq	r0, #13
    4a08:	d00b      	beq.n	4a22 <MPSL_IRQ_RADIO_Handler+0x3aa>
    4a0a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4a0e:	3856      	subs	r0, #86	; 0x56
    4a10:	bf08      	it	eq
    4a12:	201c      	moveq	r0, #28
    4a14:	d005      	beq.n	4a22 <MPSL_IRQ_RADIO_Handler+0x3aa>
    4a16:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4a1a:	389f      	subs	r0, #159	; 0x9f
    4a1c:	bf14      	ite	ne
    4a1e:	4630      	movne	r0, r6
    4a20:	2032      	moveq	r0, #50	; 0x32
    4a22:	1c41      	adds	r1, r0, #1
    4a24:	ebba 000b 	subs.w	r0, sl, fp
    4a28:	4288      	cmp	r0, r1
    4a2a:	da0d      	bge.n	4a48 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4a2c:	f888 5000 	strb.w	r5, [r8]
    4a30:	f899 1018 	ldrb.w	r1, [r9, #24]
    4a34:	7c20      	ldrb	r0, [r4, #16]
    4a36:	4288      	cmp	r0, r1
    4a38:	f4bf af26 	bcs.w	4888 <MPSL_IRQ_RADIO_Handler+0x210>
    4a3c:	9803      	ldr	r0, [sp, #12]
    4a3e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4a42:	7845      	ldrb	r5, [r0, #1]
    4a44:	2d20      	cmp	r5, #32
    4a46:	d1c3      	bne.n	49d0 <MPSL_IRQ_RADIO_Handler+0x358>
    4a48:	b00f      	add	sp, #60	; 0x3c
    4a4a:	2001      	movs	r0, #1
    4a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a50:	20000a10 	.word	0x20000a10
    4a54:	20000990 	.word	0x20000990
    4a58:	20000590 	.word	0x20000590
    4a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a60:	b083      	sub	sp, #12
    4a62:	4691      	mov	r9, r2
    4a64:	4604      	mov	r4, r0
    4a66:	460d      	mov	r5, r1
    4a68:	4698      	mov	r8, r3
    4a6a:	aa01      	add	r2, sp, #4
    4a6c:	4669      	mov	r1, sp
    4a6e:	4618      	mov	r0, r3
    4a70:	f002 f87c 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4a74:	f002 fd78 	bl	7568 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4a78:	f002 f85c 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    4a7c:	4607      	mov	r7, r0
    4a7e:	481e      	ldr	r0, [pc, #120]	; (4af8 <MPSL_IRQ_RADIO_Handler+0x480>)
    4a80:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    4a84:	2600      	movs	r6, #0
    4a86:	2920      	cmp	r1, #32
    4a88:	d009      	beq.n	4a9e <MPSL_IRQ_RADIO_Handler+0x426>
    4a8a:	6882      	ldr	r2, [r0, #8]
    4a8c:	68c1      	ldr	r1, [r0, #12]
    4a8e:	6900      	ldr	r0, [r0, #16]
    4a90:	1d83      	adds	r3, r0, #6
    4a92:	f146 0000 	adc.w	r0, r6, #0
    4a96:	18d4      	adds	r4, r2, r3
    4a98:	eb41 0500 	adc.w	r5, r1, r0
    4a9c:	e026      	b.n	4aec <MPSL_IRQ_RADIO_Handler+0x474>
    4a9e:	340a      	adds	r4, #10
    4aa0:	f145 0500 	adc.w	r5, r5, #0
    4aa4:	f1b8 0f00 	cmp.w	r8, #0
    4aa8:	d017      	beq.n	4ada <MPSL_IRQ_RADIO_Handler+0x462>
    4aaa:	f003 f85d 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4aae:	b9a0      	cbnz	r0, 4ada <MPSL_IRQ_RADIO_Handler+0x462>
    4ab0:	f002 ff32 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4ab4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4ab8:	bf08      	it	eq
    4aba:	200d      	moveq	r0, #13
    4abc:	d00b      	beq.n	4ad6 <MPSL_IRQ_RADIO_Handler+0x45e>
    4abe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4ac2:	3856      	subs	r0, #86	; 0x56
    4ac4:	bf08      	it	eq
    4ac6:	201c      	moveq	r0, #28
    4ac8:	d005      	beq.n	4ad6 <MPSL_IRQ_RADIO_Handler+0x45e>
    4aca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4ace:	389f      	subs	r0, #159	; 0x9f
    4ad0:	bf14      	ite	ne
    4ad2:	4630      	movne	r0, r6
    4ad4:	2032      	moveq	r0, #50	; 0x32
    4ad6:	1904      	adds	r4, r0, r4
    4ad8:	4175      	adcs	r5, r6
    4ada:	f1b9 0f00 	cmp.w	r9, #0
    4ade:	d105      	bne.n	4aec <MPSL_IRQ_RADIO_Handler+0x474>
    4ae0:	9800      	ldr	r0, [sp, #0]
    4ae2:	4287      	cmp	r7, r0
    4ae4:	d902      	bls.n	4aec <MPSL_IRQ_RADIO_Handler+0x474>
    4ae6:	1a38      	subs	r0, r7, r0
    4ae8:	1904      	adds	r4, r0, r4
    4aea:	4175      	adcs	r5, r6
    4aec:	b003      	add	sp, #12
    4aee:	4620      	mov	r0, r4
    4af0:	4629      	mov	r1, r5
    4af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4af6:	0000      	.short	0x0000
    4af8:	20000a10 	.word	0x20000a10
    4afc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b00:	b081      	sub	sp, #4
    4b02:	4605      	mov	r5, r0
    4b04:	9802      	ldr	r0, [sp, #8]
    4b06:	494a      	ldr	r1, [pc, #296]	; (4c30 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    4b08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4b0c:	4408      	add	r0, r1
    4b0e:	2600      	movs	r6, #0
    4b10:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4b14:	2020      	movs	r0, #32
    4b16:	4692      	mov	sl, r2
    4b18:	7010      	strb	r0, [r2, #0]
    4b1a:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    4b1e:	2c20      	cmp	r4, #32
    4b20:	d036      	beq.n	4b90 <MPSL_IRQ_RADIO_Handler+0x518>
    4b22:	9902      	ldr	r1, [sp, #8]
    4b24:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    4b28:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4b2c:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    4b30:	e9d5 7300 	ldrd	r7, r3, [r5]
    4b34:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4b38:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4b3c:	eb18 0202 	adds.w	r2, r8, r2
    4b40:	4171      	adcs	r1, r6
    4b42:	1aba      	subs	r2, r7, r2
    4b44:	eb73 0101 	sbcs.w	r1, r3, r1
    4b48:	d322      	bcc.n	4b90 <MPSL_IRQ_RADIO_Handler+0x518>
    4b4a:	89e9      	ldrh	r1, [r5, #14]
    4b4c:	b1c9      	cbz	r1, 4b82 <MPSL_IRQ_RADIO_Handler+0x50a>
    4b4e:	89c0      	ldrh	r0, [r0, #14]
    4b50:	b9b8      	cbnz	r0, 4b82 <MPSL_IRQ_RADIO_Handler+0x50a>
    4b52:	f002 fee1 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4b56:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4b5a:	bf08      	it	eq
    4b5c:	200d      	moveq	r0, #13
    4b5e:	d00b      	beq.n	4b78 <MPSL_IRQ_RADIO_Handler+0x500>
    4b60:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4b64:	3856      	subs	r0, #86	; 0x56
    4b66:	bf08      	it	eq
    4b68:	201c      	moveq	r0, #28
    4b6a:	d005      	beq.n	4b78 <MPSL_IRQ_RADIO_Handler+0x500>
    4b6c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4b70:	389f      	subs	r0, #159	; 0x9f
    4b72:	bf14      	ite	ne
    4b74:	4630      	movne	r0, r6
    4b76:	2032      	moveq	r0, #50	; 0x32
    4b78:	1c41      	adds	r1, r0, #1
    4b7a:	ebb7 0008 	subs.w	r0, r7, r8
    4b7e:	4288      	cmp	r0, r1
    4b80:	db06      	blt.n	4b90 <MPSL_IRQ_RADIO_Handler+0x518>
    4b82:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    4b86:	f88a 4000 	strb.w	r4, [sl]
    4b8a:	7844      	ldrb	r4, [r0, #1]
    4b8c:	2c20      	cmp	r4, #32
    4b8e:	d1cd      	bne.n	4b2c <MPSL_IRQ_RADIO_Handler+0x4b4>
    4b90:	9804      	ldr	r0, [sp, #16]
    4b92:	f89a 1000 	ldrb.w	r1, [sl]
    4b96:	2c20      	cmp	r4, #32
    4b98:	7001      	strb	r1, [r0, #0]
    4b9a:	9f04      	ldr	r7, [sp, #16]
    4b9c:	9802      	ldr	r0, [sp, #8]
    4b9e:	d042      	beq.n	4c26 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4ba0:	4924      	ldr	r1, [pc, #144]	; (4c34 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    4ba2:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4ba6:	9000      	str	r0, [sp, #0]
    4ba8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    4bac:	f8d5 b000 	ldr.w	fp, [r5]
    4bb0:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    4bb4:	f108 0008 	add.w	r0, r8, #8
    4bb8:	eb1b 0201 	adds.w	r2, fp, r1
    4bbc:	eb43 0106 	adc.w	r1, r3, r6
    4bc0:	e9d0 a300 	ldrd	sl, r3, [r0]
    4bc4:	ebba 0202 	subs.w	r2, sl, r2
    4bc8:	eb73 0101 	sbcs.w	r1, r3, r1
    4bcc:	d31b      	bcc.n	4c06 <MPSL_IRQ_RADIO_Handler+0x58e>
    4bce:	89c0      	ldrh	r0, [r0, #14]
    4bd0:	b348      	cbz	r0, 4c26 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4bd2:	89e8      	ldrh	r0, [r5, #14]
    4bd4:	bb38      	cbnz	r0, 4c26 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4bd6:	f002 fe9f 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4bda:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4bde:	bf08      	it	eq
    4be0:	200d      	moveq	r0, #13
    4be2:	d00b      	beq.n	4bfc <MPSL_IRQ_RADIO_Handler+0x584>
    4be4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4be8:	3856      	subs	r0, #86	; 0x56
    4bea:	bf08      	it	eq
    4bec:	201c      	moveq	r0, #28
    4bee:	d005      	beq.n	4bfc <MPSL_IRQ_RADIO_Handler+0x584>
    4bf0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4bf4:	389f      	subs	r0, #159	; 0x9f
    4bf6:	bf14      	ite	ne
    4bf8:	4630      	movne	r0, r6
    4bfa:	2032      	moveq	r0, #50	; 0x32
    4bfc:	1c41      	adds	r1, r0, #1
    4bfe:	ebba 000b 	subs.w	r0, sl, fp
    4c02:	4288      	cmp	r0, r1
    4c04:	da0f      	bge.n	4c26 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4c06:	703c      	strb	r4, [r7, #0]
    4c08:	f898 1018 	ldrb.w	r1, [r8, #24]
    4c0c:	7c28      	ldrb	r0, [r5, #16]
    4c0e:	4288      	cmp	r0, r1
    4c10:	d303      	bcc.n	4c1a <MPSL_IRQ_RADIO_Handler+0x5a2>
    4c12:	b005      	add	sp, #20
    4c14:	2000      	movs	r0, #0
    4c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c1a:	9800      	ldr	r0, [sp, #0]
    4c1c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4c20:	7844      	ldrb	r4, [r0, #1]
    4c22:	2c20      	cmp	r4, #32
    4c24:	d1c0      	bne.n	4ba8 <MPSL_IRQ_RADIO_Handler+0x530>
    4c26:	b005      	add	sp, #20
    4c28:	2001      	movs	r0, #1
    4c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c2e:	0000      	.short	0x0000
    4c30:	20000a10 	.word	0x20000a10
    4c34:	20000990 	.word	0x20000990
    4c38:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4c3c:	b09c      	sub	sp, #112	; 0x70
    4c3e:	461f      	mov	r7, r3
    4c40:	f002 f9e4 	bl	700c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    4c44:	4604      	mov	r4, r0
    4c46:	460d      	mov	r5, r1
    4c48:	f002 fc8e 	bl	7568 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4c4c:	4606      	mov	r6, r0
    4c4e:	981e      	ldr	r0, [sp, #120]	; 0x78
    4c50:	2801      	cmp	r0, #1
    4c52:	bf18      	it	ne
    4c54:	2802      	cmpne	r0, #2
    4c56:	d005      	beq.n	4c64 <MPSL_IRQ_RADIO_Handler+0x5ec>
    4c58:	f640 1156 	movw	r1, #2390	; 0x956
    4c5c:	f04f 0070 	mov.w	r0, #112	; 0x70
    4c60:	f002 fffa 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c64:	49fe      	ldr	r1, [pc, #1016]	; (5060 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    4c66:	2001      	movs	r0, #1
    4c68:	6008      	str	r0, [r1, #0]
    4c6a:	49fe      	ldr	r1, [pc, #1016]	; (5064 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    4c6c:	6889      	ldr	r1, [r1, #8]
    4c6e:	6008      	str	r0, [r1, #0]
    4c70:	2000      	movs	r0, #0
    4c72:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    4c76:	900c      	str	r0, [sp, #48]	; 0x30
    4c78:	1e40      	subs	r0, r0, #1
    4c7a:	900d      	str	r0, [sp, #52]	; 0x34
    4c7c:	48fa      	ldr	r0, [pc, #1000]	; (5068 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    4c7e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    4c82:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    4c86:	f100 0108 	add.w	r1, r0, #8
    4c8a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4c8e:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c92:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    4c96:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    4c9a:	980e      	ldr	r0, [sp, #56]	; 0x38
    4c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4ca0:	f005 fc0c 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4ca4:	4602      	mov	r2, r0
    4ca6:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    4caa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4cae:	4bef      	ldr	r3, [pc, #956]	; (506c <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4cb0:	4440      	add	r0, r8
    4cb2:	1c41      	adds	r1, r0, #1
    4cb4:	1850      	adds	r0, r2, r1
    4cb6:	429a      	cmp	r2, r3
    4cb8:	d856      	bhi.n	4d68 <MPSL_IRQ_RADIO_Handler+0x6f0>
    4cba:	4aed      	ldr	r2, [pc, #948]	; (5070 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4cbc:	4291      	cmp	r1, r2
    4cbe:	dc5b      	bgt.n	4d78 <MPSL_IRQ_RADIO_Handler+0x700>
    4cc0:	4252      	negs	r2, r2
    4cc2:	4291      	cmp	r1, r2
    4cc4:	db60      	blt.n	4d88 <MPSL_IRQ_RADIO_Handler+0x710>
    4cc6:	1c59      	adds	r1, r3, #1
    4cc8:	4281      	cmp	r1, r0
    4cca:	bfdc      	itt	le
    4ccc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4cd0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4cd4:	dd05      	ble.n	4ce2 <MPSL_IRQ_RADIO_Handler+0x66a>
    4cd6:	2800      	cmp	r0, #0
    4cd8:	bfbc      	itt	lt
    4cda:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4cde:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4ce2:	9017      	str	r0, [sp, #92]	; 0x5c
    4ce4:	48e3      	ldr	r0, [pc, #908]	; (5074 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    4ce6:	f1b8 0f00 	cmp.w	r8, #0
    4cea:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    4cee:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    4cf2:	bf14      	ite	ne
    4cf4:	f04f 0a01 	movne.w	sl, #1
    4cf8:	f04f 0a00 	moveq.w	sl, #0
    4cfc:	f002 ff34 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4d00:	9019      	str	r0, [sp, #100]	; 0x64
    4d02:	f1ba 0f00 	cmp.w	sl, #0
    4d06:	d00b      	beq.n	4d20 <MPSL_IRQ_RADIO_Handler+0x6a8>
    4d08:	49db      	ldr	r1, [pc, #876]	; (5078 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4d0a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    4d0e:	ea6f 0200 	mvn.w	r2, r0
    4d12:	ea72 0001 	orns	r0, r2, r1
    4d16:	bf02      	ittt	eq
    4d18:	9819      	ldreq	r0, [sp, #100]	; 0x64
    4d1a:	2800      	cmpeq	r0, #0
    4d1c:	2701      	moveq	r7, #1
    4d1e:	d001      	beq.n	4d24 <MPSL_IRQ_RADIO_Handler+0x6ac>
    4d20:	f04f 0700 	mov.w	r7, #0
    4d24:	f002 fdf8 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4d28:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4d2c:	bf08      	it	eq
    4d2e:	200d      	moveq	r0, #13
    4d30:	d00b      	beq.n	4d4a <MPSL_IRQ_RADIO_Handler+0x6d2>
    4d32:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4d36:	3856      	subs	r0, #86	; 0x56
    4d38:	bf08      	it	eq
    4d3a:	201c      	moveq	r0, #28
    4d3c:	d005      	beq.n	4d4a <MPSL_IRQ_RADIO_Handler+0x6d2>
    4d3e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4d42:	389f      	subs	r0, #159	; 0x9f
    4d44:	bf14      	ite	ne
    4d46:	2000      	movne	r0, #0
    4d48:	2032      	moveq	r0, #50	; 0x32
    4d4a:	f04f 0900 	mov.w	r9, #0
    4d4e:	46cb      	mov	fp, r9
    4d50:	9016      	str	r0, [sp, #88]	; 0x58
    4d52:	4546      	cmp	r6, r8
    4d54:	d936      	bls.n	4dc4 <MPSL_IRQ_RADIO_Handler+0x74c>
    4d56:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4d58:	43f3      	mvns	r3, r6
    4d5a:	f8df c310 	ldr.w	ip, [pc, #784]	; 506c <MPSL_IRQ_RADIO_Handler+0x9f4>
    4d5e:	18c8      	adds	r0, r1, r3
    4d60:	46e9      	mov	r9, sp
    4d62:	aa1a      	add	r2, sp, #104	; 0x68
    4d64:	4561      	cmp	r1, ip
    4d66:	d904      	bls.n	4d72 <MPSL_IRQ_RADIO_Handler+0x6fa>
    4d68:	f240 517f 	movw	r1, #1407	; 0x57f
    4d6c:	2070      	movs	r0, #112	; 0x70
    4d6e:	f002 ff73 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d72:	49bf      	ldr	r1, [pc, #764]	; (5070 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4d74:	428b      	cmp	r3, r1
    4d76:	dd04      	ble.n	4d82 <MPSL_IRQ_RADIO_Handler+0x70a>
    4d78:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    4d7c:	2070      	movs	r0, #112	; 0x70
    4d7e:	f002 ff6b 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d82:	49be      	ldr	r1, [pc, #760]	; (507c <MPSL_IRQ_RADIO_Handler+0xa04>)
    4d84:	428b      	cmp	r3, r1
    4d86:	da04      	bge.n	4d92 <MPSL_IRQ_RADIO_Handler+0x71a>
    4d88:	f240 5181 	movw	r1, #1409	; 0x581
    4d8c:	2070      	movs	r0, #112	; 0x70
    4d8e:	f002 ff63 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d92:	49bb      	ldr	r1, [pc, #748]	; (5080 <MPSL_IRQ_RADIO_Handler+0xa08>)
    4d94:	4281      	cmp	r1, r0
    4d96:	bfdc      	itt	le
    4d98:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4d9c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4da0:	dd05      	ble.n	4dae <MPSL_IRQ_RADIO_Handler+0x736>
    4da2:	2800      	cmp	r0, #0
    4da4:	bfbc      	itt	lt
    4da6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4daa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4dae:	4649      	mov	r1, r9
    4db0:	f001 fedc 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4db4:	9800      	ldr	r0, [sp, #0]
    4db6:	990e      	ldr	r1, [sp, #56]	; 0x38
    4db8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4dbc:	9000      	str	r0, [sp, #0]
    4dbe:	1a08      	subs	r0, r1, r0
    4dc0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    4dc4:	2f00      	cmp	r7, #0
    4dc6:	bf18      	it	ne
    4dc8:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    4dcc:	d105      	bne.n	4dda <MPSL_IRQ_RADIO_Handler+0x762>
    4dce:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4dd2:	2800      	cmp	r0, #0
    4dd4:	bf18      	it	ne
    4dd6:	f04f 0b02 	movne.w	fp, #2
    4dda:	43e0      	mvns	r0, r4
    4ddc:	ea70 0005 	orns	r0, r0, r5
    4de0:	d022      	beq.n	4e28 <MPSL_IRQ_RADIO_Handler+0x7b0>
    4de2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    4de6:	1a22      	subs	r2, r4, r0
    4de8:	eb75 0201 	sbcs.w	r2, r5, r1
    4dec:	d20c      	bcs.n	4e08 <MPSL_IRQ_RADIO_Handler+0x790>
    4dee:	1b02      	subs	r2, r0, r4
    4df0:	eb61 0105 	sbc.w	r1, r1, r5
    4df4:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4df8:	f171 0100 	sbcs.w	r1, r1, #0
    4dfc:	d311      	bcc.n	4e22 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4dfe:	f640 1195 	movw	r1, #2453	; 0x995
    4e02:	2070      	movs	r0, #112	; 0x70
    4e04:	f002 ff28 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4e08:	1a22      	subs	r2, r4, r0
    4e0a:	eb65 0101 	sbc.w	r1, r5, r1
    4e0e:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4e12:	f171 0100 	sbcs.w	r1, r1, #0
    4e16:	d304      	bcc.n	4e22 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4e18:	f640 1199 	movw	r1, #2457	; 0x999
    4e1c:	2070      	movs	r0, #112	; 0x70
    4e1e:	f002 ff1b 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4e22:	1b00      	subs	r0, r0, r4
    4e24:	2801      	cmp	r0, #1
    4e26:	da03      	bge.n	4e30 <MPSL_IRQ_RADIO_Handler+0x7b8>
    4e28:	981c      	ldr	r0, [sp, #112]	; 0x70
    4e2a:	901a      	str	r0, [sp, #104]	; 0x68
    4e2c:	2003      	movs	r0, #3
    4e2e:	e00d      	b.n	4e4c <MPSL_IRQ_RADIO_Handler+0x7d4>
    4e30:	b157      	cbz	r7, 4e48 <MPSL_IRQ_RADIO_Handler+0x7d0>
    4e32:	4891      	ldr	r0, [pc, #580]	; (5078 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4e34:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    4e38:	b130      	cbz	r0, 4e48 <MPSL_IRQ_RADIO_Handler+0x7d0>
    4e3a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e3e:	f110 0b00 	adds.w	fp, r0, #0
    4e42:	bf18      	it	ne
    4e44:	f04f 0b02 	movne.w	fp, #2
    4e48:	2000      	movs	r0, #0
    4e4a:	941a      	str	r4, [sp, #104]	; 0x68
    4e4c:	4483      	add	fp, r0
    4e4e:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4e52:	ebb0 0009 	subs.w	r0, r0, r9
    4e56:	f162 0100 	sbc.w	r1, r2, #0
    4e5a:	1e42      	subs	r2, r0, #1
    4e5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4e5e:	f141 3eff 	adc.w	lr, r1, #4294967295
    4e62:	1ad3      	subs	r3, r2, r3
    4e64:	455b      	cmp	r3, fp
    4e66:	db08      	blt.n	4e7a <MPSL_IRQ_RADIO_Handler+0x802>
    4e68:	f1b9 0f00 	cmp.w	r9, #0
    4e6c:	d032      	beq.n	4ed4 <MPSL_IRQ_RADIO_Handler+0x85c>
    4e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4e70:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    4e74:	444b      	add	r3, r9
    4e76:	9310      	str	r3, [sp, #64]	; 0x40
    4e78:	e02c      	b.n	4ed4 <MPSL_IRQ_RADIO_Handler+0x85c>
    4e7a:	f1b9 0f00 	cmp.w	r9, #0
    4e7e:	d005      	beq.n	4e8c <MPSL_IRQ_RADIO_Handler+0x814>
    4e80:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    4e84:	b920      	cbnz	r0, 4e90 <MPSL_IRQ_RADIO_Handler+0x818>
    4e86:	f002 fb65 	bl	7554 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    4e8a:	b108      	cbz	r0, 4e90 <MPSL_IRQ_RADIO_Handler+0x818>
    4e8c:	b9af      	cbnz	r7, 4eba <MPSL_IRQ_RADIO_Handler+0x842>
    4e8e:	e00c      	b.n	4eaa <MPSL_IRQ_RADIO_Handler+0x832>
    4e90:	b92f      	cbnz	r7, 4e9e <MPSL_IRQ_RADIO_Handler+0x826>
    4e92:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e96:	2800      	cmp	r0, #0
    4e98:	bf18      	it	ne
    4e9a:	f1ab 0b02 	subne.w	fp, fp, #2
    4e9e:	f04f 0900 	mov.w	r9, #0
    4ea2:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    4ea6:	464e      	mov	r6, r9
    4ea8:	e007      	b.n	4eba <MPSL_IRQ_RADIO_Handler+0x842>
    4eaa:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4eae:	b120      	cbz	r0, 4eba <MPSL_IRQ_RADIO_Handler+0x842>
    4eb0:	2000      	movs	r0, #0
    4eb2:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    4eb6:	f1ab 0b02 	sub.w	fp, fp, #2
    4eba:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4ebe:	ebb0 0009 	subs.w	r0, r0, r9
    4ec2:	f162 0100 	sbc.w	r1, r2, #0
    4ec6:	1e42      	subs	r2, r0, #1
    4ec8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4eca:	f141 3eff 	adc.w	lr, r1, #4294967295
    4ece:	1ad3      	subs	r3, r2, r3
    4ed0:	455b      	cmp	r3, fp
    4ed2:	db7d      	blt.n	4fd0 <MPSL_IRQ_RADIO_Handler+0x958>
    4ed4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4ed6:	b99b      	cbnz	r3, 4f00 <MPSL_IRQ_RADIO_Handler+0x888>
    4ed8:	4b67      	ldr	r3, [pc, #412]	; (5078 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4eda:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    4ede:	ea6f 090c 	mvn.w	r9, ip
    4ee2:	ea79 0903 	orns	r9, r9, r3
    4ee6:	d00b      	beq.n	4f00 <MPSL_IRQ_RADIO_Handler+0x888>
    4ee8:	ebb0 0c0c 	subs.w	ip, r0, ip
    4eec:	9816      	ldr	r0, [sp, #88]	; 0x58
    4eee:	eb61 0303 	sbc.w	r3, r1, r3
    4ef2:	ebbc 0000 	subs.w	r0, ip, r0
    4ef6:	f173 0000 	sbcs.w	r0, r3, #0
    4efa:	bf38      	it	cc
    4efc:	2000      	movcc	r0, #0
    4efe:	d300      	bcc.n	4f02 <MPSL_IRQ_RADIO_Handler+0x88a>
    4f00:	2001      	movs	r0, #1
    4f02:	ea3a 0000 	bics.w	r0, sl, r0
    4f06:	d163      	bne.n	4fd0 <MPSL_IRQ_RADIO_Handler+0x958>
    4f08:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    4f0c:	e9cd 0107 	strd	r0, r1, [sp, #28]
    4f10:	981e      	ldr	r0, [sp, #120]	; 0x78
    4f12:	4691      	mov	r9, r2
    4f14:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    4f18:	46f3      	mov	fp, lr
    4f1a:	2700      	movs	r7, #0
    4f1c:	f002 fcfc 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4f20:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4f24:	bf08      	it	eq
    4f26:	200d      	moveq	r0, #13
    4f28:	d00b      	beq.n	4f42 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4f2a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4f2e:	3856      	subs	r0, #86	; 0x56
    4f30:	bf08      	it	eq
    4f32:	201c      	moveq	r0, #28
    4f34:	d005      	beq.n	4f42 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4f36:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4f3a:	389f      	subs	r0, #159	; 0x9f
    4f3c:	bf14      	ite	ne
    4f3e:	4638      	movne	r0, r7
    4f40:	2032      	moveq	r0, #50	; 0x32
    4f42:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    4f46:	300b      	adds	r0, #11
    4f48:	ebb9 0202 	subs.w	r2, r9, r2
    4f4c:	eb6b 0303 	sbc.w	r3, fp, r3
    4f50:	1a10      	subs	r0, r2, r0
    4f52:	f173 0000 	sbcs.w	r0, r3, #0
    4f56:	d22a      	bcs.n	4fae <MPSL_IRQ_RADIO_Handler+0x936>
    4f58:	9819      	ldr	r0, [sp, #100]	; 0x64
    4f5a:	2801      	cmp	r0, #1
    4f5c:	d002      	beq.n	4f64 <MPSL_IRQ_RADIO_Handler+0x8ec>
    4f5e:	9818      	ldr	r0, [sp, #96]	; 0x60
    4f60:	b148      	cbz	r0, 4f76 <MPSL_IRQ_RADIO_Handler+0x8fe>
    4f62:	e017      	b.n	4f94 <MPSL_IRQ_RADIO_Handler+0x91c>
    4f64:	43e0      	mvns	r0, r4
    4f66:	ea70 0005 	orns	r0, r0, r5
    4f6a:	d127      	bne.n	4fbc <MPSL_IRQ_RADIO_Handler+0x944>
    4f6c:	f640 01d7 	movw	r1, #2263	; 0x8d7
    4f70:	2070      	movs	r0, #112	; 0x70
    4f72:	f002 fe71 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4f76:	43e0      	mvns	r0, r4
    4f78:	ea70 0005 	orns	r0, r0, r5
    4f7c:	d00a      	beq.n	4f94 <MPSL_IRQ_RADIO_Handler+0x91c>
    4f7e:	d01d      	beq.n	4fbc <MPSL_IRQ_RADIO_Handler+0x944>
    4f80:	ebb4 0009 	subs.w	r0, r4, r9
    4f84:	eb65 010b 	sbc.w	r1, r5, fp
    4f88:	2300      	movs	r3, #0
    4f8a:	f1d0 0204 	rsbs	r2, r0, #4
    4f8e:	eb73 0201 	sbcs.w	r2, r3, r1
    4f92:	da06      	bge.n	4fa2 <MPSL_IRQ_RADIO_Handler+0x92a>
    4f94:	464c      	mov	r4, r9
    4f96:	465d      	mov	r5, fp
    4f98:	4620      	mov	r0, r4
    4f9a:	4629      	mov	r1, r5
    4f9c:	f001 ff16 	bl	6dcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4fa0:	e00c      	b.n	4fbc <MPSL_IRQ_RADIO_Handler+0x944>
    4fa2:	2200      	movs	r2, #0
    4fa4:	1a10      	subs	r0, r2, r0
    4fa6:	eb72 0001 	sbcs.w	r0, r2, r1
    4faa:	db11      	blt.n	4fd0 <MPSL_IRQ_RADIO_Handler+0x958>
    4fac:	e006      	b.n	4fbc <MPSL_IRQ_RADIO_Handler+0x944>
    4fae:	464c      	mov	r4, r9
    4fb0:	465d      	mov	r5, fp
    4fb2:	4620      	mov	r0, r4
    4fb4:	4629      	mov	r1, r5
    4fb6:	f001 ff09 	bl	6dcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4fba:	4657      	mov	r7, sl
    4fbc:	43e1      	mvns	r1, r4
    4fbe:	ea71 0005 	orns	r0, r1, r5
    4fc2:	d071      	beq.n	50a8 <MPSL_IRQ_RADIO_Handler+0xa30>
    4fc4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4fc8:	f04f 0b00 	mov.w	fp, #0
    4fcc:	990e      	ldr	r1, [sp, #56]	; 0x38
    4fce:	e000      	b.n	4fd2 <MPSL_IRQ_RADIO_Handler+0x95a>
    4fd0:	e06f      	b.n	50b2 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4fd2:	1a0b      	subs	r3, r1, r0
    4fd4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    4fd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4fdc:	eb11 010c 	adds.w	r1, r1, ip
    4fe0:	1a08      	subs	r0, r1, r0
    4fe2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4fe6:	2b01      	cmp	r3, #1
    4fe8:	d363      	bcc.n	50b2 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4fee:	bf98      	it	ls
    4ff0:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    4ff4:	d85d      	bhi.n	50b2 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4ff6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4ffa:	f005 fa5f 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4ffe:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5000:	4a1b      	ldr	r2, [pc, #108]	; (5070 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    5002:	1a0d      	subs	r5, r1, r0
    5004:	1aaa      	subs	r2, r5, r2
    5006:	f17b 0200 	sbcs.w	r2, fp, #0
    500a:	d316      	bcc.n	503a <MPSL_IRQ_RADIO_Handler+0x9c2>
    500c:	4b18      	ldr	r3, [pc, #96]	; (5070 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    500e:	1a42      	subs	r2, r0, r1
    5010:	1ad3      	subs	r3, r2, r3
    5012:	f17b 0300 	sbcs.w	r3, fp, #0
    5016:	d310      	bcc.n	503a <MPSL_IRQ_RADIO_Handler+0x9c2>
    5018:	4b14      	ldr	r3, [pc, #80]	; (506c <MPSL_IRQ_RADIO_Handler+0x9f4>)
    501a:	42ab      	cmp	r3, r5
    501c:	bf3e      	ittt	cc
    501e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    5022:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    5026:	1845      	addcc	r5, r0, r1
    5028:	d307      	bcc.n	503a <MPSL_IRQ_RADIO_Handler+0x9c2>
    502a:	4293      	cmp	r3, r2
    502c:	d245      	bcs.n	50ba <MPSL_IRQ_RADIO_Handler+0xa42>
    502e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    5032:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    5036:	4408      	add	r0, r1
    5038:	4245      	negs	r5, r0
    503a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 5078 <MPSL_IRQ_RADIO_Handler+0xa00>
    503e:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    5042:	b378      	cbz	r0, 50a4 <MPSL_IRQ_RADIO_Handler+0xa2c>
    5044:	981e      	ldr	r0, [sp, #120]	; 0x78
    5046:	2801      	cmp	r0, #1
    5048:	d005      	beq.n	5056 <MPSL_IRQ_RADIO_Handler+0x9de>
    504a:	2002      	movs	r0, #2
    504c:	f002 f94a 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5050:	2001      	movs	r0, #1
    5052:	f002 f947 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5056:	45b0      	cmp	r8, r6
    5058:	d240      	bcs.n	50dc <MPSL_IRQ_RADIO_Handler+0xa64>
    505a:	eba5 0106 	sub.w	r1, r5, r6
    505e:	e011      	b.n	5084 <MPSL_IRQ_RADIO_Handler+0xa0c>
    5060:	40000508 	.word	0x40000508
    5064:	20000120 	.word	0x20000120
    5068:	20000590 	.word	0x20000590
    506c:	1e847fff 	.word	0x1e847fff
    5070:	0f424000 	.word	0x0f424000
    5074:	20000990 	.word	0x20000990
    5078:	20000a10 	.word	0x20000a10
    507c:	f0bdc000 	.word	0xf0bdc000
    5080:	1e848000 	.word	0x1e848000
    5084:	f04f 0002 	mov.w	r0, #2
    5088:	f002 f872 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    508c:	b398      	cbz	r0, 50f6 <MPSL_IRQ_RADIO_Handler+0xa7e>
    508e:	f1b8 0f00 	cmp.w	r8, #0
    5092:	bf1c      	itt	ne
    5094:	eba5 0108 	subne.w	r1, r5, r8
    5098:	2001      	movne	r0, #1
    509a:	d035      	beq.n	5108 <MPSL_IRQ_RADIO_Handler+0xa90>
    509c:	f002 f868 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    50a0:	b348      	cbz	r0, 50f6 <MPSL_IRQ_RADIO_Handler+0xa7e>
    50a2:	e031      	b.n	5108 <MPSL_IRQ_RADIO_Handler+0xa90>
    50a4:	e00e      	b.n	50c4 <MPSL_IRQ_RADIO_Handler+0xa4c>
    50a6:	e7ff      	b.n	50a8 <MPSL_IRQ_RADIO_Handler+0xa30>
    50a8:	f640 2103 	movw	r1, #2563	; 0xa03
    50ac:	2070      	movs	r0, #112	; 0x70
    50ae:	f002 fdd3 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50b2:	b020      	add	sp, #128	; 0x80
    50b4:	2000      	movs	r0, #0
    50b6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    50ba:	f640 21d7 	movw	r1, #2775	; 0xad7
    50be:	2070      	movs	r0, #112	; 0x70
    50c0:	f002 fdca 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50c4:	45b0      	cmp	r8, r6
    50c6:	bf34      	ite	cc
    50c8:	4630      	movcc	r0, r6
    50ca:	4640      	movcs	r0, r8
    50cc:	301e      	adds	r0, #30
    50ce:	42a8      	cmp	r0, r5
    50d0:	dbb8      	blt.n	5044 <MPSL_IRQ_RADIO_Handler+0x9cc>
    50d2:	f640 2117 	movw	r1, #2583	; 0xa17
    50d6:	2070      	movs	r0, #112	; 0x70
    50d8:	f002 fdbe 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50dc:	d90c      	bls.n	50f8 <MPSL_IRQ_RADIO_Handler+0xa80>
    50de:	eba5 0108 	sub.w	r1, r5, r8
    50e2:	2001      	movs	r0, #1
    50e4:	f002 f844 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    50e8:	b128      	cbz	r0, 50f6 <MPSL_IRQ_RADIO_Handler+0xa7e>
    50ea:	2e00      	cmp	r6, #0
    50ec:	bf1c      	itt	ne
    50ee:	1ba9      	subne	r1, r5, r6
    50f0:	2002      	movne	r0, #2
    50f2:	d009      	beq.n	5108 <MPSL_IRQ_RADIO_Handler+0xa90>
    50f4:	e7d2      	b.n	509c <MPSL_IRQ_RADIO_Handler+0xa24>
    50f6:	e034      	b.n	5162 <MPSL_IRQ_RADIO_Handler+0xaea>
    50f8:	ea56 0008 	orrs.w	r0, r6, r8
    50fc:	d004      	beq.n	5108 <MPSL_IRQ_RADIO_Handler+0xa90>
    50fe:	f640 113a 	movw	r1, #2362	; 0x93a
    5102:	2070      	movs	r0, #112	; 0x70
    5104:	f002 fda8 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5108:	4629      	mov	r1, r5
    510a:	2000      	movs	r0, #0
    510c:	f002 f830 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5110:	b338      	cbz	r0, 5162 <MPSL_IRQ_RADIO_Handler+0xaea>
    5112:	2601      	movs	r6, #1
    5114:	f1ba 0f00 	cmp.w	sl, #0
    5118:	bf04      	itt	eq
    511a:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    511e:	2800      	cmpeq	r0, #0
    5120:	d000      	beq.n	5124 <MPSL_IRQ_RADIO_Handler+0xaac>
    5122:	b347      	cbz	r7, 5176 <MPSL_IRQ_RADIO_Handler+0xafe>
    5124:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    5128:	ea6f 0101 	mvn.w	r1, r1
    512c:	ea71 0000 	orns	r0, r1, r0
    5130:	d006      	beq.n	5140 <MPSL_IRQ_RADIO_Handler+0xac8>
    5132:	f002 fbf7 	bl	7924 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    5136:	f04f 30ff 	mov.w	r0, #4294967295
    513a:	4601      	mov	r1, r0
    513c:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    5140:	b1ff      	cbz	r7, 5182 <MPSL_IRQ_RADIO_Handler+0xb0a>
    5142:	9816      	ldr	r0, [sp, #88]	; 0x58
    5144:	1a20      	subs	r0, r4, r0
    5146:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    514a:	f04f 0005 	mov.w	r0, #5
    514e:	f002 f80f 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5152:	b370      	cbz	r0, 51b2 <MPSL_IRQ_RADIO_Handler+0xb3a>
    5154:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    5158:	2800      	cmp	r0, #0
    515a:	bf08      	it	eq
    515c:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    5160:	e017      	b.n	5192 <MPSL_IRQ_RADIO_Handler+0xb1a>
    5162:	2002      	movs	r0, #2
    5164:	f002 f8be 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5168:	2001      	movs	r0, #1
    516a:	f002 f8bb 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    516e:	b020      	add	sp, #128	; 0x80
    5170:	2000      	movs	r0, #0
    5172:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5176:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    517a:	43c0      	mvns	r0, r0
    517c:	ea70 0001 	orns	r0, r0, r1
    5180:	d012      	beq.n	51a8 <MPSL_IRQ_RADIO_Handler+0xb30>
    5182:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    5186:	b120      	cbz	r0, 5192 <MPSL_IRQ_RADIO_Handler+0xb1a>
    5188:	2005      	movs	r0, #5
    518a:	f002 f8ab 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    518e:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    5192:	eba5 0008 	sub.w	r0, r5, r8
    5196:	f1a0 0119 	sub.w	r1, r0, #25
    519a:	2900      	cmp	r1, #0
    519c:	dc0f      	bgt.n	51be <MPSL_IRQ_RADIO_Handler+0xb46>
    519e:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    51a2:	2070      	movs	r0, #112	; 0x70
    51a4:	f002 fd58 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51a8:	f002 fbd8 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    51ac:	f001 ffbe 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    51b0:	e7c4      	b.n	513c <MPSL_IRQ_RADIO_Handler+0xac4>
    51b2:	e7ff      	b.n	51b4 <MPSL_IRQ_RADIO_Handler+0xb3c>
    51b4:	f240 21e6 	movw	r1, #742	; 0x2e6
    51b8:	2070      	movs	r0, #112	; 0x70
    51ba:	f002 fd4d 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51be:	2003      	movs	r0, #3
    51c0:	f001 ffd6 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    51c4:	b338      	cbz	r0, 5216 <MPSL_IRQ_RADIO_Handler+0xb9e>
    51c6:	4816      	ldr	r0, [pc, #88]	; (5220 <MPSL_IRQ_RADIO_Handler+0xba8>)
    51c8:	6880      	ldr	r0, [r0, #8]
    51ca:	f8c0 b000 	str.w	fp, [r0]
    51ce:	4815      	ldr	r0, [pc, #84]	; (5224 <MPSL_IRQ_RADIO_Handler+0xbac>)
    51d0:	f8c0 b000 	str.w	fp, [r0]
    51d4:	ac0c      	add	r4, sp, #48	; 0x30
    51d6:	4814      	ldr	r0, [pc, #80]	; (5228 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    51d8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    51dc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    51e0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    51e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    51e8:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    51ec:	ac10      	add	r4, sp, #64	; 0x40
    51ee:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    51f2:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    51f6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    51fa:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    51fe:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    5202:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    5206:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    520a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    520e:	b020      	add	sp, #128	; 0x80
    5210:	2001      	movs	r0, #1
    5212:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5216:	f640 2148 	movw	r1, #2632	; 0xa48
    521a:	2070      	movs	r0, #112	; 0x70
    521c:	f002 fd1c 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5220:	20000120 	.word	0x20000120
    5224:	40000508 	.word	0x40000508
    5228:	20000990 	.word	0x20000990
    522c:	b570      	push	{r4, r5, r6, lr}
    522e:	4d1d      	ldr	r5, [pc, #116]	; (52a4 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    5230:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    5234:	2820      	cmp	r0, #32
    5236:	bf18      	it	ne
    5238:	bd70      	popne	{r4, r5, r6, pc}
    523a:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    523e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    5242:	4428      	add	r0, r5
    5244:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5248:	2c20      	cmp	r4, #32
    524a:	d026      	beq.n	529a <MPSL_IRQ_RADIO_Handler+0xc22>
    524c:	4b16      	ldr	r3, [pc, #88]	; (52a8 <MPSL_IRQ_RADIO_Handler+0xc30>)
    524e:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    5252:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    5256:	7849      	ldrb	r1, [r1, #1]
    5258:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    525c:	20ff      	movs	r0, #255	; 0xff
    525e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    5262:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    5266:	4621      	mov	r1, r4
    5268:	2002      	movs	r0, #2
    526a:	f000 f88b 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    526e:	2000      	movs	r0, #0
    5270:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    5274:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    5278:	480c      	ldr	r0, [pc, #48]	; (52ac <MPSL_IRQ_RADIO_Handler+0xc34>)
    527a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    527e:	7e00      	ldrb	r0, [r0, #24]
    5280:	2800      	cmp	r0, #0
    5282:	bf08      	it	eq
    5284:	f002 fe50 	bleq	7f28 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    5288:	2000      	movs	r0, #0
    528a:	4909      	ldr	r1, [pc, #36]	; (52b0 <MPSL_IRQ_RADIO_Handler+0xc38>)
    528c:	6849      	ldr	r1, [r1, #4]
    528e:	2900      	cmp	r1, #0
    5290:	bf08      	it	eq
    5292:	bd70      	popeq	{r4, r5, r6, pc}
    5294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5298:	4708      	bx	r1
    529a:	f240 311d 	movw	r1, #797	; 0x31d
    529e:	2070      	movs	r0, #112	; 0x70
    52a0:	f002 fcda 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    52a4:	20000a10 	.word	0x20000a10
    52a8:	20000990 	.word	0x20000990
    52ac:	20000590 	.word	0x20000590
    52b0:	20000120 	.word	0x20000120
    52b4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    52b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5374 <MPSL_IRQ_RADIO_Handler+0xcfc>
    52bc:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    52c0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    52c4:	4440      	add	r0, r8
    52c6:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    52ca:	2c20      	cmp	r4, #32
    52cc:	bf08      	it	eq
    52ce:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    52d2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 5378 <MPSL_IRQ_RADIO_Handler+0xd00>
    52d6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 537c <MPSL_IRQ_RADIO_Handler+0xd04>
    52da:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    52de:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    52e2:	2607      	movs	r6, #7
    52e4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    52e8:	2801      	cmp	r0, #1
    52ea:	d00e      	beq.n	530a <MPSL_IRQ_RADIO_Handler+0xc92>
    52ec:	2804      	cmp	r0, #4
    52ee:	bf08      	it	eq
    52f0:	2602      	moveq	r6, #2
    52f2:	d00a      	beq.n	530a <MPSL_IRQ_RADIO_Handler+0xc92>
    52f4:	2805      	cmp	r0, #5
    52f6:	bf0c      	ite	eq
    52f8:	2603      	moveq	r6, #3
    52fa:	2806      	cmpne	r0, #6
    52fc:	d005      	beq.n	530a <MPSL_IRQ_RADIO_Handler+0xc92>
    52fe:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    5302:	f04f 0070 	mov.w	r0, #112	; 0x70
    5306:	f002 fca7 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    530a:	f1bb 0f00 	cmp.w	fp, #0
    530e:	bf18      	it	ne
    5310:	f3af 8000 	nopne.w
    5314:	f3ef 8010 	mrs	r0, PRIMASK
    5318:	b672      	cpsid	i
    531a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    531e:	784a      	ldrb	r2, [r1, #1]
    5320:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    5324:	4441      	add	r1, r8
    5326:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    532a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    532e:	42a2      	cmp	r2, r4
    5330:	bf04      	itt	eq
    5332:	2220      	moveq	r2, #32
    5334:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    5338:	b1a8      	cbz	r0, 5366 <MPSL_IRQ_RADIO_Handler+0xcee>
    533a:	462a      	mov	r2, r5
    533c:	4621      	mov	r1, r4
    533e:	2001      	movs	r0, #1
    5340:	f000 f820 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5344:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    5348:	e9d1 2000 	ldrd	r2, r0, [r1]
    534c:	4631      	mov	r1, r6
    534e:	4790      	blx	r2
    5350:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    5354:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    5358:	4440      	add	r0, r8
    535a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    535e:	2c20      	cmp	r4, #32
    5360:	d1bd      	bne.n	52de <MPSL_IRQ_RADIO_Handler+0xc66>
    5362:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5366:	4806      	ldr	r0, [pc, #24]	; (5380 <MPSL_IRQ_RADIO_Handler+0xd08>)
    5368:	2800      	cmp	r0, #0
    536a:	bf18      	it	ne
    536c:	f3af 8000 	nopne.w
    5370:	b662      	cpsie	i
    5372:	e7e2      	b.n	533a <MPSL_IRQ_RADIO_Handler+0xcc2>
    5374:	20000a10 	.word	0x20000a10
    5378:	00000000 	.word	0x00000000
    537c:	20000990 	.word	0x20000990
    5380:	00000000 	.word	0x00000000
    5384:	f8df c058 	ldr.w	ip, [pc, #88]	; 53e0 <MPSL_IRQ_RADIO_Handler+0xd68>
    5388:	b510      	push	{r4, lr}
    538a:	2300      	movs	r3, #0
    538c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    5390:	2807      	cmp	r0, #7
    5392:	d21f      	bcs.n	53d4 <MPSL_IRQ_RADIO_Handler+0xd5c>
    5394:	e8df f000 	tbb	[pc, r0]
    5398:	05050505 	.word	0x05050505
    539c:	00040404 	.word	0x00040404
    53a0:	2301      	movs	r3, #1
    53a2:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    53a6:	2b00      	cmp	r3, #0
    53a8:	bf08      	it	eq
    53aa:	bd10      	popeq	{r4, pc}
    53ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    53b0:	480c      	ldr	r0, [pc, #48]	; (53e4 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    53b2:	4402      	add	r2, r0
    53b4:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    53b8:	2820      	cmp	r0, #32
    53ba:	bf0e      	itee	eq
    53bc:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    53c0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    53c4:	7041      	strbne	r1, [r0, #1]
    53c6:	2020      	movs	r0, #32
    53c8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    53cc:	7058      	strb	r0, [r3, #1]
    53ce:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    53d2:	bd10      	pop	{r4, pc}
    53d4:	f44f 7117 	mov.w	r1, #604	; 0x25c
    53d8:	2070      	movs	r0, #112	; 0x70
    53da:	f002 fc3d 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    53de:	0000      	.short	0x0000
    53e0:	20000990 	.word	0x20000990
    53e4:	20000a10 	.word	0x20000a10
    53e8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    53ec:	460f      	mov	r7, r1
    53ee:	4680      	mov	r8, r0
    53f0:	f8df b154 	ldr.w	fp, [pc, #340]	; 5548 <MPSL_IRQ_RADIO_Handler+0xed0>
    53f4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    53f8:	4458      	add	r0, fp
    53fa:	f1b8 0f01 	cmp.w	r8, #1
    53fe:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5402:	4625      	mov	r5, r4
    5404:	bf18      	it	ne
    5406:	f1b8 0f02 	cmpne.w	r8, #2
    540a:	d005      	beq.n	5418 <MPSL_IRQ_RADIO_Handler+0xda0>
    540c:	f640 217e 	movw	r1, #2686	; 0xa7e
    5410:	f04f 0070 	mov.w	r0, #112	; 0x70
    5414:	f002 fc20 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5418:	2d20      	cmp	r5, #32
    541a:	d041      	beq.n	54a0 <MPSL_IRQ_RADIO_Handler+0xe28>
    541c:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    5420:	2600      	movs	r6, #0
    5422:	2800      	cmp	r0, #0
    5424:	bf08      	it	eq
    5426:	2602      	moveq	r6, #2
    5428:	f001 fcca 	bl	6dc0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    542c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 554c <MPSL_IRQ_RADIO_Handler+0xed4>
    5430:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    5434:	6899      	ldr	r1, [r3, #8]
    5436:	691b      	ldr	r3, [r3, #16]
    5438:	1a0a      	subs	r2, r1, r0
    543a:	18c9      	adds	r1, r1, r3
    543c:	1a09      	subs	r1, r1, r0
    543e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5442:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5446:	4296      	cmp	r6, r2
    5448:	bf99      	ittee	ls
    544a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    544e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5452:	4a3f      	ldrhi	r2, [pc, #252]	; (5550 <MPSL_IRQ_RADIO_Handler+0xed8>)
    5454:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    5458:	d920      	bls.n	549c <MPSL_IRQ_RADIO_Handler+0xe24>
    545a:	4622      	mov	r2, r4
    545c:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    5460:	784c      	ldrb	r4, [r1, #1]
    5462:	2c20      	cmp	r4, #32
    5464:	d012      	beq.n	548c <MPSL_IRQ_RADIO_Handler+0xe14>
    5466:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    546a:	6899      	ldr	r1, [r3, #8]
    546c:	691b      	ldr	r3, [r3, #16]
    546e:	ebb1 0c00 	subs.w	ip, r1, r0
    5472:	18c9      	adds	r1, r1, r3
    5474:	1a09      	subs	r1, r1, r0
    5476:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    547a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    547e:	4566      	cmp	r6, ip
    5480:	bf9c      	itt	ls
    5482:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    5486:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    548a:	d8e6      	bhi.n	545a <MPSL_IRQ_RADIO_Handler+0xde2>
    548c:	2a20      	cmp	r2, #32
    548e:	d005      	beq.n	549c <MPSL_IRQ_RADIO_Handler+0xe24>
    5490:	463b      	mov	r3, r7
    5492:	2120      	movs	r1, #32
    5494:	2004      	movs	r0, #4
    5496:	f7ff f90d 	bl	46b4 <MPSL_IRQ_RADIO_Handler+0x3c>
    549a:	4604      	mov	r4, r0
    549c:	42ac      	cmp	r4, r5
    549e:	d113      	bne.n	54c8 <MPSL_IRQ_RADIO_Handler+0xe50>
    54a0:	482c      	ldr	r0, [pc, #176]	; (5554 <MPSL_IRQ_RADIO_Handler+0xedc>)
    54a2:	2800      	cmp	r0, #0
    54a4:	bf18      	it	ne
    54a6:	f3af 8000 	nopne.w
    54aa:	f001 fe3f 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    54ae:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    54b2:	2a20      	cmp	r2, #32
    54b4:	d00b      	beq.n	54ce <MPSL_IRQ_RADIO_Handler+0xe56>
    54b6:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    54ba:	1c84      	adds	r4, r0, #2
    54bc:	f141 0c00 	adc.w	ip, r1, #0
    54c0:	1b1b      	subs	r3, r3, r4
    54c2:	eb72 020c 	sbcs.w	r2, r2, ip
    54c6:	d202      	bcs.n	54ce <MPSL_IRQ_RADIO_Handler+0xe56>
    54c8:	2000      	movs	r0, #0
    54ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    54ce:	2d20      	cmp	r5, #32
    54d0:	d013      	beq.n	54fa <MPSL_IRQ_RADIO_Handler+0xe82>
    54d2:	462b      	mov	r3, r5
    54d4:	4642      	mov	r2, r8
    54d6:	f7ff fbaf 	bl	4c38 <MPSL_IRQ_RADIO_Handler+0x5c0>
    54da:	2800      	cmp	r0, #0
    54dc:	bf1e      	ittt	ne
    54de:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    54e2:	2002      	movne	r0, #2
    54e4:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    54e8:	463b      	mov	r3, r7
    54ea:	462a      	mov	r2, r5
    54ec:	2120      	movs	r1, #32
    54ee:	2004      	movs	r0, #4
    54f0:	f7ff f8e0 	bl	46b4 <MPSL_IRQ_RADIO_Handler+0x3c>
    54f4:	2000      	movs	r0, #0
    54f6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    54fa:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    54fe:	43c0      	mvns	r0, r0
    5500:	ea70 0001 	orns	r0, r0, r1
    5504:	d005      	beq.n	5512 <MPSL_IRQ_RADIO_Handler+0xe9a>
    5506:	f002 fa0d 	bl	7924 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    550a:	f04f 30ff 	mov.w	r0, #4294967295
    550e:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    5512:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    5516:	b128      	cbz	r0, 5524 <MPSL_IRQ_RADIO_Handler+0xeac>
    5518:	2005      	movs	r0, #5
    551a:	f001 fee3 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    551e:	2000      	movs	r0, #0
    5520:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    5524:	2004      	movs	r0, #4
    5526:	f001 fedd 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    552a:	f001 ff43 	bl	73b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    552e:	490a      	ldr	r1, [pc, #40]	; (5558 <MPSL_IRQ_RADIO_Handler+0xee0>)
    5530:	2020      	movs	r0, #32
    5532:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    5536:	6889      	ldr	r1, [r1, #8]
    5538:	2000      	movs	r0, #0
    553a:	6008      	str	r0, [r1, #0]
    553c:	4907      	ldr	r1, [pc, #28]	; (555c <MPSL_IRQ_RADIO_Handler+0xee4>)
    553e:	6008      	str	r0, [r1, #0]
    5540:	2001      	movs	r0, #1
    5542:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5546:	0000      	.short	0x0000
    5548:	20000a10 	.word	0x20000a10
    554c:	20000590 	.word	0x20000590
    5550:	20000990 	.word	0x20000990
    5554:	00000000 	.word	0x00000000
    5558:	20000120 	.word	0x20000120
    555c:	40000508 	.word	0x40000508

00005560 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    5560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5564:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 572c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    5568:	4606      	mov	r6, r0
    556a:	b08f      	sub	sp, #60	; 0x3c
    556c:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    5570:	468a      	mov	sl, r1
    5572:	2820      	cmp	r0, #32
    5574:	d061      	beq.n	563a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    5576:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    557a:	f10b 0408 	add.w	r4, fp, #8
    557e:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    5582:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    5586:	2120      	movs	r1, #32
    5588:	f88d 1018 	strb.w	r1, [sp, #24]
    558c:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    5590:	f8db 2008 	ldr.w	r2, [fp, #8]
    5594:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5598:	4459      	add	r1, fp
    559a:	2700      	movs	r7, #0
    559c:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    55a0:	f8db 1010 	ldr.w	r1, [fp, #16]
    55a4:	1851      	adds	r1, r2, r1
    55a6:	910a      	str	r1, [sp, #40]	; 0x28
    55a8:	f8db 0000 	ldr.w	r0, [fp]
    55ac:	aa09      	add	r2, sp, #36	; 0x24
    55ae:	4430      	add	r0, r6
    55b0:	a907      	add	r1, sp, #28
    55b2:	f001 fadb 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    55b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    55ba:	9907      	ldr	r1, [sp, #28]
    55bc:	f8d9 2008 	ldr.w	r2, [r9, #8]
    55c0:	1840      	adds	r0, r0, r1
    55c2:	1810      	adds	r0, r2, r0
    55c4:	2e67      	cmp	r6, #103	; 0x67
    55c6:	d33d      	bcc.n	5644 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    55c8:	4959      	ldr	r1, [pc, #356]	; (5730 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    55ca:	2200      	movs	r2, #0
    55cc:	1b89      	subs	r1, r1, r6
    55ce:	eb72 0107 	sbcs.w	r1, r2, r7
    55d2:	d337      	bcc.n	5644 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    55d4:	6821      	ldr	r1, [r4, #0]
    55d6:	4694      	mov	ip, r2
    55d8:	1a40      	subs	r0, r0, r1
    55da:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    55de:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    55e2:	eb7c 010c 	sbcs.w	r1, ip, ip
    55e6:	d32d      	bcc.n	5644 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    55e8:	60a0      	str	r0, [r4, #8]
    55ea:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    55ee:	f884 a010 	strb.w	sl, [r4, #16]
    55f2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    55f6:	f10d 0b18 	add.w	fp, sp, #24
    55fa:	2d20      	cmp	r5, #32
    55fc:	d055      	beq.n	56aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    55fe:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    5602:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    5606:	9001      	str	r0, [sp, #4]
    5608:	484a      	ldr	r0, [pc, #296]	; (5734 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    560a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    560e:	f8d4 a000 	ldr.w	sl, [r4]
    5612:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    5616:	f108 0008 	add.w	r0, r8, #8
    561a:	eb1a 0201 	adds.w	r2, sl, r1
    561e:	eb43 0107 	adc.w	r1, r3, r7
    5622:	e9d0 9300 	ldrd	r9, r3, [r0]
    5626:	ebb9 0202 	subs.w	r2, r9, r2
    562a:	eb73 0101 	sbcs.w	r1, r3, r1
    562e:	d325      	bcc.n	567c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    5630:	89c0      	ldrh	r0, [r0, #14]
    5632:	b398      	cbz	r0, 569c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    5634:	89e0      	ldrh	r0, [r4, #14]
    5636:	b148      	cbz	r0, 564c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    5638:	e037      	b.n	56aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    563a:	f640 3135 	movw	r1, #2869	; 0xb35
    563e:	2070      	movs	r0, #112	; 0x70
    5640:	f002 fb0a 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5644:	b00f      	add	sp, #60	; 0x3c
    5646:	2001      	movs	r0, #1
    5648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    564c:	f002 f964 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5650:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    5654:	bf08      	it	eq
    5656:	200d      	moveq	r0, #13
    5658:	d00b      	beq.n	5672 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    565a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    565e:	3856      	subs	r0, #86	; 0x56
    5660:	bf08      	it	eq
    5662:	201c      	moveq	r0, #28
    5664:	d005      	beq.n	5672 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    5666:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    566a:	389f      	subs	r0, #159	; 0x9f
    566c:	bf14      	ite	ne
    566e:	4638      	movne	r0, r7
    5670:	2032      	moveq	r0, #50	; 0x32
    5672:	1c41      	adds	r1, r0, #1
    5674:	ebb9 000a 	subs.w	r0, r9, sl
    5678:	4288      	cmp	r0, r1
    567a:	da16      	bge.n	56aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    567c:	f88b 5000 	strb.w	r5, [fp]
    5680:	f898 0018 	ldrb.w	r0, [r8, #24]
    5684:	7c21      	ldrb	r1, [r4, #16]
    5686:	4281      	cmp	r1, r0
    5688:	d309      	bcc.n	569e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    568a:	6821      	ldr	r1, [r4, #0]
    568c:	980a      	ldr	r0, [sp, #40]	; 0x28
    568e:	1a40      	subs	r0, r0, r1
    5690:	60a0      	str	r0, [r4, #8]
    5692:	b00f      	add	sp, #60	; 0x3c
    5694:	f04f 0002 	mov.w	r0, #2
    5698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    569c:	e005      	b.n	56aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    569e:	9801      	ldr	r0, [sp, #4]
    56a0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    56a4:	7845      	ldrb	r5, [r0, #1]
    56a6:	2d20      	cmp	r5, #32
    56a8:	d1ae      	bne.n	5608 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    56aa:	2005      	movs	r0, #5
    56ac:	f001 fe1a 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    56b0:	4d1e      	ldr	r5, [pc, #120]	; (572c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    56b2:	f04f 30ff 	mov.w	r0, #4294967295
    56b6:	6068      	str	r0, [r5, #4]
    56b8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    56bc:	f89d 2018 	ldrb.w	r2, [sp, #24]
    56c0:	2120      	movs	r1, #32
    56c2:	2a20      	cmp	r2, #32
    56c4:	d003      	beq.n	56ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    56c6:	2005      	movs	r0, #5
    56c8:	f7fe fff4 	bl	46b4 <MPSL_IRQ_RADIO_Handler+0x3c>
    56cc:	e004      	b.n	56d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    56ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    56d2:	4428      	add	r0, r5
    56d4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    56d8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    56dc:	4916      	ldr	r1, [pc, #88]	; (5738 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    56de:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    56e2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    56e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    56ea:	7048      	strb	r0, [r1, #1]
    56ec:	6828      	ldr	r0, [r5, #0]
    56ee:	4430      	add	r0, r6
    56f0:	6028      	str	r0, [r5, #0]
    56f2:	20ff      	movs	r0, #255	; 0xff
    56f4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    56f8:	7e68      	ldrb	r0, [r5, #25]
    56fa:	2801      	cmp	r0, #1
    56fc:	d10a      	bne.n	5714 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    56fe:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    5702:	6823      	ldr	r3, [r4, #0]
    5704:	1818      	adds	r0, r3, r0
    5706:	f142 0100 	adc.w	r1, r2, #0
    570a:	1e40      	subs	r0, r0, #1
    570c:	f141 31ff 	adc.w	r1, r1, #4294967295
    5710:	f001 fc0a 	bl	6f28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5714:	f89d 0018 	ldrb.w	r0, [sp, #24]
    5718:	2820      	cmp	r0, #32
    571a:	d003      	beq.n	5724 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    571c:	4807      	ldr	r0, [pc, #28]	; (573c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    571e:	7840      	ldrb	r0, [r0, #1]
    5720:	f002 fb6c 	bl	7dfc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5724:	b00f      	add	sp, #60	; 0x3c
    5726:	2000      	movs	r0, #0
    5728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    572c:	20000a10 	.word	0x20000a10
    5730:	0f424000 	.word	0x0f424000
    5734:	20000590 	.word	0x20000590
    5738:	20000990 	.word	0x20000990
    573c:	20000120 	.word	0x20000120

00005740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    5740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5742:	4d6f      	ldr	r5, [pc, #444]	; (5900 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    5744:	2600      	movs	r6, #0
    5746:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    574a:	2701      	movs	r7, #1
    574c:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    5750:	4b6c      	ldr	r3, [pc, #432]	; (5904 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    5752:	2808      	cmp	r0, #8
    5754:	d273      	bcs.n	583e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    5756:	e8df f000 	tbb	[pc, r0]
    575a:	7804      	.short	0x7804
    575c:	47ceb3a0 	.word	0x47ceb3a0
    5760:	bdb8      	.short	0xbdb8
    5762:	43c8      	mvns	r0, r1
    5764:	ea70 0002 	orns	r0, r0, r2
    5768:	d105      	bne.n	5776 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    576a:	f002 f8f7 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    576e:	f001 fcdd 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5772:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5776:	8ae0      	ldrh	r0, [r4, #22]
    5778:	b110      	cbz	r0, 5780 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    577a:	f002 f9f5 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    577e:	b180      	cbz	r0, 57a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    5780:	f7ff fd54 	bl	522c <MPSL_IRQ_RADIO_Handler+0xbb4>
    5784:	20ff      	movs	r0, #255	; 0xff
    5786:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    578a:	6861      	ldr	r1, [r4, #4]
    578c:	f1b1 3fff 	cmp.w	r1, #4294967295
    5790:	d003      	beq.n	579a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    5792:	2005      	movs	r0, #5
    5794:	f001 fcec 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5798:	b140      	cbz	r0, 57ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    579a:	7e60      	ldrb	r0, [r4, #25]
    579c:	2801      	cmp	r0, #1
    579e:	d114      	bne.n	57ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    57a0:	e009      	b.n	57b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    57a2:	f640 012c 	movw	r1, #2092	; 0x82c
    57a6:	2070      	movs	r0, #112	; 0x70
    57a8:	f002 fa56 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    57ac:	f640 0131 	movw	r1, #2097	; 0x831
    57b0:	2070      	movs	r0, #112	; 0x70
    57b2:	f002 fa51 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    57b6:	68a2      	ldr	r2, [r4, #8]
    57b8:	6920      	ldr	r0, [r4, #16]
    57ba:	68e1      	ldr	r1, [r4, #12]
    57bc:	1810      	adds	r0, r2, r0
    57be:	4171      	adcs	r1, r6
    57c0:	1e40      	subs	r0, r0, #1
    57c2:	f141 31ff 	adc.w	r1, r1, #4294967295
    57c6:	f001 fbaf 	bl	6f28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    57ca:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    57ce:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    57d2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    57d6:	6840      	ldr	r0, [r0, #4]
    57d8:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    57dc:	680a      	ldr	r2, [r1, #0]
    57de:	b001      	add	sp, #4
    57e0:	2101      	movs	r1, #1
    57e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    57e6:	4710      	bx	r2
    57e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    57ec:	b160      	cbz	r0, 5808 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    57ee:	43c8      	mvns	r0, r1
    57f0:	ea70 0002 	orns	r0, r0, r2
    57f4:	d105      	bne.n	5802 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    57f6:	f002 f8b1 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    57fa:	f001 fc97 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    57fe:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5802:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    5806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5808:	f7ff fd10 	bl	522c <MPSL_IRQ_RADIO_Handler+0xbb4>
    580c:	f04f 30ff 	mov.w	r0, #4294967295
    5810:	6060      	str	r0, [r4, #4]
    5812:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    5816:	f88d 0000 	strb.w	r0, [sp]
    581a:	f89d 0000 	ldrb.w	r0, [sp]
    581e:	b178      	cbz	r0, 5840 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    5820:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5824:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5828:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    582c:	6840      	ldr	r0, [r0, #4]
    582e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5832:	680a      	ldr	r2, [r1, #0]
    5834:	b001      	add	sp, #4
    5836:	2106      	movs	r1, #6
    5838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    583c:	4710      	bx	r2
    583e:	e05a      	b.n	58f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    5840:	f640 0148 	movw	r1, #2120	; 0x848
    5844:	2070      	movs	r0, #112	; 0x70
    5846:	f002 fa07 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    584a:	f7ff fcef 	bl	522c <MPSL_IRQ_RADIO_Handler+0xbb4>
    584e:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    5852:	f002 f989 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    5856:	b130      	cbz	r0, 5866 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    5858:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    585c:	43c9      	mvns	r1, r1
    585e:	ea71 0000 	orns	r0, r1, r0
    5862:	d005      	beq.n	5870 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    5864:	e00a      	b.n	587c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    5866:	f640 0156 	movw	r1, #2134	; 0x856
    586a:	2070      	movs	r0, #112	; 0x70
    586c:	f002 f9f4 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5870:	f002 f874 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5874:	f001 fc5a 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5878:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    587c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5880:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5884:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5888:	6840      	ldr	r0, [r0, #4]
    588a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    588e:	680a      	ldr	r2, [r1, #0]
    5890:	b001      	add	sp, #4
    5892:	2100      	movs	r1, #0
    5894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5898:	4710      	bx	r2
    589a:	f001 fe47 	bl	752c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    589e:	8ae0      	ldrh	r0, [r4, #22]
    58a0:	b110      	cbz	r0, 58a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    58a2:	f002 f961 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    58a6:	b130      	cbz	r0, 58b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    58a8:	f001 fe54 	bl	7554 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    58ac:	2800      	cmp	r0, #0
    58ae:	bf18      	it	ne
    58b0:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    58b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58b6:	f44f 6106 	mov.w	r1, #2144	; 0x860
    58ba:	2070      	movs	r0, #112	; 0x70
    58bc:	f002 f9cc 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58c0:	4811      	ldr	r0, [pc, #68]	; (5908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    58c2:	6007      	str	r7, [r0, #0]
    58c4:	6898      	ldr	r0, [r3, #8]
    58c6:	6007      	str	r7, [r0, #0]
    58c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58ca:	7818      	ldrb	r0, [r3, #0]
    58cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    58d0:	f002 ba94 	b.w	7dfc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    58d4:	f7ff fcaa 	bl	522c <MPSL_IRQ_RADIO_Handler+0xbb4>
    58d8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    58dc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    58e0:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    58e4:	6840      	ldr	r0, [r0, #4]
    58e6:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    58ea:	680a      	ldr	r2, [r1, #0]
    58ec:	b001      	add	sp, #4
    58ee:	2105      	movs	r1, #5
    58f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    58f4:	4710      	bx	r2
    58f6:	f640 0173 	movw	r1, #2163	; 0x873
    58fa:	2070      	movs	r0, #112	; 0x70
    58fc:	f002 f9ac 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5900:	20000590 	.word	0x20000590
    5904:	20000120 	.word	0x20000120
    5908:	40000508 	.word	0x40000508

0000590c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    590c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5910:	48f7      	ldr	r0, [pc, #988]	; (5cf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    5912:	b097      	sub	sp, #92	; 0x5c
    5914:	460c      	mov	r4, r1
    5916:	6800      	ldr	r0, [r0, #0]
    5918:	4ff6      	ldr	r7, [pc, #984]	; (5cf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    591a:	05c0      	lsls	r0, r0, #23
    591c:	0dc0      	lsrs	r0, r0, #23
    591e:	d00e      	beq.n	593e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    5920:	3810      	subs	r0, #16
    5922:	b240      	sxtb	r0, r0
    5924:	2800      	cmp	r0, #0
    5926:	bfb8      	it	lt
    5928:	f000 000f 	andlt.w	r0, r0, #15
    592c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5930:	bfac      	ite	ge
    5932:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    5936:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    593a:	0940      	lsrs	r0, r0, #5
    593c:	d00c      	beq.n	5958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    593e:	7820      	ldrb	r0, [r4, #0]
    5940:	f04f 0a00 	mov.w	sl, #0
    5944:	2800      	cmp	r0, #0
    5946:	bf18      	it	ne
    5948:	2801      	cmpne	r0, #1
    594a:	d017      	beq.n	597c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    594c:	f240 61f9 	movw	r1, #1785	; 0x6f9
    5950:	f04f 0070 	mov.w	r0, #112	; 0x70
    5954:	f002 f980 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5958:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    595c:	f04f 0a01 	mov.w	sl, #1
    5960:	2820      	cmp	r0, #32
    5962:	d006      	beq.n	5972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    5964:	7820      	ldrb	r0, [r4, #0]
    5966:	b148      	cbz	r0, 597c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    5968:	f240 61f5 	movw	r1, #1781	; 0x6f5
    596c:	2070      	movs	r0, #112	; 0x70
    596e:	f002 f973 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5972:	f240 61f2 	movw	r1, #1778	; 0x6f2
    5976:	2070      	movs	r0, #112	; 0x70
    5978:	f002 f96e 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    597c:	f8df b378 	ldr.w	fp, [pc, #888]	; 5cf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    5980:	f1bb 0f00 	cmp.w	fp, #0
    5984:	d004      	beq.n	5990 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    5986:	2100      	movs	r1, #0
    5988:	f240 60fc 	movw	r0, #1788	; 0x6fc
    598c:	f3af 8000 	nop.w
    5990:	2000      	movs	r0, #0
    5992:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    5996:	a905      	add	r1, sp, #20
    5998:	9112      	str	r1, [sp, #72]	; 0x48
    599a:	49d8      	ldr	r1, [pc, #864]	; (5cfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    599c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    599e:	f04f 0801 	mov.w	r8, #1
    59a2:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    59a6:	9001      	str	r0, [sp, #4]
    59a8:	f1bb 0f00 	cmp.w	fp, #0
    59ac:	d004      	beq.n	59b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    59ae:	2100      	movs	r1, #0
    59b0:	f240 7007 	movw	r0, #1799	; 0x707
    59b4:	f3af 8000 	nop.w
    59b8:	f1b8 0f00 	cmp.w	r8, #0
    59bc:	d009      	beq.n	59d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    59be:	bf00      	nop
    59c0:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    59c4:	2500      	movs	r5, #0
    59c6:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    59ca:	f1ba 0f00 	cmp.w	sl, #0
    59ce:	d007      	beq.n	59e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    59d0:	e03e      	b.n	5a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    59d2:	48cb      	ldr	r0, [pc, #812]	; (5d00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    59d4:	2800      	cmp	r0, #0
    59d6:	bf18      	it	ne
    59d8:	f3af 8000 	nopne.w
    59dc:	b662      	cpsie	i
    59de:	e7ef      	b.n	59c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    59e0:	46b1      	mov	r9, r6
    59e2:	2001      	movs	r0, #1
    59e4:	ea20 0609 	bic.w	r6, r0, r9
    59e8:	48c6      	ldr	r0, [pc, #792]	; (5d04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    59ea:	2240      	movs	r2, #64	; 0x40
    59ec:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    59f0:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    59f4:	f004 fef2 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    59f8:	f1bb 0f00 	cmp.w	fp, #0
    59fc:	d004      	beq.n	5a08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    59fe:	2100      	movs	r1, #0
    5a00:	f240 503c 	movw	r0, #1340	; 0x53c
    5a04:	f3af 8000 	nop.w
    5a08:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    5a0c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5a10:	4439      	add	r1, r7
    5a12:	4438      	add	r0, r7
    5a14:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    5a16:	8502      	strh	r2, [r0, #40]	; 0x28
    5a18:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5a1c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5a20:	f1bb 0f00 	cmp.w	fp, #0
    5a24:	d004      	beq.n	5a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    5a26:	2100      	movs	r1, #0
    5a28:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5a2c:	f3af 8000 	nop.w
    5a30:	f1bb 0f00 	cmp.w	fp, #0
    5a34:	d004      	beq.n	5a40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    5a36:	2100      	movs	r1, #0
    5a38:	f240 7011 	movw	r0, #1809	; 0x711
    5a3c:	f3af 8000 	nop.w
    5a40:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5a44:	f88d 0020 	strb.w	r0, [sp, #32]
    5a48:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5a4c:	2800      	cmp	r0, #0
    5a4e:	d1ab      	bne.n	59a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5a50:	f1bb 0f00 	cmp.w	fp, #0
    5a54:	d004      	beq.n	5a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    5a56:	2100      	movs	r1, #0
    5a58:	f240 701b 	movw	r0, #1819	; 0x71b
    5a5c:	f3af 8000 	nop.w
    5a60:	f001 fb64 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5a64:	4681      	mov	r9, r0
    5a66:	a802      	add	r0, sp, #8
    5a68:	900a      	str	r0, [sp, #40]	; 0x28
    5a6a:	4688      	mov	r8, r1
    5a6c:	8921      	ldrh	r1, [r4, #8]
    5a6e:	4628      	mov	r0, r5
    5a70:	f361 401f 	bfi	r0, r1, #16, #16
    5a74:	4601      	mov	r1, r0
    5a76:	7aa2      	ldrb	r2, [r4, #10]
    5a78:	4628      	mov	r0, r5
    5a7a:	f362 0007 	bfi	r0, r2, #0, #8
    5a7e:	7ae2      	ldrb	r2, [r4, #11]
    5a80:	f362 200f 	bfi	r0, r2, #8, #8
    5a84:	7822      	ldrb	r2, [r4, #0]
    5a86:	9502      	str	r5, [sp, #8]
    5a88:	f362 4017 	bfi	r0, r2, #16, #8
    5a8c:	e9cd 5104 	strd	r5, r1, [sp, #16]
    5a90:	e9cd 0506 	strd	r0, r5, [sp, #24]
    5a94:	9503      	str	r5, [sp, #12]
    5a96:	7820      	ldrb	r0, [r4, #0]
    5a98:	b380      	cbz	r0, 5afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    5a9a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    5a9e:	499a      	ldr	r1, [pc, #616]	; (5d08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    5aa0:	1a08      	subs	r0, r1, r0
    5aa2:	990a      	ldr	r1, [sp, #40]	; 0x28
    5aa4:	f101 020c 	add.w	r2, r1, #12
    5aa8:	a914      	add	r1, sp, #80	; 0x50
    5aaa:	f001 f85f 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5aae:	2200      	movs	r2, #0
    5ab0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ab4:	4648      	mov	r0, r9
    5ab6:	4641      	mov	r1, r8
    5ab8:	f7fe ffd0 	bl	4a5c <MPSL_IRQ_RADIO_Handler+0x3e4>
    5abc:	468c      	mov	ip, r1
    5abe:	7ae1      	ldrb	r1, [r4, #11]
    5ac0:	2900      	cmp	r1, #0
    5ac2:	bf0c      	ite	eq
    5ac4:	217a      	moveq	r1, #122	; 0x7a
    5ac6:	214a      	movne	r1, #74	; 0x4a
    5ac8:	6862      	ldr	r2, [r4, #4]
    5aca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5ace:	4411      	add	r1, r2
    5ad0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5ad4:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    5ad8:	441a      	add	r2, r3
    5ada:	4411      	add	r1, r2
    5adc:	1c88      	adds	r0, r1, #2
    5ade:	f001 f829 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5ae2:	9600      	str	r6, [sp, #0]
    5ae4:	9004      	str	r0, [sp, #16]
    5ae6:	464a      	mov	r2, r9
    5ae8:	4643      	mov	r3, r8
    5aea:	6920      	ldr	r0, [r4, #16]
    5aec:	990a      	ldr	r1, [sp, #40]	; 0x28
    5aee:	f7fe fe1d 	bl	472c <MPSL_IRQ_RADIO_Handler+0xb4>
    5af2:	2800      	cmp	r0, #0
    5af4:	bf08      	it	eq
    5af6:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    5afa:	e046      	b.n	5b8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    5afc:	e7ff      	b.n	5afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    5afe:	4648      	mov	r0, r9
    5b00:	4641      	mov	r1, r8
    5b02:	f000 ffb5 	bl	6a70 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5b06:	f8df c204 	ldr.w	ip, [pc, #516]	; 5d0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    5b0a:	4602      	mov	r2, r0
    5b0c:	eb10 0c0c 	adds.w	ip, r0, ip
    5b10:	460b      	mov	r3, r1
    5b12:	f141 0e00 	adc.w	lr, r1, #0
    5b16:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5b1a:	ebb0 0c0c 	subs.w	ip, r0, ip
    5b1e:	eb71 0c0e 	sbcs.w	ip, r1, lr
    5b22:	d229      	bcs.n	5b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b24:	3229      	adds	r2, #41	; 0x29
    5b26:	f143 0300 	adc.w	r3, r3, #0
    5b2a:	1a82      	subs	r2, r0, r2
    5b2c:	eb71 0203 	sbcs.w	r2, r1, r3
    5b30:	d322      	bcc.n	5b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b32:	8922      	ldrh	r2, [r4, #8]
    5b34:	ab0a      	add	r3, sp, #40	; 0x28
    5b36:	1a80      	subs	r0, r0, r2
    5b38:	eb61 0105 	sbc.w	r1, r1, r5
    5b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5b3e:	1e40      	subs	r0, r0, #1
    5b40:	9200      	str	r2, [sp, #0]
    5b42:	f141 31ff 	adc.w	r1, r1, #4294967295
    5b46:	aa0d      	add	r2, sp, #52	; 0x34
    5b48:	f000 ffb6 	bl	6ab8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5b4c:	7ae0      	ldrb	r0, [r4, #11]
    5b4e:	2800      	cmp	r0, #0
    5b50:	bf0c      	ite	eq
    5b52:	207a      	moveq	r0, #122	; 0x7a
    5b54:	204a      	movne	r0, #74	; 0x4a
    5b56:	990d      	ldr	r1, [sp, #52]	; 0x34
    5b58:	8922      	ldrh	r2, [r4, #8]
    5b5a:	4408      	add	r0, r1
    5b5c:	6861      	ldr	r1, [r4, #4]
    5b5e:	4411      	add	r1, r2
    5b60:	4408      	add	r0, r1
    5b62:	1c80      	adds	r0, r0, #2
    5b64:	f000 ffe6 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5b68:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    5b6c:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5b70:	1a40      	subs	r0, r0, r1
    5b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5b76:	e007      	b.n	5b88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    5b78:	f1b9 0101 	subs.w	r1, r9, #1
    5b7c:	f148 30ff 	adc.w	r0, r8, #4294967295
    5b80:	e9cd 1002 	strd	r1, r0, [sp, #8]
    5b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5b88:	9004      	str	r0, [sp, #16]
    5b8a:	f1bb 0f00 	cmp.w	fp, #0
    5b8e:	d004      	beq.n	5b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    5b90:	2100      	movs	r1, #0
    5b92:	f240 7022 	movw	r0, #1826	; 0x722
    5b96:	f3af 8000 	nop.w
    5b9a:	495a      	ldr	r1, [pc, #360]	; (5d04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5b9c:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    5ba0:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    5ba4:	9108      	str	r1, [sp, #32]
    5ba6:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    5baa:	a802      	add	r0, sp, #8
    5bac:	2901      	cmp	r1, #1
    5bae:	bf18      	it	ne
    5bb0:	2902      	cmpne	r1, #2
    5bb2:	d141      	bne.n	5c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5bb4:	9511      	str	r5, [sp, #68]	; 0x44
    5bb6:	9a02      	ldr	r2, [sp, #8]
    5bb8:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    5bbc:	1a53      	subs	r3, r2, r1
    5bbe:	f8dd c010 	ldr.w	ip, [sp, #16]
    5bc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5bc6:	eb12 020c 	adds.w	r2, r2, ip
    5bca:	1a51      	subs	r1, r2, r1
    5bcc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5bd0:	2b02      	cmp	r3, #2
    5bd2:	d374      	bcc.n	5cbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5bd8:	bf98      	it	ls
    5bda:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5bde:	d86e      	bhi.n	5cbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5be0:	2501      	movs	r5, #1
    5be2:	ab14      	add	r3, sp, #80	; 0x50
    5be4:	aa0e      	add	r2, sp, #56	; 0x38
    5be6:	4631      	mov	r1, r6
    5be8:	f7fe ff88 	bl	4afc <MPSL_IRQ_RADIO_Handler+0x484>
    5bec:	2800      	cmp	r0, #0
    5bee:	d06d      	beq.n	5ccc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    5bf0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5bf4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    5bf8:	4633      	mov	r3, r6
    5bfa:	428a      	cmp	r2, r1
    5bfc:	d06a      	beq.n	5cd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    5bfe:	2005      	movs	r0, #5
    5c00:	f7fe fd58 	bl	46b4 <MPSL_IRQ_RADIO_Handler+0x3c>
    5c04:	9908      	ldr	r1, [sp, #32]
    5c06:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    5c0a:	7048      	strb	r0, [r1, #1]
    5c0c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5c10:	2820      	cmp	r0, #32
    5c12:	bf01      	itttt	eq
    5c14:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5c18:	4438      	addeq	r0, r7
    5c1a:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    5c1e:	9511      	streq	r5, [sp, #68]	; 0x44
    5c20:	bf1e      	ittt	ne
    5c22:	9908      	ldrne	r1, [sp, #32]
    5c24:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    5c28:	f880 8001 	strbne.w	r8, [r0, #1]
    5c2c:	4632      	mov	r2, r6
    5c2e:	4641      	mov	r1, r8
    5c30:	f05f 0003 	movs.w	r0, #3
    5c34:	f7ff fba6 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5c38:	f1bb 0f00 	cmp.w	fp, #0
    5c3c:	d004      	beq.n	5c48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    5c3e:	2100      	movs	r1, #0
    5c40:	f240 7027 	movw	r0, #1831	; 0x727
    5c44:	f3af 8000 	nop.w
    5c48:	4831      	ldr	r0, [pc, #196]	; (5d10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    5c4a:	2800      	cmp	r0, #0
    5c4c:	bf18      	it	ne
    5c4e:	f3af 8000 	nopne.w
    5c52:	f3ef 8810 	mrs	r8, PRIMASK
    5c56:	b672      	cpsid	i
    5c58:	f1bb 0f00 	cmp.w	fp, #0
    5c5c:	d004      	beq.n	5c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    5c5e:	2100      	movs	r1, #0
    5c60:	f240 702d 	movw	r0, #1837	; 0x72d
    5c64:	f3af 8000 	nop.w
    5c68:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5c6c:	f88d 0020 	strb.w	r0, [sp, #32]
    5c70:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5c74:	2800      	cmp	r0, #0
    5c76:	f47f ae97 	bne.w	59a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5c7a:	f1bb 0f00 	cmp.w	fp, #0
    5c7e:	d004      	beq.n	5c8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    5c80:	2100      	movs	r1, #0
    5c82:	f240 7035 	movw	r0, #1845	; 0x735
    5c86:	f3af 8000 	nop.w
    5c8a:	f10d 0e04 	add.w	lr, sp, #4
    5c8e:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    5c92:	f100 0e08 	add.w	lr, r0, #8
    5c96:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    5c9a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    5c9e:	e9c0 1206 	strd	r1, r2, [r0, #24]
    5ca2:	b325      	cbz	r5, 5cee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    5ca4:	f1bb 0f00 	cmp.w	fp, #0
    5ca8:	d004      	beq.n	5cb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    5caa:	2100      	movs	r1, #0
    5cac:	f240 7042 	movw	r0, #1858	; 0x742
    5cb0:	f3af 8000 	nop.w
    5cb4:	f1ba 0f00 	cmp.w	sl, #0
    5cb8:	d146      	bne.n	5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5cba:	e02b      	b.n	5d14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    5cbc:	e7ff      	b.n	5cbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5cbe:	4632      	mov	r2, r6
    5cc0:	4641      	mov	r1, r8
    5cc2:	2004      	movs	r0, #4
    5cc4:	f7ff fb5e 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5cc8:	2501      	movs	r5, #1
    5cca:	e7b5      	b.n	5c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5ccc:	4632      	mov	r2, r6
    5cce:	4641      	mov	r1, r8
    5cd0:	2004      	movs	r0, #4
    5cd2:	e7af      	b.n	5c34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    5cd4:	2920      	cmp	r1, #32
    5cd6:	bf1d      	ittte	ne
    5cd8:	9808      	ldrne	r0, [sp, #32]
    5cda:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    5cde:	7840      	ldrbne	r0, [r0, #1]
    5ce0:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5ce4:	bf04      	itt	eq
    5ce6:	4438      	addeq	r0, r7
    5ce8:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    5cec:	e78a      	b.n	5c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    5cee:	e03b      	b.n	5d68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5cf0:	e000ed04 	.word	0xe000ed04
    5cf4:	20000a10 	.word	0x20000a10
    5cf8:	00000000 	.word	0x00000000
    5cfc:	20000590 	.word	0x20000590
    5d00:	00000000 	.word	0x00000000
    5d04:	20000990 	.word	0x20000990
    5d08:	1e847fff 	.word	0x1e847fff
    5d0c:	0f424000 	.word	0x0f424000
    5d10:	00000000 	.word	0x00000000
    5d14:	9811      	ldr	r0, [sp, #68]	; 0x44
    5d16:	f010 0fff 	tst.w	r0, #255	; 0xff
    5d1a:	d015      	beq.n	5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d1c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5d20:	2820      	cmp	r0, #32
    5d22:	d111      	bne.n	5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d24:	f1bb 0f00 	cmp.w	fp, #0
    5d28:	d004      	beq.n	5d34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    5d2a:	2100      	movs	r1, #0
    5d2c:	f240 7047 	movw	r0, #1863	; 0x747
    5d30:	f3af 8000 	nop.w
    5d34:	4631      	mov	r1, r6
    5d36:	2002      	movs	r0, #2
    5d38:	f7ff fb56 	bl	53e8 <MPSL_IRQ_RADIO_Handler+0xd70>
    5d3c:	9010      	str	r0, [sp, #64]	; 0x40
    5d3e:	b918      	cbnz	r0, 5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d40:	7820      	ldrb	r0, [r4, #0]
    5d42:	b300      	cbz	r0, 5d86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    5d44:	2801      	cmp	r0, #1
    5d46:	d02e      	beq.n	5da6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    5d48:	f1bb 0f00 	cmp.w	fp, #0
    5d4c:	d004      	beq.n	5d58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    5d4e:	2100      	movs	r1, #0
    5d50:	f240 7064 	movw	r0, #1892	; 0x764
    5d54:	f3af 8000 	nop.w
    5d58:	20ff      	movs	r0, #255	; 0xff
    5d5a:	f1ba 0f00 	cmp.w	sl, #0
    5d5e:	bf18      	it	ne
    5d60:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    5d64:	d029      	beq.n	5dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    5d66:	2501      	movs	r5, #1
    5d68:	f1bb 0f00 	cmp.w	fp, #0
    5d6c:	d004      	beq.n	5d78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    5d6e:	2100      	movs	r1, #0
    5d70:	f240 7075 	movw	r0, #1909	; 0x775
    5d74:	f3af 8000 	nop.w
    5d78:	9810      	ldr	r0, [sp, #64]	; 0x40
    5d7a:	4c34      	ldr	r4, [pc, #208]	; (5e4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    5d7c:	2802      	cmp	r0, #2
    5d7e:	d025      	beq.n	5dcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    5d80:	2801      	cmp	r0, #1
    5d82:	d02b      	beq.n	5ddc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    5d84:	e02f      	b.n	5de6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5d86:	f1bb 0f00 	cmp.w	fp, #0
    5d8a:	d004      	beq.n	5d96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    5d8c:	2100      	movs	r1, #0
    5d8e:	f240 704f 	movw	r0, #1871	; 0x74f
    5d92:	f3af 8000 	nop.w
    5d96:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5d9a:	2004      	movs	r0, #4
    5d9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5d9e:	f7ff faf1 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5da2:	2501      	movs	r5, #1
    5da4:	e7e0      	b.n	5d68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5da6:	f1bb 0f00 	cmp.w	fp, #0
    5daa:	f43f adfd 	beq.w	59a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5dae:	2100      	movs	r1, #0
    5db0:	f240 705a 	movw	r0, #1882	; 0x75a
    5db4:	f3af 8000 	nop.w
    5db8:	e5f6      	b.n	59a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5dba:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5dbe:	2101      	movs	r1, #1
    5dc0:	4391      	bics	r1, r2
    5dc2:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    5dc6:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    5dca:	e7cc      	b.n	5d66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    5dcc:	68b8      	ldr	r0, [r7, #8]
    5dce:	ebb0 0009 	subs.w	r0, r0, r9
    5dd2:	f004 fb73 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5dd6:	6861      	ldr	r1, [r4, #4]
    5dd8:	b921      	cbnz	r1, 5de4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    5dda:	e004      	b.n	5de6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5ddc:	6861      	ldr	r1, [r4, #4]
    5dde:	f04f 30ff 	mov.w	r0, #4294967295
    5de2:	b101      	cbz	r1, 5de6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5de4:	4788      	blx	r1
    5de6:	f1b8 0f00 	cmp.w	r8, #0
    5dea:	d028      	beq.n	5e3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    5dec:	f1bb 0f00 	cmp.w	fp, #0
    5df0:	d004      	beq.n	5dfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    5df2:	2100      	movs	r1, #0
    5df4:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    5df8:	f3af 8000 	nop.w
    5dfc:	b19d      	cbz	r5, 5e26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5dfe:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    5e02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e06:	4438      	add	r0, r7
    5e08:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    5e0c:	2820      	cmp	r0, #32
    5e0e:	d00a      	beq.n	5e26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e10:	f1bb 0f00 	cmp.w	fp, #0
    5e14:	d004      	beq.n	5e20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    5e16:	2100      	movs	r1, #0
    5e18:	f240 708f 	movw	r0, #1935	; 0x78f
    5e1c:	f3af 8000 	nop.w
    5e20:	7860      	ldrb	r0, [r4, #1]
    5e22:	f001 ffeb 	bl	7dfc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5e26:	f1bb 0f00 	cmp.w	fp, #0
    5e2a:	d004      	beq.n	5e36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    5e2c:	2100      	movs	r1, #0
    5e2e:	f240 7094 	movw	r0, #1940	; 0x794
    5e32:	f3af 8000 	nop.w
    5e36:	b019      	add	sp, #100	; 0x64
    5e38:	4628      	mov	r0, r5
    5e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e3e:	4804      	ldr	r0, [pc, #16]	; (5e50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    5e40:	2800      	cmp	r0, #0
    5e42:	bf18      	it	ne
    5e44:	f3af 8000 	nopne.w
    5e48:	b662      	cpsie	i
    5e4a:	e7cf      	b.n	5dec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    5e4c:	20000120 	.word	0x20000120
    5e50:	00000000 	.word	0x00000000

00005e54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    5e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e58:	4604      	mov	r4, r0
    5e5a:	7800      	ldrb	r0, [r0, #0]
    5e5c:	b095      	sub	sp, #84	; 0x54
    5e5e:	b118      	cbz	r0, 5e68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    5e60:	b015      	add	sp, #84	; 0x54
    5e62:	2000      	movs	r0, #0
    5e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e68:	48d1      	ldr	r0, [pc, #836]	; (61b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    5e6a:	6800      	ldr	r0, [r0, #0]
    5e6c:	05c0      	lsls	r0, r0, #23
    5e6e:	0dc0      	lsrs	r0, r0, #23
    5e70:	d00e      	beq.n	5e90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    5e72:	3810      	subs	r0, #16
    5e74:	b240      	sxtb	r0, r0
    5e76:	2800      	cmp	r0, #0
    5e78:	bfb8      	it	lt
    5e7a:	f000 000f 	andlt.w	r0, r0, #15
    5e7e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5e82:	bfac      	ite	ge
    5e84:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    5e88:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    5e8c:	0940      	lsrs	r0, r0, #5
    5e8e:	d0e7      	beq.n	5e60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    5e90:	a80d      	add	r0, sp, #52	; 0x34
    5e92:	f8df 9320 	ldr.w	r9, [pc, #800]	; 61b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    5e96:	9009      	str	r0, [sp, #36]	; 0x24
    5e98:	f1b9 0f00 	cmp.w	r9, #0
    5e9c:	d004      	beq.n	5ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    5e9e:	2100      	movs	r1, #0
    5ea0:	f240 50c5 	movw	r0, #1477	; 0x5c5
    5ea4:	f3af 8000 	nop.w
    5ea8:	f8df 830c 	ldr.w	r8, [pc, #780]	; 61b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    5eac:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    5eb0:	2500      	movs	r5, #0
    5eb2:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    5eb6:	9503      	str	r5, [sp, #12]
    5eb8:	f1b9 0f00 	cmp.w	r9, #0
    5ebc:	d004      	beq.n	5ec8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    5ebe:	2100      	movs	r1, #0
    5ec0:	f240 50ca 	movw	r0, #1482	; 0x5ca
    5ec4:	f3af 8000 	nop.w
    5ec8:	2001      	movs	r0, #1
    5eca:	ea20 0a06 	bic.w	sl, r0, r6
    5ece:	48bb      	ldr	r0, [pc, #748]	; (61bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    5ed0:	2240      	movs	r2, #64	; 0x40
    5ed2:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    5ed6:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    5eda:	f004 fc7f 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5ede:	f1b9 0f00 	cmp.w	r9, #0
    5ee2:	d004      	beq.n	5eee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    5ee4:	2100      	movs	r1, #0
    5ee6:	f240 503c 	movw	r0, #1340	; 0x53c
    5eea:	f3af 8000 	nop.w
    5eee:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5ef2:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    5ef6:	eb01 0208 	add.w	r2, r1, r8
    5efa:	4440      	add	r0, r8
    5efc:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    5efe:	8501      	strh	r1, [r0, #40]	; 0x28
    5f00:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    5f04:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5f08:	f1b9 0f00 	cmp.w	r9, #0
    5f0c:	d004      	beq.n	5f18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    5f0e:	2100      	movs	r1, #0
    5f10:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5f14:	f3af 8000 	nop.w
    5f18:	f1b9 0f00 	cmp.w	r9, #0
    5f1c:	d004      	beq.n	5f28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    5f1e:	2100      	movs	r1, #0
    5f20:	f240 50cf 	movw	r0, #1487	; 0x5cf
    5f24:	f3af 8000 	nop.w
    5f28:	f001 f900 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f2c:	460f      	mov	r7, r1
    5f2e:	4606      	mov	r6, r0
    5f30:	8921      	ldrh	r1, [r4, #8]
    5f32:	4628      	mov	r0, r5
    5f34:	f361 401f 	bfi	r0, r1, #16, #16
    5f38:	4601      	mov	r1, r0
    5f3a:	7aa2      	ldrb	r2, [r4, #10]
    5f3c:	4628      	mov	r0, r5
    5f3e:	f362 0007 	bfi	r0, r2, #0, #8
    5f42:	7ae2      	ldrb	r2, [r4, #11]
    5f44:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    5f48:	f362 200f 	bfi	r0, r2, #8, #8
    5f4c:	7822      	ldrb	r2, [r4, #0]
    5f4e:	950a      	str	r5, [sp, #40]	; 0x28
    5f50:	f362 4017 	bfi	r0, r2, #16, #8
    5f54:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    5f58:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    5f5c:	950b      	str	r5, [sp, #44]	; 0x2c
    5f5e:	7820      	ldrb	r0, [r4, #0]
    5f60:	b388      	cbz	r0, 5fc6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    5f62:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5f66:	4896      	ldr	r0, [pc, #600]	; (61c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    5f68:	f10b 020c 	add.w	r2, fp, #12
    5f6c:	1a40      	subs	r0, r0, r1
    5f6e:	a911      	add	r1, sp, #68	; 0x44
    5f70:	f000 fdfc 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5f74:	2200      	movs	r2, #0
    5f76:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    5f7a:	4630      	mov	r0, r6
    5f7c:	4639      	mov	r1, r7
    5f7e:	f7fe fd6d 	bl	4a5c <MPSL_IRQ_RADIO_Handler+0x3e4>
    5f82:	4684      	mov	ip, r0
    5f84:	7ae0      	ldrb	r0, [r4, #11]
    5f86:	460b      	mov	r3, r1
    5f88:	2800      	cmp	r0, #0
    5f8a:	bf0c      	ite	eq
    5f8c:	207a      	moveq	r0, #122	; 0x7a
    5f8e:	204a      	movne	r0, #74	; 0x4a
    5f90:	6861      	ldr	r1, [r4, #4]
    5f92:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    5f96:	4408      	add	r0, r1
    5f98:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5f9c:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    5fa0:	4411      	add	r1, r2
    5fa2:	4408      	add	r0, r1
    5fa4:	1c80      	adds	r0, r0, #2
    5fa6:	f000 fdc5 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5faa:	f8cd a000 	str.w	sl, [sp]
    5fae:	900c      	str	r0, [sp, #48]	; 0x30
    5fb0:	4632      	mov	r2, r6
    5fb2:	463b      	mov	r3, r7
    5fb4:	4659      	mov	r1, fp
    5fb6:	6920      	ldr	r0, [r4, #16]
    5fb8:	f7fe fbb8 	bl	472c <MPSL_IRQ_RADIO_Handler+0xb4>
    5fbc:	2800      	cmp	r0, #0
    5fbe:	bf08      	it	eq
    5fc0:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    5fc4:	e045      	b.n	6052 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    5fc6:	e7ff      	b.n	5fc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    5fc8:	4630      	mov	r0, r6
    5fca:	4639      	mov	r1, r7
    5fcc:	f000 fd50 	bl	6a70 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5fd0:	4b7c      	ldr	r3, [pc, #496]	; (61c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    5fd2:	4602      	mov	r2, r0
    5fd4:	eb10 0c03 	adds.w	ip, r0, r3
    5fd8:	468b      	mov	fp, r1
    5fda:	f141 0300 	adc.w	r3, r1, #0
    5fde:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5fe2:	ebb0 0c0c 	subs.w	ip, r0, ip
    5fe6:	eb71 0303 	sbcs.w	r3, r1, r3
    5fea:	d22a      	bcs.n	6042 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    5fec:	3229      	adds	r2, #41	; 0x29
    5fee:	f14b 0300 	adc.w	r3, fp, #0
    5ff2:	1a82      	subs	r2, r0, r2
    5ff4:	eb71 0203 	sbcs.w	r2, r1, r3
    5ff8:	d323      	bcc.n	6042 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    5ffa:	8922      	ldrh	r2, [r4, #8]
    5ffc:	ab12      	add	r3, sp, #72	; 0x48
    5ffe:	1a80      	subs	r0, r0, r2
    6000:	eb61 0105 	sbc.w	r1, r1, r5
    6004:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6006:	1e40      	subs	r0, r0, #1
    6008:	9200      	str	r2, [sp, #0]
    600a:	f141 31ff 	adc.w	r1, r1, #4294967295
    600e:	aa07      	add	r2, sp, #28
    6010:	f000 fd52 	bl	6ab8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    6014:	7ae0      	ldrb	r0, [r4, #11]
    6016:	2800      	cmp	r0, #0
    6018:	bf0c      	ite	eq
    601a:	207a      	moveq	r0, #122	; 0x7a
    601c:	204a      	movne	r0, #74	; 0x4a
    601e:	9907      	ldr	r1, [sp, #28]
    6020:	8922      	ldrh	r2, [r4, #8]
    6022:	4408      	add	r0, r1
    6024:	6861      	ldr	r1, [r4, #4]
    6026:	4411      	add	r1, r2
    6028:	4408      	add	r0, r1
    602a:	1c80      	adds	r0, r0, #2
    602c:	f000 fd82 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6030:	4601      	mov	r1, r0
    6032:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    6036:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    603a:	1a08      	subs	r0, r1, r0
    603c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6040:	e006      	b.n	6050 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    6042:	1e70      	subs	r0, r6, #1
    6044:	f147 31ff 	adc.w	r1, r7, #4294967295
    6048:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    604c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6050:	900c      	str	r0, [sp, #48]	; 0x30
    6052:	f1b9 0f00 	cmp.w	r9, #0
    6056:	d004      	beq.n	6062 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    6058:	2100      	movs	r1, #0
    605a:	f240 50d5 	movw	r0, #1493	; 0x5d5
    605e:	f3af 8000 	nop.w
    6062:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    6066:	f8d8 1008 	ldr.w	r1, [r8, #8]
    606a:	1808      	adds	r0, r1, r0
    606c:	eb42 0105 	adc.w	r1, r2, r5
    6070:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    6074:	2a20      	cmp	r2, #32
    6076:	d009      	beq.n	608c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    6078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    607c:	1a12      	subs	r2, r2, r0
    607e:	eb73 0201 	sbcs.w	r2, r3, r1
    6082:	d203      	bcs.n	608c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    6084:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    6088:	2001      	movs	r0, #1
    608a:	9003      	str	r0, [sp, #12]
    608c:	f1b9 0f00 	cmp.w	r9, #0
    6090:	d004      	beq.n	609c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    6092:	2100      	movs	r1, #0
    6094:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    6098:	f3af 8000 	nop.w
    609c:	990a      	ldr	r1, [sp, #40]	; 0x28
    609e:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    60a2:	1a0a      	subs	r2, r1, r0
    60a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    60aa:	18c9      	adds	r1, r1, r3
    60ac:	1a08      	subs	r0, r1, r0
    60ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    60b2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    60b6:	bf98      	it	ls
    60b8:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    60bc:	d80b      	bhi.n	60d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    60be:	4632      	mov	r2, r6
    60c0:	463b      	mov	r3, r7
    60c2:	a90a      	add	r1, sp, #40	; 0x28
    60c4:	483f      	ldr	r0, [pc, #252]	; (61c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    60c6:	f8cd a000 	str.w	sl, [sp]
    60ca:	f7fe fb2f 	bl	472c <MPSL_IRQ_RADIO_Handler+0xb4>
    60ce:	9903      	ldr	r1, [sp, #12]
    60d0:	4308      	orrs	r0, r1
    60d2:	d145      	bne.n	6160 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    60d4:	e05f      	b.n	6196 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    60d6:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    60da:	aa05      	add	r2, sp, #20
    60dc:	a903      	add	r1, sp, #12
    60de:	4658      	mov	r0, fp
    60e0:	f000 fd44 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    60e4:	f001 fa40 	bl	7568 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    60e8:	f000 fd24 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    60ec:	4682      	mov	sl, r0
    60ee:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    60f2:	2820      	cmp	r0, #32
    60f4:	d00a      	beq.n	610c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    60f6:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    60fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
    60fe:	1d80      	adds	r0, r0, #6
    6100:	f145 0100 	adc.w	r1, r5, #0
    6104:	181e      	adds	r6, r3, r0
    6106:	eb42 0701 	adc.w	r7, r2, r1
    610a:	e024      	b.n	6156 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    610c:	360a      	adds	r6, #10
    610e:	f147 0700 	adc.w	r7, r7, #0
    6112:	f1bb 0f00 	cmp.w	fp, #0
    6116:	d017      	beq.n	6148 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    6118:	f001 fd26 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    611c:	b9a0      	cbnz	r0, 6148 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    611e:	f001 fbfb 	bl	7918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6122:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    6126:	bf08      	it	eq
    6128:	200d      	moveq	r0, #13
    612a:	d00b      	beq.n	6144 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    612c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6130:	3856      	subs	r0, #86	; 0x56
    6132:	bf08      	it	eq
    6134:	201c      	moveq	r0, #28
    6136:	d005      	beq.n	6144 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    6138:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    613c:	389f      	subs	r0, #159	; 0x9f
    613e:	bf14      	ite	ne
    6140:	4628      	movne	r0, r5
    6142:	2032      	moveq	r0, #50	; 0x32
    6144:	1986      	adds	r6, r0, r6
    6146:	416f      	adcs	r7, r5
    6148:	9803      	ldr	r0, [sp, #12]
    614a:	4582      	cmp	sl, r0
    614c:	d903      	bls.n	6156 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    614e:	ebaa 0000 	sub.w	r0, sl, r0
    6152:	1986      	adds	r6, r0, r6
    6154:	416f      	adcs	r7, r5
    6156:	201f      	movs	r0, #31
    6158:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    615c:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    6160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6164:	f000 fc84 	bl	6a70 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6168:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    616c:	1880      	adds	r0, r0, r2
    616e:	eb41 0205 	adc.w	r2, r1, r5
    6172:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    6176:	1840      	adds	r0, r0, r1
    6178:	eb42 0105 	adc.w	r1, r2, r5
    617c:	1c40      	adds	r0, r0, #1
    617e:	f141 0100 	adc.w	r1, r1, #0
    6182:	f1b9 0f00 	cmp.w	r9, #0
    6186:	e9c4 0104 	strd	r0, r1, [r4, #16]
    618a:	d004      	beq.n	6196 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    618c:	2100      	movs	r1, #0
    618e:	f240 50fa 	movw	r0, #1530	; 0x5fa
    6192:	f3af 8000 	nop.w
    6196:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    619a:	f88d 0000 	strb.w	r0, [sp]
    619e:	f89d 0000 	ldrb.w	r0, [sp]
    61a2:	2800      	cmp	r0, #0
    61a4:	f47f ae78 	bne.w	5e98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    61a8:	b015      	add	sp, #84	; 0x54
    61aa:	2001      	movs	r0, #1
    61ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61b0:	e000ed04 	.word	0xe000ed04
    61b4:	00000000 	.word	0x00000000
    61b8:	20000a10 	.word	0x20000a10
    61bc:	20000990 	.word	0x20000990
    61c0:	1e847fff 	.word	0x1e847fff
    61c4:	0f424000 	.word	0x0f424000

000061c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    61c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61cc:	4d9d      	ldr	r5, [pc, #628]	; (6444 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    61ce:	b08c      	sub	sp, #48	; 0x30
    61d0:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    61d4:	2000      	movs	r0, #0
    61d6:	9007      	str	r0, [sp, #28]
    61d8:	9008      	str	r0, [sp, #32]
    61da:	2001      	movs	r0, #1
    61dc:	4c9a      	ldr	r4, [pc, #616]	; (6448 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    61de:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    61e2:	f04f 0800 	mov.w	r8, #0
    61e6:	4607      	mov	r7, r0
    61e8:	9006      	str	r0, [sp, #24]
    61ea:	b124      	cbz	r4, 61f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    61ec:	2100      	movs	r1, #0
    61ee:	f240 70a5 	movw	r0, #1957	; 0x7a5
    61f2:	f3af 8000 	nop.w
    61f6:	9806      	ldr	r0, [sp, #24]
    61f8:	2800      	cmp	r0, #0
    61fa:	d03c      	beq.n	6276 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    61fc:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    6200:	b124      	cbz	r4, 620c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    6202:	2100      	movs	r1, #0
    6204:	f240 70aa 	movw	r0, #1962	; 0x7aa
    6208:	f3af 8000 	nop.w
    620c:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    6210:	2240      	movs	r2, #64	; 0x40
    6212:	ea27 060a 	bic.w	r6, r7, sl
    6216:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    621a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    621e:	4683      	mov	fp, r0
    6220:	f004 fadc 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6224:	b124      	cbz	r4, 6230 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    6226:	2100      	movs	r1, #0
    6228:	f240 503c 	movw	r0, #1340	; 0x53c
    622c:	f3af 8000 	nop.w
    6230:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    6234:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    6238:	4428      	add	r0, r5
    623a:	4429      	add	r1, r5
    623c:	9000      	str	r0, [sp, #0]
    623e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    6240:	8502      	strh	r2, [r0, #40]	; 0x28
    6242:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    6246:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    624a:	b124      	cbz	r4, 6256 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    624c:	2100      	movs	r1, #0
    624e:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6252:	f3af 8000 	nop.w
    6256:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    625a:	f88d 0008 	strb.w	r0, [sp, #8]
    625e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6262:	b178      	cbz	r0, 6284 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    6264:	2c00      	cmp	r4, #0
    6266:	bf1c      	itt	ne
    6268:	2100      	movne	r1, #0
    626a:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    626e:	d0bc      	beq.n	61ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    6270:	f3af 8000 	nop.w
    6274:	e7b9      	b.n	61ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    6276:	4875      	ldr	r0, [pc, #468]	; (644c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    6278:	2800      	cmp	r0, #0
    627a:	bf18      	it	ne
    627c:	f3af 8000 	nopne.w
    6280:	b662      	cpsie	i
    6282:	e7bb      	b.n	61fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    6284:	b124      	cbz	r4, 6290 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    6286:	2100      	movs	r1, #0
    6288:	f240 70b4 	movw	r0, #1972	; 0x7b4
    628c:	f3af 8000 	nop.w
    6290:	980c      	ldr	r0, [sp, #48]	; 0x30
    6292:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    6296:	2803      	cmp	r0, #3
    6298:	d17e      	bne.n	6398 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    629a:	9a00      	ldr	r2, [sp, #0]
    629c:	990c      	ldr	r1, [sp, #48]	; 0x30
    629e:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    62a2:	4288      	cmp	r0, r1
    62a4:	bf14      	ite	ne
    62a6:	f04f 0a00 	movne.w	sl, #0
    62aa:	f04f 0a01 	moveq.w	sl, #1
    62ae:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    62b2:	4683      	mov	fp, r0
    62b4:	2220      	movs	r2, #32
    62b6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    62ba:	e003      	b.n	62c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    62bc:	4602      	mov	r2, r0
    62be:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    62c2:	7840      	ldrb	r0, [r0, #1]
    62c4:	4288      	cmp	r0, r1
    62c6:	d002      	beq.n	62ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    62c8:	2820      	cmp	r0, #32
    62ca:	d00a      	beq.n	62e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    62cc:	e7f6      	b.n	62bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    62ce:	2820      	cmp	r0, #32
    62d0:	d007      	beq.n	62e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    62d2:	4583      	cmp	fp, r0
    62d4:	d107      	bne.n	62e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    62d6:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    62da:	7840      	ldrb	r0, [r0, #1]
    62dc:	f88c 0000 	strb.w	r0, [ip]
    62e0:	e007      	b.n	62f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    62e2:	4640      	mov	r0, r8
    62e4:	e00c      	b.n	6300 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    62e6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    62ea:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    62ee:	7840      	ldrb	r0, [r0, #1]
    62f0:	7048      	strb	r0, [r1, #1]
    62f2:	b124      	cbz	r4, 62fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    62f4:	2100      	movs	r1, #0
    62f6:	f240 40a4 	movw	r0, #1188	; 0x4a4
    62fa:	f3af 8000 	nop.w
    62fe:	4638      	mov	r0, r7
    6300:	46c3      	mov	fp, r8
    6302:	ea10 0f0a 	tst.w	r0, sl
    6306:	bf18      	it	ne
    6308:	46bb      	movne	fp, r7
    630a:	2800      	cmp	r0, #0
    630c:	d04e      	beq.n	63ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    630e:	b124      	cbz	r4, 631a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    6310:	2100      	movs	r1, #0
    6312:	f240 70b9 	movw	r0, #1977	; 0x7b9
    6316:	f3af 8000 	nop.w
    631a:	4632      	mov	r2, r6
    631c:	2001      	movs	r0, #1
    631e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6320:	f7ff f830 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6324:	b124      	cbz	r4, 6330 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    6326:	2100      	movs	r1, #0
    6328:	f240 70c2 	movw	r0, #1986	; 0x7c2
    632c:	f3af 8000 	nop.w
    6330:	4847      	ldr	r0, [pc, #284]	; (6450 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    6332:	2800      	cmp	r0, #0
    6334:	bf18      	it	ne
    6336:	f3af 8000 	nopne.w
    633a:	f3ef 8010 	mrs	r0, PRIMASK
    633e:	b672      	cpsid	i
    6340:	9006      	str	r0, [sp, #24]
    6342:	b124      	cbz	r4, 634e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    6344:	2100      	movs	r1, #0
    6346:	f240 70c7 	movw	r0, #1991	; 0x7c7
    634a:	f3af 8000 	nop.w
    634e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    6352:	f88d 0008 	strb.w	r0, [sp, #8]
    6356:	f89d 0008 	ldrb.w	r0, [sp, #8]
    635a:	b138      	cbz	r0, 636c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    635c:	2c00      	cmp	r4, #0
    635e:	bf1c      	itt	ne
    6360:	2100      	movne	r1, #0
    6362:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    6366:	f43f af40 	beq.w	61ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    636a:	e781      	b.n	6270 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    636c:	f1bb 0f00 	cmp.w	fp, #0
    6370:	d009      	beq.n	6386 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    6372:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    6376:	2820      	cmp	r0, #32
    6378:	d105      	bne.n	6386 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    637a:	4631      	mov	r1, r6
    637c:	2002      	movs	r0, #2
    637e:	f7ff f833 	bl	53e8 <MPSL_IRQ_RADIO_Handler+0xd70>
    6382:	9008      	str	r0, [sp, #32]
    6384:	b1f8      	cbz	r0, 63c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    6386:	b124      	cbz	r4, 6392 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    6388:	2100      	movs	r1, #0
    638a:	f240 70df 	movw	r0, #2015	; 0x7df
    638e:	f3af 8000 	nop.w
    6392:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    6396:	e000      	b.n	639a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    6398:	e008      	b.n	63ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    639a:	ea27 0000 	bic.w	r0, r7, r0
    639e:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    63a2:	20ff      	movs	r0, #255	; 0xff
    63a4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    63a8:	2001      	movs	r0, #1
    63aa:	9007      	str	r0, [sp, #28]
    63ac:	b124      	cbz	r4, 63b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    63ae:	2100      	movs	r1, #0
    63b0:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    63b4:	f3af 8000 	nop.w
    63b8:	9808      	ldr	r0, [sp, #32]
    63ba:	4e26      	ldr	r6, [pc, #152]	; (6454 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    63bc:	2802      	cmp	r0, #2
    63be:	d009      	beq.n	63d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    63c0:	2801      	cmp	r0, #1
    63c2:	d027      	beq.n	6414 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    63c4:	e02b      	b.n	641e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    63c6:	b354      	cbz	r4, 641e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    63c8:	2100      	movs	r1, #0
    63ca:	f240 70da 	movw	r0, #2010	; 0x7da
    63ce:	f3af 8000 	nop.w
    63d2:	e7ec      	b.n	63ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    63d4:	f000 feaa 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    63d8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    63dc:	ebb3 0c00 	subs.w	ip, r3, r0
    63e0:	eb72 0c01 	sbcs.w	ip, r2, r1
    63e4:	d204      	bcs.n	63f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    63e6:	f240 71ee 	movw	r1, #2030	; 0x7ee
    63ea:	2070      	movs	r0, #112	; 0x70
    63ec:	f001 fc34 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    63f0:	1a18      	subs	r0, r3, r0
    63f2:	eb62 0101 	sbc.w	r1, r2, r1
    63f6:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    63fa:	f171 0100 	sbcs.w	r1, r1, #0
    63fe:	d304      	bcc.n	640a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    6400:	f240 71ef 	movw	r1, #2031	; 0x7ef
    6404:	2070      	movs	r0, #112	; 0x70
    6406:	f001 fc27 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    640a:	f004 f857 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    640e:	6871      	ldr	r1, [r6, #4]
    6410:	b129      	cbz	r1, 641e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6412:	e003      	b.n	641c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    6414:	6871      	ldr	r1, [r6, #4]
    6416:	f04f 30ff 	mov.w	r0, #4294967295
    641a:	b101      	cbz	r1, 641e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    641c:	4788      	blx	r1
    641e:	9806      	ldr	r0, [sp, #24]
    6420:	b148      	cbz	r0, 6436 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    6422:	b124      	cbz	r4, 642e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    6424:	2100      	movs	r1, #0
    6426:	f240 70ff 	movw	r0, #2047	; 0x7ff
    642a:	f3af 8000 	nop.w
    642e:	9807      	ldr	r0, [sp, #28]
    6430:	b00d      	add	sp, #52	; 0x34
    6432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6436:	4805      	ldr	r0, [pc, #20]	; (644c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    6438:	2800      	cmp	r0, #0
    643a:	bf18      	it	ne
    643c:	f3af 8000 	nopne.w
    6440:	b662      	cpsie	i
    6442:	e7ee      	b.n	6422 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    6444:	20000a10 	.word	0x20000a10
	...
    6454:	20000120 	.word	0x20000120

00006458 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    6458:	b510      	push	{r4, lr}
    645a:	2820      	cmp	r0, #32
    645c:	d211      	bcs.n	6482 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    645e:	490e      	ldr	r1, [pc, #56]	; (6498 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    6460:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    6464:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    6468:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    646c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    6470:	b13b      	cbz	r3, 6482 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    6472:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    6476:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    647a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    647e:	2a01      	cmp	r2, #1
    6480:	d001      	beq.n	6486 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    6482:	2000      	movs	r0, #0
    6484:	bd10      	pop	{r4, pc}
    6486:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    648a:	4601      	mov	r1, r0
    648c:	2000      	movs	r0, #0
    648e:	f7fe ff79 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6492:	2001      	movs	r0, #1
    6494:	bd10      	pop	{r4, pc}
    6496:	0000      	.short	0x0000
    6498:	20000a10 	.word	0x20000a10

0000649c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    649c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64a0:	4e86      	ldr	r6, [pc, #536]	; (66bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    64a2:	4680      	mov	r8, r0
    64a4:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    64a8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    64ac:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    64b0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    64b4:	2800      	cmp	r0, #0
    64b6:	d071      	beq.n	659c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    64b8:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    64bc:	4d80      	ldr	r5, [pc, #512]	; (66c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    64be:	b125      	cbz	r5, 64ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    64c0:	2100      	movs	r1, #0
    64c2:	f640 307b 	movw	r0, #2939	; 0xb7b
    64c6:	f3af 8000 	nop.w
    64ca:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    64ce:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    64d2:	2801      	cmp	r0, #1
    64d4:	d018      	beq.n	6508 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    64d6:	b2c0      	uxtb	r0, r0
    64d8:	2804      	cmp	r0, #4
    64da:	bf1c      	itt	ne
    64dc:	2805      	cmpne	r0, #5
    64de:	2806      	cmpne	r0, #6
    64e0:	d061      	beq.n	65a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    64e2:	b12d      	cbz	r5, 64f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    64e4:	f04f 0100 	mov.w	r1, #0
    64e8:	f640 3087 	movw	r0, #2951	; 0xb87
    64ec:	f3af 8000 	nop.w
    64f0:	f004 f91a 	bl	a728 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    64f4:	b125      	cbz	r5, 6500 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    64f6:	2100      	movs	r1, #0
    64f8:	f640 308b 	movw	r0, #2955	; 0xb8b
    64fc:	f3af 8000 	nop.w
    6500:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6504:	2801      	cmp	r0, #1
    6506:	d1e6      	bne.n	64d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    6508:	2401      	movs	r4, #1
    650a:	b125      	cbz	r5, 6516 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    650c:	2100      	movs	r1, #0
    650e:	f640 3092 	movw	r0, #2962	; 0xb92
    6512:	f3af 8000 	nop.w
    6516:	2c00      	cmp	r4, #0
    6518:	d04b      	beq.n	65b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    651a:	2000      	movs	r0, #0
    651c:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6520:	b125      	cbz	r5, 652c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    6522:	2100      	movs	r1, #0
    6524:	f640 3097 	movw	r0, #2967	; 0xb97
    6528:	f3af 8000 	nop.w
    652c:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    6530:	2001      	movs	r0, #1
    6532:	ea20 090b 	bic.w	r9, r0, fp
    6536:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    653a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    653e:	2240      	movs	r2, #64	; 0x40
    6540:	f004 f94c 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6544:	b125      	cbz	r5, 6550 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    6546:	2100      	movs	r1, #0
    6548:	f240 503c 	movw	r0, #1340	; 0x53c
    654c:	f3af 8000 	nop.w
    6550:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    6554:	eb00 0a06 	add.w	sl, r0, r6
    6558:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    655c:	4430      	add	r0, r6
    655e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    6560:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    6564:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    6568:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    656c:	b125      	cbz	r5, 6578 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    656e:	2100      	movs	r1, #0
    6570:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6574:	f3af 8000 	nop.w
    6578:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    657c:	f88d 0000 	strb.w	r0, [sp]
    6580:	f89d 0000 	ldrb.w	r0, [sp]
    6584:	b1e0      	cbz	r0, 65c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    6586:	2d00      	cmp	r5, #0
    6588:	bf1c      	itt	ne
    658a:	2100      	movne	r1, #0
    658c:	f640 309d 	movwne	r0, #2973	; 0xb9d
    6590:	d0bb      	beq.n	650a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    6592:	bf00      	nop
    6594:	f3af 8000 	nop.w
    6598:	e7b7      	b.n	650a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    659a:	e7ff      	b.n	659c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    659c:	f640 3172 	movw	r1, #2930	; 0xb72
    65a0:	2070      	movs	r0, #112	; 0x70
    65a2:	f001 fb59 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    65a6:	464a      	mov	r2, r9
    65a8:	4641      	mov	r1, r8
    65aa:	2001      	movs	r0, #1
    65ac:	f7fe feea 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    65b0:	e7a0      	b.n	64f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    65b2:	4844      	ldr	r0, [pc, #272]	; (66c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    65b4:	2800      	cmp	r0, #0
    65b6:	bf18      	it	ne
    65b8:	f3af 8000 	nopne.w
    65bc:	b662      	cpsie	i
    65be:	e7ac      	b.n	651a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    65c0:	b125      	cbz	r5, 65cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    65c2:	2100      	movs	r1, #0
    65c4:	f640 30a1 	movw	r0, #2977	; 0xba1
    65c8:	f3af 8000 	nop.w
    65cc:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    65d0:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    65d4:	4640      	mov	r0, r8
    65d6:	461c      	mov	r4, r3
    65d8:	f04f 0b20 	mov.w	fp, #32
    65dc:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    65e0:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    65e4:	e004      	b.n	65f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    65e6:	46a3      	mov	fp, r4
    65e8:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    65ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
    65f0:	4284      	cmp	r4, r0
    65f2:	d002      	beq.n	65fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    65f4:	2c20      	cmp	r4, #32
    65f6:	d02b      	beq.n	6650 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    65f8:	e7f5      	b.n	65e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    65fa:	2c20      	cmp	r4, #32
    65fc:	d028      	beq.n	6650 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    65fe:	42a3      	cmp	r3, r4
    6600:	d104      	bne.n	660c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    6602:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    6606:	7840      	ldrb	r0, [r0, #1]
    6608:	7008      	strb	r0, [r1, #0]
    660a:	e005      	b.n	6618 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    660c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    6610:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    6614:	7840      	ldrb	r0, [r0, #1]
    6616:	7048      	strb	r0, [r1, #1]
    6618:	f1ba 0f00 	cmp.w	sl, #0
    661c:	d011      	beq.n	6642 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    661e:	b125      	cbz	r5, 662a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    6620:	2100      	movs	r1, #0
    6622:	f240 409c 	movw	r0, #1180	; 0x49c
    6626:	f3af 8000 	nop.w
    662a:	f89a 0000 	ldrb.w	r0, [sl]
    662e:	42a0      	cmp	r0, r4
    6630:	d107      	bne.n	6642 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6632:	b125      	cbz	r5, 663e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    6634:	2100      	movs	r1, #0
    6636:	f240 409f 	movw	r0, #1183	; 0x49f
    663a:	f3af 8000 	nop.w
    663e:	f88a b000 	strb.w	fp, [sl]
    6642:	b15d      	cbz	r5, 665c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6644:	2100      	movs	r1, #0
    6646:	f240 40a4 	movw	r0, #1188	; 0x4a4
    664a:	f3af 8000 	nop.w
    664e:	e000      	b.n	6652 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    6650:	b125      	cbz	r5, 665c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6652:	2100      	movs	r1, #0
    6654:	f640 30a5 	movw	r0, #2981	; 0xba5
    6658:	f3af 8000 	nop.w
    665c:	481a      	ldr	r0, [pc, #104]	; (66c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    665e:	2800      	cmp	r0, #0
    6660:	bf18      	it	ne
    6662:	f3af 8000 	nopne.w
    6666:	f3ef 8410 	mrs	r4, PRIMASK
    666a:	b672      	cpsid	i
    666c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    6670:	f88d 0000 	strb.w	r0, [sp]
    6674:	f89d 0000 	ldrb.w	r0, [sp]
    6678:	b138      	cbz	r0, 668a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    667a:	2d00      	cmp	r5, #0
    667c:	bf1c      	itt	ne
    667e:	2100      	movne	r1, #0
    6680:	f640 30ab 	movwne	r0, #2987	; 0xbab
    6684:	f43f af41 	beq.w	650a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    6688:	e784      	b.n	6594 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    668a:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    668e:	20ff      	movs	r0, #255	; 0xff
    6690:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6694:	b154      	cbz	r4, 66ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    6696:	2d00      	cmp	r5, #0
    6698:	bf08      	it	eq
    669a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    669e:	2100      	movs	r1, #0
    66a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    66a4:	f3af 8000 	nop.w
    66a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66ac:	4805      	ldr	r0, [pc, #20]	; (66c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    66ae:	2800      	cmp	r0, #0
    66b0:	bf18      	it	ne
    66b2:	f3af 8000 	nopne.w
    66b6:	b662      	cpsie	i
    66b8:	e7ed      	b.n	6696 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    66ba:	0000      	.short	0x0000
    66bc:	20000a10 	.word	0x20000a10
	...

000066cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    66cc:	b570      	push	{r4, r5, r6, lr}
    66ce:	460d      	mov	r5, r1
    66d0:	4606      	mov	r6, r0
    66d2:	f001 fa37 	bl	7b44 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    66d6:	480d      	ldr	r0, [pc, #52]	; (670c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    66d8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    66dc:	2400      	movs	r4, #0
    66de:	3880      	subs	r0, #128	; 0x80
    66e0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    66e4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    66e8:	b129      	cbz	r1, 66f6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    66ea:	1c61      	adds	r1, r4, #1
    66ec:	b2cc      	uxtb	r4, r1
    66ee:	2c20      	cmp	r4, #32
    66f0:	d3f8      	bcc.n	66e4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    66f2:	2020      	movs	r0, #32
    66f4:	bd70      	pop	{r4, r5, r6, pc}
    66f6:	4806      	ldr	r0, [pc, #24]	; (6710 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    66f8:	4621      	mov	r1, r4
    66fa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    66fe:	e9c0 6500 	strd	r6, r5, [r0]
    6702:	2001      	movs	r0, #1
    6704:	f7fe fe3e 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6708:	4620      	mov	r0, r4
    670a:	bd70      	pop	{r4, r5, r6, pc}
    670c:	20000a10 	.word	0x20000a10
    6710:	20000590 	.word	0x20000590

00006714 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    6714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6718:	f000 fd08 	bl	712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    671c:	4606      	mov	r6, r0
    671e:	460f      	mov	r7, r1
    6720:	f000 fe48 	bl	73b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    6724:	4c65      	ldr	r4, [pc, #404]	; (68bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    6726:	6860      	ldr	r0, [r4, #4]
    6728:	f1b0 3fff 	cmp.w	r0, #4294967295
    672c:	bf1c      	itt	ne
    672e:	f04f 30ff 	movne.w	r0, #4294967295
    6732:	6060      	strne	r0, [r4, #4]
    6734:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    6738:	f8df b184 	ldr.w	fp, [pc, #388]	; 68c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    673c:	2500      	movs	r5, #0
    673e:	bb10      	cbnz	r0, 6786 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6740:	f44f 710c 	mov.w	r1, #560	; 0x230
    6744:	6920      	ldr	r0, [r4, #16]
    6746:	f001 f9e9 	bl	7b1c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    674a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    674e:	68a1      	ldr	r1, [r4, #8]
    6750:	1818      	adds	r0, r3, r0
    6752:	eb45 0305 	adc.w	r3, r5, r5
    6756:	1809      	adds	r1, r1, r0
    6758:	eb42 0003 	adc.w	r0, r2, r3
    675c:	1a71      	subs	r1, r6, r1
    675e:	eb77 0000 	sbcs.w	r0, r7, r0
    6762:	d310      	bcc.n	6786 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6764:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6768:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    676c:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    6770:	6840      	ldr	r0, [r0, #4]
    6772:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    6776:	680a      	ldr	r2, [r1, #0]
    6778:	2108      	movs	r1, #8
    677a:	4790      	blx	r2
    677c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    6780:	2070      	movs	r0, #112	; 0x70
    6782:	f001 fa69 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6786:	7e60      	ldrb	r0, [r4, #25]
    6788:	b180      	cbz	r0, 67ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    678a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    678e:	f88d 0000 	strb.w	r0, [sp]
    6792:	f89d 0000 	ldrb.w	r0, [sp]
    6796:	b148      	cbz	r0, 67ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    6798:	f000 fc3e 	bl	7018 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    679c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    67a0:	b150      	cbz	r0, 67b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    67a2:	f240 31cd 	movw	r1, #973	; 0x3cd
    67a6:	2070      	movs	r0, #112	; 0x70
    67a8:	f001 fa56 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67ac:	1cf0      	adds	r0, r6, #3
    67ae:	f147 0100 	adc.w	r1, r7, #0
    67b2:	f000 fb0b 	bl	6dcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    67b6:	e7f1      	b.n	679c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    67b8:	2001      	movs	r0, #1
    67ba:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    67be:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    67c2:	2820      	cmp	r0, #32
    67c4:	d020      	beq.n	6808 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    67c6:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    67ca:	2020      	movs	r0, #32
    67cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    67d0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    67d4:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    67d8:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    67dc:	6025      	str	r5, [r4, #0]
    67de:	f000 fec9 	bl	7574 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    67e2:	f884 0020 	strb.w	r0, [r4, #32]
    67e6:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    67ea:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    67ee:	eb00 0a04 	add.w	sl, r0, r4
    67f2:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    67f6:	2820      	cmp	r0, #32
    67f8:	d01c      	beq.n	6834 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    67fa:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    67fe:	f89b 001a 	ldrb.w	r0, [fp, #26]
    6802:	2801      	cmp	r0, #1
    6804:	d005      	beq.n	6812 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    6806:	e015      	b.n	6834 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6808:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    680c:	2070      	movs	r0, #112	; 0x70
    680e:	f001 fa23 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6812:	2201      	movs	r2, #1
    6814:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    6818:	4630      	mov	r0, r6
    681a:	4639      	mov	r1, r7
    681c:	f7fe f91e 	bl	4a5c <MPSL_IRQ_RADIO_Handler+0x3e4>
    6820:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    6824:	1a12      	subs	r2, r2, r0
    6826:	eb73 0201 	sbcs.w	r2, r3, r1
    682a:	bf24      	itt	cs
    682c:	f10b 0208 	addcs.w	r2, fp, #8
    6830:	e9c2 0100 	strdcs	r0, r1, [r2]
    6834:	4641      	mov	r1, r8
    6836:	2001      	movs	r0, #1
    6838:	f7fe fdd6 	bl	53e8 <MPSL_IRQ_RADIO_Handler+0xd70>
    683c:	0007      	movs	r7, r0
    683e:	d0f9      	beq.n	6834 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6840:	4820      	ldr	r0, [pc, #128]	; (68c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    6842:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    6846:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    684a:	2802      	cmp	r0, #2
    684c:	d104      	bne.n	6858 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    684e:	4642      	mov	r2, r8
    6850:	4649      	mov	r1, r9
    6852:	2006      	movs	r0, #6
    6854:	f7fe fd96 	bl	5384 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6858:	20ff      	movs	r0, #255	; 0xff
    685a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    685e:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    6862:	f8df 8064 	ldr.w	r8, [pc, #100]	; 68c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    6866:	2820      	cmp	r0, #32
    6868:	bf1c      	itt	ne
    686a:	f898 0001 	ldrbne.w	r0, [r8, #1]
    686e:	f001 fac5 	blne	7dfc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6872:	f894 0020 	ldrb.w	r0, [r4, #32]
    6876:	b128      	cbz	r0, 6884 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    6878:	f000 fe58 	bl	752c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    687c:	f884 5020 	strb.w	r5, [r4, #32]
    6880:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    6884:	2f02      	cmp	r7, #2
    6886:	d00f      	beq.n	68a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    6888:	2f01      	cmp	r7, #1
    688a:	bf18      	it	ne
    688c:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6890:	f04f 30ff 	mov.w	r0, #4294967295
    6894:	f8d8 1004 	ldr.w	r1, [r8, #4]
    6898:	2900      	cmp	r1, #0
    689a:	bf08      	it	eq
    689c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68a0:	b001      	add	sp, #4
    68a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68a6:	4708      	bx	r1
    68a8:	68a0      	ldr	r0, [r4, #8]
    68aa:	1b80      	subs	r0, r0, r6
    68ac:	f003 fe06 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    68b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    68b4:	2900      	cmp	r1, #0
    68b6:	d1f3      	bne.n	68a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    68b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68bc:	20000a10 	.word	0x20000a10
    68c0:	20000590 	.word	0x20000590
    68c4:	20000990 	.word	0x20000990
    68c8:	20000120 	.word	0x20000120

000068cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    68cc:	b570      	push	{r4, r5, r6, lr}
    68ce:	4c42      	ldr	r4, [pc, #264]	; (69d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    68d0:	4605      	mov	r5, r0
    68d2:	b082      	sub	sp, #8
    68d4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    68d8:	2820      	cmp	r0, #32
    68da:	d008      	beq.n	68ee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    68dc:	6860      	ldr	r0, [r4, #4]
    68de:	f1b0 3fff 	cmp.w	r0, #4294967295
    68e2:	d009      	beq.n	68f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    68e4:	f640 21b6 	movw	r1, #2742	; 0xab6
    68e8:	2070      	movs	r0, #112	; 0x70
    68ea:	f001 f9b5 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    68ee:	f640 21b5 	movw	r1, #2741	; 0xab5
    68f2:	2070      	movs	r0, #112	; 0x70
    68f4:	f001 f9b0 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    68f8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    68fc:	4937      	ldr	r1, [pc, #220]	; (69dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    68fe:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    6902:	68b0      	ldr	r0, [r6, #8]
    6904:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6908:	f003 fdd8 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    690c:	4602      	mov	r2, r0
    690e:	8af0      	ldrh	r0, [r6, #22]
    6910:	7d31      	ldrb	r1, [r6, #20]
    6912:	4b33      	ldr	r3, [pc, #204]	; (69e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    6914:	4408      	add	r0, r1
    6916:	1c40      	adds	r0, r0, #1
    6918:	1811      	adds	r1, r2, r0
    691a:	429a      	cmp	r2, r3
    691c:	d817      	bhi.n	694e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    691e:	4a31      	ldr	r2, [pc, #196]	; (69e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    6920:	4290      	cmp	r0, r2
    6922:	dc1b      	bgt.n	695c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    6924:	f1c2 0c00 	rsb	ip, r2, #0
    6928:	4560      	cmp	r0, ip
    692a:	db1e      	blt.n	696a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    692c:	0056      	lsls	r6, r2, #1
    692e:	428e      	cmp	r6, r1
    6930:	bfdc      	itt	le
    6932:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    6936:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    693a:	dd05      	ble.n	6948 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    693c:	2900      	cmp	r1, #0
    693e:	bfbc      	itt	lt
    6940:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    6944:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    6948:	1948      	adds	r0, r1, r5
    694a:	4299      	cmp	r1, r3
    694c:	d904      	bls.n	6958 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    694e:	f240 517f 	movw	r1, #1407	; 0x57f
    6952:	2070      	movs	r0, #112	; 0x70
    6954:	f001 f980 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6958:	4295      	cmp	r5, r2
    695a:	dd04      	ble.n	6966 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    695c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    6960:	2070      	movs	r0, #112	; 0x70
    6962:	f001 f979 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6966:	4565      	cmp	r5, ip
    6968:	da04      	bge.n	6974 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    696a:	f240 5181 	movw	r1, #1409	; 0x581
    696e:	2070      	movs	r0, #112	; 0x70
    6970:	f001 f972 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6974:	4286      	cmp	r6, r0
    6976:	bfdc      	itt	le
    6978:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    697c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    6980:	dd05      	ble.n	698e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    6982:	2800      	cmp	r0, #0
    6984:	bfbc      	itt	lt
    6986:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    698a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    698e:	aa01      	add	r2, sp, #4
    6990:	4669      	mov	r1, sp
    6992:	f000 f8eb 	bl	6b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6996:	f89d 0004 	ldrb.w	r0, [sp, #4]
    699a:	280f      	cmp	r0, #15
    699c:	bf8c      	ite	hi
    699e:	2001      	movhi	r0, #1
    69a0:	2000      	movls	r0, #0
    69a2:	9900      	ldr	r1, [sp, #0]
    69a4:	4408      	add	r0, r1
    69a6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    69aa:	6061      	str	r1, [r4, #4]
    69ac:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    69b0:	f88d 0000 	strb.w	r0, [sp]
    69b4:	f89d 0000 	ldrb.w	r0, [sp]
    69b8:	2800      	cmp	r0, #0
    69ba:	bf04      	itt	eq
    69bc:	b002      	addeq	sp, #8
    69be:	bd70      	popeq	{r4, r5, r6, pc}
    69c0:	2005      	movs	r0, #5
    69c2:	f000 fbd5 	bl	7170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    69c6:	2800      	cmp	r0, #0
    69c8:	bf1c      	itt	ne
    69ca:	b002      	addne	sp, #8
    69cc:	bd70      	popne	{r4, r5, r6, pc}
    69ce:	f640 21bd 	movw	r1, #2749	; 0xabd
    69d2:	2070      	movs	r0, #112	; 0x70
    69d4:	f001 f940 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69d8:	20000a10 	.word	0x20000a10
    69dc:	20000590 	.word	0x20000590
    69e0:	1e847fff 	.word	0x1e847fff
    69e4:	0f424000 	.word	0x0f424000

000069e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    69e8:	b570      	push	{r4, r5, r6, lr}
    69ea:	4c1e      	ldr	r4, [pc, #120]	; (6a64 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    69ec:	2120      	movs	r1, #32
    69ee:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    69f2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    69f6:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    69fa:	2000      	movs	r0, #0
    69fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    6a00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    6a04:	1e42      	subs	r2, r0, #1
    6a06:	e9c4 0200 	strd	r0, r2, [r4]
    6a0a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6a0e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    6a12:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    6a16:	f884 0020 	strb.w	r0, [r4, #32]
    6a1a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    6a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6a22:	1e41      	subs	r1, r0, #1
    6a24:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    6a28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6a2c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    6a30:	2210      	movs	r2, #16
    6a32:	7088      	strb	r0, [r1, #2]
    6a34:	f801 0f04 	strb.w	r0, [r1, #4]!
    6a38:	1e52      	subs	r2, r2, #1
    6a3a:	d1fa      	bne.n	6a32 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    6a3c:	f000 fda4 	bl	7588 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    6a40:	4d09      	ldr	r5, [pc, #36]	; (6a68 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    6a42:	2601      	movs	r6, #1
    6a44:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    6a48:	20ff      	movs	r0, #255	; 0xff
    6a4a:	7028      	strb	r0, [r5, #0]
    6a4c:	4807      	ldr	r0, [pc, #28]	; (6a6c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    6a4e:	f001 f9b7 	bl	7dc0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6a52:	7068      	strb	r0, [r5, #1]
    6a54:	f001 fa22 	bl	7e9c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    6a58:	60a8      	str	r0, [r5, #8]
    6a5a:	f000 fd27 	bl	74ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    6a5e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    6a62:	bd70      	pop	{r4, r5, r6, pc}
    6a64:	20000a10 	.word	0x20000a10
    6a68:	20000120 	.word	0x20000120
    6a6c:	000052b5 	.word	0x000052b5

00006a70 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    6a70:	0e03      	lsrs	r3, r0, #24
    6a72:	b430      	push	{r4, r5}
    6a74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6a78:	f8df c038 	ldr.w	ip, [pc, #56]	; 6ab4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    6a7c:	0e09      	lsrs	r1, r1, #24
    6a7e:	fba3 250c 	umull	r2, r5, r3, ip
    6a82:	fb01 510c 	mla	r1, r1, ip, r5
    6a86:	2400      	movs	r4, #0
    6a88:	fb03 1104 	mla	r1, r3, r4, r1
    6a8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    6a90:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    6a94:	f643 5c09 	movw	ip, #15625	; 0x3d09
    6a98:	fb13 f30c 	smulbb	r3, r3, ip
    6a9c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6aa0:	fb10 f00c 	smulbb	r0, r0, ip
    6aa4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    6aa8:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    6aac:	1880      	adds	r0, r0, r2
    6aae:	4161      	adcs	r1, r4
    6ab0:	bc30      	pop	{r4, r5}
    6ab2:	4770      	bx	lr
    6ab4:	1e848000 	.word	0x1e848000

00006ab8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    6ab8:	b570      	push	{r4, r5, r6, lr}
    6aba:	b084      	sub	sp, #16
    6abc:	4615      	mov	r5, r2
    6abe:	aa01      	add	r2, sp, #4
    6ac0:	461c      	mov	r4, r3
    6ac2:	9200      	str	r2, [sp, #0]
    6ac4:	9e08      	ldr	r6, [sp, #32]
    6ac6:	ab02      	add	r3, sp, #8
    6ac8:	4a17      	ldr	r2, [pc, #92]	; (6b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    6aca:	f003 fe78 	bl	a7be <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    6ace:	9801      	ldr	r0, [sp, #4]
    6ad0:	f248 6237 	movw	r2, #34359	; 0x8637
    6ad4:	0b41      	lsrs	r1, r0, #13
    6ad6:	4351      	muls	r1, r2
    6ad8:	0c09      	lsrs	r1, r1, #16
    6ada:	4a14      	ldr	r2, [pc, #80]	; (6b2c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    6adc:	024b      	lsls	r3, r1, #9
    6ade:	fb01 0102 	mla	r1, r1, r2, r0
    6ae2:	4813      	ldr	r0, [pc, #76]	; (6b30 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    6ae4:	4348      	muls	r0, r1
    6ae6:	0d42      	lsrs	r2, r0, #21
    6ae8:	1898      	adds	r0, r3, r2
    6aea:	f643 5309 	movw	r3, #15625	; 0x3d09
    6aee:	fb12 f303 	smulbb	r3, r2, r3
    6af2:	f503 7280 	add.w	r2, r3, #256	; 0x100
    6af6:	f643 5c08 	movw	ip, #15624	; 0x3d08
    6afa:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    6afe:	4463      	add	r3, ip
    6b00:	b2d2      	uxtb	r2, r2
    6b02:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    6b06:	bf84      	itt	hi
    6b08:	2200      	movhi	r2, #0
    6b0a:	1c40      	addhi	r0, r0, #1
    6b0c:	7032      	strb	r2, [r6, #0]
    6b0e:	9b02      	ldr	r3, [sp, #8]
    6b10:	0a19      	lsrs	r1, r3, #8
    6b12:	061b      	lsls	r3, r3, #24
    6b14:	1818      	adds	r0, r3, r0
    6b16:	f141 0100 	adc.w	r1, r1, #0
    6b1a:	e9c4 0100 	strd	r0, r1, [r4]
    6b1e:	9801      	ldr	r0, [sp, #4]
    6b20:	6028      	str	r0, [r5, #0]
    6b22:	b004      	add	sp, #16
    6b24:	bd70      	pop	{r4, r5, r6, pc}
    6b26:	0000      	.short	0x0000
    6b28:	1e848000 	.word	0x1e848000
    6b2c:	ffffc2f7 	.word	0xffffc2f7
    6b30:	00010c6f 	.word	0x00010c6f

00006b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    6b34:	0b41      	lsrs	r1, r0, #13
    6b36:	f248 6237 	movw	r2, #34359	; 0x8637
    6b3a:	4351      	muls	r1, r2
    6b3c:	0c0a      	lsrs	r2, r1, #16
    6b3e:	4b09      	ldr	r3, [pc, #36]	; (6b64 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    6b40:	0251      	lsls	r1, r2, #9
    6b42:	fb02 0203 	mla	r2, r2, r3, r0
    6b46:	4808      	ldr	r0, [pc, #32]	; (6b68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    6b48:	4350      	muls	r0, r2
    6b4a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    6b4e:	306e      	adds	r0, #110	; 0x6e
    6b50:	0d40      	lsrs	r0, r0, #21
    6b52:	425b      	negs	r3, r3
    6b54:	fb10 f303 	smulbb	r3, r0, r3
    6b58:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    6b5c:	bf88      	it	hi
    6b5e:	1c49      	addhi	r1, r1, #1
    6b60:	4408      	add	r0, r1
    6b62:	4770      	bx	lr
    6b64:	ffffc2f7 	.word	0xffffc2f7
    6b68:	00010c6f 	.word	0x00010c6f

00006b6c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    6b6c:	0b43      	lsrs	r3, r0, #13
    6b6e:	f248 6c37 	movw	ip, #34359	; 0x8637
    6b72:	fb03 f30c 	mul.w	r3, r3, ip
    6b76:	b430      	push	{r4, r5}
    6b78:	0c1b      	lsrs	r3, r3, #16
    6b7a:	f8df c044 	ldr.w	ip, [pc, #68]	; 6bc0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    6b7e:	025c      	lsls	r4, r3, #9
    6b80:	fb03 030c 	mla	r3, r3, ip, r0
    6b84:	480f      	ldr	r0, [pc, #60]	; (6bc4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    6b86:	4358      	muls	r0, r3
    6b88:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    6b8c:	eb04 000c 	add.w	r0, r4, ip
    6b90:	f643 5409 	movw	r4, #15625	; 0x3d09
    6b94:	fb1c f404 	smulbb	r4, ip, r4
    6b98:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    6b9c:	f643 5508 	movw	r5, #15624	; 0x3d08
    6ba0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    6ba4:	442c      	add	r4, r5
    6ba6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6baa:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    6bae:	bf84      	itt	hi
    6bb0:	f04f 0c00 	movhi.w	ip, #0
    6bb4:	1c40      	addhi	r0, r0, #1
    6bb6:	6008      	str	r0, [r1, #0]
    6bb8:	f882 c000 	strb.w	ip, [r2]
    6bbc:	bc30      	pop	{r4, r5}
    6bbe:	4770      	bx	lr
    6bc0:	ffffc2f7 	.word	0xffffc2f7
    6bc4:	00010c6f 	.word	0x00010c6f

00006bc8 <MPSL_IRQ_RTC0_Handler>:
    6bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bcc:	2400      	movs	r4, #0
    6bce:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6c50 <MPSL_IRQ_RTC0_Handler+0x88>
    6bd2:	4d20      	ldr	r5, [pc, #128]	; (6c54 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6bd4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    6bd8:	f44f 78a0 	mov.w	r8, #320	; 0x140
    6bdc:	ea4f 0604 	mov.w	r6, r4
    6be0:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    6be4:	fa07 f004 	lsl.w	r0, r7, r4
    6be8:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    6bec:	4202      	tst	r2, r0
    6bee:	d01a      	beq.n	6c26 <MPSL_IRQ_RTC0_Handler+0x5e>
    6bf0:	4a18      	ldr	r2, [pc, #96]	; (6c54 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6bf2:	5852      	ldr	r2, [r2, r1]
    6bf4:	b1ba      	cbz	r2, 6c26 <MPSL_IRQ_RTC0_Handler+0x5e>
    6bf6:	506e      	str	r6, [r5, r1]
    6bf8:	00a1      	lsls	r1, r4, #2
    6bfa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6bfe:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    6c02:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    6c06:	f8d9 2000 	ldr.w	r2, [r9]
    6c0a:	1a89      	subs	r1, r1, r2
    6c0c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6c10:	2902      	cmp	r1, #2
    6c12:	d302      	bcc.n	6c1a <MPSL_IRQ_RTC0_Handler+0x52>
    6c14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6c18:	d905      	bls.n	6c26 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c1a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6c1e:	1d20      	adds	r0, r4, #4
    6c20:	b2c0      	uxtb	r0, r0
    6c22:	f7fe fd8d 	bl	5740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6c26:	1c60      	adds	r0, r4, #1
    6c28:	b2c4      	uxtb	r4, r0
    6c2a:	2c03      	cmp	r4, #3
    6c2c:	d3d8      	bcc.n	6be0 <MPSL_IRQ_RTC0_Handler+0x18>
    6c2e:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    6c32:	b128      	cbz	r0, 6c40 <MPSL_IRQ_RTC0_Handler+0x78>
    6c34:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6c38:	4807      	ldr	r0, [pc, #28]	; (6c58 <MPSL_IRQ_RTC0_Handler+0x90>)
    6c3a:	6881      	ldr	r1, [r0, #8]
    6c3c:	1c49      	adds	r1, r1, #1
    6c3e:	6081      	str	r1, [r0, #8]
    6c40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6c44:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6c48:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    6c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c50:	4000b504 	.word	0x4000b504
    6c54:	4000b000 	.word	0x4000b000
    6c58:	20000028 	.word	0x20000028

00006c5c <MPSL_IRQ_TIMER0_Handler>:
    6c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c60:	4d38      	ldr	r5, [pc, #224]	; (6d44 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    6c62:	7828      	ldrb	r0, [r5, #0]
    6c64:	2804      	cmp	r0, #4
    6c66:	d068      	beq.n	6d3a <MPSL_IRQ_TIMER0_Handler+0xde>
    6c68:	1ca8      	adds	r0, r5, #2
    6c6a:	2201      	movs	r2, #1
    6c6c:	7801      	ldrb	r1, [r0, #0]
    6c6e:	b159      	cbz	r1, 6c88 <MPSL_IRQ_TIMER0_Handler+0x2c>
    6c70:	2901      	cmp	r1, #1
    6c72:	bf08      	it	eq
    6c74:	706a      	strbeq	r2, [r5, #1]
    6c76:	d002      	beq.n	6c7e <MPSL_IRQ_TIMER0_Handler+0x22>
    6c78:	7869      	ldrb	r1, [r5, #1]
    6c7a:	2900      	cmp	r1, #0
    6c7c:	d058      	beq.n	6d30 <MPSL_IRQ_TIMER0_Handler+0xd4>
    6c7e:	2102      	movs	r1, #2
    6c80:	7001      	strb	r1, [r0, #0]
    6c82:	7840      	ldrb	r0, [r0, #1]
    6c84:	f000 fb2e 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6c88:	4c2f      	ldr	r4, [pc, #188]	; (6d48 <MPSL_IRQ_TIMER0_Handler+0xec>)
    6c8a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6c8e:	f04f 0800 	mov.w	r8, #0
    6c92:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    6c96:	f44f 7780 	mov.w	r7, #256	; 0x100
    6c9a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    6c9e:	d00a      	beq.n	6cb6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    6ca0:	482a      	ldr	r0, [pc, #168]	; (6d4c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    6ca2:	6800      	ldr	r0, [r0, #0]
    6ca4:	b138      	cbz	r0, 6cb6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    6ca6:	2003      	movs	r0, #3
    6ca8:	f000 fb1c 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6cac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6cb0:	2003      	movs	r0, #3
    6cb2:	f7fe fd45 	bl	5740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6cb6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6cba:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    6cbe:	d00a      	beq.n	6cd6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    6cc0:	4823      	ldr	r0, [pc, #140]	; (6d50 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    6cc2:	6800      	ldr	r0, [r0, #0]
    6cc4:	b138      	cbz	r0, 6cd6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    6cc6:	2002      	movs	r0, #2
    6cc8:	f000 fb0c 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6ccc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6cd0:	2002      	movs	r0, #2
    6cd2:	f7fe fd35 	bl	5740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6cd6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6cda:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    6cde:	d00a      	beq.n	6cf6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    6ce0:	481c      	ldr	r0, [pc, #112]	; (6d54 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    6ce2:	6800      	ldr	r0, [r0, #0]
    6ce4:	b138      	cbz	r0, 6cf6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    6ce6:	2001      	movs	r0, #1
    6ce8:	f000 fafc 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6cec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6cf0:	2001      	movs	r0, #1
    6cf2:	f7fe fd25 	bl	5740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6cf6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6cfa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6cfe:	bf08      	it	eq
    6d00:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d04:	4814      	ldr	r0, [pc, #80]	; (6d58 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    6d06:	6800      	ldr	r0, [r0, #0]
    6d08:	2800      	cmp	r0, #0
    6d0a:	bf08      	it	eq
    6d0c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d10:	2000      	movs	r0, #0
    6d12:	f000 fae7 	bl	72e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d16:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d1a:	2004      	movs	r0, #4
    6d1c:	7028      	strb	r0, [r5, #0]
    6d1e:	f8c5 8004 	str.w	r8, [r5, #4]
    6d22:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    6d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d2a:	2000      	movs	r0, #0
    6d2c:	f7fe bd08 	b.w	5740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d30:	f240 5169 	movw	r1, #1385	; 0x569
    6d34:	206c      	movs	r0, #108	; 0x6c
    6d36:	f000 ff8f 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d3e:	2007      	movs	r0, #7
    6d40:	f7fe bcfe 	b.w	5740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d44:	20000028 	.word	0x20000028
    6d48:	40008000 	.word	0x40008000
    6d4c:	4000814c 	.word	0x4000814c
    6d50:	40008148 	.word	0x40008148
    6d54:	40008144 	.word	0x40008144
    6d58:	40008140 	.word	0x40008140
    6d5c:	2201      	movs	r2, #1
    6d5e:	0211      	lsls	r1, r2, #8
    6d60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6d64:	2000      	movs	r0, #0
    6d66:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6d6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    6d6e:	f3bf 8f4f 	dsb	sy
    6d72:	f3bf 8f6f 	isb	sy
    6d76:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6d7a:	490e      	ldr	r1, [pc, #56]	; (6db4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    6d7c:	f841 2f04 	str.w	r2, [r1, #4]!
    6d80:	1e43      	subs	r3, r0, #1
    6d82:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    6d86:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    6d8a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    6d8e:	4b0a      	ldr	r3, [pc, #40]	; (6db8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    6d90:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6d94:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    6d98:	1d1b      	adds	r3, r3, #4
    6d9a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6d9e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    6da2:	1d1b      	adds	r3, r3, #4
    6da4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6da8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    6dac:	60ca      	str	r2, [r1, #12]
    6dae:	4903      	ldr	r1, [pc, #12]	; (6dbc <MPSL_IRQ_TIMER0_Handler+0x160>)
    6db0:	7048      	strb	r0, [r1, #1]
    6db2:	4770      	bx	lr
    6db4:	40008000 	.word	0x40008000
    6db8:	40008004 	.word	0x40008004
    6dbc:	20000028 	.word	0x20000028

00006dc0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    6dc0:	4801      	ldr	r0, [pc, #4]	; (6dc8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    6dc2:	6800      	ldr	r0, [r0, #0]
    6dc4:	4770      	bx	lr
    6dc6:	0000      	.short	0x0000
    6dc8:	4000b504 	.word	0x4000b504

00006dcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    6dcc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6dd0:	f8df 8130 	ldr.w	r8, [pc, #304]	; 6f04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    6dd4:	4604      	mov	r4, r0
    6dd6:	f1a8 0702 	sub.w	r7, r8, #2
    6dda:	460e      	mov	r6, r1
    6ddc:	f898 c000 	ldrb.w	ip, [r8]
    6de0:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    6de4:	f1bc 0f01 	cmp.w	ip, #1
    6de8:	d106      	bne.n	6df8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    6dea:	ea81 0204 	eor.w	r2, r1, r4
    6dee:	4070      	eors	r0, r6
    6df0:	4310      	orrs	r0, r2
    6df2:	bf08      	it	eq
    6df4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6df8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6dfc:	4a42      	ldr	r2, [pc, #264]	; (6f08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    6dfe:	6010      	str	r0, [r2, #0]
    6e00:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    6e04:	f1bc 0f00 	cmp.w	ip, #0
    6e08:	bf07      	ittee	eq
    6e0a:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    6e0e:	2200      	moveq	r2, #0
    6e10:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    6e14:	2201      	movne	r2, #1
    6e16:	483d      	ldr	r0, [pc, #244]	; (6f0c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    6e18:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    6e1c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    6e20:	2500      	movs	r5, #0
    6e22:	f44f 79a0 	mov.w	r9, #320	; 0x140
    6e26:	2a02      	cmp	r2, #2
    6e28:	d207      	bcs.n	6e3a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    6e2a:	bf00      	nop
    6e2c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    6e30:	50c5      	str	r5, [r0, r3]
    6e32:	1c52      	adds	r2, r2, #1
    6e34:	b2d2      	uxtb	r2, r2
    6e36:	2a02      	cmp	r2, #2
    6e38:	d3f8      	bcc.n	6e2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    6e3a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    6e3e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    6e42:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    6e46:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    6e4a:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    6e4e:	4a30      	ldr	r2, [pc, #192]	; (6f10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    6e50:	f8d2 9000 	ldr.w	r9, [r2]
    6e54:	eba3 0909 	sub.w	r9, r3, r9
    6e58:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    6e5c:	f04f 0901 	mov.w	r9, #1
    6e60:	f1ba 0f02 	cmp.w	sl, #2
    6e64:	d32e      	bcc.n	6ec4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6e66:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    6e6a:	d82b      	bhi.n	6ec4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6e6c:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    6e70:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    6e74:	f1bc 0f00 	cmp.w	ip, #0
    6e78:	d005      	beq.n	6e86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    6e7a:	6810      	ldr	r0, [r2, #0]
    6e7c:	1a08      	subs	r0, r1, r0
    6e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6e82:	2802      	cmp	r0, #2
    6e84:	d3f9      	bcc.n	6e7a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    6e86:	f8c7 9004 	str.w	r9, [r7, #4]
    6e8a:	703d      	strb	r5, [r7, #0]
    6e8c:	f7ff ff66 	bl	6d5c <MPSL_IRQ_TIMER0_Handler+0x100>
    6e90:	4820      	ldr	r0, [pc, #128]	; (6f14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    6e92:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    6e96:	f365 0101 	bfi	r1, r5, #0, #2
    6e9a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    6e9e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    6ea2:	2102      	movs	r1, #2
    6ea4:	f361 0201 	bfi	r2, r1, #0, #2
    6ea8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    6eac:	2110      	movs	r1, #16
    6eae:	fa91 f1a1 	rbit	r1, r1
    6eb2:	fab1 f181 	clz	r1, r1
    6eb6:	2909      	cmp	r1, #9
    6eb8:	d909      	bls.n	6ece <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    6eba:	f240 3155 	movw	r1, #853	; 0x355
    6ebe:	a016      	add	r0, pc, #88	; (adr r0, 6f18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    6ec0:	f000 fe9e 	bl	7c00 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    6ec4:	f240 31b2 	movw	r1, #946	; 0x3b2
    6ec8:	206c      	movs	r0, #108	; 0x6c
    6eca:	f000 fec5 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6ece:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    6ed2:	f8c0 900c 	str.w	r9, [r0, #12]
    6ed6:	6879      	ldr	r1, [r7, #4]
    6ed8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6edc:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    6ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
    6ee4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    6ee8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6eec:	490d      	ldr	r1, [pc, #52]	; (6f24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    6eee:	0480      	lsls	r0, r0, #18
    6ef0:	6008      	str	r0, [r1, #0]
    6ef2:	e9c7 4604 	strd	r4, r6, [r7, #16]
    6ef6:	2004      	movs	r0, #4
    6ef8:	f888 0001 	strb.w	r0, [r8, #1]
    6efc:	f888 9000 	strb.w	r9, [r8]
    6f00:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6f04:	2000002a 	.word	0x2000002a
    6f08:	4001f508 	.word	0x4001f508
    6f0c:	4000b000 	.word	0x4000b000
    6f10:	4000b504 	.word	0x4000b504
    6f14:	40008000 	.word	0x40008000
    6f18:	5f66726e 	.word	0x5f66726e
    6f1c:	656d6974 	.word	0x656d6974
    6f20:	00682e72 	.word	0x00682e72
    6f24:	4001f504 	.word	0x4001f504

00006f28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    6f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f2c:	4c31      	ldr	r4, [pc, #196]	; (6ff4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    6f2e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6f32:	ea82 0c00 	eor.w	ip, r2, r0
    6f36:	404b      	eors	r3, r1
    6f38:	ea5c 0303 	orrs.w	r3, ip, r3
    6f3c:	bf14      	ite	ne
    6f3e:	2301      	movne	r3, #1
    6f40:	2300      	moveq	r3, #0
    6f42:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 6ff8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    6f46:	f89c 8000 	ldrb.w	r8, [ip]
    6f4a:	f1b8 0f02 	cmp.w	r8, #2
    6f4e:	d002      	beq.n	6f56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    6f50:	2b00      	cmp	r3, #0
    6f52:	d03f      	beq.n	6fd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    6f54:	e003      	b.n	6f5e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    6f56:	2b00      	cmp	r3, #0
    6f58:	bf08      	it	eq
    6f5a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f5e:	7863      	ldrb	r3, [r4, #1]
    6f60:	b3bb      	cbz	r3, 6fd2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    6f62:	4d26      	ldr	r5, [pc, #152]	; (6ffc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    6f64:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    6f68:	602b      	str	r3, [r5, #0]
    6f6a:	4e25      	ldr	r6, [pc, #148]	; (7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    6f6c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    6f70:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6f74:	462f      	mov	r7, r5
    6f76:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    6f7a:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    6f7e:	2500      	movs	r5, #0
    6f80:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    6f84:	4d1f      	ldr	r5, [pc, #124]	; (7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    6f86:	f8d5 9000 	ldr.w	r9, [r5]
    6f8a:	eba3 0909 	sub.w	r9, r3, r9
    6f8e:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    6f92:	f1b9 0f02 	cmp.w	r9, #2
    6f96:	d327      	bcc.n	6fe8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    6f98:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    6f9c:	d824      	bhi.n	6fe8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    6f9e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    6fa2:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    6fa6:	f1b8 0f00 	cmp.w	r8, #0
    6faa:	d005      	beq.n	6fb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    6fac:	682b      	ldr	r3, [r5, #0]
    6fae:	1ad3      	subs	r3, r2, r3
    6fb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6fb4:	2b02      	cmp	r3, #2
    6fb6:	d3f9      	bcc.n	6fac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    6fb8:	4d13      	ldr	r5, [pc, #76]	; (7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    6fba:	2202      	movs	r2, #2
    6fbc:	0753      	lsls	r3, r2, #29
    6fbe:	602b      	str	r3, [r5, #0]
    6fc0:	e9c4 0104 	strd	r0, r1, [r4, #16]
    6fc4:	2004      	movs	r0, #4
    6fc6:	f88c 0001 	strb.w	r0, [ip, #1]
    6fca:	f88c 2000 	strb.w	r2, [ip]
    6fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fd2:	e004      	b.n	6fde <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    6fd4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    6fd8:	206c      	movs	r0, #108	; 0x6c
    6fda:	f000 fe3d 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6fde:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    6fe2:	206c      	movs	r0, #108	; 0x6c
    6fe4:	f000 fe38 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6fe8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6fec:	206c      	movs	r0, #108	; 0x6c
    6fee:	f000 fe33 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6ff2:	0000      	.short	0x0000
    6ff4:	20000028 	.word	0x20000028
    6ff8:	2000002a 	.word	0x2000002a
    6ffc:	4001f508 	.word	0x4001f508
    7000:	4000b000 	.word	0x4000b000
    7004:	4000b504 	.word	0x4000b504
    7008:	4001f504 	.word	0x4001f504

0000700c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    700c:	4901      	ldr	r1, [pc, #4]	; (7014 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    700e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    7012:	4770      	bx	lr
    7014:	20000028 	.word	0x20000028

00007018 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    7018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    701c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 7114 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    7020:	f89c 4000 	ldrb.w	r4, [ip]
    7024:	2c00      	cmp	r4, #0
    7026:	bf07      	ittee	eq
    7028:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    702c:	2100      	moveq	r1, #0
    702e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    7032:	2101      	movne	r1, #1
    7034:	4838      	ldr	r0, [pc, #224]	; (7118 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    7036:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    703a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    703e:	2300      	movs	r3, #0
    7040:	2902      	cmp	r1, #2
    7042:	bf38      	it	cc
    7044:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    7048:	d207      	bcs.n	705a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    704a:	bf00      	nop
    704c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    7050:	5083      	str	r3, [r0, r2]
    7052:	1c49      	adds	r1, r1, #1
    7054:	b2c9      	uxtb	r1, r1
    7056:	2902      	cmp	r1, #2
    7058:	d3f8      	bcc.n	704c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    705a:	2c02      	cmp	r4, #2
    705c:	d004      	beq.n	7068 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    705e:	f240 31db 	movw	r1, #987	; 0x3db
    7062:	206c      	movs	r0, #108	; 0x6c
    7064:	f000 fdf8 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7068:	f3ef 8210 	mrs	r2, PRIMASK
    706c:	b672      	cpsid	i
    706e:	4c2b      	ldr	r4, [pc, #172]	; (711c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    7070:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    7074:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    7078:	b12d      	cbz	r5, 7086 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    707a:	68a1      	ldr	r1, [r4, #8]
    707c:	1c49      	adds	r1, r1, #1
    707e:	60a1      	str	r1, [r4, #8]
    7080:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7084:	e7f4      	b.n	7070 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    7086:	68a0      	ldr	r0, [r4, #8]
    7088:	b902      	cbnz	r2, 708c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    708a:	b662      	cpsie	i
    708c:	0a02      	lsrs	r2, r0, #8
    708e:	0600      	lsls	r0, r0, #24
    7090:	1840      	adds	r0, r0, r1
    7092:	eb42 0103 	adc.w	r1, r2, r3
    7096:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    709a:	1cc0      	adds	r0, r0, #3
    709c:	f141 0100 	adc.w	r1, r1, #0
    70a0:	4f1f      	ldr	r7, [pc, #124]	; (7120 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    70a2:	2601      	movs	r6, #1
    70a4:	4d1f      	ldr	r5, [pc, #124]	; (7124 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    70a6:	ea80 0902 	eor.w	r9, r0, r2
    70aa:	ea81 0808 	eor.w	r8, r1, r8
    70ae:	ea59 0808 	orrs.w	r8, r9, r8
    70b2:	d00e      	beq.n	70d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    70b4:	f8d7 8000 	ldr.w	r8, [r7]
    70b8:	eba2 0808 	sub.w	r8, r2, r8
    70bc:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    70c0:	f1b8 0f04 	cmp.w	r8, #4
    70c4:	d305      	bcc.n	70d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    70c6:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    70ca:	d802      	bhi.n	70d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    70cc:	f7ff fe7e 	bl	6dcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    70d0:	e01b      	b.n	710a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    70d2:	6838      	ldr	r0, [r7, #0]
    70d4:	1a10      	subs	r0, r2, r0
    70d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    70da:	2802      	cmp	r0, #2
    70dc:	d313      	bcc.n	7106 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    70de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    70e2:	d810      	bhi.n	7106 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    70e4:	4910      	ldr	r1, [pc, #64]	; (7128 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    70e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    70ea:	6008      	str	r0, [r1, #0]
    70ec:	6066      	str	r6, [r4, #4]
    70ee:	7023      	strb	r3, [r4, #0]
    70f0:	606e      	str	r6, [r5, #4]
    70f2:	60ee      	str	r6, [r5, #12]
    70f4:	0040      	lsls	r0, r0, #1
    70f6:	1f09      	subs	r1, r1, #4
    70f8:	6008      	str	r0, [r1, #0]
    70fa:	2004      	movs	r0, #4
    70fc:	f88c 0001 	strb.w	r0, [ip, #1]
    7100:	f88c 6000 	strb.w	r6, [ip]
    7104:	e001      	b.n	710a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7106:	6066      	str	r6, [r4, #4]
    7108:	7023      	strb	r3, [r4, #0]
    710a:	6860      	ldr	r0, [r4, #4]
    710c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7114:	2000002a 	.word	0x2000002a
    7118:	4000b000 	.word	0x4000b000
    711c:	20000028 	.word	0x20000028
    7120:	4000b504 	.word	0x4000b504
    7124:	40008000 	.word	0x40008000
    7128:	4001f508 	.word	0x4001f508

0000712c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    712c:	b410      	push	{r4}
    712e:	f3ef 8410 	mrs	r4, PRIMASK
    7132:	b672      	cpsid	i
    7134:	4a0c      	ldr	r2, [pc, #48]	; (7168 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    7136:	490d      	ldr	r1, [pc, #52]	; (716c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    7138:	f04f 0c00 	mov.w	ip, #0
    713c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    7140:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    7144:	b12b      	cbz	r3, 7152 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    7146:	6888      	ldr	r0, [r1, #8]
    7148:	1c40      	adds	r0, r0, #1
    714a:	6088      	str	r0, [r1, #8]
    714c:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    7150:	e7f4      	b.n	713c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    7152:	6889      	ldr	r1, [r1, #8]
    7154:	b904      	cbnz	r4, 7158 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    7156:	b662      	cpsie	i
    7158:	0a0a      	lsrs	r2, r1, #8
    715a:	0609      	lsls	r1, r1, #24
    715c:	1808      	adds	r0, r1, r0
    715e:	bc10      	pop	{r4}
    7160:	eb42 010c 	adc.w	r1, r2, ip
    7164:	4770      	bx	lr
    7166:	0000      	.short	0x0000
    7168:	4000b000 	.word	0x4000b000
    716c:	20000028 	.word	0x20000028

00007170 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    7170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7174:	4a56      	ldr	r2, [pc, #344]	; (72d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    7176:	2501      	movs	r5, #1
    7178:	2400      	movs	r4, #0
    717a:	f892 c000 	ldrb.w	ip, [r2]
    717e:	7852      	ldrb	r2, [r2, #1]
    7180:	f44f 76a0 	mov.w	r6, #320	; 0x140
    7184:	2807      	cmp	r0, #7
    7186:	d27d      	bcs.n	7284 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    7188:	e8df f000 	tbb	[pc, r0]
    718c:	04040404 	.word	0x04040404
    7190:	00606060 	.word	0x00606060
    7194:	4b4f      	ldr	r3, [pc, #316]	; (72d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    7196:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    719a:	43ff      	mvns	r7, r7
    719c:	ea77 0708 	orns	r7, r7, r8
    71a0:	bf04      	itt	eq
    71a2:	785b      	ldrbeq	r3, [r3, #1]
    71a4:	2b00      	cmpeq	r3, #0
    71a6:	d003      	beq.n	71b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    71a8:	f1bc 0f02 	cmp.w	ip, #2
    71ac:	d005      	beq.n	71ba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    71ae:	e026      	b.n	71fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    71b0:	f44f 6186 	mov.w	r1, #1072	; 0x430
    71b4:	206c      	movs	r0, #108	; 0x6c
    71b6:	f000 fd4f 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    71ba:	1f13      	subs	r3, r2, #4
    71bc:	b2db      	uxtb	r3, r3
    71be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    71c2:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    71c6:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    71ca:	2300      	movs	r3, #0
    71cc:	f1bc 0f01 	cmp.w	ip, #1
    71d0:	d003      	beq.n	71da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    71d2:	f1bc 0f02 	cmp.w	ip, #2
    71d6:	d008      	beq.n	71ea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    71d8:	e00e      	b.n	71f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    71da:	2a04      	cmp	r2, #4
    71dc:	bf24      	itt	cs
    71de:	6837      	ldrcs	r7, [r6, #0]
    71e0:	2f00      	cmpcs	r7, #0
    71e2:	bf08      	it	eq
    71e4:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    71e8:	e006      	b.n	71f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    71ea:	2a04      	cmp	r2, #4
    71ec:	bf24      	itt	cs
    71ee:	6837      	ldrcs	r7, [r6, #0]
    71f0:	2f00      	cmpcs	r7, #0
    71f2:	bf08      	it	eq
    71f4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    71f8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    71fc:	d1e5      	bne.n	71ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    71fe:	4b36      	ldr	r3, [pc, #216]	; (72d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    7200:	f100 0210 	add.w	r2, r0, #16
    7204:	fa05 f202 	lsl.w	r2, r5, r2
    7208:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    720c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    7210:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    7214:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    7218:	449c      	add	ip, r3
    721a:	f8cc 5000 	str.w	r5, [ip]
    721e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7222:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    7226:	eba1 0c0c 	sub.w	ip, r1, ip
    722a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    722e:	f1bc 0f03 	cmp.w	ip, #3
    7232:	bf3e      	ittt	cc
    7234:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    7238:	2000      	movcc	r0, #0
    723a:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    723e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    7242:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    7246:	2001      	movs	r0, #1
    7248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    724c:	f1bc 0f00 	cmp.w	ip, #0
    7250:	d006      	beq.n	7260 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    7252:	4282      	cmp	r2, r0
    7254:	d104      	bne.n	7260 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    7256:	f44f 618a 	mov.w	r1, #1104	; 0x450
    725a:	206c      	movs	r0, #108	; 0x6c
    725c:	f000 fcfc 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7260:	1f00      	subs	r0, r0, #4
    7262:	b2c2      	uxtb	r2, r0
    7264:	2a03      	cmp	r2, #3
    7266:	d304      	bcc.n	7272 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    7268:	f44f 7127 	mov.w	r1, #668	; 0x29c
    726c:	206c      	movs	r0, #108	; 0x6c
    726e:	f000 fcf3 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7272:	4b1a      	ldr	r3, [pc, #104]	; (72dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    7274:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    7278:	4090      	lsls	r0, r2
    727a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    727e:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    7282:	e000      	b.n	7286 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    7284:	e01f      	b.n	72c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    7286:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    728a:	f843 400c 	str.w	r4, [r3, ip]
    728e:	f8df c050 	ldr.w	ip, [pc, #80]	; 72e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    7292:	f8dc c000 	ldr.w	ip, [ip]
    7296:	eba1 0c0c 	sub.w	ip, r1, ip
    729a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    729e:	f1bc 0f02 	cmp.w	ip, #2
    72a2:	d30d      	bcc.n	72c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    72a4:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    72a8:	d80a      	bhi.n	72c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    72aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    72ae:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    72b2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    72b6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    72ba:	4628      	mov	r0, r5
    72bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72c0:	4620      	mov	r0, r4
    72c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72c6:	f240 4154 	movw	r1, #1108	; 0x454
    72ca:	206c      	movs	r0, #108	; 0x6c
    72cc:	f000 fcc4 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    72d0:	2000002a 	.word	0x2000002a
    72d4:	20000028 	.word	0x20000028
    72d8:	40008000 	.word	0x40008000
    72dc:	4000b000 	.word	0x4000b000
    72e0:	4000b504 	.word	0x4000b504

000072e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    72e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72e6:	2101      	movs	r1, #1
    72e8:	2600      	movs	r6, #0
    72ea:	f44f 77a0 	mov.w	r7, #320	; 0x140
    72ee:	2807      	cmp	r0, #7
    72f0:	d24a      	bcs.n	7388 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    72f2:	e8df f000 	tbb	[pc, r0]
    72f6:	0404      	.short	0x0404
    72f8:	18180404 	.word	0x18180404
    72fc:	0018      	.short	0x0018
    72fe:	f100 0210 	add.w	r2, r0, #16
    7302:	fa01 f202 	lsl.w	r2, r1, r2
    7306:	4923      	ldr	r1, [pc, #140]	; (7394 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    7308:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    730c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    7310:	2200      	movs	r2, #0
    7312:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    7316:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    731a:	508e      	str	r6, [r1, r2]
    731c:	491e      	ldr	r1, [pc, #120]	; (7398 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    731e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7322:	9000      	str	r0, [sp, #0]
    7324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7326:	4d1d      	ldr	r5, [pc, #116]	; (739c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    7328:	1f01      	subs	r1, r0, #4
    732a:	b2cc      	uxtb	r4, r1
    732c:	7829      	ldrb	r1, [r5, #0]
    732e:	b181      	cbz	r1, 7352 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    7330:	786a      	ldrb	r2, [r5, #1]
    7332:	4282      	cmp	r2, r0
    7334:	d10d      	bne.n	7352 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    7336:	4a1a      	ldr	r2, [pc, #104]	; (73a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    7338:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    733c:	6010      	str	r0, [r2, #0]
    733e:	2901      	cmp	r1, #1
    7340:	bf08      	it	eq
    7342:	f7ff fd0b 	bleq	6d5c <MPSL_IRQ_TIMER0_Handler+0x100>
    7346:	702e      	strb	r6, [r5, #0]
    7348:	4a16      	ldr	r2, [pc, #88]	; (73a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    734a:	f04f 30ff 	mov.w	r0, #4294967295
    734e:	e9c2 0004 	strd	r0, r0, [r2, #16]
    7352:	4915      	ldr	r1, [pc, #84]	; (73a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    7354:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    7358:	40a0      	lsls	r0, r4
    735a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    735e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    7362:	00a0      	lsls	r0, r4, #2
    7364:	4408      	add	r0, r1
    7366:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    736a:	4a10      	ldr	r2, [pc, #64]	; (73ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    736c:	6812      	ldr	r2, [r2, #0]
    736e:	1a80      	subs	r0, r0, r2
    7370:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7374:	2802      	cmp	r0, #2
    7376:	bf24      	itt	cs
    7378:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    737c:	500e      	strcs	r6, [r1, r0]
    737e:	480c      	ldr	r0, [pc, #48]	; (73b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    7380:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    7384:	9000      	str	r0, [sp, #0]
    7386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7388:	f240 41e2 	movw	r1, #1250	; 0x4e2
    738c:	206c      	movs	r0, #108	; 0x6c
    738e:	f000 fc63 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7392:	0000      	.short	0x0000
    7394:	40008000 	.word	0x40008000
    7398:	40008140 	.word	0x40008140
    739c:	2000002a 	.word	0x2000002a
    73a0:	4001f508 	.word	0x4001f508
    73a4:	20000028 	.word	0x20000028
    73a8:	4000b000 	.word	0x4000b000
    73ac:	4000b504 	.word	0x4000b504
    73b0:	4000b140 	.word	0x4000b140

000073b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    73b4:	481a      	ldr	r0, [pc, #104]	; (7420 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    73b6:	7800      	ldrb	r0, [r0, #0]
    73b8:	2800      	cmp	r0, #0
    73ba:	bf07      	ittee	eq
    73bc:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    73c0:	2100      	moveq	r1, #0
    73c2:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    73c6:	2101      	movne	r1, #1
    73c8:	4a16      	ldr	r2, [pc, #88]	; (7424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    73ca:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    73ce:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    73d2:	2000      	movs	r0, #0
    73d4:	2902      	cmp	r1, #2
    73d6:	bf38      	it	cc
    73d8:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    73dc:	d207      	bcs.n	73ee <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    73de:	bf00      	nop
    73e0:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    73e4:	50d0      	str	r0, [r2, r3]
    73e6:	1c49      	adds	r1, r1, #1
    73e8:	b2c9      	uxtb	r1, r1
    73ea:	2902      	cmp	r1, #2
    73ec:	d3f8      	bcc.n	73e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    73ee:	490e      	ldr	r1, [pc, #56]	; (7428 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    73f0:	f04f 32ff 	mov.w	r2, #4294967295
    73f4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    73f8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    73fc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    7400:	1d0a      	adds	r2, r1, #4
    7402:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7406:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    740a:	1d12      	adds	r2, r2, #4
    740c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7410:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    7414:	1d12      	adds	r2, r2, #4
    7416:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    741a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    741e:	4770      	bx	lr
    7420:	2000002a 	.word	0x2000002a
    7424:	4000b000 	.word	0x4000b000
    7428:	40008000 	.word	0x40008000

0000742c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    742c:	b570      	push	{r4, r5, r6, lr}
    742e:	f3ef 8110 	mrs	r1, PRIMASK
    7432:	b672      	cpsid	i
    7434:	2400      	movs	r4, #0
    7436:	4b0d      	ldr	r3, [pc, #52]	; (746c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    7438:	4a0d      	ldr	r2, [pc, #52]	; (7470 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    743a:	bf00      	nop
    743c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    7440:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    7444:	f1bc 0f00 	cmp.w	ip, #0
    7448:	d005      	beq.n	7456 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    744a:	6890      	ldr	r0, [r2, #8]
    744c:	1c40      	adds	r0, r0, #1
    744e:	6090      	str	r0, [r2, #8]
    7450:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    7454:	e7f2      	b.n	743c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    7456:	6895      	ldr	r5, [r2, #8]
    7458:	b901      	cbnz	r1, 745c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    745a:	b662      	cpsie	i
    745c:	f003 f82e 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    7460:	4a04      	ldr	r2, [pc, #16]	; (7474 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    7462:	4621      	mov	r1, r4
    7464:	fbe5 0102 	umlal	r0, r1, r5, r2
    7468:	bd70      	pop	{r4, r5, r6, pc}
    746a:	0000      	.short	0x0000
    746c:	4000b000 	.word	0x4000b000
    7470:	20000028 	.word	0x20000028
    7474:	1e848000 	.word	0x1e848000

00007478 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    7478:	b510      	push	{r4, lr}
    747a:	2807      	cmp	r0, #7
    747c:	d20d      	bcs.n	749a <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    747e:	e8df f000 	tbb	[pc, r0]
    7482:	0404      	.short	0x0404
    7484:	06060404 	.word	0x06060404
    7488:	0006      	.short	0x0006
    748a:	4906      	ldr	r1, [pc, #24]	; (74a4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    748c:	e002      	b.n	7494 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    748e:	1f00      	subs	r0, r0, #4
    7490:	4905      	ldr	r1, [pc, #20]	; (74a8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    7492:	b2c0      	uxtb	r0, r0
    7494:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7498:	bd10      	pop	{r4, pc}
    749a:	f240 417b 	movw	r1, #1147	; 0x47b
    749e:	206c      	movs	r0, #108	; 0x6c
    74a0:	f000 fbda 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    74a4:	40008140 	.word	0x40008140
    74a8:	4000b140 	.word	0x4000b140

000074ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    74ac:	b570      	push	{r4, r5, r6, lr}
    74ae:	481b      	ldr	r0, [pc, #108]	; (751c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    74b0:	2400      	movs	r4, #0
    74b2:	2104      	movs	r1, #4
    74b4:	7004      	strb	r4, [r0, #0]
    74b6:	1e80      	subs	r0, r0, #2
    74b8:	7001      	strb	r1, [r0, #0]
    74ba:	1f49      	subs	r1, r1, #5
    74bc:	e9c0 1104 	strd	r1, r1, [r0, #16]
    74c0:	6084      	str	r4, [r0, #8]
    74c2:	f7ff fc4b 	bl	6d5c <MPSL_IRQ_TIMER0_Handler+0x100>
    74c6:	2501      	movs	r5, #1
    74c8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    74cc:	02eb      	lsls	r3, r5, #11
    74ce:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    74d2:	f3bf 8f4f 	dsb	sy
    74d6:	f3bf 8f6f 	isb	sy
    74da:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    74de:	4a10      	ldr	r2, [pc, #64]	; (7520 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    74e0:	6055      	str	r5, [r2, #4]
    74e2:	6095      	str	r5, [r2, #8]
    74e4:	480f      	ldr	r0, [pc, #60]	; (7524 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    74e6:	6801      	ldr	r1, [r0, #0]
    74e8:	2900      	cmp	r1, #0
    74ea:	d1fc      	bne.n	74e6 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    74ec:	480e      	ldr	r0, [pc, #56]	; (7528 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    74ee:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    74f2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    74f6:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    74fa:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    74fe:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    7502:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    7506:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    750a:	6015      	str	r5, [r2, #0]
    750c:	f44f 7082 	mov.w	r0, #260	; 0x104
    7510:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    7514:	2002      	movs	r0, #2
    7516:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    751a:	bd70      	pop	{r4, r5, r6, pc}
    751c:	2000002a 	.word	0x2000002a
    7520:	4000b000 	.word	0x4000b000
    7524:	4000b504 	.word	0x4000b504
    7528:	00070002 	.word	0x00070002

0000752c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    752c:	4808      	ldr	r0, [pc, #32]	; (7550 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    752e:	f990 0000 	ldrsb.w	r0, [r0]
    7532:	2800      	cmp	r0, #0
    7534:	bfb8      	it	lt
    7536:	4770      	bxlt	lr
    7538:	f000 011f 	and.w	r1, r0, #31
    753c:	2201      	movs	r2, #1
    753e:	fa02 f101 	lsl.w	r1, r2, r1
    7542:	0940      	lsrs	r0, r0, #5
    7544:	0080      	lsls	r0, r0, #2
    7546:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    754a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    754e:	4770      	bx	lr
    7550:	20000198 	.word	0x20000198

00007554 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    7554:	4803      	ldr	r0, [pc, #12]	; (7564 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    7556:	7800      	ldrb	r0, [r0, #0]
    7558:	2803      	cmp	r0, #3
    755a:	bf0c      	ite	eq
    755c:	2001      	moveq	r0, #1
    755e:	2000      	movne	r0, #0
    7560:	4770      	bx	lr
    7562:	0000      	.short	0x0000
    7564:	20000170 	.word	0x20000170

00007568 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    7568:	4801      	ldr	r0, [pc, #4]	; (7570 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    756a:	8840      	ldrh	r0, [r0, #2]
    756c:	4770      	bx	lr
    756e:	0000      	.short	0x0000
    7570:	20000170 	.word	0x20000170

00007574 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    7574:	4803      	ldr	r0, [pc, #12]	; (7584 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    7576:	7800      	ldrb	r0, [r0, #0]
    7578:	2802      	cmp	r0, #2
    757a:	bf16      	itet	ne
    757c:	2803      	cmpne	r0, #3
    757e:	2001      	moveq	r0, #1
    7580:	2000      	movne	r0, #0
    7582:	4770      	bx	lr
    7584:	20000170 	.word	0x20000170

00007588 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    7588:	4802      	ldr	r0, [pc, #8]	; (7594 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    758a:	2100      	movs	r1, #0
    758c:	7001      	strb	r1, [r0, #0]
    758e:	8041      	strh	r1, [r0, #2]
    7590:	4770      	bx	lr
    7592:	0000      	.short	0x0000
    7594:	20000170 	.word	0x20000170

00007598 <MPSL_IRQ_CLOCK_Handler>:
    7598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    759c:	4c16      	ldr	r4, [pc, #88]	; (75f8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    759e:	7a60      	ldrb	r0, [r4, #9]
    75a0:	2800      	cmp	r0, #0
    75a2:	d027      	beq.n	75f4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    75a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    75a8:	058d      	lsls	r5, r1, #22
    75aa:	4628      	mov	r0, r5
    75ac:	f002 ffb1 	bl	a512 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    75b0:	4680      	mov	r8, r0
    75b2:	f44f 7182 	mov.w	r1, #260	; 0x104
    75b6:	4628      	mov	r0, r5
    75b8:	f002 ffab 	bl	a512 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    75bc:	2600      	movs	r6, #0
    75be:	4607      	mov	r7, r0
    75c0:	f1b8 0f00 	cmp.w	r8, #0
    75c4:	d009      	beq.n	75da <MPSL_IRQ_CLOCK_Handler+0x42>
    75c6:	2001      	movs	r0, #1
    75c8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    75cc:	7920      	ldrb	r0, [r4, #4]
    75ce:	b120      	cbz	r0, 75da <MPSL_IRQ_CLOCK_Handler+0x42>
    75d0:	7126      	strb	r6, [r4, #4]
    75d2:	69e0      	ldr	r0, [r4, #28]
    75d4:	b108      	cbz	r0, 75da <MPSL_IRQ_CLOCK_Handler+0x42>
    75d6:	4780      	blx	r0
    75d8:	61e6      	str	r6, [r4, #28]
    75da:	b137      	cbz	r7, 75ea <MPSL_IRQ_CLOCK_Handler+0x52>
    75dc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    75e0:	2002      	movs	r0, #2
    75e2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    75e6:	f000 fa57 	bl	7a98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    75ea:	4640      	mov	r0, r8
    75ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75f0:	f000 b858 	b.w	76a4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    75f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75f8:	2000012c 	.word	0x2000012c
    75fc:	b510      	push	{r4, lr}
    75fe:	f003 f832 	bl	a666 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    7602:	b930      	cbnz	r0, 7612 <MPSL_IRQ_CLOCK_Handler+0x7a>
    7604:	f003 f850 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7608:	b918      	cbnz	r0, 7612 <MPSL_IRQ_CLOCK_Handler+0x7a>
    760a:	f003 f883 	bl	a714 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    760e:	2800      	cmp	r0, #0
    7610:	d002      	beq.n	7618 <MPSL_IRQ_CLOCK_Handler+0x80>
    7612:	4902      	ldr	r1, [pc, #8]	; (761c <MPSL_IRQ_CLOCK_Handler+0x84>)
    7614:	2002      	movs	r0, #2
    7616:	6008      	str	r0, [r1, #0]
    7618:	bd10      	pop	{r4, pc}
    761a:	0000      	.short	0x0000
    761c:	40000c34 	.word	0x40000c34
    7620:	b570      	push	{r4, r5, r6, lr}
    7622:	f000 f99b 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7626:	f000 fa9f 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    762a:	4c09      	ldr	r4, [pc, #36]	; (7650 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    762c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7630:	b130      	cbz	r0, 7640 <MPSL_IRQ_CLOCK_Handler+0xa8>
    7632:	f7ff ffe3 	bl	75fc <MPSL_IRQ_CLOCK_Handler+0x64>
    7636:	2001      	movs	r0, #1
    7638:	6128      	str	r0, [r5, #16]
    763a:	2004      	movs	r0, #4
    763c:	72a0      	strb	r0, [r4, #10]
    763e:	e004      	b.n	764a <MPSL_IRQ_CLOCK_Handler+0xb2>
    7640:	2003      	movs	r0, #3
    7642:	72a0      	strb	r0, [r4, #10]
    7644:	2001      	movs	r0, #1
    7646:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    764a:	2000      	movs	r0, #0
    764c:	71e0      	strb	r0, [r4, #7]
    764e:	bd70      	pop	{r4, r5, r6, pc}
    7650:	2000012c 	.word	0x2000012c
    7654:	b570      	push	{r4, r5, r6, lr}
    7656:	4c12      	ldr	r4, [pc, #72]	; (76a0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    7658:	79a0      	ldrb	r0, [r4, #6]
    765a:	b1e0      	cbz	r0, 7696 <MPSL_IRQ_CLOCK_Handler+0xfe>
    765c:	79e1      	ldrb	r1, [r4, #7]
    765e:	1e40      	subs	r0, r0, #1
    7660:	4281      	cmp	r1, r0
    7662:	da18      	bge.n	7696 <MPSL_IRQ_CLOCK_Handler+0xfe>
    7664:	f000 fa80 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7668:	4605      	mov	r5, r0
    766a:	f000 fb69 	bl	7d40 <mpsl_temperature_get>
    766e:	79a1      	ldrb	r1, [r4, #6]
    7670:	2901      	cmp	r1, #1
    7672:	d902      	bls.n	767a <MPSL_IRQ_CLOCK_Handler+0xe2>
    7674:	79e1      	ldrb	r1, [r4, #7]
    7676:	1c49      	adds	r1, r1, #1
    7678:	71e1      	strb	r1, [r4, #7]
    767a:	b10d      	cbz	r5, 7680 <MPSL_IRQ_CLOCK_Handler+0xe8>
    767c:	6961      	ldr	r1, [r4, #20]
    767e:	e000      	b.n	7682 <MPSL_IRQ_CLOCK_Handler+0xea>
    7680:	6921      	ldr	r1, [r4, #16]
    7682:	1a41      	subs	r1, r0, r1
    7684:	2902      	cmp	r1, #2
    7686:	da02      	bge.n	768e <MPSL_IRQ_CLOCK_Handler+0xf6>
    7688:	f111 0f02 	cmn.w	r1, #2
    768c:	dc07      	bgt.n	769e <MPSL_IRQ_CLOCK_Handler+0x106>
    768e:	b10d      	cbz	r5, 7694 <MPSL_IRQ_CLOCK_Handler+0xfc>
    7690:	6160      	str	r0, [r4, #20]
    7692:	e000      	b.n	7696 <MPSL_IRQ_CLOCK_Handler+0xfe>
    7694:	6120      	str	r0, [r4, #16]
    7696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    769a:	f7ff bfc1 	b.w	7620 <MPSL_IRQ_CLOCK_Handler+0x88>
    769e:	bd70      	pop	{r4, r5, r6, pc}
    76a0:	2000012c 	.word	0x2000012c
    76a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    76a8:	4606      	mov	r6, r0
    76aa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    76ae:	f44f 7186 	mov.w	r1, #268	; 0x10c
    76b2:	4628      	mov	r0, r5
    76b4:	f002 ff2d 	bl	a512 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    76b8:	4680      	mov	r8, r0
    76ba:	f44f 7188 	mov.w	r1, #272	; 0x110
    76be:	4628      	mov	r0, r5
    76c0:	f002 ff27 	bl	a512 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    76c4:	4c27      	ldr	r4, [pc, #156]	; (7764 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    76c6:	4682      	mov	sl, r0
    76c8:	7827      	ldrb	r7, [r4, #0]
    76ca:	f104 0008 	add.w	r0, r4, #8
    76ce:	f002 ff94 	bl	a5fa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    76d2:	b110      	cbz	r0, 76da <MPSL_IRQ_CLOCK_Handler+0x142>
    76d4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    76d8:	e016      	b.n	7708 <MPSL_IRQ_CLOCK_Handler+0x170>
    76da:	f04f 0901 	mov.w	r9, #1
    76de:	b146      	cbz	r6, 76f2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    76e0:	7aa0      	ldrb	r0, [r4, #10]
    76e2:	2803      	cmp	r0, #3
    76e4:	d105      	bne.n	76f2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    76e6:	2004      	movs	r0, #4
    76e8:	72a0      	strb	r0, [r4, #10]
    76ea:	f7ff ff87 	bl	75fc <MPSL_IRQ_CLOCK_Handler+0x64>
    76ee:	f8c5 9010 	str.w	r9, [r5, #16]
    76f2:	2600      	movs	r6, #0
    76f4:	f1b8 0f00 	cmp.w	r8, #0
    76f8:	d018      	beq.n	772c <MPSL_IRQ_CLOCK_Handler+0x194>
    76fa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    76fe:	7aa0      	ldrb	r0, [r4, #10]
    7700:	2804      	cmp	r0, #4
    7702:	d004      	beq.n	770e <MPSL_IRQ_CLOCK_Handler+0x176>
    7704:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    7708:	206d      	movs	r0, #109	; 0x6d
    770a:	f000 faa5 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    770e:	f002 ffaa 	bl	a666 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    7712:	b928      	cbnz	r0, 7720 <MPSL_IRQ_CLOCK_Handler+0x188>
    7714:	f002 ffc8 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7718:	b910      	cbnz	r0, 7720 <MPSL_IRQ_CLOCK_Handler+0x188>
    771a:	f002 fffb 	bl	a714 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    771e:	b108      	cbz	r0, 7724 <MPSL_IRQ_CLOCK_Handler+0x18c>
    7720:	4811      	ldr	r0, [pc, #68]	; (7768 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    7722:	6006      	str	r6, [r0, #0]
    7724:	2002      	movs	r0, #2
    7726:	72a0      	strb	r0, [r4, #10]
    7728:	f000 f8fc 	bl	7924 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    772c:	f1ba 0f00 	cmp.w	sl, #0
    7730:	d008      	beq.n	7744 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    7732:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    7736:	7aa0      	ldrb	r0, [r4, #10]
    7738:	2802      	cmp	r0, #2
    773a:	d101      	bne.n	7740 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    773c:	f7ff ff8a 	bl	7654 <MPSL_IRQ_CLOCK_Handler+0xbc>
    7740:	f8c5 9014 	str.w	r9, [r5, #20]
    7744:	b13f      	cbz	r7, 7756 <MPSL_IRQ_CLOCK_Handler+0x1be>
    7746:	7026      	strb	r6, [r4, #0]
    7748:	7aa0      	ldrb	r0, [r4, #10]
    774a:	2802      	cmp	r0, #2
    774c:	d101      	bne.n	7752 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    774e:	f7ff ff67 	bl	7620 <MPSL_IRQ_CLOCK_Handler+0x88>
    7752:	f000 f8e7 	bl	7924 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    775a:	4802      	ldr	r0, [pc, #8]	; (7764 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    775c:	3008      	adds	r0, #8
    775e:	f002 bf63 	b.w	a628 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    7762:	0000      	.short	0x0000
    7764:	2000012c 	.word	0x2000012c
    7768:	40000c34 	.word	0x40000c34
    776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7770:	4c49      	ldr	r4, [pc, #292]	; (7898 <MPSL_IRQ_CLOCK_Handler+0x300>)
    7772:	2700      	movs	r7, #0
    7774:	4606      	mov	r6, r0
    7776:	61a7      	str	r7, [r4, #24]
    7778:	7842      	ldrb	r2, [r0, #1]
    777a:	7881      	ldrb	r1, [r0, #2]
    777c:	7800      	ldrb	r0, [r0, #0]
    777e:	72e0      	strb	r0, [r4, #11]
    7780:	7162      	strb	r2, [r4, #5]
    7782:	71a1      	strb	r1, [r4, #6]
    7784:	71e7      	strb	r7, [r4, #7]
    7786:	f04f 0801 	mov.w	r8, #1
    778a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    778e:	2805      	cmp	r0, #5
    7790:	d225      	bcs.n	77de <MPSL_IRQ_CLOCK_Handler+0x246>
    7792:	e8df f000 	tbb	[pc, r0]
    7796:	0310      	.short	0x0310
    7798:	00222006 	.word	0x00222006
    779c:	f8c4 8018 	str.w	r8, [r4, #24]
    77a0:	e009      	b.n	77b6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    77a2:	f000 f8db 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    77a6:	2101      	movs	r1, #1
    77a8:	4628      	mov	r0, r5
    77aa:	f002 feb7 	bl	a51c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    77ae:	2800      	cmp	r0, #0
    77b0:	d0f9      	beq.n	77a6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    77b2:	2002      	movs	r0, #2
    77b4:	61a0      	str	r0, [r4, #24]
    77b6:	f002 fedd 	bl	a574 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    77ba:	b1c0      	cbz	r0, 77ee <MPSL_IRQ_CLOCK_Handler+0x256>
    77bc:	f000 f9ee 	bl	7b9c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    77c0:	7e21      	ldrb	r1, [r4, #24]
    77c2:	f001 0103 	and.w	r1, r1, #3
    77c6:	4288      	cmp	r0, r1
    77c8:	d111      	bne.n	77ee <MPSL_IRQ_CLOCK_Handler+0x256>
    77ca:	79b0      	ldrb	r0, [r6, #6]
    77cc:	b160      	cbz	r0, 77e8 <MPSL_IRQ_CLOCK_Handler+0x250>
    77ce:	2002      	movs	r0, #2
    77d0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    77d4:	e044      	b.n	7860 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    77d6:	4831      	ldr	r0, [pc, #196]	; (789c <MPSL_IRQ_CLOCK_Handler+0x304>)
    77d8:	e7ec      	b.n	77b4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    77da:	4831      	ldr	r0, [pc, #196]	; (78a0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    77dc:	e7ea      	b.n	77b4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    77de:	f240 313d 	movw	r1, #829	; 0x33d
    77e2:	206d      	movs	r0, #109	; 0x6d
    77e4:	f000 fa38 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    77e8:	f000 f9ac 	bl	7b44 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    77ec:	e038      	b.n	7860 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    77ee:	f8c5 800c 	str.w	r8, [r5, #12]
    77f2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    77f6:	69a0      	ldr	r0, [r4, #24]
    77f8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    77fc:	f002 ff1f 	bl	a63e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7800:	b940      	cbnz	r0, 7814 <MPSL_IRQ_CLOCK_Handler+0x27c>
    7802:	f002 ff26 	bl	a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7806:	b928      	cbnz	r0, 7814 <MPSL_IRQ_CLOCK_Handler+0x27c>
    7808:	f002 ff3a 	bl	a680 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    780c:	b910      	cbnz	r0, 7814 <MPSL_IRQ_CLOCK_Handler+0x27c>
    780e:	f002 ff4b 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7812:	b138      	cbz	r0, 7824 <MPSL_IRQ_CLOCK_Handler+0x28c>
    7814:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7818:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    781c:	4921      	ldr	r1, [pc, #132]	; (78a4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    781e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    7822:	6008      	str	r0, [r1, #0]
    7824:	f002 ff0b 	bl	a63e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7828:	b940      	cbnz	r0, 783c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    782a:	f002 ff12 	bl	a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    782e:	b928      	cbnz	r0, 783c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    7830:	f002 ff26 	bl	a680 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7834:	b910      	cbnz	r0, 783c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    7836:	f002 ff37 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    783a:	b118      	cbz	r0, 7844 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    783c:	4919      	ldr	r1, [pc, #100]	; (78a4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    783e:	3110      	adds	r1, #16
    7840:	f8c1 8000 	str.w	r8, [r1]
    7844:	f8c5 8008 	str.w	r8, [r5, #8]
    7848:	2002      	movs	r0, #2
    784a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    784e:	79b0      	ldrb	r0, [r6, #6]
    7850:	b930      	cbnz	r0, 7860 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    7852:	f000 f829 	bl	78a8 <MPSL_IRQ_CLOCK_Handler+0x310>
    7856:	2002      	movs	r0, #2
    7858:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    785c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    7860:	79a0      	ldrb	r0, [r4, #6]
    7862:	b170      	cbz	r0, 7882 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7864:	7830      	ldrb	r0, [r6, #0]
    7866:	b960      	cbnz	r0, 7882 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7868:	f000 f97e 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    786c:	4606      	mov	r6, r0
    786e:	f000 fa67 	bl	7d40 <mpsl_temperature_get>
    7872:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7876:	b116      	cbz	r6, 787e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    7878:	e9c4 1004 	strd	r1, r0, [r4, #16]
    787c:	e001      	b.n	7882 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    787e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7882:	2101      	movs	r1, #1
    7884:	4628      	mov	r0, r5
    7886:	f002 fe49 	bl	a51c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    788a:	b108      	cbz	r0, 7890 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    788c:	f000 f966 	bl	7b5c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7890:	72a7      	strb	r7, [r4, #10]
    7892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7896:	0000      	.short	0x0000
    7898:	2000012c 	.word	0x2000012c
    789c:	00020001 	.word	0x00020001
    78a0:	00030001 	.word	0x00030001
    78a4:	4000053c 	.word	0x4000053c
    78a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78ac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    78b0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    78b4:	f010 0f02 	tst.w	r0, #2
    78b8:	d011      	beq.n	78de <MPSL_IRQ_CLOCK_Handler+0x346>
    78ba:	4c16      	ldr	r4, [pc, #88]	; (7914 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    78bc:	6820      	ldr	r0, [r4, #0]
    78be:	43c0      	mvns	r0, r0
    78c0:	f340 1600 	sbfx	r6, r0, #4, #1
    78c4:	6820      	ldr	r0, [r4, #0]
    78c6:	f040 0010 	orr.w	r0, r0, #16
    78ca:	6020      	str	r0, [r4, #0]
    78cc:	f44f 7782 	mov.w	r7, #260	; 0x104
    78d0:	4639      	mov	r1, r7
    78d2:	4628      	mov	r0, r5
    78d4:	1c76      	adds	r6, r6, #1
    78d6:	f002 fe1c 	bl	a512 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    78da:	b128      	cbz	r0, 78e8 <MPSL_IRQ_CLOCK_Handler+0x350>
    78dc:	e00a      	b.n	78f4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    78de:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    78e2:	206d      	movs	r0, #109	; 0x6d
    78e4:	f000 f9b8 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    78e8:	f002 ff20 	bl	a72c <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    78ec:	e002      	b.n	78f4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    78ee:	bf00      	nop
    78f0:	f002 ff1a 	bl	a728 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    78f4:	4639      	mov	r1, r7
    78f6:	4628      	mov	r0, r5
    78f8:	f002 fe0b 	bl	a512 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    78fc:	2800      	cmp	r0, #0
    78fe:	d0f7      	beq.n	78f0 <MPSL_IRQ_CLOCK_Handler+0x358>
    7900:	f000 f920 	bl	7b44 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7904:	2e00      	cmp	r6, #0
    7906:	d103      	bne.n	7910 <MPSL_IRQ_CLOCK_Handler+0x378>
    7908:	6820      	ldr	r0, [r4, #0]
    790a:	f020 0010 	bic.w	r0, r0, #16
    790e:	6020      	str	r0, [r4, #0]
    7910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7914:	e000ed10 	.word	0xe000ed10

00007918 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    7918:	4801      	ldr	r0, [pc, #4]	; (7920 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    791a:	89c0      	ldrh	r0, [r0, #14]
    791c:	4770      	bx	lr
    791e:	0000      	.short	0x0000
    7920:	2000012c 	.word	0x2000012c

00007924 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    7924:	b510      	push	{r4, lr}
    7926:	f3ef 8410 	mrs	r4, PRIMASK
    792a:	b672      	cpsid	i
    792c:	480a      	ldr	r0, [pc, #40]	; (7958 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    792e:	7841      	ldrb	r1, [r0, #1]
    7930:	b129      	cbz	r1, 793e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    7932:	7841      	ldrb	r1, [r0, #1]
    7934:	1e49      	subs	r1, r1, #1
    7936:	7041      	strb	r1, [r0, #1]
    7938:	7841      	ldrb	r1, [r0, #1]
    793a:	b129      	cbz	r1, 7948 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    793c:	e008      	b.n	7950 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    793e:	f240 1119 	movw	r1, #281	; 0x119
    7942:	206d      	movs	r0, #109	; 0x6d
    7944:	f000 f988 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7948:	7880      	ldrb	r0, [r0, #2]
    794a:	b908      	cbnz	r0, 7950 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    794c:	f000 f91a 	bl	7b84 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    7950:	2c00      	cmp	r4, #0
    7952:	d100      	bne.n	7956 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    7954:	b662      	cpsie	i
    7956:	bd10      	pop	{r4, pc}
    7958:	2000012c 	.word	0x2000012c

0000795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    795c:	b510      	push	{r4, lr}
    795e:	f3ef 8410 	mrs	r4, PRIMASK
    7962:	b672      	cpsid	i
    7964:	4806      	ldr	r0, [pc, #24]	; (7980 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    7966:	7841      	ldrb	r1, [r0, #1]
    7968:	1c49      	adds	r1, r1, #1
    796a:	7041      	strb	r1, [r0, #1]
    796c:	7840      	ldrb	r0, [r0, #1]
    796e:	2801      	cmp	r0, #1
    7970:	d101      	bne.n	7976 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    7972:	f002 fdea 	bl	a54a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    7976:	2c00      	cmp	r4, #0
    7978:	d100      	bne.n	797c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    797a:	b662      	cpsie	i
    797c:	bd10      	pop	{r4, pc}
    797e:	0000      	.short	0x0000
    7980:	2000012c 	.word	0x2000012c

00007984 <mpsl_clock_hfclk_release>:
    7984:	4805      	ldr	r0, [pc, #20]	; (799c <mpsl_clock_hfclk_release+0x18>)
    7986:	b510      	push	{r4, lr}
    7988:	78c1      	ldrb	r1, [r0, #3]
    798a:	b121      	cbz	r1, 7996 <mpsl_clock_hfclk_release+0x12>
    798c:	2100      	movs	r1, #0
    798e:	7101      	strb	r1, [r0, #4]
    7990:	70c1      	strb	r1, [r0, #3]
    7992:	f7ff ffc7 	bl	7924 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7996:	2000      	movs	r0, #0
    7998:	bd10      	pop	{r4, pc}
    799a:	0000      	.short	0x0000
    799c:	2000012c 	.word	0x2000012c

000079a0 <mpsl_clock_hfclk_request>:
    79a0:	b570      	push	{r4, r5, r6, lr}
    79a2:	4c0c      	ldr	r4, [pc, #48]	; (79d4 <mpsl_clock_hfclk_request+0x34>)
    79a4:	78e1      	ldrb	r1, [r4, #3]
    79a6:	b961      	cbnz	r1, 79c2 <mpsl_clock_hfclk_request+0x22>
    79a8:	2501      	movs	r5, #1
    79aa:	70e5      	strb	r5, [r4, #3]
    79ac:	61e0      	str	r0, [r4, #28]
    79ae:	f7ff ffd5 	bl	795c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    79b2:	f000 f8d9 	bl	7b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    79b6:	b130      	cbz	r0, 79c6 <mpsl_clock_hfclk_request+0x26>
    79b8:	69e0      	ldr	r0, [r4, #28]
    79ba:	b110      	cbz	r0, 79c2 <mpsl_clock_hfclk_request+0x22>
    79bc:	4780      	blx	r0
    79be:	2000      	movs	r0, #0
    79c0:	61e0      	str	r0, [r4, #28]
    79c2:	2000      	movs	r0, #0
    79c4:	bd70      	pop	{r4, r5, r6, pc}
    79c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    79ca:	7125      	strb	r5, [r4, #4]
    79cc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    79d0:	e7f7      	b.n	79c2 <mpsl_clock_hfclk_request+0x22>
    79d2:	0000      	.short	0x0000
    79d4:	2000012c 	.word	0x2000012c

000079d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    79d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79dc:	0005      	movs	r5, r0
    79de:	f06f 0015 	mvn.w	r0, #21
    79e2:	d03f      	beq.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    79e4:	7829      	ldrb	r1, [r5, #0]
    79e6:	2904      	cmp	r1, #4
    79e8:	d83c      	bhi.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    79ea:	2900      	cmp	r1, #0
    79ec:	7869      	ldrb	r1, [r5, #1]
    79ee:	d03b      	beq.n	7a68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    79f0:	2900      	cmp	r1, #0
    79f2:	d137      	bne.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    79f4:	78a9      	ldrb	r1, [r5, #2]
    79f6:	2900      	cmp	r1, #0
    79f8:	d134      	bne.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    79fa:	2000      	movs	r0, #0
    79fc:	f002 fd78 	bl	a4f0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    7a00:	2000      	movs	r0, #0
    7a02:	f002 fd68 	bl	a4d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7a06:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7a0a:	f04f 31ff 	mov.w	r1, #4294967295
    7a0e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    7a12:	2600      	movs	r6, #0
    7a14:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    7a18:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    7a1c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    7a20:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    7a24:	4c14      	ldr	r4, [pc, #80]	; (7a78 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    7a26:	7066      	strb	r6, [r4, #1]
    7a28:	88a8      	ldrh	r0, [r5, #4]
    7a2a:	81a0      	strh	r0, [r4, #12]
    7a2c:	f002 fd84 	bl	a538 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    7a30:	2701      	movs	r7, #1
    7a32:	b108      	cbz	r0, 7a38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    7a34:	70e7      	strb	r7, [r4, #3]
    7a36:	7067      	strb	r7, [r4, #1]
    7a38:	2101      	movs	r1, #1
    7a3a:	4640      	mov	r0, r8
    7a3c:	f002 fd6e 	bl	a51c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7a40:	b108      	cbz	r0, 7a46 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    7a42:	f000 f88b 	bl	7b5c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7a46:	f240 50f5 	movw	r0, #1525	; 0x5f5
    7a4a:	81e0      	strh	r0, [r4, #14]
    7a4c:	4628      	mov	r0, r5
    7a4e:	f7ff fe8d 	bl	776c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    7a52:	7267      	strb	r7, [r4, #9]
    7a54:	2000      	movs	r0, #0
    7a56:	f002 fd3e 	bl	a4d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7a5a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7a5e:	4630      	mov	r0, r6
    7a60:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    7a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a68:	2900      	cmp	r1, #0
    7a6a:	d0fb      	beq.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a6c:	2920      	cmp	r1, #32
    7a6e:	d8f9      	bhi.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a70:	78a9      	ldrb	r1, [r5, #2]
    7a72:	2921      	cmp	r1, #33	; 0x21
    7a74:	d9c1      	bls.n	79fa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    7a76:	e7f5      	b.n	7a64 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a78:	2000012c 	.word	0x2000012c

00007a7c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    7a7c:	4801      	ldr	r0, [pc, #4]	; (7a84 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    7a7e:	8980      	ldrh	r0, [r0, #12]
    7a80:	4770      	bx	lr
    7a82:	0000      	.short	0x0000
    7a84:	2000012c 	.word	0x2000012c

00007a88 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    7a88:	4802      	ldr	r0, [pc, #8]	; (7a94 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    7a8a:	7a80      	ldrb	r0, [r0, #10]
    7a8c:	2800      	cmp	r0, #0
    7a8e:	d000      	beq.n	7a92 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    7a90:	2001      	movs	r0, #1
    7a92:	4770      	bx	lr
    7a94:	2000012c 	.word	0x2000012c

00007a98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    7a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a9a:	4d1f      	ldr	r5, [pc, #124]	; (7b18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7a9c:	7ae8      	ldrb	r0, [r5, #11]
    7a9e:	2800      	cmp	r0, #0
    7aa0:	d10f      	bne.n	7ac2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7aa2:	7e28      	ldrb	r0, [r5, #24]
    7aa4:	f000 0003 	and.w	r0, r0, #3
    7aa8:	f002 fd54 	bl	a554 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7aac:	2800      	cmp	r0, #0
    7aae:	d008      	beq.n	7ac2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7ab0:	f3ef 8110 	mrs	r1, PRIMASK
    7ab4:	b672      	cpsid	i
    7ab6:	f7ff ffe7 	bl	7a88 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7aba:	b118      	cbz	r0, 7ac4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    7abc:	2900      	cmp	r1, #0
    7abe:	d100      	bne.n	7ac2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7ac0:	b662      	cpsie	i
    7ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ac4:	2601      	movs	r6, #1
    7ac6:	72ae      	strb	r6, [r5, #10]
    7ac8:	b901      	cbnz	r1, 7acc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    7aca:	b662      	cpsie	i
    7acc:	2018      	movs	r0, #24
    7ace:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7ad2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7ad6:	61a6      	str	r6, [r4, #24]
    7ad8:	f44f 7020 	mov.w	r0, #640	; 0x280
    7adc:	f8ad 0000 	strh.w	r0, [sp]
    7ae0:	f8bd 0000 	ldrh.w	r0, [sp]
    7ae4:	1e41      	subs	r1, r0, #1
    7ae6:	f8ad 1000 	strh.w	r1, [sp]
    7aea:	d2f9      	bcs.n	7ae0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    7aec:	2700      	movs	r7, #0
    7aee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    7af2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    7af6:	4808      	ldr	r0, [pc, #32]	; (7b18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7af8:	3008      	adds	r0, #8
    7afa:	f002 fd91 	bl	a620 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    7afe:	702f      	strb	r7, [r5, #0]
    7b00:	f7ff fd8e 	bl	7620 <MPSL_IRQ_CLOCK_Handler+0x88>
    7b04:	6166      	str	r6, [r4, #20]
    7b06:	7968      	ldrb	r0, [r5, #5]
    7b08:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7b0c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7b10:	2018      	movs	r0, #24
    7b12:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b18:	2000012c 	.word	0x2000012c

00007b1c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7b1c:	4602      	mov	r2, r0
    7b1e:	b510      	push	{r4, lr}
    7b20:	2000      	movs	r0, #0
    7b22:	2900      	cmp	r1, #0
    7b24:	d00a      	beq.n	7b3c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7b26:	2a00      	cmp	r2, #0
    7b28:	d008      	beq.n	7b3c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7b2a:	fba2 0101 	umull	r0, r1, r2, r1
    7b2e:	1e40      	subs	r0, r0, #1
    7b30:	4a03      	ldr	r2, [pc, #12]	; (7b40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    7b32:	f141 31ff 	adc.w	r1, r1, #4294967295
    7b36:	f002 fdfb 	bl	a730 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    7b3a:	1c40      	adds	r0, r0, #1
    7b3c:	bd10      	pop	{r4, pc}
    7b3e:	0000      	.short	0x0000
    7b40:	000f4240 	.word	0x000f4240

00007b44 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    7b44:	b510      	push	{r4, lr}
    7b46:	4c04      	ldr	r4, [pc, #16]	; (7b58 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    7b48:	7e20      	ldrb	r0, [r4, #24]
    7b4a:	f000 0003 	and.w	r0, r0, #3
    7b4e:	f002 fd01 	bl	a554 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7b52:	2800      	cmp	r0, #0
    7b54:	d0f8      	beq.n	7b48 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    7b56:	bd10      	pop	{r4, pc}
    7b58:	2000012c 	.word	0x2000012c

00007b5c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    7b5c:	4901      	ldr	r1, [pc, #4]	; (7b64 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    7b5e:	2001      	movs	r0, #1
    7b60:	7008      	strb	r0, [r1, #0]
    7b62:	4770      	bx	lr
    7b64:	20000199 	.word	0x20000199

00007b68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    7b68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7b6c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b70:	b918      	cbnz	r0, 7b7a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    7b72:	4803      	ldr	r0, [pc, #12]	; (7b80 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    7b74:	7800      	ldrb	r0, [r0, #0]
    7b76:	2800      	cmp	r0, #0
    7b78:	d000      	beq.n	7b7c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    7b7a:	2001      	movs	r0, #1
    7b7c:	4770      	bx	lr
    7b7e:	0000      	.short	0x0000
    7b80:	20000199 	.word	0x20000199

00007b84 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    7b84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7b88:	2101      	movs	r1, #1
    7b8a:	6041      	str	r1, [r0, #4]
    7b8c:	2100      	movs	r1, #0
    7b8e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7b92:	4801      	ldr	r0, [pc, #4]	; (7b98 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    7b94:	7001      	strb	r1, [r0, #0]
    7b96:	4770      	bx	lr
    7b98:	20000199 	.word	0x20000199

00007b9c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    7b9c:	4802      	ldr	r0, [pc, #8]	; (7ba8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    7b9e:	6800      	ldr	r0, [r0, #0]
    7ba0:	f000 0003 	and.w	r0, r0, #3
    7ba4:	4770      	bx	lr
    7ba6:	0000      	.short	0x0000
    7ba8:	4000041c 	.word	0x4000041c
    7bac:	b510      	push	{r4, lr}
    7bae:	b131      	cbz	r1, 7bbe <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    7bb0:	2901      	cmp	r1, #1
    7bb2:	d007      	beq.n	7bc4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    7bb4:	f240 3102 	movw	r1, #770	; 0x302
    7bb8:	a005      	add	r0, pc, #20	; (adr r0, 7bd0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    7bba:	f000 f821 	bl	7c00 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    7bbe:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    7bc2:	e001      	b.n	7bc8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    7bc4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    7bc8:	f000 0001 	and.w	r0, r0, #1
    7bcc:	bd10      	pop	{r4, pc}
    7bce:	0000      	.short	0x0000
    7bd0:	5f66726e 	.word	0x5f66726e
    7bd4:	636f6c63 	.word	0x636f6c63
    7bd8:	00682e6b 	.word	0x00682e6b
    7bdc:	f3bf 8f4f 	dsb	sy
    7be0:	4805      	ldr	r0, [pc, #20]	; (7bf8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    7be2:	6801      	ldr	r1, [r0, #0]
    7be4:	4a05      	ldr	r2, [pc, #20]	; (7bfc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    7be6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    7bea:	4311      	orrs	r1, r2
    7bec:	6001      	str	r1, [r0, #0]
    7bee:	f3bf 8f4f 	dsb	sy
    7bf2:	bf00      	nop
    7bf4:	e7fd      	b.n	7bf2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    7bf6:	0000      	.short	0x0000
    7bf8:	e000ed0c 	.word	0xe000ed0c
    7bfc:	05fa0004 	.word	0x05fa0004

00007c00 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    7c00:	b672      	cpsid	i
    7c02:	4a03      	ldr	r2, [pc, #12]	; (7c10 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    7c04:	6852      	ldr	r2, [r2, #4]
    7c06:	b102      	cbz	r2, 7c0a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    7c08:	4790      	blx	r2
    7c0a:	f7ff ffe7 	bl	7bdc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7c0e:	0000      	.short	0x0000
    7c10:	2000014c 	.word	0x2000014c
    7c14:	4806      	ldr	r0, [pc, #24]	; (7c30 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    7c16:	b510      	push	{r4, lr}
    7c18:	2100      	movs	r1, #0
    7c1a:	6001      	str	r1, [r0, #0]
    7c1c:	2101      	movs	r1, #1
    7c1e:	6001      	str	r1, [r0, #0]
    7c20:	4608      	mov	r0, r1
    7c22:	f002 fcbe 	bl	a5a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c2a:	2001      	movs	r0, #1
    7c2c:	f002 bcac 	b.w	a588 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7c30:	40001ffc 	.word	0x40001ffc
    7c34:	4807      	ldr	r0, [pc, #28]	; (7c54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    7c36:	b510      	push	{r4, lr}
    7c38:	2101      	movs	r1, #1
    7c3a:	6041      	str	r1, [r0, #4]
    7c3c:	1e89      	subs	r1, r1, #2
    7c3e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    7c42:	200c      	movs	r0, #12
    7c44:	f002 fcad 	bl	a5a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c4c:	200c      	movs	r0, #12
    7c4e:	f002 bc9b 	b.w	a588 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7c52:	0000      	.short	0x0000
    7c54:	4000c000 	.word	0x4000c000

00007c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    7c58:	b50e      	push	{r1, r2, r3, lr}
    7c5a:	b672      	cpsid	i
    7c5c:	4a0f      	ldr	r2, [pc, #60]	; (7c9c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    7c5e:	6855      	ldr	r5, [r2, #4]
    7c60:	b1d5      	cbz	r5, 7c98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    7c62:	2200      	movs	r2, #0
    7c64:	4603      	mov	r3, r0
    7c66:	466e      	mov	r6, sp
    7c68:	240a      	movs	r4, #10
    7c6a:	e003      	b.n	7c74 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    7c6c:	fbb0 f0f4 	udiv	r0, r0, r4
    7c70:	1c52      	adds	r2, r2, #1
    7c72:	b2d2      	uxtb	r2, r2
    7c74:	2800      	cmp	r0, #0
    7c76:	d1f9      	bne.n	7c6c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    7c78:	54b0      	strb	r0, [r6, r2]
    7c7a:	e009      	b.n	7c90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    7c7c:	fbb3 f0f4 	udiv	r0, r3, r4
    7c80:	fb04 3010 	mls	r0, r4, r0, r3
    7c84:	fbb3 f3f4 	udiv	r3, r3, r4
    7c88:	1e52      	subs	r2, r2, #1
    7c8a:	b2d2      	uxtb	r2, r2
    7c8c:	3030      	adds	r0, #48	; 0x30
    7c8e:	54b0      	strb	r0, [r6, r2]
    7c90:	2a00      	cmp	r2, #0
    7c92:	d1f3      	bne.n	7c7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    7c94:	4630      	mov	r0, r6
    7c96:	47a8      	blx	r5
    7c98:	f7ff ffa0 	bl	7bdc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7c9c:	2000014c 	.word	0x2000014c

00007ca0 <mpsl_init>:
    7ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ca4:	4c18      	ldr	r4, [pc, #96]	; (7d08 <mpsl_init+0x68>)
    7ca6:	4606      	mov	r6, r0
    7ca8:	4617      	mov	r7, r2
    7caa:	7860      	ldrb	r0, [r4, #1]
    7cac:	460d      	mov	r5, r1
    7cae:	b118      	cbz	r0, 7cb8 <mpsl_init+0x18>
    7cb0:	f04f 30ff 	mov.w	r0, #4294967295
    7cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cb8:	f7fc fc38 	bl	452c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    7cbc:	b906      	cbnz	r6, 7cc0 <mpsl_init+0x20>
    7cbe:	4e13      	ldr	r6, [pc, #76]	; (7d0c <mpsl_init+0x6c>)
    7cc0:	6067      	str	r7, [r4, #4]
    7cc2:	7025      	strb	r5, [r4, #0]
    7cc4:	f7ff ffa6 	bl	7c14 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    7cc8:	f7ff ffb4 	bl	7c34 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    7ccc:	4630      	mov	r0, r6
    7cce:	f7ff fe83 	bl	79d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    7cd2:	0006      	movs	r6, r0
    7cd4:	d1ee      	bne.n	7cb4 <mpsl_init+0x14>
    7cd6:	f7fe fe87 	bl	69e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    7cda:	f7ff fedd 	bl	7a98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    7cde:	f002 fbc7 	bl	a470 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    7ce2:	4628      	mov	r0, r5
    7ce4:	f002 fc50 	bl	a588 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7ce8:	2001      	movs	r0, #1
    7cea:	2d00      	cmp	r5, #0
    7cec:	db09      	blt.n	7d02 <mpsl_init+0x62>
    7cee:	f005 011f 	and.w	r1, r5, #31
    7cf2:	fa00 f101 	lsl.w	r1, r0, r1
    7cf6:	096a      	lsrs	r2, r5, #5
    7cf8:	0092      	lsls	r2, r2, #2
    7cfa:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    7cfe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    7d02:	7060      	strb	r0, [r4, #1]
    7d04:	4630      	mov	r0, r6
    7d06:	e7d5      	b.n	7cb4 <mpsl_init+0x14>
    7d08:	2000014c 	.word	0x2000014c
    7d0c:	0000a5c4 	.word	0x0000a5c4

00007d10 <mpsl_is_initialized>:
    7d10:	4801      	ldr	r0, [pc, #4]	; (7d18 <mpsl_is_initialized+0x8>)
    7d12:	7840      	ldrb	r0, [r0, #1]
    7d14:	4770      	bx	lr
    7d16:	0000      	.short	0x0000
    7d18:	2000014c 	.word	0x2000014c

00007d1c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    7d1c:	4807      	ldr	r0, [pc, #28]	; (7d3c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    7d1e:	f990 0000 	ldrsb.w	r0, [r0]
    7d22:	2800      	cmp	r0, #0
    7d24:	db09      	blt.n	7d3a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    7d26:	f000 021f 	and.w	r2, r0, #31
    7d2a:	2101      	movs	r1, #1
    7d2c:	4091      	lsls	r1, r2
    7d2e:	0940      	lsrs	r0, r0, #5
    7d30:	0080      	lsls	r0, r0, #2
    7d32:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7d36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7d3a:	4770      	bx	lr
    7d3c:	2000014c 	.word	0x2000014c

00007d40 <mpsl_temperature_get>:
    7d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d44:	2501      	movs	r5, #1
    7d46:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7d4a:	0329      	lsls	r1, r5, #12
    7d4c:	f04f 0800 	mov.w	r8, #0
    7d50:	4640      	mov	r0, r8
    7d52:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    7d56:	f3bf 8f4f 	dsb	sy
    7d5a:	f3bf 8f6f 	isb	sy
    7d5e:	4c16      	ldr	r4, [pc, #88]	; (7db8 <mpsl_temperature_get+0x78>)
    7d60:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7d64:	200c      	movs	r0, #12
    7d66:	f002 fc3b 	bl	a5e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7d6a:	4e14      	ldr	r6, [pc, #80]	; (7dbc <mpsl_temperature_get+0x7c>)
    7d6c:	6830      	ldr	r0, [r6, #0]
    7d6e:	43c0      	mvns	r0, r0
    7d70:	f340 1700 	sbfx	r7, r0, #4, #1
    7d74:	6830      	ldr	r0, [r6, #0]
    7d76:	f040 0010 	orr.w	r0, r0, #16
    7d7a:	6030      	str	r0, [r6, #0]
    7d7c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    7d80:	6025      	str	r5, [r4, #0]
    7d82:	1c7f      	adds	r7, r7, #1
    7d84:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    7d88:	b108      	cbz	r0, 7d8e <mpsl_temperature_get+0x4e>
    7d8a:	b11f      	cbz	r7, 7d94 <mpsl_temperature_get+0x54>
    7d8c:	e006      	b.n	7d9c <mpsl_temperature_get+0x5c>
    7d8e:	f002 fccb 	bl	a728 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7d92:	e7f7      	b.n	7d84 <mpsl_temperature_get+0x44>
    7d94:	6830      	ldr	r0, [r6, #0]
    7d96:	f020 0010 	bic.w	r0, r0, #16
    7d9a:	6030      	str	r0, [r6, #0]
    7d9c:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    7da0:	6065      	str	r5, [r4, #4]
    7da2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    7da6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    7daa:	200c      	movs	r0, #12
    7dac:	f002 fc18 	bl	a5e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7db0:	4630      	mov	r0, r6
    7db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7db6:	0000      	.short	0x0000
    7db8:	4000c000 	.word	0x4000c000
    7dbc:	e000ed10 	.word	0xe000ed10

00007dc0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    7dc0:	b510      	push	{r4, lr}
    7dc2:	4602      	mov	r2, r0
    7dc4:	2005      	movs	r0, #5
    7dc6:	490c      	ldr	r1, [pc, #48]	; (7df8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    7dc8:	e004      	b.n	7dd4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    7dca:	bf00      	nop
    7dcc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    7dd0:	791b      	ldrb	r3, [r3, #4]
    7dd2:	b133      	cbz	r3, 7de2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    7dd4:	1e40      	subs	r0, r0, #1
    7dd6:	b2c0      	uxtb	r0, r0
    7dd8:	d2f8      	bcs.n	7dcc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    7dda:	2148      	movs	r1, #72	; 0x48
    7ddc:	2069      	movs	r0, #105	; 0x69
    7dde:	f7ff ff3b 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7de2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    7de6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7dea:	2200      	movs	r2, #0
    7dec:	714a      	strb	r2, [r1, #5]
    7dee:	718a      	strb	r2, [r1, #6]
    7df0:	2201      	movs	r2, #1
    7df2:	710a      	strb	r2, [r1, #4]
    7df4:	bd10      	pop	{r4, pc}
    7df6:	0000      	.short	0x0000
    7df8:	20000c80 	.word	0x20000c80

00007dfc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    7dfc:	b510      	push	{r4, lr}
    7dfe:	2805      	cmp	r0, #5
    7e00:	d301      	bcc.n	7e06 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    7e02:	2158      	movs	r1, #88	; 0x58
    7e04:	e006      	b.n	7e14 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    7e06:	490a      	ldr	r1, [pc, #40]	; (7e30 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    7e08:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7e0c:	7901      	ldrb	r1, [r0, #4]
    7e0e:	2901      	cmp	r1, #1
    7e10:	d003      	beq.n	7e1a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    7e12:	2159      	movs	r1, #89	; 0x59
    7e14:	2069      	movs	r0, #105	; 0x69
    7e16:	f7ff ff1f 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7e1a:	7941      	ldrb	r1, [r0, #5]
    7e1c:	7982      	ldrb	r2, [r0, #6]
    7e1e:	1c49      	adds	r1, r1, #1
    7e20:	b2c9      	uxtb	r1, r1
    7e22:	428a      	cmp	r2, r1
    7e24:	d000      	beq.n	7e28 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    7e26:	7141      	strb	r1, [r0, #5]
    7e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e2c:	f7ff bf76 	b.w	7d1c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    7e30:	20000c80 	.word	0x20000c80

00007e34 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    7e34:	b510      	push	{r4, lr}
    7e36:	2805      	cmp	r0, #5
    7e38:	d303      	bcc.n	7e42 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    7e3a:	214f      	movs	r1, #79	; 0x4f
    7e3c:	2069      	movs	r0, #105	; 0x69
    7e3e:	f7ff ff0b 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7e42:	4a03      	ldr	r2, [pc, #12]	; (7e50 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    7e44:	2100      	movs	r1, #0
    7e46:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    7e4a:	7101      	strb	r1, [r0, #4]
    7e4c:	bd10      	pop	{r4, pc}
    7e4e:	0000      	.short	0x0000
    7e50:	20000c80 	.word	0x20000c80

00007e54 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    7e54:	b570      	push	{r4, r5, r6, lr}
    7e56:	2505      	movs	r5, #5
    7e58:	4e0e      	ldr	r6, [pc, #56]	; (7e94 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    7e5a:	4c0f      	ldr	r4, [pc, #60]	; (7e98 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    7e5c:	e016      	b.n	7e8c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7e5e:	7821      	ldrb	r1, [r4, #0]
    7e60:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    7e64:	7902      	ldrb	r2, [r0, #4]
    7e66:	2a01      	cmp	r2, #1
    7e68:	d108      	bne.n	7e7c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7e6a:	7942      	ldrb	r2, [r0, #5]
    7e6c:	7983      	ldrb	r3, [r0, #6]
    7e6e:	429a      	cmp	r2, r3
    7e70:	d004      	beq.n	7e7c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7e72:	7942      	ldrb	r2, [r0, #5]
    7e74:	7182      	strb	r2, [r0, #6]
    7e76:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    7e7a:	4780      	blx	r0
    7e7c:	7820      	ldrb	r0, [r4, #0]
    7e7e:	1c40      	adds	r0, r0, #1
    7e80:	b2c0      	uxtb	r0, r0
    7e82:	7020      	strb	r0, [r4, #0]
    7e84:	2805      	cmp	r0, #5
    7e86:	d301      	bcc.n	7e8c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7e88:	2000      	movs	r0, #0
    7e8a:	7020      	strb	r0, [r4, #0]
    7e8c:	1e6d      	subs	r5, r5, #1
    7e8e:	b2ed      	uxtb	r5, r5
    7e90:	d2e5      	bcs.n	7e5e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    7e92:	bd70      	pop	{r4, r5, r6, pc}
    7e94:	20000c80 	.word	0x20000c80
    7e98:	2000019a 	.word	0x2000019a

00007e9c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    7e9c:	b500      	push	{lr}
    7e9e:	f002 fbce 	bl	a63e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7ea2:	b940      	cbnz	r0, 7eb6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7ea4:	f002 fbd5 	bl	a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7ea8:	b928      	cbnz	r0, 7eb6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7eaa:	f002 fbe9 	bl	a680 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7eae:	b910      	cbnz	r0, 7eb6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7eb0:	f002 fbfa 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7eb4:	b108      	cbz	r0, 7eba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    7eb6:	4802      	ldr	r0, [pc, #8]	; (7ec0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    7eb8:	bd00      	pop	{pc}
    7eba:	4802      	ldr	r0, [pc, #8]	; (7ec4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    7ebc:	bd00      	pop	{pc}
    7ebe:	0000      	.short	0x0000
    7ec0:	4000050c 	.word	0x4000050c
    7ec4:	4001e700 	.word	0x4001e700
    7ec8:	b510      	push	{r4, lr}
    7eca:	f002 fbed 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7ece:	b330      	cbz	r0, 7f1e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    7ed0:	f3ef 8010 	mrs	r0, PRIMASK
    7ed4:	b1c8      	cbz	r0, 7f0a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    7ed6:	2100      	movs	r1, #0
    7ed8:	b672      	cpsid	i
    7eda:	4812      	ldr	r0, [pc, #72]	; (7f24 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    7edc:	6802      	ldr	r2, [r0, #0]
    7ede:	6803      	ldr	r3, [r0, #0]
    7ee0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    7ee4:	f043 0310 	orr.w	r3, r3, #16
    7ee8:	6003      	str	r3, [r0, #0]
    7eea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7eee:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7ef2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    7ef6:	431c      	orrs	r4, r3
    7ef8:	d000      	beq.n	7efc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    7efa:	bf40      	sev
    7efc:	bf20      	wfe
    7efe:	bf00      	nop
    7f00:	bf00      	nop
    7f02:	bf00      	nop
    7f04:	bf00      	nop
    7f06:	b112      	cbz	r2, 7f0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    7f08:	e005      	b.n	7f16 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    7f0a:	2101      	movs	r1, #1
    7f0c:	e7e4      	b.n	7ed8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    7f0e:	6802      	ldr	r2, [r0, #0]
    7f10:	f022 0210 	bic.w	r2, r2, #16
    7f14:	6002      	str	r2, [r0, #0]
    7f16:	2900      	cmp	r1, #0
    7f18:	d000      	beq.n	7f1c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    7f1a:	b662      	cpsie	i
    7f1c:	bd10      	pop	{r4, pc}
    7f1e:	bf20      	wfe
    7f20:	bd10      	pop	{r4, pc}
    7f22:	0000      	.short	0x0000
    7f24:	e000ed10 	.word	0xe000ed10

00007f28 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    7f28:	4901      	ldr	r1, [pc, #4]	; (7f30 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    7f2a:	2001      	movs	r0, #1
    7f2c:	7088      	strb	r0, [r1, #2]
    7f2e:	4770      	bx	lr
    7f30:	20000154 	.word	0x20000154

00007f34 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    7f34:	0000a9a9 0000a9e1 0000a9cb 0000a9b9     ................
    7f44:	0000a9c5 0000a9b3 0000a9a7 0000a9a5     ................
    7f54:	0000a9dd 0000a9d1 0000a9bf 0000a9ad     ................
    7f64:	0000a99f 0000a997 0000a99b 0000a991     ................

00007f74 <mpsl_fem_disable>:
    7f74:	4801      	ldr	r0, [pc, #4]	; (7f7c <mpsl_fem_disable+0x8>)
    7f76:	6800      	ldr	r0, [r0, #0]
    7f78:	6800      	ldr	r0, [r0, #0]
    7f7a:	4700      	bx	r0
    7f7c:	20000168 	.word	0x20000168

00007f80 <mpsl_fem_lna_configuration_clear>:
    7f80:	4801      	ldr	r0, [pc, #4]	; (7f88 <mpsl_fem_lna_configuration_clear+0x8>)
    7f82:	6800      	ldr	r0, [r0, #0]
    7f84:	6940      	ldr	r0, [r0, #20]
    7f86:	4700      	bx	r0
    7f88:	20000168 	.word	0x20000168

00007f8c <mpsl_fem_lna_configuration_set>:
    7f8c:	4a01      	ldr	r2, [pc, #4]	; (7f94 <mpsl_fem_lna_configuration_set+0x8>)
    7f8e:	6812      	ldr	r2, [r2, #0]
    7f90:	68d2      	ldr	r2, [r2, #12]
    7f92:	4710      	bx	r2
    7f94:	20000168 	.word	0x20000168

00007f98 <mpsl_fem_lna_is_configured>:
    7f98:	4901      	ldr	r1, [pc, #4]	; (7fa0 <mpsl_fem_lna_is_configured+0x8>)
    7f9a:	6809      	ldr	r1, [r1, #0]
    7f9c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    7f9e:	4708      	bx	r1
    7fa0:	20000168 	.word	0x20000168

00007fa4 <mpsl_fem_pa_configuration_clear>:
    7fa4:	4801      	ldr	r0, [pc, #4]	; (7fac <mpsl_fem_pa_configuration_clear+0x8>)
    7fa6:	6800      	ldr	r0, [r0, #0]
    7fa8:	6900      	ldr	r0, [r0, #16]
    7faa:	4700      	bx	r0
    7fac:	20000168 	.word	0x20000168

00007fb0 <mpsl_fem_pa_configuration_set>:
    7fb0:	4a01      	ldr	r2, [pc, #4]	; (7fb8 <mpsl_fem_pa_configuration_set+0x8>)
    7fb2:	6812      	ldr	r2, [r2, #0]
    7fb4:	6892      	ldr	r2, [r2, #8]
    7fb6:	4710      	bx	r2
    7fb8:	20000168 	.word	0x20000168

00007fbc <mpsl_fem_pa_gain_set>:
    7fbc:	4901      	ldr	r1, [pc, #4]	; (7fc4 <mpsl_fem_pa_gain_set+0x8>)
    7fbe:	6809      	ldr	r1, [r1, #0]
    7fc0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7fc2:	4708      	bx	r1
    7fc4:	20000168 	.word	0x20000168

00007fc8 <mpsl_fem_pa_is_configured>:
    7fc8:	4901      	ldr	r1, [pc, #4]	; (7fd0 <mpsl_fem_pa_is_configured+0x8>)
    7fca:	6809      	ldr	r1, [r1, #0]
    7fcc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    7fce:	4708      	bx	r1
    7fd0:	20000168 	.word	0x20000168

00007fd4 <mpsl_fem_tx_power_split>:
    7fd4:	b430      	push	{r4, r5}
    7fd6:	4c03      	ldr	r4, [pc, #12]	; (7fe4 <mpsl_fem_tx_power_split+0x10>)
    7fd8:	6824      	ldr	r4, [r4, #0]
    7fda:	6864      	ldr	r4, [r4, #4]
    7fdc:	46a4      	mov	ip, r4
    7fde:	bc30      	pop	{r4, r5}
    7fe0:	4760      	bx	ip
    7fe2:	0000      	.short	0x0000
    7fe4:	20000168 	.word	0x20000168

00007fe8 <mpsl_fem_device_config_254_apply_get>:
    7fe8:	4801      	ldr	r0, [pc, #4]	; (7ff0 <mpsl_fem_device_config_254_apply_get+0x8>)
    7fea:	7800      	ldrb	r0, [r0, #0]
    7fec:	4770      	bx	lr
    7fee:	0000      	.short	0x0000
    7ff0:	2000019b 	.word	0x2000019b

00007ff4 <__udivmoddi4>:
    7ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ff8:	4686      	mov	lr, r0
    7ffa:	468c      	mov	ip, r1
    7ffc:	4608      	mov	r0, r1
    7ffe:	9e08      	ldr	r6, [sp, #32]
    8000:	4615      	mov	r5, r2
    8002:	4674      	mov	r4, lr
    8004:	4619      	mov	r1, r3
    8006:	2b00      	cmp	r3, #0
    8008:	f040 80c2 	bne.w	8190 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x190>
    800c:	4285      	cmp	r5, r0
    800e:	fab2 f282 	clz	r2, r2
    8012:	d945      	bls.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    8014:	b14a      	cbz	r2, 802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
    8016:	f1c2 0320 	rsb	r3, r2, #32
    801a:	fa00 fc02 	lsl.w	ip, r0, r2
    801e:	fa2e f303 	lsr.w	r3, lr, r3
    8022:	4095      	lsls	r5, r2
    8024:	ea43 0c0c 	orr.w	ip, r3, ip
    8028:	4094      	lsls	r4, r2
    802a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    802e:	b2a8      	uxth	r0, r5
    8030:	fbbc f8fe 	udiv	r8, ip, lr
    8034:	0c23      	lsrs	r3, r4, #16
    8036:	fb0e cc18 	mls	ip, lr, r8, ip
    803a:	fb08 f900 	mul.w	r9, r8, r0
    803e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8042:	4599      	cmp	r9, r3
    8044:	d928      	bls.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
    8046:	18eb      	adds	r3, r5, r3
    8048:	f108 37ff 	add.w	r7, r8, #4294967295
    804c:	d204      	bcs.n	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    804e:	4599      	cmp	r9, r3
    8050:	d902      	bls.n	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    8052:	f1a8 0702 	sub.w	r7, r8, #2
    8056:	442b      	add	r3, r5
    8058:	eba3 0309 	sub.w	r3, r3, r9
    805c:	b2a4      	uxth	r4, r4
    805e:	fbb3 fcfe 	udiv	ip, r3, lr
    8062:	fb0e 331c 	mls	r3, lr, ip, r3
    8066:	fb0c f000 	mul.w	r0, ip, r0
    806a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    806e:	42a0      	cmp	r0, r4
    8070:	d914      	bls.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    8072:	192c      	adds	r4, r5, r4
    8074:	f10c 33ff 	add.w	r3, ip, #4294967295
    8078:	d204      	bcs.n	8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
    807a:	42a0      	cmp	r0, r4
    807c:	d902      	bls.n	8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
    807e:	f1ac 0302 	sub.w	r3, ip, #2
    8082:	442c      	add	r4, r5
    8084:	1a24      	subs	r4, r4, r0
    8086:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    808a:	b11e      	cbz	r6, 8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    808c:	40d4      	lsrs	r4, r2
    808e:	2300      	movs	r3, #0
    8090:	6034      	str	r4, [r6, #0]
    8092:	6073      	str	r3, [r6, #4]
    8094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8098:	4647      	mov	r7, r8
    809a:	e7dd      	b.n	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    809c:	4663      	mov	r3, ip
    809e:	e7f1      	b.n	8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
    80a0:	bb92      	cbnz	r2, 8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>
    80a2:	1b43      	subs	r3, r0, r5
    80a4:	2101      	movs	r1, #1
    80a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    80aa:	b2af      	uxth	r7, r5
    80ac:	fbb3 fcfe 	udiv	ip, r3, lr
    80b0:	0c20      	lsrs	r0, r4, #16
    80b2:	fb0e 331c 	mls	r3, lr, ip, r3
    80b6:	fb0c f807 	mul.w	r8, ip, r7
    80ba:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    80be:	4598      	cmp	r8, r3
    80c0:	d962      	bls.n	8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>
    80c2:	18eb      	adds	r3, r5, r3
    80c4:	f10c 30ff 	add.w	r0, ip, #4294967295
    80c8:	d204      	bcs.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80ca:	4598      	cmp	r8, r3
    80cc:	d902      	bls.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80ce:	f1ac 0002 	sub.w	r0, ip, #2
    80d2:	442b      	add	r3, r5
    80d4:	eba3 0308 	sub.w	r3, r3, r8
    80d8:	b2a4      	uxth	r4, r4
    80da:	fbb3 fcfe 	udiv	ip, r3, lr
    80de:	fb0e 331c 	mls	r3, lr, ip, r3
    80e2:	fb0c f707 	mul.w	r7, ip, r7
    80e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    80ea:	42a7      	cmp	r7, r4
    80ec:	d94e      	bls.n	818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>
    80ee:	192c      	adds	r4, r5, r4
    80f0:	f10c 33ff 	add.w	r3, ip, #4294967295
    80f4:	d204      	bcs.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
    80f6:	42a7      	cmp	r7, r4
    80f8:	d902      	bls.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
    80fa:	f1ac 0302 	sub.w	r3, ip, #2
    80fe:	442c      	add	r4, r5
    8100:	1be4      	subs	r4, r4, r7
    8102:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8106:	e7c0      	b.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
    8108:	f1c2 0320 	rsb	r3, r2, #32
    810c:	fa20 f103 	lsr.w	r1, r0, r3
    8110:	4095      	lsls	r5, r2
    8112:	4090      	lsls	r0, r2
    8114:	fa2e f303 	lsr.w	r3, lr, r3
    8118:	4303      	orrs	r3, r0
    811a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    811e:	b2af      	uxth	r7, r5
    8120:	fbb1 fcfe 	udiv	ip, r1, lr
    8124:	fb0e 101c 	mls	r0, lr, ip, r1
    8128:	0c19      	lsrs	r1, r3, #16
    812a:	fb0c f807 	mul.w	r8, ip, r7
    812e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8132:	4588      	cmp	r8, r1
    8134:	fa04 f402 	lsl.w	r4, r4, r2
    8138:	d922      	bls.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    813a:	1869      	adds	r1, r5, r1
    813c:	f10c 30ff 	add.w	r0, ip, #4294967295
    8140:	d204      	bcs.n	814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>
    8142:	4588      	cmp	r8, r1
    8144:	d902      	bls.n	814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>
    8146:	f1ac 0002 	sub.w	r0, ip, #2
    814a:	4429      	add	r1, r5
    814c:	eba1 0108 	sub.w	r1, r1, r8
    8150:	b29b      	uxth	r3, r3
    8152:	fbb1 fcfe 	udiv	ip, r1, lr
    8156:	fb0e 111c 	mls	r1, lr, ip, r1
    815a:	fb0c f707 	mul.w	r7, ip, r7
    815e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8162:	429f      	cmp	r7, r3
    8164:	d90e      	bls.n	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    8166:	18eb      	adds	r3, r5, r3
    8168:	f10c 31ff 	add.w	r1, ip, #4294967295
    816c:	d204      	bcs.n	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    816e:	429f      	cmp	r7, r3
    8170:	d902      	bls.n	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    8172:	f1ac 0102 	sub.w	r1, ip, #2
    8176:	442b      	add	r3, r5
    8178:	1bdb      	subs	r3, r3, r7
    817a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    817e:	e792      	b.n	80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
    8180:	4660      	mov	r0, ip
    8182:	e7e3      	b.n	814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>
    8184:	4661      	mov	r1, ip
    8186:	e7f7      	b.n	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    8188:	4660      	mov	r0, ip
    818a:	e7a3      	b.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    818c:	4663      	mov	r3, ip
    818e:	e7b7      	b.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
    8190:	4283      	cmp	r3, r0
    8192:	d906      	bls.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    8194:	b916      	cbnz	r6, 819c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19c>
    8196:	2100      	movs	r1, #0
    8198:	4608      	mov	r0, r1
    819a:	e77b      	b.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    819c:	e9c6 e000 	strd	lr, r0, [r6]
    81a0:	e7f9      	b.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    81a2:	fab3 f783 	clz	r7, r3
    81a6:	b98f      	cbnz	r7, 81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    81a8:	4283      	cmp	r3, r0
    81aa:	d301      	bcc.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    81ac:	4572      	cmp	r2, lr
    81ae:	d808      	bhi.n	81c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c2>
    81b0:	ebbe 0402 	subs.w	r4, lr, r2
    81b4:	eb60 0303 	sbc.w	r3, r0, r3
    81b8:	2001      	movs	r0, #1
    81ba:	469c      	mov	ip, r3
    81bc:	b91e      	cbnz	r6, 81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
    81be:	2100      	movs	r1, #0
    81c0:	e768      	b.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    81c2:	4638      	mov	r0, r7
    81c4:	e7fa      	b.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
    81c6:	e9c6 4c00 	strd	r4, ip, [r6]
    81ca:	e7f8      	b.n	81be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1be>
    81cc:	f1c7 0c20 	rsb	ip, r7, #32
    81d0:	40bb      	lsls	r3, r7
    81d2:	fa22 f40c 	lsr.w	r4, r2, ip
    81d6:	431c      	orrs	r4, r3
    81d8:	fa2e f10c 	lsr.w	r1, lr, ip
    81dc:	fa20 f30c 	lsr.w	r3, r0, ip
    81e0:	40b8      	lsls	r0, r7
    81e2:	4301      	orrs	r1, r0
    81e4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    81e8:	fa0e f507 	lsl.w	r5, lr, r7
    81ec:	fbb3 f8f9 	udiv	r8, r3, r9
    81f0:	fa1f fe84 	uxth.w	lr, r4
    81f4:	fb09 3018 	mls	r0, r9, r8, r3
    81f8:	0c0b      	lsrs	r3, r1, #16
    81fa:	fb08 fa0e 	mul.w	sl, r8, lr
    81fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8202:	459a      	cmp	sl, r3
    8204:	fa02 f207 	lsl.w	r2, r2, r7
    8208:	d940      	bls.n	828c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28c>
    820a:	18e3      	adds	r3, r4, r3
    820c:	f108 30ff 	add.w	r0, r8, #4294967295
    8210:	d204      	bcs.n	821c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21c>
    8212:	459a      	cmp	sl, r3
    8214:	d902      	bls.n	821c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21c>
    8216:	f1a8 0002 	sub.w	r0, r8, #2
    821a:	4423      	add	r3, r4
    821c:	eba3 030a 	sub.w	r3, r3, sl
    8220:	b289      	uxth	r1, r1
    8222:	fbb3 f8f9 	udiv	r8, r3, r9
    8226:	fb09 3318 	mls	r3, r9, r8, r3
    822a:	fb08 fe0e 	mul.w	lr, r8, lr
    822e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8232:	458e      	cmp	lr, r1
    8234:	d92c      	bls.n	8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
    8236:	1861      	adds	r1, r4, r1
    8238:	f108 33ff 	add.w	r3, r8, #4294967295
    823c:	d204      	bcs.n	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
    823e:	458e      	cmp	lr, r1
    8240:	d902      	bls.n	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
    8242:	f1a8 0302 	sub.w	r3, r8, #2
    8246:	4421      	add	r1, r4
    8248:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    824c:	fba0 9802 	umull	r9, r8, r0, r2
    8250:	eba1 010e 	sub.w	r1, r1, lr
    8254:	4541      	cmp	r1, r8
    8256:	46ce      	mov	lr, r9
    8258:	4643      	mov	r3, r8
    825a:	d302      	bcc.n	8262 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x262>
    825c:	d106      	bne.n	826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    825e:	454d      	cmp	r5, r9
    8260:	d204      	bcs.n	826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    8262:	ebb9 0e02 	subs.w	lr, r9, r2
    8266:	eb68 0304 	sbc.w	r3, r8, r4
    826a:	3801      	subs	r0, #1
    826c:	2e00      	cmp	r6, #0
    826e:	d0a6      	beq.n	81be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1be>
    8270:	ebb5 020e 	subs.w	r2, r5, lr
    8274:	eb61 0103 	sbc.w	r1, r1, r3
    8278:	fa01 fc0c 	lsl.w	ip, r1, ip
    827c:	fa22 f307 	lsr.w	r3, r2, r7
    8280:	ea4c 0303 	orr.w	r3, ip, r3
    8284:	40f9      	lsrs	r1, r7
    8286:	e9c6 3100 	strd	r3, r1, [r6]
    828a:	e798      	b.n	81be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1be>
    828c:	4640      	mov	r0, r8
    828e:	e7c5      	b.n	821c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21c>
    8290:	4643      	mov	r3, r8
    8292:	e7d9      	b.n	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
    8294:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    8298:	4681      	mov	r9, r0
    829a:	f100 0007 	add.w	r0, r0, #7
    829e:	f020 0007 	bic.w	r0, r0, #7
    82a2:	ea5f 0802 	movs.w	r8, r2
    82a6:	9000      	str	r0, [sp, #0]
    82a8:	784a      	ldrb	r2, [r1, #1]
    82aa:	f88d 2004 	strb.w	r2, [sp, #4]
    82ae:	788a      	ldrb	r2, [r1, #2]
    82b0:	460c      	mov	r4, r1
    82b2:	f88d 2005 	strb.w	r2, [sp, #5]
    82b6:	d000      	beq.n	82ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ba>
    82b8:	2000      	movs	r0, #0
    82ba:	a901      	add	r1, sp, #4
    82bc:	f7f8 ff24 	bl	1108 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    82c0:	9900      	ldr	r1, [sp, #0]
    82c2:	2600      	movs	r6, #0
    82c4:	4408      	add	r0, r1
    82c6:	9000      	str	r0, [sp, #0]
    82c8:	7820      	ldrb	r0, [r4, #0]
    82ca:	7861      	ldrb	r1, [r4, #1]
    82cc:	4635      	mov	r5, r6
    82ce:	4408      	add	r0, r1
    82d0:	b2c7      	uxtb	r7, r0
    82d2:	e008      	b.n	82e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e6>
    82d4:	7a23      	ldrb	r3, [r4, #8]
    82d6:	79e2      	ldrb	r2, [r4, #7]
    82d8:	79a1      	ldrb	r1, [r4, #6]
    82da:	7960      	ldrb	r0, [r4, #5]
    82dc:	f000 fc4c 	bl	8b78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    82e0:	1c6d      	adds	r5, r5, #1
    82e2:	4406      	add	r6, r0
    82e4:	b2ed      	uxtb	r5, r5
    82e6:	42bd      	cmp	r5, r7
    82e8:	d3f4      	bcc.n	82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>
    82ea:	9800      	ldr	r0, [sp, #0]
    82ec:	1cc0      	adds	r0, r0, #3
    82ee:	f020 0003 	bic.w	r0, r0, #3
    82f2:	9000      	str	r0, [sp, #0]
    82f4:	f1b8 0f00 	cmp.w	r8, #0
    82f8:	d000      	beq.n	82fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fc>
    82fa:	2000      	movs	r0, #0
    82fc:	4632      	mov	r2, r6
    82fe:	4639      	mov	r1, r7
    8300:	f7f9 f83c 	bl	137c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    8304:	9900      	ldr	r1, [sp, #0]
    8306:	4642      	mov	r2, r8
    8308:	4408      	add	r0, r1
    830a:	9000      	str	r0, [sp, #0]
    830c:	4621      	mov	r1, r4
    830e:	4668      	mov	r0, sp
    8310:	f000 f805 	bl	831e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31e>
    8314:	9900      	ldr	r1, [sp, #0]
    8316:	eba1 0009 	sub.w	r0, r1, r9
    831a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    831e:	b570      	push	{r4, r5, r6, lr}
    8320:	4605      	mov	r5, r0
    8322:	7888      	ldrb	r0, [r1, #2]
    8324:	4616      	mov	r6, r2
    8326:	460c      	mov	r4, r1
    8328:	b188      	cbz	r0, 834e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34e>
    832a:	6828      	ldr	r0, [r5, #0]
    832c:	1cc0      	adds	r0, r0, #3
    832e:	f020 0003 	bic.w	r0, r0, #3
    8332:	6028      	str	r0, [r5, #0]
    8334:	7de1      	ldrb	r1, [r4, #23]
    8336:	78e2      	ldrb	r2, [r4, #3]
    8338:	8a63      	ldrh	r3, [r4, #18]
    833a:	4411      	add	r1, r2
    833c:	b2ca      	uxtb	r2, r1
    833e:	78a1      	ldrb	r1, [r4, #2]
    8340:	b106      	cbz	r6, 8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>
    8342:	2000      	movs	r0, #0
    8344:	f7f9 f8a4 	bl	1490 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    8348:	6829      	ldr	r1, [r5, #0]
    834a:	4408      	add	r0, r1
    834c:	6028      	str	r0, [r5, #0]
    834e:	7d20      	ldrb	r0, [r4, #20]
    8350:	2800      	cmp	r0, #0
    8352:	d00f      	beq.n	8374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x374>
    8354:	78a0      	ldrb	r0, [r4, #2]
    8356:	2800      	cmp	r0, #0
    8358:	d00c      	beq.n	8374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x374>
    835a:	6828      	ldr	r0, [r5, #0]
    835c:	1dc0      	adds	r0, r0, #7
    835e:	f020 0007 	bic.w	r0, r0, #7
    8362:	6028      	str	r0, [r5, #0]
    8364:	7d21      	ldrb	r1, [r4, #20]
    8366:	b106      	cbz	r6, 836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    8368:	2000      	movs	r0, #0
    836a:	f7f9 fdfd 	bl	1f68 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    836e:	6829      	ldr	r1, [r5, #0]
    8370:	4408      	add	r0, r1
    8372:	6028      	str	r0, [r5, #0]
    8374:	bd70      	pop	{r4, r5, r6, pc}
    8376:	b570      	push	{r4, r5, r6, lr}
    8378:	460c      	mov	r4, r1
    837a:	4605      	mov	r5, r0
    837c:	f7f8 fd0a 	bl	d94 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    8380:	2800      	cmp	r0, #0
    8382:	d002      	beq.n	838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
    8384:	2d3e      	cmp	r5, #62	; 0x3e
    8386:	d001      	beq.n	838c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38c>
    8388:	2001      	movs	r0, #1
    838a:	bd70      	pop	{r4, r5, r6, pc}
    838c:	2c12      	cmp	r4, #18
    838e:	d004      	beq.n	839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
    8390:	4620      	mov	r0, r4
    8392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8396:	f7f8 bd0f 	b.w	db8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    839a:	2000      	movs	r0, #0
    839c:	bd70      	pop	{r4, r5, r6, pc}

0000839e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    839e:	b510      	push	{r4, lr}
    83a0:	460c      	mov	r4, r1
    83a2:	7909      	ldrb	r1, [r1, #4]
    83a4:	7001      	strb	r1, [r0, #0]
    83a6:	7841      	ldrb	r1, [r0, #1]
    83a8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    83ac:	7041      	strb	r1, [r0, #1]
    83ae:	88a2      	ldrh	r2, [r4, #4]
    83b0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    83b4:	4311      	orrs	r1, r2
    83b6:	7041      	strb	r1, [r0, #1]
    83b8:	79a2      	ldrb	r2, [r4, #6]
    83ba:	7082      	strb	r2, [r0, #2]
    83bc:	88e2      	ldrh	r2, [r4, #6]
    83be:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    83c2:	0a12      	lsrs	r2, r2, #8
    83c4:	70c2      	strb	r2, [r0, #3]
    83c6:	7041      	strb	r1, [r0, #1]
    83c8:	7a22      	ldrb	r2, [r4, #8]
    83ca:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    83ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    83d2:	7041      	strb	r1, [r0, #1]
    83d4:	7a62      	ldrb	r2, [r4, #9]
    83d6:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    83da:	7041      	strb	r1, [r0, #1]
    83dc:	6821      	ldr	r1, [r4, #0]
    83de:	1d02      	adds	r2, r0, #4
    83e0:	4291      	cmp	r1, r2
    83e2:	d006      	beq.n	83f2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    83e4:	88e2      	ldrh	r2, [r4, #6]
    83e6:	2afb      	cmp	r2, #251	; 0xfb
    83e8:	d300      	bcc.n	83ec <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    83ea:	22fb      	movs	r2, #251	; 0xfb
    83ec:	1d00      	adds	r0, r0, #4
    83ee:	f002 f9f5 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    83f2:	79a0      	ldrb	r0, [r4, #6]
    83f4:	1d00      	adds	r0, r0, #4
    83f6:	b2c0      	uxtb	r0, r0
    83f8:	bd10      	pop	{r4, pc}

000083fa <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    83fa:	b430      	push	{r4, r5}
    83fc:	790a      	ldrb	r2, [r1, #4]
    83fe:	7002      	strb	r2, [r0, #0]
    8400:	7842      	ldrb	r2, [r0, #1]
    8402:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    8406:	7042      	strb	r2, [r0, #1]
    8408:	888b      	ldrh	r3, [r1, #4]
    840a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    840e:	431a      	orrs	r2, r3
    8410:	7042      	strb	r2, [r0, #1]
    8412:	798b      	ldrb	r3, [r1, #6]
    8414:	7083      	strb	r3, [r0, #2]
    8416:	78c3      	ldrb	r3, [r0, #3]
    8418:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    841c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8420:	70c3      	strb	r3, [r0, #3]
    8422:	88cc      	ldrh	r4, [r1, #6]
    8424:	f3c4 2405 	ubfx	r4, r4, #8, #6
    8428:	4323      	orrs	r3, r4
    842a:	70c3      	strb	r3, [r0, #3]
    842c:	7042      	strb	r2, [r0, #1]
    842e:	7a0c      	ldrb	r4, [r1, #8]
    8430:	f004 0403 	and.w	r4, r4, #3
    8434:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    8438:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    843c:	7042      	strb	r2, [r0, #1]
    843e:	7a4c      	ldrb	r4, [r1, #9]
    8440:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    8444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8448:	7042      	strb	r2, [r0, #1]
    844a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    844e:	70c2      	strb	r2, [r0, #3]
    8450:	680b      	ldr	r3, [r1, #0]
    8452:	1d02      	adds	r2, r0, #4
    8454:	4293      	cmp	r3, r2
    8456:	d005      	beq.n	8464 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    8458:	88ca      	ldrh	r2, [r1, #6]
    845a:	bc30      	pop	{r4, r5}
    845c:	4619      	mov	r1, r3
    845e:	1d00      	adds	r0, r0, #4
    8460:	f002 b9bc 	b.w	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8464:	bc30      	pop	{r4, r5}
    8466:	4770      	bx	lr

00008468 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    8468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    846c:	460d      	mov	r5, r1
    846e:	4604      	mov	r4, r0
    8470:	f891 c000 	ldrb.w	ip, [r1]
    8474:	2000      	movs	r0, #0
    8476:	230c      	movs	r3, #12
    8478:	2705      	movs	r7, #5
    847a:	2203      	movs	r2, #3
    847c:	263e      	movs	r6, #62	; 0x3e
    847e:	21ff      	movs	r1, #255	; 0xff
    8480:	f1bc 0f1e 	cmp.w	ip, #30
    8484:	d27e      	bcs.n	8584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    8486:	e8df f00c 	tbb	[pc, ip]
    848a:	29e7      	.short	0x29e7
    848c:	63e74240 	.word	0x63e74240
    8490:	ac99806d 	.word	0xac99806d
    8494:	dfc4b9ae 	.word	0xdfc4b9ae
    8498:	e7e70ff3 	.word	0xe7e70ff3
    849c:	fcd2cf48 	.word	0xfcd2cf48
    84a0:	edeeeff0 	.word	0xedeeeff0
    84a4:	e9eaebec 	.word	0xe9eaebec
    84a8:	200e      	movs	r0, #14
    84aa:	7020      	strb	r0, [r4, #0]
    84ac:	7968      	ldrb	r0, [r5, #5]
    84ae:	70e0      	strb	r0, [r4, #3]
    84b0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84b4:	0a00      	lsrs	r0, r0, #8
    84b6:	7120      	strb	r0, [r4, #4]
    84b8:	7928      	ldrb	r0, [r5, #4]
    84ba:	70a0      	strb	r0, [r4, #2]
    84bc:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84c0:	3883      	subs	r0, #131	; 0x83
    84c2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    84c6:	d003      	beq.n	84d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    84c8:	2136      	movs	r1, #54	; 0x36
    84ca:	20c7      	movs	r0, #199	; 0xc7
    84cc:	f7f8 fb22 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84d0:	1de9      	adds	r1, r5, #7
    84d2:	1d60      	adds	r0, r4, #5
    84d4:	f002 f982 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    84d8:	2007      	movs	r0, #7
    84da:	e0bb      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    84dc:	7023      	strb	r3, [r4, #0]
    84de:	7928      	ldrb	r0, [r5, #4]
    84e0:	70a0      	strb	r0, [r4, #2]
    84e2:	7968      	ldrb	r0, [r5, #5]
    84e4:	70e0      	strb	r0, [r4, #3]
    84e6:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84ea:	0a00      	lsrs	r0, r0, #8
    84ec:	7120      	strb	r0, [r4, #4]
    84ee:	79e8      	ldrb	r0, [r5, #7]
    84f0:	7160      	strb	r0, [r4, #5]
    84f2:	7a28      	ldrb	r0, [r5, #8]
    84f4:	71a0      	strb	r0, [r4, #6]
    84f6:	8928      	ldrh	r0, [r5, #8]
    84f8:	0a00      	lsrs	r0, r0, #8
    84fa:	71e0      	strb	r0, [r4, #7]
    84fc:	7aa8      	ldrb	r0, [r5, #10]
    84fe:	7220      	strb	r0, [r4, #8]
    8500:	8968      	ldrh	r0, [r5, #10]
    8502:	0a00      	lsrs	r0, r0, #8
    8504:	7260      	strb	r0, [r4, #9]
    8506:	2008      	movs	r0, #8
    8508:	e0a4      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    850a:	2010      	movs	r0, #16
    850c:	e000      	b.n	8510 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    850e:	201a      	movs	r0, #26
    8510:	7020      	strb	r0, [r4, #0]
    8512:	7928      	ldrb	r0, [r5, #4]
    8514:	70a0      	strb	r0, [r4, #2]
    8516:	2001      	movs	r0, #1
    8518:	e09c      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    851a:	2029      	movs	r0, #41	; 0x29
    851c:	f7f8 fc4c 	bl	db8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    8520:	b148      	cbz	r0, 8536 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    8522:	7026      	strb	r6, [r4, #0]
    8524:	2029      	movs	r0, #41	; 0x29
    8526:	70a0      	strb	r0, [r4, #2]
    8528:	2221      	movs	r2, #33	; 0x21
    852a:	1d29      	adds	r1, r5, #4
    852c:	1ce0      	adds	r0, r4, #3
    852e:	f002 f955 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8532:	2022      	movs	r0, #34	; 0x22
    8534:	e08e      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    8536:	200a      	movs	r0, #10
    8538:	f7f8 fc3e 	bl	db8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    853c:	2800      	cmp	r0, #0
    853e:	4629      	mov	r1, r5
    8540:	4620      	mov	r0, r4
    8542:	d002      	beq.n	854a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    8544:	f000 f95b 	bl	87fe <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    8548:	e082      	b.n	8650 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    854a:	f000 f92f 	bl	87ac <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    854e:	e07f      	b.n	8650 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    8550:	7026      	strb	r6, [r4, #0]
    8552:	2014      	movs	r0, #20
    8554:	70a0      	strb	r0, [r4, #2]
    8556:	7928      	ldrb	r0, [r5, #4]
    8558:	70e0      	strb	r0, [r4, #3]
    855a:	88a8      	ldrh	r0, [r5, #4]
    855c:	0a00      	lsrs	r0, r0, #8
    855e:	7120      	strb	r0, [r4, #4]
    8560:	79a8      	ldrb	r0, [r5, #6]
    8562:	e0c0      	b.n	86e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    8564:	223e      	movs	r2, #62	; 0x3e
    8566:	7022      	strb	r2, [r4, #0]
    8568:	2204      	movs	r2, #4
    856a:	70a2      	strb	r2, [r4, #2]
    856c:	6868      	ldr	r0, [r5, #4]
    856e:	f8c4 0003 	str.w	r0, [r4, #3]
    8572:	68a8      	ldr	r0, [r5, #8]
    8574:	f8c4 0007 	str.w	r0, [r4, #7]
    8578:	89a8      	ldrh	r0, [r5, #12]
    857a:	f8a4 000b 	strh.w	r0, [r4, #11]
    857e:	7ba8      	ldrb	r0, [r5, #14]
    8580:	7360      	strb	r0, [r4, #13]
    8582:	e000      	b.n	8586 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    8584:	e068      	b.n	8658 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    8586:	200c      	movs	r0, #12
    8588:	e064      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    858a:	7026      	strb	r6, [r4, #0]
    858c:	70a2      	strb	r2, [r4, #2]
    858e:	7928      	ldrb	r0, [r5, #4]
    8590:	70e0      	strb	r0, [r4, #3]
    8592:	79a8      	ldrb	r0, [r5, #6]
    8594:	7120      	strb	r0, [r4, #4]
    8596:	88e8      	ldrh	r0, [r5, #6]
    8598:	0a00      	lsrs	r0, r0, #8
    859a:	7160      	strb	r0, [r4, #5]
    859c:	7a28      	ldrb	r0, [r5, #8]
    859e:	71a0      	strb	r0, [r4, #6]
    85a0:	8928      	ldrh	r0, [r5, #8]
    85a2:	0a00      	lsrs	r0, r0, #8
    85a4:	71e0      	strb	r0, [r4, #7]
    85a6:	7aa8      	ldrb	r0, [r5, #10]
    85a8:	7220      	strb	r0, [r4, #8]
    85aa:	8968      	ldrh	r0, [r5, #10]
    85ac:	0a00      	lsrs	r0, r0, #8
    85ae:	7260      	strb	r0, [r4, #9]
    85b0:	7b28      	ldrb	r0, [r5, #12]
    85b2:	72a0      	strb	r0, [r4, #10]
    85b4:	89a8      	ldrh	r0, [r5, #12]
    85b6:	0a00      	lsrs	r0, r0, #8
    85b8:	72e0      	strb	r0, [r4, #11]
    85ba:	e0d1      	b.n	8760 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    85bc:	7026      	strb	r6, [r4, #0]
    85be:	70a7      	strb	r7, [r4, #2]
    85c0:	7928      	ldrb	r0, [r5, #4]
    85c2:	70e0      	strb	r0, [r4, #3]
    85c4:	88a8      	ldrh	r0, [r5, #4]
    85c6:	0a00      	lsrs	r0, r0, #8
    85c8:	7120      	strb	r0, [r4, #4]
    85ca:	f8d5 0006 	ldr.w	r0, [r5, #6]
    85ce:	f8c4 0005 	str.w	r0, [r4, #5]
    85d2:	f8d5 000a 	ldr.w	r0, [r5, #10]
    85d6:	f8c4 0009 	str.w	r0, [r4, #9]
    85da:	89e8      	ldrh	r0, [r5, #14]
    85dc:	f8a4 000d 	strh.w	r0, [r4, #13]
    85e0:	e0e2      	b.n	87a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    85e2:	2011      	movs	r0, #17
    85e4:	e045      	b.n	8672 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    85e6:	7027      	strb	r7, [r4, #0]
    85e8:	7928      	ldrb	r0, [r5, #4]
    85ea:	70a0      	strb	r0, [r4, #2]
    85ec:	7968      	ldrb	r0, [r5, #5]
    85ee:	70e0      	strb	r0, [r4, #3]
    85f0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    85f4:	0a00      	lsrs	r0, r0, #8
    85f6:	7120      	strb	r0, [r4, #4]
    85f8:	79e8      	ldrb	r0, [r5, #7]
    85fa:	e074      	b.n	86e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    85fc:	2008      	movs	r0, #8
    85fe:	7020      	strb	r0, [r4, #0]
    8600:	7928      	ldrb	r0, [r5, #4]
    8602:	70a0      	strb	r0, [r4, #2]
    8604:	79a8      	ldrb	r0, [r5, #6]
    8606:	70e0      	strb	r0, [r4, #3]
    8608:	88e8      	ldrh	r0, [r5, #6]
    860a:	0a00      	lsrs	r0, r0, #8
    860c:	7120      	strb	r0, [r4, #4]
    860e:	7a28      	ldrb	r0, [r5, #8]
    8610:	e069      	b.n	86e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    8612:	2030      	movs	r0, #48	; 0x30
    8614:	7020      	strb	r0, [r4, #0]
    8616:	7928      	ldrb	r0, [r5, #4]
    8618:	70a0      	strb	r0, [r4, #2]
    861a:	79a8      	ldrb	r0, [r5, #6]
    861c:	70e0      	strb	r0, [r4, #3]
    861e:	88e8      	ldrh	r0, [r5, #6]
    8620:	0a00      	lsrs	r0, r0, #8
    8622:	7120      	strb	r0, [r4, #4]
    8624:	2003      	movs	r0, #3
    8626:	e015      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    8628:	7026      	strb	r6, [r4, #0]
    862a:	2007      	movs	r0, #7
    862c:	e060      	b.n	86f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    862e:	7026      	strb	r6, [r4, #0]
    8630:	70a3      	strb	r3, [r4, #2]
    8632:	7928      	ldrb	r0, [r5, #4]
    8634:	70e0      	strb	r0, [r4, #3]
    8636:	79a8      	ldrb	r0, [r5, #6]
    8638:	7120      	strb	r0, [r4, #4]
    863a:	88e8      	ldrh	r0, [r5, #6]
    863c:	0a00      	lsrs	r0, r0, #8
    863e:	7160      	strb	r0, [r4, #5]
    8640:	7a28      	ldrb	r0, [r5, #8]
    8642:	71a0      	strb	r0, [r4, #6]
    8644:	7a68      	ldrb	r0, [r5, #9]
    8646:	e029      	b.n	869c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    8648:	1d29      	adds	r1, r5, #4
    864a:	4620      	mov	r0, r4
    864c:	f7f8 fb74 	bl	d38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    8650:	2800      	cmp	r0, #0
    8652:	d001      	beq.n	8658 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    8654:	7060      	strb	r0, [r4, #1]
    8656:	1c80      	adds	r0, r0, #2
    8658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    865c:	e08f      	b.n	877e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    865e:	e063      	b.n	8728 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    8660:	e044      	b.n	86ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    8662:	e06f      	b.n	8744 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    8664:	e07e      	b.n	8764 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    8666:	e036      	b.n	86d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    8668:	e01e      	b.n	86a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    866a:	e01a      	b.n	86a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    866c:	e009      	b.n	8682 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    866e:	e7ff      	b.n	8670 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    8670:	2057      	movs	r0, #87	; 0x57
    8672:	7020      	strb	r0, [r4, #0]
    8674:	7928      	ldrb	r0, [r5, #4]
    8676:	70a0      	strb	r0, [r4, #2]
    8678:	88a8      	ldrh	r0, [r5, #4]
    867a:	0a00      	lsrs	r0, r0, #8
    867c:	70e0      	strb	r0, [r4, #3]
    867e:	2002      	movs	r0, #2
    8680:	e7e8      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    8682:	7026      	strb	r6, [r4, #0]
    8684:	2012      	movs	r0, #18
    8686:	70a0      	strb	r0, [r4, #2]
    8688:	7928      	ldrb	r0, [r5, #4]
    868a:	70e0      	strb	r0, [r4, #3]
    868c:	7968      	ldrb	r0, [r5, #5]
    868e:	7120      	strb	r0, [r4, #4]
    8690:	79a8      	ldrb	r0, [r5, #6]
    8692:	7160      	strb	r0, [r4, #5]
    8694:	88e8      	ldrh	r0, [r5, #6]
    8696:	0a00      	lsrs	r0, r0, #8
    8698:	71a0      	strb	r0, [r4, #6]
    869a:	7a28      	ldrb	r0, [r5, #8]
    869c:	71e0      	strb	r0, [r4, #7]
    869e:	2006      	movs	r0, #6
    86a0:	e7d8      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    86a2:	7026      	strb	r6, [r4, #0]
    86a4:	2020      	movs	r0, #32
    86a6:	e041      	b.n	872c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    86a8:	7026      	strb	r6, [r4, #0]
    86aa:	2021      	movs	r0, #33	; 0x21
    86ac:	70a0      	strb	r0, [r4, #2]
    86ae:	7928      	ldrb	r0, [r5, #4]
    86b0:	70e0      	strb	r0, [r4, #3]
    86b2:	7968      	ldrb	r0, [r5, #5]
    86b4:	7120      	strb	r0, [r4, #4]
    86b6:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    86ba:	0a00      	lsrs	r0, r0, #8
    86bc:	7160      	strb	r0, [r4, #5]
    86be:	79e8      	ldrb	r0, [r5, #7]
    86c0:	71a0      	strb	r0, [r4, #6]
    86c2:	7a28      	ldrb	r0, [r5, #8]
    86c4:	71e0      	strb	r0, [r4, #7]
    86c6:	7a68      	ldrb	r0, [r5, #9]
    86c8:	7220      	strb	r0, [r4, #8]
    86ca:	7aa8      	ldrb	r0, [r5, #10]
    86cc:	7260      	strb	r0, [r4, #9]
    86ce:	7ae8      	ldrb	r0, [r5, #11]
    86d0:	72a0      	strb	r0, [r4, #10]
    86d2:	2009      	movs	r0, #9
    86d4:	e7be      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    86d6:	7021      	strb	r1, [r4, #0]
    86d8:	20a1      	movs	r0, #161	; 0xa1
    86da:	70a0      	strb	r0, [r4, #2]
    86dc:	7928      	ldrb	r0, [r5, #4]
    86de:	70e0      	strb	r0, [r4, #3]
    86e0:	7968      	ldrb	r0, [r5, #5]
    86e2:	7120      	strb	r0, [r4, #4]
    86e4:	2000      	movs	r0, #0
    86e6:	7160      	strb	r0, [r4, #5]
    86e8:	2004      	movs	r0, #4
    86ea:	e7b3      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    86ec:	7021      	strb	r1, [r4, #0]
    86ee:	20a2      	movs	r0, #162	; 0xa2
    86f0:	70a0      	strb	r0, [r4, #2]
    86f2:	7928      	ldrb	r0, [r5, #4]
    86f4:	70e0      	strb	r0, [r4, #3]
    86f6:	88a8      	ldrh	r0, [r5, #4]
    86f8:	0a00      	lsrs	r0, r0, #8
    86fa:	7120      	strb	r0, [r4, #4]
    86fc:	79a8      	ldrb	r0, [r5, #6]
    86fe:	7160      	strb	r0, [r4, #5]
    8700:	88e8      	ldrh	r0, [r5, #6]
    8702:	0a00      	lsrs	r0, r0, #8
    8704:	71a0      	strb	r0, [r4, #6]
    8706:	7a28      	ldrb	r0, [r5, #8]
    8708:	71e0      	strb	r0, [r4, #7]
    870a:	8928      	ldrh	r0, [r5, #8]
    870c:	0a00      	lsrs	r0, r0, #8
    870e:	7220      	strb	r0, [r4, #8]
    8710:	7aa8      	ldrb	r0, [r5, #10]
    8712:	7260      	strb	r0, [r4, #9]
    8714:	8968      	ldrh	r0, [r5, #10]
    8716:	0a00      	lsrs	r0, r0, #8
    8718:	72a0      	strb	r0, [r4, #10]
    871a:	7b28      	ldrb	r0, [r5, #12]
    871c:	72e0      	strb	r0, [r4, #11]
    871e:	89a8      	ldrh	r0, [r5, #12]
    8720:	0a00      	lsrs	r0, r0, #8
    8722:	7320      	strb	r0, [r4, #12]
    8724:	200b      	movs	r0, #11
    8726:	e795      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    8728:	7021      	strb	r1, [r4, #0]
    872a:	20a3      	movs	r0, #163	; 0xa3
    872c:	70a0      	strb	r0, [r4, #2]
    872e:	7928      	ldrb	r0, [r5, #4]
    8730:	70e0      	strb	r0, [r4, #3]
    8732:	88a8      	ldrh	r0, [r5, #4]
    8734:	0a00      	lsrs	r0, r0, #8
    8736:	7120      	strb	r0, [r4, #4]
    8738:	79a8      	ldrb	r0, [r5, #6]
    873a:	7160      	strb	r0, [r4, #5]
    873c:	79e8      	ldrb	r0, [r5, #7]
    873e:	71a0      	strb	r0, [r4, #6]
    8740:	2005      	movs	r0, #5
    8742:	e787      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    8744:	7026      	strb	r6, [r4, #0]
    8746:	2013      	movs	r0, #19
    8748:	70a0      	strb	r0, [r4, #2]
    874a:	7928      	ldrb	r0, [r5, #4]
    874c:	70e0      	strb	r0, [r4, #3]
    874e:	7968      	ldrb	r0, [r5, #5]
    8750:	7120      	strb	r0, [r4, #4]
    8752:	f8d5 0006 	ldr.w	r0, [r5, #6]
    8756:	f8c4 0005 	str.w	r0, [r4, #5]
    875a:	8968      	ldrh	r0, [r5, #10]
    875c:	f8a4 0009 	strh.w	r0, [r4, #9]
    8760:	200a      	movs	r0, #10
    8762:	e777      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    8764:	7021      	strb	r1, [r4, #0]
    8766:	20a4      	movs	r0, #164	; 0xa4
    8768:	70a0      	strb	r0, [r4, #2]
    876a:	7928      	ldrb	r0, [r5, #4]
    876c:	70e0      	strb	r0, [r4, #3]
    876e:	88a8      	ldrh	r0, [r5, #4]
    8770:	0a00      	lsrs	r0, r0, #8
    8772:	7120      	strb	r0, [r4, #4]
    8774:	79a8      	ldrb	r0, [r5, #6]
    8776:	7160      	strb	r0, [r4, #5]
    8778:	79e8      	ldrb	r0, [r5, #7]
    877a:	71a0      	strb	r0, [r4, #6]
    877c:	e6ac      	b.n	84d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    877e:	7021      	strb	r1, [r4, #0]
    8780:	2080      	movs	r0, #128	; 0x80
    8782:	70a0      	strb	r0, [r4, #2]
    8784:	88a9      	ldrh	r1, [r5, #4]
    8786:	f8a4 1003 	strh.w	r1, [r4, #3]
    878a:	88e9      	ldrh	r1, [r5, #6]
    878c:	f8a4 1005 	strh.w	r1, [r4, #5]
    8790:	7a29      	ldrb	r1, [r5, #8]
    8792:	71e1      	strb	r1, [r4, #7]
    8794:	8969      	ldrh	r1, [r5, #10]
    8796:	8121      	strh	r1, [r4, #8]
    8798:	89a9      	ldrh	r1, [r5, #12]
    879a:	8161      	strh	r1, [r4, #10]
    879c:	89e9      	ldrh	r1, [r5, #14]
    879e:	81a1      	strh	r1, [r4, #12]
    87a0:	7c29      	ldrb	r1, [r5, #16]
    87a2:	f001 0101 	and.w	r1, r1, #1
    87a6:	73a1      	strb	r1, [r4, #14]
    87a8:	200d      	movs	r0, #13
    87aa:	e753      	b.n	8654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

000087ac <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    87ac:	223e      	movs	r2, #62	; 0x3e
    87ae:	7002      	strb	r2, [r0, #0]
    87b0:	2201      	movs	r2, #1
    87b2:	7082      	strb	r2, [r0, #2]
    87b4:	790a      	ldrb	r2, [r1, #4]
    87b6:	70c2      	strb	r2, [r0, #3]
    87b8:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    87bc:	7102      	strb	r2, [r0, #4]
    87be:	880a      	ldrh	r2, [r1, #0]
    87c0:	0a12      	lsrs	r2, r2, #8
    87c2:	7142      	strb	r2, [r0, #5]
    87c4:	788a      	ldrb	r2, [r1, #2]
    87c6:	7182      	strb	r2, [r0, #6]
    87c8:	78ca      	ldrb	r2, [r1, #3]
    87ca:	71c2      	strb	r2, [r0, #7]
    87cc:	684a      	ldr	r2, [r1, #4]
    87ce:	6082      	str	r2, [r0, #8]
    87d0:	890a      	ldrh	r2, [r1, #8]
    87d2:	8182      	strh	r2, [r0, #12]
    87d4:	7d8a      	ldrb	r2, [r1, #22]
    87d6:	7382      	strb	r2, [r0, #14]
    87d8:	8aca      	ldrh	r2, [r1, #22]
    87da:	0a12      	lsrs	r2, r2, #8
    87dc:	73c2      	strb	r2, [r0, #15]
    87de:	7e0a      	ldrb	r2, [r1, #24]
    87e0:	7402      	strb	r2, [r0, #16]
    87e2:	8b0a      	ldrh	r2, [r1, #24]
    87e4:	0a12      	lsrs	r2, r2, #8
    87e6:	7442      	strb	r2, [r0, #17]
    87e8:	7e8a      	ldrb	r2, [r1, #26]
    87ea:	7482      	strb	r2, [r0, #18]
    87ec:	8b4a      	ldrh	r2, [r1, #26]
    87ee:	0a12      	lsrs	r2, r2, #8
    87f0:	74c2      	strb	r2, [r0, #19]
    87f2:	7f09      	ldrb	r1, [r1, #28]
    87f4:	7501      	strb	r1, [r0, #20]
    87f6:	2113      	movs	r1, #19
    87f8:	7041      	strb	r1, [r0, #1]
    87fa:	4608      	mov	r0, r1
    87fc:	4770      	bx	lr
    87fe:	223e      	movs	r2, #62	; 0x3e
    8800:	7002      	strb	r2, [r0, #0]
    8802:	220a      	movs	r2, #10
    8804:	7082      	strb	r2, [r0, #2]
    8806:	790a      	ldrb	r2, [r1, #4]
    8808:	70c2      	strb	r2, [r0, #3]
    880a:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    880e:	7102      	strb	r2, [r0, #4]
    8810:	880a      	ldrh	r2, [r1, #0]
    8812:	0a12      	lsrs	r2, r2, #8
    8814:	7142      	strb	r2, [r0, #5]
    8816:	788a      	ldrb	r2, [r1, #2]
    8818:	7182      	strb	r2, [r0, #6]
    881a:	78ca      	ldrb	r2, [r1, #3]
    881c:	71c2      	strb	r2, [r0, #7]
    881e:	684a      	ldr	r2, [r1, #4]
    8820:	6082      	str	r2, [r0, #8]
    8822:	890a      	ldrh	r2, [r1, #8]
    8824:	8182      	strh	r2, [r0, #12]
    8826:	f8d1 200a 	ldr.w	r2, [r1, #10]
    882a:	f8c0 200e 	str.w	r2, [r0, #14]
    882e:	89ca      	ldrh	r2, [r1, #14]
    8830:	8242      	strh	r2, [r0, #18]
    8832:	690a      	ldr	r2, [r1, #16]
    8834:	6142      	str	r2, [r0, #20]
    8836:	8a8a      	ldrh	r2, [r1, #20]
    8838:	8302      	strh	r2, [r0, #24]
    883a:	7d8a      	ldrb	r2, [r1, #22]
    883c:	7682      	strb	r2, [r0, #26]
    883e:	8aca      	ldrh	r2, [r1, #22]
    8840:	0a12      	lsrs	r2, r2, #8
    8842:	76c2      	strb	r2, [r0, #27]
    8844:	7e0a      	ldrb	r2, [r1, #24]
    8846:	7702      	strb	r2, [r0, #28]
    8848:	8b0a      	ldrh	r2, [r1, #24]
    884a:	0a12      	lsrs	r2, r2, #8
    884c:	7742      	strb	r2, [r0, #29]
    884e:	7e8a      	ldrb	r2, [r1, #26]
    8850:	7782      	strb	r2, [r0, #30]
    8852:	8b4a      	ldrh	r2, [r1, #26]
    8854:	0a12      	lsrs	r2, r2, #8
    8856:	77c2      	strb	r2, [r0, #31]
    8858:	7f09      	ldrb	r1, [r1, #28]
    885a:	f880 1020 	strb.w	r1, [r0, #32]
    885e:	211f      	movs	r1, #31
    8860:	7041      	strb	r1, [r0, #1]
    8862:	4608      	mov	r0, r1
    8864:	4770      	bx	lr
    8866:	094a      	lsrs	r2, r1, #5
    8868:	f001 011f 	and.w	r1, r1, #31
    886c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    8870:	40c8      	lsrs	r0, r1
    8872:	f000 0001 	and.w	r0, r0, #1
    8876:	4770      	bx	lr

00008878 <sdc_hci_get>:
    8878:	b510      	push	{r4, lr}
    887a:	460c      	mov	r4, r1
    887c:	b130      	cbz	r0, 888c <sdc_hci_get+0x14>
    887e:	b12c      	cbz	r4, 888c <sdc_hci_get+0x14>
    8880:	f7f8 fa04 	bl	c8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    8884:	b128      	cbz	r0, 8892 <sdc_hci_get+0x1a>
    8886:	7020      	strb	r0, [r4, #0]
    8888:	2000      	movs	r0, #0
    888a:	bd10      	pop	{r4, pc}
    888c:	f06f 0015 	mvn.w	r0, #21
    8890:	bd10      	pop	{r4, pc}
    8892:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8896:	bd10      	pop	{r4, pc}

00008898 <sdc_hci_cmd_cb_set_event_mask>:
    8898:	b510      	push	{r4, lr}
    889a:	f7f8 fa9d 	bl	dd8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    889e:	2000      	movs	r0, #0
    88a0:	bd10      	pop	{r4, pc}

000088a2 <sdc_hci_cmd_vs_conn_event_extend>:
    88a2:	b508      	push	{r3, lr}
    88a4:	7800      	ldrb	r0, [r0, #0]
    88a6:	f88d 0000 	strb.w	r0, [sp]
    88aa:	4668      	mov	r0, sp
    88ac:	f001 fb0f 	bl	9ece <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    88b0:	bd08      	pop	{r3, pc}

000088b2 <sdc_hci_cmd_vs_conn_update>:
    88b2:	2001      	movs	r0, #1
    88b4:	4770      	bx	lr

000088b6 <sdc_hci_cmd_vs_event_length_set>:
    88b6:	f7fa bc29 	b.w	310c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

000088ba <sdc_hci_cmd_vs_llpm_mode_set>:
    88ba:	2001      	movs	r0, #1
    88bc:	4770      	bx	lr

000088be <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    88be:	7800      	ldrb	r0, [r0, #0]
    88c0:	b100      	cbz	r0, 88c4 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    88c2:	2001      	movs	r0, #1
    88c4:	f001 bad8 	b.w	9e78 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

000088c8 <sdc_hci_cmd_vs_set_adv_randomness>:
    88c8:	f001 badb 	b.w	9e82 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

000088cc <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    88cc:	b510      	push	{r4, lr}
    88ce:	4604      	mov	r4, r0
    88d0:	f7ff fa36 	bl	7d40 <mpsl_temperature_get>
    88d4:	17c1      	asrs	r1, r0, #31
    88d6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    88da:	1080      	asrs	r0, r0, #2
    88dc:	287f      	cmp	r0, #127	; 0x7f
    88de:	dd01      	ble.n	88e4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    88e0:	207f      	movs	r0, #127	; 0x7f
    88e2:	e004      	b.n	88ee <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    88e4:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    88e8:	4288      	cmp	r0, r1
    88ea:	da00      	bge.n	88ee <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    88ec:	4608      	mov	r0, r1
    88ee:	7020      	strb	r0, [r4, #0]
    88f0:	2000      	movs	r0, #0
    88f2:	bd10      	pop	{r4, pc}

000088f4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    88f4:	f001 bada 	b.w	9eac <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

000088f8 <sdc_hci_cmd_ip_read_bd_addr>:
    88f8:	f001 bbac 	b.w	a054 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

000088fc <sdc_hci_cmd_ip_read_local_version_information>:
    88fc:	f7fa bc14 	b.w	3128 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008900 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8900:	f001 b92a 	b.w	9b58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00008904 <sdc_hci_cmd_le_clear_filter_accept_list>:
    8904:	f001 b93f 	b.w	9b86 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008908 <sdc_hci_cmd_le_encrypt>:
    8908:	f001 b94a 	b.w	9ba0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000890c <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    890c:	8802      	ldrh	r2, [r0, #0]
    890e:	800a      	strh	r2, [r1, #0]
    8910:	f001 b94f 	b.w	9bb2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00008914 <sdc_hci_cmd_le_rand>:
    8914:	f001 b966 	b.w	9be4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008918 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    8918:	f001 b96a 	b.w	9bf0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000891c <sdc_hci_cmd_le_read_buffer_size>:
    891c:	f7fa bb84 	b.w	3028 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008920 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8920:	f001 b981 	b.w	9c26 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00008924 <sdc_hci_cmd_le_read_transmit_power>:
    8924:	f001 b96f 	b.w	9c06 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008928 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8928:	f001 b984 	b.w	9c34 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000892c <sdc_hci_cmd_le_set_adv_data>:
    892c:	f001 b997 	b.w	9c5e <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00008930 <sdc_hci_cmd_le_set_adv_enable>:
    8930:	f001 b9aa 	b.w	9c88 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00008934 <sdc_hci_cmd_le_set_adv_params>:
    8934:	f001 b9db 	b.w	9cee <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00008938 <sdc_hci_cmd_le_set_data_related_address_changes>:
    8938:	f001 ba6e 	b.w	9e18 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000893c <sdc_hci_cmd_le_set_event_mask>:
    893c:	b510      	push	{r4, lr}
    893e:	f7f8 fa43 	bl	dc8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    8942:	2000      	movs	r0, #0
    8944:	bd10      	pop	{r4, pc}

00008946 <sdc_hci_cmd_le_set_random_address>:
    8946:	f001 ba74 	b.w	9e32 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000894a <sdc_hci_cmd_le_set_scan_response_data>:
    894a:	f001 ba80 	b.w	9e4e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    894e:	b570      	push	{r4, r5, r6, lr}
    8950:	880b      	ldrh	r3, [r1, #0]
    8952:	7cc4      	ldrb	r4, [r0, #19]
    8954:	f100 0518 	add.w	r5, r0, #24
    8958:	f3c3 060e 	ubfx	r6, r3, #0, #15
    895c:	8802      	ldrh	r2, [r0, #0]
    895e:	4435      	add	r5, r6
    8960:	1d64      	adds	r4, r4, #5
    8962:	882d      	ldrh	r5, [r5, #0]
    8964:	4422      	add	r2, r4
    8966:	b292      	uxth	r2, r2
    8968:	4425      	add	r5, r4
    896a:	1e54      	subs	r4, r2, #1
    896c:	442c      	add	r4, r5
    896e:	fb94 f4f2 	sdiv	r4, r4, r2
    8972:	fb02 6204 	mla	r2, r2, r4, r6
    8976:	8840      	ldrh	r0, [r0, #2]
    8978:	b292      	uxth	r2, r2
    897a:	4290      	cmp	r0, r2
    897c:	d903      	bls.n	8986 <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    897e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    8982:	4310      	orrs	r0, r2
    8984:	e002      	b.n	898c <sdc_hci_cmd_le_set_scan_response_data+0x42>
    8986:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    898a:	4398      	bics	r0, r3
    898c:	8008      	strh	r0, [r1, #0]
    898e:	bd70      	pop	{r4, r5, r6, pc}

00008990 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    8990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8994:	461d      	mov	r5, r3
    8996:	4616      	mov	r6, r2
    8998:	9f06      	ldr	r7, [sp, #24]
    899a:	460b      	mov	r3, r1
    899c:	4604      	mov	r4, r0
    899e:	463a      	mov	r2, r7
    89a0:	4629      	mov	r1, r5
    89a2:	4630      	mov	r0, r6
    89a4:	f000 f839 	bl	8a1a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    89a8:	4283      	cmp	r3, r0
    89aa:	d201      	bcs.n	89b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    89ac:	219e      	movs	r1, #158	; 0x9e
    89ae:	e012      	b.n	89d6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    89b0:	07a0      	lsls	r0, r4, #30
    89b2:	d001      	beq.n	89b8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    89b4:	219f      	movs	r1, #159	; 0x9f
    89b6:	e00e      	b.n	89d6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    89b8:	2218      	movs	r2, #24
    89ba:	2100      	movs	r1, #0
    89bc:	4620      	mov	r0, r4
    89be:	f001 ff87 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    89c2:	19a8      	adds	r0, r5, r6
    89c4:	1d40      	adds	r0, r0, #5
    89c6:	4378      	muls	r0, r7
    89c8:	b280      	uxth	r0, r0
    89ca:	74e5      	strb	r5, [r4, #19]
    89cc:	8060      	strh	r0, [r4, #2]
    89ce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    89d2:	d903      	bls.n	89dc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    89d4:	21a4      	movs	r1, #164	; 0xa4
    89d6:	2014      	movs	r0, #20
    89d8:	f7f8 f89c 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89dc:	8026      	strh	r6, [r4, #0]
    89de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000089e2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    89e2:	b570      	push	{r4, r5, r6, lr}
    89e4:	460b      	mov	r3, r1
    89e6:	4604      	mov	r4, r0
    89e8:	f100 0118 	add.w	r1, r0, #24
    89ec:	8902      	ldrh	r2, [r0, #8]
    89ee:	8880      	ldrh	r0, [r0, #4]
    89f0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    89f4:	440d      	add	r5, r1
    89f6:	4282      	cmp	r2, r0
    89f8:	d101      	bne.n	89fe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    89fa:	2000      	movs	r0, #0
    89fc:	bd70      	pop	{r4, r5, r6, pc}
    89fe:	b123      	cbz	r3, 8a0a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8a00:	7ce2      	ldrb	r2, [r4, #19]
    8a02:	1ca9      	adds	r1, r5, #2
    8a04:	4618      	mov	r0, r3
    8a06:	f001 fee9 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8a0a:	882d      	ldrh	r5, [r5, #0]
    8a0c:	f104 0108 	add.w	r1, r4, #8
    8a10:	4620      	mov	r0, r4
    8a12:	f7ff ff9c 	bl	894e <sdc_hci_cmd_le_set_scan_response_data+0x4>
    8a16:	4628      	mov	r0, r5
    8a18:	bd70      	pop	{r4, r5, r6, pc}

00008a1a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8a1a:	4401      	add	r1, r0
    8a1c:	1d49      	adds	r1, r1, #5
    8a1e:	4351      	muls	r1, r2
    8a20:	b28a      	uxth	r2, r1
    8a22:	2100      	movs	r1, #0
    8a24:	2845      	cmp	r0, #69	; 0x45
    8a26:	d202      	bcs.n	8a2e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8a28:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8a2c:	b281      	uxth	r1, r0
    8a2e:	3218      	adds	r2, #24
    8a30:	1850      	adds	r0, r2, r1
    8a32:	b280      	uxth	r0, r0
    8a34:	4770      	bx	lr

00008a36 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    8a36:	b570      	push	{r4, r5, r6, lr}
    8a38:	2300      	movs	r3, #0
    8a3a:	f1a1 0208 	sub.w	r2, r1, #8
    8a3e:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    8a42:	42a2      	cmp	r2, r4
    8a44:	d304      	bcc.n	8a50 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    8a46:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    8a4a:	2015      	movs	r0, #21
    8a4c:	f7f8 f862 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a50:	6802      	ldr	r2, [r0, #0]
    8a52:	b90a      	cbnz	r2, 8a58 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    8a54:	e01e      	b.n	8a94 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    8a56:	4610      	mov	r0, r2
    8a58:	6802      	ldr	r2, [r0, #0]
    8a5a:	8893      	ldrh	r3, [r2, #4]
    8a5c:	428b      	cmp	r3, r1
    8a5e:	d002      	beq.n	8a66 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    8a60:	6813      	ldr	r3, [r2, #0]
    8a62:	2b00      	cmp	r3, #0
    8a64:	d1f7      	bne.n	8a56 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    8a66:	8894      	ldrh	r4, [r2, #4]
    8a68:	4613      	mov	r3, r2
    8a6a:	428c      	cmp	r4, r1
    8a6c:	d101      	bne.n	8a72 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    8a6e:	6811      	ldr	r1, [r2, #0]
    8a70:	e00d      	b.n	8a8e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    8a72:	f101 0508 	add.w	r5, r1, #8
    8a76:	b2ae      	uxth	r6, r5
    8a78:	2500      	movs	r5, #0
    8a7a:	42b4      	cmp	r4, r6
    8a7c:	d309      	bcc.n	8a92 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    8a7e:	1a64      	subs	r4, r4, r1
    8a80:	4411      	add	r1, r2
    8a82:	600d      	str	r5, [r1, #0]
    8a84:	808c      	strh	r4, [r1, #4]
    8a86:	6802      	ldr	r2, [r0, #0]
    8a88:	6812      	ldr	r2, [r2, #0]
    8a8a:	6002      	str	r2, [r0, #0]
    8a8c:	600a      	str	r2, [r1, #0]
    8a8e:	6001      	str	r1, [r0, #0]
    8a90:	e000      	b.n	8a94 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    8a92:	2300      	movs	r3, #0
    8a94:	4618      	mov	r0, r3
    8a96:	bd70      	pop	{r4, r5, r6, pc}

00008a98 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    8a98:	b510      	push	{r4, lr}
    8a9a:	000c      	movs	r4, r1
    8a9c:	d004      	beq.n	8aa8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    8a9e:	2c08      	cmp	r4, #8
    8aa0:	d207      	bcs.n	8ab2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    8aa2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    8aa6:	e00a      	b.n	8abe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    8aa8:	b108      	cbz	r0, 8aae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    8aaa:	2100      	movs	r1, #0
    8aac:	6001      	str	r1, [r0, #0]
    8aae:	2000      	movs	r0, #0
    8ab0:	bd10      	pop	{r4, pc}
    8ab2:	b158      	cbz	r0, 8acc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    8ab4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    8ab8:	d304      	bcc.n	8ac4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    8aba:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    8abe:	2015      	movs	r0, #21
    8ac0:	f7f8 f828 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ac4:	b2a1      	uxth	r1, r4
    8ac6:	6800      	ldr	r0, [r0, #0]
    8ac8:	f000 f814 	bl	8af4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    8acc:	1d20      	adds	r0, r4, #4
    8ace:	bd10      	pop	{r4, pc}

00008ad0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    8ad0:	2100      	movs	r1, #0
    8ad2:	6802      	ldr	r2, [r0, #0]
    8ad4:	e003      	b.n	8ade <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    8ad6:	8893      	ldrh	r3, [r2, #4]
    8ad8:	6812      	ldr	r2, [r2, #0]
    8ada:	4419      	add	r1, r3
    8adc:	b289      	uxth	r1, r1
    8ade:	2a00      	cmp	r2, #0
    8ae0:	d1f9      	bne.n	8ad6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    8ae2:	f000 b807 	b.w	8af4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00008ae6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    8ae6:	2300      	movs	r3, #0
    8ae8:	600b      	str	r3, [r1, #0]
    8aea:	808a      	strh	r2, [r1, #4]
    8aec:	6802      	ldr	r2, [r0, #0]
    8aee:	600a      	str	r2, [r1, #0]
    8af0:	6001      	str	r1, [r0, #0]
    8af2:	4770      	bx	lr
    8af4:	2300      	movs	r3, #0
    8af6:	6043      	str	r3, [r0, #4]
    8af8:	1d02      	adds	r2, r0, #4
    8afa:	8101      	strh	r1, [r0, #8]
    8afc:	6002      	str	r2, [r0, #0]
    8afe:	4770      	bx	lr
    8b00:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8b04:	8159      	strh	r1, [r3, #10]
    8b06:	4611      	mov	r1, r2
    8b08:	f000 b814 	b.w	8b34 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    8b0c:	b170      	cbz	r0, 8b2c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    8b0e:	7882      	ldrb	r2, [r0, #2]
    8b10:	fbb1 f3f2 	udiv	r3, r1, r2
    8b14:	fb02 1213 	mls	r2, r2, r3, r1
    8b18:	b2d2      	uxtb	r2, r2
    8b1a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8b1e:	895b      	ldrh	r3, [r3, #10]
    8b20:	428b      	cmp	r3, r1
    8b22:	d101      	bne.n	8b28 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    8b24:	4610      	mov	r0, r2
    8b26:	4770      	bx	lr
    8b28:	78c3      	ldrb	r3, [r0, #3]
    8b2a:	b10b      	cbz	r3, 8b30 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    8b2c:	20ff      	movs	r0, #255	; 0xff
    8b2e:	4770      	bx	lr
    8b30:	f7f8 ba8a 	b.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    8b34:	8802      	ldrh	r2, [r0, #0]
    8b36:	fb01 0102 	mla	r1, r1, r2, r0
    8b3a:	7880      	ldrb	r0, [r0, #2]
    8b3c:	220a      	movs	r2, #10
    8b3e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8b42:	4408      	add	r0, r1
    8b44:	4770      	bx	lr

00008b46 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    8b46:	b51c      	push	{r2, r3, r4, lr}
    8b48:	4604      	mov	r4, r0
    8b4a:	2000      	movs	r0, #0
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	9000      	str	r0, [sp, #0]
    8b50:	f88d 4006 	strb.w	r4, [sp, #6]
    8b54:	e00a      	b.n	8b6c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    8b56:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8b5a:	4621      	mov	r1, r4
    8b5c:	f7f8 fb62 	bl	1224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    8b60:	b120      	cbz	r0, 8b6c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    8b62:	f240 217e 	movw	r1, #638	; 0x27e
    8b66:	2017      	movs	r0, #23
    8b68:	f7f7 ffd4 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b6c:	4668      	mov	r0, sp
    8b6e:	f7f8 fb09 	bl	1184 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b72:	2800      	cmp	r0, #0
    8b74:	d0ef      	beq.n	8b56 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    8b76:	bd1c      	pop	{r2, r3, r4, pc}

00008b78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    8b78:	b570      	push	{r4, r5, r6, lr}
    8b7a:	460e      	mov	r6, r1
    8b7c:	461d      	mov	r5, r3
    8b7e:	4611      	mov	r1, r2
    8b80:	f000 f813 	bl	8baa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    8b84:	4604      	mov	r4, r0
    8b86:	4629      	mov	r1, r5
    8b88:	4630      	mov	r0, r6
    8b8a:	f000 f804 	bl	8b96 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    8b8e:	4420      	add	r0, r4
    8b90:	1d00      	adds	r0, r0, #4
    8b92:	b280      	uxth	r0, r0
    8b94:	bd70      	pop	{r4, r5, r6, pc}
    8b96:	b510      	push	{r4, lr}
    8b98:	460a      	mov	r2, r1
    8b9a:	2109      	movs	r1, #9
    8b9c:	f7ff ff3d 	bl	8a1a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8ba0:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8ba4:	1cc0      	adds	r0, r0, #3
    8ba6:	4008      	ands	r0, r1
    8ba8:	bd10      	pop	{r4, pc}
    8baa:	b510      	push	{r4, lr}
    8bac:	460a      	mov	r2, r1
    8bae:	210a      	movs	r1, #10
    8bb0:	f7ff ff33 	bl	8a1a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8bb4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8bb8:	1cc0      	adds	r0, r0, #3
    8bba:	4008      	ands	r0, r1
    8bbc:	bd10      	pop	{r4, pc}
    8bbe:	b109      	cbz	r1, 8bc4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    8bc0:	2100      	movs	r1, #0
    8bc2:	e000      	b.n	8bc6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    8bc4:	2102      	movs	r1, #2
    8bc6:	1843      	adds	r3, r0, r1
    8bc8:	7d1a      	ldrb	r2, [r3, #20]
    8bca:	2a02      	cmp	r2, #2
    8bcc:	d008      	beq.n	8be0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    8bce:	7d5b      	ldrb	r3, [r3, #21]
    8bd0:	2b02      	cmp	r3, #2
    8bd2:	d009      	beq.n	8be8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    8bd4:	2a03      	cmp	r2, #3
    8bd6:	d003      	beq.n	8be0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    8bd8:	2b03      	cmp	r3, #3
    8bda:	d005      	beq.n	8be8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    8bdc:	2000      	movs	r0, #0
    8bde:	4770      	bx	lr
    8be0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8be4:	8b00      	ldrh	r0, [r0, #24]
    8be6:	4770      	bx	lr
    8be8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8bec:	8b40      	ldrh	r0, [r0, #26]
    8bee:	4770      	bx	lr
    8bf0:	b109      	cbz	r1, 8bf6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    8bf2:	2100      	movs	r1, #0
    8bf4:	e000      	b.n	8bf8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    8bf6:	2102      	movs	r1, #2
    8bf8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8bfc:	8b01      	ldrh	r1, [r0, #24]
    8bfe:	b911      	cbnz	r1, 8c06 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    8c00:	8b40      	ldrh	r0, [r0, #26]
    8c02:	2800      	cmp	r0, #0
    8c04:	d000      	beq.n	8c08 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    8c06:	2001      	movs	r0, #1
    8c08:	4770      	bx	lr
    8c0a:	b538      	push	{r3, r4, r5, lr}
    8c0c:	7883      	ldrb	r3, [r0, #2]
    8c0e:	f88d 3000 	strb.w	r3, [sp]
    8c12:	9b00      	ldr	r3, [sp, #0]
    8c14:	9300      	str	r3, [sp, #0]
    8c16:	f89d 3000 	ldrb.w	r3, [sp]
    8c1a:	b95b      	cbnz	r3, 8c34 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    8c1c:	2400      	movs	r4, #0
    8c1e:	b10a      	cbz	r2, 8c24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    8c20:	2300      	movs	r3, #0
    8c22:	e000      	b.n	8c26 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    8c24:	2302      	movs	r3, #2
    8c26:	18c2      	adds	r2, r0, r3
    8c28:	7d15      	ldrb	r5, [r2, #20]
    8c2a:	2d02      	cmp	r5, #2
    8c2c:	d004      	beq.n	8c38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    8c2e:	7d52      	ldrb	r2, [r2, #21]
    8c30:	2a02      	cmp	r2, #2
    8c32:	d004      	beq.n	8c3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    8c34:	2000      	movs	r0, #0
    8c36:	bd38      	pop	{r3, r4, r5, pc}
    8c38:	461a      	mov	r2, r3
    8c3a:	1c5b      	adds	r3, r3, #1
    8c3c:	e000      	b.n	8c40 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    8c3e:	1c5a      	adds	r2, r3, #1
    8c40:	b179      	cbz	r1, 8c62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    8c42:	18c5      	adds	r5, r0, r3
    8c44:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8c48:	752c      	strb	r4, [r5, #20]
    8c4a:	831c      	strh	r4, [r3, #24]
    8c4c:	2303      	movs	r3, #3
    8c4e:	1884      	adds	r4, r0, r2
    8c50:	7523      	strb	r3, [r4, #20]
    8c52:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8c56:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    8c5a:	685b      	ldr	r3, [r3, #4]
    8c5c:	600b      	str	r3, [r1, #0]
    8c5e:	8b00      	ldrh	r0, [r0, #24]
    8c60:	8088      	strh	r0, [r1, #4]
    8c62:	2001      	movs	r0, #1
    8c64:	bd38      	pop	{r3, r4, r5, pc}
    8c66:	b510      	push	{r4, lr}
    8c68:	b109      	cbz	r1, 8c6e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    8c6a:	2100      	movs	r1, #0
    8c6c:	e000      	b.n	8c70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    8c6e:	2102      	movs	r1, #2
    8c70:	1843      	adds	r3, r0, r1
    8c72:	7d1c      	ldrb	r4, [r3, #20]
    8c74:	4294      	cmp	r4, r2
    8c76:	d103      	bne.n	8c80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    8c78:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8c7c:	8b00      	ldrh	r0, [r0, #24]
    8c7e:	bd10      	pop	{r4, pc}
    8c80:	7d5b      	ldrb	r3, [r3, #21]
    8c82:	4293      	cmp	r3, r2
    8c84:	d103      	bne.n	8c8e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    8c86:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8c8a:	8b40      	ldrh	r0, [r0, #26]
    8c8c:	bd10      	pop	{r4, pc}
    8c8e:	2000      	movs	r0, #0
    8c90:	bd10      	pop	{r4, pc}
    8c92:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    8c96:	d201      	bcs.n	8c9c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    8c98:	0841      	lsrs	r1, r0, #1
    8c9a:	e000      	b.n	8c9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    8c9c:	21ff      	movs	r1, #255	; 0xff
    8c9e:	1a40      	subs	r0, r0, r1
    8ca0:	f240 6172 	movw	r1, #1650	; 0x672
    8ca4:	4288      	cmp	r0, r1
    8ca6:	db00      	blt.n	8caa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    8ca8:	4608      	mov	r0, r1
    8caa:	b280      	uxth	r0, r0
    8cac:	4770      	bx	lr

00008cae <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    8cae:	2101      	movs	r1, #1
    8cb0:	f7ff bf85 	b.w	8bbe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

00008cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    8cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cb8:	4606      	mov	r6, r0
    8cba:	f342 0780 	sbfx	r7, r2, #2, #1
    8cbe:	7848      	ldrb	r0, [r1, #1]
    8cc0:	460c      	mov	r4, r1
    8cc2:	f022 0504 	bic.w	r5, r2, #4
    8cc6:	1c7f      	adds	r7, r7, #1
    8cc8:	b100      	cbz	r0, 8ccc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    8cca:	b90d      	cbnz	r5, 8cd0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    8ccc:	4328      	orrs	r0, r5
    8cce:	d104      	bne.n	8cda <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    8cd0:	b145      	cbz	r5, 8ce4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    8cd2:	2100      	movs	r1, #0
    8cd4:	4620      	mov	r0, r4
    8cd6:	f7f8 fb9b 	bl	1410 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    8cda:	20ff      	movs	r0, #255	; 0xff
    8cdc:	70a0      	strb	r0, [r4, #2]
    8cde:	b11f      	cbz	r7, 8ce8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    8ce0:	2000      	movs	r0, #0
    8ce2:	e002      	b.n	8cea <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    8ce4:	2101      	movs	r1, #1
    8ce6:	e7f5      	b.n	8cd4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    8ce8:	2002      	movs	r0, #2
    8cea:	1821      	adds	r1, r4, r0
    8cec:	7d09      	ldrb	r1, [r1, #20]
    8cee:	2903      	cmp	r1, #3
    8cf0:	d102      	bne.n	8cf8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    8cf2:	2d02      	cmp	r5, #2
    8cf4:	d000      	beq.n	8cf8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    8cf6:	1c40      	adds	r0, r0, #1
    8cf8:	1822      	adds	r2, r4, r0
    8cfa:	2101      	movs	r1, #1
    8cfc:	7511      	strb	r1, [r2, #20]
    8cfe:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    8d02:	2200      	movs	r2, #0
    8d04:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8d08:	830a      	strh	r2, [r1, #24]
    8d0a:	6840      	ldr	r0, [r0, #4]
    8d0c:	70a2      	strb	r2, [r4, #2]
    8d0e:	4631      	mov	r1, r6
    8d10:	f362 010f 	bfi	r1, r2, #0, #16
    8d14:	e9c6 0100 	strd	r0, r1, [r6]
    8d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008d1c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    8d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d20:	461e      	mov	r6, r3
    8d22:	4613      	mov	r3, r2
    8d24:	4604      	mov	r4, r0
    8d26:	b109      	cbz	r1, 8d2c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    8d28:	2000      	movs	r0, #0
    8d2a:	e000      	b.n	8d2e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    8d2c:	2002      	movs	r0, #2
    8d2e:	21ff      	movs	r1, #255	; 0xff
    8d30:	70a1      	strb	r1, [r4, #2]
    8d32:	1821      	adds	r1, r4, r0
    8d34:	7d0a      	ldrb	r2, [r1, #20]
    8d36:	2a01      	cmp	r2, #1
    8d38:	d003      	beq.n	8d42 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    8d3a:	7d49      	ldrb	r1, [r1, #21]
    8d3c:	2901      	cmp	r1, #1
    8d3e:	d10c      	bne.n	8d5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    8d40:	1c40      	adds	r0, r0, #1
    8d42:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    8d46:	2700      	movs	r7, #0
    8d48:	8b29      	ldrh	r1, [r5, #24]
    8d4a:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    8d4e:	198a      	adds	r2, r1, r6
    8d50:	4562      	cmp	r2, ip
    8d52:	d905      	bls.n	8d60 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    8d54:	4420      	add	r0, r4
    8d56:	832f      	strh	r7, [r5, #24]
    8d58:	7507      	strb	r7, [r0, #20]
    8d5a:	2000      	movs	r0, #0
    8d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8d64:	4632      	mov	r2, r6
    8d66:	6840      	ldr	r0, [r0, #4]
    8d68:	4408      	add	r0, r1
    8d6a:	4619      	mov	r1, r3
    8d6c:	f001 fd36 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d70:	8b28      	ldrh	r0, [r5, #24]
    8d72:	4430      	add	r0, r6
    8d74:	8328      	strh	r0, [r5, #24]
    8d76:	70a7      	strb	r7, [r4, #2]
    8d78:	2001      	movs	r0, #1
    8d7a:	e7ef      	b.n	8d5c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00008d7c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    8d7c:	b510      	push	{r4, lr}
    8d7e:	2101      	movs	r1, #1
    8d80:	f7ff ff36 	bl	8bf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    8d84:	2800      	cmp	r0, #0
    8d86:	d000      	beq.n	8d8a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    8d88:	2001      	movs	r0, #1
    8d8a:	bd10      	pop	{r4, pc}

00008d8c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    8d8c:	2201      	movs	r2, #1
    8d8e:	f7ff bf3c 	b.w	8c0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

00008d92 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    8d92:	2200      	movs	r2, #0
    8d94:	f7ff bf39 	b.w	8c0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

00008d98 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    8d98:	b510      	push	{r4, lr}
    8d9a:	2100      	movs	r1, #0
    8d9c:	f7ff ff28 	bl	8bf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    8da0:	2800      	cmp	r0, #0
    8da2:	d000      	beq.n	8da6 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    8da4:	2001      	movs	r0, #1
    8da6:	bd10      	pop	{r4, pc}

00008da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    8da8:	b570      	push	{r4, r5, r6, lr}
    8daa:	b109      	cbz	r1, 8db0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    8dac:	2300      	movs	r3, #0
    8dae:	e000      	b.n	8db2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    8db0:	2302      	movs	r3, #2
    8db2:	21ff      	movs	r1, #255	; 0xff
    8db4:	7081      	strb	r1, [r0, #2]
    8db6:	18c1      	adds	r1, r0, r3
    8db8:	2402      	movs	r4, #2
    8dba:	7d0d      	ldrb	r5, [r1, #20]
    8dbc:	2d01      	cmp	r5, #1
    8dbe:	d007      	beq.n	8dd0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    8dc0:	7d4d      	ldrb	r5, [r1, #21]
    8dc2:	2d01      	cmp	r5, #1
    8dc4:	d009      	beq.n	8dda <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    8dc6:	f44f 718b 	mov.w	r1, #278	; 0x116
    8dca:	2009      	movs	r0, #9
    8dcc:	f7f7 fea2 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8dd4:	831a      	strh	r2, [r3, #24]
    8dd6:	750c      	strb	r4, [r1, #20]
    8dd8:	e003      	b.n	8de2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    8dda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8dde:	835a      	strh	r2, [r3, #26]
    8de0:	754c      	strb	r4, [r1, #21]
    8de2:	2100      	movs	r1, #0
    8de4:	7081      	strb	r1, [r0, #2]
    8de6:	bd70      	pop	{r4, r5, r6, pc}

00008de8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    8de8:	2101      	movs	r1, #1
    8dea:	7001      	strb	r1, [r0, #0]
    8dec:	4770      	bx	lr

00008dee <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    8dee:	2201      	movs	r2, #1
    8df0:	4611      	mov	r1, r2
    8df2:	f7ff bf38 	b.w	8c66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008df6 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    8df6:	2201      	movs	r2, #1
    8df8:	2100      	movs	r1, #0
    8dfa:	f7ff bf34 	b.w	8c66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008dfe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    8dfe:	2100      	movs	r1, #0
    8e00:	f7ff bedd 	b.w	8bbe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8e04:	2800      	cmp	r0, #0
    8e06:	db09      	blt.n	8e1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    8e08:	f000 021f 	and.w	r2, r0, #31
    8e0c:	2101      	movs	r1, #1
    8e0e:	4091      	lsls	r1, r2
    8e10:	0940      	lsrs	r0, r0, #5
    8e12:	0080      	lsls	r0, r0, #2
    8e14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e18:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8e1c:	4770      	bx	lr
    8e1e:	2800      	cmp	r0, #0
    8e20:	db0d      	blt.n	8e3e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    8e22:	f000 021f 	and.w	r2, r0, #31
    8e26:	2101      	movs	r1, #1
    8e28:	4091      	lsls	r1, r2
    8e2a:	0940      	lsrs	r0, r0, #5
    8e2c:	0080      	lsls	r0, r0, #2
    8e2e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e32:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8e36:	f3bf 8f4f 	dsb	sy
    8e3a:	f3bf 8f6f 	isb	sy
    8e3e:	4770      	bx	lr
    8e40:	b510      	push	{r4, lr}
    8e42:	200e      	movs	r0, #14
    8e44:	f7ff ffeb 	bl	8e1e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    8e48:	200e      	movs	r0, #14
    8e4a:	f7ff ffdb 	bl	8e04 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8e4e:	200f      	movs	r0, #15
    8e50:	f7ff ffe5 	bl	8e1e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    8e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e58:	200f      	movs	r0, #15
    8e5a:	f7ff bfd3 	b.w	8e04 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8e5e:	2800      	cmp	r0, #0
    8e60:	db09      	blt.n	8e76 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    8e62:	f000 021f 	and.w	r2, r0, #31
    8e66:	2101      	movs	r1, #1
    8e68:	4091      	lsls	r1, r2
    8e6a:	0940      	lsrs	r0, r0, #5
    8e6c:	0080      	lsls	r0, r0, #2
    8e6e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e72:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8e76:	4770      	bx	lr
    8e78:	5840      	ldr	r0, [r0, r1]
    8e7a:	2800      	cmp	r0, #0
    8e7c:	d000      	beq.n	8e80 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    8e7e:	2001      	movs	r0, #1
    8e80:	4770      	bx	lr

00008e82 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    8e82:	b510      	push	{r4, lr}
    8e84:	4604      	mov	r4, r0
    8e86:	4620      	mov	r0, r4
    8e88:	f7f8 fbca 	bl	1620 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    8e8c:	2811      	cmp	r0, #17
    8e8e:	d0fa      	beq.n	8e86 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    8e90:	bd10      	pop	{r4, pc}

00008e92 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    8e92:	b510      	push	{r4, lr}
    8e94:	f7ff fff5 	bl	8e82 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    8e98:	2800      	cmp	r0, #0
    8e9a:	d003      	beq.n	8ea4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    8e9c:	21a9      	movs	r1, #169	; 0xa9
    8e9e:	201d      	movs	r0, #29
    8ea0:	f7f7 fe38 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ea4:	bd10      	pop	{r4, pc}

00008ea6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    8ea6:	f7f8 bc99 	b.w	17dc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

00008eaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    8eaa:	b510      	push	{r4, lr}
    8eac:	4050      	eors	r0, r2
    8eae:	780a      	ldrb	r2, [r1, #0]
    8eb0:	781c      	ldrb	r4, [r3, #0]
    8eb2:	4062      	eors	r2, r4
    8eb4:	4410      	add	r0, r2
    8eb6:	784a      	ldrb	r2, [r1, #1]
    8eb8:	785c      	ldrb	r4, [r3, #1]
    8eba:	4062      	eors	r2, r4
    8ebc:	4410      	add	r0, r2
    8ebe:	788a      	ldrb	r2, [r1, #2]
    8ec0:	789c      	ldrb	r4, [r3, #2]
    8ec2:	4062      	eors	r2, r4
    8ec4:	4410      	add	r0, r2
    8ec6:	78ca      	ldrb	r2, [r1, #3]
    8ec8:	78dc      	ldrb	r4, [r3, #3]
    8eca:	4062      	eors	r2, r4
    8ecc:	4410      	add	r0, r2
    8ece:	790a      	ldrb	r2, [r1, #4]
    8ed0:	791c      	ldrb	r4, [r3, #4]
    8ed2:	7949      	ldrb	r1, [r1, #5]
    8ed4:	4062      	eors	r2, r4
    8ed6:	4410      	add	r0, r2
    8ed8:	795a      	ldrb	r2, [r3, #5]
    8eda:	4051      	eors	r1, r2
    8edc:	42c1      	cmn	r1, r0
    8ede:	d101      	bne.n	8ee4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    8ee0:	2001      	movs	r0, #1
    8ee2:	bd10      	pop	{r4, pc}
    8ee4:	2000      	movs	r0, #0
    8ee6:	bd10      	pop	{r4, pc}

00008ee8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    8ee8:	b510      	push	{r4, lr}
    8eea:	2900      	cmp	r1, #0
    8eec:	4604      	mov	r4, r0
    8eee:	f04f 0106 	mov.w	r1, #6
    8ef2:	d002      	beq.n	8efa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    8ef4:	f7f7 fe70 	bl	bd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8ef8:	e001      	b.n	8efe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    8efa:	f7f7 fe7b 	bl	bf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8efe:	7960      	ldrb	r0, [r4, #5]
    8f00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f04:	7160      	strb	r0, [r4, #5]
    8f06:	bd10      	pop	{r4, pc}

00008f08 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    8f08:	4770      	bx	lr

00008f0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    8f0a:	b530      	push	{r4, r5, lr}
    8f0c:	460c      	mov	r4, r1
    8f0e:	4605      	mov	r5, r0
    8f10:	b08d      	sub	sp, #52	; 0x34
    8f12:	f04f 0103 	mov.w	r1, #3
    8f16:	f104 0003 	add.w	r0, r4, #3
    8f1a:	b112      	cbz	r2, 8f22 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8f1c:	f7f7 fe5c 	bl	bd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f20:	e001      	b.n	8f26 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    8f22:	f7f7 fe67 	bl	bf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f26:	7960      	ldrb	r0, [r4, #5]
    8f28:	220d      	movs	r2, #13
    8f2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8f32:	7160      	strb	r0, [r4, #5]
    8f34:	2100      	movs	r1, #0
    8f36:	a804      	add	r0, sp, #16
    8f38:	f001 fcca 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8f3c:	78e0      	ldrb	r0, [r4, #3]
    8f3e:	f88d 001f 	strb.w	r0, [sp, #31]
    8f42:	7920      	ldrb	r0, [r4, #4]
    8f44:	f88d 001e 	strb.w	r0, [sp, #30]
    8f48:	7960      	ldrb	r0, [r4, #5]
    8f4a:	f88d 001d 	strb.w	r0, [sp, #29]
    8f4e:	2210      	movs	r2, #16
    8f50:	4629      	mov	r1, r5
    8f52:	4668      	mov	r0, sp
    8f54:	f001 fc42 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8f58:	4668      	mov	r0, sp
    8f5a:	f7ff ff9a 	bl	8e92 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8f5e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    8f62:	7020      	strb	r0, [r4, #0]
    8f64:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    8f68:	7060      	strb	r0, [r4, #1]
    8f6a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8f6e:	70a0      	strb	r0, [r4, #2]
    8f70:	b00d      	add	sp, #52	; 0x34
    8f72:	bd30      	pop	{r4, r5, pc}

00008f74 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    8f74:	2101      	movs	r1, #1
    8f76:	f7f8 bcff 	b.w	1978 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

00008f7a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    8f7a:	b510      	push	{r4, lr}
    8f7c:	f001 fa06 	bl	a38c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    8f80:	b118      	cbz	r0, 8f8a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    8f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f86:	f7fa bb11 	b.w	35ac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    8f8a:	20ff      	movs	r0, #255	; 0xff
    8f8c:	bd10      	pop	{r4, pc}

00008f8e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    8f8e:	b510      	push	{r4, lr}
    8f90:	f7f8 fd1e 	bl	19d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    8f94:	2808      	cmp	r0, #8
    8f96:	d003      	beq.n	8fa0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    8f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f9c:	f7f8 bd04 	b.w	19a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    8fa0:	bd10      	pop	{r4, pc}

00008fa2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    8fa2:	b570      	push	{r4, r5, r6, lr}
    8fa4:	460e      	mov	r6, r1
    8fa6:	b08c      	sub	sp, #48	; 0x30
    8fa8:	4614      	mov	r4, r2
    8faa:	4601      	mov	r1, r0
    8fac:	461d      	mov	r5, r3
    8fae:	2210      	movs	r2, #16
    8fb0:	4668      	mov	r0, sp
    8fb2:	f000 f84e 	bl	9052 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    8fb6:	2210      	movs	r2, #16
    8fb8:	4631      	mov	r1, r6
    8fba:	a804      	add	r0, sp, #16
    8fbc:	f000 f849 	bl	9052 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    8fc0:	4668      	mov	r0, sp
    8fc2:	f7ff ff66 	bl	8e92 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8fc6:	a908      	add	r1, sp, #32
    8fc8:	f04f 0210 	mov.w	r2, #16
    8fcc:	4628      	mov	r0, r5
    8fce:	b11c      	cbz	r4, 8fd8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    8fd0:	f000 f83f 	bl	9052 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    8fd4:	b00c      	add	sp, #48	; 0x30
    8fd6:	bd70      	pop	{r4, r5, r6, pc}
    8fd8:	f001 fc00 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8fdc:	e7fa      	b.n	8fd4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00008fde <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    8fde:	f240 41e2 	movw	r1, #1250	; 0x4e2
    8fe2:	fbb0 f0f1 	udiv	r0, r0, r1
    8fe6:	b280      	uxth	r0, r0
    8fe8:	4770      	bx	lr

00008fea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    8fea:	6809      	ldr	r1, [r1, #0]
    8fec:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    8ff0:	4770      	bx	lr

00008ff2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    8ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ff6:	4607      	mov	r7, r0
    8ff8:	460e      	mov	r6, r1
    8ffa:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    8ffe:	f7fc ff29 	bl	5e54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9002:	b198      	cbz	r0, 902c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    9004:	b31e      	cbz	r6, 904e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    9006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    900a:	1b40      	subs	r0, r0, r5
    900c:	2300      	movs	r3, #0
    900e:	eb61 0104 	sbc.w	r1, r1, r4
    9012:	461a      	mov	r2, r3
    9014:	1a1b      	subs	r3, r3, r0
    9016:	418a      	sbcs	r2, r1
    9018:	da19      	bge.n	904e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    901a:	1c42      	adds	r2, r0, #1
    901c:	f171 0100 	sbcs.w	r1, r1, #0
    9020:	db07      	blt.n	9032 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    9022:	f240 211a 	movw	r1, #538	; 0x21a
    9026:	2029      	movs	r0, #41	; 0x29
    9028:	f7f7 fd74 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    902c:	f44f 7104 	mov.w	r1, #528	; 0x210
    9030:	e7f9      	b.n	9026 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    9032:	4430      	add	r0, r6
    9034:	1e40      	subs	r0, r0, #1
    9036:	fbb0 f1f6 	udiv	r1, r0, r6
    903a:	fb01 f006 	mul.w	r0, r1, r6
    903e:	1828      	adds	r0, r5, r0
    9040:	f144 0400 	adc.w	r4, r4, #0
    9044:	e9c7 0404 	strd	r0, r4, [r7, #16]
    9048:	4608      	mov	r0, r1
    904a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    904e:	2000      	movs	r0, #0
    9050:	e7fb      	b.n	904a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

00009052 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    9052:	b530      	push	{r4, r5, lr}
    9054:	4613      	mov	r3, r2
    9056:	e006      	b.n	9066 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    9058:	18cc      	adds	r4, r1, r3
    905a:	1ad5      	subs	r5, r2, r3
    905c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    9060:	1e5b      	subs	r3, r3, #1
    9062:	5544      	strb	r4, [r0, r5]
    9064:	b2db      	uxtb	r3, r3
    9066:	2b00      	cmp	r3, #0
    9068:	d1f6      	bne.n	9058 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    906a:	bd30      	pop	{r4, r5, pc}

0000906c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    906c:	b510      	push	{r4, lr}
    906e:	2300      	movs	r3, #0
    9070:	461a      	mov	r2, r3
    9072:	e003      	b.n	907c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    9074:	5c84      	ldrb	r4, [r0, r2]
    9076:	4323      	orrs	r3, r4
    9078:	1c52      	adds	r2, r2, #1
    907a:	b2d2      	uxtb	r2, r2
    907c:	428a      	cmp	r2, r1
    907e:	d3f9      	bcc.n	9074 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    9080:	b10b      	cbz	r3, 9086 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    9082:	2000      	movs	r0, #0
    9084:	bd10      	pop	{r4, pc}
    9086:	2001      	movs	r0, #1
    9088:	bd10      	pop	{r4, pc}

0000908a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    908a:	2100      	movs	r1, #0
    908c:	4608      	mov	r0, r1
    908e:	f7f8 bd8d 	b.w	1bac <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    9092:	4401      	add	r1, r0
    9094:	2914      	cmp	r1, #20
    9096:	dd01      	ble.n	909c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    9098:	2014      	movs	r0, #20
    909a:	4770      	bx	lr
    909c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    90a0:	4281      	cmp	r1, r0
    90a2:	dbfa      	blt.n	909a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    90a4:	b248      	sxtb	r0, r1
    90a6:	4770      	bx	lr

000090a8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    90a8:	b570      	push	{r4, r5, r6, lr}
    90aa:	4604      	mov	r4, r0
    90ac:	1c40      	adds	r0, r0, #1
    90ae:	4288      	cmp	r0, r1
    90b0:	d004      	beq.n	90bc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    90b2:	6808      	ldr	r0, [r1, #0]
    90b4:	f8c4 0001 	str.w	r0, [r4, #1]
    90b8:	7908      	ldrb	r0, [r1, #4]
    90ba:	7160      	strb	r0, [r4, #5]
    90bc:	7960      	ldrb	r0, [r4, #5]
    90be:	f000 001f 	and.w	r0, r0, #31
    90c2:	7160      	strb	r0, [r4, #5]
    90c4:	2000      	movs	r0, #0
    90c6:	72e0      	strb	r0, [r4, #11]
    90c8:	4605      	mov	r5, r0
    90ca:	1966      	adds	r6, r4, r5
    90cc:	7870      	ldrb	r0, [r6, #1]
    90ce:	f000 f8d1 	bl	9274 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    90d2:	71b0      	strb	r0, [r6, #6]
    90d4:	7ae1      	ldrb	r1, [r4, #11]
    90d6:	1c6d      	adds	r5, r5, #1
    90d8:	4408      	add	r0, r1
    90da:	b2ed      	uxtb	r5, r5
    90dc:	72e0      	strb	r0, [r4, #11]
    90de:	2d05      	cmp	r5, #5
    90e0:	d3f3      	bcc.n	90ca <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    90e2:	bd70      	pop	{r4, r5, r6, pc}

000090e4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    90e4:	7802      	ldrb	r2, [r0, #0]
    90e6:	f002 020f 	and.w	r2, r2, #15
    90ea:	2a03      	cmp	r2, #3
    90ec:	d003      	beq.n	90f6 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    90ee:	2a05      	cmp	r2, #5
    90f0:	d104      	bne.n	90fc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    90f2:	f000 b85f 	b.w	91b4 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    90f6:	7840      	ldrb	r0, [r0, #1]
    90f8:	280c      	cmp	r0, #12
    90fa:	d001      	beq.n	9100 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    90fc:	2000      	movs	r0, #0
    90fe:	4770      	bx	lr
    9100:	2001      	movs	r0, #1
    9102:	4770      	bx	lr

00009104 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    9104:	b570      	push	{r4, r5, r6, lr}
    9106:	4614      	mov	r4, r2
    9108:	4605      	mov	r5, r0
    910a:	2a1f      	cmp	r2, #31
    910c:	d903      	bls.n	9116 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    910e:	21ee      	movs	r1, #238	; 0xee
    9110:	202a      	movs	r0, #42	; 0x2a
    9112:	f7f7 fcff 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9116:	f105 0009 	add.w	r0, r5, #9
    911a:	f001 fb5f 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    911e:	1da4      	adds	r4, r4, #6
    9120:	706c      	strb	r4, [r5, #1]
    9122:	bd70      	pop	{r4, r5, r6, pc}

00009124 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    9124:	b510      	push	{r4, lr}
    9126:	7802      	ldrb	r2, [r0, #0]
    9128:	f001 030f 	and.w	r3, r1, #15
    912c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    9130:	431a      	orrs	r2, r3
    9132:	7002      	strb	r2, [r0, #0]
    9134:	2907      	cmp	r1, #7
    9136:	d20c      	bcs.n	9152 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    9138:	e8df f001 	tbb	[pc, r1]
    913c:	06040604 	.word	0x06040604
    9140:	00040804 	.word	0x00040804
    9144:	2106      	movs	r1, #6
    9146:	e002      	b.n	914e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    9148:	210c      	movs	r1, #12
    914a:	e000      	b.n	914e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    914c:	2122      	movs	r1, #34	; 0x22
    914e:	7041      	strb	r1, [r0, #1]
    9150:	bd10      	pop	{r4, pc}
    9152:	21a8      	movs	r1, #168	; 0xa8
    9154:	202a      	movs	r0, #42	; 0x2a
    9156:	f7f7 fcdd 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000915a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    915a:	680a      	ldr	r2, [r1, #0]
    915c:	f840 2f09 	str.w	r2, [r0, #9]!
    9160:	8889      	ldrh	r1, [r1, #4]
    9162:	8081      	strh	r1, [r0, #4]
    9164:	4770      	bx	lr

00009166 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    9166:	7802      	ldrb	r2, [r0, #0]
    9168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    916c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    9170:	7002      	strb	r2, [r0, #0]
    9172:	4770      	bx	lr

00009174 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    9174:	680a      	ldr	r2, [r1, #0]
    9176:	f840 2f03 	str.w	r2, [r0, #3]!
    917a:	8889      	ldrh	r1, [r1, #4]
    917c:	8081      	strh	r1, [r0, #4]
    917e:	4770      	bx	lr

00009180 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    9180:	7802      	ldrb	r2, [r0, #0]
    9182:	2340      	movs	r3, #64	; 0x40
    9184:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    9188:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    918c:	430a      	orrs	r2, r1
    918e:	7002      	strb	r2, [r0, #0]
    9190:	4770      	bx	lr

00009192 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    9192:	b570      	push	{r4, r5, r6, lr}
    9194:	4614      	mov	r4, r2
    9196:	4605      	mov	r5, r0
    9198:	2a1f      	cmp	r2, #31
    919a:	d904      	bls.n	91a6 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    919c:	f44f 7188 	mov.w	r1, #272	; 0x110
    91a0:	202a      	movs	r0, #42	; 0x2a
    91a2:	f7f7 fcb7 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91a6:	f105 0009 	add.w	r0, r5, #9
    91aa:	f001 fb17 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    91ae:	1da4      	adds	r4, r4, #6
    91b0:	706c      	strb	r4, [r5, #1]
    91b2:	bd70      	pop	{r4, r5, r6, pc}
    91b4:	b570      	push	{r4, r5, r6, lr}
    91b6:	f8d0 201f 	ldr.w	r2, [r0, #31]
    91ba:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    91be:	f012 0fff 	tst.w	r2, #255	; 0xff
    91c2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    91c6:	d108      	bne.n	91da <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    91c8:	f3c2 2407 	ubfx	r4, r2, #8, #8
    91cc:	b92c      	cbnz	r4, 91da <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    91ce:	f3c2 4407 	ubfx	r4, r2, #16, #8
    91d2:	b914      	cbnz	r4, 91da <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    91d4:	0e12      	lsrs	r2, r2, #24
    91d6:	d100      	bne.n	91da <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    91d8:	b34b      	cbz	r3, 922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    91da:	7846      	ldrb	r6, [r0, #1]
    91dc:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    91e0:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    91e4:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    91e8:	7d83      	ldrb	r3, [r0, #22]
    91ea:	2e22      	cmp	r6, #34	; 0x22
    91ec:	d11f      	bne.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    91ee:	b131      	cbz	r1, 91fe <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    91f0:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    91f4:	d903      	bls.n	91fe <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    91f6:	f640 5107 	movw	r1, #3335	; 0xd07
    91fa:	428a      	cmp	r2, r1
    91fc:	d90b      	bls.n	9216 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    91fe:	1f91      	subs	r1, r2, #6
    9200:	f640 467a 	movw	r6, #3194	; 0xc7a
    9204:	42b1      	cmp	r1, r6
    9206:	d812      	bhi.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9208:	b18b      	cbz	r3, 922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    920a:	2b08      	cmp	r3, #8
    920c:	d80f      	bhi.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    920e:	4293      	cmp	r3, r2
    9210:	d20d      	bcs.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9212:	4295      	cmp	r5, r2
    9214:	d80b      	bhi.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9216:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    921a:	d208      	bcs.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    921c:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    9220:	f640 4176 	movw	r1, #3190	; 0xc76
    9224:	380a      	subs	r0, #10
    9226:	4288      	cmp	r0, r1
    9228:	d801      	bhi.n	922e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    922a:	2001      	movs	r0, #1
    922c:	bd70      	pop	{r4, r5, r6, pc}
    922e:	2000      	movs	r0, #0
    9230:	bd70      	pop	{r4, r5, r6, pc}

00009232 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    9232:	b508      	push	{r3, lr}
    9234:	7a03      	ldrb	r3, [r0, #8]
    9236:	f88d 3000 	strb.w	r3, [sp]
    923a:	9b00      	ldr	r3, [sp, #0]
    923c:	9300      	str	r3, [sp, #0]
    923e:	f89d 3000 	ldrb.w	r3, [sp]
    9242:	b123      	cbz	r3, 924e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    9244:	f240 21c2 	movw	r1, #706	; 0x2c2
    9248:	2010      	movs	r0, #16
    924a:	f7f7 fc63 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    924e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9252:	f7f8 bdb1 	b.w	1db8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>

00009256 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    9256:	f7f8 bddd 	b.w	1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>
    925a:	b510      	push	{r4, lr}
    925c:	4604      	mov	r4, r0
    925e:	2108      	movs	r1, #8
    9260:	4620      	mov	r0, r4
    9262:	f7f7 fcc7 	bl	bf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9266:	6820      	ldr	r0, [r4, #0]
    9268:	2800      	cmp	r0, #0
    926a:	d102      	bne.n	9272 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    926c:	6860      	ldr	r0, [r4, #4]
    926e:	2800      	cmp	r0, #0
    9270:	d0f5      	beq.n	925e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    9272:	bd10      	pop	{r4, pc}

00009274 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    9274:	f000 0155 	and.w	r1, r0, #85	; 0x55
    9278:	2255      	movs	r2, #85	; 0x55
    927a:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    927e:	4408      	add	r0, r1
    9280:	f000 0133 	and.w	r1, r0, #51	; 0x33
    9284:	2233      	movs	r2, #51	; 0x33
    9286:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    928a:	4408      	add	r0, r1
    928c:	f000 010f 	and.w	r1, r0, #15
    9290:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    9294:	4770      	bx	lr

00009296 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    9296:	b508      	push	{r3, lr}
    9298:	f000 f804 	bl	92a4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    929c:	466a      	mov	r2, sp
    929e:	f7f8 fea1 	bl	1fe4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    92a2:	bd08      	pop	{r3, pc}
    92a4:	b530      	push	{r4, r5, lr}
    92a6:	784c      	ldrb	r4, [r1, #1]
    92a8:	4603      	mov	r3, r0
    92aa:	7808      	ldrb	r0, [r1, #0]
    92ac:	788d      	ldrb	r5, [r1, #2]
    92ae:	0e22      	lsrs	r2, r4, #24
    92b0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    92b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    92b8:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    92bc:	78cd      	ldrb	r5, [r1, #3]
    92be:	790c      	ldrb	r4, [r1, #4]
    92c0:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    92c4:	4322      	orrs	r2, r4
    92c6:	7949      	ldrb	r1, [r1, #5]
    92c8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    92cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    92d0:	4611      	mov	r1, r2
    92d2:	2b01      	cmp	r3, #1
    92d4:	d101      	bne.n	92da <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    92d6:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    92da:	bd30      	pop	{r4, r5, pc}
    92dc:	2801      	cmp	r0, #1
    92de:	d102      	bne.n	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    92e0:	7948      	ldrb	r0, [r1, #5]
    92e2:	0980      	lsrs	r0, r0, #6
    92e4:	d001      	beq.n	92ea <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    92e6:	2000      	movs	r0, #0
    92e8:	4770      	bx	lr
    92ea:	2001      	movs	r0, #1
    92ec:	4770      	bx	lr
    92ee:	2801      	cmp	r0, #1
    92f0:	d106      	bne.n	9300 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92f2:	7948      	ldrb	r0, [r1, #5]
    92f4:	2101      	movs	r1, #1
    92f6:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    92fa:	d101      	bne.n	9300 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92fc:	2001      	movs	r0, #1
    92fe:	4770      	bx	lr
    9300:	2000      	movs	r0, #0
    9302:	4770      	bx	lr
    9304:	2802      	cmp	r0, #2
    9306:	d003      	beq.n	9310 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    9308:	2803      	cmp	r0, #3
    930a:	d001      	beq.n	9310 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    930c:	2000      	movs	r0, #0
    930e:	4770      	bx	lr
    9310:	2001      	movs	r0, #1
    9312:	4770      	bx	lr

00009314 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    9314:	b510      	push	{r4, lr}
    9316:	4604      	mov	r4, r0
    9318:	7c00      	ldrb	r0, [r0, #16]
    931a:	f7ff fff3 	bl	9304 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    931e:	b148      	cbz	r0, 9334 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9320:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    9324:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9328:	f7ff fe31 	bl	8f8e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    932c:	2808      	cmp	r0, #8
    932e:	d001      	beq.n	9334 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9330:	2001      	movs	r0, #1
    9332:	bd10      	pop	{r4, pc}
    9334:	7c20      	ldrb	r0, [r4, #16]
    9336:	b118      	cbz	r0, 9340 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    9338:	2802      	cmp	r0, #2
    933a:	d001      	beq.n	9340 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    933c:	7de0      	ldrb	r0, [r4, #23]
    933e:	bd10      	pop	{r4, pc}
    9340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9344:	2000      	movs	r0, #0
    9346:	f7f8 ba83 	b.w	1850 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000934a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    934a:	b508      	push	{r3, lr}
    934c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    9350:	f88d 1000 	strb.w	r1, [sp]
    9354:	9900      	ldr	r1, [sp, #0]
    9356:	9100      	str	r1, [sp, #0]
    9358:	f89d 1000 	ldrb.w	r1, [sp]
    935c:	b941      	cbnz	r1, 9370 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    935e:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9362:	f88d 1000 	strb.w	r1, [sp]
    9366:	9900      	ldr	r1, [sp, #0]
    9368:	9100      	str	r1, [sp, #0]
    936a:	f89d 1000 	ldrb.w	r1, [sp]
    936e:	b109      	cbz	r1, 9374 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    9370:	2001      	movs	r0, #1
    9372:	bd08      	pop	{r3, pc}
    9374:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    9378:	f88d 0000 	strb.w	r0, [sp]
    937c:	9800      	ldr	r0, [sp, #0]
    937e:	9000      	str	r0, [sp, #0]
    9380:	f89d 0000 	ldrb.w	r0, [sp]
    9384:	2000      	movs	r0, #0
    9386:	bd08      	pop	{r3, pc}

00009388 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    9388:	20ff      	movs	r0, #255	; 0xff
    938a:	7008      	strb	r0, [r1, #0]
    938c:	6b48      	ldr	r0, [r1, #52]	; 0x34
    938e:	f7ff bd2b 	b.w	8de8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00009392 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    9392:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9394:	460d      	mov	r5, r1
    9396:	4604      	mov	r4, r0
    9398:	f44f 728c 	mov.w	r2, #280	; 0x118
    939c:	2100      	movs	r1, #0
    939e:	f001 fa97 	bl	a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    93a2:	20ff      	movs	r0, #255	; 0xff
    93a4:	7020      	strb	r0, [r4, #0]
    93a6:	207f      	movs	r0, #127	; 0x7f
    93a8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    93ac:	2013      	movs	r0, #19
    93ae:	8060      	strh	r0, [r4, #2]
    93b0:	f242 7010 	movw	r0, #10000	; 0x2710
    93b4:	8460      	strh	r0, [r4, #34]	; 0x22
    93b6:	f7f8 f8bb 	bl	1530 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    93ba:	4601      	mov	r1, r0
    93bc:	6360      	str	r0, [r4, #52]	; 0x34
    93be:	2200      	movs	r2, #0
    93c0:	4668      	mov	r0, sp
    93c2:	f7ff fc77 	bl	8cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    93c6:	2200      	movs	r2, #0
    93c8:	2101      	movs	r1, #1
    93ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    93cc:	f7ff fcec 	bl	8da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    93d0:	2204      	movs	r2, #4
    93d2:	4668      	mov	r0, sp
    93d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    93d6:	f7ff fc6d 	bl	8cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    93da:	2200      	movs	r2, #0
    93dc:	4611      	mov	r1, r2
    93de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    93e0:	f7ff fce2 	bl	8da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    93e4:	73a5      	strb	r5, [r4, #14]
    93e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    93ea:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    93ee:	f000 b950 	b.w	9692 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

000093f2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    93f2:	7880      	ldrb	r0, [r0, #2]
    93f4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    93f8:	b108      	cbz	r0, 93fe <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    93fa:	2000      	movs	r0, #0
    93fc:	4770      	bx	lr
    93fe:	201f      	movs	r0, #31
    9400:	4770      	bx	lr

00009402 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    9402:	f7f9 bb4d 	b.w	2aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

00009406 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    9406:	6880      	ldr	r0, [r0, #8]
    9408:	4770      	bx	lr

0000940a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    940a:	2001      	movs	r0, #1
    940c:	4770      	bx	lr

0000940e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    940e:	b510      	push	{r4, lr}
    9410:	4604      	mov	r4, r0
    9412:	3028      	adds	r0, #40	; 0x28
    9414:	f000 f8fd 	bl	9612 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    9418:	8861      	ldrh	r1, [r4, #2]
    941a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    941e:	2228      	movs	r2, #40	; 0x28
    9420:	f7f9 bc62 	b.w	2ce8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

00009424 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    9424:	2200      	movs	r2, #0
    9426:	8602      	strh	r2, [r0, #48]	; 0x30
    9428:	8843      	ldrh	r3, [r0, #2]
    942a:	2b1d      	cmp	r3, #29
    942c:	d001      	beq.n	9432 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    942e:	7341      	strb	r1, [r0, #13]
    9430:	4770      	bx	lr
    9432:	7342      	strb	r2, [r0, #13]
    9434:	4770      	bx	lr

00009436 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    9436:	b510      	push	{r4, lr}
    9438:	2400      	movs	r4, #0
    943a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    943c:	f7ff fcac 	bl	8d98 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    9440:	4384      	bics	r4, r0
    9442:	f084 0001 	eor.w	r0, r4, #1
    9446:	bd10      	pop	{r4, pc}

00009448 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    9448:	2000      	movs	r0, #0
    944a:	4770      	bx	lr

0000944c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    944c:	7880      	ldrb	r0, [r0, #2]
    944e:	f000 0001 	and.w	r0, r0, #1
    9452:	4770      	bx	lr

00009454 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    9454:	7880      	ldrb	r0, [r0, #2]
    9456:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    945a:	4770      	bx	lr

0000945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    945c:	2001      	movs	r0, #1
    945e:	4770      	bx	lr

00009460 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    9460:	7880      	ldrb	r0, [r0, #2]
    9462:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9466:	4770      	bx	lr

00009468 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    9468:	f990 000e 	ldrsb.w	r0, [r0, #14]
    946c:	4770      	bx	lr

0000946e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    946e:	7800      	ldrb	r0, [r0, #0]
    9470:	28ff      	cmp	r0, #255	; 0xff
    9472:	d001      	beq.n	9478 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    9474:	2001      	movs	r0, #1
    9476:	4770      	bx	lr
    9478:	2000      	movs	r0, #0
    947a:	4770      	bx	lr

0000947c <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    947c:	f800 1f20 	strb.w	r1, [r0, #32]!
    9480:	7042      	strb	r2, [r0, #1]
    9482:	4770      	bx	lr

00009484 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    9484:	680a      	ldr	r2, [r1, #0]
    9486:	f840 2f11 	str.w	r2, [r0, #17]!
    948a:	8889      	ldrh	r1, [r1, #4]
    948c:	8081      	strh	r1, [r0, #4]
    948e:	2101      	movs	r1, #1
    9490:	7181      	strb	r1, [r0, #6]
    9492:	4770      	bx	lr

00009494 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    9494:	7b00      	ldrb	r0, [r0, #12]
    9496:	4770      	bx	lr

00009498 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    9498:	2001      	movs	r0, #1
    949a:	4770      	bx	lr

0000949c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    949c:	61c1      	str	r1, [r0, #28]
    949e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    94a2:	724a      	strb	r2, [r1, #9]
    94a4:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    94a8:	f8c1 200a 	str.w	r2, [r1, #10]
    94ac:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    94b0:	81c8      	strh	r0, [r1, #14]
    94b2:	4770      	bx	lr

000094b4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    94b4:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    94b8:	4770      	bx	lr

000094ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    94ba:	7bc0      	ldrb	r0, [r0, #15]
    94bc:	2800      	cmp	r0, #0
    94be:	d000      	beq.n	94c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    94c0:	2001      	movs	r0, #1
    94c2:	4770      	bx	lr
    94c4:	7802      	ldrb	r2, [r0, #0]
    94c6:	2320      	movs	r3, #32
    94c8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    94cc:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    94d0:	430a      	orrs	r2, r1
    94d2:	7002      	strb	r2, [r0, #0]
    94d4:	4770      	bx	lr
    94d6:	2101      	movs	r1, #1
    94d8:	f7f8 bf32 	b.w	2340 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    94dc:	2101      	movs	r1, #1
    94de:	f7f8 bf2f 	b.w	2340 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    94e2:	b510      	push	{r4, lr}
    94e4:	460c      	mov	r4, r1
    94e6:	2100      	movs	r1, #0
    94e8:	7061      	strb	r1, [r4, #1]
    94ea:	2112      	movs	r1, #18
    94ec:	7021      	strb	r1, [r4, #0]
    94ee:	f100 0109 	add.w	r1, r0, #9
    94f2:	2221      	movs	r2, #33	; 0x21
    94f4:	1d20      	adds	r0, r4, #4
    94f6:	f001 f971 	bl	a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    94fa:	2001      	movs	r0, #1
    94fc:	71e0      	strb	r0, [r4, #7]
    94fe:	7920      	ldrb	r0, [r4, #4]
    9500:	2800      	cmp	r0, #0
    9502:	d015      	beq.n	9530 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    9504:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    9508:	2100      	movs	r1, #0
    950a:	4620      	mov	r0, r4
    950c:	f7f7 fde8 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9510:	2800      	cmp	r0, #0
    9512:	d00d      	beq.n	9530 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    9514:	8800      	ldrh	r0, [r0, #0]
    9516:	f7ff fcc6 	bl	8ea6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    951a:	2100      	movs	r1, #0
    951c:	4620      	mov	r0, r4
    951e:	f7f7 fe81 	bl	1224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9522:	2800      	cmp	r0, #0
    9524:	d004      	beq.n	9530 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    9526:	f240 2151 	movw	r1, #593	; 0x251
    952a:	202d      	movs	r0, #45	; 0x2d
    952c:	f7f7 faf2 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9530:	bd10      	pop	{r4, pc}
    9532:	2200      	movs	r2, #0
    9534:	704a      	strb	r2, [r1, #1]
    9536:	221a      	movs	r2, #26
    9538:	700a      	strb	r2, [r1, #0]
    953a:	f850 2f09 	ldr.w	r2, [r0, #9]!
    953e:	604a      	str	r2, [r1, #4]
    9540:	6842      	ldr	r2, [r0, #4]
    9542:	608a      	str	r2, [r1, #8]
    9544:	7a00      	ldrb	r0, [r0, #8]
    9546:	7308      	strb	r0, [r1, #12]
    9548:	4770      	bx	lr
    954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    954e:	4604      	mov	r4, r0
    9550:	460f      	mov	r7, r1
    9552:	7e40      	ldrb	r0, [r0, #25]
    9554:	f7f8 f9a2 	bl	189c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    9558:	4606      	mov	r6, r0
    955a:	7e20      	ldrb	r0, [r4, #24]
    955c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    9560:	b120      	cbz	r0, 956c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    9562:	b11e      	cbz	r6, 956c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    9564:	7e60      	ldrb	r0, [r4, #25]
    9566:	f7f8 f98d 	bl	1884 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    956a:	b1a0      	cbz	r0, 9596 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    956c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    9570:	2800      	cmp	r0, #0
    9572:	d024      	beq.n	95be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    9574:	7ea0      	ldrb	r0, [r4, #26]
    9576:	2800      	cmp	r0, #0
    9578:	d021      	beq.n	95be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    957a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    957e:	4629      	mov	r1, r5
    9580:	f7ff feb5 	bl	92ee <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    9584:	b1a8      	cbz	r0, 95b2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    9586:	f7f8 f979 	bl	187c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    958a:	463a      	mov	r2, r7
    958c:	4629      	mov	r1, r5
    958e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9592:	f7ff bcba 	b.w	8f0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9596:	2001      	movs	r0, #1
    9598:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    959c:	463a      	mov	r2, r7
    959e:	4629      	mov	r1, r5
    95a0:	4630      	mov	r0, r6
    95a2:	f7ff fcb2 	bl	8f0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    95a6:	7e61      	ldrb	r1, [r4, #25]
    95a8:	4628      	mov	r0, r5
    95aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    95ae:	f7f8 b981 	b.w	18b4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    95b2:	4639      	mov	r1, r7
    95b4:	4628      	mov	r0, r5
    95b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    95ba:	f7ff bc95 	b.w	8ee8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    95be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95c2:	b510      	push	{r4, lr}
    95c4:	4604      	mov	r4, r0
    95c6:	4608      	mov	r0, r1
    95c8:	f7fa fbc6 	bl	3d58 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    95cc:	7921      	ldrb	r1, [r4, #4]
    95ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95d2:	2025      	movs	r0, #37	; 0x25
    95d4:	f7fa bb96 	b.w	3d04 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    95d8:	b570      	push	{r4, r5, r6, lr}
    95da:	4614      	mov	r4, r2
    95dc:	461d      	mov	r5, r3
    95de:	4606      	mov	r6, r0
    95e0:	f000 ff6a 	bl	a4b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    95e4:	1900      	adds	r0, r0, r4
    95e6:	4169      	adcs	r1, r5
    95e8:	e9c6 0100 	strd	r0, r1, [r6]
    95ec:	bd70      	pop	{r4, r5, r6, pc}

000095ee <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    95ee:	b570      	push	{r4, r5, r6, lr}
    95f0:	7001      	strb	r1, [r0, #0]
    95f2:	7042      	strb	r2, [r0, #1]
    95f4:	4614      	mov	r4, r2
    95f6:	460d      	mov	r5, r1
    95f8:	7880      	ldrb	r0, [r0, #2]
    95fa:	f000 f87f 	bl	96fc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    95fe:	fb10 f005 	smulbb	r0, r0, r5
    9602:	4360      	muls	r0, r4
    9604:	28ff      	cmp	r0, #255	; 0xff
    9606:	d303      	bcc.n	9610 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    9608:	215c      	movs	r1, #92	; 0x5c
    960a:	202e      	movs	r0, #46	; 0x2e
    960c:	f7f7 fa82 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9610:	bd70      	pop	{r4, r5, r6, pc}

00009612 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    9612:	b510      	push	{r4, lr}
    9614:	4604      	mov	r4, r0
    9616:	7880      	ldrb	r0, [r0, #2]
    9618:	f000 f870 	bl	96fc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    961c:	7861      	ldrb	r1, [r4, #1]
    961e:	7822      	ldrb	r2, [r4, #0]
    9620:	fb11 f102 	smulbb	r1, r1, r2
    9624:	4348      	muls	r0, r1
    9626:	b2c0      	uxtb	r0, r0
    9628:	bd10      	pop	{r4, pc}

0000962a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    962a:	b510      	push	{r4, lr}
    962c:	4604      	mov	r4, r0
    962e:	f000 f84d 	bl	96cc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    9632:	7961      	ldrb	r1, [r4, #5]
    9634:	1c49      	adds	r1, r1, #1
    9636:	b2c9      	uxtb	r1, r1
    9638:	7161      	strb	r1, [r4, #5]
    963a:	7862      	ldrb	r2, [r4, #1]
    963c:	4291      	cmp	r1, r2
    963e:	d10b      	bne.n	9658 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9640:	2200      	movs	r2, #0
    9642:	7162      	strb	r2, [r4, #5]
    9644:	78e1      	ldrb	r1, [r4, #3]
    9646:	4301      	orrs	r1, r0
    9648:	70e1      	strb	r1, [r4, #3]
    964a:	78a3      	ldrb	r3, [r4, #2]
    964c:	4299      	cmp	r1, r3
    964e:	d103      	bne.n	9658 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9650:	70e2      	strb	r2, [r4, #3]
    9652:	7921      	ldrb	r1, [r4, #4]
    9654:	1c49      	adds	r1, r1, #1
    9656:	7121      	strb	r1, [r4, #4]
    9658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    965c:	f000 b825 	b.w	96aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00009660 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    9660:	7081      	strb	r1, [r0, #2]
    9662:	4770      	bx	lr

00009664 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    9664:	b570      	push	{r4, r5, r6, lr}
    9666:	4604      	mov	r4, r0
    9668:	7880      	ldrb	r0, [r0, #2]
    966a:	f000 f847 	bl	96fc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    966e:	7861      	ldrb	r1, [r4, #1]
    9670:	fb11 f500 	smulbb	r5, r1, r0
    9674:	78e0      	ldrb	r0, [r4, #3]
    9676:	f000 f841 	bl	96fc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    967a:	7861      	ldrb	r1, [r4, #1]
    967c:	7962      	ldrb	r2, [r4, #5]
    967e:	fb10 2001 	smlabb	r0, r0, r1, r2
    9682:	7821      	ldrb	r1, [r4, #0]
    9684:	7922      	ldrb	r2, [r4, #4]
    9686:	1a89      	subs	r1, r1, r2
    9688:	fb11 f105 	smulbb	r1, r1, r5
    968c:	1a08      	subs	r0, r1, r0
    968e:	b2c0      	uxtb	r0, r0
    9690:	bd70      	pop	{r4, r5, r6, pc}

00009692 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    9692:	2100      	movs	r1, #0
    9694:	6001      	str	r1, [r0, #0]
    9696:	8081      	strh	r1, [r0, #4]
    9698:	2101      	movs	r1, #1
    969a:	7041      	strb	r1, [r0, #1]
    969c:	7001      	strb	r1, [r0, #0]
    969e:	4770      	bx	lr

000096a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    96a0:	2100      	movs	r1, #0
    96a2:	70c1      	strb	r1, [r0, #3]
    96a4:	7141      	strb	r1, [r0, #5]
    96a6:	7101      	strb	r1, [r0, #4]
    96a8:	4770      	bx	lr
    96aa:	b510      	push	{r4, lr}
    96ac:	2801      	cmp	r0, #1
    96ae:	d007      	beq.n	96c0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    96b0:	2802      	cmp	r0, #2
    96b2:	d007      	beq.n	96c4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    96b4:	2804      	cmp	r0, #4
    96b6:	d007      	beq.n	96c8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    96b8:	2139      	movs	r1, #57	; 0x39
    96ba:	202e      	movs	r0, #46	; 0x2e
    96bc:	f7f7 fa2a 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96c0:	2025      	movs	r0, #37	; 0x25
    96c2:	bd10      	pop	{r4, pc}
    96c4:	2026      	movs	r0, #38	; 0x26
    96c6:	bd10      	pop	{r4, pc}
    96c8:	2027      	movs	r0, #39	; 0x27
    96ca:	bd10      	pop	{r4, pc}
    96cc:	4601      	mov	r1, r0
    96ce:	2000      	movs	r0, #0
    96d0:	788a      	ldrb	r2, [r1, #2]
    96d2:	07d3      	lsls	r3, r2, #31
    96d4:	d002      	beq.n	96dc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    96d6:	78cb      	ldrb	r3, [r1, #3]
    96d8:	07db      	lsls	r3, r3, #31
    96da:	d006      	beq.n	96ea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    96dc:	0793      	lsls	r3, r2, #30
    96de:	d506      	bpl.n	96ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    96e0:	78cb      	ldrb	r3, [r1, #3]
    96e2:	079b      	lsls	r3, r3, #30
    96e4:	d403      	bmi.n	96ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    96e6:	2002      	movs	r0, #2
    96e8:	4770      	bx	lr
    96ea:	2001      	movs	r0, #1
    96ec:	4770      	bx	lr
    96ee:	0752      	lsls	r2, r2, #29
    96f0:	d5fc      	bpl.n	96ec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    96f2:	78c9      	ldrb	r1, [r1, #3]
    96f4:	0749      	lsls	r1, r1, #29
    96f6:	d4f9      	bmi.n	96ec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    96f8:	2004      	movs	r0, #4
    96fa:	4770      	bx	lr
    96fc:	f3c0 0180 	ubfx	r1, r0, #2, #1
    9700:	f3c0 0240 	ubfx	r2, r0, #1, #1
    9704:	4411      	add	r1, r2
    9706:	f000 0001 	and.w	r0, r0, #1
    970a:	4408      	add	r0, r1
    970c:	4770      	bx	lr

0000970e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    970e:	f240 315a 	movw	r1, #858	; 0x35a
    9712:	4348      	muls	r0, r1
    9714:	4770      	bx	lr

00009716 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    9716:	f240 20ef 	movw	r0, #751	; 0x2ef
    971a:	4770      	bx	lr
    971c:	041c020e 	.word	0x041c020e
    9720:	0c600630 	.word	0x0c600630
    9724:	06b4035a 	.word	0x06b4035a
    9728:	0bf505c5 	.word	0x0bf505c5
    972c:	01a31225 	.word	0x01a31225
    9730:	05bf03b1 	.word	0x05bf03b1
    9734:	064902ef 	.word	0x064902ef
    9738:	09a3      	.short	0x09a3

0000973a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    973a:	b510      	push	{r4, lr}
    973c:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    9740:	b109      	cbz	r1, 9746 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    9742:	2000      	movs	r0, #0
    9744:	bd10      	pop	{r4, pc}
    9746:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    974a:	b131      	cbz	r1, 975a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    974c:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    9750:	428a      	cmp	r2, r1
    9752:	d902      	bls.n	975a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    9754:	f7f8 fddc 	bl	2310 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9758:	e7f3      	b.n	9742 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    975a:	2001      	movs	r0, #1
    975c:	bd10      	pop	{r4, pc}

0000975e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    975e:	b510      	push	{r4, lr}
    9760:	b131      	cbz	r1, 9770 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    9762:	2901      	cmp	r1, #1
    9764:	d008      	beq.n	9778 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    9766:	f240 71d3 	movw	r1, #2003	; 0x7d3
    976a:	2030      	movs	r0, #48	; 0x30
    976c:	f7f7 f9d2 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9774:	f000 b8e5 	b.w	9942 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x16a>
    9778:	2100      	movs	r1, #0
    977a:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    977e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9782:	f000 b8ae 	b.w	98e2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>

00009786 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    9786:	b510      	push	{r4, lr}
    9788:	4604      	mov	r4, r0
    978a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    978e:	2800      	cmp	r0, #0
    9790:	d019      	beq.n	97c6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    9792:	2001      	movs	r0, #1
    9794:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    9798:	4601      	mov	r1, r0
    979a:	4620      	mov	r0, r4
    979c:	f7ff fe8a 	bl	94b4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    97a0:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    97a4:	b170      	cbz	r0, 97c4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    97a6:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    97aa:	f7fc fd0d 	bl	61c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    97ae:	7820      	ldrb	r0, [r4, #0]
    97b0:	f7fc fe74 	bl	649c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    97b4:	f814 09c8 	ldrb.w	r0, [r4], #-200
    97b8:	f7fc fe4e 	bl	6458 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    97bc:	b120      	cbz	r0, 97c8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    97be:	2000      	movs	r0, #0
    97c0:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    97c4:	2000      	movs	r0, #0
    97c6:	bd10      	pop	{r4, pc}
    97c8:	f240 210b 	movw	r1, #523	; 0x20b
    97cc:	2030      	movs	r0, #48	; 0x30
    97ce:	f7f7 f9a1 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000097d2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    97d2:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    97d6:	4770      	bx	lr

000097d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    97d8:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    97dc:	4770      	bx	lr
    97de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97e2:	4604      	mov	r4, r0
    97e4:	f000 f886 	bl	98f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    97e8:	2700      	movs	r7, #0
    97ea:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    97ee:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    97f2:	2601      	movs	r6, #1
    97f4:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    97f8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    97fa:	463d      	mov	r5, r7
    97fc:	b130      	cbz	r0, 980c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x34>
    97fe:	f000 fe5b 	bl	a4b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9802:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9804:	fbb0 f2f1 	udiv	r2, r0, r1
    9808:	fb01 0512 	mls	r5, r1, r2, r0
    980c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    9810:	2100      	movs	r1, #0
    9812:	4680      	mov	r8, r0
    9814:	f7ff fbed 	bl	8ff2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9818:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    981c:	1949      	adds	r1, r1, r5
    981e:	4178      	adcs	r0, r7
    9820:	e9c4 1000 	strd	r1, r0, [r4]
    9824:	8920      	ldrh	r0, [r4, #8]
    9826:	3cf8      	subs	r4, #248	; 0xf8
    9828:	1c40      	adds	r0, r0, #1
    982a:	280a      	cmp	r0, #10
    982c:	d201      	bcs.n	9832 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x5a>
    982e:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    9832:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    9836:	b138      	cbz	r0, 9848 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    9838:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    983c:	1c40      	adds	r0, r0, #1
    983e:	280a      	cmp	r0, #10
    9840:	d302      	bcc.n	9848 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    9842:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    9846:	e002      	b.n	984e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x76>
    9848:	2002      	movs	r0, #2
    984a:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    984e:	4620      	mov	r0, r4
    9850:	f000 f823 	bl	989a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    9854:	b120      	cbz	r0, 9860 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x88>
    9856:	4620      	mov	r0, r4
    9858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    985c:	f000 b80e 	b.w	987c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    9860:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    9864:	4641      	mov	r1, r8
    9866:	f000 f843 	bl	98f0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    986a:	2800      	cmp	r0, #0
    986c:	d104      	bne.n	9878 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa0>
    986e:	f240 61e7 	movw	r1, #1767	; 0x6e7
    9872:	2030      	movs	r0, #48	; 0x30
    9874:	f7f7 f94e 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    987c:	b510      	push	{r4, lr}
    987e:	4604      	mov	r4, r0
    9880:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    9884:	f7fc fde8 	bl	6458 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9888:	2000      	movs	r0, #0
    988a:	7620      	strb	r0, [r4, #24]
    988c:	bd10      	pop	{r4, pc}
    988e:	b510      	push	{r4, lr}
    9890:	f7ff fdbd 	bl	940e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9894:	f200 1015 	addw	r0, r0, #277	; 0x115
    9898:	bd10      	pop	{r4, pc}
    989a:	b570      	push	{r4, r5, r6, lr}
    989c:	4605      	mov	r5, r0
    989e:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    98a2:	b108      	cbz	r0, 98a8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd0>
    98a4:	2001      	movs	r0, #1
    98a6:	bd70      	pop	{r4, r5, r6, pc}
    98a8:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    98ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    98b0:	4050      	eors	r0, r2
    98b2:	ea70 0101 	orns	r1, r0, r1
    98b6:	d012      	beq.n	98de <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    98b8:	2400      	movs	r4, #0
    98ba:	4621      	mov	r1, r4
    98bc:	4628      	mov	r0, r5
    98be:	f7ff ffe6 	bl	988e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    98c2:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    98c6:	1840      	adds	r0, r0, r1
    98c8:	4154      	adcs	r4, r2
    98ca:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    98ce:	3df8      	subs	r5, #248	; 0xf8
    98d0:	1a10      	subs	r0, r2, r0
    98d2:	41a1      	sbcs	r1, r4
    98d4:	d503      	bpl.n	98de <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    98d6:	4628      	mov	r0, r5
    98d8:	f7f8 fd1a 	bl	2310 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    98dc:	e7e2      	b.n	98a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xcc>
    98de:	2000      	movs	r0, #0
    98e0:	bd70      	pop	{r4, r5, r6, pc}
    98e2:	b510      	push	{r4, lr}
    98e4:	f7fa f872 	bl	39cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    98e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98ec:	f7fc bf12 	b.w	6714 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    98f0:	f7fc b80c 	b.w	590c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    98f4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    98f6:	4604      	mov	r4, r0
    98f8:	f7ff fdb0 	bl	945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    98fc:	b1f8      	cbz	r0, 993e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x166>
    98fe:	4620      	mov	r0, r4
    9900:	f7ff fda4 	bl	944c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9904:	b918      	cbnz	r0, 990e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x136>
    9906:	4620      	mov	r0, r4
    9908:	f7ff fdaa 	bl	9460 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    990c:	b140      	cbz	r0, 9920 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x148>
    990e:	245a      	movs	r4, #90	; 0x5a
    9910:	4668      	mov	r0, sp
    9912:	f7fe fb59 	bl	7fc8 <mpsl_fem_pa_is_configured>
    9916:	f89d 0000 	ldrb.w	r0, [sp]
    991a:	b118      	cbz	r0, 9924 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14c>
    991c:	2501      	movs	r5, #1
    991e:	e002      	b.n	9926 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14e>
    9920:	2450      	movs	r4, #80	; 0x50
    9922:	e7f5      	b.n	9910 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    9924:	2500      	movs	r5, #0
    9926:	a801      	add	r0, sp, #4
    9928:	f7fe fb36 	bl	7f98 <mpsl_fem_lna_is_configured>
    992c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9930:	b100      	cbz	r0, 9934 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15c>
    9932:	2001      	movs	r0, #1
    9934:	4305      	orrs	r5, r0
    9936:	d000      	beq.n	993a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x162>
    9938:	340a      	adds	r4, #10
    993a:	4620      	mov	r0, r4
    993c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    993e:	2061      	movs	r0, #97	; 0x61
    9940:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9942:	b570      	push	{r4, r5, r6, lr}
    9944:	4604      	mov	r4, r0
    9946:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9948:	2500      	movs	r5, #0
    994a:	b130      	cbz	r0, 995a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x182>
    994c:	f7f8 faba 	bl	1ec4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9950:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9952:	fbb0 f2f1 	udiv	r2, r0, r1
    9956:	fb01 0512 	mls	r5, r1, r2, r0
    995a:	4620      	mov	r0, r4
    995c:	f7ff fd53 	bl	9406 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9960:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    9964:	4428      	add	r0, r5
    9966:	34e8      	adds	r4, #232	; 0xe8
    9968:	2500      	movs	r5, #0
    996a:	1882      	adds	r2, r0, r2
    996c:	eb45 0001 	adc.w	r0, r5, r1
    9970:	e9c4 2004 	strd	r2, r0, [r4, #16]
    9974:	f804 5b0b 	strb.w	r5, [r4], #11
    9978:	2001      	movs	r0, #1
    997a:	f804 0901 	strb.w	r0, [r4], #-1
    997e:	2002      	movs	r0, #2
    9980:	f804 09f2 	strb.w	r0, [r4], #-242
    9984:	4620      	mov	r0, r4
    9986:	f7ff ffb5 	bl	98f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    998a:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    998e:	4620      	mov	r0, r4
    9990:	f7ff ff83 	bl	989a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    9994:	b930      	cbnz	r0, 99a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1cc>
    9996:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    999a:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    999e:	f7ff ffa7 	bl	98f0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    99a2:	b128      	cbz	r0, 99b0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1d8>
    99a4:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    99a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99ac:	f7ff bf99 	b.w	98e2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>
    99b0:	f240 712d 	movw	r1, #1837	; 0x72d
    99b4:	2030      	movs	r0, #48	; 0x30
    99b6:	f7f7 f8ad 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ba:	b510      	push	{r4, lr}
    99bc:	4604      	mov	r4, r0
    99be:	2000      	movs	r0, #0
    99c0:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    99c4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    99c8:	f7fc fd46 	bl	6458 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    99cc:	2020      	movs	r0, #32
    99ce:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    99d2:	bd10      	pop	{r4, pc}
    99d4:	b510      	push	{r4, lr}
    99d6:	b140      	cbz	r0, 99ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x212>
    99d8:	2909      	cmp	r1, #9
    99da:	d22f      	bcs.n	9a3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x264>
    99dc:	e8df f001 	tbb	[pc, r1]
    99e0:	1e1e1607 	.word	0x1e1e1607
    99e4:	26222e1a 	.word	0x26222e1a
    99e8:	002a      	.short	0x002a
    99ea:	21cd      	movs	r1, #205	; 0xcd
    99ec:	e023      	b.n	9a36 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    99ee:	4604      	mov	r4, r0
    99f0:	f7f8 fc66 	bl	22c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    99f4:	b110      	cbz	r0, 99fc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x224>
    99f6:	f240 2187 	movw	r1, #647	; 0x287
    99fa:	e01c      	b.n	9a36 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    99fc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    9a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    9a08:	f7fc bf60 	b.w	68cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a10:	f000 b816 	b.w	9a40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x268>
    9a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a18:	f7fa b9a4 	b.w	3d64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a20:	f7ff bedd 	b.w	97de <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    9a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a28:	f7ff bceb 	b.w	9402 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    9a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a30:	f7ff bf24 	b.w	987c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    9a34:	21ed      	movs	r1, #237	; 0xed
    9a36:	2030      	movs	r0, #48	; 0x30
    9a38:	f7f7 f86c 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a3c:	21f1      	movs	r1, #241	; 0xf1
    9a3e:	e7fa      	b.n	9a36 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9a40:	b570      	push	{r4, r5, r6, lr}
    9a42:	4605      	mov	r5, r0
    9a44:	f7ff fd06 	bl	9454 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9a48:	b9c8      	cbnz	r0, 9a7e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a6>
    9a4a:	2100      	movs	r1, #0
    9a4c:	4628      	mov	r0, r5
    9a4e:	f7ff ff1e 	bl	988e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    9a52:	4604      	mov	r4, r0
    9a54:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    9a58:	42a0      	cmp	r0, r4
    9a5a:	d20e      	bcs.n	9a7a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    9a5c:	1a20      	subs	r0, r4, r0
    9a5e:	2867      	cmp	r0, #103	; 0x67
    9a60:	d200      	bcs.n	9a64 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x28c>
    9a62:	2067      	movs	r0, #103	; 0x67
    9a64:	2103      	movs	r1, #3
    9a66:	f7fb fd7b 	bl	5560 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9a6a:	b130      	cbz	r0, 9a7a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    9a6c:	4628      	mov	r0, r5
    9a6e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    9a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a76:	f7ff bcc4 	b.w	9402 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    9a7a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    9a7e:	4628      	mov	r0, r5
    9a80:	f7f8 fc3a 	bl	22f8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    9a84:	2800      	cmp	r0, #0
    9a86:	d004      	beq.n	9a92 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2ba>
    9a88:	f240 21bd 	movw	r1, #701	; 0x2bd
    9a8c:	2030      	movs	r0, #48	; 0x30
    9a8e:	f7f7 f841 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a92:	bd70      	pop	{r4, r5, r6, pc}

00009a94 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    9a94:	b510      	push	{r4, lr}
    9a96:	460c      	mov	r4, r1
    9a98:	f7f7 fc44 	bl	1324 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    9a9c:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    9aa0:	2820      	cmp	r0, #32
    9aa2:	d00c      	beq.n	9abe <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    9aa4:	f7fc fcfa 	bl	649c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9aa8:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    9aac:	f7fc fcd4 	bl	6458 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9ab0:	2800      	cmp	r0, #0
    9ab2:	d104      	bne.n	9abe <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    9ab4:	f640 4129 	movw	r1, #3113	; 0xc29
    9ab8:	2031      	movs	r0, #49	; 0x31
    9aba:	f7f7 f82b 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9abe:	bd10      	pop	{r4, pc}

00009ac0 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    9ac0:	207f      	movs	r0, #127	; 0x7f
    9ac2:	f000 b83a 	b.w	9b3a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

00009ac6 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    9ac6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9aca:	f000 b836 	b.w	9b3a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

00009ace <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    9ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ad2:	460d      	mov	r5, r1
    9ad4:	4606      	mov	r6, r0
    9ad6:	f7ff fff3 	bl	9ac0 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    9ada:	4607      	mov	r7, r0
    9adc:	f7ff fff3 	bl	9ac6 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    9ae0:	2400      	movs	r4, #0
    9ae2:	4285      	cmp	r5, r0
    9ae4:	d100      	bne.n	9ae8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    9ae6:	2401      	movs	r4, #1
    9ae8:	42bd      	cmp	r5, r7
    9aea:	d101      	bne.n	9af0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    9aec:	f044 0402 	orr.w	r4, r4, #2
    9af0:	f000 f813 	bl	9b1a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    9af4:	2200      	movs	r2, #0
    9af6:	4601      	mov	r1, r0
    9af8:	2301      	movs	r3, #1
    9afa:	fa03 f002 	lsl.w	r0, r3, r2
    9afe:	4208      	tst	r0, r1
    9b00:	d005      	beq.n	9b0e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    9b02:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    9b06:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    9b0a:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    9b0e:	1c52      	adds	r2, r2, #1
    9b10:	b2d2      	uxtb	r2, r2
    9b12:	2a02      	cmp	r2, #2
    9b14:	d3f1      	bcc.n	9afa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    9b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b1a:	b510      	push	{r4, lr}
    9b1c:	f7f9 fcc2 	bl	34a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b24:	f000 b800 	b.w	9b28 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x5a>
    9b28:	0a00      	lsrs	r0, r0, #8
    9b2a:	2201      	movs	r2, #1
    9b2c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    9b30:	07c0      	lsls	r0, r0, #31
    9b32:	d000      	beq.n	9b36 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x68>
    9b34:	2203      	movs	r2, #3
    9b36:	4610      	mov	r0, r2
    9b38:	4770      	bx	lr
    9b3a:	b508      	push	{r3, lr}
    9b3c:	2301      	movs	r3, #1
    9b3e:	f640 1288 	movw	r2, #2440	; 0x988
    9b42:	4669      	mov	r1, sp
    9b44:	f7fe fa46 	bl	7fd4 <mpsl_fem_tx_power_split>
    9b48:	bd08      	pop	{r3, pc}
    9b4a:	b118      	cbz	r0, 9b54 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9b4c:	2802      	cmp	r0, #2
    9b4e:	d001      	beq.n	9b54 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9b50:	2001      	movs	r0, #1
    9b52:	4770      	bx	lr
    9b54:	2000      	movs	r0, #0
    9b56:	4770      	bx	lr

00009b58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    9b58:	b510      	push	{r4, lr}
    9b5a:	4604      	mov	r4, r0
    9b5c:	f7f9 fc28 	bl	33b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9b60:	b108      	cbz	r0, 9b66 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    9b62:	200c      	movs	r0, #12
    9b64:	bd10      	pop	{r4, pc}
    9b66:	7820      	ldrb	r0, [r4, #0]
    9b68:	b118      	cbz	r0, 9b72 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    9b6a:	2801      	cmp	r0, #1
    9b6c:	d001      	beq.n	9b72 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    9b6e:	2012      	movs	r0, #18
    9b70:	bd10      	pop	{r4, pc}
    9b72:	f7ff ffea 	bl	9b4a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    9b76:	1c61      	adds	r1, r4, #1
    9b78:	f7f8 f9ca 	bl	1f10 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    9b7c:	b108      	cbz	r0, 9b82 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    9b7e:	2000      	movs	r0, #0
    9b80:	bd10      	pop	{r4, pc}
    9b82:	2007      	movs	r0, #7
    9b84:	bd10      	pop	{r4, pc}

00009b86 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    9b86:	b510      	push	{r4, lr}
    9b88:	f7f9 fc12 	bl	33b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9b8c:	b108      	cbz	r0, 9b92 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    9b8e:	200c      	movs	r0, #12
    9b90:	bd10      	pop	{r4, pc}
    9b92:	f7f8 fa1b 	bl	1fcc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    9b96:	2000      	movs	r0, #0
    9b98:	f7f7 fee8 	bl	196c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    9b9c:	2000      	movs	r0, #0
    9b9e:	bd10      	pop	{r4, pc}

00009ba0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    9ba0:	b510      	push	{r4, lr}
    9ba2:	460b      	mov	r3, r1
    9ba4:	2201      	movs	r2, #1
    9ba6:	f100 0110 	add.w	r1, r0, #16
    9baa:	f7ff f9fa 	bl	8fa2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9bae:	2000      	movs	r0, #0
    9bb0:	bd10      	pop	{r4, pc}

00009bb2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    9bb2:	b510      	push	{r4, lr}
    9bb4:	8800      	ldrh	r0, [r0, #0]
    9bb6:	2100      	movs	r1, #0
    9bb8:	f7f7 fa92 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9bbc:	b118      	cbz	r0, 9bc6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    9bbe:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    9bc2:	b111      	cbz	r1, 9bca <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    9bc4:	e007      	b.n	9bd6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    9bc6:	2002      	movs	r0, #2
    9bc8:	bd10      	pop	{r4, pc}
    9bca:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    9bce:	2915      	cmp	r1, #21
    9bd0:	d003      	beq.n	9bda <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    9bd2:	2916      	cmp	r1, #22
    9bd4:	d001      	beq.n	9bda <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    9bd6:	200c      	movs	r0, #12
    9bd8:	bd10      	pop	{r4, pc}
    9bda:	2102      	movs	r1, #2
    9bdc:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    9be0:	2000      	movs	r0, #0
    9be2:	bd10      	pop	{r4, pc}

00009be4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    9be4:	b510      	push	{r4, lr}
    9be6:	2108      	movs	r1, #8
    9be8:	f7f7 f804 	bl	bf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9bec:	2000      	movs	r0, #0
    9bee:	bd10      	pop	{r4, pc}

00009bf0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    9bf0:	b510      	push	{r4, lr}
    9bf2:	4604      	mov	r4, r0
    9bf4:	f7f9 fb3e 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9bf8:	f7ff fc36 	bl	9468 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9bfc:	f7f7 ffb8 	bl	1b70 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9c00:	7020      	strb	r0, [r4, #0]
    9c02:	2000      	movs	r0, #0
    9c04:	bd10      	pop	{r4, pc}

00009c06 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    9c06:	b510      	push	{r4, lr}
    9c08:	4604      	mov	r4, r0
    9c0a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9c0e:	f000 fb41 	bl	a294 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9c12:	f7f7 ffad 	bl	1b70 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9c16:	7020      	strb	r0, [r4, #0]
    9c18:	f000 fb13 	bl	a242 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c8>
    9c1c:	f7f7 ffa8 	bl	1b70 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9c20:	7060      	strb	r0, [r4, #1]
    9c22:	2000      	movs	r0, #0
    9c24:	bd10      	pop	{r4, pc}

00009c26 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    9c26:	b510      	push	{r4, lr}
    9c28:	4604      	mov	r4, r0
    9c2a:	f7f8 f9d5 	bl	1fd8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    9c2e:	7020      	strb	r0, [r4, #0]
    9c30:	2000      	movs	r0, #0
    9c32:	bd10      	pop	{r4, pc}

00009c34 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    9c34:	b510      	push	{r4, lr}
    9c36:	4604      	mov	r4, r0
    9c38:	f7f9 fbba 	bl	33b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9c3c:	b108      	cbz	r0, 9c42 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    9c3e:	200c      	movs	r0, #12
    9c40:	bd10      	pop	{r4, pc}
    9c42:	7820      	ldrb	r0, [r4, #0]
    9c44:	b108      	cbz	r0, 9c4a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    9c46:	2801      	cmp	r0, #1
    9c48:	d107      	bne.n	9c5a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    9c4a:	f7ff ff7e 	bl	9b4a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    9c4e:	1c61      	adds	r1, r4, #1
    9c50:	f7f8 f99c 	bl	1f8c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    9c54:	b108      	cbz	r0, 9c5a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    9c56:	2000      	movs	r0, #0
    9c58:	bd10      	pop	{r4, pc}
    9c5a:	2012      	movs	r0, #18
    9c5c:	bd10      	pop	{r4, pc}

00009c5e <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    9c5e:	b51c      	push	{r2, r3, r4, lr}
    9c60:	4604      	mov	r4, r0
    9c62:	f7f9 fb07 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9c66:	2000      	movs	r0, #0
    9c68:	f88d 0002 	strb.w	r0, [sp, #2]
    9c6c:	2103      	movs	r1, #3
    9c6e:	f88d 1001 	strb.w	r1, [sp, #1]
    9c72:	f814 1b01 	ldrb.w	r1, [r4], #1
    9c76:	f88d 1003 	strb.w	r1, [sp, #3]
    9c7a:	f88d 0000 	strb.w	r0, [sp]
    9c7e:	4668      	mov	r0, sp
    9c80:	9401      	str	r4, [sp, #4]
    9c82:	f000 f92c 	bl	9ede <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    9c86:	bd1c      	pop	{r2, r3, r4, pc}

00009c88 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    9c88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9c8a:	4605      	mov	r5, r0
    9c8c:	f7f9 faf2 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9c90:	4606      	mov	r6, r0
    9c92:	7828      	ldrb	r0, [r5, #0]
    9c94:	2400      	movs	r4, #0
    9c96:	b160      	cbz	r0, 9cb2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    9c98:	f88d 4000 	strb.w	r4, [sp]
    9c9c:	2001      	movs	r0, #1
    9c9e:	f10d 0101 	add.w	r1, sp, #1
    9ca2:	f7f7 fda9 	bl	17f8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    9ca6:	b120      	cbz	r0, 9cb2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    9ca8:	4668      	mov	r0, sp
    9caa:	f000 f897 	bl	9ddc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    9cae:	2800      	cmp	r0, #0
    9cb0:	d112      	bne.n	9cd8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    9cb2:	f88d 400c 	strb.w	r4, [sp, #12]
    9cb6:	4630      	mov	r0, r6
    9cb8:	f7ff fbcc 	bl	9454 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9cbc:	b118      	cbz	r0, 9cc6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    9cbe:	2080      	movs	r0, #128	; 0x80
    9cc0:	f8ad 000d 	strh.w	r0, [sp, #13]
    9cc4:	e001      	b.n	9cca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    9cc6:	f8ad 400d 	strh.w	r4, [sp, #13]
    9cca:	f88d 400f 	strb.w	r4, [sp, #15]
    9cce:	7828      	ldrb	r0, [r5, #0]
    9cd0:	2801      	cmp	r0, #1
    9cd2:	d003      	beq.n	9cdc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    9cd4:	b138      	cbz	r0, 9ce6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    9cd6:	2012      	movs	r0, #18
    9cd8:	b004      	add	sp, #16
    9cda:	bd70      	pop	{r4, r5, r6, pc}
    9cdc:	a903      	add	r1, sp, #12
    9cde:	4630      	mov	r0, r6
    9ce0:	f7f9 fae4 	bl	32ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    9ce4:	e7f8      	b.n	9cd8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    9ce6:	4630      	mov	r0, r6
    9ce8:	f000 faae 	bl	a248 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9cec:	e7f4      	b.n	9cd8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00009cee <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    9cee:	b530      	push	{r4, r5, lr}
    9cf0:	b08b      	sub	sp, #44	; 0x2c
    9cf2:	4604      	mov	r4, r0
    9cf4:	f7f9 fabe 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9cf8:	4602      	mov	r2, r0
    9cfa:	7920      	ldrb	r0, [r4, #4]
    9cfc:	2804      	cmp	r0, #4
    9cfe:	d803      	bhi.n	9d08 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    9d00:	8860      	ldrh	r0, [r4, #2]
    9d02:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    9d06:	d902      	bls.n	9d0e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    9d08:	2012      	movs	r0, #18
    9d0a:	b00b      	add	sp, #44	; 0x2c
    9d0c:	bd30      	pop	{r4, r5, pc}
    9d0e:	2500      	movs	r5, #0
    9d10:	f88d 5004 	strb.w	r5, [sp, #4]
    9d14:	7921      	ldrb	r1, [r4, #4]
    9d16:	9500      	str	r5, [sp, #0]
    9d18:	f89d 0000 	ldrb.w	r0, [sp]
    9d1c:	2905      	cmp	r1, #5
    9d1e:	f040 0010 	orr.w	r0, r0, #16
    9d22:	f88d 0000 	strb.w	r0, [sp]
    9d26:	d254      	bcs.n	9dd2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    9d28:	e8df f001 	tbb	[pc, r1]
    9d2c:	11050803 	.word	0x11050803
    9d30:	000b      	.short	0x000b
    9d32:	f040 0001 	orr.w	r0, r0, #1
    9d36:	f040 0002 	orr.w	r0, r0, #2
    9d3a:	e006      	b.n	9d4a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    9d3c:	f040 0009 	orr.w	r0, r0, #9
    9d40:	e001      	b.n	9d46 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    9d42:	f040 0001 	orr.w	r0, r0, #1
    9d46:	f040 0004 	orr.w	r0, r0, #4
    9d4a:	f88d 0000 	strb.w	r0, [sp]
    9d4e:	f8bd 0000 	ldrh.w	r0, [sp]
    9d52:	9000      	str	r0, [sp, #0]
    9d54:	f8bd 0000 	ldrh.w	r0, [sp]
    9d58:	f8ad 0005 	strh.w	r0, [sp, #5]
    9d5c:	8821      	ldrh	r1, [r4, #0]
    9d5e:	f8dd 0006 	ldr.w	r0, [sp, #6]
    9d62:	f361 201f 	bfi	r0, r1, #8, #24
    9d66:	f8cd 0006 	str.w	r0, [sp, #6]
    9d6a:	8861      	ldrh	r1, [r4, #2]
    9d6c:	f8dd 0009 	ldr.w	r0, [sp, #9]
    9d70:	f361 201f 	bfi	r0, r1, #8, #24
    9d74:	f8cd 0009 	str.w	r0, [sp, #9]
    9d78:	7b60      	ldrb	r0, [r4, #13]
    9d7a:	f88d 000d 	strb.w	r0, [sp, #13]
    9d7e:	7960      	ldrb	r0, [r4, #5]
    9d80:	f88d 000e 	strb.w	r0, [sp, #14]
    9d84:	79a0      	ldrb	r0, [r4, #6]
    9d86:	f88d 000f 	strb.w	r0, [sp, #15]
    9d8a:	f8d4 0007 	ldr.w	r0, [r4, #7]
    9d8e:	9004      	str	r0, [sp, #16]
    9d90:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    9d94:	f8ad 0014 	strh.w	r0, [sp, #20]
    9d98:	7ba0      	ldrb	r0, [r4, #14]
    9d9a:	f88d 0016 	strb.w	r0, [sp, #22]
    9d9e:	207f      	movs	r0, #127	; 0x7f
    9da0:	f88d 0017 	strb.w	r0, [sp, #23]
    9da4:	2001      	movs	r0, #1
    9da6:	f88d 0018 	strb.w	r0, [sp, #24]
    9daa:	f88d 5019 	strb.w	r5, [sp, #25]
    9dae:	f88d 001a 	strb.w	r0, [sp, #26]
    9db2:	f88d 501b 	strb.w	r5, [sp, #27]
    9db6:	4610      	mov	r0, r2
    9db8:	f7ff fb6c 	bl	9494 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    9dbc:	f88d 001c 	strb.w	r0, [sp, #28]
    9dc0:	f88d 501d 	strb.w	r5, [sp, #29]
    9dc4:	f88d 501e 	strb.w	r5, [sp, #30]
    9dc8:	a909      	add	r1, sp, #36	; 0x24
    9dca:	a801      	add	r0, sp, #4
    9dcc:	f7f9 f936 	bl	303c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    9dd0:	e79b      	b.n	9d0a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    9dd2:	f241 31a9 	movw	r1, #5033	; 0x13a9
    9dd6:	2039      	movs	r0, #57	; 0x39
    9dd8:	f7f6 fe9c 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009ddc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    9ddc:	b570      	push	{r4, r5, r6, lr}
    9dde:	4604      	mov	r4, r0
    9de0:	7800      	ldrb	r0, [r0, #0]
    9de2:	2101      	movs	r1, #1
    9de4:	f7f7 f97c 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9de8:	0005      	movs	r5, r0
    9dea:	d007      	beq.n	9dfc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    9dec:	f7ff fcf4 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9df0:	b160      	cbz	r0, 9e0c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    9df2:	4628      	mov	r0, r5
    9df4:	f7ff fb34 	bl	9460 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9df8:	b110      	cbz	r0, 9e00 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    9dfa:	e005      	b.n	9e08 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    9dfc:	2042      	movs	r0, #66	; 0x42
    9dfe:	bd70      	pop	{r4, r5, r6, pc}
    9e00:	4628      	mov	r0, r5
    9e02:	f7ff fb23 	bl	944c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9e06:	b108      	cbz	r0, 9e0c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    9e08:	200c      	movs	r0, #12
    9e0a:	bd70      	pop	{r4, r5, r6, pc}
    9e0c:	1c61      	adds	r1, r4, #1
    9e0e:	4628      	mov	r0, r5
    9e10:	f7ff fb38 	bl	9484 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    9e14:	2000      	movs	r0, #0
    9e16:	bd70      	pop	{r4, r5, r6, pc}

00009e18 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    9e18:	b510      	push	{r4, lr}
    9e1a:	4604      	mov	r4, r0
    9e1c:	f7f9 fa2a 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9e20:	7861      	ldrb	r1, [r4, #1]
    9e22:	f3c1 0240 	ubfx	r2, r1, #1, #1
    9e26:	f001 0101 	and.w	r1, r1, #1
    9e2a:	f7ff fb27 	bl	947c <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    9e2e:	2000      	movs	r0, #0
    9e30:	bd10      	pop	{r4, pc}

00009e32 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    9e32:	b510      	push	{r4, lr}
    9e34:	4604      	mov	r4, r0
    9e36:	2001      	movs	r0, #1
    9e38:	f000 f93a 	bl	a0b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9e3c:	b128      	cbz	r0, 9e4a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    9e3e:	4621      	mov	r1, r4
    9e40:	2001      	movs	r0, #1
    9e42:	f7f7 fcf1 	bl	1828 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9e46:	2000      	movs	r0, #0
    9e48:	bd10      	pop	{r4, pc}
    9e4a:	200c      	movs	r0, #12
    9e4c:	bd10      	pop	{r4, pc}

00009e4e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    9e4e:	b51c      	push	{r2, r3, r4, lr}
    9e50:	4604      	mov	r4, r0
    9e52:	f7f9 fa0f 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9e56:	2000      	movs	r0, #0
    9e58:	f88d 0000 	strb.w	r0, [sp]
    9e5c:	f88d 0002 	strb.w	r0, [sp, #2]
    9e60:	2003      	movs	r0, #3
    9e62:	f88d 0001 	strb.w	r0, [sp, #1]
    9e66:	f814 0b01 	ldrb.w	r0, [r4], #1
    9e6a:	f88d 0003 	strb.w	r0, [sp, #3]
    9e6e:	4668      	mov	r0, sp
    9e70:	9401      	str	r4, [sp, #4]
    9e72:	f000 f89d 	bl	9fb0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    9e76:	bd1c      	pop	{r2, r3, r4, pc}

00009e78 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    9e78:	b510      	push	{r4, lr}
    9e7a:	f7f7 fcf9 	bl	1870 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    9e7e:	2000      	movs	r0, #0
    9e80:	bd10      	pop	{r4, pc}

00009e82 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    9e82:	b510      	push	{r4, lr}
    9e84:	4604      	mov	r4, r0
    9e86:	7800      	ldrb	r0, [r0, #0]
    9e88:	28ff      	cmp	r0, #255	; 0xff
    9e8a:	d009      	beq.n	9ea0 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    9e8c:	2101      	movs	r1, #1
    9e8e:	f7f7 f927 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9e92:	b118      	cbz	r0, 9e9c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    9e94:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9e98:	8441      	strh	r1, [r0, #34]	; 0x22
    9e9a:	e005      	b.n	9ea8 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    9e9c:	2042      	movs	r0, #66	; 0x42
    9e9e:	bd10      	pop	{r4, pc}
    9ea0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9ea4:	f7f9 f816 	bl	2ed4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    9ea8:	2000      	movs	r0, #0
    9eaa:	bd10      	pop	{r4, pc}

00009eac <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    9eac:	b510      	push	{r4, lr}
    9eae:	4604      	mov	r4, r0
    9eb0:	f7f9 fabe 	bl	3430 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    9eb4:	b118      	cbz	r0, 9ebe <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    9eb6:	2000      	movs	r0, #0
    9eb8:	f000 f8fa 	bl	a0b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9ebc:	b128      	cbz	r0, 9eca <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    9ebe:	4621      	mov	r1, r4
    9ec0:	2000      	movs	r0, #0
    9ec2:	f7f7 fcb1 	bl	1828 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9ec6:	2000      	movs	r0, #0
    9ec8:	bd10      	pop	{r4, pc}
    9eca:	200c      	movs	r0, #12
    9ecc:	bd10      	pop	{r4, pc}

00009ece <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    9ece:	b510      	push	{r4, lr}
    9ed0:	7800      	ldrb	r0, [r0, #0]
    9ed2:	b100      	cbz	r0, 9ed6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    9ed4:	2001      	movs	r0, #1
    9ed6:	f7f9 f827 	bl	2f28 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    9eda:	2000      	movs	r0, #0
    9edc:	bd10      	pop	{r4, pc}

00009ede <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    9ede:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9ee2:	4606      	mov	r6, r0
    9ee4:	7845      	ldrb	r5, [r0, #1]
    9ee6:	7800      	ldrb	r0, [r0, #0]
    9ee8:	2101      	movs	r1, #1
    9eea:	f7f7 f8f9 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9eee:	0004      	movs	r4, r0
    9ef0:	d01e      	beq.n	9f30 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    9ef2:	f7ff fa7e 	bl	93f2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    9ef6:	78f1      	ldrb	r1, [r6, #3]
    9ef8:	4281      	cmp	r1, r0
    9efa:	d800      	bhi.n	9efe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    9efc:	4608      	mov	r0, r1
    9efe:	4607      	mov	r7, r0
    9f00:	2d04      	cmp	r5, #4
    9f02:	d018      	beq.n	9f36 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    9f04:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9f06:	f7fe ff72 	bl	8dee <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    9f0a:	4438      	add	r0, r7
    9f0c:	b281      	uxth	r1, r0
    9f0e:	4620      	mov	r0, r4
    9f10:	2201      	movs	r2, #1
    9f12:	f000 f8df 	bl	a0d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    9f16:	2800      	cmp	r0, #0
    9f18:	d10b      	bne.n	9f32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9f1a:	2d03      	cmp	r5, #3
    9f1c:	d000      	beq.n	9f20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9f1e:	b1df      	cbz	r7, 9f58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9f20:	4620      	mov	r0, r4
    9f22:	f7ff fa9b 	bl	945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9f26:	7871      	ldrb	r1, [r6, #1]
    9f28:	2903      	cmp	r1, #3
    9f2a:	d010      	beq.n	9f4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9f2c:	b9a0      	cbnz	r0, 9f58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9f2e:	e004      	b.n	9f3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    9f30:	2042      	movs	r0, #66	; 0x42
    9f32:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9f36:	b97f      	cbnz	r7, 9f58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9f38:	e7f2      	b.n	9f20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9f3a:	2904      	cmp	r1, #4
    9f3c:	d107      	bne.n	9f4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9f3e:	4620      	mov	r0, r4
    9f40:	f7ff fc4a 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9f44:	b140      	cbz	r0, 9f58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9f46:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9f48:	f7fe ff18 	bl	8d7c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    9f4c:	b120      	cbz	r0, 9f58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9f4e:	2d01      	cmp	r5, #1
    9f50:	d004      	beq.n	9f5c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    9f52:	2d03      	cmp	r5, #3
    9f54:	d002      	beq.n	9f5c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    9f56:	e00e      	b.n	9f76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    9f58:	2012      	movs	r0, #18
    9f5a:	e7ea      	b.n	9f32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9f5c:	4620      	mov	r0, r4
    9f5e:	f7ff fa7d 	bl	945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9f62:	b108      	cbz	r0, 9f68 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    9f64:	2200      	movs	r2, #0
    9f66:	e002      	b.n	9f6e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    9f68:	2d01      	cmp	r5, #1
    9f6a:	d013      	beq.n	9f94 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    9f6c:	2201      	movs	r2, #1
    9f6e:	4668      	mov	r0, sp
    9f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9f72:	f7fe fe9f 	bl	8cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9f76:	2d04      	cmp	r5, #4
    9f78:	d018      	beq.n	9fac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    9f7a:	6872      	ldr	r2, [r6, #4]
    9f7c:	463b      	mov	r3, r7
    9f7e:	2101      	movs	r1, #1
    9f80:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9f82:	f7fe fecb 	bl	8d1c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    9f86:	b138      	cbz	r0, 9f98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    9f88:	7870      	ldrb	r0, [r6, #1]
    9f8a:	2802      	cmp	r0, #2
    9f8c:	d006      	beq.n	9f9c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    9f8e:	2803      	cmp	r0, #3
    9f90:	d004      	beq.n	9f9c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    9f92:	e00b      	b.n	9fac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    9f94:	2202      	movs	r2, #2
    9f96:	e7ea      	b.n	9f6e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    9f98:	2007      	movs	r0, #7
    9f9a:	e7ca      	b.n	9f32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9f9c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9f9e:	f7fe ff26 	bl	8dee <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    9fa2:	4602      	mov	r2, r0
    9fa4:	2101      	movs	r1, #1
    9fa6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9fa8:	f7fe fefe 	bl	8da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9fac:	2000      	movs	r0, #0
    9fae:	e7c0      	b.n	9f32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00009fb0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    9fb0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9fb4:	4607      	mov	r7, r0
    9fb6:	7845      	ldrb	r5, [r0, #1]
    9fb8:	78c6      	ldrb	r6, [r0, #3]
    9fba:	7800      	ldrb	r0, [r0, #0]
    9fbc:	2101      	movs	r1, #1
    9fbe:	f7f7 f88f 	bl	10e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9fc2:	0004      	movs	r4, r0
    9fc4:	d003      	beq.n	9fce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    9fc6:	f7ff fa4b 	bl	9460 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9fca:	b118      	cbz	r0, 9fd4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    9fcc:	e003      	b.n	9fd6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    9fce:	2042      	movs	r0, #66	; 0x42
    9fd0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fd4:	2600      	movs	r6, #0
    9fd6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9fd8:	f7fe ff0d 	bl	8df6 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    9fdc:	4430      	add	r0, r6
    9fde:	b281      	uxth	r1, r0
    9fe0:	4688      	mov	r8, r1
    9fe2:	4620      	mov	r0, r4
    9fe4:	2201      	movs	r2, #1
    9fe6:	f000 f875 	bl	a0d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    9fea:	2800      	cmp	r0, #0
    9fec:	d1f0      	bne.n	9fd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9fee:	2d04      	cmp	r5, #4
    9ff0:	d008      	beq.n	a004 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    9ff2:	2d03      	cmp	r5, #3
    9ff4:	d00a      	beq.n	a00c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    9ff6:	b12e      	cbz	r6, a004 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    9ff8:	4620      	mov	r0, r4
    9ffa:	f7ff fbed 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9ffe:	b118      	cbz	r0, a008 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    a000:	200c      	movs	r0, #12
    a002:	e7e5      	b.n	9fd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a004:	2012      	movs	r0, #18
    a006:	e7e3      	b.n	9fd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a008:	2d01      	cmp	r5, #1
    a00a:	d10c      	bne.n	a026 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    a00c:	4620      	mov	r0, r4
    a00e:	f7ff fa25 	bl	945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a012:	b108      	cbz	r0, a018 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    a014:	2204      	movs	r2, #4
    a016:	e002      	b.n	a01e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    a018:	2d01      	cmp	r5, #1
    a01a:	d010      	beq.n	a03e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    a01c:	2205      	movs	r2, #5
    a01e:	4668      	mov	r0, sp
    a020:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a022:	f7fe fe47 	bl	8cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a026:	687a      	ldr	r2, [r7, #4]
    a028:	4633      	mov	r3, r6
    a02a:	2100      	movs	r1, #0
    a02c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a02e:	f7fe fe75 	bl	8d1c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    a032:	b130      	cbz	r0, a042 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    a034:	2d02      	cmp	r5, #2
    a036:	d006      	beq.n	a046 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    a038:	2d03      	cmp	r5, #3
    a03a:	d004      	beq.n	a046 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    a03c:	e008      	b.n	a050 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    a03e:	2206      	movs	r2, #6
    a040:	e7ed      	b.n	a01e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    a042:	2007      	movs	r0, #7
    a044:	e7c4      	b.n	9fd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a046:	4642      	mov	r2, r8
    a048:	2100      	movs	r1, #0
    a04a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a04c:	f7fe feac 	bl	8da8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a050:	2000      	movs	r0, #0
    a052:	e7bd      	b.n	9fd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000a054 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    a054:	b510      	push	{r4, lr}
    a056:	4604      	mov	r4, r0
    a058:	4601      	mov	r1, r0
    a05a:	2000      	movs	r0, #0
    a05c:	f7f7 fbcc 	bl	17f8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    a060:	b910      	cbnz	r0, a068 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    a062:	2000      	movs	r0, #0
    a064:	6020      	str	r0, [r4, #0]
    a066:	80a0      	strh	r0, [r4, #4]
    a068:	2000      	movs	r0, #0
    a06a:	bd10      	pop	{r4, pc}

0000a06c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    a06c:	b510      	push	{r4, lr}
    a06e:	f7f9 f9e5 	bl	343c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    a072:	2000      	movs	r0, #0
    a074:	bd10      	pop	{r4, pc}

0000a076 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a076:	f000 b800 	b.w	a07a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000a07a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a07a:	b510      	push	{r4, lr}
    a07c:	f7fe ff44 	bl	8f08 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a080:	f7f7 fc32 	bl	18e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a084:	f7f9 fa24 	bl	34d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    a088:	f7ff f8e5 	bl	9256 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    a08c:	f7fe fffd 	bl	908a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    a090:	f7f7 ff9c 	bl	1fcc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    a094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a098:	f7f9 b8cc 	b.w	3234 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf8>
    a09c:	07c1      	lsls	r1, r0, #31
    a09e:	d001      	beq.n	a0a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    a0a0:	2001      	movs	r0, #1
    a0a2:	4770      	bx	lr
    a0a4:	0780      	lsls	r0, r0, #30
    a0a6:	d501      	bpl.n	a0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
    a0a8:	2002      	movs	r0, #2
    a0aa:	4770      	bx	lr
    a0ac:	2000      	movs	r0, #0
    a0ae:	4770      	bx	lr
    a0b0:	b510      	push	{r4, lr}
    a0b2:	f7f9 f8a9 	bl	3208 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xcc>
    a0b6:	b158      	cbz	r0, a0d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    a0b8:	f7f9 f8dc 	bl	3274 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    a0bc:	4604      	mov	r4, r0
    a0be:	f7ff f9cf 	bl	9460 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a0c2:	b918      	cbnz	r0, a0cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x52>
    a0c4:	4620      	mov	r0, r4
    a0c6:	f7ff f9c1 	bl	944c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a0ca:	b108      	cbz	r0, a0d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    a0cc:	2000      	movs	r0, #0
    a0ce:	bd10      	pop	{r4, pc}
    a0d0:	2001      	movs	r0, #1
    a0d2:	bd10      	pop	{r4, pc}
    a0d4:	b570      	push	{r4, r5, r6, lr}
    a0d6:	460c      	mov	r4, r1
    a0d8:	4605      	mov	r5, r0
    a0da:	b112      	cbz	r2, a0e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    a0dc:	291f      	cmp	r1, #31
    a0de:	d80c      	bhi.n	a0fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    a0e0:	e016      	b.n	a110 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    a0e2:	f7f7 fa49 	bl	1578 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    a0e6:	42a0      	cmp	r0, r4
    a0e8:	d201      	bcs.n	a0ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x74>
    a0ea:	2007      	movs	r0, #7
    a0ec:	bd70      	pop	{r4, r5, r6, pc}
    a0ee:	4628      	mov	r0, r5
    a0f0:	f7ff f9b4 	bl	945c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a0f4:	b118      	cbz	r0, a0fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    a0f6:	2c1f      	cmp	r4, #31
    a0f8:	d901      	bls.n	a0fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    a0fa:	2012      	movs	r0, #18
    a0fc:	bd70      	pop	{r4, r5, r6, pc}
    a0fe:	4628      	mov	r0, r5
    a100:	f7ff f9b5 	bl	946e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a104:	b130      	cbz	r0, a114 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    a106:	4621      	mov	r1, r4
    a108:	4628      	mov	r0, r5
    a10a:	f7ff f97e 	bl	940a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    a10e:	b118      	cbz	r0, a118 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    a110:	2000      	movs	r0, #0
    a112:	bd70      	pop	{r4, r5, r6, pc}
    a114:	2042      	movs	r0, #66	; 0x42
    a116:	bd70      	pop	{r4, r5, r6, pc}
    a118:	2045      	movs	r0, #69	; 0x45
    a11a:	bd70      	pop	{r4, r5, r6, pc}
    a11c:	b510      	push	{r4, lr}
    a11e:	4604      	mov	r4, r0
    a120:	7840      	ldrb	r0, [r0, #1]
    a122:	06c1      	lsls	r1, r0, #27
    a124:	d51c      	bpl.n	a160 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    a126:	07c0      	lsls	r0, r0, #31
    a128:	d00b      	beq.n	a142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    a12a:	f7f9 f9a9 	bl	3480 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    a12e:	b1b8      	cbz	r0, a160 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    a130:	7860      	ldrb	r0, [r4, #1]
    a132:	06c1      	lsls	r1, r0, #27
    a134:	d405      	bmi.n	a142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    a136:	0700      	lsls	r0, r0, #28
    a138:	d503      	bpl.n	a142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    a13a:	7d20      	ldrb	r0, [r4, #20]
    a13c:	2802      	cmp	r0, #2
    a13e:	d10f      	bne.n	a160 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    a140:	e010      	b.n	a164 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    a142:	7d20      	ldrb	r0, [r4, #20]
    a144:	2802      	cmp	r0, #2
    a146:	d001      	beq.n	a14c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    a148:	7ea0      	ldrb	r0, [r4, #26]
    a14a:	b948      	cbnz	r0, a160 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    a14c:	7860      	ldrb	r0, [r4, #1]
    a14e:	0700      	lsls	r0, r0, #28
    a150:	d408      	bmi.n	a164 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    a152:	f8d4 0005 	ldr.w	r0, [r4, #5]
    a156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a15a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    a15e:	d201      	bcs.n	a164 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    a160:	2011      	movs	r0, #17
    a162:	bd10      	pop	{r4, pc}
    a164:	2000      	movs	r0, #0
    a166:	bd10      	pop	{r4, pc}
    a168:	b538      	push	{r3, r4, r5, lr}
    a16a:	4604      	mov	r4, r0
    a16c:	7800      	ldrb	r0, [r0, #0]
    a16e:	28ef      	cmp	r0, #239	; 0xef
    a170:	d843      	bhi.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a172:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a176:	f8ad 0000 	strh.w	r0, [sp]
    a17a:	9800      	ldr	r0, [sp, #0]
    a17c:	f000 f892 	bl	a2a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    a180:	b3a0      	cbz	r0, a1ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    a182:	7861      	ldrb	r1, [r4, #1]
    a184:	0708      	lsls	r0, r1, #28
    a186:	d40b      	bmi.n	a1a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x126>
    a188:	f8d4 0002 	ldr.w	r0, [r4, #2]
    a18c:	f8d4 3005 	ldr.w	r3, [r4, #5]
    a190:	0a02      	lsrs	r2, r0, #8
    a192:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    a196:	d830      	bhi.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a198:	2220      	movs	r2, #32
    a19a:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    a19e:	d82c      	bhi.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1a0:	7a60      	ldrb	r0, [r4, #9]
    a1a2:	b318      	cbz	r0, a1ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    a1a4:	2807      	cmp	r0, #7
    a1a6:	d828      	bhi.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1a8:	7aa0      	ldrb	r0, [r4, #10]
    a1aa:	b128      	cbz	r0, a1b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    a1ac:	2801      	cmp	r0, #1
    a1ae:	d003      	beq.n	a1b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    a1b0:	2802      	cmp	r0, #2
    a1b2:	d001      	beq.n	a1b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    a1b4:	2803      	cmp	r0, #3
    a1b6:	d120      	bne.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1b8:	074a      	lsls	r2, r1, #29
    a1ba:	d403      	bmi.n	a1c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    a1bc:	2802      	cmp	r0, #2
    a1be:	d001      	beq.n	a1c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    a1c0:	2803      	cmp	r0, #3
    a1c2:	d105      	bne.n	a1d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x156>
    a1c4:	7ae0      	ldrb	r0, [r4, #11]
    a1c6:	b108      	cbz	r0, a1cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    a1c8:	2801      	cmp	r0, #1
    a1ca:	d116      	bne.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1cc:	0748      	lsls	r0, r1, #29
    a1ce:	d407      	bmi.n	a1e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    a1d0:	7ca0      	ldrb	r0, [r4, #18]
    a1d2:	b128      	cbz	r0, a1e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    a1d4:	2801      	cmp	r0, #1
    a1d6:	d003      	beq.n	a1e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    a1d8:	2802      	cmp	r0, #2
    a1da:	d001      	beq.n	a1e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    a1dc:	2803      	cmp	r0, #3
    a1de:	d10c      	bne.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1e0:	06c8      	lsls	r0, r1, #27
    a1e2:	7d20      	ldrb	r0, [r4, #20]
    a1e4:	d503      	bpl.n	a1ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a1e6:	2801      	cmp	r0, #1
    a1e8:	d107      	bne.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1ea:	e002      	b.n	a1f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    a1ec:	e005      	b.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1ee:	2802      	cmp	r0, #2
    a1f0:	d003      	beq.n	a1fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a1f2:	7e20      	ldrb	r0, [r4, #24]
    a1f4:	b118      	cbz	r0, a1fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    a1f6:	2801      	cmp	r0, #1
    a1f8:	d001      	beq.n	a1fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    a1fa:	2012      	movs	r0, #18
    a1fc:	bd38      	pop	{r3, r4, r5, pc}
    a1fe:	2000      	movs	r0, #0
    a200:	bd38      	pop	{r3, r4, r5, pc}
    a202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a206:	7890      	ldrb	r0, [r2, #2]
    a208:	9e06      	ldr	r6, [sp, #24]
    a20a:	461d      	mov	r5, r3
    a20c:	4614      	mov	r4, r2
    a20e:	b908      	cbnz	r0, a214 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19a>
    a210:	f7f9 f94e 	bl	34b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a214:	78e4      	ldrb	r4, [r4, #3]
    a216:	4607      	mov	r7, r0
    a218:	b914      	cbnz	r4, a220 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    a21a:	f7f9 f949 	bl	34b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a21e:	4604      	mov	r4, r0
    a220:	b16f      	cbz	r7, a23e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    a222:	b164      	cbz	r4, a23e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    a224:	4638      	mov	r0, r7
    a226:	f7ff ff39 	bl	a09c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    a22a:	4620      	mov	r0, r4
    a22c:	f7ff ff36 	bl	a09c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    a230:	b12f      	cbz	r7, a23e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    a232:	b124      	cbz	r4, a23e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    a234:	702f      	strb	r7, [r5, #0]
    a236:	7034      	strb	r4, [r6, #0]
    a238:	2000      	movs	r0, #0
    a23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a23e:	2009      	movs	r0, #9
    a240:	e7fb      	b.n	a23a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    a242:	207f      	movs	r0, #127	; 0x7f
    a244:	f000 b826 	b.w	a294 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    a248:	b570      	push	{r4, r5, r6, lr}
    a24a:	4605      	mov	r5, r0
    a24c:	f7ff f90f 	bl	946e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a250:	b170      	cbz	r0, a270 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    a252:	4628      	mov	r0, r5
    a254:	f7ff fac0 	bl	97d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a258:	2800      	cmp	r0, #0
    a25a:	d008      	beq.n	a26e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    a25c:	4628      	mov	r0, r5
    a25e:	f7ff fab8 	bl	97d2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    a262:	4604      	mov	r4, r0
    a264:	4628      	mov	r0, r5
    a266:	f7ff fa8e 	bl	9786 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    a26a:	b118      	cbz	r0, a274 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    a26c:	200c      	movs	r0, #12
    a26e:	bd70      	pop	{r4, r5, r6, pc}
    a270:	2042      	movs	r0, #66	; 0x42
    a272:	bd70      	pop	{r4, r5, r6, pc}
    a274:	b164      	cbz	r4, a290 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    a276:	8820      	ldrh	r0, [r4, #0]
    a278:	f7fe fe15 	bl	8ea6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a27c:	8820      	ldrh	r0, [r4, #0]
    a27e:	2100      	movs	r1, #0
    a280:	f7f6 ffd0 	bl	1224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a284:	b120      	cbz	r0, a290 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    a286:	f241 71ae 	movw	r1, #6062	; 0x17ae
    a28a:	2039      	movs	r0, #57	; 0x39
    a28c:	f7f6 fc42 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a290:	2000      	movs	r0, #0
    a292:	bd70      	pop	{r4, r5, r6, pc}
    a294:	b508      	push	{r3, lr}
    a296:	f640 1288 	movw	r2, #2440	; 0x988
    a29a:	2300      	movs	r3, #0
    a29c:	4669      	mov	r1, sp
    a29e:	f7fd fe99 	bl	7fd4 <mpsl_fem_tx_power_split>
    a2a2:	bd08      	pop	{r3, pc}
    a2a4:	b2c0      	uxtb	r0, r0
    a2a6:	06c1      	lsls	r1, r0, #27
    a2a8:	d40c      	bmi.n	a2c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    a2aa:	0681      	lsls	r1, r0, #26
    a2ac:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    a2b0:	d503      	bpl.n	a2ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    a2b2:	b9d1      	cbnz	r1, a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2b4:	0781      	lsls	r1, r0, #30
    a2b6:	d418      	bmi.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2b8:	e001      	b.n	a2be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    a2ba:	2900      	cmp	r1, #0
    a2bc:	d1fa      	bne.n	a2b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23a>
    a2be:	0700      	lsls	r0, r0, #28
    a2c0:	d413      	bmi.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2c2:	e010      	b.n	a2e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    a2c4:	0641      	lsls	r1, r0, #25
    a2c6:	d410      	bmi.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2c8:	0681      	lsls	r1, r0, #26
    a2ca:	d40e      	bmi.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2cc:	07c1      	lsls	r1, r0, #31
    a2ce:	ea4f 7180 	mov.w	r1, r0, lsl #30
    a2d2:	d004      	beq.n	a2de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    a2d4:	2900      	cmp	r1, #0
    a2d6:	db02      	blt.n	a2de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    a2d8:	0740      	lsls	r0, r0, #29
    a2da:	d404      	bmi.n	a2e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    a2dc:	e005      	b.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2de:	0701      	lsls	r1, r0, #28
    a2e0:	d403      	bmi.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2e2:	0740      	lsls	r0, r0, #29
    a2e4:	d401      	bmi.n	a2ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    a2e6:	2001      	movs	r0, #1
    a2e8:	4770      	bx	lr
    a2ea:	2000      	movs	r0, #0
    a2ec:	4770      	bx	lr
    a2ee:	b510      	push	{r4, lr}
    a2f0:	f7f8 fe04 	bl	2efc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    a2f4:	b110      	cbz	r0, a2fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x282>
    a2f6:	f44f 7188 	mov.w	r1, #272	; 0x110
    a2fa:	e004      	b.n	a306 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28c>
    a2fc:	f7f7 ffe8 	bl	22d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    a300:	b120      	cbz	r0, a30c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    a302:	f240 1115 	movw	r1, #277	; 0x115
    a306:	2001      	movs	r0, #1
    a308:	f7f6 fc04 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a310:	2001      	movs	r0, #1
    a312:	f7fe bc18 	b.w	8b46 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a316:	6802      	ldr	r2, [r0, #0]
    a318:	b912      	cbnz	r2, a320 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a6>
    a31a:	6001      	str	r1, [r0, #0]
    a31c:	4770      	bx	lr
    a31e:	4602      	mov	r2, r0
    a320:	6850      	ldr	r0, [r2, #4]
    a322:	b108      	cbz	r0, a328 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ae>
    a324:	428a      	cmp	r2, r1
    a326:	d1fa      	bne.n	a31e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    a328:	428a      	cmp	r2, r1
    a32a:	d0f7      	beq.n	a31c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a2>
    a32c:	6051      	str	r1, [r2, #4]
    a32e:	4770      	bx	lr
    a330:	b510      	push	{r4, lr}
    a332:	4604      	mov	r4, r0
    a334:	e002      	b.n	a33c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
    a336:	6820      	ldr	r0, [r4, #0]
    a338:	4780      	blx	r0
    a33a:	6864      	ldr	r4, [r4, #4]
    a33c:	2c00      	cmp	r4, #0
    a33e:	d1fa      	bne.n	a336 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2bc>
    a340:	bd10      	pop	{r4, pc}

0000a342 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    a342:	f7fd bb9b 	b.w	7a7c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a346:	0001      	.short	0x0001
    a348:	0002000b 	.word	0x0002000b
    a34c:	0005000a 	.word	0x0005000a
    a350:	000a0009 	.word	0x000a0009
    a354:	00140008 	.word	0x00140008
    a358:	001e0007 	.word	0x001e0007
    a35c:	00320006 	.word	0x00320006
    a360:	004b0005 	.word	0x004b0005
    a364:	00640004 	.word	0x00640004
    a368:	00960003 	.word	0x00960003
    a36c:	00fa0002 	.word	0x00fa0002
    a370:	01f40001 	.word	0x01f40001
	...

0000a376 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    a376:	b510      	push	{r4, lr}
    a378:	f7f9 faf8 	bl	396c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    a37c:	f000 f818 	bl	a3b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    a380:	f7f9 f90a 	bl	3598 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    a384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a388:	f7f9 b970 	b.w	366c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000a38c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    a38c:	b510      	push	{r4, lr}
    a38e:	24c8      	movs	r4, #200	; 0xc8
    a390:	1e64      	subs	r4, r4, #1
    a392:	b2e4      	uxtb	r4, r4
    a394:	f7f9 f91e 	bl	35d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    a398:	2802      	cmp	r0, #2
    a39a:	d003      	beq.n	a3a4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    a39c:	2801      	cmp	r0, #1
    a39e:	d000      	beq.n	a3a2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    a3a0:	2000      	movs	r0, #0
    a3a2:	bd10      	pop	{r4, pc}
    a3a4:	2c00      	cmp	r4, #0
    a3a6:	d1f3      	bne.n	a390 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    a3a8:	21ed      	movs	r1, #237	; 0xed
    a3aa:	203b      	movs	r0, #59	; 0x3b
    a3ac:	f7f6 fbb2 	bl	b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000a3b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    a3b0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a3b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a3b8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    a3bc:	f3bf 8f4f 	dsb	sy
    a3c0:	f3bf 8f6f 	isb	sy
    a3c4:	f7f9 b986 	b.w	36d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	db09      	blt.n	a3e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    a3cc:	f000 021f 	and.w	r2, r0, #31
    a3d0:	2101      	movs	r1, #1
    a3d2:	4091      	lsls	r1, r2
    a3d4:	0940      	lsrs	r0, r0, #5
    a3d6:	0080      	lsls	r0, r0, #2
    a3d8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a3dc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a3e0:	4770      	bx	lr
    a3e2:	2800      	cmp	r0, #0
    a3e4:	db0d      	blt.n	a402 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    a3e6:	f000 021f 	and.w	r2, r0, #31
    a3ea:	2101      	movs	r1, #1
    a3ec:	4091      	lsls	r1, r2
    a3ee:	0940      	lsrs	r0, r0, #5
    a3f0:	0080      	lsls	r0, r0, #2
    a3f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a3f6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a3fa:	f3bf 8f4f 	dsb	sy
    a3fe:	f3bf 8f6f 	isb	sy
    a402:	4770      	bx	lr
    a404:	5840      	ldr	r0, [r0, r1]
    a406:	2800      	cmp	r0, #0
    a408:	d000      	beq.n	a40c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    a40a:	2001      	movs	r0, #1
    a40c:	4770      	bx	lr
    a40e:	5840      	ldr	r0, [r0, r1]
    a410:	2800      	cmp	r0, #0
    a412:	d000      	beq.n	a416 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    a414:	2001      	movs	r0, #1
    a416:	4770      	bx	lr

0000a418 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    a418:	b510      	push	{r4, lr}
    a41a:	4604      	mov	r4, r0
    a41c:	4608      	mov	r0, r1
    a41e:	f7f9 fbbf 	bl	3ba0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a426:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    a42a:	fbb0 f0f1 	udiv	r0, r0, r1
    a42e:	1a20      	subs	r0, r4, r0
    a430:	1e80      	subs	r0, r0, #2
    a432:	bd10      	pop	{r4, pc}

0000a434 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    a434:	b510      	push	{r4, lr}
    a436:	4604      	mov	r4, r0
    a438:	4608      	mov	r0, r1
    a43a:	f7f9 fbb1 	bl	3ba0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a43e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a442:	fbb0 f0f1 	udiv	r0, r0, r1
    a446:	1a20      	subs	r0, r4, r0
    a448:	bd10      	pop	{r4, pc}
    a44a:	2804      	cmp	r0, #4
    a44c:	d202      	bcs.n	a454 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    a44e:	f04f 0028 	mov.w	r0, #40	; 0x28
    a452:	4770      	bx	lr
    a454:	d102      	bne.n	a45c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    a456:	f04f 0010 	mov.w	r0, #16
    a45a:	4770      	bx	lr
    a45c:	f04f 0000 	mov.w	r0, #0
    a460:	4770      	bx	lr
    a462:	2100      	movs	r1, #0
    a464:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    a468:	f800 1f24 	strb.w	r1, [r0, #36]!
    a46c:	7041      	strb	r1, [r0, #1]
    a46e:	4770      	bx	lr

0000a470 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    a470:	b570      	push	{r4, r5, r6, lr}
    a472:	f7fa f8ed 	bl	4650 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    a476:	4605      	mov	r5, r0
    a478:	2400      	movs	r4, #0
    a47a:	e006      	b.n	a48a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    a47c:	4620      	mov	r0, r4
    a47e:	f7fa f8ed 	bl	465c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    a482:	f7ff ffee 	bl	a462 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    a486:	1c64      	adds	r4, r4, #1
    a488:	b2e4      	uxtb	r4, r4
    a48a:	42ac      	cmp	r4, r5
    a48c:	d3f6      	bcc.n	a47c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    a48e:	bd70      	pop	{r4, r5, r6, pc}

0000a490 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    a490:	f7fc bc96 	b.w	6dc0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000a494 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    a494:	b510      	push	{r4, lr}
    a496:	2000      	movs	r0, #0
    a498:	f7fc ffee 	bl	7478 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    a49c:	6800      	ldr	r0, [r0, #0]
    a49e:	2800      	cmp	r0, #0
    a4a0:	bf18      	it	ne
    a4a2:	2001      	movne	r0, #1
    a4a4:	bd10      	pop	{r4, pc}

0000a4a6 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    a4a6:	b510      	push	{r4, lr}
    a4a8:	f7fd f85e 	bl	7568 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a4ac:	f7fc fb42 	bl	6b34 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a4b0:	f000 f804 	bl	a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a4b4:	b280      	uxth	r0, r0
    a4b6:	bd10      	pop	{r4, pc}

0000a4b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    a4b8:	f7fc bfb8 	b.w	742c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0000a4bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    a4bc:	0a41      	lsrs	r1, r0, #9
    a4be:	f643 5209 	movw	r2, #15625	; 0x3d09
    a4c2:	4351      	muls	r1, r2
    a4c4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    a4c8:	fb10 f002 	smulbb	r0, r0, r2
    a4cc:	f500 7080 	add.w	r0, r0, #256	; 0x100
    a4d0:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    a4d4:	4770      	bx	lr
    a4d6:	2800      	cmp	r0, #0
    a4d8:	db09      	blt.n	a4ee <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    a4da:	f000 021f 	and.w	r2, r0, #31
    a4de:	2101      	movs	r1, #1
    a4e0:	4091      	lsls	r1, r2
    a4e2:	0940      	lsrs	r0, r0, #5
    a4e4:	0080      	lsls	r0, r0, #2
    a4e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a4ea:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a4ee:	4770      	bx	lr
    a4f0:	2800      	cmp	r0, #0
    a4f2:	db0d      	blt.n	a510 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    a4f4:	f000 021f 	and.w	r2, r0, #31
    a4f8:	2101      	movs	r1, #1
    a4fa:	4091      	lsls	r1, r2
    a4fc:	0940      	lsrs	r0, r0, #5
    a4fe:	0080      	lsls	r0, r0, #2
    a500:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a504:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a508:	f3bf 8f4f 	dsb	sy
    a50c:	f3bf 8f6f 	isb	sy
    a510:	4770      	bx	lr
    a512:	5840      	ldr	r0, [r0, r1]
    a514:	2800      	cmp	r0, #0
    a516:	d000      	beq.n	a51a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    a518:	2001      	movs	r0, #1
    a51a:	4770      	bx	lr
    a51c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    a520:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    a524:	f002 0201 	and.w	r2, r2, #1
    a528:	03c0      	lsls	r0, r0, #15
    a52a:	d503      	bpl.n	a534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    a52c:	428a      	cmp	r2, r1
    a52e:	d101      	bne.n	a534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    a530:	2001      	movs	r0, #1
    a532:	4770      	bx	lr
    a534:	2000      	movs	r0, #0
    a536:	4770      	bx	lr

0000a538 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    a538:	b510      	push	{r4, lr}
    a53a:	2101      	movs	r1, #1
    a53c:	0788      	lsls	r0, r1, #30
    a53e:	f7fd fb35 	bl	7bac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    a542:	2800      	cmp	r0, #0
    a544:	d000      	beq.n	a548 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    a546:	2001      	movs	r0, #1
    a548:	bd10      	pop	{r4, pc}

0000a54a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    a54a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a54e:	2101      	movs	r1, #1
    a550:	6001      	str	r1, [r0, #0]
    a552:	4770      	bx	lr

0000a554 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    a554:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    a558:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    a55c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    a560:	f002 0203 	and.w	r2, r2, #3
    a564:	03c9      	lsls	r1, r1, #15
    a566:	d503      	bpl.n	a570 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    a568:	4282      	cmp	r2, r0
    a56a:	d101      	bne.n	a570 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    a56c:	2001      	movs	r0, #1
    a56e:	4770      	bx	lr
    a570:	2000      	movs	r0, #0
    a572:	4770      	bx	lr

0000a574 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    a574:	b510      	push	{r4, lr}
    a576:	2100      	movs	r1, #0
    a578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a57c:	f7fd fb16 	bl	7bac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    a580:	2800      	cmp	r0, #0
    a582:	d000      	beq.n	a586 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    a584:	2001      	movs	r0, #1
    a586:	bd10      	pop	{r4, pc}
    a588:	2800      	cmp	r0, #0
    a58a:	db09      	blt.n	a5a0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    a58c:	f000 021f 	and.w	r2, r0, #31
    a590:	2101      	movs	r1, #1
    a592:	4091      	lsls	r1, r2
    a594:	0940      	lsrs	r0, r0, #5
    a596:	0080      	lsls	r0, r0, #2
    a598:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a59c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a5a0:	4770      	bx	lr
    a5a2:	2800      	cmp	r0, #0
    a5a4:	db0d      	blt.n	a5c2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    a5a6:	f000 021f 	and.w	r2, r0, #31
    a5aa:	2101      	movs	r1, #1
    a5ac:	4091      	lsls	r1, r2
    a5ae:	0940      	lsrs	r0, r0, #5
    a5b0:	0080      	lsls	r0, r0, #2
    a5b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a5b6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a5ba:	f3bf 8f4f 	dsb	sy
    a5be:	f3bf 8f6f 	isb	sy
    a5c2:	4770      	bx	lr
    a5c4:	00021000 	.word	0x00021000
    a5c8:	000000fa 	.word	0x000000fa
    a5cc:	5faee8ff 	.word	0x5faee8ff
    a5d0:	c87c9577 	.word	0xc87c9577
    a5d4:	18146227 	.word	0x18146227
    a5d8:	c65deae6 	.word	0xc65deae6
    a5dc:	3a723992 	.word	0x3a723992
    a5e0:	2800      	cmp	r0, #0
    a5e2:	db09      	blt.n	a5f8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    a5e4:	f000 021f 	and.w	r2, r0, #31
    a5e8:	2101      	movs	r1, #1
    a5ea:	4091      	lsls	r1, r2
    a5ec:	0940      	lsrs	r0, r0, #5
    a5ee:	0080      	lsls	r0, r0, #2
    a5f0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a5f4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a5f8:	4770      	bx	lr

0000a5fa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    a5fa:	f3ef 8110 	mrs	r1, PRIMASK
    a5fe:	b672      	cpsid	i
    a600:	7802      	ldrb	r2, [r0, #0]
    a602:	2a01      	cmp	r2, #1
    a604:	d001      	beq.n	a60a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    a606:	2201      	movs	r2, #1
    a608:	e000      	b.n	a60c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    a60a:	2200      	movs	r2, #0
    a60c:	2301      	movs	r3, #1
    a60e:	7003      	strb	r3, [r0, #0]
    a610:	b901      	cbnz	r1, a614 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    a612:	b662      	cpsie	i
    a614:	b10a      	cbz	r2, a61a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    a616:	2000      	movs	r0, #0
    a618:	4770      	bx	lr
    a61a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a61e:	4770      	bx	lr

0000a620 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    a620:	2100      	movs	r1, #0
    a622:	7001      	strb	r1, [r0, #0]
    a624:	4608      	mov	r0, r1
    a626:	4770      	bx	lr

0000a628 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    a628:	f3ef 8110 	mrs	r1, PRIMASK
    a62c:	b672      	cpsid	i
    a62e:	2200      	movs	r2, #0
    a630:	7002      	strb	r2, [r0, #0]
    a632:	b901      	cbnz	r1, a636 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    a634:	b662      	cpsie	i
    a636:	2000      	movs	r0, #0
    a638:	4770      	bx	lr

0000a63a <mpsl_low_priority_process>:
    a63a:	f7fd bc0b 	b.w	7e54 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000a63e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    a63e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a642:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a646:	280f      	cmp	r0, #15
    a648:	d001      	beq.n	a64e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    a64a:	2000      	movs	r0, #0
    a64c:	4770      	bx	lr
    a64e:	2001      	movs	r0, #1
    a650:	4770      	bx	lr

0000a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    a652:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a656:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a65a:	280a      	cmp	r0, #10
    a65c:	d001      	beq.n	a662 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    a65e:	2000      	movs	r0, #0
    a660:	4770      	bx	lr
    a662:	2001      	movs	r0, #1
    a664:	4770      	bx	lr

0000a666 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    a666:	b500      	push	{lr}
    a668:	f7ff fff3 	bl	a652 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    a66c:	b120      	cbz	r0, a678 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    a66e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a672:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a676:	b108      	cbz	r0, a67c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    a678:	2000      	movs	r0, #0
    a67a:	bd00      	pop	{pc}
    a67c:	2001      	movs	r0, #1
    a67e:	bd00      	pop	{pc}

0000a680 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    a680:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a684:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a688:	280e      	cmp	r0, #14
    a68a:	d001      	beq.n	a690 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    a68c:	2000      	movs	r0, #0
    a68e:	4770      	bx	lr
    a690:	2001      	movs	r0, #1
    a692:	4770      	bx	lr

0000a694 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    a694:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a698:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a69c:	2810      	cmp	r0, #16
    a69e:	d001      	beq.n	a6a4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    a6a0:	2000      	movs	r0, #0
    a6a2:	4770      	bx	lr
    a6a4:	2001      	movs	r0, #1
    a6a6:	4770      	bx	lr

0000a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    a6a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a6ac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a6b0:	2806      	cmp	r0, #6
    a6b2:	d003      	beq.n	a6bc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a6b4:	1c40      	adds	r0, r0, #1
    a6b6:	d001      	beq.n	a6bc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a6b8:	2000      	movs	r0, #0
    a6ba:	4770      	bx	lr
    a6bc:	2001      	movs	r0, #1
    a6be:	4770      	bx	lr

0000a6c0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    a6c0:	b500      	push	{lr}
    a6c2:	f7ff fff1 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a6c6:	b148      	cbz	r0, a6dc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a6c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a6cc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a6d0:	2806      	cmp	r0, #6
    a6d2:	d303      	bcc.n	a6dc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a6d4:	1c40      	adds	r0, r0, #1
    a6d6:	d001      	beq.n	a6dc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a6d8:	2001      	movs	r0, #1
    a6da:	bd00      	pop	{pc}
    a6dc:	2000      	movs	r0, #0
    a6de:	bd00      	pop	{pc}

0000a6e0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    a6e0:	b500      	push	{lr}
    a6e2:	f7ff ffe1 	bl	a6a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a6e6:	b138      	cbz	r0, a6f8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    a6e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a6ec:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a6f0:	2806      	cmp	r0, #6
    a6f2:	d303      	bcc.n	a6fc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a6f4:	1c40      	adds	r0, r0, #1
    a6f6:	d001      	beq.n	a6fc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a6f8:	2000      	movs	r0, #0
    a6fa:	bd00      	pop	{pc}
    a6fc:	2001      	movs	r0, #1
    a6fe:	bd00      	pop	{pc}

0000a700 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    a700:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a704:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a708:	280d      	cmp	r0, #13
    a70a:	d001      	beq.n	a710 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    a70c:	2000      	movs	r0, #0
    a70e:	4770      	bx	lr
    a710:	2001      	movs	r0, #1
    a712:	4770      	bx	lr

0000a714 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    a714:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a718:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a71c:	2808      	cmp	r0, #8
    a71e:	d001      	beq.n	a724 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    a720:	2000      	movs	r0, #0
    a722:	4770      	bx	lr
    a724:	2001      	movs	r0, #1
    a726:	4770      	bx	lr

0000a728 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    a728:	f7fd bbce 	b.w	7ec8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a72c <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    a72c:	f7fd bbcc 	b.w	7ec8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a730 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a734:	428a      	cmp	r2, r1
    a736:	d803      	bhi.n	a740 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    a738:	2179      	movs	r1, #121	; 0x79
    a73a:	2096      	movs	r0, #150	; 0x96
    a73c:	f7fd fa8c 	bl	7c58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a740:	fab2 f382 	clz	r3, r2
    a744:	b143      	cbz	r3, a758 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    a746:	4099      	lsls	r1, r3
    a748:	f1c3 0c20 	rsb	ip, r3, #32
    a74c:	fa20 fc0c 	lsr.w	ip, r0, ip
    a750:	4098      	lsls	r0, r3
    a752:	ea41 010c 	orr.w	r1, r1, ip
    a756:	409a      	lsls	r2, r3
    a758:	0c13      	lsrs	r3, r2, #16
    a75a:	fbb1 f5f3 	udiv	r5, r1, r3
    a75e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    a762:	b287      	uxth	r7, r0
    a764:	fbb1 f0f3 	udiv	r0, r1, r3
    a768:	fb03 1615 	mls	r6, r3, r5, r1
    a76c:	b294      	uxth	r4, r2
    a76e:	fb00 f504 	mul.w	r5, r0, r4
    a772:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    a776:	42b5      	cmp	r5, r6
    a778:	d905      	bls.n	a786 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    a77a:	1bad      	subs	r5, r5, r6
    a77c:	4295      	cmp	r5, r2
    a77e:	bf94      	ite	ls
    a780:	2501      	movls	r5, #1
    a782:	2502      	movhi	r5, #2
    a784:	1b40      	subs	r0, r0, r5
    a786:	0409      	lsls	r1, r1, #16
    a788:	0405      	lsls	r5, r0, #16
    a78a:	eb11 010c 	adds.w	r1, r1, ip
    a78e:	fba0 0c02 	umull	r0, ip, r0, r2
    a792:	1a09      	subs	r1, r1, r0
    a794:	fbb1 f0f3 	udiv	r0, r1, r3
    a798:	fbb1 fcf3 	udiv	ip, r1, r3
    a79c:	fb03 131c 	mls	r3, r3, ip, r1
    a7a0:	fb00 f104 	mul.w	r1, r0, r4
    a7a4:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    a7a8:	4299      	cmp	r1, r3
    a7aa:	d905      	bls.n	a7b8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    a7ac:	1ac9      	subs	r1, r1, r3
    a7ae:	4291      	cmp	r1, r2
    a7b0:	bf94      	ite	ls
    a7b2:	2101      	movls	r1, #1
    a7b4:	2102      	movhi	r1, #2
    a7b6:	1a40      	subs	r0, r0, r1
    a7b8:	4328      	orrs	r0, r5
    a7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a7be <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    a7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7c2:	461e      	mov	r6, r3
    a7c4:	4615      	mov	r5, r2
    a7c6:	4604      	mov	r4, r0
    a7c8:	9f06      	ldr	r7, [sp, #24]
    a7ca:	f7ff ffb1 	bl	a730 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    a7ce:	6030      	str	r0, [r6, #0]
    a7d0:	fba0 0105 	umull	r0, r1, r0, r5
    a7d4:	1a20      	subs	r0, r4, r0
    a7d6:	6038      	str	r0, [r7, #0]
    a7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    a7dc:	b4f0      	push	{r4, r5, r6, r7}
    a7de:	ea80 0c01 	eor.w	ip, r0, r1
    a7e2:	4603      	mov	r3, r0
    a7e4:	f01c 0f03 	tst.w	ip, #3
    a7e8:	d13c      	bne.n	a864 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a7ea:	f013 0f03 	tst.w	r3, #3
    a7ee:	d00b      	beq.n	a808 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a7f0:	2a00      	cmp	r2, #0
    a7f2:	bf04      	itt	eq
    a7f4:	bcf0      	popeq	{r4, r5, r6, r7}
    a7f6:	4770      	bxeq	lr
    a7f8:	f811 cb01 	ldrb.w	ip, [r1], #1
    a7fc:	f803 cb01 	strb.w	ip, [r3], #1
    a800:	1e52      	subs	r2, r2, #1
    a802:	f013 0f03 	tst.w	r3, #3
    a806:	d1f3      	bne.n	a7f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a808:	2a03      	cmp	r2, #3
    a80a:	d94f      	bls.n	a8ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a80c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a810:	d24c      	bcs.n	a8ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a812:	f1c2 0c00 	rsb	ip, r2, #0
    a816:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a81a:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a81e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a822:	f1cc 0c00 	rsb	ip, ip, #0
    a826:	f1bc 0f00 	cmp.w	ip, #0
    a82a:	dd1b      	ble.n	a864 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a82c:	1f0d      	subs	r5, r1, #4
    a82e:	1f1c      	subs	r4, r3, #4
    a830:	f01c 0f01 	tst.w	ip, #1
    a834:	d003      	beq.n	a83e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a836:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a83a:	f844 6f04 	str.w	r6, [r4, #4]!
    a83e:	ea5f 066c 	movs.w	r6, ip, asr #1
    a842:	d007      	beq.n	a854 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a844:	686f      	ldr	r7, [r5, #4]
    a846:	6067      	str	r7, [r4, #4]
    a848:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a84c:	f844 7f08 	str.w	r7, [r4, #8]!
    a850:	1e76      	subs	r6, r6, #1
    a852:	d1f7      	bne.n	a844 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a854:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a858:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a85c:	f1cc 0c00 	rsb	ip, ip, #0
    a860:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a864:	2a00      	cmp	r2, #0
    a866:	bf04      	itt	eq
    a868:	bcf0      	popeq	{r4, r5, r6, r7}
    a86a:	4770      	bxeq	lr
    a86c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a870:	d226      	bcs.n	a8c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a872:	2a00      	cmp	r2, #0
    a874:	bfdc      	itt	le
    a876:	bcf0      	pople	{r4, r5, r6, r7}
    a878:	4770      	bxle	lr
    a87a:	1e49      	subs	r1, r1, #1
    a87c:	1e5b      	subs	r3, r3, #1
    a87e:	f012 0f01 	tst.w	r2, #1
    a882:	d003      	beq.n	a88c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a884:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a888:	f803 cf01 	strb.w	ip, [r3, #1]!
    a88c:	1052      	asrs	r2, r2, #1
    a88e:	bf04      	itt	eq
    a890:	bcf0      	popeq	{r4, r5, r6, r7}
    a892:	4770      	bxeq	lr
    a894:	f891 c001 	ldrb.w	ip, [r1, #1]
    a898:	f883 c001 	strb.w	ip, [r3, #1]
    a89c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a8a0:	f803 cf02 	strb.w	ip, [r3, #2]!
    a8a4:	1e52      	subs	r2, r2, #1
    a8a6:	d1f5      	bne.n	a894 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a8a8:	bcf0      	pop	{r4, r5, r6, r7}
    a8aa:	4770      	bx	lr
    a8ac:	2a04      	cmp	r2, #4
    a8ae:	d3d9      	bcc.n	a864 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a8b0:	f851 cb04 	ldr.w	ip, [r1], #4
    a8b4:	1f12      	subs	r2, r2, #4
    a8b6:	f843 cb04 	str.w	ip, [r3], #4
    a8ba:	2a04      	cmp	r2, #4
    a8bc:	d2f8      	bcs.n	a8b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    a8be:	e7d1      	b.n	a864 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a8c0:	f811 cb01 	ldrb.w	ip, [r1], #1
    a8c4:	f803 cb01 	strb.w	ip, [r3], #1
    a8c8:	1e52      	subs	r2, r2, #1
    a8ca:	d1f9      	bne.n	a8c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a8cc:	bcf0      	pop	{r4, r5, r6, r7}
    a8ce:	4770      	bx	lr

0000a8d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    a8d0:	b470      	push	{r4, r5, r6}
    a8d2:	4603      	mov	r3, r0
    a8d4:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    a8d8:	f010 0f03 	tst.w	r0, #3
    a8dc:	d009      	beq.n	a8f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    a8de:	2a00      	cmp	r2, #0
    a8e0:	bf04      	itt	eq
    a8e2:	bc70      	popeq	{r4, r5, r6}
    a8e4:	4770      	bxeq	lr
    a8e6:	f803 cb01 	strb.w	ip, [r3], #1
    a8ea:	1e52      	subs	r2, r2, #1
    a8ec:	f013 0f03 	tst.w	r3, #3
    a8f0:	d1f5      	bne.n	a8de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    a8f2:	b2c9      	uxtb	r1, r1
    a8f4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a8f8:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    a8fc:	2a03      	cmp	r2, #3
    a8fe:	d939      	bls.n	a974 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a904:	d236      	bcs.n	a974 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a906:	4251      	negs	r1, r2
    a908:	17cc      	asrs	r4, r1, #31
    a90a:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    a90e:	1089      	asrs	r1, r1, #2
    a910:	424e      	negs	r6, r1
    a912:	2e00      	cmp	r6, #0
    a914:	dd11      	ble.n	a93a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a916:	1f19      	subs	r1, r3, #4
    a918:	f016 0f01 	tst.w	r6, #1
    a91c:	bf18      	it	ne
    a91e:	f841 5f04 	strne.w	r5, [r1, #4]!
    a922:	1074      	asrs	r4, r6, #1
    a924:	d004      	beq.n	a930 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    a926:	604d      	str	r5, [r1, #4]
    a928:	f841 5f08 	str.w	r5, [r1, #8]!
    a92c:	1e64      	subs	r4, r4, #1
    a92e:	d1fa      	bne.n	a926 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    a930:	4271      	negs	r1, r6
    a932:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    a936:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a93a:	2a00      	cmp	r2, #0
    a93c:	bf04      	itt	eq
    a93e:	bc70      	popeq	{r4, r5, r6}
    a940:	4770      	bxeq	lr
    a942:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a946:	d21d      	bcs.n	a984 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a948:	2a00      	cmp	r2, #0
    a94a:	bfdc      	itt	le
    a94c:	bc70      	pople	{r4, r5, r6}
    a94e:	4770      	bxle	lr
    a950:	1e59      	subs	r1, r3, #1
    a952:	f012 0f01 	tst.w	r2, #1
    a956:	bf18      	it	ne
    a958:	f801 cf01 	strbne.w	ip, [r1, #1]!
    a95c:	1052      	asrs	r2, r2, #1
    a95e:	bf04      	itt	eq
    a960:	bc70      	popeq	{r4, r5, r6}
    a962:	4770      	bxeq	lr
    a964:	f881 c001 	strb.w	ip, [r1, #1]
    a968:	f801 cf02 	strb.w	ip, [r1, #2]!
    a96c:	1e52      	subs	r2, r2, #1
    a96e:	d1f9      	bne.n	a964 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    a970:	bc70      	pop	{r4, r5, r6}
    a972:	4770      	bx	lr
    a974:	2a04      	cmp	r2, #4
    a976:	d3e0      	bcc.n	a93a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a978:	1f12      	subs	r2, r2, #4
    a97a:	f843 5b04 	str.w	r5, [r3], #4
    a97e:	2a04      	cmp	r2, #4
    a980:	d2fa      	bcs.n	a978 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    a982:	e7da      	b.n	a93a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a984:	f803 cb01 	strb.w	ip, [r3], #1
    a988:	1e52      	subs	r2, r2, #1
    a98a:	d1fb      	bne.n	a984 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a98c:	bc70      	pop	{r4, r5, r6}
    a98e:	4770      	bx	lr
    a990:	f04f 30ff 	mov.w	r0, #4294967295
    a994:	4770      	bx	lr
    a996:	2000      	movs	r0, #0
    a998:	4770      	bx	lr
    a99a:	2000      	movs	r0, #0
    a99c:	4770      	bx	lr
    a99e:	f04f 30ff 	mov.w	r0, #4294967295
    a9a2:	4770      	bx	lr
    a9a4:	4770      	bx	lr
    a9a6:	4770      	bx	lr
    a9a8:	2000      	movs	r0, #0
    a9aa:	4770      	bx	lr
    a9ac:	2100      	movs	r1, #0
    a9ae:	7001      	strb	r1, [r0, #0]
    a9b0:	4770      	bx	lr
    a9b2:	f04f 30ff 	mov.w	r0, #4294967295
    a9b6:	4770      	bx	lr
    a9b8:	f04f 30ff 	mov.w	r0, #4294967295
    a9bc:	4770      	bx	lr
    a9be:	2100      	movs	r1, #0
    a9c0:	7001      	strb	r1, [r0, #0]
    a9c2:	4770      	bx	lr
    a9c4:	f04f 30ff 	mov.w	r0, #4294967295
    a9c8:	4770      	bx	lr
    a9ca:	f04f 30ff 	mov.w	r0, #4294967295
    a9ce:	4770      	bx	lr
    a9d0:	7800      	ldrb	r0, [r0, #0]
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d001      	beq.n	a9da <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    a9d6:	f06f 0015 	mvn.w	r0, #21
    a9da:	4770      	bx	lr
    a9dc:	2000      	movs	r0, #0
    a9de:	4770      	bx	lr
    a9e0:	2200      	movs	r2, #0
    a9e2:	f000 b802 	b.w	a9ea <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000a9e6 <mpsl_fem_init>:
    a9e6:	f7f9 bda1 	b.w	452c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000a9ea <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    a9ea:	b570      	push	{r4, r5, r6, lr}
    a9ec:	4614      	mov	r4, r2
    a9ee:	460d      	mov	r5, r1
    a9f0:	1b00      	subs	r0, r0, r4
    a9f2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a9f6:	4288      	cmp	r0, r1
    a9f8:	da01      	bge.n	a9fe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    a9fa:	4608      	mov	r0, r1
    a9fc:	e002      	b.n	aa04 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a9fe:	287f      	cmp	r0, #127	; 0x7f
    aa00:	dd00      	ble.n	aa04 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    aa02:	207f      	movs	r0, #127	; 0x7f
    aa04:	4619      	mov	r1, r3
    aa06:	b240      	sxtb	r0, r0
    aa08:	f7f9 fdc4 	bl	4594 <mpsl_tx_power_radio_supported_power_adjust>
    aa0c:	7028      	strb	r0, [r5, #0]
    aa0e:	706c      	strb	r4, [r5, #1]
    aa10:	2100      	movs	r1, #0
    aa12:	4420      	add	r0, r4
    aa14:	70a9      	strb	r1, [r5, #2]
    aa16:	b240      	sxtb	r0, r0
    aa18:	bd70      	pop	{r4, r5, r6, pc}
    aa1a:	ecd8      	.short	0xecd8
    aa1c:	fcf8f4f0 	.word	0xfcf8f4f0
    aa20:	04030200 	.word	0x04030200
    aa24:	08070605 	.word	0x08070605
	...
    aa3c:	01010101 	.word	0x01010101
    aa40:	02020202 	.word	0x02020202
    aa44:	03030303 	.word	0x03030303
    aa48:	04040404 	.word	0x04040404
    aa4c:	05050505 	.word	0x05050505
    aa50:	08070606 	.word	0x08070606
    aa54:	0c0b0a09 	.word	0x0c0b0a09
    aa58:	0000000d 	.word	0x0000000d
	...
    aa6c:	01010100 	.word	0x01010100
    aa70:	02020201 	.word	0x02020201
    aa74:	03030302 	.word	0x03030302
    aa78:	04040403 	.word	0x04040403
    aa7c:	05050504 	.word	0x05050504
    aa80:	06060605 	.word	0x06060605
    aa84:	00000908 	.word	0x00000908

0000aa88 <main>:
extern int16_t three_volt_supply_voltage_mv;
extern int16_t five_volt_supply_voltage_mv;
extern int16_t vamp_supply_voltage_mv;

int main(void)
{
    aa88:	b508      	push	{r3, lr}
	int err;

	gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);		// 
    aa8a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    aa8e:	482b      	ldr	r0, [pc, #172]	; (ab3c <main+0xb4>)
    aa90:	f006 fffe 	bl	11a90 <gpio_pin_configure_dt>

	printk("Start");
    aa94:	482a      	ldr	r0, [pc, #168]	; (ab40 <main+0xb8>)
    aa96:	f007 f991 	bl	11dbc <printk>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    aa9a:	2201      	movs	r2, #1
    aa9c:	210d      	movs	r1, #13
    aa9e:	4829      	ldr	r0, [pc, #164]	; (ab44 <main+0xbc>)
    aaa0:	f007 f811 	bl	11ac6 <gpio_pin_set>

	gpio_pin_set_dt(&led, 1);

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    aaa4:	2000      	movs	r0, #0
    aaa6:	f002 fae5 	bl	d074 <bt_enable>
	if (err) {
    aaaa:	2800      	cmp	r0, #0
    aaac:	d13f      	bne.n	ab2e <main+0xa6>

	
	// gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);

	
	gpio_pin_toggle_dt(&led);
    aaae:	4823      	ldr	r0, [pc, #140]	; (ab3c <main+0xb4>)
    aab0:	f007 f816 	bl	11ae0 <gpio_pin_toggle_dt>

    // Start observer *** CURRENTLY DISABLE OBSERVER ***
	// (void)observer_start();

    // Init peripherals (ADS and programmable load)
    perihperals_init();
    aab4:	f007 f8fd 	bl	11cb2 <perihperals_init>

	// Set prereg on 10V
	peripherals_set_pre_reg_voltage(8000);
    aab8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
    aabc:	f000 fa56 	bl	af6c <peripherals_set_pre_reg_voltage>

	while (1)
	{
		gpio_pin_toggle_dt(&led);
    aac0:	481e      	ldr	r0, [pc, #120]	; (ab3c <main+0xb4>)
    aac2:	f007 f80d 	bl	11ae0 <gpio_pin_toggle_dt>
		k_msleep(500);
    aac6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    aaca:	f007 f813 	bl	11af4 <k_msleep>

        peripherals_update_all_ads1115_channels();
    aace:	f000 fabd 	bl	b04c <peripherals_update_all_ads1115_channels>

		printk("\n");
    aad2:	481d      	ldr	r0, [pc, #116]	; (ab48 <main+0xc0>)
    aad4:	f007 f972 	bl	11dbc <printk>
		printk("uav_battery_voltage_mv: %d\n", uav_battery_voltage_mv);
    aad8:	4b1c      	ldr	r3, [pc, #112]	; (ab4c <main+0xc4>)
    aada:	f9b3 1000 	ldrsh.w	r1, [r3]
    aade:	481c      	ldr	r0, [pc, #112]	; (ab50 <main+0xc8>)
    aae0:	f007 f96c 	bl	11dbc <printk>
		printk("uav_current_ma: %d\n", uav_current_ma);
    aae4:	4b1b      	ldr	r3, [pc, #108]	; (ab54 <main+0xcc>)
    aae6:	f9b3 1000 	ldrsh.w	r1, [r3]
    aaea:	481b      	ldr	r0, [pc, #108]	; (ab58 <main+0xd0>)
    aaec:	f007 f966 	bl	11dbc <printk>
		printk("pre_reg_input_current_ma: %d\n", pre_reg_input_current_ma);
    aaf0:	4b1a      	ldr	r3, [pc, #104]	; (ab5c <main+0xd4>)
    aaf2:	f9b3 1000 	ldrsh.w	r1, [r3]
    aaf6:	481a      	ldr	r0, [pc, #104]	; (ab60 <main+0xd8>)
    aaf8:	f007 f960 	bl	11dbc <printk>
		printk("pre_reg_output_current_ma: %d\n", pre_reg_output_current_ma);
    aafc:	4b19      	ldr	r3, [pc, #100]	; (ab64 <main+0xdc>)
    aafe:	f9b3 1000 	ldrsh.w	r1, [r3]
    ab02:	4819      	ldr	r0, [pc, #100]	; (ab68 <main+0xe0>)
    ab04:	f007 f95a 	bl	11dbc <printk>

		printk("three_volt_supply_voltage_mv: %d\n", three_volt_supply_voltage_mv);
    ab08:	4b18      	ldr	r3, [pc, #96]	; (ab6c <main+0xe4>)
    ab0a:	f9b3 1000 	ldrsh.w	r1, [r3]
    ab0e:	4818      	ldr	r0, [pc, #96]	; (ab70 <main+0xe8>)
    ab10:	f007 f954 	bl	11dbc <printk>
		printk("five_volt_supply_voltage_mv: %d\n", five_volt_supply_voltage_mv);
    ab14:	4b17      	ldr	r3, [pc, #92]	; (ab74 <main+0xec>)
    ab16:	f9b3 1000 	ldrsh.w	r1, [r3]
    ab1a:	4817      	ldr	r0, [pc, #92]	; (ab78 <main+0xf0>)
    ab1c:	f007 f94e 	bl	11dbc <printk>
		printk("vamp_supply_voltage_mv: %d\n", vamp_supply_voltage_mv);
    ab20:	4b16      	ldr	r3, [pc, #88]	; (ab7c <main+0xf4>)
    ab22:	f9b3 1000 	ldrsh.w	r1, [r3]
    ab26:	4816      	ldr	r0, [pc, #88]	; (ab80 <main+0xf8>)
    ab28:	f007 f948 	bl	11dbc <printk>
	while (1)
    ab2c:	e7c8      	b.n	aac0 <main+0x38>
    ab2e:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    ab30:	4814      	ldr	r0, [pc, #80]	; (ab84 <main+0xfc>)
    ab32:	f007 f943 	bl	11dbc <printk>
	}


	printk("Exiting %s thread.\n", __func__);
	return 0;
}
    ab36:	2000      	movs	r0, #0
    ab38:	bd08      	pop	{r3, pc}
    ab3a:	bf00      	nop
    ab3c:	000162c8 	.word	0x000162c8
    ab40:	000161a8 	.word	0x000161a8
    ab44:	00015e34 	.word	0x00015e34
    ab48:	00016334 	.word	0x00016334
    ab4c:	20002176 	.word	0x20002176
    ab50:	000161d0 	.word	0x000161d0
    ab54:	20002174 	.word	0x20002174
    ab58:	000161ec 	.word	0x000161ec
    ab5c:	20002172 	.word	0x20002172
    ab60:	00016200 	.word	0x00016200
    ab64:	20002170 	.word	0x20002170
    ab68:	00016220 	.word	0x00016220
    ab6c:	2000217c 	.word	0x2000217c
    ab70:	00016240 	.word	0x00016240
    ab74:	2000217a 	.word	0x2000217a
    ab78:	00016264 	.word	0x00016264
    ab7c:	20002178 	.word	0x20002178
    ab80:	00016288 	.word	0x00016288
    ab84:	000161b0 	.word	0x000161b0

0000ab88 <ads1115_set_measure_mode>:
convRate ads1115_get_conv_rate(){
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    return (convRate)(currentConfReg & 0xE0);
}
    
void ads1115_set_measure_mode(measureMode mode){
    ab88:	b510      	push	{r4, lr}
    ab8a:	4604      	mov	r4, r0
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    ab8c:	2001      	movs	r0, #1
    ab8e:	f007 f815 	bl	11bbc <read_register>
    deviceMeasureMode = mode;
    ab92:	4b05      	ldr	r3, [pc, #20]	; (aba8 <ads1115_set_measure_mode+0x20>)
    ab94:	801c      	strh	r4, [r3, #0]
    currentConfReg &= ~(0x8100);    
    ab96:	f647 61ff 	movw	r1, #32511	; 0x7eff
    ab9a:	4001      	ands	r1, r0
    currentConfReg |= mode;
    write_register(ADS1115_CONFIG_REG, currentConfReg);
    ab9c:	4321      	orrs	r1, r4
    ab9e:	2001      	movs	r0, #1
    aba0:	f007 f82b 	bl	11bfa <write_register>
}
    aba4:	bd10      	pop	{r4, pc}
    aba6:	bf00      	nop
    aba8:	2000216c 	.word	0x2000216c

0000abac <ads1115_set_voltage_range_mV>:

void ads1115_set_voltage_range_mV(range range){
    abac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abb0:	4604      	mov	r4, r0
    uint16_t currentVoltageRange = voltageRange;
    abb2:	4b48      	ldr	r3, [pc, #288]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    abb4:	881f      	ldrh	r7, [r3, #0]
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    abb6:	2001      	movs	r0, #1
    abb8:	f007 f800 	bl	11bbc <read_register>
    abbc:	4605      	mov	r5, r0
    uint16_t currentRange = (currentConfReg >> 9) & 7;
    abbe:	f3c0 2842 	ubfx	r8, r0, #9, #3
    uint16_t currentAlertPinMode = currentConfReg & 3;
    abc2:	f000 0603 	and.w	r6, r0, #3
    
    ads1115_set_measure_mode(ADS1115_SINGLE);
    abc6:	f44f 7080 	mov.w	r0, #256	; 0x100
    abca:	f7ff ffdd 	bl	ab88 <ads1115_set_measure_mode>
    
    switch(range){
    abce:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
    abd2:	d031      	beq.n	ac38 <ads1115_set_voltage_range_mV+0x8c>
    abd4:	d820      	bhi.n	ac18 <ads1115_set_voltage_range_mV+0x6c>
    abd6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    abda:	d028      	beq.n	ac2e <ads1115_set_voltage_range_mV+0x82>
    abdc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    abe0:	d104      	bne.n	abec <ads1115_set_voltage_range_mV+0x40>
            break;
        case ADS1115_RANGE_4096:
            voltageRange = 4096;
            break;
        case ADS1115_RANGE_2048:
            voltageRange = 2048;
    abe2:	4b3c      	ldr	r3, [pc, #240]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    abe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    abe8:	801a      	strh	r2, [r3, #0]
        case ADS1115_RANGE_0256:
            voltageRange = 256;
            break;
    }
    
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    abea:	e006      	b.n	abfa <ads1115_set_voltage_range_mV+0x4e>
    switch(range){
    abec:	b91c      	cbnz	r4, abf6 <ads1115_set_voltage_range_mV+0x4a>
            voltageRange = 6144;
    abee:	4b39      	ldr	r3, [pc, #228]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    abf0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    abf4:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    abf6:	45a0      	cmp	r8, r4
    abf8:	d001      	beq.n	abfe <ads1115_set_voltage_range_mV+0x52>
    abfa:	2e03      	cmp	r6, #3
    abfc:	d126      	bne.n	ac4c <ads1115_set_voltage_range_mV+0xa0>
        alertLimit = read_register(ADS1115_LO_THRESH_REG);
        alertLimit = alertLimit * (currentVoltageRange * 1.0 / voltageRange);
        write_register(ADS1115_LO_THRESH_REG, alertLimit);
    }
    
    currentConfReg &= ~(0x8E00);    
    abfe:	f247 11ff 	movw	r1, #29183	; 0x71ff
    ac02:	4029      	ands	r1, r5
    currentConfReg |= range;
    write_register(ADS1115_CONFIG_REG, currentConfReg);
    ac04:	4321      	orrs	r1, r4
    ac06:	2001      	movs	r0, #1
    ac08:	f006 fff7 	bl	11bfa <write_register>
    convRate rate = ads1115_get_conv_rate();
    ac0c:	f006 ffe6 	bl	11bdc <ads1115_get_conv_rate>
    ads1115_delay_acc_to_rate(rate);
    ac10:	f006 ffa2 	bl	11b58 <ads1115_delay_acc_to_rate>
}
    ac14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(range){
    ac18:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    ac1c:	d011      	beq.n	ac42 <ads1115_set_voltage_range_mV+0x96>
    ac1e:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
    ac22:	d1e8      	bne.n	abf6 <ads1115_set_voltage_range_mV+0x4a>
            voltageRange = 256;
    ac24:	4b2b      	ldr	r3, [pc, #172]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    ac26:	f44f 7280 	mov.w	r2, #256	; 0x100
    ac2a:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    ac2c:	e7e5      	b.n	abfa <ads1115_set_voltage_range_mV+0x4e>
            voltageRange = 4096;
    ac2e:	4b29      	ldr	r3, [pc, #164]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    ac30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ac34:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    ac36:	e7e0      	b.n	abfa <ads1115_set_voltage_range_mV+0x4e>
            voltageRange = 1024;
    ac38:	4b26      	ldr	r3, [pc, #152]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    ac3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ac3e:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    ac40:	e7db      	b.n	abfa <ads1115_set_voltage_range_mV+0x4e>
            voltageRange = 512;
    ac42:	4b24      	ldr	r3, [pc, #144]	; (acd4 <ads1115_set_voltage_range_mV+0x128>)
    ac44:	f44f 7200 	mov.w	r2, #512	; 0x200
    ac48:	801a      	strh	r2, [r3, #0]
    if ((currentRange != range) && (currentAlertPinMode != ADS1115_DISABLE_ALERT)){
    ac4a:	e7d6      	b.n	abfa <ads1115_set_voltage_range_mV+0x4e>
        int16_t alertLimit = read_register(ADS1115_HI_THRESH_REG);
    ac4c:	2003      	movs	r0, #3
    ac4e:	f006 ffb5 	bl	11bbc <read_register>
    ac52:	fa0f fb80 	sxth.w	fp, r0
        alertLimit = alertLimit * (currentVoltageRange * 1.0 / voltageRange);
    ac56:	4638      	mov	r0, r7
    ac58:	f7f5 fb92 	bl	380 <__aeabi_i2d>
    ac5c:	4606      	mov	r6, r0
    ac5e:	460f      	mov	r7, r1
    ac60:	f8df a070 	ldr.w	sl, [pc, #112]	; acd4 <ads1115_set_voltage_range_mV+0x128>
    ac64:	f8ba 0000 	ldrh.w	r0, [sl]
    ac68:	f7f5 fb8a 	bl	380 <__aeabi_i2d>
    ac6c:	4602      	mov	r2, r0
    ac6e:	460b      	mov	r3, r1
    ac70:	4630      	mov	r0, r6
    ac72:	4639      	mov	r1, r7
    ac74:	f7f5 fd18 	bl	6a8 <__aeabi_ddiv>
    ac78:	4680      	mov	r8, r0
    ac7a:	4689      	mov	r9, r1
    ac7c:	4658      	mov	r0, fp
    ac7e:	f7f5 fb7f 	bl	380 <__aeabi_i2d>
    ac82:	4642      	mov	r2, r8
    ac84:	464b      	mov	r3, r9
    ac86:	f7f5 fbe5 	bl	454 <__aeabi_dmul>
    ac8a:	f7f5 fdf5 	bl	878 <__aeabi_d2iz>
        write_register(ADS1115_HI_THRESH_REG, alertLimit);
    ac8e:	b281      	uxth	r1, r0
    ac90:	2003      	movs	r0, #3
    ac92:	f006 ffb2 	bl	11bfa <write_register>
        alertLimit = read_register(ADS1115_LO_THRESH_REG);
    ac96:	2002      	movs	r0, #2
    ac98:	f006 ff90 	bl	11bbc <read_register>
    ac9c:	fa0f f880 	sxth.w	r8, r0
        alertLimit = alertLimit * (currentVoltageRange * 1.0 / voltageRange);
    aca0:	f8ba 0000 	ldrh.w	r0, [sl]
    aca4:	f7f5 fb6c 	bl	380 <__aeabi_i2d>
    aca8:	4602      	mov	r2, r0
    acaa:	460b      	mov	r3, r1
    acac:	4630      	mov	r0, r6
    acae:	4639      	mov	r1, r7
    acb0:	f7f5 fcfa 	bl	6a8 <__aeabi_ddiv>
    acb4:	4606      	mov	r6, r0
    acb6:	460f      	mov	r7, r1
    acb8:	4640      	mov	r0, r8
    acba:	f7f5 fb61 	bl	380 <__aeabi_i2d>
    acbe:	4632      	mov	r2, r6
    acc0:	463b      	mov	r3, r7
    acc2:	f7f5 fbc7 	bl	454 <__aeabi_dmul>
    acc6:	f7f5 fdd7 	bl	878 <__aeabi_d2iz>
        write_register(ADS1115_LO_THRESH_REG, alertLimit);
    acca:	b281      	uxth	r1, r0
    accc:	2002      	movs	r0, #2
    acce:	f006 ff94 	bl	11bfa <write_register>
    acd2:	e794      	b.n	abfe <ads1115_set_voltage_range_mV+0x52>
    acd4:	2000216e 	.word	0x2000216e

0000acd8 <ads1115_init>:
uint8_t ads1115_init(){    
    acd8:	b508      	push	{r3, lr}
    uint8_t success = twowire_write(DEVICE_ADDRESS);
    acda:	2048      	movs	r0, #72	; 0x48
    acdc:	f000 f8b0 	bl	ae40 <twowire_write>
    if(success){
    ace0:	b108      	cbz	r0, ace6 <ads1115_init+0xe>
        return 0;
    ace2:	2000      	movs	r0, #0
}
    ace4:	bd08      	pop	{r3, pc}
    write_register(ADS1115_CONFIG_REG, ADS1115_REG_RESET_VAL);
    ace6:	f248 5183 	movw	r1, #34179	; 0x8583
    acea:	2001      	movs	r0, #1
    acec:	f006 ff85 	bl	11bfa <write_register>
    ads1115_set_voltage_range_mV(ADS1115_RANGE_2048);
    acf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    acf4:	f7ff ff5a 	bl	abac <ads1115_set_voltage_range_mV>
    write_register(ADS1115_LO_THRESH_REG, 0x8000);
    acf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    acfc:	2002      	movs	r0, #2
    acfe:	f006 ff7c 	bl	11bfa <write_register>
    write_register(ADS1115_HI_THRESH_REG, 0x7FFF);
    ad02:	f647 71ff 	movw	r1, #32767	; 0x7fff
    ad06:	2003      	movs	r0, #3
    ad08:	f006 ff77 	bl	11bfa <write_register>
    deviceMeasureMode = ADS1115_SINGLE;
    ad0c:	4b04      	ldr	r3, [pc, #16]	; (ad20 <ads1115_init+0x48>)
    ad0e:	f44f 7280 	mov.w	r2, #256	; 0x100
    ad12:	801a      	strh	r2, [r3, #0]
    autoRangeMode = 0;
    ad14:	4b03      	ldr	r3, [pc, #12]	; (ad24 <ads1115_init+0x4c>)
    ad16:	2200      	movs	r2, #0
    ad18:	701a      	strb	r2, [r3, #0]
    return 1;
    ad1a:	2001      	movs	r0, #1
    ad1c:	e7e2      	b.n	ace4 <ads1115_init+0xc>
    ad1e:	bf00      	nop
    ad20:	2000216c 	.word	0x2000216c
    ad24:	20002180 	.word	0x20002180

0000ad28 <ads1115_set_auto_range>:

void ads1115_set_auto_range(){
    ad28:	b538      	push	{r3, r4, r5, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
    ad2a:	2001      	movs	r0, #1
    ad2c:	f006 ff46 	bl	11bbc <read_register>
    ad30:	4604      	mov	r4, r0
    ads1115_set_voltage_range_mV(ADS1115_RANGE_6144);
    ad32:	2000      	movs	r0, #0
    ad34:	f7ff ff3a 	bl	abac <ads1115_set_voltage_range_mV>
    
    if(deviceMeasureMode == ADS1115_SINGLE){
    ad38:	4b1e      	ldr	r3, [pc, #120]	; (adb4 <ads1115_set_auto_range+0x8c>)
    ad3a:	881b      	ldrh	r3, [r3, #0]
    ad3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ad40:	d019      	beq.n	ad76 <ads1115_set_auto_range+0x4e>
        ads1115_set_measure_mode(ADS1115_CONTINUOUS);
        convRate rate = ads1115_get_conv_rate();
        ads1115_delay_acc_to_rate(rate);
    }
    
    int16_t rawResult = abs(read_register(ADS1115_CONV_REG));
    ad42:	2000      	movs	r0, #0
    ad44:	f006 ff3a 	bl	11bbc <read_register>
    ad48:	b203      	sxth	r3, r0
    range optRange = ADS1115_RANGE_6144;
    
    if(rawResult < 1093){
    ad4a:	f240 4244 	movw	r2, #1092	; 0x444
    ad4e:	4293      	cmp	r3, r2
    ad50:	dd19      	ble.n	ad86 <ads1115_set_auto_range+0x5e>
        optRange = ADS1115_RANGE_0256;
    }
    else if(rawResult < 2185){
    ad52:	f640 0288 	movw	r2, #2184	; 0x888
    ad56:	4293      	cmp	r3, r2
    ad58:	dd1f      	ble.n	ad9a <ads1115_set_auto_range+0x72>
        optRange = ADS1115_RANGE_0512;
    }
    else if(rawResult < 4370){
    ad5a:	f241 1211 	movw	r2, #4369	; 0x1111
    ad5e:	4293      	cmp	r3, r2
    ad60:	dd1e      	ble.n	ada0 <ads1115_set_auto_range+0x78>
        optRange = ADS1115_RANGE_1024;
    }
    else if(rawResult < 8738){
    ad62:	f242 2221 	movw	r2, #8737	; 0x2221
    ad66:	4293      	cmp	r3, r2
    ad68:	dd1d      	ble.n	ada6 <ads1115_set_auto_range+0x7e>
        optRange = ADS1115_RANGE_2048;
    }
    else if(rawResult < 17476){
    ad6a:	f244 4243 	movw	r2, #17475	; 0x4443
    ad6e:	4293      	cmp	r3, r2
    ad70:	dd1c      	ble.n	adac <ads1115_set_auto_range+0x84>
    range optRange = ADS1115_RANGE_6144;
    ad72:	2500      	movs	r5, #0
    ad74:	e009      	b.n	ad8a <ads1115_set_auto_range+0x62>
        ads1115_set_measure_mode(ADS1115_CONTINUOUS);
    ad76:	2000      	movs	r0, #0
    ad78:	f7ff ff06 	bl	ab88 <ads1115_set_measure_mode>
        convRate rate = ads1115_get_conv_rate();
    ad7c:	f006 ff2e 	bl	11bdc <ads1115_get_conv_rate>
        ads1115_delay_acc_to_rate(rate);
    ad80:	f006 feea 	bl	11b58 <ads1115_delay_acc_to_rate>
    ad84:	e7dd      	b.n	ad42 <ads1115_set_auto_range+0x1a>
        optRange = ADS1115_RANGE_0256;
    ad86:	f44f 6520 	mov.w	r5, #2560	; 0xa00
        optRange = ADS1115_RANGE_4096;
    }
    
    write_register(ADS1115_CONFIG_REG, currentConfReg);
    ad8a:	4621      	mov	r1, r4
    ad8c:	2001      	movs	r0, #1
    ad8e:	f006 ff34 	bl	11bfa <write_register>
    ads1115_set_voltage_range_mV(optRange); 
    ad92:	4628      	mov	r0, r5
    ad94:	f7ff ff0a 	bl	abac <ads1115_set_voltage_range_mV>
}
    ad98:	bd38      	pop	{r3, r4, r5, pc}
        optRange = ADS1115_RANGE_0512;
    ad9a:	f44f 6500 	mov.w	r5, #2048	; 0x800
    ad9e:	e7f4      	b.n	ad8a <ads1115_set_auto_range+0x62>
        optRange = ADS1115_RANGE_1024;
    ada0:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    ada4:	e7f1      	b.n	ad8a <ads1115_set_auto_range+0x62>
        optRange = ADS1115_RANGE_2048;
    ada6:	f44f 6580 	mov.w	r5, #1024	; 0x400
    adaa:	e7ee      	b.n	ad8a <ads1115_set_auto_range+0x62>
        optRange = ADS1115_RANGE_4096;
    adac:	f44f 7500 	mov.w	r5, #512	; 0x200
    adb0:	e7eb      	b.n	ad8a <ads1115_set_auto_range+0x62>
    adb2:	bf00      	nop
    adb4:	2000216c 	.word	0x2000216c

0000adb8 <ads1115_get_raw_result>:
    int16_t rawResult = ads1115_get_raw_result();
    int16_t result = (int16_t)(rawResult * voltageRange / ADS1115_REG_FACTOR);
    return result;
}

int16_t ads1115_get_raw_result(){
    adb8:	b508      	push	{r3, lr}
    int16_t rawResult = read_register(ADS1115_CONV_REG);
    adba:	2000      	movs	r0, #0
    adbc:	f006 fefe 	bl	11bbc <read_register>
    adc0:	b200      	sxth	r0, r0
    if(autoRangeMode){
    adc2:	4b14      	ldr	r3, [pc, #80]	; (ae14 <ads1115_get_raw_result+0x5c>)
    adc4:	781b      	ldrb	r3, [r3, #0]
    adc6:	b31b      	cbz	r3, ae10 <ads1115_get_raw_result+0x58>
        if((abs(rawResult) > 26214) && (voltageRange != 6144)){ // 80%
    adc8:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
    adcc:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    add0:	b29b      	uxth	r3, r3
    add2:	f246 6266 	movw	r2, #26214	; 0x6666
    add6:	4293      	cmp	r3, r2
    add8:	d904      	bls.n	ade4 <ads1115_get_raw_result+0x2c>
    adda:	4a0f      	ldr	r2, [pc, #60]	; (ae18 <ads1115_get_raw_result+0x60>)
    addc:	8812      	ldrh	r2, [r2, #0]
    adde:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
    ade2:	d10f      	bne.n	ae04 <ads1115_get_raw_result+0x4c>
            ads1115_set_auto_range();
            rawResult = read_register(ADS1115_CONV_REG);
        }
        else if((abs(rawResult) < 9800) && (voltageRange != 256)){ //30%
    ade4:	f242 6247 	movw	r2, #9799	; 0x2647
    ade8:	4293      	cmp	r3, r2
    adea:	d811      	bhi.n	ae10 <ads1115_get_raw_result+0x58>
    adec:	4b0a      	ldr	r3, [pc, #40]	; (ae18 <ads1115_get_raw_result+0x60>)
    adee:	881b      	ldrh	r3, [r3, #0]
    adf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    adf4:	d00c      	beq.n	ae10 <ads1115_get_raw_result+0x58>
            ads1115_set_auto_range();
    adf6:	f7ff ff97 	bl	ad28 <ads1115_set_auto_range>
            rawResult = read_register(ADS1115_CONV_REG);
    adfa:	2000      	movs	r0, #0
    adfc:	f006 fede 	bl	11bbc <read_register>
    ae00:	b200      	sxth	r0, r0
    ae02:	e005      	b.n	ae10 <ads1115_get_raw_result+0x58>
            ads1115_set_auto_range();
    ae04:	f7ff ff90 	bl	ad28 <ads1115_set_auto_range>
            rawResult = read_register(ADS1115_CONV_REG);
    ae08:	2000      	movs	r0, #0
    ae0a:	f006 fed7 	bl	11bbc <read_register>
    ae0e:	b200      	sxth	r0, r0
        }
    }
    return rawResult;
}
    ae10:	bd08      	pop	{r3, pc}
    ae12:	bf00      	nop
    ae14:	20002180 	.word	0x20002180
    ae18:	2000216e 	.word	0x2000216e

0000ae1c <ads1115_get_result_mV>:
int16_t ads1115_get_result_mV(){
    ae1c:	b508      	push	{r3, lr}
    int16_t rawResult = ads1115_get_raw_result();
    ae1e:	f7ff ffcb 	bl	adb8 <ads1115_get_raw_result>
    int16_t result = (int16_t)(rawResult * voltageRange / ADS1115_REG_FACTOR);
    ae22:	4b06      	ldr	r3, [pc, #24]	; (ae3c <ads1115_get_result_mV+0x20>)
    ae24:	881b      	ldrh	r3, [r3, #0]
    ae26:	fb03 f000 	mul.w	r0, r3, r0
    ae2a:	2800      	cmp	r0, #0
    ae2c:	db02      	blt.n	ae34 <ads1115_get_result_mV+0x18>
}
    ae2e:	f340 30cf 	sbfx	r0, r0, #15, #16
    ae32:	bd08      	pop	{r3, pc}
    int16_t result = (int16_t)(rawResult * voltageRange / ADS1115_REG_FACTOR);
    ae34:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
    ae38:	307f      	adds	r0, #127	; 0x7f
    ae3a:	e7f8      	b.n	ae2e <ads1115_get_result_mV+0x12>
    ae3c:	2000216e 	.word	0x2000216e

0000ae40 <twowire_write>:

#include "twowire.h"

const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(i2c0));

uint8_t twowire_write(uint8_t devaddr){
    ae40:	b510      	push	{r4, lr}
    ae42:	4604      	mov	r4, r0
    int ret;
    if (!device_is_ready(dev))
    ae44:	4b09      	ldr	r3, [pc, #36]	; (ae6c <twowire_write+0x2c>)
    ae46:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    ae48:	f00a f884 	bl	14f54 <z_device_is_ready>
    ae4c:	b158      	cbz	r0, ae66 <twowire_write+0x26>
        return -ENODEV;
    ret = i2c_write(dev, NULL, 0, devaddr);
    ae4e:	4623      	mov	r3, r4
    ae50:	2200      	movs	r2, #0
    ae52:	4611      	mov	r1, r2
    ae54:	4805      	ldr	r0, [pc, #20]	; (ae6c <twowire_write+0x2c>)
    ae56:	6800      	ldr	r0, [r0, #0]
    ae58:	f006 ff07 	bl	11c6a <i2c_write>
    if (ret)
    ae5c:	b908      	cbnz	r0, ae62 <twowire_write+0x22>
        return ret;
    return 0;
    ae5e:	2000      	movs	r0, #0
}
    ae60:	bd10      	pop	{r4, pc}
        return ret;
    ae62:	b2c0      	uxtb	r0, r0
    ae64:	e7fc      	b.n	ae60 <twowire_write+0x20>
        return -ENODEV;
    ae66:	20ed      	movs	r0, #237	; 0xed
    ae68:	e7fa      	b.n	ae60 <twowire_write+0x20>
    ae6a:	bf00      	nop
    ae6c:	20000370 	.word	0x20000370

0000ae70 <twowire_write_register>:

uint8_t twowire_write_register(uint8_t devaddr, uint8_t regaddr){
    ae70:	b530      	push	{r4, r5, lr}
    ae72:	b083      	sub	sp, #12
    ae74:	4604      	mov	r4, r0
    ae76:	460d      	mov	r5, r1
    int ret;
    if (!device_is_ready(dev))
    ae78:	4b0a      	ldr	r3, [pc, #40]	; (aea4 <twowire_write_register+0x34>)
    ae7a:	6818      	ldr	r0, [r3, #0]
    ae7c:	f00a f86a 	bl	14f54 <z_device_is_ready>
    ae80:	b170      	cbz	r0, aea0 <twowire_write_register+0x30>
        return -ENODEV;
    uint8_t buf [1] = {regaddr};
    ae82:	f88d 5004 	strb.w	r5, [sp, #4]
    ret = i2c_write(dev, buf, 1, devaddr);
    ae86:	4623      	mov	r3, r4
    ae88:	2201      	movs	r2, #1
    ae8a:	a901      	add	r1, sp, #4
    ae8c:	4805      	ldr	r0, [pc, #20]	; (aea4 <twowire_write_register+0x34>)
    ae8e:	6800      	ldr	r0, [r0, #0]
    ae90:	f006 feeb 	bl	11c6a <i2c_write>
    if (ret)
    ae94:	b910      	cbnz	r0, ae9c <twowire_write_register+0x2c>
        return ret;
    return 0;
    ae96:	2000      	movs	r0, #0
}
    ae98:	b003      	add	sp, #12
    ae9a:	bd30      	pop	{r4, r5, pc}
        return ret;
    ae9c:	b2c0      	uxtb	r0, r0
    ae9e:	e7fb      	b.n	ae98 <twowire_write_register+0x28>
        return -ENODEV;
    aea0:	20ed      	movs	r0, #237	; 0xed
    aea2:	e7f9      	b.n	ae98 <twowire_write_register+0x28>
    aea4:	20000370 	.word	0x20000370

0000aea8 <twowire_read_register_data>:

uint8_t twowire_read_register_data(uint8_t devaddr, uint8_t regaddr, uint8_t *regval){
    aea8:	b530      	push	{r4, r5, lr}
    aeaa:	b085      	sub	sp, #20
    aeac:	4604      	mov	r4, r0
    aeae:	4615      	mov	r5, r2
    aeb0:	f88d 100f 	strb.w	r1, [sp, #15]
    int ret;
    if (!device_is_ready(dev)) 
    aeb4:	4b0b      	ldr	r3, [pc, #44]	; (aee4 <twowire_read_register_data+0x3c>)
    aeb6:	6818      	ldr	r0, [r3, #0]
    aeb8:	f00a f84c 	bl	14f54 <z_device_is_ready>
    aebc:	b180      	cbz	r0, aee0 <twowire_read_register_data+0x38>
        return -ENODEV;
    ret = i2c_write_read(dev, devaddr, &regaddr, 1, regval, 2);
    aebe:	2302      	movs	r3, #2
    aec0:	9301      	str	r3, [sp, #4]
    aec2:	9500      	str	r5, [sp, #0]
    aec4:	2301      	movs	r3, #1
    aec6:	f10d 020f 	add.w	r2, sp, #15
    aeca:	4621      	mov	r1, r4
    aecc:	4805      	ldr	r0, [pc, #20]	; (aee4 <twowire_read_register_data+0x3c>)
    aece:	6800      	ldr	r0, [r0, #0]
    aed0:	f006 fed9 	bl	11c86 <i2c_write_read>
    if (ret) 
    aed4:	b910      	cbnz	r0, aedc <twowire_read_register_data+0x34>
        return ret;
    return 0;
    aed6:	2000      	movs	r0, #0
}
    aed8:	b005      	add	sp, #20
    aeda:	bd30      	pop	{r4, r5, pc}
        return ret;
    aedc:	b2c0      	uxtb	r0, r0
    aede:	e7fb      	b.n	aed8 <twowire_read_register_data+0x30>
        return -ENODEV;
    aee0:	20ed      	movs	r0, #237	; 0xed
    aee2:	e7f9      	b.n	aed8 <twowire_read_register_data+0x30>
    aee4:	20000370 	.word	0x20000370

0000aee8 <twowire_write_register_byte>:

uint8_t twowire_write_register_byte(uint8_t devaddr, uint8_t regaddr, uint8_t regval){
    aee8:	b570      	push	{r4, r5, r6, lr}
    aeea:	b082      	sub	sp, #8
    aeec:	4604      	mov	r4, r0
    aeee:	460e      	mov	r6, r1
    aef0:	4615      	mov	r5, r2
    int ret;
    if (!device_is_ready(dev))
    aef2:	4b0c      	ldr	r3, [pc, #48]	; (af24 <twowire_write_register_byte+0x3c>)
    aef4:	6818      	ldr	r0, [r3, #0]
    aef6:	f00a f82d 	bl	14f54 <z_device_is_ready>
    aefa:	b180      	cbz	r0, af1e <twowire_write_register_byte+0x36>
        return -ENODEV;
    uint8_t buf [2] = {regaddr, regval};
    aefc:	f88d 6004 	strb.w	r6, [sp, #4]
    af00:	f88d 5005 	strb.w	r5, [sp, #5]
    ret = i2c_write(dev, buf, 2, devaddr);
    af04:	4623      	mov	r3, r4
    af06:	2202      	movs	r2, #2
    af08:	a901      	add	r1, sp, #4
    af0a:	4806      	ldr	r0, [pc, #24]	; (af24 <twowire_write_register_byte+0x3c>)
    af0c:	6800      	ldr	r0, [r0, #0]
    af0e:	f006 feac 	bl	11c6a <i2c_write>
    if (ret)
    af12:	b910      	cbnz	r0, af1a <twowire_write_register_byte+0x32>
        return ret;
    return 0;
    af14:	2000      	movs	r0, #0
}
    af16:	b002      	add	sp, #8
    af18:	bd70      	pop	{r4, r5, r6, pc}
        return ret;
    af1a:	b2c0      	uxtb	r0, r0
    af1c:	e7fb      	b.n	af16 <twowire_write_register_byte+0x2e>
        return -ENODEV;
    af1e:	20ed      	movs	r0, #237	; 0xed
    af20:	e7f9      	b.n	af16 <twowire_write_register_byte+0x2e>
    af22:	bf00      	nop
    af24:	20000370 	.word	0x20000370

0000af28 <twowire_write_register_data>:

uint8_t twowire_write_register_data(uint8_t devaddr, uint8_t regaddr, uint16_t regval){
    af28:	b570      	push	{r4, r5, r6, lr}
    af2a:	b082      	sub	sp, #8
    af2c:	4606      	mov	r6, r0
    af2e:	460d      	mov	r5, r1
    af30:	4614      	mov	r4, r2
    int ret;
    if (!device_is_ready(dev))
    af32:	4a0d      	ldr	r2, [pc, #52]	; (af68 <twowire_write_register_data+0x40>)
    af34:	6810      	ldr	r0, [r2, #0]
    af36:	f00a f80d 	bl	14f54 <z_device_is_ready>
    af3a:	b198      	cbz	r0, af64 <twowire_write_register_data+0x3c>
        return -ENODEV;
    uint8_t buf [3] = {regaddr, (uint8_t)(regval >> 8), (uint8_t)(regval)};
    af3c:	f88d 5004 	strb.w	r5, [sp, #4]
    af40:	0a23      	lsrs	r3, r4, #8
    af42:	f88d 3005 	strb.w	r3, [sp, #5]
    af46:	f88d 4006 	strb.w	r4, [sp, #6]
    ret = i2c_write(dev, buf, 3, devaddr);
    af4a:	4633      	mov	r3, r6
    af4c:	2203      	movs	r2, #3
    af4e:	a901      	add	r1, sp, #4
    af50:	4805      	ldr	r0, [pc, #20]	; (af68 <twowire_write_register_data+0x40>)
    af52:	6800      	ldr	r0, [r0, #0]
    af54:	f006 fe89 	bl	11c6a <i2c_write>
    if (ret)
    af58:	b910      	cbnz	r0, af60 <twowire_write_register_data+0x38>
        return ret;
    return 0;
    af5a:	2000      	movs	r0, #0
    af5c:	b002      	add	sp, #8
    af5e:	bd70      	pop	{r4, r5, r6, pc}
        return ret;
    af60:	b2c0      	uxtb	r0, r0
    af62:	e7fb      	b.n	af5c <twowire_write_register_data+0x34>
        return -ENODEV;
    af64:	20ed      	movs	r0, #237	; 0xed
    af66:	e7f9      	b.n	af5c <twowire_write_register_data+0x34>
    af68:	20000370 	.word	0x20000370

0000af6c <peripherals_set_pre_reg_voltage>:
int16_t uav_battery_voltage_mv = 0;
int16_t uav_current_ma = 0;
int16_t pre_reg_input_current_ma = 0;
int16_t pre_reg_output_current_ma = 0; 

void peripherals_set_pre_reg_voltage(uint16_t voltage_mv){
    af6c:	b510      	push	{r4, lr}
    
    // Calculate lower resistor value
    uint16_t fb_res_l = LT8330_REFERENCE_VOLTAGE_MV*LT8330_FB_RES_H/(voltage_mv - LT8330_REFERENCE_VOLTAGE_MV);
    af6e:	f5a0 60c8 	sub.w	r0, r0, #1600	; 0x640
    af72:	4c09      	ldr	r4, [pc, #36]	; (af98 <peripherals_set_pre_reg_voltage+0x2c>)
    af74:	fb94 f4f0 	sdiv	r4, r4, r0

    // Convert to hex value
    uint8_t value = (uint8_t)(fb_res_l*128/TPL_INTERNAL_RES);
    af78:	b2a4      	uxth	r4, r4
    af7a:	01e4      	lsls	r4, r4, #7
    af7c:	4b07      	ldr	r3, [pc, #28]	; (af9c <peripherals_set_pre_reg_voltage+0x30>)
    af7e:	fb83 3404 	smull	r3, r4, r3, r4
    af82:	f3c4 3407 	ubfx	r4, r4, #12, #8

    printk("%d \n", value);
    af86:	4621      	mov	r1, r4
    af88:	4805      	ldr	r0, [pc, #20]	; (afa0 <peripherals_set_pre_reg_voltage+0x34>)
    af8a:	f006 ff17 	bl	11dbc <printk>
    
    // Update TPL --> programmable load
    TPL0401x_update_resistance(value);
    af8e:	4620      	mov	r0, r4
    af90:	f006 fea1 	bl	11cd6 <TPL0401x_update_resistance>
}
    af94:	bd10      	pop	{r4, pc}
    af96:	bf00      	nop
    af98:	00f42400 	.word	0x00f42400
    af9c:	68db8bad 	.word	0x68db8bad
    afa0:	000162d0 	.word	0x000162d0

0000afa4 <peripherals_convert_readings>:
  voltage = ads1115_get_result_mV();
  return voltage;
}

void peripherals_convert_readings(){
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    afa4:	2300      	movs	r3, #0
    afa6:	e00a      	b.n	afbe <peripherals_convert_readings+0x1a>
        switch (i){
            case 0: uav_battery_voltage_mv = channel_voltage[i]*110/10;     break;
    afa8:	4a21      	ldr	r2, [pc, #132]	; (b030 <peripherals_convert_readings+0x8c>)
    afaa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    afae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    afb2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    afb6:	491f      	ldr	r1, [pc, #124]	; (b034 <peripherals_convert_readings+0x90>)
    afb8:	800a      	strh	r2, [r1, #0]
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    afba:	3301      	adds	r3, #1
    afbc:	b2db      	uxtb	r3, r3
    afbe:	2b03      	cmp	r3, #3
    afc0:	d835      	bhi.n	b02e <peripherals_convert_readings+0x8a>
        switch (i){
    afc2:	2b03      	cmp	r3, #3
    afc4:	d8f9      	bhi.n	afba <peripherals_convert_readings+0x16>
    afc6:	a201      	add	r2, pc, #4	; (adr r2, afcc <peripherals_convert_readings+0x28>)
    afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    afcc:	0000afa9 	.word	0x0000afa9
    afd0:	0000afdd 	.word	0x0000afdd
    afd4:	0000afff 	.word	0x0000afff
    afd8:	0000b017 	.word	0x0000b017
            case 1: uav_current_ma = channel_voltage[i]*147*100/50/47;      break; // multiply by 100   ===== dividing by 0.01 (voltage divider 100k - 47k)
    afdc:	4a14      	ldr	r2, [pc, #80]	; (b030 <peripherals_convert_readings+0x8c>)
    afde:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    afe2:	f44f 7193 	mov.w	r1, #294	; 0x126
    afe6:	fb01 f202 	mul.w	r2, r1, r2
    afea:	4913      	ldr	r1, [pc, #76]	; (b038 <peripherals_convert_readings+0x94>)
    afec:	fb81 0102 	smull	r0, r1, r1, r2
    aff0:	4411      	add	r1, r2
    aff2:	17d2      	asrs	r2, r2, #31
    aff4:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    aff8:	4910      	ldr	r1, [pc, #64]	; (b03c <peripherals_convert_readings+0x98>)
    affa:	800a      	strh	r2, [r1, #0]
    affc:	e7dd      	b.n	afba <peripherals_convert_readings+0x16>
            case 2: pre_reg_input_current_ma = channel_voltage[i]*10/50;    break; // multiply by 10    ===== dividing by 0.1
    affe:	4a0c      	ldr	r2, [pc, #48]	; (b030 <peripherals_convert_readings+0x8c>)
    b000:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    b004:	490e      	ldr	r1, [pc, #56]	; (b040 <peripherals_convert_readings+0x9c>)
    b006:	fb81 0102 	smull	r0, r1, r1, r2
    b00a:	17d2      	asrs	r2, r2, #31
    b00c:	ebc2 0261 	rsb	r2, r2, r1, asr #1
    b010:	490c      	ldr	r1, [pc, #48]	; (b044 <peripherals_convert_readings+0xa0>)
    b012:	800a      	strh	r2, [r1, #0]
    b014:	e7d1      	b.n	afba <peripherals_convert_readings+0x16>
            case 3: pre_reg_output_current_ma = channel_voltage[i]*10/50;   break; // multiply by 10    ===== dividing by 0.1
    b016:	4a06      	ldr	r2, [pc, #24]	; (b030 <peripherals_convert_readings+0x8c>)
    b018:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    b01c:	4908      	ldr	r1, [pc, #32]	; (b040 <peripherals_convert_readings+0x9c>)
    b01e:	fb81 0102 	smull	r0, r1, r1, r2
    b022:	17d2      	asrs	r2, r2, #31
    b024:	ebc2 0261 	rsb	r2, r2, r1, asr #1
    b028:	4907      	ldr	r1, [pc, #28]	; (b048 <peripherals_convert_readings+0xa4>)
    b02a:	800a      	strh	r2, [r1, #0]
    b02c:	e7c5      	b.n	afba <peripherals_convert_readings+0x16>
            default: break;
        }
    }
    b02e:	4770      	bx	lr
    b030:	20001a38 	.word	0x20001a38
    b034:	20002176 	.word	0x20002176
    b038:	ae4c415d 	.word	0xae4c415d
    b03c:	20002174 	.word	0x20002174
    b040:	66666667 	.word	0x66666667
    b044:	20002172 	.word	0x20002172
    b048:	20002170 	.word	0x20002170

0000b04c <peripherals_update_all_ads1115_channels>:
void peripherals_update_all_ads1115_channels(){
    b04c:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    b04e:	2400      	movs	r4, #0
    b050:	e007      	b.n	b062 <peripherals_update_all_ads1115_channels+0x16>
        channel_voltage[i] = peripherals_ads1115_read_channel(i);
    b052:	4620      	mov	r0, r4
    b054:	f006 fe33 	bl	11cbe <peripherals_ads1115_read_channel>
    b058:	4b04      	ldr	r3, [pc, #16]	; (b06c <peripherals_update_all_ads1115_channels+0x20>)
    b05a:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for(uint8_t i = 0; i < ADS1115_NUMBER_OF_CHANNELS; i++){
    b05e:	3401      	adds	r4, #1
    b060:	b2e4      	uxtb	r4, r4
    b062:	2c03      	cmp	r4, #3
    b064:	d9f5      	bls.n	b052 <peripherals_update_all_ads1115_channels+0x6>
    peripherals_convert_readings();
    b066:	f7ff ff9d 	bl	afa4 <peripherals_convert_readings>
}
    b06a:	bd10      	pop	{r4, pc}
    b06c:	20001a38 	.word	0x20001a38

0000b070 <update_adc_readings>:
	}
}


// Update ADC voltages
void update_adc_readings(struct adc_sequence *sequence){
    b070:	b530      	push	{r4, r5, lr}
    b072:	b083      	sub	sp, #12
    b074:	4605      	mov	r5, r0
    int err = 0;
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b076:	2400      	movs	r4, #0
    b078:	e003      	b.n	b082 <update_adc_readings+0x12>
		(void)adc_sequence_init_dt(&adc_channels[i], sequence);

		// Read ADC channel
		err = adc_read(adc_channels[i].dev, sequence);
		if (err < 0) {
			printk("Could not read (%d)\n", err);
    b07a:	4826      	ldr	r0, [pc, #152]	; (b114 <update_adc_readings+0xa4>)
    b07c:	f006 fe9e 	bl	11dbc <printk>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b080:	3401      	adds	r4, #1
    b082:	2c02      	cmp	r4, #2
    b084:	d843      	bhi.n	b10e <update_adc_readings+0x9e>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
    b086:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    b08a:	4b23      	ldr	r3, [pc, #140]	; (b118 <update_adc_readings+0xa8>)
    b08c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b090:	795b      	ldrb	r3, [r3, #5]
    b092:	b153      	cbz	r3, b0aa <update_adc_readings+0x3a>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b094:	4b20      	ldr	r3, [pc, #128]	; (b118 <update_adc_readings+0xa8>)
    b096:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b09a:	7919      	ldrb	r1, [r3, #4]
    b09c:	2201      	movs	r2, #1
    b09e:	408a      	lsls	r2, r1
    b0a0:	606a      	str	r2, [r5, #4]
	seq->resolution = spec->resolution;
    b0a2:	7c1a      	ldrb	r2, [r3, #16]
    b0a4:	742a      	strb	r2, [r5, #16]
	seq->oversampling = spec->oversampling;
    b0a6:	7c5b      	ldrb	r3, [r3, #17]
    b0a8:	746b      	strb	r3, [r5, #17]
		err = adc_read(adc_channels[i].dev, sequence);
    b0aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    b0ae:	4a1a      	ldr	r2, [pc, #104]	; (b118 <update_adc_readings+0xa8>)
    b0b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	const struct adc_driver_api *api =
    b0b4:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, sequence);
    b0b6:	685b      	ldr	r3, [r3, #4]
    b0b8:	4629      	mov	r1, r5
    b0ba:	4798      	blx	r3
		if (err < 0) {
    b0bc:	1e01      	subs	r1, r0, #0
    b0be:	dbdc      	blt.n	b07a <update_adc_readings+0xa>
			continue;
		}

		// Convert to mv
		int16_t val_mv;
		val_mv = (int16_t)buf;
    b0c0:	4b16      	ldr	r3, [pc, #88]	; (b11c <update_adc_readings+0xac>)
    b0c2:	881b      	ldrh	r3, [r3, #0]
    b0c4:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = adc_raw_to_millivolts_dt(&adc_channels[i], &val_mv);
    b0c8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    b0cc:	f10d 0106 	add.w	r1, sp, #6
    b0d0:	4b11      	ldr	r3, [pc, #68]	; (b118 <update_adc_readings+0xa8>)
    b0d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b0d6:	f006 fe3b 	bl	11d50 <adc_raw_to_millivolts_dt>

		// Conversion (take into account voltage dividers)
		switch (i){
    b0da:	2c01      	cmp	r4, #1
    b0dc:	d008      	beq.n	b0f0 <update_adc_readings+0x80>
    b0de:	2c02      	cmp	r4, #2
    b0e0:	d00f      	beq.n	b102 <update_adc_readings+0x92>
    b0e2:	2c00      	cmp	r4, #0
    b0e4:	d1cc      	bne.n	b080 <update_adc_readings+0x10>
			case 0: three_volt_supply_voltage_mv = val_mv; 					break;
    b0e6:	4b0e      	ldr	r3, [pc, #56]	; (b120 <update_adc_readings+0xb0>)
    b0e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b0ec:	801a      	strh	r2, [r3, #0]
    b0ee:	e7c7      	b.n	b080 <update_adc_readings+0x10>
			// case 1: break;
			// case 2: break;
			// case 3: break;
			// case 4: break;
			case 1: vamp_supply_voltage_mv = (int16_t)(val_mv * (110/10)); 	break;
    b0f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b0f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    b0f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    b0fc:	4a09      	ldr	r2, [pc, #36]	; (b124 <update_adc_readings+0xb4>)
    b0fe:	8013      	strh	r3, [r2, #0]
    b100:	e7be      	b.n	b080 <update_adc_readings+0x10>
			case 2: five_volt_supply_voltage_mv = (int16_t)(val_mv * 2); 	break;
    b102:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b106:	005b      	lsls	r3, r3, #1
    b108:	4a07      	ldr	r2, [pc, #28]	; (b128 <update_adc_readings+0xb8>)
    b10a:	8013      	strh	r3, [r2, #0]
    b10c:	e7b8      	b.n	b080 <update_adc_readings+0x10>
			default: break;
		}
	}
}
    b10e:	b003      	add	sp, #12
    b110:	bd30      	pop	{r4, r5, pc}
    b112:	bf00      	nop
    b114:	000162d8 	.word	0x000162d8
    b118:	00016338 	.word	0x00016338
    b11c:	2000217e 	.word	0x2000217e
    b120:	2000217c 	.word	0x2000217c
    b124:	20002178 	.word	0x20002178
    b128:	2000217a 	.word	0x2000217a

0000b12c <adc_read_start>:
void adc_read_start(void){
    b12c:	b510      	push	{r4, lr}
    b12e:	b086      	sub	sp, #24
	struct adc_sequence sequence = {
    b130:	2400      	movs	r4, #0
    b132:	9401      	str	r4, [sp, #4]
    b134:	9402      	str	r4, [sp, #8]
    b136:	9403      	str	r4, [sp, #12]
    b138:	9404      	str	r4, [sp, #16]
    b13a:	9405      	str	r4, [sp, #20]
    b13c:	4b1a      	ldr	r3, [pc, #104]	; (b1a8 <adc_read_start+0x7c>)
    b13e:	9303      	str	r3, [sp, #12]
    b140:	2302      	movs	r3, #2
    b142:	9304      	str	r3, [sp, #16]
    b144:	2301      	movs	r3, #1
    b146:	f88d 3016 	strb.w	r3, [sp, #22]
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b14a:	e00b      	b.n	b164 <adc_read_start+0x38>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
    b14c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    b150:	4b16      	ldr	r3, [pc, #88]	; (b1ac <adc_read_start+0x80>)
    b152:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    b156:	6819      	ldr	r1, [r3, #0]
    b158:	4815      	ldr	r0, [pc, #84]	; (b1b0 <adc_read_start+0x84>)
    b15a:	f006 fe2f 	bl	11dbc <printk>
}
    b15e:	b006      	add	sp, #24
    b160:	bd10      	pop	{r4, pc}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b162:	3401      	adds	r4, #1
    b164:	2c02      	cmp	r4, #2
    b166:	d817      	bhi.n	b198 <adc_read_start+0x6c>
		if (!device_is_ready(adc_channels[i].dev)) {
    b168:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    b16c:	4a0f      	ldr	r2, [pc, #60]	; (b1ac <adc_read_start+0x80>)
    b16e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    b172:	f009 feef 	bl	14f54 <z_device_is_ready>
    b176:	2800      	cmp	r0, #0
    b178:	d0e8      	beq.n	b14c <adc_read_start+0x20>
		err = adc_channel_setup_dt(&adc_channels[i]);
    b17a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    b17e:	4b0b      	ldr	r3, [pc, #44]	; (b1ac <adc_read_start+0x80>)
    b180:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b184:	f006 fdae 	bl	11ce4 <adc_channel_setup_dt>
		if (err < 0) {
    b188:	2800      	cmp	r0, #0
    b18a:	daea      	bge.n	b162 <adc_read_start+0x36>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b18c:	4602      	mov	r2, r0
    b18e:	4621      	mov	r1, r4
    b190:	4808      	ldr	r0, [pc, #32]	; (b1b4 <adc_read_start+0x88>)
    b192:	f006 fe13 	bl	11dbc <printk>
			return 0;
    b196:	e7e2      	b.n	b15e <adc_read_start+0x32>
		k_msleep(100);
    b198:	2064      	movs	r0, #100	; 0x64
    b19a:	f006 fdb0 	bl	11cfe <k_msleep>
		update_adc_readings(&sequence);
    b19e:	a801      	add	r0, sp, #4
    b1a0:	f7ff ff66 	bl	b070 <update_adc_readings>
	while (1)
    b1a4:	e7f8      	b.n	b198 <adc_read_start+0x6c>
    b1a6:	bf00      	nop
    b1a8:	2000217e 	.word	0x2000217e
    b1ac:	00016338 	.word	0x00016338
    b1b0:	000162f0 	.word	0x000162f0
    b1b4:	00016314 	.word	0x00016314

0000b1b8 <copy_to_adv_buffer>:


// Global adv params buffer
struct adv_params ap;

static void copy_to_adv_buffer(){
    b1b8:	b510      	push	{r4, lr}
    b1ba:	b082      	sub	sp, #8
	struct bt_data ad_variable;
	ad_variable.type = BT_DATA_MANUFACTURER_DATA;
    b1bc:	23ff      	movs	r3, #255	; 0xff
    b1be:	f88d 3000 	strb.w	r3, [sp]
	ad_variable.data = ap.usr_tx_buffer;
    b1c2:	4c0b      	ldr	r4, [pc, #44]	; (b1f0 <copy_to_adv_buffer+0x38>)
    b1c4:	9401      	str	r4, [sp, #4]
	ad_variable.data_len = sizeof(ap.usr_tx_buffer);
    b1c6:	230b      	movs	r3, #11
    b1c8:	f88d 3001 	strb.w	r3, [sp, #1]

	memcpy(ap.adv_buffer, ad, sizeof(ad));
    b1cc:	2208      	movs	r2, #8
    b1ce:	4909      	ldr	r1, [pc, #36]	; (b1f4 <copy_to_adv_buffer+0x3c>)
    b1d0:	18e0      	adds	r0, r4, r3
    b1d2:	f007 fd1a 	bl	12c0a <memcpy>
	ap.adv_buffer[DEFAULT_SIZE_ADV_MSG] = ad_variable;
    b1d6:	f104 0313 	add.w	r3, r4, #19
    b1da:	aa02      	add	r2, sp, #8
    b1dc:	e912 0003 	ldmdb	r2, {r0, r1}
    b1e0:	e883 0003 	stmia.w	r3, {r0, r1}

	// Update advertisement packet
	ap.update = true;
    b1e4:	2301      	movs	r3, #1
    b1e6:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    b1ea:	b002      	add	sp, #8
    b1ec:	bd10      	pop	{r4, pc}
    b1ee:	bf00      	nop
    b1f0:	20001a41 	.word	0x20001a41
    b1f4:	0001638c 	.word	0x0001638c

0000b1f8 <adv_init>:

static void adv_init(void){
    b1f8:	b508      	push	{r3, lr}
	ap.update = true;
    b1fa:	4b06      	ldr	r3, [pc, #24]	; (b214 <adv_init+0x1c>)
    b1fc:	2201      	movs	r2, #1
    b1fe:	701a      	strb	r2, [r3, #0]

	copy_to_adv_buffer();
    b200:	f7ff ffda 	bl	b1b8 <copy_to_adv_buffer>

	/* Initialize the Bluetooth Subsystem */
	bt_enable(NULL);
    b204:	2000      	movs	r0, #0
    b206:	f001 ff35 	bl	d074 <bt_enable>
	printk("Bluetooth initialized\n");
    b20a:	4803      	ldr	r0, [pc, #12]	; (b218 <adv_init+0x20>)
    b20c:	f006 fdd6 	bl	11dbc <printk>

}
    b210:	bd08      	pop	{r3, pc}
    b212:	bf00      	nop
    b214:	20001a40 	.word	0x20001a40
    b218:	00016374 	.word	0x00016374

0000b21c <adv_update_adc_readings>:
// 	ap.usr_tx_buffer[VOLT_IN_NR + 1] = (uint8_t)(value >> 8);

// 	copy_to_adv_buffer();
// }

void adv_update_adc_readings(void){
    b21c:	b500      	push	{lr}
    b21e:	b085      	sub	sp, #20
	int16_t adc_send_buf[NO_VARIABLES_TX];
	if(uav_battery_voltage_mv > 0) 		{ adc_send_buf[0] = (int16_t)(uav_battery_voltage_mv);		} else { adc_send_buf[0] = 0; }
    b220:	4b28      	ldr	r3, [pc, #160]	; (b2c4 <adv_update_adc_readings+0xa8>)
    b222:	f9b3 3000 	ldrsh.w	r3, [r3]
    b226:	2b00      	cmp	r3, #0
    b228:	dd1f      	ble.n	b26a <adv_update_adc_readings+0x4e>
    b22a:	f8ad 3004 	strh.w	r3, [sp, #4]
	if(uav_current_ma > 0)				{ adc_send_buf[1] = (int16_t)(uav_current_ma);				} else { adc_send_buf[1] = 0; }
    b22e:	4b26      	ldr	r3, [pc, #152]	; (b2c8 <adv_update_adc_readings+0xac>)
    b230:	f9b3 3000 	ldrsh.w	r3, [r3]
    b234:	2b00      	cmp	r3, #0
    b236:	dd1c      	ble.n	b272 <adv_update_adc_readings+0x56>
    b238:	f8ad 3006 	strh.w	r3, [sp, #6]
	if(pre_reg_input_current_ma > 0)	{ adc_send_buf[2] = (int16_t)(pre_reg_input_current_ma);	} else { adc_send_buf[2] = 0; }
    b23c:	4b23      	ldr	r3, [pc, #140]	; (b2cc <adv_update_adc_readings+0xb0>)
    b23e:	f9b3 3000 	ldrsh.w	r3, [r3]
    b242:	2b00      	cmp	r3, #0
    b244:	dd19      	ble.n	b27a <adv_update_adc_readings+0x5e>
    b246:	f8ad 3008 	strh.w	r3, [sp, #8]
	if(pre_reg_output_current_ma > 0)	{ adc_send_buf[3] = (int16_t)(pre_reg_output_current_ma);	} else { adc_send_buf[3] = 0; }
    b24a:	4b21      	ldr	r3, [pc, #132]	; (b2d0 <adv_update_adc_readings+0xb4>)
    b24c:	f9b3 3000 	ldrsh.w	r3, [r3]
    b250:	2b00      	cmp	r3, #0
    b252:	dd16      	ble.n	b282 <adv_update_adc_readings+0x66>
    b254:	f8ad 300a 	strh.w	r3, [sp, #10]
	if(vamp_supply_voltage_mv > 0)		{ adc_send_buf[4] = (int16_t)(vamp_supply_voltage_mv);		} else { adc_send_buf[4] = 0; }
    b258:	4b1e      	ldr	r3, [pc, #120]	; (b2d4 <adv_update_adc_readings+0xb8>)
    b25a:	f9b3 3000 	ldrsh.w	r3, [r3]
    b25e:	2b00      	cmp	r3, #0
    b260:	dd13      	ble.n	b28a <adv_update_adc_readings+0x6e>
    b262:	f8ad 300c 	strh.w	r3, [sp, #12]
void adv_update_adc_readings(void){
    b266:	2300      	movs	r3, #0
    b268:	e025      	b.n	b2b6 <adv_update_adc_readings+0x9a>
	if(uav_battery_voltage_mv > 0) 		{ adc_send_buf[0] = (int16_t)(uav_battery_voltage_mv);		} else { adc_send_buf[0] = 0; }
    b26a:	2300      	movs	r3, #0
    b26c:	f8ad 3004 	strh.w	r3, [sp, #4]
    b270:	e7dd      	b.n	b22e <adv_update_adc_readings+0x12>
	if(uav_current_ma > 0)				{ adc_send_buf[1] = (int16_t)(uav_current_ma);				} else { adc_send_buf[1] = 0; }
    b272:	2300      	movs	r3, #0
    b274:	f8ad 3006 	strh.w	r3, [sp, #6]
    b278:	e7e0      	b.n	b23c <adv_update_adc_readings+0x20>
	if(pre_reg_input_current_ma > 0)	{ adc_send_buf[2] = (int16_t)(pre_reg_input_current_ma);	} else { adc_send_buf[2] = 0; }
    b27a:	2300      	movs	r3, #0
    b27c:	f8ad 3008 	strh.w	r3, [sp, #8]
    b280:	e7e3      	b.n	b24a <adv_update_adc_readings+0x2e>
	if(pre_reg_output_current_ma > 0)	{ adc_send_buf[3] = (int16_t)(pre_reg_output_current_ma);	} else { adc_send_buf[3] = 0; }
    b282:	2300      	movs	r3, #0
    b284:	f8ad 300a 	strh.w	r3, [sp, #10]
    b288:	e7e6      	b.n	b258 <adv_update_adc_readings+0x3c>
	if(vamp_supply_voltage_mv > 0)		{ adc_send_buf[4] = (int16_t)(vamp_supply_voltage_mv);		} else { adc_send_buf[4] = 0; }
    b28a:	2300      	movs	r3, #0
    b28c:	f8ad 300c 	strh.w	r3, [sp, #12]
    b290:	e7e9      	b.n	b266 <adv_update_adc_readings+0x4a>

	for(uint8_t i = 0; i < NO_VARIABLES_TX; i++){
		ap.usr_tx_buffer[1 + i*2] = (uint8_t)(adc_send_buf[i] >> 8);
    b292:	005a      	lsls	r2, r3, #1
    b294:	a904      	add	r1, sp, #16
    b296:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    b29a:	f931 0c0c 	ldrsh.w	r0, [r1, #-12]
    b29e:	3201      	adds	r2, #1
    b2a0:	f911 cc0b 	ldrsb.w	ip, [r1, #-11]
    b2a4:	490c      	ldr	r1, [pc, #48]	; (b2d8 <adv_update_adc_readings+0xbc>)
    b2a6:	440a      	add	r2, r1
    b2a8:	f882 c001 	strb.w	ip, [r2, #1]
		ap.usr_tx_buffer[1 + 1 + i*2] = (uint8_t)adc_send_buf[i];	
    b2ac:	3301      	adds	r3, #1
    b2ae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    b2b2:	7048      	strb	r0, [r1, #1]
	for(uint8_t i = 0; i < NO_VARIABLES_TX; i++){
    b2b4:	b2db      	uxtb	r3, r3
    b2b6:	2b04      	cmp	r3, #4
    b2b8:	d9eb      	bls.n	b292 <adv_update_adc_readings+0x76>
	}

	copy_to_adv_buffer();
    b2ba:	f7ff ff7d 	bl	b1b8 <copy_to_adv_buffer>
}
    b2be:	b005      	add	sp, #20
    b2c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b2c4:	20002176 	.word	0x20002176
    b2c8:	20002174 	.word	0x20002174
    b2cc:	20002172 	.word	0x20002172
    b2d0:	20002170 	.word	0x20002170
    b2d4:	20002178 	.word	0x20002178
    b2d8:	20001a40 	.word	0x20001a40

0000b2dc <adv_start>:
void adv_start(void){
    b2dc:	b500      	push	{lr}
    b2de:	b089      	sub	sp, #36	; 0x24
	adv_init();
    b2e0:	f7ff ff8a 	bl	b1f8 <adv_init>
		k_msleep(150*5);
    b2e4:	f240 20ee 	movw	r0, #750	; 0x2ee
    b2e8:	f006 fd50 	bl	11d8c <k_msleep>
		if(ap.update){
    b2ec:	4b0e      	ldr	r3, [pc, #56]	; (b328 <adv_start+0x4c>)
    b2ee:	781b      	ldrb	r3, [r3, #0]
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d0f7      	beq.n	b2e4 <adv_start+0x8>
			ap.update = false;
    b2f4:	2600      	movs	r6, #0
    b2f6:	4d0c      	ldr	r5, [pc, #48]	; (b328 <adv_start+0x4c>)
    b2f8:	f805 6b0c 	strb.w	r6, [r5], #12
			bt_le_adv_stop();
    b2fc:	f007 ffdc 	bl	132b8 <bt_le_adv_stop>
			adv_update_adc_readings();
    b300:	f7ff ff8c 	bl	b21c <adv_update_adc_readings>
			bt_le_adv_start(BT_LE_ADV_CUSTOM, ap.adv_buffer, ARRAY_SIZE(ap.adv_buffer), NULL, 0);
    b304:	f10d 0c0c 	add.w	ip, sp, #12
    b308:	4c08      	ldr	r4, [pc, #32]	; (b32c <adv_start+0x50>)
    b30a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b30c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b310:	6823      	ldr	r3, [r4, #0]
    b312:	f8cc 3000 	str.w	r3, [ip]
    b316:	9600      	str	r6, [sp, #0]
    b318:	4633      	mov	r3, r6
    b31a:	2202      	movs	r2, #2
    b31c:	4629      	mov	r1, r5
    b31e:	a803      	add	r0, sp, #12
    b320:	f002 fabc 	bl	d89c <bt_le_adv_start>
    b324:	e7de      	b.n	b2e4 <adv_start+0x8>
    b326:	bf00      	nop
    b328:	20001a40 	.word	0x20001a40
    b32c:	00016180 	.word	0x00016180

0000b330 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
    b330:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
    b332:	4b02      	ldr	r3, [pc, #8]	; (b33c <char_out+0xc>)
    b334:	681b      	ldr	r3, [r3, #0]
    b336:	4798      	blx	r3
}
    b338:	bd08      	pop	{r3, pc}
    b33a:	bf00      	nop
    b33c:	20000384 	.word	0x20000384

0000b340 <__printk_hook_install>:
	_char_out = fn;
    b340:	4b01      	ldr	r3, [pc, #4]	; (b348 <__printk_hook_install+0x8>)
    b342:	6018      	str	r0, [r3, #0]
}
    b344:	4770      	bx	lr
    b346:	bf00      	nop
    b348:	20000384 	.word	0x20000384

0000b34c <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    b34c:	b500      	push	{lr}
    b34e:	b083      	sub	sp, #12
    b350:	4602      	mov	r2, r0
    b352:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    b354:	2100      	movs	r1, #0
    b356:	9100      	str	r1, [sp, #0]
    b358:	4802      	ldr	r0, [pc, #8]	; (b364 <vprintk+0x18>)
    b35a:	f000 f91d 	bl	b598 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b35e:	b003      	add	sp, #12
    b360:	f85d fb04 	ldr.w	pc, [sp], #4
    b364:	0000b331 	.word	0x0000b331

0000b368 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b36c:	b083      	sub	sp, #12
    b36e:	4604      	mov	r4, r0
    b370:	4608      	mov	r0, r1
    b372:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b374:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b376:	f013 0f08 	tst.w	r3, #8
    b37a:	d105      	bne.n	b388 <process_event+0x20>
    b37c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    b380:	2300      	movs	r3, #0
    b382:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    b384:	9301      	str	r3, [sp, #4]
}
    b386:	e055      	b.n	b434 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    b388:	2901      	cmp	r1, #1
    b38a:	d009      	beq.n	b3a0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    b38c:	f043 0320 	orr.w	r3, r3, #32
    b390:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    b392:	f385 8811 	msr	BASEPRI, r5
    b396:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b39a:	b003      	add	sp, #12
    b39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    b3a0:	f043 0310 	orr.w	r3, r3, #16
    b3a4:	8323      	strh	r3, [r4, #24]
    b3a6:	e7f4      	b.n	b392 <process_event+0x2a>
			evt = process_recheck(mgr);
    b3a8:	4620      	mov	r0, r4
    b3aa:	f006 ff4e 	bl	1224a <process_recheck>
    b3ae:	e043      	b.n	b438 <process_event+0xd0>
			res = mgr->last_res;
    b3b0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    b3b4:	464a      	mov	r2, r9
    b3b6:	4669      	mov	r1, sp
    b3b8:	4620      	mov	r0, r4
    b3ba:	f006 ff5f 	bl	1227c <process_complete>
		onoff_transition_fn transit = NULL;
    b3be:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b3c2:	8b23      	ldrh	r3, [r4, #24]
    b3c4:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b3c8:	42b7      	cmp	r7, r6
    b3ca:	d069      	beq.n	b4a0 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    b3cc:	68a2      	ldr	r2, [r4, #8]
    b3ce:	2a00      	cmp	r2, #0
    b3d0:	d066      	beq.n	b4a0 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b3d2:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b3d4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    b3d8:	8323      	strh	r3, [r4, #24]
    b3da:	f385 8811 	msr	BASEPRI, r5
    b3de:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    b3e2:	2a00      	cmp	r2, #0
    b3e4:	d164      	bne.n	b4b0 <process_event+0x148>
    b3e6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    b3e8:	b12b      	cbz	r3, b3f6 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    b3ea:	464b      	mov	r3, r9
    b3ec:	463a      	mov	r2, r7
    b3ee:	4669      	mov	r1, sp
    b3f0:	4620      	mov	r0, r4
    b3f2:	f006 ffbc 	bl	1236e <notify_all>
			if (transit != NULL) {
    b3f6:	f1b8 0f00 	cmp.w	r8, #0
    b3fa:	d002      	beq.n	b402 <process_event+0x9a>
				transit(mgr, transition_complete);
    b3fc:	4934      	ldr	r1, [pc, #208]	; (b4d0 <process_event+0x168>)
    b3fe:	4620      	mov	r0, r4
    b400:	47c0      	blx	r8
	__asm__ volatile(
    b402:	f04f 0340 	mov.w	r3, #64	; 0x40
    b406:	f3ef 8511 	mrs	r5, BASEPRI
    b40a:	f383 8812 	msr	BASEPRI_MAX, r3
    b40e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b412:	8b23      	ldrh	r3, [r4, #24]
    b414:	f023 0308 	bic.w	r3, r3, #8
    b418:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b41a:	8b23      	ldrh	r3, [r4, #24]
    b41c:	f013 0f10 	tst.w	r3, #16
    b420:	d04c      	beq.n	b4bc <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b422:	f023 0310 	bic.w	r3, r3, #16
    b426:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    b428:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    b42a:	8b26      	ldrh	r6, [r4, #24]
    b42c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    b430:	2800      	cmp	r0, #0
    b432:	d0ae      	beq.n	b392 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    b434:	2802      	cmp	r0, #2
    b436:	d0b7      	beq.n	b3a8 <process_event+0x40>
		if (evt == EVT_NOP) {
    b438:	2800      	cmp	r0, #0
    b43a:	d0aa      	beq.n	b392 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    b43c:	3801      	subs	r0, #1
    b43e:	2804      	cmp	r0, #4
    b440:	d82a      	bhi.n	b498 <process_event+0x130>
    b442:	a301      	add	r3, pc, #4	; (adr r3, b448 <process_event+0xe0>)
    b444:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    b448:	0000b3b1 	.word	0x0000b3b1
    b44c:	0000b499 	.word	0x0000b499
    b450:	0000b45d 	.word	0x0000b45d
    b454:	0000b471 	.word	0x0000b471
    b458:	0000b485 	.word	0x0000b485
			transit = mgr->transitions->start;
    b45c:	6923      	ldr	r3, [r4, #16]
    b45e:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    b462:	2106      	movs	r1, #6
    b464:	4620      	mov	r0, r4
    b466:	f006 fec6 	bl	121f6 <set_state>
		res = 0;
    b46a:	f04f 0900 	mov.w	r9, #0
    b46e:	e7a8      	b.n	b3c2 <process_event+0x5a>
			transit = mgr->transitions->stop;
    b470:	6923      	ldr	r3, [r4, #16]
    b472:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    b476:	2104      	movs	r1, #4
    b478:	4620      	mov	r0, r4
    b47a:	f006 febc 	bl	121f6 <set_state>
		res = 0;
    b47e:	f04f 0900 	mov.w	r9, #0
    b482:	e79e      	b.n	b3c2 <process_event+0x5a>
			transit = mgr->transitions->reset;
    b484:	6923      	ldr	r3, [r4, #16]
    b486:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    b48a:	2105      	movs	r1, #5
    b48c:	4620      	mov	r0, r4
    b48e:	f006 feb2 	bl	121f6 <set_state>
		res = 0;
    b492:	f04f 0900 	mov.w	r9, #0
    b496:	e794      	b.n	b3c2 <process_event+0x5a>
		if (evt == EVT_NOP) {
    b498:	f04f 0800 	mov.w	r8, #0
    b49c:	46c1      	mov	r9, r8
    b49e:	e790      	b.n	b3c2 <process_event+0x5a>
    b4a0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    b4a2:	b10a      	cbz	r2, b4a8 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b4a4:	2200      	movs	r2, #0
    b4a6:	e795      	b.n	b3d4 <process_event+0x6c>
		    || (transit != NULL)) {
    b4a8:	f1b8 0f00 	cmp.w	r8, #0
    b4ac:	d192      	bne.n	b3d4 <process_event+0x6c>
    b4ae:	e7b4      	b.n	b41a <process_event+0xb2>
				notify_monitors(mgr, state, res);
    b4b0:	464a      	mov	r2, r9
    b4b2:	4639      	mov	r1, r7
    b4b4:	4620      	mov	r0, r4
    b4b6:	f006 fea6 	bl	12206 <notify_monitors>
    b4ba:	e794      	b.n	b3e6 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b4bc:	f013 0f20 	tst.w	r3, #32
    b4c0:	d004      	beq.n	b4cc <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b4c2:	f023 0320 	bic.w	r3, r3, #32
    b4c6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    b4c8:	2002      	movs	r0, #2
    b4ca:	e7ae      	b.n	b42a <process_event+0xc2>
		evt = EVT_NOP;
    b4cc:	2000      	movs	r0, #0
    b4ce:	e7ac      	b.n	b42a <process_event+0xc2>
    b4d0:	0001239d 	.word	0x0001239d

0000b4d4 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    b4d4:	4684      	mov	ip, r0
    b4d6:	4608      	mov	r0, r1
	bool loop = true;
    b4d8:	2201      	movs	r2, #1
    b4da:	e026      	b.n	b52a <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    b4dc:	f89c 3000 	ldrb.w	r3, [ip]
    b4e0:	f043 0304 	orr.w	r3, r3, #4
    b4e4:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    b4e8:	b1f2      	cbz	r2, b528 <extract_flags+0x54>
			++sp;
    b4ea:	3001      	adds	r0, #1
    b4ec:	e01c      	b.n	b528 <extract_flags+0x54>
			conv->flag_plus = true;
    b4ee:	f89c 3000 	ldrb.w	r3, [ip]
    b4f2:	f043 0308 	orr.w	r3, r3, #8
    b4f6:	f88c 3000 	strb.w	r3, [ip]
			break;
    b4fa:	e7f5      	b.n	b4e8 <extract_flags+0x14>
			conv->flag_space = true;
    b4fc:	f89c 3000 	ldrb.w	r3, [ip]
    b500:	f043 0310 	orr.w	r3, r3, #16
    b504:	f88c 3000 	strb.w	r3, [ip]
			break;
    b508:	e7ee      	b.n	b4e8 <extract_flags+0x14>
			conv->flag_hash = true;
    b50a:	f89c 3000 	ldrb.w	r3, [ip]
    b50e:	f043 0320 	orr.w	r3, r3, #32
    b512:	f88c 3000 	strb.w	r3, [ip]
			break;
    b516:	e7e7      	b.n	b4e8 <extract_flags+0x14>
			conv->flag_zero = true;
    b518:	f89c 3000 	ldrb.w	r3, [ip]
    b51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b520:	f88c 3000 	strb.w	r3, [ip]
			break;
    b524:	e7e0      	b.n	b4e8 <extract_flags+0x14>
		switch (*sp) {
    b526:	2200      	movs	r2, #0
		}
	} while (loop);
    b528:	b342      	cbz	r2, b57c <extract_flags+0xa8>
		switch (*sp) {
    b52a:	7803      	ldrb	r3, [r0, #0]
    b52c:	3b20      	subs	r3, #32
    b52e:	2b10      	cmp	r3, #16
    b530:	d8f9      	bhi.n	b526 <extract_flags+0x52>
    b532:	a101      	add	r1, pc, #4	; (adr r1, b538 <extract_flags+0x64>)
    b534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    b538:	0000b4fd 	.word	0x0000b4fd
    b53c:	0000b527 	.word	0x0000b527
    b540:	0000b527 	.word	0x0000b527
    b544:	0000b50b 	.word	0x0000b50b
    b548:	0000b527 	.word	0x0000b527
    b54c:	0000b527 	.word	0x0000b527
    b550:	0000b527 	.word	0x0000b527
    b554:	0000b527 	.word	0x0000b527
    b558:	0000b527 	.word	0x0000b527
    b55c:	0000b527 	.word	0x0000b527
    b560:	0000b527 	.word	0x0000b527
    b564:	0000b4ef 	.word	0x0000b4ef
    b568:	0000b527 	.word	0x0000b527
    b56c:	0000b4dd 	.word	0x0000b4dd
    b570:	0000b527 	.word	0x0000b527
    b574:	0000b527 	.word	0x0000b527
    b578:	0000b519 	.word	0x0000b519

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    b57c:	f89c 3000 	ldrb.w	r3, [ip]
    b580:	f003 0344 	and.w	r3, r3, #68	; 0x44
    b584:	2b44      	cmp	r3, #68	; 0x44
    b586:	d000      	beq.n	b58a <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    b588:	4770      	bx	lr
		conv->flag_zero = false;
    b58a:	f89c 3000 	ldrb.w	r3, [ip]
    b58e:	f36f 1386 	bfc	r3, #6, #1
    b592:	f88c 3000 	strb.w	r3, [ip]
    b596:	e7f7      	b.n	b588 <extract_flags+0xb4>

0000b598 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b59c:	b091      	sub	sp, #68	; 0x44
    b59e:	4606      	mov	r6, r0
    b5a0:	460d      	mov	r5, r1
    b5a2:	4691      	mov	r9, r2
    b5a4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b5a6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b5a8:	f899 0000 	ldrb.w	r0, [r9]
    b5ac:	2800      	cmp	r0, #0
    b5ae:	f000 82b9 	beq.w	bb24 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    b5b2:	2825      	cmp	r0, #37	; 0x25
    b5b4:	d008      	beq.n	b5c8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    b5b6:	f109 0901 	add.w	r9, r9, #1
    b5ba:	4629      	mov	r1, r5
    b5bc:	47b0      	blx	r6
    b5be:	2800      	cmp	r0, #0
    b5c0:	f2c0 82b1 	blt.w	bb26 <z_cbvprintf_impl+0x58e>
    b5c4:	3401      	adds	r4, #1
			continue;
    b5c6:	e7ef      	b.n	b5a8 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    b5c8:	2300      	movs	r3, #0
    b5ca:	9304      	str	r3, [sp, #16]
    b5cc:	9305      	str	r3, [sp, #20]
    b5ce:	9306      	str	r3, [sp, #24]
    b5d0:	9307      	str	r3, [sp, #28]
    b5d2:	9308      	str	r3, [sp, #32]
    b5d4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    b5d6:	4649      	mov	r1, r9
    b5d8:	a806      	add	r0, sp, #24
    b5da:	f007 f90f 	bl	127fc <extract_conversion>
    b5de:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    b5e0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b5e4:	f013 0f01 	tst.w	r3, #1
    b5e8:	f000 8097 	beq.w	b71a <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    b5ec:	9b03      	ldr	r3, [sp, #12]
    b5ee:	1d1a      	adds	r2, r3, #4
    b5f0:	9203      	str	r2, [sp, #12]
    b5f2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    b5f4:	2f00      	cmp	r7, #0
    b5f6:	f2c0 8088 	blt.w	b70a <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    b5fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b5fe:	f013 0f04 	tst.w	r3, #4
    b602:	f000 809c 	beq.w	b73e <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    b606:	9b03      	ldr	r3, [sp, #12]
    b608:	1d1a      	adds	r2, r3, #4
    b60a:	9203      	str	r2, [sp, #12]
    b60c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    b610:	f1ba 0f00 	cmp.w	sl, #0
    b614:	f2c0 808a 	blt.w	b72c <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    b618:	2300      	movs	r3, #0
    b61a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    b61c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    b61e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b622:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    b626:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b62a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    b62e:	2b01      	cmp	r3, #1
    b630:	f000 808e 	beq.w	b750 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    b634:	2b02      	cmp	r3, #2
    b636:	f000 80d3 	beq.w	b7e0 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    b63a:	2b04      	cmp	r3, #4
    b63c:	f000 8124 	beq.w	b888 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    b640:	2b03      	cmp	r3, #3
    b642:	f000 813b 	beq.w	b8bc <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    b646:	f89d 8018 	ldrb.w	r8, [sp, #24]
    b64a:	f018 0b03 	ands.w	fp, r8, #3
    b64e:	f040 813b 	bne.w	b8c8 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    b652:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b656:	3b25      	subs	r3, #37	; 0x25
    b658:	2b53      	cmp	r3, #83	; 0x53
    b65a:	f200 81ca 	bhi.w	b9f2 <z_cbvprintf_impl+0x45a>
    b65e:	e8df f013 	tbh	[pc, r3, lsl #1]
    b662:	0140      	.short	0x0140
    b664:	01c801c8 	.word	0x01c801c8
    b668:	01c801c8 	.word	0x01c801c8
    b66c:	01c801c8 	.word	0x01c801c8
    b670:	01c801c8 	.word	0x01c801c8
    b674:	01c801c8 	.word	0x01c801c8
    b678:	01c801c8 	.word	0x01c801c8
    b67c:	01c801c8 	.word	0x01c801c8
    b680:	01c801c8 	.word	0x01c801c8
    b684:	01c801c8 	.word	0x01c801c8
    b688:	01c801c8 	.word	0x01c801c8
    b68c:	01c801c8 	.word	0x01c801c8
    b690:	01c801c8 	.word	0x01c801c8
    b694:	01c801c8 	.word	0x01c801c8
    b698:	01c801c8 	.word	0x01c801c8
    b69c:	01c801c8 	.word	0x01c801c8
    b6a0:	01c801c8 	.word	0x01c801c8
    b6a4:	01c801c8 	.word	0x01c801c8
    b6a8:	01c801c8 	.word	0x01c801c8
    b6ac:	01c801c8 	.word	0x01c801c8
    b6b0:	01c801c8 	.word	0x01c801c8
    b6b4:	01c801c8 	.word	0x01c801c8
    b6b8:	01c801c8 	.word	0x01c801c8
    b6bc:	01c801c8 	.word	0x01c801c8
    b6c0:	01c801c8 	.word	0x01c801c8
    b6c4:	01c801c8 	.word	0x01c801c8
    b6c8:	01c80181 	.word	0x01c80181
    b6cc:	01c801c8 	.word	0x01c801c8
    b6d0:	01c801c8 	.word	0x01c801c8
    b6d4:	01c801c8 	.word	0x01c801c8
    b6d8:	01c801c8 	.word	0x01c801c8
    b6dc:	015e01c8 	.word	0x015e01c8
    b6e0:	01c80167 	.word	0x01c80167
    b6e4:	01c801c8 	.word	0x01c801c8
    b6e8:	016701c8 	.word	0x016701c8
    b6ec:	01c801c8 	.word	0x01c801c8
    b6f0:	01c801c8 	.word	0x01c801c8
    b6f4:	018101bd 	.word	0x018101bd
    b6f8:	01c801a1 	.word	0x01c801a1
    b6fc:	014d01c8 	.word	0x014d01c8
    b700:	018101c8 	.word	0x018101c8
    b704:	01c801c8 	.word	0x01c801c8
    b708:	0181      	.short	0x0181
				conv->flag_dash = true;
    b70a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b70e:	f043 0304 	orr.w	r3, r3, #4
    b712:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    b716:	427f      	negs	r7, r7
    b718:	e76f      	b.n	b5fa <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    b71a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    b71e:	2b00      	cmp	r3, #0
    b720:	db02      	blt.n	b728 <z_cbvprintf_impl+0x190>
		int width = -1;
    b722:	f04f 37ff 	mov.w	r7, #4294967295
    b726:	e768      	b.n	b5fa <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    b728:	9f07      	ldr	r7, [sp, #28]
    b72a:	e766      	b.n	b5fa <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    b72c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b730:	f36f 0341 	bfc	r3, #1, #1
    b734:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    b738:	f04f 3aff 	mov.w	sl, #4294967295
    b73c:	e76c      	b.n	b618 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    b73e:	f013 0f02 	tst.w	r3, #2
    b742:	d002      	beq.n	b74a <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    b744:	f8dd a020 	ldr.w	sl, [sp, #32]
    b748:	e766      	b.n	b618 <z_cbvprintf_impl+0x80>
		int precision = -1;
    b74a:	f04f 3aff 	mov.w	sl, #4294967295
    b74e:	e763      	b.n	b618 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    b750:	1ecb      	subs	r3, r1, #3
    b752:	2b04      	cmp	r3, #4
    b754:	d804      	bhi.n	b760 <z_cbvprintf_impl+0x1c8>
    b756:	e8df f003 	tbb	[pc, r3]
    b75a:	1d0b      	.short	0x1d0b
    b75c:	3529      	.short	0x3529
    b75e:	35          	.byte	0x35
    b75f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b760:	9b03      	ldr	r3, [sp, #12]
    b762:	1d1a      	adds	r2, r3, #4
    b764:	9203      	str	r2, [sp, #12]
    b766:	681b      	ldr	r3, [r3, #0]
    b768:	17da      	asrs	r2, r3, #31
    b76a:	9304      	str	r3, [sp, #16]
    b76c:	9205      	str	r2, [sp, #20]
				break;
    b76e:	e006      	b.n	b77e <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    b770:	9b03      	ldr	r3, [sp, #12]
    b772:	1d1a      	adds	r2, r3, #4
    b774:	9203      	str	r2, [sp, #12]
    b776:	681b      	ldr	r3, [r3, #0]
    b778:	17da      	asrs	r2, r3, #31
    b77a:	9304      	str	r3, [sp, #16]
    b77c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    b77e:	2901      	cmp	r1, #1
    b780:	d028      	beq.n	b7d4 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    b782:	2902      	cmp	r1, #2
    b784:	f47f af5f 	bne.w	b646 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    b788:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    b78c:	17da      	asrs	r2, r3, #31
    b78e:	9304      	str	r3, [sp, #16]
    b790:	9205      	str	r2, [sp, #20]
    b792:	e758      	b.n	b646 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    b794:	9b03      	ldr	r3, [sp, #12]
    b796:	3307      	adds	r3, #7
    b798:	f023 0307 	bic.w	r3, r3, #7
    b79c:	f103 0208 	add.w	r2, r3, #8
    b7a0:	9203      	str	r2, [sp, #12]
    b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b7a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b7aa:	e7e8      	b.n	b77e <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    b7ac:	9b03      	ldr	r3, [sp, #12]
    b7ae:	3307      	adds	r3, #7
    b7b0:	f023 0307 	bic.w	r3, r3, #7
    b7b4:	f103 0208 	add.w	r2, r3, #8
    b7b8:	9203      	str	r2, [sp, #12]
    b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b7be:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b7c2:	e7dc      	b.n	b77e <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b7c4:	9b03      	ldr	r3, [sp, #12]
    b7c6:	1d1a      	adds	r2, r3, #4
    b7c8:	9203      	str	r2, [sp, #12]
    b7ca:	681b      	ldr	r3, [r3, #0]
    b7cc:	17da      	asrs	r2, r3, #31
				value->sint =
    b7ce:	9304      	str	r3, [sp, #16]
    b7d0:	9205      	str	r2, [sp, #20]
				break;
    b7d2:	e7d4      	b.n	b77e <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    b7d4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    b7d8:	17da      	asrs	r2, r3, #31
    b7da:	9304      	str	r3, [sp, #16]
    b7dc:	9205      	str	r2, [sp, #20]
    b7de:	e732      	b.n	b646 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    b7e0:	1ecb      	subs	r3, r1, #3
    b7e2:	2b04      	cmp	r3, #4
    b7e4:	d804      	bhi.n	b7f0 <z_cbvprintf_impl+0x258>
    b7e6:	e8df f003 	tbb	[pc, r3]
    b7ea:	1f0b      	.short	0x1f0b
    b7ec:	4135      	.short	0x4135
    b7ee:	41          	.byte	0x41
    b7ef:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    b7f0:	9b03      	ldr	r3, [sp, #12]
    b7f2:	1d1a      	adds	r2, r3, #4
    b7f4:	9203      	str	r2, [sp, #12]
    b7f6:	681b      	ldr	r3, [r3, #0]
    b7f8:	9304      	str	r3, [sp, #16]
    b7fa:	2300      	movs	r3, #0
    b7fc:	9305      	str	r3, [sp, #20]
				break;
    b7fe:	e01e      	b.n	b83e <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    b800:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    b804:	2b63      	cmp	r3, #99	; 0x63
    b806:	d007      	beq.n	b818 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    b808:	9b03      	ldr	r3, [sp, #12]
    b80a:	1d1a      	adds	r2, r3, #4
    b80c:	9203      	str	r2, [sp, #12]
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	9304      	str	r3, [sp, #16]
    b812:	2300      	movs	r3, #0
    b814:	9305      	str	r3, [sp, #20]
    b816:	e012      	b.n	b83e <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    b818:	9b03      	ldr	r3, [sp, #12]
    b81a:	1d1a      	adds	r2, r3, #4
    b81c:	9203      	str	r2, [sp, #12]
    b81e:	681b      	ldr	r3, [r3, #0]
    b820:	9304      	str	r3, [sp, #16]
    b822:	2300      	movs	r3, #0
    b824:	9305      	str	r3, [sp, #20]
    b826:	e00a      	b.n	b83e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    b828:	9b03      	ldr	r3, [sp, #12]
    b82a:	3307      	adds	r3, #7
    b82c:	f023 0307 	bic.w	r3, r3, #7
    b830:	f103 0208 	add.w	r2, r3, #8
    b834:	9203      	str	r2, [sp, #12]
    b836:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    b83a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    b83e:	2901      	cmp	r1, #1
    b840:	d01c      	beq.n	b87c <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    b842:	2902      	cmp	r1, #2
    b844:	f47f aeff 	bne.w	b646 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    b848:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b84c:	9304      	str	r3, [sp, #16]
    b84e:	2300      	movs	r3, #0
    b850:	9305      	str	r3, [sp, #20]
    b852:	e6f8      	b.n	b646 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    b854:	9b03      	ldr	r3, [sp, #12]
    b856:	3307      	adds	r3, #7
    b858:	f023 0307 	bic.w	r3, r3, #7
    b85c:	f103 0208 	add.w	r2, r3, #8
    b860:	9203      	str	r2, [sp, #12]
    b862:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    b866:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b86a:	e7e8      	b.n	b83e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    b86c:	9b03      	ldr	r3, [sp, #12]
    b86e:	1d1a      	adds	r2, r3, #4
    b870:	9203      	str	r2, [sp, #12]
    b872:	681b      	ldr	r3, [r3, #0]
				value->uint =
    b874:	9304      	str	r3, [sp, #16]
    b876:	2300      	movs	r3, #0
    b878:	9305      	str	r3, [sp, #20]
				break;
    b87a:	e7e0      	b.n	b83e <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    b87c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b880:	9304      	str	r3, [sp, #16]
    b882:	2300      	movs	r3, #0
    b884:	9305      	str	r3, [sp, #20]
    b886:	e6de      	b.n	b646 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    b888:	2908      	cmp	r1, #8
    b88a:	d00b      	beq.n	b8a4 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    b88c:	9b03      	ldr	r3, [sp, #12]
    b88e:	3307      	adds	r3, #7
    b890:	f023 0307 	bic.w	r3, r3, #7
    b894:	f103 0208 	add.w	r2, r3, #8
    b898:	9203      	str	r2, [sp, #12]
    b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b89e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b8a2:	e6d0      	b.n	b646 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    b8a4:	9b03      	ldr	r3, [sp, #12]
    b8a6:	3307      	adds	r3, #7
    b8a8:	f023 0307 	bic.w	r3, r3, #7
    b8ac:	f103 0208 	add.w	r2, r3, #8
    b8b0:	9203      	str	r2, [sp, #12]
    b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b8b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b8ba:	e6c4      	b.n	b646 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    b8bc:	9b03      	ldr	r3, [sp, #12]
    b8be:	1d1a      	adds	r2, r3, #4
    b8c0:	9203      	str	r2, [sp, #12]
    b8c2:	681b      	ldr	r3, [r3, #0]
    b8c4:	9304      	str	r3, [sp, #16]
    b8c6:	e6be      	b.n	b646 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    b8c8:	9f02      	ldr	r7, [sp, #8]
    b8ca:	463b      	mov	r3, r7
    b8cc:	464a      	mov	r2, r9
    b8ce:	4629      	mov	r1, r5
    b8d0:	4630      	mov	r0, r6
    b8d2:	f007 f839 	bl	12948 <outs>
    b8d6:	2800      	cmp	r0, #0
    b8d8:	f2c0 8125 	blt.w	bb26 <z_cbvprintf_impl+0x58e>
    b8dc:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    b8de:	46b9      	mov	r9, r7
			continue;
    b8e0:	e662      	b.n	b5a8 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    b8e2:	4629      	mov	r1, r5
    b8e4:	2025      	movs	r0, #37	; 0x25
    b8e6:	47b0      	blx	r6
    b8e8:	2800      	cmp	r0, #0
    b8ea:	f2c0 811c 	blt.w	bb26 <z_cbvprintf_impl+0x58e>
    b8ee:	3401      	adds	r4, #1
		char sign = 0;
    b8f0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    b8f2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    b8f6:	f04f 0900 	mov.w	r9, #0
			break;
    b8fa:	e07f      	b.n	b9fc <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    b8fc:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    b900:	f1ba 0f00 	cmp.w	sl, #0
    b904:	db07      	blt.n	b916 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    b906:	4651      	mov	r1, sl
    b908:	4648      	mov	r0, r9
    b90a:	f007 f962 	bl	12bd2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    b90e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    b912:	46d8      	mov	r8, fp
			precision = -1;

			break;
    b914:	e072      	b.n	b9fc <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    b916:	4648      	mov	r0, r9
    b918:	f007 f952 	bl	12bc0 <strlen>
    b91c:	e7f7      	b.n	b90e <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b91e:	9b04      	ldr	r3, [sp, #16]
    b920:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    b924:	46d8      	mov	r8, fp
			bpe = buf + 1;
    b926:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    b92a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    b92e:	e065      	b.n	b9fc <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    b930:	f018 0f08 	tst.w	r8, #8
    b934:	d105      	bne.n	b942 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    b936:	f018 0810 	ands.w	r8, r8, #16
    b93a:	d004      	beq.n	b946 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    b93c:	f04f 0820 	mov.w	r8, #32
    b940:	e001      	b.n	b946 <z_cbvprintf_impl+0x3ae>
				sign = '+';
    b942:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    b946:	9a04      	ldr	r2, [sp, #16]
    b948:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    b94a:	2b00      	cmp	r3, #0
    b94c:	db02      	blt.n	b954 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    b94e:	9204      	str	r2, [sp, #16]
    b950:	9305      	str	r3, [sp, #20]
    b952:	e008      	b.n	b966 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    b954:	4252      	negs	r2, r2
    b956:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b95a:	9204      	str	r2, [sp, #16]
    b95c:	9305      	str	r3, [sp, #20]
				sign = '-';
    b95e:	f04f 082d 	mov.w	r8, #45	; 0x2d
    b962:	e000      	b.n	b966 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    b964:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    b966:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b96a:	9300      	str	r3, [sp, #0]
    b96c:	ab0a      	add	r3, sp, #40	; 0x28
    b96e:	aa06      	add	r2, sp, #24
    b970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b974:	f006 ff79 	bl	1286a <encode_uint>
    b978:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    b97a:	f1ba 0f00 	cmp.w	sl, #0
    b97e:	db6c      	blt.n	ba5a <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    b980:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b984:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    b988:	f89d 2018 	ldrb.w	r2, [sp, #24]
    b98c:	f36f 1286 	bfc	r2, #6, #1
    b990:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    b994:	459a      	cmp	sl, r3
    b996:	d963      	bls.n	ba60 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    b998:	ebaa 0303 	sub.w	r3, sl, r3
    b99c:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    b99e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b9a2:	e02b      	b.n	b9fc <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    b9a4:	9804      	ldr	r0, [sp, #16]
    b9a6:	b928      	cbnz	r0, b9b4 <z_cbvprintf_impl+0x41c>
		char sign = 0;
    b9a8:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    b9aa:	f8df a180 	ldr.w	sl, [pc, #384]	; bb2c <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    b9ae:	f1aa 0905 	sub.w	r9, sl, #5
    b9b2:	e023      	b.n	b9fc <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b9b4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b9b8:	9300      	str	r3, [sp, #0]
    b9ba:	ab0a      	add	r3, sp, #40	; 0x28
    b9bc:	aa06      	add	r2, sp, #24
    b9be:	2100      	movs	r1, #0
    b9c0:	f006 ff53 	bl	1286a <encode_uint>
    b9c4:	4681      	mov	r9, r0
				conv->altform_0c = true;
    b9c6:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b9ca:	f043 0310 	orr.w	r3, r3, #16
    b9ce:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    b9d2:	2378      	movs	r3, #120	; 0x78
    b9d4:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    b9d8:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    b9da:	e7ce      	b.n	b97a <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    b9dc:	4622      	mov	r2, r4
    b9de:	9904      	ldr	r1, [sp, #16]
    b9e0:	a806      	add	r0, sp, #24
    b9e2:	f006 ff92 	bl	1290a <store_count>
		char sign = 0;
    b9e6:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    b9e8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    b9ec:	f04f 0900 	mov.w	r9, #0
			}

			break;
    b9f0:	e004      	b.n	b9fc <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    b9f2:	46d8      	mov	r8, fp
    b9f4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b9f8:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    b9fc:	f1b9 0f00 	cmp.w	r9, #0
    ba00:	f000 808d 	beq.w	bb1e <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    ba04:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    ba08:	f1b8 0f00 	cmp.w	r8, #0
    ba0c:	d000      	beq.n	ba10 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    ba0e:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    ba10:	f89d 201a 	ldrb.w	r2, [sp, #26]
    ba14:	f012 0f10 	tst.w	r2, #16
    ba18:	d025      	beq.n	ba66 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    ba1a:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    ba1c:	9907      	ldr	r1, [sp, #28]
    ba1e:	440b      	add	r3, r1
		if (conv->pad_fp) {
    ba20:	f012 0f40 	tst.w	r2, #64	; 0x40
    ba24:	d001      	beq.n	ba2a <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    ba26:	9a08      	ldr	r2, [sp, #32]
    ba28:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    ba2a:	2f00      	cmp	r7, #0
    ba2c:	dd31      	ble.n	ba92 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    ba2e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    ba30:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ba34:	f013 0f04 	tst.w	r3, #4
    ba38:	d12b      	bne.n	ba92 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    ba3a:	f013 0f40 	tst.w	r3, #64	; 0x40
    ba3e:	d017      	beq.n	ba70 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    ba40:	f1b8 0f00 	cmp.w	r8, #0
    ba44:	d017      	beq.n	ba76 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    ba46:	4629      	mov	r1, r5
    ba48:	4640      	mov	r0, r8
    ba4a:	47b0      	blx	r6
    ba4c:	2800      	cmp	r0, #0
    ba4e:	db6a      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    ba50:	3401      	adds	r4, #1
						sign = 0;
    ba52:	46d8      	mov	r8, fp
					}
					pad = '0';
    ba54:	f04f 0b30 	mov.w	fp, #48	; 0x30
    ba58:	e00f      	b.n	ba7a <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    ba5a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    ba5e:	e7cd      	b.n	b9fc <z_cbvprintf_impl+0x464>
    ba60:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    ba64:	e7ca      	b.n	b9fc <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    ba66:	f012 0f08 	tst.w	r2, #8
    ba6a:	d0d7      	beq.n	ba1c <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    ba6c:	3301      	adds	r3, #1
    ba6e:	e7d5      	b.n	ba1c <z_cbvprintf_impl+0x484>
				char pad = ' ';
    ba70:	f04f 0b20 	mov.w	fp, #32
    ba74:	e001      	b.n	ba7a <z_cbvprintf_impl+0x4e2>
					pad = '0';
    ba76:	f04f 0b30 	mov.w	fp, #48	; 0x30
    ba7a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    ba7c:	1e5f      	subs	r7, r3, #1
    ba7e:	2b00      	cmp	r3, #0
    ba80:	dd07      	ble.n	ba92 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    ba82:	4629      	mov	r1, r5
    ba84:	4658      	mov	r0, fp
    ba86:	47b0      	blx	r6
    ba88:	2800      	cmp	r0, #0
    ba8a:	db4c      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    ba8c:	3401      	adds	r4, #1
				while (width-- > 0) {
    ba8e:	463b      	mov	r3, r7
    ba90:	e7f4      	b.n	ba7c <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    ba92:	f1b8 0f00 	cmp.w	r8, #0
    ba96:	d005      	beq.n	baa4 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    ba98:	4629      	mov	r1, r5
    ba9a:	4640      	mov	r0, r8
    ba9c:	47b0      	blx	r6
    ba9e:	2800      	cmp	r0, #0
    baa0:	db41      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    baa2:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    baa4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    baa8:	f3c3 1200 	ubfx	r2, r3, #4, #1
    baac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    bab0:	431a      	orrs	r2, r3
    bab2:	d005      	beq.n	bac0 <z_cbvprintf_impl+0x528>
				OUTC('0');
    bab4:	4629      	mov	r1, r5
    bab6:	2030      	movs	r0, #48	; 0x30
    bab8:	47b0      	blx	r6
    baba:	2800      	cmp	r0, #0
    babc:	db33      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    babe:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    bac0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    bac4:	f013 0f10 	tst.w	r3, #16
    bac8:	d006      	beq.n	bad8 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    baca:	4629      	mov	r1, r5
    bacc:	f89d 001b 	ldrb.w	r0, [sp, #27]
    bad0:	47b0      	blx	r6
    bad2:	2800      	cmp	r0, #0
    bad4:	db27      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    bad6:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    bad8:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    bada:	f103 38ff 	add.w	r8, r3, #4294967295
    bade:	2b00      	cmp	r3, #0
    bae0:	dd07      	ble.n	baf2 <z_cbvprintf_impl+0x55a>
				OUTC('0');
    bae2:	4629      	mov	r1, r5
    bae4:	2030      	movs	r0, #48	; 0x30
    bae6:	47b0      	blx	r6
    bae8:	2800      	cmp	r0, #0
    baea:	db1c      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    baec:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    baee:	4643      	mov	r3, r8
    baf0:	e7f3      	b.n	bada <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    baf2:	4653      	mov	r3, sl
    baf4:	464a      	mov	r2, r9
    baf6:	4629      	mov	r1, r5
    baf8:	4630      	mov	r0, r6
    bafa:	f006 ff25 	bl	12948 <outs>
    bafe:	2800      	cmp	r0, #0
    bb00:	db11      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    bb02:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    bb04:	2f00      	cmp	r7, #0
    bb06:	dd07      	ble.n	bb18 <z_cbvprintf_impl+0x580>
			OUTC(' ');
    bb08:	4629      	mov	r1, r5
    bb0a:	2020      	movs	r0, #32
    bb0c:	47b0      	blx	r6
    bb0e:	2800      	cmp	r0, #0
    bb10:	db09      	blt.n	bb26 <z_cbvprintf_impl+0x58e>
    bb12:	3401      	adds	r4, #1
			--width;
    bb14:	3f01      	subs	r7, #1
    bb16:	e7f5      	b.n	bb04 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    bb18:	f8dd 9008 	ldr.w	r9, [sp, #8]
    bb1c:	e544      	b.n	b5a8 <z_cbvprintf_impl+0x10>
    bb1e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    bb22:	e541      	b.n	b5a8 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    bb24:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    bb26:	b011      	add	sp, #68	; 0x44
    bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb2c:	000163ad 	.word	0x000163ad

0000bb30 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bb30:	f003 bcc6 	b.w	f4c0 <SystemInit>

0000bb34 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    bb34:	b570      	push	{r4, r5, r6, lr}
    bb36:	4605      	mov	r5, r0
    bb38:	f04f 0340 	mov.w	r3, #64	; 0x40
    bb3c:	f3ef 8611 	mrs	r6, BASEPRI
    bb40:	f383 8812 	msr	BASEPRI_MAX, r3
    bb44:	f3bf 8f6f 	isb	sy
    bb48:	4b0e      	ldr	r3, [pc, #56]	; (bb84 <pm_state_notify+0x50>)
    bb4a:	681c      	ldr	r4, [r3, #0]
    bb4c:	e00d      	b.n	bb6a <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    bb4e:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    bb50:	b13a      	cbz	r2, bb62 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    bb52:	4b0d      	ldr	r3, [pc, #52]	; (bb88 <pm_state_notify+0x54>)
    bb54:	7c1b      	ldrb	r3, [r3, #16]
    bb56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bb5a:	490c      	ldr	r1, [pc, #48]	; (bb8c <pm_state_notify+0x58>)
    bb5c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    bb60:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    bb62:	4623      	mov	r3, r4
	return node->next;
    bb64:	6824      	ldr	r4, [r4, #0]
    bb66:	b104      	cbz	r4, bb6a <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    bb68:	b123      	cbz	r3, bb74 <pm_state_notify+0x40>
    bb6a:	b12c      	cbz	r4, bb78 <pm_state_notify+0x44>
		if (entering_state) {
    bb6c:	2d00      	cmp	r5, #0
    bb6e:	d0ee      	beq.n	bb4e <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    bb70:	6862      	ldr	r2, [r4, #4]
    bb72:	e7ed      	b.n	bb50 <pm_state_notify+0x1c>
    bb74:	461c      	mov	r4, r3
    bb76:	e7f8      	b.n	bb6a <pm_state_notify+0x36>
	__asm__ volatile(
    bb78:	f386 8811 	msr	BASEPRI, r6
    bb7c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    bb80:	bd70      	pop	{r4, r5, r6, pc}
    bb82:	bf00      	nop
    bb84:	20001a74 	.word	0x20001a74
    bb88:	20002128 	.word	0x20002128
    bb8c:	20001a68 	.word	0x20001a68

0000bb90 <pm_exit_pos_ops>:
{
    bb90:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    bb92:	4b06      	ldr	r3, [pc, #24]	; (bbac <pm_exit_pos_ops+0x1c>)
    bb94:	b123      	cbz	r3, bba0 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    bb96:	7841      	ldrb	r1, [r0, #1]
    bb98:	7800      	ldrb	r0, [r0, #0]
    bb9a:	f007 f89d 	bl	12cd8 <pm_state_exit_post_ops>
}
    bb9e:	bd08      	pop	{r3, pc}
    bba0:	2300      	movs	r3, #0
    bba2:	f383 8811 	msr	BASEPRI, r3
    bba6:	f3bf 8f6f 	isb	sy
    bbaa:	e7f8      	b.n	bb9e <pm_exit_pos_ops+0xe>
    bbac:	00012cd9 	.word	0x00012cd9

0000bbb0 <pm_system_resume>:

void pm_system_resume(void)
{
    bbb0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    bbb2:	4b0e      	ldr	r3, [pc, #56]	; (bbec <pm_system_resume+0x3c>)
    bbb4:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    bbb6:	4621      	mov	r1, r4
    bbb8:	480d      	ldr	r0, [pc, #52]	; (bbf0 <pm_system_resume+0x40>)
    bbba:	f006 feee 	bl	1299a <atomic_test_and_clear_bit>
    bbbe:	b900      	cbnz	r0, bbc2 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    bbc0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    bbc2:	0065      	lsls	r5, r4, #1
    bbc4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    bbc8:	4e0a      	ldr	r6, [pc, #40]	; (bbf4 <pm_system_resume+0x44>)
    bbca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    bbce:	f7ff ffdf 	bl	bb90 <pm_exit_pos_ops>
		pm_state_notify(false);
    bbd2:	2000      	movs	r0, #0
    bbd4:	f7ff ffae 	bl	bb34 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    bbd8:	192b      	adds	r3, r5, r4
    bbda:	0099      	lsls	r1, r3, #2
    bbdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    bbe0:	2200      	movs	r2, #0
    bbe2:	5072      	str	r2, [r6, r1]
    bbe4:	605a      	str	r2, [r3, #4]
    bbe6:	609a      	str	r2, [r3, #8]
}
    bbe8:	e7ea      	b.n	bbc0 <pm_system_resume+0x10>
    bbea:	bf00      	nop
    bbec:	20002128 	.word	0x20002128
    bbf0:	20001a7c 	.word	0x20001a7c
    bbf4:	20001a68 	.word	0x20001a68

0000bbf8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbfa:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    bbfc:	4b38      	ldr	r3, [pc, #224]	; (bce0 <pm_system_suspend+0xe8>)
    bbfe:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    bc00:	f04f 0340 	mov.w	r3, #64	; 0x40
    bc04:	f3ef 8611 	mrs	r6, BASEPRI
    bc08:	f383 8812 	msr	BASEPRI_MAX, r3
    bc0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    bc10:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    bc14:	4b33      	ldr	r3, [pc, #204]	; (bce4 <pm_system_suspend+0xec>)
    bc16:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d039      	beq.n	bc92 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    bc1e:	4b32      	ldr	r3, [pc, #200]	; (bce8 <pm_system_suspend+0xf0>)
    bc20:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    bc24:	4f2f      	ldr	r7, [pc, #188]	; (bce4 <pm_system_suspend+0xec>)
    bc26:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    bc2a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    bc2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    bc32:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    bc36:	2300      	movs	r3, #0
    bc38:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    bc3c:	f386 8811 	msr	BASEPRI, r6
    bc40:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    bc44:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    bc48:	4a27      	ldr	r2, [pc, #156]	; (bce8 <pm_system_suspend+0xf0>)
    bc4a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d044      	beq.n	bcdc <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    bc52:	f1b5 3fff 	cmp.w	r5, #4294967295
    bc56:	d12b      	bne.n	bcb0 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    bc58:	f005 f8f0 	bl	10e3c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    bc5c:	2001      	movs	r0, #1
    bc5e:	f7ff ff69 	bl	bb34 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    bc62:	4621      	mov	r1, r4
    bc64:	4821      	ldr	r0, [pc, #132]	; (bcec <pm_system_suspend+0xf4>)
    bc66:	f006 feb4 	bl	129d2 <atomic_set_bit>
	if (pm_state_set != NULL) {
    bc6a:	4b21      	ldr	r3, [pc, #132]	; (bcf0 <pm_system_suspend+0xf8>)
    bc6c:	b15b      	cbz	r3, bc86 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    bc6e:	4a1e      	ldr	r2, [pc, #120]	; (bce8 <pm_system_suspend+0xf0>)
    bc70:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    bc74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bc78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bc7c:	7859      	ldrb	r1, [r3, #1]
    bc7e:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    bc82:	f007 f821 	bl	12cc8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    bc86:	f7ff ff93 	bl	bbb0 <pm_system_resume>
	k_sched_unlock();
    bc8a:	f005 fac3 	bl	11214 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    bc8e:	2001      	movs	r0, #1
}
    bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    bc92:	4601      	mov	r1, r0
    bc94:	4620      	mov	r0, r4
    bc96:	f000 f831 	bl	bcfc <pm_policy_next_state>
		if (info != NULL) {
    bc9a:	2800      	cmp	r0, #0
    bc9c:	d0ce      	beq.n	bc3c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    bc9e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    bca2:	4b11      	ldr	r3, [pc, #68]	; (bce8 <pm_system_suspend+0xf0>)
    bca4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bca8:	c807      	ldmia	r0, {r0, r1, r2}
    bcaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    bcae:	e7c5      	b.n	bc3c <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    bcb0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    bcb4:	4b0c      	ldr	r3, [pc, #48]	; (bce8 <pm_system_suspend+0xf0>)
    bcb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bcba:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    bcbc:	0c41      	lsrs	r1, r0, #17
    bcbe:	03c0      	lsls	r0, r0, #15
    bcc0:	4b0c      	ldr	r3, [pc, #48]	; (bcf4 <pm_system_suspend+0xfc>)
    bcc2:	18c0      	adds	r0, r0, r3
    bcc4:	4a0c      	ldr	r2, [pc, #48]	; (bcf8 <pm_system_suspend+0x100>)
    bcc6:	f04f 0300 	mov.w	r3, #0
    bcca:	f141 0100 	adc.w	r1, r1, #0
    bcce:	f7f4 fdfb 	bl	8c8 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    bcd2:	2101      	movs	r1, #1
    bcd4:	1a28      	subs	r0, r5, r0
    bcd6:	f003 f921 	bl	ef1c <sys_clock_set_timeout>
    bcda:	e7bd      	b.n	bc58 <pm_system_suspend+0x60>
		return false;
    bcdc:	2000      	movs	r0, #0
    bcde:	e7d7      	b.n	bc90 <pm_system_suspend+0x98>
    bce0:	20002128 	.word	0x20002128
    bce4:	20001a5c 	.word	0x20001a5c
    bce8:	20001a68 	.word	0x20001a68
    bcec:	20001a7c 	.word	0x20001a7c
    bcf0:	00012cc9 	.word	0x00012cc9
    bcf4:	000f423f 	.word	0x000f423f
    bcf8:	000f4240 	.word	0x000f4240

0000bcfc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd00:	b082      	sub	sp, #8
    bd02:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    bd04:	a901      	add	r1, sp, #4
    bd06:	f000 f845 	bl	bd94 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bd0a:	1e44      	subs	r4, r0, #1
    bd0c:	b224      	sxth	r4, r4
    bd0e:	e007      	b.n	bd20 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    bd10:	f1b6 3fff 	cmp.w	r6, #4294967295
    bd14:	d033      	beq.n	bd7e <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    bd16:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    bd18:	45b0      	cmp	r8, r6
    bd1a:	d930      	bls.n	bd7e <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bd1c:	3c01      	subs	r4, #1
    bd1e:	b224      	sxth	r4, r4
    bd20:	2c00      	cmp	r4, #0
    bd22:	db2b      	blt.n	bd7c <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    bd24:	9b01      	ldr	r3, [sp, #4]
    bd26:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    bd2a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    bd2e:	7869      	ldrb	r1, [r5, #1]
    bd30:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    bd34:	f006 fe60 	bl	129f8 <pm_policy_state_lock_is_active>
    bd38:	2800      	cmp	r0, #0
    bd3a:	d1ef      	bne.n	bd1c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    bd3c:	6868      	ldr	r0, [r5, #4]
    bd3e:	0c41      	lsrs	r1, r0, #17
    bd40:	03c0      	lsls	r0, r0, #15
    bd42:	4f11      	ldr	r7, [pc, #68]	; (bd88 <pm_policy_next_state+0x8c>)
    bd44:	19c0      	adds	r0, r0, r7
    bd46:	4a11      	ldr	r2, [pc, #68]	; (bd8c <pm_policy_next_state+0x90>)
    bd48:	f04f 0300 	mov.w	r3, #0
    bd4c:	f141 0100 	adc.w	r1, r1, #0
    bd50:	f7f4 fdba 	bl	8c8 <__aeabi_uldivmod>
    bd54:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    bd56:	68ab      	ldr	r3, [r5, #8]
    bd58:	0c59      	lsrs	r1, r3, #17
    bd5a:	03db      	lsls	r3, r3, #15
    bd5c:	19d8      	adds	r0, r3, r7
    bd5e:	4a0b      	ldr	r2, [pc, #44]	; (bd8c <pm_policy_next_state+0x90>)
    bd60:	f04f 0300 	mov.w	r3, #0
    bd64:	f141 0100 	adc.w	r1, r1, #0
    bd68:	f7f4 fdae 	bl	8c8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bd6c:	4b08      	ldr	r3, [pc, #32]	; (bd90 <pm_policy_next_state+0x94>)
    bd6e:	681b      	ldr	r3, [r3, #0]
    bd70:	f1b3 3fff 	cmp.w	r3, #4294967295
    bd74:	d0cc      	beq.n	bd10 <pm_policy_next_state+0x14>
    bd76:	4283      	cmp	r3, r0
    bd78:	d8ca      	bhi.n	bd10 <pm_policy_next_state+0x14>
    bd7a:	e7cf      	b.n	bd1c <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    bd7c:	2500      	movs	r5, #0
}
    bd7e:	4628      	mov	r0, r5
    bd80:	b002      	add	sp, #8
    bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd86:	bf00      	nop
    bd88:	000f423f 	.word	0x000f423f
    bd8c:	000f4240 	.word	0x000f4240
    bd90:	20000388 	.word	0x20000388

0000bd94 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    bd94:	b908      	cbnz	r0, bd9a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    bd96:	4b02      	ldr	r3, [pc, #8]	; (bda0 <pm_state_cpu_get_all+0xc>)
    bd98:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    bd9a:	2000      	movs	r0, #0
    bd9c:	4770      	bx	lr
    bd9e:	bf00      	nop
    bda0:	000163b4 	.word	0x000163b4

0000bda4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    bda4:	4901      	ldr	r1, [pc, #4]	; (bdac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    bda6:	2210      	movs	r2, #16
	str	r2, [r1]
    bda8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    bdaa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    bdac:	e000ed10 	.word	0xe000ed10

0000bdb0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    bdb0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    bdb2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    bdb4:	f380 8811 	msr	BASEPRI, r0
	isb
    bdb8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    bdbc:	f3bf 8f4f 	dsb	sy
    bdc0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    bdc2:	b662      	cpsie	i
	isb
    bdc4:	f3bf 8f6f 	isb	sy

	bx	lr
    bdc8:	4770      	bx	lr
    bdca:	bf00      	nop

0000bdcc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    bdcc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    bdce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    bdd0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    bdd4:	f3bf 8f4f 	dsb	sy
    bdd8:	bf20      	wfe

	msr	BASEPRI, r0
    bdda:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    bdde:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    bde0:	4770      	bx	lr
    bde2:	bf00      	nop

0000bde4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bde4:	2800      	cmp	r0, #0
    bde6:	db07      	blt.n	bdf8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bde8:	f000 021f 	and.w	r2, r0, #31
    bdec:	0940      	lsrs	r0, r0, #5
    bdee:	2301      	movs	r3, #1
    bdf0:	4093      	lsls	r3, r2
    bdf2:	4a02      	ldr	r2, [pc, #8]	; (bdfc <__NVIC_EnableIRQ+0x18>)
    bdf4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    bdf8:	4770      	bx	lr
    bdfa:	bf00      	nop
    bdfc:	e000e100 	.word	0xe000e100

0000be00 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    be00:	2800      	cmp	r0, #0
    be02:	db0c      	blt.n	be1e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    be04:	f000 021f 	and.w	r2, r0, #31
    be08:	0940      	lsrs	r0, r0, #5
    be0a:	2301      	movs	r3, #1
    be0c:	4093      	lsls	r3, r2
    be0e:	3020      	adds	r0, #32
    be10:	4a03      	ldr	r2, [pc, #12]	; (be20 <__NVIC_DisableIRQ+0x20>)
    be12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    be16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    be1a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    be1e:	4770      	bx	lr
    be20:	e000e100 	.word	0xe000e100

0000be24 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    be24:	2800      	cmp	r0, #0
    be26:	db08      	blt.n	be3a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    be28:	0149      	lsls	r1, r1, #5
    be2a:	b2c9      	uxtb	r1, r1
    be2c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    be30:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    be34:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    be38:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    be3a:	f000 000f 	and.w	r0, r0, #15
    be3e:	0149      	lsls	r1, r1, #5
    be40:	b2c9      	uxtb	r1, r1
    be42:	4b01      	ldr	r3, [pc, #4]	; (be48 <__NVIC_SetPriority+0x24>)
    be44:	5419      	strb	r1, [r3, r0]
  }
}
    be46:	4770      	bx	lr
    be48:	e000ed14 	.word	0xe000ed14

0000be4c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    be4c:	0942      	lsrs	r2, r0, #5
    be4e:	4b05      	ldr	r3, [pc, #20]	; (be64 <arch_irq_is_enabled+0x18>)
    be50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    be54:	f000 001f 	and.w	r0, r0, #31
    be58:	2301      	movs	r3, #1
    be5a:	fa03 f000 	lsl.w	r0, r3, r0
}
    be5e:	4010      	ands	r0, r2
    be60:	4770      	bx	lr
    be62:	bf00      	nop
    be64:	e000e100 	.word	0xe000e100

0000be68 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    be68:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    be6a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    be6c:	4b05      	ldr	r3, [pc, #20]	; (be84 <_arch_isr_direct_pm+0x1c>)
    be6e:	695b      	ldr	r3, [r3, #20]
    be70:	b90b      	cbnz	r3, be76 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    be72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    be74:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    be76:	4b03      	ldr	r3, [pc, #12]	; (be84 <_arch_isr_direct_pm+0x1c>)
    be78:	2200      	movs	r2, #0
    be7a:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    be7c:	f009 f961 	bl	15142 <z_pm_save_idle_exit>
    be80:	e7f7      	b.n	be72 <_arch_isr_direct_pm+0xa>
    be82:	bf00      	nop
    be84:	20002128 	.word	0x20002128

0000be88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    be88:	bf30      	wfi
    b z_SysNmiOnReset
    be8a:	f7ff bffd 	b.w	be88 <z_SysNmiOnReset>
    be8e:	bf00      	nop

0000be90 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    be90:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    be92:	4b0b      	ldr	r3, [pc, #44]	; (bec0 <z_arm_prep_c+0x30>)
    be94:	4a0b      	ldr	r2, [pc, #44]	; (bec4 <z_arm_prep_c+0x34>)
    be96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    be9a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    be9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bea0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    bea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    bea8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    beac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    beb0:	f004 fade 	bl	10470 <z_bss_zero>
	z_data_copy();
    beb4:	f005 fb16 	bl	114e4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    beb8:	f000 fa80 	bl	c3bc <z_arm_interrupt_init>
	z_cstart();
    bebc:	f004 fb36 	bl	1052c <z_cstart>
    bec0:	e000ed00 	.word	0xe000ed00
    bec4:	00000000 	.word	0x00000000

0000bec8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    bec8:	4a0a      	ldr	r2, [pc, #40]	; (bef4 <arch_swap+0x2c>)
    beca:	6893      	ldr	r3, [r2, #8]
    becc:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    bed0:	4909      	ldr	r1, [pc, #36]	; (bef8 <arch_swap+0x30>)
    bed2:	6809      	ldr	r1, [r1, #0]
    bed4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bed8:	4908      	ldr	r1, [pc, #32]	; (befc <arch_swap+0x34>)
    beda:	684b      	ldr	r3, [r1, #4]
    bedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    bee0:	604b      	str	r3, [r1, #4]
    bee2:	2300      	movs	r3, #0
    bee4:	f383 8811 	msr	BASEPRI, r3
    bee8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    beec:	6893      	ldr	r3, [r2, #8]
}
    beee:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    bef2:	4770      	bx	lr
    bef4:	20002128 	.word	0x20002128
    bef8:	0001686c 	.word	0x0001686c
    befc:	e000ed00 	.word	0xe000ed00

0000bf00 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    bf00:	4913      	ldr	r1, [pc, #76]	; (bf50 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    bf02:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    bf04:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    bf08:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    bf0a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    bf0e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bf12:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    bf14:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    bf18:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    bf1c:	4f0d      	ldr	r7, [pc, #52]	; (bf54 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    bf1e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    bf22:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    bf24:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    bf26:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    bf28:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    bf2c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    bf2e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    bf32:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    bf36:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    bf38:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    bf3a:	f000 faef 	bl	c51c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    bf3e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    bf42:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    bf46:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    bf4a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    bf4e:	4770      	bx	lr
    ldr r1, =_kernel
    bf50:	20002128 	.word	0x20002128
    ldr v4, =_SCS_ICSR
    bf54:	e000ed04 	.word	0xe000ed04

0000bf58 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    bf58:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    bf5c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    bf5e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    bf62:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    bf66:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    bf68:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    bf6c:	2902      	cmp	r1, #2
    beq _oops
    bf6e:	d0ff      	beq.n	bf70 <_oops>

0000bf70 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    bf70:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    bf72:	f006 fd47 	bl	12a04 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    bf76:	bd01      	pop	{r0, pc}

0000bf78 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    bf78:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    bf7a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    bf7e:	490e      	ldr	r1, [pc, #56]	; (bfb8 <arch_new_thread+0x40>)
    bf80:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    bf84:	f021 0101 	bic.w	r1, r1, #1
    bf88:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    bf8c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    bf90:	9b01      	ldr	r3, [sp, #4]
    bf92:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    bf96:	9b02      	ldr	r3, [sp, #8]
    bf98:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    bf9c:	9b03      	ldr	r3, [sp, #12]
    bf9e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    bfa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    bfa6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    bfaa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    bfac:	2300      	movs	r3, #0
    bfae:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    bfb2:	bc10      	pop	{r4}
    bfb4:	4770      	bx	lr
    bfb6:	bf00      	nop
    bfb8:	00011dd9 	.word	0x00011dd9

0000bfbc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    bfbc:	4b10      	ldr	r3, [pc, #64]	; (c000 <z_check_thread_stack_fail+0x44>)
    bfbe:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    bfc0:	b1bb      	cbz	r3, bff2 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    bfc2:	f110 0f16 	cmn.w	r0, #22
    bfc6:	d00b      	beq.n	bfe0 <z_check_thread_stack_fail+0x24>
    bfc8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    bfcc:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    bfd0:	4584      	cmp	ip, r0
    bfd2:	d810      	bhi.n	bff6 <z_check_thread_stack_fail+0x3a>
    bfd4:	4282      	cmp	r2, r0
    bfd6:	d910      	bls.n	bffa <z_check_thread_stack_fail+0x3e>
    bfd8:	428a      	cmp	r2, r1
    bfda:	d807      	bhi.n	bfec <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    bfdc:	2000      	movs	r0, #0
    bfde:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    bfe0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    bfe4:	428a      	cmp	r2, r1
    bfe6:	d801      	bhi.n	bfec <z_check_thread_stack_fail+0x30>
	return 0;
    bfe8:	2000      	movs	r0, #0
}
    bfea:	4770      	bx	lr
		return thread->stack_info.start;
    bfec:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    bff0:	4770      	bx	lr
		return 0;
    bff2:	2000      	movs	r0, #0
    bff4:	4770      	bx	lr
	return 0;
    bff6:	2000      	movs	r0, #0
    bff8:	4770      	bx	lr
    bffa:	2000      	movs	r0, #0
    bffc:	4770      	bx	lr
    bffe:	bf00      	nop
    c000:	20002128 	.word	0x20002128

0000c004 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    c004:	b508      	push	{r3, lr}
    c006:	460d      	mov	r5, r1
    c008:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c00a:	4b08      	ldr	r3, [pc, #32]	; (c02c <arch_switch_to_main_thread+0x28>)
    c00c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    c00e:	f000 fa85 	bl	c51c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c012:	4620      	mov	r0, r4
    c014:	f385 8809 	msr	PSP, r5
    c018:	2100      	movs	r1, #0
    c01a:	b663      	cpsie	if
    c01c:	f381 8811 	msr	BASEPRI, r1
    c020:	f3bf 8f6f 	isb	sy
    c024:	2200      	movs	r2, #0
    c026:	2300      	movs	r3, #0
    c028:	f005 fed6 	bl	11dd8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c02c:	20002128 	.word	0x20002128

0000c030 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c030:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c032:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c034:	4a0b      	ldr	r2, [pc, #44]	; (c064 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c036:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    c038:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    c03a:	bf1e      	ittt	ne
	movne	r1, #0
    c03c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c03e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    c040:	f009 f87f 	blne	15142 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c044:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    c046:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    c04a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c04e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    c052:	4905      	ldr	r1, [pc, #20]	; (c068 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c054:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c056:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c058:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    c05a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    c05e:	4903      	ldr	r1, [pc, #12]	; (c06c <_isr_wrapper+0x3c>)
	bx r1
    c060:	4708      	bx	r1
    c062:	0000      	.short	0x0000
	ldr r2, =_kernel
    c064:	20002128 	.word	0x20002128
	ldr r1, =_sw_isr_table
    c068:	00015ec4 	.word	0x00015ec4
	ldr r1, =z_arm_int_exit
    c06c:	0000c071 	.word	0x0000c071

0000c070 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    c070:	4b04      	ldr	r3, [pc, #16]	; (c084 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    c072:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    c074:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    c076:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    c078:	d003      	beq.n	c082 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    c07a:	4903      	ldr	r1, [pc, #12]	; (c088 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    c07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    c080:	600a      	str	r2, [r1, #0]

0000c082 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    c082:	4770      	bx	lr
	ldr r3, =_kernel
    c084:	20002128 	.word	0x20002128
	ldr r1, =_SCS_ICSR
    c088:	e000ed04 	.word	0xe000ed04

0000c08c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    c08c:	b538      	push	{r3, r4, r5, lr}
    c08e:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    c090:	4b20      	ldr	r3, [pc, #128]	; (c114 <bus_fault+0x88>)
    c092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c094:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c098:	d119      	bne.n	c0ce <bus_fault+0x42>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    c09a:	2416      	movs	r4, #22
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    c09c:	4b1d      	ldr	r3, [pc, #116]	; (c114 <bus_fault+0x88>)
    c09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c0a4:	d000      	beq.n	c0a8 <bus_fault+0x1c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    c0a6:	2418      	movs	r4, #24
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c0a8:	4b1a      	ldr	r3, [pc, #104]	; (c114 <bus_fault+0x88>)
    c0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0ac:	f413 7f00 	tst.w	r3, #512	; 0x200
    c0b0:	d010      	beq.n	c0d4 <bus_fault+0x48>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c0b2:	4b18      	ldr	r3, [pc, #96]	; (c114 <bus_fault+0x88>)
    c0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    c0bc:	d009      	beq.n	c0d2 <bus_fault+0x46>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    c0be:	b1d9      	cbz	r1, c0f8 <bus_fault+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c0c0:	4a14      	ldr	r2, [pc, #80]	; (c114 <bus_fault+0x88>)
    c0c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c0c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c0c8:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c0ca:	2419      	movs	r4, #25
    c0cc:	e002      	b.n	c0d4 <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_STACKING;
    c0ce:	2417      	movs	r4, #23
    c0d0:	e7e4      	b.n	c09c <bus_fault+0x10>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c0d2:	2419      	movs	r4, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c0d4:	4b0f      	ldr	r3, [pc, #60]	; (c114 <bus_fault+0x88>)
    c0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c0dc:	d000      	beq.n	c0e0 <bus_fault+0x54>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    c0de:	241a      	movs	r4, #26
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    c0e0:	4b0c      	ldr	r3, [pc, #48]	; (c114 <bus_fault+0x88>)
    c0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    c0e8:	d108      	bne.n	c0fc <bus_fault+0x70>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    c0ea:	4b0a      	ldr	r3, [pc, #40]	; (c114 <bus_fault+0x88>)
    c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    c0f2:	d004      	beq.n	c0fe <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    c0f4:	241c      	movs	r4, #28
    c0f6:	e002      	b.n	c0fe <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c0f8:	2419      	movs	r4, #25
    c0fa:	e7eb      	b.n	c0d4 <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    c0fc:	241b      	movs	r4, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c0fe:	4a05      	ldr	r2, [pc, #20]	; (c114 <bus_fault+0x88>)
    c100:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c102:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    c106:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    c108:	2101      	movs	r1, #1
    c10a:	f006 fca2 	bl	12a52 <memory_fault_recoverable>
    c10e:	7028      	strb	r0, [r5, #0]

	return reason;
}
    c110:	4620      	mov	r0, r4
    c112:	bd38      	pop	{r3, r4, r5, pc}
    c114:	e000ed00 	.word	0xe000ed00

0000c118 <usage_fault>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c118:	4b17      	ldr	r3, [pc, #92]	; (c178 <usage_fault+0x60>)
    c11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c11c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    c120:	d125      	bne.n	c16e <usage_fault+0x56>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    c122:	201d      	movs	r0, #29
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c124:	4b14      	ldr	r3, [pc, #80]	; (c178 <usage_fault+0x60>)
    c126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c128:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    c12c:	d000      	beq.n	c130 <usage_fault+0x18>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    c12e:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c130:	4b11      	ldr	r3, [pc, #68]	; (c178 <usage_fault+0x60>)
    c132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c134:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    c138:	d000      	beq.n	c13c <usage_fault+0x24>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    c13a:	2021      	movs	r0, #33	; 0x21
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c13c:	4b0e      	ldr	r3, [pc, #56]	; (c178 <usage_fault+0x60>)
    c13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c140:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    c144:	d000      	beq.n	c148 <usage_fault+0x30>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    c146:	2022      	movs	r0, #34	; 0x22
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c148:	4b0b      	ldr	r3, [pc, #44]	; (c178 <usage_fault+0x60>)
    c14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c14c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    c150:	d000      	beq.n	c154 <usage_fault+0x3c>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    c152:	2023      	movs	r0, #35	; 0x23
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c154:	4b08      	ldr	r3, [pc, #32]	; (c178 <usage_fault+0x60>)
    c156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c158:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    c15c:	d109      	bne.n	c172 <usage_fault+0x5a>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c15e:	4a06      	ldr	r2, [pc, #24]	; (c178 <usage_fault+0x60>)
    c160:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c162:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    c166:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    c16a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    c16c:	4770      	bx	lr
		reason = K_ERR_ARM_USAGE_DIV_0;
    c16e:	201e      	movs	r0, #30
    c170:	e7d8      	b.n	c124 <usage_fault+0xc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    c172:	2024      	movs	r0, #36	; 0x24
    c174:	e7f3      	b.n	c15e <usage_fault+0x46>
    c176:	bf00      	nop
    c178:	e000ed00 	.word	0xe000ed00

0000c17c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    c17c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c17e:	4b0d      	ldr	r3, [pc, #52]	; (c1b4 <z_arm_is_synchronous_svc+0x38>)
    c180:	695a      	ldr	r2, [r3, #20]
    c182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c186:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c188:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c18c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    c190:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c194:	695a      	ldr	r2, [r3, #20]
    c196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    c19a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c19c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c1a0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c1a4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    c1a8:	4299      	cmp	r1, r3
    c1aa:	d001      	beq.n	c1b0 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    c1ac:	2000      	movs	r0, #0
    c1ae:	4770      	bx	lr
		return true;
    c1b0:	2001      	movs	r0, #1
}
    c1b2:	4770      	bx	lr
    c1b4:	e000ed00 	.word	0xe000ed00

0000c1b8 <mem_manage_fault>:
{
    c1b8:	b570      	push	{r4, r5, r6, lr}
    c1ba:	4604      	mov	r4, r0
    c1bc:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c1be:	4b32      	ldr	r3, [pc, #200]	; (c288 <mem_manage_fault+0xd0>)
    c1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1c2:	f013 0f10 	tst.w	r3, #16
    c1c6:	d11a      	bne.n	c1fe <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    c1c8:	2510      	movs	r5, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c1ca:	4b2f      	ldr	r3, [pc, #188]	; (c288 <mem_manage_fault+0xd0>)
    c1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1ce:	f013 0f08 	tst.w	r3, #8
    c1d2:	d000      	beq.n	c1d6 <mem_manage_fault+0x1e>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    c1d4:	2512      	movs	r5, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c1d6:	4b2c      	ldr	r3, [pc, #176]	; (c288 <mem_manage_fault+0xd0>)
    c1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1da:	f013 0f02 	tst.w	r3, #2
    c1de:	d010      	beq.n	c202 <mem_manage_fault+0x4a>
		uint32_t temp = SCB->MMFAR;
    c1e0:	4b29      	ldr	r3, [pc, #164]	; (c288 <mem_manage_fault+0xd0>)
    c1e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1e6:	f013 0f80 	tst.w	r3, #128	; 0x80
    c1ea:	d03d      	beq.n	c268 <mem_manage_fault+0xb0>
			if (from_hard_fault != 0) {
    c1ec:	2900      	cmp	r1, #0
    c1ee:	d03f      	beq.n	c270 <mem_manage_fault+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c1f0:	4a25      	ldr	r2, [pc, #148]	; (c288 <mem_manage_fault+0xd0>)
    c1f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c1f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c1f8:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    c1fa:	2513      	movs	r5, #19
    c1fc:	e003      	b.n	c206 <mem_manage_fault+0x4e>
		reason = K_ERR_ARM_MEM_STACKING;
    c1fe:	2511      	movs	r5, #17
    c200:	e7e3      	b.n	c1ca <mem_manage_fault+0x12>
	uint32_t mmfar = -EINVAL;
    c202:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c206:	4b20      	ldr	r3, [pc, #128]	; (c288 <mem_manage_fault+0xd0>)
    c208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c20a:	f013 0f01 	tst.w	r3, #1
    c20e:	d000      	beq.n	c212 <mem_manage_fault+0x5a>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    c210:	2514      	movs	r5, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c212:	4b1d      	ldr	r3, [pc, #116]	; (c288 <mem_manage_fault+0xd0>)
    c214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c216:	f013 0f20 	tst.w	r3, #32
    c21a:	d000      	beq.n	c21e <mem_manage_fault+0x66>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    c21c:	2515      	movs	r5, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c21e:	4b1a      	ldr	r3, [pc, #104]	; (c288 <mem_manage_fault+0xd0>)
    c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c222:	f013 0f10 	tst.w	r3, #16
    c226:	d104      	bne.n	c232 <mem_manage_fault+0x7a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c228:	4b17      	ldr	r3, [pc, #92]	; (c288 <mem_manage_fault+0xd0>)
    c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c22c:	f013 0f02 	tst.w	r3, #2
    c230:	d004      	beq.n	c23c <mem_manage_fault+0x84>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    c232:	4b15      	ldr	r3, [pc, #84]	; (c288 <mem_manage_fault+0xd0>)
    c234:	685b      	ldr	r3, [r3, #4]
    c236:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c23a:	d11b      	bne.n	c274 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c23c:	4b12      	ldr	r3, [pc, #72]	; (c288 <mem_manage_fault+0xd0>)
    c23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c240:	f013 0f20 	tst.w	r3, #32
    c244:	d004      	beq.n	c250 <mem_manage_fault+0x98>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    c246:	4a10      	ldr	r2, [pc, #64]	; (c288 <mem_manage_fault+0xd0>)
    c248:	6a53      	ldr	r3, [r2, #36]	; 0x24
    c24a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c24e:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c250:	4a0d      	ldr	r2, [pc, #52]	; (c288 <mem_manage_fault+0xd0>)
    c252:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c254:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    c258:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    c25a:	2101      	movs	r1, #1
    c25c:	4620      	mov	r0, r4
    c25e:	f006 fbf8 	bl	12a52 <memory_fault_recoverable>
    c262:	7030      	strb	r0, [r6, #0]
}
    c264:	4628      	mov	r0, r5
    c266:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    c268:	f06f 0015 	mvn.w	r0, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    c26c:	2513      	movs	r5, #19
    c26e:	e7ca      	b.n	c206 <mem_manage_fault+0x4e>
    c270:	2513      	movs	r5, #19
    c272:	e7c8      	b.n	c206 <mem_manage_fault+0x4e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    c274:	4621      	mov	r1, r4
    c276:	f7ff fea1 	bl	bfbc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    c27a:	2800      	cmp	r0, #0
    c27c:	d0de      	beq.n	c23c <mem_manage_fault+0x84>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    c27e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    c282:	2502      	movs	r5, #2
    c284:	e7da      	b.n	c23c <mem_manage_fault+0x84>
    c286:	bf00      	nop
    c288:	e000ed00 	.word	0xe000ed00

0000c28c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    c28c:	b538      	push	{r3, r4, r5, lr}
    c28e:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    c290:	2300      	movs	r3, #0
    c292:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c294:	4b1a      	ldr	r3, [pc, #104]	; (c300 <hard_fault+0x74>)
    c296:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    c298:	f010 0002 	ands.w	r0, r0, #2
    c29c:	d12d      	bne.n	c2fa <hard_fault+0x6e>
    c29e:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	db2a      	blt.n	c2fc <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c2a6:	4b16      	ldr	r3, [pc, #88]	; (c300 <hard_fault+0x74>)
    c2a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    c2aa:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    c2ae:	d025      	beq.n	c2fc <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    c2b0:	4628      	mov	r0, r5
    c2b2:	f7ff ff63 	bl	c17c <z_arm_is_synchronous_svc>
    c2b6:	b108      	cbz	r0, c2bc <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    c2b8:	6828      	ldr	r0, [r5, #0]
    c2ba:	e01f      	b.n	c2fc <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    c2bc:	4b10      	ldr	r3, [pc, #64]	; (c300 <hard_fault+0x74>)
    c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2c0:	f013 0fff 	tst.w	r3, #255	; 0xff
    c2c4:	d10d      	bne.n	c2e2 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    c2c6:	4b0e      	ldr	r3, [pc, #56]	; (c300 <hard_fault+0x74>)
    c2c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c2ca:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    c2ce:	d10e      	bne.n	c2ee <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    c2d0:	4b0b      	ldr	r3, [pc, #44]	; (c300 <hard_fault+0x74>)
    c2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c2d8:	d310      	bcc.n	c2fc <hard_fault+0x70>
			reason = usage_fault(esf);
    c2da:	4628      	mov	r0, r5
    c2dc:	f7ff ff1c 	bl	c118 <usage_fault>
    c2e0:	e00c      	b.n	c2fc <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    c2e2:	4622      	mov	r2, r4
    c2e4:	2101      	movs	r1, #1
    c2e6:	4628      	mov	r0, r5
    c2e8:	f7ff ff66 	bl	c1b8 <mem_manage_fault>
    c2ec:	e006      	b.n	c2fc <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    c2ee:	4622      	mov	r2, r4
    c2f0:	2101      	movs	r1, #1
    c2f2:	4628      	mov	r0, r5
    c2f4:	f7ff feca 	bl	c08c <bus_fault>
    c2f8:	e000      	b.n	c2fc <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c2fa:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    c2fc:	bd38      	pop	{r3, r4, r5, pc}
    c2fe:	bf00      	nop
    c300:	e000ed00 	.word	0xe000ed00

0000c304 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    c304:	b570      	push	{r4, r5, r6, lr}
    c306:	b08a      	sub	sp, #40	; 0x28
    c308:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c30a:	4b22      	ldr	r3, [pc, #136]	; (c394 <z_arm_fault+0x90>)
    c30c:	6859      	ldr	r1, [r3, #4]
    c30e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    c312:	2300      	movs	r3, #0
    c314:	f383 8811 	msr	BASEPRI, r3
    c318:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    c31c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    c320:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    c324:	d115      	bne.n	c352 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    c326:	f002 030c 	and.w	r3, r2, #12
    c32a:	2b08      	cmp	r3, #8
    c32c:	d014      	beq.n	c358 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c32e:	f012 0f08 	tst.w	r2, #8
    c332:	d00b      	beq.n	c34c <z_arm_fault+0x48>
	*nested_exc = false;
    c334:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    c336:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    c33a:	4620      	mov	r0, r4
    c33c:	f006 fb8e 	bl	12a5c <fault_handle>
    c340:	4605      	mov	r5, r0
	if (recoverable) {
    c342:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c346:	b153      	cbz	r3, c35e <z_arm_fault+0x5a>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    c348:	b00a      	add	sp, #40	; 0x28
    c34a:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    c34c:	4604      	mov	r4, r0
			*nested_exc = true;
    c34e:	2601      	movs	r6, #1
    c350:	e7f1      	b.n	c336 <z_arm_fault+0x32>
	*nested_exc = false;
    c352:	2600      	movs	r6, #0
		return NULL;
    c354:	4634      	mov	r4, r6
    c356:	e7ee      	b.n	c336 <z_arm_fault+0x32>
	*nested_exc = false;
    c358:	2600      	movs	r6, #0
		return NULL;
    c35a:	4634      	mov	r4, r6
    c35c:	e7eb      	b.n	c336 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c35e:	2220      	movs	r2, #32
    c360:	4621      	mov	r1, r4
    c362:	a801      	add	r0, sp, #4
    c364:	f006 fc51 	bl	12c0a <memcpy>
	if (nested_exc) {
    c368:	b14e      	cbz	r6, c37e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c36a:	9b08      	ldr	r3, [sp, #32]
    c36c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    c370:	b95a      	cbnz	r2, c38a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c372:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    c376:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    c37a:	9308      	str	r3, [sp, #32]
    c37c:	e005      	b.n	c38a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c37e:	9b08      	ldr	r3, [sp, #32]
    c380:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c384:	f023 0301 	bic.w	r3, r3, #1
    c388:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    c38a:	a901      	add	r1, sp, #4
    c38c:	4628      	mov	r0, r5
    c38e:	f006 fb35 	bl	129fc <z_arm_fatal_error>
    c392:	e7d9      	b.n	c348 <z_arm_fault+0x44>
    c394:	e000ed00 	.word	0xe000ed00

0000c398 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c398:	4a02      	ldr	r2, [pc, #8]	; (c3a4 <z_arm_fault_init+0xc>)
    c39a:	6953      	ldr	r3, [r2, #20]
    c39c:	f043 0310 	orr.w	r3, r3, #16
    c3a0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    c3a2:	4770      	bx	lr
    c3a4:	e000ed00 	.word	0xe000ed00

0000c3a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    c3a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    c3ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    c3b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    c3b2:	4672      	mov	r2, lr
	bl z_arm_fault
    c3b4:	f7ff ffa6 	bl	c304 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    c3b8:	bd01      	pop	{r0, pc}
    c3ba:	bf00      	nop

0000c3bc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    c3bc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c3be:	e006      	b.n	c3ce <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c3c0:	f003 030f 	and.w	r3, r3, #15
    c3c4:	4909      	ldr	r1, [pc, #36]	; (c3ec <z_arm_interrupt_init+0x30>)
    c3c6:	4419      	add	r1, r3
    c3c8:	2340      	movs	r3, #64	; 0x40
    c3ca:	760b      	strb	r3, [r1, #24]
    c3cc:	3201      	adds	r2, #1
    c3ce:	2a26      	cmp	r2, #38	; 0x26
    c3d0:	dc0a      	bgt.n	c3e8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    c3d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	dbf3      	blt.n	c3c0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c3d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    c3dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    c3e0:	2140      	movs	r1, #64	; 0x40
    c3e2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    c3e6:	e7f1      	b.n	c3cc <z_arm_interrupt_init+0x10>
	}
}
    c3e8:	4770      	bx	lr
    c3ea:	bf00      	nop
    c3ec:	e000ecfc 	.word	0xe000ecfc

0000c3f0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    c3f0:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    c3f2:	4913      	ldr	r1, [pc, #76]	; (c440 <__start+0x50>)
    strb r0, [r1]
    c3f4:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    c3f6:	2000      	movs	r0, #0
    msr CONTROL, r0
    c3f8:	f380 8814 	msr	CONTROL, r0
    isb
    c3fc:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    c400:	f7ff fb96 	bl	bb30 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    c404:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    c406:	490f      	ldr	r1, [pc, #60]	; (c444 <__start+0x54>)
    str r0, [r1]
    c408:	6008      	str	r0, [r1, #0]
    dsb
    c40a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c40e:	480e      	ldr	r0, [pc, #56]	; (c448 <__start+0x58>)
    msr msp, r0
    c410:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    c414:	f000 f830 	bl	c478 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c418:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    c41a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    c41e:	480b      	ldr	r0, [pc, #44]	; (c44c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c420:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    c424:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c426:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    c42a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    c42e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    c430:	4308      	orrs	r0, r1
    msr CONTROL, r0
    c432:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    c436:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    c43a:	f7ff fd29 	bl	be90 <z_arm_prep_c>
    c43e:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    c440:	20002186 	.word	0x20002186
    ldr r1, =_SCS_MPU_CTRL
    c444:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c448:	200046c0 	.word	0x200046c0
    ldr r0, =z_interrupt_stacks
    c44c:	20003900 	.word	0x20003900

0000c450 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    c450:	4b08      	ldr	r3, [pc, #32]	; (c474 <z_arm_clear_arm_mpu_config+0x24>)
    c452:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    c456:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    c45a:	2300      	movs	r3, #0
    c45c:	e006      	b.n	c46c <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    c45e:	4a05      	ldr	r2, [pc, #20]	; (c474 <z_arm_clear_arm_mpu_config+0x24>)
    c460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    c464:	2100      	movs	r1, #0
    c466:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    c46a:	3301      	adds	r3, #1
    c46c:	4283      	cmp	r3, r0
    c46e:	dbf6      	blt.n	c45e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    c470:	4770      	bx	lr
    c472:	bf00      	nop
    c474:	e000ed00 	.word	0xe000ed00

0000c478 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    c478:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    c47a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    c47c:	2400      	movs	r4, #0
    c47e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    c482:	f7ff ffe5 	bl	c450 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    c486:	4623      	mov	r3, r4
    c488:	e008      	b.n	c49c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    c48a:	f103 0120 	add.w	r1, r3, #32
    c48e:	4a0e      	ldr	r2, [pc, #56]	; (c4c8 <z_arm_init_arch_hw_at_boot+0x50>)
    c490:	f04f 30ff 	mov.w	r0, #4294967295
    c494:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    c498:	3301      	adds	r3, #1
    c49a:	b2db      	uxtb	r3, r3
    c49c:	2b07      	cmp	r3, #7
    c49e:	d9f4      	bls.n	c48a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    c4a0:	2300      	movs	r3, #0
    c4a2:	e008      	b.n	c4b6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    c4a4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    c4a8:	4a07      	ldr	r2, [pc, #28]	; (c4c8 <z_arm_init_arch_hw_at_boot+0x50>)
    c4aa:	f04f 30ff 	mov.w	r0, #4294967295
    c4ae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    c4b2:	3301      	adds	r3, #1
    c4b4:	b2db      	uxtb	r3, r3
    c4b6:	2b07      	cmp	r3, #7
    c4b8:	d9f4      	bls.n	c4a4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    c4ba:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    c4bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c4c0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    c4c4:	bd10      	pop	{r4, pc}
    c4c6:	bf00      	nop
    c4c8:	e000e100 	.word	0xe000e100

0000c4cc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    c4cc:	b508      	push	{r3, lr}
	if (_current == thread) {
    c4ce:	4b0a      	ldr	r3, [pc, #40]	; (c4f8 <z_impl_k_thread_abort+0x2c>)
    c4d0:	689b      	ldr	r3, [r3, #8]
    c4d2:	4283      	cmp	r3, r0
    c4d4:	d002      	beq.n	c4dc <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    c4d6:	f004 ffb9 	bl	1144c <z_thread_abort>
}
    c4da:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c4dc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    c4e0:	2b00      	cmp	r3, #0
    c4e2:	d0f8      	beq.n	c4d6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c4e4:	4b05      	ldr	r3, [pc, #20]	; (c4fc <z_impl_k_thread_abort+0x30>)
    c4e6:	685a      	ldr	r2, [r3, #4]
    c4e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    c4ec:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    c4ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c4f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c4f4:	625a      	str	r2, [r3, #36]	; 0x24
    c4f6:	e7ee      	b.n	c4d6 <z_impl_k_thread_abort+0xa>
    c4f8:	20002128 	.word	0x20002128
    c4fc:	e000ed00 	.word	0xe000ed00

0000c500 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    c500:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    c502:	4b03      	ldr	r3, [pc, #12]	; (c510 <z_arm_configure_static_mpu_regions+0x10>)
    c504:	4a03      	ldr	r2, [pc, #12]	; (c514 <z_arm_configure_static_mpu_regions+0x14>)
    c506:	2101      	movs	r1, #1
    c508:	4803      	ldr	r0, [pc, #12]	; (c518 <z_arm_configure_static_mpu_regions+0x18>)
    c50a:	f006 fb2d 	bl	12b68 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    c50e:	bd08      	pop	{r3, pc}
    c510:	20010000 	.word	0x20010000
    c514:	20000000 	.word	0x20000000
    c518:	000163b4 	.word	0x000163b4

0000c51c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    c51c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    c51e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    c522:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    c524:	4804      	ldr	r0, [pc, #16]	; (c538 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    c526:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    c528:	2340      	movs	r3, #64	; 0x40
    c52a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    c52c:	4b03      	ldr	r3, [pc, #12]	; (c53c <z_arm_configure_dynamic_mpu_regions+0x20>)
    c52e:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    c530:	2101      	movs	r1, #1
    c532:	f006 fb1d 	bl	12b70 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    c536:	bd08      	pop	{r3, pc}
    c538:	20001a80 	.word	0x20001a80
    c53c:	150b0000 	.word	0x150b0000

0000c540 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    c540:	4a08      	ldr	r2, [pc, #32]	; (c564 <region_init+0x24>)
    c542:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c546:	680b      	ldr	r3, [r1, #0]
    c548:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    c54c:	4303      	orrs	r3, r0
    c54e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c552:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c556:	688b      	ldr	r3, [r1, #8]
    c558:	f043 0301 	orr.w	r3, r3, #1
    c55c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    c560:	4770      	bx	lr
    c562:	bf00      	nop
    c564:	e000ed00 	.word	0xe000ed00

0000c568 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    c568:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    c56a:	4c03      	ldr	r4, [pc, #12]	; (c578 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    c56c:	2301      	movs	r3, #1
    c56e:	7822      	ldrb	r2, [r4, #0]
    c570:	f006 fad2 	bl	12b18 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c574:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    c576:	bd10      	pop	{r4, pc}
    c578:	20002181 	.word	0x20002181

0000c57c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    c57c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    c57e:	2300      	movs	r3, #0
    c580:	4a09      	ldr	r2, [pc, #36]	; (c5a8 <mpu_configure_dynamic_mpu_regions+0x2c>)
    c582:	7812      	ldrb	r2, [r2, #0]
    c584:	f006 fac8 	bl	12b18 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    c588:	f110 0f16 	cmn.w	r0, #22
    c58c:	d00a      	beq.n	c5a4 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    c58e:	4603      	mov	r3, r0
    c590:	e006      	b.n	c5a0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    c592:	4a06      	ldr	r2, [pc, #24]	; (c5ac <mpu_configure_dynamic_mpu_regions+0x30>)
    c594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    c598:	2100      	movs	r1, #0
    c59a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    c59e:	3301      	adds	r3, #1
    c5a0:	2b07      	cmp	r3, #7
    c5a2:	ddf6      	ble.n	c592 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    c5a4:	bd08      	pop	{r3, pc}
    c5a6:	bf00      	nop
    c5a8:	20002181 	.word	0x20002181
    c5ac:	e000ed00 	.word	0xe000ed00

0000c5b0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c5b0:	4b04      	ldr	r3, [pc, #16]	; (c5c4 <arm_core_mpu_enable+0x14>)
    c5b2:	2205      	movs	r2, #5
    c5b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c5b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c5bc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c5c0:	4770      	bx	lr
    c5c2:	bf00      	nop
    c5c4:	e000ed00 	.word	0xe000ed00

0000c5c8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c5c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c5cc:	4b02      	ldr	r3, [pc, #8]	; (c5d8 <arm_core_mpu_disable+0x10>)
    c5ce:	2200      	movs	r2, #0
    c5d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c5d4:	4770      	bx	lr
    c5d6:	bf00      	nop
    c5d8:	e000ed00 	.word	0xe000ed00

0000c5dc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    c5dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c5de:	4b0e      	ldr	r3, [pc, #56]	; (c618 <z_arm_mpu_init+0x3c>)
    c5e0:	681d      	ldr	r5, [r3, #0]
    c5e2:	2d08      	cmp	r5, #8
    c5e4:	d815      	bhi.n	c612 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    c5e6:	f7ff ffef 	bl	c5c8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c5ea:	2400      	movs	r4, #0
    c5ec:	e009      	b.n	c602 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    c5ee:	4b0a      	ldr	r3, [pc, #40]	; (c618 <z_arm_mpu_init+0x3c>)
    c5f0:	6859      	ldr	r1, [r3, #4]
    c5f2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c5f6:	0093      	lsls	r3, r2, #2
    c5f8:	4419      	add	r1, r3
    c5fa:	4620      	mov	r0, r4
    c5fc:	f7ff ffa0 	bl	c540 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c600:	3401      	adds	r4, #1
    c602:	42a5      	cmp	r5, r4
    c604:	d8f3      	bhi.n	c5ee <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c606:	4b05      	ldr	r3, [pc, #20]	; (c61c <z_arm_mpu_init+0x40>)
    c608:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    c60a:	f7ff ffd1 	bl	c5b0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c60e:	2000      	movs	r0, #0
}
    c610:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    c612:	f04f 30ff 	mov.w	r0, #4294967295
    c616:	e7fb      	b.n	c610 <z_arm_mpu_init+0x34>
    c618:	000163c4 	.word	0x000163c4
    c61c:	20002181 	.word	0x20002181

0000c620 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    c620:	4b01      	ldr	r3, [pc, #4]	; (c628 <__stdout_hook_install+0x8>)
    c622:	6018      	str	r0, [r3, #0]
}
    c624:	4770      	bx	lr
    c626:	bf00      	nop
    c628:	2000038c 	.word	0x2000038c

0000c62c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    c62c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c630:	4905      	ldr	r1, [pc, #20]	; (c648 <__NVIC_SystemReset+0x1c>)
    c632:	68ca      	ldr	r2, [r1, #12]
    c634:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c638:	4b04      	ldr	r3, [pc, #16]	; (c64c <__NVIC_SystemReset+0x20>)
    c63a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c63c:	60cb      	str	r3, [r1, #12]
    c63e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c642:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c644:	e7fd      	b.n	c642 <__NVIC_SystemReset+0x16>
    c646:	bf00      	nop
    c648:	e000ed00 	.word	0xe000ed00
    c64c:	05fa0004 	.word	0x05fa0004

0000c650 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    c650:	f04f 0240 	mov.w	r2, #64	; 0x40
    c654:	f3ef 8311 	mrs	r3, BASEPRI
    c658:	f382 8812 	msr	BASEPRI_MAX, r2
    c65c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c660:	4a04      	ldr	r2, [pc, #16]	; (c674 <nordicsemi_nrf52_init+0x24>)
    c662:	2101      	movs	r1, #1
    c664:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    c668:	f383 8811 	msr	BASEPRI, r3
    c66c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c670:	2000      	movs	r0, #0
    c672:	4770      	bx	lr
    c674:	4001e000 	.word	0x4001e000

0000c678 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c678:	b130      	cbz	r0, c688 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    c67a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c67c:	4b03      	ldr	r3, [pc, #12]	; (c68c <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c67e:	0180      	lsls	r0, r0, #6
    c680:	f043 0301 	orr.w	r3, r3, #1
    c684:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    c686:	bd08      	pop	{r3, pc}
    c688:	4770      	bx	lr
    c68a:	bf00      	nop
    c68c:	000161a0 	.word	0x000161a0

0000c690 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    c690:	b508      	push	{r3, lr}
    c692:	4804      	ldr	r0, [pc, #16]	; (c6a4 <xoshiro128_initialize+0x14>)
    c694:	f008 fc5e 	bl	14f54 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
    c698:	b108      	cbz	r0, c69e <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
    c69a:	2000      	movs	r0, #0
}
    c69c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    c69e:	f06f 0012 	mvn.w	r0, #18
    c6a2:	e7fb      	b.n	c69c <xoshiro128_initialize+0xc>
    c6a4:	00015e4c 	.word	0x00015e4c

0000c6a8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    c6a8:	b538      	push	{r3, r4, r5, lr}
    c6aa:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    c6ac:	4805      	ldr	r0, [pc, #20]	; (c6c4 <bt_buf_get_rx+0x1c>)
    c6ae:	f006 ff0d 	bl	134cc <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c6b2:	4605      	mov	r5, r0
    c6b4:	b120      	cbz	r0, c6c0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    c6b6:	2100      	movs	r1, #0
    c6b8:	300c      	adds	r0, #12
    c6ba:	f006 ff6b 	bl	13594 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c6be:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c6c0:	4628      	mov	r0, r5
    c6c2:	bd38      	pop	{r3, r4, r5, pc}
    c6c4:	200004f4 	.word	0x200004f4

0000c6c8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c6c8:	b538      	push	{r3, r4, r5, lr}
    c6ca:	4602      	mov	r2, r0
    c6cc:	460b      	mov	r3, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c6ce:	490e      	ldr	r1, [pc, #56]	; (c708 <bt_buf_get_cmd_complete+0x40>)
    c6d0:	2000      	movs	r0, #0
    c6d2:	f3bf 8f5b 	dmb	ish
    c6d6:	e851 4f00 	ldrex	r4, [r1]
    c6da:	e841 0500 	strex	r5, r0, [r1]
    c6de:	2d00      	cmp	r5, #0
    c6e0:	d1f9      	bne.n	c6d6 <bt_buf_get_cmd_complete+0xe>
    c6e2:	f3bf 8f5b 	dmb	ish
    c6e6:	4625      	mov	r5, r4
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    c6e8:	b92c      	cbnz	r4, c6f6 <bt_buf_get_cmd_complete+0x2e>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c6ea:	2001      	movs	r0, #1
    c6ec:	f7ff ffdc 	bl	c6a8 <bt_buf_get_rx>
    c6f0:	4605      	mov	r5, r0
}
    c6f2:	4628      	mov	r0, r5
    c6f4:	bd38      	pop	{r3, r4, r5, pc}
    c6f6:	2301      	movs	r3, #1
    c6f8:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    c6fa:	4601      	mov	r1, r0
    c6fc:	8220      	strh	r0, [r4, #16]
    c6fe:	f104 000c 	add.w	r0, r4, #12
    c702:	f006 ff47 	bl	13594 <net_buf_simple_reserve>
		return buf;
    c706:	e7f4      	b.n	c6f2 <bt_buf_get_cmd_complete+0x2a>
    c708:	200002a0 	.word	0x200002a0

0000c70c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    c70c:	b510      	push	{r4, lr}
	switch (evt) {
    c70e:	f1a0 0c0e 	sub.w	ip, r0, #14
    c712:	f1bc 0f01 	cmp.w	ip, #1
    c716:	d906      	bls.n	c726 <bt_buf_get_evt+0x1a>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
    c718:	b959      	cbnz	r1, c732 <bt_buf_get_evt+0x26>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c71a:	2001      	movs	r0, #1
    c71c:	f7ff ffc4 	bl	c6a8 <bt_buf_get_rx>
    c720:	4604      	mov	r4, r0
	}
}
    c722:	4620      	mov	r0, r4
    c724:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    c726:	4610      	mov	r0, r2
    c728:	4619      	mov	r1, r3
    c72a:	f7ff ffcd 	bl	c6c8 <bt_buf_get_cmd_complete>
    c72e:	4604      	mov	r4, r0
    c730:	e7f7      	b.n	c722 <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
    c732:	4806      	ldr	r0, [pc, #24]	; (c74c <bt_buf_get_evt+0x40>)
    c734:	f006 feca 	bl	134cc <net_buf_alloc_fixed>
			if (buf) {
    c738:	4604      	mov	r4, r0
    c73a:	2800      	cmp	r0, #0
    c73c:	d0f1      	beq.n	c722 <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
    c73e:	2100      	movs	r1, #0
    c740:	300c      	adds	r0, #12
    c742:	f006 ff27 	bl	13594 <net_buf_simple_reserve>
    c746:	2301      	movs	r3, #1
    c748:	7623      	strb	r3, [r4, #24]
			return buf;
    c74a:	e7ea      	b.n	c722 <bt_buf_get_evt+0x16>
    c74c:	2000049c 	.word	0x2000049c

0000c750 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c750:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    c752:	7851      	ldrb	r1, [r2, #1]
    c754:	4b08      	ldr	r3, [pc, #32]	; (c778 <read_local_ver_complete+0x28>)
    c756:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c75a:	8851      	ldrh	r1, [r2, #2]
    c75c:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    c760:	7911      	ldrb	r1, [r2, #4]
    c762:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c766:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    c76a:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c76e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    c772:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
    c776:	4770      	bx	lr
    c778:	200001a0 	.word	0x200001a0

0000c77c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    c77c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    c77e:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    c780:	3001      	adds	r0, #1
    c782:	f006 face 	bl	12d22 <sys_get_le64>
    c786:	4b02      	ldr	r3, [pc, #8]	; (c790 <le_read_supp_states_complete+0x14>)
    c788:	e9c3 0138 	strd	r0, r1, [r3, #224]	; 0xe0
}
    c78c:	bd08      	pop	{r3, pc}
    c78e:	bf00      	nop
    c790:	200001a0 	.word	0x200001a0

0000c794 <hci_reset_complete>:
	uint8_t status = buf->data[0];
    c794:	68c3      	ldr	r3, [r0, #12]
    c796:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    c798:	b98b      	cbnz	r3, c7be <hci_reset_complete+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c79a:	4b09      	ldr	r3, [pc, #36]	; (c7c0 <hci_reset_complete+0x2c>)
    c79c:	f3bf 8f5b 	dmb	ish
    c7a0:	681a      	ldr	r2, [r3, #0]
    c7a2:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c7a6:	f002 0209 	and.w	r2, r2, #9
    c7aa:	f3bf 8f5b 	dmb	ish
    c7ae:	e853 1f00 	ldrex	r1, [r3]
    c7b2:	e843 2000 	strex	r0, r2, [r3]
    c7b6:	2800      	cmp	r0, #0
    c7b8:	d1f9      	bne.n	c7ae <hci_reset_complete+0x1a>
    c7ba:	f3bf 8f5b 	dmb	ish
}
    c7be:	4770      	bx	lr
    c7c0:	20000274 	.word	0x20000274

0000c7c4 <read_local_features_complete>:
{
    c7c4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    c7c6:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c7c8:	2208      	movs	r2, #8
    c7ca:	3101      	adds	r1, #1
    c7cc:	4801      	ldr	r0, [pc, #4]	; (c7d4 <read_local_features_complete+0x10>)
    c7ce:	f006 fa1c 	bl	12c0a <memcpy>
}
    c7d2:	bd08      	pop	{r3, pc}
    c7d4:	20000218 	.word	0x20000218

0000c7d8 <read_supported_commands_complete>:
{
    c7d8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    c7da:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    c7dc:	2240      	movs	r2, #64	; 0x40
    c7de:	3101      	adds	r1, #1
    c7e0:	4801      	ldr	r0, [pc, #4]	; (c7e8 <read_supported_commands_complete+0x10>)
    c7e2:	f006 fa12 	bl	12c0a <memcpy>
}
    c7e6:	bd08      	pop	{r3, pc}
    c7e8:	20000220 	.word	0x20000220

0000c7ec <read_le_features_complete>:
{
    c7ec:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    c7ee:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c7f0:	2208      	movs	r2, #8
    c7f2:	3101      	adds	r1, #1
    c7f4:	4801      	ldr	r0, [pc, #4]	; (c7fc <read_le_features_complete+0x10>)
    c7f6:	f006 fa08 	bl	12c0a <memcpy>
}
    c7fa:	bd08      	pop	{r3, pc}
    c7fc:	20000278 	.word	0x20000278

0000c800 <hci_cmd_done>:
{
    c800:	b570      	push	{r4, r5, r6, lr}
    c802:	4606      	mov	r6, r0
    c804:	460d      	mov	r5, r1
    c806:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c808:	7a90      	ldrb	r0, [r2, #10]
    c80a:	f001 f883 	bl	d914 <net_buf_pool_get>
    c80e:	4b28      	ldr	r3, [pc, #160]	; (c8b0 <hci_cmd_done+0xb0>)
    c810:	4283      	cmp	r3, r0
    c812:	d000      	beq.n	c816 <hci_cmd_done+0x16>
}
    c814:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
    c816:	4620      	mov	r0, r4
    c818:	f006 fdb5 	bl	13386 <net_buf_id>
    c81c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c820:	4b24      	ldr	r3, [pc, #144]	; (c8b4 <hci_cmd_done+0xb4>)
    c822:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c826:	885b      	ldrh	r3, [r3, #2]
    c828:	42b3      	cmp	r3, r6
    c82a:	d1f3      	bne.n	c814 <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
    c82c:	4b22      	ldr	r3, [pc, #136]	; (c8b8 <hci_cmd_done+0xb8>)
    c82e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    c832:	b128      	cbz	r0, c840 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
    c834:	f006 fe87 	bl	13546 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c838:	4b1f      	ldr	r3, [pc, #124]	; (c8b8 <hci_cmd_done+0xb8>)
    c83a:	2200      	movs	r2, #0
    c83c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    c840:	4620      	mov	r0, r4
    c842:	f006 fda0 	bl	13386 <net_buf_id>
    c846:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c84a:	4b1a      	ldr	r3, [pc, #104]	; (c8b4 <hci_cmd_done+0xb4>)
    c84c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c850:	685b      	ldr	r3, [r3, #4]
    c852:	b103      	cbz	r3, c856 <hci_cmd_done+0x56>
    c854:	b1ed      	cbz	r5, c892 <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
    c856:	4620      	mov	r0, r4
    c858:	f006 fd95 	bl	13386 <net_buf_id>
    c85c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c860:	4b14      	ldr	r3, [pc, #80]	; (c8b4 <hci_cmd_done+0xb4>)
    c862:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c866:	689b      	ldr	r3, [r3, #8]
    c868:	2b00      	cmp	r3, #0
    c86a:	d0d3      	beq.n	c814 <hci_cmd_done+0x14>
		cmd(buf)->status = status;
    c86c:	4620      	mov	r0, r4
    c86e:	f006 fd8a 	bl	13386 <net_buf_id>
    c872:	4e10      	ldr	r6, [pc, #64]	; (c8b4 <hci_cmd_done+0xb4>)
    c874:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c878:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    c87c:	4620      	mov	r0, r4
    c87e:	f006 fd82 	bl	13386 <net_buf_id>
    c882:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c886:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    c88a:	68b0      	ldr	r0, [r6, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    c88c:	f004 f8b4 	bl	109f8 <z_impl_k_sem_give>
}
    c890:	e7c0      	b.n	c814 <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    c892:	4620      	mov	r0, r4
    c894:	f006 fd77 	bl	13386 <net_buf_id>
    c898:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c89c:	4b05      	ldr	r3, [pc, #20]	; (c8b4 <hci_cmd_done+0xb4>)
    c89e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c8a2:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    c8a4:	7a1a      	ldrb	r2, [r3, #8]
    c8a6:	6859      	ldr	r1, [r3, #4]
    c8a8:	6818      	ldr	r0, [r3, #0]
    c8aa:	f006 fa78 	bl	12d9e <atomic_set_bit_to>
    c8ae:	e7d2      	b.n	c856 <hci_cmd_done+0x56>
    c8b0:	200004c8 	.word	0x200004c8
    c8b4:	20001a8c 	.word	0x20001a8c
    c8b8:	200001a0 	.word	0x200001a0

0000c8bc <hci_cmd_status>:
{
    c8bc:	b538      	push	{r3, r4, r5, lr}
    c8be:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    c8c0:	2104      	movs	r1, #4
    c8c2:	300c      	adds	r0, #12
    c8c4:	f006 fe82 	bl	135cc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    c8c8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    c8ca:	4622      	mov	r2, r4
    c8cc:	7801      	ldrb	r1, [r0, #0]
    c8ce:	8840      	ldrh	r0, [r0, #2]
    c8d0:	f7ff ff96 	bl	c800 <hci_cmd_done>
	if (ncmd) {
    c8d4:	b905      	cbnz	r5, c8d8 <hci_cmd_status+0x1c>
}
    c8d6:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    c8d8:	4801      	ldr	r0, [pc, #4]	; (c8e0 <hci_cmd_status+0x24>)
    c8da:	f004 f88d 	bl	109f8 <z_impl_k_sem_give>
    c8de:	e7fa      	b.n	c8d6 <hci_cmd_status+0x1a>
    c8e0:	20000288 	.word	0x20000288

0000c8e4 <hci_cmd_complete>:
{
    c8e4:	b538      	push	{r3, r4, r5, lr}
    c8e6:	4604      	mov	r4, r0
    c8e8:	2103      	movs	r1, #3
    c8ea:	300c      	adds	r0, #12
    c8ec:	f006 fe6e 	bl	135cc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    c8f0:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    c8f2:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
    c8f4:	4622      	mov	r2, r4
    c8f6:	7819      	ldrb	r1, [r3, #0]
    c8f8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    c8fc:	f7ff ff80 	bl	c800 <hci_cmd_done>
	if (ncmd) {
    c900:	b905      	cbnz	r5, c904 <hci_cmd_complete+0x20>
}
    c902:	bd38      	pop	{r3, r4, r5, pc}
    c904:	4801      	ldr	r0, [pc, #4]	; (c90c <hci_cmd_complete+0x28>)
    c906:	f004 f877 	bl	109f8 <z_impl_k_sem_give>
    c90a:	e7fa      	b.n	c902 <hci_cmd_complete+0x1e>
    c90c:	20000288 	.word	0x20000288

0000c910 <hci_event>:
{
    c910:	b538      	push	{r3, r4, r5, lr}
    c912:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c914:	8a03      	ldrh	r3, [r0, #16]
    c916:	2b01      	cmp	r3, #1
    c918:	d91b      	bls.n	c952 <hci_event+0x42>
    c91a:	2102      	movs	r1, #2
    c91c:	f104 000c 	add.w	r0, r4, #12
    c920:	f006 fe54 	bl	135cc <net_buf_simple_pull_mem>
    c924:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c926:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    c928:	2b05      	cmp	r3, #5
    c92a:	d022      	beq.n	c972 <hci_event+0x62>
    c92c:	d323      	bcc.n	c976 <hci_event+0x66>
    c92e:	3b0e      	subs	r3, #14
    c930:	b2db      	uxtb	r3, r3
    c932:	2b01      	cmp	r3, #1
    c934:	d81b      	bhi.n	c96e <hci_event+0x5e>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    c936:	2301      	movs	r3, #1
    c938:	f013 0f02 	tst.w	r3, #2
    c93c:	d01d      	beq.n	c97a <hci_event+0x6a>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    c93e:	2303      	movs	r3, #3
    c940:	4a15      	ldr	r2, [pc, #84]	; (c998 <hci_event+0x88>)
    c942:	4621      	mov	r1, r4
    c944:	7828      	ldrb	r0, [r5, #0]
    c946:	f006 fa23 	bl	12d90 <handle_event>
	net_buf_unref(buf);
    c94a:	4620      	mov	r0, r4
    c94c:	f006 fdfb 	bl	13546 <net_buf_unref>
}
    c950:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c952:	f640 2347 	movw	r3, #2631	; 0xa47
    c956:	4a11      	ldr	r2, [pc, #68]	; (c99c <hci_event+0x8c>)
    c958:	4911      	ldr	r1, [pc, #68]	; (c9a0 <hci_event+0x90>)
    c95a:	4812      	ldr	r0, [pc, #72]	; (c9a4 <hci_event+0x94>)
    c95c:	f006 f80e 	bl	1297c <assert_print>
    c960:	4040      	eors	r0, r0
    c962:	f380 8811 	msr	BASEPRI, r0
    c966:	f04f 0003 	mov.w	r0, #3
    c96a:	df02      	svc	2
    c96c:	e7d5      	b.n	c91a <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
    c96e:	2302      	movs	r3, #2
    c970:	e7e2      	b.n	c938 <hci_event+0x28>
	switch (evt) {
    c972:	2303      	movs	r3, #3
    c974:	e7e0      	b.n	c938 <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
    c976:	2302      	movs	r3, #2
    c978:	e7de      	b.n	c938 <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c97a:	f640 234b 	movw	r3, #2635	; 0xa4b
    c97e:	4a07      	ldr	r2, [pc, #28]	; (c99c <hci_event+0x8c>)
    c980:	4909      	ldr	r1, [pc, #36]	; (c9a8 <hci_event+0x98>)
    c982:	4808      	ldr	r0, [pc, #32]	; (c9a4 <hci_event+0x94>)
    c984:	f005 fffa 	bl	1297c <assert_print>
    c988:	4040      	eors	r0, r0
    c98a:	f380 8811 	msr	BASEPRI, r0
    c98e:	f04f 0003 	mov.w	r0, #3
    c992:	df02      	svc	2
    c994:	e7d3      	b.n	c93e <hci_event+0x2e>
    c996:	bf00      	nop
    c998:	00016554 	.word	0x00016554
    c99c:	00016438 	.word	0x00016438
    c9a0:	0001646c 	.word	0x0001646c
    c9a4:	00016488 	.word	0x00016488
    c9a8:	000164a8 	.word	0x000164a8

0000c9ac <hci_le_meta_event>:
{
    c9ac:	b510      	push	{r4, lr}
    c9ae:	4604      	mov	r4, r0
    c9b0:	2101      	movs	r1, #1
    c9b2:	300c      	adds	r0, #12
    c9b4:	f006 fe0a 	bl	135cc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c9b8:	2300      	movs	r3, #0
    c9ba:	4a03      	ldr	r2, [pc, #12]	; (c9c8 <hci_le_meta_event+0x1c>)
    c9bc:	4621      	mov	r1, r4
    c9be:	7800      	ldrb	r0, [r0, #0]
    c9c0:	f006 f9e6 	bl	12d90 <handle_event>
}
    c9c4:	bd10      	pop	{r4, pc}
    c9c6:	bf00      	nop
    c9c8:	0001656c 	.word	0x0001656c

0000c9cc <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    c9cc:	b508      	push	{r3, lr}
    c9ce:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    c9d0:	4803      	ldr	r0, [pc, #12]	; (c9e0 <rx_queue_put+0x14>)
    c9d2:	f006 fd86 	bl	134e2 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c9d6:	4903      	ldr	r1, [pc, #12]	; (c9e4 <rx_queue_put+0x18>)
    c9d8:	4803      	ldr	r0, [pc, #12]	; (c9e8 <rx_queue_put+0x1c>)
    c9da:	f008 fd7a 	bl	154d2 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
    c9de:	bd08      	pop	{r3, pc}
    c9e0:	200002a4 	.word	0x200002a4
    c9e4:	200003a4 	.word	0x200003a4
    c9e8:	200013a0 	.word	0x200013a0

0000c9ec <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    c9ec:	b508      	push	{r3, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    c9ee:	480a      	ldr	r0, [pc, #40]	; (ca18 <rx_work_handler+0x2c>)
    c9f0:	f006 fd8d 	bl	1350e <net_buf_slist_get>
	if (!buf) {
    c9f4:	b160      	cbz	r0, ca10 <rx_work_handler+0x24>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c9f6:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    c9f8:	2a01      	cmp	r2, #1
    c9fa:	d00a      	beq.n	ca12 <rx_work_handler+0x26>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    c9fc:	f006 fda3 	bl	13546 <net_buf_unref>
	return list->head;
    ca00:	4b06      	ldr	r3, [pc, #24]	; (ca1c <rx_work_handler+0x30>)
    ca02:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    ca06:	b11b      	cbz	r3, ca10 <rx_work_handler+0x24>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ca08:	4905      	ldr	r1, [pc, #20]	; (ca20 <rx_work_handler+0x34>)
    ca0a:	4806      	ldr	r0, [pc, #24]	; (ca24 <rx_work_handler+0x38>)
    ca0c:	f008 fd61 	bl	154d2 <k_work_submit_to_queue>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    ca10:	bd08      	pop	{r3, pc}
		hci_event(buf);
    ca12:	f7ff ff7d 	bl	c910 <hci_event>
		break;
    ca16:	e7f3      	b.n	ca00 <rx_work_handler+0x14>
    ca18:	200002a4 	.word	0x200002a4
    ca1c:	200001a0 	.word	0x200001a0
    ca20:	200003a4 	.word	0x200003a4
    ca24:	200013a0 	.word	0x200013a0

0000ca28 <bt_hci_cmd_state_set_init>:
{
    ca28:	b510      	push	{r4, lr}
    ca2a:	460c      	mov	r4, r1
	state->target = target;
    ca2c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    ca2e:	604b      	str	r3, [r1, #4]
	state->val = val;
    ca30:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca34:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    ca36:	f006 fca6 	bl	13386 <net_buf_id>
    ca3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca3e:	4b02      	ldr	r3, [pc, #8]	; (ca48 <bt_hci_cmd_state_set_init+0x20>)
    ca40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca44:	605c      	str	r4, [r3, #4]
}
    ca46:	bd10      	pop	{r4, pc}
    ca48:	20001a8c 	.word	0x20001a8c

0000ca4c <bt_hci_cmd_create>:
{
    ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca50:	4606      	mov	r6, r0
    ca52:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
    ca54:	f04f 32ff 	mov.w	r2, #4294967295
    ca58:	f04f 33ff 	mov.w	r3, #4294967295
    ca5c:	4818      	ldr	r0, [pc, #96]	; (cac0 <bt_hci_cmd_create+0x74>)
    ca5e:	f006 fd35 	bl	134cc <net_buf_alloc_fixed>
    ca62:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    ca64:	f100 090c 	add.w	r9, r0, #12
    ca68:	2100      	movs	r1, #0
    ca6a:	4648      	mov	r0, r9
    ca6c:	f006 fd92 	bl	13594 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ca70:	f04f 0800 	mov.w	r8, #0
    ca74:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    ca78:	4620      	mov	r0, r4
    ca7a:	f006 fc84 	bl	13386 <net_buf_id>
    ca7e:	4d11      	ldr	r5, [pc, #68]	; (cac4 <bt_hci_cmd_create+0x78>)
    ca80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca84:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    ca88:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    ca8a:	4620      	mov	r0, r4
    ca8c:	f006 fc7b 	bl	13386 <net_buf_id>
    ca90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ca94:	eb05 0380 	add.w	r3, r5, r0, lsl #2
    ca98:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
    ca9c:	4620      	mov	r0, r4
    ca9e:	f006 fc72 	bl	13386 <net_buf_id>
    caa2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    caa6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    caaa:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    caae:	2103      	movs	r1, #3
    cab0:	4648      	mov	r0, r9
    cab2:	f006 fd73 	bl	1359c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    cab6:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    cab8:	7087      	strb	r7, [r0, #2]
}
    caba:	4620      	mov	r0, r4
    cabc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cac0:	200004c8 	.word	0x200004c8
    cac4:	20001a8c 	.word	0x20001a8c

0000cac8 <bt_hci_cmd_send_sync>:
{
    cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    caca:	b087      	sub	sp, #28
    cacc:	4606      	mov	r6, r0
    cace:	4615      	mov	r5, r2
	if (!buf) {
    cad0:	460c      	mov	r4, r1
    cad2:	b359      	cbz	r1, cb2c <bt_hci_cmd_send_sync+0x64>
	return z_impl_k_sem_init(sem, initial_count, limit);
    cad4:	2201      	movs	r2, #1
    cad6:	2100      	movs	r1, #0
    cad8:	4668      	mov	r0, sp
    cada:	f008 fc04 	bl	152e6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    cade:	4620      	mov	r0, r4
    cae0:	f006 fc51 	bl	13386 <net_buf_id>
    cae4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cae8:	4b26      	ldr	r3, [pc, #152]	; (cb84 <bt_hci_cmd_send_sync+0xbc>)
    caea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    caee:	f8c3 d008 	str.w	sp, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    caf2:	4620      	mov	r0, r4
    caf4:	f006 fd4a 	bl	1358c <net_buf_ref>
    caf8:	4601      	mov	r1, r0
    cafa:	4823      	ldr	r0, [pc, #140]	; (cb88 <bt_hci_cmd_send_sync+0xc0>)
    cafc:	f006 fd1f 	bl	1353e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    cb00:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    cb04:	2300      	movs	r3, #0
    cb06:	4668      	mov	r0, sp
    cb08:	f003 ff9e 	bl	10a48 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    cb0c:	4607      	mov	r7, r0
    cb0e:	b9a8      	cbnz	r0, cb3c <bt_hci_cmd_send_sync+0x74>
	status = cmd(buf)->status;
    cb10:	4620      	mov	r0, r4
    cb12:	f006 fc38 	bl	13386 <net_buf_id>
    cb16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cb1a:	4b1a      	ldr	r3, [pc, #104]	; (cb84 <bt_hci_cmd_send_sync+0xbc>)
    cb1c:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
    cb20:	b9fe      	cbnz	r6, cb62 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
    cb22:	b34d      	cbz	r5, cb78 <bt_hci_cmd_send_sync+0xb0>
		*rsp = buf;
    cb24:	602c      	str	r4, [r5, #0]
	return 0;
    cb26:	2000      	movs	r0, #0
}
    cb28:	b007      	add	sp, #28
    cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    cb2c:	f7ff ff8e 	bl	ca4c <bt_hci_cmd_create>
		if (!buf) {
    cb30:	4604      	mov	r4, r0
    cb32:	2800      	cmp	r0, #0
    cb34:	d1ce      	bne.n	cad4 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
    cb36:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cb3a:	e7f5      	b.n	cb28 <bt_hci_cmd_send_sync+0x60>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    cb3c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    cb40:	4a12      	ldr	r2, [pc, #72]	; (cb8c <bt_hci_cmd_send_sync+0xc4>)
    cb42:	4913      	ldr	r1, [pc, #76]	; (cb90 <bt_hci_cmd_send_sync+0xc8>)
    cb44:	4813      	ldr	r0, [pc, #76]	; (cb94 <bt_hci_cmd_send_sync+0xcc>)
    cb46:	f005 ff19 	bl	1297c <assert_print>
    cb4a:	463a      	mov	r2, r7
    cb4c:	4631      	mov	r1, r6
    cb4e:	4812      	ldr	r0, [pc, #72]	; (cb98 <bt_hci_cmd_send_sync+0xd0>)
    cb50:	f005 ff14 	bl	1297c <assert_print>
    cb54:	4040      	eors	r0, r0
    cb56:	f380 8811 	msr	BASEPRI, r0
    cb5a:	f04f 0003 	mov.w	r0, #3
    cb5e:	df02      	svc	2
    cb60:	e7d6      	b.n	cb10 <bt_hci_cmd_send_sync+0x48>
		net_buf_unref(buf);
    cb62:	4620      	mov	r0, r4
    cb64:	f006 fcef 	bl	13546 <net_buf_unref>
		switch (status) {
    cb68:	2e09      	cmp	r6, #9
    cb6a:	d002      	beq.n	cb72 <bt_hci_cmd_send_sync+0xaa>
			return -EIO;
    cb6c:	f06f 0004 	mvn.w	r0, #4
    cb70:	e7da      	b.n	cb28 <bt_hci_cmd_send_sync+0x60>
			return -ECONNREFUSED;
    cb72:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    cb76:	e7d7      	b.n	cb28 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
    cb78:	4620      	mov	r0, r4
    cb7a:	f006 fce4 	bl	13546 <net_buf_unref>
	return 0;
    cb7e:	2000      	movs	r0, #0
    cb80:	e7d2      	b.n	cb28 <bt_hci_cmd_send_sync+0x60>
    cb82:	bf00      	nop
    cb84:	20001a8c 	.word	0x20001a8c
    cb88:	200002ac 	.word	0x200002ac
    cb8c:	00016438 	.word	0x00016438
    cb90:	000164d8 	.word	0x000164d8
    cb94:	00016488 	.word	0x00016488
    cb98:	000164e4 	.word	0x000164e4

0000cb9c <common_init>:
{
    cb9c:	b510      	push	{r4, lr}
    cb9e:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    cba0:	4b22      	ldr	r3, [pc, #136]	; (cc2c <common_init+0x90>)
    cba2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    cba6:	689b      	ldr	r3, [r3, #8]
    cba8:	f013 0f01 	tst.w	r3, #1
    cbac:	d10d      	bne.n	cbca <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    cbae:	aa01      	add	r2, sp, #4
    cbb0:	2100      	movs	r1, #0
    cbb2:	f640 4003 	movw	r0, #3075	; 0xc03
    cbb6:	f7ff ff87 	bl	cac8 <bt_hci_cmd_send_sync>
		if (err) {
    cbba:	4604      	mov	r4, r0
    cbbc:	b968      	cbnz	r0, cbda <common_init+0x3e>
		hci_reset_complete(rsp);
    cbbe:	9801      	ldr	r0, [sp, #4]
    cbc0:	f7ff fde8 	bl	c794 <hci_reset_complete>
		net_buf_unref(rsp);
    cbc4:	9801      	ldr	r0, [sp, #4]
    cbc6:	f006 fcbe 	bl	13546 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    cbca:	aa01      	add	r2, sp, #4
    cbcc:	2100      	movs	r1, #0
    cbce:	f241 0003 	movw	r0, #4099	; 0x1003
    cbd2:	f7ff ff79 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    cbd6:	4604      	mov	r4, r0
    cbd8:	b110      	cbz	r0, cbe0 <common_init+0x44>
}
    cbda:	4620      	mov	r0, r4
    cbdc:	b002      	add	sp, #8
    cbde:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
    cbe0:	9801      	ldr	r0, [sp, #4]
    cbe2:	f7ff fdef 	bl	c7c4 <read_local_features_complete>
	net_buf_unref(rsp);
    cbe6:	9801      	ldr	r0, [sp, #4]
    cbe8:	f006 fcad 	bl	13546 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    cbec:	aa01      	add	r2, sp, #4
    cbee:	2100      	movs	r1, #0
    cbf0:	f241 0001 	movw	r0, #4097	; 0x1001
    cbf4:	f7ff ff68 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    cbf8:	4604      	mov	r4, r0
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d1ed      	bne.n	cbda <common_init+0x3e>
	read_local_ver_complete(rsp);
    cbfe:	9801      	ldr	r0, [sp, #4]
    cc00:	f7ff fda6 	bl	c750 <read_local_ver_complete>
	net_buf_unref(rsp);
    cc04:	9801      	ldr	r0, [sp, #4]
    cc06:	f006 fc9e 	bl	13546 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    cc0a:	aa01      	add	r2, sp, #4
    cc0c:	2100      	movs	r1, #0
    cc0e:	f241 0002 	movw	r0, #4098	; 0x1002
    cc12:	f7ff ff59 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    cc16:	4604      	mov	r4, r0
    cc18:	2800      	cmp	r0, #0
    cc1a:	d1de      	bne.n	cbda <common_init+0x3e>
	read_supported_commands_complete(rsp);
    cc1c:	9801      	ldr	r0, [sp, #4]
    cc1e:	f7ff fddb 	bl	c7d8 <read_supported_commands_complete>
	net_buf_unref(rsp);
    cc22:	9801      	ldr	r0, [sp, #4]
    cc24:	f006 fc8f 	bl	13546 <net_buf_unref>
	return 0;
    cc28:	e7d7      	b.n	cbda <common_init+0x3e>
    cc2a:	bf00      	nop
    cc2c:	200001a0 	.word	0x200001a0

0000cc30 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    cc30:	4b2b      	ldr	r3, [pc, #172]	; (cce0 <le_init+0xb0>)
    cc32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    cc36:	f013 0f40 	tst.w	r3, #64	; 0x40
    cc3a:	d049      	beq.n	ccd0 <le_init+0xa0>
{
    cc3c:	b510      	push	{r4, lr}
    cc3e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    cc40:	aa01      	add	r2, sp, #4
    cc42:	2100      	movs	r1, #0
    cc44:	f242 0003 	movw	r0, #8195	; 0x2003
    cc48:	f7ff ff3e 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    cc4c:	4603      	mov	r3, r0
    cc4e:	b110      	cbz	r0, cc56 <le_init+0x26>
}
    cc50:	4618      	mov	r0, r3
    cc52:	b002      	add	sp, #8
    cc54:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
    cc56:	9801      	ldr	r0, [sp, #4]
    cc58:	f7ff fdc8 	bl	c7ec <read_le_features_complete>
	net_buf_unref(rsp);
    cc5c:	9801      	ldr	r0, [sp, #4]
    cc5e:	f006 fc72 	bl	13546 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    cc62:	4b1f      	ldr	r3, [pc, #124]	; (cce0 <le_init+0xb0>)
    cc64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    cc68:	f013 0f20 	tst.w	r3, #32
    cc6c:	d018      	beq.n	cca0 <le_init+0x70>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    cc6e:	4b1c      	ldr	r3, [pc, #112]	; (cce0 <le_init+0xb0>)
    cc70:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    cc74:	f013 0f08 	tst.w	r3, #8
    cc78:	d00e      	beq.n	cc98 <le_init+0x68>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    cc7a:	aa01      	add	r2, sp, #4
    cc7c:	2100      	movs	r1, #0
    cc7e:	f242 001c 	movw	r0, #8220	; 0x201c
    cc82:	f7ff ff21 	bl	cac8 <bt_hci_cmd_send_sync>
		if (err) {
    cc86:	4603      	mov	r3, r0
    cc88:	2800      	cmp	r0, #0
    cc8a:	d1e1      	bne.n	cc50 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    cc8c:	9801      	ldr	r0, [sp, #4]
    cc8e:	f7ff fd75 	bl	c77c <le_read_supp_states_complete>
		net_buf_unref(rsp);
    cc92:	9801      	ldr	r0, [sp, #4]
    cc94:	f006 fc57 	bl	13546 <net_buf_unref>
	return  le_set_event_mask();
    cc98:	f006 f8ac 	bl	12df4 <le_set_event_mask>
    cc9c:	4603      	mov	r3, r0
    cc9e:	e7d7      	b.n	cc50 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    cca0:	2102      	movs	r1, #2
    cca2:	f640 406d 	movw	r0, #3181	; 0xc6d
    cca6:	f7ff fed1 	bl	ca4c <bt_hci_cmd_create>
		if (!buf) {
    ccaa:	4604      	mov	r4, r0
    ccac:	b1a0      	cbz	r0, ccd8 <le_init+0xa8>
    ccae:	2102      	movs	r1, #2
    ccb0:	300c      	adds	r0, #12
    ccb2:	f006 fc73 	bl	1359c <net_buf_simple_add>
		cp_le->le = 0x01;
    ccb6:	2301      	movs	r3, #1
    ccb8:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    ccba:	2200      	movs	r2, #0
    ccbc:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    ccbe:	4621      	mov	r1, r4
    ccc0:	f640 406d 	movw	r0, #3181	; 0xc6d
    ccc4:	f7ff ff00 	bl	cac8 <bt_hci_cmd_send_sync>
		if (err) {
    ccc8:	4603      	mov	r3, r0
    ccca:	2800      	cmp	r0, #0
    cccc:	d0cf      	beq.n	cc6e <le_init+0x3e>
    ccce:	e7bf      	b.n	cc50 <le_init+0x20>
		return -ENODEV;
    ccd0:	f06f 0312 	mvn.w	r3, #18
}
    ccd4:	4618      	mov	r0, r3
    ccd6:	4770      	bx	lr
			return -ENOBUFS;
    ccd8:	f06f 0368 	mvn.w	r3, #104	; 0x68
    ccdc:	e7b8      	b.n	cc50 <le_init+0x20>
    ccde:	bf00      	nop
    cce0:	200001a0 	.word	0x200001a0

0000cce4 <set_event_mask>:
{
    cce4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    cce6:	2108      	movs	r1, #8
    cce8:	f640 4001 	movw	r0, #3073	; 0xc01
    ccec:	f7ff feae 	bl	ca4c <bt_hci_cmd_create>
	if (!buf) {
    ccf0:	b188      	cbz	r0, cd16 <set_event_mask+0x32>
    ccf2:	4604      	mov	r4, r0
    ccf4:	2108      	movs	r1, #8
    ccf6:	300c      	adds	r0, #12
    ccf8:	f006 fc50 	bl	1359c <net_buf_simple_add>
    ccfc:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
    ccfe:	4807      	ldr	r0, [pc, #28]	; (cd1c <set_event_mask+0x38>)
    cd00:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    cd04:	f005 fffc 	bl	12d00 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    cd08:	2200      	movs	r2, #0
    cd0a:	4621      	mov	r1, r4
    cd0c:	f640 4001 	movw	r0, #3073	; 0xc01
    cd10:	f7ff feda 	bl	cac8 <bt_hci_cmd_send_sync>
}
    cd14:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
    cd16:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cd1a:	e7fb      	b.n	cd14 <set_event_mask+0x30>
    cd1c:	02008000 	.word	0x02008000

0000cd20 <hci_vs_init>:
{
    cd20:	b510      	push	{r4, lr}
    cd22:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    cd24:	aa01      	add	r2, sp, #4
    cd26:	2100      	movs	r1, #0
    cd28:	f64f 4001 	movw	r0, #64513	; 0xfc01
    cd2c:	f7ff fecc 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    cd30:	b108      	cbz	r0, cd36 <hci_vs_init+0x16>
}
    cd32:	b002      	add	sp, #8
    cd34:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    cd36:	9801      	ldr	r0, [sp, #4]
    cd38:	f006 fc05 	bl	13546 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    cd3c:	aa01      	add	r2, sp, #4
    cd3e:	2100      	movs	r1, #0
    cd40:	f64f 4002 	movw	r0, #64514	; 0xfc02
    cd44:	f7ff fec0 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    cd48:	2800      	cmp	r0, #0
    cd4a:	d1f2      	bne.n	cd32 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    cd4c:	9b01      	ldr	r3, [sp, #4]
    cd4e:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    cd50:	4c0f      	ldr	r4, [pc, #60]	; (cd90 <hci_vs_init+0x70>)
    cd52:	2202      	movs	r2, #2
    cd54:	3101      	adds	r1, #1
    cd56:	4620      	mov	r0, r4
    cd58:	f005 ff57 	bl	12c0a <memcpy>
	net_buf_unref(rsp);
    cd5c:	9801      	ldr	r0, [sp, #4]
    cd5e:	f006 fbf2 	bl	13546 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    cd62:	7823      	ldrb	r3, [r4, #0]
    cd64:	f013 0f04 	tst.w	r3, #4
    cd68:	d0e3      	beq.n	cd32 <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    cd6a:	aa01      	add	r2, sp, #4
    cd6c:	2100      	movs	r1, #0
    cd6e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    cd72:	f7ff fea9 	bl	cac8 <bt_hci_cmd_send_sync>
		if (err) {
    cd76:	2800      	cmp	r0, #0
    cd78:	d1db      	bne.n	cd32 <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
    cd7a:	9b01      	ldr	r3, [sp, #4]
    cd7c:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
    cd7e:	2201      	movs	r2, #1
    cd80:	4411      	add	r1, r2
    cd82:	1e60      	subs	r0, r4, #1
    cd84:	f005 ff41 	bl	12c0a <memcpy>
		net_buf_unref(rsp);
    cd88:	9801      	ldr	r0, [sp, #4]
    cd8a:	f006 fbdc 	bl	13546 <net_buf_unref>
    cd8e:	e7d0      	b.n	cd32 <hci_vs_init+0x12>
    cd90:	20000261 	.word	0x20000261

0000cd94 <hci_init>:
{
    cd94:	b508      	push	{r3, lr}
	err = common_init();
    cd96:	f7ff ff01 	bl	cb9c <common_init>
	if (err) {
    cd9a:	4603      	mov	r3, r0
    cd9c:	b108      	cbz	r0, cda2 <hci_init+0xe>
}
    cd9e:	4618      	mov	r0, r3
    cda0:	bd08      	pop	{r3, pc}
	err = le_init();
    cda2:	f7ff ff45 	bl	cc30 <le_init>
	if (err) {
    cda6:	4603      	mov	r3, r0
    cda8:	2800      	cmp	r0, #0
    cdaa:	d1f8      	bne.n	cd9e <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    cdac:	4b0a      	ldr	r3, [pc, #40]	; (cdd8 <hci_init+0x44>)
    cdae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    cdb2:	f013 0f20 	tst.w	r3, #32
    cdb6:	d104      	bne.n	cdc2 <hci_init+0x2e>
		err = bt_br_init();
    cdb8:	f005 ffef 	bl	12d9a <bt_br_init>
		if (err) {
    cdbc:	4603      	mov	r3, r0
    cdbe:	2800      	cmp	r0, #0
    cdc0:	d1ed      	bne.n	cd9e <hci_init+0xa>
	err = set_event_mask();
    cdc2:	f7ff ff8f 	bl	cce4 <set_event_mask>
	if (err) {
    cdc6:	4603      	mov	r3, r0
    cdc8:	2800      	cmp	r0, #0
    cdca:	d1e8      	bne.n	cd9e <hci_init+0xa>
	hci_vs_init();
    cdcc:	f7ff ffa8 	bl	cd20 <hci_vs_init>
	err = bt_id_init();
    cdd0:	f000 fbd4 	bl	d57c <bt_id_init>
    cdd4:	4603      	mov	r3, r0
	if (err) {
    cdd6:	e7e2      	b.n	cd9e <hci_init+0xa>
    cdd8:	200001a0 	.word	0x200001a0

0000cddc <bt_hci_le_rand>:
{
    cddc:	b570      	push	{r4, r5, r6, lr}
    cdde:	b082      	sub	sp, #8
    cde0:	4606      	mov	r6, r0
    cde2:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cde4:	4b12      	ldr	r3, [pc, #72]	; (ce30 <bt_hci_le_rand+0x54>)
    cde6:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    cdea:	2b00      	cmp	r3, #0
    cdec:	da1d      	bge.n	ce2a <bt_hci_le_rand+0x4e>
	while (len > 0) {
    cdee:	b1c4      	cbz	r4, ce22 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
    cdf0:	4625      	mov	r5, r4
    cdf2:	2c08      	cmp	r4, #8
    cdf4:	bf28      	it	cs
    cdf6:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cdf8:	aa01      	add	r2, sp, #4
    cdfa:	2100      	movs	r1, #0
    cdfc:	f242 0018 	movw	r0, #8216	; 0x2018
    ce00:	f7ff fe62 	bl	cac8 <bt_hci_cmd_send_sync>
		if (err) {
    ce04:	4603      	mov	r3, r0
    ce06:	b968      	cbnz	r0, ce24 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
    ce08:	9b01      	ldr	r3, [sp, #4]
    ce0a:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
    ce0c:	462a      	mov	r2, r5
    ce0e:	3101      	adds	r1, #1
    ce10:	4630      	mov	r0, r6
    ce12:	f005 fefa 	bl	12c0a <memcpy>
		net_buf_unref(rsp);
    ce16:	9801      	ldr	r0, [sp, #4]
    ce18:	f006 fb95 	bl	13546 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    ce1c:	442e      	add	r6, r5
		len -= count;
    ce1e:	1b64      	subs	r4, r4, r5
    ce20:	e7e5      	b.n	cdee <bt_hci_le_rand+0x12>
	return 0;
    ce22:	2300      	movs	r3, #0
}
    ce24:	4618      	mov	r0, r3
    ce26:	b002      	add	sp, #8
    ce28:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    ce2a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ce2e:	e7f9      	b.n	ce24 <bt_hci_le_rand+0x48>
    ce30:	200001a0 	.word	0x200001a0

0000ce34 <bt_send>:
{
    ce34:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    ce36:	4b03      	ldr	r3, [pc, #12]	; (ce44 <bt_send+0x10>)
    ce38:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    ce3c:	695b      	ldr	r3, [r3, #20]
    ce3e:	4798      	blx	r3
}
    ce40:	bd08      	pop	{r3, pc}
    ce42:	bf00      	nop
    ce44:	200001a0 	.word	0x200001a0

0000ce48 <send_cmd>:
{
    ce48:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    ce4a:	2200      	movs	r2, #0
    ce4c:	2300      	movs	r3, #0
    ce4e:	4821      	ldr	r0, [pc, #132]	; (ced4 <send_cmd+0x8c>)
    ce50:	f006 fb43 	bl	134da <net_buf_get>
	BT_ASSERT(buf);
    ce54:	4604      	mov	r4, r0
    ce56:	b1d8      	cbz	r0, ce90 <send_cmd+0x48>
    ce58:	4d1f      	ldr	r5, [pc, #124]	; (ced8 <send_cmd+0x90>)
    ce5a:	f04f 32ff 	mov.w	r2, #4294967295
    ce5e:	f04f 33ff 	mov.w	r3, #4294967295
    ce62:	4628      	mov	r0, r5
    ce64:	f003 fdf0 	bl	10a48 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    ce68:	69a8      	ldr	r0, [r5, #24]
    ce6a:	b130      	cbz	r0, ce7a <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
    ce6c:	f006 fb6b 	bl	13546 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ce70:	f1a5 03e8 	sub.w	r3, r5, #232	; 0xe8
    ce74:	2200      	movs	r2, #0
    ce76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    ce7a:	4620      	mov	r0, r4
    ce7c:	f006 fb86 	bl	1358c <net_buf_ref>
    ce80:	4b16      	ldr	r3, [pc, #88]	; (cedc <send_cmd+0x94>)
    ce82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
    ce86:	4620      	mov	r0, r4
    ce88:	f7ff ffd4 	bl	ce34 <bt_send>
	if (err) {
    ce8c:	b970      	cbnz	r0, ceac <send_cmd+0x64>
}
    ce8e:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    ce90:	f640 235a 	movw	r3, #2650	; 0xa5a
    ce94:	4a12      	ldr	r2, [pc, #72]	; (cee0 <send_cmd+0x98>)
    ce96:	4913      	ldr	r1, [pc, #76]	; (cee4 <send_cmd+0x9c>)
    ce98:	4813      	ldr	r0, [pc, #76]	; (cee8 <send_cmd+0xa0>)
    ce9a:	f005 fd6f 	bl	1297c <assert_print>
    ce9e:	4040      	eors	r0, r0
    cea0:	f380 8811 	msr	BASEPRI, r0
    cea4:	f04f 0003 	mov.w	r0, #3
    cea8:	df02      	svc	2
    ceaa:	e7d5      	b.n	ce58 <send_cmd+0x10>
	z_impl_k_sem_give(sem);
    ceac:	480a      	ldr	r0, [pc, #40]	; (ced8 <send_cmd+0x90>)
    ceae:	f003 fda3 	bl	109f8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    ceb2:	4620      	mov	r0, r4
    ceb4:	f006 fa67 	bl	13386 <net_buf_id>
    ceb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cebc:	4b0b      	ldr	r3, [pc, #44]	; (ceec <send_cmd+0xa4>)
    cebe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    cec2:	4622      	mov	r2, r4
    cec4:	211f      	movs	r1, #31
    cec6:	8858      	ldrh	r0, [r3, #2]
    cec8:	f7ff fc9a 	bl	c800 <hci_cmd_done>
		net_buf_unref(buf);
    cecc:	4620      	mov	r0, r4
    cece:	f006 fb3a 	bl	13546 <net_buf_unref>
    ced2:	e7dc      	b.n	ce8e <send_cmd+0x46>
    ced4:	200002ac 	.word	0x200002ac
    ced8:	20000288 	.word	0x20000288
    cedc:	200001a0 	.word	0x200001a0
    cee0:	00016438 	.word	0x00016438
    cee4:	000165a8 	.word	0x000165a8
    cee8:	00016488 	.word	0x00016488
    ceec:	20001a8c 	.word	0x20001a8c

0000cef0 <hci_tx_thread>:
{
    cef0:	b508      	push	{r3, lr}
    cef2:	e012      	b.n	cf1a <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
    cef4:	f640 23c8 	movw	r3, #2760	; 0xac8
    cef8:	4a0f      	ldr	r2, [pc, #60]	; (cf38 <hci_tx_thread+0x48>)
    cefa:	4910      	ldr	r1, [pc, #64]	; (cf3c <hci_tx_thread+0x4c>)
    cefc:	4810      	ldr	r0, [pc, #64]	; (cf40 <hci_tx_thread+0x50>)
    cefe:	f005 fd3d 	bl	1297c <assert_print>
    cf02:	4040      	eors	r0, r0
    cf04:	f380 8811 	msr	BASEPRI, r0
    cf08:	f04f 0003 	mov.w	r0, #3
    cf0c:	df02      	svc	2
		process_events(events, ev_count);
    cf0e:	2101      	movs	r1, #1
    cf10:	480c      	ldr	r0, [pc, #48]	; (cf44 <hci_tx_thread+0x54>)
    cf12:	f005 ff8a 	bl	12e2a <process_events>
	z_impl_k_yield();
    cf16:	f004 f9d7 	bl	112c8 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    cf1a:	480a      	ldr	r0, [pc, #40]	; (cf44 <hci_tx_thread+0x54>)
    cf1c:	68c3      	ldr	r3, [r0, #12]
    cf1e:	f36f 3394 	bfc	r3, #14, #7
    cf22:	60c3      	str	r3, [r0, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    cf24:	f04f 32ff 	mov.w	r2, #4294967295
    cf28:	f04f 33ff 	mov.w	r3, #4294967295
    cf2c:	2101      	movs	r1, #1
    cf2e:	f004 fcc9 	bl	118c4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    cf32:	2800      	cmp	r0, #0
    cf34:	d1de      	bne.n	cef4 <hci_tx_thread+0x4>
    cf36:	e7ea      	b.n	cf0e <hci_tx_thread+0x1e>
    cf38:	00016438 	.word	0x00016438
    cf3c:	000164d8 	.word	0x000164d8
    cf40:	00016488 	.word	0x00016488
    cf44:	20000390 	.word	0x20000390

0000cf48 <hci_event_prio>:
{
    cf48:	b570      	push	{r4, r5, r6, lr}
    cf4a:	b082      	sub	sp, #8
    cf4c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    cf4e:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    cf52:	4628      	mov	r0, r5
    cf54:	f006 fb42 	bl	135dc <net_buf_simple_headroom>
    cf58:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    cf5c:	8a23      	ldrh	r3, [r4, #16]
    cf5e:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cf62:	2b01      	cmp	r3, #1
    cf64:	d923      	bls.n	cfae <hci_event_prio+0x66>
	return net_buf_simple_pull_mem(&buf->b, len);
    cf66:	2102      	movs	r1, #2
    cf68:	4628      	mov	r0, r5
    cf6a:	f006 fb2f 	bl	135cc <net_buf_simple_pull_mem>
    cf6e:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    cf70:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    cf72:	2b05      	cmp	r3, #5
    cf74:	d02b      	beq.n	cfce <hci_event_prio+0x86>
    cf76:	d32c      	bcc.n	cfd2 <hci_event_prio+0x8a>
    cf78:	3b0e      	subs	r3, #14
    cf7a:	b2db      	uxtb	r3, r3
    cf7c:	2b01      	cmp	r3, #1
    cf7e:	d824      	bhi.n	cfca <hci_event_prio+0x82>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    cf80:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    cf82:	f016 0f01 	tst.w	r6, #1
    cf86:	d026      	beq.n	cfd6 <hci_event_prio+0x8e>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    cf88:	2302      	movs	r3, #2
    cf8a:	4a1c      	ldr	r2, [pc, #112]	; (cffc <hci_event_prio+0xb4>)
    cf8c:	4621      	mov	r1, r4
    cf8e:	7828      	ldrb	r0, [r5, #0]
    cf90:	f005 fefe 	bl	12d90 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    cf94:	f016 0f02 	tst.w	r6, #2
    cf98:	d02b      	beq.n	cff2 <hci_event_prio+0xaa>
	buf->data = buf->__buf + state->offset;
    cf9a:	6963      	ldr	r3, [r4, #20]
    cf9c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cfa0:	4413      	add	r3, r2
    cfa2:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
    cfa4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cfa8:	8223      	strh	r3, [r4, #16]
}
    cfaa:	b002      	add	sp, #8
    cfac:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cfae:	f640 636f 	movw	r3, #3695	; 0xe6f
    cfb2:	4a13      	ldr	r2, [pc, #76]	; (d000 <hci_event_prio+0xb8>)
    cfb4:	4913      	ldr	r1, [pc, #76]	; (d004 <hci_event_prio+0xbc>)
    cfb6:	4814      	ldr	r0, [pc, #80]	; (d008 <hci_event_prio+0xc0>)
    cfb8:	f005 fce0 	bl	1297c <assert_print>
    cfbc:	4040      	eors	r0, r0
    cfbe:	f380 8811 	msr	BASEPRI, r0
    cfc2:	f04f 0003 	mov.w	r0, #3
    cfc6:	df02      	svc	2
    cfc8:	e7cd      	b.n	cf66 <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
    cfca:	2602      	movs	r6, #2
    cfcc:	e7d9      	b.n	cf82 <hci_event_prio+0x3a>
	switch (evt) {
    cfce:	2603      	movs	r6, #3
    cfd0:	e7d7      	b.n	cf82 <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
    cfd2:	2602      	movs	r6, #2
    cfd4:	e7d5      	b.n	cf82 <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    cfd6:	f640 6373 	movw	r3, #3699	; 0xe73
    cfda:	4a09      	ldr	r2, [pc, #36]	; (d000 <hci_event_prio+0xb8>)
    cfdc:	490b      	ldr	r1, [pc, #44]	; (d00c <hci_event_prio+0xc4>)
    cfde:	480a      	ldr	r0, [pc, #40]	; (d008 <hci_event_prio+0xc0>)
    cfe0:	f005 fccc 	bl	1297c <assert_print>
    cfe4:	4040      	eors	r0, r0
    cfe6:	f380 8811 	msr	BASEPRI, r0
    cfea:	f04f 0003 	mov.w	r0, #3
    cfee:	df02      	svc	2
    cff0:	e7ca      	b.n	cf88 <hci_event_prio+0x40>
		net_buf_unref(buf);
    cff2:	4620      	mov	r0, r4
    cff4:	f006 faa7 	bl	13546 <net_buf_unref>
}
    cff8:	e7d7      	b.n	cfaa <hci_event_prio+0x62>
    cffa:	bf00      	nop
    cffc:	00016544 	.word	0x00016544
    d000:	00016438 	.word	0x00016438
    d004:	0001646c 	.word	0x0001646c
    d008:	00016488 	.word	0x00016488
    d00c:	00016510 	.word	0x00016510

0000d010 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    d010:	4b0a      	ldr	r3, [pc, #40]	; (d03c <bt_hci_driver_register+0x2c>)
    d012:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d016:	b943      	cbnz	r3, d02a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    d018:	68c3      	ldr	r3, [r0, #12]
    d01a:	b14b      	cbz	r3, d030 <bt_hci_driver_register+0x20>
    d01c:	6943      	ldr	r3, [r0, #20]
    d01e:	b153      	cbz	r3, d036 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    d020:	4b06      	ldr	r3, [pc, #24]	; (d03c <bt_hci_driver_register+0x2c>)
    d022:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	return 0;
    d026:	2000      	movs	r0, #0
    d028:	4770      	bx	lr
		return -EALREADY;
    d02a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d02e:	4770      	bx	lr
		return -EINVAL;
    d030:	f06f 0015 	mvn.w	r0, #21
    d034:	4770      	bx	lr
    d036:	f06f 0015 	mvn.w	r0, #21
}
    d03a:	4770      	bx	lr
    d03c:	200001a0 	.word	0x200001a0

0000d040 <bt_finalize_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d040:	4b06      	ldr	r3, [pc, #24]	; (d05c <bt_finalize_init+0x1c>)
    d042:	f3bf 8f5b 	dmb	ish
    d046:	e853 1f00 	ldrex	r1, [r3]
    d04a:	f041 0104 	orr.w	r1, r1, #4
    d04e:	e843 1200 	strex	r2, r1, [r3]
    d052:	2a00      	cmp	r2, #0
    d054:	d1f7      	bne.n	d046 <bt_finalize_init+0x6>
    d056:	f3bf 8f5b 	dmb	ish
}
    d05a:	4770      	bx	lr
    d05c:	20000274 	.word	0x20000274

0000d060 <init_work>:
{
    d060:	b508      	push	{r3, lr}
	err = bt_init();
    d062:	f005 ff1f 	bl	12ea4 <bt_init>
	if (ready_cb) {
    d066:	4b02      	ldr	r3, [pc, #8]	; (d070 <init_work+0x10>)
    d068:	681b      	ldr	r3, [r3, #0]
    d06a:	b103      	cbz	r3, d06e <init_work+0xe>
		ready_cb(err);
    d06c:	4798      	blx	r3
}
    d06e:	bd08      	pop	{r3, pc}
    d070:	20001aa4 	.word	0x20001aa4

0000d074 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    d074:	b5f0      	push	{r4, r5, r6, r7, lr}
    d076:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    d078:	4b36      	ldr	r3, [pc, #216]	; (d154 <bt_enable+0xe0>)
    d07a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d07e:	2b00      	cmp	r3, #0
    d080:	d061      	beq.n	d146 <bt_enable+0xd2>
    d082:	4605      	mov	r5, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d084:	4b34      	ldr	r3, [pc, #208]	; (d158 <bt_enable+0xe4>)
    d086:	f3bf 8f5b 	dmb	ish
    d08a:	e853 2f00 	ldrex	r2, [r3]
    d08e:	f022 0202 	bic.w	r2, r2, #2
    d092:	e843 2100 	strex	r1, r2, [r3]
    d096:	2900      	cmp	r1, #0
    d098:	d1f7      	bne.n	d08a <bt_enable+0x16>
    d09a:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d09e:	f3bf 8f5b 	dmb	ish
    d0a2:	e853 2f00 	ldrex	r2, [r3]
    d0a6:	f042 0101 	orr.w	r1, r2, #1
    d0aa:	e843 1000 	strex	r0, r1, [r3]
    d0ae:	2800      	cmp	r0, #0
    d0b0:	d1f7      	bne.n	d0a2 <bt_enable+0x2e>
    d0b2:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d0b6:	f012 0f01 	tst.w	r2, #1
    d0ba:	d147      	bne.n	d14c <bt_enable+0xd8>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    d0bc:	4b27      	ldr	r3, [pc, #156]	; (d15c <bt_enable+0xe8>)
    d0be:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d0c0:	4e27      	ldr	r6, [pc, #156]	; (d160 <bt_enable+0xec>)
    d0c2:	2201      	movs	r2, #1
    d0c4:	4611      	mov	r1, r2
    d0c6:	4630      	mov	r0, r6
    d0c8:	f008 f90d 	bl	152e6 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    d0cc:	f106 0024 	add.w	r0, r6, #36	; 0x24
    d0d0:	f008 f8e6 	bl	152a0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d0d4:	4f23      	ldr	r7, [pc, #140]	; (d164 <bt_enable+0xf0>)
    d0d6:	2200      	movs	r2, #0
    d0d8:	2300      	movs	r3, #0
    d0da:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d0de:	2400      	movs	r4, #0
    d0e0:	9404      	str	r4, [sp, #16]
    d0e2:	f06f 0308 	mvn.w	r3, #8
    d0e6:	9303      	str	r3, [sp, #12]
    d0e8:	9402      	str	r4, [sp, #8]
    d0ea:	9401      	str	r4, [sp, #4]
    d0ec:	9400      	str	r4, [sp, #0]
    d0ee:	4b1e      	ldr	r3, [pc, #120]	; (d168 <bt_enable+0xf4>)
    d0f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    d0f4:	491d      	ldr	r1, [pc, #116]	; (d16c <bt_enable+0xf8>)
    d0f6:	4638      	mov	r0, r7
    d0f8:	f008 f801 	bl	150fe <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    d0fc:	491c      	ldr	r1, [pc, #112]	; (d170 <bt_enable+0xfc>)
    d0fe:	4638      	mov	r0, r7
    d100:	f003 fa8e 	bl	10620 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
    d104:	4f1b      	ldr	r7, [pc, #108]	; (d174 <bt_enable+0x100>)
    d106:	4638      	mov	r0, r7
    d108:	f008 f9ed 	bl	154e6 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    d10c:	9400      	str	r4, [sp, #0]
    d10e:	f06f 0307 	mvn.w	r3, #7
    d112:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d116:	4918      	ldr	r1, [pc, #96]	; (d178 <bt_enable+0x104>)
    d118:	4638      	mov	r0, r7
    d11a:	f003 fdc5 	bl	10ca8 <k_work_queue_start>
    d11e:	4917      	ldr	r1, [pc, #92]	; (d17c <bt_enable+0x108>)
    d120:	4638      	mov	r0, r7
    d122:	f003 fa7d 	bl	10620 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    d126:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    d128:	68db      	ldr	r3, [r3, #12]
    d12a:	4798      	blx	r3
	if (err) {
    d12c:	4604      	mov	r4, r0
    d12e:	b918      	cbnz	r0, d138 <bt_enable+0xc4>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    d130:	b12d      	cbz	r5, d13e <bt_enable+0xca>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
    d132:	4813      	ldr	r0, [pc, #76]	; (d180 <bt_enable+0x10c>)
    d134:	f003 fdb0 	bl	10c98 <k_work_submit>
	return 0;
}
    d138:	4620      	mov	r0, r4
    d13a:	b009      	add	sp, #36	; 0x24
    d13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return bt_init();
    d13e:	f005 feb1 	bl	12ea4 <bt_init>
    d142:	4604      	mov	r4, r0
    d144:	e7f8      	b.n	d138 <bt_enable+0xc4>
		return -ENODEV;
    d146:	f06f 0412 	mvn.w	r4, #18
    d14a:	e7f5      	b.n	d138 <bt_enable+0xc4>
		return -EALREADY;
    d14c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    d150:	e7f2      	b.n	d138 <bt_enable+0xc4>
    d152:	bf00      	nop
    d154:	200001a0 	.word	0x200001a0
    d158:	20000274 	.word	0x20000274
    d15c:	20001aa4 	.word	0x20001aa4
    d160:	20000288 	.word	0x20000288
    d164:	200012e8 	.word	0x200012e8
    d168:	0000cef1 	.word	0x0000cef1
    d16c:	20002a40 	.word	0x20002a40
    d170:	0001652c 	.word	0x0001652c
    d174:	200013a0 	.word	0x200013a0
    d178:	20003080 	.word	0x20003080
    d17c:	00016534 	.word	0x00016534
    d180:	20000264 	.word	0x20000264

0000d184 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d184:	f3bf 8f5b 	dmb	ish
    d188:	4b03      	ldr	r3, [pc, #12]	; (d198 <bt_is_ready+0x14>)
    d18a:	6818      	ldr	r0, [r3, #0]
    d18c:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d190:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    d194:	4770      	bx	lr
    d196:	bf00      	nop
    d198:	20000274 	.word	0x20000274

0000d19c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    d19c:	4800      	ldr	r0, [pc, #0]	; (d1a0 <bt_get_name+0x4>)
    d19e:	4770      	bx	lr
    d1a0:	0001653c 	.word	0x0001653c

0000d1a4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    d1a4:	b570      	push	{r4, r5, r6, lr}
    d1a6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    d1a8:	2400      	movs	r4, #0
    d1aa:	e001      	b.n	d1b0 <id_find+0xc>
    d1ac:	3401      	adds	r4, #1
    d1ae:	b2e4      	uxtb	r4, r4
    d1b0:	4b09      	ldr	r3, [pc, #36]	; (d1d8 <id_find+0x34>)
    d1b2:	79db      	ldrb	r3, [r3, #7]
    d1b4:	42a3      	cmp	r3, r4
    d1b6:	d90b      	bls.n	d1d0 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    d1b8:	4626      	mov	r6, r4
    d1ba:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 *
 *  @sa bt_addr_le_eq
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    d1be:	2207      	movs	r2, #7
    d1c0:	4b05      	ldr	r3, [pc, #20]	; (d1d8 <id_find+0x34>)
    d1c2:	4419      	add	r1, r3
    d1c4:	4628      	mov	r0, r5
    d1c6:	f005 fd0e 	bl	12be6 <memcmp>
    d1ca:	2800      	cmp	r0, #0
    d1cc:	d1ee      	bne.n	d1ac <id_find+0x8>
    d1ce:	e001      	b.n	d1d4 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
    d1d0:	f06f 0601 	mvn.w	r6, #1
}
    d1d4:	4630      	mov	r0, r6
    d1d6:	bd70      	pop	{r4, r5, r6, pc}
    d1d8:	200001a0 	.word	0x200001a0

0000d1dc <set_random_address>:
{
    d1dc:	b570      	push	{r4, r5, r6, lr}
    d1de:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    d1e0:	2206      	movs	r2, #6
    d1e2:	4914      	ldr	r1, [pc, #80]	; (d234 <set_random_address+0x58>)
    d1e4:	f005 fcff 	bl	12be6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    d1e8:	4605      	mov	r5, r0
    d1ea:	b908      	cbnz	r0, d1f0 <set_random_address+0x14>
}
    d1ec:	4628      	mov	r0, r5
    d1ee:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    d1f0:	2106      	movs	r1, #6
    d1f2:	f242 0005 	movw	r0, #8197	; 0x2005
    d1f6:	f7ff fc29 	bl	ca4c <bt_hci_cmd_create>
	if (!buf) {
    d1fa:	4605      	mov	r5, r0
    d1fc:	b1b8      	cbz	r0, d22e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d1fe:	2206      	movs	r2, #6
    d200:	4621      	mov	r1, r4
    d202:	300c      	adds	r0, #12
    d204:	f006 f9d0 	bl	135a8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    d208:	2200      	movs	r2, #0
    d20a:	4629      	mov	r1, r5
    d20c:	f242 0005 	movw	r0, #8197	; 0x2005
    d210:	f7ff fc5a 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    d214:	4605      	mov	r5, r0
    d216:	2800      	cmp	r0, #0
    d218:	d1e8      	bne.n	d1ec <set_random_address+0x10>
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    d21a:	4e06      	ldr	r6, [pc, #24]	; (d234 <set_random_address+0x58>)
    d21c:	2206      	movs	r2, #6
    d21e:	4621      	mov	r1, r4
    d220:	4630      	mov	r0, r6
    d222:	f005 fcf2 	bl	12c0a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    d226:	2301      	movs	r3, #1
    d228:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
    d22c:	e7de      	b.n	d1ec <set_random_address+0x10>
		return -ENOBUFS;
    d22e:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d232:	e7db      	b.n	d1ec <set_random_address+0x10>
    d234:	20000209 	.word	0x20000209

0000d238 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
    d238:	b570      	push	{r4, r5, r6, lr}
    d23a:	b082      	sub	sp, #8
    d23c:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d23e:	460e      	mov	r6, r1
    d240:	b129      	cbz	r1, d24e <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
    d242:	2207      	movs	r2, #7
    d244:	4915      	ldr	r1, [pc, #84]	; (d29c <id_create+0x64>)
    d246:	4630      	mov	r0, r6
    d248:	f005 fccd 	bl	12be6 <memcmp>
    d24c:	b9d8      	cbnz	r0, d286 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
    d24e:	4668      	mov	r0, sp
    d250:	f005 fd48 	bl	12ce4 <bt_addr_le_create_static>
			if (err) {
    d254:	4604      	mov	r4, r0
    d256:	b998      	cbnz	r0, d280 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
    d258:	4668      	mov	r0, sp
    d25a:	f7ff ffa3 	bl	d1a4 <id_find>
    d25e:	2800      	cmp	r0, #0
    d260:	daf5      	bge.n	d24e <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    d262:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    d266:	4b0e      	ldr	r3, [pc, #56]	; (d2a0 <id_create+0x68>)
    d268:	441d      	add	r5, r3
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    d26a:	2207      	movs	r2, #7
    d26c:	4669      	mov	r1, sp
    d26e:	4628      	mov	r0, r5
    d270:	f005 fccb 	bl	12c0a <memcpy>

		if (addr) {
    d274:	b126      	cbz	r6, d280 <id_create+0x48>
    d276:	2207      	movs	r2, #7
    d278:	4629      	mov	r1, r5
    d27a:	4630      	mov	r0, r6
    d27c:	f005 fcc5 	bl	12c0a <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
    d280:	4620      	mov	r0, r4
    d282:	b002      	add	sp, #8
    d284:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    d286:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    d28a:	2207      	movs	r2, #7
    d28c:	4631      	mov	r1, r6
    d28e:	4804      	ldr	r0, [pc, #16]	; (d2a0 <id_create+0x68>)
    d290:	4428      	add	r0, r5
    d292:	f005 fcba 	bl	12c0a <memcpy>
	return 0;
    d296:	2400      	movs	r4, #0
}
    d298:	e7f2      	b.n	d280 <id_create+0x48>
    d29a:	bf00      	nop
    d29c:	000163f8 	.word	0x000163f8
    d2a0:	200001a0 	.word	0x200001a0

0000d2a4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    d2a4:	b570      	push	{r4, r5, r6, lr}
    d2a6:	b084      	sub	sp, #16
    d2a8:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d2aa:	4605      	mov	r5, r0
    d2ac:	b188      	cbz	r0, d2d2 <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
    d2ae:	2207      	movs	r2, #7
    d2b0:	4926      	ldr	r1, [pc, #152]	; (d34c <bt_id_create+0xa8>)
    d2b2:	f005 fc98 	bl	12be6 <memcmp>
    d2b6:	b160      	cbz	r0, d2d2 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d2b8:	782b      	ldrb	r3, [r5, #0]
    d2ba:	2b01      	cmp	r3, #1
    d2bc:	d136      	bne.n	d32c <bt_id_create+0x88>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
    d2be:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d2c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d2c4:	2bc0      	cmp	r3, #192	; 0xc0
    d2c6:	d134      	bne.n	d332 <bt_id_create+0x8e>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
    d2c8:	4628      	mov	r0, r5
    d2ca:	f7ff ff6b 	bl	d1a4 <id_find>
    d2ce:	2800      	cmp	r0, #0
    d2d0:	da32      	bge.n	d338 <bt_id_create+0x94>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    d2d2:	2c00      	cmp	r4, #0
    d2d4:	d133      	bne.n	d33e <bt_id_create+0x9a>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    d2d6:	4b1e      	ldr	r3, [pc, #120]	; (d350 <bt_id_create+0xac>)
    d2d8:	79db      	ldrb	r3, [r3, #7]
    d2da:	2b01      	cmp	r3, #1
    d2dc:	d032      	beq.n	d344 <bt_id_create+0xa0>
    d2de:	f3bf 8f5b 	dmb	ish
    d2e2:	4b1c      	ldr	r3, [pc, #112]	; (d354 <bt_id_create+0xb0>)
    d2e4:	681b      	ldr	r3, [r3, #0]
    d2e6:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d2ea:	f013 0f01 	tst.w	r3, #1
    d2ee:	d10b      	bne.n	d308 <bt_id_create+0x64>
		uint8_t zero_irk[16] = { 0 };
    d2f0:	2300      	movs	r3, #0
    d2f2:	9300      	str	r3, [sp, #0]
    d2f4:	9301      	str	r3, [sp, #4]
    d2f6:	9302      	str	r3, [sp, #8]
    d2f8:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    d2fa:	b1a5      	cbz	r5, d326 <bt_id_create+0x82>
    d2fc:	2207      	movs	r2, #7
    d2fe:	4913      	ldr	r1, [pc, #76]	; (d34c <bt_id_create+0xa8>)
    d300:	4628      	mov	r0, r5
    d302:	f005 fc70 	bl	12be6 <memcmp>
    d306:	b170      	cbz	r0, d326 <bt_id_create+0x82>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
    d308:	4b11      	ldr	r3, [pc, #68]	; (d350 <bt_id_create+0xac>)
    d30a:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
    d30c:	4622      	mov	r2, r4
    d30e:	4629      	mov	r1, r5
    d310:	4630      	mov	r0, r6
    d312:	f7ff ff91 	bl	d238 <id_create>
	if (err) {
    d316:	b920      	cbnz	r0, d322 <bt_id_create+0x7e>
		return err;
	} else {
		bt_dev.id_count++;
    d318:	4a0d      	ldr	r2, [pc, #52]	; (d350 <bt_id_create+0xac>)
    d31a:	79d3      	ldrb	r3, [r2, #7]
    d31c:	3301      	adds	r3, #1
    d31e:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
    d320:	4630      	mov	r0, r6
}
    d322:	b004      	add	sp, #16
    d324:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    d326:	f06f 0015 	mvn.w	r0, #21
    d32a:	e7fa      	b.n	d322 <bt_id_create+0x7e>
			return -EINVAL;
    d32c:	f06f 0015 	mvn.w	r0, #21
    d330:	e7f7      	b.n	d322 <bt_id_create+0x7e>
    d332:	f06f 0015 	mvn.w	r0, #21
    d336:	e7f4      	b.n	d322 <bt_id_create+0x7e>
			return -EALREADY;
    d338:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d33c:	e7f1      	b.n	d322 <bt_id_create+0x7e>
		return -EINVAL;
    d33e:	f06f 0015 	mvn.w	r0, #21
    d342:	e7ee      	b.n	d322 <bt_id_create+0x7e>
		return -ENOMEM;
    d344:	f06f 000b 	mvn.w	r0, #11
    d348:	e7eb      	b.n	d322 <bt_id_create+0x7e>
    d34a:	bf00      	nop
    d34c:	000163f8 	.word	0x000163f8
    d350:	200001a0 	.word	0x200001a0
    d354:	20000274 	.word	0x20000274

0000d358 <bt_id_read_public_addr>:
{
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    d358:	b360      	cbz	r0, d3b4 <bt_id_read_public_addr+0x5c>
{
    d35a:	b530      	push	{r4, r5, lr}
    d35c:	b083      	sub	sp, #12
    d35e:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    d360:	aa01      	add	r2, sp, #4
    d362:	2100      	movs	r1, #0
    d364:	f241 0009 	movw	r0, #4105	; 0x1009
    d368:	f7ff fbae 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    d36c:	b110      	cbz	r0, d374 <bt_id_read_public_addr+0x1c>
		LOG_WRN("Failed to read public address");
		return 0U;
    d36e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    d370:	b003      	add	sp, #12
    d372:	bd30      	pop	{r4, r5, pc}
	rp = (void *)rsp->data;
    d374:	9b01      	ldr	r3, [sp, #4]
    d376:	68dc      	ldr	r4, [r3, #12]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d378:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
    d37a:	2206      	movs	r2, #6
    d37c:	490e      	ldr	r1, [pc, #56]	; (d3b8 <bt_id_read_public_addr+0x60>)
    d37e:	4620      	mov	r0, r4
    d380:	f005 fc31 	bl	12be6 <memcmp>
    d384:	b128      	cbz	r0, d392 <bt_id_read_public_addr+0x3a>
    d386:	2206      	movs	r2, #6
    d388:	490c      	ldr	r1, [pc, #48]	; (d3bc <bt_id_read_public_addr+0x64>)
    d38a:	4620      	mov	r0, r4
    d38c:	f005 fc2b 	bl	12be6 <memcmp>
    d390:	b920      	cbnz	r0, d39c <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
    d392:	9801      	ldr	r0, [sp, #4]
    d394:	f006 f8d7 	bl	13546 <net_buf_unref>
		return 0U;
    d398:	2000      	movs	r0, #0
    d39a:	e7e9      	b.n	d370 <bt_id_read_public_addr+0x18>
	memcpy(dst, src, sizeof(*dst));
    d39c:	2206      	movs	r2, #6
    d39e:	4621      	mov	r1, r4
    d3a0:	1c68      	adds	r0, r5, #1
    d3a2:	f005 fc32 	bl	12c0a <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
    d3a6:	2300      	movs	r3, #0
    d3a8:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
    d3aa:	9801      	ldr	r0, [sp, #4]
    d3ac:	f006 f8cb 	bl	13546 <net_buf_unref>
	return 1U;
    d3b0:	2001      	movs	r0, #1
    d3b2:	e7dd      	b.n	d370 <bt_id_read_public_addr+0x18>
		return 0U;
    d3b4:	2000      	movs	r0, #0
}
    d3b6:	4770      	bx	lr
    d3b8:	00016408 	.word	0x00016408
    d3bc:	00016400 	.word	0x00016400

0000d3c0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    d3c0:	b500      	push	{lr}
    d3c2:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    d3c4:	4668      	mov	r0, sp
    d3c6:	f7ff ffc7 	bl	d358 <bt_id_read_public_addr>
    d3ca:	4b06      	ldr	r3, [pc, #24]	; (d3e4 <bt_setup_public_id_addr+0x24>)
    d3cc:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    d3ce:	b918      	cbnz	r0, d3d8 <bt_setup_public_id_addr+0x18>
		return 0;
    d3d0:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
    d3d2:	b003      	add	sp, #12
    d3d4:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
    d3d8:	2200      	movs	r2, #0
    d3da:	4669      	mov	r1, sp
    d3dc:	4610      	mov	r0, r2
    d3de:	f7ff ff2b 	bl	d238 <id_create>
    d3e2:	e7f6      	b.n	d3d2 <bt_setup_public_id_addr+0x12>
    d3e4:	200001a0 	.word	0x200001a0

0000d3e8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    d3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3ec:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d3ee:	4b16      	ldr	r3, [pc, #88]	; (d448 <bt_read_static_addr+0x60>)
    d3f0:	f893 50c2 	ldrb.w	r5, [r3, #194]	; 0xc2
    d3f4:	f015 0501 	ands.w	r5, r5, #1
    d3f8:	d103      	bne.n	d402 <bt_read_static_addr+0x1a>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    d3fa:	4628      	mov	r0, r5
    d3fc:	b002      	add	sp, #8
    d3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d402:	4606      	mov	r6, r0
    d404:	4688      	mov	r8, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    d406:	aa01      	add	r2, sp, #4
    d408:	2100      	movs	r1, #0
    d40a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    d40e:	f7ff fb5b 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    d412:	4604      	mov	r4, r0
    d414:	b9a8      	cbnz	r0, d442 <bt_read_static_addr+0x5a>
	rp = (void *)rsp->data;
    d416:	9b01      	ldr	r3, [sp, #4]
    d418:	68df      	ldr	r7, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    d41a:	787d      	ldrb	r5, [r7, #1]
    d41c:	4545      	cmp	r5, r8
    d41e:	bf28      	it	cs
    d420:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
    d422:	e008      	b.n	d436 <bt_read_static_addr+0x4e>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    d424:	2216      	movs	r2, #22
    d426:	fb02 f004 	mul.w	r0, r2, r4
    d42a:	1839      	adds	r1, r7, r0
    d42c:	3102      	adds	r1, #2
    d42e:	4430      	add	r0, r6
    d430:	f005 fbeb 	bl	12c0a <memcpy>
	for (i = 0; i < cnt; i++) {
    d434:	3401      	adds	r4, #1
    d436:	42a5      	cmp	r5, r4
    d438:	dcf4      	bgt.n	d424 <bt_read_static_addr+0x3c>
	net_buf_unref(rsp);
    d43a:	9801      	ldr	r0, [sp, #4]
    d43c:	f006 f883 	bl	13546 <net_buf_unref>
	if (!cnt) {
    d440:	e7db      	b.n	d3fa <bt_read_static_addr+0x12>
		return 0;
    d442:	2500      	movs	r5, #0
    d444:	e7d9      	b.n	d3fa <bt_read_static_addr+0x12>
    d446:	bf00      	nop
    d448:	200001a0 	.word	0x200001a0

0000d44c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    d44c:	b510      	push	{r4, lr}
    d44e:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    d450:	4b17      	ldr	r3, [pc, #92]	; (d4b0 <bt_setup_random_id_addr+0x64>)
    d452:	79dc      	ldrb	r4, [r3, #7]
    d454:	b934      	cbnz	r4, d464 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    d456:	2101      	movs	r1, #1
    d458:	a802      	add	r0, sp, #8
    d45a:	f7ff ffc5 	bl	d3e8 <bt_read_static_addr>
    d45e:	4b14      	ldr	r3, [pc, #80]	; (d4b0 <bt_setup_random_id_addr+0x64>)
    d460:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
    d462:	b948      	cbnz	r0, d478 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    d464:	2100      	movs	r1, #0
    d466:	4608      	mov	r0, r1
    d468:	f7ff ff1c 	bl	d2a4 <bt_id_create>
    d46c:	4603      	mov	r3, r0
}
    d46e:	4618      	mov	r0, r3
    d470:	b008      	add	sp, #32
    d472:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    d474:	3401      	adds	r4, #1
    d476:	b2e4      	uxtb	r4, r4
    d478:	4b0d      	ldr	r3, [pc, #52]	; (d4b0 <bt_setup_random_id_addr+0x64>)
    d47a:	79db      	ldrb	r3, [r3, #7]
    d47c:	42a3      	cmp	r3, r4
    d47e:	d914      	bls.n	d4aa <bt_setup_random_id_addr+0x5e>
    d480:	2206      	movs	r2, #6
    d482:	2116      	movs	r1, #22
    d484:	ab02      	add	r3, sp, #8
    d486:	fb01 3104 	mla	r1, r1, r4, r3
    d48a:	f10d 0001 	add.w	r0, sp, #1
    d48e:	f005 fbbc 	bl	12c0a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    d492:	2301      	movs	r3, #1
    d494:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    d498:	2200      	movs	r2, #0
    d49a:	4669      	mov	r1, sp
    d49c:	4620      	mov	r0, r4
    d49e:	f7ff fecb 	bl	d238 <id_create>
				if (err) {
    d4a2:	4603      	mov	r3, r0
    d4a4:	2800      	cmp	r0, #0
    d4a6:	d0e5      	beq.n	d474 <bt_setup_random_id_addr+0x28>
    d4a8:	e7e1      	b.n	d46e <bt_setup_random_id_addr+0x22>
			return 0;
    d4aa:	2300      	movs	r3, #0
    d4ac:	e7df      	b.n	d46e <bt_setup_random_id_addr+0x22>
    d4ae:	bf00      	nop
    d4b0:	200001a0 	.word	0x200001a0

0000d4b4 <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    d4b4:	2800      	cmp	r0, #0
    d4b6:	d051      	beq.n	d55c <bt_id_set_adv_own_addr+0xa8>
{
    d4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4ba:	460e      	mov	r6, r1
    d4bc:	4617      	mov	r7, r2
    d4be:	461d      	mov	r5, r3
    d4c0:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
    d4c2:	2d00      	cmp	r5, #0
    d4c4:	d04d      	beq.n	d562 <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
    d4c6:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    d4c8:	f011 0f01 	tst.w	r1, #1
    d4cc:	d029      	beq.n	d522 <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    d4ce:	b142      	cbz	r2, d4e2 <bt_id_set_adv_own_addr+0x2e>
    d4d0:	f011 0f20 	tst.w	r1, #32
    d4d4:	d005      	beq.n	d4e2 <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    d4d6:	4a28      	ldr	r2, [pc, #160]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d4d8:	f892 20d8 	ldrb.w	r2, [r2, #216]	; 0xd8
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    d4dc:	f012 0f40 	tst.w	r2, #64	; 0x40
    d4e0:	d042      	beq.n	d568 <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    d4e2:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    d4e6:	4924      	ldr	r1, [pc, #144]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d4e8:	5c8a      	ldrb	r2, [r1, r2]
    d4ea:	2a01      	cmp	r2, #1
    d4ec:	d00e      	beq.n	d50c <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    d4ee:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    d4f2:	4b21      	ldr	r3, [pc, #132]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d4f4:	5d1b      	ldrb	r3, [r3, r4]
    d4f6:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    d4f8:	2f00      	cmp	r7, #0
    d4fa:	d038      	beq.n	d56e <bt_id_set_adv_own_addr+0xba>
    d4fc:	f016 0f20 	tst.w	r6, #32
    d500:	d037      	beq.n	d572 <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    d502:	f043 0302 	orr.w	r3, r3, #2
    d506:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    d508:	2000      	movs	r0, #0
    d50a:	e019      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    d50c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    d510:	4a19      	ldr	r2, [pc, #100]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d512:	4411      	add	r1, r2
    d514:	3101      	adds	r1, #1
    d516:	4618      	mov	r0, r3
    d518:	f005 fcce 	bl	12eb8 <bt_id_set_adv_random_addr>
				if (err) {
    d51c:	2800      	cmp	r0, #0
    d51e:	d0e6      	beq.n	d4ee <bt_id_set_adv_own_addr+0x3a>
    d520:	e00e      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    d522:	f011 0f04 	tst.w	r1, #4
    d526:	d014      	beq.n	d552 <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    d528:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    d52c:	4912      	ldr	r1, [pc, #72]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d52e:	5c8a      	ldrb	r2, [r1, r2]
    d530:	2a01      	cmp	r2, #1
    d532:	d006      	beq.n	d542 <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
    d534:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
    d536:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    d53a:	4b0f      	ldr	r3, [pc, #60]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d53c:	5d1b      	ldrb	r3, [r3, r4]
    d53e:	702b      	strb	r3, [r5, #0]
}
    d540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    d542:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    d546:	4a0c      	ldr	r2, [pc, #48]	; (d578 <bt_id_set_adv_own_addr+0xc4>)
    d548:	4411      	add	r1, r2
    d54a:	3101      	adds	r1, #1
    d54c:	f005 fcb4 	bl	12eb8 <bt_id_set_adv_random_addr>
    d550:	e7f1      	b.n	d536 <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
    d552:	f005 fcbe 	bl	12ed2 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d556:	2301      	movs	r3, #1
    d558:	702b      	strb	r3, [r5, #0]
		if (err) {
    d55a:	e7f1      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
    d55c:	f06f 0015 	mvn.w	r0, #21
}
    d560:	4770      	bx	lr
		return -EINVAL;
    d562:	f06f 0015 	mvn.w	r0, #21
    d566:	e7eb      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
    d568:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d56c:	e7e8      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
	return 0;
    d56e:	2000      	movs	r0, #0
    d570:	e7e6      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
    d572:	2000      	movs	r0, #0
    d574:	e7e4      	b.n	d540 <bt_id_set_adv_own_addr+0x8c>
    d576:	bf00      	nop
    d578:	200001a0 	.word	0x200001a0

0000d57c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    d57c:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d57e:	4b0a      	ldr	r3, [pc, #40]	; (d5a8 <bt_id_init+0x2c>)
    d580:	79db      	ldrb	r3, [r3, #7]
    d582:	b123      	cbz	r3, d58e <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d584:	4b08      	ldr	r3, [pc, #32]	; (d5a8 <bt_id_init+0x2c>)
    d586:	79db      	ldrb	r3, [r3, #7]
    d588:	b133      	cbz	r3, d598 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    d58a:	2000      	movs	r0, #0
}
    d58c:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
    d58e:	f7ff ff17 	bl	d3c0 <bt_setup_public_id_addr>
		if (err) {
    d592:	2800      	cmp	r0, #0
    d594:	d0f6      	beq.n	d584 <bt_id_init+0x8>
    d596:	e7f9      	b.n	d58c <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
    d598:	f7ff ff58 	bl	d44c <bt_setup_random_id_addr>
		if (err) {
    d59c:	2800      	cmp	r0, #0
    d59e:	d1f5      	bne.n	d58c <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
    d5a0:	4802      	ldr	r0, [pc, #8]	; (d5ac <bt_id_init+0x30>)
    d5a2:	f7ff fe1b 	bl	d1dc <set_random_address>
		if (err) {
    d5a6:	e7f1      	b.n	d58c <bt_id_init+0x10>
    d5a8:	200001a0 	.word	0x200001a0
    d5ac:	200001a1 	.word	0x200001a1

0000d5b0 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
    d5b0:	4800      	ldr	r0, [pc, #0]	; (d5b4 <adv_get_legacy+0x4>)
    d5b2:	4770      	bx	lr
    d5b4:	200001b8 	.word	0x200001b8

0000d5b8 <valid_adv_ext_param>:

	return bt_le_adv_set_enable_legacy(adv, enable);
}

static bool valid_adv_ext_param(const struct bt_le_adv_param *param)
{
    d5b8:	b510      	push	{r4, lr}
    d5ba:	4604      	mov	r4, r0
	    (param->options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
		/* own addr type used for both RPAs in directed advertising. */
		return false;
	}

	if (param->id >= bt_dev.id_count ||
    d5bc:	7800      	ldrb	r0, [r0, #0]
    d5be:	4b21      	ldr	r3, [pc, #132]	; (d644 <valid_adv_ext_param+0x8c>)
    d5c0:	79db      	ldrb	r3, [r3, #7]
    d5c2:	4298      	cmp	r0, r3
    d5c4:	d301      	bcc.n	d5ca <valid_adv_ext_param+0x12>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
		return false;
    d5c6:	2000      	movs	r0, #0
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_39)) {
		return false;
	}

	return true;
}
    d5c8:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    d5ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
    d5ce:	2207      	movs	r2, #7
    d5d0:	491d      	ldr	r1, [pc, #116]	; (d648 <valid_adv_ext_param+0x90>)
    d5d2:	4b1c      	ldr	r3, [pc, #112]	; (d644 <valid_adv_ext_param+0x8c>)
    d5d4:	4418      	add	r0, r3
    d5d6:	f005 fb06 	bl	12be6 <memcmp>
	if (param->id >= bt_dev.id_count ||
    d5da:	2800      	cmp	r0, #0
    d5dc:	d0f3      	beq.n	d5c6 <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    d5de:	6863      	ldr	r3, [r4, #4]
    d5e0:	f013 0f01 	tst.w	r3, #1
    d5e4:	d107      	bne.n	d5f6 <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    d5e6:	4a17      	ldr	r2, [pc, #92]	; (d644 <valid_adv_ext_param+0x8c>)
    d5e8:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    d5ec:	2a08      	cmp	r2, #8
    d5ee:	d802      	bhi.n	d5f6 <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
    d5f0:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    d5f2:	2a9f      	cmp	r2, #159	; 0x9f
    d5f4:	d91b      	bls.n	d62e <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    d5f6:	f013 0f30 	tst.w	r3, #48	; 0x30
    d5fa:	d001      	beq.n	d600 <valid_adv_ext_param+0x48>
	    !param->peer) {
    d5fc:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    d5fe:	b1c2      	cbz	r2, d632 <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    d600:	f013 0f10 	tst.w	r3, #16
    d604:	d108      	bne.n	d618 <valid_adv_ext_param+0x60>
	    !param->peer) {
    d606:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    d608:	b132      	cbz	r2, d618 <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    d60a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    d60e:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
    d612:	d014      	beq.n	d63e <valid_adv_ext_param+0x86>
	return true;
    d614:	2001      	movs	r0, #1
    d616:	e7d7      	b.n	d5c8 <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
    d618:	68a2      	ldr	r2, [r4, #8]
    d61a:	68e1      	ldr	r1, [r4, #12]
    d61c:	428a      	cmp	r2, r1
    d61e:	d80a      	bhi.n	d636 <valid_adv_ext_param+0x7e>
    d620:	2a1f      	cmp	r2, #31
    d622:	d90a      	bls.n	d63a <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
    d624:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    d628:	d9ef      	bls.n	d60a <valid_adv_ext_param+0x52>
			return false;
    d62a:	2000      	movs	r0, #0
    d62c:	e7cc      	b.n	d5c8 <valid_adv_ext_param+0x10>
			return false;
    d62e:	2000      	movs	r0, #0
    d630:	e7ca      	b.n	d5c8 <valid_adv_ext_param+0x10>
		return false;
    d632:	2000      	movs	r0, #0
    d634:	e7c8      	b.n	d5c8 <valid_adv_ext_param+0x10>
			return false;
    d636:	2000      	movs	r0, #0
    d638:	e7c6      	b.n	d5c8 <valid_adv_ext_param+0x10>
    d63a:	2000      	movs	r0, #0
    d63c:	e7c4      	b.n	d5c8 <valid_adv_ext_param+0x10>
		return false;
    d63e:	2000      	movs	r0, #0
    d640:	e7c2      	b.n	d5c8 <valid_adv_ext_param+0x10>
    d642:	bf00      	nop
    d644:	200001a0 	.word	0x200001a0
    d648:	000163f8 	.word	0x000163f8

0000d64c <bt_le_adv_lookup_legacy>:
}
    d64c:	4800      	ldr	r0, [pc, #0]	; (d650 <bt_le_adv_lookup_legacy+0x4>)
    d64e:	4770      	bx	lr
    d650:	200001b8 	.word	0x200001b8

0000d654 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d658:	b08b      	sub	sp, #44	; 0x2c
    d65a:	9205      	str	r2, [sp, #20]
    d65c:	4699      	mov	r9, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    d65e:	690e      	ldr	r6, [r1, #16]
    d660:	f1b6 0b00 	subs.w	fp, r6, #0
    d664:	bf18      	it	ne
    d666:	f04f 0b01 	movne.w	fp, #1
    d66a:	f3bf 8f5b 	dmb	ish
    d66e:	4b88      	ldr	r3, [pc, #544]	; (d890 <bt_le_adv_start_legacy+0x23c>)
    d670:	681b      	ldr	r3, [r3, #0]
    d672:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d676:	f013 0f04 	tst.w	r3, #4
    d67a:	f000 80fa 	beq.w	d872 <bt_le_adv_start_legacy+0x21e>
    d67e:	4605      	mov	r5, r0
    d680:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    d682:	4608      	mov	r0, r1
    d684:	f005 fd9d 	bl	131c2 <valid_adv_param>
    d688:	2800      	cmp	r0, #0
    d68a:	f000 80f5 	beq.w	d878 <bt_le_adv_start_legacy+0x224>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
    d68e:	4620      	mov	r0, r4
    d690:	f005 fc38 	bl	12f04 <bt_id_adv_random_addr_check>
    d694:	4682      	mov	sl, r0
    d696:	2800      	cmp	r0, #0
    d698:	f000 80f1 	beq.w	d87e <bt_le_adv_start_legacy+0x22a>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    d69c:	f105 0710 	add.w	r7, r5, #16
    d6a0:	2107      	movs	r1, #7
    d6a2:	4638      	mov	r0, r7
    d6a4:	f005 fc64 	bl	12f70 <atomic_test_bit>
    d6a8:	9004      	str	r0, [sp, #16]
    d6aa:	2800      	cmp	r0, #0
    d6ac:	f040 80ea 	bne.w	d884 <bt_le_adv_start_legacy+0x230>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    d6b0:	220f      	movs	r2, #15
    d6b2:	2100      	movs	r1, #0
    d6b4:	a806      	add	r0, sp, #24
    d6b6:	f005 fad7 	bl	12c68 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    d6ba:	68a3      	ldr	r3, [r4, #8]
    d6bc:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    d6c0:	68e3      	ldr	r3, [r4, #12]
    d6c2:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = get_adv_channel_map(param->options);
    d6c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
    d6ca:	4640      	mov	r0, r8
    d6cc:	f005 fc3e 	bl	12f4c <get_adv_channel_map>
    d6d0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	set_param.filter_policy = get_filter_policy(param->options);
    d6d4:	4640      	mov	r0, r8
    d6d6:	f005 fc37 	bl	12f48 <get_filter_policy>
    d6da:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

	if (adv->id != param->id) {
    d6de:	782a      	ldrb	r2, [r5, #0]
    d6e0:	7823      	ldrb	r3, [r4, #0]
    d6e2:	429a      	cmp	r2, r3
    d6e4:	d00c      	beq.n	d700 <bt_le_adv_start_legacy+0xac>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d6e6:	4b6a      	ldr	r3, [pc, #424]	; (d890 <bt_le_adv_start_legacy+0x23c>)
    d6e8:	f3bf 8f5b 	dmb	ish
    d6ec:	e853 1f00 	ldrex	r1, [r3]
    d6f0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    d6f4:	e843 1200 	strex	r2, r1, [r3]
    d6f8:	2a00      	cmp	r2, #0
    d6fa:	d1f7      	bne.n	d6ec <bt_le_adv_start_legacy+0x98>
    d6fc:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    d700:	7823      	ldrb	r3, [r4, #0]
    d702:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    d704:	4a63      	ldr	r2, [pc, #396]	; (d894 <bt_le_adv_start_legacy+0x240>)
    d706:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    d70a:	f10d 031d 	add.w	r3, sp, #29
    d70e:	465a      	mov	r2, fp
    d710:	6861      	ldr	r1, [r4, #4]
    d712:	4628      	mov	r0, r5
    d714:	f7ff fece 	bl	d4b4 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
    d718:	4680      	mov	r8, r0
    d71a:	2800      	cmp	r0, #0
    d71c:	f040 8083 	bne.w	d826 <bt_le_adv_start_legacy+0x1d2>
		return err;
	}

	if (dir_adv) {
    d720:	b1ee      	cbz	r6, d75e <bt_le_adv_start_legacy+0x10a>
	memcpy(dst, src, sizeof(*dst));
    d722:	2207      	movs	r2, #7
    d724:	6921      	ldr	r1, [r4, #16]
    d726:	f105 0009 	add.w	r0, r5, #9
    d72a:	f005 fa6e 	bl	12c0a <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
    d72e:	4620      	mov	r0, r4
    d730:	f005 fd7d 	bl	1322e <get_adv_name_type_param>
    d734:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    d736:	6863      	ldr	r3, [r4, #4]
    d738:	f013 0f01 	tst.w	r3, #1
    d73c:	d01e      	beq.n	d77c <bt_le_adv_start_legacy+0x128>
		if (dir_adv) {
    d73e:	b1ce      	cbz	r6, d774 <bt_le_adv_start_legacy+0x120>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    d740:	f013 0f10 	tst.w	r3, #16
    d744:	d012      	beq.n	d76c <bt_le_adv_start_legacy+0x118>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    d746:	2304      	movs	r3, #4
    d748:	f88d 301c 	strb.w	r3, [sp, #28]
    d74c:	2207      	movs	r2, #7
    d74e:	6921      	ldr	r1, [r4, #16]
    d750:	f10d 001e 	add.w	r0, sp, #30
    d754:	f005 fa59 	bl	12c0a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    d758:	f8dd a010 	ldr.w	sl, [sp, #16]
}
    d75c:	e017      	b.n	d78e <bt_le_adv_start_legacy+0x13a>
	memcpy(dst, src, sizeof(*dst));
    d75e:	2207      	movs	r2, #7
    d760:	494d      	ldr	r1, [pc, #308]	; (d898 <bt_le_adv_start_legacy+0x244>)
    d762:	f105 0009 	add.w	r0, r5, #9
    d766:	f005 fa50 	bl	12c0a <memcpy>
}
    d76a:	e7e0      	b.n	d72e <bt_le_adv_start_legacy+0xda>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    d76c:	2301      	movs	r3, #1
    d76e:	f88d 301c 	strb.w	r3, [sp, #28]
    d772:	e7eb      	b.n	d74c <bt_le_adv_start_legacy+0xf8>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
    d774:	2300      	movs	r3, #0
    d776:	f88d 301c 	strb.w	r3, [sp, #28]
    d77a:	e008      	b.n	d78e <bt_le_adv_start_legacy+0x13a>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    d77c:	f413 7f00 	tst.w	r3, #512	; 0x200
    d780:	d102      	bne.n	d788 <bt_le_adv_start_legacy+0x134>
    d782:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d784:	2b00      	cmp	r3, #0
    d786:	d052      	beq.n	d82e <bt_le_adv_start_legacy+0x1da>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
    d788:	2302      	movs	r3, #2
    d78a:	f88d 301c 	strb.w	r3, [sp, #28]
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    d78e:	210f      	movs	r1, #15
    d790:	f242 0006 	movw	r0, #8198	; 0x2006
    d794:	f7ff f95a 	bl	ca4c <bt_hci_cmd_create>
	if (!buf) {
    d798:	4680      	mov	r8, r0
    d79a:	2800      	cmp	r0, #0
    d79c:	d075      	beq.n	d88a <bt_le_adv_start_legacy+0x236>
    d79e:	220f      	movs	r2, #15
    d7a0:	a906      	add	r1, sp, #24
    d7a2:	300c      	adds	r0, #12
    d7a4:	f005 ff00 	bl	135a8 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    d7a8:	2200      	movs	r2, #0
    d7aa:	4641      	mov	r1, r8
    d7ac:	f242 0006 	movw	r0, #8198	; 0x2006
    d7b0:	f7ff f98a 	bl	cac8 <bt_hci_cmd_send_sync>
	if (err) {
    d7b4:	4680      	mov	r8, r0
    d7b6:	2800      	cmp	r0, #0
    d7b8:	d135      	bne.n	d826 <bt_le_adv_start_legacy+0x1d2>
		return err;
	}

	if (!dir_adv) {
    d7ba:	2e00      	cmp	r6, #0
    d7bc:	d03f      	beq.n	d83e <bt_le_adv_start_legacy+0x1ea>

			return err;
		}
	}

	err = bt_le_adv_set_enable(adv, true);
    d7be:	2101      	movs	r1, #1
    d7c0:	4628      	mov	r0, r5
    d7c2:	f005 fd70 	bl	132a6 <bt_le_adv_set_enable>
	if (err) {
    d7c6:	4680      	mov	r8, r0
    d7c8:	bb68      	cbnz	r0, d826 <bt_le_adv_start_legacy+0x1d2>
		 */
		bt_conn_unref(conn);
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    d7ca:	2e00      	cmp	r6, #0
    d7cc:	d049      	beq.n	d862 <bt_le_adv_start_legacy+0x20e>
    d7ce:	4602      	mov	r2, r0
    d7d0:	f002 0201 	and.w	r2, r2, #1
    d7d4:	210e      	movs	r1, #14
    d7d6:	4638      	mov	r0, r7
    d7d8:	f005 fd04 	bl	131e4 <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    d7dc:	f1bb 0f01 	cmp.w	fp, #1
    d7e0:	bf14      	ite	ne
    d7e2:	2200      	movne	r2, #0
    d7e4:	2201      	moveq	r2, #1
    d7e6:	2108      	movs	r1, #8
    d7e8:	4638      	mov	r0, r7
    d7ea:	f005 fcfb 	bl	131e4 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    d7ee:	f1bb 0f02 	cmp.w	fp, #2
    d7f2:	bf14      	ite	ne
    d7f4:	2200      	movne	r2, #0
    d7f6:	2201      	moveq	r2, #1
    d7f8:	2109      	movs	r1, #9
    d7fa:	4638      	mov	r0, r7
    d7fc:	f005 fcf2 	bl	131e4 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
    d800:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    d802:	f002 0201 	and.w	r2, r2, #1
    d806:	210a      	movs	r1, #10
    d808:	4638      	mov	r0, r7
    d80a:	f005 fceb 	bl	131e4 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    d80e:	4652      	mov	r2, sl
    d810:	210b      	movs	r1, #11
    d812:	4638      	mov	r0, r7
    d814:	f005 fce6 	bl	131e4 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
    d818:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    d81a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    d81e:	210d      	movs	r1, #13
    d820:	4638      	mov	r0, r7
    d822:	f005 fcdf 	bl	131e4 <atomic_set_bit_to>

	return 0;
}
    d826:	4640      	mov	r0, r8
    d828:	b00b      	add	sp, #44	; 0x2c
    d82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    d82e:	2802      	cmp	r0, #2
    d830:	d0aa      	beq.n	d788 <bt_le_adv_start_legacy+0x134>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    d832:	2303      	movs	r3, #3
    d834:	f88d 301c 	strb.w	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
    d838:	f8dd a010 	ldr.w	sl, [sp, #16]
    d83c:	e7a7      	b.n	d78e <bt_le_adv_start_legacy+0x13a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    d83e:	f8cd b00c 	str.w	fp, [sp, #12]
    d842:	f8cd a008 	str.w	sl, [sp, #8]
    d846:	2300      	movs	r3, #0
    d848:	9301      	str	r3, [sp, #4]
    d84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d84c:	9300      	str	r3, [sp, #0]
    d84e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d850:	464a      	mov	r2, r9
    d852:	9905      	ldr	r1, [sp, #20]
    d854:	4628      	mov	r0, r5
    d856:	f005 fc29 	bl	130ac <le_adv_update>
		if (err) {
    d85a:	4680      	mov	r8, r0
    d85c:	2800      	cmp	r0, #0
    d85e:	d0ae      	beq.n	d7be <bt_le_adv_start_legacy+0x16a>
    d860:	e7e1      	b.n	d826 <bt_le_adv_start_legacy+0x1d2>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
    d862:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    d864:	f013 0f02 	tst.w	r3, #2
    d868:	d001      	beq.n	d86e <bt_le_adv_start_legacy+0x21a>
    d86a:	4602      	mov	r2, r0
    d86c:	e7b0      	b.n	d7d0 <bt_le_adv_start_legacy+0x17c>
    d86e:	2201      	movs	r2, #1
    d870:	e7ae      	b.n	d7d0 <bt_le_adv_start_legacy+0x17c>
		return -EAGAIN;
    d872:	f06f 080a 	mvn.w	r8, #10
    d876:	e7d6      	b.n	d826 <bt_le_adv_start_legacy+0x1d2>
		return -EINVAL;
    d878:	f06f 0815 	mvn.w	r8, #21
    d87c:	e7d3      	b.n	d826 <bt_le_adv_start_legacy+0x1d2>
		return -EINVAL;
    d87e:	f06f 0815 	mvn.w	r8, #21
    d882:	e7d0      	b.n	d826 <bt_le_adv_start_legacy+0x1d2>
		return -EALREADY;
    d884:	f06f 0877 	mvn.w	r8, #119	; 0x77
    d888:	e7cd      	b.n	d826 <bt_le_adv_start_legacy+0x1d2>
		return -ENOBUFS;
    d88a:	f06f 0868 	mvn.w	r8, #104	; 0x68
    d88e:	e7ca      	b.n	d826 <bt_le_adv_start_legacy+0x1d2>
    d890:	20000274 	.word	0x20000274
    d894:	200001a0 	.word	0x200001a0
    d898:	000163f8 	.word	0x000163f8

0000d89c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    d89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8a0:	b082      	sub	sp, #8
    d8a2:	4606      	mov	r6, r0
    d8a4:	460c      	mov	r4, r1
    d8a6:	4615      	mov	r5, r2
    d8a8:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
    d8aa:	f7ff fe81 	bl	d5b0 <adv_get_legacy>
	int err;

	if (!adv) {
    d8ae:	b1f8      	cbz	r0, d8f0 <bt_le_adv_start+0x54>
    d8b0:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    d8b2:	9b08      	ldr	r3, [sp, #32]
    d8b4:	9301      	str	r3, [sp, #4]
    d8b6:	9700      	str	r7, [sp, #0]
    d8b8:	462b      	mov	r3, r5
    d8ba:	4622      	mov	r2, r4
    d8bc:	4631      	mov	r1, r6
    d8be:	f7ff fec9 	bl	d654 <bt_le_adv_start_legacy>
    d8c2:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
    d8c4:	4629      	mov	r1, r5
    d8c6:	4620      	mov	r0, r4
    d8c8:	f005 fb1f 	bl	12f0a <ad_is_limited>
    d8cc:	b918      	cbnz	r0, d8d6 <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    d8ce:	4630      	mov	r0, r6
    d8d0:	b002      	add	sp, #8
    d8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    d8d6:	f108 0818 	add.w	r8, r8, #24
    d8da:	4907      	ldr	r1, [pc, #28]	; (d8f8 <bt_le_adv_start+0x5c>)
    d8dc:	4640      	mov	r0, r8
    d8de:	f007 fe08 	bl	154f2 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    d8e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    d8e6:	2300      	movs	r3, #0
    d8e8:	4640      	mov	r0, r8
    d8ea:	f003 fa1b 	bl	10d24 <k_work_reschedule>
    d8ee:	e7ee      	b.n	d8ce <bt_le_adv_start+0x32>
		return -ENOMEM;
    d8f0:	f06f 060b 	mvn.w	r6, #11
    d8f4:	e7eb      	b.n	d8ce <bt_le_adv_start+0x32>
    d8f6:	bf00      	nop
    d8f8:	000132fd 	.word	0x000132fd

0000d8fc <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
    d8fc:	4b03      	ldr	r3, [pc, #12]	; (d90c <pool_id+0x10>)
    d8fe:	1ac0      	subs	r0, r0, r3
    d900:	1080      	asrs	r0, r0, #2
}
    d902:	4b03      	ldr	r3, [pc, #12]	; (d910 <pool_id+0x14>)
    d904:	fb03 f000 	mul.w	r0, r3, r0
    d908:	4770      	bx	lr
    d90a:	bf00      	nop
    d90c:	2000049c 	.word	0x2000049c
    d910:	ba2e8ba3 	.word	0xba2e8ba3

0000d914 <net_buf_pool_get>:
}
    d914:	222c      	movs	r2, #44	; 0x2c
    d916:	4b02      	ldr	r3, [pc, #8]	; (d920 <net_buf_pool_get+0xc>)
    d918:	fb02 3000 	mla	r0, r2, r0, r3
    d91c:	4770      	bx	lr
    d91e:	bf00      	nop
    d920:	2000049c 	.word	0x2000049c

0000d924 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
    d924:	2813      	cmp	r0, #19
    d926:	d810      	bhi.n	d94a <adc_gain_invert+0x26>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
    d928:	4b0c      	ldr	r3, [pc, #48]	; (d95c <adc_gain_invert+0x38>)
    d92a:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
    d92e:	b17b      	cbz	r3, d950 <adc_gain_invert+0x2c>
    d930:	4a0a      	ldr	r2, [pc, #40]	; (d95c <adc_gain_invert+0x38>)
    d932:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    d936:	7852      	ldrb	r2, [r2, #1]
    d938:	b16a      	cbz	r2, d956 <adc_gain_invert+0x32>
			*value = (gdp->mul * *value) / gdp->div;
    d93a:	6808      	ldr	r0, [r1, #0]
    d93c:	fb00 f303 	mul.w	r3, r0, r3
    d940:	fb93 f3f2 	sdiv	r3, r3, r2
    d944:	600b      	str	r3, [r1, #0]
			rv = 0;
    d946:	2000      	movs	r0, #0
    d948:	4770      	bx	lr
	int rv = -EINVAL;
    d94a:	f06f 0015 	mvn.w	r0, #21
    d94e:	4770      	bx	lr
    d950:	f06f 0015 	mvn.w	r0, #21
    d954:	4770      	bx	lr
    d956:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
    d95a:	4770      	bx	lr
    d95c:	000165bc 	.word	0x000165bc

0000d960 <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    d960:	b570      	push	{r4, r5, r6, lr}
    d962:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
    d964:	2300      	movs	r3, #0
    d966:	9300      	str	r3, [sp, #0]
    d968:	f8cd 3003 	str.w	r3, [sp, #3]
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    d96c:	790d      	ldrb	r5, [r1, #4]
    d96e:	f005 051f 	and.w	r5, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    d972:	2d07      	cmp	r5, #7
    d974:	f200 8086 	bhi.w	da84 <adc_nrfx_channel_setup+0x124>
    d978:	460c      	mov	r4, r1
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    d97a:	780b      	ldrb	r3, [r1, #0]
    d97c:	2b0b      	cmp	r3, #11
    d97e:	f200 8084 	bhi.w	da8a <adc_nrfx_channel_setup+0x12a>
    d982:	e8df f003 	tbb	[pc, r3]
    d986:	0609      	.short	0x0609
    d988:	19821511 	.word	0x19821511
    d98c:	211d8282 	.word	0x211d8282
    d990:	2582      	.short	0x2582
	case ADC_GAIN_1_6:
		config.gain = NRF_SAADC_GAIN1_6;
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
    d992:	2301      	movs	r3, #1
    d994:	f88d 3002 	strb.w	r3, [sp, #2]
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    d998:	7863      	ldrb	r3, [r4, #1]
    d99a:	2b03      	cmp	r3, #3
    d99c:	d01c      	beq.n	d9d8 <adc_nrfx_channel_setup+0x78>
    d99e:	2b04      	cmp	r3, #4
    d9a0:	d01d      	beq.n	d9de <adc_nrfx_channel_setup+0x7e>
    d9a2:	f06f 0015 	mvn.w	r0, #21
    d9a6:	e05b      	b.n	da60 <adc_nrfx_channel_setup+0x100>
		config.gain = NRF_SAADC_GAIN1_4;
    d9a8:	2302      	movs	r3, #2
    d9aa:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d9ae:	e7f3      	b.n	d998 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_3;
    d9b0:	2303      	movs	r3, #3
    d9b2:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d9b6:	e7ef      	b.n	d998 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_2;
    d9b8:	2304      	movs	r3, #4
    d9ba:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d9be:	e7eb      	b.n	d998 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1;
    d9c0:	2305      	movs	r3, #5
    d9c2:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d9c6:	e7e7      	b.n	d998 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN2;
    d9c8:	2306      	movs	r3, #6
    d9ca:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d9ce:	e7e3      	b.n	d998 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN4;
    d9d0:	2307      	movs	r3, #7
    d9d2:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d9d6:	e7df      	b.n	d998 <adc_nrfx_channel_setup+0x38>
	case ADC_REF_INTERNAL:
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    d9d8:	2301      	movs	r3, #1
    d9da:	f88d 3003 	strb.w	r3, [sp, #3]
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
    d9de:	8863      	ldrh	r3, [r4, #2]
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d03f      	beq.n	da64 <adc_nrfx_channel_setup+0x104>
    d9e4:	f244 0228 	movw	r2, #16424	; 0x4028
    d9e8:	4293      	cmp	r3, r2
    d9ea:	d851      	bhi.n	da90 <adc_nrfx_channel_setup+0x130>
    d9ec:	f244 0203 	movw	r2, #16387	; 0x4003
    d9f0:	4293      	cmp	r3, r2
    d9f2:	d350      	bcc.n	da96 <adc_nrfx_channel_setup+0x136>
    d9f4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    d9f8:	3b03      	subs	r3, #3
    d9fa:	2b25      	cmp	r3, #37	; 0x25
    d9fc:	d84e      	bhi.n	da9c <adc_nrfx_channel_setup+0x13c>
    d9fe:	e8df f003 	tbb	[pc, r3]
    da02:	4d16      	.short	0x4d16
    da04:	4d4d4d13 	.word	0x4d4d4d13
    da08:	4d4d314d 	.word	0x4d4d314d
    da0c:	4d354d4d 	.word	0x4d354d4d
    da10:	394d4d4d 	.word	0x394d4d4d
    da14:	4d4d4d4d 	.word	0x4d4d4d4d
    da18:	4d4d4d4d 	.word	0x4d4d4d4d
    da1c:	4d4d4d4d 	.word	0x4d4d4d4d
    da20:	4d4d4d4d 	.word	0x4d4d4d4d
    da24:	3d4d4d4d 	.word	0x3d4d4d4d
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3):
		config.acq_time = NRF_SAADC_ACQTIME_3US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 5):
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    da28:	2301      	movs	r3, #1
    da2a:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
		return -EINVAL;
	}

	config.mode = (channel_cfg->differential ?
    da2e:	7923      	ldrb	r3, [r4, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    da30:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    da34:	f88d 3005 	strb.w	r3, [sp, #5]
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */

	nrf_saadc_channel_init(NRF_SAADC, channel_id, &config);
    da38:	4e1a      	ldr	r6, [pc, #104]	; (daa4 <adc_nrfx_channel_setup+0x144>)
    da3a:	466a      	mov	r2, sp
    da3c:	4629      	mov	r1, r5
    da3e:	4630      	mov	r0, r6
    da40:	f005 fdd0 	bl	135e4 <nrf_saadc_channel_init>
	nrf_saadc_channel_input_set(NRF_SAADC,
				    channel_id,
				    NRF_SAADC_INPUT_DISABLED,
				    channel_cfg->input_negative);
    da44:	79a1      	ldrb	r1, [r4, #6]
NRF_STATIC_INLINE void nrf_saadc_channel_input_set(NRF_SAADC_Type *  p_reg,
                                                   uint8_t           channel,
                                                   nrf_saadc_input_t pselp,
                                                   nrf_saadc_input_t pseln)
{
    p_reg->CH[channel].PSELN = pseln;
    da46:	f105 0351 	add.w	r3, r5, #81	; 0x51
    da4a:	011a      	lsls	r2, r3, #4
    da4c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    da50:	6059      	str	r1, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    da52:	2000      	movs	r0, #0
    da54:	50b0      	str	r0, [r6, r2]

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    da56:	7962      	ldrb	r2, [r4, #5]
    da58:	4b13      	ldr	r3, [pc, #76]	; (daa8 <adc_nrfx_channel_setup+0x148>)
    da5a:	442b      	add	r3, r5
    da5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
    da60:	b002      	add	sp, #8
    da62:	bd70      	pop	{r4, r5, r6, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    da64:	2302      	movs	r3, #2
    da66:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    da6a:	e7e0      	b.n	da2e <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    da6c:	2303      	movs	r3, #3
    da6e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    da72:	e7dc      	b.n	da2e <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    da74:	2304      	movs	r3, #4
    da76:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    da7a:	e7d8      	b.n	da2e <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    da7c:	2305      	movs	r3, #5
    da7e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    da82:	e7d4      	b.n	da2e <adc_nrfx_channel_setup+0xce>
		return -EINVAL;
    da84:	f06f 0015 	mvn.w	r0, #21
    da88:	e7ea      	b.n	da60 <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->gain) {
    da8a:	f06f 0015 	mvn.w	r0, #21
    da8e:	e7e7      	b.n	da60 <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->acquisition_time) {
    da90:	f06f 0015 	mvn.w	r0, #21
    da94:	e7e4      	b.n	da60 <adc_nrfx_channel_setup+0x100>
    da96:	f06f 0015 	mvn.w	r0, #21
    da9a:	e7e1      	b.n	da60 <adc_nrfx_channel_setup+0x100>
    da9c:	f06f 0015 	mvn.w	r0, #21
    daa0:	e7de      	b.n	da60 <adc_nrfx_channel_setup+0x100>
    daa2:	bf00      	nop
    daa4:	40007000 	.word	0x40007000
    daa8:	200002c8 	.word	0x200002c8

0000daac <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    daac:	4b07      	ldr	r3, [pc, #28]	; (dacc <adc_context_start_sampling+0x20>)
    daae:	2201      	movs	r2, #1
    dab0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    dab4:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    dab8:	b113      	cbz	r3, dac0 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    daba:	4b04      	ldr	r3, [pc, #16]	; (dacc <adc_context_start_sampling+0x20>)
    dabc:	60da      	str	r2, [r3, #12]
}
    dabe:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dac0:	4b02      	ldr	r3, [pc, #8]	; (dacc <adc_context_start_sampling+0x20>)
    dac2:	2201      	movs	r2, #1
    dac4:	601a      	str	r2, [r3, #0]
    dac6:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    dac8:	4770      	bx	lr
    daca:	bf00      	nop
    dacc:	40007000 	.word	0x40007000

0000dad0 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    dad0:	b949      	cbnz	r1, dae6 <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    dad2:	4b05      	ldr	r3, [pc, #20]	; (dae8 <adc_context_update_buffer_pointer+0x18>)
    dad4:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    dad8:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    dadc:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    dade:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    dae2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    dae6:	4770      	bx	lr
    dae8:	40007000 	.word	0x40007000

0000daec <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    daec:	7c03      	ldrb	r3, [r0, #16]
    daee:	3b08      	subs	r3, #8
    daf0:	2b06      	cmp	r3, #6
    daf2:	d811      	bhi.n	db18 <set_resolution+0x2c>
    daf4:	e8df f003 	tbb	[pc, r3]
    daf8:	100e1004 	.word	0x100e1004
    dafc:	1006      	.short	0x1006
    dafe:	0c          	.byte	0x0c
    daff:	00          	.byte	0x00
    db00:	2200      	movs	r2, #0
    db02:	e000      	b.n	db06 <set_resolution+0x1a>
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    db04:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    db06:	4b06      	ldr	r3, [pc, #24]	; (db20 <set_resolution+0x34>)
    db08:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    db0c:	2000      	movs	r0, #0
    db0e:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    db10:	2203      	movs	r2, #3
		break;
    db12:	e7f8      	b.n	db06 <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    db14:	2201      	movs	r2, #1
    db16:	e7f6      	b.n	db06 <set_resolution+0x1a>
	switch (sequence->resolution) {
    db18:	f06f 0015 	mvn.w	r0, #21
}
    db1c:	4770      	bx	lr
    db1e:	bf00      	nop
    db20:	40007000 	.word	0x40007000

0000db24 <set_oversampling>:
static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    db24:	2901      	cmp	r1, #1
    db26:	d901      	bls.n	db2c <set_oversampling+0x8>
    db28:	7c43      	ldrb	r3, [r0, #17]
    db2a:	b973      	cbnz	r3, db4a <set_oversampling+0x26>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    db2c:	7c43      	ldrb	r3, [r0, #17]
    db2e:	2b08      	cmp	r3, #8
    db30:	d80e      	bhi.n	db50 <set_oversampling+0x2c>
    db32:	e8df f003 	tbb	[pc, r3]
    db36:	0505      	.short	0x0505
    db38:	05050505 	.word	0x05050505
    db3c:	0505      	.short	0x0505
    db3e:	05          	.byte	0x05
    db3f:	00          	.byte	0x00
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    db40:	4a05      	ldr	r2, [pc, #20]	; (db58 <set_oversampling+0x34>)
    db42:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
			    sequence->oversampling);
		return -EINVAL;
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    db46:	2000      	movs	r0, #0
    db48:	4770      	bx	lr
		return -EINVAL;
    db4a:	f06f 0015 	mvn.w	r0, #21
    db4e:	4770      	bx	lr
	switch (sequence->oversampling) {
    db50:	f06f 0015 	mvn.w	r0, #21
}
    db54:	4770      	bx	lr
    db56:	bf00      	nop
    db58:	40007000 	.word	0x40007000

0000db5c <adc_context_enable_timer>:
	}
}

#ifdef ADC_CONTEXT_USES_KERNEL_TIMER
static inline void adc_context_enable_timer(struct adc_context *ctx)
{
    db5c:	b510      	push	{r4, lr}
    db5e:	b082      	sub	sp, #8
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    db60:	f100 0408 	add.w	r4, r0, #8
    db64:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    db68:	0c41      	lsrs	r1, r0, #17
    db6a:	03c0      	lsls	r0, r0, #15
    db6c:	4b08      	ldr	r3, [pc, #32]	; (db90 <adc_context_enable_timer+0x34>)
    db6e:	18c0      	adds	r0, r0, r3
    db70:	4a08      	ldr	r2, [pc, #32]	; (db94 <adc_context_enable_timer+0x38>)
    db72:	f04f 0300 	mov.w	r3, #0
    db76:	f141 0100 	adc.w	r1, r1, #0
    db7a:	f7f2 fea5 	bl	8c8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    db7e:	9000      	str	r0, [sp, #0]
    db80:	9101      	str	r1, [sp, #4]
    db82:	2200      	movs	r2, #0
    db84:	2300      	movs	r3, #0
    db86:	4620      	mov	r0, r4
    db88:	f003 fe6c 	bl	11864 <z_impl_k_timer_start>
}
    db8c:	b002      	add	sp, #8
    db8e:	bd10      	pop	{r4, pc}
    db90:	000f423f 	.word	0x000f423f
    db94:	000f4240 	.word	0x000f4240

0000db98 <start_read>:
	return 0;
}

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int error;
	uint32_t selected_channels = sequence->channels;
    db9a:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    db9c:	1e73      	subs	r3, r6, #1
    db9e:	2bfe      	cmp	r3, #254	; 0xfe
    dba0:	d855      	bhi.n	dc4e <start_read+0xb6>
    dba2:	460d      	mov	r5, r1
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    dba4:	2300      	movs	r3, #0
	active_channels = 0U;
    dba6:	461c      	mov	r4, r3
    dba8:	e009      	b.n	dbbe <start_read+0x26>
    p_reg->CH[channel].PSELP = pselp;
    dbaa:	f103 0251 	add.w	r2, r3, #81	; 0x51
    dbae:	0112      	lsls	r2, r2, #4
    dbb0:	492a      	ldr	r1, [pc, #168]	; (dc5c <start_read+0xc4>)
    dbb2:	2000      	movs	r0, #0
    dbb4:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    dbb6:	3301      	adds	r3, #1
    dbb8:	b2db      	uxtb	r3, r3
    dbba:	2b07      	cmp	r3, #7
    dbbc:	d822      	bhi.n	dc04 <start_read+0x6c>
		if (selected_channels & BIT(channel_id)) {
    dbbe:	461a      	mov	r2, r3
    dbc0:	fa26 f103 	lsr.w	r1, r6, r3
    dbc4:	f011 0f01 	tst.w	r1, #1
    dbc8:	d0ef      	beq.n	dbaa <start_read+0x12>
			if (m_data.positive_inputs[channel_id] == 0U) {
    dbca:	4925      	ldr	r1, [pc, #148]	; (dc60 <start_read+0xc8>)
    dbcc:	4419      	add	r1, r3
    dbce:	f891 70a0 	ldrb.w	r7, [r1, #160]	; 0xa0
    dbd2:	2f00      	cmp	r7, #0
    dbd4:	d03e      	beq.n	dc54 <start_read+0xbc>
				(sequence->oversampling != 0U ?
    dbd6:	7c69      	ldrb	r1, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    dbd8:	3900      	subs	r1, #0
    dbda:	bf18      	it	ne
    dbdc:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    dbde:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc5c <start_read+0xc4>
    dbe2:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    dbe6:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    dbea:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    dbee:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    dbf2:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    dbf6:	3251      	adds	r2, #81	; 0x51
    dbf8:	0112      	lsls	r2, r2, #4
    dbfa:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    dbfe:	3401      	adds	r4, #1
    dc00:	b2e4      	uxtb	r4, r4
    dc02:	e7d8      	b.n	dbb6 <start_read+0x1e>

	error = set_resolution(sequence);
    dc04:	4628      	mov	r0, r5
    dc06:	f7ff ff71 	bl	daec <set_resolution>
	if (error) {
    dc0a:	4603      	mov	r3, r0
    dc0c:	b108      	cbz	r0, dc12 <start_read+0x7a>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    dc0e:	4618      	mov	r0, r3
    dc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    dc12:	4621      	mov	r1, r4
    dc14:	4628      	mov	r0, r5
    dc16:	f7ff ff85 	bl	db24 <set_oversampling>
	if (error) {
    dc1a:	4603      	mov	r3, r0
    dc1c:	2800      	cmp	r0, #0
    dc1e:	d1f6      	bne.n	dc0e <start_read+0x76>
	error = check_buffer_size(sequence, active_channels);
    dc20:	4621      	mov	r1, r4
    dc22:	4628      	mov	r0, r5
    dc24:	f005 fd13 	bl	1364e <check_buffer_size>
	if (error) {
    dc28:	4603      	mov	r3, r0
    dc2a:	2800      	cmp	r0, #0
    dc2c:	d1ef      	bne.n	dc0e <start_read+0x76>
			      (nrf_saadc_value_t *)sequence->buffer,
    dc2e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    dc30:	4b0a      	ldr	r3, [pc, #40]	; (dc5c <start_read+0xc4>)
    dc32:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    dc36:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
	adc_context_start_read(&m_data.ctx, sequence);
    dc3a:	4c09      	ldr	r4, [pc, #36]	; (dc60 <start_read+0xc8>)
    dc3c:	4629      	mov	r1, r5
    dc3e:	4620      	mov	r0, r4
    dc40:	f005 fd40 	bl	136c4 <adc_context_start_read>
	error = adc_context_wait_for_completion(&m_data.ctx);
    dc44:	4620      	mov	r0, r4
    dc46:	f005 fd32 	bl	136ae <adc_context_wait_for_completion>
    dc4a:	4603      	mov	r3, r0
	return error;
    dc4c:	e7df      	b.n	dc0e <start_read+0x76>
		return -EINVAL;
    dc4e:	f06f 0315 	mvn.w	r3, #21
    dc52:	e7dc      	b.n	dc0e <start_read+0x76>
				return -EINVAL;
    dc54:	f06f 0315 	mvn.w	r3, #21
    dc58:	e7d9      	b.n	dc0e <start_read+0x76>
    dc5a:	bf00      	nop
    dc5c:	40007000 	.word	0x40007000
    dc60:	200002c8 	.word	0x200002c8

0000dc64 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    dc64:	b570      	push	{r4, r5, r6, lr}
    dc66:	4604      	mov	r4, r0
    dc68:	460d      	mov	r5, r1
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
    dc6a:	4e08      	ldr	r6, [pc, #32]	; (dc8c <adc_nrfx_read+0x28>)
    dc6c:	2200      	movs	r2, #0
    dc6e:	4611      	mov	r1, r2
    dc70:	4630      	mov	r0, r6
    dc72:	f005 fd13 	bl	1369c <adc_context_lock>
	error = start_read(dev, sequence);
    dc76:	4629      	mov	r1, r5
    dc78:	4620      	mov	r0, r4
    dc7a:	f7ff ff8d 	bl	db98 <start_read>
    dc7e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    dc80:	f106 0040 	add.w	r0, r6, #64	; 0x40
    dc84:	f002 feb8 	bl	109f8 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    dc88:	4620      	mov	r0, r4
    dc8a:	bd70      	pop	{r4, r5, r6, pc}
    dc8c:	200002c8 	.word	0x200002c8

0000dc90 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    dc90:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc92:	4b0d      	ldr	r3, [pc, #52]	; (dcc8 <init_saadc+0x38>)
    dc94:	2400      	movs	r4, #0
    dc96:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    dc9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    dc9e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    dca2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    dca6:	2212      	movs	r2, #18
    dca8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    dcac:	2007      	movs	r0, #7
    dcae:	f004 feaf 	bl	12a10 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    dcb2:	4622      	mov	r2, r4
    dcb4:	2101      	movs	r1, #1
    dcb6:	2007      	movs	r0, #7
    dcb8:	f004 feb4 	bl	12a24 <z_arm_irq_priority_set>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);
    dcbc:	4803      	ldr	r0, [pc, #12]	; (dccc <init_saadc+0x3c>)
    dcbe:	f005 fd30 	bl	13722 <adc_context_unlock_unconditionally>

	return 0;
}
    dcc2:	4620      	mov	r0, r4
    dcc4:	bd10      	pop	{r4, pc}
    dcc6:	bf00      	nop
    dcc8:	40007000 	.word	0x40007000
    dccc:	200002c8 	.word	0x200002c8

0000dcd0 <saadc_irq_handler>:
{
    dcd0:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dcd2:	4b11      	ldr	r3, [pc, #68]	; (dd18 <saadc_irq_handler+0x48>)
    dcd4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    dcd8:	b973      	cbnz	r3, dcf8 <saadc_irq_handler+0x28>
    dcda:	4b0f      	ldr	r3, [pc, #60]	; (dd18 <saadc_irq_handler+0x48>)
    dcdc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    dce0:	b14b      	cbz	r3, dcf6 <saadc_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dce2:	4b0d      	ldr	r3, [pc, #52]	; (dd18 <saadc_irq_handler+0x48>)
    dce4:	2200      	movs	r2, #0
    dce6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    dcea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcee:	2201      	movs	r2, #1
    dcf0:	609a      	str	r2, [r3, #8]
    dcf2:	601a      	str	r2, [r3, #0]
    dcf4:	605a      	str	r2, [r3, #4]
}
    dcf6:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcf8:	4b07      	ldr	r3, [pc, #28]	; (dd18 <saadc_irq_handler+0x48>)
    dcfa:	2200      	movs	r2, #0
    dcfc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    dd00:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd04:	2101      	movs	r1, #1
    dd06:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    dd08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		adc_context_on_sampling_done(&m_data.ctx, dev);
    dd0c:	4601      	mov	r1, r0
    dd0e:	4803      	ldr	r0, [pc, #12]	; (dd1c <saadc_irq_handler+0x4c>)
    dd10:	f005 fd0f 	bl	13732 <adc_context_on_sampling_done>
    dd14:	e7ef      	b.n	dcf6 <saadc_irq_handler+0x26>
    dd16:	bf00      	nop
    dd18:	40007000 	.word	0x40007000
    dd1c:	200002c8 	.word	0x200002c8

0000dd20 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    dd20:	4800      	ldr	r0, [pc, #0]	; (dd24 <get_hf_flags+0x4>)
    dd22:	4770      	bx	lr
    dd24:	20001afc 	.word	0x20001afc

0000dd28 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    dd28:	4b03      	ldr	r3, [pc, #12]	; (dd38 <get_subsys+0x10>)
    dd2a:	1ac0      	subs	r0, r0, r3
    dd2c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    dd2e:	4b03      	ldr	r3, [pc, #12]	; (dd3c <get_subsys+0x14>)
    dd30:	fb03 f000 	mul.w	r0, r3, r0
    dd34:	4770      	bx	lr
    dd36:	bf00      	nop
    dd38:	20001abc 	.word	0x20001abc
    dd3c:	b6db6db7 	.word	0xb6db6db7

0000dd40 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    dd40:	b538      	push	{r3, r4, r5, lr}
    dd42:	4605      	mov	r5, r0
    dd44:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    dd46:	f7ff ffef 	bl	dd28 <get_subsys>
    dd4a:	4601      	mov	r1, r0
    dd4c:	2240      	movs	r2, #64	; 0x40
    dd4e:	4803      	ldr	r0, [pc, #12]	; (dd5c <onoff_stop+0x1c>)
    dd50:	f005 fdd5 	bl	138fe <stop>
    dd54:	4601      	mov	r1, r0
	notify(mgr, res);
    dd56:	4628      	mov	r0, r5
    dd58:	47a0      	blx	r4
}
    dd5a:	bd38      	pop	{r3, r4, r5, pc}
    dd5c:	00015e1c 	.word	0x00015e1c

0000dd60 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    dd60:	b530      	push	{r4, r5, lr}
    dd62:	b083      	sub	sp, #12
    dd64:	4605      	mov	r5, r0
    dd66:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    dd68:	f7ff ffde 	bl	dd28 <get_subsys>
    dd6c:	4601      	mov	r1, r0
    dd6e:	2340      	movs	r3, #64	; 0x40
    dd70:	9300      	str	r3, [sp, #0]
    dd72:	4623      	mov	r3, r4
    dd74:	4a05      	ldr	r2, [pc, #20]	; (dd8c <onoff_start+0x2c>)
    dd76:	4806      	ldr	r0, [pc, #24]	; (dd90 <onoff_start+0x30>)
    dd78:	f005 fddb 	bl	13932 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    dd7c:	1e01      	subs	r1, r0, #0
    dd7e:	db01      	blt.n	dd84 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    dd80:	b003      	add	sp, #12
    dd82:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    dd84:	4628      	mov	r0, r5
    dd86:	47a0      	blx	r4
}
    dd88:	e7fa      	b.n	dd80 <onoff_start+0x20>
    dd8a:	bf00      	nop
    dd8c:	0001397b 	.word	0x0001397b
    dd90:	00015e1c 	.word	0x00015e1c

0000dd94 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    dd94:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    dd96:	b110      	cbz	r0, dd9e <clock_event_handler+0xa>
    dd98:	2801      	cmp	r0, #1
    dd9a:	d00d      	beq.n	ddb8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    dd9c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    dd9e:	2100      	movs	r1, #0
    dda0:	4808      	ldr	r0, [pc, #32]	; (ddc4 <clock_event_handler+0x30>)
    dda2:	f005 fd37 	bl	13814 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    dda6:	6883      	ldr	r3, [r0, #8]
    dda8:	f013 0f07 	tst.w	r3, #7
    ddac:	d1f6      	bne.n	dd9c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    ddae:	2100      	movs	r1, #0
    ddb0:	4804      	ldr	r0, [pc, #16]	; (ddc4 <clock_event_handler+0x30>)
    ddb2:	f005 fd92 	bl	138da <clkstarted_handle>
    ddb6:	e7f1      	b.n	dd9c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ddb8:	2101      	movs	r1, #1
    ddba:	4802      	ldr	r0, [pc, #8]	; (ddc4 <clock_event_handler+0x30>)
    ddbc:	f005 fd8d 	bl	138da <clkstarted_handle>
}
    ddc0:	e7ec      	b.n	dd9c <clock_event_handler+0x8>
    ddc2:	bf00      	nop
    ddc4:	00015e1c 	.word	0x00015e1c

0000ddc8 <generic_hfclk_start>:
{
    ddc8:	b510      	push	{r4, lr}
    ddca:	b082      	sub	sp, #8
	__asm__ volatile(
    ddcc:	f04f 0340 	mov.w	r3, #64	; 0x40
    ddd0:	f3ef 8411 	mrs	r4, BASEPRI
    ddd4:	f383 8812 	msr	BASEPRI_MAX, r3
    ddd8:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    dddc:	4a14      	ldr	r2, [pc, #80]	; (de30 <generic_hfclk_start+0x68>)
    ddde:	6813      	ldr	r3, [r2, #0]
    dde0:	f043 0102 	orr.w	r1, r3, #2
    dde4:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    dde6:	f013 0f01 	tst.w	r3, #1
    ddea:	d109      	bne.n	de00 <generic_hfclk_start+0x38>
	bool already_started = false;
    ddec:	2300      	movs	r3, #0
	__asm__ volatile(
    ddee:	f384 8811 	msr	BASEPRI, r4
    ddf2:	f3bf 8f6f 	isb	sy
	if (already_started) {
    ddf6:	b9b3      	cbnz	r3, de26 <generic_hfclk_start+0x5e>
	hfclk_start();
    ddf8:	f005 fdc7 	bl	1398a <hfclk_start>
}
    ddfc:	b002      	add	sp, #8
    ddfe:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    de00:	f10d 0207 	add.w	r2, sp, #7
    de04:	2101      	movs	r1, #1
    de06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    de0a:	f005 fce0 	bl	137ce <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    de0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de12:	2b01      	cmp	r3, #1
    de14:	d001      	beq.n	de1a <generic_hfclk_start+0x52>
	bool already_started = false;
    de16:	2300      	movs	r3, #0
    de18:	e7e9      	b.n	ddee <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    de1a:	f7ff ff81 	bl	dd20 <get_hf_flags>
    de1e:	f005 fd49 	bl	138b4 <set_on_state>
			already_started = true;
    de22:	2301      	movs	r3, #1
    de24:	e7e3      	b.n	ddee <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    de26:	2100      	movs	r1, #0
    de28:	4802      	ldr	r0, [pc, #8]	; (de34 <generic_hfclk_start+0x6c>)
    de2a:	f005 fd56 	bl	138da <clkstarted_handle>
		return;
    de2e:	e7e5      	b.n	ddfc <generic_hfclk_start+0x34>
    de30:	20001b0c 	.word	0x20001b0c
    de34:	00015e1c 	.word	0x00015e1c

0000de38 <generic_hfclk_stop>:
{
    de38:	b510      	push	{r4, lr}
	__asm__ volatile(
    de3a:	f04f 0340 	mov.w	r3, #64	; 0x40
    de3e:	f3ef 8411 	mrs	r4, BASEPRI
    de42:	f383 8812 	msr	BASEPRI_MAX, r3
    de46:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    de4a:	4a08      	ldr	r2, [pc, #32]	; (de6c <generic_hfclk_stop+0x34>)
    de4c:	6813      	ldr	r3, [r2, #0]
    de4e:	f023 0102 	bic.w	r1, r3, #2
    de52:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    de54:	f013 0f01 	tst.w	r3, #1
    de58:	d004      	beq.n	de64 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    de5a:	f384 8811 	msr	BASEPRI, r4
    de5e:	f3bf 8f6f 	isb	sy
}
    de62:	bd10      	pop	{r4, pc}
		hfclk_stop();
    de64:	f005 fd96 	bl	13994 <hfclk_stop>
    de68:	e7f7      	b.n	de5a <generic_hfclk_stop+0x22>
    de6a:	bf00      	nop
    de6c:	20001b0c 	.word	0x20001b0c

0000de70 <lfclk_spinwait>:
{
    de70:	b570      	push	{r4, r5, r6, lr}
    de72:	b082      	sub	sp, #8
    de74:	4606      	mov	r6, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    de76:	f007 f92d 	bl	150d4 <k_is_in_isr>
    de7a:	b918      	cbnz	r0, de84 <lfclk_spinwait+0x14>
    de7c:	4604      	mov	r4, r0
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    de7e:	4b1b      	ldr	r3, [pc, #108]	; (deec <lfclk_spinwait+0x7c>)
    de80:	781b      	ldrb	r3, [r3, #0]
    de82:	b97b      	cbnz	r3, dea4 <lfclk_spinwait+0x34>
	__asm__ volatile(
    de84:	f04f 0340 	mov.w	r3, #64	; 0x40
    de88:	f3ef 8511 	mrs	r5, BASEPRI
    de8c:	f383 8812 	msr	BASEPRI_MAX, r3
    de90:	f3bf 8f6f 	isb	sy
    de94:	2401      	movs	r4, #1
	if (!isr_mode) {
    de96:	b95c      	cbnz	r4, deb0 <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    de98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    de9c:	2202      	movs	r2, #2
    de9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    dea2:	e005      	b.n	deb0 <lfclk_spinwait+0x40>
	int key = isr_mode ? irq_lock() : 0;
    dea4:	2500      	movs	r5, #0
    dea6:	e7f6      	b.n	de96 <lfclk_spinwait+0x26>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    dea8:	b1ac      	cbz	r4, ded6 <lfclk_spinwait+0x66>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    deaa:	4628      	mov	r0, r5
    deac:	f7fd ff8e 	bl	bdcc <arch_cpu_atomic_idle>
    deb0:	aa01      	add	r2, sp, #4
    deb2:	2100      	movs	r1, #0
    deb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    deb8:	f005 fc89 	bl	137ce <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    debc:	2800      	cmp	r0, #0
    debe:	d0f3      	beq.n	dea8 <lfclk_spinwait+0x38>
		 && ((type == target_type)
    dec0:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    dec2:	b10b      	cbz	r3, dec8 <lfclk_spinwait+0x58>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    dec4:	2e01      	cmp	r6, #1
    dec6:	d1ef      	bne.n	dea8 <lfclk_spinwait+0x38>
	if (isr_mode) {
    dec8:	b14c      	cbz	r4, dede <lfclk_spinwait+0x6e>
	__asm__ volatile(
    deca:	f385 8811 	msr	BASEPRI, r5
    dece:	f3bf 8f6f 	isb	sy
}
    ded2:	b002      	add	sp, #8
    ded4:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    ded6:	2001      	movs	r0, #1
    ded8:	f005 fd66 	bl	139a8 <k_msleep>
    dedc:	e7e8      	b.n	deb0 <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
    dede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dee2:	2202      	movs	r2, #2
    dee4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dee8:	e7f3      	b.n	ded2 <lfclk_spinwait+0x62>
    deea:	bf00      	nop
    deec:	20002186 	.word	0x20002186

0000def0 <api_blocking_start>:
{
    def0:	b500      	push	{lr}
    def2:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    def4:	f8cd d000 	str.w	sp, [sp]
    def8:	f8cd d004 	str.w	sp, [sp, #4]
    defc:	2300      	movs	r3, #0
    defe:	9302      	str	r3, [sp, #8]
    df00:	2301      	movs	r3, #1
    df02:	9303      	str	r3, [sp, #12]
    df04:	ab04      	add	r3, sp, #16
    df06:	9304      	str	r3, [sp, #16]
    df08:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    df0a:	466b      	mov	r3, sp
    df0c:	4a06      	ldr	r2, [pc, #24]	; (df28 <api_blocking_start+0x38>)
    df0e:	f005 fd2c 	bl	1396a <api_start>
	if (err < 0) {
    df12:	2800      	cmp	r0, #0
    df14:	db05      	blt.n	df22 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
    df16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    df1a:	2300      	movs	r3, #0
    df1c:	4668      	mov	r0, sp
    df1e:	f002 fd93 	bl	10a48 <z_impl_k_sem_take>
}
    df22:	b007      	add	sp, #28
    df24:	f85d fb04 	ldr.w	pc, [sp], #4
    df28:	000139d5 	.word	0x000139d5

0000df2c <anomaly_132_workaround>:
{
    df2c:	b508      	push	{r3, lr}
	if (!once) {
    df2e:	4b06      	ldr	r3, [pc, #24]	; (df48 <anomaly_132_workaround+0x1c>)
    df30:	781b      	ldrb	r3, [r3, #0]
    df32:	b103      	cbz	r3, df36 <anomaly_132_workaround+0xa>
}
    df34:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    df36:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    df3a:	f007 fd1b 	bl	15974 <z_impl_k_busy_wait>
		once = true;
    df3e:	4b02      	ldr	r3, [pc, #8]	; (df48 <anomaly_132_workaround+0x1c>)
    df40:	2201      	movs	r2, #1
    df42:	701a      	strb	r2, [r3, #0]
}
    df44:	e7f6      	b.n	df34 <anomaly_132_workaround+0x8>
    df46:	bf00      	nop
    df48:	20002182 	.word	0x20002182

0000df4c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    df4c:	b570      	push	{r4, r5, r6, lr}
    df4e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    df50:	2200      	movs	r2, #0
    df52:	2101      	movs	r1, #1
    df54:	4610      	mov	r0, r2
    df56:	f004 fd65 	bl	12a24 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    df5a:	4811      	ldr	r0, [pc, #68]	; (dfa0 <clk_init+0x54>)
    df5c:	f001 fa84 	bl	f468 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    df60:	4b10      	ldr	r3, [pc, #64]	; (dfa4 <clk_init+0x58>)
    df62:	4298      	cmp	r0, r3
    df64:	d119      	bne.n	df9a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    df66:	f006 fc80 	bl	1486a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    df6a:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    df6c:	2c01      	cmp	r4, #1
    df6e:	d812      	bhi.n	df96 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    df70:	4621      	mov	r1, r4
    df72:	4630      	mov	r0, r6
    df74:	f005 fc4e 	bl	13814 <get_sub_data>
    df78:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    df7a:	4621      	mov	r1, r4
    df7c:	4630      	mov	r0, r6
    df7e:	f005 fc54 	bl	1382a <get_onoff_manager>
    df82:	4909      	ldr	r1, [pc, #36]	; (dfa8 <clk_init+0x5c>)
    df84:	f004 fa18 	bl	123b8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    df88:	2800      	cmp	r0, #0
    df8a:	db05      	blt.n	df98 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    df8c:	2301      	movs	r3, #1
    df8e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    df90:	441c      	add	r4, r3
    df92:	b2e4      	uxtb	r4, r4
    df94:	e7ea      	b.n	df6c <clk_init+0x20>
	}

	return 0;
    df96:	2000      	movs	r0, #0
}
    df98:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    df9a:	f06f 0004 	mvn.w	r0, #4
    df9e:	e7fb      	b.n	df98 <clk_init+0x4c>
    dfa0:	0000dd95 	.word	0x0000dd95
    dfa4:	0bad0000 	.word	0x0bad0000
    dfa8:	00016610 	.word	0x00016610

0000dfac <z_nrf_clock_control_lf_on>:
{
    dfac:	b510      	push	{r4, lr}
    dfae:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    dfb0:	4b10      	ldr	r3, [pc, #64]	; (dff4 <z_nrf_clock_control_lf_on+0x48>)
    dfb2:	2101      	movs	r1, #1
    dfb4:	f3bf 8f5b 	dmb	ish
    dfb8:	e853 2f00 	ldrex	r2, [r3]
    dfbc:	e843 1000 	strex	r0, r1, [r3]
    dfc0:	2800      	cmp	r0, #0
    dfc2:	d1f9      	bne.n	dfb8 <z_nrf_clock_control_lf_on+0xc>
    dfc4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    dfc8:	b11a      	cbz	r2, dfd2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    dfca:	1e63      	subs	r3, r4, #1
    dfcc:	2b01      	cmp	r3, #1
    dfce:	d90d      	bls.n	dfec <z_nrf_clock_control_lf_on+0x40>
}
    dfd0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    dfd2:	4809      	ldr	r0, [pc, #36]	; (dff8 <z_nrf_clock_control_lf_on+0x4c>)
    dfd4:	f005 fc29 	bl	1382a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    dfd8:	4908      	ldr	r1, [pc, #32]	; (dffc <z_nrf_clock_control_lf_on+0x50>)
    dfda:	2300      	movs	r3, #0
    dfdc:	604b      	str	r3, [r1, #4]
    dfde:	608b      	str	r3, [r1, #8]
    dfe0:	60cb      	str	r3, [r1, #12]
    dfe2:	2301      	movs	r3, #1
    dfe4:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    dfe6:	f004 fa04 	bl	123f2 <onoff_request>
    dfea:	e7ee      	b.n	dfca <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    dfec:	4620      	mov	r0, r4
    dfee:	f7ff ff3f 	bl	de70 <lfclk_spinwait>
		break;
    dff2:	e7ed      	b.n	dfd0 <z_nrf_clock_control_lf_on+0x24>
    dff4:	20001ab8 	.word	0x20001ab8
    dff8:	00015e1c 	.word	0x00015e1c
    dffc:	20001aa8 	.word	0x20001aa8

0000e000 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    e000:	b510      	push	{r4, lr}
    e002:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    e004:	280a      	cmp	r0, #10
    e006:	d006      	beq.n	e016 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    e008:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    e00a:	4806      	ldr	r0, [pc, #24]	; (e024 <console_out+0x24>)
    e00c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    e00e:	685b      	ldr	r3, [r3, #4]
    e010:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    e012:	4620      	mov	r0, r4
    e014:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    e016:	4803      	ldr	r0, [pc, #12]	; (e024 <console_out+0x24>)
    e018:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    e01a:	685b      	ldr	r3, [r3, #4]
    e01c:	210d      	movs	r1, #13
    e01e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    e020:	e7f2      	b.n	e008 <console_out+0x8>
    e022:	bf00      	nop
    e024:	00015e7c 	.word	0x00015e7c

0000e028 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    e028:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    e02a:	4c04      	ldr	r4, [pc, #16]	; (e03c <uart_console_hook_install+0x14>)
    e02c:	4620      	mov	r0, r4
    e02e:	f7fe faf7 	bl	c620 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    e032:	4620      	mov	r0, r4
    e034:	f7fd f984 	bl	b340 <__printk_hook_install>
#endif
}
    e038:	bd10      	pop	{r4, pc}
    e03a:	bf00      	nop
    e03c:	0000e001 	.word	0x0000e001

0000e040 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    e040:	b508      	push	{r3, lr}
    e042:	4805      	ldr	r0, [pc, #20]	; (e058 <uart_console_init+0x18>)
    e044:	f006 ff86 	bl	14f54 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    e048:	b118      	cbz	r0, e052 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    e04a:	f7ff ffed 	bl	e028 <uart_console_hook_install>

	return 0;
    e04e:	2000      	movs	r0, #0
}
    e050:	bd08      	pop	{r3, pc}
		return -ENODEV;
    e052:	f06f 0012 	mvn.w	r0, #18
    e056:	e7fb      	b.n	e050 <uart_console_init+0x10>
    e058:	00015e7c 	.word	0x00015e7c

0000e05c <random_byte_get>:
	__asm__ volatile(
    e05c:	f04f 0240 	mov.w	r2, #64	; 0x40
    e060:	f3ef 8311 	mrs	r3, BASEPRI
    e064:	f382 8812 	msr	BASEPRI_MAX, r2
    e068:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e06c:	4a0a      	ldr	r2, [pc, #40]	; (e098 <random_byte_get+0x3c>)
    e06e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    e072:	b16a      	cbz	r2, e090 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    e074:	4a08      	ldr	r2, [pc, #32]	; (e098 <random_byte_get+0x3c>)
    e076:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
    e07a:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e07c:	2100      	movs	r1, #0
    e07e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    e082:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
    e086:	f383 8811 	msr	BASEPRI, r3
    e08a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    e08e:	4770      	bx	lr
	int retval = -EAGAIN;
    e090:	f06f 000a 	mvn.w	r0, #10
    e094:	e7f7      	b.n	e086 <random_byte_get+0x2a>
    e096:	bf00      	nop
    e098:	4000d000 	.word	0x4000d000

0000e09c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    e09c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e09e:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
    e0a0:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
    e0a2:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
    e0a4:	f04f 0340 	mov.w	r3, #64	; 0x40
    e0a8:	f3ef 8011 	mrs	r0, BASEPRI
    e0ac:	f383 8812 	msr	BASEPRI_MAX, r3
    e0b0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    e0b4:	f89e 6000 	ldrb.w	r6, [lr]
    e0b8:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    e0ba:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
    e0be:	1bad      	subs	r5, r5, r6
    e0c0:	4025      	ands	r5, r4
	if (available < len) {
    e0c2:	42aa      	cmp	r2, r5
    e0c4:	d900      	bls.n	e0c8 <rng_pool_get+0x2c>
		len = available;
    e0c6:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    e0c8:	eb06 0c02 	add.w	ip, r6, r2
    e0cc:	ea0c 0c04 	and.w	ip, ip, r4
    e0d0:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
    e0d4:	f380 8811 	msr	BASEPRI, r0
    e0d8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
    e0dc:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    e0de:	e007      	b.n	e0f0 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
    e0e0:	eb0e 0203 	add.w	r2, lr, r3
    e0e4:	7952      	ldrb	r2, [r2, #5]
    e0e6:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
    e0ea:	3301      	adds	r3, #1
    e0ec:	4023      	ands	r3, r4
	while (likely(len--)) {
    e0ee:	4662      	mov	r2, ip
    e0f0:	f102 3cff 	add.w	ip, r2, #4294967295
    e0f4:	fa1f fc8c 	uxth.w	ip, ip
    e0f8:	2a00      	cmp	r2, #0
    e0fa:	d1f1      	bne.n	e0e0 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    e0fc:	42be      	cmp	r6, r7
    e0fe:	d10f      	bne.n	e120 <rng_pool_get+0x84>
	__asm__ volatile(
    e100:	f04f 0240 	mov.w	r2, #64	; 0x40
    e104:	f3ef 8311 	mrs	r3, BASEPRI
    e108:	f382 8812 	msr	BASEPRI_MAX, r2
    e10c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    e110:	f89e 2000 	ldrb.w	r2, [lr]
    e114:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
    e118:	f383 8811 	msr	BASEPRI, r3
    e11c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    e120:	1a40      	subs	r0, r0, r1
    e122:	b280      	uxth	r0, r0
	available = available - len;
    e124:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
    e126:	f89e 3004 	ldrb.w	r3, [lr, #4]
    e12a:	42ab      	cmp	r3, r5
    e12c:	d302      	bcc.n	e134 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e12e:	4b02      	ldr	r3, [pc, #8]	; (e138 <rng_pool_get+0x9c>)
    e130:	2201      	movs	r2, #1
    e132:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    e134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e136:	bf00      	nop
    e138:	4000d000 	.word	0x4000d000

0000e13c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
    e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e13e:	460d      	mov	r5, r1
    e140:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e142:	f013 0f01 	tst.w	r3, #1
    e146:	d103      	bne.n	e150 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    e148:	4826      	ldr	r0, [pc, #152]	; (e1e4 <entropy_nrf5_get_entropy_isr+0xa8>)
    e14a:	f7ff ffa7 	bl	e09c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    e14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
    e150:	b90a      	cbnz	r2, e156 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
    e152:	4620      	mov	r0, r4
    e154:	e7fb      	b.n	e14e <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
    e156:	f04f 0340 	mov.w	r3, #64	; 0x40
    e15a:	f3ef 8611 	mrs	r6, BASEPRI
    e15e:	f383 8812 	msr	BASEPRI_MAX, r3
    e162:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    e166:	200d      	movs	r0, #13
    e168:	f7fd fe70 	bl	be4c <arch_irq_is_enabled>
    e16c:	4607      	mov	r7, r0
		irq_disable(IRQN);
    e16e:	200d      	movs	r0, #13
    e170:	f004 fc53 	bl	12a1a <arch_irq_disable>
	__asm__ volatile(
    e174:	f386 8811 	msr	BASEPRI, r6
    e178:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e17c:	4b1a      	ldr	r3, [pc, #104]	; (e1e8 <entropy_nrf5_get_entropy_isr+0xac>)
    e17e:	2200      	movs	r2, #0
    e180:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e184:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e188:	2201      	movs	r2, #1
    e18a:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e18c:	4b17      	ldr	r3, [pc, #92]	; (e1ec <entropy_nrf5_get_entropy_isr+0xb0>)
    e18e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e192:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e196:	4626      	mov	r6, r4
    e198:	e00b      	b.n	e1b2 <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
    e19a:	f04f 0340 	mov.w	r3, #64	; 0x40
    e19e:	f3ef 8011 	mrs	r0, BASEPRI
    e1a2:	f383 8812 	msr	BASEPRI_MAX, r3
    e1a6:	f3bf 8f6f 	isb	sy
    e1aa:	f7fd fe0f 	bl	bdcc <arch_cpu_atomic_idle>
}
    e1ae:	e000      	b.n	e1b2 <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
    e1b0:	b18e      	cbz	r6, e1d6 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e1b2:	4b0d      	ldr	r3, [pc, #52]	; (e1e8 <entropy_nrf5_get_entropy_isr+0xac>)
    e1b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    e1b8:	2b00      	cmp	r3, #0
    e1ba:	d0ee      	beq.n	e19a <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
    e1bc:	f7ff ff4e 	bl	e05c <random_byte_get>
    e1c0:	4b0a      	ldr	r3, [pc, #40]	; (e1ec <entropy_nrf5_get_entropy_isr+0xb0>)
    e1c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e1c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
    e1ca:	2800      	cmp	r0, #0
    e1cc:	dbf0      	blt.n	e1b0 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
    e1ce:	3e01      	subs	r6, #1
    e1d0:	b2b6      	uxth	r6, r6
    e1d2:	55a8      	strb	r0, [r5, r6]
    e1d4:	e7ec      	b.n	e1b0 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
    e1d6:	2f00      	cmp	r7, #0
    e1d8:	d0bb      	beq.n	e152 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
    e1da:	200d      	movs	r0, #13
    e1dc:	f004 fc18 	bl	12a10 <arch_irq_enable>
    e1e0:	e7b7      	b.n	e152 <entropy_nrf5_get_entropy_isr+0x16>
    e1e2:	bf00      	nop
    e1e4:	20001b40 	.word	0x20001b40
    e1e8:	4000d000 	.word	0x4000d000
    e1ec:	e000e100 	.word	0xe000e100

0000e1f0 <isr>:
{
    e1f0:	b510      	push	{r4, lr}
	byte = random_byte_get();
    e1f2:	f7ff ff33 	bl	e05c <random_byte_get>
	if (byte < 0) {
    e1f6:	2800      	cmp	r0, #0
    e1f8:	db06      	blt.n	e208 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    e1fa:	b2c4      	uxtb	r4, r0
    e1fc:	4621      	mov	r1, r4
    e1fe:	480a      	ldr	r0, [pc, #40]	; (e228 <isr+0x38>)
    e200:	f005 fbf4 	bl	139ec <rng_pool_put>
	if (ret < 0) {
    e204:	2800      	cmp	r0, #0
    e206:	db00      	blt.n	e20a <isr+0x1a>
}
    e208:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
    e20a:	4621      	mov	r1, r4
    e20c:	4807      	ldr	r0, [pc, #28]	; (e22c <isr+0x3c>)
    e20e:	f005 fbed 	bl	139ec <rng_pool_put>
		if (ret < 0) {
    e212:	2800      	cmp	r0, #0
    e214:	db03      	blt.n	e21e <isr+0x2e>
	z_impl_k_sem_give(sem);
    e216:	4806      	ldr	r0, [pc, #24]	; (e230 <isr+0x40>)
    e218:	f002 fbee 	bl	109f8 <z_impl_k_sem_give>
}
    e21c:	e7f4      	b.n	e208 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e21e:	4b05      	ldr	r3, [pc, #20]	; (e234 <isr+0x44>)
    e220:	2201      	movs	r2, #1
    e222:	605a      	str	r2, [r3, #4]
}
    e224:	e7f7      	b.n	e216 <isr+0x26>
    e226:	bf00      	nop
    e228:	20001b40 	.word	0x20001b40
    e22c:	20001b55 	.word	0x20001b55
    e230:	20001b28 	.word	0x20001b28
    e234:	4000d000 	.word	0x4000d000

0000e238 <entropy_nrf5_get_entropy>:
{
    e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e23a:	460f      	mov	r7, r1
    e23c:	4614      	mov	r4, r2
	while (len) {
    e23e:	e007      	b.n	e250 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
    e240:	f04f 32ff 	mov.w	r2, #4294967295
    e244:	f04f 33ff 	mov.w	r3, #4294967295
    e248:	f106 0018 	add.w	r0, r6, #24
    e24c:	f002 fbfc 	bl	10a48 <z_impl_k_sem_take>
    e250:	b1bc      	cbz	r4, e282 <entropy_nrf5_get_entropy+0x4a>
    e252:	4e0d      	ldr	r6, [pc, #52]	; (e288 <entropy_nrf5_get_entropy+0x50>)
    e254:	f04f 32ff 	mov.w	r2, #4294967295
    e258:	f04f 33ff 	mov.w	r3, #4294967295
    e25c:	4630      	mov	r0, r6
    e25e:	f002 fbf3 	bl	10a48 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e262:	4622      	mov	r2, r4
    e264:	4639      	mov	r1, r7
    e266:	f106 0045 	add.w	r0, r6, #69	; 0x45
    e26a:	f7ff ff17 	bl	e09c <rng_pool_get>
    e26e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
    e270:	4630      	mov	r0, r6
    e272:	f002 fbc1 	bl	109f8 <z_impl_k_sem_give>
		if (bytes == 0U) {
    e276:	2d00      	cmp	r5, #0
    e278:	d0e2      	beq.n	e240 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
    e27a:	1b64      	subs	r4, r4, r5
    e27c:	b2a4      	uxth	r4, r4
		buf += bytes;
    e27e:	442f      	add	r7, r5
    e280:	e7e6      	b.n	e250 <entropy_nrf5_get_entropy+0x18>
}
    e282:	2000      	movs	r0, #0
    e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e286:	bf00      	nop
    e288:	20001b10 	.word	0x20001b10

0000e28c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    e28c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e28e:	4c18      	ldr	r4, [pc, #96]	; (e2f0 <entropy_nrf5_init+0x64>)
    e290:	2201      	movs	r2, #1
    e292:	4611      	mov	r1, r2
    e294:	4620      	mov	r0, r4
    e296:	f007 f826 	bl	152e6 <z_impl_k_sem_init>
    e29a:	2201      	movs	r2, #1
    e29c:	2100      	movs	r1, #0
    e29e:	f104 0018 	add.w	r0, r4, #24
    e2a2:	f007 f820 	bl	152e6 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
    e2a6:	2204      	movs	r2, #4
    e2a8:	2108      	movs	r1, #8
    e2aa:	f104 0045 	add.w	r0, r4, #69	; 0x45
    e2ae:	f005 fbb0 	bl	13a12 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
    e2b2:	220c      	movs	r2, #12
    e2b4:	2110      	movs	r1, #16
    e2b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e2ba:	f005 fbaa 	bl	13a12 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    e2be:	4b0d      	ldr	r3, [pc, #52]	; (e2f4 <entropy_nrf5_init+0x68>)
    e2c0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    e2c4:	f022 0201 	bic.w	r2, r2, #1
    e2c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e2cc:	2400      	movs	r4, #0
    e2ce:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    e2d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e2d6:	2101      	movs	r1, #1
    e2d8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e2dc:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    e2de:	4622      	mov	r2, r4
    e2e0:	200d      	movs	r0, #13
    e2e2:	f004 fb9f 	bl	12a24 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    e2e6:	200d      	movs	r0, #13
    e2e8:	f004 fb92 	bl	12a10 <arch_irq_enable>

	return 0;
}
    e2ec:	4620      	mov	r0, r4
    e2ee:	bd10      	pop	{r4, pc}
    e2f0:	20001b10 	.word	0x20001b10
    e2f4:	4000d000 	.word	0x4000d000

0000e2f8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    e2f8:	b908      	cbnz	r0, e2fe <get_dev+0x6>
    e2fa:	4802      	ldr	r0, [pc, #8]	; (e304 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    e2fc:	4770      	bx	lr
	const struct device *dev = NULL;
    e2fe:	2000      	movs	r0, #0
    e300:	4770      	bx	lr
    e302:	bf00      	nop
    e304:	00015e34 	.word	0x00015e34

0000e308 <gpio_nrfx_pin_interrupt_configure>:
{
    e308:	b5f0      	push	{r4, r5, r6, r7, lr}
    e30a:	b085      	sub	sp, #20
    e30c:	460e      	mov	r6, r1
    e30e:	4619      	mov	r1, r3
	return port->config;
    e310:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    e312:	7b1b      	ldrb	r3, [r3, #12]
    e314:	f006 051f 	and.w	r5, r6, #31
    e318:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    e31c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    e320:	d022      	beq.n	e368 <gpio_nrfx_pin_interrupt_configure+0x60>
    e322:	4607      	mov	r7, r0
    e324:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    e326:	2300      	movs	r3, #0
    e328:	9301      	str	r3, [sp, #4]
    e32a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    e32c:	4610      	mov	r0, r2
    e32e:	f005 fc65 	bl	13bfc <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    e332:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    e336:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    e338:	6899      	ldr	r1, [r3, #8]
    e33a:	40f1      	lsrs	r1, r6
    e33c:	f011 0f01 	tst.w	r1, #1
    e340:	d102      	bne.n	e348 <gpio_nrfx_pin_interrupt_configure+0x40>
    e342:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    e346:	d014      	beq.n	e372 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e348:	2300      	movs	r3, #0
    e34a:	aa01      	add	r2, sp, #4
    e34c:	4619      	mov	r1, r3
    e34e:	4628      	mov	r0, r5
    e350:	f001 fb82 	bl	fa58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    e354:	4b19      	ldr	r3, [pc, #100]	; (e3bc <gpio_nrfx_pin_interrupt_configure+0xb4>)
    e356:	4298      	cmp	r0, r3
    e358:	d12c      	bne.n	e3b4 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    e35a:	2101      	movs	r1, #1
    e35c:	4628      	mov	r0, r5
    e35e:	f001 fcdb 	bl	fd18 <nrfx_gpiote_trigger_enable>
	return 0;
    e362:	2000      	movs	r0, #0
}
    e364:	b005      	add	sp, #20
    e366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    e368:	4628      	mov	r0, r5
    e36a:	f001 fd11 	bl	fd90 <nrfx_gpiote_trigger_disable>
		return 0;
    e36e:	2000      	movs	r0, #0
    e370:	e7f8      	b.n	e364 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    e372:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e376:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e37a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    e382:	f013 0f01 	tst.w	r3, #1
    e386:	d1df      	bne.n	e348 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e388:	f10d 010f 	add.w	r1, sp, #15
    e38c:	4628      	mov	r0, r5
    e38e:	f001 fc67 	bl	fc60 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    e392:	4b0b      	ldr	r3, [pc, #44]	; (e3c0 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    e394:	4298      	cmp	r0, r3
    e396:	d003      	beq.n	e3a0 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    e398:	f10d 030f 	add.w	r3, sp, #15
    e39c:	9302      	str	r3, [sp, #8]
    e39e:	e7d3      	b.n	e348 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    e3a0:	f10d 000f 	add.w	r0, sp, #15
    e3a4:	f001 fcb0 	bl	fd08 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    e3a8:	4b04      	ldr	r3, [pc, #16]	; (e3bc <gpio_nrfx_pin_interrupt_configure+0xb4>)
    e3aa:	4298      	cmp	r0, r3
    e3ac:	d0f4      	beq.n	e398 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    e3ae:	f06f 000b 	mvn.w	r0, #11
    e3b2:	e7d7      	b.n	e364 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    e3b4:	f06f 0015 	mvn.w	r0, #21
    e3b8:	e7d4      	b.n	e364 <gpio_nrfx_pin_interrupt_configure+0x5c>
    e3ba:	bf00      	nop
    e3bc:	0bad0000 	.word	0x0bad0000
    e3c0:	0bad0004 	.word	0x0bad0004

0000e3c4 <gpio_nrfx_pin_configure>:
{
    e3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3c8:	b086      	sub	sp, #24
    e3ca:	460e      	mov	r6, r1
    e3cc:	4614      	mov	r4, r2
	return port->config;
    e3ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e3d2:	f898 300c 	ldrb.w	r3, [r8, #12]
    e3d6:	f001 051f 	and.w	r5, r1, #31
    e3da:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e3de:	f10d 0117 	add.w	r1, sp, #23
    e3e2:	4628      	mov	r0, r5
    e3e4:	f001 fc3c 	bl	fc60 <nrfx_gpiote_channel_get>
    e3e8:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    e3ea:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    e3ee:	d03a      	beq.n	e466 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    e3f0:	2100      	movs	r1, #0
    e3f2:	9103      	str	r1, [sp, #12]
    e3f4:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e3f6:	460b      	mov	r3, r1
    e3f8:	aa03      	add	r2, sp, #12
    e3fa:	4628      	mov	r0, r5
    e3fc:	f001 fb2c 	bl	fa58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    e400:	4b33      	ldr	r3, [pc, #204]	; (e4d0 <gpio_nrfx_pin_configure+0x10c>)
    e402:	4298      	cmp	r0, r3
    e404:	d161      	bne.n	e4ca <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    e406:	429f      	cmp	r7, r3
    e408:	d03d      	beq.n	e486 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    e40a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    e40e:	d049      	beq.n	e4a4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    e410:	f10d 0103 	add.w	r1, sp, #3
    e414:	4620      	mov	r0, r4
    e416:	f005 fb76 	bl	13b06 <get_drive>
		if (rv != 0) {
    e41a:	4607      	mov	r7, r0
    e41c:	bb50      	cbnz	r0, e474 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    e41e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e422:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    e426:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    e42a:	bf0c      	ite	eq
    e42c:	2301      	moveq	r3, #1
    e42e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    e430:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    e434:	4620      	mov	r0, r4
    e436:	f005 fba9 	bl	13b8c <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    e43a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    e43e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    e442:	d025      	beq.n	e490 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    e444:	f8d8 2004 	ldr.w	r2, [r8, #4]
    e448:	2301      	movs	r3, #1
    e44a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    e44c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    e450:	2200      	movs	r2, #0
    e452:	a901      	add	r1, sp, #4
    e454:	4628      	mov	r0, r5
    e456:	f001 fb93 	bl	fb80 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    e45a:	4b1d      	ldr	r3, [pc, #116]	; (e4d0 <gpio_nrfx_pin_configure+0x10c>)
    e45c:	4298      	cmp	r0, r3
    e45e:	d009      	beq.n	e474 <gpio_nrfx_pin_configure+0xb0>
    e460:	f06f 0715 	mvn.w	r7, #21
    e464:	e006      	b.n	e474 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    e466:	4628      	mov	r0, r5
    e468:	f001 fcbc 	bl	fde4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    e46c:	4b18      	ldr	r3, [pc, #96]	; (e4d0 <gpio_nrfx_pin_configure+0x10c>)
    e46e:	429f      	cmp	r7, r3
    e470:	d004      	beq.n	e47c <gpio_nrfx_pin_configure+0xb8>
		return 0;
    e472:	2700      	movs	r7, #0
}
    e474:	4638      	mov	r0, r7
    e476:	b006      	add	sp, #24
    e478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    e47c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e480:	f001 fc3a 	bl	fcf8 <nrfx_gpiote_channel_free>
    e484:	e7f5      	b.n	e472 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    e486:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e48a:	f001 fc35 	bl	fcf8 <nrfx_gpiote_channel_free>
    e48e:	e7bc      	b.n	e40a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    e490:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    e494:	d0dc      	beq.n	e450 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    e496:	f8d8 2004 	ldr.w	r2, [r8, #4]
    e49a:	2301      	movs	r3, #1
    e49c:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    e49e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    e4a2:	e7d5      	b.n	e450 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    e4a4:	4620      	mov	r0, r4
    e4a6:	f005 fb71 	bl	13b8c <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    e4aa:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    e4ae:	2300      	movs	r3, #0
    e4b0:	461a      	mov	r2, r3
    e4b2:	a902      	add	r1, sp, #8
    e4b4:	4628      	mov	r0, r5
    e4b6:	f001 facf 	bl	fa58 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    e4ba:	4b05      	ldr	r3, [pc, #20]	; (e4d0 <gpio_nrfx_pin_configure+0x10c>)
    e4bc:	4298      	cmp	r0, r3
    e4be:	d101      	bne.n	e4c4 <gpio_nrfx_pin_configure+0x100>
    e4c0:	2700      	movs	r7, #0
    e4c2:	e7d7      	b.n	e474 <gpio_nrfx_pin_configure+0xb0>
    e4c4:	f06f 0715 	mvn.w	r7, #21
    e4c8:	e7d4      	b.n	e474 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    e4ca:	f06f 0715 	mvn.w	r7, #21
    e4ce:	e7d1      	b.n	e474 <gpio_nrfx_pin_configure+0xb0>
    e4d0:	0bad0000 	.word	0x0bad0000

0000e4d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    e4d4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    e4d6:	f001 fc05 	bl	fce4 <nrfx_gpiote_is_init>
    e4da:	b108      	cbz	r0, e4e0 <gpio_nrfx_init+0xc>
		return 0;
    e4dc:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    e4de:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    e4e0:	f001 fbd6 	bl	fc90 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    e4e4:	4b08      	ldr	r3, [pc, #32]	; (e508 <gpio_nrfx_init+0x34>)
    e4e6:	4298      	cmp	r0, r3
    e4e8:	d10a      	bne.n	e500 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    e4ea:	2100      	movs	r1, #0
    e4ec:	4807      	ldr	r0, [pc, #28]	; (e50c <gpio_nrfx_init+0x38>)
    e4ee:	f001 fbb1 	bl	fc54 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e4f2:	2200      	movs	r2, #0
    e4f4:	2105      	movs	r1, #5
    e4f6:	2006      	movs	r0, #6
    e4f8:	f004 fa94 	bl	12a24 <z_arm_irq_priority_set>
	return 0;
    e4fc:	2000      	movs	r0, #0
    e4fe:	e7ee      	b.n	e4de <gpio_nrfx_init+0xa>
		return -EIO;
    e500:	f06f 0004 	mvn.w	r0, #4
    e504:	e7eb      	b.n	e4de <gpio_nrfx_init+0xa>
    e506:	bf00      	nop
    e508:	0bad0000 	.word	0x0bad0000
    e50c:	00013c35 	.word	0x00013c35

0000e510 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    e510:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    e512:	6843      	ldr	r3, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    e514:	681b      	ldr	r3, [r3, #0]
NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
#else
    return p_reg->PSELSCL;
    e516:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
#else
    return p_reg->PSELSDA;
    e51a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    e51e:	f001 fe93 	bl	10248 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    e522:	4b04      	ldr	r3, [pc, #16]	; (e534 <i2c_nrfx_twi_recover_bus+0x24>)
    e524:	4298      	cmp	r0, r3
    e526:	d101      	bne.n	e52c <i2c_nrfx_twi_recover_bus+0x1c>
    e528:	2000      	movs	r0, #0
}
    e52a:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    e52c:	f06f 000f 	mvn.w	r0, #15
    e530:	e7fb      	b.n	e52a <i2c_nrfx_twi_recover_bus+0x1a>
    e532:	bf00      	nop
    e534:	0bad0000 	.word	0x0bad0000

0000e538 <i2c_nrfx_twi_transfer>:
{
    e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e53c:	b089      	sub	sp, #36	; 0x24
    e53e:	4682      	mov	sl, r0
    e540:	460d      	mov	r5, r1
    e542:	4616      	mov	r6, r2
    e544:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    e546:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    e54a:	6907      	ldr	r7, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    e54c:	f04f 32ff 	mov.w	r2, #4294967295
    e550:	f04f 33ff 	mov.w	r3, #4294967295
    e554:	4638      	mov	r0, r7
    e556:	f002 fa77 	bl	10a48 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    e55a:	f107 0b18 	add.w	fp, r7, #24
    e55e:	2200      	movs	r2, #0
    e560:	2300      	movs	r3, #0
    e562:	4658      	mov	r0, fp
    e564:	f002 fa70 	bl	10a48 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    e568:	4640      	mov	r0, r8
    e56a:	f001 fe25 	bl	101b8 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    e56e:	2400      	movs	r4, #0
	int ret = 0;
    e570:	9401      	str	r4, [sp, #4]
	for (size_t i = 0; i < num_msgs; i++) {
    e572:	e018      	b.n	e5a6 <i2c_nrfx_twi_transfer+0x6e>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    e574:	f012 0f01 	tst.w	r2, #1
    e578:	d166      	bne.n	e648 <i2c_nrfx_twi_transfer+0x110>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    e57a:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    e57c:	a903      	add	r1, sp, #12
    e57e:	4640      	mov	r0, r8
    e580:	f001 fe48 	bl	10214 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    e584:	4b34      	ldr	r3, [pc, #208]	; (e658 <i2c_nrfx_twi_transfer+0x120>)
    e586:	4298      	cmp	r0, r3
    e588:	d13c      	bne.n	e604 <i2c_nrfx_twi_transfer+0xcc>
    e58a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e58e:	2300      	movs	r3, #0
    e590:	4658      	mov	r0, fp
    e592:	f002 fa59 	bl	10a48 <z_impl_k_sem_take>
		if (ret != 0) {
    e596:	9001      	str	r0, [sp, #4]
    e598:	2800      	cmp	r0, #0
    e59a:	d13e      	bne.n	e61a <i2c_nrfx_twi_transfer+0xe2>
		res = data->res;
    e59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    e59e:	4b2e      	ldr	r3, [pc, #184]	; (e658 <i2c_nrfx_twi_transfer+0x120>)
    e5a0:	429a      	cmp	r2, r3
    e5a2:	d155      	bne.n	e650 <i2c_nrfx_twi_transfer+0x118>
	for (size_t i = 0; i < num_msgs; i++) {
    e5a4:	3401      	adds	r4, #1
    e5a6:	42b4      	cmp	r4, r6
    e5a8:	d244      	bcs.n	e634 <i2c_nrfx_twi_transfer+0xfc>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    e5aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    e5ae:	0099      	lsls	r1, r3, #2
    e5b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e5b4:	7a1a      	ldrb	r2, [r3, #8]
    e5b6:	f012 0f08 	tst.w	r2, #8
    e5ba:	d138      	bne.n	e62e <i2c_nrfx_twi_transfer+0xf6>
		nrfx_twi_xfer_desc_t cur_xfer = {
    e5bc:	2200      	movs	r2, #0
    e5be:	9203      	str	r2, [sp, #12]
    e5c0:	9204      	str	r2, [sp, #16]
    e5c2:	9205      	str	r2, [sp, #20]
    e5c4:	9206      	str	r2, [sp, #24]
    e5c6:	9207      	str	r2, [sp, #28]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
    e5c8:	7a1a      	ldrb	r2, [r3, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    e5ca:	f002 0001 	and.w	r0, r2, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    e5ce:	f88d 000c 	strb.w	r0, [sp, #12]
    e5d2:	f88d 900d 	strb.w	r9, [sp, #13]
			.primary_length = msgs[i].len,
    e5d6:	685b      	ldr	r3, [r3, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    e5d8:	9304      	str	r3, [sp, #16]
			.p_primary_buf  = msgs[i].buf,
    e5da:	586b      	ldr	r3, [r5, r1]
		nrfx_twi_xfer_desc_t cur_xfer = {
    e5dc:	9306      	str	r3, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    e5de:	f012 0f02 	tst.w	r2, #2
    e5e2:	d10d      	bne.n	e600 <i2c_nrfx_twi_transfer+0xc8>
			if ((i < (num_msgs - 1)) &&
    e5e4:	1e73      	subs	r3, r6, #1
    e5e6:	42a3      	cmp	r3, r4
    e5e8:	d9c4      	bls.n	e574 <i2c_nrfx_twi_transfer+0x3c>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
    e5ea:	1c63      	adds	r3, r4, #1
    e5ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e5f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e5f4:	7a1b      	ldrb	r3, [r3, #8]
			if ((i < (num_msgs - 1)) &&
    e5f6:	f013 0f04 	tst.w	r3, #4
    e5fa:	d1bb      	bne.n	e574 <i2c_nrfx_twi_transfer+0x3c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    e5fc:	2240      	movs	r2, #64	; 0x40
    e5fe:	e7bd      	b.n	e57c <i2c_nrfx_twi_transfer+0x44>
		uint32_t xfer_flags = 0;
    e600:	2200      	movs	r2, #0
    e602:	e7bb      	b.n	e57c <i2c_nrfx_twi_transfer+0x44>
			if (res == NRFX_ERROR_BUSY) {
    e604:	330b      	adds	r3, #11
    e606:	4298      	cmp	r0, r3
    e608:	d003      	beq.n	e612 <i2c_nrfx_twi_transfer+0xda>
				ret = -EIO;
    e60a:	f06f 0304 	mvn.w	r3, #4
    e60e:	9301      	str	r3, [sp, #4]
    e610:	e010      	b.n	e634 <i2c_nrfx_twi_transfer+0xfc>
				ret = -EBUSY;
    e612:	f06f 030f 	mvn.w	r3, #15
    e616:	9301      	str	r3, [sp, #4]
    e618:	e00c      	b.n	e634 <i2c_nrfx_twi_transfer+0xfc>
			nrfx_twi_disable(&config->twi);
    e61a:	4640      	mov	r0, r8
    e61c:	f001 fddc 	bl	101d8 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    e620:	4650      	mov	r0, sl
    e622:	f7ff ff75 	bl	e510 <i2c_nrfx_twi_recover_bus>
			ret = -EIO;
    e626:	f06f 0304 	mvn.w	r3, #4
    e62a:	9301      	str	r3, [sp, #4]
			break;
    e62c:	e002      	b.n	e634 <i2c_nrfx_twi_transfer+0xfc>
			ret = -ENOTSUP;
    e62e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e632:	9301      	str	r3, [sp, #4]
	nrfx_twi_disable(&config->twi);
    e634:	4640      	mov	r0, r8
    e636:	f001 fdcf 	bl	101d8 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    e63a:	4638      	mov	r0, r7
    e63c:	f002 f9dc 	bl	109f8 <z_impl_k_sem_give>
}
    e640:	9801      	ldr	r0, [sp, #4]
    e642:	b009      	add	sp, #36	; 0x24
    e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOTSUP;
    e648:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e64c:	9301      	str	r3, [sp, #4]
    e64e:	e7f1      	b.n	e634 <i2c_nrfx_twi_transfer+0xfc>
			ret = -EIO;
    e650:	f06f 0304 	mvn.w	r3, #4
    e654:	9301      	str	r3, [sp, #4]
    e656:	e7ed      	b.n	e634 <i2c_nrfx_twi_transfer+0xfc>
    e658:	0bad0000 	.word	0x0bad0000

0000e65c <event_handler>:
{
    e65c:	b508      	push	{r3, lr}
	switch (p_event->type) {
    e65e:	7803      	ldrb	r3, [r0, #0]
    e660:	2b01      	cmp	r3, #1
    e662:	d00c      	beq.n	e67e <event_handler+0x22>
    e664:	2b02      	cmp	r3, #2
    e666:	d00d      	beq.n	e684 <event_handler+0x28>
    e668:	b113      	cbz	r3, e670 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    e66a:	4b08      	ldr	r3, [pc, #32]	; (e68c <event_handler+0x30>)
    e66c:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    e66e:	e001      	b.n	e674 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    e670:	4b07      	ldr	r3, [pc, #28]	; (e690 <event_handler+0x34>)
    e672:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
    e674:	f101 0018 	add.w	r0, r1, #24
    e678:	f002 f9be 	bl	109f8 <z_impl_k_sem_give>
}
    e67c:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    e67e:	4b05      	ldr	r3, [pc, #20]	; (e694 <event_handler+0x38>)
    e680:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    e682:	e7f7      	b.n	e674 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    e684:	4b04      	ldr	r3, [pc, #16]	; (e698 <event_handler+0x3c>)
    e686:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    e688:	e7f4      	b.n	e674 <event_handler+0x18>
    e68a:	bf00      	nop
    e68c:	0bad0001 	.word	0x0bad0001
    e690:	0bad0000 	.word	0x0bad0000
    e694:	0bae0001 	.word	0x0bae0001
    e698:	0bae0002 	.word	0x0bae0002

0000e69c <init_twi>:
	.transfer    = i2c_nrfx_twi_transfer,
	.recover_bus = i2c_nrfx_twi_recover_bus,
};

static int init_twi(const struct device *dev)
{
    e69c:	b508      	push	{r3, lr}
    e69e:	4603      	mov	r3, r0
	const struct i2c_nrfx_twi_config *config = dev->config;
    e6a0:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = dev->data;
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    e6a2:	691b      	ldr	r3, [r3, #16]
    e6a4:	4a06      	ldr	r2, [pc, #24]	; (e6c0 <init_twi+0x24>)
    e6a6:	f100 0108 	add.w	r1, r0, #8
    e6aa:	f001 fd2d 	bl	10108 <nrfx_twi_init>
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    e6ae:	4b05      	ldr	r3, [pc, #20]	; (e6c4 <init_twi+0x28>)
    e6b0:	4298      	cmp	r0, r3
    e6b2:	d101      	bne.n	e6b8 <init_twi+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
    e6b4:	2000      	movs	r0, #0
}
    e6b6:	bd08      	pop	{r3, pc}
		return -EBUSY;
    e6b8:	f06f 000f 	mvn.w	r0, #15
    e6bc:	e7fb      	b.n	e6b6 <init_twi+0x1a>
    e6be:	bf00      	nop
    e6c0:	0000e65d 	.word	0x0000e65d
    e6c4:	0bad0000 	.word	0x0bad0000

0000e6c8 <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e6c8:	f04f 0c00 	mov.w	ip, #0
    e6cc:	458c      	cmp	ip, r1
    e6ce:	f080 8100 	bcs.w	e8d2 <pinctrl_configure_pins+0x20a>
{
    e6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6d6:	e037      	b.n	e748 <pinctrl_configure_pins+0x80>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    e6d8:	f04f 33ff 	mov.w	r3, #4294967295
    e6dc:	e03e      	b.n	e75c <pinctrl_configure_pins+0x94>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    e6de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e6e2:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e6e6:	4674      	mov	r4, lr
			write = 1U;
    e6e8:	4675      	mov	r5, lr
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    e6ea:	2b7f      	cmp	r3, #127	; 0x7f
    e6ec:	d025      	beq.n	e73a <pinctrl_configure_pins+0x72>
			if (write != NO_WRITE) {
    e6ee:	f1b5 3fff 	cmp.w	r5, #4294967295
    e6f2:	d00b      	beq.n	e70c <pinctrl_configure_pins+0x44>
    if (value == 0)
    e6f4:	2d00      	cmp	r5, #0
    e6f6:	f040 80dc 	bne.w	e8b2 <pinctrl_configure_pins+0x1ea>
    *p_pin = pin_number & 0x1F;
    e6fa:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e6fe:	2501      	movs	r5, #1
    e700:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTCLR = clr_mask;
    e704:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    e708:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    e70c:	59c5      	ldr	r5, [r0, r7]
    e70e:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    e712:	d002      	beq.n	e71a <pinctrl_configure_pins+0x52>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e714:	f04f 0e01 	mov.w	lr, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    e718:	2400      	movs	r4, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    e71a:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
    e71e:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    e722:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    e726:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e72a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    e72e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e732:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    e736:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e73a:	f10c 0c01 	add.w	ip, ip, #1
    e73e:	fa5f fc8c 	uxtb.w	ip, ip
    e742:	458c      	cmp	ip, r1
    e744:	f080 80bf 	bcs.w	e8c6 <pinctrl_configure_pins+0x1fe>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    e748:	ea4f 078c 	mov.w	r7, ip, lsl #2
    e74c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    e750:	f3c4 2643 	ubfx	r6, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    e754:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    e758:	2b7f      	cmp	r3, #127	; 0x7f
    e75a:	d0bd      	beq.n	e6d8 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    e75c:	0c24      	lsrs	r4, r4, #16
    e75e:	2c19      	cmp	r4, #25
    e760:	f200 80b3 	bhi.w	e8ca <pinctrl_configure_pins+0x202>
    e764:	a501      	add	r5, pc, #4	; (adr r5, e76c <pinctrl_configure_pins+0xa4>)
    e766:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
    e76a:	bf00      	nop
    e76c:	0000e6df 	.word	0x0000e6df
    e770:	0000e7d5 	.word	0x0000e7d5
    e774:	0000e7e5 	.word	0x0000e7e5
    e778:	0000e7f3 	.word	0x0000e7f3
    e77c:	0000e803 	.word	0x0000e803
    e780:	0000e811 	.word	0x0000e811
    e784:	0000e81f 	.word	0x0000e81f
    e788:	0000e8cb 	.word	0x0000e8cb
    e78c:	0000e8cb 	.word	0x0000e8cb
    e790:	0000e8cb 	.word	0x0000e8cb
    e794:	0000e8cb 	.word	0x0000e8cb
    e798:	0000e82f 	.word	0x0000e82f
    e79c:	0000e841 	.word	0x0000e841
    e7a0:	0000e8cb 	.word	0x0000e8cb
    e7a4:	0000e8cb 	.word	0x0000e8cb
    e7a8:	0000e8cb 	.word	0x0000e8cb
    e7ac:	0000e8cb 	.word	0x0000e8cb
    e7b0:	0000e8cb 	.word	0x0000e8cb
    e7b4:	0000e8cb 	.word	0x0000e8cb
    e7b8:	0000e8cb 	.word	0x0000e8cb
    e7bc:	0000e8cb 	.word	0x0000e8cb
    e7c0:	0000e8cb 	.word	0x0000e8cb
    e7c4:	0000e853 	.word	0x0000e853
    e7c8:	0000e865 	.word	0x0000e865
    e7cc:	0000e877 	.word	0x0000e877
    e7d0:	0000e889 	.word	0x0000e889
			NRF_PSEL_UART(reg, RXD) = pin;
    e7d4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e7d8:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e7dc:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e7de:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    e7e2:	e782      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
    e7e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e7e8:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e7ec:	4674      	mov	r4, lr
			write = 1U;
    e7ee:	4675      	mov	r5, lr
			break;
    e7f0:	e77b      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
    e7f2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e7f6:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e7fa:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e7fc:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    e800:	e773      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    e802:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e806:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e80a:	2401      	movs	r4, #1
			write = 0U;
    e80c:	4675      	mov	r5, lr
			break;
    e80e:	e76c      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    e810:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e814:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e818:	4674      	mov	r4, lr
			write = 0U;
    e81a:	2500      	movs	r5, #0
			break;
    e81c:	e765      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    e81e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e822:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e826:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e828:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    e82c:	e75d      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    e82e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    e832:	b396      	cbz	r6, e89a <pinctrl_configure_pins+0x1d2>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e834:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e838:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e83a:	f04f 35ff 	mov.w	r5, #4294967295
    e83e:	e754      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    e840:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    e844:	b37e      	cbz	r6, e8a6 <pinctrl_configure_pins+0x1de>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e846:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e84a:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    e84c:	f04f 35ff 	mov.w	r5, #4294967295
    e850:	e74b      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    e852:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    e856:	59c5      	ldr	r5, [r0, r7]
    e858:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e85c:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e860:	4674      	mov	r4, lr
			break;
    e862:	e742      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    e864:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    e868:	59c5      	ldr	r5, [r0, r7]
    e86a:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e86e:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e872:	4674      	mov	r4, lr
			break;
    e874:	e739      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    e876:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    e87a:	59c5      	ldr	r5, [r0, r7]
    e87c:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e880:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e884:	4674      	mov	r4, lr
			break;
    e886:	e730      	b.n	e6ea <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    e888:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    e88c:	59c5      	ldr	r5, [r0, r7]
    e88e:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e892:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e896:	4674      	mov	r4, lr
			break;
    e898:	e727      	b.n	e6ea <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e89a:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e89c:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
    e89e:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
    e8a2:	2606      	movs	r6, #6
    e8a4:	e721      	b.n	e6ea <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e8a6:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e8a8:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
    e8aa:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
    e8ae:	2606      	movs	r6, #6
    e8b0:	e71b      	b.n	e6ea <pinctrl_configure_pins+0x22>
    *p_pin = pin_number & 0x1F;
    e8b2:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e8b6:	2501      	movs	r5, #1
    e8b8:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTSET = set_mask;
    e8bc:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    e8c0:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
}
    e8c4:	e722      	b.n	e70c <pinctrl_configure_pins+0x44>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    e8c6:	2000      	movs	r0, #0
    e8c8:	e001      	b.n	e8ce <pinctrl_configure_pins+0x206>
		switch (NRF_GET_FUN(pins[i])) {
    e8ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    e8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
    e8d2:	2000      	movs	r0, #0
}
    e8d4:	4770      	bx	lr
    e8d6:	bf00      	nop

0000e8d8 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    e8d8:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    e8da:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    e8dc:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    e8e0:	d06f      	beq.n	e9c2 <baudrate_set+0xea>
    e8e2:	d83a      	bhi.n	e95a <baudrate_set+0x82>
    e8e4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    e8e8:	d06e      	beq.n	e9c8 <baudrate_set+0xf0>
    e8ea:	d90a      	bls.n	e902 <baudrate_set+0x2a>
    e8ec:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    e8f0:	d075      	beq.n	e9de <baudrate_set+0x106>
    e8f2:	d924      	bls.n	e93e <baudrate_set+0x66>
    e8f4:	f647 2312 	movw	r3, #31250	; 0x7a12
    e8f8:	4299      	cmp	r1, r3
    e8fa:	d12b      	bne.n	e954 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    e8fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    e900:	e013      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e902:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    e906:	d061      	beq.n	e9cc <baudrate_set+0xf4>
    e908:	d907      	bls.n	e91a <baudrate_set+0x42>
    e90a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    e90e:	d063      	beq.n	e9d8 <baudrate_set+0x100>
    e910:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    e914:	d110      	bne.n	e938 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    e916:	4b3c      	ldr	r3, [pc, #240]	; (ea08 <baudrate_set+0x130>)
    e918:	e007      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e91a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    e91e:	d058      	beq.n	e9d2 <baudrate_set+0xfa>
    e920:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    e924:	d105      	bne.n	e932 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    e926:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    e92a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    e92e:	2000      	movs	r0, #0
    e930:	4770      	bx	lr
	switch (baudrate) {
    e932:	f06f 0015 	mvn.w	r0, #21
    e936:	4770      	bx	lr
    e938:	f06f 0015 	mvn.w	r0, #21
    e93c:	4770      	bx	lr
    e93e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    e942:	d04e      	beq.n	e9e2 <baudrate_set+0x10a>
    e944:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    e948:	d101      	bne.n	e94e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    e94a:	4b30      	ldr	r3, [pc, #192]	; (ea0c <baudrate_set+0x134>)
    e94c:	e7ed      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e94e:	f06f 0015 	mvn.w	r0, #21
    e952:	4770      	bx	lr
    e954:	f06f 0015 	mvn.w	r0, #21
    e958:	4770      	bx	lr
    e95a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    e95e:	d042      	beq.n	e9e6 <baudrate_set+0x10e>
    e960:	d909      	bls.n	e976 <baudrate_set+0x9e>
    e962:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    e966:	d046      	beq.n	e9f6 <baudrate_set+0x11e>
    e968:	d91f      	bls.n	e9aa <baudrate_set+0xd2>
    e96a:	4b29      	ldr	r3, [pc, #164]	; (ea10 <baudrate_set+0x138>)
    e96c:	4299      	cmp	r1, r3
    e96e:	d148      	bne.n	ea02 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    e970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e974:	e7d9      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e976:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    e97a:	d037      	beq.n	e9ec <baudrate_set+0x114>
    e97c:	d905      	bls.n	e98a <baudrate_set+0xb2>
    e97e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    e982:	d10f      	bne.n	e9a4 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    e984:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    e988:	e7cf      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e98a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    e98e:	4299      	cmp	r1, r3
    e990:	d02e      	beq.n	e9f0 <baudrate_set+0x118>
    e992:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    e996:	d102      	bne.n	e99e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    e998:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    e99c:	e7c5      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e99e:	f06f 0015 	mvn.w	r0, #21
    e9a2:	4770      	bx	lr
    e9a4:	f06f 0015 	mvn.w	r0, #21
    e9a8:	4770      	bx	lr
    e9aa:	4b1a      	ldr	r3, [pc, #104]	; (ea14 <baudrate_set+0x13c>)
    e9ac:	4299      	cmp	r1, r3
    e9ae:	d025      	beq.n	e9fc <baudrate_set+0x124>
    e9b0:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    e9b4:	d102      	bne.n	e9bc <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    e9b6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    e9ba:	e7b6      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e9bc:	f06f 0015 	mvn.w	r0, #21
    e9c0:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    e9c2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    e9c6:	e7b0      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    e9c8:	4b13      	ldr	r3, [pc, #76]	; (ea18 <baudrate_set+0x140>)
    e9ca:	e7ae      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    e9cc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    e9d0:	e7ab      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    e9d2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    e9d6:	e7a8      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    e9d8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    e9dc:	e7a5      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    e9de:	4b0f      	ldr	r3, [pc, #60]	; (ea1c <baudrate_set+0x144>)
    e9e0:	e7a3      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    e9e2:	4b0f      	ldr	r3, [pc, #60]	; (ea20 <baudrate_set+0x148>)
    e9e4:	e7a1      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    e9e6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    e9ea:	e79e      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    e9ec:	4b0d      	ldr	r3, [pc, #52]	; (ea24 <baudrate_set+0x14c>)
    e9ee:	e79c      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    e9f0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    e9f4:	e799      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    e9f6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e9fa:	e796      	b.n	e92a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    e9fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    ea00:	e793      	b.n	e92a <baudrate_set+0x52>
	switch (baudrate) {
    ea02:	f06f 0015 	mvn.w	r0, #21
}
    ea06:	4770      	bx	lr
    ea08:	0013b000 	.word	0x0013b000
    ea0c:	004ea000 	.word	0x004ea000
    ea10:	000f4240 	.word	0x000f4240
    ea14:	0003d090 	.word	0x0003d090
    ea18:	00275000 	.word	0x00275000
    ea1c:	0075c000 	.word	0x0075c000
    ea20:	003af000 	.word	0x003af000
    ea24:	013a9000 	.word	0x013a9000

0000ea28 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea2a:	4605      	mov	r5, r0
    ea2c:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    ea2e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    ea30:	f006 fb50 	bl	150d4 <k_is_in_isr>
    ea34:	b910      	cbnz	r0, ea3c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    ea36:	4b12      	ldr	r3, [pc, #72]	; (ea80 <uarte_nrfx_poll_out+0x58>)
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	b983      	cbnz	r3, ea5e <uarte_nrfx_poll_out+0x36>
    ea3c:	f04f 0340 	mov.w	r3, #64	; 0x40
    ea40:	f3ef 8411 	mrs	r4, BASEPRI
    ea44:	f383 8812 	msr	BASEPRI_MAX, r3
    ea48:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    ea4c:	4628      	mov	r0, r5
    ea4e:	f005 f9f5 	bl	13e3c <is_tx_ready>
    ea52:	b940      	cbnz	r0, ea66 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    ea54:	f384 8811 	msr	BASEPRI, r4
    ea58:	f3bf 8f6f 	isb	sy
}
    ea5c:	e7ee      	b.n	ea3c <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    ea5e:	4628      	mov	r0, r5
    ea60:	f005 fa51 	bl	13f06 <wait_tx_ready>
    ea64:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    ea66:	693b      	ldr	r3, [r7, #16]
    ea68:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    ea6a:	2201      	movs	r2, #1
    ea6c:	6939      	ldr	r1, [r7, #16]
    ea6e:	4628      	mov	r0, r5
    ea70:	f005 f9fe 	bl	13e70 <tx_start>
	__asm__ volatile(
    ea74:	f384 8811 	msr	BASEPRI, r4
    ea78:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    ea7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea7e:	bf00      	nop
    ea80:	20002186 	.word	0x20002186

0000ea84 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    ea84:	b538      	push	{r3, r4, r5, lr}
    ea86:	4604      	mov	r4, r0
    ea88:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    ea8a:	f101 0018 	add.w	r0, r1, #24
    ea8e:	f001 f9f5 	bl	fe7c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    ea92:	4b0c      	ldr	r3, [pc, #48]	; (eac4 <endtx_stoptx_ppi_init+0x40>)
    ea94:	4298      	cmp	r0, r3
    ea96:	d111      	bne.n	eabc <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    ea98:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    ea9a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    ea9e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    eaa0:	4a09      	ldr	r2, [pc, #36]	; (eac8 <endtx_stoptx_ppi_init+0x44>)
    eaa2:	33a2      	adds	r3, #162	; 0xa2
    eaa4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    eaa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    eaac:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    eaae:	7e29      	ldrb	r1, [r5, #24]
    eab0:	2301      	movs	r3, #1
    eab2:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    eab4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    eab8:	2000      	movs	r0, #0
}
    eaba:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    eabc:	f06f 0004 	mvn.w	r0, #4
    eac0:	e7fb      	b.n	eaba <endtx_stoptx_ppi_init+0x36>
    eac2:	bf00      	nop
    eac4:	0bad0000 	.word	0x0bad0000
    eac8:	4001f000 	.word	0x4001f000

0000eacc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    eacc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    ead0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    ead4:	4b01      	ldr	r3, [pc, #4]	; (eadc <set_comparator+0x10>)
    ead6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    eada:	4770      	bx	lr
    eadc:	40011000 	.word	0x40011000

0000eae0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    eae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    eae4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    eae6:	4a02      	ldr	r2, [pc, #8]	; (eaf0 <event_enable+0x10>)
    eae8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    eaec:	4770      	bx	lr
    eaee:	bf00      	nop
    eaf0:	40011000 	.word	0x40011000

0000eaf4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    eaf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    eaf8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    eafa:	4a02      	ldr	r2, [pc, #8]	; (eb04 <event_disable+0x10>)
    eafc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    eb00:	4770      	bx	lr
    eb02:	bf00      	nop
    eb04:	40011000 	.word	0x40011000

0000eb08 <counter>:
     return p_reg->COUNTER;
    eb08:	4b01      	ldr	r3, [pc, #4]	; (eb10 <counter+0x8>)
    eb0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    eb0e:	4770      	bx	lr
    eb10:	40011000 	.word	0x40011000

0000eb14 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    eb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb18:	4606      	mov	r6, r0
    eb1a:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    eb1c:	f7ff ffea 	bl	eaf4 <event_disable>
	event_clear(chan);
    eb20:	4630      	mov	r0, r6
    eb22:	f005 fa99 	bl	14058 <event_clear>
	uint32_t cc_val = req_cc;
    eb26:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    eb28:	2703      	movs	r7, #3
    eb2a:	e001      	b.n	eb30 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    eb2c:	193d      	adds	r5, r7, r4
			cc_inc++;
    eb2e:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    eb30:	4629      	mov	r1, r5
    eb32:	4630      	mov	r0, r6
    eb34:	f7ff ffca 	bl	eacc <set_comparator>
		event_enable(chan);
    eb38:	4630      	mov	r0, r6
    eb3a:	f7ff ffd1 	bl	eae0 <event_enable>
		now = counter();
    eb3e:	f7ff ffe3 	bl	eb08 <counter>
    eb42:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    eb44:	1cc1      	adds	r1, r0, #3
    eb46:	4628      	mov	r0, r5
    eb48:	f005 fa75 	bl	14036 <counter_sub>
    eb4c:	4b0b      	ldr	r3, [pc, #44]	; (eb7c <set_alarm+0x68>)
    eb4e:	4298      	cmp	r0, r3
    eb50:	d911      	bls.n	eb76 <set_alarm+0x62>
			if (event_check(chan)) {
    eb52:	4630      	mov	r0, r6
    eb54:	f005 fa73 	bl	1403e <event_check>
    eb58:	2800      	cmp	r0, #0
    eb5a:	d0e7      	beq.n	eb2c <set_alarm+0x18>
				now = counter();
    eb5c:	f7ff ffd4 	bl	eb08 <counter>
    eb60:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    eb62:	4641      	mov	r1, r8
    eb64:	f005 fa67 	bl	14036 <counter_sub>
    eb68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    eb6c:	d903      	bls.n	eb76 <set_alarm+0x62>
					event_clear(chan);
    eb6e:	4630      	mov	r0, r6
    eb70:	f005 fa72 	bl	14058 <event_clear>
    eb74:	e7da      	b.n	eb2c <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    eb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb7a:	bf00      	nop
    eb7c:	007ffffd 	.word	0x007ffffd

0000eb80 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    eb80:	4b03      	ldr	r3, [pc, #12]	; (eb90 <int_event_disable_rtc+0x10>)
    eb82:	4a04      	ldr	r2, [pc, #16]	; (eb94 <int_event_disable_rtc+0x14>)
    eb84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    eb88:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    eb8c:	4770      	bx	lr
    eb8e:	bf00      	nop
    eb90:	40011000 	.word	0x40011000
    eb94:	000f0003 	.word	0x000f0003

0000eb98 <compare_int_lock>:
{
    eb98:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    eb9a:	2301      	movs	r3, #1
    eb9c:	4083      	lsls	r3, r0
    eb9e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    eba2:	4a0e      	ldr	r2, [pc, #56]	; (ebdc <compare_int_lock+0x44>)
    eba4:	f3bf 8f5b 	dmb	ish
    eba8:	e852 1f00 	ldrex	r1, [r2]
    ebac:	ea01 0e0c 	and.w	lr, r1, ip
    ebb0:	e842 e400 	strex	r4, lr, [r2]
    ebb4:	2c00      	cmp	r4, #0
    ebb6:	d1f7      	bne.n	eba8 <compare_int_lock+0x10>
    ebb8:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ebbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ebc0:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    ebc2:	4807      	ldr	r0, [pc, #28]	; (ebe0 <compare_int_lock+0x48>)
    ebc4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    ebc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ebcc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    ebd0:	420b      	tst	r3, r1
}
    ebd2:	bf14      	ite	ne
    ebd4:	2001      	movne	r0, #1
    ebd6:	2000      	moveq	r0, #0
    ebd8:	bd10      	pop	{r4, pc}
    ebda:	bf00      	nop
    ebdc:	20001b74 	.word	0x20001b74
    ebe0:	40011000 	.word	0x40011000

0000ebe4 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    ebe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ebe8:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    ebea:	4a14      	ldr	r2, [pc, #80]	; (ec3c <channel_processing_check_and_clear+0x58>)
    ebec:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    ebf0:	4213      	tst	r3, r2
    ebf2:	d101      	bne.n	ebf8 <channel_processing_check_and_clear+0x14>
	return false;
    ebf4:	2000      	movs	r0, #0
}
    ebf6:	4770      	bx	lr
{
    ebf8:	b510      	push	{r4, lr}
    ebfa:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    ebfc:	2301      	movs	r3, #1
    ebfe:	4083      	lsls	r3, r0
    ec00:	43db      	mvns	r3, r3
    ec02:	490f      	ldr	r1, [pc, #60]	; (ec40 <channel_processing_check_and_clear+0x5c>)
    ec04:	f3bf 8f5b 	dmb	ish
    ec08:	e851 2f00 	ldrex	r2, [r1]
    ec0c:	ea02 0003 	and.w	r0, r2, r3
    ec10:	e841 0c00 	strex	ip, r0, [r1]
    ec14:	f1bc 0f00 	cmp.w	ip, #0
    ec18:	d1f6      	bne.n	ec08 <channel_processing_check_and_clear+0x24>
    ec1a:	f3bf 8f5b 	dmb	ish
    ec1e:	fa22 f304 	lsr.w	r3, r2, r4
    ec22:	f013 0f01 	tst.w	r3, #1
    ec26:	d103      	bne.n	ec30 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    ec28:	4620      	mov	r0, r4
    ec2a:	f005 fa08 	bl	1403e <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    ec2e:	b118      	cbz	r0, ec38 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    ec30:	4620      	mov	r0, r4
    ec32:	f005 fa11 	bl	14058 <event_clear>
			return true;
    ec36:	2001      	movs	r0, #1
}
    ec38:	bd10      	pop	{r4, pc}
    ec3a:	bf00      	nop
    ec3c:	40011000 	.word	0x40011000
    ec40:	20001b70 	.word	0x20001b70

0000ec44 <compare_int_unlock>:
	if (key) {
    ec44:	b901      	cbnz	r1, ec48 <compare_int_unlock+0x4>
}
    ec46:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    ec48:	2301      	movs	r3, #1
    ec4a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ec4c:	4a11      	ldr	r2, [pc, #68]	; (ec94 <compare_int_unlock+0x50>)
    ec4e:	f3bf 8f5b 	dmb	ish
    ec52:	e852 cf00 	ldrex	ip, [r2]
    ec56:	ea4c 0c03 	orr.w	ip, ip, r3
    ec5a:	e842 c100 	strex	r1, ip, [r2]
    ec5e:	2900      	cmp	r1, #0
    ec60:	d1f7      	bne.n	ec52 <compare_int_unlock+0xe>
    ec62:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ec66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ec6a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    ec6c:	4a0a      	ldr	r2, [pc, #40]	; (ec98 <compare_int_unlock+0x54>)
    ec6e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ec72:	f3bf 8f5b 	dmb	ish
    ec76:	4b09      	ldr	r3, [pc, #36]	; (ec9c <compare_int_unlock+0x58>)
    ec78:	681b      	ldr	r3, [r3, #0]
    ec7a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    ec7e:	40c3      	lsrs	r3, r0
    ec80:	f013 0f01 	tst.w	r3, #1
    ec84:	d0df      	beq.n	ec46 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec86:	4b06      	ldr	r3, [pc, #24]	; (eca0 <compare_int_unlock+0x5c>)
    ec88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ec8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    ec90:	e7d9      	b.n	ec46 <compare_int_unlock+0x2>
    ec92:	bf00      	nop
    ec94:	20001b74 	.word	0x20001b74
    ec98:	40011000 	.word	0x40011000
    ec9c:	20001b70 	.word	0x20001b70
    eca0:	e000e100 	.word	0xe000e100

0000eca4 <sys_clock_timeout_handler>:
{
    eca4:	b538      	push	{r3, r4, r5, lr}
    eca6:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    eca8:	4610      	mov	r0, r2
    ecaa:	4619      	mov	r1, r3
    ecac:	f005 f9e0 	bl	14070 <absolute_time_to_cc>
    ecb0:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    ecb2:	490d      	ldr	r1, [pc, #52]	; (ece8 <sys_clock_timeout_handler+0x44>)
    ecb4:	680b      	ldr	r3, [r1, #0]
    ecb6:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    ecb8:	181b      	adds	r3, r3, r0
    ecba:	684c      	ldr	r4, [r1, #4]
    ecbc:	f144 0400 	adc.w	r4, r4, #0
    ecc0:	600b      	str	r3, [r1, #0]
    ecc2:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    ecc4:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    ecc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    eccc:	d209      	bcs.n	ece2 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    ecce:	4b07      	ldr	r3, [pc, #28]	; (ecec <sys_clock_timeout_handler+0x48>)
    ecd0:	681b      	ldr	r3, [r3, #0]
    ecd2:	0a19      	lsrs	r1, r3, #8
    ecd4:	061b      	lsls	r3, r3, #24
    ecd6:	18d4      	adds	r4, r2, r3
    ecd8:	f141 0500 	adc.w	r5, r1, #0
    ecdc:	4b04      	ldr	r3, [pc, #16]	; (ecf0 <sys_clock_timeout_handler+0x4c>)
    ecde:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    ece2:	f002 fcbb 	bl	1165c <sys_clock_announce>
}
    ece6:	bd38      	pop	{r3, r4, r5, pc}
    ece8:	20001488 	.word	0x20001488
    ecec:	20001b78 	.word	0x20001b78
    ecf0:	20001490 	.word	0x20001490

0000ecf4 <z_nrf_rtc_timer_read>:
{
    ecf4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    ecf6:	4b0d      	ldr	r3, [pc, #52]	; (ed2c <z_nrf_rtc_timer_read+0x38>)
    ecf8:	681c      	ldr	r4, [r3, #0]
    ecfa:	0a25      	lsrs	r5, r4, #8
    ecfc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    ecfe:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    ed02:	f7ff ff01 	bl	eb08 <counter>
    ed06:	4603      	mov	r3, r0
	val += cntr;
    ed08:	1900      	adds	r0, r0, r4
    ed0a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    ed0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ed12:	d20a      	bcs.n	ed2a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    ed14:	4b06      	ldr	r3, [pc, #24]	; (ed30 <z_nrf_rtc_timer_read+0x3c>)
    ed16:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed1a:	4290      	cmp	r0, r2
    ed1c:	eb71 0303 	sbcs.w	r3, r1, r3
    ed20:	d203      	bcs.n	ed2a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    ed22:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    ed26:	f141 0100 	adc.w	r1, r1, #0
}
    ed2a:	bd38      	pop	{r3, r4, r5, pc}
    ed2c:	20001b78 	.word	0x20001b78
    ed30:	20001490 	.word	0x20001490

0000ed34 <compare_set_nolocks>:
{
    ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed36:	4606      	mov	r6, r0
    ed38:	4614      	mov	r4, r2
    ed3a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    ed3c:	4610      	mov	r0, r2
    ed3e:	4619      	mov	r1, r3
    ed40:	f005 f996 	bl	14070 <absolute_time_to_cc>
    ed44:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    ed46:	f7ff ffd5 	bl	ecf4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    ed4a:	42a0      	cmp	r0, r4
    ed4c:	eb71 0305 	sbcs.w	r3, r1, r5
    ed50:	d215      	bcs.n	ed7e <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    ed52:	1a20      	subs	r0, r4, r0
    ed54:	eb65 0101 	sbc.w	r1, r5, r1
    ed58:	4b17      	ldr	r3, [pc, #92]	; (edb8 <compare_set_nolocks+0x84>)
    ed5a:	4298      	cmp	r0, r3
    ed5c:	f171 0100 	sbcs.w	r1, r1, #0
    ed60:	d227      	bcs.n	edb2 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    ed62:	4b16      	ldr	r3, [pc, #88]	; (edbc <compare_set_nolocks+0x88>)
    ed64:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    ed68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    ed6c:	42ab      	cmp	r3, r5
    ed6e:	bf08      	it	eq
    ed70:	42a2      	cmpeq	r2, r4
    ed72:	d012      	beq.n	ed9a <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    ed74:	4639      	mov	r1, r7
    ed76:	4630      	mov	r0, r6
    ed78:	f7ff fecc 	bl	eb14 <set_alarm>
    ed7c:	e00d      	b.n	ed9a <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    ed7e:	2301      	movs	r3, #1
    ed80:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ed82:	4a0f      	ldr	r2, [pc, #60]	; (edc0 <compare_set_nolocks+0x8c>)
    ed84:	f3bf 8f5b 	dmb	ish
    ed88:	e852 0f00 	ldrex	r0, [r2]
    ed8c:	4318      	orrs	r0, r3
    ed8e:	e842 0100 	strex	r1, r0, [r2]
    ed92:	2900      	cmp	r1, #0
    ed94:	d1f8      	bne.n	ed88 <compare_set_nolocks+0x54>
    ed96:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    ed9a:	4b08      	ldr	r3, [pc, #32]	; (edbc <compare_set_nolocks+0x88>)
    ed9c:	0132      	lsls	r2, r6, #4
    ed9e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    eda2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    eda6:	9906      	ldr	r1, [sp, #24]
    eda8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    edaa:	9b07      	ldr	r3, [sp, #28]
    edac:	6073      	str	r3, [r6, #4]
	return ret;
    edae:	2000      	movs	r0, #0
}
    edb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    edb2:	f06f 0015 	mvn.w	r0, #21
    edb6:	e7fb      	b.n	edb0 <compare_set_nolocks+0x7c>
    edb8:	00800001 	.word	0x00800001
    edbc:	20001478 	.word	0x20001478
    edc0:	20001b70 	.word	0x20001b70

0000edc4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    edc4:	b530      	push	{r4, r5, lr}
    edc6:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    edc8:	f7ff feda 	bl	eb80 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    edcc:	2300      	movs	r3, #0
    edce:	4a1d      	ldr	r2, [pc, #116]	; (ee44 <sys_clock_driver_init+0x80>)
    edd0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    edd4:	2b00      	cmp	r3, #0
    edd6:	dd24      	ble.n	ee22 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    edd8:	4c1a      	ldr	r4, [pc, #104]	; (ee44 <sys_clock_driver_init+0x80>)
    edda:	2502      	movs	r5, #2
    eddc:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ede0:	4b19      	ldr	r3, [pc, #100]	; (ee48 <sys_clock_driver_init+0x84>)
    ede2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ede6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    edea:	2200      	movs	r2, #0
    edec:	2101      	movs	r1, #1
    edee:	2011      	movs	r0, #17
    edf0:	f003 fe18 	bl	12a24 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    edf4:	2011      	movs	r0, #17
    edf6:	f003 fe0b 	bl	12a10 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    edfa:	2301      	movs	r3, #1
    edfc:	60a3      	str	r3, [r4, #8]
    edfe:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    ee00:	4a12      	ldr	r2, [pc, #72]	; (ee4c <sys_clock_driver_init+0x88>)
    ee02:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    ee04:	2400      	movs	r4, #0
    ee06:	9401      	str	r4, [sp, #4]
    ee08:	4b11      	ldr	r3, [pc, #68]	; (ee50 <sys_clock_driver_init+0x8c>)
    ee0a:	9300      	str	r3, [sp, #0]
    ee0c:	4a11      	ldr	r2, [pc, #68]	; (ee54 <sys_clock_driver_init+0x90>)
    ee0e:	2300      	movs	r3, #0
    ee10:	4620      	mov	r0, r4
    ee12:	f005 f937 	bl	14084 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    ee16:	4628      	mov	r0, r5
    ee18:	f7ff f8c8 	bl	dfac <z_nrf_clock_control_lf_on>

	return 0;
}
    ee1c:	4620      	mov	r0, r4
    ee1e:	b003      	add	sp, #12
    ee20:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ee22:	4a0d      	ldr	r2, [pc, #52]	; (ee58 <sys_clock_driver_init+0x94>)
    ee24:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    ee28:	f04f 30ff 	mov.w	r0, #4294967295
    ee2c:	f04f 31ff 	mov.w	r1, #4294967295
    ee30:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ee34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ee38:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    ee3a:	4902      	ldr	r1, [pc, #8]	; (ee44 <sys_clock_driver_init+0x80>)
    ee3c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ee40:	3301      	adds	r3, #1
    ee42:	e7c7      	b.n	edd4 <sys_clock_driver_init+0x10>
    ee44:	40011000 	.word	0x40011000
    ee48:	e000e100 	.word	0xe000e100
    ee4c:	20001b74 	.word	0x20001b74
    ee50:	0000eca5 	.word	0x0000eca5
    ee54:	007fffff 	.word	0x007fffff
    ee58:	20001478 	.word	0x20001478

0000ee5c <process_channel>:
{
    ee5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee60:	b082      	sub	sp, #8
    ee62:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    ee64:	f7ff febe 	bl	ebe4 <channel_processing_check_and_clear>
    ee68:	b910      	cbnz	r0, ee70 <process_channel+0x14>
}
    ee6a:	b002      	add	sp, #8
    ee6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    ee70:	f7ff ff40 	bl	ecf4 <z_nrf_rtc_timer_read>
    ee74:	4682      	mov	sl, r0
    ee76:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    ee78:	f005 f8fd 	bl	14076 <full_int_lock>
    ee7c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    ee7e:	4b15      	ldr	r3, [pc, #84]	; (eed4 <process_channel+0x78>)
    ee80:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    ee84:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    ee88:	45c2      	cmp	sl, r8
    ee8a:	eb75 0509 	sbcs.w	r5, r5, r9
    ee8e:	d20b      	bcs.n	eea8 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    ee90:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    ee92:	4630      	mov	r0, r6
    ee94:	f005 f8f3 	bl	1407e <full_int_unlock>
		if (handler) {
    ee98:	2d00      	cmp	r5, #0
    ee9a:	d0e6      	beq.n	ee6a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    ee9c:	9700      	str	r7, [sp, #0]
    ee9e:	4642      	mov	r2, r8
    eea0:	464b      	mov	r3, r9
    eea2:	4620      	mov	r0, r4
    eea4:	47a8      	blx	r5
}
    eea6:	e7e0      	b.n	ee6a <process_channel+0xe>
			handler = cc_data[chan].callback;
    eea8:	4a0a      	ldr	r2, [pc, #40]	; (eed4 <process_channel+0x78>)
    eeaa:	0123      	lsls	r3, r4, #4
    eeac:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    eeb0:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    eeb2:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    eeb4:	2000      	movs	r0, #0
    eeb6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    eeb8:	f04f 32ff 	mov.w	r2, #4294967295
    eebc:	f04f 33ff 	mov.w	r3, #4294967295
    eec0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    eec4:	4620      	mov	r0, r4
    eec6:	f7ff fe15 	bl	eaf4 <event_disable>
			event_clear(chan);
    eeca:	4620      	mov	r0, r4
    eecc:	f005 f8c4 	bl	14058 <event_clear>
    eed0:	e7df      	b.n	ee92 <process_channel+0x36>
    eed2:	bf00      	nop
    eed4:	20001478 	.word	0x20001478

0000eed8 <rtc_nrf_isr>:
{
    eed8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    eeda:	4b0e      	ldr	r3, [pc, #56]	; (ef14 <rtc_nrf_isr+0x3c>)
    eedc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    eee0:	f013 0f02 	tst.w	r3, #2
    eee4:	d00d      	beq.n	ef02 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eee6:	4b0b      	ldr	r3, [pc, #44]	; (ef14 <rtc_nrf_isr+0x3c>)
    eee8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    eeec:	b14b      	cbz	r3, ef02 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    eeee:	4b09      	ldr	r3, [pc, #36]	; (ef14 <rtc_nrf_isr+0x3c>)
    eef0:	2200      	movs	r2, #0
    eef2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    eef6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    eefa:	4a07      	ldr	r2, [pc, #28]	; (ef18 <rtc_nrf_isr+0x40>)
    eefc:	6813      	ldr	r3, [r2, #0]
    eefe:	3301      	adds	r3, #1
    ef00:	6013      	str	r3, [r2, #0]
{
    ef02:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ef04:	2c00      	cmp	r4, #0
    ef06:	dd00      	ble.n	ef0a <rtc_nrf_isr+0x32>
}
    ef08:	bd10      	pop	{r4, pc}
		process_channel(chan);
    ef0a:	4620      	mov	r0, r4
    ef0c:	f7ff ffa6 	bl	ee5c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ef10:	3401      	adds	r4, #1
    ef12:	e7f7      	b.n	ef04 <rtc_nrf_isr+0x2c>
    ef14:	40011000 	.word	0x40011000
    ef18:	20001b78 	.word	0x20001b78

0000ef1c <sys_clock_set_timeout>:
{
    ef1c:	b510      	push	{r4, lr}
    ef1e:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    ef20:	f1b0 3fff 	cmp.w	r0, #4294967295
    ef24:	d006      	beq.n	ef34 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    ef26:	2801      	cmp	r0, #1
    ef28:	dd09      	ble.n	ef3e <sys_clock_set_timeout+0x22>
    ef2a:	4b15      	ldr	r3, [pc, #84]	; (ef80 <sys_clock_set_timeout+0x64>)
    ef2c:	4298      	cmp	r0, r3
    ef2e:	dc24      	bgt.n	ef7a <sys_clock_set_timeout+0x5e>
    ef30:	4604      	mov	r4, r0
    ef32:	e005      	b.n	ef40 <sys_clock_set_timeout+0x24>
		sys_busy = false;
    ef34:	4b13      	ldr	r3, [pc, #76]	; (ef84 <sys_clock_set_timeout+0x68>)
    ef36:	2200      	movs	r2, #0
    ef38:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    ef3a:	4c13      	ldr	r4, [pc, #76]	; (ef88 <sys_clock_set_timeout+0x6c>)
    ef3c:	e003      	b.n	ef46 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    ef3e:	2401      	movs	r4, #1
		sys_busy = true;
    ef40:	4b10      	ldr	r3, [pc, #64]	; (ef84 <sys_clock_set_timeout+0x68>)
    ef42:	2201      	movs	r2, #1
    ef44:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    ef46:	f7ff fed5 	bl	ecf4 <z_nrf_rtc_timer_read>
    ef4a:	4b10      	ldr	r3, [pc, #64]	; (ef8c <sys_clock_set_timeout+0x70>)
    ef4c:	681a      	ldr	r2, [r3, #0]
    ef4e:	685b      	ldr	r3, [r3, #4]
    ef50:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    ef52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ef56:	d300      	bcc.n	ef5a <sys_clock_set_timeout+0x3e>
		cyc = 0;
    ef58:	2400      	movs	r4, #0
	cyc += unannounced;
    ef5a:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    ef5c:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    ef60:	d300      	bcc.n	ef64 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    ef62:	4c09      	ldr	r4, [pc, #36]	; (ef88 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    ef64:	2000      	movs	r0, #0
    ef66:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    ef68:	9001      	str	r0, [sp, #4]
    ef6a:	4909      	ldr	r1, [pc, #36]	; (ef90 <sys_clock_set_timeout+0x74>)
    ef6c:	9100      	str	r1, [sp, #0]
    ef6e:	f143 0300 	adc.w	r3, r3, #0
    ef72:	f005 f887 	bl	14084 <compare_set>
}
    ef76:	b002      	add	sp, #8
    ef78:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    ef7a:	4c03      	ldr	r4, [pc, #12]	; (ef88 <sys_clock_set_timeout+0x6c>)
    ef7c:	e7e0      	b.n	ef40 <sys_clock_set_timeout+0x24>
    ef7e:	bf00      	nop
    ef80:	007ffffe 	.word	0x007ffffe
    ef84:	20002185 	.word	0x20002185
    ef88:	007fffff 	.word	0x007fffff
    ef8c:	20001488 	.word	0x20001488
    ef90:	0000eca5 	.word	0x0000eca5

0000ef94 <sys_clock_elapsed>:
{
    ef94:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    ef96:	f7ff fead 	bl	ecf4 <z_nrf_rtc_timer_read>
    ef9a:	4b02      	ldr	r3, [pc, #8]	; (efa4 <sys_clock_elapsed+0x10>)
    ef9c:	681b      	ldr	r3, [r3, #0]
}
    ef9e:	1ac0      	subs	r0, r0, r3
    efa0:	bd08      	pop	{r3, pc}
    efa2:	bf00      	nop
    efa4:	20001488 	.word	0x20001488

0000efa8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    efa8:	b508      	push	{r3, lr}
    efaa:	4602      	mov	r2, r0
    efac:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    efae:	4802      	ldr	r0, [pc, #8]	; (efb8 <multithreading_lock_acquire+0x10>)
    efb0:	f001 fc22 	bl	107f8 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
    efb4:	bd08      	pop	{r3, pc}
    efb6:	bf00      	nop
    efb8:	20000488 	.word	0x20000488

0000efbc <multithreading_lock_release>:

void multithreading_lock_release(void)
{
    efbc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    efbe:	4802      	ldr	r0, [pc, #8]	; (efc8 <multithreading_lock_release+0xc>)
    efc0:	f001 fc9e 	bl	10900 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
    efc4:	bd08      	pop	{r3, pc}
    efc6:	bf00      	nop
    efc8:	20000488 	.word	0x20000488

0000efcc <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
    efcc:	b510      	push	{r4, lr}
    efce:	4603      	mov	r3, r0
    efd0:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
    efd2:	4803      	ldr	r0, [pc, #12]	; (efe0 <rand_prio_low_vector_get_blocking+0x14>)
    efd4:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    efd6:	680c      	ldr	r4, [r1, #0]
    efd8:	4619      	mov	r1, r3
    efda:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
    efdc:	bd10      	pop	{r4, pc}
    efde:	bf00      	nop
    efe0:	00015e4c 	.word	0x00015e4c

0000efe4 <receive_signal_raise>:
{
    efe4:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    efe6:	4902      	ldr	r1, [pc, #8]	; (eff0 <receive_signal_raise+0xc>)
    efe8:	4802      	ldr	r0, [pc, #8]	; (eff4 <receive_signal_raise+0x10>)
    efea:	f006 fa72 	bl	154d2 <k_work_submit_to_queue>
}
    efee:	bd08      	pop	{r3, pc}
    eff0:	20001bc4 	.word	0x20001bc4
    eff4:	200016f8 	.word	0x200016f8

0000eff8 <cmd_handle>:
{
    eff8:	b538      	push	{r3, r4, r5, lr}
    effa:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
    effc:	f04f 30ff 	mov.w	r0, #4294967295
    f000:	f04f 31ff 	mov.w	r1, #4294967295
    f004:	f7ff ffd0 	bl	efa8 <multithreading_lock_acquire>
	if (!errcode) {
    f008:	4604      	mov	r4, r0
    f00a:	b108      	cbz	r0, f010 <cmd_handle+0x18>
}
    f00c:	4620      	mov	r0, r4
    f00e:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
    f010:	68e8      	ldr	r0, [r5, #12]
    f012:	f000 f969 	bl	f2e8 <hci_internal_cmd_put>
    f016:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    f018:	f7ff ffd0 	bl	efbc <multithreading_lock_release>
	if (errcode) {
    f01c:	2c00      	cmp	r4, #0
    f01e:	d1f5      	bne.n	f00c <cmd_handle+0x14>
    f020:	4902      	ldr	r1, [pc, #8]	; (f02c <cmd_handle+0x34>)
    f022:	4803      	ldr	r0, [pc, #12]	; (f030 <cmd_handle+0x38>)
    f024:	f006 fa55 	bl	154d2 <k_work_submit_to_queue>
	return 0;
    f028:	e7f0      	b.n	f00c <cmd_handle+0x14>
    f02a:	bf00      	nop
    f02c:	20001bc4 	.word	0x20001bc4
    f030:	200016f8 	.word	0x200016f8

0000f034 <rand_prio_high_vector_get>:
{
    f034:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    f036:	4b08      	ldr	r3, [pc, #32]	; (f058 <rand_prio_high_vector_get+0x24>)
    f038:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    f03a:	685c      	ldr	r4, [r3, #4]
    f03c:	b144      	cbz	r4, f050 <rand_prio_high_vector_get+0x1c>
    f03e:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    f040:	2300      	movs	r3, #0
    f042:	4601      	mov	r1, r0
    f044:	4804      	ldr	r0, [pc, #16]	; (f058 <rand_prio_high_vector_get+0x24>)
    f046:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
    f048:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    f04c:	b2c0      	uxtb	r0, r0
    f04e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    f050:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f054:	e7f8      	b.n	f048 <rand_prio_high_vector_get+0x14>
    f056:	bf00      	nop
    f058:	00015e4c 	.word	0x00015e4c

0000f05c <rand_prio_low_vector_get>:
{
    f05c:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
    f05e:	4b08      	ldr	r3, [pc, #32]	; (f080 <rand_prio_low_vector_get+0x24>)
    f060:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
    f062:	685c      	ldr	r4, [r3, #4]
    f064:	b144      	cbz	r4, f078 <rand_prio_low_vector_get+0x1c>
    f066:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
    f068:	2300      	movs	r3, #0
    f06a:	4601      	mov	r1, r0
    f06c:	4804      	ldr	r0, [pc, #16]	; (f080 <rand_prio_low_vector_get+0x24>)
    f06e:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
    f070:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    f074:	b2c0      	uxtb	r0, r0
    f076:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    f078:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f07c:	e7f8      	b.n	f070 <rand_prio_low_vector_get+0x14>
    f07e:	bf00      	nop
    f080:	00015e4c 	.word	0x00015e4c

0000f084 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    f084:	b510      	push	{r4, lr}
    f086:	b088      	sub	sp, #32
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    f088:	4918      	ldr	r1, [pc, #96]	; (f0ec <hci_driver_open+0x68>)
    f08a:	4819      	ldr	r0, [pc, #100]	; (f0f0 <hci_driver_open+0x6c>)
    f08c:	f006 fa05 	bl	1549a <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    f090:	a803      	add	r0, sp, #12
    f092:	f7f1 fc61 	bl	958 <sdc_build_revision_get>
    f096:	4817      	ldr	r0, [pc, #92]	; (f0f4 <hci_driver_open+0x70>)
    f098:	f005 ff5c 	bl	14f54 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    f09c:	b1f8      	cbz	r0, f0de <hci_driver_open+0x5a>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    f09e:	4a16      	ldr	r2, [pc, #88]	; (f0f8 <hci_driver_open+0x74>)
    f0a0:	466b      	mov	r3, sp
    f0a2:	ca07      	ldmia	r2, {r0, r1, r2}
    f0a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    f0a8:	4618      	mov	r0, r3
    f0aa:	f7f1 fdbf 	bl	c2c <sdc_rand_source_register>
	if (err) {
    f0ae:	b9c8      	cbnz	r0, f0e4 <hci_driver_open+0x60>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    f0b0:	f04f 30ff 	mov.w	r0, #4294967295
    f0b4:	f04f 31ff 	mov.w	r1, #4294967295
    f0b8:	f7ff ff76 	bl	efa8 <multithreading_lock_acquire>
	if (err) {
    f0bc:	4604      	mov	r4, r0
    f0be:	b110      	cbz	r0, f0c6 <hci_driver_open+0x42>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
    f0c0:	4620      	mov	r0, r4
    f0c2:	b008      	add	sp, #32
    f0c4:	bd10      	pop	{r4, pc}
	err = sdc_enable(receive_signal_raise, sdc_mempool);
    f0c6:	490d      	ldr	r1, [pc, #52]	; (f0fc <hci_driver_open+0x78>)
    f0c8:	480d      	ldr	r0, [pc, #52]	; (f100 <hci_driver_open+0x7c>)
    f0ca:	f7f1 fcb3 	bl	a34 <sdc_enable>
	if (err) {
    f0ce:	4604      	mov	r4, r0
    f0d0:	b910      	cbnz	r0, f0d8 <hci_driver_open+0x54>
	MULTITHREADING_LOCK_RELEASE();
    f0d2:	f7ff ff73 	bl	efbc <multithreading_lock_release>
	return 0;
    f0d6:	e7f3      	b.n	f0c0 <hci_driver_open+0x3c>
		MULTITHREADING_LOCK_RELEASE();
    f0d8:	f7ff ff70 	bl	efbc <multithreading_lock_release>
		return err;
    f0dc:	e7f0      	b.n	f0c0 <hci_driver_open+0x3c>
		return -ENODEV;
    f0de:	f06f 0412 	mvn.w	r4, #18
    f0e2:	e7ed      	b.n	f0c0 <hci_driver_open+0x3c>
		return -EINVAL;
    f0e4:	f06f 0415 	mvn.w	r4, #21
    f0e8:	e7ea      	b.n	f0c0 <hci_driver_open+0x3c>
    f0ea:	bf00      	nop
    f0ec:	000142bb 	.word	0x000142bb
    f0f0:	20001bc4 	.word	0x20001bc4
    f0f4:	00015e4c 	.word	0x00015e4c
    f0f8:	00016194 	.word	0x00016194
    f0fc:	20001498 	.word	0x20001498
    f100:	0000efe5 	.word	0x0000efe5

0000f104 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
    f104:	b508      	push	{r3, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
    f106:	4806      	ldr	r0, [pc, #24]	; (f120 <hci_driver_init+0x1c>)
    f108:	f7fd ff82 	bl	d010 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    f10c:	4805      	ldr	r0, [pc, #20]	; (f124 <hci_driver_init+0x20>)
    f10e:	f7f1 fcbb 	bl	a88 <sdc_init>

	err = configure_supported_features();
    f112:	f005 f876 	bl	14202 <configure_supported_features>
	if (err) {
    f116:	b100      	cbz	r0, f11a <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
    f118:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
    f11a:	f005 f87a 	bl	14212 <configure_memory_usage>
	if (err) {
    f11e:	e7fb      	b.n	f118 <hci_driver_init+0x14>
    f120:	000167f0 	.word	0x000167f0
    f124:	000140bf 	.word	0x000140bf

0000f128 <hci_driver_receive_process>:
{
    f128:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
    f12a:	4805      	ldr	r0, [pc, #20]	; (f140 <hci_driver_receive_process+0x18>)
    f12c:	f005 f815 	bl	1415a <fetch_and_process_hci_msg>
    f130:	b900      	cbnz	r0, f134 <hci_driver_receive_process+0xc>
}
    f132:	bd08      	pop	{r3, pc}
    f134:	4903      	ldr	r1, [pc, #12]	; (f144 <hci_driver_receive_process+0x1c>)
    f136:	4804      	ldr	r0, [pc, #16]	; (f148 <hci_driver_receive_process+0x20>)
    f138:	f006 f9cb 	bl	154d2 <k_work_submit_to_queue>
    f13c:	e7f9      	b.n	f132 <hci_driver_receive_process+0xa>
    f13e:	bf00      	nop
    f140:	20001b7c 	.word	0x20001b7c
    f144:	20001bc4 	.word	0x20001bc4
    f148:	200016f8 	.word	0x200016f8

0000f14c <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
    f14c:	f242 0332 	movw	r3, #8242	; 0x2032
    f150:	4298      	cmp	r0, r3
    f152:	d04a      	beq.n	f1ea <command_generates_command_complete_event+0x9e>
    f154:	d82d      	bhi.n	f1b2 <command_generates_command_complete_event+0x66>
    f156:	f242 0326 	movw	r3, #8230	; 0x2026
    f15a:	4298      	cmp	r0, r3
    f15c:	d847      	bhi.n	f1ee <command_generates_command_complete_event+0xa2>
    f15e:	f242 030d 	movw	r3, #8205	; 0x200d
    f162:	4298      	cmp	r0, r3
    f164:	d218      	bcs.n	f198 <command_generates_command_complete_event+0x4c>
    f166:	f240 4306 	movw	r3, #1030	; 0x406
    f16a:	4298      	cmp	r0, r3
    f16c:	d041      	beq.n	f1f2 <command_generates_command_complete_event+0xa6>
    f16e:	f240 431d 	movw	r3, #1053	; 0x41d
    f172:	4298      	cmp	r0, r3
    f174:	d001      	beq.n	f17a <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
    f176:	2001      	movs	r0, #1
    f178:	4770      	bx	lr
	switch (hci_opcode) {
    f17a:	2000      	movs	r0, #0
    f17c:	4770      	bx	lr
    f17e:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
    f182:	382d      	subs	r0, #45	; 0x2d
    f184:	b280      	uxth	r0, r0
    f186:	4b1e      	ldr	r3, [pc, #120]	; (f200 <command_generates_command_complete_event+0xb4>)
    f188:	40c3      	lsrs	r3, r0
    f18a:	f013 0f01 	tst.w	r3, #1
    f18e:	d101      	bne.n	f194 <command_generates_command_complete_event+0x48>
		return true;
    f190:	2001      	movs	r0, #1
    f192:	4770      	bx	lr
	switch (hci_opcode) {
    f194:	2000      	movs	r0, #0
    f196:	4770      	bx	lr
    f198:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
    f19c:	380d      	subs	r0, #13
    f19e:	b280      	uxth	r0, r0
    f1a0:	4b18      	ldr	r3, [pc, #96]	; (f204 <command_generates_command_complete_event+0xb8>)
    f1a2:	40c3      	lsrs	r3, r0
    f1a4:	f013 0f01 	tst.w	r3, #1
    f1a8:	d101      	bne.n	f1ae <command_generates_command_complete_event+0x62>
		return true;
    f1aa:	2001      	movs	r0, #1
    f1ac:	4770      	bx	lr
	switch (hci_opcode) {
    f1ae:	2000      	movs	r0, #0
    f1b0:	4770      	bx	lr
    f1b2:	f242 0385 	movw	r3, #8325	; 0x2085
    f1b6:	4298      	cmp	r0, r3
    f1b8:	d80b      	bhi.n	f1d2 <command_generates_command_complete_event+0x86>
    f1ba:	f242 036d 	movw	r3, #8301	; 0x206d
    f1be:	4298      	cmp	r0, r3
    f1c0:	d2dd      	bcs.n	f17e <command_generates_command_complete_event+0x32>
    f1c2:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
    f1c6:	3803      	subs	r0, #3
    f1c8:	b280      	uxth	r0, r0
    f1ca:	2801      	cmp	r0, #1
    f1cc:	d913      	bls.n	f1f6 <command_generates_command_complete_event+0xaa>
		return true;
    f1ce:	2001      	movs	r0, #1
    f1d0:	4770      	bx	lr
	switch (hci_opcode) {
    f1d2:	f64f 5302 	movw	r3, #64770	; 0xfd02
    f1d6:	4298      	cmp	r0, r3
    f1d8:	d00f      	beq.n	f1fa <command_generates_command_complete_event+0xae>
    f1da:	f64f 530a 	movw	r3, #64778	; 0xfd0a
    f1de:	4298      	cmp	r0, r3
    f1e0:	d001      	beq.n	f1e6 <command_generates_command_complete_event+0x9a>
		return true;
    f1e2:	2001      	movs	r0, #1
	}
}
    f1e4:	4770      	bx	lr
	switch (hci_opcode) {
    f1e6:	2000      	movs	r0, #0
    f1e8:	4770      	bx	lr
    f1ea:	2000      	movs	r0, #0
    f1ec:	4770      	bx	lr
		return true;
    f1ee:	2001      	movs	r0, #1
    f1f0:	4770      	bx	lr
	switch (hci_opcode) {
    f1f2:	2000      	movs	r0, #0
    f1f4:	4770      	bx	lr
    f1f6:	2000      	movs	r0, #0
    f1f8:	4770      	bx	lr
    f1fa:	2000      	movs	r0, #0
    f1fc:	4770      	bx	lr
    f1fe:	bf00      	nop
    f200:	01000401 	.word	0x01000401
    f204:	03001241 	.word	0x03001241

0000f208 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
    f208:	b5f0      	push	{r4, r5, r6, r7, lr}
    f20a:	b083      	sub	sp, #12
    f20c:	4607      	mov	r7, r0
    f20e:	460e      	mov	r6, r1
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    f210:	7843      	ldrb	r3, [r0, #1]
    f212:	7805      	ldrb	r5, [r0, #0]
    f214:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    f218:	2304      	movs	r3, #4
    f21a:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
    f21e:	4b31      	ldr	r3, [pc, #196]	; (f2e4 <cmd_put+0xdc>)
    f220:	681c      	ldr	r4, [r3, #0]
    f222:	b13c      	cbz	r4, f234 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
    f224:	f10d 0307 	add.w	r3, sp, #7
    f228:	f10d 0206 	add.w	r2, sp, #6
    f22c:	47a0      	blx	r4
    f22e:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    f230:	2801      	cmp	r0, #1
    f232:	d11f      	bne.n	f274 <cmd_put+0x6c>

		switch (BT_OGF(opcode)) {
    f234:	0aab      	lsrs	r3, r5, #10
    f236:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
    f23a:	d209      	bcs.n	f250 <cmd_put+0x48>
    f23c:	2b03      	cmp	r3, #3
    f23e:	d345      	bcc.n	f2cc <cmd_put+0xc4>
    f240:	3b03      	subs	r3, #3
    f242:	2b05      	cmp	r3, #5
    f244:	d844      	bhi.n	f2d0 <cmd_put+0xc8>
    f246:	e8df f003 	tbb	[pc, r3]
    f24a:	2921      	.short	0x2921
    f24c:	39434331 	.word	0x39434331
    f250:	2b3f      	cmp	r3, #63	; 0x3f
    f252:	d107      	bne.n	f264 <cmd_put+0x5c>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
    f254:	f10d 0206 	add.w	r2, sp, #6
    f258:	4631      	mov	r1, r6
    f25a:	4638      	mov	r0, r7
    f25c:	f005 fa24 	bl	146a8 <vs_cmd_put>
    f260:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
    f262:	e000      	b.n	f266 <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
    f264:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
    f266:	4628      	mov	r0, r5
    f268:	f7ff ff70 	bl	f14c <command_generates_command_complete_event>
    f26c:	f080 0001 	eor.w	r0, r0, #1
    f270:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
    f274:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f278:	b90b      	cbnz	r3, f27e <cmd_put+0x76>
    f27a:	2c01      	cmp	r4, #1
    f27c:	d12a      	bne.n	f2d4 <cmd_put+0xcc>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
    f27e:	4622      	mov	r2, r4
    f280:	4629      	mov	r1, r5
    f282:	4630      	mov	r0, r6
    f284:	f005 f81d 	bl	142c2 <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
    f288:	b003      	add	sp, #12
    f28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = controller_and_baseband_cmd_put(cmd_in,
    f28c:	f10d 0206 	add.w	r2, sp, #6
    f290:	4631      	mov	r1, r6
    f292:	4638      	mov	r0, r7
    f294:	f005 f830 	bl	142f8 <controller_and_baseband_cmd_put>
    f298:	4604      	mov	r4, r0
			break;
    f29a:	e7e4      	b.n	f266 <cmd_put+0x5e>
			status = info_param_cmd_put(cmd_in,
    f29c:	f10d 0206 	add.w	r2, sp, #6
    f2a0:	4631      	mov	r1, r6
    f2a2:	4638      	mov	r0, r7
    f2a4:	f005 f8cd 	bl	14442 <info_param_cmd_put>
    f2a8:	4604      	mov	r4, r0
			break;
    f2aa:	e7dc      	b.n	f266 <cmd_put+0x5e>
			status = status_param_cmd_put(cmd_in,
    f2ac:	f10d 0206 	add.w	r2, sp, #6
    f2b0:	4631      	mov	r1, r6
    f2b2:	4638      	mov	r0, r7
    f2b4:	f005 f81e 	bl	142f4 <status_param_cmd_put>
    f2b8:	4604      	mov	r4, r0
			break;
    f2ba:	e7d4      	b.n	f266 <cmd_put+0x5e>
			status = le_controller_cmd_put(cmd_in,
    f2bc:	f10d 0206 	add.w	r2, sp, #6
    f2c0:	4631      	mov	r1, r6
    f2c2:	4638      	mov	r0, r7
    f2c4:	f005 f947 	bl	14556 <le_controller_cmd_put>
    f2c8:	4604      	mov	r4, r0
			break;
    f2ca:	e7cc      	b.n	f266 <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
    f2cc:	2401      	movs	r4, #1
    f2ce:	e7ca      	b.n	f266 <cmd_put+0x5e>
    f2d0:	2401      	movs	r4, #1
    f2d2:	e7c8      	b.n	f266 <cmd_put+0x5e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    f2d4:	4623      	mov	r3, r4
    f2d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f2da:	4629      	mov	r1, r5
    f2dc:	4630      	mov	r0, r6
    f2de:	f004 fff9 	bl	142d4 <encode_command_complete_header>
}
    f2e2:	e7d1      	b.n	f288 <cmd_put+0x80>
    f2e4:	20001bd4 	.word	0x20001bd4

0000f2e8 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    f2e8:	b538      	push	{r3, r4, r5, lr}
    f2ea:	7842      	ldrb	r2, [r0, #1]
    f2ec:	7803      	ldrb	r3, [r0, #0]
    f2ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f2f2:	b21c      	sxth	r4, r3
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    f2f4:	4b0e      	ldr	r3, [pc, #56]	; (f330 <hci_internal_cmd_put+0x48>)
    f2f6:	781b      	ldrb	r3, [r3, #0]
    f2f8:	b9b3      	cbnz	r3, f328 <hci_internal_cmd_put+0x40>
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
    f2fa:	4d0e      	ldr	r5, [pc, #56]	; (f334 <hci_internal_cmd_put+0x4c>)
    f2fc:	4629      	mov	r1, r5
    f2fe:	f7ff ff83 	bl	f208 <cmd_put>
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
    f302:	2301      	movs	r3, #1
    f304:	f805 3c01 	strb.w	r3, [r5, #-1]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
    f308:	f242 0383 	movw	r3, #8323	; 0x2083
    f30c:	429c      	cmp	r4, r3
    f30e:	d001      	beq.n	f314 <hci_internal_cmd_put+0x2c>
		 */

		cmd_complete_or_status.occurred = false;
	}

	return 0;
    f310:	2000      	movs	r0, #0
}
    f312:	bd38      	pop	{r3, r4, r5, pc}
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
    f314:	1e6b      	subs	r3, r5, #1
    f316:	785b      	ldrb	r3, [r3, #1]
		&&
    f318:	2b0e      	cmp	r3, #14
    f31a:	d001      	beq.n	f320 <hci_internal_cmd_put+0x38>
	return 0;
    f31c:	2000      	movs	r0, #0
    f31e:	e7f8      	b.n	f312 <hci_internal_cmd_put+0x2a>
		cmd_complete_or_status.occurred = false;
    f320:	2000      	movs	r0, #0
    f322:	1e6b      	subs	r3, r5, #1
    f324:	7018      	strb	r0, [r3, #0]
    f326:	e7f4      	b.n	f312 <hci_internal_cmd_put+0x2a>
		return -NRF_EPERM;
    f328:	f04f 30ff 	mov.w	r0, #4294967295
    f32c:	e7f1      	b.n	f312 <hci_internal_cmd_put+0x2a>
    f32e:	bf00      	nop
    f330:	20001bd8 	.word	0x20001bd8
    f334:	20001bd9 	.word	0x20001bd9

0000f338 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    f338:	b538      	push	{r3, r4, r5, lr}
    f33a:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
    f33c:	4b08      	ldr	r3, [pc, #32]	; (f360 <hci_internal_msg_get+0x28>)
    f33e:	781b      	ldrb	r3, [r3, #0]
    f340:	b913      	cbnz	r3, f348 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
    f342:	f7f9 fa99 	bl	8878 <sdc_hci_get>
}
    f346:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
    f348:	4d05      	ldr	r5, [pc, #20]	; (f360 <hci_internal_msg_get+0x28>)
    f34a:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
    f34c:	3202      	adds	r2, #2
    f34e:	1c69      	adds	r1, r5, #1
    f350:	f003 fc5b 	bl	12c0a <memcpy>
		cmd_complete_or_status.occurred = false;
    f354:	2000      	movs	r0, #0
    f356:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    f358:	2304      	movs	r3, #4
    f35a:	7023      	strb	r3, [r4, #0]
		return 0;
    f35c:	e7f3      	b.n	f346 <hci_internal_msg_get+0xe>
    f35e:	bf00      	nop
    f360:	20001bd8 	.word	0x20001bd8

0000f364 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    f364:	b538      	push	{r3, r4, r5, lr}
    f366:	4605      	mov	r5, r0
    f368:	460c      	mov	r4, r1
    f36a:	4809      	ldr	r0, [pc, #36]	; (f390 <bt_rand+0x2c>)
    f36c:	f005 fdf2 	bl	14f54 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    f370:	f080 0301 	eor.w	r3, r0, #1
    f374:	f013 0fff 	tst.w	r3, #255	; 0xff
    f378:	d106      	bne.n	f388 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
    f37a:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
    f37c:	4804      	ldr	r0, [pc, #16]	; (f390 <bt_rand+0x2c>)
    f37e:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
    f380:	681b      	ldr	r3, [r3, #0]
    f382:	4629      	mov	r1, r5
    f384:	4798      	blx	r3
}
    f386:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    f388:	f06f 0012 	mvn.w	r0, #18
    f38c:	e7fb      	b.n	f386 <bt_rand+0x22>
    f38e:	bf00      	nop
    f390:	00015e4c 	.word	0x00015e4c

0000f394 <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
    f394:	b500      	push	{lr}
    f396:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
    f398:	f005 fa0b 	bl	147b2 <m_config_clock_source_get>
    f39c:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    f3a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    f3a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
    f3a8:	2300      	movs	r3, #0
    f3aa:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
    f3ae:	2310      	movs	r3, #16
    f3b0:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    f3b4:	2302      	movs	r3, #2
    f3b6:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f3ba:	4a04      	ldr	r2, [pc, #16]	; (f3cc <mpsl_lib_init_internal+0x38>)
    f3bc:	2119      	movs	r1, #25
    f3be:	4668      	mov	r0, sp
    f3c0:	f7f8 fc6e 	bl	7ca0 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
    f3c4:	b003      	add	sp, #12
    f3c6:	f85d fb04 	ldr.w	pc, [sp], #4
    f3ca:	bf00      	nop
    f3cc:	000147a5 	.word	0x000147a5

0000f3d0 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(void)
{
    f3d0:	b530      	push	{r4, r5, lr}
    f3d2:	b083      	sub	sp, #12

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    f3d4:	4d0d      	ldr	r5, [pc, #52]	; (f40c <mpsl_low_prio_init+0x3c>)
    f3d6:	2400      	movs	r4, #0
    f3d8:	9400      	str	r4, [sp, #0]
    f3da:	f06f 0309 	mvn.w	r3, #9
    f3de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f3e2:	490b      	ldr	r1, [pc, #44]	; (f410 <mpsl_low_prio_init+0x40>)
    f3e4:	4628      	mov	r0, r5
    f3e6:	f001 fc5f 	bl	10ca8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    f3ea:	490a      	ldr	r1, [pc, #40]	; (f414 <mpsl_low_prio_init+0x44>)
    f3ec:	4628      	mov	r0, r5
    f3ee:	f001 f917 	bl	10620 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    f3f2:	4909      	ldr	r1, [pc, #36]	; (f418 <mpsl_low_prio_init+0x48>)
    f3f4:	4809      	ldr	r0, [pc, #36]	; (f41c <mpsl_low_prio_init+0x4c>)
    f3f6:	f006 f850 	bl	1549a <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    f3fa:	4622      	mov	r2, r4
    f3fc:	2104      	movs	r1, #4
    f3fe:	2019      	movs	r0, #25
    f400:	f003 fb10 	bl	12a24 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    f404:	4620      	mov	r0, r4
    f406:	b003      	add	sp, #12
    f408:	bd30      	pop	{r4, r5, pc}
    f40a:	bf00      	nop
    f40c:	200016f8 	.word	0x200016f8
    f410:	200034c0 	.word	0x200034c0
    f414:	00016818 	.word	0x00016818
    f418:	0001483b 	.word	0x0001483b
    f41c:	20001c20 	.word	0x20001c20

0000f420 <mpsl_low_prio_irq_handler>:
{
    f420:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    f422:	4902      	ldr	r1, [pc, #8]	; (f42c <mpsl_low_prio_irq_handler+0xc>)
    f424:	4802      	ldr	r0, [pc, #8]	; (f430 <mpsl_low_prio_irq_handler+0x10>)
    f426:	f006 f854 	bl	154d2 <k_work_submit_to_queue>
}
    f42a:	bd08      	pop	{r3, pc}
    f42c:	20001c20 	.word	0x20001c20
    f430:	200016f8 	.word	0x200016f8

0000f434 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
    f434:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f436:	4b02      	ldr	r3, [pc, #8]	; (f440 <mpsl_hfclk_callback+0xc>)
    f438:	681b      	ldr	r3, [r3, #0]
    f43a:	2000      	movs	r0, #0
    f43c:	4798      	blx	r3
}
    f43e:	bd08      	pop	{r3, pc}
    f440:	20001c30 	.word	0x20001c30

0000f444 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    f444:	b508      	push	{r3, lr}
	switch (domain) {
    f446:	b128      	cbz	r0, f454 <nrfx_clock_start+0x10>
    f448:	2801      	cmp	r0, #1
    f44a:	d102      	bne.n	f452 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    f44c:	4804      	ldr	r0, [pc, #16]	; (f460 <nrfx_clock_start+0x1c>)
    f44e:	f7f8 faa7 	bl	79a0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    f452:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f454:	4b03      	ldr	r3, [pc, #12]	; (f464 <nrfx_clock_start+0x20>)
    f456:	681b      	ldr	r3, [r3, #0]
    f458:	2001      	movs	r0, #1
    f45a:	4798      	blx	r3
}
    f45c:	e7f9      	b.n	f452 <nrfx_clock_start+0xe>
    f45e:	bf00      	nop
    f460:	0000f435 	.word	0x0000f435
    f464:	20001c30 	.word	0x20001c30

0000f468 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    f468:	4b01      	ldr	r3, [pc, #4]	; (f470 <nrfx_clock_init+0x8>)
    f46a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    f46c:	4801      	ldr	r0, [pc, #4]	; (f474 <nrfx_clock_init+0xc>)
    f46e:	4770      	bx	lr
    f470:	20001c30 	.word	0x20001c30
    f474:	0bad0000 	.word	0x0bad0000

0000f478 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    f478:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f47c:	4905      	ldr	r1, [pc, #20]	; (f494 <__NVIC_SystemReset+0x1c>)
    f47e:	68ca      	ldr	r2, [r1, #12]
    f480:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f484:	4b04      	ldr	r3, [pc, #16]	; (f498 <__NVIC_SystemReset+0x20>)
    f486:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f488:	60cb      	str	r3, [r1, #12]
    f48a:	f3bf 8f4f 	dsb	sy
    __NOP();
    f48e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f490:	e7fd      	b.n	f48e <__NVIC_SystemReset+0x16>
    f492:	bf00      	nop
    f494:	e000ed00 	.word	0xe000ed00
    f498:	05fa0004 	.word	0x05fa0004

0000f49c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    f49c:	4b02      	ldr	r3, [pc, #8]	; (f4a8 <nvmc_wait+0xc>)
    f49e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    f4a2:	2b00      	cmp	r3, #0
    f4a4:	d0fa      	beq.n	f49c <nvmc_wait>
}
    f4a6:	4770      	bx	lr
    f4a8:	4001e000 	.word	0x4001e000

0000f4ac <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    f4ac:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f4ae:	4b03      	ldr	r3, [pc, #12]	; (f4bc <nvmc_config+0x10>)
    f4b0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    f4b4:	f7ff fff2 	bl	f49c <nvmc_wait>
}
    f4b8:	bd08      	pop	{r3, pc}
    f4ba:	bf00      	nop
    f4bc:	4001e000 	.word	0x4001e000

0000f4c0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    f4c0:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    f4c2:	f005 f9d7 	bl	14874 <nrf52_errata_12>
    f4c6:	b140      	cbz	r0, f4da <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    f4c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f4cc:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    f4d0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    f4d4:	4a6b      	ldr	r2, [pc, #428]	; (f684 <SystemInit+0x1c4>)
    f4d6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    f4da:	f005 f9dd 	bl	14898 <nrf52_errata_16>
    f4de:	b110      	cbz	r0, f4e6 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    f4e0:	4b69      	ldr	r3, [pc, #420]	; (f688 <SystemInit+0x1c8>)
    f4e2:	4a6a      	ldr	r2, [pc, #424]	; (f68c <SystemInit+0x1cc>)
    f4e4:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    f4e6:	f005 f9ed 	bl	148c4 <nrf52_errata_31>
    f4ea:	b148      	cbz	r0, f500 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    f4ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f4f0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    f4f4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    f4f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    f4fc:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    f500:	f005 f9f2 	bl	148e8 <nrf52_errata_32>
    f504:	b130      	cbz	r0, f514 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    f506:	4a62      	ldr	r2, [pc, #392]	; (f690 <SystemInit+0x1d0>)
    f508:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    f50c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f510:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    f514:	f005 f9fe 	bl	14914 <nrf52_errata_36>
    f518:	b140      	cbz	r0, f52c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    f51a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f51e:	2200      	movs	r2, #0
    f520:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    f524:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    f528:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    f52c:	f005 fa04 	bl	14938 <nrf52_errata_37>
    f530:	b120      	cbz	r0, f53c <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    f532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f536:	2203      	movs	r2, #3
    f538:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    f53c:	f005 fa12 	bl	14964 <nrf52_errata_57>
    f540:	b160      	cbz	r0, f55c <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    f542:	4b54      	ldr	r3, [pc, #336]	; (f694 <SystemInit+0x1d4>)
    f544:	2205      	movs	r2, #5
    f546:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    f54a:	2201      	movs	r2, #1
    f54c:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    f550:	2200      	movs	r2, #0
    f552:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    f556:	223f      	movs	r2, #63	; 0x3f
    f558:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    f55c:	f005 fa18 	bl	14990 <nrf52_errata_66>
    f560:	2800      	cmp	r0, #0
    f562:	d046      	beq.n	f5f2 <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    f564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f568:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    f56c:	4b4a      	ldr	r3, [pc, #296]	; (f698 <SystemInit+0x1d8>)
    f56e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    f572:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    f576:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    f57a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    f57e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    f582:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    f586:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    f58a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    f58e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    f592:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    f596:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    f59a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    f59e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    f5a2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    f5a6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    f5aa:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    f5ae:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    f5b2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    f5b6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    f5ba:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    f5be:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    f5c2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    f5c6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    f5ca:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    f5ce:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    f5d2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    f5d6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    f5da:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    f5de:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    f5e2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    f5e6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    f5ea:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    f5ee:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    f5f2:	f005 f9ef 	bl	149d4 <nrf52_errata_108>
    f5f6:	b148      	cbz	r0, f60c <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    f5f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f5fc:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    f600:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    f604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    f608:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    f60c:	f005 f9f4 	bl	149f8 <nrf52_errata_136>
    f610:	b160      	cbz	r0, f62c <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    f612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f616:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    f61a:	f013 0f01 	tst.w	r3, #1
    f61e:	d005      	beq.n	f62c <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    f620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f624:	f06f 0201 	mvn.w	r2, #1
    f628:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    f62c:	f005 f9f6 	bl	14a1c <nrf52_errata_182>
    f630:	b130      	cbz	r0, f640 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    f632:	4a1a      	ldr	r2, [pc, #104]	; (f69c <SystemInit+0x1dc>)
    f634:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    f638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f63c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    f640:	f005 fa14 	bl	14a6c <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    f644:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    f648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    f64c:	2b00      	cmp	r3, #0
    f64e:	db06      	blt.n	f65e <SystemInit+0x19e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    f650:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    f654:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    f658:	2b00      	cmp	r3, #0
    f65a:	db00      	blt.n	f65e <SystemInit+0x19e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    f65c:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    f65e:	2001      	movs	r0, #1
    f660:	f7ff ff24 	bl	f4ac <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    f664:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    f668:	2515      	movs	r5, #21
    f66a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    f66e:	f7ff ff15 	bl	f49c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    f672:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    f676:	f7ff ff11 	bl	f49c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    f67a:	2000      	movs	r0, #0
    f67c:	f7ff ff16 	bl	f4ac <nvmc_config>
            NVIC_SystemReset();
    f680:	f7ff fefa 	bl	f478 <__NVIC_SystemReset>
    f684:	40013000 	.word	0x40013000
    f688:	4007c000 	.word	0x4007c000
    f68c:	baadf00d 	.word	0xbaadf00d
    f690:	e000ed00 	.word	0xe000ed00
    f694:	40005000 	.word	0x40005000
    f698:	4000c000 	.word	0x4000c000
    f69c:	40001000 	.word	0x40001000

0000f6a0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    f6a0:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    f6a2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    f6a4:	fab4 f384 	clz	r3, r4
    f6a8:	f1c3 031f 	rsb	r3, r3, #31
    f6ac:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	db16      	blt.n	f6e2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    f6b4:	2201      	movs	r2, #1
    f6b6:	fa02 f303 	lsl.w	r3, r2, r3
    f6ba:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f6be:	f3bf 8f5b 	dmb	ish
    f6c2:	e850 2f00 	ldrex	r2, [r0]
    f6c6:	42a2      	cmp	r2, r4
    f6c8:	d104      	bne.n	f6d4 <nrfx_flag32_alloc+0x34>
    f6ca:	e840 3e00 	strex	lr, r3, [r0]
    f6ce:	f1be 0f00 	cmp.w	lr, #0
    f6d2:	d1f6      	bne.n	f6c2 <nrfx_flag32_alloc+0x22>
    f6d4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f6d8:	d1e3      	bne.n	f6a2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    f6da:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    f6de:	4802      	ldr	r0, [pc, #8]	; (f6e8 <nrfx_flag32_alloc+0x48>)
}
    f6e0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    f6e2:	4802      	ldr	r0, [pc, #8]	; (f6ec <nrfx_flag32_alloc+0x4c>)
    f6e4:	e7fc      	b.n	f6e0 <nrfx_flag32_alloc+0x40>
    f6e6:	bf00      	nop
    f6e8:	0bad0000 	.word	0x0bad0000
    f6ec:	0bad0002 	.word	0x0bad0002

0000f6f0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    f6f0:	6803      	ldr	r3, [r0, #0]
    f6f2:	40cb      	lsrs	r3, r1
    f6f4:	f013 0f01 	tst.w	r3, #1
    f6f8:	d115      	bne.n	f726 <nrfx_flag32_free+0x36>
{
    f6fa:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    f6fc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    f6fe:	2301      	movs	r3, #1
    f700:	408b      	lsls	r3, r1
    f702:	4313      	orrs	r3, r2
    f704:	f3bf 8f5b 	dmb	ish
    f708:	e850 cf00 	ldrex	ip, [r0]
    f70c:	4594      	cmp	ip, r2
    f70e:	d104      	bne.n	f71a <nrfx_flag32_free+0x2a>
    f710:	e840 3e00 	strex	lr, r3, [r0]
    f714:	f1be 0f00 	cmp.w	lr, #0
    f718:	d1f6      	bne.n	f708 <nrfx_flag32_free+0x18>
    f71a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f71e:	d1ed      	bne.n	f6fc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    f720:	4802      	ldr	r0, [pc, #8]	; (f72c <nrfx_flag32_free+0x3c>)
}
    f722:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    f726:	4802      	ldr	r0, [pc, #8]	; (f730 <nrfx_flag32_free+0x40>)
}
    f728:	4770      	bx	lr
    f72a:	bf00      	nop
    f72c:	0bad0000 	.word	0x0bad0000
    f730:	0bad0004 	.word	0x0bad0004

0000f734 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    f734:	3008      	adds	r0, #8
    f736:	4b03      	ldr	r3, [pc, #12]	; (f744 <pin_in_use+0x10>)
    f738:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f73c:	f000 0001 	and.w	r0, r0, #1
    f740:	4770      	bx	lr
    f742:	bf00      	nop
    f744:	20000408 	.word	0x20000408

0000f748 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    f748:	3008      	adds	r0, #8
    f74a:	4b03      	ldr	r3, [pc, #12]	; (f758 <pin_in_use_by_te+0x10>)
    f74c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f750:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f754:	4770      	bx	lr
    f756:	bf00      	nop
    f758:	20000408 	.word	0x20000408

0000f75c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    f75c:	3008      	adds	r0, #8
    f75e:	4b04      	ldr	r3, [pc, #16]	; (f770 <pin_has_trigger+0x14>)
    f760:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f764:	f010 001c 	ands.w	r0, r0, #28
    f768:	bf18      	it	ne
    f76a:	2001      	movne	r0, #1
    f76c:	4770      	bx	lr
    f76e:	bf00      	nop
    f770:	20000408 	.word	0x20000408

0000f774 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f774:	3008      	adds	r0, #8
    f776:	4b03      	ldr	r3, [pc, #12]	; (f784 <pin_is_output+0x10>)
    f778:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f77c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f780:	4770      	bx	lr
    f782:	bf00      	nop
    f784:	20000408 	.word	0x20000408

0000f788 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f788:	3008      	adds	r0, #8
    f78a:	4b02      	ldr	r3, [pc, #8]	; (f794 <pin_te_get+0xc>)
    f78c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f790:	0b40      	lsrs	r0, r0, #13
    f792:	4770      	bx	lr
    f794:	20000408 	.word	0x20000408

0000f798 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f798:	2200      	movs	r2, #0
    f79a:	e004      	b.n	f7a6 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f79c:	f04f 33ff 	mov.w	r3, #4294967295
    f7a0:	4283      	cmp	r3, r0
    f7a2:	d00f      	beq.n	f7c4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f7a4:	3201      	adds	r2, #1
    f7a6:	2a1f      	cmp	r2, #31
    f7a8:	d80a      	bhi.n	f7c0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f7aa:	f102 0308 	add.w	r3, r2, #8
    f7ae:	4906      	ldr	r1, [pc, #24]	; (f7c8 <handler_in_use+0x30>)
    f7b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f7b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    f7b8:	d0f0      	beq.n	f79c <handler_in_use+0x4>
    f7ba:	f3c3 2343 	ubfx	r3, r3, #9, #4
    f7be:	e7ef      	b.n	f7a0 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    f7c0:	2000      	movs	r0, #0
    f7c2:	4770      	bx	lr
            return true;
    f7c4:	2001      	movs	r0, #1
}
    f7c6:	4770      	bx	lr
    f7c8:	20000408 	.word	0x20000408

0000f7cc <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    f7cc:	2300      	movs	r3, #0
    f7ce:	b113      	cbz	r3, f7d6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    f7d0:	f04f 30ff 	mov.w	r0, #4294967295
}
    f7d4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f7d6:	4a07      	ldr	r2, [pc, #28]	; (f7f4 <find_handler+0x28>)
    f7d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    f7dc:	4282      	cmp	r2, r0
    f7de:	d001      	beq.n	f7e4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    f7e0:	3301      	adds	r3, #1
    f7e2:	e7f4      	b.n	f7ce <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f7e4:	4a03      	ldr	r2, [pc, #12]	; (f7f4 <find_handler+0x28>)
    f7e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f7ea:	6852      	ldr	r2, [r2, #4]
    f7ec:	428a      	cmp	r2, r1
    f7ee:	d1f7      	bne.n	f7e0 <find_handler+0x14>
            return i;
    f7f0:	4618      	mov	r0, r3
    f7f2:	4770      	bx	lr
    f7f4:	20000408 	.word	0x20000408

0000f7f8 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f7f8:	f100 0208 	add.w	r2, r0, #8
    f7fc:	4b0d      	ldr	r3, [pc, #52]	; (f834 <get_initial_sense+0x3c>)
    f7fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    f802:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    f806:	2b04      	cmp	r3, #4
    f808:	d00d      	beq.n	f826 <get_initial_sense+0x2e>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    f80a:	2b05      	cmp	r3, #5
    f80c:	d00d      	beq.n	f82a <get_initial_sense+0x32>
    *p_pin = pin_number & 0x1F;
    f80e:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
    f812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f816:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    f81a:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    f81c:	f013 0f01 	tst.w	r3, #1
    f820:	d005      	beq.n	f82e <get_initial_sense+0x36>
    f822:	2003      	movs	r0, #3
    f824:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
    f826:	2003      	movs	r0, #3
    f828:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    f82a:	2002      	movs	r0, #2
    f82c:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    f82e:	2002      	movs	r0, #2
    }

    return sense;
}
    f830:	4770      	bx	lr
    f832:	bf00      	nop
    f834:	20000408 	.word	0x20000408

0000f838 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f838:	3008      	adds	r0, #8
    f83a:	4b06      	ldr	r3, [pc, #24]	; (f854 <channel_handler_get+0x1c>)
    f83c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    f840:	f410 7f80 	tst.w	r0, #256	; 0x100
    f844:	d004      	beq.n	f850 <channel_handler_get+0x18>
    f846:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    f84a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f84e:	4770      	bx	lr
        return NULL;
    f850:	2000      	movs	r0, #0
}
    f852:	4770      	bx	lr
    f854:	20000408 	.word	0x20000408

0000f858 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    f858:	b570      	push	{r4, r5, r6, lr}
    f85a:	4604      	mov	r4, r0
    f85c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    f85e:	f7ff ffeb 	bl	f838 <channel_handler_get>

    if (handler)
    f862:	b120      	cbz	r0, f86e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    f864:	6806      	ldr	r6, [r0, #0]
    f866:	6842      	ldr	r2, [r0, #4]
    f868:	4629      	mov	r1, r5
    f86a:	4620      	mov	r0, r4
    f86c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    f86e:	4b04      	ldr	r3, [pc, #16]	; (f880 <call_handler+0x28>)
    f870:	689b      	ldr	r3, [r3, #8]
    f872:	b123      	cbz	r3, f87e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    f874:	4a02      	ldr	r2, [pc, #8]	; (f880 <call_handler+0x28>)
    f876:	68d2      	ldr	r2, [r2, #12]
    f878:	4629      	mov	r1, r5
    f87a:	4620      	mov	r0, r4
    f87c:	4798      	blx	r3
    }
}
    f87e:	bd70      	pop	{r4, r5, r6, pc}
    f880:	20000408 	.word	0x20000408

0000f884 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f884:	f100 0208 	add.w	r2, r0, #8
    f888:	4b0e      	ldr	r3, [pc, #56]	; (f8c4 <release_handler+0x40>)
    f88a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    f88e:	f413 7f80 	tst.w	r3, #256	; 0x100
    f892:	d016      	beq.n	f8c2 <release_handler+0x3e>
{
    f894:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f896:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    f89a:	4610      	mov	r0, r2
    f89c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    f8a0:	4a08      	ldr	r2, [pc, #32]	; (f8c4 <release_handler+0x40>)
    f8a2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    f8a6:	4620      	mov	r0, r4
    f8a8:	f7ff ff76 	bl	f798 <handler_in_use>
    f8ac:	b100      	cbz	r0, f8b0 <release_handler+0x2c>
}
    f8ae:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    f8b0:	4804      	ldr	r0, [pc, #16]	; (f8c4 <release_handler+0x40>)
    f8b2:	2300      	movs	r3, #0
    f8b4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f8b8:	4621      	mov	r1, r4
    f8ba:	3054      	adds	r0, #84	; 0x54
    f8bc:	f7ff ff18 	bl	f6f0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    f8c0:	e7f5      	b.n	f8ae <release_handler+0x2a>
    f8c2:	4770      	bx	lr
    f8c4:	20000408 	.word	0x20000408

0000f8c8 <pin_handler_trigger_uninit>:
{
    f8c8:	b510      	push	{r4, lr}
    f8ca:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    f8cc:	f7ff ff3c 	bl	f748 <pin_in_use_by_te>
    f8d0:	b140      	cbz	r0, f8e4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    f8d2:	4620      	mov	r0, r4
    f8d4:	f7ff ff58 	bl	f788 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    f8d8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    f8dc:	4b06      	ldr	r3, [pc, #24]	; (f8f8 <pin_handler_trigger_uninit+0x30>)
    f8de:	2200      	movs	r2, #0
    f8e0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    f8e4:	4620      	mov	r0, r4
    f8e6:	f7ff ffcd 	bl	f884 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    f8ea:	3408      	adds	r4, #8
    f8ec:	4b03      	ldr	r3, [pc, #12]	; (f8fc <pin_handler_trigger_uninit+0x34>)
    f8ee:	2200      	movs	r2, #0
    f8f0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    f8f4:	bd10      	pop	{r4, pc}
    f8f6:	bf00      	nop
    f8f8:	40006000 	.word	0x40006000
    f8fc:	20000408 	.word	0x20000408

0000f900 <pin_handler_set>:
{
    f900:	b570      	push	{r4, r5, r6, lr}
    f902:	b082      	sub	sp, #8
    f904:	4605      	mov	r5, r0
    f906:	460e      	mov	r6, r1
    f908:	4614      	mov	r4, r2
    release_handler(pin);
    f90a:	f7ff ffbb 	bl	f884 <release_handler>
    if (!handler)
    f90e:	b326      	cbz	r6, f95a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    f910:	4621      	mov	r1, r4
    f912:	4630      	mov	r0, r6
    f914:	f7ff ff5a 	bl	f7cc <find_handler>
    if (handler_id < 0)
    f918:	1e03      	subs	r3, r0, #0
    f91a:	db13      	blt.n	f944 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    f91c:	4910      	ldr	r1, [pc, #64]	; (f960 <pin_handler_set+0x60>)
    f91e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    f922:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    f926:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    f928:	f105 0008 	add.w	r0, r5, #8
    f92c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    f930:	025b      	lsls	r3, r3, #9
    f932:	b29b      	uxth	r3, r3
    f934:	4313      	orrs	r3, r2
    f936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f93a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    f93e:	4809      	ldr	r0, [pc, #36]	; (f964 <pin_handler_set+0x64>)
}
    f940:	b002      	add	sp, #8
    f942:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    f944:	f10d 0107 	add.w	r1, sp, #7
    f948:	4807      	ldr	r0, [pc, #28]	; (f968 <pin_handler_set+0x68>)
    f94a:	f7ff fea9 	bl	f6a0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    f94e:	4b05      	ldr	r3, [pc, #20]	; (f964 <pin_handler_set+0x64>)
    f950:	4298      	cmp	r0, r3
    f952:	d1f5      	bne.n	f940 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    f954:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f958:	e7e0      	b.n	f91c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    f95a:	4802      	ldr	r0, [pc, #8]	; (f964 <pin_handler_set+0x64>)
    f95c:	e7f0      	b.n	f940 <pin_handler_set+0x40>
    f95e:	bf00      	nop
    f960:	20000408 	.word	0x20000408
    f964:	0bad0000 	.word	0x0bad0000
    f968:	2000045c 	.word	0x2000045c

0000f96c <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    f96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f96e:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    f970:	2300      	movs	r3, #0
    f972:	a801      	add	r0, sp, #4
    f974:	e008      	b.n	f988 <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    f976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    f97a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    f97e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    f982:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    f986:	3301      	adds	r3, #1
    f988:	2b00      	cmp	r3, #0
    f98a:	d0f4      	beq.n	f976 <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    f98c:	2400      	movs	r4, #0
    f98e:	b3a4      	cbz	r4, f9fa <port_event_handle+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f990:	4b1e      	ldr	r3, [pc, #120]	; (fa0c <port_event_handle+0xa0>)
    f992:	2200      	movs	r2, #0
    f994:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    f998:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    f99c:	a801      	add	r0, sp, #4
    f99e:	f005 f975 	bl	14c8c <latch_pending_read_and_check>
    f9a2:	2800      	cmp	r0, #0
    f9a4:	d1f2      	bne.n	f98c <port_event_handle+0x20>
}
    f9a6:	b003      	add	sp, #12
    f9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    f9aa:	fa90 f0a0 	rbit	r0, r0
    f9ae:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    f9b2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f9b6:	f100 0208 	add.w	r2, r0, #8
    f9ba:	4b15      	ldr	r3, [pc, #84]	; (fa10 <port_event_handle+0xa4>)
    f9bc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    f9c0:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    f9c2:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    f9c6:	af01      	add	r7, sp, #4
    f9c8:	5dba      	ldrb	r2, [r7, r6]
    f9ca:	2501      	movs	r5, #1
    f9cc:	fa05 f303 	lsl.w	r3, r5, r3
    f9d0:	43db      	mvns	r3, r3
    f9d2:	b25b      	sxtb	r3, r3
    f9d4:	4013      	ands	r3, r2
    f9d6:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    f9d8:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    f9dc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    f9e0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    f9e4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    f9e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    f9ec:	f3c1 0182 	ubfx	r1, r1, #2, #3
    f9f0:	f005 f8fd 	bl	14bee <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    f9f4:	40bd      	lsls	r5, r7
    f9f6:	f8c6 5520 	str.w	r5, [r6, #1312]	; 0x520
            while (latch[i])
    f9fa:	ab02      	add	r3, sp, #8
    f9fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fa00:	f853 0c04 	ldr.w	r0, [r3, #-4]
    fa04:	2800      	cmp	r0, #0
    fa06:	d1d0      	bne.n	f9aa <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    fa08:	3401      	adds	r4, #1
    fa0a:	e7c0      	b.n	f98e <port_event_handle+0x22>
    fa0c:	40006000 	.word	0x40006000
    fa10:	20000408 	.word	0x20000408

0000fa14 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    fa14:	b538      	push	{r3, r4, r5, lr}
    fa16:	4604      	mov	r4, r0
    while (mask)
    fa18:	e018      	b.n	fa4c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    fa1a:	fa94 f3a4 	rbit	r3, r4
    fa1e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    fa22:	2201      	movs	r2, #1
    fa24:	409a      	lsls	r2, r3
    fa26:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    fa2a:	4a0a      	ldr	r2, [pc, #40]	; (fa54 <gpiote_evt_handle+0x40>)
    fa2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    fa30:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    fa34:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    fa38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    fa3c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    fa40:	f005 f8ce 	bl	14be0 <gpiote_polarity_to_trigger>
    fa44:	4601      	mov	r1, r0
    fa46:	4628      	mov	r0, r5
    fa48:	f7ff ff06 	bl	f858 <call_handler>
    while (mask)
    fa4c:	2c00      	cmp	r4, #0
    fa4e:	d1e4      	bne.n	fa1a <gpiote_evt_handle+0x6>
    }
}
    fa50:	bd38      	pop	{r3, r4, r5, pc}
    fa52:	bf00      	nop
    fa54:	40006000 	.word	0x40006000

0000fa58 <nrfx_gpiote_input_configure>:
{
    fa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa5c:	b084      	sub	sp, #16
    fa5e:	4604      	mov	r4, r0
    fa60:	4615      	mov	r5, r2
    fa62:	461e      	mov	r6, r3
    if (p_input_config)
    fa64:	b309      	cbz	r1, faaa <nrfx_gpiote_input_configure+0x52>
    fa66:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    fa68:	f005 f8a4 	bl	14bb4 <pin_is_task_output>
    fa6c:	2800      	cmp	r0, #0
    fa6e:	d13f      	bne.n	faf0 <__kernel_ram_size+0x10>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    fa70:	2300      	movs	r3, #0
    fa72:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    fa76:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    fa7a:	9301      	str	r3, [sp, #4]
    fa7c:	9300      	str	r3, [sp, #0]
    fa7e:	463b      	mov	r3, r7
    fa80:	f10d 020f 	add.w	r2, sp, #15
    fa84:	f10d 010e 	add.w	r1, sp, #14
    fa88:	4620      	mov	r0, r4
    fa8a:	f005 f83b 	bl	14b04 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    fa8e:	4a38      	ldr	r2, [pc, #224]	; (fb70 <__kernel_ram_size+0x90>)
    fa90:	f104 0108 	add.w	r1, r4, #8
    fa94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fa98:	f023 0302 	bic.w	r3, r3, #2
    fa9c:	b29b      	uxth	r3, r3
    fa9e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    faa2:	f043 0301 	orr.w	r3, r3, #1
    faa6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    faaa:	b1bd      	cbz	r5, fadc <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    faac:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    faae:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    fab2:	4620      	mov	r0, r4
    fab4:	f7ff fe5e 	bl	f774 <pin_is_output>
    fab8:	b1e0      	cbz	r0, faf4 <__kernel_ram_size+0x14>
            if (use_evt)
    faba:	f1b8 0f00 	cmp.w	r8, #0
    fabe:	d151      	bne.n	fb64 <__kernel_ram_size+0x84>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    fac0:	4a2b      	ldr	r2, [pc, #172]	; (fb70 <__kernel_ram_size+0x90>)
    fac2:	f104 0108 	add.w	r1, r4, #8
    fac6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    faca:	f023 031c 	bic.w	r3, r3, #28
    face:	b29b      	uxth	r3, r3
    fad0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    fad4:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    fad8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    fadc:	2e00      	cmp	r6, #0
    fade:	d045      	beq.n	fb6c <__kernel_ram_size+0x8c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    fae0:	6872      	ldr	r2, [r6, #4]
    fae2:	6831      	ldr	r1, [r6, #0]
    fae4:	4620      	mov	r0, r4
    fae6:	f7ff ff0b 	bl	f900 <pin_handler_set>
}
    faea:	b004      	add	sp, #16
    faec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    faf0:	4820      	ldr	r0, [pc, #128]	; (fb74 <__kernel_ram_size+0x94>)
    faf2:	e7fa      	b.n	faea <__kernel_ram_size+0xa>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    faf4:	4a1e      	ldr	r2, [pc, #120]	; (fb70 <__kernel_ram_size+0x90>)
    faf6:	f104 0108 	add.w	r1, r4, #8
    fafa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fafe:	f023 0320 	bic.w	r3, r3, #32
    fb02:	04db      	lsls	r3, r3, #19
    fb04:	0cdb      	lsrs	r3, r3, #19
    fb06:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    fb0a:	f1b8 0f00 	cmp.w	r8, #0
    fb0e:	d0d7      	beq.n	fac0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    fb10:	2f03      	cmp	r7, #3
    fb12:	d829      	bhi.n	fb68 <__kernel_ram_size+0x88>
                uint8_t ch = *p_trigger_config->p_in_channel;
    fb14:	686b      	ldr	r3, [r5, #4]
    fb16:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    fb18:	b937      	cbnz	r7, fb28 <__kernel_ram_size+0x48>
    p_reg->CONFIG[idx] = 0;
    fb1a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    fb1e:	4b16      	ldr	r3, [pc, #88]	; (fb78 <__kernel_ram_size+0x98>)
    fb20:	2200      	movs	r2, #0
    fb22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    fb26:	e7cb      	b.n	fac0 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    fb28:	4638      	mov	r0, r7
    fb2a:	f005 f85a 	bl	14be2 <gpiote_trigger_to_polarity>
    fb2e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    fb30:	4811      	ldr	r0, [pc, #68]	; (fb78 <__kernel_ram_size+0x98>)
    fb32:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    fb36:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    fb3a:	f022 0203 	bic.w	r2, r2, #3
    fb3e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    fb42:	4622      	mov	r2, r4
    fb44:	4629      	mov	r1, r5
    fb46:	f004 ffa5 	bl	14a94 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    fb4a:	4a09      	ldr	r2, [pc, #36]	; (fb70 <__kernel_ram_size+0x90>)
    fb4c:	f104 0108 	add.w	r1, r4, #8
    fb50:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fb54:	036d      	lsls	r5, r5, #13
    fb56:	b2ad      	uxth	r5, r5
    fb58:	432b      	orrs	r3, r5
    fb5a:	f043 0320 	orr.w	r3, r3, #32
    fb5e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    fb62:	e7ad      	b.n	fac0 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    fb64:	4803      	ldr	r0, [pc, #12]	; (fb74 <__kernel_ram_size+0x94>)
    fb66:	e7c0      	b.n	faea <__kernel_ram_size+0xa>
                    return NRFX_ERROR_INVALID_PARAM;
    fb68:	4802      	ldr	r0, [pc, #8]	; (fb74 <__kernel_ram_size+0x94>)
    fb6a:	e7be      	b.n	faea <__kernel_ram_size+0xa>
        err = NRFX_SUCCESS;
    fb6c:	4803      	ldr	r0, [pc, #12]	; (fb7c <__kernel_ram_size+0x9c>)
    fb6e:	e7bc      	b.n	faea <__kernel_ram_size+0xa>
    fb70:	20000408 	.word	0x20000408
    fb74:	0bad0004 	.word	0x0bad0004
    fb78:	40006000 	.word	0x40006000
    fb7c:	0bad0000 	.word	0x0bad0000

0000fb80 <nrfx_gpiote_output_configure>:
{
    fb80:	b570      	push	{r4, r5, r6, lr}
    fb82:	b084      	sub	sp, #16
    fb84:	4604      	mov	r4, r0
    fb86:	4615      	mov	r5, r2
    if (p_config)
    fb88:	b329      	cbz	r1, fbd6 <nrfx_gpiote_output_configure+0x56>
    fb8a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    fb8c:	f005 f821 	bl	14bd2 <pin_is_input>
    fb90:	b120      	cbz	r0, fb9c <nrfx_gpiote_output_configure+0x1c>
    fb92:	4620      	mov	r0, r4
    fb94:	f7ff fdd8 	bl	f748 <pin_in_use_by_te>
    fb98:	2800      	cmp	r0, #0
    fb9a:	d138      	bne.n	fc0e <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    fb9c:	4620      	mov	r0, r4
    fb9e:	f7ff fddd 	bl	f75c <pin_has_trigger>
    fba2:	b110      	cbz	r0, fbaa <nrfx_gpiote_output_configure+0x2a>
    fba4:	7873      	ldrb	r3, [r6, #1]
    fba6:	2b01      	cmp	r3, #1
    fba8:	d031      	beq.n	fc0e <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    fbaa:	2301      	movs	r3, #1
    fbac:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    fbb0:	2300      	movs	r3, #0
    fbb2:	9301      	str	r3, [sp, #4]
    fbb4:	9600      	str	r6, [sp, #0]
    fbb6:	1cb3      	adds	r3, r6, #2
    fbb8:	1c72      	adds	r2, r6, #1
    fbba:	f10d 010f 	add.w	r1, sp, #15
    fbbe:	4620      	mov	r0, r4
    fbc0:	f004 ffa0 	bl	14b04 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    fbc4:	4a1f      	ldr	r2, [pc, #124]	; (fc44 <nrfx_gpiote_output_configure+0xc4>)
    fbc6:	f104 0108 	add.w	r1, r4, #8
    fbca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fbce:	f043 0303 	orr.w	r3, r3, #3
    fbd2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    fbd6:	b385      	cbz	r5, fc3a <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    fbd8:	4620      	mov	r0, r4
    fbda:	f004 fffa 	bl	14bd2 <pin_is_input>
    fbde:	bb70      	cbnz	r0, fc3e <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    fbe0:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    fbe2:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    fbe6:	4b18      	ldr	r3, [pc, #96]	; (fc48 <nrfx_gpiote_output_configure+0xc8>)
    fbe8:	2100      	movs	r1, #0
    fbea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    fbee:	4a15      	ldr	r2, [pc, #84]	; (fc44 <nrfx_gpiote_output_configure+0xc4>)
    fbf0:	f104 0108 	add.w	r1, r4, #8
    fbf4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    fbf8:	f023 0320 	bic.w	r3, r3, #32
    fbfc:	04db      	lsls	r3, r3, #19
    fbfe:	0cdb      	lsrs	r3, r3, #19
    fc00:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    fc04:	786b      	ldrb	r3, [r5, #1]
    fc06:	b923      	cbnz	r3, fc12 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    fc08:	4810      	ldr	r0, [pc, #64]	; (fc4c <nrfx_gpiote_output_configure+0xcc>)
}
    fc0a:	b004      	add	sp, #16
    fc0c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    fc0e:	4810      	ldr	r0, [pc, #64]	; (fc50 <nrfx_gpiote_output_configure+0xd0>)
    fc10:	e7fb      	b.n	fc0a <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    fc12:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    fc14:	9200      	str	r2, [sp, #0]
    fc16:	4622      	mov	r2, r4
    fc18:	4631      	mov	r1, r6
    fc1a:	480b      	ldr	r0, [pc, #44]	; (fc48 <nrfx_gpiote_output_configure+0xc8>)
    fc1c:	f004 ff53 	bl	14ac6 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    fc20:	4a08      	ldr	r2, [pc, #32]	; (fc44 <nrfx_gpiote_output_configure+0xc4>)
    fc22:	3408      	adds	r4, #8
    fc24:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    fc28:	0376      	lsls	r6, r6, #13
    fc2a:	b2b6      	uxth	r6, r6
    fc2c:	4333      	orrs	r3, r6
    fc2e:	f043 0320 	orr.w	r3, r3, #32
    fc32:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    fc36:	4805      	ldr	r0, [pc, #20]	; (fc4c <nrfx_gpiote_output_configure+0xcc>)
    fc38:	e7e7      	b.n	fc0a <nrfx_gpiote_output_configure+0x8a>
    fc3a:	4804      	ldr	r0, [pc, #16]	; (fc4c <nrfx_gpiote_output_configure+0xcc>)
    fc3c:	e7e5      	b.n	fc0a <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    fc3e:	4804      	ldr	r0, [pc, #16]	; (fc50 <nrfx_gpiote_output_configure+0xd0>)
    fc40:	e7e3      	b.n	fc0a <nrfx_gpiote_output_configure+0x8a>
    fc42:	bf00      	nop
    fc44:	20000408 	.word	0x20000408
    fc48:	40006000 	.word	0x40006000
    fc4c:	0bad0000 	.word	0x0bad0000
    fc50:	0bad0004 	.word	0x0bad0004

0000fc54 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    fc54:	4b01      	ldr	r3, [pc, #4]	; (fc5c <nrfx_gpiote_global_callback_set+0x8>)
    fc56:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    fc58:	60d9      	str	r1, [r3, #12]
}
    fc5a:	4770      	bx	lr
    fc5c:	20000408 	.word	0x20000408

0000fc60 <nrfx_gpiote_channel_get>:
{
    fc60:	b538      	push	{r3, r4, r5, lr}
    fc62:	4604      	mov	r4, r0
    fc64:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    fc66:	f7ff fd6f 	bl	f748 <pin_in_use_by_te>
    fc6a:	b140      	cbz	r0, fc7e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fc6c:	f104 0008 	add.w	r0, r4, #8
    fc70:	4b04      	ldr	r3, [pc, #16]	; (fc84 <nrfx_gpiote_channel_get+0x24>)
    fc72:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    fc76:	0b5b      	lsrs	r3, r3, #13
    fc78:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    fc7a:	4803      	ldr	r0, [pc, #12]	; (fc88 <nrfx_gpiote_channel_get+0x28>)
}
    fc7c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    fc7e:	4803      	ldr	r0, [pc, #12]	; (fc8c <nrfx_gpiote_channel_get+0x2c>)
    fc80:	e7fc      	b.n	fc7c <nrfx_gpiote_channel_get+0x1c>
    fc82:	bf00      	nop
    fc84:	20000408 	.word	0x20000408
    fc88:	0bad0000 	.word	0x0bad0000
    fc8c:	0bad0004 	.word	0x0bad0004

0000fc90 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    fc90:	4b0f      	ldr	r3, [pc, #60]	; (fcd0 <nrfx_gpiote_init+0x40>)
    fc92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    fc96:	b10b      	cbz	r3, fc9c <nrfx_gpiote_init+0xc>
        return err_code;
    fc98:	480e      	ldr	r0, [pc, #56]	; (fcd4 <nrfx_gpiote_init+0x44>)
}
    fc9a:	4770      	bx	lr
{
    fc9c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    fc9e:	4c0e      	ldr	r4, [pc, #56]	; (fcd8 <nrfx_gpiote_init+0x48>)
    fca0:	2240      	movs	r2, #64	; 0x40
    fca2:	2100      	movs	r1, #0
    fca4:	4620      	mov	r0, r4
    fca6:	f002 ffdf 	bl	12c68 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    fcaa:	2006      	movs	r0, #6
    fcac:	f002 feb0 	bl	12a10 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fcb0:	4b0a      	ldr	r3, [pc, #40]	; (fcdc <nrfx_gpiote_init+0x4c>)
    fcb2:	2200      	movs	r2, #0
    fcb4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    fcb8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    fcbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    fcc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    fcc4:	2301      	movs	r3, #1
    fcc6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    fcca:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
    fccc:	4804      	ldr	r0, [pc, #16]	; (fce0 <nrfx_gpiote_init+0x50>)
}
    fcce:	bd10      	pop	{r4, pc}
    fcd0:	20000408 	.word	0x20000408
    fcd4:	0bad0005 	.word	0x0bad0005
    fcd8:	20000418 	.word	0x20000418
    fcdc:	40006000 	.word	0x40006000
    fce0:	0bad0000 	.word	0x0bad0000

0000fce4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    fce4:	4b03      	ldr	r3, [pc, #12]	; (fcf4 <nrfx_gpiote_is_init+0x10>)
    fce6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    fcea:	3800      	subs	r0, #0
    fcec:	bf18      	it	ne
    fcee:	2001      	movne	r0, #1
    fcf0:	4770      	bx	lr
    fcf2:	bf00      	nop
    fcf4:	20000408 	.word	0x20000408

0000fcf8 <nrfx_gpiote_channel_free>:
{
    fcf8:	b508      	push	{r3, lr}
    fcfa:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    fcfc:	4801      	ldr	r0, [pc, #4]	; (fd04 <nrfx_gpiote_channel_free+0xc>)
    fcfe:	f7ff fcf7 	bl	f6f0 <nrfx_flag32_free>
}
    fd02:	bd08      	pop	{r3, pc}
    fd04:	20000458 	.word	0x20000458

0000fd08 <nrfx_gpiote_channel_alloc>:
{
    fd08:	b508      	push	{r3, lr}
    fd0a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    fd0c:	4801      	ldr	r0, [pc, #4]	; (fd14 <nrfx_gpiote_channel_alloc+0xc>)
    fd0e:	f7ff fcc7 	bl	f6a0 <nrfx_flag32_alloc>
}
    fd12:	bd08      	pop	{r3, pc}
    fd14:	20000458 	.word	0x20000458

0000fd18 <nrfx_gpiote_trigger_enable>:
{
    fd18:	b538      	push	{r3, r4, r5, lr}
    fd1a:	4604      	mov	r4, r0
    fd1c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fd1e:	f7ff fd13 	bl	f748 <pin_in_use_by_te>
    fd22:	b300      	cbz	r0, fd66 <nrfx_gpiote_trigger_enable+0x4e>
    fd24:	4620      	mov	r0, r4
    fd26:	f004 ff54 	bl	14bd2 <pin_is_input>
    fd2a:	b1e0      	cbz	r0, fd66 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    fd2c:	4620      	mov	r0, r4
    fd2e:	f7ff fd2b 	bl	f788 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    fd32:	0083      	lsls	r3, r0, #2
    fd34:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    fd38:	b29b      	uxth	r3, r3
    fd3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fd3e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fd42:	2200      	movs	r2, #0
    fd44:	601a      	str	r2, [r3, #0]
    fd46:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    fd48:	4a10      	ldr	r2, [pc, #64]	; (fd8c <nrfx_gpiote_trigger_enable+0x74>)
    fd4a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    fd4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    fd52:	f043 0301 	orr.w	r3, r3, #1
    fd56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    fd5a:	b1ad      	cbz	r5, fd88 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    fd5c:	2301      	movs	r3, #1
    fd5e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    fd60:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    fd64:	e010      	b.n	fd88 <nrfx_gpiote_trigger_enable+0x70>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    fd66:	4620      	mov	r0, r4
    fd68:	f7ff fd46 	bl	f7f8 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
    fd6c:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    fd70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    fd74:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    fd78:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    fd7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    fd80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    fd84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    fd88:	bd38      	pop	{r3, r4, r5, pc}
    fd8a:	bf00      	nop
    fd8c:	40006000 	.word	0x40006000

0000fd90 <nrfx_gpiote_trigger_disable>:
{
    fd90:	b510      	push	{r4, lr}
    fd92:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fd94:	f7ff fcd8 	bl	f748 <pin_in_use_by_te>
    fd98:	b1a0      	cbz	r0, fdc4 <nrfx_gpiote_trigger_disable+0x34>
    fd9a:	4620      	mov	r0, r4
    fd9c:	f004 ff19 	bl	14bd2 <pin_is_input>
    fda0:	b180      	cbz	r0, fdc4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    fda2:	4620      	mov	r0, r4
    fda4:	f7ff fcf0 	bl	f788 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    fda8:	2201      	movs	r2, #1
    fdaa:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    fdac:	4b0c      	ldr	r3, [pc, #48]	; (fde0 <nrfx_gpiote_trigger_disable+0x50>)
    fdae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    fdb2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    fdb6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    fdba:	f022 0203 	bic.w	r2, r2, #3
    fdbe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    fdc2:	e00b      	b.n	fddc <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    fdc4:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    fdc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    fdcc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    fdd0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    fdd4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    fdd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    fddc:	bd10      	pop	{r4, pc}
    fdde:	bf00      	nop
    fde0:	40006000 	.word	0x40006000

0000fde4 <nrfx_gpiote_pin_uninit>:
{
    fde4:	b510      	push	{r4, lr}
    fde6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    fde8:	f7ff fca4 	bl	f734 <pin_in_use>
    fdec:	b908      	cbnz	r0, fdf2 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    fdee:	4809      	ldr	r0, [pc, #36]	; (fe14 <nrfx_gpiote_pin_uninit+0x30>)
}
    fdf0:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    fdf2:	4620      	mov	r0, r4
    fdf4:	f7ff ffcc 	bl	fd90 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    fdf8:	4620      	mov	r0, r4
    fdfa:	f7ff fd65 	bl	f8c8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    fdfe:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    fe02:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    fe06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    fe0a:	2202      	movs	r2, #2
    fe0c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    fe10:	4801      	ldr	r0, [pc, #4]	; (fe18 <nrfx_gpiote_pin_uninit+0x34>)
    fe12:	e7ed      	b.n	fdf0 <nrfx_gpiote_pin_uninit+0xc>
    fe14:	0bad0004 	.word	0x0bad0004
    fe18:	0bad0000 	.word	0x0bad0000

0000fe1c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    fe1c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    fe1e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    fe20:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    fe24:	2100      	movs	r1, #0
    uint32_t status = 0;
    fe26:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    fe28:	e003      	b.n	fe32 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    fe2a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    fe2c:	3304      	adds	r3, #4
    fe2e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    fe30:	3101      	adds	r1, #1
    fe32:	2907      	cmp	r1, #7
    fe34:	d814      	bhi.n	fe60 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe36:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    fe3a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    fe3e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    fe40:	2a00      	cmp	r2, #0
    fe42:	d0f2      	beq.n	fe2a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    fe44:	4a0c      	ldr	r2, [pc, #48]	; (fe78 <nrfx_gpiote_irq_handler+0x5c>)
    fe46:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    fe4a:	4210      	tst	r0, r2
    fe4c:	d0ed      	beq.n	fe2a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    fe4e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    fe52:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fe56:	2500      	movs	r5, #0
    fe58:	6015      	str	r5, [r2, #0]
    fe5a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    fe5c:	4304      	orrs	r4, r0
    fe5e:	e7e4      	b.n	fe2a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe60:	4b05      	ldr	r3, [pc, #20]	; (fe78 <nrfx_gpiote_irq_handler+0x5c>)
    fe62:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    fe66:	b91b      	cbnz	r3, fe70 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    fe68:	4620      	mov	r0, r4
    fe6a:	f7ff fdd3 	bl	fa14 <gpiote_evt_handle>
}
    fe6e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    fe70:	f7ff fd7c 	bl	f96c <port_event_handle>
    fe74:	e7f8      	b.n	fe68 <nrfx_gpiote_irq_handler+0x4c>
    fe76:	bf00      	nop
    fe78:	40006000 	.word	0x40006000

0000fe7c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    fe7c:	b508      	push	{r3, lr}
    fe7e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    fe80:	4801      	ldr	r0, [pc, #4]	; (fe88 <nrfx_ppi_channel_alloc+0xc>)
    fe82:	f7ff fc0d 	bl	f6a0 <nrfx_flag32_alloc>
}
    fe86:	bd08      	pop	{r3, pc}
    fe88:	20000464 	.word	0x20000464

0000fe8c <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    fe8c:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    fe8e:	f010 0f01 	tst.w	r0, #1
    fe92:	d108      	bne.n	fea6 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    fe94:	4806      	ldr	r0, [pc, #24]	; (feb0 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    fe96:	f013 0f02 	tst.w	r3, #2
    fe9a:	d000      	beq.n	fe9e <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    fe9c:	4805      	ldr	r0, [pc, #20]	; (feb4 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    fe9e:	f013 0f04 	tst.w	r3, #4
    fea2:	d102      	bne.n	feaa <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    fea4:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    fea6:	4804      	ldr	r0, [pc, #16]	; (feb8 <twi_process_error+0x2c>)
    fea8:	e7f5      	b.n	fe96 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    feaa:	4804      	ldr	r0, [pc, #16]	; (febc <twi_process_error+0x30>)
    return ret;
    feac:	e7fa      	b.n	fea4 <twi_process_error+0x18>
    feae:	bf00      	nop
    feb0:	0bad0001 	.word	0x0bad0001
    feb4:	0bae0001 	.word	0x0bae0001
    feb8:	0bae0000 	.word	0x0bae0000
    febc:	0bae0002 	.word	0x0bae0002

0000fec0 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    fec0:	b530      	push	{r4, r5, lr}
    fec2:	b083      	sub	sp, #12
    fec4:	4604      	mov	r4, r0
    fec6:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    fec8:	4b29      	ldr	r3, [pc, #164]	; (ff70 <twi_tx_start_transfer+0xb0>)
    feca:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fecc:	2300      	movs	r3, #0
    fece:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    fed2:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    fed6:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    feda:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    fede:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    fee2:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    fee6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    feea:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    feee:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    fef2:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    fef4:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fef8:	2301      	movs	r3, #1
    fefa:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    fefc:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    ff00:	2b01      	cmp	r3, #1
    ff02:	d001      	beq.n	ff08 <twi_tx_start_transfer+0x48>
    ff04:	2301      	movs	r3, #1
    ff06:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    ff08:	4629      	mov	r1, r5
    ff0a:	4620      	mov	r0, r4
    ff0c:	f004 fee5 	bl	14cda <twi_send_byte>

    if (p_cb->handler)
    ff10:	682b      	ldr	r3, [r5, #0]
    ff12:	b15b      	cbz	r3, ff2c <twi_tx_start_transfer+0x6c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    ff14:	f240 2386 	movw	r3, #646	; 0x286
    ff18:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    ff1a:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    ff1c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    ff20:	4814      	ldr	r0, [pc, #80]	; (ff74 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    ff22:	b003      	add	sp, #12
    ff24:	bd30      	pop	{r4, r5, pc}
            hw_timeout--;
    ff26:	9b01      	ldr	r3, [sp, #4]
    ff28:	3b01      	subs	r3, #1
    ff2a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    ff2c:	9b01      	ldr	r3, [sp, #4]
    ff2e:	2b00      	cmp	r3, #0
    ff30:	dd05      	ble.n	ff3e <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
    ff32:	4629      	mov	r1, r5
    ff34:	4620      	mov	r0, r4
    ff36:	f004 ff1f 	bl	14d78 <twi_transfer>
        while ((hw_timeout > 0) &&
    ff3a:	2800      	cmp	r0, #0
    ff3c:	d1f3      	bne.n	ff26 <twi_tx_start_transfer+0x66>
        if (p_cb->error)
    ff3e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    ff42:	b13b      	cbz	r3, ff54 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
    ff44:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    ff48:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    ff4c:	b170      	cbz	r0, ff6c <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
    ff4e:	f7ff ff9d 	bl	fe8c <twi_process_error>
    ff52:	e000      	b.n	ff56 <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    ff54:	4807      	ldr	r0, [pc, #28]	; (ff74 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
    ff56:	9b01      	ldr	r3, [sp, #4]
    ff58:	2b00      	cmp	r3, #0
    ff5a:	dce2      	bgt.n	ff22 <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    ff5c:	2300      	movs	r3, #0
    ff5e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    ff62:	2305      	movs	r3, #5
    ff64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    ff68:	4803      	ldr	r0, [pc, #12]	; (ff78 <twi_tx_start_transfer+0xb8>)
    return ret_code;
    ff6a:	e7da      	b.n	ff22 <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    ff6c:	4802      	ldr	r0, [pc, #8]	; (ff78 <twi_tx_start_transfer+0xb8>)
    ff6e:	e7f2      	b.n	ff56 <twi_tx_start_transfer+0x96>
    ff70:	000186a0 	.word	0x000186a0
    ff74:	0bad0000 	.word	0x0bad0000
    ff78:	0bad0001 	.word	0x0bad0001

0000ff7c <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    ff7c:	b530      	push	{r4, r5, lr}
    ff7e:	b083      	sub	sp, #12
    ff80:	4604      	mov	r4, r0
    ff82:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    ff84:	4b2d      	ldr	r3, [pc, #180]	; (1003c <CONFIG_PM_SRAM_SIZE+0x3c>)
    ff86:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff88:	2300      	movs	r3, #0
    ff8a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    ff8e:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    ff92:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    ff96:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    ff9a:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    ff9e:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    ffa2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    ffa6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    ffaa:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    ffac:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    ffb0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ffb2:	2b01      	cmp	r3, #1
    ffb4:	d015      	beq.n	ffe2 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    ffb6:	2301      	movs	r3, #1
    ffb8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ffbc:	2301      	movs	r3, #1
    ffbe:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    ffc0:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    ffc4:	2b02      	cmp	r3, #2
    ffc6:	d001      	beq.n	ffcc <twi_rx_start_transfer+0x50>
    ffc8:	2301      	movs	r3, #1
    ffca:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    ffcc:	682b      	ldr	r3, [r5, #0]
    ffce:	b19b      	cbz	r3, fff8 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    ffd0:	f240 2386 	movw	r3, #646	; 0x286
    ffd4:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    ffd6:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    ffd8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    ffdc:	4818      	ldr	r0, [pc, #96]	; (10040 <CONFIG_PM_SRAM_SIZE+0x40>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    ffde:	b003      	add	sp, #12
    ffe0:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    ffe2:	6a0b      	ldr	r3, [r1, #32]
    ffe4:	f013 0f40 	tst.w	r3, #64	; 0x40
    ffe8:	d1e5      	bne.n	ffb6 <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
    ffea:	2302      	movs	r3, #2
    ffec:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    fff0:	e7e4      	b.n	ffbc <twi_rx_start_transfer+0x40>
               hw_timeout--;
    fff2:	9b01      	ldr	r3, [sp, #4]
    fff4:	3b01      	subs	r3, #1
    fff6:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    fff8:	9b01      	ldr	r3, [sp, #4]
    fffa:	2b00      	cmp	r3, #0
    fffc:	dd05      	ble.n	1000a <CONFIG_PM_SRAM_SIZE+0xa>
               twi_transfer(p_twi, p_cb))
    fffe:	4629      	mov	r1, r5
   10000:	4620      	mov	r0, r4
   10002:	f004 feb9 	bl	14d78 <twi_transfer>
        while ((hw_timeout > 0) &&
   10006:	2800      	cmp	r0, #0
   10008:	d1f3      	bne.n	fff2 <twi_rx_start_transfer+0x76>
        if (p_cb->error)
   1000a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1000e:	b13b      	cbz	r3, 10020 <CONFIG_PM_SRAM_SIZE+0x20>
    uint32_t error_source = p_reg->ERRORSRC;
   10010:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   10014:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   10018:	b170      	cbz	r0, 10038 <CONFIG_PM_SRAM_SIZE+0x38>
                ret_code = twi_process_error(errorsrc);
   1001a:	f7ff ff37 	bl	fe8c <twi_process_error>
   1001e:	e000      	b.n	10022 <CONFIG_PM_SRAM_SIZE+0x22>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   10020:	4807      	ldr	r0, [pc, #28]	; (10040 <CONFIG_PM_SRAM_SIZE+0x40>)
        if (hw_timeout <= 0)
   10022:	9b01      	ldr	r3, [sp, #4]
   10024:	2b00      	cmp	r3, #0
   10026:	dcda      	bgt.n	ffde <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   10028:	2300      	movs	r3, #0
   1002a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1002e:	2305      	movs	r3, #5
   10030:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   10034:	4803      	ldr	r0, [pc, #12]	; (10044 <CONFIG_PM_SRAM_SIZE+0x44>)
    return ret_code;
   10036:	e7d2      	b.n	ffde <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   10038:	4802      	ldr	r0, [pc, #8]	; (10044 <CONFIG_PM_SRAM_SIZE+0x44>)
   1003a:	e7f2      	b.n	10022 <CONFIG_PM_SRAM_SIZE+0x22>
   1003c:	000186a0 	.word	0x000186a0
   10040:	0bad0000 	.word	0x0bad0000
   10044:	0bad0001 	.word	0x0bad0001

00010048 <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
   10048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1004a:	4607      	mov	r7, r0
   1004c:	460c      	mov	r4, r1
   1004e:	4694      	mov	ip, r2
   10050:	461e      	mov	r6, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   10052:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   10056:	2b01      	cmp	r3, #1
   10058:	d02c      	beq.n	100b4 <twi_xfer+0x6c>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1005a:	2b02      	cmp	r3, #2
   1005c:	d02f      	beq.n	100be <twi_xfer+0x76>
    p_reg->INTENCLR = mask;
   1005e:	4b27      	ldr	r3, [pc, #156]	; (100fc <twi_xfer+0xb4>)
   10060:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
   10064:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   10068:	bb7b      	cbnz	r3, 100ca <twi_xfer+0x82>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1006a:	f016 0f04 	tst.w	r6, #4
   1006e:	bf0c      	ite	eq
   10070:	2301      	moveq	r3, #1
   10072:	2300      	movne	r3, #0
   10074:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
   10078:	6226      	str	r6, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1007a:	f104 0e0c 	add.w	lr, r4, #12
   1007e:	4665      	mov	r5, ip
   10080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10082:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10086:	682b      	ldr	r3, [r5, #0]
   10088:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1008c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10090:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   10092:	f8dc 300c 	ldr.w	r3, [ip, #12]
   10096:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
   10098:	f89c 3001 	ldrb.w	r3, [ip, #1]
    p_reg->ADDRESS = address;
   1009c:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   100a0:	f89c 3000 	ldrb.w	r3, [ip]
   100a4:	2b01      	cmp	r3, #1
   100a6:	d021      	beq.n	100ec <twi_xfer+0xa4>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   100a8:	b9a3      	cbnz	r3, 100d4 <twi_xfer+0x8c>
   100aa:	f016 0f20 	tst.w	r6, #32
   100ae:	d01b      	beq.n	100e8 <twi_xfer+0xa0>
   100b0:	2301      	movs	r3, #1
   100b2:	e010      	b.n	100d6 <twi_xfer+0x8e>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   100b4:	7812      	ldrb	r2, [r2, #0]
   100b6:	2a01      	cmp	r2, #1
   100b8:	d1cf      	bne.n	1005a <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
   100ba:	4811      	ldr	r0, [pc, #68]	; (10100 <twi_xfer+0xb8>)
   100bc:	e013      	b.n	100e6 <twi_xfer+0x9e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   100be:	f89c 3000 	ldrb.w	r3, [ip]
   100c2:	2b01      	cmp	r3, #1
   100c4:	d0cb      	beq.n	1005e <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
   100c6:	480e      	ldr	r0, [pc, #56]	; (10100 <twi_xfer+0xb8>)
   100c8:	e00d      	b.n	100e6 <twi_xfer+0x9e>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   100ca:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   100cc:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
        return err_code;
   100d0:	480c      	ldr	r0, [pc, #48]	; (10104 <twi_xfer+0xbc>)
   100d2:	e008      	b.n	100e6 <twi_xfer+0x9e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   100d4:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   100d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
   100da:	4621      	mov	r1, r4
   100dc:	4638      	mov	r0, r7
   100de:	f7ff feef 	bl	fec0 <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
   100e2:	6823      	ldr	r3, [r4, #0]
   100e4:	b13b      	cbz	r3, 100f6 <twi_xfer+0xae>
    {
        p_cb->busy = false;
    }
    return err_code;
}
   100e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   100e8:	2300      	movs	r3, #0
   100ea:	e7f4      	b.n	100d6 <twi_xfer+0x8e>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   100ec:	4621      	mov	r1, r4
   100ee:	4638      	mov	r0, r7
   100f0:	f7ff ff44 	bl	ff7c <twi_rx_start_transfer>
   100f4:	e7f5      	b.n	100e2 <twi_xfer+0x9a>
        p_cb->busy = false;
   100f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   100fa:	e7f4      	b.n	100e6 <twi_xfer+0x9e>
   100fc:	00044286 	.word	0x00044286
   10100:	0bad0005 	.word	0x0bad0005
   10104:	0bad000b 	.word	0x0bad000b

00010108 <nrfx_twi_init>:
{
   10108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1010a:	7904      	ldrb	r4, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1010c:	6806      	ldr	r6, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1010e:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
   10112:	4d26      	ldr	r5, [pc, #152]	; (101ac <nrfx_twi_init+0xa4>)
   10114:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
   10118:	f89c 502e 	ldrb.w	r5, [ip, #46]	; 0x2e
   1011c:	2d00      	cmp	r5, #0
   1011e:	d143      	bne.n	101a8 <nrfx_twi_init+0xa0>
    p_cb->handler         = event_handler;
   10120:	4d22      	ldr	r5, [pc, #136]	; (101ac <nrfx_twi_init+0xa4>)
   10122:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
   10126:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
    p_cb->p_context       = p_context;
   1012a:	f8cc 3004 	str.w	r3, [ip, #4]
    p_cb->int_mask        = 0;
   1012e:	2300      	movs	r3, #0
   10130:	f8cc 3008 	str.w	r3, [ip, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   10134:	f88c 302d 	strb.w	r3, [ip, #45]	; 0x2d
    p_cb->repeated        = false;
   10138:	f88c 3031 	strb.w	r3, [ip, #49]	; 0x31
    p_cb->busy            = false;
   1013c:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   10140:	7b4b      	ldrb	r3, [r1, #13]
   10142:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   10146:	7b8b      	ldrb	r3, [r1, #14]
   10148:	f88c 3039 	strb.w	r3, [ip, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   1014c:	b98b      	cbnz	r3, 10172 <nrfx_twi_init+0x6a>
        TWI_PIN_INIT(p_config->scl);
   1014e:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   10150:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   10154:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   10158:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1015c:	f240 670c 	movw	r7, #1548	; 0x60c
   10160:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   10164:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
   10166:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1016a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1016e:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   10172:	7bcb      	ldrb	r3, [r1, #15]
   10174:	b92b      	cbnz	r3, 10182 <nrfx_twi_init+0x7a>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   10176:	680d      	ldr	r5, [r1, #0]
   10178:	684b      	ldr	r3, [r1, #4]
    p_reg->PSELSCL = scl_pin;
   1017a:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   1017e:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   10182:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   10184:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
    if (p_cb->handler)
   10188:	b122      	cbz	r2, 10194 <nrfx_twi_init+0x8c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1018a:	6800      	ldr	r0, [r0, #0]
   1018c:	f340 3007 	sbfx	r0, r0, #12, #8
   10190:	f002 fc3e 	bl	12a10 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   10194:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   10198:	4b04      	ldr	r3, [pc, #16]	; (101ac <nrfx_twi_init+0xa4>)
   1019a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1019e:	2201      	movs	r2, #1
   101a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    return err_code;
   101a4:	4802      	ldr	r0, [pc, #8]	; (101b0 <nrfx_twi_init+0xa8>)
}
   101a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   101a8:	4802      	ldr	r0, [pc, #8]	; (101b4 <nrfx_twi_init+0xac>)
   101aa:	e7fc      	b.n	101a6 <nrfx_twi_init+0x9e>
   101ac:	20001c34 	.word	0x20001c34
   101b0:	0bad0000 	.word	0x0bad0000
   101b4:	0bad0005 	.word	0x0bad0005

000101b8 <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   101b8:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   101ba:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   101bc:	2105      	movs	r1, #5
   101be:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   101c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   101c6:	4a03      	ldr	r2, [pc, #12]	; (101d4 <nrfx_twi_enable+0x1c>)
   101c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   101cc:	2202      	movs	r2, #2
   101ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   101d2:	4770      	bx	lr
   101d4:	20001c34 	.word	0x20001c34

000101d8 <nrfx_twi_disable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   101d8:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   101da:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   101dc:	490b      	ldr	r1, [pc, #44]	; (1020c <nrfx_twi_disable+0x34>)
   101de:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   101e2:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   101e6:	f021 0103 	bic.w	r1, r1, #3
   101ea:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   101ee:	2000      	movs	r0, #0
   101f0:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   101f4:	4a06      	ldr	r2, [pc, #24]	; (10210 <nrfx_twi_disable+0x38>)
   101f6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   101fa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   101fe:	f04f 0c01 	mov.w	ip, #1
   10202:	f881 c02e 	strb.w	ip, [r1, #46]	; 0x2e
    p_cb->busy = false;
   10206:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
   1020a:	4770      	bx	lr
   1020c:	00044286 	.word	0x00044286
   10210:	20001c34 	.word	0x20001c34

00010214 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   10214:	b508      	push	{r3, lr}
   10216:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10218:	f890 c004 	ldrb.w	ip, [r0, #4]
   1021c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   10220:	460a      	mov	r2, r1
   10222:	4903      	ldr	r1, [pc, #12]	; (10230 <nrfx_twi_xfer+0x1c>)
   10224:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10228:	6800      	ldr	r0, [r0, #0]
   1022a:	f7ff ff0d 	bl	10048 <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1022e:	bd08      	pop	{r3, pc}
   10230:	20001c34 	.word	0x20001c34

00010234 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   10234:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
   10236:	4902      	ldr	r1, [pc, #8]	; (10240 <nrfx_twi_0_irq_handler+0xc>)
   10238:	4802      	ldr	r0, [pc, #8]	; (10244 <nrfx_twi_0_irq_handler+0x10>)
   1023a:	f004 fe19 	bl	14e70 <twi_irq_handler>
}
   1023e:	bd08      	pop	{r3, pc}
   10240:	20001c34 	.word	0x20001c34
   10244:	40003000 	.word	0x40003000

00010248 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   10248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   1024c:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10250:	f04f 0801 	mov.w	r8, #1
   10254:	fa08 f600 	lsl.w	r6, r8, r0
    p_reg->OUTSET = set_mask;
   10258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1025c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   10260:	f001 071f 	and.w	r7, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10264:	fa08 f807 	lsl.w	r8, r8, r7
    p_reg->OUTSET = set_mask;
   10268:	f8c3 8508 	str.w	r8, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1026c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   10270:	f240 620d 	movw	r2, #1549	; 0x60d
   10274:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   10278:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
   1027c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   10280:	2004      	movs	r0, #4
   10282:	f004 fc03 	bl	14a8c <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   10286:	2400      	movs	r4, #0
   10288:	2c08      	cmp	r4, #8
   1028a:	d816      	bhi.n	102ba <nrfx_twi_twim_bus_recover+0x72>
    return p_reg->IN;
   1028c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   10290:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   10294:	40fb      	lsrs	r3, r7
    {
        if (nrf_gpio_pin_read(sda_pin))
   10296:	f013 0f01 	tst.w	r3, #1
   1029a:	d10e      	bne.n	102ba <nrfx_twi_twim_bus_recover+0x72>
    p_reg->OUTCLR = clr_mask;
   1029c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   102a0:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   102a4:	2004      	movs	r0, #4
   102a6:	f004 fbf1 	bl	14a8c <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   102aa:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   102ae:	2004      	movs	r0, #4
   102b0:	f004 fbec 	bl	14a8c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   102b4:	3401      	adds	r4, #1
   102b6:	b2e4      	uxtb	r4, r4
   102b8:	e7e6      	b.n	10288 <nrfx_twi_twim_bus_recover+0x40>
    p_reg->OUTCLR = clr_mask;
   102ba:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   102be:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   102c2:	2004      	movs	r0, #4
   102c4:	f004 fbe2 	bl	14a8c <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   102c8:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   102cc:	2004      	movs	r0, #4
   102ce:	f004 fbdd 	bl	14a8c <nrfx_busy_wait>
    return p_reg->IN;
   102d2:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   102d6:	40fb      	lsrs	r3, r7

    if (nrf_gpio_pin_read(sda_pin))
   102d8:	f013 0f01 	tst.w	r3, #1
   102dc:	d002      	beq.n	102e4 <nrfx_twi_twim_bus_recover+0x9c>
    {
        return NRFX_SUCCESS;
   102de:	4802      	ldr	r0, [pc, #8]	; (102e8 <nrfx_twi_twim_bus_recover+0xa0>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   102e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INTERNAL;
   102e4:	4801      	ldr	r0, [pc, #4]	; (102ec <nrfx_twi_twim_bus_recover+0xa4>)
   102e6:	e7fb      	b.n	102e0 <nrfx_twi_twim_bus_recover+0x98>
   102e8:	0bad0000 	.word	0x0bad0000
   102ec:	0bad0001 	.word	0x0bad0001

000102f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   102f0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   102f2:	4c14      	ldr	r4, [pc, #80]	; (10344 <_DoInit+0x54>)
   102f4:	2303      	movs	r3, #3
   102f6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   102f8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   102fa:	4a13      	ldr	r2, [pc, #76]	; (10348 <_DoInit+0x58>)
   102fc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   102fe:	4b13      	ldr	r3, [pc, #76]	; (1034c <_DoInit+0x5c>)
   10300:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   10302:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10306:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   10308:	2300      	movs	r3, #0
   1030a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1030c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1030e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   10310:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   10312:	4a0f      	ldr	r2, [pc, #60]	; (10350 <_DoInit+0x60>)
   10314:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   10316:	2210      	movs	r2, #16
   10318:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1031a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1031c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1031e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   10320:	490c      	ldr	r1, [pc, #48]	; (10354 <_DoInit+0x64>)
   10322:	1de0      	adds	r0, r4, #7
   10324:	f002 fc28 	bl	12b78 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   10328:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1032c:	490a      	ldr	r1, [pc, #40]	; (10358 <_DoInit+0x68>)
   1032e:	4620      	mov	r0, r4
   10330:	f002 fc22 	bl	12b78 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   10334:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   10338:	2320      	movs	r3, #32
   1033a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1033c:	f3bf 8f5f 	dmb	sy
}
   10340:	bd10      	pop	{r4, pc}
   10342:	bf00      	nop
   10344:	20002080 	.word	0x20002080
   10348:	00016854 	.word	0x00016854
   1034c:	20001c80 	.word	0x20001c80
   10350:	20001c70 	.word	0x20001c70
   10354:	00016860 	.word	0x00016860
   10358:	00016864 	.word	0x00016864

0001035c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1035c:	4b03      	ldr	r3, [pc, #12]	; (1036c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1035e:	e000      	b.n	10362 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   10360:	3318      	adds	r3, #24
	while (dev < __device_end) {
   10362:	4a03      	ldr	r2, [pc, #12]	; (10370 <z_device_state_init+0x14>)
   10364:	4293      	cmp	r3, r2
   10366:	d3fb      	bcc.n	10360 <z_device_state_init+0x4>
	}
}
   10368:	4770      	bx	lr
   1036a:	bf00      	nop
   1036c:	00015e1c 	.word	0x00015e1c
   10370:	00015ec4 	.word	0x00015ec4

00010374 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   10374:	b570      	push	{r4, r5, r6, lr}
   10376:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10378:	4b12      	ldr	r3, [pc, #72]	; (103c4 <z_sys_init_run_level+0x50>)
   1037a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1037e:	e009      	b.n	10394 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   10380:	4243      	negs	r3, r0
   10382:	e017      	b.n	103b4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   10384:	68ea      	ldr	r2, [r5, #12]
   10386:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   10388:	68ea      	ldr	r2, [r5, #12]
   1038a:	7853      	ldrb	r3, [r2, #1]
   1038c:	f043 0301 	orr.w	r3, r3, #1
   10390:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10392:	3408      	adds	r4, #8
   10394:	1c73      	adds	r3, r6, #1
   10396:	4a0b      	ldr	r2, [pc, #44]	; (103c4 <z_sys_init_run_level+0x50>)
   10398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1039c:	42a3      	cmp	r3, r4
   1039e:	d910      	bls.n	103c2 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   103a0:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   103a2:	b15d      	cbz	r5, 103bc <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   103a4:	6823      	ldr	r3, [r4, #0]
   103a6:	4628      	mov	r0, r5
   103a8:	4798      	blx	r3
			if (rc != 0) {
   103aa:	4603      	mov	r3, r0
   103ac:	2800      	cmp	r0, #0
   103ae:	d0eb      	beq.n	10388 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   103b0:	2800      	cmp	r0, #0
   103b2:	dbe5      	blt.n	10380 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   103b4:	2bff      	cmp	r3, #255	; 0xff
   103b6:	dde5      	ble.n	10384 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   103b8:	23ff      	movs	r3, #255	; 0xff
   103ba:	e7e3      	b.n	10384 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   103bc:	6823      	ldr	r3, [r4, #0]
   103be:	4798      	blx	r3
   103c0:	e7e7      	b.n	10392 <z_sys_init_run_level+0x1e>
		}
	}
}
   103c2:	bd70      	pop	{r4, r5, r6, pc}
   103c4:	00016880 	.word	0x00016880

000103c8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   103c8:	b510      	push	{r4, lr}
   103ca:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   103cc:	23b8      	movs	r3, #184	; 0xb8
   103ce:	4c11      	ldr	r4, [pc, #68]	; (10414 <init_idle_thread+0x4c>)
   103d0:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   103d4:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   103d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   103dc:	4b0e      	ldr	r3, [pc, #56]	; (10418 <init_idle_thread+0x50>)
   103de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
   103e2:	4a0e      	ldr	r2, [pc, #56]	; (1041c <init_idle_thread+0x54>)
   103e4:	9205      	str	r2, [sp, #20]
   103e6:	2201      	movs	r2, #1
   103e8:	9204      	str	r2, [sp, #16]
   103ea:	220f      	movs	r2, #15
   103ec:	9203      	str	r2, [sp, #12]
   103ee:	2200      	movs	r2, #0
   103f0:	9202      	str	r2, [sp, #8]
   103f2:	9201      	str	r2, [sp, #4]
   103f4:	9300      	str	r3, [sp, #0]
   103f6:	4b0a      	ldr	r3, [pc, #40]	; (10420 <init_idle_thread+0x58>)
   103f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   103fc:	4909      	ldr	r1, [pc, #36]	; (10424 <init_idle_thread+0x5c>)
   103fe:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   10402:	4620      	mov	r0, r4
   10404:	f000 f92c 	bl	10660 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10408:	7b63      	ldrb	r3, [r4, #13]
   1040a:	f023 0304 	bic.w	r3, r3, #4
   1040e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   10410:	b006      	add	sp, #24
   10412:	bd10      	pop	{r4, pc}
   10414:	200017d0 	.word	0x200017d0
   10418:	20002128 	.word	0x20002128
   1041c:	00016870 	.word	0x00016870
   10420:	000107bd 	.word	0x000107bd
   10424:	20004140 	.word	0x20004140

00010428 <bg_thread_main>:
{
   10428:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1042a:	4b0a      	ldr	r3, [pc, #40]	; (10454 <bg_thread_main+0x2c>)
   1042c:	2201      	movs	r2, #1
   1042e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   10430:	2003      	movs	r0, #3
   10432:	f7ff ff9f 	bl	10374 <z_sys_init_run_level>
	boot_banner();
   10436:	f001 fae1 	bl	119fc <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1043a:	2004      	movs	r0, #4
   1043c:	f7ff ff9a 	bl	10374 <z_sys_init_run_level>
	z_init_static_threads();
   10440:	f000 f972 	bl	10728 <z_init_static_threads>
	(void)main();
   10444:	f7fa fb20 	bl	aa88 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10448:	4a03      	ldr	r2, [pc, #12]	; (10458 <bg_thread_main+0x30>)
   1044a:	7b13      	ldrb	r3, [r2, #12]
   1044c:	f023 0301 	bic.w	r3, r3, #1
   10450:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10452:	bd08      	pop	{r3, pc}
   10454:	20002186 	.word	0x20002186
   10458:	20001888 	.word	0x20001888

0001045c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1045c:	b508      	push	{r3, lr}
   1045e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10460:	4a01      	ldr	r2, [pc, #4]	; (10468 <switch_to_main_thread+0xc>)
   10462:	4802      	ldr	r0, [pc, #8]	; (1046c <switch_to_main_thread+0x10>)
   10464:	f7fb fdce 	bl	c004 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10468:	00010429 	.word	0x00010429
   1046c:	20001888 	.word	0x20001888

00010470 <z_bss_zero>:
{
   10470:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   10472:	4803      	ldr	r0, [pc, #12]	; (10480 <z_bss_zero+0x10>)
   10474:	4a03      	ldr	r2, [pc, #12]	; (10484 <z_bss_zero+0x14>)
   10476:	1a12      	subs	r2, r2, r0
   10478:	2100      	movs	r1, #0
   1047a:	f004 fd95 	bl	14fa8 <z_early_memset>
}
   1047e:	bd08      	pop	{r3, pc}
   10480:	20000520 	.word	0x20000520
   10484:	20002188 	.word	0x20002188

00010488 <z_init_cpu>:
{
   10488:	b510      	push	{r4, lr}
   1048a:	4604      	mov	r4, r0
	init_idle_thread(id);
   1048c:	f7ff ff9c 	bl	103c8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   10490:	23b8      	movs	r3, #184	; 0xb8
   10492:	490b      	ldr	r1, [pc, #44]	; (104c0 <z_init_cpu+0x38>)
   10494:	fb03 1104 	mla	r1, r3, r4, r1
   10498:	4a0a      	ldr	r2, [pc, #40]	; (104c4 <z_init_cpu+0x3c>)
   1049a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1049e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   104a2:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   104a4:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   104a6:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   104aa:	4b07      	ldr	r3, [pc, #28]	; (104c8 <z_init_cpu+0x40>)
   104ac:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   104b0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   104b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   104b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   104bc:	6053      	str	r3, [r2, #4]
}
   104be:	bd10      	pop	{r4, pc}
   104c0:	200017d0 	.word	0x200017d0
   104c4:	20002128 	.word	0x20002128
   104c8:	20003900 	.word	0x20003900

000104cc <prepare_multithreading>:
{
   104cc:	b570      	push	{r4, r5, r6, lr}
   104ce:	b086      	sub	sp, #24
	z_sched_init();
   104d0:	f000 fef2 	bl	112b8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   104d4:	4d10      	ldr	r5, [pc, #64]	; (10518 <prepare_multithreading+0x4c>)
   104d6:	4b11      	ldr	r3, [pc, #68]	; (1051c <prepare_multithreading+0x50>)
   104d8:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   104da:	4b11      	ldr	r3, [pc, #68]	; (10520 <prepare_multithreading+0x54>)
   104dc:	9305      	str	r3, [sp, #20]
   104de:	2301      	movs	r3, #1
   104e0:	9304      	str	r3, [sp, #16]
   104e2:	2400      	movs	r4, #0
   104e4:	9403      	str	r4, [sp, #12]
   104e6:	9402      	str	r4, [sp, #8]
   104e8:	9401      	str	r4, [sp, #4]
   104ea:	9400      	str	r4, [sp, #0]
   104ec:	4b0d      	ldr	r3, [pc, #52]	; (10524 <prepare_multithreading+0x58>)
   104ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   104f2:	490d      	ldr	r1, [pc, #52]	; (10528 <prepare_multithreading+0x5c>)
   104f4:	4628      	mov	r0, r5
   104f6:	f000 f8b3 	bl	10660 <z_setup_new_thread>
   104fa:	4606      	mov	r6, r0
   104fc:	7b6b      	ldrb	r3, [r5, #13]
   104fe:	f023 0304 	bic.w	r3, r3, #4
   10502:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   10504:	4628      	mov	r0, r5
   10506:	f005 f8aa 	bl	1565e <z_ready_thread>
	z_init_cpu(0);
   1050a:	4620      	mov	r0, r4
   1050c:	f7ff ffbc 	bl	10488 <z_init_cpu>
}
   10510:	4630      	mov	r0, r6
   10512:	b006      	add	sp, #24
   10514:	bd70      	pop	{r4, r5, r6, pc}
   10516:	bf00      	nop
   10518:	20001888 	.word	0x20001888
   1051c:	20002128 	.word	0x20002128
   10520:	00016878 	.word	0x00016878
   10524:	00010429 	.word	0x00010429
   10528:	200042c0 	.word	0x200042c0

0001052c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1052c:	b500      	push	{lr}
   1052e:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   10530:	2000      	movs	r0, #0
   10532:	f7ff ff1f 	bl	10374 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   10536:	4b1e      	ldr	r3, [pc, #120]	; (105b0 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10538:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1053c:	4c1d      	ldr	r4, [pc, #116]	; (105b4 <z_cstart+0x88>)
   1053e:	6963      	ldr	r3, [r4, #20]
   10540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10544:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10546:	23e0      	movs	r3, #224	; 0xe0
   10548:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1054c:	2320      	movs	r3, #32
   1054e:	77e3      	strb	r3, [r4, #31]
   10550:	2500      	movs	r5, #0
   10552:	7625      	strb	r5, [r4, #24]
   10554:	7665      	strb	r5, [r4, #25]
   10556:	76a5      	strb	r5, [r4, #26]
   10558:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1055c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1055e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10562:	6263      	str	r3, [r4, #36]	; 0x24
   10564:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   10568:	f7fb ff16 	bl	c398 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1056c:	f7fb fc1a 	bl	bda4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10570:	f04f 33ff 	mov.w	r3, #4294967295
   10574:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10576:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   10578:	f7fc f830 	bl	c5dc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1057c:	f7fb ffc0 	bl	c500 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   10580:	2401      	movs	r4, #1
   10582:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   10586:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1058a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1058c:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   1058e:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   10590:	4b09      	ldr	r3, [pc, #36]	; (105b8 <z_cstart+0x8c>)
   10592:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10596:	f7ff fee1 	bl	1035c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1059a:	4620      	mov	r0, r4
   1059c:	f7ff feea 	bl	10374 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   105a0:	2002      	movs	r0, #2
   105a2:	f7ff fee7 	bl	10374 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   105a6:	f7ff ff91 	bl	104cc <prepare_multithreading>
   105aa:	f7ff ff57 	bl	1045c <switch_to_main_thread>
   105ae:	bf00      	nop
   105b0:	20004140 	.word	0x20004140
   105b4:	e000ed00 	.word	0xe000ed00
   105b8:	20002128 	.word	0x20002128

000105bc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   105bc:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   105be:	4c06      	ldr	r4, [pc, #24]	; (105d8 <statics_init+0x1c>)
   105c0:	e005      	b.n	105ce <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   105c2:	68a2      	ldr	r2, [r4, #8]
   105c4:	6861      	ldr	r1, [r4, #4]
   105c6:	4620      	mov	r0, r4
   105c8:	f004 fcf6 	bl	14fb8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   105cc:	3414      	adds	r4, #20
   105ce:	4b03      	ldr	r3, [pc, #12]	; (105dc <statics_init+0x20>)
   105d0:	429c      	cmp	r4, r3
   105d2:	d3f6      	bcc.n	105c2 <statics_init+0x6>
		}
	}
	return 0;
}
   105d4:	2000      	movs	r0, #0
   105d6:	bd10      	pop	{r4, pc}
   105d8:	20000486 	.word	0x20000486
   105dc:	20000486 	.word	0x20000486

000105e0 <z_thread_monitor_exit>:
	__asm__ volatile(
   105e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   105e4:	f3ef 8111 	mrs	r1, BASEPRI
   105e8:	f383 8812 	msr	BASEPRI_MAX, r3
   105ec:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   105f0:	4b0a      	ldr	r3, [pc, #40]	; (1061c <z_thread_monitor_exit+0x3c>)
   105f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   105f4:	4283      	cmp	r3, r0
   105f6:	d104      	bne.n	10602 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   105f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   105fa:	4b08      	ldr	r3, [pc, #32]	; (1061c <z_thread_monitor_exit+0x3c>)
   105fc:	625a      	str	r2, [r3, #36]	; 0x24
   105fe:	e007      	b.n	10610 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   10600:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   10602:	b113      	cbz	r3, 1060a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   10604:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   10606:	4282      	cmp	r2, r0
   10608:	d1fa      	bne.n	10600 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1060a:	b10b      	cbz	r3, 10610 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1060c:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1060e:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   10610:	f381 8811 	msr	BASEPRI, r1
   10614:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   10618:	4770      	bx	lr
   1061a:	bf00      	nop
   1061c:	20002128 	.word	0x20002128

00010620 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   10620:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   10622:	4604      	mov	r4, r0
   10624:	b140      	cbz	r0, 10638 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   10626:	221f      	movs	r2, #31
   10628:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1062c:	f002 faae 	bl	12b8c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   10630:	2000      	movs	r0, #0
   10632:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   10636:	bd10      	pop	{r4, pc}
		thread = _current;
   10638:	4b01      	ldr	r3, [pc, #4]	; (10640 <z_impl_k_thread_name_set+0x20>)
   1063a:	689c      	ldr	r4, [r3, #8]
   1063c:	e7f3      	b.n	10626 <z_impl_k_thread_name_set+0x6>
   1063e:	bf00      	nop
   10640:	20002128 	.word	0x20002128

00010644 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   10644:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10646:	ea53 0102 	orrs.w	r1, r3, r2
   1064a:	d102      	bne.n	10652 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   1064c:	f004 fd48 	bl	150e0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   10650:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10652:	4902      	ldr	r1, [pc, #8]	; (1065c <schedule_new_thread+0x18>)
   10654:	3018      	adds	r0, #24
   10656:	f000 ff81 	bl	1155c <z_add_timeout>
   1065a:	e7f9      	b.n	10650 <schedule_new_thread+0xc>
   1065c:	000156eb 	.word	0x000156eb

00010660 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10664:	b085      	sub	sp, #20
   10666:	4604      	mov	r4, r0
   10668:	460f      	mov	r7, r1
   1066a:	4615      	mov	r5, r2
   1066c:	461e      	mov	r6, r3
   1066e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   10672:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   10676:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1067a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1067e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   10682:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   10684:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   10686:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10688:	2204      	movs	r2, #4
   1068a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1068c:	f004 fd2c 	bl	150e8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   10690:	462a      	mov	r2, r5
   10692:	4639      	mov	r1, r7
   10694:	4620      	mov	r0, r4
   10696:	f004 fd0a 	bl	150ae <setup_thread_stack>
   1069a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1069c:	f8cd 8008 	str.w	r8, [sp, #8]
   106a0:	f8cd 9004 	str.w	r9, [sp, #4]
   106a4:	f8cd a000 	str.w	sl, [sp]
   106a8:	4633      	mov	r3, r6
   106aa:	4602      	mov	r2, r0
   106ac:	4639      	mov	r1, r7
   106ae:	4620      	mov	r0, r4
   106b0:	f7fb fc62 	bl	bf78 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   106b4:	2300      	movs	r3, #0
   106b6:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   106b8:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   106ba:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   106be:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   106c2:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   106c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   106ca:	f3ef 8211 	mrs	r2, BASEPRI
   106ce:	f383 8812 	msr	BASEPRI_MAX, r3
   106d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   106d6:	4b13      	ldr	r3, [pc, #76]	; (10724 <z_setup_new_thread+0xc4>)
   106d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
   106da:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   106dc:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
   106de:	f382 8811 	msr	BASEPRI, r2
   106e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   106e6:	f1bb 0f00 	cmp.w	fp, #0
   106ea:	d013      	beq.n	10714 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   106ec:	221f      	movs	r2, #31
   106ee:	4659      	mov	r1, fp
   106f0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   106f4:	f002 fa4a 	bl	12b8c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   106f8:	2300      	movs	r3, #0
   106fa:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   106fe:	4b09      	ldr	r3, [pc, #36]	; (10724 <z_setup_new_thread+0xc4>)
   10700:	689b      	ldr	r3, [r3, #8]
   10702:	b15b      	cbz	r3, 1071c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   10704:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   10708:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1070c:	4628      	mov	r0, r5
   1070e:	b005      	add	sp, #20
   10710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   10714:	2300      	movs	r3, #0
   10716:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1071a:	e7f0      	b.n	106fe <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1071c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   10720:	e7f4      	b.n	1070c <z_setup_new_thread+0xac>
   10722:	bf00      	nop
   10724:	20002128 	.word	0x20002128

00010728 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   10728:	b530      	push	{r4, r5, lr}
   1072a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1072c:	4c21      	ldr	r4, [pc, #132]	; (107b4 <z_init_static_threads+0x8c>)
   1072e:	e014      	b.n	1075a <z_init_static_threads+0x32>
		z_setup_new_thread(
   10730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10732:	9305      	str	r3, [sp, #20]
   10734:	6a23      	ldr	r3, [r4, #32]
   10736:	9304      	str	r3, [sp, #16]
   10738:	69e3      	ldr	r3, [r4, #28]
   1073a:	9303      	str	r3, [sp, #12]
   1073c:	69a3      	ldr	r3, [r4, #24]
   1073e:	9302      	str	r3, [sp, #8]
   10740:	6963      	ldr	r3, [r4, #20]
   10742:	9301      	str	r3, [sp, #4]
   10744:	6923      	ldr	r3, [r4, #16]
   10746:	9300      	str	r3, [sp, #0]
   10748:	68e3      	ldr	r3, [r4, #12]
   1074a:	68a2      	ldr	r2, [r4, #8]
   1074c:	6861      	ldr	r1, [r4, #4]
   1074e:	6820      	ldr	r0, [r4, #0]
   10750:	f7ff ff86 	bl	10660 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   10754:	6823      	ldr	r3, [r4, #0]
   10756:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   10758:	342c      	adds	r4, #44	; 0x2c
   1075a:	4b17      	ldr	r3, [pc, #92]	; (107b8 <z_init_static_threads+0x90>)
   1075c:	429c      	cmp	r4, r3
   1075e:	d3e7      	bcc.n	10730 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   10760:	f000 fb6c 	bl	10e3c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10764:	4c13      	ldr	r4, [pc, #76]	; (107b4 <z_init_static_threads+0x8c>)
   10766:	e000      	b.n	1076a <z_init_static_threads+0x42>
   10768:	342c      	adds	r4, #44	; 0x2c
   1076a:	4b13      	ldr	r3, [pc, #76]	; (107b8 <z_init_static_threads+0x90>)
   1076c:	429c      	cmp	r4, r3
   1076e:	d21c      	bcs.n	107aa <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10770:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10772:	f1b0 3fff 	cmp.w	r0, #4294967295
   10776:	d0f7      	beq.n	10768 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   10778:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1077a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1077e:	17c1      	asrs	r1, r0, #31
   10780:	03c9      	lsls	r1, r1, #15
   10782:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10786:	03c0      	lsls	r0, r0, #15
   10788:	f240 33e7 	movw	r3, #999	; 0x3e7
   1078c:	18c0      	adds	r0, r0, r3
   1078e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10792:	f04f 0300 	mov.w	r3, #0
   10796:	f141 0100 	adc.w	r1, r1, #0
   1079a:	f7f0 f895 	bl	8c8 <__aeabi_uldivmod>
   1079e:	4602      	mov	r2, r0
   107a0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   107a2:	4628      	mov	r0, r5
   107a4:	f7ff ff4e 	bl	10644 <schedule_new_thread>
   107a8:	e7de      	b.n	10768 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   107aa:	f000 fd33 	bl	11214 <k_sched_unlock>
}
   107ae:	b007      	add	sp, #28
   107b0:	bd30      	pop	{r4, r5, pc}
   107b2:	bf00      	nop
   107b4:	00015ffc 	.word	0x00015ffc
   107b8:	00016054 	.word	0x00016054

000107bc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   107bc:	b508      	push	{r3, lr}
   107be:	e001      	b.n	107c4 <idle+0x8>
	arch_cpu_idle();
   107c0:	f7fb faf6 	bl	bdb0 <arch_cpu_idle>
	__asm__ volatile(
   107c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   107c8:	f3ef 8311 	mrs	r3, BASEPRI
   107cc:	f382 8812 	msr	BASEPRI_MAX, r2
   107d0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   107d4:	f005 f8af 	bl	15936 <z_get_next_timeout_expiry>
   107d8:	4b05      	ldr	r3, [pc, #20]	; (107f0 <idle+0x34>)
   107da:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
   107dc:	4b05      	ldr	r3, [pc, #20]	; (107f4 <idle+0x38>)
   107de:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   107e0:	2b00      	cmp	r3, #0
   107e2:	d0ed      	beq.n	107c0 <idle+0x4>
   107e4:	f7fb fa08 	bl	bbf8 <pm_system_suspend>
   107e8:	2800      	cmp	r0, #0
   107ea:	d1eb      	bne.n	107c4 <idle+0x8>
   107ec:	e7e8      	b.n	107c0 <idle+0x4>
   107ee:	bf00      	nop
   107f0:	20002128 	.word	0x20002128
   107f4:	20002186 	.word	0x20002186

000107f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107fc:	b082      	sub	sp, #8
   107fe:	4604      	mov	r4, r0
   10800:	461e      	mov	r6, r3
   10802:	f04f 0340 	mov.w	r3, #64	; 0x40
   10806:	f3ef 8511 	mrs	r5, BASEPRI
   1080a:	f383 8812 	msr	BASEPRI_MAX, r3
   1080e:	f3bf 8f6f 	isb	sy
   10812:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10814:	68c1      	ldr	r1, [r0, #12]
   10816:	b999      	cbnz	r1, 10840 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   10818:	2900      	cmp	r1, #0
   1081a:	d151      	bne.n	108c0 <z_impl_k_mutex_lock+0xc8>
   1081c:	4a36      	ldr	r2, [pc, #216]	; (108f8 <z_impl_k_mutex_lock+0x100>)
   1081e:	6892      	ldr	r2, [r2, #8]
   10820:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10824:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   10826:	3101      	adds	r1, #1
   10828:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1082a:	4a33      	ldr	r2, [pc, #204]	; (108f8 <z_impl_k_mutex_lock+0x100>)
   1082c:	6892      	ldr	r2, [r2, #8]
   1082e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   10830:	f383 8811 	msr	BASEPRI, r3
   10834:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   10838:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1083a:	b002      	add	sp, #8
   1083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10840:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10842:	6880      	ldr	r0, [r0, #8]
   10844:	4a2c      	ldr	r2, [pc, #176]	; (108f8 <z_impl_k_mutex_lock+0x100>)
   10846:	6892      	ldr	r2, [r2, #8]
   10848:	4290      	cmp	r0, r2
   1084a:	d0e5      	beq.n	10818 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1084c:	ea56 0107 	orrs.w	r1, r6, r7
   10850:	d038      	beq.n	108c4 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   10852:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10856:	4641      	mov	r1, r8
   10858:	f992 000e 	ldrsb.w	r0, [r2, #14]
   1085c:	f004 fc77 	bl	1514e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10860:	4580      	cmp	r8, r0
   10862:	dc36      	bgt.n	108d2 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   10864:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   10868:	9700      	str	r7, [sp, #0]
   1086a:	9601      	str	r6, [sp, #4]
   1086c:	4622      	mov	r2, r4
   1086e:	4629      	mov	r1, r5
   10870:	4822      	ldr	r0, [pc, #136]	; (108fc <z_impl_k_mutex_lock+0x104>)
   10872:	f000 fc1b 	bl	110ac <z_pend_curr>
	if (got_mutex == 0) {
   10876:	2800      	cmp	r0, #0
   10878:	d0df      	beq.n	1083a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   1087a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1087e:	f3ef 8511 	mrs	r5, BASEPRI
   10882:	f383 8812 	msr	BASEPRI_MAX, r3
   10886:	f3bf 8f6f 	isb	sy
   1088a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   1088c:	68a3      	ldr	r3, [r4, #8]
   1088e:	b343      	cbz	r3, 108e2 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10890:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10892:	429c      	cmp	r4, r3
   10894:	d023      	beq.n	108de <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10896:	b313      	cbz	r3, 108de <z_impl_k_mutex_lock+0xe6>
   10898:	6921      	ldr	r1, [r4, #16]
   1089a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1089e:	f004 fc56 	bl	1514e <new_prio_for_inheritance>
   108a2:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   108a4:	4620      	mov	r0, r4
   108a6:	f004 fc5d 	bl	15164 <adjust_owner_prio>
   108aa:	b9e8      	cbnz	r0, 108e8 <z_impl_k_mutex_lock+0xf0>
   108ac:	f1b8 0f00 	cmp.w	r8, #0
   108b0:	d11a      	bne.n	108e8 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   108b2:	f386 8811 	msr	BASEPRI, r6
   108b6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   108ba:	f06f 000a 	mvn.w	r0, #10
   108be:	e7bc      	b.n	1083a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   108c0:	6922      	ldr	r2, [r4, #16]
   108c2:	e7af      	b.n	10824 <z_impl_k_mutex_lock+0x2c>
   108c4:	f385 8811 	msr	BASEPRI, r5
   108c8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   108cc:	f06f 000f 	mvn.w	r0, #15
   108d0:	e7b3      	b.n	1083a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   108d2:	4601      	mov	r1, r0
   108d4:	4620      	mov	r0, r4
   108d6:	f004 fc45 	bl	15164 <adjust_owner_prio>
   108da:	4680      	mov	r8, r0
   108dc:	e7c4      	b.n	10868 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   108de:	6921      	ldr	r1, [r4, #16]
   108e0:	e7e0      	b.n	108a4 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   108e2:	f1b8 0f00 	cmp.w	r8, #0
   108e6:	d0e4      	beq.n	108b2 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   108e8:	4629      	mov	r1, r5
   108ea:	4804      	ldr	r0, [pc, #16]	; (108fc <z_impl_k_mutex_lock+0x104>)
   108ec:	f000 fa90 	bl	10e10 <z_reschedule>
	return -EAGAIN;
   108f0:	f06f 000a 	mvn.w	r0, #10
   108f4:	e7a1      	b.n	1083a <z_impl_k_mutex_lock+0x42>
   108f6:	bf00      	nop
   108f8:	20002128 	.word	0x20002128
   108fc:	20002150 	.word	0x20002150

00010900 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10900:	6883      	ldr	r3, [r0, #8]
   10902:	b38b      	cbz	r3, 10968 <z_impl_k_mutex_unlock+0x68>
{
   10904:	b570      	push	{r4, r5, r6, lr}
   10906:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10908:	4a1a      	ldr	r2, [pc, #104]	; (10974 <z_impl_k_mutex_unlock+0x74>)
   1090a:	6892      	ldr	r2, [r2, #8]
   1090c:	4293      	cmp	r3, r2
   1090e:	d12e      	bne.n	1096e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10910:	68c3      	ldr	r3, [r0, #12]
   10912:	2b01      	cmp	r3, #1
   10914:	d903      	bls.n	1091e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   10916:	3b01      	subs	r3, #1
   10918:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1091a:	2000      	movs	r0, #0
}
   1091c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1091e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10922:	f3ef 8511 	mrs	r5, BASEPRI
   10926:	f383 8812 	msr	BASEPRI_MAX, r3
   1092a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1092e:	6901      	ldr	r1, [r0, #16]
   10930:	f004 fc18 	bl	15164 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10934:	4620      	mov	r0, r4
   10936:	f004 ff48 	bl	157ca <z_unpend_first_thread>
	mutex->owner = new_owner;
   1093a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1093c:	b168      	cbz	r0, 1095a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   1093e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10942:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10944:	2400      	movs	r4, #0
   10946:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1094a:	f004 fe88 	bl	1565e <z_ready_thread>
		z_reschedule(&lock, key);
   1094e:	4629      	mov	r1, r5
   10950:	4809      	ldr	r0, [pc, #36]	; (10978 <z_impl_k_mutex_unlock+0x78>)
   10952:	f000 fa5d 	bl	10e10 <z_reschedule>
	return 0;
   10956:	4620      	mov	r0, r4
   10958:	e7e0      	b.n	1091c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   1095a:	2000      	movs	r0, #0
   1095c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1095e:	f385 8811 	msr	BASEPRI, r5
   10962:	f3bf 8f6f 	isb	sy
   10966:	e7d9      	b.n	1091c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   10968:	f06f 0015 	mvn.w	r0, #21
}
   1096c:	4770      	bx	lr
		return -EPERM;
   1096e:	f04f 30ff 	mov.w	r0, #4294967295
   10972:	e7d3      	b.n	1091c <z_impl_k_mutex_unlock+0x1c>
   10974:	20002128 	.word	0x20002128
   10978:	20002150 	.word	0x20002150

0001097c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1097c:	b510      	push	{r4, lr}
   1097e:	b082      	sub	sp, #8
   10980:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   10982:	4686      	mov	lr, r0
	__asm__ volatile(
   10984:	f04f 0040 	mov.w	r0, #64	; 0x40
   10988:	f3ef 8111 	mrs	r1, BASEPRI
   1098c:	f380 8812 	msr	BASEPRI_MAX, r0
   10990:	f3bf 8f6f 	isb	sy
   10994:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   10996:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1099a:	b1a0      	cbz	r0, 109c6 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1099c:	6803      	ldr	r3, [r0, #0]
   1099e:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   109a2:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   109a6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   109aa:	4290      	cmp	r0, r2
   109ac:	d008      	beq.n	109c0 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   109ae:	2101      	movs	r1, #1
   109b0:	f004 fc67 	bl	15282 <z_queue_node_peek>
	__asm__ volatile(
   109b4:	f384 8811 	msr	BASEPRI, r4
   109b8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   109bc:	b002      	add	sp, #8
   109be:	bd10      	pop	{r4, pc}
	list->tail = node;
   109c0:	f8cc 3004 	str.w	r3, [ip, #4]
}
   109c4:	e7f3      	b.n	109ae <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   109c6:	ea53 0002 	orrs.w	r0, r3, r2
   109ca:	d00a      	beq.n	109e2 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   109cc:	9200      	str	r2, [sp, #0]
   109ce:	9301      	str	r3, [sp, #4]
   109d0:	4672      	mov	r2, lr
   109d2:	4670      	mov	r0, lr
   109d4:	f000 fb6a 	bl	110ac <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   109d8:	b948      	cbnz	r0, 109ee <z_impl_k_queue_get+0x72>
   109da:	4b06      	ldr	r3, [pc, #24]	; (109f4 <z_impl_k_queue_get+0x78>)
   109dc:	689b      	ldr	r3, [r3, #8]
   109de:	6958      	ldr	r0, [r3, #20]
   109e0:	e7ec      	b.n	109bc <z_impl_k_queue_get+0x40>
   109e2:	f381 8811 	msr	BASEPRI, r1
   109e6:	f3bf 8f6f 	isb	sy
		return NULL;
   109ea:	2000      	movs	r0, #0
   109ec:	e7e6      	b.n	109bc <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   109ee:	2000      	movs	r0, #0
   109f0:	e7e4      	b.n	109bc <z_impl_k_queue_get+0x40>
   109f2:	bf00      	nop
   109f4:	20002128 	.word	0x20002128

000109f8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   109f8:	b538      	push	{r3, r4, r5, lr}
   109fa:	4604      	mov	r4, r0
	__asm__ volatile(
   109fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a00:	f3ef 8511 	mrs	r5, BASEPRI
   10a04:	f383 8812 	msr	BASEPRI_MAX, r3
   10a08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10a0c:	f004 fedd 	bl	157ca <z_unpend_first_thread>

	if (thread != NULL) {
   10a10:	b148      	cbz	r0, 10a26 <z_impl_k_sem_give+0x2e>
   10a12:	2200      	movs	r2, #0
   10a14:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10a18:	f004 fe21 	bl	1565e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10a1c:	4629      	mov	r1, r5
   10a1e:	4809      	ldr	r0, [pc, #36]	; (10a44 <z_impl_k_sem_give+0x4c>)
   10a20:	f000 f9f6 	bl	10e10 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10a24:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10a26:	68a3      	ldr	r3, [r4, #8]
   10a28:	68e2      	ldr	r2, [r4, #12]
   10a2a:	4293      	cmp	r3, r2
   10a2c:	d008      	beq.n	10a40 <z_impl_k_sem_give+0x48>
   10a2e:	2201      	movs	r2, #1
   10a30:	4413      	add	r3, r2
   10a32:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10a34:	2102      	movs	r1, #2
   10a36:	f104 0010 	add.w	r0, r4, #16
   10a3a:	f005 f971 	bl	15d20 <z_handle_obj_poll_events>
}
   10a3e:	e7ed      	b.n	10a1c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10a40:	2200      	movs	r2, #0
   10a42:	e7f5      	b.n	10a30 <z_impl_k_sem_give+0x38>
   10a44:	20002150 	.word	0x20002150

00010a48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10a48:	b510      	push	{r4, lr}
   10a4a:	b082      	sub	sp, #8
   10a4c:	f04f 0440 	mov.w	r4, #64	; 0x40
   10a50:	f3ef 8111 	mrs	r1, BASEPRI
   10a54:	f384 8812 	msr	BASEPRI_MAX, r4
   10a58:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10a5c:	6884      	ldr	r4, [r0, #8]
   10a5e:	b144      	cbz	r4, 10a72 <z_impl_k_sem_take+0x2a>
		sem->count--;
   10a60:	3c01      	subs	r4, #1
   10a62:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   10a64:	f381 8811 	msr	BASEPRI, r1
   10a68:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10a6c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10a6e:	b002      	add	sp, #8
   10a70:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10a72:	ea53 0402 	orrs.w	r4, r3, r2
   10a76:	d006      	beq.n	10a86 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10a78:	9200      	str	r2, [sp, #0]
   10a7a:	9301      	str	r3, [sp, #4]
   10a7c:	4602      	mov	r2, r0
   10a7e:	4805      	ldr	r0, [pc, #20]	; (10a94 <z_impl_k_sem_take+0x4c>)
   10a80:	f000 fb14 	bl	110ac <z_pend_curr>
	return ret;
   10a84:	e7f3      	b.n	10a6e <z_impl_k_sem_take+0x26>
   10a86:	f381 8811 	msr	BASEPRI, r1
   10a8a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10a8e:	f06f 000f 	mvn.w	r0, #15
   10a92:	e7ec      	b.n	10a6e <z_impl_k_sem_take+0x26>
   10a94:	20002150 	.word	0x20002150

00010a98 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   10a98:	b370      	cbz	r0, 10af8 <queue_submit_locked+0x60>
{
   10a9a:	b538      	push	{r3, r4, r5, lr}
   10a9c:	460d      	mov	r5, r1
   10a9e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10aa0:	4b1b      	ldr	r3, [pc, #108]	; (10b10 <queue_submit_locked+0x78>)
   10aa2:	689b      	ldr	r3, [r3, #8]
   10aa4:	4283      	cmp	r3, r0
   10aa6:	d01b      	beq.n	10ae0 <queue_submit_locked+0x48>
   10aa8:	2300      	movs	r3, #0
   10aaa:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   10aac:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   10ab0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   10ab4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10ab8:	f013 0f01 	tst.w	r3, #1
   10abc:	d01f      	beq.n	10afe <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   10abe:	b101      	cbz	r1, 10ac2 <queue_submit_locked+0x2a>
   10ac0:	b302      	cbz	r2, 10b04 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   10ac2:	b100      	cbz	r0, 10ac6 <queue_submit_locked+0x2e>
   10ac4:	b309      	cbz	r1, 10b0a <queue_submit_locked+0x72>
	parent->next = child;
   10ac6:	2300      	movs	r3, #0
   10ac8:	602b      	str	r3, [r5, #0]
	return list->tail;
   10aca:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   10ace:	b173      	cbz	r3, 10aee <queue_submit_locked+0x56>
	parent->next = child;
   10ad0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10ad2:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   10ad6:	4620      	mov	r0, r4
   10ad8:	f004 fc5d 	bl	15396 <notify_queue_locked>
		ret = 1;
   10adc:	2001      	movs	r0, #1
	}

	return ret;
}
   10ade:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10ae0:	f004 faf8 	bl	150d4 <k_is_in_isr>
   10ae4:	b908      	cbnz	r0, 10aea <queue_submit_locked+0x52>
   10ae6:	2301      	movs	r3, #1
   10ae8:	e7df      	b.n	10aaa <queue_submit_locked+0x12>
   10aea:	2300      	movs	r3, #0
   10aec:	e7dd      	b.n	10aaa <queue_submit_locked+0x12>
   10aee:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   10af2:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   10af6:	e7ee      	b.n	10ad6 <queue_submit_locked+0x3e>
		return -EINVAL;
   10af8:	f06f 0015 	mvn.w	r0, #21
}
   10afc:	4770      	bx	lr
		ret = -ENODEV;
   10afe:	f06f 0012 	mvn.w	r0, #18
   10b02:	e7ec      	b.n	10ade <queue_submit_locked+0x46>
		ret = -EBUSY;
   10b04:	f06f 000f 	mvn.w	r0, #15
   10b08:	e7e9      	b.n	10ade <queue_submit_locked+0x46>
		ret = -EBUSY;
   10b0a:	f06f 000f 	mvn.w	r0, #15
   10b0e:	e7e6      	b.n	10ade <queue_submit_locked+0x46>
   10b10:	20002128 	.word	0x20002128

00010b14 <finalize_cancel_locked>:
{
   10b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b16:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   10b18:	68c3      	ldr	r3, [r0, #12]
   10b1a:	f023 0302 	bic.w	r3, r3, #2
   10b1e:	60c3      	str	r3, [r0, #12]
	return list->head;
   10b20:	4b13      	ldr	r3, [pc, #76]	; (10b70 <finalize_cancel_locked+0x5c>)
   10b22:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10b24:	b185      	cbz	r5, 10b48 <finalize_cancel_locked+0x34>
	return node->next;
   10b26:	682c      	ldr	r4, [r5, #0]
   10b28:	b104      	cbz	r4, 10b2c <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10b2a:	b10d      	cbz	r5, 10b30 <finalize_cancel_locked+0x1c>
   10b2c:	2700      	movs	r7, #0
   10b2e:	e010      	b.n	10b52 <finalize_cancel_locked+0x3e>
   10b30:	462c      	mov	r4, r5
   10b32:	e7fb      	b.n	10b2c <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   10b34:	462a      	mov	r2, r5
   10b36:	4639      	mov	r1, r7
   10b38:	480d      	ldr	r0, [pc, #52]	; (10b70 <finalize_cancel_locked+0x5c>)
   10b3a:	f004 fbe7 	bl	1530c <sys_slist_remove>
			k_sem_give(&wc->sem);
   10b3e:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   10b42:	f7ff ff59 	bl	109f8 <z_impl_k_sem_give>
}
   10b46:	e009      	b.n	10b5c <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10b48:	462c      	mov	r4, r5
   10b4a:	e7ef      	b.n	10b2c <finalize_cancel_locked+0x18>
   10b4c:	4623      	mov	r3, r4
   10b4e:	4625      	mov	r5, r4
   10b50:	461c      	mov	r4, r3
   10b52:	b165      	cbz	r5, 10b6e <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   10b54:	686b      	ldr	r3, [r5, #4]
   10b56:	42b3      	cmp	r3, r6
   10b58:	d0ec      	beq.n	10b34 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   10b5a:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10b5c:	2c00      	cmp	r4, #0
   10b5e:	d0f5      	beq.n	10b4c <finalize_cancel_locked+0x38>
	return node->next;
   10b60:	6823      	ldr	r3, [r4, #0]
   10b62:	2b00      	cmp	r3, #0
   10b64:	d0f3      	beq.n	10b4e <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10b66:	2c00      	cmp	r4, #0
   10b68:	d1f1      	bne.n	10b4e <finalize_cancel_locked+0x3a>
   10b6a:	4623      	mov	r3, r4
   10b6c:	e7ef      	b.n	10b4e <finalize_cancel_locked+0x3a>
}
   10b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b70:	20002150 	.word	0x20002150

00010b74 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   10b74:	b570      	push	{r4, r5, r6, lr}
   10b76:	b084      	sub	sp, #16
   10b78:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   10b7a:	e016      	b.n	10baa <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   10b7c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   10b80:	f023 0204 	bic.w	r2, r3, #4
   10b84:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   10b88:	f013 0f04 	tst.w	r3, #4
   10b8c:	d15a      	bne.n	10c44 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   10b8e:	2300      	movs	r3, #0
   10b90:	9302      	str	r3, [sp, #8]
   10b92:	f04f 32ff 	mov.w	r2, #4294967295
   10b96:	f04f 33ff 	mov.w	r3, #4294967295
   10b9a:	e9cd 2300 	strd	r2, r3, [sp]
   10b9e:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   10ba2:	4631      	mov	r1, r6
   10ba4:	482e      	ldr	r0, [pc, #184]	; (10c60 <work_queue_main+0xec>)
   10ba6:	f000 fc89 	bl	114bc <z_sched_wait>
	__asm__ volatile(
   10baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   10bae:	f3ef 8611 	mrs	r6, BASEPRI
   10bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   10bb6:	f3bf 8f6f 	isb	sy
   10bba:	4632      	mov	r2, r6
	return list->head;
   10bbc:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   10bc0:	2c00      	cmp	r4, #0
   10bc2:	d0db      	beq.n	10b7c <work_queue_main+0x8>
	return node->next;
   10bc4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   10bc6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   10bca:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10bce:	428c      	cmp	r4, r1
   10bd0:	d035      	beq.n	10c3e <work_queue_main+0xca>
	*flagp |= BIT(bit);
   10bd2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   10bd6:	f043 0302 	orr.w	r3, r3, #2
   10bda:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   10bde:	68e3      	ldr	r3, [r4, #12]
   10be0:	f043 0101 	orr.w	r1, r3, #1
   10be4:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   10be6:	f023 0304 	bic.w	r3, r3, #4
   10bea:	f043 0301 	orr.w	r3, r3, #1
   10bee:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   10bf0:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   10bf2:	f382 8811 	msr	BASEPRI, r2
   10bf6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   10bfa:	4620      	mov	r0, r4
   10bfc:	4798      	blx	r3
	__asm__ volatile(
   10bfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c02:	f3ef 8611 	mrs	r6, BASEPRI
   10c06:	f383 8812 	msr	BASEPRI_MAX, r3
   10c0a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   10c0e:	68e3      	ldr	r3, [r4, #12]
   10c10:	f023 0301 	bic.w	r3, r3, #1
   10c14:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10c16:	f013 0f02 	tst.w	r3, #2
   10c1a:	d11d      	bne.n	10c58 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   10c1c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   10c20:	f023 0302 	bic.w	r3, r3, #2
   10c24:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   10c28:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   10c2c:	f386 8811 	msr	BASEPRI, r6
   10c30:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   10c34:	2b00      	cmp	r3, #0
   10c36:	d1b8      	bne.n	10baa <work_queue_main+0x36>
	z_impl_k_yield();
   10c38:	f000 fb46 	bl	112c8 <z_impl_k_yield>
}
   10c3c:	e7b5      	b.n	10baa <work_queue_main+0x36>
	list->tail = node;
   10c3e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   10c42:	e7c6      	b.n	10bd2 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   10c44:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   10c48:	2200      	movs	r2, #0
   10c4a:	2101      	movs	r1, #1
   10c4c:	4620      	mov	r0, r4
   10c4e:	f004 fdf2 	bl	15836 <z_sched_wake>
   10c52:	2800      	cmp	r0, #0
   10c54:	d1f8      	bne.n	10c48 <work_queue_main+0xd4>
   10c56:	e79a      	b.n	10b8e <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   10c58:	4620      	mov	r0, r4
   10c5a:	f7ff ff5b 	bl	10b14 <finalize_cancel_locked>
   10c5e:	e7dd      	b.n	10c1c <work_queue_main+0xa8>
   10c60:	20002158 	.word	0x20002158

00010c64 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   10c64:	b508      	push	{r3, lr}
   10c66:	4684      	mov	ip, r0
   10c68:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10c6a:	ea53 0102 	orrs.w	r1, r3, r2
   10c6e:	d00c      	beq.n	10c8a <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   10c70:	68c1      	ldr	r1, [r0, #12]
   10c72:	f041 0108 	orr.w	r1, r1, #8
   10c76:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   10c78:	f8dc 1000 	ldr.w	r1, [ip]
   10c7c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   10c7e:	4905      	ldr	r1, [pc, #20]	; (10c94 <schedule_for_queue_locked+0x30>)
   10c80:	3010      	adds	r0, #16
   10c82:	f000 fc6b 	bl	1155c <z_add_timeout>

	return ret;
   10c86:	2001      	movs	r0, #1
}
   10c88:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   10c8a:	4661      	mov	r1, ip
   10c8c:	f004 fb8d 	bl	153aa <submit_to_queue_locked>
   10c90:	e7fa      	b.n	10c88 <schedule_for_queue_locked+0x24>
   10c92:	bf00      	nop
   10c94:	0001540b 	.word	0x0001540b

00010c98 <k_work_submit>:
{
   10c98:	b508      	push	{r3, lr}
   10c9a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   10c9c:	4801      	ldr	r0, [pc, #4]	; (10ca4 <k_work_submit+0xc>)
   10c9e:	f004 fc18 	bl	154d2 <k_work_submit_to_queue>
}
   10ca2:	bd08      	pop	{r3, pc}
   10ca4:	20001960 	.word	0x20001960

00010ca8 <k_work_queue_start>:
{
   10ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10caa:	b089      	sub	sp, #36	; 0x24
   10cac:	4604      	mov	r4, r0
   10cae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   10cb0:	2000      	movs	r0, #0
   10cb2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   10cb6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   10cba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   10cbe:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   10cc2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   10cc6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   10cca:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   10cce:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   10cd2:	b1fd      	cbz	r5, 10d14 <k_work_queue_start+0x6c>
   10cd4:	7928      	ldrb	r0, [r5, #4]
   10cd6:	b9f8      	cbnz	r0, 10d18 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10cd8:	2001      	movs	r0, #1
	*flagp = flags;
   10cda:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10cde:	f04f 36ff 	mov.w	r6, #4294967295
   10ce2:	f04f 37ff 	mov.w	r7, #4294967295
   10ce6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   10cea:	2000      	movs	r0, #0
   10cec:	9004      	str	r0, [sp, #16]
   10cee:	9303      	str	r3, [sp, #12]
   10cf0:	9002      	str	r0, [sp, #8]
   10cf2:	9001      	str	r0, [sp, #4]
   10cf4:	9400      	str	r4, [sp, #0]
   10cf6:	4b0a      	ldr	r3, [pc, #40]	; (10d20 <k_work_queue_start+0x78>)
   10cf8:	4620      	mov	r0, r4
   10cfa:	f004 fa00 	bl	150fe <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   10cfe:	b125      	cbz	r5, 10d0a <k_work_queue_start+0x62>
   10d00:	6829      	ldr	r1, [r5, #0]
   10d02:	b111      	cbz	r1, 10d0a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   10d04:	4620      	mov	r0, r4
   10d06:	f7ff fc8b 	bl	10620 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   10d0a:	4620      	mov	r0, r4
   10d0c:	f004 f9e8 	bl	150e0 <z_impl_k_thread_start>
}
   10d10:	b009      	add	sp, #36	; 0x24
   10d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10d14:	2001      	movs	r0, #1
   10d16:	e7e0      	b.n	10cda <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   10d18:	f240 1001 	movw	r0, #257	; 0x101
   10d1c:	e7dd      	b.n	10cda <k_work_queue_start+0x32>
   10d1e:	bf00      	nop
   10d20:	00010b75 	.word	0x00010b75

00010d24 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   10d24:	b508      	push	{r3, lr}
   10d26:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   10d28:	4801      	ldr	r0, [pc, #4]	; (10d30 <k_work_reschedule+0xc>)
   10d2a:	f004 fbee 	bl	1550a <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   10d2e:	bd08      	pop	{r3, pc}
   10d30:	20001960 	.word	0x20001960

00010d34 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   10d34:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   10d36:	2b7f      	cmp	r3, #127	; 0x7f
   10d38:	d811      	bhi.n	10d5e <sliceable+0x2a>
	int ret = slice_ticks;
   10d3a:	4b0e      	ldr	r3, [pc, #56]	; (10d74 <sliceable+0x40>)
   10d3c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   10d3e:	b17b      	cbz	r3, 10d60 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10d40:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10d44:	4b0c      	ldr	r3, [pc, #48]	; (10d78 <sliceable+0x44>)
   10d46:	681b      	ldr	r3, [r3, #0]
   10d48:	429a      	cmp	r2, r3
   10d4a:	db0c      	blt.n	10d66 <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   10d4c:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   10d4e:	f013 0f1f 	tst.w	r3, #31
   10d52:	d10a      	bne.n	10d6a <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   10d54:	4b09      	ldr	r3, [pc, #36]	; (10d7c <sliceable+0x48>)
   10d56:	4298      	cmp	r0, r3
   10d58:	d009      	beq.n	10d6e <sliceable+0x3a>
   10d5a:	2301      	movs	r3, #1
   10d5c:	e000      	b.n	10d60 <sliceable+0x2c>
   10d5e:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   10d60:	f003 0001 	and.w	r0, r3, #1
   10d64:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   10d66:	2300      	movs	r3, #0
   10d68:	e7fa      	b.n	10d60 <sliceable+0x2c>
   10d6a:	2300      	movs	r3, #0
   10d6c:	e7f8      	b.n	10d60 <sliceable+0x2c>
   10d6e:	2300      	movs	r3, #0
   10d70:	e7f6      	b.n	10d60 <sliceable+0x2c>
   10d72:	bf00      	nop
   10d74:	20002164 	.word	0x20002164
   10d78:	20002160 	.word	0x20002160
   10d7c:	200017d0 	.word	0x200017d0

00010d80 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   10d80:	4b04      	ldr	r3, [pc, #16]	; (10d94 <slice_timeout+0x14>)
   10d82:	1ac0      	subs	r0, r0, r3
   10d84:	10c0      	asrs	r0, r0, #3
   10d86:	4b04      	ldr	r3, [pc, #16]	; (10d98 <slice_timeout+0x18>)
   10d88:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   10d8c:	4b03      	ldr	r3, [pc, #12]	; (10d9c <slice_timeout+0x1c>)
   10d8e:	2201      	movs	r2, #1
   10d90:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   10d92:	4770      	bx	lr
   10d94:	20001940 	.word	0x20001940
   10d98:	aaaaaaab 	.word	0xaaaaaaab
   10d9c:	2000215c 	.word	0x2000215c

00010da0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10da0:	f1b3 3fff 	cmp.w	r3, #4294967295
   10da4:	bf08      	it	eq
   10da6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10daa:	d100      	bne.n	10dae <add_thread_timeout+0xe>
   10dac:	4770      	bx	lr
{
   10dae:	b508      	push	{r3, lr}
   10db0:	4902      	ldr	r1, [pc, #8]	; (10dbc <add_thread_timeout+0x1c>)
   10db2:	3018      	adds	r0, #24
   10db4:	f000 fbd2 	bl	1155c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   10db8:	bd08      	pop	{r3, pc}
   10dba:	bf00      	nop
   10dbc:	000156eb 	.word	0x000156eb

00010dc0 <z_reset_time_slice>:
{
   10dc0:	b570      	push	{r4, r5, r6, lr}
   10dc2:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   10dc4:	4b0d      	ldr	r3, [pc, #52]	; (10dfc <z_reset_time_slice+0x3c>)
   10dc6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   10dc8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10dcc:	4c0c      	ldr	r4, [pc, #48]	; (10e00 <z_reset_time_slice+0x40>)
   10dce:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   10dd2:	4620      	mov	r0, r4
   10dd4:	f004 fd91 	bl	158fa <z_abort_timeout>
	slice_expired[cpu] = false;
   10dd8:	4b0a      	ldr	r3, [pc, #40]	; (10e04 <z_reset_time_slice+0x44>)
   10dda:	2200      	movs	r2, #0
   10ddc:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   10dde:	4628      	mov	r0, r5
   10de0:	f7ff ffa8 	bl	10d34 <sliceable>
   10de4:	b900      	cbnz	r0, 10de8 <z_reset_time_slice+0x28>
}
   10de6:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   10de8:	4b07      	ldr	r3, [pc, #28]	; (10e08 <z_reset_time_slice+0x48>)
   10dea:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   10dec:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   10dee:	17d3      	asrs	r3, r2, #31
   10df0:	4906      	ldr	r1, [pc, #24]	; (10e0c <z_reset_time_slice+0x4c>)
   10df2:	4620      	mov	r0, r4
   10df4:	f000 fbb2 	bl	1155c <z_add_timeout>
}
   10df8:	e7f5      	b.n	10de6 <z_reset_time_slice+0x26>
   10dfa:	bf00      	nop
   10dfc:	20002128 	.word	0x20002128
   10e00:	20001940 	.word	0x20001940
   10e04:	2000215c 	.word	0x2000215c
   10e08:	20002164 	.word	0x20002164
   10e0c:	00010d81 	.word	0x00010d81

00010e10 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   10e10:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   10e12:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10e14:	b959      	cbnz	r1, 10e2e <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10e16:	f3ef 8205 	mrs	r2, IPSR
   10e1a:	b942      	cbnz	r2, 10e2e <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   10e1c:	4a06      	ldr	r2, [pc, #24]	; (10e38 <z_reschedule+0x28>)
   10e1e:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
   10e20:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   10e22:	4290      	cmp	r0, r2
   10e24:	d003      	beq.n	10e2e <z_reschedule+0x1e>
	ret = arch_swap(key);
   10e26:	4608      	mov	r0, r1
   10e28:	f7fb f84e 	bl	bec8 <arch_swap>
		z_swap(lock, key);
   10e2c:	e003      	b.n	10e36 <z_reschedule+0x26>
   10e2e:	f383 8811 	msr	BASEPRI, r3
   10e32:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   10e36:	bd08      	pop	{r3, pc}
   10e38:	20002128 	.word	0x20002128

00010e3c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   10e3c:	2300      	movs	r3, #0
	__asm__ volatile(
   10e3e:	f04f 0240 	mov.w	r2, #64	; 0x40
   10e42:	f3ef 8111 	mrs	r1, BASEPRI
   10e46:	f382 8812 	msr	BASEPRI_MAX, r2
   10e4a:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   10e4e:	e009      	b.n	10e64 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   10e50:	4b06      	ldr	r3, [pc, #24]	; (10e6c <k_sched_lock+0x30>)
   10e52:	689a      	ldr	r2, [r3, #8]
   10e54:	7bd3      	ldrb	r3, [r2, #15]
   10e56:	3b01      	subs	r3, #1
   10e58:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10e5a:	f381 8811 	msr	BASEPRI, r1
   10e5e:	f3bf 8f6f 	isb	sy
   10e62:	2301      	movs	r3, #1
   10e64:	2b00      	cmp	r3, #0
   10e66:	d0f3      	beq.n	10e50 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   10e68:	4770      	bx	lr
   10e6a:	bf00      	nop
   10e6c:	20002128 	.word	0x20002128

00010e70 <update_cache>:
{
   10e70:	b538      	push	{r3, r4, r5, lr}
   10e72:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   10e74:	4810      	ldr	r0, [pc, #64]	; (10eb8 <update_cache+0x48>)
   10e76:	f004 fbeb 	bl	15650 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10e7a:	4605      	mov	r5, r0
   10e7c:	b170      	cbz	r0, 10e9c <update_cache+0x2c>
	if (preempt_ok != 0) {
   10e7e:	b984      	cbnz	r4, 10ea2 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   10e80:	4b0e      	ldr	r3, [pc, #56]	; (10ebc <update_cache+0x4c>)
   10e82:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   10e84:	7b5a      	ldrb	r2, [r3, #13]
   10e86:	f012 0f1f 	tst.w	r2, #31
   10e8a:	d10a      	bne.n	10ea2 <update_cache+0x32>
	return node->next != NULL;
   10e8c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10e8e:	b942      	cbnz	r2, 10ea2 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   10e90:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   10e92:	2a7f      	cmp	r2, #127	; 0x7f
   10e94:	d905      	bls.n	10ea2 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   10e96:	4a09      	ldr	r2, [pc, #36]	; (10ebc <update_cache+0x4c>)
   10e98:	6193      	str	r3, [r2, #24]
   10e9a:	e00b      	b.n	10eb4 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10e9c:	4b07      	ldr	r3, [pc, #28]	; (10ebc <update_cache+0x4c>)
   10e9e:	68dd      	ldr	r5, [r3, #12]
   10ea0:	e7ed      	b.n	10e7e <update_cache+0xe>
		if (thread != _current) {
   10ea2:	4b06      	ldr	r3, [pc, #24]	; (10ebc <update_cache+0x4c>)
   10ea4:	689b      	ldr	r3, [r3, #8]
   10ea6:	42ab      	cmp	r3, r5
   10ea8:	d002      	beq.n	10eb0 <update_cache+0x40>
			z_reset_time_slice(thread);
   10eaa:	4628      	mov	r0, r5
   10eac:	f7ff ff88 	bl	10dc0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   10eb0:	4b02      	ldr	r3, [pc, #8]	; (10ebc <update_cache+0x4c>)
   10eb2:	619d      	str	r5, [r3, #24]
}
   10eb4:	bd38      	pop	{r3, r4, r5, pc}
   10eb6:	bf00      	nop
   10eb8:	20002144 	.word	0x20002144
   10ebc:	20002128 	.word	0x20002128

00010ec0 <move_thread_to_end_of_prio_q>:
{
   10ec0:	b538      	push	{r3, r4, r5, lr}
   10ec2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   10ec4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   10ec6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10eca:	2b00      	cmp	r3, #0
   10ecc:	db0a      	blt.n	10ee4 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   10ece:	7b6b      	ldrb	r3, [r5, #13]
   10ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10ed4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   10ed6:	4b1b      	ldr	r3, [pc, #108]	; (10f44 <move_thread_to_end_of_prio_q+0x84>)
   10ed8:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10edc:	429c      	cmp	r4, r3
   10ede:	d110      	bne.n	10f02 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10ee0:	2400      	movs	r4, #0
   10ee2:	e00e      	b.n	10f02 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10ee4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ee8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10eea:	4601      	mov	r1, r0
   10eec:	4816      	ldr	r0, [pc, #88]	; (10f48 <move_thread_to_end_of_prio_q+0x88>)
   10eee:	f004 fb7b 	bl	155e8 <z_priq_dumb_remove>
}
   10ef2:	e7ec      	b.n	10ece <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10ef4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   10ef6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   10ef8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   10efa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   10efc:	6065      	str	r5, [r4, #4]
}
   10efe:	e017      	b.n	10f30 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10f00:	2400      	movs	r4, #0
   10f02:	b16c      	cbz	r4, 10f20 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10f04:	4621      	mov	r1, r4
   10f06:	4628      	mov	r0, r5
   10f08:	f004 fb30 	bl	1556c <z_sched_prio_cmp>
   10f0c:	2800      	cmp	r0, #0
   10f0e:	dcf1      	bgt.n	10ef4 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10f10:	2c00      	cmp	r4, #0
   10f12:	d0f6      	beq.n	10f02 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   10f14:	4b0b      	ldr	r3, [pc, #44]	; (10f44 <move_thread_to_end_of_prio_q+0x84>)
   10f16:	6a1b      	ldr	r3, [r3, #32]
   10f18:	429c      	cmp	r4, r3
   10f1a:	d0f1      	beq.n	10f00 <move_thread_to_end_of_prio_q+0x40>
   10f1c:	6824      	ldr	r4, [r4, #0]
   10f1e:	e7f0      	b.n	10f02 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   10f20:	4b08      	ldr	r3, [pc, #32]	; (10f44 <move_thread_to_end_of_prio_q+0x84>)
   10f22:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   10f24:	f103 011c 	add.w	r1, r3, #28
   10f28:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   10f2a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   10f2c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   10f2e:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
   10f30:	4b04      	ldr	r3, [pc, #16]	; (10f44 <move_thread_to_end_of_prio_q+0x84>)
   10f32:	6898      	ldr	r0, [r3, #8]
   10f34:	42a8      	cmp	r0, r5
   10f36:	bf14      	ite	ne
   10f38:	2000      	movne	r0, #0
   10f3a:	2001      	moveq	r0, #1
   10f3c:	f7ff ff98 	bl	10e70 <update_cache>
}
   10f40:	bd38      	pop	{r3, r4, r5, pc}
   10f42:	bf00      	nop
   10f44:	20002128 	.word	0x20002128
   10f48:	20002144 	.word	0x20002144

00010f4c <z_time_slice>:
{
   10f4c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10f4e:	f04f 0240 	mov.w	r2, #64	; 0x40
   10f52:	f3ef 8311 	mrs	r3, BASEPRI
   10f56:	f382 8812 	msr	BASEPRI_MAX, r2
   10f5a:	f3bf 8f6f 	isb	sy
   10f5e:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   10f60:	4b14      	ldr	r3, [pc, #80]	; (10fb4 <z_time_slice+0x68>)
   10f62:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   10f64:	4b14      	ldr	r3, [pc, #80]	; (10fb8 <z_time_slice+0x6c>)
   10f66:	681b      	ldr	r3, [r3, #0]
   10f68:	42a3      	cmp	r3, r4
   10f6a:	d017      	beq.n	10f9c <z_time_slice+0x50>
	pending_current = NULL;
   10f6c:	4b12      	ldr	r3, [pc, #72]	; (10fb8 <z_time_slice+0x6c>)
   10f6e:	2200      	movs	r2, #0
   10f70:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   10f72:	4b10      	ldr	r3, [pc, #64]	; (10fb4 <z_time_slice+0x68>)
   10f74:	7c1b      	ldrb	r3, [r3, #16]
   10f76:	4a11      	ldr	r2, [pc, #68]	; (10fbc <z_time_slice+0x70>)
   10f78:	5cd3      	ldrb	r3, [r2, r3]
   10f7a:	b153      	cbz	r3, 10f92 <z_time_slice+0x46>
   10f7c:	4620      	mov	r0, r4
   10f7e:	f7ff fed9 	bl	10d34 <sliceable>
   10f82:	b130      	cbz	r0, 10f92 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   10f84:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   10f86:	f013 0f1f 	tst.w	r3, #31
   10f8a:	d00f      	beq.n	10fac <z_time_slice+0x60>
		z_reset_time_slice(curr);
   10f8c:	4620      	mov	r0, r4
   10f8e:	f7ff ff17 	bl	10dc0 <z_reset_time_slice>
	__asm__ volatile(
   10f92:	f385 8811 	msr	BASEPRI, r5
   10f96:	f3bf 8f6f 	isb	sy
}
   10f9a:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   10f9c:	4620      	mov	r0, r4
   10f9e:	f7ff ff0f 	bl	10dc0 <z_reset_time_slice>
   10fa2:	f385 8811 	msr	BASEPRI, r5
   10fa6:	f3bf 8f6f 	isb	sy
		return;
   10faa:	e7f6      	b.n	10f9a <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   10fac:	4620      	mov	r0, r4
   10fae:	f7ff ff87 	bl	10ec0 <move_thread_to_end_of_prio_q>
   10fb2:	e7eb      	b.n	10f8c <z_time_slice+0x40>
   10fb4:	20002128 	.word	0x20002128
   10fb8:	20002158 	.word	0x20002158
   10fbc:	2000215c 	.word	0x2000215c

00010fc0 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   10fc0:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10fc2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10fc6:	2b00      	cmp	r3, #0
   10fc8:	db33      	blt.n	11032 <ready_thread+0x72>
{
   10fca:	b570      	push	{r4, r5, r6, lr}
   10fcc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10fce:	f012 0f1f 	tst.w	r2, #31
   10fd2:	d101      	bne.n	10fd8 <ready_thread+0x18>
	return node->next != NULL;
   10fd4:	6986      	ldr	r6, [r0, #24]
   10fd6:	b106      	cbz	r6, 10fda <ready_thread+0x1a>
}
   10fd8:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   10fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10fde:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   10fe0:	4b14      	ldr	r3, [pc, #80]	; (11034 <ready_thread+0x74>)
   10fe2:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10fe6:	429d      	cmp	r5, r3
   10fe8:	d108      	bne.n	10ffc <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10fea:	4635      	mov	r5, r6
   10fec:	e006      	b.n	10ffc <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   10fee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   10ff0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   10ff2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   10ff4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10ff6:	606c      	str	r4, [r5, #4]
}
   10ff8:	e017      	b.n	1102a <ready_thread+0x6a>
   10ffa:	4635      	mov	r5, r6
   10ffc:	b16d      	cbz	r5, 1101a <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10ffe:	4629      	mov	r1, r5
   11000:	4620      	mov	r0, r4
   11002:	f004 fab3 	bl	1556c <z_sched_prio_cmp>
   11006:	2800      	cmp	r0, #0
   11008:	dcf1      	bgt.n	10fee <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1100a:	2d00      	cmp	r5, #0
   1100c:	d0f6      	beq.n	10ffc <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1100e:	4b09      	ldr	r3, [pc, #36]	; (11034 <ready_thread+0x74>)
   11010:	6a1b      	ldr	r3, [r3, #32]
   11012:	429d      	cmp	r5, r3
   11014:	d0f1      	beq.n	10ffa <ready_thread+0x3a>
   11016:	682d      	ldr	r5, [r5, #0]
   11018:	e7f0      	b.n	10ffc <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   1101a:	4b06      	ldr	r3, [pc, #24]	; (11034 <ready_thread+0x74>)
   1101c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   1101e:	f103 011c 	add.w	r1, r3, #28
   11022:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11024:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11026:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11028:	621c      	str	r4, [r3, #32]
		update_cache(0);
   1102a:	2000      	movs	r0, #0
   1102c:	f7ff ff20 	bl	10e70 <update_cache>
}
   11030:	e7d2      	b.n	10fd8 <ready_thread+0x18>
   11032:	4770      	bx	lr
   11034:	20002128 	.word	0x20002128

00011038 <z_sched_start>:
{
   11038:	b510      	push	{r4, lr}
	__asm__ volatile(
   1103a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1103e:	f3ef 8411 	mrs	r4, BASEPRI
   11042:	f383 8812 	msr	BASEPRI_MAX, r3
   11046:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1104a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1104c:	f013 0f04 	tst.w	r3, #4
   11050:	d104      	bne.n	1105c <z_sched_start+0x24>
	__asm__ volatile(
   11052:	f384 8811 	msr	BASEPRI, r4
   11056:	f3bf 8f6f 	isb	sy
}
   1105a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1105c:	f023 0304 	bic.w	r3, r3, #4
   11060:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   11062:	f7ff ffad 	bl	10fc0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11066:	4621      	mov	r1, r4
   11068:	4801      	ldr	r0, [pc, #4]	; (11070 <z_sched_start+0x38>)
   1106a:	f7ff fed1 	bl	10e10 <z_reschedule>
   1106e:	e7f4      	b.n	1105a <z_sched_start+0x22>
   11070:	20002168 	.word	0x20002168

00011074 <unready_thread>:
{
   11074:	b510      	push	{r4, lr}
   11076:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   11078:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1107a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1107e:	2b00      	cmp	r3, #0
   11080:	db08      	blt.n	11094 <unready_thread+0x20>
	update_cache(thread == _current);
   11082:	4b08      	ldr	r3, [pc, #32]	; (110a4 <unready_thread+0x30>)
   11084:	6898      	ldr	r0, [r3, #8]
   11086:	42a0      	cmp	r0, r4
   11088:	bf14      	ite	ne
   1108a:	2000      	movne	r0, #0
   1108c:	2001      	moveq	r0, #1
   1108e:	f7ff feef 	bl	10e70 <update_cache>
}
   11092:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11098:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1109a:	4601      	mov	r1, r0
   1109c:	4802      	ldr	r0, [pc, #8]	; (110a8 <unready_thread+0x34>)
   1109e:	f004 faa3 	bl	155e8 <z_priq_dumb_remove>
}
   110a2:	e7ee      	b.n	11082 <unready_thread+0xe>
   110a4:	20002128 	.word	0x20002128
   110a8:	20002144 	.word	0x20002144

000110ac <z_pend_curr>:
{
   110ac:	b510      	push	{r4, lr}
   110ae:	460c      	mov	r4, r1
   110b0:	4611      	mov	r1, r2
	pending_current = _current;
   110b2:	480a      	ldr	r0, [pc, #40]	; (110dc <z_pend_curr+0x30>)
   110b4:	6882      	ldr	r2, [r0, #8]
   110b6:	4b0a      	ldr	r3, [pc, #40]	; (110e0 <z_pend_curr+0x34>)
   110b8:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   110ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   110be:	f3ef 8311 	mrs	r3, BASEPRI
   110c2:	f382 8812 	msr	BASEPRI_MAX, r2
   110c6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   110ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   110ce:	6880      	ldr	r0, [r0, #8]
   110d0:	f004 fb51 	bl	15776 <pend_locked>
   110d4:	4620      	mov	r0, r4
   110d6:	f7fa fef7 	bl	bec8 <arch_swap>
}
   110da:	bd10      	pop	{r4, pc}
   110dc:	20002128 	.word	0x20002128
   110e0:	20002158 	.word	0x20002158

000110e4 <z_set_prio>:
{
   110e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   110e8:	4605      	mov	r5, r0
   110ea:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   110ec:	2300      	movs	r3, #0
   110ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   110f2:	f3ef 8611 	mrs	r6, BASEPRI
   110f6:	f382 8812 	msr	BASEPRI_MAX, r2
   110fa:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   110fe:	4618      	mov	r0, r3
   11100:	e029      	b.n	11156 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   11102:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11104:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11106:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11108:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1110a:	6065      	str	r5, [r4, #4]
}
   1110c:	e017      	b.n	1113e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1110e:	4644      	mov	r4, r8
   11110:	b16c      	cbz	r4, 1112e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11112:	4621      	mov	r1, r4
   11114:	4628      	mov	r0, r5
   11116:	f004 fa29 	bl	1556c <z_sched_prio_cmp>
   1111a:	2800      	cmp	r0, #0
   1111c:	dcf1      	bgt.n	11102 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1111e:	2c00      	cmp	r4, #0
   11120:	d0f6      	beq.n	11110 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   11122:	4b1d      	ldr	r3, [pc, #116]	; (11198 <z_set_prio+0xb4>)
   11124:	6a1b      	ldr	r3, [r3, #32]
   11126:	429c      	cmp	r4, r3
   11128:	d0f1      	beq.n	1110e <z_set_prio+0x2a>
   1112a:	6824      	ldr	r4, [r4, #0]
   1112c:	e7f0      	b.n	11110 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   1112e:	4b1a      	ldr	r3, [pc, #104]	; (11198 <z_set_prio+0xb4>)
   11130:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   11132:	f103 011c 	add.w	r1, r3, #28
   11136:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11138:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1113a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1113c:	621d      	str	r5, [r3, #32]
			update_cache(1);
   1113e:	2001      	movs	r0, #1
   11140:	f7ff fe96 	bl	10e70 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11144:	2001      	movs	r0, #1
   11146:	e001      	b.n	1114c <z_set_prio+0x68>
			thread->base.prio = prio;
   11148:	73af      	strb	r7, [r5, #14]
   1114a:	2000      	movs	r0, #0
	__asm__ volatile(
   1114c:	f386 8811 	msr	BASEPRI, r6
   11150:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11154:	2301      	movs	r3, #1
   11156:	b9e3      	cbnz	r3, 11192 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   11158:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1115a:	f013 0f1f 	tst.w	r3, #31
   1115e:	d1f3      	bne.n	11148 <z_set_prio+0x64>
	return node->next != NULL;
   11160:	f8d5 8018 	ldr.w	r8, [r5, #24]
   11164:	f1b8 0f00 	cmp.w	r8, #0
   11168:	d1ee      	bne.n	11148 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1116a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1116e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11170:	f8df 9028 	ldr.w	r9, [pc, #40]	; 1119c <z_set_prio+0xb8>
   11174:	4629      	mov	r1, r5
   11176:	4648      	mov	r0, r9
   11178:	f004 fa36 	bl	155e8 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1117c:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1117e:	7b6b      	ldrb	r3, [r5, #13]
   11180:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11184:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11186:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1118a:	454c      	cmp	r4, r9
   1118c:	d1c0      	bne.n	11110 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1118e:	4644      	mov	r4, r8
   11190:	e7be      	b.n	11110 <z_set_prio+0x2c>
}
   11192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11196:	bf00      	nop
   11198:	20002128 	.word	0x20002128
   1119c:	20002144 	.word	0x20002144

000111a0 <z_impl_k_thread_suspend>:
{
   111a0:	b538      	push	{r3, r4, r5, lr}
   111a2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   111a4:	3018      	adds	r0, #24
   111a6:	f004 fba8 	bl	158fa <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   111aa:	2300      	movs	r3, #0
	__asm__ volatile(
   111ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   111b0:	f3ef 8511 	mrs	r5, BASEPRI
   111b4:	f382 8812 	msr	BASEPRI_MAX, r2
   111b8:	f3bf 8f6f 	isb	sy
   111bc:	e010      	b.n	111e0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   111be:	7b63      	ldrb	r3, [r4, #13]
   111c0:	f043 0310 	orr.w	r3, r3, #16
   111c4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   111c6:	4b11      	ldr	r3, [pc, #68]	; (1120c <z_impl_k_thread_suspend+0x6c>)
   111c8:	6898      	ldr	r0, [r3, #8]
   111ca:	42a0      	cmp	r0, r4
   111cc:	bf14      	ite	ne
   111ce:	2000      	movne	r0, #0
   111d0:	2001      	moveq	r0, #1
   111d2:	f7ff fe4d 	bl	10e70 <update_cache>
	__asm__ volatile(
   111d6:	f385 8811 	msr	BASEPRI, r5
   111da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   111de:	2301      	movs	r3, #1
   111e0:	b963      	cbnz	r3, 111fc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   111e2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   111e4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   111e8:	2b00      	cmp	r3, #0
   111ea:	dae8      	bge.n	111be <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   111ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   111f0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   111f2:	4621      	mov	r1, r4
   111f4:	4806      	ldr	r0, [pc, #24]	; (11210 <z_impl_k_thread_suspend+0x70>)
   111f6:	f004 f9f7 	bl	155e8 <z_priq_dumb_remove>
}
   111fa:	e7e0      	b.n	111be <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   111fc:	4b03      	ldr	r3, [pc, #12]	; (1120c <z_impl_k_thread_suspend+0x6c>)
   111fe:	689b      	ldr	r3, [r3, #8]
   11200:	42a3      	cmp	r3, r4
   11202:	d000      	beq.n	11206 <z_impl_k_thread_suspend+0x66>
}
   11204:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   11206:	f004 f9e3 	bl	155d0 <z_reschedule_unlocked>
}
   1120a:	e7fb      	b.n	11204 <z_impl_k_thread_suspend+0x64>
   1120c:	20002128 	.word	0x20002128
   11210:	20002144 	.word	0x20002144

00011214 <k_sched_unlock>:

void k_sched_unlock(void)
{
   11214:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   11216:	2300      	movs	r3, #0
	__asm__ volatile(
   11218:	f04f 0240 	mov.w	r2, #64	; 0x40
   1121c:	f3ef 8411 	mrs	r4, BASEPRI
   11220:	f382 8812 	msr	BASEPRI_MAX, r2
   11224:	f3bf 8f6f 	isb	sy
   11228:	e00c      	b.n	11244 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1122a:	4b09      	ldr	r3, [pc, #36]	; (11250 <k_sched_unlock+0x3c>)
   1122c:	689a      	ldr	r2, [r3, #8]
   1122e:	7bd3      	ldrb	r3, [r2, #15]
   11230:	3301      	adds	r3, #1
   11232:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11234:	2000      	movs	r0, #0
   11236:	f7ff fe1b 	bl	10e70 <update_cache>
	__asm__ volatile(
   1123a:	f384 8811 	msr	BASEPRI, r4
   1123e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11242:	2301      	movs	r3, #1
   11244:	2b00      	cmp	r3, #0
   11246:	d0f0      	beq.n	1122a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   11248:	f004 f9c2 	bl	155d0 <z_reschedule_unlocked>
}
   1124c:	bd10      	pop	{r4, pc}
   1124e:	bf00      	nop
   11250:	20002128 	.word	0x20002128

00011254 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   11254:	7b43      	ldrb	r3, [r0, #13]
   11256:	f013 0f08 	tst.w	r3, #8
   1125a:	d12a      	bne.n	112b2 <end_thread+0x5e>
{
   1125c:	b510      	push	{r4, lr}
   1125e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   11260:	f043 0208 	orr.w	r2, r3, #8
   11264:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11266:	f023 0220 	bic.w	r2, r3, #32
   1126a:	f042 0208 	orr.w	r2, r2, #8
   1126e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   11270:	f012 0f80 	tst.w	r2, #128	; 0x80
   11274:	d113      	bne.n	1129e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   11276:	68a3      	ldr	r3, [r4, #8]
   11278:	b113      	cbz	r3, 11280 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   1127a:	4620      	mov	r0, r4
   1127c:	f004 f9bc 	bl	155f8 <unpend_thread_no_timeout>
   11280:	f104 0018 	add.w	r0, r4, #24
   11284:	f004 fb39 	bl	158fa <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   11288:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1128c:	f004 fa33 	bl	156f6 <unpend_all>
		update_cache(1);
   11290:	2001      	movs	r0, #1
   11292:	f7ff fded 	bl	10e70 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   11296:	4620      	mov	r0, r4
   11298:	f7ff f9a2 	bl	105e0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1129c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1129e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   112a2:	f043 0308 	orr.w	r3, r3, #8
   112a6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   112a8:	4601      	mov	r1, r0
   112aa:	4802      	ldr	r0, [pc, #8]	; (112b4 <end_thread+0x60>)
   112ac:	f004 f99c 	bl	155e8 <z_priq_dumb_remove>
}
   112b0:	e7e1      	b.n	11276 <end_thread+0x22>
   112b2:	4770      	bx	lr
   112b4:	20002144 	.word	0x20002144

000112b8 <z_sched_init>:
{
   112b8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   112ba:	4802      	ldr	r0, [pc, #8]	; (112c4 <z_sched_init+0xc>)
   112bc:	f004 fab7 	bl	1582e <init_ready_q>
}
   112c0:	bd08      	pop	{r3, pc}
   112c2:	bf00      	nop
   112c4:	20002140 	.word	0x20002140

000112c8 <z_impl_k_yield>:
{
   112c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   112ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   112ce:	f3ef 8611 	mrs	r6, BASEPRI
   112d2:	f383 8812 	msr	BASEPRI_MAX, r3
   112d6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   112da:	4c1d      	ldr	r4, [pc, #116]	; (11350 <z_impl_k_yield+0x88>)
   112dc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   112de:	7b4b      	ldrb	r3, [r1, #13]
   112e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   112e4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   112e6:	f104 071c 	add.w	r7, r4, #28
   112ea:	4638      	mov	r0, r7
   112ec:	f004 f97c 	bl	155e8 <z_priq_dumb_remove>
	queue_thread(_current);
   112f0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   112f2:	7b6b      	ldrb	r3, [r5, #13]
   112f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   112f8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   112fa:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   112fc:	42bc      	cmp	r4, r7
   112fe:	d108      	bne.n	11312 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11300:	2400      	movs	r4, #0
   11302:	e006      	b.n	11312 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   11304:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11306:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11308:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1130a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1130c:	6065      	str	r5, [r4, #4]
}
   1130e:	e017      	b.n	11340 <z_impl_k_yield+0x78>
   11310:	2400      	movs	r4, #0
   11312:	b16c      	cbz	r4, 11330 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11314:	4621      	mov	r1, r4
   11316:	4628      	mov	r0, r5
   11318:	f004 f928 	bl	1556c <z_sched_prio_cmp>
   1131c:	2800      	cmp	r0, #0
   1131e:	dcf1      	bgt.n	11304 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11320:	2c00      	cmp	r4, #0
   11322:	d0f6      	beq.n	11312 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   11324:	4b0a      	ldr	r3, [pc, #40]	; (11350 <z_impl_k_yield+0x88>)
   11326:	6a1b      	ldr	r3, [r3, #32]
   11328:	429c      	cmp	r4, r3
   1132a:	d0f1      	beq.n	11310 <z_impl_k_yield+0x48>
   1132c:	6824      	ldr	r4, [r4, #0]
   1132e:	e7f0      	b.n	11312 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   11330:	4b07      	ldr	r3, [pc, #28]	; (11350 <z_impl_k_yield+0x88>)
   11332:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   11334:	f103 011c 	add.w	r1, r3, #28
   11338:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1133a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1133c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1133e:	621d      	str	r5, [r3, #32]
	update_cache(1);
   11340:	2001      	movs	r0, #1
   11342:	f7ff fd95 	bl	10e70 <update_cache>
   11346:	4630      	mov	r0, r6
   11348:	f7fa fdbe 	bl	bec8 <arch_swap>
}
   1134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1134e:	bf00      	nop
   11350:	20002128 	.word	0x20002128

00011354 <z_tick_sleep>:
{
   11354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   11358:	ea50 0301 	orrs.w	r3, r0, r1
   1135c:	d038      	beq.n	113d0 <z_tick_sleep+0x7c>
   1135e:	4604      	mov	r4, r0
   11360:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   11362:	f06f 0301 	mvn.w	r3, #1
   11366:	1a1b      	subs	r3, r3, r0
   11368:	f04f 32ff 	mov.w	r2, #4294967295
   1136c:	eb62 0201 	sbc.w	r2, r2, r1
   11370:	2b01      	cmp	r3, #1
   11372:	f172 0200 	sbcs.w	r2, r2, #0
   11376:	db2f      	blt.n	113d8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   11378:	f06f 0501 	mvn.w	r5, #1
   1137c:	1a2d      	subs	r5, r5, r0
   1137e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11382:	f3ef 8811 	mrs	r8, BASEPRI
   11386:	f383 8812 	msr	BASEPRI_MAX, r3
   1138a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1138e:	4f14      	ldr	r7, [pc, #80]	; (113e0 <z_tick_sleep+0x8c>)
   11390:	68b8      	ldr	r0, [r7, #8]
   11392:	4b14      	ldr	r3, [pc, #80]	; (113e4 <z_tick_sleep+0x90>)
   11394:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11396:	f7ff fe6d 	bl	11074 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1139a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1139c:	4622      	mov	r2, r4
   1139e:	4633      	mov	r3, r6
   113a0:	4911      	ldr	r1, [pc, #68]	; (113e8 <z_tick_sleep+0x94>)
   113a2:	3018      	adds	r0, #24
   113a4:	f000 f8da 	bl	1155c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   113a8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   113aa:	7b53      	ldrb	r3, [r2, #13]
   113ac:	f043 0310 	orr.w	r3, r3, #16
   113b0:	7353      	strb	r3, [r2, #13]
   113b2:	4640      	mov	r0, r8
   113b4:	f7fa fd88 	bl	bec8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   113b8:	f004 fad4 	bl	15964 <sys_clock_tick_get_32>
   113bc:	1a28      	subs	r0, r5, r0
   113be:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   113c2:	2801      	cmp	r0, #1
   113c4:	f173 0300 	sbcs.w	r3, r3, #0
   113c8:	da00      	bge.n	113cc <z_tick_sleep+0x78>
	return 0;
   113ca:	2000      	movs	r0, #0
}
   113cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   113d0:	f7ff ff7a 	bl	112c8 <z_impl_k_yield>
		return 0;
   113d4:	2000      	movs	r0, #0
   113d6:	e7f9      	b.n	113cc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   113d8:	f004 fac4 	bl	15964 <sys_clock_tick_get_32>
   113dc:	1905      	adds	r5, r0, r4
   113de:	e7ce      	b.n	1137e <z_tick_sleep+0x2a>
   113e0:	20002128 	.word	0x20002128
   113e4:	20002158 	.word	0x20002158
   113e8:	000156eb 	.word	0x000156eb

000113ec <z_impl_k_sleep>:
{
   113ec:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   113ee:	f1b1 3fff 	cmp.w	r1, #4294967295
   113f2:	bf08      	it	eq
   113f4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   113f8:	d018      	beq.n	1142c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   113fa:	f7ff ffab 	bl	11354 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   113fe:	17c2      	asrs	r2, r0, #31
   11400:	0151      	lsls	r1, r2, #5
   11402:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   11406:	0143      	lsls	r3, r0, #5
   11408:	1a1b      	subs	r3, r3, r0
   1140a:	eb61 0102 	sbc.w	r1, r1, r2
   1140e:	0089      	lsls	r1, r1, #2
   11410:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   11414:	009b      	lsls	r3, r3, #2
   11416:	181b      	adds	r3, r3, r0
   11418:	eb42 0201 	adc.w	r2, r2, r1
   1141c:	00d2      	lsls	r2, r2, #3
   1141e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   11422:	f3c3 3310 	ubfx	r3, r3, #12, #17
   11426:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   1142a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   1142c:	4b03      	ldr	r3, [pc, #12]	; (1143c <z_impl_k_sleep+0x50>)
   1142e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11430:	f7ff feb6 	bl	111a0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   11434:	f04f 30ff 	mov.w	r0, #4294967295
   11438:	e7f7      	b.n	1142a <z_impl_k_sleep+0x3e>
   1143a:	bf00      	nop
   1143c:	20002128 	.word	0x20002128

00011440 <z_impl_z_current_get>:
}
   11440:	4b01      	ldr	r3, [pc, #4]	; (11448 <z_impl_z_current_get+0x8>)
   11442:	6898      	ldr	r0, [r3, #8]
   11444:	4770      	bx	lr
   11446:	bf00      	nop
   11448:	20002128 	.word	0x20002128

0001144c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1144c:	b570      	push	{r4, r5, r6, lr}
   1144e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11452:	f3ef 8511 	mrs	r5, BASEPRI
   11456:	f383 8812 	msr	BASEPRI_MAX, r3
   1145a:	f3bf 8f6f 	isb	sy
   1145e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   11460:	7b03      	ldrb	r3, [r0, #12]
   11462:	f013 0f01 	tst.w	r3, #1
   11466:	d109      	bne.n	1147c <z_thread_abort+0x30>
   11468:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1146a:	7b43      	ldrb	r3, [r0, #13]
   1146c:	f013 0f08 	tst.w	r3, #8
   11470:	d00f      	beq.n	11492 <z_thread_abort+0x46>
	__asm__ volatile(
   11472:	f385 8811 	msr	BASEPRI, r5
   11476:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   1147a:	e009      	b.n	11490 <z_thread_abort+0x44>
   1147c:	f385 8811 	msr	BASEPRI, r5
   11480:	f3bf 8f6f 	isb	sy
		k_panic();
   11484:	4040      	eors	r0, r0
   11486:	f380 8811 	msr	BASEPRI, r0
   1148a:	f04f 0004 	mov.w	r0, #4
   1148e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11490:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   11492:	f7ff fedf 	bl	11254 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   11496:	4b08      	ldr	r3, [pc, #32]	; (114b8 <z_thread_abort+0x6c>)
   11498:	689b      	ldr	r3, [r3, #8]
   1149a:	42a3      	cmp	r3, r4
   1149c:	d004      	beq.n	114a8 <z_thread_abort+0x5c>
   1149e:	f386 8811 	msr	BASEPRI, r6
   114a2:	f3bf 8f6f 	isb	sy
   114a6:	e7f3      	b.n	11490 <z_thread_abort+0x44>
   114a8:	f3ef 8305 	mrs	r3, IPSR
   114ac:	2b00      	cmp	r3, #0
   114ae:	d1f6      	bne.n	1149e <z_thread_abort+0x52>
   114b0:	4628      	mov	r0, r5
   114b2:	f7fa fd09 	bl	bec8 <arch_swap>
	return ret;
   114b6:	e7f2      	b.n	1149e <z_thread_abort+0x52>
   114b8:	20002128 	.word	0x20002128

000114bc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   114bc:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   114c0:	b083      	sub	sp, #12
   114c2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   114c4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   114c8:	e9cd bc00 	strd	fp, ip, [sp]
   114cc:	f7ff fdee 	bl	110ac <z_pend_curr>

	if (data != NULL) {
   114d0:	b11c      	cbz	r4, 114da <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   114d2:	4b03      	ldr	r3, [pc, #12]	; (114e0 <z_sched_wait+0x24>)
   114d4:	689b      	ldr	r3, [r3, #8]
   114d6:	695b      	ldr	r3, [r3, #20]
   114d8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   114da:	b003      	add	sp, #12
   114dc:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   114e0:	20002128 	.word	0x20002128

000114e4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   114e4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   114e6:	4806      	ldr	r0, [pc, #24]	; (11500 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   114e8:	4a06      	ldr	r2, [pc, #24]	; (11504 <z_data_copy+0x20>)
   114ea:	1a12      	subs	r2, r2, r0
   114ec:	4906      	ldr	r1, [pc, #24]	; (11508 <z_data_copy+0x24>)
   114ee:	f003 fd5f 	bl	14fb0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   114f2:	4a06      	ldr	r2, [pc, #24]	; (1150c <z_data_copy+0x28>)
   114f4:	4906      	ldr	r1, [pc, #24]	; (11510 <z_data_copy+0x2c>)
   114f6:	4807      	ldr	r0, [pc, #28]	; (11514 <z_data_copy+0x30>)
   114f8:	f003 fd5a 	bl	14fb0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   114fc:	bd08      	pop	{r3, pc}
   114fe:	bf00      	nop
   11500:	20000000 	.word	0x20000000
   11504:	20000520 	.word	0x20000520
   11508:	000168d8 	.word	0x000168d8
   1150c:	00000000 	.word	0x00000000
   11510:	000168d8 	.word	0x000168d8
   11514:	20000000 	.word	0x20000000

00011518 <first>:
	return list->head == list;
   11518:	4b03      	ldr	r3, [pc, #12]	; (11528 <first+0x10>)
   1151a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1151c:	4298      	cmp	r0, r3
   1151e:	d000      	beq.n	11522 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   11520:	4770      	bx	lr
   11522:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   11524:	e7fc      	b.n	11520 <first+0x8>
   11526:	bf00      	nop
   11528:	20000468 	.word	0x20000468

0001152c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1152c:	b130      	cbz	r0, 1153c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1152e:	4a04      	ldr	r2, [pc, #16]	; (11540 <next+0x14>)
   11530:	6852      	ldr	r2, [r2, #4]
   11532:	4290      	cmp	r0, r2
   11534:	d001      	beq.n	1153a <next+0xe>
   11536:	6800      	ldr	r0, [r0, #0]
   11538:	4770      	bx	lr
   1153a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1153c:	4770      	bx	lr
   1153e:	bf00      	nop
   11540:	20000468 	.word	0x20000468

00011544 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   11544:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11546:	4b04      	ldr	r3, [pc, #16]	; (11558 <elapsed+0x14>)
   11548:	681b      	ldr	r3, [r3, #0]
   1154a:	b10b      	cbz	r3, 11550 <elapsed+0xc>
   1154c:	2000      	movs	r0, #0
}
   1154e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11550:	f7fd fd20 	bl	ef94 <sys_clock_elapsed>
   11554:	e7fb      	b.n	1154e <elapsed+0xa>
   11556:	bf00      	nop
   11558:	20002168 	.word	0x20002168

0001155c <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1155c:	f1b3 3fff 	cmp.w	r3, #4294967295
   11560:	bf08      	it	eq
   11562:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11566:	d074      	beq.n	11652 <z_add_timeout+0xf6>
{
   11568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1156c:	4604      	mov	r4, r0
   1156e:	4692      	mov	sl, r2
   11570:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   11572:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   11574:	2300      	movs	r3, #0
	__asm__ volatile(
   11576:	f04f 0240 	mov.w	r2, #64	; 0x40
   1157a:	f3ef 8711 	mrs	r7, BASEPRI
   1157e:	f382 8812 	msr	BASEPRI_MAX, r2
   11582:	f3bf 8f6f 	isb	sy
   11586:	e026      	b.n	115d6 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11588:	f11a 0801 	adds.w	r8, sl, #1
   1158c:	f145 0900 	adc.w	r9, r5, #0
   11590:	f7ff ffd8 	bl	11544 <elapsed>
   11594:	eb18 0300 	adds.w	r3, r8, r0
   11598:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   1159c:	6123      	str	r3, [r4, #16]
   1159e:	6160      	str	r0, [r4, #20]
   115a0:	e03b      	b.n	1161a <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   115a2:	1a52      	subs	r2, r2, r1
   115a4:	eb66 0303 	sbc.w	r3, r6, r3
   115a8:	6102      	str	r2, [r0, #16]
   115aa:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   115ac:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   115ae:	6063      	str	r3, [r4, #4]
	node->next = successor;
   115b0:	6020      	str	r0, [r4, #0]
	prev->next = node;
   115b2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   115b4:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   115b6:	e005      	b.n	115c4 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   115b8:	4b26      	ldr	r3, [pc, #152]	; (11654 <z_add_timeout+0xf8>)
   115ba:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   115bc:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   115be:	6062      	str	r2, [r4, #4]
	tail->next = node;
   115c0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   115c2:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   115c4:	f7ff ffa8 	bl	11518 <first>
   115c8:	4284      	cmp	r4, r0
   115ca:	d03a      	beq.n	11642 <z_add_timeout+0xe6>
	__asm__ volatile(
   115cc:	f387 8811 	msr	BASEPRI, r7
   115d0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   115d4:	2301      	movs	r3, #1
   115d6:	2b00      	cmp	r3, #0
   115d8:	d139      	bne.n	1164e <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   115da:	4653      	mov	r3, sl
   115dc:	f06f 0101 	mvn.w	r1, #1
   115e0:	ebb1 010a 	subs.w	r1, r1, sl
   115e4:	f04f 30ff 	mov.w	r0, #4294967295
   115e8:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   115ec:	2a00      	cmp	r2, #0
   115ee:	dbcb      	blt.n	11588 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   115f0:	4a19      	ldr	r2, [pc, #100]	; (11658 <z_add_timeout+0xfc>)
   115f2:	6811      	ldr	r1, [r2, #0]
   115f4:	6852      	ldr	r2, [r2, #4]
   115f6:	185b      	adds	r3, r3, r1
   115f8:	eb42 0205 	adc.w	r2, r2, r5
   115fc:	f06f 0101 	mvn.w	r1, #1
   11600:	1ac9      	subs	r1, r1, r3
   11602:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   11606:	4608      	mov	r0, r1
   11608:	461a      	mov	r2, r3
   1160a:	2901      	cmp	r1, #1
   1160c:	f173 0300 	sbcs.w	r3, r3, #0
   11610:	da01      	bge.n	11616 <z_add_timeout+0xba>
   11612:	2001      	movs	r0, #1
   11614:	2200      	movs	r2, #0
   11616:	6120      	str	r0, [r4, #16]
   11618:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1161a:	f7ff ff7d 	bl	11518 <first>
   1161e:	2800      	cmp	r0, #0
   11620:	d0ca      	beq.n	115b8 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   11622:	6902      	ldr	r2, [r0, #16]
   11624:	6946      	ldr	r6, [r0, #20]
   11626:	6921      	ldr	r1, [r4, #16]
   11628:	6963      	ldr	r3, [r4, #20]
   1162a:	4291      	cmp	r1, r2
   1162c:	eb73 0e06 	sbcs.w	lr, r3, r6
   11630:	dbb7      	blt.n	115a2 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   11632:	1a89      	subs	r1, r1, r2
   11634:	eb63 0306 	sbc.w	r3, r3, r6
   11638:	6121      	str	r1, [r4, #16]
   1163a:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1163c:	f7ff ff76 	bl	1152c <next>
   11640:	e7ed      	b.n	1161e <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   11642:	f004 f93d 	bl	158c0 <next_timeout>
   11646:	2100      	movs	r1, #0
   11648:	f7fd fc68 	bl	ef1c <sys_clock_set_timeout>
   1164c:	e7be      	b.n	115cc <z_add_timeout+0x70>
		}
	}
}
   1164e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11652:	4770      	bx	lr
   11654:	20000468 	.word	0x20000468
   11658:	20001958 	.word	0x20001958

0001165c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   1165c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1165e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11662:	f3ef 8611 	mrs	r6, BASEPRI
   11666:	f383 8812 	msr	BASEPRI_MAX, r3
   1166a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1166e:	4b2b      	ldr	r3, [pc, #172]	; (1171c <sys_clock_announce+0xc0>)
   11670:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   11672:	f7ff ff51 	bl	11518 <first>
   11676:	4604      	mov	r4, r0

	for (t = first();
   11678:	e024      	b.n	116c4 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   1167a:	4a29      	ldr	r2, [pc, #164]	; (11720 <sys_clock_announce+0xc4>)
   1167c:	6813      	ldr	r3, [r2, #0]
   1167e:	6851      	ldr	r1, [r2, #4]
   11680:	195b      	adds	r3, r3, r5
   11682:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   11686:	6013      	str	r3, [r2, #0]
   11688:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1168a:	2200      	movs	r2, #0
   1168c:	2300      	movs	r3, #0
   1168e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   11692:	4620      	mov	r0, r4
   11694:	f004 f8fd 	bl	15892 <remove_timeout>
	__asm__ volatile(
   11698:	f386 8811 	msr	BASEPRI, r6
   1169c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   116a0:	68a3      	ldr	r3, [r4, #8]
   116a2:	4620      	mov	r0, r4
   116a4:	4798      	blx	r3
	__asm__ volatile(
   116a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   116aa:	f3ef 8611 	mrs	r6, BASEPRI
   116ae:	f383 8812 	msr	BASEPRI_MAX, r3
   116b2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   116b6:	4a19      	ldr	r2, [pc, #100]	; (1171c <sys_clock_announce+0xc0>)
   116b8:	6813      	ldr	r3, [r2, #0]
   116ba:	1b5b      	subs	r3, r3, r5
   116bc:	6013      	str	r3, [r2, #0]
	     t = first()) {
   116be:	f7ff ff2b 	bl	11518 <first>
   116c2:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   116c4:	b13c      	cbz	r4, 116d6 <sys_clock_announce+0x7a>
   116c6:	6925      	ldr	r5, [r4, #16]
   116c8:	6961      	ldr	r1, [r4, #20]
   116ca:	4b14      	ldr	r3, [pc, #80]	; (1171c <sys_clock_announce+0xc0>)
   116cc:	681a      	ldr	r2, [r3, #0]
   116ce:	17d3      	asrs	r3, r2, #31
   116d0:	42aa      	cmp	r2, r5
   116d2:	418b      	sbcs	r3, r1
   116d4:	dad1      	bge.n	1167a <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   116d6:	b144      	cbz	r4, 116ea <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   116d8:	6923      	ldr	r3, [r4, #16]
   116da:	6962      	ldr	r2, [r4, #20]
   116dc:	490f      	ldr	r1, [pc, #60]	; (1171c <sys_clock_announce+0xc0>)
   116de:	6809      	ldr	r1, [r1, #0]
   116e0:	1a5b      	subs	r3, r3, r1
   116e2:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   116e6:	6123      	str	r3, [r4, #16]
   116e8:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   116ea:	4a0d      	ldr	r2, [pc, #52]	; (11720 <sys_clock_announce+0xc4>)
   116ec:	4d0b      	ldr	r5, [pc, #44]	; (1171c <sys_clock_announce+0xc0>)
   116ee:	6828      	ldr	r0, [r5, #0]
   116f0:	6813      	ldr	r3, [r2, #0]
   116f2:	6851      	ldr	r1, [r2, #4]
   116f4:	181b      	adds	r3, r3, r0
   116f6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   116fa:	6013      	str	r3, [r2, #0]
   116fc:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   116fe:	2400      	movs	r4, #0
   11700:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11702:	f004 f8dd 	bl	158c0 <next_timeout>
   11706:	4621      	mov	r1, r4
   11708:	f7fd fc08 	bl	ef1c <sys_clock_set_timeout>
	__asm__ volatile(
   1170c:	f386 8811 	msr	BASEPRI, r6
   11710:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   11714:	f7ff fc1a 	bl	10f4c <z_time_slice>
#endif
}
   11718:	bd70      	pop	{r4, r5, r6, pc}
   1171a:	bf00      	nop
   1171c:	20002168 	.word	0x20002168
   11720:	20001958 	.word	0x20001958

00011724 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11724:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   11726:	2200      	movs	r2, #0
	__asm__ volatile(
   11728:	f04f 0340 	mov.w	r3, #64	; 0x40
   1172c:	f3ef 8411 	mrs	r4, BASEPRI
   11730:	f383 8812 	msr	BASEPRI_MAX, r3
   11734:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   11738:	4613      	mov	r3, r2
   1173a:	4611      	mov	r1, r2
   1173c:	e00c      	b.n	11758 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   1173e:	f7ff ff01 	bl	11544 <elapsed>
   11742:	4a07      	ldr	r2, [pc, #28]	; (11760 <sys_clock_tick_get+0x3c>)
   11744:	6813      	ldr	r3, [r2, #0]
   11746:	6851      	ldr	r1, [r2, #4]
   11748:	18c3      	adds	r3, r0, r3
   1174a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   1174e:	f384 8811 	msr	BASEPRI, r4
   11752:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   11756:	2201      	movs	r2, #1
   11758:	2a00      	cmp	r2, #0
   1175a:	d0f0      	beq.n	1173e <sys_clock_tick_get+0x1a>
	}
	return t;
}
   1175c:	4618      	mov	r0, r3
   1175e:	bd10      	pop	{r4, pc}
   11760:	20001958 	.word	0x20001958

00011764 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   11764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11766:	f04f 0240 	mov.w	r2, #64	; 0x40
   1176a:	f3ef 8311 	mrs	r3, BASEPRI
   1176e:	f382 8812 	msr	BASEPRI_MAX, r2
   11772:	f3bf 8f6f 	isb	sy
   11776:	461a      	mov	r2, r3
   11778:	461d      	mov	r5, r3
	return node->next != NULL;
   1177a:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   1177c:	b123      	cbz	r3, 11788 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
   1177e:	f382 8811 	msr	BASEPRI, r2
   11782:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   11786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11788:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1178a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1178c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1178e:	ea52 0103 	orrs.w	r1, r2, r3
   11792:	d005      	beq.n	117a0 <z_timer_expiration_handler+0x3c>
   11794:	f1b3 3fff 	cmp.w	r3, #4294967295
   11798:	bf08      	it	eq
   1179a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1179e:	d129      	bne.n	117f4 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
   117a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   117a2:	3301      	adds	r3, #1
   117a4:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   117a6:	6a23      	ldr	r3, [r4, #32]
   117a8:	b17b      	cbz	r3, 117ca <z_timer_expiration_handler+0x66>
   117aa:	f385 8811 	msr	BASEPRI, r5
   117ae:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   117b2:	6a23      	ldr	r3, [r4, #32]
   117b4:	4620      	mov	r0, r4
   117b6:	4798      	blx	r3
	__asm__ volatile(
   117b8:	f04f 0240 	mov.w	r2, #64	; 0x40
   117bc:	f3ef 8311 	mrs	r3, BASEPRI
   117c0:	f382 8812 	msr	BASEPRI_MAX, r2
   117c4:	f3bf 8f6f 	isb	sy
   117c8:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   117ca:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   117ce:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   117d0:	42a3      	cmp	r3, r4
   117d2:	d03f      	beq.n	11854 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
   117d4:	2c00      	cmp	r4, #0
   117d6:	d03d      	beq.n	11854 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
   117d8:	4620      	mov	r0, r4
   117da:	f003 fed1 	bl	15580 <z_unpend_thread_no_timeout>
   117de:	2300      	movs	r3, #0
   117e0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   117e4:	f385 8811 	msr	BASEPRI, r5
   117e8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   117ec:	4620      	mov	r0, r4
   117ee:	f003 ff36 	bl	1565e <z_ready_thread>
   117f2:	e7c8      	b.n	11786 <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
   117f4:	4616      	mov	r6, r2
   117f6:	461f      	mov	r7, r3
   117f8:	2a01      	cmp	r2, #1
   117fa:	f173 0300 	sbcs.w	r3, r3, #0
   117fe:	da01      	bge.n	11804 <z_timer_expiration_handler+0xa0>
   11800:	2601      	movs	r6, #1
   11802:	2700      	movs	r7, #0
   11804:	3e01      	subs	r6, #1
   11806:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
   1180a:	f004 f8af 	bl	1596c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   1180e:	3001      	adds	r0, #1
   11810:	f141 0100 	adc.w	r1, r1, #0
   11814:	1980      	adds	r0, r0, r6
   11816:	eb47 0101 	adc.w	r1, r7, r1
   1181a:	2801      	cmp	r0, #1
   1181c:	f171 0100 	sbcs.w	r1, r1, #0
   11820:	da08      	bge.n	11834 <z_timer_expiration_handler+0xd0>
   11822:	f06f 0201 	mvn.w	r2, #1
   11826:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1182a:	490d      	ldr	r1, [pc, #52]	; (11860 <z_timer_expiration_handler+0xfc>)
   1182c:	4620      	mov	r0, r4
   1182e:	f7ff fe95 	bl	1155c <z_add_timeout>
   11832:	e7b5      	b.n	117a0 <z_timer_expiration_handler+0x3c>
   11834:	f004 f89a 	bl	1596c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   11838:	3001      	adds	r0, #1
   1183a:	f141 0100 	adc.w	r1, r1, #0
   1183e:	1980      	adds	r0, r0, r6
   11840:	eb47 0301 	adc.w	r3, r7, r1
   11844:	f06f 0201 	mvn.w	r2, #1
   11848:	1a12      	subs	r2, r2, r0
   1184a:	f04f 31ff 	mov.w	r1, #4294967295
   1184e:	eb61 0303 	sbc.w	r3, r1, r3
   11852:	e7ea      	b.n	1182a <z_timer_expiration_handler+0xc6>
   11854:	f385 8811 	msr	BASEPRI, r5
   11858:	f3bf 8f6f 	isb	sy
		return;
   1185c:	e793      	b.n	11786 <z_timer_expiration_handler+0x22>
   1185e:	bf00      	nop
   11860:	00011765 	.word	0x00011765

00011864 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   11864:	b570      	push	{r4, r5, r6, lr}
   11866:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   11868:	f1b3 3fff 	cmp.w	r3, #4294967295
   1186c:	bf08      	it	eq
   1186e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11872:	d01a      	beq.n	118aa <z_impl_k_timer_start+0x46>
   11874:	4606      	mov	r6, r0
   11876:	4614      	mov	r4, r2
   11878:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1187a:	f06f 0201 	mvn.w	r2, #1
   1187e:	1b12      	subs	r2, r2, r4
   11880:	f04f 32ff 	mov.w	r2, #4294967295
   11884:	eb62 0203 	sbc.w	r2, r2, r3
   11888:	2a00      	cmp	r2, #0
   1188a:	db0f      	blt.n	118ac <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1188c:	4630      	mov	r0, r6
   1188e:	f004 f834 	bl	158fa <z_abort_timeout>
	timer->period = period;
   11892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11896:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
   1189a:	2300      	movs	r3, #0
   1189c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1189e:	4622      	mov	r2, r4
   118a0:	462b      	mov	r3, r5
   118a2:	4907      	ldr	r1, [pc, #28]	; (118c0 <z_impl_k_timer_start+0x5c>)
   118a4:	4630      	mov	r0, r6
   118a6:	f7ff fe59 	bl	1155c <z_add_timeout>
		     duration);
}
   118aa:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
   118ac:	2c01      	cmp	r4, #1
   118ae:	f171 0100 	sbcs.w	r1, r1, #0
   118b2:	da01      	bge.n	118b8 <z_impl_k_timer_start+0x54>
   118b4:	2401      	movs	r4, #1
   118b6:	2500      	movs	r5, #0
   118b8:	3c01      	subs	r4, #1
   118ba:	f145 35ff 	adc.w	r5, r5, #4294967295
   118be:	e7e5      	b.n	1188c <z_impl_k_timer_start+0x28>
   118c0:	00011765 	.word	0x00011765

000118c4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   118c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118c8:	b083      	sub	sp, #12
   118ca:	4607      	mov	r7, r0
   118cc:	4616      	mov	r6, r2
   118ce:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   118d0:	4b28      	ldr	r3, [pc, #160]	; (11974 <z_impl_k_poll+0xb0>)
   118d2:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   118d4:	2301      	movs	r3, #1
   118d6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   118da:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   118de:	ea55 0302 	orrs.w	r3, r5, r2
   118e2:	bf0c      	ite	eq
   118e4:	2301      	moveq	r3, #1
   118e6:	2300      	movne	r3, #0
   118e8:	f104 0260 	add.w	r2, r4, #96	; 0x60
   118ec:	f004 f96c 	bl	15bc8 <register_events>
   118f0:	4680      	mov	r8, r0
	__asm__ volatile(
   118f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   118f6:	f3ef 8111 	mrs	r1, BASEPRI
   118fa:	f383 8812 	msr	BASEPRI_MAX, r3
   118fe:	f3bf 8f6f 	isb	sy
   11902:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   11904:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   11908:	b30b      	cbz	r3, 1194e <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1190a:	2300      	movs	r3, #0
   1190c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11910:	ea55 0306 	orrs.w	r3, r5, r6
   11914:	d026      	beq.n	11964 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11916:	9600      	str	r6, [sp, #0]
   11918:	9501      	str	r5, [sp, #4]
   1191a:	4a17      	ldr	r2, [pc, #92]	; (11978 <z_impl_k_poll+0xb4>)
   1191c:	4817      	ldr	r0, [pc, #92]	; (1197c <z_impl_k_poll+0xb8>)
   1191e:	f7ff fbc5 	bl	110ac <z_pend_curr>
   11922:	4604      	mov	r4, r0
   11924:	f04f 0340 	mov.w	r3, #64	; 0x40
   11928:	f3ef 8211 	mrs	r2, BASEPRI
   1192c:	f383 8812 	msr	BASEPRI_MAX, r3
   11930:	f3bf 8f6f 	isb	sy
   11934:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   11936:	4641      	mov	r1, r8
   11938:	4638      	mov	r0, r7
   1193a:	f004 f8b9 	bl	15ab0 <clear_event_registrations>
	__asm__ volatile(
   1193e:	f385 8811 	msr	BASEPRI, r5
   11942:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   11946:	4620      	mov	r0, r4
   11948:	b003      	add	sp, #12
   1194a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   1194e:	460a      	mov	r2, r1
   11950:	4601      	mov	r1, r0
   11952:	4638      	mov	r0, r7
   11954:	f004 f8ac 	bl	15ab0 <clear_event_registrations>
   11958:	f389 8811 	msr	BASEPRI, r9
   1195c:	f3bf 8f6f 	isb	sy
		return 0;
   11960:	2400      	movs	r4, #0
   11962:	e7f0      	b.n	11946 <z_impl_k_poll+0x82>
   11964:	f381 8811 	msr	BASEPRI, r1
   11968:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1196c:	f06f 040a 	mvn.w	r4, #10
   11970:	e7e9      	b.n	11946 <z_impl_k_poll+0x82>
   11972:	bf00      	nop
   11974:	20002128 	.word	0x20002128
   11978:	20000470 	.word	0x20000470
   1197c:	2000216c 	.word	0x2000216c

00011980 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   11980:	b538      	push	{r3, r4, r5, lr}
   11982:	4603      	mov	r3, r0
	__asm__ volatile(
   11984:	f04f 0240 	mov.w	r2, #64	; 0x40
   11988:	f3ef 8511 	mrs	r5, BASEPRI
   1198c:	f382 8812 	msr	BASEPRI_MAX, r2
   11990:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   11994:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   11996:	2201      	movs	r2, #1
   11998:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1199a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1199c:	4283      	cmp	r3, r0
   1199e:	d010      	beq.n	119c2 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   119a0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   119a2:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   119a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   119a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   119a8:	2300      	movs	r3, #0
   119aa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   119ac:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   119ae:	2101      	movs	r1, #1
   119b0:	f004 f994 	bl	15cdc <signal_poll_event>
   119b4:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   119b6:	4629      	mov	r1, r5
   119b8:	4805      	ldr	r0, [pc, #20]	; (119d0 <z_impl_k_poll_signal_raise+0x50>)
   119ba:	f7ff fa29 	bl	10e10 <z_reschedule>
	return rc;
}
   119be:	4620      	mov	r0, r4
   119c0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   119c2:	f385 8811 	msr	BASEPRI, r5
   119c6:	f3bf 8f6f 	isb	sy
		return 0;
   119ca:	2400      	movs	r4, #0
   119cc:	e7f7      	b.n	119be <z_impl_k_poll_signal_raise+0x3e>
   119ce:	bf00      	nop
   119d0:	2000216c 	.word	0x2000216c

000119d4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   119d4:	b538      	push	{r3, r4, r5, lr}
   119d6:	4604      	mov	r4, r0
   119d8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   119da:	f003 fb7b 	bl	150d4 <k_is_in_isr>
   119de:	b948      	cbnz	r0, 119f4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   119e0:	4b05      	ldr	r3, [pc, #20]	; (119f8 <z_thread_aligned_alloc+0x24>)
   119e2:	689b      	ldr	r3, [r3, #8]
   119e4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   119e8:	b118      	cbz	r0, 119f2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   119ea:	462a      	mov	r2, r5
   119ec:	4621      	mov	r1, r4
   119ee:	f004 f9a6 	bl	15d3e <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   119f2:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   119f4:	2000      	movs	r0, #0
	return ret;
   119f6:	e7fc      	b.n	119f2 <z_thread_aligned_alloc+0x1e>
   119f8:	20002128 	.word	0x20002128

000119fc <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   119fc:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   119fe:	4802      	ldr	r0, [pc, #8]	; (11a08 <boot_banner+0xc>)
   11a00:	f000 f9dc 	bl	11dbc <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   11a04:	bd08      	pop	{r3, pc}
   11a06:	bf00      	nop
   11a08:	0001689c 	.word	0x0001689c

00011a0c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   11a0c:	b510      	push	{r4, lr}
   11a0e:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
   11a10:	4b08      	ldr	r3, [pc, #32]	; (11a34 <k_sys_work_q_init+0x28>)
   11a12:	9302      	str	r3, [sp, #8]
   11a14:	2400      	movs	r4, #0
   11a16:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   11a1a:	ab02      	add	r3, sp, #8
   11a1c:	9300      	str	r3, [sp, #0]
   11a1e:	f04f 33ff 	mov.w	r3, #4294967295
   11a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11a26:	4904      	ldr	r1, [pc, #16]	; (11a38 <k_sys_work_q_init+0x2c>)
   11a28:	4804      	ldr	r0, [pc, #16]	; (11a3c <k_sys_work_q_init+0x30>)
   11a2a:	f7ff f93d 	bl	10ca8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   11a2e:	4620      	mov	r0, r4
   11a30:	b004      	add	sp, #16
   11a32:	bd10      	pop	{r4, pc}
   11a34:	000168cc 	.word	0x000168cc
   11a38:	20004700 	.word	0x20004700
   11a3c:	20001960 	.word	0x20001960

00011a40 <z_impl_gpio_pin_configure>:
{
   11a40:	b538      	push	{r3, r4, r5, lr}
   11a42:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   11a44:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   11a46:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   11a48:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   11a4c:	d007      	beq.n	11a5e <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   11a4e:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   11a52:	d004      	beq.n	11a5e <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   11a54:	f012 0f01 	tst.w	r2, #1
   11a58:	d001      	beq.n	11a5e <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   11a5a:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   11a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11a62:	f013 0f01 	tst.w	r3, #1
   11a66:	d00a      	beq.n	11a7e <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11a68:	6823      	ldr	r3, [r4, #0]
   11a6a:	f04f 0c01 	mov.w	ip, #1
   11a6e:	fa0c fc01 	lsl.w	ip, ip, r1
   11a72:	ea43 030c 	orr.w	r3, r3, ip
   11a76:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   11a78:	682b      	ldr	r3, [r5, #0]
   11a7a:	4798      	blx	r3
}
   11a7c:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11a7e:	6823      	ldr	r3, [r4, #0]
   11a80:	f04f 0c01 	mov.w	ip, #1
   11a84:	fa0c fc01 	lsl.w	ip, ip, r1
   11a88:	ea23 030c 	bic.w	r3, r3, ip
   11a8c:	6023      	str	r3, [r4, #0]
   11a8e:	e7f3      	b.n	11a78 <z_impl_gpio_pin_configure+0x38>

00011a90 <gpio_pin_configure_dt>:
{
   11a90:	b508      	push	{r3, lr}
   11a92:	4603      	mov	r3, r0
   11a94:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   11a96:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   11a98:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   11a9a:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   11a9c:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   11aa0:	f7ff ffce 	bl	11a40 <z_impl_gpio_pin_configure>
}
   11aa4:	bd08      	pop	{r3, pc}

00011aa6 <gpio_pin_set_raw>:
{
   11aa6:	b508      	push	{r3, lr}
	if (value != 0)	{
   11aa8:	b132      	cbz	r2, 11ab8 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   11aaa:	2301      	movs	r3, #1
   11aac:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   11ab0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   11ab2:	68db      	ldr	r3, [r3, #12]
   11ab4:	4798      	blx	r3
}
   11ab6:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   11ab8:	2301      	movs	r3, #1
   11aba:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   11abe:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   11ac0:	691b      	ldr	r3, [r3, #16]
   11ac2:	4798      	blx	r3
	return ret;
   11ac4:	e7f7      	b.n	11ab6 <gpio_pin_set_raw+0x10>

00011ac6 <gpio_pin_set>:
{
   11ac6:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   11ac8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11aca:	681c      	ldr	r4, [r3, #0]
   11acc:	2301      	movs	r3, #1
   11ace:	408b      	lsls	r3, r1
   11ad0:	421c      	tst	r4, r3
   11ad2:	d002      	beq.n	11ada <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   11ad4:	fab2 f282 	clz	r2, r2
   11ad8:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   11ada:	f7ff ffe4 	bl	11aa6 <gpio_pin_set_raw>
}
   11ade:	bd10      	pop	{r4, pc}

00011ae0 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
   11ae0:	b508      	push	{r3, lr}
   11ae2:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
   11ae4:	6800      	ldr	r0, [r0, #0]
   11ae6:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   11ae8:	2101      	movs	r1, #1
   11aea:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
   11aec:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   11aee:	695b      	ldr	r3, [r3, #20]
   11af0:	4798      	blx	r3
}
   11af2:	bd08      	pop	{r3, pc}

00011af4 <k_msleep>:
{
   11af4:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11afa:	17c1      	asrs	r1, r0, #31
   11afc:	03c9      	lsls	r1, r1, #15
   11afe:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11b02:	03c0      	lsls	r0, r0, #15
   11b04:	f240 33e7 	movw	r3, #999	; 0x3e7
   11b08:	18c0      	adds	r0, r0, r3
   11b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b0e:	f04f 0300 	mov.w	r3, #0
   11b12:	f141 0100 	adc.w	r1, r1, #0
   11b16:	f7ee fed7 	bl	8c8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11b1a:	f7ff fc67 	bl	113ec <z_impl_k_sleep>
}
   11b1e:	bd08      	pop	{r3, pc}

00011b20 <k_msleep>:
{
   11b20:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11b22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11b26:	17c1      	asrs	r1, r0, #31
   11b28:	03c9      	lsls	r1, r1, #15
   11b2a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11b2e:	03c0      	lsls	r0, r0, #15
   11b30:	f240 33e7 	movw	r3, #999	; 0x3e7
   11b34:	18c0      	adds	r0, r0, r3
   11b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b3a:	f04f 0300 	mov.w	r3, #0
   11b3e:	f141 0100 	adc.w	r1, r1, #0
   11b42:	f7ee fec1 	bl	8c8 <__aeabi_uldivmod>
   11b46:	f7ff fc51 	bl	113ec <z_impl_k_sleep>
}
   11b4a:	bd08      	pop	{r3, pc}

00011b4c <ads1115_reset>:
void ads1115_reset(){
   11b4c:	b508      	push	{r3, lr}
    twowire_write_register(DEVICE_ADDRESS, ADS1115_RESET);
   11b4e:	2106      	movs	r1, #6
   11b50:	2048      	movs	r0, #72	; 0x48
   11b52:	f7f9 f98d 	bl	ae70 <twowire_write_register>
}
   11b56:	bd08      	pop	{r3, pc}

00011b58 <ads1115_delay_acc_to_rate>:
void ads1115_delay_acc_to_rate(convRate cr){
   11b58:	b508      	push	{r3, lr}
    switch(cr){
   11b5a:	2880      	cmp	r0, #128	; 0x80
   11b5c:	d026      	beq.n	11bac <ads1115_delay_acc_to_rate+0x54>
   11b5e:	d80f      	bhi.n	11b80 <ads1115_delay_acc_to_rate+0x28>
   11b60:	2840      	cmp	r0, #64	; 0x40
   11b62:	d01f      	beq.n	11ba4 <ads1115_delay_acc_to_rate+0x4c>
   11b64:	d905      	bls.n	11b72 <ads1115_delay_acc_to_rate+0x1a>
   11b66:	2860      	cmp	r0, #96	; 0x60
   11b68:	d11b      	bne.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(16);
   11b6a:	2010      	movs	r0, #16
   11b6c:	f7ff ffd8 	bl	11b20 <k_msleep>
            break;
   11b70:	e017      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
    switch(cr){
   11b72:	b198      	cbz	r0, 11b9c <ads1115_delay_acc_to_rate+0x44>
   11b74:	2820      	cmp	r0, #32
   11b76:	d114      	bne.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(65);
   11b78:	2041      	movs	r0, #65	; 0x41
   11b7a:	f7ff ffd1 	bl	11b20 <k_msleep>
            break;
   11b7e:	e010      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
    switch(cr){
   11b80:	28c0      	cmp	r0, #192	; 0xc0
   11b82:	d017      	beq.n	11bb4 <ads1115_delay_acc_to_rate+0x5c>
   11b84:	28e0      	cmp	r0, #224	; 0xe0
   11b86:	d103      	bne.n	11b90 <ads1115_delay_acc_to_rate+0x38>
            k_msleep(2);
   11b88:	2002      	movs	r0, #2
   11b8a:	f7ff ffc9 	bl	11b20 <k_msleep>
}
   11b8e:	e008      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
    switch(cr){
   11b90:	28a0      	cmp	r0, #160	; 0xa0
   11b92:	d106      	bne.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(4);
   11b94:	2004      	movs	r0, #4
   11b96:	f7ff ffc3 	bl	11b20 <k_msleep>
            break;
   11b9a:	e002      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(130);
   11b9c:	2082      	movs	r0, #130	; 0x82
   11b9e:	f7ff ffbf 	bl	11b20 <k_msleep>
}
   11ba2:	bd08      	pop	{r3, pc}
            k_msleep(32);
   11ba4:	2020      	movs	r0, #32
   11ba6:	f7ff ffbb 	bl	11b20 <k_msleep>
            break;
   11baa:	e7fa      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(8);
   11bac:	2008      	movs	r0, #8
   11bae:	f7ff ffb7 	bl	11b20 <k_msleep>
            break;
   11bb2:	e7f6      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>
            k_msleep(3);
   11bb4:	2003      	movs	r0, #3
   11bb6:	f7ff ffb3 	bl	11b20 <k_msleep>
            break;
   11bba:	e7f2      	b.n	11ba2 <ads1115_delay_acc_to_rate+0x4a>

00011bbc <read_register>:

uint32_t map(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax){
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
}

uint16_t read_register(uint8_t regaddr){
   11bbc:	b500      	push	{lr}
   11bbe:	b083      	sub	sp, #12
   11bc0:	4601      	mov	r1, r0
    uint8_t read_buffer [2];
    twowire_read_register_data(DEVICE_ADDRESS, regaddr, read_buffer);
   11bc2:	aa01      	add	r2, sp, #4
   11bc4:	2048      	movs	r0, #72	; 0x48
   11bc6:	f7f9 f96f 	bl	aea8 <twowire_read_register_data>
    return (uint16_t)(read_buffer[0] << 8 | read_buffer[1]);
   11bca:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11bce:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
   11bd2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   11bd6:	b003      	add	sp, #12
   11bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00011bdc <ads1115_get_conv_rate>:
convRate ads1115_get_conv_rate(){
   11bdc:	b508      	push	{r3, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11bde:	2001      	movs	r0, #1
   11be0:	f7ff ffec 	bl	11bbc <read_register>
}
   11be4:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   11be8:	bd08      	pop	{r3, pc}

00011bea <ads1115_is_busy>:
uint8_t ads1115_is_busy(){
   11bea:	b508      	push	{r3, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11bec:	2001      	movs	r0, #1
   11bee:	f7ff ffe5 	bl	11bbc <read_register>
    return (!(currentConfReg>>15) & 1);
   11bf2:	b200      	sxth	r0, r0
}
   11bf4:	43c0      	mvns	r0, r0
   11bf6:	0fc0      	lsrs	r0, r0, #31
   11bf8:	bd08      	pop	{r3, pc}

00011bfa <write_register>:

void write_register(uint8_t regaddr, uint16_t regval){
   11bfa:	b508      	push	{r3, lr}
   11bfc:	460a      	mov	r2, r1
    twowire_write_register_data(DEVICE_ADDRESS, regaddr, regval);
   11bfe:	4601      	mov	r1, r0
   11c00:	2048      	movs	r0, #72	; 0x48
   11c02:	f7f9 f991 	bl	af28 <twowire_write_register_data>
   11c06:	bd08      	pop	{r3, pc}

00011c08 <ads1115_set_compare_channels>:
void ads1115_set_compare_channels(mux mux){
   11c08:	b538      	push	{r3, r4, r5, lr}
   11c0a:	4605      	mov	r5, r0
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11c0c:	2001      	movs	r0, #1
   11c0e:	f7ff ffd5 	bl	11bbc <read_register>
    currentConfReg &= ~(0xF000);    
   11c12:	f3c0 040b 	ubfx	r4, r0, #0, #12
    currentConfReg |= (mux);
   11c16:	432c      	orrs	r4, r5
    write_register(ADS1115_CONFIG_REG, currentConfReg);
   11c18:	4621      	mov	r1, r4
   11c1a:	2001      	movs	r0, #1
   11c1c:	f7ff ffed 	bl	11bfa <write_register>
    if(!(currentConfReg & 0x0100)){  // => if not single shot mode
   11c20:	f414 7f80 	tst.w	r4, #256	; 0x100
   11c24:	d000      	beq.n	11c28 <ads1115_set_compare_channels+0x20>
}
   11c26:	bd38      	pop	{r3, r4, r5, pc}
        convRate rate = ads1115_get_conv_rate();      
   11c28:	f7ff ffd8 	bl	11bdc <ads1115_get_conv_rate>
   11c2c:	4604      	mov	r4, r0
        ads1115_delay_acc_to_rate(rate);
   11c2e:	f7ff ff93 	bl	11b58 <ads1115_delay_acc_to_rate>
        ads1115_delay_acc_to_rate(rate);               
   11c32:	4620      	mov	r0, r4
   11c34:	f7ff ff90 	bl	11b58 <ads1115_delay_acc_to_rate>
}
   11c38:	e7f5      	b.n	11c26 <ads1115_set_compare_channels+0x1e>

00011c3a <ads1115_set_single_channel>:
    if (channel >=  4)
   11c3a:	2803      	cmp	r0, #3
   11c3c:	d900      	bls.n	11c40 <ads1115_set_single_channel+0x6>
   11c3e:	4770      	bx	lr
void ads1115_set_single_channel(uint8_t channel) {
   11c40:	b508      	push	{r3, lr}
    ads1115_set_compare_channels((mux)(ADS1115_COMP_0_GND + ADS1115_COMP_INC*channel));
   11c42:	3004      	adds	r0, #4
   11c44:	0300      	lsls	r0, r0, #12
   11c46:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
   11c4a:	f7ff ffdd 	bl	11c08 <ads1115_set_compare_channels>
}
   11c4e:	bd08      	pop	{r3, pc}

00011c50 <ads1115_start_single_measurement>:
void ads1115_start_single_measurement(){
   11c50:	b508      	push	{r3, lr}
    uint16_t currentConfReg = read_register(ADS1115_CONFIG_REG);
   11c52:	2001      	movs	r0, #1
   11c54:	f7ff ffb2 	bl	11bbc <read_register>
    currentConfReg |= (1 << 15);
   11c58:	ea6f 4140 	mvn.w	r1, r0, lsl #17
   11c5c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
    write_register(ADS1115_CONFIG_REG, currentConfReg);
   11c60:	b289      	uxth	r1, r1
   11c62:	2001      	movs	r0, #1
   11c64:	f7ff ffc9 	bl	11bfa <write_register>
}
   11c68:	bd08      	pop	{r3, pc}

00011c6a <i2c_write>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
   11c6a:	b510      	push	{r4, lr}
   11c6c:	b084      	sub	sp, #16
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
   11c6e:	9101      	str	r1, [sp, #4]
	msg.len = num_bytes;
   11c70:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   11c72:	2202      	movs	r2, #2
   11c74:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
   11c78:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   11c7a:	6894      	ldr	r4, [r2, #8]
   11c7c:	2201      	movs	r2, #1
   11c7e:	a901      	add	r1, sp, #4
   11c80:	47a0      	blx	r4

	return i2c_transfer(dev, &msg, 1, addr);
}
   11c82:	b004      	add	sp, #16
   11c84:	bd10      	pop	{r4, pc}

00011c86 <i2c_write_read>:
 * @retval negative on error.
 */
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
   11c86:	b510      	push	{r4, lr}
   11c88:	b086      	sub	sp, #24
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   11c8a:	9200      	str	r2, [sp, #0]
	msg[0].len = num_write;
   11c8c:	9301      	str	r3, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   11c8e:	2300      	movs	r3, #0
   11c90:	f88d 3008 	strb.w	r3, [sp, #8]

	msg[1].buf = (uint8_t *)read_buf;
   11c94:	9b08      	ldr	r3, [sp, #32]
   11c96:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
   11c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c9a:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   11c9c:	2307      	movs	r3, #7
   11c9e:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   11ca2:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   11ca4:	689c      	ldr	r4, [r3, #8]
   11ca6:	460b      	mov	r3, r1
   11ca8:	2202      	movs	r2, #2
   11caa:	4669      	mov	r1, sp
   11cac:	47a0      	blx	r4

	return i2c_transfer(dev, msg, 2, addr);
}
   11cae:	b006      	add	sp, #24
   11cb0:	bd10      	pop	{r4, pc}

00011cb2 <perihperals_init>:
void perihperals_init(){
   11cb2:	b508      	push	{r3, lr}
    ads1115_reset();
   11cb4:	f7ff ff4a 	bl	11b4c <ads1115_reset>
    ads1115_init();
   11cb8:	f7f9 f80e 	bl	acd8 <ads1115_init>
}
   11cbc:	bd08      	pop	{r3, pc}

00011cbe <peripherals_ads1115_read_channel>:
int16_t peripherals_ads1115_read_channel(uint8_t channel){
   11cbe:	b508      	push	{r3, lr}
  ads1115_set_single_channel(channel);
   11cc0:	f7ff ffbb 	bl	11c3a <ads1115_set_single_channel>
  ads1115_start_single_measurement();
   11cc4:	f7ff ffc4 	bl	11c50 <ads1115_start_single_measurement>
  while(ads1115_is_busy()){}
   11cc8:	f7ff ff8f 	bl	11bea <ads1115_is_busy>
   11ccc:	2800      	cmp	r0, #0
   11cce:	d1fb      	bne.n	11cc8 <peripherals_ads1115_read_channel+0xa>
  voltage = ads1115_get_result_mV();
   11cd0:	f7f9 f8a4 	bl	ae1c <ads1115_get_result_mV>
}
   11cd4:	bd08      	pop	{r3, pc}

00011cd6 <TPL0401x_update_resistance>:
 ******************************************************************************/

#include "TPL0401x.h"


void TPL0401x_update_resistance(uint8_t value){
   11cd6:	b508      	push	{r3, lr}
   11cd8:	4602      	mov	r2, r0
    twowire_write_register_byte(TPL_ADDRESS, REG_WIPER, value);
   11cda:	2100      	movs	r1, #0
   11cdc:	202e      	movs	r0, #46	; 0x2e
   11cde:	f7f9 f903 	bl	aee8 <twowire_write_register_byte>
}
   11ce2:	bd08      	pop	{r3, pc}

00011ce4 <adc_channel_setup_dt>:
{
   11ce4:	b508      	push	{r3, lr}
	if (!spec->channel_cfg_dt_node_exists) {
   11ce6:	7943      	ldrb	r3, [r0, #5]
   11ce8:	b133      	cbz	r3, 11cf8 <adc_channel_setup_dt+0x14>
   11cea:	4601      	mov	r1, r0
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
   11cec:	f851 0b06 	ldr.w	r0, [r1], #6
	const struct adc_driver_api *api =
   11cf0:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
   11cf2:	681b      	ldr	r3, [r3, #0]
   11cf4:	4798      	blx	r3
}
   11cf6:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   11cf8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11cfc:	e7fb      	b.n	11cf6 <adc_channel_setup_dt+0x12>

00011cfe <k_msleep>:
{
   11cfe:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11d00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11d04:	17c1      	asrs	r1, r0, #31
   11d06:	03c9      	lsls	r1, r1, #15
   11d08:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11d0c:	03c0      	lsls	r0, r0, #15
   11d0e:	f240 33e7 	movw	r3, #999	; 0x3e7
   11d12:	18c0      	adds	r0, r0, r3
   11d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d18:	f04f 0300 	mov.w	r3, #0
   11d1c:	f141 0100 	adc.w	r1, r1, #0
   11d20:	f7ee fdd2 	bl	8c8 <__aeabi_uldivmod>
   11d24:	f7ff fb62 	bl	113ec <z_impl_k_sleep>
}
   11d28:	bd08      	pop	{r3, pc}

00011d2a <adc_raw_to_millivolts>:
{
   11d2a:	b530      	push	{r4, r5, lr}
   11d2c:	b083      	sub	sp, #12
   11d2e:	4684      	mov	ip, r0
   11d30:	4608      	mov	r0, r1
   11d32:	4615      	mov	r5, r2
   11d34:	461c      	mov	r4, r3
	int32_t adc_mv = *valp * ref_mv;
   11d36:	681b      	ldr	r3, [r3, #0]
   11d38:	fb0c f303 	mul.w	r3, ip, r3
   11d3c:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   11d3e:	a901      	add	r1, sp, #4
   11d40:	f7fb fdf0 	bl	d924 <adc_gain_invert>
	if (ret == 0) {
   11d44:	b910      	cbnz	r0, 11d4c <adc_raw_to_millivolts+0x22>
		*valp = (adc_mv >> resolution);
   11d46:	9b01      	ldr	r3, [sp, #4]
   11d48:	412b      	asrs	r3, r5
   11d4a:	6023      	str	r3, [r4, #0]
}
   11d4c:	b003      	add	sp, #12
   11d4e:	bd30      	pop	{r4, r5, pc}

00011d50 <adc_raw_to_millivolts_dt>:
	if (!spec->channel_cfg_dt_node_exists) {
   11d50:	7942      	ldrb	r2, [r0, #5]
   11d52:	b1c2      	cbz	r2, 11d86 <adc_raw_to_millivolts_dt+0x36>
{
   11d54:	b508      	push	{r3, lr}
   11d56:	4684      	mov	ip, r0
   11d58:	460b      	mov	r3, r1
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
   11d5a:	79c2      	ldrb	r2, [r0, #7]
   11d5c:	2a04      	cmp	r2, #4
   11d5e:	d00e      	beq.n	11d7e <adc_raw_to_millivolts_dt+0x2e>
		vref_mv = spec->vref_mv;
   11d60:	89c0      	ldrh	r0, [r0, #14]
	resolution = spec->resolution;
   11d62:	f89c 2010 	ldrb.w	r2, [ip, #16]
	if (spec->channel_cfg.differential) {
   11d66:	f89c 100a 	ldrb.w	r1, [ip, #10]
   11d6a:	f011 0f20 	tst.w	r1, #32
   11d6e:	d001      	beq.n	11d74 <adc_raw_to_millivolts_dt+0x24>
		resolution -= 1U;
   11d70:	3a01      	subs	r2, #1
   11d72:	b2d2      	uxtb	r2, r2
	return adc_raw_to_millivolts(vref_mv, spec->channel_cfg.gain,
   11d74:	f89c 1006 	ldrb.w	r1, [ip, #6]
   11d78:	f7ff ffd7 	bl	11d2a <adc_raw_to_millivolts>
}
   11d7c:	bd08      	pop	{r3, pc}
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
   11d7e:	6802      	ldr	r2, [r0, #0]
	const struct adc_driver_api *api =
   11d80:	6892      	ldr	r2, [r2, #8]
	return api->ref_internal;
   11d82:	8910      	ldrh	r0, [r2, #8]
   11d84:	e7ed      	b.n	11d62 <adc_raw_to_millivolts_dt+0x12>
		return -ENOTSUP;
   11d86:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11d8a:	4770      	bx	lr

00011d8c <k_msleep>:
{
   11d8c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11d92:	17c1      	asrs	r1, r0, #31
   11d94:	03c9      	lsls	r1, r1, #15
   11d96:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11d9a:	03c0      	lsls	r0, r0, #15
   11d9c:	f240 33e7 	movw	r3, #999	; 0x3e7
   11da0:	18c0      	adds	r0, r0, r3
   11da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11da6:	f04f 0300 	mov.w	r3, #0
   11daa:	f141 0100 	adc.w	r1, r1, #0
   11dae:	f7ee fd8b 	bl	8c8 <__aeabi_uldivmod>
   11db2:	f7ff fb1b 	bl	113ec <z_impl_k_sleep>
}
   11db6:	bd08      	pop	{r3, pc}

00011db8 <arch_printk_char_out>:
}
   11db8:	2000      	movs	r0, #0
   11dba:	4770      	bx	lr

00011dbc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   11dbc:	b40f      	push	{r0, r1, r2, r3}
   11dbe:	b500      	push	{lr}
   11dc0:	b083      	sub	sp, #12
   11dc2:	a904      	add	r1, sp, #16
   11dc4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   11dc8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   11dca:	f7f9 fabf 	bl	b34c <vprintk>

	va_end(ap);
}
   11dce:	b003      	add	sp, #12
   11dd0:	f85d eb04 	ldr.w	lr, [sp], #4
   11dd4:	b004      	add	sp, #16
   11dd6:	4770      	bx	lr

00011dd8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11dd8:	b508      	push	{r3, lr}
   11dda:	4604      	mov	r4, r0
   11ddc:	4608      	mov	r0, r1
   11dde:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11de0:	461a      	mov	r2, r3
   11de2:	47a0      	blx	r4
	return z_impl_z_current_get();
   11de4:	f7ff fb2c 	bl	11440 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11de8:	f7fa fb70 	bl	c4cc <z_impl_k_thread_abort>

00011dec <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   11dec:	00c9      	lsls	r1, r1, #3
   11dee:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   11df0:	4408      	add	r0, r1
   11df2:	4770      	bx	lr

00011df4 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11df4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11df8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   11dfc:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   11dfe:	4299      	cmp	r1, r3
   11e00:	d00c      	beq.n	11e1c <free_list_remove_bidx+0x28>
   11e02:	4484      	add	ip, r0
   11e04:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   11e08:	3204      	adds	r2, #4
   11e0a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11e0e:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   11e10:	3206      	adds	r2, #6
   11e12:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   11e14:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   11e16:	3304      	adds	r3, #4
   11e18:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   11e1a:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   11e1c:	68c3      	ldr	r3, [r0, #12]
   11e1e:	2101      	movs	r1, #1
   11e20:	4091      	lsls	r1, r2
   11e22:	ea23 0301 	bic.w	r3, r3, r1
   11e26:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11e28:	3204      	adds	r2, #4
   11e2a:	2300      	movs	r3, #0
   11e2c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   11e30:	4770      	bx	lr

00011e32 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   11e32:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   11e34:	1d13      	adds	r3, r2, #4
   11e36:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   11e3a:	b974      	cbnz	r4, 11e5a <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   11e3c:	68c3      	ldr	r3, [r0, #12]
   11e3e:	2401      	movs	r4, #1
   11e40:	4094      	lsls	r4, r2
   11e42:	4323      	orrs	r3, r4
   11e44:	60c3      	str	r3, [r0, #12]
		b->next = c;
   11e46:	3204      	adds	r2, #4
   11e48:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   11e4c:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   11e4e:	1d1a      	adds	r2, r3, #4
   11e50:	b289      	uxth	r1, r1
   11e52:	5281      	strh	r1, [r0, r2]
   11e54:	3306      	adds	r3, #6
   11e56:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   11e58:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   11e5a:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   11e5c:	3204      	adds	r2, #4
   11e5e:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   11e60:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   11e64:	f10c 0e04 	add.w	lr, ip, #4
   11e68:	f820 300e 	strh.w	r3, [r0, lr]
   11e6c:	f10c 0c06 	add.w	ip, ip, #6
   11e70:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   11e74:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   11e76:	3306      	adds	r3, #6
   11e78:	b289      	uxth	r1, r1
   11e7a:	52c1      	strh	r1, [r0, r3]
   11e7c:	5281      	strh	r1, [r0, r2]
   11e7e:	e7eb      	b.n	11e58 <free_list_add_bidx+0x26>

00011e80 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   11e80:	b500      	push	{lr}
	void *cmem = &buf[c];
   11e82:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   11e84:	3302      	adds	r3, #2
   11e86:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   11e8a:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   11e8e:	1a89      	subs	r1, r1, r2
   11e90:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11e94:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   11e98:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11e9c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   11ea0:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   11ea2:	3302      	adds	r3, #2
   11ea4:	f820 e003 	strh.w	lr, [r0, r3]
   11ea8:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   11eac:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   11eae:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   11eb2:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   11eb6:	f85d fb04 	ldr.w	pc, [sp], #4

00011eba <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   11eba:	b500      	push	{lr}
	void *cmem = &buf[c];
   11ebc:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   11ebe:	3102      	adds	r1, #2
   11ec0:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   11ec4:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   11ec8:	f10c 0c02 	add.w	ip, ip, #2
   11ecc:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11ed0:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11ed2:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11ed6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   11eda:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   11ede:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   11ee2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   11ee6:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   11eea:	f85d fb04 	ldr.w	pc, [sp], #4

00011eee <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11eee:	3904      	subs	r1, #4
   11ef0:	1a08      	subs	r0, r1, r0
}
   11ef2:	08c0      	lsrs	r0, r0, #3
   11ef4:	4770      	bx	lr

00011ef6 <free_list_remove>:
{
   11ef6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   11ef8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   11efc:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11efe:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11f00:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   11f04:	f1c2 021f 	rsb	r2, r2, #31
   11f08:	f7ff ff74 	bl	11df4 <free_list_remove_bidx>
}
   11f0c:	bd08      	pop	{r3, pc}

00011f0e <free_list_add>:
{
   11f0e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   11f10:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   11f14:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11f16:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   11f18:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   11f1c:	f1c2 021f 	rsb	r2, r2, #31
   11f20:	f7ff ff87 	bl	11e32 <free_list_add_bidx>
}
   11f24:	bd08      	pop	{r3, pc}

00011f26 <free_chunk>:
{
   11f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f28:	4604      	mov	r4, r0
   11f2a:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   11f2c:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   11f2e:	1cb7      	adds	r7, r6, #2
   11f30:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   11f32:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   11f36:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   11f3a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   11f3c:	f013 0f01 	tst.w	r3, #1
   11f40:	d00c      	beq.n	11f5c <free_chunk+0x36>
   11f42:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   11f44:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   11f46:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   11f4a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   11f4c:	f013 0f01 	tst.w	r3, #1
   11f50:	d00e      	beq.n	11f70 <free_chunk+0x4a>
	free_list_add(h, c);
   11f52:	4629      	mov	r1, r5
   11f54:	4620      	mov	r0, r4
   11f56:	f7ff ffda 	bl	11f0e <free_list_add>
}
   11f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   11f5c:	f7ff ffcb 	bl	11ef6 <free_list_remove>
   11f60:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   11f62:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   11f66:	4629      	mov	r1, r5
   11f68:	4620      	mov	r0, r4
   11f6a:	f7ff ffa6 	bl	11eba <merge_chunks>
   11f6e:	e7e8      	b.n	11f42 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   11f70:	4620      	mov	r0, r4
   11f72:	f7ff ffc0 	bl	11ef6 <free_list_remove>
   11f76:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   11f78:	462a      	mov	r2, r5
   11f7a:	1a69      	subs	r1, r5, r1
   11f7c:	4620      	mov	r0, r4
   11f7e:	f7ff ff9c 	bl	11eba <merge_chunks>
   11f82:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   11f84:	1aed      	subs	r5, r5, r3
   11f86:	e7e4      	b.n	11f52 <free_chunk+0x2c>

00011f88 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   11f88:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   11f8a:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   11f8e:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   11f92:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   11f96:	b1cd      	cbz	r5, 11fcc <alloc_chunk+0x44>
   11f98:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   11f9c:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   11fa0:	1d14      	adds	r4, r2, #4
   11fa2:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   11fa6:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   11faa:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   11fae:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   11fb0:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   11fb4:	d914      	bls.n	11fe0 <alloc_chunk+0x58>
   11fb6:	4484      	add	ip, r0
   11fb8:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   11fbc:	1d16      	adds	r6, r2, #4
   11fbe:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   11fc2:	f1be 0e01 	subs.w	lr, lr, #1
   11fc6:	d001      	beq.n	11fcc <alloc_chunk+0x44>
   11fc8:	42a5      	cmp	r5, r4
   11fca:	d1e9      	bne.n	11fa0 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   11fcc:	68c4      	ldr	r4, [r0, #12]
   11fce:	f1c3 0220 	rsb	r2, r3, #32
   11fd2:	2301      	movs	r3, #1
   11fd4:	4093      	lsls	r3, r2
   11fd6:	425b      	negs	r3, r3

	if (bmask != 0U) {
   11fd8:	401c      	ands	r4, r3
   11fda:	d105      	bne.n	11fe8 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11fdc:	4620      	mov	r0, r4
   11fde:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   11fe0:	4621      	mov	r1, r4
   11fe2:	f7ff ff07 	bl	11df4 <free_list_remove_bidx>
				return c;
   11fe6:	e7f9      	b.n	11fdc <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   11fe8:	fa94 f2a4 	rbit	r2, r4
   11fec:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   11ff0:	1d13      	adds	r3, r2, #4
   11ff2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   11ff6:	4621      	mov	r1, r4
   11ff8:	f7ff fefc 	bl	11df4 <free_list_remove_bidx>
		return c;
   11ffc:	e7ee      	b.n	11fdc <alloc_chunk+0x54>

00011ffe <sys_heap_free>:
	if (mem == NULL) {
   11ffe:	b179      	cbz	r1, 12020 <sys_heap_free+0x22>
{
   12000:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   12002:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   12004:	4620      	mov	r0, r4
   12006:	f7ff ff72 	bl	11eee <mem_to_chunkid>
   1200a:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1200c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12010:	8853      	ldrh	r3, [r2, #2]
   12012:	f023 0301 	bic.w	r3, r3, #1
   12016:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   12018:	4620      	mov	r0, r4
   1201a:	f7ff ff84 	bl	11f26 <free_chunk>
}
   1201e:	bd10      	pop	{r4, pc}
   12020:	4770      	bx	lr

00012022 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   12022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   12024:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   12026:	b341      	cbz	r1, 1207a <sys_heap_alloc+0x58>
   12028:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1202a:	68aa      	ldr	r2, [r5, #8]
   1202c:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   12030:	d925      	bls.n	1207e <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12032:	330b      	adds	r3, #11
   12034:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   12036:	4621      	mov	r1, r4
   12038:	4628      	mov	r0, r5
   1203a:	f7ff ffa5 	bl	11f88 <alloc_chunk>
	if (c == 0U) {
   1203e:	4607      	mov	r7, r0
   12040:	b1f8      	cbz	r0, 12082 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   12042:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   12044:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   12048:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1204a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1204e:	d309      	bcc.n	12064 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   12050:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12052:	885a      	ldrh	r2, [r3, #2]
   12054:	f042 0201 	orr.w	r2, r2, #1
   12058:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   1205a:	4639      	mov	r1, r7
   1205c:	4628      	mov	r0, r5
   1205e:	f7ff fec5 	bl	11dec <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   12062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   12064:	4404      	add	r4, r0
   12066:	4622      	mov	r2, r4
   12068:	4601      	mov	r1, r0
   1206a:	4628      	mov	r0, r5
   1206c:	f7ff ff08 	bl	11e80 <split_chunks>
		free_list_add(h, c + chunk_sz);
   12070:	4621      	mov	r1, r4
   12072:	4628      	mov	r0, r5
   12074:	f7ff ff4b 	bl	11f0e <free_list_add>
   12078:	e7ea      	b.n	12050 <sys_heap_alloc+0x2e>
		return NULL;
   1207a:	2000      	movs	r0, #0
   1207c:	e7f1      	b.n	12062 <sys_heap_alloc+0x40>
   1207e:	2000      	movs	r0, #0
   12080:	e7ef      	b.n	12062 <sys_heap_alloc+0x40>
		return NULL;
   12082:	2000      	movs	r0, #0
   12084:	e7ed      	b.n	12062 <sys_heap_alloc+0x40>

00012086 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   12086:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1208a:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   1208c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1208e:	424b      	negs	r3, r1
   12090:	400b      	ands	r3, r1
	if (align != rew) {
   12092:	f101 39ff 	add.w	r9, r1, #4294967295
   12096:	ea19 0901 	ands.w	r9, r9, r1
   1209a:	d004      	beq.n	120a6 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1209c:	2b03      	cmp	r3, #3
   1209e:	d847      	bhi.n	12130 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   120a0:	464c      	mov	r4, r9
	rew = align & -align;
   120a2:	4699      	mov	r9, r3
   120a4:	e003      	b.n	120ae <sys_heap_aligned_alloc+0x28>
   120a6:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   120a8:	2904      	cmp	r1, #4
   120aa:	d93c      	bls.n	12126 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   120ac:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   120ae:	2d00      	cmp	r5, #0
   120b0:	d056      	beq.n	12160 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   120b2:	68b2      	ldr	r2, [r6, #8]
   120b4:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   120b8:	d955      	bls.n	12166 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   120ba:	1961      	adds	r1, r4, r5
   120bc:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   120be:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   120c0:	08c9      	lsrs	r1, r1, #3
   120c2:	4630      	mov	r0, r6
   120c4:	f7ff ff60 	bl	11f88 <alloc_chunk>

	if (c0 == 0) {
   120c8:	4607      	mov	r7, r0
   120ca:	2800      	cmp	r0, #0
   120cc:	d04e      	beq.n	1216c <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   120ce:	4601      	mov	r1, r0
   120d0:	4630      	mov	r0, r6
   120d2:	f7ff fe8b 	bl	11dec <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   120d6:	eb00 0809 	add.w	r8, r0, r9
   120da:	44a0      	add	r8, r4
   120dc:	f108 38ff 	add.w	r8, r8, #4294967295
   120e0:	4264      	negs	r4, r4
   120e2:	ea08 0804 	and.w	r8, r8, r4
   120e6:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   120ea:	eb08 0405 	add.w	r4, r8, r5
   120ee:	3407      	adds	r4, #7
   120f0:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   120f4:	4641      	mov	r1, r8
   120f6:	4630      	mov	r0, r6
   120f8:	f7ff fef9 	bl	11eee <mem_to_chunkid>
   120fc:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   120fe:	1ba4      	subs	r4, r4, r6
   12100:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   12102:	4287      	cmp	r7, r0
   12104:	d318      	bcc.n	12138 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   12106:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   12108:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   1210c:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   1210e:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   12112:	429c      	cmp	r4, r3
   12114:	d31a      	bcc.n	1214c <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   12116:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12118:	8873      	ldrh	r3, [r6, #2]
   1211a:	f043 0301 	orr.w	r3, r3, #1
   1211e:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   12120:	4640      	mov	r0, r8
   12122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   12126:	4611      	mov	r1, r2
   12128:	f7ff ff7b 	bl	12022 <sys_heap_alloc>
   1212c:	4680      	mov	r8, r0
   1212e:	e7f7      	b.n	12120 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   12130:	464c      	mov	r4, r9
	rew = align & -align;
   12132:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   12134:	2304      	movs	r3, #4
   12136:	e7ba      	b.n	120ae <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   12138:	4602      	mov	r2, r0
   1213a:	4639      	mov	r1, r7
   1213c:	4630      	mov	r0, r6
   1213e:	f7ff fe9f 	bl	11e80 <split_chunks>
		free_list_add(h, c0);
   12142:	4639      	mov	r1, r7
   12144:	4630      	mov	r0, r6
   12146:	f7ff fee2 	bl	11f0e <free_list_add>
   1214a:	e7dc      	b.n	12106 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   1214c:	4622      	mov	r2, r4
   1214e:	4629      	mov	r1, r5
   12150:	4630      	mov	r0, r6
   12152:	f7ff fe95 	bl	11e80 <split_chunks>
		free_list_add(h, c_end);
   12156:	4621      	mov	r1, r4
   12158:	4630      	mov	r0, r6
   1215a:	f7ff fed8 	bl	11f0e <free_list_add>
   1215e:	e7da      	b.n	12116 <sys_heap_aligned_alloc+0x90>
		return NULL;
   12160:	f04f 0800 	mov.w	r8, #0
   12164:	e7dc      	b.n	12120 <sys_heap_aligned_alloc+0x9a>
   12166:	f04f 0800 	mov.w	r8, #0
   1216a:	e7d9      	b.n	12120 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   1216c:	f04f 0800 	mov.w	r8, #0
   12170:	e7d6      	b.n	12120 <sys_heap_aligned_alloc+0x9a>

00012172 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   12172:	b570      	push	{r4, r5, r6, lr}
   12174:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   12176:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12178:	1dc8      	adds	r0, r1, #7
   1217a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1217e:	440a      	add	r2, r1
   12180:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12184:	1a12      	subs	r2, r2, r0
   12186:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   12188:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1218a:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   1218c:	2300      	movs	r3, #0
   1218e:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   12190:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12194:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12198:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   1219c:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1219e:	1dce      	adds	r6, r1, #7
   121a0:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   121a2:	e005      	b.n	121b0 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   121a4:	f103 0c04 	add.w	ip, r3, #4
   121a8:	2400      	movs	r4, #0
   121aa:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   121ae:	3301      	adds	r3, #1
   121b0:	4573      	cmp	r3, lr
   121b2:	dbf7      	blt.n	121a4 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   121b4:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   121b6:	b2a4      	uxth	r4, r4
   121b8:	8044      	strh	r4, [r0, #2]
   121ba:	f04f 0c00 	mov.w	ip, #0
   121be:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   121c2:	f044 0401 	orr.w	r4, r4, #1
   121c6:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   121c8:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   121ca:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   121ce:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   121d2:	1ca5      	adds	r5, r4, #2
   121d4:	f820 e005 	strh.w	lr, [r0, r5]
   121d8:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   121da:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   121de:	1c95      	adds	r5, r2, #2
   121e0:	f820 c005 	strh.w	ip, [r0, r5]
   121e4:	4402      	add	r2, r0
   121e6:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   121e8:	8853      	ldrh	r3, [r2, #2]
   121ea:	f043 0301 	orr.w	r3, r3, #1
   121ee:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   121f0:	f7ff fe8d 	bl	11f0e <free_list_add>
}
   121f4:	bd70      	pop	{r4, r5, r6, pc}

000121f6 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   121f6:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121fa:	8b03      	ldrh	r3, [r0, #24]
   121fc:	f023 0307 	bic.w	r3, r3, #7
   12200:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12202:	8303      	strh	r3, [r0, #24]
}
   12204:	4770      	bx	lr

00012206 <notify_monitors>:
{
   12206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1220a:	4606      	mov	r6, r0
   1220c:	460f      	mov	r7, r1
   1220e:	4690      	mov	r8, r2
	return list->head;
   12210:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12212:	b121      	cbz	r1, 1221e <notify_monitors+0x18>
	return node->next;
   12214:	680c      	ldr	r4, [r1, #0]
   12216:	b13c      	cbz	r4, 12228 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12218:	b931      	cbnz	r1, 12228 <notify_monitors+0x22>
   1221a:	460c      	mov	r4, r1
   1221c:	e004      	b.n	12228 <notify_monitors+0x22>
   1221e:	460c      	mov	r4, r1
   12220:	e002      	b.n	12228 <notify_monitors+0x22>
   12222:	4623      	mov	r3, r4
   12224:	4621      	mov	r1, r4
   12226:	461c      	mov	r4, r3
   12228:	b169      	cbz	r1, 12246 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   1222a:	684d      	ldr	r5, [r1, #4]
   1222c:	4643      	mov	r3, r8
   1222e:	463a      	mov	r2, r7
   12230:	4630      	mov	r0, r6
   12232:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12234:	2c00      	cmp	r4, #0
   12236:	d0f4      	beq.n	12222 <notify_monitors+0x1c>
	return node->next;
   12238:	6823      	ldr	r3, [r4, #0]
   1223a:	2b00      	cmp	r3, #0
   1223c:	d0f2      	beq.n	12224 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1223e:	2c00      	cmp	r4, #0
   12240:	d1f0      	bne.n	12224 <notify_monitors+0x1e>
   12242:	4623      	mov	r3, r4
   12244:	e7ee      	b.n	12224 <notify_monitors+0x1e>
}
   12246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001224a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1224a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1224c:	f013 0307 	ands.w	r3, r3, #7
   12250:	d103      	bne.n	1225a <process_recheck+0x10>
	return list->head;
   12252:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   12254:	b10a      	cbz	r2, 1225a <process_recheck+0x10>
		evt = EVT_START;
   12256:	2003      	movs	r0, #3
   12258:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1225a:	2b02      	cmp	r3, #2
   1225c:	d003      	beq.n	12266 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1225e:	2b01      	cmp	r3, #1
   12260:	d006      	beq.n	12270 <process_recheck+0x26>
	int evt = EVT_NOP;
   12262:	2000      	movs	r0, #0
   12264:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   12266:	8b42      	ldrh	r2, [r0, #26]
   12268:	2a00      	cmp	r2, #0
   1226a:	d1f8      	bne.n	1225e <process_recheck+0x14>
		evt = EVT_STOP;
   1226c:	2004      	movs	r0, #4
   1226e:	4770      	bx	lr
   12270:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   12272:	b10b      	cbz	r3, 12278 <process_recheck+0x2e>
		evt = EVT_RESET;
   12274:	2005      	movs	r0, #5
}
   12276:	4770      	bx	lr
	int evt = EVT_NOP;
   12278:	2000      	movs	r0, #0
   1227a:	4770      	bx	lr

0001227c <process_complete>:
{
   1227c:	b510      	push	{r4, lr}
   1227e:	4604      	mov	r4, r0
   12280:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12282:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   12284:	2a00      	cmp	r2, #0
   12286:	db07      	blt.n	12298 <process_complete+0x1c>
   12288:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1228c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1228e:	2a01      	cmp	r2, #1
   12290:	d90e      	bls.n	122b0 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12292:	2b04      	cmp	r3, #4
   12294:	d036      	beq.n	12304 <process_complete+0x88>
}
   12296:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   12298:	e9d0 0100 	ldrd	r0, r1, [r0]
   1229c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   122a0:	2300      	movs	r3, #0
   122a2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   122a4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   122a6:	2101      	movs	r1, #1
   122a8:	4620      	mov	r0, r4
   122aa:	f7ff ffa4 	bl	121f6 <set_state>
   122ae:	e7f2      	b.n	12296 <process_complete+0x1a>
		*clients = mgr->clients;
   122b0:	e9d0 0100 	ldrd	r0, r1, [r0]
   122b4:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   122b8:	2200      	movs	r2, #0
   122ba:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   122bc:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   122be:	2b06      	cmp	r3, #6
   122c0:	d11b      	bne.n	122fa <process_complete+0x7e>
	return list->head;
   122c2:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   122c6:	b153      	cbz	r3, 122de <process_complete+0x62>
				mgr->refs += 1U;
   122c8:	8b62      	ldrh	r2, [r4, #26]
   122ca:	3201      	adds	r2, #1
   122cc:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   122ce:	461a      	mov	r2, r3
	return node->next;
   122d0:	681b      	ldr	r3, [r3, #0]
   122d2:	2b00      	cmp	r3, #0
   122d4:	d0f7      	beq.n	122c6 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   122d6:	2a00      	cmp	r2, #0
   122d8:	d1f5      	bne.n	122c6 <process_complete+0x4a>
   122da:	4613      	mov	r3, r2
   122dc:	e7f3      	b.n	122c6 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   122de:	2102      	movs	r1, #2
   122e0:	4620      	mov	r0, r4
   122e2:	f7ff ff88 	bl	121f6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   122e6:	4620      	mov	r0, r4
   122e8:	f7ff ffaf 	bl	1224a <process_recheck>
   122ec:	2800      	cmp	r0, #0
   122ee:	d0d2      	beq.n	12296 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   122f0:	8b23      	ldrh	r3, [r4, #24]
   122f2:	f043 0320 	orr.w	r3, r3, #32
   122f6:	8323      	strh	r3, [r4, #24]
   122f8:	e7cd      	b.n	12296 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   122fa:	2100      	movs	r1, #0
   122fc:	4620      	mov	r0, r4
   122fe:	f7ff ff7a 	bl	121f6 <set_state>
   12302:	e7f0      	b.n	122e6 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   12304:	2100      	movs	r1, #0
   12306:	f7ff ff76 	bl	121f6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1230a:	4620      	mov	r0, r4
   1230c:	f7ff ff9d 	bl	1224a <process_recheck>
   12310:	2800      	cmp	r0, #0
   12312:	d0c0      	beq.n	12296 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12314:	8b23      	ldrh	r3, [r4, #24]
   12316:	f043 0320 	orr.w	r3, r3, #32
   1231a:	8323      	strh	r3, [r4, #24]
}
   1231c:	e7bb      	b.n	12296 <process_complete+0x1a>

0001231e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1231e:	b150      	cbz	r0, 12336 <validate_args+0x18>
{
   12320:	b510      	push	{r4, lr}
   12322:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   12324:	b151      	cbz	r1, 1233c <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   12326:	1d08      	adds	r0, r1, #4
   12328:	f000 f8c4 	bl	124b4 <sys_notify_validate>
	if ((rv == 0)
   1232c:	b910      	cbnz	r0, 12334 <validate_args+0x16>
	    && ((cli->notify.flags
   1232e:	68a3      	ldr	r3, [r4, #8]
   12330:	2b03      	cmp	r3, #3
   12332:	d806      	bhi.n	12342 <validate_args+0x24>
}
   12334:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12336:	f06f 0015 	mvn.w	r0, #21
}
   1233a:	4770      	bx	lr
		return -EINVAL;
   1233c:	f06f 0015 	mvn.w	r0, #21
   12340:	e7f8      	b.n	12334 <validate_args+0x16>
		rv = -EINVAL;
   12342:	f06f 0015 	mvn.w	r0, #21
   12346:	e7f5      	b.n	12334 <validate_args+0x16>

00012348 <notify_one>:
{
   12348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1234c:	4607      	mov	r7, r0
   1234e:	460c      	mov	r4, r1
   12350:	4616      	mov	r6, r2
   12352:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   12354:	4619      	mov	r1, r3
   12356:	1d20      	adds	r0, r4, #4
   12358:	f000 f8cb 	bl	124f2 <sys_notify_finalize>
	if (cb) {
   1235c:	b128      	cbz	r0, 1236a <notify_one+0x22>
   1235e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   12360:	462b      	mov	r3, r5
   12362:	4632      	mov	r2, r6
   12364:	4621      	mov	r1, r4
   12366:	4638      	mov	r0, r7
   12368:	47c0      	blx	r8
}
   1236a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001236e <notify_all>:
{
   1236e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12372:	4680      	mov	r8, r0
   12374:	460c      	mov	r4, r1
   12376:	4617      	mov	r7, r2
   12378:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   1237a:	e004      	b.n	12386 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   1237c:	4633      	mov	r3, r6
   1237e:	463a      	mov	r2, r7
   12380:	4640      	mov	r0, r8
   12382:	f7ff ffe1 	bl	12348 <notify_one>
	return list->head;
   12386:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   12388:	b131      	cbz	r1, 12398 <notify_all+0x2a>
	return node->next;
   1238a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1238c:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1238e:	6863      	ldr	r3, [r4, #4]
   12390:	428b      	cmp	r3, r1
   12392:	d1f3      	bne.n	1237c <notify_all+0xe>
	list->tail = node;
   12394:	6065      	str	r5, [r4, #4]
}
   12396:	e7f1      	b.n	1237c <notify_all+0xe>
}
   12398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001239c <transition_complete>:
{
   1239c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1239e:	f04f 0c40 	mov.w	ip, #64	; 0x40
   123a2:	f3ef 8211 	mrs	r2, BASEPRI
   123a6:	f38c 8812 	msr	BASEPRI_MAX, ip
   123aa:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   123ae:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   123b0:	2101      	movs	r1, #1
   123b2:	f7f8 ffd9 	bl	b368 <process_event>
}
   123b6:	bd08      	pop	{r3, pc}

000123b8 <onoff_manager_init>:
	if ((mgr == NULL)
   123b8:	4603      	mov	r3, r0
   123ba:	b170      	cbz	r0, 123da <onoff_manager_init+0x22>
	    || (transitions == NULL)
   123bc:	b181      	cbz	r1, 123e0 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   123be:	680a      	ldr	r2, [r1, #0]
   123c0:	b18a      	cbz	r2, 123e6 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   123c2:	684a      	ldr	r2, [r1, #4]
   123c4:	b192      	cbz	r2, 123ec <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   123c6:	2000      	movs	r0, #0
   123c8:	6018      	str	r0, [r3, #0]
   123ca:	6058      	str	r0, [r3, #4]
   123cc:	6098      	str	r0, [r3, #8]
   123ce:	60d8      	str	r0, [r3, #12]
   123d0:	6118      	str	r0, [r3, #16]
   123d2:	6158      	str	r0, [r3, #20]
   123d4:	6198      	str	r0, [r3, #24]
   123d6:	6119      	str	r1, [r3, #16]
	return 0;
   123d8:	4770      	bx	lr
		return -EINVAL;
   123da:	f06f 0015 	mvn.w	r0, #21
   123de:	4770      	bx	lr
   123e0:	f06f 0015 	mvn.w	r0, #21
   123e4:	4770      	bx	lr
   123e6:	f06f 0015 	mvn.w	r0, #21
   123ea:	4770      	bx	lr
   123ec:	f06f 0015 	mvn.w	r0, #21
}
   123f0:	4770      	bx	lr

000123f2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   123f2:	b570      	push	{r4, r5, r6, lr}
   123f4:	4605      	mov	r5, r0
   123f6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   123f8:	f7ff ff91 	bl	1231e <validate_args>

	if (rv < 0) {
   123fc:	1e04      	subs	r4, r0, #0
   123fe:	db30      	blt.n	12462 <onoff_request+0x70>
   12400:	f04f 0340 	mov.w	r3, #64	; 0x40
   12404:	f3ef 8211 	mrs	r2, BASEPRI
   12408:	f383 8812 	msr	BASEPRI_MAX, r3
   1240c:	f3bf 8f6f 	isb	sy
   12410:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12412:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   12416:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1241a:	8b6b      	ldrh	r3, [r5, #26]
   1241c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12420:	428b      	cmp	r3, r1
   12422:	d02c      	beq.n	1247e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   12424:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   12426:	f1bc 0f02 	cmp.w	ip, #2
   1242a:	d008      	beq.n	1243e <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1242c:	f1bc 0f06 	cmp.w	ip, #6
   12430:	d819      	bhi.n	12466 <onoff_request+0x74>
   12432:	e8df f00c 	tbb	[pc, ip]
   12436:	181e      	.short	0x181e
   12438:	2a1e1818 	.word	0x2a1e1818
   1243c:	1e          	.byte	0x1e
   1243d:	00          	.byte	0x00
		mgr->refs += 1U;
   1243e:	3301      	adds	r3, #1
   12440:	836b      	strh	r3, [r5, #26]
		notify = true;
   12442:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   12444:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   12446:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   12448:	b128      	cbz	r0, 12456 <onoff_request+0x64>
	parent->next = child;
   1244a:	2000      	movs	r0, #0
   1244c:	6030      	str	r0, [r6, #0]
	return list->tail;
   1244e:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   12450:	b308      	cbz	r0, 12496 <onoff_request+0xa4>
	parent->next = child;
   12452:	6006      	str	r6, [r0, #0]
	list->tail = node;
   12454:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   12456:	bb09      	cbnz	r1, 1249c <onoff_request+0xaa>
	__asm__ volatile(
   12458:	f38e 8811 	msr	BASEPRI, lr
   1245c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12460:	bb0b      	cbnz	r3, 124a6 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   12462:	4620      	mov	r0, r4
   12464:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   12466:	f06f 0404 	mvn.w	r4, #4
   1246a:	2300      	movs	r3, #0
   1246c:	4619      	mov	r1, r3
   1246e:	4618      	mov	r0, r3
   12470:	e7ea      	b.n	12448 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   12472:	fabc f18c 	clz	r1, ip
   12476:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   12478:	2300      	movs	r3, #0
		add_client = true;
   1247a:	2001      	movs	r0, #1
   1247c:	e7e4      	b.n	12448 <onoff_request+0x56>
		rv = -EAGAIN;
   1247e:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   12482:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   12484:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   12486:	4618      	mov	r0, r3
   12488:	e7de      	b.n	12448 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   1248a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1248e:	2300      	movs	r3, #0
   12490:	4619      	mov	r1, r3
   12492:	4618      	mov	r0, r3
   12494:	e7d8      	b.n	12448 <onoff_request+0x56>
   12496:	606e      	str	r6, [r5, #4]
	list->head = node;
   12498:	602e      	str	r6, [r5, #0]
}
   1249a:	e7dc      	b.n	12456 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   1249c:	2102      	movs	r1, #2
   1249e:	4628      	mov	r0, r5
   124a0:	f7f8 ff62 	bl	b368 <process_event>
   124a4:	e7dd      	b.n	12462 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   124a6:	2300      	movs	r3, #0
   124a8:	4662      	mov	r2, ip
   124aa:	4631      	mov	r1, r6
   124ac:	4628      	mov	r0, r5
   124ae:	f7ff ff4b 	bl	12348 <notify_one>
   124b2:	e7d6      	b.n	12462 <onoff_request+0x70>

000124b4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   124b4:	4602      	mov	r2, r0
   124b6:	b1b0      	cbz	r0, 124e6 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   124b8:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   124ba:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   124be:	2b02      	cmp	r3, #2
   124c0:	d00b      	beq.n	124da <sys_notify_validate+0x26>
   124c2:	2b03      	cmp	r3, #3
   124c4:	d004      	beq.n	124d0 <sys_notify_validate+0x1c>
   124c6:	2b01      	cmp	r3, #1
   124c8:	d004      	beq.n	124d4 <sys_notify_validate+0x20>
   124ca:	f06f 0015 	mvn.w	r0, #21
   124ce:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   124d0:	6803      	ldr	r3, [r0, #0]
   124d2:	b15b      	cbz	r3, 124ec <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   124d4:	2000      	movs	r0, #0
   124d6:	6090      	str	r0, [r2, #8]
   124d8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   124da:	6803      	ldr	r3, [r0, #0]
   124dc:	2b00      	cmp	r3, #0
   124de:	d1f9      	bne.n	124d4 <sys_notify_validate+0x20>
			rv = -EINVAL;
   124e0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   124e4:	4770      	bx	lr
		return -EINVAL;
   124e6:	f06f 0015 	mvn.w	r0, #21
   124ea:	4770      	bx	lr
			rv = -EINVAL;
   124ec:	f06f 0015 	mvn.w	r0, #21
   124f0:	4770      	bx	lr

000124f2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   124f2:	b510      	push	{r4, lr}
   124f4:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   124f6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   124f8:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   124fc:	6081      	str	r1, [r0, #8]
	switch (method) {
   124fe:	2a02      	cmp	r2, #2
   12500:	d004      	beq.n	1250c <sys_notify_finalize+0x1a>
   12502:	2a03      	cmp	r2, #3
   12504:	d105      	bne.n	12512 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12506:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12508:	2000      	movs	r0, #0
		break;
   1250a:	e004      	b.n	12516 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1250c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1250e:	2400      	movs	r4, #0
		break;
   12510:	e001      	b.n	12516 <sys_notify_finalize+0x24>
	switch (method) {
   12512:	2400      	movs	r4, #0
   12514:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12516:	2200      	movs	r2, #0
   12518:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1251a:	b108      	cbz	r0, 12520 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1251c:	f7ff fa30 	bl	11980 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12520:	4620      	mov	r0, r4
   12522:	bd10      	pop	{r4, pc}

00012524 <extract_decimal>:
{
   12524:	4684      	mov	ip, r0
	const char *sp = *str;
   12526:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   12528:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1252a:	e006      	b.n	1253a <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   1252c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   12530:	3201      	adds	r2, #1
   12532:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   12536:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1253a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1253c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   12540:	2909      	cmp	r1, #9
   12542:	d9f3      	bls.n	1252c <extract_decimal+0x8>
	*str = sp;
   12544:	f8cc 2000 	str.w	r2, [ip]
}
   12548:	4770      	bx	lr

0001254a <extract_width>:
{
   1254a:	b530      	push	{r4, r5, lr}
   1254c:	b083      	sub	sp, #12
   1254e:	4604      	mov	r4, r0
   12550:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   12552:	7803      	ldrb	r3, [r0, #0]
   12554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12558:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   1255a:	460d      	mov	r5, r1
   1255c:	780b      	ldrb	r3, [r1, #0]
   1255e:	2b2a      	cmp	r3, #42	; 0x2a
   12560:	d018      	beq.n	12594 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   12562:	a801      	add	r0, sp, #4
   12564:	f7ff ffde 	bl	12524 <extract_decimal>
	if (sp != wp) {
   12568:	9b01      	ldr	r3, [sp, #4]
   1256a:	429d      	cmp	r5, r3
   1256c:	d00f      	beq.n	1258e <extract_width+0x44>
		conv->width_present = true;
   1256e:	7823      	ldrb	r3, [r4, #0]
   12570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12574:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   12576:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   12578:	b2db      	uxtb	r3, r3
   1257a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   1257e:	2800      	cmp	r0, #0
   12580:	db10      	blt.n	125a4 <extract_width+0x5a>
   12582:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   12584:	4313      	orrs	r3, r2
   12586:	7822      	ldrb	r2, [r4, #0]
   12588:	f363 0241 	bfi	r2, r3, #1, #1
   1258c:	7022      	strb	r2, [r4, #0]
	return sp;
   1258e:	9801      	ldr	r0, [sp, #4]
}
   12590:	b003      	add	sp, #12
   12592:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   12594:	7843      	ldrb	r3, [r0, #1]
   12596:	f043 0301 	orr.w	r3, r3, #1
   1259a:	7043      	strb	r3, [r0, #1]
		return ++sp;
   1259c:	4608      	mov	r0, r1
   1259e:	3001      	adds	r0, #1
   125a0:	9001      	str	r0, [sp, #4]
   125a2:	e7f5      	b.n	12590 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   125a4:	2201      	movs	r2, #1
   125a6:	e7ed      	b.n	12584 <extract_width+0x3a>

000125a8 <extract_prec>:
{
   125a8:	b510      	push	{r4, lr}
   125aa:	b082      	sub	sp, #8
   125ac:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   125ae:	780b      	ldrb	r3, [r1, #0]
   125b0:	2b2e      	cmp	r3, #46	; 0x2e
   125b2:	bf14      	ite	ne
   125b4:	2300      	movne	r3, #0
   125b6:	2301      	moveq	r3, #1
   125b8:	7842      	ldrb	r2, [r0, #1]
   125ba:	f363 0241 	bfi	r2, r3, #1, #1
   125be:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   125c0:	b1c3      	cbz	r3, 125f4 <extract_prec+0x4c>
   125c2:	4604      	mov	r4, r0
	++sp;
   125c4:	9b01      	ldr	r3, [sp, #4]
   125c6:	1c5a      	adds	r2, r3, #1
   125c8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   125ca:	785b      	ldrb	r3, [r3, #1]
   125cc:	2b2a      	cmp	r3, #42	; 0x2a
   125ce:	d013      	beq.n	125f8 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   125d0:	a801      	add	r0, sp, #4
   125d2:	f7ff ffa7 	bl	12524 <extract_decimal>
	conv->prec_value = prec;
   125d6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   125d8:	7823      	ldrb	r3, [r4, #0]
   125da:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   125de:	2800      	cmp	r0, #0
   125e0:	db12      	blt.n	12608 <extract_prec+0x60>
   125e2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   125e4:	4313      	orrs	r3, r2
   125e6:	7822      	ldrb	r2, [r4, #0]
   125e8:	f363 0241 	bfi	r2, r3, #1, #1
   125ec:	7022      	strb	r2, [r4, #0]
	return sp;
   125ee:	9801      	ldr	r0, [sp, #4]
}
   125f0:	b002      	add	sp, #8
   125f2:	bd10      	pop	{r4, pc}
		return sp;
   125f4:	4608      	mov	r0, r1
   125f6:	e7fb      	b.n	125f0 <extract_prec+0x48>
		conv->prec_star = true;
   125f8:	7843      	ldrb	r3, [r0, #1]
   125fa:	f043 0304 	orr.w	r3, r3, #4
   125fe:	7043      	strb	r3, [r0, #1]
		return ++sp;
   12600:	4610      	mov	r0, r2
   12602:	3001      	adds	r0, #1
   12604:	9001      	str	r0, [sp, #4]
   12606:	e7f3      	b.n	125f0 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   12608:	2201      	movs	r2, #1
   1260a:	e7eb      	b.n	125e4 <extract_prec+0x3c>

0001260c <extract_length>:
{
   1260c:	4602      	mov	r2, r0
	switch (*sp) {
   1260e:	780b      	ldrb	r3, [r1, #0]
   12610:	3b4c      	subs	r3, #76	; 0x4c
   12612:	2b2e      	cmp	r3, #46	; 0x2e
   12614:	d85b      	bhi.n	126ce <extract_length+0xc2>
   12616:	e8df f003 	tbb	[pc, r3]
   1261a:	5a4f      	.short	0x5a4f
   1261c:	5a5a5a5a 	.word	0x5a5a5a5a
   12620:	5a5a5a5a 	.word	0x5a5a5a5a
   12624:	5a5a5a5a 	.word	0x5a5a5a5a
   12628:	5a5a5a5a 	.word	0x5a5a5a5a
   1262c:	5a5a5a5a 	.word	0x5a5a5a5a
   12630:	5a5a5a5a 	.word	0x5a5a5a5a
   12634:	5a185a5a 	.word	0x5a185a5a
   12638:	5a295a3a 	.word	0x5a295a3a
   1263c:	5a5a5a5a 	.word	0x5a5a5a5a
   12640:	5a485a5a 	.word	0x5a485a5a
   12644:	5a5a5a5a 	.word	0x5a5a5a5a
   12648:	41          	.byte	0x41
   12649:	00          	.byte	0x00
		if (*++sp == 'h') {
   1264a:	1c48      	adds	r0, r1, #1
   1264c:	784b      	ldrb	r3, [r1, #1]
   1264e:	2b68      	cmp	r3, #104	; 0x68
   12650:	d005      	beq.n	1265e <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   12652:	7853      	ldrb	r3, [r2, #1]
   12654:	2102      	movs	r1, #2
   12656:	f361 03c6 	bfi	r3, r1, #3, #4
   1265a:	7053      	strb	r3, [r2, #1]
   1265c:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   1265e:	7853      	ldrb	r3, [r2, #1]
   12660:	2001      	movs	r0, #1
   12662:	f360 03c6 	bfi	r3, r0, #3, #4
   12666:	7053      	strb	r3, [r2, #1]
			++sp;
   12668:	1c88      	adds	r0, r1, #2
   1266a:	4770      	bx	lr
		if (*++sp == 'l') {
   1266c:	1c48      	adds	r0, r1, #1
   1266e:	784b      	ldrb	r3, [r1, #1]
   12670:	2b6c      	cmp	r3, #108	; 0x6c
   12672:	d005      	beq.n	12680 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   12674:	7853      	ldrb	r3, [r2, #1]
   12676:	2103      	movs	r1, #3
   12678:	f361 03c6 	bfi	r3, r1, #3, #4
   1267c:	7053      	strb	r3, [r2, #1]
   1267e:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   12680:	7853      	ldrb	r3, [r2, #1]
   12682:	2004      	movs	r0, #4
   12684:	f360 03c6 	bfi	r3, r0, #3, #4
   12688:	7053      	strb	r3, [r2, #1]
			++sp;
   1268a:	1c88      	adds	r0, r1, #2
   1268c:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   1268e:	7853      	ldrb	r3, [r2, #1]
   12690:	2005      	movs	r0, #5
   12692:	f360 03c6 	bfi	r3, r0, #3, #4
   12696:	7053      	strb	r3, [r2, #1]
		++sp;
   12698:	1c48      	adds	r0, r1, #1
		break;
   1269a:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   1269c:	7853      	ldrb	r3, [r2, #1]
   1269e:	2006      	movs	r0, #6
   126a0:	f360 03c6 	bfi	r3, r0, #3, #4
   126a4:	7053      	strb	r3, [r2, #1]
		++sp;
   126a6:	1c48      	adds	r0, r1, #1
		break;
   126a8:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   126aa:	7853      	ldrb	r3, [r2, #1]
   126ac:	2007      	movs	r0, #7
   126ae:	f360 03c6 	bfi	r3, r0, #3, #4
   126b2:	7053      	strb	r3, [r2, #1]
		++sp;
   126b4:	1c48      	adds	r0, r1, #1
		break;
   126b6:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   126b8:	7853      	ldrb	r3, [r2, #1]
   126ba:	2008      	movs	r0, #8
   126bc:	f360 03c6 	bfi	r3, r0, #3, #4
   126c0:	7053      	strb	r3, [r2, #1]
		++sp;
   126c2:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   126c4:	7813      	ldrb	r3, [r2, #0]
   126c6:	f043 0302 	orr.w	r3, r3, #2
   126ca:	7013      	strb	r3, [r2, #0]
		break;
   126cc:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   126ce:	7853      	ldrb	r3, [r2, #1]
   126d0:	f36f 03c6 	bfc	r3, #3, #4
   126d4:	7053      	strb	r3, [r2, #1]
		break;
   126d6:	4608      	mov	r0, r1
}
   126d8:	4770      	bx	lr

000126da <extract_specifier>:
{
   126da:	b500      	push	{lr}
   126dc:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   126de:	4608      	mov	r0, r1
   126e0:	f810 3b01 	ldrb.w	r3, [r0], #1
   126e4:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   126e6:	2b78      	cmp	r3, #120	; 0x78
   126e8:	d817      	bhi.n	1271a <extract_specifier+0x40>
   126ea:	2b6e      	cmp	r3, #110	; 0x6e
   126ec:	d229      	bcs.n	12742 <extract_specifier+0x68>
   126ee:	2b69      	cmp	r3, #105	; 0x69
   126f0:	d813      	bhi.n	1271a <extract_specifier+0x40>
   126f2:	2b58      	cmp	r3, #88	; 0x58
   126f4:	d317      	bcc.n	12726 <extract_specifier+0x4c>
   126f6:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   126fa:	fa5f fc8c 	uxtb.w	ip, ip
   126fe:	2101      	movs	r1, #1
   12700:	fa01 f10c 	lsl.w	r1, r1, ip
   12704:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12708:	d114      	bne.n	12734 <extract_specifier+0x5a>
   1270a:	f640 0c01 	movw	ip, #2049	; 0x801
   1270e:	ea11 0f0c 	tst.w	r1, ip
   12712:	d155      	bne.n	127c0 <extract_specifier+0xe6>
   12714:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12718:	d13a      	bne.n	12790 <extract_specifier+0xb6>
		conv->invalid = true;
   1271a:	7813      	ldrb	r3, [r2, #0]
   1271c:	f043 0301 	orr.w	r3, r3, #1
   12720:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   12722:	2100      	movs	r1, #0
		break;
   12724:	e042      	b.n	127ac <extract_specifier+0xd2>
	switch (conv->specifier) {
   12726:	2b41      	cmp	r3, #65	; 0x41
   12728:	d004      	beq.n	12734 <extract_specifier+0x5a>
   1272a:	d3f6      	bcc.n	1271a <extract_specifier+0x40>
   1272c:	3b45      	subs	r3, #69	; 0x45
   1272e:	b2db      	uxtb	r3, r3
   12730:	2b02      	cmp	r3, #2
   12732:	d8f2      	bhi.n	1271a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   12734:	7893      	ldrb	r3, [r2, #2]
   12736:	2104      	movs	r1, #4
   12738:	f361 0302 	bfi	r3, r1, #0, #3
   1273c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   1273e:	2101      	movs	r1, #1
			break;
   12740:	e034      	b.n	127ac <extract_specifier+0xd2>
	switch (conv->specifier) {
   12742:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   12746:	b2c9      	uxtb	r1, r1
   12748:	f04f 0c01 	mov.w	ip, #1
   1274c:	fa0c fc01 	lsl.w	ip, ip, r1
   12750:	f240 4182 	movw	r1, #1154	; 0x482
   12754:	ea1c 0f01 	tst.w	ip, r1
   12758:	bf14      	ite	ne
   1275a:	f04f 0e01 	movne.w	lr, #1
   1275e:	f04f 0e00 	moveq.w	lr, #0
   12762:	d12d      	bne.n	127c0 <extract_specifier+0xe6>
   12764:	f01c 0f24 	tst.w	ip, #36	; 0x24
   12768:	bf14      	ite	ne
   1276a:	2101      	movne	r1, #1
   1276c:	2100      	moveq	r1, #0
   1276e:	d139      	bne.n	127e4 <extract_specifier+0x10a>
   12770:	f01c 0c01 	ands.w	ip, ip, #1
   12774:	d0d1      	beq.n	1271a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   12776:	7893      	ldrb	r3, [r2, #2]
   12778:	f04f 0e03 	mov.w	lr, #3
   1277c:	f36e 0302 	bfi	r3, lr, #0, #3
   12780:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   12782:	7853      	ldrb	r3, [r2, #1]
   12784:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12788:	2b40      	cmp	r3, #64	; 0x40
   1278a:	d10f      	bne.n	127ac <extract_specifier+0xd2>
			unsupported = true;
   1278c:	4661      	mov	r1, ip
   1278e:	e00d      	b.n	127ac <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   12790:	7891      	ldrb	r1, [r2, #2]
   12792:	f04f 0c01 	mov.w	ip, #1
   12796:	f36c 0102 	bfi	r1, ip, #0, #3
   1279a:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1279c:	7851      	ldrb	r1, [r2, #1]
   1279e:	f001 0178 	and.w	r1, r1, #120	; 0x78
   127a2:	2940      	cmp	r1, #64	; 0x40
   127a4:	d013      	beq.n	127ce <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   127a6:	2b63      	cmp	r3, #99	; 0x63
   127a8:	d018      	beq.n	127dc <extract_specifier+0x102>
	bool unsupported = false;
   127aa:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   127ac:	7813      	ldrb	r3, [r2, #0]
   127ae:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   127b2:	ea41 010c 	orr.w	r1, r1, ip
   127b6:	f361 0341 	bfi	r3, r1, #1, #1
   127ba:	7013      	strb	r3, [r2, #0]
}
   127bc:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   127c0:	7891      	ldrb	r1, [r2, #2]
   127c2:	f04f 0c02 	mov.w	ip, #2
   127c6:	f36c 0102 	bfi	r1, ip, #0, #3
   127ca:	7091      	strb	r1, [r2, #2]
   127cc:	e7e6      	b.n	1279c <extract_specifier+0xc2>
			conv->invalid = true;
   127ce:	f892 c000 	ldrb.w	ip, [r2]
   127d2:	f04c 0c01 	orr.w	ip, ip, #1
   127d6:	f882 c000 	strb.w	ip, [r2]
   127da:	e7e4      	b.n	127a6 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   127dc:	3900      	subs	r1, #0
   127de:	bf18      	it	ne
   127e0:	2101      	movne	r1, #1
   127e2:	e7e3      	b.n	127ac <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   127e4:	7893      	ldrb	r3, [r2, #2]
   127e6:	f04f 0c03 	mov.w	ip, #3
   127ea:	f36c 0302 	bfi	r3, ip, #0, #3
   127ee:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   127f0:	7853      	ldrb	r3, [r2, #1]
   127f2:	f013 0f78 	tst.w	r3, #120	; 0x78
   127f6:	d1d9      	bne.n	127ac <extract_specifier+0xd2>
	bool unsupported = false;
   127f8:	4671      	mov	r1, lr
   127fa:	e7d7      	b.n	127ac <extract_specifier+0xd2>

000127fc <extract_conversion>:
{
   127fc:	b510      	push	{r4, lr}
   127fe:	4604      	mov	r4, r0
   12800:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   12802:	2300      	movs	r3, #0
   12804:	6023      	str	r3, [r4, #0]
   12806:	6063      	str	r3, [r4, #4]
   12808:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   1280a:	784b      	ldrb	r3, [r1, #1]
   1280c:	2b25      	cmp	r3, #37	; 0x25
   1280e:	d014      	beq.n	1283a <extract_conversion+0x3e>
   12810:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   12812:	4620      	mov	r0, r4
   12814:	f7f8 fe5e 	bl	b4d4 <extract_flags>
   12818:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   1281a:	4620      	mov	r0, r4
   1281c:	f7ff fe95 	bl	1254a <extract_width>
   12820:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   12822:	4620      	mov	r0, r4
   12824:	f7ff fec0 	bl	125a8 <extract_prec>
   12828:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   1282a:	4620      	mov	r0, r4
   1282c:	f7ff feee 	bl	1260c <extract_length>
   12830:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   12832:	4620      	mov	r0, r4
   12834:	f7ff ff51 	bl	126da <extract_specifier>
}
   12838:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   1283a:	3002      	adds	r0, #2
   1283c:	70e3      	strb	r3, [r4, #3]
		return sp;
   1283e:	e7fb      	b.n	12838 <extract_conversion+0x3c>

00012840 <conversion_radix>:
	switch (specifier) {
   12840:	286f      	cmp	r0, #111	; 0x6f
   12842:	d00c      	beq.n	1285e <conversion_radix+0x1e>
   12844:	d905      	bls.n	12852 <conversion_radix+0x12>
   12846:	2870      	cmp	r0, #112	; 0x70
   12848:	d00b      	beq.n	12862 <conversion_radix+0x22>
   1284a:	2878      	cmp	r0, #120	; 0x78
   1284c:	d10b      	bne.n	12866 <conversion_radix+0x26>
		return 16;
   1284e:	2010      	movs	r0, #16
   12850:	4770      	bx	lr
	switch (specifier) {
   12852:	2858      	cmp	r0, #88	; 0x58
   12854:	d001      	beq.n	1285a <conversion_radix+0x1a>
   12856:	200a      	movs	r0, #10
   12858:	4770      	bx	lr
		return 16;
   1285a:	2010      	movs	r0, #16
   1285c:	4770      	bx	lr
		return 8;
   1285e:	2008      	movs	r0, #8
   12860:	4770      	bx	lr
		return 16;
   12862:	2010      	movs	r0, #16
   12864:	4770      	bx	lr
	switch (specifier) {
   12866:	200a      	movs	r0, #10
}
   12868:	4770      	bx	lr

0001286a <encode_uint>:
{
   1286a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1286e:	4605      	mov	r5, r0
   12870:	460c      	mov	r4, r1
   12872:	4693      	mov	fp, r2
   12874:	4699      	mov	r9, r3
   12876:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   12878:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1287a:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   1287e:	f7ff ffdf 	bl	12840 <conversion_radix>
   12882:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   12884:	e015      	b.n	128b2 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12886:	f1ba 0f19 	cmp.w	sl, #25
   1288a:	d820      	bhi.n	128ce <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1288c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1288e:	3237      	adds	r2, #55	; 0x37
   12890:	b2d2      	uxtb	r2, r2
   12892:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   12896:	4632      	mov	r2, r6
   12898:	4643      	mov	r3, r8
   1289a:	4628      	mov	r0, r5
   1289c:	4621      	mov	r1, r4
   1289e:	f7ee f813 	bl	8c8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   128a2:	42b5      	cmp	r5, r6
   128a4:	f174 0400 	sbcs.w	r4, r4, #0
   128a8:	d315      	bcc.n	128d6 <encode_uint+0x6c>
   128aa:	454f      	cmp	r7, r9
   128ac:	d913      	bls.n	128d6 <encode_uint+0x6c>
		value /= radix;
   128ae:	4605      	mov	r5, r0
   128b0:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   128b2:	f04f 0800 	mov.w	r8, #0
   128b6:	4632      	mov	r2, r6
   128b8:	4643      	mov	r3, r8
   128ba:	4628      	mov	r0, r5
   128bc:	4621      	mov	r1, r4
   128be:	f7ee f803 	bl	8c8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   128c2:	2a09      	cmp	r2, #9
   128c4:	d8df      	bhi.n	12886 <encode_uint+0x1c>
   128c6:	b2d2      	uxtb	r2, r2
   128c8:	3230      	adds	r2, #48	; 0x30
   128ca:	b2d2      	uxtb	r2, r2
   128cc:	e7e1      	b.n	12892 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   128ce:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   128d0:	3257      	adds	r2, #87	; 0x57
   128d2:	b2d2      	uxtb	r2, r2
   128d4:	e7dd      	b.n	12892 <encode_uint+0x28>
	if (conv->flag_hash) {
   128d6:	f89b 3000 	ldrb.w	r3, [fp]
   128da:	f013 0f20 	tst.w	r3, #32
   128de:	d003      	beq.n	128e8 <encode_uint+0x7e>
		if (radix == 8) {
   128e0:	2e08      	cmp	r6, #8
   128e2:	d004      	beq.n	128ee <encode_uint+0x84>
		} else if (radix == 16) {
   128e4:	2e10      	cmp	r6, #16
   128e6:	d009      	beq.n	128fc <encode_uint+0x92>
}
   128e8:	4638      	mov	r0, r7
   128ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   128ee:	f89b 3002 	ldrb.w	r3, [fp, #2]
   128f2:	f043 0308 	orr.w	r3, r3, #8
   128f6:	f88b 3002 	strb.w	r3, [fp, #2]
   128fa:	e7f5      	b.n	128e8 <encode_uint+0x7e>
			conv->altform_0c = true;
   128fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
   12900:	f043 0310 	orr.w	r3, r3, #16
   12904:	f88b 3002 	strb.w	r3, [fp, #2]
   12908:	e7ee      	b.n	128e8 <encode_uint+0x7e>

0001290a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   1290a:	7843      	ldrb	r3, [r0, #1]
   1290c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   12910:	2b07      	cmp	r3, #7
   12912:	d818      	bhi.n	12946 <store_count+0x3c>
   12914:	e8df f003 	tbb	[pc, r3]
   12918:	0a080604 	.word	0x0a080604
   1291c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   12920:	600a      	str	r2, [r1, #0]
		break;
   12922:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   12924:	700a      	strb	r2, [r1, #0]
		break;
   12926:	4770      	bx	lr
		*(short *)dp = (short)count;
   12928:	800a      	strh	r2, [r1, #0]
		break;
   1292a:	4770      	bx	lr
		*(long *)dp = (long)count;
   1292c:	600a      	str	r2, [r1, #0]
		break;
   1292e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   12930:	17d3      	asrs	r3, r2, #31
   12932:	600a      	str	r2, [r1, #0]
   12934:	604b      	str	r3, [r1, #4]
		break;
   12936:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   12938:	17d3      	asrs	r3, r2, #31
   1293a:	600a      	str	r2, [r1, #0]
   1293c:	604b      	str	r3, [r1, #4]
		break;
   1293e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   12940:	600a      	str	r2, [r1, #0]
		break;
   12942:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12944:	600a      	str	r2, [r1, #0]
}
   12946:	4770      	bx	lr

00012948 <outs>:
{
   12948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1294c:	4607      	mov	r7, r0
   1294e:	460e      	mov	r6, r1
   12950:	4614      	mov	r4, r2
   12952:	4698      	mov	r8, r3
	size_t count = 0;
   12954:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12956:	e006      	b.n	12966 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   12958:	4631      	mov	r1, r6
   1295a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1295e:	47b8      	blx	r7
		if (rc < 0) {
   12960:	2800      	cmp	r0, #0
   12962:	db09      	blt.n	12978 <outs+0x30>
		++count;
   12964:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12966:	4544      	cmp	r4, r8
   12968:	d3f6      	bcc.n	12958 <outs+0x10>
   1296a:	f1b8 0f00 	cmp.w	r8, #0
   1296e:	d102      	bne.n	12976 <outs+0x2e>
   12970:	7823      	ldrb	r3, [r4, #0]
   12972:	2b00      	cmp	r3, #0
   12974:	d1f0      	bne.n	12958 <outs+0x10>
	return (int)count;
   12976:	4628      	mov	r0, r5
}
   12978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001297c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1297c:	b40f      	push	{r0, r1, r2, r3}
   1297e:	b500      	push	{lr}
   12980:	b083      	sub	sp, #12
   12982:	a904      	add	r1, sp, #16
   12984:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   12988:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1298a:	f7f8 fcdf 	bl	b34c <vprintk>

	va_end(ap);
}
   1298e:	b003      	add	sp, #12
   12990:	f85d eb04 	ldr.w	lr, [sp], #4
   12994:	b004      	add	sp, #16
   12996:	4770      	bx	lr

00012998 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   12998:	4770      	bx	lr

0001299a <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   1299a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1299c:	f001 021f 	and.w	r2, r1, #31
   129a0:	2301      	movs	r3, #1
   129a2:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   129a4:	0949      	lsrs	r1, r1, #5
   129a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   129aa:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   129ac:	f3bf 8f5b 	dmb	ish
   129b0:	e850 2f00 	ldrex	r2, [r0]
   129b4:	ea02 0c01 	and.w	ip, r2, r1
   129b8:	e840 ce00 	strex	lr, ip, [r0]
   129bc:	f1be 0f00 	cmp.w	lr, #0
   129c0:	d1f6      	bne.n	129b0 <atomic_test_and_clear_bit+0x16>
   129c2:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   129c6:	4213      	tst	r3, r2
}
   129c8:	bf14      	ite	ne
   129ca:	2001      	movne	r0, #1
   129cc:	2000      	moveq	r0, #0
   129ce:	f85d fb04 	ldr.w	pc, [sp], #4

000129d2 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   129d2:	f001 021f 	and.w	r2, r1, #31
   129d6:	2301      	movs	r3, #1
   129d8:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   129da:	0949      	lsrs	r1, r1, #5
   129dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   129e0:	f3bf 8f5b 	dmb	ish
   129e4:	e850 2f00 	ldrex	r2, [r0]
   129e8:	431a      	orrs	r2, r3
   129ea:	e840 2100 	strex	r1, r2, [r0]
   129ee:	2900      	cmp	r1, #0
   129f0:	d1f8      	bne.n	129e4 <atomic_set_bit+0x12>
   129f2:	f3bf 8f5b 	dmb	ish
}
   129f6:	4770      	bx	lr

000129f8 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   129f8:	2000      	movs	r0, #0
   129fa:	4770      	bx	lr

000129fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   129fc:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   129fe:	f002 fab9 	bl	14f74 <z_fatal_error>
}
   12a02:	bd08      	pop	{r3, pc}

00012a04 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   12a04:	b508      	push	{r3, lr}
   12a06:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12a08:	6800      	ldr	r0, [r0, #0]
   12a0a:	f7ff fff7 	bl	129fc <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   12a0e:	bd08      	pop	{r3, pc}

00012a10 <arch_irq_enable>:
{
   12a10:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   12a12:	b240      	sxtb	r0, r0
   12a14:	f7f9 f9e6 	bl	bde4 <__NVIC_EnableIRQ>
}
   12a18:	bd08      	pop	{r3, pc}

00012a1a <arch_irq_disable>:
{
   12a1a:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   12a1c:	b240      	sxtb	r0, r0
   12a1e:	f7f9 f9ef 	bl	be00 <__NVIC_DisableIRQ>
}
   12a22:	bd08      	pop	{r3, pc}

00012a24 <z_arm_irq_priority_set>:
{
   12a24:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12a26:	f012 0f01 	tst.w	r2, #1
   12a2a:	d104      	bne.n	12a36 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   12a2c:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12a2e:	b240      	sxtb	r0, r0
   12a30:	f7f9 f9f8 	bl	be24 <__NVIC_SetPriority>
}
   12a34:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12a36:	2100      	movs	r1, #0
   12a38:	e7f9      	b.n	12a2e <z_arm_irq_priority_set+0xa>

00012a3a <z_irq_spurious>:
{
   12a3a:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12a3c:	2100      	movs	r1, #0
   12a3e:	2001      	movs	r0, #1
   12a40:	f7ff ffdc 	bl	129fc <z_arm_fatal_error>
}
   12a44:	bd08      	pop	{r3, pc}

00012a46 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   12a46:	b508      	push	{r3, lr}
	handler();
   12a48:	f7f9 fa1e 	bl	be88 <z_SysNmiOnReset>
	z_arm_int_exit();
   12a4c:	f7f9 fb10 	bl	c070 <z_arm_exc_exit>
}
   12a50:	bd08      	pop	{r3, pc}

00012a52 <memory_fault_recoverable>:
}
   12a52:	2000      	movs	r0, #0
   12a54:	4770      	bx	lr

00012a56 <debug_monitor>:
	*recoverable = false;
   12a56:	2300      	movs	r3, #0
   12a58:	700b      	strb	r3, [r1, #0]
}
   12a5a:	4770      	bx	lr

00012a5c <fault_handle>:
{
   12a5c:	b508      	push	{r3, lr}
	*recoverable = false;
   12a5e:	2300      	movs	r3, #0
   12a60:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   12a62:	1ecb      	subs	r3, r1, #3
   12a64:	2b09      	cmp	r3, #9
   12a66:	d81a      	bhi.n	12a9e <fault_handle+0x42>
   12a68:	e8df f003 	tbb	[pc, r3]
   12a6c:	110d0905 	.word	0x110d0905
   12a70:	19191919 	.word	0x19191919
   12a74:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   12a76:	4611      	mov	r1, r2
   12a78:	f7f9 fc08 	bl	c28c <hard_fault>
		break;
   12a7c:	e010      	b.n	12aa0 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   12a7e:	2100      	movs	r1, #0
   12a80:	f7f9 fb9a 	bl	c1b8 <mem_manage_fault>
		break;
   12a84:	e00c      	b.n	12aa0 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   12a86:	2100      	movs	r1, #0
   12a88:	f7f9 fb00 	bl	c08c <bus_fault>
		break;
   12a8c:	e008      	b.n	12aa0 <fault_handle+0x44>
		reason = usage_fault(esf);
   12a8e:	f7f9 fb43 	bl	c118 <usage_fault>
		break;
   12a92:	e005      	b.n	12aa0 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   12a94:	4611      	mov	r1, r2
   12a96:	f7ff ffde 	bl	12a56 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12a9a:	2000      	movs	r0, #0
		break;
   12a9c:	e000      	b.n	12aa0 <fault_handle+0x44>
	switch (fault) {
   12a9e:	2000      	movs	r0, #0
}
   12aa0:	bd08      	pop	{r3, pc}

00012aa2 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   12aa2:	6843      	ldr	r3, [r0, #4]
   12aa4:	1e5a      	subs	r2, r3, #1
		&&
   12aa6:	4213      	tst	r3, r2
   12aa8:	d106      	bne.n	12ab8 <mpu_partition_is_valid+0x16>
		&&
   12aaa:	2b1f      	cmp	r3, #31
   12aac:	d906      	bls.n	12abc <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   12aae:	6803      	ldr	r3, [r0, #0]
		&&
   12ab0:	421a      	tst	r2, r3
   12ab2:	d005      	beq.n	12ac0 <mpu_partition_is_valid+0x1e>
   12ab4:	2000      	movs	r0, #0
   12ab6:	4770      	bx	lr
   12ab8:	2000      	movs	r0, #0
   12aba:	4770      	bx	lr
   12abc:	2000      	movs	r0, #0
   12abe:	4770      	bx	lr
   12ac0:	2001      	movs	r0, #1
}
   12ac2:	4770      	bx	lr

00012ac4 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   12ac4:	2807      	cmp	r0, #7
   12ac6:	d805      	bhi.n	12ad4 <region_allocate_and_init+0x10>
{
   12ac8:	b510      	push	{r4, lr}
   12aca:	4604      	mov	r4, r0
	region_init(index, region_conf);
   12acc:	f7f9 fd38 	bl	c540 <region_init>
	return index;
   12ad0:	4620      	mov	r0, r4
}
   12ad2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12ad4:	f06f 0015 	mvn.w	r0, #21
}
   12ad8:	4770      	bx	lr

00012ada <mpu_configure_region>:
{
   12ada:	b500      	push	{lr}
   12adc:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   12ade:	680b      	ldr	r3, [r1, #0]
   12ae0:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   12ae2:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12ae4:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   12ae6:	2b20      	cmp	r3, #32
   12ae8:	d912      	bls.n	12b10 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   12aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   12aee:	d811      	bhi.n	12b14 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12af0:	3b01      	subs	r3, #1
   12af2:	fab3 f383 	clz	r3, r3
   12af6:	f1c3 031f 	rsb	r3, r3, #31
   12afa:	005b      	lsls	r3, r3, #1
   12afc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12b00:	4313      	orrs	r3, r2
   12b02:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   12b04:	a901      	add	r1, sp, #4
   12b06:	f7ff ffdd 	bl	12ac4 <region_allocate_and_init>
}
   12b0a:	b005      	add	sp, #20
   12b0c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   12b10:	2308      	movs	r3, #8
   12b12:	e7f5      	b.n	12b00 <mpu_configure_region+0x26>
		return REGION_4G;
   12b14:	233e      	movs	r3, #62	; 0x3e
   12b16:	e7f3      	b.n	12b00 <mpu_configure_region+0x26>

00012b18 <mpu_configure_regions>:
{
   12b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12b1c:	4680      	mov	r8, r0
   12b1e:	460f      	mov	r7, r1
   12b20:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   12b22:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   12b24:	2500      	movs	r5, #0
   12b26:	e009      	b.n	12b3c <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12b28:	4621      	mov	r1, r4
   12b2a:	b2f0      	uxtb	r0, r6
   12b2c:	f7ff ffd5 	bl	12ada <mpu_configure_region>
   12b30:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   12b32:	f110 0f16 	cmn.w	r0, #22
   12b36:	d014      	beq.n	12b62 <mpu_configure_regions+0x4a>
		reg_index++;
   12b38:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   12b3a:	3501      	adds	r5, #1
   12b3c:	42bd      	cmp	r5, r7
   12b3e:	da10      	bge.n	12b62 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   12b40:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   12b44:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   12b48:	6862      	ldr	r2, [r4, #4]
   12b4a:	2a00      	cmp	r2, #0
   12b4c:	d0f5      	beq.n	12b3a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   12b4e:	f1b9 0f00 	cmp.w	r9, #0
   12b52:	d0e9      	beq.n	12b28 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   12b54:	4620      	mov	r0, r4
   12b56:	f7ff ffa4 	bl	12aa2 <mpu_partition_is_valid>
		if (do_sanity_check &&
   12b5a:	2800      	cmp	r0, #0
   12b5c:	d1e4      	bne.n	12b28 <mpu_configure_regions+0x10>
			return -EINVAL;
   12b5e:	f06f 0615 	mvn.w	r6, #21
}
   12b62:	4630      	mov	r0, r6
   12b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012b68 <arm_core_mpu_configure_static_mpu_regions>:
{
   12b68:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12b6a:	f7f9 fcfd 	bl	c568 <mpu_configure_static_mpu_regions>
}
   12b6e:	bd08      	pop	{r3, pc}

00012b70 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   12b70:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   12b72:	f7f9 fd03 	bl	c57c <mpu_configure_dynamic_mpu_regions>
}
   12b76:	bd08      	pop	{r3, pc}

00012b78 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   12b78:	4602      	mov	r2, r0
   12b7a:	e002      	b.n	12b82 <strcpy+0xa>
		*d = *s;
   12b7c:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   12b80:	3101      	adds	r1, #1
	while (*s != '\0') {
   12b82:	780b      	ldrb	r3, [r1, #0]
   12b84:	2b00      	cmp	r3, #0
   12b86:	d1f9      	bne.n	12b7c <strcpy+0x4>
	}

	*d = '\0';
   12b88:	7013      	strb	r3, [r2, #0]

	return dest;
}
   12b8a:	4770      	bx	lr

00012b8c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   12b8c:	4603      	mov	r3, r0
   12b8e:	b1a2      	cbz	r2, 12bba <strncpy+0x2e>
{
   12b90:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   12b92:	780c      	ldrb	r4, [r1, #0]
   12b94:	b12c      	cbz	r4, 12ba2 <strncpy+0x16>
		*d = *s;
   12b96:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   12b9a:	3101      	adds	r1, #1
		d++;
		n--;
   12b9c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   12b9e:	2a00      	cmp	r2, #0
   12ba0:	d1f7      	bne.n	12b92 <strncpy+0x6>
	}

	while (n > 0) {
   12ba2:	b122      	cbz	r2, 12bae <strncpy+0x22>
		*d = '\0';
   12ba4:	2100      	movs	r1, #0
   12ba6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   12baa:	3a01      	subs	r2, #1
   12bac:	e7f9      	b.n	12ba2 <strncpy+0x16>
	}

	return dest;
}
   12bae:	bc10      	pop	{r4}
   12bb0:	4770      	bx	lr
		*d = '\0';
   12bb2:	2100      	movs	r1, #0
   12bb4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12bb8:	3a01      	subs	r2, #1
	while (n > 0) {
   12bba:	2a00      	cmp	r2, #0
   12bbc:	d1f9      	bne.n	12bb2 <strncpy+0x26>
   12bbe:	4770      	bx	lr

00012bc0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12bc0:	4603      	mov	r3, r0
	size_t n = 0;
   12bc2:	2000      	movs	r0, #0

	while (*s != '\0') {
   12bc4:	e001      	b.n	12bca <strlen+0xa>
		s++;
   12bc6:	3301      	adds	r3, #1
		n++;
   12bc8:	3001      	adds	r0, #1
	while (*s != '\0') {
   12bca:	781a      	ldrb	r2, [r3, #0]
   12bcc:	2a00      	cmp	r2, #0
   12bce:	d1fa      	bne.n	12bc6 <strlen+0x6>
	}

	return n;
}
   12bd0:	4770      	bx	lr

00012bd2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12bd2:	4603      	mov	r3, r0
	size_t n = 0;
   12bd4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   12bd6:	e001      	b.n	12bdc <strnlen+0xa>
		s++;
   12bd8:	3301      	adds	r3, #1
		n++;
   12bda:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   12bdc:	781a      	ldrb	r2, [r3, #0]
   12bde:	b10a      	cbz	r2, 12be4 <strnlen+0x12>
   12be0:	4288      	cmp	r0, r1
   12be2:	d3f9      	bcc.n	12bd8 <strnlen+0x6>
	}

	return n;
}
   12be4:	4770      	bx	lr

00012be6 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12be6:	4613      	mov	r3, r2
   12be8:	b16a      	cbz	r2, 12c06 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12bea:	3b01      	subs	r3, #1
   12bec:	d007      	beq.n	12bfe <memcmp+0x18>
   12bee:	f890 c000 	ldrb.w	ip, [r0]
   12bf2:	780a      	ldrb	r2, [r1, #0]
   12bf4:	4594      	cmp	ip, r2
   12bf6:	d102      	bne.n	12bfe <memcmp+0x18>
		c1++;
   12bf8:	3001      	adds	r0, #1
		c2++;
   12bfa:	3101      	adds	r1, #1
   12bfc:	e7f5      	b.n	12bea <memcmp+0x4>
	}

	return *c1 - *c2;
   12bfe:	7800      	ldrb	r0, [r0, #0]
   12c00:	780b      	ldrb	r3, [r1, #0]
   12c02:	1ac0      	subs	r0, r0, r3
   12c04:	4770      	bx	lr
		return 0;
   12c06:	2000      	movs	r0, #0
}
   12c08:	4770      	bx	lr

00012c0a <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12c0a:	ea80 0301 	eor.w	r3, r0, r1
   12c0e:	f013 0f03 	tst.w	r3, #3
   12c12:	d001      	beq.n	12c18 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   12c14:	4603      	mov	r3, r0
   12c16:	e023      	b.n	12c60 <memcpy+0x56>
   12c18:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   12c1a:	f013 0f03 	tst.w	r3, #3
   12c1e:	d00f      	beq.n	12c40 <memcpy+0x36>
			if (n == 0) {
   12c20:	b30a      	cbz	r2, 12c66 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   12c22:	f811 cb01 	ldrb.w	ip, [r1], #1
   12c26:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   12c2a:	3a01      	subs	r2, #1
   12c2c:	e7f5      	b.n	12c1a <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   12c2e:	f811 cb01 	ldrb.w	ip, [r1], #1
   12c32:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12c36:	3a01      	subs	r2, #1
	while (n > 0) {
   12c38:	2a00      	cmp	r2, #0
   12c3a:	d1f8      	bne.n	12c2e <memcpy+0x24>
	}

	return d;
}
   12c3c:	bc10      	pop	{r4}
   12c3e:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   12c40:	2a03      	cmp	r2, #3
   12c42:	d90d      	bls.n	12c60 <memcpy+0x56>
{
   12c44:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   12c46:	f851 4b04 	ldr.w	r4, [r1], #4
   12c4a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   12c4e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   12c50:	2a03      	cmp	r2, #3
   12c52:	d8f8      	bhi.n	12c46 <memcpy+0x3c>
   12c54:	e7f0      	b.n	12c38 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   12c56:	f811 cb01 	ldrb.w	ip, [r1], #1
   12c5a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12c5e:	3a01      	subs	r2, #1
	while (n > 0) {
   12c60:	2a00      	cmp	r2, #0
   12c62:	d1f8      	bne.n	12c56 <memcpy+0x4c>
   12c64:	4770      	bx	lr
}
   12c66:	4770      	bx	lr

00012c68 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   12c68:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   12c6c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12c6e:	e002      	b.n	12c76 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   12c70:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12c74:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12c76:	f013 0f03 	tst.w	r3, #3
   12c7a:	d002      	beq.n	12c82 <memset+0x1a>
		if (n == 0) {
   12c7c:	2a00      	cmp	r2, #0
   12c7e:	d1f7      	bne.n	12c70 <memset+0x8>
   12c80:	e00f      	b.n	12ca2 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   12c82:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   12c84:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   12c88:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   12c8c:	2a03      	cmp	r2, #3
   12c8e:	d906      	bls.n	12c9e <memset+0x36>
		*(d_word++) = c_word;
   12c90:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   12c94:	3a04      	subs	r2, #4
   12c96:	e7f9      	b.n	12c8c <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   12c98:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12c9c:	3a01      	subs	r2, #1
	while (n > 0) {
   12c9e:	2a00      	cmp	r2, #0
   12ca0:	d1fa      	bne.n	12c98 <memset+0x30>
	}

	return buf;
}
   12ca2:	4770      	bx	lr

00012ca4 <_stdout_hook_default>:
}
   12ca4:	f04f 30ff 	mov.w	r0, #4294967295
   12ca8:	4770      	bx	lr

00012caa <sys_arch_reboot>:
{
   12caa:	b508      	push	{r3, lr}
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   12cac:	b2c0      	uxtb	r0, r0
   12cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12cb2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   12cb6:	f7f9 fcb9 	bl	c62c <__NVIC_SystemReset>

00012cba <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   12cba:	2301      	movs	r3, #1
   12cbc:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   12cc0:	f3bf 8f4f 	dsb	sy
        __WFE();
   12cc4:	bf20      	wfe
    while (true)
   12cc6:	e7fd      	b.n	12cc4 <nrf_power_system_off+0xa>

00012cc8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   12cc8:	2806      	cmp	r0, #6
   12cca:	d000      	beq.n	12cce <pm_state_set+0x6>
   12ccc:	4770      	bx	lr
{
   12cce:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   12cd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   12cd4:	f7ff fff1 	bl	12cba <nrf_power_system_off>

00012cd8 <pm_state_exit_post_ops>:
   12cd8:	2300      	movs	r3, #0
   12cda:	f383 8811 	msr	BASEPRI, r3
   12cde:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12ce2:	4770      	bx	lr

00012ce4 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   12ce4:	b510      	push	{r4, lr}
   12ce6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   12ce8:	2301      	movs	r3, #1
   12cea:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   12cee:	2106      	movs	r1, #6
   12cf0:	f7fc fb38 	bl	f364 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   12cf4:	b918      	cbnz	r0, 12cfe <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   12cf6:	79a3      	ldrb	r3, [r4, #6]
   12cf8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   12cfc:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   12cfe:	bd10      	pop	{r4, pc}

00012d00 <sys_put_le64>:
	dst[0] = val;
   12d00:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   12d02:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12d06:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   12d08:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   12d0a:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   12d0c:	0e00      	lsrs	r0, r0, #24
   12d0e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   12d10:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   12d12:	f3c1 2307 	ubfx	r3, r1, #8, #8
   12d16:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   12d18:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   12d1a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   12d1c:	0e09      	lsrs	r1, r1, #24
   12d1e:	71d1      	strb	r1, [r2, #7]
}
   12d20:	4770      	bx	lr

00012d22 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
   12d22:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   12d24:	79c3      	ldrb	r3, [r0, #7]
   12d26:	7981      	ldrb	r1, [r0, #6]
   12d28:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   12d2c:	7942      	ldrb	r2, [r0, #5]
   12d2e:	7903      	ldrb	r3, [r0, #4]
   12d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12d34:	78c2      	ldrb	r2, [r0, #3]
   12d36:	f890 c002 	ldrb.w	ip, [r0, #2]
   12d3a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   12d3e:	f890 e001 	ldrb.w	lr, [r0, #1]
   12d42:	7802      	ldrb	r2, [r0, #0]
   12d44:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
   12d48:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   12d4c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   12d50:	f85d fb04 	ldr.w	pc, [sp], #4

00012d54 <handle_event_common>:
{
   12d54:	b510      	push	{r4, lr}
   12d56:	4686      	mov	lr, r0
   12d58:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   12d5a:	f04f 0c00 	mov.w	ip, #0
   12d5e:	4563      	cmp	r3, ip
   12d60:	d910      	bls.n	12d84 <handle_event_common+0x30>
		const struct event_handler *handler = &handlers[i];
   12d62:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   12d66:	f812 403c 	ldrb.w	r4, [r2, ip, lsl #3]
   12d6a:	4574      	cmp	r4, lr
   12d6c:	d107      	bne.n	12d7e <handle_event_common+0x2a>
		if (buf->len < handler->min_len) {
   12d6e:	8a02      	ldrh	r2, [r0, #16]
   12d70:	784b      	ldrb	r3, [r1, #1]
   12d72:	429a      	cmp	r2, r3
   12d74:	d309      	bcc.n	12d8a <handle_event_common+0x36>
		handler->handler(buf);
   12d76:	684b      	ldr	r3, [r1, #4]
   12d78:	4798      	blx	r3
		return 0;
   12d7a:	2000      	movs	r0, #0
}
   12d7c:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   12d7e:	f10c 0c01 	add.w	ip, ip, #1
   12d82:	e7ec      	b.n	12d5e <handle_event_common+0xa>
	return -EOPNOTSUPP;
   12d84:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   12d88:	e7f8      	b.n	12d7c <handle_event_common+0x28>
			return -EINVAL;
   12d8a:	f06f 0015 	mvn.w	r0, #21
   12d8e:	e7f5      	b.n	12d7c <handle_event_common+0x28>

00012d90 <handle_event>:
{
   12d90:	b508      	push	{r3, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   12d92:	f7ff ffdf 	bl	12d54 <handle_event_common>
}
   12d96:	bd08      	pop	{r3, pc}

00012d98 <hci_vendor_event>:
}
   12d98:	4770      	bx	lr

00012d9a <bt_br_init>:
}
   12d9a:	2000      	movs	r0, #0
   12d9c:	4770      	bx	lr

00012d9e <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12d9e:	f001 0c1f 	and.w	ip, r1, #31
   12da2:	2301      	movs	r3, #1
   12da4:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   12da8:	b172      	cbz	r2, 12dc8 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12daa:	0949      	lsrs	r1, r1, #5
   12dac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   12db0:	f3bf 8f5b 	dmb	ish
   12db4:	e850 2f00 	ldrex	r2, [r0]
   12db8:	431a      	orrs	r2, r3
   12dba:	e840 2100 	strex	r1, r2, [r0]
   12dbe:	2900      	cmp	r1, #0
   12dc0:	d1f8      	bne.n	12db4 <atomic_set_bit_to+0x16>
   12dc2:	f3bf 8f5b 	dmb	ish
   12dc6:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12dc8:	0949      	lsrs	r1, r1, #5
   12dca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   12dce:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12dd0:	f3bf 8f5b 	dmb	ish
   12dd4:	e850 2f00 	ldrex	r2, [r0]
   12dd8:	401a      	ands	r2, r3
   12dda:	e840 2100 	strex	r1, r2, [r0]
   12dde:	2900      	cmp	r1, #0
   12de0:	d1f8      	bne.n	12dd4 <atomic_set_bit_to+0x36>
   12de2:	f3bf 8f5b 	dmb	ish
	}
}
   12de6:	4770      	bx	lr

00012de8 <hci_hardware_error>:
{
   12de8:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   12dea:	2101      	movs	r1, #1
   12dec:	300c      	adds	r0, #12
   12dee:	f000 fbed 	bl	135cc <net_buf_simple_pull_mem>
}
   12df2:	bd08      	pop	{r3, pc}

00012df4 <le_set_event_mask>:
{
   12df4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12df6:	2108      	movs	r1, #8
   12df8:	f242 0001 	movw	r0, #8193	; 0x2001
   12dfc:	f7f9 fe26 	bl	ca4c <bt_hci_cmd_create>
	if (!buf) {
   12e00:	b180      	cbz	r0, 12e24 <le_set_event_mask+0x30>
   12e02:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   12e04:	2108      	movs	r1, #8
   12e06:	300c      	adds	r0, #12
   12e08:	f000 fbc8 	bl	1359c <net_buf_simple_add>
   12e0c:	4602      	mov	r2, r0
	sys_put_le64(mask, cp_mask->events);
   12e0e:	2002      	movs	r0, #2
   12e10:	2100      	movs	r1, #0
   12e12:	f7ff ff75 	bl	12d00 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   12e16:	2200      	movs	r2, #0
   12e18:	4621      	mov	r1, r4
   12e1a:	f242 0001 	movw	r0, #8193	; 0x2001
   12e1e:	f7f9 fe53 	bl	cac8 <bt_hci_cmd_send_sync>
}
   12e22:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   12e24:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12e28:	e7fb      	b.n	12e22 <le_set_event_mask+0x2e>

00012e2a <process_events>:
{
   12e2a:	b538      	push	{r3, r4, r5, lr}
   12e2c:	4604      	mov	r4, r0
   12e2e:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   12e30:	e001      	b.n	12e36 <process_events+0xc>
	for (; count; ev++, count--) {
   12e32:	3414      	adds	r4, #20
   12e34:	3d01      	subs	r5, #1
   12e36:	b155      	cbz	r5, 12e4e <process_events+0x24>
		switch (ev->state) {
   12e38:	68e3      	ldr	r3, [r4, #12]
   12e3a:	f3c3 3386 	ubfx	r3, r3, #14, #7
   12e3e:	2b04      	cmp	r3, #4
   12e40:	d1f7      	bne.n	12e32 <process_events+0x8>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12e42:	7b23      	ldrb	r3, [r4, #12]
   12e44:	2b00      	cmp	r3, #0
   12e46:	d1f4      	bne.n	12e32 <process_events+0x8>
				send_cmd();
   12e48:	f7f9 fffe 	bl	ce48 <send_cmd>
   12e4c:	e7f1      	b.n	12e32 <process_events+0x8>
}
   12e4e:	bd38      	pop	{r3, r4, r5, pc}

00012e50 <bt_recv>:
{
   12e50:	b538      	push	{r3, r4, r5, lr}
   12e52:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12e54:	7e05      	ldrb	r5, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   12e56:	2d01      	cmp	r5, #1
   12e58:	d11f      	bne.n	12e9a <bt_recv+0x4a>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   12e5a:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12e5c:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   12e5e:	2b05      	cmp	r3, #5
   12e60:	d00e      	beq.n	12e80 <bt_recv+0x30>
   12e62:	d30f      	bcc.n	12e84 <bt_recv+0x34>
   12e64:	3b0e      	subs	r3, #14
   12e66:	b2db      	uxtb	r3, r3
   12e68:	2b01      	cmp	r3, #1
   12e6a:	d807      	bhi.n	12e7c <bt_recv+0x2c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12e6c:	f015 0f01 	tst.w	r5, #1
   12e70:	d10a      	bne.n	12e88 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12e72:	f015 0f02 	tst.w	r5, #2
   12e76:	d10b      	bne.n	12e90 <bt_recv+0x40>
		return 0;
   12e78:	2000      	movs	r0, #0
}
   12e7a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV;
   12e7c:	2502      	movs	r5, #2
   12e7e:	e7f5      	b.n	12e6c <bt_recv+0x1c>
	switch (evt) {
   12e80:	2503      	movs	r5, #3
   12e82:	e7f3      	b.n	12e6c <bt_recv+0x1c>
		return BT_HCI_EVT_FLAG_RECV;
   12e84:	2502      	movs	r5, #2
   12e86:	e7f1      	b.n	12e6c <bt_recv+0x1c>
			hci_event_prio(buf);
   12e88:	4620      	mov	r0, r4
   12e8a:	f7fa f85d 	bl	cf48 <hci_event_prio>
   12e8e:	e7f0      	b.n	12e72 <bt_recv+0x22>
			rx_queue_put(buf);
   12e90:	4620      	mov	r0, r4
   12e92:	f7f9 fd9b 	bl	c9cc <rx_queue_put>
		return 0;
   12e96:	2000      	movs	r0, #0
   12e98:	e7ef      	b.n	12e7a <bt_recv+0x2a>
		net_buf_unref(buf);
   12e9a:	f000 fb54 	bl	13546 <net_buf_unref>
		return -EINVAL;
   12e9e:	f06f 0015 	mvn.w	r0, #21
   12ea2:	e7ea      	b.n	12e7a <bt_recv+0x2a>

00012ea4 <bt_init>:
{
   12ea4:	b510      	push	{r4, lr}
	err = hci_init();
   12ea6:	f7f9 ff75 	bl	cd94 <hci_init>
	if (err) {
   12eaa:	4604      	mov	r4, r0
   12eac:	b108      	cbz	r0, 12eb2 <bt_init+0xe>
}
   12eae:	4620      	mov	r0, r4
   12eb0:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   12eb2:	f7fa f8c5 	bl	d040 <bt_finalize_init>
	return 0;
   12eb6:	e7fa      	b.n	12eae <bt_init+0xa>

00012eb8 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   12eb8:	b128      	cbz	r0, 12ec6 <bt_id_set_adv_random_addr+0xe>
   12eba:	b139      	cbz	r1, 12ecc <bt_id_set_adv_random_addr+0x14>
{
   12ebc:	b508      	push	{r3, lr}
		return set_random_address(addr);
   12ebe:	4608      	mov	r0, r1
   12ec0:	f7fa f98c 	bl	d1dc <set_random_address>
}
   12ec4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12ec6:	f06f 0015 	mvn.w	r0, #21
   12eca:	4770      	bx	lr
   12ecc:	f06f 0015 	mvn.w	r0, #21
}
   12ed0:	4770      	bx	lr

00012ed2 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   12ed2:	b1a0      	cbz	r0, 12efe <bt_id_set_adv_private_addr+0x2c>
{
   12ed4:	b510      	push	{r4, lr}
   12ed6:	b082      	sub	sp, #8
   12ed8:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   12eda:	2106      	movs	r1, #6
   12edc:	4668      	mov	r0, sp
   12ede:	f7fc fa41 	bl	f364 <bt_rand>
	if (err) {
   12ee2:	b108      	cbz	r0, 12ee8 <bt_id_set_adv_private_addr+0x16>
}
   12ee4:	b002      	add	sp, #8
   12ee6:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   12ee8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12ef0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   12ef4:	4669      	mov	r1, sp
   12ef6:	4620      	mov	r0, r4
   12ef8:	f7ff ffde 	bl	12eb8 <bt_id_set_adv_random_addr>
	if (err) {
   12efc:	e7f2      	b.n	12ee4 <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   12efe:	f06f 0015 	mvn.w	r0, #21
}
   12f02:	4770      	bx	lr

00012f04 <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   12f04:	b100      	cbz	r0, 12f08 <bt_id_adv_random_addr_check+0x4>
		return true;
   12f06:	2001      	movs	r0, #1
}
   12f08:	4770      	bx	lr

00012f0a <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   12f0a:	2300      	movs	r3, #0
   12f0c:	428b      	cmp	r3, r1
   12f0e:	d219      	bcs.n	12f44 <ad_is_limited+0x3a>
{
   12f10:	b500      	push	{lr}
   12f12:	e002      	b.n	12f1a <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   12f14:	3301      	adds	r3, #1
   12f16:	428b      	cmp	r3, r1
   12f18:	d211      	bcs.n	12f3e <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   12f1a:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   12f1e:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   12f22:	f240 1201 	movw	r2, #257	; 0x101
   12f26:	4594      	cmp	ip, r2
   12f28:	d1f4      	bne.n	12f14 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   12f2a:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   12f2e:	2a00      	cmp	r2, #0
   12f30:	d0f0      	beq.n	12f14 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   12f32:	7812      	ldrb	r2, [r2, #0]
   12f34:	f012 0f01 	tst.w	r2, #1
   12f38:	d0ec      	beq.n	12f14 <ad_is_limited+0xa>
				return true;
   12f3a:	2001      	movs	r0, #1
   12f3c:	e000      	b.n	12f40 <ad_is_limited+0x36>
	return false;
   12f3e:	2000      	movs	r0, #0
}
   12f40:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   12f44:	2000      	movs	r0, #0
}
   12f46:	4770      	bx	lr

00012f48 <get_filter_policy>:
}
   12f48:	2000      	movs	r0, #0
   12f4a:	4770      	bx	lr

00012f4c <get_adv_channel_map>:
{
   12f4c:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   12f4e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   12f52:	d10b      	bne.n	12f6c <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   12f54:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   12f56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12f5a:	d001      	beq.n	12f60 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   12f5c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   12f60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12f64:	d001      	beq.n	12f6a <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   12f66:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   12f6a:	4770      	bx	lr
		channel_map &= ~0x01;
   12f6c:	2006      	movs	r0, #6
   12f6e:	e7f2      	b.n	12f56 <get_adv_channel_map+0xa>

00012f70 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12f70:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f72:	f3bf 8f5b 	dmb	ish
   12f76:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   12f7a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12f7e:	f001 011f 	and.w	r1, r1, #31
   12f82:	4108      	asrs	r0, r1
}
   12f84:	f000 0001 	and.w	r0, r0, #1
   12f88:	4770      	bx	lr

00012f8a <set_data_add_complete>:
{
   12f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f8e:	b083      	sub	sp, #12
   12f90:	4606      	mov	r6, r0
   12f92:	4689      	mov	r9, r1
   12f94:	4693      	mov	fp, r2
   12f96:	461c      	mov	r4, r3
	for (size_t i = 0; i < ad_len; i++) {
   12f98:	2700      	movs	r7, #0
	uint8_t set_data_len = 0;
   12f9a:	463b      	mov	r3, r7
   12f9c:	46b8      	mov	r8, r7
	for (size_t i = 0; i < ad_len; i++) {
   12f9e:	4544      	cmp	r4, r8
   12fa0:	d93e      	bls.n	13020 <set_data_add_complete+0x96>
		const struct bt_data *data = ad[i].data;
   12fa2:	eb0b 0ac8 	add.w	sl, fp, r8, lsl #3
   12fa6:	f85b 7038 	ldr.w	r7, [fp, r8, lsl #3]
		for (size_t j = 0; j < ad[i].len; j++) {
   12faa:	2500      	movs	r5, #0
   12fac:	f8cd 8000 	str.w	r8, [sp]
   12fb0:	f8cd b004 	str.w	fp, [sp, #4]
   12fb4:	e015      	b.n	12fe2 <set_data_add_complete+0x58>
			set_data[set_data_len++] = len + 1;
   12fb6:	fa5f f882 	uxtb.w	r8, r2
   12fba:	1c59      	adds	r1, r3, #1
   12fbc:	b2c9      	uxtb	r1, r1
   12fbe:	f108 0b01 	add.w	fp, r8, #1
   12fc2:	f806 b00e 	strb.w	fp, [r6, lr]
			set_data[set_data_len++] = type;
   12fc6:	3302      	adds	r3, #2
   12fc8:	fa5f fb83 	uxtb.w	fp, r3
   12fcc:	5470      	strb	r0, [r6, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   12fce:	f8dc 1004 	ldr.w	r1, [ip, #4]
   12fd2:	eb06 000b 	add.w	r0, r6, fp
   12fd6:	f7ff fe18 	bl	12c0a <memcpy>
			set_data_len += len;
   12fda:	eb0b 0308 	add.w	r3, fp, r8
   12fde:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   12fe0:	3501      	adds	r5, #1
   12fe2:	f8da 2004 	ldr.w	r2, [sl, #4]
   12fe6:	4295      	cmp	r5, r2
   12fe8:	d213      	bcs.n	13012 <set_data_add_complete+0x88>
			size_t len = data[j].data_len;
   12fea:	eb07 0cc5 	add.w	ip, r7, r5, lsl #3
   12fee:	f89c 2001 	ldrb.w	r2, [ip, #1]
			uint8_t type = data[j].type;
   12ff2:	f817 0035 	ldrb.w	r0, [r7, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   12ff6:	469e      	mov	lr, r3
   12ff8:	1899      	adds	r1, r3, r2
   12ffa:	3102      	adds	r1, #2
   12ffc:	4549      	cmp	r1, r9
   12ffe:	d9da      	bls.n	12fb6 <set_data_add_complete+0x2c>
							(set_data_len + 2);
   13000:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   13002:	eba9 0202 	sub.w	r2, r9, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13006:	2809      	cmp	r0, #9
   13008:	d10e      	bne.n	13028 <set_data_add_complete+0x9e>
   1300a:	2a00      	cmp	r2, #0
   1300c:	dd11      	ble.n	13032 <set_data_add_complete+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   1300e:	2008      	movs	r0, #8
   13010:	e7d1      	b.n	12fb6 <set_data_add_complete+0x2c>
	for (size_t i = 0; i < ad_len; i++) {
   13012:	f8dd 8000 	ldr.w	r8, [sp]
   13016:	f8dd b004 	ldr.w	fp, [sp, #4]
   1301a:	f108 0801 	add.w	r8, r8, #1
   1301e:	e7be      	b.n	12f9e <set_data_add_complete+0x14>
	*data_len = set_data_len;
   13020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13022:	7013      	strb	r3, [r2, #0]
	return 0;
   13024:	2000      	movs	r0, #0
   13026:	e001      	b.n	1302c <set_data_add_complete+0xa2>
					return -EINVAL;
   13028:	f06f 0015 	mvn.w	r0, #21
}
   1302c:	b003      	add	sp, #12
   1302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return -EINVAL;
   13032:	f06f 0015 	mvn.w	r0, #21
   13036:	e7f9      	b.n	1302c <set_data_add_complete+0xa2>

00013038 <hci_set_ad>:
{
   13038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1303c:	b082      	sub	sp, #8
   1303e:	4607      	mov	r7, r0
   13040:	460d      	mov	r5, r1
   13042:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13044:	2120      	movs	r1, #32
   13046:	f7f9 fd01 	bl	ca4c <bt_hci_cmd_create>
	if (!buf) {
   1304a:	b300      	cbz	r0, 1308e <hci_set_ad+0x56>
   1304c:	4680      	mov	r8, r0
   1304e:	2120      	movs	r1, #32
   13050:	300c      	adds	r0, #12
   13052:	f000 faa3 	bl	1359c <net_buf_simple_add>
   13056:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   13058:	2220      	movs	r2, #32
   1305a:	2100      	movs	r1, #0
   1305c:	f7ff fe04 	bl	12c68 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13060:	9400      	str	r4, [sp, #0]
   13062:	4633      	mov	r3, r6
   13064:	462a      	mov	r2, r5
   13066:	211f      	movs	r1, #31
   13068:	1c60      	adds	r0, r4, #1
   1306a:	f7ff ff8e 	bl	12f8a <set_data_add_complete>
	if (err) {
   1306e:	4604      	mov	r4, r0
   13070:	b948      	cbnz	r0, 13086 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13072:	2200      	movs	r2, #0
   13074:	4641      	mov	r1, r8
   13076:	4638      	mov	r0, r7
   13078:	f7f9 fd26 	bl	cac8 <bt_hci_cmd_send_sync>
   1307c:	4604      	mov	r4, r0
}
   1307e:	4620      	mov	r0, r4
   13080:	b002      	add	sp, #8
   13082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13086:	4640      	mov	r0, r8
   13088:	f000 fa5d 	bl	13546 <net_buf_unref>
		return err;
   1308c:	e7f7      	b.n	1307e <hci_set_ad+0x46>
		return -ENOBUFS;
   1308e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13092:	e7f4      	b.n	1307e <hci_set_ad+0x46>

00013094 <set_ad>:
{
   13094:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   13096:	f242 0008 	movw	r0, #8200	; 0x2008
   1309a:	f7ff ffcd 	bl	13038 <hci_set_ad>
}
   1309e:	bd08      	pop	{r3, pc}

000130a0 <set_sd>:
{
   130a0:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   130a2:	f242 0009 	movw	r0, #8201	; 0x2009
   130a6:	f7ff ffc7 	bl	13038 <hci_set_ad>
}
   130aa:	bd08      	pop	{r3, pc}

000130ac <le_adv_update>:
{
   130ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b0:	b089      	sub	sp, #36	; 0x24
   130b2:	4604      	mov	r4, r0
   130b4:	460e      	mov	r6, r1
   130b6:	4617      	mov	r7, r2
   130b8:	461d      	mov	r5, r3
   130ba:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   130be:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   130c2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   130c6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   130ca:	2300      	movs	r3, #0
   130cc:	9304      	str	r3, [sp, #16]
   130ce:	9305      	str	r3, [sp, #20]
   130d0:	9306      	str	r3, [sp, #24]
   130d2:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   130d4:	f1b9 0f00 	cmp.w	r9, #0
   130d8:	d133      	bne.n	13142 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   130da:	f1ba 0f00 	cmp.w	sl, #0
   130de:	d002      	beq.n	130e6 <le_adv_update+0x3a>
   130e0:	f1bb 0f00 	cmp.w	fp, #0
   130e4:	d10e      	bne.n	13104 <le_adv_update+0x58>
		d[0].data = ad;
   130e6:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   130e8:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   130ea:	f1b9 0f01 	cmp.w	r9, #1
   130ee:	d056      	beq.n	1319e <le_adv_update+0xf2>
		d_len = 1;
   130f0:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   130f2:	a904      	add	r1, sp, #16
   130f4:	4620      	mov	r0, r4
   130f6:	f7ff ffcd 	bl	13094 <set_ad>
		if (err) {
   130fa:	4603      	mov	r3, r0
   130fc:	b9e8      	cbnz	r0, 1313a <le_adv_update+0x8e>
	if (scannable) {
   130fe:	f1bb 0f00 	cmp.w	fp, #0
   13102:	d00c      	beq.n	1311e <le_adv_update+0x72>
		d[0].data = sd;
   13104:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   13106:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   1310a:	f1b9 0f02 	cmp.w	r9, #2
   1310e:	d04c      	beq.n	131aa <le_adv_update+0xfe>
		d_len = 1;
   13110:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   13112:	a904      	add	r1, sp, #16
   13114:	4620      	mov	r0, r4
   13116:	f7ff ffc3 	bl	130a0 <set_sd>
		if (err) {
   1311a:	4603      	mov	r3, r0
   1311c:	b968      	cbnz	r0, 1313a <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   1311e:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13120:	f3bf 8f5b 	dmb	ish
   13124:	e854 3f00 	ldrex	r3, [r4]
   13128:	f043 0304 	orr.w	r3, r3, #4
   1312c:	e844 3200 	strex	r2, r3, [r4]
   13130:	2a00      	cmp	r2, #0
   13132:	d1f7      	bne.n	13124 <le_adv_update+0x78>
   13134:	f3bf 8f5b 	dmb	ish
	return 0;
   13138:	2300      	movs	r3, #0
}
   1313a:	4618      	mov	r0, r3
   1313c:	b009      	add	sp, #36	; 0x24
   1313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   13142:	f7fa f82b 	bl	d19c <bt_get_name>
   13146:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   13148:	b166      	cbz	r6, 13164 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   1314a:	2200      	movs	r2, #0
   1314c:	4297      	cmp	r7, r2
   1314e:	d907      	bls.n	13160 <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   13150:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   13154:	3b08      	subs	r3, #8
   13156:	b2db      	uxtb	r3, r3
   13158:	2b01      	cmp	r3, #1
   1315a:	d90f      	bls.n	1317c <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   1315c:	3201      	adds	r2, #1
   1315e:	e7f5      	b.n	1314c <le_adv_update+0xa0>
	return false;
   13160:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   13162:	bb43      	cbnz	r3, 131b6 <le_adv_update+0x10a>
   13164:	b175      	cbz	r5, 13184 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   13166:	2200      	movs	r2, #0
   13168:	4590      	cmp	r8, r2
   1316a:	d909      	bls.n	13180 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1316c:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   13170:	3b08      	subs	r3, #8
   13172:	b2db      	uxtb	r3, r3
   13174:	2b01      	cmp	r3, #1
   13176:	d910      	bls.n	1319a <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   13178:	3201      	adds	r2, #1
   1317a:	e7f5      	b.n	13168 <le_adv_update+0xbc>
			return true;
   1317c:	2301      	movs	r3, #1
   1317e:	e7f0      	b.n	13162 <le_adv_update+0xb6>
	return false;
   13180:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   13182:	b9db      	cbnz	r3, 131bc <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   13184:	9801      	ldr	r0, [sp, #4]
   13186:	f7ff fd1b 	bl	12bc0 <strlen>
   1318a:	2309      	movs	r3, #9
   1318c:	f88d 3008 	strb.w	r3, [sp, #8]
   13190:	f88d 0009 	strb.w	r0, [sp, #9]
   13194:	9b01      	ldr	r3, [sp, #4]
   13196:	9303      	str	r3, [sp, #12]
   13198:	e79f      	b.n	130da <le_adv_update+0x2e>
			return true;
   1319a:	2301      	movs	r3, #1
   1319c:	e7f1      	b.n	13182 <le_adv_update+0xd6>
			d[1].data = &data;
   1319e:	ab02      	add	r3, sp, #8
   131a0:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   131a2:	2301      	movs	r3, #1
   131a4:	9307      	str	r3, [sp, #28]
			d_len = 2;
   131a6:	2202      	movs	r2, #2
   131a8:	e7a3      	b.n	130f2 <le_adv_update+0x46>
			d[1].data = &data;
   131aa:	ab02      	add	r3, sp, #8
   131ac:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   131ae:	2301      	movs	r3, #1
   131b0:	9307      	str	r3, [sp, #28]
			d_len = 2;
   131b2:	2202      	movs	r2, #2
   131b4:	e7ad      	b.n	13112 <le_adv_update+0x66>
			return -EINVAL;
   131b6:	f06f 0315 	mvn.w	r3, #21
   131ba:	e7be      	b.n	1313a <le_adv_update+0x8e>
   131bc:	f06f 0315 	mvn.w	r3, #21
   131c0:	e7bb      	b.n	1313a <le_adv_update+0x8e>

000131c2 <valid_adv_param>:
{
   131c2:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   131c4:	6843      	ldr	r3, [r0, #4]
   131c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   131ca:	d107      	bne.n	131dc <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   131cc:	6902      	ldr	r2, [r0, #16]
   131ce:	b112      	cbz	r2, 131d6 <valid_adv_param+0x14>
   131d0:	f013 0f01 	tst.w	r3, #1
   131d4:	d004      	beq.n	131e0 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   131d6:	f7fa f9ef 	bl	d5b8 <valid_adv_ext_param>
}
   131da:	bd08      	pop	{r3, pc}
		return false;
   131dc:	2000      	movs	r0, #0
   131de:	e7fc      	b.n	131da <valid_adv_param+0x18>
		return false;
   131e0:	2000      	movs	r0, #0
   131e2:	e7fa      	b.n	131da <valid_adv_param+0x18>

000131e4 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   131e4:	f001 0c1f 	and.w	ip, r1, #31
   131e8:	2301      	movs	r3, #1
   131ea:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   131ee:	b172      	cbz	r2, 1320e <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   131f0:	0949      	lsrs	r1, r1, #5
   131f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   131f6:	f3bf 8f5b 	dmb	ish
   131fa:	e850 2f00 	ldrex	r2, [r0]
   131fe:	431a      	orrs	r2, r3
   13200:	e840 2100 	strex	r1, r2, [r0]
   13204:	2900      	cmp	r1, #0
   13206:	d1f8      	bne.n	131fa <atomic_set_bit_to+0x16>
   13208:	f3bf 8f5b 	dmb	ish
   1320c:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1320e:	0949      	lsrs	r1, r1, #5
   13210:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   13214:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13216:	f3bf 8f5b 	dmb	ish
   1321a:	e850 2f00 	ldrex	r2, [r0]
   1321e:	401a      	ands	r2, r3
   13220:	e840 2100 	strex	r1, r2, [r0]
   13224:	2900      	cmp	r1, #0
   13226:	d1f8      	bne.n	1321a <atomic_set_bit_to+0x36>
   13228:	f3bf 8f5b 	dmb	ish
}
   1322c:	4770      	bx	lr

0001322e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1322e:	6843      	ldr	r3, [r0, #4]
   13230:	f013 0f08 	tst.w	r3, #8
   13234:	d00b      	beq.n	1324e <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   13236:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1323a:	d10a      	bne.n	13252 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1323c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   13240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13244:	d001      	beq.n	1324a <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   13246:	2002      	movs	r0, #2
}
   13248:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1324a:	2001      	movs	r0, #1
   1324c:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   1324e:	2000      	movs	r0, #0
   13250:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   13252:	2001      	movs	r0, #1
   13254:	4770      	bx	lr

00013256 <bt_le_adv_set_enable_legacy>:
{
   13256:	b570      	push	{r4, r5, r6, lr}
   13258:	b086      	sub	sp, #24
   1325a:	4605      	mov	r5, r0
   1325c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1325e:	2101      	movs	r1, #1
   13260:	f242 000a 	movw	r0, #8202	; 0x200a
   13264:	f7f9 fbf2 	bl	ca4c <bt_hci_cmd_create>
	if (!buf) {
   13268:	b1d0      	cbz	r0, 132a0 <bt_le_adv_set_enable_legacy+0x4a>
   1326a:	4606      	mov	r6, r0
	if (enable) {
   1326c:	b19c      	cbz	r4, 13296 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1326e:	2101      	movs	r1, #1
   13270:	300c      	adds	r0, #12
   13272:	f000 f9a4 	bl	135be <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   13276:	9400      	str	r4, [sp, #0]
   13278:	2307      	movs	r3, #7
   1327a:	f105 0210 	add.w	r2, r5, #16
   1327e:	a903      	add	r1, sp, #12
   13280:	4630      	mov	r0, r6
   13282:	f7f9 fbd1 	bl	ca28 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   13286:	2200      	movs	r2, #0
   13288:	4631      	mov	r1, r6
   1328a:	f242 000a 	movw	r0, #8202	; 0x200a
   1328e:	f7f9 fc1b 	bl	cac8 <bt_hci_cmd_send_sync>
}
   13292:	b006      	add	sp, #24
   13294:	bd70      	pop	{r4, r5, r6, pc}
   13296:	2100      	movs	r1, #0
   13298:	300c      	adds	r0, #12
   1329a:	f000 f990 	bl	135be <net_buf_simple_add_u8>
   1329e:	e7ea      	b.n	13276 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   132a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   132a4:	e7f5      	b.n	13292 <bt_le_adv_set_enable_legacy+0x3c>

000132a6 <bt_le_adv_set_enable>:
{
   132a6:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   132a8:	f7ff ffd5 	bl	13256 <bt_le_adv_set_enable_legacy>
}
   132ac:	bd08      	pop	{r3, pc}

000132ae <bt_le_lim_adv_cancel_timeout>:
{
   132ae:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   132b0:	3018      	adds	r0, #24
   132b2:	f002 f947 	bl	15544 <k_work_cancel_delayable>
}
   132b6:	bd08      	pop	{r3, pc}

000132b8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   132b8:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   132ba:	f7fa f9c7 	bl	d64c <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   132be:	b1d8      	cbz	r0, 132f8 <bt_le_adv_stop+0x40>
   132c0:	4604      	mov	r4, r0
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   132c2:	f7ff fff4 	bl	132ae <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   132c6:	f104 0010 	add.w	r0, r4, #16
   132ca:	f3bf 8f5b 	dmb	ish
   132ce:	e850 3f00 	ldrex	r3, [r0]
   132d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   132d6:	e840 3200 	strex	r2, r3, [r0]
   132da:	2a00      	cmp	r2, #0
   132dc:	d1f7      	bne.n	132ce <bt_le_adv_stop+0x16>
   132de:	f3bf 8f5b 	dmb	ish

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   132e2:	2107      	movs	r1, #7
   132e4:	f7ff fe44 	bl	12f70 <atomic_test_bit>
   132e8:	b908      	cbnz	r0, 132ee <bt_le_adv_stop+0x36>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   132ea:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   132ec:	bd10      	pop	{r4, pc}
		err = bt_le_adv_set_enable_legacy(adv, false);
   132ee:	2100      	movs	r1, #0
   132f0:	4620      	mov	r0, r4
   132f2:	f7ff ffb0 	bl	13256 <bt_le_adv_set_enable_legacy>
		if (err) {
   132f6:	e7f9      	b.n	132ec <bt_le_adv_stop+0x34>
		return 0;
   132f8:	2000      	movs	r0, #0
   132fa:	e7f7      	b.n	132ec <bt_le_adv_stop+0x34>

000132fc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   132fc:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   132fe:	f7ff ffdb 	bl	132b8 <bt_le_adv_stop>
#endif
	if (err) {
		LOG_WRN("Failed to stop advertising: %d", err);
	}
}
   13302:	bd08      	pop	{r3, pc}

00013304 <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   13304:	b538      	push	{r3, r4, r5, lr}
   13306:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13308:	7f03      	ldrb	r3, [r0, #28]
   1330a:	331b      	adds	r3, #27
   1330c:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   13310:	8b02      	ldrh	r2, [r0, #24]
   13312:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   13314:	6a85      	ldr	r5, [r0, #40]	; 0x28
   13316:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   1331a:	f7fa faef 	bl	d8fc <pool_id>
   1331e:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   13320:	7f23      	ldrb	r3, [r4, #28]
   13322:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   13324:	4628      	mov	r0, r5
   13326:	bd38      	pop	{r3, r4, r5, pc}

00013328 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   13328:	4770      	bx	lr

0001332a <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1332e:	4604      	mov	r4, r0
   13330:	460d      	mov	r5, r1
   13332:	4617      	mov	r7, r2
   13334:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13336:	7a80      	ldrb	r0, [r0, #10]
   13338:	f7fa faec 	bl	d914 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1333c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	f8d3 8000 	ldr.w	r8, [r3]
   13344:	463a      	mov	r2, r7
   13346:	4633      	mov	r3, r6
   13348:	4629      	mov	r1, r5
   1334a:	4620      	mov	r0, r4
   1334c:	47c0      	blx	r8
}
   1334e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013352 <net_buf_destroy>:
{
   13352:	b510      	push	{r4, lr}
   13354:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13356:	7a80      	ldrb	r0, [r0, #10]
   13358:	f7fa fadc 	bl	d914 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1335c:	4621      	mov	r1, r4
   1335e:	f001 ffb7 	bl	152d0 <k_queue_prepend>
}
   13362:	bd10      	pop	{r4, pc}

00013364 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   13364:	b538      	push	{r3, r4, r5, lr}
   13366:	4604      	mov	r4, r0
   13368:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1336a:	7a80      	ldrb	r0, [r0, #10]
   1336c:	f7fa fad2 	bl	d914 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13370:	7a63      	ldrb	r3, [r4, #9]
   13372:	f013 0f01 	tst.w	r3, #1
   13376:	d105      	bne.n	13384 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   13378:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1337a:	681b      	ldr	r3, [r3, #0]
   1337c:	689b      	ldr	r3, [r3, #8]
   1337e:	4629      	mov	r1, r5
   13380:	4620      	mov	r0, r4
   13382:	4798      	blx	r3
}
   13384:	bd38      	pop	{r3, r4, r5, pc}

00013386 <net_buf_id>:
{
   13386:	b510      	push	{r4, lr}
   13388:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1338a:	7a80      	ldrb	r0, [r0, #10]
   1338c:	f7fa fac2 	bl	d914 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13390:	7f03      	ldrb	r3, [r0, #28]
   13392:	331b      	adds	r3, #27
   13394:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13398:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1339a:	1aa4      	subs	r4, r4, r2
}
   1339c:	fbb4 f0f3 	udiv	r0, r4, r3
   133a0:	bd10      	pop	{r4, pc}

000133a2 <fixed_data_alloc>:
{
   133a2:	b570      	push	{r4, r5, r6, lr}
   133a4:	4604      	mov	r4, r0
   133a6:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   133a8:	7a80      	ldrb	r0, [r0, #10]
   133aa:	f7fa fab3 	bl	d914 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   133ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
   133b0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   133b2:	682a      	ldr	r2, [r5, #0]
   133b4:	6819      	ldr	r1, [r3, #0]
   133b6:	428a      	cmp	r2, r1
   133b8:	bf28      	it	cs
   133ba:	460a      	movcs	r2, r1
   133bc:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   133be:	685d      	ldr	r5, [r3, #4]
   133c0:	681e      	ldr	r6, [r3, #0]
   133c2:	4620      	mov	r0, r4
   133c4:	f7ff ffdf 	bl	13386 <net_buf_id>
}
   133c8:	fb00 5006 	mla	r0, r0, r6, r5
   133cc:	bd70      	pop	{r4, r5, r6, pc}

000133ce <net_buf_reset>:
	buf->len  = 0U;
   133ce:	2300      	movs	r3, #0
   133d0:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   133d2:	6943      	ldr	r3, [r0, #20]
   133d4:	60c3      	str	r3, [r0, #12]
}
   133d6:	4770      	bx	lr

000133d8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   133d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133dc:	b082      	sub	sp, #8
   133de:	4605      	mov	r5, r0
   133e0:	9101      	str	r1, [sp, #4]
   133e2:	4616      	mov	r6, r2
   133e4:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   133e6:	4610      	mov	r0, r2
   133e8:	4619      	mov	r1, r3
   133ea:	f002 fac9 	bl	15980 <sys_clock_timeout_end_calc>
   133ee:	4681      	mov	r9, r0
   133f0:	468a      	mov	sl, r1
	__asm__ volatile(
   133f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   133f6:	f3ef 8311 	mrs	r3, BASEPRI
   133fa:	f382 8812 	msr	BASEPRI_MAX, r2
   133fe:	f3bf 8f6f 	isb	sy
   13402:	461a      	mov	r2, r3
   13404:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13406:	8b6b      	ldrh	r3, [r5, #26]
   13408:	b393      	cbz	r3, 13470 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1340a:	8b2a      	ldrh	r2, [r5, #24]
   1340c:	4293      	cmp	r3, r2
   1340e:	d20b      	bcs.n	13428 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   13410:	2200      	movs	r2, #0
   13412:	2300      	movs	r3, #0
   13414:	4628      	mov	r0, r5
   13416:	f7fd fab1 	bl	1097c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1341a:	4604      	mov	r4, r0
   1341c:	b120      	cbz	r0, 13428 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   1341e:	f388 8811 	msr	BASEPRI, r8
   13422:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   13426:	e00a      	b.n	1343e <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   13428:	8b69      	ldrh	r1, [r5, #26]
   1342a:	1e4b      	subs	r3, r1, #1
   1342c:	836b      	strh	r3, [r5, #26]
   1342e:	f388 8811 	msr	BASEPRI, r8
   13432:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   13436:	4628      	mov	r0, r5
   13438:	f7ff ff64 	bl	13304 <pool_get_uninit>
   1343c:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1343e:	9b01      	ldr	r3, [sp, #4]
   13440:	b3a3      	cbz	r3, 134ac <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13442:	ea56 0307 	orrs.w	r3, r6, r7
   13446:	d005      	beq.n	13454 <net_buf_alloc_len+0x7c>
   13448:	f1b7 3fff 	cmp.w	r7, #4294967295
   1344c:	bf08      	it	eq
   1344e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   13452:	d11a      	bne.n	1348a <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13454:	4632      	mov	r2, r6
   13456:	463b      	mov	r3, r7
   13458:	a901      	add	r1, sp, #4
   1345a:	4620      	mov	r0, r4
   1345c:	f7ff ff65 	bl	1332a <data_alloc>
   13460:	4605      	mov	r5, r0
   13462:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   13464:	bb20      	cbnz	r0, 134b0 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   13466:	4620      	mov	r0, r4
   13468:	f7ff ff73 	bl	13352 <net_buf_destroy>
			return NULL;
   1346c:	462c      	mov	r4, r5
   1346e:	e029      	b.n	134c4 <net_buf_alloc_len+0xec>
   13470:	f382 8811 	msr	BASEPRI, r2
   13474:	f3bf 8f6f 	isb	sy
   13478:	4632      	mov	r2, r6
   1347a:	463b      	mov	r3, r7
   1347c:	4628      	mov	r0, r5
   1347e:	f7fd fa7d 	bl	1097c <z_impl_k_queue_get>
	if (!buf) {
   13482:	4604      	mov	r4, r0
   13484:	2800      	cmp	r0, #0
   13486:	d1da      	bne.n	1343e <net_buf_alloc_len+0x66>
   13488:	e01c      	b.n	134c4 <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   1348a:	f7fe f94b 	bl	11724 <sys_clock_tick_get>
   1348e:	ebb9 0900 	subs.w	r9, r9, r0
   13492:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   13496:	f1b9 0f01 	cmp.w	r9, #1
   1349a:	f17a 0300 	sbcs.w	r3, sl, #0
   1349e:	db02      	blt.n	134a6 <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   134a0:	464e      	mov	r6, r9
   134a2:	4657      	mov	r7, sl
   134a4:	e7d6      	b.n	13454 <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   134a6:	2600      	movs	r6, #0
   134a8:	4637      	mov	r7, r6
   134aa:	e7d3      	b.n	13454 <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   134ac:	2300      	movs	r3, #0
   134ae:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   134b0:	2301      	movs	r3, #1
   134b2:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   134b4:	2300      	movs	r3, #0
   134b6:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   134b8:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   134be:	4620      	mov	r0, r4
   134c0:	f7ff ff85 	bl	133ce <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   134c4:	4620      	mov	r0, r4
   134c6:	b002      	add	sp, #8
   134c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000134cc <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   134cc:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   134ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
   134d0:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   134d2:	6809      	ldr	r1, [r1, #0]
   134d4:	f7ff ff80 	bl	133d8 <net_buf_alloc_len>
}
   134d8:	bd08      	pop	{r3, pc}

000134da <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   134da:	b508      	push	{r3, lr}
   134dc:	f7fd fa4e 	bl	1097c <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   134e0:	bd08      	pop	{r3, pc}

000134e2 <net_buf_slist_put>:
	__asm__ volatile(
   134e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   134e6:	f3ef 8311 	mrs	r3, BASEPRI
   134ea:	f382 8812 	msr	BASEPRI_MAX, r2
   134ee:	f3bf 8f6f 	isb	sy
	parent->next = child;
   134f2:	2200      	movs	r2, #0
   134f4:	600a      	str	r2, [r1, #0]
	return list->tail;
   134f6:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   134f8:	b132      	cbz	r2, 13508 <net_buf_slist_put+0x26>
	parent->next = child;
   134fa:	6011      	str	r1, [r2, #0]
	list->tail = node;
   134fc:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   134fe:	f383 8811 	msr	BASEPRI, r3
   13502:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   13506:	4770      	bx	lr
   13508:	6041      	str	r1, [r0, #4]
	list->head = node;
   1350a:	6001      	str	r1, [r0, #0]
}
   1350c:	e7f7      	b.n	134fe <net_buf_slist_put+0x1c>

0001350e <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1350e:	4603      	mov	r3, r0
	__asm__ volatile(
   13510:	f04f 0140 	mov.w	r1, #64	; 0x40
   13514:	f3ef 8211 	mrs	r2, BASEPRI
   13518:	f381 8812 	msr	BASEPRI_MAX, r1
   1351c:	f3bf 8f6f 	isb	sy
	return list->head;
   13520:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   13522:	b128      	cbz	r0, 13530 <net_buf_slist_get+0x22>
	return node->next;
   13524:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   13526:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13528:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1352c:	4560      	cmp	r0, ip
   1352e:	d004      	beq.n	1353a <net_buf_slist_get+0x2c>
	__asm__ volatile(
   13530:	f382 8811 	msr	BASEPRI, r2
   13534:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   13538:	4770      	bx	lr
	list->tail = node;
   1353a:	6059      	str	r1, [r3, #4]
}
   1353c:	e7f8      	b.n	13530 <net_buf_slist_get+0x22>

0001353e <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1353e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   13540:	f001 feba 	bl	152b8 <k_queue_append>
}
   13544:	bd08      	pop	{r3, pc}

00013546 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13546:	b538      	push	{r3, r4, r5, lr}
   13548:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   1354a:	e00a      	b.n	13562 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   1354c:	2300      	movs	r3, #0
   1354e:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   13550:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   13552:	7aa0      	ldrb	r0, [r4, #10]
   13554:	f7fa f9de 	bl	d914 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   13558:	6a03      	ldr	r3, [r0, #32]
   1355a:	b193      	cbz	r3, 13582 <net_buf_unref+0x3c>
			pool->destroy(buf);
   1355c:	4620      	mov	r0, r4
   1355e:	4798      	blx	r3
{
   13560:	462c      	mov	r4, r5
	while (buf) {
   13562:	b194      	cbz	r4, 1358a <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   13564:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   13566:	7a23      	ldrb	r3, [r4, #8]
   13568:	3b01      	subs	r3, #1
   1356a:	b2db      	uxtb	r3, r3
   1356c:	7223      	strb	r3, [r4, #8]
   1356e:	b963      	cbnz	r3, 1358a <net_buf_unref+0x44>
		if (buf->__buf) {
   13570:	6961      	ldr	r1, [r4, #20]
   13572:	2900      	cmp	r1, #0
   13574:	d0ea      	beq.n	1354c <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   13576:	4620      	mov	r0, r4
   13578:	f7ff fef4 	bl	13364 <data_unref>
			buf->__buf = NULL;
   1357c:	2300      	movs	r3, #0
   1357e:	6163      	str	r3, [r4, #20]
   13580:	e7e4      	b.n	1354c <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   13582:	4620      	mov	r0, r4
   13584:	f7ff fee5 	bl	13352 <net_buf_destroy>
   13588:	e7ea      	b.n	13560 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   1358a:	bd38      	pop	{r3, r4, r5, pc}

0001358c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1358c:	7a02      	ldrb	r2, [r0, #8]
   1358e:	3201      	adds	r2, #1
   13590:	7202      	strb	r2, [r0, #8]
	return buf;
}
   13592:	4770      	bx	lr

00013594 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13594:	6883      	ldr	r3, [r0, #8]
   13596:	440b      	add	r3, r1
   13598:	6003      	str	r3, [r0, #0]
}
   1359a:	4770      	bx	lr

0001359c <net_buf_simple_add>:
	return buf->data + buf->len;
   1359c:	6802      	ldr	r2, [r0, #0]
   1359e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   135a0:	4419      	add	r1, r3
   135a2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   135a4:	18d0      	adds	r0, r2, r3
   135a6:	4770      	bx	lr

000135a8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   135a8:	b538      	push	{r3, r4, r5, lr}
   135aa:	460d      	mov	r5, r1
   135ac:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   135ae:	4611      	mov	r1, r2
   135b0:	f7ff fff4 	bl	1359c <net_buf_simple_add>
   135b4:	4622      	mov	r2, r4
   135b6:	4629      	mov	r1, r5
   135b8:	f7ff fb27 	bl	12c0a <memcpy>
}
   135bc:	bd38      	pop	{r3, r4, r5, pc}

000135be <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   135be:	b510      	push	{r4, lr}
   135c0:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   135c2:	2101      	movs	r1, #1
   135c4:	f7ff ffea 	bl	1359c <net_buf_simple_add>
	*u8 = val;
   135c8:	7004      	strb	r4, [r0, #0]

	return u8;
}
   135ca:	bd10      	pop	{r4, pc}

000135cc <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   135cc:	4603      	mov	r3, r0
	void *data = buf->data;
   135ce:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   135d0:	889a      	ldrh	r2, [r3, #4]
   135d2:	1a52      	subs	r2, r2, r1
   135d4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   135d6:	4401      	add	r1, r0
   135d8:	6019      	str	r1, [r3, #0]

	return data;
}
   135da:	4770      	bx	lr

000135dc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   135dc:	6802      	ldr	r2, [r0, #0]
   135de:	6880      	ldr	r0, [r0, #8]
}
   135e0:	1a10      	subs	r0, r2, r0
   135e2:	4770      	bx	lr

000135e4 <nrf_saadc_channel_init>:
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
   135e4:	7813      	ldrb	r3, [r2, #0]
   135e6:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
   135ea:	f892 c001 	ldrb.w	ip, [r2, #1]
   135ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   135f2:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
   135f6:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   135fa:	f892 c002 	ldrb.w	ip, [r2, #2]
   135fe:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   13602:	f40c 6ce0 	and.w	ip, ip, #1792	; 0x700
   13606:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
   1360a:	f892 c003 	ldrb.w	ip, [r2, #3]
   1360e:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
   13612:	f40c 5c80 	and.w	ip, ip, #4096	; 0x1000
   13616:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
   1361a:	f892 c004 	ldrb.w	ip, [r2, #4]
   1361e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   13622:	f40c 2ce0 	and.w	ip, ip, #458752	; 0x70000
   13626:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1362a:	f892 c005 	ldrb.w	ip, [r2, #5]
   1362e:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   13632:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
   13636:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
   1363a:	7992      	ldrb	r2, [r2, #6]
   1363c:	0612      	lsls	r2, r2, #24
   1363e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
   13642:	4313      	orrs	r3, r2
    p_reg->CH[channel].CONFIG =
   13644:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   13648:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
}
   1364c:	4770      	bx	lr

0001364e <check_buffer_size>:
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1364e:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
   13650:	6803      	ldr	r3, [r0, #0]
   13652:	b113      	cbz	r3, 1365a <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   13654:	899b      	ldrh	r3, [r3, #12]
   13656:	fb03 1101 	mla	r1, r3, r1, r1
	if (sequence->buffer_size < needed_buffer_size) {
   1365a:	68c3      	ldr	r3, [r0, #12]
   1365c:	428b      	cmp	r3, r1
   1365e:	d301      	bcc.n	13664 <check_buffer_size+0x16>
	return 0;
   13660:	2000      	movs	r0, #0
   13662:	4770      	bx	lr
		return -ENOMEM;
   13664:	f06f 000b 	mvn.w	r0, #11
}
   13668:	4770      	bx	lr

0001366a <adc_context_request_next_sampling>:
{
   1366a:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1366c:	f3bf 8f5b 	dmb	ish
   13670:	e850 3f00 	ldrex	r3, [r0]
   13674:	1c5a      	adds	r2, r3, #1
   13676:	e840 2100 	strex	r1, r2, [r0]
   1367a:	2900      	cmp	r1, #0
   1367c:	d1f8      	bne.n	13670 <adc_context_request_next_sampling+0x6>
   1367e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   13682:	b11b      	cbz	r3, 1368c <adc_context_request_next_sampling+0x22>
		ctx->status = -EBUSY;
   13684:	f06f 030f 	mvn.w	r3, #15
   13688:	6703      	str	r3, [r0, #112]	; 0x70
}
   1368a:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
   1368c:	f7fa fa0e 	bl	daac <adc_context_start_sampling>
   13690:	e7fb      	b.n	1368a <adc_context_request_next_sampling+0x20>

00013692 <adc_context_on_timer_expired>:
{
	k_timer_stop(&ctx->timer);
}

static void adc_context_on_timer_expired(struct k_timer *timer_id)
{
   13692:	b508      	push	{r3, lr}
	struct adc_context *ctx =
		CONTAINER_OF(timer_id, struct adc_context, timer);

	adc_context_request_next_sampling(ctx);
   13694:	3808      	subs	r0, #8
   13696:	f7ff ffe8 	bl	1366a <adc_context_request_next_sampling>
}
   1369a:	bd08      	pop	{r3, pc}

0001369c <adc_context_lock>:
#endif /* ADC_CONTEXT_USES_KERNEL_TIMER */

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
   1369c:	b508      	push	{r3, lr}
	k_sem_take(&ctx->lock, K_FOREVER);
   1369e:	3040      	adds	r0, #64	; 0x40
	return z_impl_k_sem_take(sem, timeout);
   136a0:	f04f 32ff 	mov.w	r2, #4294967295
   136a4:	f04f 33ff 	mov.w	r3, #4294967295
   136a8:	f7fd f9ce 	bl	10a48 <z_impl_k_sem_take>

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
	ctx->signal = signal;
#endif /* CONFIG_ADC_ASYNC */
}
   136ac:	bd08      	pop	{r3, pc}

000136ae <adc_context_wait_for_completion>:
		k_sem_give(&ctx->lock);
	}
}

static inline int adc_context_wait_for_completion(struct adc_context *ctx)
{
   136ae:	b510      	push	{r4, lr}
   136b0:	4604      	mov	r4, r0
	if (ctx->asynchronous) {
		return 0;
	}
#endif /* CONFIG_ADC_ASYNC */

	k_sem_take(&ctx->sync, K_FOREVER);
   136b2:	3058      	adds	r0, #88	; 0x58
   136b4:	f04f 32ff 	mov.w	r2, #4294967295
   136b8:	f04f 33ff 	mov.w	r3, #4294967295
   136bc:	f7fd f9c4 	bl	10a48 <z_impl_k_sem_take>
	return ctx->status;
}
   136c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
   136c2:	bd10      	pop	{r4, pc}

000136c4 <adc_context_start_read>:
	k_sem_give(&ctx->sync);
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
   136c4:	b538      	push	{r3, r4, r5, lr}
   136c6:	4684      	mov	ip, r0
   136c8:	460d      	mov	r5, r1
	ctx->sequence = *sequence;
   136ca:	f100 0e74 	add.w	lr, r0, #116	; 0x74
   136ce:	460c      	mov	r4, r1
   136d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   136d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   136d6:	6823      	ldr	r3, [r4, #0]
   136d8:	f8ce 3000 	str.w	r3, [lr]
	ctx->status = 0;
   136dc:	2300      	movs	r3, #0
   136de:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
   136e2:	682b      	ldr	r3, [r5, #0]
   136e4:	b153      	cbz	r3, 136fc <adc_context_start_read+0x38>
		ctx->options = *sequence->options;
   136e6:	f10c 0488 	add.w	r4, ip, #136	; 0x88
   136ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   136ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   136f0:	f8cc 4074 	str.w	r4, [ip, #116]	; 0x74
		ctx->sampling_index = 0U;
   136f4:	2300      	movs	r3, #0
   136f6:	f8ac 3098 	strh.w	r3, [ip, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   136fa:	b918      	cbnz	r0, 13704 <adc_context_start_read+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   136fc:	4660      	mov	r0, ip
   136fe:	f7fa f9d5 	bl	daac <adc_context_start_sampling>
}
   13702:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13704:	2300      	movs	r3, #0
   13706:	f3bf 8f5b 	dmb	ish
   1370a:	e85c 2f00 	ldrex	r2, [ip]
   1370e:	e84c 3100 	strex	r1, r3, [ip]
   13712:	2900      	cmp	r1, #0
   13714:	d1f9      	bne.n	1370a <adc_context_start_read+0x46>
   13716:	f3bf 8f5b 	dmb	ish
			adc_context_enable_timer(ctx);
   1371a:	4660      	mov	r0, ip
   1371c:	f7fa fa1e 	bl	db5c <adc_context_enable_timer>
			return;
   13720:	e7ef      	b.n	13702 <adc_context_start_read+0x3e>

00013722 <adc_context_unlock_unconditionally>:
{
   13722:	b508      	push	{r3, lr}
	return sem->count;
   13724:	6c83      	ldr	r3, [r0, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
   13726:	b103      	cbz	r3, 1372a <adc_context_unlock_unconditionally+0x8>
}
   13728:	bd08      	pop	{r3, pc}
		k_sem_give(&ctx->lock);
   1372a:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
   1372c:	f7fd f964 	bl	109f8 <z_impl_k_sem_give>
}
   13730:	e7fa      	b.n	13728 <adc_context_unlock_unconditionally+0x6>

00013732 <adc_context_on_sampling_done>:
 * depending on the realized sequence) is done. It calls the defined callback
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
   13732:	b510      	push	{r4, lr}
   13734:	4604      	mov	r4, r0
	if (ctx->sequence.options) {
   13736:	6f43      	ldr	r3, [r0, #116]	; 0x74
   13738:	b30b      	cbz	r3, 1377e <adc_context_on_sampling_done+0x4c>
   1373a:	4608      	mov	r0, r1
		adc_sequence_callback callback = ctx->options.callback;
   1373c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   13740:	b143      	cbz	r3, 13754 <adc_context_on_sampling_done+0x22>
			action = callback(dev,
   13742:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   13746:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1374a:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1374c:	2801      	cmp	r0, #1
   1374e:	d00d      	beq.n	1376c <adc_context_on_sampling_done+0x3a>
   13750:	2802      	cmp	r0, #2
   13752:	d00e      	beq.n	13772 <adc_context_on_sampling_done+0x40>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   13754:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
			    ctx->options.extra_samplings) {
   13758:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
			if (ctx->sampling_index <
   1375c:	4293      	cmp	r3, r2
   1375e:	d213      	bcs.n	13788 <adc_context_on_sampling_done+0x56>
				++ctx->sampling_index;
   13760:	3301      	adds	r3, #1
   13762:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
		bool repeat = false;
   13766:	2100      	movs	r1, #0
		bool finish = false;
   13768:	460b      	mov	r3, r1
   1376a:	e004      	b.n	13776 <adc_context_on_sampling_done+0x44>
		switch (action) {
   1376c:	2101      	movs	r1, #1
   1376e:	2300      	movs	r3, #0
   13770:	e001      	b.n	13776 <adc_context_on_sampling_done+0x44>
		bool repeat = false;
   13772:	2100      	movs	r1, #0
			finish = true;
   13774:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
   13776:	b153      	cbz	r3, 1378e <adc_context_on_sampling_done+0x5c>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   13778:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1377c:	bb13      	cbnz	r3, 137c4 <adc_context_on_sampling_done+0x92>
	k_sem_give(&ctx->sync);
   1377e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13782:	f7fd f939 	bl	109f8 <z_impl_k_sem_give>
			adc_context_disable_timer(ctx);
		}
	}

	adc_context_complete(ctx, 0);
}
   13786:	bd10      	pop	{r4, pc}
		bool repeat = false;
   13788:	2100      	movs	r1, #0
				finish = true;
   1378a:	2301      	movs	r3, #1
   1378c:	e7f3      	b.n	13776 <adc_context_on_sampling_done+0x44>
			adc_context_update_buffer_pointer(ctx, repeat);
   1378e:	4620      	mov	r0, r4
   13790:	f7fa f99e 	bl	dad0 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
   13794:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   13798:	b91b      	cbnz	r3, 137a2 <adc_context_on_sampling_done+0x70>
				adc_context_start_sampling(ctx);
   1379a:	4620      	mov	r0, r4
   1379c:	f7fa f986 	bl	daac <adc_context_start_sampling>
   137a0:	e7f1      	b.n	13786 <adc_context_on_sampling_done+0x54>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   137a2:	f3bf 8f5b 	dmb	ish
   137a6:	e854 3f00 	ldrex	r3, [r4]
   137aa:	1e5a      	subs	r2, r3, #1
   137ac:	e844 2100 	strex	r1, r2, [r4]
   137b0:	2900      	cmp	r1, #0
   137b2:	d1f8      	bne.n	137a6 <adc_context_on_sampling_done+0x74>
   137b4:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   137b8:	2b01      	cmp	r3, #1
   137ba:	dde4      	ble.n	13786 <adc_context_on_sampling_done+0x54>
				adc_context_start_sampling(ctx);
   137bc:	4620      	mov	r0, r4
   137be:	f7fa f975 	bl	daac <adc_context_start_sampling>
			return;
   137c2:	e7e0      	b.n	13786 <adc_context_on_sampling_done+0x54>
	k_timer_stop(&ctx->timer);
   137c4:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_timer_stop(timer);
   137c8:	f002 f913 	bl	159f2 <z_impl_k_timer_stop>
}
   137cc:	e7d7      	b.n	1377e <adc_context_on_sampling_done+0x4c>

000137ce <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   137ce:	b119      	cbz	r1, 137d8 <nrf_clock_is_running+0xa>
   137d0:	2901      	cmp	r1, #1
   137d2:	d00e      	beq.n	137f2 <nrf_clock_is_running+0x24>
   137d4:	2000      	movs	r0, #0
   137d6:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   137d8:	b122      	cbz	r2, 137e4 <nrf_clock_is_running+0x16>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   137da:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   137de:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   137e2:	6013      	str	r3, [r2, #0]
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   137e4:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   137e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   137ec:	d10e      	bne.n	1380c <nrf_clock_is_running+0x3e>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   137ee:	2000      	movs	r0, #0
   137f0:	4770      	bx	lr
            if (p_clk_src != NULL)
   137f2:	b122      	cbz	r2, 137fe <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   137f4:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   137f8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   137fc:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   137fe:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   13802:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13806:	d103      	bne.n	13810 <nrf_clock_is_running+0x42>
    return false;
   13808:	2000      	movs	r0, #0
   1380a:	4770      	bx	lr
                return true;
   1380c:	2001      	movs	r0, #1
   1380e:	4770      	bx	lr
                return true;
   13810:	2001      	movs	r0, #1
}
   13812:	4770      	bx	lr

00013814 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   13814:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   13816:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1381a:	0089      	lsls	r1, r1, #2
   1381c:	3138      	adds	r1, #56	; 0x38
}
   1381e:	4408      	add	r0, r1
   13820:	4770      	bx	lr

00013822 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   13822:	6840      	ldr	r0, [r0, #4]
}
   13824:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   13828:	4770      	bx	lr

0001382a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1382a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1382c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   13830:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   13834:	4770      	bx	lr

00013836 <get_status>:
{
   13836:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13838:	b2c9      	uxtb	r1, r1
   1383a:	f7ff ffeb 	bl	13814 <get_sub_data>
   1383e:	6880      	ldr	r0, [r0, #8]
}
   13840:	f000 0007 	and.w	r0, r0, #7
   13844:	bd08      	pop	{r3, pc}

00013846 <set_off_state>:
	__asm__ volatile(
   13846:	f04f 0340 	mov.w	r3, #64	; 0x40
   1384a:	f3ef 8211 	mrs	r2, BASEPRI
   1384e:	f383 8812 	msr	BASEPRI_MAX, r3
   13852:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13856:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13858:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1385c:	d001      	beq.n	13862 <set_off_state+0x1c>
   1385e:	428b      	cmp	r3, r1
   13860:	d107      	bne.n	13872 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13862:	2301      	movs	r3, #1
   13864:	6003      	str	r3, [r0, #0]
	int err = 0;
   13866:	2000      	movs	r0, #0
	__asm__ volatile(
   13868:	f382 8811 	msr	BASEPRI, r2
   1386c:	f3bf 8f6f 	isb	sy
}
   13870:	4770      	bx	lr
		err = -EPERM;
   13872:	f04f 30ff 	mov.w	r0, #4294967295
   13876:	e7f7      	b.n	13868 <set_off_state+0x22>

00013878 <set_starting_state>:
	__asm__ volatile(
   13878:	f04f 0340 	mov.w	r3, #64	; 0x40
   1387c:	f3ef 8211 	mrs	r2, BASEPRI
   13880:	f383 8812 	msr	BASEPRI_MAX, r3
   13884:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13888:	6803      	ldr	r3, [r0, #0]
   1388a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1388e:	f003 0307 	and.w	r3, r3, #7
   13892:	2b01      	cmp	r3, #1
   13894:	d008      	beq.n	138a8 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   13896:	458c      	cmp	ip, r1
   13898:	d009      	beq.n	138ae <set_starting_state+0x36>
		err = -EPERM;
   1389a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1389e:	f382 8811 	msr	BASEPRI, r2
   138a2:	f3bf 8f6f 	isb	sy
}
   138a6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   138a8:	6001      	str	r1, [r0, #0]
	int err = 0;
   138aa:	2000      	movs	r0, #0
   138ac:	e7f7      	b.n	1389e <set_starting_state+0x26>
		err = -EALREADY;
   138ae:	f06f 0077 	mvn.w	r0, #119	; 0x77
   138b2:	e7f4      	b.n	1389e <set_starting_state+0x26>

000138b4 <set_on_state>:
	__asm__ volatile(
   138b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   138b8:	f3ef 8211 	mrs	r2, BASEPRI
   138bc:	f383 8812 	msr	BASEPRI_MAX, r3
   138c0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   138c4:	6803      	ldr	r3, [r0, #0]
   138c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   138ca:	f043 0302 	orr.w	r3, r3, #2
   138ce:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   138d0:	f382 8811 	msr	BASEPRI, r2
   138d4:	f3bf 8f6f 	isb	sy
}
   138d8:	4770      	bx	lr

000138da <clkstarted_handle>:
{
   138da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138dc:	4606      	mov	r6, r0
   138de:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   138e0:	f7ff ff98 	bl	13814 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   138e4:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   138e6:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   138e8:	2300      	movs	r3, #0
   138ea:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   138ee:	f7ff ffe1 	bl	138b4 <set_on_state>
	if (callback) {
   138f2:	b11d      	cbz	r5, 138fc <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   138f4:	463a      	mov	r2, r7
   138f6:	4621      	mov	r1, r4
   138f8:	4630      	mov	r0, r6
   138fa:	47a8      	blx	r5
}
   138fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000138fe <stop>:
{
   138fe:	b570      	push	{r4, r5, r6, lr}
   13900:	4606      	mov	r6, r0
   13902:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   13904:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13906:	4621      	mov	r1, r4
   13908:	f7ff ff84 	bl	13814 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1390c:	4629      	mov	r1, r5
   1390e:	3008      	adds	r0, #8
   13910:	f7ff ff99 	bl	13846 <set_off_state>
	if (err < 0) {
   13914:	2800      	cmp	r0, #0
   13916:	db06      	blt.n	13926 <stop+0x28>
	get_sub_config(dev, type)->stop();
   13918:	4621      	mov	r1, r4
   1391a:	4630      	mov	r0, r6
   1391c:	f7ff ff81 	bl	13822 <get_sub_config>
   13920:	6843      	ldr	r3, [r0, #4]
   13922:	4798      	blx	r3
	return 0;
   13924:	2000      	movs	r0, #0
}
   13926:	bd70      	pop	{r4, r5, r6, pc}

00013928 <api_stop>:
{
   13928:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1392a:	2280      	movs	r2, #128	; 0x80
   1392c:	f7ff ffe7 	bl	138fe <stop>
}
   13930:	bd08      	pop	{r3, pc}

00013932 <async_start>:
{
   13932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13936:	4606      	mov	r6, r0
   13938:	4690      	mov	r8, r2
   1393a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1393c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1393e:	4629      	mov	r1, r5
   13940:	f7ff ff68 	bl	13814 <get_sub_data>
   13944:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   13946:	9906      	ldr	r1, [sp, #24]
   13948:	3008      	adds	r0, #8
   1394a:	f7ff ff95 	bl	13878 <set_starting_state>
	if (err < 0) {
   1394e:	2800      	cmp	r0, #0
   13950:	db09      	blt.n	13966 <async_start+0x34>
	subdata->cb = cb;
   13952:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   13956:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   13958:	4629      	mov	r1, r5
   1395a:	4630      	mov	r0, r6
   1395c:	f7ff ff61 	bl	13822 <get_sub_config>
   13960:	6803      	ldr	r3, [r0, #0]
   13962:	4798      	blx	r3
	return 0;
   13964:	2000      	movs	r0, #0
}
   13966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001396a <api_start>:
{
   1396a:	b510      	push	{r4, lr}
   1396c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1396e:	2480      	movs	r4, #128	; 0x80
   13970:	9400      	str	r4, [sp, #0]
   13972:	f7ff ffde 	bl	13932 <async_start>
}
   13976:	b002      	add	sp, #8
   13978:	bd10      	pop	{r4, pc}

0001397a <onoff_started_callback>:
{
   1397a:	b510      	push	{r4, lr}
   1397c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1397e:	b2c9      	uxtb	r1, r1
   13980:	f7ff ff53 	bl	1382a <get_onoff_manager>
	notify(mgr, 0);
   13984:	2100      	movs	r1, #0
   13986:	47a0      	blx	r4
}
   13988:	bd10      	pop	{r4, pc}

0001398a <hfclk_start>:
{
   1398a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1398c:	2001      	movs	r0, #1
   1398e:	f7fb fd59 	bl	f444 <nrfx_clock_start>
}
   13992:	bd08      	pop	{r3, pc}

00013994 <hfclk_stop>:
{
   13994:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13996:	2001      	movs	r0, #1
   13998:	f000 ff60 	bl	1485c <nrfx_clock_stop>
}
   1399c:	bd08      	pop	{r3, pc}

0001399e <lfclk_stop>:
{
   1399e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   139a0:	2000      	movs	r0, #0
   139a2:	f000 ff5b 	bl	1485c <nrfx_clock_stop>
}
   139a6:	bd08      	pop	{r3, pc}

000139a8 <k_msleep>:
{
   139a8:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   139aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   139ae:	17c1      	asrs	r1, r0, #31
   139b0:	03c9      	lsls	r1, r1, #15
   139b2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   139b6:	03c0      	lsls	r0, r0, #15
   139b8:	f240 33e7 	movw	r3, #999	; 0x3e7
   139bc:	18c0      	adds	r0, r0, r3
   139be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   139c2:	f04f 0300 	mov.w	r3, #0
   139c6:	f141 0100 	adc.w	r1, r1, #0
   139ca:	f7ec ff7d 	bl	8c8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   139ce:	f7fd fd0d 	bl	113ec <z_impl_k_sleep>
}
   139d2:	bd08      	pop	{r3, pc}

000139d4 <blocking_start_callback>:
{
   139d4:	b508      	push	{r3, lr}
   139d6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   139d8:	f7fd f80e 	bl	109f8 <z_impl_k_sem_give>
}
   139dc:	bd08      	pop	{r3, pc}

000139de <lfclk_start>:
{
   139de:	b508      	push	{r3, lr}
		anomaly_132_workaround();
   139e0:	f7fa faa4 	bl	df2c <anomaly_132_workaround>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   139e4:	2000      	movs	r0, #0
   139e6:	f7fb fd2d 	bl	f444 <nrfx_clock_start>
}
   139ea:	bd08      	pop	{r3, pc}

000139ec <rng_pool_put>:
	uint8_t first = rngp->first_read;
   139ec:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   139ee:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   139f0:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   139f4:	1a9a      	subs	r2, r3, r2
   139f6:	ea3c 0202 	bics.w	r2, ip, r2
   139fa:	d007      	beq.n	13a0c <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   139fc:	18c2      	adds	r2, r0, r3
   139fe:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   13a00:	3301      	adds	r3, #1
   13a02:	ea03 030c 	and.w	r3, r3, ip
   13a06:	7083      	strb	r3, [r0, #2]
	return 0;
   13a08:	2000      	movs	r0, #0
   13a0a:	4770      	bx	lr
		return -ENOBUFS;
   13a0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   13a10:	4770      	bx	lr

00013a12 <rng_pool_init>:
	rngp->first_alloc = 0U;
   13a12:	2300      	movs	r3, #0
   13a14:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   13a16:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   13a18:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   13a1a:	3901      	subs	r1, #1
   13a1c:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   13a1e:	7102      	strb	r2, [r0, #4]
}
   13a20:	4770      	bx	lr

00013a22 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   13a22:	2000      	movs	r0, #0
   13a24:	4770      	bx	lr

00013a26 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   13a26:	b538      	push	{r3, r4, r5, lr}
   13a28:	460c      	mov	r4, r1
   13a2a:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   13a2c:	f7f9 fbaa 	bl	d184 <bt_is_ready>
   13a30:	b120      	cbz	r0, 13a3c <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   13a32:	4629      	mov	r1, r5
   13a34:	4620      	mov	r0, r4
   13a36:	f7f9 f9d1 	bl	cddc <bt_hci_le_rand>
}
   13a3a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   13a3c:	f06f 000a 	mvn.w	r0, #10
   13a40:	e7fb      	b.n	13a3a <entropy_bt_get_entropy+0x14>

00013a42 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   13a42:	460b      	mov	r3, r1
   13a44:	b139      	cbz	r1, 13a56 <sys_slist_remove+0x14>
	return node->next;
   13a46:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   13a48:	6019      	str	r1, [r3, #0]
	return list->tail;
   13a4a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   13a4c:	428a      	cmp	r2, r1
   13a4e:	d009      	beq.n	13a64 <sys_slist_remove+0x22>
	parent->next = child;
   13a50:	2300      	movs	r3, #0
   13a52:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13a54:	4770      	bx	lr
	return node->next;
   13a56:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   13a58:	6003      	str	r3, [r0, #0]
	return list->tail;
   13a5a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   13a5c:	428a      	cmp	r2, r1
   13a5e:	d1f7      	bne.n	13a50 <sys_slist_remove+0xe>
	list->tail = node;
   13a60:	6043      	str	r3, [r0, #4]
}
   13a62:	e7f5      	b.n	13a50 <sys_slist_remove+0xe>
	list->tail = node;
   13a64:	6043      	str	r3, [r0, #4]
}
   13a66:	e7f3      	b.n	13a50 <sys_slist_remove+0xe>

00013a68 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13a68:	b508      	push	{r3, lr}
   13a6a:	460a      	mov	r2, r1
	return list->head;
   13a6c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13a6e:	2100      	movs	r1, #0
   13a70:	e001      	b.n	13a76 <sys_slist_find_and_remove+0xe>
   13a72:	4619      	mov	r1, r3
   13a74:	681b      	ldr	r3, [r3, #0]
   13a76:	b12b      	cbz	r3, 13a84 <sys_slist_find_and_remove+0x1c>
   13a78:	4293      	cmp	r3, r2
   13a7a:	d1fa      	bne.n	13a72 <sys_slist_find_and_remove+0xa>
   13a7c:	f7ff ffe1 	bl	13a42 <sys_slist_remove>
   13a80:	2001      	movs	r0, #1
   13a82:	e000      	b.n	13a86 <sys_slist_find_and_remove+0x1e>
   13a84:	2000      	movs	r0, #0
   13a86:	bd08      	pop	{r3, pc}

00013a88 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   13a88:	b570      	push	{r4, r5, r6, lr}
   13a8a:	4604      	mov	r4, r0
   13a8c:	460d      	mov	r5, r1
   13a8e:	4616      	mov	r6, r2
	return list->head;
   13a90:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   13a92:	b133      	cbz	r3, 13aa2 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   13a94:	f7ff ffe8 	bl	13a68 <sys_slist_find_and_remove>
   13a98:	b970      	cbnz	r0, 13ab8 <gpio_manage_callback+0x30>
			if (!set) {
   13a9a:	b91e      	cbnz	r6, 13aa4 <gpio_manage_callback+0x1c>
				return -EINVAL;
   13a9c:	f06f 0015 	mvn.w	r0, #21
   13aa0:	e006      	b.n	13ab0 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   13aa2:	b132      	cbz	r2, 13ab2 <gpio_manage_callback+0x2a>
   13aa4:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   13aa6:	602b      	str	r3, [r5, #0]
	list->head = node;
   13aa8:	6025      	str	r5, [r4, #0]
	return list->tail;
   13aaa:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   13aac:	b143      	cbz	r3, 13ac0 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   13aae:	2000      	movs	r0, #0
}
   13ab0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13ab2:	f06f 0015 	mvn.w	r0, #21
   13ab6:	e7fb      	b.n	13ab0 <gpio_manage_callback+0x28>
	if (set) {
   13ab8:	2e00      	cmp	r6, #0
   13aba:	d1f3      	bne.n	13aa4 <gpio_manage_callback+0x1c>
	return 0;
   13abc:	2000      	movs	r0, #0
   13abe:	e7f7      	b.n	13ab0 <gpio_manage_callback+0x28>
	list->tail = node;
   13ac0:	6065      	str	r5, [r4, #4]
   13ac2:	2000      	movs	r0, #0
}
   13ac4:	e7f4      	b.n	13ab0 <gpio_manage_callback+0x28>

00013ac6 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   13ac6:	b570      	push	{r4, r5, r6, lr}
   13ac8:	460e      	mov	r6, r1
   13aca:	4615      	mov	r5, r2
	return list->head;
   13acc:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13ace:	b121      	cbz	r1, 13ada <gpio_fire_callbacks+0x14>
	return node->next;
   13ad0:	680c      	ldr	r4, [r1, #0]
   13ad2:	b13c      	cbz	r4, 13ae4 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13ad4:	b931      	cbnz	r1, 13ae4 <gpio_fire_callbacks+0x1e>
   13ad6:	460c      	mov	r4, r1
   13ad8:	e004      	b.n	13ae4 <gpio_fire_callbacks+0x1e>
   13ada:	460c      	mov	r4, r1
   13adc:	e002      	b.n	13ae4 <gpio_fire_callbacks+0x1e>
   13ade:	4623      	mov	r3, r4
   13ae0:	4621      	mov	r1, r4
   13ae2:	461c      	mov	r4, r3
   13ae4:	b171      	cbz	r1, 13b04 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   13ae6:	688a      	ldr	r2, [r1, #8]
   13ae8:	402a      	ands	r2, r5
   13aea:	d002      	beq.n	13af2 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   13aec:	684b      	ldr	r3, [r1, #4]
   13aee:	4630      	mov	r0, r6
   13af0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13af2:	2c00      	cmp	r4, #0
   13af4:	d0f3      	beq.n	13ade <gpio_fire_callbacks+0x18>
	return node->next;
   13af6:	6823      	ldr	r3, [r4, #0]
   13af8:	2b00      	cmp	r3, #0
   13afa:	d0f1      	beq.n	13ae0 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13afc:	2c00      	cmp	r4, #0
   13afe:	d1ef      	bne.n	13ae0 <gpio_fire_callbacks+0x1a>
   13b00:	4623      	mov	r3, r4
   13b02:	e7ed      	b.n	13ae0 <gpio_fire_callbacks+0x1a>
		}
	}
}
   13b04:	bd70      	pop	{r4, r5, r6, pc}

00013b06 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13b06:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   13b0a:	0580      	lsls	r0, r0, #22
   13b0c:	0d80      	lsrs	r0, r0, #22
   13b0e:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   13b12:	d033      	beq.n	13b7c <get_drive+0x76>
   13b14:	d816      	bhi.n	13b44 <get_drive+0x3e>
   13b16:	2806      	cmp	r0, #6
   13b18:	d02c      	beq.n	13b74 <get_drive+0x6e>
   13b1a:	d906      	bls.n	13b2a <get_drive+0x24>
   13b1c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   13b20:	d10d      	bne.n	13b3e <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   13b22:	2301      	movs	r3, #1
   13b24:	700b      	strb	r3, [r1, #0]
	return 0;
   13b26:	2000      	movs	r0, #0
		break;
   13b28:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13b2a:	b300      	cbz	r0, 13b6e <get_drive+0x68>
   13b2c:	2802      	cmp	r0, #2
   13b2e:	d103      	bne.n	13b38 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   13b30:	2304      	movs	r3, #4
   13b32:	700b      	strb	r3, [r1, #0]
	return 0;
   13b34:	2000      	movs	r0, #0
		break;
   13b36:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13b38:	f06f 0015 	mvn.w	r0, #21
   13b3c:	4770      	bx	lr
   13b3e:	f06f 0015 	mvn.w	r0, #21
   13b42:	4770      	bx	lr
   13b44:	f240 2302 	movw	r3, #514	; 0x202
   13b48:	4298      	cmp	r0, r3
   13b4a:	d01b      	beq.n	13b84 <get_drive+0x7e>
   13b4c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   13b50:	d103      	bne.n	13b5a <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   13b52:	2303      	movs	r3, #3
   13b54:	700b      	strb	r3, [r1, #0]
	return 0;
   13b56:	2000      	movs	r0, #0
		break;
   13b58:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13b5a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13b5e:	d103      	bne.n	13b68 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   13b60:	2302      	movs	r3, #2
   13b62:	700b      	strb	r3, [r1, #0]
	return 0;
   13b64:	2000      	movs	r0, #0
		break;
   13b66:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13b68:	f06f 0015 	mvn.w	r0, #21
   13b6c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   13b6e:	2000      	movs	r0, #0
   13b70:	7008      	strb	r0, [r1, #0]
		break;
   13b72:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   13b74:	2306      	movs	r3, #6
   13b76:	700b      	strb	r3, [r1, #0]
	return 0;
   13b78:	2000      	movs	r0, #0
		break;
   13b7a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   13b7c:	2307      	movs	r3, #7
   13b7e:	700b      	strb	r3, [r1, #0]
	return 0;
   13b80:	2000      	movs	r0, #0
		break;
   13b82:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   13b84:	2305      	movs	r3, #5
   13b86:	700b      	strb	r3, [r1, #0]
	return 0;
   13b88:	2000      	movs	r0, #0
}
   13b8a:	4770      	bx	lr

00013b8c <get_pull>:
	if (flags & GPIO_PULL_UP) {
   13b8c:	f010 0f10 	tst.w	r0, #16
   13b90:	d104      	bne.n	13b9c <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   13b92:	f010 0f20 	tst.w	r0, #32
   13b96:	d103      	bne.n	13ba0 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   13b98:	2000      	movs	r0, #0
   13b9a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   13b9c:	2003      	movs	r0, #3
   13b9e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   13ba0:	2001      	movs	r0, #1
}
   13ba2:	4770      	bx	lr

00013ba4 <gpio_nrfx_port_get_raw>:
	return port->config;
   13ba4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13ba6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   13ba8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   13bac:	600b      	str	r3, [r1, #0]
}
   13bae:	2000      	movs	r0, #0
   13bb0:	4770      	bx	lr

00013bb2 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   13bb2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13bb4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   13bb6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   13bba:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   13bbe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   13bc2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   13bc6:	2000      	movs	r0, #0
   13bc8:	4770      	bx	lr

00013bca <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   13bca:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13bcc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   13bce:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   13bd2:	2000      	movs	r0, #0
   13bd4:	4770      	bx	lr

00013bd6 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   13bd6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13bd8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   13bda:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   13bde:	2000      	movs	r0, #0
   13be0:	4770      	bx	lr

00013be2 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   13be2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13be4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   13be6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   13bea:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   13bee:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   13bf0:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   13bf4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   13bf8:	2000      	movs	r0, #0
   13bfa:	4770      	bx	lr

00013bfc <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   13bfc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   13c00:	d007      	beq.n	13c12 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13c02:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   13c06:	d00d      	beq.n	13c24 <get_trigger+0x28>
   13c08:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   13c0c:	d008      	beq.n	13c20 <get_trigger+0x24>
   13c0e:	2001      	movs	r0, #1
}
   13c10:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   13c12:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   13c16:	d001      	beq.n	13c1c <get_trigger+0x20>
   13c18:	2005      	movs	r0, #5
   13c1a:	4770      	bx	lr
   13c1c:	2004      	movs	r0, #4
   13c1e:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13c20:	2002      	movs	r0, #2
   13c22:	4770      	bx	lr
   13c24:	2003      	movs	r0, #3
   13c26:	4770      	bx	lr

00013c28 <gpio_nrfx_manage_callback>:
{
   13c28:	b508      	push	{r3, lr}
	return port->data;
   13c2a:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13c2c:	3004      	adds	r0, #4
   13c2e:	f7ff ff2b 	bl	13a88 <gpio_manage_callback>
}
   13c32:	bd08      	pop	{r3, pc}

00013c34 <nrfx_gpio_handler>:
{
   13c34:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   13c36:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   13c3a:	0940      	lsrs	r0, r0, #5
   13c3c:	f7fa fb5c 	bl	e2f8 <get_dev>
	if (port == NULL) {
   13c40:	b130      	cbz	r0, 13c50 <nrfx_gpio_handler+0x1c>
   13c42:	4601      	mov	r1, r0
	return port->data;
   13c44:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   13c46:	2201      	movs	r2, #1
   13c48:	40a2      	lsls	r2, r4
   13c4a:	3004      	adds	r0, #4
   13c4c:	f7ff ff3b 	bl	13ac6 <gpio_fire_callbacks>
}
   13c50:	bd10      	pop	{r4, pc}

00013c52 <i2c_nrfx_twi_configure>:
{
   13c52:	b410      	push	{r4}
	const struct i2c_nrfx_twi_config *config = dev->config;
   13c54:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   13c56:	6902      	ldr	r2, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   13c58:	f011 0f01 	tst.w	r1, #1
   13c5c:	d117      	bne.n	13c8e <i2c_nrfx_twi_configure+0x3c>
	switch (I2C_SPEED_GET(dev_config)) {
   13c5e:	f3c1 0342 	ubfx	r3, r1, #1, #3
   13c62:	2b01      	cmp	r3, #1
   13c64:	d004      	beq.n	13c70 <i2c_nrfx_twi_configure+0x1e>
   13c66:	2b02      	cmp	r3, #2
   13c68:	d00b      	beq.n	13c82 <i2c_nrfx_twi_configure+0x30>
   13c6a:	f06f 0015 	mvn.w	r0, #21
   13c6e:	e006      	b.n	13c7e <i2c_nrfx_twi_configure+0x2c>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   13c70:	6823      	ldr	r3, [r4, #0]
    p_reg->FREQUENCY = frequency;
   13c72:	f04f 70cc 	mov.w	r0, #26738688	; 0x1980000
   13c76:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   13c7a:	6351      	str	r1, [r2, #52]	; 0x34
	return 0;
   13c7c:	2000      	movs	r0, #0
}
   13c7e:	bc10      	pop	{r4}
   13c80:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   13c82:	6823      	ldr	r3, [r4, #0]
   13c84:	f04f 60cd 	mov.w	r0, #107479040	; 0x6680000
   13c88:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
}
   13c8c:	e7f5      	b.n	13c7a <i2c_nrfx_twi_configure+0x28>
		return -EINVAL;
   13c8e:	f06f 0015 	mvn.w	r0, #21
   13c92:	e7f4      	b.n	13c7e <i2c_nrfx_twi_configure+0x2c>

00013c94 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   13c94:	b510      	push	{r4, lr}
   13c96:	b082      	sub	sp, #8
   13c98:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   13c9a:	aa01      	add	r2, sp, #4
   13c9c:	f000 f81c 	bl	13cd8 <pinctrl_lookup_state>
	if (ret < 0) {
   13ca0:	2800      	cmp	r0, #0
   13ca2:	db05      	blt.n	13cb0 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   13ca4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13ca6:	6822      	ldr	r2, [r4, #0]
   13ca8:	7919      	ldrb	r1, [r3, #4]
   13caa:	6818      	ldr	r0, [r3, #0]
   13cac:	f7fa fd0c 	bl	e6c8 <pinctrl_configure_pins>
}
   13cb0:	b002      	add	sp, #8
   13cb2:	bd10      	pop	{r4, pc}

00013cb4 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   13cb4:	b510      	push	{r4, lr}
   13cb6:	4604      	mov	r4, r0
   13cb8:	2200      	movs	r2, #0
   13cba:	2101      	movs	r1, #1
   13cbc:	2003      	movs	r0, #3
   13cbe:	f7fe feb1 	bl	12a24 <z_arm_irq_priority_set>
   13cc2:	6863      	ldr	r3, [r4, #4]
   13cc4:	2100      	movs	r1, #0
   13cc6:	6998      	ldr	r0, [r3, #24]
   13cc8:	f7ff ffe4 	bl	13c94 <pinctrl_apply_state>
   13ccc:	2800      	cmp	r0, #0
   13cce:	db02      	blt.n	13cd6 <twi_0_init+0x22>
   13cd0:	4620      	mov	r0, r4
   13cd2:	f7fa fce3 	bl	e69c <init_twi>
   13cd6:	bd10      	pop	{r4, pc}

00013cd8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   13cd8:	b500      	push	{lr}
	*state = &config->states[0];
   13cda:	6843      	ldr	r3, [r0, #4]
   13cdc:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   13cde:	e001      	b.n	13ce4 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   13ce0:	3308      	adds	r3, #8
   13ce2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   13ce4:	6813      	ldr	r3, [r2, #0]
   13ce6:	f890 c008 	ldrb.w	ip, [r0, #8]
   13cea:	f8d0 e004 	ldr.w	lr, [r0, #4]
   13cee:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   13cf2:	4563      	cmp	r3, ip
   13cf4:	d205      	bcs.n	13d02 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   13cf6:	f893 c005 	ldrb.w	ip, [r3, #5]
   13cfa:	458c      	cmp	ip, r1
   13cfc:	d1f0      	bne.n	13ce0 <pinctrl_lookup_state+0x8>
			return 0;
   13cfe:	2000      	movs	r0, #0
   13d00:	e001      	b.n	13d06 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   13d02:	f06f 0001 	mvn.w	r0, #1
}
   13d06:	f85d fb04 	ldr.w	pc, [sp], #4

00013d0a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   13d0a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13d0c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   13d0e:	f04f 0140 	mov.w	r1, #64	; 0x40
   13d12:	f3ef 8311 	mrs	r3, BASEPRI
   13d16:	f381 8812 	msr	BASEPRI_MAX, r1
   13d1a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d1e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   13d22:	b131      	cbz	r1, 13d32 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d24:	2100      	movs	r1, #0
   13d26:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   13d2a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d2e:	2101      	movs	r1, #1
   13d30:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   13d32:	f383 8811 	msr	BASEPRI, r3
   13d36:	f3bf 8f6f 	isb	sy
}
   13d3a:	4770      	bx	lr

00013d3c <uarte_nrfx_isr_int>:
{
   13d3c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   13d3e:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   13d40:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   13d42:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   13d46:	f413 7f80 	tst.w	r3, #256	; 0x100
   13d4a:	d002      	beq.n	13d52 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13d50:	b9d3      	cbnz	r3, 13d88 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13d52:	686b      	ldr	r3, [r5, #4]
   13d54:	f013 0f10 	tst.w	r3, #16
   13d58:	d015      	beq.n	13d86 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   13d5a:	f04f 0240 	mov.w	r2, #64	; 0x40
   13d5e:	f3ef 8311 	mrs	r3, BASEPRI
   13d62:	f382 8812 	msr	BASEPRI_MAX, r2
   13d66:	f3bf 8f6f 	isb	sy
   13d6a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13d6e:	b112      	cbz	r2, 13d76 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13d70:	2200      	movs	r2, #0
   13d72:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   13d76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   13d7a:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   13d7e:	f383 8811 	msr	BASEPRI, r3
   13d82:	f3bf 8f6f 	isb	sy
}
   13d86:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   13d88:	f7ff ffbf 	bl	13d0a <endtx_isr>
   13d8c:	e7e1      	b.n	13d52 <uarte_nrfx_isr_int+0x16>

00013d8e <uarte_nrfx_configure>:
{
   13d8e:	b570      	push	{r4, r5, r6, lr}
   13d90:	b082      	sub	sp, #8
	struct uarte_nrfx_data *data = dev->data;
   13d92:	6905      	ldr	r5, [r0, #16]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   13d94:	794b      	ldrb	r3, [r1, #5]
   13d96:	2b01      	cmp	r3, #1
   13d98:	d137      	bne.n	13e0a <uarte_nrfx_configure+0x7c>
   13d9a:	4606      	mov	r6, r0
   13d9c:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13d9e:	798b      	ldrb	r3, [r1, #6]
   13da0:	2b03      	cmp	r3, #3
   13da2:	d135      	bne.n	13e10 <uarte_nrfx_configure+0x82>
	switch (cfg->flow_ctrl) {
   13da4:	79cb      	ldrb	r3, [r1, #7]
   13da6:	b133      	cbz	r3, 13db6 <uarte_nrfx_configure+0x28>
   13da8:	2b01      	cmp	r3, #1
   13daa:	d00e      	beq.n	13dca <uarte_nrfx_configure+0x3c>
   13dac:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   13db0:	4618      	mov	r0, r3
   13db2:	b002      	add	sp, #8
   13db4:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   13db6:	2300      	movs	r3, #0
   13db8:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   13dbc:	7923      	ldrb	r3, [r4, #4]
   13dbe:	b143      	cbz	r3, 13dd2 <uarte_nrfx_configure+0x44>
   13dc0:	2b02      	cmp	r3, #2
   13dc2:	d01e      	beq.n	13e02 <uarte_nrfx_configure+0x74>
   13dc4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13dc8:	e7f2      	b.n	13db0 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   13dca:	2301      	movs	r3, #1
   13dcc:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   13dd0:	e7f4      	b.n	13dbc <uarte_nrfx_configure+0x2e>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   13dd2:	2300      	movs	r3, #0
   13dd4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13dd8:	6821      	ldr	r1, [r4, #0]
   13dda:	4630      	mov	r0, r6
   13ddc:	f7fa fd7c 	bl	e8d8 <baudrate_set>
   13de0:	4603      	mov	r3, r0
   13de2:	b9c0      	cbnz	r0, 13e16 <uarte_nrfx_configure+0x88>
	const struct uarte_nrfx_config *config = dev->config;
   13de4:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   13de6:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13de8:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
   13dec:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13df0:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13df2:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   13df6:	3504      	adds	r5, #4
   13df8:	e894 0003 	ldmia.w	r4, {r0, r1}
   13dfc:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   13e00:	e7d6      	b.n	13db0 <uarte_nrfx_configure+0x22>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   13e02:	230e      	movs	r3, #14
   13e04:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   13e08:	e7e6      	b.n	13dd8 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
   13e0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13e0e:	e7cf      	b.n	13db0 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   13e10:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13e14:	e7cc      	b.n	13db0 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   13e16:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13e1a:	e7c9      	b.n	13db0 <uarte_nrfx_configure+0x22>

00013e1c <uarte_nrfx_config_get>:
{
   13e1c:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   13e1e:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   13e20:	3304      	adds	r3, #4
   13e22:	e893 0003 	ldmia.w	r3, {r0, r1}
   13e26:	e882 0003 	stmia.w	r2, {r0, r1}
}
   13e2a:	2000      	movs	r0, #0
   13e2c:	4770      	bx	lr

00013e2e <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   13e2e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13e30:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13e32:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   13e36:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   13e3a:	4770      	bx	lr

00013e3c <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   13e3c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13e3e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   13e40:	685b      	ldr	r3, [r3, #4]
   13e42:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13e46:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   13e4a:	b929      	cbnz	r1, 13e58 <is_tx_ready+0x1c>
   13e4c:	b933      	cbnz	r3, 13e5c <is_tx_ready+0x20>
   13e4e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   13e52:	b92b      	cbnz	r3, 13e60 <is_tx_ready+0x24>
   13e54:	2000      	movs	r0, #0
   13e56:	4770      	bx	lr
   13e58:	2001      	movs	r0, #1
   13e5a:	4770      	bx	lr
   13e5c:	2000      	movs	r0, #0
   13e5e:	4770      	bx	lr
   13e60:	2001      	movs	r0, #1
}
   13e62:	4770      	bx	lr

00013e64 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   13e64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13e66:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13e68:	2208      	movs	r2, #8
   13e6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   13e6e:	4770      	bx	lr

00013e70 <tx_start>:
{
   13e70:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   13e72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13e74:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13e76:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13e7a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e7e:	2200      	movs	r2, #0
   13e80:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   13e84:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   13e88:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   13e8c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13e90:	685b      	ldr	r3, [r3, #4]
   13e92:	f013 0f10 	tst.w	r3, #16
   13e96:	d102      	bne.n	13e9e <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e98:	2301      	movs	r3, #1
   13e9a:	60a3      	str	r3, [r4, #8]
}
   13e9c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   13e9e:	2101      	movs	r1, #1
   13ea0:	f7ff ffe0 	bl	13e64 <uarte_enable>
    p_reg->INTENSET = mask;
   13ea4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   13ea8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   13eac:	e7f4      	b.n	13e98 <tx_start+0x28>

00013eae <uarte_nrfx_poll_in>:
{
   13eae:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   13eb0:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   13eb2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13eb4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13eb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   13eba:	b15a      	cbz	r2, 13ed4 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   13ebc:	6962      	ldr	r2, [r4, #20]
   13ebe:	7812      	ldrb	r2, [r2, #0]
   13ec0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13ec2:	2000      	movs	r0, #0
   13ec4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   13ec8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13ecc:	2201      	movs	r2, #1
   13ece:	601a      	str	r2, [r3, #0]
}
   13ed0:	bc10      	pop	{r4}
   13ed2:	4770      	bx	lr
		return -1;
   13ed4:	f04f 30ff 	mov.w	r0, #4294967295
   13ed8:	e7fa      	b.n	13ed0 <uarte_nrfx_poll_in+0x22>

00013eda <k_msleep>:
{
   13eda:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   13edc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13ee0:	17c1      	asrs	r1, r0, #31
   13ee2:	03c9      	lsls	r1, r1, #15
   13ee4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   13ee8:	03c0      	lsls	r0, r0, #15
   13eea:	f240 33e7 	movw	r3, #999	; 0x3e7
   13eee:	18c0      	adds	r0, r0, r3
   13ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13ef4:	f04f 0300 	mov.w	r3, #0
   13ef8:	f141 0100 	adc.w	r1, r1, #0
   13efc:	f7ec fce4 	bl	8c8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   13f00:	f7fd fa74 	bl	113ec <z_impl_k_sleep>
}
   13f04:	bd08      	pop	{r3, pc}

00013f06 <wait_tx_ready>:
{
   13f06:	b570      	push	{r4, r5, r6, lr}
   13f08:	4606      	mov	r6, r0
   13f0a:	e013      	b.n	13f34 <wait_tx_ready+0x2e>
		if (res) {
   13f0c:	b17d      	cbz	r5, 13f2e <wait_tx_ready+0x28>
	__asm__ volatile(
   13f0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f12:	f3ef 8411 	mrs	r4, BASEPRI
   13f16:	f383 8812 	msr	BASEPRI_MAX, r3
   13f1a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   13f1e:	4630      	mov	r0, r6
   13f20:	f7ff ff8c 	bl	13e3c <is_tx_ready>
   13f24:	b998      	cbnz	r0, 13f4e <wait_tx_ready+0x48>
	__asm__ volatile(
   13f26:	f384 8811 	msr	BASEPRI, r4
   13f2a:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   13f2e:	2001      	movs	r0, #1
   13f30:	f7ff ffd3 	bl	13eda <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   13f34:	2464      	movs	r4, #100	; 0x64
   13f36:	4630      	mov	r0, r6
   13f38:	f7ff ff80 	bl	13e3c <is_tx_ready>
   13f3c:	4605      	mov	r5, r0
   13f3e:	2800      	cmp	r0, #0
   13f40:	d1e4      	bne.n	13f0c <wait_tx_ready+0x6>
   13f42:	2001      	movs	r0, #1
   13f44:	f000 fda2 	bl	14a8c <nrfx_busy_wait>
   13f48:	3c01      	subs	r4, #1
   13f4a:	d1f4      	bne.n	13f36 <wait_tx_ready+0x30>
   13f4c:	e7de      	b.n	13f0c <wait_tx_ready+0x6>
}
   13f4e:	4620      	mov	r0, r4
   13f50:	bd70      	pop	{r4, r5, r6, pc}

00013f52 <pinctrl_apply_state>:
{
   13f52:	b510      	push	{r4, lr}
   13f54:	b082      	sub	sp, #8
   13f56:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   13f58:	aa01      	add	r2, sp, #4
   13f5a:	f7ff febd 	bl	13cd8 <pinctrl_lookup_state>
	if (ret < 0) {
   13f5e:	2800      	cmp	r0, #0
   13f60:	db05      	blt.n	13f6e <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   13f62:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13f64:	6822      	ldr	r2, [r4, #0]
   13f66:	7919      	ldrb	r1, [r3, #4]
   13f68:	6818      	ldr	r0, [r3, #0]
   13f6a:	f7fa fbad 	bl	e6c8 <pinctrl_configure_pins>
}
   13f6e:	b002      	add	sp, #8
   13f70:	bd10      	pop	{r4, pc}

00013f72 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   13f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f76:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   13f78:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   13f7a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   13f7c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13f80:	2100      	movs	r1, #0
   13f82:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   13f86:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   13f8a:	68f8      	ldr	r0, [r7, #12]
   13f8c:	f7ff ffe1 	bl	13f52 <pinctrl_apply_state>
	if (err < 0) {
   13f90:	1e05      	subs	r5, r0, #0
   13f92:	db35      	blt.n	14000 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   13f94:	f108 0104 	add.w	r1, r8, #4
   13f98:	4620      	mov	r0, r4
   13f9a:	f7ff fef8 	bl	13d8e <uarte_nrfx_configure>
	if (err) {
   13f9e:	4605      	mov	r5, r0
   13fa0:	bb70      	cbnz	r0, 14000 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   13fa2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   13fa4:	f013 0f02 	tst.w	r3, #2
   13fa8:	d12d      	bne.n	14006 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13faa:	2308      	movs	r3, #8
   13fac:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   13fb0:	7a3b      	ldrb	r3, [r7, #8]
   13fb2:	b95b      	cbnz	r3, 13fcc <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13fb4:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   13fb8:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   13fbc:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13fc0:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13fc4:	2301      	movs	r3, #1
   13fc6:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13fca:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   13fcc:	687b      	ldr	r3, [r7, #4]
   13fce:	f013 0f02 	tst.w	r3, #2
   13fd2:	d103      	bne.n	13fdc <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   13fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
   13fd8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13fdc:	687b      	ldr	r3, [r7, #4]
   13fde:	f013 0f10 	tst.w	r3, #16
   13fe2:	d003      	beq.n	13fec <uarte_instance_init+0x7a>
   13fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   13fe8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   13fec:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13ff0:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13ff4:	2300      	movs	r3, #0
   13ff6:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13ffa:	2301      	movs	r3, #1
   13ffc:	60b3      	str	r3, [r6, #8]
   13ffe:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   14000:	4628      	mov	r0, r5
   14002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   14006:	4641      	mov	r1, r8
   14008:	4630      	mov	r0, r6
   1400a:	f7fa fd3b 	bl	ea84 <endtx_stoptx_ppi_init>
		if (err < 0) {
   1400e:	2800      	cmp	r0, #0
   14010:	dacb      	bge.n	13faa <uarte_instance_init+0x38>
			return err;
   14012:	4605      	mov	r5, r0
   14014:	e7f4      	b.n	14000 <uarte_instance_init+0x8e>

00014016 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   14016:	b510      	push	{r4, lr}
   14018:	4604      	mov	r4, r0
   1401a:	2200      	movs	r2, #0
   1401c:	2101      	movs	r1, #1
   1401e:	2002      	movs	r0, #2
   14020:	f7fe fd00 	bl	12a24 <z_arm_irq_priority_set>
   14024:	2002      	movs	r0, #2
   14026:	f7fe fcf3 	bl	12a10 <arch_irq_enable>
   1402a:	2100      	movs	r1, #0
   1402c:	4620      	mov	r0, r4
   1402e:	f7ff ffa0 	bl	13f72 <uarte_instance_init>
   14032:	bd10      	pop	{r4, pc}

00014034 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   14034:	4770      	bx	lr

00014036 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   14036:	1a40      	subs	r0, r0, r1
}
   14038:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1403c:	4770      	bx	lr

0001403e <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1403e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   14042:	009b      	lsls	r3, r3, #2
   14044:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1404a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1404e:	6818      	ldr	r0, [r3, #0]
}
   14050:	3800      	subs	r0, #0
   14052:	bf18      	it	ne
   14054:	2001      	movne	r0, #1
   14056:	4770      	bx	lr

00014058 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14058:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1405c:	009b      	lsls	r3, r3, #2
   1405e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14064:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   14068:	2200      	movs	r2, #0
   1406a:	601a      	str	r2, [r3, #0]
   1406c:	681b      	ldr	r3, [r3, #0]
}
   1406e:	4770      	bx	lr

00014070 <absolute_time_to_cc>:
}
   14070:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14074:	4770      	bx	lr

00014076 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14076:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1407a:	b672      	cpsid	i
}
   1407c:	4770      	bx	lr

0001407e <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1407e:	f380 8810 	msr	PRIMASK, r0
}
   14082:	4770      	bx	lr

00014084 <compare_set>:
{
   14084:	b5f0      	push	{r4, r5, r6, r7, lr}
   14086:	b083      	sub	sp, #12
   14088:	4604      	mov	r4, r0
   1408a:	4617      	mov	r7, r2
   1408c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1408e:	f7fa fd83 	bl	eb98 <compare_int_lock>
   14092:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   14094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14096:	9301      	str	r3, [sp, #4]
   14098:	9b08      	ldr	r3, [sp, #32]
   1409a:	9300      	str	r3, [sp, #0]
   1409c:	463a      	mov	r2, r7
   1409e:	462b      	mov	r3, r5
   140a0:	4620      	mov	r0, r4
   140a2:	f7fa fe47 	bl	ed34 <compare_set_nolocks>
   140a6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   140a8:	4631      	mov	r1, r6
   140aa:	4620      	mov	r0, r4
   140ac:	f7fa fdca 	bl	ec44 <compare_int_unlock>
}
   140b0:	4628      	mov	r0, r5
   140b2:	b003      	add	sp, #12
   140b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000140b6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   140b6:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   140b8:	2000      	movs	r0, #0
   140ba:	f7fe fdf6 	bl	12caa <sys_arch_reboot>

000140be <sdc_assertion_handler>:
	k_oops();
   140be:	4040      	eors	r0, r0
   140c0:	f380 8811 	msr	BASEPRI, r0
   140c4:	f04f 0003 	mov.w	r0, #3
   140c8:	df02      	svc	2
}
   140ca:	4770      	bx	lr

000140cc <event_packet_is_discardable>:
	switch (hdr->evt) {
   140cc:	7803      	ldrb	r3, [r0, #0]
   140ce:	2b3e      	cmp	r3, #62	; 0x3e
   140d0:	d003      	beq.n	140da <event_packet_is_discardable+0xe>
   140d2:	2bff      	cmp	r3, #255	; 0xff
   140d4:	d008      	beq.n	140e8 <event_packet_is_discardable+0x1c>
   140d6:	2000      	movs	r0, #0
   140d8:	4770      	bx	lr
		switch (me->subevent) {
   140da:	7883      	ldrb	r3, [r0, #2]
   140dc:	2b02      	cmp	r3, #2
   140de:	d001      	beq.n	140e4 <event_packet_is_discardable+0x18>
			return false;
   140e0:	2000      	movs	r0, #0
   140e2:	4770      	bx	lr
			return true;
   140e4:	2001      	movs	r0, #1
   140e6:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   140e8:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   140ea:	2b80      	cmp	r3, #128	; 0x80
   140ec:	d001      	beq.n	140f2 <event_packet_is_discardable+0x26>
			return false;
   140ee:	2000      	movs	r0, #0
}
   140f0:	4770      	bx	lr
			return true;
   140f2:	2001      	movs	r0, #1
   140f4:	4770      	bx	lr

000140f6 <event_packet_process>:
{
   140f6:	b538      	push	{r3, r4, r5, lr}
   140f8:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   140fa:	f7ff ffe7 	bl	140cc <event_packet_is_discardable>
   140fe:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   14100:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   14102:	4619      	mov	r1, r3
   14104:	b17b      	cbz	r3, 14126 <event_packet_process+0x30>
   14106:	2200      	movs	r2, #0
   14108:	2300      	movs	r3, #0
   1410a:	f7f8 faff 	bl	c70c <bt_buf_get_evt>
	if (!evt_buf) {
   1410e:	4605      	mov	r5, r0
   14110:	b140      	cbz	r0, 14124 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   14112:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14114:	3202      	adds	r2, #2
   14116:	4621      	mov	r1, r4
   14118:	300c      	adds	r0, #12
   1411a:	f7ff fa45 	bl	135a8 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1411e:	4628      	mov	r0, r5
   14120:	f7fe fe96 	bl	12e50 <bt_recv>
}
   14124:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   14126:	f04f 32ff 	mov.w	r2, #4294967295
   1412a:	f04f 33ff 	mov.w	r3, #4294967295
   1412e:	e7ec      	b.n	1410a <event_packet_process+0x14>

00014130 <data_packet_process>:
{
   14130:	b538      	push	{r3, r4, r5, lr}
   14132:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   14134:	f04f 32ff 	mov.w	r2, #4294967295
   14138:	f04f 33ff 	mov.w	r3, #4294967295
   1413c:	2003      	movs	r0, #3
   1413e:	f7f8 fab3 	bl	c6a8 <bt_buf_get_rx>
	if (!data_buf) {
   14142:	b148      	cbz	r0, 14158 <data_packet_process+0x28>
   14144:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   14146:	8862      	ldrh	r2, [r4, #2]
   14148:	3204      	adds	r2, #4
   1414a:	4621      	mov	r1, r4
   1414c:	300c      	adds	r0, #12
   1414e:	f7ff fa2b 	bl	135a8 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   14152:	4628      	mov	r0, r5
   14154:	f7fe fe7c 	bl	12e50 <bt_recv>
}
   14158:	bd38      	pop	{r3, r4, r5, pc}

0001415a <fetch_and_process_hci_msg>:
{
   1415a:	b530      	push	{r4, r5, lr}
   1415c:	b083      	sub	sp, #12
   1415e:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   14160:	f04f 30ff 	mov.w	r0, #4294967295
   14164:	f04f 31ff 	mov.w	r1, #4294967295
   14168:	f7fa ff1e 	bl	efa8 <multithreading_lock_acquire>
	if (!errcode) {
   1416c:	b110      	cbz	r0, 14174 <fetch_and_process_hci_msg+0x1a>
		return false;
   1416e:	2000      	movs	r0, #0
}
   14170:	b003      	add	sp, #12
   14172:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   14174:	f10d 0107 	add.w	r1, sp, #7
   14178:	4620      	mov	r0, r4
   1417a:	f7fb f8dd 	bl	f338 <hci_internal_msg_get>
   1417e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   14180:	f7fa ff1c 	bl	efbc <multithreading_lock_release>
	if (errcode) {
   14184:	2d00      	cmp	r5, #0
   14186:	d1f2      	bne.n	1416e <fetch_and_process_hci_msg+0x14>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   14188:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1418c:	2b04      	cmp	r3, #4
   1418e:	d003      	beq.n	14198 <fetch_and_process_hci_msg+0x3e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   14190:	2b02      	cmp	r3, #2
   14192:	d006      	beq.n	141a2 <fetch_and_process_hci_msg+0x48>
	return true;
   14194:	2001      	movs	r0, #1
   14196:	e7eb      	b.n	14170 <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   14198:	4620      	mov	r0, r4
   1419a:	f7ff ffac 	bl	140f6 <event_packet_process>
	return true;
   1419e:	2001      	movs	r0, #1
   141a0:	e7e6      	b.n	14170 <fetch_and_process_hci_msg+0x16>
		data_packet_process(p_hci_buffer);
   141a2:	4620      	mov	r0, r4
   141a4:	f7ff ffc4 	bl	14130 <data_packet_process>
	return true;
   141a8:	2001      	movs	r0, #1
   141aa:	e7e1      	b.n	14170 <fetch_and_process_hci_msg+0x16>

000141ac <hci_driver_send>:
{
   141ac:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   141ae:	8a03      	ldrh	r3, [r0, #16]
   141b0:	b163      	cbz	r3, 141cc <hci_driver_send+0x20>
   141b2:	4604      	mov	r4, r0
   141b4:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   141b6:	b963      	cbnz	r3, 141d2 <hci_driver_send+0x26>
		err = cmd_handle(buf);
   141b8:	f7fa ff1e 	bl	eff8 <cmd_handle>
	if (!err) {
   141bc:	4605      	mov	r5, r0
   141be:	b108      	cbz	r0, 141c4 <hci_driver_send+0x18>
}
   141c0:	4628      	mov	r0, r5
   141c2:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   141c4:	4620      	mov	r0, r4
   141c6:	f7ff f9be 	bl	13546 <net_buf_unref>
   141ca:	e7f9      	b.n	141c0 <hci_driver_send+0x14>
		return -EINVAL;
   141cc:	f06f 0515 	mvn.w	r5, #21
   141d0:	e7f6      	b.n	141c0 <hci_driver_send+0x14>
		return -EINVAL;
   141d2:	f06f 0515 	mvn.w	r5, #21
   141d6:	e7f3      	b.n	141c0 <hci_driver_send+0x14>

000141d8 <hci_driver_close>:
{
   141d8:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   141da:	f04f 30ff 	mov.w	r0, #4294967295
   141de:	f04f 31ff 	mov.w	r1, #4294967295
   141e2:	f7fa fee1 	bl	efa8 <multithreading_lock_acquire>
	if (err) {
   141e6:	4604      	mov	r4, r0
   141e8:	b108      	cbz	r0, 141ee <hci_driver_close+0x16>
}
   141ea:	4620      	mov	r0, r4
   141ec:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   141ee:	f7ec fc0f 	bl	a10 <sdc_disable>
	if (err) {
   141f2:	4604      	mov	r4, r0
   141f4:	b910      	cbnz	r0, 141fc <hci_driver_close+0x24>
	MULTITHREADING_LOCK_RELEASE();
   141f6:	f7fa fee1 	bl	efbc <multithreading_lock_release>
	return err;
   141fa:	e7f6      	b.n	141ea <hci_driver_close+0x12>
		MULTITHREADING_LOCK_RELEASE();
   141fc:	f7fa fede 	bl	efbc <multithreading_lock_release>
		return err;
   14200:	e7f3      	b.n	141ea <hci_driver_close+0x12>

00014202 <configure_supported_features>:
{
   14202:	b508      	push	{r3, lr}
		err = sdc_support_adv();
   14204:	f7ec fcba 	bl	b7c <sdc_support_adv>
		if (err) {
   14208:	b900      	cbnz	r0, 1420c <configure_supported_features+0xa>
}
   1420a:	bd08      	pop	{r3, pc}
			return -ENOTSUP;
   1420c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14210:	e7fb      	b.n	1420a <configure_supported_features+0x8>

00014212 <configure_memory_usage>:
{
   14212:	b500      	push	{lr}
   14214:	b083      	sub	sp, #12
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   14216:	2000      	movs	r0, #0
   14218:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1421c:	aa01      	add	r2, sp, #4
   1421e:	2102      	movs	r1, #2
   14220:	f7ec fba8 	bl	974 <sdc_cfg_set>
	if (required_memory < 0) {
   14224:	2800      	cmp	r0, #0
   14226:	db3c      	blt.n	142a2 <configure_memory_usage+0x90>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   14228:	2108      	movs	r1, #8
   1422a:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1422e:	aa01      	add	r2, sp, #4
   14230:	2000      	movs	r0, #0
   14232:	f7ec fb9f 	bl	974 <sdc_cfg_set>
	if (required_memory < 0) {
   14236:	2800      	cmp	r0, #0
   14238:	db33      	blt.n	142a2 <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1423a:	231b      	movs	r3, #27
   1423c:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   14240:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   14244:	2302      	movs	r3, #2
   14246:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   1424a:	2103      	movs	r1, #3
   1424c:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14250:	aa01      	add	r2, sp, #4
   14252:	2000      	movs	r0, #0
   14254:	f7ec fb8e 	bl	974 <sdc_cfg_set>
	if (required_memory < 0) {
   14258:	2800      	cmp	r0, #0
   1425a:	db22      	blt.n	142a2 <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   1425c:	f641 534c 	movw	r3, #7500	; 0x1d4c
   14260:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14262:	aa01      	add	r2, sp, #4
   14264:	2104      	movs	r1, #4
   14266:	2000      	movs	r0, #0
   14268:	f7ec fb84 	bl	974 <sdc_cfg_set>
	if (required_memory < 0) {
   1426c:	2800      	cmp	r0, #0
   1426e:	db18      	blt.n	142a2 <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   14270:	2301      	movs	r3, #1
   14272:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14276:	aa01      	add	r2, sp, #4
   14278:	2105      	movs	r1, #5
   1427a:	2000      	movs	r0, #0
   1427c:	f7ec fb7a 	bl	974 <sdc_cfg_set>
	if (required_memory < 0) {
   14280:	2800      	cmp	r0, #0
   14282:	db0e      	blt.n	142a2 <configure_memory_usage+0x90>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   14284:	231f      	movs	r3, #31
   14286:	f8ad 3004 	strh.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1428a:	aa01      	add	r2, sp, #4
   1428c:	2107      	movs	r1, #7
   1428e:	2000      	movs	r0, #0
   14290:	f7ec fb70 	bl	974 <sdc_cfg_set>
	if (required_memory < 0) {
   14294:	2800      	cmp	r0, #0
   14296:	db04      	blt.n	142a2 <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   14298:	f240 235e 	movw	r3, #606	; 0x25e
   1429c:	4298      	cmp	r0, r3
   1429e:	d803      	bhi.n	142a8 <configure_memory_usage+0x96>
	return 0;
   142a0:	2000      	movs	r0, #0
}
   142a2:	b003      	add	sp, #12
   142a4:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   142a8:	4040      	eors	r0, r0
   142aa:	f380 8811 	msr	BASEPRI, r0
   142ae:	f04f 0004 	mov.w	r0, #4
   142b2:	df02      	svc	2
		return -ENOMEM;
   142b4:	f06f 000b 	mvn.w	r0, #11
   142b8:	e7f3      	b.n	142a2 <configure_memory_usage+0x90>

000142ba <receive_work_handler>:
{
   142ba:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   142bc:	f7fa ff34 	bl	f128 <hci_driver_receive_process>
}
   142c0:	bd08      	pop	{r3, pc}

000142c2 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   142c2:	230f      	movs	r3, #15
   142c4:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   142c6:	2304      	movs	r3, #4
   142c8:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   142ca:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   142cc:	2301      	movs	r3, #1
   142ce:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   142d0:	8081      	strh	r1, [r0, #4]
}
   142d2:	4770      	bx	lr

000142d4 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   142d4:	f04f 0c0e 	mov.w	ip, #14
   142d8:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   142dc:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   142de:	2201      	movs	r2, #1
   142e0:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   142e2:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   142e6:	7143      	strb	r3, [r0, #5]
}
   142e8:	4770      	bx	lr

000142ea <le_read_supported_states>:
	*buf = states1;
   142ea:	2303      	movs	r3, #3
   142ec:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   142ee:	2300      	movs	r3, #0
   142f0:	7103      	strb	r3, [r0, #4]
}
   142f2:	4770      	bx	lr

000142f4 <status_param_cmd_put>:
}
   142f4:	2001      	movs	r0, #1
   142f6:	4770      	bx	lr

000142f8 <controller_and_baseband_cmd_put>:
{
   142f8:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   142fa:	7842      	ldrb	r2, [r0, #1]
   142fc:	7803      	ldrb	r3, [r0, #0]
   142fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14302:	b21b      	sxth	r3, r3
	switch (opcode)	{
   14304:	f640 4201 	movw	r2, #3073	; 0xc01
   14308:	4293      	cmp	r3, r2
   1430a:	d005      	beq.n	14318 <controller_and_baseband_cmd_put+0x20>
   1430c:	f640 4203 	movw	r2, #3075	; 0xc03
   14310:	4293      	cmp	r3, r2
   14312:	d005      	beq.n	14320 <controller_and_baseband_cmd_put+0x28>
   14314:	2001      	movs	r0, #1
}
   14316:	bd08      	pop	{r3, pc}
   14318:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1431a:	f7f4 fabd 	bl	8898 <sdc_hci_cmd_cb_set_event_mask>
   1431e:	e7fa      	b.n	14316 <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   14320:	f7ec fd7c 	bl	e1c <sdc_hci_cmd_cb_reset>
   14324:	e7f7      	b.n	14316 <controller_and_baseband_cmd_put+0x1e>

00014326 <supported_commands>:
{
   14326:	b510      	push	{r4, lr}
   14328:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1432a:	2230      	movs	r2, #48	; 0x30
   1432c:	2100      	movs	r1, #0
   1432e:	f7fe fc9b 	bl	12c68 <memset>
	cmds->hci_set_event_mask = 1;
   14332:	7963      	ldrb	r3, [r4, #5]
   14334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14338:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   1433a:	b2db      	uxtb	r3, r3
   1433c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14340:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   14342:	7ba3      	ldrb	r3, [r4, #14]
   14344:	f043 0308 	orr.w	r3, r3, #8
   14348:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   1434a:	b2db      	uxtb	r3, r3
   1434c:	f043 0320 	orr.w	r3, r3, #32
   14350:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   14352:	7be3      	ldrb	r3, [r4, #15]
   14354:	f043 0302 	orr.w	r3, r3, #2
   14358:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   1435a:	7e63      	ldrb	r3, [r4, #25]
   1435c:	f043 0301 	orr.w	r3, r3, #1
   14360:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   14362:	b2db      	uxtb	r3, r3
   14364:	f043 0302 	orr.w	r3, r3, #2
   14368:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   1436a:	b2db      	uxtb	r3, r3
   1436c:	f043 0304 	orr.w	r3, r3, #4
   14370:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   14372:	b2db      	uxtb	r3, r3
   14374:	f043 0310 	orr.w	r3, r3, #16
   14378:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   1437a:	b2db      	uxtb	r3, r3
   1437c:	f043 0320 	orr.w	r3, r3, #32
   14380:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   14382:	b2db      	uxtb	r3, r3
   14384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14388:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   1438a:	b2db      	uxtb	r3, r3
   1438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14390:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   14392:	7ea3      	ldrb	r3, [r4, #26]
   14394:	f043 0301 	orr.w	r3, r3, #1
   14398:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   1439a:	b2db      	uxtb	r3, r3
   1439c:	f043 0302 	orr.w	r3, r3, #2
   143a0:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_data_related_address_changes = 1;
   143a2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   143a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   143aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_read_filter_accept_list_size = 1;
   143ae:	7ea3      	ldrb	r3, [r4, #26]
   143b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   143b4:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   143b6:	b2db      	uxtb	r3, r3
   143b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   143bc:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   143be:	7ee3      	ldrb	r3, [r4, #27]
   143c0:	f043 0301 	orr.w	r3, r3, #1
   143c4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   143c6:	b2db      	uxtb	r3, r3
   143c8:	f043 0302 	orr.w	r3, r3, #2
   143cc:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   143ce:	b2db      	uxtb	r3, r3
   143d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   143d4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   143d6:	b2db      	uxtb	r3, r3
   143d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   143dc:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   143de:	7f23      	ldrb	r3, [r4, #28]
   143e0:	f043 0308 	orr.w	r3, r3, #8
   143e4:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   143e6:	b2db      	uxtb	r3, r3
   143e8:	f043 0310 	orr.w	r3, r3, #16
   143ec:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   143ee:	b2db      	uxtb	r3, r3
   143f0:	f043 0320 	orr.w	r3, r3, #32
   143f4:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   143f6:	b2db      	uxtb	r3, r3
   143f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   143fc:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v2 = 1;
   143fe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   14402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14406:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   1440a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1440e:	f043 0301 	orr.w	r3, r3, #1
   14412:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   14416:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1441a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1441e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   14422:	bd10      	pop	{r4, pc}

00014424 <supported_features>:
{
   14424:	b510      	push	{r4, lr}
   14426:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   14428:	2208      	movs	r2, #8
   1442a:	2100      	movs	r1, #0
   1442c:	f7fe fc1c 	bl	12c68 <memset>
	features->bdedr_not_supported = 1;
   14430:	7923      	ldrb	r3, [r4, #4]
   14432:	f043 0320 	orr.w	r3, r3, #32
   14436:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   14438:	b2db      	uxtb	r3, r3
   1443a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1443e:	7123      	strb	r3, [r4, #4]
}
   14440:	bd10      	pop	{r4, pc}

00014442 <info_param_cmd_put>:
{
   14442:	b508      	push	{r3, lr}
   14444:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   14446:	1d88      	adds	r0, r1, #6
   14448:	f893 c001 	ldrb.w	ip, [r3, #1]
   1444c:	781b      	ldrb	r3, [r3, #0]
   1444e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   14452:	b21b      	sxth	r3, r3
	switch (opcode)	{
   14454:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   14458:	3b01      	subs	r3, #1
   1445a:	2b08      	cmp	r3, #8
   1445c:	d820      	bhi.n	144a0 <info_param_cmd_put+0x5e>
   1445e:	e8df f003 	tbb	[pc, r3]
   14462:	0b05      	.short	0x0b05
   14464:	1f1f1f12 	.word	0x1f1f1f12
   14468:	1f1f      	.short	0x1f1f
   1446a:	19          	.byte	0x19
   1446b:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1446c:	7813      	ldrb	r3, [r2, #0]
   1446e:	3308      	adds	r3, #8
   14470:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   14472:	f7f4 fa43 	bl	88fc <sdc_hci_cmd_ip_read_local_version_information>
   14476:	e014      	b.n	144a2 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   14478:	7813      	ldrb	r3, [r2, #0]
   1447a:	3340      	adds	r3, #64	; 0x40
   1447c:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   1447e:	f7ff ff52 	bl	14326 <supported_commands>
		return 0;
   14482:	2000      	movs	r0, #0
   14484:	e00d      	b.n	144a2 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   14486:	7813      	ldrb	r3, [r2, #0]
   14488:	3308      	adds	r3, #8
   1448a:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   1448c:	f7ff ffca 	bl	14424 <supported_features>
		return 0;
   14490:	2000      	movs	r0, #0
   14492:	e006      	b.n	144a2 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   14494:	7813      	ldrb	r3, [r2, #0]
   14496:	3306      	adds	r3, #6
   14498:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1449a:	f7f4 fa2d 	bl	88f8 <sdc_hci_cmd_ip_read_bd_addr>
   1449e:	e000      	b.n	144a2 <info_param_cmd_put+0x60>
	switch (opcode)	{
   144a0:	2001      	movs	r0, #1
}
   144a2:	bd08      	pop	{r3, pc}

000144a4 <le_supported_features>:
{
   144a4:	b510      	push	{r4, lr}
   144a6:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   144a8:	2208      	movs	r2, #8
   144aa:	2100      	movs	r1, #0
   144ac:	f7fe fbdc 	bl	12c68 <memset>
	features->params.le_encryption = 1;
   144b0:	7823      	ldrb	r3, [r4, #0]
   144b2:	f043 0301 	orr.w	r3, r3, #1
   144b6:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   144b8:	b2db      	uxtb	r3, r3
   144ba:	f043 0304 	orr.w	r3, r3, #4
   144be:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   144c0:	b2db      	uxtb	r3, r3
   144c2:	f043 0308 	orr.w	r3, r3, #8
   144c6:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   144c8:	b2db      	uxtb	r3, r3
   144ca:	f043 0310 	orr.w	r3, r3, #16
   144ce:	7023      	strb	r3, [r4, #0]
	features->params.channel_selection_algorithm_2 = 1;
   144d0:	7863      	ldrb	r3, [r4, #1]
   144d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   144d6:	7063      	strb	r3, [r4, #1]
}
   144d8:	bd10      	pop	{r4, pc}

000144da <vs_zephyr_supported_commands>:
{
   144da:	b510      	push	{r4, lr}
   144dc:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   144de:	2202      	movs	r2, #2
   144e0:	2100      	movs	r1, #0
   144e2:	f7fe fbc1 	bl	12c68 <memset>
	cmds->read_version_info = 1;
   144e6:	7823      	ldrb	r3, [r4, #0]
   144e8:	f043 0301 	orr.w	r3, r3, #1
   144ec:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   144ee:	b2db      	uxtb	r3, r3
   144f0:	f043 0302 	orr.w	r3, r3, #2
   144f4:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   144f6:	b2db      	uxtb	r3, r3
   144f8:	f043 0320 	orr.w	r3, r3, #32
   144fc:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   144fe:	7863      	ldrb	r3, [r4, #1]
   14500:	f043 0301 	orr.w	r3, r3, #1
   14504:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   14506:	b2db      	uxtb	r3, r3
   14508:	f043 0302 	orr.w	r3, r3, #2
   1450c:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   1450e:	b2db      	uxtb	r3, r3
   14510:	f043 0304 	orr.w	r3, r3, #4
   14514:	7063      	strb	r3, [r4, #1]
}
   14516:	bd10      	pop	{r4, pc}

00014518 <vs_supported_commands>:
{
   14518:	b510      	push	{r4, lr}
   1451a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1451c:	2202      	movs	r2, #2
   1451e:	2100      	movs	r1, #0
   14520:	f7fe fba2 	bl	12c68 <memset>
	cmds->read_supported_vs_commands = 1;
   14524:	7823      	ldrb	r3, [r4, #0]
   14526:	f043 0301 	orr.w	r3, r3, #1
   1452a:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   1452c:	b2db      	uxtb	r3, r3
   1452e:	f043 0302 	orr.w	r3, r3, #2
   14532:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   14534:	b2db      	uxtb	r3, r3
   14536:	f043 0304 	orr.w	r3, r3, #4
   1453a:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   1453c:	b2db      	uxtb	r3, r3
   1453e:	f043 0308 	orr.w	r3, r3, #8
   14542:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   14544:	b2db      	uxtb	r3, r3
   14546:	f043 0310 	orr.w	r3, r3, #16
   1454a:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   1454c:	b2db      	uxtb	r3, r3
   1454e:	f043 0320 	orr.w	r3, r3, #32
   14552:	7023      	strb	r3, [r4, #0]
}
   14554:	bd10      	pop	{r4, pc}

00014556 <le_controller_cmd_put>:
{
   14556:	b508      	push	{r3, lr}
   14558:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1455a:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1455c:	3106      	adds	r1, #6
   1455e:	f893 c001 	ldrb.w	ip, [r3, #1]
   14562:	781b      	ldrb	r3, [r3, #0]
   14564:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   14568:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1456a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1456e:	3b01      	subs	r3, #1
   14570:	2b7b      	cmp	r3, #123	; 0x7b
   14572:	f200 8097 	bhi.w	146a4 <le_controller_cmd_put+0x14e>
   14576:	e8df f003 	tbb	[pc, r3]
   1457a:	413e      	.short	0x413e
   1457c:	53509548 	.word	0x53509548
   14580:	63605d56 	.word	0x63605d56
   14584:	95959595 	.word	0x95959595
   14588:	76737069 	.word	0x76737069
   1458c:	95959595 	.word	0x95959595
   14590:	95957f79 	.word	0x95957f79
   14594:	95958695 	.word	0x95958695
   14598:	95959595 	.word	0x95959595
   1459c:	95959595 	.word	0x95959595
   145a0:	95959595 	.word	0x95959595
   145a4:	95959595 	.word	0x95959595
   145a8:	95959595 	.word	0x95959595
   145ac:	95959595 	.word	0x95959595
   145b0:	95959595 	.word	0x95959595
   145b4:	95959595 	.word	0x95959595
   145b8:	95959595 	.word	0x95959595
   145bc:	95959595 	.word	0x95959595
   145c0:	95959595 	.word	0x95959595
   145c4:	9595958e 	.word	0x9595958e
   145c8:	95959595 	.word	0x95959595
   145cc:	95959595 	.word	0x95959595
   145d0:	95959595 	.word	0x95959595
   145d4:	95959595 	.word	0x95959595
   145d8:	95959595 	.word	0x95959595
   145dc:	95959595 	.word	0x95959595
   145e0:	95959595 	.word	0x95959595
   145e4:	95959595 	.word	0x95959595
   145e8:	95959595 	.word	0x95959595
   145ec:	95959595 	.word	0x95959595
   145f0:	95959595 	.word	0x95959595
   145f4:	6695      	.short	0x6695
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   145f6:	f7f4 f9a1 	bl	893c <sdc_hci_cmd_le_set_event_mask>
   145fa:	e054      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   145fc:	7813      	ldrb	r3, [r2, #0]
   145fe:	3303      	adds	r3, #3
   14600:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   14602:	4608      	mov	r0, r1
   14604:	f7f4 f98a 	bl	891c <sdc_hci_cmd_le_read_buffer_size>
   14608:	e04d      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1460a:	7813      	ldrb	r3, [r2, #0]
   1460c:	3308      	adds	r3, #8
   1460e:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   14610:	4608      	mov	r0, r1
   14612:	f7ff ff47 	bl	144a4 <le_supported_features>
		return 0;
   14616:	2000      	movs	r0, #0
   14618:	e045      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1461a:	f7f4 f994 	bl	8946 <sdc_hci_cmd_le_set_random_address>
   1461e:	e042      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   14620:	f7f4 f988 	bl	8934 <sdc_hci_cmd_le_set_adv_params>
   14624:	e03f      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out +=
   14626:	7813      	ldrb	r3, [r2, #0]
   14628:	3301      	adds	r3, #1
   1462a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1462c:	4608      	mov	r0, r1
   1462e:	f7f4 f973 	bl	8918 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   14632:	e038      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   14634:	f7f4 f97a 	bl	892c <sdc_hci_cmd_le_set_adv_data>
   14638:	e035      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1463a:	f7f4 f986 	bl	894a <sdc_hci_cmd_le_set_scan_response_data>
   1463e:	e032      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   14640:	f7f4 f976 	bl	8930 <sdc_hci_cmd_le_set_adv_enable>
   14644:	e02f      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   14646:	f7f4 f977 	bl	8938 <sdc_hci_cmd_le_set_data_related_address_changes>
   1464a:	e02c      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1464c:	7813      	ldrb	r3, [r2, #0]
   1464e:	3301      	adds	r3, #1
   14650:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   14652:	4608      	mov	r0, r1
   14654:	f7f4 f964 	bl	8920 <sdc_hci_cmd_le_read_filter_accept_list_size>
   14658:	e025      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1465a:	f7f4 f953 	bl	8904 <sdc_hci_cmd_le_clear_filter_accept_list>
   1465e:	e022      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   14660:	f7f4 f94e 	bl	8900 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   14664:	e01f      	b.n	146a6 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   14666:	f7f4 f95f 	bl	8928 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1466a:	e01c      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1466c:	7813      	ldrb	r3, [r2, #0]
   1466e:	3310      	adds	r3, #16
   14670:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   14672:	f7f4 f949 	bl	8908 <sdc_hci_cmd_le_encrypt>
   14676:	e016      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   14678:	7813      	ldrb	r3, [r2, #0]
   1467a:	3308      	adds	r3, #8
   1467c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1467e:	4608      	mov	r0, r1
   14680:	f7f4 f948 	bl	8914 <sdc_hci_cmd_le_rand>
   14684:	e00f      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   14686:	7813      	ldrb	r3, [r2, #0]
   14688:	3308      	adds	r3, #8
   1468a:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   1468c:	4608      	mov	r0, r1
   1468e:	f7ff fe2c 	bl	142ea <le_read_supported_states>
		return 0;
   14692:	2000      	movs	r0, #0
   14694:	e007      	b.n	146a6 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   14696:	7813      	ldrb	r3, [r2, #0]
   14698:	3302      	adds	r3, #2
   1469a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1469c:	4608      	mov	r0, r1
   1469e:	f7f4 f941 	bl	8924 <sdc_hci_cmd_le_read_transmit_power>
   146a2:	e000      	b.n	146a6 <le_controller_cmd_put+0x150>
	switch (opcode)	{
   146a4:	2001      	movs	r0, #1
}
   146a6:	bd08      	pop	{r3, pc}

000146a8 <vs_cmd_put>:
{
   146a8:	b508      	push	{r3, lr}
   146aa:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   146ac:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   146ae:	3106      	adds	r1, #6
   146b0:	f893 c001 	ldrb.w	ip, [r3, #1]
   146b4:	781b      	ldrb	r3, [r3, #0]
   146b6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   146ba:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   146be:	4563      	cmp	r3, ip
   146c0:	d913      	bls.n	146ea <vs_cmd_put+0x42>
   146c2:	f64f 5c0c 	movw	ip, #64780	; 0xfd0c
   146c6:	4563      	cmp	r3, ip
   146c8:	d86a      	bhi.n	147a0 <vs_cmd_put+0xf8>
   146ca:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   146ce:	d31e      	bcc.n	1470e <vs_cmd_put+0x66>
   146d0:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   146d4:	2b0c      	cmp	r3, #12
   146d6:	d85f      	bhi.n	14798 <vs_cmd_put+0xf0>
   146d8:	e8df f003 	tbb	[pc, r3]
   146dc:	524f4c44 	.word	0x524f4c44
   146e0:	5e5e5855 	.word	0x5e5e5855
   146e4:	5e5e5e5e 	.word	0x5e5e5e5e
   146e8:	5b          	.byte	0x5b
   146e9:	00          	.byte	0x00
   146ea:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   146ee:	d801      	bhi.n	146f4 <vs_cmd_put+0x4c>
   146f0:	2001      	movs	r0, #1
}
   146f2:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   146f4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   146f8:	3b01      	subs	r3, #1
   146fa:	2b0a      	cmp	r3, #10
   146fc:	d84e      	bhi.n	1479c <vs_cmd_put+0xf4>
   146fe:	e8df f003 	tbb	[pc, r3]
   14702:	0f08      	.short	0x0f08
   14704:	274d4d4d 	.word	0x274d4d4d
   14708:	20174d4d 	.word	0x20174d4d
   1470c:	2a          	.byte	0x2a
   1470d:	00          	.byte	0x00
   1470e:	2001      	movs	r0, #1
   14710:	e7ef      	b.n	146f2 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   14712:	7813      	ldrb	r3, [r2, #0]
   14714:	330c      	adds	r3, #12
   14716:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   14718:	4608      	mov	r0, r1
   1471a:	f7ec fc27 	bl	f6c <sdc_hci_cmd_vs_zephyr_read_version_info>
   1471e:	e7e8      	b.n	146f2 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   14720:	7813      	ldrb	r3, [r2, #0]
   14722:	3340      	adds	r3, #64	; 0x40
   14724:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   14726:	4608      	mov	r0, r1
   14728:	f7ff fed7 	bl	144da <vs_zephyr_supported_commands>
		return 0;
   1472c:	2000      	movs	r0, #0
   1472e:	e7e0      	b.n	146f2 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   14730:	7813      	ldrb	r3, [r2, #0]
   14732:	1c58      	adds	r0, r3, #1
   14734:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   14736:	3317      	adds	r3, #23
   14738:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1473a:	4608      	mov	r0, r1
   1473c:	f7ec fbca 	bl	ed4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   14740:	e7d7      	b.n	146f2 <vs_cmd_put+0x4a>
		*param_length_out +=
   14742:	7813      	ldrb	r3, [r2, #0]
   14744:	3320      	adds	r3, #32
   14746:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   14748:	4608      	mov	r0, r1
   1474a:	f7ec fb7b 	bl	e44 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1474e:	e7d0      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   14750:	f7f4 f8d0 	bl	88f4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   14754:	e7cd      	b.n	146f2 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   14756:	7813      	ldrb	r3, [r2, #0]
   14758:	3301      	adds	r3, #1
   1475a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1475c:	4608      	mov	r0, r1
   1475e:	f7f4 f8b5 	bl	88cc <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   14762:	e7c6      	b.n	146f2 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   14764:	7813      	ldrb	r3, [r2, #0]
   14766:	3340      	adds	r3, #64	; 0x40
   14768:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   1476a:	4608      	mov	r0, r1
   1476c:	f7ff fed4 	bl	14518 <vs_supported_commands>
		return 0;
   14770:	2000      	movs	r0, #0
   14772:	e7be      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   14774:	f7f4 f8a1 	bl	88ba <sdc_hci_cmd_vs_llpm_mode_set>
   14778:	e7bb      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1477a:	f7f4 f89a 	bl	88b2 <sdc_hci_cmd_vs_conn_update>
   1477e:	e7b8      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   14780:	f7f4 f88f 	bl	88a2 <sdc_hci_cmd_vs_conn_event_extend>
   14784:	e7b5      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   14786:	f7f4 f89a 	bl	88be <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1478a:	e7b2      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1478c:	f7f4 f893 	bl	88b6 <sdc_hci_cmd_vs_event_length_set>
   14790:	e7af      	b.n	146f2 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   14792:	f7f4 f899 	bl	88c8 <sdc_hci_cmd_vs_set_adv_randomness>
   14796:	e7ac      	b.n	146f2 <vs_cmd_put+0x4a>
	switch (opcode)	{
   14798:	2001      	movs	r0, #1
   1479a:	e7aa      	b.n	146f2 <vs_cmd_put+0x4a>
   1479c:	2001      	movs	r0, #1
   1479e:	e7a8      	b.n	146f2 <vs_cmd_put+0x4a>
   147a0:	2001      	movs	r0, #1
   147a2:	e7a6      	b.n	146f2 <vs_cmd_put+0x4a>

000147a4 <m_assert_handler>:
	k_oops();
   147a4:	4040      	eors	r0, r0
   147a6:	f380 8811 	msr	BASEPRI, r0
   147aa:	f04f 0003 	mov.w	r0, #3
   147ae:	df02      	svc	2
}
   147b0:	4770      	bx	lr

000147b2 <m_config_clock_source_get>:
}
   147b2:	2000      	movs	r0, #0
   147b4:	4770      	bx	lr

000147b6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   147b6:	4668      	mov	r0, sp
   147b8:	f020 0107 	bic.w	r1, r0, #7
   147bc:	468d      	mov	sp, r1
   147be:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   147c0:	f7f2 fa4c 	bl	6c5c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   147c4:	f7f7 fb50 	bl	be68 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   147c8:	f7f7 fc52 	bl	c070 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   147cc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   147d0:	4685      	mov	sp, r0
   147d2:	4770      	bx	lr

000147d4 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   147d4:	4668      	mov	r0, sp
   147d6:	f020 0107 	bic.w	r1, r0, #7
   147da:	468d      	mov	sp, r1
   147dc:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   147de:	f7f2 f9f3 	bl	6bc8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   147e2:	f7f7 fb41 	bl	be68 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   147e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   147ea:	4685      	mov	sp, r0
   147ec:	4770      	bx	lr

000147ee <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   147ee:	4668      	mov	r0, sp
   147f0:	f020 0107 	bic.w	r1, r0, #7
   147f4:	468d      	mov	sp, r1
   147f6:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   147f8:	f7ef ff3e 	bl	4678 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   147fc:	f7f7 fb34 	bl	be68 <_arch_isr_direct_pm>
   14800:	f7f7 fc36 	bl	c070 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   14804:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   14808:	4685      	mov	sp, r0
   1480a:	4770      	bx	lr

0001480c <mpsl_lib_init_sys>:
{
   1480c:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   1480e:	f7fa fdc1 	bl	f394 <mpsl_lib_init_internal>
	if (err) {
   14812:	4604      	mov	r4, r0
   14814:	b108      	cbz	r0, 1481a <mpsl_lib_init_sys+0xe>
}
   14816:	4620      	mov	r0, r4
   14818:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1481a:	2201      	movs	r2, #1
   1481c:	2100      	movs	r1, #0
   1481e:	2008      	movs	r0, #8
   14820:	f7fe f900 	bl	12a24 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   14824:	2201      	movs	r2, #1
   14826:	2100      	movs	r1, #0
   14828:	200b      	movs	r0, #11
   1482a:	f7fe f8fb 	bl	12a24 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1482e:	2201      	movs	r2, #1
   14830:	2100      	movs	r1, #0
   14832:	4610      	mov	r0, r2
   14834:	f7fe f8f6 	bl	12a24 <z_arm_irq_priority_set>
	return 0;
   14838:	e7ed      	b.n	14816 <mpsl_lib_init_sys+0xa>

0001483a <mpsl_low_prio_work_handler>:
{
   1483a:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1483c:	f04f 30ff 	mov.w	r0, #4294967295
   14840:	f04f 31ff 	mov.w	r1, #4294967295
   14844:	f7fa fbb0 	bl	efa8 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   14848:	f7f5 fef7 	bl	a63a <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   1484c:	f7fa fbb6 	bl	efbc <multithreading_lock_release>
}
   14850:	bd08      	pop	{r3, pc}

00014852 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   14852:	b508      	push	{r3, lr}

	mpsl_fem_init();
   14854:	f7f6 f8c7 	bl	a9e6 <mpsl_fem_init>

	return 0;
}
   14858:	2000      	movs	r0, #0
   1485a:	bd08      	pop	{r3, pc}

0001485c <nrfx_clock_stop>:
	switch (domain) {
   1485c:	2801      	cmp	r0, #1
   1485e:	d000      	beq.n	14862 <nrfx_clock_stop+0x6>
   14860:	4770      	bx	lr
{
   14862:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   14864:	f7f3 f88e 	bl	7984 <mpsl_clock_hfclk_release>
}
   14868:	bd08      	pop	{r3, pc}

0001486a <nrfx_clock_enable>:
}
   1486a:	4770      	bx	lr

0001486c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   1486c:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   1486e:	f7f2 fe93 	bl	7598 <MPSL_IRQ_CLOCK_Handler>
}
   14872:	bd08      	pop	{r3, pc}

00014874 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14878:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1487c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14880:	d003      	beq.n	1488a <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14882:	2b06      	cmp	r3, #6
   14884:	d006      	beq.n	14894 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14886:	2000      	movs	r0, #0
   14888:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1488a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1488e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14892:	e7f6      	b.n	14882 <nrf52_errata_12+0xe>
                        return true;
   14894:	2001      	movs	r0, #1
    #endif
}
   14896:	4770      	bx	lr

00014898 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14898:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1489c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   148a0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   148a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   148a8:	2a06      	cmp	r2, #6
   148aa:	d001      	beq.n	148b0 <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   148ac:	2000      	movs	r0, #0
   148ae:	4770      	bx	lr
                switch(var2)
   148b0:	3b03      	subs	r3, #3
   148b2:	2b00      	cmp	r3, #0
   148b4:	d804      	bhi.n	148c0 <nrf52_errata_16+0x28>
   148b6:	e8df f003 	tbb	[pc, r3]
   148ba:	01          	.byte	0x01
   148bb:	00          	.byte	0x00
   148bc:	2001      	movs	r0, #1
   148be:	4770      	bx	lr
                        return false;
   148c0:	2000      	movs	r0, #0
    #endif
}
   148c2:	4770      	bx	lr

000148c4 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   148c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   148c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   148cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   148d0:	d003      	beq.n	148da <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   148d2:	2b06      	cmp	r3, #6
   148d4:	d006      	beq.n	148e4 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   148d6:	2000      	movs	r0, #0
   148d8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   148da:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   148de:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   148e2:	e7f6      	b.n	148d2 <nrf52_errata_31+0xe>
                        return true;
   148e4:	2001      	movs	r0, #1
    #endif
}
   148e6:	4770      	bx	lr

000148e8 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   148e8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   148ec:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   148f0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   148f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   148f8:	2a06      	cmp	r2, #6
   148fa:	d001      	beq.n	14900 <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   148fc:	2000      	movs	r0, #0
   148fe:	4770      	bx	lr
                switch(var2)
   14900:	3b03      	subs	r3, #3
   14902:	2b00      	cmp	r3, #0
   14904:	d804      	bhi.n	14910 <nrf52_errata_32+0x28>
   14906:	e8df f003 	tbb	[pc, r3]
   1490a:	01          	.byte	0x01
   1490b:	00          	.byte	0x00
   1490c:	2001      	movs	r0, #1
   1490e:	4770      	bx	lr
                        return false;
   14910:	2000      	movs	r0, #0
    #endif
}
   14912:	4770      	bx	lr

00014914 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14918:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1491c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14920:	d003      	beq.n	1492a <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14922:	2b06      	cmp	r3, #6
   14924:	d006      	beq.n	14934 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14926:	2000      	movs	r0, #0
   14928:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1492a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1492e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14932:	e7f6      	b.n	14922 <nrf52_errata_36+0xe>
                        return true;
   14934:	2001      	movs	r0, #1
    #endif
}
   14936:	4770      	bx	lr

00014938 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14938:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1493c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14940:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14944:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14948:	2a06      	cmp	r2, #6
   1494a:	d001      	beq.n	14950 <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1494c:	2000      	movs	r0, #0
   1494e:	4770      	bx	lr
                switch(var2)
   14950:	3b03      	subs	r3, #3
   14952:	2b00      	cmp	r3, #0
   14954:	d804      	bhi.n	14960 <nrf52_errata_37+0x28>
   14956:	e8df f003 	tbb	[pc, r3]
   1495a:	01          	.byte	0x01
   1495b:	00          	.byte	0x00
   1495c:	2001      	movs	r0, #1
   1495e:	4770      	bx	lr
                        return false;
   14960:	2000      	movs	r0, #0
    #endif
}
   14962:	4770      	bx	lr

00014964 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14964:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   14968:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1496c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14970:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14974:	2a06      	cmp	r2, #6
   14976:	d001      	beq.n	1497c <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   14978:	2000      	movs	r0, #0
   1497a:	4770      	bx	lr
                switch(var2)
   1497c:	3b03      	subs	r3, #3
   1497e:	2b00      	cmp	r3, #0
   14980:	d804      	bhi.n	1498c <nrf52_errata_57+0x28>
   14982:	e8df f003 	tbb	[pc, r3]
   14986:	01          	.byte	0x01
   14987:	00          	.byte	0x00
   14988:	2001      	movs	r0, #1
   1498a:	4770      	bx	lr
                        return false;
   1498c:	2000      	movs	r0, #0
    #endif
}
   1498e:	4770      	bx	lr

00014990 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14994:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14998:	f1b3 3fff 	cmp.w	r3, #4294967295
   1499c:	d007      	beq.n	149ae <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   149a2:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   149a6:	2b06      	cmp	r3, #6
   149a8:	d00a      	beq.n	149c0 <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   149aa:	2000      	movs	r0, #0
   149ac:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   149ae:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
   149b2:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   149b6:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
   149ba:	f3c2 1203 	ubfx	r2, r2, #4, #4
   149be:	e7f2      	b.n	149a6 <nrf52_errata_66+0x16>
                switch(var2)
   149c0:	3a03      	subs	r2, #3
   149c2:	2a01      	cmp	r2, #1
   149c4:	d804      	bhi.n	149d0 <nrf52_errata_66+0x40>
   149c6:	e8df f002 	tbb	[pc, r2]
   149ca:	0101      	.short	0x0101
   149cc:	2000      	movs	r0, #0
   149ce:	4770      	bx	lr
                        return true;
   149d0:	2001      	movs	r0, #1
    #endif
}
   149d2:	4770      	bx	lr

000149d4 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   149d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   149d8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   149dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   149e0:	d003      	beq.n	149ea <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   149e2:	2b06      	cmp	r3, #6
   149e4:	d006      	beq.n	149f4 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   149e6:	2000      	movs	r0, #0
   149e8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   149ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   149ee:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   149f2:	e7f6      	b.n	149e2 <nrf52_errata_108+0xe>
                        return true;
   149f4:	2001      	movs	r0, #1
    #endif
}
   149f6:	4770      	bx	lr

000149f8 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   149f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   149fc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14a00:	f1b3 3fff 	cmp.w	r3, #4294967295
   14a04:	d003      	beq.n	14a0e <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14a06:	2b06      	cmp	r3, #6
   14a08:	d006      	beq.n	14a18 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14a0a:	2000      	movs	r0, #0
   14a0c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14a0e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   14a12:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14a16:	e7f6      	b.n	14a06 <nrf52_errata_136+0xe>
                        return true;
   14a18:	2001      	movs	r0, #1
    #endif
}
   14a1a:	4770      	bx	lr

00014a1c <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14a1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14a20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14a24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14a28:	2a06      	cmp	r2, #6
   14a2a:	d001      	beq.n	14a30 <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14a2c:	2000      	movs	r0, #0
   14a2e:	4770      	bx	lr
                switch(var2)
   14a30:	2b05      	cmp	r3, #5
   14a32:	d803      	bhi.n	14a3c <nrf52_errata_182+0x20>
   14a34:	2b03      	cmp	r3, #3
   14a36:	d303      	bcc.n	14a40 <nrf52_errata_182+0x24>
   14a38:	2000      	movs	r0, #0
   14a3a:	4770      	bx	lr
                        return true;
   14a3c:	2001      	movs	r0, #1
   14a3e:	4770      	bx	lr
                        return true;
   14a40:	2001      	movs	r0, #1
    #endif
}
   14a42:	4770      	bx	lr

00014a44 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14a48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14a4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14a50:	2a06      	cmp	r2, #6
   14a52:	d001      	beq.n	14a58 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   14a54:	2000      	movs	r0, #0
   14a56:	4770      	bx	lr
                switch(var2)
   14a58:	2b06      	cmp	r3, #6
   14a5a:	d803      	bhi.n	14a64 <nrf52_configuration_249+0x20>
   14a5c:	2b03      	cmp	r3, #3
   14a5e:	d303      	bcc.n	14a68 <nrf52_configuration_249+0x24>
   14a60:	2000      	movs	r0, #0
   14a62:	4770      	bx	lr
                        return true;
   14a64:	2001      	movs	r0, #1
   14a66:	4770      	bx	lr
                        return true;
   14a68:	2001      	movs	r0, #1
    #endif
}
   14a6a:	4770      	bx	lr

00014a6c <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   14a6c:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   14a6e:	f7ff ffe9 	bl	14a44 <nrf52_configuration_249>
   14a72:	b138      	cbz	r0, 14a84 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   14a74:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14a78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   14a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14a80:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   14a84:	bd08      	pop	{r3, pc}

00014a86 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   14a86:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   14a88:	4780      	blx	r0
}
   14a8a:	bd08      	pop	{r3, pc}

00014a8c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   14a8c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   14a8e:	f000 ff71 	bl	15974 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   14a92:	bd08      	pop	{r3, pc}

00014a94 <nrf_gpiote_event_configure>:
{
   14a94:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14a96:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   14a9a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14a9e:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   14aa2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   14aa6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14aaa:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14aae:	0212      	lsls	r2, r2, #8
   14ab0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   14ab4:	041b      	lsls	r3, r3, #16
   14ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14aba:	431a      	orrs	r2, r3
   14abc:	4314      	orrs	r4, r2
   14abe:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   14ac2:	bc10      	pop	{r4}
   14ac4:	4770      	bx	lr

00014ac6 <nrf_gpiote_task_configure>:
{
   14ac6:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14ac8:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   14acc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14ad0:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
   14ad4:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   14ad8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14adc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14ae0:	0212      	lsls	r2, r2, #8
   14ae2:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14ae6:	041b      	lsls	r3, r3, #16
   14ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14aec:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   14aee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14af2:	051b      	lsls	r3, r3, #20
   14af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14af8:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14afa:	4314      	orrs	r4, r2
   14afc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   14b00:	bc10      	pop	{r4}
   14b02:	4770      	bx	lr

00014b04 <nrf_gpio_reconfigure>:
{
   14b04:	b4f0      	push	{r4, r5, r6, r7}
   14b06:	461c      	mov	r4, r3
   14b08:	9e04      	ldr	r6, [sp, #16]
   14b0a:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
   14b0c:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14b10:	f500 77e0 	add.w	r7, r0, #448	; 0x1c0
   14b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14b18:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14b1c:	460b      	mov	r3, r1
   14b1e:	b389      	cbz	r1, 14b84 <nrf_gpio_reconfigure+0x80>
   14b20:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14b22:	b38a      	cbz	r2, 14b88 <nrf_gpio_reconfigure+0x84>
   14b24:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14b28:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14b2c:	b37c      	cbz	r4, 14b8e <nrf_gpio_reconfigure+0x8a>
   14b2e:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14b32:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14b36:	b36e      	cbz	r6, 14b94 <nrf_gpio_reconfigure+0x90>
   14b38:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14b3c:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   14b40:	b35d      	cbz	r5, 14b9a <nrf_gpio_reconfigure+0x96>
   14b42:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14b46:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
   14b4a:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14b4e:	b33b      	cbz	r3, 14ba0 <nrf_gpio_reconfigure+0x9c>
   14b50:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14b52:	b33a      	cbz	r2, 14ba4 <nrf_gpio_reconfigure+0xa0>
   14b54:	7812      	ldrb	r2, [r2, #0]
   14b56:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14b58:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14b5a:	b32c      	cbz	r4, 14ba8 <nrf_gpio_reconfigure+0xa4>
   14b5c:	7822      	ldrb	r2, [r4, #0]
   14b5e:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14b60:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14b62:	b31e      	cbz	r6, 14bac <nrf_gpio_reconfigure+0xa8>
   14b64:	7832      	ldrb	r2, [r6, #0]
   14b66:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14b68:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   14b6a:	b30d      	cbz	r5, 14bb0 <nrf_gpio_reconfigure+0xac>
   14b6c:	782a      	ldrb	r2, [r5, #0]
   14b6e:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14b70:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14b72:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   14b74:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   14b78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14b7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   14b80:	bcf0      	pop	{r4, r5, r6, r7}
   14b82:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14b84:	2100      	movs	r1, #0
   14b86:	e7cc      	b.n	14b22 <nrf_gpio_reconfigure+0x1e>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14b88:	f04f 0c00 	mov.w	ip, #0
   14b8c:	e7cc      	b.n	14b28 <nrf_gpio_reconfigure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14b8e:	f04f 0c00 	mov.w	ip, #0
   14b92:	e7ce      	b.n	14b32 <nrf_gpio_reconfigure+0x2e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14b94:	f04f 0c00 	mov.w	ip, #0
   14b98:	e7d0      	b.n	14b3c <nrf_gpio_reconfigure+0x38>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   14b9a:	f04f 0c00 	mov.w	ip, #0
   14b9e:	e7d2      	b.n	14b46 <nrf_gpio_reconfigure+0x42>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14ba0:	2300      	movs	r3, #0
   14ba2:	e7d6      	b.n	14b52 <nrf_gpio_reconfigure+0x4e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14ba4:	2200      	movs	r2, #0
   14ba6:	e7d7      	b.n	14b58 <nrf_gpio_reconfigure+0x54>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14ba8:	2200      	movs	r2, #0
   14baa:	e7d9      	b.n	14b60 <nrf_gpio_reconfigure+0x5c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14bac:	2200      	movs	r2, #0
   14bae:	e7db      	b.n	14b68 <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   14bb0:	2200      	movs	r2, #0
   14bb2:	e7dd      	b.n	14b70 <nrf_gpio_reconfigure+0x6c>

00014bb4 <pin_is_task_output>:
{
   14bb4:	b510      	push	{r4, lr}
   14bb6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14bb8:	f7fa fddc 	bl	f774 <pin_is_output>
   14bbc:	b128      	cbz	r0, 14bca <pin_is_task_output+0x16>
   14bbe:	4620      	mov	r0, r4
   14bc0:	f7fa fdc2 	bl	f748 <pin_in_use_by_te>
   14bc4:	b118      	cbz	r0, 14bce <pin_is_task_output+0x1a>
   14bc6:	2001      	movs	r0, #1
   14bc8:	e000      	b.n	14bcc <pin_is_task_output+0x18>
   14bca:	2000      	movs	r0, #0
}
   14bcc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14bce:	2000      	movs	r0, #0
   14bd0:	e7fc      	b.n	14bcc <pin_is_task_output+0x18>

00014bd2 <pin_is_input>:
{
   14bd2:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   14bd4:	f7fa fdce 	bl	f774 <pin_is_output>
   14bd8:	f080 0001 	eor.w	r0, r0, #1
}
   14bdc:	b2c0      	uxtb	r0, r0
   14bde:	bd08      	pop	{r3, pc}

00014be0 <gpiote_polarity_to_trigger>:
}
   14be0:	4770      	bx	lr

00014be2 <gpiote_trigger_to_polarity>:
}
   14be2:	4770      	bx	lr

00014be4 <is_level>:
}
   14be4:	2803      	cmp	r0, #3
   14be6:	bf94      	ite	ls
   14be8:	2000      	movls	r0, #0
   14bea:	2001      	movhi	r0, #1
   14bec:	4770      	bx	lr

00014bee <next_sense_cond_call_handler>:
{
   14bee:	b570      	push	{r4, r5, r6, lr}
   14bf0:	4604      	mov	r4, r0
   14bf2:	460d      	mov	r5, r1
   14bf4:	4616      	mov	r6, r2
    if (is_level(trigger))
   14bf6:	4608      	mov	r0, r1
   14bf8:	f7ff fff4 	bl	14be4 <is_level>
   14bfc:	b9b8      	cbnz	r0, 14c2e <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14bfe:	2e02      	cmp	r6, #2
   14c00:	d038      	beq.n	14c74 <next_sense_cond_call_handler+0x86>
   14c02:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   14c04:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c08:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   14c0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14c10:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   14c14:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14c18:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   14c20:	2d03      	cmp	r5, #3
   14c22:	d02b      	beq.n	14c7c <next_sense_cond_call_handler+0x8e>
   14c24:	2e02      	cmp	r6, #2
   14c26:	d027      	beq.n	14c78 <next_sense_cond_call_handler+0x8a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14c28:	2e03      	cmp	r6, #3
   14c2a:	d02c      	beq.n	14c86 <next_sense_cond_call_handler+0x98>
}
   14c2c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   14c2e:	4629      	mov	r1, r5
   14c30:	4620      	mov	r0, r4
   14c32:	f7fa fe11 	bl	f858 <call_handler>
    *p_pin = pin_number & 0x1F;
   14c36:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14c3a:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
   14c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14c46:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   14c4a:	429e      	cmp	r6, r3
   14c4c:	d1ee      	bne.n	14c2c <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14c52:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   14c56:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14c5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   14c5e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c62:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14c66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14c6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14c6e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   14c72:	e7db      	b.n	14c2c <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14c74:	2003      	movs	r0, #3
   14c76:	e7c5      	b.n	14c04 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14c78:	2d01      	cmp	r5, #1
   14c7a:	d1d5      	bne.n	14c28 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
   14c7c:	4629      	mov	r1, r5
   14c7e:	4620      	mov	r0, r4
   14c80:	f7fa fdea 	bl	f858 <call_handler>
}
   14c84:	e7d2      	b.n	14c2c <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   14c86:	2d02      	cmp	r5, #2
   14c88:	d1d0      	bne.n	14c2c <next_sense_cond_call_handler+0x3e>
   14c8a:	e7f7      	b.n	14c7c <next_sense_cond_call_handler+0x8e>

00014c8c <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   14c8c:	4684      	mov	ip, r0
   14c8e:	2300      	movs	r3, #0
   14c90:	e008      	b.n	14ca4 <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   14c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14c96:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14c9a:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   14c9e:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14ca2:	3301      	adds	r3, #1
   14ca4:	2b00      	cmp	r3, #0
   14ca6:	d0f4      	beq.n	14c92 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14ca8:	2300      	movs	r3, #0
   14caa:	b10b      	cbz	r3, 14cb0 <latch_pending_read_and_check+0x24>
    return false;
   14cac:	2000      	movs	r0, #0
   14cae:	4770      	bx	lr
        if (latch[port_idx])
   14cb0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   14cb4:	b90a      	cbnz	r2, 14cba <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14cb6:	3301      	adds	r3, #1
   14cb8:	e7f7      	b.n	14caa <latch_pending_read_and_check+0x1e>
            return true;
   14cba:	2001      	movs	r0, #1
}
   14cbc:	4770      	bx	lr

00014cbe <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   14cbe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   14cc0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   14cc2:	429a      	cmp	r2, r3
   14cc4:	d007      	beq.n	14cd6 <xfer_completeness_check+0x18>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   14cc6:	2300      	movs	r3, #0
   14cc8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   14ccc:	2205      	movs	r2, #5
   14cce:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   14cd2:	4618      	mov	r0, r3
   14cd4:	4770      	bx	lr
        return true;
   14cd6:	2001      	movs	r0, #1
}
   14cd8:	4770      	bx	lr

00014cda <twi_send_byte>:
{
   14cda:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   14cdc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   14cde:	6a88      	ldr	r0, [r1, #40]	; 0x28
   14ce0:	4282      	cmp	r2, r0
   14ce2:	d205      	bcs.n	14cf0 <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   14ce4:	6a49      	ldr	r1, [r1, #36]	; 0x24
   14ce6:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   14ce8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   14cec:	2001      	movs	r0, #1
}
   14cee:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   14cf0:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   14cf4:	b930      	cbnz	r0, 14d04 <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   14cf6:	6a0a      	ldr	r2, [r1, #32]
   14cf8:	f012 0f40 	tst.w	r2, #64	; 0x40
   14cfc:	d106      	bne.n	14d0c <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cfe:	2001      	movs	r0, #1
   14d00:	6158      	str	r0, [r3, #20]
}
   14d02:	4770      	bx	lr
   14d04:	2201      	movs	r2, #1
   14d06:	61da      	str	r2, [r3, #28]
            return false;
   14d08:	2000      	movs	r0, #0
   14d0a:	4770      	bx	lr
   14d0c:	2201      	movs	r2, #1
   14d0e:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   14d10:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   14d14:	4770      	bx	lr

00014d16 <twi_receive_byte>:
{
   14d16:	4684      	mov	ip, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   14d18:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14d1a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   14d1c:	4293      	cmp	r3, r2
   14d1e:	d229      	bcs.n	14d74 <twi_receive_byte+0x5e>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   14d20:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   14d22:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   14d26:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   14d28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14d2a:	3301      	adds	r3, #1
   14d2c:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14d2e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   14d30:	1e50      	subs	r0, r2, #1
   14d32:	4283      	cmp	r3, r0
   14d34:	d007      	beq.n	14d46 <twi_receive_byte+0x30>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14d36:	4293      	cmp	r3, r2
   14d38:	d00d      	beq.n	14d56 <twi_receive_byte+0x40>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   14d3a:	4293      	cmp	r3, r2
   14d3c:	d011      	beq.n	14d62 <twi_receive_byte+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d3e:	2001      	movs	r0, #1
   14d40:	f8cc 0020 	str.w	r0, [ip, #32]
}
   14d44:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14d46:	6a08      	ldr	r0, [r1, #32]
   14d48:	f010 0f40 	tst.w	r0, #64	; 0x40
   14d4c:	d1f3      	bne.n	14d36 <twi_receive_byte+0x20>
    p_reg->SHORTS = mask;
   14d4e:	2302      	movs	r3, #2
   14d50:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
}
   14d54:	e7f3      	b.n	14d3e <twi_receive_byte+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   14d56:	6a08      	ldr	r0, [r1, #32]
   14d58:	f010 0f40 	tst.w	r0, #64	; 0x40
   14d5c:	d1ed      	bne.n	14d3a <twi_receive_byte+0x24>
            return true;
   14d5e:	2001      	movs	r0, #1
}
   14d60:	4770      	bx	lr
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   14d62:	6a0b      	ldr	r3, [r1, #32]
   14d64:	f013 0f40 	tst.w	r3, #64	; 0x40
   14d68:	d0e9      	beq.n	14d3e <twi_receive_byte+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   14d6a:	2302      	movs	r3, #2
   14d6c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   14d70:	2000      	movs	r0, #0
   14d72:	4770      	bx	lr
    return true;
   14d74:	2001      	movs	r0, #1
   14d76:	4770      	bx	lr

00014d78 <twi_transfer>:
{
   14d78:	b570      	push	{r4, r5, r6, lr}
   14d7a:	4604      	mov	r4, r0
   14d7c:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14d7e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   14d82:	b1cb      	cbz	r3, 14db8 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d84:	2300      	movs	r3, #0
   14d86:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   14d8a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   14d8e:	2601      	movs	r6, #1
    if (p_cb->error)
   14d90:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14d94:	b193      	cbz	r3, 14dbc <twi_transfer+0x44>
   14d96:	2300      	movs	r3, #0
   14d98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14d9c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   14da0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   14da4:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   14da8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   14dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   14db0:	2e00      	cmp	r6, #0
   14db2:	d14c      	bne.n	14e4e <twi_transfer+0xd6>
    return true;
   14db4:	2001      	movs	r0, #1
}
   14db6:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   14db8:	2600      	movs	r6, #0
   14dba:	e7e9      	b.n	14d90 <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14dbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14dc0:	b14b      	cbz	r3, 14dd6 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14dc2:	2300      	movs	r3, #0
   14dc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14dc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14dcc:	2301      	movs	r3, #1
   14dce:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   14dd0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14dd4:	e7ec      	b.n	14db0 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14dd6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   14dda:	b1db      	cbz	r3, 14e14 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ddc:	2300      	movs	r3, #0
   14dde:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   14de2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   14de6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14de8:	3301      	adds	r3, #1
   14dea:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14dec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14df0:	b14b      	cbz	r3, 14e06 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14df2:	2300      	movs	r3, #0
   14df4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14df8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14dfc:	2301      	movs	r3, #1
   14dfe:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   14e00:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14e04:	e7d4      	b.n	14db0 <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   14e06:	4629      	mov	r1, r5
   14e08:	4620      	mov	r0, r4
   14e0a:	f7ff ff66 	bl	14cda <twi_send_byte>
   14e0e:	2800      	cmp	r0, #0
   14e10:	d1ce      	bne.n	14db0 <twi_transfer+0x38>
   14e12:	e7d0      	b.n	14db6 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d0c9      	beq.n	14db0 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e1c:	2300      	movs	r3, #0
   14e1e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   14e22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14e2a:	b14b      	cbz	r3, 14e40 <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e2c:	2300      	movs	r3, #0
   14e2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14e32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e36:	2301      	movs	r3, #1
   14e38:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   14e3a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14e3e:	e7b7      	b.n	14db0 <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   14e40:	4629      	mov	r1, r5
   14e42:	4620      	mov	r0, r4
   14e44:	f7ff ff67 	bl	14d16 <twi_receive_byte>
   14e48:	2800      	cmp	r0, #0
   14e4a:	d1b1      	bne.n	14db0 <twi_transfer+0x38>
   14e4c:	e7b3      	b.n	14db6 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   14e4e:	2300      	movs	r3, #0
   14e50:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   14e54:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14e58:	b10b      	cbz	r3, 14e5e <twi_transfer+0xe6>
        return false;
   14e5a:	2000      	movs	r0, #0
   14e5c:	e7ab      	b.n	14db6 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   14e5e:	4629      	mov	r1, r5
   14e60:	4620      	mov	r0, r4
   14e62:	f7ff ff2c 	bl	14cbe <xfer_completeness_check>
   14e66:	f080 0001 	eor.w	r0, r0, #1
   14e6a:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   14e6e:	e7f4      	b.n	14e5a <twi_transfer+0xe2>

00014e70 <twi_irq_handler>:
{
   14e70:	b570      	push	{r4, r5, r6, lr}
   14e72:	b086      	sub	sp, #24
   14e74:	4605      	mov	r5, r0
   14e76:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   14e78:	f7ff ff7e 	bl	14d78 <twi_transfer>
   14e7c:	2800      	cmp	r0, #0
   14e7e:	d15e      	bne.n	14f3e <twi_irq_handler+0xce>
    if (!p_cb->error &&
   14e80:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   14e84:	b926      	cbnz	r6, 14e90 <twi_irq_handler+0x20>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   14e86:	7b22      	ldrb	r2, [r4, #12]
   14e88:	1e93      	subs	r3, r2, #2
   14e8a:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   14e8c:	2b01      	cmp	r3, #1
   14e8e:	d917      	bls.n	14ec0 <twi_irq_handler+0x50>
        event.xfer_desc = p_cb->xfer_desc;
   14e90:	f10d 0c04 	add.w	ip, sp, #4
   14e94:	f104 0e0c 	add.w	lr, r4, #12
   14e98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14ea0:	f8de 3000 	ldr.w	r3, [lr]
   14ea4:	f8cc 3000 	str.w	r3, [ip]
        if (p_cb->error)
   14ea8:	b3c6      	cbz	r6, 14f1c <twi_irq_handler+0xac>
    uint32_t error_source = p_reg->ERRORSRC;
   14eaa:	f8d5 34c4 	ldr.w	r3, [r5, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   14eae:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   14eb2:	f013 0f02 	tst.w	r3, #2
   14eb6:	d01f      	beq.n	14ef8 <twi_irq_handler+0x88>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   14eb8:	2301      	movs	r3, #1
   14eba:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   14ebe:	e030      	b.n	14f22 <twi_irq_handler+0xb2>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   14ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14ec2:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   14ec4:	4299      	cmp	r1, r3
   14ec6:	d1e3      	bne.n	14e90 <twi_irq_handler+0x20>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   14ec8:	69e3      	ldr	r3, [r4, #28]
   14eca:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   14ecc:	6963      	ldr	r3, [r4, #20]
   14ece:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   14ed0:	6a23      	ldr	r3, [r4, #32]
   14ed2:	f3c3 1340 	ubfx	r3, r3, #5, #1
   14ed6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   14eda:	2300      	movs	r3, #0
   14edc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   14ee0:	2a03      	cmp	r2, #3
   14ee2:	d004      	beq.n	14eee <twi_irq_handler+0x7e>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   14ee4:	4621      	mov	r1, r4
   14ee6:	4628      	mov	r0, r5
   14ee8:	f7fb f848 	bl	ff7c <twi_rx_start_transfer>
   14eec:	e027      	b.n	14f3e <twi_irq_handler+0xce>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   14eee:	4621      	mov	r1, r4
   14ef0:	4628      	mov	r0, r5
   14ef2:	f7fa ffe5 	bl	fec0 <twi_tx_start_transfer>
   14ef6:	e022      	b.n	14f3e <twi_irq_handler+0xce>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   14ef8:	f013 0f04 	tst.w	r3, #4
   14efc:	d003      	beq.n	14f06 <twi_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   14efe:	2302      	movs	r3, #2
   14f00:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   14f04:	e00d      	b.n	14f22 <twi_irq_handler+0xb2>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   14f06:	f013 0f01 	tst.w	r3, #1
   14f0a:	d003      	beq.n	14f14 <twi_irq_handler+0xa4>
                event.type = NRFX_TWI_EVT_OVERRUN;
   14f0c:	2303      	movs	r3, #3
   14f0e:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   14f12:	e006      	b.n	14f22 <twi_irq_handler+0xb2>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   14f14:	2304      	movs	r3, #4
   14f16:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   14f1a:	e002      	b.n	14f22 <twi_irq_handler+0xb2>
            event.type = NRFX_TWI_EVT_DONE;
   14f1c:	2300      	movs	r3, #0
   14f1e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   14f22:	2300      	movs	r3, #0
   14f24:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   14f28:	6a23      	ldr	r3, [r4, #32]
   14f2a:	f013 0f04 	tst.w	r3, #4
   14f2e:	d002      	beq.n	14f36 <twi_irq_handler+0xc6>
   14f30:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   14f34:	b11b      	cbz	r3, 14f3e <twi_irq_handler+0xce>
            p_cb->handler(&event, p_cb->p_context);
   14f36:	6823      	ldr	r3, [r4, #0]
   14f38:	6861      	ldr	r1, [r4, #4]
   14f3a:	4668      	mov	r0, sp
   14f3c:	4798      	blx	r3
}
   14f3e:	b006      	add	sp, #24
   14f40:	bd70      	pop	{r4, r5, r6, pc}

00014f42 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   14f42:	b508      	push	{r3, lr}
  _DoInit();
   14f44:	f7fb f9d4 	bl	102f0 <_DoInit>
}
   14f48:	bd08      	pop	{r3, pc}

00014f4a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   14f4a:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   14f4c:	f7ff fff9 	bl	14f42 <SEGGER_RTT_Init>

	return 0;
}
   14f50:	2000      	movs	r0, #0
   14f52:	bd08      	pop	{r3, pc}

00014f54 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   14f54:	b160      	cbz	r0, 14f70 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   14f56:	68c3      	ldr	r3, [r0, #12]
   14f58:	785a      	ldrb	r2, [r3, #1]
   14f5a:	f012 0f01 	tst.w	r2, #1
   14f5e:	d003      	beq.n	14f68 <z_device_is_ready+0x14>
   14f60:	781b      	ldrb	r3, [r3, #0]
   14f62:	b11b      	cbz	r3, 14f6c <z_device_is_ready+0x18>
   14f64:	2000      	movs	r0, #0
   14f66:	4770      	bx	lr
   14f68:	2000      	movs	r0, #0
   14f6a:	4770      	bx	lr
   14f6c:	2001      	movs	r0, #1
   14f6e:	4770      	bx	lr
		return false;
   14f70:	2000      	movs	r0, #0
}
   14f72:	4770      	bx	lr

00014f74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f76:	4605      	mov	r5, r0
   14f78:	460e      	mov	r6, r1
	__asm__ volatile(
   14f7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   14f7e:	f3ef 8711 	mrs	r7, BASEPRI
   14f82:	f383 8812 	msr	BASEPRI_MAX, r3
   14f86:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   14f8a:	f7fc fa59 	bl	11440 <z_impl_z_current_get>
   14f8e:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   14f90:	4631      	mov	r1, r6
   14f92:	4628      	mov	r0, r5
   14f94:	f7ff f88f 	bl	140b6 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14f98:	f387 8811 	msr	BASEPRI, r7
   14f9c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14fa0:	4620      	mov	r0, r4
   14fa2:	f7f7 fa93 	bl	c4cc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   14fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014fa8 <z_early_memset>:
{
   14fa8:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   14faa:	f7fd fe5d 	bl	12c68 <memset>
}
   14fae:	bd08      	pop	{r3, pc}

00014fb0 <z_early_memcpy>:
{
   14fb0:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   14fb2:	f7fd fe2a 	bl	12c0a <memcpy>
}
   14fb6:	bd08      	pop	{r3, pc}

00014fb8 <k_heap_init>:
{
   14fb8:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   14fba:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   14fbe:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   14fc0:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   14fc2:	f7fd f8d6 	bl	12172 <sys_heap_init>
}
   14fc6:	bd10      	pop	{r4, pc}

00014fc8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   14fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fcc:	b085      	sub	sp, #20
   14fce:	4607      	mov	r7, r0
   14fd0:	9103      	str	r1, [sp, #12]
   14fd2:	4692      	mov	sl, r2
   14fd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14fd6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   14fd8:	4628      	mov	r0, r5
   14fda:	4621      	mov	r1, r4
   14fdc:	f000 fcd0 	bl	15980 <sys_clock_timeout_end_calc>
   14fe0:	4606      	mov	r6, r0
   14fe2:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   14fe4:	f1b4 3fff 	cmp.w	r4, #4294967295
   14fe8:	bf08      	it	eq
   14fea:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   14fee:	d00d      	beq.n	1500c <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   14ff0:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   14ff4:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ff8:	f3ef 8511 	mrs	r5, BASEPRI
   14ffc:	f383 8812 	msr	BASEPRI_MAX, r3
   15000:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   15004:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   15008:	4644      	mov	r4, r8

	while (ret == NULL) {
   1500a:	e014      	b.n	15036 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1500c:	f04f 36ff 	mov.w	r6, #4294967295
   15010:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   15014:	e7ec      	b.n	14ff0 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   15016:	9000      	str	r0, [sp, #0]
   15018:	9101      	str	r1, [sp, #4]
   1501a:	f107 020c 	add.w	r2, r7, #12
   1501e:	4629      	mov	r1, r5
   15020:	4658      	mov	r0, fp
   15022:	f7fc f843 	bl	110ac <z_pend_curr>
   15026:	f04f 0340 	mov.w	r3, #64	; 0x40
   1502a:	f3ef 8511 	mrs	r5, BASEPRI
   1502e:	f383 8812 	msr	BASEPRI_MAX, r3
   15032:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   15036:	b9ac      	cbnz	r4, 15064 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   15038:	4652      	mov	r2, sl
   1503a:	9903      	ldr	r1, [sp, #12]
   1503c:	4638      	mov	r0, r7
   1503e:	f7fd f822 	bl	12086 <sys_heap_aligned_alloc>
   15042:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   15044:	f7fc fb6e 	bl	11724 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   15048:	b964      	cbnz	r4, 15064 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   1504a:	1a30      	subs	r0, r6, r0
   1504c:	eb69 0101 	sbc.w	r1, r9, r1
   15050:	2801      	cmp	r0, #1
   15052:	f171 0300 	sbcs.w	r3, r1, #0
   15056:	db05      	blt.n	15064 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   15058:	f1b8 0f00 	cmp.w	r8, #0
   1505c:	d1db      	bne.n	15016 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   1505e:	f04f 0801 	mov.w	r8, #1
   15062:	e7d8      	b.n	15016 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   15064:	f385 8811 	msr	BASEPRI, r5
   15068:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1506c:	4620      	mov	r0, r4
   1506e:	b005      	add	sp, #20
   15070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015074 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   15074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15076:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   15078:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   1507c:	f04f 0340 	mov.w	r3, #64	; 0x40
   15080:	f3ef 8511 	mrs	r5, BASEPRI
   15084:	f383 8812 	msr	BASEPRI_MAX, r3
   15088:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1508c:	f7fc ffb7 	bl	11ffe <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   15090:	f104 000c 	add.w	r0, r4, #12
   15094:	f000 fbbb 	bl	1580e <z_unpend_all>
   15098:	b920      	cbnz	r0, 150a4 <k_heap_free+0x30>
	__asm__ volatile(
   1509a:	f385 8811 	msr	BASEPRI, r5
   1509e:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   150a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   150a4:	4629      	mov	r1, r5
   150a6:	4638      	mov	r0, r7
   150a8:	f7fb feb2 	bl	10e10 <z_reschedule>
   150ac:	e7f9      	b.n	150a2 <k_heap_free+0x2e>

000150ae <setup_thread_stack>:
{
   150ae:	b410      	push	{r4}
   150b0:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   150b2:	3207      	adds	r2, #7
   150b4:	f022 0207 	bic.w	r2, r2, #7
   150b8:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   150bc:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   150c0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   150c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   150c8:	2200      	movs	r2, #0
   150ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   150ce:	4408      	add	r0, r1
   150d0:	bc10      	pop	{r4}
   150d2:	4770      	bx	lr

000150d4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   150d4:	f3ef 8005 	mrs	r0, IPSR
}
   150d8:	3800      	subs	r0, #0
   150da:	bf18      	it	ne
   150dc:	2001      	movne	r0, #1
   150de:	4770      	bx	lr

000150e0 <z_impl_k_thread_start>:
{
   150e0:	b508      	push	{r3, lr}
	z_sched_start(thread);
   150e2:	f7fb ffa9 	bl	11038 <z_sched_start>
}
   150e6:	bd08      	pop	{r3, pc}

000150e8 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   150e8:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   150ea:	2400      	movs	r4, #0
   150ec:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   150ee:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   150f0:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   150f2:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   150f4:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   150f6:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   150f8:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   150fa:	bc10      	pop	{r4}
   150fc:	4770      	bx	lr

000150fe <z_impl_k_thread_create>:
{
   150fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   15100:	b087      	sub	sp, #28
   15102:	4604      	mov	r4, r0
   15104:	9e12      	ldr	r6, [sp, #72]	; 0x48
   15106:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15108:	2700      	movs	r7, #0
   1510a:	9705      	str	r7, [sp, #20]
   1510c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1510e:	9704      	str	r7, [sp, #16]
   15110:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   15112:	9703      	str	r7, [sp, #12]
   15114:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   15116:	9702      	str	r7, [sp, #8]
   15118:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1511a:	9701      	str	r7, [sp, #4]
   1511c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1511e:	9700      	str	r7, [sp, #0]
   15120:	f7fb fa9e 	bl	10660 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   15124:	f1b5 3fff 	cmp.w	r5, #4294967295
   15128:	bf08      	it	eq
   1512a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1512e:	d102      	bne.n	15136 <z_impl_k_thread_create+0x38>
}
   15130:	4620      	mov	r0, r4
   15132:	b007      	add	sp, #28
   15134:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   15136:	4632      	mov	r2, r6
   15138:	462b      	mov	r3, r5
   1513a:	4620      	mov	r0, r4
   1513c:	f7fb fa82 	bl	10644 <schedule_new_thread>
   15140:	e7f6      	b.n	15130 <z_impl_k_thread_create+0x32>

00015142 <z_pm_save_idle_exit>:
{
   15142:	b508      	push	{r3, lr}
	pm_system_resume();
   15144:	f7f6 fd34 	bl	bbb0 <pm_system_resume>
	sys_clock_idle_exit();
   15148:	f7fe ff74 	bl	14034 <sys_clock_idle_exit>
}
   1514c:	bd08      	pop	{r3, pc}

0001514e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1514e:	4288      	cmp	r0, r1
   15150:	da00      	bge.n	15154 <new_prio_for_inheritance+0x6>
   15152:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15154:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   15158:	db01      	blt.n	1515e <new_prio_for_inheritance+0x10>
   1515a:	4608      	mov	r0, r1
   1515c:	4770      	bx	lr
   1515e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   15162:	4770      	bx	lr

00015164 <adjust_owner_prio>:
{
   15164:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   15166:	6880      	ldr	r0, [r0, #8]
   15168:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1516c:	428b      	cmp	r3, r1
   1516e:	d101      	bne.n	15174 <adjust_owner_prio+0x10>
	return false;
   15170:	2000      	movs	r0, #0
}
   15172:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   15174:	f7fb ffb6 	bl	110e4 <z_set_prio>
   15178:	e7fb      	b.n	15172 <adjust_owner_prio+0xe>

0001517a <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1517a:	680b      	ldr	r3, [r1, #0]
   1517c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15180:	600b      	str	r3, [r1, #0]
	return list->tail;
   15182:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   15184:	b132      	cbz	r2, 15194 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15186:	6813      	ldr	r3, [r2, #0]
   15188:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1518c:	430b      	orrs	r3, r1
   1518e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15190:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   15192:	4770      	bx	lr
	list->tail = node;
   15194:	6041      	str	r1, [r0, #4]
	list->head = node;
   15196:	6001      	str	r1, [r0, #0]
}
   15198:	4770      	bx	lr

0001519a <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   1519a:	b508      	push	{r3, lr}
   1519c:	b191      	cbz	r1, 151c4 <sys_sflist_insert+0x2a>
   1519e:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   151a0:	680b      	ldr	r3, [r1, #0]
   151a2:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   151a6:	2b03      	cmp	r3, #3
   151a8:	d918      	bls.n	151dc <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   151aa:	6813      	ldr	r3, [r2, #0]
   151ac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   151b0:	430b      	orrs	r3, r1
   151b2:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   151b4:	f8dc 3000 	ldr.w	r3, [ip]
   151b8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   151bc:	4313      	orrs	r3, r2
   151be:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   151c2:	bd08      	pop	{r3, pc}
	return list->head;
   151c4:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   151c6:	6813      	ldr	r3, [r2, #0]
   151c8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   151cc:	430b      	orrs	r3, r1
   151ce:	6013      	str	r3, [r2, #0]
	list->head = node;
   151d0:	6002      	str	r2, [r0, #0]
	return list->tail;
   151d2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   151d4:	2b00      	cmp	r3, #0
   151d6:	d1f4      	bne.n	151c2 <sys_sflist_insert+0x28>
	list->tail = node;
   151d8:	6042      	str	r2, [r0, #4]
}
   151da:	e7f2      	b.n	151c2 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   151dc:	4611      	mov	r1, r2
   151de:	f7ff ffcc 	bl	1517a <sys_sflist_append>
   151e2:	e7ee      	b.n	151c2 <sys_sflist_insert+0x28>

000151e4 <prepare_thread_to_run>:
{
   151e4:	b508      	push	{r3, lr}
   151e6:	2200      	movs	r2, #0
   151e8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   151ec:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   151ee:	f000 fa36 	bl	1565e <z_ready_thread>
}
   151f2:	bd08      	pop	{r3, pc}

000151f4 <queue_insert>:
{
   151f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   151f8:	4604      	mov	r4, r0
   151fa:	460e      	mov	r6, r1
   151fc:	4615      	mov	r5, r2
   151fe:	461f      	mov	r7, r3
   15200:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15204:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   15208:	f04f 0240 	mov.w	r2, #64	; 0x40
   1520c:	f3ef 8911 	mrs	r9, BASEPRI
   15210:	f382 8812 	msr	BASEPRI_MAX, r2
   15214:	f3bf 8f6f 	isb	sy
   15218:	46ca      	mov	sl, r9
	if (is_append) {
   1521a:	b103      	cbz	r3, 1521e <queue_insert+0x2a>
	return list->tail;
   1521c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1521e:	4640      	mov	r0, r8
   15220:	f000 fad3 	bl	157ca <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   15224:	b998      	cbnz	r0, 1524e <queue_insert+0x5a>
	if (alloc) {
   15226:	b9df      	cbnz	r7, 15260 <queue_insert+0x6c>
	node->next_and_flags = flags;
   15228:	2300      	movs	r3, #0
   1522a:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   1522c:	462a      	mov	r2, r5
   1522e:	4631      	mov	r1, r6
   15230:	4620      	mov	r0, r4
   15232:	f7ff ffb2 	bl	1519a <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   15236:	2104      	movs	r1, #4
   15238:	f104 0010 	add.w	r0, r4, #16
   1523c:	f000 fd70 	bl	15d20 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   15240:	4649      	mov	r1, r9
   15242:	4640      	mov	r0, r8
   15244:	f7fb fde4 	bl	10e10 <z_reschedule>
	return 0;
   15248:	2000      	movs	r0, #0
}
   1524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   1524e:	4629      	mov	r1, r5
   15250:	f7ff ffc8 	bl	151e4 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   15254:	4649      	mov	r1, r9
   15256:	4640      	mov	r0, r8
   15258:	f7fb fdda 	bl	10e10 <z_reschedule>
		return 0;
   1525c:	2000      	movs	r0, #0
   1525e:	e7f4      	b.n	1524a <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   15260:	2108      	movs	r1, #8
   15262:	2000      	movs	r0, #0
   15264:	f7fc fbb6 	bl	119d4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   15268:	b120      	cbz	r0, 15274 <queue_insert+0x80>
		anode->data = data;
   1526a:	6045      	str	r5, [r0, #4]
   1526c:	2201      	movs	r2, #1
   1526e:	6002      	str	r2, [r0, #0]
		data = anode;
   15270:	4605      	mov	r5, r0
   15272:	e7db      	b.n	1522c <queue_insert+0x38>
	__asm__ volatile(
   15274:	f38a 8811 	msr	BASEPRI, sl
   15278:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1527c:	f06f 000b 	mvn.w	r0, #11
   15280:	e7e3      	b.n	1524a <queue_insert+0x56>

00015282 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   15282:	b160      	cbz	r0, 1529e <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15284:	6803      	ldr	r3, [r0, #0]
   15286:	f013 0f03 	tst.w	r3, #3
   1528a:	d008      	beq.n	1529e <z_queue_node_peek+0x1c>
{
   1528c:	b510      	push	{r4, lr}
		ret = anode->data;
   1528e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   15290:	b909      	cbnz	r1, 15296 <z_queue_node_peek+0x14>
		ret = anode->data;
   15292:	4620      	mov	r0, r4
}
   15294:	bd10      	pop	{r4, pc}
			k_free(anode);
   15296:	f000 fd6b 	bl	15d70 <k_free>
		ret = anode->data;
   1529a:	4620      	mov	r0, r4
   1529c:	e7fa      	b.n	15294 <z_queue_node_peek+0x12>
}
   1529e:	4770      	bx	lr

000152a0 <z_impl_k_queue_init>:
	list->head = NULL;
   152a0:	2300      	movs	r3, #0
   152a2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   152a4:	6043      	str	r3, [r0, #4]
   152a6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   152aa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   152ac:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   152ae:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   152b2:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   152b4:	6143      	str	r3, [r0, #20]
}
   152b6:	4770      	bx	lr

000152b8 <k_queue_append>:
{
   152b8:	b500      	push	{lr}
   152ba:	b083      	sub	sp, #12
   152bc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   152be:	2301      	movs	r3, #1
   152c0:	9300      	str	r3, [sp, #0]
   152c2:	2300      	movs	r3, #0
   152c4:	4619      	mov	r1, r3
   152c6:	f7ff ff95 	bl	151f4 <queue_insert>
}
   152ca:	b003      	add	sp, #12
   152cc:	f85d fb04 	ldr.w	pc, [sp], #4

000152d0 <k_queue_prepend>:
{
   152d0:	b500      	push	{lr}
   152d2:	b083      	sub	sp, #12
   152d4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   152d6:	2100      	movs	r1, #0
   152d8:	9100      	str	r1, [sp, #0]
   152da:	460b      	mov	r3, r1
   152dc:	f7ff ff8a 	bl	151f4 <queue_insert>
}
   152e0:	b003      	add	sp, #12
   152e2:	f85d fb04 	ldr.w	pc, [sp], #4

000152e6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   152e6:	b15a      	cbz	r2, 15300 <z_impl_k_sem_init+0x1a>
   152e8:	428a      	cmp	r2, r1
   152ea:	d30c      	bcc.n	15306 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   152ec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   152ee:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   152f0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   152f2:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   152f4:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   152f8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   152fa:	6143      	str	r3, [r0, #20]
	return 0;
   152fc:	2000      	movs	r0, #0
   152fe:	4770      	bx	lr
		return -EINVAL;
   15300:	f06f 0015 	mvn.w	r0, #21
   15304:	4770      	bx	lr
   15306:	f06f 0015 	mvn.w	r0, #21
}
   1530a:	4770      	bx	lr

0001530c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1530c:	460b      	mov	r3, r1
   1530e:	b139      	cbz	r1, 15320 <sys_slist_remove+0x14>
	return node->next;
   15310:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   15312:	6019      	str	r1, [r3, #0]
	return list->tail;
   15314:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   15316:	428a      	cmp	r2, r1
   15318:	d009      	beq.n	1532e <sys_slist_remove+0x22>
	parent->next = child;
   1531a:	2300      	movs	r3, #0
   1531c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1531e:	4770      	bx	lr
	return node->next;
   15320:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   15322:	6003      	str	r3, [r0, #0]
	return list->tail;
   15324:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   15326:	428a      	cmp	r2, r1
   15328:	d1f7      	bne.n	1531a <sys_slist_remove+0xe>
	list->tail = node;
   1532a:	6043      	str	r3, [r0, #4]
}
   1532c:	e7f5      	b.n	1531a <sys_slist_remove+0xe>
	list->tail = node;
   1532e:	6043      	str	r3, [r0, #4]
}
   15330:	e7f3      	b.n	1531a <sys_slist_remove+0xe>

00015332 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15332:	b508      	push	{r3, lr}
   15334:	460a      	mov	r2, r1
	return list->head;
   15336:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15338:	2100      	movs	r1, #0
   1533a:	e001      	b.n	15340 <sys_slist_find_and_remove+0xe>
   1533c:	4619      	mov	r1, r3
   1533e:	681b      	ldr	r3, [r3, #0]
   15340:	b12b      	cbz	r3, 1534e <sys_slist_find_and_remove+0x1c>
   15342:	4293      	cmp	r3, r2
   15344:	d1fa      	bne.n	1533c <sys_slist_find_and_remove+0xa>
   15346:	f7ff ffe1 	bl	1530c <sys_slist_remove>
   1534a:	2001      	movs	r0, #1
   1534c:	e000      	b.n	15350 <sys_slist_find_and_remove+0x1e>
   1534e:	2000      	movs	r0, #0
   15350:	bd08      	pop	{r3, pc}

00015352 <queue_remove_locked>:
{
   15352:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   15354:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   15356:	f023 0204 	bic.w	r2, r3, #4
   1535a:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1535c:	f013 0f04 	tst.w	r3, #4
   15360:	d100      	bne.n	15364 <queue_remove_locked+0x12>
}
   15362:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   15364:	30b8      	adds	r0, #184	; 0xb8
   15366:	f7ff ffe4 	bl	15332 <sys_slist_find_and_remove>
}
   1536a:	e7fa      	b.n	15362 <queue_remove_locked+0x10>

0001536c <cancel_async_locked>:
{
   1536c:	b510      	push	{r4, lr}
   1536e:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   15370:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15372:	f013 0f02 	tst.w	r3, #2
   15376:	d009      	beq.n	1538c <cancel_async_locked+0x20>
	return *flagp;
   15378:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1537a:	f013 000f 	ands.w	r0, r3, #15
   1537e:	d004      	beq.n	1538a <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   15380:	f043 0202 	orr.w	r2, r3, #2
   15384:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   15386:	f040 0002 	orr.w	r0, r0, #2
}
   1538a:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   1538c:	4601      	mov	r1, r0
   1538e:	6880      	ldr	r0, [r0, #8]
   15390:	f7ff ffdf 	bl	15352 <queue_remove_locked>
   15394:	e7f0      	b.n	15378 <cancel_async_locked+0xc>

00015396 <notify_queue_locked>:
	if (queue != NULL) {
   15396:	b130      	cbz	r0, 153a6 <notify_queue_locked+0x10>
{
   15398:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1539a:	2200      	movs	r2, #0
   1539c:	4611      	mov	r1, r2
   1539e:	30c0      	adds	r0, #192	; 0xc0
   153a0:	f000 fa49 	bl	15836 <z_sched_wake>
}
   153a4:	bd08      	pop	{r3, pc}
	bool rv = false;
   153a6:	2000      	movs	r0, #0
}
   153a8:	4770      	bx	lr

000153aa <submit_to_queue_locked>:
{
   153aa:	b570      	push	{r4, r5, r6, lr}
   153ac:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   153ae:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   153b0:	f013 0f02 	tst.w	r3, #2
   153b4:	d122      	bne.n	153fc <submit_to_queue_locked+0x52>
   153b6:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   153b8:	f013 0f04 	tst.w	r3, #4
   153bc:	d123      	bne.n	15406 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   153be:	680b      	ldr	r3, [r1, #0]
   153c0:	b1ab      	cbz	r3, 153ee <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   153c2:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   153c4:	f013 0f01 	tst.w	r3, #1
   153c8:	d014      	beq.n	153f4 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   153ca:	68a3      	ldr	r3, [r4, #8]
   153cc:	602b      	str	r3, [r5, #0]
			ret = 2;
   153ce:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   153d0:	4621      	mov	r1, r4
   153d2:	6828      	ldr	r0, [r5, #0]
   153d4:	f7fb fb60 	bl	10a98 <queue_submit_locked>
		if (rc < 0) {
   153d8:	2800      	cmp	r0, #0
   153da:	db11      	blt.n	15400 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   153dc:	68e3      	ldr	r3, [r4, #12]
   153de:	f043 0304 	orr.w	r3, r3, #4
   153e2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   153e4:	682b      	ldr	r3, [r5, #0]
   153e6:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   153e8:	b136      	cbz	r6, 153f8 <submit_to_queue_locked+0x4e>
   153ea:	4630      	mov	r0, r6
	return ret;
   153ec:	e00a      	b.n	15404 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   153ee:	6883      	ldr	r3, [r0, #8]
   153f0:	600b      	str	r3, [r1, #0]
   153f2:	e7e6      	b.n	153c2 <submit_to_queue_locked+0x18>
		ret = 1;
   153f4:	2601      	movs	r6, #1
   153f6:	e7eb      	b.n	153d0 <submit_to_queue_locked+0x26>
   153f8:	4630      	mov	r0, r6
   153fa:	e001      	b.n	15400 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   153fc:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   15400:	2300      	movs	r3, #0
   15402:	602b      	str	r3, [r5, #0]
}
   15404:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   15406:	2000      	movs	r0, #0
   15408:	e7fa      	b.n	15400 <submit_to_queue_locked+0x56>

0001540a <work_timeout>:
{
   1540a:	b510      	push	{r4, lr}
   1540c:	b082      	sub	sp, #8
   1540e:	4603      	mov	r3, r0
	__asm__ volatile(
   15410:	f04f 0240 	mov.w	r2, #64	; 0x40
   15414:	f3ef 8411 	mrs	r4, BASEPRI
   15418:	f382 8812 	msr	BASEPRI_MAX, r2
   1541c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   15420:	2200      	movs	r2, #0
   15422:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   15424:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   15428:	f022 0108 	bic.w	r1, r2, #8
   1542c:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   15430:	f012 0f08 	tst.w	r2, #8
   15434:	d105      	bne.n	15442 <work_timeout+0x38>
	__asm__ volatile(
   15436:	f384 8811 	msr	BASEPRI, r4
   1543a:	f3bf 8f6f 	isb	sy
}
   1543e:	b002      	add	sp, #8
   15440:	bd10      	pop	{r4, pc}
   15442:	3810      	subs	r0, #16
		queue = dw->queue;
   15444:	699b      	ldr	r3, [r3, #24]
   15446:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   15448:	a901      	add	r1, sp, #4
   1544a:	f7ff ffae 	bl	153aa <submit_to_queue_locked>
   1544e:	e7f2      	b.n	15436 <work_timeout+0x2c>

00015450 <z_reschedule_unlocked>:
{
   15450:	b508      	push	{r3, lr}
	__asm__ volatile(
   15452:	f04f 0340 	mov.w	r3, #64	; 0x40
   15456:	f3ef 8011 	mrs	r0, BASEPRI
   1545a:	f383 8812 	msr	BASEPRI_MAX, r3
   1545e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15462:	f000 f8a7 	bl	155b4 <z_reschedule_irqlock>
}
   15466:	bd08      	pop	{r3, pc}

00015468 <unschedule_locked>:
{
   15468:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   1546a:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   1546c:	f023 0208 	bic.w	r2, r3, #8
   15470:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   15472:	f013 0f08 	tst.w	r3, #8
   15476:	d101      	bne.n	1547c <unschedule_locked+0x14>
	bool ret = false;
   15478:	2000      	movs	r0, #0
}
   1547a:	bd08      	pop	{r3, pc}
		ret = z_abort_timeout(&dwork->timeout) == 0;
   1547c:	3010      	adds	r0, #16
   1547e:	f000 fa3c 	bl	158fa <z_abort_timeout>
   15482:	fab0 f080 	clz	r0, r0
   15486:	0940      	lsrs	r0, r0, #5
   15488:	e7f7      	b.n	1547a <unschedule_locked+0x12>

0001548a <cancel_delayable_async_locked>:
{
   1548a:	b510      	push	{r4, lr}
   1548c:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   1548e:	f7ff ffeb 	bl	15468 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   15492:	4620      	mov	r0, r4
   15494:	f7ff ff6a 	bl	1536c <cancel_async_locked>
}
   15498:	bd10      	pop	{r4, pc}

0001549a <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1549a:	2300      	movs	r3, #0
   1549c:	6003      	str	r3, [r0, #0]
   1549e:	6043      	str	r3, [r0, #4]
   154a0:	6083      	str	r3, [r0, #8]
   154a2:	60c3      	str	r3, [r0, #12]
   154a4:	6041      	str	r1, [r0, #4]
}
   154a6:	4770      	bx	lr

000154a8 <z_work_submit_to_queue>:
{
   154a8:	b510      	push	{r4, lr}
   154aa:	b082      	sub	sp, #8
   154ac:	9001      	str	r0, [sp, #4]
   154ae:	4608      	mov	r0, r1
   154b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   154b4:	f3ef 8411 	mrs	r4, BASEPRI
   154b8:	f383 8812 	msr	BASEPRI_MAX, r3
   154bc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   154c0:	a901      	add	r1, sp, #4
   154c2:	f7ff ff72 	bl	153aa <submit_to_queue_locked>
	__asm__ volatile(
   154c6:	f384 8811 	msr	BASEPRI, r4
   154ca:	f3bf 8f6f 	isb	sy
}
   154ce:	b002      	add	sp, #8
   154d0:	bd10      	pop	{r4, pc}

000154d2 <k_work_submit_to_queue>:
{
   154d2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   154d4:	f7ff ffe8 	bl	154a8 <z_work_submit_to_queue>
	if (ret > 0) {
   154d8:	1e04      	subs	r4, r0, #0
   154da:	dc01      	bgt.n	154e0 <k_work_submit_to_queue+0xe>
}
   154dc:	4620      	mov	r0, r4
   154de:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   154e0:	f7ff ffb6 	bl	15450 <z_reschedule_unlocked>
	return ret;
   154e4:	e7fa      	b.n	154dc <k_work_submit_to_queue+0xa>

000154e6 <k_work_queue_init>:
{
   154e6:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   154e8:	22d8      	movs	r2, #216	; 0xd8
   154ea:	2100      	movs	r1, #0
   154ec:	f7fd fbbc 	bl	12c68 <memset>
}
   154f0:	bd08      	pop	{r3, pc}

000154f2 <k_work_init_delayable>:
{
   154f2:	b538      	push	{r3, r4, r5, lr}
   154f4:	4604      	mov	r4, r0
   154f6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   154f8:	2230      	movs	r2, #48	; 0x30
   154fa:	2100      	movs	r1, #0
   154fc:	f7fd fbb4 	bl	12c68 <memset>
   15500:	6065      	str	r5, [r4, #4]
   15502:	f44f 7380 	mov.w	r3, #256	; 0x100
   15506:	60e3      	str	r3, [r4, #12]
}
   15508:	bd38      	pop	{r3, r4, r5, pc}

0001550a <k_work_reschedule_for_queue>:
{
   1550a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1550c:	b083      	sub	sp, #12
   1550e:	9001      	str	r0, [sp, #4]
   15510:	460c      	mov	r4, r1
   15512:	4616      	mov	r6, r2
   15514:	461d      	mov	r5, r3
	__asm__ volatile(
   15516:	f04f 0340 	mov.w	r3, #64	; 0x40
   1551a:	f3ef 8711 	mrs	r7, BASEPRI
   1551e:	f383 8812 	msr	BASEPRI_MAX, r3
   15522:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   15526:	4608      	mov	r0, r1
   15528:	f7ff ff9e 	bl	15468 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   1552c:	4632      	mov	r2, r6
   1552e:	462b      	mov	r3, r5
   15530:	4621      	mov	r1, r4
   15532:	a801      	add	r0, sp, #4
   15534:	f7fb fb96 	bl	10c64 <schedule_for_queue_locked>
	__asm__ volatile(
   15538:	f387 8811 	msr	BASEPRI, r7
   1553c:	f3bf 8f6f 	isb	sy
}
   15540:	b003      	add	sp, #12
   15542:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015544 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   15544:	b510      	push	{r4, lr}
	__asm__ volatile(
   15546:	f04f 0340 	mov.w	r3, #64	; 0x40
   1554a:	f3ef 8411 	mrs	r4, BASEPRI
   1554e:	f383 8812 	msr	BASEPRI_MAX, r3
   15552:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   15556:	f7ff ff98 	bl	1548a <cancel_delayable_async_locked>
	__asm__ volatile(
   1555a:	f384 8811 	msr	BASEPRI, r4
   1555e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   15562:	bd10      	pop	{r4, pc}

00015564 <thread_active_elsewhere>:
}
   15564:	2000      	movs	r0, #0
   15566:	4770      	bx	lr

00015568 <pended_on_thread>:
}
   15568:	6880      	ldr	r0, [r0, #8]
   1556a:	4770      	bx	lr

0001556c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1556c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15570:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15574:	4283      	cmp	r3, r0
   15576:	d001      	beq.n	1557c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   15578:	1ac0      	subs	r0, r0, r3
   1557a:	4770      	bx	lr
	return 0;
   1557c:	2000      	movs	r0, #0
}
   1557e:	4770      	bx	lr

00015580 <z_unpend_thread_no_timeout>:
{
   15580:	b538      	push	{r3, r4, r5, lr}
   15582:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15584:	2300      	movs	r3, #0
	__asm__ volatile(
   15586:	f04f 0240 	mov.w	r2, #64	; 0x40
   1558a:	f3ef 8511 	mrs	r5, BASEPRI
   1558e:	f382 8812 	msr	BASEPRI_MAX, r2
   15592:	f3bf 8f6f 	isb	sy
   15596:	e004      	b.n	155a2 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   15598:	f385 8811 	msr	BASEPRI, r5
   1559c:	f3bf 8f6f 	isb	sy
   155a0:	2301      	movs	r3, #1
   155a2:	b933      	cbnz	r3, 155b2 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   155a4:	68a3      	ldr	r3, [r4, #8]
   155a6:	2b00      	cmp	r3, #0
   155a8:	d0f6      	beq.n	15598 <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   155aa:	4620      	mov	r0, r4
   155ac:	f000 f824 	bl	155f8 <unpend_thread_no_timeout>
   155b0:	e7f2      	b.n	15598 <z_unpend_thread_no_timeout+0x18>
}
   155b2:	bd38      	pop	{r3, r4, r5, pc}

000155b4 <z_reschedule_irqlock>:
{
   155b4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   155b6:	4603      	mov	r3, r0
   155b8:	b928      	cbnz	r0, 155c6 <z_reschedule_irqlock+0x12>
   155ba:	f3ef 8205 	mrs	r2, IPSR
   155be:	b912      	cbnz	r2, 155c6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   155c0:	f7f6 fc82 	bl	bec8 <arch_swap>
	return ret;
   155c4:	e003      	b.n	155ce <z_reschedule_irqlock+0x1a>
   155c6:	f383 8811 	msr	BASEPRI, r3
   155ca:	f3bf 8f6f 	isb	sy
}
   155ce:	bd08      	pop	{r3, pc}

000155d0 <z_reschedule_unlocked>:
{
   155d0:	b508      	push	{r3, lr}
	__asm__ volatile(
   155d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   155d6:	f3ef 8011 	mrs	r0, BASEPRI
   155da:	f383 8812 	msr	BASEPRI_MAX, r3
   155de:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   155e2:	f7ff ffe7 	bl	155b4 <z_reschedule_irqlock>
}
   155e6:	bd08      	pop	{r3, pc}

000155e8 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   155e8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   155ea:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   155ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   155ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   155f0:	2300      	movs	r3, #0
   155f2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   155f4:	604b      	str	r3, [r1, #4]
}
   155f6:	4770      	bx	lr

000155f8 <unpend_thread_no_timeout>:
{
   155f8:	b510      	push	{r4, lr}
   155fa:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   155fc:	f7ff ffb4 	bl	15568 <pended_on_thread>
   15600:	4621      	mov	r1, r4
   15602:	f7ff fff1 	bl	155e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15606:	7b63      	ldrb	r3, [r4, #13]
   15608:	f023 0302 	bic.w	r3, r3, #2
   1560c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1560e:	2300      	movs	r3, #0
   15610:	60a3      	str	r3, [r4, #8]
}
   15612:	bd10      	pop	{r4, pc}

00015614 <z_unpend_thread>:
{
   15614:	b538      	push	{r3, r4, r5, lr}
   15616:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15618:	2300      	movs	r3, #0
   1561a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1561e:	f3ef 8511 	mrs	r5, BASEPRI
   15622:	f382 8812 	msr	BASEPRI_MAX, r2
   15626:	f3bf 8f6f 	isb	sy
   1562a:	e004      	b.n	15636 <z_unpend_thread+0x22>
	__asm__ volatile(
   1562c:	f385 8811 	msr	BASEPRI, r5
   15630:	f3bf 8f6f 	isb	sy
   15634:	2301      	movs	r3, #1
   15636:	b933      	cbnz	r3, 15646 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   15638:	68a3      	ldr	r3, [r4, #8]
   1563a:	2b00      	cmp	r3, #0
   1563c:	d0f6      	beq.n	1562c <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   1563e:	4620      	mov	r0, r4
   15640:	f7ff ffda 	bl	155f8 <unpend_thread_no_timeout>
   15644:	e7f2      	b.n	1562c <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   15646:	f104 0018 	add.w	r0, r4, #24
   1564a:	f000 f956 	bl	158fa <z_abort_timeout>
}
   1564e:	bd38      	pop	{r3, r4, r5, pc}

00015650 <z_priq_dumb_best>:
{
   15650:	4603      	mov	r3, r0
	return list->head == list;
   15652:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15654:	4283      	cmp	r3, r0
   15656:	d000      	beq.n	1565a <z_priq_dumb_best+0xa>
}
   15658:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1565a:	2000      	movs	r0, #0
	return thread;
   1565c:	e7fc      	b.n	15658 <z_priq_dumb_best+0x8>

0001565e <z_ready_thread>:
{
   1565e:	b538      	push	{r3, r4, r5, lr}
   15660:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15662:	2300      	movs	r3, #0
	__asm__ volatile(
   15664:	f04f 0240 	mov.w	r2, #64	; 0x40
   15668:	f3ef 8511 	mrs	r5, BASEPRI
   1566c:	f382 8812 	msr	BASEPRI_MAX, r2
   15670:	f3bf 8f6f 	isb	sy
   15674:	e004      	b.n	15680 <z_ready_thread+0x22>
	__asm__ volatile(
   15676:	f385 8811 	msr	BASEPRI, r5
   1567a:	f3bf 8f6f 	isb	sy
   1567e:	2301      	movs	r3, #1
   15680:	b943      	cbnz	r3, 15694 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15682:	4620      	mov	r0, r4
   15684:	f7ff ff6e 	bl	15564 <thread_active_elsewhere>
   15688:	2800      	cmp	r0, #0
   1568a:	d1f4      	bne.n	15676 <z_ready_thread+0x18>
			ready_thread(thread);
   1568c:	4620      	mov	r0, r4
   1568e:	f7fb fc97 	bl	10fc0 <ready_thread>
   15692:	e7f0      	b.n	15676 <z_ready_thread+0x18>
}
   15694:	bd38      	pop	{r3, r4, r5, pc}

00015696 <z_sched_wake_thread>:
{
   15696:	b570      	push	{r4, r5, r6, lr}
   15698:	4604      	mov	r4, r0
   1569a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   1569c:	2300      	movs	r3, #0
	__asm__ volatile(
   1569e:	f04f 0240 	mov.w	r2, #64	; 0x40
   156a2:	f3ef 8511 	mrs	r5, BASEPRI
   156a6:	f382 8812 	msr	BASEPRI_MAX, r2
   156aa:	f3bf 8f6f 	isb	sy
   156ae:	e007      	b.n	156c0 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   156b0:	4620      	mov	r0, r4
   156b2:	f7fb fc85 	bl	10fc0 <ready_thread>
	__asm__ volatile(
   156b6:	f385 8811 	msr	BASEPRI, r5
   156ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   156be:	2301      	movs	r3, #1
   156c0:	b993      	cbnz	r3, 156e8 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   156c2:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   156c4:	f013 0f28 	tst.w	r3, #40	; 0x28
   156c8:	d1f5      	bne.n	156b6 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   156ca:	68a3      	ldr	r3, [r4, #8]
   156cc:	b113      	cbz	r3, 156d4 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   156ce:	4620      	mov	r0, r4
   156d0:	f7ff ff92 	bl	155f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   156d4:	7b63      	ldrb	r3, [r4, #13]
   156d6:	f023 0204 	bic.w	r2, r3, #4
   156da:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   156dc:	2e00      	cmp	r6, #0
   156de:	d0e7      	beq.n	156b0 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   156e0:	f023 0314 	bic.w	r3, r3, #20
   156e4:	7363      	strb	r3, [r4, #13]
}
   156e6:	e7e3      	b.n	156b0 <z_sched_wake_thread+0x1a>
}
   156e8:	bd70      	pop	{r4, r5, r6, pc}

000156ea <z_thread_timeout>:
{
   156ea:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   156ec:	2101      	movs	r1, #1
   156ee:	3818      	subs	r0, #24
   156f0:	f7ff ffd1 	bl	15696 <z_sched_wake_thread>
}
   156f4:	bd08      	pop	{r3, pc}

000156f6 <unpend_all>:
{
   156f6:	b538      	push	{r3, r4, r5, lr}
   156f8:	4605      	mov	r5, r0
	return list->head == list;
   156fa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   156fc:	42a5      	cmp	r5, r4
   156fe:	d00e      	beq.n	1571e <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15700:	b16c      	cbz	r4, 1571e <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   15702:	4620      	mov	r0, r4
   15704:	f7ff ff78 	bl	155f8 <unpend_thread_no_timeout>
   15708:	f104 0018 	add.w	r0, r4, #24
   1570c:	f000 f8f5 	bl	158fa <z_abort_timeout>
   15710:	2300      	movs	r3, #0
   15712:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   15716:	4620      	mov	r0, r4
   15718:	f7fb fc52 	bl	10fc0 <ready_thread>
   1571c:	e7ed      	b.n	156fa <unpend_all+0x4>
}
   1571e:	bd38      	pop	{r3, r4, r5, pc}

00015720 <add_to_waitq_locked>:
{
   15720:	b570      	push	{r4, r5, r6, lr}
   15722:	4605      	mov	r5, r0
   15724:	460e      	mov	r6, r1
	unready_thread(thread);
   15726:	f7fb fca5 	bl	11074 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1572a:	7b6b      	ldrb	r3, [r5, #13]
   1572c:	f043 0302 	orr.w	r3, r3, #2
   15730:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   15732:	b1fe      	cbz	r6, 15774 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   15734:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15736:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15738:	42a6      	cmp	r6, r4
   1573a:	d108      	bne.n	1574e <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1573c:	2400      	movs	r4, #0
   1573e:	e006      	b.n	1574e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   15740:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15742:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15744:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15746:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15748:	6065      	str	r5, [r4, #4]
}
   1574a:	e013      	b.n	15774 <add_to_waitq_locked+0x54>
   1574c:	2400      	movs	r4, #0
   1574e:	b164      	cbz	r4, 1576a <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15750:	4621      	mov	r1, r4
   15752:	4628      	mov	r0, r5
   15754:	f7ff ff0a 	bl	1556c <z_sched_prio_cmp>
   15758:	2800      	cmp	r0, #0
   1575a:	dcf1      	bgt.n	15740 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1575c:	2c00      	cmp	r4, #0
   1575e:	d0f6      	beq.n	1574e <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   15760:	6873      	ldr	r3, [r6, #4]
   15762:	429c      	cmp	r4, r3
   15764:	d0f2      	beq.n	1574c <add_to_waitq_locked+0x2c>
   15766:	6824      	ldr	r4, [r4, #0]
   15768:	e7f1      	b.n	1574e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   1576a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1576c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1576e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15770:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15772:	6075      	str	r5, [r6, #4]
}
   15774:	bd70      	pop	{r4, r5, r6, pc}

00015776 <pend_locked>:
{
   15776:	b570      	push	{r4, r5, r6, lr}
   15778:	4604      	mov	r4, r0
   1577a:	4616      	mov	r6, r2
   1577c:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   1577e:	f7ff ffcf 	bl	15720 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   15782:	4632      	mov	r2, r6
   15784:	462b      	mov	r3, r5
   15786:	4620      	mov	r0, r4
   15788:	f7fb fb0a 	bl	10da0 <add_thread_timeout>
}
   1578c:	bd70      	pop	{r4, r5, r6, pc}

0001578e <z_unpend1_no_timeout>:
{
   1578e:	b570      	push	{r4, r5, r6, lr}
   15790:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   15792:	2300      	movs	r3, #0
	__asm__ volatile(
   15794:	f04f 0240 	mov.w	r2, #64	; 0x40
   15798:	f3ef 8511 	mrs	r5, BASEPRI
   1579c:	f382 8812 	msr	BASEPRI_MAX, r2
   157a0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   157a4:	461c      	mov	r4, r3
   157a6:	e004      	b.n	157b2 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   157a8:	f385 8811 	msr	BASEPRI, r5
   157ac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   157b0:	2301      	movs	r3, #1
   157b2:	b943      	cbnz	r3, 157c6 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   157b4:	4630      	mov	r0, r6
   157b6:	f7ff ff4b 	bl	15650 <z_priq_dumb_best>
		if (thread != NULL) {
   157ba:	4604      	mov	r4, r0
   157bc:	2800      	cmp	r0, #0
   157be:	d0f3      	beq.n	157a8 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   157c0:	f7ff ff1a 	bl	155f8 <unpend_thread_no_timeout>
   157c4:	e7f0      	b.n	157a8 <z_unpend1_no_timeout+0x1a>
}
   157c6:	4620      	mov	r0, r4
   157c8:	bd70      	pop	{r4, r5, r6, pc}

000157ca <z_unpend_first_thread>:
{
   157ca:	b570      	push	{r4, r5, r6, lr}
   157cc:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   157ce:	2300      	movs	r3, #0
	__asm__ volatile(
   157d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   157d4:	f3ef 8511 	mrs	r5, BASEPRI
   157d8:	f382 8812 	msr	BASEPRI_MAX, r2
   157dc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   157e0:	461c      	mov	r4, r3
   157e2:	e004      	b.n	157ee <z_unpend_first_thread+0x24>
	__asm__ volatile(
   157e4:	f385 8811 	msr	BASEPRI, r5
   157e8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   157ec:	2301      	movs	r3, #1
   157ee:	b963      	cbnz	r3, 1580a <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   157f0:	4630      	mov	r0, r6
   157f2:	f7ff ff2d 	bl	15650 <z_priq_dumb_best>
		if (thread != NULL) {
   157f6:	4604      	mov	r4, r0
   157f8:	2800      	cmp	r0, #0
   157fa:	d0f3      	beq.n	157e4 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   157fc:	f7ff fefc 	bl	155f8 <unpend_thread_no_timeout>
   15800:	f104 0018 	add.w	r0, r4, #24
   15804:	f000 f879 	bl	158fa <z_abort_timeout>
   15808:	e7ec      	b.n	157e4 <z_unpend_first_thread+0x1a>
}
   1580a:	4620      	mov	r0, r4
   1580c:	bd70      	pop	{r4, r5, r6, pc}

0001580e <z_unpend_all>:
{
   1580e:	b538      	push	{r3, r4, r5, lr}
   15810:	4605      	mov	r5, r0
	int need_sched = 0;
   15812:	2000      	movs	r0, #0
	return list->head == list;
   15814:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15816:	42a5      	cmp	r5, r4
   15818:	d008      	beq.n	1582c <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1581a:	b13c      	cbz	r4, 1582c <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   1581c:	4620      	mov	r0, r4
   1581e:	f7ff fef9 	bl	15614 <z_unpend_thread>
		z_ready_thread(thread);
   15822:	4620      	mov	r0, r4
   15824:	f7ff ff1b 	bl	1565e <z_ready_thread>
		need_sched = 1;
   15828:	2001      	movs	r0, #1
   1582a:	e7f3      	b.n	15814 <z_unpend_all+0x6>
}
   1582c:	bd38      	pop	{r3, r4, r5, pc}

0001582e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1582e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   15830:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   15832:	6083      	str	r3, [r0, #8]
}
   15834:	4770      	bx	lr

00015836 <z_sched_wake>:
{
   15836:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1583a:	4606      	mov	r6, r0
   1583c:	4688      	mov	r8, r1
   1583e:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   15840:	2300      	movs	r3, #0
	__asm__ volatile(
   15842:	f04f 0240 	mov.w	r2, #64	; 0x40
   15846:	f3ef 8511 	mrs	r5, BASEPRI
   1584a:	f382 8812 	msr	BASEPRI_MAX, r2
   1584e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   15852:	4699      	mov	r9, r3
   15854:	e004      	b.n	15860 <z_sched_wake+0x2a>
	__asm__ volatile(
   15856:	f385 8811 	msr	BASEPRI, r5
   1585a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1585e:	2301      	movs	r3, #1
   15860:	b9a3      	cbnz	r3, 1588c <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   15862:	4630      	mov	r0, r6
   15864:	f7ff fef4 	bl	15650 <z_priq_dumb_best>
		if (thread != NULL) {
   15868:	4604      	mov	r4, r0
   1586a:	2800      	cmp	r0, #0
   1586c:	d0f3      	beq.n	15856 <z_sched_wake+0x20>
   1586e:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   15872:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   15874:	f7ff fec0 	bl	155f8 <unpend_thread_no_timeout>
   15878:	f104 0018 	add.w	r0, r4, #24
   1587c:	f000 f83d 	bl	158fa <z_abort_timeout>
			ready_thread(thread);
   15880:	4620      	mov	r0, r4
   15882:	f7fb fb9d 	bl	10fc0 <ready_thread>
			ret = true;
   15886:	f04f 0901 	mov.w	r9, #1
   1588a:	e7e4      	b.n	15856 <z_sched_wake+0x20>
}
   1588c:	4648      	mov	r0, r9
   1588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015892 <remove_timeout>:
{
   15892:	b510      	push	{r4, lr}
   15894:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   15896:	f7fb fe49 	bl	1152c <next>
   1589a:	b148      	cbz	r0, 158b0 <remove_timeout+0x1e>
   1589c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1589e:	6903      	ldr	r3, [r0, #16]
   158a0:	6941      	ldr	r1, [r0, #20]
   158a2:	6920      	ldr	r0, [r4, #16]
   158a4:	181b      	adds	r3, r3, r0
   158a6:	6960      	ldr	r0, [r4, #20]
   158a8:	eb41 0100 	adc.w	r1, r1, r0
   158ac:	6113      	str	r3, [r2, #16]
   158ae:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   158b0:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   158b2:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   158b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   158b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   158b8:	2300      	movs	r3, #0
   158ba:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   158bc:	6063      	str	r3, [r4, #4]
}
   158be:	bd10      	pop	{r4, pc}

000158c0 <next_timeout>:
{
   158c0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   158c2:	f7fb fe29 	bl	11518 <first>
   158c6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   158c8:	f7fb fe3c 	bl	11544 <elapsed>
	if ((to == NULL) ||
   158cc:	b17c      	cbz	r4, 158ee <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   158ce:	6923      	ldr	r3, [r4, #16]
   158d0:	6962      	ldr	r2, [r4, #20]
   158d2:	1a1b      	subs	r3, r3, r0
   158d4:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   158d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   158dc:	f172 0100 	sbcs.w	r1, r2, #0
   158e0:	da08      	bge.n	158f4 <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   158e2:	2a00      	cmp	r2, #0
   158e4:	db01      	blt.n	158ea <next_timeout+0x2a>
   158e6:	4618      	mov	r0, r3
}
   158e8:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   158ea:	2300      	movs	r3, #0
   158ec:	e7fb      	b.n	158e6 <next_timeout+0x26>
		ret = MAX_WAIT;
   158ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   158f2:	e7f9      	b.n	158e8 <next_timeout+0x28>
   158f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   158f8:	e7f6      	b.n	158e8 <next_timeout+0x28>

000158fa <z_abort_timeout>:
{
   158fa:	b570      	push	{r4, r5, r6, lr}
   158fc:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   158fe:	2300      	movs	r3, #0
	__asm__ volatile(
   15900:	f04f 0240 	mov.w	r2, #64	; 0x40
   15904:	f3ef 8611 	mrs	r6, BASEPRI
   15908:	f382 8812 	msr	BASEPRI_MAX, r2
   1590c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   15910:	f06f 0015 	mvn.w	r0, #21
   15914:	e004      	b.n	15920 <z_abort_timeout+0x26>
	__asm__ volatile(
   15916:	f386 8811 	msr	BASEPRI, r6
   1591a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1591e:	2301      	movs	r3, #1
   15920:	461d      	mov	r5, r3
   15922:	b93b      	cbnz	r3, 15934 <z_abort_timeout+0x3a>
	return node->next != NULL;
   15924:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   15926:	2b00      	cmp	r3, #0
   15928:	d0f5      	beq.n	15916 <z_abort_timeout+0x1c>
			remove_timeout(to);
   1592a:	4620      	mov	r0, r4
   1592c:	f7ff ffb1 	bl	15892 <remove_timeout>
			ret = 0;
   15930:	4628      	mov	r0, r5
   15932:	e7f0      	b.n	15916 <z_abort_timeout+0x1c>
}
   15934:	bd70      	pop	{r4, r5, r6, pc}

00015936 <z_get_next_timeout_expiry>:
{
   15936:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   15938:	2300      	movs	r3, #0
	__asm__ volatile(
   1593a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1593e:	f3ef 8411 	mrs	r4, BASEPRI
   15942:	f382 8812 	msr	BASEPRI_MAX, r2
   15946:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1594a:	f04f 30ff 	mov.w	r0, #4294967295
   1594e:	e006      	b.n	1595e <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   15950:	f7ff ffb6 	bl	158c0 <next_timeout>
	__asm__ volatile(
   15954:	f384 8811 	msr	BASEPRI, r4
   15958:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1595c:	2301      	movs	r3, #1
   1595e:	2b00      	cmp	r3, #0
   15960:	d0f6      	beq.n	15950 <z_get_next_timeout_expiry+0x1a>
}
   15962:	bd10      	pop	{r4, pc}

00015964 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   15964:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   15966:	f7fb fedd 	bl	11724 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1596a:	bd08      	pop	{r3, pc}

0001596c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1596c:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   1596e:	f7fb fed9 	bl	11724 <sys_clock_tick_get>
}
   15972:	bd08      	pop	{r3, pc}

00015974 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15974:	b900      	cbnz	r0, 15978 <z_impl_k_busy_wait+0x4>
   15976:	4770      	bx	lr
{
   15978:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1597a:	f7f6 fe7d 	bl	c678 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1597e:	bd08      	pop	{r3, pc}

00015980 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   15980:	b538      	push	{r3, r4, r5, lr}
   15982:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15984:	f1b1 3fff 	cmp.w	r1, #4294967295
   15988:	bf08      	it	eq
   1598a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1598e:	d020      	beq.n	159d2 <sys_clock_timeout_end_calc+0x52>
   15990:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15992:	ea51 0300 	orrs.w	r3, r1, r0
   15996:	d009      	beq.n	159ac <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   15998:	f06f 0301 	mvn.w	r3, #1
   1599c:	1a18      	subs	r0, r3, r0
   1599e:	f04f 33ff 	mov.w	r3, #4294967295
   159a2:	eb63 0101 	sbc.w	r1, r3, r1
   159a6:	2900      	cmp	r1, #0
   159a8:	db03      	blt.n	159b2 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   159aa:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   159ac:	f7fb feba 	bl	11724 <sys_clock_tick_get>
   159b0:	e7fb      	b.n	159aa <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   159b2:	f7fb feb7 	bl	11724 <sys_clock_tick_get>
   159b6:	4603      	mov	r3, r0
   159b8:	462a      	mov	r2, r5
   159ba:	46a4      	mov	ip, r4
   159bc:	2d01      	cmp	r5, #1
   159be:	f174 0400 	sbcs.w	r4, r4, #0
   159c2:	da02      	bge.n	159ca <sys_clock_timeout_end_calc+0x4a>
   159c4:	2201      	movs	r2, #1
   159c6:	f04f 0c00 	mov.w	ip, #0
   159ca:	1898      	adds	r0, r3, r2
   159cc:	eb41 010c 	adc.w	r1, r1, ip
   159d0:	e7eb      	b.n	159aa <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   159d2:	f04f 30ff 	mov.w	r0, #4294967295
   159d6:	4601      	mov	r1, r0
   159d8:	e7e7      	b.n	159aa <sys_clock_timeout_end_calc+0x2a>

000159da <z_reschedule_unlocked>:
{
   159da:	b508      	push	{r3, lr}
	__asm__ volatile(
   159dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   159e0:	f3ef 8011 	mrs	r0, BASEPRI
   159e4:	f383 8812 	msr	BASEPRI_MAX, r3
   159e8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   159ec:	f7ff fde2 	bl	155b4 <z_reschedule_irqlock>
}
   159f0:	bd08      	pop	{r3, pc}

000159f2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   159f2:	b510      	push	{r4, lr}
   159f4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   159f6:	f7ff ff80 	bl	158fa <z_abort_timeout>

	if (inactive) {
   159fa:	b960      	cbnz	r0, 15a16 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   159fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   159fe:	b10b      	cbz	r3, 15a04 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   15a00:	4620      	mov	r0, r4
   15a02:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   15a04:	f104 0018 	add.w	r0, r4, #24
   15a08:	f7ff fec1 	bl	1578e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   15a0c:	b118      	cbz	r0, 15a16 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   15a0e:	f7ff fe26 	bl	1565e <z_ready_thread>
			z_reschedule_unlocked();
   15a12:	f7ff ffe2 	bl	159da <z_reschedule_unlocked>
		}
	}
}
   15a16:	bd10      	pop	{r4, pc}

00015a18 <is_condition_met>:
	switch (event->type) {
   15a18:	7b43      	ldrb	r3, [r0, #13]
   15a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a1e:	3b01      	subs	r3, #1
   15a20:	2b07      	cmp	r3, #7
   15a22:	d826      	bhi.n	15a72 <is_condition_met+0x5a>
   15a24:	e8df f003 	tbb	[pc, r3]
   15a28:	0d250414 	.word	0x0d250414
   15a2c:	1c252525 	.word	0x1c252525
		if (k_sem_count_get(event->sem) > 0U) {
   15a30:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   15a32:	689b      	ldr	r3, [r3, #8]
   15a34:	b90b      	cbnz	r3, 15a3a <is_condition_met+0x22>
	return false;
   15a36:	2000      	movs	r0, #0
   15a38:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   15a3a:	2302      	movs	r3, #2
   15a3c:	600b      	str	r3, [r1, #0]
			return true;
   15a3e:	2001      	movs	r0, #1
   15a40:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   15a42:	6903      	ldr	r3, [r0, #16]
	return list->head;
   15a44:	681b      	ldr	r3, [r3, #0]
   15a46:	b1b3      	cbz	r3, 15a76 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   15a48:	2304      	movs	r3, #4
   15a4a:	600b      	str	r3, [r1, #0]
			return true;
   15a4c:	2001      	movs	r0, #1
   15a4e:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   15a50:	6903      	ldr	r3, [r0, #16]
   15a52:	689b      	ldr	r3, [r3, #8]
   15a54:	b90b      	cbnz	r3, 15a5a <is_condition_met+0x42>
	return false;
   15a56:	2000      	movs	r0, #0
   15a58:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   15a5a:	2001      	movs	r0, #1
   15a5c:	6008      	str	r0, [r1, #0]
			return true;
   15a5e:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   15a60:	6903      	ldr	r3, [r0, #16]
   15a62:	6a1b      	ldr	r3, [r3, #32]
   15a64:	b90b      	cbnz	r3, 15a6a <is_condition_met+0x52>
	return false;
   15a66:	2000      	movs	r0, #0
}
   15a68:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   15a6a:	2310      	movs	r3, #16
   15a6c:	600b      	str	r3, [r1, #0]
			return true;
   15a6e:	2001      	movs	r0, #1
   15a70:	4770      	bx	lr
	switch (event->type) {
   15a72:	2000      	movs	r0, #0
   15a74:	4770      	bx	lr
	return false;
   15a76:	2000      	movs	r0, #0
   15a78:	4770      	bx	lr

00015a7a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   15a7a:	b108      	cbz	r0, 15a80 <poller_thread+0x6>
   15a7c:	3860      	subs	r0, #96	; 0x60
   15a7e:	4770      	bx	lr
}
   15a80:	4770      	bx	lr

00015a82 <clear_event_registration>:
	event->poller = NULL;
   15a82:	2300      	movs	r3, #0
   15a84:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   15a86:	7b43      	ldrb	r3, [r0, #13]
   15a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a8c:	2b08      	cmp	r3, #8
   15a8e:	d80e      	bhi.n	15aae <clear_event_registration+0x2c>
   15a90:	f44f 728b 	mov.w	r2, #278	; 0x116
   15a94:	fa22 f303 	lsr.w	r3, r2, r3
   15a98:	f013 0f01 	tst.w	r3, #1
   15a9c:	d007      	beq.n	15aae <clear_event_registration+0x2c>
   15a9e:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   15aa0:	b12b      	cbz	r3, 15aae <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   15aa2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   15aa4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15aa6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15aa8:	2300      	movs	r3, #0
   15aaa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15aac:	6043      	str	r3, [r0, #4]
}
   15aae:	4770      	bx	lr

00015ab0 <clear_event_registrations>:
{
   15ab0:	b570      	push	{r4, r5, r6, lr}
   15ab2:	4606      	mov	r6, r0
   15ab4:	4614      	mov	r4, r2
	while (num_events--) {
   15ab6:	e012      	b.n	15ade <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   15ab8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   15abc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   15ac0:	f7ff ffdf 	bl	15a82 <clear_event_registration>
	__asm__ volatile(
   15ac4:	f384 8811 	msr	BASEPRI, r4
   15ac8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15acc:	f04f 0340 	mov.w	r3, #64	; 0x40
   15ad0:	f3ef 8411 	mrs	r4, BASEPRI
   15ad4:	f383 8812 	msr	BASEPRI_MAX, r3
   15ad8:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   15adc:	4629      	mov	r1, r5
   15ade:	1e4d      	subs	r5, r1, #1
   15ae0:	2900      	cmp	r1, #0
   15ae2:	d1e9      	bne.n	15ab8 <clear_event_registrations+0x8>
}
   15ae4:	bd70      	pop	{r4, r5, r6, pc}

00015ae6 <add_event>:
{
   15ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15aea:	4605      	mov	r5, r0
   15aec:	460e      	mov	r6, r1
	return list->head == list;
   15aee:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15af0:	4298      	cmp	r0, r3
   15af2:	d015      	beq.n	15b20 <add_event+0x3a>
   15af4:	4614      	mov	r4, r2
   15af6:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   15af8:	b193      	cbz	r3, 15b20 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   15afa:	6898      	ldr	r0, [r3, #8]
   15afc:	f7ff ffbd 	bl	15a7a <poller_thread>
   15b00:	4680      	mov	r8, r0
   15b02:	4620      	mov	r0, r4
   15b04:	f7ff ffb9 	bl	15a7a <poller_thread>
   15b08:	4607      	mov	r7, r0
   15b0a:	4601      	mov	r1, r0
   15b0c:	4640      	mov	r0, r8
   15b0e:	f7ff fd2d 	bl	1556c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   15b12:	2800      	cmp	r0, #0
   15b14:	dc04      	bgt.n	15b20 <add_event+0x3a>
	return list->head == list;
   15b16:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15b18:	42a5      	cmp	r5, r4
   15b1a:	d10f      	bne.n	15b3c <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15b1c:	2400      	movs	r4, #0
   15b1e:	e00d      	b.n	15b3c <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   15b20:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   15b22:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   15b24:	6073      	str	r3, [r6, #4]
	tail->next = node;
   15b26:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15b28:	606e      	str	r6, [r5, #4]
}
   15b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   15b2e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15b30:	6073      	str	r3, [r6, #4]
	node->next = successor;
   15b32:	6034      	str	r4, [r6, #0]
	prev->next = node;
   15b34:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   15b36:	6066      	str	r6, [r4, #4]
			return;
   15b38:	e7f7      	b.n	15b2a <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15b3a:	2400      	movs	r4, #0
   15b3c:	b19c      	cbz	r4, 15b66 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   15b3e:	68a0      	ldr	r0, [r4, #8]
   15b40:	f7ff ff9b 	bl	15a7a <poller_thread>
   15b44:	4601      	mov	r1, r0
   15b46:	4638      	mov	r0, r7
   15b48:	f7ff fd10 	bl	1556c <z_sched_prio_cmp>
   15b4c:	2800      	cmp	r0, #0
   15b4e:	dcee      	bgt.n	15b2e <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15b50:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   15b52:	686b      	ldr	r3, [r5, #4]
   15b54:	429c      	cmp	r4, r3
   15b56:	d0f0      	beq.n	15b3a <add_event+0x54>
   15b58:	6824      	ldr	r4, [r4, #0]
   15b5a:	2c00      	cmp	r4, #0
   15b5c:	d0ee      	beq.n	15b3c <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15b5e:	2a00      	cmp	r2, #0
   15b60:	d1ec      	bne.n	15b3c <add_event+0x56>
   15b62:	4614      	mov	r4, r2
   15b64:	e7ea      	b.n	15b3c <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   15b66:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   15b68:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   15b6a:	6073      	str	r3, [r6, #4]
	tail->next = node;
   15b6c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15b6e:	606e      	str	r6, [r5, #4]
}
   15b70:	e7db      	b.n	15b2a <add_event+0x44>

00015b72 <register_event>:
{
   15b72:	b538      	push	{r3, r4, r5, lr}
   15b74:	4604      	mov	r4, r0
   15b76:	460d      	mov	r5, r1
	switch (event->type) {
   15b78:	7b43      	ldrb	r3, [r0, #13]
   15b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b7e:	3b01      	subs	r3, #1
   15b80:	2b07      	cmp	r3, #7
   15b82:	d80b      	bhi.n	15b9c <register_event+0x2a>
   15b84:	e8df f003 	tbb	[pc, r3]
   15b88:	0c0a0413 	.word	0x0c0a0413
   15b8c:	190a0a0a 	.word	0x190a0a0a
		add_event(&event->sem->poll_events, event, poller);
   15b90:	6900      	ldr	r0, [r0, #16]
   15b92:	460a      	mov	r2, r1
   15b94:	4621      	mov	r1, r4
   15b96:	3010      	adds	r0, #16
   15b98:	f7ff ffa5 	bl	15ae6 <add_event>
	event->poller = poller;
   15b9c:	60a5      	str	r5, [r4, #8]
}
   15b9e:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   15ba0:	6900      	ldr	r0, [r0, #16]
   15ba2:	460a      	mov	r2, r1
   15ba4:	4621      	mov	r1, r4
   15ba6:	3010      	adds	r0, #16
   15ba8:	f7ff ff9d 	bl	15ae6 <add_event>
		break;
   15bac:	e7f6      	b.n	15b9c <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   15bae:	460a      	mov	r2, r1
   15bb0:	4601      	mov	r1, r0
   15bb2:	6900      	ldr	r0, [r0, #16]
   15bb4:	f7ff ff97 	bl	15ae6 <add_event>
		break;
   15bb8:	e7f0      	b.n	15b9c <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   15bba:	6900      	ldr	r0, [r0, #16]
   15bbc:	460a      	mov	r2, r1
   15bbe:	4621      	mov	r1, r4
   15bc0:	3024      	adds	r0, #36	; 0x24
   15bc2:	f7ff ff90 	bl	15ae6 <add_event>
		break;
   15bc6:	e7e9      	b.n	15b9c <register_event+0x2a>

00015bc8 <register_events>:
{
   15bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bcc:	b083      	sub	sp, #12
   15bce:	4680      	mov	r8, r0
   15bd0:	460f      	mov	r7, r1
   15bd2:	4691      	mov	r9, r2
   15bd4:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   15bd6:	2500      	movs	r5, #0
	int events_registered = 0;
   15bd8:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   15bda:	e00a      	b.n	15bf2 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   15bdc:	f1ba 0f00 	cmp.w	sl, #0
   15be0:	d102      	bne.n	15be8 <register_events+0x20>
   15be2:	f899 3000 	ldrb.w	r3, [r9]
   15be6:	bb2b      	cbnz	r3, 15c34 <register_events+0x6c>
	__asm__ volatile(
   15be8:	f386 8811 	msr	BASEPRI, r6
   15bec:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   15bf0:	3501      	adds	r5, #1
   15bf2:	42bd      	cmp	r5, r7
   15bf4:	da25      	bge.n	15c42 <register_events+0x7a>
	__asm__ volatile(
   15bf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   15bfa:	f3ef 8611 	mrs	r6, BASEPRI
   15bfe:	f383 8812 	msr	BASEPRI_MAX, r3
   15c02:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   15c06:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   15c0a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   15c0e:	a901      	add	r1, sp, #4
   15c10:	4620      	mov	r0, r4
   15c12:	f7ff ff01 	bl	15a18 <is_condition_met>
   15c16:	2800      	cmp	r0, #0
   15c18:	d0e0      	beq.n	15bdc <register_events+0x14>
	event->poller = NULL;
   15c1a:	2100      	movs	r1, #0
   15c1c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   15c1e:	68e3      	ldr	r3, [r4, #12]
   15c20:	f3c3 3286 	ubfx	r2, r3, #14, #7
   15c24:	9801      	ldr	r0, [sp, #4]
   15c26:	4302      	orrs	r2, r0
   15c28:	f362 3394 	bfi	r3, r2, #14, #7
   15c2c:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   15c2e:	f889 1000 	strb.w	r1, [r9]
   15c32:	e7d9      	b.n	15be8 <register_events+0x20>
			register_event(&events[ii], poller);
   15c34:	4649      	mov	r1, r9
   15c36:	4620      	mov	r0, r4
   15c38:	f7ff ff9b 	bl	15b72 <register_event>
			events_registered += 1;
   15c3c:	f10b 0b01 	add.w	fp, fp, #1
   15c40:	e7d2      	b.n	15be8 <register_events+0x20>
}
   15c42:	4658      	mov	r0, fp
   15c44:	b003      	add	sp, #12
   15c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c4a <signal_poller>:
{
   15c4a:	b538      	push	{r3, r4, r5, lr}
   15c4c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   15c4e:	6880      	ldr	r0, [r0, #8]
   15c50:	f7ff ff13 	bl	15a7a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   15c54:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   15c56:	f013 0f02 	tst.w	r3, #2
   15c5a:	d025      	beq.n	15ca8 <signal_poller+0x5e>
   15c5c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   15c5e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   15c60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   15c62:	f1b3 3fff 	cmp.w	r3, #4294967295
   15c66:	bf08      	it	eq
   15c68:	f112 0f02 	cmneq.w	r2, #2
   15c6c:	d01e      	beq.n	15cac <signal_poller+0x62>
	z_unpend_thread(thread);
   15c6e:	f7ff fcd1 	bl	15614 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   15c72:	2d08      	cmp	r5, #8
   15c74:	d00a      	beq.n	15c8c <signal_poller+0x42>
   15c76:	2300      	movs	r3, #0
   15c78:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   15c7c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15c7e:	f013 0f1f 	tst.w	r3, #31
   15c82:	d108      	bne.n	15c96 <signal_poller+0x4c>
	return node->next != NULL;
   15c84:	69a3      	ldr	r3, [r4, #24]
   15c86:	b123      	cbz	r3, 15c92 <signal_poller+0x48>
   15c88:	2300      	movs	r3, #0
   15c8a:	e005      	b.n	15c98 <signal_poller+0x4e>
   15c8c:	f06f 0303 	mvn.w	r3, #3
   15c90:	e7f2      	b.n	15c78 <signal_poller+0x2e>
   15c92:	2301      	movs	r3, #1
   15c94:	e000      	b.n	15c98 <signal_poller+0x4e>
   15c96:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   15c98:	b90b      	cbnz	r3, 15c9e <signal_poller+0x54>
		return 0;
   15c9a:	2000      	movs	r0, #0
   15c9c:	e005      	b.n	15caa <signal_poller+0x60>
	z_ready_thread(thread);
   15c9e:	4620      	mov	r0, r4
   15ca0:	f7ff fcdd 	bl	1565e <z_ready_thread>
	return 0;
   15ca4:	2000      	movs	r0, #0
   15ca6:	e000      	b.n	15caa <signal_poller+0x60>
		return 0;
   15ca8:	2000      	movs	r0, #0
}
   15caa:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   15cac:	f06f 000a 	mvn.w	r0, #10
   15cb0:	e7fb      	b.n	15caa <signal_poller+0x60>

00015cb2 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   15cb2:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   15cb4:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   15cb6:	7823      	ldrb	r3, [r4, #0]
   15cb8:	b173      	cbz	r3, 15cd8 <signal_triggered_work+0x26>
   15cba:	f854 5c04 	ldr.w	r5, [r4, #-4]
   15cbe:	b15d      	cbz	r5, 15cd8 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   15cc0:	f1a4 0614 	sub.w	r6, r4, #20
   15cc4:	f104 0014 	add.w	r0, r4, #20
   15cc8:	f7ff fe17 	bl	158fa <z_abort_timeout>
		twork->poll_result = 0;
   15ccc:	2300      	movs	r3, #0
   15cce:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   15cd0:	4631      	mov	r1, r6
   15cd2:	4628      	mov	r0, r5
   15cd4:	f7ff fbe8 	bl	154a8 <z_work_submit_to_queue>
	}

	return 0;
}
   15cd8:	2000      	movs	r0, #0
   15cda:	bd70      	pop	{r4, r5, r6, pc}

00015cdc <signal_poll_event>:
{
   15cdc:	b570      	push	{r4, r5, r6, lr}
   15cde:	4604      	mov	r4, r0
   15ce0:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   15ce2:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   15ce4:	b1d6      	cbz	r6, 15d1c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   15ce6:	7873      	ldrb	r3, [r6, #1]
   15ce8:	2b01      	cmp	r3, #1
   15cea:	d00d      	beq.n	15d08 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   15cec:	2b02      	cmp	r3, #2
   15cee:	d012      	beq.n	15d16 <signal_poll_event+0x3a>
		poller->is_polling = false;
   15cf0:	2000      	movs	r0, #0
   15cf2:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   15cf4:	2300      	movs	r3, #0
   15cf6:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   15cf8:	68e3      	ldr	r3, [r4, #12]
   15cfa:	f3c3 3286 	ubfx	r2, r3, #14, #7
   15cfe:	432a      	orrs	r2, r5
   15d00:	f362 3394 	bfi	r3, r2, #14, #7
   15d04:	60e3      	str	r3, [r4, #12]
}
   15d06:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   15d08:	f7ff ff9f 	bl	15c4a <signal_poller>
		poller->is_polling = false;
   15d0c:	2300      	movs	r3, #0
   15d0e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   15d10:	4298      	cmp	r0, r3
   15d12:	daef      	bge.n	15cf4 <signal_poll_event+0x18>
   15d14:	e7f7      	b.n	15d06 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   15d16:	f7ff ffcc 	bl	15cb2 <signal_triggered_work>
   15d1a:	e7f7      	b.n	15d0c <signal_poll_event+0x30>
	int retcode = 0;
   15d1c:	2000      	movs	r0, #0
   15d1e:	e7e9      	b.n	15cf4 <signal_poll_event+0x18>

00015d20 <z_handle_obj_poll_events>:
{
   15d20:	b508      	push	{r3, lr}
   15d22:	4603      	mov	r3, r0
	return list->head == list;
   15d24:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   15d26:	4283      	cmp	r3, r0
   15d28:	d008      	beq.n	15d3c <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   15d2a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   15d2c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   15d2e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15d30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15d32:	2300      	movs	r3, #0
   15d34:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15d36:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   15d38:	f7ff ffd0 	bl	15cdc <signal_poll_event>
}
   15d3c:	bd08      	pop	{r3, pc}

00015d3e <z_heap_aligned_alloc>:
{
   15d3e:	b5d0      	push	{r4, r6, r7, lr}
   15d40:	b082      	sub	sp, #8
   15d42:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   15d44:	2300      	movs	r3, #0
   15d46:	3204      	adds	r2, #4
   15d48:	d20e      	bcs.n	15d68 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   15d4a:	b97b      	cbnz	r3, 15d6c <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   15d4c:	2600      	movs	r6, #0
   15d4e:	2700      	movs	r7, #0
   15d50:	e9cd 6700 	strd	r6, r7, [sp]
   15d54:	f041 0104 	orr.w	r1, r1, #4
   15d58:	4620      	mov	r0, r4
   15d5a:	f7ff f935 	bl	14fc8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   15d5e:	b108      	cbz	r0, 15d64 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   15d60:	f840 4b04 	str.w	r4, [r0], #4
}
   15d64:	b002      	add	sp, #8
   15d66:	bdd0      	pop	{r4, r6, r7, pc}
   15d68:	2301      	movs	r3, #1
   15d6a:	e7ee      	b.n	15d4a <z_heap_aligned_alloc+0xc>
		return NULL;
   15d6c:	2000      	movs	r0, #0
   15d6e:	e7f9      	b.n	15d64 <z_heap_aligned_alloc+0x26>

00015d70 <k_free>:
	if (ptr != NULL) {
   15d70:	b130      	cbz	r0, 15d80 <k_free+0x10>
{
   15d72:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   15d74:	1f01      	subs	r1, r0, #4
   15d76:	f850 0c04 	ldr.w	r0, [r0, #-4]
   15d7a:	f7ff f97b 	bl	15074 <k_heap_free>
}
   15d7e:	bd08      	pop	{r3, pc}
   15d80:	4770      	bx	lr

00015d82 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   15d82:	4770      	bx	lr
