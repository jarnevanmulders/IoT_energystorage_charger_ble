
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	80 3c 00 20 41 b8 00 00 f3 16 01 00 15 b8 00 00     .<. A...........
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	15 b8 00 00 15 b8 00 00 15 b8 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	7d b4 00 00 15 b8 00 00 00 00 00 00 29 b4 00 00     }...........)...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	15 b8 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	2d b5 00 00 9d 1e 01 00 2d b5 00 00 2d b5 00 00     -.......-...-...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	4b 1e 01 00 2d b5 00 00 2d b5 00 00 83 1e 01 00     K...-...-.......
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...
			switch (*fmt) {
  c0:	2d b5 00 00 2d b5 00 00 2d b5 00 00 2d b5 00 00     -...-...-...-...
  d0:	2d b5 00 00 2d b5 00 00 2d b5 00 00                 -...-...-...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f007 ffcc 	bl	8098 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop
     110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     112:	4c14      	ldr	r4, [pc, #80]	; (164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>)
     114:	7a20      	ldrb	r0, [r4, #8]
     116:	f88d 0001 	strb.w	r0, [sp, #1]
     11a:	79e0      	ldrb	r0, [r4, #7]
     11c:	f88d 0000 	strb.w	r0, [sp]
				align = VA_STACK_ALIGN(void *);
     120:	79a0      	ldrb	r0, [r4, #6]
     122:	f8ad 0004 	strh.w	r0, [sp, #4]
			switch (*fmt) {
     126:	7960      	ldrb	r0, [r4, #5]
     128:	f8ad 0002 	strh.w	r0, [sp, #2]
     12c:	4668      	mov	r0, sp
     12e:	f003 f839 	bl	31a4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     132:	b108      	cbz	r0, 138 <__aeabi_idiv0+0x2c>
     134:	21ad      	movs	r1, #173	; 0xad
     136:	e010      	b.n	15a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x10>
     138:	68e0      	ldr	r0, [r4, #12]
     13a:	9002      	str	r0, [sp, #8]
     13c:	a802      	add	r0, sp, #8
     13e:	f003 f847 	bl	31d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     142:	b108      	cbz	r0, 148 <CONFIG_IDLE_STACK_SIZE+0x8>
		buf = (void *) ROUND_UP(buf, align);
     144:	21b1      	movs	r1, #177	; 0xb1
     146:	e008      	b.n	15a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x10>
     148:	4807      	ldr	r0, [pc, #28]	; (168 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1e>)
     14a:	6800      	ldr	r0, [r0, #0]
     14c:	9003      	str	r0, [sp, #12]
     14e:	a803      	add	r0, sp, #12
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	f009 fc24 	bl	999c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     154:	2800      	cmp	r0, #0
     156:	d003      	beq.n	160 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x16>
     158:	21b5      	movs	r1, #181	; 0xb5
     15a:	2003      	movs	r0, #3
     15c:	f000 f91a 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
		if (is_str_arg) {
     160:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     162:	0000      	.short	0x0000
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	20000b78 	.word	0x20000b78
			int v = va_arg(ap, int);
     168:	00000420 	.word	0x00000420

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			}
			buf += sizeof(int);
     170:	4f16      	ldr	r7, [pc, #88]	; (1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>)
     172:	4604      	mov	r4, r0
				arg_idx--;
     174:	4616      	mov	r6, r2
     176:	78f8      	ldrb	r0, [r7, #3]
     178:	460d      	mov	r5, r1
				parsing = false;
     17a:	b178      	cbz	r0, 19c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2f>
     17c:	7c28      	ldrb	r0, [r5, #16]
				continue;
     17e:	b168      	cbz	r0, 19c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2f>
				if (fmt[-1] == 'l') {
     180:	6820      	ldr	r0, [r4, #0]
     182:	2225      	movs	r2, #37	; 0x25
     184:	1cc0      	adds	r0, r0, #3
     186:	f020 0003 	bic.w	r0, r0, #3
					if (fmt[-2] == 'l') {
     18a:	6020      	str	r0, [r4, #0]
     18c:	7c29      	ldrb	r1, [r5, #16]
     18e:	b106      	cbz	r6, 192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
				parsing = false;
     190:	2000      	movs	r0, #0
					if (fmt[-2] == 'l') {
     192:	f000 fcbf 	bl	b14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
						align = VA_STACK_ALIGN(long long);
     196:	6821      	ldr	r1, [r4, #0]
				size = sizeof(void *);
     198:	4408      	add	r0, r1
     19a:	6020      	str	r0, [r4, #0]
					v.ld = va_arg(ap, long double);
     19c:	7d28      	ldrb	r0, [r5, #20]
     19e:	2800      	cmp	r0, #0
     1a0:	d012      	beq.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     1a2:	78f8      	ldrb	r0, [r7, #3]
				buf = (void *) ROUND_UP(buf, align);
     1a4:	2800      	cmp	r0, #0
					v.ld = va_arg(ap, long double);
     1a6:	d00f      	beq.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     1a8:	7c28      	ldrb	r0, [r5, #16]
				buf = (void *) ROUND_UP(buf, align);
     1aa:	2800      	cmp	r0, #0
     1ac:	d00c      	beq.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
				if (buf0 != NULL) {
     1ae:	6820      	ldr	r0, [r4, #0]
					if (BUF_OFFSET + size > len) {
     1b0:	1dc0      	adds	r0, r0, #7
     1b2:	f020 0007 	bic.w	r0, r0, #7
     1b6:	6020      	str	r0, [r4, #0]
     1b8:	7d29      	ldrb	r1, [r5, #20]
						*(long double *)buf = v.ld;
     1ba:	b106      	cbz	r6, 1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1bc:	2000      	movs	r0, #0
				buf += size;
     1be:	f001 f935 	bl	142c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
				parsing = false;
     1c2:	6821      	ldr	r1, [r4, #0]
			switch (*fmt) {
     1c4:	4408      	add	r0, r1
     1c6:	6020      	str	r0, [r4, #0]
     1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (*++fmt == '\0') {
     1cc:	20000040 	.word	0x20000040

000001d0 <sdc_build_revision_get>:
     1d0:	b510      	push	{r4, lr}
			if (!parsing) {
     1d2:	b128      	cbz	r0, 1e0 <sdc_build_revision_get+0x10>
     1d4:	2214      	movs	r2, #20
     1d6:	4904      	ldr	r1, [pc, #16]	; (1e8 <sdc_build_revision_get+0x18>)
     1d8:	f009 ffb2 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
				if (*fmt == '%') {
     1dc:	2000      	movs	r0, #0
					arg_idx++;
     1de:	bd10      	pop	{r4, pc}
     1e0:	f06f 0015 	mvn.w	r0, #21
					parsing = true;
     1e4:	bd10      	pop	{r4, pc}
     1e6:	0000      	.short	0x0000
				align = VA_STACK_ALIGN(size_t);
     1e8:	00000448 	.word	0x00000448

000001ec <sdc_cfg_set>:
     1ec:	b570      	push	{r4, r5, r6, lr}
			switch (*fmt) {
     1ee:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     1f2:	bb88      	cbnz	r0, 258 <CONFIG_FLASH_SIZE+0x58>
				parsing = false;
     1f4:	4c23      	ldr	r4, [pc, #140]	; (284 <CONFIG_FLASH_SIZE+0x84>)
     1f6:	7860      	ldrb	r0, [r4, #1]

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f8:	b108      	cbz	r0, 1fe <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa>
     1fa:	11a8      	asrs	r0, r5, #6
					return -EINVAL;
     1fc:	bd70      	pop	{r4, r5, r6, pc}
     1fe:	b1f9      	cbz	r1, 240 <CONFIG_FLASH_SIZE+0x40>
     200:	f06f 0015 	mvn.w	r0, #21
			long long v = va_arg(ap, long long);
     204:	2a00      	cmp	r2, #0
     206:	d0f9      	beq.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     208:	4b1f      	ldr	r3, [pc, #124]	; (288 <CONFIG_FLASH_SIZE+0x88>)
     20a:	2909      	cmp	r1, #9
     20c:	d234      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	e8df f001 	tbb	[pc, r1]
				}
			}
			buf += sizeof(long long);
     212:	0533      	.short	0x0533
     214:	33180833 	.word	0x33180833
		if (is_str_arg) {
     218:	0024331b 	.word	0x0024331b
		} else if (size == sizeof(int)) {
     21c:	7810      	ldrb	r0, [r2, #0]
			int v = va_arg(ap, int);
     21e:	7018      	strb	r0, [r3, #0]
     220:	e01f      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
			if (buf0 != NULL) {
     222:	7891      	ldrb	r1, [r2, #2]
		} else if (size == sizeof(long long)) {
     224:	2900      	cmp	r1, #0
     226:	d0e9      	beq.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
			long long v = va_arg(ap, long long);
     228:	78d1      	ldrb	r1, [r2, #3]
     22a:	2900      	cmp	r1, #0
     22c:	d0e6      	beq.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     22e:	7811      	ldrb	r1, [r2, #0]
     230:	291b      	cmp	r1, #27
     232:	d3e3      	bcc.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
			if (buf0 != NULL) {
     234:	7851      	ldrb	r1, [r2, #1]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	291b      	cmp	r1, #27
     238:	d3e0      	bcc.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     23a:	6810      	ldr	r0, [r2, #0]
			s = va_arg(ap, char *);
     23c:	f8c3 0005 	str.w	r0, [r3, #5]
     240:	e00f      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     242:	6810      	ldr	r0, [r2, #0]
			if (is_ro && !do_ro) {
     244:	60d8      	str	r0, [r3, #12]
     246:	e00c      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     248:	78e1      	ldrb	r1, [r4, #3]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	b111      	cbz	r1, 252 <CONFIG_FLASH_SIZE+0x52>
     24c:	7811      	ldrb	r1, [r2, #0]
     24e:	2902      	cmp	r1, #2
     250:	d3d4      	bcc.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	7810      	ldrb	r0, [r2, #0]
     254:	7418      	strb	r0, [r3, #16]
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	e004      	b.n	262 <CONFIG_FLASH_SIZE+0x62>
     258:	e00e      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     25a:	8811      	ldrh	r1, [r2, #0]
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	29ff      	cmp	r1, #255	; 0xff
     25e:	d8cd      	bhi.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
				if (buf0 != NULL) {
     260:	7519      	strb	r1, [r3, #20]
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	2201      	movs	r2, #1
     264:	4908      	ldr	r1, [pc, #32]	; (288 <CONFIG_FLASH_SIZE+0x88>)
     266:	2000      	movs	r0, #0
     268:	f008 f866 	bl	8338 <__udivmoddi4+0x2a0>
					str_ptr_arg[s_idx] = arg_idx;
     26c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
					str_ptr_pos[s_idx] = s_ptr_idx;
     270:	db04      	blt.n	27c <CONFIG_FLASH_SIZE+0x7c>
					str_ptr_arg[s_idx] = arg_idx;
     272:	f06f 000b 	mvn.w	r0, #11
					if (is_ro) {
     276:	bd70      	pop	{r4, r5, r6, pc}
     278:	4628      	mov	r0, r5
     27a:	bd70      	pop	{r4, r5, r6, pc}
     27c:	2101      	movs	r1, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	70a1      	strb	r1, [r4, #2]
     280:	bd70      	pop	{r4, r5, r6, pc}
     282:	0000      	.short	0x0000
     284:	20000040 	.word	0x20000040
						s_ro_cnt++;
     288:	20000b78 	.word	0x20000b78

0000028c <sdc_disable>:
					if (BUF_OFFSET + size > len) {
     28c:	b510      	push	{r4, lr}
     28e:	4c07      	ldr	r4, [pc, #28]	; (2ac <sdc_disable+0x20>)
			buf += sizeof(char *);
     290:	7860      	ldrb	r0, [r4, #1]
					if (BUF_OFFSET + size > len) {
     292:	b120      	cbz	r0, 29e <sdc_disable+0x12>
			switch (*fmt) {
     294:	f003 f888 	bl	33a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     298:	7820      	ldrb	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	f007 fe1d 	bl	7ed8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     29e:	f000 fc85 	bl	bac <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
				} else if (is_ro) {
     2a2:	f000 fd5d 	bl	d60 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
					len += 1;
     2a6:	2000      	movs	r0, #0
     2a8:	7060      	strb	r0, [r4, #1]
				} else if (rws_pos_en) {
     2aa:	bd10      	pop	{r4, pc}
					len += 2;
     2ac:	20000040 	.word	0x20000040

000002b0 <sdc_enable>:
				} else if (rws_pos_en) {
     2b0:	b570      	push	{r4, r5, r6, lr}
					len += strlen(s) + 1 + 1;
     2b2:	460c      	mov	r4, r1
     2b4:	0005      	movs	r5, r0
     2b6:	d002      	beq.n	2be <sdc_enable+0xe>
     2b8:	b10c      	cbz	r4, 2be <sdc_enable+0xe>
     2ba:	0760      	lsls	r0, r4, #29
     2bc:	d002      	beq.n	2c4 <sdc_enable+0x14>
     2be:	f06f 0015 	mvn.w	r0, #21
     2c2:	bd70      	pop	{r4, r5, r6, pc}
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	f000 f8e6 	bl	494 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     2c8:	b1a8      	cbz	r0, 2f6 <sdc_enable+0x46>
     2ca:	4628      	mov	r0, r5

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	f007 fdca 	bl	7e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	4d0a      	ldr	r5, [pc, #40]	; (2fc <sdc_enable+0x4c>)
     2d2:	2200      	movs	r2, #0
     2d4:	490a      	ldr	r1, [pc, #40]	; (300 <sdc_enable+0x50>)
     2d6:	7028      	strb	r0, [r5, #0]
     2d8:	4620      	mov	r0, r4
     2da:	f008 f82d 	bl	8338 <__udivmoddi4+0x2a0>
     2de:	f009 fd05 	bl	9cec <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     2e2:	2100      	movs	r1, #0

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e4:	7828      	ldrb	r0, [r5, #0]
     2e6:	f003 f847 	bl	3378 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	f7ff ff11 	bl	110 <__aeabi_idiv0+0x4>
     2ee:	2001      	movs	r0, #1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	7068      	strb	r0, [r5, #1]
     2f2:	2000      	movs	r0, #0
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	bd70      	pop	{r4, r5, r6, pc}
     2f6:	f04f 30ff 	mov.w	r0, #4294967295
     2fa:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < s_idx; i++) {
     2fc:	20000040 	.word	0x20000040
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     300:	20000b78 	.word	0x20000b78

00000304 <sdc_init>:
		for (i = 0; i < s_idx; i++) {
     304:	b530      	push	{r4, r5, lr}
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	b089      	sub	sp, #36	; 0x24
     308:	0005      	movs	r5, r0
     30a:	d00c      	beq.n	326 <sdc_init+0x22>
     30c:	f007 fd52 	bl	7db4 <mpsl_is_initialized>
			*buf++ = str_ptr_arg[i];
     310:	f04f 34ff 	mov.w	r4, #4294967295
     314:	b120      	cbz	r0, 320 <sdc_init+0x1c>
     316:	f007 fc03 	bl	7b20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
	for (i = 0; i < s_idx; i++) {
     31a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	d905      	bls.n	32c <sdc_init+0x28>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	4620      	mov	r0, r4
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	b009      	add	sp, #36	; 0x24
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	bd30      	pop	{r4, r5, pc}
     326:	f06f 0015 	mvn.w	r0, #21
     32a:	e7fa      	b.n	322 <sdc_init+0x1e>
			if (BUF_OFFSET + 1 > len) {
     32c:	4c14      	ldr	r4, [pc, #80]	; (380 <sdc_init+0x7c>)
     32e:	4815      	ldr	r0, [pc, #84]	; (384 <sdc_init+0x80>)
     330:	6065      	str	r5, [r4, #4]
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	f000 f9bd 	bl	6b0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
			if (BUF_OFFSET + 1 > len) {
     336:	2000      	movs	r0, #0
     338:	7060      	strb	r0, [r4, #1]
			*buf++ = pos;
     33a:	70a0      	strb	r0, [r4, #2]
     33c:	70e0      	strb	r0, [r4, #3]
		for (i = 0; i < s_idx; i++) {
     33e:	4601      	mov	r1, r0
     340:	2224      	movs	r2, #36	; 0x24
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	4668      	mov	r0, sp
     344:	f009 ff76 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     348:	2224      	movs	r2, #36	; 0x24
     34a:	490f      	ldr	r1, [pc, #60]	; (388 <sdc_init+0x84>)
     34c:	4668      	mov	r0, sp
     34e:	f009 fef7 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
		if (rws_pos_en) {
     352:	2224      	movs	r2, #36	; 0x24
			*buf++ = str_ptr_arg[i];
     354:	4669      	mov	r1, sp
     356:	480d      	ldr	r0, [pc, #52]	; (38c <sdc_init+0x88>)
     358:	f009 fef2 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
			size = 0;
     35c:	f3ef 8410 	mrs	r4, PRIMASK
		if (BUF_OFFSET + 1 + size > len) {
     360:	b672      	cpsid	i
     362:	f000 fc31 	bl	bc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     366:	480a      	ldr	r0, [pc, #40]	; (390 <sdc_init+0x8c>)
     368:	f000 fd06 	bl	d78 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
		*buf++ = str_ptr_pos[i];
     36c:	b118      	cbz	r0, 376 <sdc_init+0x72>
     36e:	21cb      	movs	r1, #203	; 0xcb
     370:	2003      	movs	r0, #3
		memcpy(buf, s, size);
     372:	f000 f80f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     376:	b904      	cbnz	r4, 37a <sdc_init+0x76>
     378:	b662      	cpsie	i
     37a:	2000      	movs	r0, #0
		buf += size;
     37c:	e7d1      	b.n	322 <sdc_init+0x1e>
     37e:	0000      	.short	0x0000
	for (i = 0; i < s_idx; i++) {
     380:	20000040 	.word	0x20000040
     384:	00000111 	.word	0x00000111
     388:	00000424 	.word	0x00000424
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38c:	20000b78 	.word	0x20000b78
     390:	000004c1 	.word	0x000004c1

00000394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	b50e      	push	{r1, r2, r3, lr}
     396:	b672      	cpsid	i
     398:	4a15      	ldr	r2, [pc, #84]	; (3f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
			size = strlen(s) + 1;
     39a:	6855      	ldr	r5, [r2, #4]
     39c:	b1dd      	cbz	r5, 3d6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     39e:	2200      	movs	r2, #0
     3a0:	4603      	mov	r3, r0
     3a2:	466e      	mov	r6, sp
		return -EFAULT;
     3a4:	240a      	movs	r4, #10
     3a6:	e003      	b.n	3b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     3a8:	fbb0 f0f4 	udiv	r0, r0, r4
     3ac:	1c52      	adds	r2, r2, #1
     3ae:	b2d2      	uxtb	r2, r2
     3b0:	2800      	cmp	r0, #0
     3b2:	d1f9      	bne.n	3a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     3b4:	54b0      	strb	r0, [r6, r2]
     3b6:	e00a      	b.n	3ce <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     3b8:	b2d8      	uxtb	r0, r3
     3ba:	fbb0 f7f4 	udiv	r7, r0, r4
     3be:	fbb3 f3f4 	udiv	r3, r3, r4
     3c2:	fb04 0017 	mls	r0, r4, r7, r0
     3c6:	1e52      	subs	r2, r2, #1
     3c8:	b2d2      	uxtb	r2, r2
     3ca:	3030      	adds	r0, #48	; 0x30
     3cc:	54b0      	strb	r0, [r6, r2]
     3ce:	2a00      	cmp	r2, #0
     3d0:	d1f2      	bne.n	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     3d2:	4630      	mov	r0, r6
     3d4:	47a8      	blx	r5
     3d6:	f3bf 8f4f 	dsb	sy
     3da:	4806      	ldr	r0, [pc, #24]	; (3f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     3dc:	6801      	ldr	r1, [r0, #0]
     3de:	4a06      	ldr	r2, [pc, #24]	; (3f8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     3e0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     3e4:	4311      	orrs	r1, r2
     3e6:	6001      	str	r1, [r0, #0]
     3e8:	f3bf 8f4f 	dsb	sy
     3ec:	bf00      	nop
     3ee:	e7fd      	b.n	3ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     3f0:	20000040 	.word	0x20000040
     3f4:	e000ed0c 	.word	0xe000ed0c
     3f8:	05fa0004 	.word	0x05fa0004

000003fc <sdc_support_scan>:
     3fc:	4807      	ldr	r0, [pc, #28]	; (41c <CONFIG_BT_RX_STACK_SIZE+0x1c>)
     3fe:	b510      	push	{r4, lr}
     400:	7881      	ldrb	r1, [r0, #2]
     402:	7842      	ldrb	r2, [r0, #1]
     404:	4311      	orrs	r1, r2
     406:	d002      	beq.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>
     408:	f04f 30ff 	mov.w	r0, #4294967295
     40c:	bd10      	pop	{r4, pc}
     40e:	2101      	movs	r1, #1
     410:	70c1      	strb	r1, [r0, #3]
     412:	f002 ffd9 	bl	33c8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
     416:	2000      	movs	r0, #0
     418:	bd10      	pop	{r4, pc}
     41a:	0000      	.short	0x0000
     41c:	20000040 	.word	0x20000040
     420:	00000001 	.word	0x00000001
     424:	00000001 	.word	0x00000001
     428:	031b1b00 	.word	0x031b1b00
     42c:	00000002 	.word	0x00000002
     430:	00001d4c 	.word	0x00001d4c
     434:	00000003 	.word	0x00000003
     438:	00000008 	.word	0x00000008
	...
     448:	c12e7ee0 	.word	0xc12e7ee0
     44c:	2385055e 	.word	0x2385055e
     450:	fadc1546 	.word	0xfadc1546
     454:	707d298e 	.word	0x707d298e
     458:	fca59310 	.word	0xfca59310

0000045c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     45c:	4a05      	ldr	r2, [pc, #20]	; (474 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     45e:	b510      	push	{r4, lr}
     460:	6852      	ldr	r2, [r2, #4]
     462:	b112      	cbz	r2, 46a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     468:	4710      	bx	r2
     46a:	2192      	movs	r1, #146	; 0x92
     46c:	2004      	movs	r0, #4
     46e:	f7ff ff91 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     472:	0000      	.short	0x0000
     474:	20000b9c 	.word	0x20000b9c

00000478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     478:	4a05      	ldr	r2, [pc, #20]	; (490 <__data_size+0x5>)
     47a:	b510      	push	{r4, lr}
     47c:	6892      	ldr	r2, [r2, #8]
     47e:	b112      	cbz	r2, 486 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     484:	4710      	bx	r2
     486:	2198      	movs	r1, #152	; 0x98
     488:	2004      	movs	r0, #4
     48a:	f7ff ff83 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     48e:	0000      	.short	0x0000
     490:	20000b9c 	.word	0x20000b9c

00000494 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     494:	4805      	ldr	r0, [pc, #20]	; (4ac <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     496:	6801      	ldr	r1, [r0, #0]
     498:	b129      	cbz	r1, 4a6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     49a:	6841      	ldr	r1, [r0, #4]
     49c:	b119      	cbz	r1, 4a6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     49e:	6880      	ldr	r0, [r0, #8]
     4a0:	b108      	cbz	r0, 4a6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     4a2:	2001      	movs	r0, #1
     4a4:	4770      	bx	lr
     4a6:	2000      	movs	r0, #0
     4a8:	4770      	bx	lr
     4aa:	0000      	.short	0x0000
     4ac:	20000b9c 	.word	0x20000b9c

000004b0 <sdc_rand_source_register>:
     4b0:	4902      	ldr	r1, [pc, #8]	; (4bc <sdc_rand_source_register+0xc>)
     4b2:	c80d      	ldmia	r0, {r0, r2, r3}
     4b4:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     4b8:	2000      	movs	r0, #0
     4ba:	4770      	bx	lr
     4bc:	20000b9c 	.word	0x20000b9c

000004c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4c2:	4c12      	ldr	r4, [pc, #72]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4c4:	2600      	movs	r6, #0
     4c6:	6825      	ldr	r5, [r4, #0]
     4c8:	e011      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     4ca:	9800      	ldr	r0, [sp, #0]
     4cc:	2802      	cmp	r0, #2
     4ce:	d002      	beq.n	4d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     4d0:	2803      	cmp	r0, #3
     4d2:	d10c      	bne.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     4d4:	e006      	b.n	4e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     4d6:	6820      	ldr	r0, [r4, #0]
     4d8:	b110      	cbz	r0, 4e0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     4da:	2000      	movs	r0, #0
     4dc:	6026      	str	r6, [r4, #0]
     4de:	e005      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     4e0:	2128      	movs	r1, #40	; 0x28
     4e2:	e00c      	b.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     4e4:	6820      	ldr	r0, [r4, #0]
     4e6:	b168      	cbz	r0, 504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4e8:	2001      	movs	r0, #1
     4ea:	6026      	str	r6, [r4, #0]
     4ec:	47a8      	blx	r5
     4ee:	4668      	mov	r0, sp
     4f0:	f000 fc08 	bl	d04 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     4f4:	2800      	cmp	r0, #0
     4f6:	d0e8      	beq.n	4ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     4f8:	2805      	cmp	r0, #5
     4fa:	d005      	beq.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     4fc:	2135      	movs	r1, #53	; 0x35
     4fe:	2004      	movs	r0, #4
     500:	f7ff ff48 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     504:	212d      	movs	r1, #45	; 0x2d
     506:	e7fa      	b.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     50a:	0000      	.short	0x0000
     50c:	20000048 	.word	0x20000048

00000510 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     514:	4605      	mov	r5, r0
     516:	4925      	ldr	r1, [pc, #148]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     518:	1d00      	adds	r0, r0, #4
     51a:	f501 7784 	add.w	r7, r1, #264	; 0x108
     51e:	2600      	movs	r6, #0
     520:	6008      	str	r0, [r1, #0]
     522:	7838      	ldrb	r0, [r7, #0]
     524:	b150      	cbz	r0, 53c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     526:	78ba      	ldrb	r2, [r7, #2]
     528:	463c      	mov	r4, r7
     52a:	1c79      	adds	r1, r7, #1
     52c:	4628      	mov	r0, r5
     52e:	1c92      	adds	r2, r2, #2
     530:	f009 fe06 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     534:	7026      	strb	r6, [r4, #0]
     536:	2004      	movs	r0, #4
     538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     53c:	481b      	ldr	r0, [pc, #108]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     53e:	f000 fde3 	bl	1108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     542:	4604      	mov	r4, r0
     544:	2802      	cmp	r0, #2
     546:	d004      	beq.n	552 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     548:	2c04      	cmp	r4, #4
     54a:	d007      	beq.n	55c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     54c:	2c08      	cmp	r4, #8
     54e:	d027      	beq.n	5a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     550:	e02a      	b.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     552:	4916      	ldr	r1, [pc, #88]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     554:	4628      	mov	r0, r5
     556:	f007 ff34 	bl	83c2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     55a:	e025      	b.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     55c:	4913      	ldr	r1, [pc, #76]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     55e:	4628      	mov	r0, r5
     560:	f007 ff94 	bl	848c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     564:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     568:	d303      	bcc.n	572 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x62>
     56a:	21c7      	movs	r1, #199	; 0xc7
     56c:	2008      	movs	r0, #8
     56e:	f7ff ff11 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     572:	2800      	cmp	r0, #0
     574:	d0d5      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     576:	f895 9000 	ldrb.w	r9, [r5]
     57a:	f895 8002 	ldrb.w	r8, [r5, #2]
     57e:	4648      	mov	r0, r9
     580:	f000 f844 	bl	60c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     584:	2800      	cmp	r0, #0
     586:	d0cc      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     588:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
     58c:	d10c      	bne.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     58e:	4640      	mov	r0, r8
     590:	f1b8 0f12 	cmp.w	r8, #18
     594:	d0c5      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     596:	f000 f84b 	bl	630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     59a:	2800      	cmp	r0, #0
     59c:	d0c1      	beq.n	522 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     59e:	e003      	b.n	5a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     5a0:	4902      	ldr	r1, [pc, #8]	; (5ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     5a2:	4628      	mov	r0, r5
     5a4:	f007 ff3b 	bl	841e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     5a8:	4620      	mov	r0, r4
     5aa:	e7c5      	b.n	538 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     5ac:	20000ba8 	.word	0x20000ba8
     5b0:	b570      	push	{r4, r5, r6, lr}
     5b2:	780a      	ldrb	r2, [r1, #0]
     5b4:	7082      	strb	r2, [r0, #2]
     5b6:	b33a      	cbz	r2, 608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5b8:	2a01      	cmp	r2, #1
     5ba:	d825      	bhi.n	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5bc:	2313      	movs	r3, #19
     5be:	7003      	strb	r3, [r0, #0]
     5c0:	2300      	movs	r3, #0
     5c2:	e00a      	b.n	5da <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
     5c4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     5c8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     5cc:	78a6      	ldrb	r6, [r4, #2]
     5ce:	70ee      	strb	r6, [r5, #3]
     5d0:	8864      	ldrh	r4, [r4, #2]
     5d2:	0a24      	lsrs	r4, r4, #8
     5d4:	1c5b      	adds	r3, r3, #1
     5d6:	712c      	strb	r4, [r5, #4]
     5d8:	b2db      	uxtb	r3, r3
     5da:	4293      	cmp	r3, r2
     5dc:	d3f2      	bcc.n	5c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     5de:	2300      	movs	r3, #0
     5e0:	e00b      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
     5e2:	bf00      	nop
     5e4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     5e8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     5ec:	792e      	ldrb	r6, [r5, #4]
     5ee:	7166      	strb	r6, [r4, #5]
     5f0:	88ad      	ldrh	r5, [r5, #4]
     5f2:	0a2d      	lsrs	r5, r5, #8
     5f4:	1c5b      	adds	r3, r3, #1
     5f6:	71a5      	strb	r5, [r4, #6]
     5f8:	b2db      	uxtb	r3, r3
     5fa:	4293      	cmp	r3, r2
     5fc:	d3f2      	bcc.n	5e4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
     5fe:	2101      	movs	r1, #1
     600:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     604:	b2c0      	uxtb	r0, r0
     606:	bd70      	pop	{r4, r5, r6, pc}
     608:	2000      	movs	r0, #0
     60a:	bd70      	pop	{r4, r5, r6, pc}

0000060c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     60c:	2840      	cmp	r0, #64	; 0x40
     60e:	d203      	bcs.n	618 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     610:	1e40      	subs	r0, r0, #1
     612:	b2c1      	uxtb	r1, r0
     614:	4805      	ldr	r0, [pc, #20]	; (62c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     616:	e005      	b.n	624 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     618:	28ff      	cmp	r0, #255	; 0xff
     61a:	d005      	beq.n	628 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     61c:	3840      	subs	r0, #64	; 0x40
     61e:	b2c1      	uxtb	r1, r0
     620:	4802      	ldr	r0, [pc, #8]	; (62c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     622:	3008      	adds	r0, #8
     624:	f008 b9c4 	b.w	89b0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     628:	2001      	movs	r0, #1
     62a:	4770      	bx	lr
     62c:	2000004c 	.word	0x2000004c

00000630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     630:	1e40      	subs	r0, r0, #1
     632:	b2c1      	uxtb	r1, r0
     634:	4801      	ldr	r0, [pc, #4]	; (63c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     636:	f008 b9bb 	b.w	89b0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     63a:	0000      	.short	0x0000
     63c:	2000005c 	.word	0x2000005c

00000640 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     640:	4902      	ldr	r1, [pc, #8]	; (64c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     642:	6802      	ldr	r2, [r0, #0]
     644:	610a      	str	r2, [r1, #16]
     646:	6840      	ldr	r0, [r0, #4]
     648:	6148      	str	r0, [r1, #20]
     64a:	4770      	bx	lr
     64c:	2000004c 	.word	0x2000004c

00000650 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     650:	4905      	ldr	r1, [pc, #20]	; (668 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     652:	6802      	ldr	r2, [r0, #0]
     654:	600a      	str	r2, [r1, #0]
     656:	6840      	ldr	r0, [r0, #4]
     658:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     65c:	600a      	str	r2, [r1, #0]
     65e:	4a03      	ldr	r2, [pc, #12]	; (66c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     660:	4310      	orrs	r0, r2
     662:	6048      	str	r0, [r1, #4]
     664:	4770      	bx	lr
     666:	0000      	.short	0x0000
     668:	2000004c 	.word	0x2000004c
     66c:	024007f8 	.word	0x024007f8

00000670 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     670:	4807      	ldr	r0, [pc, #28]	; (690 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     672:	f04f 31ff 	mov.w	r1, #4294967295
     676:	2200      	movs	r2, #0
     678:	6001      	str	r1, [r0, #0]
     67a:	0cc9      	lsrs	r1, r1, #19
     67c:	6041      	str	r1, [r0, #4]
     67e:	f100 0108 	add.w	r1, r0, #8
     682:	201f      	movs	r0, #31
     684:	600a      	str	r2, [r1, #0]
     686:	604a      	str	r2, [r1, #4]
     688:	3108      	adds	r1, #8
     68a:	e9c1 0200 	strd	r0, r2, [r1]
     68e:	4770      	bx	lr
     690:	2000004c 	.word	0x2000004c

00000694 <sdc_hci_cmd_cb_reset>:
     694:	b510      	push	{r4, lr}
     696:	f7ff ffeb 	bl	670 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     69a:	f009 f993 	bl	99c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     69e:	4604      	mov	r4, r0
     6a0:	4802      	ldr	r0, [pc, #8]	; (6ac <sdc_hci_cmd_cb_reset+0x18>)
     6a2:	6800      	ldr	r0, [r0, #0]
     6a4:	b100      	cbz	r0, 6a8 <sdc_hci_cmd_cb_reset+0x14>
     6a6:	4780      	blx	r0
     6a8:	4620      	mov	r0, r4
     6aa:	bd10      	pop	{r4, pc}
     6ac:	20000064 	.word	0x20000064

000006b0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     6b0:	4901      	ldr	r1, [pc, #4]	; (6b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     6b2:	6008      	str	r0, [r1, #0]
     6b4:	4770      	bx	lr
     6b6:	0000      	.short	0x0000
     6b8:	20000064 	.word	0x20000064

000006bc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6c0:	4604      	mov	r4, r0
     6c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     6c6:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     6ca:	4d1f      	ldr	r5, [pc, #124]	; (748 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     6cc:	4e1e      	ldr	r6, [pc, #120]	; (748 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     6ce:	3d10      	subs	r5, #16
     6d0:	2210      	movs	r2, #16
     6d2:	2100      	movs	r1, #0
     6d4:	4620      	mov	r0, r4
     6d6:	f009 fdad 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     6da:	2210      	movs	r2, #16
     6dc:	2100      	movs	r1, #0
     6de:	f104 0010 	add.w	r0, r4, #16
     6e2:	f009 fda7 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     6e6:	6828      	ldr	r0, [r5, #0]
     6e8:	1c40      	adds	r0, r0, #1
     6ea:	d108      	bne.n	6fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6ec:	6868      	ldr	r0, [r5, #4]
     6ee:	1c40      	adds	r0, r0, #1
     6f0:	d105      	bne.n	6fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6f2:	68a8      	ldr	r0, [r5, #8]
     6f4:	1c40      	adds	r0, r0, #1
     6f6:	d102      	bne.n	6fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6f8:	68e8      	ldr	r0, [r5, #12]
     6fa:	1c40      	adds	r0, r0, #1
     6fc:	d007      	beq.n	70e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     6fe:	6828      	ldr	r0, [r5, #0]
     700:	686a      	ldr	r2, [r5, #4]
     702:	68a9      	ldr	r1, [r5, #8]
     704:	68eb      	ldr	r3, [r5, #12]
     706:	6120      	str	r0, [r4, #16]
     708:	6162      	str	r2, [r4, #20]
     70a:	61a1      	str	r1, [r4, #24]
     70c:	61e3      	str	r3, [r4, #28]
     70e:	2000      	movs	r0, #0
     710:	f000 fb86 	bl	e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     714:	4387      	bics	r7, r0
     716:	07f8      	lsls	r0, r7, #31
     718:	d113      	bne.n	742 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     71a:	6830      	ldr	r0, [r6, #0]
     71c:	1c40      	adds	r0, r0, #1
     71e:	d108      	bne.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     720:	6870      	ldr	r0, [r6, #4]
     722:	1c40      	adds	r0, r0, #1
     724:	d105      	bne.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     726:	68b0      	ldr	r0, [r6, #8]
     728:	1c40      	adds	r0, r0, #1
     72a:	d102      	bne.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     72c:	68f0      	ldr	r0, [r6, #12]
     72e:	1c40      	adds	r0, r0, #1
     730:	d007      	beq.n	742 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     732:	6832      	ldr	r2, [r6, #0]
     734:	6870      	ldr	r0, [r6, #4]
     736:	68b1      	ldr	r1, [r6, #8]
     738:	68f3      	ldr	r3, [r6, #12]
     73a:	6022      	str	r2, [r4, #0]
     73c:	6060      	str	r0, [r4, #4]
     73e:	60a1      	str	r1, [r4, #8]
     740:	60e3      	str	r3, [r4, #12]
     742:	2000      	movs	r0, #0
     744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     748:	10000090 	.word	0x10000090

0000074c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     74c:	b538      	push	{r3, r4, r5, lr}
     74e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     752:	4604      	mov	r4, r0
     754:	4822      	ldr	r0, [pc, #136]	; (7e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     756:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     75a:	4d21      	ldr	r5, [pc, #132]	; (7e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     75c:	6802      	ldr	r2, [r0, #0]
     75e:	3d14      	subs	r5, #20
     760:	1c52      	adds	r2, r2, #1
     762:	d104      	bne.n	76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     764:	6842      	ldr	r2, [r0, #4]
     766:	43d2      	mvns	r2, r2
     768:	0412      	lsls	r2, r2, #16
     76a:	0c12      	lsrs	r2, r2, #16
     76c:	d035      	beq.n	7da <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     76e:	07c9      	lsls	r1, r1, #31
     770:	d033      	beq.n	7da <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     772:	6801      	ldr	r1, [r0, #0]
     774:	6840      	ldr	r0, [r0, #4]
     776:	f8ad 0000 	strh.w	r0, [sp]
     77a:	f8c4 1001 	str.w	r1, [r4, #1]
     77e:	f8bd 0000 	ldrh.w	r0, [sp]
     782:	f8a4 0005 	strh.w	r0, [r4, #5]
     786:	79a0      	ldrb	r0, [r4, #6]
     788:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     78c:	71a0      	strb	r0, [r4, #6]
     78e:	6828      	ldr	r0, [r5, #0]
     790:	1c40      	adds	r0, r0, #1
     792:	d00c      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     794:	6868      	ldr	r0, [r5, #4]
     796:	1c40      	adds	r0, r0, #1
     798:	d009      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     79a:	68a8      	ldr	r0, [r5, #8]
     79c:	1c40      	adds	r0, r0, #1
     79e:	d006      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7a0:	68e8      	ldr	r0, [r5, #12]
     7a2:	1c40      	adds	r0, r0, #1
     7a4:	d003      	beq.n	7ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7a6:	2000      	movs	r0, #0
     7a8:	f000 fb3a 	bl	e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     7ac:	b140      	cbz	r0, 7c0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     7ae:	2210      	movs	r2, #16
     7b0:	2100      	movs	r1, #0
     7b2:	1de0      	adds	r0, r4, #7
     7b4:	f009 fd3e 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     7b8:	2001      	movs	r0, #1
     7ba:	7020      	strb	r0, [r4, #0]
     7bc:	2000      	movs	r0, #0
     7be:	bd38      	pop	{r3, r4, r5, pc}
     7c0:	682a      	ldr	r2, [r5, #0]
     7c2:	6869      	ldr	r1, [r5, #4]
     7c4:	68a8      	ldr	r0, [r5, #8]
     7c6:	68eb      	ldr	r3, [r5, #12]
     7c8:	f8c4 2007 	str.w	r2, [r4, #7]
     7cc:	f8c4 100b 	str.w	r1, [r4, #11]
     7d0:	f8c4 000f 	str.w	r0, [r4, #15]
     7d4:	f8c4 3013 	str.w	r3, [r4, #19]
     7d8:	e7ee      	b.n	7b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     7da:	2000      	movs	r0, #0
     7dc:	e7ed      	b.n	7ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     7de:	0000      	.short	0x0000
     7e0:	100000a4 	.word	0x100000a4

000007e4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     7e4:	2102      	movs	r1, #2
     7e6:	8001      	strh	r1, [r0, #0]
     7e8:	8041      	strh	r1, [r0, #2]
     7ea:	2100      	movs	r1, #0
     7ec:	7101      	strb	r1, [r0, #4]
     7ee:	21e0      	movs	r1, #224	; 0xe0
     7f0:	7141      	strb	r1, [r0, #5]
     7f2:	f642 617e 	movw	r1, #11902	; 0x2e7e
     7f6:	80c1      	strh	r1, [r0, #6]
     7f8:	4901      	ldr	r1, [pc, #4]	; (800 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL>)
     7fa:	6081      	str	r1, [r0, #8]
     7fc:	2000      	movs	r0, #0
     7fe:	4770      	bx	lr
     800:	85055ec1 	.word	0x85055ec1
     804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     808:	798c      	ldrb	r4, [r1, #6]
     80a:	f8dd e018 	ldr.w	lr, [sp, #24]
     80e:	2c08      	cmp	r4, #8
     810:	d901      	bls.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     812:	21db      	movs	r1, #219	; 0xdb
     814:	e02c      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
     816:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8bc <__z_interrupt_stack_SIZEOF+0x7c>
     81a:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     81e:	b10d      	cbz	r5, 824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     820:	21dc      	movs	r1, #220	; 0xdc
     822:	e025      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
     824:	79cd      	ldrb	r5, [r1, #7]
     826:	2d00      	cmp	r5, #0
     828:	d045      	beq.n	8b6 <__z_interrupt_stack_SIZEOF+0x76>
     82a:	006f      	lsls	r7, r5, #1
     82c:	370a      	adds	r7, #10
     82e:	681d      	ldr	r5, [r3, #0]
     830:	2c02      	cmp	r4, #2
     832:	443d      	add	r5, r7
     834:	d901      	bls.n	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     836:	4626      	mov	r6, r4
     838:	e001      	b.n	83e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e>
     83a:	f04f 0602 	mov.w	r6, #2
     83e:	442e      	add	r6, r5
     840:	f1a6 0601 	sub.w	r6, r6, #1
     844:	d901      	bls.n	84a <__z_interrupt_stack_SIZEOF+0xa>
     846:	4625      	mov	r5, r4
     848:	e001      	b.n	84e <__z_interrupt_stack_SIZEOF+0xe>
     84a:	f04f 0502 	mov.w	r5, #2
     84e:	f1a5 0501 	sub.w	r5, r5, #1
     852:	ea26 0605 	bic.w	r6, r6, r5
     856:	888d      	ldrh	r5, [r1, #4]
     858:	4425      	add	r5, r4
     85a:	f1a4 0401 	sub.w	r4, r4, #1
     85e:	f1a5 0501 	sub.w	r5, r5, #1
     862:	ea25 0504 	bic.w	r5, r5, r4
     866:	f64f 74ff 	movw	r4, #65535	; 0xffff
     86a:	42a5      	cmp	r5, r4
     86c:	d303      	bcc.n	876 <__z_interrupt_stack_SIZEOF+0x36>
     86e:	21e7      	movs	r1, #231	; 0xe7
     870:	2017      	movs	r0, #23
     872:	f7ff fd8f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     876:	f1be 0f00 	cmp.w	lr, #0
     87a:	d118      	bne.n	8ae <__z_interrupt_stack_SIZEOF+0x6e>
     87c:	1bf4      	subs	r4, r6, r7
     87e:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     882:	8025      	strh	r5, [r4, #0]
     884:	79c8      	ldrb	r0, [r1, #7]
     886:	70a0      	strb	r0, [r4, #2]
     888:	2001      	movs	r0, #1
     88a:	70e0      	strb	r0, [r4, #3]
     88c:	7122      	strb	r2, [r4, #4]
     88e:	6808      	ldr	r0, [r1, #0]
     890:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     894:	0c00      	lsrs	r0, r0, #16
     896:	80e0      	strh	r0, [r4, #6]
     898:	8808      	ldrh	r0, [r1, #0]
     89a:	8120      	strh	r0, [r4, #8]
     89c:	2000      	movs	r0, #0
     89e:	e003      	b.n	8a8 <__z_interrupt_stack_SIZEOF+0x68>
     8a0:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     8a4:	1c40      	adds	r0, r0, #1
     8a6:	817a      	strh	r2, [r7, #10]
     8a8:	79cf      	ldrb	r7, [r1, #7]
     8aa:	4287      	cmp	r7, r0
     8ac:	d8f8      	bhi.n	8a0 <__z_interrupt_stack_SIZEOF+0x60>
     8ae:	79c8      	ldrb	r0, [r1, #7]
     8b0:	fb00 6005 	mla	r0, r0, r5, r6
     8b4:	6018      	str	r0, [r3, #0]
     8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8ba:	0000      	.short	0x0000
     8bc:	20000068 	.word	0x20000068
     8c0:	b530      	push	{r4, r5, lr}
     8c2:	4603      	mov	r3, r0
     8c4:	ea4f 0002 	mov.w	r0, r2
     8c8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     8cc:	8964      	ldrh	r4, [r4, #10]
     8ce:	428c      	cmp	r4, r1
     8d0:	d009      	beq.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
     8d2:	789c      	ldrb	r4, [r3, #2]
     8d4:	1c40      	adds	r0, r0, #1
     8d6:	fbb0 f5f4 	udiv	r5, r0, r4
     8da:	fb04 0015 	mls	r0, r4, r5, r0
     8de:	b2c0      	uxtb	r0, r0
     8e0:	4290      	cmp	r0, r2
     8e2:	d1f1      	bne.n	8c8 <__z_interrupt_stack_SIZEOF+0x88>
     8e4:	20ff      	movs	r0, #255	; 0xff
     8e6:	bd30      	pop	{r4, r5, pc}

000008e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     8e8:	4a08      	ldr	r2, [pc, #32]	; (90c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
     8ea:	b510      	push	{r4, lr}
     8ec:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     8f0:	4601      	mov	r1, r0
     8f2:	4620      	mov	r0, r4
     8f4:	f008 fa70 	bl	8dd8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     8f8:	4601      	mov	r1, r0
     8fa:	28ff      	cmp	r0, #255	; 0xff
     8fc:	d004      	beq.n	908 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
     8fe:	4620      	mov	r0, r4
     900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     904:	f008 ba7c 	b.w	8e00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     908:	2000      	movs	r0, #0
     90a:	bd10      	pop	{r4, pc}
     90c:	20000068 	.word	0x20000068

00000910 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     910:	b570      	push	{r4, r5, r6, lr}
     912:	4604      	mov	r4, r0
     914:	7808      	ldrb	r0, [r1, #0]
     916:	784a      	ldrb	r2, [r1, #1]
     918:	b086      	sub	sp, #24
     91a:	4290      	cmp	r0, r2
     91c:	d902      	bls.n	924 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
     91e:	f44f 7184 	mov.w	r1, #264	; 0x108
     922:	e006      	b.n	932 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     924:	9401      	str	r4, [sp, #4]
     926:	b13c      	cbz	r4, 938 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     928:	2300      	movs	r3, #0
     92a:	0760      	lsls	r0, r4, #29
     92c:	d006      	beq.n	93c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     92e:	f240 1119 	movw	r1, #281	; 0x119
     932:	2017      	movs	r0, #23
     934:	f7ff fd2e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     938:	2301      	movs	r3, #1
     93a:	e7f6      	b.n	92a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
     93c:	480b      	ldr	r0, [pc, #44]	; (96c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>)
     93e:	2200      	movs	r2, #0
     940:	4e0b      	ldr	r6, [pc, #44]	; (970 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>)
     942:	6002      	str	r2, [r0, #0]
     944:	7849      	ldrb	r1, [r1, #1]
     946:	e9d6 5000 	ldrd	r5, r0, [r6]
     94a:	68b6      	ldr	r6, [r6, #8]
     94c:	f361 601f 	bfi	r0, r1, #24, #8
     950:	e9cd 5002 	strd	r5, r0, [sp, #8]
     954:	9300      	str	r3, [sp, #0]
     956:	9604      	str	r6, [sp, #16]
     958:	ab01      	add	r3, sp, #4
     95a:	a902      	add	r1, sp, #8
     95c:	4610      	mov	r0, r2
     95e:	f7ff ff51 	bl	804 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4>
     962:	9801      	ldr	r0, [sp, #4]
     964:	b006      	add	sp, #24
     966:	1b00      	subs	r0, r0, r4
     968:	bd70      	pop	{r4, r5, r6, pc}
     96a:	0000      	.short	0x0000
     96c:	20000068 	.word	0x20000068
     970:	00000a04 	.word	0x00000a04

00000974 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     974:	b510      	push	{r4, lr}
     976:	4604      	mov	r4, r0
     978:	7980      	ldrb	r0, [r0, #6]
     97a:	490e      	ldr	r1, [pc, #56]	; (9b4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
     97c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     980:	b1a8      	cbz	r0, 9ae <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     982:	f64f 73f0 	movw	r3, #65520	; 0xfff0
     986:	79e1      	ldrb	r1, [r4, #7]
     988:	7882      	ldrb	r2, [r0, #2]
     98a:	4291      	cmp	r1, r2
     98c:	d20f      	bcs.n	9ae <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     98e:	1c4a      	adds	r2, r1, #1
     990:	71e2      	strb	r2, [r4, #7]
     992:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     996:	8952      	ldrh	r2, [r2, #10]
     998:	429a      	cmp	r2, r3
     99a:	d0f4      	beq.n	986 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
     99c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9a0:	8952      	ldrh	r2, [r2, #10]
     9a2:	80a2      	strh	r2, [r4, #4]
     9a4:	f008 fa2c 	bl	8e00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     9a8:	6020      	str	r0, [r4, #0]
     9aa:	2000      	movs	r0, #0
     9ac:	bd10      	pop	{r4, pc}
     9ae:	2005      	movs	r0, #5
     9b0:	bd10      	pop	{r4, pc}
     9b2:	0000      	.short	0x0000
     9b4:	20000068 	.word	0x20000068

000009b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9bc:	4606      	mov	r6, r0
     9be:	4810      	ldr	r0, [pc, #64]	; (a00 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
     9c0:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
     9c4:	4631      	mov	r1, r6
     9c6:	4628      	mov	r0, r5
     9c8:	f008 fa06 	bl	8dd8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     9cc:	4604      	mov	r4, r0
     9ce:	28ff      	cmp	r0, #255	; 0xff
     9d0:	d012      	beq.n	9f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
     9d2:	f8d5 0006 	ldr.w	r0, [r5, #6]
     9d6:	4621      	mov	r1, r4
     9d8:	ea4f 4730 	mov.w	r7, r0, ror #16
     9dc:	4628      	mov	r0, r5
     9de:	f008 fa0f 	bl	8e00 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     9e2:	4601      	mov	r1, r0
     9e4:	4630      	mov	r0, r6
     9e6:	47b8      	blx	r7
     9e8:	eb05 0144 	add.w	r1, r5, r4, lsl #1
     9ec:	f64f 70f0 	movw	r0, #65520	; 0xfff0
     9f0:	8148      	strh	r0, [r1, #10]
     9f2:	2000      	movs	r0, #0
     9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9f8:	f243 0002 	movw	r0, #12290	; 0x3002
     9fc:	e7fa      	b.n	9f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
     9fe:	0000      	.short	0x0000
     a00:	20000068 	.word	0x20000068
     a04:	000096f5 	.word	0x000096f5
     a08:	000802a8 	.word	0x000802a8
     a0c:	00000000 	.word	0x00000000

00000a10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
     a10:	b570      	push	{r4, r5, r6, lr}
     a12:	4c14      	ldr	r4, [pc, #80]	; (a64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
     a14:	6823      	ldr	r3, [r4, #0]
     a16:	b18b      	cbz	r3, a3c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
     a18:	7a19      	ldrb	r1, [r3, #8]
     a1a:	4281      	cmp	r1, r0
     a1c:	d912      	bls.n	a44 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     a1e:	685a      	ldr	r2, [r3, #4]
     a20:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
     a24:	b171      	cbz	r1, a44 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     a26:	2500      	movs	r5, #0
     a28:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
     a2c:	884a      	ldrh	r2, [r1, #2]
     a2e:	6818      	ldr	r0, [r3, #0]
     a30:	f008 f9c5 	bl	8dbe <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     a34:	6821      	ldr	r1, [r4, #0]
     a36:	2000      	movs	r0, #0
     a38:	7a0a      	ldrb	r2, [r1, #8]
     a3a:	e00c      	b.n	a56 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
     a3c:	21c6      	movs	r1, #198	; 0xc6
     a3e:	2018      	movs	r0, #24
     a40:	f7ff fca8 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a44:	f243 0002 	movw	r0, #12290	; 0x3002
     a48:	bd70      	pop	{r4, r5, r6, pc}
     a4a:	684b      	ldr	r3, [r1, #4]
     a4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     a50:	b933      	cbnz	r3, a60 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
     a52:	1c40      	adds	r0, r0, #1
     a54:	b2c0      	uxtb	r0, r0
     a56:	4282      	cmp	r2, r0
     a58:	d8f7      	bhi.n	a4a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
     a5a:	6808      	ldr	r0, [r1, #0]
     a5c:	f008 f9a4 	bl	8da8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
     a60:	2000      	movs	r0, #0
     a62:	bd70      	pop	{r4, r5, r6, pc}
     a64:	2000006c 	.word	0x2000006c

00000a68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
     a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a6c:	460d      	mov	r5, r1
     a6e:	0004      	movs	r4, r0
     a70:	4690      	mov	r8, r2
     a72:	f04f 0600 	mov.w	r6, #0
     a76:	d006      	beq.n	a86 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
     a78:	2700      	movs	r7, #0
     a7a:	07a0      	lsls	r0, r4, #30
     a7c:	d005      	beq.n	a8a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
     a7e:	2186      	movs	r1, #134	; 0x86
     a80:	2018      	movs	r0, #24
     a82:	f7ff fc87 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a86:	2701      	movs	r7, #1
     a88:	e7f7      	b.n	a7a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
     a8a:	b1cd      	cbz	r5, ac0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     a8c:	4611      	mov	r1, r2
     a8e:	2000      	movs	r0, #0
     a90:	f008 f96e 	bl	8d70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     a94:	300c      	adds	r0, #12
     a96:	eb00 0685 	add.w	r6, r0, r5, lsl #2
     a9a:	b98f      	cbnz	r7, ac0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     a9c:	4f0a      	ldr	r7, [pc, #40]	; (ac8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
     a9e:	f104 000c 	add.w	r0, r4, #12
     aa2:	00aa      	lsls	r2, r5, #2
     aa4:	603c      	str	r4, [r7, #0]
     aa6:	7225      	strb	r5, [r4, #8]
     aa8:	6060      	str	r0, [r4, #4]
     aaa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     aae:	6020      	str	r0, [r4, #0]
     ab0:	2100      	movs	r1, #0
     ab2:	6860      	ldr	r0, [r4, #4]
     ab4:	f009 fbbe 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     ab8:	4641      	mov	r1, r8
     aba:	6838      	ldr	r0, [r7, #0]
     abc:	f008 f958 	bl	8d70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     ac0:	4630      	mov	r0, r6
     ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ac6:	0000      	.short	0x0000
     ac8:	2000006c 	.word	0x2000006c

00000acc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
     acc:	490a      	ldr	r1, [pc, #40]	; (af8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
     ace:	b510      	push	{r4, lr}
     ad0:	4602      	mov	r2, r0
     ad2:	6809      	ldr	r1, [r1, #0]
     ad4:	2000      	movs	r0, #0
     ad6:	b159      	cbz	r1, af0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
     ad8:	7a0b      	ldrb	r3, [r1, #8]
     ada:	4293      	cmp	r3, r2
     adc:	d907      	bls.n	aee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     ade:	6849      	ldr	r1, [r1, #4]
     ae0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
     ae4:	2900      	cmp	r1, #0
     ae6:	d002      	beq.n	aee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     ae8:	f831 0b04 	ldrh.w	r0, [r1], #4
     aec:	4408      	add	r0, r1
     aee:	bd10      	pop	{r4, pc}
     af0:	21fa      	movs	r1, #250	; 0xfa
     af2:	2018      	movs	r0, #24
     af4:	f7ff fc4e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     af8:	2000006c 	.word	0x2000006c

00000afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
     afc:	4801      	ldr	r0, [pc, #4]	; (b04 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
     afe:	7840      	ldrb	r0, [r0, #1]
     b00:	4770      	bx	lr
     b02:	0000      	.short	0x0000
     b04:	20000070 	.word	0x20000070

00000b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
     b08:	4801      	ldr	r0, [pc, #4]	; (b10 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
     b0a:	6840      	ldr	r0, [r0, #4]
     b0c:	4770      	bx	lr
     b0e:	0000      	.short	0x0000
     b10:	20000070 	.word	0x20000070

00000b14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
     b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b18:	460c      	mov	r4, r1
     b1a:	4607      	mov	r7, r0
     b1c:	4616      	mov	r6, r2
     b1e:	2125      	movs	r1, #37	; 0x25
     b20:	4610      	mov	r0, r2
     b22:	460d      	mov	r5, r1
     b24:	4622      	mov	r2, r4
     b26:	f008 f8e2 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
     b2a:	4680      	mov	r8, r0
     b2c:	b157      	cbz	r7, b44 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
     b2e:	4638      	mov	r0, r7
     b30:	4641      	mov	r1, r8
     b32:	4632      	mov	r2, r6
     b34:	462b      	mov	r3, r5
     b36:	9400      	str	r4, [sp, #0]
     b38:	f008 f894 	bl	8c64 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b3c:	4803      	ldr	r0, [pc, #12]	; (b4c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
     b3e:	6047      	str	r7, [r0, #4]
     b40:	7004      	strb	r4, [r0, #0]
     b42:	7046      	strb	r6, [r0, #1]
     b44:	4640      	mov	r0, r8
     b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000070 	.word	0x20000070

00000b50 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
     b50:	4802      	ldr	r0, [pc, #8]	; (b5c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
     b52:	7842      	ldrb	r2, [r0, #1]
     b54:	7801      	ldrb	r1, [r0, #0]
     b56:	6840      	ldr	r0, [r0, #4]
     b58:	f7ff bfdc 	b.w	b14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     b5c:	20000070 	.word	0x20000070
     b60:	b530      	push	{r4, r5, lr}
     b62:	490d      	ldr	r1, [pc, #52]	; (b98 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
     b64:	2001      	movs	r0, #1
     b66:	6048      	str	r0, [r1, #4]
     b68:	1e82      	subs	r2, r0, #2
     b6a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b6e:	490b      	ldr	r1, [pc, #44]	; (b9c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
     b70:	6088      	str	r0, [r1, #8]
     b72:	2300      	movs	r3, #0
     b74:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
     b78:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b7c:	4c08      	ldr	r4, [pc, #32]	; (ba0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
     b7e:	6023      	str	r3, [r4, #0]
     b80:	1d25      	adds	r5, r4, #4
     b82:	6028      	str	r0, [r5, #0]
     b84:	6088      	str	r0, [r1, #8]
     b86:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b8a:	6023      	str	r3, [r4, #0]
     b8c:	6028      	str	r0, [r5, #0]
     b8e:	4906      	ldr	r1, [pc, #24]	; (ba8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
     b90:	4804      	ldr	r0, [pc, #16]	; (ba4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
     b92:	6008      	str	r0, [r1, #0]
     b94:	bd30      	pop	{r4, r5, pc}
     b96:	0000      	.short	0x0000
     b98:	4000e000 	.word	0x4000e000
     b9c:	4000f000 	.word	0x4000f000
     ba0:	4000f500 	.word	0x4000f500
     ba4:	3ff60000 	.word	0x3ff60000
     ba8:	4001f508 	.word	0x4001f508

00000bac <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
     bac:	b510      	push	{r4, lr}
     bae:	f7ff ffd7 	bl	b60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
     bb2:	f008 f96f 	bl	8e94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
     bb6:	4903      	ldr	r1, [pc, #12]	; (bc4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
     bb8:	4801      	ldr	r0, [pc, #4]	; (bc0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
     bba:	6008      	str	r0, [r1, #0]
     bbc:	bd10      	pop	{r4, pc}
     bbe:	0000      	.short	0x0000
     bc0:	3ff60000 	.word	0x3ff60000
     bc4:	4001f508 	.word	0x4001f508

00000bc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
     bc8:	b510      	push	{r4, lr}
     bca:	f7ff ffc9 	bl	b60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
     bce:	f008 f961 	bl	8e94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
     bd2:	f000 f887 	bl	ce4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
     bd6:	4905      	ldr	r1, [pc, #20]	; (bec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
     bd8:	4803      	ldr	r0, [pc, #12]	; (be8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
     bda:	6008      	str	r0, [r1, #0]
     bdc:	f000 f8b8 	bl	d50 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
     be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     be4:	f000 b8dc 	b.w	da0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
     be8:	3ff60000 	.word	0x3ff60000
     bec:	4001f508 	.word	0x4001f508
     bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf4:	4682      	mov	sl, r0
     bf6:	4838      	ldr	r0, [pc, #224]	; (cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     bf8:	f009 f9b1 	bl	9f5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
     bfc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
     c00:	b128      	cbz	r0, c0e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
     c02:	2601      	movs	r6, #1
     c04:	f10b 0001 	add.w	r0, fp, #1
     c08:	21ff      	movs	r1, #255	; 0xff
     c0a:	7001      	strb	r1, [r0, #0]
     c0c:	e000      	b.n	c10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
     c0e:	2600      	movs	r6, #0
     c10:	f44f 7580 	mov.w	r5, #256	; 0x100
     c14:	4c31      	ldr	r4, [pc, #196]	; (cdc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
     c16:	f04f 0800 	mov.w	r8, #0
     c1a:	1d2f      	adds	r7, r5, #4
     c1c:	2101      	movs	r1, #1
     c1e:	6061      	str	r1, [r4, #4]
     c20:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     c24:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     c28:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
     c2c:	6021      	str	r1, [r4, #0]
     c2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; ce0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
     c32:	e01c      	b.n	c6e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c34:	f8d9 0000 	ldr.w	r0, [r9]
     c38:	06c0      	lsls	r0, r0, #27
     c3a:	d518      	bpl.n	c6e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c3c:	200e      	movs	r0, #14
     c3e:	f008 f938 	bl	8eb2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
     c42:	f3ef 8010 	mrs	r0, PRIMASK
     c46:	9000      	str	r0, [sp, #0]
     c48:	b672      	cpsid	i
     c4a:	2103      	movs	r1, #3
     c4c:	4620      	mov	r0, r4
     c4e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
     c52:	4629      	mov	r1, r5
     c54:	f008 f93a 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c58:	b930      	cbnz	r0, c68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     c5a:	4639      	mov	r1, r7
     c5c:	4620      	mov	r0, r4
     c5e:	f008 f935 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c62:	b908      	cbnz	r0, c68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     c64:	f009 fa12 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
     c68:	9800      	ldr	r0, [sp, #0]
     c6a:	b900      	cbnz	r0, c6e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c6c:	b662      	cpsie	i
     c6e:	4629      	mov	r1, r5
     c70:	4620      	mov	r0, r4
     c72:	f008 f92b 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c76:	b928      	cbnz	r0, c84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
     c78:	4639      	mov	r1, r7
     c7a:	4620      	mov	r0, r4
     c7c:	f008 f926 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c80:	2800      	cmp	r0, #0
     c82:	d0d7      	beq.n	c34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
     c84:	4639      	mov	r1, r7
     c86:	4620      	mov	r0, r4
     c88:	f008 f920 	bl	8ecc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c8c:	2800      	cmp	r0, #0
     c8e:	d1c5      	bne.n	c1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
     c90:	bb06      	cbnz	r6, cd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     c92:	f89b 1001 	ldrb.w	r1, [fp, #1]
     c96:	f88d 1000 	strb.w	r1, [sp]
     c9a:	9900      	ldr	r1, [sp, #0]
     c9c:	9100      	str	r1, [sp, #0]
     c9e:	f89d 1000 	ldrb.w	r1, [sp]
     ca2:	b109      	cbz	r1, ca8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
     ca4:	2501      	movs	r5, #1
     ca6:	e000      	b.n	caa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
     ca8:	2500      	movs	r5, #0
     caa:	f10b 0001 	add.w	r0, fp, #1
     cae:	f880 8000 	strb.w	r8, [r0]
     cb2:	2003      	movs	r0, #3
     cb4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
     cb8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     cbc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     cc0:	200e      	movs	r0, #14
     cc2:	f008 f8f6 	bl	8eb2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
     cc6:	4804      	ldr	r0, [pc, #16]	; (cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     cc8:	f009 f960 	bl	9f8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
     ccc:	b115      	cbz	r5, cd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     cce:	2011      	movs	r0, #17
     cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cd4:	2000      	movs	r0, #0
     cd6:	e7fb      	b.n	cd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
     cd8:	20000174 	.word	0x20000174
     cdc:	4000e000 	.word	0x4000e000
     ce0:	e000ed10 	.word	0xe000ed10

00000ce4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
     ce4:	b510      	push	{r4, lr}
     ce6:	4806      	ldr	r0, [pc, #24]	; (d00 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     ce8:	f009 f94c 	bl	9f84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
     cec:	b118      	cbz	r0, cf6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
     cee:	2130      	movs	r1, #48	; 0x30
     cf0:	201d      	movs	r0, #29
     cf2:	f7ff fb4f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     cf6:	4802      	ldr	r0, [pc, #8]	; (d00 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     cf8:	2100      	movs	r1, #0
     cfa:	7041      	strb	r1, [r0, #1]
     cfc:	bd10      	pop	{r4, pc}
     cfe:	0000      	.short	0x0000
     d00:	20000174 	.word	0x20000174

00000d04 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
     d04:	b570      	push	{r4, r5, r6, lr}
     d06:	4911      	ldr	r1, [pc, #68]	; (d4c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
     d08:	680a      	ldr	r2, [r1, #0]
     d0a:	b1ea      	cbz	r2, d48 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
     d0c:	2300      	movs	r3, #0
     d0e:	461d      	mov	r5, r3
     d10:	2401      	movs	r4, #1
     d12:	684a      	ldr	r2, [r1, #4]
     d14:	1c52      	adds	r2, r2, #1
     d16:	604a      	str	r2, [r1, #4]
     d18:	2a09      	cmp	r2, #9
     d1a:	d300      	bcc.n	d1e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
     d1c:	604d      	str	r5, [r1, #4]
     d1e:	790e      	ldrb	r6, [r1, #4]
     d20:	fa04 f206 	lsl.w	r2, r4, r6
     d24:	680e      	ldr	r6, [r1, #0]
     d26:	4216      	tst	r6, r2
     d28:	d00b      	beq.n	d42 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
     d2a:	f3ef 8310 	mrs	r3, PRIMASK
     d2e:	b672      	cpsid	i
     d30:	680c      	ldr	r4, [r1, #0]
     d32:	4394      	bics	r4, r2
     d34:	600c      	str	r4, [r1, #0]
     d36:	b903      	cbnz	r3, d3a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
     d38:	b662      	cpsie	i
     d3a:	6849      	ldr	r1, [r1, #4]
     d3c:	6001      	str	r1, [r0, #0]
     d3e:	2000      	movs	r0, #0
     d40:	bd70      	pop	{r4, r5, r6, pc}
     d42:	1c5b      	adds	r3, r3, #1
     d44:	2b09      	cmp	r3, #9
     d46:	d3e4      	bcc.n	d12 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
     d48:	2005      	movs	r0, #5
     d4a:	bd70      	pop	{r4, r5, r6, pc}
     d4c:	20000078 	.word	0x20000078

00000d50 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
     d50:	4802      	ldr	r0, [pc, #8]	; (d5c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
     d52:	2100      	movs	r1, #0
     d54:	6001      	str	r1, [r0, #0]
     d56:	6041      	str	r1, [r0, #4]
     d58:	4770      	bx	lr
     d5a:	0000      	.short	0x0000
     d5c:	20000078 	.word	0x20000078

00000d60 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
     d60:	b510      	push	{r4, lr}
     d62:	4c04      	ldr	r4, [pc, #16]	; (d74 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
     d64:	7820      	ldrb	r0, [r4, #0]
     d66:	28ff      	cmp	r0, #255	; 0xff
     d68:	d003      	beq.n	d72 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
     d6a:	f007 f8b5 	bl	7ed8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     d6e:	20ff      	movs	r0, #255	; 0xff
     d70:	7020      	strb	r0, [r4, #0]
     d72:	bd10      	pop	{r4, pc}
     d74:	20000000 	.word	0x20000000

00000d78 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
     d78:	b510      	push	{r4, lr}
     d7a:	4c08      	ldr	r4, [pc, #32]	; (d9c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
     d7c:	7861      	ldrb	r1, [r4, #1]
     d7e:	b109      	cbz	r1, d84 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
     d80:	200f      	movs	r0, #15
     d82:	bd10      	pop	{r4, pc}
     d84:	f007 f86e 	bl	7e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     d88:	7020      	strb	r0, [r4, #0]
     d8a:	28ff      	cmp	r0, #255	; 0xff
     d8c:	d001      	beq.n	d92 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
     d8e:	2000      	movs	r0, #0
     d90:	bd10      	pop	{r4, pc}
     d92:	2173      	movs	r1, #115	; 0x73
     d94:	201f      	movs	r0, #31
     d96:	f7ff fafd 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     d9a:	0000      	.short	0x0000
     d9c:	20000000 	.word	0x20000000

00000da0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
     da0:	4901      	ldr	r1, [pc, #4]	; (da8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
     da2:	2000      	movs	r0, #0
     da4:	7048      	strb	r0, [r1, #1]
     da6:	4770      	bx	lr
     da8:	20000000 	.word	0x20000000
     dac:	4905      	ldr	r1, [pc, #20]	; (dc4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
     dae:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
     db0:	4282      	cmp	r2, r0
     db2:	d105      	bne.n	dc0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
     db4:	2000      	movs	r0, #0
     db6:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
     dba:	f64f 70ff 	movw	r0, #65535	; 0xffff
     dbe:	8488      	strh	r0, [r1, #36]	; 0x24
     dc0:	4770      	bx	lr
     dc2:	0000      	.short	0x0000
     dc4:	20000e74 	.word	0x20000e74

00000dc8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
     dc8:	4a0a      	ldr	r2, [pc, #40]	; (df4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
     dca:	b110      	cbz	r0, dd2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
     dcc:	2801      	cmp	r0, #1
     dce:	d007      	beq.n	de0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
     dd0:	e00e      	b.n	df0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     dd2:	7850      	ldrb	r0, [r2, #1]
     dd4:	b160      	cbz	r0, df0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     dd6:	f8d2 0002 	ldr.w	r0, [r2, #2]
     dda:	6008      	str	r0, [r1, #0]
     ddc:	88d0      	ldrh	r0, [r2, #6]
     dde:	e004      	b.n	dea <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
     de0:	7810      	ldrb	r0, [r2, #0]
     de2:	b128      	cbz	r0, df0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     de4:	6890      	ldr	r0, [r2, #8]
     de6:	6008      	str	r0, [r1, #0]
     de8:	8990      	ldrh	r0, [r2, #12]
     dea:	8088      	strh	r0, [r1, #4]
     dec:	2001      	movs	r0, #1
     dee:	4770      	bx	lr
     df0:	2000      	movs	r0, #0
     df2:	4770      	bx	lr
     df4:	20000176 	.word	0x20000176

00000df8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
     df8:	4a08      	ldr	r2, [pc, #32]	; (e1c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
     dfa:	2301      	movs	r3, #1
     dfc:	b138      	cbz	r0, e0e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
     dfe:	2801      	cmp	r0, #1
     e00:	d104      	bne.n	e0c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
     e02:	7013      	strb	r3, [r2, #0]
     e04:	6808      	ldr	r0, [r1, #0]
     e06:	6090      	str	r0, [r2, #8]
     e08:	8888      	ldrh	r0, [r1, #4]
     e0a:	8190      	strh	r0, [r2, #12]
     e0c:	4770      	bx	lr
     e0e:	7053      	strb	r3, [r2, #1]
     e10:	6808      	ldr	r0, [r1, #0]
     e12:	f8c2 0002 	str.w	r0, [r2, #2]
     e16:	8888      	ldrh	r0, [r1, #4]
     e18:	80d0      	strh	r0, [r2, #6]
     e1a:	4770      	bx	lr
     e1c:	20000176 	.word	0x20000176

00000e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
     e20:	4906      	ldr	r1, [pc, #24]	; (e3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
     e22:	b110      	cbz	r0, e2a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
     e24:	2801      	cmp	r0, #1
     e26:	d002      	beq.n	e2e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
     e28:	e005      	b.n	e36 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
     e2a:	7848      	ldrb	r0, [r1, #1]
     e2c:	e000      	b.n	e30 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
     e2e:	7808      	ldrb	r0, [r1, #0]
     e30:	b108      	cbz	r0, e36 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
     e32:	2001      	movs	r0, #1
     e34:	4770      	bx	lr
     e36:	2000      	movs	r0, #0
     e38:	4770      	bx	lr
     e3a:	0000      	.short	0x0000
     e3c:	20000176 	.word	0x20000176

00000e40 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
     e40:	4901      	ldr	r1, [pc, #4]	; (e48 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
     e42:	7708      	strb	r0, [r1, #28]
     e44:	4770      	bx	lr
     e46:	0000      	.short	0x0000
     e48:	20000582 	.word	0x20000582

00000e4c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
     e4c:	4800      	ldr	r0, [pc, #0]	; (e50 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
     e4e:	4770      	bx	lr
     e50:	20001024 	.word	0x20001024

00000e54 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
     e54:	4904      	ldr	r1, [pc, #16]	; (e68 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
     e56:	784a      	ldrb	r2, [r1, #1]
     e58:	4282      	cmp	r2, r0
     e5a:	d903      	bls.n	e64 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
     e5c:	4408      	add	r0, r1
     e5e:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
     e62:	4770      	bx	lr
     e64:	2000      	movs	r0, #0
     e66:	4770      	bx	lr
     e68:	20000e9a 	.word	0x20000e9a

00000e6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
     e6c:	4904      	ldr	r1, [pc, #16]	; (e80 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
     e6e:	784a      	ldrb	r2, [r1, #1]
     e70:	4282      	cmp	r2, r0
     e72:	d903      	bls.n	e7c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
     e74:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     e78:	3082      	adds	r0, #130	; 0x82
     e7a:	4770      	bx	lr
     e7c:	2000      	movs	r0, #0
     e7e:	4770      	bx	lr
     e80:	20000e9a 	.word	0x20000e9a

00000e84 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
     e84:	4a05      	ldr	r2, [pc, #20]	; (e9c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
     e86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     e8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
     e8e:	6802      	ldr	r2, [r0, #0]
     e90:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
     e94:	8880      	ldrh	r0, [r0, #4]
     e96:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
     e9a:	4770      	bx	lr
     e9c:	20000e9a 	.word	0x20000e9a

00000ea0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
     ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ea4:	4607      	mov	r7, r0
     ea6:	2400      	movs	r4, #0
     ea8:	4d10      	ldr	r5, [pc, #64]	; (eec <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
     eaa:	e019      	b.n	ee0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
     eac:	4620      	mov	r0, r4
     eae:	f7ff ffdd 	bl	e6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
     eb2:	0003      	movs	r3, r0
     eb4:	d012      	beq.n	edc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
     eb6:	1928      	adds	r0, r5, r4
     eb8:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
     ebc:	b970      	cbnz	r0, edc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
     ebe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     ec2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
     ec6:	f506 7685 	add.w	r6, r6, #266	; 0x10a
     eca:	463a      	mov	r2, r7
     ecc:	4631      	mov	r1, r6
     ece:	4618      	mov	r0, r3
     ed0:	f008 f845 	bl	8f5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
     ed4:	4630      	mov	r0, r6
     ed6:	4621      	mov	r1, r4
     ed8:	f7ff ffd4 	bl	e84 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
     edc:	1c64      	adds	r4, r4, #1
     ede:	b2e4      	uxtb	r4, r4
     ee0:	7868      	ldrb	r0, [r5, #1]
     ee2:	42a0      	cmp	r0, r4
     ee4:	d8e2      	bhi.n	eac <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
     ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     eea:	0000      	.short	0x0000
     eec:	20000e9a 	.word	0x20000e9a

00000ef0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
     ef0:	4904      	ldr	r1, [pc, #16]	; (f04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
     ef2:	784a      	ldrb	r2, [r1, #1]
     ef4:	4282      	cmp	r2, r0
     ef6:	d903      	bls.n	f00 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
     ef8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     efc:	1c80      	adds	r0, r0, #2
     efe:	4770      	bx	lr
     f00:	2000      	movs	r0, #0
     f02:	4770      	bx	lr
     f04:	20000e9a 	.word	0x20000e9a

00000f08 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
     f08:	4908      	ldr	r1, [pc, #32]	; (f2c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
     f0a:	784a      	ldrb	r2, [r1, #1]
     f0c:	4282      	cmp	r2, r0
     f0e:	d903      	bls.n	f18 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
     f10:	180a      	adds	r2, r1, r0
     f12:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
     f16:	b10a      	cbz	r2, f1c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
     f18:	2000      	movs	r0, #0
     f1a:	4770      	bx	lr
     f1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     f20:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f24:	f500 7085 	add.w	r0, r0, #266	; 0x10a
     f28:	4770      	bx	lr
     f2a:	0000      	.short	0x0000
     f2c:	20000e9a 	.word	0x20000e9a

00000f30 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
     f30:	b510      	push	{r4, lr}
     f32:	f44f 72c5 	mov.w	r2, #394	; 0x18a
     f36:	2100      	movs	r1, #0
     f38:	4805      	ldr	r0, [pc, #20]	; (f50 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
     f3a:	f009 f97b 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     f3e:	4805      	ldr	r0, [pc, #20]	; (f54 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
     f40:	2100      	movs	r1, #0
     f42:	7001      	strb	r1, [r0, #0]
     f44:	7041      	strb	r1, [r0, #1]
     f46:	f44f 7161 	mov.w	r1, #900	; 0x384
     f4a:	8041      	strh	r1, [r0, #2]
     f4c:	bd10      	pop	{r4, pc}
     f4e:	0000      	.short	0x0000
     f50:	20000e9a 	.word	0x20000e9a
     f54:	2000016c 	.word	0x2000016c

00000f58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
     f58:	4b0b      	ldr	r3, [pc, #44]	; (f88 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
     f5a:	b510      	push	{r4, lr}
     f5c:	785c      	ldrb	r4, [r3, #1]
     f5e:	4284      	cmp	r4, r0
     f60:	d910      	bls.n	f84 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
     f62:	4418      	add	r0, r3
     f64:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
     f68:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     f6c:	4418      	add	r0, r3
     f6e:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
     f72:	700b      	strb	r3, [r1, #0]
     f74:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
     f78:	6011      	str	r1, [r2, #0]
     f7a:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
     f7e:	8090      	strh	r0, [r2, #4]
     f80:	2001      	movs	r0, #1
     f82:	bd10      	pop	{r4, pc}
     f84:	2000      	movs	r0, #0
     f86:	bd10      	pop	{r4, pc}
     f88:	20000e9a 	.word	0x20000e9a

00000f8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
     f8c:	4801      	ldr	r0, [pc, #4]	; (f94 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
     f8e:	8840      	ldrh	r0, [r0, #2]
     f90:	4770      	bx	lr
     f92:	0000      	.short	0x0000
     f94:	2000016c 	.word	0x2000016c

00000f98 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	2401      	movs	r4, #1
     f9c:	4616      	mov	r6, r2
     f9e:	4625      	mov	r5, r4
     fa0:	f000 f856 	bl	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
     fa4:	2808      	cmp	r0, #8
     fa6:	d019      	beq.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fa8:	f000 f83e 	bl	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fac:	4603      	mov	r3, r0
     fae:	2808      	cmp	r0, #8
     fb0:	d014      	beq.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fb2:	b106      	cbz	r6, fb6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x16>
     fb4:	7033      	strb	r3, [r6, #0]
     fb6:	4618      	mov	r0, r3
     fb8:	f7ff ff9a 	bl	ef0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
     fbc:	b170      	cbz	r0, fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fbe:	480a      	ldr	r0, [pc, #40]	; (fe8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x48>)
     fc0:	7841      	ldrb	r1, [r0, #1]
     fc2:	4299      	cmp	r1, r3
     fc4:	d903      	bls.n	fce <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2e>
     fc6:	18c1      	adds	r1, r0, r3
     fc8:	f891 514a 	ldrb.w	r5, [r1, #330]	; 0x14a
     fcc:	e000      	b.n	fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
     fce:	2500      	movs	r5, #0
     fd0:	4418      	add	r0, r3
     fd2:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
     fd6:	2801      	cmp	r0, #1
     fd8:	d003      	beq.n	fe2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x42>
     fda:	2400      	movs	r4, #0
     fdc:	ea44 0005 	orr.w	r0, r4, r5
     fe0:	bd70      	pop	{r4, r5, r6, pc}
     fe2:	2401      	movs	r4, #1
     fe4:	e7fa      	b.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fe6:	0000      	.short	0x0000
     fe8:	20000e9a 	.word	0x20000e9a

00000fec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
     fec:	4901      	ldr	r1, [pc, #4]	; (ff4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
     fee:	7048      	strb	r0, [r1, #1]
     ff0:	4770      	bx	lr
     ff2:	0000      	.short	0x0000
     ff4:	2000016c 	.word	0x2000016c
     ff8:	4602      	mov	r2, r0
     ffa:	4809      	ldr	r0, [pc, #36]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     ffc:	b510      	push	{r4, lr}
     ffe:	7800      	ldrb	r0, [r0, #0]
    1000:	460b      	mov	r3, r1
    1002:	b158      	cbz	r0, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1004:	4807      	ldr	r0, [pc, #28]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1006:	7841      	ldrb	r1, [r0, #1]
    1008:	b141      	cbz	r1, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    100a:	b10b      	cbz	r3, 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    100c:	1c80      	adds	r0, r0, #2
    100e:	e001      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    1010:	4804      	ldr	r0, [pc, #16]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1012:	3082      	adds	r0, #130	; 0x82
    1014:	f002 fa2e 	bl	3474 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    1018:	2001      	movs	r0, #1
    101a:	bd10      	pop	{r4, pc}
    101c:	2000      	movs	r0, #0
    101e:	bd10      	pop	{r4, pc}
    1020:	2000016c 	.word	0x2000016c
    1024:	20000e9a 	.word	0x20000e9a
    1028:	4908      	ldr	r1, [pc, #32]	; (104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
    102a:	b510      	push	{r4, lr}
    102c:	4603      	mov	r3, r0
    102e:	2000      	movs	r0, #0
    1030:	784a      	ldrb	r2, [r1, #1]
    1032:	e006      	b.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    1034:	180c      	adds	r4, r1, r0
    1036:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    103a:	429c      	cmp	r4, r3
    103c:	d004      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    103e:	1c40      	adds	r0, r0, #1
    1040:	b2c0      	uxtb	r0, r0
    1042:	4282      	cmp	r2, r0
    1044:	d8f6      	bhi.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    1046:	2008      	movs	r0, #8
    1048:	bd10      	pop	{r4, pc}
    104a:	0000      	.short	0x0000
    104c:	20000e9a 	.word	0x20000e9a
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	4c1a      	ldr	r4, [pc, #104]	; (10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    1054:	4603      	mov	r3, r0
    1056:	2000      	movs	r0, #0
    1058:	7825      	ldrb	r5, [r4, #0]
    105a:	e02b      	b.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    105c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    1060:	4422      	add	r2, r4
    1062:	780f      	ldrb	r7, [r1, #0]
    1064:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    1068:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    106c:	ea87 070c 	eor.w	r7, r7, ip
    1070:	405e      	eors	r6, r3
    1072:	443e      	add	r6, r7
    1074:	784f      	ldrb	r7, [r1, #1]
    1076:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    107a:	ea87 070c 	eor.w	r7, r7, ip
    107e:	443e      	add	r6, r7
    1080:	788f      	ldrb	r7, [r1, #2]
    1082:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    1086:	ea87 070c 	eor.w	r7, r7, ip
    108a:	443e      	add	r6, r7
    108c:	78cf      	ldrb	r7, [r1, #3]
    108e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    1092:	ea87 070c 	eor.w	r7, r7, ip
    1096:	443e      	add	r6, r7
    1098:	790f      	ldrb	r7, [r1, #4]
    109a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    109e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    10a2:	ea87 070c 	eor.w	r7, r7, ip
    10a6:	443e      	add	r6, r7
    10a8:	794f      	ldrb	r7, [r1, #5]
    10aa:	4057      	eors	r7, r2
    10ac:	42f7      	cmn	r7, r6
    10ae:	d004      	beq.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10b0:	1c40      	adds	r0, r0, #1
    10b2:	b2c0      	uxtb	r0, r0
    10b4:	4285      	cmp	r5, r0
    10b6:	d8d1      	bhi.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    10b8:	2008      	movs	r0, #8
    10ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10bc:	20000e9a 	.word	0x20000e9a

000010c0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    10c0:	4902      	ldr	r1, [pc, #8]	; (10cc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    10c2:	f991 1000 	ldrsb.w	r1, [r1]
    10c6:	f008 b844 	b.w	9152 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    10ca:	0000      	.short	0x0000
    10cc:	20000184 	.word	0x20000184

000010d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    10d0:	b508      	push	{r3, lr}
    10d2:	207f      	movs	r0, #127	; 0x7f
    10d4:	f88d 0000 	strb.w	r0, [sp]
    10d8:	4668      	mov	r0, sp
    10da:	f002 fdaf 	bl	3c3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    10de:	b140      	cbz	r0, 10f2 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    10e0:	4805      	ldr	r0, [pc, #20]	; (10f8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    10e2:	7840      	ldrb	r0, [r0, #1]
    10e4:	4240      	negs	r0, r0
    10e6:	b241      	sxtb	r1, r0
    10e8:	f99d 0000 	ldrsb.w	r0, [sp]
    10ec:	f008 f831 	bl	9152 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    10f0:	bd08      	pop	{r3, pc}
    10f2:	f99d 0000 	ldrsb.w	r0, [sp]
    10f6:	bd08      	pop	{r3, pc}
    10f8:	20000184 	.word	0x20000184

000010fc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    10fc:	4a01      	ldr	r2, [pc, #4]	; (1104 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    10fe:	7010      	strb	r0, [r2, #0]
    1100:	7051      	strb	r1, [r2, #1]
    1102:	4770      	bx	lr
    1104:	20000184 	.word	0x20000184

00001108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    1108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    110c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 12b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ac>
    1110:	4f69      	ldr	r7, [pc, #420]	; (12b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    1112:	4683      	mov	fp, r0
    1114:	f04f 0a01 	mov.w	sl, #1
    1118:	2600      	movs	r6, #0
    111a:	6878      	ldr	r0, [r7, #4]
    111c:	4635      	mov	r5, r6
    111e:	7a00      	ldrb	r0, [r0, #8]
    1120:	f88d 0000 	strb.w	r0, [sp]
    1124:	9800      	ldr	r0, [sp, #0]
    1126:	9000      	str	r0, [sp, #0]
    1128:	f89d 1000 	ldrb.w	r1, [sp]
    112c:	2910      	cmp	r1, #16
    112e:	d106      	bne.n	113e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1130:	f899 1013 	ldrb.w	r1, [r9, #19]
    1134:	b119      	cbz	r1, 113e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1136:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    113a:	2800      	cmp	r0, #0
    113c:	d077      	beq.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    113e:	f88d 6000 	strb.w	r6, [sp]
    1142:	4668      	mov	r0, sp
    1144:	f000 f8c2 	bl	12cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    1148:	f89d 1000 	ldrb.w	r1, [sp]
    114c:	2900      	cmp	r1, #0
    114e:	d1f8      	bne.n	1142 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1150:	2800      	cmp	r0, #0
    1152:	d06c      	beq.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1154:	4604      	mov	r4, r0
    1156:	7a00      	ldrb	r0, [r0, #8]
    1158:	f88d 0000 	strb.w	r0, [sp]
    115c:	9800      	ldr	r0, [sp, #0]
    115e:	9000      	str	r0, [sp, #0]
    1160:	f89d 8000 	ldrb.w	r8, [sp]
    1164:	f104 0008 	add.w	r0, r4, #8
    1168:	2105      	movs	r1, #5
    116a:	9000      	str	r0, [sp, #0]
    116c:	7001      	strb	r1, [r0, #0]
    116e:	4640      	mov	r0, r8
    1170:	f1b8 0f06 	cmp.w	r8, #6
    1174:	d030      	beq.n	11d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd0>
    1176:	dc07      	bgt.n	1188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    1178:	2802      	cmp	r0, #2
    117a:	d00f      	beq.n	119c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    117c:	2803      	cmp	r0, #3
    117e:	d019      	beq.n	11b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    1180:	f1b8 0f04 	cmp.w	r8, #4
    1184:	d107      	bne.n	1196 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8e>
    1186:	e01f      	b.n	11c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    1188:	2808      	cmp	r0, #8
    118a:	d035      	beq.n	11f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    118c:	280f      	cmp	r0, #15
    118e:	d052      	beq.n	1236 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    1190:	f1b8 0f10 	cmp.w	r8, #16
    1194:	d059      	beq.n	124a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    1196:	f240 214a 	movw	r1, #586	; 0x24a
    119a:	e064      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    119c:	6862      	ldr	r2, [r4, #4]
    119e:	b132      	cbz	r2, 11ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    11a0:	4659      	mov	r1, fp
    11a2:	4620      	mov	r0, r4
    11a4:	4790      	blx	r2
    11a6:	2004      	movs	r0, #4
    11a8:	f360 0507 	bfi	r5, r0, #0, #8
    11ac:	e05e      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11ae:	f240 11c3 	movw	r1, #451	; 0x1c3
    11b2:	e058      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11b4:	6862      	ldr	r2, [r4, #4]
    11b6:	b122      	cbz	r2, 11c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xba>
    11b8:	4659      	mov	r1, fp
    11ba:	4620      	mov	r0, r4
    11bc:	4790      	blx	r2
    11be:	4605      	mov	r5, r0
    11c0:	e054      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11c2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    11c6:	e04e      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11c8:	6861      	ldr	r1, [r4, #4]
    11ca:	b111      	cbz	r1, 11d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    11cc:	4620      	mov	r0, r4
    11ce:	4788      	blx	r1
    11d0:	e04c      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11d2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    11d6:	e046      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11d8:	6862      	ldr	r2, [r4, #4]
    11da:	b132      	cbz	r2, 11ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    11dc:	4659      	mov	r1, fp
    11de:	4620      	mov	r0, r4
    11e0:	4790      	blx	r2
    11e2:	f001 fad1 	bl	2788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    11e6:	b118      	cbz	r0, 11f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    11e8:	e01f      	b.n	122a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    11ea:	f240 2111 	movw	r1, #529	; 0x211
    11ee:	e03a      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11f0:	f000 fac4 	bl	177c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    11f4:	b3a0      	cbz	r0, 1260 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    11f6:	e018      	b.n	122a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    11f8:	4601      	mov	r1, r0
    11fa:	6860      	ldr	r0, [r4, #4]
    11fc:	465d      	mov	r5, fp
    11fe:	b118      	cbz	r0, 1208 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    1200:	8804      	ldrh	r4, [r0, #0]
    1202:	2908      	cmp	r1, #8
    1204:	d111      	bne.n	122a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    1206:	e001      	b.n	120c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    1208:	21e5      	movs	r1, #229	; 0xe5
    120a:	e02c      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    120c:	4620      	mov	r0, r4
    120e:	f7ff fc5d 	bl	acc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1212:	b170      	cbz	r0, 1232 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1214:	706e      	strb	r6, [r5, #1]
    1216:	220f      	movs	r2, #15
    1218:	702a      	strb	r2, [r5, #0]
    121a:	80ec      	strh	r4, [r5, #6]
    121c:	f8a5 a008 	strh.w	sl, [r5, #8]
    1220:	4631      	mov	r1, r6
    1222:	f885 a004 	strb.w	sl, [r5, #4]
    1226:	f007 fd46 	bl	8cb6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    122a:	2004      	movs	r0, #4
    122c:	613e      	str	r6, [r7, #16]
    122e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1232:	21c5      	movs	r1, #197	; 0xc5
    1234:	e017      	b.n	1266 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    1236:	f88b 6001 	strb.w	r6, [fp, #1]
    123a:	211a      	movs	r1, #26
    123c:	f88b 1000 	strb.w	r1, [fp]
    1240:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1244:	f8cb 1004 	str.w	r1, [fp, #4]
    1248:	e7ad      	b.n	11a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    124a:	481c      	ldr	r0, [pc, #112]	; (12bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>)
    124c:	6802      	ldr	r2, [r0, #0]
    124e:	b122      	cbz	r2, 125a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    1250:	6860      	ldr	r0, [r4, #4]
    1252:	b130      	cbz	r0, 1262 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15a>
    1254:	8800      	ldrh	r0, [r0, #0]
    1256:	4659      	mov	r1, fp
    1258:	4790      	blx	r2
    125a:	2002      	movs	r0, #2
    125c:	613e      	str	r6, [r7, #16]
    125e:	e7e6      	b.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1260:	e004      	b.n	126c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    1262:	f44f 7110 	mov.w	r1, #576	; 0x240
    1266:	2010      	movs	r0, #16
    1268:	f7ff f894 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    126c:	f3c5 2007 	ubfx	r0, r5, #8, #8
    1270:	2801      	cmp	r0, #1
    1272:	d010      	beq.n	1296 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    1274:	f3ef 8010 	mrs	r0, PRIMASK
    1278:	b672      	cpsid	i
    127a:	7a21      	ldrb	r1, [r4, #8]
    127c:	f88d 1000 	strb.w	r1, [sp]
    1280:	9900      	ldr	r1, [sp, #0]
    1282:	9100      	str	r1, [sp, #0]
    1284:	f89d 1000 	ldrb.w	r1, [sp]
    1288:	2905      	cmp	r1, #5
    128a:	d008      	beq.n	129e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    128c:	b139      	cbz	r1, 129e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    128e:	f366 0507 	bfi	r5, r6, #0, #8
    1292:	b138      	cbz	r0, 12a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    1294:	e007      	b.n	12a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    1296:	9800      	ldr	r0, [sp, #0]
    1298:	4641      	mov	r1, r8
    129a:	7001      	strb	r1, [r0, #0]
    129c:	e003      	b.n	12a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    129e:	7226      	strb	r6, [r4, #8]
    12a0:	613e      	str	r6, [r7, #16]
    12a2:	e7f6      	b.n	1292 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18a>
    12a4:	b662      	cpsie	i
    12a6:	f015 0fff 	tst.w	r5, #255	; 0xff
    12aa:	f43f af36 	beq.w	111a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    12ae:	b2e8      	uxtb	r0, r5
    12b0:	e7bd      	b.n	122e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    12b2:	0000      	.short	0x0000
    12b4:	20000db4 	.word	0x20000db4
    12b8:	20000de0 	.word	0x20000de0
    12bc:	20000080 	.word	0x20000080

000012c0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    12c0:	4901      	ldr	r1, [pc, #4]	; (12c8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    12c2:	7008      	strb	r0, [r1, #0]
    12c4:	f000 b864 	b.w	1390 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    12c8:	20000186 	.word	0x20000186
    12cc:	b538      	push	{r3, r4, r5, lr}
    12ce:	4603      	mov	r3, r0
    12d0:	4917      	ldr	r1, [pc, #92]	; (1330 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    12d2:	2000      	movs	r0, #0
    12d4:	7018      	strb	r0, [r3, #0]
    12d6:	6908      	ldr	r0, [r1, #16]
    12d8:	2401      	movs	r4, #1
    12da:	b140      	cbz	r0, 12ee <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    12dc:	7a02      	ldrb	r2, [r0, #8]
    12de:	f88d 2000 	strb.w	r2, [sp]
    12e2:	9a00      	ldr	r2, [sp, #0]
    12e4:	9200      	str	r2, [sp, #0]
    12e6:	f89d 5000 	ldrb.w	r5, [sp]
    12ea:	2d00      	cmp	r5, #0
    12ec:	d111      	bne.n	1312 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    12ee:	6848      	ldr	r0, [r1, #4]
    12f0:	7a02      	ldrb	r2, [r0, #8]
    12f2:	f88d 2000 	strb.w	r2, [sp]
    12f6:	9a00      	ldr	r2, [sp, #0]
    12f8:	9200      	str	r2, [sp, #0]
    12fa:	f89d 5000 	ldrb.w	r5, [sp]
    12fe:	2d01      	cmp	r5, #1
    1300:	d006      	beq.n	1310 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    1302:	f3ef 8210 	mrs	r2, PRIMASK
    1306:	b672      	cpsid	i
    1308:	6805      	ldr	r5, [r0, #0]
    130a:	604d      	str	r5, [r1, #4]
    130c:	b112      	cbz	r2, 1314 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    130e:	e002      	b.n	1316 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    1310:	2000      	movs	r0, #0
    1312:	bd38      	pop	{r3, r4, r5, pc}
    1314:	b662      	cpsie	i
    1316:	7a02      	ldrb	r2, [r0, #8]
    1318:	f88d 2000 	strb.w	r2, [sp]
    131c:	9a00      	ldr	r2, [sp, #0]
    131e:	9200      	str	r2, [sp, #0]
    1320:	f89d 5000 	ldrb.w	r5, [sp]
    1324:	b10d      	cbz	r5, 132a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    1326:	6108      	str	r0, [r1, #16]
    1328:	bd38      	pop	{r3, r4, r5, pc}
    132a:	701c      	strb	r4, [r3, #0]
    132c:	bd38      	pop	{r3, r4, r5, pc}
    132e:	0000      	.short	0x0000
    1330:	20000de0 	.word	0x20000de0
    1334:	b538      	push	{r3, r4, r5, lr}
    1336:	b1d0      	cbz	r0, 136e <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    1338:	6041      	str	r1, [r0, #4]
    133a:	f100 0108 	add.w	r1, r0, #8
    133e:	700a      	strb	r2, [r1, #0]
    1340:	f3ef 8310 	mrs	r3, PRIMASK
    1344:	b672      	cpsid	i
    1346:	4c10      	ldr	r4, [pc, #64]	; (1388 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    1348:	6004      	str	r4, [r0, #0]
    134a:	1f21      	subs	r1, r4, #4
    134c:	684a      	ldr	r2, [r1, #4]
    134e:	b14a      	cbz	r2, 1364 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1350:	7a12      	ldrb	r2, [r2, #8]
    1352:	f88d 2000 	strb.w	r2, [sp]
    1356:	9a00      	ldr	r2, [sp, #0]
    1358:	9200      	str	r2, [sp, #0]
    135a:	f89d 5000 	ldrb.w	r5, [sp]
    135e:	2d01      	cmp	r5, #1
    1360:	d100      	bne.n	1364 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1362:	600c      	str	r4, [r1, #0]
    1364:	680a      	ldr	r2, [r1, #0]
    1366:	6010      	str	r0, [r2, #0]
    1368:	6008      	str	r0, [r1, #0]
    136a:	b12b      	cbz	r3, 1378 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    136c:	e005      	b.n	137a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    136e:	f240 2175 	movw	r1, #629	; 0x275
    1372:	2010      	movs	r0, #16
    1374:	f7ff f80e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1378:	b662      	cpsie	i
    137a:	4804      	ldr	r0, [pc, #16]	; (138c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    137c:	7800      	ldrb	r0, [r0, #0]
    137e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1382:	f006 bd8d 	b.w	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1386:	0000      	.short	0x0000
    1388:	20000de4 	.word	0x20000de4
    138c:	20000186 	.word	0x20000186
    1390:	b510      	push	{r4, lr}
    1392:	2214      	movs	r2, #20
    1394:	2100      	movs	r1, #0
    1396:	4808      	ldr	r0, [pc, #32]	; (13b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1398:	f008 ff4c 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    139c:	4806      	ldr	r0, [pc, #24]	; (13b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    139e:	2212      	movs	r2, #18
    13a0:	2100      	movs	r1, #0
    13a2:	3814      	subs	r0, #20
    13a4:	f008 ff46 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    13a8:	4803      	ldr	r0, [pc, #12]	; (13b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    13aa:	2101      	movs	r1, #1
    13ac:	7301      	strb	r1, [r0, #12]
    13ae:	1d01      	adds	r1, r0, #4
    13b0:	6041      	str	r1, [r0, #4]
    13b2:	6001      	str	r1, [r0, #0]
    13b4:	bd10      	pop	{r4, pc}
    13b6:	0000      	.short	0x0000
    13b8:	20000de0 	.word	0x20000de0

000013bc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    13bc:	b510      	push	{r4, lr}
    13be:	4804      	ldr	r0, [pc, #16]	; (13d0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    13c0:	f007 ff46 	bl	9250 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    13c4:	4802      	ldr	r0, [pc, #8]	; (13d0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    13c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    13ca:	3008      	adds	r0, #8
    13cc:	f007 bf40 	b.w	9250 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    13d0:	20000084 	.word	0x20000084

000013d4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    13d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13d6:	f007 ff4f 	bl	9278 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    13da:	4604      	mov	r4, r0
    13dc:	460d      	mov	r5, r1
    13de:	466a      	mov	r2, sp
    13e0:	f000 f862 	bl	14a8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    13e4:	b108      	cbz	r0, 13ea <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    13e6:	2001      	movs	r0, #1
    13e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ea:	480f      	ldr	r0, [pc, #60]	; (1428 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    13ec:	7803      	ldrb	r3, [r0, #0]
    13ee:	7841      	ldrb	r1, [r0, #1]
    13f0:	428b      	cmp	r3, r1
    13f2:	d101      	bne.n	13f8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    13f4:	2000      	movs	r0, #0
    13f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f8:	461a      	mov	r2, r3
    13fa:	6841      	ldr	r1, [r0, #4]
    13fc:	e008      	b.n	1410 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    13fe:	bf00      	nop
    1400:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1404:	1e52      	subs	r2, r2, #1
    1406:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    140a:	e9c6 7c00 	strd	r7, ip, [r6]
    140e:	b2d2      	uxtb	r2, r2
    1410:	f89d 6000 	ldrb.w	r6, [sp]
    1414:	42b2      	cmp	r2, r6
    1416:	d8f3      	bhi.n	1400 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    1418:	b2f2      	uxtb	r2, r6
    141a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    141e:	1c5b      	adds	r3, r3, #1
    1420:	e9c1 4500 	strd	r4, r5, [r1]
    1424:	7003      	strb	r3, [r0, #0]
    1426:	e7de      	b.n	13e6 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    1428:	20000094 	.word	0x20000094

0000142c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    142c:	b510      	push	{r4, lr}
    142e:	0742      	lsls	r2, r0, #29
    1430:	d003      	beq.n	143a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    1432:	2163      	movs	r1, #99	; 0x63
    1434:	2048      	movs	r0, #72	; 0x48
    1436:	f7fe ffad 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    143a:	b120      	cbz	r0, 1446 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    143c:	4a03      	ldr	r2, [pc, #12]	; (144c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    143e:	7051      	strb	r1, [r2, #1]
    1440:	6050      	str	r0, [r2, #4]
    1442:	2000      	movs	r0, #0
    1444:	7010      	strb	r0, [r2, #0]
    1446:	00c8      	lsls	r0, r1, #3
    1448:	bd10      	pop	{r4, pc}
    144a:	0000      	.short	0x0000
    144c:	20000094 	.word	0x20000094

00001450 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    1450:	b538      	push	{r3, r4, r5, lr}
    1452:	f007 ff11 	bl	9278 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    1456:	466a      	mov	r2, sp
    1458:	f000 f826 	bl	14a8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    145c:	2800      	cmp	r0, #0
    145e:	d014      	beq.n	148a <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    1460:	4a0a      	ldr	r2, [pc, #40]	; (148c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    1462:	7810      	ldrb	r0, [r2, #0]
    1464:	1e40      	subs	r0, r0, #1
    1466:	b2c1      	uxtb	r1, r0
    1468:	7011      	strb	r1, [r2, #0]
    146a:	f89d 0000 	ldrb.w	r0, [sp]
    146e:	6852      	ldr	r2, [r2, #4]
    1470:	e008      	b.n	1484 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    1472:	bf00      	nop
    1474:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    1478:	1c40      	adds	r0, r0, #1
    147a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    147e:	e9c3 4500 	strd	r4, r5, [r3]
    1482:	b2c0      	uxtb	r0, r0
    1484:	4288      	cmp	r0, r1
    1486:	d3f5      	bcc.n	1474 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    1488:	2001      	movs	r0, #1
    148a:	bd38      	pop	{r3, r4, r5, pc}
    148c:	20000094 	.word	0x20000094

00001490 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    1490:	4901      	ldr	r1, [pc, #4]	; (1498 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    1492:	2000      	movs	r0, #0
    1494:	7008      	strb	r0, [r1, #0]
    1496:	4770      	bx	lr
    1498:	20000094 	.word	0x20000094

0000149c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    149c:	4801      	ldr	r0, [pc, #4]	; (14a4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    149e:	7840      	ldrb	r0, [r0, #1]
    14a0:	4770      	bx	lr
    14a2:	0000      	.short	0x0000
    14a4:	20000094 	.word	0x20000094
    14a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14aa:	4d20      	ldr	r5, [pc, #128]	; (152c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    14ac:	2300      	movs	r3, #0
    14ae:	7013      	strb	r3, [r2, #0]
    14b0:	782b      	ldrb	r3, [r5, #0]
    14b2:	b323      	cbz	r3, 14fe <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    14b4:	2400      	movs	r4, #0
    14b6:	1e5b      	subs	r3, r3, #1
    14b8:	b2db      	uxtb	r3, r3
    14ba:	f8d5 c004 	ldr.w	ip, [r5, #4]
    14be:	e00b      	b.n	14d8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    14c0:	18e5      	adds	r5, r4, r3
    14c2:	086d      	lsrs	r5, r5, #1
    14c4:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    14c8:	e9d6 7600 	ldrd	r7, r6, [r6]
    14cc:	1a3f      	subs	r7, r7, r0
    14ce:	418e      	sbcs	r6, r1
    14d0:	d201      	bcs.n	14d6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    14d2:	462c      	mov	r4, r5
    14d4:	e000      	b.n	14d8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    14d6:	462b      	mov	r3, r5
    14d8:	1b1d      	subs	r5, r3, r4
    14da:	2d01      	cmp	r5, #1
    14dc:	dcf0      	bgt.n	14c0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    14de:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    14e2:	e9d6 5600 	ldrd	r5, r6, [r6]
    14e6:	ea80 0705 	eor.w	r7, r0, r5
    14ea:	ea81 0e06 	eor.w	lr, r1, r6
    14ee:	ea57 070e 	orrs.w	r7, r7, lr
    14f2:	d005      	beq.n	1500 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    14f4:	1b45      	subs	r5, r0, r5
    14f6:	eb71 0506 	sbcs.w	r5, r1, r6
    14fa:	d203      	bcs.n	1504 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    14fc:	7014      	strb	r4, [r2, #0]
    14fe:	e010      	b.n	1522 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    1500:	7014      	strb	r4, [r2, #0]
    1502:	e011      	b.n	1528 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    1504:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    1508:	e9d5 4500 	ldrd	r4, r5, [r5]
    150c:	ea80 0604 	eor.w	r6, r0, r4
    1510:	ea81 0705 	eor.w	r7, r1, r5
    1514:	433e      	orrs	r6, r7
    1516:	d006      	beq.n	1526 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    1518:	1b00      	subs	r0, r0, r4
    151a:	41a9      	sbcs	r1, r5
    151c:	d300      	bcc.n	1520 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    151e:	1c5b      	adds	r3, r3, #1
    1520:	7013      	strb	r3, [r2, #0]
    1522:	2000      	movs	r0, #0
    1524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1526:	7013      	strb	r3, [r2, #0]
    1528:	2001      	movs	r0, #1
    152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    152c:	20000094 	.word	0x20000094

00001530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    1530:	4801      	ldr	r0, [pc, #4]	; (1538 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    1532:	6840      	ldr	r0, [r0, #4]
    1534:	30a0      	adds	r0, #160	; 0xa0
    1536:	4770      	bx	lr
    1538:	2000009c 	.word	0x2000009c

0000153c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    153c:	b510      	push	{r4, lr}
    153e:	4c21      	ldr	r4, [pc, #132]	; (15c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    1540:	6860      	ldr	r0, [r4, #4]
    1542:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    1546:	f007 fec7 	bl	92d8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    154a:	6861      	ldr	r1, [r4, #4]
    154c:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    1550:	314a      	adds	r1, #74	; 0x4a
    1552:	f7ff fc39 	bl	dc8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    1556:	6860      	ldr	r0, [r4, #4]
    1558:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    155c:	f007 fec3 	bl	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    1560:	6861      	ldr	r1, [r4, #4]
    1562:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    1566:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    156a:	314a      	adds	r1, #74	; 0x4a
    156c:	f007 fea0 	bl	92b0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    1570:	b930      	cbnz	r0, 1580 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    1572:	6861      	ldr	r1, [r4, #4]
    1574:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1578:	314a      	adds	r1, #74	; 0x4a
    157a:	f007 fea2 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    157e:	b108      	cbz	r0, 1584 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    1580:	2101      	movs	r1, #1
    1582:	e000      	b.n	1586 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    1584:	2100      	movs	r1, #0
    1586:	6860      	ldr	r0, [r4, #4]
    1588:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    158c:	b919      	cbnz	r1, 1596 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    158e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1592:	2800      	cmp	r0, #0
    1594:	d014      	beq.n	15c0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    1596:	f7ff fcf9 	bl	f8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    159a:	490b      	ldr	r1, [pc, #44]	; (15c8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    159c:	fba0 2301 	umull	r2, r3, r0, r1
    15a0:	6860      	ldr	r0, [r4, #4]
    15a2:	3090      	adds	r0, #144	; 0x90
    15a4:	f007 fefd 	bl	93a2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    15a8:	6860      	ldr	r0, [r4, #4]
    15aa:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    15ae:	b110      	cbz	r0, 15b6 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    15b0:	2000      	movs	r0, #0
    15b2:	f7ff fc75 	bl	ea0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    15b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15ba:	2000      	movs	r0, #0
    15bc:	f000 bcc0 	b.w	1f40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>
    15c0:	bd10      	pop	{r4, pc}
    15c2:	0000      	.short	0x0000
    15c4:	2000009c 	.word	0x2000009c
    15c8:	000f4240 	.word	0x000f4240

000015cc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    15cc:	4a04      	ldr	r2, [pc, #16]	; (15e0 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    15ce:	2803      	cmp	r0, #3
    15d0:	6852      	ldr	r2, [r2, #4]
    15d2:	d100      	bne.n	15d6 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    15d4:	6551      	str	r1, [r2, #84]	; 0x54
    15d6:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    15da:	2000      	movs	r0, #0
    15dc:	4770      	bx	lr
    15de:	0000      	.short	0x0000
    15e0:	2000009c 	.word	0x2000009c

000015e4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    15e4:	480a      	ldr	r0, [pc, #40]	; (1610 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    15e6:	6841      	ldr	r1, [r0, #4]
    15e8:	6e88      	ldr	r0, [r1, #104]	; 0x68
    15ea:	b170      	cbz	r0, 160a <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    15ec:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    15f0:	22ff      	movs	r2, #255	; 0xff
    15f2:	7002      	strb	r2, [r0, #0]
    15f4:	2200      	movs	r2, #0
    15f6:	668a      	str	r2, [r1, #104]	; 0x68
    15f8:	7002      	strb	r2, [r0, #0]
    15fa:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    15fe:	2001      	movs	r0, #1
    1600:	4088      	lsls	r0, r1
    1602:	4904      	ldr	r1, [pc, #16]	; (1614 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    1604:	6008      	str	r0, [r1, #0]
    1606:	2000      	movs	r0, #0
    1608:	4770      	bx	lr
    160a:	200c      	movs	r0, #12
    160c:	4770      	bx	lr
    160e:	0000      	.short	0x0000
    1610:	2000009c 	.word	0x2000009c
    1614:	4001f508 	.word	0x4001f508

00001618 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    1618:	4602      	mov	r2, r0
    161a:	480c      	ldr	r0, [pc, #48]	; (164c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    161c:	b510      	push	{r4, lr}
    161e:	6082      	str	r2, [r0, #8]
    1620:	68c0      	ldr	r0, [r0, #12]
    1622:	460c      	mov	r4, r1
    1624:	b168      	cbz	r0, 1642 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    1626:	f000 fe69 	bl	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    162a:	f007 ffa0 	bl	956e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    162e:	4620      	mov	r0, r4
    1630:	f000 f830 	bl	1694 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    1634:	2800      	cmp	r0, #0
    1636:	d007      	beq.n	1648 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    1638:	f640 11bb 	movw	r1, #2491	; 0x9bb
    163c:	2032      	movs	r0, #50	; 0x32
    163e:	f7fe fea9 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1642:	f640 11b5 	movw	r1, #2485	; 0x9b5
    1646:	e7f9      	b.n	163c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    1648:	bd10      	pop	{r4, pc}
    164a:	0000      	.short	0x0000
    164c:	2000009c 	.word	0x2000009c

00001650 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    1650:	4902      	ldr	r1, [pc, #8]	; (165c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    1652:	4801      	ldr	r0, [pc, #4]	; (1658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    1654:	60c8      	str	r0, [r1, #12]
    1656:	4770      	bx	lr
    1658:	000024b0 	.word	0x000024b0
    165c:	2000009c 	.word	0x2000009c

00001660 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    1660:	b570      	push	{r4, r5, r6, lr}
    1662:	4605      	mov	r5, r0
    1664:	f7ff fa4a 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    1668:	4604      	mov	r4, r0
    166a:	f7ff fa4d 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    166e:	4621      	mov	r1, r4
    1670:	f007 fe95 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    1674:	0001      	movs	r1, r0
    1676:	d006      	beq.n	1686 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    1678:	4805      	ldr	r0, [pc, #20]	; (1690 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    167a:	68c0      	ldr	r0, [r0, #12]
    167c:	6802      	ldr	r2, [r0, #0]
    167e:	4628      	mov	r0, r5
    1680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1684:	4710      	bx	r2
    1686:	f640 21b1 	movw	r1, #2737	; 0xab1
    168a:	2032      	movs	r0, #50	; 0x32
    168c:	f7fe fe82 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1690:	2000009c 	.word	0x2000009c

00001694 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	4d19      	ldr	r5, [pc, #100]	; (16fc <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    1698:	4604      	mov	r4, r0
    169a:	6868      	ldr	r0, [r5, #4]
    169c:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    16a0:	2901      	cmp	r1, #1
    16a2:	d004      	beq.n	16ae <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    16a4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    16a8:	b108      	cbz	r0, 16ae <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    16aa:	200c      	movs	r0, #12
    16ac:	bd70      	pop	{r4, r5, r6, pc}
    16ae:	f7ff fa4f 	bl	b50 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    16b2:	f007 ff5c 	bl	956e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    16b6:	f000 f8b9 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    16ba:	2246      	movs	r2, #70	; 0x46
    16bc:	2100      	movs	r1, #0
    16be:	6868      	ldr	r0, [r5, #4]
    16c0:	f008 fdb8 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    16c4:	6869      	ldr	r1, [r5, #4]
    16c6:	2200      	movs	r2, #0
    16c8:	2001      	movs	r0, #1
    16ca:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    16ce:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    16d2:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    16d6:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    16da:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    16de:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    16e2:	2007      	movs	r0, #7
    16e4:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    16e8:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    16ec:	23ff      	movs	r3, #255	; 0xff
    16ee:	7003      	strb	r3, [r0, #0]
    16f0:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    16f4:	668a      	str	r2, [r1, #104]	; 0x68
    16f6:	7002      	strb	r2, [r0, #0]
    16f8:	2000      	movs	r0, #0
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	2000009c 	.word	0x2000009c

00001700 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    1700:	4805      	ldr	r0, [pc, #20]	; (1718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    1702:	b510      	push	{r4, lr}
    1704:	6840      	ldr	r0, [r0, #4]
    1706:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    170a:	f007 fde5 	bl	92d8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    170e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1712:	f7ff bb85 	b.w	e20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1716:	0000      	.short	0x0000
    1718:	2000009c 	.word	0x2000009c

0000171c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    171c:	b140      	cbz	r0, 1730 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    171e:	2802      	cmp	r0, #2
    1720:	d006      	beq.n	1730 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    1722:	2200      	movs	r2, #0
    1724:	4903      	ldr	r1, [pc, #12]	; (1734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    1726:	6849      	ldr	r1, [r1, #4]
    1728:	f801 2f51 	strb.w	r2, [r1, #81]!
    172c:	7208      	strb	r0, [r1, #8]
    172e:	4770      	bx	lr
    1730:	2201      	movs	r2, #1
    1732:	e7f7      	b.n	1724 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    1734:	2000009c 	.word	0x2000009c

00001738 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    1738:	b510      	push	{r4, lr}
    173a:	4603      	mov	r3, r0
    173c:	7800      	ldrb	r0, [r0, #0]
    173e:	07c0      	lsls	r0, r0, #31
    1740:	d005      	beq.n	174e <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    1742:	7858      	ldrb	r0, [r3, #1]
    1744:	2100      	movs	r1, #0
    1746:	f7ff ff41 	bl	15cc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    174a:	2800      	cmp	r0, #0
    174c:	d10c      	bne.n	1768 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    174e:	4c07      	ldr	r4, [pc, #28]	; (176c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    1750:	7898      	ldrb	r0, [r3, #2]
    1752:	6861      	ldr	r1, [r4, #4]
    1754:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    1758:	78d8      	ldrb	r0, [r3, #3]
    175a:	f7ff ffdf 	bl	171c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    175e:	6861      	ldr	r1, [r4, #4]
    1760:	7918      	ldrb	r0, [r3, #4]
    1762:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    1766:	2000      	movs	r0, #0
    1768:	bd10      	pop	{r4, pc}
    176a:	0000      	.short	0x0000
    176c:	2000009c 	.word	0x2000009c

00001770 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    1770:	4801      	ldr	r0, [pc, #4]	; (1778 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    1772:	68c0      	ldr	r0, [r0, #12]
    1774:	6840      	ldr	r0, [r0, #4]
    1776:	4700      	bx	r0
    1778:	2000009c 	.word	0x2000009c

0000177c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    177c:	4807      	ldr	r0, [pc, #28]	; (179c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    177e:	b508      	push	{r3, lr}
    1780:	6840      	ldr	r0, [r0, #4]
    1782:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    1786:	f88d 0000 	strb.w	r0, [sp]
    178a:	9800      	ldr	r0, [sp, #0]
    178c:	9000      	str	r0, [sp, #0]
    178e:	f89d 0000 	ldrb.w	r0, [sp]
    1792:	2800      	cmp	r0, #0
    1794:	d000      	beq.n	1798 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    1796:	2001      	movs	r0, #1
    1798:	bd08      	pop	{r3, pc}
    179a:	0000      	.short	0x0000
    179c:	2000009c 	.word	0x2000009c

000017a0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    17a0:	b510      	push	{r4, lr}
    17a2:	f000 f903 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    17a6:	4b0c      	ldr	r3, [pc, #48]	; (17d8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    17a8:	b140      	cbz	r0, 17bc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    17aa:	6858      	ldr	r0, [r3, #4]
    17ac:	2101      	movs	r1, #1
    17ae:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    17b2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    17b4:	8809      	ldrh	r1, [r1, #0]
    17b6:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    17ba:	e004      	b.n	17c6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    17bc:	6859      	ldr	r1, [r3, #4]
    17be:	2000      	movs	r0, #0
    17c0:	f801 0f42 	strb.w	r0, [r1, #66]!
    17c4:	8048      	strh	r0, [r1, #2]
    17c6:	6858      	ldr	r0, [r3, #4]
    17c8:	2202      	movs	r2, #2
    17ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17ce:	4903      	ldr	r1, [pc, #12]	; (17dc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    17d0:	3038      	adds	r0, #56	; 0x38
    17d2:	f007 bd29 	b.w	9228 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    17d6:	0000      	.short	0x0000
    17d8:	2000009c 	.word	0x2000009c
    17dc:	00002295 	.word	0x00002295

000017e0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    17e0:	4802      	ldr	r0, [pc, #8]	; (17ec <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    17e2:	6840      	ldr	r0, [r0, #4]
    17e4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    17e8:	4770      	bx	lr
    17ea:	0000      	.short	0x0000
    17ec:	2000009c 	.word	0x2000009c

000017f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    17f0:	b510      	push	{r4, lr}
    17f2:	f000 f8db 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    17f6:	490c      	ldr	r1, [pc, #48]	; (1828 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    17f8:	b128      	cbz	r0, 1806 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    17fa:	6848      	ldr	r0, [r1, #4]
    17fc:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    1800:	2801      	cmp	r0, #1
    1802:	d00e      	beq.n	1822 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    1804:	e00c      	b.n	1820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    1806:	6849      	ldr	r1, [r1, #4]
    1808:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    180c:	2801      	cmp	r0, #1
    180e:	d001      	beq.n	1814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    1810:	2802      	cmp	r0, #2
    1812:	d105      	bne.n	1820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    1814:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    1818:	2801      	cmp	r0, #1
    181a:	d003      	beq.n	1824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    181c:	2803      	cmp	r0, #3
    181e:	d001      	beq.n	1824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    1820:	2000      	movs	r0, #0
    1822:	bd10      	pop	{r4, pc}
    1824:	2001      	movs	r0, #1
    1826:	bd10      	pop	{r4, pc}
    1828:	2000009c 	.word	0x2000009c
    182c:	b510      	push	{r4, lr}
    182e:	4c07      	ldr	r4, [pc, #28]	; (184c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    1830:	6860      	ldr	r0, [r4, #4]
    1832:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    1836:	2800      	cmp	r0, #0
    1838:	d007      	beq.n	184a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    183a:	f001 ff13 	bl	3664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    183e:	f001 fe31 	bl	34a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1842:	6861      	ldr	r1, [r4, #4]
    1844:	2000      	movs	r0, #0
    1846:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    184a:	bd10      	pop	{r4, pc}
    184c:	2000009c 	.word	0x2000009c
    1850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1854:	4d10      	ldr	r5, [pc, #64]	; (1898 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    1856:	4606      	mov	r6, r0
    1858:	460f      	mov	r7, r1
    185a:	6868      	ldr	r0, [r5, #4]
    185c:	490f      	ldr	r1, [pc, #60]	; (189c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    185e:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    1862:	5c0c      	ldrb	r4, [r1, r0]
    1864:	4620      	mov	r0, r4
    1866:	f002 fa2f 	bl	3cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    186a:	6868      	ldr	r0, [r5, #4]
    186c:	2101      	movs	r1, #1
    186e:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
    1872:	2025      	movs	r0, #37	; 0x25
    1874:	f002 f9fe 	bl	3c74 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1878:	4638      	mov	r0, r7
    187a:	f002 f939 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    187e:	f04f 0101 	mov.w	r1, #1
    1882:	4608      	mov	r0, r1
    1884:	b126      	cbz	r6, 1890 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    1886:	f001 ff99 	bl	37bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    188a:	b918      	cbnz	r0, 1894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1890:	f001 ff5a 	bl	3748 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    1894:	2001      	movs	r0, #1
    1896:	e7f9      	b.n	188c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    1898:	2000009c 	.word	0x2000009c
    189c:	0000a37e 	.word	0x0000a37e
    18a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18a2:	2600      	movs	r6, #0
    18a4:	460f      	mov	r7, r1
    18a6:	4605      	mov	r5, r0
    18a8:	f88d 6000 	strb.w	r6, [sp]
    18ac:	466b      	mov	r3, sp
    18ae:	f000 f895 	bl	19dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ec>
    18b2:	0001      	movs	r1, r0
    18b4:	4810      	ldr	r0, [pc, #64]	; (18f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>)
    18b6:	d003      	beq.n	18c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    18b8:	6840      	ldr	r0, [r0, #4]
    18ba:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    18be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18c0:	6840      	ldr	r0, [r0, #4]
    18c2:	f89d 1000 	ldrb.w	r1, [sp]
    18c6:	2f07      	cmp	r7, #7
    18c8:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    18cc:	d301      	bcc.n	18d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2>
    18ce:	4634      	mov	r4, r6
    18d0:	e002      	b.n	18d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    18d2:	0022      	movs	r2, r4
    18d4:	d100      	bne.n	18d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    18d6:	460c      	mov	r4, r1
    18d8:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    18dc:	6869      	ldr	r1, [r5, #4]
    18de:	2900      	cmp	r1, #0
    18e0:	d0ed      	beq.n	18be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce>
    18e2:	7c69      	ldrb	r1, [r5, #17]
    18e4:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    18e8:	6869      	ldr	r1, [r5, #4]
    18ea:	680a      	ldr	r2, [r1, #0]
    18ec:	f840 2f83 	str.w	r2, [r0, #131]!
    18f0:	8889      	ldrh	r1, [r1, #4]
    18f2:	8081      	strh	r1, [r0, #4]
    18f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f6:	0000      	.short	0x0000
    18f8:	2000009c 	.word	0x2000009c
    18fc:	b510      	push	{r4, lr}
    18fe:	4915      	ldr	r1, [pc, #84]	; (1954 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x164>)
    1900:	6842      	ldr	r2, [r0, #4]
    1902:	6849      	ldr	r1, [r1, #4]
    1904:	7813      	ldrb	r3, [r2, #0]
    1906:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    190a:	42a3      	cmp	r3, r4
    190c:	d11f      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    190e:	7853      	ldrb	r3, [r2, #1]
    1910:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    1914:	42a3      	cmp	r3, r4
    1916:	d11a      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1918:	7893      	ldrb	r3, [r2, #2]
    191a:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    191e:	42a3      	cmp	r3, r4
    1920:	d115      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1922:	78d3      	ldrb	r3, [r2, #3]
    1924:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    1928:	42a3      	cmp	r3, r4
    192a:	d110      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    192c:	7913      	ldrb	r3, [r2, #4]
    192e:	f891 4087 	ldrb.w	r4, [r1, #135]	; 0x87
    1932:	42a3      	cmp	r3, r4
    1934:	d10b      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1936:	7952      	ldrb	r2, [r2, #5]
    1938:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
    193c:	429a      	cmp	r2, r3
    193e:	d106      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1940:	7c40      	ldrb	r0, [r0, #17]
    1942:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    1946:	4288      	cmp	r0, r1
    1948:	d101      	bne.n	194e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    194a:	2001      	movs	r0, #1
    194c:	bd10      	pop	{r4, pc}
    194e:	2000      	movs	r0, #0
    1950:	bd10      	pop	{r4, pc}
    1952:	0000      	.short	0x0000
    1954:	2000009c 	.word	0x2000009c
    1958:	b510      	push	{r4, lr}
    195a:	7801      	ldrb	r1, [r0, #0]
    195c:	b08c      	sub	sp, #48	; 0x30
    195e:	f001 040f 	and.w	r4, r1, #15
    1962:	4622      	mov	r2, r4
    1964:	a901      	add	r1, sp, #4
    1966:	f000 fe31 	bl	25cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    196a:	f001 fe9d 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    196e:	f000 fb27 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    1972:	2c04      	cmp	r4, #4
    1974:	d114      	bne.n	19a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    1976:	a801      	add	r0, sp, #4
    1978:	f7ff ffc0 	bl	18fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    197c:	b180      	cbz	r0, 19a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    197e:	a80b      	add	r0, sp, #44	; 0x2c
    1980:	f000 fb26 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1984:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    1988:	9000      	str	r0, [sp, #0]
    198a:	4807      	ldr	r0, [pc, #28]	; (19a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>)
    198c:	6840      	ldr	r0, [r0, #4]
    198e:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    1992:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    1996:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    199a:	a801      	add	r0, sp, #4
    199c:	f007 fd9c 	bl	94d8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    19a0:	b00c      	add	sp, #48	; 0x30
    19a2:	2005      	movs	r0, #5
    19a4:	bd10      	pop	{r4, pc}
    19a6:	0000      	.short	0x0000
    19a8:	2000009c 	.word	0x2000009c
    19ac:	4804      	ldr	r0, [pc, #16]	; (19c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d0>)
    19ae:	6840      	ldr	r0, [r0, #4]
    19b0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    19b4:	2803      	cmp	r0, #3
    19b6:	d001      	beq.n	19bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1cc>
    19b8:	2000      	movs	r0, #0
    19ba:	4770      	bx	lr
    19bc:	2001      	movs	r0, #1
    19be:	4770      	bx	lr
    19c0:	2000009c 	.word	0x2000009c
    19c4:	7c82      	ldrb	r2, [r0, #18]
    19c6:	6883      	ldr	r3, [r0, #8]
    19c8:	4803      	ldr	r0, [pc, #12]	; (19d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e8>)
    19ca:	6841      	ldr	r1, [r0, #4]
    19cc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    19d0:	314a      	adds	r1, #74	; 0x4a
    19d2:	f007 ba94 	b.w	8efe <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    19d6:	0000      	.short	0x0000
    19d8:	2000009c 	.word	0x2000009c
    19dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    19de:	6841      	ldr	r1, [r0, #4]
    19e0:	461e      	mov	r6, r3
    19e2:	4604      	mov	r4, r0
    19e4:	b301      	cbz	r1, 1a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x238>
    19e6:	7c60      	ldrb	r0, [r4, #17]
    19e8:	f007 fc6b 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    19ec:	4d19      	ldr	r5, [pc, #100]	; (1a54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    19ee:	6869      	ldr	r1, [r5, #4]
    19f0:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    19f4:	b141      	cbz	r1, 1a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    19f6:	b138      	cbz	r0, 1a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    19f8:	f007 fb17 	bl	902a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    19fc:	6869      	ldr	r1, [r5, #4]
    19fe:	f801 0f78 	strb.w	r0, [r1, #120]!
    1a02:	7048      	strb	r0, [r1, #1]
    1a04:	2001      	movs	r0, #1
    1a06:	71c8      	strb	r0, [r1, #7]
    1a08:	6868      	ldr	r0, [r5, #4]
    1a0a:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1a0e:	28ff      	cmp	r0, #255	; 0xff
    1a10:	d00c      	beq.n	1a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23c>
    1a12:	466a      	mov	r2, sp
    1a14:	a902      	add	r1, sp, #8
    1a16:	f7ff fa9f 	bl	f58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    1a1a:	b1a8      	cbz	r0, 1a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    1a1c:	4669      	mov	r1, sp
    1a1e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1a22:	f007 fc22 	bl	926a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    1a26:	7030      	strb	r0, [r6, #0]
    1a28:	2000      	movs	r0, #0
    1a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a2c:	7c60      	ldrb	r0, [r4, #17]
    1a2e:	6861      	ldr	r1, [r4, #4]
    1a30:	f007 fc1b 	bl	926a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    1a34:	7030      	strb	r0, [r6, #0]
    1a36:	686a      	ldr	r2, [r5, #4]
    1a38:	7c60      	ldrb	r0, [r4, #17]
    1a3a:	6861      	ldr	r1, [r4, #4]
    1a3c:	3278      	adds	r2, #120	; 0x78
    1a3e:	f7ff faab 	bl	f98 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    1a42:	f080 0001 	eor.w	r0, r0, #1
    1a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a48:	f640 5134 	movw	r1, #3380	; 0xd34
    1a4c:	2032      	movs	r0, #50	; 0x32
    1a4e:	f7fe fca1 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a52:	0000      	.short	0x0000
    1a54:	2000009c 	.word	0x2000009c
    1a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a5c:	4c4c      	ldr	r4, [pc, #304]	; (1b90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    1a5e:	4606      	mov	r6, r0
    1a60:	2100      	movs	r1, #0
    1a62:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    1a66:	3570      	adds	r5, #112	; 0x70
    1a68:	8001      	strh	r1, [r0, #0]
    1a6a:	2e03      	cmp	r6, #3
    1a6c:	d002      	beq.n	1a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>
    1a6e:	2e05      	cmp	r6, #5
    1a70:	d004      	beq.n	1a7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x28c>
    1a72:	e051      	b.n	1b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    1a74:	2103      	movs	r1, #3
    1a76:	f007 fba0 	bl	91ba <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1a7a:	e04d      	b.n	1b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    1a7c:	2105      	movs	r1, #5
    1a7e:	f007 fb9c 	bl	91ba <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1a82:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1a86:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1a88:	6949      	ldr	r1, [r1, #20]
    1a8a:	f8c7 100f 	str.w	r1, [r7, #15]
    1a8e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1a90:	69c9      	ldr	r1, [r1, #28]
    1a92:	74f9      	strb	r1, [r7, #19]
    1a94:	0a0a      	lsrs	r2, r1, #8
    1a96:	753a      	strb	r2, [r7, #20]
    1a98:	0c09      	lsrs	r1, r1, #16
    1a9a:	7579      	strb	r1, [r7, #21]
    1a9c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1a9e:	6901      	ldr	r1, [r0, #16]
    1aa0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    1aa2:	f007 fb4c 	bl	913e <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    1aa6:	75b8      	strb	r0, [r7, #22]
    1aa8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1aac:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1aae:	6901      	ldr	r1, [r0, #16]
    1ab0:	6a00      	ldr	r0, [r0, #32]
    1ab2:	f007 fb35 	bl	9120 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    1ab6:	75f8      	strb	r0, [r7, #23]
    1ab8:	0a00      	lsrs	r0, r0, #8
    1aba:	7638      	strb	r0, [r7, #24]
    1abc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1ac0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1ac2:	6900      	ldr	r0, [r0, #16]
    1ac4:	f007 fae9 	bl	909a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    1ac8:	7678      	strb	r0, [r7, #25]
    1aca:	0a00      	lsrs	r0, r0, #8
    1acc:	76b8      	strb	r0, [r7, #26]
    1ace:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1ad2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1ad4:	8b09      	ldrh	r1, [r1, #24]
    1ad6:	f807 1f1b 	strb.w	r1, [r7, #27]!
    1ada:	0a09      	lsrs	r1, r1, #8
    1adc:	7079      	strb	r1, [r7, #1]
    1ade:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1ae0:	8b49      	ldrh	r1, [r1, #26]
    1ae2:	70b9      	strb	r1, [r7, #2]
    1ae4:	0a09      	lsrs	r1, r1, #8
    1ae6:	70f9      	strb	r1, [r7, #3]
    1ae8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1aea:	f851 2fae 	ldr.w	r2, [r1, #174]!
    1aee:	607a      	str	r2, [r7, #4]
    1af0:	7909      	ldrb	r1, [r1, #4]
    1af2:	7239      	strb	r1, [r7, #8]
    1af4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1af6:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    1afa:	7a78      	ldrb	r0, [r7, #9]
    1afc:	f001 011f 	and.w	r1, r1, #31
    1b00:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    1b04:	4308      	orrs	r0, r1
    1b06:	7278      	strb	r0, [r7, #9]
    1b08:	f001 fcac 	bl	3464 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    1b0c:	7a79      	ldrb	r1, [r7, #9]
    1b0e:	f001 011f 	and.w	r1, r1, #31
    1b12:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    1b16:	7279      	strb	r1, [r7, #9]
    1b18:	f105 0113 	add.w	r1, r5, #19
    1b1c:	68a0      	ldr	r0, [r4, #8]
    1b1e:	f007 fb67 	bl	91f0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1b22:	7ea9      	ldrb	r1, [r5, #26]
    1b24:	68a0      	ldr	r0, [r4, #8]
    1b26:	f007 fb69 	bl	91fc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    1b2a:	6860      	ldr	r0, [r4, #4]
    1b2c:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    1b30:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    1b34:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1b38:	b188      	cbz	r0, 1b5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    1b3a:	f7ff ff37 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1b3e:	b130      	cbz	r0, 1b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    1b40:	6860      	ldr	r0, [r4, #4]
    1b42:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    1b46:	b111      	cbz	r1, 1b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    1b48:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    1b4c:	e002      	b.n	1b54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    1b4e:	6860      	ldr	r0, [r4, #4]
    1b50:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1b54:	f7ff f9d8 	bl	f08 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    1b58:	b108      	cbz	r0, 1b5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    1b5a:	2701      	movs	r7, #1
    1b5c:	4605      	mov	r5, r0
    1b5e:	4629      	mov	r1, r5
    1b60:	68a0      	ldr	r0, [r4, #8]
    1b62:	f007 fb52 	bl	920a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    1b66:	4639      	mov	r1, r7
    1b68:	68a0      	ldr	r0, [r4, #8]
    1b6a:	f007 fb54 	bl	9216 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    1b6e:	68a0      	ldr	r0, [r4, #8]
    1b70:	f001 ffbe 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1b74:	2e05      	cmp	r6, #5
    1b76:	d108      	bne.n	1b8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    1b78:	6860      	ldr	r0, [r4, #4]
    1b7a:	682a      	ldr	r2, [r5, #0]
    1b7c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1b7e:	f8c1 200a 	str.w	r2, [r1, #10]
    1b82:	88aa      	ldrh	r2, [r5, #4]
    1b84:	81ca      	strh	r2, [r1, #14]
    1b86:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1b88:	7247      	strb	r7, [r0, #9]
    1b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b8e:	0000      	.short	0x0000
    1b90:	2000009c 	.word	0x2000009c
    1b94:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b98:	4f65      	ldr	r7, [pc, #404]	; (1d30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x540>)
    1b9a:	4604      	mov	r4, r0
    1b9c:	6878      	ldr	r0, [r7, #4]
    1b9e:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    1ba2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1ba6:	b180      	cbz	r0, 1bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3da>
    1ba8:	2600      	movs	r6, #0
    1baa:	2500      	movs	r5, #0
    1bac:	7ca0      	ldrb	r0, [r4, #18]
    1bae:	68a1      	ldr	r1, [r4, #8]
    1bb0:	f007 fb87 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1bb4:	4682      	mov	sl, r0
    1bb6:	f7ff fef9 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1bba:	b140      	cbz	r0, 1bce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    1bbc:	6878      	ldr	r0, [r7, #4]
    1bbe:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    1bc2:	b121      	cbz	r1, 1bce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    1bc4:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    1bc8:	e004      	b.n	1bd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e4>
    1bca:	2601      	movs	r6, #1
    1bcc:	e7ed      	b.n	1baa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    1bce:	6878      	ldr	r0, [r7, #4]
    1bd0:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1bd4:	4683      	mov	fp, r0
    1bd6:	f7ff f949 	bl	e6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    1bda:	ea5f 0900 	movs.w	r9, r0
    1bde:	d00c      	beq.n	1bfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    1be0:	4658      	mov	r0, fp
    1be2:	f7ff f937 	bl	e54 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    1be6:	b100      	cbz	r0, 1bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fa>
    1be8:	2601      	movs	r6, #1
    1bea:	f1ba 0f00 	cmp.w	sl, #0
    1bee:	d004      	beq.n	1bfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    1bf0:	4648      	mov	r0, r9
    1bf2:	68a1      	ldr	r1, [r4, #8]
    1bf4:	f007 f9e8 	bl	8fc8 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    1bf8:	4605      	mov	r5, r0
    1bfa:	6878      	ldr	r0, [r7, #4]
    1bfc:	46b9      	mov	r9, r7
    1bfe:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    1c02:	b10d      	cbz	r5, 1c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x418>
    1c04:	f047 0702 	orr.w	r7, r7, #2
    1c08:	f7ff fed0 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1c0c:	b3a0      	cbz	r0, 1c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x488>
    1c0e:	6860      	ldr	r0, [r4, #4]
    1c10:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1c14:	7802      	ldrb	r2, [r0, #0]
    1c16:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    1c1a:	429a      	cmp	r2, r3
    1c1c:	d11f      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c1e:	7842      	ldrb	r2, [r0, #1]
    1c20:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    1c24:	429a      	cmp	r2, r3
    1c26:	d11a      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c28:	7882      	ldrb	r2, [r0, #2]
    1c2a:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    1c2e:	429a      	cmp	r2, r3
    1c30:	d115      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c32:	78c2      	ldrb	r2, [r0, #3]
    1c34:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    1c38:	429a      	cmp	r2, r3
    1c3a:	d110      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c3c:	7902      	ldrb	r2, [r0, #4]
    1c3e:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    1c42:	429a      	cmp	r2, r3
    1c44:	d10b      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c46:	7940      	ldrb	r0, [r0, #5]
    1c48:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    1c4c:	4290      	cmp	r0, r2
    1c4e:	d106      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c50:	7c60      	ldrb	r0, [r4, #17]
    1c52:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    1c56:	4288      	cmp	r0, r1
    1c58:	d101      	bne.n	1c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c5a:	2001      	movs	r0, #1
    1c5c:	e000      	b.n	1c60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x470>
    1c5e:	2000      	movs	r0, #0
    1c60:	4f34      	ldr	r7, [pc, #208]	; (1d34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x544>)
    1c62:	4682      	mov	sl, r0
    1c64:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    1c68:	2808      	cmp	r0, #8
    1c6a:	d006      	beq.n	1c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    1c6c:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    1c70:	4288      	cmp	r0, r1
    1c72:	d102      	bne.n	1c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    1c74:	2001      	movs	r0, #1
    1c76:	e001      	b.n	1c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>
    1c78:	e021      	b.n	1cbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    1c7a:	2000      	movs	r0, #0
    1c7c:	4681      	mov	r9, r0
    1c7e:	b925      	cbnz	r5, 1c8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49a>
    1c80:	b12e      	cbz	r6, 1c8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    1c82:	4620      	mov	r0, r4
    1c84:	f7ff fe9e 	bl	19c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    1c88:	b108      	cbz	r0, 1c8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    1c8a:	2001      	movs	r0, #1
    1c8c:	e000      	b.n	1c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a0>
    1c8e:	2000      	movs	r0, #0
    1c90:	f1b8 0f00 	cmp.w	r8, #0
    1c94:	d009      	beq.n	1caa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1c96:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    1c9a:	2901      	cmp	r1, #1
    1c9c:	d003      	beq.n	1ca6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b6>
    1c9e:	b921      	cbnz	r1, 1caa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1ca0:	ea5a 0109 	orrs.w	r1, sl, r9
    1ca4:	d001      	beq.n	1caa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1ca6:	2101      	movs	r1, #1
    1ca8:	e000      	b.n	1cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4bc>
    1caa:	2100      	movs	r1, #0
    1cac:	4208      	tst	r0, r1
    1cae:	d003      	beq.n	1cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    1cb0:	200c      	movs	r0, #12
    1cb2:	b004      	add	sp, #16
    1cb4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1cb8:	f001 fcf6 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cbc:	e036      	b.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1cbe:	f001 fcf3 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cc2:	f1b8 0f00 	cmp.w	r8, #0
    1cc6:	d031      	beq.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1cc8:	4620      	mov	r0, r4
    1cca:	f7ff fe7b 	bl	19c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    1cce:	b900      	cbnz	r0, 1cd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e2>
    1cd0:	b175      	cbz	r5, 1cf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x500>
    1cd2:	a803      	add	r0, sp, #12
    1cd4:	f000 f97c 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1cd8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1cdc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1ce0:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1ce4:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1ce8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1cec:	463b      	mov	r3, r7
    1cee:	e018      	b.n	1d22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x532>
    1cf0:	f8d9 0004 	ldr.w	r0, [r9, #4]
    1cf4:	464d      	mov	r5, r9
    1cf6:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    1cfa:	2803      	cmp	r0, #3
    1cfc:	d001      	beq.n	1d02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x512>
    1cfe:	2802      	cmp	r0, #2
    1d00:	d114      	bne.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1d02:	f1ba 0f00 	cmp.w	sl, #0
    1d06:	d011      	beq.n	1d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    1d08:	a803      	add	r0, sp, #12
    1d0a:	f000 f961 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1d0e:	686a      	ldr	r2, [r5, #4]
    1d10:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1d14:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1d18:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1d1c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1d20:	23fe      	movs	r3, #254	; 0xfe
    1d22:	2101      	movs	r1, #1
    1d24:	4620      	mov	r0, r4
    1d26:	324a      	adds	r2, #74	; 0x4a
    1d28:	f007 fb5e 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1d2c:	2005      	movs	r0, #5
    1d2e:	e7c0      	b.n	1cb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c2>
    1d30:	2000009c 	.word	0x2000009c
    1d34:	200005a8 	.word	0x200005a8
    1d38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1d3a:	4c3f      	ldr	r4, [pc, #252]	; (1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>)
    1d3c:	4605      	mov	r5, r0
    1d3e:	6860      	ldr	r0, [r4, #4]
    1d40:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1d44:	2900      	cmp	r1, #0
    1d46:	d06c      	beq.n	1e22 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1d48:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1d4c:	2802      	cmp	r0, #2
    1d4e:	d02c      	beq.n	1daa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1d50:	2801      	cmp	r0, #1
    1d52:	d043      	beq.n	1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1d54:	f7ff fe2a 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1d58:	2800      	cmp	r0, #0
    1d5a:	d067      	beq.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1d5c:	686a      	ldr	r2, [r5, #4]
    1d5e:	6861      	ldr	r1, [r4, #4]
    1d60:	7810      	ldrb	r0, [r2, #0]
    1d62:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    1d66:	4298      	cmp	r0, r3
    1d68:	d14c      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d6a:	7850      	ldrb	r0, [r2, #1]
    1d6c:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    1d70:	4298      	cmp	r0, r3
    1d72:	d147      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d74:	7890      	ldrb	r0, [r2, #2]
    1d76:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    1d7a:	4298      	cmp	r0, r3
    1d7c:	d142      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d7e:	78d0      	ldrb	r0, [r2, #3]
    1d80:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    1d84:	4298      	cmp	r0, r3
    1d86:	d13d      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d88:	7910      	ldrb	r0, [r2, #4]
    1d8a:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    1d8e:	4298      	cmp	r0, r3
    1d90:	d138      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d92:	7950      	ldrb	r0, [r2, #5]
    1d94:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    1d98:	4290      	cmp	r0, r2
    1d9a:	d133      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d9c:	7c68      	ldrb	r0, [r5, #17]
    1d9e:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    1da2:	4290      	cmp	r0, r2
    1da4:	d12e      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1da6:	2001      	movs	r0, #1
    1da8:	e02d      	b.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1daa:	a803      	add	r0, sp, #12
    1dac:	f000 f910 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1db0:	6862      	ldr	r2, [r4, #4]
    1db2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1db6:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1dba:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1dbe:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1dc2:	23ff      	movs	r3, #255	; 0xff
    1dc4:	2100      	movs	r1, #0
    1dc6:	4628      	mov	r0, r5
    1dc8:	324a      	adds	r2, #74	; 0x4a
    1dca:	f007 fb0d 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1dce:	6861      	ldr	r1, [r4, #4]
    1dd0:	2001      	movs	r0, #1
    1dd2:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    1dd6:	200b      	movs	r0, #11
    1dd8:	b004      	add	sp, #16
    1dda:	bd70      	pop	{r4, r5, r6, pc}
    1ddc:	a803      	add	r0, sp, #12
    1dde:	f000 f8f7 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1de2:	6862      	ldr	r2, [r4, #4]
    1de4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1de8:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1dec:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1df0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1df4:	23ff      	movs	r3, #255	; 0xff
    1df6:	2100      	movs	r1, #0
    1df8:	4628      	mov	r0, r5
    1dfa:	324a      	adds	r2, #74	; 0x4a
    1dfc:	f007 faf4 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1e00:	2005      	movs	r0, #5
    1e02:	e7e9      	b.n	1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1e04:	2000      	movs	r0, #0
    1e06:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    1e0a:	2901      	cmp	r1, #1
    1e0c:	d00c      	beq.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e0e:	b958      	cbnz	r0, 1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e10:	490a      	ldr	r1, [pc, #40]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1e12:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    1e16:	2808      	cmp	r0, #8
    1e18:	d003      	beq.n	1e22 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1e1a:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    1e1e:	4281      	cmp	r1, r0
    1e20:	d002      	beq.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e22:	f001 fc41 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1e26:	e7eb      	b.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1e28:	200c      	movs	r0, #12
    1e2a:	e7d5      	b.n	1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1e2c:	f640 61e5 	movw	r1, #3813	; 0xee5
    1e30:	2032      	movs	r0, #50	; 0x32
    1e32:	f7fe faaf 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e36:	0000      	.short	0x0000
    1e38:	2000009c 	.word	0x2000009c
    1e3c:	200005a8 	.word	0x200005a8
    1e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1e42:	4c1e      	ldr	r4, [pc, #120]	; (1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>)
    1e44:	4605      	mov	r5, r0
    1e46:	6860      	ldr	r0, [r4, #4]
    1e48:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1e4c:	b129      	cbz	r1, 1e5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10e>
    1e4e:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1e52:	2802      	cmp	r0, #2
    1e54:	d004      	beq.n	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1e56:	2801      	cmp	r0, #1
    1e58:	d01b      	beq.n	1e92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x146>
    1e5a:	f001 fc25 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1e5e:	e02a      	b.n	1eb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16a>
    1e60:	a803      	add	r0, sp, #12
    1e62:	f000 f8b5 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1e66:	6862      	ldr	r2, [r4, #4]
    1e68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1e6c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1e70:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1e74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1e78:	23ff      	movs	r3, #255	; 0xff
    1e7a:	2106      	movs	r1, #6
    1e7c:	4628      	mov	r0, r5
    1e7e:	324a      	adds	r2, #74	; 0x4a
    1e80:	f007 fab2 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1e84:	6862      	ldr	r2, [r4, #4]
    1e86:	200b      	movs	r0, #11
    1e88:	2100      	movs	r1, #0
    1e8a:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    1e8e:	b004      	add	sp, #16
    1e90:	bd70      	pop	{r4, r5, r6, pc}
    1e92:	a803      	add	r0, sp, #12
    1e94:	f000 f89c 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1e98:	6862      	ldr	r2, [r4, #4]
    1e9a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1e9e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1ea2:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1ea6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1eaa:	23ff      	movs	r3, #255	; 0xff
    1eac:	2106      	movs	r1, #6
    1eae:	4628      	mov	r0, r5
    1eb0:	324a      	adds	r2, #74	; 0x4a
    1eb2:	f007 fa99 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1eb6:	2005      	movs	r0, #5
    1eb8:	e7e9      	b.n	1e8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1eba:	0000      	.short	0x0000
    1ebc:	2000009c 	.word	0x2000009c
    1ec0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1ec2:	b389      	cbz	r1, 1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1ec4:	2901      	cmp	r1, #1
    1ec6:	d034      	beq.n	1f32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e6>
    1ec8:	2505      	movs	r5, #5
    1eca:	2902      	cmp	r1, #2
    1ecc:	d004      	beq.n	1ed8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>
    1ece:	2906      	cmp	r1, #6
    1ed0:	d025      	beq.n	1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1ed2:	f001 fbe9 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1ed6:	e01f      	b.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1ed8:	4606      	mov	r6, r0
    1eda:	f001 fbe5 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1ede:	4c17      	ldr	r4, [pc, #92]	; (1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>)
    1ee0:	6860      	ldr	r0, [r4, #4]
    1ee2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1ee6:	b1b9      	cbz	r1, 1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1ee8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1eec:	2801      	cmp	r0, #1
    1eee:	d001      	beq.n	1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1ef0:	2802      	cmp	r0, #2
    1ef2:	d111      	bne.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1ef4:	a803      	add	r0, sp, #12
    1ef6:	f000 f86b 	bl	1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1efa:	6862      	ldr	r2, [r4, #4]
    1efc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1f00:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1f04:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1f08:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1f0c:	23ff      	movs	r3, #255	; 0xff
    1f0e:	2102      	movs	r1, #2
    1f10:	4630      	mov	r0, r6
    1f12:	324a      	adds	r2, #74	; 0x4a
    1f14:	f007 fa68 	bl	93e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1f18:	b004      	add	sp, #16
    1f1a:	4628      	mov	r0, r5
    1f1c:	bd70      	pop	{r4, r5, r6, pc}
    1f1e:	b004      	add	sp, #16
    1f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f24:	f7ff bf8c 	b.w	1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1f28:	b004      	add	sp, #16
    1f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f2e:	f7ff bf03 	b.w	1d38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x548>
    1f32:	b004      	add	sp, #16
    1f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f38:	f7ff be2c 	b.w	1b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    1f3c:	2000009c 	.word	0x2000009c
    1f40:	b570      	push	{r4, r5, r6, lr}
    1f42:	4c11      	ldr	r4, [pc, #68]	; (1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>)
    1f44:	4605      	mov	r5, r0
    1f46:	6861      	ldr	r1, [r4, #4]
    1f48:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    1f4c:	2800      	cmp	r0, #0
    1f4e:	d019      	beq.n	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f50:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    1f54:	2800      	cmp	r0, #0
    1f56:	d015      	beq.n	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f58:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1f5c:	314a      	adds	r1, #74	; 0x4a
    1f5e:	f007 f9b0 	bl	92c2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1f62:	b140      	cbz	r0, 1f76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22a>
    1f64:	f7fe ff72 	bl	e4c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    1f68:	6861      	ldr	r1, [r4, #4]
    1f6a:	462a      	mov	r2, r5
    1f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f70:	314a      	adds	r1, #74	; 0x4a
    1f72:	f006 bff4 	b.w	8f5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    1f76:	6860      	ldr	r0, [r4, #4]
    1f78:	4629      	mov	r1, r5
    1f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f7e:	304a      	adds	r0, #74	; 0x4a
    1f80:	f006 bfdc 	b.w	8f3c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    1f84:	bd70      	pop	{r4, r5, r6, pc}
    1f86:	0000      	.short	0x0000
    1f88:	2000009c 	.word	0x2000009c
    1f8c:	4602      	mov	r2, r0
    1f8e:	480b      	ldr	r0, [pc, #44]	; (1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1f90:	b082      	sub	sp, #8
    1f92:	6840      	ldr	r0, [r0, #4]
    1f94:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    1f98:	f88d 1000 	strb.w	r1, [sp]
    1f9c:	9900      	ldr	r1, [sp, #0]
    1f9e:	9100      	str	r1, [sp, #0]
    1fa0:	f89d 1000 	ldrb.w	r1, [sp]
    1fa4:	2900      	cmp	r1, #0
    1fa6:	d107      	bne.n	1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1fa8:	6e81      	ldr	r1, [r0, #104]	; 0x68
    1faa:	2900      	cmp	r1, #0
    1fac:	d004      	beq.n	1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1fae:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    1fb2:	b002      	add	sp, #8
    1fb4:	f004 bd76 	b.w	6aa4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1fb8:	b002      	add	sp, #8
    1fba:	4770      	bx	lr
    1fbc:	2000009c 	.word	0x2000009c
    1fc0:	b510      	push	{r4, lr}
    1fc2:	f7ff f885 	bl	10d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1fc6:	4901      	ldr	r1, [pc, #4]	; (1fcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>)
    1fc8:	7008      	strb	r0, [r1, #0]
    1fca:	bd10      	pop	{r4, pc}
    1fcc:	2000009c 	.word	0x2000009c
    1fd0:	4a07      	ldr	r2, [pc, #28]	; (1ff0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>)
    1fd2:	b510      	push	{r4, lr}
    1fd4:	f992 1000 	ldrsb.w	r1, [r2]
    1fd8:	297f      	cmp	r1, #127	; 0x7f
    1fda:	d003      	beq.n	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1fdc:	7001      	strb	r1, [r0, #0]
    1fde:	207f      	movs	r0, #127	; 0x7f
    1fe0:	7010      	strb	r0, [r2, #0]
    1fe2:	bd10      	pop	{r4, pc}
    1fe4:	f240 414d 	movw	r1, #1101	; 0x44d
    1fe8:	2032      	movs	r0, #50	; 0x32
    1fea:	f7fe f9d3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fee:	0000      	.short	0x0000
    1ff0:	2000009c 	.word	0x2000009c
    1ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff8:	4607      	mov	r7, r0
    1ffa:	f7fe fd7f 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    1ffe:	4604      	mov	r4, r0
    2000:	f7fe fd82 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2004:	4621      	mov	r1, r4
    2006:	f007 f9ca 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    200a:	0005      	movs	r5, r0
    200c:	d012      	beq.n	2034 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e8>
    200e:	4c2d      	ldr	r4, [pc, #180]	; (20c4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x378>)
    2010:	6860      	ldr	r0, [r4, #4]
    2012:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    2016:	2801      	cmp	r0, #1
    2018:	d004      	beq.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    201a:	2802      	cmp	r0, #2
    201c:	d002      	beq.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    201e:	f7ff fcc5 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2022:	b150      	cbz	r0, 203a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    2024:	f06f 0613 	mvn.w	r6, #19
    2028:	b33f      	cbz	r7, 207a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32e>
    202a:	4628      	mov	r0, r5
    202c:	f007 f89c 	bl	9168 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    2030:	b950      	cbnz	r0, 2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    2032:	e005      	b.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    2034:	f241 5157 	movw	r1, #5463	; 0x1557
    2038:	e03a      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    203a:	f241 515d 	movw	r1, #5469	; 0x155d
    203e:	e037      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    2040:	4628      	mov	r0, r5
    2042:	f007 f8ad 	bl	91a0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    2046:	b1c0      	cbz	r0, 207a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32e>
    2048:	6861      	ldr	r1, [r4, #4]
    204a:	4628      	mov	r0, r5
    204c:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    2050:	2a05      	cmp	r2, #5
    2052:	d202      	bcs.n	205a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30e>
    2054:	f241 41dc 	movw	r1, #5340	; 0x14dc
    2058:	e02a      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    205a:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    205e:	2a0b      	cmp	r2, #11
    2060:	d302      	bcc.n	2068 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31c>
    2062:	f241 41dd 	movw	r1, #5341	; 0x14dd
    2066:	e023      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    2068:	68e2      	ldr	r2, [r4, #12]
    206a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    206e:	6952      	ldr	r2, [r2, #20]
    2070:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    2074:	5851      	ldr	r1, [r2, r1]
    2076:	4788      	blx	r1
    2078:	e016      	b.n	20a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35c>
    207a:	6860      	ldr	r0, [r4, #4]
    207c:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    2080:	2905      	cmp	r1, #5
    2082:	d202      	bcs.n	208a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33e>
    2084:	f241 514d 	movw	r1, #5453	; 0x154d
    2088:	e012      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    208a:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    208e:	290b      	cmp	r1, #11
    2090:	d302      	bcc.n	2098 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34c>
    2092:	f241 514e 	movw	r1, #5454	; 0x154e
    2096:	e00b      	b.n	20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    2098:	68e1      	ldr	r1, [r4, #12]
    209a:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    209e:	6989      	ldr	r1, [r1, #24]
    20a0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    20a4:	5808      	ldr	r0, [r1, r0]
    20a6:	4780      	blx	r0
    20a8:	280f      	cmp	r0, #15
    20aa:	d304      	bcc.n	20b6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36a>
    20ac:	f241 5172 	movw	r1, #5490	; 0x1572
    20b0:	2032      	movs	r0, #50	; 0x32
    20b2:	f7fe f96f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20b6:	68e1      	ldr	r1, [r4, #12]
    20b8:	6909      	ldr	r1, [r1, #16]
    20ba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    20be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20c2:	4700      	bx	r0
    20c4:	2000009c 	.word	0x2000009c
    20c8:	b510      	push	{r4, lr}
    20ca:	b118      	cbz	r0, 20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    20cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20d0:	f000 b906 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    20d4:	2900      	cmp	r1, #0
    20d6:	d01d      	beq.n	2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>
    20d8:	480f      	ldr	r0, [pc, #60]	; (2118 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3cc>)
    20da:	6841      	ldr	r1, [r0, #4]
    20dc:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    20e0:	2a0b      	cmp	r2, #11
    20e2:	d202      	bcs.n	20ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39e>
    20e4:	f241 612d 	movw	r1, #5677	; 0x162d
    20e8:	e005      	b.n	20f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3aa>
    20ea:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    20ee:	2a0f      	cmp	r2, #15
    20f0:	d304      	bcc.n	20fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b0>
    20f2:	f241 612e 	movw	r1, #5678	; 0x162e
    20f6:	2032      	movs	r0, #50	; 0x32
    20f8:	f7fe f94c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20fc:	68c0      	ldr	r0, [r0, #12]
    20fe:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    2102:	6880      	ldr	r0, [r0, #8]
    2104:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    2108:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    210c:	5840      	ldr	r0, [r0, r1]
    210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2112:	4700      	bx	r0
    2114:	bd10      	pop	{r4, pc}
    2116:	0000      	.short	0x0000
    2118:	2000009c 	.word	0x2000009c
    211c:	b510      	push	{r4, lr}
    211e:	f7fe fced 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2122:	4604      	mov	r4, r0
    2124:	f7fe fcf0 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2128:	4621      	mov	r1, r4
    212a:	f007 f938 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    212e:	b150      	cbz	r0, 2146 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fa>
    2130:	f001 fcde 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2134:	2000      	movs	r0, #0
    2136:	f001 fbad 	bl	3894 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    213a:	4905      	ldr	r1, [pc, #20]	; (2150 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x404>)
    213c:	2006      	movs	r0, #6
    213e:	6849      	ldr	r1, [r1, #4]
    2140:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2144:	bd10      	pop	{r4, pc}
    2146:	f44f 61c6 	mov.w	r1, #1584	; 0x630
    214a:	2032      	movs	r0, #50	; 0x32
    214c:	f7fe f922 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2150:	2000009c 	.word	0x2000009c
    2154:	490f      	ldr	r1, [pc, #60]	; (2194 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x448>)
    2156:	b510      	push	{r4, lr}
    2158:	6848      	ldr	r0, [r1, #4]
    215a:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    215e:	2a05      	cmp	r2, #5
    2160:	d202      	bcs.n	2168 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41c>
    2162:	f241 6161 	movw	r1, #5729	; 0x1661
    2166:	e005      	b.n	2174 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x428>
    2168:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    216c:	2a0b      	cmp	r2, #11
    216e:	d304      	bcc.n	217a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    2170:	f241 6162 	movw	r1, #5730	; 0x1662
    2174:	2032      	movs	r0, #50	; 0x32
    2176:	f7fe f90d 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    217a:	68c9      	ldr	r1, [r1, #12]
    217c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2180:	68c9      	ldr	r1, [r1, #12]
    2182:	f06f 0213 	mvn.w	r2, #19
    2186:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    218a:	5808      	ldr	r0, [r1, r0]
    218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2190:	4700      	bx	r0
    2192:	0000      	.short	0x0000
    2194:	2000009c 	.word	0x2000009c
    2198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    219c:	4c2c      	ldr	r4, [pc, #176]	; (2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>)
    219e:	4605      	mov	r5, r0
    21a0:	460e      	mov	r6, r1
    21a2:	6860      	ldr	r0, [r4, #4]
    21a4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    21a8:	b120      	cbz	r0, 21b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x468>
    21aa:	2801      	cmp	r0, #1
    21ac:	d002      	beq.n	21b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x468>
    21ae:	200c      	movs	r0, #12
    21b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21b4:	f001 fbf6 	bl	39a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    21b8:	f001 fa54 	bl	3664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    21bc:	f001 f972 	bl	34a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    21c0:	4824      	ldr	r0, [pc, #144]	; (2254 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x508>)
    21c2:	f001 fb5f 	bl	3884 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    21c6:	4824      	ldr	r0, [pc, #144]	; (2258 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50c>)
    21c8:	f001 fd4e 	bl	3c68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    21cc:	4823      	ldr	r0, [pc, #140]	; (225c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x510>)
    21ce:	f001 fd41 	bl	3c54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    21d2:	4630      	mov	r0, r6
    21d4:	f001 fc8c 	bl	3af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    21d8:	7968      	ldrb	r0, [r5, #5]
    21da:	b110      	cbz	r0, 21e2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x496>
    21dc:	2001      	movs	r0, #1
    21de:	f7ff fed5 	bl	1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    21e2:	7928      	ldrb	r0, [r5, #4]
    21e4:	2803      	cmp	r0, #3
    21e6:	d001      	beq.n	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    21e8:	b118      	cbz	r0, 21f2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a6>
    21ea:	e018      	b.n	221e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d2>
    21ec:	f640 2152 	movw	r1, #2642	; 0xa52
    21f0:	e02a      	b.n	2248 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4fc>
    21f2:	6861      	ldr	r1, [r4, #4]
    21f4:	2000      	movs	r0, #0
    21f6:	2503      	movs	r5, #3
    21f8:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    21fc:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    2200:	1c52      	adds	r2, r2, #1
    2202:	fbb2 f7f5 	udiv	r7, r2, r5
    2206:	fb05 2217 	mls	r2, r5, r7, r2
    220a:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    220e:	fa23 f202 	lsr.w	r2, r3, r2
    2212:	07d2      	lsls	r2, r2, #31
    2214:	d103      	bne.n	221e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d2>
    2216:	1c40      	adds	r0, r0, #1
    2218:	b2c0      	uxtb	r0, r0
    221a:	2803      	cmp	r0, #3
    221c:	d3ee      	bcc.n	21fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b0>
    221e:	6860      	ldr	r0, [r4, #4]
    2220:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    2224:	f001 fc42 	bl	3aac <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2228:	4631      	mov	r1, r6
    222a:	2001      	movs	r0, #1
    222c:	f7ff fb10 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2230:	2800      	cmp	r0, #0
    2232:	d0bd      	beq.n	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    2234:	f000 f8d8 	bl	23e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x69c>
    2238:	4809      	ldr	r0, [pc, #36]	; (2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>)
    223a:	6800      	ldr	r0, [r0, #0]
    223c:	2803      	cmp	r0, #3
    223e:	d001      	beq.n	2244 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f8>
    2240:	2000      	movs	r0, #0
    2242:	e7b5      	b.n	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    2244:	f44f 6126 	mov.w	r1, #2656	; 0xa60
    2248:	2032      	movs	r0, #50	; 0x32
    224a:	f7fe f8a3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    224e:	0000      	.short	0x0000
    2250:	2000009c 	.word	0x2000009c
    2254:	000024cc 	.word	0x000024cc
    2258:	00555555 	.word	0x00555555
    225c:	8e89bed6 	.word	0x8e89bed6
    2260:	40001550 	.word	0x40001550
    2264:	b510      	push	{r4, lr}
    2266:	2000      	movs	r0, #0
    2268:	f7ff fe90 	bl	1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    226c:	4808      	ldr	r0, [pc, #32]	; (2290 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x544>)
    226e:	6840      	ldr	r0, [r0, #4]
    2270:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2274:	b128      	cbz	r0, 2282 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x536>
    2276:	2801      	cmp	r0, #1
    2278:	d003      	beq.n	2282 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x536>
    227a:	2802      	cmp	r0, #2
    227c:	d004      	beq.n	2288 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    227e:	200c      	movs	r0, #12
    2280:	bd10      	pop	{r4, pc}
    2282:	f000 f82d 	bl	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    2286:	e001      	b.n	228c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x540>
    2288:	f000 f840 	bl	230c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    228c:	2000      	movs	r0, #0
    228e:	bd10      	pop	{r4, pc}
    2290:	2000009c 	.word	0x2000009c
    2294:	b510      	push	{r4, lr}
    2296:	2000      	movs	r0, #0
    2298:	7048      	strb	r0, [r1, #1]
    229a:	2019      	movs	r0, #25
    229c:	7008      	strb	r0, [r1, #0]
    229e:	480f      	ldr	r0, [pc, #60]	; (22dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x590>)
    22a0:	6840      	ldr	r0, [r0, #4]
    22a2:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    22a6:	6048      	str	r0, [r1, #4]
    22a8:	7908      	ldrb	r0, [r1, #4]
    22aa:	2801      	cmp	r0, #1
    22ac:	d114      	bne.n	22d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58c>
    22ae:	88cc      	ldrh	r4, [r1, #6]
    22b0:	2100      	movs	r1, #0
    22b2:	4620      	mov	r0, r4
    22b4:	f7fe fb18 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    22b8:	2800      	cmp	r0, #0
    22ba:	d00d      	beq.n	22d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58c>
    22bc:	4620      	mov	r0, r4
    22be:	f006 fe1c 	bl	8efa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    22c2:	2100      	movs	r1, #0
    22c4:	4620      	mov	r0, r4
    22c6:	f7fe fb77 	bl	9b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    22ca:	2800      	cmp	r0, #0
    22cc:	d004      	beq.n	22d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58c>
    22ce:	f240 4115 	movw	r1, #1045	; 0x415
    22d2:	2032      	movs	r0, #50	; 0x32
    22d4:	f7fe f85e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22d8:	bd10      	pop	{r4, pc}
    22da:	0000      	.short	0x0000
    22dc:	2000009c 	.word	0x2000009c
    22e0:	b510      	push	{r4, lr}
    22e2:	f7ff faa3 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    22e6:	4904      	ldr	r1, [pc, #16]	; (22f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5ac>)
    22e8:	2001      	movs	r0, #1
    22ea:	6849      	ldr	r1, [r1, #4]
    22ec:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    22f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    22f4:	f000 ba4e 	b.w	2794 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    22f8:	2000009c 	.word	0x2000009c
    22fc:	4902      	ldr	r1, [pc, #8]	; (2308 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5bc>)
    22fe:	2000      	movs	r0, #0
    2300:	6849      	ldr	r1, [r1, #4]
    2302:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2306:	4770      	bx	lr
    2308:	2000009c 	.word	0x2000009c
    230c:	b570      	push	{r4, r5, r6, lr}
    230e:	f7fe fbf5 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2312:	4604      	mov	r4, r0
    2314:	f7fe fbf8 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2318:	4621      	mov	r1, r4
    231a:	f007 f840 	bl	939e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    231e:	0004      	movs	r4, r0
    2320:	d020      	beq.n	2364 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x618>
    2322:	f007 f849 	bl	93b8 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    2326:	2000      	movs	r0, #0
    2328:	f000 f988 	bl	263c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    232c:	b1f8      	cbz	r0, 236e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x622>
    232e:	4d20      	ldr	r5, [pc, #128]	; (23b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x664>)
    2330:	6868      	ldr	r0, [r5, #4]
    2332:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2336:	2802      	cmp	r0, #2
    2338:	d003      	beq.n	2342 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5f6>
    233a:	4621      	mov	r1, r4
    233c:	2000      	movs	r0, #0
    233e:	f7ff fa87 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2342:	1ce0      	adds	r0, r4, #3
    2344:	f006 fe6e 	bl	9024 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    2348:	6869      	ldr	r1, [r5, #4]
    234a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    234e:	b128      	cbz	r0, 235c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x610>
    2350:	2440      	movs	r4, #64	; 0x40
    2352:	f001 f8c7 	bl	34e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    2356:	4620      	mov	r0, r4
    2358:	f001 f992 	bl	3680 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    235c:	f7ff fb26 	bl	19ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2360:	b970      	cbnz	r0, 2380 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x634>
    2362:	e008      	b.n	2376 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62a>
    2364:	f240 511e 	movw	r1, #1310	; 0x51e
    2368:	2032      	movs	r0, #50	; 0x32
    236a:	f7fe f813 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    236e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2372:	f7ff bfb5 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    2376:	6868      	ldr	r0, [r5, #4]
    2378:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    237c:	2802      	cmp	r0, #2
    237e:	d104      	bne.n	238a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x63e>
    2380:	2100      	movs	r1, #0
    2382:	2201      	movs	r2, #1
    2384:	4608      	mov	r0, r1
    2386:	f001 fc3b 	bl	3c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    238a:	6868      	ldr	r0, [r5, #4]
    238c:	21ff      	movs	r1, #255	; 0xff
    238e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    2392:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    2396:	2100      	movs	r1, #0
    2398:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    239c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    23a0:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    23a4:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    23a8:	2105      	movs	r1, #5
    23aa:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    23ae:	bd70      	pop	{r4, r5, r6, pc}
    23b0:	2000009c 	.word	0x2000009c
    23b4:	b510      	push	{r4, lr}
    23b6:	2003      	movs	r0, #3
    23b8:	f000 f940 	bl	263c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    23bc:	b168      	cbz	r0, 23da <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68e>
    23be:	2003      	movs	r0, #3
    23c0:	f7ff fb4a 	bl	1a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    23c4:	2201      	movs	r2, #1
    23c6:	4611      	mov	r1, r2
    23c8:	2000      	movs	r0, #0
    23ca:	f001 fc19 	bl	3c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    23ce:	4905      	ldr	r1, [pc, #20]	; (23e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x698>)
    23d0:	200b      	movs	r0, #11
    23d2:	6849      	ldr	r1, [r1, #4]
    23d4:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    23d8:	bd10      	pop	{r4, pc}
    23da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23de:	f7ff bf7f 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    23e2:	0000      	.short	0x0000
    23e4:	2000009c 	.word	0x2000009c
    23e8:	b570      	push	{r4, r5, r6, lr}
    23ea:	4d19      	ldr	r5, [pc, #100]	; (2450 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x704>)
    23ec:	2000      	movs	r0, #0
    23ee:	686c      	ldr	r4, [r5, #4]
    23f0:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    23f4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    23f8:	b910      	cbnz	r0, 2400 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6b4>
    23fa:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    23fe:	b308      	cbz	r0, 2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>
    2400:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    2404:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2408:	4050      	eors	r0, r2
    240a:	ea70 0101 	orns	r1, r0, r1
    240e:	d019      	beq.n	2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>
    2410:	f007 fd04 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2414:	e9d4 2300 	ldrd	r2, r3, [r4]
    2418:	1a80      	subs	r0, r0, r2
    241a:	4199      	sbcs	r1, r3
    241c:	d312      	bcc.n	2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>
    241e:	f7fe fdb5 	bl	f8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    2422:	490c      	ldr	r1, [pc, #48]	; (2454 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x708>)
    2424:	fba0 2301 	umull	r2, r3, r0, r1
    2428:	6868      	ldr	r0, [r5, #4]
    242a:	3090      	adds	r0, #144	; 0x90
    242c:	f006 ffb9 	bl	93a2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    2430:	6868      	ldr	r0, [r5, #4]
    2432:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    2436:	b110      	cbz	r0, 243e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f2>
    2438:	2001      	movs	r0, #1
    243a:	f7fe fd31 	bl	ea0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    243e:	2001      	movs	r0, #1
    2440:	f7ff fd7e 	bl	1f40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>
    2444:	6869      	ldr	r1, [r5, #4]
    2446:	2002      	movs	r0, #2
    2448:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    244c:	bd70      	pop	{r4, r5, r6, pc}
    244e:	0000      	.short	0x0000
    2450:	2000009c 	.word	0x2000009c
    2454:	000f4240 	.word	0x000f4240
    2458:	000022fd 	.word	0x000022fd
    245c:	000022e1 	.word	0x000022e1
    2460:	0000935f 	.word	0x0000935f
    2464:	0000935f 	.word	0x0000935f
    2468:	0000935f 	.word	0x0000935f
    246c:	0000230d 	.word	0x0000230d
    2470:	0000935f 	.word	0x0000935f
    2474:	0000935f 	.word	0x0000935f
    2478:	0000935f 	.word	0x0000935f
    247c:	0000935f 	.word	0x0000935f
    2480:	0000935f 	.word	0x0000935f
    2484:	000023b5 	.word	0x000023b5
    2488:	0000935f 	.word	0x0000935f
    248c:	0000935f 	.word	0x0000935f
    2490:	0000935f 	.word	0x0000935f
    2494:	0000211d 	.word	0x0000211d
    2498:	00009369 	.word	0x00009369
    249c:	00009377 	.word	0x00009377
    24a0:	0000930f 	.word	0x0000930f
    24a4:	00009319 	.word	0x00009319
    24a8:	00009327 	.word	0x00009327
    24ac:	00001959 	.word	0x00001959
    24b0:	00002199 	.word	0x00002199
    24b4:	00002265 	.word	0x00002265
    24b8:	00002494 	.word	0x00002494
    24bc:	00002498 	.word	0x00002498
    24c0:	00002458 	.word	0x00002458
    24c4:	000024a8 	.word	0x000024a8
    24c8:	000024a0 	.word	0x000024a0
    24cc:	00002155 	.word	0x00002155
    24d0:	00001ff5 	.word	0x00001ff5
    24d4:	000020c9 	.word	0x000020c9
    24d8:	00009389 	.word	0x00009389
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	4604      	mov	r4, r0
    24e0:	7800      	ldrb	r0, [r0, #0]
    24e2:	2805      	cmp	r0, #5
    24e4:	d001      	beq.n	24ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x79e>
    24e6:	2148      	movs	r1, #72	; 0x48
    24e8:	e058      	b.n	259c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x850>
    24ea:	7ba0      	ldrb	r0, [r4, #14]
    24ec:	06c0      	lsls	r0, r0, #27
    24ee:	d401      	bmi.n	24f4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a8>
    24f0:	2149      	movs	r1, #73	; 0x49
    24f2:	e053      	b.n	259c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x850>
    24f4:	221c      	movs	r2, #28
    24f6:	1d21      	adds	r1, r4, #4
    24f8:	482f      	ldr	r0, [pc, #188]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    24fa:	f007 fe21 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    24fe:	482e      	ldr	r0, [pc, #184]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    2500:	7b22      	ldrb	r2, [r4, #12]
    2502:	f104 0120 	add.w	r1, r4, #32
    2506:	301c      	adds	r0, #28
    2508:	f007 fe1a 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    250c:	482a      	ldr	r0, [pc, #168]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    250e:	f04f 0201 	mov.w	r2, #1
    2512:	7a81      	ldrb	r1, [r0, #10]
    2514:	0749      	lsls	r1, r1, #29
    2516:	d502      	bpl.n	251e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7d2>
    2518:	7cc1      	ldrb	r1, [r0, #19]
    251a:	29fe      	cmp	r1, #254	; 0xfe
    251c:	d00c      	beq.n	2538 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7ec>
    251e:	2304      	movs	r3, #4
    2520:	7023      	strb	r3, [r4, #0]
    2522:	6801      	ldr	r1, [r0, #0]
    2524:	6061      	str	r1, [r4, #4]
    2526:	6841      	ldr	r1, [r0, #4]
    2528:	60a1      	str	r1, [r4, #8]
    252a:	8901      	ldrh	r1, [r0, #8]
    252c:	81a1      	strh	r1, [r4, #12]
    252e:	7a81      	ldrb	r1, [r0, #10]
    2530:	070d      	lsls	r5, r1, #28
    2532:	d519      	bpl.n	2568 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x81c>
    2534:	73a3      	strb	r3, [r4, #14]
    2536:	e02d      	b.n	2594 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x848>
    2538:	2113      	movs	r1, #19
    253a:	7021      	strb	r1, [r4, #0]
    253c:	7801      	ldrb	r1, [r0, #0]
    253e:	7121      	strb	r1, [r4, #4]
    2540:	7162      	strb	r2, [r4, #5]
    2542:	7841      	ldrb	r1, [r0, #1]
    2544:	71a1      	strb	r1, [r4, #6]
    2546:	f8d0 1002 	ldr.w	r1, [r0, #2]
    254a:	f8c4 1007 	str.w	r1, [r4, #7]
    254e:	88c1      	ldrh	r1, [r0, #6]
    2550:	f8a4 100b 	strh.w	r1, [r4, #11]
    2554:	21fe      	movs	r1, #254	; 0xfe
    2556:	7361      	strb	r1, [r4, #13]
    2558:	6941      	ldr	r1, [r0, #20]
    255a:	f8c4 100e 	str.w	r1, [r4, #14]
    255e:	8b01      	ldrh	r1, [r0, #24]
    2560:	8261      	strh	r1, [r4, #18]
    2562:	7a40      	ldrb	r0, [r0, #9]
    2564:	7520      	strb	r0, [r4, #20]
    2566:	bd70      	pop	{r4, r5, r6, pc}
    2568:	07cb      	lsls	r3, r1, #31
    256a:	d003      	beq.n	2574 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x828>
    256c:	078b      	lsls	r3, r1, #30
    256e:	d501      	bpl.n	2574 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x828>
    2570:	2100      	movs	r1, #0
    2572:	e00e      	b.n	2592 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x846>
    2574:	074b      	lsls	r3, r1, #29
    2576:	d501      	bpl.n	257c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x830>
    2578:	73a2      	strb	r2, [r4, #14]
    257a:	e00b      	b.n	2594 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x848>
    257c:	07ca      	lsls	r2, r1, #31
    257e:	d110      	bne.n	25a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x856>
    2580:	078a      	lsls	r2, r1, #30
    2582:	d501      	bpl.n	2588 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x83c>
    2584:	2102      	movs	r1, #2
    2586:	e004      	b.n	2592 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x846>
    2588:	07ca      	lsls	r2, r1, #31
    258a:	d10a      	bne.n	25a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x856>
    258c:	0789      	lsls	r1, r1, #30
    258e:	d408      	bmi.n	25a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x856>
    2590:	2103      	movs	r1, #3
    2592:	73a1      	strb	r1, [r4, #14]
    2594:	7a02      	ldrb	r2, [r0, #8]
    2596:	2a1f      	cmp	r2, #31
    2598:	d905      	bls.n	25a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x85a>
    259a:	218d      	movs	r1, #141	; 0x8d
    259c:	2033      	movs	r0, #51	; 0x33
    259e:	f7fd fef9 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25a2:	218a      	movs	r1, #138	; 0x8a
    25a4:	e7fa      	b.n	259c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x850>
    25a6:	f104 000f 	add.w	r0, r4, #15
    25aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25ae:	4902      	ldr	r1, [pc, #8]	; (25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>)
    25b0:	311c      	adds	r1, #28
    25b2:	f007 bdc5 	b.w	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25b6:	0000      	.short	0x0000
    25b8:	20001034 	.word	0x20001034
    25bc:	2100      	movs	r1, #0
    25be:	7201      	strb	r1, [r0, #8]
    25c0:	2206      	movs	r2, #6
    25c2:	4901      	ldr	r1, [pc, #4]	; (25c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87c>)
    25c4:	f006 be30 	b.w	9228 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25c8:	00009573 	.word	0x00009573

000025cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    25cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25d0:	4616      	mov	r6, r2
    25d2:	460c      	mov	r4, r1
    25d4:	4605      	mov	r5, r0
    25d6:	f006 fddf 	bl	9198 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    25da:	7460      	strb	r0, [r4, #17]
    25dc:	4628      	mov	r0, r5
    25de:	f006 fdd8 	bl	9192 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    25e2:	74a0      	strb	r0, [r4, #18]
    25e4:	1cea      	adds	r2, r5, #3
    25e6:	4b14      	ldr	r3, [pc, #80]	; (2638 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    25e8:	1d90      	adds	r0, r2, #6
    25ea:	2100      	movs	r1, #0
    25ec:	2e07      	cmp	r6, #7
    25ee:	d21f      	bcs.n	2630 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    25f0:	e8df f006 	tbb	[pc, r6]
    25f4:	1e110b04 	.word	0x1e110b04
    25f8:	00041e13 	.word	0x00041e13
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	e00d      	b.n	261c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    2600:	60e0      	str	r0, [r4, #12]
    2602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2606:	60e1      	str	r1, [r4, #12]
    2608:	e7fb      	b.n	2602 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    260a:	785b      	ldrb	r3, [r3, #1]
    260c:	7063      	strb	r3, [r4, #1]
    260e:	e9c4 2001 	strd	r2, r0, [r4, #4]
    2612:	7421      	strb	r1, [r4, #16]
    2614:	e7f7      	b.n	2606 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    2616:	789b      	ldrb	r3, [r3, #2]
    2618:	e000      	b.n	261c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    261a:	78db      	ldrb	r3, [r3, #3]
    261c:	7063      	strb	r3, [r4, #1]
    261e:	e9c4 2101 	strd	r2, r1, [r4, #4]
    2622:	786a      	ldrb	r2, [r5, #1]
    2624:	1f92      	subs	r2, r2, #6
    2626:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    262a:	7422      	strb	r2, [r4, #16]
    262c:	d0eb      	beq.n	2606 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    262e:	e7e7      	b.n	2600 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    2630:	7061      	strb	r1, [r4, #1]
    2632:	6061      	str	r1, [r4, #4]
    2634:	60a1      	str	r1, [r4, #8]
    2636:	e7ec      	b.n	2612 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    2638:	0000a381 	.word	0x0000a381

0000263c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	4605      	mov	r5, r0
    2640:	f007 fbec 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2644:	4c16      	ldr	r4, [pc, #88]	; (26a0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    2646:	6921      	ldr	r1, [r4, #16]
    2648:	1a46      	subs	r6, r0, r1
    264a:	b155      	cbz	r5, 2662 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    264c:	2d03      	cmp	r5, #3
    264e:	d00d      	beq.n	266c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    2650:	2d04      	cmp	r5, #4
    2652:	d00e      	beq.n	2672 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    2654:	2d06      	cmp	r5, #6
    2656:	d01d      	beq.n	2694 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    2658:	f240 31d6 	movw	r1, #982	; 0x3d6
    265c:	2021      	movs	r0, #33	; 0x21
    265e:	f7fd fe99 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2662:	2001      	movs	r0, #1
    2664:	f007 f823 	bl	96ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2668:	3098      	adds	r0, #152	; 0x98
    266a:	e004      	b.n	2676 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    266c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    2670:	e001      	b.n	2676 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    2672:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    2676:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2678:	1835      	adds	r5, r6, r0
    267a:	39f9      	subs	r1, #249	; 0xf9
    267c:	428d      	cmp	r5, r1
    267e:	d307      	bcc.n	2690 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    2680:	2600      	movs	r6, #0
    2682:	f000 fa1b 	bl	2abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    2686:	b140      	cbz	r0, 269a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    2688:	6b20      	ldr	r0, [r4, #48]	; 0x30
    268a:	38f9      	subs	r0, #249	; 0xf9
    268c:	4285      	cmp	r5, r0
    268e:	d203      	bcs.n	2698 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    2690:	2601      	movs	r6, #1
    2692:	e002      	b.n	269a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    2694:	2001      	movs	r0, #1
    2696:	bd70      	pop	{r4, r5, r6, pc}
    2698:	2600      	movs	r6, #0
    269a:	4630      	mov	r0, r6
    269c:	bd70      	pop	{r4, r5, r6, pc}
    269e:	0000      	.short	0x0000
    26a0:	20000650 	.word	0x20000650

000026a4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	b086      	sub	sp, #24
    26a8:	4606      	mov	r6, r0
    26aa:	b111      	cbz	r1, 26b2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    26ac:	2011      	movs	r0, #17
    26ae:	b006      	add	sp, #24
    26b0:	bd70      	pop	{r4, r5, r6, pc}
    26b2:	4c17      	ldr	r4, [pc, #92]	; (2710 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    26b4:	7820      	ldrb	r0, [r4, #0]
    26b6:	b108      	cbz	r0, 26bc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    26b8:	200c      	movs	r0, #12
    26ba:	e7f8      	b.n	26ae <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    26bc:	f7fe ff38 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    26c0:	4605      	mov	r5, r0
    26c2:	2000      	movs	r0, #0
    26c4:	7060      	strb	r0, [r4, #1]
    26c6:	2004      	movs	r0, #4
    26c8:	7020      	strb	r0, [r4, #0]
    26ca:	f000 fa3d 	bl	2b48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    26ce:	64a0      	str	r0, [r4, #72]	; 0x48
    26d0:	2100      	movs	r1, #0
    26d2:	4810      	ldr	r0, [pc, #64]	; (2714 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    26d4:	f004 f814 	bl	6700 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    26d8:	7028      	strb	r0, [r5, #0]
    26da:	2820      	cmp	r0, #32
    26dc:	d00d      	beq.n	26fa <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    26de:	4633      	mov	r3, r6
    26e0:	2200      	movs	r2, #0
    26e2:	2101      	movs	r1, #1
    26e4:	4668      	mov	r0, sp
    26e6:	f000 fa89 	bl	2bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    26ea:	b148      	cbz	r0, 2700 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    26ec:	7828      	ldrb	r0, [r5, #0]
    26ee:	4669      	mov	r1, sp
    26f0:	f006 fff7 	bl	96e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    26f4:	b138      	cbz	r0, 2706 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    26f6:	2000      	movs	r0, #0
    26f8:	e7d9      	b.n	26ae <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    26fa:	f240 3162 	movw	r1, #866	; 0x362
    26fe:	e004      	b.n	270a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2700:	f44f 7159 	mov.w	r1, #868	; 0x364
    2704:	e001      	b.n	270a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2706:	f240 3165 	movw	r1, #869	; 0x365
    270a:	2021      	movs	r0, #33	; 0x21
    270c:	f7fd fe42 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2710:	20000650 	.word	0x20000650
    2714:	00002885 	.word	0x00002885

00002718 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    271c:	2700      	movs	r7, #0
    271e:	f7fe ff07 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2722:	4c18      	ldr	r4, [pc, #96]	; (2784 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    2724:	4605      	mov	r5, r0
    2726:	7820      	ldrb	r0, [r4, #0]
    2728:	2804      	cmp	r0, #4
    272a:	d005      	beq.n	2738 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    272c:	7820      	ldrb	r0, [r4, #0]
    272e:	2805      	cmp	r0, #5
    2730:	d002      	beq.n	2738 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    2732:	200c      	movs	r0, #12
    2734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2738:	2001      	movs	r0, #1
    273a:	7060      	strb	r0, [r4, #1]
    273c:	7b20      	ldrb	r0, [r4, #12]
    273e:	b160      	cbz	r0, 275a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    2740:	f3ef 8610 	mrs	r6, PRIMASK
    2744:	b672      	cpsid	i
    2746:	7b20      	ldrb	r0, [r4, #12]
    2748:	b128      	cbz	r0, 2756 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    274a:	7b60      	ldrb	r0, [r4, #13]
    274c:	b118      	cbz	r0, 2756 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    274e:	f006 fdd4 	bl	92fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2752:	f000 f887 	bl	2864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    2756:	b126      	cbz	r6, 2762 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    2758:	e004      	b.n	2764 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    275a:	7828      	ldrb	r0, [r5, #0]
    275c:	f003 fd4e 	bl	61fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    2760:	e000      	b.n	2764 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    2762:	b662      	cpsie	i
    2764:	7828      	ldrb	r0, [r5, #0]
    2766:	f003 feb3 	bl	64d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    276a:	f000 fb9f 	bl	2eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    276e:	2000      	movs	r0, #0
    2770:	7060      	strb	r0, [r4, #1]
    2772:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    2776:	b100      	cbz	r0, 277a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    2778:	270c      	movs	r7, #12
    277a:	f000 fbc3 	bl	2f04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    277e:	4638      	mov	r0, r7
    2780:	e7d8      	b.n	2734 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    2782:	0000      	.short	0x0000
    2784:	20000650 	.word	0x20000650

00002788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    2788:	4801      	ldr	r0, [pc, #4]	; (2790 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    278a:	7800      	ldrb	r0, [r0, #0]
    278c:	4770      	bx	lr
    278e:	0000      	.short	0x0000
    2790:	20000650 	.word	0x20000650

00002794 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    2794:	b510      	push	{r4, lr}
    2796:	4c10      	ldr	r4, [pc, #64]	; (27d8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    2798:	b086      	sub	sp, #24
    279a:	7b20      	ldrb	r0, [r4, #12]
    279c:	b1b0      	cbz	r0, 27cc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    279e:	7860      	ldrb	r0, [r4, #1]
    27a0:	b9a0      	cbnz	r0, 27cc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27a2:	2300      	movs	r3, #0
    27a4:	461a      	mov	r2, r3
    27a6:	4619      	mov	r1, r3
    27a8:	4668      	mov	r0, sp
    27aa:	f000 fa27 	bl	2bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    27ae:	b158      	cbz	r0, 27c8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    27b0:	f7fe febe 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    27b4:	7800      	ldrb	r0, [r0, #0]
    27b6:	4669      	mov	r1, sp
    27b8:	f006 ff93 	bl	96e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    27bc:	b930      	cbnz	r0, 27cc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27be:	f240 71bc 	movw	r1, #1980	; 0x7bc
    27c2:	2021      	movs	r0, #33	; 0x21
    27c4:	f7fd fde6 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27c8:	2001      	movs	r0, #1
    27ca:	70a0      	strb	r0, [r4, #2]
    27cc:	b006      	add	sp, #24
    27ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27d2:	f000 b847 	b.w	2864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    27d6:	0000      	.short	0x0000
    27d8:	20000650 	.word	0x20000650

000027dc <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    27dc:	b508      	push	{r3, lr}
    27de:	2260      	movs	r2, #96	; 0x60
    27e0:	2100      	movs	r1, #0
    27e2:	480c      	ldr	r0, [pc, #48]	; (2814 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    27e4:	f007 fd26 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    27e8:	f7fe fea2 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    27ec:	2120      	movs	r1, #32
    27ee:	7001      	strb	r1, [r0, #0]
    27f0:	f000 f812 	bl	2818 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    27f4:	b120      	cbz	r0, 2800 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    27f6:	f240 2135 	movw	r1, #565	; 0x235
    27fa:	2021      	movs	r0, #33	; 0x21
    27fc:	f7fd fdca 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2800:	f242 7010 	movw	r0, #10000	; 0x2710
    2804:	9000      	str	r0, [sp, #0]
    2806:	2201      	movs	r2, #1
    2808:	4669      	mov	r1, sp
    280a:	1080      	asrs	r0, r0, #2
    280c:	f000 f8dc 	bl	29c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    2810:	bd08      	pop	{r3, pc}
    2812:	0000      	.short	0x0000
    2814:	20000650 	.word	0x20000650

00002818 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    2818:	4803      	ldr	r0, [pc, #12]	; (2828 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    281a:	b510      	push	{r4, lr}
    281c:	7800      	ldrb	r0, [r0, #0]
    281e:	b108      	cbz	r0, 2824 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    2820:	f7ff ff7a 	bl	2718 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    2824:	2000      	movs	r0, #0
    2826:	bd10      	pop	{r4, pc}
    2828:	20000650 	.word	0x20000650

0000282c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    282c:	490c      	ldr	r1, [pc, #48]	; (2860 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    282e:	b508      	push	{r3, lr}
    2830:	7809      	ldrb	r1, [r1, #0]
    2832:	b121      	cbz	r1, 283e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    2834:	f44f 7147 	mov.w	r1, #796	; 0x31c
    2838:	2021      	movs	r0, #33	; 0x21
    283a:	f7fd fdab 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    283e:	2300      	movs	r3, #0
    2840:	9300      	str	r3, [sp, #0]
    2842:	7801      	ldrb	r1, [r0, #0]
    2844:	461a      	mov	r2, r3
    2846:	07c9      	lsls	r1, r1, #31
    2848:	d003      	beq.n	2852 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    284a:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    284e:	2201      	movs	r2, #1
    2850:	9000      	str	r0, [sp, #0]
    2852:	4669      	mov	r1, sp
    2854:	4618      	mov	r0, r3
    2856:	f000 f8b7 	bl	29c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    285a:	2000      	movs	r0, #0
    285c:	bd08      	pop	{r3, pc}
    285e:	0000      	.short	0x0000
    2860:	20000650 	.word	0x20000650
    2864:	b510      	push	{r4, lr}
    2866:	4c06      	ldr	r4, [pc, #24]	; (2880 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54>)
    2868:	7b20      	ldrb	r0, [r4, #12]
    286a:	2800      	cmp	r0, #0
    286c:	d006      	beq.n	287c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50>
    286e:	f001 f865 	bl	393c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    2872:	f003 ff69 	bl	6748 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    2876:	2000      	movs	r0, #0
    2878:	7320      	strb	r0, [r4, #12]
    287a:	7360      	strb	r0, [r4, #13]
    287c:	bd10      	pop	{r4, pc}
    287e:	0000      	.short	0x0000
    2880:	20000650 	.word	0x20000650
    2884:	b5f0      	push	{r4, r5, r6, r7, lr}
    2886:	b087      	sub	sp, #28
    2888:	460d      	mov	r5, r1
    288a:	f7fe fe51 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    288e:	2701      	movs	r7, #1
    2890:	4c3f      	ldr	r4, [pc, #252]	; (2990 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>)
    2892:	2d09      	cmp	r5, #9
    2894:	d278      	bcs.n	2988 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x15c>
    2896:	e8df f005 	tbb	[pc, r5]
    289a:	3905      	.short	0x3905
    289c:	774a4f4f 	.word	0x774a4f4f
    28a0:	00726d64 	.word	0x00726d64
    28a4:	7327      	strb	r7, [r4, #12]
    28a6:	7861      	ldrb	r1, [r4, #1]
    28a8:	2900      	cmp	r1, #0
    28aa:	d12d      	bne.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    28ac:	7800      	ldrb	r0, [r0, #0]
    28ae:	f002 ff49 	bl	5744 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    28b2:	4605      	mov	r5, r0
    28b4:	460e      	mov	r6, r1
    28b6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    28ba:	f000 fb3f 	bl	2f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    28be:	b118      	cbz	r0, 28c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>
    28c0:	2000      	movs	r0, #0
    28c2:	f88d 0004 	strb.w	r0, [sp, #4]
    28c6:	e001      	b.n	28cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    28c8:	f88d 7004 	strb.w	r7, [sp, #4]
    28cc:	f000 f950 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    28d0:	4633      	mov	r3, r6
    28d2:	462a      	mov	r2, r5
    28d4:	f006 ff07 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    28d8:	6861      	ldr	r1, [r4, #4]
    28da:	fbb0 f2f1 	udiv	r2, r0, r1
    28de:	fb01 0012 	mls	r0, r1, r2, r0
    28e2:	b150      	cbz	r0, 28fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xce>
    28e4:	f05f 0000 	movs.w	r0, #0
    28e8:	f88d 0005 	strb.w	r0, [sp, #5]
    28ec:	4668      	mov	r0, sp
    28ee:	f7fe feb7 	bl	1660 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    28f2:	b120      	cbz	r0, 28fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd2>
    28f4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    28f8:	e043      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    28fa:	2001      	movs	r0, #1
    28fc:	e7f4      	b.n	28e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>
    28fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2900:	38e8      	subs	r0, #232	; 0xe8
    2902:	63a0      	str	r0, [r4, #56]	; 0x38
    2904:	f003 fffc 	bl	6900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    2908:	b007      	add	sp, #28
    290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    290c:	7860      	ldrb	r0, [r4, #1]
    290e:	b130      	cbz	r0, 291e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf2>
    2910:	f006 fcf3 	bl	92fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2914:	b007      	add	sp, #28
    2916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    291a:	f7ff bfa3 	b.w	2864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    291e:	7367      	strb	r7, [r4, #13]
    2920:	f7fe ff26 	bl	1770 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    2924:	2800      	cmp	r0, #0
    2926:	d0ef      	beq.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2928:	f240 11e1 	movw	r1, #481	; 0x1e1
    292c:	e029      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    292e:	b007      	add	sp, #28
    2930:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2934:	f001 b9ce 	b.w	3cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    2938:	7805      	ldrb	r5, [r0, #0]
    293a:	2300      	movs	r3, #0
    293c:	2201      	movs	r2, #1
    293e:	4619      	mov	r1, r3
    2940:	4668      	mov	r0, sp
    2942:	f000 f95b 	bl	2bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    2946:	b140      	cbz	r0, 295a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12e>
    2948:	4669      	mov	r1, sp
    294a:	4628      	mov	r0, r5
    294c:	f006 fec9 	bl	96e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    2950:	2800      	cmp	r0, #0
    2952:	d1d9      	bne.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2954:	f240 71d7 	movw	r1, #2007	; 0x7d7
    2958:	e013      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    295a:	70a7      	strb	r7, [r4, #2]
    295c:	f000 f81a 	bl	2994 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    2960:	e7d2      	b.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2962:	f000 f8ab 	bl	2abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    2966:	2800      	cmp	r0, #0
    2968:	d1ce      	bne.n	2908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    296a:	b007      	add	sp, #28
    296c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2970:	f006 bcc1 	b.w	92f6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    2974:	b007      	add	sp, #28
    2976:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    297a:	f000 b80b 	b.w	2994 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    297e:	f240 2113 	movw	r1, #531	; 0x213
    2982:	2021      	movs	r0, #33	; 0x21
    2984:	f7fd fd06 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2988:	f240 2117 	movw	r1, #535	; 0x217
    298c:	e7f9      	b.n	2982 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    298e:	0000      	.short	0x0000
    2990:	20000650 	.word	0x20000650
    2994:	b510      	push	{r4, lr}
    2996:	4c0b      	ldr	r4, [pc, #44]	; (29c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x198>)
    2998:	7820      	ldrb	r0, [r4, #0]
    299a:	b138      	cbz	r0, 29ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x180>
    299c:	f000 fa86 	bl	2eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    29a0:	78a0      	ldrb	r0, [r4, #2]
    29a2:	b150      	cbz	r0, 29ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    29a4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    29a8:	b128      	cbz	r0, 29b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18a>
    29aa:	e006      	b.n	29ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    29ac:	f240 117b 	movw	r1, #379	; 0x17b
    29b0:	2021      	movs	r0, #33	; 0x21
    29b2:	f7fd fcef 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29b6:	f7fe fef3 	bl	17a0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    29ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29be:	f000 baa1 	b.w	2f04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    29c2:	0000      	.short	0x0000
    29c4:	20000650 	.word	0x20000650
    29c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29cc:	4d11      	ldr	r5, [pc, #68]	; (2a14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e8>)
    29ce:	4616      	mov	r6, r2
    29d0:	460f      	mov	r7, r1
    29d2:	2400      	movs	r4, #0
    29d4:	6068      	str	r0, [r5, #4]
    29d6:	f006 fe5f 	bl	9698 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    29da:	f8df c03c 	ldr.w	ip, [pc, #60]	; 2a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ec>
    29de:	2100      	movs	r1, #0
    29e0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    29e4:	4232      	tst	r2, r6
    29e6:	d007      	beq.n	29f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    29e8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    29ec:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    29f0:	1a1b      	subs	r3, r3, r0
    29f2:	1c64      	adds	r4, r4, #1
    29f4:	b2e4      	uxtb	r4, r4
    29f6:	6093      	str	r3, [r2, #8]
    29f8:	1c49      	adds	r1, r1, #1
    29fa:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    29fe:	d0ef      	beq.n	29e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1b4>
    2a00:	f016 0f0e 	tst.w	r6, #14
    2a04:	d004      	beq.n	2a10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e4>
    2a06:	f240 7103 	movw	r1, #1795	; 0x703
    2a0a:	2021      	movs	r0, #33	; 0x21
    2a0c:	f7fd fcc2 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a14:	20000650 	.word	0x20000650
    2a18:	0000a385 	.word	0x0000a385
    2a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a20:	b086      	sub	sp, #24
    2a22:	4692      	mov	sl, r2
    2a24:	4607      	mov	r7, r0
    2a26:	4689      	mov	r9, r1
    2a28:	f000 fa94 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a2c:	4d22      	ldr	r5, [pc, #136]	; (2ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x28c>)
    2a2e:	f04f 0800 	mov.w	r8, #0
    2a32:	686a      	ldr	r2, [r5, #4]
    2a34:	1886      	adds	r6, r0, r2
    2a36:	eb41 0108 	adc.w	r1, r1, r8
    2a3a:	460c      	mov	r4, r1
    2a3c:	460b      	mov	r3, r1
    2a3e:	4632      	mov	r2, r6
    2a40:	4638      	mov	r0, r7
    2a42:	4649      	mov	r1, r9
    2a44:	f006 fe4f 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2a48:	4607      	mov	r7, r0
    2a4a:	f006 fe43 	bl	96d4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    2a4e:	4287      	cmp	r7, r0
    2a50:	da13      	bge.n	2a7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24e>
    2a52:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    2a56:	f000 fa7d 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a5a:	4632      	mov	r2, r6
    2a5c:	4623      	mov	r3, r4
    2a5e:	f006 fe42 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2a62:	6869      	ldr	r1, [r5, #4]
    2a64:	fbb0 f1f1 	udiv	r1, r0, r1
    2a68:	f8ca 1000 	str.w	r1, [sl]
    2a6c:	6868      	ldr	r0, [r5, #4]
    2a6e:	1980      	adds	r0, r0, r6
    2a70:	eb48 0104 	adc.w	r1, r8, r4
    2a74:	b006      	add	sp, #24
    2a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a7a:	f88d 8000 	strb.w	r8, [sp]
    2a7e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    2a80:	9001      	str	r0, [sp, #4]
    2a82:	f006 fdf2 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2a86:	f8ad 0008 	strh.w	r0, [sp, #8]
    2a8a:	2001      	movs	r0, #1
    2a8c:	f88d 000b 	strb.w	r0, [sp, #11]
    2a90:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    2a94:	f000 fa5e 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2a9c:	f000 f9ec 	bl	2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2aa0:	f88d 000a 	strb.w	r0, [sp, #10]
    2aa4:	4668      	mov	r0, sp
    2aa6:	6869      	ldr	r1, [r5, #4]
    2aa8:	f006 fafd 	bl	90a6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    2aac:	f8ca 0000 	str.w	r0, [sl]
    2ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2ab4:	e7de      	b.n	2a74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    2ab6:	0000      	.short	0x0000
    2ab8:	20000650 	.word	0x20000650
    2abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ac0:	f007 f9ac 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2ac4:	4c1f      	ldr	r4, [pc, #124]	; (2b44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>)
    2ac6:	4606      	mov	r6, r0
    2ac8:	460d      	mov	r5, r1
    2aca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    2ace:	f000 f9d3 	bl	2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2ad2:	4607      	mov	r7, r0
    2ad4:	f002 fdec 	bl	56b0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    2ad8:	4602      	mov	r2, r0
    2ada:	2867      	cmp	r0, #103	; 0x67
    2adc:	d323      	bcc.n	2b26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    2ade:	1c50      	adds	r0, r2, #1
    2ae0:	d024      	beq.n	2b2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x300>
    2ae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2ae6:	1888      	adds	r0, r1, r2
    2ae8:	4283      	cmp	r3, r0
    2aea:	d800      	bhi.n	2aee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2c2>
    2aec:	1a5a      	subs	r2, r3, r1
    2aee:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    2af2:	1830      	adds	r0, r6, r0
    2af4:	f145 31ff 	adc.w	r1, r5, #4294967295
    2af8:	f000 fa42 	bl	2f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2afc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2afe:	4408      	add	r0, r1
    2b00:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2b02:	1a45      	subs	r5, r0, r1
    2b04:	f241 3088 	movw	r0, #5000	; 0x1388
    2b08:	4285      	cmp	r5, r0
    2b0a:	d900      	bls.n	2b0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e2>
    2b0c:	4605      	mov	r5, r0
    2b0e:	f007 f985 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2b12:	1b80      	subs	r0, r0, r6
    2b14:	f100 00a1 	add.w	r0, r0, #161	; 0xa1
    2b18:	4285      	cmp	r5, r0
    2b1a:	d304      	bcc.n	2b26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    2b1c:	4639      	mov	r1, r7
    2b1e:	4628      	mov	r0, r5
    2b20:	f002 fcd6 	bl	54d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    2b24:	b120      	cbz	r0, 2b30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x304>
    2b26:	2000      	movs	r0, #0
    2b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b2e:	e7e7      	b.n	2b00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d4>
    2b30:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b32:	4428      	add	r0, r5
    2b34:	6320      	str	r0, [r4, #48]	; 0x30
    2b36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2b38:	4428      	add	r0, r5
    2b3a:	63a0      	str	r0, [r4, #56]	; 0x38
    2b3c:	f003 fee0 	bl	6900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    2b40:	2001      	movs	r0, #1
    2b42:	e7f1      	b.n	2b28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fc>
    2b44:	20000650 	.word	0x20000650
    2b48:	b510      	push	{r4, lr}
    2b4a:	2400      	movs	r4, #0
    2b4c:	f006 fda4 	bl	9698 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    2b50:	4a06      	ldr	r2, [pc, #24]	; (2b6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x340>)
    2b52:	2100      	movs	r1, #0
    2b54:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    2b58:	4404      	add	r4, r0
    2b5a:	689b      	ldr	r3, [r3, #8]
    2b5c:	1c49      	adds	r1, r1, #1
    2b5e:	441c      	add	r4, r3
    2b60:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    2b64:	d0f6      	beq.n	2b54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x328>
    2b66:	4620      	mov	r0, r4
    2b68:	bd10      	pop	{r4, pc}
    2b6a:	0000      	.short	0x0000
    2b6c:	20000650 	.word	0x20000650
    2b70:	4901      	ldr	r1, [pc, #4]	; (2b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34c>)
    2b72:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    2b76:	4770      	bx	lr
    2b78:	20000650 	.word	0x20000650
    2b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b80:	4606      	mov	r6, r0
    2b82:	481d      	ldr	r0, [pc, #116]	; (2bf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    2b84:	4688      	mov	r8, r1
    2b86:	4615      	mov	r5, r2
    2b88:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    2b8c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2b90:	2701      	movs	r7, #1
    2b92:	4050      	eors	r0, r2
    2b94:	b086      	sub	sp, #24
    2b96:	ea70 0101 	orns	r1, r0, r1
    2b9a:	d021      	beq.n	2be0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    2b9c:	2400      	movs	r4, #0
    2b9e:	f88d 4000 	strb.w	r4, [sp]
    2ba2:	9501      	str	r5, [sp, #4]
    2ba4:	f006 fd61 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2ba8:	f8ad 0008 	strh.w	r0, [sp, #8]
    2bac:	f88d 700b 	strb.w	r7, [sp, #11]
    2bb0:	f006 fd90 	bl	96d4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    2bb4:	1982      	adds	r2, r0, r6
    2bb6:	eb44 0008 	adc.w	r0, r4, r8
    2bba:	e9cd 2004 	strd	r2, r0, [sp, #16]
    2bbe:	2002      	movs	r0, #2
    2bc0:	f88d 000a 	strb.w	r0, [sp, #10]
    2bc4:	4668      	mov	r0, sp
    2bc6:	f003 f95f 	bl	5e88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    2bca:	b168      	cbz	r0, 2be8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3bc>
    2bcc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    2bd0:	194a      	adds	r2, r1, r5
    2bd2:	4909      	ldr	r1, [pc, #36]	; (2bf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    2bd4:	4160      	adcs	r0, r4
    2bd6:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    2bda:	1a9a      	subs	r2, r3, r2
    2bdc:	4181      	sbcs	r1, r0
    2bde:	d408      	bmi.n	2bf2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c6>
    2be0:	2001      	movs	r0, #1
    2be2:	b006      	add	sp, #24
    2be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2be8:	f240 5135 	movw	r1, #1333	; 0x535
    2bec:	2021      	movs	r0, #33	; 0x21
    2bee:	f7fd fbd1 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bf2:	2000      	movs	r0, #0
    2bf4:	e7f5      	b.n	2be2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b6>
    2bf6:	0000      	.short	0x0000
    2bf8:	20000650 	.word	0x20000650
    2bfc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c00:	b087      	sub	sp, #28
    2c02:	4614      	mov	r4, r2
    2c04:	4606      	mov	r6, r0
    2c06:	f007 f909 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2c0a:	4d99      	ldr	r5, [pc, #612]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c0c:	4680      	mov	r8, r0
    2c0e:	4689      	mov	r9, r1
    2c10:	68a8      	ldr	r0, [r5, #8]
    2c12:	f04f 0a00 	mov.w	sl, #0
    2c16:	9002      	str	r0, [sp, #8]
    2c18:	f7ff ff96 	bl	2b48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    2c1c:	6869      	ldr	r1, [r5, #4]
    2c1e:	4288      	cmp	r0, r1
    2c20:	d101      	bne.n	2c26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fa>
    2c22:	2001      	movs	r0, #1
    2c24:	e000      	b.n	2c28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fc>
    2c26:	2000      	movs	r0, #0
    2c28:	9004      	str	r0, [sp, #16]
    2c2a:	4020      	ands	r0, r4
    2c2c:	9003      	str	r0, [sp, #12]
    2c2e:	9808      	ldr	r0, [sp, #32]
    2c30:	2800      	cmp	r0, #0
    2c32:	d07f      	beq.n	2d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    2c34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    2c38:	eb18 0b02 	adds.w	fp, r8, r2
    2c3c:	f149 0400 	adc.w	r4, r9, #0
    2c40:	f000 fa8a 	bl	3158 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    2c44:	9000      	str	r0, [sp, #0]
    2c46:	488a      	ldr	r0, [pc, #552]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c48:	7800      	ldrb	r0, [r0, #0]
    2c4a:	4f89      	ldr	r7, [pc, #548]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c4c:	3740      	adds	r7, #64	; 0x40
    2c4e:	2805      	cmp	r0, #5
    2c50:	d135      	bne.n	2cbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    2c52:	4887      	ldr	r0, [pc, #540]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c54:	6a00      	ldr	r0, [r0, #32]
    2c56:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2c5a:	f000 fa63 	bl	3124 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    2c5e:	9900      	ldr	r1, [sp, #0]
    2c60:	4605      	mov	r5, r0
    2c62:	4288      	cmp	r0, r1
    2c64:	d009      	beq.n	2c7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44e>
    2c66:	4882      	ldr	r0, [pc, #520]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c68:	4629      	mov	r1, r5
    2c6a:	6a00      	ldr	r0, [r0, #32]
    2c6c:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2c70:	f000 fa0c 	bl	308c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    2c74:	2000      	movs	r0, #0
    2c76:	61b8      	str	r0, [r7, #24]
    2c78:	e00c      	b.n	2c94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x468>
    2c7a:	497d      	ldr	r1, [pc, #500]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c7c:	6a08      	ldr	r0, [r1, #32]
    2c7e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2c82:	61b8      	str	r0, [r7, #24]
    2c84:	6a08      	ldr	r0, [r1, #32]
    2c86:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    2c88:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2c8c:	4282      	cmp	r2, r0
    2c8e:	d300      	bcc.n	2c92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x466>
    2c90:	4610      	mov	r0, r2
    2c92:	6488      	str	r0, [r1, #72]	; 0x48
    2c94:	4876      	ldr	r0, [pc, #472]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c96:	6a00      	ldr	r0, [r0, #32]
    2c98:	b158      	cbz	r0, 2cb2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x486>
    2c9a:	b16d      	cbz	r5, 2cb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48c>
    2c9c:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    2ca0:	f8d5 c000 	ldr.w	ip, [r5]
    2ca4:	eb1c 0303 	adds.w	r3, ip, r3
    2ca8:	eb41 010a 	adc.w	r1, r1, sl
    2cac:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    2cb0:	e005      	b.n	2cbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    2cb2:	f240 7193 	movw	r1, #1939	; 0x793
    2cb6:	e01a      	b.n	2cee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    2cb8:	2100      	movs	r1, #0
    2cba:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    2cbe:	4638      	mov	r0, r7
    2cc0:	9900      	ldr	r1, [sp, #0]
    2cc2:	f000 f9e3 	bl	308c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    2cc6:	486a      	ldr	r0, [pc, #424]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2cc8:	9a00      	ldr	r2, [sp, #0]
    2cca:	6845      	ldr	r5, [r0, #4]
    2ccc:	b192      	cbz	r2, 2cf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c8>
    2cce:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    2cd2:	6817      	ldr	r7, [r2, #0]
    2cd4:	e9cd b400 	strd	fp, r4, [sp]
    2cd8:	18f8      	adds	r0, r7, r3
    2cda:	eb41 010a 	adc.w	r1, r1, sl
    2cde:	462a      	mov	r2, r5
    2ce0:	f006 fd29 	bl	9736 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    2ce4:	4601      	mov	r1, r0
    2ce6:	42a8      	cmp	r0, r5
    2ce8:	d905      	bls.n	2cf6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4ca>
    2cea:	f240 31f9 	movw	r1, #1017	; 0x3f9
    2cee:	2021      	movs	r0, #33	; 0x21
    2cf0:	f7fd fb50 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cf4:	2100      	movs	r1, #0
    2cf6:	eb1b 0501 	adds.w	r5, fp, r1
    2cfa:	495d      	ldr	r1, [pc, #372]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2cfc:	4650      	mov	r0, sl
    2cfe:	4144      	adcs	r4, r0
    2d00:	684a      	ldr	r2, [r1, #4]
    2d02:	1aab      	subs	r3, r5, r2
    2d04:	eb64 020a 	sbc.w	r2, r4, sl
    2d08:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    2d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d0e:	3128      	adds	r1, #40	; 0x28
    2d10:	b152      	cbz	r2, 2d28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    2d12:	f242 7310 	movw	r3, #10000	; 0x2710
    2d16:	435a      	muls	r2, r3
    2d18:	18aa      	adds	r2, r5, r2
    2d1a:	eb44 000a 	adc.w	r0, r4, sl
    2d1e:	e9c1 2000 	strd	r2, r0, [r1]
    2d22:	2001      	movs	r0, #1
    2d24:	e051      	b.n	2dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59e>
    2d26:	e005      	b.n	2d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    2d28:	f04f 30ff 	mov.w	r0, #4294967295
    2d2c:	0842      	lsrs	r2, r0, #1
    2d2e:	e9c1 0200 	strd	r0, r2, [r1]
    2d32:	e7f6      	b.n	2d22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f6>
    2d34:	9803      	ldr	r0, [sp, #12]
    2d36:	b1d8      	cbz	r0, 2d70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x544>
    2d38:	2001      	movs	r0, #1
    2d3a:	f006 fcb8 	bl	96ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2d3e:	4604      	mov	r4, r0
    2d40:	2001      	movs	r0, #1
    2d42:	f000 fee5 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    2d46:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    2d4a:	4401      	add	r1, r0
    2d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2d50:	fbb1 f0f0 	udiv	r0, r1, r0
    2d54:	1822      	adds	r2, r4, r0
    2d56:	4640      	mov	r0, r8
    2d58:	4649      	mov	r1, r9
    2d5a:	32f9      	adds	r2, #249	; 0xf9
    2d5c:	f7ff ff0e 	bl	2b7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    2d60:	b908      	cbnz	r0, 2d66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x53a>
    2d62:	2000      	movs	r0, #0
    2d64:	9002      	str	r0, [sp, #8]
    2d66:	4645      	mov	r5, r8
    2d68:	464c      	mov	r4, r9
    2d6a:	f8cd a014 	str.w	sl, [sp, #20]
    2d6e:	e02d      	b.n	2dcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    2d70:	b13c      	cbz	r4, 2d82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x556>
    2d72:	aa05      	add	r2, sp, #20
    2d74:	4640      	mov	r0, r8
    2d76:	4649      	mov	r1, r9
    2d78:	f7ff fe50 	bl	2a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f0>
    2d7c:	4605      	mov	r5, r0
    2d7e:	460c      	mov	r4, r1
    2d80:	e024      	b.n	2dcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    2d82:	4640      	mov	r0, r8
    2d84:	4649      	mov	r1, r9
    2d86:	f000 f8e5 	bl	2f54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2d8a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>
    2d8e:	4602      	mov	r2, r0
    2d90:	4608      	mov	r0, r1
    2d92:	f8db 1008 	ldr.w	r1, [fp, #8]
    2d96:	9102      	str	r1, [sp, #8]
    2d98:	f8db 3004 	ldr.w	r3, [fp, #4]
    2d9c:	4657      	mov	r7, sl
    2d9e:	189d      	adds	r5, r3, r2
    2da0:	eb4a 0400 	adc.w	r4, sl, r0
    2da4:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    2da8:	f000 f8c8 	bl	2f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    2dac:	f8db 1004 	ldr.w	r1, [fp, #4]
    2db0:	4348      	muls	r0, r1
    2db2:	9000      	str	r0, [sp, #0]
    2db4:	f7ff fedc 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2db8:	9a00      	ldr	r2, [sp, #0]
    2dba:	1880      	adds	r0, r0, r2
    2dbc:	4179      	adcs	r1, r7
    2dbe:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    2dc2:	4621      	mov	r1, r4
    2dc4:	4628      	mov	r0, r5
    2dc6:	f000 f8b9 	bl	2f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    2dca:	9005      	str	r0, [sp, #20]
    2dcc:	2001      	movs	r0, #1
    2dce:	f006 fc6e 	bl	96ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2dd2:	4607      	mov	r7, r0
    2dd4:	2001      	movs	r0, #1
    2dd6:	f000 fe9b 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    2dda:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    2dde:	4401      	add	r1, r0
    2de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2de4:	fbb1 f0f0 	udiv	r0, r1, r0
    2de8:	4407      	add	r7, r0
    2dea:	4628      	mov	r0, r5
    2dec:	4621      	mov	r1, r4
    2dee:	37f9      	adds	r7, #249	; 0xf9
    2df0:	9a02      	ldr	r2, [sp, #8]
    2df2:	f000 f8c5 	bl	2f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2df6:	491e      	ldr	r1, [pc, #120]	; (2e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2df8:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    2dfc:	6892      	ldr	r2, [r2, #8]
    2dfe:	4282      	cmp	r2, r0
    2e00:	d800      	bhi.n	2e04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d8>
    2e02:	4610      	mov	r0, r2
    2e04:	6348      	str	r0, [r1, #52]	; 0x34
    2e06:	9a08      	ldr	r2, [sp, #32]
    2e08:	b10a      	cbz	r2, 2e0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e2>
    2e0a:	e9c1 5404 	strd	r5, r4, [r1, #16]
    2e0e:	e9c1 5406 	strd	r5, r4, [r1, #24]
    2e12:	468b      	mov	fp, r1
    2e14:	9904      	ldr	r1, [sp, #16]
    2e16:	b111      	cbz	r1, 2e1e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f2>
    2e18:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    2e1c:	e001      	b.n	2e22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f6>
    2e1e:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    2e22:	2001      	movs	r0, #1
    2e24:	72f0      	strb	r0, [r6, #11]
    2e26:	f006 fc20 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2e2a:	8130      	strh	r0, [r6, #8]
    2e2c:	4628      	mov	r0, r5
    2e2e:	4621      	mov	r1, r4
    2e30:	f000 f822 	bl	2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2e34:	72b0      	strb	r0, [r6, #10]
    2e36:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    2e3a:	6070      	str	r0, [r6, #4]
    2e3c:	9803      	ldr	r0, [sp, #12]
    2e3e:	b148      	cbz	r0, 2e54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    2e40:	2001      	movs	r0, #1
    2e42:	7030      	strb	r0, [r6, #0]
    2e44:	4a0b      	ldr	r2, [pc, #44]	; (2e74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x648>)
    2e46:	4640      	mov	r0, r8
    2e48:	4649      	mov	r1, r9
    2e4a:	f000 f899 	bl	2f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2e4e:	1bc0      	subs	r0, r0, r7
    2e50:	6130      	str	r0, [r6, #16]
    2e52:	e003      	b.n	2e5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x630>
    2e54:	f886 a000 	strb.w	sl, [r6]
    2e58:	e9c6 5404 	strd	r5, r4, [r6, #16]
    2e5c:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    2e60:	42b8      	cmp	r0, r7
    2e62:	d303      	bcc.n	2e6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x640>
    2e64:	2001      	movs	r0, #1
    2e66:	b00b      	add	sp, #44	; 0x2c
    2e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e6c:	2000      	movs	r0, #0
    2e6e:	e7fa      	b.n	2e66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63a>
    2e70:	20000650 	.word	0x20000650
    2e74:	0f424000 	.word	0x0f424000
    2e78:	b570      	push	{r4, r5, r6, lr}
    2e7a:	4604      	mov	r4, r0
    2e7c:	480a      	ldr	r0, [pc, #40]	; (2ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>)
    2e7e:	460d      	mov	r5, r1
    2e80:	7801      	ldrb	r1, [r0, #0]
    2e82:	2904      	cmp	r1, #4
    2e84:	d10d      	bne.n	2ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    2e86:	6840      	ldr	r0, [r0, #4]
    2e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e8c:	0046      	lsls	r6, r0, #1
    2e8e:	f7ff fe6f 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2e92:	4622      	mov	r2, r4
    2e94:	462b      	mov	r3, r5
    2e96:	f006 fc26 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2e9a:	42b0      	cmp	r0, r6
    2e9c:	d201      	bcs.n	2ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    2e9e:	2002      	movs	r0, #2
    2ea0:	bd70      	pop	{r4, r5, r6, pc}
    2ea2:	2001      	movs	r0, #1
    2ea4:	bd70      	pop	{r4, r5, r6, pc}
    2ea6:	0000      	.short	0x0000
    2ea8:	20000650 	.word	0x20000650
    2eac:	b570      	push	{r4, r5, r6, lr}
    2eae:	4d14      	ldr	r5, [pc, #80]	; (2f00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d4>)
    2eb0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    2eb4:	f105 0440 	add.w	r4, r5, #64	; 0x40
    2eb8:	2800      	cmp	r0, #0
    2eba:	7828      	ldrb	r0, [r5, #0]
    2ebc:	d00f      	beq.n	2ede <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6b2>
    2ebe:	2805      	cmp	r0, #5
    2ec0:	d004      	beq.n	2ecc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    2ec2:	f240 2157 	movw	r1, #599	; 0x257
    2ec6:	2021      	movs	r0, #33	; 0x21
    2ec8:	f7fd fa64 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ecc:	4620      	mov	r0, r4
    2ece:	f006 fbe9 	bl	96a4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    2ed2:	b178      	cbz	r0, 2ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2ed4:	4620      	mov	r0, r4
    2ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2eda:	f000 b8b5 	b.w	3048 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    2ede:	2805      	cmp	r0, #5
    2ee0:	d108      	bne.n	2ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2ee2:	4620      	mov	r0, r4
    2ee4:	f006 fbde 	bl	96a4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    2ee8:	b920      	cbnz	r0, 2ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2eea:	6a28      	ldr	r0, [r5, #32]
    2eec:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2ef0:	f000 f8fa 	bl	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    2ef4:	4620      	mov	r0, r4
    2ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2efa:	f000 b8f5 	b.w	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    2efe:	0000      	.short	0x0000
    2f00:	20000650 	.word	0x20000650
    2f04:	b510      	push	{r4, lr}
    2f06:	f7fe fb6d 	bl	15e4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    2f0a:	490b      	ldr	r1, [pc, #44]	; (2f38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    2f0c:	2000      	movs	r0, #0
    2f0e:	7088      	strb	r0, [r1, #2]
    2f10:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    2f14:	6208      	str	r0, [r1, #32]
    2f16:	7008      	strb	r0, [r1, #0]
    2f18:	f7fe fb0a 	bl	1530 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2f1c:	4604      	mov	r4, r0
    2f1e:	7800      	ldrb	r0, [r0, #0]
    2f20:	f003 fab4 	bl	648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    2f24:	b110      	cbz	r0, 2f2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>
    2f26:	2020      	movs	r0, #32
    2f28:	7020      	strb	r0, [r4, #0]
    2f2a:	bd10      	pop	{r4, pc}
    2f2c:	f240 3192 	movw	r1, #914	; 0x392
    2f30:	2021      	movs	r0, #33	; 0x21
    2f32:	f7fd fa2f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f36:	0000      	.short	0x0000
    2f38:	20000650 	.word	0x20000650
    2f3c:	b510      	push	{r4, lr}
    2f3e:	4604      	mov	r4, r0
    2f40:	f7ff fe16 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f44:	4902      	ldr	r1, [pc, #8]	; (2f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x724>)
    2f46:	1a20      	subs	r0, r4, r0
    2f48:	6849      	ldr	r1, [r1, #4]
    2f4a:	fbb0 f0f1 	udiv	r0, r0, r1
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	20000650 	.word	0x20000650
    2f54:	b570      	push	{r4, r5, r6, lr}
    2f56:	4604      	mov	r4, r0
    2f58:	460d      	mov	r5, r1
    2f5a:	f7ff fe09 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f5e:	4622      	mov	r2, r4
    2f60:	462b      	mov	r3, r5
    2f62:	f006 fbc0 	bl	96e6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2f66:	4905      	ldr	r1, [pc, #20]	; (2f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x750>)
    2f68:	684c      	ldr	r4, [r1, #4]
    2f6a:	fbb0 f0f4 	udiv	r0, r0, r4
    2f6e:	4344      	muls	r4, r0
    2f70:	f7ff fdfe 	bl	2b70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f74:	1900      	adds	r0, r0, r4
    2f76:	f141 0100 	adc.w	r1, r1, #0
    2f7a:	bd70      	pop	{r4, r5, r6, pc}
    2f7c:	20000650 	.word	0x20000650
    2f80:	4b0a      	ldr	r3, [pc, #40]	; (2fac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x780>)
    2f82:	b510      	push	{r4, lr}
    2f84:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    2f88:	1a20      	subs	r0, r4, r0
    2f8a:	eb63 0301 	sbc.w	r3, r3, r1
    2f8e:	2400      	movs	r4, #0
    2f90:	4621      	mov	r1, r4
    2f92:	1a24      	subs	r4, r4, r0
    2f94:	4199      	sbcs	r1, r3
    2f96:	da06      	bge.n	2fa6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    2f98:	2100      	movs	r1, #0
    2f9a:	1a14      	subs	r4, r2, r0
    2f9c:	eb71 0403 	sbcs.w	r4, r1, r3
    2fa0:	da00      	bge.n	2fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x778>
    2fa2:	4610      	mov	r0, r2
    2fa4:	bd10      	pop	{r4, pc}
    2fa6:	2000      	movs	r0, #0
    2fa8:	bd10      	pop	{r4, pc}
    2faa:	0000      	.short	0x0000
    2fac:	20000650 	.word	0x20000650

00002fb0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    2fb0:	4902      	ldr	r1, [pc, #8]	; (2fbc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0xc>)
    2fb2:	2000      	movs	r0, #0
    2fb4:	6008      	str	r0, [r1, #0]
    2fb6:	6048      	str	r0, [r1, #4]
    2fb8:	f000 b808 	b.w	2fcc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    2fbc:	200000ac 	.word	0x200000ac

00002fc0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    2fc0:	4901      	ldr	r1, [pc, #4]	; (2fc8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    2fc2:	7048      	strb	r0, [r1, #1]
    2fc4:	4770      	bx	lr
    2fc6:	0000      	.short	0x0000
    2fc8:	200000ac 	.word	0x200000ac
    2fcc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2fd0:	4e1c      	ldr	r6, [pc, #112]	; (3044 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x84>)
    2fd2:	2001      	movs	r0, #1
    2fd4:	7030      	strb	r0, [r6, #0]
    2fd6:	2400      	movs	r4, #0
    2fd8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2fdc:	e016      	b.n	300c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x4c>
    2fde:	2100      	movs	r1, #0
    2fe0:	f7fd fc82 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2fe4:	0005      	movs	r5, r0
    2fe6:	d014      	beq.n	3012 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x52>
    2fe8:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    2fec:	f003 fa70 	bl	64d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    2ff0:	f885 4248 	strb.w	r4, [r5, #584]	; 0x248
    2ff4:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    2ff8:	f003 fa48 	bl	648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    2ffc:	b160      	cbz	r0, 3018 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x58>
    2ffe:	2020      	movs	r0, #32
    3000:	f885 0249 	strb.w	r0, [r5, #585]	; 0x249
    3004:	f505 700a 	add.w	r0, r5, #552	; 0x228
    3008:	f000 f86e 	bl	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    300c:	9400      	str	r4, [sp, #0]
    300e:	9401      	str	r4, [sp, #4]
    3010:	e010      	b.n	3034 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3012:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    3016:	e001      	b.n	301c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x5c>
    3018:	f240 11bf 	movw	r1, #447	; 0x1bf
    301c:	2035      	movs	r0, #53	; 0x35
    301e:	f7fd f9b9 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3022:	9800      	ldr	r0, [sp, #0]
    3024:	b130      	cbz	r0, 3034 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3026:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    302a:	b119      	cbz	r1, 3034 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    302c:	8800      	ldrh	r0, [r0, #0]
    302e:	42b8      	cmp	r0, r7
    3030:	d1d5      	bne.n	2fde <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x1e>
    3032:	e004      	b.n	303e <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x7e>
    3034:	4668      	mov	r0, sp
    3036:	f7fd fc9d 	bl	974 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    303a:	2800      	cmp	r0, #0
    303c:	d0f1      	beq.n	3022 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x62>
    303e:	7034      	strb	r4, [r6, #0]
    3040:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3044:	200000ac 	.word	0x200000ac

00003048 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    3048:	b510      	push	{r4, lr}
    304a:	6981      	ldr	r1, [r0, #24]
    304c:	b119      	cbz	r1, 3056 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    304e:	6882      	ldr	r2, [r0, #8]
    3050:	688b      	ldr	r3, [r1, #8]
    3052:	429a      	cmp	r2, r3
    3054:	d203      	bcs.n	305e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    3056:	21c6      	movs	r1, #198	; 0xc6
    3058:	2037      	movs	r0, #55	; 0x37
    305a:	f7fd f99b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    305e:	6942      	ldr	r2, [r0, #20]
    3060:	614a      	str	r2, [r1, #20]
    3062:	6903      	ldr	r3, [r0, #16]
    3064:	610b      	str	r3, [r1, #16]
    3066:	b10a      	cbz	r2, 306c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    3068:	6111      	str	r1, [r2, #16]
    306a:	e001      	b.n	3070 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    306c:	4a06      	ldr	r2, [pc, #24]	; (3088 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    306e:	6011      	str	r1, [r2, #0]
    3070:	690a      	ldr	r2, [r1, #16]
    3072:	b132      	cbz	r2, 3082 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    3074:	6151      	str	r1, [r2, #20]
    3076:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    307a:	4410      	add	r0, r2
    307c:	688a      	ldr	r2, [r1, #8]
    307e:	1a80      	subs	r0, r0, r2
    3080:	e000      	b.n	3084 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    3082:	2000      	movs	r0, #0
    3084:	60c8      	str	r0, [r1, #12]
    3086:	bd10      	pop	{r4, pc}
    3088:	200000b4 	.word	0x200000b4

0000308c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    308c:	b510      	push	{r4, lr}
    308e:	2200      	movs	r2, #0
    3090:	6141      	str	r1, [r0, #20]
    3092:	b189      	cbz	r1, 30b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    3094:	690b      	ldr	r3, [r1, #16]
    3096:	6108      	str	r0, [r1, #16]
    3098:	6103      	str	r3, [r0, #16]
    309a:	b103      	cbz	r3, 309e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    309c:	6158      	str	r0, [r3, #20]
    309e:	6941      	ldr	r1, [r0, #20]
    30a0:	60c2      	str	r2, [r0, #12]
    30a2:	2900      	cmp	r1, #0
    30a4:	d00f      	beq.n	30c6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    30a6:	68cb      	ldr	r3, [r1, #12]
    30a8:	b163      	cbz	r3, 30c4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    30aa:	6884      	ldr	r4, [r0, #8]
    30ac:	42a3      	cmp	r3, r4
    30ae:	d207      	bcs.n	30c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    30b0:	212b      	movs	r1, #43	; 0x2b
    30b2:	2037      	movs	r0, #55	; 0x37
    30b4:	f7fd f96e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30b8:	4903      	ldr	r1, [pc, #12]	; (30c8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    30ba:	6102      	str	r2, [r0, #16]
    30bc:	6008      	str	r0, [r1, #0]
    30be:	e7ee      	b.n	309e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    30c0:	1b1b      	subs	r3, r3, r4
    30c2:	60c3      	str	r3, [r0, #12]
    30c4:	60ca      	str	r2, [r1, #12]
    30c6:	bd10      	pop	{r4, pc}
    30c8:	200000b4 	.word	0x200000b4

000030cc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>:
    30cc:	6941      	ldr	r1, [r0, #20]
    30ce:	b929      	cbnz	r1, 30dc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    30d0:	6901      	ldr	r1, [r0, #16]
    30d2:	b919      	cbnz	r1, 30dc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    30d4:	4903      	ldr	r1, [pc, #12]	; (30e4 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x18>)
    30d6:	6809      	ldr	r1, [r1, #0]
    30d8:	4281      	cmp	r1, r0
    30da:	d101      	bne.n	30e0 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x14>
    30dc:	2001      	movs	r0, #1
    30de:	4770      	bx	lr
    30e0:	2000      	movs	r0, #0
    30e2:	4770      	bx	lr
    30e4:	200000b4 	.word	0x200000b4

000030e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    30e8:	6941      	ldr	r1, [r0, #20]
    30ea:	b149      	cbz	r1, 3100 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    30ec:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    30f0:	441a      	add	r2, r3
    30f2:	68cb      	ldr	r3, [r1, #12]
    30f4:	441a      	add	r2, r3
    30f6:	60ca      	str	r2, [r1, #12]
    30f8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    30fc:	6111      	str	r1, [r2, #16]
    30fe:	e002      	b.n	3106 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    3100:	4a07      	ldr	r2, [pc, #28]	; (3120 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x38>)
    3102:	6901      	ldr	r1, [r0, #16]
    3104:	6011      	str	r1, [r2, #0]
    3106:	6902      	ldr	r2, [r0, #16]
    3108:	2100      	movs	r1, #0
    310a:	b112      	cbz	r2, 3112 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x2a>
    310c:	6943      	ldr	r3, [r0, #20]
    310e:	6153      	str	r3, [r2, #20]
    3110:	e002      	b.n	3118 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    3112:	6942      	ldr	r2, [r0, #20]
    3114:	b102      	cbz	r2, 3118 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    3116:	60d1      	str	r1, [r2, #12]
    3118:	6101      	str	r1, [r0, #16]
    311a:	6141      	str	r1, [r0, #20]
    311c:	4770      	bx	lr
    311e:	0000      	.short	0x0000
    3120:	200000b4 	.word	0x200000b4

00003124 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    3124:	b510      	push	{r4, lr}
    3126:	4604      	mov	r4, r0
    3128:	490a      	ldr	r1, [pc, #40]	; (3154 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    312a:	2000      	movs	r0, #0
    312c:	4602      	mov	r2, r0
    312e:	6809      	ldr	r1, [r1, #0]
    3130:	1e43      	subs	r3, r0, #1
    3132:	e008      	b.n	3146 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    3134:	68ca      	ldr	r2, [r1, #12]
    3136:	42a2      	cmp	r2, r4
    3138:	d303      	bcc.n	3142 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    313a:	429a      	cmp	r2, r3
    313c:	d201      	bcs.n	3142 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    313e:	4613      	mov	r3, r2
    3140:	4608      	mov	r0, r1
    3142:	460a      	mov	r2, r1
    3144:	6909      	ldr	r1, [r1, #16]
    3146:	2900      	cmp	r1, #0
    3148:	d1f4      	bne.n	3134 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    314a:	2800      	cmp	r0, #0
    314c:	d100      	bne.n	3150 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    314e:	4610      	mov	r0, r2
    3150:	bd10      	pop	{r4, pc}
    3152:	0000      	.short	0x0000
    3154:	200000b4 	.word	0x200000b4

00003158 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    3158:	4804      	ldr	r0, [pc, #16]	; (316c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    315a:	6801      	ldr	r1, [r0, #0]
    315c:	2000      	movs	r0, #0
    315e:	e001      	b.n	3164 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    3160:	4608      	mov	r0, r1
    3162:	6909      	ldr	r1, [r1, #16]
    3164:	2900      	cmp	r1, #0
    3166:	d1fb      	bne.n	3160 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    3168:	4770      	bx	lr
    316a:	0000      	.short	0x0000
    316c:	200000b4 	.word	0x200000b4

00003170 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    3170:	4801      	ldr	r0, [pc, #4]	; (3178 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    3172:	2100      	movs	r1, #0
    3174:	6001      	str	r1, [r0, #0]
    3176:	4770      	bx	lr
    3178:	200000b4 	.word	0x200000b4

0000317c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    317c:	4903      	ldr	r1, [pc, #12]	; (318c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    317e:	2000      	movs	r0, #0
    3180:	6809      	ldr	r1, [r1, #0]
    3182:	2900      	cmp	r1, #0
    3184:	d000      	beq.n	3188 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    3186:	200c      	movs	r0, #12
    3188:	4770      	bx	lr
    318a:	0000      	.short	0x0000
    318c:	200000b4 	.word	0x200000b4

00003190 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    3190:	4903      	ldr	r1, [pc, #12]	; (31a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    3192:	884a      	ldrh	r2, [r1, #2]
    3194:	8002      	strh	r2, [r0, #0]
    3196:	7809      	ldrb	r1, [r1, #0]
    3198:	7081      	strb	r1, [r0, #2]
    319a:	2000      	movs	r0, #0
    319c:	4770      	bx	lr
    319e:	0000      	.short	0x0000
    31a0:	20000db4 	.word	0x20000db4

000031a4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    31a4:	7801      	ldrb	r1, [r0, #0]
    31a6:	b171      	cbz	r1, 31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31a8:	7841      	ldrb	r1, [r0, #1]
    31aa:	b161      	cbz	r1, 31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31ac:	8841      	ldrh	r1, [r0, #2]
    31ae:	291b      	cmp	r1, #27
    31b0:	d309      	bcc.n	31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31b2:	8881      	ldrh	r1, [r0, #4]
    31b4:	291b      	cmp	r1, #27
    31b6:	d306      	bcc.n	31c6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31b8:	4904      	ldr	r1, [pc, #16]	; (31cc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    31ba:	6802      	ldr	r2, [r0, #0]
    31bc:	600a      	str	r2, [r1, #0]
    31be:	8880      	ldrh	r0, [r0, #4]
    31c0:	8088      	strh	r0, [r1, #4]
    31c2:	2000      	movs	r0, #0
    31c4:	4770      	bx	lr
    31c6:	2012      	movs	r0, #18
    31c8:	4770      	bx	lr
    31ca:	0000      	.short	0x0000
    31cc:	20000db4 	.word	0x20000db4

000031d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    31d0:	6800      	ldr	r0, [r0, #0]
    31d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    31d6:	4288      	cmp	r0, r1
    31d8:	d303      	bcc.n	31e2 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    31da:	4903      	ldr	r1, [pc, #12]	; (31e8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    31dc:	6088      	str	r0, [r1, #8]
    31de:	2000      	movs	r0, #0
    31e0:	4770      	bx	lr
    31e2:	2012      	movs	r0, #18
    31e4:	4770      	bx	lr
    31e6:	0000      	.short	0x0000
    31e8:	20000db4 	.word	0x20000db4

000031ec <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    31ec:	b510      	push	{r4, lr}
    31ee:	b086      	sub	sp, #24
    31f0:	4604      	mov	r4, r0
    31f2:	f006 fc6d 	bl	9ad0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xbc>
    31f6:	2800      	cmp	r0, #0
    31f8:	d103      	bne.n	3202 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    31fa:	f006 fd0d 	bl	9c18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    31fe:	b110      	cbz	r0, 3206 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    3200:	200c      	movs	r0, #12
    3202:	b006      	add	sp, #24
    3204:	bd10      	pop	{r4, pc}
    3206:	2102      	movs	r1, #2
    3208:	f104 0010 	add.w	r0, r4, #16
    320c:	f000 f882 	bl	3314 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa0>
    3210:	78a0      	ldrb	r0, [r4, #2]
    3212:	f88d 0008 	strb.w	r0, [sp, #8]
    3216:	78a0      	ldrb	r0, [r4, #2]
    3218:	f88d 0000 	strb.w	r0, [sp]
    321c:	7860      	ldrb	r0, [r4, #1]
    321e:	f88d 0003 	strb.w	r0, [sp, #3]
    3222:	7820      	ldrb	r0, [r4, #0]
    3224:	f88d 0002 	strb.w	r0, [sp, #2]
    3228:	7e20      	ldrb	r0, [r4, #24]
    322a:	f88d 0004 	strb.w	r0, [sp, #4]
    322e:	78a0      	ldrb	r0, [r4, #2]
    3230:	07c0      	lsls	r0, r0, #31
    3232:	d00b      	beq.n	324c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    3234:	78e0      	ldrb	r0, [r4, #3]
    3236:	2801      	cmp	r0, #1
    3238:	d011      	beq.n	325e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    323a:	b190      	cbz	r0, 3262 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    323c:	f05f 0000 	movs.w	r0, #0
    3240:	f88d 0001 	strb.w	r0, [sp, #1]
    3244:	68a0      	ldr	r0, [r4, #8]
    3246:	9003      	str	r0, [sp, #12]
    3248:	6920      	ldr	r0, [r4, #16]
    324a:	9004      	str	r0, [sp, #16]
    324c:	a802      	add	r0, sp, #8
    324e:	f7ff faed 	bl	282c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    3252:	2800      	cmp	r0, #0
    3254:	d1d5      	bne.n	3202 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    3256:	4668      	mov	r0, sp
    3258:	f7fe fa6e 	bl	1738 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    325c:	e7d1      	b.n	3202 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    325e:	2002      	movs	r0, #2
    3260:	e7ee      	b.n	3240 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    3262:	2001      	movs	r0, #1
    3264:	e7ec      	b.n	3240 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

00003268 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    3268:	4801      	ldr	r0, [pc, #4]	; (3270 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    326a:	f990 0000 	ldrsb.w	r0, [r0]
    326e:	4770      	bx	lr
    3270:	200000b8 	.word	0x200000b8

00003274 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    3274:	4a03      	ldr	r2, [pc, #12]	; (3284 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    3276:	e9d2 1200 	ldrd	r1, r2, [r2]
    327a:	6001      	str	r1, [r0, #0]
    327c:	6042      	str	r2, [r0, #4]
    327e:	2000      	movs	r0, #0
    3280:	4770      	bx	lr
    3282:	0000      	.short	0x0000
    3284:	00003368 	.word	0x00003368
    3288:	b510      	push	{r4, lr}
    328a:	480e      	ldr	r0, [pc, #56]	; (32c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x50>)
    328c:	2100      	movs	r1, #0
    328e:	4b0e      	ldr	r3, [pc, #56]	; (32c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x54>)
    3290:	74c1      	strb	r1, [r0, #19]
    3292:	8281      	strh	r1, [r0, #20]
    3294:	221b      	movs	r2, #27
    3296:	801a      	strh	r2, [r3, #0]
    3298:	f44f 74a4 	mov.w	r4, #328	; 0x148
    329c:	805c      	strh	r4, [r3, #2]
    329e:	809a      	strh	r2, [r3, #4]
    32a0:	80dc      	strh	r4, [r3, #6]
    32a2:	7381      	strb	r1, [r0, #14]
    32a4:	73c1      	strb	r1, [r0, #15]
    32a6:	2303      	movs	r3, #3
    32a8:	7003      	strb	r3, [r0, #0]
    32aa:	2302      	movs	r3, #2
    32ac:	7043      	strb	r3, [r0, #1]
    32ae:	8042      	strh	r2, [r0, #2]
    32b0:	8082      	strh	r2, [r0, #4]
    32b2:	f640 62a6 	movw	r2, #3750	; 0xea6
    32b6:	6082      	str	r2, [r0, #8]
    32b8:	7481      	strb	r1, [r0, #18]
    32ba:	7301      	strb	r1, [r0, #12]
    32bc:	4802      	ldr	r0, [pc, #8]	; (32c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x54>)
    32be:	1f80      	subs	r0, r0, #6
    32c0:	7001      	strb	r1, [r0, #0]
    32c2:	bd10      	pop	{r4, pc}
    32c4:	20000db4 	.word	0x20000db4
    32c8:	200000c6 	.word	0x200000c6
    32cc:	4904      	ldr	r1, [pc, #16]	; (32e0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x6c>)
    32ce:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    32d2:	4288      	cmp	r0, r1
    32d4:	d301      	bcc.n	32da <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x66>
    32d6:	2000      	movs	r0, #0
    32d8:	4770      	bx	lr
    32da:	2001      	movs	r0, #1
    32dc:	4770      	bx	lr
    32de:	0000      	.short	0x0000
    32e0:	0270f3cc 	.word	0x0270f3cc
    32e4:	4904      	ldr	r1, [pc, #16]	; (32f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x84>)
    32e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    32ea:	4288      	cmp	r0, r1
    32ec:	d301      	bcc.n	32f2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x7e>
    32ee:	2000      	movs	r0, #0
    32f0:	4770      	bx	lr
    32f2:	2001      	movs	r0, #1
    32f4:	4770      	bx	lr
    32f6:	0000      	.short	0x0000
    32f8:	009c363d 	.word	0x009c363d
    32fc:	4904      	ldr	r1, [pc, #16]	; (3310 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x9c>)
    32fe:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    3302:	4288      	cmp	r0, r1
    3304:	d301      	bcc.n	330a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x96>
    3306:	2000      	movs	r0, #0
    3308:	4770      	bx	lr
    330a:	2001      	movs	r0, #1
    330c:	4770      	bx	lr
    330e:	0000      	.short	0x0000
    3310:	009c363d 	.word	0x009c363d
    3314:	b530      	push	{r4, r5, lr}
    3316:	2200      	movs	r2, #0
    3318:	4d07      	ldr	r5, [pc, #28]	; (3338 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc4>)
    331a:	e009      	b.n	3330 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xbc>
    331c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    3320:	462b      	mov	r3, r5
    3322:	429c      	cmp	r4, r3
    3324:	d800      	bhi.n	3328 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xb4>
    3326:	4623      	mov	r3, r4
    3328:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    332c:	1c52      	adds	r2, r2, #1
    332e:	b2d2      	uxtb	r2, r2
    3330:	428a      	cmp	r2, r1
    3332:	d3f3      	bcc.n	331c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    3334:	bd30      	pop	{r4, r5, pc}
    3336:	0000      	.short	0x0000
    3338:	00f42400 	.word	0x00f42400
    333c:	4a09      	ldr	r2, [pc, #36]	; (3364 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xf0>)
    333e:	4290      	cmp	r0, r2
    3340:	d80b      	bhi.n	335a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xe6>
    3342:	2901      	cmp	r1, #1
    3344:	d002      	beq.n	334c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd8>
    3346:	2904      	cmp	r1, #4
    3348:	d003      	beq.n	3352 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xde>
    334a:	e008      	b.n	335e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xea>
    334c:	f240 7153 	movw	r1, #1875	; 0x753
    3350:	e001      	b.n	3356 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xe2>
    3352:	f640 11c4 	movw	r1, #2500	; 0x9c4
    3356:	4288      	cmp	r0, r1
    3358:	d201      	bcs.n	335e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xea>
    335a:	2000      	movs	r0, #0
    335c:	4770      	bx	lr
    335e:	2001      	movs	r0, #1
    3360:	4770      	bx	lr
    3362:	0000      	.short	0x0000
    3364:	0270fd8f 	.word	0x0270fd8f
    3368:	0d10770d 	.word	0x0d10770d
    336c:	10770059 	.word	0x10770059
	...

00003378 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    3378:	b570      	push	{r4, r5, r6, lr}
    337a:	460d      	mov	r5, r1
    337c:	f7fd ffa0 	bl	12c0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    3380:	4c05      	ldr	r4, [pc, #20]	; (3398 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    3382:	6065      	str	r5, [r4, #4]
    3384:	68a0      	ldr	r0, [r4, #8]
    3386:	f006 fc72 	bl	9c6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    338a:	f006 fb20 	bl	99ce <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    338e:	f7fe f815 	bl	13bc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    3392:	2001      	movs	r0, #1
    3394:	7020      	strb	r0, [r4, #0]
    3396:	bd70      	pop	{r4, r5, r6, pc}
    3398:	200000d0 	.word	0x200000d0

0000339c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    339c:	4801      	ldr	r0, [pc, #4]	; (33a4 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    339e:	7800      	ldrb	r0, [r0, #0]
    33a0:	4770      	bx	lr
    33a2:	0000      	.short	0x0000
    33a4:	200000d0 	.word	0x200000d0

000033a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    33a8:	b510      	push	{r4, lr}
    33aa:	4c06      	ldr	r4, [pc, #24]	; (33c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    33ac:	68e0      	ldr	r0, [r4, #12]
    33ae:	f006 fc5e 	bl	9c6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33b2:	6920      	ldr	r0, [r4, #16]
    33b4:	f006 fc5b 	bl	9c6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33b8:	f006 fb2c 	bl	9a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    33bc:	2000      	movs	r0, #0
    33be:	7020      	strb	r0, [r4, #0]
    33c0:	bd10      	pop	{r4, pc}
    33c2:	0000      	.short	0x0000
    33c4:	200000d0 	.word	0x200000d0

000033c8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    33c8:	b510      	push	{r4, lr}
    33ca:	4905      	ldr	r1, [pc, #20]	; (33e0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    33cc:	4805      	ldr	r0, [pc, #20]	; (33e4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    33ce:	f006 fc41 	bl	9c54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    33d2:	4804      	ldr	r0, [pc, #16]	; (33e4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    33d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33d8:	4903      	ldr	r1, [pc, #12]	; (33e8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    33da:	1d00      	adds	r0, r0, #4
    33dc:	f006 bc3a 	b.w	9c54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    33e0:	200000e4 	.word	0x200000e4
    33e4:	200000d8 	.word	0x200000d8
    33e8:	200000ec 	.word	0x200000ec
    33ec:	b510      	push	{r4, lr}
    33ee:	f7ff febf 	bl	3170 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    33f2:	f7ff f9f3 	bl	27dc <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    33f6:	f7ff fddb 	bl	2fb0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    33fa:	f7ff ff35 	bl	3268 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    33fe:	4601      	mov	r1, r0
    3400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3404:	4801      	ldr	r0, [pc, #4]	; (340c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x44>)
    3406:	f7fe b907 	b.w	1618 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    340a:	0000      	.short	0x0000
    340c:	2000106f 	.word	0x2000106f

00003410 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    3410:	4806      	ldr	r0, [pc, #24]	; (342c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    3412:	8801      	ldrh	r1, [r0, #0]
    3414:	7900      	ldrb	r0, [r0, #4]
    3416:	0602      	lsls	r2, r0, #24
    3418:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    341c:	f000 0001 	and.w	r0, r0, #1
    3420:	1800      	adds	r0, r0, r0
    3422:	b2c0      	uxtb	r0, r0
    3424:	f040 0001 	orr.w	r0, r0, #1
    3428:	4770      	bx	lr
    342a:	0000      	.short	0x0000
    342c:	20000020 	.word	0x20000020

00003430 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    3430:	b510      	push	{r4, lr}
    3432:	f004 fb75 	bl	7b20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3436:	2200      	movs	r2, #0
    3438:	4b08      	ldr	r3, [pc, #32]	; (345c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    343a:	4611      	mov	r1, r2
    343c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3440:	4284      	cmp	r4, r0
    3442:	d303      	bcc.n	344c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    3444:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3448:	7882      	ldrb	r2, [r0, #2]
    344a:	e003      	b.n	3454 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    344c:	1c49      	adds	r1, r1, #1
    344e:	b2c9      	uxtb	r1, r1
    3450:	290c      	cmp	r1, #12
    3452:	d3f3      	bcc.n	343c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    3454:	4802      	ldr	r0, [pc, #8]	; (3460 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    3456:	7002      	strb	r2, [r0, #0]
    3458:	bd10      	pop	{r4, pc}
    345a:	0000      	.short	0x0000
    345c:	00009cbc 	.word	0x00009cbc
    3460:	20000187 	.word	0x20000187

00003464 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    3464:	4802      	ldr	r0, [pc, #8]	; (3470 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    3466:	7800      	ldrb	r0, [r0, #0]
    3468:	f000 0007 	and.w	r0, r0, #7
    346c:	4770      	bx	lr
    346e:	0000      	.short	0x0000
    3470:	20000187 	.word	0x20000187

00003474 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	4605      	mov	r5, r0
    3478:	4616      	mov	r6, r2
    347a:	460c      	mov	r4, r1
    347c:	2002      	movs	r0, #2
    347e:	f000 f8bd 	bl	35fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3482:	4906      	ldr	r1, [pc, #24]	; (349c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    3484:	2001      	movs	r0, #1
    3486:	1ef6      	subs	r6, r6, #3
    3488:	7008      	strb	r0, [r1, #0]
    348a:	4805      	ldr	r0, [pc, #20]	; (34a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    348c:	6006      	str	r6, [r0, #0]
    348e:	4804      	ldr	r0, [pc, #16]	; (34a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    3490:	3808      	subs	r0, #8
    3492:	6005      	str	r5, [r0, #0]
    3494:	1f00      	subs	r0, r0, #4
    3496:	6004      	str	r4, [r0, #0]
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	0000      	.short	0x0000
    349c:	20000188 	.word	0x20000188
    34a0:	4000f510 	.word	0x4000f510

000034a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    34a4:	b510      	push	{r4, lr}
    34a6:	4c0c      	ldr	r4, [pc, #48]	; (34d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    34a8:	7820      	ldrb	r0, [r4, #0]
    34aa:	b180      	cbz	r0, 34ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    34ac:	490b      	ldr	r1, [pc, #44]	; (34dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    34ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    34b2:	6008      	str	r0, [r1, #0]
    34b4:	f000 f86a 	bl	358c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    34b8:	2100      	movs	r1, #0
    34ba:	b120      	cbz	r0, 34c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    34bc:	2001      	movs	r0, #1
    34be:	7060      	strb	r0, [r4, #1]
    34c0:	4807      	ldr	r0, [pc, #28]	; (34e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    34c2:	6800      	ldr	r0, [r0, #0]
    34c4:	e001      	b.n	34ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    34c6:	7061      	strb	r1, [r4, #1]
    34c8:	2010      	movs	r0, #16
    34ca:	70a0      	strb	r0, [r4, #2]
    34cc:	7021      	strb	r1, [r4, #0]
    34ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34d2:	2000      	movs	r0, #0
    34d4:	f000 b892 	b.w	35fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    34d8:	20000188 	.word	0x20000188
    34dc:	4001f508 	.word	0x4001f508
    34e0:	4000f400 	.word	0x4000f400

000034e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    34e4:	b510      	push	{r4, lr}
    34e6:	2002      	movs	r0, #2
    34e8:	f000 f888 	bl	35fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    34ec:	4904      	ldr	r1, [pc, #16]	; (3500 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    34ee:	2001      	movs	r0, #1
    34f0:	7008      	strb	r0, [r1, #0]
    34f2:	f000 f859 	bl	35a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    34f6:	4903      	ldr	r1, [pc, #12]	; (3504 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    34f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    34fc:	6008      	str	r0, [r1, #0]
    34fe:	bd10      	pop	{r4, pc}
    3500:	20000188 	.word	0x20000188
    3504:	4001f504 	.word	0x4001f504

00003508 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    3508:	4803      	ldr	r0, [pc, #12]	; (3518 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    350a:	2100      	movs	r1, #0
    350c:	7001      	strb	r1, [r0, #0]
    350e:	7041      	strb	r1, [r0, #1]
    3510:	2110      	movs	r1, #16
    3512:	7081      	strb	r1, [r0, #2]
    3514:	4770      	bx	lr
    3516:	0000      	.short	0x0000
    3518:	20000188 	.word	0x20000188

0000351c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    351c:	4807      	ldr	r0, [pc, #28]	; (353c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    351e:	b510      	push	{r4, lr}
    3520:	7801      	ldrb	r1, [r0, #0]
    3522:	b141      	cbz	r1, 3536 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    3524:	f000 f832 	bl	358c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    3528:	b118      	cbz	r0, 3532 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    352a:	4805      	ldr	r0, [pc, #20]	; (3540 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    352c:	6800      	ldr	r0, [r0, #0]
    352e:	b2c0      	uxtb	r0, r0
    3530:	bd10      	pop	{r4, pc}
    3532:	2010      	movs	r0, #16
    3534:	bd10      	pop	{r4, pc}
    3536:	7880      	ldrb	r0, [r0, #2]
    3538:	bd10      	pop	{r4, pc}
    353a:	0000      	.short	0x0000
    353c:	20000188 	.word	0x20000188
    3540:	4000f400 	.word	0x4000f400

00003544 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    3544:	4808      	ldr	r0, [pc, #32]	; (3568 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    3546:	b510      	push	{r4, lr}
    3548:	7801      	ldrb	r1, [r0, #0]
    354a:	b159      	cbz	r1, 3564 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    354c:	4807      	ldr	r0, [pc, #28]	; (356c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    354e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3552:	b128      	cbz	r0, 3560 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    3554:	f000 f80c 	bl	3570 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    3558:	2800      	cmp	r0, #0
    355a:	d000      	beq.n	355e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    355c:	2001      	movs	r0, #1
    355e:	bd10      	pop	{r4, pc}
    3560:	2002      	movs	r0, #2
    3562:	bd10      	pop	{r4, pc}
    3564:	7840      	ldrb	r0, [r0, #1]
    3566:	bd10      	pop	{r4, pc}
    3568:	20000188 	.word	0x20000188
    356c:	4000f000 	.word	0x4000f000
    3570:	4805      	ldr	r0, [pc, #20]	; (3588 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    3572:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    3576:	b111      	cbz	r1, 357e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    3578:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    357c:	b108      	cbz	r0, 3582 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    357e:	2000      	movs	r0, #0
    3580:	4770      	bx	lr
    3582:	2001      	movs	r0, #1
    3584:	4770      	bx	lr
    3586:	0000      	.short	0x0000
    3588:	4000f000 	.word	0x4000f000
    358c:	4805      	ldr	r0, [pc, #20]	; (35a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    358e:	b510      	push	{r4, lr}
    3590:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3594:	b120      	cbz	r0, 35a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    3596:	f7ff ffeb 	bl	3570 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    359a:	b108      	cbz	r0, 35a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    359c:	2001      	movs	r0, #1
    359e:	bd10      	pop	{r4, pc}
    35a0:	2000      	movs	r0, #0
    35a2:	bd10      	pop	{r4, pc}
    35a4:	4000f000 	.word	0x4000f000
    35a8:	4804      	ldr	r0, [pc, #16]	; (35bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    35aa:	2100      	movs	r1, #0
    35ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    35b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    35b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    35b8:	4770      	bx	lr
    35ba:	0000      	.short	0x0000
    35bc:	4000f000 	.word	0x4000f000

000035c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    35c0:	b570      	push	{r4, r5, r6, lr}
    35c2:	4d05      	ldr	r5, [pc, #20]	; (35d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    35c4:	2400      	movs	r4, #0
    35c6:	7828      	ldrb	r0, [r5, #0]
    35c8:	b110      	cbz	r0, 35d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    35ca:	f000 f80f 	bl	35ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    35ce:	702c      	strb	r4, [r5, #0]
    35d0:	706c      	strb	r4, [r5, #1]
    35d2:	70ac      	strb	r4, [r5, #2]
    35d4:	bd70      	pop	{r4, r5, r6, pc}
    35d6:	0000      	.short	0x0000
    35d8:	2000018b 	.word	0x2000018b

000035dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    35dc:	4802      	ldr	r0, [pc, #8]	; (35e8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    35de:	2100      	movs	r1, #0
    35e0:	7001      	strb	r1, [r0, #0]
    35e2:	7041      	strb	r1, [r0, #1]
    35e4:	7081      	strb	r1, [r0, #2]
    35e6:	4770      	bx	lr
    35e8:	2000018b 	.word	0x2000018b
    35ec:	4902      	ldr	r1, [pc, #8]	; (35f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    35ee:	4801      	ldr	r0, [pc, #4]	; (35f4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    35f0:	6008      	str	r0, [r1, #0]
    35f2:	4770      	bx	lr
    35f4:	02020000 	.word	0x02020000
    35f8:	4001f508 	.word	0x4001f508

000035fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    35fc:	b510      	push	{r4, lr}
    35fe:	4604      	mov	r4, r0
    3600:	f000 f820 	bl	3644 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    3604:	2c00      	cmp	r4, #0
    3606:	d00e      	beq.n	3626 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    3608:	4a0b      	ldr	r2, [pc, #44]	; (3638 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    360a:	480b      	ldr	r0, [pc, #44]	; (3638 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    360c:	490b      	ldr	r1, [pc, #44]	; (363c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    360e:	3214      	adds	r2, #20
    3610:	2c01      	cmp	r4, #1
    3612:	d005      	beq.n	3620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    3614:	2c02      	cmp	r4, #2
    3616:	d007      	beq.n	3628 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    3618:	2182      	movs	r1, #130	; 0x82
    361a:	203d      	movs	r0, #61	; 0x3d
    361c:	f7fc feba 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3620:	2302      	movs	r3, #2
    3622:	6003      	str	r3, [r0, #0]
    3624:	6011      	str	r1, [r2, #0]
    3626:	bd10      	pop	{r4, pc}
    3628:	2303      	movs	r3, #3
    362a:	6003      	str	r3, [r0, #0]
    362c:	6011      	str	r1, [r2, #0]
    362e:	4904      	ldr	r1, [pc, #16]	; (3640 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    3630:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3634:	6008      	str	r0, [r1, #0]
    3636:	bd10      	pop	{r4, pc}
    3638:	4000f500 	.word	0x4000f500
    363c:	20001273 	.word	0x20001273
    3640:	4001f504 	.word	0x4001f504
    3644:	4805      	ldr	r0, [pc, #20]	; (365c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    3646:	b510      	push	{r4, lr}
    3648:	2100      	movs	r1, #0
    364a:	6001      	str	r1, [r0, #0]
    364c:	6001      	str	r1, [r0, #0]
    364e:	f7ff ffb7 	bl	35c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    3652:	4903      	ldr	r1, [pc, #12]	; (3660 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    3654:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3658:	6008      	str	r0, [r1, #0]
    365a:	bd10      	pop	{r4, pc}
    365c:	4000f500 	.word	0x4000f500
    3660:	4001f508 	.word	0x4001f508

00003664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    3664:	4805      	ldr	r0, [pc, #20]	; (367c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    3666:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    366a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    366e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3672:	2100      	movs	r1, #0
    3674:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    3678:	4770      	bx	lr
    367a:	0000      	.short	0x0000
    367c:	40001000 	.word	0x40001000

00003680 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    3680:	4904      	ldr	r1, [pc, #16]	; (3694 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    3682:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    3686:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    368a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    368e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3692:	4770      	bx	lr
    3694:	40001000 	.word	0x40001000

00003698 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    3698:	4902      	ldr	r1, [pc, #8]	; (36a4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    369a:	5c08      	ldrb	r0, [r1, r0]
    369c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    36a0:	4770      	bx	lr
    36a2:	0000      	.short	0x0000
    36a4:	0000428e 	.word	0x0000428e

000036a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    36a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36aa:	4c24      	ldr	r4, [pc, #144]	; (373c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    36ac:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36b0:	f010 0f10 	tst.w	r0, #16
    36b4:	d001      	beq.n	36ba <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    36b6:	2701      	movs	r7, #1
    36b8:	e000      	b.n	36bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    36ba:	2700      	movs	r7, #0
    36bc:	2010      	movs	r0, #16
    36be:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36c2:	2002      	movs	r0, #2
    36c4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    36c8:	481d      	ldr	r0, [pc, #116]	; (3740 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    36ca:	2500      	movs	r5, #0
    36cc:	491d      	ldr	r1, [pc, #116]	; (3744 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    36ce:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    36d2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    36d6:	6008      	str	r0, [r1, #0]
    36d8:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    36dc:	f44f 7688 	mov.w	r6, #272	; 0x110
    36e0:	f010 0fff 	tst.w	r0, #255	; 0xff
    36e4:	d019      	beq.n	371a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    36e6:	20ff      	movs	r0, #255	; 0xff
    36e8:	f88d 0000 	strb.w	r0, [sp]
    36ec:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    36f0:	2001      	movs	r0, #1
    36f2:	6120      	str	r0, [r4, #16]
    36f4:	e005      	b.n	3702 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    36f6:	bf00      	nop
    36f8:	f89d 0000 	ldrb.w	r0, [sp]
    36fc:	1e40      	subs	r0, r0, #1
    36fe:	f88d 0000 	strb.w	r0, [sp]
    3702:	f89d 0000 	ldrb.w	r0, [sp]
    3706:	b128      	cbz	r0, 3714 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    3708:	4631      	mov	r1, r6
    370a:	4620      	mov	r0, r4
    370c:	f006 fb35 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3710:	2800      	cmp	r0, #0
    3712:	d0f1      	beq.n	36f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    3714:	f89d 0000 	ldrb.w	r0, [sp]
    3718:	b158      	cbz	r0, 3732 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    371a:	f000 fbcd 	bl	3eb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    371e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3722:	f000 fd35 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    3726:	2f00      	cmp	r7, #0
    3728:	d002      	beq.n	3730 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    372a:	2010      	movs	r0, #16
    372c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3732:	f640 0194 	movw	r1, #2196	; 0x894
    3736:	203e      	movs	r0, #62	; 0x3e
    3738:	f7fc fe2c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    373c:	40001000 	.word	0x40001000
    3740:	20000e04 	.word	0x20000e04
    3744:	4001f508 	.word	0x4001f508

00003748 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    3748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    374c:	4d18      	ldr	r5, [pc, #96]	; (37b0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    374e:	4607      	mov	r7, r0
    3750:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    3754:	07c2      	lsls	r2, r0, #31
    3756:	d00f      	beq.n	3778 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    3758:	4c16      	ldr	r4, [pc, #88]	; (37b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    375a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    375e:	f042 0201 	orr.w	r2, r2, #1
    3762:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    3766:	f040 0002 	orr.w	r0, r0, #2
    376a:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    376e:	2601      	movs	r6, #1
    3770:	b13f      	cbz	r7, 3782 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    3772:	2f01      	cmp	r7, #1
    3774:	d00b      	beq.n	378e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    3776:	e010      	b.n	379a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3778:	f240 716f 	movw	r1, #1903	; 0x76f
    377c:	203e      	movs	r0, #62	; 0x3e
    377e:	f7fc fe09 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3782:	4608      	mov	r0, r1
    3784:	f000 fd5e 	bl	4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    3788:	726e      	strb	r6, [r5, #9]
    378a:	6026      	str	r6, [r4, #0]
    378c:	e005      	b.n	379a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    378e:	4608      	mov	r0, r1
    3790:	f000 fd3e 	bl	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    3794:	2002      	movs	r0, #2
    3796:	7268      	strb	r0, [r5, #9]
    3798:	6066      	str	r6, [r4, #4]
    379a:	4807      	ldr	r0, [pc, #28]	; (37b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    379c:	64c6      	str	r6, [r0, #76]	; 0x4c
    379e:	4806      	ldr	r0, [pc, #24]	; (37b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    37a0:	300c      	adds	r0, #12
    37a2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    37a6:	4638      	mov	r0, r7
    37a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37ac:	f000 bcc2 	b.w	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    37b0:	20000e04 	.word	0x20000e04
    37b4:	40001000 	.word	0x40001000
    37b8:	40008000 	.word	0x40008000

000037bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    37bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37c0:	4c2c      	ldr	r4, [pc, #176]	; (3874 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    37c2:	0006      	movs	r6, r0
    37c4:	4d2c      	ldr	r5, [pc, #176]	; (3878 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    37c6:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    37ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 387c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    37ce:	f040 0002 	orr.w	r0, r0, #2
    37d2:	4689      	mov	r9, r1
    37d4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    37d8:	f04f 0700 	mov.w	r7, #0
    37dc:	d002      	beq.n	37e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    37de:	2e01      	cmp	r6, #1
    37e0:	d020      	beq.n	3824 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    37e2:	e036      	b.n	3852 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    37e4:	4608      	mov	r0, r1
    37e6:	f000 fd2d 	bl	4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    37ea:	2001      	movs	r0, #1
    37ec:	7260      	strb	r0, [r4, #9]
    37ee:	79e0      	ldrb	r0, [r4, #7]
    37f0:	2801      	cmp	r0, #1
    37f2:	d105      	bne.n	3800 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    37f4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    37f8:	f040 0008 	orr.w	r0, r0, #8
    37fc:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3800:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3802:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    3806:	6260      	str	r0, [r4, #36]	; 0x24
    3808:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    380c:	f8c8 0000 	str.w	r0, [r8]
    3810:	491b      	ldr	r1, [pc, #108]	; (3880 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    3812:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    3816:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    381a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    381e:	fbb0 f7f1 	udiv	r7, r0, r1
    3822:	e016      	b.n	3852 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    3824:	4608      	mov	r0, r1
    3826:	f000 fcf3 	bl	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    382a:	2002      	movs	r0, #2
    382c:	7260      	strb	r0, [r4, #9]
    382e:	79e0      	ldrb	r0, [r4, #7]
    3830:	2801      	cmp	r0, #1
    3832:	d105      	bne.n	3840 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    3834:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    3838:	f040 0004 	orr.w	r0, r0, #4
    383c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3840:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3842:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    3846:	6260      	str	r0, [r4, #36]	; 0x24
    3848:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    384c:	f8c8 0000 	str.w	r0, [r8]
    3850:	2729      	movs	r7, #41	; 0x29
    3852:	f000 fb9d 	bl	3f90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    3856:	f006 fad8 	bl	9e0a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    385a:	b120      	cbz	r0, 3866 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    385c:	f7ff ff24 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3860:	2000      	movs	r0, #0
    3862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3866:	2100      	movs	r1, #0
    3868:	4630      	mov	r0, r6
    386a:	f000 fc63 	bl	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    386e:	4638      	mov	r0, r7
    3870:	e7f7      	b.n	3862 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    3872:	0000      	.short	0x0000
    3874:	20000e04 	.word	0x20000e04
    3878:	40001000 	.word	0x40001000
    387c:	4001f504 	.word	0x4001f504
    3880:	00004288 	.word	0x00004288

00003884 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    3884:	b510      	push	{r4, lr}
    3886:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    3888:	4901      	ldr	r1, [pc, #4]	; (3890 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    388a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    388e:	bd10      	pop	{r4, pc}
    3890:	20000df4 	.word	0x20000df4

00003894 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    3894:	b570      	push	{r4, r5, r6, lr}
    3896:	4c0f      	ldr	r4, [pc, #60]	; (38d4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    3898:	4603      	mov	r3, r0
    389a:	2002      	movs	r0, #2
    389c:	7320      	strb	r0, [r4, #12]
    389e:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    38a2:	2096      	movs	r0, #150	; 0x96
    38a4:	f894 1020 	ldrb.w	r1, [r4, #32]
    38a8:	7d22      	ldrb	r2, [r4, #20]
    38aa:	2d01      	cmp	r5, #1
    38ac:	d00e      	beq.n	38cc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    38ae:	f000 fd27 	bl	4300 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    38b2:	6120      	str	r0, [r4, #16]
    38b4:	4808      	ldr	r0, [pc, #32]	; (38d8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    38b6:	2100      	movs	r1, #0
    38b8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    38bc:	6921      	ldr	r1, [r4, #16]
    38be:	69e0      	ldr	r0, [r4, #28]
    38c0:	4408      	add	r0, r1
    38c2:	4905      	ldr	r1, [pc, #20]	; (38d8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    38c4:	1d09      	adds	r1, r1, #4
    38c6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    38ca:	bd70      	pop	{r4, r5, r6, pc}
    38cc:	f000 fd36 	bl	433c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    38d0:	e7ef      	b.n	38b2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    38d2:	0000      	.short	0x0000
    38d4:	20000e04 	.word	0x20000e04
    38d8:	40008000 	.word	0x40008000

000038dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    38dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38e0:	2234      	movs	r2, #52	; 0x34
    38e2:	2100      	movs	r1, #0
    38e4:	4813      	ldr	r0, [pc, #76]	; (3934 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    38e6:	f006 fca5 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    38ea:	f000 fc51 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    38ee:	f006 fb62 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    38f2:	4d11      	ldr	r5, [pc, #68]	; (3938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    38f4:	4e10      	ldr	r6, [pc, #64]	; (3938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    38f6:	2400      	movs	r4, #0
    38f8:	4f0f      	ldr	r7, [pc, #60]	; (3938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    38fa:	3508      	adds	r5, #8
    38fc:	3610      	adds	r6, #16
    38fe:	b928      	cbnz	r0, 390c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3900:	f006 fb70 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3904:	b910      	cbnz	r0, 390c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3906:	f006 fb77 	bl	9ff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    390a:	b108      	cbz	r0, 3910 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    390c:	2224      	movs	r2, #36	; 0x24
    390e:	e006      	b.n	391e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    3910:	f006 fbb2 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3914:	b910      	cbnz	r0, 391c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    3916:	f006 fba5 	bl	a064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    391a:	b140      	cbz	r0, 392e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    391c:	2240      	movs	r2, #64	; 0x40
    391e:	21ff      	movs	r1, #255	; 0xff
    3920:	4638      	mov	r0, r7
    3922:	f006 fc87 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3926:	602c      	str	r4, [r5, #0]
    3928:	6034      	str	r4, [r6, #0]
    392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    392e:	2238      	movs	r2, #56	; 0x38
    3930:	e7f5      	b.n	391e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    3932:	0000      	.short	0x0000
    3934:	20000e04 	.word	0x20000e04
    3938:	40000e00 	.word	0x40000e00

0000393c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    393c:	b510      	push	{r4, lr}
    393e:	f000 fbdb 	bl	40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>
    3942:	f7ff feb1 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3946:	f004 fb67 	bl	8018 <mpsl_fem_disable>
    394a:	b130      	cbz	r0, 395a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    394c:	1c40      	adds	r0, r0, #1
    394e:	d004      	beq.n	395a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    3950:	f240 5165 	movw	r1, #1381	; 0x565
    3954:	203e      	movs	r0, #62	; 0x3e
    3956:	f7fc fd1d 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    395a:	480f      	ldr	r0, [pc, #60]	; (3998 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    395c:	4a0f      	ldr	r2, [pc, #60]	; (399c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    395e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3960:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    3964:	6011      	str	r1, [r2, #0]
    3966:	2400      	movs	r4, #0
    3968:	6244      	str	r4, [r0, #36]	; 0x24
    396a:	7304      	strb	r4, [r0, #12]
    396c:	61c4      	str	r4, [r0, #28]
    396e:	6184      	str	r4, [r0, #24]
    3970:	f000 fbc2 	bl	40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>
    3974:	480a      	ldr	r0, [pc, #40]	; (39a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    3976:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    397a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    397e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3982:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    3986:	2001      	movs	r0, #1
    3988:	f006 f9e6 	bl	9d58 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3990:	2001      	movs	r0, #1
    3992:	f006 b9d4 	b.w	9d3e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3996:	0000      	.short	0x0000
    3998:	20000e04 	.word	0x20000e04
    399c:	4001f508 	.word	0x4001f508
    39a0:	40008000 	.word	0x40008000

000039a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    39a4:	b570      	push	{r4, r5, r6, lr}
    39a6:	2001      	movs	r0, #1
    39a8:	f006 f9d6 	bl	9d58 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    39ac:	4c37      	ldr	r4, [pc, #220]	; (3a8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    39ae:	2000      	movs	r0, #0
    39b0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    39b4:	2001      	movs	r0, #1
    39b6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    39ba:	f006 fb33 	bl	a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    39be:	4d34      	ldr	r5, [pc, #208]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    39c0:	b118      	cbz	r0, 39ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    39c2:	6828      	ldr	r0, [r5, #0]
    39c4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    39c8:	6028      	str	r0, [r5, #0]
    39ca:	f006 fb1f 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39ce:	b128      	cbz	r0, 39dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    39d0:	6828      	ldr	r0, [r5, #0]
    39d2:	4930      	ldr	r1, [pc, #192]	; (3a94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    39d4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    39d8:	4308      	orrs	r0, r1
    39da:	6028      	str	r0, [r5, #0]
    39dc:	f006 fb32 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    39e0:	b138      	cbz	r0, 39f2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    39e2:	482b      	ldr	r0, [pc, #172]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    39e4:	1d00      	adds	r0, r0, #4
    39e6:	6801      	ldr	r1, [r0, #0]
    39e8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    39ec:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    39f0:	6001      	str	r1, [r0, #0]
    39f2:	4927      	ldr	r1, [pc, #156]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    39f4:	4828      	ldr	r0, [pc, #160]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    39f6:	313c      	adds	r1, #60	; 0x3c
    39f8:	6008      	str	r0, [r1, #0]
    39fa:	f004 fb47 	bl	808c <mpsl_fem_device_config_254_apply_get>
    39fe:	b140      	cbz	r0, 3a12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    3a00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3a04:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    3a08:	1c41      	adds	r1, r0, #1
    3a0a:	d002      	beq.n	3a12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    3a0c:	4920      	ldr	r1, [pc, #128]	; (3a90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    3a0e:	3110      	adds	r1, #16
    3a10:	6008      	str	r0, [r1, #0]
    3a12:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3a16:	6e00      	ldr	r0, [r0, #96]	; 0x60
    3a18:	1c41      	adds	r1, r0, #1
    3a1a:	d004      	beq.n	3a26 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    3a1c:	491f      	ldr	r1, [pc, #124]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a1e:	680a      	ldr	r2, [r1, #0]
    3a20:	f360 4217 	bfi	r2, r0, #16, #8
    3a24:	600a      	str	r2, [r1, #0]
    3a26:	f240 1103 	movw	r1, #259	; 0x103
    3a2a:	f240 605b 	movw	r0, #1627	; 0x65b
    3a2e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    3a32:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3a36:	2001      	movs	r0, #1
    3a38:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    3a3c:	f000 f842 	bl	3ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3a40:	f240 2001 	movw	r0, #513	; 0x201
    3a44:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    3a48:	2002      	movs	r0, #2
    3a4a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3a4e:	4914      	ldr	r1, [pc, #80]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a50:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    3a54:	6008      	str	r0, [r1, #0]
    3a56:	4913      	ldr	r1, [pc, #76]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a58:	2000      	movs	r0, #0
    3a5a:	8608      	strh	r0, [r1, #48]	; 0x30
    3a5c:	3110      	adds	r1, #16
    3a5e:	61c8      	str	r0, [r1, #28]
    3a60:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    3a64:	2001      	movs	r0, #1
    3a66:	f006 f96a 	bl	9d3e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3a6a:	2010      	movs	r0, #16
    3a6c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3a70:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3a74:	2002      	movs	r0, #2
    3a76:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    3a7a:	480b      	ldr	r0, [pc, #44]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a7c:	6800      	ldr	r0, [r0, #0]
    3a7e:	2800      	cmp	r0, #0
    3a80:	d002      	beq.n	3a88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    3a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a86:	4700      	bx	r0
    3a88:	bd70      	pop	{r4, r5, r6, pc}
    3a8a:	0000      	.short	0x0000
    3a8c:	40001000 	.word	0x40001000
    3a90:	4000173c 	.word	0x4000173c
    3a94:	80000096 	.word	0x80000096
    3a98:	8900002c 	.word	0x8900002c
    3a9c:	4000158c 	.word	0x4000158c
    3aa0:	4001f504 	.word	0x4001f504
    3aa4:	20000df4 	.word	0x20000df4
    3aa8:	200000f4 	.word	0x200000f4

00003aac <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    3aac:	4901      	ldr	r1, [pc, #4]	; (3ab4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    3aae:	7548      	strb	r0, [r1, #21]
    3ab0:	4770      	bx	lr
    3ab2:	0000      	.short	0x0000
    3ab4:	20000e04 	.word	0x20000e04

00003ab8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    3ab8:	4901      	ldr	r1, [pc, #4]	; (3ac0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    3aba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3abe:	4770      	bx	lr
    3ac0:	000042dc 	.word	0x000042dc

00003ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    3ac4:	4908      	ldr	r1, [pc, #32]	; (3ae8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    3ac6:	b510      	push	{r4, lr}
    3ac8:	7508      	strb	r0, [r1, #20]
    3aca:	4908      	ldr	r1, [pc, #32]	; (3aec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    3acc:	2801      	cmp	r0, #1
    3ace:	d006      	beq.n	3ade <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    3ad0:	2802      	cmp	r0, #2
    3ad2:	d006      	beq.n	3ae2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    3ad4:	f640 516c 	movw	r1, #3436	; 0xd6c
    3ad8:	203e      	movs	r0, #62	; 0x3e
    3ada:	f7fc fc5b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ade:	2003      	movs	r0, #3
    3ae0:	e000      	b.n	3ae4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    3ae2:	2004      	movs	r0, #4
    3ae4:	6008      	str	r0, [r1, #0]
    3ae6:	bd10      	pop	{r4, pc}
    3ae8:	20000e04 	.word	0x20000e04
    3aec:	40001510 	.word	0x40001510

00003af0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    3af0:	4905      	ldr	r1, [pc, #20]	; (3b08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    3af2:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    3af6:	4805      	ldr	r0, [pc, #20]	; (3b0c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    3af8:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    3afc:	f041 0101 	orr.w	r1, r1, #1
    3b00:	7001      	strb	r1, [r0, #0]
    3b02:	f000 ba0b 	b.w	3f1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3b06:	0000      	.short	0x0000
    3b08:	40001000 	.word	0x40001000
    3b0c:	20000e04 	.word	0x20000e04

00003b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    3b10:	4901      	ldr	r1, [pc, #4]	; (3b18 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    3b12:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3b16:	4770      	bx	lr
    3b18:	000042e8 	.word	0x000042e8

00003b1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    3b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b20:	4e30      	ldr	r6, [pc, #192]	; (3be4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3b22:	4c31      	ldr	r4, [pc, #196]	; (3be8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    3b24:	4688      	mov	r8, r1
    3b26:	0007      	movs	r7, r0
    3b28:	4615      	mov	r5, r2
    3b2a:	f04f 0901 	mov.w	r9, #1
    3b2e:	d006      	beq.n	3b3e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    3b30:	2f01      	cmp	r7, #1
    3b32:	d012      	beq.n	3b5a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    3b34:	f640 0117 	movw	r1, #2071	; 0x817
    3b38:	203e      	movs	r0, #62	; 0x3e
    3b3a:	f7fc fc2b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b3e:	4610      	mov	r0, r2
    3b40:	f000 fb80 	bl	4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    3b44:	4829      	ldr	r0, [pc, #164]	; (3bec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    3b46:	f884 9009 	strb.w	r9, [r4, #9]
    3b4a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    3b4e:	4640      	mov	r0, r8
    3b50:	f000 fb26 	bl	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    3b54:	4605      	mov	r5, r0
    3b56:	4630      	mov	r0, r6
    3b58:	e00c      	b.n	3b74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    3b5a:	4610      	mov	r0, r2
    3b5c:	f000 fb58 	bl	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    3b60:	2002      	movs	r0, #2
    3b62:	7260      	strb	r0, [r4, #9]
    3b64:	f649 71ba 	movw	r1, #40890	; 0x9fba
    3b68:	4640      	mov	r0, r8
    3b6a:	f000 fb19 	bl	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    3b6e:	4605      	mov	r5, r0
    3b70:	481c      	ldr	r0, [pc, #112]	; (3be4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3b72:	1d00      	adds	r0, r0, #4
    3b74:	f000 fad2 	bl	411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>
    3b78:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3bf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    3b7c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    3b80:	f8df a074 	ldr.w	sl, [pc, #116]	; 3bf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    3b84:	481b      	ldr	r0, [pc, #108]	; (3bf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    3b86:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    3b8a:	2010      	movs	r0, #16
    3b8c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    3b90:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b92:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    3b96:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    3b9a:	6260      	str	r0, [r4, #36]	; 0x24
    3b9c:	4817      	ldr	r0, [pc, #92]	; (3bfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3b9e:	6006      	str	r6, [r0, #0]
    3ba0:	f000 f9f6 	bl	3f90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    3ba4:	4641      	mov	r1, r8
    3ba6:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    3baa:	4811      	ldr	r0, [pc, #68]	; (3bf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    3bac:	300c      	adds	r0, #12
    3bae:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3bb2:	42a8      	cmp	r0, r5
    3bb4:	d310      	bcc.n	3bd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    3bb6:	2000      	movs	r0, #0
    3bb8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3bbc:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    3bc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3bc2:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    3bc6:	6260      	str	r0, [r4, #36]	; 0x24
    3bc8:	480c      	ldr	r0, [pc, #48]	; (3bfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3bca:	1d00      	adds	r0, r0, #4
    3bcc:	6006      	str	r6, [r0, #0]
    3bce:	f7ff fd6b 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3bd2:	2000      	movs	r0, #0
    3bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bd8:	4629      	mov	r1, r5
    3bda:	4638      	mov	r0, r7
    3bdc:	f000 faaa 	bl	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    3be0:	2001      	movs	r0, #1
    3be2:	e7f7      	b.n	3bd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    3be4:	40001000 	.word	0x40001000
    3be8:	20000e04 	.word	0x20000e04
    3bec:	00004288 	.word	0x00004288
    3bf0:	40008000 	.word	0x40008000
    3bf4:	40008140 	.word	0x40008140
    3bf8:	4001f098 	.word	0x4001f098
    3bfc:	4001f504 	.word	0x4001f504

00003c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    3c00:	4b0d      	ldr	r3, [pc, #52]	; (3c38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    3c02:	b510      	push	{r4, lr}
    3c04:	71d8      	strb	r0, [r3, #7]
    3c06:	729a      	strb	r2, [r3, #10]
    3c08:	b151      	cbz	r1, 3c20 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    3c0a:	2002      	movs	r0, #2
    3c0c:	7218      	strb	r0, [r3, #8]
    3c0e:	2801      	cmp	r0, #1
    3c10:	d008      	beq.n	3c24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    3c12:	2802      	cmp	r0, #2
    3c14:	d00f      	beq.n	3c36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3c16:	f640 2144 	movw	r1, #2628	; 0xa44
    3c1a:	203e      	movs	r0, #62	; 0x3e
    3c1c:	f7fc fbba 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c20:	2001      	movs	r0, #1
    3c22:	e7f3      	b.n	3c0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    3c24:	7a58      	ldrb	r0, [r3, #9]
    3c26:	2802      	cmp	r0, #2
    3c28:	d105      	bne.n	3c36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3c2a:	f000 f93b 	bl	3ea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    3c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c32:	f000 ba49 	b.w	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    3c36:	bd10      	pop	{r4, pc}
    3c38:	20000e04 	.word	0x20000e04

00003c3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    3c3c:	4904      	ldr	r1, [pc, #16]	; (3c50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    3c3e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    3c42:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    3c46:	4249      	negs	r1, r1
    3c48:	7001      	strb	r1, [r0, #0]
    3c4a:	2001      	movs	r0, #1
    3c4c:	4770      	bx	lr
    3c4e:	0000      	.short	0x0000
    3c50:	40001000 	.word	0x40001000

00003c54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    3c54:	4903      	ldr	r1, [pc, #12]	; (3c64 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    3c56:	0e02      	lsrs	r2, r0, #24
    3c58:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    3c5c:	0200      	lsls	r0, r0, #8
    3c5e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    3c62:	4770      	bx	lr
    3c64:	40001000 	.word	0x40001000

00003c68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    3c68:	4901      	ldr	r1, [pc, #4]	; (3c70 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    3c6a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3c6e:	4770      	bx	lr
    3c70:	40001000 	.word	0x40001000

00003c74 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    3c74:	b510      	push	{r4, lr}
    3c76:	2200      	movs	r2, #0
    3c78:	2901      	cmp	r1, #1
    3c7a:	d006      	beq.n	3c8a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    3c7c:	2902      	cmp	r1, #2
    3c7e:	d002      	beq.n	3c86 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    3c80:	f240 21d2 	movw	r1, #722	; 0x2d2
    3c84:	e014      	b.n	3cb0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    3c86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3c8a:	490b      	ldr	r1, [pc, #44]	; (3cb8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    3c8c:	430a      	orrs	r2, r1
    3c8e:	490b      	ldr	r1, [pc, #44]	; (3cbc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3c90:	600a      	str	r2, [r1, #0]
    3c92:	490b      	ldr	r1, [pc, #44]	; (3cc0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    3c94:	4308      	orrs	r0, r1
    3c96:	4909      	ldr	r1, [pc, #36]	; (3cbc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3c98:	1d09      	adds	r1, r1, #4
    3c9a:	6008      	str	r0, [r1, #0]
    3c9c:	4809      	ldr	r0, [pc, #36]	; (3cc4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    3c9e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3ca2:	b2c0      	uxtb	r0, r0
    3ca4:	2803      	cmp	r0, #3
    3ca6:	d001      	beq.n	3cac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    3ca8:	280b      	cmp	r0, #11
    3caa:	d104      	bne.n	3cb6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    3cac:	f240 21ea 	movw	r1, #746	; 0x2ea
    3cb0:	203e      	movs	r0, #62	; 0x3e
    3cb2:	f7fc fb6f 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cb6:	bd10      	pop	{r4, pc}
    3cb8:	00100108 	.word	0x00100108
    3cbc:	40001514 	.word	0x40001514
    3cc0:	02030000 	.word	0x02030000
    3cc4:	40001000 	.word	0x40001000

00003cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    3cc8:	4901      	ldr	r1, [pc, #4]	; (3cd0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    3cca:	7588      	strb	r0, [r1, #22]
    3ccc:	4770      	bx	lr
    3cce:	0000      	.short	0x0000
    3cd0:	20000e04 	.word	0x20000e04

00003cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    3cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cd8:	4851      	ldr	r0, [pc, #324]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3cda:	f04f 0a01 	mov.w	sl, #1
    3cde:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    3ce2:	484f      	ldr	r0, [pc, #316]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3ce4:	300c      	adds	r0, #12
    3ce6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    3cea:	f006 f88c 	bl	9e06 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    3cee:	4c4d      	ldr	r4, [pc, #308]	; (3e24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3cf0:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    3cf4:	f000 f8e0 	bl	3eb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    3cf8:	494b      	ldr	r1, [pc, #300]	; (3e28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    3cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3cfc:	6008      	str	r0, [r1, #0]
    3cfe:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3e2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    3d02:	2000      	movs	r0, #0
    3d04:	6260      	str	r0, [r4, #36]	; 0x24
    3d06:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    3d0a:	f240 131d 	movw	r3, #285	; 0x11d
    3d0e:	439a      	bics	r2, r3
    3d10:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    3d14:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3d18:	f000 f94e 	bl	3fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    3d1c:	4605      	mov	r5, r0
    3d1e:	4840      	ldr	r0, [pc, #256]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d20:	3008      	adds	r0, #8
    3d22:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3d26:	4e3e      	ldr	r6, [pc, #248]	; (3e20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d28:	61e0      	str	r0, [r4, #28]
    3d2a:	1d36      	adds	r6, r6, #4
    3d2c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    3d30:	61a0      	str	r0, [r4, #24]
    3d32:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3d36:	7d21      	ldrb	r1, [r4, #20]
    3d38:	f884 1020 	strb.w	r1, [r4, #32]
    3d3c:	7a61      	ldrb	r1, [r4, #9]
    3d3e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3d42:	46a1      	mov	r9, r4
    3d44:	2400      	movs	r4, #0
    3d46:	4639      	mov	r1, r7
    3d48:	4628      	mov	r0, r5
    3d4a:	f000 f983 	bl	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    3d4e:	b910      	cbnz	r0, 3d56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    3d50:	f8c8 a010 	str.w	sl, [r8, #16]
    3d54:	2401      	movs	r4, #1
    3d56:	4f33      	ldr	r7, [pc, #204]	; (3e24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3d58:	07e8      	lsls	r0, r5, #31
    3d5a:	f1a7 0710 	sub.w	r7, r7, #16
    3d5e:	d120      	bne.n	3da2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    3d60:	07a8      	lsls	r0, r5, #30
    3d62:	d527      	bpl.n	3db4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    3d64:	f006 f96e 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3d68:	b9f0      	cbnz	r0, 3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d6a:	f006 f95b 	bl	a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3d6e:	b9d8      	cbnz	r0, 3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d70:	482f      	ldr	r0, [pc, #188]	; (3e30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    3d72:	6800      	ldr	r0, [r0, #0]
    3d74:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    3d78:	f3c0 6300 	ubfx	r3, r0, #24, #1
    3d7c:	f000 020f 	and.w	r2, r0, #15
    3d80:	f3c0 1103 	ubfx	r1, r0, #4, #4
    3d84:	f3c0 2803 	ubfx	r8, r0, #8, #4
    3d88:	b173      	cbz	r3, 3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d8a:	b11a      	cbz	r2, 3d94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3d8c:	b111      	cbz	r1, 3d94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3d8e:	f1b8 0f00 	cmp.w	r8, #0
    3d92:	d109      	bne.n	3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d94:	f3c0 4004 	ubfx	r0, r0, #16, #5
    3d98:	2801      	cmp	r0, #1
    3d9a:	d105      	bne.n	3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d9c:	f1bc 0f03 	cmp.w	ip, #3
    3da0:	d202      	bcs.n	3da8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3da2:	6838      	ldr	r0, [r7, #0]
    3da4:	4780      	blx	r0
    3da6:	e00e      	b.n	3dc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3da8:	f345 0080 	sbfx	r0, r5, #2, #1
    3dac:	4621      	mov	r1, r4
    3dae:	1c40      	adds	r0, r0, #1
    3db0:	687a      	ldr	r2, [r7, #4]
    3db2:	e007      	b.n	3dc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    3db4:	f015 0f28 	tst.w	r5, #40	; 0x28
    3db8:	d005      	beq.n	3dc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3dba:	f345 1140 	sbfx	r1, r5, #5, #1
    3dbe:	68ba      	ldr	r2, [r7, #8]
    3dc0:	4620      	mov	r0, r4
    3dc2:	1c49      	adds	r1, r1, #1
    3dc4:	4790      	blx	r2
    3dc6:	06e8      	lsls	r0, r5, #27
    3dc8:	d501      	bpl.n	3dce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    3dca:	68f8      	ldr	r0, [r7, #12]
    3dcc:	4780      	blx	r0
    3dce:	f899 1009 	ldrb.w	r1, [r9, #9]
    3dd2:	4648      	mov	r0, r9
    3dd4:	2902      	cmp	r1, #2
    3dd6:	d120      	bne.n	3e1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3dd8:	7b01      	ldrb	r1, [r0, #12]
    3dda:	2900      	cmp	r1, #0
    3ddc:	d01d      	beq.n	3e1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3dde:	2902      	cmp	r1, #2
    3de0:	d004      	beq.n	3dec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    3de2:	2901      	cmp	r1, #1
    3de4:	d009      	beq.n	3dfa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    3de6:	f640 4156 	movw	r1, #3158	; 0xc56
    3dea:	e00d      	b.n	3e08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    3dec:	69c1      	ldr	r1, [r0, #28]
    3dee:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3df2:	4408      	add	r0, r1
    3df4:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    3df8:	e00b      	b.n	3e12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    3dfa:	6901      	ldr	r1, [r0, #16]
    3dfc:	f8d9 001c 	ldr.w	r0, [r9, #28]
    3e00:	4281      	cmp	r1, r0
    3e02:	d804      	bhi.n	3e0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    3e04:	f640 4157 	movw	r1, #3159	; 0xc57
    3e08:	203e      	movs	r0, #62	; 0x3e
    3e0a:	f7fc fac3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e0e:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    3e12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e16:	f000 b961 	b.w	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    3e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e1e:	0000      	.short	0x0000
    3e20:	40008000 	.word	0x40008000
    3e24:	20000e04 	.word	0x20000e04
    3e28:	4001f508 	.word	0x4001f508
    3e2c:	40001000 	.word	0x40001000
    3e30:	40001450 	.word	0x40001450
    3e34:	480b      	ldr	r0, [pc, #44]	; (3e64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    3e36:	7d81      	ldrb	r1, [r0, #22]
    3e38:	480b      	ldr	r0, [pc, #44]	; (3e68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    3e3a:	5c40      	ldrb	r0, [r0, r1]
    3e3c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3e40:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    3e44:	d204      	bcs.n	3e50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    3e46:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    3e4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3e4e:	e001      	b.n	3e54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    3e50:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    3e54:	4a05      	ldr	r2, [pc, #20]	; (3e6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    3e56:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    3e5a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    3e5e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    3e62:	4770      	bx	lr
    3e64:	20000e04 	.word	0x20000e04
    3e68:	0000428e 	.word	0x0000428e
    3e6c:	40001000 	.word	0x40001000
    3e70:	b508      	push	{r3, lr}
    3e72:	490b      	ldr	r1, [pc, #44]	; (3ea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    3e74:	466b      	mov	r3, sp
    3e76:	f991 2015 	ldrsb.w	r2, [r1, #21]
    3e7a:	7d89      	ldrb	r1, [r1, #22]
    3e7c:	f000 faaa 	bl	43d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    3e80:	f99d 0000 	ldrsb.w	r0, [sp]
    3e84:	f000 fa7a 	bl	437c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    3e88:	f10d 0001 	add.w	r0, sp, #1
    3e8c:	f004 f8e8 	bl	8060 <mpsl_fem_pa_gain_set>
    3e90:	2800      	cmp	r0, #0
    3e92:	d004      	beq.n	3e9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    3e94:	f240 51e6 	movw	r1, #1510	; 0x5e6
    3e98:	203e      	movs	r0, #62	; 0x3e
    3e9a:	f7fc fa7b 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e9e:	bd08      	pop	{r3, pc}
    3ea0:	20000e04 	.word	0x20000e04
    3ea4:	4803      	ldr	r0, [pc, #12]	; (3eb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    3ea6:	7a01      	ldrb	r1, [r0, #8]
    3ea8:	2901      	cmp	r1, #1
    3eaa:	d102      	bne.n	3eb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    3eac:	7a80      	ldrb	r0, [r0, #10]
    3eae:	f7ff bfdf 	b.w	3e70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3eb2:	4770      	bx	lr
    3eb4:	20000e04 	.word	0x20000e04
    3eb8:	480d      	ldr	r0, [pc, #52]	; (3ef0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    3eba:	b510      	push	{r4, lr}
    3ebc:	7a40      	ldrb	r0, [r0, #9]
    3ebe:	2801      	cmp	r0, #1
    3ec0:	d00c      	beq.n	3edc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    3ec2:	2802      	cmp	r0, #2
    3ec4:	d113      	bne.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ec6:	f004 f8ad 	bl	8024 <mpsl_fem_lna_configuration_clear>
    3eca:	2800      	cmp	r0, #0
    3ecc:	d00f      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ece:	1c40      	adds	r0, r0, #1
    3ed0:	d00d      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ed2:	f640 01ab 	movw	r1, #2219	; 0x8ab
    3ed6:	203e      	movs	r0, #62	; 0x3e
    3ed8:	f7fc fa5c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3edc:	f004 f8b4 	bl	8048 <mpsl_fem_pa_configuration_clear>
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d004      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ee4:	1c40      	adds	r0, r0, #1
    3ee6:	d002      	beq.n	3eee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ee8:	f640 01a5 	movw	r1, #2213	; 0x8a5
    3eec:	e7f3      	b.n	3ed6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    3eee:	bd10      	pop	{r4, pc}
    3ef0:	20000e04 	.word	0x20000e04
    3ef4:	4808      	ldr	r0, [pc, #32]	; (3f18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    3ef6:	2100      	movs	r1, #0
    3ef8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3efc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    3f00:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    3f04:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    3f08:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    3f0c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    3f10:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    3f14:	4770      	bx	lr
    3f16:	0000      	.short	0x0000
    3f18:	40001000 	.word	0x40001000
    3f1c:	4818      	ldr	r0, [pc, #96]	; (3f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    3f1e:	b510      	push	{r4, lr}
    3f20:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    3f24:	07c1      	lsls	r1, r0, #31
    3f26:	d029      	beq.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f28:	0781      	lsls	r1, r0, #30
    3f2a:	d514      	bpl.n	3f56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    3f2c:	4815      	ldr	r0, [pc, #84]	; (3f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3f2e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3f32:	f041 0101 	orr.w	r1, r1, #1
    3f36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f3a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3f3e:	b2c0      	uxtb	r0, r0
    3f40:	280b      	cmp	r0, #11
    3f42:	d005      	beq.n	3f50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f44:	280a      	cmp	r0, #10
    3f46:	d003      	beq.n	3f50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f48:	2803      	cmp	r0, #3
    3f4a:	d001      	beq.n	3f50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f4c:	2802      	cmp	r0, #2
    3f4e:	d115      	bne.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f50:	f240 610f 	movw	r1, #1551	; 0x60f
    3f54:	e00f      	b.n	3f76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    3f56:	0740      	lsls	r0, r0, #29
    3f58:	d510      	bpl.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f5a:	480a      	ldr	r0, [pc, #40]	; (3f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3f5c:	490a      	ldr	r1, [pc, #40]	; (3f88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    3f5e:	3008      	adds	r0, #8
    3f60:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    3f64:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3f68:	4808      	ldr	r0, [pc, #32]	; (3f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    3f6a:	f005 ff0b 	bl	9d84 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3f6e:	2800      	cmp	r0, #0
    3f70:	d004      	beq.n	3f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f72:	f240 6117 	movw	r1, #1559	; 0x617
    3f76:	203e      	movs	r0, #62	; 0x3e
    3f78:	f7fc fa0c 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	0000      	.short	0x0000
    3f80:	20000e04 	.word	0x20000e04
    3f84:	40001000 	.word	0x40001000
    3f88:	4001f098 	.word	0x4001f098
    3f8c:	40008000 	.word	0x40008000
    3f90:	4808      	ldr	r0, [pc, #32]	; (3fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    3f92:	4601      	mov	r1, r0
    3f94:	79c2      	ldrb	r2, [r0, #7]
    3f96:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    3f9a:	b112      	cbz	r2, 3fa2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    3f9c:	2a01      	cmp	r2, #1
    3f9e:	d003      	beq.n	3fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    3fa0:	e006      	b.n	3fb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    3fa2:	f041 0102 	orr.w	r1, r1, #2
    3fa6:	e001      	b.n	3fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    3fa8:	f041 0104 	orr.w	r1, r1, #4
    3fac:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    3fb0:	f7ff bfb4 	b.w	3f1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3fb4:	20000e04 	.word	0x20000e04
    3fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fbc:	4d22      	ldr	r5, [pc, #136]	; (4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>)
    3fbe:	2400      	movs	r4, #0
    3fc0:	7b28      	ldrb	r0, [r5, #12]
    3fc2:	b138      	cbz	r0, 3fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3fc4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3fc8:	4820      	ldr	r0, [pc, #128]	; (404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>)
    3fca:	f005 fedb 	bl	9d84 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3fce:	b108      	cbz	r0, 3fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3fd0:	2701      	movs	r7, #1
    3fd2:	e000      	b.n	3fd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    3fd4:	2700      	movs	r7, #0
    3fd6:	7a68      	ldrb	r0, [r5, #9]
    3fd8:	4e1d      	ldr	r6, [pc, #116]	; (4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>)
    3fda:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3fde:	2801      	cmp	r0, #1
    3fe0:	d002      	beq.n	3fe8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    3fe2:	2802      	cmp	r0, #2
    3fe4:	d006      	beq.n	3ff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    3fe6:	e016      	b.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3fe8:	4630      	mov	r0, r6
    3fea:	f005 fec6 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3fee:	b190      	cbz	r0, 4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3ff0:	2408      	movs	r4, #8
    3ff2:	e010      	b.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3ff4:	4630      	mov	r0, r6
    3ff6:	f005 fec0 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3ffa:	b100      	cbz	r0, 3ffe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    3ffc:	2402      	movs	r4, #2
    3ffe:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    4002:	43c0      	mvns	r0, r0
    4004:	f340 0000 	sbfx	r0, r0, #0, #1
    4008:	1c40      	adds	r0, r0, #1
    400a:	d101      	bne.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400c:	f044 0404 	orr.w	r4, r4, #4
    4010:	b10f      	cbz	r7, 4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    4012:	f044 0401 	orr.w	r4, r4, #1
    4016:	f014 0f0b 	tst.w	r4, #11
    401a:	d107      	bne.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    401c:	f44f 7188 	mov.w	r1, #272	; 0x110
    4020:	4630      	mov	r0, r6
    4022:	f005 feaa 	bl	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    4026:	b108      	cbz	r0, 402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    4028:	f044 0410 	orr.w	r4, r4, #16
    402c:	f7ff ff62 	bl	3ef4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    4030:	06e0      	lsls	r0, r4, #27
    4032:	d506      	bpl.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    4034:	0720      	lsls	r0, r4, #28
    4036:	d404      	bmi.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    4038:	7a68      	ldrb	r0, [r5, #9]
    403a:	2801      	cmp	r0, #1
    403c:	d101      	bne.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    403e:	f044 0420 	orr.w	r4, r4, #32
    4042:	4620      	mov	r0, r4
    4044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4048:	20000e04 	.word	0x20000e04
    404c:	40008000 	.word	0x40008000
    4050:	40001000 	.word	0x40001000
    4054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4058:	4c1a      	ldr	r4, [pc, #104]	; (40c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc4>)
    405a:	460d      	mov	r5, r1
    405c:	7a21      	ldrb	r1, [r4, #8]
    405e:	b129      	cbz	r1, 406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    4060:	f010 0f11 	tst.w	r0, #17
    4064:	d007      	beq.n	4076 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x76>
    4066:	f7ff fb1f 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    406a:	e024      	b.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
    406c:	f000 f890 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    4070:	2000      	movs	r0, #0
    4072:	7320      	strb	r0, [r4, #12]
    4074:	e01f      	b.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
    4076:	2901      	cmp	r1, #1
    4078:	d001      	beq.n	407e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e>
    407a:	2601      	movs	r6, #1
    407c:	e000      	b.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    407e:	2600      	movs	r6, #0
    4080:	79e0      	ldrb	r0, [r4, #7]
    4082:	2801      	cmp	r0, #1
    4084:	d00e      	beq.n	40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>
    4086:	2700      	movs	r7, #0
    4088:	f000 f882 	bl	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    408c:	2196      	movs	r1, #150	; 0x96
    408e:	4630      	mov	r0, r6
    4090:	f000 f894 	bl	41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>
    4094:	4601      	mov	r1, r0
    4096:	b14f      	cbz	r7, 40ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac>
    4098:	353b      	adds	r5, #59	; 0x3b
    409a:	428d      	cmp	r5, r1
    409c:	d904      	bls.n	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
    409e:	2000      	movs	r0, #0
    40a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40a4:	2701      	movs	r7, #1
    40a6:	e7ef      	b.n	4088 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88>
    40a8:	2001      	movs	r0, #1
    40aa:	71e0      	strb	r0, [r4, #7]
    40ac:	7aa2      	ldrb	r2, [r4, #10]
    40ae:	4630      	mov	r0, r6
    40b0:	f7ff fd34 	bl	3b1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    40b4:	b108      	cbz	r0, 40ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xba>
    40b6:	2001      	movs	r0, #1
    40b8:	e7f2      	b.n	40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>
    40ba:	f640 21a5 	movw	r1, #2725	; 0xaa5
    40be:	203e      	movs	r0, #62	; 0x3e
    40c0:	f7fc f968 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40c4:	20000e04 	.word	0x20000e04
    40c8:	4803      	ldr	r0, [pc, #12]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    40ca:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    40ce:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    40d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    40d6:	4770      	bx	lr
    40d8:	40001000 	.word	0x40001000
    40dc:	4804      	ldr	r0, [pc, #16]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    40de:	6a41      	ldr	r1, [r0, #36]	; 0x24
    40e0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    40e4:	6241      	str	r1, [r0, #36]	; 0x24
    40e6:	4903      	ldr	r1, [pc, #12]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    40e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    40ec:	6008      	str	r0, [r1, #0]
    40ee:	4770      	bx	lr
    40f0:	20000e04 	.word	0x20000e04
    40f4:	4001f504 	.word	0x4001f504
    40f8:	4a07      	ldr	r2, [pc, #28]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    40fa:	2000      	movs	r0, #0
    40fc:	3208      	adds	r2, #8
    40fe:	4906      	ldr	r1, [pc, #24]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    4100:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4104:	1d0a      	adds	r2, r1, #4
    4106:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    410a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    410e:	4902      	ldr	r1, [pc, #8]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    4110:	310c      	adds	r1, #12
    4112:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4116:	4770      	bx	lr
    4118:	40008000 	.word	0x40008000
    411c:	4903      	ldr	r1, [pc, #12]	; (412c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12c>)
    411e:	79c9      	ldrb	r1, [r1, #7]
    4120:	2900      	cmp	r1, #0
    4122:	d102      	bne.n	412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
    4124:	4902      	ldr	r1, [pc, #8]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    4126:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    412a:	4770      	bx	lr
    412c:	20000e04 	.word	0x20000e04
    4130:	4001f098 	.word	0x4001f098
    4134:	b510      	push	{r4, lr}
    4136:	4a14      	ldr	r2, [pc, #80]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    4138:	b120      	cbz	r0, 4144 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x144>
    413a:	2801      	cmp	r0, #1
    413c:	d011      	beq.n	4162 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x162>
    413e:	f240 7153 	movw	r1, #1875	; 0x753
    4142:	e01c      	b.n	417e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17e>
    4144:	f101 0028 	add.w	r0, r1, #40	; 0x28
    4148:	e9c2 1002 	strd	r1, r0, [r2, #8]
    414c:	490f      	ldr	r1, [pc, #60]	; (418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>)
    414e:	480e      	ldr	r0, [pc, #56]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    4150:	f003 ff80 	bl	8054 <mpsl_fem_pa_configuration_set>
    4154:	2800      	cmp	r0, #0
    4156:	d015      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    4158:	1c40      	adds	r0, r0, #1
    415a:	d013      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    415c:	f240 7142 	movw	r1, #1858	; 0x742
    4160:	e00d      	b.n	417e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17e>
    4162:	f101 0029 	add.w	r0, r1, #41	; 0x29
    4166:	e9c2 1002 	strd	r1, r0, [r2, #8]
    416a:	4908      	ldr	r1, [pc, #32]	; (418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>)
    416c:	4806      	ldr	r0, [pc, #24]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    416e:	f003 ff5f 	bl	8030 <mpsl_fem_lna_configuration_set>
    4172:	2800      	cmp	r0, #0
    4174:	d006      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    4176:	1c40      	adds	r0, r0, #1
    4178:	d004      	beq.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
    417a:	f240 714f 	movw	r1, #1871	; 0x74f
    417e:	203e      	movs	r0, #62	; 0x3e
    4180:	f7fc f908 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4184:	bd10      	pop	{r4, pc}
    4186:	0000      	.short	0x0000
    4188:	200000f8 	.word	0x200000f8
    418c:	000042b8 	.word	0x000042b8
    4190:	4802      	ldr	r0, [pc, #8]	; (419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>)
    4192:	2100      	movs	r1, #0
    4194:	71c1      	strb	r1, [r0, #7]
    4196:	7201      	strb	r1, [r0, #8]
    4198:	7241      	strb	r1, [r0, #9]
    419a:	4770      	bx	lr
    419c:	20000e04 	.word	0x20000e04
    41a0:	4a05      	ldr	r2, [pc, #20]	; (41b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b8>)
    41a2:	79d2      	ldrb	r2, [r2, #7]
    41a4:	2a01      	cmp	r2, #1
    41a6:	d006      	beq.n	41b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b6>
    41a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41ac:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    41b0:	fbb1 f1f2 	udiv	r1, r1, r2
    41b4:	1a40      	subs	r0, r0, r1
    41b6:	4770      	bx	lr
    41b8:	20000e04 	.word	0x20000e04
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	4c13      	ldr	r4, [pc, #76]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    41c0:	4603      	mov	r3, r0
    41c2:	460d      	mov	r5, r1
    41c4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    41c8:	2000      	movs	r0, #0
    41ca:	b15a      	cbz	r2, 41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41cc:	4621      	mov	r1, r4
    41ce:	f891 1020 	ldrb.w	r1, [r1, #32]
    41d2:	b163      	cbz	r3, 41ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ee>
    41d4:	2b01      	cmp	r3, #1
    41d6:	d111      	bne.n	41fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fc>
    41d8:	2a01      	cmp	r2, #1
    41da:	4628      	mov	r0, r5
    41dc:	d012      	beq.n	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    41de:	f005 fdd6 	bl	9d8e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    41e2:	e009      	b.n	41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>
    41e4:	f640 0158 	movw	r1, #2136	; 0x858
    41e8:	203e      	movs	r0, #62	; 0x3e
    41ea:	f7fc f8d3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41ee:	2a01      	cmp	r2, #1
    41f0:	4628      	mov	r0, r5
    41f2:	d004      	beq.n	41fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fe>
    41f4:	f005 fdd9 	bl	9daa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    41f8:	69e1      	ldr	r1, [r4, #28]
    41fa:	4408      	add	r0, r1
    41fc:	bd70      	pop	{r4, r5, r6, pc}
    41fe:	f000 f8d1 	bl	43a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    4202:	e7f9      	b.n	41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>
    4204:	f000 f8c0 	bl	4388 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    4208:	e7f6      	b.n	41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>
    420a:	0000      	.short	0x0000
    420c:	20000e04 	.word	0x20000e04
    4210:	b510      	push	{r4, lr}
    4212:	f7ff fc57 	bl	3ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    4216:	f7ff fe0d 	bl	3e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    421a:	f7ff fe43 	bl	3ea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    421e:	f7ff ff53 	bl	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    4222:	f005 ff0f 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4226:	2800      	cmp	r0, #0
    4228:	d108      	bne.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    422a:	f005 fefb 	bl	a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    422e:	2800      	cmp	r0, #0
    4230:	d104      	bne.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    4232:	4803      	ldr	r0, [pc, #12]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    4234:	6801      	ldr	r1, [r0, #0]
    4236:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    423a:	6001      	str	r1, [r0, #0]
    423c:	bd10      	pop	{r4, pc}
    423e:	0000      	.short	0x0000
    4240:	40001568 	.word	0x40001568
    4244:	b510      	push	{r4, lr}
    4246:	4604      	mov	r4, r0
    4248:	f7ff fc3c 	bl	3ac4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    424c:	f7ff fdf2 	bl	3e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    4250:	4620      	mov	r0, r4
    4252:	f7ff fe0d 	bl	3e70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    4256:	f005 fef5 	bl	a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    425a:	2800      	cmp	r0, #0
    425c:	d00d      	beq.n	427a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27a>
    425e:	4a09      	ldr	r2, [pc, #36]	; (4284 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x284>)
    4260:	6811      	ldr	r1, [r2, #0]
    4262:	0650      	lsls	r0, r2, #25
    4264:	2c02      	cmp	r4, #2
    4266:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    426a:	d007      	beq.n	427c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27c>
    426c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    4270:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    4274:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    4278:	6010      	str	r0, [r2, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    4280:	e7f6      	b.n	4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>
    4282:	0000      	.short	0x0000
    4284:	40001588 	.word	0x40001588
    4288:	a62c0000 	.word	0xa62c0000
    428c:	0604a1e0 	.word	0x0604a1e0
    4290:	0e0c0a08 	.word	0x0e0c0a08
    4294:	16141210 	.word	0x16141210
    4298:	201e1c18 	.word	0x201e1c18
    429c:	28262422 	.word	0x28262422
    42a0:	302e2c2a 	.word	0x302e2c2a
    42a4:	38363432 	.word	0x38363432
    42a8:	403e3c3a 	.word	0x403e3c3a
    42ac:	48464442 	.word	0x48464442
    42b0:	024e4c4a 	.word	0x024e4c4a
    42b4:	0000501a 	.word	0x0000501a
    42b8:	00000001 	.word	0x00000001
    42bc:	40001110 	.word	0x40001110
	...
    42d4:	00001e14 	.word	0x00001e14
    42d8:	00001130 	.word	0x00001130
    42dc:	00000000 	.word	0x00000000
    42e0:	00000028 	.word	0x00000028
    42e4:	00000018 	.word	0x00000018
    42e8:	00000000 	.word	0x00000000
    42ec:	00001e14 	.word	0x00001e14
    42f0:	00001130 	.word	0x00001130
    42f4:	00000000 	.word	0x00000000
    42f8:	00001770 	.word	0x00001770
    42fc:	00000fa0 	.word	0x00000fa0

00004300 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	4605      	mov	r5, r0
    4304:	4614      	mov	r4, r2
    4306:	4608      	mov	r0, r1
    4308:	f7ff fc02 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    430c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4310:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    4314:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    4318:	4807      	ldr	r0, [pc, #28]	; (4338 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    431a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    431e:	4408      	add	r0, r1
    4320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4324:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    4328:	fbb0 f5f1 	udiv	r5, r0, r1
    432c:	4620      	mov	r0, r4
    432e:	f7ff fbc3 	bl	3ab8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4332:	4428      	add	r0, r5
    4334:	1d40      	adds	r0, r0, #5
    4336:	bd70      	pop	{r4, r5, r6, pc}
    4338:	000043c8 	.word	0x000043c8

0000433c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    433c:	b570      	push	{r4, r5, r6, lr}
    433e:	4d0e      	ldr	r5, [pc, #56]	; (4378 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4340:	461c      	mov	r4, r3
    4342:	3d08      	subs	r5, #8
    4344:	4b0c      	ldr	r3, [pc, #48]	; (4378 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4346:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    434a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    434e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4352:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    4356:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    435a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    435e:	4418      	add	r0, r3
    4360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4364:	fbb0 f5f1 	udiv	r5, r0, r1
    4368:	4610      	mov	r0, r2
    436a:	f7ff fba5 	bl	3ab8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    436e:	4428      	add	r0, r5
    4370:	4420      	add	r0, r4
    4372:	1d40      	adds	r0, r0, #5
    4374:	bd70      	pop	{r4, r5, r6, pc}
    4376:	0000      	.short	0x0000
    4378:	000043c8 	.word	0x000043c8

0000437c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    437c:	4901      	ldr	r1, [pc, #4]	; (4384 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    437e:	b2c0      	uxtb	r0, r0
    4380:	6008      	str	r0, [r1, #0]
    4382:	4770      	bx	lr
    4384:	4000150c 	.word	0x4000150c

00004388 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    4388:	4a05      	ldr	r2, [pc, #20]	; (43a0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    438a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    438e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4392:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    4396:	fbb1 f1f2 	udiv	r1, r1, r2
    439a:	4408      	add	r0, r1
    439c:	1e80      	subs	r0, r0, #2
    439e:	4770      	bx	lr
    43a0:	000043c0 	.word	0x000043c0

000043a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    43a4:	4a05      	ldr	r2, [pc, #20]	; (43bc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    43a6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    43aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43ae:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    43b2:	fbb1 f1f2 	udiv	r1, r1, r2
    43b6:	4408      	add	r0, r1
    43b8:	4770      	bx	lr
    43ba:	0000      	.short	0x0000
    43bc:	000043c0 	.word	0x000043c0
    43c0:	05dc0000 	.word	0x05dc0000
    43c4:	000003e8 	.word	0x000003e8
    43c8:	00000000 	.word	0x00000000
    43cc:	00001e14 	.word	0x00001e14
    43d0:	00001130 	.word	0x00001130

000043d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    43d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43d8:	461e      	mov	r6, r3
    43da:	4617      	mov	r7, r2
    43dc:	460c      	mov	r4, r1
    43de:	4605      	mov	r5, r0
    43e0:	f000 f856 	bl	4490 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    43e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 448c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    43e8:	4680      	mov	r8, r0
    43ea:	f899 0000 	ldrb.w	r0, [r9]
    43ee:	42a8      	cmp	r0, r5
    43f0:	d110      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    43f2:	f899 1001 	ldrb.w	r1, [r9, #1]
    43f6:	4648      	mov	r0, r9
    43f8:	42a1      	cmp	r1, r4
    43fa:	d10b      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    43fc:	f990 1002 	ldrsb.w	r1, [r0, #2]
    4400:	42b9      	cmp	r1, r7
    4402:	d107      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4404:	78c2      	ldrb	r2, [r0, #3]
    4406:	4542      	cmp	r2, r8
    4408:	d104      	bne.n	4414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    440a:	8881      	ldrh	r1, [r0, #4]
    440c:	8031      	strh	r1, [r6, #0]
    440e:	7980      	ldrb	r0, [r0, #6]
    4410:	70b0      	strb	r0, [r6, #2]
    4412:	e037      	b.n	4484 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    4414:	463a      	mov	r2, r7
    4416:	4621      	mov	r1, r4
    4418:	2d01      	cmp	r5, #1
    441a:	d009      	beq.n	4430 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    441c:	2d02      	cmp	r5, #2
    441e:	d009      	beq.n	4434 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    4420:	2d04      	cmp	r5, #4
    4422:	d009      	beq.n	4438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    4424:	2d08      	cmp	r5, #8
    4426:	d009      	beq.n	443c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    4428:	f240 4161 	movw	r1, #1121	; 0x461
    442c:	2006      	movs	r0, #6
    442e:	e00c      	b.n	444a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    4430:	2000      	movs	r0, #0
    4432:	e004      	b.n	443e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4434:	2001      	movs	r0, #1
    4436:	e002      	b.n	443e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4438:	2003      	movs	r0, #3
    443a:	e000      	b.n	443e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    443c:	2002      	movs	r0, #2
    443e:	466b      	mov	r3, sp
    4440:	f000 f89e 	bl	4580 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    4444:	b118      	cbz	r0, 444e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    4446:	213d      	movs	r1, #61	; 0x3d
    4448:	2075      	movs	r0, #117	; 0x75
    444a:	f7fb ffa3 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    444e:	4620      	mov	r0, r4
    4450:	f7ff f922 	bl	3698 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    4454:	4602      	mov	r2, r0
    4456:	2300      	movs	r3, #0
    4458:	4631      	mov	r1, r6
    445a:	f99d 0000 	ldrsb.w	r0, [sp]
    445e:	f003 fe0b 	bl	8078 <mpsl_fem_tx_power_split>
    4462:	4601      	mov	r1, r0
    4464:	f889 1007 	strb.w	r1, [r9, #7]
    4468:	8831      	ldrh	r1, [r6, #0]
    446a:	f8a9 1004 	strh.w	r1, [r9, #4]
    446e:	78b1      	ldrb	r1, [r6, #2]
    4470:	f889 1006 	strb.w	r1, [r9, #6]
    4474:	f889 5000 	strb.w	r5, [r9]
    4478:	f889 4001 	strb.w	r4, [r9, #1]
    447c:	f889 7002 	strb.w	r7, [r9, #2]
    4480:	f889 8003 	strb.w	r8, [r9, #3]
    4484:	f999 0007 	ldrsb.w	r0, [r9, #7]
    4488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    448c:	20000190 	.word	0x20000190

00004490 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    4490:	4801      	ldr	r0, [pc, #4]	; (4498 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    4492:	7800      	ldrb	r0, [r0, #0]
    4494:	4770      	bx	lr
    4496:	0000      	.short	0x0000
    4498:	20000110 	.word	0x20000110

0000449c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    449c:	b570      	push	{r4, r5, r6, lr}
    449e:	4c17      	ldr	r4, [pc, #92]	; (44fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    44a0:	7860      	ldrb	r0, [r4, #1]
    44a2:	2800      	cmp	r0, #0
    44a4:	d123      	bne.n	44ee <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    44a6:	2001      	movs	r0, #1
    44a8:	7060      	strb	r0, [r4, #1]
    44aa:	f005 fda5 	bl	9ff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    44ae:	f06f 0527 	mvn.w	r5, #39	; 0x27
    44b2:	b928      	cbnz	r0, 44c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    44b4:	f005 fdd6 	bl	a064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    44b8:	b910      	cbnz	r0, 44c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    44ba:	f005 fddd 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    44be:	b120      	cbz	r0, 44ca <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    44c0:	480f      	ldr	r0, [pc, #60]	; (4500 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    44c2:	6060      	str	r0, [r4, #4]
    44c4:	70a5      	strb	r5, [r4, #2]
    44c6:	2008      	movs	r0, #8
    44c8:	e010      	b.n	44ec <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    44ca:	f005 fd6a 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    44ce:	b940      	cbnz	r0, 44e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44d0:	f005 fd71 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    44d4:	b928      	cbnz	r0, 44e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44d6:	f005 fd85 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    44da:	b910      	cbnz	r0, 44e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44dc:	f005 fd96 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    44e0:	b130      	cbz	r0, 44f0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    44e2:	4807      	ldr	r0, [pc, #28]	; (4500 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    44e4:	3031      	adds	r0, #49	; 0x31
    44e6:	6060      	str	r0, [r4, #4]
    44e8:	70a5      	strb	r5, [r4, #2]
    44ea:	2004      	movs	r0, #4
    44ec:	70e0      	strb	r0, [r4, #3]
    44ee:	bd70      	pop	{r4, r5, r6, pc}
    44f0:	f240 113f 	movw	r1, #319	; 0x13f
    44f4:	2074      	movs	r0, #116	; 0x74
    44f6:	f003 fc01 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44fa:	0000      	.short	0x0000
    44fc:	20000110 	.word	0x20000110
    4500:	0000a394 	.word	0x0000a394

00004504 <mpsl_tx_power_radio_supported_power_adjust>:
    4504:	4a06      	ldr	r2, [pc, #24]	; (4520 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    4506:	b500      	push	{lr}
    4508:	f992 2003 	ldrsb.w	r2, [r2, #3]
    450c:	4290      	cmp	r0, r2
    450e:	db01      	blt.n	4514 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    4510:	4610      	mov	r0, r2
    4512:	bd00      	pop	{pc}
    4514:	f000 f808 	bl	4528 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    4518:	4902      	ldr	r1, [pc, #8]	; (4524 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    451a:	5608      	ldrsb	r0, [r1, r0]
    451c:	bd00      	pop	{pc}
    451e:	0000      	.short	0x0000
    4520:	20000110 	.word	0x20000110
    4524:	0000a386 	.word	0x0000a386

00004528 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    4528:	4602      	mov	r2, r0
    452a:	4813      	ldr	r0, [pc, #76]	; (4578 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    452c:	b510      	push	{r4, lr}
    452e:	f990 3003 	ldrsb.w	r3, [r0, #3]
    4532:	429a      	cmp	r2, r3
    4534:	db01      	blt.n	453a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    4536:	200d      	movs	r0, #13
    4538:	bd10      	pop	{r4, pc}
    453a:	f990 3002 	ldrsb.w	r3, [r0, #2]
    453e:	429a      	cmp	r2, r3
    4540:	dc01      	bgt.n	4546 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    4542:	2000      	movs	r0, #0
    4544:	bd10      	pop	{r4, pc}
    4546:	b101      	cbz	r1, 454a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    4548:	2101      	movs	r1, #1
    454a:	1ad4      	subs	r4, r2, r3
    454c:	6843      	ldr	r3, [r0, #4]
    454e:	5d18      	ldrb	r0, [r3, r4]
    4550:	4c0a      	ldr	r4, [pc, #40]	; (457c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    4552:	5624      	ldrsb	r4, [r4, r0]
    4554:	4294      	cmp	r4, r2
    4556:	d0f5      	beq.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4558:	4c08      	ldr	r4, [pc, #32]	; (457c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    455a:	4408      	add	r0, r1
    455c:	343f      	adds	r4, #63	; 0x3f
    455e:	b2c0      	uxtb	r0, r0
    4560:	b2d2      	uxtb	r2, r2
    4562:	42a3      	cmp	r3, r4
    4564:	d1ee      	bne.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4566:	2900      	cmp	r1, #0
    4568:	d0ec      	beq.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    456a:	2a01      	cmp	r2, #1
    456c:	d001      	beq.n	4572 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    456e:	2a02      	cmp	r2, #2
    4570:	d1e8      	bne.n	4544 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4572:	1c40      	adds	r0, r0, #1
    4574:	b2c0      	uxtb	r0, r0
    4576:	bd10      	pop	{r4, pc}
    4578:	20000110 	.word	0x20000110
    457c:	0000a386 	.word	0x0000a386

00004580 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    4580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4584:	461c      	mov	r4, r3
    4586:	4690      	mov	r8, r2
    4588:	460d      	mov	r5, r1
    458a:	4606      	mov	r6, r0
    458c:	f06f 0715 	mvn.w	r7, #21
    4590:	2804      	cmp	r0, #4
    4592:	d804      	bhi.n	459e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4594:	b11c      	cbz	r4, 459e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    4596:	f005 fc13 	bl	9dc0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    459a:	42a8      	cmp	r0, r5
    459c:	d802      	bhi.n	45a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    459e:	4638      	mov	r0, r7
    45a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45a4:	4805      	ldr	r0, [pc, #20]	; (45bc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    45a6:	4642      	mov	r2, r8
    45a8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    45ac:	b118      	cbz	r0, 45b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    45ae:	5740      	ldrsb	r0, [r0, r5]
    45b0:	4282      	cmp	r2, r0
    45b2:	dd00      	ble.n	45b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    45b4:	4602      	mov	r2, r0
    45b6:	7022      	strb	r2, [r4, #0]
    45b8:	2000      	movs	r0, #0
    45ba:	e7f1      	b.n	45a0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    45bc:	20000e38 	.word	0x20000e38

000045c0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    45c0:	4801      	ldr	r0, [pc, #4]	; (45c8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    45c2:	7800      	ldrb	r0, [r0, #0]
    45c4:	4770      	bx	lr
    45c6:	0000      	.short	0x0000
    45c8:	20000118 	.word	0x20000118

000045cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    45cc:	4905      	ldr	r1, [pc, #20]	; (45e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    45ce:	780a      	ldrb	r2, [r1, #0]
    45d0:	4290      	cmp	r0, r2
    45d2:	d301      	bcc.n	45d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    45d4:	2000      	movs	r0, #0
    45d6:	4770      	bx	lr
    45d8:	6849      	ldr	r1, [r1, #4]
    45da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    45de:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    45e2:	4770      	bx	lr
    45e4:	20000118 	.word	0x20000118

000045e8 <MPSL_IRQ_RADIO_Handler>:
    45e8:	490d      	ldr	r1, [pc, #52]	; (4620 <MPSL_IRQ_RADIO_Handler+0x38>)
    45ea:	b510      	push	{r4, lr}
    45ec:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    45f0:	2820      	cmp	r0, #32
    45f2:	d00f      	beq.n	4614 <MPSL_IRQ_RADIO_Handler+0x2c>
    45f4:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    45f8:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    45fc:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    4600:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    4604:	6840      	ldr	r0, [r0, #4]
    4606:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    460a:	680a      	ldr	r2, [r1, #0]
    460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4610:	2104      	movs	r1, #4
    4612:	4710      	bx	r2
    4614:	f640 017f 	movw	r1, #2175	; 0x87f
    4618:	2070      	movs	r0, #112	; 0x70
    461a:	f003 fb6f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    461e:	0000      	.short	0x0000
    4620:	20000b30 	.word	0x20000b30
    4624:	b570      	push	{r4, r5, r6, lr}
    4626:	4605      	mov	r5, r0
    4628:	2a20      	cmp	r2, #32
    462a:	d028      	beq.n	467e <MPSL_IRQ_RADIO_Handler+0x96>
    462c:	4819      	ldr	r0, [pc, #100]	; (4694 <MPSL_IRQ_RADIO_Handler+0xac>)
    462e:	4c1a      	ldr	r4, [pc, #104]	; (4698 <MPSL_IRQ_RADIO_Handler+0xb0>)
    4630:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    4634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4638:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    463c:	4423      	add	r3, r4
    463e:	2920      	cmp	r1, #32
    4640:	d022      	beq.n	4688 <MPSL_IRQ_RADIO_Handler+0xa0>
    4642:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    4646:	7840      	ldrb	r0, [r0, #1]
    4648:	784c      	ldrb	r4, [r1, #1]
    464a:	7048      	strb	r0, [r1, #1]
    464c:	4620      	mov	r0, r4
    464e:	4601      	mov	r1, r0
    4650:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    4654:	4291      	cmp	r1, r2
    4656:	7005      	strb	r5, [r0, #0]
    4658:	7840      	ldrb	r0, [r0, #1]
    465a:	d1f8      	bne.n	464e <MPSL_IRQ_RADIO_Handler+0x66>
    465c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    4660:	2a20      	cmp	r2, #32
    4662:	bf1a      	itte	ne
    4664:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    4668:	7054      	strbne	r4, [r2, #1]
    466a:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    466e:	2220      	movs	r2, #32
    4670:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    4674:	f88c 2001 	strb.w	r2, [ip, #1]
    4678:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    467c:	bd70      	pop	{r4, r5, r6, pc}
    467e:	f240 2186 	movw	r1, #646	; 0x286
    4682:	2070      	movs	r0, #112	; 0x70
    4684:	f003 fb3a 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4688:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    468c:	7840      	ldrb	r0, [r0, #1]
    468e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    4692:	e7db      	b.n	464c <MPSL_IRQ_RADIO_Handler+0x64>
    4694:	20000ab0 	.word	0x20000ab0
    4698:	20000b30 	.word	0x20000b30
    469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46a0:	b08f      	sub	sp, #60	; 0x3c
    46a2:	4615      	mov	r5, r2
    46a4:	461e      	mov	r6, r3
    46a6:	460c      	mov	r4, r1
    46a8:	f002 fa7c 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    46ac:	1828      	adds	r0, r5, r0
    46ae:	f146 0100 	adc.w	r1, r6, #0
    46b2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    46b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    46ba:	1a80      	subs	r0, r0, r2
    46bc:	eb71 0003 	sbcs.w	r0, r1, r3
    46c0:	f0c0 80e5 	bcc.w	488e <MPSL_IRQ_RADIO_Handler+0x2a6>
    46c4:	a808      	add	r0, sp, #32
    46c6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    46ca:	900a      	str	r0, [sp, #40]	; 0x28
    46cc:	48bc      	ldr	r0, [pc, #752]	; (49c0 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    46ce:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    46d2:	4408      	add	r0, r1
    46d4:	9009      	str	r0, [sp, #36]	; 0x24
    46d6:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    46da:	2020      	movs	r0, #32
    46dc:	f10d 091c 	add.w	r9, sp, #28
    46e0:	f88d 001c 	strb.w	r0, [sp, #28]
    46e4:	2d20      	cmp	r5, #32
    46e6:	d036      	beq.n	4756 <MPSL_IRQ_RADIO_Handler+0x16e>
    46e8:	48b6      	ldr	r0, [pc, #728]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    46ea:	2600      	movs	r6, #0
    46ec:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    46f0:	48b5      	ldr	r0, [pc, #724]	; (49c8 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    46f2:	e9d4 7300 	ldrd	r7, r3, [r4]
    46f6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    46fa:	f850 8f08 	ldr.w	r8, [r0, #8]!
    46fe:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    4702:	eb18 0101 	adds.w	r1, r8, r1
    4706:	4172      	adcs	r2, r6
    4708:	1a79      	subs	r1, r7, r1
    470a:	eb73 0102 	sbcs.w	r1, r3, r2
    470e:	d322      	bcc.n	4756 <MPSL_IRQ_RADIO_Handler+0x16e>
    4710:	89e1      	ldrh	r1, [r4, #14]
    4712:	b1c9      	cbz	r1, 4748 <MPSL_IRQ_RADIO_Handler+0x160>
    4714:	89c0      	ldrh	r0, [r0, #14]
    4716:	b9b8      	cbnz	r0, 4748 <MPSL_IRQ_RADIO_Handler+0x160>
    4718:	f003 f950 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    471c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4720:	bf08      	it	eq
    4722:	200d      	moveq	r0, #13
    4724:	d00b      	beq.n	473e <MPSL_IRQ_RADIO_Handler+0x156>
    4726:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    472a:	3856      	subs	r0, #86	; 0x56
    472c:	bf08      	it	eq
    472e:	201c      	moveq	r0, #28
    4730:	d005      	beq.n	473e <MPSL_IRQ_RADIO_Handler+0x156>
    4732:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4736:	389f      	subs	r0, #159	; 0x9f
    4738:	bf14      	ite	ne
    473a:	4630      	movne	r0, r6
    473c:	2032      	moveq	r0, #50	; 0x32
    473e:	1c40      	adds	r0, r0, #1
    4740:	ebb7 0108 	subs.w	r1, r7, r8
    4744:	4281      	cmp	r1, r0
    4746:	db06      	blt.n	4756 <MPSL_IRQ_RADIO_Handler+0x16e>
    4748:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    474c:	f889 5000 	strb.w	r5, [r9]
    4750:	7845      	ldrb	r5, [r0, #1]
    4752:	2d20      	cmp	r5, #32
    4754:	d1cc      	bne.n	46f0 <MPSL_IRQ_RADIO_Handler+0x108>
    4756:	980a      	ldr	r0, [sp, #40]	; 0x28
    4758:	f899 1000 	ldrb.w	r1, [r9]
    475c:	2d20      	cmp	r5, #32
    475e:	7001      	strb	r1, [r0, #0]
    4760:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4764:	f000 8128 	beq.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4768:	4896      	ldr	r0, [pc, #600]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    476a:	4f97      	ldr	r7, [pc, #604]	; (49c8 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    476c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4770:	2600      	movs	r6, #0
    4772:	9004      	str	r0, [sp, #16]
    4774:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    4778:	f10a 0008 	add.w	r0, sl, #8
    477c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4780:	f8d4 b000 	ldr.w	fp, [r4]
    4784:	e9d0 8300 	ldrd	r8, r3, [r0]
    4788:	eb1b 0202 	adds.w	r2, fp, r2
    478c:	4171      	adcs	r1, r6
    478e:	ebb8 0202 	subs.w	r2, r8, r2
    4792:	eb73 0101 	sbcs.w	r1, r3, r1
    4796:	d320      	bcc.n	47da <MPSL_IRQ_RADIO_Handler+0x1f2>
    4798:	89c0      	ldrh	r0, [r0, #14]
    479a:	2800      	cmp	r0, #0
    479c:	f000 810c 	beq.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47a0:	89e0      	ldrh	r0, [r4, #14]
    47a2:	2800      	cmp	r0, #0
    47a4:	f040 8108 	bne.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47a8:	f003 f908 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    47ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    47b0:	bf08      	it	eq
    47b2:	200d      	moveq	r0, #13
    47b4:	d00b      	beq.n	47ce <MPSL_IRQ_RADIO_Handler+0x1e6>
    47b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    47ba:	3856      	subs	r0, #86	; 0x56
    47bc:	bf08      	it	eq
    47be:	201c      	moveq	r0, #28
    47c0:	d005      	beq.n	47ce <MPSL_IRQ_RADIO_Handler+0x1e6>
    47c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    47c6:	389f      	subs	r0, #159	; 0x9f
    47c8:	bf14      	ite	ne
    47ca:	4630      	movne	r0, r6
    47cc:	2032      	moveq	r0, #50	; 0x32
    47ce:	1c41      	adds	r1, r0, #1
    47d0:	ebb8 000b 	subs.w	r0, r8, fp
    47d4:	4288      	cmp	r0, r1
    47d6:	f280 80ef 	bge.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47da:	f889 5000 	strb.w	r5, [r9]
    47de:	f89a 0018 	ldrb.w	r0, [sl, #24]
    47e2:	7c21      	ldrb	r1, [r4, #16]
    47e4:	4281      	cmp	r1, r0
    47e6:	d207      	bcs.n	47f8 <MPSL_IRQ_RADIO_Handler+0x210>
    47e8:	9804      	ldr	r0, [sp, #16]
    47ea:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    47ee:	7845      	ldrb	r5, [r0, #1]
    47f0:	2d20      	cmp	r5, #32
    47f2:	d1bf      	bne.n	4774 <MPSL_IRQ_RADIO_Handler+0x18c>
    47f4:	f000 b8e0 	b.w	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    47f8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    47fc:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    4800:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    4804:	f8d0 9008 	ldr.w	r9, [r0, #8]
    4808:	8ac0      	ldrh	r0, [r0, #22]
    480a:	eb19 0502 	adds.w	r5, r9, r2
    480e:	eb41 0806 	adc.w	r8, r1, r6
    4812:	bbb0      	cbnz	r0, 4882 <MPSL_IRQ_RADIO_Handler+0x29a>
    4814:	89e0      	ldrh	r0, [r4, #14]
    4816:	b3a0      	cbz	r0, 4882 <MPSL_IRQ_RADIO_Handler+0x29a>
    4818:	f003 f8d0 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    481c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4820:	bf08      	it	eq
    4822:	200d      	moveq	r0, #13
    4824:	d00b      	beq.n	483e <MPSL_IRQ_RADIO_Handler+0x256>
    4826:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    482a:	3856      	subs	r0, #86	; 0x56
    482c:	bf08      	it	eq
    482e:	201c      	moveq	r0, #28
    4830:	d005      	beq.n	483e <MPSL_IRQ_RADIO_Handler+0x256>
    4832:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4836:	389f      	subs	r0, #159	; 0x9f
    4838:	bf14      	ite	ne
    483a:	4630      	movne	r0, r6
    483c:	2032      	moveq	r0, #50	; 0x32
    483e:	1c41      	adds	r1, r0, #1
    4840:	ebb5 0009 	subs.w	r0, r5, r9
    4844:	4288      	cmp	r0, r1
    4846:	da1c      	bge.n	4882 <MPSL_IRQ_RADIO_Handler+0x29a>
    4848:	f003 f8b8 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    484c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4850:	bf08      	it	eq
    4852:	200d      	moveq	r0, #13
    4854:	d00b      	beq.n	486e <MPSL_IRQ_RADIO_Handler+0x286>
    4856:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    485a:	3856      	subs	r0, #86	; 0x56
    485c:	bf08      	it	eq
    485e:	201c      	moveq	r0, #28
    4860:	d005      	beq.n	486e <MPSL_IRQ_RADIO_Handler+0x286>
    4862:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4866:	389f      	subs	r0, #159	; 0x9f
    4868:	bf14      	ite	ne
    486a:	4630      	movne	r0, r6
    486c:	2032      	moveq	r0, #50	; 0x32
    486e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    4872:	1c40      	adds	r0, r0, #1
    4874:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    4878:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    487c:	1815      	adds	r5, r2, r0
    487e:	eb43 0806 	adc.w	r8, r3, r6
    4882:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    4886:	1b49      	subs	r1, r1, r5
    4888:	eb70 0008 	sbcs.w	r0, r0, r8
    488c:	d203      	bcs.n	4896 <MPSL_IRQ_RADIO_Handler+0x2ae>
    488e:	b00f      	add	sp, #60	; 0x3c
    4890:	2000      	movs	r0, #0
    4892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4896:	e9c4 5800 	strd	r5, r8, [r4]
    489a:	9818      	ldr	r0, [sp, #96]	; 0x60
    489c:	900b      	str	r0, [sp, #44]	; 0x2c
    489e:	a808      	add	r0, sp, #32
    48a0:	900a      	str	r0, [sp, #40]	; 0x28
    48a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    48a4:	f10d 0a1c 	add.w	sl, sp, #28
    48a8:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    48ac:	2020      	movs	r0, #32
    48ae:	f88d 001c 	strb.w	r0, [sp, #28]
    48b2:	2d20      	cmp	r5, #32
    48b4:	d037      	beq.n	4926 <MPSL_IRQ_RADIO_Handler+0x33e>
    48b6:	4843      	ldr	r0, [pc, #268]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    48b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    48ba:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    48be:	bf00      	nop
    48c0:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    48c4:	e9d4 8300 	ldrd	r8, r3, [r4]
    48c8:	f850 9f08 	ldr.w	r9, [r0, #8]!
    48cc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    48d0:	eb19 0202 	adds.w	r2, r9, r2
    48d4:	4171      	adcs	r1, r6
    48d6:	ebb8 0202 	subs.w	r2, r8, r2
    48da:	eb73 0101 	sbcs.w	r1, r3, r1
    48de:	d322      	bcc.n	4926 <MPSL_IRQ_RADIO_Handler+0x33e>
    48e0:	89e1      	ldrh	r1, [r4, #14]
    48e2:	b1c9      	cbz	r1, 4918 <MPSL_IRQ_RADIO_Handler+0x330>
    48e4:	89c0      	ldrh	r0, [r0, #14]
    48e6:	b9b8      	cbnz	r0, 4918 <MPSL_IRQ_RADIO_Handler+0x330>
    48e8:	f003 f868 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    48ec:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    48f0:	bf08      	it	eq
    48f2:	200d      	moveq	r0, #13
    48f4:	d00b      	beq.n	490e <MPSL_IRQ_RADIO_Handler+0x326>
    48f6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    48fa:	3856      	subs	r0, #86	; 0x56
    48fc:	bf08      	it	eq
    48fe:	201c      	moveq	r0, #28
    4900:	d005      	beq.n	490e <MPSL_IRQ_RADIO_Handler+0x326>
    4902:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4906:	389f      	subs	r0, #159	; 0x9f
    4908:	bf14      	ite	ne
    490a:	4630      	movne	r0, r6
    490c:	2032      	moveq	r0, #50	; 0x32
    490e:	1c41      	adds	r1, r0, #1
    4910:	ebb8 0009 	subs.w	r0, r8, r9
    4914:	4288      	cmp	r0, r1
    4916:	db06      	blt.n	4926 <MPSL_IRQ_RADIO_Handler+0x33e>
    4918:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    491c:	f88a 5000 	strb.w	r5, [sl]
    4920:	7845      	ldrb	r5, [r0, #1]
    4922:	2d20      	cmp	r5, #32
    4924:	d1cc      	bne.n	48c0 <MPSL_IRQ_RADIO_Handler+0x2d8>
    4926:	980a      	ldr	r0, [sp, #40]	; 0x28
    4928:	f89a 1000 	ldrb.w	r1, [sl]
    492c:	2d20      	cmp	r5, #32
    492e:	7001      	strb	r1, [r0, #0]
    4930:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    4934:	d040      	beq.n	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4936:	4923      	ldr	r1, [pc, #140]	; (49c4 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    4938:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    493c:	f8cd 000c 	str.w	r0, [sp, #12]
    4940:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    4944:	f109 0008 	add.w	r0, r9, #8
    4948:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    494c:	f8d4 b000 	ldr.w	fp, [r4]
    4950:	e9d0 a300 	ldrd	sl, r3, [r0]
    4954:	eb1b 0202 	adds.w	r2, fp, r2
    4958:	4171      	adcs	r1, r6
    495a:	ebba 0202 	subs.w	r2, sl, r2
    495e:	eb73 0101 	sbcs.w	r1, r3, r1
    4962:	d31b      	bcc.n	499c <MPSL_IRQ_RADIO_Handler+0x3b4>
    4964:	89c0      	ldrh	r0, [r0, #14]
    4966:	b338      	cbz	r0, 49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    4968:	89e0      	ldrh	r0, [r4, #14]
    496a:	bb28      	cbnz	r0, 49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    496c:	f003 f826 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4970:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4974:	bf08      	it	eq
    4976:	200d      	moveq	r0, #13
    4978:	d00b      	beq.n	4992 <MPSL_IRQ_RADIO_Handler+0x3aa>
    497a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    497e:	3856      	subs	r0, #86	; 0x56
    4980:	bf08      	it	eq
    4982:	201c      	moveq	r0, #28
    4984:	d005      	beq.n	4992 <MPSL_IRQ_RADIO_Handler+0x3aa>
    4986:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    498a:	389f      	subs	r0, #159	; 0x9f
    498c:	bf14      	ite	ne
    498e:	4630      	movne	r0, r6
    4990:	2032      	moveq	r0, #50	; 0x32
    4992:	1c41      	adds	r1, r0, #1
    4994:	ebba 000b 	subs.w	r0, sl, fp
    4998:	4288      	cmp	r0, r1
    499a:	da0d      	bge.n	49b8 <MPSL_IRQ_RADIO_Handler+0x3d0>
    499c:	f888 5000 	strb.w	r5, [r8]
    49a0:	f899 1018 	ldrb.w	r1, [r9, #24]
    49a4:	7c20      	ldrb	r0, [r4, #16]
    49a6:	4288      	cmp	r0, r1
    49a8:	f4bf af26 	bcs.w	47f8 <MPSL_IRQ_RADIO_Handler+0x210>
    49ac:	9803      	ldr	r0, [sp, #12]
    49ae:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    49b2:	7845      	ldrb	r5, [r0, #1]
    49b4:	2d20      	cmp	r5, #32
    49b6:	d1c3      	bne.n	4940 <MPSL_IRQ_RADIO_Handler+0x358>
    49b8:	b00f      	add	sp, #60	; 0x3c
    49ba:	2001      	movs	r0, #1
    49bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49c0:	20000b30 	.word	0x20000b30
    49c4:	20000ab0 	.word	0x20000ab0
    49c8:	200006b0 	.word	0x200006b0
    49cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    49d0:	b083      	sub	sp, #12
    49d2:	4691      	mov	r9, r2
    49d4:	4604      	mov	r4, r0
    49d6:	460d      	mov	r5, r1
    49d8:	4698      	mov	r8, r3
    49da:	aa01      	add	r2, sp, #4
    49dc:	4669      	mov	r1, sp
    49de:	4618      	mov	r0, r3
    49e0:	f002 f8fc 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    49e4:	f002 fe12 	bl	760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    49e8:	f002 f8dc 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    49ec:	4607      	mov	r7, r0
    49ee:	481e      	ldr	r0, [pc, #120]	; (4a68 <MPSL_IRQ_RADIO_Handler+0x480>)
    49f0:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    49f4:	2600      	movs	r6, #0
    49f6:	2920      	cmp	r1, #32
    49f8:	d009      	beq.n	4a0e <MPSL_IRQ_RADIO_Handler+0x426>
    49fa:	6882      	ldr	r2, [r0, #8]
    49fc:	68c1      	ldr	r1, [r0, #12]
    49fe:	6900      	ldr	r0, [r0, #16]
    4a00:	1d83      	adds	r3, r0, #6
    4a02:	f146 0000 	adc.w	r0, r6, #0
    4a06:	18d4      	adds	r4, r2, r3
    4a08:	eb41 0500 	adc.w	r5, r1, r0
    4a0c:	e026      	b.n	4a5c <MPSL_IRQ_RADIO_Handler+0x474>
    4a0e:	340a      	adds	r4, #10
    4a10:	f145 0500 	adc.w	r5, r5, #0
    4a14:	f1b8 0f00 	cmp.w	r8, #0
    4a18:	d017      	beq.n	4a4a <MPSL_IRQ_RADIO_Handler+0x462>
    4a1a:	f003 f8f7 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4a1e:	b9a0      	cbnz	r0, 4a4a <MPSL_IRQ_RADIO_Handler+0x462>
    4a20:	f002 ffcc 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4a24:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4a28:	bf08      	it	eq
    4a2a:	200d      	moveq	r0, #13
    4a2c:	d00b      	beq.n	4a46 <MPSL_IRQ_RADIO_Handler+0x45e>
    4a2e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4a32:	3856      	subs	r0, #86	; 0x56
    4a34:	bf08      	it	eq
    4a36:	201c      	moveq	r0, #28
    4a38:	d005      	beq.n	4a46 <MPSL_IRQ_RADIO_Handler+0x45e>
    4a3a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4a3e:	389f      	subs	r0, #159	; 0x9f
    4a40:	bf14      	ite	ne
    4a42:	4630      	movne	r0, r6
    4a44:	2032      	moveq	r0, #50	; 0x32
    4a46:	1904      	adds	r4, r0, r4
    4a48:	4175      	adcs	r5, r6
    4a4a:	f1b9 0f00 	cmp.w	r9, #0
    4a4e:	d105      	bne.n	4a5c <MPSL_IRQ_RADIO_Handler+0x474>
    4a50:	9800      	ldr	r0, [sp, #0]
    4a52:	4287      	cmp	r7, r0
    4a54:	d902      	bls.n	4a5c <MPSL_IRQ_RADIO_Handler+0x474>
    4a56:	1a38      	subs	r0, r7, r0
    4a58:	1904      	adds	r4, r0, r4
    4a5a:	4175      	adcs	r5, r6
    4a5c:	b003      	add	sp, #12
    4a5e:	4620      	mov	r0, r4
    4a60:	4629      	mov	r1, r5
    4a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4a66:	0000      	.short	0x0000
    4a68:	20000b30 	.word	0x20000b30
    4a6c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a70:	b081      	sub	sp, #4
    4a72:	4605      	mov	r5, r0
    4a74:	9802      	ldr	r0, [sp, #8]
    4a76:	494a      	ldr	r1, [pc, #296]	; (4ba0 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    4a78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4a7c:	4408      	add	r0, r1
    4a7e:	2600      	movs	r6, #0
    4a80:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4a84:	2020      	movs	r0, #32
    4a86:	4692      	mov	sl, r2
    4a88:	7010      	strb	r0, [r2, #0]
    4a8a:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    4a8e:	2c20      	cmp	r4, #32
    4a90:	d036      	beq.n	4b00 <MPSL_IRQ_RADIO_Handler+0x518>
    4a92:	9902      	ldr	r1, [sp, #8]
    4a94:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    4a98:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4a9c:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    4aa0:	e9d5 7300 	ldrd	r7, r3, [r5]
    4aa4:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4aa8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4aac:	eb18 0202 	adds.w	r2, r8, r2
    4ab0:	4171      	adcs	r1, r6
    4ab2:	1aba      	subs	r2, r7, r2
    4ab4:	eb73 0101 	sbcs.w	r1, r3, r1
    4ab8:	d322      	bcc.n	4b00 <MPSL_IRQ_RADIO_Handler+0x518>
    4aba:	89e9      	ldrh	r1, [r5, #14]
    4abc:	b1c9      	cbz	r1, 4af2 <MPSL_IRQ_RADIO_Handler+0x50a>
    4abe:	89c0      	ldrh	r0, [r0, #14]
    4ac0:	b9b8      	cbnz	r0, 4af2 <MPSL_IRQ_RADIO_Handler+0x50a>
    4ac2:	f002 ff7b 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4ac6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4aca:	bf08      	it	eq
    4acc:	200d      	moveq	r0, #13
    4ace:	d00b      	beq.n	4ae8 <MPSL_IRQ_RADIO_Handler+0x500>
    4ad0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4ad4:	3856      	subs	r0, #86	; 0x56
    4ad6:	bf08      	it	eq
    4ad8:	201c      	moveq	r0, #28
    4ada:	d005      	beq.n	4ae8 <MPSL_IRQ_RADIO_Handler+0x500>
    4adc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4ae0:	389f      	subs	r0, #159	; 0x9f
    4ae2:	bf14      	ite	ne
    4ae4:	4630      	movne	r0, r6
    4ae6:	2032      	moveq	r0, #50	; 0x32
    4ae8:	1c41      	adds	r1, r0, #1
    4aea:	ebb7 0008 	subs.w	r0, r7, r8
    4aee:	4288      	cmp	r0, r1
    4af0:	db06      	blt.n	4b00 <MPSL_IRQ_RADIO_Handler+0x518>
    4af2:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    4af6:	f88a 4000 	strb.w	r4, [sl]
    4afa:	7844      	ldrb	r4, [r0, #1]
    4afc:	2c20      	cmp	r4, #32
    4afe:	d1cd      	bne.n	4a9c <MPSL_IRQ_RADIO_Handler+0x4b4>
    4b00:	9804      	ldr	r0, [sp, #16]
    4b02:	f89a 1000 	ldrb.w	r1, [sl]
    4b06:	2c20      	cmp	r4, #32
    4b08:	7001      	strb	r1, [r0, #0]
    4b0a:	9f04      	ldr	r7, [sp, #16]
    4b0c:	9802      	ldr	r0, [sp, #8]
    4b0e:	d042      	beq.n	4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b10:	4924      	ldr	r1, [pc, #144]	; (4ba4 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    4b12:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4b16:	9000      	str	r0, [sp, #0]
    4b18:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    4b1c:	f8d5 b000 	ldr.w	fp, [r5]
    4b20:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    4b24:	f108 0008 	add.w	r0, r8, #8
    4b28:	eb1b 0201 	adds.w	r2, fp, r1
    4b2c:	eb43 0106 	adc.w	r1, r3, r6
    4b30:	e9d0 a300 	ldrd	sl, r3, [r0]
    4b34:	ebba 0202 	subs.w	r2, sl, r2
    4b38:	eb73 0101 	sbcs.w	r1, r3, r1
    4b3c:	d31b      	bcc.n	4b76 <MPSL_IRQ_RADIO_Handler+0x58e>
    4b3e:	89c0      	ldrh	r0, [r0, #14]
    4b40:	b348      	cbz	r0, 4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b42:	89e8      	ldrh	r0, [r5, #14]
    4b44:	bb38      	cbnz	r0, 4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b46:	f002 ff39 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4b4a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4b4e:	bf08      	it	eq
    4b50:	200d      	moveq	r0, #13
    4b52:	d00b      	beq.n	4b6c <MPSL_IRQ_RADIO_Handler+0x584>
    4b54:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4b58:	3856      	subs	r0, #86	; 0x56
    4b5a:	bf08      	it	eq
    4b5c:	201c      	moveq	r0, #28
    4b5e:	d005      	beq.n	4b6c <MPSL_IRQ_RADIO_Handler+0x584>
    4b60:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4b64:	389f      	subs	r0, #159	; 0x9f
    4b66:	bf14      	ite	ne
    4b68:	4630      	movne	r0, r6
    4b6a:	2032      	moveq	r0, #50	; 0x32
    4b6c:	1c41      	adds	r1, r0, #1
    4b6e:	ebba 000b 	subs.w	r0, sl, fp
    4b72:	4288      	cmp	r0, r1
    4b74:	da0f      	bge.n	4b96 <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b76:	703c      	strb	r4, [r7, #0]
    4b78:	f898 1018 	ldrb.w	r1, [r8, #24]
    4b7c:	7c28      	ldrb	r0, [r5, #16]
    4b7e:	4288      	cmp	r0, r1
    4b80:	d303      	bcc.n	4b8a <MPSL_IRQ_RADIO_Handler+0x5a2>
    4b82:	b005      	add	sp, #20
    4b84:	2000      	movs	r0, #0
    4b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b8a:	9800      	ldr	r0, [sp, #0]
    4b8c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4b90:	7844      	ldrb	r4, [r0, #1]
    4b92:	2c20      	cmp	r4, #32
    4b94:	d1c0      	bne.n	4b18 <MPSL_IRQ_RADIO_Handler+0x530>
    4b96:	b005      	add	sp, #20
    4b98:	2001      	movs	r0, #1
    4b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b9e:	0000      	.short	0x0000
    4ba0:	20000b30 	.word	0x20000b30
    4ba4:	20000ab0 	.word	0x20000ab0
    4ba8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4bac:	b09c      	sub	sp, #112	; 0x70
    4bae:	461f      	mov	r7, r3
    4bb0:	f002 fa64 	bl	707c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    4bb4:	4604      	mov	r4, r0
    4bb6:	460d      	mov	r5, r1
    4bb8:	f002 fd28 	bl	760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4bbc:	4606      	mov	r6, r0
    4bbe:	981e      	ldr	r0, [sp, #120]	; 0x78
    4bc0:	2801      	cmp	r0, #1
    4bc2:	bf18      	it	ne
    4bc4:	2802      	cmpne	r0, #2
    4bc6:	d005      	beq.n	4bd4 <MPSL_IRQ_RADIO_Handler+0x5ec>
    4bc8:	f640 1156 	movw	r1, #2390	; 0x956
    4bcc:	f04f 0070 	mov.w	r0, #112	; 0x70
    4bd0:	f003 f894 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bd4:	49fe      	ldr	r1, [pc, #1016]	; (4fd0 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    4bd6:	2001      	movs	r0, #1
    4bd8:	6008      	str	r0, [r1, #0]
    4bda:	49fe      	ldr	r1, [pc, #1016]	; (4fd4 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    4bdc:	6889      	ldr	r1, [r1, #8]
    4bde:	6008      	str	r0, [r1, #0]
    4be0:	2000      	movs	r0, #0
    4be2:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    4be6:	900c      	str	r0, [sp, #48]	; 0x30
    4be8:	1e40      	subs	r0, r0, #1
    4bea:	900d      	str	r0, [sp, #52]	; 0x34
    4bec:	48fa      	ldr	r0, [pc, #1000]	; (4fd8 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    4bee:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    4bf2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    4bf6:	f100 0108 	add.w	r1, r0, #8
    4bfa:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4bfe:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c02:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    4c06:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    4c0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    4c0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4c10:	f005 f906 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4c14:	4602      	mov	r2, r0
    4c16:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    4c1a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4c1e:	4bef      	ldr	r3, [pc, #956]	; (4fdc <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4c20:	4440      	add	r0, r8
    4c22:	1c41      	adds	r1, r0, #1
    4c24:	1850      	adds	r0, r2, r1
    4c26:	429a      	cmp	r2, r3
    4c28:	d856      	bhi.n	4cd8 <MPSL_IRQ_RADIO_Handler+0x6f0>
    4c2a:	4aed      	ldr	r2, [pc, #948]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4c2c:	4291      	cmp	r1, r2
    4c2e:	dc5b      	bgt.n	4ce8 <MPSL_IRQ_RADIO_Handler+0x700>
    4c30:	4252      	negs	r2, r2
    4c32:	4291      	cmp	r1, r2
    4c34:	db60      	blt.n	4cf8 <MPSL_IRQ_RADIO_Handler+0x710>
    4c36:	1c59      	adds	r1, r3, #1
    4c38:	4281      	cmp	r1, r0
    4c3a:	bfdc      	itt	le
    4c3c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4c40:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4c44:	dd05      	ble.n	4c52 <MPSL_IRQ_RADIO_Handler+0x66a>
    4c46:	2800      	cmp	r0, #0
    4c48:	bfbc      	itt	lt
    4c4a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4c4e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4c52:	9017      	str	r0, [sp, #92]	; 0x5c
    4c54:	48e3      	ldr	r0, [pc, #908]	; (4fe4 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    4c56:	f1b8 0f00 	cmp.w	r8, #0
    4c5a:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    4c5e:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    4c62:	bf14      	ite	ne
    4c64:	f04f 0a01 	movne.w	sl, #1
    4c68:	f04f 0a00 	moveq.w	sl, #0
    4c6c:	f002 ffce 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c70:	9019      	str	r0, [sp, #100]	; 0x64
    4c72:	f1ba 0f00 	cmp.w	sl, #0
    4c76:	d00b      	beq.n	4c90 <MPSL_IRQ_RADIO_Handler+0x6a8>
    4c78:	49db      	ldr	r1, [pc, #876]	; (4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4c7a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    4c7e:	ea6f 0200 	mvn.w	r2, r0
    4c82:	ea72 0001 	orns	r0, r2, r1
    4c86:	bf02      	ittt	eq
    4c88:	9819      	ldreq	r0, [sp, #100]	; 0x64
    4c8a:	2800      	cmpeq	r0, #0
    4c8c:	2701      	moveq	r7, #1
    4c8e:	d001      	beq.n	4c94 <MPSL_IRQ_RADIO_Handler+0x6ac>
    4c90:	f04f 0700 	mov.w	r7, #0
    4c94:	f002 fe92 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4c98:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4c9c:	bf08      	it	eq
    4c9e:	200d      	moveq	r0, #13
    4ca0:	d00b      	beq.n	4cba <MPSL_IRQ_RADIO_Handler+0x6d2>
    4ca2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4ca6:	3856      	subs	r0, #86	; 0x56
    4ca8:	bf08      	it	eq
    4caa:	201c      	moveq	r0, #28
    4cac:	d005      	beq.n	4cba <MPSL_IRQ_RADIO_Handler+0x6d2>
    4cae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4cb2:	389f      	subs	r0, #159	; 0x9f
    4cb4:	bf14      	ite	ne
    4cb6:	2000      	movne	r0, #0
    4cb8:	2032      	moveq	r0, #50	; 0x32
    4cba:	f04f 0900 	mov.w	r9, #0
    4cbe:	46cb      	mov	fp, r9
    4cc0:	9016      	str	r0, [sp, #88]	; 0x58
    4cc2:	4546      	cmp	r6, r8
    4cc4:	d936      	bls.n	4d34 <MPSL_IRQ_RADIO_Handler+0x74c>
    4cc6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4cc8:	43f3      	mvns	r3, r6
    4cca:	f8df c310 	ldr.w	ip, [pc, #784]	; 4fdc <MPSL_IRQ_RADIO_Handler+0x9f4>
    4cce:	18c8      	adds	r0, r1, r3
    4cd0:	46e9      	mov	r9, sp
    4cd2:	aa1a      	add	r2, sp, #104	; 0x68
    4cd4:	4561      	cmp	r1, ip
    4cd6:	d904      	bls.n	4ce2 <MPSL_IRQ_RADIO_Handler+0x6fa>
    4cd8:	f240 517f 	movw	r1, #1407	; 0x57f
    4cdc:	2070      	movs	r0, #112	; 0x70
    4cde:	f003 f80d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ce2:	49bf      	ldr	r1, [pc, #764]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4ce4:	428b      	cmp	r3, r1
    4ce6:	dd04      	ble.n	4cf2 <MPSL_IRQ_RADIO_Handler+0x70a>
    4ce8:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    4cec:	2070      	movs	r0, #112	; 0x70
    4cee:	f003 f805 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4cf2:	49be      	ldr	r1, [pc, #760]	; (4fec <MPSL_IRQ_RADIO_Handler+0xa04>)
    4cf4:	428b      	cmp	r3, r1
    4cf6:	da04      	bge.n	4d02 <MPSL_IRQ_RADIO_Handler+0x71a>
    4cf8:	f240 5181 	movw	r1, #1409	; 0x581
    4cfc:	2070      	movs	r0, #112	; 0x70
    4cfe:	f002 fffd 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d02:	49bb      	ldr	r1, [pc, #748]	; (4ff0 <MPSL_IRQ_RADIO_Handler+0xa08>)
    4d04:	4281      	cmp	r1, r0
    4d06:	bfdc      	itt	le
    4d08:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4d0c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4d10:	dd05      	ble.n	4d1e <MPSL_IRQ_RADIO_Handler+0x736>
    4d12:	2800      	cmp	r0, #0
    4d14:	bfbc      	itt	lt
    4d16:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4d1a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4d1e:	4649      	mov	r1, r9
    4d20:	f001 ff5c 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4d24:	9800      	ldr	r0, [sp, #0]
    4d26:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4d2c:	9000      	str	r0, [sp, #0]
    4d2e:	1a08      	subs	r0, r1, r0
    4d30:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    4d34:	2f00      	cmp	r7, #0
    4d36:	bf18      	it	ne
    4d38:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    4d3c:	d105      	bne.n	4d4a <MPSL_IRQ_RADIO_Handler+0x762>
    4d3e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4d42:	2800      	cmp	r0, #0
    4d44:	bf18      	it	ne
    4d46:	f04f 0b02 	movne.w	fp, #2
    4d4a:	43e0      	mvns	r0, r4
    4d4c:	ea70 0005 	orns	r0, r0, r5
    4d50:	d022      	beq.n	4d98 <MPSL_IRQ_RADIO_Handler+0x7b0>
    4d52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    4d56:	1a22      	subs	r2, r4, r0
    4d58:	eb75 0201 	sbcs.w	r2, r5, r1
    4d5c:	d20c      	bcs.n	4d78 <MPSL_IRQ_RADIO_Handler+0x790>
    4d5e:	1b02      	subs	r2, r0, r4
    4d60:	eb61 0105 	sbc.w	r1, r1, r5
    4d64:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4d68:	f171 0100 	sbcs.w	r1, r1, #0
    4d6c:	d311      	bcc.n	4d92 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4d6e:	f640 1195 	movw	r1, #2453	; 0x995
    4d72:	2070      	movs	r0, #112	; 0x70
    4d74:	f002 ffc2 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d78:	1a22      	subs	r2, r4, r0
    4d7a:	eb65 0101 	sbc.w	r1, r5, r1
    4d7e:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4d82:	f171 0100 	sbcs.w	r1, r1, #0
    4d86:	d304      	bcc.n	4d92 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4d88:	f640 1199 	movw	r1, #2457	; 0x999
    4d8c:	2070      	movs	r0, #112	; 0x70
    4d8e:	f002 ffb5 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d92:	1b00      	subs	r0, r0, r4
    4d94:	2801      	cmp	r0, #1
    4d96:	da03      	bge.n	4da0 <MPSL_IRQ_RADIO_Handler+0x7b8>
    4d98:	981c      	ldr	r0, [sp, #112]	; 0x70
    4d9a:	901a      	str	r0, [sp, #104]	; 0x68
    4d9c:	2003      	movs	r0, #3
    4d9e:	e00d      	b.n	4dbc <MPSL_IRQ_RADIO_Handler+0x7d4>
    4da0:	b157      	cbz	r7, 4db8 <MPSL_IRQ_RADIO_Handler+0x7d0>
    4da2:	4891      	ldr	r0, [pc, #580]	; (4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4da4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    4da8:	b130      	cbz	r0, 4db8 <MPSL_IRQ_RADIO_Handler+0x7d0>
    4daa:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4dae:	f110 0b00 	adds.w	fp, r0, #0
    4db2:	bf18      	it	ne
    4db4:	f04f 0b02 	movne.w	fp, #2
    4db8:	2000      	movs	r0, #0
    4dba:	941a      	str	r4, [sp, #104]	; 0x68
    4dbc:	4483      	add	fp, r0
    4dbe:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4dc2:	ebb0 0009 	subs.w	r0, r0, r9
    4dc6:	f162 0100 	sbc.w	r1, r2, #0
    4dca:	1e42      	subs	r2, r0, #1
    4dcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4dce:	f141 3eff 	adc.w	lr, r1, #4294967295
    4dd2:	1ad3      	subs	r3, r2, r3
    4dd4:	455b      	cmp	r3, fp
    4dd6:	db08      	blt.n	4dea <MPSL_IRQ_RADIO_Handler+0x802>
    4dd8:	f1b9 0f00 	cmp.w	r9, #0
    4ddc:	d032      	beq.n	4e44 <MPSL_IRQ_RADIO_Handler+0x85c>
    4dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4de0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    4de4:	444b      	add	r3, r9
    4de6:	9310      	str	r3, [sp, #64]	; 0x40
    4de8:	e02c      	b.n	4e44 <MPSL_IRQ_RADIO_Handler+0x85c>
    4dea:	f1b9 0f00 	cmp.w	r9, #0
    4dee:	d005      	beq.n	4dfc <MPSL_IRQ_RADIO_Handler+0x814>
    4df0:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    4df4:	b920      	cbnz	r0, 4e00 <MPSL_IRQ_RADIO_Handler+0x818>
    4df6:	f002 fbff 	bl	75f8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    4dfa:	b108      	cbz	r0, 4e00 <MPSL_IRQ_RADIO_Handler+0x818>
    4dfc:	b9af      	cbnz	r7, 4e2a <MPSL_IRQ_RADIO_Handler+0x842>
    4dfe:	e00c      	b.n	4e1a <MPSL_IRQ_RADIO_Handler+0x832>
    4e00:	b92f      	cbnz	r7, 4e0e <MPSL_IRQ_RADIO_Handler+0x826>
    4e02:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e06:	2800      	cmp	r0, #0
    4e08:	bf18      	it	ne
    4e0a:	f1ab 0b02 	subne.w	fp, fp, #2
    4e0e:	f04f 0900 	mov.w	r9, #0
    4e12:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    4e16:	464e      	mov	r6, r9
    4e18:	e007      	b.n	4e2a <MPSL_IRQ_RADIO_Handler+0x842>
    4e1a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e1e:	b120      	cbz	r0, 4e2a <MPSL_IRQ_RADIO_Handler+0x842>
    4e20:	2000      	movs	r0, #0
    4e22:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    4e26:	f1ab 0b02 	sub.w	fp, fp, #2
    4e2a:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4e2e:	ebb0 0009 	subs.w	r0, r0, r9
    4e32:	f162 0100 	sbc.w	r1, r2, #0
    4e36:	1e42      	subs	r2, r0, #1
    4e38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4e3a:	f141 3eff 	adc.w	lr, r1, #4294967295
    4e3e:	1ad3      	subs	r3, r2, r3
    4e40:	455b      	cmp	r3, fp
    4e42:	db7d      	blt.n	4f40 <MPSL_IRQ_RADIO_Handler+0x958>
    4e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4e46:	b99b      	cbnz	r3, 4e70 <MPSL_IRQ_RADIO_Handler+0x888>
    4e48:	4b67      	ldr	r3, [pc, #412]	; (4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    4e4a:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    4e4e:	ea6f 090c 	mvn.w	r9, ip
    4e52:	ea79 0903 	orns	r9, r9, r3
    4e56:	d00b      	beq.n	4e70 <MPSL_IRQ_RADIO_Handler+0x888>
    4e58:	ebb0 0c0c 	subs.w	ip, r0, ip
    4e5c:	9816      	ldr	r0, [sp, #88]	; 0x58
    4e5e:	eb61 0303 	sbc.w	r3, r1, r3
    4e62:	ebbc 0000 	subs.w	r0, ip, r0
    4e66:	f173 0000 	sbcs.w	r0, r3, #0
    4e6a:	bf38      	it	cc
    4e6c:	2000      	movcc	r0, #0
    4e6e:	d300      	bcc.n	4e72 <MPSL_IRQ_RADIO_Handler+0x88a>
    4e70:	2001      	movs	r0, #1
    4e72:	ea3a 0000 	bics.w	r0, sl, r0
    4e76:	d163      	bne.n	4f40 <MPSL_IRQ_RADIO_Handler+0x958>
    4e78:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    4e7c:	e9cd 0107 	strd	r0, r1, [sp, #28]
    4e80:	981e      	ldr	r0, [sp, #120]	; 0x78
    4e82:	4691      	mov	r9, r2
    4e84:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    4e88:	46f3      	mov	fp, lr
    4e8a:	2700      	movs	r7, #0
    4e8c:	f002 fd96 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4e90:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4e94:	bf08      	it	eq
    4e96:	200d      	moveq	r0, #13
    4e98:	d00b      	beq.n	4eb2 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4e9a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4e9e:	3856      	subs	r0, #86	; 0x56
    4ea0:	bf08      	it	eq
    4ea2:	201c      	moveq	r0, #28
    4ea4:	d005      	beq.n	4eb2 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4ea6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4eaa:	389f      	subs	r0, #159	; 0x9f
    4eac:	bf14      	ite	ne
    4eae:	4638      	movne	r0, r7
    4eb0:	2032      	moveq	r0, #50	; 0x32
    4eb2:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    4eb6:	300b      	adds	r0, #11
    4eb8:	ebb9 0202 	subs.w	r2, r9, r2
    4ebc:	eb6b 0303 	sbc.w	r3, fp, r3
    4ec0:	1a10      	subs	r0, r2, r0
    4ec2:	f173 0000 	sbcs.w	r0, r3, #0
    4ec6:	d22a      	bcs.n	4f1e <MPSL_IRQ_RADIO_Handler+0x936>
    4ec8:	9819      	ldr	r0, [sp, #100]	; 0x64
    4eca:	2801      	cmp	r0, #1
    4ecc:	d002      	beq.n	4ed4 <MPSL_IRQ_RADIO_Handler+0x8ec>
    4ece:	9818      	ldr	r0, [sp, #96]	; 0x60
    4ed0:	b148      	cbz	r0, 4ee6 <MPSL_IRQ_RADIO_Handler+0x8fe>
    4ed2:	e017      	b.n	4f04 <MPSL_IRQ_RADIO_Handler+0x91c>
    4ed4:	43e0      	mvns	r0, r4
    4ed6:	ea70 0005 	orns	r0, r0, r5
    4eda:	d127      	bne.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4edc:	f640 01d7 	movw	r1, #2263	; 0x8d7
    4ee0:	2070      	movs	r0, #112	; 0x70
    4ee2:	f002 ff0b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ee6:	43e0      	mvns	r0, r4
    4ee8:	ea70 0005 	orns	r0, r0, r5
    4eec:	d00a      	beq.n	4f04 <MPSL_IRQ_RADIO_Handler+0x91c>
    4eee:	d01d      	beq.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4ef0:	ebb4 0009 	subs.w	r0, r4, r9
    4ef4:	eb65 010b 	sbc.w	r1, r5, fp
    4ef8:	2300      	movs	r3, #0
    4efa:	f1d0 0204 	rsbs	r2, r0, #4
    4efe:	eb73 0201 	sbcs.w	r2, r3, r1
    4f02:	da06      	bge.n	4f12 <MPSL_IRQ_RADIO_Handler+0x92a>
    4f04:	464c      	mov	r4, r9
    4f06:	465d      	mov	r5, fp
    4f08:	4620      	mov	r0, r4
    4f0a:	4629      	mov	r1, r5
    4f0c:	f001 ff96 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4f10:	e00c      	b.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4f12:	2200      	movs	r2, #0
    4f14:	1a10      	subs	r0, r2, r0
    4f16:	eb72 0001 	sbcs.w	r0, r2, r1
    4f1a:	db11      	blt.n	4f40 <MPSL_IRQ_RADIO_Handler+0x958>
    4f1c:	e006      	b.n	4f2c <MPSL_IRQ_RADIO_Handler+0x944>
    4f1e:	464c      	mov	r4, r9
    4f20:	465d      	mov	r5, fp
    4f22:	4620      	mov	r0, r4
    4f24:	4629      	mov	r1, r5
    4f26:	f001 ff89 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4f2a:	4657      	mov	r7, sl
    4f2c:	43e1      	mvns	r1, r4
    4f2e:	ea71 0005 	orns	r0, r1, r5
    4f32:	d071      	beq.n	5018 <MPSL_IRQ_RADIO_Handler+0xa30>
    4f34:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4f38:	f04f 0b00 	mov.w	fp, #0
    4f3c:	990e      	ldr	r1, [sp, #56]	; 0x38
    4f3e:	e000      	b.n	4f42 <MPSL_IRQ_RADIO_Handler+0x95a>
    4f40:	e06f      	b.n	5022 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f42:	1a0b      	subs	r3, r1, r0
    4f44:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    4f48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4f4c:	eb11 010c 	adds.w	r1, r1, ip
    4f50:	1a08      	subs	r0, r1, r0
    4f52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4f56:	2b01      	cmp	r3, #1
    4f58:	d363      	bcc.n	5022 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4f5e:	bf98      	it	ls
    4f60:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    4f64:	d85d      	bhi.n	5022 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f66:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4f6a:	f004 ff59 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4f6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4f70:	4a1b      	ldr	r2, [pc, #108]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4f72:	1a0d      	subs	r5, r1, r0
    4f74:	1aaa      	subs	r2, r5, r2
    4f76:	f17b 0200 	sbcs.w	r2, fp, #0
    4f7a:	d316      	bcc.n	4faa <MPSL_IRQ_RADIO_Handler+0x9c2>
    4f7c:	4b18      	ldr	r3, [pc, #96]	; (4fe0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4f7e:	1a42      	subs	r2, r0, r1
    4f80:	1ad3      	subs	r3, r2, r3
    4f82:	f17b 0300 	sbcs.w	r3, fp, #0
    4f86:	d310      	bcc.n	4faa <MPSL_IRQ_RADIO_Handler+0x9c2>
    4f88:	4b14      	ldr	r3, [pc, #80]	; (4fdc <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4f8a:	42ab      	cmp	r3, r5
    4f8c:	bf3e      	ittt	cc
    4f8e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    4f92:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    4f96:	1845      	addcc	r5, r0, r1
    4f98:	d307      	bcc.n	4faa <MPSL_IRQ_RADIO_Handler+0x9c2>
    4f9a:	4293      	cmp	r3, r2
    4f9c:	d245      	bcs.n	502a <MPSL_IRQ_RADIO_Handler+0xa42>
    4f9e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    4fa2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    4fa6:	4408      	add	r0, r1
    4fa8:	4245      	negs	r5, r0
    4faa:	f8df 903c 	ldr.w	r9, [pc, #60]	; 4fe8 <MPSL_IRQ_RADIO_Handler+0xa00>
    4fae:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    4fb2:	b378      	cbz	r0, 5014 <MPSL_IRQ_RADIO_Handler+0xa2c>
    4fb4:	981e      	ldr	r0, [sp, #120]	; 0x78
    4fb6:	2801      	cmp	r0, #1
    4fb8:	d005      	beq.n	4fc6 <MPSL_IRQ_RADIO_Handler+0x9de>
    4fba:	2002      	movs	r0, #2
    4fbc:	f002 f9ca 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4fc0:	2001      	movs	r0, #1
    4fc2:	f002 f9c7 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4fc6:	45b0      	cmp	r8, r6
    4fc8:	d240      	bcs.n	504c <MPSL_IRQ_RADIO_Handler+0xa64>
    4fca:	eba5 0106 	sub.w	r1, r5, r6
    4fce:	e011      	b.n	4ff4 <MPSL_IRQ_RADIO_Handler+0xa0c>
    4fd0:	40000508 	.word	0x40000508
    4fd4:	20000120 	.word	0x20000120
    4fd8:	200006b0 	.word	0x200006b0
    4fdc:	1e847fff 	.word	0x1e847fff
    4fe0:	0f424000 	.word	0x0f424000
    4fe4:	20000ab0 	.word	0x20000ab0
    4fe8:	20000b30 	.word	0x20000b30
    4fec:	f0bdc000 	.word	0xf0bdc000
    4ff0:	1e848000 	.word	0x1e848000
    4ff4:	f04f 0002 	mov.w	r0, #2
    4ff8:	f002 f8f2 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4ffc:	b398      	cbz	r0, 5066 <MPSL_IRQ_RADIO_Handler+0xa7e>
    4ffe:	f1b8 0f00 	cmp.w	r8, #0
    5002:	bf1c      	itt	ne
    5004:	eba5 0108 	subne.w	r1, r5, r8
    5008:	2001      	movne	r0, #1
    500a:	d035      	beq.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    500c:	f002 f8e8 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5010:	b348      	cbz	r0, 5066 <MPSL_IRQ_RADIO_Handler+0xa7e>
    5012:	e031      	b.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    5014:	e00e      	b.n	5034 <MPSL_IRQ_RADIO_Handler+0xa4c>
    5016:	e7ff      	b.n	5018 <MPSL_IRQ_RADIO_Handler+0xa30>
    5018:	f640 2103 	movw	r1, #2563	; 0xa03
    501c:	2070      	movs	r0, #112	; 0x70
    501e:	f002 fe6d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5022:	b020      	add	sp, #128	; 0x80
    5024:	2000      	movs	r0, #0
    5026:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    502a:	f640 21d7 	movw	r1, #2775	; 0xad7
    502e:	2070      	movs	r0, #112	; 0x70
    5030:	f002 fe64 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5034:	45b0      	cmp	r8, r6
    5036:	bf34      	ite	cc
    5038:	4630      	movcc	r0, r6
    503a:	4640      	movcs	r0, r8
    503c:	301e      	adds	r0, #30
    503e:	42a8      	cmp	r0, r5
    5040:	dbb8      	blt.n	4fb4 <MPSL_IRQ_RADIO_Handler+0x9cc>
    5042:	f640 2117 	movw	r1, #2583	; 0xa17
    5046:	2070      	movs	r0, #112	; 0x70
    5048:	f002 fe58 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    504c:	d90c      	bls.n	5068 <MPSL_IRQ_RADIO_Handler+0xa80>
    504e:	eba5 0108 	sub.w	r1, r5, r8
    5052:	2001      	movs	r0, #1
    5054:	f002 f8c4 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5058:	b128      	cbz	r0, 5066 <MPSL_IRQ_RADIO_Handler+0xa7e>
    505a:	2e00      	cmp	r6, #0
    505c:	bf1c      	itt	ne
    505e:	1ba9      	subne	r1, r5, r6
    5060:	2002      	movne	r0, #2
    5062:	d009      	beq.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    5064:	e7d2      	b.n	500c <MPSL_IRQ_RADIO_Handler+0xa24>
    5066:	e034      	b.n	50d2 <MPSL_IRQ_RADIO_Handler+0xaea>
    5068:	ea56 0008 	orrs.w	r0, r6, r8
    506c:	d004      	beq.n	5078 <MPSL_IRQ_RADIO_Handler+0xa90>
    506e:	f640 113a 	movw	r1, #2362	; 0x93a
    5072:	2070      	movs	r0, #112	; 0x70
    5074:	f002 fe42 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5078:	4629      	mov	r1, r5
    507a:	2000      	movs	r0, #0
    507c:	f002 f8b0 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5080:	b338      	cbz	r0, 50d2 <MPSL_IRQ_RADIO_Handler+0xaea>
    5082:	2601      	movs	r6, #1
    5084:	f1ba 0f00 	cmp.w	sl, #0
    5088:	bf04      	itt	eq
    508a:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    508e:	2800      	cmpeq	r0, #0
    5090:	d000      	beq.n	5094 <MPSL_IRQ_RADIO_Handler+0xaac>
    5092:	b347      	cbz	r7, 50e6 <MPSL_IRQ_RADIO_Handler+0xafe>
    5094:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    5098:	ea6f 0101 	mvn.w	r1, r1
    509c:	ea71 0000 	orns	r0, r1, r0
    50a0:	d006      	beq.n	50b0 <MPSL_IRQ_RADIO_Handler+0xac8>
    50a2:	f002 fc91 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    50a6:	f04f 30ff 	mov.w	r0, #4294967295
    50aa:	4601      	mov	r1, r0
    50ac:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    50b0:	b1ff      	cbz	r7, 50f2 <MPSL_IRQ_RADIO_Handler+0xb0a>
    50b2:	9816      	ldr	r0, [sp, #88]	; 0x58
    50b4:	1a20      	subs	r0, r4, r0
    50b6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    50ba:	f04f 0005 	mov.w	r0, #5
    50be:	f002 f88f 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    50c2:	b370      	cbz	r0, 5122 <MPSL_IRQ_RADIO_Handler+0xb3a>
    50c4:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    50c8:	2800      	cmp	r0, #0
    50ca:	bf08      	it	eq
    50cc:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    50d0:	e017      	b.n	5102 <MPSL_IRQ_RADIO_Handler+0xb1a>
    50d2:	2002      	movs	r0, #2
    50d4:	f002 f93e 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50d8:	2001      	movs	r0, #1
    50da:	f002 f93b 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50de:	b020      	add	sp, #128	; 0x80
    50e0:	2000      	movs	r0, #0
    50e2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    50e6:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    50ea:	43c0      	mvns	r0, r0
    50ec:	ea70 0001 	orns	r0, r0, r1
    50f0:	d012      	beq.n	5118 <MPSL_IRQ_RADIO_Handler+0xb30>
    50f2:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    50f6:	b120      	cbz	r0, 5102 <MPSL_IRQ_RADIO_Handler+0xb1a>
    50f8:	2005      	movs	r0, #5
    50fa:	f002 f92b 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50fe:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    5102:	eba5 0008 	sub.w	r0, r5, r8
    5106:	f1a0 0119 	sub.w	r1, r0, #25
    510a:	2900      	cmp	r1, #0
    510c:	dc0f      	bgt.n	512e <MPSL_IRQ_RADIO_Handler+0xb46>
    510e:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    5112:	2070      	movs	r0, #112	; 0x70
    5114:	f002 fdf2 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5118:	f002 fc72 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    511c:	f002 f83e 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5120:	e7c4      	b.n	50ac <MPSL_IRQ_RADIO_Handler+0xac4>
    5122:	e7ff      	b.n	5124 <MPSL_IRQ_RADIO_Handler+0xb3c>
    5124:	f240 21e6 	movw	r1, #742	; 0x2e6
    5128:	2070      	movs	r0, #112	; 0x70
    512a:	f002 fde7 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    512e:	2003      	movs	r0, #3
    5130:	f002 f856 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5134:	b338      	cbz	r0, 5186 <MPSL_IRQ_RADIO_Handler+0xb9e>
    5136:	4816      	ldr	r0, [pc, #88]	; (5190 <MPSL_IRQ_RADIO_Handler+0xba8>)
    5138:	6880      	ldr	r0, [r0, #8]
    513a:	f8c0 b000 	str.w	fp, [r0]
    513e:	4815      	ldr	r0, [pc, #84]	; (5194 <MPSL_IRQ_RADIO_Handler+0xbac>)
    5140:	f8c0 b000 	str.w	fp, [r0]
    5144:	ac0c      	add	r4, sp, #48	; 0x30
    5146:	4814      	ldr	r0, [pc, #80]	; (5198 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    5148:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    514c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    5150:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    5154:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    5158:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    515c:	ac10      	add	r4, sp, #64	; 0x40
    515e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    5162:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    5166:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    516a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    516e:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    5172:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    5176:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    517a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    517e:	b020      	add	sp, #128	; 0x80
    5180:	2001      	movs	r0, #1
    5182:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5186:	f640 2148 	movw	r1, #2632	; 0xa48
    518a:	2070      	movs	r0, #112	; 0x70
    518c:	f002 fdb6 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5190:	20000120 	.word	0x20000120
    5194:	40000508 	.word	0x40000508
    5198:	20000ab0 	.word	0x20000ab0
    519c:	b570      	push	{r4, r5, r6, lr}
    519e:	4d1d      	ldr	r5, [pc, #116]	; (5214 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    51a0:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    51a4:	2820      	cmp	r0, #32
    51a6:	bf18      	it	ne
    51a8:	bd70      	popne	{r4, r5, r6, pc}
    51aa:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    51ae:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    51b2:	4428      	add	r0, r5
    51b4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    51b8:	2c20      	cmp	r4, #32
    51ba:	d026      	beq.n	520a <MPSL_IRQ_RADIO_Handler+0xc22>
    51bc:	4b16      	ldr	r3, [pc, #88]	; (5218 <MPSL_IRQ_RADIO_Handler+0xc30>)
    51be:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    51c2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    51c6:	7849      	ldrb	r1, [r1, #1]
    51c8:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    51cc:	20ff      	movs	r0, #255	; 0xff
    51ce:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    51d2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    51d6:	4621      	mov	r1, r4
    51d8:	2002      	movs	r0, #2
    51da:	f000 f88b 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    51de:	2000      	movs	r0, #0
    51e0:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    51e4:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    51e8:	480c      	ldr	r0, [pc, #48]	; (521c <MPSL_IRQ_RADIO_Handler+0xc34>)
    51ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    51ee:	7e00      	ldrb	r0, [r0, #24]
    51f0:	2800      	cmp	r0, #0
    51f2:	bf08      	it	eq
    51f4:	f002 feea 	bleq	7fcc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    51f8:	2000      	movs	r0, #0
    51fa:	4909      	ldr	r1, [pc, #36]	; (5220 <MPSL_IRQ_RADIO_Handler+0xc38>)
    51fc:	6849      	ldr	r1, [r1, #4]
    51fe:	2900      	cmp	r1, #0
    5200:	bf08      	it	eq
    5202:	bd70      	popeq	{r4, r5, r6, pc}
    5204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5208:	4708      	bx	r1
    520a:	f240 311d 	movw	r1, #797	; 0x31d
    520e:	2070      	movs	r0, #112	; 0x70
    5210:	f002 fd74 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5214:	20000b30 	.word	0x20000b30
    5218:	20000ab0 	.word	0x20000ab0
    521c:	200006b0 	.word	0x200006b0
    5220:	20000120 	.word	0x20000120
    5224:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5228:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 52e4 <MPSL_IRQ_RADIO_Handler+0xcfc>
    522c:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    5230:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    5234:	4440      	add	r0, r8
    5236:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    523a:	2c20      	cmp	r4, #32
    523c:	bf08      	it	eq
    523e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5242:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 52e8 <MPSL_IRQ_RADIO_Handler+0xd00>
    5246:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 52ec <MPSL_IRQ_RADIO_Handler+0xd04>
    524a:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    524e:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    5252:	2607      	movs	r6, #7
    5254:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    5258:	2801      	cmp	r0, #1
    525a:	d00e      	beq.n	527a <MPSL_IRQ_RADIO_Handler+0xc92>
    525c:	2804      	cmp	r0, #4
    525e:	bf08      	it	eq
    5260:	2602      	moveq	r6, #2
    5262:	d00a      	beq.n	527a <MPSL_IRQ_RADIO_Handler+0xc92>
    5264:	2805      	cmp	r0, #5
    5266:	bf0c      	ite	eq
    5268:	2603      	moveq	r6, #3
    526a:	2806      	cmpne	r0, #6
    526c:	d005      	beq.n	527a <MPSL_IRQ_RADIO_Handler+0xc92>
    526e:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    5272:	f04f 0070 	mov.w	r0, #112	; 0x70
    5276:	f002 fd41 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    527a:	f1bb 0f00 	cmp.w	fp, #0
    527e:	bf18      	it	ne
    5280:	f3af 8000 	nopne.w
    5284:	f3ef 8010 	mrs	r0, PRIMASK
    5288:	b672      	cpsid	i
    528a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    528e:	784a      	ldrb	r2, [r1, #1]
    5290:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    5294:	4441      	add	r1, r8
    5296:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    529a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    529e:	42a2      	cmp	r2, r4
    52a0:	bf04      	itt	eq
    52a2:	2220      	moveq	r2, #32
    52a4:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    52a8:	b1a8      	cbz	r0, 52d6 <MPSL_IRQ_RADIO_Handler+0xcee>
    52aa:	462a      	mov	r2, r5
    52ac:	4621      	mov	r1, r4
    52ae:	2001      	movs	r0, #1
    52b0:	f000 f820 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    52b4:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    52b8:	e9d1 2000 	ldrd	r2, r0, [r1]
    52bc:	4631      	mov	r1, r6
    52be:	4790      	blx	r2
    52c0:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    52c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    52c8:	4440      	add	r0, r8
    52ca:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    52ce:	2c20      	cmp	r4, #32
    52d0:	d1bd      	bne.n	524e <MPSL_IRQ_RADIO_Handler+0xc66>
    52d2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    52d6:	4806      	ldr	r0, [pc, #24]	; (52f0 <MPSL_IRQ_RADIO_Handler+0xd08>)
    52d8:	2800      	cmp	r0, #0
    52da:	bf18      	it	ne
    52dc:	f3af 8000 	nopne.w
    52e0:	b662      	cpsie	i
    52e2:	e7e2      	b.n	52aa <MPSL_IRQ_RADIO_Handler+0xcc2>
    52e4:	20000b30 	.word	0x20000b30
    52e8:	00000000 	.word	0x00000000
    52ec:	20000ab0 	.word	0x20000ab0
    52f0:	00000000 	.word	0x00000000
    52f4:	f8df c058 	ldr.w	ip, [pc, #88]	; 5350 <MPSL_IRQ_RADIO_Handler+0xd68>
    52f8:	b510      	push	{r4, lr}
    52fa:	2300      	movs	r3, #0
    52fc:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    5300:	2807      	cmp	r0, #7
    5302:	d21f      	bcs.n	5344 <MPSL_IRQ_RADIO_Handler+0xd5c>
    5304:	e8df f000 	tbb	[pc, r0]
    5308:	05050505 	.word	0x05050505
    530c:	00040404 	.word	0x00040404
    5310:	2301      	movs	r3, #1
    5312:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    5316:	2b00      	cmp	r3, #0
    5318:	bf08      	it	eq
    531a:	bd10      	popeq	{r4, pc}
    531c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5320:	480c      	ldr	r0, [pc, #48]	; (5354 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    5322:	4402      	add	r2, r0
    5324:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    5328:	2820      	cmp	r0, #32
    532a:	bf0e      	itee	eq
    532c:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    5330:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    5334:	7041      	strbne	r1, [r0, #1]
    5336:	2020      	movs	r0, #32
    5338:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    533c:	7058      	strb	r0, [r3, #1]
    533e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    5342:	bd10      	pop	{r4, pc}
    5344:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5348:	2070      	movs	r0, #112	; 0x70
    534a:	f002 fcd7 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    534e:	0000      	.short	0x0000
    5350:	20000ab0 	.word	0x20000ab0
    5354:	20000b30 	.word	0x20000b30
    5358:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    535c:	460f      	mov	r7, r1
    535e:	4680      	mov	r8, r0
    5360:	f8df b154 	ldr.w	fp, [pc, #340]	; 54b8 <MPSL_IRQ_RADIO_Handler+0xed0>
    5364:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    5368:	4458      	add	r0, fp
    536a:	f1b8 0f01 	cmp.w	r8, #1
    536e:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5372:	4625      	mov	r5, r4
    5374:	bf18      	it	ne
    5376:	f1b8 0f02 	cmpne.w	r8, #2
    537a:	d005      	beq.n	5388 <MPSL_IRQ_RADIO_Handler+0xda0>
    537c:	f640 217e 	movw	r1, #2686	; 0xa7e
    5380:	f04f 0070 	mov.w	r0, #112	; 0x70
    5384:	f002 fcba 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5388:	2d20      	cmp	r5, #32
    538a:	d041      	beq.n	5410 <MPSL_IRQ_RADIO_Handler+0xe28>
    538c:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    5390:	2600      	movs	r6, #0
    5392:	2800      	cmp	r0, #0
    5394:	bf08      	it	eq
    5396:	2602      	moveq	r6, #2
    5398:	f001 fd4a 	bl	6e30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    539c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 54bc <MPSL_IRQ_RADIO_Handler+0xed4>
    53a0:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    53a4:	6899      	ldr	r1, [r3, #8]
    53a6:	691b      	ldr	r3, [r3, #16]
    53a8:	1a0a      	subs	r2, r1, r0
    53aa:	18c9      	adds	r1, r1, r3
    53ac:	1a09      	subs	r1, r1, r0
    53ae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    53b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    53b6:	4296      	cmp	r6, r2
    53b8:	bf99      	ittee	ls
    53ba:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    53be:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    53c2:	4a3f      	ldrhi	r2, [pc, #252]	; (54c0 <MPSL_IRQ_RADIO_Handler+0xed8>)
    53c4:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    53c8:	d920      	bls.n	540c <MPSL_IRQ_RADIO_Handler+0xe24>
    53ca:	4622      	mov	r2, r4
    53cc:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    53d0:	784c      	ldrb	r4, [r1, #1]
    53d2:	2c20      	cmp	r4, #32
    53d4:	d012      	beq.n	53fc <MPSL_IRQ_RADIO_Handler+0xe14>
    53d6:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    53da:	6899      	ldr	r1, [r3, #8]
    53dc:	691b      	ldr	r3, [r3, #16]
    53de:	ebb1 0c00 	subs.w	ip, r1, r0
    53e2:	18c9      	adds	r1, r1, r3
    53e4:	1a09      	subs	r1, r1, r0
    53e6:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    53ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    53ee:	4566      	cmp	r6, ip
    53f0:	bf9c      	itt	ls
    53f2:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    53f6:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    53fa:	d8e6      	bhi.n	53ca <MPSL_IRQ_RADIO_Handler+0xde2>
    53fc:	2a20      	cmp	r2, #32
    53fe:	d005      	beq.n	540c <MPSL_IRQ_RADIO_Handler+0xe24>
    5400:	463b      	mov	r3, r7
    5402:	2120      	movs	r1, #32
    5404:	2004      	movs	r0, #4
    5406:	f7ff f90d 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    540a:	4604      	mov	r4, r0
    540c:	42ac      	cmp	r4, r5
    540e:	d113      	bne.n	5438 <MPSL_IRQ_RADIO_Handler+0xe50>
    5410:	482c      	ldr	r0, [pc, #176]	; (54c4 <MPSL_IRQ_RADIO_Handler+0xedc>)
    5412:	2800      	cmp	r0, #0
    5414:	bf18      	it	ne
    5416:	f3af 8000 	nopne.w
    541a:	f001 febf 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    541e:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    5422:	2a20      	cmp	r2, #32
    5424:	d00b      	beq.n	543e <MPSL_IRQ_RADIO_Handler+0xe56>
    5426:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    542a:	1c84      	adds	r4, r0, #2
    542c:	f141 0c00 	adc.w	ip, r1, #0
    5430:	1b1b      	subs	r3, r3, r4
    5432:	eb72 020c 	sbcs.w	r2, r2, ip
    5436:	d202      	bcs.n	543e <MPSL_IRQ_RADIO_Handler+0xe56>
    5438:	2000      	movs	r0, #0
    543a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    543e:	2d20      	cmp	r5, #32
    5440:	d013      	beq.n	546a <MPSL_IRQ_RADIO_Handler+0xe82>
    5442:	462b      	mov	r3, r5
    5444:	4642      	mov	r2, r8
    5446:	f7ff fbaf 	bl	4ba8 <MPSL_IRQ_RADIO_Handler+0x5c0>
    544a:	2800      	cmp	r0, #0
    544c:	bf1e      	ittt	ne
    544e:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    5452:	2002      	movne	r0, #2
    5454:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5458:	463b      	mov	r3, r7
    545a:	462a      	mov	r2, r5
    545c:	2120      	movs	r1, #32
    545e:	2004      	movs	r0, #4
    5460:	f7ff f8e0 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    5464:	2000      	movs	r0, #0
    5466:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    546a:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    546e:	43c0      	mvns	r0, r0
    5470:	ea70 0001 	orns	r0, r0, r1
    5474:	d005      	beq.n	5482 <MPSL_IRQ_RADIO_Handler+0xe9a>
    5476:	f002 faa7 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    547a:	f04f 30ff 	mov.w	r0, #4294967295
    547e:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    5482:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    5486:	b128      	cbz	r0, 5494 <MPSL_IRQ_RADIO_Handler+0xeac>
    5488:	2005      	movs	r0, #5
    548a:	f001 ff63 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    548e:	2000      	movs	r0, #0
    5490:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    5494:	2004      	movs	r0, #4
    5496:	f001 ff5d 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    549a:	f001 ffc3 	bl	7424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    549e:	490a      	ldr	r1, [pc, #40]	; (54c8 <MPSL_IRQ_RADIO_Handler+0xee0>)
    54a0:	2020      	movs	r0, #32
    54a2:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    54a6:	6889      	ldr	r1, [r1, #8]
    54a8:	2000      	movs	r0, #0
    54aa:	6008      	str	r0, [r1, #0]
    54ac:	4907      	ldr	r1, [pc, #28]	; (54cc <MPSL_IRQ_RADIO_Handler+0xee4>)
    54ae:	6008      	str	r0, [r1, #0]
    54b0:	2001      	movs	r0, #1
    54b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    54b6:	0000      	.short	0x0000
    54b8:	20000b30 	.word	0x20000b30
    54bc:	200006b0 	.word	0x200006b0
    54c0:	20000ab0 	.word	0x20000ab0
    54c4:	00000000 	.word	0x00000000
    54c8:	20000120 	.word	0x20000120
    54cc:	40000508 	.word	0x40000508

000054d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    54d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d4:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 569c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    54d8:	4606      	mov	r6, r0
    54da:	b08f      	sub	sp, #60	; 0x3c
    54dc:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    54e0:	468a      	mov	sl, r1
    54e2:	2820      	cmp	r0, #32
    54e4:	d061      	beq.n	55aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    54e6:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    54ea:	f10b 0408 	add.w	r4, fp, #8
    54ee:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    54f2:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    54f6:	2120      	movs	r1, #32
    54f8:	f88d 1018 	strb.w	r1, [sp, #24]
    54fc:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    5500:	f8db 2008 	ldr.w	r2, [fp, #8]
    5504:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5508:	4459      	add	r1, fp
    550a:	2700      	movs	r7, #0
    550c:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    5510:	f8db 1010 	ldr.w	r1, [fp, #16]
    5514:	1851      	adds	r1, r2, r1
    5516:	910a      	str	r1, [sp, #40]	; 0x28
    5518:	f8db 0000 	ldr.w	r0, [fp]
    551c:	aa09      	add	r2, sp, #36	; 0x24
    551e:	4430      	add	r0, r6
    5520:	a907      	add	r1, sp, #28
    5522:	f001 fb5b 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5526:	f8d9 0010 	ldr.w	r0, [r9, #16]
    552a:	9907      	ldr	r1, [sp, #28]
    552c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    5530:	1840      	adds	r0, r0, r1
    5532:	1810      	adds	r0, r2, r0
    5534:	2e67      	cmp	r6, #103	; 0x67
    5536:	d33d      	bcc.n	55b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5538:	4959      	ldr	r1, [pc, #356]	; (56a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    553a:	2200      	movs	r2, #0
    553c:	1b89      	subs	r1, r1, r6
    553e:	eb72 0107 	sbcs.w	r1, r2, r7
    5542:	d337      	bcc.n	55b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5544:	6821      	ldr	r1, [r4, #0]
    5546:	4694      	mov	ip, r2
    5548:	1a40      	subs	r0, r0, r1
    554a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    554e:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    5552:	eb7c 010c 	sbcs.w	r1, ip, ip
    5556:	d32d      	bcc.n	55b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5558:	60a0      	str	r0, [r4, #8]
    555a:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    555e:	f884 a010 	strb.w	sl, [r4, #16]
    5562:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    5566:	f10d 0b18 	add.w	fp, sp, #24
    556a:	2d20      	cmp	r5, #32
    556c:	d055      	beq.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    556e:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    5572:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    5576:	9001      	str	r0, [sp, #4]
    5578:	484a      	ldr	r0, [pc, #296]	; (56a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    557a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    557e:	f8d4 a000 	ldr.w	sl, [r4]
    5582:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    5586:	f108 0008 	add.w	r0, r8, #8
    558a:	eb1a 0201 	adds.w	r2, sl, r1
    558e:	eb43 0107 	adc.w	r1, r3, r7
    5592:	e9d0 9300 	ldrd	r9, r3, [r0]
    5596:	ebb9 0202 	subs.w	r2, r9, r2
    559a:	eb73 0101 	sbcs.w	r1, r3, r1
    559e:	d325      	bcc.n	55ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    55a0:	89c0      	ldrh	r0, [r0, #14]
    55a2:	b398      	cbz	r0, 560c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    55a4:	89e0      	ldrh	r0, [r4, #14]
    55a6:	b148      	cbz	r0, 55bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    55a8:	e037      	b.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    55aa:	f640 3135 	movw	r1, #2869	; 0xb35
    55ae:	2070      	movs	r0, #112	; 0x70
    55b0:	f002 fba4 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    55b4:	b00f      	add	sp, #60	; 0x3c
    55b6:	2001      	movs	r0, #1
    55b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55bc:	f002 f9fe 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    55c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    55c4:	bf08      	it	eq
    55c6:	200d      	moveq	r0, #13
    55c8:	d00b      	beq.n	55e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    55ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    55ce:	3856      	subs	r0, #86	; 0x56
    55d0:	bf08      	it	eq
    55d2:	201c      	moveq	r0, #28
    55d4:	d005      	beq.n	55e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    55d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    55da:	389f      	subs	r0, #159	; 0x9f
    55dc:	bf14      	ite	ne
    55de:	4638      	movne	r0, r7
    55e0:	2032      	moveq	r0, #50	; 0x32
    55e2:	1c41      	adds	r1, r0, #1
    55e4:	ebb9 000a 	subs.w	r0, r9, sl
    55e8:	4288      	cmp	r0, r1
    55ea:	da16      	bge.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    55ec:	f88b 5000 	strb.w	r5, [fp]
    55f0:	f898 0018 	ldrb.w	r0, [r8, #24]
    55f4:	7c21      	ldrb	r1, [r4, #16]
    55f6:	4281      	cmp	r1, r0
    55f8:	d309      	bcc.n	560e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    55fa:	6821      	ldr	r1, [r4, #0]
    55fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    55fe:	1a40      	subs	r0, r0, r1
    5600:	60a0      	str	r0, [r4, #8]
    5602:	b00f      	add	sp, #60	; 0x3c
    5604:	f04f 0002 	mov.w	r0, #2
    5608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    560c:	e005      	b.n	561a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    560e:	9801      	ldr	r0, [sp, #4]
    5610:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    5614:	7845      	ldrb	r5, [r0, #1]
    5616:	2d20      	cmp	r5, #32
    5618:	d1ae      	bne.n	5578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    561a:	2005      	movs	r0, #5
    561c:	f001 fe9a 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5620:	4d1e      	ldr	r5, [pc, #120]	; (569c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    5622:	f04f 30ff 	mov.w	r0, #4294967295
    5626:	6068      	str	r0, [r5, #4]
    5628:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    562c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    5630:	2120      	movs	r1, #32
    5632:	2a20      	cmp	r2, #32
    5634:	d003      	beq.n	563e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    5636:	2005      	movs	r0, #5
    5638:	f7fe fff4 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    563c:	e004      	b.n	5648 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    563e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5642:	4428      	add	r0, r5
    5644:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    5648:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    564c:	4916      	ldr	r1, [pc, #88]	; (56a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    564e:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    5652:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    5656:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    565a:	7048      	strb	r0, [r1, #1]
    565c:	6828      	ldr	r0, [r5, #0]
    565e:	4430      	add	r0, r6
    5660:	6028      	str	r0, [r5, #0]
    5662:	20ff      	movs	r0, #255	; 0xff
    5664:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    5668:	7e68      	ldrb	r0, [r5, #25]
    566a:	2801      	cmp	r0, #1
    566c:	d10a      	bne.n	5684 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    566e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    5672:	6823      	ldr	r3, [r4, #0]
    5674:	1818      	adds	r0, r3, r0
    5676:	f142 0100 	adc.w	r1, r2, #0
    567a:	1e40      	subs	r0, r0, #1
    567c:	f141 31ff 	adc.w	r1, r1, #4294967295
    5680:	f001 fc8a 	bl	6f98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5684:	f89d 0018 	ldrb.w	r0, [sp, #24]
    5688:	2820      	cmp	r0, #32
    568a:	d003      	beq.n	5694 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    568c:	4807      	ldr	r0, [pc, #28]	; (56ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    568e:	7840      	ldrb	r0, [r0, #1]
    5690:	f002 fc06 	bl	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5694:	b00f      	add	sp, #60	; 0x3c
    5696:	2000      	movs	r0, #0
    5698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    569c:	20000b30 	.word	0x20000b30
    56a0:	0f424000 	.word	0x0f424000
    56a4:	200006b0 	.word	0x200006b0
    56a8:	20000ab0 	.word	0x20000ab0
    56ac:	20000120 	.word	0x20000120

000056b0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    56b0:	b570      	push	{r4, r5, r6, lr}
    56b2:	4a23      	ldr	r2, [pc, #140]	; (5740 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    56b4:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    56b8:	2920      	cmp	r1, #32
    56ba:	d039      	beq.n	5730 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    56bc:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    56c0:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    56c4:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    56c8:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    56cc:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    56d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    56d4:	4411      	add	r1, r2
    56d6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    56da:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    56de:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    56e2:	2920      	cmp	r1, #32
    56e4:	d029      	beq.n	573a <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    56e6:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    56ea:	7e2d      	ldrb	r5, [r5, #24]
    56ec:	42a8      	cmp	r0, r5
    56ee:	bf3c      	itt	cc
    56f0:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    56f4:	7849      	ldrbcc	r1, [r1, #1]
    56f6:	d3f4      	bcc.n	56e2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    56f8:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    56fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    5700:	f8dc 5008 	ldr.w	r5, [ip, #8]
    5704:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    5708:	6814      	ldr	r4, [r2, #0]
    570a:	1828      	adds	r0, r5, r0
    570c:	f146 0200 	adc.w	r2, r6, #0
    5710:	ebb1 0c00 	subs.w	ip, r1, r0
    5714:	eb73 0202 	sbcs.w	r2, r3, r2
    5718:	d308      	bcc.n	572c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    571a:	1a08      	subs	r0, r1, r0
    571c:	f004 fb80 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5720:	f104 0167 	add.w	r1, r4, #103	; 0x67
    5724:	4281      	cmp	r1, r0
    5726:	bf9c      	itt	ls
    5728:	1b00      	subls	r0, r0, r4
    572a:	bd70      	popls	{r4, r5, r6, pc}
    572c:	2000      	movs	r0, #0
    572e:	bd70      	pop	{r4, r5, r6, pc}
    5730:	f640 3108 	movw	r1, #2824	; 0xb08
    5734:	2070      	movs	r0, #112	; 0x70
    5736:	f002 fae1 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    573a:	f04f 30ff 	mov.w	r0, #4294967295
    573e:	bd70      	pop	{r4, r5, r6, pc}
    5740:	20000b30 	.word	0x20000b30

00005744 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    5744:	490a      	ldr	r1, [pc, #40]	; (5770 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    5746:	b510      	push	{r4, lr}
    5748:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    574c:	f100 0408 	add.w	r4, r0, #8
    5750:	e9d4 0100 	ldrd	r0, r1, [r4]
    5754:	f001 f9c4 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5758:	89e3      	ldrh	r3, [r4, #14]
    575a:	2200      	movs	r2, #0
    575c:	18c3      	adds	r3, r0, r3
    575e:	7b20      	ldrb	r0, [r4, #12]
    5760:	4151      	adcs	r1, r2
    5762:	1818      	adds	r0, r3, r0
    5764:	4151      	adcs	r1, r2
    5766:	1c40      	adds	r0, r0, #1
    5768:	f141 0100 	adc.w	r1, r1, #0
    576c:	bd10      	pop	{r4, pc}
    576e:	0000      	.short	0x0000
    5770:	200006b0 	.word	0x200006b0

00005774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    5774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5776:	4d6f      	ldr	r5, [pc, #444]	; (5934 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    5778:	2600      	movs	r6, #0
    577a:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    577e:	2701      	movs	r7, #1
    5780:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    5784:	4b6c      	ldr	r3, [pc, #432]	; (5938 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    5786:	2808      	cmp	r0, #8
    5788:	d273      	bcs.n	5872 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    578a:	e8df f000 	tbb	[pc, r0]
    578e:	7804      	.short	0x7804
    5790:	47ceb3a0 	.word	0x47ceb3a0
    5794:	bdb8      	.short	0xbdb8
    5796:	43c8      	mvns	r0, r1
    5798:	ea70 0002 	orns	r0, r0, r2
    579c:	d105      	bne.n	57aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    579e:	f002 f92f 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    57a2:	f001 fcfb 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    57a6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    57aa:	8ae0      	ldrh	r0, [r4, #22]
    57ac:	b110      	cbz	r0, 57b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    57ae:	f002 fa2d 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    57b2:	b180      	cbz	r0, 57d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    57b4:	f7ff fcf2 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    57b8:	20ff      	movs	r0, #255	; 0xff
    57ba:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    57be:	6861      	ldr	r1, [r4, #4]
    57c0:	f1b1 3fff 	cmp.w	r1, #4294967295
    57c4:	d003      	beq.n	57ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    57c6:	2005      	movs	r0, #5
    57c8:	f001 fd0a 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    57cc:	b140      	cbz	r0, 57e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    57ce:	7e60      	ldrb	r0, [r4, #25]
    57d0:	2801      	cmp	r0, #1
    57d2:	d114      	bne.n	57fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    57d4:	e009      	b.n	57ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    57d6:	f640 012c 	movw	r1, #2092	; 0x82c
    57da:	2070      	movs	r0, #112	; 0x70
    57dc:	f002 fa8e 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    57e0:	f640 0131 	movw	r1, #2097	; 0x831
    57e4:	2070      	movs	r0, #112	; 0x70
    57e6:	f002 fa89 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    57ea:	68a2      	ldr	r2, [r4, #8]
    57ec:	6920      	ldr	r0, [r4, #16]
    57ee:	68e1      	ldr	r1, [r4, #12]
    57f0:	1810      	adds	r0, r2, r0
    57f2:	4171      	adcs	r1, r6
    57f4:	1e40      	subs	r0, r0, #1
    57f6:	f141 31ff 	adc.w	r1, r1, #4294967295
    57fa:	f001 fbcd 	bl	6f98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    57fe:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5802:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5806:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    580a:	6840      	ldr	r0, [r0, #4]
    580c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5810:	680a      	ldr	r2, [r1, #0]
    5812:	b001      	add	sp, #4
    5814:	2101      	movs	r1, #1
    5816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    581a:	4710      	bx	r2
    581c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    5820:	b160      	cbz	r0, 583c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    5822:	43c8      	mvns	r0, r1
    5824:	ea70 0002 	orns	r0, r0, r2
    5828:	d105      	bne.n	5836 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    582a:	f002 f8e9 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    582e:	f001 fcb5 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5832:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5836:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    583c:	f7ff fcae 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    5840:	f04f 30ff 	mov.w	r0, #4294967295
    5844:	6060      	str	r0, [r4, #4]
    5846:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    584a:	f88d 0000 	strb.w	r0, [sp]
    584e:	f89d 0000 	ldrb.w	r0, [sp]
    5852:	b178      	cbz	r0, 5874 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    5854:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5858:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    585c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5860:	6840      	ldr	r0, [r0, #4]
    5862:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5866:	680a      	ldr	r2, [r1, #0]
    5868:	b001      	add	sp, #4
    586a:	2106      	movs	r1, #6
    586c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5870:	4710      	bx	r2
    5872:	e05a      	b.n	592a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    5874:	f640 0148 	movw	r1, #2120	; 0x848
    5878:	2070      	movs	r0, #112	; 0x70
    587a:	f002 fa3f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    587e:	f7ff fc8d 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    5882:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    5886:	f002 f9c1 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    588a:	b130      	cbz	r0, 589a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    588c:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    5890:	43c9      	mvns	r1, r1
    5892:	ea71 0000 	orns	r0, r1, r0
    5896:	d005      	beq.n	58a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    5898:	e00a      	b.n	58b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    589a:	f640 0156 	movw	r1, #2134	; 0x856
    589e:	2070      	movs	r0, #112	; 0x70
    58a0:	f002 fa2c 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58a4:	f002 f8ac 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    58a8:	f001 fc78 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    58ac:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    58b0:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    58b4:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    58b8:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    58bc:	6840      	ldr	r0, [r0, #4]
    58be:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    58c2:	680a      	ldr	r2, [r1, #0]
    58c4:	b001      	add	sp, #4
    58c6:	2100      	movs	r1, #0
    58c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    58cc:	4710      	bx	r2
    58ce:	f001 fe7f 	bl	75d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    58d2:	8ae0      	ldrh	r0, [r4, #22]
    58d4:	b110      	cbz	r0, 58dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    58d6:	f002 f999 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    58da:	b130      	cbz	r0, 58ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    58dc:	f001 fe8c 	bl	75f8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    58e0:	2800      	cmp	r0, #0
    58e2:	bf18      	it	ne
    58e4:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    58e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58ea:	f44f 6106 	mov.w	r1, #2144	; 0x860
    58ee:	2070      	movs	r0, #112	; 0x70
    58f0:	f002 fa04 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58f4:	4811      	ldr	r0, [pc, #68]	; (593c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    58f6:	6007      	str	r7, [r0, #0]
    58f8:	6898      	ldr	r0, [r3, #8]
    58fa:	6007      	str	r7, [r0, #0]
    58fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58fe:	7818      	ldrb	r0, [r3, #0]
    5900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5904:	f002 bacc 	b.w	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5908:	f7ff fc48 	bl	519c <MPSL_IRQ_RADIO_Handler+0xbb4>
    590c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5910:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5914:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5918:	6840      	ldr	r0, [r0, #4]
    591a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    591e:	680a      	ldr	r2, [r1, #0]
    5920:	b001      	add	sp, #4
    5922:	2105      	movs	r1, #5
    5924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5928:	4710      	bx	r2
    592a:	f640 0173 	movw	r1, #2163	; 0x873
    592e:	2070      	movs	r0, #112	; 0x70
    5930:	f002 f9e4 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5934:	200006b0 	.word	0x200006b0
    5938:	20000120 	.word	0x20000120
    593c:	40000508 	.word	0x40000508

00005940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    5940:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5944:	48f7      	ldr	r0, [pc, #988]	; (5d24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    5946:	b097      	sub	sp, #92	; 0x5c
    5948:	460c      	mov	r4, r1
    594a:	6800      	ldr	r0, [r0, #0]
    594c:	4ff6      	ldr	r7, [pc, #984]	; (5d28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    594e:	05c0      	lsls	r0, r0, #23
    5950:	0dc0      	lsrs	r0, r0, #23
    5952:	d00e      	beq.n	5972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    5954:	3810      	subs	r0, #16
    5956:	b240      	sxtb	r0, r0
    5958:	2800      	cmp	r0, #0
    595a:	bfb8      	it	lt
    595c:	f000 000f 	andlt.w	r0, r0, #15
    5960:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5964:	bfac      	ite	ge
    5966:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    596a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    596e:	0940      	lsrs	r0, r0, #5
    5970:	d00c      	beq.n	598c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    5972:	7820      	ldrb	r0, [r4, #0]
    5974:	f04f 0a00 	mov.w	sl, #0
    5978:	2800      	cmp	r0, #0
    597a:	bf18      	it	ne
    597c:	2801      	cmpne	r0, #1
    597e:	d017      	beq.n	59b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    5980:	f240 61f9 	movw	r1, #1785	; 0x6f9
    5984:	f04f 0070 	mov.w	r0, #112	; 0x70
    5988:	f002 f9b8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    598c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5990:	f04f 0a01 	mov.w	sl, #1
    5994:	2820      	cmp	r0, #32
    5996:	d006      	beq.n	59a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    5998:	7820      	ldrb	r0, [r4, #0]
    599a:	b148      	cbz	r0, 59b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    599c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    59a0:	2070      	movs	r0, #112	; 0x70
    59a2:	f002 f9ab 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59a6:	f240 61f2 	movw	r1, #1778	; 0x6f2
    59aa:	2070      	movs	r0, #112	; 0x70
    59ac:	f002 f9a6 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59b0:	f8df b378 	ldr.w	fp, [pc, #888]	; 5d2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    59b4:	f1bb 0f00 	cmp.w	fp, #0
    59b8:	d004      	beq.n	59c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    59ba:	2100      	movs	r1, #0
    59bc:	f240 60fc 	movw	r0, #1788	; 0x6fc
    59c0:	f3af 8000 	nop.w
    59c4:	2000      	movs	r0, #0
    59c6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    59ca:	a905      	add	r1, sp, #20
    59cc:	9112      	str	r1, [sp, #72]	; 0x48
    59ce:	49d8      	ldr	r1, [pc, #864]	; (5d30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    59d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    59d2:	f04f 0801 	mov.w	r8, #1
    59d6:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    59da:	9001      	str	r0, [sp, #4]
    59dc:	f1bb 0f00 	cmp.w	fp, #0
    59e0:	d004      	beq.n	59ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    59e2:	2100      	movs	r1, #0
    59e4:	f240 7007 	movw	r0, #1799	; 0x707
    59e8:	f3af 8000 	nop.w
    59ec:	f1b8 0f00 	cmp.w	r8, #0
    59f0:	d009      	beq.n	5a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    59f2:	bf00      	nop
    59f4:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    59f8:	2500      	movs	r5, #0
    59fa:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    59fe:	f1ba 0f00 	cmp.w	sl, #0
    5a02:	d007      	beq.n	5a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    5a04:	e03e      	b.n	5a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    5a06:	48cb      	ldr	r0, [pc, #812]	; (5d34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    5a08:	2800      	cmp	r0, #0
    5a0a:	bf18      	it	ne
    5a0c:	f3af 8000 	nopne.w
    5a10:	b662      	cpsie	i
    5a12:	e7ef      	b.n	59f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    5a14:	46b1      	mov	r9, r6
    5a16:	2001      	movs	r0, #1
    5a18:	ea20 0609 	bic.w	r6, r0, r9
    5a1c:	48c6      	ldr	r0, [pc, #792]	; (5d38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5a1e:	2240      	movs	r2, #64	; 0x40
    5a20:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    5a24:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    5a28:	f004 fb8a 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a2c:	f1bb 0f00 	cmp.w	fp, #0
    5a30:	d004      	beq.n	5a3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    5a32:	2100      	movs	r1, #0
    5a34:	f240 503c 	movw	r0, #1340	; 0x53c
    5a38:	f3af 8000 	nop.w
    5a3c:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    5a40:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5a44:	4439      	add	r1, r7
    5a46:	4438      	add	r0, r7
    5a48:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    5a4a:	8502      	strh	r2, [r0, #40]	; 0x28
    5a4c:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5a50:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5a54:	f1bb 0f00 	cmp.w	fp, #0
    5a58:	d004      	beq.n	5a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    5a5a:	2100      	movs	r1, #0
    5a5c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5a60:	f3af 8000 	nop.w
    5a64:	f1bb 0f00 	cmp.w	fp, #0
    5a68:	d004      	beq.n	5a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    5a6a:	2100      	movs	r1, #0
    5a6c:	f240 7011 	movw	r0, #1809	; 0x711
    5a70:	f3af 8000 	nop.w
    5a74:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5a78:	f88d 0020 	strb.w	r0, [sp, #32]
    5a7c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5a80:	2800      	cmp	r0, #0
    5a82:	d1ab      	bne.n	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5a84:	f1bb 0f00 	cmp.w	fp, #0
    5a88:	d004      	beq.n	5a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    5a8a:	2100      	movs	r1, #0
    5a8c:	f240 701b 	movw	r0, #1819	; 0x71b
    5a90:	f3af 8000 	nop.w
    5a94:	f001 fb82 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5a98:	4681      	mov	r9, r0
    5a9a:	a802      	add	r0, sp, #8
    5a9c:	900a      	str	r0, [sp, #40]	; 0x28
    5a9e:	4688      	mov	r8, r1
    5aa0:	8921      	ldrh	r1, [r4, #8]
    5aa2:	4628      	mov	r0, r5
    5aa4:	f361 401f 	bfi	r0, r1, #16, #16
    5aa8:	4601      	mov	r1, r0
    5aaa:	7aa2      	ldrb	r2, [r4, #10]
    5aac:	4628      	mov	r0, r5
    5aae:	f362 0007 	bfi	r0, r2, #0, #8
    5ab2:	7ae2      	ldrb	r2, [r4, #11]
    5ab4:	f362 200f 	bfi	r0, r2, #8, #8
    5ab8:	7822      	ldrb	r2, [r4, #0]
    5aba:	9502      	str	r5, [sp, #8]
    5abc:	f362 4017 	bfi	r0, r2, #16, #8
    5ac0:	e9cd 5104 	strd	r5, r1, [sp, #16]
    5ac4:	e9cd 0506 	strd	r0, r5, [sp, #24]
    5ac8:	9503      	str	r5, [sp, #12]
    5aca:	7820      	ldrb	r0, [r4, #0]
    5acc:	b380      	cbz	r0, 5b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    5ace:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    5ad2:	499a      	ldr	r1, [pc, #616]	; (5d3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    5ad4:	1a08      	subs	r0, r1, r0
    5ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
    5ad8:	f101 020c 	add.w	r2, r1, #12
    5adc:	a914      	add	r1, sp, #80	; 0x50
    5ade:	f001 f87d 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5ae2:	2200      	movs	r2, #0
    5ae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ae8:	4648      	mov	r0, r9
    5aea:	4641      	mov	r1, r8
    5aec:	f7fe ff6e 	bl	49cc <MPSL_IRQ_RADIO_Handler+0x3e4>
    5af0:	468c      	mov	ip, r1
    5af2:	7ae1      	ldrb	r1, [r4, #11]
    5af4:	2900      	cmp	r1, #0
    5af6:	bf0c      	ite	eq
    5af8:	217a      	moveq	r1, #122	; 0x7a
    5afa:	214a      	movne	r1, #74	; 0x4a
    5afc:	6862      	ldr	r2, [r4, #4]
    5afe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5b02:	4411      	add	r1, r2
    5b04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b08:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    5b0c:	441a      	add	r2, r3
    5b0e:	4411      	add	r1, r2
    5b10:	1c88      	adds	r0, r1, #2
    5b12:	f001 f847 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5b16:	9600      	str	r6, [sp, #0]
    5b18:	9004      	str	r0, [sp, #16]
    5b1a:	464a      	mov	r2, r9
    5b1c:	4643      	mov	r3, r8
    5b1e:	6920      	ldr	r0, [r4, #16]
    5b20:	990a      	ldr	r1, [sp, #40]	; 0x28
    5b22:	f7fe fdbb 	bl	469c <MPSL_IRQ_RADIO_Handler+0xb4>
    5b26:	2800      	cmp	r0, #0
    5b28:	bf08      	it	eq
    5b2a:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    5b2e:	e046      	b.n	5bbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    5b30:	e7ff      	b.n	5b32 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    5b32:	4648      	mov	r0, r9
    5b34:	4641      	mov	r1, r8
    5b36:	f000 ffd3 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5b3a:	f8df c204 	ldr.w	ip, [pc, #516]	; 5d40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    5b3e:	4602      	mov	r2, r0
    5b40:	eb10 0c0c 	adds.w	ip, r0, ip
    5b44:	460b      	mov	r3, r1
    5b46:	f141 0e00 	adc.w	lr, r1, #0
    5b4a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5b4e:	ebb0 0c0c 	subs.w	ip, r0, ip
    5b52:	eb71 0c0e 	sbcs.w	ip, r1, lr
    5b56:	d229      	bcs.n	5bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b58:	3229      	adds	r2, #41	; 0x29
    5b5a:	f143 0300 	adc.w	r3, r3, #0
    5b5e:	1a82      	subs	r2, r0, r2
    5b60:	eb71 0203 	sbcs.w	r2, r1, r3
    5b64:	d322      	bcc.n	5bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b66:	8922      	ldrh	r2, [r4, #8]
    5b68:	ab0a      	add	r3, sp, #40	; 0x28
    5b6a:	1a80      	subs	r0, r0, r2
    5b6c:	eb61 0105 	sbc.w	r1, r1, r5
    5b70:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5b72:	1e40      	subs	r0, r0, #1
    5b74:	9200      	str	r2, [sp, #0]
    5b76:	f141 31ff 	adc.w	r1, r1, #4294967295
    5b7a:	aa0d      	add	r2, sp, #52	; 0x34
    5b7c:	f000 ffd4 	bl	6b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5b80:	7ae0      	ldrb	r0, [r4, #11]
    5b82:	2800      	cmp	r0, #0
    5b84:	bf0c      	ite	eq
    5b86:	207a      	moveq	r0, #122	; 0x7a
    5b88:	204a      	movne	r0, #74	; 0x4a
    5b8a:	990d      	ldr	r1, [sp, #52]	; 0x34
    5b8c:	8922      	ldrh	r2, [r4, #8]
    5b8e:	4408      	add	r0, r1
    5b90:	6861      	ldr	r1, [r4, #4]
    5b92:	4411      	add	r1, r2
    5b94:	4408      	add	r0, r1
    5b96:	1c80      	adds	r0, r0, #2
    5b98:	f001 f804 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5b9c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    5ba0:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5ba4:	1a40      	subs	r0, r0, r1
    5ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5baa:	e007      	b.n	5bbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    5bac:	f1b9 0101 	subs.w	r1, r9, #1
    5bb0:	f148 30ff 	adc.w	r0, r8, #4294967295
    5bb4:	e9cd 1002 	strd	r1, r0, [sp, #8]
    5bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5bbc:	9004      	str	r0, [sp, #16]
    5bbe:	f1bb 0f00 	cmp.w	fp, #0
    5bc2:	d004      	beq.n	5bce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    5bc4:	2100      	movs	r1, #0
    5bc6:	f240 7022 	movw	r0, #1826	; 0x722
    5bca:	f3af 8000 	nop.w
    5bce:	495a      	ldr	r1, [pc, #360]	; (5d38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5bd0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    5bd4:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    5bd8:	9108      	str	r1, [sp, #32]
    5bda:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    5bde:	a802      	add	r0, sp, #8
    5be0:	2901      	cmp	r1, #1
    5be2:	bf18      	it	ne
    5be4:	2902      	cmpne	r1, #2
    5be6:	d141      	bne.n	5c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5be8:	9511      	str	r5, [sp, #68]	; 0x44
    5bea:	9a02      	ldr	r2, [sp, #8]
    5bec:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    5bf0:	1a53      	subs	r3, r2, r1
    5bf2:	f8dd c010 	ldr.w	ip, [sp, #16]
    5bf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5bfa:	eb12 020c 	adds.w	r2, r2, ip
    5bfe:	1a51      	subs	r1, r2, r1
    5c00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5c04:	2b02      	cmp	r3, #2
    5c06:	d374      	bcc.n	5cf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5c0c:	bf98      	it	ls
    5c0e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5c12:	d86e      	bhi.n	5cf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5c14:	2501      	movs	r5, #1
    5c16:	ab14      	add	r3, sp, #80	; 0x50
    5c18:	aa0e      	add	r2, sp, #56	; 0x38
    5c1a:	4631      	mov	r1, r6
    5c1c:	f7fe ff26 	bl	4a6c <MPSL_IRQ_RADIO_Handler+0x484>
    5c20:	2800      	cmp	r0, #0
    5c22:	d06d      	beq.n	5d00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    5c24:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5c28:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    5c2c:	4633      	mov	r3, r6
    5c2e:	428a      	cmp	r2, r1
    5c30:	d06a      	beq.n	5d08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    5c32:	2005      	movs	r0, #5
    5c34:	f7fe fcf6 	bl	4624 <MPSL_IRQ_RADIO_Handler+0x3c>
    5c38:	9908      	ldr	r1, [sp, #32]
    5c3a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    5c3e:	7048      	strb	r0, [r1, #1]
    5c40:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5c44:	2820      	cmp	r0, #32
    5c46:	bf01      	itttt	eq
    5c48:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5c4c:	4438      	addeq	r0, r7
    5c4e:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    5c52:	9511      	streq	r5, [sp, #68]	; 0x44
    5c54:	bf1e      	ittt	ne
    5c56:	9908      	ldrne	r1, [sp, #32]
    5c58:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    5c5c:	f880 8001 	strbne.w	r8, [r0, #1]
    5c60:	4632      	mov	r2, r6
    5c62:	4641      	mov	r1, r8
    5c64:	f05f 0003 	movs.w	r0, #3
    5c68:	f7ff fb44 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5c6c:	f1bb 0f00 	cmp.w	fp, #0
    5c70:	d004      	beq.n	5c7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    5c72:	2100      	movs	r1, #0
    5c74:	f240 7027 	movw	r0, #1831	; 0x727
    5c78:	f3af 8000 	nop.w
    5c7c:	4831      	ldr	r0, [pc, #196]	; (5d44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    5c7e:	2800      	cmp	r0, #0
    5c80:	bf18      	it	ne
    5c82:	f3af 8000 	nopne.w
    5c86:	f3ef 8810 	mrs	r8, PRIMASK
    5c8a:	b672      	cpsid	i
    5c8c:	f1bb 0f00 	cmp.w	fp, #0
    5c90:	d004      	beq.n	5c9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    5c92:	2100      	movs	r1, #0
    5c94:	f240 702d 	movw	r0, #1837	; 0x72d
    5c98:	f3af 8000 	nop.w
    5c9c:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5ca0:	f88d 0020 	strb.w	r0, [sp, #32]
    5ca4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5ca8:	2800      	cmp	r0, #0
    5caa:	f47f ae97 	bne.w	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5cae:	f1bb 0f00 	cmp.w	fp, #0
    5cb2:	d004      	beq.n	5cbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    5cb4:	2100      	movs	r1, #0
    5cb6:	f240 7035 	movw	r0, #1845	; 0x735
    5cba:	f3af 8000 	nop.w
    5cbe:	f10d 0e04 	add.w	lr, sp, #4
    5cc2:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    5cc6:	f100 0e08 	add.w	lr, r0, #8
    5cca:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    5cce:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    5cd2:	e9c0 1206 	strd	r1, r2, [r0, #24]
    5cd6:	b325      	cbz	r5, 5d22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    5cd8:	f1bb 0f00 	cmp.w	fp, #0
    5cdc:	d004      	beq.n	5ce8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    5cde:	2100      	movs	r1, #0
    5ce0:	f240 7042 	movw	r0, #1858	; 0x742
    5ce4:	f3af 8000 	nop.w
    5ce8:	f1ba 0f00 	cmp.w	sl, #0
    5cec:	d146      	bne.n	5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5cee:	e02b      	b.n	5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    5cf0:	e7ff      	b.n	5cf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5cf2:	4632      	mov	r2, r6
    5cf4:	4641      	mov	r1, r8
    5cf6:	2004      	movs	r0, #4
    5cf8:	f7ff fafc 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5cfc:	2501      	movs	r5, #1
    5cfe:	e7b5      	b.n	5c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5d00:	4632      	mov	r2, r6
    5d02:	4641      	mov	r1, r8
    5d04:	2004      	movs	r0, #4
    5d06:	e7af      	b.n	5c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    5d08:	2920      	cmp	r1, #32
    5d0a:	bf1d      	ittte	ne
    5d0c:	9808      	ldrne	r0, [sp, #32]
    5d0e:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    5d12:	7840      	ldrbne	r0, [r0, #1]
    5d14:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5d18:	bf04      	itt	eq
    5d1a:	4438      	addeq	r0, r7
    5d1c:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    5d20:	e78a      	b.n	5c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    5d22:	e03b      	b.n	5d9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5d24:	e000ed04 	.word	0xe000ed04
    5d28:	20000b30 	.word	0x20000b30
    5d2c:	00000000 	.word	0x00000000
    5d30:	200006b0 	.word	0x200006b0
    5d34:	00000000 	.word	0x00000000
    5d38:	20000ab0 	.word	0x20000ab0
    5d3c:	1e847fff 	.word	0x1e847fff
    5d40:	0f424000 	.word	0x0f424000
    5d44:	00000000 	.word	0x00000000
    5d48:	9811      	ldr	r0, [sp, #68]	; 0x44
    5d4a:	f010 0fff 	tst.w	r0, #255	; 0xff
    5d4e:	d015      	beq.n	5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d50:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5d54:	2820      	cmp	r0, #32
    5d56:	d111      	bne.n	5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d58:	f1bb 0f00 	cmp.w	fp, #0
    5d5c:	d004      	beq.n	5d68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    5d5e:	2100      	movs	r1, #0
    5d60:	f240 7047 	movw	r0, #1863	; 0x747
    5d64:	f3af 8000 	nop.w
    5d68:	4631      	mov	r1, r6
    5d6a:	2002      	movs	r0, #2
    5d6c:	f7ff faf4 	bl	5358 <MPSL_IRQ_RADIO_Handler+0xd70>
    5d70:	9010      	str	r0, [sp, #64]	; 0x40
    5d72:	b918      	cbnz	r0, 5d7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d74:	7820      	ldrb	r0, [r4, #0]
    5d76:	b300      	cbz	r0, 5dba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    5d78:	2801      	cmp	r0, #1
    5d7a:	d02e      	beq.n	5dda <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    5d7c:	f1bb 0f00 	cmp.w	fp, #0
    5d80:	d004      	beq.n	5d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    5d82:	2100      	movs	r1, #0
    5d84:	f240 7064 	movw	r0, #1892	; 0x764
    5d88:	f3af 8000 	nop.w
    5d8c:	20ff      	movs	r0, #255	; 0xff
    5d8e:	f1ba 0f00 	cmp.w	sl, #0
    5d92:	bf18      	it	ne
    5d94:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    5d98:	d029      	beq.n	5dee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    5d9a:	2501      	movs	r5, #1
    5d9c:	f1bb 0f00 	cmp.w	fp, #0
    5da0:	d004      	beq.n	5dac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    5da2:	2100      	movs	r1, #0
    5da4:	f240 7075 	movw	r0, #1909	; 0x775
    5da8:	f3af 8000 	nop.w
    5dac:	9810      	ldr	r0, [sp, #64]	; 0x40
    5dae:	4c34      	ldr	r4, [pc, #208]	; (5e80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    5db0:	2802      	cmp	r0, #2
    5db2:	d025      	beq.n	5e00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    5db4:	2801      	cmp	r0, #1
    5db6:	d02b      	beq.n	5e10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    5db8:	e02f      	b.n	5e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5dba:	f1bb 0f00 	cmp.w	fp, #0
    5dbe:	d004      	beq.n	5dca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    5dc0:	2100      	movs	r1, #0
    5dc2:	f240 704f 	movw	r0, #1871	; 0x74f
    5dc6:	f3af 8000 	nop.w
    5dca:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5dce:	2004      	movs	r0, #4
    5dd0:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5dd2:	f7ff fa8f 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5dd6:	2501      	movs	r5, #1
    5dd8:	e7e0      	b.n	5d9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5dda:	f1bb 0f00 	cmp.w	fp, #0
    5dde:	f43f adfd 	beq.w	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5de2:	2100      	movs	r1, #0
    5de4:	f240 705a 	movw	r0, #1882	; 0x75a
    5de8:	f3af 8000 	nop.w
    5dec:	e5f6      	b.n	59dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5dee:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5df2:	2101      	movs	r1, #1
    5df4:	4391      	bics	r1, r2
    5df6:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    5dfa:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    5dfe:	e7cc      	b.n	5d9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    5e00:	68b8      	ldr	r0, [r7, #8]
    5e02:	ebb0 0009 	subs.w	r0, r0, r9
    5e06:	f004 f80b 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5e0a:	6861      	ldr	r1, [r4, #4]
    5e0c:	b921      	cbnz	r1, 5e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    5e0e:	e004      	b.n	5e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5e10:	6861      	ldr	r1, [r4, #4]
    5e12:	f04f 30ff 	mov.w	r0, #4294967295
    5e16:	b101      	cbz	r1, 5e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5e18:	4788      	blx	r1
    5e1a:	f1b8 0f00 	cmp.w	r8, #0
    5e1e:	d028      	beq.n	5e72 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    5e20:	f1bb 0f00 	cmp.w	fp, #0
    5e24:	d004      	beq.n	5e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    5e26:	2100      	movs	r1, #0
    5e28:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    5e2c:	f3af 8000 	nop.w
    5e30:	b19d      	cbz	r5, 5e5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e32:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    5e36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e3a:	4438      	add	r0, r7
    5e3c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    5e40:	2820      	cmp	r0, #32
    5e42:	d00a      	beq.n	5e5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e44:	f1bb 0f00 	cmp.w	fp, #0
    5e48:	d004      	beq.n	5e54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    5e4a:	2100      	movs	r1, #0
    5e4c:	f240 708f 	movw	r0, #1935	; 0x78f
    5e50:	f3af 8000 	nop.w
    5e54:	7860      	ldrb	r0, [r4, #1]
    5e56:	f002 f823 	bl	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5e5a:	f1bb 0f00 	cmp.w	fp, #0
    5e5e:	d004      	beq.n	5e6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    5e60:	2100      	movs	r1, #0
    5e62:	f240 7094 	movw	r0, #1940	; 0x794
    5e66:	f3af 8000 	nop.w
    5e6a:	b019      	add	sp, #100	; 0x64
    5e6c:	4628      	mov	r0, r5
    5e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e72:	4804      	ldr	r0, [pc, #16]	; (5e84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    5e74:	2800      	cmp	r0, #0
    5e76:	bf18      	it	ne
    5e78:	f3af 8000 	nopne.w
    5e7c:	b662      	cpsie	i
    5e7e:	e7cf      	b.n	5e20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    5e80:	20000120 	.word	0x20000120
    5e84:	00000000 	.word	0x00000000

00005e88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    5e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e8c:	4604      	mov	r4, r0
    5e8e:	7800      	ldrb	r0, [r0, #0]
    5e90:	b095      	sub	sp, #84	; 0x54
    5e92:	b118      	cbz	r0, 5e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    5e94:	b015      	add	sp, #84	; 0x54
    5e96:	2000      	movs	r0, #0
    5e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e9c:	48d1      	ldr	r0, [pc, #836]	; (61e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    5e9e:	6800      	ldr	r0, [r0, #0]
    5ea0:	05c0      	lsls	r0, r0, #23
    5ea2:	0dc0      	lsrs	r0, r0, #23
    5ea4:	d00e      	beq.n	5ec4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    5ea6:	3810      	subs	r0, #16
    5ea8:	b240      	sxtb	r0, r0
    5eaa:	2800      	cmp	r0, #0
    5eac:	bfb8      	it	lt
    5eae:	f000 000f 	andlt.w	r0, r0, #15
    5eb2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5eb6:	bfac      	ite	ge
    5eb8:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    5ebc:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    5ec0:	0940      	lsrs	r0, r0, #5
    5ec2:	d0e7      	beq.n	5e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    5ec4:	a80d      	add	r0, sp, #52	; 0x34
    5ec6:	f8df 9320 	ldr.w	r9, [pc, #800]	; 61e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    5eca:	9009      	str	r0, [sp, #36]	; 0x24
    5ecc:	f1b9 0f00 	cmp.w	r9, #0
    5ed0:	d004      	beq.n	5edc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    5ed2:	2100      	movs	r1, #0
    5ed4:	f240 50c5 	movw	r0, #1477	; 0x5c5
    5ed8:	f3af 8000 	nop.w
    5edc:	f8df 830c 	ldr.w	r8, [pc, #780]	; 61ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    5ee0:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    5ee4:	2500      	movs	r5, #0
    5ee6:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    5eea:	9503      	str	r5, [sp, #12]
    5eec:	f1b9 0f00 	cmp.w	r9, #0
    5ef0:	d004      	beq.n	5efc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    5ef2:	2100      	movs	r1, #0
    5ef4:	f240 50ca 	movw	r0, #1482	; 0x5ca
    5ef8:	f3af 8000 	nop.w
    5efc:	2001      	movs	r0, #1
    5efe:	ea20 0a06 	bic.w	sl, r0, r6
    5f02:	48bb      	ldr	r0, [pc, #748]	; (61f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    5f04:	2240      	movs	r2, #64	; 0x40
    5f06:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    5f0a:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    5f0e:	f004 f917 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f12:	f1b9 0f00 	cmp.w	r9, #0
    5f16:	d004      	beq.n	5f22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    5f18:	2100      	movs	r1, #0
    5f1a:	f240 503c 	movw	r0, #1340	; 0x53c
    5f1e:	f3af 8000 	nop.w
    5f22:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5f26:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    5f2a:	eb01 0208 	add.w	r2, r1, r8
    5f2e:	4440      	add	r0, r8
    5f30:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    5f32:	8501      	strh	r1, [r0, #40]	; 0x28
    5f34:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    5f38:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5f3c:	f1b9 0f00 	cmp.w	r9, #0
    5f40:	d004      	beq.n	5f4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    5f42:	2100      	movs	r1, #0
    5f44:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5f48:	f3af 8000 	nop.w
    5f4c:	f1b9 0f00 	cmp.w	r9, #0
    5f50:	d004      	beq.n	5f5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    5f52:	2100      	movs	r1, #0
    5f54:	f240 50cf 	movw	r0, #1487	; 0x5cf
    5f58:	f3af 8000 	nop.w
    5f5c:	f001 f91e 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f60:	460f      	mov	r7, r1
    5f62:	4606      	mov	r6, r0
    5f64:	8921      	ldrh	r1, [r4, #8]
    5f66:	4628      	mov	r0, r5
    5f68:	f361 401f 	bfi	r0, r1, #16, #16
    5f6c:	4601      	mov	r1, r0
    5f6e:	7aa2      	ldrb	r2, [r4, #10]
    5f70:	4628      	mov	r0, r5
    5f72:	f362 0007 	bfi	r0, r2, #0, #8
    5f76:	7ae2      	ldrb	r2, [r4, #11]
    5f78:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    5f7c:	f362 200f 	bfi	r0, r2, #8, #8
    5f80:	7822      	ldrb	r2, [r4, #0]
    5f82:	950a      	str	r5, [sp, #40]	; 0x28
    5f84:	f362 4017 	bfi	r0, r2, #16, #8
    5f88:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    5f8c:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    5f90:	950b      	str	r5, [sp, #44]	; 0x2c
    5f92:	7820      	ldrb	r0, [r4, #0]
    5f94:	b388      	cbz	r0, 5ffa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    5f96:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5f9a:	4896      	ldr	r0, [pc, #600]	; (61f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    5f9c:	f10b 020c 	add.w	r2, fp, #12
    5fa0:	1a40      	subs	r0, r0, r1
    5fa2:	a911      	add	r1, sp, #68	; 0x44
    5fa4:	f000 fe1a 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5fa8:	2200      	movs	r2, #0
    5faa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    5fae:	4630      	mov	r0, r6
    5fb0:	4639      	mov	r1, r7
    5fb2:	f7fe fd0b 	bl	49cc <MPSL_IRQ_RADIO_Handler+0x3e4>
    5fb6:	4684      	mov	ip, r0
    5fb8:	7ae0      	ldrb	r0, [r4, #11]
    5fba:	460b      	mov	r3, r1
    5fbc:	2800      	cmp	r0, #0
    5fbe:	bf0c      	ite	eq
    5fc0:	207a      	moveq	r0, #122	; 0x7a
    5fc2:	204a      	movne	r0, #74	; 0x4a
    5fc4:	6861      	ldr	r1, [r4, #4]
    5fc6:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    5fca:	4408      	add	r0, r1
    5fcc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5fd0:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    5fd4:	4411      	add	r1, r2
    5fd6:	4408      	add	r0, r1
    5fd8:	1c80      	adds	r0, r0, #2
    5fda:	f000 fde3 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5fde:	f8cd a000 	str.w	sl, [sp]
    5fe2:	900c      	str	r0, [sp, #48]	; 0x30
    5fe4:	4632      	mov	r2, r6
    5fe6:	463b      	mov	r3, r7
    5fe8:	4659      	mov	r1, fp
    5fea:	6920      	ldr	r0, [r4, #16]
    5fec:	f7fe fb56 	bl	469c <MPSL_IRQ_RADIO_Handler+0xb4>
    5ff0:	2800      	cmp	r0, #0
    5ff2:	bf08      	it	eq
    5ff4:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    5ff8:	e045      	b.n	6086 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    5ffa:	e7ff      	b.n	5ffc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    5ffc:	4630      	mov	r0, r6
    5ffe:	4639      	mov	r1, r7
    6000:	f000 fd6e 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6004:	4b7c      	ldr	r3, [pc, #496]	; (61f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    6006:	4602      	mov	r2, r0
    6008:	eb10 0c03 	adds.w	ip, r0, r3
    600c:	468b      	mov	fp, r1
    600e:	f141 0300 	adc.w	r3, r1, #0
    6012:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6016:	ebb0 0c0c 	subs.w	ip, r0, ip
    601a:	eb71 0303 	sbcs.w	r3, r1, r3
    601e:	d22a      	bcs.n	6076 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    6020:	3229      	adds	r2, #41	; 0x29
    6022:	f14b 0300 	adc.w	r3, fp, #0
    6026:	1a82      	subs	r2, r0, r2
    6028:	eb71 0203 	sbcs.w	r2, r1, r3
    602c:	d323      	bcc.n	6076 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    602e:	8922      	ldrh	r2, [r4, #8]
    6030:	ab12      	add	r3, sp, #72	; 0x48
    6032:	1a80      	subs	r0, r0, r2
    6034:	eb61 0105 	sbc.w	r1, r1, r5
    6038:	9a09      	ldr	r2, [sp, #36]	; 0x24
    603a:	1e40      	subs	r0, r0, #1
    603c:	9200      	str	r2, [sp, #0]
    603e:	f141 31ff 	adc.w	r1, r1, #4294967295
    6042:	aa07      	add	r2, sp, #28
    6044:	f000 fd70 	bl	6b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    6048:	7ae0      	ldrb	r0, [r4, #11]
    604a:	2800      	cmp	r0, #0
    604c:	bf0c      	ite	eq
    604e:	207a      	moveq	r0, #122	; 0x7a
    6050:	204a      	movne	r0, #74	; 0x4a
    6052:	9907      	ldr	r1, [sp, #28]
    6054:	8922      	ldrh	r2, [r4, #8]
    6056:	4408      	add	r0, r1
    6058:	6861      	ldr	r1, [r4, #4]
    605a:	4411      	add	r1, r2
    605c:	4408      	add	r0, r1
    605e:	1c80      	adds	r0, r0, #2
    6060:	f000 fda0 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6064:	4601      	mov	r1, r0
    6066:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    606a:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    606e:	1a08      	subs	r0, r1, r0
    6070:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6074:	e006      	b.n	6084 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    6076:	1e70      	subs	r0, r6, #1
    6078:	f147 31ff 	adc.w	r1, r7, #4294967295
    607c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    6080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6084:	900c      	str	r0, [sp, #48]	; 0x30
    6086:	f1b9 0f00 	cmp.w	r9, #0
    608a:	d004      	beq.n	6096 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    608c:	2100      	movs	r1, #0
    608e:	f240 50d5 	movw	r0, #1493	; 0x5d5
    6092:	f3af 8000 	nop.w
    6096:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    609a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    609e:	1808      	adds	r0, r1, r0
    60a0:	eb42 0105 	adc.w	r1, r2, r5
    60a4:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    60a8:	2a20      	cmp	r2, #32
    60aa:	d009      	beq.n	60c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    60ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    60b0:	1a12      	subs	r2, r2, r0
    60b2:	eb73 0201 	sbcs.w	r2, r3, r1
    60b6:	d203      	bcs.n	60c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    60b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    60bc:	2001      	movs	r0, #1
    60be:	9003      	str	r0, [sp, #12]
    60c0:	f1b9 0f00 	cmp.w	r9, #0
    60c4:	d004      	beq.n	60d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    60c6:	2100      	movs	r1, #0
    60c8:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    60cc:	f3af 8000 	nop.w
    60d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    60d2:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    60d6:	1a0a      	subs	r2, r1, r0
    60d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    60de:	18c9      	adds	r1, r1, r3
    60e0:	1a08      	subs	r0, r1, r0
    60e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    60e6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    60ea:	bf98      	it	ls
    60ec:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    60f0:	d80b      	bhi.n	610a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    60f2:	4632      	mov	r2, r6
    60f4:	463b      	mov	r3, r7
    60f6:	a90a      	add	r1, sp, #40	; 0x28
    60f8:	483f      	ldr	r0, [pc, #252]	; (61f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    60fa:	f8cd a000 	str.w	sl, [sp]
    60fe:	f7fe facd 	bl	469c <MPSL_IRQ_RADIO_Handler+0xb4>
    6102:	9903      	ldr	r1, [sp, #12]
    6104:	4308      	orrs	r0, r1
    6106:	d145      	bne.n	6194 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    6108:	e05f      	b.n	61ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    610a:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    610e:	aa05      	add	r2, sp, #20
    6110:	a903      	add	r1, sp, #12
    6112:	4658      	mov	r0, fp
    6114:	f000 fd62 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6118:	f001 fa78 	bl	760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    611c:	f000 fd42 	bl	6ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6120:	4682      	mov	sl, r0
    6122:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    6126:	2820      	cmp	r0, #32
    6128:	d00a      	beq.n	6140 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    612a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    612e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6132:	1d80      	adds	r0, r0, #6
    6134:	f145 0100 	adc.w	r1, r5, #0
    6138:	181e      	adds	r6, r3, r0
    613a:	eb42 0701 	adc.w	r7, r2, r1
    613e:	e024      	b.n	618a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    6140:	360a      	adds	r6, #10
    6142:	f147 0700 	adc.w	r7, r7, #0
    6146:	f1bb 0f00 	cmp.w	fp, #0
    614a:	d017      	beq.n	617c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    614c:	f001 fd5e 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6150:	b9a0      	cbnz	r0, 617c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    6152:	f001 fc33 	bl	79bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6156:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    615a:	bf08      	it	eq
    615c:	200d      	moveq	r0, #13
    615e:	d00b      	beq.n	6178 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    6160:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6164:	3856      	subs	r0, #86	; 0x56
    6166:	bf08      	it	eq
    6168:	201c      	moveq	r0, #28
    616a:	d005      	beq.n	6178 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    616c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6170:	389f      	subs	r0, #159	; 0x9f
    6172:	bf14      	ite	ne
    6174:	4628      	movne	r0, r5
    6176:	2032      	moveq	r0, #50	; 0x32
    6178:	1986      	adds	r6, r0, r6
    617a:	416f      	adcs	r7, r5
    617c:	9803      	ldr	r0, [sp, #12]
    617e:	4582      	cmp	sl, r0
    6180:	d903      	bls.n	618a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    6182:	ebaa 0000 	sub.w	r0, sl, r0
    6186:	1986      	adds	r6, r0, r6
    6188:	416f      	adcs	r7, r5
    618a:	201f      	movs	r0, #31
    618c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    6190:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    6194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6198:	f000 fca2 	bl	6ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    619c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    61a0:	1880      	adds	r0, r0, r2
    61a2:	eb41 0205 	adc.w	r2, r1, r5
    61a6:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    61aa:	1840      	adds	r0, r0, r1
    61ac:	eb42 0105 	adc.w	r1, r2, r5
    61b0:	1c40      	adds	r0, r0, #1
    61b2:	f141 0100 	adc.w	r1, r1, #0
    61b6:	f1b9 0f00 	cmp.w	r9, #0
    61ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
    61be:	d004      	beq.n	61ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    61c0:	2100      	movs	r1, #0
    61c2:	f240 50fa 	movw	r0, #1530	; 0x5fa
    61c6:	f3af 8000 	nop.w
    61ca:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    61ce:	f88d 0000 	strb.w	r0, [sp]
    61d2:	f89d 0000 	ldrb.w	r0, [sp]
    61d6:	2800      	cmp	r0, #0
    61d8:	f47f ae78 	bne.w	5ecc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    61dc:	b015      	add	sp, #84	; 0x54
    61de:	2001      	movs	r0, #1
    61e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61e4:	e000ed04 	.word	0xe000ed04
    61e8:	00000000 	.word	0x00000000
    61ec:	20000b30 	.word	0x20000b30
    61f0:	20000ab0 	.word	0x20000ab0
    61f4:	1e847fff 	.word	0x1e847fff
    61f8:	0f424000 	.word	0x0f424000

000061fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    61fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6200:	4d9d      	ldr	r5, [pc, #628]	; (6478 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    6202:	b08c      	sub	sp, #48	; 0x30
    6204:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    6208:	2000      	movs	r0, #0
    620a:	9007      	str	r0, [sp, #28]
    620c:	9008      	str	r0, [sp, #32]
    620e:	2001      	movs	r0, #1
    6210:	4c9a      	ldr	r4, [pc, #616]	; (647c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    6212:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    6216:	f04f 0800 	mov.w	r8, #0
    621a:	4607      	mov	r7, r0
    621c:	9006      	str	r0, [sp, #24]
    621e:	b124      	cbz	r4, 622a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    6220:	2100      	movs	r1, #0
    6222:	f240 70a5 	movw	r0, #1957	; 0x7a5
    6226:	f3af 8000 	nop.w
    622a:	9806      	ldr	r0, [sp, #24]
    622c:	2800      	cmp	r0, #0
    622e:	d03c      	beq.n	62aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    6230:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    6234:	b124      	cbz	r4, 6240 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    6236:	2100      	movs	r1, #0
    6238:	f240 70aa 	movw	r0, #1962	; 0x7aa
    623c:	f3af 8000 	nop.w
    6240:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    6244:	2240      	movs	r2, #64	; 0x40
    6246:	ea27 060a 	bic.w	r6, r7, sl
    624a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    624e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    6252:	4683      	mov	fp, r0
    6254:	f003 ff74 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6258:	b124      	cbz	r4, 6264 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    625a:	2100      	movs	r1, #0
    625c:	f240 503c 	movw	r0, #1340	; 0x53c
    6260:	f3af 8000 	nop.w
    6264:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    6268:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    626c:	4428      	add	r0, r5
    626e:	4429      	add	r1, r5
    6270:	9000      	str	r0, [sp, #0]
    6272:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    6274:	8502      	strh	r2, [r0, #40]	; 0x28
    6276:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    627a:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    627e:	b124      	cbz	r4, 628a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    6280:	2100      	movs	r1, #0
    6282:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    6286:	f3af 8000 	nop.w
    628a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    628e:	f88d 0008 	strb.w	r0, [sp, #8]
    6292:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6296:	b178      	cbz	r0, 62b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    6298:	2c00      	cmp	r4, #0
    629a:	bf1c      	itt	ne
    629c:	2100      	movne	r1, #0
    629e:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    62a2:	d0bc      	beq.n	621e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    62a4:	f3af 8000 	nop.w
    62a8:	e7b9      	b.n	621e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    62aa:	4875      	ldr	r0, [pc, #468]	; (6480 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    62ac:	2800      	cmp	r0, #0
    62ae:	bf18      	it	ne
    62b0:	f3af 8000 	nopne.w
    62b4:	b662      	cpsie	i
    62b6:	e7bb      	b.n	6230 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    62b8:	b124      	cbz	r4, 62c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    62ba:	2100      	movs	r1, #0
    62bc:	f240 70b4 	movw	r0, #1972	; 0x7b4
    62c0:	f3af 8000 	nop.w
    62c4:	980c      	ldr	r0, [sp, #48]	; 0x30
    62c6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    62ca:	2803      	cmp	r0, #3
    62cc:	d17e      	bne.n	63cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    62ce:	9a00      	ldr	r2, [sp, #0]
    62d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    62d2:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    62d6:	4288      	cmp	r0, r1
    62d8:	bf14      	ite	ne
    62da:	f04f 0a00 	movne.w	sl, #0
    62de:	f04f 0a01 	moveq.w	sl, #1
    62e2:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    62e6:	4683      	mov	fp, r0
    62e8:	2220      	movs	r2, #32
    62ea:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    62ee:	e003      	b.n	62f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    62f0:	4602      	mov	r2, r0
    62f2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    62f6:	7840      	ldrb	r0, [r0, #1]
    62f8:	4288      	cmp	r0, r1
    62fa:	d002      	beq.n	6302 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    62fc:	2820      	cmp	r0, #32
    62fe:	d00a      	beq.n	6316 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6300:	e7f6      	b.n	62f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    6302:	2820      	cmp	r0, #32
    6304:	d007      	beq.n	6316 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6306:	4583      	cmp	fp, r0
    6308:	d107      	bne.n	631a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    630a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    630e:	7840      	ldrb	r0, [r0, #1]
    6310:	f88c 0000 	strb.w	r0, [ip]
    6314:	e007      	b.n	6326 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    6316:	4640      	mov	r0, r8
    6318:	e00c      	b.n	6334 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    631a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    631e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    6322:	7840      	ldrb	r0, [r0, #1]
    6324:	7048      	strb	r0, [r1, #1]
    6326:	b124      	cbz	r4, 6332 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    6328:	2100      	movs	r1, #0
    632a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    632e:	f3af 8000 	nop.w
    6332:	4638      	mov	r0, r7
    6334:	46c3      	mov	fp, r8
    6336:	ea10 0f0a 	tst.w	r0, sl
    633a:	bf18      	it	ne
    633c:	46bb      	movne	fp, r7
    633e:	2800      	cmp	r0, #0
    6340:	d04e      	beq.n	63e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    6342:	b124      	cbz	r4, 634e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    6344:	2100      	movs	r1, #0
    6346:	f240 70b9 	movw	r0, #1977	; 0x7b9
    634a:	f3af 8000 	nop.w
    634e:	4632      	mov	r2, r6
    6350:	2001      	movs	r0, #1
    6352:	990c      	ldr	r1, [sp, #48]	; 0x30
    6354:	f7fe ffce 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6358:	b124      	cbz	r4, 6364 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    635a:	2100      	movs	r1, #0
    635c:	f240 70c2 	movw	r0, #1986	; 0x7c2
    6360:	f3af 8000 	nop.w
    6364:	4847      	ldr	r0, [pc, #284]	; (6484 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    6366:	2800      	cmp	r0, #0
    6368:	bf18      	it	ne
    636a:	f3af 8000 	nopne.w
    636e:	f3ef 8010 	mrs	r0, PRIMASK
    6372:	b672      	cpsid	i
    6374:	9006      	str	r0, [sp, #24]
    6376:	b124      	cbz	r4, 6382 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    6378:	2100      	movs	r1, #0
    637a:	f240 70c7 	movw	r0, #1991	; 0x7c7
    637e:	f3af 8000 	nop.w
    6382:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    6386:	f88d 0008 	strb.w	r0, [sp, #8]
    638a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    638e:	b138      	cbz	r0, 63a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    6390:	2c00      	cmp	r4, #0
    6392:	bf1c      	itt	ne
    6394:	2100      	movne	r1, #0
    6396:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    639a:	f43f af40 	beq.w	621e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    639e:	e781      	b.n	62a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    63a0:	f1bb 0f00 	cmp.w	fp, #0
    63a4:	d009      	beq.n	63ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    63a6:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    63aa:	2820      	cmp	r0, #32
    63ac:	d105      	bne.n	63ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    63ae:	4631      	mov	r1, r6
    63b0:	2002      	movs	r0, #2
    63b2:	f7fe ffd1 	bl	5358 <MPSL_IRQ_RADIO_Handler+0xd70>
    63b6:	9008      	str	r0, [sp, #32]
    63b8:	b1f8      	cbz	r0, 63fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    63ba:	b124      	cbz	r4, 63c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    63bc:	2100      	movs	r1, #0
    63be:	f240 70df 	movw	r0, #2015	; 0x7df
    63c2:	f3af 8000 	nop.w
    63c6:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    63ca:	e000      	b.n	63ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    63cc:	e008      	b.n	63e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    63ce:	ea27 0000 	bic.w	r0, r7, r0
    63d2:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    63d6:	20ff      	movs	r0, #255	; 0xff
    63d8:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    63dc:	2001      	movs	r0, #1
    63de:	9007      	str	r0, [sp, #28]
    63e0:	b124      	cbz	r4, 63ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    63e2:	2100      	movs	r1, #0
    63e4:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    63e8:	f3af 8000 	nop.w
    63ec:	9808      	ldr	r0, [sp, #32]
    63ee:	4e26      	ldr	r6, [pc, #152]	; (6488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    63f0:	2802      	cmp	r0, #2
    63f2:	d009      	beq.n	6408 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    63f4:	2801      	cmp	r0, #1
    63f6:	d027      	beq.n	6448 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    63f8:	e02b      	b.n	6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    63fa:	b354      	cbz	r4, 6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    63fc:	2100      	movs	r1, #0
    63fe:	f240 70da 	movw	r0, #2010	; 0x7da
    6402:	f3af 8000 	nop.w
    6406:	e7ec      	b.n	63e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    6408:	f000 fec8 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    640c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    6410:	ebb3 0c00 	subs.w	ip, r3, r0
    6414:	eb72 0c01 	sbcs.w	ip, r2, r1
    6418:	d204      	bcs.n	6424 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    641a:	f240 71ee 	movw	r1, #2030	; 0x7ee
    641e:	2070      	movs	r0, #112	; 0x70
    6420:	f001 fc6c 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6424:	1a18      	subs	r0, r3, r0
    6426:	eb62 0101 	sbc.w	r1, r2, r1
    642a:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    642e:	f171 0100 	sbcs.w	r1, r1, #0
    6432:	d304      	bcc.n	643e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    6434:	f240 71ef 	movw	r1, #2031	; 0x7ef
    6438:	2070      	movs	r0, #112	; 0x70
    643a:	f001 fc5f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    643e:	f003 fcef 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6442:	6871      	ldr	r1, [r6, #4]
    6444:	b129      	cbz	r1, 6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6446:	e003      	b.n	6450 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    6448:	6871      	ldr	r1, [r6, #4]
    644a:	f04f 30ff 	mov.w	r0, #4294967295
    644e:	b101      	cbz	r1, 6452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6450:	4788      	blx	r1
    6452:	9806      	ldr	r0, [sp, #24]
    6454:	b148      	cbz	r0, 646a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    6456:	b124      	cbz	r4, 6462 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    6458:	2100      	movs	r1, #0
    645a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    645e:	f3af 8000 	nop.w
    6462:	9807      	ldr	r0, [sp, #28]
    6464:	b00d      	add	sp, #52	; 0x34
    6466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    646a:	4805      	ldr	r0, [pc, #20]	; (6480 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    646c:	2800      	cmp	r0, #0
    646e:	bf18      	it	ne
    6470:	f3af 8000 	nopne.w
    6474:	b662      	cpsie	i
    6476:	e7ee      	b.n	6456 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    6478:	20000b30 	.word	0x20000b30
	...
    6488:	20000120 	.word	0x20000120

0000648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    648c:	b510      	push	{r4, lr}
    648e:	2820      	cmp	r0, #32
    6490:	d211      	bcs.n	64b6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    6492:	490e      	ldr	r1, [pc, #56]	; (64cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    6494:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    6498:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    649c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    64a0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    64a4:	b13b      	cbz	r3, 64b6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    64a6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    64aa:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    64ae:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    64b2:	2a01      	cmp	r2, #1
    64b4:	d001      	beq.n	64ba <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    64b6:	2000      	movs	r0, #0
    64b8:	bd10      	pop	{r4, pc}
    64ba:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    64be:	4601      	mov	r1, r0
    64c0:	2000      	movs	r0, #0
    64c2:	f7fe ff17 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    64c6:	2001      	movs	r0, #1
    64c8:	bd10      	pop	{r4, pc}
    64ca:	0000      	.short	0x0000
    64cc:	20000b30 	.word	0x20000b30

000064d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    64d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64d4:	4e86      	ldr	r6, [pc, #536]	; (66f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    64d6:	4680      	mov	r8, r0
    64d8:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    64dc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    64e0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    64e4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    64e8:	2800      	cmp	r0, #0
    64ea:	d071      	beq.n	65d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    64ec:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    64f0:	4d80      	ldr	r5, [pc, #512]	; (66f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    64f2:	b125      	cbz	r5, 64fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    64f4:	2100      	movs	r1, #0
    64f6:	f640 307b 	movw	r0, #2939	; 0xb7b
    64fa:	f3af 8000 	nop.w
    64fe:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    6502:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6506:	2801      	cmp	r0, #1
    6508:	d018      	beq.n	653c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    650a:	b2c0      	uxtb	r0, r0
    650c:	2804      	cmp	r0, #4
    650e:	bf1c      	itt	ne
    6510:	2805      	cmpne	r0, #5
    6512:	2806      	cmpne	r0, #6
    6514:	d061      	beq.n	65da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    6516:	b12d      	cbz	r5, 6524 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    6518:	f04f 0100 	mov.w	r1, #0
    651c:	f640 3087 	movw	r0, #2951	; 0xb87
    6520:	f3af 8000 	nop.w
    6524:	f003 fdb2 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6528:	b125      	cbz	r5, 6534 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    652a:	2100      	movs	r1, #0
    652c:	f640 308b 	movw	r0, #2955	; 0xb8b
    6530:	f3af 8000 	nop.w
    6534:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    6538:	2801      	cmp	r0, #1
    653a:	d1e6      	bne.n	650a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    653c:	2401      	movs	r4, #1
    653e:	b125      	cbz	r5, 654a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    6540:	2100      	movs	r1, #0
    6542:	f640 3092 	movw	r0, #2962	; 0xb92
    6546:	f3af 8000 	nop.w
    654a:	2c00      	cmp	r4, #0
    654c:	d04b      	beq.n	65e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    654e:	2000      	movs	r0, #0
    6550:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6554:	b125      	cbz	r5, 6560 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    6556:	2100      	movs	r1, #0
    6558:	f640 3097 	movw	r0, #2967	; 0xb97
    655c:	f3af 8000 	nop.w
    6560:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    6564:	2001      	movs	r0, #1
    6566:	ea20 090b 	bic.w	r9, r0, fp
    656a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    656e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    6572:	2240      	movs	r2, #64	; 0x40
    6574:	f003 fde4 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6578:	b125      	cbz	r5, 6584 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    657a:	2100      	movs	r1, #0
    657c:	f240 503c 	movw	r0, #1340	; 0x53c
    6580:	f3af 8000 	nop.w
    6584:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    6588:	eb00 0a06 	add.w	sl, r0, r6
    658c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    6590:	4430      	add	r0, r6
    6592:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    6594:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    6598:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    659c:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    65a0:	b125      	cbz	r5, 65ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    65a2:	2100      	movs	r1, #0
    65a4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    65a8:	f3af 8000 	nop.w
    65ac:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    65b0:	f88d 0000 	strb.w	r0, [sp]
    65b4:	f89d 0000 	ldrb.w	r0, [sp]
    65b8:	b1e0      	cbz	r0, 65f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    65ba:	2d00      	cmp	r5, #0
    65bc:	bf1c      	itt	ne
    65be:	2100      	movne	r1, #0
    65c0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    65c4:	d0bb      	beq.n	653e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    65c6:	bf00      	nop
    65c8:	f3af 8000 	nop.w
    65cc:	e7b7      	b.n	653e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    65ce:	e7ff      	b.n	65d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    65d0:	f640 3172 	movw	r1, #2930	; 0xb72
    65d4:	2070      	movs	r0, #112	; 0x70
    65d6:	f001 fb91 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    65da:	464a      	mov	r2, r9
    65dc:	4641      	mov	r1, r8
    65de:	2001      	movs	r0, #1
    65e0:	f7fe fe88 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    65e4:	e7a0      	b.n	6528 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    65e6:	4844      	ldr	r0, [pc, #272]	; (66f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    65e8:	2800      	cmp	r0, #0
    65ea:	bf18      	it	ne
    65ec:	f3af 8000 	nopne.w
    65f0:	b662      	cpsie	i
    65f2:	e7ac      	b.n	654e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    65f4:	b125      	cbz	r5, 6600 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    65f6:	2100      	movs	r1, #0
    65f8:	f640 30a1 	movw	r0, #2977	; 0xba1
    65fc:	f3af 8000 	nop.w
    6600:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    6604:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    6608:	4640      	mov	r0, r8
    660a:	461c      	mov	r4, r3
    660c:	f04f 0b20 	mov.w	fp, #32
    6610:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    6614:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    6618:	e004      	b.n	6624 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    661a:	46a3      	mov	fp, r4
    661c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    6620:	f89c 4001 	ldrb.w	r4, [ip, #1]
    6624:	4284      	cmp	r4, r0
    6626:	d002      	beq.n	662e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    6628:	2c20      	cmp	r4, #32
    662a:	d02b      	beq.n	6684 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    662c:	e7f5      	b.n	661a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    662e:	2c20      	cmp	r4, #32
    6630:	d028      	beq.n	6684 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    6632:	42a3      	cmp	r3, r4
    6634:	d104      	bne.n	6640 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    6636:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    663a:	7840      	ldrb	r0, [r0, #1]
    663c:	7008      	strb	r0, [r1, #0]
    663e:	e005      	b.n	664c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    6640:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    6644:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    6648:	7840      	ldrb	r0, [r0, #1]
    664a:	7048      	strb	r0, [r1, #1]
    664c:	f1ba 0f00 	cmp.w	sl, #0
    6650:	d011      	beq.n	6676 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6652:	b125      	cbz	r5, 665e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    6654:	2100      	movs	r1, #0
    6656:	f240 409c 	movw	r0, #1180	; 0x49c
    665a:	f3af 8000 	nop.w
    665e:	f89a 0000 	ldrb.w	r0, [sl]
    6662:	42a0      	cmp	r0, r4
    6664:	d107      	bne.n	6676 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6666:	b125      	cbz	r5, 6672 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    6668:	2100      	movs	r1, #0
    666a:	f240 409f 	movw	r0, #1183	; 0x49f
    666e:	f3af 8000 	nop.w
    6672:	f88a b000 	strb.w	fp, [sl]
    6676:	b15d      	cbz	r5, 6690 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6678:	2100      	movs	r1, #0
    667a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    667e:	f3af 8000 	nop.w
    6682:	e000      	b.n	6686 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    6684:	b125      	cbz	r5, 6690 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    6686:	2100      	movs	r1, #0
    6688:	f640 30a5 	movw	r0, #2981	; 0xba5
    668c:	f3af 8000 	nop.w
    6690:	481a      	ldr	r0, [pc, #104]	; (66fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    6692:	2800      	cmp	r0, #0
    6694:	bf18      	it	ne
    6696:	f3af 8000 	nopne.w
    669a:	f3ef 8410 	mrs	r4, PRIMASK
    669e:	b672      	cpsid	i
    66a0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    66a4:	f88d 0000 	strb.w	r0, [sp]
    66a8:	f89d 0000 	ldrb.w	r0, [sp]
    66ac:	b138      	cbz	r0, 66be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    66ae:	2d00      	cmp	r5, #0
    66b0:	bf1c      	itt	ne
    66b2:	2100      	movne	r1, #0
    66b4:	f640 30ab 	movwne	r0, #2987	; 0xbab
    66b8:	f43f af41 	beq.w	653e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    66bc:	e784      	b.n	65c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    66be:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    66c2:	20ff      	movs	r0, #255	; 0xff
    66c4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    66c8:	b154      	cbz	r4, 66e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    66ca:	2d00      	cmp	r5, #0
    66cc:	bf08      	it	eq
    66ce:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66d2:	2100      	movs	r1, #0
    66d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    66d8:	f3af 8000 	nop.w
    66dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66e0:	4805      	ldr	r0, [pc, #20]	; (66f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    66e2:	2800      	cmp	r0, #0
    66e4:	bf18      	it	ne
    66e6:	f3af 8000 	nopne.w
    66ea:	b662      	cpsie	i
    66ec:	e7ed      	b.n	66ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    66ee:	0000      	.short	0x0000
    66f0:	20000b30 	.word	0x20000b30
	...

00006700 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    6700:	b570      	push	{r4, r5, r6, lr}
    6702:	460d      	mov	r5, r1
    6704:	4606      	mov	r6, r0
    6706:	f001 fa6f 	bl	7be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    670a:	480d      	ldr	r0, [pc, #52]	; (6740 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    670c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    6710:	2400      	movs	r4, #0
    6712:	3880      	subs	r0, #128	; 0x80
    6714:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    6718:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    671c:	b129      	cbz	r1, 672a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    671e:	1c61      	adds	r1, r4, #1
    6720:	b2cc      	uxtb	r4, r1
    6722:	2c20      	cmp	r4, #32
    6724:	d3f8      	bcc.n	6718 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    6726:	2020      	movs	r0, #32
    6728:	bd70      	pop	{r4, r5, r6, pc}
    672a:	4806      	ldr	r0, [pc, #24]	; (6744 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    672c:	4621      	mov	r1, r4
    672e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6732:	e9c0 6500 	strd	r6, r5, [r0]
    6736:	2001      	movs	r0, #1
    6738:	f7fe fddc 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    673c:	4620      	mov	r0, r4
    673e:	bd70      	pop	{r4, r5, r6, pc}
    6740:	20000b30 	.word	0x20000b30
    6744:	200006b0 	.word	0x200006b0

00006748 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    6748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    674c:	f000 fd26 	bl	719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6750:	4606      	mov	r6, r0
    6752:	460f      	mov	r7, r1
    6754:	f000 fe66 	bl	7424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    6758:	4c65      	ldr	r4, [pc, #404]	; (68f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    675a:	6860      	ldr	r0, [r4, #4]
    675c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6760:	bf1c      	itt	ne
    6762:	f04f 30ff 	movne.w	r0, #4294967295
    6766:	6060      	strne	r0, [r4, #4]
    6768:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    676c:	f8df b184 	ldr.w	fp, [pc, #388]	; 68f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    6770:	2500      	movs	r5, #0
    6772:	bb10      	cbnz	r0, 67ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6774:	f44f 710c 	mov.w	r1, #560	; 0x230
    6778:	6920      	ldr	r0, [r4, #16]
    677a:	f001 fa21 	bl	7bc0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    677e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    6782:	68a1      	ldr	r1, [r4, #8]
    6784:	1818      	adds	r0, r3, r0
    6786:	eb45 0305 	adc.w	r3, r5, r5
    678a:	1809      	adds	r1, r1, r0
    678c:	eb42 0003 	adc.w	r0, r2, r3
    6790:	1a71      	subs	r1, r6, r1
    6792:	eb77 0000 	sbcs.w	r0, r7, r0
    6796:	d310      	bcc.n	67ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6798:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    679c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    67a0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    67a4:	6840      	ldr	r0, [r0, #4]
    67a6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    67aa:	680a      	ldr	r2, [r1, #0]
    67ac:	2108      	movs	r1, #8
    67ae:	4790      	blx	r2
    67b0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    67b4:	2070      	movs	r0, #112	; 0x70
    67b6:	f001 faa1 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67ba:	7e60      	ldrb	r0, [r4, #25]
    67bc:	b180      	cbz	r0, 67e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    67be:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    67c2:	f88d 0000 	strb.w	r0, [sp]
    67c6:	f89d 0000 	ldrb.w	r0, [sp]
    67ca:	b148      	cbz	r0, 67e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    67cc:	f000 fc5c 	bl	7088 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    67d0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    67d4:	b150      	cbz	r0, 67ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    67d6:	f240 31cd 	movw	r1, #973	; 0x3cd
    67da:	2070      	movs	r0, #112	; 0x70
    67dc:	f001 fa8e 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67e0:	1cf0      	adds	r0, r6, #3
    67e2:	f147 0100 	adc.w	r1, r7, #0
    67e6:	f000 fb29 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    67ea:	e7f1      	b.n	67d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    67ec:	2001      	movs	r0, #1
    67ee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    67f2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    67f6:	2820      	cmp	r0, #32
    67f8:	d020      	beq.n	683c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    67fa:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    67fe:	2020      	movs	r0, #32
    6800:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    6804:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    6808:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    680c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    6810:	6025      	str	r5, [r4, #0]
    6812:	f000 ff01 	bl	7618 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    6816:	f884 0020 	strb.w	r0, [r4, #32]
    681a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    681e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    6822:	eb00 0a04 	add.w	sl, r0, r4
    6826:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    682a:	2820      	cmp	r0, #32
    682c:	d01c      	beq.n	6868 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    682e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    6832:	f89b 001a 	ldrb.w	r0, [fp, #26]
    6836:	2801      	cmp	r0, #1
    6838:	d005      	beq.n	6846 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    683a:	e015      	b.n	6868 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    683c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6840:	2070      	movs	r0, #112	; 0x70
    6842:	f001 fa5b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6846:	2201      	movs	r2, #1
    6848:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    684c:	4630      	mov	r0, r6
    684e:	4639      	mov	r1, r7
    6850:	f7fe f8bc 	bl	49cc <MPSL_IRQ_RADIO_Handler+0x3e4>
    6854:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    6858:	1a12      	subs	r2, r2, r0
    685a:	eb73 0201 	sbcs.w	r2, r3, r1
    685e:	bf24      	itt	cs
    6860:	f10b 0208 	addcs.w	r2, fp, #8
    6864:	e9c2 0100 	strdcs	r0, r1, [r2]
    6868:	4641      	mov	r1, r8
    686a:	2001      	movs	r0, #1
    686c:	f7fe fd74 	bl	5358 <MPSL_IRQ_RADIO_Handler+0xd70>
    6870:	0007      	movs	r7, r0
    6872:	d0f9      	beq.n	6868 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6874:	4820      	ldr	r0, [pc, #128]	; (68f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    6876:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    687a:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    687e:	2802      	cmp	r0, #2
    6880:	d104      	bne.n	688c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    6882:	4642      	mov	r2, r8
    6884:	4649      	mov	r1, r9
    6886:	2006      	movs	r0, #6
    6888:	f7fe fd34 	bl	52f4 <MPSL_IRQ_RADIO_Handler+0xd0c>
    688c:	20ff      	movs	r0, #255	; 0xff
    688e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    6892:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    6896:	f8df 8064 	ldr.w	r8, [pc, #100]	; 68fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    689a:	2820      	cmp	r0, #32
    689c:	bf1c      	itt	ne
    689e:	f898 0001 	ldrbne.w	r0, [r8, #1]
    68a2:	f001 fafd 	blne	7ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    68a6:	f894 0020 	ldrb.w	r0, [r4, #32]
    68aa:	b128      	cbz	r0, 68b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    68ac:	f000 fe90 	bl	75d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    68b0:	f884 5020 	strb.w	r5, [r4, #32]
    68b4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    68b8:	2f02      	cmp	r7, #2
    68ba:	d00f      	beq.n	68dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    68bc:	2f01      	cmp	r7, #1
    68be:	bf18      	it	ne
    68c0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68c4:	f04f 30ff 	mov.w	r0, #4294967295
    68c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    68cc:	2900      	cmp	r1, #0
    68ce:	bf08      	it	eq
    68d0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68d4:	b001      	add	sp, #4
    68d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68da:	4708      	bx	r1
    68dc:	68a0      	ldr	r0, [r4, #8]
    68de:	1b80      	subs	r0, r0, r6
    68e0:	f003 fa9e 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    68e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    68e8:	2900      	cmp	r1, #0
    68ea:	d1f3      	bne.n	68d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    68ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68f0:	20000b30 	.word	0x20000b30
    68f4:	200006b0 	.word	0x200006b0
    68f8:	20000ab0 	.word	0x20000ab0
    68fc:	20000120 	.word	0x20000120

00006900 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    6900:	b570      	push	{r4, r5, r6, lr}
    6902:	4c42      	ldr	r4, [pc, #264]	; (6a0c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    6904:	4605      	mov	r5, r0
    6906:	b082      	sub	sp, #8
    6908:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    690c:	2820      	cmp	r0, #32
    690e:	d008      	beq.n	6922 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    6910:	6860      	ldr	r0, [r4, #4]
    6912:	f1b0 3fff 	cmp.w	r0, #4294967295
    6916:	d009      	beq.n	692c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    6918:	f640 21b6 	movw	r1, #2742	; 0xab6
    691c:	2070      	movs	r0, #112	; 0x70
    691e:	f001 f9ed 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6922:	f640 21b5 	movw	r1, #2741	; 0xab5
    6926:	2070      	movs	r0, #112	; 0x70
    6928:	f001 f9e8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    692c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6930:	4937      	ldr	r1, [pc, #220]	; (6a10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    6932:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    6936:	68b0      	ldr	r0, [r6, #8]
    6938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    693c:	f003 fa70 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6940:	4602      	mov	r2, r0
    6942:	8af0      	ldrh	r0, [r6, #22]
    6944:	7d31      	ldrb	r1, [r6, #20]
    6946:	4b33      	ldr	r3, [pc, #204]	; (6a14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    6948:	4408      	add	r0, r1
    694a:	1c40      	adds	r0, r0, #1
    694c:	1811      	adds	r1, r2, r0
    694e:	429a      	cmp	r2, r3
    6950:	d817      	bhi.n	6982 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    6952:	4a31      	ldr	r2, [pc, #196]	; (6a18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    6954:	4290      	cmp	r0, r2
    6956:	dc1b      	bgt.n	6990 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    6958:	f1c2 0c00 	rsb	ip, r2, #0
    695c:	4560      	cmp	r0, ip
    695e:	db1e      	blt.n	699e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    6960:	0056      	lsls	r6, r2, #1
    6962:	428e      	cmp	r6, r1
    6964:	bfdc      	itt	le
    6966:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    696a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    696e:	dd05      	ble.n	697c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    6970:	2900      	cmp	r1, #0
    6972:	bfbc      	itt	lt
    6974:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    6978:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    697c:	1948      	adds	r0, r1, r5
    697e:	4299      	cmp	r1, r3
    6980:	d904      	bls.n	698c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    6982:	f240 517f 	movw	r1, #1407	; 0x57f
    6986:	2070      	movs	r0, #112	; 0x70
    6988:	f001 f9b8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    698c:	4295      	cmp	r5, r2
    698e:	dd04      	ble.n	699a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    6990:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    6994:	2070      	movs	r0, #112	; 0x70
    6996:	f001 f9b1 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    699a:	4565      	cmp	r5, ip
    699c:	da04      	bge.n	69a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    699e:	f240 5181 	movw	r1, #1409	; 0x581
    69a2:	2070      	movs	r0, #112	; 0x70
    69a4:	f001 f9aa 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69a8:	4286      	cmp	r6, r0
    69aa:	bfdc      	itt	le
    69ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    69b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    69b4:	dd05      	ble.n	69c2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    69b6:	2800      	cmp	r0, #0
    69b8:	bfbc      	itt	lt
    69ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    69be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    69c2:	aa01      	add	r2, sp, #4
    69c4:	4669      	mov	r1, sp
    69c6:	f000 f909 	bl	6bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    69ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    69ce:	280f      	cmp	r0, #15
    69d0:	bf8c      	ite	hi
    69d2:	2001      	movhi	r0, #1
    69d4:	2000      	movls	r0, #0
    69d6:	9900      	ldr	r1, [sp, #0]
    69d8:	4408      	add	r0, r1
    69da:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    69de:	6061      	str	r1, [r4, #4]
    69e0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    69e4:	f88d 0000 	strb.w	r0, [sp]
    69e8:	f89d 0000 	ldrb.w	r0, [sp]
    69ec:	2800      	cmp	r0, #0
    69ee:	bf04      	itt	eq
    69f0:	b002      	addeq	sp, #8
    69f2:	bd70      	popeq	{r4, r5, r6, pc}
    69f4:	2005      	movs	r0, #5
    69f6:	f000 fbf3 	bl	71e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    69fa:	2800      	cmp	r0, #0
    69fc:	bf1c      	itt	ne
    69fe:	b002      	addne	sp, #8
    6a00:	bd70      	popne	{r4, r5, r6, pc}
    6a02:	f640 21bd 	movw	r1, #2749	; 0xabd
    6a06:	2070      	movs	r0, #112	; 0x70
    6a08:	f001 f978 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a0c:	20000b30 	.word	0x20000b30
    6a10:	200006b0 	.word	0x200006b0
    6a14:	1e847fff 	.word	0x1e847fff
    6a18:	0f424000 	.word	0x0f424000

00006a1c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    6a1c:	b570      	push	{r4, r5, r6, lr}
    6a1e:	4c1e      	ldr	r4, [pc, #120]	; (6a98 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    6a20:	2120      	movs	r1, #32
    6a22:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    6a26:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    6a2a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    6a2e:	2000      	movs	r0, #0
    6a30:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    6a34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    6a38:	1e42      	subs	r2, r0, #1
    6a3a:	e9c4 0200 	strd	r0, r2, [r4]
    6a3e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6a42:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    6a46:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    6a4a:	f884 0020 	strb.w	r0, [r4, #32]
    6a4e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    6a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6a56:	1e41      	subs	r1, r0, #1
    6a58:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    6a5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6a60:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    6a64:	2210      	movs	r2, #16
    6a66:	7088      	strb	r0, [r1, #2]
    6a68:	f801 0f04 	strb.w	r0, [r1, #4]!
    6a6c:	1e52      	subs	r2, r2, #1
    6a6e:	d1fa      	bne.n	6a66 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    6a70:	f000 fddc 	bl	762c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    6a74:	4d09      	ldr	r5, [pc, #36]	; (6a9c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    6a76:	2601      	movs	r6, #1
    6a78:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    6a7c:	20ff      	movs	r0, #255	; 0xff
    6a7e:	7028      	strb	r0, [r5, #0]
    6a80:	4807      	ldr	r0, [pc, #28]	; (6aa0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    6a82:	f001 f9ef 	bl	7e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6a86:	7068      	strb	r0, [r5, #1]
    6a88:	f001 fa5a 	bl	7f40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    6a8c:	60a8      	str	r0, [r5, #8]
    6a8e:	f000 fd5f 	bl	7550 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    6a92:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    6a96:	bd70      	pop	{r4, r5, r6, pc}
    6a98:	20000b30 	.word	0x20000b30
    6a9c:	20000120 	.word	0x20000120
    6aa0:	00005225 	.word	0x00005225

00006aa4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    6aa4:	b570      	push	{r4, r5, r6, lr}
    6aa6:	4605      	mov	r5, r0
    6aa8:	2001      	movs	r0, #1
    6aaa:	fa00 f405 	lsl.w	r4, r0, r5
    6aae:	460e      	mov	r6, r1
    6ab0:	2a00      	cmp	r2, #0
    6ab2:	bf08      	it	eq
    6ab4:	4808      	ldreq	r0, [pc, #32]	; (6ad8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    6ab6:	d00c      	beq.n	6ad2 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    6ab8:	2000      	movs	r0, #0
    6aba:	f000 fd2f 	bl	751c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    6abe:	00e9      	lsls	r1, r5, #3
    6ac0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6ac4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    6ac8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    6acc:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    6ad0:	4802      	ldr	r0, [pc, #8]	; (6adc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    6ad2:	6004      	str	r4, [r0, #0]
    6ad4:	bd70      	pop	{r4, r5, r6, pc}
    6ad6:	0000      	.short	0x0000
    6ad8:	4001f508 	.word	0x4001f508
    6adc:	4001f504 	.word	0x4001f504

00006ae0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    6ae0:	0e03      	lsrs	r3, r0, #24
    6ae2:	b430      	push	{r4, r5}
    6ae4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6ae8:	f8df c038 	ldr.w	ip, [pc, #56]	; 6b24 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    6aec:	0e09      	lsrs	r1, r1, #24
    6aee:	fba3 250c 	umull	r2, r5, r3, ip
    6af2:	fb01 510c 	mla	r1, r1, ip, r5
    6af6:	2400      	movs	r4, #0
    6af8:	fb03 1104 	mla	r1, r3, r4, r1
    6afc:	f647 73ff 	movw	r3, #32767	; 0x7fff
    6b00:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    6b04:	f643 5c09 	movw	ip, #15625	; 0x3d09
    6b08:	fb13 f30c 	smulbb	r3, r3, ip
    6b0c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6b10:	fb10 f00c 	smulbb	r0, r0, ip
    6b14:	f500 7080 	add.w	r0, r0, #256	; 0x100
    6b18:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    6b1c:	1880      	adds	r0, r0, r2
    6b1e:	4161      	adcs	r1, r4
    6b20:	bc30      	pop	{r4, r5}
    6b22:	4770      	bx	lr
    6b24:	1e848000 	.word	0x1e848000

00006b28 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    6b28:	b570      	push	{r4, r5, r6, lr}
    6b2a:	b084      	sub	sp, #16
    6b2c:	4615      	mov	r5, r2
    6b2e:	aa01      	add	r2, sp, #4
    6b30:	461c      	mov	r4, r3
    6b32:	9200      	str	r2, [sp, #0]
    6b34:	9e08      	ldr	r6, [sp, #32]
    6b36:	ab02      	add	r3, sp, #8
    6b38:	4a17      	ldr	r2, [pc, #92]	; (6b98 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    6b3a:	f003 faf2 	bl	a122 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    6b3e:	9801      	ldr	r0, [sp, #4]
    6b40:	f248 6237 	movw	r2, #34359	; 0x8637
    6b44:	0b41      	lsrs	r1, r0, #13
    6b46:	4351      	muls	r1, r2
    6b48:	0c09      	lsrs	r1, r1, #16
    6b4a:	4a14      	ldr	r2, [pc, #80]	; (6b9c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    6b4c:	024b      	lsls	r3, r1, #9
    6b4e:	fb01 0102 	mla	r1, r1, r2, r0
    6b52:	4813      	ldr	r0, [pc, #76]	; (6ba0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    6b54:	4348      	muls	r0, r1
    6b56:	0d42      	lsrs	r2, r0, #21
    6b58:	1898      	adds	r0, r3, r2
    6b5a:	f643 5309 	movw	r3, #15625	; 0x3d09
    6b5e:	fb12 f303 	smulbb	r3, r2, r3
    6b62:	f503 7280 	add.w	r2, r3, #256	; 0x100
    6b66:	f643 5c08 	movw	ip, #15624	; 0x3d08
    6b6a:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    6b6e:	4463      	add	r3, ip
    6b70:	b2d2      	uxtb	r2, r2
    6b72:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    6b76:	bf84      	itt	hi
    6b78:	2200      	movhi	r2, #0
    6b7a:	1c40      	addhi	r0, r0, #1
    6b7c:	7032      	strb	r2, [r6, #0]
    6b7e:	9b02      	ldr	r3, [sp, #8]
    6b80:	0a19      	lsrs	r1, r3, #8
    6b82:	061b      	lsls	r3, r3, #24
    6b84:	1818      	adds	r0, r3, r0
    6b86:	f141 0100 	adc.w	r1, r1, #0
    6b8a:	e9c4 0100 	strd	r0, r1, [r4]
    6b8e:	9801      	ldr	r0, [sp, #4]
    6b90:	6028      	str	r0, [r5, #0]
    6b92:	b004      	add	sp, #16
    6b94:	bd70      	pop	{r4, r5, r6, pc}
    6b96:	0000      	.short	0x0000
    6b98:	1e848000 	.word	0x1e848000
    6b9c:	ffffc2f7 	.word	0xffffc2f7
    6ba0:	00010c6f 	.word	0x00010c6f

00006ba4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    6ba4:	0b41      	lsrs	r1, r0, #13
    6ba6:	f248 6237 	movw	r2, #34359	; 0x8637
    6baa:	4351      	muls	r1, r2
    6bac:	0c0a      	lsrs	r2, r1, #16
    6bae:	4b09      	ldr	r3, [pc, #36]	; (6bd4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    6bb0:	0251      	lsls	r1, r2, #9
    6bb2:	fb02 0203 	mla	r2, r2, r3, r0
    6bb6:	4808      	ldr	r0, [pc, #32]	; (6bd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    6bb8:	4350      	muls	r0, r2
    6bba:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    6bbe:	306e      	adds	r0, #110	; 0x6e
    6bc0:	0d40      	lsrs	r0, r0, #21
    6bc2:	425b      	negs	r3, r3
    6bc4:	fb10 f303 	smulbb	r3, r0, r3
    6bc8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    6bcc:	bf88      	it	hi
    6bce:	1c49      	addhi	r1, r1, #1
    6bd0:	4408      	add	r0, r1
    6bd2:	4770      	bx	lr
    6bd4:	ffffc2f7 	.word	0xffffc2f7
    6bd8:	00010c6f 	.word	0x00010c6f

00006bdc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    6bdc:	0b43      	lsrs	r3, r0, #13
    6bde:	f248 6c37 	movw	ip, #34359	; 0x8637
    6be2:	fb03 f30c 	mul.w	r3, r3, ip
    6be6:	b430      	push	{r4, r5}
    6be8:	0c1b      	lsrs	r3, r3, #16
    6bea:	f8df c044 	ldr.w	ip, [pc, #68]	; 6c30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    6bee:	025c      	lsls	r4, r3, #9
    6bf0:	fb03 030c 	mla	r3, r3, ip, r0
    6bf4:	480f      	ldr	r0, [pc, #60]	; (6c34 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    6bf6:	4358      	muls	r0, r3
    6bf8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    6bfc:	eb04 000c 	add.w	r0, r4, ip
    6c00:	f643 5409 	movw	r4, #15625	; 0x3d09
    6c04:	fb1c f404 	smulbb	r4, ip, r4
    6c08:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    6c0c:	f643 5508 	movw	r5, #15624	; 0x3d08
    6c10:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    6c14:	442c      	add	r4, r5
    6c16:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6c1a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    6c1e:	bf84      	itt	hi
    6c20:	f04f 0c00 	movhi.w	ip, #0
    6c24:	1c40      	addhi	r0, r0, #1
    6c26:	6008      	str	r0, [r1, #0]
    6c28:	f882 c000 	strb.w	ip, [r2]
    6c2c:	bc30      	pop	{r4, r5}
    6c2e:	4770      	bx	lr
    6c30:	ffffc2f7 	.word	0xffffc2f7
    6c34:	00010c6f 	.word	0x00010c6f

00006c38 <MPSL_IRQ_RTC0_Handler>:
    6c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c3c:	2400      	movs	r4, #0
    6c3e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6cc0 <MPSL_IRQ_RTC0_Handler+0x88>
    6c42:	4d20      	ldr	r5, [pc, #128]	; (6cc4 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6c44:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    6c48:	f44f 78a0 	mov.w	r8, #320	; 0x140
    6c4c:	ea4f 0604 	mov.w	r6, r4
    6c50:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    6c54:	fa07 f004 	lsl.w	r0, r7, r4
    6c58:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    6c5c:	4202      	tst	r2, r0
    6c5e:	d01a      	beq.n	6c96 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c60:	4a18      	ldr	r2, [pc, #96]	; (6cc4 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6c62:	5852      	ldr	r2, [r2, r1]
    6c64:	b1ba      	cbz	r2, 6c96 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c66:	506e      	str	r6, [r5, r1]
    6c68:	00a1      	lsls	r1, r4, #2
    6c6a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6c6e:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    6c72:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    6c76:	f8d9 2000 	ldr.w	r2, [r9]
    6c7a:	1a89      	subs	r1, r1, r2
    6c7c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6c80:	2902      	cmp	r1, #2
    6c82:	d302      	bcc.n	6c8a <MPSL_IRQ_RTC0_Handler+0x52>
    6c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6c88:	d905      	bls.n	6c96 <MPSL_IRQ_RTC0_Handler+0x5e>
    6c8a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6c8e:	1d20      	adds	r0, r4, #4
    6c90:	b2c0      	uxtb	r0, r0
    6c92:	f7fe fd6f 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6c96:	1c60      	adds	r0, r4, #1
    6c98:	b2c4      	uxtb	r4, r0
    6c9a:	2c03      	cmp	r4, #3
    6c9c:	d3d8      	bcc.n	6c50 <MPSL_IRQ_RTC0_Handler+0x18>
    6c9e:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    6ca2:	b128      	cbz	r0, 6cb0 <MPSL_IRQ_RTC0_Handler+0x78>
    6ca4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6ca8:	4807      	ldr	r0, [pc, #28]	; (6cc8 <MPSL_IRQ_RTC0_Handler+0x90>)
    6caa:	6881      	ldr	r1, [r0, #8]
    6cac:	1c49      	adds	r1, r1, #1
    6cae:	6081      	str	r1, [r0, #8]
    6cb0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6cb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6cb8:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    6cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cc0:	4000b504 	.word	0x4000b504
    6cc4:	4000b000 	.word	0x4000b000
    6cc8:	20000028 	.word	0x20000028

00006ccc <MPSL_IRQ_TIMER0_Handler>:
    6ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cd0:	4d38      	ldr	r5, [pc, #224]	; (6db4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    6cd2:	7828      	ldrb	r0, [r5, #0]
    6cd4:	2804      	cmp	r0, #4
    6cd6:	d068      	beq.n	6daa <MPSL_IRQ_TIMER0_Handler+0xde>
    6cd8:	1ca8      	adds	r0, r5, #2
    6cda:	2201      	movs	r2, #1
    6cdc:	7801      	ldrb	r1, [r0, #0]
    6cde:	b159      	cbz	r1, 6cf8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    6ce0:	2901      	cmp	r1, #1
    6ce2:	bf08      	it	eq
    6ce4:	706a      	strbeq	r2, [r5, #1]
    6ce6:	d002      	beq.n	6cee <MPSL_IRQ_TIMER0_Handler+0x22>
    6ce8:	7869      	ldrb	r1, [r5, #1]
    6cea:	2900      	cmp	r1, #0
    6cec:	d058      	beq.n	6da0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    6cee:	2102      	movs	r1, #2
    6cf0:	7001      	strb	r1, [r0, #0]
    6cf2:	7840      	ldrb	r0, [r0, #1]
    6cf4:	f000 fb2e 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6cf8:	4c2f      	ldr	r4, [pc, #188]	; (6db8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    6cfa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6cfe:	f04f 0800 	mov.w	r8, #0
    6d02:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    6d06:	f44f 7780 	mov.w	r7, #256	; 0x100
    6d0a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    6d0e:	d00a      	beq.n	6d26 <MPSL_IRQ_TIMER0_Handler+0x5a>
    6d10:	482a      	ldr	r0, [pc, #168]	; (6dbc <MPSL_IRQ_TIMER0_Handler+0xf0>)
    6d12:	6800      	ldr	r0, [r0, #0]
    6d14:	b138      	cbz	r0, 6d26 <MPSL_IRQ_TIMER0_Handler+0x5a>
    6d16:	2003      	movs	r0, #3
    6d18:	f000 fb1c 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d1c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d20:	2003      	movs	r0, #3
    6d22:	f7fe fd27 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d26:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d2a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    6d2e:	d00a      	beq.n	6d46 <MPSL_IRQ_TIMER0_Handler+0x7a>
    6d30:	4823      	ldr	r0, [pc, #140]	; (6dc0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    6d32:	6800      	ldr	r0, [r0, #0]
    6d34:	b138      	cbz	r0, 6d46 <MPSL_IRQ_TIMER0_Handler+0x7a>
    6d36:	2002      	movs	r0, #2
    6d38:	f000 fb0c 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d3c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d40:	2002      	movs	r0, #2
    6d42:	f7fe fd17 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d46:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d4a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    6d4e:	d00a      	beq.n	6d66 <MPSL_IRQ_TIMER0_Handler+0x9a>
    6d50:	481c      	ldr	r0, [pc, #112]	; (6dc4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    6d52:	6800      	ldr	r0, [r0, #0]
    6d54:	b138      	cbz	r0, 6d66 <MPSL_IRQ_TIMER0_Handler+0x9a>
    6d56:	2001      	movs	r0, #1
    6d58:	f000 fafc 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d5c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d60:	2001      	movs	r0, #1
    6d62:	f7fe fd07 	bl	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d66:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d6a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6d6e:	bf08      	it	eq
    6d70:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d74:	4814      	ldr	r0, [pc, #80]	; (6dc8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    6d76:	6800      	ldr	r0, [r0, #0]
    6d78:	2800      	cmp	r0, #0
    6d7a:	bf08      	it	eq
    6d7c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d80:	2000      	movs	r0, #0
    6d82:	f000 fae7 	bl	7354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d86:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d8a:	2004      	movs	r0, #4
    6d8c:	7028      	strb	r0, [r5, #0]
    6d8e:	f8c5 8004 	str.w	r8, [r5, #4]
    6d92:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    6d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d9a:	2000      	movs	r0, #0
    6d9c:	f7fe bcea 	b.w	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6da0:	f240 5169 	movw	r1, #1385	; 0x569
    6da4:	206c      	movs	r0, #108	; 0x6c
    6da6:	f000 ffa9 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dae:	2007      	movs	r0, #7
    6db0:	f7fe bce0 	b.w	5774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6db4:	20000028 	.word	0x20000028
    6db8:	40008000 	.word	0x40008000
    6dbc:	4000814c 	.word	0x4000814c
    6dc0:	40008148 	.word	0x40008148
    6dc4:	40008144 	.word	0x40008144
    6dc8:	40008140 	.word	0x40008140
    6dcc:	2201      	movs	r2, #1
    6dce:	0211      	lsls	r1, r2, #8
    6dd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6dd4:	2000      	movs	r0, #0
    6dd6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6dda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    6dde:	f3bf 8f4f 	dsb	sy
    6de2:	f3bf 8f6f 	isb	sy
    6de6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6dea:	490e      	ldr	r1, [pc, #56]	; (6e24 <MPSL_IRQ_TIMER0_Handler+0x158>)
    6dec:	f841 2f04 	str.w	r2, [r1, #4]!
    6df0:	1e43      	subs	r3, r0, #1
    6df2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    6df6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    6dfa:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    6dfe:	4b0a      	ldr	r3, [pc, #40]	; (6e28 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    6e00:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e04:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    6e08:	1d1b      	adds	r3, r3, #4
    6e0a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e0e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    6e12:	1d1b      	adds	r3, r3, #4
    6e14:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e18:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	4903      	ldr	r1, [pc, #12]	; (6e2c <MPSL_IRQ_TIMER0_Handler+0x160>)
    6e20:	7048      	strb	r0, [r1, #1]
    6e22:	4770      	bx	lr
    6e24:	40008000 	.word	0x40008000
    6e28:	40008004 	.word	0x40008004
    6e2c:	20000028 	.word	0x20000028

00006e30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    6e30:	4801      	ldr	r0, [pc, #4]	; (6e38 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    6e32:	6800      	ldr	r0, [r0, #0]
    6e34:	4770      	bx	lr
    6e36:	0000      	.short	0x0000
    6e38:	4000b504 	.word	0x4000b504

00006e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    6e3c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6e40:	f8df 8130 	ldr.w	r8, [pc, #304]	; 6f74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    6e44:	4604      	mov	r4, r0
    6e46:	f1a8 0702 	sub.w	r7, r8, #2
    6e4a:	460e      	mov	r6, r1
    6e4c:	f898 c000 	ldrb.w	ip, [r8]
    6e50:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    6e54:	f1bc 0f01 	cmp.w	ip, #1
    6e58:	d106      	bne.n	6e68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    6e5a:	ea81 0204 	eor.w	r2, r1, r4
    6e5e:	4070      	eors	r0, r6
    6e60:	4310      	orrs	r0, r2
    6e62:	bf08      	it	eq
    6e64:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6e68:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6e6c:	4a42      	ldr	r2, [pc, #264]	; (6f78 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    6e6e:	6010      	str	r0, [r2, #0]
    6e70:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    6e74:	f1bc 0f00 	cmp.w	ip, #0
    6e78:	bf07      	ittee	eq
    6e7a:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    6e7e:	2200      	moveq	r2, #0
    6e80:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    6e84:	2201      	movne	r2, #1
    6e86:	483d      	ldr	r0, [pc, #244]	; (6f7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    6e88:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    6e8c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    6e90:	2500      	movs	r5, #0
    6e92:	f44f 79a0 	mov.w	r9, #320	; 0x140
    6e96:	2a02      	cmp	r2, #2
    6e98:	d207      	bcs.n	6eaa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    6e9a:	bf00      	nop
    6e9c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    6ea0:	50c5      	str	r5, [r0, r3]
    6ea2:	1c52      	adds	r2, r2, #1
    6ea4:	b2d2      	uxtb	r2, r2
    6ea6:	2a02      	cmp	r2, #2
    6ea8:	d3f8      	bcc.n	6e9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    6eaa:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    6eae:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    6eb2:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    6eb6:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    6eba:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    6ebe:	4a30      	ldr	r2, [pc, #192]	; (6f80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    6ec0:	f8d2 9000 	ldr.w	r9, [r2]
    6ec4:	eba3 0909 	sub.w	r9, r3, r9
    6ec8:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    6ecc:	f04f 0901 	mov.w	r9, #1
    6ed0:	f1ba 0f02 	cmp.w	sl, #2
    6ed4:	d32e      	bcc.n	6f34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6ed6:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    6eda:	d82b      	bhi.n	6f34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6edc:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    6ee0:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    6ee4:	f1bc 0f00 	cmp.w	ip, #0
    6ee8:	d005      	beq.n	6ef6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    6eea:	6810      	ldr	r0, [r2, #0]
    6eec:	1a08      	subs	r0, r1, r0
    6eee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6ef2:	2802      	cmp	r0, #2
    6ef4:	d3f9      	bcc.n	6eea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    6ef6:	f8c7 9004 	str.w	r9, [r7, #4]
    6efa:	703d      	strb	r5, [r7, #0]
    6efc:	f7ff ff66 	bl	6dcc <MPSL_IRQ_TIMER0_Handler+0x100>
    6f00:	4820      	ldr	r0, [pc, #128]	; (6f84 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    6f02:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    6f06:	f365 0101 	bfi	r1, r5, #0, #2
    6f0a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    6f0e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    6f12:	2102      	movs	r1, #2
    6f14:	f361 0201 	bfi	r2, r1, #0, #2
    6f18:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    6f1c:	2110      	movs	r1, #16
    6f1e:	fa91 f1a1 	rbit	r1, r1
    6f22:	fab1 f181 	clz	r1, r1
    6f26:	2909      	cmp	r1, #9
    6f28:	d909      	bls.n	6f3e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    6f2a:	f240 3155 	movw	r1, #853	; 0x355
    6f2e:	a016      	add	r0, pc, #88	; (adr r0, 6f88 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    6f30:	f000 feb8 	bl	7ca4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    6f34:	f240 31b2 	movw	r1, #946	; 0x3b2
    6f38:	206c      	movs	r0, #108	; 0x6c
    6f3a:	f000 fedf 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6f3e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    6f42:	f8c0 900c 	str.w	r9, [r0, #12]
    6f46:	6879      	ldr	r1, [r7, #4]
    6f48:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6f4c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    6f50:	f44f 7180 	mov.w	r1, #256	; 0x100
    6f54:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    6f58:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6f5c:	490d      	ldr	r1, [pc, #52]	; (6f94 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    6f5e:	0480      	lsls	r0, r0, #18
    6f60:	6008      	str	r0, [r1, #0]
    6f62:	e9c7 4604 	strd	r4, r6, [r7, #16]
    6f66:	2004      	movs	r0, #4
    6f68:	f888 0001 	strb.w	r0, [r8, #1]
    6f6c:	f888 9000 	strb.w	r9, [r8]
    6f70:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6f74:	2000002a 	.word	0x2000002a
    6f78:	4001f508 	.word	0x4001f508
    6f7c:	4000b000 	.word	0x4000b000
    6f80:	4000b504 	.word	0x4000b504
    6f84:	40008000 	.word	0x40008000
    6f88:	5f66726e 	.word	0x5f66726e
    6f8c:	656d6974 	.word	0x656d6974
    6f90:	00682e72 	.word	0x00682e72
    6f94:	4001f504 	.word	0x4001f504

00006f98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    6f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f9c:	4c31      	ldr	r4, [pc, #196]	; (7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    6f9e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6fa2:	ea82 0c00 	eor.w	ip, r2, r0
    6fa6:	404b      	eors	r3, r1
    6fa8:	ea5c 0303 	orrs.w	r3, ip, r3
    6fac:	bf14      	ite	ne
    6fae:	2301      	movne	r3, #1
    6fb0:	2300      	moveq	r3, #0
    6fb2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 7068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    6fb6:	f89c 8000 	ldrb.w	r8, [ip]
    6fba:	f1b8 0f02 	cmp.w	r8, #2
    6fbe:	d002      	beq.n	6fc6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d03f      	beq.n	7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    6fc4:	e003      	b.n	6fce <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	bf08      	it	eq
    6fca:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fce:	7863      	ldrb	r3, [r4, #1]
    6fd0:	b3bb      	cbz	r3, 7042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    6fd2:	4d26      	ldr	r5, [pc, #152]	; (706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    6fd4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    6fd8:	602b      	str	r3, [r5, #0]
    6fda:	4e25      	ldr	r6, [pc, #148]	; (7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    6fdc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    6fe0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6fe4:	462f      	mov	r7, r5
    6fe6:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    6fea:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    6fee:	2500      	movs	r5, #0
    6ff0:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    6ff4:	4d1f      	ldr	r5, [pc, #124]	; (7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    6ff6:	f8d5 9000 	ldr.w	r9, [r5]
    6ffa:	eba3 0909 	sub.w	r9, r3, r9
    6ffe:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    7002:	f1b9 0f02 	cmp.w	r9, #2
    7006:	d327      	bcc.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7008:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    700c:	d824      	bhi.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    700e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    7012:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    7016:	f1b8 0f00 	cmp.w	r8, #0
    701a:	d005      	beq.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    701c:	682b      	ldr	r3, [r5, #0]
    701e:	1ad3      	subs	r3, r2, r3
    7020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7024:	2b02      	cmp	r3, #2
    7026:	d3f9      	bcc.n	701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7028:	4d13      	ldr	r5, [pc, #76]	; (7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    702a:	2202      	movs	r2, #2
    702c:	0753      	lsls	r3, r2, #29
    702e:	602b      	str	r3, [r5, #0]
    7030:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7034:	2004      	movs	r0, #4
    7036:	f88c 0001 	strb.w	r0, [ip, #1]
    703a:	f88c 2000 	strb.w	r2, [ip]
    703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7042:	e004      	b.n	704e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    7044:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    7048:	206c      	movs	r0, #108	; 0x6c
    704a:	f000 fe57 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    704e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    7052:	206c      	movs	r0, #108	; 0x6c
    7054:	f000 fe52 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7058:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    705c:	206c      	movs	r0, #108	; 0x6c
    705e:	f000 fe4d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7062:	0000      	.short	0x0000
    7064:	20000028 	.word	0x20000028
    7068:	2000002a 	.word	0x2000002a
    706c:	4001f508 	.word	0x4001f508
    7070:	4000b000 	.word	0x4000b000
    7074:	4000b504 	.word	0x4000b504
    7078:	4001f504 	.word	0x4001f504

0000707c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    707c:	4901      	ldr	r1, [pc, #4]	; (7084 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    707e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    7082:	4770      	bx	lr
    7084:	20000028 	.word	0x20000028

00007088 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    7088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    708c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 7184 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    7090:	f89c 4000 	ldrb.w	r4, [ip]
    7094:	2c00      	cmp	r4, #0
    7096:	bf07      	ittee	eq
    7098:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    709c:	2100      	moveq	r1, #0
    709e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    70a2:	2101      	movne	r1, #1
    70a4:	4838      	ldr	r0, [pc, #224]	; (7188 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    70a6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    70aa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    70ae:	2300      	movs	r3, #0
    70b0:	2902      	cmp	r1, #2
    70b2:	bf38      	it	cc
    70b4:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    70b8:	d207      	bcs.n	70ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    70ba:	bf00      	nop
    70bc:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    70c0:	5083      	str	r3, [r0, r2]
    70c2:	1c49      	adds	r1, r1, #1
    70c4:	b2c9      	uxtb	r1, r1
    70c6:	2902      	cmp	r1, #2
    70c8:	d3f8      	bcc.n	70bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    70ca:	2c02      	cmp	r4, #2
    70cc:	d004      	beq.n	70d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    70ce:	f240 31db 	movw	r1, #987	; 0x3db
    70d2:	206c      	movs	r0, #108	; 0x6c
    70d4:	f000 fe12 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    70d8:	f3ef 8210 	mrs	r2, PRIMASK
    70dc:	b672      	cpsid	i
    70de:	4c2b      	ldr	r4, [pc, #172]	; (718c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    70e0:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    70e4:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    70e8:	b12d      	cbz	r5, 70f6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    70ea:	68a1      	ldr	r1, [r4, #8]
    70ec:	1c49      	adds	r1, r1, #1
    70ee:	60a1      	str	r1, [r4, #8]
    70f0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    70f4:	e7f4      	b.n	70e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    70f6:	68a0      	ldr	r0, [r4, #8]
    70f8:	b902      	cbnz	r2, 70fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    70fa:	b662      	cpsie	i
    70fc:	0a02      	lsrs	r2, r0, #8
    70fe:	0600      	lsls	r0, r0, #24
    7100:	1840      	adds	r0, r0, r1
    7102:	eb42 0103 	adc.w	r1, r2, r3
    7106:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    710a:	1cc0      	adds	r0, r0, #3
    710c:	f141 0100 	adc.w	r1, r1, #0
    7110:	4f1f      	ldr	r7, [pc, #124]	; (7190 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    7112:	2601      	movs	r6, #1
    7114:	4d1f      	ldr	r5, [pc, #124]	; (7194 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    7116:	ea80 0902 	eor.w	r9, r0, r2
    711a:	ea81 0808 	eor.w	r8, r1, r8
    711e:	ea59 0808 	orrs.w	r8, r9, r8
    7122:	d00e      	beq.n	7142 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7124:	f8d7 8000 	ldr.w	r8, [r7]
    7128:	eba2 0808 	sub.w	r8, r2, r8
    712c:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    7130:	f1b8 0f04 	cmp.w	r8, #4
    7134:	d305      	bcc.n	7142 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7136:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    713a:	d802      	bhi.n	7142 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    713c:	f7ff fe7e 	bl	6e3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    7140:	e01b      	b.n	717a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7142:	6838      	ldr	r0, [r7, #0]
    7144:	1a10      	subs	r0, r2, r0
    7146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    714a:	2802      	cmp	r0, #2
    714c:	d313      	bcc.n	7176 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    714e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7152:	d810      	bhi.n	7176 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    7154:	4910      	ldr	r1, [pc, #64]	; (7198 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    7156:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    715a:	6008      	str	r0, [r1, #0]
    715c:	6066      	str	r6, [r4, #4]
    715e:	7023      	strb	r3, [r4, #0]
    7160:	606e      	str	r6, [r5, #4]
    7162:	60ee      	str	r6, [r5, #12]
    7164:	0040      	lsls	r0, r0, #1
    7166:	1f09      	subs	r1, r1, #4
    7168:	6008      	str	r0, [r1, #0]
    716a:	2004      	movs	r0, #4
    716c:	f88c 0001 	strb.w	r0, [ip, #1]
    7170:	f88c 6000 	strb.w	r6, [ip]
    7174:	e001      	b.n	717a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7176:	6066      	str	r6, [r4, #4]
    7178:	7023      	strb	r3, [r4, #0]
    717a:	6860      	ldr	r0, [r4, #4]
    717c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7184:	2000002a 	.word	0x2000002a
    7188:	4000b000 	.word	0x4000b000
    718c:	20000028 	.word	0x20000028
    7190:	4000b504 	.word	0x4000b504
    7194:	40008000 	.word	0x40008000
    7198:	4001f508 	.word	0x4001f508

0000719c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    719c:	b410      	push	{r4}
    719e:	f3ef 8410 	mrs	r4, PRIMASK
    71a2:	b672      	cpsid	i
    71a4:	4a0c      	ldr	r2, [pc, #48]	; (71d8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    71a6:	490d      	ldr	r1, [pc, #52]	; (71dc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    71a8:	f04f 0c00 	mov.w	ip, #0
    71ac:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    71b0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    71b4:	b12b      	cbz	r3, 71c2 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    71b6:	6888      	ldr	r0, [r1, #8]
    71b8:	1c40      	adds	r0, r0, #1
    71ba:	6088      	str	r0, [r1, #8]
    71bc:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    71c0:	e7f4      	b.n	71ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    71c2:	6889      	ldr	r1, [r1, #8]
    71c4:	b904      	cbnz	r4, 71c8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    71c6:	b662      	cpsie	i
    71c8:	0a0a      	lsrs	r2, r1, #8
    71ca:	0609      	lsls	r1, r1, #24
    71cc:	1808      	adds	r0, r1, r0
    71ce:	bc10      	pop	{r4}
    71d0:	eb42 010c 	adc.w	r1, r2, ip
    71d4:	4770      	bx	lr
    71d6:	0000      	.short	0x0000
    71d8:	4000b000 	.word	0x4000b000
    71dc:	20000028 	.word	0x20000028

000071e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    71e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e4:	4a56      	ldr	r2, [pc, #344]	; (7340 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    71e6:	2501      	movs	r5, #1
    71e8:	2400      	movs	r4, #0
    71ea:	f892 c000 	ldrb.w	ip, [r2]
    71ee:	7852      	ldrb	r2, [r2, #1]
    71f0:	f44f 76a0 	mov.w	r6, #320	; 0x140
    71f4:	2807      	cmp	r0, #7
    71f6:	d27d      	bcs.n	72f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    71f8:	e8df f000 	tbb	[pc, r0]
    71fc:	04040404 	.word	0x04040404
    7200:	00606060 	.word	0x00606060
    7204:	4b4f      	ldr	r3, [pc, #316]	; (7344 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    7206:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    720a:	43ff      	mvns	r7, r7
    720c:	ea77 0708 	orns	r7, r7, r8
    7210:	bf04      	itt	eq
    7212:	785b      	ldrbeq	r3, [r3, #1]
    7214:	2b00      	cmpeq	r3, #0
    7216:	d003      	beq.n	7220 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    7218:	f1bc 0f02 	cmp.w	ip, #2
    721c:	d005      	beq.n	722a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    721e:	e026      	b.n	726e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    7220:	f44f 6186 	mov.w	r1, #1072	; 0x430
    7224:	206c      	movs	r0, #108	; 0x6c
    7226:	f000 fd69 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    722a:	1f13      	subs	r3, r2, #4
    722c:	b2db      	uxtb	r3, r3
    722e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7232:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    7236:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    723a:	2300      	movs	r3, #0
    723c:	f1bc 0f01 	cmp.w	ip, #1
    7240:	d003      	beq.n	724a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    7242:	f1bc 0f02 	cmp.w	ip, #2
    7246:	d008      	beq.n	725a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    7248:	e00e      	b.n	7268 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    724a:	2a04      	cmp	r2, #4
    724c:	bf24      	itt	cs
    724e:	6837      	ldrcs	r7, [r6, #0]
    7250:	2f00      	cmpcs	r7, #0
    7252:	bf08      	it	eq
    7254:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    7258:	e006      	b.n	7268 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    725a:	2a04      	cmp	r2, #4
    725c:	bf24      	itt	cs
    725e:	6837      	ldrcs	r7, [r6, #0]
    7260:	2f00      	cmpcs	r7, #0
    7262:	bf08      	it	eq
    7264:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    7268:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    726c:	d1e5      	bne.n	723a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    726e:	4b36      	ldr	r3, [pc, #216]	; (7348 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    7270:	f100 0210 	add.w	r2, r0, #16
    7274:	fa05 f202 	lsl.w	r2, r5, r2
    7278:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    727c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    7280:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    7284:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    7288:	449c      	add	ip, r3
    728a:	f8cc 5000 	str.w	r5, [ip]
    728e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7292:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    7296:	eba1 0c0c 	sub.w	ip, r1, ip
    729a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    729e:	f1bc 0f03 	cmp.w	ip, #3
    72a2:	bf3e      	ittt	cc
    72a4:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    72a8:	2000      	movcc	r0, #0
    72aa:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    72ae:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    72b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    72b6:	2001      	movs	r0, #1
    72b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72bc:	f1bc 0f00 	cmp.w	ip, #0
    72c0:	d006      	beq.n	72d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    72c2:	4282      	cmp	r2, r0
    72c4:	d104      	bne.n	72d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    72c6:	f44f 618a 	mov.w	r1, #1104	; 0x450
    72ca:	206c      	movs	r0, #108	; 0x6c
    72cc:	f000 fd16 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    72d0:	1f00      	subs	r0, r0, #4
    72d2:	b2c2      	uxtb	r2, r0
    72d4:	2a03      	cmp	r2, #3
    72d6:	d304      	bcc.n	72e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    72d8:	f44f 7127 	mov.w	r1, #668	; 0x29c
    72dc:	206c      	movs	r0, #108	; 0x6c
    72de:	f000 fd0d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    72e2:	4b1a      	ldr	r3, [pc, #104]	; (734c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    72e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    72e8:	4090      	lsls	r0, r2
    72ea:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    72ee:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    72f2:	e000      	b.n	72f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    72f4:	e01f      	b.n	7336 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    72f6:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    72fa:	f843 400c 	str.w	r4, [r3, ip]
    72fe:	f8df c050 	ldr.w	ip, [pc, #80]	; 7350 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    7302:	f8dc c000 	ldr.w	ip, [ip]
    7306:	eba1 0c0c 	sub.w	ip, r1, ip
    730a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    730e:	f1bc 0f02 	cmp.w	ip, #2
    7312:	d30d      	bcc.n	7330 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    7314:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    7318:	d80a      	bhi.n	7330 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    731a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    731e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    7322:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    7326:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    732a:	4628      	mov	r0, r5
    732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7330:	4620      	mov	r0, r4
    7332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7336:	f240 4154 	movw	r1, #1108	; 0x454
    733a:	206c      	movs	r0, #108	; 0x6c
    733c:	f000 fcde 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7340:	2000002a 	.word	0x2000002a
    7344:	20000028 	.word	0x20000028
    7348:	40008000 	.word	0x40008000
    734c:	4000b000 	.word	0x4000b000
    7350:	4000b504 	.word	0x4000b504

00007354 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    7354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7356:	2101      	movs	r1, #1
    7358:	2600      	movs	r6, #0
    735a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    735e:	2807      	cmp	r0, #7
    7360:	d24a      	bcs.n	73f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    7362:	e8df f000 	tbb	[pc, r0]
    7366:	0404      	.short	0x0404
    7368:	18180404 	.word	0x18180404
    736c:	0018      	.short	0x0018
    736e:	f100 0210 	add.w	r2, r0, #16
    7372:	fa01 f202 	lsl.w	r2, r1, r2
    7376:	4923      	ldr	r1, [pc, #140]	; (7404 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    7378:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    737c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    7380:	2200      	movs	r2, #0
    7382:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    7386:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    738a:	508e      	str	r6, [r1, r2]
    738c:	491e      	ldr	r1, [pc, #120]	; (7408 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    738e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7392:	9000      	str	r0, [sp, #0]
    7394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7396:	4d1d      	ldr	r5, [pc, #116]	; (740c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    7398:	1f01      	subs	r1, r0, #4
    739a:	b2cc      	uxtb	r4, r1
    739c:	7829      	ldrb	r1, [r5, #0]
    739e:	b181      	cbz	r1, 73c2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    73a0:	786a      	ldrb	r2, [r5, #1]
    73a2:	4282      	cmp	r2, r0
    73a4:	d10d      	bne.n	73c2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    73a6:	4a1a      	ldr	r2, [pc, #104]	; (7410 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    73a8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    73ac:	6010      	str	r0, [r2, #0]
    73ae:	2901      	cmp	r1, #1
    73b0:	bf08      	it	eq
    73b2:	f7ff fd0b 	bleq	6dcc <MPSL_IRQ_TIMER0_Handler+0x100>
    73b6:	702e      	strb	r6, [r5, #0]
    73b8:	4a16      	ldr	r2, [pc, #88]	; (7414 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    73ba:	f04f 30ff 	mov.w	r0, #4294967295
    73be:	e9c2 0004 	strd	r0, r0, [r2, #16]
    73c2:	4915      	ldr	r1, [pc, #84]	; (7418 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    73c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    73c8:	40a0      	lsls	r0, r4
    73ca:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    73ce:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    73d2:	00a0      	lsls	r0, r4, #2
    73d4:	4408      	add	r0, r1
    73d6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    73da:	4a10      	ldr	r2, [pc, #64]	; (741c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    73dc:	6812      	ldr	r2, [r2, #0]
    73de:	1a80      	subs	r0, r0, r2
    73e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    73e4:	2802      	cmp	r0, #2
    73e6:	bf24      	itt	cs
    73e8:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    73ec:	500e      	strcs	r6, [r1, r0]
    73ee:	480c      	ldr	r0, [pc, #48]	; (7420 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    73f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    73f4:	9000      	str	r0, [sp, #0]
    73f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73f8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    73fc:	206c      	movs	r0, #108	; 0x6c
    73fe:	f000 fc7d 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7402:	0000      	.short	0x0000
    7404:	40008000 	.word	0x40008000
    7408:	40008140 	.word	0x40008140
    740c:	2000002a 	.word	0x2000002a
    7410:	4001f508 	.word	0x4001f508
    7414:	20000028 	.word	0x20000028
    7418:	4000b000 	.word	0x4000b000
    741c:	4000b504 	.word	0x4000b504
    7420:	4000b140 	.word	0x4000b140

00007424 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    7424:	481a      	ldr	r0, [pc, #104]	; (7490 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    7426:	7800      	ldrb	r0, [r0, #0]
    7428:	2800      	cmp	r0, #0
    742a:	bf07      	ittee	eq
    742c:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    7430:	2100      	moveq	r1, #0
    7432:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    7436:	2101      	movne	r1, #1
    7438:	4a16      	ldr	r2, [pc, #88]	; (7494 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    743a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    743e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7442:	2000      	movs	r0, #0
    7444:	2902      	cmp	r1, #2
    7446:	bf38      	it	cc
    7448:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    744c:	d207      	bcs.n	745e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    744e:	bf00      	nop
    7450:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    7454:	50d0      	str	r0, [r2, r3]
    7456:	1c49      	adds	r1, r1, #1
    7458:	b2c9      	uxtb	r1, r1
    745a:	2902      	cmp	r1, #2
    745c:	d3f8      	bcc.n	7450 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    745e:	490e      	ldr	r1, [pc, #56]	; (7498 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    7460:	f04f 32ff 	mov.w	r2, #4294967295
    7464:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    7468:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    746c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    7470:	1d0a      	adds	r2, r1, #4
    7472:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7476:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    747a:	1d12      	adds	r2, r2, #4
    747c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7480:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    7484:	1d12      	adds	r2, r2, #4
    7486:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    748a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    748e:	4770      	bx	lr
    7490:	2000002a 	.word	0x2000002a
    7494:	4000b000 	.word	0x4000b000
    7498:	40008000 	.word	0x40008000

0000749c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    749c:	b570      	push	{r4, r5, r6, lr}
    749e:	f3ef 8110 	mrs	r1, PRIMASK
    74a2:	b672      	cpsid	i
    74a4:	2400      	movs	r4, #0
    74a6:	4b0d      	ldr	r3, [pc, #52]	; (74dc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    74a8:	4a0d      	ldr	r2, [pc, #52]	; (74e0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    74aa:	bf00      	nop
    74ac:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    74b0:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    74b4:	f1bc 0f00 	cmp.w	ip, #0
    74b8:	d005      	beq.n	74c6 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    74ba:	6890      	ldr	r0, [r2, #8]
    74bc:	1c40      	adds	r0, r0, #1
    74be:	6090      	str	r0, [r2, #8]
    74c0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    74c4:	e7f2      	b.n	74ac <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    74c6:	6895      	ldr	r5, [r2, #8]
    74c8:	b901      	cbnz	r1, 74cc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    74ca:	b662      	cpsie	i
    74cc:	f002 fca8 	bl	9e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    74d0:	4a04      	ldr	r2, [pc, #16]	; (74e4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    74d2:	4621      	mov	r1, r4
    74d4:	fbe5 0102 	umlal	r0, r1, r5, r2
    74d8:	bd70      	pop	{r4, r5, r6, pc}
    74da:	0000      	.short	0x0000
    74dc:	4000b000 	.word	0x4000b000
    74e0:	20000028 	.word	0x20000028
    74e4:	1e848000 	.word	0x1e848000

000074e8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    74e8:	b510      	push	{r4, lr}
    74ea:	2807      	cmp	r0, #7
    74ec:	d20d      	bcs.n	750a <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    74ee:	e8df f000 	tbb	[pc, r0]
    74f2:	0404      	.short	0x0404
    74f4:	06060404 	.word	0x06060404
    74f8:	0006      	.short	0x0006
    74fa:	4906      	ldr	r1, [pc, #24]	; (7514 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    74fc:	e002      	b.n	7504 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    74fe:	1f00      	subs	r0, r0, #4
    7500:	4905      	ldr	r1, [pc, #20]	; (7518 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    7502:	b2c0      	uxtb	r0, r0
    7504:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7508:	bd10      	pop	{r4, pc}
    750a:	f240 417b 	movw	r1, #1147	; 0x47b
    750e:	206c      	movs	r0, #108	; 0x6c
    7510:	f000 fbf4 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7514:	40008140 	.word	0x40008140
    7518:	4000b140 	.word	0x4000b140

0000751c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    751c:	b510      	push	{r4, lr}
    751e:	2807      	cmp	r0, #7
    7520:	d20d      	bcs.n	753e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    7522:	e8df f000 	tbb	[pc, r0]
    7526:	0404      	.short	0x0404
    7528:	06060404 	.word	0x06060404
    752c:	0006      	.short	0x0006
    752e:	4906      	ldr	r1, [pc, #24]	; (7548 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    7530:	e002      	b.n	7538 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    7532:	1f00      	subs	r0, r0, #4
    7534:	4905      	ldr	r1, [pc, #20]	; (754c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    7536:	b2c0      	uxtb	r0, r0
    7538:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    753c:	bd10      	pop	{r4, pc}
    753e:	f240 417b 	movw	r1, #1147	; 0x47b
    7542:	206c      	movs	r0, #108	; 0x6c
    7544:	f000 fbda 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7548:	40008140 	.word	0x40008140
    754c:	4000b140 	.word	0x4000b140

00007550 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    7550:	b570      	push	{r4, r5, r6, lr}
    7552:	481b      	ldr	r0, [pc, #108]	; (75c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    7554:	2400      	movs	r4, #0
    7556:	2104      	movs	r1, #4
    7558:	7004      	strb	r4, [r0, #0]
    755a:	1e80      	subs	r0, r0, #2
    755c:	7001      	strb	r1, [r0, #0]
    755e:	1f49      	subs	r1, r1, #5
    7560:	e9c0 1104 	strd	r1, r1, [r0, #16]
    7564:	6084      	str	r4, [r0, #8]
    7566:	f7ff fc31 	bl	6dcc <MPSL_IRQ_TIMER0_Handler+0x100>
    756a:	2501      	movs	r5, #1
    756c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    7570:	02eb      	lsls	r3, r5, #11
    7572:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    7576:	f3bf 8f4f 	dsb	sy
    757a:	f3bf 8f6f 	isb	sy
    757e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    7582:	4a10      	ldr	r2, [pc, #64]	; (75c4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    7584:	6055      	str	r5, [r2, #4]
    7586:	6095      	str	r5, [r2, #8]
    7588:	480f      	ldr	r0, [pc, #60]	; (75c8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    758a:	6801      	ldr	r1, [r0, #0]
    758c:	2900      	cmp	r1, #0
    758e:	d1fc      	bne.n	758a <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    7590:	480e      	ldr	r0, [pc, #56]	; (75cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    7592:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7596:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    759a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    759e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    75a2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    75a6:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    75aa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    75ae:	6015      	str	r5, [r2, #0]
    75b0:	f44f 7082 	mov.w	r0, #260	; 0x104
    75b4:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    75b8:	2002      	movs	r0, #2
    75ba:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    75be:	bd70      	pop	{r4, r5, r6, pc}
    75c0:	2000002a 	.word	0x2000002a
    75c4:	4000b000 	.word	0x4000b000
    75c8:	4000b504 	.word	0x4000b504
    75cc:	00070002 	.word	0x00070002

000075d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    75d0:	4808      	ldr	r0, [pc, #32]	; (75f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    75d2:	f990 0000 	ldrsb.w	r0, [r0]
    75d6:	2800      	cmp	r0, #0
    75d8:	bfb8      	it	lt
    75da:	4770      	bxlt	lr
    75dc:	f000 011f 	and.w	r1, r0, #31
    75e0:	2201      	movs	r2, #1
    75e2:	fa02 f101 	lsl.w	r1, r2, r1
    75e6:	0940      	lsrs	r0, r0, #5
    75e8:	0080      	lsls	r0, r0, #2
    75ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    75ee:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    75f2:	4770      	bx	lr
    75f4:	20000198 	.word	0x20000198

000075f8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    75f8:	4803      	ldr	r0, [pc, #12]	; (7608 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    75fa:	7800      	ldrb	r0, [r0, #0]
    75fc:	2803      	cmp	r0, #3
    75fe:	bf0c      	ite	eq
    7600:	2001      	moveq	r0, #1
    7602:	2000      	movne	r0, #0
    7604:	4770      	bx	lr
    7606:	0000      	.short	0x0000
    7608:	20000170 	.word	0x20000170

0000760c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    760c:	4801      	ldr	r0, [pc, #4]	; (7614 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    760e:	8840      	ldrh	r0, [r0, #2]
    7610:	4770      	bx	lr
    7612:	0000      	.short	0x0000
    7614:	20000170 	.word	0x20000170

00007618 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    7618:	4803      	ldr	r0, [pc, #12]	; (7628 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    761a:	7800      	ldrb	r0, [r0, #0]
    761c:	2802      	cmp	r0, #2
    761e:	bf16      	itet	ne
    7620:	2803      	cmpne	r0, #3
    7622:	2001      	moveq	r0, #1
    7624:	2000      	movne	r0, #0
    7626:	4770      	bx	lr
    7628:	20000170 	.word	0x20000170

0000762c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    762c:	4802      	ldr	r0, [pc, #8]	; (7638 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    762e:	2100      	movs	r1, #0
    7630:	7001      	strb	r1, [r0, #0]
    7632:	8041      	strh	r1, [r0, #2]
    7634:	4770      	bx	lr
    7636:	0000      	.short	0x0000
    7638:	20000170 	.word	0x20000170

0000763c <MPSL_IRQ_CLOCK_Handler>:
    763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7640:	4c16      	ldr	r4, [pc, #88]	; (769c <MPSL_IRQ_CLOCK_Handler+0x60>)
    7642:	7a60      	ldrb	r0, [r4, #9]
    7644:	2800      	cmp	r0, #0
    7646:	d027      	beq.n	7698 <MPSL_IRQ_CLOCK_Handler+0x5c>
    7648:	f44f 7180 	mov.w	r1, #256	; 0x100
    764c:	058d      	lsls	r5, r1, #22
    764e:	4628      	mov	r0, r5
    7650:	f002 fc11 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7654:	4680      	mov	r8, r0
    7656:	f44f 7182 	mov.w	r1, #260	; 0x104
    765a:	4628      	mov	r0, r5
    765c:	f002 fc0b 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7660:	2600      	movs	r6, #0
    7662:	4607      	mov	r7, r0
    7664:	f1b8 0f00 	cmp.w	r8, #0
    7668:	d009      	beq.n	767e <MPSL_IRQ_CLOCK_Handler+0x42>
    766a:	2001      	movs	r0, #1
    766c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7670:	7920      	ldrb	r0, [r4, #4]
    7672:	b120      	cbz	r0, 767e <MPSL_IRQ_CLOCK_Handler+0x42>
    7674:	7126      	strb	r6, [r4, #4]
    7676:	69e0      	ldr	r0, [r4, #28]
    7678:	b108      	cbz	r0, 767e <MPSL_IRQ_CLOCK_Handler+0x42>
    767a:	4780      	blx	r0
    767c:	61e6      	str	r6, [r4, #28]
    767e:	b137      	cbz	r7, 768e <MPSL_IRQ_CLOCK_Handler+0x52>
    7680:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    7684:	2002      	movs	r0, #2
    7686:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    768a:	f000 fa57 	bl	7b3c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    768e:	4640      	mov	r0, r8
    7690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7694:	f000 b858 	b.w	7748 <MPSL_IRQ_CLOCK_Handler+0x10c>
    7698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    769c:	2000012c 	.word	0x2000012c
    76a0:	b510      	push	{r4, lr}
    76a2:	f002 fc92 	bl	9fca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    76a6:	b930      	cbnz	r0, 76b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    76a8:	f002 fcb0 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76ac:	b918      	cbnz	r0, 76b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    76ae:	f002 fce3 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    76b2:	2800      	cmp	r0, #0
    76b4:	d002      	beq.n	76bc <MPSL_IRQ_CLOCK_Handler+0x80>
    76b6:	4902      	ldr	r1, [pc, #8]	; (76c0 <MPSL_IRQ_CLOCK_Handler+0x84>)
    76b8:	2002      	movs	r0, #2
    76ba:	6008      	str	r0, [r1, #0]
    76bc:	bd10      	pop	{r4, pc}
    76be:	0000      	.short	0x0000
    76c0:	40000c34 	.word	0x40000c34
    76c4:	b570      	push	{r4, r5, r6, lr}
    76c6:	f000 f99b 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    76ca:	f000 fa9f 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    76ce:	4c09      	ldr	r4, [pc, #36]	; (76f4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    76d0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    76d4:	b130      	cbz	r0, 76e4 <MPSL_IRQ_CLOCK_Handler+0xa8>
    76d6:	f7ff ffe3 	bl	76a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    76da:	2001      	movs	r0, #1
    76dc:	6128      	str	r0, [r5, #16]
    76de:	2004      	movs	r0, #4
    76e0:	72a0      	strb	r0, [r4, #10]
    76e2:	e004      	b.n	76ee <MPSL_IRQ_CLOCK_Handler+0xb2>
    76e4:	2003      	movs	r0, #3
    76e6:	72a0      	strb	r0, [r4, #10]
    76e8:	2001      	movs	r0, #1
    76ea:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    76ee:	2000      	movs	r0, #0
    76f0:	71e0      	strb	r0, [r4, #7]
    76f2:	bd70      	pop	{r4, r5, r6, pc}
    76f4:	2000012c 	.word	0x2000012c
    76f8:	b570      	push	{r4, r5, r6, lr}
    76fa:	4c12      	ldr	r4, [pc, #72]	; (7744 <MPSL_IRQ_CLOCK_Handler+0x108>)
    76fc:	79a0      	ldrb	r0, [r4, #6]
    76fe:	b1e0      	cbz	r0, 773a <MPSL_IRQ_CLOCK_Handler+0xfe>
    7700:	79e1      	ldrb	r1, [r4, #7]
    7702:	1e40      	subs	r0, r0, #1
    7704:	4281      	cmp	r1, r0
    7706:	da18      	bge.n	773a <MPSL_IRQ_CLOCK_Handler+0xfe>
    7708:	f000 fa80 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    770c:	4605      	mov	r5, r0
    770e:	f000 fb69 	bl	7de4 <mpsl_temperature_get>
    7712:	79a1      	ldrb	r1, [r4, #6]
    7714:	2901      	cmp	r1, #1
    7716:	d902      	bls.n	771e <MPSL_IRQ_CLOCK_Handler+0xe2>
    7718:	79e1      	ldrb	r1, [r4, #7]
    771a:	1c49      	adds	r1, r1, #1
    771c:	71e1      	strb	r1, [r4, #7]
    771e:	b10d      	cbz	r5, 7724 <MPSL_IRQ_CLOCK_Handler+0xe8>
    7720:	6961      	ldr	r1, [r4, #20]
    7722:	e000      	b.n	7726 <MPSL_IRQ_CLOCK_Handler+0xea>
    7724:	6921      	ldr	r1, [r4, #16]
    7726:	1a41      	subs	r1, r0, r1
    7728:	2902      	cmp	r1, #2
    772a:	da02      	bge.n	7732 <MPSL_IRQ_CLOCK_Handler+0xf6>
    772c:	f111 0f02 	cmn.w	r1, #2
    7730:	dc07      	bgt.n	7742 <MPSL_IRQ_CLOCK_Handler+0x106>
    7732:	b10d      	cbz	r5, 7738 <MPSL_IRQ_CLOCK_Handler+0xfc>
    7734:	6160      	str	r0, [r4, #20]
    7736:	e000      	b.n	773a <MPSL_IRQ_CLOCK_Handler+0xfe>
    7738:	6120      	str	r0, [r4, #16]
    773a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    773e:	f7ff bfc1 	b.w	76c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    7742:	bd70      	pop	{r4, r5, r6, pc}
    7744:	2000012c 	.word	0x2000012c
    7748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    774c:	4606      	mov	r6, r0
    774e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7752:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7756:	4628      	mov	r0, r5
    7758:	f002 fb8d 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    775c:	4680      	mov	r8, r0
    775e:	f44f 7188 	mov.w	r1, #272	; 0x110
    7762:	4628      	mov	r0, r5
    7764:	f002 fb87 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7768:	4c27      	ldr	r4, [pc, #156]	; (7808 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    776a:	4682      	mov	sl, r0
    776c:	7827      	ldrb	r7, [r4, #0]
    776e:	f104 0008 	add.w	r0, r4, #8
    7772:	f002 fbf4 	bl	9f5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    7776:	b110      	cbz	r0, 777e <MPSL_IRQ_CLOCK_Handler+0x142>
    7778:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    777c:	e016      	b.n	77ac <MPSL_IRQ_CLOCK_Handler+0x170>
    777e:	f04f 0901 	mov.w	r9, #1
    7782:	b146      	cbz	r6, 7796 <MPSL_IRQ_CLOCK_Handler+0x15a>
    7784:	7aa0      	ldrb	r0, [r4, #10]
    7786:	2803      	cmp	r0, #3
    7788:	d105      	bne.n	7796 <MPSL_IRQ_CLOCK_Handler+0x15a>
    778a:	2004      	movs	r0, #4
    778c:	72a0      	strb	r0, [r4, #10]
    778e:	f7ff ff87 	bl	76a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    7792:	f8c5 9010 	str.w	r9, [r5, #16]
    7796:	2600      	movs	r6, #0
    7798:	f1b8 0f00 	cmp.w	r8, #0
    779c:	d018      	beq.n	77d0 <MPSL_IRQ_CLOCK_Handler+0x194>
    779e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    77a2:	7aa0      	ldrb	r0, [r4, #10]
    77a4:	2804      	cmp	r0, #4
    77a6:	d004      	beq.n	77b2 <MPSL_IRQ_CLOCK_Handler+0x176>
    77a8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    77ac:	206d      	movs	r0, #109	; 0x6d
    77ae:	f000 faa5 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    77b2:	f002 fc0a 	bl	9fca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    77b6:	b928      	cbnz	r0, 77c4 <MPSL_IRQ_CLOCK_Handler+0x188>
    77b8:	f002 fc28 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    77bc:	b910      	cbnz	r0, 77c4 <MPSL_IRQ_CLOCK_Handler+0x188>
    77be:	f002 fc5b 	bl	a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    77c2:	b108      	cbz	r0, 77c8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    77c4:	4811      	ldr	r0, [pc, #68]	; (780c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    77c6:	6006      	str	r6, [r0, #0]
    77c8:	2002      	movs	r0, #2
    77ca:	72a0      	strb	r0, [r4, #10]
    77cc:	f000 f8fc 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    77d0:	f1ba 0f00 	cmp.w	sl, #0
    77d4:	d008      	beq.n	77e8 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    77d6:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    77da:	7aa0      	ldrb	r0, [r4, #10]
    77dc:	2802      	cmp	r0, #2
    77de:	d101      	bne.n	77e4 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    77e0:	f7ff ff8a 	bl	76f8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    77e4:	f8c5 9014 	str.w	r9, [r5, #20]
    77e8:	b13f      	cbz	r7, 77fa <MPSL_IRQ_CLOCK_Handler+0x1be>
    77ea:	7026      	strb	r6, [r4, #0]
    77ec:	7aa0      	ldrb	r0, [r4, #10]
    77ee:	2802      	cmp	r0, #2
    77f0:	d101      	bne.n	77f6 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    77f2:	f7ff ff67 	bl	76c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    77f6:	f000 f8e7 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    77fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77fe:	4802      	ldr	r0, [pc, #8]	; (7808 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    7800:	3008      	adds	r0, #8
    7802:	f002 bbc3 	b.w	9f8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    7806:	0000      	.short	0x0000
    7808:	2000012c 	.word	0x2000012c
    780c:	40000c34 	.word	0x40000c34
    7810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7814:	4c49      	ldr	r4, [pc, #292]	; (793c <MPSL_IRQ_CLOCK_Handler+0x300>)
    7816:	2700      	movs	r7, #0
    7818:	4606      	mov	r6, r0
    781a:	61a7      	str	r7, [r4, #24]
    781c:	7842      	ldrb	r2, [r0, #1]
    781e:	7881      	ldrb	r1, [r0, #2]
    7820:	7800      	ldrb	r0, [r0, #0]
    7822:	72e0      	strb	r0, [r4, #11]
    7824:	7162      	strb	r2, [r4, #5]
    7826:	71a1      	strb	r1, [r4, #6]
    7828:	71e7      	strb	r7, [r4, #7]
    782a:	f04f 0801 	mov.w	r8, #1
    782e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7832:	2805      	cmp	r0, #5
    7834:	d225      	bcs.n	7882 <MPSL_IRQ_CLOCK_Handler+0x246>
    7836:	e8df f000 	tbb	[pc, r0]
    783a:	0310      	.short	0x0310
    783c:	00222006 	.word	0x00222006
    7840:	f8c4 8018 	str.w	r8, [r4, #24]
    7844:	e009      	b.n	785a <MPSL_IRQ_CLOCK_Handler+0x21e>
    7846:	f000 f8db 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    784a:	2101      	movs	r1, #1
    784c:	4628      	mov	r0, r5
    784e:	f002 fb17 	bl	9e80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7852:	2800      	cmp	r0, #0
    7854:	d0f9      	beq.n	784a <MPSL_IRQ_CLOCK_Handler+0x20e>
    7856:	2002      	movs	r0, #2
    7858:	61a0      	str	r0, [r4, #24]
    785a:	f002 fb3d 	bl	9ed8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    785e:	b1c0      	cbz	r0, 7892 <MPSL_IRQ_CLOCK_Handler+0x256>
    7860:	f000 f9ee 	bl	7c40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    7864:	7e21      	ldrb	r1, [r4, #24]
    7866:	f001 0103 	and.w	r1, r1, #3
    786a:	4288      	cmp	r0, r1
    786c:	d111      	bne.n	7892 <MPSL_IRQ_CLOCK_Handler+0x256>
    786e:	79b0      	ldrb	r0, [r6, #6]
    7870:	b160      	cbz	r0, 788c <MPSL_IRQ_CLOCK_Handler+0x250>
    7872:	2002      	movs	r0, #2
    7874:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7878:	e044      	b.n	7904 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    787a:	4831      	ldr	r0, [pc, #196]	; (7940 <MPSL_IRQ_CLOCK_Handler+0x304>)
    787c:	e7ec      	b.n	7858 <MPSL_IRQ_CLOCK_Handler+0x21c>
    787e:	4831      	ldr	r0, [pc, #196]	; (7944 <MPSL_IRQ_CLOCK_Handler+0x308>)
    7880:	e7ea      	b.n	7858 <MPSL_IRQ_CLOCK_Handler+0x21c>
    7882:	f240 313d 	movw	r1, #829	; 0x33d
    7886:	206d      	movs	r0, #109	; 0x6d
    7888:	f000 fa38 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    788c:	f000 f9ac 	bl	7be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7890:	e038      	b.n	7904 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    7892:	f8c5 800c 	str.w	r8, [r5, #12]
    7896:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    789a:	69a0      	ldr	r0, [r4, #24]
    789c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    78a0:	f002 fb7f 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    78a4:	b940      	cbnz	r0, 78b8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    78a6:	f002 fb86 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    78aa:	b928      	cbnz	r0, 78b8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    78ac:	f002 fb9a 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    78b0:	b910      	cbnz	r0, 78b8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    78b2:	f002 fbab 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    78b6:	b138      	cbz	r0, 78c8 <MPSL_IRQ_CLOCK_Handler+0x28c>
    78b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    78bc:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    78c0:	4921      	ldr	r1, [pc, #132]	; (7948 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    78c2:	f3c0 3042 	ubfx	r0, r0, #13, #3
    78c6:	6008      	str	r0, [r1, #0]
    78c8:	f002 fb6b 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    78cc:	b940      	cbnz	r0, 78e0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78ce:	f002 fb72 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    78d2:	b928      	cbnz	r0, 78e0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78d4:	f002 fb86 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    78d8:	b910      	cbnz	r0, 78e0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78da:	f002 fb97 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    78de:	b118      	cbz	r0, 78e8 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    78e0:	4919      	ldr	r1, [pc, #100]	; (7948 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    78e2:	3110      	adds	r1, #16
    78e4:	f8c1 8000 	str.w	r8, [r1]
    78e8:	f8c5 8008 	str.w	r8, [r5, #8]
    78ec:	2002      	movs	r0, #2
    78ee:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    78f2:	79b0      	ldrb	r0, [r6, #6]
    78f4:	b930      	cbnz	r0, 7904 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    78f6:	f000 f829 	bl	794c <MPSL_IRQ_CLOCK_Handler+0x310>
    78fa:	2002      	movs	r0, #2
    78fc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7900:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    7904:	79a0      	ldrb	r0, [r4, #6]
    7906:	b170      	cbz	r0, 7926 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7908:	7830      	ldrb	r0, [r6, #0]
    790a:	b960      	cbnz	r0, 7926 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    790c:	f000 f97e 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7910:	4606      	mov	r6, r0
    7912:	f000 fa67 	bl	7de4 <mpsl_temperature_get>
    7916:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    791a:	b116      	cbz	r6, 7922 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    791c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    7920:	e001      	b.n	7926 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7922:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7926:	2101      	movs	r1, #1
    7928:	4628      	mov	r0, r5
    792a:	f002 faa9 	bl	9e80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    792e:	b108      	cbz	r0, 7934 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    7930:	f000 f966 	bl	7c00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7934:	72a7      	strb	r7, [r4, #10]
    7936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    793a:	0000      	.short	0x0000
    793c:	2000012c 	.word	0x2000012c
    7940:	00020001 	.word	0x00020001
    7944:	00030001 	.word	0x00030001
    7948:	4000053c 	.word	0x4000053c
    794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7950:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7954:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    7958:	f010 0f02 	tst.w	r0, #2
    795c:	d011      	beq.n	7982 <MPSL_IRQ_CLOCK_Handler+0x346>
    795e:	4c16      	ldr	r4, [pc, #88]	; (79b8 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    7960:	6820      	ldr	r0, [r4, #0]
    7962:	43c0      	mvns	r0, r0
    7964:	f340 1600 	sbfx	r6, r0, #4, #1
    7968:	6820      	ldr	r0, [r4, #0]
    796a:	f040 0010 	orr.w	r0, r0, #16
    796e:	6020      	str	r0, [r4, #0]
    7970:	f44f 7782 	mov.w	r7, #260	; 0x104
    7974:	4639      	mov	r1, r7
    7976:	4628      	mov	r0, r5
    7978:	1c76      	adds	r6, r6, #1
    797a:	f002 fa7c 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    797e:	b128      	cbz	r0, 798c <MPSL_IRQ_CLOCK_Handler+0x350>
    7980:	e00a      	b.n	7998 <MPSL_IRQ_CLOCK_Handler+0x35c>
    7982:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    7986:	206d      	movs	r0, #109	; 0x6d
    7988:	f000 f9b8 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    798c:	f002 fb80 	bl	a090 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    7990:	e002      	b.n	7998 <MPSL_IRQ_CLOCK_Handler+0x35c>
    7992:	bf00      	nop
    7994:	f002 fb7a 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7998:	4639      	mov	r1, r7
    799a:	4628      	mov	r0, r5
    799c:	f002 fa6b 	bl	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    79a0:	2800      	cmp	r0, #0
    79a2:	d0f7      	beq.n	7994 <MPSL_IRQ_CLOCK_Handler+0x358>
    79a4:	f000 f920 	bl	7be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    79a8:	2e00      	cmp	r6, #0
    79aa:	d103      	bne.n	79b4 <MPSL_IRQ_CLOCK_Handler+0x378>
    79ac:	6820      	ldr	r0, [r4, #0]
    79ae:	f020 0010 	bic.w	r0, r0, #16
    79b2:	6020      	str	r0, [r4, #0]
    79b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79b8:	e000ed10 	.word	0xe000ed10

000079bc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    79bc:	4801      	ldr	r0, [pc, #4]	; (79c4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    79be:	89c0      	ldrh	r0, [r0, #14]
    79c0:	4770      	bx	lr
    79c2:	0000      	.short	0x0000
    79c4:	2000012c 	.word	0x2000012c

000079c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    79c8:	b510      	push	{r4, lr}
    79ca:	f3ef 8410 	mrs	r4, PRIMASK
    79ce:	b672      	cpsid	i
    79d0:	480a      	ldr	r0, [pc, #40]	; (79fc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    79d2:	7841      	ldrb	r1, [r0, #1]
    79d4:	b129      	cbz	r1, 79e2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    79d6:	7841      	ldrb	r1, [r0, #1]
    79d8:	1e49      	subs	r1, r1, #1
    79da:	7041      	strb	r1, [r0, #1]
    79dc:	7841      	ldrb	r1, [r0, #1]
    79de:	b129      	cbz	r1, 79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    79e0:	e008      	b.n	79f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    79e2:	f240 1119 	movw	r1, #281	; 0x119
    79e6:	206d      	movs	r0, #109	; 0x6d
    79e8:	f000 f988 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    79ec:	7880      	ldrb	r0, [r0, #2]
    79ee:	b908      	cbnz	r0, 79f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    79f0:	f000 f91a 	bl	7c28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    79f4:	2c00      	cmp	r4, #0
    79f6:	d100      	bne.n	79fa <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    79f8:	b662      	cpsie	i
    79fa:	bd10      	pop	{r4, pc}
    79fc:	2000012c 	.word	0x2000012c

00007a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    7a00:	b510      	push	{r4, lr}
    7a02:	f3ef 8410 	mrs	r4, PRIMASK
    7a06:	b672      	cpsid	i
    7a08:	4806      	ldr	r0, [pc, #24]	; (7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    7a0a:	7841      	ldrb	r1, [r0, #1]
    7a0c:	1c49      	adds	r1, r1, #1
    7a0e:	7041      	strb	r1, [r0, #1]
    7a10:	7840      	ldrb	r0, [r0, #1]
    7a12:	2801      	cmp	r0, #1
    7a14:	d101      	bne.n	7a1a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    7a16:	f002 fa4a 	bl	9eae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    7a1a:	2c00      	cmp	r4, #0
    7a1c:	d100      	bne.n	7a20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    7a1e:	b662      	cpsie	i
    7a20:	bd10      	pop	{r4, pc}
    7a22:	0000      	.short	0x0000
    7a24:	2000012c 	.word	0x2000012c

00007a28 <mpsl_clock_hfclk_release>:
    7a28:	4805      	ldr	r0, [pc, #20]	; (7a40 <mpsl_clock_hfclk_release+0x18>)
    7a2a:	b510      	push	{r4, lr}
    7a2c:	78c1      	ldrb	r1, [r0, #3]
    7a2e:	b121      	cbz	r1, 7a3a <mpsl_clock_hfclk_release+0x12>
    7a30:	2100      	movs	r1, #0
    7a32:	7101      	strb	r1, [r0, #4]
    7a34:	70c1      	strb	r1, [r0, #3]
    7a36:	f7ff ffc7 	bl	79c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7a3a:	2000      	movs	r0, #0
    7a3c:	bd10      	pop	{r4, pc}
    7a3e:	0000      	.short	0x0000
    7a40:	2000012c 	.word	0x2000012c

00007a44 <mpsl_clock_hfclk_request>:
    7a44:	b570      	push	{r4, r5, r6, lr}
    7a46:	4c0c      	ldr	r4, [pc, #48]	; (7a78 <mpsl_clock_hfclk_request+0x34>)
    7a48:	78e1      	ldrb	r1, [r4, #3]
    7a4a:	b961      	cbnz	r1, 7a66 <mpsl_clock_hfclk_request+0x22>
    7a4c:	2501      	movs	r5, #1
    7a4e:	70e5      	strb	r5, [r4, #3]
    7a50:	61e0      	str	r0, [r4, #28]
    7a52:	f7ff ffd5 	bl	7a00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7a56:	f000 f8d9 	bl	7c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7a5a:	b130      	cbz	r0, 7a6a <mpsl_clock_hfclk_request+0x26>
    7a5c:	69e0      	ldr	r0, [r4, #28]
    7a5e:	b110      	cbz	r0, 7a66 <mpsl_clock_hfclk_request+0x22>
    7a60:	4780      	blx	r0
    7a62:	2000      	movs	r0, #0
    7a64:	61e0      	str	r0, [r4, #28]
    7a66:	2000      	movs	r0, #0
    7a68:	bd70      	pop	{r4, r5, r6, pc}
    7a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7a6e:	7125      	strb	r5, [r4, #4]
    7a70:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    7a74:	e7f7      	b.n	7a66 <mpsl_clock_hfclk_request+0x22>
    7a76:	0000      	.short	0x0000
    7a78:	2000012c 	.word	0x2000012c

00007a7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    7a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a80:	0005      	movs	r5, r0
    7a82:	f06f 0015 	mvn.w	r0, #21
    7a86:	d03f      	beq.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a88:	7829      	ldrb	r1, [r5, #0]
    7a8a:	2904      	cmp	r1, #4
    7a8c:	d83c      	bhi.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a8e:	2900      	cmp	r1, #0
    7a90:	7869      	ldrb	r1, [r5, #1]
    7a92:	d03b      	beq.n	7b0c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    7a94:	2900      	cmp	r1, #0
    7a96:	d137      	bne.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a98:	78a9      	ldrb	r1, [r5, #2]
    7a9a:	2900      	cmp	r1, #0
    7a9c:	d134      	bne.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7a9e:	2000      	movs	r0, #0
    7aa0:	f002 f9d8 	bl	9e54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    7aa4:	2000      	movs	r0, #0
    7aa6:	f002 f9c8 	bl	9e3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7aaa:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7aae:	f04f 31ff 	mov.w	r1, #4294967295
    7ab2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    7ab6:	2600      	movs	r6, #0
    7ab8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    7abc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    7ac0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    7ac4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    7ac8:	4c14      	ldr	r4, [pc, #80]	; (7b1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    7aca:	7066      	strb	r6, [r4, #1]
    7acc:	88a8      	ldrh	r0, [r5, #4]
    7ace:	81a0      	strh	r0, [r4, #12]
    7ad0:	f002 f9e4 	bl	9e9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    7ad4:	2701      	movs	r7, #1
    7ad6:	b108      	cbz	r0, 7adc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    7ad8:	70e7      	strb	r7, [r4, #3]
    7ada:	7067      	strb	r7, [r4, #1]
    7adc:	2101      	movs	r1, #1
    7ade:	4640      	mov	r0, r8
    7ae0:	f002 f9ce 	bl	9e80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7ae4:	b108      	cbz	r0, 7aea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    7ae6:	f000 f88b 	bl	7c00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7aea:	f240 50f5 	movw	r0, #1525	; 0x5f5
    7aee:	81e0      	strh	r0, [r4, #14]
    7af0:	4628      	mov	r0, r5
    7af2:	f7ff fe8d 	bl	7810 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    7af6:	7267      	strb	r7, [r4, #9]
    7af8:	2000      	movs	r0, #0
    7afa:	f002 f99e 	bl	9e3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7afe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7b02:	4630      	mov	r0, r6
    7b04:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    7b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b0c:	2900      	cmp	r1, #0
    7b0e:	d0fb      	beq.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b10:	2920      	cmp	r1, #32
    7b12:	d8f9      	bhi.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b14:	78a9      	ldrb	r1, [r5, #2]
    7b16:	2921      	cmp	r1, #33	; 0x21
    7b18:	d9c1      	bls.n	7a9e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    7b1a:	e7f5      	b.n	7b08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b1c:	2000012c 	.word	0x2000012c

00007b20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    7b20:	4801      	ldr	r0, [pc, #4]	; (7b28 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    7b22:	8980      	ldrh	r0, [r0, #12]
    7b24:	4770      	bx	lr
    7b26:	0000      	.short	0x0000
    7b28:	2000012c 	.word	0x2000012c

00007b2c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    7b2c:	4802      	ldr	r0, [pc, #8]	; (7b38 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    7b2e:	7a80      	ldrb	r0, [r0, #10]
    7b30:	2800      	cmp	r0, #0
    7b32:	d000      	beq.n	7b36 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    7b34:	2001      	movs	r0, #1
    7b36:	4770      	bx	lr
    7b38:	2000012c 	.word	0x2000012c

00007b3c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b3e:	4d1f      	ldr	r5, [pc, #124]	; (7bbc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7b40:	7ae8      	ldrb	r0, [r5, #11]
    7b42:	2800      	cmp	r0, #0
    7b44:	d10f      	bne.n	7b66 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b46:	7e28      	ldrb	r0, [r5, #24]
    7b48:	f000 0003 	and.w	r0, r0, #3
    7b4c:	f002 f9b4 	bl	9eb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7b50:	2800      	cmp	r0, #0
    7b52:	d008      	beq.n	7b66 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b54:	f3ef 8110 	mrs	r1, PRIMASK
    7b58:	b672      	cpsid	i
    7b5a:	f7ff ffe7 	bl	7b2c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7b5e:	b118      	cbz	r0, 7b68 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    7b60:	2900      	cmp	r1, #0
    7b62:	d100      	bne.n	7b66 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b64:	b662      	cpsie	i
    7b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b68:	2601      	movs	r6, #1
    7b6a:	72ae      	strb	r6, [r5, #10]
    7b6c:	b901      	cbnz	r1, 7b70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    7b6e:	b662      	cpsie	i
    7b70:	2018      	movs	r0, #24
    7b72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7b76:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7b7a:	61a6      	str	r6, [r4, #24]
    7b7c:	f44f 7020 	mov.w	r0, #640	; 0x280
    7b80:	f8ad 0000 	strh.w	r0, [sp]
    7b84:	f8bd 0000 	ldrh.w	r0, [sp]
    7b88:	1e41      	subs	r1, r0, #1
    7b8a:	f8ad 1000 	strh.w	r1, [sp]
    7b8e:	d2f9      	bcs.n	7b84 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    7b90:	2700      	movs	r7, #0
    7b92:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    7b96:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    7b9a:	4808      	ldr	r0, [pc, #32]	; (7bbc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7b9c:	3008      	adds	r0, #8
    7b9e:	f002 f9f1 	bl	9f84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    7ba2:	702f      	strb	r7, [r5, #0]
    7ba4:	f7ff fd8e 	bl	76c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    7ba8:	6166      	str	r6, [r4, #20]
    7baa:	7968      	ldrb	r0, [r5, #5]
    7bac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7bb0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7bb4:	2018      	movs	r0, #24
    7bb6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bbc:	2000012c 	.word	0x2000012c

00007bc0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7bc0:	4602      	mov	r2, r0
    7bc2:	b510      	push	{r4, lr}
    7bc4:	2000      	movs	r0, #0
    7bc6:	2900      	cmp	r1, #0
    7bc8:	d00a      	beq.n	7be0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7bca:	2a00      	cmp	r2, #0
    7bcc:	d008      	beq.n	7be0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7bce:	fba2 0101 	umull	r0, r1, r2, r1
    7bd2:	1e40      	subs	r0, r0, #1
    7bd4:	4a03      	ldr	r2, [pc, #12]	; (7be4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    7bd6:	f141 31ff 	adc.w	r1, r1, #4294967295
    7bda:	f002 fa5b 	bl	a094 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    7bde:	1c40      	adds	r0, r0, #1
    7be0:	bd10      	pop	{r4, pc}
    7be2:	0000      	.short	0x0000
    7be4:	000f4240 	.word	0x000f4240

00007be8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    7be8:	b510      	push	{r4, lr}
    7bea:	4c04      	ldr	r4, [pc, #16]	; (7bfc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    7bec:	7e20      	ldrb	r0, [r4, #24]
    7bee:	f000 0003 	and.w	r0, r0, #3
    7bf2:	f002 f961 	bl	9eb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7bf6:	2800      	cmp	r0, #0
    7bf8:	d0f8      	beq.n	7bec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    7bfa:	bd10      	pop	{r4, pc}
    7bfc:	2000012c 	.word	0x2000012c

00007c00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    7c00:	4901      	ldr	r1, [pc, #4]	; (7c08 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    7c02:	2001      	movs	r0, #1
    7c04:	7008      	strb	r0, [r1, #0]
    7c06:	4770      	bx	lr
    7c08:	20000199 	.word	0x20000199

00007c0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    7c0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7c10:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c14:	b918      	cbnz	r0, 7c1e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    7c16:	4803      	ldr	r0, [pc, #12]	; (7c24 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    7c18:	7800      	ldrb	r0, [r0, #0]
    7c1a:	2800      	cmp	r0, #0
    7c1c:	d000      	beq.n	7c20 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    7c1e:	2001      	movs	r0, #1
    7c20:	4770      	bx	lr
    7c22:	0000      	.short	0x0000
    7c24:	20000199 	.word	0x20000199

00007c28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    7c28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7c2c:	2101      	movs	r1, #1
    7c2e:	6041      	str	r1, [r0, #4]
    7c30:	2100      	movs	r1, #0
    7c32:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c36:	4801      	ldr	r0, [pc, #4]	; (7c3c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    7c38:	7001      	strb	r1, [r0, #0]
    7c3a:	4770      	bx	lr
    7c3c:	20000199 	.word	0x20000199

00007c40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    7c40:	4802      	ldr	r0, [pc, #8]	; (7c4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    7c42:	6800      	ldr	r0, [r0, #0]
    7c44:	f000 0003 	and.w	r0, r0, #3
    7c48:	4770      	bx	lr
    7c4a:	0000      	.short	0x0000
    7c4c:	4000041c 	.word	0x4000041c
    7c50:	b510      	push	{r4, lr}
    7c52:	b131      	cbz	r1, 7c62 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    7c54:	2901      	cmp	r1, #1
    7c56:	d007      	beq.n	7c68 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    7c58:	f240 3102 	movw	r1, #770	; 0x302
    7c5c:	a005      	add	r0, pc, #20	; (adr r0, 7c74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    7c5e:	f000 f821 	bl	7ca4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    7c62:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    7c66:	e001      	b.n	7c6c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    7c68:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    7c6c:	f000 0001 	and.w	r0, r0, #1
    7c70:	bd10      	pop	{r4, pc}
    7c72:	0000      	.short	0x0000
    7c74:	5f66726e 	.word	0x5f66726e
    7c78:	636f6c63 	.word	0x636f6c63
    7c7c:	00682e6b 	.word	0x00682e6b
    7c80:	f3bf 8f4f 	dsb	sy
    7c84:	4805      	ldr	r0, [pc, #20]	; (7c9c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    7c86:	6801      	ldr	r1, [r0, #0]
    7c88:	4a05      	ldr	r2, [pc, #20]	; (7ca0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    7c8a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    7c8e:	4311      	orrs	r1, r2
    7c90:	6001      	str	r1, [r0, #0]
    7c92:	f3bf 8f4f 	dsb	sy
    7c96:	bf00      	nop
    7c98:	e7fd      	b.n	7c96 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    7c9a:	0000      	.short	0x0000
    7c9c:	e000ed0c 	.word	0xe000ed0c
    7ca0:	05fa0004 	.word	0x05fa0004

00007ca4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    7ca4:	b672      	cpsid	i
    7ca6:	4a03      	ldr	r2, [pc, #12]	; (7cb4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    7ca8:	6852      	ldr	r2, [r2, #4]
    7caa:	b102      	cbz	r2, 7cae <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    7cac:	4790      	blx	r2
    7cae:	f7ff ffe7 	bl	7c80 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7cb2:	0000      	.short	0x0000
    7cb4:	2000014c 	.word	0x2000014c
    7cb8:	4806      	ldr	r0, [pc, #24]	; (7cd4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    7cba:	b510      	push	{r4, lr}
    7cbc:	2100      	movs	r1, #0
    7cbe:	6001      	str	r1, [r0, #0]
    7cc0:	2101      	movs	r1, #1
    7cc2:	6001      	str	r1, [r0, #0]
    7cc4:	4608      	mov	r0, r1
    7cc6:	f002 f91e 	bl	9f06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cce:	2001      	movs	r0, #1
    7cd0:	f002 b90c 	b.w	9eec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7cd4:	40001ffc 	.word	0x40001ffc
    7cd8:	4807      	ldr	r0, [pc, #28]	; (7cf8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    7cda:	b510      	push	{r4, lr}
    7cdc:	2101      	movs	r1, #1
    7cde:	6041      	str	r1, [r0, #4]
    7ce0:	1e89      	subs	r1, r1, #2
    7ce2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    7ce6:	200c      	movs	r0, #12
    7ce8:	f002 f90d 	bl	9f06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cf0:	200c      	movs	r0, #12
    7cf2:	f002 b8fb 	b.w	9eec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7cf6:	0000      	.short	0x0000
    7cf8:	4000c000 	.word	0x4000c000

00007cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    7cfc:	b50e      	push	{r1, r2, r3, lr}
    7cfe:	b672      	cpsid	i
    7d00:	4a0f      	ldr	r2, [pc, #60]	; (7d40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    7d02:	6855      	ldr	r5, [r2, #4]
    7d04:	b1d5      	cbz	r5, 7d3c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    7d06:	2200      	movs	r2, #0
    7d08:	4603      	mov	r3, r0
    7d0a:	466e      	mov	r6, sp
    7d0c:	240a      	movs	r4, #10
    7d0e:	e003      	b.n	7d18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    7d10:	fbb0 f0f4 	udiv	r0, r0, r4
    7d14:	1c52      	adds	r2, r2, #1
    7d16:	b2d2      	uxtb	r2, r2
    7d18:	2800      	cmp	r0, #0
    7d1a:	d1f9      	bne.n	7d10 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    7d1c:	54b0      	strb	r0, [r6, r2]
    7d1e:	e009      	b.n	7d34 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    7d20:	fbb3 f0f4 	udiv	r0, r3, r4
    7d24:	fb04 3010 	mls	r0, r4, r0, r3
    7d28:	fbb3 f3f4 	udiv	r3, r3, r4
    7d2c:	1e52      	subs	r2, r2, #1
    7d2e:	b2d2      	uxtb	r2, r2
    7d30:	3030      	adds	r0, #48	; 0x30
    7d32:	54b0      	strb	r0, [r6, r2]
    7d34:	2a00      	cmp	r2, #0
    7d36:	d1f3      	bne.n	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    7d38:	4630      	mov	r0, r6
    7d3a:	47a8      	blx	r5
    7d3c:	f7ff ffa0 	bl	7c80 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7d40:	2000014c 	.word	0x2000014c

00007d44 <mpsl_init>:
    7d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d48:	4c18      	ldr	r4, [pc, #96]	; (7dac <mpsl_init+0x68>)
    7d4a:	4606      	mov	r6, r0
    7d4c:	4617      	mov	r7, r2
    7d4e:	7860      	ldrb	r0, [r4, #1]
    7d50:	460d      	mov	r5, r1
    7d52:	b118      	cbz	r0, 7d5c <mpsl_init+0x18>
    7d54:	f04f 30ff 	mov.w	r0, #4294967295
    7d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d5c:	f7fc fb9e 	bl	449c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    7d60:	b906      	cbnz	r6, 7d64 <mpsl_init+0x20>
    7d62:	4e13      	ldr	r6, [pc, #76]	; (7db0 <mpsl_init+0x6c>)
    7d64:	6067      	str	r7, [r4, #4]
    7d66:	7025      	strb	r5, [r4, #0]
    7d68:	f7ff ffa6 	bl	7cb8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    7d6c:	f7ff ffb4 	bl	7cd8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    7d70:	4630      	mov	r0, r6
    7d72:	f7ff fe83 	bl	7a7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    7d76:	0006      	movs	r6, r0
    7d78:	d1ee      	bne.n	7d58 <mpsl_init+0x14>
    7d7a:	f7fe fe4f 	bl	6a1c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    7d7e:	f7ff fedd 	bl	7b3c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    7d82:	f002 f830 	bl	9de6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    7d86:	4628      	mov	r0, r5
    7d88:	f002 f8b0 	bl	9eec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7d8c:	2001      	movs	r0, #1
    7d8e:	2d00      	cmp	r5, #0
    7d90:	db09      	blt.n	7da6 <mpsl_init+0x62>
    7d92:	f005 011f 	and.w	r1, r5, #31
    7d96:	fa00 f101 	lsl.w	r1, r0, r1
    7d9a:	096a      	lsrs	r2, r5, #5
    7d9c:	0092      	lsls	r2, r2, #2
    7d9e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    7da2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    7da6:	7060      	strb	r0, [r4, #1]
    7da8:	4630      	mov	r0, r6
    7daa:	e7d5      	b.n	7d58 <mpsl_init+0x14>
    7dac:	2000014c 	.word	0x2000014c
    7db0:	00009f28 	.word	0x00009f28

00007db4 <mpsl_is_initialized>:
    7db4:	4801      	ldr	r0, [pc, #4]	; (7dbc <mpsl_is_initialized+0x8>)
    7db6:	7840      	ldrb	r0, [r0, #1]
    7db8:	4770      	bx	lr
    7dba:	0000      	.short	0x0000
    7dbc:	2000014c 	.word	0x2000014c

00007dc0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    7dc0:	4807      	ldr	r0, [pc, #28]	; (7de0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    7dc2:	f990 0000 	ldrsb.w	r0, [r0]
    7dc6:	2800      	cmp	r0, #0
    7dc8:	db09      	blt.n	7dde <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    7dca:	f000 021f 	and.w	r2, r0, #31
    7dce:	2101      	movs	r1, #1
    7dd0:	4091      	lsls	r1, r2
    7dd2:	0940      	lsrs	r0, r0, #5
    7dd4:	0080      	lsls	r0, r0, #2
    7dd6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7dda:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7dde:	4770      	bx	lr
    7de0:	2000014c 	.word	0x2000014c

00007de4 <mpsl_temperature_get>:
    7de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7de8:	2501      	movs	r5, #1
    7dea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7dee:	0329      	lsls	r1, r5, #12
    7df0:	f04f 0800 	mov.w	r8, #0
    7df4:	4640      	mov	r0, r8
    7df6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    7dfa:	f3bf 8f4f 	dsb	sy
    7dfe:	f3bf 8f6f 	isb	sy
    7e02:	4c16      	ldr	r4, [pc, #88]	; (7e5c <mpsl_temperature_get+0x78>)
    7e04:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7e08:	200c      	movs	r0, #12
    7e0a:	f002 f89b 	bl	9f44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7e0e:	4e14      	ldr	r6, [pc, #80]	; (7e60 <mpsl_temperature_get+0x7c>)
    7e10:	6830      	ldr	r0, [r6, #0]
    7e12:	43c0      	mvns	r0, r0
    7e14:	f340 1700 	sbfx	r7, r0, #4, #1
    7e18:	6830      	ldr	r0, [r6, #0]
    7e1a:	f040 0010 	orr.w	r0, r0, #16
    7e1e:	6030      	str	r0, [r6, #0]
    7e20:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    7e24:	6025      	str	r5, [r4, #0]
    7e26:	1c7f      	adds	r7, r7, #1
    7e28:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    7e2c:	b108      	cbz	r0, 7e32 <mpsl_temperature_get+0x4e>
    7e2e:	b11f      	cbz	r7, 7e38 <mpsl_temperature_get+0x54>
    7e30:	e006      	b.n	7e40 <mpsl_temperature_get+0x5c>
    7e32:	f002 f92b 	bl	a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e36:	e7f7      	b.n	7e28 <mpsl_temperature_get+0x44>
    7e38:	6830      	ldr	r0, [r6, #0]
    7e3a:	f020 0010 	bic.w	r0, r0, #16
    7e3e:	6030      	str	r0, [r6, #0]
    7e40:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    7e44:	6065      	str	r5, [r4, #4]
    7e46:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    7e4a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    7e4e:	200c      	movs	r0, #12
    7e50:	f002 f878 	bl	9f44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7e54:	4630      	mov	r0, r6
    7e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e5a:	0000      	.short	0x0000
    7e5c:	4000c000 	.word	0x4000c000
    7e60:	e000ed10 	.word	0xe000ed10

00007e64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    7e64:	b510      	push	{r4, lr}
    7e66:	4602      	mov	r2, r0
    7e68:	2005      	movs	r0, #5
    7e6a:	490c      	ldr	r1, [pc, #48]	; (7e9c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    7e6c:	e004      	b.n	7e78 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    7e6e:	bf00      	nop
    7e70:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    7e74:	791b      	ldrb	r3, [r3, #4]
    7e76:	b133      	cbz	r3, 7e86 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    7e78:	1e40      	subs	r0, r0, #1
    7e7a:	b2c0      	uxtb	r0, r0
    7e7c:	d2f8      	bcs.n	7e70 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    7e7e:	2148      	movs	r1, #72	; 0x48
    7e80:	2069      	movs	r0, #105	; 0x69
    7e82:	f7ff ff3b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7e86:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    7e8a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7e8e:	2200      	movs	r2, #0
    7e90:	714a      	strb	r2, [r1, #5]
    7e92:	718a      	strb	r2, [r1, #6]
    7e94:	2201      	movs	r2, #1
    7e96:	710a      	strb	r2, [r1, #4]
    7e98:	bd10      	pop	{r4, pc}
    7e9a:	0000      	.short	0x0000
    7e9c:	20000e4c 	.word	0x20000e4c

00007ea0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    7ea0:	b510      	push	{r4, lr}
    7ea2:	2805      	cmp	r0, #5
    7ea4:	d301      	bcc.n	7eaa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    7ea6:	2158      	movs	r1, #88	; 0x58
    7ea8:	e006      	b.n	7eb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    7eaa:	490a      	ldr	r1, [pc, #40]	; (7ed4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    7eac:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7eb0:	7901      	ldrb	r1, [r0, #4]
    7eb2:	2901      	cmp	r1, #1
    7eb4:	d003      	beq.n	7ebe <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    7eb6:	2159      	movs	r1, #89	; 0x59
    7eb8:	2069      	movs	r0, #105	; 0x69
    7eba:	f7ff ff1f 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ebe:	7941      	ldrb	r1, [r0, #5]
    7ec0:	7982      	ldrb	r2, [r0, #6]
    7ec2:	1c49      	adds	r1, r1, #1
    7ec4:	b2c9      	uxtb	r1, r1
    7ec6:	428a      	cmp	r2, r1
    7ec8:	d000      	beq.n	7ecc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    7eca:	7141      	strb	r1, [r0, #5]
    7ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed0:	f7ff bf76 	b.w	7dc0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    7ed4:	20000e4c 	.word	0x20000e4c

00007ed8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    7ed8:	b510      	push	{r4, lr}
    7eda:	2805      	cmp	r0, #5
    7edc:	d303      	bcc.n	7ee6 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    7ede:	214f      	movs	r1, #79	; 0x4f
    7ee0:	2069      	movs	r0, #105	; 0x69
    7ee2:	f7ff ff0b 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ee6:	4a03      	ldr	r2, [pc, #12]	; (7ef4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    7ee8:	2100      	movs	r1, #0
    7eea:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    7eee:	7101      	strb	r1, [r0, #4]
    7ef0:	bd10      	pop	{r4, pc}
    7ef2:	0000      	.short	0x0000
    7ef4:	20000e4c 	.word	0x20000e4c

00007ef8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    7ef8:	b570      	push	{r4, r5, r6, lr}
    7efa:	2505      	movs	r5, #5
    7efc:	4e0e      	ldr	r6, [pc, #56]	; (7f38 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    7efe:	4c0f      	ldr	r4, [pc, #60]	; (7f3c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    7f00:	e016      	b.n	7f30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7f02:	7821      	ldrb	r1, [r4, #0]
    7f04:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    7f08:	7902      	ldrb	r2, [r0, #4]
    7f0a:	2a01      	cmp	r2, #1
    7f0c:	d108      	bne.n	7f20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7f0e:	7942      	ldrb	r2, [r0, #5]
    7f10:	7983      	ldrb	r3, [r0, #6]
    7f12:	429a      	cmp	r2, r3
    7f14:	d004      	beq.n	7f20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7f16:	7942      	ldrb	r2, [r0, #5]
    7f18:	7182      	strb	r2, [r0, #6]
    7f1a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    7f1e:	4780      	blx	r0
    7f20:	7820      	ldrb	r0, [r4, #0]
    7f22:	1c40      	adds	r0, r0, #1
    7f24:	b2c0      	uxtb	r0, r0
    7f26:	7020      	strb	r0, [r4, #0]
    7f28:	2805      	cmp	r0, #5
    7f2a:	d301      	bcc.n	7f30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7f2c:	2000      	movs	r0, #0
    7f2e:	7020      	strb	r0, [r4, #0]
    7f30:	1e6d      	subs	r5, r5, #1
    7f32:	b2ed      	uxtb	r5, r5
    7f34:	d2e5      	bcs.n	7f02 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    7f36:	bd70      	pop	{r4, r5, r6, pc}
    7f38:	20000e4c 	.word	0x20000e4c
    7f3c:	2000019a 	.word	0x2000019a

00007f40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    7f40:	b500      	push	{lr}
    7f42:	f002 f82e 	bl	9fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7f46:	b940      	cbnz	r0, 7f5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f48:	f002 f835 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7f4c:	b928      	cbnz	r0, 7f5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f4e:	f002 f849 	bl	9fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f52:	b910      	cbnz	r0, 7f5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f54:	f002 f85a 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7f58:	b108      	cbz	r0, 7f5e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    7f5a:	4802      	ldr	r0, [pc, #8]	; (7f64 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    7f5c:	bd00      	pop	{pc}
    7f5e:	4802      	ldr	r0, [pc, #8]	; (7f68 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    7f60:	bd00      	pop	{pc}
    7f62:	0000      	.short	0x0000
    7f64:	4000050c 	.word	0x4000050c
    7f68:	4001e700 	.word	0x4001e700
    7f6c:	b510      	push	{r4, lr}
    7f6e:	f002 f84d 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7f72:	b330      	cbz	r0, 7fc2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    7f74:	f3ef 8010 	mrs	r0, PRIMASK
    7f78:	b1c8      	cbz	r0, 7fae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    7f7a:	2100      	movs	r1, #0
    7f7c:	b672      	cpsid	i
    7f7e:	4812      	ldr	r0, [pc, #72]	; (7fc8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    7f80:	6802      	ldr	r2, [r0, #0]
    7f82:	6803      	ldr	r3, [r0, #0]
    7f84:	f3c2 1200 	ubfx	r2, r2, #4, #1
    7f88:	f043 0310 	orr.w	r3, r3, #16
    7f8c:	6003      	str	r3, [r0, #0]
    7f8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7f92:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7f96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    7f9a:	431c      	orrs	r4, r3
    7f9c:	d000      	beq.n	7fa0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    7f9e:	bf40      	sev
    7fa0:	bf20      	wfe
    7fa2:	bf00      	nop
    7fa4:	bf00      	nop
    7fa6:	bf00      	nop
    7fa8:	bf00      	nop
    7faa:	b112      	cbz	r2, 7fb2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    7fac:	e005      	b.n	7fba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    7fae:	2101      	movs	r1, #1
    7fb0:	e7e4      	b.n	7f7c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    7fb2:	6802      	ldr	r2, [r0, #0]
    7fb4:	f022 0210 	bic.w	r2, r2, #16
    7fb8:	6002      	str	r2, [r0, #0]
    7fba:	2900      	cmp	r1, #0
    7fbc:	d000      	beq.n	7fc0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    7fbe:	b662      	cpsie	i
    7fc0:	bd10      	pop	{r4, pc}
    7fc2:	bf20      	wfe
    7fc4:	bd10      	pop	{r4, pc}
    7fc6:	0000      	.short	0x0000
    7fc8:	e000ed10 	.word	0xe000ed10

00007fcc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    7fcc:	4901      	ldr	r1, [pc, #4]	; (7fd4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    7fce:	2001      	movs	r0, #1
    7fd0:	7088      	strb	r0, [r1, #2]
    7fd2:	4770      	bx	lr
    7fd4:	20000154 	.word	0x20000154

00007fd8 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    7fd8:	0000a30d 0000a345 0000a32f 0000a31d     ....E.../.......
    7fe8:	0000a329 0000a317 0000a30b 0000a309     )...............
    7ff8:	0000a341 0000a335 0000a323 0000a311     A...5...#.......
    8008:	0000a303 0000a2fb 0000a2ff 0000a2f5     ................

00008018 <mpsl_fem_disable>:
    8018:	4801      	ldr	r0, [pc, #4]	; (8020 <mpsl_fem_disable+0x8>)
    801a:	6800      	ldr	r0, [r0, #0]
    801c:	6800      	ldr	r0, [r0, #0]
    801e:	4700      	bx	r0
    8020:	20000168 	.word	0x20000168

00008024 <mpsl_fem_lna_configuration_clear>:
    8024:	4801      	ldr	r0, [pc, #4]	; (802c <mpsl_fem_lna_configuration_clear+0x8>)
    8026:	6800      	ldr	r0, [r0, #0]
    8028:	6940      	ldr	r0, [r0, #20]
    802a:	4700      	bx	r0
    802c:	20000168 	.word	0x20000168

00008030 <mpsl_fem_lna_configuration_set>:
    8030:	4a01      	ldr	r2, [pc, #4]	; (8038 <mpsl_fem_lna_configuration_set+0x8>)
    8032:	6812      	ldr	r2, [r2, #0]
    8034:	68d2      	ldr	r2, [r2, #12]
    8036:	4710      	bx	r2
    8038:	20000168 	.word	0x20000168

0000803c <mpsl_fem_lna_is_configured>:
    803c:	4901      	ldr	r1, [pc, #4]	; (8044 <mpsl_fem_lna_is_configured+0x8>)
    803e:	6809      	ldr	r1, [r1, #0]
    8040:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    8042:	4708      	bx	r1
    8044:	20000168 	.word	0x20000168

00008048 <mpsl_fem_pa_configuration_clear>:
    8048:	4801      	ldr	r0, [pc, #4]	; (8050 <mpsl_fem_pa_configuration_clear+0x8>)
    804a:	6800      	ldr	r0, [r0, #0]
    804c:	6900      	ldr	r0, [r0, #16]
    804e:	4700      	bx	r0
    8050:	20000168 	.word	0x20000168

00008054 <mpsl_fem_pa_configuration_set>:
    8054:	4a01      	ldr	r2, [pc, #4]	; (805c <mpsl_fem_pa_configuration_set+0x8>)
    8056:	6812      	ldr	r2, [r2, #0]
    8058:	6892      	ldr	r2, [r2, #8]
    805a:	4710      	bx	r2
    805c:	20000168 	.word	0x20000168

00008060 <mpsl_fem_pa_gain_set>:
    8060:	4901      	ldr	r1, [pc, #4]	; (8068 <mpsl_fem_pa_gain_set+0x8>)
    8062:	6809      	ldr	r1, [r1, #0]
    8064:	6a49      	ldr	r1, [r1, #36]	; 0x24
    8066:	4708      	bx	r1
    8068:	20000168 	.word	0x20000168

0000806c <mpsl_fem_pa_is_configured>:
    806c:	4901      	ldr	r1, [pc, #4]	; (8074 <mpsl_fem_pa_is_configured+0x8>)
    806e:	6809      	ldr	r1, [r1, #0]
    8070:	6a89      	ldr	r1, [r1, #40]	; 0x28
    8072:	4708      	bx	r1
    8074:	20000168 	.word	0x20000168

00008078 <mpsl_fem_tx_power_split>:
    8078:	b430      	push	{r4, r5}
    807a:	4c03      	ldr	r4, [pc, #12]	; (8088 <mpsl_fem_tx_power_split+0x10>)
    807c:	6824      	ldr	r4, [r4, #0]
    807e:	6864      	ldr	r4, [r4, #4]
    8080:	46a4      	mov	ip, r4
    8082:	bc30      	pop	{r4, r5}
    8084:	4760      	bx	ip
    8086:	0000      	.short	0x0000
    8088:	20000168 	.word	0x20000168

0000808c <mpsl_fem_device_config_254_apply_get>:
    808c:	4801      	ldr	r0, [pc, #4]	; (8094 <mpsl_fem_device_config_254_apply_get+0x8>)
    808e:	7800      	ldrb	r0, [r0, #0]
    8090:	4770      	bx	lr
    8092:	0000      	.short	0x0000
    8094:	2000019b 	.word	0x2000019b

00008098 <__udivmoddi4>:
    8098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    809c:	4686      	mov	lr, r0
    809e:	468c      	mov	ip, r1
    80a0:	4608      	mov	r0, r1
    80a2:	9e08      	ldr	r6, [sp, #32]
    80a4:	4615      	mov	r5, r2
    80a6:	4674      	mov	r4, lr
    80a8:	4619      	mov	r1, r3
    80aa:	2b00      	cmp	r3, #0
    80ac:	f040 80c2 	bne.w	8234 <__udivmoddi4+0x19c>
    80b0:	4285      	cmp	r5, r0
    80b2:	fab2 f282 	clz	r2, r2
    80b6:	d945      	bls.n	8144 <__udivmoddi4+0xac>
    80b8:	b14a      	cbz	r2, 80ce <__udivmoddi4+0x36>
    80ba:	f1c2 0320 	rsb	r3, r2, #32
    80be:	fa00 fc02 	lsl.w	ip, r0, r2
    80c2:	fa2e f303 	lsr.w	r3, lr, r3
    80c6:	4095      	lsls	r5, r2
    80c8:	ea43 0c0c 	orr.w	ip, r3, ip
    80cc:	4094      	lsls	r4, r2
    80ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    80d2:	b2a8      	uxth	r0, r5
    80d4:	fbbc f8fe 	udiv	r8, ip, lr
    80d8:	0c23      	lsrs	r3, r4, #16
    80da:	fb0e cc18 	mls	ip, lr, r8, ip
    80de:	fb08 f900 	mul.w	r9, r8, r0
    80e2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    80e6:	4599      	cmp	r9, r3
    80e8:	d928      	bls.n	813c <__udivmoddi4+0xa4>
    80ea:	18eb      	adds	r3, r5, r3
    80ec:	f108 37ff 	add.w	r7, r8, #4294967295
    80f0:	d204      	bcs.n	80fc <__udivmoddi4+0x64>
    80f2:	4599      	cmp	r9, r3
    80f4:	d902      	bls.n	80fc <__udivmoddi4+0x64>
    80f6:	f1a8 0702 	sub.w	r7, r8, #2
    80fa:	442b      	add	r3, r5
    80fc:	eba3 0309 	sub.w	r3, r3, r9
    8100:	b2a4      	uxth	r4, r4
    8102:	fbb3 fcfe 	udiv	ip, r3, lr
    8106:	fb0e 331c 	mls	r3, lr, ip, r3
    810a:	fb0c f000 	mul.w	r0, ip, r0
    810e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8112:	42a0      	cmp	r0, r4
    8114:	d914      	bls.n	8140 <__udivmoddi4+0xa8>
    8116:	192c      	adds	r4, r5, r4
    8118:	f10c 33ff 	add.w	r3, ip, #4294967295
    811c:	d204      	bcs.n	8128 <__udivmoddi4+0x90>
    811e:	42a0      	cmp	r0, r4
    8120:	d902      	bls.n	8128 <__udivmoddi4+0x90>
    8122:	f1ac 0302 	sub.w	r3, ip, #2
    8126:	442c      	add	r4, r5
    8128:	1a24      	subs	r4, r4, r0
    812a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    812e:	b11e      	cbz	r6, 8138 <__udivmoddi4+0xa0>
    8130:	40d4      	lsrs	r4, r2
    8132:	2300      	movs	r3, #0
    8134:	6034      	str	r4, [r6, #0]
    8136:	6073      	str	r3, [r6, #4]
    8138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    813c:	4647      	mov	r7, r8
    813e:	e7dd      	b.n	80fc <__udivmoddi4+0x64>
    8140:	4663      	mov	r3, ip
    8142:	e7f1      	b.n	8128 <__udivmoddi4+0x90>
    8144:	bb92      	cbnz	r2, 81ac <__udivmoddi4+0x114>
    8146:	1b43      	subs	r3, r0, r5
    8148:	2101      	movs	r1, #1
    814a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    814e:	b2af      	uxth	r7, r5
    8150:	fbb3 fcfe 	udiv	ip, r3, lr
    8154:	0c20      	lsrs	r0, r4, #16
    8156:	fb0e 331c 	mls	r3, lr, ip, r3
    815a:	fb0c f807 	mul.w	r8, ip, r7
    815e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8162:	4598      	cmp	r8, r3
    8164:	d962      	bls.n	822c <__udivmoddi4+0x194>
    8166:	18eb      	adds	r3, r5, r3
    8168:	f10c 30ff 	add.w	r0, ip, #4294967295
    816c:	d204      	bcs.n	8178 <__udivmoddi4+0xe0>
    816e:	4598      	cmp	r8, r3
    8170:	d902      	bls.n	8178 <__udivmoddi4+0xe0>
    8172:	f1ac 0002 	sub.w	r0, ip, #2
    8176:	442b      	add	r3, r5
    8178:	eba3 0308 	sub.w	r3, r3, r8
    817c:	b2a4      	uxth	r4, r4
    817e:	fbb3 fcfe 	udiv	ip, r3, lr
    8182:	fb0e 331c 	mls	r3, lr, ip, r3
    8186:	fb0c f707 	mul.w	r7, ip, r7
    818a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    818e:	42a7      	cmp	r7, r4
    8190:	d94e      	bls.n	8230 <__udivmoddi4+0x198>
    8192:	192c      	adds	r4, r5, r4
    8194:	f10c 33ff 	add.w	r3, ip, #4294967295
    8198:	d204      	bcs.n	81a4 <__udivmoddi4+0x10c>
    819a:	42a7      	cmp	r7, r4
    819c:	d902      	bls.n	81a4 <__udivmoddi4+0x10c>
    819e:	f1ac 0302 	sub.w	r3, ip, #2
    81a2:	442c      	add	r4, r5
    81a4:	1be4      	subs	r4, r4, r7
    81a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    81aa:	e7c0      	b.n	812e <__udivmoddi4+0x96>
    81ac:	f1c2 0320 	rsb	r3, r2, #32
    81b0:	fa20 f103 	lsr.w	r1, r0, r3
    81b4:	4095      	lsls	r5, r2
    81b6:	4090      	lsls	r0, r2
    81b8:	fa2e f303 	lsr.w	r3, lr, r3
    81bc:	4303      	orrs	r3, r0
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2af      	uxth	r7, r5
    81c4:	fbb1 fcfe 	udiv	ip, r1, lr
    81c8:	fb0e 101c 	mls	r0, lr, ip, r1
    81cc:	0c19      	lsrs	r1, r3, #16
    81ce:	fb0c f807 	mul.w	r8, ip, r7
    81d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    81d6:	4588      	cmp	r8, r1
    81d8:	fa04 f402 	lsl.w	r4, r4, r2
    81dc:	d922      	bls.n	8224 <__udivmoddi4+0x18c>
    81de:	1869      	adds	r1, r5, r1
    81e0:	f10c 30ff 	add.w	r0, ip, #4294967295
    81e4:	d204      	bcs.n	81f0 <__udivmoddi4+0x158>
    81e6:	4588      	cmp	r8, r1
    81e8:	d902      	bls.n	81f0 <__udivmoddi4+0x158>
    81ea:	f1ac 0002 	sub.w	r0, ip, #2
    81ee:	4429      	add	r1, r5
    81f0:	eba1 0108 	sub.w	r1, r1, r8
    81f4:	b29b      	uxth	r3, r3
    81f6:	fbb1 fcfe 	udiv	ip, r1, lr
    81fa:	fb0e 111c 	mls	r1, lr, ip, r1
    81fe:	fb0c f707 	mul.w	r7, ip, r7
    8202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8206:	429f      	cmp	r7, r3
    8208:	d90e      	bls.n	8228 <__udivmoddi4+0x190>
    820a:	18eb      	adds	r3, r5, r3
    820c:	f10c 31ff 	add.w	r1, ip, #4294967295
    8210:	d204      	bcs.n	821c <__udivmoddi4+0x184>
    8212:	429f      	cmp	r7, r3
    8214:	d902      	bls.n	821c <__udivmoddi4+0x184>
    8216:	f1ac 0102 	sub.w	r1, ip, #2
    821a:	442b      	add	r3, r5
    821c:	1bdb      	subs	r3, r3, r7
    821e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8222:	e792      	b.n	814a <__udivmoddi4+0xb2>
    8224:	4660      	mov	r0, ip
    8226:	e7e3      	b.n	81f0 <__udivmoddi4+0x158>
    8228:	4661      	mov	r1, ip
    822a:	e7f7      	b.n	821c <__udivmoddi4+0x184>
    822c:	4660      	mov	r0, ip
    822e:	e7a3      	b.n	8178 <__udivmoddi4+0xe0>
    8230:	4663      	mov	r3, ip
    8232:	e7b7      	b.n	81a4 <__udivmoddi4+0x10c>
    8234:	4283      	cmp	r3, r0
    8236:	d906      	bls.n	8246 <__udivmoddi4+0x1ae>
    8238:	b916      	cbnz	r6, 8240 <__udivmoddi4+0x1a8>
    823a:	2100      	movs	r1, #0
    823c:	4608      	mov	r0, r1
    823e:	e77b      	b.n	8138 <__udivmoddi4+0xa0>
    8240:	e9c6 e000 	strd	lr, r0, [r6]
    8244:	e7f9      	b.n	823a <__udivmoddi4+0x1a2>
    8246:	fab3 f783 	clz	r7, r3
    824a:	b98f      	cbnz	r7, 8270 <__udivmoddi4+0x1d8>
    824c:	4283      	cmp	r3, r0
    824e:	d301      	bcc.n	8254 <__udivmoddi4+0x1bc>
    8250:	4572      	cmp	r2, lr
    8252:	d808      	bhi.n	8266 <__udivmoddi4+0x1ce>
    8254:	ebbe 0402 	subs.w	r4, lr, r2
    8258:	eb60 0303 	sbc.w	r3, r0, r3
    825c:	2001      	movs	r0, #1
    825e:	469c      	mov	ip, r3
    8260:	b91e      	cbnz	r6, 826a <__udivmoddi4+0x1d2>
    8262:	2100      	movs	r1, #0
    8264:	e768      	b.n	8138 <__udivmoddi4+0xa0>
    8266:	4638      	mov	r0, r7
    8268:	e7fa      	b.n	8260 <__udivmoddi4+0x1c8>
    826a:	e9c6 4c00 	strd	r4, ip, [r6]
    826e:	e7f8      	b.n	8262 <__udivmoddi4+0x1ca>
    8270:	f1c7 0c20 	rsb	ip, r7, #32
    8274:	40bb      	lsls	r3, r7
    8276:	fa22 f40c 	lsr.w	r4, r2, ip
    827a:	431c      	orrs	r4, r3
    827c:	fa2e f10c 	lsr.w	r1, lr, ip
    8280:	fa20 f30c 	lsr.w	r3, r0, ip
    8284:	40b8      	lsls	r0, r7
    8286:	4301      	orrs	r1, r0
    8288:	ea4f 4914 	mov.w	r9, r4, lsr #16
    828c:	fa0e f507 	lsl.w	r5, lr, r7
    8290:	fbb3 f8f9 	udiv	r8, r3, r9
    8294:	fa1f fe84 	uxth.w	lr, r4
    8298:	fb09 3018 	mls	r0, r9, r8, r3
    829c:	0c0b      	lsrs	r3, r1, #16
    829e:	fb08 fa0e 	mul.w	sl, r8, lr
    82a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    82a6:	459a      	cmp	sl, r3
    82a8:	fa02 f207 	lsl.w	r2, r2, r7
    82ac:	d940      	bls.n	8330 <__udivmoddi4+0x298>
    82ae:	18e3      	adds	r3, r4, r3
    82b0:	f108 30ff 	add.w	r0, r8, #4294967295
    82b4:	d204      	bcs.n	82c0 <__udivmoddi4+0x228>
    82b6:	459a      	cmp	sl, r3
    82b8:	d902      	bls.n	82c0 <__udivmoddi4+0x228>
    82ba:	f1a8 0002 	sub.w	r0, r8, #2
    82be:	4423      	add	r3, r4
    82c0:	eba3 030a 	sub.w	r3, r3, sl
    82c4:	b289      	uxth	r1, r1
    82c6:	fbb3 f8f9 	udiv	r8, r3, r9
    82ca:	fb09 3318 	mls	r3, r9, r8, r3
    82ce:	fb08 fe0e 	mul.w	lr, r8, lr
    82d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    82d6:	458e      	cmp	lr, r1
    82d8:	d92c      	bls.n	8334 <__udivmoddi4+0x29c>
    82da:	1861      	adds	r1, r4, r1
    82dc:	f108 33ff 	add.w	r3, r8, #4294967295
    82e0:	d204      	bcs.n	82ec <__udivmoddi4+0x254>
    82e2:	458e      	cmp	lr, r1
    82e4:	d902      	bls.n	82ec <__udivmoddi4+0x254>
    82e6:	f1a8 0302 	sub.w	r3, r8, #2
    82ea:	4421      	add	r1, r4
    82ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    82f0:	fba0 9802 	umull	r9, r8, r0, r2
    82f4:	eba1 010e 	sub.w	r1, r1, lr
    82f8:	4541      	cmp	r1, r8
    82fa:	46ce      	mov	lr, r9
    82fc:	4643      	mov	r3, r8
    82fe:	d302      	bcc.n	8306 <__udivmoddi4+0x26e>
    8300:	d106      	bne.n	8310 <__udivmoddi4+0x278>
    8302:	454d      	cmp	r5, r9
    8304:	d204      	bcs.n	8310 <__udivmoddi4+0x278>
    8306:	ebb9 0e02 	subs.w	lr, r9, r2
    830a:	eb68 0304 	sbc.w	r3, r8, r4
    830e:	3801      	subs	r0, #1
    8310:	2e00      	cmp	r6, #0
    8312:	d0a6      	beq.n	8262 <__udivmoddi4+0x1ca>
    8314:	ebb5 020e 	subs.w	r2, r5, lr
    8318:	eb61 0103 	sbc.w	r1, r1, r3
    831c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8320:	fa22 f307 	lsr.w	r3, r2, r7
    8324:	ea4c 0303 	orr.w	r3, ip, r3
    8328:	40f9      	lsrs	r1, r7
    832a:	e9c6 3100 	strd	r3, r1, [r6]
    832e:	e798      	b.n	8262 <__udivmoddi4+0x1ca>
    8330:	4640      	mov	r0, r8
    8332:	e7c5      	b.n	82c0 <__udivmoddi4+0x228>
    8334:	4643      	mov	r3, r8
    8336:	e7d9      	b.n	82ec <__udivmoddi4+0x254>
    8338:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    833c:	4681      	mov	r9, r0
    833e:	ea5f 0802 	movs.w	r8, r2
    8342:	f100 0007 	add.w	r0, r0, #7
    8346:	f020 0007 	bic.w	r0, r0, #7
    834a:	f04f 0200 	mov.w	r2, #0
    834e:	e9cd 0200 	strd	r0, r2, [sp]
    8352:	780a      	ldrb	r2, [r1, #0]
    8354:	460c      	mov	r4, r1
    8356:	f88d 2005 	strb.w	r2, [sp, #5]
    835a:	d000      	beq.n	835e <__udivmoddi4+0x2c6>
    835c:	2000      	movs	r0, #0
    835e:	a901      	add	r1, sp, #4
    8360:	f7f8 fad6 	bl	910 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    8364:	9900      	ldr	r1, [sp, #0]
    8366:	2600      	movs	r6, #0
    8368:	4408      	add	r0, r1
    836a:	9000      	str	r0, [sp, #0]
    836c:	7820      	ldrb	r0, [r4, #0]
    836e:	7861      	ldrb	r1, [r4, #1]
    8370:	4635      	mov	r5, r6
    8372:	4408      	add	r0, r1
    8374:	b2c7      	uxtb	r7, r0
    8376:	e008      	b.n	838a <__udivmoddi4+0x2f2>
    8378:	7a23      	ldrb	r3, [r4, #8]
    837a:	79e2      	ldrb	r2, [r4, #7]
    837c:	79a1      	ldrb	r1, [r4, #6]
    837e:	7960      	ldrb	r0, [r4, #5]
    8380:	f000 fd47 	bl	8e12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    8384:	1c6d      	adds	r5, r5, #1
    8386:	4406      	add	r6, r0
    8388:	b2ed      	uxtb	r5, r5
    838a:	42bd      	cmp	r5, r7
    838c:	d3f4      	bcc.n	8378 <__udivmoddi4+0x2e0>
    838e:	9800      	ldr	r0, [sp, #0]
    8390:	1cc0      	adds	r0, r0, #3
    8392:	f020 0003 	bic.w	r0, r0, #3
    8396:	9000      	str	r0, [sp, #0]
    8398:	f1b8 0f00 	cmp.w	r8, #0
    839c:	d000      	beq.n	83a0 <__udivmoddi4+0x308>
    839e:	2000      	movs	r0, #0
    83a0:	4632      	mov	r2, r6
    83a2:	4639      	mov	r1, r7
    83a4:	f7f8 fb60 	bl	a68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    83a8:	9900      	ldr	r1, [sp, #0]
    83aa:	4642      	mov	r2, r8
    83ac:	4408      	add	r0, r1
    83ae:	9000      	str	r0, [sp, #0]
    83b0:	4621      	mov	r1, r4
    83b2:	4668      	mov	r0, sp
    83b4:	f7f7 feda 	bl	16c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x22>
    83b8:	9900      	ldr	r1, [sp, #0]
    83ba:	eba1 0009 	sub.w	r0, r1, r9
    83be:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

000083c2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    83c2:	b510      	push	{r4, lr}
    83c4:	460c      	mov	r4, r1
    83c6:	7909      	ldrb	r1, [r1, #4]
    83c8:	7001      	strb	r1, [r0, #0]
    83ca:	7841      	ldrb	r1, [r0, #1]
    83cc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    83d0:	7041      	strb	r1, [r0, #1]
    83d2:	88a2      	ldrh	r2, [r4, #4]
    83d4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    83d8:	4311      	orrs	r1, r2
    83da:	7041      	strb	r1, [r0, #1]
    83dc:	79a2      	ldrb	r2, [r4, #6]
    83de:	7082      	strb	r2, [r0, #2]
    83e0:	88e2      	ldrh	r2, [r4, #6]
    83e2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    83e6:	0a12      	lsrs	r2, r2, #8
    83e8:	70c2      	strb	r2, [r0, #3]
    83ea:	7041      	strb	r1, [r0, #1]
    83ec:	7a22      	ldrb	r2, [r4, #8]
    83ee:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    83f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    83f6:	7041      	strb	r1, [r0, #1]
    83f8:	7a62      	ldrb	r2, [r4, #9]
    83fa:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    83fe:	7041      	strb	r1, [r0, #1]
    8400:	6821      	ldr	r1, [r4, #0]
    8402:	1d02      	adds	r2, r0, #4
    8404:	4291      	cmp	r1, r2
    8406:	d006      	beq.n	8416 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    8408:	88e2      	ldrh	r2, [r4, #6]
    840a:	2afb      	cmp	r2, #251	; 0xfb
    840c:	d300      	bcc.n	8410 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    840e:	22fb      	movs	r2, #251	; 0xfb
    8410:	1d00      	adds	r0, r0, #4
    8412:	f001 fe95 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8416:	79a0      	ldrb	r0, [r4, #6]
    8418:	1d00      	adds	r0, r0, #4
    841a:	b2c0      	uxtb	r0, r0
    841c:	bd10      	pop	{r4, pc}

0000841e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    841e:	b430      	push	{r4, r5}
    8420:	790a      	ldrb	r2, [r1, #4]
    8422:	7002      	strb	r2, [r0, #0]
    8424:	7842      	ldrb	r2, [r0, #1]
    8426:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    842a:	7042      	strb	r2, [r0, #1]
    842c:	888b      	ldrh	r3, [r1, #4]
    842e:	f3c3 2303 	ubfx	r3, r3, #8, #4
    8432:	431a      	orrs	r2, r3
    8434:	7042      	strb	r2, [r0, #1]
    8436:	798b      	ldrb	r3, [r1, #6]
    8438:	7083      	strb	r3, [r0, #2]
    843a:	78c3      	ldrb	r3, [r0, #3]
    843c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    8440:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8444:	70c3      	strb	r3, [r0, #3]
    8446:	88cc      	ldrh	r4, [r1, #6]
    8448:	f3c4 2405 	ubfx	r4, r4, #8, #6
    844c:	4323      	orrs	r3, r4
    844e:	70c3      	strb	r3, [r0, #3]
    8450:	7042      	strb	r2, [r0, #1]
    8452:	7a0c      	ldrb	r4, [r1, #8]
    8454:	f004 0403 	and.w	r4, r4, #3
    8458:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    845c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    8460:	7042      	strb	r2, [r0, #1]
    8462:	7a4c      	ldrb	r4, [r1, #9]
    8464:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    8468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    846c:	7042      	strb	r2, [r0, #1]
    846e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8472:	70c2      	strb	r2, [r0, #3]
    8474:	680b      	ldr	r3, [r1, #0]
    8476:	1d02      	adds	r2, r0, #4
    8478:	4293      	cmp	r3, r2
    847a:	d005      	beq.n	8488 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    847c:	88ca      	ldrh	r2, [r1, #6]
    847e:	bc30      	pop	{r4, r5}
    8480:	4619      	mov	r1, r3
    8482:	1d00      	adds	r0, r0, #4
    8484:	f001 be5c 	b.w	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8488:	bc30      	pop	{r4, r5}
    848a:	4770      	bx	lr

0000848c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    848c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8490:	4604      	mov	r4, r0
    8492:	f891 c000 	ldrb.w	ip, [r1]
    8496:	460d      	mov	r5, r1
    8498:	2000      	movs	r0, #0
    849a:	2711      	movs	r7, #17
    849c:	263e      	movs	r6, #62	; 0x3e
    849e:	2312      	movs	r3, #18
    84a0:	22ff      	movs	r2, #255	; 0xff
    84a2:	f04f 0b0c 	mov.w	fp, #12
    84a6:	f04f 0905 	mov.w	r9, #5
    84aa:	f04f 0a03 	mov.w	sl, #3
    84ae:	f104 010d 	add.w	r1, r4, #13
    84b2:	f04f 0e14 	mov.w	lr, #20
    84b6:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    84ba:	d26f      	bcs.n	859c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    84bc:	e8df f00c 	tbb	[pc, ip]
    84c0:	47452d6e 	.word	0x47452d6e
    84c4:	a76eef4c 	.word	0xa76eef4c
    84c8:	edf0c2b1 	.word	0xedf0c2b1
    84cc:	e9eaebec 	.word	0xe9eaebec
    84d0:	6f6e12e8 	.word	0x6f6e12e8
    84d4:	e6e78c6e 	.word	0xe6e78c6e
    84d8:	e2e3e4e5 	.word	0xe2e3e4e5
    84dc:	dedfe0e1 	.word	0xdedfe0e1
    84e0:	00dc6edd 	.word	0x00dc6edd
    84e4:	200e      	movs	r0, #14
    84e6:	7020      	strb	r0, [r4, #0]
    84e8:	7968      	ldrb	r0, [r5, #5]
    84ea:	70e0      	strb	r0, [r4, #3]
    84ec:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84f0:	0a00      	lsrs	r0, r0, #8
    84f2:	7120      	strb	r0, [r4, #4]
    84f4:	7928      	ldrb	r0, [r5, #4]
    84f6:	70a0      	strb	r0, [r4, #2]
    84f8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    84fc:	3883      	subs	r0, #131	; 0x83
    84fe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    8502:	d003      	beq.n	850c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x80>
    8504:	2136      	movs	r1, #54	; 0x36
    8506:	20c7      	movs	r0, #199	; 0xc7
    8508:	f7f7 ff44 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    850c:	4652      	mov	r2, sl
    850e:	1de9      	adds	r1, r5, #7
    8510:	1d60      	adds	r0, r4, #5
    8512:	f001 fe15 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8516:	2007      	movs	r0, #7
    8518:	e151      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    851a:	f884 b000 	strb.w	fp, [r4]
    851e:	7928      	ldrb	r0, [r5, #4]
    8520:	70a0      	strb	r0, [r4, #2]
    8522:	7968      	ldrb	r0, [r5, #5]
    8524:	70e0      	strb	r0, [r4, #3]
    8526:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    852a:	0a00      	lsrs	r0, r0, #8
    852c:	7120      	strb	r0, [r4, #4]
    852e:	79e8      	ldrb	r0, [r5, #7]
    8530:	7160      	strb	r0, [r4, #5]
    8532:	7a28      	ldrb	r0, [r5, #8]
    8534:	71a0      	strb	r0, [r4, #6]
    8536:	8928      	ldrh	r0, [r5, #8]
    8538:	0a00      	lsrs	r0, r0, #8
    853a:	71e0      	strb	r0, [r4, #7]
    853c:	7aa8      	ldrb	r0, [r5, #10]
    853e:	7220      	strb	r0, [r4, #8]
    8540:	8968      	ldrh	r0, [r5, #10]
    8542:	0a00      	lsrs	r0, r0, #8
    8544:	7260      	strb	r0, [r4, #9]
    8546:	2008      	movs	r0, #8
    8548:	e139      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    854a:	2010      	movs	r0, #16
    854c:	e000      	b.n	8550 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc4>
    854e:	201a      	movs	r0, #26
    8550:	7020      	strb	r0, [r4, #0]
    8552:	7928      	ldrb	r0, [r5, #4]
    8554:	70a0      	strb	r0, [r4, #2]
    8556:	e138      	b.n	87ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
    8558:	7026      	strb	r6, [r4, #0]
    855a:	2002      	movs	r0, #2
    855c:	70a0      	strb	r0, [r4, #2]
    855e:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    8562:	70e0      	strb	r0, [r4, #3]
    8564:	7aa8      	ldrb	r0, [r5, #10]
    8566:	7120      	strb	r0, [r4, #4]
    8568:	7868      	ldrb	r0, [r5, #1]
    856a:	7160      	strb	r0, [r4, #5]
    856c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    8570:	f8c4 0006 	str.w	r0, [r4, #6]
    8574:	88e8      	ldrh	r0, [r5, #6]
    8576:	8160      	strh	r0, [r4, #10]
    8578:	7a28      	ldrb	r0, [r5, #8]
    857a:	7320      	strb	r0, [r4, #12]
    857c:	7a2e      	ldrb	r6, [r5, #8]
    857e:	2e1f      	cmp	r6, #31
    8580:	d300      	bcc.n	8584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xf8>
    8582:	261f      	movs	r6, #31
    8584:	4608      	mov	r0, r1
    8586:	4632      	mov	r2, r6
    8588:	f105 010b 	add.w	r1, r5, #11
    858c:	f001 fdd8 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8590:	360d      	adds	r6, #13
    8592:	7a69      	ldrb	r1, [r5, #9]
    8594:	55a1      	strb	r1, [r4, r6]
    8596:	1e76      	subs	r6, r6, #1
    8598:	b2f0      	uxtb	r0, r6
    859a:	e10e      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    859c:	e111      	b.n	87c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    859e:	7026      	strb	r6, [r4, #0]
    85a0:	200b      	movs	r0, #11
    85a2:	70a0      	strb	r0, [r4, #2]
    85a4:	7928      	ldrb	r0, [r5, #4]
    85a6:	70e0      	strb	r0, [r4, #3]
    85a8:	7968      	ldrb	r0, [r5, #5]
    85aa:	7120      	strb	r0, [r4, #4]
    85ac:	79a8      	ldrb	r0, [r5, #6]
    85ae:	7160      	strb	r0, [r4, #5]
    85b0:	f8d5 0007 	ldr.w	r0, [r5, #7]
    85b4:	f8c4 0006 	str.w	r0, [r4, #6]
    85b8:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    85bc:	8160      	strh	r0, [r4, #10]
    85be:	7b68      	ldrb	r0, [r5, #13]
    85c0:	7320      	strb	r0, [r4, #12]
    85c2:	f8d5 000e 	ldr.w	r0, [r5, #14]
    85c6:	f8c4 000d 	str.w	r0, [r4, #13]
    85ca:	8a68      	ldrh	r0, [r5, #18]
    85cc:	f8a4 0011 	strh.w	r0, [r4, #17]
    85d0:	7d28      	ldrb	r0, [r5, #20]
    85d2:	74e0      	strb	r0, [r4, #19]
    85d4:	4618      	mov	r0, r3
    85d6:	e0f2      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    85d8:	2029      	movs	r0, #41	; 0x29
    85da:	f7f8 f829 	bl	630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    85de:	b148      	cbz	r0, 85f4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x168>
    85e0:	7026      	strb	r6, [r4, #0]
    85e2:	2029      	movs	r0, #41	; 0x29
    85e4:	70a0      	strb	r0, [r4, #2]
    85e6:	2221      	movs	r2, #33	; 0x21
    85e8:	1d29      	adds	r1, r5, #4
    85ea:	1ce0      	adds	r0, r4, #3
    85ec:	f001 fda8 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    85f0:	2022      	movs	r0, #34	; 0x22
    85f2:	e0e4      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    85f4:	200a      	movs	r0, #10
    85f6:	f7f8 f81b 	bl	630 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    85fa:	2800      	cmp	r0, #0
    85fc:	4629      	mov	r1, r5
    85fe:	4620      	mov	r0, r4
    8600:	d002      	beq.n	8608 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x17c>
    8602:	f000 f9a1 	bl	8948 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    8606:	e0d8      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8608:	f000 f975 	bl	88f6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    860c:	e0d5      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    860e:	7026      	strb	r6, [r4, #0]
    8610:	f884 e002 	strb.w	lr, [r4, #2]
    8614:	7928      	ldrb	r0, [r5, #4]
    8616:	70e0      	strb	r0, [r4, #3]
    8618:	88a8      	ldrh	r0, [r5, #4]
    861a:	0a00      	lsrs	r0, r0, #8
    861c:	7120      	strb	r0, [r4, #4]
    861e:	79a8      	ldrb	r0, [r5, #6]
    8620:	e106      	b.n	8830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8622:	223e      	movs	r2, #62	; 0x3e
    8624:	7022      	strb	r2, [r4, #0]
    8626:	2204      	movs	r2, #4
    8628:	70a2      	strb	r2, [r4, #2]
    862a:	6868      	ldr	r0, [r5, #4]
    862c:	f8c4 0003 	str.w	r0, [r4, #3]
    8630:	68a8      	ldr	r0, [r5, #8]
    8632:	f8c4 0007 	str.w	r0, [r4, #7]
    8636:	89a8      	ldrh	r0, [r5, #12]
    8638:	f8a4 000b 	strh.w	r0, [r4, #11]
    863c:	7ba8      	ldrb	r0, [r5, #14]
    863e:	7360      	strb	r0, [r4, #13]
    8640:	200c      	movs	r0, #12
    8642:	e0bc      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8644:	7026      	strb	r6, [r4, #0]
    8646:	f884 a002 	strb.w	sl, [r4, #2]
    864a:	7928      	ldrb	r0, [r5, #4]
    864c:	70e0      	strb	r0, [r4, #3]
    864e:	79a8      	ldrb	r0, [r5, #6]
    8650:	7120      	strb	r0, [r4, #4]
    8652:	88e8      	ldrh	r0, [r5, #6]
    8654:	0a00      	lsrs	r0, r0, #8
    8656:	7160      	strb	r0, [r4, #5]
    8658:	7a28      	ldrb	r0, [r5, #8]
    865a:	71a0      	strb	r0, [r4, #6]
    865c:	8928      	ldrh	r0, [r5, #8]
    865e:	0a00      	lsrs	r0, r0, #8
    8660:	71e0      	strb	r0, [r4, #7]
    8662:	7aa8      	ldrb	r0, [r5, #10]
    8664:	7220      	strb	r0, [r4, #8]
    8666:	8968      	ldrh	r0, [r5, #10]
    8668:	0a00      	lsrs	r0, r0, #8
    866a:	7260      	strb	r0, [r4, #9]
    866c:	7b28      	ldrb	r0, [r5, #12]
    866e:	72a0      	strb	r0, [r4, #10]
    8670:	89a8      	ldrh	r0, [r5, #12]
    8672:	0a00      	lsrs	r0, r0, #8
    8674:	72e0      	strb	r0, [r4, #11]
    8676:	e118      	b.n	88aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    8678:	e126      	b.n	88c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x43c>
    867a:	e0fa      	b.n	8872 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    867c:	e0db      	b.n	8836 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3aa>
    867e:	e106      	b.n	888e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    8680:	e115      	b.n	88ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x422>
    8682:	e0cd      	b.n	8820 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x394>
    8684:	e0b5      	b.n	87f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x366>
    8686:	e0b1      	b.n	87ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
    8688:	e09d      	b.n	87c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    868a:	e0a0      	b.n	87ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    868c:	e043      	b.n	8716 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28a>
    868e:	e03f      	b.n	8710 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    8690:	e054      	b.n	873c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    8692:	e04e      	b.n	8732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a6>
    8694:	e031      	b.n	86fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    8696:	e025      	b.n	86e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x258>
    8698:	e018      	b.n	86cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    869a:	e015      	b.n	86c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    869c:	e000      	b.n	86a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    869e:	e056      	b.n	874e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    86a0:	7026      	strb	r6, [r4, #0]
    86a2:	f884 9002 	strb.w	r9, [r4, #2]
    86a6:	7928      	ldrb	r0, [r5, #4]
    86a8:	70e0      	strb	r0, [r4, #3]
    86aa:	88a8      	ldrh	r0, [r5, #4]
    86ac:	0a00      	lsrs	r0, r0, #8
    86ae:	7120      	strb	r0, [r4, #4]
    86b0:	f8d5 0006 	ldr.w	r0, [r5, #6]
    86b4:	f8c4 0005 	str.w	r0, [r4, #5]
    86b8:	f8d5 000a 	ldr.w	r0, [r5, #10]
    86bc:	f8c4 0009 	str.w	r0, [r4, #9]
    86c0:	89e8      	ldrh	r0, [r5, #14]
    86c2:	f8a4 000d 	strh.w	r0, [r4, #13]
    86c6:	e114      	b.n	88f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x466>
    86c8:	7027      	strb	r7, [r4, #0]
    86ca:	e039      	b.n	8740 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b4>
    86cc:	f884 9000 	strb.w	r9, [r4]
    86d0:	7928      	ldrb	r0, [r5, #4]
    86d2:	70a0      	strb	r0, [r4, #2]
    86d4:	7968      	ldrb	r0, [r5, #5]
    86d6:	70e0      	strb	r0, [r4, #3]
    86d8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    86dc:	0a00      	lsrs	r0, r0, #8
    86de:	7120      	strb	r0, [r4, #4]
    86e0:	79e8      	ldrb	r0, [r5, #7]
    86e2:	e0a5      	b.n	8830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    86e4:	2008      	movs	r0, #8
    86e6:	7020      	strb	r0, [r4, #0]
    86e8:	7928      	ldrb	r0, [r5, #4]
    86ea:	70a0      	strb	r0, [r4, #2]
    86ec:	79a8      	ldrb	r0, [r5, #6]
    86ee:	70e0      	strb	r0, [r4, #3]
    86f0:	88e8      	ldrh	r0, [r5, #6]
    86f2:	0a00      	lsrs	r0, r0, #8
    86f4:	7120      	strb	r0, [r4, #4]
    86f6:	7a28      	ldrb	r0, [r5, #8]
    86f8:	e09a      	b.n	8830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    86fa:	2030      	movs	r0, #48	; 0x30
    86fc:	7020      	strb	r0, [r4, #0]
    86fe:	7928      	ldrb	r0, [r5, #4]
    8700:	70a0      	strb	r0, [r4, #2]
    8702:	79a8      	ldrb	r0, [r5, #6]
    8704:	70e0      	strb	r0, [r4, #3]
    8706:	88e8      	ldrh	r0, [r5, #6]
    8708:	0a00      	lsrs	r0, r0, #8
    870a:	7120      	strb	r0, [r4, #4]
    870c:	2003      	movs	r0, #3
    870e:	e056      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8710:	7026      	strb	r6, [r4, #0]
    8712:	2007      	movs	r0, #7
    8714:	e091      	b.n	883a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    8716:	7026      	strb	r6, [r4, #0]
    8718:	f884 b002 	strb.w	fp, [r4, #2]
    871c:	7928      	ldrb	r0, [r5, #4]
    871e:	70e0      	strb	r0, [r4, #3]
    8720:	79a8      	ldrb	r0, [r5, #6]
    8722:	7120      	strb	r0, [r4, #4]
    8724:	88e8      	ldrh	r0, [r5, #6]
    8726:	0a00      	lsrs	r0, r0, #8
    8728:	7160      	strb	r0, [r4, #5]
    872a:	7a28      	ldrb	r0, [r5, #8]
    872c:	71a0      	strb	r0, [r4, #6]
    872e:	7a68      	ldrb	r0, [r5, #9]
    8730:	e059      	b.n	87e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    8732:	1d29      	adds	r1, r5, #4
    8734:	4620      	mov	r0, r4
    8736:	f7f7 ff3b 	bl	5b0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    873a:	e03e      	b.n	87ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    873c:	2057      	movs	r0, #87	; 0x57
    873e:	7020      	strb	r0, [r4, #0]
    8740:	7928      	ldrb	r0, [r5, #4]
    8742:	70a0      	strb	r0, [r4, #2]
    8744:	88a8      	ldrh	r0, [r5, #4]
    8746:	0a00      	lsrs	r0, r0, #8
    8748:	70e0      	strb	r0, [r4, #3]
    874a:	2002      	movs	r0, #2
    874c:	e037      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    874e:	7026      	strb	r6, [r4, #0]
    8750:	220d      	movs	r2, #13
    8752:	70a2      	strb	r2, [r4, #2]
    8754:	792a      	ldrb	r2, [r5, #4]
    8756:	70e2      	strb	r2, [r4, #3]
    8758:	89ea      	ldrh	r2, [r5, #14]
    875a:	80a2      	strh	r2, [r4, #4]
    875c:	796a      	ldrb	r2, [r5, #5]
    875e:	71a2      	strb	r2, [r4, #6]
    8760:	f8d5 2006 	ldr.w	r2, [r5, #6]
    8764:	f8c4 2007 	str.w	r2, [r4, #7]
    8768:	896a      	ldrh	r2, [r5, #10]
    876a:	f8a4 200b 	strh.w	r2, [r4, #11]
    876e:	7c2a      	ldrb	r2, [r5, #16]
    8770:	4620      	mov	r0, r4
    8772:	7362      	strb	r2, [r4, #13]
    8774:	1d29      	adds	r1, r5, #4
    8776:	7c6a      	ldrb	r2, [r5, #17]
    8778:	7382      	strb	r2, [r0, #14]
    877a:	7b8a      	ldrb	r2, [r1, #14]
    877c:	73c2      	strb	r2, [r0, #15]
    877e:	7e8a      	ldrb	r2, [r1, #26]
    8780:	7402      	strb	r2, [r0, #16]
    8782:	7a4a      	ldrb	r2, [r1, #9]
    8784:	7442      	strb	r2, [r0, #17]
    8786:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    878a:	f8ad 2000 	strh.w	r2, [sp]
    878e:	8242      	strh	r2, [r0, #18]
    8790:	7cca      	ldrb	r2, [r1, #19]
    8792:	7502      	strb	r2, [r0, #20]
    8794:	694a      	ldr	r2, [r1, #20]
    8796:	f8c0 2015 	str.w	r2, [r0, #21]
    879a:	8b0a      	ldrh	r2, [r1, #24]
    879c:	f8a0 2019 	strh.w	r2, [r0, #25]
    87a0:	7a0a      	ldrb	r2, [r1, #8]
    87a2:	76c2      	strb	r2, [r0, #27]
    87a4:	7a0d      	ldrb	r5, [r1, #8]
    87a6:	2de5      	cmp	r5, #229	; 0xe5
    87a8:	d300      	bcc.n	87ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    87aa:	25e5      	movs	r5, #229	; 0xe5
    87ac:	462a      	mov	r2, r5
    87ae:	301c      	adds	r0, #28
    87b0:	311c      	adds	r1, #28
    87b2:	f001 fcc5 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    87b6:	351a      	adds	r5, #26
    87b8:	b2e8      	uxtb	r0, r5
    87ba:	2800      	cmp	r0, #0
    87bc:	d001      	beq.n	87c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    87be:	7060      	strb	r0, [r4, #1]
    87c0:	1c80      	adds	r0, r0, #2
    87c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87c6:	7026      	strb	r6, [r4, #0]
    87c8:	70a7      	strb	r7, [r4, #2]
    87ca:	2001      	movs	r0, #1
    87cc:	e7f7      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    87ce:	7026      	strb	r6, [r4, #0]
    87d0:	70a3      	strb	r3, [r4, #2]
    87d2:	7928      	ldrb	r0, [r5, #4]
    87d4:	70e0      	strb	r0, [r4, #3]
    87d6:	7968      	ldrb	r0, [r5, #5]
    87d8:	7120      	strb	r0, [r4, #4]
    87da:	79a8      	ldrb	r0, [r5, #6]
    87dc:	7160      	strb	r0, [r4, #5]
    87de:	88e8      	ldrh	r0, [r5, #6]
    87e0:	0a00      	lsrs	r0, r0, #8
    87e2:	71a0      	strb	r0, [r4, #6]
    87e4:	7a28      	ldrb	r0, [r5, #8]
    87e6:	71e0      	strb	r0, [r4, #7]
    87e8:	2006      	movs	r0, #6
    87ea:	e7e8      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    87ec:	7026      	strb	r6, [r4, #0]
    87ee:	2020      	movs	r0, #32
    87f0:	e041      	b.n	8876 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ea>
    87f2:	7026      	strb	r6, [r4, #0]
    87f4:	2021      	movs	r0, #33	; 0x21
    87f6:	70a0      	strb	r0, [r4, #2]
    87f8:	7928      	ldrb	r0, [r5, #4]
    87fa:	70e0      	strb	r0, [r4, #3]
    87fc:	7968      	ldrb	r0, [r5, #5]
    87fe:	7120      	strb	r0, [r4, #4]
    8800:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8804:	0a00      	lsrs	r0, r0, #8
    8806:	7160      	strb	r0, [r4, #5]
    8808:	79e8      	ldrb	r0, [r5, #7]
    880a:	71a0      	strb	r0, [r4, #6]
    880c:	7a28      	ldrb	r0, [r5, #8]
    880e:	71e0      	strb	r0, [r4, #7]
    8810:	7a68      	ldrb	r0, [r5, #9]
    8812:	7220      	strb	r0, [r4, #8]
    8814:	7aa8      	ldrb	r0, [r5, #10]
    8816:	7260      	strb	r0, [r4, #9]
    8818:	7ae8      	ldrb	r0, [r5, #11]
    881a:	72a0      	strb	r0, [r4, #10]
    881c:	2009      	movs	r0, #9
    881e:	e7ce      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8820:	7022      	strb	r2, [r4, #0]
    8822:	20a1      	movs	r0, #161	; 0xa1
    8824:	70a0      	strb	r0, [r4, #2]
    8826:	7928      	ldrb	r0, [r5, #4]
    8828:	70e0      	strb	r0, [r4, #3]
    882a:	7968      	ldrb	r0, [r5, #5]
    882c:	7120      	strb	r0, [r4, #4]
    882e:	2000      	movs	r0, #0
    8830:	7160      	strb	r0, [r4, #5]
    8832:	2004      	movs	r0, #4
    8834:	e7c3      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8836:	7022      	strb	r2, [r4, #0]
    8838:	20a2      	movs	r0, #162	; 0xa2
    883a:	70a0      	strb	r0, [r4, #2]
    883c:	7928      	ldrb	r0, [r5, #4]
    883e:	70e0      	strb	r0, [r4, #3]
    8840:	88a8      	ldrh	r0, [r5, #4]
    8842:	0a00      	lsrs	r0, r0, #8
    8844:	7120      	strb	r0, [r4, #4]
    8846:	79a8      	ldrb	r0, [r5, #6]
    8848:	7160      	strb	r0, [r4, #5]
    884a:	88e8      	ldrh	r0, [r5, #6]
    884c:	0a00      	lsrs	r0, r0, #8
    884e:	71a0      	strb	r0, [r4, #6]
    8850:	7a28      	ldrb	r0, [r5, #8]
    8852:	71e0      	strb	r0, [r4, #7]
    8854:	8928      	ldrh	r0, [r5, #8]
    8856:	0a00      	lsrs	r0, r0, #8
    8858:	7220      	strb	r0, [r4, #8]
    885a:	7aa8      	ldrb	r0, [r5, #10]
    885c:	7260      	strb	r0, [r4, #9]
    885e:	8968      	ldrh	r0, [r5, #10]
    8860:	0a00      	lsrs	r0, r0, #8
    8862:	72a0      	strb	r0, [r4, #10]
    8864:	7b28      	ldrb	r0, [r5, #12]
    8866:	72e0      	strb	r0, [r4, #11]
    8868:	89a8      	ldrh	r0, [r5, #12]
    886a:	0a00      	lsrs	r0, r0, #8
    886c:	7320      	strb	r0, [r4, #12]
    886e:	200b      	movs	r0, #11
    8870:	e7a5      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8872:	7022      	strb	r2, [r4, #0]
    8874:	20a3      	movs	r0, #163	; 0xa3
    8876:	70a0      	strb	r0, [r4, #2]
    8878:	7928      	ldrb	r0, [r5, #4]
    887a:	70e0      	strb	r0, [r4, #3]
    887c:	88a8      	ldrh	r0, [r5, #4]
    887e:	0a00      	lsrs	r0, r0, #8
    8880:	7120      	strb	r0, [r4, #4]
    8882:	79a8      	ldrb	r0, [r5, #6]
    8884:	7160      	strb	r0, [r4, #5]
    8886:	79e8      	ldrb	r0, [r5, #7]
    8888:	71a0      	strb	r0, [r4, #6]
    888a:	2005      	movs	r0, #5
    888c:	e797      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    888e:	7026      	strb	r6, [r4, #0]
    8890:	2013      	movs	r0, #19
    8892:	70a0      	strb	r0, [r4, #2]
    8894:	7928      	ldrb	r0, [r5, #4]
    8896:	70e0      	strb	r0, [r4, #3]
    8898:	7968      	ldrb	r0, [r5, #5]
    889a:	7120      	strb	r0, [r4, #4]
    889c:	f8d5 0006 	ldr.w	r0, [r5, #6]
    88a0:	f8c4 0005 	str.w	r0, [r4, #5]
    88a4:	8968      	ldrh	r0, [r5, #10]
    88a6:	f8a4 0009 	strh.w	r0, [r4, #9]
    88aa:	200a      	movs	r0, #10
    88ac:	e787      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    88ae:	7022      	strb	r2, [r4, #0]
    88b0:	20a4      	movs	r0, #164	; 0xa4
    88b2:	70a0      	strb	r0, [r4, #2]
    88b4:	7928      	ldrb	r0, [r5, #4]
    88b6:	70e0      	strb	r0, [r4, #3]
    88b8:	88a8      	ldrh	r0, [r5, #4]
    88ba:	0a00      	lsrs	r0, r0, #8
    88bc:	7120      	strb	r0, [r4, #4]
    88be:	79a8      	ldrb	r0, [r5, #6]
    88c0:	7160      	strb	r0, [r4, #5]
    88c2:	79e8      	ldrb	r0, [r5, #7]
    88c4:	71a0      	strb	r0, [r4, #6]
    88c6:	e626      	b.n	8516 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x8a>
    88c8:	7022      	strb	r2, [r4, #0]
    88ca:	2080      	movs	r0, #128	; 0x80
    88cc:	70a0      	strb	r0, [r4, #2]
    88ce:	88a9      	ldrh	r1, [r5, #4]
    88d0:	f8a4 1003 	strh.w	r1, [r4, #3]
    88d4:	88e9      	ldrh	r1, [r5, #6]
    88d6:	f8a4 1005 	strh.w	r1, [r4, #5]
    88da:	7a29      	ldrb	r1, [r5, #8]
    88dc:	71e1      	strb	r1, [r4, #7]
    88de:	8969      	ldrh	r1, [r5, #10]
    88e0:	8121      	strh	r1, [r4, #8]
    88e2:	89a9      	ldrh	r1, [r5, #12]
    88e4:	8161      	strh	r1, [r4, #10]
    88e6:	89e9      	ldrh	r1, [r5, #14]
    88e8:	81a1      	strh	r1, [r4, #12]
    88ea:	7c29      	ldrb	r1, [r5, #16]
    88ec:	f001 0101 	and.w	r1, r1, #1
    88f0:	73a1      	strb	r1, [r4, #14]
    88f2:	200d      	movs	r0, #13
    88f4:	e763      	b.n	87be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>

000088f6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    88f6:	223e      	movs	r2, #62	; 0x3e
    88f8:	7002      	strb	r2, [r0, #0]
    88fa:	2201      	movs	r2, #1
    88fc:	7082      	strb	r2, [r0, #2]
    88fe:	790a      	ldrb	r2, [r1, #4]
    8900:	70c2      	strb	r2, [r0, #3]
    8902:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    8906:	7102      	strb	r2, [r0, #4]
    8908:	880a      	ldrh	r2, [r1, #0]
    890a:	0a12      	lsrs	r2, r2, #8
    890c:	7142      	strb	r2, [r0, #5]
    890e:	788a      	ldrb	r2, [r1, #2]
    8910:	7182      	strb	r2, [r0, #6]
    8912:	78ca      	ldrb	r2, [r1, #3]
    8914:	71c2      	strb	r2, [r0, #7]
    8916:	684a      	ldr	r2, [r1, #4]
    8918:	6082      	str	r2, [r0, #8]
    891a:	890a      	ldrh	r2, [r1, #8]
    891c:	8182      	strh	r2, [r0, #12]
    891e:	7d8a      	ldrb	r2, [r1, #22]
    8920:	7382      	strb	r2, [r0, #14]
    8922:	8aca      	ldrh	r2, [r1, #22]
    8924:	0a12      	lsrs	r2, r2, #8
    8926:	73c2      	strb	r2, [r0, #15]
    8928:	7e0a      	ldrb	r2, [r1, #24]
    892a:	7402      	strb	r2, [r0, #16]
    892c:	8b0a      	ldrh	r2, [r1, #24]
    892e:	0a12      	lsrs	r2, r2, #8
    8930:	7442      	strb	r2, [r0, #17]
    8932:	7e8a      	ldrb	r2, [r1, #26]
    8934:	7482      	strb	r2, [r0, #18]
    8936:	8b4a      	ldrh	r2, [r1, #26]
    8938:	0a12      	lsrs	r2, r2, #8
    893a:	74c2      	strb	r2, [r0, #19]
    893c:	7f09      	ldrb	r1, [r1, #28]
    893e:	7501      	strb	r1, [r0, #20]
    8940:	2113      	movs	r1, #19
    8942:	7041      	strb	r1, [r0, #1]
    8944:	4608      	mov	r0, r1
    8946:	4770      	bx	lr
    8948:	223e      	movs	r2, #62	; 0x3e
    894a:	7002      	strb	r2, [r0, #0]
    894c:	220a      	movs	r2, #10
    894e:	7082      	strb	r2, [r0, #2]
    8950:	790a      	ldrb	r2, [r1, #4]
    8952:	70c2      	strb	r2, [r0, #3]
    8954:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    8958:	7102      	strb	r2, [r0, #4]
    895a:	880a      	ldrh	r2, [r1, #0]
    895c:	0a12      	lsrs	r2, r2, #8
    895e:	7142      	strb	r2, [r0, #5]
    8960:	788a      	ldrb	r2, [r1, #2]
    8962:	7182      	strb	r2, [r0, #6]
    8964:	78ca      	ldrb	r2, [r1, #3]
    8966:	71c2      	strb	r2, [r0, #7]
    8968:	684a      	ldr	r2, [r1, #4]
    896a:	6082      	str	r2, [r0, #8]
    896c:	890a      	ldrh	r2, [r1, #8]
    896e:	8182      	strh	r2, [r0, #12]
    8970:	f8d1 200a 	ldr.w	r2, [r1, #10]
    8974:	f8c0 200e 	str.w	r2, [r0, #14]
    8978:	89ca      	ldrh	r2, [r1, #14]
    897a:	8242      	strh	r2, [r0, #18]
    897c:	690a      	ldr	r2, [r1, #16]
    897e:	6142      	str	r2, [r0, #20]
    8980:	8a8a      	ldrh	r2, [r1, #20]
    8982:	8302      	strh	r2, [r0, #24]
    8984:	7d8a      	ldrb	r2, [r1, #22]
    8986:	7682      	strb	r2, [r0, #26]
    8988:	8aca      	ldrh	r2, [r1, #22]
    898a:	0a12      	lsrs	r2, r2, #8
    898c:	76c2      	strb	r2, [r0, #27]
    898e:	7e0a      	ldrb	r2, [r1, #24]
    8990:	7702      	strb	r2, [r0, #28]
    8992:	8b0a      	ldrh	r2, [r1, #24]
    8994:	0a12      	lsrs	r2, r2, #8
    8996:	7742      	strb	r2, [r0, #29]
    8998:	7e8a      	ldrb	r2, [r1, #26]
    899a:	7782      	strb	r2, [r0, #30]
    899c:	8b4a      	ldrh	r2, [r1, #26]
    899e:	0a12      	lsrs	r2, r2, #8
    89a0:	77c2      	strb	r2, [r0, #31]
    89a2:	7f09      	ldrb	r1, [r1, #28]
    89a4:	f880 1020 	strb.w	r1, [r0, #32]
    89a8:	211f      	movs	r1, #31
    89aa:	7041      	strb	r1, [r0, #1]
    89ac:	4608      	mov	r0, r1
    89ae:	4770      	bx	lr
    89b0:	094a      	lsrs	r2, r1, #5
    89b2:	f001 011f 	and.w	r1, r1, #31
    89b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    89ba:	40c8      	lsrs	r0, r1
    89bc:	f000 0001 	and.w	r0, r0, #1
    89c0:	4770      	bx	lr

000089c2 <sdc_hci_get>:
    89c2:	b510      	push	{r4, lr}
    89c4:	460c      	mov	r4, r1
    89c6:	b130      	cbz	r0, 89d6 <sdc_hci_get+0x14>
    89c8:	b12c      	cbz	r4, 89d6 <sdc_hci_get+0x14>
    89ca:	f7f7 fda1 	bl	510 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    89ce:	b128      	cbz	r0, 89dc <sdc_hci_get+0x1a>
    89d0:	7020      	strb	r0, [r4, #0]
    89d2:	2000      	movs	r0, #0
    89d4:	bd10      	pop	{r4, pc}
    89d6:	f06f 0015 	mvn.w	r0, #21
    89da:	bd10      	pop	{r4, pc}
    89dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    89e0:	bd10      	pop	{r4, pc}

000089e2 <sdc_hci_cmd_cb_set_event_mask>:
    89e2:	b510      	push	{r4, lr}
    89e4:	f7f7 fe34 	bl	650 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    89e8:	2000      	movs	r0, #0
    89ea:	bd10      	pop	{r4, pc}

000089ec <sdc_hci_cmd_vs_conn_event_extend>:
    89ec:	b508      	push	{r3, lr}
    89ee:	7800      	ldrb	r0, [r0, #0]
    89f0:	f88d 0000 	strb.w	r0, [sp]
    89f4:	4668      	mov	r0, sp
    89f6:	f000 ffd1 	bl	999c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    89fa:	bd08      	pop	{r3, pc}

000089fc <sdc_hci_cmd_vs_conn_update>:
    89fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    89fe:	2100      	movs	r1, #0
    8a00:	9100      	str	r1, [sp, #0]
    8a02:	9101      	str	r1, [sp, #4]
    8a04:	9102      	str	r1, [sp, #8]
    8a06:	9103      	str	r1, [sp, #12]
    8a08:	f8d0 1002 	ldr.w	r1, [r0, #2]
    8a0c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8a10:	4291      	cmp	r1, r2
    8a12:	d304      	bcc.n	8a1e <sdc_hci_cmd_vs_conn_update+0x22>
    8a14:	f240 42e2 	movw	r2, #1250	; 0x4e2
    8a18:	fbb1 f1f2 	udiv	r1, r1, r2
    8a1c:	e005      	b.n	8a2a <sdc_hci_cmd_vs_conn_update+0x2e>
    8a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a22:	fbb1 f1f2 	udiv	r1, r1, r2
    8a26:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    8a2a:	8802      	ldrh	r2, [r0, #0]
    8a2c:	b289      	uxth	r1, r1
    8a2e:	f8ad 2000 	strh.w	r2, [sp]
    8a32:	f8ad 1002 	strh.w	r1, [sp, #2]
    8a36:	f8ad 1004 	strh.w	r1, [sp, #4]
    8a3a:	88c1      	ldrh	r1, [r0, #6]
    8a3c:	f8ad 1006 	strh.w	r1, [sp, #6]
    8a40:	8900      	ldrh	r0, [r0, #8]
    8a42:	f8ad 0008 	strh.w	r0, [sp, #8]
    8a46:	4668      	mov	r0, sp
    8a48:	f000 fec3 	bl	97d2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    8a4c:	b004      	add	sp, #16
    8a4e:	bd10      	pop	{r4, pc}

00008a50 <sdc_hci_cmd_vs_event_length_set>:
    8a50:	f7fa bbbe 	b.w	31d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00008a54 <sdc_hci_cmd_vs_llpm_mode_set>:
    8a54:	2001      	movs	r0, #1
    8a56:	4770      	bx	lr

00008a58 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    8a58:	7800      	ldrb	r0, [r0, #0]
    8a5a:	b100      	cbz	r0, 8a5e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    8a5c:	2001      	movs	r0, #1
    8a5e:	f000 bf87 	b.w	9970 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008a62 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    8a62:	b510      	push	{r4, lr}
    8a64:	4604      	mov	r4, r0
    8a66:	f7ff f9bd 	bl	7de4 <mpsl_temperature_get>
    8a6a:	17c1      	asrs	r1, r0, #31
    8a6c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8a70:	1080      	asrs	r0, r0, #2
    8a72:	287f      	cmp	r0, #127	; 0x7f
    8a74:	dd01      	ble.n	8a7a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    8a76:	207f      	movs	r0, #127	; 0x7f
    8a78:	e004      	b.n	8a84 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8a7a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    8a7e:	4288      	cmp	r0, r1
    8a80:	da00      	bge.n	8a84 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8a82:	4608      	mov	r0, r1
    8a84:	7020      	strb	r0, [r4, #0]
    8a86:	2000      	movs	r0, #0
    8a88:	bd10      	pop	{r4, pc}

00008a8a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    8a8a:	f000 bf76 	b.w	997a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00008a8e <sdc_hci_cmd_ip_read_bd_addr>:
    8a8e:	f000 bf8d 	b.w	99ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00008a92 <sdc_hci_cmd_ip_read_local_version_information>:
    8a92:	f7fa bbef 	b.w	3274 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008a96 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8a96:	f000 be78 	b.w	978a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00008a9a <sdc_hci_cmd_le_clear_filter_accept_list>:
    8a9a:	f000 be8d 	b.w	97b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008a9e <sdc_hci_cmd_le_encrypt>:
    8a9e:	f000 bedb 	b.w	9858 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008aa2 <sdc_hci_cmd_le_rand>:
    8aa2:	f000 bee2 	b.w	986a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008aa6 <sdc_hci_cmd_le_read_buffer_size>:
    8aa6:	f7fa bb73 	b.w	3190 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008aaa <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8aaa:	f000 bef4 	b.w	9896 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00008aae <sdc_hci_cmd_le_read_transmit_power>:
    8aae:	f000 bee2 	b.w	9876 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008ab2 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8ab2:	f000 bef7 	b.w	98a4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008ab6 <sdc_hci_cmd_le_set_event_mask>:
    8ab6:	b510      	push	{r4, lr}
    8ab8:	f7f7 fdc2 	bl	640 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    8abc:	2000      	movs	r0, #0
    8abe:	bd10      	pop	{r4, pc}

00008ac0 <sdc_hci_cmd_le_set_random_address>:
    8ac0:	f000 bf05 	b.w	98ce <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00008ac4 <sdc_hci_cmd_le_set_scan_enable>:
    8ac4:	f000 bf11 	b.w	98ea <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

00008ac8 <sdc_hci_cmd_le_set_scan_params>:
    8ac8:	f000 bf25 	b.w	9916 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    8acc:	b570      	push	{r4, r5, r6, lr}
    8ace:	880b      	ldrh	r3, [r1, #0]
    8ad0:	7cc4      	ldrb	r4, [r0, #19]
    8ad2:	f100 0518 	add.w	r5, r0, #24
    8ad6:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8ada:	8802      	ldrh	r2, [r0, #0]
    8adc:	4435      	add	r5, r6
    8ade:	1d64      	adds	r4, r4, #5
    8ae0:	882d      	ldrh	r5, [r5, #0]
    8ae2:	4422      	add	r2, r4
    8ae4:	b292      	uxth	r2, r2
    8ae6:	4425      	add	r5, r4
    8ae8:	1e54      	subs	r4, r2, #1
    8aea:	442c      	add	r4, r5
    8aec:	fb94 f4f2 	sdiv	r4, r4, r2
    8af0:	fb02 6204 	mla	r2, r2, r4, r6
    8af4:	8840      	ldrh	r0, [r0, #2]
    8af6:	b292      	uxth	r2, r2
    8af8:	4290      	cmp	r0, r2
    8afa:	d903      	bls.n	8b04 <sdc_hci_cmd_le_set_scan_params+0x3c>
    8afc:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    8b00:	4310      	orrs	r0, r2
    8b02:	e002      	b.n	8b0a <sdc_hci_cmd_le_set_scan_params+0x42>
    8b04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8b08:	4398      	bics	r0, r3
    8b0a:	8008      	strh	r0, [r1, #0]
    8b0c:	bd70      	pop	{r4, r5, r6, pc}
    8b0e:	0442      	lsls	r2, r0, #17
    8b10:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    8b14:	d107      	bne.n	8b26 <sdc_hci_cmd_le_set_scan_params+0x5e>
    8b16:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    8b1a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    8b1e:	4288      	cmp	r0, r1
    8b20:	d001      	beq.n	8b26 <sdc_hci_cmd_le_set_scan_params+0x5e>
    8b22:	2001      	movs	r0, #1
    8b24:	4770      	bx	lr
    8b26:	2000      	movs	r0, #0
    8b28:	4770      	bx	lr

00008b2a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    8b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b2e:	4604      	mov	r4, r0
    8b30:	f100 0318 	add.w	r3, r0, #24
    8b34:	88c0      	ldrh	r0, [r0, #6]
    8b36:	460e      	mov	r6, r1
    8b38:	f3c0 070e 	ubfx	r7, r0, #0, #15
    8b3c:	8a20      	ldrh	r0, [r4, #16]
    8b3e:	19d9      	adds	r1, r3, r7
    8b40:	b108      	cbz	r0, 8b46 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    8b42:	42b0      	cmp	r0, r6
    8b44:	d202      	bcs.n	8b4c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    8b46:	2000      	movs	r0, #0
    8b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b4c:	89a0      	ldrh	r0, [r4, #12]
    8b4e:	2500      	movs	r5, #0
    8b50:	b140      	cbz	r0, 8b64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    8b52:	f8b1 c000 	ldrh.w	ip, [r1]
    8b56:	4560      	cmp	r0, ip
    8b58:	d006      	beq.n	8b68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    8b5a:	f44f 7101 	mov.w	r1, #516	; 0x204
    8b5e:	2014      	movs	r0, #20
    8b60:	f7f7 fc18 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b64:	800d      	strh	r5, [r1, #0]
    8b66:	e00e      	b.n	8b86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    8b68:	f894 c013 	ldrb.w	ip, [r4, #19]
    8b6c:	4418      	add	r0, r3
    8b6e:	f10c 0c05 	add.w	ip, ip, #5
    8b72:	44bc      	add	ip, r7
    8b74:	4460      	add	r0, ip
    8b76:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    8b7a:	f820 cc03 	strh.w	ip, [r0, #-3]
    8b7e:	f894 c016 	ldrb.w	ip, [r4, #22]
    8b82:	f800 cc01 	strb.w	ip, [r0, #-1]
    8b86:	89a0      	ldrh	r0, [r4, #12]
    8b88:	4430      	add	r0, r6
    8b8a:	81a0      	strh	r0, [r4, #12]
    8b8c:	8808      	ldrh	r0, [r1, #0]
    8b8e:	4430      	add	r0, r6
    8b90:	8008      	strh	r0, [r1, #0]
    8b92:	b12a      	cbz	r2, 8ba0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    8b94:	1da1      	adds	r1, r4, #6
    8b96:	4620      	mov	r0, r4
    8b98:	f7ff ff98 	bl	8acc <sdc_hci_cmd_le_set_scan_params+0x4>
    8b9c:	81a5      	strh	r5, [r4, #12]
    8b9e:	e00a      	b.n	8bb6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    8ba0:	7ce0      	ldrb	r0, [r4, #19]
    8ba2:	89a1      	ldrh	r1, [r4, #12]
    8ba4:	1d40      	adds	r0, r0, #5
    8ba6:	4438      	add	r0, r7
    8ba8:	4419      	add	r1, r3
    8baa:	4408      	add	r0, r1
    8bac:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    8bb0:	82a1      	strh	r1, [r4, #20]
    8bb2:	7880      	ldrb	r0, [r0, #2]
    8bb4:	75a0      	strb	r0, [r4, #22]
    8bb6:	8225      	strh	r5, [r4, #16]
    8bb8:	2001      	movs	r0, #1
    8bba:	e7c5      	b.n	8b48 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

00008bbc <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    8bbc:	1c80      	adds	r0, r0, #2
    8bbe:	4770      	bx	lr

00008bc0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    8bc0:	b510      	push	{r4, lr}
    8bc2:	88c2      	ldrh	r2, [r0, #6]
    8bc4:	8903      	ldrh	r3, [r0, #8]
    8bc6:	f3c2 010e 	ubfx	r1, r2, #0, #15
    8bca:	f3c3 040e 	ubfx	r4, r3, #0, #15
    8bce:	1a61      	subs	r1, r4, r1
    8bd0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    8bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    8bd8:	429a      	cmp	r2, r3
    8bda:	d101      	bne.n	8be0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    8bdc:	8842      	ldrh	r2, [r0, #2]
    8bde:	4411      	add	r1, r2
    8be0:	7cc2      	ldrb	r2, [r0, #19]
    8be2:	8800      	ldrh	r0, [r0, #0]
    8be4:	4410      	add	r0, r2
    8be6:	1d40      	adds	r0, r0, #5
    8be8:	b280      	uxth	r0, r0
    8bea:	fb91 f0f0 	sdiv	r0, r1, r0
    8bee:	b280      	uxth	r0, r0
    8bf0:	bd10      	pop	{r4, pc}

00008bf2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    8bf2:	b510      	push	{r4, lr}
    8bf4:	4604      	mov	r4, r0
    8bf6:	88c0      	ldrh	r0, [r0, #6]
    8bf8:	88a1      	ldrh	r1, [r4, #4]
    8bfa:	4281      	cmp	r1, r0
    8bfc:	d003      	beq.n	8c06 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    8bfe:	8960      	ldrh	r0, [r4, #10]
    8c00:	b908      	cbnz	r0, 8c06 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    8c02:	89e0      	ldrh	r0, [r4, #14]
    8c04:	b108      	cbz	r0, 8c0a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    8c06:	2000      	movs	r0, #0
    8c08:	bd10      	pop	{r4, pc}
    8c0a:	1d21      	adds	r1, r4, #4
    8c0c:	4620      	mov	r0, r4
    8c0e:	f7ff ff5d 	bl	8acc <sdc_hci_cmd_le_set_scan_params+0x4>
    8c12:	2000      	movs	r0, #0
    8c14:	81e0      	strh	r0, [r4, #14]
    8c16:	2001      	movs	r0, #1
    8c18:	bd10      	pop	{r4, pc}

00008c1a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    8c1a:	b510      	push	{r4, lr}
    8c1c:	88c4      	ldrh	r4, [r0, #6]
    8c1e:	8883      	ldrh	r3, [r0, #4]
    8c20:	4601      	mov	r1, r0
    8c22:	f100 0218 	add.w	r2, r0, #24
    8c26:	f3c3 000e 	ubfx	r0, r3, #0, #15
    8c2a:	4410      	add	r0, r2
    8c2c:	42a3      	cmp	r3, r4
    8c2e:	d002      	beq.n	8c36 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    8c30:	8949      	ldrh	r1, [r1, #10]
    8c32:	2900      	cmp	r1, #0
    8c34:	d000      	beq.n	8c38 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    8c36:	2000      	movs	r0, #0
    8c38:	bd10      	pop	{r4, pc}

00008c3a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    8c3a:	8803      	ldrh	r3, [r0, #0]
    8c3c:	2b45      	cmp	r3, #69	; 0x45
    8c3e:	d200      	bcs.n	8c42 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    8c40:	2345      	movs	r3, #69	; 0x45
    8c42:	8013      	strh	r3, [r2, #0]
    8c44:	88c2      	ldrh	r2, [r0, #6]
    8c46:	f3c2 030e 	ubfx	r3, r2, #0, #15
    8c4a:	f100 0218 	add.w	r2, r0, #24
    8c4e:	441a      	add	r2, r3
    8c50:	600a      	str	r2, [r1, #0]
    8c52:	8980      	ldrh	r0, [r0, #12]
    8c54:	4770      	bx	lr

00008c56 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    8c56:	7cc0      	ldrb	r0, [r0, #19]
    8c58:	1d40      	adds	r0, r0, #5
    8c5a:	4408      	add	r0, r1
    8c5c:	1ec0      	subs	r0, r0, #3
    8c5e:	6010      	str	r0, [r2, #0]
    8c60:	8808      	ldrh	r0, [r1, #0]
    8c62:	4770      	bx	lr

00008c64 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    8c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c68:	461d      	mov	r5, r3
    8c6a:	4616      	mov	r6, r2
    8c6c:	9f06      	ldr	r7, [sp, #24]
    8c6e:	460b      	mov	r3, r1
    8c70:	4604      	mov	r4, r0
    8c72:	463a      	mov	r2, r7
    8c74:	4629      	mov	r1, r5
    8c76:	4630      	mov	r0, r6
    8c78:	f000 f839 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8c7c:	4283      	cmp	r3, r0
    8c7e:	d201      	bcs.n	8c84 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    8c80:	219e      	movs	r1, #158	; 0x9e
    8c82:	e012      	b.n	8caa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8c84:	07a0      	lsls	r0, r4, #30
    8c86:	d001      	beq.n	8c8c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    8c88:	219f      	movs	r1, #159	; 0x9f
    8c8a:	e00e      	b.n	8caa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8c8c:	2218      	movs	r2, #24
    8c8e:	2100      	movs	r1, #0
    8c90:	4620      	mov	r0, r4
    8c92:	f001 facf 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c96:	19a8      	adds	r0, r5, r6
    8c98:	1d40      	adds	r0, r0, #5
    8c9a:	4378      	muls	r0, r7
    8c9c:	b280      	uxth	r0, r0
    8c9e:	74e5      	strb	r5, [r4, #19]
    8ca0:	8060      	strh	r0, [r4, #2]
    8ca2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8ca6:	d903      	bls.n	8cb0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    8ca8:	21a4      	movs	r1, #164	; 0xa4
    8caa:	2014      	movs	r0, #20
    8cac:	f7f7 fb72 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cb0:	8026      	strh	r6, [r4, #0]
    8cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008cb6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    8cb6:	b570      	push	{r4, r5, r6, lr}
    8cb8:	460b      	mov	r3, r1
    8cba:	4604      	mov	r4, r0
    8cbc:	f100 0118 	add.w	r1, r0, #24
    8cc0:	8902      	ldrh	r2, [r0, #8]
    8cc2:	8880      	ldrh	r0, [r0, #4]
    8cc4:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8cc8:	440d      	add	r5, r1
    8cca:	4282      	cmp	r2, r0
    8ccc:	d101      	bne.n	8cd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    8cce:	2000      	movs	r0, #0
    8cd0:	bd70      	pop	{r4, r5, r6, pc}
    8cd2:	b123      	cbz	r3, 8cde <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8cd4:	7ce2      	ldrb	r2, [r4, #19]
    8cd6:	1ca9      	adds	r1, r5, #2
    8cd8:	4618      	mov	r0, r3
    8cda:	f001 fa31 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8cde:	882d      	ldrh	r5, [r5, #0]
    8ce0:	f104 0108 	add.w	r1, r4, #8
    8ce4:	4620      	mov	r0, r4
    8ce6:	f7ff fef1 	bl	8acc <sdc_hci_cmd_le_set_scan_params+0x4>
    8cea:	4628      	mov	r0, r5
    8cec:	bd70      	pop	{r4, r5, r6, pc}

00008cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8cee:	4401      	add	r1, r0
    8cf0:	1d49      	adds	r1, r1, #5
    8cf2:	4351      	muls	r1, r2
    8cf4:	b28a      	uxth	r2, r1
    8cf6:	2100      	movs	r1, #0
    8cf8:	2845      	cmp	r0, #69	; 0x45
    8cfa:	d202      	bcs.n	8d02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8cfc:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8d00:	b281      	uxth	r1, r0
    8d02:	3218      	adds	r2, #24
    8d04:	1850      	adds	r0, r2, r1
    8d06:	b280      	uxth	r0, r0
    8d08:	4770      	bx	lr

00008d0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    8d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d0e:	4688      	mov	r8, r1
    8d10:	88c1      	ldrh	r1, [r0, #6]
    8d12:	4604      	mov	r4, r0
    8d14:	8900      	ldrh	r0, [r0, #8]
    8d16:	f3c1 060e 	ubfx	r6, r1, #0, #15
    8d1a:	f104 0518 	add.w	r5, r4, #24
    8d1e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    8d22:	eb05 0906 	add.w	r9, r5, r6
    8d26:	f7ff fef2 	bl	8b0e <sdc_hci_cmd_le_set_scan_params+0x46>
    8d2a:	2200      	movs	r2, #0
    8d2c:	b998      	cbnz	r0, 8d56 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    8d2e:	8820      	ldrh	r0, [r4, #0]
    8d30:	2845      	cmp	r0, #69	; 0x45
    8d32:	d200      	bcs.n	8d36 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    8d34:	2045      	movs	r0, #69	; 0x45
    8d36:	42b7      	cmp	r7, r6
    8d38:	d906      	bls.n	8d48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    8d3a:	7ce3      	ldrb	r3, [r4, #19]
    8d3c:	1bb9      	subs	r1, r7, r6
    8d3e:	1ac9      	subs	r1, r1, r3
    8d40:	1f49      	subs	r1, r1, #5
    8d42:	4281      	cmp	r1, r0
    8d44:	da00      	bge.n	8d48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    8d46:	4608      	mov	r0, r1
    8d48:	89a1      	ldrh	r1, [r4, #12]
    8d4a:	b111      	cbz	r1, 8d52 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    8d4c:	f8b9 3000 	ldrh.w	r3, [r9]
    8d50:	1ac0      	subs	r0, r0, r3
    8d52:	4540      	cmp	r0, r8
    8d54:	da03      	bge.n	8d5e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    8d56:	8222      	strh	r2, [r4, #16]
    8d58:	2000      	movs	r0, #0
    8d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d5e:	7ce0      	ldrb	r0, [r4, #19]
    8d60:	4429      	add	r1, r5
    8d62:	1d40      	adds	r0, r0, #5
    8d64:	4430      	add	r0, r6
    8d66:	4408      	add	r0, r1
    8d68:	f8a4 8010 	strh.w	r8, [r4, #16]
    8d6c:	1ec0      	subs	r0, r0, #3
    8d6e:	e7f4      	b.n	8d5a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00008d70 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    8d70:	b510      	push	{r4, lr}
    8d72:	000c      	movs	r4, r1
    8d74:	d004      	beq.n	8d80 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    8d76:	2c08      	cmp	r4, #8
    8d78:	d207      	bcs.n	8d8a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    8d7a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    8d7e:	e00a      	b.n	8d96 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    8d80:	b108      	cbz	r0, 8d86 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    8d82:	2100      	movs	r1, #0
    8d84:	6001      	str	r1, [r0, #0]
    8d86:	2000      	movs	r0, #0
    8d88:	bd10      	pop	{r4, pc}
    8d8a:	b158      	cbz	r0, 8da4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    8d8c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    8d90:	d304      	bcc.n	8d9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    8d92:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    8d96:	2015      	movs	r0, #21
    8d98:	f7f7 fafc 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d9c:	b2a1      	uxth	r1, r4
    8d9e:	6800      	ldr	r0, [r0, #0]
    8da0:	f000 f814 	bl	8dcc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    8da4:	1d20      	adds	r0, r4, #4
    8da6:	bd10      	pop	{r4, pc}

00008da8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    8da8:	2100      	movs	r1, #0
    8daa:	6802      	ldr	r2, [r0, #0]
    8dac:	e003      	b.n	8db6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    8dae:	8893      	ldrh	r3, [r2, #4]
    8db0:	6812      	ldr	r2, [r2, #0]
    8db2:	4419      	add	r1, r3
    8db4:	b289      	uxth	r1, r1
    8db6:	2a00      	cmp	r2, #0
    8db8:	d1f9      	bne.n	8dae <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    8dba:	f000 b807 	b.w	8dcc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00008dbe <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    8dbe:	2300      	movs	r3, #0
    8dc0:	600b      	str	r3, [r1, #0]
    8dc2:	808a      	strh	r2, [r1, #4]
    8dc4:	6802      	ldr	r2, [r0, #0]
    8dc6:	600a      	str	r2, [r1, #0]
    8dc8:	6001      	str	r1, [r0, #0]
    8dca:	4770      	bx	lr
    8dcc:	2300      	movs	r3, #0
    8dce:	6043      	str	r3, [r0, #4]
    8dd0:	1d02      	adds	r2, r0, #4
    8dd2:	8101      	strh	r1, [r0, #8]
    8dd4:	6002      	str	r2, [r0, #0]
    8dd6:	4770      	bx	lr
    8dd8:	b170      	cbz	r0, 8df8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3a>
    8dda:	7882      	ldrb	r2, [r0, #2]
    8ddc:	fbb1 f3f2 	udiv	r3, r1, r2
    8de0:	fb02 1213 	mls	r2, r2, r3, r1
    8de4:	b2d2      	uxtb	r2, r2
    8de6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8dea:	895b      	ldrh	r3, [r3, #10]
    8dec:	428b      	cmp	r3, r1
    8dee:	d101      	bne.n	8df4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x36>
    8df0:	4610      	mov	r0, r2
    8df2:	4770      	bx	lr
    8df4:	78c3      	ldrb	r3, [r0, #3]
    8df6:	b10b      	cbz	r3, 8dfc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3e>
    8df8:	20ff      	movs	r0, #255	; 0xff
    8dfa:	4770      	bx	lr
    8dfc:	f7f7 bd60 	b.w	8c0 <__z_interrupt_stack_SIZEOF+0x80>
    8e00:	8802      	ldrh	r2, [r0, #0]
    8e02:	fb01 0102 	mla	r1, r1, r2, r0
    8e06:	7880      	ldrb	r0, [r0, #2]
    8e08:	220a      	movs	r2, #10
    8e0a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8e0e:	4408      	add	r0, r1
    8e10:	4770      	bx	lr

00008e12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    8e12:	b570      	push	{r4, r5, r6, lr}
    8e14:	460e      	mov	r6, r1
    8e16:	461d      	mov	r5, r3
    8e18:	4611      	mov	r1, r2
    8e1a:	f000 f813 	bl	8e44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    8e1e:	4604      	mov	r4, r0
    8e20:	4629      	mov	r1, r5
    8e22:	4630      	mov	r0, r6
    8e24:	f000 f804 	bl	8e30 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    8e28:	4420      	add	r0, r4
    8e2a:	1d00      	adds	r0, r0, #4
    8e2c:	b280      	uxth	r0, r0
    8e2e:	bd70      	pop	{r4, r5, r6, pc}
    8e30:	b510      	push	{r4, lr}
    8e32:	460a      	mov	r2, r1
    8e34:	2109      	movs	r1, #9
    8e36:	f7ff ff5a 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e3a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8e3e:	1cc0      	adds	r0, r0, #3
    8e40:	4008      	ands	r0, r1
    8e42:	bd10      	pop	{r4, pc}
    8e44:	b510      	push	{r4, lr}
    8e46:	460a      	mov	r2, r1
    8e48:	210a      	movs	r1, #10
    8e4a:	f7ff ff50 	bl	8cee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e4e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8e52:	1cc0      	adds	r0, r0, #3
    8e54:	4008      	ands	r0, r1
    8e56:	bd10      	pop	{r4, pc}
    8e58:	2800      	cmp	r0, #0
    8e5a:	db09      	blt.n	8e70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    8e5c:	f000 021f 	and.w	r2, r0, #31
    8e60:	2101      	movs	r1, #1
    8e62:	4091      	lsls	r1, r2
    8e64:	0940      	lsrs	r0, r0, #5
    8e66:	0080      	lsls	r0, r0, #2
    8e68:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e6c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8e70:	4770      	bx	lr
    8e72:	2800      	cmp	r0, #0
    8e74:	db0d      	blt.n	8e92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    8e76:	f000 021f 	and.w	r2, r0, #31
    8e7a:	2101      	movs	r1, #1
    8e7c:	4091      	lsls	r1, r2
    8e7e:	0940      	lsrs	r0, r0, #5
    8e80:	0080      	lsls	r0, r0, #2
    8e82:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e86:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8e8a:	f3bf 8f4f 	dsb	sy
    8e8e:	f3bf 8f6f 	isb	sy
    8e92:	4770      	bx	lr
    8e94:	b510      	push	{r4, lr}
    8e96:	200e      	movs	r0, #14
    8e98:	f7ff ffeb 	bl	8e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    8e9c:	200e      	movs	r0, #14
    8e9e:	f7ff ffdb 	bl	8e58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8ea2:	200f      	movs	r0, #15
    8ea4:	f7ff ffe5 	bl	8e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    8ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8eac:	200f      	movs	r0, #15
    8eae:	f7ff bfd3 	b.w	8e58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8eb2:	2800      	cmp	r0, #0
    8eb4:	db09      	blt.n	8eca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    8eb6:	f000 021f 	and.w	r2, r0, #31
    8eba:	2101      	movs	r1, #1
    8ebc:	4091      	lsls	r1, r2
    8ebe:	0940      	lsrs	r0, r0, #5
    8ec0:	0080      	lsls	r0, r0, #2
    8ec2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8ec6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8eca:	4770      	bx	lr
    8ecc:	5840      	ldr	r0, [r0, r1]
    8ece:	2800      	cmp	r0, #0
    8ed0:	d000      	beq.n	8ed4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    8ed2:	2001      	movs	r0, #1
    8ed4:	4770      	bx	lr

00008ed6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    8ed6:	b510      	push	{r4, lr}
    8ed8:	4604      	mov	r4, r0
    8eda:	4620      	mov	r0, r4
    8edc:	f7f7 fe88 	bl	bf0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    8ee0:	2811      	cmp	r0, #17
    8ee2:	d0fa      	beq.n	8eda <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    8ee4:	bd10      	pop	{r4, pc}

00008ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    8ee6:	b510      	push	{r4, lr}
    8ee8:	f7ff fff5 	bl	8ed6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    8eec:	2800      	cmp	r0, #0
    8eee:	d003      	beq.n	8ef8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    8ef0:	21a9      	movs	r1, #169	; 0xa9
    8ef2:	201d      	movs	r0, #29
    8ef4:	f7f7 fa4e 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ef8:	bd10      	pop	{r4, pc}

00008efa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    8efa:	f7f7 bf57 	b.w	dac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

00008efe <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    8efe:	b510      	push	{r4, lr}
    8f00:	4050      	eors	r0, r2
    8f02:	780a      	ldrb	r2, [r1, #0]
    8f04:	781c      	ldrb	r4, [r3, #0]
    8f06:	4062      	eors	r2, r4
    8f08:	4410      	add	r0, r2
    8f0a:	784a      	ldrb	r2, [r1, #1]
    8f0c:	785c      	ldrb	r4, [r3, #1]
    8f0e:	4062      	eors	r2, r4
    8f10:	4410      	add	r0, r2
    8f12:	788a      	ldrb	r2, [r1, #2]
    8f14:	789c      	ldrb	r4, [r3, #2]
    8f16:	4062      	eors	r2, r4
    8f18:	4410      	add	r0, r2
    8f1a:	78ca      	ldrb	r2, [r1, #3]
    8f1c:	78dc      	ldrb	r4, [r3, #3]
    8f1e:	4062      	eors	r2, r4
    8f20:	4410      	add	r0, r2
    8f22:	790a      	ldrb	r2, [r1, #4]
    8f24:	791c      	ldrb	r4, [r3, #4]
    8f26:	7949      	ldrb	r1, [r1, #5]
    8f28:	4062      	eors	r2, r4
    8f2a:	4410      	add	r0, r2
    8f2c:	795a      	ldrb	r2, [r3, #5]
    8f2e:	4051      	eors	r1, r2
    8f30:	42c1      	cmn	r1, r0
    8f32:	d101      	bne.n	8f38 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    8f34:	2001      	movs	r0, #1
    8f36:	bd10      	pop	{r4, pc}
    8f38:	2000      	movs	r0, #0
    8f3a:	bd10      	pop	{r4, pc}

00008f3c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    8f3c:	b510      	push	{r4, lr}
    8f3e:	2900      	cmp	r1, #0
    8f40:	4604      	mov	r4, r0
    8f42:	f04f 0106 	mov.w	r1, #6
    8f46:	d002      	beq.n	8f4e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    8f48:	f7f7 fa88 	bl	45c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f4c:	e001      	b.n	8f52 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    8f4e:	f7f7 fa93 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f52:	7960      	ldrb	r0, [r4, #5]
    8f54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f58:	7160      	strb	r0, [r4, #5]
    8f5a:	bd10      	pop	{r4, pc}

00008f5c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    8f5c:	4770      	bx	lr

00008f5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    8f5e:	b530      	push	{r4, r5, lr}
    8f60:	460c      	mov	r4, r1
    8f62:	4605      	mov	r5, r0
    8f64:	b08d      	sub	sp, #52	; 0x34
    8f66:	f04f 0103 	mov.w	r1, #3
    8f6a:	f104 0003 	add.w	r0, r4, #3
    8f6e:	b112      	cbz	r2, 8f76 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8f70:	f7f7 fa74 	bl	45c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f74:	e001      	b.n	8f7a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    8f76:	f7f7 fa7f 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f7a:	7960      	ldrb	r0, [r4, #5]
    8f7c:	220d      	movs	r2, #13
    8f7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f82:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8f86:	7160      	strb	r0, [r4, #5]
    8f88:	2100      	movs	r1, #0
    8f8a:	a804      	add	r0, sp, #16
    8f8c:	f001 f952 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8f90:	78e0      	ldrb	r0, [r4, #3]
    8f92:	f88d 001f 	strb.w	r0, [sp, #31]
    8f96:	7920      	ldrb	r0, [r4, #4]
    8f98:	f88d 001e 	strb.w	r0, [sp, #30]
    8f9c:	7960      	ldrb	r0, [r4, #5]
    8f9e:	f88d 001d 	strb.w	r0, [sp, #29]
    8fa2:	2210      	movs	r2, #16
    8fa4:	4629      	mov	r1, r5
    8fa6:	4668      	mov	r0, sp
    8fa8:	f001 f8ca 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8fac:	4668      	mov	r0, sp
    8fae:	f7ff ff9a 	bl	8ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8fb2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    8fb6:	7020      	strb	r0, [r4, #0]
    8fb8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    8fbc:	7060      	strb	r0, [r4, #1]
    8fbe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8fc2:	70a0      	strb	r0, [r4, #2]
    8fc4:	b00d      	add	sp, #52	; 0x34
    8fc6:	bd30      	pop	{r4, r5, pc}

00008fc8 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    8fc8:	b530      	push	{r4, r5, lr}
    8fca:	b08d      	sub	sp, #52	; 0x34
    8fcc:	460c      	mov	r4, r1
    8fce:	4605      	mov	r5, r0
    8fd0:	220d      	movs	r2, #13
    8fd2:	2100      	movs	r1, #0
    8fd4:	a804      	add	r0, sp, #16
    8fd6:	f001 f92d 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fda:	78e0      	ldrb	r0, [r4, #3]
    8fdc:	f88d 001f 	strb.w	r0, [sp, #31]
    8fe0:	7920      	ldrb	r0, [r4, #4]
    8fe2:	f88d 001e 	strb.w	r0, [sp, #30]
    8fe6:	7960      	ldrb	r0, [r4, #5]
    8fe8:	f88d 001d 	strb.w	r0, [sp, #29]
    8fec:	2210      	movs	r2, #16
    8fee:	4629      	mov	r1, r5
    8ff0:	4668      	mov	r0, sp
    8ff2:	f001 f8a5 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8ff6:	4668      	mov	r0, sp
    8ff8:	f7ff ff75 	bl	8ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8ffc:	7820      	ldrb	r0, [r4, #0]
    8ffe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9002:	4288      	cmp	r0, r1
    9004:	d10c      	bne.n	9020 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    9006:	7860      	ldrb	r0, [r4, #1]
    9008:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    900c:	4288      	cmp	r0, r1
    900e:	d107      	bne.n	9020 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    9010:	78a0      	ldrb	r0, [r4, #2]
    9012:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    9016:	4288      	cmp	r0, r1
    9018:	d102      	bne.n	9020 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    901a:	2001      	movs	r0, #1
    901c:	b00d      	add	sp, #52	; 0x34
    901e:	bd30      	pop	{r4, r5, pc}
    9020:	2000      	movs	r0, #0
    9022:	e7fb      	b.n	901c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

00009024 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    9024:	2101      	movs	r1, #1
    9026:	f7f7 bfe7 	b.w	ff8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000902a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    902a:	b510      	push	{r4, lr}
    902c:	f000 fe69 	bl	9d02 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    9030:	b118      	cbz	r0, 903a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    9032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9036:	f7fa ba71 	b.w	351c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    903a:	20ff      	movs	r0, #255	; 0xff
    903c:	bd10      	pop	{r4, pc}

0000903e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    903e:	b570      	push	{r4, r5, r6, lr}
    9040:	460e      	mov	r6, r1
    9042:	b08c      	sub	sp, #48	; 0x30
    9044:	4614      	mov	r4, r2
    9046:	4601      	mov	r1, r0
    9048:	461d      	mov	r5, r3
    904a:	2210      	movs	r2, #16
    904c:	4668      	mov	r0, sp
    904e:	f000 f85a 	bl	9106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9052:	2210      	movs	r2, #16
    9054:	4631      	mov	r1, r6
    9056:	a804      	add	r0, sp, #16
    9058:	f000 f855 	bl	9106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    905c:	4668      	mov	r0, sp
    905e:	f7ff ff42 	bl	8ee6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    9062:	a908      	add	r1, sp, #32
    9064:	f04f 0210 	mov.w	r2, #16
    9068:	4628      	mov	r0, r5
    906a:	b11c      	cbz	r4, 9074 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    906c:	f000 f84b 	bl	9106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9070:	b00c      	add	sp, #48	; 0x30
    9072:	bd70      	pop	{r4, r5, r6, pc}
    9074:	f001 f864 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9078:	e7fa      	b.n	9070 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000907a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    907a:	b510      	push	{r4, lr}
    907c:	460c      	mov	r4, r1
    907e:	2100      	movs	r1, #0
    9080:	f7f7 fc32 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9084:	6060      	str	r0, [r4, #4]
    9086:	b110      	cbz	r0, 908e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    9088:	2000      	movs	r0, #0
    908a:	7020      	strb	r0, [r4, #0]
    908c:	bd10      	pop	{r4, pc}
    908e:	2002      	movs	r0, #2
    9090:	bd10      	pop	{r4, pc}

00009092 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    9092:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9096:	4348      	muls	r0, r1
    9098:	4770      	bx	lr

0000909a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    909a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    909e:	fbb0 f0f1 	udiv	r0, r0, r1
    90a2:	b280      	uxth	r0, r0
    90a4:	4770      	bx	lr

000090a6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    90a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90aa:	4607      	mov	r7, r0
    90ac:	460e      	mov	r6, r1
    90ae:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    90b2:	f7fc fee9 	bl	5e88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    90b6:	b198      	cbz	r0, 90e0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    90b8:	b31e      	cbz	r6, 9102 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    90ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    90be:	1b40      	subs	r0, r0, r5
    90c0:	2300      	movs	r3, #0
    90c2:	eb61 0104 	sbc.w	r1, r1, r4
    90c6:	461a      	mov	r2, r3
    90c8:	1a1b      	subs	r3, r3, r0
    90ca:	418a      	sbcs	r2, r1
    90cc:	da19      	bge.n	9102 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    90ce:	1c42      	adds	r2, r0, #1
    90d0:	f171 0100 	sbcs.w	r1, r1, #0
    90d4:	db07      	blt.n	90e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    90d6:	f240 211a 	movw	r1, #538	; 0x21a
    90da:	2029      	movs	r0, #41	; 0x29
    90dc:	f7f7 f95a 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90e0:	f44f 7104 	mov.w	r1, #528	; 0x210
    90e4:	e7f9      	b.n	90da <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    90e6:	4430      	add	r0, r6
    90e8:	1e40      	subs	r0, r0, #1
    90ea:	fbb0 f1f6 	udiv	r1, r0, r6
    90ee:	fb01 f006 	mul.w	r0, r1, r6
    90f2:	1828      	adds	r0, r5, r0
    90f4:	f144 0400 	adc.w	r4, r4, #0
    90f8:	e9c7 0404 	strd	r0, r4, [r7, #16]
    90fc:	4608      	mov	r0, r1
    90fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9102:	2000      	movs	r0, #0
    9104:	e7fb      	b.n	90fe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

00009106 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    9106:	b530      	push	{r4, r5, lr}
    9108:	4613      	mov	r3, r2
    910a:	e006      	b.n	911a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    910c:	18cc      	adds	r4, r1, r3
    910e:	1ad5      	subs	r5, r2, r3
    9110:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    9114:	1e5b      	subs	r3, r3, #1
    9116:	5544      	strb	r4, [r0, r5]
    9118:	b2db      	uxtb	r3, r3
    911a:	2b00      	cmp	r3, #0
    911c:	d1f6      	bne.n	910c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    911e:	bd30      	pop	{r4, r5, pc}

00009120 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    9120:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9124:	fbb0 f0f1 	udiv	r0, r0, r1
    9128:	b280      	uxth	r0, r0
    912a:	4770      	bx	lr

0000912c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    912c:	f240 2171 	movw	r1, #625	; 0x271
    9130:	fb10 f001 	smulbb	r0, r0, r1
    9134:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9138:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    913c:	4770      	bx	lr

0000913e <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    913e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9142:	fbb0 f0f1 	udiv	r0, r0, r1
    9146:	b2c0      	uxtb	r0, r0
    9148:	4770      	bx	lr

0000914a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    914a:	2100      	movs	r1, #0
    914c:	4608      	mov	r0, r1
    914e:	f7f7 bfd5 	b.w	10fc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    9152:	4401      	add	r1, r0
    9154:	2914      	cmp	r1, #20
    9156:	dd01      	ble.n	915c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    9158:	2014      	movs	r0, #20
    915a:	4770      	bx	lr
    915c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    9160:	4281      	cmp	r1, r0
    9162:	dbfa      	blt.n	915a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    9164:	b248      	sxtb	r0, r1
    9166:	4770      	bx	lr

00009168 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    9168:	7841      	ldrb	r1, [r0, #1]
    916a:	7800      	ldrb	r0, [r0, #0]
    916c:	f010 000f 	ands.w	r0, r0, #15
    9170:	d005      	beq.n	917e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    9172:	2801      	cmp	r0, #1
    9174:	d007      	beq.n	9186 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    9176:	2802      	cmp	r0, #2
    9178:	d001      	beq.n	917e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    917a:	2806      	cmp	r0, #6
    917c:	d105      	bne.n	918a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    917e:	1f89      	subs	r1, r1, #6
    9180:	291f      	cmp	r1, #31
    9182:	d904      	bls.n	918e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    9184:	e001      	b.n	918a <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    9186:	290c      	cmp	r1, #12
    9188:	d001      	beq.n	918e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    918a:	2000      	movs	r0, #0
    918c:	4770      	bx	lr
    918e:	2001      	movs	r0, #1
    9190:	4770      	bx	lr

00009192 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    9192:	7800      	ldrb	r0, [r0, #0]
    9194:	09c0      	lsrs	r0, r0, #7
    9196:	4770      	bx	lr

00009198 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    9198:	7800      	ldrb	r0, [r0, #0]
    919a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    919e:	4770      	bx	lr

000091a0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    91a0:	7801      	ldrb	r1, [r0, #0]
    91a2:	f001 010f 	and.w	r1, r1, #15
    91a6:	2904      	cmp	r1, #4
    91a8:	d105      	bne.n	91b6 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    91aa:	7840      	ldrb	r0, [r0, #1]
    91ac:	1f80      	subs	r0, r0, #6
    91ae:	281f      	cmp	r0, #31
    91b0:	d801      	bhi.n	91b6 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    91b2:	2001      	movs	r0, #1
    91b4:	4770      	bx	lr
    91b6:	2000      	movs	r0, #0
    91b8:	4770      	bx	lr

000091ba <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    91ba:	b510      	push	{r4, lr}
    91bc:	7802      	ldrb	r2, [r0, #0]
    91be:	f001 030f 	and.w	r3, r1, #15
    91c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    91c6:	431a      	orrs	r2, r3
    91c8:	7002      	strb	r2, [r0, #0]
    91ca:	2907      	cmp	r1, #7
    91cc:	d20c      	bcs.n	91e8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    91ce:	e8df f001 	tbb	[pc, r1]
    91d2:	0604      	.short	0x0604
    91d4:	08040604 	.word	0x08040604
    91d8:	0004      	.short	0x0004
    91da:	2106      	movs	r1, #6
    91dc:	e002      	b.n	91e4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    91de:	210c      	movs	r1, #12
    91e0:	e000      	b.n	91e4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    91e2:	2122      	movs	r1, #34	; 0x22
    91e4:	7041      	strb	r1, [r0, #1]
    91e6:	bd10      	pop	{r4, pc}
    91e8:	21a8      	movs	r1, #168	; 0xa8
    91ea:	202a      	movs	r0, #42	; 0x2a
    91ec:	f7f7 f8d2 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000091f0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    91f0:	680a      	ldr	r2, [r1, #0]
    91f2:	f840 2f09 	str.w	r2, [r0, #9]!
    91f6:	8889      	ldrh	r1, [r1, #4]
    91f8:	8081      	strh	r1, [r0, #4]
    91fa:	4770      	bx	lr

000091fc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    91fc:	7802      	ldrb	r2, [r0, #0]
    91fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9202:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    9206:	7002      	strb	r2, [r0, #0]
    9208:	4770      	bx	lr

0000920a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    920a:	680a      	ldr	r2, [r1, #0]
    920c:	f840 2f03 	str.w	r2, [r0, #3]!
    9210:	8889      	ldrh	r1, [r1, #4]
    9212:	8081      	strh	r1, [r0, #4]
    9214:	4770      	bx	lr

00009216 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    9216:	7802      	ldrb	r2, [r0, #0]
    9218:	2340      	movs	r3, #64	; 0x40
    921a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    921e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    9222:	430a      	orrs	r2, r1
    9224:	7002      	strb	r2, [r0, #0]
    9226:	4770      	bx	lr

00009228 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    9228:	b508      	push	{r3, lr}
    922a:	7a03      	ldrb	r3, [r0, #8]
    922c:	f88d 3000 	strb.w	r3, [sp]
    9230:	9b00      	ldr	r3, [sp, #0]
    9232:	9300      	str	r3, [sp, #0]
    9234:	f89d 3000 	ldrb.w	r3, [sp]
    9238:	b123      	cbz	r3, 9244 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    923a:	f240 21c2 	movw	r1, #706	; 0x2c2
    923e:	2010      	movs	r0, #16
    9240:	f7f7 f8a8 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9248:	f7f8 b874 	b.w	1334 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

0000924c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    924c:	f7f8 b8a0 	b.w	1390 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    9250:	b510      	push	{r4, lr}
    9252:	4604      	mov	r4, r0
    9254:	2108      	movs	r1, #8
    9256:	4620      	mov	r0, r4
    9258:	f7f7 f90e 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    925c:	6820      	ldr	r0, [r4, #0]
    925e:	2800      	cmp	r0, #0
    9260:	d102      	bne.n	9268 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    9262:	6860      	ldr	r0, [r4, #4]
    9264:	2800      	cmp	r0, #0
    9266:	d0f5      	beq.n	9254 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    9268:	bd10      	pop	{r4, pc}

0000926a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    926a:	b508      	push	{r3, lr}
    926c:	f000 f804 	bl	9278 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    9270:	466a      	mov	r2, sp
    9272:	f7f8 f919 	bl	14a8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    9276:	bd08      	pop	{r3, pc}
    9278:	b530      	push	{r4, r5, lr}
    927a:	784c      	ldrb	r4, [r1, #1]
    927c:	4603      	mov	r3, r0
    927e:	7808      	ldrb	r0, [r1, #0]
    9280:	788d      	ldrb	r5, [r1, #2]
    9282:	0e22      	lsrs	r2, r4, #24
    9284:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    9288:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    928c:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    9290:	78cd      	ldrb	r5, [r1, #3]
    9292:	790c      	ldrb	r4, [r1, #4]
    9294:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    9298:	4322      	orrs	r2, r4
    929a:	7949      	ldrb	r1, [r1, #5]
    929c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    92a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    92a4:	4611      	mov	r1, r2
    92a6:	2b01      	cmp	r3, #1
    92a8:	d101      	bne.n	92ae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    92aa:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    92ae:	bd30      	pop	{r4, r5, pc}
    92b0:	2801      	cmp	r0, #1
    92b2:	d102      	bne.n	92ba <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    92b4:	7948      	ldrb	r0, [r1, #5]
    92b6:	0980      	lsrs	r0, r0, #6
    92b8:	d001      	beq.n	92be <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    92ba:	2000      	movs	r0, #0
    92bc:	4770      	bx	lr
    92be:	2001      	movs	r0, #1
    92c0:	4770      	bx	lr
    92c2:	2801      	cmp	r0, #1
    92c4:	d106      	bne.n	92d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92c6:	7948      	ldrb	r0, [r1, #5]
    92c8:	2101      	movs	r1, #1
    92ca:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    92ce:	d101      	bne.n	92d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92d0:	2001      	movs	r0, #1
    92d2:	4770      	bx	lr
    92d4:	2000      	movs	r0, #0
    92d6:	4770      	bx	lr
    92d8:	b118      	cbz	r0, 92e2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    92da:	2802      	cmp	r0, #2
    92dc:	d001      	beq.n	92e2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    92de:	2001      	movs	r0, #1
    92e0:	4770      	bx	lr
    92e2:	2000      	movs	r0, #0
    92e4:	4770      	bx	lr
    92e6:	2802      	cmp	r0, #2
    92e8:	d003      	beq.n	92f2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    92ea:	2803      	cmp	r0, #3
    92ec:	d001      	beq.n	92f2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    92ee:	2000      	movs	r0, #0
    92f0:	4770      	bx	lr
    92f2:	2001      	movs	r0, #1
    92f4:	4770      	bx	lr

000092f6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    92f6:	f7f8 bff3 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>

000092fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    92fa:	b510      	push	{r4, lr}
    92fc:	2000      	movs	r0, #0
    92fe:	f7f8 fe45 	bl	1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    9302:	f7f8 fa93 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9306:	f7f8 fff9 	bl	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    930a:	2000      	movs	r0, #0
    930c:	bd10      	pop	{r4, pc}
    930e:	b510      	push	{r4, lr}
    9310:	f000 f83c 	bl	938c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    9314:	2005      	movs	r0, #5
    9316:	bd10      	pop	{r4, pc}
    9318:	b510      	push	{r4, lr}
    931a:	f7f8 fe51 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    931e:	f7fa f9c3 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9322:	2005      	movs	r0, #5
    9324:	bd10      	pop	{r4, pc}
    9326:	b530      	push	{r4, r5, lr}
    9328:	b08b      	sub	sp, #44	; 0x2c
    932a:	4605      	mov	r5, r0
    932c:	f7f8 fe48 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    9330:	7828      	ldrb	r0, [r5, #0]
    9332:	4669      	mov	r1, sp
    9334:	f000 040f 	and.w	r4, r0, #15
    9338:	4622      	mov	r2, r4
    933a:	4628      	mov	r0, r5
    933c:	f7f9 f946 	bl	25cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    9340:	2200      	movs	r2, #0
    9342:	4621      	mov	r1, r4
    9344:	4668      	mov	r0, sp
    9346:	f7f8 faab 	bl	18a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    934a:	4621      	mov	r1, r4
    934c:	4668      	mov	r0, sp
    934e:	f7f8 fdb7 	bl	1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    9352:	4604      	mov	r4, r0
    9354:	f7f8 fa6a 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9358:	b00b      	add	sp, #44	; 0x2c
    935a:	4620      	mov	r0, r4
    935c:	bd30      	pop	{r4, r5, pc}
    935e:	f240 31af 	movw	r1, #943	; 0x3af
    9362:	2032      	movs	r0, #50	; 0x32
    9364:	f7f7 f816 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9368:	b510      	push	{r4, lr}
    936a:	f000 f80f 	bl	938c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    936e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9372:	f7f8 bfcb 	b.w	230c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    9376:	b510      	push	{r4, lr}
    9378:	f7f8 fe22 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    937c:	f7fa f994 	bl	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9384:	f7f8 bfc2 	b.w	230c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    9388:	f7f8 bfaa 	b.w	22e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x594>
    938c:	b510      	push	{r4, lr}
    938e:	f7f8 fe17 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    9392:	f7f8 fa4b 	bl	182c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    9396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    939a:	f7fa b985 	b.w	36a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    939e:	f7ff bcb4 	b.w	8d0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    93a2:	b570      	push	{r4, r5, r6, lr}
    93a4:	4614      	mov	r4, r2
    93a6:	461d      	mov	r5, r3
    93a8:	4606      	mov	r6, r0
    93aa:	f000 fd37 	bl	9e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    93ae:	1900      	adds	r0, r0, r4
    93b0:	4169      	adcs	r1, r5
    93b2:	e9c6 0100 	strd	r0, r1, [r6]
    93b6:	bd70      	pop	{r4, r5, r6, pc}

000093b8 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    93b8:	b510      	push	{r4, lr}
    93ba:	f7f7 fba5 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    93be:	f000 f944 	bl	964a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    93c2:	4604      	mov	r4, r0
    93c4:	221c      	movs	r2, #28
    93c6:	2100      	movs	r1, #0
    93c8:	3009      	adds	r0, #9
    93ca:	f000 ff33 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    93ce:	207f      	movs	r0, #127	; 0x7f
    93d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    93d4:	21ff      	movs	r1, #255	; 0xff
    93d6:	75e1      	strb	r1, [r4, #23]
    93d8:	72a1      	strb	r1, [r4, #10]
    93da:	7721      	strb	r1, [r4, #28]
    93dc:	7ce0      	ldrb	r0, [r4, #19]
    93de:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    93e2:	3020      	adds	r0, #32
    93e4:	74e0      	strb	r0, [r4, #19]
    93e6:	bd10      	pop	{r4, pc}

000093e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    93e8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    93ec:	461d      	mov	r5, r3
    93ee:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    93f2:	4616      	mov	r6, r2
    93f4:	4688      	mov	r8, r1
    93f6:	4681      	mov	r9, r0
    93f8:	f7f7 fb86 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    93fc:	4604      	mov	r4, r0
    93fe:	f7ff fbdf 	bl	8bc0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9402:	2801      	cmp	r0, #1
    9404:	d066      	beq.n	94d4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    9406:	4620      	mov	r0, r4
    9408:	f000 f91f 	bl	964a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    940c:	4604      	mov	r4, r0
    940e:	221c      	movs	r2, #28
    9410:	2100      	movs	r1, #0
    9412:	3009      	adds	r0, #9
    9414:	f000 ff0e 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9418:	2701      	movs	r7, #1
    941a:	7267      	strb	r7, [r4, #9]
    941c:	ea5f 0008 	movs.w	r0, r8
    9420:	d009      	beq.n	9436 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    9422:	2801      	cmp	r0, #1
    9424:	d00b      	beq.n	943e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    9426:	2802      	cmp	r0, #2
    9428:	d02d      	beq.n	9486 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    942a:	f1b8 0f06 	cmp.w	r8, #6
    942e:	d02c      	beq.n	948a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    9430:	f240 310b 	movw	r1, #779	; 0x30b
    9434:	e04b      	b.n	94ce <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    9436:	7ce0      	ldrb	r0, [r4, #19]
    9438:	f040 0001 	orr.w	r0, r0, #1
    943c:	e026      	b.n	948c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    943e:	7ce0      	ldrb	r0, [r4, #19]
    9440:	f040 0005 	orr.w	r0, r0, #5
    9444:	f040 0010 	orr.w	r0, r0, #16
    9448:	74e0      	strb	r0, [r4, #19]
    944a:	f104 030a 	add.w	r3, r4, #10
    944e:	1c5a      	adds	r2, r3, #1
    9450:	4648      	mov	r0, r9
    9452:	990a      	ldr	r1, [sp, #40]	; 0x28
    9454:	f000 f8de 	bl	9614 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    9458:	f884 a012 	strb.w	sl, [r4, #18]
    945c:	7567      	strb	r7, [r4, #21]
    945e:	2000      	movs	r0, #0
    9460:	75a0      	strb	r0, [r4, #22]
    9462:	20ff      	movs	r0, #255	; 0xff
    9464:	75e0      	strb	r0, [r4, #23]
    9466:	7ce1      	ldrb	r1, [r4, #19]
    9468:	0749      	lsls	r1, r1, #29
    946a:	d518      	bpl.n	949e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    946c:	f104 001d 	add.w	r0, r4, #29
    9470:	1e41      	subs	r1, r0, #1
    9472:	2d02      	cmp	r5, #2
    9474:	d00d      	beq.n	9492 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    9476:	2d03      	cmp	r5, #3
    9478:	d00b      	beq.n	9492 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    947a:	f8d9 2008 	ldr.w	r2, [r9, #8]
    947e:	6813      	ldr	r3, [r2, #0]
    9480:	6003      	str	r3, [r0, #0]
    9482:	8892      	ldrh	r2, [r2, #4]
    9484:	e008      	b.n	9498 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    9486:	7ce0      	ldrb	r0, [r4, #19]
    9488:	e7dc      	b.n	9444 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    948a:	7ce0      	ldrb	r0, [r4, #19]
    948c:	f040 0002 	orr.w	r0, r0, #2
    9490:	e7d8      	b.n	9444 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    9492:	6832      	ldr	r2, [r6, #0]
    9494:	6002      	str	r2, [r0, #0]
    9496:	88b2      	ldrh	r2, [r6, #4]
    9498:	8082      	strh	r2, [r0, #4]
    949a:	700d      	strb	r5, [r1, #0]
    949c:	e000      	b.n	94a0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    949e:	7720      	strb	r0, [r4, #28]
    94a0:	207f      	movs	r0, #127	; 0x7f
    94a2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    94a6:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    94aa:	f7f7 fb27 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    94ae:	4605      	mov	r5, r0
    94b0:	f7f7 fb2a 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    94b4:	2201      	movs	r2, #1
    94b6:	4629      	mov	r1, r5
    94b8:	f000 f8d0 	bl	965c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    94bc:	b128      	cbz	r0, 94ca <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    94be:	4620      	mov	r0, r4
    94c0:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94c4:	2100      	movs	r1, #0
    94c6:	f7f9 b879 	b.w	25bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x870>
    94ca:	f240 312b 	movw	r1, #811	; 0x32b
    94ce:	2033      	movs	r0, #51	; 0x33
    94d0:	f7f6 ff60 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94d4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

000094d8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    94d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94dc:	461e      	mov	r6, r3
    94de:	4617      	mov	r7, r2
    94e0:	4689      	mov	r9, r1
    94e2:	4682      	mov	sl, r0
    94e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    94e8:	f7f7 fb0e 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    94ec:	4604      	mov	r4, r0
    94ee:	f7ff fb67 	bl	8bc0 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    94f2:	2801      	cmp	r0, #1
    94f4:	d039      	beq.n	956a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    94f6:	4620      	mov	r0, r4
    94f8:	f000 f8a7 	bl	964a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    94fc:	4604      	mov	r4, r0
    94fe:	221c      	movs	r2, #28
    9500:	2100      	movs	r1, #0
    9502:	3009      	adds	r0, #9
    9504:	f000 fe96 	bl	a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9508:	2501      	movs	r5, #1
    950a:	f104 030a 	add.w	r3, r4, #10
    950e:	7265      	strb	r5, [r4, #9]
    9510:	1c5a      	adds	r2, r3, #1
    9512:	4649      	mov	r1, r9
    9514:	4650      	mov	r0, sl
    9516:	f000 f87d 	bl	9614 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    951a:	f884 8012 	strb.w	r8, [r4, #18]
    951e:	7ce0      	ldrb	r0, [r4, #19]
    9520:	21ff      	movs	r1, #255	; 0xff
    9522:	f367 0000 	bfi	r0, r7, #0, #1
    9526:	f040 001a 	orr.w	r0, r0, #26
    952a:	74e0      	strb	r0, [r4, #19]
    952c:	7565      	strb	r5, [r4, #21]
    952e:	2000      	movs	r0, #0
    9530:	75a0      	strb	r0, [r4, #22]
    9532:	75e1      	strb	r1, [r4, #23]
    9534:	7721      	strb	r1, [r4, #28]
    9536:	207f      	movs	r0, #127	; 0x7f
    9538:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    953c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    9540:	f7f7 fadc 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9544:	4605      	mov	r5, r0
    9546:	f7f7 fadf 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    954a:	2201      	movs	r2, #1
    954c:	4629      	mov	r1, r5
    954e:	f000 f885 	bl	965c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    9552:	b128      	cbz	r0, 9560 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    9554:	4620      	mov	r0, r4
    9556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    955a:	2100      	movs	r1, #0
    955c:	f7f9 b82e 	b.w	25bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x870>
    9560:	f44f 7156 	mov.w	r1, #856	; 0x358
    9564:	2033      	movs	r0, #51	; 0x33
    9566:	f7f6 ff15 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000956e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    956e:	f7ff bf23 	b.w	93b8 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    9572:	b5f0      	push	{r4, r5, r6, r7, lr}
    9574:	b08b      	sub	sp, #44	; 0x2c
    9576:	460f      	mov	r7, r1
    9578:	f7f7 fac6 	bl	b08 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    957c:	4604      	mov	r4, r0
    957e:	f7ff fb4c 	bl	8c1a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    9582:	0005      	movs	r5, r0
    9584:	d00c      	beq.n	95a0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    9586:	4620      	mov	r0, r4
    9588:	4629      	mov	r1, r5
    958a:	aa0a      	add	r2, sp, #40	; 0x28
    958c:	f7ff fb63 	bl	8c56 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    9590:	4606      	mov	r6, r0
    9592:	f7f7 fab3 	bl	afc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9596:	42b0      	cmp	r0, r6
    9598:	d005      	beq.n	95a6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    959a:	f240 11ab 	movw	r1, #427	; 0x1ab
    959e:	e036      	b.n	960e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    95a0:	f240 11a1 	movw	r1, #417	; 0x1a1
    95a4:	e033      	b.n	960e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    95a6:	4669      	mov	r1, sp
    95a8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95aa:	f000 f859 	bl	9660 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    95ae:	1d3e      	adds	r6, r7, #4
    95b0:	4628      	mov	r0, r5
    95b2:	f7ff fb03 	bl	8bbc <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    95b6:	4605      	mov	r5, r0
    95b8:	f100 0109 	add.w	r1, r0, #9
    95bc:	221c      	movs	r2, #28
    95be:	4630      	mov	r0, r6
    95c0:	f000 fdbe 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    95c4:	7ce8      	ldrb	r0, [r5, #19]
    95c6:	f04f 0500 	mov.w	r5, #0
    95ca:	06c1      	lsls	r1, r0, #27
    95cc:	d50d      	bpl.n	95ea <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    95ce:	0740      	lsls	r0, r0, #29
    95d0:	d40a      	bmi.n	95e8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    95d2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    95d6:	f106 001c 	add.w	r0, r6, #28
    95da:	9903      	ldr	r1, [sp, #12]
    95dc:	f000 fdb0 	bl	a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    95e0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    95e4:	7230      	strb	r0, [r6, #8]
    95e6:	e000      	b.n	95ea <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    95e8:	7235      	strb	r5, [r6, #8]
    95ea:	707d      	strb	r5, [r7, #1]
    95ec:	2005      	movs	r0, #5
    95ee:	7038      	strb	r0, [r7, #0]
    95f0:	4638      	mov	r0, r7
    95f2:	f7f8 ff73 	bl	24dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x790>
    95f6:	4620      	mov	r0, r4
    95f8:	f7ff fafb 	bl	8bf2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    95fc:	b128      	cbz	r0, 960a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    95fe:	4620      	mov	r0, r4
    9600:	2100      	movs	r1, #0
    9602:	f7ff fb58 	bl	8cb6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    9606:	b00b      	add	sp, #44	; 0x2c
    9608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    960a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    960e:	2033      	movs	r0, #51	; 0x33
    9610:	f7f6 fec0 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9614:	b510      	push	{r4, lr}
    9616:	461c      	mov	r4, r3
    9618:	460b      	mov	r3, r1
    961a:	29ff      	cmp	r1, #255	; 0xff
    961c:	d00d      	beq.n	963a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    961e:	4621      	mov	r1, r4
    9620:	4618      	mov	r0, r3
    9622:	f7f7 fc99 	bl	f58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    9626:	b120      	cbz	r0, 9632 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    9628:	7820      	ldrb	r0, [r4, #0]
    962a:	f040 0002 	orr.w	r0, r0, #2
    962e:	7020      	strb	r0, [r4, #0]
    9630:	bd10      	pop	{r4, pc}
    9632:	21dc      	movs	r1, #220	; 0xdc
    9634:	2033      	movs	r0, #51	; 0x33
    9636:	f7f6 fead 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    963a:	7c41      	ldrb	r1, [r0, #17]
    963c:	7021      	strb	r1, [r4, #0]
    963e:	6840      	ldr	r0, [r0, #4]
    9640:	6801      	ldr	r1, [r0, #0]
    9642:	6011      	str	r1, [r2, #0]
    9644:	8880      	ldrh	r0, [r0, #4]
    9646:	8090      	strh	r0, [r2, #4]
    9648:	bd10      	pop	{r4, pc}
    964a:	b51c      	push	{r2, r3, r4, lr}
    964c:	4669      	mov	r1, sp
    964e:	aa01      	add	r2, sp, #4
    9650:	f7ff faf3 	bl	8c3a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    9654:	9800      	ldr	r0, [sp, #0]
    9656:	f7ff fab1 	bl	8bbc <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    965a:	bd1c      	pop	{r2, r3, r4, pc}
    965c:	f7ff ba65 	b.w	8b2a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

00009660 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    9660:	7802      	ldrb	r2, [r0, #0]
    9662:	f002 020f 	and.w	r2, r2, #15
    9666:	f7f8 bfb1 	b.w	25cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    966a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    966c:	256e      	movs	r5, #110	; 0x6e
    966e:	4668      	mov	r0, sp
    9670:	f7fe fcfc 	bl	806c <mpsl_fem_pa_is_configured>
    9674:	f89d 0000 	ldrb.w	r0, [sp]
    9678:	b108      	cbz	r0, 967e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    967a:	2401      	movs	r4, #1
    967c:	e000      	b.n	9680 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    967e:	2400      	movs	r4, #0
    9680:	a801      	add	r0, sp, #4
    9682:	f7fe fcdb 	bl	803c <mpsl_fem_lna_is_configured>
    9686:	f89d 0004 	ldrb.w	r0, [sp, #4]
    968a:	b100      	cbz	r0, 968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    968c:	2001      	movs	r0, #1
    968e:	4304      	orrs	r4, r0
    9690:	d000      	beq.n	9694 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    9692:	2578      	movs	r5, #120	; 0x78
    9694:	4628      	mov	r0, r5
    9696:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00009698 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    9698:	b510      	push	{r4, lr}
    969a:	f7ff ffe6 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    969e:	306b      	adds	r0, #107	; 0x6b
    96a0:	b280      	uxth	r0, r0
    96a2:	bd10      	pop	{r4, pc}
    96a4:	6980      	ldr	r0, [r0, #24]
    96a6:	2800      	cmp	r0, #0
    96a8:	d000      	beq.n	96ac <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    96aa:	2001      	movs	r0, #1
    96ac:	4770      	bx	lr
    96ae:	b510      	push	{r4, lr}
    96b0:	2802      	cmp	r0, #2
    96b2:	d007      	beq.n	96c4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2c>
    96b4:	2108      	movs	r1, #8
    96b6:	2801      	cmp	r0, #1
    96b8:	d006      	beq.n	96c8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x30>
    96ba:	f44f 7182 	mov.w	r1, #260	; 0x104
    96be:	2005      	movs	r0, #5
    96c0:	f7f6 fe68 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96c4:	2104      	movs	r1, #4
    96c6:	e7f6      	b.n	96b6 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    96c8:	202a      	movs	r0, #42	; 0x2a
    96ca:	2228      	movs	r2, #40	; 0x28
    96cc:	fb11 2000 	smlabb	r0, r1, r0, r2
    96d0:	b280      	uxth	r0, r0
    96d2:	bd10      	pop	{r4, pc}
    96d4:	b510      	push	{r4, lr}
    96d6:	f7ff ffc8 	bl	966a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    96da:	f500 7083 	add.w	r0, r0, #262	; 0x106
    96de:	b280      	uxth	r0, r0
    96e0:	bd10      	pop	{r4, pc}
    96e2:	f7fc b92d 	b.w	5940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    96e6:	1a10      	subs	r0, r2, r0
    96e8:	4770      	bx	lr

000096ea <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    96ea:	b510      	push	{r4, lr}
    96ec:	f7f9 fc6e 	bl	2fcc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    96f0:	2000      	movs	r0, #0
    96f2:	bd10      	pop	{r4, pc}

000096f4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    96f4:	b510      	push	{r4, lr}
    96f6:	460c      	mov	r4, r1
    96f8:	f7f7 f98a 	bl	a10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    96fc:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    9700:	2820      	cmp	r0, #32
    9702:	d006      	beq.n	9712 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x1e>
    9704:	f7fc fee4 	bl	64d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9708:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    970c:	f7fc febe 	bl	648c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9710:	b158      	cbz	r0, 972a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x36>
    9712:	f504 700a 	add.w	r0, r4, #552	; 0x228
    9716:	4604      	mov	r4, r0
    9718:	f7f9 fcd8 	bl	30cc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>
    971c:	2800      	cmp	r0, #0
    971e:	d009      	beq.n	9734 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x40>
    9720:	4620      	mov	r0, r4
    9722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9726:	f7f9 bcdf 	b.w	30e8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    972a:	f640 318a 	movw	r1, #2954	; 0xb8a
    972e:	2036      	movs	r0, #54	; 0x36
    9730:	f7f6 fe30 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9734:	bd10      	pop	{r4, pc}

00009736 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    9736:	b510      	push	{r4, lr}
    9738:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    973c:	1ac3      	subs	r3, r0, r3
    973e:	eb61 0104 	sbc.w	r1, r1, r4
    9742:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    9746:	17e0      	asrs	r0, r4, #31
    9748:	1ae4      	subs	r4, r4, r3
    974a:	4188      	sbcs	r0, r1
    974c:	da05      	bge.n	975a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    974e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9752:	1a18      	subs	r0, r3, r0
    9754:	f171 0000 	sbcs.w	r0, r1, #0
    9758:	db03      	blt.n	9762 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    975a:	21b6      	movs	r1, #182	; 0xb6
    975c:	2037      	movs	r0, #55	; 0x37
    975e:	f7f6 fe19 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9762:	2900      	cmp	r1, #0
    9764:	da00      	bge.n	9768 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    9766:	425b      	negs	r3, r3
    9768:	fbb3 f0f2 	udiv	r0, r3, r2
    976c:	fb02 3010 	mls	r0, r2, r0, r3
    9770:	2900      	cmp	r1, #0
    9772:	da02      	bge.n	977a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9774:	2800      	cmp	r0, #0
    9776:	d000      	beq.n	977a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9778:	1a10      	subs	r0, r2, r0
    977a:	bd10      	pop	{r4, pc}
    977c:	b118      	cbz	r0, 9786 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    977e:	2802      	cmp	r0, #2
    9780:	d001      	beq.n	9786 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    9782:	2001      	movs	r0, #1
    9784:	4770      	bx	lr
    9786:	2000      	movs	r0, #0
    9788:	4770      	bx	lr

0000978a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    978a:	b510      	push	{r4, lr}
    978c:	4604      	mov	r4, r0
    978e:	f000 fa56 	bl	9c3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    9792:	b108      	cbz	r0, 9798 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    9794:	200c      	movs	r0, #12
    9796:	bd10      	pop	{r4, pc}
    9798:	7820      	ldrb	r0, [r4, #0]
    979a:	b118      	cbz	r0, 97a4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    979c:	2801      	cmp	r0, #1
    979e:	d001      	beq.n	97a4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    97a0:	2012      	movs	r0, #18
    97a2:	bd10      	pop	{r4, pc}
    97a4:	f7ff ffea 	bl	977c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    97a8:	1c61      	adds	r1, r4, #1
    97aa:	f7f7 fe13 	bl	13d4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    97ae:	b108      	cbz	r0, 97b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    97b0:	2000      	movs	r0, #0
    97b2:	bd10      	pop	{r4, pc}
    97b4:	2007      	movs	r0, #7
    97b6:	bd10      	pop	{r4, pc}

000097b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    97b8:	b510      	push	{r4, lr}
    97ba:	f000 fa40 	bl	9c3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    97be:	b108      	cbz	r0, 97c4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    97c0:	200c      	movs	r0, #12
    97c2:	bd10      	pop	{r4, pc}
    97c4:	f7f7 fe64 	bl	1490 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    97c8:	2000      	movs	r0, #0
    97ca:	f7f7 fc0f 	bl	fec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    97ce:	2000      	movs	r0, #0
    97d0:	bd10      	pop	{r4, pc}

000097d2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    97d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97d6:	4605      	mov	r5, r0
    97d8:	f000 f8fb 	bl	99d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    97dc:	2800      	cmp	r0, #0
    97de:	d112      	bne.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    97e0:	8828      	ldrh	r0, [r5, #0]
    97e2:	2100      	movs	r1, #0
    97e4:	f7f7 f880 	bl	8e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97e8:	0004      	movs	r4, r0
    97ea:	d00e      	beq.n	980a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    97ec:	f000 f9fe 	bl	9bec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>
    97f0:	b158      	cbz	r0, 980a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    97f2:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    97f6:	f88d 0000 	strb.w	r0, [sp]
    97fa:	9800      	ldr	r0, [sp, #0]
    97fc:	9000      	str	r0, [sp, #0]
    97fe:	f89d 0000 	ldrb.w	r0, [sp]
    9802:	b120      	cbz	r0, 980e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    9804:	203a      	movs	r0, #58	; 0x3a
    9806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    980a:	2002      	movs	r0, #2
    980c:	e7fb      	b.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    980e:	f04f 0800 	mov.w	r8, #0
    9812:	88a8      	ldrh	r0, [r5, #4]
    9814:	f7ff fc3d 	bl	9092 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9818:	4607      	mov	r7, r0
    981a:	4601      	mov	r1, r0
    981c:	2005      	movs	r0, #5
    981e:	f7ff fc85 	bl	912c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9822:	4606      	mov	r6, r0
    9824:	4639      	mov	r1, r7
    9826:	2008      	movs	r0, #8
    9828:	f7ff fc80 	bl	912c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    982c:	42b0      	cmp	r0, r6
    982e:	d301      	bcc.n	9834 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    9830:	42be      	cmp	r6, r7
    9832:	d301      	bcc.n	9838 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    9834:	2012      	movs	r0, #18
    9836:	e7e6      	b.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    9838:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    983c:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    9840:	88e8      	ldrh	r0, [r5, #6]
    9842:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    9846:	8928      	ldrh	r0, [r5, #8]
    9848:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    984c:	f504 7419 	add.w	r4, r4, #612	; 0x264
    9850:	20ff      	movs	r0, #255	; 0xff
    9852:	7020      	strb	r0, [r4, #0]
    9854:	2000      	movs	r0, #0
    9856:	e7d6      	b.n	9806 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

00009858 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    9858:	b510      	push	{r4, lr}
    985a:	460b      	mov	r3, r1
    985c:	2201      	movs	r2, #1
    985e:	f100 0110 	add.w	r1, r0, #16
    9862:	f7ff fbec 	bl	903e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9866:	2000      	movs	r0, #0
    9868:	bd10      	pop	{r4, pc}

0000986a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    986a:	b510      	push	{r4, lr}
    986c:	2108      	movs	r1, #8
    986e:	f7f6 fe03 	bl	478 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9872:	2000      	movs	r0, #0
    9874:	bd10      	pop	{r4, pc}

00009876 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    9876:	b510      	push	{r4, lr}
    9878:	4604      	mov	r4, r0
    987a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    987e:	f000 f9d6 	bl	9c2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9882:	f7f7 fc1d 	bl	10c0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9886:	7020      	strb	r0, [r4, #0]
    9888:	f000 f9ad 	bl	9be6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    988c:	f7f7 fc18 	bl	10c0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9890:	7060      	strb	r0, [r4, #1]
    9892:	2000      	movs	r0, #0
    9894:	bd10      	pop	{r4, pc}

00009896 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    9896:	b510      	push	{r4, lr}
    9898:	4604      	mov	r4, r0
    989a:	f7f7 fdff 	bl	149c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    989e:	7020      	strb	r0, [r4, #0]
    98a0:	2000      	movs	r0, #0
    98a2:	bd10      	pop	{r4, pc}

000098a4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    98a4:	b510      	push	{r4, lr}
    98a6:	4604      	mov	r4, r0
    98a8:	f000 f9c9 	bl	9c3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    98ac:	b108      	cbz	r0, 98b2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    98ae:	200c      	movs	r0, #12
    98b0:	bd10      	pop	{r4, pc}
    98b2:	7820      	ldrb	r0, [r4, #0]
    98b4:	b108      	cbz	r0, 98ba <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    98b6:	2801      	cmp	r0, #1
    98b8:	d107      	bne.n	98ca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    98ba:	f7ff ff5f 	bl	977c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    98be:	1c61      	adds	r1, r4, #1
    98c0:	f7f7 fdc6 	bl	1450 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    98c4:	b108      	cbz	r0, 98ca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    98c6:	2000      	movs	r0, #0
    98c8:	bd10      	pop	{r4, pc}
    98ca:	2012      	movs	r0, #18
    98cc:	bd10      	pop	{r4, pc}

000098ce <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    98ce:	b510      	push	{r4, lr}
    98d0:	4604      	mov	r4, r0
    98d2:	2001      	movs	r0, #1
    98d4:	f000 f8af 	bl	9a36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    98d8:	b128      	cbz	r0, 98e6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    98da:	4621      	mov	r1, r4
    98dc:	2001      	movs	r0, #1
    98de:	f7f7 fa8b 	bl	df8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    98e2:	2000      	movs	r0, #0
    98e4:	bd10      	pop	{r4, pc}
    98e6:	200c      	movs	r0, #12
    98e8:	bd10      	pop	{r4, pc}

000098ea <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    98ea:	b51c      	push	{r2, r3, r4, lr}
    98ec:	7801      	ldrb	r1, [r0, #0]
    98ee:	f88d 1000 	strb.w	r1, [sp]
    98f2:	7840      	ldrb	r0, [r0, #1]
    98f4:	f88d 0001 	strb.w	r0, [sp, #1]
    98f8:	2000      	movs	r0, #0
    98fa:	f8ad 0002 	strh.w	r0, [sp, #2]
    98fe:	f8ad 0004 	strh.w	r0, [sp, #4]
    9902:	4601      	mov	r1, r0
    9904:	4668      	mov	r0, sp
    9906:	f000 f8c3 	bl	9a90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>
    990a:	2800      	cmp	r0, #0
    990c:	d102      	bne.n	9914 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    990e:	4668      	mov	r0, sp
    9910:	f000 f89d 	bl	9a4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a>
    9914:	bd1c      	pop	{r2, r3, r4, pc}

00009916 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    9916:	b500      	push	{lr}
    9918:	b087      	sub	sp, #28
    991a:	7941      	ldrb	r1, [r0, #5]
    991c:	f88d 1000 	strb.w	r1, [sp]
    9920:	7981      	ldrb	r1, [r0, #6]
    9922:	f88d 1001 	strb.w	r1, [sp, #1]
    9926:	2101      	movs	r1, #1
    9928:	f88d 1002 	strb.w	r1, [sp, #2]
    992c:	7801      	ldrb	r1, [r0, #0]
    992e:	f88d 1003 	strb.w	r1, [sp, #3]
    9932:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    9936:	f240 2271 	movw	r2, #625	; 0x271
    993a:	4351      	muls	r1, r2
    993c:	9102      	str	r1, [sp, #8]
    993e:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    9942:	4350      	muls	r0, r2
    9944:	9004      	str	r0, [sp, #16]
    9946:	2007      	movs	r0, #7
    9948:	f88d 0018 	strb.w	r0, [sp, #24]
    994c:	2000      	movs	r0, #0
    994e:	f88d 0019 	strb.w	r0, [sp, #25]
    9952:	9804      	ldr	r0, [sp, #16]
    9954:	f7f9 fcd2 	bl	32fc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x88>
    9958:	b140      	cbz	r0, 996c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    995a:	9802      	ldr	r0, [sp, #8]
    995c:	f7f9 fcc2 	bl	32e4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x70>
    9960:	b120      	cbz	r0, 996c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    9962:	4668      	mov	r0, sp
    9964:	f7f9 fc42 	bl	31ec <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    9968:	b007      	add	sp, #28
    996a:	bd00      	pop	{pc}
    996c:	2030      	movs	r0, #48	; 0x30
    996e:	e7fb      	b.n	9968 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

00009970 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    9970:	b510      	push	{r4, lr}
    9972:	f7f7 fa65 	bl	e40 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    9976:	2000      	movs	r0, #0
    9978:	bd10      	pop	{r4, pc}

0000997a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    997a:	b510      	push	{r4, lr}
    997c:	4604      	mov	r4, r0
    997e:	f7f9 fd0d 	bl	339c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    9982:	b118      	cbz	r0, 998c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    9984:	2000      	movs	r0, #0
    9986:	f000 f856 	bl	9a36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    998a:	b128      	cbz	r0, 9998 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    998c:	4621      	mov	r1, r4
    998e:	2000      	movs	r0, #0
    9990:	f7f7 fa32 	bl	df8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9994:	2000      	movs	r0, #0
    9996:	bd10      	pop	{r4, pc}
    9998:	200c      	movs	r0, #12
    999a:	bd10      	pop	{r4, pc}

0000999c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    999c:	b510      	push	{r4, lr}
    999e:	7800      	ldrb	r0, [r0, #0]
    99a0:	b100      	cbz	r0, 99a4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    99a2:	2001      	movs	r0, #1
    99a4:	f7f9 fb0c 	bl	2fc0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    99a8:	2000      	movs	r0, #0
    99aa:	bd10      	pop	{r4, pc}

000099ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    99ac:	b510      	push	{r4, lr}
    99ae:	4604      	mov	r4, r0
    99b0:	4601      	mov	r1, r0
    99b2:	2000      	movs	r0, #0
    99b4:	f7f7 fa08 	bl	dc8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    99b8:	b910      	cbnz	r0, 99c0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    99ba:	2000      	movs	r0, #0
    99bc:	6020      	str	r0, [r4, #0]
    99be:	80a0      	strh	r0, [r4, #4]
    99c0:	2000      	movs	r0, #0
    99c2:	bd10      	pop	{r4, pc}

000099c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    99c4:	b510      	push	{r4, lr}
    99c6:	f7f9 fcef 	bl	33a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    99ca:	2000      	movs	r0, #0
    99cc:	bd10      	pop	{r4, pc}

000099ce <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    99ce:	f000 b821 	b.w	9a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000099d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    99d2:	b510      	push	{r4, lr}
    99d4:	4604      	mov	r4, r0
    99d6:	2000      	movs	r0, #0
    99d8:	8822      	ldrh	r2, [r4, #0]
    99da:	b086      	sub	sp, #24
    99dc:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    99e0:	39ff      	subs	r1, #255	; 0xff
    99e2:	d008      	beq.n	99f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    99e4:	a903      	add	r1, sp, #12
    99e6:	4610      	mov	r0, r2
    99e8:	f7ff fb47 	bl	907a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    99ec:	b110      	cbz	r0, 99f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    99ee:	2002      	movs	r0, #2
    99f0:	b006      	add	sp, #24
    99f2:	bd10      	pop	{r4, pc}
    99f4:	9804      	ldr	r0, [sp, #16]
    99f6:	8921      	ldrh	r1, [r4, #8]
    99f8:	89a3      	ldrh	r3, [r4, #12]
    99fa:	8962      	ldrh	r2, [r4, #10]
    99fc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    9a00:	88e3      	ldrh	r3, [r4, #6]
    9a02:	88a2      	ldrh	r2, [r4, #4]
    9a04:	8861      	ldrh	r1, [r4, #2]
    9a06:	f000 f8c3 	bl	9b90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    9a0a:	b108      	cbz	r0, 9a10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    9a0c:	2000      	movs	r0, #0
    9a0e:	e7ef      	b.n	99f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    9a10:	2030      	movs	r0, #48	; 0x30
    9a12:	e7ed      	b.n	99f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00009a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9a14:	b510      	push	{r4, lr}
    9a16:	f7ff faa1 	bl	8f5c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9a1a:	f7f7 fa89 	bl	f30 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9a1e:	f7f9 fd07 	bl	3430 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9a22:	f7ff fc13 	bl	924c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9a26:	f7ff fb90 	bl	914a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    9a2a:	f7f7 fd31 	bl	1490 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    9a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a32:	f7f9 bc29 	b.w	3288 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    9a36:	b510      	push	{r4, lr}
    9a38:	f000 f8ee 	bl	9c18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    9a3c:	b128      	cbz	r0, 9a4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9a3e:	f7f7 fecf 	bl	17e0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    9a42:	2801      	cmp	r0, #1
    9a44:	d001      	beq.n	9a4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9a46:	2000      	movs	r0, #0
    9a48:	bd10      	pop	{r4, pc}
    9a4a:	2001      	movs	r0, #1
    9a4c:	bd10      	pop	{r4, pc}
    9a4e:	b510      	push	{r4, lr}
    9a50:	4604      	mov	r4, r0
    9a52:	7800      	ldrb	r0, [r0, #0]
    9a54:	2801      	cmp	r0, #1
    9a56:	d009      	beq.n	9a6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    9a58:	f7f8 fe96 	bl	2788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    9a5c:	2805      	cmp	r0, #5
    9a5e:	d003      	beq.n	9a68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>
    9a60:	f7f8 fe5a 	bl	2718 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    9a64:	2800      	cmp	r0, #0
    9a66:	d000      	beq.n	9a6a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    9a68:	200c      	movs	r0, #12
    9a6a:	bd10      	pop	{r4, pc}
    9a6c:	f7f7 fe86 	bl	177c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    9a70:	b108      	cbz	r0, 9a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    9a72:	203a      	movs	r0, #58	; 0x3a
    9a74:	bd10      	pop	{r4, pc}
    9a76:	f7f7 fe43 	bl	1700 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    9a7a:	b138      	cbz	r0, 9a8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    9a7c:	f7f7 fd5e 	bl	153c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    9a80:	88a1      	ldrh	r1, [r4, #4]
    9a82:	8860      	ldrh	r0, [r4, #2]
    9a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a88:	f7f8 be0c 	b.w	26a4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    9a8c:	2012      	movs	r0, #18
    9a8e:	bd10      	pop	{r4, pc}
    9a90:	7802      	ldrb	r2, [r0, #0]
    9a92:	2a01      	cmp	r2, #1
    9a94:	d001      	beq.n	9a9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x86>
    9a96:	b1ba      	cbz	r2, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9a98:	e018      	b.n	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9a9a:	7842      	ldrb	r2, [r0, #1]
    9a9c:	b13a      	cbz	r2, 9aae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9a9e:	2a01      	cmp	r2, #1
    9aa0:	d005      	beq.n	9aae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9aa2:	2a02      	cmp	r2, #2
    9aa4:	d112      	bne.n	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aa6:	b189      	cbz	r1, 9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aa8:	8881      	ldrh	r1, [r0, #4]
    9aaa:	b179      	cbz	r1, 9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aac:	e000      	b.n	9ab0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    9aae:	b159      	cbz	r1, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ab0:	8841      	ldrh	r1, [r0, #2]
    9ab2:	b149      	cbz	r1, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ab4:	8880      	ldrh	r0, [r0, #4]
    9ab6:	b138      	cbz	r0, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ab8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9abc:	0049      	lsls	r1, r1, #1
    9abe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9ac2:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    9ac6:	d201      	bcs.n	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9ac8:	2000      	movs	r0, #0
    9aca:	4770      	bx	lr
    9acc:	2012      	movs	r0, #18
    9ace:	4770      	bx	lr
    9ad0:	b570      	push	{r4, r5, r6, lr}
    9ad2:	4604      	mov	r4, r0
    9ad4:	7800      	ldrb	r0, [r0, #0]
    9ad6:	2500      	movs	r5, #0
    9ad8:	2801      	cmp	r0, #1
    9ada:	d004      	beq.n	9ae6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9adc:	b118      	cbz	r0, 9ae6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9ade:	2802      	cmp	r0, #2
    9ae0:	d001      	beq.n	9ae6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9ae2:	2803      	cmp	r0, #3
    9ae4:	d139      	bne.n	9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9ae6:	7860      	ldrb	r0, [r4, #1]
    9ae8:	b128      	cbz	r0, 9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9aea:	2801      	cmp	r0, #1
    9aec:	d003      	beq.n	9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9aee:	2802      	cmp	r0, #2
    9af0:	d001      	beq.n	9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9af2:	2803      	cmp	r0, #3
    9af4:	d131      	bne.n	9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9af6:	7e60      	ldrb	r0, [r4, #25]
    9af8:	b948      	cbnz	r0, 9b0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    9afa:	78a0      	ldrb	r0, [r4, #2]
    9afc:	2801      	cmp	r0, #1
    9afe:	d12c      	bne.n	9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b00:	f7f9 fc86 	bl	3410 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9b04:	4601      	mov	r1, r0
    9b06:	78a0      	ldrb	r0, [r4, #2]
    9b08:	ea30 0101 	bics.w	r1, r0, r1
    9b0c:	d001      	beq.n	9b12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    9b0e:	2011      	movs	r0, #17
    9b10:	bd70      	pop	{r4, r5, r6, pc}
    9b12:	07c0      	lsls	r0, r0, #31
    9b14:	d006      	beq.n	9b24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x110>
    9b16:	78e0      	ldrb	r0, [r4, #3]
    9b18:	2301      	movs	r3, #1
    9b1a:	6922      	ldr	r2, [r4, #16]
    9b1c:	68a1      	ldr	r1, [r4, #8]
    9b1e:	f000 f820 	bl	9b62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b22:	4605      	mov	r5, r0
    9b24:	78a0      	ldrb	r0, [r4, #2]
    9b26:	0780      	lsls	r0, r0, #30
    9b28:	d506      	bpl.n	9b38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    9b2a:	78e0      	ldrb	r0, [r4, #3]
    9b2c:	2302      	movs	r3, #2
    9b2e:	6922      	ldr	r2, [r4, #16]
    9b30:	68a1      	ldr	r1, [r4, #8]
    9b32:	f000 f816 	bl	9b62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b36:	4305      	orrs	r5, r0
    9b38:	78a0      	ldrb	r0, [r4, #2]
    9b3a:	0740      	lsls	r0, r0, #29
    9b3c:	d506      	bpl.n	9b4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x138>
    9b3e:	78e0      	ldrb	r0, [r4, #3]
    9b40:	2304      	movs	r3, #4
    9b42:	6922      	ldr	r2, [r4, #16]
    9b44:	68a1      	ldr	r1, [r4, #8]
    9b46:	f000 f80c 	bl	9b62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b4a:	4305      	orrs	r5, r0
    9b4c:	b10d      	cbz	r5, 9b52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    9b4e:	4628      	mov	r0, r5
    9b50:	bd70      	pop	{r4, r5, r6, pc}
    9b52:	7e20      	ldrb	r0, [r4, #24]
    9b54:	b108      	cbz	r0, 9b5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b56:	2807      	cmp	r0, #7
    9b58:	d901      	bls.n	9b5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    9b5a:	2012      	movs	r0, #18
    9b5c:	bd70      	pop	{r4, r5, r6, pc}
    9b5e:	2000      	movs	r0, #0
    9b60:	bd70      	pop	{r4, r5, r6, pc}
    9b62:	b570      	push	{r4, r5, r6, lr}
    9b64:	4614      	mov	r4, r2
    9b66:	460d      	mov	r5, r1
    9b68:	b108      	cbz	r0, 9b6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15a>
    9b6a:	2801      	cmp	r0, #1
    9b6c:	d10a      	bne.n	9b84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    9b6e:	4619      	mov	r1, r3
    9b70:	4610      	mov	r0, r2
    9b72:	f7f9 fbe3 	bl	333c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc8>
    9b76:	b138      	cbz	r0, 9b88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9b78:	4628      	mov	r0, r5
    9b7a:	f7f9 fba7 	bl	32cc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x58>
    9b7e:	b118      	cbz	r0, 9b88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9b80:	42ac      	cmp	r4, r5
    9b82:	d903      	bls.n	9b8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    9b84:	2012      	movs	r0, #18
    9b86:	bd70      	pop	{r4, r5, r6, pc}
    9b88:	2030      	movs	r0, #48	; 0x30
    9b8a:	bd70      	pop	{r4, r5, r6, pc}
    9b8c:	2000      	movs	r0, #0
    9b8e:	bd70      	pop	{r4, r5, r6, pc}
    9b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b94:	461d      	mov	r5, r3
    9b96:	4610      	mov	r0, r2
    9b98:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    9b9c:	1f8b      	subs	r3, r1, #6
    9b9e:	f640 427a 	movw	r2, #3194	; 0xc7a
    9ba2:	9e08      	ldr	r6, [sp, #32]
    9ba4:	4293      	cmp	r3, r2
    9ba6:	d81c      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9ba8:	1f83      	subs	r3, r0, #6
    9baa:	4293      	cmp	r3, r2
    9bac:	d819      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bae:	4281      	cmp	r1, r0
    9bb0:	d817      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bb2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    9bb6:	d214      	bcs.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bb8:	f1a4 010a 	sub.w	r1, r4, #10
    9bbc:	1f12      	subs	r2, r2, #4
    9bbe:	4291      	cmp	r1, r2
    9bc0:	d80f      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bc2:	f7ff fa66 	bl	9092 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9bc6:	1c6d      	adds	r5, r5, #1
    9bc8:	4368      	muls	r0, r5
    9bca:	f240 2171 	movw	r1, #625	; 0x271
    9bce:	0040      	lsls	r0, r0, #1
    9bd0:	434c      	muls	r4, r1
    9bd2:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    9bd6:	d204      	bcs.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bd8:	42b7      	cmp	r7, r6
    9bda:	d802      	bhi.n	9be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bdc:	2001      	movs	r0, #1
    9bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9be2:	2000      	movs	r0, #0
    9be4:	e7fb      	b.n	9bde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    9be6:	207f      	movs	r0, #127	; 0x7f
    9be8:	f000 b821 	b.w	9c2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9bec:	b508      	push	{r3, lr}
    9bee:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    9bf2:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    9bf6:	f88d 0000 	strb.w	r0, [sp]
    9bfa:	9800      	ldr	r0, [sp, #0]
    9bfc:	9000      	str	r0, [sp, #0]
    9bfe:	f89d 0000 	ldrb.w	r0, [sp]
    9c02:	b100      	cbz	r0, 9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    9c04:	2001      	movs	r0, #1
    9c06:	1e40      	subs	r0, r0, #1
    9c08:	4208      	tst	r0, r1
    9c0a:	d003      	beq.n	9c14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    9c0c:	2904      	cmp	r1, #4
    9c0e:	d001      	beq.n	9c14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    9c10:	2001      	movs	r0, #1
    9c12:	bd08      	pop	{r3, pc}
    9c14:	2000      	movs	r0, #0
    9c16:	bd08      	pop	{r3, pc}
    9c18:	b510      	push	{r4, lr}
    9c1a:	f7f8 fdb5 	bl	2788 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    9c1e:	2804      	cmp	r0, #4
    9c20:	d003      	beq.n	9c2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9c22:	2805      	cmp	r0, #5
    9c24:	d001      	beq.n	9c2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9c26:	2000      	movs	r0, #0
    9c28:	bd10      	pop	{r4, pc}
    9c2a:	2001      	movs	r0, #1
    9c2c:	bd10      	pop	{r4, pc}
    9c2e:	b508      	push	{r3, lr}
    9c30:	f640 1288 	movw	r2, #2440	; 0x988
    9c34:	2300      	movs	r3, #0
    9c36:	4669      	mov	r1, sp
    9c38:	f7fe fa1e 	bl	8078 <mpsl_fem_tx_power_split>
    9c3c:	bd08      	pop	{r3, pc}
    9c3e:	b510      	push	{r4, lr}
    9c40:	f7ff ffea 	bl	9c18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    9c44:	b120      	cbz	r0, 9c50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    9c46:	f7f7 fdd3 	bl	17f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    9c4a:	b108      	cbz	r0, 9c50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    9c4c:	2001      	movs	r0, #1
    9c4e:	bd10      	pop	{r4, pc}
    9c50:	2000      	movs	r0, #0
    9c52:	bd10      	pop	{r4, pc}
    9c54:	6802      	ldr	r2, [r0, #0]
    9c56:	b912      	cbnz	r2, 9c5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    9c58:	6001      	str	r1, [r0, #0]
    9c5a:	4770      	bx	lr
    9c5c:	4602      	mov	r2, r0
    9c5e:	6850      	ldr	r0, [r2, #4]
    9c60:	b108      	cbz	r0, 9c66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x252>
    9c62:	428a      	cmp	r2, r1
    9c64:	d1fa      	bne.n	9c5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x248>
    9c66:	428a      	cmp	r2, r1
    9c68:	d0f7      	beq.n	9c5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
    9c6a:	6051      	str	r1, [r2, #4]
    9c6c:	4770      	bx	lr
    9c6e:	b510      	push	{r4, lr}
    9c70:	4604      	mov	r4, r0
    9c72:	e002      	b.n	9c7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    9c74:	6820      	ldr	r0, [r4, #0]
    9c76:	4780      	blx	r0
    9c78:	6864      	ldr	r4, [r4, #4]
    9c7a:	2c00      	cmp	r4, #0
    9c7c:	d1fa      	bne.n	9c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
    9c7e:	bd10      	pop	{r4, pc}
    9c80:	b510      	push	{r4, lr}
    9c82:	f7f7 fce5 	bl	1650 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    9c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c8a:	f7f9 bbaf 	b.w	33ec <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x24>
    9c8e:	b510      	push	{r4, lr}
    9c90:	f7f8 fdc2 	bl	2818 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    9c94:	b110      	cbz	r0, 9c9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x288>
    9c96:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    9c9a:	e004      	b.n	9ca6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    9c9c:	f7ff fd25 	bl	96ea <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    9ca0:	b120      	cbz	r0, 9cac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x298>
    9ca2:	f240 114f 	movw	r1, #335	; 0x14f
    9ca6:	2001      	movs	r0, #1
    9ca8:	f7f6 fb74 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cac:	f7f9 fadc 	bl	3268 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    9cb0:	f7f7 fcf0 	bl	1694 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    9cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cb8:	f7f9 ba60 	b.w	317c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    9cbc:	000b0001 	.word	0x000b0001
    9cc0:	000a0002 	.word	0x000a0002
    9cc4:	00090005 	.word	0x00090005
    9cc8:	0008000a 	.word	0x0008000a
    9ccc:	00070014 	.word	0x00070014
    9cd0:	0006001e 	.word	0x0006001e
    9cd4:	00050032 	.word	0x00050032
    9cd8:	0004004b 	.word	0x0004004b
    9cdc:	00030064 	.word	0x00030064
    9ce0:	00020096 	.word	0x00020096
    9ce4:	000100fa 	.word	0x000100fa
    9ce8:	000001f4 	.word	0x000001f4

00009cec <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    9cec:	b510      	push	{r4, lr}
    9cee:	f7f9 fdf5 	bl	38dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    9cf2:	f000 f818 	bl	9d26 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    9cf6:	f7f9 fc07 	bl	3508 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    9cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cfe:	f7f9 bc6d 	b.w	35dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00009d02 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    9d02:	b510      	push	{r4, lr}
    9d04:	24c8      	movs	r4, #200	; 0xc8
    9d06:	1e64      	subs	r4, r4, #1
    9d08:	b2e4      	uxtb	r4, r4
    9d0a:	f7f9 fc1b 	bl	3544 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    9d0e:	2802      	cmp	r0, #2
    9d10:	d003      	beq.n	9d1a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    9d12:	2801      	cmp	r0, #1
    9d14:	d000      	beq.n	9d18 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    9d16:	2000      	movs	r0, #0
    9d18:	bd10      	pop	{r4, pc}
    9d1a:	2c00      	cmp	r4, #0
    9d1c:	d1f3      	bne.n	9d06 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    9d1e:	21ed      	movs	r1, #237	; 0xed
    9d20:	203b      	movs	r0, #59	; 0x3b
    9d22:	f7f6 fb37 	bl	394 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009d26 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    9d26:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9d2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9d2e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    9d32:	f3bf 8f4f 	dsb	sy
    9d36:	f3bf 8f6f 	isb	sy
    9d3a:	f7f9 bc83 	b.w	3644 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    9d3e:	2800      	cmp	r0, #0
    9d40:	db09      	blt.n	9d56 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    9d42:	f000 021f 	and.w	r2, r0, #31
    9d46:	2101      	movs	r1, #1
    9d48:	4091      	lsls	r1, r2
    9d4a:	0940      	lsrs	r0, r0, #5
    9d4c:	0080      	lsls	r0, r0, #2
    9d4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d52:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9d56:	4770      	bx	lr
    9d58:	2800      	cmp	r0, #0
    9d5a:	db0d      	blt.n	9d78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    9d5c:	f000 021f 	and.w	r2, r0, #31
    9d60:	2101      	movs	r1, #1
    9d62:	4091      	lsls	r1, r2
    9d64:	0940      	lsrs	r0, r0, #5
    9d66:	0080      	lsls	r0, r0, #2
    9d68:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d6c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9d70:	f3bf 8f4f 	dsb	sy
    9d74:	f3bf 8f6f 	isb	sy
    9d78:	4770      	bx	lr
    9d7a:	5840      	ldr	r0, [r0, r1]
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d000      	beq.n	9d82 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    9d80:	2001      	movs	r0, #1
    9d82:	4770      	bx	lr
    9d84:	5840      	ldr	r0, [r0, r1]
    9d86:	2800      	cmp	r0, #0
    9d88:	d000      	beq.n	9d8c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    9d8a:	2001      	movs	r0, #1
    9d8c:	4770      	bx	lr

00009d8e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    9d8e:	b510      	push	{r4, lr}
    9d90:	4604      	mov	r4, r0
    9d92:	4608      	mov	r0, r1
    9d94:	f7f9 febc 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9d9c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9da0:	fbb0 f0f1 	udiv	r0, r0, r1
    9da4:	1a20      	subs	r0, r4, r0
    9da6:	1e80      	subs	r0, r0, #2
    9da8:	bd10      	pop	{r4, pc}

00009daa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    9daa:	b510      	push	{r4, lr}
    9dac:	4604      	mov	r4, r0
    9dae:	4608      	mov	r0, r1
    9db0:	f7f9 feae 	bl	3b10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9db8:	fbb0 f0f1 	udiv	r0, r0, r1
    9dbc:	1a20      	subs	r0, r4, r0
    9dbe:	bd10      	pop	{r4, pc}
    9dc0:	2804      	cmp	r0, #4
    9dc2:	d202      	bcs.n	9dca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    9dc4:	f04f 0028 	mov.w	r0, #40	; 0x28
    9dc8:	4770      	bx	lr
    9dca:	d102      	bne.n	9dd2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    9dcc:	f04f 0010 	mov.w	r0, #16
    9dd0:	4770      	bx	lr
    9dd2:	f04f 0000 	mov.w	r0, #0
    9dd6:	4770      	bx	lr
    9dd8:	2100      	movs	r1, #0
    9dda:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    9dde:	f800 1f24 	strb.w	r1, [r0, #36]!
    9de2:	7041      	strb	r1, [r0, #1]
    9de4:	4770      	bx	lr

00009de6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    9de6:	b570      	push	{r4, r5, r6, lr}
    9de8:	f7fa fbea 	bl	45c0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9dec:	4605      	mov	r5, r0
    9dee:	2400      	movs	r4, #0
    9df0:	e006      	b.n	9e00 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    9df2:	4620      	mov	r0, r4
    9df4:	f7fa fbea 	bl	45cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9df8:	f7ff ffee 	bl	9dd8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9dfc:	1c64      	adds	r4, r4, #1
    9dfe:	b2e4      	uxtb	r4, r4
    9e00:	42ac      	cmp	r4, r5
    9e02:	d3f6      	bcc.n	9df2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    9e04:	bd70      	pop	{r4, r5, r6, pc}

00009e06 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    9e06:	f7fd b813 	b.w	6e30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00009e0a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    9e0a:	b510      	push	{r4, lr}
    9e0c:	2000      	movs	r0, #0
    9e0e:	f7fd fb6b 	bl	74e8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    9e12:	6800      	ldr	r0, [r0, #0]
    9e14:	2800      	cmp	r0, #0
    9e16:	bf18      	it	ne
    9e18:	2001      	movne	r0, #1
    9e1a:	bd10      	pop	{r4, pc}

00009e1c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    9e1c:	f7fd bb3e 	b.w	749c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00009e20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    9e20:	0a41      	lsrs	r1, r0, #9
    9e22:	f643 5209 	movw	r2, #15625	; 0x3d09
    9e26:	4351      	muls	r1, r2
    9e28:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9e2c:	fb10 f002 	smulbb	r0, r0, r2
    9e30:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9e34:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    9e38:	4770      	bx	lr
    9e3a:	2800      	cmp	r0, #0
    9e3c:	db09      	blt.n	9e52 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    9e3e:	f000 021f 	and.w	r2, r0, #31
    9e42:	2101      	movs	r1, #1
    9e44:	4091      	lsls	r1, r2
    9e46:	0940      	lsrs	r0, r0, #5
    9e48:	0080      	lsls	r0, r0, #2
    9e4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e4e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9e52:	4770      	bx	lr
    9e54:	2800      	cmp	r0, #0
    9e56:	db0d      	blt.n	9e74 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    9e58:	f000 021f 	and.w	r2, r0, #31
    9e5c:	2101      	movs	r1, #1
    9e5e:	4091      	lsls	r1, r2
    9e60:	0940      	lsrs	r0, r0, #5
    9e62:	0080      	lsls	r0, r0, #2
    9e64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e68:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9e6c:	f3bf 8f4f 	dsb	sy
    9e70:	f3bf 8f6f 	isb	sy
    9e74:	4770      	bx	lr
    9e76:	5840      	ldr	r0, [r0, r1]
    9e78:	2800      	cmp	r0, #0
    9e7a:	d000      	beq.n	9e7e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    9e7c:	2001      	movs	r0, #1
    9e7e:	4770      	bx	lr
    9e80:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    9e84:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    9e88:	f002 0201 	and.w	r2, r2, #1
    9e8c:	03c0      	lsls	r0, r0, #15
    9e8e:	d503      	bpl.n	9e98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9e90:	428a      	cmp	r2, r1
    9e92:	d101      	bne.n	9e98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9e94:	2001      	movs	r0, #1
    9e96:	4770      	bx	lr
    9e98:	2000      	movs	r0, #0
    9e9a:	4770      	bx	lr

00009e9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    9e9c:	b510      	push	{r4, lr}
    9e9e:	2101      	movs	r1, #1
    9ea0:	0788      	lsls	r0, r1, #30
    9ea2:	f7fd fed5 	bl	7c50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9ea6:	2800      	cmp	r0, #0
    9ea8:	d000      	beq.n	9eac <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    9eaa:	2001      	movs	r0, #1
    9eac:	bd10      	pop	{r4, pc}

00009eae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    9eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9eb2:	2101      	movs	r1, #1
    9eb4:	6001      	str	r1, [r0, #0]
    9eb6:	4770      	bx	lr

00009eb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    9eb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9ebc:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    9ec0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    9ec4:	f002 0203 	and.w	r2, r2, #3
    9ec8:	03c9      	lsls	r1, r1, #15
    9eca:	d503      	bpl.n	9ed4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9ecc:	4282      	cmp	r2, r0
    9ece:	d101      	bne.n	9ed4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9ed0:	2001      	movs	r0, #1
    9ed2:	4770      	bx	lr
    9ed4:	2000      	movs	r0, #0
    9ed6:	4770      	bx	lr

00009ed8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    9ed8:	b510      	push	{r4, lr}
    9eda:	2100      	movs	r1, #0
    9edc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9ee0:	f7fd feb6 	bl	7c50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9ee4:	2800      	cmp	r0, #0
    9ee6:	d000      	beq.n	9eea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    9ee8:	2001      	movs	r0, #1
    9eea:	bd10      	pop	{r4, pc}
    9eec:	2800      	cmp	r0, #0
    9eee:	db09      	blt.n	9f04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    9ef0:	f000 021f 	and.w	r2, r0, #31
    9ef4:	2101      	movs	r1, #1
    9ef6:	4091      	lsls	r1, r2
    9ef8:	0940      	lsrs	r0, r0, #5
    9efa:	0080      	lsls	r0, r0, #2
    9efc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f00:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9f04:	4770      	bx	lr
    9f06:	2800      	cmp	r0, #0
    9f08:	db0d      	blt.n	9f26 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    9f0a:	f000 021f 	and.w	r2, r0, #31
    9f0e:	2101      	movs	r1, #1
    9f10:	4091      	lsls	r1, r2
    9f12:	0940      	lsrs	r0, r0, #5
    9f14:	0080      	lsls	r0, r0, #2
    9f16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f1a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9f1e:	f3bf 8f4f 	dsb	sy
    9f22:	f3bf 8f6f 	isb	sy
    9f26:	4770      	bx	lr
    9f28:	00021000 	.word	0x00021000
    9f2c:	000000fa 	.word	0x000000fa
    9f30:	5faee8ff 	.word	0x5faee8ff
    9f34:	c87c9577 	.word	0xc87c9577
    9f38:	18146227 	.word	0x18146227
    9f3c:	c65deae6 	.word	0xc65deae6
    9f40:	3a723992 	.word	0x3a723992
    9f44:	2800      	cmp	r0, #0
    9f46:	db09      	blt.n	9f5c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    9f48:	f000 021f 	and.w	r2, r0, #31
    9f4c:	2101      	movs	r1, #1
    9f4e:	4091      	lsls	r1, r2
    9f50:	0940      	lsrs	r0, r0, #5
    9f52:	0080      	lsls	r0, r0, #2
    9f54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f58:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9f5c:	4770      	bx	lr

00009f5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    9f5e:	f3ef 8110 	mrs	r1, PRIMASK
    9f62:	b672      	cpsid	i
    9f64:	7802      	ldrb	r2, [r0, #0]
    9f66:	2a01      	cmp	r2, #1
    9f68:	d001      	beq.n	9f6e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    9f6a:	2201      	movs	r2, #1
    9f6c:	e000      	b.n	9f70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    9f6e:	2200      	movs	r2, #0
    9f70:	2301      	movs	r3, #1
    9f72:	7003      	strb	r3, [r0, #0]
    9f74:	b901      	cbnz	r1, 9f78 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    9f76:	b662      	cpsie	i
    9f78:	b10a      	cbz	r2, 9f7e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    9f7a:	2000      	movs	r0, #0
    9f7c:	4770      	bx	lr
    9f7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9f82:	4770      	bx	lr

00009f84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    9f84:	2100      	movs	r1, #0
    9f86:	7001      	strb	r1, [r0, #0]
    9f88:	4608      	mov	r0, r1
    9f8a:	4770      	bx	lr

00009f8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    9f8c:	f3ef 8110 	mrs	r1, PRIMASK
    9f90:	b672      	cpsid	i
    9f92:	2200      	movs	r2, #0
    9f94:	7002      	strb	r2, [r0, #0]
    9f96:	b901      	cbnz	r1, 9f9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    9f98:	b662      	cpsie	i
    9f9a:	2000      	movs	r0, #0
    9f9c:	4770      	bx	lr

00009f9e <mpsl_low_priority_process>:
    9f9e:	f7fd bfab 	b.w	7ef8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00009fa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    9fa2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fa6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9faa:	280f      	cmp	r0, #15
    9fac:	d001      	beq.n	9fb2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    9fae:	2000      	movs	r0, #0
    9fb0:	4770      	bx	lr
    9fb2:	2001      	movs	r0, #1
    9fb4:	4770      	bx	lr

00009fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    9fb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fba:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9fbe:	280a      	cmp	r0, #10
    9fc0:	d001      	beq.n	9fc6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    9fc2:	2000      	movs	r0, #0
    9fc4:	4770      	bx	lr
    9fc6:	2001      	movs	r0, #1
    9fc8:	4770      	bx	lr

00009fca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    9fca:	b500      	push	{lr}
    9fcc:	f7ff fff3 	bl	9fb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9fd0:	b120      	cbz	r0, 9fdc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    9fd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fd6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9fda:	b108      	cbz	r0, 9fe0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    9fdc:	2000      	movs	r0, #0
    9fde:	bd00      	pop	{pc}
    9fe0:	2001      	movs	r0, #1
    9fe2:	bd00      	pop	{pc}

00009fe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    9fe4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fe8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9fec:	280e      	cmp	r0, #14
    9fee:	d001      	beq.n	9ff4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    9ff0:	2000      	movs	r0, #0
    9ff2:	4770      	bx	lr
    9ff4:	2001      	movs	r0, #1
    9ff6:	4770      	bx	lr

00009ff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    9ff8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ffc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a000:	2810      	cmp	r0, #16
    a002:	d001      	beq.n	a008 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    a004:	2000      	movs	r0, #0
    a006:	4770      	bx	lr
    a008:	2001      	movs	r0, #1
    a00a:	4770      	bx	lr

0000a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    a00c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a010:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a014:	2806      	cmp	r0, #6
    a016:	d003      	beq.n	a020 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a018:	1c40      	adds	r0, r0, #1
    a01a:	d001      	beq.n	a020 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a01c:	2000      	movs	r0, #0
    a01e:	4770      	bx	lr
    a020:	2001      	movs	r0, #1
    a022:	4770      	bx	lr

0000a024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    a024:	b500      	push	{lr}
    a026:	f7ff fff1 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a02a:	b148      	cbz	r0, a040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a02c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a030:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a034:	2806      	cmp	r0, #6
    a036:	d303      	bcc.n	a040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a038:	1c40      	adds	r0, r0, #1
    a03a:	d001      	beq.n	a040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a03c:	2001      	movs	r0, #1
    a03e:	bd00      	pop	{pc}
    a040:	2000      	movs	r0, #0
    a042:	bd00      	pop	{pc}

0000a044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    a044:	b500      	push	{lr}
    a046:	f7ff ffe1 	bl	a00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a04a:	b138      	cbz	r0, a05c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    a04c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a050:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a054:	2806      	cmp	r0, #6
    a056:	d303      	bcc.n	a060 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a058:	1c40      	adds	r0, r0, #1
    a05a:	d001      	beq.n	a060 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a05c:	2000      	movs	r0, #0
    a05e:	bd00      	pop	{pc}
    a060:	2001      	movs	r0, #1
    a062:	bd00      	pop	{pc}

0000a064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    a064:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a068:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a06c:	280d      	cmp	r0, #13
    a06e:	d001      	beq.n	a074 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    a070:	2000      	movs	r0, #0
    a072:	4770      	bx	lr
    a074:	2001      	movs	r0, #1
    a076:	4770      	bx	lr

0000a078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    a078:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a07c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a080:	2808      	cmp	r0, #8
    a082:	d001      	beq.n	a088 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    a084:	2000      	movs	r0, #0
    a086:	4770      	bx	lr
    a088:	2001      	movs	r0, #1
    a08a:	4770      	bx	lr

0000a08c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    a08c:	f7fd bf6e 	b.w	7f6c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a090 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    a090:	f7fd bf6c 	b.w	7f6c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a094 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a098:	428a      	cmp	r2, r1
    a09a:	d803      	bhi.n	a0a4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    a09c:	2179      	movs	r1, #121	; 0x79
    a09e:	2096      	movs	r0, #150	; 0x96
    a0a0:	f7fd fe2c 	bl	7cfc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0a4:	fab2 f382 	clz	r3, r2
    a0a8:	b143      	cbz	r3, a0bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    a0aa:	4099      	lsls	r1, r3
    a0ac:	f1c3 0c20 	rsb	ip, r3, #32
    a0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
    a0b4:	4098      	lsls	r0, r3
    a0b6:	ea41 010c 	orr.w	r1, r1, ip
    a0ba:	409a      	lsls	r2, r3
    a0bc:	0c13      	lsrs	r3, r2, #16
    a0be:	fbb1 f5f3 	udiv	r5, r1, r3
    a0c2:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    a0c6:	b287      	uxth	r7, r0
    a0c8:	fbb1 f0f3 	udiv	r0, r1, r3
    a0cc:	fb03 1615 	mls	r6, r3, r5, r1
    a0d0:	b294      	uxth	r4, r2
    a0d2:	fb00 f504 	mul.w	r5, r0, r4
    a0d6:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    a0da:	42b5      	cmp	r5, r6
    a0dc:	d905      	bls.n	a0ea <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    a0de:	1bad      	subs	r5, r5, r6
    a0e0:	4295      	cmp	r5, r2
    a0e2:	bf94      	ite	ls
    a0e4:	2501      	movls	r5, #1
    a0e6:	2502      	movhi	r5, #2
    a0e8:	1b40      	subs	r0, r0, r5
    a0ea:	0409      	lsls	r1, r1, #16
    a0ec:	0405      	lsls	r5, r0, #16
    a0ee:	eb11 010c 	adds.w	r1, r1, ip
    a0f2:	fba0 0c02 	umull	r0, ip, r0, r2
    a0f6:	1a09      	subs	r1, r1, r0
    a0f8:	fbb1 f0f3 	udiv	r0, r1, r3
    a0fc:	fbb1 fcf3 	udiv	ip, r1, r3
    a100:	fb03 131c 	mls	r3, r3, ip, r1
    a104:	fb00 f104 	mul.w	r1, r0, r4
    a108:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    a10c:	4299      	cmp	r1, r3
    a10e:	d905      	bls.n	a11c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    a110:	1ac9      	subs	r1, r1, r3
    a112:	4291      	cmp	r1, r2
    a114:	bf94      	ite	ls
    a116:	2101      	movls	r1, #1
    a118:	2102      	movhi	r1, #2
    a11a:	1a40      	subs	r0, r0, r1
    a11c:	4328      	orrs	r0, r5
    a11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a122 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a126:	461e      	mov	r6, r3
    a128:	4615      	mov	r5, r2
    a12a:	4604      	mov	r4, r0
    a12c:	9f06      	ldr	r7, [sp, #24]
    a12e:	f7ff ffb1 	bl	a094 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    a132:	6030      	str	r0, [r6, #0]
    a134:	fba0 0105 	umull	r0, r1, r0, r5
    a138:	1a20      	subs	r0, r4, r0
    a13a:	6038      	str	r0, [r7, #0]
    a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a140 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    a140:	b4f0      	push	{r4, r5, r6, r7}
    a142:	ea80 0c01 	eor.w	ip, r0, r1
    a146:	4603      	mov	r3, r0
    a148:	f01c 0f03 	tst.w	ip, #3
    a14c:	d13c      	bne.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a14e:	f013 0f03 	tst.w	r3, #3
    a152:	d00b      	beq.n	a16c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a154:	2a00      	cmp	r2, #0
    a156:	bf04      	itt	eq
    a158:	bcf0      	popeq	{r4, r5, r6, r7}
    a15a:	4770      	bxeq	lr
    a15c:	f811 cb01 	ldrb.w	ip, [r1], #1
    a160:	f803 cb01 	strb.w	ip, [r3], #1
    a164:	1e52      	subs	r2, r2, #1
    a166:	f013 0f03 	tst.w	r3, #3
    a16a:	d1f3      	bne.n	a154 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a16c:	2a03      	cmp	r2, #3
    a16e:	d94f      	bls.n	a210 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a174:	d24c      	bcs.n	a210 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a176:	f1c2 0c00 	rsb	ip, r2, #0
    a17a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a17e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a182:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a186:	f1cc 0c00 	rsb	ip, ip, #0
    a18a:	f1bc 0f00 	cmp.w	ip, #0
    a18e:	dd1b      	ble.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a190:	1f0d      	subs	r5, r1, #4
    a192:	1f1c      	subs	r4, r3, #4
    a194:	f01c 0f01 	tst.w	ip, #1
    a198:	d003      	beq.n	a1a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a19a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a19e:	f844 6f04 	str.w	r6, [r4, #4]!
    a1a2:	ea5f 066c 	movs.w	r6, ip, asr #1
    a1a6:	d007      	beq.n	a1b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a1a8:	686f      	ldr	r7, [r5, #4]
    a1aa:	6067      	str	r7, [r4, #4]
    a1ac:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a1b0:	f844 7f08 	str.w	r7, [r4, #8]!
    a1b4:	1e76      	subs	r6, r6, #1
    a1b6:	d1f7      	bne.n	a1a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a1b8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a1bc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a1c0:	f1cc 0c00 	rsb	ip, ip, #0
    a1c4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a1c8:	2a00      	cmp	r2, #0
    a1ca:	bf04      	itt	eq
    a1cc:	bcf0      	popeq	{r4, r5, r6, r7}
    a1ce:	4770      	bxeq	lr
    a1d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a1d4:	d226      	bcs.n	a224 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a1d6:	2a00      	cmp	r2, #0
    a1d8:	bfdc      	itt	le
    a1da:	bcf0      	pople	{r4, r5, r6, r7}
    a1dc:	4770      	bxle	lr
    a1de:	1e49      	subs	r1, r1, #1
    a1e0:	1e5b      	subs	r3, r3, #1
    a1e2:	f012 0f01 	tst.w	r2, #1
    a1e6:	d003      	beq.n	a1f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a1e8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a1ec:	f803 cf01 	strb.w	ip, [r3, #1]!
    a1f0:	1052      	asrs	r2, r2, #1
    a1f2:	bf04      	itt	eq
    a1f4:	bcf0      	popeq	{r4, r5, r6, r7}
    a1f6:	4770      	bxeq	lr
    a1f8:	f891 c001 	ldrb.w	ip, [r1, #1]
    a1fc:	f883 c001 	strb.w	ip, [r3, #1]
    a200:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a204:	f803 cf02 	strb.w	ip, [r3, #2]!
    a208:	1e52      	subs	r2, r2, #1
    a20a:	d1f5      	bne.n	a1f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a20c:	bcf0      	pop	{r4, r5, r6, r7}
    a20e:	4770      	bx	lr
    a210:	2a04      	cmp	r2, #4
    a212:	d3d9      	bcc.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a214:	f851 cb04 	ldr.w	ip, [r1], #4
    a218:	1f12      	subs	r2, r2, #4
    a21a:	f843 cb04 	str.w	ip, [r3], #4
    a21e:	2a04      	cmp	r2, #4
    a220:	d2f8      	bcs.n	a214 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    a222:	e7d1      	b.n	a1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a224:	f811 cb01 	ldrb.w	ip, [r1], #1
    a228:	f803 cb01 	strb.w	ip, [r3], #1
    a22c:	1e52      	subs	r2, r2, #1
    a22e:	d1f9      	bne.n	a224 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a230:	bcf0      	pop	{r4, r5, r6, r7}
    a232:	4770      	bx	lr

0000a234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    a234:	b470      	push	{r4, r5, r6}
    a236:	4603      	mov	r3, r0
    a238:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    a23c:	f010 0f03 	tst.w	r0, #3
    a240:	d009      	beq.n	a256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    a242:	2a00      	cmp	r2, #0
    a244:	bf04      	itt	eq
    a246:	bc70      	popeq	{r4, r5, r6}
    a248:	4770      	bxeq	lr
    a24a:	f803 cb01 	strb.w	ip, [r3], #1
    a24e:	1e52      	subs	r2, r2, #1
    a250:	f013 0f03 	tst.w	r3, #3
    a254:	d1f5      	bne.n	a242 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    a256:	b2c9      	uxtb	r1, r1
    a258:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a25c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    a260:	2a03      	cmp	r2, #3
    a262:	d939      	bls.n	a2d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a264:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a268:	d236      	bcs.n	a2d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a26a:	4251      	negs	r1, r2
    a26c:	17cc      	asrs	r4, r1, #31
    a26e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    a272:	1089      	asrs	r1, r1, #2
    a274:	424e      	negs	r6, r1
    a276:	2e00      	cmp	r6, #0
    a278:	dd11      	ble.n	a29e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a27a:	1f19      	subs	r1, r3, #4
    a27c:	f016 0f01 	tst.w	r6, #1
    a280:	bf18      	it	ne
    a282:	f841 5f04 	strne.w	r5, [r1, #4]!
    a286:	1074      	asrs	r4, r6, #1
    a288:	d004      	beq.n	a294 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    a28a:	604d      	str	r5, [r1, #4]
    a28c:	f841 5f08 	str.w	r5, [r1, #8]!
    a290:	1e64      	subs	r4, r4, #1
    a292:	d1fa      	bne.n	a28a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    a294:	4271      	negs	r1, r6
    a296:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    a29a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a29e:	2a00      	cmp	r2, #0
    a2a0:	bf04      	itt	eq
    a2a2:	bc70      	popeq	{r4, r5, r6}
    a2a4:	4770      	bxeq	lr
    a2a6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a2aa:	d21d      	bcs.n	a2e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a2ac:	2a00      	cmp	r2, #0
    a2ae:	bfdc      	itt	le
    a2b0:	bc70      	pople	{r4, r5, r6}
    a2b2:	4770      	bxle	lr
    a2b4:	1e59      	subs	r1, r3, #1
    a2b6:	f012 0f01 	tst.w	r2, #1
    a2ba:	bf18      	it	ne
    a2bc:	f801 cf01 	strbne.w	ip, [r1, #1]!
    a2c0:	1052      	asrs	r2, r2, #1
    a2c2:	bf04      	itt	eq
    a2c4:	bc70      	popeq	{r4, r5, r6}
    a2c6:	4770      	bxeq	lr
    a2c8:	f881 c001 	strb.w	ip, [r1, #1]
    a2cc:	f801 cf02 	strb.w	ip, [r1, #2]!
    a2d0:	1e52      	subs	r2, r2, #1
    a2d2:	d1f9      	bne.n	a2c8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    a2d4:	bc70      	pop	{r4, r5, r6}
    a2d6:	4770      	bx	lr
    a2d8:	2a04      	cmp	r2, #4
    a2da:	d3e0      	bcc.n	a29e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a2dc:	1f12      	subs	r2, r2, #4
    a2de:	f843 5b04 	str.w	r5, [r3], #4
    a2e2:	2a04      	cmp	r2, #4
    a2e4:	d2fa      	bcs.n	a2dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    a2e6:	e7da      	b.n	a29e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a2e8:	f803 cb01 	strb.w	ip, [r3], #1
    a2ec:	1e52      	subs	r2, r2, #1
    a2ee:	d1fb      	bne.n	a2e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a2f0:	bc70      	pop	{r4, r5, r6}
    a2f2:	4770      	bx	lr
    a2f4:	f04f 30ff 	mov.w	r0, #4294967295
    a2f8:	4770      	bx	lr
    a2fa:	2000      	movs	r0, #0
    a2fc:	4770      	bx	lr
    a2fe:	2000      	movs	r0, #0
    a300:	4770      	bx	lr
    a302:	f04f 30ff 	mov.w	r0, #4294967295
    a306:	4770      	bx	lr
    a308:	4770      	bx	lr
    a30a:	4770      	bx	lr
    a30c:	2000      	movs	r0, #0
    a30e:	4770      	bx	lr
    a310:	2100      	movs	r1, #0
    a312:	7001      	strb	r1, [r0, #0]
    a314:	4770      	bx	lr
    a316:	f04f 30ff 	mov.w	r0, #4294967295
    a31a:	4770      	bx	lr
    a31c:	f04f 30ff 	mov.w	r0, #4294967295
    a320:	4770      	bx	lr
    a322:	2100      	movs	r1, #0
    a324:	7001      	strb	r1, [r0, #0]
    a326:	4770      	bx	lr
    a328:	f04f 30ff 	mov.w	r0, #4294967295
    a32c:	4770      	bx	lr
    a32e:	f04f 30ff 	mov.w	r0, #4294967295
    a332:	4770      	bx	lr
    a334:	7800      	ldrb	r0, [r0, #0]
    a336:	2800      	cmp	r0, #0
    a338:	d001      	beq.n	a33e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    a33a:	f06f 0015 	mvn.w	r0, #21
    a33e:	4770      	bx	lr
    a340:	2000      	movs	r0, #0
    a342:	4770      	bx	lr
    a344:	2200      	movs	r2, #0
    a346:	f000 b802 	b.w	a34e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000a34a <mpsl_fem_init>:
    a34a:	f7fa b8a7 	b.w	449c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000a34e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    a34e:	b570      	push	{r4, r5, r6, lr}
    a350:	4614      	mov	r4, r2
    a352:	460d      	mov	r5, r1
    a354:	1b00      	subs	r0, r0, r4
    a356:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a35a:	4288      	cmp	r0, r1
    a35c:	da01      	bge.n	a362 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    a35e:	4608      	mov	r0, r1
    a360:	e002      	b.n	a368 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a362:	287f      	cmp	r0, #127	; 0x7f
    a364:	dd00      	ble.n	a368 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a366:	207f      	movs	r0, #127	; 0x7f
    a368:	4619      	mov	r1, r3
    a36a:	b240      	sxtb	r0, r0
    a36c:	f7fa f8ca 	bl	4504 <mpsl_tx_power_radio_supported_power_adjust>
    a370:	7028      	strb	r0, [r5, #0]
    a372:	706c      	strb	r4, [r5, #1]
    a374:	2100      	movs	r1, #0
    a376:	4420      	add	r0, r4
    a378:	70a9      	strb	r1, [r5, #2]
    a37a:	b240      	sxtb	r0, r0
    a37c:	bd70      	pop	{r4, r5, r6, pc}
    a37e:	2625      	.short	0x2625
    a380:	27          	.byte	0x27
    a381:	01          	.byte	0x01
    a382:	0103      	.short	0x0103
    a384:	01          	.byte	0x01
    a385:	01          	.byte	0x01
    a386:	ecd8      	.short	0xecd8
    a388:	fcf8f4f0 	.word	0xfcf8f4f0
    a38c:	04030200 	.word	0x04030200
    a390:	08070605 	.word	0x08070605
	...
    a3a8:	01010101 	.word	0x01010101
    a3ac:	02020202 	.word	0x02020202
    a3b0:	03030303 	.word	0x03030303
    a3b4:	04040404 	.word	0x04040404
    a3b8:	05050505 	.word	0x05050505
    a3bc:	08070606 	.word	0x08070606
    a3c0:	0c0b0a09 	.word	0x0c0b0a09
    a3c4:	0000000d 	.word	0x0000000d
	...
    a3d8:	01010100 	.word	0x01010100
    a3dc:	02020201 	.word	0x02020201
    a3e0:	03030302 	.word	0x03030302
    a3e4:	04040403 	.word	0x04040403
    a3e8:	05050504 	.word	0x05050504
    a3ec:	06060605 	.word	0x06060605
    a3f0:	00000908 	.word	0x00000908

0000a3f4 <main>:
extern int16_t three_volt_supply_voltage_mv;
extern int16_t five_volt_supply_voltage_mv;
extern int16_t vamp_supply_voltage_mv;

int main(void)
{
    a3f4:	b570      	push	{r4, r5, r6, lr}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
    a3f6:	4c1b      	ldr	r4, [pc, #108]	; (a464 <main+0x70>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    a3f8:	4a1b      	ldr	r2, [pc, #108]	; (a468 <main+0x74>)
	struct gpio_driver_data *data =
    a3fa:	6926      	ldr	r6, [r4, #16]
	const struct gpio_driver_api *api =
    a3fc:	68a5      	ldr	r5, [r4, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    a3fe:	6833      	ldr	r3, [r6, #0]
    a400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a404:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    a406:	682b      	ldr	r3, [r5, #0]
    a408:	2111      	movs	r1, #17
    a40a:	4620      	mov	r0, r4
    a40c:	4798      	blx	r3
	int err;

	gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);		// 

	printk("Start");
    a40e:	4817      	ldr	r0, [pc, #92]	; (a46c <main+0x78>)
    a410:	f006 fe29 	bl	11066 <printk>
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    a414:	6833      	ldr	r3, [r6, #0]
    a416:	039b      	lsls	r3, r3, #14
	return api->port_clear_bits_raw(port, pins);
    a418:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	return api->port_set_bits_raw(port, pins);
    a41c:	bf54      	ite	pl
    a41e:	68eb      	ldrpl	r3, [r5, #12]
	return api->port_clear_bits_raw(port, pins);
    a420:	692b      	ldrmi	r3, [r5, #16]
    a422:	4620      	mov	r0, r4
    a424:	4798      	blx	r3

	gpio_pin_set_dt(&led, 1);

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    a426:	2000      	movs	r0, #0
    a428:	f002 f84e 	bl	c4c8 <bt_enable>
	if (err) {
    a42c:	4601      	mov	r1, r0
    a42e:	b998      	cbnz	r0, a458 <main+0x64>
	return api->port_toggle_bits(port, pins);
    a430:	68a4      	ldr	r4, [r4, #8]
    a432:	480c      	ldr	r0, [pc, #48]	; (a464 <main+0x70>)
    a434:	6963      	ldr	r3, [r4, #20]
    a436:	4d0b      	ldr	r5, [pc, #44]	; (a464 <main+0x70>)
    a438:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    a43c:	4798      	blx	r3

	
	gpio_pin_toggle_dt(&led);

    // Start observer *** CURRENTLY DISABLE OBSERVER ***
	(void)observer_start();
    a43e:	f000 f8f3 	bl	a628 <observer_start>
    a442:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    a446:	6963      	ldr	r3, [r4, #20]
    a448:	4628      	mov	r0, r5
    a44a:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    a44c:	2100      	movs	r1, #0
    a44e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    a452:	f006 faa1 	bl	10998 <z_impl_k_sleep>
    a456:	e7f4      	b.n	a442 <main+0x4e>
		printk("Bluetooth init failed (err %d)\n", err);
    a458:	4805      	ldr	r0, [pc, #20]	; (a470 <main+0x7c>)
    a45a:	f006 fe04 	bl	11066 <printk>
	}


	printk("Exiting %s thread.\n", __func__);
	return 0;
}
    a45e:	2000      	movs	r0, #0
    a460:	bd70      	pop	{r4, r5, r6, pc}
    a462:	bf00      	nop
    a464:	000129ec 	.word	0x000129ec
    a468:	000a0001 	.word	0x000a0001
    a46c:	00012eb4 	.word	0x00012eb4
    a470:	00012eba 	.word	0x00012eba

0000a474 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a474:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    a476:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a478:	b08a      	sub	sp, #40	; 0x28
    a47a:	4604      	mov	r4, r0
    a47c:	460e      	mov	r6, r1
    a47e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    a480:	2b03      	cmp	r3, #3
    a482:	d820      	bhi.n	a4c6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a484:	e8df f003 	tbb	[pc, r3]
    a488:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    a48c:	4911      	ldr	r1, [pc, #68]	; (a4d4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    a48e:	4628      	mov	r0, r5
    a490:	f007 f936 	bl	11700 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a494:	9505      	str	r5, [sp, #20]
    a496:	7863      	ldrb	r3, [r4, #1]
    a498:	9304      	str	r3, [sp, #16]
    a49a:	78a3      	ldrb	r3, [r4, #2]
    a49c:	9303      	str	r3, [sp, #12]
    a49e:	78e3      	ldrb	r3, [r4, #3]
    a4a0:	9302      	str	r3, [sp, #8]
    a4a2:	7923      	ldrb	r3, [r4, #4]
    a4a4:	9301      	str	r3, [sp, #4]
    a4a6:	7963      	ldrb	r3, [r4, #5]
    a4a8:	9300      	str	r3, [sp, #0]
    a4aa:	79a3      	ldrb	r3, [r4, #6]
    a4ac:	4a0a      	ldr	r2, [pc, #40]	; (a4d8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a4ae:	211e      	movs	r1, #30
    a4b0:	4630      	mov	r0, r6
    a4b2:	f006 fde5 	bl	11080 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    a4b6:	b00a      	add	sp, #40	; 0x28
    a4b8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a4ba:	4908      	ldr	r1, [pc, #32]	; (a4dc <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a4bc:	e7e7      	b.n	a48e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a4be:	4908      	ldr	r1, [pc, #32]	; (a4e0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a4c0:	e7e5      	b.n	a48e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a4c2:	4908      	ldr	r1, [pc, #32]	; (a4e4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a4c4:	e7e3      	b.n	a48e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a4c6:	4a08      	ldr	r2, [pc, #32]	; (a4e8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a4c8:	210a      	movs	r1, #10
    a4ca:	4628      	mov	r0, r5
    a4cc:	f006 fdd8 	bl	11080 <snprintk>
		break;
    a4d0:	e7e0      	b.n	a494 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a4d2:	bf00      	nop
    a4d4:	00012eda 	.word	0x00012eda
    a4d8:	00012f03 	.word	0x00012f03
    a4dc:	00012ee1 	.word	0x00012ee1
    a4e0:	00012ee8 	.word	0x00012ee8
    a4e4:	00012ef2 	.word	0x00012ef2
    a4e8:	00012efc 	.word	0x00012efc

0000a4ec <check_device>:
static void extract_rx_data(uint8_t *buffer, uint8_t len);
static void extract_tx_data(uint8_t *buffer, uint8_t len);
static void print_buffer(uint8_t *buffer, uint8_t len);


uint8_t check_device(struct net_buf_simple *ad){
    a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4f0:	f8df a050 	ldr.w	sl, [pc, #80]	; a544 <check_device+0x58>
    a4f4:	f8df 9050 	ldr.w	r9, [pc, #80]	; a548 <check_device+0x5c>
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	4606      	mov	r6, r0
    a4fc:	2500      	movs	r5, #0

	for(uint8_t device = RX_DEVICE; device <= TX_DEVICE; device++){
		// Desired - buffer name rx adv
		// char ds_name_buffer [] = RX_DEVICE_NAME;
		uint16_t buffer_cmp_len = device_name_len_buffer[device] - 1;//sizeof(device_name_pointer_buffer[device]) - 1;
    a4fe:	f81a 4b01 	ldrb.w	r4, [sl], #1

		// Scanned - buffer name rx adv
		char sc_name_buffer [buffer_cmp_len];
		memcpy(sc_name_buffer, ad->data + 2, buffer_cmp_len);
    a502:	6831      	ldr	r1, [r6, #0]
		uint16_t buffer_cmp_len = device_name_len_buffer[device] - 1;//sizeof(device_name_pointer_buffer[device]) - 1;
    a504:	3c01      	subs	r4, #1
		char sc_name_buffer [buffer_cmp_len];
    a506:	b2a4      	uxth	r4, r4
    a508:	1de3      	adds	r3, r4, #7
	for(uint8_t device = RX_DEVICE; device <= TX_DEVICE; device++){
    a50a:	46e8      	mov	r8, sp
		char sc_name_buffer [buffer_cmp_len];
    a50c:	08db      	lsrs	r3, r3, #3
    a50e:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
    a512:	469d      	mov	sp, r3
		memcpy(sc_name_buffer, ad->data + 2, buffer_cmp_len);
    a514:	4622      	mov	r2, r4
    a516:	3102      	adds	r1, #2
    a518:	4668      	mov	r0, sp
    a51a:	f007 f91b 	bl	11754 <memcpy>
		// Print buffers to check similarity
		// print_buffer(ds_name_buffer, buffer_cmp_len);
		// print_buffer(sc_name_buffer, buffer_cmp_len);

		// Compare both buffer
		int result = memcmp(device_name_pointer_buffer[device], sc_name_buffer, buffer_cmp_len);
    a51e:	f859 0b04 	ldr.w	r0, [r9], #4
    a522:	4622      	mov	r2, r4
    a524:	4669      	mov	r1, sp
    a526:	f007 f905 	bl	11734 <memcmp>

		if(result == 0){
    a52a:	b930      	cbnz	r0, a53a <check_device+0x4e>
    a52c:	b2e8      	uxtb	r0, r5
			return device;
    a52e:	46c5      	mov	sp, r8
		}
	}
	return NONE;
}
    a530:	46bd      	mov	sp, r7
    a532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a536:	2501      	movs	r5, #1
    a538:	e7e1      	b.n	a4fe <check_device+0x12>
    a53a:	46c5      	mov	sp, r8
	for(uint8_t device = RX_DEVICE; device <= TX_DEVICE; device++){
    a53c:	2d00      	cmp	r5, #0
    a53e:	d0fa      	beq.n	a536 <check_device+0x4a>
	return NONE;
    a540:	2002      	movs	r0, #2
    a542:	e7f5      	b.n	a530 <check_device+0x44>
    a544:	2000046c 	.word	0x2000046c
    a548:	20000370 	.word	0x20000370

0000a54c <device_found>:

static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type, struct net_buf_simple *ad){
    a54c:	b570      	push	{r4, r5, r6, lr}
    a54e:	4605      	mov	r5, r0
    a550:	b08e      	sub	sp, #56	; 0x38

	char addr_str[BT_ADDR_LE_STR_LEN];

	uint8_t dev = check_device(ad);
    a552:	4618      	mov	r0, r3
static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type, struct net_buf_simple *ad){
    a554:	461c      	mov	r4, r3
	uint8_t dev = check_device(ad);
    a556:	f7ff ffc9 	bl	a4ec <check_device>
			addr_str, rssi, type, ad->len);
			print_buffer(ad->data, ad->len);
		}
	#endif

	switch (dev){
    a55a:	b118      	cbz	r0, a564 <device_found+0x18>
    a55c:	2801      	cmp	r0, #1
    a55e:	d02c      	beq.n	a5ba <device_found+0x6e>

	// 	printk("input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
	// 	printk("supply_voltage_mv: %"PRId32" mV\n", supply_voltage_mv);
	// 	printk("buck_current_ma: %"PRId32" mA\n", buck_current_ma);
	// }
}
    a560:	b00e      	add	sp, #56	; 0x38
    a562:	bd70      	pop	{r4, r5, r6, pc}
			bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    a564:	4628      	mov	r0, r5
    a566:	a906      	add	r1, sp, #24
    a568:	f7ff ff84 	bl	a474 <bt_addr_le_to_str.constprop.0.isra.0>
/*							OTHER FUNCTIONS							*/
/********************************************************************/


static void extract_rx_data(uint8_t *buffer, uint8_t len){
	uint8_t pos = 4 + device_name_len_buffer[RX_DEVICE];
    a56c:	4a24      	ldr	r2, [pc, #144]	; (a600 <device_found+0xb4>)
			extract_rx_data(ad->data, ad->len);
    a56e:	6823      	ldr	r3, [r4, #0]
	uint8_t pos = 4 + device_name_len_buffer[RX_DEVICE];
    a570:	7812      	ldrb	r2, [r2, #0]
	input_voltage_mv = *(buffer + pos) << 8 | *(buffer + pos + 1);
	supply_voltage_mv = *(buffer + pos + 2) << 8 | *(buffer + pos + 3);
    a572:	4d24      	ldr	r5, [pc, #144]	; (a604 <device_found+0xb8>)
	buck_current_ma = *(buffer + pos + 4) << 8 | *(buffer + pos + 5);
    a574:	4c24      	ldr	r4, [pc, #144]	; (a608 <device_found+0xbc>)
	uint8_t pos = 4 + device_name_len_buffer[RX_DEVICE];
    a576:	3204      	adds	r2, #4
	input_voltage_mv = *(buffer + pos) << 8 | *(buffer + pos + 1);
    a578:	b2d2      	uxtb	r2, r2
    a57a:	5c98      	ldrb	r0, [r3, r2]
    a57c:	4413      	add	r3, r2
    a57e:	4a23      	ldr	r2, [pc, #140]	; (a60c <device_found+0xc0>)
    a580:	7859      	ldrb	r1, [r3, #1]
    a582:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    a586:	b209      	sxth	r1, r1
    a588:	8011      	strh	r1, [r2, #0]
	supply_voltage_mv = *(buffer + pos + 2) << 8 | *(buffer + pos + 3);
    a58a:	7898      	ldrb	r0, [r3, #2]
    a58c:	78da      	ldrb	r2, [r3, #3]
    a58e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    a592:	802a      	strh	r2, [r5, #0]
	buck_current_ma = *(buffer + pos + 4) << 8 | *(buffer + pos + 5);
    a594:	791a      	ldrb	r2, [r3, #4]
    a596:	795b      	ldrb	r3, [r3, #5]
			printk("RECEIVER: input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
    a598:	481d      	ldr	r0, [pc, #116]	; (a610 <device_found+0xc4>)
	buck_current_ma = *(buffer + pos + 4) << 8 | *(buffer + pos + 5);
    a59a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a59e:	8023      	strh	r3, [r4, #0]
			printk("RECEIVER: input_voltage_mv: %"PRId32" mV\n", input_voltage_mv);
    a5a0:	f006 fd61 	bl	11066 <printk>
			printk("RECEIVER: supply_voltage_mv: %"PRId32" mV\n", supply_voltage_mv);
    a5a4:	f9b5 1000 	ldrsh.w	r1, [r5]
    a5a8:	481a      	ldr	r0, [pc, #104]	; (a614 <device_found+0xc8>)
    a5aa:	f006 fd5c 	bl	11066 <printk>
			printk("RECEIVER: buck_current_ma: %"PRId32" mA\n", buck_current_ma);
    a5ae:	f9b4 1000 	ldrsh.w	r1, [r4]
    a5b2:	4819      	ldr	r0, [pc, #100]	; (a618 <device_found+0xcc>)
			printk("TRANSMITTER: vamp_supply_voltage_mv: %"PRId32" mV\n", vamp_supply_voltage_mv);
    a5b4:	f006 fd57 	bl	11066 <printk>
}
    a5b8:	e7d2      	b.n	a560 <device_found+0x14>
			bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    a5ba:	4628      	mov	r0, r5
}

static void extract_tx_data(uint8_t *buffer, uint8_t len){
	int16_t *extract_pointer_buffer [] = {&uav_battery_voltage_mv, &uav_current_ma, &pre_reg_input_current_ma, &pre_reg_output_current_ma, &vamp_supply_voltage_mv};
    a5bc:	4d17      	ldr	r5, [pc, #92]	; (a61c <device_found+0xd0>)
			bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    a5be:	a906      	add	r1, sp, #24
    a5c0:	f7ff ff58 	bl	a474 <bt_addr_le_to_str.constprop.0.isra.0>
	int16_t *extract_pointer_buffer [] = {&uav_battery_voltage_mv, &uav_current_ma, &pre_reg_input_current_ma, &pre_reg_output_current_ma, &vamp_supply_voltage_mv};
    a5c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
			extract_tx_data(ad->data, ad->len);
    a5c6:	6826      	ldr	r6, [r4, #0]
	int16_t *extract_pointer_buffer [] = {&uav_battery_voltage_mv, &uav_current_ma, &pre_reg_input_current_ma, &pre_reg_output_current_ma, &vamp_supply_voltage_mv};
    a5c8:	ac01      	add	r4, sp, #4
    a5ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a5cc:	682b      	ldr	r3, [r5, #0]
    a5ce:	6023      	str	r3, [r4, #0]
	
	// Adv start position user data
	uint8_t pos = 4 + device_name_len_buffer[TX_DEVICE];
    a5d0:	4b0b      	ldr	r3, [pc, #44]	; (a600 <device_found+0xb4>)
    a5d2:	785b      	ldrb	r3, [r3, #1]
    a5d4:	3304      	adds	r3, #4
    a5d6:	fa56 f383 	uxtab	r3, r6, r3
    a5da:	a801      	add	r0, sp, #4
    a5dc:	2200      	movs	r2, #0

	for(uint8_t i = 0; i < sizeof(extract_pointer_buffer)/sizeof(extract_pointer_buffer[0]); i++){
		*extract_pointer_buffer[i] = *(buffer + pos + i*2) << 8 | *(buffer + pos + 1 + i*2);
    a5de:	781d      	ldrb	r5, [r3, #0]
    a5e0:	7859      	ldrb	r1, [r3, #1]
    a5e2:	f850 4b04 	ldr.w	r4, [r0], #4
	for(uint8_t i = 0; i < sizeof(extract_pointer_buffer)/sizeof(extract_pointer_buffer[0]); i++){
    a5e6:	3201      	adds	r2, #1
		*extract_pointer_buffer[i] = *(buffer + pos + i*2) << 8 | *(buffer + pos + 1 + i*2);
    a5e8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	for(uint8_t i = 0; i < sizeof(extract_pointer_buffer)/sizeof(extract_pointer_buffer[0]); i++){
    a5ec:	2a05      	cmp	r2, #5
		*extract_pointer_buffer[i] = *(buffer + pos + i*2) << 8 | *(buffer + pos + 1 + i*2);
    a5ee:	8021      	strh	r1, [r4, #0]
	for(uint8_t i = 0; i < sizeof(extract_pointer_buffer)/sizeof(extract_pointer_buffer[0]); i++){
    a5f0:	f103 0302 	add.w	r3, r3, #2
    a5f4:	d1f3      	bne.n	a5de <device_found+0x92>
			printk("TRANSMITTER: vamp_supply_voltage_mv: %"PRId32" mV\n", vamp_supply_voltage_mv);
    a5f6:	4b0a      	ldr	r3, [pc, #40]	; (a620 <device_found+0xd4>)
    a5f8:	480a      	ldr	r0, [pc, #40]	; (a624 <device_found+0xd8>)
    a5fa:	f9b3 1000 	ldrsh.w	r1, [r3]
    a5fe:	e7d9      	b.n	a5b4 <device_found+0x68>
    a600:	2000046c 	.word	0x2000046c
    a604:	20001b28 	.word	0x20001b28
    a608:	20001b26 	.word	0x20001b26
    a60c:	20001b2a 	.word	0x20001b2a
    a610:	00012f26 	.word	0x00012f26
    a614:	00012f49 	.word	0x00012f49
    a618:	00012f6d 	.word	0x00012f6d
    a61c:	00012ca0 	.word	0x00012ca0
    a620:	20001b1c 	.word	0x20001b1c
    a624:	00012f8f 	.word	0x00012f8f

0000a628 <observer_start>:
{
    a628:	b510      	push	{r4, lr}
    a62a:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    a62c:	2214      	movs	r2, #20
    a62e:	2100      	movs	r1, #0
    a630:	a801      	add	r0, sp, #4
    a632:	f007 f89a 	bl	1176a <memset>
    a636:	4b0a      	ldr	r3, [pc, #40]	; (a660 <observer_start+0x38>)
	err = bt_le_scan_start(&scan_param, device_found);
    a638:	490a      	ldr	r1, [pc, #40]	; (a664 <observer_start+0x3c>)
	struct bt_le_scan_param scan_param = {
    a63a:	2201      	movs	r2, #1
	err = bt_le_scan_start(&scan_param, device_found);
    a63c:	a801      	add	r0, sp, #4
	struct bt_le_scan_param scan_param = {
    a63e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = bt_le_scan_start(&scan_param, device_found);
    a642:	f002 fa69 	bl	cb18 <bt_le_scan_start>
	if (err) {
    a646:	4604      	mov	r4, r0
    a648:	b130      	cbz	r0, a658 <observer_start+0x30>
		printk("Start scanning failed (err %d)\n", err);
    a64a:	4601      	mov	r1, r0
    a64c:	4806      	ldr	r0, [pc, #24]	; (a668 <observer_start+0x40>)
    a64e:	f006 fd0a 	bl	11066 <printk>
}
    a652:	4620      	mov	r0, r4
    a654:	b006      	add	sp, #24
    a656:	bd10      	pop	{r4, pc}
	printk("Started scanning...\n");
    a658:	4804      	ldr	r0, [pc, #16]	; (a66c <observer_start+0x44>)
    a65a:	f006 fd04 	bl	11066 <printk>
	return 0;
    a65e:	e7f8      	b.n	a652 <observer_start+0x2a>
    a660:	00300060 	.word	0x00300060
    a664:	0000a54d 	.word	0x0000a54d
    a668:	00012fbb 	.word	0x00012fbb
    a66c:	00012fdb 	.word	0x00012fdb

0000a670 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    a670:	4b01      	ldr	r3, [pc, #4]	; (a678 <char_out+0x8>)
    a672:	681b      	ldr	r3, [r3, #0]
    a674:	4718      	bx	r3
    a676:	bf00      	nop
    a678:	20000378 	.word	0x20000378

0000a67c <__printk_hook_install>:
	_char_out = fn;
    a67c:	4b01      	ldr	r3, [pc, #4]	; (a684 <__printk_hook_install+0x8>)
    a67e:	6018      	str	r0, [r3, #0]
}
    a680:	4770      	bx	lr
    a682:	bf00      	nop
    a684:	20000378 	.word	0x20000378

0000a688 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    a688:	b507      	push	{r0, r1, r2, lr}
    a68a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    a68c:	2100      	movs	r1, #0
    a68e:	4602      	mov	r2, r0
    a690:	9100      	str	r1, [sp, #0]
    a692:	4803      	ldr	r0, [pc, #12]	; (a6a0 <vprintk+0x18>)
    a694:	f000 f92a 	bl	a8ec <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    a698:	b003      	add	sp, #12
    a69a:	f85d fb04 	ldr.w	pc, [sp], #4
    a69e:	bf00      	nop
    a6a0:	0000a671 	.word	0x0000a671

0000a6a4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a6a4:	b530      	push	{r4, r5, lr}
    a6a6:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    a6a8:	2500      	movs	r5, #0
    a6aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    a6ae:	4604      	mov	r4, r0
    a6b0:	9500      	str	r5, [sp, #0]
    a6b2:	a903      	add	r1, sp, #12
    a6b4:	4805      	ldr	r0, [pc, #20]	; (a6cc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    a6b6:	9505      	str	r5, [sp, #20]
    a6b8:	f000 f918 	bl	a8ec <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    a6bc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    a6c0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a6c2:	bfb8      	it	lt
    a6c4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a6c6:	b007      	add	sp, #28
    a6c8:	bd30      	pop	{r4, r5, pc}
    a6ca:	bf00      	nop
    a6cc:	00011041 	.word	0x00011041

0000a6d0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a6d4:	8b05      	ldrh	r5, [r0, #24]
{
    a6d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a6d8:	0728      	lsls	r0, r5, #28
{
    a6da:	4690      	mov	r8, r2
	if (processing) {
    a6dc:	d411      	bmi.n	a702 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    a6de:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a6e0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    a6e4:	f040 80cd 	bne.w	a882 <process_event+0x1b2>
			evt = process_recheck(mgr);
    a6e8:	4620      	mov	r0, r4
    a6ea:	f006 fea5 	bl	11438 <process_recheck>
		}

		if (evt == EVT_NOP) {
    a6ee:	b178      	cbz	r0, a710 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    a6f0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6f2:	8b21      	ldrh	r1, [r4, #24]
    a6f4:	2804      	cmp	r0, #4
    a6f6:	d811      	bhi.n	a71c <process_event+0x4c>
    a6f8:	e8df f000 	tbb	[pc, r0]
    a6fc:	856d10c3 	.word	0x856d10c3
    a700:	95          	.byte	0x95
    a701:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    a702:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a704:	bf0c      	ite	eq
    a706:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a70a:	f045 0520 	orrne.w	r5, r5, #32
    a70e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a710:	f388 8811 	msr	BASEPRI, r8
    a714:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a71c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a720:	45aa      	cmp	sl, r5
    a722:	f000 80a6 	beq.w	a872 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    a726:	2700      	movs	r7, #0
    a728:	46b9      	mov	r9, r7
    a72a:	463e      	mov	r6, r7
    a72c:	68a3      	ldr	r3, [r4, #8]
    a72e:	2b00      	cmp	r3, #0
    a730:	f000 80bd 	beq.w	a8ae <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a734:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a738:	8321      	strh	r1, [r4, #24]
    a73a:	f388 8811 	msr	BASEPRI, r8
    a73e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a742:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a744:	2900      	cmp	r1, #0
    a746:	f000 80bb 	beq.w	a8c0 <process_event+0x1f0>
	return node->next;
    a74a:	680d      	ldr	r5, [r1, #0]
    a74c:	2900      	cmp	r1, #0
    a74e:	f000 80b7 	beq.w	a8c0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    a752:	f8d1 8004 	ldr.w	r8, [r1, #4]
    a756:	4633      	mov	r3, r6
    a758:	4652      	mov	r2, sl
    a75a:	4620      	mov	r0, r4
    a75c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a75e:	2d00      	cmp	r5, #0
    a760:	d076      	beq.n	a850 <process_event+0x180>
    a762:	682b      	ldr	r3, [r5, #0]
    a764:	4629      	mov	r1, r5
    a766:	461d      	mov	r5, r3
    a768:	e7f0      	b.n	a74c <process_event+0x7c>
    a76a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a76e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a770:	2a01      	cmp	r2, #1
    a772:	d81b      	bhi.n	a7ac <process_event+0xdc>
	list->head = NULL;
    a774:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a776:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    a77a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    a77c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a77e:	b289      	uxth	r1, r1
	list->tail = NULL;
    a780:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a784:	d109      	bne.n	a79a <process_event+0xca>
    a786:	463b      	mov	r3, r7
    a788:	e003      	b.n	a792 <process_event+0xc2>
				mgr->refs += 1U;
    a78a:	8b62      	ldrh	r2, [r4, #26]
    a78c:	3201      	adds	r2, #1
    a78e:	8362      	strh	r2, [r4, #26]
	return node->next;
    a790:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a792:	2b00      	cmp	r3, #0
    a794:	d1f9      	bne.n	a78a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a796:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    a79a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a79c:	4620      	mov	r0, r4
    a79e:	f006 fe4b 	bl	11438 <process_recheck>
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d07b      	beq.n	a89e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a7a6:	f041 0120 	orr.w	r1, r1, #32
    a7aa:	e077      	b.n	a89c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a7ac:	2b04      	cmp	r3, #4
    a7ae:	d10a      	bne.n	a7c6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a7b0:	f021 0107 	bic.w	r1, r1, #7
    a7b4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a7b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a7b8:	4620      	mov	r0, r4
    a7ba:	f006 fe3d 	bl	11438 <process_recheck>
    a7be:	b110      	cbz	r0, a7c6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a7c0:	f041 0120 	orr.w	r1, r1, #32
    a7c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a7c6:	8b21      	ldrh	r1, [r4, #24]
    a7c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a7cc:	45aa      	cmp	sl, r5
    a7ce:	d050      	beq.n	a872 <process_event+0x1a2>
    a7d0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    a7d2:	46b9      	mov	r9, r7
    a7d4:	e7aa      	b.n	a72c <process_event+0x5c>
			transit = mgr->transitions->start;
    a7d6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a7d8:	f021 0107 	bic.w	r1, r1, #7
    a7dc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    a7e0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    a7e2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a7e6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a7e8:	d12d      	bne.n	a846 <process_event+0x176>
		    || (transit != NULL)) {
    a7ea:	f1b9 0f00 	cmp.w	r9, #0
    a7ee:	d040      	beq.n	a872 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a7f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a7f4:	8321      	strh	r1, [r4, #24]
    a7f6:	f388 8811 	msr	BASEPRI, r8
    a7fa:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    a7fe:	493a      	ldr	r1, [pc, #232]	; (a8e8 <process_event+0x218>)
    a800:	4620      	mov	r0, r4
    a802:	47c8      	blx	r9
    a804:	e029      	b.n	a85a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a806:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    a80a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a80c:	f041 0104 	orr.w	r1, r1, #4
    a810:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a812:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    a814:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a818:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a81a:	d0e6      	beq.n	a7ea <process_event+0x11a>
    a81c:	2700      	movs	r7, #0
		res = 0;
    a81e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a820:	f04f 0a04 	mov.w	sl, #4
    a824:	e782      	b.n	a72c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a826:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    a82a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a82c:	f041 0105 	orr.w	r1, r1, #5
    a830:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a832:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    a834:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a838:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a83a:	d0d6      	beq.n	a7ea <process_event+0x11a>
    a83c:	2700      	movs	r7, #0
		res = 0;
    a83e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a840:	f04f 0a05 	mov.w	sl, #5
    a844:	e772      	b.n	a72c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    a846:	2700      	movs	r7, #0
		res = 0;
    a848:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a84a:	f04f 0a06 	mov.w	sl, #6
    a84e:	e76d      	b.n	a72c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a850:	462b      	mov	r3, r5
    a852:	e787      	b.n	a764 <process_event+0x94>
			if (transit != NULL) {
    a854:	f1b9 0f00 	cmp.w	r9, #0
    a858:	d1d1      	bne.n	a7fe <process_event+0x12e>
	__asm__ volatile(
    a85a:	f04f 0340 	mov.w	r3, #64	; 0x40
    a85e:	f3ef 8811 	mrs	r8, BASEPRI
    a862:	f383 8812 	msr	BASEPRI_MAX, r3
    a866:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a86a:	8b23      	ldrh	r3, [r4, #24]
    a86c:	f023 0308 	bic.w	r3, r3, #8
    a870:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a872:	8b25      	ldrh	r5, [r4, #24]
    a874:	06ea      	lsls	r2, r5, #27
    a876:	d52e      	bpl.n	a8d6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a878:	f025 0310 	bic.w	r3, r5, #16
    a87c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    a87e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    a882:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a884:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    a886:	2e00      	cmp	r6, #0
    a888:	f6bf af6f 	bge.w	a76a <process_event+0x9a>
	list->head = NULL;
    a88c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    a88e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    a890:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a894:	f021 0107 	bic.w	r1, r1, #7
    a898:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a89c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a89e:	8b21      	ldrh	r1, [r4, #24]
    a8a0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a8a4:	45aa      	cmp	sl, r5
    a8a6:	f04f 0900 	mov.w	r9, #0
    a8aa:	f47f af3f 	bne.w	a72c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    a8ae:	2f00      	cmp	r7, #0
    a8b0:	d09b      	beq.n	a7ea <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a8b2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a8b6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    a8b8:	f388 8811 	msr	BASEPRI, r8
    a8bc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    a8c0:	2f00      	cmp	r7, #0
    a8c2:	d0c7      	beq.n	a854 <process_event+0x184>
	return node->next;
    a8c4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    a8c6:	4639      	mov	r1, r7
    a8c8:	4633      	mov	r3, r6
    a8ca:	4652      	mov	r2, sl
    a8cc:	4620      	mov	r0, r4
    a8ce:	f006 fddf 	bl	11490 <notify_one>
	list->head = node;
    a8d2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    a8d4:	e7f4      	b.n	a8c0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a8d6:	06ab      	lsls	r3, r5, #26
    a8d8:	f57f af1a 	bpl.w	a710 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a8dc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a8e0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    a8e2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    a8e6:	e6ff      	b.n	a6e8 <process_event+0x18>
    a8e8:	000114bd 	.word	0x000114bd

0000a8ec <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8f0:	4681      	mov	r9, r0
    a8f2:	b095      	sub	sp, #84	; 0x54
    a8f4:	468b      	mov	fp, r1
    a8f6:	4617      	mov	r7, r2
    a8f8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a8fa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a8fc:	7838      	ldrb	r0, [r7, #0]
    a8fe:	b908      	cbnz	r0, a904 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a900:	4628      	mov	r0, r5
    a902:	e358      	b.n	afb6 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    a904:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    a906:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a908:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    a90a:	d006      	beq.n	a91a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    a90c:	4659      	mov	r1, fp
    a90e:	47c8      	blx	r9
    a910:	2800      	cmp	r0, #0
    a912:	f2c0 8350 	blt.w	afb6 <z_cbvprintf_impl+0x6ca>
    a916:	3501      	adds	r5, #1
		if (bps == NULL) {
    a918:	e1fb      	b.n	ad12 <z_cbvprintf_impl+0x426>
		} state = {
    a91a:	2218      	movs	r2, #24
    a91c:	2100      	movs	r1, #0
    a91e:	a80e      	add	r0, sp, #56	; 0x38
    a920:	f006 ff23 	bl	1176a <memset>
	if (*sp == '%') {
    a924:	787b      	ldrb	r3, [r7, #1]
    a926:	2b25      	cmp	r3, #37	; 0x25
    a928:	d07d      	beq.n	aa26 <z_cbvprintf_impl+0x13a>
    a92a:	2300      	movs	r3, #0
    a92c:	1c78      	adds	r0, r7, #1
    a92e:	4698      	mov	r8, r3
    a930:	469e      	mov	lr, r3
    a932:	469c      	mov	ip, r3
    a934:	461e      	mov	r6, r3
    a936:	4601      	mov	r1, r0
		switch (*sp) {
    a938:	f810 2b01 	ldrb.w	r2, [r0], #1
    a93c:	2a2b      	cmp	r2, #43	; 0x2b
    a93e:	f000 80a1 	beq.w	aa84 <z_cbvprintf_impl+0x198>
    a942:	f200 8098 	bhi.w	aa76 <z_cbvprintf_impl+0x18a>
    a946:	2a20      	cmp	r2, #32
    a948:	f000 809f 	beq.w	aa8a <z_cbvprintf_impl+0x19e>
    a94c:	2a23      	cmp	r2, #35	; 0x23
    a94e:	f000 809f 	beq.w	aa90 <z_cbvprintf_impl+0x1a4>
    a952:	b12b      	cbz	r3, a960 <z_cbvprintf_impl+0x74>
    a954:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a95c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a960:	f1b8 0f00 	cmp.w	r8, #0
    a964:	d005      	beq.n	a972 <z_cbvprintf_impl+0x86>
    a966:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a96a:	f043 0320 	orr.w	r3, r3, #32
    a96e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a972:	f1be 0f00 	cmp.w	lr, #0
    a976:	d005      	beq.n	a984 <z_cbvprintf_impl+0x98>
    a978:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a97c:	f043 0310 	orr.w	r3, r3, #16
    a980:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a984:	f1bc 0f00 	cmp.w	ip, #0
    a988:	d005      	beq.n	a996 <z_cbvprintf_impl+0xaa>
    a98a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a98e:	f043 0308 	orr.w	r3, r3, #8
    a992:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a996:	b12e      	cbz	r6, a9a4 <z_cbvprintf_impl+0xb8>
    a998:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a99c:	f043 0304 	orr.w	r3, r3, #4
    a9a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    a9a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a9a8:	f003 0044 	and.w	r0, r3, #68	; 0x44
    a9ac:	2844      	cmp	r0, #68	; 0x44
    a9ae:	d103      	bne.n	a9b8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    a9b0:	f36f 1386 	bfc	r3, #6, #1
    a9b4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    a9b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a9bc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    a9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a9c2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a9c6:	d17f      	bne.n	aac8 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    a9c8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a9cc:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    a9d0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a9d2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    a9d6:	781a      	ldrb	r2, [r3, #0]
    a9d8:	2a2e      	cmp	r2, #46	; 0x2e
    a9da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a9de:	bf0c      	ite	eq
    a9e0:	2101      	moveq	r1, #1
    a9e2:	2100      	movne	r1, #0
    a9e4:	f361 0241 	bfi	r2, r1, #1, #1
    a9e8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    a9ec:	d178      	bne.n	aae0 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    a9ee:	785a      	ldrb	r2, [r3, #1]
    a9f0:	2a2a      	cmp	r2, #42	; 0x2a
    a9f2:	d06e      	beq.n	aad2 <z_cbvprintf_impl+0x1e6>
	++sp;
    a9f4:	3301      	adds	r3, #1
	size_t val = 0;
    a9f6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a9f8:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a9fc:	4619      	mov	r1, r3
    a9fe:	f811 0b01 	ldrb.w	r0, [r1], #1
    aa02:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    aa06:	2e09      	cmp	r6, #9
    aa08:	f240 8095 	bls.w	ab36 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    aa0c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    aa10:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    aa12:	f3c1 0040 	ubfx	r0, r1, #1, #1
    aa16:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    aa1a:	460a      	mov	r2, r1
    aa1c:	f360 0241 	bfi	r2, r0, #1, #1
    aa20:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    aa24:	e05c      	b.n	aae0 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    aa26:	1cba      	adds	r2, r7, #2
    aa28:	9203      	str	r2, [sp, #12]
    aa2a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    aa2e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    aa32:	07da      	lsls	r2, r3, #31
    aa34:	f140 812e 	bpl.w	ac94 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    aa38:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    aa3c:	f1b8 0f00 	cmp.w	r8, #0
    aa40:	da07      	bge.n	aa52 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    aa42:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    aa46:	f042 0204 	orr.w	r2, r2, #4
    aa4a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    aa4e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    aa52:	075e      	lsls	r6, r3, #29
    aa54:	f140 8127 	bpl.w	aca6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    aa58:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    aa5c:	f1ba 0f00 	cmp.w	sl, #0
    aa60:	f280 8126 	bge.w	acb0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    aa64:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    aa68:	f36f 0341 	bfc	r3, #1, #1
    aa6c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    aa70:	f04f 3aff 	mov.w	sl, #4294967295
    aa74:	e11c      	b.n	acb0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    aa76:	2a2d      	cmp	r2, #45	; 0x2d
    aa78:	d00d      	beq.n	aa96 <z_cbvprintf_impl+0x1aa>
    aa7a:	2a30      	cmp	r2, #48	; 0x30
    aa7c:	f47f af69 	bne.w	a952 <z_cbvprintf_impl+0x66>
    aa80:	2301      	movs	r3, #1
	} while (loop);
    aa82:	e758      	b.n	a936 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    aa84:	f04f 0c01 	mov.w	ip, #1
    aa88:	e755      	b.n	a936 <z_cbvprintf_impl+0x4a>
    aa8a:	f04f 0e01 	mov.w	lr, #1
    aa8e:	e752      	b.n	a936 <z_cbvprintf_impl+0x4a>
    aa90:	f04f 0801 	mov.w	r8, #1
    aa94:	e74f      	b.n	a936 <z_cbvprintf_impl+0x4a>
    aa96:	2601      	movs	r6, #1
    aa98:	e74d      	b.n	a936 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    aa9a:	fb0e 6202 	mla	r2, lr, r2, r6
    aa9e:	3a30      	subs	r2, #48	; 0x30
    aaa0:	4603      	mov	r3, r0
    aaa2:	4618      	mov	r0, r3
    aaa4:	f810 6b01 	ldrb.w	r6, [r0], #1
    aaa8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    aaac:	f1bc 0f09 	cmp.w	ip, #9
    aab0:	d9f3      	bls.n	aa9a <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    aab2:	4299      	cmp	r1, r3
    aab4:	d08f      	beq.n	a9d6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    aab6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    aaba:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    aabc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    aabe:	f362 0141 	bfi	r1, r2, #1, #1
    aac2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    aac6:	e786      	b.n	a9d6 <z_cbvprintf_impl+0xea>
    aac8:	460b      	mov	r3, r1
	size_t val = 0;
    aaca:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    aacc:	f04f 0e0a 	mov.w	lr, #10
    aad0:	e7e7      	b.n	aaa2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    aad2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aad6:	f042 0204 	orr.w	r2, r2, #4
    aada:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    aade:	3302      	adds	r3, #2
	switch (*sp) {
    aae0:	781a      	ldrb	r2, [r3, #0]
    aae2:	2a6c      	cmp	r2, #108	; 0x6c
    aae4:	d047      	beq.n	ab76 <z_cbvprintf_impl+0x28a>
    aae6:	d82b      	bhi.n	ab40 <z_cbvprintf_impl+0x254>
    aae8:	2a68      	cmp	r2, #104	; 0x68
    aaea:	d031      	beq.n	ab50 <z_cbvprintf_impl+0x264>
    aaec:	2a6a      	cmp	r2, #106	; 0x6a
    aaee:	d04b      	beq.n	ab88 <z_cbvprintf_impl+0x29c>
    aaf0:	2a4c      	cmp	r2, #76	; 0x4c
    aaf2:	d051      	beq.n	ab98 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    aaf4:	461a      	mov	r2, r3
    aaf6:	f812 3b01 	ldrb.w	r3, [r2], #1
    aafa:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    aafc:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    aafe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    ab02:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    ab06:	f200 80be 	bhi.w	ac86 <z_cbvprintf_impl+0x39a>
    ab0a:	2b6d      	cmp	r3, #109	; 0x6d
    ab0c:	d851      	bhi.n	abb2 <z_cbvprintf_impl+0x2c6>
    ab0e:	2b69      	cmp	r3, #105	; 0x69
    ab10:	f200 80b9 	bhi.w	ac86 <z_cbvprintf_impl+0x39a>
    ab14:	2b57      	cmp	r3, #87	; 0x57
    ab16:	d867      	bhi.n	abe8 <z_cbvprintf_impl+0x2fc>
    ab18:	2b41      	cmp	r3, #65	; 0x41
    ab1a:	d003      	beq.n	ab24 <z_cbvprintf_impl+0x238>
    ab1c:	3b45      	subs	r3, #69	; 0x45
    ab1e:	2b02      	cmp	r3, #2
    ab20:	f200 80b1 	bhi.w	ac86 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    ab24:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ab28:	2204      	movs	r2, #4
    ab2a:	f362 0302 	bfi	r3, r2, #0, #3
    ab2e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    ab32:	2301      	movs	r3, #1
			break;
    ab34:	e073      	b.n	ac1e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    ab36:	fb0c 0202 	mla	r2, ip, r2, r0
    ab3a:	3a30      	subs	r2, #48	; 0x30
    ab3c:	460b      	mov	r3, r1
    ab3e:	e75d      	b.n	a9fc <z_cbvprintf_impl+0x110>
	switch (*sp) {
    ab40:	2a74      	cmp	r2, #116	; 0x74
    ab42:	d025      	beq.n	ab90 <z_cbvprintf_impl+0x2a4>
    ab44:	2a7a      	cmp	r2, #122	; 0x7a
    ab46:	d1d5      	bne.n	aaf4 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    ab48:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab4c:	2106      	movs	r1, #6
    ab4e:	e00c      	b.n	ab6a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    ab50:	785a      	ldrb	r2, [r3, #1]
    ab52:	2a68      	cmp	r2, #104	; 0x68
    ab54:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab58:	d106      	bne.n	ab68 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    ab5a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ab5c:	f361 02c6 	bfi	r2, r1, #3, #4
    ab60:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    ab64:	3302      	adds	r3, #2
    ab66:	e7c5      	b.n	aaf4 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    ab68:	2102      	movs	r1, #2
    ab6a:	f361 02c6 	bfi	r2, r1, #3, #4
    ab6e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    ab72:	3301      	adds	r3, #1
    ab74:	e7be      	b.n	aaf4 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    ab76:	785a      	ldrb	r2, [r3, #1]
    ab78:	2a6c      	cmp	r2, #108	; 0x6c
    ab7a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab7e:	d101      	bne.n	ab84 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    ab80:	2104      	movs	r1, #4
    ab82:	e7eb      	b.n	ab5c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    ab84:	2103      	movs	r1, #3
    ab86:	e7f0      	b.n	ab6a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    ab88:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab8c:	2105      	movs	r1, #5
    ab8e:	e7ec      	b.n	ab6a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    ab90:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab94:	2107      	movs	r1, #7
    ab96:	e7e8      	b.n	ab6a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    ab98:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    ab9c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    aba0:	f022 0202 	bic.w	r2, r2, #2
    aba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    aba8:	f042 0202 	orr.w	r2, r2, #2
    abac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    abb0:	e7df      	b.n	ab72 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    abb2:	3b6e      	subs	r3, #110	; 0x6e
    abb4:	b2d9      	uxtb	r1, r3
    abb6:	2301      	movs	r3, #1
    abb8:	408b      	lsls	r3, r1
    abba:	f240 4182 	movw	r1, #1154	; 0x482
    abbe:	420b      	tst	r3, r1
    abc0:	d137      	bne.n	ac32 <z_cbvprintf_impl+0x346>
    abc2:	f013 0f24 	tst.w	r3, #36	; 0x24
    abc6:	d151      	bne.n	ac6c <z_cbvprintf_impl+0x380>
    abc8:	07d8      	lsls	r0, r3, #31
    abca:	d55c      	bpl.n	ac86 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    abcc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    abd0:	2103      	movs	r1, #3
    abd2:	f361 0302 	bfi	r3, r1, #0, #3
    abd6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    abda:	f002 0378 	and.w	r3, r2, #120	; 0x78
    abde:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    abe2:	424b      	negs	r3, r1
    abe4:	414b      	adcs	r3, r1
    abe6:	e01a      	b.n	ac1e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    abe8:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    abec:	b2c9      	uxtb	r1, r1
    abee:	2001      	movs	r0, #1
    abf0:	fa00 f101 	lsl.w	r1, r0, r1
    abf4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    abf8:	d194      	bne.n	ab24 <z_cbvprintf_impl+0x238>
    abfa:	f640 0601 	movw	r6, #2049	; 0x801
    abfe:	4231      	tst	r1, r6
    ac00:	d11d      	bne.n	ac3e <z_cbvprintf_impl+0x352>
    ac02:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ac06:	d03e      	beq.n	ac86 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    ac08:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ac0c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ac10:	f002 0278 	and.w	r2, r2, #120	; 0x78
    ac14:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    ac16:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    ac1a:	d034      	beq.n	ac86 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    ac1c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    ac1e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    ac22:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ac26:	430b      	orrs	r3, r1
    ac28:	f363 0241 	bfi	r2, r3, #1, #1
    ac2c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    ac30:	e6fd      	b.n	aa2e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    ac32:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ac36:	2102      	movs	r1, #2
    ac38:	f361 0302 	bfi	r3, r1, #0, #3
    ac3c:	e7e8      	b.n	ac10 <z_cbvprintf_impl+0x324>
    ac3e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    ac42:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    ac44:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ac48:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ac4c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ac4e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    ac52:	bf02      	ittt	eq
    ac54:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    ac58:	f041 0101 	orreq.w	r1, r1, #1
    ac5c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    ac60:	2b63      	cmp	r3, #99	; 0x63
    ac62:	d1db      	bne.n	ac1c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ac64:	1e13      	subs	r3, r2, #0
    ac66:	bf18      	it	ne
    ac68:	2301      	movne	r3, #1
    ac6a:	e7d8      	b.n	ac1e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    ac6c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ac70:	2103      	movs	r1, #3
    ac72:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    ac76:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ac7a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    ac7e:	bf14      	ite	ne
    ac80:	2301      	movne	r3, #1
    ac82:	2300      	moveq	r3, #0
    ac84:	e7cb      	b.n	ac1e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    ac86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ac8a:	f043 0301 	orr.w	r3, r3, #1
    ac8e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    ac92:	e7c3      	b.n	ac1c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    ac94:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    ac98:	2a00      	cmp	r2, #0
			width = conv->width_value;
    ac9a:	bfb4      	ite	lt
    ac9c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    aca0:	f04f 38ff 	movge.w	r8, #4294967295
    aca4:	e6d5      	b.n	aa52 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    aca6:	0798      	lsls	r0, r3, #30
    aca8:	f57f aee2 	bpl.w	aa70 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    acac:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    acb0:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    acb4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    acb6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    acba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    acbe:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    acc2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    acc4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    acc8:	d133      	bne.n	ad32 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    acca:	1ecb      	subs	r3, r1, #3
    accc:	2b04      	cmp	r3, #4
    acce:	d804      	bhi.n	acda <z_cbvprintf_impl+0x3ee>
    acd0:	e8df f003 	tbb	[pc, r3]
    acd4:	21464621 	.word	0x21464621
    acd8:	21          	.byte	0x21
    acd9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    acda:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    acdc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    acde:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ace2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    ace6:	d11c      	bne.n	ad22 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    ace8:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    acec:	17da      	asrs	r2, r3, #31
    acee:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    acf2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    acf4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    acf8:	f013 0603 	ands.w	r6, r3, #3
    acfc:	d050      	beq.n	ada0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    acfe:	9b03      	ldr	r3, [sp, #12]
    ad00:	463a      	mov	r2, r7
    ad02:	4659      	mov	r1, fp
    ad04:	4648      	mov	r0, r9
    ad06:	f006 fcc5 	bl	11694 <outs>
    ad0a:	2800      	cmp	r0, #0
    ad0c:	f2c0 8153 	blt.w	afb6 <z_cbvprintf_impl+0x6ca>
    ad10:	4405      	add	r5, r0
			continue;
    ad12:	9f03      	ldr	r7, [sp, #12]
    ad14:	e5f2      	b.n	a8fc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ad16:	f854 3b04 	ldr.w	r3, [r4], #4
    ad1a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    ad1c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    ad20:	e7e8      	b.n	acf4 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    ad22:	2902      	cmp	r1, #2
    ad24:	d1e5      	bne.n	acf2 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    ad26:	b21a      	sxth	r2, r3
    ad28:	f343 33c0 	sbfx	r3, r3, #15, #1
    ad2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    ad30:	e7df      	b.n	acf2 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ad32:	2b02      	cmp	r3, #2
    ad34:	d124      	bne.n	ad80 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    ad36:	1ecb      	subs	r3, r1, #3
    ad38:	2b04      	cmp	r3, #4
    ad3a:	d804      	bhi.n	ad46 <z_cbvprintf_impl+0x45a>
    ad3c:	e8df f003 	tbb	[pc, r3]
    ad40:	18101018 	.word	0x18101018
    ad44:	18          	.byte	0x18
    ad45:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    ad46:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    ad48:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ad4c:	f04f 0200 	mov.w	r2, #0
    ad50:	d014      	beq.n	ad7c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    ad52:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    ad54:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    ad58:	d1cc      	bne.n	acf4 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    ad5a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    ad5c:	930e      	str	r3, [sp, #56]	; 0x38
    ad5e:	e7c9      	b.n	acf4 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    ad60:	3407      	adds	r4, #7
    ad62:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    ad66:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ad6a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    ad6e:	e7c1      	b.n	acf4 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    ad70:	f854 3b04 	ldr.w	r3, [r4], #4
    ad74:	930e      	str	r3, [sp, #56]	; 0x38
    ad76:	2300      	movs	r3, #0
    ad78:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    ad7a:	e7bb      	b.n	acf4 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    ad7c:	b2db      	uxtb	r3, r3
    ad7e:	e7cd      	b.n	ad1c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    ad80:	2b04      	cmp	r3, #4
    ad82:	d108      	bne.n	ad96 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    ad84:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    ad86:	f024 0407 	bic.w	r4, r4, #7
    ad8a:	e9d4 2300 	ldrd	r2, r3, [r4]
    ad8e:	3408      	adds	r4, #8
    ad90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    ad94:	e7ae      	b.n	acf4 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ad96:	2b03      	cmp	r3, #3
    ad98:	d1ac      	bne.n	acf4 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    ad9a:	f854 3b04 	ldr.w	r3, [r4], #4
    ad9e:	e7dd      	b.n	ad5c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    ada0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    ada4:	2878      	cmp	r0, #120	; 0x78
    ada6:	d8b4      	bhi.n	ad12 <z_cbvprintf_impl+0x426>
    ada8:	2862      	cmp	r0, #98	; 0x62
    adaa:	d81c      	bhi.n	ade6 <z_cbvprintf_impl+0x4fa>
    adac:	2825      	cmp	r0, #37	; 0x25
    adae:	f43f adad 	beq.w	a90c <z_cbvprintf_impl+0x20>
    adb2:	2858      	cmp	r0, #88	; 0x58
    adb4:	d1ad      	bne.n	ad12 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    adb6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    adba:	9300      	str	r3, [sp, #0]
    adbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    adc0:	ab08      	add	r3, sp, #32
    adc2:	aa10      	add	r2, sp, #64	; 0x40
    adc4:	f006 fc20 	bl	11608 <encode_uint>
			if (precision >= 0) {
    adc8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    adcc:	4607      	mov	r7, r0
			if (precision >= 0) {
    adce:	f280 809a 	bge.w	af06 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    add2:	2f00      	cmp	r7, #0
    add4:	d09d      	beq.n	ad12 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    add6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    adda:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    addc:	2e00      	cmp	r6, #0
    adde:	f000 80c1 	beq.w	af64 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    ade2:	3001      	adds	r0, #1
    ade4:	e0be      	b.n	af64 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    ade6:	3863      	subs	r0, #99	; 0x63
    ade8:	2815      	cmp	r0, #21
    adea:	d892      	bhi.n	ad12 <z_cbvprintf_impl+0x426>
    adec:	a201      	add	r2, pc, #4	; (adr r2, adf4 <z_cbvprintf_impl+0x508>)
    adee:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    adf2:	bf00      	nop
    adf4:	0000aec9 	.word	0x0000aec9
    adf8:	0000aedb 	.word	0x0000aedb
    adfc:	0000ad13 	.word	0x0000ad13
    ae00:	0000ad13 	.word	0x0000ad13
    ae04:	0000ad13 	.word	0x0000ad13
    ae08:	0000ad13 	.word	0x0000ad13
    ae0c:	0000aedb 	.word	0x0000aedb
    ae10:	0000ad13 	.word	0x0000ad13
    ae14:	0000ad13 	.word	0x0000ad13
    ae18:	0000ad13 	.word	0x0000ad13
    ae1c:	0000ad13 	.word	0x0000ad13
    ae20:	0000af69 	.word	0x0000af69
    ae24:	0000af01 	.word	0x0000af01
    ae28:	0000af27 	.word	0x0000af27
    ae2c:	0000ad13 	.word	0x0000ad13
    ae30:	0000ad13 	.word	0x0000ad13
    ae34:	0000ae4d 	.word	0x0000ae4d
    ae38:	0000ad13 	.word	0x0000ad13
    ae3c:	0000af01 	.word	0x0000af01
    ae40:	0000ad13 	.word	0x0000ad13
    ae44:	0000ad13 	.word	0x0000ad13
    ae48:	0000af01 	.word	0x0000af01
			if (precision >= 0) {
    ae4c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    ae50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    ae52:	db35      	blt.n	aec0 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    ae54:	4651      	mov	r1, sl
    ae56:	4638      	mov	r0, r7
    ae58:	f006 fc63 	bl	11722 <strnlen>
			bpe = bps + len;
    ae5c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    ae60:	2f00      	cmp	r7, #0
    ae62:	f43f af56 	beq.w	ad12 <z_cbvprintf_impl+0x426>
		char sign = 0;
    ae66:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    ae68:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ae6c:	f013 0210 	ands.w	r2, r3, #16
    ae70:	9205      	str	r2, [sp, #20]
    ae72:	f000 8093 	beq.w	af9c <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    ae76:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    ae78:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    ae7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    ae7c:	bf48      	it	mi
    ae7e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    ae80:	9204      	str	r2, [sp, #16]
    ae82:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    ae84:	bf48      	it	mi
    ae86:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    ae88:	f1b8 0f00 	cmp.w	r8, #0
    ae8c:	f340 80a0 	ble.w	afd0 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    ae90:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    ae94:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    ae98:	f3c2 0380 	ubfx	r3, r2, #2, #1
    ae9c:	0750      	lsls	r0, r2, #29
    ae9e:	9306      	str	r3, [sp, #24]
    aea0:	f100 8096 	bmi.w	afd0 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    aea4:	0651      	lsls	r1, r2, #25
    aea6:	f140 8089 	bpl.w	afbc <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    aeaa:	b13e      	cbz	r6, aebc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    aeac:	4659      	mov	r1, fp
    aeae:	4630      	mov	r0, r6
    aeb0:	47c8      	blx	r9
    aeb2:	2800      	cmp	r0, #0
    aeb4:	db7f      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    aeb6:	9b06      	ldr	r3, [sp, #24]
    aeb8:	3501      	adds	r5, #1
    aeba:	461e      	mov	r6, r3
					pad = '0';
    aebc:	2230      	movs	r2, #48	; 0x30
    aebe:	e07e      	b.n	afbe <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    aec0:	4638      	mov	r0, r7
    aec2:	f006 fc27 	bl	11714 <strlen>
    aec6:	e7c9      	b.n	ae5c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    aec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aeca:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    aece:	2600      	movs	r6, #0
			bps = buf;
    aed0:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    aed2:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    aed6:	2001      	movs	r0, #1
    aed8:	e7c6      	b.n	ae68 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    aeda:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    aedc:	bf5c      	itt	pl
    aede:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    aee2:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    aee4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    aee8:	bf48      	it	mi
    aeea:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    aeec:	2b00      	cmp	r3, #0
    aeee:	f6bf af62 	bge.w	adb6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    aef2:	4252      	negs	r2, r2
    aef4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    aef8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    aefc:	262d      	movs	r6, #45	; 0x2d
    aefe:	e75a      	b.n	adb6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    af00:	2600      	movs	r6, #0
    af02:	e758      	b.n	adb6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    af04:	2600      	movs	r6, #0
				conv->flag_zero = false;
    af06:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    af0a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    af0e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    af10:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    af14:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    af16:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    af1a:	f67f af5a 	bls.w	add2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    af1e:	ebaa 0303 	sub.w	r3, sl, r3
    af22:	9311      	str	r3, [sp, #68]	; 0x44
    af24:	e755      	b.n	add2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    af26:	980e      	ldr	r0, [sp, #56]	; 0x38
    af28:	b390      	cbz	r0, af90 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    af2a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    af2e:	9300      	str	r3, [sp, #0]
    af30:	aa10      	add	r2, sp, #64	; 0x40
    af32:	ab08      	add	r3, sp, #32
    af34:	2100      	movs	r1, #0
    af36:	f006 fb67 	bl	11608 <encode_uint>
				conv->altform_0c = true;
    af3a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    af3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    af42:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    af46:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    af4a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    af4e:	4607      	mov	r7, r0
				conv->altform_0c = true;
    af50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    af54:	dad6      	bge.n	af04 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    af56:	2800      	cmp	r0, #0
    af58:	f43f aedb 	beq.w	ad12 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    af5c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    af60:	1a18      	subs	r0, r3, r0
		char sign = 0;
    af62:	2600      	movs	r6, #0
    af64:	469a      	mov	sl, r3
    af66:	e77f      	b.n	ae68 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    af68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    af6a:	2907      	cmp	r1, #7
    af6c:	f63f aed1 	bhi.w	ad12 <z_cbvprintf_impl+0x426>
    af70:	e8df f001 	tbb	[pc, r1]
    af74:	0c06040c 	.word	0x0c06040c
    af78:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    af7c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    af7e:	e6c8      	b.n	ad12 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    af80:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    af82:	e6c6      	b.n	ad12 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    af84:	17ea      	asrs	r2, r5, #31
    af86:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    af8a:	e6c2      	b.n	ad12 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    af8c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    af8e:	e6c0      	b.n	ad12 <z_cbvprintf_impl+0x426>
    af90:	4f2e      	ldr	r7, [pc, #184]	; (b04c <z_cbvprintf_impl+0x760>)
		char sign = 0;
    af92:	4606      	mov	r6, r0
			bpe = bps + 5;
    af94:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    af98:	2005      	movs	r0, #5
    af9a:	e765      	b.n	ae68 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    af9c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    af9e:	bf48      	it	mi
    afa0:	3001      	addmi	r0, #1
    afa2:	e769      	b.n	ae78 <z_cbvprintf_impl+0x58c>
    afa4:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    afa6:	4610      	mov	r0, r2
    afa8:	9206      	str	r2, [sp, #24]
    afaa:	4659      	mov	r1, fp
    afac:	47c8      	blx	r9
    afae:	2800      	cmp	r0, #0
    afb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    afb4:	da04      	bge.n	afc0 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    afb6:	b015      	add	sp, #84	; 0x54
    afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    afbc:	2220      	movs	r2, #32
					pad = '0';
    afbe:	4643      	mov	r3, r8
				while (width-- > 0) {
    afc0:	4619      	mov	r1, r3
    afc2:	2900      	cmp	r1, #0
    afc4:	f103 33ff 	add.w	r3, r3, #4294967295
    afc8:	dcec      	bgt.n	afa4 <z_cbvprintf_impl+0x6b8>
    afca:	4445      	add	r5, r8
    afcc:	1a6d      	subs	r5, r5, r1
    afce:	4698      	mov	r8, r3
		if (sign != 0) {
    afd0:	b12e      	cbz	r6, afde <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    afd2:	4659      	mov	r1, fp
    afd4:	4630      	mov	r0, r6
    afd6:	47c8      	blx	r9
    afd8:	2800      	cmp	r0, #0
    afda:	dbec      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    afdc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    afde:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    afe2:	06da      	lsls	r2, r3, #27
    afe4:	d401      	bmi.n	afea <z_cbvprintf_impl+0x6fe>
    afe6:	071b      	lsls	r3, r3, #28
    afe8:	d505      	bpl.n	aff6 <z_cbvprintf_impl+0x70a>
				OUTC('0');
    afea:	4659      	mov	r1, fp
    afec:	2030      	movs	r0, #48	; 0x30
    afee:	47c8      	blx	r9
    aff0:	2800      	cmp	r0, #0
    aff2:	dbe0      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    aff4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    aff6:	9b05      	ldr	r3, [sp, #20]
    aff8:	b133      	cbz	r3, b008 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    affa:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    affe:	4659      	mov	r1, fp
    b000:	47c8      	blx	r9
    b002:	2800      	cmp	r0, #0
    b004:	dbd7      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    b006:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b008:	9e04      	ldr	r6, [sp, #16]
    b00a:	442e      	add	r6, r5
    b00c:	e005      	b.n	b01a <z_cbvprintf_impl+0x72e>
				OUTC('0');
    b00e:	4659      	mov	r1, fp
    b010:	2030      	movs	r0, #48	; 0x30
    b012:	47c8      	blx	r9
    b014:	2800      	cmp	r0, #0
    b016:	dbce      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    b018:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b01a:	1b73      	subs	r3, r6, r5
    b01c:	2b00      	cmp	r3, #0
    b01e:	dcf6      	bgt.n	b00e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    b020:	4653      	mov	r3, sl
    b022:	463a      	mov	r2, r7
    b024:	4659      	mov	r1, fp
    b026:	4648      	mov	r0, r9
    b028:	f006 fb34 	bl	11694 <outs>
    b02c:	2800      	cmp	r0, #0
    b02e:	dbc2      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    b030:	4405      	add	r5, r0
		while (width > 0) {
    b032:	44a8      	add	r8, r5
    b034:	eba8 0305 	sub.w	r3, r8, r5
    b038:	2b00      	cmp	r3, #0
    b03a:	f77f ae6a 	ble.w	ad12 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    b03e:	4659      	mov	r1, fp
    b040:	2020      	movs	r0, #32
    b042:	47c8      	blx	r9
    b044:	2800      	cmp	r0, #0
    b046:	dbb6      	blt.n	afb6 <z_cbvprintf_impl+0x6ca>
    b048:	3501      	adds	r5, #1
			--width;
    b04a:	e7f3      	b.n	b034 <z_cbvprintf_impl+0x748>
    b04c:	00013001 	.word	0x00013001

0000b050 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b050:	f003 be22 	b.w	ec98 <SystemInit>

0000b054 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b058:	4605      	mov	r5, r0
	__asm__ volatile(
    b05a:	f04f 0340 	mov.w	r3, #64	; 0x40
    b05e:	f3ef 8611 	mrs	r6, BASEPRI
    b062:	f383 8812 	msr	BASEPRI_MAX, r3
    b066:	f3bf 8f6f 	isb	sy
	return list->head;
    b06a:	4b0e      	ldr	r3, [pc, #56]	; (b0a4 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b06c:	4f0e      	ldr	r7, [pc, #56]	; (b0a8 <pm_state_notify+0x54>)
    b06e:	681c      	ldr	r4, [r3, #0]
    b070:	f8df 8038 	ldr.w	r8, [pc, #56]	; b0ac <pm_state_notify+0x58>
    b074:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b078:	b92c      	cbnz	r4, b086 <pm_state_notify+0x32>
	__asm__ volatile(
    b07a:	f386 8811 	msr	BASEPRI, r6
    b07e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    b086:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    b08a:	2d00      	cmp	r5, #0
    b08c:	bf18      	it	ne
    b08e:	4613      	movne	r3, r2
		if (callback) {
    b090:	b12b      	cbz	r3, b09e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b092:	f898 2010 	ldrb.w	r2, [r8, #16]
    b096:	fb09 f202 	mul.w	r2, r9, r2
    b09a:	5cb8      	ldrb	r0, [r7, r2]
    b09c:	4798      	blx	r3
	return node->next;
    b09e:	6824      	ldr	r4, [r4, #0]
    b0a0:	e7ea      	b.n	b078 <pm_state_notify+0x24>
    b0a2:	bf00      	nop
    b0a4:	200018c0 	.word	0x200018c0
    b0a8:	200018b4 	.word	0x200018b4
    b0ac:	20001ae0 	.word	0x20001ae0

0000b0b0 <pm_system_resume>:

void pm_system_resume(void)
{
    b0b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    b0b2:	4b19      	ldr	r3, [pc, #100]	; (b118 <pm_system_resume+0x68>)
    b0b4:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b0b6:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b0ba:	f004 031f 	and.w	r3, r4, #31
    b0be:	2201      	movs	r2, #1
    b0c0:	409a      	lsls	r2, r3
    b0c2:	4b16      	ldr	r3, [pc, #88]	; (b11c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b0c4:	0961      	lsrs	r1, r4, #5
    b0c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b0ca:	43d0      	mvns	r0, r2
    b0cc:	e853 1f00 	ldrex	r1, [r3]
    b0d0:	ea01 0500 	and.w	r5, r1, r0
    b0d4:	e843 5600 	strex	r6, r5, [r3]
    b0d8:	2e00      	cmp	r6, #0
    b0da:	d1f7      	bne.n	b0cc <pm_system_resume+0x1c>
    b0dc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b0e0:	420a      	tst	r2, r1
    b0e2:	d013      	beq.n	b10c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    b0e4:	4b0e      	ldr	r3, [pc, #56]	; (b120 <pm_system_resume+0x70>)
    b0e6:	4d0f      	ldr	r5, [pc, #60]	; (b124 <pm_system_resume+0x74>)
    b0e8:	b18b      	cbz	r3, b10e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    b0ea:	230c      	movs	r3, #12
    b0ec:	4363      	muls	r3, r4
    b0ee:	18ea      	adds	r2, r5, r3
    b0f0:	5ce8      	ldrb	r0, [r5, r3]
    b0f2:	7851      	ldrb	r1, [r2, #1]
    b0f4:	f006 fb51 	bl	1179a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    b0f8:	2000      	movs	r0, #0
    b0fa:	f7ff ffab 	bl	b054 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b0fe:	230c      	movs	r3, #12
    b100:	435c      	muls	r4, r3
    b102:	192a      	adds	r2, r5, r4
    b104:	2300      	movs	r3, #0
    b106:	512b      	str	r3, [r5, r4]
    b108:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b10c:	bd70      	pop	{r4, r5, r6, pc}
    b10e:	f383 8811 	msr	BASEPRI, r3
    b112:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b116:	e7ef      	b.n	b0f8 <pm_system_resume+0x48>
    b118:	20001ae0 	.word	0x20001ae0
    b11c:	200018c8 	.word	0x200018c8
    b120:	0001179b 	.word	0x0001179b
    b124:	200018b4 	.word	0x200018b4

0000b128 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    b128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    b12c:	4b35      	ldr	r3, [pc, #212]	; (b204 <pm_system_suspend+0xdc>)
{
    b12e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    b130:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    b132:	f04f 0340 	mov.w	r3, #64	; 0x40
    b136:	f3ef 8811 	mrs	r8, BASEPRI
    b13a:	f383 8812 	msr	BASEPRI_MAX, r3
    b13e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    b142:	240c      	movs	r4, #12
    b144:	4b30      	ldr	r3, [pc, #192]	; (b208 <pm_system_suspend+0xe0>)
    b146:	4e31      	ldr	r6, [pc, #196]	; (b20c <pm_system_suspend+0xe4>)
    b148:	436c      	muls	r4, r5
    b14a:	191a      	adds	r2, r3, r4
    b14c:	5d19      	ldrb	r1, [r3, r4]
    b14e:	2900      	cmp	r1, #0
    b150:	d04c      	beq.n	b1ec <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    b152:	ca07      	ldmia	r2, {r0, r1, r2}
    b154:	eb06 0c04 	add.w	ip, r6, r4
    b158:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    b15c:	2200      	movs	r2, #0
    b15e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    b160:	f388 8811 	msr	BASEPRI, r8
    b164:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b168:	230c      	movs	r3, #12
    b16a:	436b      	muls	r3, r5
    b16c:	18f2      	adds	r2, r6, r3
    b16e:	5cf0      	ldrb	r0, [r6, r3]
    b170:	2800      	cmp	r0, #0
    b172:	d039      	beq.n	b1e8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    b174:	1c7b      	adds	r3, r7, #1
    b176:	d010      	beq.n	b19a <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    b178:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b17c:	4c24      	ldr	r4, [pc, #144]	; (b210 <pm_system_suspend+0xe8>)
    b17e:	4a25      	ldr	r2, [pc, #148]	; (b214 <pm_system_suspend+0xec>)
    b180:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    b184:	2100      	movs	r1, #0
    b186:	fbec 4100 	umlal	r4, r1, ip, r0
    b18a:	2300      	movs	r3, #0
    b18c:	4620      	mov	r0, r4
    b18e:	f7f4 ffa5 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    b192:	2101      	movs	r1, #1
    b194:	1a38      	subs	r0, r7, r0
    b196:	f003 f891 	bl	e2bc <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b19a:	f005 fb43 	bl	10824 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    b19e:	2001      	movs	r0, #1
    b1a0:	f7ff ff58 	bl	b054 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b1a4:	f3bf 8f5b 	dmb	ish
    b1a8:	4b1b      	ldr	r3, [pc, #108]	; (b218 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b1aa:	096a      	lsrs	r2, r5, #5
    b1ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    b1b0:	f005 011f 	and.w	r1, r5, #31
    b1b4:	2201      	movs	r2, #1
    b1b6:	408a      	lsls	r2, r1
    b1b8:	e853 0f00 	ldrex	r0, [r3]
    b1bc:	4310      	orrs	r0, r2
    b1be:	e843 0100 	strex	r1, r0, [r3]
    b1c2:	2900      	cmp	r1, #0
    b1c4:	d1f8      	bne.n	b1b8 <pm_system_suspend+0x90>
    b1c6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    b1ca:	4b14      	ldr	r3, [pc, #80]	; (b21c <pm_system_suspend+0xf4>)
    b1cc:	b13b      	cbz	r3, b1de <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    b1ce:	230c      	movs	r3, #12
    b1d0:	fb03 f005 	mul.w	r0, r3, r5
    b1d4:	1833      	adds	r3, r6, r0
    b1d6:	5c30      	ldrb	r0, [r6, r0]
    b1d8:	7859      	ldrb	r1, [r3, #1]
    b1da:	f006 fad2 	bl	11782 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    b1de:	f7ff ff67 	bl	b0b0 <pm_system_resume>
	k_sched_unlock();
    b1e2:	f005 fb33 	bl	1084c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    b1e6:	2001      	movs	r0, #1
}
    b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    b1ec:	4601      	mov	r1, r0
    b1ee:	4628      	mov	r0, r5
    b1f0:	f000 f816 	bl	b220 <pm_policy_next_state>
		if (info != NULL) {
    b1f4:	2800      	cmp	r0, #0
    b1f6:	d0b3      	beq.n	b160 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    b1f8:	c807      	ldmia	r0, {r0, r1, r2}
    b1fa:	4434      	add	r4, r6
    b1fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    b200:	e7ae      	b.n	b160 <pm_system_suspend+0x38>
    b202:	bf00      	nop
    b204:	20001ae0 	.word	0x20001ae0
    b208:	200018a8 	.word	0x200018a8
    b20c:	200018b4 	.word	0x200018b4
    b210:	000f423f 	.word	0x000f423f
    b214:	000f4240 	.word	0x000f4240
    b218:	200018c8 	.word	0x200018c8
    b21c:	00011783 	.word	0x00011783

0000b220 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b224:	b085      	sub	sp, #20
    b226:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b228:	a903      	add	r1, sp, #12
    b22a:	f000 f843 	bl	b2b4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b22e:	4b1e      	ldr	r3, [pc, #120]	; (b2a8 <pm_policy_next_state+0x88>)
    b230:	9d03      	ldr	r5, [sp, #12]
    b232:	f8d3 a000 	ldr.w	sl, [r3]
    b236:	f8df 8074 	ldr.w	r8, [pc, #116]	; b2ac <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b23a:	1e43      	subs	r3, r0, #1
    b23c:	b21b      	sxth	r3, r3
    b23e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b242:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b244:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    b248:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b24c:	f04f 0b00 	mov.w	fp, #0
    b250:	b924      	cbnz	r4, b25c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b252:	46a1      	mov	r9, r4
}
    b254:	4648      	mov	r0, r9
    b256:	b005      	add	sp, #20
    b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b25c:	6868      	ldr	r0, [r5, #4]
    b25e:	4a14      	ldr	r2, [pc, #80]	; (b2b0 <pm_policy_next_state+0x90>)
    b260:	46c4      	mov	ip, r8
    b262:	4659      	mov	r1, fp
    b264:	fbe0 c107 	umlal	ip, r1, r0, r7
    b268:	2300      	movs	r3, #0
    b26a:	4660      	mov	r0, ip
    b26c:	f7f4 ff36 	bl	dc <__aeabi_uldivmod>
    b270:	9001      	str	r0, [sp, #4]
    b272:	68a8      	ldr	r0, [r5, #8]
    b274:	4a0e      	ldr	r2, [pc, #56]	; (b2b0 <pm_policy_next_state+0x90>)
    b276:	46c4      	mov	ip, r8
    b278:	4659      	mov	r1, fp
    b27a:	fbe0 c107 	umlal	ip, r1, r0, r7
    b27e:	2300      	movs	r3, #0
    b280:	4660      	mov	r0, ip
    b282:	f7f4 ff2b 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b286:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    b28a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b28c:	d001      	beq.n	b292 <pm_policy_next_state+0x72>
    b28e:	4582      	cmp	sl, r0
    b290:	d905      	bls.n	b29e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    b292:	1c73      	adds	r3, r6, #1
    b294:	d0de      	beq.n	b254 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    b296:	9b01      	ldr	r3, [sp, #4]
    b298:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b29a:	42b0      	cmp	r0, r6
    b29c:	d9da      	bls.n	b254 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b29e:	3c01      	subs	r4, #1
    b2a0:	b2a4      	uxth	r4, r4
    b2a2:	3d0c      	subs	r5, #12
    b2a4:	e7d4      	b.n	b250 <pm_policy_next_state+0x30>
    b2a6:	bf00      	nop
    b2a8:	2000037c 	.word	0x2000037c
    b2ac:	000f423f 	.word	0x000f423f
    b2b0:	000f4240 	.word	0x000f4240

0000b2b4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b2b4:	b908      	cbnz	r0, b2ba <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b2b6:	4b02      	ldr	r3, [pc, #8]	; (b2c0 <pm_state_cpu_get_all+0xc>)
    b2b8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b2ba:	2000      	movs	r0, #0
    b2bc:	4770      	bx	lr
    b2be:	bf00      	nop
    b2c0:	00012cc8 	.word	0x00012cc8

0000b2c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b2c4:	4901      	ldr	r1, [pc, #4]	; (b2cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b2c6:	2210      	movs	r2, #16
	str	r2, [r1]
    b2c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b2ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b2cc:	e000ed10 	.word	0xe000ed10

0000b2d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b2d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b2d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b2d4:	f380 8811 	msr	BASEPRI, r0
	isb
    b2d8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    b2dc:	f3bf 8f4f 	dsb	sy
    b2e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b2e2:	b662      	cpsie	i
	isb
    b2e4:	f3bf 8f6f 	isb	sy

	bx	lr
    b2e8:	4770      	bx	lr
    b2ea:	bf00      	nop

0000b2ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b2ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b2ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b2f0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    b2f4:	f3bf 8f4f 	dsb	sy
    b2f8:	bf20      	wfe

	msr	BASEPRI, r0
    b2fa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b2fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b300:	4770      	bx	lr
    b302:	bf00      	nop

0000b304 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b304:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b306:	2800      	cmp	r0, #0
    b308:	db07      	blt.n	b31a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b30a:	4a04      	ldr	r2, [pc, #16]	; (b31c <arch_irq_enable+0x18>)
    b30c:	0941      	lsrs	r1, r0, #5
    b30e:	2301      	movs	r3, #1
    b310:	f000 001f 	and.w	r0, r0, #31
    b314:	4083      	lsls	r3, r0
    b316:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    b31a:	4770      	bx	lr
    b31c:	e000e100 	.word	0xe000e100

0000b320 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b320:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b322:	2800      	cmp	r0, #0
    b324:	db0c      	blt.n	b340 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b326:	0943      	lsrs	r3, r0, #5
    b328:	4906      	ldr	r1, [pc, #24]	; (b344 <arch_irq_disable+0x24>)
    b32a:	f000 001f 	and.w	r0, r0, #31
    b32e:	3320      	adds	r3, #32
    b330:	2201      	movs	r2, #1
    b332:	4082      	lsls	r2, r0
    b334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b33c:	f3bf 8f6f 	isb	sy
}
    b340:	4770      	bx	lr
    b342:	bf00      	nop
    b344:	e000e100 	.word	0xe000e100

0000b348 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b348:	4b05      	ldr	r3, [pc, #20]	; (b360 <arch_irq_is_enabled+0x18>)
    b34a:	0942      	lsrs	r2, r0, #5
    b34c:	f000 001f 	and.w	r0, r0, #31
    b350:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b354:	2301      	movs	r3, #1
    b356:	fa03 f000 	lsl.w	r0, r3, r0
}
    b35a:	4010      	ands	r0, r2
    b35c:	4770      	bx	lr
    b35e:	bf00      	nop
    b360:	e000e100 	.word	0xe000e100

0000b364 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b364:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    b366:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    b368:	bf54      	ite	pl
    b36a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    b36c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b36e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b370:	bfac      	ite	ge
    b372:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b376:	4a07      	ldrlt	r2, [pc, #28]	; (b394 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b378:	ea4f 1341 	mov.w	r3, r1, lsl #5
    b37c:	bfac      	ite	ge
    b37e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b382:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b386:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b388:	bfb4      	ite	lt
    b38a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b38c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    b390:	4770      	bx	lr
    b392:	bf00      	nop
    b394:	e000ed14 	.word	0xe000ed14

0000b398 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    b398:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    b39a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    b39c:	4b04      	ldr	r3, [pc, #16]	; (b3b0 <_arch_isr_direct_pm+0x18>)
    b39e:	695a      	ldr	r2, [r3, #20]
    b3a0:	b11a      	cbz	r2, b3aa <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    b3a2:	2200      	movs	r2, #0
    b3a4:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    b3a6:	f006 fefb 	bl	121a0 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    b3aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    b3ac:	bd08      	pop	{r3, pc}
    b3ae:	bf00      	nop
    b3b0:	20001ae0 	.word	0x20001ae0

0000b3b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b3b4:	bf30      	wfi
    b z_SysNmiOnReset
    b3b6:	f7ff bffd 	b.w	b3b4 <z_SysNmiOnReset>
    b3ba:	bf00      	nop

0000b3bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b3bc:	4a0b      	ldr	r2, [pc, #44]	; (b3ec <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b3be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b3c0:	4b0b      	ldr	r3, [pc, #44]	; (b3f0 <z_arm_prep_c+0x34>)
    b3c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b3c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b3c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b3cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b3d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b3d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b3d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b3dc:	f004 fc14 	bl	fc08 <z_bss_zero>
	z_data_copy();
    b3e0:	f005 fb6c 	bl	10abc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b3e4:	f000 fa20 	bl	b828 <z_arm_interrupt_init>
	z_cstart();
    b3e8:	f004 fc52 	bl	fc90 <z_cstart>
    b3ec:	00000000 	.word	0x00000000
    b3f0:	e000ed00 	.word	0xe000ed00

0000b3f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b3f4:	4a09      	ldr	r2, [pc, #36]	; (b41c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b3f6:	490a      	ldr	r1, [pc, #40]	; (b420 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b3f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b3fa:	6809      	ldr	r1, [r1, #0]
    b3fc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b3fe:	4909      	ldr	r1, [pc, #36]	; (b424 <arch_swap+0x30>)
	_current->arch.basepri = key;
    b400:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b402:	684b      	ldr	r3, [r1, #4]
    b404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b408:	604b      	str	r3, [r1, #4]
    b40a:	2300      	movs	r3, #0
    b40c:	f383 8811 	msr	BASEPRI, r3
    b410:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b414:	6893      	ldr	r3, [r2, #8]
}
    b416:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    b418:	4770      	bx	lr
    b41a:	bf00      	nop
    b41c:	20001ae0 	.word	0x20001ae0
    b420:	00012e98 	.word	0x00012e98
    b424:	e000ed00 	.word	0xe000ed00

0000b428 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b428:	4912      	ldr	r1, [pc, #72]	; (b474 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b42a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b42c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b430:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b432:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b436:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b43a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    b43c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b440:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b444:	4f0c      	ldr	r7, [pc, #48]	; (b478 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b446:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b44a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    b44c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b44e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b450:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    b452:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b454:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b456:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    b45a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    b45c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    b45e:	f000 fa7f 	bl	b960 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    b462:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b466:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b46a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b46e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b472:	4770      	bx	lr
    ldr r1, =_kernel
    b474:	20001ae0 	.word	0x20001ae0
    ldr v4, =_SCS_ICSR
    b478:	e000ed04 	.word	0xe000ed04

0000b47c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b47c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b480:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b482:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b486:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b48a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b48c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b490:	2902      	cmp	r1, #2
    beq _oops
    b492:	d0ff      	beq.n	b494 <_oops>

0000b494 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b494:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    b496:	f006 f924 	bl	116e2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    b49a:	bd01      	pop	{r0, pc}

0000b49c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b49c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b4a0:	9b00      	ldr	r3, [sp, #0]
    b4a2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    b4a6:	490a      	ldr	r1, [pc, #40]	; (b4d0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    b4a8:	9b01      	ldr	r3, [sp, #4]
    b4aa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b4ae:	9b02      	ldr	r3, [sp, #8]
    b4b0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    b4b4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b4b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b4bc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    b4c0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b4c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b4c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b4c8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    b4ca:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b4cc:	4770      	bx	lr
    b4ce:	bf00      	nop
    b4d0:	0001109b 	.word	0x0001109b

0000b4d4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    b4d4:	4a09      	ldr	r2, [pc, #36]	; (b4fc <z_check_thread_stack_fail+0x28>)
{
    b4d6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    b4d8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    b4da:	b170      	cbz	r0, b4fa <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    b4dc:	f113 0f16 	cmn.w	r3, #22
    b4e0:	6e80      	ldr	r0, [r0, #104]	; 0x68
    b4e2:	d005      	beq.n	b4f0 <z_check_thread_stack_fail+0x1c>
    b4e4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    b4e8:	429a      	cmp	r2, r3
    b4ea:	d805      	bhi.n	b4f8 <z_check_thread_stack_fail+0x24>
    b4ec:	4283      	cmp	r3, r0
    b4ee:	d203      	bcs.n	b4f8 <z_check_thread_stack_fail+0x24>
		return 0;
    b4f0:	4281      	cmp	r1, r0
    b4f2:	bf28      	it	cs
    b4f4:	2000      	movcs	r0, #0
    b4f6:	4770      	bx	lr
    b4f8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    b4fa:	4770      	bx	lr
    b4fc:	20001ae0 	.word	0x20001ae0

0000b500 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    b500:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b502:	4b09      	ldr	r3, [pc, #36]	; (b528 <arch_switch_to_main_thread+0x28>)
{
    b504:	460d      	mov	r5, r1
    b506:	4614      	mov	r4, r2
	_current = main_thread;
    b508:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    b50a:	f000 fa29 	bl	b960 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b50e:	4620      	mov	r0, r4
    b510:	f385 8809 	msr	PSP, r5
    b514:	2100      	movs	r1, #0
    b516:	b663      	cpsie	if
    b518:	f381 8811 	msr	BASEPRI, r1
    b51c:	f3bf 8f6f 	isb	sy
    b520:	2200      	movs	r2, #0
    b522:	2300      	movs	r3, #0
    b524:	f005 fdb9 	bl	1109a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b528:	20001ae0 	.word	0x20001ae0

0000b52c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b52c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b52e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b530:	4a0b      	ldr	r2, [pc, #44]	; (b560 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b532:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    b534:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b536:	bf1e      	ittt	ne
	movne	r1, #0
    b538:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b53a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    b53c:	f006 fe30 	blne	121a0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b540:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b542:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b546:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b54a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b54e:	4905      	ldr	r1, [pc, #20]	; (b564 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b550:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b552:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b554:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b556:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b55a:	4903      	ldr	r1, [pc, #12]	; (b568 <_isr_wrapper+0x3c>)
	bx r1
    b55c:	4708      	bx	r1
    b55e:	0000      	.short	0x0000
	ldr r2, =_kernel
    b560:	20001ae0 	.word	0x20001ae0
	ldr r1, =_sw_isr_table
    b564:	00012a7c 	.word	0x00012a7c
	ldr r1, =z_arm_int_exit
    b568:	0000b56d 	.word	0x0000b56d

0000b56c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b56c:	4b04      	ldr	r3, [pc, #16]	; (b580 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b56e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b570:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    b572:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b574:	d003      	beq.n	b57e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b576:	4903      	ldr	r1, [pc, #12]	; (b584 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b57c:	600a      	str	r2, [r1, #0]

0000b57e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b57e:	4770      	bx	lr
	ldr r3, =_kernel
    b580:	20001ae0 	.word	0x20001ae0
	ldr r1, =_SCS_ICSR
    b584:	e000ed04 	.word	0xe000ed04

0000b588 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    b588:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b58a:	4b26      	ldr	r3, [pc, #152]	; (b624 <mem_manage_fault+0x9c>)
{
    b58c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b58e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    b590:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    b596:	bf14      	ite	ne
    b598:	2411      	movne	r4, #17
    b59a:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    b59c:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b5a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    b5a2:	bf18      	it	ne
    b5a4:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b5a6:	0792      	lsls	r2, r2, #30
{
    b5a8:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b5aa:	d50a      	bpl.n	b5c2 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    b5ac:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    b5ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b5b0:	0614      	lsls	r4, r2, #24
    b5b2:	d534      	bpl.n	b61e <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    b5b4:	b119      	cbz	r1, b5be <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    b5b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b5b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b5bc:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    b5be:	2413      	movs	r4, #19
    b5c0:	e001      	b.n	b5c6 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    b5c2:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b5c6:	4b17      	ldr	r3, [pc, #92]	; (b624 <mem_manage_fault+0x9c>)
    b5c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    b5ca:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b5ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    b5d0:	bf18      	it	ne
    b5d2:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    b5d4:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b5d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    b5da:	bf18      	it	ne
    b5dc:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b5de:	06d2      	lsls	r2, r2, #27
    b5e0:	d402      	bmi.n	b5e8 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b5e4:	079b      	lsls	r3, r3, #30
    b5e6:	d50a      	bpl.n	b5fe <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    b5e8:	4b0e      	ldr	r3, [pc, #56]	; (b624 <mem_manage_fault+0x9c>)
    b5ea:	685b      	ldr	r3, [r3, #4]
    b5ec:	0519      	lsls	r1, r3, #20
    b5ee:	d506      	bpl.n	b5fe <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    b5f0:	4631      	mov	r1, r6
    b5f2:	f7ff ff6f 	bl	b4d4 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    b5f6:	b110      	cbz	r0, b5fe <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    b5f8:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    b5fc:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b5fe:	4b09      	ldr	r3, [pc, #36]	; (b624 <mem_manage_fault+0x9c>)
    b600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b602:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    b604:	bf42      	ittt	mi
    b606:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    b608:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    b60c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b60e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b610:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    b614:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    b616:	2300      	movs	r3, #0
    b618:	702b      	strb	r3, [r5, #0]

	return reason;
}
    b61a:	4620      	mov	r0, r4
    b61c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    b61e:	f06f 0015 	mvn.w	r0, #21
    b622:	e7cc      	b.n	b5be <mem_manage_fault+0x36>
    b624:	e000ed00 	.word	0xe000ed00

0000b628 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b628:	4b13      	ldr	r3, [pc, #76]	; (b678 <usage_fault.constprop.0+0x50>)
    b62a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    b62c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    b630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    b632:	bf14      	ite	ne
    b634:	201e      	movne	r0, #30
    b636:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    b638:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    b63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    b63e:	bf18      	it	ne
    b640:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    b642:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    b646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    b648:	bf18      	it	ne
    b64a:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    b64c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    b650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    b652:	bf18      	it	ne
    b654:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    b656:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    b65a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    b65c:	bf18      	it	ne
    b65e:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    b660:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b666:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    b66a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    b66e:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    b670:	bf18      	it	ne
    b672:	2024      	movne	r0, #36	; 0x24
    b674:	4770      	bx	lr
    b676:	bf00      	nop
    b678:	e000ed00 	.word	0xe000ed00

0000b67c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b67c:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b67e:	4b19      	ldr	r3, [pc, #100]	; (b6e4 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b680:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b682:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    b684:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    b686:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    b68a:	bf14      	ite	ne
    b68c:	2017      	movne	r0, #23
    b68e:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    b690:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b694:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    b696:	bf18      	it	ne
    b698:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b69a:	05a4      	lsls	r4, r4, #22
    b69c:	d509      	bpl.n	b6b2 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    b69e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    b6a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b6a2:	0400      	lsls	r0, r0, #16
    b6a4:	d504      	bpl.n	b6b0 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    b6a6:	b11a      	cbz	r2, b6b0 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    b6a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    b6ae:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    b6b0:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    b6b2:	4b0c      	ldr	r3, [pc, #48]	; (b6e4 <bus_fault.constprop.0+0x68>)
    b6b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    b6b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b6ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    b6bc:	bf18      	it	ne
    b6be:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b6c0:	05d2      	lsls	r2, r2, #23
    b6c2:	d40c      	bmi.n	b6de <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    b6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    b6c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    b6ca:	bf18      	it	ne
    b6cc:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b6ce:	4a05      	ldr	r2, [pc, #20]	; (b6e4 <bus_fault.constprop.0+0x68>)
    b6d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b6d2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    b6d6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b6d8:	2300      	movs	r3, #0
    b6da:	700b      	strb	r3, [r1, #0]
}
    b6dc:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    b6de:	201b      	movs	r0, #27
    b6e0:	e7f5      	b.n	b6ce <bus_fault.constprop.0+0x52>
    b6e2:	bf00      	nop
    b6e4:	e000ed00 	.word	0xe000ed00

0000b6e8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    b6e8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b6ea:	4b45      	ldr	r3, [pc, #276]	; (b800 <z_arm_fault+0x118>)
    b6ec:	685b      	ldr	r3, [r3, #4]
{
    b6ee:	b08a      	sub	sp, #40	; 0x28
    b6f0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b6f6:	2600      	movs	r6, #0
    b6f8:	f386 8811 	msr	BASEPRI, r6
    b6fc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    b700:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    b704:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    b708:	d111      	bne.n	b72e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    b70a:	f002 000c 	and.w	r0, r2, #12
    b70e:	2808      	cmp	r0, #8
    b710:	d00d      	beq.n	b72e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    b712:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    b714:	bf4c      	ite	mi
    b716:	460d      	movmi	r5, r1
			*nested_exc = true;
    b718:	2601      	movpl	r6, #1
	*recoverable = false;
    b71a:	2200      	movs	r2, #0
	switch (fault) {
    b71c:	3b03      	subs	r3, #3
	*recoverable = false;
    b71e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    b722:	2b03      	cmp	r3, #3
    b724:	d805      	bhi.n	b732 <z_arm_fault+0x4a>
    b726:	e8df f003 	tbb	[pc, r3]
    b72a:	5d1e      	.short	0x5d1e
    b72c:	5a61      	.short	0x5a61
		return NULL;
    b72e:	4635      	mov	r5, r6
    b730:	e7f3      	b.n	b71a <z_arm_fault+0x32>
    b732:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    b734:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b738:	b99b      	cbnz	r3, b762 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    b73a:	2220      	movs	r2, #32
    b73c:	4629      	mov	r1, r5
    b73e:	a802      	add	r0, sp, #8
    b740:	f006 f808 	bl	11754 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    b744:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b746:	2e00      	cmp	r6, #0
    b748:	d054      	beq.n	b7f4 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    b74a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    b74e:	b922      	cbnz	r2, b75a <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    b750:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    b754:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b758:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    b75a:	a902      	add	r1, sp, #8
    b75c:	4620      	mov	r0, r4
    b75e:	f005 ffbe 	bl	116de <z_arm_fatal_error>
}
    b762:	b00a      	add	sp, #40	; 0x28
    b764:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b766:	4b26      	ldr	r3, [pc, #152]	; (b800 <z_arm_fault+0x118>)
    b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b76a:	0791      	lsls	r1, r2, #30
    b76c:	d4e1      	bmi.n	b732 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b770:	2a00      	cmp	r2, #0
    b772:	dbde      	blt.n	b732 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    b774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b776:	0052      	lsls	r2, r2, #1
    b778:	d5db      	bpl.n	b732 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    b77a:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    b77c:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    b77e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b782:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    b784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b788:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    b78c:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    b78e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    b792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    b796:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    b798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b79c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    b7a0:	f64d 7202 	movw	r2, #57090	; 0xdf02
    b7a4:	4291      	cmp	r1, r2
    b7a6:	d00a      	beq.n	b7be <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    b7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b7aa:	b2d2      	uxtb	r2, r2
    b7ac:	b14a      	cbz	r2, b7c2 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    b7ae:	f10d 0207 	add.w	r2, sp, #7
    b7b2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    b7b4:	4628      	mov	r0, r5
    b7b6:	f7ff fee7 	bl	b588 <mem_manage_fault>
		reason = usage_fault(esf);
    b7ba:	4604      	mov	r4, r0
		break;
    b7bc:	e7ba      	b.n	b734 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    b7be:	682c      	ldr	r4, [r5, #0]
    b7c0:	e7b8      	b.n	b734 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    b7c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b7c4:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    b7c8:	d005      	beq.n	b7d6 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    b7ca:	f10d 0107 	add.w	r1, sp, #7
    b7ce:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    b7d0:	f7ff ff54 	bl	b67c <bus_fault.constprop.0>
    b7d4:	e7f1      	b.n	b7ba <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    b7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b7dc:	d3a9      	bcc.n	b732 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    b7de:	f7ff ff23 	bl	b628 <usage_fault.constprop.0>
    b7e2:	e7ea      	b.n	b7ba <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    b7e4:	f10d 0207 	add.w	r2, sp, #7
    b7e8:	2100      	movs	r1, #0
    b7ea:	e7e3      	b.n	b7b4 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    b7ec:	f10d 0107 	add.w	r1, sp, #7
    b7f0:	2000      	movs	r0, #0
    b7f2:	e7ed      	b.n	b7d0 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b7f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    b7f8:	f023 0301 	bic.w	r3, r3, #1
    b7fc:	e7ac      	b.n	b758 <z_arm_fault+0x70>
    b7fe:	bf00      	nop
    b800:	e000ed00 	.word	0xe000ed00

0000b804 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    b804:	4a02      	ldr	r2, [pc, #8]	; (b810 <z_arm_fault_init+0xc>)
    b806:	6953      	ldr	r3, [r2, #20]
    b808:	f043 0310 	orr.w	r3, r3, #16
    b80c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    b80e:	4770      	bx	lr
    b810:	e000ed00 	.word	0xe000ed00

0000b814 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    b814:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    b818:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    b81c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    b81e:	4672      	mov	r2, lr
	bl z_arm_fault
    b820:	f7ff ff62 	bl	b6e8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    b824:	bd01      	pop	{r0, pc}
    b826:	bf00      	nop

0000b828 <z_arm_interrupt_init>:
    b828:	4804      	ldr	r0, [pc, #16]	; (b83c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    b82a:	2300      	movs	r3, #0
    b82c:	2140      	movs	r1, #64	; 0x40
    b82e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    b830:	3301      	adds	r3, #1
    b832:	2b27      	cmp	r3, #39	; 0x27
    b834:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    b838:	d1f9      	bne.n	b82e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    b83a:	4770      	bx	lr
    b83c:	e000e100 	.word	0xe000e100

0000b840 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    b840:	2000      	movs	r0, #0
    msr CONTROL, r0
    b842:	f380 8814 	msr	CONTROL, r0
    isb
    b846:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    b84a:	f7ff fc01 	bl	b050 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    b84e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    b850:	490d      	ldr	r1, [pc, #52]	; (b888 <__start+0x48>)
    str r0, [r1]
    b852:	6008      	str	r0, [r1, #0]
    dsb
    b854:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b858:	480c      	ldr	r0, [pc, #48]	; (b88c <__start+0x4c>)
    msr msp, r0
    b85a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    b85e:	f000 f82b 	bl	b8b8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b862:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    b864:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    b868:	4809      	ldr	r0, [pc, #36]	; (b890 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    b86a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    b86e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    b870:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    b874:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    b878:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    b87a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    b87c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    b880:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    b884:	f7ff fd9a 	bl	b3bc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    b888:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b88c:	20003c80 	.word	0x20003c80
    ldr r0, =z_interrupt_stacks
    b890:	20002ec0 	.word	0x20002ec0

0000b894 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    b894:	4907      	ldr	r1, [pc, #28]	; (b8b4 <z_arm_clear_arm_mpu_config+0x20>)
    b896:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    b89a:	2300      	movs	r3, #0
	int num_regions =
    b89c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    b8a0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    b8a2:	4293      	cmp	r3, r2
    b8a4:	db00      	blt.n	b8a8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    b8a6:	4770      	bx	lr
  MPU->RNR = rnr;
    b8a8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    b8ac:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    b8b0:	3301      	adds	r3, #1
    b8b2:	e7f6      	b.n	b8a2 <z_arm_clear_arm_mpu_config+0xe>
    b8b4:	e000ed00 	.word	0xe000ed00

0000b8b8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    b8b8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    b8ba:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    b8bc:	2300      	movs	r3, #0
    b8be:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    b8c2:	f7ff ffe7 	bl	b894 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    b8c6:	4b14      	ldr	r3, [pc, #80]	; (b918 <z_arm_init_arch_hw_at_boot+0x60>)
    b8c8:	f04f 32ff 	mov.w	r2, #4294967295
    b8cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    b8d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    b8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    b8d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    b8dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    b8e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    b8e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    b8e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    b8ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    b8f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    b8f4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    b8f8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    b8fc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    b900:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    b904:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    b908:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    b90c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    b90e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b912:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    b916:	bd08      	pop	{r3, pc}
    b918:	e000e100 	.word	0xe000e100

0000b91c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    b91c:	4b08      	ldr	r3, [pc, #32]	; (b940 <z_impl_k_thread_abort+0x24>)
    b91e:	689b      	ldr	r3, [r3, #8]
    b920:	4283      	cmp	r3, r0
    b922:	d10b      	bne.n	b93c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b924:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    b928:	b143      	cbz	r3, b93c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b92a:	4b06      	ldr	r3, [pc, #24]	; (b944 <z_impl_k_thread_abort+0x28>)
    b92c:	685a      	ldr	r2, [r3, #4]
    b92e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    b932:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    b934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    b93a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    b93c:	f005 b84c 	b.w	109d8 <z_thread_abort>
    b940:	20001ae0 	.word	0x20001ae0
    b944:	e000ed00 	.word	0xe000ed00

0000b948 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    b948:	4b02      	ldr	r3, [pc, #8]	; (b954 <z_arm_configure_static_mpu_regions+0xc>)
    b94a:	4a03      	ldr	r2, [pc, #12]	; (b958 <z_arm_configure_static_mpu_regions+0x10>)
    b94c:	4803      	ldr	r0, [pc, #12]	; (b95c <z_arm_configure_static_mpu_regions+0x14>)
    b94e:	2101      	movs	r1, #1
    b950:	f000 b870 	b.w	ba34 <arm_core_mpu_configure_static_mpu_regions>
    b954:	20010000 	.word	0x20010000
    b958:	20000000 	.word	0x20000000
    b95c:	00012cc8 	.word	0x00012cc8

0000b960 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    b960:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    b962:	4b05      	ldr	r3, [pc, #20]	; (b978 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    b964:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    b966:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    b968:	4a04      	ldr	r2, [pc, #16]	; (b97c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    b96a:	2140      	movs	r1, #64	; 0x40
    b96c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    b970:	4618      	mov	r0, r3
    b972:	2101      	movs	r1, #1
    b974:	f000 b868 	b.w	ba48 <arm_core_mpu_configure_dynamic_mpu_regions>
    b978:	200018cc 	.word	0x200018cc
    b97c:	150b0000 	.word	0x150b0000

0000b980 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    b980:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    b982:	4e20      	ldr	r6, [pc, #128]	; (ba04 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    b984:	2500      	movs	r5, #0
    b986:	428d      	cmp	r5, r1
    b988:	da39      	bge.n	b9fe <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    b98a:	6844      	ldr	r4, [r0, #4]
    b98c:	b374      	cbz	r4, b9ec <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    b98e:	b153      	cbz	r3, b9a6 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    b990:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    b994:	ea14 0f0c 	tst.w	r4, ip
    b998:	d12f      	bne.n	b9fa <mpu_configure_regions+0x7a>
		&&
    b99a:	2c1f      	cmp	r4, #31
    b99c:	d92d      	bls.n	b9fa <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    b99e:	6807      	ldr	r7, [r0, #0]
		&&
    b9a0:	ea1c 0f07 	tst.w	ip, r7
    b9a4:	d129      	bne.n	b9fa <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    b9a6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    b9a8:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b9aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    b9ae:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    b9b2:	d91e      	bls.n	b9f2 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    b9b4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    b9b8:	d81d      	bhi.n	b9f6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    b9ba:	3c01      	subs	r4, #1
    b9bc:	fab4 f484 	clz	r4, r4
    b9c0:	f1c4 041f 	rsb	r4, r4, #31
    b9c4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    b9c6:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b9ca:	ea4c 0c04 	orr.w	ip, ip, r4
    b9ce:	d814      	bhi.n	b9fa <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b9d0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    b9d4:	4314      	orrs	r4, r2
    b9d6:	f044 0410 	orr.w	r4, r4, #16
    b9da:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b9de:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    b9e2:	f04c 0401 	orr.w	r4, ip, #1
    b9e6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    b9ea:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    b9ec:	3501      	adds	r5, #1
    b9ee:	300c      	adds	r0, #12
    b9f0:	e7c9      	b.n	b986 <mpu_configure_regions+0x6>
		return REGION_32B;
    b9f2:	2408      	movs	r4, #8
    b9f4:	e7e7      	b.n	b9c6 <mpu_configure_regions+0x46>
		return REGION_4G;
    b9f6:	243e      	movs	r4, #62	; 0x3e
    b9f8:	e7e5      	b.n	b9c6 <mpu_configure_regions+0x46>
			return -EINVAL;
    b9fa:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    b9fe:	4610      	mov	r0, r2
    ba00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba02:	bf00      	nop
    ba04:	e000ed00 	.word	0xe000ed00

0000ba08 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    ba08:	4b04      	ldr	r3, [pc, #16]	; (ba1c <arm_core_mpu_enable+0x14>)
    ba0a:	2205      	movs	r2, #5
    ba0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    ba10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ba14:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    ba18:	4770      	bx	lr
    ba1a:	bf00      	nop
    ba1c:	e000ed00 	.word	0xe000ed00

0000ba20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    ba20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    ba24:	4b02      	ldr	r3, [pc, #8]	; (ba30 <arm_core_mpu_disable+0x10>)
    ba26:	2200      	movs	r2, #0
    ba28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    ba2c:	4770      	bx	lr
    ba2e:	bf00      	nop
    ba30:	e000ed00 	.word	0xe000ed00

0000ba34 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    ba34:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    ba36:	4c03      	ldr	r4, [pc, #12]	; (ba44 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    ba38:	2301      	movs	r3, #1
    ba3a:	7822      	ldrb	r2, [r4, #0]
    ba3c:	f7ff ffa0 	bl	b980 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    ba40:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    ba42:	bd10      	pop	{r4, pc}
    ba44:	20001b2c 	.word	0x20001b2c

0000ba48 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    ba48:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    ba4a:	4a09      	ldr	r2, [pc, #36]	; (ba70 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    ba4c:	2300      	movs	r3, #0
    ba4e:	7812      	ldrb	r2, [r2, #0]
    ba50:	f7ff ff96 	bl	b980 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    ba54:	f110 0f16 	cmn.w	r0, #22
    ba58:	d002      	beq.n	ba60 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    ba5a:	4a06      	ldr	r2, [pc, #24]	; (ba74 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    ba5c:	2807      	cmp	r0, #7
    ba5e:	dd00      	ble.n	ba62 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    ba60:	bd08      	pop	{r3, pc}
    ba62:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    ba66:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    ba6a:	3001      	adds	r0, #1
    ba6c:	e7f6      	b.n	ba5c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    ba6e:	bf00      	nop
    ba70:	20001b2c 	.word	0x20001b2c
    ba74:	e000ed00 	.word	0xe000ed00

0000ba78 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    ba78:	4914      	ldr	r1, [pc, #80]	; (bacc <z_arm_mpu_init+0x54>)
    ba7a:	6808      	ldr	r0, [r1, #0]
    ba7c:	2808      	cmp	r0, #8
{
    ba7e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    ba80:	d821      	bhi.n	bac6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    ba82:	f7ff ffcd 	bl	ba20 <arm_core_mpu_disable>
    ba86:	4c12      	ldr	r4, [pc, #72]	; (bad0 <z_arm_mpu_init+0x58>)
    ba88:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ba8a:	2200      	movs	r2, #0
    ba8c:	4290      	cmp	r0, r2
    ba8e:	f101 010c 	add.w	r1, r1, #12
    ba92:	d105      	bne.n	baa0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    ba94:	4b0f      	ldr	r3, [pc, #60]	; (bad4 <z_arm_mpu_init+0x5c>)
    ba96:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    ba98:	f7ff ffb6 	bl	ba08 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    ba9c:	2000      	movs	r0, #0
}
    ba9e:	bd10      	pop	{r4, pc}
    baa0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    baa4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    baa8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    baac:	4313      	orrs	r3, r2
    baae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bab2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    bab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    baba:	f043 0301 	orr.w	r3, r3, #1
    babe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    bac2:	3201      	adds	r2, #1
    bac4:	e7e2      	b.n	ba8c <z_arm_mpu_init+0x14>
		return -1;
    bac6:	f04f 30ff 	mov.w	r0, #4294967295
    baca:	e7e8      	b.n	ba9e <z_arm_mpu_init+0x26>
    bacc:	00012cd4 	.word	0x00012cd4
    bad0:	e000ed00 	.word	0xe000ed00
    bad4:	20001b2c 	.word	0x20001b2c

0000bad8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    bad8:	4b01      	ldr	r3, [pc, #4]	; (bae0 <__stdout_hook_install+0x8>)
    bada:	6018      	str	r0, [r3, #0]
}
    badc:	4770      	bx	lr
    bade:	bf00      	nop
    bae0:	20000380 	.word	0x20000380

0000bae4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    bae4:	f04f 0240 	mov.w	r2, #64	; 0x40
    bae8:	f3ef 8311 	mrs	r3, BASEPRI
    baec:	f382 8812 	msr	BASEPRI_MAX, r2
    baf0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    baf4:	4a04      	ldr	r2, [pc, #16]	; (bb08 <nordicsemi_nrf52_init+0x24>)
    baf6:	2101      	movs	r1, #1
    baf8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    bafc:	f383 8811 	msr	BASEPRI, r3
    bb00:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    bb04:	2000      	movs	r0, #0
    bb06:	4770      	bx	lr
    bb08:	4001e000 	.word	0x4001e000

0000bb0c <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    bb0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bb10:	b2c0      	uxtb	r0, r0
    bb12:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    bb16:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    bb1a:	4905      	ldr	r1, [pc, #20]	; (bb30 <sys_arch_reboot+0x24>)
    bb1c:	4b05      	ldr	r3, [pc, #20]	; (bb34 <sys_arch_reboot+0x28>)
    bb1e:	68ca      	ldr	r2, [r1, #12]
    bb20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    bb24:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    bb26:	60cb      	str	r3, [r1, #12]
    bb28:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    bb2c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    bb2e:	e7fd      	b.n	bb2c <sys_arch_reboot+0x20>
    bb30:	e000ed00 	.word	0xe000ed00
    bb34:	05fa0004 	.word	0x05fa0004

0000bb38 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    bb38:	b120      	cbz	r0, bb44 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    bb3a:	4b03      	ldr	r3, [pc, #12]	; (bb48 <arch_busy_wait+0x10>)
    bb3c:	0180      	lsls	r0, r0, #6
    bb3e:	f043 0301 	orr.w	r3, r3, #1
    bb42:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    bb44:	4770      	bx	lr
    bb46:	bf00      	nop
    bb48:	00012cc0 	.word	0x00012cc0

0000bb4c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    bb4c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    bb4e:	4804      	ldr	r0, [pc, #16]	; (bb60 <xoshiro128_initialize+0x14>)
    bb50:	f006 fa7f 	bl	12052 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    bb54:	2800      	cmp	r0, #0
}
    bb56:	bf0c      	ite	eq
    bb58:	f06f 0012 	mvneq.w	r0, #18
    bb5c:	2000      	movne	r0, #0
    bb5e:	bd08      	pop	{r3, pc}
    bb60:	00012a04 	.word	0x00012a04

0000bb64 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    bb64:	b538      	push	{r3, r4, r5, lr}
    bb66:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    bb68:	4805      	ldr	r0, [pc, #20]	; (bb80 <bt_buf_get_rx+0x1c>)
    bb6a:	f005 fe89 	bl	11880 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    bb6e:	4604      	mov	r4, r0
    bb70:	b120      	cbz	r0, bb7c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    bb72:	2100      	movs	r1, #0
    bb74:	300c      	adds	r0, #12
    bb76:	f005 febd 	bl	118f4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    bb7a:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    bb7c:	4620      	mov	r0, r4
    bb7e:	bd38      	pop	{r3, r4, r5, pc}
    bb80:	20000508 	.word	0x20000508

0000bb84 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    bb84:	b570      	push	{r4, r5, r6, lr}
    bb86:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bb88:	480d      	ldr	r0, [pc, #52]	; (bbc0 <bt_buf_get_cmd_complete+0x3c>)
    bb8a:	f3bf 8f5b 	dmb	ish
    bb8e:	460b      	mov	r3, r1
    bb90:	2100      	movs	r1, #0
    bb92:	e850 4f00 	ldrex	r4, [r0]
    bb96:	e840 1500 	strex	r5, r1, [r0]
    bb9a:	2d00      	cmp	r5, #0
    bb9c:	d1f9      	bne.n	bb92 <bt_buf_get_cmd_complete+0xe>
    bb9e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    bba2:	b924      	cbnz	r4, bbae <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    bba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    bba8:	2001      	movs	r0, #1
    bbaa:	f7ff bfdb 	b.w	bb64 <bt_buf_get_rx>
    bbae:	2301      	movs	r3, #1
    bbb0:	f104 000c 	add.w	r0, r4, #12
    bbb4:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    bbb6:	8221      	strh	r1, [r4, #16]
    bbb8:	f005 fe9c 	bl	118f4 <net_buf_simple_reserve>
}
    bbbc:	4620      	mov	r0, r4
    bbbe:	bd70      	pop	{r4, r5, r6, pc}
    bbc0:	200002a0 	.word	0x200002a0

0000bbc4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    bbc4:	b570      	push	{r4, r5, r6, lr}
    bbc6:	4605      	mov	r5, r0
	switch (evt) {
    bbc8:	3d0e      	subs	r5, #14
    bbca:	2d01      	cmp	r5, #1
{
    bbcc:	460c      	mov	r4, r1
    bbce:	4610      	mov	r0, r2
    bbd0:	4619      	mov	r1, r3
	switch (evt) {
    bbd2:	d803      	bhi.n	bbdc <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    bbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    bbd8:	f7ff bfd4 	b.w	bb84 <bt_buf_get_cmd_complete>
		if (discardable) {
    bbdc:	b164      	cbz	r4, bbf8 <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
    bbde:	4809      	ldr	r0, [pc, #36]	; (bc04 <bt_buf_get_evt+0x40>)
    bbe0:	f005 fe4e 	bl	11880 <net_buf_alloc_fixed>
			if (buf) {
    bbe4:	4604      	mov	r4, r0
    bbe6:	b128      	cbz	r0, bbf4 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    bbe8:	2100      	movs	r1, #0
    bbea:	300c      	adds	r0, #12
    bbec:	f005 fe82 	bl	118f4 <net_buf_simple_reserve>
    bbf0:	2301      	movs	r3, #1
    bbf2:	7623      	strb	r3, [r4, #24]
}
    bbf4:	4620      	mov	r0, r4
    bbf6:	bd70      	pop	{r4, r5, r6, pc}
    bbf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    bbfc:	2001      	movs	r0, #1
    bbfe:	f7ff bfb1 	b.w	bb64 <bt_buf_get_rx>
    bc02:	bf00      	nop
    bc04:	200004b0 	.word	0x200004b0

0000bc08 <hci_le_meta_event>:
#endif /* CONFIG_BT_CONN */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    bc08:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    bc0a:	2101      	movs	r1, #1
    bc0c:	4604      	mov	r4, r0
    bc0e:	300c      	adds	r0, #12
    bc10:	f005 fe8b 	bl	1192a <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    bc14:	4621      	mov	r1, r4
    bc16:	4a03      	ldr	r2, [pc, #12]	; (bc24 <hci_le_meta_event+0x1c>)
    bc18:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	LOG_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    bc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    bc1e:	2301      	movs	r3, #1
    bc20:	f005 bde2 	b.w	117e8 <handle_event_common.isra.0>
    bc24:	00012d3c 	.word	0x00012d3c

0000bc28 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    bc28:	b538      	push	{r3, r4, r5, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    bc2a:	4822      	ldr	r0, [pc, #136]	; (bcb4 <rx_work_handler+0x8c>)
    bc2c:	f005 fe45 	bl	118ba <net_buf_slist_get>
	if (!buf) {
    bc30:	4604      	mov	r4, r0
    bc32:	2800      	cmp	r0, #0
    bc34:	d03c      	beq.n	bcb0 <rx_work_handler+0x88>
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    bc36:	7e03      	ldrb	r3, [r0, #24]
    bc38:	2b01      	cmp	r3, #1
    bc3a:	d12d      	bne.n	bc98 <rx_work_handler+0x70>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    bc3c:	8a03      	ldrh	r3, [r0, #16]
    bc3e:	2b01      	cmp	r3, #1
    bc40:	d80c      	bhi.n	bc5c <rx_work_handler+0x34>
    bc42:	4a1d      	ldr	r2, [pc, #116]	; (bcb8 <rx_work_handler+0x90>)
    bc44:	491d      	ldr	r1, [pc, #116]	; (bcbc <rx_work_handler+0x94>)
    bc46:	481e      	ldr	r0, [pc, #120]	; (bcc0 <rx_work_handler+0x98>)
    bc48:	f640 2347 	movw	r3, #2631	; 0xa47
    bc4c:	f005 fd39 	bl	116c2 <assert_print>
    bc50:	4040      	eors	r0, r0
    bc52:	f380 8811 	msr	BASEPRI, r0
    bc56:	f04f 0003 	mov.w	r0, #3
    bc5a:	df02      	svc	2
    bc5c:	2102      	movs	r1, #2
    bc5e:	f104 000c 	add.w	r0, r4, #12
    bc62:	f005 fe62 	bl	1192a <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    bc66:	7803      	ldrb	r3, [r0, #0]
    bc68:	3b0e      	subs	r3, #14
    bc6a:	2b01      	cmp	r3, #1
    bc6c:	4605      	mov	r5, r0
    bc6e:	d80c      	bhi.n	bc8a <rx_work_handler+0x62>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    bc70:	4a11      	ldr	r2, [pc, #68]	; (bcb8 <rx_work_handler+0x90>)
    bc72:	4914      	ldr	r1, [pc, #80]	; (bcc4 <rx_work_handler+0x9c>)
    bc74:	4812      	ldr	r0, [pc, #72]	; (bcc0 <rx_work_handler+0x98>)
    bc76:	f640 234b 	movw	r3, #2635	; 0xa4b
    bc7a:	f005 fd22 	bl	116c2 <assert_print>
    bc7e:	4040      	eors	r0, r0
    bc80:	f380 8811 	msr	BASEPRI, r0
    bc84:	f04f 0003 	mov.w	r0, #3
    bc88:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    bc8a:	7828      	ldrb	r0, [r5, #0]
    bc8c:	4a0e      	ldr	r2, [pc, #56]	; (bcc8 <rx_work_handler+0xa0>)
    bc8e:	2303      	movs	r3, #3
    bc90:	4621      	mov	r1, r4
    bc92:	f005 fda9 	bl	117e8 <handle_event_common.isra.0>
	net_buf_unref(buf);
    bc96:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    bc98:	f001 f8cc 	bl	ce34 <net_buf_unref>
	return list->head;
    bc9c:	4b0b      	ldr	r3, [pc, #44]	; (bccc <rx_work_handler+0xa4>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    bc9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    bca2:	b12b      	cbz	r3, bcb0 <rx_work_handler+0x88>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    bca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    bca8:	4909      	ldr	r1, [pc, #36]	; (bcd0 <rx_work_handler+0xa8>)
    bcaa:	480a      	ldr	r0, [pc, #40]	; (bcd4 <rx_work_handler+0xac>)
    bcac:	f006 bb59 	b.w	12362 <k_work_submit_to_queue>
}
    bcb0:	bd38      	pop	{r3, r4, r5, pc}
    bcb2:	bf00      	nop
    bcb4:	200002a4 	.word	0x200002a4
    bcb8:	0001303c 	.word	0x0001303c
    bcbc:	00013070 	.word	0x00013070
    bcc0:	00013089 	.word	0x00013089
    bcc4:	000130a6 	.word	0x000130a6
    bcc8:	00012d24 	.word	0x00012d24
    bccc:	200001a0 	.word	0x200001a0
    bcd0:	20000398 	.word	0x20000398
    bcd4:	20001400 	.word	0x20001400

0000bcd8 <hci_cmd_done>:
{
    bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcda:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    bcdc:	7a90      	ldrb	r0, [r2, #10]
{
    bcde:	460e      	mov	r6, r1
    bce0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    bce2:	f000 ffe5 	bl	ccb0 <net_buf_pool_get>
    bce6:	4b30      	ldr	r3, [pc, #192]	; (bda8 <hci_cmd_done+0xd0>)
    bce8:	4283      	cmp	r3, r0
    bcea:	d15b      	bne.n	bda4 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    bcec:	4620      	mov	r0, r4
    bcee:	f000 ffe7 	bl	ccc0 <net_buf_id>
    bcf2:	4d2e      	ldr	r5, [pc, #184]	; (bdac <hci_cmd_done+0xd4>)
    bcf4:	230c      	movs	r3, #12
    bcf6:	fb03 5000 	mla	r0, r3, r0, r5
    bcfa:	8843      	ldrh	r3, [r0, #2]
    bcfc:	42bb      	cmp	r3, r7
    bcfe:	d151      	bne.n	bda4 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    bd00:	4f2b      	ldr	r7, [pc, #172]	; (bdb0 <hci_cmd_done+0xd8>)
    bd02:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
    bd06:	b120      	cbz	r0, bd12 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    bd08:	f001 f894 	bl	ce34 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    bd0c:	2300      	movs	r3, #0
    bd0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    bd12:	4620      	mov	r0, r4
    bd14:	f000 ffd4 	bl	ccc0 <net_buf_id>
    bd18:	270c      	movs	r7, #12
    bd1a:	fb07 5000 	mla	r0, r7, r0, r5
    bd1e:	6843      	ldr	r3, [r0, #4]
    bd20:	b1e3      	cbz	r3, bd5c <hci_cmd_done+0x84>
    bd22:	b9de      	cbnz	r6, bd5c <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    bd24:	4620      	mov	r0, r4
    bd26:	f000 ffcb 	bl	ccc0 <net_buf_id>
    bd2a:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    bd2e:	2201      	movs	r2, #1
    bd30:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    bd32:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    bd36:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    bd38:	f001 071f 	and.w	r7, r1, #31
    bd3c:	40ba      	lsls	r2, r7
	if (val) {
    bd3e:	0949      	lsrs	r1, r1, #5
    bd40:	b318      	cbz	r0, bd8a <hci_cmd_done+0xb2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd42:	f3bf 8f5b 	dmb	ish
    bd46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bd4a:	e853 0f00 	ldrex	r0, [r3]
    bd4e:	4310      	orrs	r0, r2
    bd50:	e843 0100 	strex	r1, r0, [r3]
    bd54:	2900      	cmp	r1, #0
    bd56:	d1f8      	bne.n	bd4a <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bd58:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    bd5c:	4620      	mov	r0, r4
    bd5e:	f000 ffaf 	bl	ccc0 <net_buf_id>
    bd62:	270c      	movs	r7, #12
    bd64:	fb07 5000 	mla	r0, r7, r0, r5
    bd68:	6883      	ldr	r3, [r0, #8]
    bd6a:	b1db      	cbz	r3, bda4 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    bd6c:	4620      	mov	r0, r4
    bd6e:	f000 ffa7 	bl	ccc0 <net_buf_id>
    bd72:	4378      	muls	r0, r7
    bd74:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    bd76:	4620      	mov	r0, r4
    bd78:	f000 ffa2 	bl	ccc0 <net_buf_id>
    bd7c:	fb07 5500 	mla	r5, r7, r0, r5
    bd80:	68a8      	ldr	r0, [r5, #8]
}
    bd82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    bd86:	f004 b9c3 	b.w	10110 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bd8a:	43d2      	mvns	r2, r2
    bd8c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bd90:	f3bf 8f5b 	dmb	ish
    bd94:	e853 0f00 	ldrex	r0, [r3]
    bd98:	4010      	ands	r0, r2
    bd9a:	e843 0100 	strex	r1, r0, [r3]
    bd9e:	2900      	cmp	r1, #0
    bda0:	d0da      	beq.n	bd58 <hci_cmd_done+0x80>
    bda2:	e7f7      	b.n	bd94 <hci_cmd_done+0xbc>
    bda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bda6:	bf00      	nop
    bda8:	200004dc 	.word	0x200004dc
    bdac:	200018d8 	.word	0x200018d8
    bdb0:	200001a0 	.word	0x200001a0

0000bdb4 <hci_cmd_status>:
{
    bdb4:	b538      	push	{r3, r4, r5, lr}
    bdb6:	2104      	movs	r1, #4
    bdb8:	4604      	mov	r4, r0
    bdba:	300c      	adds	r0, #12
    bdbc:	f005 fdb5 	bl	1192a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    bdc0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    bdc2:	7801      	ldrb	r1, [r0, #0]
    bdc4:	8840      	ldrh	r0, [r0, #2]
    bdc6:	4622      	mov	r2, r4
    bdc8:	f7ff ff86 	bl	bcd8 <hci_cmd_done>
	if (ncmd) {
    bdcc:	b125      	cbz	r5, bdd8 <hci_cmd_status+0x24>
    bdce:	4803      	ldr	r0, [pc, #12]	; (bddc <hci_cmd_status+0x28>)
}
    bdd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bdd4:	f004 b99c 	b.w	10110 <z_impl_k_sem_give>
    bdd8:	bd38      	pop	{r3, r4, r5, pc}
    bdda:	bf00      	nop
    bddc:	20000288 	.word	0x20000288

0000bde0 <hci_cmd_complete>:
{
    bde0:	b538      	push	{r3, r4, r5, lr}
    bde2:	2103      	movs	r1, #3
    bde4:	4604      	mov	r4, r0
    bde6:	300c      	adds	r0, #12
    bde8:	f005 fd9f 	bl	1192a <net_buf_simple_pull_mem>
	status = buf->data[0];
    bdec:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    bdee:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    bdf0:	7819      	ldrb	r1, [r3, #0]
    bdf2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    bdf6:	4622      	mov	r2, r4
    bdf8:	f7ff ff6e 	bl	bcd8 <hci_cmd_done>
	if (ncmd) {
    bdfc:	b125      	cbz	r5, be08 <hci_cmd_complete+0x28>
    bdfe:	4803      	ldr	r0, [pc, #12]	; (be0c <hci_cmd_complete+0x2c>)
}
    be00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    be04:	f004 b984 	b.w	10110 <z_impl_k_sem_give>
    be08:	bd38      	pop	{r3, r4, r5, pc}
    be0a:	bf00      	nop
    be0c:	20000288 	.word	0x20000288

0000be10 <bt_hci_cmd_state_set_init>:
{
    be10:	b510      	push	{r4, lr}
	state->bit = bit;
    be12:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    be16:	f89d 3008 	ldrb.w	r3, [sp, #8]
    be1a:	720b      	strb	r3, [r1, #8]
{
    be1c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    be1e:	f000 ff4f 	bl	ccc0 <net_buf_id>
    be22:	4b03      	ldr	r3, [pc, #12]	; (be30 <bt_hci_cmd_state_set_init+0x20>)
    be24:	220c      	movs	r2, #12
    be26:	fb02 3300 	mla	r3, r2, r0, r3
    be2a:	605c      	str	r4, [r3, #4]
}
    be2c:	bd10      	pop	{r4, pc}
    be2e:	bf00      	nop
    be30:	200018d8 	.word	0x200018d8

0000be34 <bt_hci_cmd_create>:
{
    be34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    be38:	f04f 32ff 	mov.w	r2, #4294967295
    be3c:	f04f 33ff 	mov.w	r3, #4294967295
    be40:	4606      	mov	r6, r0
    be42:	4817      	ldr	r0, [pc, #92]	; (bea0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    be44:	4d17      	ldr	r5, [pc, #92]	; (bea4 <bt_hci_cmd_create+0x70>)
{
    be46:	460f      	mov	r7, r1
    be48:	f005 fd1a 	bl	11880 <net_buf_alloc_fixed>
    be4c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    be4e:	f100 0a0c 	add.w	sl, r0, #12
    be52:	2100      	movs	r1, #0
    be54:	f04f 0800 	mov.w	r8, #0
    be58:	4650      	mov	r0, sl
    be5a:	f005 fd4b 	bl	118f4 <net_buf_simple_reserve>
    be5e:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    be62:	4620      	mov	r0, r4
    be64:	f000 ff2c 	bl	ccc0 <net_buf_id>
    be68:	f04f 090c 	mov.w	r9, #12
    be6c:	fb09 5000 	mla	r0, r9, r0, r5
    be70:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    be72:	4620      	mov	r0, r4
    be74:	f000 ff24 	bl	ccc0 <net_buf_id>
    be78:	fb09 5000 	mla	r0, r9, r0, r5
    be7c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    be80:	4620      	mov	r0, r4
    be82:	f000 ff1d 	bl	ccc0 <net_buf_id>
    be86:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    be8a:	2103      	movs	r1, #3
    be8c:	4650      	mov	r0, sl
    be8e:	f8c5 8004 	str.w	r8, [r5, #4]
    be92:	f005 fd33 	bl	118fc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    be96:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    be98:	7087      	strb	r7, [r0, #2]
}
    be9a:	4620      	mov	r0, r4
    be9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bea0:	200004dc 	.word	0x200004dc
    bea4:	200018d8 	.word	0x200018d8

0000bea8 <bt_hci_cmd_send_sync>:
{
    bea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beac:	4607      	mov	r7, r0
    beae:	b086      	sub	sp, #24
    beb0:	4615      	mov	r5, r2
	if (!buf) {
    beb2:	460c      	mov	r4, r1
    beb4:	b921      	cbnz	r1, bec0 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    beb6:	f7ff ffbd 	bl	be34 <bt_hci_cmd_create>
		if (!buf) {
    beba:	4604      	mov	r4, r0
    bebc:	2800      	cmp	r0, #0
    bebe:	d04b      	beq.n	bf58 <bt_hci_cmd_send_sync+0xb0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    bec0:	2201      	movs	r2, #1
    bec2:	2100      	movs	r1, #0
    bec4:	4668      	mov	r0, sp
    bec6:	f006 fa0d 	bl	122e4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    beca:	4620      	mov	r0, r4
    becc:	f000 fef8 	bl	ccc0 <net_buf_id>
    bed0:	f8df 808c 	ldr.w	r8, [pc, #140]	; bf60 <bt_hci_cmd_send_sync+0xb8>
    bed4:	230c      	movs	r3, #12
    bed6:	fb03 8000 	mla	r0, r3, r0, r8
    beda:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    bede:	4620      	mov	r0, r4
    bee0:	f005 fd04 	bl	118ec <net_buf_ref>
    bee4:	4601      	mov	r1, r0
    bee6:	481f      	ldr	r0, [pc, #124]	; (bf64 <bt_hci_cmd_send_sync+0xbc>)
    bee8:	f005 fcfe 	bl	118e8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    beec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    bef0:	2300      	movs	r3, #0
    bef2:	4668      	mov	r0, sp
    bef4:	f004 f932 	bl	1015c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    bef8:	4606      	mov	r6, r0
    befa:	b188      	cbz	r0, bf20 <bt_hci_cmd_send_sync+0x78>
    befc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    bf00:	4a19      	ldr	r2, [pc, #100]	; (bf68 <bt_hci_cmd_send_sync+0xc0>)
    bf02:	491a      	ldr	r1, [pc, #104]	; (bf6c <bt_hci_cmd_send_sync+0xc4>)
    bf04:	481a      	ldr	r0, [pc, #104]	; (bf70 <bt_hci_cmd_send_sync+0xc8>)
    bf06:	f005 fbdc 	bl	116c2 <assert_print>
    bf0a:	481a      	ldr	r0, [pc, #104]	; (bf74 <bt_hci_cmd_send_sync+0xcc>)
    bf0c:	4632      	mov	r2, r6
    bf0e:	4639      	mov	r1, r7
    bf10:	f005 fbd7 	bl	116c2 <assert_print>
    bf14:	4040      	eors	r0, r0
    bf16:	f380 8811 	msr	BASEPRI, r0
    bf1a:	f04f 0003 	mov.w	r0, #3
    bf1e:	df02      	svc	2
	status = cmd(buf)->status;
    bf20:	4620      	mov	r0, r4
    bf22:	f000 fecd 	bl	ccc0 <net_buf_id>
    bf26:	230c      	movs	r3, #12
    bf28:	4358      	muls	r0, r3
    bf2a:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    bf2e:	b15e      	cbz	r6, bf48 <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    bf30:	4620      	mov	r0, r4
    bf32:	f000 ff7f 	bl	ce34 <net_buf_unref>
			return -ECONNREFUSED;
    bf36:	2e09      	cmp	r6, #9
    bf38:	bf14      	ite	ne
    bf3a:	f06f 0004 	mvnne.w	r0, #4
    bf3e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    bf42:	b006      	add	sp, #24
    bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    bf48:	b115      	cbz	r5, bf50 <bt_hci_cmd_send_sync+0xa8>
		*rsp = buf;
    bf4a:	602c      	str	r4, [r5, #0]
	return 0;
    bf4c:	2000      	movs	r0, #0
    bf4e:	e7f8      	b.n	bf42 <bt_hci_cmd_send_sync+0x9a>
		net_buf_unref(buf);
    bf50:	4620      	mov	r0, r4
    bf52:	f000 ff6f 	bl	ce34 <net_buf_unref>
    bf56:	e7f9      	b.n	bf4c <bt_hci_cmd_send_sync+0xa4>
			return -ENOBUFS;
    bf58:	f06f 0068 	mvn.w	r0, #104	; 0x68
    bf5c:	e7f1      	b.n	bf42 <bt_hci_cmd_send_sync+0x9a>
    bf5e:	bf00      	nop
    bf60:	200018d8 	.word	0x200018d8
    bf64:	200002ac 	.word	0x200002ac
    bf68:	0001303c 	.word	0x0001303c
    bf6c:	000130d4 	.word	0x000130d4
    bf70:	00013089 	.word	0x00013089
    bf74:	000130dd 	.word	0x000130dd

0000bf78 <hci_init>:
{
    bf78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    bf7a:	4d9b      	ldr	r5, [pc, #620]	; (c1e8 <hci_init+0x270>)
    bf7c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    bf80:	6899      	ldr	r1, [r3, #8]
    bf82:	f011 0101 	ands.w	r1, r1, #1
    bf86:	d124      	bne.n	bfd2 <hci_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    bf88:	aa01      	add	r2, sp, #4
    bf8a:	f640 4003 	movw	r0, #3075	; 0xc03
    bf8e:	f7ff ff8b 	bl	bea8 <bt_hci_cmd_send_sync>
		if (err) {
    bf92:	4604      	mov	r4, r0
    bf94:	2800      	cmp	r0, #0
    bf96:	d164      	bne.n	c062 <hci_init+0xea>
		hci_reset_complete(rsp);
    bf98:	9c01      	ldr	r4, [sp, #4]
	uint8_t status = buf->data[0];
    bf9a:	68e3      	ldr	r3, [r4, #12]
	if (status) {
    bf9c:	781b      	ldrb	r3, [r3, #0]
    bf9e:	b9ab      	cbnz	r3, bfcc <hci_init+0x54>
		bt_scan_reset();
    bfa0:	f000 fcde 	bl	c960 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bfa4:	f3bf 8f5b 	dmb	ish
    bfa8:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    bfac:	f3bf 8f5b 	dmb	ish
    bfb0:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bfb4:	f003 0309 	and.w	r3, r3, #9
    bfb8:	f3bf 8f5b 	dmb	ish
    bfbc:	e852 1f00 	ldrex	r1, [r2]
    bfc0:	e842 3000 	strex	r0, r3, [r2]
    bfc4:	2800      	cmp	r0, #0
    bfc6:	d1f9      	bne.n	bfbc <hci_init+0x44>
    bfc8:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    bfcc:	4620      	mov	r0, r4
    bfce:	f000 ff31 	bl	ce34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    bfd2:	aa01      	add	r2, sp, #4
    bfd4:	2100      	movs	r1, #0
    bfd6:	f241 0003 	movw	r0, #4099	; 0x1003
    bfda:	f7ff ff65 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    bfde:	4604      	mov	r4, r0
    bfe0:	2800      	cmp	r0, #0
    bfe2:	d13e      	bne.n	c062 <hci_init+0xea>
	read_local_features_complete(rsp);
    bfe4:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    bfe6:	4881      	ldr	r0, [pc, #516]	; (c1ec <hci_init+0x274>)
    bfe8:	68f1      	ldr	r1, [r6, #12]
    bfea:	2208      	movs	r2, #8
    bfec:	3101      	adds	r1, #1
    bfee:	f005 fbb1 	bl	11754 <memcpy>
	net_buf_unref(rsp);
    bff2:	4630      	mov	r0, r6
    bff4:	f000 ff1e 	bl	ce34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    bff8:	4621      	mov	r1, r4
    bffa:	aa01      	add	r2, sp, #4
    bffc:	f241 0001 	movw	r0, #4097	; 0x1001
    c000:	f7ff ff52 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c004:	4604      	mov	r4, r0
    c006:	bb60      	cbnz	r0, c062 <hci_init+0xea>
	read_local_ver_complete(rsp);
    c008:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c00a:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    c00c:	785a      	ldrb	r2, [r3, #1]
    c00e:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c012:	885a      	ldrh	r2, [r3, #2]
    c014:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    c018:	791a      	ldrb	r2, [r3, #4]
    c01a:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c01e:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    c022:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c026:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    c02a:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    c02e:	f000 ff01 	bl	ce34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    c032:	4621      	mov	r1, r4
    c034:	aa01      	add	r2, sp, #4
    c036:	f241 0002 	movw	r0, #4098	; 0x1002
    c03a:	f7ff ff35 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c03e:	4604      	mov	r4, r0
    c040:	b978      	cbnz	r0, c062 <hci_init+0xea>
	read_supported_commands_complete(rsp);
    c042:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    c044:	486a      	ldr	r0, [pc, #424]	; (c1f0 <hci_init+0x278>)
    c046:	68f1      	ldr	r1, [r6, #12]
    c048:	2240      	movs	r2, #64	; 0x40
    c04a:	3101      	adds	r1, #1
    c04c:	f005 fb82 	bl	11754 <memcpy>
	net_buf_unref(rsp);
    c050:	4630      	mov	r0, r6
    c052:	f000 feef 	bl	ce34 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    c056:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    c05a:	0658      	lsls	r0, r3, #25
    c05c:	d404      	bmi.n	c068 <hci_init+0xf0>
		return -ENODEV;
    c05e:	f06f 0412 	mvn.w	r4, #18
}
    c062:	4620      	mov	r0, r4
    c064:	b003      	add	sp, #12
    c066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    c068:	4621      	mov	r1, r4
    c06a:	aa01      	add	r2, sp, #4
    c06c:	f242 0003 	movw	r0, #8195	; 0x2003
    c070:	f7ff ff1a 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c074:	4604      	mov	r4, r0
    c076:	2800      	cmp	r0, #0
    c078:	d1f3      	bne.n	c062 <hci_init+0xea>
	read_le_features_complete(rsp);
    c07a:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c07c:	485d      	ldr	r0, [pc, #372]	; (c1f4 <hci_init+0x27c>)
    c07e:	68f1      	ldr	r1, [r6, #12]
    c080:	2208      	movs	r2, #8
    c082:	3101      	adds	r1, #1
    c084:	f005 fb66 	bl	11754 <memcpy>
	net_buf_unref(rsp);
    c088:	4630      	mov	r0, r6
    c08a:	f000 fed3 	bl	ce34 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c08e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    c092:	0699      	lsls	r1, r3, #26
    c094:	d418      	bmi.n	c0c8 <hci_init+0x150>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    c096:	2102      	movs	r1, #2
    c098:	f640 406d 	movw	r0, #3181	; 0xc6d
    c09c:	f7ff feca 	bl	be34 <bt_hci_cmd_create>
		if (!buf) {
    c0a0:	4606      	mov	r6, r0
    c0a2:	2800      	cmp	r0, #0
    c0a4:	f000 809c 	beq.w	c1e0 <hci_init+0x268>
    c0a8:	2102      	movs	r1, #2
    c0aa:	300c      	adds	r0, #12
    c0ac:	f005 fc26 	bl	118fc <net_buf_simple_add>
		cp_le->le = 0x01;
    c0b0:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    c0b2:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    c0b4:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    c0b6:	4622      	mov	r2, r4
    c0b8:	4631      	mov	r1, r6
    c0ba:	f640 406d 	movw	r0, #3181	; 0xc6d
    c0be:	f7ff fef3 	bl	bea8 <bt_hci_cmd_send_sync>
		if (err) {
    c0c2:	4604      	mov	r4, r0
    c0c4:	2800      	cmp	r0, #0
    c0c6:	d1cc      	bne.n	c062 <hci_init+0xea>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    c0c8:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    c0cc:	071a      	lsls	r2, r3, #28
    c0ce:	d512      	bpl.n	c0f6 <hci_init+0x17e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    c0d0:	aa01      	add	r2, sp, #4
    c0d2:	2100      	movs	r1, #0
    c0d4:	f242 001c 	movw	r0, #8220	; 0x201c
    c0d8:	f7ff fee6 	bl	bea8 <bt_hci_cmd_send_sync>
		if (err) {
    c0dc:	4604      	mov	r4, r0
    c0de:	2800      	cmp	r0, #0
    c0e0:	d1bf      	bne.n	c062 <hci_init+0xea>
		le_read_supp_states_complete(rsp);
    c0e2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c0e4:	68c3      	ldr	r3, [r0, #12]
    c0e6:	f8d3 2001 	ldr.w	r2, [r3, #1]
    c0ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    c0ee:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    c0f2:	f000 fe9f 	bl	ce34 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    c0f6:	2108      	movs	r1, #8
    c0f8:	f242 0001 	movw	r0, #8193	; 0x2001
    c0fc:	f7ff fe9a 	bl	be34 <bt_hci_cmd_create>
	if (!buf) {
    c100:	4604      	mov	r4, r0
    c102:	2800      	cmp	r0, #0
    c104:	d06c      	beq.n	c1e0 <hci_init+0x268>
    c106:	2108      	movs	r1, #8
    c108:	300c      	adds	r0, #12
    c10a:	f005 fbf7 	bl	118fc <net_buf_simple_add>
	dst[0] = val;
    c10e:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    c110:	2200      	movs	r2, #0
	dst[0] = val;
    c112:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    c114:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    c116:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    c118:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    c11a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    c11c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    c11e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    c120:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    c122:	4621      	mov	r1, r4
    c124:	f242 0001 	movw	r0, #8193	; 0x2001
    c128:	f7ff febe 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c12c:	4604      	mov	r4, r0
    c12e:	2800      	cmp	r0, #0
    c130:	d197      	bne.n	c062 <hci_init+0xea>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    c132:	2108      	movs	r1, #8
    c134:	f640 4001 	movw	r0, #3073	; 0xc01
    c138:	f7ff fe7c 	bl	be34 <bt_hci_cmd_create>
	if (!buf) {
    c13c:	4606      	mov	r6, r0
    c13e:	2800      	cmp	r0, #0
    c140:	d04e      	beq.n	c1e0 <hci_init+0x268>
    c142:	2108      	movs	r1, #8
    c144:	300c      	adds	r0, #12
    c146:	f005 fbd9 	bl	118fc <net_buf_simple_add>
    c14a:	2380      	movs	r3, #128	; 0x80
    c14c:	7043      	strb	r3, [r0, #1]
    c14e:	2320      	movs	r3, #32
	dst[0] = val;
    c150:	7004      	strb	r4, [r0, #0]
    c152:	7084      	strb	r4, [r0, #2]
    c154:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    c156:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    c158:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    c15a:	70c7      	strb	r7, [r0, #3]
    c15c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    c15e:	4622      	mov	r2, r4
    c160:	4631      	mov	r1, r6
    c162:	f640 4001 	movw	r0, #3073	; 0xc01
    c166:	f7ff fe9f 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c16a:	4604      	mov	r4, r0
    c16c:	2800      	cmp	r0, #0
    c16e:	f47f af78 	bne.w	c062 <hci_init+0xea>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    c172:	4601      	mov	r1, r0
    c174:	aa01      	add	r2, sp, #4
    c176:	f64f 4001 	movw	r0, #64513	; 0xfc01
    c17a:	f7ff fe95 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c17e:	4604      	mov	r4, r0
    c180:	bb48      	cbnz	r0, c1d6 <hci_init+0x25e>
	net_buf_unref(rsp);
    c182:	9801      	ldr	r0, [sp, #4]
    c184:	f000 fe56 	bl	ce34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    c188:	4621      	mov	r1, r4
    c18a:	aa01      	add	r2, sp, #4
    c18c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    c190:	f7ff fe8a 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c194:	4604      	mov	r4, r0
    c196:	b9f0      	cbnz	r0, c1d6 <hci_init+0x25e>
	rp.cmds = (void *)rsp->data;
    c198:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    c19a:	4817      	ldr	r0, [pc, #92]	; (c1f8 <hci_init+0x280>)
    c19c:	68f1      	ldr	r1, [r6, #12]
    c19e:	463a      	mov	r2, r7
    c1a0:	3101      	adds	r1, #1
    c1a2:	f005 fad7 	bl	11754 <memcpy>
	net_buf_unref(rsp);
    c1a6:	4630      	mov	r0, r6
    c1a8:	f000 fe44 	bl	ce34 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    c1ac:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    c1b0:	075b      	lsls	r3, r3, #29
    c1b2:	d510      	bpl.n	c1d6 <hci_init+0x25e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    c1b4:	aa01      	add	r2, sp, #4
    c1b6:	4621      	mov	r1, r4
    c1b8:	f64f 4003 	movw	r0, #64515	; 0xfc03
    c1bc:	f7ff fe74 	bl	bea8 <bt_hci_cmd_send_sync>
		if (err) {
    c1c0:	b948      	cbnz	r0, c1d6 <hci_init+0x25e>
		rp.feat = (void *)rsp->data;
    c1c2:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    c1c4:	480d      	ldr	r0, [pc, #52]	; (c1fc <hci_init+0x284>)
    c1c6:	68e1      	ldr	r1, [r4, #12]
    c1c8:	2201      	movs	r2, #1
    c1ca:	4411      	add	r1, r2
    c1cc:	f005 fac2 	bl	11754 <memcpy>
		net_buf_unref(rsp);
    c1d0:	4620      	mov	r0, r4
    c1d2:	f000 fe2f 	bl	ce34 <net_buf_unref>
}
    c1d6:	b003      	add	sp, #12
    c1d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = bt_id_init();
    c1dc:	f000 bb74 	b.w	c8c8 <bt_id_init>
		return -ENOBUFS;
    c1e0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c1e4:	e73d      	b.n	c062 <hci_init+0xea>
    c1e6:	bf00      	nop
    c1e8:	200001a0 	.word	0x200001a0
    c1ec:	20000218 	.word	0x20000218
    c1f0:	20000220 	.word	0x20000220
    c1f4:	20000278 	.word	0x20000278
    c1f8:	20000261 	.word	0x20000261
    c1fc:	20000260 	.word	0x20000260

0000c200 <bt_hci_le_rand>:
{
    c200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    c202:	4b14      	ldr	r3, [pc, #80]	; (c254 <bt_hci_le_rand+0x54>)
    c204:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    c208:	2b00      	cmp	r3, #0
{
    c20a:	4605      	mov	r5, r0
    c20c:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    c20e:	da1d      	bge.n	c24c <bt_hci_le_rand+0x4c>
	while (len > 0) {
    c210:	b914      	cbnz	r4, c218 <bt_hci_le_rand+0x18>
	return 0;
    c212:	4620      	mov	r0, r4
}
    c214:	b003      	add	sp, #12
    c216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    c218:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    c21a:	aa01      	add	r2, sp, #4
    c21c:	f04f 0100 	mov.w	r1, #0
    c220:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    c224:	4626      	mov	r6, r4
    c226:	bf28      	it	cs
    c228:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    c22a:	f7ff fe3d 	bl	bea8 <bt_hci_cmd_send_sync>
		if (err) {
    c22e:	2800      	cmp	r0, #0
    c230:	d1f0      	bne.n	c214 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    c232:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    c234:	68f9      	ldr	r1, [r7, #12]
    c236:	4632      	mov	r2, r6
    c238:	3101      	adds	r1, #1
    c23a:	4628      	mov	r0, r5
    c23c:	f005 fa8a 	bl	11754 <memcpy>
		net_buf_unref(rsp);
    c240:	4638      	mov	r0, r7
    c242:	f000 fdf7 	bl	ce34 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    c246:	4435      	add	r5, r6
		len -= count;
    c248:	1ba4      	subs	r4, r4, r6
    c24a:	e7e1      	b.n	c210 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    c24c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c250:	e7e0      	b.n	c214 <bt_hci_le_rand+0x14>
    c252:	bf00      	nop
    c254:	200001a0 	.word	0x200001a0

0000c258 <bt_send>:
	return bt_dev.drv->send(buf);
    c258:	4b02      	ldr	r3, [pc, #8]	; (c264 <bt_send+0xc>)
    c25a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c25e:	695b      	ldr	r3, [r3, #20]
    c260:	4718      	bx	r3
    c262:	bf00      	nop
    c264:	200001a0 	.word	0x200001a0

0000c268 <hci_tx_thread>:
{
    c268:	b570      	push	{r4, r5, r6, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    c26a:	4d33      	ldr	r5, [pc, #204]	; (c338 <hci_tx_thread+0xd0>)
	if (bt_dev.sent_cmd) {
    c26c:	4e33      	ldr	r6, [pc, #204]	; (c33c <hci_tx_thread+0xd4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    c26e:	68eb      	ldr	r3, [r5, #12]
    c270:	f36f 3394 	bfc	r3, #14, #7
    c274:	60eb      	str	r3, [r5, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    c276:	4830      	ldr	r0, [pc, #192]	; (c338 <hci_tx_thread+0xd0>)
    c278:	f04f 32ff 	mov.w	r2, #4294967295
    c27c:	f04f 33ff 	mov.w	r3, #4294967295
    c280:	2101      	movs	r1, #1
    c282:	f004 fe17 	bl	10eb4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    c286:	b160      	cbz	r0, c2a2 <hci_tx_thread+0x3a>
    c288:	4a2d      	ldr	r2, [pc, #180]	; (c340 <hci_tx_thread+0xd8>)
    c28a:	492e      	ldr	r1, [pc, #184]	; (c344 <hci_tx_thread+0xdc>)
    c28c:	482e      	ldr	r0, [pc, #184]	; (c348 <hci_tx_thread+0xe0>)
    c28e:	f640 23c8 	movw	r3, #2760	; 0xac8
    c292:	f005 fa16 	bl	116c2 <assert_print>
    c296:	4040      	eors	r0, r0
    c298:	f380 8811 	msr	BASEPRI, r0
    c29c:	f04f 0003 	mov.w	r0, #3
    c2a0:	df02      	svc	2
		switch (ev->state) {
    c2a2:	68eb      	ldr	r3, [r5, #12]
    c2a4:	f3c3 3386 	ubfx	r3, r3, #14, #7
    c2a8:	2b04      	cmp	r3, #4
    c2aa:	d12d      	bne.n	c308 <hci_tx_thread+0xa0>
			if (ev->tag == BT_EVENT_CMD_TX) {
    c2ac:	7b2b      	ldrb	r3, [r5, #12]
    c2ae:	bb5b      	cbnz	r3, c308 <hci_tx_thread+0xa0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    c2b0:	4826      	ldr	r0, [pc, #152]	; (c34c <hci_tx_thread+0xe4>)
    c2b2:	2200      	movs	r2, #0
    c2b4:	2300      	movs	r3, #0
    c2b6:	f005 fae8 	bl	1188a <net_buf_get>
	BT_ASSERT(buf);
    c2ba:	4604      	mov	r4, r0
    c2bc:	b368      	cbz	r0, c31a <hci_tx_thread+0xb2>
	return z_impl_k_sem_take(sem, timeout);
    c2be:	4824      	ldr	r0, [pc, #144]	; (c350 <hci_tx_thread+0xe8>)
    c2c0:	f04f 32ff 	mov.w	r2, #4294967295
    c2c4:	f04f 33ff 	mov.w	r3, #4294967295
    c2c8:	f003 ff48 	bl	1015c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    c2cc:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    c2d0:	b9e8      	cbnz	r0, c30e <hci_tx_thread+0xa6>
	bt_dev.sent_cmd = net_buf_ref(buf);
    c2d2:	4620      	mov	r0, r4
    c2d4:	f005 fb0a 	bl	118ec <net_buf_ref>
    c2d8:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
    c2dc:	4620      	mov	r0, r4
    c2de:	f7ff ffbb 	bl	c258 <bt_send>
	if (err) {
    c2e2:	b188      	cbz	r0, c308 <hci_tx_thread+0xa0>
	z_impl_k_sem_give(sem);
    c2e4:	481a      	ldr	r0, [pc, #104]	; (c350 <hci_tx_thread+0xe8>)
    c2e6:	f003 ff13 	bl	10110 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    c2ea:	4620      	mov	r0, r4
    c2ec:	f000 fce8 	bl	ccc0 <net_buf_id>
    c2f0:	4b18      	ldr	r3, [pc, #96]	; (c354 <hci_tx_thread+0xec>)
    c2f2:	220c      	movs	r2, #12
    c2f4:	fb02 3000 	mla	r0, r2, r0, r3
    c2f8:	211f      	movs	r1, #31
    c2fa:	8840      	ldrh	r0, [r0, #2]
    c2fc:	4622      	mov	r2, r4
    c2fe:	f7ff fceb 	bl	bcd8 <hci_cmd_done>
		net_buf_unref(buf);
    c302:	4620      	mov	r0, r4
    c304:	f000 fd96 	bl	ce34 <net_buf_unref>
	z_impl_k_yield();
    c308:	f004 fac4 	bl	10894 <z_impl_k_yield>
	while (1) {
    c30c:	e7af      	b.n	c26e <hci_tx_thread+0x6>
		net_buf_unref(bt_dev.sent_cmd);
    c30e:	f000 fd91 	bl	ce34 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c312:	2300      	movs	r3, #0
    c314:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    c318:	e7db      	b.n	c2d2 <hci_tx_thread+0x6a>
	BT_ASSERT(buf);
    c31a:	4a09      	ldr	r2, [pc, #36]	; (c340 <hci_tx_thread+0xd8>)
    c31c:	490e      	ldr	r1, [pc, #56]	; (c358 <hci_tx_thread+0xf0>)
    c31e:	480a      	ldr	r0, [pc, #40]	; (c348 <hci_tx_thread+0xe0>)
    c320:	f640 235a 	movw	r3, #2650	; 0xa5a
    c324:	f005 f9cd 	bl	116c2 <assert_print>
    c328:	4040      	eors	r0, r0
    c32a:	f380 8811 	msr	BASEPRI, r0
    c32e:	f04f 0003 	mov.w	r0, #3
    c332:	df02      	svc	2
    c334:	e7c3      	b.n	c2be <hci_tx_thread+0x56>
    c336:	bf00      	nop
    c338:	20000384 	.word	0x20000384
    c33c:	200001a0 	.word	0x200001a0
    c340:	0001303c 	.word	0x0001303c
    c344:	000130d4 	.word	0x000130d4
    c348:	00013089 	.word	0x00013089
    c34c:	200002ac 	.word	0x200002ac
    c350:	20000288 	.word	0x20000288
    c354:	200018d8 	.word	0x200018d8
    c358:	00013151 	.word	0x00013151

0000c35c <hci_event_prio>:
{
    c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c360:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    c362:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    c366:	4630      	mov	r0, r6
    c368:	f005 faef 	bl	1194a <net_buf_simple_headroom>
	state->len = buf->len;
    c36c:	8a27      	ldrh	r7, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c36e:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    c370:	4605      	mov	r5, r0
    c372:	d80c      	bhi.n	c38e <hci_event_prio+0x32>
    c374:	4a20      	ldr	r2, [pc, #128]	; (c3f8 <hci_event_prio+0x9c>)
    c376:	4921      	ldr	r1, [pc, #132]	; (c3fc <hci_event_prio+0xa0>)
    c378:	4821      	ldr	r0, [pc, #132]	; (c400 <hci_event_prio+0xa4>)
    c37a:	f640 636f 	movw	r3, #3695	; 0xe6f
    c37e:	f005 f9a0 	bl	116c2 <assert_print>
    c382:	4040      	eors	r0, r0
    c384:	f380 8811 	msr	BASEPRI, r0
    c388:	f04f 0003 	mov.w	r0, #3
    c38c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    c38e:	4630      	mov	r0, r6
    c390:	2102      	movs	r1, #2
    c392:	f005 faca 	bl	1192a <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    c396:	7803      	ldrb	r3, [r0, #0]
    c398:	2b05      	cmp	r3, #5
    c39a:	4606      	mov	r6, r0
    c39c:	d021      	beq.n	c3e2 <hci_event_prio+0x86>
    c39e:	3b0e      	subs	r3, #14
    c3a0:	2b01      	cmp	r3, #1
    c3a2:	d921      	bls.n	c3e8 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    c3a4:	4a14      	ldr	r2, [pc, #80]	; (c3f8 <hci_event_prio+0x9c>)
    c3a6:	4917      	ldr	r1, [pc, #92]	; (c404 <hci_event_prio+0xa8>)
    c3a8:	4815      	ldr	r0, [pc, #84]	; (c400 <hci_event_prio+0xa4>)
    c3aa:	f640 6373 	movw	r3, #3699	; 0xe73
    c3ae:	f005 f988 	bl	116c2 <assert_print>
    c3b2:	4040      	eors	r0, r0
    c3b4:	f380 8811 	msr	BASEPRI, r0
    c3b8:	f04f 0003 	mov.w	r0, #3
    c3bc:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    c3be:	f04f 0802 	mov.w	r8, #2
	err = handle_event_common(event, buf, handlers, num_handlers);
    c3c2:	4a11      	ldr	r2, [pc, #68]	; (c408 <hci_event_prio+0xac>)
    c3c4:	7830      	ldrb	r0, [r6, #0]
    c3c6:	2302      	movs	r3, #2
    c3c8:	4621      	mov	r1, r4
    c3ca:	f005 fa0d 	bl	117e8 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    c3ce:	f018 0f02 	tst.w	r8, #2
    c3d2:	d00c      	beq.n	c3ee <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
    c3d4:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    c3d6:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
    c3d8:	fa13 f585 	uxtah	r5, r3, r5
    c3dc:	60e5      	str	r5, [r4, #12]
}
    c3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    c3e2:	f04f 0803 	mov.w	r8, #3
    c3e6:	e7ec      	b.n	c3c2 <hci_event_prio+0x66>
	switch (evt) {
    c3e8:	f04f 0801 	mov.w	r8, #1
    c3ec:	e7e9      	b.n	c3c2 <hci_event_prio+0x66>
		net_buf_unref(buf);
    c3ee:	4620      	mov	r0, r4
}
    c3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    c3f4:	f000 bd1e 	b.w	ce34 <net_buf_unref>
    c3f8:	0001303c 	.word	0x0001303c
    c3fc:	00013070 	.word	0x00013070
    c400:	00013089 	.word	0x00013089
    c404:	00013109 	.word	0x00013109
    c408:	00012d14 	.word	0x00012d14

0000c40c <bt_recv>:
{
    c40c:	b510      	push	{r4, lr}
	switch (bt_buf_get_type(buf)) {
    c40e:	7e03      	ldrb	r3, [r0, #24]
    c410:	2b01      	cmp	r3, #1
{
    c412:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c414:	d115      	bne.n	c442 <bt_recv+0x36>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    c416:	68c3      	ldr	r3, [r0, #12]
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	2b05      	cmp	r3, #5
    c41c:	d006      	beq.n	c42c <bt_recv+0x20>
    c41e:	3b0e      	subs	r3, #14
    c420:	2b01      	cmp	r3, #1
    c422:	d805      	bhi.n	c430 <bt_recv+0x24>
			hci_event_prio(buf);
    c424:	f7ff ff9a 	bl	c35c <hci_event_prio>
		return 0;
    c428:	2000      	movs	r0, #0
}
    c42a:	bd10      	pop	{r4, pc}
			hci_event_prio(buf);
    c42c:	f7ff ff96 	bl	c35c <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    c430:	4621      	mov	r1, r4
    c432:	4806      	ldr	r0, [pc, #24]	; (c44c <bt_recv+0x40>)
    c434:	f005 fa2b 	bl	1188e <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c438:	4905      	ldr	r1, [pc, #20]	; (c450 <bt_recv+0x44>)
    c43a:	4806      	ldr	r0, [pc, #24]	; (c454 <bt_recv+0x48>)
    c43c:	f005 ff91 	bl	12362 <k_work_submit_to_queue>
}
    c440:	e7f2      	b.n	c428 <bt_recv+0x1c>
		net_buf_unref(buf);
    c442:	f000 fcf7 	bl	ce34 <net_buf_unref>
		return -EINVAL;
    c446:	f06f 0015 	mvn.w	r0, #21
    c44a:	e7ee      	b.n	c42a <bt_recv+0x1e>
    c44c:	200002a4 	.word	0x200002a4
    c450:	20000398 	.word	0x20000398
    c454:	20001400 	.word	0x20001400

0000c458 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    c458:	4a08      	ldr	r2, [pc, #32]	; (c47c <bt_hci_driver_register+0x24>)
{
    c45a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    c45c:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    c460:	b930      	cbnz	r0, c470 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    c462:	68d9      	ldr	r1, [r3, #12]
    c464:	b139      	cbz	r1, c476 <bt_hci_driver_register+0x1e>
    c466:	6959      	ldr	r1, [r3, #20]
    c468:	b129      	cbz	r1, c476 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    c46a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    c46e:	4770      	bx	lr
		return -EALREADY;
    c470:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c474:	4770      	bx	lr
		return -EINVAL;
    c476:	f06f 0015 	mvn.w	r0, #21
}
    c47a:	4770      	bx	lr
    c47c:	200001a0 	.word	0x200001a0

0000c480 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c480:	4b07      	ldr	r3, [pc, #28]	; (c4a0 <bt_finalize_init+0x20>)
    c482:	f3bf 8f5b 	dmb	ish
    c486:	e853 1f00 	ldrex	r1, [r3]
    c48a:	f041 0104 	orr.w	r1, r1, #4
    c48e:	e843 1200 	strex	r2, r1, [r3]
    c492:	2a00      	cmp	r2, #0
    c494:	d1f7      	bne.n	c486 <bt_finalize_init+0x6>
    c496:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
    c49a:	2000      	movs	r0, #0
    c49c:	f000 ba66 	b.w	c96c <bt_le_scan_update>
    c4a0:	20000274 	.word	0x20000274

0000c4a4 <init_work>:
{
    c4a4:	b510      	push	{r4, lr}
	err = hci_init();
    c4a6:	f7ff fd67 	bl	bf78 <hci_init>
	if (err) {
    c4aa:	4604      	mov	r4, r0
    c4ac:	b908      	cbnz	r0, c4b2 <init_work+0xe>
	bt_finalize_init();
    c4ae:	f7ff ffe7 	bl	c480 <bt_finalize_init>
	if (ready_cb) {
    c4b2:	4b04      	ldr	r3, [pc, #16]	; (c4c4 <init_work+0x20>)
    c4b4:	681b      	ldr	r3, [r3, #0]
    c4b6:	b11b      	cbz	r3, c4c0 <init_work+0x1c>
		ready_cb(err);
    c4b8:	4620      	mov	r0, r4
}
    c4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    c4be:	4718      	bx	r3
}
    c4c0:	bd10      	pop	{r4, pc}
    c4c2:	bf00      	nop
    c4c4:	200018f0 	.word	0x200018f0

0000c4c8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    c4c8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    c4ca:	4d39      	ldr	r5, [pc, #228]	; (c5b0 <bt_enable+0xe8>)
    c4cc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    c4d0:	b088      	sub	sp, #32
    c4d2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d062      	beq.n	c59e <bt_enable+0xd6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c4d8:	f3bf 8f5b 	dmb	ish
    c4dc:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    c4e0:	e853 2f00 	ldrex	r2, [r3]
    c4e4:	f022 0202 	bic.w	r2, r2, #2
    c4e8:	e843 2100 	strex	r1, r2, [r3]
    c4ec:	2900      	cmp	r1, #0
    c4ee:	d1f7      	bne.n	c4e0 <bt_enable+0x18>
    c4f0:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4f4:	f3bf 8f5b 	dmb	ish
    c4f8:	e853 4f00 	ldrex	r4, [r3]
    c4fc:	f044 0201 	orr.w	r2, r4, #1
    c500:	e843 2100 	strex	r1, r2, [r3]
    c504:	2900      	cmp	r1, #0
    c506:	d1f7      	bne.n	c4f8 <bt_enable+0x30>
    c508:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c50c:	f014 0401 	ands.w	r4, r4, #1
    c510:	d148      	bne.n	c5a4 <bt_enable+0xdc>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    c512:	4b28      	ldr	r3, [pc, #160]	; (c5b4 <bt_enable+0xec>)
    c514:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c516:	2201      	movs	r2, #1
    c518:	4611      	mov	r1, r2
    c51a:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
    c51e:	f005 fee1 	bl	122e4 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    c522:	f505 7086 	add.w	r0, r5, #268	; 0x10c
    c526:	f005 febc 	bl	122a2 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c52a:	2200      	movs	r2, #0
    c52c:	2300      	movs	r3, #0
    c52e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c532:	f06f 0308 	mvn.w	r3, #8
    c536:	e9cd 4302 	strd	r4, r3, [sp, #8]
    c53a:	e9cd 4400 	strd	r4, r4, [sp]
    c53e:	4b1e      	ldr	r3, [pc, #120]	; (c5b8 <bt_enable+0xf0>)
    c540:	491e      	ldr	r1, [pc, #120]	; (c5bc <bt_enable+0xf4>)
    c542:	9404      	str	r4, [sp, #16]
    c544:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    c548:	481d      	ldr	r0, [pc, #116]	; (c5c0 <bt_enable+0xf8>)
    c54a:	f003 fc53 	bl	fdf4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c54e:	491d      	ldr	r1, [pc, #116]	; (c5c4 <bt_enable+0xfc>)
    c550:	481b      	ldr	r0, [pc, #108]	; (c5c0 <bt_enable+0xf8>)
    c552:	f005 fe20 	bl	12196 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
    c556:	481c      	ldr	r0, [pc, #112]	; (c5c8 <bt_enable+0x100>)
    c558:	f005 ff14 	bl	12384 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    c55c:	491b      	ldr	r1, [pc, #108]	; (c5cc <bt_enable+0x104>)
    c55e:	481a      	ldr	r0, [pc, #104]	; (c5c8 <bt_enable+0x100>)
    c560:	9400      	str	r4, [sp, #0]
    c562:	f06f 0307 	mvn.w	r3, #7
    c566:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c56a:	f003 ff1b 	bl	103a4 <k_work_queue_start>
    c56e:	4918      	ldr	r1, [pc, #96]	; (c5d0 <bt_enable+0x108>)
    c570:	4815      	ldr	r0, [pc, #84]	; (c5c8 <bt_enable+0x100>)
    c572:	f005 fe10 	bl	12196 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    c576:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    c57a:	68db      	ldr	r3, [r3, #12]
    c57c:	4798      	blx	r3
	if (err) {
    c57e:	4604      	mov	r4, r0
    c580:	b928      	cbnz	r0, c58e <bt_enable+0xc6>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    c582:	b93e      	cbnz	r6, c594 <bt_enable+0xcc>
	err = hci_init();
    c584:	f7ff fcf8 	bl	bf78 <hci_init>
	if (err) {
    c588:	b978      	cbnz	r0, c5aa <bt_enable+0xe2>
	bt_finalize_init();
    c58a:	f7ff ff79 	bl	c480 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    c58e:	4620      	mov	r0, r4
    c590:	b008      	add	sp, #32
    c592:	bd70      	pop	{r4, r5, r6, pc}
	k_work_submit(&bt_dev.init);
    c594:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    c598:	f003 fefe 	bl	10398 <k_work_submit>
	return 0;
    c59c:	e7f7      	b.n	c58e <bt_enable+0xc6>
		return -ENODEV;
    c59e:	f06f 0412 	mvn.w	r4, #18
    c5a2:	e7f4      	b.n	c58e <bt_enable+0xc6>
		return -EALREADY;
    c5a4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c5a8:	e7f1      	b.n	c58e <bt_enable+0xc6>
    c5aa:	4604      	mov	r4, r0
    c5ac:	e7ef      	b.n	c58e <bt_enable+0xc6>
    c5ae:	bf00      	nop
    c5b0:	200001a0 	.word	0x200001a0
    c5b4:	200018f0 	.word	0x200018f0
    c5b8:	0000c269 	.word	0x0000c269
    c5bc:	20002000 	.word	0x20002000
    c5c0:	20001380 	.word	0x20001380
    c5c4:	00013122 	.word	0x00013122
    c5c8:	20001400 	.word	0x20001400
    c5cc:	20002640 	.word	0x20002640
    c5d0:	00013128 	.word	0x00013128

0000c5d4 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5d4:	4b04      	ldr	r3, [pc, #16]	; (c5e8 <bt_is_ready+0x14>)
    c5d6:	f3bf 8f5b 	dmb	ish
    c5da:	6818      	ldr	r0, [r3, #0]
    c5dc:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    c5e0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c5e4:	4770      	bx	lr
    c5e6:	bf00      	nop
    c5e8:	20000274 	.word	0x20000274

0000c5ec <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    c5ee:	4f0a      	ldr	r7, [pc, #40]	; (c618 <id_find+0x2c>)
{
    c5f0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    c5f2:	2500      	movs	r5, #0
    c5f4:	79fb      	ldrb	r3, [r7, #7]
    c5f6:	b2ec      	uxtb	r4, r5
    c5f8:	42a3      	cmp	r3, r4
    c5fa:	d802      	bhi.n	c602 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    c5fc:	f06f 0001 	mvn.w	r0, #1
    c600:	e009      	b.n	c616 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    c602:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    c606:	4439      	add	r1, r7
    c608:	4630      	mov	r0, r6
    c60a:	f005 f904 	bl	11816 <bt_addr_le_eq>
    c60e:	3501      	adds	r5, #1
    c610:	2800      	cmp	r0, #0
    c612:	d0ef      	beq.n	c5f4 <id_find+0x8>
    c614:	4620      	mov	r0, r4
}
    c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c618:	200001a0 	.word	0x200001a0

0000c61c <set_random_address>:
{
    c61c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    c61e:	4913      	ldr	r1, [pc, #76]	; (c66c <set_random_address+0x50>)
    c620:	2206      	movs	r2, #6
    c622:	4605      	mov	r5, r0
    c624:	f005 f886 	bl	11734 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    c628:	b1d8      	cbz	r0, c662 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    c62a:	2106      	movs	r1, #6
    c62c:	f242 0005 	movw	r0, #8197	; 0x2005
    c630:	f7ff fc00 	bl	be34 <bt_hci_cmd_create>
	if (!buf) {
    c634:	4604      	mov	r4, r0
    c636:	b1b0      	cbz	r0, c666 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c638:	2206      	movs	r2, #6
    c63a:	4629      	mov	r1, r5
    c63c:	300c      	adds	r0, #12
    c63e:	f005 f963 	bl	11908 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    c642:	2200      	movs	r2, #0
    c644:	4621      	mov	r1, r4
    c646:	f242 0005 	movw	r0, #8197	; 0x2005
    c64a:	f7ff fc2d 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c64e:	b948      	cbnz	r0, c664 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    c650:	2206      	movs	r2, #6
    c652:	4806      	ldr	r0, [pc, #24]	; (c66c <set_random_address+0x50>)
    c654:	4629      	mov	r1, r5
    c656:	f005 f87d 	bl	11754 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    c65a:	4b05      	ldr	r3, [pc, #20]	; (c670 <set_random_address+0x54>)
    c65c:	2201      	movs	r2, #1
    c65e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    c662:	2000      	movs	r0, #0
}
    c664:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    c666:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c66a:	e7fb      	b.n	c664 <set_random_address+0x48>
    c66c:	20000209 	.word	0x20000209
    c670:	200001a0 	.word	0x200001a0

0000c674 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    c674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c676:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c678:	460d      	mov	r5, r1
    c67a:	b179      	cbz	r1, c69c <id_create.constprop.0+0x28>
    c67c:	4914      	ldr	r1, [pc, #80]	; (c6d0 <id_create.constprop.0+0x5c>)
    c67e:	4628      	mov	r0, r5
    c680:	f005 f8c9 	bl	11816 <bt_addr_le_eq>
    c684:	b950      	cbnz	r0, c69c <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    c686:	4813      	ldr	r0, [pc, #76]	; (c6d4 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    c688:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c68c:	2207      	movs	r2, #7
    c68e:	4629      	mov	r1, r5
    c690:	4420      	add	r0, r4
    c692:	f005 f85f 	bl	11754 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    c696:	2000      	movs	r0, #0
}
    c698:	b003      	add	sp, #12
    c69a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    c69c:	4668      	mov	r0, sp
    c69e:	f005 f882 	bl	117a6 <bt_addr_le_create_static>
			if (err) {
    c6a2:	2800      	cmp	r0, #0
    c6a4:	d1f8      	bne.n	c698 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    c6a6:	4668      	mov	r0, sp
    c6a8:	f7ff ffa0 	bl	c5ec <id_find>
    c6ac:	2800      	cmp	r0, #0
    c6ae:	daf5      	bge.n	c69c <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    c6b0:	4b08      	ldr	r3, [pc, #32]	; (c6d4 <id_create.constprop.0+0x60>)
    c6b2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c6b6:	441c      	add	r4, r3
    c6b8:	2207      	movs	r2, #7
    c6ba:	4669      	mov	r1, sp
    c6bc:	4620      	mov	r0, r4
    c6be:	f005 f849 	bl	11754 <memcpy>
		if (addr) {
    c6c2:	2d00      	cmp	r5, #0
    c6c4:	d0e7      	beq.n	c696 <id_create.constprop.0+0x22>
    c6c6:	2207      	movs	r2, #7
    c6c8:	4621      	mov	r1, r4
    c6ca:	4628      	mov	r0, r5
    c6cc:	e7e1      	b.n	c692 <id_create.constprop.0+0x1e>
    c6ce:	bf00      	nop
    c6d0:	00013021 	.word	0x00013021
    c6d4:	200001a0 	.word	0x200001a0

0000c6d8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    c6d8:	b570      	push	{r4, r5, r6, lr}
    c6da:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c6dc:	4604      	mov	r4, r0
    c6de:	b918      	cbnz	r0, c6e8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    c6e0:	b1bd      	cbz	r5, c712 <bt_id_create+0x3a>
			return -EINVAL;
    c6e2:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    c6e6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c6e8:	491c      	ldr	r1, [pc, #112]	; (c75c <bt_id_create+0x84>)
    c6ea:	f005 f894 	bl	11816 <bt_addr_le_eq>
    c6ee:	2800      	cmp	r0, #0
    c6f0:	d1f6      	bne.n	c6e0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    c6f2:	7823      	ldrb	r3, [r4, #0]
    c6f4:	2b01      	cmp	r3, #1
    c6f6:	d1f4      	bne.n	c6e2 <bt_id_create+0xa>
    c6f8:	79a3      	ldrb	r3, [r4, #6]
    c6fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c6fe:	2bc0      	cmp	r3, #192	; 0xc0
    c700:	d1ef      	bne.n	c6e2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    c702:	4620      	mov	r0, r4
    c704:	f7ff ff72 	bl	c5ec <id_find>
    c708:	2800      	cmp	r0, #0
    c70a:	dbe9      	blt.n	c6e0 <bt_id_create+0x8>
			return -EALREADY;
    c70c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c710:	e7e9      	b.n	c6e6 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    c712:	4d13      	ldr	r5, [pc, #76]	; (c760 <bt_id_create+0x88>)
    c714:	79eb      	ldrb	r3, [r5, #7]
    c716:	2b01      	cmp	r3, #1
    c718:	d01c      	beq.n	c754 <bt_id_create+0x7c>
    c71a:	f3bf 8f5b 	dmb	ish
    c71e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    c722:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c726:	07db      	lsls	r3, r3, #31
    c728:	d50b      	bpl.n	c742 <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
    c72a:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    c72c:	4621      	mov	r1, r4
    c72e:	4630      	mov	r0, r6
    c730:	f7ff ffa0 	bl	c674 <id_create.constprop.0>
	if (err) {
    c734:	2800      	cmp	r0, #0
    c736:	d1d6      	bne.n	c6e6 <bt_id_create+0xe>
		bt_dev.id_count++;
    c738:	79eb      	ldrb	r3, [r5, #7]
    c73a:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    c73c:	4630      	mov	r0, r6
		bt_dev.id_count++;
    c73e:	71eb      	strb	r3, [r5, #7]
	return new_id;
    c740:	e7d1      	b.n	c6e6 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    c742:	2c00      	cmp	r4, #0
    c744:	d0cd      	beq.n	c6e2 <bt_id_create+0xa>
    c746:	4905      	ldr	r1, [pc, #20]	; (c75c <bt_id_create+0x84>)
    c748:	4620      	mov	r0, r4
    c74a:	f005 f864 	bl	11816 <bt_addr_le_eq>
    c74e:	2800      	cmp	r0, #0
    c750:	d0eb      	beq.n	c72a <bt_id_create+0x52>
    c752:	e7c6      	b.n	c6e2 <bt_id_create+0xa>
		return -ENOMEM;
    c754:	f06f 000b 	mvn.w	r0, #11
    c758:	e7c5      	b.n	c6e6 <bt_id_create+0xe>
    c75a:	bf00      	nop
    c75c:	00013021 	.word	0x00013021
    c760:	200001a0 	.word	0x200001a0

0000c764 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    c764:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    c766:	4604      	mov	r4, r0
    c768:	b198      	cbz	r0, c792 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    c76a:	aa01      	add	r2, sp, #4
    c76c:	2100      	movs	r1, #0
    c76e:	f241 0009 	movw	r0, #4105	; 0x1009
    c772:	f7ff fb99 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c776:	4606      	mov	r6, r0
    c778:	b958      	cbnz	r0, c792 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    c77a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    c77c:	490f      	ldr	r1, [pc, #60]	; (c7bc <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    c77e:	68dd      	ldr	r5, [r3, #12]
    c780:	3501      	adds	r5, #1
    c782:	2206      	movs	r2, #6
    c784:	4628      	mov	r0, r5
    c786:	f004 ffd5 	bl	11734 <memcmp>
    c78a:	b928      	cbnz	r0, c798 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
    c78c:	9801      	ldr	r0, [sp, #4]
    c78e:	f000 fb51 	bl	ce34 <net_buf_unref>
		return 0U;
    c792:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    c794:	b002      	add	sp, #8
    c796:	bd70      	pop	{r4, r5, r6, pc}
    c798:	4909      	ldr	r1, [pc, #36]	; (c7c0 <bt_id_read_public_addr+0x5c>)
    c79a:	2206      	movs	r2, #6
    c79c:	4628      	mov	r0, r5
    c79e:	f004 ffc9 	bl	11734 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    c7a2:	2800      	cmp	r0, #0
    c7a4:	d0f2      	beq.n	c78c <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
    c7a6:	2206      	movs	r2, #6
    c7a8:	4629      	mov	r1, r5
    c7aa:	1c60      	adds	r0, r4, #1
    c7ac:	f004 ffd2 	bl	11754 <memcpy>
	net_buf_unref(rsp);
    c7b0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    c7b2:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    c7b4:	f000 fb3e 	bl	ce34 <net_buf_unref>
	return 1U;
    c7b8:	2001      	movs	r0, #1
    c7ba:	e7eb      	b.n	c794 <bt_id_read_public_addr+0x30>
    c7bc:	0001302e 	.word	0x0001302e
    c7c0:	00013028 	.word	0x00013028

0000c7c4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    c7c4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    c7c6:	4668      	mov	r0, sp
    c7c8:	f7ff ffcc 	bl	c764 <bt_id_read_public_addr>
    c7cc:	4b04      	ldr	r3, [pc, #16]	; (c7e0 <bt_setup_public_id_addr+0x1c>)
    c7ce:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    c7d0:	b118      	cbz	r0, c7da <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    c7d2:	4669      	mov	r1, sp
    c7d4:	2000      	movs	r0, #0
    c7d6:	f7ff ff4d 	bl	c674 <id_create.constprop.0>
}
    c7da:	b003      	add	sp, #12
    c7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c7e0:	200001a0 	.word	0x200001a0

0000c7e4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    c7e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c7e8:	4b16      	ldr	r3, [pc, #88]	; (c844 <bt_read_static_addr+0x60>)
    c7ea:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    c7ee:	07db      	lsls	r3, r3, #31
{
    c7f0:	4607      	mov	r7, r0
    c7f2:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c7f4:	d404      	bmi.n	c800 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
    c7f6:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    c7f8:	4630      	mov	r0, r6
    c7fa:	b002      	add	sp, #8
    c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    c800:	aa01      	add	r2, sp, #4
    c802:	2100      	movs	r1, #0
    c804:	f64f 4009 	movw	r0, #64521	; 0xfc09
    c808:	f7ff fb4e 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    c80c:	4604      	mov	r4, r0
    c80e:	2800      	cmp	r0, #0
    c810:	d1f1      	bne.n	c7f6 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
    c812:	9b01      	ldr	r3, [sp, #4]
    c814:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    c816:	786e      	ldrb	r6, [r5, #1]
    c818:	4546      	cmp	r6, r8
    c81a:	bf28      	it	cs
    c81c:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
    c81e:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    c820:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    c824:	42a6      	cmp	r6, r4
    c826:	dc03      	bgt.n	c830 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
    c828:	9801      	ldr	r0, [sp, #4]
    c82a:	f000 fb03 	bl	ce34 <net_buf_unref>
	if (!cnt) {
    c82e:	e7e3      	b.n	c7f8 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    c830:	4629      	mov	r1, r5
    c832:	fb08 7004 	mla	r0, r8, r4, r7
    c836:	2216      	movs	r2, #22
    c838:	f004 ff8c 	bl	11754 <memcpy>
	for (i = 0; i < cnt; i++) {
    c83c:	3401      	adds	r4, #1
    c83e:	3516      	adds	r5, #22
    c840:	e7f0      	b.n	c824 <bt_read_static_addr+0x40>
    c842:	bf00      	nop
    c844:	200001a0 	.word	0x200001a0

0000c848 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    c848:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    c84a:	4e15      	ldr	r6, [pc, #84]	; (c8a0 <bt_setup_random_id_addr+0x58>)
    c84c:	79f4      	ldrb	r4, [r6, #7]
{
    c84e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    c850:	b92c      	cbnz	r4, c85e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    c852:	2101      	movs	r1, #1
    c854:	a802      	add	r0, sp, #8
    c856:	f7ff ffc5 	bl	c7e4 <bt_read_static_addr>
    c85a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    c85c:	b9c8      	cbnz	r0, c892 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    c85e:	2100      	movs	r1, #0
    c860:	4608      	mov	r0, r1
}
    c862:	b009      	add	sp, #36	; 0x24
    c864:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    c868:	f7ff bf36 	b.w	c6d8 <bt_id_create>
    c86c:	ab02      	add	r3, sp, #8
    c86e:	fb07 3105 	mla	r1, r7, r5, r3
    c872:	2206      	movs	r2, #6
    c874:	f10d 0001 	add.w	r0, sp, #1
    c878:	f004 ff6c 	bl	11754 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    c87c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    c87e:	4669      	mov	r1, sp
    c880:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    c882:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    c886:	f7ff fef5 	bl	c674 <id_create.constprop.0>
				if (err) {
    c88a:	3401      	adds	r4, #1
    c88c:	b110      	cbz	r0, c894 <bt_setup_random_id_addr+0x4c>
}
    c88e:	b009      	add	sp, #36	; 0x24
    c890:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    c892:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    c894:	79f3      	ldrb	r3, [r6, #7]
    c896:	b2e5      	uxtb	r5, r4
    c898:	42ab      	cmp	r3, r5
    c89a:	d8e7      	bhi.n	c86c <bt_setup_random_id_addr+0x24>
			return 0;
    c89c:	2000      	movs	r0, #0
    c89e:	e7f6      	b.n	c88e <bt_setup_random_id_addr+0x46>
    c8a0:	200001a0 	.word	0x200001a0

0000c8a4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    c8a4:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
    c8a6:	460c      	mov	r4, r1
    c8a8:	b149      	cbz	r1, c8be <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    c8aa:	4b06      	ldr	r3, [pc, #24]	; (c8c4 <bt_id_set_scan_own_addr+0x20>)
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    c8b0:	2000      	movs	r0, #0
    c8b2:	f004 ffbd 	bl	11830 <bt_id_set_private_addr>
			if (err) {
    c8b6:	b908      	cbnz	r0, c8bc <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    c8b8:	2301      	movs	r3, #1
    c8ba:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
    c8bc:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c8be:	f06f 0015 	mvn.w	r0, #21
    c8c2:	e7fb      	b.n	c8bc <bt_id_set_scan_own_addr+0x18>
    c8c4:	200001a0 	.word	0x200001a0

0000c8c8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    c8c8:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    c8ca:	4c0a      	ldr	r4, [pc, #40]	; (c8f4 <bt_id_init+0x2c>)
    c8cc:	79e3      	ldrb	r3, [r4, #7]
    c8ce:	b10b      	cbz	r3, c8d4 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    c8d0:	2000      	movs	r0, #0
}
    c8d2:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    c8d4:	f7ff ff76 	bl	c7c4 <bt_setup_public_id_addr>
		if (err) {
    c8d8:	2800      	cmp	r0, #0
    c8da:	d1fa      	bne.n	c8d2 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    c8dc:	79e3      	ldrb	r3, [r4, #7]
    c8de:	2b00      	cmp	r3, #0
    c8e0:	d1f6      	bne.n	c8d0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    c8e2:	f7ff ffb1 	bl	c848 <bt_setup_random_id_addr>
		if (err) {
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d1f3      	bne.n	c8d2 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    c8ea:	1c60      	adds	r0, r4, #1
}
    c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    c8f0:	f7ff be94 	b.w	c61c <set_random_address>
    c8f4:	200001a0 	.word	0x200001a0

0000c8f8 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    c8f8:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    c8fa:	2102      	movs	r1, #2
{
    c8fc:	b087      	sub	sp, #28
    c8fe:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    c900:	f242 000c 	movw	r0, #8204	; 0x200c
    c904:	f7ff fa96 	bl	be34 <bt_hci_cmd_create>
	if (!buf) {
    c908:	4605      	mov	r5, r0
    c90a:	b318      	cbz	r0, c954 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    c90c:	2102      	movs	r1, #2
    c90e:	300c      	adds	r0, #12
    c910:	f004 fff4 	bl	118fc <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    c914:	2c01      	cmp	r4, #1
    c916:	d11b      	bne.n	c950 <bt_le_scan_set_enable_legacy+0x58>
    c918:	f3bf 8f5b 	dmb	ish
    c91c:	4b0f      	ldr	r3, [pc, #60]	; (c95c <bt_le_scan_set_enable_legacy+0x64>)
    c91e:	681b      	ldr	r3, [r3, #0]
    c920:	f3bf 8f5b 	dmb	ish
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    c924:	f3c3 2340 	ubfx	r3, r3, #9, #1
    c928:	7043      	strb	r3, [r0, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    c92a:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    c92c:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    c92e:	425c      	negs	r4, r3
    c930:	415c      	adcs	r4, r3
    c932:	4a0a      	ldr	r2, [pc, #40]	; (c95c <bt_le_scan_set_enable_legacy+0x64>)
    c934:	9400      	str	r4, [sp, #0]
    c936:	a903      	add	r1, sp, #12
    c938:	4628      	mov	r0, r5
    c93a:	2306      	movs	r3, #6
    c93c:	f7ff fa68 	bl	be10 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    c940:	2200      	movs	r2, #0
    c942:	4629      	mov	r1, r5
    c944:	f242 000c 	movw	r0, #8204	; 0x200c
    c948:	f7ff faae 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    c94c:	b007      	add	sp, #28
    c94e:	bd30      	pop	{r4, r5, pc}
    c950:	2300      	movs	r3, #0
    c952:	e7e9      	b.n	c928 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    c954:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c958:	e7f8      	b.n	c94c <bt_le_scan_set_enable_legacy+0x54>
    c95a:	bf00      	nop
    c95c:	20000274 	.word	0x20000274

0000c960 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    c960:	4b01      	ldr	r3, [pc, #4]	; (c968 <bt_scan_reset+0x8>)
    c962:	2200      	movs	r2, #0
    c964:	601a      	str	r2, [r3, #0]
}
    c966:	4770      	bx	lr
    c968:	200018fc 	.word	0x200018fc

0000c96c <bt_le_scan_update>:
    c96c:	4b0a      	ldr	r3, [pc, #40]	; (c998 <bt_le_scan_update+0x2c>)
    c96e:	f3bf 8f5b 	dmb	ish
    c972:	681a      	ldr	r2, [r3, #0]
    c974:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    c978:	f3c2 10c0 	ubfx	r0, r2, #7, #1
    c97c:	0612      	lsls	r2, r2, #24
    c97e:	d408      	bmi.n	c992 <bt_le_scan_update+0x26>
    c980:	f3bf 8f5b 	dmb	ish
    c984:	681b      	ldr	r3, [r3, #0]
    c986:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    c98a:	065b      	lsls	r3, r3, #25
    c98c:	d501      	bpl.n	c992 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    c98e:	f7ff bfb3 	b.w	c8f8 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    c992:	2000      	movs	r0, #0
    c994:	4770      	bx	lr
    c996:	bf00      	nop
    c998:	20000274 	.word	0x20000274

0000c99c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    c9a0:	f100 060c 	add.w	r6, r0, #12
    c9a4:	b089      	sub	sp, #36	; 0x24
    c9a6:	4604      	mov	r4, r0
    c9a8:	4630      	mov	r0, r6
    c9aa:	f004 ffc6 	bl	1193a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    c9ae:	f8df b154 	ldr.w	fp, [pc, #340]	; cb04 <bt_hci_le_adv_report+0x168>
    c9b2:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    c9b4:	f1b8 0f00 	cmp.w	r8, #0
    c9b8:	d102      	bne.n	c9c0 <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    c9ba:	b009      	add	sp, #36	; 0x24
    c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    c9c0:	8a23      	ldrh	r3, [r4, #16]
    c9c2:	2b08      	cmp	r3, #8
    c9c4:	d9f9      	bls.n	c9ba <bt_hci_le_adv_report+0x1e>
	return net_buf_simple_pull_mem(&buf->b, len);
    c9c6:	2109      	movs	r1, #9
    c9c8:	4630      	mov	r0, r6
    c9ca:	f004 ffae 	bl	1192a <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
    c9ce:	7a03      	ldrb	r3, [r0, #8]
    c9d0:	8a22      	ldrh	r2, [r4, #16]
    c9d2:	3301      	adds	r3, #1
    c9d4:	429a      	cmp	r2, r3
    c9d6:	4605      	mov	r5, r0
    c9d8:	d3ef      	bcc.n	c9ba <bt_hci_le_adv_report+0x1e>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    c9da:	2301      	movs	r3, #1
    c9dc:	f8ad 301c 	strh.w	r3, [sp, #28]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    c9e0:	237f      	movs	r3, #127	; 0x7f
    c9e2:	f88d 3016 	strb.w	r3, [sp, #22]
		adv_info.rssi = evt->data[evt->length];
    c9e6:	7a03      	ldrb	r3, [r0, #8]
    c9e8:	4403      	add	r3, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    c9ea:	1c47      	adds	r7, r0, #1
		adv_info.rssi = evt->data[evt->length];
    c9ec:	7a5b      	ldrb	r3, [r3, #9]
    c9ee:	f88d 3015 	strb.w	r3, [sp, #21]
		adv_info.sid = BT_GAP_SID_INVALID;
    c9f2:	23ff      	movs	r3, #255	; 0xff
    c9f4:	f88d 3014 	strb.w	r3, [sp, #20]
		adv_info.interval = 0U;
    c9f8:	2300      	movs	r3, #0
    c9fa:	f8ad 301a 	strh.w	r3, [sp, #26]
		adv_info.adv_type = evt->evt_type;
    c9fe:	7802      	ldrb	r2, [r0, #0]
    ca00:	f88d 2017 	strb.w	r2, [sp, #23]
	switch (evt_type) {
    ca04:	2a04      	cmp	r2, #4
    ca06:	bf9c      	itt	ls
    ca08:	4b3f      	ldrls	r3, [pc, #252]	; (cb08 <bt_hci_le_adv_report+0x16c>)
    ca0a:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    ca0c:	f8ad 3018 	strh.w	r3, [sp, #24]
    ca10:	4b3e      	ldr	r3, [pc, #248]	; (cb0c <bt_hci_le_adv_report+0x170>)
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    ca12:	f890 a008 	ldrb.w	sl, [r0, #8]
    ca16:	f3bf 8f5b 	dmb	ish
    ca1a:	681b      	ldr	r3, [r3, #0]
    ca1c:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ca20:	061a      	lsls	r2, r3, #24
    ca22:	d503      	bpl.n	ca2c <bt_hci_le_adv_report+0x90>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    ca24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    ca28:	075b      	lsls	r3, r3, #29
    ca2a:	d460      	bmi.n	caee <bt_hci_le_adv_report+0x152>
	if (bt_addr_le_is_resolved(addr)) {
    ca2c:	4638      	mov	r0, r7
    ca2e:	f004 fed2 	bl	117d6 <bt_addr_le_is_resolved>
    ca32:	2800      	cmp	r0, #0
    ca34:	d048      	beq.n	cac8 <bt_hci_le_adv_report+0x12c>
		bt_addr_le_copy_resolved(&id_addr, addr);
    ca36:	4639      	mov	r1, r7
    ca38:	a802      	add	r0, sp, #8
    ca3a:	f004 fec2 	bl	117c2 <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
    ca3e:	f8db 3000 	ldr.w	r3, [fp]
    ca42:	b1a3      	cbz	r3, ca6e <bt_hci_le_adv_report+0xd2>
	state->offset = net_buf_simple_headroom(buf);
    ca44:	4630      	mov	r0, r6
    ca46:	f004 ff80 	bl	1194a <net_buf_simple_headroom>
	state->len = buf->len;
    ca4a:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    ca4c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ca50:	f99d 1015 	ldrsb.w	r1, [sp, #21]
    ca54:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    ca58:	f8a4 a010 	strh.w	sl, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    ca5c:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    ca5e:	4633      	mov	r3, r6
    ca60:	a802      	add	r0, sp, #8
    ca62:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    ca64:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    ca66:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
    ca68:	fa13 f389 	uxtah	r3, r3, r9
    ca6c:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
    ca6e:	ab02      	add	r3, sp, #8
    ca70:	9304      	str	r3, [sp, #16]
    ca72:	4b27      	ldr	r3, [pc, #156]	; (cb10 <bt_hci_le_adv_report+0x174>)
    ca74:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ca76:	2b00      	cmp	r3, #0
    ca78:	d037      	beq.n	caea <bt_hci_le_adv_report+0x14e>
	return node->next;
    ca7a:	681a      	ldr	r2, [r3, #0]
    ca7c:	b102      	cbz	r2, ca80 <bt_hci_le_adv_report+0xe4>
    ca7e:	3a08      	subs	r2, #8
		if (listener->recv) {
    ca80:	f853 1c08 	ldr.w	r1, [r3, #-8]
    ca84:	b1b9      	cbz	r1, cab6 <bt_hci_le_adv_report+0x11a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ca86:	4617      	mov	r7, r2
    ca88:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
    ca8c:	4630      	mov	r0, r6
    ca8e:	9201      	str	r2, [sp, #4]
    ca90:	f004 ff5b 	bl	1194a <net_buf_simple_headroom>
			listener->recv(info, buf);
    ca94:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    ca96:	8a23      	ldrh	r3, [r4, #16]
			buf->len = len;
    ca98:	f8a4 a010 	strh.w	sl, [r4, #16]
			listener->recv(info, buf);
    ca9c:	6812      	ldr	r2, [r2, #0]
    ca9e:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    caa0:	4681      	mov	r9, r0
    caa2:	4631      	mov	r1, r6
    caa4:	a804      	add	r0, sp, #16
    caa6:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    caa8:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
    caaa:	9b00      	ldr	r3, [sp, #0]
    caac:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
    caae:	fa12 f289 	uxtah	r2, r2, r9
    cab2:	60e2      	str	r2, [r4, #12]
}
    cab4:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    cab6:	b1c2      	cbz	r2, caea <bt_hci_le_adv_report+0x14e>
    cab8:	6897      	ldr	r7, [r2, #8]
    caba:	6813      	ldr	r3, [r2, #0]
    cabc:	b19f      	cbz	r7, cae6 <bt_hci_le_adv_report+0x14a>
    cabe:	3f08      	subs	r7, #8
		if (listener->recv) {
    cac0:	2b00      	cmp	r3, #0
    cac2:	d1e3      	bne.n	ca8c <bt_hci_le_adv_report+0xf0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    cac4:	463a      	mov	r2, r7
    cac6:	e7f7      	b.n	cab8 <bt_hci_le_adv_report+0x11c>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    cac8:	786b      	ldrb	r3, [r5, #1]
    caca:	2bff      	cmp	r3, #255	; 0xff
    cacc:	d105      	bne.n	cada <bt_hci_le_adv_report+0x13e>
	memcpy(dst, src, sizeof(*dst));
    cace:	4911      	ldr	r1, [pc, #68]	; (cb14 <bt_hci_le_adv_report+0x178>)
    cad0:	2207      	movs	r2, #7
    cad2:	a802      	add	r0, sp, #8
    cad4:	f004 fe3e 	bl	11754 <memcpy>
}
    cad8:	e7b1      	b.n	ca3e <bt_hci_le_adv_report+0xa2>
		bt_addr_le_copy(&id_addr,
    cada:	4639      	mov	r1, r7
    cadc:	f004 fea3 	bl	11826 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    cae0:	2207      	movs	r2, #7
    cae2:	4601      	mov	r1, r0
    cae4:	e7f5      	b.n	cad2 <bt_hci_le_adv_report+0x136>
		if (listener->recv) {
    cae6:	2b00      	cmp	r3, #0
    cae8:	d1d0      	bne.n	ca8c <bt_hci_le_adv_report+0xf0>
	info->addr = NULL;
    caea:	2300      	movs	r3, #0
    caec:	9304      	str	r3, [sp, #16]
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    caee:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    caf0:	4630      	mov	r0, r6
    caf2:	3101      	adds	r1, #1
    caf4:	f108 38ff 	add.w	r8, r8, #4294967295
    caf8:	f004 ff0f 	bl	1191a <net_buf_simple_pull>
    cafc:	fa5f f888 	uxtb.w	r8, r8
    cb00:	e758      	b.n	c9b4 <bt_hci_le_adv_report+0x18>
    cb02:	bf00      	nop
    cb04:	200018fc 	.word	0x200018fc
    cb08:	00013140 	.word	0x00013140
    cb0c:	20000274 	.word	0x20000274
    cb10:	200018f4 	.word	0x200018f4
    cb14:	00013021 	.word	0x00013021

0000cb18 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    cb18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    cb1c:	4e62      	ldr	r6, [pc, #392]	; (cca8 <bt_le_scan_start+0x190>)
    cb1e:	f3bf 8f5b 	dmb	ish
    cb22:	6833      	ldr	r3, [r6, #0]
    cb24:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cb28:	f013 0f04 	tst.w	r3, #4
{
    cb2c:	4605      	mov	r5, r0
    cb2e:	460f      	mov	r7, r1
    cb30:	4634      	mov	r4, r6
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cb32:	f000 80b5 	beq.w	cca0 <bt_le_scan_start+0x188>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    cb36:	7802      	ldrb	r2, [r0, #0]
    cb38:	2a01      	cmp	r2, #1
    cb3a:	d905      	bls.n	cb48 <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    cb3c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    cb40:	4620      	mov	r0, r4
    cb42:	b003      	add	sp, #12
    cb44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    cb48:	6843      	ldr	r3, [r0, #4]
    cb4a:	2b0f      	cmp	r3, #15
    cb4c:	d8f6      	bhi.n	cb3c <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    cb4e:	8900      	ldrh	r0, [r0, #8]
    cb50:	1f03      	subs	r3, r0, #4
    cb52:	b29b      	uxth	r3, r3
    cb54:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    cb58:	4563      	cmp	r3, ip
    cb5a:	d8ef      	bhi.n	cb3c <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
    cb5c:	8969      	ldrh	r1, [r5, #10]
    cb5e:	1f0b      	subs	r3, r1, #4
    cb60:	b29b      	uxth	r3, r3
    cb62:	4563      	cmp	r3, ip
    cb64:	d8ea      	bhi.n	cb3c <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
    cb66:	4288      	cmp	r0, r1
    cb68:	d3e8      	bcc.n	cb3c <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    cb6a:	b98a      	cbnz	r2, cb90 <bt_le_scan_start+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb6c:	f3bf 8f5b 	dmb	ish
    cb70:	e854 0f00 	ldrex	r0, [r4]
    cb74:	f040 0380 	orr.w	r3, r0, #128	; 0x80
    cb78:	e844 3200 	strex	r2, r3, [r4]
    cb7c:	2a00      	cmp	r2, #0
    cb7e:	d1f7      	bne.n	cb70 <bt_le_scan_start+0x58>
    cb80:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    cb84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    cb88:	d007      	beq.n	cb9a <bt_le_scan_start+0x82>
		return -EALREADY;
    cb8a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    cb8e:	e7d7      	b.n	cb40 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
    cb90:	f004 fe64 	bl	1185c <bt_id_scan_random_addr_check>
    cb94:	2800      	cmp	r0, #0
    cb96:	d1e9      	bne.n	cb6c <bt_le_scan_start+0x54>
    cb98:	e7d0      	b.n	cb3c <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb9a:	f3bf 8f5b 	dmb	ish
    cb9e:	6833      	ldr	r3, [r6, #0]
    cba0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    cba4:	0659      	lsls	r1, r3, #25
    cba6:	d509      	bpl.n	cbbc <bt_le_scan_start+0xa4>
	return bt_le_scan_set_enable_legacy(enable);
    cba8:	f7ff fea6 	bl	c8f8 <bt_le_scan_set_enable_legacy>
		if (err) {
    cbac:	4604      	mov	r4, r0
    cbae:	b128      	cbz	r0, cbbc <bt_le_scan_start+0xa4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cbb0:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cbb4:	483c      	ldr	r0, [pc, #240]	; (cca8 <bt_le_scan_start+0x190>)
    cbb6:	f004 fe53 	bl	11860 <atomic_and>
		return err;
    cbba:	e7c1      	b.n	cb40 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    cbbc:	686b      	ldr	r3, [r5, #4]
	if (val) {
    cbbe:	07da      	lsls	r2, r3, #31
    cbc0:	d515      	bpl.n	cbee <bt_le_scan_start+0xd6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cbc2:	f3bf 8f5b 	dmb	ish
    cbc6:	e856 3f00 	ldrex	r3, [r6]
    cbca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cbce:	e846 3200 	strex	r2, r3, [r6]
    cbd2:	2a00      	cmp	r2, #0
    cbd4:	d1f7      	bne.n	cbc6 <bt_le_scan_start+0xae>
    cbd6:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    cbda:	89ac      	ldrh	r4, [r5, #12]
    cbdc:	b16c      	cbz	r4, cbfa <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cbde:	4832      	ldr	r0, [pc, #200]	; (cca8 <bt_le_scan_start+0x190>)
    cbe0:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cbe4:	f004 fe3c 	bl	11860 <atomic_and>
			return -ENOTSUP;
    cbe8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    cbec:	e7a8      	b.n	cb40 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cbee:	f46f 7100 	mvn.w	r1, #512	; 0x200
    cbf2:	482d      	ldr	r0, [pc, #180]	; (cca8 <bt_le_scan_start+0x190>)
    cbf4:	f004 fe34 	bl	11860 <atomic_and>
    cbf8:	e7ef      	b.n	cbda <bt_le_scan_start+0xc2>
		err = start_le_scan_legacy(param->type, param->interval,
    cbfa:	f895 8000 	ldrb.w	r8, [r5]
    cbfe:	f8b5 9008 	ldrh.w	r9, [r5, #8]
					   param->window);
    cc02:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    cc04:	4621      	mov	r1, r4
    cc06:	2207      	movs	r2, #7
    cc08:	4668      	mov	r0, sp
    cc0a:	f004 fdae 	bl	1176a <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    cc0e:	f108 33ff 	add.w	r3, r8, #4294967295
    cc12:	4258      	negs	r0, r3
    cc14:	f10d 0105 	add.w	r1, sp, #5
    cc18:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    cc1a:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    cc1e:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    cc22:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    cc26:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    cc2a:	f7ff fe3b 	bl	c8a4 <bt_id_set_scan_own_addr>
	if (err) {
    cc2e:	4604      	mov	r4, r0
    cc30:	2800      	cmp	r0, #0
    cc32:	d1bd      	bne.n	cbb0 <bt_le_scan_start+0x98>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    cc34:	2107      	movs	r1, #7
    cc36:	f242 000b 	movw	r0, #8203	; 0x200b
    cc3a:	f7ff f8fb 	bl	be34 <bt_hci_cmd_create>
	if (!buf) {
    cc3e:	4605      	mov	r5, r0
    cc40:	b358      	cbz	r0, cc9a <bt_le_scan_start+0x182>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    cc42:	2207      	movs	r2, #7
    cc44:	4669      	mov	r1, sp
    cc46:	300c      	adds	r0, #12
    cc48:	f004 fe5e 	bl	11908 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    cc4c:	4622      	mov	r2, r4
    cc4e:	4629      	mov	r1, r5
    cc50:	f242 000b 	movw	r0, #8203	; 0x200b
    cc54:	f7ff f928 	bl	bea8 <bt_hci_cmd_send_sync>
	if (err) {
    cc58:	4604      	mov	r4, r0
    cc5a:	2800      	cmp	r0, #0
    cc5c:	d1a8      	bne.n	cbb0 <bt_le_scan_start+0x98>
	return bt_le_scan_set_enable_legacy(enable);
    cc5e:	2001      	movs	r0, #1
    cc60:	f7ff fe4a 	bl	c8f8 <bt_le_scan_set_enable_legacy>
	if (err) {
    cc64:	4604      	mov	r4, r0
    cc66:	2800      	cmp	r0, #0
    cc68:	d1a2      	bne.n	cbb0 <bt_le_scan_start+0x98>
	if (val) {
    cc6a:	f1b8 0f01 	cmp.w	r8, #1
    cc6e:	d10e      	bne.n	cc8e <bt_le_scan_start+0x176>
    cc70:	f3bf 8f5b 	dmb	ish
    cc74:	e856 3f00 	ldrex	r3, [r6]
    cc78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cc7c:	e846 3200 	strex	r2, r3, [r6]
    cc80:	2a00      	cmp	r2, #0
    cc82:	d1f7      	bne.n	cc74 <bt_le_scan_start+0x15c>
    cc84:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    cc88:	4b08      	ldr	r3, [pc, #32]	; (ccac <bt_le_scan_start+0x194>)
    cc8a:	601f      	str	r7, [r3, #0]
	return 0;
    cc8c:	e758      	b.n	cb40 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cc8e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    cc92:	4805      	ldr	r0, [pc, #20]	; (cca8 <bt_le_scan_start+0x190>)
    cc94:	f004 fde4 	bl	11860 <atomic_and>
	if (err) {
    cc98:	e7f6      	b.n	cc88 <bt_le_scan_start+0x170>
		return -ENOBUFS;
    cc9a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    cc9e:	e787      	b.n	cbb0 <bt_le_scan_start+0x98>
		return -EAGAIN;
    cca0:	f06f 040a 	mvn.w	r4, #10
    cca4:	e74c      	b.n	cb40 <bt_le_scan_start+0x28>
    cca6:	bf00      	nop
    cca8:	20000274 	.word	0x20000274
    ccac:	200018fc 	.word	0x200018fc

0000ccb0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    ccb0:	4b02      	ldr	r3, [pc, #8]	; (ccbc <net_buf_pool_get+0xc>)
    ccb2:	222c      	movs	r2, #44	; 0x2c
    ccb4:	fb02 3000 	mla	r0, r2, r0, r3
    ccb8:	4770      	bx	lr
    ccba:	bf00      	nop
    ccbc:	200004b0 	.word	0x200004b0

0000ccc0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ccc0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    ccc2:	4b06      	ldr	r3, [pc, #24]	; (ccdc <net_buf_id+0x1c>)
    ccc4:	212c      	movs	r1, #44	; 0x2c
    ccc6:	fb01 3302 	mla	r3, r1, r2, r3
    ccca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    cccc:	7f1b      	ldrb	r3, [r3, #28]
    ccce:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    ccd0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ccd2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    ccd6:	fbb0 f0f3 	udiv	r0, r0, r3
    ccda:	4770      	bx	lr
    ccdc:	200004b0 	.word	0x200004b0

0000cce0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    cce0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    cce2:	4b0a      	ldr	r3, [pc, #40]	; (cd0c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    cce4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    cce6:	242c      	movs	r4, #44	; 0x2c
    cce8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    ccec:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ccf0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    ccf2:	681a      	ldr	r2, [r3, #0]
    ccf4:	4294      	cmp	r4, r2
    ccf6:	bf94      	ite	ls
    ccf8:	600c      	strls	r4, [r1, #0]
    ccfa:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    ccfc:	e9d3 5400 	ldrd	r5, r4, [r3]
    cd00:	f7ff ffde 	bl	ccc0 <net_buf_id>
}
    cd04:	fb05 4000 	mla	r0, r5, r0, r4
    cd08:	bd38      	pop	{r3, r4, r5, pc}
    cd0a:	bf00      	nop
    cd0c:	200004b0 	.word	0x200004b0

0000cd10 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    cd10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd14:	4605      	mov	r5, r0
    cd16:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    cd18:	4610      	mov	r0, r2
    cd1a:	4619      	mov	r1, r3
{
    cd1c:	4691      	mov	r9, r2
    cd1e:	4698      	mov	r8, r3
    cd20:	4617      	mov	r7, r2
    cd22:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    cd24:	f005 fc83 	bl	1262e <sys_clock_timeout_end_calc>
    cd28:	4682      	mov	sl, r0
    cd2a:	468b      	mov	fp, r1
	__asm__ volatile(
    cd2c:	f04f 0340 	mov.w	r3, #64	; 0x40
    cd30:	f3ef 8111 	mrs	r1, BASEPRI
    cd34:	f383 8812 	msr	BASEPRI_MAX, r3
    cd38:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    cd3c:	8b6b      	ldrh	r3, [r5, #26]
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d058      	beq.n	cdf4 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    cd42:	8b2a      	ldrh	r2, [r5, #24]
    cd44:	429a      	cmp	r2, r3
    cd46:	d93c      	bls.n	cdc2 <net_buf_alloc_len+0xb2>
    cd48:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    cd4a:	2200      	movs	r2, #0
    cd4c:	2300      	movs	r3, #0
    cd4e:	4628      	mov	r0, r5
    cd50:	f003 f9aa 	bl	100a8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    cd54:	9900      	ldr	r1, [sp, #0]
    cd56:	4604      	mov	r4, r0
    cd58:	2800      	cmp	r0, #0
    cd5a:	d032      	beq.n	cdc2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
    cd5c:	f381 8811 	msr	BASEPRI, r1
    cd60:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    cd64:	9b01      	ldr	r3, [sp, #4]
    cd66:	2b00      	cmp	r3, #0
    cd68:	d055      	beq.n	ce16 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    cd6a:	ea58 0309 	orrs.w	r3, r8, r9
    cd6e:	d00f      	beq.n	cd90 <net_buf_alloc_len+0x80>
    cd70:	f1b8 3fff 	cmp.w	r8, #4294967295
    cd74:	bf08      	it	eq
    cd76:	f1b9 3fff 	cmpeq.w	r9, #4294967295
    cd7a:	d009      	beq.n	cd90 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    cd7c:	f003 ffde 	bl	10d3c <sys_clock_tick_get>
    cd80:	ebba 0700 	subs.w	r7, sl, r0
    cd84:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    cd88:	2e00      	cmp	r6, #0
    cd8a:	bfbc      	itt	lt
    cd8c:	2700      	movlt	r7, #0
    cd8e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    cd90:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
    cd92:	4d26      	ldr	r5, [pc, #152]	; (ce2c <net_buf_alloc_len+0x11c>)
    cd94:	f04f 082c 	mov.w	r8, #44	; 0x2c
    cd98:	fb08 5303 	mla	r3, r8, r3, r5
    cd9c:	463a      	mov	r2, r7
    cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cda0:	681b      	ldr	r3, [r3, #0]
    cda2:	a901      	add	r1, sp, #4
    cda4:	f8d3 9000 	ldr.w	r9, [r3]
    cda8:	4620      	mov	r0, r4
    cdaa:	4633      	mov	r3, r6
    cdac:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    cdae:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
    cdb0:	2800      	cmp	r0, #0
    cdb2:	d131      	bne.n	ce18 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
    cdb4:	7aa0      	ldrb	r0, [r4, #10]
    cdb6:	4621      	mov	r1, r4
    cdb8:	fb00 5008 	mla	r0, r0, r8, r5
    cdbc:	f005 fa88 	bl	122d0 <k_queue_prepend>
}
    cdc0:	e024      	b.n	ce0c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
    cdc2:	8b68      	ldrh	r0, [r5, #26]
    cdc4:	1e43      	subs	r3, r0, #1
    cdc6:	836b      	strh	r3, [r5, #26]
    cdc8:	f381 8811 	msr	BASEPRI, r1
    cdcc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    cdd0:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    cdd2:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    cdd4:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    cdd6:	331b      	adds	r3, #27
    cdd8:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    cddc:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    cdde:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    cde2:	4b12      	ldr	r3, [pc, #72]	; (ce2c <net_buf_alloc_len+0x11c>)
    cde4:	4a12      	ldr	r2, [pc, #72]	; (ce30 <net_buf_alloc_len+0x120>)
    cde6:	1aeb      	subs	r3, r5, r3
    cde8:	109b      	asrs	r3, r3, #2
    cdea:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    cdec:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
    cdee:	7f2b      	ldrb	r3, [r5, #28]
    cdf0:	72e3      	strb	r3, [r4, #11]
		goto success;
    cdf2:	e7b7      	b.n	cd64 <net_buf_alloc_len+0x54>
    cdf4:	f381 8811 	msr	BASEPRI, r1
    cdf8:	f3bf 8f6f 	isb	sy
    cdfc:	464a      	mov	r2, r9
    cdfe:	4643      	mov	r3, r8
    ce00:	4628      	mov	r0, r5
    ce02:	f003 f951 	bl	100a8 <z_impl_k_queue_get>
	if (!buf) {
    ce06:	4604      	mov	r4, r0
    ce08:	2800      	cmp	r0, #0
    ce0a:	d1ab      	bne.n	cd64 <net_buf_alloc_len+0x54>
		return NULL;
    ce0c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    ce0e:	4620      	mov	r0, r4
    ce10:	b003      	add	sp, #12
    ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    ce16:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
    ce18:	2300      	movs	r3, #0
	buf->ref   = 1U;
    ce1a:	2201      	movs	r2, #1
	buf->frags = NULL;
    ce1c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
    ce1e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
    ce20:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
    ce22:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    ce24:	6963      	ldr	r3, [r4, #20]
    ce26:	8262      	strh	r2, [r4, #18]
    ce28:	60e3      	str	r3, [r4, #12]
	return buf;
    ce2a:	e7f0      	b.n	ce0e <net_buf_alloc_len+0xfe>
    ce2c:	200004b0 	.word	0x200004b0
    ce30:	ba2e8ba3 	.word	0xba2e8ba3

0000ce34 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    ce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce38:	4d16      	ldr	r5, [pc, #88]	; (ce94 <net_buf_unref+0x60>)
    ce3a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    ce3c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    ce3e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
    ce40:	b90c      	cbnz	r4, ce46 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    ce42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    ce46:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
    ce48:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
    ce4c:	3b01      	subs	r3, #1
    ce4e:	b2db      	uxtb	r3, r3
    ce50:	7223      	strb	r3, [r4, #8]
    ce52:	2b00      	cmp	r3, #0
    ce54:	d1f5      	bne.n	ce42 <net_buf_unref+0xe>
		if (buf->__buf) {
    ce56:	6961      	ldr	r1, [r4, #20]
    ce58:	b159      	cbz	r1, ce72 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ce5a:	7a63      	ldrb	r3, [r4, #9]
    ce5c:	07db      	lsls	r3, r3, #31
    ce5e:	d407      	bmi.n	ce70 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ce60:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
    ce62:	fb07 5303 	mla	r3, r7, r3, r5
    ce66:	4620      	mov	r0, r4
    ce68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ce6a:	681b      	ldr	r3, [r3, #0]
    ce6c:	689b      	ldr	r3, [r3, #8]
    ce6e:	4798      	blx	r3
			buf->__buf = NULL;
    ce70:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
    ce72:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
    ce74:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
    ce76:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    ce7a:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
    ce7c:	6a1b      	ldr	r3, [r3, #32]
    ce7e:	b11b      	cbz	r3, ce88 <net_buf_unref+0x54>
			pool->destroy(buf);
    ce80:	4620      	mov	r0, r4
    ce82:	4798      	blx	r3
{
    ce84:	4644      	mov	r4, r8
    ce86:	e7db      	b.n	ce40 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    ce88:	4621      	mov	r1, r4
    ce8a:	fb00 5007 	mla	r0, r0, r7, r5
    ce8e:	f005 fa1f 	bl	122d0 <k_queue_prepend>
}
    ce92:	e7f7      	b.n	ce84 <net_buf_unref+0x50>
    ce94:	200004b0 	.word	0x200004b0

0000ce98 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    ce98:	4b05      	ldr	r3, [pc, #20]	; (ceb0 <adc_context_start_sampling+0x18>)
    ce9a:	2201      	movs	r2, #1
    ce9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    cea0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    cea4:	b109      	cbz	r1, ceaa <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cea6:	60da      	str	r2, [r3, #12]
}
    cea8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ceaa:	601a      	str	r2, [r3, #0]
    ceac:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    ceae:	4770      	bx	lr
    ceb0:	40007000 	.word	0x40007000

0000ceb4 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    ceb4:	7908      	ldrb	r0, [r1, #4]
{
    ceb6:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    ceb8:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    cebc:	2c07      	cmp	r4, #7
    cebe:	d820      	bhi.n	cf02 <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
    cec0:	780b      	ldrb	r3, [r1, #0]
    cec2:	2b0b      	cmp	r3, #11
    cec4:	d81d      	bhi.n	cf02 <adc_nrfx_channel_setup+0x4e>
    cec6:	e8df f003 	tbb	[pc, r3]
    ceca:	0707      	.short	0x0707
    cecc:	061c0707 	.word	0x061c0707
    ced0:	211f1c1c 	.word	0x211f1c1c
    ced4:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
    ced6:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
    ced8:	784a      	ldrb	r2, [r1, #1]
    ceda:	2a03      	cmp	r2, #3
    cedc:	d01a      	beq.n	cf14 <adc_nrfx_channel_setup+0x60>
    cede:	2a04      	cmp	r2, #4
    cee0:	d10f      	bne.n	cf02 <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
    cee2:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    cee4:	884a      	ldrh	r2, [r1, #2]
    cee6:	f244 060a 	movw	r6, #16394	; 0x400a
    ceea:	42b2      	cmp	r2, r6
    ceec:	d046      	beq.n	cf7c <adc_nrfx_channel_setup+0xc8>
    ceee:	d813      	bhi.n	cf18 <adc_nrfx_channel_setup+0x64>
    cef0:	f244 0603 	movw	r6, #16387	; 0x4003
    cef4:	42b2      	cmp	r2, r6
    cef6:	d03d      	beq.n	cf74 <adc_nrfx_channel_setup+0xc0>
    cef8:	f244 0605 	movw	r6, #16389	; 0x4005
    cefc:	42b2      	cmp	r2, r6
    cefe:	d03b      	beq.n	cf78 <adc_nrfx_channel_setup+0xc4>
    cf00:	b3e2      	cbz	r2, cf7c <adc_nrfx_channel_setup+0xc8>
    cf02:	f06f 0015 	mvn.w	r0, #21
    cf06:	e034      	b.n	cf72 <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
    cf08:	2305      	movs	r3, #5
		break;
    cf0a:	e7e5      	b.n	ced8 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
    cf0c:	2306      	movs	r3, #6
		break;
    cf0e:	e7e3      	b.n	ced8 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    cf10:	2307      	movs	r3, #7
		break;
    cf12:	e7e1      	b.n	ced8 <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
    cf14:	2501      	movs	r5, #1
    cf16:	e7e5      	b.n	cee4 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
    cf18:	f244 0614 	movw	r6, #16404	; 0x4014
    cf1c:	42b2      	cmp	r2, r6
    cf1e:	d02f      	beq.n	cf80 <adc_nrfx_channel_setup+0xcc>
    cf20:	f244 0628 	movw	r6, #16424	; 0x4028
    cf24:	42b2      	cmp	r2, r6
    cf26:	d02d      	beq.n	cf84 <adc_nrfx_channel_setup+0xd0>
    cf28:	f244 060f 	movw	r6, #16399	; 0x400f
    cf2c:	42b2      	cmp	r2, r6
    cf2e:	d1e8      	bne.n	cf02 <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    cf30:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    cf32:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    cf36:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    cf38:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    cf3c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    cf40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    cf44:	0122      	lsls	r2, r4, #4
    cf46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cf4a:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    cf4e:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    cf50:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    cf54:	0123      	lsls	r3, r4, #4
    cf56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf5a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    cf5e:	798a      	ldrb	r2, [r1, #6]
    cf60:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    cf64:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    cf68:	4b07      	ldr	r3, [pc, #28]	; (cf88 <adc_nrfx_channel_setup+0xd4>)
    cf6a:	794a      	ldrb	r2, [r1, #5]
    cf6c:	4423      	add	r3, r4
    cf6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
    cf72:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
    cf74:	2200      	movs	r2, #0
    cf76:	e7dc      	b.n	cf32 <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
    cf78:	2201      	movs	r2, #1
    cf7a:	e7da      	b.n	cf32 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    cf7c:	2202      	movs	r2, #2
    cf7e:	e7d8      	b.n	cf32 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    cf80:	2204      	movs	r2, #4
    cf82:	e7d6      	b.n	cf32 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    cf84:	2205      	movs	r2, #5
    cf86:	e7d4      	b.n	cf32 <adc_nrfx_channel_setup+0x7e>
    cf88:	200002c8 	.word	0x200002c8

0000cf8c <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    cf8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cf8e:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    cf90:	f04f 33ff 	mov.w	r3, #4294967295
    cf94:	4856      	ldr	r0, [pc, #344]	; (d0f0 <adc_nrfx_read+0x164>)
    cf96:	f04f 32ff 	mov.w	r2, #4294967295
    cf9a:	f003 f8df 	bl	1015c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    cf9e:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
    cfa0:	1e73      	subs	r3, r6, #1
    cfa2:	2bfe      	cmp	r3, #254	; 0xfe
    cfa4:	d83c      	bhi.n	d020 <adc_nrfx_read+0x94>
    cfa6:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
    cfa8:	4852      	ldr	r0, [pc, #328]	; (d0f4 <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    cfaa:	4f53      	ldr	r7, [pc, #332]	; (d0f8 <adc_nrfx_read+0x16c>)
	active_channels = 0U;
    cfac:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
    cfae:	fa26 f103 	lsr.w	r1, r6, r3
    cfb2:	f011 0101 	ands.w	r1, r1, #1
    cfb6:	d026      	beq.n	d006 <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
    cfb8:	f817 c003 	ldrb.w	ip, [r7, r3]
    cfbc:	f1bc 0f00 	cmp.w	ip, #0
    cfc0:	d02e      	beq.n	d020 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    cfc2:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    cfc6:	7c65      	ldrb	r5, [r4, #17]
    cfc8:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    cfcc:	3d00      	subs	r5, #0
    cfce:	bf18      	it	ne
    cfd0:	2501      	movne	r5, #1
    cfd2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    cfd6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    cfda:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    cfde:	f103 0151 	add.w	r1, r3, #81	; 0x51
    cfe2:	0109      	lsls	r1, r1, #4
			++active_channels;
    cfe4:	3201      	adds	r2, #1
    cfe6:	f840 c001 	str.w	ip, [r0, r1]
    cfea:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
    cfec:	3301      	adds	r3, #1
    cfee:	2b08      	cmp	r3, #8
    cff0:	d1dd      	bne.n	cfae <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
    cff2:	7c23      	ldrb	r3, [r4, #16]
    cff4:	3b08      	subs	r3, #8
    cff6:	2b06      	cmp	r3, #6
    cff8:	d812      	bhi.n	d020 <adc_nrfx_read+0x94>
    cffa:	e8df f003 	tbb	[pc, r3]
    cffe:	1109      	.short	0x1109
    d000:	1119111d 	.word	0x1119111d
    d004:	1b          	.byte	0x1b
    d005:	00          	.byte	0x00
    d006:	f103 0551 	add.w	r5, r3, #81	; 0x51
    d00a:	012d      	lsls	r5, r5, #4
    d00c:	5141      	str	r1, [r0, r5]
}
    d00e:	e7ed      	b.n	cfec <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    d010:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
    d012:	4938      	ldr	r1, [pc, #224]	; (d0f4 <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    d014:	2a01      	cmp	r2, #1
    d016:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    d01a:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    d01c:	d90e      	bls.n	d03c <adc_nrfx_read+0xb0>
    d01e:	b17b      	cbz	r3, d040 <adc_nrfx_read+0xb4>
		return -EINVAL;
    d020:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    d024:	4832      	ldr	r0, [pc, #200]	; (d0f0 <adc_nrfx_read+0x164>)
    d026:	f003 f873 	bl	10110 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    d02a:	4620      	mov	r0, r4
    d02c:	b003      	add	sp, #12
    d02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    d030:	2302      	movs	r3, #2
		break;
    d032:	e7ee      	b.n	d012 <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    d034:	2303      	movs	r3, #3
		break;
    d036:	e7ec      	b.n	d012 <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
    d038:	2301      	movs	r3, #1
    d03a:	e7ea      	b.n	d012 <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
    d03c:	2b08      	cmp	r3, #8
    d03e:	d8ef      	bhi.n	d020 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
    d040:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
    d044:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    d046:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    d048:	b111      	cbz	r1, d050 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    d04a:	8989      	ldrh	r1, [r1, #12]
    d04c:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    d050:	68e1      	ldr	r1, [r4, #12]
    d052:	4299      	cmp	r1, r3
    d054:	d348      	bcc.n	d0e8 <adc_nrfx_read+0x15c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    d056:	4b27      	ldr	r3, [pc, #156]	; (d0f4 <adc_nrfx_read+0x168>)
    d058:	68a1      	ldr	r1, [r4, #8]
    d05a:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    d05e:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
    d060:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    d064:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    d066:	4d25      	ldr	r5, [pc, #148]	; (d0fc <adc_nrfx_read+0x170>)
    d068:	f105 0674 	add.w	r6, r5, #116	; 0x74
    d06c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    d06e:	683b      	ldr	r3, [r7, #0]
    d070:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
    d072:	2600      	movs	r6, #0
    d074:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
    d076:	6823      	ldr	r3, [r4, #0]
    d078:	462f      	mov	r7, r5
    d07a:	b38b      	cbz	r3, d0e0 <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
    d07c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d07e:	f105 0488 	add.w	r4, r5, #136	; 0x88
    d082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    d086:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
    d088:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
    d08c:	b340      	cbz	r0, d0e0 <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d08e:	f3bf 8f5b 	dmb	ish
    d092:	e857 3f00 	ldrex	r3, [r7]
    d096:	e847 6200 	strex	r2, r6, [r7]
    d09a:	2a00      	cmp	r2, #0
    d09c:	d1f9      	bne.n	d092 <adc_nrfx_read+0x106>
    d09e:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    d0a2:	4917      	ldr	r1, [pc, #92]	; (d100 <adc_nrfx_read+0x174>)
    d0a4:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
    d0a8:	4a16      	ldr	r2, [pc, #88]	; (d104 <adc_nrfx_read+0x178>)
    d0aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d0ae:	460f      	mov	r7, r1
    d0b0:	4631      	mov	r1, r6
    d0b2:	fbe4 7100 	umlal	r7, r1, r4, r0
    d0b6:	2300      	movs	r3, #0
    d0b8:	4638      	mov	r0, r7
    d0ba:	f7f3 f80f 	bl	dc <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    d0be:	2200      	movs	r2, #0
    d0c0:	e9cd 0100 	strd	r0, r1, [sp]
    d0c4:	2300      	movs	r3, #0
    d0c6:	f105 0008 	add.w	r0, r5, #8
    d0ca:	f003 fec3 	bl	10e54 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    d0ce:	480e      	ldr	r0, [pc, #56]	; (d108 <adc_nrfx_read+0x17c>)
    d0d0:	f04f 32ff 	mov.w	r2, #4294967295
    d0d4:	f04f 33ff 	mov.w	r3, #4294967295
    d0d8:	f003 f840 	bl	1015c <z_impl_k_sem_take>
	return ctx->status;
    d0dc:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
    d0de:	e7a1      	b.n	d024 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    d0e0:	4806      	ldr	r0, [pc, #24]	; (d0fc <adc_nrfx_read+0x170>)
    d0e2:	f7ff fed9 	bl	ce98 <adc_context_start_sampling>
    d0e6:	e7f2      	b.n	d0ce <adc_nrfx_read+0x142>
		return -ENOMEM;
    d0e8:	f06f 040b 	mvn.w	r4, #11
    d0ec:	e79a      	b.n	d024 <adc_nrfx_read+0x98>
    d0ee:	bf00      	nop
    d0f0:	20000308 	.word	0x20000308
    d0f4:	40007000 	.word	0x40007000
    d0f8:	20000368 	.word	0x20000368
    d0fc:	200002c8 	.word	0x200002c8
    d100:	000f423f 	.word	0x000f423f
    d104:	000f4240 	.word	0x000f4240
    d108:	20000320 	.word	0x20000320

0000d10c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    d10c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d10e:	4b0e      	ldr	r3, [pc, #56]	; (d148 <init_saadc+0x3c>)
    d110:	2400      	movs	r4, #0
    d112:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d116:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    d11a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    d11e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    d122:	2212      	movs	r2, #18
    d124:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    d128:	2007      	movs	r0, #7
    d12a:	f7fe f8eb 	bl	b304 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d12e:	4622      	mov	r2, r4
    d130:	2101      	movs	r1, #1
    d132:	2007      	movs	r0, #7
    d134:	f7fe f916 	bl	b364 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    d138:	4804      	ldr	r0, [pc, #16]	; (d14c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    d13a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    d13c:	b913      	cbnz	r3, d144 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    d13e:	3040      	adds	r0, #64	; 0x40
    d140:	f002 ffe6 	bl	10110 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    d144:	2000      	movs	r0, #0
    d146:	bd10      	pop	{r4, pc}
    d148:	40007000 	.word	0x40007000
    d14c:	200002c8 	.word	0x200002c8

0000d150 <saadc_irq_handler>:
{
    d150:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d152:	4b2f      	ldr	r3, [pc, #188]	; (d210 <saadc_irq_handler+0xc0>)
    d154:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    d158:	2a00      	cmp	r2, #0
    d15a:	d04c      	beq.n	d1f6 <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d15c:	2200      	movs	r2, #0
    d15e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d162:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    d166:	4c2b      	ldr	r4, [pc, #172]	; (d214 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d168:	2101      	movs	r1, #1
    d16a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    d16c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    d170:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d172:	4625      	mov	r5, r4
    d174:	b3d3      	cbz	r3, d1ec <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
    d176:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    d17a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
    d17e:	b133      	cbz	r3, d18e <saadc_irq_handler+0x3e>
			action = callback(dev,
    d180:	f104 0174 	add.w	r1, r4, #116	; 0x74
    d184:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    d186:	2801      	cmp	r0, #1
    d188:	d014      	beq.n	d1b4 <saadc_irq_handler+0x64>
    d18a:	2802      	cmp	r0, #2
    d18c:	d028      	beq.n	d1e0 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    d18e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    d192:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    d196:	429a      	cmp	r2, r3
    d198:	d922      	bls.n	d1e0 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    d19a:	3301      	adds	r3, #1
    d19c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    d1a0:	4b1b      	ldr	r3, [pc, #108]	; (d210 <saadc_irq_handler+0xc0>)
    d1a2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    d1a6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    d1aa:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    d1ac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    d1b0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    d1b4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    d1b8:	b923      	cbnz	r3, d1c4 <saadc_irq_handler+0x74>
}
    d1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
    d1be:	4815      	ldr	r0, [pc, #84]	; (d214 <saadc_irq_handler+0xc4>)
    d1c0:	f7ff be6a 	b.w	ce98 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d1c4:	f3bf 8f5b 	dmb	ish
    d1c8:	e855 3f00 	ldrex	r3, [r5]
    d1cc:	1e5a      	subs	r2, r3, #1
    d1ce:	e845 2100 	strex	r1, r2, [r5]
    d1d2:	2900      	cmp	r1, #0
    d1d4:	d1f8      	bne.n	d1c8 <saadc_irq_handler+0x78>
    d1d6:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    d1da:	2b01      	cmp	r3, #1
    d1dc:	dced      	bgt.n	d1ba <saadc_irq_handler+0x6a>
    d1de:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    d1e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    d1e4:	b113      	cbz	r3, d1ec <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
    d1e6:	480c      	ldr	r0, [pc, #48]	; (d218 <saadc_irq_handler+0xc8>)
    d1e8:	f005 fa43 	bl	12672 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    d1ec:	480b      	ldr	r0, [pc, #44]	; (d21c <saadc_irq_handler+0xcc>)
    d1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d1f2:	f002 bf8d 	b.w	10110 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d1f6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    d1fa:	2900      	cmp	r1, #0
    d1fc:	d0ef      	beq.n	d1de <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d1fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    d202:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d206:	2201      	movs	r2, #1
    d208:	609a      	str	r2, [r3, #8]
    d20a:	601a      	str	r2, [r3, #0]
    d20c:	605a      	str	r2, [r3, #4]
}
    d20e:	e7e6      	b.n	d1de <saadc_irq_handler+0x8e>
    d210:	40007000 	.word	0x40007000
    d214:	200002c8 	.word	0x200002c8
    d218:	200002d0 	.word	0x200002d0
    d21c:	20000320 	.word	0x20000320

0000d220 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    d220:	4b08      	ldr	r3, [pc, #32]	; (d244 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d222:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d224:	1ac3      	subs	r3, r0, r3
{
    d226:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d228:	4907      	ldr	r1, [pc, #28]	; (d248 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    d22a:	109b      	asrs	r3, r3, #2
{
    d22c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d22e:	4359      	muls	r1, r3
    d230:	4806      	ldr	r0, [pc, #24]	; (d24c <onoff_stop+0x2c>)
    d232:	2240      	movs	r2, #64	; 0x40
    d234:	f004 fbc0 	bl	119b8 <stop>
	notify(mgr, res);
    d238:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d23a:	4601      	mov	r1, r0
	notify(mgr, res);
    d23c:	4620      	mov	r0, r4
}
    d23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d242:	4718      	bx	r3
    d244:	20001914 	.word	0x20001914
    d248:	b6db6db7 	.word	0xb6db6db7
    d24c:	000129d4 	.word	0x000129d4

0000d250 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d250:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d252:	4c0c      	ldr	r4, [pc, #48]	; (d284 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d254:	4a0c      	ldr	r2, [pc, #48]	; (d288 <onoff_start+0x38>)
    d256:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    d258:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d25a:	9300      	str	r3, [sp, #0]
{
    d25c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d25e:	460b      	mov	r3, r1
    d260:	490a      	ldr	r1, [pc, #40]	; (d28c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    d262:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d264:	4361      	muls	r1, r4
{
    d266:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d268:	4809      	ldr	r0, [pc, #36]	; (d290 <onoff_start+0x40>)
    d26a:	f004 fbd2 	bl	11a12 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    d26e:	1e01      	subs	r1, r0, #0
    d270:	da05      	bge.n	d27e <onoff_start+0x2e>
		notify(mgr, err);
    d272:	4630      	mov	r0, r6
    d274:	462b      	mov	r3, r5
	}
}
    d276:	b002      	add	sp, #8
    d278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    d27c:	4718      	bx	r3
}
    d27e:	b002      	add	sp, #8
    d280:	bd70      	pop	{r4, r5, r6, pc}
    d282:	bf00      	nop
    d284:	20001914 	.word	0x20001914
    d288:	00011a7f 	.word	0x00011a7f
    d28c:	b6db6db7 	.word	0xb6db6db7
    d290:	000129d4 	.word	0x000129d4

0000d294 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d294:	2200      	movs	r2, #0
{
    d296:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d298:	2101      	movs	r1, #1
{
    d29a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d29c:	4610      	mov	r0, r2
    d29e:	f7fe f861 	bl	b364 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    d2a2:	480f      	ldr	r0, [pc, #60]	; (d2e0 <clk_init+0x4c>)
    d2a4:	f001 fcd4 	bl	ec50 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d2a8:	4b0e      	ldr	r3, [pc, #56]	; (d2e4 <clk_init+0x50>)
    d2aa:	4298      	cmp	r0, r3
    d2ac:	d115      	bne.n	d2da <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d2ae:	f004 fe0e 	bl	11ece <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    d2b2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d2b4:	490c      	ldr	r1, [pc, #48]	; (d2e8 <clk_init+0x54>)
    d2b6:	4630      	mov	r0, r6
    d2b8:	f004 f90e 	bl	114d8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d2bc:	2800      	cmp	r0, #0
    d2be:	db0b      	blt.n	d2d8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2c0:	2501      	movs	r5, #1
    d2c2:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    d2c4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d2c6:	4908      	ldr	r1, [pc, #32]	; (d2e8 <clk_init+0x54>)
    d2c8:	f104 001c 	add.w	r0, r4, #28
    d2cc:	f004 f904 	bl	114d8 <onoff_manager_init>
		if (err < 0) {
    d2d0:	2800      	cmp	r0, #0
    d2d2:	db01      	blt.n	d2d8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2d4:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    d2d6:	2000      	movs	r0, #0
}
    d2d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d2da:	f06f 0004 	mvn.w	r0, #4
    d2de:	e7fb      	b.n	d2d8 <clk_init+0x44>
    d2e0:	0000d321 	.word	0x0000d321
    d2e4:	0bad0000 	.word	0x0bad0000
    d2e8:	00012d6c 	.word	0x00012d6c

0000d2ec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d2ec:	b570      	push	{r4, r5, r6, lr}
    d2ee:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d2f0:	230c      	movs	r3, #12
    d2f2:	4809      	ldr	r0, [pc, #36]	; (d318 <clkstarted_handle.constprop.0+0x2c>)
    d2f4:	434b      	muls	r3, r1
    d2f6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    d2f8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d2fc:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    d2fe:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    d300:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d302:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d304:	f004 fb45 	bl	11992 <set_on_state>
	if (callback) {
    d308:	b12d      	cbz	r5, d316 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d30a:	4632      	mov	r2, r6
    d30c:	462b      	mov	r3, r5
    d30e:	4803      	ldr	r0, [pc, #12]	; (d31c <clkstarted_handle.constprop.0+0x30>)
}
    d310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d314:	4718      	bx	r3
}
    d316:	bd70      	pop	{r4, r5, r6, pc}
    d318:	20001914 	.word	0x20001914
    d31c:	000129d4 	.word	0x000129d4

0000d320 <clock_event_handler>:
	switch (event) {
    d320:	b110      	cbz	r0, d328 <clock_event_handler+0x8>
    d322:	2801      	cmp	r0, #1
    d324:	d004      	beq.n	d330 <clock_event_handler+0x10>
    d326:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d328:	4b03      	ldr	r3, [pc, #12]	; (d338 <clock_event_handler+0x18>)
    d32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d32c:	075b      	lsls	r3, r3, #29
    d32e:	d101      	bne.n	d334 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d330:	f7ff bfdc 	b.w	d2ec <clkstarted_handle.constprop.0>
}
    d334:	4770      	bx	lr
    d336:	bf00      	nop
    d338:	20001914 	.word	0x20001914

0000d33c <generic_hfclk_start>:
{
    d33c:	b508      	push	{r3, lr}
	__asm__ volatile(
    d33e:	f04f 0340 	mov.w	r3, #64	; 0x40
    d342:	f3ef 8111 	mrs	r1, BASEPRI
    d346:	f383 8812 	msr	BASEPRI_MAX, r3
    d34a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d34e:	4a12      	ldr	r2, [pc, #72]	; (d398 <generic_hfclk_start+0x5c>)
    d350:	6813      	ldr	r3, [r2, #0]
    d352:	f043 0002 	orr.w	r0, r3, #2
    d356:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d358:	07da      	lsls	r2, r3, #31
    d35a:	d408      	bmi.n	d36e <generic_hfclk_start+0x32>
	__asm__ volatile(
    d35c:	f381 8811 	msr	BASEPRI, r1
    d360:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d364:	2001      	movs	r0, #1
}
    d366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d36a:	f001 bc61 	b.w	ec30 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d36e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d372:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d376:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d37a:	07d3      	lsls	r3, r2, #31
    d37c:	d5ee      	bpl.n	d35c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    d37e:	4807      	ldr	r0, [pc, #28]	; (d39c <generic_hfclk_start+0x60>)
    d380:	f004 fb07 	bl	11992 <set_on_state>
    d384:	f381 8811 	msr	BASEPRI, r1
    d388:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    d38c:	2000      	movs	r0, #0
}
    d38e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d392:	f7ff bfab 	b.w	d2ec <clkstarted_handle.constprop.0>
    d396:	bf00      	nop
    d398:	20001964 	.word	0x20001964
    d39c:	20001954 	.word	0x20001954

0000d3a0 <api_blocking_start>:
{
    d3a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3a2:	2200      	movs	r2, #0
    d3a4:	2301      	movs	r3, #1
    d3a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d3aa:	ab04      	add	r3, sp, #16
    d3ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3b0:	4a09      	ldr	r2, [pc, #36]	; (d3d8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3b2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3b6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3b8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3bc:	f004 fb58 	bl	11a70 <api_start>
	if (err < 0) {
    d3c0:	2800      	cmp	r0, #0
    d3c2:	db05      	blt.n	d3d0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d3c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d3c8:	2300      	movs	r3, #0
    d3ca:	4668      	mov	r0, sp
    d3cc:	f002 fec6 	bl	1015c <z_impl_k_sem_take>
}
    d3d0:	b007      	add	sp, #28
    d3d2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3d6:	bf00      	nop
    d3d8:	00011a97 	.word	0x00011a97

0000d3dc <lfclk_start>:
{
    d3dc:	b510      	push	{r4, lr}
	if (!once) {
    d3de:	4c07      	ldr	r4, [pc, #28]	; (d3fc <lfclk_start+0x20>)
    d3e0:	7823      	ldrb	r3, [r4, #0]
    d3e2:	b92b      	cbnz	r3, d3f0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    d3e4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    d3e8:	f005 f91d 	bl	12626 <z_impl_k_busy_wait>
		once = true;
    d3ec:	2301      	movs	r3, #1
    d3ee:	7023      	strb	r3, [r4, #0]
}
    d3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d3f4:	2000      	movs	r0, #0
    d3f6:	f001 bc1b 	b.w	ec30 <nrfx_clock_start>
    d3fa:	bf00      	nop
    d3fc:	20001b2d 	.word	0x20001b2d

0000d400 <generic_hfclk_stop>:
{
    d400:	b510      	push	{r4, lr}
	__asm__ volatile(
    d402:	f04f 0340 	mov.w	r3, #64	; 0x40
    d406:	f3ef 8411 	mrs	r4, BASEPRI
    d40a:	f383 8812 	msr	BASEPRI_MAX, r3
    d40e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    d412:	4a07      	ldr	r2, [pc, #28]	; (d430 <generic_hfclk_stop+0x30>)
    d414:	6813      	ldr	r3, [r2, #0]
    d416:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    d41a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    d41c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    d41e:	d402      	bmi.n	d426 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d420:	2001      	movs	r0, #1
    d422:	f004 fd4f 	bl	11ec4 <nrfx_clock_stop>
	__asm__ volatile(
    d426:	f384 8811 	msr	BASEPRI, r4
    d42a:	f3bf 8f6f 	isb	sy
}
    d42e:	bd10      	pop	{r4, pc}
    d430:	20001964 	.word	0x20001964

0000d434 <z_nrf_clock_control_lf_on>:
{
    d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d436:	4928      	ldr	r1, [pc, #160]	; (d4d8 <z_nrf_clock_control_lf_on+0xa4>)
    d438:	f3bf 8f5b 	dmb	ish
    d43c:	4606      	mov	r6, r0
    d43e:	2201      	movs	r2, #1
    d440:	e851 3f00 	ldrex	r3, [r1]
    d444:	e841 2000 	strex	r0, r2, [r1]
    d448:	2800      	cmp	r0, #0
    d44a:	d1f9      	bne.n	d440 <z_nrf_clock_control_lf_on+0xc>
    d44c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    d450:	b933      	cbnz	r3, d460 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d452:	4922      	ldr	r1, [pc, #136]	; (d4dc <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    d454:	4822      	ldr	r0, [pc, #136]	; (d4e0 <z_nrf_clock_control_lf_on+0xac>)
    d456:	604b      	str	r3, [r1, #4]
    d458:	60cb      	str	r3, [r1, #12]
    d45a:	608a      	str	r2, [r1, #8]
    d45c:	f004 f84f 	bl	114fe <onoff_request>
	switch (start_mode) {
    d460:	1e73      	subs	r3, r6, #1
    d462:	2b01      	cmp	r3, #1
    d464:	d81d      	bhi.n	d4a2 <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d466:	f004 fe90 	bl	1218a <k_is_in_isr>
    d46a:	4604      	mov	r4, r0
    d46c:	b9d0      	cbnz	r0, d4a4 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    d46e:	4b1d      	ldr	r3, [pc, #116]	; (d4e4 <z_nrf_clock_control_lf_on+0xb0>)
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	b1bb      	cbz	r3, d4a4 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    d474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d478:	2202      	movs	r2, #2
    d47a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    d47e:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d480:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    d484:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d488:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    d48c:	03d2      	lsls	r2, r2, #15
    d48e:	d513      	bpl.n	d4b8 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d490:	079b      	lsls	r3, r3, #30
    d492:	d001      	beq.n	d498 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d494:	2e01      	cmp	r6, #1
    d496:	d10f      	bne.n	d4b8 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    d498:	b1c4      	cbz	r4, d4cc <z_nrf_clock_control_lf_on+0x98>
    d49a:	f385 8811 	msr	BASEPRI, r5
    d49e:	f3bf 8f6f 	isb	sy
}
    d4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    d4a4:	f04f 0340 	mov.w	r3, #64	; 0x40
    d4a8:	f3ef 8511 	mrs	r5, BASEPRI
    d4ac:	f383 8812 	msr	BASEPRI_MAX, r3
    d4b0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d4b4:	2401      	movs	r4, #1
    d4b6:	e7e3      	b.n	d480 <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    d4b8:	b11c      	cbz	r4, d4c2 <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d4ba:	4628      	mov	r0, r5
    d4bc:	f7fd ff16 	bl	b2ec <arch_cpu_atomic_idle>
}
    d4c0:	e7e0      	b.n	d484 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    d4c2:	2100      	movs	r1, #0
    d4c4:	2021      	movs	r0, #33	; 0x21
    d4c6:	f003 fa67 	bl	10998 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d4ca:	e7db      	b.n	d484 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    d4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d4d0:	2202      	movs	r2, #2
    d4d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d4d6:	e7e4      	b.n	d4a2 <z_nrf_clock_control_lf_on+0x6e>
    d4d8:	20001910 	.word	0x20001910
    d4dc:	20001900 	.word	0x20001900
    d4e0:	20001930 	.word	0x20001930
    d4e4:	20001fcd 	.word	0x20001fcd

0000d4e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    d4e8:	b508      	push	{r3, lr}
    d4ea:	4807      	ldr	r0, [pc, #28]	; (d508 <uart_console_init+0x20>)
    d4ec:	f004 fdb1 	bl	12052 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    d4f0:	b138      	cbz	r0, d502 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    d4f2:	4806      	ldr	r0, [pc, #24]	; (d50c <uart_console_init+0x24>)
    d4f4:	f7fe faf0 	bl	bad8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d4f8:	4804      	ldr	r0, [pc, #16]	; (d50c <uart_console_init+0x24>)
    d4fa:	f7fd f8bf 	bl	a67c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    d4fe:	2000      	movs	r0, #0
}
    d500:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d502:	f06f 0012 	mvn.w	r0, #18
    d506:	e7fb      	b.n	d500 <uart_console_init+0x18>
    d508:	00012a34 	.word	0x00012a34
    d50c:	0000d511 	.word	0x0000d511

0000d510 <console_out>:
	if ('\n' == c) {
    d510:	280a      	cmp	r0, #10
{
    d512:	b538      	push	{r3, r4, r5, lr}
    d514:	4d07      	ldr	r5, [pc, #28]	; (d534 <console_out+0x24>)
    d516:	4604      	mov	r4, r0
	if ('\n' == c) {
    d518:	d104      	bne.n	d524 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    d51a:	68ab      	ldr	r3, [r5, #8]
    d51c:	210d      	movs	r1, #13
    d51e:	685b      	ldr	r3, [r3, #4]
    d520:	4628      	mov	r0, r5
    d522:	4798      	blx	r3
    d524:	68ab      	ldr	r3, [r5, #8]
    d526:	4803      	ldr	r0, [pc, #12]	; (d534 <console_out+0x24>)
    d528:	685b      	ldr	r3, [r3, #4]
    d52a:	b2e1      	uxtb	r1, r4
    d52c:	4798      	blx	r3
}
    d52e:	4620      	mov	r0, r4
    d530:	bd38      	pop	{r3, r4, r5, pc}
    d532:	bf00      	nop
    d534:	00012a34 	.word	0x00012a34

0000d538 <random_byte_get>:
    d538:	f04f 0340 	mov.w	r3, #64	; 0x40
    d53c:	f3ef 8211 	mrs	r2, BASEPRI
    d540:	f383 8812 	msr	BASEPRI_MAX, r3
    d544:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    d548:	4b09      	ldr	r3, [pc, #36]	; (d570 <random_byte_get+0x38>)
    d54a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    d54e:	b161      	cbz	r1, d56a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d550:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    d552:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d556:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d55a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    d55e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    d560:	f382 8811 	msr	BASEPRI, r2
    d564:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    d568:	4770      	bx	lr
	int retval = -EAGAIN;
    d56a:	f06f 000a 	mvn.w	r0, #10
    d56e:	e7f7      	b.n	d560 <random_byte_get+0x28>
    d570:	4000d000 	.word	0x4000d000

0000d574 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    d574:	b5f0      	push	{r4, r5, r6, r7, lr}
    d576:	4603      	mov	r3, r0
    d578:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    d57a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    d57c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    d580:	f04f 0540 	mov.w	r5, #64	; 0x40
    d584:	f3ef 8211 	mrs	r2, BASEPRI
    d588:	f385 8812 	msr	BASEPRI_MAX, r5
    d58c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    d590:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    d592:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    d596:	1be4      	subs	r4, r4, r7
    d598:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    d59c:	42a0      	cmp	r0, r4
		len = available;
    d59e:	bf88      	it	hi
    d5a0:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    d5a2:	183e      	adds	r6, r7, r0
    d5a4:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    d5a8:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    d5aa:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    d5ac:	f382 8811 	msr	BASEPRI, r2
    d5b0:	f3bf 8f6f 	isb	sy
    d5b4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    d5b6:	428a      	cmp	r2, r1
    d5b8:	d117      	bne.n	d5ea <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    d5ba:	4577      	cmp	r7, lr
    d5bc:	d10d      	bne.n	d5da <rng_pool_get+0x66>
	__asm__ volatile(
    d5be:	f04f 0140 	mov.w	r1, #64	; 0x40
    d5c2:	f3ef 8211 	mrs	r2, BASEPRI
    d5c6:	f381 8812 	msr	BASEPRI_MAX, r1
    d5ca:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    d5ce:	7819      	ldrb	r1, [r3, #0]
    d5d0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    d5d2:	f382 8811 	msr	BASEPRI, r2
    d5d6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    d5da:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    d5dc:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    d5de:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d5e0:	bf22      	ittt	cs
    d5e2:	4b06      	ldrcs	r3, [pc, #24]	; (d5fc <rng_pool_get+0x88>)
    d5e4:	2201      	movcs	r2, #1
    d5e6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    d5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    d5ea:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    d5ec:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    d5ee:	7976      	ldrb	r6, [r6, #5]
    d5f0:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    d5f4:	ea05 050c 	and.w	r5, r5, ip
    d5f8:	e7dd      	b.n	d5b6 <rng_pool_get+0x42>
    d5fa:	bf00      	nop
    d5fc:	4000d000 	.word	0x4000d000

0000d600 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d600:	43db      	mvns	r3, r3
{
    d602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d606:	f013 0501 	ands.w	r5, r3, #1
{
    d60a:	460e      	mov	r6, r1
    d60c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d60e:	d004      	beq.n	d61a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    d610:	4823      	ldr	r0, [pc, #140]	; (d6a0 <entropy_nrf5_get_entropy_isr+0xa0>)
    d612:	f7ff ffaf 	bl	d574 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    d616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    d61a:	b3a2      	cbz	r2, d686 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    d61c:	f04f 0340 	mov.w	r3, #64	; 0x40
    d620:	f3ef 8811 	mrs	r8, BASEPRI
    d624:	f383 8812 	msr	BASEPRI_MAX, r3
    d628:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    d62c:	200d      	movs	r0, #13
    d62e:	f7fd fe8b 	bl	b348 <arch_irq_is_enabled>
    d632:	4607      	mov	r7, r0
		irq_disable(IRQN);
    d634:	200d      	movs	r0, #13
    d636:	f7fd fe73 	bl	b320 <arch_irq_disable>
	__asm__ volatile(
    d63a:	f388 8811 	msr	BASEPRI, r8
    d63e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d642:	f8df a060 	ldr.w	sl, [pc, #96]	; d6a4 <entropy_nrf5_get_entropy_isr+0xa4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d646:	f8df 8060 	ldr.w	r8, [pc, #96]	; d6a8 <entropy_nrf5_get_entropy_isr+0xa8>
    d64a:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
    d64e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
    d652:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d656:	2301      	movs	r3, #1
    d658:	f8ca 3000 	str.w	r3, [sl]
    d65c:	4625      	mov	r5, r4
    d65e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    d662:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    d666:	b183      	cbz	r3, d68a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    d668:	f7ff ff66 	bl	d538 <random_byte_get>
			if (byte < 0) {
    d66c:	1e03      	subs	r3, r0, #0
    d66e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    d672:	dbf6      	blt.n	d662 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    d674:	3d01      	subs	r5, #1
    d676:	b2ad      	uxth	r5, r5
    d678:	5573      	strb	r3, [r6, r5]
		} while (len);
    d67a:	2d00      	cmp	r5, #0
    d67c:	d1f1      	bne.n	d662 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    d67e:	b117      	cbz	r7, d686 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    d680:	200d      	movs	r0, #13
    d682:	f7fd fe3f 	bl	b304 <arch_irq_enable>
	return cnt;
    d686:	4620      	mov	r0, r4
    d688:	e7c5      	b.n	d616 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
    d68a:	f04f 0340 	mov.w	r3, #64	; 0x40
    d68e:	f3ef 8011 	mrs	r0, BASEPRI
    d692:	f383 8812 	msr	BASEPRI_MAX, r3
    d696:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
    d69a:	f7fd fe27 	bl	b2ec <arch_cpu_atomic_idle>
}
    d69e:	e7e0      	b.n	d662 <entropy_nrf5_get_entropy_isr+0x62>
    d6a0:	20001998 	.word	0x20001998
    d6a4:	4000d000 	.word	0x4000d000
    d6a8:	e000e100 	.word	0xe000e100

0000d6ac <entropy_nrf5_get_entropy>:
{
    d6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    d6b0:	4f12      	ldr	r7, [pc, #72]	; (d6fc <entropy_nrf5_get_entropy+0x50>)
    d6b2:	460d      	mov	r5, r1
    d6b4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    d6b6:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
    d6ba:	b914      	cbnz	r4, d6c2 <entropy_nrf5_get_entropy+0x16>
}
    d6bc:	4620      	mov	r0, r4
    d6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6c2:	f04f 33ff 	mov.w	r3, #4294967295
    d6c6:	f04f 32ff 	mov.w	r2, #4294967295
    d6ca:	4638      	mov	r0, r7
    d6cc:	f002 fd46 	bl	1015c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    d6d0:	4622      	mov	r2, r4
    d6d2:	4629      	mov	r1, r5
    d6d4:	4640      	mov	r0, r8
    d6d6:	f7ff ff4d 	bl	d574 <rng_pool_get>
    d6da:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    d6dc:	4638      	mov	r0, r7
    d6de:	f002 fd17 	bl	10110 <z_impl_k_sem_give>
		if (bytes == 0U) {
    d6e2:	b93e      	cbnz	r6, d6f4 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    d6e4:	f04f 32ff 	mov.w	r2, #4294967295
    d6e8:	f04f 33ff 	mov.w	r3, #4294967295
    d6ec:	4804      	ldr	r0, [pc, #16]	; (d700 <entropy_nrf5_get_entropy+0x54>)
    d6ee:	f002 fd35 	bl	1015c <z_impl_k_sem_take>
	while (len) {
    d6f2:	e7e6      	b.n	d6c2 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    d6f4:	1ba4      	subs	r4, r4, r6
    d6f6:	b2a4      	uxth	r4, r4
		buf += bytes;
    d6f8:	4435      	add	r5, r6
    d6fa:	e7de      	b.n	d6ba <entropy_nrf5_get_entropy+0xe>
    d6fc:	20001968 	.word	0x20001968
    d700:	20001980 	.word	0x20001980

0000d704 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    d704:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    d706:	4c19      	ldr	r4, [pc, #100]	; (d76c <entropy_nrf5_init+0x68>)
    d708:	2201      	movs	r2, #1
    d70a:	4611      	mov	r1, r2
    d70c:	4620      	mov	r0, r4
    d70e:	f004 fde9 	bl	122e4 <z_impl_k_sem_init>
    d712:	2201      	movs	r2, #1
    d714:	2100      	movs	r1, #0
    d716:	f104 0018 	add.w	r0, r4, #24
    d71a:	f004 fde3 	bl	122e4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    d71e:	f240 4307 	movw	r3, #1031	; 0x407
    d722:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    d726:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    d72a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    d72c:	230c      	movs	r3, #12
    d72e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    d732:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    d734:	4b0e      	ldr	r3, [pc, #56]	; (d770 <entropy_nrf5_init+0x6c>)
    d736:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    d73a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    d73e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    d742:	f022 0201 	bic.w	r2, r2, #1
    d746:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    d74a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d74c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    d750:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d754:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    d758:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d75a:	6019      	str	r1, [r3, #0]
    d75c:	200d      	movs	r0, #13
    d75e:	f7fd fe01 	bl	b364 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    d762:	200d      	movs	r0, #13
    d764:	f7fd fdce 	bl	b304 <arch_irq_enable>

	return 0;
}
    d768:	4628      	mov	r0, r5
    d76a:	bd38      	pop	{r3, r4, r5, pc}
    d76c:	20001968 	.word	0x20001968
    d770:	4000d000 	.word	0x4000d000

0000d774 <isr>:
{
    d774:	b510      	push	{r4, lr}
	byte = random_byte_get();
    d776:	f7ff fedf 	bl	d538 <random_byte_get>
	if (byte < 0) {
    d77a:	2800      	cmp	r0, #0
    d77c:	db20      	blt.n	d7c0 <isr+0x4c>
	uint8_t last  = rngp->last;
    d77e:	4b17      	ldr	r3, [pc, #92]	; (d7dc <isr+0x68>)
    d780:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    d784:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    d788:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    d78c:	1b14      	subs	r4, r2, r4
    d78e:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    d792:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    d794:	d10d      	bne.n	d7b2 <isr+0x3e>
	uint8_t last  = rngp->last;
    d796:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    d79a:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    d79e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    d7a2:	1b14      	subs	r4, r2, r4
    d7a4:	ea31 0404 	bics.w	r4, r1, r4
    d7a8:	d10b      	bne.n	d7c2 <isr+0x4e>
    d7aa:	4b0d      	ldr	r3, [pc, #52]	; (d7e0 <isr+0x6c>)
    d7ac:	2201      	movs	r2, #1
    d7ae:	605a      	str	r2, [r3, #4]
}
    d7b0:	e00e      	b.n	d7d0 <isr+0x5c>
	rngp->buffer[last] = byte;
    d7b2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    d7b4:	3201      	adds	r2, #1
    d7b6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    d7b8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    d7bc:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
    d7c0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    d7c2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    d7c4:	3201      	adds	r2, #1
    d7c6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    d7c8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    d7cc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    d7d0:	4804      	ldr	r0, [pc, #16]	; (d7e4 <isr+0x70>)
}
    d7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d7d6:	f002 bc9b 	b.w	10110 <z_impl_k_sem_give>
    d7da:	bf00      	nop
    d7dc:	20001968 	.word	0x20001968
    d7e0:	4000d000 	.word	0x4000d000
    d7e4:	20001980 	.word	0x20001980

0000d7e8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    d7e8:	b530      	push	{r4, r5, lr}
	return port->config;
    d7ea:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d7ec:	7b05      	ldrb	r5, [r0, #12]
    d7ee:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    d7f2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    d7f6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d7f8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    d7fc:	d105      	bne.n	d80a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    d7fe:	4620      	mov	r0, r4
    d800:	f001 fdfe 	bl	f400 <nrfx_gpiote_trigger_disable>

		return 0;
    d804:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    d806:	b005      	add	sp, #20
    d808:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    d80a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    d80c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d810:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d814:	d114      	bne.n	d840 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d81a:	bf0c      	ite	eq
    d81c:	2304      	moveq	r3, #4
    d81e:	2305      	movne	r3, #5
    d820:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d824:	2300      	movs	r3, #0
    d826:	4619      	mov	r1, r3
    d828:	aa02      	add	r2, sp, #8
    d82a:	4620      	mov	r0, r4
    d82c:	f001 fc1e 	bl	f06c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d830:	4b1d      	ldr	r3, [pc, #116]	; (d8a8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    d832:	4298      	cmp	r0, r3
    d834:	d135      	bne.n	d8a2 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d836:	2101      	movs	r1, #1
    d838:	4620      	mov	r0, r4
    d83a:	f001 fd9d 	bl	f378 <nrfx_gpiote_trigger_enable>
	return 0;
    d83e:	e7e1      	b.n	d804 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d840:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d844:	d022      	beq.n	d88c <gpio_nrfx_pin_interrupt_configure+0xa4>
    d846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d84a:	bf14      	ite	ne
    d84c:	2301      	movne	r3, #1
    d84e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    d850:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d854:	6883      	ldr	r3, [r0, #8]
    d856:	40cb      	lsrs	r3, r1
    d858:	07d9      	lsls	r1, r3, #31
    d85a:	d4e3      	bmi.n	d824 <gpio_nrfx_pin_interrupt_configure+0x3c>
    d85c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d860:	d1e0      	bne.n	d824 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    d862:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d866:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d86a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d872:	07db      	lsls	r3, r3, #31
    d874:	d4d6      	bmi.n	d824 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d876:	f10d 0507 	add.w	r5, sp, #7
    d87a:	4629      	mov	r1, r5
    d87c:	4620      	mov	r0, r4
    d87e:	f001 fd27 	bl	f2d0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d882:	4b0a      	ldr	r3, [pc, #40]	; (d8ac <gpio_nrfx_pin_interrupt_configure+0xc4>)
    d884:	4298      	cmp	r0, r3
    d886:	d003      	beq.n	d890 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    d888:	9503      	str	r5, [sp, #12]
    d88a:	e7cb      	b.n	d824 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d88c:	2303      	movs	r3, #3
    d88e:	e7df      	b.n	d850 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    d890:	4628      	mov	r0, r5
    d892:	f001 fd6b 	bl	f36c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d896:	4b04      	ldr	r3, [pc, #16]	; (d8a8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    d898:	4298      	cmp	r0, r3
    d89a:	d0f5      	beq.n	d888 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    d89c:	f06f 000b 	mvn.w	r0, #11
    d8a0:	e7b1      	b.n	d806 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    d8a2:	f06f 0015 	mvn.w	r0, #21
    d8a6:	e7ae      	b.n	d806 <gpio_nrfx_pin_interrupt_configure+0x1e>
    d8a8:	0bad0000 	.word	0x0bad0000
    d8ac:	0bad0004 	.word	0x0bad0004

0000d8b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d8b0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d8b2:	f001 fd4b 	bl	f34c <nrfx_gpiote_is_init>
    d8b6:	4604      	mov	r4, r0
    d8b8:	b968      	cbnz	r0, d8d6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d8ba:	f001 fd1f 	bl	f2fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d8be:	4b08      	ldr	r3, [pc, #32]	; (d8e0 <gpio_nrfx_init+0x30>)
    d8c0:	4298      	cmp	r0, r3
    d8c2:	d10a      	bne.n	d8da <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d8c4:	4807      	ldr	r0, [pc, #28]	; (d8e4 <gpio_nrfx_init+0x34>)
    d8c6:	4621      	mov	r1, r4
    d8c8:	f001 fcfc 	bl	f2c4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d8cc:	4622      	mov	r2, r4
    d8ce:	2105      	movs	r1, #5
    d8d0:	2006      	movs	r0, #6
    d8d2:	f7fd fd47 	bl	b364 <z_arm_irq_priority_set>
		return 0;
    d8d6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d8d8:	bd10      	pop	{r4, pc}
		return -EIO;
    d8da:	f06f 0004 	mvn.w	r0, #4
    d8de:	e7fb      	b.n	d8d8 <gpio_nrfx_init+0x28>
    d8e0:	0bad0000 	.word	0x0bad0000
    d8e4:	0000d8e9 	.word	0x0000d8e9

0000d8e8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d8e8:	0943      	lsrs	r3, r0, #5
{
    d8ea:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d8ec:	d107      	bne.n	d8fe <nrfx_gpio_handler+0x16>
	return list->head;
    d8ee:	4b0b      	ldr	r3, [pc, #44]	; (d91c <nrfx_gpio_handler+0x34>)
    d8f0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d8f2:	b121      	cbz	r1, d8fe <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    d8f4:	2501      	movs	r5, #1
	return node->next;
    d8f6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d8f8:	4e09      	ldr	r6, [pc, #36]	; (d920 <nrfx_gpio_handler+0x38>)
    d8fa:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d8fc:	b901      	cbnz	r1, d900 <nrfx_gpio_handler+0x18>
}
    d8fe:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    d900:	688a      	ldr	r2, [r1, #8]
    d902:	402a      	ands	r2, r5
    d904:	d002      	beq.n	d90c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    d906:	684b      	ldr	r3, [r1, #4]
    d908:	4630      	mov	r0, r6
    d90a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d90c:	b11c      	cbz	r4, d916 <nrfx_gpio_handler+0x2e>
    d90e:	6823      	ldr	r3, [r4, #0]
    d910:	4621      	mov	r1, r4
    d912:	461c      	mov	r4, r3
    d914:	e7f2      	b.n	d8fc <nrfx_gpio_handler+0x14>
    d916:	4623      	mov	r3, r4
    d918:	e7fa      	b.n	d910 <nrfx_gpio_handler+0x28>
    d91a:	bf00      	nop
    d91c:	200019bc 	.word	0x200019bc
    d920:	000129ec 	.word	0x000129ec

0000d924 <gpio_nrfx_pin_configure>:
{
    d924:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    d928:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d92a:	7b3b      	ldrb	r3, [r7, #12]
    d92c:	f001 051f 	and.w	r5, r1, #31
    d930:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    d934:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d936:	4628      	mov	r0, r5
    d938:	f10d 0103 	add.w	r1, sp, #3
{
    d93c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d93e:	f001 fcc7 	bl	f2d0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d942:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d946:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d948:	d10b      	bne.n	d962 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    d94a:	4628      	mov	r0, r5
    d94c:	f001 fd80 	bl	f450 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    d950:	4b3d      	ldr	r3, [pc, #244]	; (da48 <gpio_nrfx_pin_configure+0x124>)
    d952:	4598      	cmp	r8, r3
    d954:	d103      	bne.n	d95e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    d956:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d95a:	f001 fd01 	bl	f360 <nrfx_gpiote_channel_free>
		return 0;
    d95e:	2000      	movs	r0, #0
    d960:	e00c      	b.n	d97c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d962:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d964:	4619      	mov	r1, r3
    d966:	aa02      	add	r2, sp, #8
    d968:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    d96a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d96e:	f001 fb7d 	bl	f06c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d972:	4b35      	ldr	r3, [pc, #212]	; (da48 <gpio_nrfx_pin_configure+0x124>)
    d974:	4298      	cmp	r0, r3
    d976:	d004      	beq.n	d982 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    d978:	f06f 0015 	mvn.w	r0, #21
}
    d97c:	b004      	add	sp, #16
    d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    d982:	4580      	cmp	r8, r0
    d984:	d103      	bne.n	d98e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    d986:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d98a:	f001 fce9 	bl	f360 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    d98e:	03a3      	lsls	r3, r4, #14
    d990:	d54b      	bpl.n	da2a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d992:	f240 3306 	movw	r3, #774	; 0x306
    d996:	4023      	ands	r3, r4
    d998:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    d99c:	d019      	beq.n	d9d2 <gpio_nrfx_pin_configure+0xae>
    d99e:	d80c      	bhi.n	d9ba <gpio_nrfx_pin_configure+0x96>
    d9a0:	2b06      	cmp	r3, #6
    d9a2:	d017      	beq.n	d9d4 <gpio_nrfx_pin_configure+0xb0>
    d9a4:	d804      	bhi.n	d9b0 <gpio_nrfx_pin_configure+0x8c>
    d9a6:	b1ab      	cbz	r3, d9d4 <gpio_nrfx_pin_configure+0xb0>
    d9a8:	2b02      	cmp	r3, #2
    d9aa:	d1e5      	bne.n	d978 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    d9ac:	2304      	movs	r3, #4
    d9ae:	e011      	b.n	d9d4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d9b4:	d1e0      	bne.n	d978 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    d9b6:	2301      	movs	r3, #1
    d9b8:	e00c      	b.n	d9d4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d9ba:	f240 2202 	movw	r2, #514	; 0x202
    d9be:	4293      	cmp	r3, r2
    d9c0:	d027      	beq.n	da12 <gpio_nrfx_pin_configure+0xee>
    d9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    d9c6:	d026      	beq.n	da16 <gpio_nrfx_pin_configure+0xf2>
    d9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d9cc:	d1d4      	bne.n	d978 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    d9ce:	2302      	movs	r3, #2
    d9d0:	e000      	b.n	d9d4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    d9d2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    d9d4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    d9d8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    d9dc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    d9e0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    d9e2:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    d9e6:	bf54      	ite	pl
    d9e8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    d9ec:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d9ee:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    d9f0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d9f4:	d511      	bpl.n	da1a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    d9f6:	687a      	ldr	r2, [r7, #4]
    d9f8:	2301      	movs	r3, #1
    d9fa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    d9fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    da00:	2200      	movs	r2, #0
    da02:	a901      	add	r1, sp, #4
    da04:	4628      	mov	r0, r5
    da06:	f001 fbdf 	bl	f1c8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    da0a:	4b0f      	ldr	r3, [pc, #60]	; (da48 <gpio_nrfx_pin_configure+0x124>)
    da0c:	4298      	cmp	r0, r3
    da0e:	d0a6      	beq.n	d95e <gpio_nrfx_pin_configure+0x3a>
    da10:	e7b2      	b.n	d978 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    da12:	2305      	movs	r3, #5
    da14:	e7de      	b.n	d9d4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    da16:	2303      	movs	r3, #3
    da18:	e7dc      	b.n	d9d4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    da1a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    da1c:	bf41      	itttt	mi
    da1e:	2301      	movmi	r3, #1
    da20:	687a      	ldrmi	r2, [r7, #4]
    da22:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    da24:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    da28:	e7ea      	b.n	da00 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    da2a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    da2c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    da30:	bf54      	ite	pl
    da32:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    da36:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    da38:	461a      	mov	r2, r3
    da3a:	a901      	add	r1, sp, #4
    da3c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    da3e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    da42:	f001 fb13 	bl	f06c <nrfx_gpiote_input_configure>
    da46:	e7e0      	b.n	da0a <gpio_nrfx_pin_configure+0xe6>
    da48:	0bad0000 	.word	0x0bad0000

0000da4c <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    da4c:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    da4e:	6843      	ldr	r3, [r0, #4]
    da50:	681b      	ldr	r3, [r3, #0]
NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
#else
    return p_reg->PSELSCL;
    da52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
#else
    return p_reg->PSELSDA;
    da56:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    da5a:	f002 f819 	bl	fa90 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    da5e:	4b03      	ldr	r3, [pc, #12]	; (da6c <i2c_nrfx_twi_recover_bus+0x20>)
    da60:	4298      	cmp	r0, r3
}
    da62:	bf14      	ite	ne
    da64:	f06f 000f 	mvnne.w	r0, #15
    da68:	2000      	moveq	r0, #0
    da6a:	bd08      	pop	{r3, pc}
    da6c:	0bad0000 	.word	0x0bad0000

0000da70 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    da70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    da72:	4604      	mov	r4, r0
    da74:	2200      	movs	r2, #0
    da76:	2101      	movs	r1, #1
    da78:	2003      	movs	r0, #3
    da7a:	f7fd fc73 	bl	b364 <z_arm_irq_priority_set>
    da7e:	6863      	ldr	r3, [r4, #4]
    da80:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    da82:	aa01      	add	r2, sp, #4
    da84:	2100      	movs	r1, #0
    da86:	4628      	mov	r0, r5
    da88:	f004 f887 	bl	11b9a <pinctrl_lookup_state>
	if (ret < 0) {
    da8c:	2800      	cmp	r0, #0
    da8e:	db14      	blt.n	daba <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    da90:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    da92:	682a      	ldr	r2, [r5, #0]
    da94:	7919      	ldrb	r1, [r3, #4]
    da96:	6818      	ldr	r0, [r3, #0]
    da98:	f004 f892 	bl	11bc0 <pinctrl_configure_pins>
    da9c:	2800      	cmp	r0, #0
    da9e:	db0c      	blt.n	daba <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    daa0:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    daa2:	6923      	ldr	r3, [r4, #16]
    daa4:	4a06      	ldr	r2, [pc, #24]	; (dac0 <twi_0_init+0x50>)
    daa6:	f100 0108 	add.w	r1, r0, #8
    daaa:	f001 fe97 	bl	f7dc <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    daae:	4b05      	ldr	r3, [pc, #20]	; (dac4 <twi_0_init+0x54>)
	return 0;
    dab0:	4298      	cmp	r0, r3
    dab2:	bf14      	ite	ne
    dab4:	f06f 000f 	mvnne.w	r0, #15
    dab8:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(0);
    daba:	b003      	add	sp, #12
    dabc:	bd30      	pop	{r4, r5, pc}
    dabe:	bf00      	nop
    dac0:	0000dac9 	.word	0x0000dac9
    dac4:	0bad0000 	.word	0x0bad0000

0000dac8 <event_handler>:
	switch (p_event->type) {
    dac8:	7803      	ldrb	r3, [r0, #0]
    daca:	2b01      	cmp	r3, #1
    dacc:	d008      	beq.n	dae0 <event_handler+0x18>
    dace:	2b02      	cmp	r3, #2
    dad0:	d008      	beq.n	dae4 <event_handler+0x1c>
    dad2:	b94b      	cbnz	r3, dae8 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    dad4:	4b05      	ldr	r3, [pc, #20]	; (daec <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    dad6:	630b      	str	r3, [r1, #48]	; 0x30
    dad8:	f101 0018 	add.w	r0, r1, #24
    dadc:	f002 bb18 	b.w	10110 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    dae0:	4b03      	ldr	r3, [pc, #12]	; (daf0 <event_handler+0x28>)
    dae2:	e7f8      	b.n	dad6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    dae4:	4b03      	ldr	r3, [pc, #12]	; (daf4 <event_handler+0x2c>)
    dae6:	e7f6      	b.n	dad6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    dae8:	4b03      	ldr	r3, [pc, #12]	; (daf8 <event_handler+0x30>)
    daea:	e7f4      	b.n	dad6 <event_handler+0xe>
    daec:	0bad0000 	.word	0x0bad0000
    daf0:	0bae0001 	.word	0x0bae0001
    daf4:	0bae0002 	.word	0x0bae0002
    daf8:	0bad0001 	.word	0x0bad0001

0000dafc <i2c_nrfx_twi_transfer>:
{
    dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db00:	b08b      	sub	sp, #44	; 0x2c
    db02:	4605      	mov	r5, r0
    db04:	460c      	mov	r4, r1
    db06:	4690      	mov	r8, r2
    db08:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
    db0a:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    db0c:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    db0e:	f04f 32ff 	mov.w	r2, #4294967295
    db12:	f04f 33ff 	mov.w	r3, #4294967295
    db16:	4630      	mov	r0, r6
    db18:	f002 fb20 	bl	1015c <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    db1c:	f106 0a18 	add.w	sl, r6, #24
    db20:	2200      	movs	r2, #0
    db22:	2300      	movs	r3, #0
    db24:	4650      	mov	r0, sl
    db26:	f002 fb19 	bl	1015c <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    db2a:	4638      	mov	r0, r7
    db2c:	f001 feaa 	bl	f884 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    db30:	f8df b0c0 	ldr.w	fp, [pc, #192]	; dbf4 <i2c_nrfx_twi_transfer+0xf8>
	for (size_t i = 0; i < num_msgs; i++) {
    db34:	f04f 0900 	mov.w	r9, #0
    db38:	45c1      	cmp	r9, r8
    db3a:	d301      	bcc.n	db40 <i2c_nrfx_twi_transfer+0x44>
    db3c:	2400      	movs	r4, #0
    db3e:	e02e      	b.n	db9e <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    db40:	7a23      	ldrb	r3, [r4, #8]
    db42:	9303      	str	r3, [sp, #12]
    db44:	f013 0108 	ands.w	r1, r3, #8
    db48:	d14d      	bne.n	dbe6 <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    db4a:	2212      	movs	r2, #18
    db4c:	f10d 0016 	add.w	r0, sp, #22
    db50:	9102      	str	r1, [sp, #8]
    db52:	f003 fe0a 	bl	1176a <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    db56:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
    db58:	6860      	ldr	r0, [r4, #4]
    db5a:	9901      	ldr	r1, [sp, #4]
    db5c:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    db5e:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    db62:	6820      	ldr	r0, [r4, #0]
    db64:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    db68:	f013 0f02 	tst.w	r3, #2
    db6c:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
    db6e:	f88d 2014 	strb.w	r2, [sp, #20]
    db72:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    db74:	d11d      	bne.n	dbb2 <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
    db76:	f108 33ff 	add.w	r3, r8, #4294967295
    db7a:	454b      	cmp	r3, r9
    db7c:	d902      	bls.n	db84 <i2c_nrfx_twi_transfer+0x88>
    db7e:	7d23      	ldrb	r3, [r4, #20]
    db80:	075b      	lsls	r3, r3, #29
    db82:	d518      	bpl.n	dbb6 <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    db84:	bb7a      	cbnz	r2, dbe6 <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    db86:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    db88:	a905      	add	r1, sp, #20
    db8a:	4638      	mov	r0, r7
    db8c:	f001 fea6 	bl	f8dc <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    db90:	4558      	cmp	r0, fp
    db92:	d012      	beq.n	dbba <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
    db94:	4b18      	ldr	r3, [pc, #96]	; (dbf8 <i2c_nrfx_twi_transfer+0xfc>)
    db96:	4298      	cmp	r0, r3
    db98:	d028      	beq.n	dbec <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
    db9a:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    db9e:	4638      	mov	r0, r7
    dba0:	f001 fe80 	bl	f8a4 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    dba4:	4630      	mov	r0, r6
    dba6:	f002 fab3 	bl	10110 <z_impl_k_sem_give>
}
    dbaa:	4620      	mov	r0, r4
    dbac:	b00b      	add	sp, #44	; 0x2c
    dbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    dbb2:	460a      	mov	r2, r1
    dbb4:	e7e8      	b.n	db88 <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    dbb6:	2240      	movs	r2, #64	; 0x40
    dbb8:	e7e6      	b.n	db88 <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    dbba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dbbe:	2300      	movs	r3, #0
    dbc0:	4650      	mov	r0, sl
    dbc2:	f002 facb 	bl	1015c <z_impl_k_sem_take>
		if (ret != 0) {
    dbc6:	b130      	cbz	r0, dbd6 <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
    dbc8:	4638      	mov	r0, r7
    dbca:	f001 fe6b 	bl	f8a4 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    dbce:	4628      	mov	r0, r5
    dbd0:	f7ff ff3c 	bl	da4c <i2c_nrfx_twi_recover_bus>
			break;
    dbd4:	e7e1      	b.n	db9a <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
    dbd6:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    dbd8:	455b      	cmp	r3, fp
    dbda:	f104 040c 	add.w	r4, r4, #12
    dbde:	d1dc      	bne.n	db9a <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    dbe0:	f109 0901 	add.w	r9, r9, #1
    dbe4:	e7a8      	b.n	db38 <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    dbe6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    dbea:	e7d8      	b.n	db9e <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
    dbec:	f06f 040f 	mvn.w	r4, #15
    dbf0:	e7d5      	b.n	db9e <i2c_nrfx_twi_transfer+0xa2>
    dbf2:	bf00      	nop
    dbf4:	0bad0000 	.word	0x0bad0000
    dbf8:	0bad000b 	.word	0x0bad000b

0000dbfc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    dbfc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    dbfe:	794b      	ldrb	r3, [r1, #5]
    dc00:	2b01      	cmp	r3, #1
    dc02:	d120      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    dc04:	798b      	ldrb	r3, [r1, #6]
    dc06:	2b03      	cmp	r3, #3
    dc08:	d11d      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    dc0a:	79cd      	ldrb	r5, [r1, #7]
    dc0c:	b10d      	cbz	r5, dc12 <uarte_nrfx_configure+0x16>
    dc0e:	2d01      	cmp	r5, #1
    dc10:	d119      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    dc12:	790a      	ldrb	r2, [r1, #4]
    dc14:	b112      	cbz	r2, dc1c <uarte_nrfx_configure+0x20>
    dc16:	2a02      	cmp	r2, #2
    dc18:	d115      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
    dc1a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    dc1c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    dc1e:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    dc20:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    dc24:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
    dc26:	d064      	beq.n	dcf2 <uarte_nrfx_configure+0xf6>
    dc28:	d82b      	bhi.n	dc82 <uarte_nrfx_configure+0x86>
    dc2a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    dc2e:	d063      	beq.n	dcf8 <uarte_nrfx_configure+0xfc>
    dc30:	d814      	bhi.n	dc5c <uarte_nrfx_configure+0x60>
    dc32:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    dc36:	d061      	beq.n	dcfc <uarte_nrfx_configure+0x100>
    dc38:	d808      	bhi.n	dc4c <uarte_nrfx_configure+0x50>
    dc3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    dc3e:	d060      	beq.n	dd02 <uarte_nrfx_configure+0x106>
    dc40:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    dc44:	d060      	beq.n	dd08 <uarte_nrfx_configure+0x10c>
    dc46:	f06f 0085 	mvn.w	r0, #133	; 0x85
    dc4a:	e051      	b.n	dcf0 <uarte_nrfx_configure+0xf4>
    dc4c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    dc50:	d05d      	beq.n	dd0e <uarte_nrfx_configure+0x112>
    dc52:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    dc56:	d1f6      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    dc58:	4b37      	ldr	r3, [pc, #220]	; (dd38 <uarte_nrfx_configure+0x13c>)
    dc5a:	e03c      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dc5c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    dc60:	d058      	beq.n	dd14 <uarte_nrfx_configure+0x118>
    dc62:	d807      	bhi.n	dc74 <uarte_nrfx_configure+0x78>
    dc64:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    dc68:	d056      	beq.n	dd18 <uarte_nrfx_configure+0x11c>
    dc6a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    dc6e:	d1ea      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    dc70:	4b32      	ldr	r3, [pc, #200]	; (dd3c <uarte_nrfx_configure+0x140>)
    dc72:	e030      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dc74:	f647 2412 	movw	r4, #31250	; 0x7a12
    dc78:	42a3      	cmp	r3, r4
    dc7a:	d1e4      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    dc7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    dc80:	e029      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dc82:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    dc86:	d049      	beq.n	dd1c <uarte_nrfx_configure+0x120>
    dc88:	d813      	bhi.n	dcb2 <uarte_nrfx_configure+0xb6>
    dc8a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    dc8e:	d048      	beq.n	dd22 <uarte_nrfx_configure+0x126>
    dc90:	d809      	bhi.n	dca6 <uarte_nrfx_configure+0xaa>
    dc92:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    dc96:	42a3      	cmp	r3, r4
    dc98:	d045      	beq.n	dd26 <uarte_nrfx_configure+0x12a>
    dc9a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    dc9e:	d1d2      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    dca0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    dca4:	e017      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dca6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    dcaa:	d1cc      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    dcac:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    dcb0:	e011      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dcb2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    dcb6:	d039      	beq.n	dd2c <uarte_nrfx_configure+0x130>
    dcb8:	d808      	bhi.n	dccc <uarte_nrfx_configure+0xd0>
    dcba:	4c21      	ldr	r4, [pc, #132]	; (dd40 <uarte_nrfx_configure+0x144>)
    dcbc:	42a3      	cmp	r3, r4
    dcbe:	d038      	beq.n	dd32 <uarte_nrfx_configure+0x136>
    dcc0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    dcc4:	d1bf      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    dcc6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    dcca:	e004      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dccc:	4c1d      	ldr	r4, [pc, #116]	; (dd44 <uarte_nrfx_configure+0x148>)
    dcce:	42a3      	cmp	r3, r4
    dcd0:	d1b9      	bne.n	dc46 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dcd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    dcd6:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    dcd8:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
    dcdc:	6843      	ldr	r3, [r0, #4]
    dcde:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    dce0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    dce2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    dce6:	c903      	ldmia	r1, {r0, r1}
    dce8:	1d23      	adds	r3, r4, #4
    dcea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    dcee:	2000      	movs	r0, #0
}
    dcf0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    dcf2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    dcf6:	e7ee      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    dcf8:	4b13      	ldr	r3, [pc, #76]	; (dd48 <uarte_nrfx_configure+0x14c>)
    dcfa:	e7ec      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    dcfc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    dd00:	e7e9      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    dd02:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    dd06:	e7e6      	b.n	dcd6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    dd08:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    dd0c:	e7e3      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    dd0e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    dd12:	e7e0      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    dd14:	4b0d      	ldr	r3, [pc, #52]	; (dd4c <uarte_nrfx_configure+0x150>)
    dd16:	e7de      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    dd18:	4b0d      	ldr	r3, [pc, #52]	; (dd50 <uarte_nrfx_configure+0x154>)
    dd1a:	e7dc      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    dd1c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    dd20:	e7d9      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    dd22:	4b0c      	ldr	r3, [pc, #48]	; (dd54 <uarte_nrfx_configure+0x158>)
    dd24:	e7d7      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    dd26:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    dd2a:	e7d4      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    dd2c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    dd30:	e7d1      	b.n	dcd6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    dd32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    dd36:	e7ce      	b.n	dcd6 <uarte_nrfx_configure+0xda>
    dd38:	0013b000 	.word	0x0013b000
    dd3c:	004ea000 	.word	0x004ea000
    dd40:	0003d090 	.word	0x0003d090
    dd44:	000f4240 	.word	0x000f4240
    dd48:	00275000 	.word	0x00275000
    dd4c:	0075c000 	.word	0x0075c000
    dd50:	003af000 	.word	0x003af000
    dd54:	013a9000 	.word	0x013a9000

0000dd58 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    dd58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dd5c:	4680      	mov	r8, r0
    dd5e:	2200      	movs	r2, #0
    dd60:	2101      	movs	r1, #1
    dd62:	2002      	movs	r0, #2
    dd64:	f7fd fafe 	bl	b364 <z_arm_irq_priority_set>
    dd68:	2002      	movs	r0, #2
    dd6a:	f7fd facb 	bl	b304 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    dd6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    dd72:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    dd76:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    dd78:	2100      	movs	r1, #0
    dd7a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    dd7e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    dd82:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    dd86:	aa01      	add	r2, sp, #4
    dd88:	4648      	mov	r0, r9
    dd8a:	f003 ff06 	bl	11b9a <pinctrl_lookup_state>
	if (ret < 0) {
    dd8e:	1e05      	subs	r5, r0, #0
    dd90:	db54      	blt.n	de3c <uarte_0_init+0xe4>
	return pinctrl_apply_state_direct(config, state);
    dd92:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    dd94:	f8d9 2000 	ldr.w	r2, [r9]
    dd98:	7919      	ldrb	r1, [r3, #4]
    dd9a:	6818      	ldr	r0, [r3, #0]
    dd9c:	f003 ff10 	bl	11bc0 <pinctrl_configure_pins>
	if (err < 0) {
    dda0:	1e05      	subs	r5, r0, #0
    dda2:	db4b      	blt.n	de3c <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    dda4:	1d31      	adds	r1, r6, #4
    dda6:	4640      	mov	r0, r8
    dda8:	f7ff ff28 	bl	dbfc <uarte_nrfx_configure>
	if (err) {
    ddac:	4605      	mov	r5, r0
    ddae:	2800      	cmp	r0, #0
    ddb0:	d144      	bne.n	de3c <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    ddb2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    ddb4:	0799      	lsls	r1, r3, #30
    ddb6:	d51a      	bpl.n	ddee <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    ddb8:	f106 0018 	add.w	r0, r6, #24
    ddbc:	f001 fc14 	bl	f5e8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    ddc0:	4b22      	ldr	r3, [pc, #136]	; (de4c <uarte_0_init+0xf4>)
    ddc2:	4298      	cmp	r0, r3
    ddc4:	d13e      	bne.n	de44 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ddc6:	7e33      	ldrb	r3, [r6, #24]
    ddc8:	00db      	lsls	r3, r3, #3
    ddca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ddce:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    ddd2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    ddd6:	f504 7190 	add.w	r1, r4, #288	; 0x120
    ddda:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ddde:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    dde2:	7e32      	ldrb	r2, [r6, #24]
    dde4:	2301      	movs	r3, #1
    dde6:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    dde8:	4a19      	ldr	r2, [pc, #100]	; (de50 <uarte_0_init+0xf8>)
    ddea:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ddee:	2308      	movs	r3, #8
    ddf0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    ddf4:	7a3b      	ldrb	r3, [r7, #8]
    ddf6:	b953      	cbnz	r3, de0e <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ddf8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ddfc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    de00:	6973      	ldr	r3, [r6, #20]
    de02:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    de06:	2301      	movs	r3, #1
    de08:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    de0c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    de0e:	687b      	ldr	r3, [r7, #4]
    de10:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    de12:	bf5c      	itt	pl
    de14:	f44f 7380 	movpl.w	r3, #256	; 0x100
    de18:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    de1c:	687b      	ldr	r3, [r7, #4]
    de1e:	06db      	lsls	r3, r3, #27
    de20:	bf44      	itt	mi
    de22:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    de26:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    de2a:	6933      	ldr	r3, [r6, #16]
    de2c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    de30:	2300      	movs	r3, #0
    de32:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    de36:	2301      	movs	r3, #1
    de38:	60a3      	str	r3, [r4, #8]
    de3a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    de3c:	4628      	mov	r0, r5
    de3e:	b003      	add	sp, #12
    de40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    de44:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    de48:	e7f8      	b.n	de3c <uarte_0_init+0xe4>
    de4a:	bf00      	nop
    de4c:	0bad0000 	.word	0x0bad0000
    de50:	4001f000 	.word	0x4001f000

0000de54 <uarte_nrfx_poll_out>:
{
    de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de56:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    de58:	6907      	ldr	r7, [r0, #16]
{
    de5a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    de5c:	f004 f995 	bl	1218a <k_is_in_isr>
    de60:	b9b0      	cbnz	r0, de90 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    de62:	4b2e      	ldr	r3, [pc, #184]	; (df1c <uarte_nrfx_poll_out+0xc8>)
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	b19b      	cbz	r3, de90 <uarte_nrfx_poll_out+0x3c>
{
    de68:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    de6a:	6860      	ldr	r0, [r4, #4]
    de6c:	f003 ff52 	bl	11d14 <is_tx_ready.isra.0>
    de70:	bb00      	cbnz	r0, deb4 <uarte_nrfx_poll_out+0x60>
    de72:	2001      	movs	r0, #1
    de74:	f004 f83d 	bl	11ef2 <nrfx_busy_wait>
    de78:	3e01      	subs	r6, #1
    de7a:	d1f6      	bne.n	de6a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    de7c:	2100      	movs	r1, #0
    de7e:	2021      	movs	r0, #33	; 0x21
    de80:	f002 fd8a 	bl	10998 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    de84:	e7f0      	b.n	de68 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    de86:	f386 8811 	msr	BASEPRI, r6
    de8a:	f3bf 8f6f 	isb	sy
}
    de8e:	e7f5      	b.n	de7c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    de90:	f04f 0340 	mov.w	r3, #64	; 0x40
    de94:	f3ef 8611 	mrs	r6, BASEPRI
    de98:	f383 8812 	msr	BASEPRI_MAX, r3
    de9c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dea0:	6860      	ldr	r0, [r4, #4]
    dea2:	4631      	mov	r1, r6
    dea4:	f003 ff36 	bl	11d14 <is_tx_ready.isra.0>
    dea8:	b990      	cbnz	r0, ded0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    deaa:	f386 8811 	msr	BASEPRI, r6
    deae:	f3bf 8f6f 	isb	sy
}
    deb2:	e7ed      	b.n	de90 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    deb4:	f04f 0340 	mov.w	r3, #64	; 0x40
    deb8:	f3ef 8611 	mrs	r6, BASEPRI
    debc:	f383 8812 	msr	BASEPRI_MAX, r3
    dec0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dec4:	6860      	ldr	r0, [r4, #4]
    dec6:	4631      	mov	r1, r6
    dec8:	f003 ff24 	bl	11d14 <is_tx_ready.isra.0>
    decc:	2800      	cmp	r0, #0
    dece:	d0da      	beq.n	de86 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    ded0:	693b      	ldr	r3, [r7, #16]
    ded2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    ded4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ded6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    ded8:	6813      	ldr	r3, [r2, #0]
    deda:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dede:	2001      	movs	r0, #1
    dee0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dee4:	2000      	movs	r0, #0
    dee6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    deea:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    deee:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    def2:	6852      	ldr	r2, [r2, #4]
    def4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    def8:	06d2      	lsls	r2, r2, #27
    defa:	d508      	bpl.n	df0e <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    defc:	6862      	ldr	r2, [r4, #4]
    defe:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    df00:	2008      	movs	r0, #8
    df02:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    df06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    df0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df0e:	2201      	movs	r2, #1
    df10:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    df12:	f381 8811 	msr	BASEPRI, r1
    df16:	f3bf 8f6f 	isb	sy
}
    df1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df1c:	20001fcd 	.word	0x20001fcd

0000df20 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    df20:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    df22:	2301      	movs	r3, #1
    df24:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    df26:	4a0e      	ldr	r2, [pc, #56]	; (df60 <compare_int_lock+0x40>)
    df28:	f3bf 8f5b 	dmb	ish
    df2c:	43dc      	mvns	r4, r3
    df2e:	e852 1f00 	ldrex	r1, [r2]
    df32:	ea01 0504 	and.w	r5, r1, r4
    df36:	e842 5600 	strex	r6, r5, [r2]
    df3a:	2e00      	cmp	r6, #0
    df3c:	d1f7      	bne.n	df2e <compare_int_lock+0xe>
    df3e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    df42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    df46:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    df48:	4806      	ldr	r0, [pc, #24]	; (df64 <compare_int_lock+0x44>)
    df4a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    df4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    df52:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    df56:	420b      	tst	r3, r1
}
    df58:	bf14      	ite	ne
    df5a:	2001      	movne	r0, #1
    df5c:	2000      	moveq	r0, #0
    df5e:	bd70      	pop	{r4, r5, r6, pc}
    df60:	200019cc 	.word	0x200019cc
    df64:	40011000 	.word	0x40011000

0000df68 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    df68:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    df6a:	490e      	ldr	r1, [pc, #56]	; (dfa4 <sys_clock_timeout_handler+0x3c>)
    df6c:	e9d1 3400 	ldrd	r3, r4, [r1]
    df70:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    df72:	18c3      	adds	r3, r0, r3
    df74:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    df78:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    df7c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    df80:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    df84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    df88:	d209      	bcs.n	df9e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    df8a:	4b07      	ldr	r3, [pc, #28]	; (dfa8 <sys_clock_timeout_handler+0x40>)
    df8c:	681b      	ldr	r3, [r3, #0]
    df8e:	0a1a      	lsrs	r2, r3, #8
    df90:	061b      	lsls	r3, r3, #24
    df92:	199c      	adds	r4, r3, r6
    df94:	4b05      	ldr	r3, [pc, #20]	; (dfac <sys_clock_timeout_handler+0x44>)
    df96:	f142 0500 	adc.w	r5, r2, #0
    df9a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    df9e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    dfa0:	f002 be62 	b.w	10c68 <sys_clock_announce>
    dfa4:	200014b0 	.word	0x200014b0
    dfa8:	200019d0 	.word	0x200019d0
    dfac:	200014b8 	.word	0x200014b8

0000dfb0 <compare_int_unlock>:
	if (key) {
    dfb0:	b311      	cbz	r1, dff8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dfb2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    dfb6:	2301      	movs	r3, #1
    dfb8:	4a10      	ldr	r2, [pc, #64]	; (dffc <compare_int_unlock+0x4c>)
    dfba:	4083      	lsls	r3, r0
    dfbc:	e852 cf00 	ldrex	ip, [r2]
    dfc0:	ea4c 0c03 	orr.w	ip, ip, r3
    dfc4:	e842 c100 	strex	r1, ip, [r2]
    dfc8:	2900      	cmp	r1, #0
    dfca:	d1f7      	bne.n	dfbc <compare_int_unlock+0xc>
    dfcc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    dfd0:	4a0b      	ldr	r2, [pc, #44]	; (e000 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dfd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    dfd6:	4083      	lsls	r3, r0
    dfd8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dfdc:	4b09      	ldr	r3, [pc, #36]	; (e004 <compare_int_unlock+0x54>)
    dfde:	f3bf 8f5b 	dmb	ish
    dfe2:	681b      	ldr	r3, [r3, #0]
    dfe4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    dfe8:	40c3      	lsrs	r3, r0
    dfea:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dfec:	bf42      	ittt	mi
    dfee:	4b06      	ldrmi	r3, [pc, #24]	; (e008 <compare_int_unlock+0x58>)
    dff0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    dff4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    dff8:	4770      	bx	lr
    dffa:	bf00      	nop
    dffc:	200019cc 	.word	0x200019cc
    e000:	40011000 	.word	0x40011000
    e004:	200019c8 	.word	0x200019c8
    e008:	e000e100 	.word	0xe000e100

0000e00c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    e00c:	4b0d      	ldr	r3, [pc, #52]	; (e044 <z_nrf_rtc_timer_read+0x38>)
    e00e:	6818      	ldr	r0, [r3, #0]
    e010:	0a01      	lsrs	r1, r0, #8
    e012:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    e014:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    e018:	4b0b      	ldr	r3, [pc, #44]	; (e048 <z_nrf_rtc_timer_read+0x3c>)
    e01a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    e01e:	1818      	adds	r0, r3, r0
    e020:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    e024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    e028:	d20a      	bcs.n	e040 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    e02a:	4b08      	ldr	r3, [pc, #32]	; (e04c <z_nrf_rtc_timer_read+0x40>)
    e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e030:	4290      	cmp	r0, r2
    e032:	eb71 0303 	sbcs.w	r3, r1, r3
    e036:	d203      	bcs.n	e040 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    e038:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    e03c:	f141 0100 	adc.w	r1, r1, #0
}
    e040:	4770      	bx	lr
    e042:	bf00      	nop
    e044:	200019d0 	.word	0x200019d0
    e048:	40011000 	.word	0x40011000
    e04c:	200014b8 	.word	0x200014b8

0000e050 <compare_set>:
{
    e050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e054:	4616      	mov	r6, r2
    e056:	461f      	mov	r7, r3
    e058:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    e05a:	f7ff ff61 	bl	df20 <compare_int_lock>
    e05e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    e060:	f7ff ffd4 	bl	e00c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    e064:	42b0      	cmp	r0, r6
    e066:	eb71 0307 	sbcs.w	r3, r1, r7
    e06a:	d251      	bcs.n	e110 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    e06c:	4b3a      	ldr	r3, [pc, #232]	; (e158 <compare_set+0x108>)
    e06e:	1a30      	subs	r0, r6, r0
    e070:	eb67 0101 	sbc.w	r1, r7, r1
    e074:	4298      	cmp	r0, r3
    e076:	f171 0100 	sbcs.w	r1, r1, #0
    e07a:	d26a      	bcs.n	e152 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    e07c:	4b37      	ldr	r3, [pc, #220]	; (e15c <compare_set+0x10c>)
    e07e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    e082:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    e086:	429f      	cmp	r7, r3
    e088:	bf08      	it	eq
    e08a:	4296      	cmpeq	r6, r2
    e08c:	d04e      	beq.n	e12c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    e08e:	4934      	ldr	r1, [pc, #208]	; (e160 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e090:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    e094:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e098:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    e09c:	00ad      	lsls	r5, r5, #2
    e09e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    e0a2:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e0a4:	b2ad      	uxth	r5, r5
    e0a6:	f003 fe7f 	bl	11da8 <event_clear>
	return absolute_time & COUNTER_MAX;
    e0aa:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    e0ae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    e0b2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    e0b6:	4a2b      	ldr	r2, [pc, #172]	; (e164 <compare_set+0x114>)
    e0b8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e0ba:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    e0be:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    e0c0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    e0c4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e0c6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    e0ca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    e0ce:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    e0d2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    e0d6:	f06f 0002 	mvn.w	r0, #2
    e0da:	eba0 0008 	sub.w	r0, r0, r8
    e0de:	4460      	add	r0, ip
    e0e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    e0e4:	4290      	cmp	r0, r2
    e0e6:	d921      	bls.n	e12c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e0e8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    e0ea:	b160      	cbz	r0, e106 <compare_set+0xb6>
     return p_reg->COUNTER;
    e0ec:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    e0f0:	eba8 000b 	sub.w	r0, r8, fp
    e0f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    e0f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e0fc:	d916      	bls.n	e12c <compare_set+0xdc>
					event_clear(chan);
    e0fe:	4620      	mov	r0, r4
    e100:	f003 fe52 	bl	11da8 <event_clear>
    e104:	4a17      	ldr	r2, [pc, #92]	; (e164 <compare_set+0x114>)
			cc_val = now + cc_inc;
    e106:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    e10a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    e10e:	e7d9      	b.n	e0c4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    e110:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e112:	4a15      	ldr	r2, [pc, #84]	; (e168 <compare_set+0x118>)
    e114:	f3bf 8f5b 	dmb	ish
    e118:	40a3      	lsls	r3, r4
    e11a:	e852 0f00 	ldrex	r0, [r2]
    e11e:	4318      	orrs	r0, r3
    e120:	e842 0100 	strex	r1, r0, [r2]
    e124:	2900      	cmp	r1, #0
    e126:	d1f8      	bne.n	e11a <compare_set+0xca>
    e128:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    e12c:	490b      	ldr	r1, [pc, #44]	; (e15c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    e12e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    e130:	0123      	lsls	r3, r4, #4
    e132:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    e136:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    e13a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    e13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e13e:	6053      	str	r3, [r2, #4]
	return ret;
    e140:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    e142:	4620      	mov	r0, r4
    e144:	9900      	ldr	r1, [sp, #0]
    e146:	f7ff ff33 	bl	dfb0 <compare_int_unlock>
}
    e14a:	4628      	mov	r0, r5
    e14c:	b003      	add	sp, #12
    e14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    e152:	f06f 0515 	mvn.w	r5, #21
    e156:	e7f4      	b.n	e142 <compare_set+0xf2>
    e158:	00800001 	.word	0x00800001
    e15c:	200014a0 	.word	0x200014a0
    e160:	40011000 	.word	0x40011000
    e164:	007ffffd 	.word	0x007ffffd
    e168:	200019c8 	.word	0x200019c8

0000e16c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    e16c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    e16e:	4c1b      	ldr	r4, [pc, #108]	; (e1dc <sys_clock_driver_init+0x70>)
    e170:	4b1b      	ldr	r3, [pc, #108]	; (e1e0 <sys_clock_driver_init+0x74>)
    e172:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    e176:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    e17a:	4b1a      	ldr	r3, [pc, #104]	; (e1e4 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    e17c:	2500      	movs	r5, #0
    e17e:	f04f 30ff 	mov.w	r0, #4294967295
    e182:	f04f 31ff 	mov.w	r1, #4294967295
    e186:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    e18a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    e18e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e192:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e196:	4b14      	ldr	r3, [pc, #80]	; (e1e8 <sys_clock_driver_init+0x7c>)
    e198:	2602      	movs	r6, #2
    e19a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    e19e:	2101      	movs	r1, #1
    e1a0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    e1a4:	2011      	movs	r0, #17
    e1a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e1aa:	462a      	mov	r2, r5
    e1ac:	f7fd f8da 	bl	b364 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    e1b0:	2011      	movs	r0, #17
    e1b2:	f7fd f8a7 	bl	b304 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    e1b6:	4a0d      	ldr	r2, [pc, #52]	; (e1ec <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e1b8:	2301      	movs	r3, #1
    e1ba:	60a3      	str	r3, [r4, #8]
    e1bc:	6023      	str	r3, [r4, #0]
    e1be:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    e1c0:	4b0b      	ldr	r3, [pc, #44]	; (e1f0 <sys_clock_driver_init+0x84>)
    e1c2:	4a0c      	ldr	r2, [pc, #48]	; (e1f4 <sys_clock_driver_init+0x88>)
    e1c4:	9300      	str	r3, [sp, #0]
    e1c6:	9501      	str	r5, [sp, #4]
    e1c8:	2300      	movs	r3, #0
    e1ca:	4628      	mov	r0, r5
    e1cc:	f7ff ff40 	bl	e050 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    e1d0:	4630      	mov	r0, r6
    e1d2:	f7ff f92f 	bl	d434 <z_nrf_clock_control_lf_on>

	return 0;
}
    e1d6:	4628      	mov	r0, r5
    e1d8:	b002      	add	sp, #8
    e1da:	bd70      	pop	{r4, r5, r6, pc}
    e1dc:	40011000 	.word	0x40011000
    e1e0:	000f0003 	.word	0x000f0003
    e1e4:	200014a0 	.word	0x200014a0
    e1e8:	e000e100 	.word	0xe000e100
    e1ec:	200019cc 	.word	0x200019cc
    e1f0:	0000df69 	.word	0x0000df69
    e1f4:	007fffff 	.word	0x007fffff

0000e1f8 <rtc_nrf_isr>:
{
    e1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    e1fc:	4c2b      	ldr	r4, [pc, #172]	; (e2ac <rtc_nrf_isr+0xb4>)
    e1fe:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    e202:	0799      	lsls	r1, r3, #30
    e204:	d50b      	bpl.n	e21e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e206:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    e20a:	b143      	cbz	r3, e21e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    e20c:	4a28      	ldr	r2, [pc, #160]	; (e2b0 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e20e:	2300      	movs	r3, #0
    e210:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    e214:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    e218:	6813      	ldr	r3, [r2, #0]
    e21a:	3301      	adds	r3, #1
    e21c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    e21e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    e222:	03da      	lsls	r2, r3, #15
    e224:	d523      	bpl.n	e26e <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e226:	f3bf 8f5b 	dmb	ish
    e22a:	4b22      	ldr	r3, [pc, #136]	; (e2b4 <rtc_nrf_isr+0xbc>)
    e22c:	e853 2f00 	ldrex	r2, [r3]
    e230:	f022 0101 	bic.w	r1, r2, #1
    e234:	e843 1000 	strex	r0, r1, [r3]
    e238:	2800      	cmp	r0, #0
    e23a:	d1f7      	bne.n	e22c <rtc_nrf_isr+0x34>
    e23c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    e240:	07d3      	lsls	r3, r2, #31
    e242:	d402      	bmi.n	e24a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e244:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e248:	b18b      	cbz	r3, e26e <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e24a:	2500      	movs	r5, #0
    e24c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    e250:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    e254:	f7ff feda 	bl	e00c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e258:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e25c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    e25e:	4b16      	ldr	r3, [pc, #88]	; (e2b8 <rtc_nrf_isr+0xc0>)
    e260:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    e264:	42b0      	cmp	r0, r6
    e266:	41b9      	sbcs	r1, r7
    e268:	d204      	bcs.n	e274 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e26a:	f382 8810 	msr	PRIMASK, r2
}
    e26e:	b003      	add	sp, #12
    e270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e274:	f04f 38ff 	mov.w	r8, #4294967295
    e278:	f04f 39ff 	mov.w	r9, #4294967295
    e27c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    e280:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    e284:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    e286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e28a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e28e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    e292:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e296:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    e29a:	2900      	cmp	r1, #0
    e29c:	d0e7      	beq.n	e26e <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
    e29e:	9000      	str	r0, [sp, #0]
    e2a0:	4632      	mov	r2, r6
    e2a2:	463b      	mov	r3, r7
    e2a4:	4628      	mov	r0, r5
    e2a6:	4788      	blx	r1
    e2a8:	e7e1      	b.n	e26e <rtc_nrf_isr+0x76>
    e2aa:	bf00      	nop
    e2ac:	40011000 	.word	0x40011000
    e2b0:	200019d0 	.word	0x200019d0
    e2b4:	200019c8 	.word	0x200019c8
    e2b8:	200014a0 	.word	0x200014a0

0000e2bc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    e2bc:	1c43      	adds	r3, r0, #1
{
    e2be:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    e2c0:	d022      	beq.n	e308 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    e2c2:	2801      	cmp	r0, #1
    e2c4:	dd22      	ble.n	e30c <sys_clock_set_timeout+0x50>
    e2c6:	4a12      	ldr	r2, [pc, #72]	; (e310 <sys_clock_set_timeout+0x54>)
    e2c8:	4b12      	ldr	r3, [pc, #72]	; (e314 <sys_clock_set_timeout+0x58>)
    e2ca:	4290      	cmp	r0, r2
    e2cc:	bfd4      	ite	le
    e2ce:	4604      	movle	r4, r0
    e2d0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e2d2:	f7ff fe9b 	bl	e00c <z_nrf_rtc_timer_read>
    e2d6:	4b10      	ldr	r3, [pc, #64]	; (e318 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    e2d8:	490e      	ldr	r1, [pc, #56]	; (e314 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2de:	1a80      	subs	r0, r0, r2
		cyc = 0;
    e2e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e2e4:	bf28      	it	cs
    e2e6:	2400      	movcs	r4, #0
	cyc += unannounced;
    e2e8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    e2ea:	428c      	cmp	r4, r1
    e2ec:	bf28      	it	cs
    e2ee:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    e2f0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e2f2:	490a      	ldr	r1, [pc, #40]	; (e31c <sys_clock_set_timeout+0x60>)
    e2f4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    e2f6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e2fa:	9001      	str	r0, [sp, #4]
    e2fc:	f143 0300 	adc.w	r3, r3, #0
    e300:	f7ff fea6 	bl	e050 <compare_set>
}
    e304:	b002      	add	sp, #8
    e306:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    e308:	4c02      	ldr	r4, [pc, #8]	; (e314 <sys_clock_set_timeout+0x58>)
    e30a:	e7e2      	b.n	e2d2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    e30c:	2401      	movs	r4, #1
    e30e:	e7e0      	b.n	e2d2 <sys_clock_set_timeout+0x16>
    e310:	007ffffe 	.word	0x007ffffe
    e314:	007fffff 	.word	0x007fffff
    e318:	200014b0 	.word	0x200014b0
    e31c:	0000df69 	.word	0x0000df69

0000e320 <sys_clock_elapsed>:
{
    e320:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    e322:	f7ff fe73 	bl	e00c <z_nrf_rtc_timer_read>
    e326:	4b02      	ldr	r3, [pc, #8]	; (e330 <sys_clock_elapsed+0x10>)
    e328:	681b      	ldr	r3, [r3, #0]
}
    e32a:	1ac0      	subs	r0, r0, r3
    e32c:	bd08      	pop	{r3, pc}
    e32e:	bf00      	nop
    e330:	200014b0 	.word	0x200014b0

0000e334 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    e334:	4602      	mov	r2, r0
    e336:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    e338:	4801      	ldr	r0, [pc, #4]	; (e340 <multithreading_lock_acquire+0xc>)
    e33a:	f001 bdff 	b.w	ff3c <z_impl_k_mutex_lock>
    e33e:	bf00      	nop
    e340:	2000049c 	.word	0x2000049c

0000e344 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    e344:	4801      	ldr	r0, [pc, #4]	; (e34c <multithreading_lock_release+0x8>)
    e346:	f001 be73 	b.w	10030 <z_impl_k_mutex_unlock>
    e34a:	bf00      	nop
    e34c:	2000049c 	.word	0x2000049c

0000e350 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    e350:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    e352:	4916      	ldr	r1, [pc, #88]	; (e3ac <hci_driver_open+0x5c>)
    e354:	4816      	ldr	r0, [pc, #88]	; (e3b0 <hci_driver_open+0x60>)
{
    e356:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
    e358:	f003 ffe6 	bl	12328 <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    e35c:	a803      	add	r0, sp, #12
    e35e:	f7f1 ff37 	bl	1d0 <sdc_build_revision_get>
    e362:	4814      	ldr	r0, [pc, #80]	; (e3b4 <hci_driver_open+0x64>)
    e364:	f003 fe75 	bl	12052 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    e368:	b1d0      	cbz	r0, e3a0 <hci_driver_open+0x50>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    e36a:	4a13      	ldr	r2, [pc, #76]	; (e3b8 <hci_driver_open+0x68>)
    e36c:	ca07      	ldmia	r2, {r0, r1, r2}
    e36e:	466b      	mov	r3, sp
    e370:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    e374:	4618      	mov	r0, r3
    e376:	f7f2 f89b 	bl	4b0 <sdc_rand_source_register>
	if (err) {
    e37a:	b9a0      	cbnz	r0, e3a6 <hci_driver_open+0x56>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    e37c:	f04f 30ff 	mov.w	r0, #4294967295
    e380:	f04f 31ff 	mov.w	r1, #4294967295
    e384:	f7ff ffd6 	bl	e334 <multithreading_lock_acquire>
	if (err) {
    e388:	4604      	mov	r4, r0
    e38a:	b930      	cbnz	r0, e39a <hci_driver_open+0x4a>
		MULTITHREADING_LOCK_RELEASE();
		return -ENOTSUP;
	}
#endif

	err = sdc_enable(receive_signal_raise, sdc_mempool);
    e38c:	490b      	ldr	r1, [pc, #44]	; (e3bc <hci_driver_open+0x6c>)
    e38e:	480c      	ldr	r0, [pc, #48]	; (e3c0 <hci_driver_open+0x70>)
    e390:	f7f1 ff8e 	bl	2b0 <sdc_enable>
	if (err) {
    e394:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
    e396:	f7ff ffd5 	bl	e344 <multithreading_lock_release>

	return 0;
}
    e39a:	4620      	mov	r0, r4
    e39c:	b008      	add	sp, #32
    e39e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    e3a0:	f06f 0412 	mvn.w	r4, #18
    e3a4:	e7f9      	b.n	e39a <hci_driver_open+0x4a>
		return -EINVAL;
    e3a6:	f06f 0415 	mvn.w	r4, #21
    e3aa:	e7f6      	b.n	e39a <hci_driver_open+0x4a>
    e3ac:	00011e39 	.word	0x00011e39
    e3b0:	200019d4 	.word	0x200019d4
    e3b4:	00012a04 	.word	0x00012a04
    e3b8:	00012cb4 	.word	0x00012cb4
    e3bc:	200014c0 	.word	0x200014c0
    e3c0:	0000e491 	.word	0x0000e491

0000e3c4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
    e3c4:	b513      	push	{r0, r1, r4, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
    e3c6:	4825      	ldr	r0, [pc, #148]	; (e45c <hci_driver_init+0x98>)
    e3c8:	f7fe f846 	bl	c458 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    e3cc:	4824      	ldr	r0, [pc, #144]	; (e460 <hci_driver_init+0x9c>)
    e3ce:	f7f1 ff99 	bl	304 <sdc_init>
				err = sdc_support_scan();
    e3d2:	f7f2 f813 	bl	3fc <sdc_support_scan>
				if (err) {
    e3d6:	4604      	mov	r4, r0
    e3d8:	2800      	cmp	r0, #0
    e3da:	d13c      	bne.n	e456 <hci_driver_init+0x92>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e3dc:	aa01      	add	r2, sp, #4
    e3de:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
    e3e0:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e3e4:	f7f1 ff02 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
    e3e8:	2800      	cmp	r0, #0
    e3ea:	db30      	blt.n	e44e <hci_driver_init+0x8a>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
    e3ec:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e3ee:	aa01      	add	r2, sp, #4
    e3f0:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
    e3f2:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e3f6:	f7f1 fef9 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
    e3fa:	2800      	cmp	r0, #0
    e3fc:	db27      	blt.n	e44e <hci_driver_init+0x8a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
    e3fe:	4b19      	ldr	r3, [pc, #100]	; (e464 <hci_driver_init+0xa0>)
    e400:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e402:	aa01      	add	r2, sp, #4
    e404:	2103      	movs	r1, #3
    e406:	4620      	mov	r0, r4
    e408:	f7f1 fef0 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
    e40c:	2800      	cmp	r0, #0
    e40e:	db1e      	blt.n	e44e <hci_driver_init+0x8a>
	cfg.event_length.event_length_us =
    e410:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e414:	aa01      	add	r2, sp, #4
    e416:	2104      	movs	r1, #4
    e418:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
    e41a:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e41c:	f7f1 fee6 	bl	1ec <sdc_cfg_set>
	if (required_memory < 0) {
    e420:	2800      	cmp	r0, #0
    e422:	db14      	blt.n	e44e <hci_driver_init+0x8a>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
    e424:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e426:	aa01      	add	r2, sp, #4
    e428:	2106      	movs	r1, #6
    e42a:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
    e42c:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e430:	f7f1 fedc 	bl	1ec <sdc_cfg_set>
		if (required_memory < 0) {
    e434:	2800      	cmp	r0, #0
    e436:	db0a      	blt.n	e44e <hci_driver_init+0x8a>
	if (required_memory > sizeof(sdc_mempool)) {
    e438:	f5b0 7fc2 	cmp.w	r0, #388	; 0x184
    e43c:	dd09      	ble.n	e452 <hci_driver_init+0x8e>
		k_panic();
    e43e:	4040      	eors	r0, r0
    e440:	f380 8811 	msr	BASEPRI, r0
    e444:	f04f 0004 	mov.w	r0, #4
    e448:	df02      	svc	2
		return -ENOMEM;
    e44a:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return err;
}
    e44e:	b002      	add	sp, #8
    e450:	bd10      	pop	{r4, pc}
	return 0;
    e452:	4620      	mov	r0, r4
	if (err) {
    e454:	e7fb      	b.n	e44e <hci_driver_init+0x8a>
					return -ENOTSUP;
    e456:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e45a:	e7f8      	b.n	e44e <hci_driver_init+0x8a>
    e45c:	00012e80 	.word	0x00012e80
    e460:	00011dc9 	.word	0x00011dc9
    e464:	02031b1b 	.word	0x02031b1b

0000e468 <rand_prio_low_vector_get>:
{
    e468:	b538      	push	{r3, r4, r5, lr}
    e46a:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    e46c:	4807      	ldr	r0, [pc, #28]	; (e48c <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    e46e:	6883      	ldr	r3, [r0, #8]
    e470:	685d      	ldr	r5, [r3, #4]
    e472:	460a      	mov	r2, r1
    e474:	b135      	cbz	r5, e484 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    e476:	2300      	movs	r3, #0
    e478:	4621      	mov	r1, r4
    e47a:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
    e47c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    e480:	b2c0      	uxtb	r0, r0
    e482:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    e484:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e488:	e7f8      	b.n	e47c <rand_prio_low_vector_get+0x14>
    e48a:	bf00      	nop
    e48c:	00012a04 	.word	0x00012a04

0000e490 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    e490:	4901      	ldr	r1, [pc, #4]	; (e498 <receive_signal_raise+0x8>)
    e492:	4802      	ldr	r0, [pc, #8]	; (e49c <receive_signal_raise+0xc>)
    e494:	f003 bf65 	b.w	12362 <k_work_submit_to_queue>
    e498:	200019d4 	.word	0x200019d4
    e49c:	20001648 	.word	0x20001648

0000e4a0 <rand_prio_low_vector_get_blocking>:
{
    e4a0:	b410      	push	{r4}
    e4a2:	4603      	mov	r3, r0
    e4a4:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
    e4a6:	4803      	ldr	r0, [pc, #12]	; (e4b4 <rand_prio_low_vector_get_blocking+0x14>)
    e4a8:	6881      	ldr	r1, [r0, #8]
    e4aa:	680c      	ldr	r4, [r1, #0]
    e4ac:	4619      	mov	r1, r3
    e4ae:	4623      	mov	r3, r4
}
    e4b0:	bc10      	pop	{r4}
    e4b2:	4718      	bx	r3
    e4b4:	00012a04 	.word	0x00012a04

0000e4b8 <hci_driver_receive_process>:
{
    e4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
    e4ba:	f04f 30ff 	mov.w	r0, #4294967295
    e4be:	f04f 31ff 	mov.w	r1, #4294967295
    e4c2:	f7ff ff37 	bl	e334 <multithreading_lock_acquire>
	if (!errcode) {
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d145      	bne.n	e556 <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
    e4ca:	4d24      	ldr	r5, [pc, #144]	; (e55c <hci_driver_receive_process+0xa4>)
    e4cc:	f10d 0107 	add.w	r1, sp, #7
    e4d0:	4628      	mov	r0, r5
    e4d2:	f000 fb23 	bl	eb1c <hci_internal_msg_get>
    e4d6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    e4d8:	f7ff ff34 	bl	e344 <multithreading_lock_release>
	if (errcode) {
    e4dc:	2c00      	cmp	r4, #0
    e4de:	d13a      	bne.n	e556 <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
    e4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4e4:	2b04      	cmp	r3, #4
    e4e6:	d126      	bne.n	e536 <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
    e4e8:	7828      	ldrb	r0, [r5, #0]
    e4ea:	283e      	cmp	r0, #62	; 0x3e
    e4ec:	d019      	beq.n	e522 <hci_driver_receive_process+0x6a>
    e4ee:	28ff      	cmp	r0, #255	; 0xff
    e4f0:	d01e      	beq.n	e530 <hci_driver_receive_process+0x78>
		switch (subevent) {
    e4f2:	f04f 32ff 	mov.w	r2, #4294967295
    e4f6:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    e4fa:	4621      	mov	r1, r4
    e4fc:	f7fd fb62 	bl	bbc4 <bt_buf_get_evt>
	if (!evt_buf) {
    e500:	4604      	mov	r4, r0
    e502:	b148      	cbz	r0, e518 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
    e504:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e506:	4915      	ldr	r1, [pc, #84]	; (e55c <hci_driver_receive_process+0xa4>)
    e508:	3202      	adds	r2, #2
    e50a:	f104 000c 	add.w	r0, r4, #12
    e50e:	f003 f9fb 	bl	11908 <net_buf_simple_add_mem>
	bt_recv(data_buf);
    e512:	4620      	mov	r0, r4
    e514:	f7fd ff7a 	bl	c40c <bt_recv>
}
    e518:	b003      	add	sp, #12
    e51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
    e51e:	f7ff bfb7 	b.w	e490 <receive_signal_raise>
		switch (me->subevent) {
    e522:	78ab      	ldrb	r3, [r5, #2]
    e524:	2b02      	cmp	r3, #2
		switch (subevent) {
    e526:	d1e4      	bne.n	e4f2 <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    e528:	2200      	movs	r2, #0
    e52a:	2300      	movs	r3, #0
			return true;
    e52c:	2401      	movs	r4, #1
    e52e:	e7e4      	b.n	e4fa <hci_driver_receive_process+0x42>
		switch (subevent) {
    e530:	78ab      	ldrb	r3, [r5, #2]
    e532:	2b80      	cmp	r3, #128	; 0x80
    e534:	e7f7      	b.n	e526 <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
    e536:	2b02      	cmp	r3, #2
    e538:	d1ee      	bne.n	e518 <hci_driver_receive_process+0x60>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    e53a:	f04f 32ff 	mov.w	r2, #4294967295
    e53e:	f04f 33ff 	mov.w	r3, #4294967295
    e542:	2003      	movs	r0, #3
    e544:	f7fd fb0e 	bl	bb64 <bt_buf_get_rx>
	if (!data_buf) {
    e548:	4604      	mov	r4, r0
    e54a:	2800      	cmp	r0, #0
    e54c:	d0e4      	beq.n	e518 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
    e54e:	886a      	ldrh	r2, [r5, #2]
    e550:	4629      	mov	r1, r5
    e552:	3204      	adds	r2, #4
    e554:	e7d9      	b.n	e50a <hci_driver_receive_process+0x52>
}
    e556:	b003      	add	sp, #12
    e558:	bd30      	pop	{r4, r5, pc}
    e55a:	bf00      	nop
    e55c:	20001b30 	.word	0x20001b30

0000e560 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    e560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    e562:	4cb6      	ldr	r4, [pc, #728]	; (e83c <hci_internal_cmd_put+0x2dc>)
    e564:	8805      	ldrh	r5, [r0, #0]
    e566:	7823      	ldrb	r3, [r4, #0]
{
    e568:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
    e56a:	2b00      	cmp	r3, #0
    e56c:	f040 82cd 	bne.w	eb0a <hci_internal_cmd_put+0x5aa>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    e570:	2304      	movs	r3, #4
    e572:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
    e576:	4bb2      	ldr	r3, [pc, #712]	; (e840 <hci_internal_cmd_put+0x2e0>)
    e578:	681f      	ldr	r7, [r3, #0]
    e57a:	b1a7      	cbz	r7, e5a6 <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
    e57c:	f10d 0306 	add.w	r3, sp, #6
    e580:	f10d 0207 	add.w	r2, sp, #7
    e584:	1c61      	adds	r1, r4, #1
    e586:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    e588:	2801      	cmp	r0, #1
    e58a:	d00c      	beq.n	e5a6 <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
    e58c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e590:	bb33      	cbnz	r3, e5e0 <hci_internal_cmd_put+0x80>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    e592:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    e596:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    e598:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
    e59a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    e59c:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
    e59e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    e5a0:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    e5a2:	71a0      	strb	r0, [r4, #6]
}
    e5a4:	e025      	b.n	e5f2 <hci_internal_cmd_put+0x92>
		switch (BT_OGF(opcode)) {
    e5a6:	0aab      	lsrs	r3, r5, #10
    e5a8:	2b08      	cmp	r3, #8
    e5aa:	f000 80ea 	beq.w	e782 <hci_internal_cmd_put+0x222>
    e5ae:	d813      	bhi.n	e5d8 <hci_internal_cmd_put+0x78>
    e5b0:	2b03      	cmp	r3, #3
    e5b2:	d02b      	beq.n	e60c <hci_internal_cmd_put+0xac>
    e5b4:	2b04      	cmp	r3, #4
    e5b6:	d046      	beq.n	e646 <hci_internal_cmd_put+0xe6>
    e5b8:	2001      	movs	r0, #1
	switch (hci_opcode) {
    e5ba:	f240 4306 	movw	r3, #1030	; 0x406
    e5be:	429d      	cmp	r5, r3
    e5c0:	f040 8114 	bne.w	e7ec <hci_internal_cmd_put+0x28c>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e5c4:	230f      	movs	r3, #15
    e5c6:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e5c8:	2204      	movs	r2, #4
	evt_data->ncmd = 1;
    e5ca:	2301      	movs	r3, #1
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e5cc:	70a2      	strb	r2, [r4, #2]
	evt_data->status = status_code;
    e5ce:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    e5d0:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    e5d2:	2106      	movs	r1, #6
    e5d4:	7161      	strb	r1, [r4, #5]
    e5d6:	e12e      	b.n	e836 <hci_internal_cmd_put+0x2d6>
		switch (BT_OGF(opcode)) {
    e5d8:	2b3f      	cmp	r3, #63	; 0x3f
    e5da:	f000 81d2 	beq.w	e982 <hci_internal_cmd_put+0x422>
	switch (opcode)	{
    e5de:	2001      	movs	r0, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e5e0:	230f      	movs	r3, #15
    e5e2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e5e4:	2304      	movs	r3, #4
    e5e6:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
    e5e8:	2301      	movs	r3, #1
	evt_data->status = status_code;
    e5ea:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    e5ec:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    e5ee:	f8a4 5005 	strh.w	r5, [r4, #5]
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
    e5f2:	2301      	movs	r3, #1
    e5f4:	7023      	strb	r3, [r4, #0]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
    e5f6:	f242 0383 	movw	r3, #8323	; 0x2083
    e5fa:	429d      	cmp	r5, r3
    e5fc:	f040 8099 	bne.w	e732 <hci_internal_cmd_put+0x1d2>
		&&
    e600:	7863      	ldrb	r3, [r4, #1]
    e602:	2b0e      	cmp	r3, #14
    e604:	f040 8095 	bne.w	e732 <hci_internal_cmd_put+0x1d2>
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
    e608:	2300      	movs	r3, #0
    e60a:	e115      	b.n	e838 <hci_internal_cmd_put+0x2d8>
	return ((uint16_t)src[1] << 8) | src[0];
    e60c:	f9b6 3000 	ldrsh.w	r3, [r6]
	switch (opcode)	{
    e610:	f640 4201 	movw	r2, #3073	; 0xc01
    e614:	4293      	cmp	r3, r2
    e616:	d00d      	beq.n	e634 <hci_internal_cmd_put+0xd4>
    e618:	f640 4203 	movw	r2, #3075	; 0xc03
    e61c:	4293      	cmp	r3, r2
    e61e:	d00f      	beq.n	e640 <hci_internal_cmd_put+0xe0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e620:	230f      	movs	r3, #15
    e622:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e624:	2304      	movs	r3, #4
    e626:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    e628:	2301      	movs	r3, #1
    e62a:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
    e62c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    e62e:	f8a4 5005 	strh.w	r5, [r4, #5]
	cmd_complete_or_status.occurred = true;
    e632:	e101      	b.n	e838 <hci_internal_cmd_put+0x2d8>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
    e634:	1cf0      	adds	r0, r6, #3
    e636:	f7fa f9d4 	bl	89e2 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
    e63a:	2801      	cmp	r0, #1
    e63c:	d0cf      	beq.n	e5de <hci_internal_cmd_put+0x7e>
    e63e:	e7a8      	b.n	e592 <hci_internal_cmd_put+0x32>
		return sdc_hci_cmd_cb_reset();
    e640:	f7f2 f828 	bl	694 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
    e644:	e7f9      	b.n	e63a <hci_internal_cmd_put+0xda>
	switch (opcode)	{
    e646:	8833      	ldrh	r3, [r6, #0]
    e648:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e64c:	3b01      	subs	r3, #1
    e64e:	2b08      	cmp	r3, #8
    e650:	d8e6      	bhi.n	e620 <hci_internal_cmd_put+0xc0>
    e652:	a201      	add	r2, pc, #4	; (adr r2, e658 <hci_internal_cmd_put+0xf8>)
    e654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e658:	0000e67d 	.word	0x0000e67d
    e65c:	0000e68f 	.word	0x0000e68f
    e660:	0000e739 	.word	0x0000e739
    e664:	0000e621 	.word	0x0000e621
    e668:	0000e621 	.word	0x0000e621
    e66c:	0000e621 	.word	0x0000e621
    e670:	0000e621 	.word	0x0000e621
    e674:	0000e621 	.word	0x0000e621
    e678:	0000e771 	.word	0x0000e771
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    e67c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    e680:	4870      	ldr	r0, [pc, #448]	; (e844 <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    e682:	3308      	adds	r3, #8
    e684:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    e688:	f7fa fa03 	bl	8a92 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
    e68c:	e7d5      	b.n	e63a <hci_internal_cmd_put+0xda>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    e68e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    e692:	4e6c      	ldr	r6, [pc, #432]	; (e844 <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    e694:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    e696:	2230      	movs	r2, #48	; 0x30
    e698:	2100      	movs	r1, #0
    e69a:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    e69c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    e6a0:	f003 f863 	bl	1176a <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    e6a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    e6a8:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    e6aa:	2300      	movs	r3, #0
    e6ac:	71a3      	strb	r3, [r4, #6]
	cmds->hci_set_event_mask = 1;
    e6ae:	7b23      	ldrb	r3, [r4, #12]
	evt_data->opcode = hci_opcode;
    e6b0:	80a5      	strh	r5, [r4, #4]
	cmds->hci_set_event_mask = 1;
    e6b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    e6b6:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
    e6b8:	7d63      	ldrb	r3, [r4, #21]
    e6ba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    e6be:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    e6c2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
    e6c4:	7da3      	ldrb	r3, [r4, #22]
    e6c6:	f043 0302 	orr.w	r3, r3, #2
    e6ca:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
    e6cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    e6d0:	f023 0317 	bic.w	r3, r3, #23
    e6d4:	f043 0317 	orr.w	r3, r3, #23
    e6d8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
    e6dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e6e0:	f063 0333 	orn	r3, r3, #51	; 0x33
    e6e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
    e6e8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    e6ec:	f063 033c 	orn	r3, r3, #60	; 0x3c
    e6f0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
    e6f4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    e6f8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
    e6fc:	f043 0378 	orr.w	r3, r3, #120	; 0x78
    e700:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
    e704:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    e70c:	220e      	movs	r2, #14
	cmds->hci_le_receiver_test_v2 = 1;
    e70e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
    e712:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    e716:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
    e718:	2201      	movs	r2, #1
	cmds->hci_le_transmitter_test_v2 = 1;
    e71a:	4313      	orrs	r3, r2
    e71c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
    e720:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	evt_data->ncmd = 1;
    e724:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_read_transmit_power = 1;
    e726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e72a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmd_complete_or_status.occurred = true;
    e72e:	f806 2c07 	strb.w	r2, [r6, #-7]
	}

	return 0;
    e732:	2000      	movs	r0, #0
}
    e734:	b003      	add	sp, #12
    e736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    e738:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    e73c:	4e41      	ldr	r6, [pc, #260]	; (e844 <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    e73e:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
    e740:	2208      	movs	r2, #8
    e742:	2100      	movs	r1, #0
    e744:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    e746:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    e74a:	f003 f80e 	bl	1176a <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    e74e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    e752:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    e754:	2300      	movs	r3, #0
    e756:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
    e758:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
    e75a:	80a5      	strh	r5, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    e75c:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
    e75e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    e762:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
    e764:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
    e768:	2201      	movs	r2, #1
    e76a:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
    e76c:	72e3      	strb	r3, [r4, #11]
    e76e:	e7de      	b.n	e72e <hci_internal_cmd_put+0x1ce>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    e770:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    e774:	4833      	ldr	r0, [pc, #204]	; (e844 <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    e776:	3306      	adds	r3, #6
    e778:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    e77c:	f7fa f987 	bl	8a8e <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
    e780:	e75b      	b.n	e63a <hci_internal_cmd_put+0xda>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    e782:	4630      	mov	r0, r6
	switch (opcode)	{
    e784:	f242 011c 	movw	r1, #8220	; 0x201c
    e788:	f830 3b03 	ldrh.w	r3, [r0], #3
    e78c:	b21a      	sxth	r2, r3
    e78e:	428a      	cmp	r2, r1
    e790:	f242 0132 	movw	r1, #8242	; 0x2032
    e794:	dc38      	bgt.n	e808 <hci_internal_cmd_put+0x2a8>
    e796:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    e79a:	dc01      	bgt.n	e7a0 <hci_internal_cmd_put+0x240>
	switch (hci_opcode) {
    e79c:	428d      	cmp	r5, r1
    e79e:	e017      	b.n	e7d0 <hci_internal_cmd_put+0x270>
	switch (opcode)	{
    e7a0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    e7a4:	3b01      	subs	r3, #1
    e7a6:	2b1b      	cmp	r3, #27
    e7a8:	d80f      	bhi.n	e7ca <hci_internal_cmd_put+0x26a>
    e7aa:	e8df f003 	tbb	[pc, r3]
    e7ae:	704d      	.short	0x704d
    e7b0:	0ea80e79 	.word	0x0ea80e79
    e7b4:	0e0e0e0e 	.word	0x0e0e0e0e
    e7b8:	0e0eaeab 	.word	0x0e0eaeab
    e7bc:	c0bdbab1 	.word	0xc0bdbab1
    e7c0:	0e0e0e0e 	.word	0x0e0e0e0e
    e7c4:	0e0eccc3 	.word	0x0e0eccc3
    e7c8:	d50e      	.short	0xd50e
	switch (hci_opcode) {
    e7ca:	f242 0332 	movw	r3, #8242	; 0x2032
    e7ce:	429d      	cmp	r5, r3
    e7d0:	d027      	beq.n	e822 <hci_internal_cmd_put+0x2c2>
    e7d2:	f200 8198 	bhi.w	eb06 <hci_internal_cmd_put+0x5a6>
    e7d6:	f242 0326 	movw	r3, #8230	; 0x2026
    e7da:	429d      	cmp	r5, r3
    e7dc:	f63f aeff 	bhi.w	e5de <hci_internal_cmd_put+0x7e>
    e7e0:	f242 030c 	movw	r3, #8204	; 0x200c
    e7e4:	429d      	cmp	r5, r3
    e7e6:	f04f 0001 	mov.w	r0, #1
    e7ea:	d83f      	bhi.n	e86c <hci_internal_cmd_put+0x30c>
    e7ec:	f240 431d 	movw	r3, #1053	; 0x41d
    e7f0:	429d      	cmp	r5, r3
    e7f2:	f47f af22 	bne.w	e63a <hci_internal_cmd_put+0xda>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e7f6:	230f      	movs	r3, #15
    e7f8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e7fa:	2204      	movs	r2, #4
	evt_data->ncmd = 1;
    e7fc:	2301      	movs	r3, #1
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e7fe:	70a2      	strb	r2, [r4, #2]
	evt_data->status = status_code;
    e800:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    e802:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    e804:	211d      	movs	r1, #29
    e806:	e6e5      	b.n	e5d4 <hci_internal_cmd_put+0x74>
	switch (opcode)	{
    e808:	f242 034b 	movw	r3, #8267	; 0x204b
    e80c:	429a      	cmp	r2, r3
    e80e:	d1c5      	bne.n	e79c <hci_internal_cmd_put+0x23c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    e810:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    e814:	480b      	ldr	r0, [pc, #44]	; (e844 <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    e816:	3302      	adds	r3, #2
    e818:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    e81c:	f7fa f947 	bl	8aae <sdc_hci_cmd_le_read_transmit_power>
    e820:	e014      	b.n	e84c <hci_internal_cmd_put+0x2ec>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e822:	230f      	movs	r3, #15
    e824:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e826:	2304      	movs	r3, #4
    e828:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    e82a:	2301      	movs	r3, #1
    e82c:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    e82e:	2232      	movs	r2, #50	; 0x32
    e830:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
    e832:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    e834:	2220      	movs	r2, #32
    e836:	71a2      	strb	r2, [r4, #6]
		cmd_complete_or_status.occurred = false;
    e838:	7023      	strb	r3, [r4, #0]
    e83a:	e77a      	b.n	e732 <hci_internal_cmd_put+0x1d2>
    e83c:	20001b76 	.word	0x20001b76
    e840:	200019e4 	.word	0x200019e4
    e844:	20001b7d 	.word	0x20001b7d
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
    e848:	f7fa f935 	bl	8ab6 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
    e84c:	f242 0332 	movw	r3, #8242	; 0x2032
    e850:	429d      	cmp	r5, r3
    e852:	d015      	beq.n	e880 <hci_internal_cmd_put+0x320>
    e854:	f200 8147 	bhi.w	eae6 <hci_internal_cmd_put+0x586>
    e858:	f242 0326 	movw	r3, #8230	; 0x2026
    e85c:	429d      	cmp	r5, r3
    e85e:	f63f aeec 	bhi.w	e63a <hci_internal_cmd_put+0xda>
    e862:	f242 030c 	movw	r3, #8204	; 0x200c
    e866:	429d      	cmp	r5, r3
    e868:	f67f aea7 	bls.w	e5ba <hci_internal_cmd_put+0x5a>
    e86c:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
    e870:	4aa7      	ldr	r2, [pc, #668]	; (eb10 <hci_internal_cmd_put+0x5b0>)
    e872:	3b0d      	subs	r3, #13
    e874:	b29b      	uxth	r3, r3
    e876:	fa22 f303 	lsr.w	r3, r2, r3
    e87a:	07db      	lsls	r3, r3, #31
    e87c:	f57f aedd 	bpl.w	e63a <hci_internal_cmd_put+0xda>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e880:	230f      	movs	r3, #15
    e882:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e884:	2304      	movs	r3, #4
    e886:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    e888:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    e88a:	2301      	movs	r3, #1
    e88c:	e6ce      	b.n	e62c <hci_internal_cmd_put+0xcc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    e88e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    e892:	48a0      	ldr	r0, [pc, #640]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    e894:	3303      	adds	r3, #3
    e896:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    e89a:	f7fa f904 	bl	8aa6 <sdc_hci_cmd_le_read_buffer_size>
    e89e:	e7d5      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e8a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    e8a4:	4e9b      	ldr	r6, [pc, #620]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e8a6:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
    e8a8:	2208      	movs	r2, #8
    e8aa:	2100      	movs	r1, #0
    e8ac:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e8ae:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    e8b2:	f002 ff5a 	bl	1176a <memset>
	features->params.le_encryption = 1;
    e8b6:	79e3      	ldrb	r3, [r4, #7]
    e8b8:	f063 0362 	orn	r3, r3, #98	; 0x62
    e8bc:	71e3      	strb	r3, [r4, #7]
	features->params.channel_selection_algorithm_2 = 1;
    e8be:	7a23      	ldrb	r3, [r4, #8]
    e8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e8c4:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
    e8c6:	f242 0332 	movw	r3, #8242	; 0x2032
    e8ca:	429d      	cmp	r5, r3
    e8cc:	d008      	beq.n	e8e0 <hci_internal_cmd_put+0x380>
    e8ce:	f200 8109 	bhi.w	eae4 <hci_internal_cmd_put+0x584>
    e8d2:	f242 0326 	movw	r3, #8230	; 0x2026
    e8d6:	429d      	cmp	r5, r3
    e8d8:	f240 80f3 	bls.w	eac2 <hci_internal_cmd_put+0x562>
		return 0;
    e8dc:	2000      	movs	r0, #0
    e8de:	e658      	b.n	e592 <hci_internal_cmd_put+0x32>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e8e0:	230f      	movs	r3, #15
    e8e2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e8e4:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
    e8e6:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e8e8:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    e8ea:	2300      	movs	r3, #0
    e8ec:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    e8ee:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
    e8f0:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
    e8f2:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
    e8f4:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    e8f6:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
    e8f8:	f806 3c07 	strb.w	r3, [r6, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
    e8fc:	e719      	b.n	e732 <hci_internal_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
    e8fe:	f7fa f8df 	bl	8ac0 <sdc_hci_cmd_le_set_random_address>
    e902:	e7a3      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
    e904:	f7fa f8e0 	bl	8ac8 <sdc_hci_cmd_le_set_scan_params>
    e908:	e7a0      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
    e90a:	f7fa f8db 	bl	8ac4 <sdc_hci_cmd_le_set_scan_enable>
    e90e:	e79d      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    e910:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    e914:	487f      	ldr	r0, [pc, #508]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    e916:	3301      	adds	r3, #1
    e918:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    e91c:	f7fa f8c5 	bl	8aaa <sdc_hci_cmd_le_read_filter_accept_list_size>
    e920:	e794      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_clear_filter_accept_list();
    e922:	f7fa f8ba 	bl	8a9a <sdc_hci_cmd_le_clear_filter_accept_list>
    e926:	e791      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
    e928:	f7fa f8b5 	bl	8a96 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
    e92c:	e78e      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
    e92e:	f7fa f8c0 	bl	8ab2 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
    e932:	e78b      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    e934:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    e938:	4976      	ldr	r1, [pc, #472]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    e93a:	3310      	adds	r3, #16
    e93c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    e940:	f7fa f8ad 	bl	8a9e <sdc_hci_cmd_le_encrypt>
    e944:	e782      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    e946:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    e94a:	4872      	ldr	r0, [pc, #456]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    e94c:	3308      	adds	r3, #8
    e94e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    e952:	f7fa f8a6 	bl	8aa2 <sdc_hci_cmd_le_rand>
    e956:	e779      	b.n	e84c <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
    e958:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e95c:	3308      	adds	r3, #8
    e95e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (hci_opcode) {
    e962:	f242 0232 	movw	r2, #8242	; 0x2032
	*buf = states1;
    e966:	2330      	movs	r3, #48	; 0x30
    e968:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
    e96a:	4295      	cmp	r5, r2
	*(buf + 4) = states2;
    e96c:	f04f 0300 	mov.w	r3, #0
    e970:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
    e972:	d1ac      	bne.n	e8ce <hci_internal_cmd_put+0x36e>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e974:	220f      	movs	r2, #15
    e976:	7062      	strb	r2, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e978:	2204      	movs	r2, #4
	evt_data->status = status_code;
    e97a:	70e3      	strb	r3, [r4, #3]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e97c:	70a2      	strb	r2, [r4, #2]
	evt_data->ncmd = 1;
    e97e:	2301      	movs	r3, #1
    e980:	e755      	b.n	e82e <hci_internal_cmd_put+0x2ce>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    e982:	4630      	mov	r0, r6
	switch (opcode)	{
    e984:	f64f 420b 	movw	r2, #64523	; 0xfc0b
    e988:	f830 3b03 	ldrh.w	r3, [r0], #3
    e98c:	4293      	cmp	r3, r2
    e98e:	d823      	bhi.n	e9d8 <hci_internal_cmd_put+0x478>
    e990:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
    e994:	d801      	bhi.n	e99a <hci_internal_cmd_put+0x43a>
    e996:	2001      	movs	r0, #1
    e998:	e035      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
    e99a:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
    e99e:	3b01      	subs	r3, #1
    e9a0:	2b0a      	cmp	r3, #10
    e9a2:	d8f8      	bhi.n	e996 <hci_internal_cmd_put+0x436>
    e9a4:	a201      	add	r2, pc, #4	; (adr r2, e9ac <hci_internal_cmd_put+0x44c>)
    e9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e9aa:	bf00      	nop
    e9ac:	0000e9f7 	.word	0x0000e9f7
    e9b0:	0000ea17 	.word	0x0000ea17
    e9b4:	0000e997 	.word	0x0000e997
    e9b8:	0000e997 	.word	0x0000e997
    e9bc:	0000e997 	.word	0x0000e997
    e9c0:	0000ea6b 	.word	0x0000ea6b
    e9c4:	0000e997 	.word	0x0000e997
    e9c8:	0000e997 	.word	0x0000e997
    e9cc:	0000ea47 	.word	0x0000ea47
    e9d0:	0000ea59 	.word	0x0000ea59
    e9d4:	0000ea71 	.word	0x0000ea71
    e9d8:	f503 7240 	add.w	r2, r3, #768	; 0x300
    e9dc:	b292      	uxth	r2, r2
    e9de:	2a05      	cmp	r2, #5
    e9e0:	d8d9      	bhi.n	e996 <hci_internal_cmd_put+0x436>
    e9e2:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
    e9e6:	3b01      	subs	r3, #1
    e9e8:	2b04      	cmp	r3, #4
    e9ea:	d84a      	bhi.n	ea82 <hci_internal_cmd_put+0x522>
    e9ec:	e8df f003 	tbb	[pc, r3]
    e9f0:	63605d5a 	.word	0x63605d5a
    e9f4:	66          	.byte	0x66
    e9f5:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    e9f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    e9fa:	4846      	ldr	r0, [pc, #280]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    e9fc:	330c      	adds	r3, #12
    e9fe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    ea02:	f7f1 feef 	bl	7e4 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
    ea06:	f025 0308 	bic.w	r3, r5, #8
    ea0a:	f64f 5202 	movw	r2, #64770	; 0xfd02
    ea0e:	4293      	cmp	r3, r2
    ea10:	f47f ae13 	bne.w	e63a <hci_internal_cmd_put+0xda>
    ea14:	e734      	b.n	e880 <hci_internal_cmd_put+0x320>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    ea16:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ea1a:	483e      	ldr	r0, [pc, #248]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    ea1c:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    ea1e:	2202      	movs	r2, #2
    ea20:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    ea22:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ea26:	f002 fea0 	bl	1176a <memset>
	cmds->read_version_info = 1;
    ea2a:	79e3      	ldrb	r3, [r4, #7]
    ea2c:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    ea30:	f043 0323 	orr.w	r3, r3, #35	; 0x23
    ea34:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
    ea36:	7a23      	ldrb	r3, [r4, #8]
    ea38:	f023 0307 	bic.w	r3, r3, #7
    ea3c:	f043 0307 	orr.w	r3, r3, #7
    ea40:	7223      	strb	r3, [r4, #8]
		return 0;
    ea42:	2000      	movs	r0, #0
    ea44:	e7df      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    ea46:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    ea4a:	4832      	ldr	r0, [pc, #200]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    ea4c:	3317      	adds	r3, #23
    ea4e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    ea52:	f7f1 fe7b 	bl	74c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
    ea56:	e7d6      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		*param_length_out +=
    ea58:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    ea5c:	482d      	ldr	r0, [pc, #180]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out +=
    ea5e:	3320      	adds	r3, #32
    ea60:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    ea64:	f7f1 fe2a 	bl	6bc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
    ea68:	e7cd      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    ea6a:	f7fa f80e 	bl	8a8a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
    ea6e:	e7ca      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    ea70:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    ea74:	4827      	ldr	r0, [pc, #156]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    ea76:	3301      	adds	r3, #1
    ea78:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    ea7c:	f7f9 fff1 	bl	8a62 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
    ea80:	e7c1      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    ea82:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ea86:	4823      	ldr	r0, [pc, #140]	; (eb14 <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    ea88:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    ea8a:	2202      	movs	r2, #2
    ea8c:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    ea8e:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ea92:	f002 fe6a 	bl	1176a <memset>
	cmds->read_supported_vs_commands = 1;
    ea96:	79e3      	ldrb	r3, [r4, #7]
    ea98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    ea9c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
    eaa0:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
    eaa2:	e7ce      	b.n	ea42 <hci_internal_cmd_put+0x4e2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
    eaa4:	f7f9 ffd6 	bl	8a54 <sdc_hci_cmd_vs_llpm_mode_set>
    eaa8:	e7ad      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
    eaaa:	f7f9 ffa7 	bl	89fc <sdc_hci_cmd_vs_conn_update>
    eaae:	e7aa      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
    eab0:	f7f9 ff9c 	bl	89ec <sdc_hci_cmd_vs_conn_event_extend>
    eab4:	e7a7      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
    eab6:	f7f9 ffcf 	bl	8a58 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
    eaba:	e7a4      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
    eabc:	f7f9 ffc8 	bl	8a50 <sdc_hci_cmd_vs_event_length_set>
    eac0:	e7a1      	b.n	ea06 <hci_internal_cmd_put+0x4a6>
	switch (hci_opcode) {
    eac2:	f242 030c 	movw	r3, #8204	; 0x200c
    eac6:	429d      	cmp	r5, r3
    eac8:	d80a      	bhi.n	eae0 <hci_internal_cmd_put+0x580>
		return 0;
    eaca:	2000      	movs	r0, #0
    eacc:	e68e      	b.n	e7ec <hci_internal_cmd_put+0x28c>
	switch (hci_opcode) {
    eace:	4a12      	ldr	r2, [pc, #72]	; (eb18 <hci_internal_cmd_put+0x5b8>)
    ead0:	3b2d      	subs	r3, #45	; 0x2d
    ead2:	b29b      	uxth	r3, r3
    ead4:	fa22 f303 	lsr.w	r3, r2, r3
    ead8:	07da      	lsls	r2, r3, #31
    eada:	f57f adae 	bpl.w	e63a <hci_internal_cmd_put+0xda>
    eade:	e57f      	b.n	e5e0 <hci_internal_cmd_put+0x80>
		return 0;
    eae0:	2000      	movs	r0, #0
    eae2:	e6c3      	b.n	e86c <hci_internal_cmd_put+0x30c>
    eae4:	2000      	movs	r0, #0
	switch (hci_opcode) {
    eae6:	f242 0385 	movw	r3, #8325	; 0x2085
    eaea:	429d      	cmp	r5, r3
    eaec:	d88b      	bhi.n	ea06 <hci_internal_cmd_put+0x4a6>
    eaee:	f242 036c 	movw	r3, #8300	; 0x206c
    eaf2:	429d      	cmp	r5, r3
    eaf4:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
    eaf8:	d8e9      	bhi.n	eace <hci_internal_cmd_put+0x56e>
    eafa:	3b03      	subs	r3, #3
    eafc:	b29b      	uxth	r3, r3
    eafe:	2b01      	cmp	r3, #1
    eb00:	f67f aebe 	bls.w	e880 <hci_internal_cmd_put+0x320>
    eb04:	e599      	b.n	e63a <hci_internal_cmd_put+0xda>
    eb06:	2001      	movs	r0, #1
    eb08:	e7ed      	b.n	eae6 <hci_internal_cmd_put+0x586>
		return -NRF_EPERM;
    eb0a:	f04f 30ff 	mov.w	r0, #4294967295
    eb0e:	e611      	b.n	e734 <hci_internal_cmd_put+0x1d4>
    eb10:	03001241 	.word	0x03001241
    eb14:	20001b7d 	.word	0x20001b7d
    eb18:	01000401 	.word	0x01000401

0000eb1c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    eb1c:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
    eb1e:	4c09      	ldr	r4, [pc, #36]	; (eb44 <hci_internal_msg_get+0x28>)
    eb20:	7823      	ldrb	r3, [r4, #0]
{
    eb22:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
    eb24:	b91b      	cbnz	r3, eb2e <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
    eb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
    eb2a:	f7f9 bf4a 	b.w	89c2 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
    eb2e:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
    eb30:	1c61      	adds	r1, r4, #1
    eb32:	3202      	adds	r2, #2
    eb34:	f002 fe0e 	bl	11754 <memcpy>
		cmd_complete_or_status.occurred = false;
    eb38:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    eb3a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
    eb3c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    eb3e:	702b      	strb	r3, [r5, #0]
}
    eb40:	bd38      	pop	{r3, r4, r5, pc}
    eb42:	bf00      	nop
    eb44:	20001b76 	.word	0x20001b76

0000eb48 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    eb48:	b570      	push	{r4, r5, r6, lr}
    eb4a:	4605      	mov	r5, r0
    eb4c:	460e      	mov	r6, r1
    eb4e:	4c08      	ldr	r4, [pc, #32]	; (eb70 <bt_rand+0x28>)
    eb50:	4620      	mov	r0, r4
    eb52:	f003 fa7e 	bl	12052 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    eb56:	b138      	cbz	r0, eb68 <bt_rand+0x20>
    eb58:	68a3      	ldr	r3, [r4, #8]
    eb5a:	b2b2      	uxth	r2, r6
    eb5c:	4629      	mov	r1, r5
    eb5e:	4620      	mov	r0, r4
    eb60:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
    eb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eb66:	4718      	bx	r3
    eb68:	f06f 0012 	mvn.w	r0, #18
    eb6c:	bd70      	pop	{r4, r5, r6, pc}
    eb6e:	bf00      	nop
    eb70:	00012a04 	.word	0x00012a04

0000eb74 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    eb74:	4901      	ldr	r1, [pc, #4]	; (eb7c <mpsl_low_prio_irq_handler+0x8>)
    eb76:	4802      	ldr	r0, [pc, #8]	; (eb80 <mpsl_low_prio_irq_handler+0xc>)
    eb78:	f003 bbf3 	b.w	12362 <k_work_submit_to_queue>
    eb7c:	200019e8 	.word	0x200019e8
    eb80:	20001648 	.word	0x20001648

0000eb84 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
    eb84:	b513      	push	{r0, r1, r4, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    eb86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    eb8a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
    eb8e:	2300      	movs	r3, #0
    eb90:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    eb94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    eb98:	f8ad 3000 	strh.w	r3, [sp]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    eb9c:	4a0d      	ldr	r2, [pc, #52]	; (ebd4 <mpsl_lib_init_sys+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    eb9e:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    eba0:	2119      	movs	r1, #25
    eba2:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    eba4:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    eba8:	f7f9 f8cc 	bl	7d44 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
    ebac:	4604      	mov	r4, r0
    ebae:	b970      	cbnz	r0, ebce <mpsl_lib_init_sys+0x4a>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    ebb0:	4601      	mov	r1, r0
    ebb2:	2201      	movs	r2, #1
    ebb4:	2008      	movs	r0, #8
    ebb6:	f7fc fbd5 	bl	b364 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    ebba:	2201      	movs	r2, #1
    ebbc:	4621      	mov	r1, r4
    ebbe:	200b      	movs	r0, #11
    ebc0:	f7fc fbd0 	bl	b364 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    ebc4:	2201      	movs	r2, #1
    ebc6:	4621      	mov	r1, r4
    ebc8:	4610      	mov	r0, r2
    ebca:	f7fc fbcb 	bl	b364 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
    ebce:	4620      	mov	r0, r4
    ebd0:	b002      	add	sp, #8
    ebd2:	bd10      	pop	{r4, pc}
    ebd4:	00011e3d 	.word	0x00011e3d

0000ebd8 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
    ebd8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    ebda:	4d0d      	ldr	r5, [pc, #52]	; (ec10 <mpsl_low_prio_init+0x38>)
    ebdc:	490d      	ldr	r1, [pc, #52]	; (ec14 <mpsl_low_prio_init+0x3c>)
    ebde:	2400      	movs	r4, #0
    ebe0:	9400      	str	r4, [sp, #0]
    ebe2:	f06f 0309 	mvn.w	r3, #9
    ebe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ebea:	4628      	mov	r0, r5
    ebec:	f001 fbda 	bl	103a4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    ebf0:	4909      	ldr	r1, [pc, #36]	; (ec18 <mpsl_low_prio_init+0x40>)
    ebf2:	4628      	mov	r0, r5
    ebf4:	f003 facf 	bl	12196 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    ebf8:	4908      	ldr	r1, [pc, #32]	; (ec1c <mpsl_low_prio_init+0x44>)
    ebfa:	4809      	ldr	r0, [pc, #36]	; (ec20 <mpsl_low_prio_init+0x48>)
    ebfc:	f003 fb94 	bl	12328 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    ec00:	4622      	mov	r2, r4
    ec02:	2104      	movs	r1, #4
    ec04:	2019      	movs	r0, #25
    ec06:	f7fc fbad 	bl	b364 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    ec0a:	4620      	mov	r0, r4
    ec0c:	b003      	add	sp, #12
    ec0e:	bd30      	pop	{r4, r5, pc}
    ec10:	20001648 	.word	0x20001648
    ec14:	20002a80 	.word	0x20002a80
    ec18:	00013248 	.word	0x00013248
    ec1c:	00011e69 	.word	0x00011e69
    ec20:	200019e8 	.word	0x200019e8

0000ec24 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    ec24:	4b01      	ldr	r3, [pc, #4]	; (ec2c <mpsl_hfclk_callback+0x8>)
    ec26:	2000      	movs	r0, #0
    ec28:	681b      	ldr	r3, [r3, #0]
    ec2a:	4718      	bx	r3
    ec2c:	200019f8 	.word	0x200019f8

0000ec30 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    ec30:	b120      	cbz	r0, ec3c <nrfx_clock_start+0xc>
    ec32:	2801      	cmp	r0, #1
    ec34:	d106      	bne.n	ec44 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    ec36:	4804      	ldr	r0, [pc, #16]	; (ec48 <nrfx_clock_start+0x18>)
    ec38:	f7f8 bf04 	b.w	7a44 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ec3c:	4b03      	ldr	r3, [pc, #12]	; (ec4c <nrfx_clock_start+0x1c>)
    ec3e:	2001      	movs	r0, #1
    ec40:	681b      	ldr	r3, [r3, #0]
    ec42:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    ec44:	4770      	bx	lr
    ec46:	bf00      	nop
    ec48:	0000ec25 	.word	0x0000ec25
    ec4c:	200019f8 	.word	0x200019f8

0000ec50 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    ec50:	4b01      	ldr	r3, [pc, #4]	; (ec58 <nrfx_clock_init+0x8>)
    ec52:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    ec54:	4801      	ldr	r0, [pc, #4]	; (ec5c <nrfx_clock_init+0xc>)
    ec56:	4770      	bx	lr
    ec58:	200019f8 	.word	0x200019f8
    ec5c:	0bad0000 	.word	0x0bad0000

0000ec60 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    ec60:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    ec64:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ec68:	2a06      	cmp	r2, #6
    ec6a:	d109      	bne.n	ec80 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    ec6c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    ec70:	f3c3 1303 	ubfx	r3, r3, #4, #4
    ec74:	3b03      	subs	r3, #3
    ec76:	2b04      	cmp	r3, #4
    ec78:	d802      	bhi.n	ec80 <nrf52_errata_16+0x20>
    ec7a:	4a02      	ldr	r2, [pc, #8]	; (ec84 <nrf52_errata_16+0x24>)
    ec7c:	5cd0      	ldrb	r0, [r2, r3]
    ec7e:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    ec80:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    ec82:	4770      	bx	lr
    ec84:	0001326b 	.word	0x0001326b

0000ec88 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    ec88:	4a02      	ldr	r2, [pc, #8]	; (ec94 <nvmc_wait+0xc>)
    ec8a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d0fb      	beq.n	ec8a <nvmc_wait+0x2>
}
    ec92:	4770      	bx	lr
    ec94:	4001e000 	.word	0x4001e000

0000ec98 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    ec98:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    ec9a:	f003 f91b 	bl	11ed4 <nrf52_errata_108>
    ec9e:	b140      	cbz	r0, ecb2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    eca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eca4:	4a8e      	ldr	r2, [pc, #568]	; (eee0 <SystemInit+0x248>)
    eca6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    ecaa:	f3c3 2304 	ubfx	r3, r3, #8, #5
    ecae:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    ecb2:	f7ff ffd5 	bl	ec60 <nrf52_errata_16>
    ecb6:	b110      	cbz	r0, ecbe <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    ecb8:	4b8a      	ldr	r3, [pc, #552]	; (eee4 <SystemInit+0x24c>)
    ecba:	4a8b      	ldr	r2, [pc, #556]	; (eee8 <SystemInit+0x250>)
    ecbc:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    ecbe:	f003 f909 	bl	11ed4 <nrf52_errata_108>
    ecc2:	b148      	cbz	r0, ecd8 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    ecc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ecc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    eccc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    ecd0:	f3c3 3342 	ubfx	r3, r3, #13, #3
    ecd4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    ecd8:	f7ff ffc2 	bl	ec60 <nrf52_errata_16>
    ecdc:	b130      	cbz	r0, ecec <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    ecde:	4a83      	ldr	r2, [pc, #524]	; (eeec <SystemInit+0x254>)
    ece0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ece4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ece8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    ecec:	f003 f8f2 	bl	11ed4 <nrf52_errata_108>
    ecf0:	b140      	cbz	r0, ed04 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    ecf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ecf6:	2200      	movs	r2, #0
    ecf8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    ecfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    ed00:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    ed04:	f7ff ffac 	bl	ec60 <nrf52_errata_16>
    ed08:	b120      	cbz	r0, ed14 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    ed0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ed0e:	2203      	movs	r2, #3
    ed10:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    ed14:	f7ff ffa4 	bl	ec60 <nrf52_errata_16>
    ed18:	b160      	cbz	r0, ed34 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    ed1a:	4b75      	ldr	r3, [pc, #468]	; (eef0 <SystemInit+0x258>)
    ed1c:	2205      	movs	r2, #5
    ed1e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    ed22:	2201      	movs	r2, #1
    ed24:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    ed28:	2200      	movs	r2, #0
    ed2a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    ed2e:	223f      	movs	r2, #63	; 0x3f
    ed30:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    ed34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ed38:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    ed3c:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    ed3e:	bf09      	itett	eq
    ed40:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    ed44:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    ed48:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    ed4c:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    ed50:	bf08      	it	eq
    ed52:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ed56:	2a06      	cmp	r2, #6
    ed58:	d14d      	bne.n	edf6 <SystemInit+0x15e>
            {
                switch(var2)
    ed5a:	3b03      	subs	r3, #3
    ed5c:	2b04      	cmp	r3, #4
    ed5e:	d803      	bhi.n	ed68 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    ed60:	4a64      	ldr	r2, [pc, #400]	; (eef4 <SystemInit+0x25c>)
    ed62:	5cd3      	ldrb	r3, [r2, r3]
    ed64:	2b00      	cmp	r3, #0
    ed66:	d046      	beq.n	edf6 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    ed68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ed6c:	4b62      	ldr	r3, [pc, #392]	; (eef8 <SystemInit+0x260>)
    ed6e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    ed72:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    ed76:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    ed7a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    ed7e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    ed82:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    ed86:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    ed8a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    ed8e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    ed92:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    ed96:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    ed9a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    ed9e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    eda2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    eda6:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    edaa:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    edae:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    edb2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    edb6:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    edba:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    edbe:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    edc2:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    edc6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    edca:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    edce:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    edd2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    edd6:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    edda:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    edde:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    ede2:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    ede6:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    edea:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    edee:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    edf2:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    edf6:	f003 f86d 	bl	11ed4 <nrf52_errata_108>
    edfa:	b148      	cbz	r0, ee10 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    edfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ee00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ee04:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    ee08:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    ee0c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    ee10:	f003 f860 	bl	11ed4 <nrf52_errata_108>
    ee14:	b148      	cbz	r0, ee2a <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    ee16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee1a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    ee1e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    ee20:	bf44      	itt	mi
    ee22:	f06f 0201 	mvnmi.w	r2, #1
    ee26:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ee2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ee2e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    ee32:	2a06      	cmp	r2, #6
    ee34:	d126      	bne.n	ee84 <SystemInit+0x1ec>
            {
                switch(var2)
    ee36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    ee3a:	3b03      	subs	r3, #3
    ee3c:	2b04      	cmp	r3, #4
    ee3e:	d802      	bhi.n	ee46 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    ee40:	4a2e      	ldr	r2, [pc, #184]	; (eefc <SystemInit+0x264>)
    ee42:	5cd3      	ldrb	r3, [r2, r3]
    ee44:	b163      	cbz	r3, ee60 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    ee46:	4a2e      	ldr	r2, [pc, #184]	; (ef00 <SystemInit+0x268>)
    ee48:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    ee4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ee50:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ee54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ee58:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    ee5c:	2b06      	cmp	r3, #6
    ee5e:	d111      	bne.n	ee84 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ee60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ee64:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    ee68:	3b03      	subs	r3, #3
    ee6a:	2b04      	cmp	r3, #4
    ee6c:	d802      	bhi.n	ee74 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    ee6e:	4a25      	ldr	r2, [pc, #148]	; (ef04 <SystemInit+0x26c>)
    ee70:	5cd3      	ldrb	r3, [r2, r3]
    ee72:	b13b      	cbz	r3, ee84 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    ee74:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    ee78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    ee7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee80:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    ee84:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    ee88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ee8c:	2a00      	cmp	r2, #0
    ee8e:	db03      	blt.n	ee98 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    ee90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    ee94:	2b00      	cmp	r3, #0
    ee96:	da22      	bge.n	eede <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    ee98:	491b      	ldr	r1, [pc, #108]	; (ef08 <SystemInit+0x270>)
    ee9a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    ee9c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    eea0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    eea4:	2415      	movs	r4, #21
    nvmc_wait();
    eea6:	f7ff feef 	bl	ec88 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    eeaa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    eeae:	f7ff feeb 	bl	ec88 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    eeb2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    eeb6:	f7ff fee7 	bl	ec88 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    eeba:	2300      	movs	r3, #0
    eebc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    eec0:	f7ff fee2 	bl	ec88 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    eec4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    eec8:	4908      	ldr	r1, [pc, #32]	; (eeec <SystemInit+0x254>)
    eeca:	4b10      	ldr	r3, [pc, #64]	; (ef0c <SystemInit+0x274>)
    eecc:	68ca      	ldr	r2, [r1, #12]
    eece:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    eed2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    eed4:	60cb      	str	r3, [r1, #12]
    eed6:	f3bf 8f4f 	dsb	sy
    __NOP();
    eeda:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    eedc:	e7fd      	b.n	eeda <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    eede:	bd10      	pop	{r4, pc}
    eee0:	40013000 	.word	0x40013000
    eee4:	4007c000 	.word	0x4007c000
    eee8:	baadf00d 	.word	0xbaadf00d
    eeec:	e000ed00 	.word	0xe000ed00
    eef0:	40005000 	.word	0x40005000
    eef4:	00013266 	.word	0x00013266
    eef8:	4000c000 	.word	0x4000c000
    eefc:	00013261 	.word	0x00013261
    ef00:	40001000 	.word	0x40001000
    ef04:	0001325c 	.word	0x0001325c
    ef08:	4001e000 	.word	0x4001e000
    ef0c:	05fa0004 	.word	0x05fa0004

0000ef10 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    ef10:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    ef12:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    ef14:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ef16:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    ef1a:	fab2 f382 	clz	r3, r2
    ef1e:	f1c3 031f 	rsb	r3, r3, #31
    ef22:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    ef24:	fa05 f403 	lsl.w	r4, r5, r3
    ef28:	ea22 0404 	bic.w	r4, r2, r4
    ef2c:	e850 6f00 	ldrex	r6, [r0]
    ef30:	4296      	cmp	r6, r2
    ef32:	d104      	bne.n	ef3e <nrfx_flag32_alloc+0x2e>
    ef34:	e840 4c00 	strex	ip, r4, [r0]
    ef38:	f1bc 0f00 	cmp.w	ip, #0
    ef3c:	d1f6      	bne.n	ef2c <nrfx_flag32_alloc+0x1c>
    ef3e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ef42:	d1e7      	bne.n	ef14 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    ef44:	4801      	ldr	r0, [pc, #4]	; (ef4c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    ef46:	700b      	strb	r3, [r1, #0]
}
    ef48:	bd70      	pop	{r4, r5, r6, pc}
    ef4a:	bf00      	nop
    ef4c:	0bad0000 	.word	0x0bad0000

0000ef50 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    ef50:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    ef52:	6803      	ldr	r3, [r0, #0]
    ef54:	40cb      	lsrs	r3, r1
    ef56:	07db      	lsls	r3, r3, #31
    ef58:	d414      	bmi.n	ef84 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    ef5a:	2301      	movs	r3, #1
    ef5c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    ef5e:	6802      	ldr	r2, [r0, #0]
    ef60:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    ef64:	ea43 0102 	orr.w	r1, r3, r2
    ef68:	e850 4f00 	ldrex	r4, [r0]
    ef6c:	4294      	cmp	r4, r2
    ef6e:	d104      	bne.n	ef7a <nrfx_flag32_free+0x2a>
    ef70:	e840 1c00 	strex	ip, r1, [r0]
    ef74:	f1bc 0f00 	cmp.w	ip, #0
    ef78:	d1f6      	bne.n	ef68 <nrfx_flag32_free+0x18>
    ef7a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ef7e:	d1ee      	bne.n	ef5e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    ef80:	4801      	ldr	r0, [pc, #4]	; (ef88 <nrfx_flag32_free+0x38>)
}
    ef82:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ef84:	4801      	ldr	r0, [pc, #4]	; (ef8c <nrfx_flag32_free+0x3c>)
    ef86:	e7fc      	b.n	ef82 <nrfx_flag32_free+0x32>
    ef88:	0bad0000 	.word	0x0bad0000
    ef8c:	0bad0004 	.word	0x0bad0004

0000ef90 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    ef90:	4b03      	ldr	r3, [pc, #12]	; (efa0 <pin_in_use_by_te+0x10>)
    ef92:	3008      	adds	r0, #8
    ef94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    ef98:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ef9c:	4770      	bx	lr
    ef9e:	bf00      	nop
    efa0:	200003fc 	.word	0x200003fc

0000efa4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    efa4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    efa6:	f100 0308 	add.w	r3, r0, #8
    efaa:	4c0c      	ldr	r4, [pc, #48]	; (efdc <call_handler+0x38>)
    efac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    efb0:	05da      	lsls	r2, r3, #23
{
    efb2:	4605      	mov	r5, r0
    efb4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    efb6:	d507      	bpl.n	efc8 <call_handler+0x24>
    efb8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    efbc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    efc0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    efc4:	6852      	ldr	r2, [r2, #4]
    efc6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    efc8:	68a3      	ldr	r3, [r4, #8]
    efca:	b12b      	cbz	r3, efd8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    efcc:	68e2      	ldr	r2, [r4, #12]
    efce:	4631      	mov	r1, r6
    efd0:	4628      	mov	r0, r5
    }
}
    efd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    efd6:	4718      	bx	r3
}
    efd8:	bd70      	pop	{r4, r5, r6, pc}
    efda:	bf00      	nop
    efdc:	200003fc 	.word	0x200003fc

0000efe0 <release_handler>:
{
    efe0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    efe2:	4a12      	ldr	r2, [pc, #72]	; (f02c <release_handler+0x4c>)
    efe4:	3008      	adds	r0, #8
    efe6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    efea:	05d9      	lsls	r1, r3, #23
    efec:	d51b      	bpl.n	f026 <release_handler+0x46>
    efee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    eff2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    eff6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    effa:	f102 040e 	add.w	r4, r2, #14
    effe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f000:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    f004:	f413 7f80 	tst.w	r3, #256	; 0x100
    f008:	d003      	beq.n	f012 <release_handler+0x32>
    f00a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    f00e:	4299      	cmp	r1, r3
    f010:	d009      	beq.n	f026 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f012:	3001      	adds	r0, #1
    f014:	2820      	cmp	r0, #32
    f016:	d1f3      	bne.n	f000 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    f018:	2300      	movs	r3, #0
    f01a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f01e:	4804      	ldr	r0, [pc, #16]	; (f030 <release_handler+0x50>)
}
    f020:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f022:	f7ff bf95 	b.w	ef50 <nrfx_flag32_free>
}
    f026:	bc10      	pop	{r4}
    f028:	4770      	bx	lr
    f02a:	bf00      	nop
    f02c:	200003fc 	.word	0x200003fc
    f030:	20000450 	.word	0x20000450

0000f034 <pin_handler_trigger_uninit>:
{
    f034:	b538      	push	{r3, r4, r5, lr}
    f036:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    f038:	f7ff ffaa 	bl	ef90 <pin_in_use_by_te>
    f03c:	4c09      	ldr	r4, [pc, #36]	; (f064 <pin_handler_trigger_uninit+0x30>)
    f03e:	f102 0508 	add.w	r5, r2, #8
    f042:	b140      	cbz	r0, f056 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f044:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    f048:	4907      	ldr	r1, [pc, #28]	; (f068 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    f04a:	0b5b      	lsrs	r3, r3, #13
    f04c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    f050:	2000      	movs	r0, #0
    f052:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    f056:	4610      	mov	r0, r2
    f058:	f7ff ffc2 	bl	efe0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    f05c:	2300      	movs	r3, #0
    f05e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    f062:	bd38      	pop	{r3, r4, r5, pc}
    f064:	200003fc 	.word	0x200003fc
    f068:	40006000 	.word	0x40006000

0000f06c <nrfx_gpiote_input_configure>:
{
    f06c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f070:	4604      	mov	r4, r0
    f072:	461d      	mov	r5, r3
    if (p_input_config)
    f074:	b309      	cbz	r1, f0ba <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f076:	4f4f      	ldr	r7, [pc, #316]	; (f1b4 <nrfx_gpiote_input_configure+0x148>)
    f078:	f100 0808 	add.w	r8, r0, #8
    f07c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    f080:	07b3      	lsls	r3, r6, #30
    f082:	d506      	bpl.n	f092 <nrfx_gpiote_input_configure+0x26>
    f084:	f7ff ff84 	bl	ef90 <pin_in_use_by_te>
    f088:	b118      	cbz	r0, f092 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    f08a:	484b      	ldr	r0, [pc, #300]	; (f1b8 <nrfx_gpiote_input_configure+0x14c>)
}
    f08c:	b002      	add	sp, #8
    f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    f092:	f004 031f 	and.w	r3, r4, #31
    f096:	009b      	lsls	r3, r3, #2
    f098:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f09c:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f09e:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    f0a2:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    f0a6:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    f0aa:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f0ae:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    f0b2:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    f0b6:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    f0ba:	b19a      	cbz	r2, f0e4 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f0bc:	4b3d      	ldr	r3, [pc, #244]	; (f1b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    f0be:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    f0c0:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f0c2:	f104 0608 	add.w	r6, r4, #8
    f0c6:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    f0ca:	f011 0f02 	tst.w	r1, #2
    f0ce:	d00d      	beq.n	f0ec <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    f0d0:	2800      	cmp	r0, #0
    f0d2:	d1da      	bne.n	f08a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    f0d4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    f0d8:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    f0dc:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    f0e0:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    f0e4:	2d00      	cmp	r5, #0
    f0e6:	d13b      	bne.n	f160 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    f0e8:	4834      	ldr	r0, [pc, #208]	; (f1bc <nrfx_gpiote_input_configure+0x150>)
    f0ea:	e7cf      	b.n	f08c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    f0ec:	f021 0120 	bic.w	r1, r1, #32
    f0f0:	04c9      	lsls	r1, r1, #19
    f0f2:	0cc9      	lsrs	r1, r1, #19
    f0f4:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    f0f8:	2800      	cmp	r0, #0
    f0fa:	d0eb      	beq.n	f0d4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    f0fc:	2f03      	cmp	r7, #3
    f0fe:	d8c4      	bhi.n	f08a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    f100:	6852      	ldr	r2, [r2, #4]
    f102:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    f106:	b92f      	cbnz	r7, f114 <nrfx_gpiote_input_configure+0xa8>
    f108:	4a2d      	ldr	r2, [pc, #180]	; (f1c0 <nrfx_gpiote_input_configure+0x154>)
    f10a:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    f10e:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    f112:	e7df      	b.n	f0d4 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    f114:	ea4f 028c 	mov.w	r2, ip, lsl #2
    f118:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f11c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    f120:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    f124:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    f128:	f020 0003 	bic.w	r0, r0, #3
    f12c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f130:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    f134:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    f138:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    f13c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f140:	0220      	lsls	r0, r4, #8
    f142:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    f146:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    f14a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    f14e:	ea40 000e 	orr.w	r0, r0, lr
    f152:	f041 0120 	orr.w	r1, r1, #32
    f156:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    f15a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    f15e:	e7b9      	b.n	f0d4 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    f160:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    f164:	4620      	mov	r0, r4
    f166:	f7ff ff3b 	bl	efe0 <release_handler>
    if (!handler)
    f16a:	2e00      	cmp	r6, #0
    f16c:	d0bc      	beq.n	f0e8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f16e:	4d11      	ldr	r5, [pc, #68]	; (f1b4 <nrfx_gpiote_input_configure+0x148>)
    f170:	e9d5 2300 	ldrd	r2, r3, [r5]
    f174:	4296      	cmp	r6, r2
    f176:	d101      	bne.n	f17c <nrfx_gpiote_input_configure+0x110>
    f178:	429f      	cmp	r7, r3
    f17a:	d019      	beq.n	f1b0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    f17c:	4811      	ldr	r0, [pc, #68]	; (f1c4 <nrfx_gpiote_input_configure+0x158>)
    f17e:	f10d 0107 	add.w	r1, sp, #7
    f182:	f7ff fec5 	bl	ef10 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    f186:	4b0d      	ldr	r3, [pc, #52]	; (f1bc <nrfx_gpiote_input_configure+0x150>)
    f188:	4298      	cmp	r0, r3
    f18a:	f47f af7f 	bne.w	f08c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    f18e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    f192:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    f196:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    f19a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    f19c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    f19e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    f1a2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    f1a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f1aa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    f1ae:	e79b      	b.n	f0e8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f1b0:	2200      	movs	r2, #0
    f1b2:	e7ee      	b.n	f192 <nrfx_gpiote_input_configure+0x126>
    f1b4:	200003fc 	.word	0x200003fc
    f1b8:	0bad0004 	.word	0x0bad0004
    f1bc:	0bad0000 	.word	0x0bad0000
    f1c0:	40006000 	.word	0x40006000
    f1c4:	20000450 	.word	0x20000450

0000f1c8 <nrfx_gpiote_output_configure>:
{
    f1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1ca:	4604      	mov	r4, r0
    if (p_config)
    f1cc:	b389      	cbz	r1, f232 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f1ce:	4e3a      	ldr	r6, [pc, #232]	; (f2b8 <nrfx_gpiote_output_configure+0xf0>)
    f1d0:	f100 0708 	add.w	r7, r0, #8
    f1d4:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    f1d8:	07ab      	lsls	r3, r5, #30
    f1da:	d404      	bmi.n	f1e6 <nrfx_gpiote_output_configure+0x1e>
    f1dc:	f7ff fed8 	bl	ef90 <pin_in_use_by_te>
    f1e0:	b108      	cbz	r0, f1e6 <nrfx_gpiote_output_configure+0x1e>
{
    f1e2:	4836      	ldr	r0, [pc, #216]	; (f2bc <nrfx_gpiote_output_configure+0xf4>)
}
    f1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    f1e6:	f015 0f1c 	tst.w	r5, #28
    f1ea:	784b      	ldrb	r3, [r1, #1]
    f1ec:	d124      	bne.n	f238 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    f1ee:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f1f2:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    f1f6:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    f1fa:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f1fc:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f200:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    f204:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    f206:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    f20a:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    f20e:	f02c 0c07 	bic.w	ip, ip, #7
    f212:	ea43 030c 	orr.w	r3, r3, ip
    f216:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    f21a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    f21e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f222:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    f226:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    f22a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    f22e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    f232:	b922      	cbnz	r2, f23e <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    f234:	4822      	ldr	r0, [pc, #136]	; (f2c0 <nrfx_gpiote_output_configure+0xf8>)
    f236:	e7d5      	b.n	f1e4 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    f238:	2b01      	cmp	r3, #1
    f23a:	d1d8      	bne.n	f1ee <nrfx_gpiote_output_configure+0x26>
    f23c:	e7d1      	b.n	f1e2 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f23e:	4e1e      	ldr	r6, [pc, #120]	; (f2b8 <nrfx_gpiote_output_configure+0xf0>)
    f240:	f104 0708 	add.w	r7, r4, #8
    f244:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    f248:	0783      	lsls	r3, r0, #30
    f24a:	d5ca      	bpl.n	f1e2 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    f24c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    f250:	4661      	mov	r1, ip
    f252:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    f254:	f020 0020 	bic.w	r0, r0, #32
    f258:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    f25c:	04c0      	lsls	r0, r0, #19
    f25e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    f262:	0cc0      	lsrs	r0, r0, #19
    f264:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    f268:	2300      	movs	r3, #0
    f26a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    f26e:	7855      	ldrb	r5, [r2, #1]
    f270:	2d00      	cmp	r5, #0
    f272:	d0df      	beq.n	f234 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    f274:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    f278:	7892      	ldrb	r2, [r2, #2]
    f27a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    f27e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    f282:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f286:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    f28a:	0223      	lsls	r3, r4, #8
    f28c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    f290:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f292:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    f296:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    f29a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f29c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    f29e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    f2a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f2a6:	4313      	orrs	r3, r2
    f2a8:	f040 0020 	orr.w	r0, r0, #32
    f2ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    f2b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    f2b4:	e7be      	b.n	f234 <nrfx_gpiote_output_configure+0x6c>
    f2b6:	bf00      	nop
    f2b8:	200003fc 	.word	0x200003fc
    f2bc:	0bad0004 	.word	0x0bad0004
    f2c0:	0bad0000 	.word	0x0bad0000

0000f2c4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    f2c4:	4b01      	ldr	r3, [pc, #4]	; (f2cc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    f2c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    f2ca:	4770      	bx	lr
    f2cc:	200003fc 	.word	0x200003fc

0000f2d0 <nrfx_gpiote_channel_get>:
{
    f2d0:	b508      	push	{r3, lr}
    f2d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    f2d4:	f7ff fe5c 	bl	ef90 <pin_in_use_by_te>
    f2d8:	b138      	cbz	r0, f2ea <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f2da:	4b05      	ldr	r3, [pc, #20]	; (f2f0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    f2dc:	4805      	ldr	r0, [pc, #20]	; (f2f4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f2de:	3208      	adds	r2, #8
    f2e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    f2e4:	0b5b      	lsrs	r3, r3, #13
    f2e6:	700b      	strb	r3, [r1, #0]
}
    f2e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    f2ea:	4803      	ldr	r0, [pc, #12]	; (f2f8 <nrfx_gpiote_channel_get+0x28>)
    f2ec:	e7fc      	b.n	f2e8 <nrfx_gpiote_channel_get+0x18>
    f2ee:	bf00      	nop
    f2f0:	200003fc 	.word	0x200003fc
    f2f4:	0bad0000 	.word	0x0bad0000
    f2f8:	0bad0004 	.word	0x0bad0004

0000f2fc <nrfx_gpiote_init>:
{
    f2fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    f2fe:	4c0f      	ldr	r4, [pc, #60]	; (f33c <nrfx_gpiote_init+0x40>)
    f300:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    f304:	b9bd      	cbnz	r5, f336 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    f306:	2240      	movs	r2, #64	; 0x40
    f308:	4629      	mov	r1, r5
    f30a:	f104 0010 	add.w	r0, r4, #16
    f30e:	f002 fa2c 	bl	1176a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    f312:	2006      	movs	r0, #6
    f314:	f7fb fff6 	bl	b304 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f318:	4b09      	ldr	r3, [pc, #36]	; (f340 <nrfx_gpiote_init+0x44>)
    return err_code;
    f31a:	480a      	ldr	r0, [pc, #40]	; (f344 <nrfx_gpiote_init+0x48>)
    f31c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    f320:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    f324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f328:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    f32c:	2301      	movs	r3, #1
    f32e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    f332:	6563      	str	r3, [r4, #84]	; 0x54
}
    f334:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    f336:	4804      	ldr	r0, [pc, #16]	; (f348 <nrfx_gpiote_init+0x4c>)
    f338:	e7fc      	b.n	f334 <nrfx_gpiote_init+0x38>
    f33a:	bf00      	nop
    f33c:	200003fc 	.word	0x200003fc
    f340:	40006000 	.word	0x40006000
    f344:	0bad0000 	.word	0x0bad0000
    f348:	0bad0005 	.word	0x0bad0005

0000f34c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    f34c:	4b03      	ldr	r3, [pc, #12]	; (f35c <nrfx_gpiote_is_init+0x10>)
    f34e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    f352:	3800      	subs	r0, #0
    f354:	bf18      	it	ne
    f356:	2001      	movne	r0, #1
    f358:	4770      	bx	lr
    f35a:	bf00      	nop
    f35c:	200003fc 	.word	0x200003fc

0000f360 <nrfx_gpiote_channel_free>:
{
    f360:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    f362:	4801      	ldr	r0, [pc, #4]	; (f368 <nrfx_gpiote_channel_free+0x8>)
    f364:	f7ff bdf4 	b.w	ef50 <nrfx_flag32_free>
    f368:	2000044c 	.word	0x2000044c

0000f36c <nrfx_gpiote_channel_alloc>:
{
    f36c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    f36e:	4801      	ldr	r0, [pc, #4]	; (f374 <nrfx_gpiote_channel_alloc+0x8>)
    f370:	f7ff bdce 	b.w	ef10 <nrfx_flag32_alloc>
    f374:	2000044c 	.word	0x2000044c

0000f378 <nrfx_gpiote_trigger_enable>:
{
    f378:	b510      	push	{r4, lr}
    f37a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f37c:	f7ff fe08 	bl	ef90 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f380:	f102 0408 	add.w	r4, r2, #8
    f384:	4b1c      	ldr	r3, [pc, #112]	; (f3f8 <nrfx_gpiote_trigger_enable+0x80>)
    f386:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f38a:	b1e0      	cbz	r0, f3c6 <nrfx_gpiote_trigger_enable+0x4e>
    f38c:	f013 0402 	ands.w	r4, r3, #2
    f390:	d119      	bne.n	f3c6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f392:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    f394:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    f396:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    f39a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    f39e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f3a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f3a6:	6004      	str	r4, [r0, #0]
    f3a8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f3aa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    f3ae:	f040 0001 	orr.w	r0, r0, #1
    f3b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    f3b6:	b129      	cbz	r1, f3c4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    f3b8:	2201      	movs	r2, #1
    f3ba:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    f3be:	4a0f      	ldr	r2, [pc, #60]	; (f3fc <nrfx_gpiote_trigger_enable+0x84>)
    f3c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    f3c4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f3c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    f3ca:	2b04      	cmp	r3, #4
    f3cc:	d010      	beq.n	f3f0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    f3ce:	2b05      	cmp	r3, #5
    f3d0:	d010      	beq.n	f3f4 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    f3d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f3d6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    f3da:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    f3de:	40d9      	lsrs	r1, r3
    f3e0:	f001 0101 	and.w	r1, r1, #1
    f3e4:	3102      	adds	r1, #2
}
    f3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    f3ea:	4610      	mov	r0, r2
    f3ec:	f002 bd83 	b.w	11ef6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    f3f0:	2103      	movs	r1, #3
    f3f2:	e7f8      	b.n	f3e6 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    f3f4:	2102      	movs	r1, #2
    f3f6:	e7f6      	b.n	f3e6 <nrfx_gpiote_trigger_enable+0x6e>
    f3f8:	200003fc 	.word	0x200003fc
    f3fc:	40006000 	.word	0x40006000

0000f400 <nrfx_gpiote_trigger_disable>:
{
    f400:	b508      	push	{r3, lr}
    f402:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f404:	f7ff fdc4 	bl	ef90 <pin_in_use_by_te>
    f408:	b1c0      	cbz	r0, f43c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f40a:	f102 0108 	add.w	r1, r2, #8
    f40e:	4b0e      	ldr	r3, [pc, #56]	; (f448 <nrfx_gpiote_trigger_disable+0x48>)
    f410:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f414:	0799      	lsls	r1, r3, #30
    f416:	d411      	bmi.n	f43c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f418:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    f41a:	2201      	movs	r2, #1
    f41c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    f41e:	009b      	lsls	r3, r3, #2
    f420:	490a      	ldr	r1, [pc, #40]	; (f44c <nrfx_gpiote_trigger_disable+0x4c>)
    f422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f426:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    f42a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    f42e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f432:	f022 0203 	bic.w	r2, r2, #3
    f436:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    f43a:	bd08      	pop	{r3, pc}
    f43c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    f440:	2100      	movs	r1, #0
    f442:	4610      	mov	r0, r2
    f444:	f002 bd57 	b.w	11ef6 <nrf_gpio_cfg_sense_set>
    f448:	200003fc 	.word	0x200003fc
    f44c:	40006000 	.word	0x40006000

0000f450 <nrfx_gpiote_pin_uninit>:
{
    f450:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    f452:	4b0d      	ldr	r3, [pc, #52]	; (f488 <nrfx_gpiote_pin_uninit+0x38>)
    f454:	f100 0208 	add.w	r2, r0, #8
{
    f458:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    f45a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    f45e:	07db      	lsls	r3, r3, #31
    f460:	d50f      	bpl.n	f482 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    f462:	f7ff ffcd 	bl	f400 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    f466:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    f468:	f004 041f 	and.w	r4, r4, #31
    f46c:	f7ff fde2 	bl	f034 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    f470:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    f474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f478:	2202      	movs	r2, #2
    f47a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    f47e:	4803      	ldr	r0, [pc, #12]	; (f48c <nrfx_gpiote_pin_uninit+0x3c>)
}
    f480:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    f482:	4803      	ldr	r0, [pc, #12]	; (f490 <nrfx_gpiote_pin_uninit+0x40>)
    f484:	e7fc      	b.n	f480 <nrfx_gpiote_pin_uninit+0x30>
    f486:	bf00      	nop
    f488:	200003fc 	.word	0x200003fc
    f48c:	0bad0000 	.word	0x0bad0000
    f490:	0bad0004 	.word	0x0bad0004

0000f494 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    f494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f498:	4b4f      	ldr	r3, [pc, #316]	; (f5d8 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    f49a:	4850      	ldr	r0, [pc, #320]	; (f5dc <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    f49c:	4950      	ldr	r1, [pc, #320]	; (f5e0 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    f49e:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    f4a0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f4a2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f4a4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    f4a6:	b136      	cbz	r6, f4b6 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    f4a8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    f4ac:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f4ae:	bf1e      	ittt	ne
    f4b0:	601c      	strne	r4, [r3, #0]
    f4b2:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    f4b4:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    f4b6:	3304      	adds	r3, #4
    f4b8:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    f4ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    f4be:	d1f1      	bne.n	f4a4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f4c0:	4b46      	ldr	r3, [pc, #280]	; (f5dc <nrfx_gpiote_irq_handler+0x148>)
    f4c2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    f4c6:	b1bb      	cbz	r3, f4f8 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    f4c8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    f4cc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    f4d0:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    f4d2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    f4d6:	af01      	add	r7, sp, #4
    f4d8:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    f4dc:	9c01      	ldr	r4, [sp, #4]
    f4de:	b98c      	cbnz	r4, f504 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f4e0:	4b3e      	ldr	r3, [pc, #248]	; (f5dc <nrfx_gpiote_irq_handler+0x148>)
    f4e2:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    f4e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    f4ea:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    f4ee:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    f4f0:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    f4f4:	2b00      	cmp	r3, #0
    f4f6:	d1ee      	bne.n	f4d6 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    f4f8:	2401      	movs	r4, #1
    while (mask)
    f4fa:	2d00      	cmp	r5, #0
    f4fc:	d153      	bne.n	f5a6 <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    f4fe:	b003      	add	sp, #12
    f500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    f504:	fa94 f4a4 	rbit	r4, r4
    f508:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f50c:	4a35      	ldr	r2, [pc, #212]	; (f5e4 <nrfx_gpiote_irq_handler+0x150>)
    f50e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    f512:	08e0      	lsrs	r0, r4, #3
    f514:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    f518:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    f51a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    f51e:	fa08 f202 	lsl.w	r2, r8, r2
    f522:	ea23 0302 	bic.w	r3, r3, r2
    f526:	543b      	strb	r3, [r7, r0]
    f528:	00a3      	lsls	r3, r4, #2
    f52a:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    f52e:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    f532:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    f536:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f538:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    f53a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    f53e:	d518      	bpl.n	f572 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    f540:	4659      	mov	r1, fp
    f542:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    f544:	fa5f fa82 	uxtb.w	sl, r2
    f548:	f7ff fd2c 	bl	efa4 <call_handler>
    f54c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    f550:	f3c3 4301 	ubfx	r3, r3, #16, #2
    f554:	459a      	cmp	sl, r3
    f556:	d107      	bne.n	f568 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    f558:	2100      	movs	r1, #0
    f55a:	4620      	mov	r0, r4
    f55c:	f002 fccb 	bl	11ef6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    f560:	4651      	mov	r1, sl
    f562:	4620      	mov	r0, r4
    f564:	f002 fcc7 	bl	11ef6 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    f568:	fa08 f404 	lsl.w	r4, r8, r4
    f56c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    f570:	e7b4      	b.n	f4dc <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    f572:	2a02      	cmp	r2, #2
    f574:	d10c      	bne.n	f590 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    f576:	2103      	movs	r1, #3
    f578:	4620      	mov	r0, r4
    f57a:	f002 fcbc 	bl	11ef6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    f57e:	f00a 0305 	and.w	r3, sl, #5
    f582:	2b01      	cmp	r3, #1
    f584:	d1f0      	bne.n	f568 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    f586:	4659      	mov	r1, fp
    f588:	4620      	mov	r0, r4
    f58a:	f7ff fd0b 	bl	efa4 <call_handler>
    f58e:	e7eb      	b.n	f568 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    f590:	2102      	movs	r1, #2
    f592:	4620      	mov	r0, r4
    f594:	f002 fcaf 	bl	11ef6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    f598:	f1ba 0f03 	cmp.w	sl, #3
    f59c:	d0f3      	beq.n	f586 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    f59e:	2a03      	cmp	r2, #3
    f5a0:	d1e2      	bne.n	f568 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    f5a2:	458a      	cmp	sl, r1
    f5a4:	e7ee      	b.n	f584 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    f5a6:	fa95 f3a5 	rbit	r3, r5
    f5aa:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    f5ae:	fa04 f203 	lsl.w	r2, r4, r3
    f5b2:	009b      	lsls	r3, r3, #2
    f5b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f5b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    f5bc:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f5c0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    f5c4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    f5c8:	f3c0 2004 	ubfx	r0, r0, #8, #5
    f5cc:	f3c1 4101 	ubfx	r1, r1, #16, #2
    f5d0:	f7ff fce8 	bl	efa4 <call_handler>
    f5d4:	e791      	b.n	f4fa <nrfx_gpiote_irq_handler+0x66>
    f5d6:	bf00      	nop
    f5d8:	40006100 	.word	0x40006100
    f5dc:	40006000 	.word	0x40006000
    f5e0:	40006120 	.word	0x40006120
    f5e4:	200003fc 	.word	0x200003fc

0000f5e8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    f5e8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    f5ea:	4801      	ldr	r0, [pc, #4]	; (f5f0 <nrfx_ppi_channel_alloc+0x8>)
    f5ec:	f7ff bc90 	b.w	ef10 <nrfx_flag32_alloc>
    f5f0:	20000458 	.word	0x20000458

0000f5f4 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    f5f4:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    f5f6:	4b3b      	ldr	r3, [pc, #236]	; (f6e4 <twi_tx_start_transfer+0xf0>)
    f5f8:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5fa:	2300      	movs	r3, #0
    f5fc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    f600:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    f604:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    f608:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    f60c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    f610:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    f614:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    f618:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    f61c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    f620:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    f622:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f626:	2301      	movs	r3, #1
    f628:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    f62a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    f62e:	429a      	cmp	r2, r3
    f630:	bf18      	it	ne
    f632:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    f634:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    f636:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    f638:	4293      	cmp	r3, r2
{
    f63a:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    f63c:	d20e      	bcs.n	f65c <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    f63e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    f640:	5cd3      	ldrb	r3, [r2, r3]
    f642:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    f646:	680b      	ldr	r3, [r1, #0]
    f648:	b303      	cbz	r3, f68c <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    f64a:	f240 2386 	movw	r3, #646	; 0x286
    f64e:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    f650:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    f652:	4825      	ldr	r0, [pc, #148]	; (f6e8 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    f654:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    f658:	b002      	add	sp, #8
    f65a:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    f65c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    f660:	b113      	cbz	r3, f668 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f662:	2301      	movs	r3, #1
    f664:	61c3      	str	r3, [r0, #28]
            return false;
    f666:	e7ee      	b.n	f646 <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    f668:	6a0b      	ldr	r3, [r1, #32]
    f66a:	f013 0f40 	tst.w	r3, #64	; 0x40
    f66e:	f04f 0301 	mov.w	r3, #1
    f672:	bf16      	itet	ne
    f674:	61c3      	strne	r3, [r0, #28]
    f676:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    f678:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    f67c:	e7e3      	b.n	f646 <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    f67e:	4620      	mov	r0, r4
    f680:	f002 fc47 	bl	11f12 <twi_transfer>
        while ((hw_timeout > 0) &&
    f684:	b128      	cbz	r0, f692 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    f686:	9b01      	ldr	r3, [sp, #4]
    f688:	3b01      	subs	r3, #1
    f68a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    f68c:	9b01      	ldr	r3, [sp, #4]
    f68e:	2b00      	cmp	r3, #0
    f690:	dcf5      	bgt.n	f67e <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    f692:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    f696:	b95b      	cbnz	r3, f6b0 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    f698:	4813      	ldr	r0, [pc, #76]	; (f6e8 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    f69a:	9b01      	ldr	r3, [sp, #4]
    f69c:	2b00      	cmp	r3, #0
    f69e:	dcdb      	bgt.n	f658 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    f6a0:	2300      	movs	r3, #0
    f6a2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    f6a6:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    f6a8:	4810      	ldr	r0, [pc, #64]	; (f6ec <twi_tx_start_transfer+0xf8>)
    f6aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    f6ae:	e7d3      	b.n	f658 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    f6b0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    f6b4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    f6b8:	b18b      	cbz	r3, f6de <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    f6ba:	4a0d      	ldr	r2, [pc, #52]	; (f6f0 <twi_tx_start_transfer+0xfc>)
    f6bc:	480b      	ldr	r0, [pc, #44]	; (f6ec <twi_tx_start_transfer+0xf8>)
    f6be:	f013 0f01 	tst.w	r3, #1
    f6c2:	bf18      	it	ne
    f6c4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    f6c6:	f013 0f02 	tst.w	r3, #2
    f6ca:	f102 0201 	add.w	r2, r2, #1
    f6ce:	bf18      	it	ne
    f6d0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    f6d2:	f013 0f04 	tst.w	r3, #4
    f6d6:	4b07      	ldr	r3, [pc, #28]	; (f6f4 <twi_tx_start_transfer+0x100>)
    f6d8:	bf18      	it	ne
    f6da:	4618      	movne	r0, r3
    f6dc:	e7dd      	b.n	f69a <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    f6de:	4803      	ldr	r0, [pc, #12]	; (f6ec <twi_tx_start_transfer+0xf8>)
    f6e0:	e7db      	b.n	f69a <twi_tx_start_transfer+0xa6>
    f6e2:	bf00      	nop
    f6e4:	000186a0 	.word	0x000186a0
    f6e8:	0bad0000 	.word	0x0bad0000
    f6ec:	0bad0001 	.word	0x0bad0001
    f6f0:	0bae0000 	.word	0x0bae0000
    f6f4:	0bae0002 	.word	0x0bae0002

0000f6f8 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    f6f8:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    f6fa:	4b33      	ldr	r3, [pc, #204]	; (f7c8 <twi_rx_start_transfer+0xd0>)
    f6fc:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6fe:	2300      	movs	r3, #0
    f700:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    f704:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    f708:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    f70c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    f710:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    f714:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    f718:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    f71c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    f720:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    f722:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    f726:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    f728:	2b01      	cmp	r3, #1
{
    f72a:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    f72c:	d117      	bne.n	f75e <twi_rx_start_transfer+0x66>
    f72e:	6a0b      	ldr	r3, [r1, #32]
    f730:	065b      	lsls	r3, r3, #25
    f732:	d414      	bmi.n	f75e <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    f734:	2302      	movs	r3, #2
    f736:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f73a:	2301      	movs	r3, #1
    f73c:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    f73e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    f742:	2a02      	cmp	r2, #2
    f744:	bf18      	it	ne
    f746:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    f748:	680b      	ldr	r3, [r1, #0]
    f74a:	b18b      	cbz	r3, f770 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    f74c:	f240 2386 	movw	r3, #646	; 0x286
    f750:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    f752:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    f754:	481d      	ldr	r0, [pc, #116]	; (f7cc <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    f756:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    f75a:	b002      	add	sp, #8
    f75c:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    f75e:	2301      	movs	r3, #1
    f760:	e7e9      	b.n	f736 <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    f762:	4620      	mov	r0, r4
    f764:	f002 fbd5 	bl	11f12 <twi_transfer>
        while ((hw_timeout > 0) &&
    f768:	b128      	cbz	r0, f776 <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    f76a:	9b01      	ldr	r3, [sp, #4]
    f76c:	3b01      	subs	r3, #1
    f76e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    f770:	9b01      	ldr	r3, [sp, #4]
    f772:	2b00      	cmp	r3, #0
    f774:	dcf5      	bgt.n	f762 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    f776:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    f77a:	b95b      	cbnz	r3, f794 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    f77c:	4813      	ldr	r0, [pc, #76]	; (f7cc <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    f77e:	9b01      	ldr	r3, [sp, #4]
    f780:	2b00      	cmp	r3, #0
    f782:	dcea      	bgt.n	f75a <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    f784:	2300      	movs	r3, #0
    f786:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    f78a:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    f78c:	4810      	ldr	r0, [pc, #64]	; (f7d0 <twi_rx_start_transfer+0xd8>)
    f78e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    f792:	e7e2      	b.n	f75a <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    f794:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    f798:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    f79c:	b18b      	cbz	r3, f7c2 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    f79e:	4a0d      	ldr	r2, [pc, #52]	; (f7d4 <twi_rx_start_transfer+0xdc>)
    f7a0:	480b      	ldr	r0, [pc, #44]	; (f7d0 <twi_rx_start_transfer+0xd8>)
    f7a2:	f013 0f01 	tst.w	r3, #1
    f7a6:	bf18      	it	ne
    f7a8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    f7aa:	f013 0f02 	tst.w	r3, #2
    f7ae:	f102 0201 	add.w	r2, r2, #1
    f7b2:	bf18      	it	ne
    f7b4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    f7b6:	f013 0f04 	tst.w	r3, #4
    f7ba:	4b07      	ldr	r3, [pc, #28]	; (f7d8 <twi_rx_start_transfer+0xe0>)
    f7bc:	bf18      	it	ne
    f7be:	4618      	movne	r0, r3
    f7c0:	e7dd      	b.n	f77e <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    f7c2:	4803      	ldr	r0, [pc, #12]	; (f7d0 <twi_rx_start_transfer+0xd8>)
    f7c4:	e7db      	b.n	f77e <twi_rx_start_transfer+0x86>
    f7c6:	bf00      	nop
    f7c8:	000186a0 	.word	0x000186a0
    f7cc:	0bad0000 	.word	0x0bad0000
    f7d0:	0bad0001 	.word	0x0bad0001
    f7d4:	0bae0000 	.word	0x0bae0000
    f7d8:	0bae0002 	.word	0x0bae0002

0000f7dc <nrfx_twi_init>:
{
    f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    f7de:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f7e0:	4d25      	ldr	r5, [pc, #148]	; (f878 <nrfx_twi_init+0x9c>)
    f7e2:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    f7e6:	fb0e fe06 	mul.w	lr, lr, r6
    f7ea:	eb05 040e 	add.w	r4, r5, lr
    f7ee:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    f7f2:	2f00      	cmp	r7, #0
    f7f4:	d13d      	bne.n	f872 <nrfx_twi_init+0x96>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    f7f6:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    f7fa:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    f7fe:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    f800:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    f802:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    f806:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    p_cb->busy            = false;
    f80a:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f80e:	7b4b      	ldrb	r3, [r1, #13]
    f810:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f814:	7b8b      	ldrb	r3, [r1, #14]
    f816:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    f81a:	b98b      	cbnz	r3, f840 <nrfx_twi_init+0x64>
    *p_pin = pin_number & 0x1F;
    f81c:	680b      	ldr	r3, [r1, #0]
    f81e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    f822:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    f826:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    f82a:	f240 670c 	movw	r7, #1548	; 0x60c
    f82e:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    f832:	684b      	ldr	r3, [r1, #4]
    f834:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    f838:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    f83c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    f840:	7bcb      	ldrb	r3, [r1, #15]
    f842:	b92b      	cbnz	r3, f850 <nrfx_twi_init+0x74>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    f844:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSELSCL = scl_pin;
    f848:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    f84c:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    f850:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    f852:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    f856:	b122      	cbz	r2, f862 <nrfx_twi_init+0x86>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    f858:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    f85a:	f340 3007 	sbfx	r0, r0, #12, #8
    f85e:	f7fb fd51 	bl	b304 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f862:	233c      	movs	r3, #60	; 0x3c
    f864:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    f868:	4804      	ldr	r0, [pc, #16]	; (f87c <nrfx_twi_init+0xa0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f86a:	2301      	movs	r3, #1
    f86c:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    f870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    f872:	4803      	ldr	r0, [pc, #12]	; (f880 <nrfx_twi_init+0xa4>)
    f874:	e7fc      	b.n	f870 <nrfx_twi_init+0x94>
    f876:	bf00      	nop
    f878:	200019fc 	.word	0x200019fc
    f87c:	0bad0000 	.word	0x0bad0000
    f880:	0bad0005 	.word	0x0bad0005

0000f884 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    f884:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f886:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    f888:	2105      	movs	r1, #5
    f88a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    f88e:	4b04      	ldr	r3, [pc, #16]	; (f8a0 <nrfx_twi_enable+0x1c>)
    f890:	213c      	movs	r1, #60	; 0x3c
    f892:	fb01 3302 	mla	r3, r1, r2, r3
    f896:	2202      	movs	r2, #2
    f898:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    f89c:	4770      	bx	lr
    f89e:	bf00      	nop
    f8a0:	200019fc 	.word	0x200019fc

0000f8a4 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    f8a4:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    f8a6:	4a0b      	ldr	r2, [pc, #44]	; (f8d4 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f8a8:	7901      	ldrb	r1, [r0, #4]
    f8aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    f8ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f8b2:	f022 0203 	bic.w	r2, r2, #3
    f8b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    f8ba:	2200      	movs	r2, #0
    f8bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f8c0:	4b05      	ldr	r3, [pc, #20]	; (f8d8 <nrfx_twi_disable+0x34>)
    f8c2:	203c      	movs	r0, #60	; 0x3c
    f8c4:	fb00 3301 	mla	r3, r0, r1, r3
    f8c8:	2101      	movs	r1, #1
    f8ca:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    f8ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    f8d2:	4770      	bx	lr
    f8d4:	00044286 	.word	0x00044286
    f8d8:	200019fc 	.word	0x200019fc

0000f8dc <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    f8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    f8e0:	4f31      	ldr	r7, [pc, #196]	; (f9a8 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f8e2:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    f8e4:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    f8e8:	233c      	movs	r3, #60	; 0x3c
    f8ea:	fb03 7304 	mla	r3, r3, r4, r7
{
    f8ee:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    f8f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f8f4:	2b01      	cmp	r3, #1
{
    f8f6:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    f8f8:	d104      	bne.n	f904 <nrfx_twi_xfer+0x28>
    f8fa:	780b      	ldrb	r3, [r1, #0]
    f8fc:	2b01      	cmp	r3, #1
    f8fe:	d106      	bne.n	f90e <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    f900:	482a      	ldr	r0, [pc, #168]	; (f9ac <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f902:	e011      	b.n	f928 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    f904:	2b02      	cmp	r3, #2
    f906:	d102      	bne.n	f90e <nrfx_twi_xfer+0x32>
    f908:	780b      	ldrb	r3, [r1, #0]
    f90a:	2b01      	cmp	r3, #1
    f90c:	d1f8      	bne.n	f900 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    f90e:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    f910:	4b27      	ldr	r3, [pc, #156]	; (f9b0 <nrfx_twi_xfer+0xd4>)
    f912:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    f916:	fb06 7604 	mla	r6, r6, r4, r7
    f91a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    f91e:	b12b      	cbz	r3, f92c <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    f920:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    f922:	4824      	ldr	r0, [pc, #144]	; (f9b4 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    f924:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    f92c:	f08c 0304 	eor.w	r3, ip, #4
    f930:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f934:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    f938:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    f93c:	46a8      	mov	r8, r5
    f93e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    f942:	f106 0e0c 	add.w	lr, r6, #12
    f946:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    f94a:	f8d8 3000 	ldr.w	r3, [r8]
    f94e:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    f952:	686b      	ldr	r3, [r5, #4]
    f954:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    f956:	68eb      	ldr	r3, [r5, #12]
    f958:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    f95a:	786b      	ldrb	r3, [r5, #1]
    f95c:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    f960:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f962:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    f966:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f968:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    f96c:	d017      	beq.n	f99e <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    f96e:	b99b      	cbnz	r3, f998 <nrfx_twi_xfer+0xbc>
    f970:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    f974:	233c      	movs	r3, #60	; 0x3c
    f976:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    f97a:	4651      	mov	r1, sl
    f97c:	4648      	mov	r0, r9
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    f97e:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    f982:	f7ff fe37 	bl	f5f4 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    f986:	233c      	movs	r3, #60	; 0x3c
    f988:	435c      	muls	r4, r3
    f98a:	193a      	adds	r2, r7, r4
    f98c:	593b      	ldr	r3, [r7, r4]
    f98e:	2b00      	cmp	r3, #0
    f990:	d1ca      	bne.n	f928 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    f992:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    f996:	e7c7      	b.n	f928 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    f998:	f04f 0c01 	mov.w	ip, #1
    f99c:	e7ea      	b.n	f974 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    f99e:	4651      	mov	r1, sl
    f9a0:	4648      	mov	r0, r9
    f9a2:	f7ff fea9 	bl	f6f8 <twi_rx_start_transfer>
    f9a6:	e7ee      	b.n	f986 <nrfx_twi_xfer+0xaa>
    f9a8:	200019fc 	.word	0x200019fc
    f9ac:	0bad0005 	.word	0x0bad0005
    f9b0:	00044286 	.word	0x00044286
    f9b4:	0bad000b 	.word	0x0bad000b

0000f9b8 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    f9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    f9ba:	4c32      	ldr	r4, [pc, #200]	; (fa84 <nrfx_twi_0_irq_handler+0xcc>)
    f9bc:	4832      	ldr	r0, [pc, #200]	; (fa88 <nrfx_twi_0_irq_handler+0xd0>)
{
    f9be:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    f9c0:	4621      	mov	r1, r4
    f9c2:	f002 faa6 	bl	11f12 <twi_transfer>
    f9c6:	2800      	cmp	r0, #0
    f9c8:	d159      	bne.n	fa7e <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
    f9ca:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    f9ce:	b9ff      	cbnz	r7, fa10 <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    f9d0:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    f9d2:	1e93      	subs	r3, r2, #2
    f9d4:	2b01      	cmp	r3, #1
    f9d6:	d81b      	bhi.n	fa10 <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    f9d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f9da:	69a3      	ldr	r3, [r4, #24]
    f9dc:	4298      	cmp	r0, r3
    f9de:	d117      	bne.n	fa10 <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    f9e0:	69e3      	ldr	r3, [r4, #28]
    f9e2:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    f9e4:	6963      	ldr	r3, [r4, #20]
    f9e6:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    f9e8:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    f9ea:	4827      	ldr	r0, [pc, #156]	; (fa88 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    f9ec:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    f9f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    f9f4:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    f9f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    f9fa:	d104      	bne.n	fa06 <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    f9fc:	b007      	add	sp, #28
    f9fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    fa02:	f7ff bdf7 	b.w	f5f4 <twi_tx_start_transfer>
}
    fa06:	b007      	add	sp, #28
    fa08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    fa0c:	f7ff be74 	b.w	f6f8 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    fa10:	4e1e      	ldr	r6, [pc, #120]	; (fa8c <nrfx_twi_0_irq_handler+0xd4>)
    fa12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fa14:	ad01      	add	r5, sp, #4
    fa16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fa18:	6833      	ldr	r3, [r6, #0]
    fa1a:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    fa1c:	b347      	cbz	r7, fa70 <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
    fa1e:	4a1a      	ldr	r2, [pc, #104]	; (fa88 <nrfx_twi_0_irq_handler+0xd0>)
    fa20:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    fa24:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    fa28:	f013 0102 	ands.w	r1, r3, #2
    fa2c:	d006      	beq.n	fa3c <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    fa2e:	2301      	movs	r3, #1
    fa30:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    fa34:	2300      	movs	r3, #0
    fa36:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    fa3a:	e007      	b.n	fa4c <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    fa3c:	f013 0204 	ands.w	r2, r3, #4
    fa40:	d009      	beq.n	fa56 <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    fa42:	2302      	movs	r3, #2
    fa44:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    fa48:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    fa4c:	e9d4 3100 	ldrd	r3, r1, [r4]
    fa50:	4668      	mov	r0, sp
    fa52:	4798      	blx	r3
}
    fa54:	e013      	b.n	fa7e <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    fa56:	f013 0301 	ands.w	r3, r3, #1
    fa5a:	d005      	beq.n	fa68 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
    fa5c:	2303      	movs	r3, #3
    fa5e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    fa62:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    fa66:	e7f1      	b.n	fa4c <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    fa68:	2204      	movs	r2, #4
    fa6a:	f88d 2000 	strb.w	r2, [sp]
    fa6e:	e7e2      	b.n	fa36 <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    fa70:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    fa72:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    fa76:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    fa78:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    fa7c:	d5e6      	bpl.n	fa4c <nrfx_twi_0_irq_handler+0x94>
}
    fa7e:	b007      	add	sp, #28
    fa80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa82:	bf00      	nop
    fa84:	200019fc 	.word	0x200019fc
    fa88:	40003000 	.word	0x40003000
    fa8c:	20001a08 	.word	0x20001a08

0000fa90 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    fa94:	f000 001f 	and.w	r0, r0, #31
    fa98:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fa9c:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    fa9e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    faa2:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    faa6:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    faaa:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    faae:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fab2:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    fab4:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    fab8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    fabc:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    fac0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    fac4:	2004      	movs	r0, #4
    fac6:	f002 fa14 	bl	11ef2 <nrfx_busy_wait>
    faca:	2709      	movs	r7, #9
    return p_reg->IN;
    facc:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    fad0:	421c      	tst	r4, r3
    fad2:	d10d      	bne.n	faf0 <__kernel_ram_size+0x28>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    fad4:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    fad6:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    fada:	f002 fa0a 	bl	11ef2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    fade:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    fae0:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    fae4:	2004      	movs	r0, #4
    fae6:	f002 fa04 	bl	11ef2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    faea:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    faee:	d1ed      	bne.n	facc <__kernel_ram_size+0x4>
    p_reg->OUTCLR = clr_mask;
    faf0:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    faf4:	2004      	movs	r0, #4
    faf6:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    fafa:	f002 f9fa 	bl	11ef2 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    fafe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    fb02:	2004      	movs	r0, #4
    fb04:	f002 f9f5 	bl	11ef2 <nrfx_busy_wait>
    return p_reg->IN;
    fb08:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    fb0c:	4803      	ldr	r0, [pc, #12]	; (fb1c <__kernel_ram_size+0x54>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    fb0e:	40f3      	lsrs	r3, r6
    fb10:	f003 0301 	and.w	r3, r3, #1
    fb14:	1ac0      	subs	r0, r0, r3
    fb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb1a:	bf00      	nop
    fb1c:	0bad0001 	.word	0x0bad0001

0000fb20 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    fb20:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    fb22:	4c14      	ldr	r4, [pc, #80]	; (fb74 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    fb24:	4a14      	ldr	r2, [pc, #80]	; (fb78 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    fb26:	4915      	ldr	r1, [pc, #84]	; (fb7c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    fb28:	2303      	movs	r3, #3
    fb2a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    fb2c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    fb2e:	4b14      	ldr	r3, [pc, #80]	; (fb80 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    fb30:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    fb32:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    fb34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    fb38:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    fb3a:	2300      	movs	r3, #0
    fb3c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    fb3e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    fb40:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    fb42:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    fb44:	4a0f      	ldr	r2, [pc, #60]	; (fb84 <_DoInit+0x64>)
    fb46:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    fb48:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    fb4a:	2210      	movs	r2, #16
    fb4c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    fb4e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    fb50:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    fb52:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    fb54:	f001 fdd4 	bl	11700 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    fb58:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    fb5c:	490a      	ldr	r1, [pc, #40]	; (fb88 <_DoInit+0x68>)
    fb5e:	4620      	mov	r0, r4
    fb60:	f001 fdce 	bl	11700 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    fb64:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    fb68:	2320      	movs	r3, #32
    fb6a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    fb6c:	f3bf 8f5f 	dmb	sy
}
    fb70:	bd10      	pop	{r4, pc}
    fb72:	bf00      	nop
    fb74:	20001a38 	.word	0x20001a38
    fb78:	0001328e 	.word	0x0001328e
    fb7c:	00013297 	.word	0x00013297
    fb80:	20001bcd 	.word	0x20001bcd
    fb84:	20001bbd 	.word	0x20001bbd
    fb88:	0001329b 	.word	0x0001329b

0000fb8c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fb8c:	4b10      	ldr	r3, [pc, #64]	; (fbd0 <z_sys_init_run_level+0x44>)
{
    fb8e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fb90:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    fb94:	3001      	adds	r0, #1
    fb96:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    fb9a:	42a6      	cmp	r6, r4
    fb9c:	d800      	bhi.n	fba0 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    fb9e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    fba0:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    fba4:	b18d      	cbz	r5, fbca <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    fba6:	4628      	mov	r0, r5
    fba8:	4798      	blx	r3
			if (rc != 0) {
    fbaa:	b138      	cbz	r0, fbbc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    fbac:	2800      	cmp	r0, #0
    fbae:	bfb8      	it	lt
    fbb0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    fbb2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    fbb4:	28ff      	cmp	r0, #255	; 0xff
    fbb6:	bfa8      	it	ge
    fbb8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    fbba:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    fbbc:	68ea      	ldr	r2, [r5, #12]
    fbbe:	7853      	ldrb	r3, [r2, #1]
    fbc0:	f043 0301 	orr.w	r3, r3, #1
    fbc4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fbc6:	3408      	adds	r4, #8
    fbc8:	e7e7      	b.n	fb9a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    fbca:	4798      	blx	r3
    fbcc:	e7fb      	b.n	fbc6 <z_sys_init_run_level+0x3a>
    fbce:	bf00      	nop
    fbd0:	00012e9c 	.word	0x00012e9c

0000fbd4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    fbd4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    fbd6:	4b0a      	ldr	r3, [pc, #40]	; (fc00 <bg_thread_main+0x2c>)
    fbd8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    fbda:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    fbdc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    fbde:	f7ff ffd5 	bl	fb8c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    fbe2:	f001 fa0b 	bl	10ffc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    fbe6:	2004      	movs	r0, #4
    fbe8:	f7ff ffd0 	bl	fb8c <z_sys_init_run_level>

	z_init_static_threads();
    fbec:	f000 f92e 	bl	fe4c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    fbf0:	f7fa fc00 	bl	a3f4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    fbf4:	4a03      	ldr	r2, [pc, #12]	; (fc04 <bg_thread_main+0x30>)
    fbf6:	7b13      	ldrb	r3, [r2, #12]
    fbf8:	f023 0301 	bic.w	r3, r3, #1
    fbfc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    fbfe:	bd08      	pop	{r3, pc}
    fc00:	20001fcd 	.word	0x20001fcd
    fc04:	20001768 	.word	0x20001768

0000fc08 <z_bss_zero>:
{
    fc08:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    fc0a:	4803      	ldr	r0, [pc, #12]	; (fc18 <z_bss_zero+0x10>)
    fc0c:	4a03      	ldr	r2, [pc, #12]	; (fc1c <z_bss_zero+0x14>)
    fc0e:	2100      	movs	r1, #0
    fc10:	1a12      	subs	r2, r2, r0
    fc12:	f002 fa44 	bl	1209e <z_early_memset>
}
    fc16:	bd08      	pop	{r3, pc}
    fc18:	20000538 	.word	0x20000538
    fc1c:	20001fd0 	.word	0x20001fd0

0000fc20 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    fc20:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    fc22:	2300      	movs	r3, #0
{
    fc24:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    fc26:	2201      	movs	r2, #1
    fc28:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    fc2c:	4e13      	ldr	r6, [pc, #76]	; (fc7c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    fc2e:	4d14      	ldr	r5, [pc, #80]	; (fc80 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    fc30:	9301      	str	r3, [sp, #4]
    fc32:	220f      	movs	r2, #15
    fc34:	e9cd 3202 	strd	r3, r2, [sp, #8]
    fc38:	4912      	ldr	r1, [pc, #72]	; (fc84 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    fc3a:	2314      	movs	r3, #20
    fc3c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    fc40:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    fc44:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    fc46:	f44f 70c0 	mov.w	r0, #384	; 0x180
    fc4a:	fb00 1104 	mla	r1, r0, r4, r1
    fc4e:	4b0e      	ldr	r3, [pc, #56]	; (fc88 <z_init_cpu+0x68>)
    fc50:	9500      	str	r5, [sp, #0]
    fc52:	f44f 72a0 	mov.w	r2, #320	; 0x140
    fc56:	4630      	mov	r0, r6
    fc58:	f000 f89a 	bl	fd90 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fc5c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    fc5e:	4a0b      	ldr	r2, [pc, #44]	; (fc8c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    fc60:	60ee      	str	r6, [r5, #12]
    fc62:	f023 0304 	bic.w	r3, r3, #4
    fc66:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    fc68:	f44f 6304 	mov.w	r3, #2112	; 0x840
    fc6c:	fb04 3303 	mla	r3, r4, r3, r3
    fc70:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    fc72:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    fc74:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    fc76:	b006      	add	sp, #24
    fc78:	bd70      	pop	{r4, r5, r6, pc}
    fc7a:	bf00      	nop
    fc7c:	200016e8 	.word	0x200016e8
    fc80:	20001ae0 	.word	0x20001ae0
    fc84:	20003700 	.word	0x20003700
    fc88:	0000ff05 	.word	0x0000ff05
    fc8c:	20002ec0 	.word	0x20002ec0

0000fc90 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    fc90:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    fc92:	2000      	movs	r0, #0
{
    fc94:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    fc96:	f7ff ff79 	bl	fb8c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    fc9a:	4b2d      	ldr	r3, [pc, #180]	; (fd50 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    fc9c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    fca0:	4d2c      	ldr	r5, [pc, #176]	; (fd54 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    fca2:	4e2d      	ldr	r6, [pc, #180]	; (fd58 <z_cstart+0xc8>)
    fca4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fca6:	4f2d      	ldr	r7, [pc, #180]	; (fd5c <z_cstart+0xcc>)
    fca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fcac:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fcae:	23e0      	movs	r3, #224	; 0xe0
    fcb0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    fcb4:	2400      	movs	r4, #0
    fcb6:	2320      	movs	r3, #32
    fcb8:	77eb      	strb	r3, [r5, #31]
    fcba:	762c      	strb	r4, [r5, #24]
    fcbc:	766c      	strb	r4, [r5, #25]
    fcbe:	76ac      	strb	r4, [r5, #26]
    fcc0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    fcc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fcc6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    fcca:	626b      	str	r3, [r5, #36]	; 0x24
    fccc:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    fcd0:	f7fb fd98 	bl	b804 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    fcd4:	f7fb faf6 	bl	b2c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    fcd8:	f04f 33ff 	mov.w	r3, #4294967295
    fcdc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    fcde:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    fce0:	f7fb feca 	bl	ba78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    fce4:	f7fb fe30 	bl	b948 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    fce8:	f240 1301 	movw	r3, #257	; 0x101
    fcec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    fcf0:	ab06      	add	r3, sp, #24
    fcf2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    fcf4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    fcf8:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    fcfa:	f002 f9a9 	bl	12050 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    fcfe:	2001      	movs	r0, #1
    fd00:	f7ff ff44 	bl	fb8c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    fd04:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    fd06:	4d16      	ldr	r5, [pc, #88]	; (fd60 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    fd08:	f7ff ff40 	bl	fb8c <z_sys_init_run_level>
	z_sched_init();
    fd0c:	f000 fdba 	bl	10884 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fd10:	4b14      	ldr	r3, [pc, #80]	; (fd64 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    fd12:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fd14:	9305      	str	r3, [sp, #20]
    fd16:	2301      	movs	r3, #1
    fd18:	4913      	ldr	r1, [pc, #76]	; (fd68 <z_cstart+0xd8>)
    fd1a:	9400      	str	r4, [sp, #0]
    fd1c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    fd20:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fd24:	463b      	mov	r3, r7
    fd26:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fd2a:	4628      	mov	r0, r5
    fd2c:	f000 f830 	bl	fd90 <z_setup_new_thread>
    fd30:	7b6a      	ldrb	r2, [r5, #13]
    fd32:	4606      	mov	r6, r0
    fd34:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    fd38:	4628      	mov	r0, r5
    fd3a:	736a      	strb	r2, [r5, #13]
    fd3c:	f002 fb6b 	bl	12416 <z_ready_thread>
	z_init_cpu(0);
    fd40:	4620      	mov	r0, r4
    fd42:	f7ff ff6d 	bl	fc20 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    fd46:	463a      	mov	r2, r7
    fd48:	4631      	mov	r1, r6
    fd4a:	4628      	mov	r0, r5
    fd4c:	f7fb fbd8 	bl	b500 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    fd50:	20003700 	.word	0x20003700
    fd54:	e000ed00 	.word	0xe000ed00
    fd58:	20001ae0 	.word	0x20001ae0
    fd5c:	0000fbd5 	.word	0x0000fbd5
    fd60:	20001768 	.word	0x20001768
    fd64:	000132a2 	.word	0x000132a2
    fd68:	20003880 	.word	0x20003880

0000fd6c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    fd6c:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    fd6e:	4c06      	ldr	r4, [pc, #24]	; (fd88 <statics_init+0x1c>)
    fd70:	4d06      	ldr	r5, [pc, #24]	; (fd8c <statics_init+0x20>)
    fd72:	42ac      	cmp	r4, r5
    fd74:	d301      	bcc.n	fd7a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    fd76:	2000      	movs	r0, #0
    fd78:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    fd7a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    fd7e:	4620      	mov	r0, r4
    fd80:	f002 f991 	bl	120a6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    fd84:	3414      	adds	r4, #20
    fd86:	e7f4      	b.n	fd72 <statics_init+0x6>
    fd88:	20000499 	.word	0x20000499
    fd8c:	20000499 	.word	0x20000499

0000fd90 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    fd90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    fd94:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    fd96:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    fd98:	2604      	movs	r6, #4
    fd9a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    fd9c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    fd9e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    fda0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    fda4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fda6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    fda8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    fdae:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fdb0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    fdb4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    fdb6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    fdba:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    fdbe:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    fdc0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    fdc2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fdc4:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdc8:	9202      	str	r2, [sp, #8]
    fdca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fdcc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    fdce:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdd2:	9200      	str	r2, [sp, #0]
    fdd4:	4642      	mov	r2, r8
{
    fdd6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdd8:	f7fb fb60 	bl	b49c <arch_new_thread>
	if (!_current) {
    fddc:	4b04      	ldr	r3, [pc, #16]	; (fdf0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    fdde:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    fde0:	689b      	ldr	r3, [r3, #8]
    fde2:	b103      	cbz	r3, fde6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    fde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    fde6:	6763      	str	r3, [r4, #116]	; 0x74
}
    fde8:	4640      	mov	r0, r8
    fdea:	b004      	add	sp, #16
    fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdf0:	20001ae0 	.word	0x20001ae0

0000fdf4 <z_impl_k_thread_create>:
{
    fdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdf6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fdf8:	2500      	movs	r5, #0
    fdfa:	9505      	str	r5, [sp, #20]
    fdfc:	9d10      	ldr	r5, [sp, #64]	; 0x40
    fdfe:	9504      	str	r5, [sp, #16]
    fe00:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    fe02:	9503      	str	r5, [sp, #12]
    fe04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fe06:	9502      	str	r5, [sp, #8]
{
    fe08:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    fe0e:	9501      	str	r5, [sp, #4]
    fe10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fe12:	9500      	str	r5, [sp, #0]
{
    fe14:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe16:	f7ff ffbb 	bl	fd90 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    fe1a:	f1b6 3fff 	cmp.w	r6, #4294967295
    fe1e:	bf08      	it	eq
    fe20:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    fe24:	d005      	beq.n	fe32 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fe26:	ea56 0307 	orrs.w	r3, r6, r7
    fe2a:	d105      	bne.n	fe38 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    fe2c:	4620      	mov	r0, r4
    fe2e:	f000 fca9 	bl	10784 <z_sched_start>
}
    fe32:	4620      	mov	r0, r4
    fe34:	b007      	add	sp, #28
    fe36:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fe38:	4903      	ldr	r1, [pc, #12]	; (fe48 <z_impl_k_thread_create+0x54>)
    fe3a:	463a      	mov	r2, r7
    fe3c:	4633      	mov	r3, r6
    fe3e:	f104 0018 	add.w	r0, r4, #24
    fe42:	f000 fe9b 	bl	10b7c <z_add_timeout>
    fe46:	e7f4      	b.n	fe32 <z_impl_k_thread_create+0x3e>
    fe48:	0001249f 	.word	0x0001249f

0000fe4c <z_init_static_threads>:
{
    fe4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe50:	4c29      	ldr	r4, [pc, #164]	; (fef8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    fe52:	4d2a      	ldr	r5, [pc, #168]	; (fefc <z_init_static_threads+0xb0>)
{
    fe54:	b087      	sub	sp, #28
    fe56:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    fe58:	42ae      	cmp	r6, r5
    fe5a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    fe5e:	d30f      	bcc.n	fe80 <z_init_static_threads+0x34>
	k_sched_lock();
    fe60:	f000 fce0 	bl	10824 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    fe64:	4c24      	ldr	r4, [pc, #144]	; (fef8 <z_init_static_threads+0xac>)
    fe66:	f8df 9098 	ldr.w	r9, [pc, #152]	; ff00 <z_init_static_threads+0xb4>
    fe6a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    fe6e:	f240 37e7 	movw	r7, #999	; 0x3e7
    fe72:	42ac      	cmp	r4, r5
    fe74:	d320      	bcc.n	feb8 <z_init_static_threads+0x6c>
}
    fe76:	b007      	add	sp, #28
    fe78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    fe7c:	f000 bce6 	b.w	1084c <k_sched_unlock>
		z_setup_new_thread(
    fe80:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fe84:	9305      	str	r3, [sp, #20]
    fe86:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    fe8a:	9304      	str	r3, [sp, #16]
    fe8c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    fe90:	9303      	str	r3, [sp, #12]
    fe92:	f854 3c14 	ldr.w	r3, [r4, #-20]
    fe96:	9302      	str	r3, [sp, #8]
    fe98:	f854 3c18 	ldr.w	r3, [r4, #-24]
    fe9c:	9301      	str	r3, [sp, #4]
    fe9e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    fea2:	9300      	str	r3, [sp, #0]
    fea4:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    fea8:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    feac:	f7ff ff70 	bl	fd90 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    feb0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    feb4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    feb6:	e7ce      	b.n	fe56 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    feb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    feba:	1c5a      	adds	r2, r3, #1
    febc:	d00d      	beq.n	feda <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    febe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fec2:	2100      	movs	r1, #0
    fec4:	4638      	mov	r0, r7
    fec6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    feca:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    fece:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fed2:	d104      	bne.n	fede <z_init_static_threads+0x92>
	z_sched_start(thread);
    fed4:	4640      	mov	r0, r8
    fed6:	f000 fc55 	bl	10784 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    feda:	342c      	adds	r4, #44	; 0x2c
    fedc:	e7c9      	b.n	fe72 <z_init_static_threads+0x26>
    fede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fee2:	2300      	movs	r3, #0
    fee4:	f7f0 f8fa 	bl	dc <__aeabi_uldivmod>
    fee8:	4602      	mov	r2, r0
    feea:	460b      	mov	r3, r1
    feec:	f108 0018 	add.w	r0, r8, #24
    fef0:	4649      	mov	r1, r9
    fef2:	f000 fe43 	bl	10b7c <z_add_timeout>
    fef6:	e7f0      	b.n	feda <z_init_static_threads+0x8e>
    fef8:	00012bb4 	.word	0x00012bb4
    fefc:	00012bb4 	.word	0x00012bb4
    ff00:	0001249f 	.word	0x0001249f

0000ff04 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ff04:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ff06:	4c0b      	ldr	r4, [pc, #44]	; (ff34 <idle+0x30>)
	return !z_sys_post_kernel;
    ff08:	4d0b      	ldr	r5, [pc, #44]	; (ff38 <idle+0x34>)
	__asm__ volatile(
    ff0a:	f04f 0240 	mov.w	r2, #64	; 0x40
    ff0e:	f3ef 8311 	mrs	r3, BASEPRI
    ff12:	f382 8812 	msr	BASEPRI_MAX, r2
    ff16:	f3bf 8f6f 	isb	sy
    ff1a:	f002 fb6e 	bl	125fa <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ff1e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    ff20:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ff22:	b913      	cbnz	r3, ff2a <idle+0x26>
	arch_cpu_idle();
    ff24:	f7fb f9d4 	bl	b2d0 <arch_cpu_idle>
}
    ff28:	e7ef      	b.n	ff0a <idle+0x6>
    ff2a:	f7fb f8fd 	bl	b128 <pm_system_suspend>
    ff2e:	2800      	cmp	r0, #0
    ff30:	d1eb      	bne.n	ff0a <idle+0x6>
    ff32:	e7f7      	b.n	ff24 <idle+0x20>
    ff34:	20001ae0 	.word	0x20001ae0
    ff38:	20001fcd 	.word	0x20001fcd

0000ff3c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ff3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ff40:	4604      	mov	r4, r0
    ff42:	4617      	mov	r7, r2
    ff44:	461e      	mov	r6, r3
    ff46:	f04f 0340 	mov.w	r3, #64	; 0x40
    ff4a:	f3ef 8811 	mrs	r8, BASEPRI
    ff4e:	f383 8812 	msr	BASEPRI_MAX, r3
    ff52:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ff56:	68c3      	ldr	r3, [r0, #12]
    ff58:	4a33      	ldr	r2, [pc, #204]	; (10028 <CONFIG_PM_SRAM_SIZE+0x28>)
    ff5a:	b17b      	cbz	r3, ff7c <z_impl_k_mutex_lock+0x40>
    ff5c:	6880      	ldr	r0, [r0, #8]
    ff5e:	6891      	ldr	r1, [r2, #8]
    ff60:	4288      	cmp	r0, r1
    ff62:	d019      	beq.n	ff98 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ff64:	ea57 0306 	orrs.w	r3, r7, r6
    ff68:	d118      	bne.n	ff9c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    ff6a:	f388 8811 	msr	BASEPRI, r8
    ff6e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    ff72:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    ff76:	b002      	add	sp, #8
    ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    ff7c:	6891      	ldr	r1, [r2, #8]
    ff7e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ff82:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    ff84:	3301      	adds	r3, #1
    ff86:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ff88:	6893      	ldr	r3, [r2, #8]
    ff8a:	60a3      	str	r3, [r4, #8]
    ff8c:	f388 8811 	msr	BASEPRI, r8
    ff90:	f3bf 8f6f 	isb	sy
		return 0;
    ff94:	2000      	movs	r0, #0
    ff96:	e7ee      	b.n	ff76 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    ff98:	6921      	ldr	r1, [r4, #16]
    ff9a:	e7f2      	b.n	ff82 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ff9c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    ffa0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ffa4:	4299      	cmp	r1, r3
    ffa6:	bfa8      	it	ge
    ffa8:	4619      	movge	r1, r3
    ffaa:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    ffae:	4291      	cmp	r1, r2
    ffb0:	bfb8      	it	lt
    ffb2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ffb4:	428b      	cmp	r3, r1
    ffb6:	dd2e      	ble.n	10016 <CONFIG_PM_SRAM_SIZE+0x16>
		resched = adjust_owner_prio(mutex, new_prio);
    ffb8:	f002 f8f9 	bl	121ae <adjust_owner_prio.isra.0>
    ffbc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ffbe:	e9cd 7600 	strd	r7, r6, [sp]
    ffc2:	481a      	ldr	r0, [pc, #104]	; (1002c <CONFIG_PM_SRAM_SIZE+0x2c>)
    ffc4:	4622      	mov	r2, r4
    ffc6:	4641      	mov	r1, r8
    ffc8:	f000 fb66 	bl	10698 <z_pend_curr>
	if (got_mutex == 0) {
    ffcc:	2800      	cmp	r0, #0
    ffce:	d0e1      	beq.n	ff94 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ffd0:	f04f 0340 	mov.w	r3, #64	; 0x40
    ffd4:	f3ef 8611 	mrs	r6, BASEPRI
    ffd8:	f383 8812 	msr	BASEPRI_MAX, r3
    ffdc:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ffe0:	68a0      	ldr	r0, [r4, #8]
    ffe2:	b1d0      	cbz	r0, 1001a <CONFIG_PM_SRAM_SIZE+0x1a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ffe4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ffe6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ffe8:	429c      	cmp	r4, r3
    ffea:	d00a      	beq.n	10002 <CONFIG_PM_SRAM_SIZE+0x2>
    ffec:	b14b      	cbz	r3, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    ffee:	f993 300e 	ldrsb.w	r3, [r3, #14]
    fff2:	4299      	cmp	r1, r3
    fff4:	bfa8      	it	ge
    fff6:	4619      	movge	r1, r3
    fff8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    fffc:	4299      	cmp	r1, r3
    fffe:	bfb8      	it	lt
   10000:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   10002:	f002 f8d4 	bl	121ae <adjust_owner_prio.isra.0>
   10006:	b140      	cbz	r0, 1001a <CONFIG_PM_SRAM_SIZE+0x1a>
		z_reschedule(&lock, key);
   10008:	4808      	ldr	r0, [pc, #32]	; (1002c <CONFIG_PM_SRAM_SIZE+0x2c>)
   1000a:	4631      	mov	r1, r6
   1000c:	f000 fba8 	bl	10760 <z_reschedule>
	return -EAGAIN;
   10010:	f06f 000a 	mvn.w	r0, #10
   10014:	e7af      	b.n	ff76 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   10016:	2500      	movs	r5, #0
   10018:	e7d1      	b.n	ffbe <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1001a:	2d00      	cmp	r5, #0
   1001c:	d1f4      	bne.n	10008 <CONFIG_PM_SRAM_SIZE+0x8>
	__asm__ volatile(
   1001e:	f386 8811 	msr	BASEPRI, r6
   10022:	f3bf 8f6f 	isb	sy
   10026:	e7f3      	b.n	10010 <CONFIG_PM_SRAM_SIZE+0x10>
   10028:	20001ae0 	.word	0x20001ae0
   1002c:	20001fce 	.word	0x20001fce

00010030 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10030:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10032:	6883      	ldr	r3, [r0, #8]
{
   10034:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   10036:	b36b      	cbz	r3, 10094 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10038:	4a19      	ldr	r2, [pc, #100]	; (100a0 <z_impl_k_mutex_unlock+0x70>)
   1003a:	6892      	ldr	r2, [r2, #8]
   1003c:	4293      	cmp	r3, r2
   1003e:	d12c      	bne.n	1009a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10040:	68c3      	ldr	r3, [r0, #12]
   10042:	2b01      	cmp	r3, #1
   10044:	d903      	bls.n	1004e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   10046:	3b01      	subs	r3, #1
   10048:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1004a:	2000      	movs	r0, #0
}
   1004c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1004e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10052:	f3ef 8511 	mrs	r5, BASEPRI
   10056:	f383 8812 	msr	BASEPRI_MAX, r3
   1005a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1005e:	6901      	ldr	r1, [r0, #16]
   10060:	6880      	ldr	r0, [r0, #8]
   10062:	f002 f8a4 	bl	121ae <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10066:	4620      	mov	r0, r4
   10068:	f002 fa34 	bl	124d4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1006c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1006e:	b158      	cbz	r0, 10088 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   10070:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10074:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10076:	2200      	movs	r2, #0
   10078:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1007a:	f002 f9cc 	bl	12416 <z_ready_thread>
		z_reschedule(&lock, key);
   1007e:	4809      	ldr	r0, [pc, #36]	; (100a4 <z_impl_k_mutex_unlock+0x74>)
   10080:	4629      	mov	r1, r5
   10082:	f000 fb6d 	bl	10760 <z_reschedule>
   10086:	e7e0      	b.n	1004a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   10088:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1008a:	f385 8811 	msr	BASEPRI, r5
   1008e:	f3bf 8f6f 	isb	sy
   10092:	e7da      	b.n	1004a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   10094:	f06f 0015 	mvn.w	r0, #21
   10098:	e7d8      	b.n	1004c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1009a:	f04f 30ff 	mov.w	r0, #4294967295
   1009e:	e7d5      	b.n	1004c <z_impl_k_mutex_unlock+0x1c>
   100a0:	20001ae0 	.word	0x20001ae0
   100a4:	20001fce 	.word	0x20001fce

000100a8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   100a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   100aa:	4611      	mov	r1, r2
	__asm__ volatile(
   100ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   100b0:	f3ef 8511 	mrs	r5, BASEPRI
   100b4:	f382 8812 	msr	BASEPRI_MAX, r2
   100b8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   100bc:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   100be:	b19c      	cbz	r4, 100e8 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   100c0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   100c2:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   100c4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   100c8:	4294      	cmp	r4, r2
	list->head = node;
   100ca:	6003      	str	r3, [r0, #0]
	list->tail = node;
   100cc:	bf08      	it	eq
   100ce:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   100d0:	2101      	movs	r1, #1
   100d2:	4620      	mov	r0, r4
   100d4:	f002 f8d9 	bl	1228a <z_queue_node_peek>
   100d8:	4604      	mov	r4, r0
	__asm__ volatile(
   100da:	f385 8811 	msr	BASEPRI, r5
   100de:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   100e2:	4620      	mov	r0, r4
   100e4:	b003      	add	sp, #12
   100e6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   100e8:	ea51 0203 	orrs.w	r2, r1, r3
   100ec:	d0f5      	beq.n	100da <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   100ee:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   100f2:	e9cd 1300 	strd	r1, r3, [sp]
   100f6:	4610      	mov	r0, r2
   100f8:	4629      	mov	r1, r5
   100fa:	f000 facd 	bl	10698 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   100fe:	2800      	cmp	r0, #0
   10100:	d1ef      	bne.n	100e2 <z_impl_k_queue_get+0x3a>
   10102:	4b02      	ldr	r3, [pc, #8]	; (1010c <z_impl_k_queue_get+0x64>)
   10104:	689b      	ldr	r3, [r3, #8]
   10106:	695c      	ldr	r4, [r3, #20]
   10108:	e7eb      	b.n	100e2 <z_impl_k_queue_get+0x3a>
   1010a:	bf00      	nop
   1010c:	20001ae0 	.word	0x20001ae0

00010110 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10110:	b538      	push	{r3, r4, r5, lr}
   10112:	4604      	mov	r4, r0
	__asm__ volatile(
   10114:	f04f 0340 	mov.w	r3, #64	; 0x40
   10118:	f3ef 8511 	mrs	r5, BASEPRI
   1011c:	f383 8812 	msr	BASEPRI_MAX, r3
   10120:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10124:	f002 f9d6 	bl	124d4 <z_unpend_first_thread>

	if (thread != NULL) {
   10128:	b148      	cbz	r0, 1013e <z_impl_k_sem_give+0x2e>
   1012a:	2200      	movs	r2, #0
   1012c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1012e:	f002 f972 	bl	12416 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10132:	4629      	mov	r1, r5
   10134:	4808      	ldr	r0, [pc, #32]	; (10158 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1013a:	f000 bb11 	b.w	10760 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1013e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10142:	429a      	cmp	r2, r3
   10144:	bf18      	it	ne
   10146:	3301      	addne	r3, #1
   10148:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1014a:	2102      	movs	r1, #2
   1014c:	f104 0010 	add.w	r0, r4, #16
   10150:	f002 fbdd 	bl	1290e <z_handle_obj_poll_events>
}
   10154:	e7ed      	b.n	10132 <z_impl_k_sem_give+0x22>
   10156:	bf00      	nop
   10158:	20001fce 	.word	0x20001fce

0001015c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1015c:	b513      	push	{r0, r1, r4, lr}
   1015e:	f04f 0440 	mov.w	r4, #64	; 0x40
   10162:	f3ef 8111 	mrs	r1, BASEPRI
   10166:	f384 8812 	msr	BASEPRI_MAX, r4
   1016a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1016e:	6884      	ldr	r4, [r0, #8]
   10170:	b144      	cbz	r4, 10184 <z_impl_k_sem_take+0x28>
		sem->count--;
   10172:	3c01      	subs	r4, #1
   10174:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   10176:	f381 8811 	msr	BASEPRI, r1
   1017a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1017e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10180:	b002      	add	sp, #8
   10182:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10184:	ea52 0403 	orrs.w	r4, r2, r3
   10188:	d106      	bne.n	10198 <z_impl_k_sem_take+0x3c>
   1018a:	f381 8811 	msr	BASEPRI, r1
   1018e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10192:	f06f 000f 	mvn.w	r0, #15
   10196:	e7f3      	b.n	10180 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10198:	e9cd 2300 	strd	r2, r3, [sp]
   1019c:	4602      	mov	r2, r0
   1019e:	4802      	ldr	r0, [pc, #8]	; (101a8 <z_impl_k_sem_take+0x4c>)
   101a0:	f000 fa7a 	bl	10698 <z_pend_curr>
	return ret;
   101a4:	e7ec      	b.n	10180 <z_impl_k_sem_take+0x24>
   101a6:	bf00      	nop
   101a8:	20001fce 	.word	0x20001fce

000101ac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   101ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   101b0:	4e4a      	ldr	r6, [pc, #296]	; (102dc <work_queue_main+0x130>)
   101b2:	b085      	sub	sp, #20
   101b4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   101b6:	f04f 38ff 	mov.w	r8, #4294967295
   101ba:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   101be:	f04f 0340 	mov.w	r3, #64	; 0x40
   101c2:	f3ef 8711 	mrs	r7, BASEPRI
   101c6:	f383 8812 	msr	BASEPRI_MAX, r3
   101ca:	f3bf 8f6f 	isb	sy
   101ce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   101d2:	b98d      	cbnz	r5, 101f8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   101d4:	2102      	movs	r1, #2
   101d6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   101da:	f002 f893 	bl	12304 <flag_test_and_clear>
   101de:	2800      	cmp	r0, #0
   101e0:	d143      	bne.n	1026a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   101e2:	2300      	movs	r3, #0
   101e4:	e9cd 8900 	strd	r8, r9, [sp]
   101e8:	9302      	str	r3, [sp, #8]
   101ea:	f104 0288 	add.w	r2, r4, #136	; 0x88
   101ee:	4639      	mov	r1, r7
   101f0:	483b      	ldr	r0, [pc, #236]	; (102e0 <work_queue_main+0x134>)
   101f2:	f000 fc51 	bl	10a98 <z_sched_wait>
			continue;
   101f6:	e7e2      	b.n	101be <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   101f8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   101fc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   101fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10202:	4295      	cmp	r5, r2
	list->tail = node;
   10204:	bf08      	it	eq
   10206:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1020a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1020e:	f043 0302 	orr.w	r3, r3, #2
   10212:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   10216:	68eb      	ldr	r3, [r5, #12]
   10218:	f023 0304 	bic.w	r3, r3, #4
   1021c:	f043 0301 	orr.w	r3, r3, #1
   10220:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   10222:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   10224:	f387 8811 	msr	BASEPRI, r7
   10228:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1022c:	4628      	mov	r0, r5
   1022e:	4798      	blx	r3
	__asm__ volatile(
   10230:	f04f 0340 	mov.w	r3, #64	; 0x40
   10234:	f3ef 8b11 	mrs	fp, BASEPRI
   10238:	f383 8812 	msr	BASEPRI_MAX, r3
   1023c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   10240:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10242:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   10244:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10248:	d419      	bmi.n	1027e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1024a:	60ea      	str	r2, [r5, #12]
   1024c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   10250:	f023 0302 	bic.w	r3, r3, #2
   10254:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   10258:	f38b 8811 	msr	BASEPRI, fp
   1025c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   10260:	05db      	lsls	r3, r3, #23
   10262:	d4ac      	bmi.n	101be <work_queue_main+0x12>
	z_impl_k_yield();
   10264:	f000 fb16 	bl	10894 <z_impl_k_yield>
}
   10268:	e7a9      	b.n	101be <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1026a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1026e:	2200      	movs	r2, #0
   10270:	2101      	movs	r1, #1
   10272:	4628      	mov	r0, r5
   10274:	f002 f988 	bl	12588 <z_sched_wake>
   10278:	2800      	cmp	r0, #0
   1027a:	d1f8      	bne.n	1026e <work_queue_main+0xc2>
   1027c:	e7b1      	b.n	101e2 <work_queue_main+0x36>
	return list->head;
   1027e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   10280:	f023 0303 	bic.w	r3, r3, #3
   10284:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10286:	2800      	cmp	r0, #0
   10288:	d0e0      	beq.n	1024c <work_queue_main+0xa0>
	return node->next;
   1028a:	2700      	movs	r7, #0
   1028c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   10290:	463b      	mov	r3, r7
   10292:	2800      	cmp	r0, #0
   10294:	d0da      	beq.n	1024c <work_queue_main+0xa0>
		if (wc->work == work) {
   10296:	6842      	ldr	r2, [r0, #4]
   10298:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1029a:	4601      	mov	r1, r0
		if (wc->work == work) {
   1029c:	d10c      	bne.n	102b8 <work_queue_main+0x10c>
	return node->next;
   1029e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   102a0:	b99f      	cbnz	r7, 102ca <work_queue_main+0x11e>
   102a2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   102a4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   102a6:	4282      	cmp	r2, r0
   102a8:	d100      	bne.n	102ac <work_queue_main+0x100>
	list->tail = node;
   102aa:	6071      	str	r1, [r6, #4]
	parent->next = child;
   102ac:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   102b0:	f7ff ff2e 	bl	10110 <z_impl_k_sem_give>
}
   102b4:	4639      	mov	r1, r7
   102b6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   102b8:	f1ba 0f00 	cmp.w	sl, #0
   102bc:	d00b      	beq.n	102d6 <work_queue_main+0x12a>
	return node->next;
   102be:	f8da 2000 	ldr.w	r2, [sl]
   102c2:	4650      	mov	r0, sl
   102c4:	460f      	mov	r7, r1
   102c6:	4692      	mov	sl, r2
   102c8:	e7e3      	b.n	10292 <work_queue_main+0xe6>
	parent->next = child;
   102ca:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   102cc:	6872      	ldr	r2, [r6, #4]
   102ce:	4282      	cmp	r2, r0
	list->tail = node;
   102d0:	bf08      	it	eq
   102d2:	6077      	streq	r7, [r6, #4]
}
   102d4:	e7ea      	b.n	102ac <work_queue_main+0x100>
   102d6:	4652      	mov	r2, sl
   102d8:	e7f3      	b.n	102c2 <work_queue_main+0x116>
   102da:	bf00      	nop
   102dc:	20001b04 	.word	0x20001b04
   102e0:	20001fce 	.word	0x20001fce

000102e4 <submit_to_queue_locked>:
{
   102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   102e6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   102e8:	079a      	lsls	r2, r3, #30
{
   102ea:	4604      	mov	r4, r0
   102ec:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   102ee:	f3c3 0640 	ubfx	r6, r3, #1, #1
   102f2:	d42c      	bmi.n	1034e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   102f4:	075b      	lsls	r3, r3, #29
   102f6:	d41a      	bmi.n	1032e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   102f8:	680b      	ldr	r3, [r1, #0]
   102fa:	b90b      	cbnz	r3, 10300 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   102fc:	6883      	ldr	r3, [r0, #8]
   102fe:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   10300:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   10302:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   10304:	bf44      	itt	mi
   10306:	68a3      	ldrmi	r3, [r4, #8]
   10308:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1030a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1030c:	bf4c      	ite	mi
   1030e:	2602      	movmi	r6, #2
		ret = 1;
   10310:	2601      	movpl	r6, #1
	if (queue == NULL) {
   10312:	2d00      	cmp	r5, #0
   10314:	d03a      	beq.n	1038c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10316:	4b1f      	ldr	r3, [pc, #124]	; (10394 <submit_to_queue_locked+0xb0>)
   10318:	689b      	ldr	r3, [r3, #8]
   1031a:	42ab      	cmp	r3, r5
   1031c:	d00a      	beq.n	10334 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1031e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10322:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   10324:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10328:	d414      	bmi.n	10354 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1032a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1032e:	2300      	movs	r3, #0
   10330:	603b      	str	r3, [r7, #0]
	return ret;
   10332:	e025      	b.n	10380 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10334:	f001 ff29 	bl	1218a <k_is_in_isr>
   10338:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1033c:	2800      	cmp	r0, #0
   1033e:	d1f0      	bne.n	10322 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10340:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   10342:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10346:	d5f0      	bpl.n	1032a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   10348:	b152      	cbz	r2, 10360 <submit_to_queue_locked+0x7c>
   1034a:	075b      	lsls	r3, r3, #29
   1034c:	d408      	bmi.n	10360 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1034e:	f06f 060f 	mvn.w	r6, #15
   10352:	e7ec      	b.n	1032e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   10354:	2a00      	cmp	r2, #0
   10356:	d1fa      	bne.n	1034e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   10358:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1035c:	2b00      	cmp	r3, #0
   1035e:	d1f6      	bne.n	1034e <submit_to_queue_locked+0x6a>
	parent->next = child;
   10360:	2300      	movs	r3, #0
   10362:	6023      	str	r3, [r4, #0]
	return list->tail;
   10364:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   10368:	b963      	cbnz	r3, 10384 <submit_to_queue_locked+0xa0>
	list->head = node;
   1036a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1036e:	4628      	mov	r0, r5
   10370:	f001 ffd3 	bl	1231a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   10374:	68e3      	ldr	r3, [r4, #12]
   10376:	f043 0304 	orr.w	r3, r3, #4
   1037a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1037c:	683b      	ldr	r3, [r7, #0]
   1037e:	60a3      	str	r3, [r4, #8]
}
   10380:	4630      	mov	r0, r6
   10382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   10384:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10386:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1038a:	e7f0      	b.n	1036e <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1038c:	f06f 0615 	mvn.w	r6, #21
   10390:	e7cd      	b.n	1032e <submit_to_queue_locked+0x4a>
   10392:	bf00      	nop
   10394:	20001ae0 	.word	0x20001ae0

00010398 <k_work_submit>:
{
   10398:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1039a:	4801      	ldr	r0, [pc, #4]	; (103a0 <k_work_submit+0x8>)
   1039c:	f001 bfe1 	b.w	12362 <k_work_submit_to_queue>
   103a0:	20001808 	.word	0x20001808

000103a4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   103a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   103a6:	b089      	sub	sp, #36	; 0x24
   103a8:	4604      	mov	r4, r0
	list->head = NULL;
   103aa:	2000      	movs	r0, #0
	list->tail = NULL;
   103ac:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   103b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   103b2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   103b6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   103ba:	f104 0090 	add.w	r0, r4, #144	; 0x90
   103be:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   103c2:	b31d      	cbz	r5, 1040c <k_work_queue_start+0x68>
   103c4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   103c6:	2800      	cmp	r0, #0
   103c8:	f240 1001 	movw	r0, #257	; 0x101
   103cc:	bf08      	it	eq
   103ce:	2001      	moveq	r0, #1
	*flagp = flags;
   103d0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   103d4:	2000      	movs	r0, #0
   103d6:	f04f 36ff 	mov.w	r6, #4294967295
   103da:	f04f 37ff 	mov.w	r7, #4294967295
   103de:	e9cd 3003 	strd	r3, r0, [sp, #12]
   103e2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   103e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   103ea:	4b09      	ldr	r3, [pc, #36]	; (10410 <k_work_queue_start+0x6c>)
   103ec:	9400      	str	r4, [sp, #0]
   103ee:	4620      	mov	r0, r4
   103f0:	f7ff fd00 	bl	fdf4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   103f4:	b125      	cbz	r5, 10400 <k_work_queue_start+0x5c>
   103f6:	6829      	ldr	r1, [r5, #0]
   103f8:	b111      	cbz	r1, 10400 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   103fa:	4620      	mov	r0, r4
   103fc:	f001 fecb 	bl	12196 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   10400:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   10402:	b009      	add	sp, #36	; 0x24
   10404:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10408:	f001 bec8 	b.w	1219c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1040c:	2001      	movs	r0, #1
   1040e:	e7df      	b.n	103d0 <k_work_queue_start+0x2c>
   10410:	000101ad 	.word	0x000101ad

00010414 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   10414:	89c3      	ldrh	r3, [r0, #14]
   10416:	2b7f      	cmp	r3, #127	; 0x7f
   10418:	d812      	bhi.n	10440 <sliceable+0x2c>
	int ret = slice_ticks;
   1041a:	4b0a      	ldr	r3, [pc, #40]	; (10444 <sliceable+0x30>)
   1041c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   1041e:	b163      	cbz	r3, 1043a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10420:	4b09      	ldr	r3, [pc, #36]	; (10448 <sliceable+0x34>)
   10422:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10426:	681b      	ldr	r3, [r3, #0]
   10428:	429a      	cmp	r2, r3
   1042a:	db09      	blt.n	10440 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   1042c:	7b43      	ldrb	r3, [r0, #13]
   1042e:	06db      	lsls	r3, r3, #27
   10430:	d106      	bne.n	10440 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   10432:	4b06      	ldr	r3, [pc, #24]	; (1044c <sliceable+0x38>)
   10434:	1ac3      	subs	r3, r0, r3
   10436:	bf18      	it	ne
   10438:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   1043a:	f003 0001 	and.w	r0, r3, #1
   1043e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   10440:	2300      	movs	r3, #0
   10442:	e7fa      	b.n	1043a <sliceable+0x26>
   10444:	20001b14 	.word	0x20001b14
   10448:	20001b10 	.word	0x20001b10
   1044c:	200016e8 	.word	0x200016e8

00010450 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   10450:	4b04      	ldr	r3, [pc, #16]	; (10464 <slice_timeout+0x14>)
   10452:	1ac0      	subs	r0, r0, r3
   10454:	4b04      	ldr	r3, [pc, #16]	; (10468 <slice_timeout+0x18>)
   10456:	10c0      	asrs	r0, r0, #3
   10458:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   1045a:	4b04      	ldr	r3, [pc, #16]	; (1046c <slice_timeout+0x1c>)
   1045c:	2201      	movs	r2, #1
   1045e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   10460:	4770      	bx	lr
   10462:	bf00      	nop
   10464:	200017e8 	.word	0x200017e8
   10468:	aaaaaaab 	.word	0xaaaaaaab
   1046c:	20001fce 	.word	0x20001fce

00010470 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   10470:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   10472:	4b0e      	ldr	r3, [pc, #56]	; (104ac <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   10474:	4c0e      	ldr	r4, [pc, #56]	; (104b0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   10476:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   10478:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1047c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   10480:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   10482:	4620      	mov	r0, r4
   10484:	f002 f8a3 	bl	125ce <z_abort_timeout>
	slice_expired[cpu] = false;
   10488:	4b0a      	ldr	r3, [pc, #40]	; (104b4 <z_reset_time_slice+0x44>)
   1048a:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   1048c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   1048e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   10490:	f7ff ffc0 	bl	10414 <sliceable>
   10494:	b148      	cbz	r0, 104aa <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   10496:	4b08      	ldr	r3, [pc, #32]	; (104b8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   10498:	4908      	ldr	r1, [pc, #32]	; (104bc <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   1049a:	681a      	ldr	r2, [r3, #0]
   1049c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1049e:	4620      	mov	r0, r4
   104a0:	17d3      	asrs	r3, r2, #31
	}
}
   104a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   104a6:	f000 bb69 	b.w	10b7c <z_add_timeout>
}
   104aa:	bd70      	pop	{r4, r5, r6, pc}
   104ac:	20001ae0 	.word	0x20001ae0
   104b0:	200017e8 	.word	0x200017e8
   104b4:	20001fce 	.word	0x20001fce
   104b8:	20001b14 	.word	0x20001b14
   104bc:	00010451 	.word	0x00010451

000104c0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   104c0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   104c2:	4d0d      	ldr	r5, [pc, #52]	; (104f8 <update_cache+0x38>)
   104c4:	462b      	mov	r3, r5
   104c6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   104ca:	429c      	cmp	r4, r3
   104cc:	d000      	beq.n	104d0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   104ce:	b904      	cbnz	r4, 104d2 <update_cache+0x12>
   104d0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   104d2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   104d4:	b938      	cbnz	r0, 104e6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   104d6:	7b5a      	ldrb	r2, [r3, #13]
   104d8:	06d2      	lsls	r2, r2, #27
   104da:	d104      	bne.n	104e6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   104dc:	69a2      	ldr	r2, [r4, #24]
   104de:	b912      	cbnz	r2, 104e6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   104e0:	89da      	ldrh	r2, [r3, #14]
   104e2:	2a7f      	cmp	r2, #127	; 0x7f
   104e4:	d805      	bhi.n	104f2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   104e6:	429c      	cmp	r4, r3
   104e8:	d002      	beq.n	104f0 <update_cache+0x30>
			z_reset_time_slice(thread);
   104ea:	4620      	mov	r0, r4
   104ec:	f7ff ffc0 	bl	10470 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   104f0:	4623      	mov	r3, r4
   104f2:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   104f4:	bd38      	pop	{r3, r4, r5, pc}
   104f6:	bf00      	nop
   104f8:	20001ae0 	.word	0x20001ae0

000104fc <move_thread_to_end_of_prio_q>:
{
   104fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   104fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   10502:	7b43      	ldrb	r3, [r0, #13]
   10504:	2a00      	cmp	r2, #0
{
   10506:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   10508:	da04      	bge.n	10514 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1050a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1050e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   10510:	f001 ff3e 	bl	12390 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10514:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   10516:	4a15      	ldr	r2, [pc, #84]	; (1056c <move_thread_to_end_of_prio_q+0x70>)
   10518:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1051c:	4610      	mov	r0, r2
   1051e:	734b      	strb	r3, [r1, #13]
   10520:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10524:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10526:	4283      	cmp	r3, r0
   10528:	bf08      	it	eq
   1052a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1052c:	b923      	cbnz	r3, 10538 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1052e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   10532:	6021      	str	r1, [r4, #0]
	list->tail = node;
   10534:	6211      	str	r1, [r2, #32]
}
   10536:	e00c      	b.n	10552 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   10538:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1053c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   10540:	42b5      	cmp	r5, r6
   10542:	d00e      	beq.n	10562 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10544:	42ae      	cmp	r6, r5
   10546:	dd0c      	ble.n	10562 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10548:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1054a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1054e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   10550:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   10552:	6890      	ldr	r0, [r2, #8]
   10554:	1a43      	subs	r3, r0, r1
   10556:	4258      	negs	r0, r3
}
   10558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1055c:	4158      	adcs	r0, r3
   1055e:	f7ff bfaf 	b.w	104c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10562:	429c      	cmp	r4, r3
   10564:	d0e3      	beq.n	1052e <move_thread_to_end_of_prio_q+0x32>
   10566:	681b      	ldr	r3, [r3, #0]
   10568:	e7e0      	b.n	1052c <move_thread_to_end_of_prio_q+0x30>
   1056a:	bf00      	nop
   1056c:	20001ae0 	.word	0x20001ae0

00010570 <ready_thread>:
{
   10570:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10572:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10576:	7b42      	ldrb	r2, [r0, #13]
   10578:	2b00      	cmp	r3, #0
   1057a:	db29      	blt.n	105d0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1057c:	06d3      	lsls	r3, r2, #27
   1057e:	d127      	bne.n	105d0 <ready_thread+0x60>
	return node->next != NULL;
   10580:	6983      	ldr	r3, [r0, #24]
   10582:	bb2b      	cbnz	r3, 105d0 <ready_thread+0x60>
	return list->head == list;
   10584:	4913      	ldr	r1, [pc, #76]	; (105d4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   10586:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1058a:	7342      	strb	r2, [r0, #13]
   1058c:	460a      	mov	r2, r1
   1058e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10592:	4294      	cmp	r4, r2
   10594:	bf18      	it	ne
   10596:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   10598:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1059a:	b923      	cbnz	r3, 105a6 <ready_thread+0x36>
	node->prev = tail;
   1059c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   105a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   105a2:	6208      	str	r0, [r1, #32]
}
   105a4:	e00c      	b.n	105c0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   105a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   105aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   105ae:	42b5      	cmp	r5, r6
   105b0:	d00a      	beq.n	105c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   105b2:	42ae      	cmp	r6, r5
   105b4:	dd08      	ble.n	105c8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   105b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   105b8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   105bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   105be:	6058      	str	r0, [r3, #4]
}
   105c0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   105c2:	2000      	movs	r0, #0
   105c4:	f7ff bf7c 	b.w	104c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   105c8:	42a3      	cmp	r3, r4
   105ca:	d0e7      	beq.n	1059c <ready_thread+0x2c>
   105cc:	681b      	ldr	r3, [r3, #0]
   105ce:	e7e4      	b.n	1059a <ready_thread+0x2a>
}
   105d0:	bc70      	pop	{r4, r5, r6}
   105d2:	4770      	bx	lr
   105d4:	20001ae0 	.word	0x20001ae0

000105d8 <unready_thread>:
{
   105d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   105da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   105de:	7b43      	ldrb	r3, [r0, #13]
   105e0:	2a00      	cmp	r2, #0
{
   105e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   105e4:	da04      	bge.n	105f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   105e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   105ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   105ec:	f001 fed0 	bl	12390 <sys_dlist_remove>
	update_cache(thread == _current);
   105f0:	4b04      	ldr	r3, [pc, #16]	; (10604 <unready_thread+0x2c>)
   105f2:	6898      	ldr	r0, [r3, #8]
   105f4:	1a43      	subs	r3, r0, r1
   105f6:	4258      	negs	r0, r3
   105f8:	4158      	adcs	r0, r3
}
   105fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   105fe:	f7ff bf5f 	b.w	104c0 <update_cache>
   10602:	bf00      	nop
   10604:	20001ae0 	.word	0x20001ae0

00010608 <pend_locked>:
{
   10608:	b570      	push	{r4, r5, r6, lr}
   1060a:	4615      	mov	r5, r2
   1060c:	461c      	mov	r4, r3
   1060e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   10610:	f001 fed9 	bl	123c6 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10614:	f1b4 3fff 	cmp.w	r4, #4294967295
   10618:	bf08      	it	eq
   1061a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1061e:	d008      	beq.n	10632 <pend_locked+0x2a>
   10620:	462a      	mov	r2, r5
   10622:	4623      	mov	r3, r4
   10624:	f106 0018 	add.w	r0, r6, #24
   10628:	4902      	ldr	r1, [pc, #8]	; (10634 <pend_locked+0x2c>)
}
   1062a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1062e:	f000 baa5 	b.w	10b7c <z_add_timeout>
   10632:	bd70      	pop	{r4, r5, r6, pc}
   10634:	0001249f 	.word	0x0001249f

00010638 <z_time_slice>:
{
   10638:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1063a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1063e:	f3ef 8511 	mrs	r5, BASEPRI
   10642:	f383 8812 	msr	BASEPRI_MAX, r3
   10646:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   1064a:	4b10      	ldr	r3, [pc, #64]	; (1068c <z_time_slice+0x54>)
	if (pending_current == curr) {
   1064c:	4a10      	ldr	r2, [pc, #64]	; (10690 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   1064e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   10650:	6810      	ldr	r0, [r2, #0]
   10652:	42a0      	cmp	r0, r4
   10654:	d106      	bne.n	10664 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   10656:	f7ff ff0b 	bl	10470 <z_reset_time_slice>
	__asm__ volatile(
   1065a:	f385 8811 	msr	BASEPRI, r5
   1065e:	f3bf 8f6f 	isb	sy
}
   10662:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   10664:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   10666:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   10668:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1066a:	4a0a      	ldr	r2, [pc, #40]	; (10694 <z_time_slice+0x5c>)
   1066c:	5cd3      	ldrb	r3, [r2, r3]
   1066e:	2b00      	cmp	r3, #0
   10670:	d0f3      	beq.n	1065a <z_time_slice+0x22>
   10672:	4620      	mov	r0, r4
   10674:	f7ff fece 	bl	10414 <sliceable>
   10678:	2800      	cmp	r0, #0
   1067a:	d0ee      	beq.n	1065a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   1067c:	7b63      	ldrb	r3, [r4, #13]
   1067e:	06db      	lsls	r3, r3, #27
   10680:	d102      	bne.n	10688 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   10682:	4620      	mov	r0, r4
   10684:	f7ff ff3a 	bl	104fc <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   10688:	4620      	mov	r0, r4
   1068a:	e7e4      	b.n	10656 <z_time_slice+0x1e>
   1068c:	20001ae0 	.word	0x20001ae0
   10690:	20001b0c 	.word	0x20001b0c
   10694:	20001fce 	.word	0x20001fce

00010698 <z_pend_curr>:
{
   10698:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1069a:	480c      	ldr	r0, [pc, #48]	; (106cc <z_pend_curr+0x34>)
   1069c:	4d0c      	ldr	r5, [pc, #48]	; (106d0 <z_pend_curr+0x38>)
   1069e:	6886      	ldr	r6, [r0, #8]
   106a0:	602e      	str	r6, [r5, #0]
{
   106a2:	460c      	mov	r4, r1
   106a4:	4611      	mov	r1, r2
   106a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   106aa:	f04f 0640 	mov.w	r6, #64	; 0x40
   106ae:	f3ef 8511 	mrs	r5, BASEPRI
   106b2:	f386 8812 	msr	BASEPRI_MAX, r6
   106b6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   106ba:	6880      	ldr	r0, [r0, #8]
   106bc:	f7ff ffa4 	bl	10608 <pend_locked>
	ret = arch_swap(key);
   106c0:	4620      	mov	r0, r4
}
   106c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106c6:	f7fa be95 	b.w	b3f4 <arch_swap>
   106ca:	bf00      	nop
   106cc:	20001ae0 	.word	0x20001ae0
   106d0:	20001b0c 	.word	0x20001b0c

000106d4 <z_set_prio>:
{
   106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106d6:	4604      	mov	r4, r0
   106d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   106dc:	f3ef 8611 	mrs	r6, BASEPRI
   106e0:	f383 8812 	msr	BASEPRI_MAX, r3
   106e4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   106e8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   106ea:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   106ec:	b249      	sxtb	r1, r1
   106ee:	d119      	bne.n	10724 <z_set_prio+0x50>
	return node->next != NULL;
   106f0:	6985      	ldr	r5, [r0, #24]
   106f2:	b9bd      	cbnz	r5, 10724 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   106f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   106f8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   106fa:	f001 fe49 	bl	12390 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   106fe:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   10700:	4a16      	ldr	r2, [pc, #88]	; (1075c <z_set_prio+0x88>)
				thread->base.prio = prio;
   10702:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   10704:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10708:	7343      	strb	r3, [r0, #13]
   1070a:	4613      	mov	r3, r2
   1070c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10710:	4298      	cmp	r0, r3
   10712:	bf18      	it	ne
   10714:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   10716:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10718:	b95d      	cbnz	r5, 10732 <z_set_prio+0x5e>
	node->prev = tail;
   1071a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1071e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   10720:	6214      	str	r4, [r2, #32]
}
   10722:	e011      	b.n	10748 <z_set_prio+0x74>
			thread->base.prio = prio;
   10724:	73a1      	strb	r1, [r4, #14]
   10726:	2000      	movs	r0, #0
	__asm__ volatile(
   10728:	f386 8811 	msr	BASEPRI, r6
   1072c:	f3bf 8f6f 	isb	sy
}
   10730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   10732:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   10736:	42b9      	cmp	r1, r7
   10738:	d00b      	beq.n	10752 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1073a:	428f      	cmp	r7, r1
   1073c:	dd09      	ble.n	10752 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1073e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   10740:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   10744:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10746:	606c      	str	r4, [r5, #4]
			update_cache(1);
   10748:	2001      	movs	r0, #1
   1074a:	f7ff feb9 	bl	104c0 <update_cache>
   1074e:	2001      	movs	r0, #1
   10750:	e7ea      	b.n	10728 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   10752:	42a8      	cmp	r0, r5
   10754:	d0e1      	beq.n	1071a <z_set_prio+0x46>
   10756:	682d      	ldr	r5, [r5, #0]
   10758:	e7de      	b.n	10718 <z_set_prio+0x44>
   1075a:	bf00      	nop
   1075c:	20001ae0 	.word	0x20001ae0

00010760 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10760:	b949      	cbnz	r1, 10776 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10762:	f3ef 8005 	mrs	r0, IPSR
   10766:	b930      	cbnz	r0, 10776 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   10768:	4b05      	ldr	r3, [pc, #20]	; (10780 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1076a:	699a      	ldr	r2, [r3, #24]
   1076c:	689b      	ldr	r3, [r3, #8]
   1076e:	429a      	cmp	r2, r3
   10770:	d001      	beq.n	10776 <z_reschedule+0x16>
   10772:	f7fa be3f 	b.w	b3f4 <arch_swap>
   10776:	f381 8811 	msr	BASEPRI, r1
   1077a:	f3bf 8f6f 	isb	sy
}
   1077e:	4770      	bx	lr
   10780:	20001ae0 	.word	0x20001ae0

00010784 <z_sched_start>:
{
   10784:	b510      	push	{r4, lr}
	__asm__ volatile(
   10786:	f04f 0240 	mov.w	r2, #64	; 0x40
   1078a:	f3ef 8411 	mrs	r4, BASEPRI
   1078e:	f382 8812 	msr	BASEPRI_MAX, r2
   10792:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   10796:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   10798:	0751      	lsls	r1, r2, #29
   1079a:	d404      	bmi.n	107a6 <z_sched_start+0x22>
	__asm__ volatile(
   1079c:	f384 8811 	msr	BASEPRI, r4
   107a0:	f3bf 8f6f 	isb	sy
}
   107a4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   107a6:	f022 0204 	bic.w	r2, r2, #4
   107aa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   107ac:	f7ff fee0 	bl	10570 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   107b0:	4621      	mov	r1, r4
   107b2:	4802      	ldr	r0, [pc, #8]	; (107bc <z_sched_start+0x38>)
}
   107b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   107b8:	f7ff bfd2 	b.w	10760 <z_reschedule>
   107bc:	20001fcf 	.word	0x20001fcf

000107c0 <z_impl_k_thread_suspend>:
{
   107c0:	b570      	push	{r4, r5, r6, lr}
   107c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   107c4:	3018      	adds	r0, #24
   107c6:	f001 ff02 	bl	125ce <z_abort_timeout>
	__asm__ volatile(
   107ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   107ce:	f3ef 8611 	mrs	r6, BASEPRI
   107d2:	f383 8812 	msr	BASEPRI_MAX, r3
   107d6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   107da:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   107de:	7b63      	ldrb	r3, [r4, #13]
   107e0:	2a00      	cmp	r2, #0
   107e2:	da05      	bge.n	107f0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   107e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   107e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   107ea:	4620      	mov	r0, r4
   107ec:	f001 fdd0 	bl	12390 <sys_dlist_remove>
		update_cache(thread == _current);
   107f0:	4d0b      	ldr	r5, [pc, #44]	; (10820 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   107f2:	7b63      	ldrb	r3, [r4, #13]
   107f4:	68a8      	ldr	r0, [r5, #8]
   107f6:	f043 0310 	orr.w	r3, r3, #16
   107fa:	7363      	strb	r3, [r4, #13]
   107fc:	1b03      	subs	r3, r0, r4
   107fe:	4258      	negs	r0, r3
   10800:	4158      	adcs	r0, r3
   10802:	f7ff fe5d 	bl	104c0 <update_cache>
	__asm__ volatile(
   10806:	f386 8811 	msr	BASEPRI, r6
   1080a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1080e:	68ab      	ldr	r3, [r5, #8]
   10810:	42a3      	cmp	r3, r4
   10812:	d103      	bne.n	1081c <z_impl_k_thread_suspend+0x5c>
}
   10814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   10818:	f001 be9c 	b.w	12554 <z_reschedule_unlocked>
}
   1081c:	bd70      	pop	{r4, r5, r6, pc}
   1081e:	bf00      	nop
   10820:	20001ae0 	.word	0x20001ae0

00010824 <k_sched_lock>:
	__asm__ volatile(
   10824:	f04f 0340 	mov.w	r3, #64	; 0x40
   10828:	f3ef 8111 	mrs	r1, BASEPRI
   1082c:	f383 8812 	msr	BASEPRI_MAX, r3
   10830:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   10834:	4b04      	ldr	r3, [pc, #16]	; (10848 <k_sched_lock+0x24>)
   10836:	689a      	ldr	r2, [r3, #8]
   10838:	7bd3      	ldrb	r3, [r2, #15]
   1083a:	3b01      	subs	r3, #1
   1083c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1083e:	f381 8811 	msr	BASEPRI, r1
   10842:	f3bf 8f6f 	isb	sy
}
   10846:	4770      	bx	lr
   10848:	20001ae0 	.word	0x20001ae0

0001084c <k_sched_unlock>:
{
   1084c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1084e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10852:	f3ef 8411 	mrs	r4, BASEPRI
   10856:	f383 8812 	msr	BASEPRI_MAX, r3
   1085a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1085e:	4b08      	ldr	r3, [pc, #32]	; (10880 <k_sched_unlock+0x34>)
   10860:	689a      	ldr	r2, [r3, #8]
   10862:	7bd3      	ldrb	r3, [r2, #15]
   10864:	3301      	adds	r3, #1
   10866:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10868:	2000      	movs	r0, #0
   1086a:	f7ff fe29 	bl	104c0 <update_cache>
	__asm__ volatile(
   1086e:	f384 8811 	msr	BASEPRI, r4
   10872:	f3bf 8f6f 	isb	sy
}
   10876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1087a:	f001 be6b 	b.w	12554 <z_reschedule_unlocked>
   1087e:	bf00      	nop
   10880:	20001ae0 	.word	0x20001ae0

00010884 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   10884:	4b02      	ldr	r3, [pc, #8]	; (10890 <z_sched_init+0xc>)
   10886:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   1088a:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   1088e:	4770      	bx	lr
   10890:	20001ae0 	.word	0x20001ae0

00010894 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   10894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   10896:	f04f 0340 	mov.w	r3, #64	; 0x40
   1089a:	f3ef 8511 	mrs	r5, BASEPRI
   1089e:	f383 8812 	msr	BASEPRI_MAX, r3
   108a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   108a6:	4919      	ldr	r1, [pc, #100]	; (1090c <z_impl_k_yield+0x78>)
   108a8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   108aa:	7b43      	ldrb	r3, [r0, #13]
   108ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   108b0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   108b2:	f001 fd6d 	bl	12390 <sys_dlist_remove>
	}
	queue_thread(_current);
   108b6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   108b8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   108ba:	4608      	mov	r0, r1
   108bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   108c0:	735a      	strb	r2, [r3, #13]
   108c2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   108c6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   108c8:	4282      	cmp	r2, r0
   108ca:	bf08      	it	eq
   108cc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   108ce:	b922      	cbnz	r2, 108da <z_impl_k_yield+0x46>
	node->prev = tail;
   108d0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   108d4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   108d6:	620b      	str	r3, [r1, #32]
}
   108d8:	e00c      	b.n	108f4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   108da:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   108de:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   108e2:	42be      	cmp	r6, r7
   108e4:	d00e      	beq.n	10904 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   108e6:	42b7      	cmp	r7, r6
   108e8:	dd0c      	ble.n	10904 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   108ea:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   108ec:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   108f0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   108f2:	6053      	str	r3, [r2, #4]
	update_cache(1);
   108f4:	2001      	movs	r0, #1
   108f6:	f7ff fde3 	bl	104c0 <update_cache>
   108fa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   108fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10900:	f7fa bd78 	b.w	b3f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   10904:	42a2      	cmp	r2, r4
   10906:	d0e3      	beq.n	108d0 <z_impl_k_yield+0x3c>
   10908:	6812      	ldr	r2, [r2, #0]
   1090a:	e7e0      	b.n	108ce <z_impl_k_yield+0x3a>
   1090c:	20001ae0 	.word	0x20001ae0

00010910 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   10910:	ea50 0301 	orrs.w	r3, r0, r1
{
   10914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10918:	4605      	mov	r5, r0
   1091a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1091c:	d103      	bne.n	10926 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1091e:	f7ff ffb9 	bl	10894 <z_impl_k_yield>
		k_yield();
		return 0;
   10922:	2000      	movs	r0, #0
   10924:	e02c      	b.n	10980 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   10926:	1c83      	adds	r3, r0, #2
   10928:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1092c:	db2a      	blt.n	10984 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1092e:	f001 fe74 	bl	1261a <sys_clock_tick_get_32>
   10932:	182c      	adds	r4, r5, r0
   10934:	f04f 0340 	mov.w	r3, #64	; 0x40
   10938:	f3ef 8811 	mrs	r8, BASEPRI
   1093c:	f383 8812 	msr	BASEPRI_MAX, r3
   10940:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   10944:	4f11      	ldr	r7, [pc, #68]	; (1098c <z_tick_sleep+0x7c>)
   10946:	4b12      	ldr	r3, [pc, #72]	; (10990 <z_tick_sleep+0x80>)
   10948:	68b8      	ldr	r0, [r7, #8]
   1094a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1094c:	f7ff fe44 	bl	105d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   10950:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10952:	4910      	ldr	r1, [pc, #64]	; (10994 <z_tick_sleep+0x84>)
   10954:	462a      	mov	r2, r5
   10956:	4633      	mov	r3, r6
   10958:	3018      	adds	r0, #24
   1095a:	f000 f90f 	bl	10b7c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1095e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10960:	7b53      	ldrb	r3, [r2, #13]
   10962:	f043 0310 	orr.w	r3, r3, #16
   10966:	7353      	strb	r3, [r2, #13]
   10968:	4640      	mov	r0, r8
   1096a:	f7fa fd43 	bl	b3f4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1096e:	f001 fe54 	bl	1261a <sys_clock_tick_get_32>
   10972:	1a20      	subs	r0, r4, r0
   10974:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   10978:	2801      	cmp	r0, #1
   1097a:	f173 0300 	sbcs.w	r3, r3, #0
   1097e:	dbd0      	blt.n	10922 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   10980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   10984:	f06f 0401 	mvn.w	r4, #1
   10988:	1a24      	subs	r4, r4, r0
   1098a:	e7d3      	b.n	10934 <z_tick_sleep+0x24>
   1098c:	20001ae0 	.word	0x20001ae0
   10990:	20001b0c 	.word	0x20001b0c
   10994:	0001249f 	.word	0x0001249f

00010998 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10998:	f1b1 3fff 	cmp.w	r1, #4294967295
   1099c:	bf08      	it	eq
   1099e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   109a2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   109a4:	d106      	bne.n	109b4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   109a6:	4b08      	ldr	r3, [pc, #32]	; (109c8 <z_impl_k_sleep+0x30>)
   109a8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   109aa:	f7ff ff09 	bl	107c0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   109ae:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   109b2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   109b4:	f7ff ffac 	bl	10910 <z_tick_sleep>
   109b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   109bc:	fb80 0303 	smull	r0, r3, r0, r3
   109c0:	0bc0      	lsrs	r0, r0, #15
   109c2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   109c6:	e7f4      	b.n	109b2 <z_impl_k_sleep+0x1a>
   109c8:	20001ae0 	.word	0x20001ae0

000109cc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   109cc:	4b01      	ldr	r3, [pc, #4]	; (109d4 <z_impl_z_current_get+0x8>)
   109ce:	6898      	ldr	r0, [r3, #8]
   109d0:	4770      	bx	lr
   109d2:	bf00      	nop
   109d4:	20001ae0 	.word	0x20001ae0

000109d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   109d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109dc:	4604      	mov	r4, r0
   109de:	f04f 0340 	mov.w	r3, #64	; 0x40
   109e2:	f3ef 8611 	mrs	r6, BASEPRI
   109e6:	f383 8812 	msr	BASEPRI_MAX, r3
   109ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   109ee:	7b03      	ldrb	r3, [r0, #12]
   109f0:	07d9      	lsls	r1, r3, #31
   109f2:	d50b      	bpl.n	10a0c <z_thread_abort+0x34>
	__asm__ volatile(
   109f4:	f386 8811 	msr	BASEPRI, r6
   109f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   109fc:	4040      	eors	r0, r0
   109fe:	f380 8811 	msr	BASEPRI, r0
   10a02:	f04f 0004 	mov.w	r0, #4
   10a06:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   10a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   10a0c:	7b43      	ldrb	r3, [r0, #13]
   10a0e:	071a      	lsls	r2, r3, #28
   10a10:	d504      	bpl.n	10a1c <z_thread_abort+0x44>
   10a12:	f386 8811 	msr	BASEPRI, r6
   10a16:	f3bf 8f6f 	isb	sy
   10a1a:	e7f5      	b.n	10a08 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10a1c:	f023 0220 	bic.w	r2, r3, #32
   10a20:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   10a24:	09d2      	lsrs	r2, r2, #7
   10a26:	d120      	bne.n	10a6a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10a28:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   10a2a:	68a3      	ldr	r3, [r4, #8]
   10a2c:	b113      	cbz	r3, 10a34 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   10a2e:	4620      	mov	r0, r4
   10a30:	f001 fcb6 	bl	123a0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   10a34:	f104 0018 	add.w	r0, r4, #24
   10a38:	f001 fdc9 	bl	125ce <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10a3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   10a40:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   10a44:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a46:	42bd      	cmp	r5, r7
   10a48:	d000      	beq.n	10a4c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10a4a:	b9b5      	cbnz	r5, 10a7a <z_thread_abort+0xa2>
		update_cache(1);
   10a4c:	2001      	movs	r0, #1
   10a4e:	f7ff fd37 	bl	104c0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   10a52:	4b10      	ldr	r3, [pc, #64]	; (10a94 <z_thread_abort+0xbc>)
   10a54:	689b      	ldr	r3, [r3, #8]
   10a56:	42a3      	cmp	r3, r4
   10a58:	d1db      	bne.n	10a12 <z_thread_abort+0x3a>
   10a5a:	f3ef 8305 	mrs	r3, IPSR
   10a5e:	2b00      	cmp	r3, #0
   10a60:	d1d7      	bne.n	10a12 <z_thread_abort+0x3a>
   10a62:	4630      	mov	r0, r6
   10a64:	f7fa fcc6 	bl	b3f4 <arch_swap>
	return ret;
   10a68:	e7d3      	b.n	10a12 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10a6a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   10a6e:	f043 0308 	orr.w	r3, r3, #8
   10a72:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10a74:	f001 fc8c 	bl	12390 <sys_dlist_remove>
}
   10a78:	e7d7      	b.n	10a2a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   10a7a:	4628      	mov	r0, r5
   10a7c:	f001 fc90 	bl	123a0 <unpend_thread_no_timeout>
   10a80:	f105 0018 	add.w	r0, r5, #24
   10a84:	f001 fda3 	bl	125ce <z_abort_timeout>
   10a88:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   10a8c:	4628      	mov	r0, r5
   10a8e:	f7ff fd6f 	bl	10570 <ready_thread>
   10a92:	e7d7      	b.n	10a44 <z_thread_abort+0x6c>
   10a94:	20001ae0 	.word	0x20001ae0

00010a98 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   10a98:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10a9a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   10a9e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10aa0:	e9cd 6700 	strd	r6, r7, [sp]
   10aa4:	f7ff fdf8 	bl	10698 <z_pend_curr>

	if (data != NULL) {
   10aa8:	b11c      	cbz	r4, 10ab2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   10aaa:	4b03      	ldr	r3, [pc, #12]	; (10ab8 <z_sched_wait+0x20>)
   10aac:	689b      	ldr	r3, [r3, #8]
   10aae:	695b      	ldr	r3, [r3, #20]
   10ab0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   10ab2:	b002      	add	sp, #8
   10ab4:	bdd0      	pop	{r4, r6, r7, pc}
   10ab6:	bf00      	nop
   10ab8:	20001ae0 	.word	0x20001ae0

00010abc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   10abc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   10abe:	4806      	ldr	r0, [pc, #24]	; (10ad8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   10ac0:	4a06      	ldr	r2, [pc, #24]	; (10adc <z_data_copy+0x20>)
   10ac2:	4907      	ldr	r1, [pc, #28]	; (10ae0 <z_data_copy+0x24>)
   10ac4:	1a12      	subs	r2, r2, r0
   10ac6:	f001 faec 	bl	120a2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   10aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   10ace:	4a05      	ldr	r2, [pc, #20]	; (10ae4 <z_data_copy+0x28>)
   10ad0:	4905      	ldr	r1, [pc, #20]	; (10ae8 <z_data_copy+0x2c>)
   10ad2:	4806      	ldr	r0, [pc, #24]	; (10aec <z_data_copy+0x30>)
   10ad4:	f001 bae5 	b.w	120a2 <z_early_memcpy>
   10ad8:	20000000 	.word	0x20000000
   10adc:	20000534 	.word	0x20000534
   10ae0:	000132e4 	.word	0x000132e4
   10ae4:	00000000 	.word	0x00000000
   10ae8:	000132e4 	.word	0x000132e4
   10aec:	20000000 	.word	0x20000000

00010af0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   10af0:	4b03      	ldr	r3, [pc, #12]	; (10b00 <elapsed+0x10>)
   10af2:	681b      	ldr	r3, [r3, #0]
   10af4:	b90b      	cbnz	r3, 10afa <elapsed+0xa>
   10af6:	f7fd bc13 	b.w	e320 <sys_clock_elapsed>
}
   10afa:	2000      	movs	r0, #0
   10afc:	4770      	bx	lr
   10afe:	bf00      	nop
   10b00:	20001b18 	.word	0x20001b18

00010b04 <next_timeout>:

static int32_t next_timeout(void)
{
   10b04:	b510      	push	{r4, lr}
	return list->head == list;
   10b06:	4b0e      	ldr	r3, [pc, #56]	; (10b40 <next_timeout+0x3c>)
   10b08:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b0a:	429c      	cmp	r4, r3
   10b0c:	d104      	bne.n	10b18 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   10b0e:	f7ff ffef 	bl	10af0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   10b12:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   10b16:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   10b18:	f7ff ffea 	bl	10af0 <elapsed>
	if ((to == NULL) ||
   10b1c:	2c00      	cmp	r4, #0
   10b1e:	d0f8      	beq.n	10b12 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   10b20:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   10b24:	1a1b      	subs	r3, r3, r0
   10b26:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   10b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   10b2e:	f172 0100 	sbcs.w	r1, r2, #0
   10b32:	daee      	bge.n	10b12 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   10b34:	2a00      	cmp	r2, #0
   10b36:	bfac      	ite	ge
   10b38:	4618      	movge	r0, r3
   10b3a:	2000      	movlt	r0, #0
	return ret;
   10b3c:	e7eb      	b.n	10b16 <next_timeout+0x12>
   10b3e:	bf00      	nop
   10b40:	2000045c 	.word	0x2000045c

00010b44 <remove_timeout>:
{
   10b44:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10b46:	b170      	cbz	r0, 10b66 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   10b48:	4b0b      	ldr	r3, [pc, #44]	; (10b78 <remove_timeout+0x34>)
   10b4a:	685b      	ldr	r3, [r3, #4]
   10b4c:	4298      	cmp	r0, r3
   10b4e:	d00a      	beq.n	10b66 <remove_timeout+0x22>
   10b50:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   10b52:	b143      	cbz	r3, 10b66 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   10b54:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   10b58:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   10b5c:	1912      	adds	r2, r2, r4
   10b5e:	eb41 0105 	adc.w	r1, r1, r5
   10b62:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   10b66:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   10b6a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10b6c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10b6e:	2300      	movs	r3, #0
	node->prev = NULL;
   10b70:	e9c0 3300 	strd	r3, r3, [r0]
}
   10b74:	bd30      	pop	{r4, r5, pc}
   10b76:	bf00      	nop
   10b78:	2000045c 	.word	0x2000045c

00010b7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   10b80:	bf08      	it	eq
   10b82:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   10b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b88:	4604      	mov	r4, r0
   10b8a:	461d      	mov	r5, r3
   10b8c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10b8e:	d05c      	beq.n	10c4a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10b90:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   10b92:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b96:	f3ef 8711 	mrs	r7, BASEPRI
   10b9a:	f383 8812 	msr	BASEPRI_MAX, r3
   10b9e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   10ba2:	3201      	adds	r2, #1
   10ba4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   10ba8:	da24      	bge.n	10bf4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   10baa:	492d      	ldr	r1, [pc, #180]	; (10c60 <z_add_timeout+0xe4>)
   10bac:	e9d1 2000 	ldrd	r2, r0, [r1]
   10bb0:	f06f 0301 	mvn.w	r3, #1
   10bb4:	1a9b      	subs	r3, r3, r2
   10bb6:	f04f 32ff 	mov.w	r2, #4294967295
   10bba:	eb62 0000 	sbc.w	r0, r2, r0
   10bbe:	1b9e      	subs	r6, r3, r6
   10bc0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   10bc4:	2e01      	cmp	r6, #1
   10bc6:	f170 0300 	sbcs.w	r3, r0, #0
   10bca:	da01      	bge.n	10bd0 <z_add_timeout+0x54>
   10bcc:	2601      	movs	r6, #1
   10bce:	2000      	movs	r0, #0
   10bd0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   10bd4:	4e23      	ldr	r6, [pc, #140]	; (10c64 <z_add_timeout+0xe8>)
   10bd6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   10bda:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10bdc:	45b4      	cmp	ip, r6
   10bde:	bf08      	it	eq
   10be0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   10be4:	f1bc 0f00 	cmp.w	ip, #0
   10be8:	d10d      	bne.n	10c06 <z_add_timeout+0x8a>
	node->prev = tail;
   10bea:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   10bee:	602c      	str	r4, [r5, #0]
	list->tail = node;
   10bf0:	6074      	str	r4, [r6, #4]
}
   10bf2:	e01c      	b.n	10c2e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   10bf4:	f7ff ff7c 	bl	10af0 <elapsed>
   10bf8:	3601      	adds	r6, #1
   10bfa:	f145 0500 	adc.w	r5, r5, #0
   10bfe:	1836      	adds	r6, r6, r0
   10c00:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   10c04:	e7e4      	b.n	10bd0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   10c06:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   10c0a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   10c0e:	4293      	cmp	r3, r2
   10c10:	eb71 0e00 	sbcs.w	lr, r1, r0
   10c14:	da1a      	bge.n	10c4c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   10c16:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   10c18:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10c1c:	eb60 0001 	sbc.w	r0, r0, r1
   10c20:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   10c24:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   10c28:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10c2a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   10c2e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10c30:	42b3      	cmp	r3, r6
   10c32:	d006      	beq.n	10c42 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10c34:	429c      	cmp	r4, r3
   10c36:	d104      	bne.n	10c42 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   10c38:	f7ff ff64 	bl	10b04 <next_timeout>
   10c3c:	2100      	movs	r1, #0
   10c3e:	f7fd fb3d 	bl	e2bc <sys_clock_set_timeout>
	__asm__ volatile(
   10c42:	f387 8811 	msr	BASEPRI, r7
   10c46:	f3bf 8f6f 	isb	sy
		}
	}
}
   10c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   10c4c:	1a9b      	subs	r3, r3, r2
   10c4e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   10c52:	45ac      	cmp	ip, r5
   10c54:	e9c4 3104 	strd	r3, r1, [r4, #16]
   10c58:	d0c7      	beq.n	10bea <z_add_timeout+0x6e>
   10c5a:	f8dc c000 	ldr.w	ip, [ip]
   10c5e:	e7c1      	b.n	10be4 <z_add_timeout+0x68>
   10c60:	20001800 	.word	0x20001800
   10c64:	2000045c 	.word	0x2000045c

00010c68 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   10c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   10c6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c70:	f3ef 8c11 	mrs	ip, BASEPRI
   10c74:	f383 8812 	msr	BASEPRI_MAX, r3
   10c78:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10c7c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10d30 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   10c80:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 10d34 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   10c84:	4f2c      	ldr	r7, [pc, #176]	; (10d38 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   10c86:	f8c9 0000 	str.w	r0, [r9]
   10c8a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   10c8e:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10c90:	4550      	cmp	r0, sl
   10c92:	bf08      	it	eq
   10c94:	2000      	moveq	r0, #0
   10c96:	2500      	movs	r5, #0
		curr_tick += dt;
   10c98:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   10c9c:	f8d9 3000 	ldr.w	r3, [r9]
   10ca0:	46e0      	mov	r8, ip
   10ca2:	b380      	cbz	r0, 10d06 <sys_clock_announce+0x9e>
   10ca4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   10ca8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   10cac:	42b3      	cmp	r3, r6
   10cae:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   10cb2:	da05      	bge.n	10cc0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   10cb4:	1af6      	subs	r6, r6, r3
   10cb6:	eb6c 040e 	sbc.w	r4, ip, lr
   10cba:	e9c0 6404 	strd	r6, r4, [r0, #16]
   10cbe:	e022      	b.n	10d06 <sys_clock_announce+0x9e>
		curr_tick += dt;
   10cc0:	18b2      	adds	r2, r6, r2
   10cc2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   10cc6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   10cca:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   10cce:	f7ff ff39 	bl	10b44 <remove_timeout>
	__asm__ volatile(
   10cd2:	f388 8811 	msr	BASEPRI, r8
   10cd6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   10cda:	6883      	ldr	r3, [r0, #8]
   10cdc:	4798      	blx	r3
	__asm__ volatile(
   10cde:	f04f 0340 	mov.w	r3, #64	; 0x40
   10ce2:	f3ef 8811 	mrs	r8, BASEPRI
   10ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   10cea:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   10cee:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   10cf2:	f8da 0000 	ldr.w	r0, [sl]
   10cf6:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10cf8:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   10cfa:	46c4      	mov	ip, r8
   10cfc:	f8c9 3000 	str.w	r3, [r9]
   10d00:	d1ca      	bne.n	10c98 <sys_clock_announce+0x30>
		curr_tick += dt;
   10d02:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   10d06:	189a      	adds	r2, r3, r2
   10d08:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   10d0c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10d0e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   10d12:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   10d16:	f7ff fef5 	bl	10b04 <next_timeout>
   10d1a:	4621      	mov	r1, r4
   10d1c:	f7fd face 	bl	e2bc <sys_clock_set_timeout>
	__asm__ volatile(
   10d20:	f388 8811 	msr	BASEPRI, r8
   10d24:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   10d28:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   10d2c:	f7ff bc84 	b.w	10638 <z_time_slice>
   10d30:	2000045c 	.word	0x2000045c
   10d34:	20001b18 	.word	0x20001b18
   10d38:	20001800 	.word	0x20001800

00010d3c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10d3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   10d3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d42:	f3ef 8411 	mrs	r4, BASEPRI
   10d46:	f383 8812 	msr	BASEPRI_MAX, r3
   10d4a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   10d4e:	f7ff fecf 	bl	10af0 <elapsed>
   10d52:	4a06      	ldr	r2, [pc, #24]	; (10d6c <sys_clock_tick_get+0x30>)
   10d54:	4603      	mov	r3, r0
   10d56:	e9d2 0100 	ldrd	r0, r1, [r2]
   10d5a:	1818      	adds	r0, r3, r0
   10d5c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   10d60:	f384 8811 	msr	BASEPRI, r4
   10d64:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   10d68:	bd10      	pop	{r4, pc}
   10d6a:	bf00      	nop
   10d6c:	20001800 	.word	0x20001800

00010d70 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   10d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d72:	4604      	mov	r4, r0
	__asm__ volatile(
   10d74:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d78:	f3ef 8711 	mrs	r7, BASEPRI
   10d7c:	f383 8812 	msr	BASEPRI_MAX, r3
   10d80:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   10d84:	6802      	ldr	r2, [r0, #0]
   10d86:	b122      	cbz	r2, 10d92 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   10d88:	f387 8811 	msr	BASEPRI, r7
   10d8c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   10d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   10d92:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   10d96:	1c58      	adds	r0, r3, #1
   10d98:	f146 0100 	adc.w	r1, r6, #0
   10d9c:	2802      	cmp	r0, #2
   10d9e:	f171 0100 	sbcs.w	r1, r1, #0
   10da2:	d327      	bcc.n	10df4 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   10da4:	2b01      	cmp	r3, #1
   10da6:	f176 0100 	sbcs.w	r1, r6, #0
   10daa:	bfbc      	itt	lt
   10dac:	2301      	movlt	r3, #1
   10dae:	4616      	movlt	r6, r2
   10db0:	1e5d      	subs	r5, r3, #1
   10db2:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   10db6:	f001 fc34 	bl	12622 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   10dba:	3001      	adds	r0, #1
   10dbc:	f141 0100 	adc.w	r1, r1, #0
   10dc0:	1940      	adds	r0, r0, r5
   10dc2:	eb46 0101 	adc.w	r1, r6, r1
   10dc6:	2801      	cmp	r0, #1
   10dc8:	f171 0100 	sbcs.w	r1, r1, #0
   10dcc:	db3a      	blt.n	10e44 <z_timer_expiration_handler+0xd4>
   10dce:	f001 fc28 	bl	12622 <z_impl_k_uptime_ticks>
   10dd2:	3001      	adds	r0, #1
   10dd4:	f141 0100 	adc.w	r1, r1, #0
   10dd8:	f06f 0201 	mvn.w	r2, #1
   10ddc:	1940      	adds	r0, r0, r5
   10dde:	eb46 0301 	adc.w	r3, r6, r1
   10de2:	1a12      	subs	r2, r2, r0
   10de4:	f04f 31ff 	mov.w	r1, #4294967295
   10de8:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10dec:	4918      	ldr	r1, [pc, #96]	; (10e50 <z_timer_expiration_handler+0xe0>)
   10dee:	4620      	mov	r0, r4
   10df0:	f7ff fec4 	bl	10b7c <z_add_timeout>
	timer->status += 1U;
   10df4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10df6:	3301      	adds	r3, #1
   10df8:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   10dfa:	6a23      	ldr	r3, [r4, #32]
   10dfc:	b173      	cbz	r3, 10e1c <z_timer_expiration_handler+0xac>
   10dfe:	f387 8811 	msr	BASEPRI, r7
   10e02:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   10e06:	6a23      	ldr	r3, [r4, #32]
   10e08:	4620      	mov	r0, r4
   10e0a:	4798      	blx	r3
	__asm__ volatile(
   10e0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e10:	f3ef 8711 	mrs	r7, BASEPRI
   10e14:	f383 8812 	msr	BASEPRI_MAX, r3
   10e18:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10e1c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e20:	42a5      	cmp	r5, r4
   10e22:	d0b1      	beq.n	10d88 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   10e24:	2d00      	cmp	r5, #0
   10e26:	d0af      	beq.n	10d88 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   10e28:	4628      	mov	r0, r5
   10e2a:	f001 fb04 	bl	12436 <z_unpend_thread_no_timeout>
   10e2e:	2300      	movs	r3, #0
   10e30:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   10e32:	f387 8811 	msr	BASEPRI, r7
   10e36:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   10e3a:	4628      	mov	r0, r5
}
   10e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   10e40:	f001 bae9 	b.w	12416 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   10e44:	f06f 0201 	mvn.w	r2, #1
   10e48:	f04f 33ff 	mov.w	r3, #4294967295
   10e4c:	e7ce      	b.n	10dec <z_timer_expiration_handler+0x7c>
   10e4e:	bf00      	nop
   10e50:	00010d71 	.word	0x00010d71

00010e54 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   10e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10e58:	f1b3 3fff 	cmp.w	r3, #4294967295
   10e5c:	bf08      	it	eq
   10e5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   10e62:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   10e66:	4605      	mov	r5, r0
   10e68:	461c      	mov	r4, r3
   10e6a:	4691      	mov	r9, r2
   10e6c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10e6e:	d01c      	beq.n	10eaa <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   10e70:	1c53      	adds	r3, r2, #1
   10e72:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   10e76:	db09      	blt.n	10e8c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   10e78:	2a01      	cmp	r2, #1
   10e7a:	f174 0300 	sbcs.w	r3, r4, #0
   10e7e:	bfbc      	itt	lt
   10e80:	2201      	movlt	r2, #1
   10e82:	2400      	movlt	r4, #0
   10e84:	f112 39ff 	adds.w	r9, r2, #4294967295
   10e88:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   10e8c:	4628      	mov	r0, r5
   10e8e:	f001 fb9e 	bl	125ce <z_abort_timeout>
	timer->period = period;
   10e92:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   10e96:	2300      	movs	r3, #0
   10e98:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10e9a:	464a      	mov	r2, r9
   10e9c:	4643      	mov	r3, r8
   10e9e:	4628      	mov	r0, r5
   10ea0:	4903      	ldr	r1, [pc, #12]	; (10eb0 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   10ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10ea6:	f7ff be69 	b.w	10b7c <z_add_timeout>
}
   10eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10eae:	bf00      	nop
   10eb0:	00010d71 	.word	0x00010d71

00010eb4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   10eb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10eb8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   10eba:	4b29      	ldr	r3, [pc, #164]	; (10f60 <z_impl_k_poll+0xac>)
   10ebc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   10ebe:	2301      	movs	r3, #1
   10ec0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   10ec4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   10ec8:	ea52 0305 	orrs.w	r3, r2, r5
{
   10ecc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   10ece:	bf0c      	ite	eq
   10ed0:	2301      	moveq	r3, #1
   10ed2:	2300      	movne	r3, #0
   10ed4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   10ed8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   10eda:	f001 fc18 	bl	1270e <register_events>
   10ede:	4681      	mov	r9, r0
	__asm__ volatile(
   10ee0:	f04f 0340 	mov.w	r3, #64	; 0x40
   10ee4:	f3ef 8a11 	mrs	sl, BASEPRI
   10ee8:	f383 8812 	msr	BASEPRI_MAX, r3
   10eec:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   10ef0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   10ef4:	b964      	cbnz	r4, 10f10 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   10ef6:	4601      	mov	r1, r0
   10ef8:	4652      	mov	r2, sl
   10efa:	4640      	mov	r0, r8
   10efc:	f001 fcd8 	bl	128b0 <clear_event_registrations>
	__asm__ volatile(
   10f00:	f38a 8811 	msr	BASEPRI, sl
   10f04:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   10f08:	4620      	mov	r0, r4
   10f0a:	b002      	add	sp, #8
   10f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   10f10:	2300      	movs	r3, #0
   10f12:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10f16:	ea56 0305 	orrs.w	r3, r6, r5
   10f1a:	d106      	bne.n	10f2a <z_impl_k_poll+0x76>
   10f1c:	f38a 8811 	msr	BASEPRI, sl
   10f20:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   10f24:	f06f 040a 	mvn.w	r4, #10
   10f28:	e7ee      	b.n	10f08 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10f2a:	e9cd 6500 	strd	r6, r5, [sp]
   10f2e:	4a0d      	ldr	r2, [pc, #52]	; (10f64 <z_impl_k_poll+0xb0>)
   10f30:	480d      	ldr	r0, [pc, #52]	; (10f68 <z_impl_k_poll+0xb4>)
   10f32:	4651      	mov	r1, sl
   10f34:	f7ff fbb0 	bl	10698 <z_pend_curr>
   10f38:	4604      	mov	r4, r0
	__asm__ volatile(
   10f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f3e:	f3ef 8511 	mrs	r5, BASEPRI
   10f42:	f383 8812 	msr	BASEPRI_MAX, r3
   10f46:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   10f4a:	462a      	mov	r2, r5
   10f4c:	4649      	mov	r1, r9
   10f4e:	4640      	mov	r0, r8
   10f50:	f001 fcae 	bl	128b0 <clear_event_registrations>
	__asm__ volatile(
   10f54:	f385 8811 	msr	BASEPRI, r5
   10f58:	f3bf 8f6f 	isb	sy
	return swap_rc;
   10f5c:	e7d4      	b.n	10f08 <z_impl_k_poll+0x54>
   10f5e:	bf00      	nop
   10f60:	20001ae0 	.word	0x20001ae0
   10f64:	20000464 	.word	0x20000464
   10f68:	20001fcf 	.word	0x20001fcf

00010f6c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   10f6c:	b538      	push	{r3, r4, r5, lr}
   10f6e:	4603      	mov	r3, r0
	__asm__ volatile(
   10f70:	f04f 0240 	mov.w	r2, #64	; 0x40
   10f74:	f3ef 8511 	mrs	r5, BASEPRI
   10f78:	f382 8812 	msr	BASEPRI_MAX, r2
   10f7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   10f80:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   10f82:	2101      	movs	r1, #1
   10f84:	6081      	str	r1, [r0, #8]
	return list->head == list;
   10f86:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   10f88:	4283      	cmp	r3, r0
   10f8a:	d106      	bne.n	10f9a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   10f8c:	f385 8811 	msr	BASEPRI, r5
   10f90:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   10f94:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   10f96:	4620      	mov	r0, r4
   10f98:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   10f9a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   10f9e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10fa0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10fa2:	2300      	movs	r3, #0
	node->prev = NULL;
   10fa4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10fa8:	f001 fc28 	bl	127fc <signal_poll_event>
	z_reschedule(&lock, key);
   10fac:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10fae:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   10fb0:	4801      	ldr	r0, [pc, #4]	; (10fb8 <z_impl_k_poll_signal_raise+0x4c>)
   10fb2:	f7ff fbd5 	bl	10760 <z_reschedule>
	return rc;
   10fb6:	e7ee      	b.n	10f96 <z_impl_k_poll_signal_raise+0x2a>
   10fb8:	20001fcf 	.word	0x20001fcf

00010fbc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   10fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10fbe:	4606      	mov	r6, r0
   10fc0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   10fc2:	f001 f8e2 	bl	1218a <k_is_in_isr>
   10fc6:	b978      	cbnz	r0, 10fe8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   10fc8:	4b0b      	ldr	r3, [pc, #44]	; (10ff8 <z_thread_aligned_alloc+0x3c>)
   10fca:	689b      	ldr	r3, [r3, #8]
   10fcc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   10fce:	b17c      	cbz	r4, 10ff0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   10fd0:	1d2a      	adds	r2, r5, #4
   10fd2:	d209      	bcs.n	10fe8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   10fd4:	2000      	movs	r0, #0
   10fd6:	2100      	movs	r1, #0
   10fd8:	e9cd 0100 	strd	r0, r1, [sp]
   10fdc:	f046 0104 	orr.w	r1, r6, #4
   10fe0:	4620      	mov	r0, r4
   10fe2:	f001 f868 	bl	120b6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   10fe6:	b908      	cbnz	r0, 10fec <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   10fe8:	2400      	movs	r4, #0
	}

	return ret;
   10fea:	e001      	b.n	10ff0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   10fec:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   10fee:	1d04      	adds	r4, r0, #4
}
   10ff0:	4620      	mov	r0, r4
   10ff2:	b002      	add	sp, #8
   10ff4:	bd70      	pop	{r4, r5, r6, pc}
   10ff6:	bf00      	nop
   10ff8:	20001ae0 	.word	0x20001ae0

00010ffc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   10ffc:	4801      	ldr	r0, [pc, #4]	; (11004 <boot_banner+0x8>)
   10ffe:	f000 b832 	b.w	11066 <printk>
   11002:	bf00      	nop
   11004:	000132aa 	.word	0x000132aa

00011008 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   11008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1100a:	4b09      	ldr	r3, [pc, #36]	; (11030 <k_sys_work_q_init+0x28>)
   1100c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1100e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   11010:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   11012:	9300      	str	r3, [sp, #0]
   11014:	4907      	ldr	r1, [pc, #28]	; (11034 <k_sys_work_q_init+0x2c>)
   11016:	4808      	ldr	r0, [pc, #32]	; (11038 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   11018:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1101c:	f04f 33ff 	mov.w	r3, #4294967295
   11020:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11024:	f7ff f9be 	bl	103a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   11028:	4620      	mov	r0, r4
   1102a:	b004      	add	sp, #16
   1102c:	bd10      	pop	{r4, pc}
   1102e:	bf00      	nop
   11030:	000132d8 	.word	0x000132d8
   11034:	20003cc0 	.word	0x20003cc0
   11038:	20001808 	.word	0x20001808

0001103c <arch_printk_char_out>:
}
   1103c:	2000      	movs	r0, #0
   1103e:	4770      	bx	lr

00011040 <str_out>:
{
   11040:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11042:	688a      	ldr	r2, [r1, #8]
   11044:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   11046:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11048:	b114      	cbz	r4, 11050 <str_out+0x10>
   1104a:	684b      	ldr	r3, [r1, #4]
   1104c:	4293      	cmp	r3, r2
   1104e:	dc01      	bgt.n	11054 <str_out+0x14>
		ctx->count++;
   11050:	608d      	str	r5, [r1, #8]
}
   11052:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   11054:	3b01      	subs	r3, #1
   11056:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   11058:	bf08      	it	eq
   1105a:	2200      	moveq	r2, #0
   1105c:	608d      	str	r5, [r1, #8]
   1105e:	bf0c      	ite	eq
   11060:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   11062:	54a0      	strbne	r0, [r4, r2]
   11064:	e7f5      	b.n	11052 <str_out+0x12>

00011066 <printk>:
{
   11066:	b40f      	push	{r0, r1, r2, r3}
   11068:	b507      	push	{r0, r1, r2, lr}
   1106a:	a904      	add	r1, sp, #16
   1106c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11070:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   11072:	f7f9 fb09 	bl	a688 <vprintk>
}
   11076:	b003      	add	sp, #12
   11078:	f85d eb04 	ldr.w	lr, [sp], #4
   1107c:	b004      	add	sp, #16
   1107e:	4770      	bx	lr

00011080 <snprintk>:
{
   11080:	b40c      	push	{r2, r3}
   11082:	b507      	push	{r0, r1, r2, lr}
   11084:	ab04      	add	r3, sp, #16
   11086:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1108a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1108c:	f7f9 fb0a 	bl	a6a4 <vsnprintk>
}
   11090:	b003      	add	sp, #12
   11092:	f85d eb04 	ldr.w	lr, [sp], #4
   11096:	b002      	add	sp, #8
   11098:	4770      	bx	lr

0001109a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1109a:	4604      	mov	r4, r0
   1109c:	b508      	push	{r3, lr}
   1109e:	4608      	mov	r0, r1
   110a0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   110a2:	461a      	mov	r2, r3
   110a4:	47a0      	blx	r4
	return z_impl_z_current_get();
   110a6:	f7ff fc91 	bl	109cc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   110aa:	f7fa fc37 	bl	b91c <z_impl_k_thread_abort>

000110ae <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   110ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   110b2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   110b4:	0840      	lsrs	r0, r0, #1
   110b6:	4770      	bx	lr

000110b8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   110b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110ba:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   110bc:	f7ff fff7 	bl	110ae <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   110c0:	fab0 f080 	clz	r0, r0
   110c4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   110c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   110cc:	00ca      	lsls	r2, r1, #3
   110ce:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   110d2:	1d17      	adds	r7, r2, #4
{
   110d4:	460c      	mov	r4, r1
   110d6:	3206      	adds	r2, #6
   110d8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   110da:	b956      	cbnz	r6, 110f2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   110dc:	2101      	movs	r1, #1
   110de:	fa01 f000 	lsl.w	r0, r1, r0
   110e2:	68d9      	ldr	r1, [r3, #12]
   110e4:	4301      	orrs	r1, r0
   110e6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   110e8:	f8cc 4010 	str.w	r4, [ip, #16]
   110ec:	53dd      	strh	r5, [r3, r7]
   110ee:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   110f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   110f2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   110f4:	3104      	adds	r1, #4
   110f6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   110f8:	53d8      	strh	r0, [r3, r7]
   110fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   110fe:	529e      	strh	r6, [r3, r2]
   11100:	80c5      	strh	r5, [r0, #6]
   11102:	525d      	strh	r5, [r3, r1]
   11104:	e7f4      	b.n	110f0 <free_list_add+0x38>

00011106 <free_list_remove_bidx>:
{
   11106:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   11108:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1110c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1110e:	4299      	cmp	r1, r3
   11110:	f102 0104 	add.w	r1, r2, #4
   11114:	d10a      	bne.n	1112c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   11116:	2301      	movs	r3, #1
   11118:	fa03 f202 	lsl.w	r2, r3, r2
   1111c:	68c3      	ldr	r3, [r0, #12]
   1111e:	ea23 0302 	bic.w	r3, r3, r2
   11122:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11124:	2300      	movs	r3, #0
   11126:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1112a:	bd10      	pop	{r4, pc}
   1112c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1112e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   11132:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   11136:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1113a:	80cb      	strh	r3, [r1, #6]
   1113c:	8082      	strh	r2, [r0, #4]
}
   1113e:	e7f4      	b.n	1112a <free_list_remove_bidx+0x24>

00011140 <free_list_remove>:
{
   11140:	b508      	push	{r3, lr}
   11142:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   11144:	f7ff ffb3 	bl	110ae <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   11148:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1114c:	f1c2 021f 	rsb	r2, r2, #31
   11150:	4618      	mov	r0, r3
}
   11152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   11156:	f7ff bfd6 	b.w	11106 <free_list_remove_bidx>

0001115a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1115a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1115e:	fab1 f581 	clz	r5, r1
   11162:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   11166:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   1116a:	4603      	mov	r3, r0
	if (b->next) {
   1116c:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   11170:	460e      	mov	r6, r1
	if (b->next) {
   11172:	b1c2      	cbz	r2, 111a6 <alloc_chunk+0x4c>
   11174:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   11176:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1117a:	4618      	mov	r0, r3
   1117c:	4621      	mov	r1, r4
   1117e:	f7ff ff96 	bl	110ae <chunk_size>
   11182:	42b0      	cmp	r0, r6
   11184:	d306      	bcc.n	11194 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   11186:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   11188:	4618      	mov	r0, r3
   1118a:	f7ff ffbc 	bl	11106 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1118e:	4620      	mov	r0, r4
   11190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   11194:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   11198:	3f01      	subs	r7, #1
   1119a:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   1119c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   111a0:	d001      	beq.n	111a6 <alloc_chunk+0x4c>
   111a2:	4282      	cmp	r2, r0
   111a4:	d1e7      	bne.n	11176 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   111a6:	f1c5 0220 	rsb	r2, r5, #32
   111aa:	f04f 34ff 	mov.w	r4, #4294967295
   111ae:	4094      	lsls	r4, r2
   111b0:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   111b2:	4014      	ands	r4, r2
   111b4:	d0eb      	beq.n	1118e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   111b6:	fa94 f2a4 	rbit	r2, r4
   111ba:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   111be:	1d11      	adds	r1, r2, #4
   111c0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   111c4:	4621      	mov	r1, r4
   111c6:	e7df      	b.n	11188 <alloc_chunk+0x2e>

000111c8 <merge_chunks>:
{
   111c8:	b538      	push	{r3, r4, r5, lr}
   111ca:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   111cc:	f7ff ff6f 	bl	110ae <chunk_size>
{
   111d0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   111d2:	4604      	mov	r4, r0
   111d4:	4611      	mov	r1, r2
   111d6:	4618      	mov	r0, r3
   111d8:	f7ff ff69 	bl	110ae <chunk_size>
		((uint16_t *)cmem)[f] = val;
   111dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   111e0:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   111e2:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   111e4:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   111e6:	4618      	mov	r0, r3
   111e8:	f7ff ff61 	bl	110ae <chunk_size>
	void *cmem = &buf[c];
   111ec:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   111ee:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   111f2:	bd38      	pop	{r3, r4, r5, pc}

000111f4 <split_chunks>:
{
   111f4:	b538      	push	{r3, r4, r5, lr}
   111f6:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   111f8:	f7ff ff59 	bl	110ae <chunk_size>
{
   111fc:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   111fe:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   11200:	1a51      	subs	r1, r2, r1
   11202:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   11206:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11208:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1120a:	8060      	strh	r0, [r4, #2]
   1120c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11210:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   11212:	8044      	strh	r4, [r0, #2]
   11214:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   11218:	4618      	mov	r0, r3
   1121a:	4611      	mov	r1, r2
   1121c:	f7ff ff47 	bl	110ae <chunk_size>
	void *cmem = &buf[c];
   11220:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   11222:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   11226:	bd38      	pop	{r3, r4, r5, pc}

00011228 <free_chunk>:
{
   11228:	b538      	push	{r3, r4, r5, lr}
   1122a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1122c:	f7ff ff3f 	bl	110ae <chunk_size>
   11230:	460c      	mov	r4, r1
   11232:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   11234:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11238:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1123a:	07da      	lsls	r2, r3, #31
   1123c:	d40a      	bmi.n	11254 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1123e:	4628      	mov	r0, r5
   11240:	f7ff ff7e 	bl	11140 <free_list_remove>
	return c + chunk_size(h, c);
   11244:	4621      	mov	r1, r4
   11246:	4628      	mov	r0, r5
   11248:	f7ff ff31 	bl	110ae <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1124c:	1822      	adds	r2, r4, r0
   1124e:	4628      	mov	r0, r5
   11250:	f7ff ffba 	bl	111c8 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   11254:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11258:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1125a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1125e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   11260:	07db      	lsls	r3, r3, #31
   11262:	d40c      	bmi.n	1127e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   11264:	4628      	mov	r0, r5
   11266:	f7ff ff6b 	bl	11140 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1126a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1126e:	4622      	mov	r2, r4
   11270:	1a61      	subs	r1, r4, r1
   11272:	4628      	mov	r0, r5
   11274:	f7ff ffa8 	bl	111c8 <merge_chunks>
   11278:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1127c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1127e:	4621      	mov	r1, r4
   11280:	4628      	mov	r0, r5
}
   11282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   11286:	f7ff bf17 	b.w	110b8 <free_list_add>

0001128a <sys_heap_free>:
	if (mem == NULL) {
   1128a:	b161      	cbz	r1, 112a6 <sys_heap_free+0x1c>
   1128c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1128e:	3904      	subs	r1, #4
   11290:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   11292:	f021 0307 	bic.w	r3, r1, #7
   11296:	4403      	add	r3, r0
	free_chunk(h, c);
   11298:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1129a:	885a      	ldrh	r2, [r3, #2]
   1129c:	f022 0201 	bic.w	r2, r2, #1
   112a0:	805a      	strh	r2, [r3, #2]
   112a2:	f7ff bfc1 	b.w	11228 <free_chunk>
}
   112a6:	4770      	bx	lr

000112a8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   112a8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   112aa:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   112ac:	b909      	cbnz	r1, 112b2 <sys_heap_alloc+0xa>
		return NULL;
   112ae:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   112b0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   112b2:	68ab      	ldr	r3, [r5, #8]
   112b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   112b8:	d9f9      	bls.n	112ae <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   112ba:	310b      	adds	r1, #11
   112bc:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   112be:	4621      	mov	r1, r4
   112c0:	4628      	mov	r0, r5
   112c2:	f7ff ff4a 	bl	1115a <alloc_chunk>
	if (c == 0U) {
   112c6:	4606      	mov	r6, r0
   112c8:	2800      	cmp	r0, #0
   112ca:	d0f0      	beq.n	112ae <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   112cc:	4601      	mov	r1, r0
   112ce:	4628      	mov	r0, r5
   112d0:	f7ff feed 	bl	110ae <chunk_size>
   112d4:	42a0      	cmp	r0, r4
   112d6:	d907      	bls.n	112e8 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   112d8:	1932      	adds	r2, r6, r4
   112da:	4628      	mov	r0, r5
   112dc:	f7ff ff8a 	bl	111f4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   112e0:	4611      	mov	r1, r2
   112e2:	4628      	mov	r0, r5
   112e4:	f7ff fee8 	bl	110b8 <free_list_add>
	void *cmem = &buf[c];
   112e8:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   112ec:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   112ee:	8853      	ldrh	r3, [r2, #2]
   112f0:	f043 0301 	orr.w	r3, r3, #1
   112f4:	8053      	strh	r3, [r2, #2]
   112f6:	3004      	adds	r0, #4
	return mem;
   112f8:	e7da      	b.n	112b0 <sys_heap_alloc+0x8>

000112fa <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   112fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   112fe:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   11302:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   11306:	6806      	ldr	r6, [r0, #0]
{
   11308:	460f      	mov	r7, r1
   1130a:	4614      	mov	r4, r2
	if (align != rew) {
   1130c:	d00c      	beq.n	11328 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1130e:	424b      	negs	r3, r1
   11310:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   11312:	2b04      	cmp	r3, #4
   11314:	461a      	mov	r2, r3
   11316:	464f      	mov	r7, r9
   11318:	bf28      	it	cs
   1131a:	2204      	movcs	r2, #4
	rew = align & -align;
   1131c:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1131e:	b964      	cbnz	r4, 1133a <sys_heap_aligned_alloc+0x40>
		return NULL;
   11320:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11322:	4628      	mov	r0, r5
   11324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   11328:	2904      	cmp	r1, #4
   1132a:	d804      	bhi.n	11336 <sys_heap_aligned_alloc+0x3c>
}
   1132c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   11330:	4611      	mov	r1, r2
   11332:	f7ff bfb9 	b.w	112a8 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   11336:	2204      	movs	r2, #4
   11338:	e7f1      	b.n	1131e <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1133a:	68b3      	ldr	r3, [r6, #8]
   1133c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11340:	d9ee      	bls.n	11320 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11342:	f104 010b 	add.w	r1, r4, #11
   11346:	4439      	add	r1, r7
   11348:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1134a:	08c9      	lsrs	r1, r1, #3
   1134c:	4630      	mov	r0, r6
   1134e:	f7ff ff04 	bl	1115a <alloc_chunk>
	if (c0 == 0) {
   11352:	4680      	mov	r8, r0
   11354:	2800      	cmp	r0, #0
   11356:	d0e3      	beq.n	11320 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11358:	f109 0504 	add.w	r5, r9, #4
   1135c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   11360:	1e7b      	subs	r3, r7, #1
   11362:	4435      	add	r5, r6
   11364:	441d      	add	r5, r3
   11366:	427f      	negs	r7, r7
   11368:	403d      	ands	r5, r7
   1136a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1136e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11370:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11372:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11374:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11376:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1137a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1137c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11380:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11384:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11388:	d208      	bcs.n	1139c <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1138a:	4601      	mov	r1, r0
   1138c:	463a      	mov	r2, r7
   1138e:	4630      	mov	r0, r6
   11390:	f7ff ff30 	bl	111f4 <split_chunks>
		free_list_add(h, c0);
   11394:	4641      	mov	r1, r8
   11396:	4630      	mov	r0, r6
   11398:	f7ff fe8e 	bl	110b8 <free_list_add>
	return c + chunk_size(h, c);
   1139c:	4639      	mov	r1, r7
   1139e:	4630      	mov	r0, r6
   113a0:	f7ff fe85 	bl	110ae <chunk_size>
   113a4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   113a6:	4284      	cmp	r4, r0
   113a8:	d207      	bcs.n	113ba <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   113aa:	4630      	mov	r0, r6
   113ac:	4622      	mov	r2, r4
   113ae:	f7ff ff21 	bl	111f4 <split_chunks>
		free_list_add(h, c_end);
   113b2:	4621      	mov	r1, r4
   113b4:	4630      	mov	r0, r6
   113b6:	f7ff fe7f 	bl	110b8 <free_list_add>
	void *cmem = &buf[c];
   113ba:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   113be:	8873      	ldrh	r3, [r6, #2]
   113c0:	f043 0301 	orr.w	r3, r3, #1
   113c4:	8073      	strh	r3, [r6, #2]
   113c6:	e7ac      	b.n	11322 <sys_heap_aligned_alloc+0x28>

000113c8 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   113c8:	3a04      	subs	r2, #4
{
   113ca:	b4f0      	push	{r4, r5, r6, r7}
   113cc:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   113ce:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   113d0:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   113d2:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   113d6:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   113da:	1a0e      	subs	r6, r1, r0
   113dc:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   113de:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   113e0:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   113e4:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   113e6:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   113ea:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   113ec:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   113ee:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   113f0:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   113f4:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   113f6:	f1c2 0220 	rsb	r2, r2, #32
   113fa:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   113fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   11400:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   11404:	4294      	cmp	r4, r2
   11406:	d1fb      	bne.n	11400 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11408:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1140a:	f042 0201 	orr.w	r2, r2, #1
   1140e:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   11410:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11414:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11416:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   11418:	8007      	strh	r7, [r0, #0]
   1141a:	8065      	strh	r5, [r4, #2]
   1141c:	1984      	adds	r4, r0, r6
   1141e:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   11422:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   11426:	8067      	strh	r7, [r4, #2]
   11428:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1142a:	885a      	ldrh	r2, [r3, #2]
   1142c:	f042 0201 	orr.w	r2, r2, #1
   11430:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   11432:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   11434:	f7ff be40 	b.w	110b8 <free_list_add>

00011438 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11438:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1143a:	f013 0307 	ands.w	r3, r3, #7
   1143e:	d105      	bne.n	1144c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   11440:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   11442:	2b00      	cmp	r3, #0
   11444:	bf0c      	ite	eq
   11446:	2000      	moveq	r0, #0
   11448:	2003      	movne	r0, #3
   1144a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1144c:	2b02      	cmp	r3, #2
   1144e:	d105      	bne.n	1145c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   11450:	8b40      	ldrh	r0, [r0, #26]
   11452:	fab0 f080 	clz	r0, r0
   11456:	0940      	lsrs	r0, r0, #5
   11458:	0080      	lsls	r0, r0, #2
   1145a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1145c:	2b01      	cmp	r3, #1
   1145e:	d105      	bne.n	1146c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   11460:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   11462:	2b00      	cmp	r3, #0
   11464:	bf0c      	ite	eq
   11466:	2000      	moveq	r0, #0
   11468:	2005      	movne	r0, #5
   1146a:	4770      	bx	lr
	int evt = EVT_NOP;
   1146c:	2000      	movs	r0, #0
}
   1146e:	4770      	bx	lr

00011470 <validate_args>:
{
   11470:	b510      	push	{r4, lr}
   11472:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11474:	b100      	cbz	r0, 11478 <validate_args+0x8>
   11476:	b911      	cbnz	r1, 1147e <validate_args+0xe>
		return -EINVAL;
   11478:	f06f 0015 	mvn.w	r0, #21
}
   1147c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1147e:	1d08      	adds	r0, r1, #4
   11480:	f000 f895 	bl	115ae <sys_notify_validate>
	if ((rv == 0)
   11484:	2800      	cmp	r0, #0
   11486:	d1f9      	bne.n	1147c <validate_args+0xc>
	    && ((cli->notify.flags
   11488:	68a3      	ldr	r3, [r4, #8]
   1148a:	2b03      	cmp	r3, #3
   1148c:	d9f6      	bls.n	1147c <validate_args+0xc>
   1148e:	e7f3      	b.n	11478 <validate_args+0x8>

00011490 <notify_one>:
{
   11490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11494:	460d      	mov	r5, r1
   11496:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11498:	4619      	mov	r1, r3
   1149a:	1d28      	adds	r0, r5, #4
{
   1149c:	4690      	mov	r8, r2
   1149e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   114a0:	f000 f899 	bl	115d6 <sys_notify_finalize>
	if (cb) {
   114a4:	4604      	mov	r4, r0
   114a6:	b138      	cbz	r0, 114b8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   114a8:	4633      	mov	r3, r6
   114aa:	4642      	mov	r2, r8
   114ac:	4629      	mov	r1, r5
   114ae:	4638      	mov	r0, r7
   114b0:	46a4      	mov	ip, r4
}
   114b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   114b6:	4760      	bx	ip
}
   114b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000114bc <transition_complete>:
{
   114bc:	b410      	push	{r4}
	__asm__ volatile(
   114be:	f04f 0440 	mov.w	r4, #64	; 0x40
   114c2:	f3ef 8211 	mrs	r2, BASEPRI
   114c6:	f384 8812 	msr	BASEPRI_MAX, r4
   114ca:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   114ce:	6141      	str	r1, [r0, #20]
}
   114d0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   114d2:	2101      	movs	r1, #1
   114d4:	f7f9 b8fc 	b.w	a6d0 <process_event>

000114d8 <onoff_manager_init>:
{
   114d8:	b538      	push	{r3, r4, r5, lr}
   114da:	460c      	mov	r4, r1
	if ((mgr == NULL)
   114dc:	4605      	mov	r5, r0
   114de:	b158      	cbz	r0, 114f8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   114e0:	b151      	cbz	r1, 114f8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   114e2:	680b      	ldr	r3, [r1, #0]
   114e4:	b143      	cbz	r3, 114f8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   114e6:	684b      	ldr	r3, [r1, #4]
   114e8:	b133      	cbz	r3, 114f8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   114ea:	221c      	movs	r2, #28
   114ec:	2100      	movs	r1, #0
   114ee:	f000 f93c 	bl	1176a <memset>
   114f2:	612c      	str	r4, [r5, #16]
	return 0;
   114f4:	2000      	movs	r0, #0
}
   114f6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   114f8:	f06f 0015 	mvn.w	r0, #21
   114fc:	e7fb      	b.n	114f6 <onoff_manager_init+0x1e>

000114fe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   114fe:	b570      	push	{r4, r5, r6, lr}
   11500:	4605      	mov	r5, r0
   11502:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11504:	f7ff ffb4 	bl	11470 <validate_args>

	if (rv < 0) {
   11508:	1e04      	subs	r4, r0, #0
   1150a:	db15      	blt.n	11538 <onoff_request+0x3a>
   1150c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11510:	f3ef 8211 	mrs	r2, BASEPRI
   11514:	f383 8812 	msr	BASEPRI_MAX, r3
   11518:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1151c:	8b6b      	ldrh	r3, [r5, #26]
   1151e:	8b2c      	ldrh	r4, [r5, #24]
   11520:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11524:	428b      	cmp	r3, r1
   11526:	f004 0407 	and.w	r4, r4, #7
   1152a:	d107      	bne.n	1153c <onoff_request+0x3e>
	__asm__ volatile(
   1152c:	f382 8811 	msr	BASEPRI, r2
   11530:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   11534:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   11538:	4620      	mov	r0, r4
   1153a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1153c:	2c02      	cmp	r4, #2
   1153e:	d10c      	bne.n	1155a <onoff_request+0x5c>
		mgr->refs += 1U;
   11540:	3301      	adds	r3, #1
   11542:	836b      	strh	r3, [r5, #26]
   11544:	f382 8811 	msr	BASEPRI, r2
   11548:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1154c:	2300      	movs	r3, #0
   1154e:	4622      	mov	r2, r4
   11550:	4631      	mov	r1, r6
   11552:	4628      	mov	r0, r5
   11554:	f7ff ff9c 	bl	11490 <notify_one>
   11558:	e7ee      	b.n	11538 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1155a:	2c06      	cmp	r4, #6
   1155c:	d814      	bhi.n	11588 <onoff_request+0x8a>
   1155e:	e8df f004 	tbb	[pc, r4]
   11562:	1304      	.short	0x1304
   11564:	1a041313 	.word	0x1a041313
   11568:	04          	.byte	0x04
   11569:	00          	.byte	0x00
	parent->next = child;
   1156a:	2300      	movs	r3, #0
   1156c:	6033      	str	r3, [r6, #0]
	return list->tail;
   1156e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   11570:	b93b      	cbnz	r3, 11582 <onoff_request+0x84>
	list->head = node;
   11572:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   11576:	b9ac      	cbnz	r4, 115a4 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   11578:	2102      	movs	r1, #2
   1157a:	4628      	mov	r0, r5
   1157c:	f7f9 f8a8 	bl	a6d0 <process_event>
   11580:	e7da      	b.n	11538 <onoff_request+0x3a>
	parent->next = child;
   11582:	601e      	str	r6, [r3, #0]
	list->tail = node;
   11584:	606e      	str	r6, [r5, #4]
}
   11586:	e7f6      	b.n	11576 <onoff_request+0x78>
   11588:	f382 8811 	msr	BASEPRI, r2
   1158c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   11590:	f06f 0404 	mvn.w	r4, #4
   11594:	e7d0      	b.n	11538 <onoff_request+0x3a>
   11596:	f382 8811 	msr	BASEPRI, r2
   1159a:	f3bf 8f6f 	isb	sy
   1159e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   115a2:	e7c9      	b.n	11538 <onoff_request+0x3a>
   115a4:	f382 8811 	msr	BASEPRI, r2
   115a8:	f3bf 8f6f 	isb	sy
		if (notify) {
   115ac:	e7c4      	b.n	11538 <onoff_request+0x3a>

000115ae <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   115ae:	4603      	mov	r3, r0
   115b0:	b140      	cbz	r0, 115c4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   115b2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   115b4:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   115b8:	2a02      	cmp	r2, #2
   115ba:	d006      	beq.n	115ca <sys_notify_validate+0x1c>
   115bc:	2a03      	cmp	r2, #3
   115be:	d004      	beq.n	115ca <sys_notify_validate+0x1c>
   115c0:	2a01      	cmp	r2, #1
   115c2:	d005      	beq.n	115d0 <sys_notify_validate+0x22>
   115c4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   115c8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   115ca:	681a      	ldr	r2, [r3, #0]
   115cc:	2a00      	cmp	r2, #0
   115ce:	d0f9      	beq.n	115c4 <sys_notify_validate+0x16>
		notify->result = 0;
   115d0:	2000      	movs	r0, #0
   115d2:	6098      	str	r0, [r3, #8]
   115d4:	4770      	bx	lr

000115d6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   115d6:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   115d8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   115da:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   115dc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   115e0:	2a02      	cmp	r2, #2
{
   115e2:	4603      	mov	r3, r0
	switch (method) {
   115e4:	f04f 0400 	mov.w	r4, #0
   115e8:	d007      	beq.n	115fa <sys_notify_finalize+0x24>
   115ea:	2a03      	cmp	r2, #3
   115ec:	d002      	beq.n	115f4 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   115ee:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   115f0:	2000      	movs	r0, #0
   115f2:	e001      	b.n	115f8 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   115f4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   115f6:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   115f8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   115fa:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   115fc:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   115fe:	2800      	cmp	r0, #0
   11600:	d0f6      	beq.n	115f0 <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11602:	f7ff fcb3 	bl	10f6c <z_impl_k_poll_signal_raise>
   11606:	e7f3      	b.n	115f0 <sys_notify_finalize+0x1a>

00011608 <encode_uint>:
{
   11608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1160c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   1160e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   11610:	2b6f      	cmp	r3, #111	; 0x6f
{
   11612:	4680      	mov	r8, r0
   11614:	460f      	mov	r7, r1
   11616:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   11618:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1161c:	d029      	beq.n	11672 <encode_uint+0x6a>
   1161e:	d824      	bhi.n	1166a <encode_uint+0x62>
		return 10;
   11620:	2b58      	cmp	r3, #88	; 0x58
   11622:	bf0c      	ite	eq
   11624:	2610      	moveq	r6, #16
   11626:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   11628:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1162c:	4632      	mov	r2, r6
   1162e:	2300      	movs	r3, #0
   11630:	4640      	mov	r0, r8
   11632:	4639      	mov	r1, r7
   11634:	f7ee fd52 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11638:	2a09      	cmp	r2, #9
   1163a:	b2d4      	uxtb	r4, r2
   1163c:	d81e      	bhi.n	1167c <encode_uint+0x74>
   1163e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   11640:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11642:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   11644:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11648:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1164c:	d301      	bcc.n	11652 <encode_uint+0x4a>
   1164e:	45d1      	cmp	r9, sl
   11650:	d811      	bhi.n	11676 <encode_uint+0x6e>
	if (conv->flag_hash) {
   11652:	782b      	ldrb	r3, [r5, #0]
   11654:	069b      	lsls	r3, r3, #26
   11656:	d505      	bpl.n	11664 <encode_uint+0x5c>
		if (radix == 8) {
   11658:	2e08      	cmp	r6, #8
   1165a:	d115      	bne.n	11688 <encode_uint+0x80>
			conv->altform_0 = true;
   1165c:	78ab      	ldrb	r3, [r5, #2]
   1165e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   11662:	70ab      	strb	r3, [r5, #2]
}
   11664:	4648      	mov	r0, r9
   11666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1166a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1166e:	2b70      	cmp	r3, #112	; 0x70
   11670:	e7d7      	b.n	11622 <encode_uint+0x1a>
	switch (specifier) {
   11672:	2608      	movs	r6, #8
   11674:	e7d8      	b.n	11628 <encode_uint+0x20>
		value /= radix;
   11676:	4680      	mov	r8, r0
   11678:	460f      	mov	r7, r1
   1167a:	e7d7      	b.n	1162c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1167c:	f1bb 0f19 	cmp.w	fp, #25
   11680:	bf94      	ite	ls
   11682:	3437      	addls	r4, #55	; 0x37
   11684:	3457      	addhi	r4, #87	; 0x57
   11686:	e7db      	b.n	11640 <encode_uint+0x38>
		} else if (radix == 16) {
   11688:	2e10      	cmp	r6, #16
   1168a:	d1eb      	bne.n	11664 <encode_uint+0x5c>
			conv->altform_0c = true;
   1168c:	78ab      	ldrb	r3, [r5, #2]
   1168e:	f043 0310 	orr.w	r3, r3, #16
   11692:	e7e6      	b.n	11662 <encode_uint+0x5a>

00011694 <outs>:
{
   11694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11698:	4607      	mov	r7, r0
   1169a:	4688      	mov	r8, r1
   1169c:	4615      	mov	r5, r2
   1169e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   116a0:	4614      	mov	r4, r2
   116a2:	42b4      	cmp	r4, r6
   116a4:	d305      	bcc.n	116b2 <outs+0x1e>
   116a6:	b10e      	cbz	r6, 116ac <outs+0x18>
	return (int)count;
   116a8:	1b60      	subs	r0, r4, r5
   116aa:	e008      	b.n	116be <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   116ac:	7823      	ldrb	r3, [r4, #0]
   116ae:	2b00      	cmp	r3, #0
   116b0:	d0fa      	beq.n	116a8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   116b2:	f814 0b01 	ldrb.w	r0, [r4], #1
   116b6:	4641      	mov	r1, r8
   116b8:	47b8      	blx	r7
		if (rc < 0) {
   116ba:	2800      	cmp	r0, #0
   116bc:	daf1      	bge.n	116a2 <outs+0xe>
}
   116be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000116c2 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   116c2:	b40f      	push	{r0, r1, r2, r3}
   116c4:	b507      	push	{r0, r1, r2, lr}
   116c6:	a904      	add	r1, sp, #16
   116c8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   116cc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   116ce:	f7f8 ffdb 	bl	a688 <vprintk>

	va_end(ap);
}
   116d2:	b003      	add	sp, #12
   116d4:	f85d eb04 	ldr.w	lr, [sp], #4
   116d8:	b004      	add	sp, #16
   116da:	4770      	bx	lr

000116dc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   116dc:	4770      	bx	lr

000116de <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   116de:	f000 bcc3 	b.w	12068 <z_fatal_error>

000116e2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   116e2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   116e4:	6800      	ldr	r0, [r0, #0]
   116e6:	f000 bcbf 	b.w	12068 <z_fatal_error>

000116ea <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   116ea:	2100      	movs	r1, #0
   116ec:	2001      	movs	r0, #1
   116ee:	f7ff bff6 	b.w	116de <z_arm_fatal_error>

000116f2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   116f2:	b508      	push	{r3, lr}
	handler();
   116f4:	f7f9 fe5e 	bl	b3b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   116f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   116fc:	f7f9 bf36 	b.w	b56c <z_arm_exc_exit>

00011700 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   11700:	3901      	subs	r1, #1
   11702:	4603      	mov	r3, r0
   11704:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   11708:	b90a      	cbnz	r2, 1170e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1170a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1170c:	4770      	bx	lr
		*d = *s;
   1170e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   11712:	e7f7      	b.n	11704 <strcpy+0x4>

00011714 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   11714:	4603      	mov	r3, r0
	size_t n = 0;
   11716:	2000      	movs	r0, #0

	while (*s != '\0') {
   11718:	5c1a      	ldrb	r2, [r3, r0]
   1171a:	b902      	cbnz	r2, 1171e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1171c:	4770      	bx	lr
		n++;
   1171e:	3001      	adds	r0, #1
   11720:	e7fa      	b.n	11718 <strlen+0x4>

00011722 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   11722:	4603      	mov	r3, r0
	size_t n = 0;
   11724:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   11726:	5c1a      	ldrb	r2, [r3, r0]
   11728:	b10a      	cbz	r2, 1172e <strnlen+0xc>
   1172a:	4288      	cmp	r0, r1
   1172c:	d100      	bne.n	11730 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1172e:	4770      	bx	lr
		n++;
   11730:	3001      	adds	r0, #1
   11732:	e7f8      	b.n	11726 <strnlen+0x4>

00011734 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   11734:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   11736:	b15a      	cbz	r2, 11750 <memcmp+0x1c>
   11738:	3901      	subs	r1, #1
   1173a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1173c:	f810 2b01 	ldrb.w	r2, [r0], #1
   11740:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   11744:	42a0      	cmp	r0, r4
   11746:	d001      	beq.n	1174c <memcmp+0x18>
   11748:	429a      	cmp	r2, r3
   1174a:	d0f7      	beq.n	1173c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1174c:	1ad0      	subs	r0, r2, r3
}
   1174e:	bd10      	pop	{r4, pc}
		return 0;
   11750:	4610      	mov	r0, r2
   11752:	e7fc      	b.n	1174e <memcmp+0x1a>

00011754 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   11754:	b510      	push	{r4, lr}
   11756:	1e43      	subs	r3, r0, #1
   11758:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1175a:	4291      	cmp	r1, r2
   1175c:	d100      	bne.n	11760 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1175e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   11760:	f811 4b01 	ldrb.w	r4, [r1], #1
   11764:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   11768:	e7f7      	b.n	1175a <memcpy+0x6>

0001176a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1176a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1176c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1176e:	4603      	mov	r3, r0
	while (n > 0) {
   11770:	4293      	cmp	r3, r2
   11772:	d100      	bne.n	11776 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   11774:	4770      	bx	lr
		*(d_byte++) = c_byte;
   11776:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1177a:	e7f9      	b.n	11770 <memset+0x6>

0001177c <_stdout_hook_default>:
}
   1177c:	f04f 30ff 	mov.w	r0, #4294967295
   11780:	4770      	bx	lr

00011782 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   11782:	2806      	cmp	r0, #6
   11784:	d108      	bne.n	11798 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   11786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1178a:	2201      	movs	r2, #1
   1178c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   11790:	f3bf 8f4f 	dsb	sy
        __WFE();
   11794:	bf20      	wfe
    while (true)
   11796:	e7fd      	b.n	11794 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   11798:	4770      	bx	lr

0001179a <pm_state_exit_post_ops>:
   1179a:	2300      	movs	r3, #0
   1179c:	f383 8811 	msr	BASEPRI, r3
   117a0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   117a4:	4770      	bx	lr

000117a6 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   117a6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   117a8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   117aa:	2106      	movs	r1, #6
{
   117ac:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   117ae:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   117b2:	f7fd f9c9 	bl	eb48 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   117b6:	b918      	cbnz	r0, 117c0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   117b8:	79a3      	ldrb	r3, [r4, #6]
   117ba:	f063 033f 	orn	r3, r3, #63	; 0x3f
   117be:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   117c0:	bd10      	pop	{r4, pc}

000117c2 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   117c2:	b510      	push	{r4, lr}
   117c4:	4604      	mov	r4, r0
   117c6:	2207      	movs	r2, #7
   117c8:	f7ff ffc4 	bl	11754 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   117cc:	7823      	ldrb	r3, [r4, #0]
   117ce:	f023 0302 	bic.w	r3, r3, #2
   117d2:	7023      	strb	r3, [r4, #0]
}
   117d4:	bd10      	pop	{r4, pc}

000117d6 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   117d6:	7800      	ldrb	r0, [r0, #0]
}
   117d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   117dc:	4770      	bx	lr

000117de <hci_vendor_event>:
}
   117de:	4770      	bx	lr

000117e0 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   117e0:	2101      	movs	r1, #1
   117e2:	300c      	adds	r0, #12
   117e4:	f000 b8a1 	b.w	1192a <net_buf_simple_pull_mem>

000117e8 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   117e8:	b430      	push	{r4, r5}
   117ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   117ee:	4604      	mov	r4, r0
   117f0:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   117f2:	429a      	cmp	r2, r3
   117f4:	d101      	bne.n	117fa <handle_event_common.isra.0+0x12>
}
   117f6:	bc30      	pop	{r4, r5}
   117f8:	4770      	bx	lr
		if (handler->event != event) {
   117fa:	4611      	mov	r1, r2
   117fc:	f811 5b08 	ldrb.w	r5, [r1], #8
   11800:	42a5      	cmp	r5, r4
   11802:	d106      	bne.n	11812 <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   11804:	8a01      	ldrh	r1, [r0, #16]
   11806:	7853      	ldrb	r3, [r2, #1]
   11808:	4299      	cmp	r1, r3
   1180a:	d3f4      	bcc.n	117f6 <handle_event_common.isra.0+0xe>
}
   1180c:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   1180e:	6853      	ldr	r3, [r2, #4]
   11810:	4718      	bx	r3
   11812:	460a      	mov	r2, r1
   11814:	e7ed      	b.n	117f2 <handle_event_common.isra.0+0xa>

00011816 <bt_addr_le_eq>:
{
   11816:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   11818:	2207      	movs	r2, #7
   1181a:	f7ff ff8b 	bl	11734 <memcmp>
}
   1181e:	fab0 f080 	clz	r0, r0
   11822:	0940      	lsrs	r0, r0, #5
   11824:	bd08      	pop	{r3, pc}

00011826 <bt_lookup_id_addr>:
	return addr;
   11826:	2800      	cmp	r0, #0
}
   11828:	bf0c      	ite	eq
   1182a:	4608      	moveq	r0, r1
   1182c:	2000      	movne	r0, #0
   1182e:	4770      	bx	lr

00011830 <bt_id_set_private_addr>:
{
   11830:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   11832:	b980      	cbnz	r0, 11856 <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   11834:	2106      	movs	r1, #6
   11836:	4668      	mov	r0, sp
   11838:	f7fd f986 	bl	eb48 <bt_rand>
	if (err) {
   1183c:	b940      	cbnz	r0, 11850 <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   1183e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   11842:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   11844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11848:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1184c:	f7fa fee6 	bl	c61c <set_random_address>
}
   11850:	b003      	add	sp, #12
   11852:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   11856:	f06f 0015 	mvn.w	r0, #21
   1185a:	e7f9      	b.n	11850 <bt_id_set_private_addr+0x20>

0001185c <bt_id_scan_random_addr_check>:
}
   1185c:	2001      	movs	r0, #1
   1185e:	4770      	bx	lr

00011860 <atomic_and>:
{
   11860:	b510      	push	{r4, lr}
   11862:	4603      	mov	r3, r0
}
   11864:	f3bf 8f5b 	dmb	ish
   11868:	e853 0f00 	ldrex	r0, [r3]
   1186c:	ea00 0201 	and.w	r2, r0, r1
   11870:	e843 2400 	strex	r4, r2, [r3]
   11874:	2c00      	cmp	r4, #0
   11876:	d1f7      	bne.n	11868 <atomic_and+0x8>
   11878:	f3bf 8f5b 	dmb	ish
   1187c:	bd10      	pop	{r4, pc}

0001187e <fixed_data_unref>:
}
   1187e:	4770      	bx	lr

00011880 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11880:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   11882:	6849      	ldr	r1, [r1, #4]
   11884:	6809      	ldr	r1, [r1, #0]
   11886:	f7fb ba43 	b.w	cd10 <net_buf_alloc_len>

0001188a <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1188a:	f7fe bc0d 	b.w	100a8 <z_impl_k_queue_get>

0001188e <net_buf_slist_put>:
	__asm__ volatile(
   1188e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11892:	f3ef 8211 	mrs	r2, BASEPRI
   11896:	f383 8812 	msr	BASEPRI_MAX, r3
   1189a:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1189e:	2300      	movs	r3, #0
   118a0:	600b      	str	r3, [r1, #0]
	return list->tail;
   118a2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   118a4:	b933      	cbnz	r3, 118b4 <net_buf_slist_put+0x26>
	list->head = node;
   118a6:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   118aa:	f382 8811 	msr	BASEPRI, r2
   118ae:	f3bf 8f6f 	isb	sy
}
   118b2:	4770      	bx	lr
	parent->next = child;
   118b4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   118b6:	6041      	str	r1, [r0, #4]
}
   118b8:	e7f7      	b.n	118aa <net_buf_slist_put+0x1c>

000118ba <net_buf_slist_get>:
{
   118ba:	b510      	push	{r4, lr}
   118bc:	4603      	mov	r3, r0
	__asm__ volatile(
   118be:	f04f 0240 	mov.w	r2, #64	; 0x40
   118c2:	f3ef 8111 	mrs	r1, BASEPRI
   118c6:	f382 8812 	msr	BASEPRI_MAX, r2
   118ca:	f3bf 8f6f 	isb	sy
	return list->head;
   118ce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   118d0:	b128      	cbz	r0, 118de <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   118d2:	685c      	ldr	r4, [r3, #4]
	return node->next;
   118d4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   118d6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   118d8:	42a0      	cmp	r0, r4
	list->tail = node;
   118da:	bf08      	it	eq
   118dc:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   118de:	f381 8811 	msr	BASEPRI, r1
   118e2:	f3bf 8f6f 	isb	sy
}
   118e6:	bd10      	pop	{r4, pc}

000118e8 <net_buf_put>:
	k_fifo_put(fifo, buf);
   118e8:	f000 bce7 	b.w	122ba <k_queue_append>

000118ec <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   118ec:	7a02      	ldrb	r2, [r0, #8]
   118ee:	3201      	adds	r2, #1
   118f0:	7202      	strb	r2, [r0, #8]
	return buf;
}
   118f2:	4770      	bx	lr

000118f4 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   118f4:	6883      	ldr	r3, [r0, #8]
   118f6:	440b      	add	r3, r1
   118f8:	6003      	str	r3, [r0, #0]
}
   118fa:	4770      	bx	lr

000118fc <net_buf_simple_add>:
	return buf->data + buf->len;
   118fc:	8883      	ldrh	r3, [r0, #4]
   118fe:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   11900:	4419      	add	r1, r3
   11902:	8081      	strh	r1, [r0, #4]
	return tail;
}
   11904:	18d0      	adds	r0, r2, r3
   11906:	4770      	bx	lr

00011908 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   11908:	b430      	push	{r4, r5}
   1190a:	8884      	ldrh	r4, [r0, #4]
   1190c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1190e:	18a3      	adds	r3, r4, r2
   11910:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   11912:	1928      	adds	r0, r5, r4
}
   11914:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   11916:	f7ff bf1d 	b.w	11754 <memcpy>

0001191a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1191a:	8882      	ldrh	r2, [r0, #4]
   1191c:	1a52      	subs	r2, r2, r1
{
   1191e:	4603      	mov	r3, r0
	buf->len -= len;
   11920:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   11922:	6800      	ldr	r0, [r0, #0]
   11924:	4408      	add	r0, r1
   11926:	6018      	str	r0, [r3, #0]
}
   11928:	4770      	bx	lr

0001192a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1192a:	4603      	mov	r3, r0
	void *data = buf->data;
   1192c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1192e:	889a      	ldrh	r2, [r3, #4]
   11930:	1a52      	subs	r2, r2, r1
	buf->data += len;
   11932:	4401      	add	r1, r0
	buf->len -= len;
   11934:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   11936:	6019      	str	r1, [r3, #0]

	return data;
}
   11938:	4770      	bx	lr

0001193a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1193a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1193c:	6803      	ldr	r3, [r0, #0]
   1193e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   11940:	2101      	movs	r1, #1
   11942:	f7ff ffea 	bl	1191a <net_buf_simple_pull>

	return val;
}
   11946:	4620      	mov	r0, r4
   11948:	bd10      	pop	{r4, pc}

0001194a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1194a:	6802      	ldr	r2, [r0, #0]
   1194c:	6880      	ldr	r0, [r0, #8]
}
   1194e:	1a10      	subs	r0, r2, r0
   11950:	4770      	bx	lr

00011952 <adc_context_on_timer_expired>:
{
   11952:	b410      	push	{r4}
   11954:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11956:	3808      	subs	r0, #8
   11958:	f3bf 8f5b 	dmb	ish
   1195c:	e850 2f00 	ldrex	r2, [r0]
   11960:	1c51      	adds	r1, r2, #1
   11962:	e840 1400 	strex	r4, r1, [r0]
   11966:	2c00      	cmp	r4, #0
   11968:	d1f8      	bne.n	1195c <adc_context_on_timer_expired+0xa>
   1196a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1196e:	b912      	cbnz	r2, 11976 <adc_context_on_timer_expired+0x24>
}
   11970:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   11972:	f7fb ba91 	b.w	ce98 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   11976:	f06f 020f 	mvn.w	r2, #15
}
   1197a:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   1197c:	669a      	str	r2, [r3, #104]	; 0x68
}
   1197e:	4770      	bx	lr

00011980 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11980:	6903      	ldr	r3, [r0, #16]
   11982:	b2c9      	uxtb	r1, r1
   11984:	220c      	movs	r2, #12
   11986:	fb01 3302 	mla	r3, r1, r2, r3
   1198a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1198c:	f000 0007 	and.w	r0, r0, #7
   11990:	4770      	bx	lr

00011992 <set_on_state>:
	__asm__ volatile(
   11992:	f04f 0340 	mov.w	r3, #64	; 0x40
   11996:	f3ef 8211 	mrs	r2, BASEPRI
   1199a:	f383 8812 	msr	BASEPRI_MAX, r3
   1199e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   119a2:	6803      	ldr	r3, [r0, #0]
   119a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   119a8:	f043 0302 	orr.w	r3, r3, #2
   119ac:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   119ae:	f382 8811 	msr	BASEPRI, r2
   119b2:	f3bf 8f6f 	isb	sy
}
   119b6:	4770      	bx	lr

000119b8 <stop>:
{
   119b8:	b570      	push	{r4, r5, r6, lr}
   119ba:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   119bc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   119be:	f04f 0440 	mov.w	r4, #64	; 0x40
   119c2:	f3ef 8511 	mrs	r5, BASEPRI
   119c6:	f384 8812 	msr	BASEPRI_MAX, r4
   119ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   119ce:	260c      	movs	r6, #12
   119d0:	fb06 3401 	mla	r4, r6, r1, r3
   119d4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   119d6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   119da:	d008      	beq.n	119ee <stop+0x36>
   119dc:	42a2      	cmp	r2, r4
   119de:	d006      	beq.n	119ee <stop+0x36>
	__asm__ volatile(
   119e0:	f385 8811 	msr	BASEPRI, r5
   119e4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   119e8:	f04f 30ff 	mov.w	r0, #4294967295
}
   119ec:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   119ee:	fb06 3301 	mla	r3, r6, r1, r3
   119f2:	2201      	movs	r2, #1
   119f4:	641a      	str	r2, [r3, #64]	; 0x40
   119f6:	f385 8811 	msr	BASEPRI, r5
   119fa:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   119fe:	6843      	ldr	r3, [r0, #4]
   11a00:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11a04:	685b      	ldr	r3, [r3, #4]
   11a06:	4798      	blx	r3
	return 0;
   11a08:	2000      	movs	r0, #0
   11a0a:	e7ef      	b.n	119ec <stop+0x34>

00011a0c <api_stop>:
	return stop(dev, subsys, CTX_API);
   11a0c:	2280      	movs	r2, #128	; 0x80
   11a0e:	f7ff bfd3 	b.w	119b8 <stop>

00011a12 <async_start>:
{
   11a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a14:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   11a16:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   11a18:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   11a1a:	f04f 0540 	mov.w	r5, #64	; 0x40
   11a1e:	f3ef 8611 	mrs	r6, BASEPRI
   11a22:	f385 8812 	msr	BASEPRI_MAX, r5
   11a26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11a2a:	250c      	movs	r5, #12
   11a2c:	fb05 4401 	mla	r4, r5, r1, r4
   11a30:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11a32:	f005 0c07 	and.w	ip, r5, #7
   11a36:	f1bc 0f01 	cmp.w	ip, #1
   11a3a:	d10c      	bne.n	11a56 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   11a3c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   11a3e:	f386 8811 	msr	BASEPRI, r6
   11a42:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   11a46:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   11a4a:	6843      	ldr	r3, [r0, #4]
   11a4c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   11a50:	4798      	blx	r3
	return 0;
   11a52:	2000      	movs	r0, #0
}
   11a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   11a56:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   11a5a:	42af      	cmp	r7, r5
   11a5c:	f386 8811 	msr	BASEPRI, r6
   11a60:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   11a64:	bf0c      	ite	eq
   11a66:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   11a6a:	f04f 30ff 	movne.w	r0, #4294967295
   11a6e:	e7f1      	b.n	11a54 <async_start+0x42>

00011a70 <api_start>:
{
   11a70:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   11a72:	2480      	movs	r4, #128	; 0x80
   11a74:	9400      	str	r4, [sp, #0]
   11a76:	f7ff ffcc 	bl	11a12 <async_start>
}
   11a7a:	b002      	add	sp, #8
   11a7c:	bd10      	pop	{r4, pc}

00011a7e <onoff_started_callback>:
{
   11a7e:	b410      	push	{r4}
	return &data->mgr[type];
   11a80:	6900      	ldr	r0, [r0, #16]
   11a82:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   11a84:	241c      	movs	r4, #28
   11a86:	fb03 0004 	mla	r0, r3, r4, r0
   11a8a:	2100      	movs	r1, #0
}
   11a8c:	bc10      	pop	{r4}
	notify(mgr, 0);
   11a8e:	4710      	bx	r2

00011a90 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11a90:	2000      	movs	r0, #0
   11a92:	f000 ba17 	b.w	11ec4 <nrfx_clock_stop>

00011a96 <blocking_start_callback>:
{
   11a96:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   11a98:	f7fe bb3a 	b.w	10110 <z_impl_k_sem_give>

00011a9c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   11a9c:	2000      	movs	r0, #0
   11a9e:	4770      	bx	lr

00011aa0 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   11aa0:	b538      	push	{r3, r4, r5, lr}
   11aa2:	460c      	mov	r4, r1
   11aa4:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   11aa6:	f7fa fd95 	bl	c5d4 <bt_is_ready>
   11aaa:	b128      	cbz	r0, 11ab8 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   11aac:	4629      	mov	r1, r5
   11aae:	4620      	mov	r0, r4
}
   11ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   11ab4:	f7fa bba4 	b.w	c200 <bt_hci_le_rand>
}
   11ab8:	f06f 000a 	mvn.w	r0, #10
   11abc:	bd38      	pop	{r3, r4, r5, pc}

00011abe <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11abe:	6843      	ldr	r3, [r0, #4]
   11ac0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   11ac2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   11ac6:	600b      	str	r3, [r1, #0]
}
   11ac8:	2000      	movs	r0, #0
   11aca:	4770      	bx	lr

00011acc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11acc:	6843      	ldr	r3, [r0, #4]
   11ace:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   11ad0:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   11ad4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   11ad8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   11adc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   11ae0:	2000      	movs	r0, #0
   11ae2:	4770      	bx	lr

00011ae4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11ae4:	6843      	ldr	r3, [r0, #4]
   11ae6:	685b      	ldr	r3, [r3, #4]
}
   11ae8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   11aea:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   11aee:	4770      	bx	lr

00011af0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11af0:	6843      	ldr	r3, [r0, #4]
   11af2:	685b      	ldr	r3, [r3, #4]
}
   11af4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   11af6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   11afa:	4770      	bx	lr

00011afc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11afc:	6843      	ldr	r3, [r0, #4]
   11afe:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11b00:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   11b04:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   11b08:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   11b0a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   11b0e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   11b12:	2000      	movs	r0, #0
   11b14:	4770      	bx	lr

00011b16 <gpio_nrfx_manage_callback>:
{
   11b16:	b510      	push	{r4, lr}
	return port->data;
   11b18:	6903      	ldr	r3, [r0, #16]
	return list->head;
   11b1a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11b1c:	b1f8      	cbz	r0, 11b5e <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11b1e:	4288      	cmp	r0, r1
   11b20:	d119      	bne.n	11b56 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   11b22:	689c      	ldr	r4, [r3, #8]
	return node->next;
   11b24:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   11b26:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   11b28:	42a1      	cmp	r1, r4
   11b2a:	d100      	bne.n	11b2e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   11b2c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11b2e:	2000      	movs	r0, #0
   11b30:	6008      	str	r0, [r1, #0]
	if (set) {
   11b32:	b12a      	cbz	r2, 11b40 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   11b34:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   11b36:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   11b38:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   11b3a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   11b3c:	b902      	cbnz	r2, 11b40 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   11b3e:	6099      	str	r1, [r3, #8]
	return 0;
   11b40:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11b42:	e010      	b.n	11b66 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11b44:	4281      	cmp	r1, r0
   11b46:	d106      	bne.n	11b56 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   11b48:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   11b4a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11b4c:	6898      	ldr	r0, [r3, #8]
   11b4e:	4281      	cmp	r1, r0
   11b50:	d1ed      	bne.n	11b2e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   11b52:	609c      	str	r4, [r3, #8]
}
   11b54:	e7eb      	b.n	11b2e <gpio_nrfx_manage_callback+0x18>
	return node->next;
   11b56:	4604      	mov	r4, r0
   11b58:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11b5a:	2800      	cmp	r0, #0
   11b5c:	d1f2      	bne.n	11b44 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   11b5e:	2a00      	cmp	r2, #0
   11b60:	d1e8      	bne.n	11b34 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   11b62:	f06f 0015 	mvn.w	r0, #21
}
   11b66:	bd10      	pop	{r4, pc}

00011b68 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   11b68:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
   11b6a:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   11b6c:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   11b6e:	d405      	bmi.n	11b7c <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   11b70:	f3c1 0242 	ubfx	r2, r1, #1, #3
   11b74:	2a01      	cmp	r2, #1
   11b76:	d004      	beq.n	11b82 <i2c_nrfx_twi_configure+0x1a>
   11b78:	2a02      	cmp	r2, #2
   11b7a:	d00a      	beq.n	11b92 <i2c_nrfx_twi_configure+0x2a>
   11b7c:	f06f 0015 	mvn.w	r0, #21
}
   11b80:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   11b82:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   11b84:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   11b88:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   11b8c:	6341      	str	r1, [r0, #52]	; 0x34
	return 0;
   11b8e:	2000      	movs	r0, #0
   11b90:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   11b92:	681b      	ldr	r3, [r3, #0]
   11b94:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   11b98:	e7f6      	b.n	11b88 <i2c_nrfx_twi_configure+0x20>

00011b9a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   11b9a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   11b9c:	6843      	ldr	r3, [r0, #4]
   11b9e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   11ba0:	7a05      	ldrb	r5, [r0, #8]
   11ba2:	6844      	ldr	r4, [r0, #4]
   11ba4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   11ba8:	42a3      	cmp	r3, r4
   11baa:	d302      	bcc.n	11bb2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   11bac:	f06f 0001 	mvn.w	r0, #1
}
   11bb0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   11bb2:	795c      	ldrb	r4, [r3, #5]
   11bb4:	428c      	cmp	r4, r1
   11bb6:	d001      	beq.n	11bbc <pinctrl_lookup_state+0x22>
		(*state)++;
   11bb8:	3308      	adds	r3, #8
   11bba:	e7f0      	b.n	11b9e <pinctrl_lookup_state+0x4>
			return 0;
   11bbc:	2000      	movs	r0, #0
   11bbe:	e7f7      	b.n	11bb0 <pinctrl_lookup_state+0x16>

00011bc0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   11bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11bc8:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   11bca:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11bce:	4281      	cmp	r1, r0
   11bd0:	d102      	bne.n	11bd8 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   11bd2:	2000      	movs	r0, #0
}
   11bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   11bd8:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   11bda:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   11bde:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   11be2:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   11be4:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   11be8:	bf08      	it	eq
   11bea:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   11bee:	2d19      	cmp	r5, #25
   11bf0:	d86a      	bhi.n	11cc8 <pinctrl_configure_pins+0x108>
   11bf2:	e8df f005 	tbb	[pc, r5]
   11bf6:	170d      	.short	0x170d
   11bf8:	2e221f1c 	.word	0x2e221f1c
   11bfc:	6969691f 	.word	0x6969691f
   11c00:	69553269 	.word	0x69553269
   11c04:	69696969 	.word	0x69696969
   11c08:	69696969 	.word	0x69696969
   11c0c:	66636058 	.word	0x66636058
			NRF_PSEL_UART(reg, TXD) = pin;
   11c10:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   11c14:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11c18:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   11c1c:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
   11c20:	2501      	movs	r5, #1
   11c22:	e002      	b.n	11c2a <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
   11c24:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11c28:	2500      	movs	r5, #0
   11c2a:	46ac      	mov	ip, r5
   11c2c:	e01c      	b.n	11c68 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
   11c2e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   11c32:	e7ef      	b.n	11c14 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
   11c34:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   11c38:	e7f6      	b.n	11c28 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   11c3a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11c3e:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
   11c40:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11c44:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   11c48:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
   11c4c:	f04f 0c01 	mov.w	ip, #1
   11c50:	e00a      	b.n	11c68 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   11c52:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   11c56:	2501      	movs	r5, #1
   11c58:	e7f2      	b.n	11c40 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   11c5a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   11c5e:	2c00      	cmp	r4, #0
   11c60:	d1e2      	bne.n	11c28 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11c62:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11c64:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
   11c66:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   11c68:	f850 eb04 	ldr.w	lr, [r0], #4
   11c6c:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11c70:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   11c74:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   11c78:	ea4f 2404 	mov.w	r4, r4, lsl #8
   11c7c:	bf18      	it	ne
   11c7e:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
   11c82:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   11c86:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
   11c8a:	bf18      	it	ne
   11c8c:	2501      	movne	r5, #1
   11c8e:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
   11c92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   11c96:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   11c9a:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11c9e:	e796      	b.n	11bce <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   11ca0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   11ca4:	e7db      	b.n	11c5e <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   11ca6:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   11caa:	6805      	ldr	r5, [r0, #0]
   11cac:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   11cb0:	2d00      	cmp	r5, #0
   11cb2:	d0d0      	beq.n	11c56 <pinctrl_configure_pins+0x96>
   11cb4:	e7ae      	b.n	11c14 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   11cb6:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   11cba:	e7f6      	b.n	11caa <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   11cbc:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   11cc0:	e7f3      	b.n	11caa <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   11cc2:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   11cc6:	e7f0      	b.n	11caa <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
   11cc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11ccc:	e782      	b.n	11bd4 <pinctrl_configure_pins+0x14>

00011cce <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   11cce:	6902      	ldr	r2, [r0, #16]
{
   11cd0:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   11cd2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   11cd6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   11cda:	2000      	movs	r0, #0
   11cdc:	4770      	bx	lr

00011cde <uarte_nrfx_err_check>:
	return config->uarte_regs;
   11cde:	6843      	ldr	r3, [r0, #4]
   11ce0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   11ce2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   11ce6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   11cea:	4770      	bx	lr

00011cec <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   11cec:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   11cee:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   11cf0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11cf2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   11cf6:	b150      	cbz	r0, 11d0e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   11cf8:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11cfa:	2000      	movs	r0, #0
   11cfc:	7812      	ldrb	r2, [r2, #0]
   11cfe:	700a      	strb	r2, [r1, #0]
   11d00:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   11d04:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d08:	2201      	movs	r2, #1
   11d0a:	601a      	str	r2, [r3, #0]
	return 0;
   11d0c:	4770      	bx	lr
		return -1;
   11d0e:	f04f 30ff 	mov.w	r0, #4294967295
}
   11d12:	4770      	bx	lr

00011d14 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   11d14:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   11d16:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11d18:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   11d1c:	b940      	cbnz	r0, 11d30 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   11d1e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   11d20:	079b      	lsls	r3, r3, #30
   11d22:	d406      	bmi.n	11d32 <is_tx_ready.isra.0+0x1e>
   11d24:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   11d28:	3800      	subs	r0, #0
   11d2a:	bf18      	it	ne
   11d2c:	2001      	movne	r0, #1
   11d2e:	4770      	bx	lr
   11d30:	2001      	movs	r0, #1
}
   11d32:	4770      	bx	lr

00011d34 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   11d34:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   11d36:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   11d38:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   11d3c:	05c9      	lsls	r1, r1, #23
   11d3e:	d518      	bpl.n	11d72 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11d40:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   11d44:	b1a9      	cbz	r1, 11d72 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   11d46:	f04f 0040 	mov.w	r0, #64	; 0x40
   11d4a:	f3ef 8111 	mrs	r1, BASEPRI
   11d4e:	f380 8812 	msr	BASEPRI_MAX, r0
   11d52:	f3bf 8f6f 	isb	sy
   11d56:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   11d5a:	b130      	cbz	r0, 11d6a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d5c:	2000      	movs	r0, #0
   11d5e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   11d62:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d66:	2001      	movs	r0, #1
   11d68:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   11d6a:	f381 8811 	msr	BASEPRI, r1
   11d6e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11d72:	6852      	ldr	r2, [r2, #4]
   11d74:	06d2      	lsls	r2, r2, #27
   11d76:	d515      	bpl.n	11da4 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   11d78:	f04f 0140 	mov.w	r1, #64	; 0x40
   11d7c:	f3ef 8211 	mrs	r2, BASEPRI
   11d80:	f381 8812 	msr	BASEPRI_MAX, r1
   11d84:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11d88:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   11d8c:	b111      	cbz	r1, 11d94 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11d8e:	2100      	movs	r1, #0
   11d90:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   11d94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   11d98:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   11d9c:	f382 8811 	msr	BASEPRI, r2
   11da0:	f3bf 8f6f 	isb	sy
}
   11da4:	4770      	bx	lr

00011da6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   11da6:	4770      	bx	lr

00011da8 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   11da8:	f100 0350 	add.w	r3, r0, #80	; 0x50
   11dac:	009b      	lsls	r3, r3, #2
   11dae:	b29b      	uxth	r3, r3
   11db0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11db4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   11db8:	2200      	movs	r2, #0
   11dba:	601a      	str	r2, [r3, #0]
   11dbc:	681b      	ldr	r3, [r3, #0]
}
   11dbe:	4770      	bx	lr

00011dc0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   11dc0:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   11dc2:	2000      	movs	r0, #0
   11dc4:	f7f9 fea2 	bl	bb0c <sys_arch_reboot>

00011dc8 <sdc_assertion_handler>:
	k_oops();
   11dc8:	4040      	eors	r0, r0
   11dca:	f380 8811 	msr	BASEPRI, r0
   11dce:	f04f 0003 	mov.w	r0, #3
   11dd2:	df02      	svc	2
}
   11dd4:	4770      	bx	lr

00011dd6 <hci_driver_close>:
{
   11dd6:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   11dd8:	f04f 30ff 	mov.w	r0, #4294967295
   11ddc:	f04f 31ff 	mov.w	r1, #4294967295
   11de0:	f7fc faa8 	bl	e334 <multithreading_lock_acquire>
	if (err) {
   11de4:	4604      	mov	r4, r0
   11de6:	b920      	cbnz	r0, 11df2 <hci_driver_close+0x1c>
	err = sdc_disable();
   11de8:	f7ee fa50 	bl	28c <sdc_disable>
	if (err) {
   11dec:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   11dee:	f7fc faa9 	bl	e344 <multithreading_lock_release>
}
   11df2:	4620      	mov	r0, r4
   11df4:	bd10      	pop	{r4, pc}

00011df6 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   11df6:	f7fc bb37 	b.w	e468 <rand_prio_low_vector_get>

00011dfa <hci_driver_send>:
{
   11dfa:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   11dfc:	8a03      	ldrh	r3, [r0, #16]
{
   11dfe:	4605      	mov	r5, r0
	if (!buf->len) {
   11e00:	b1bb      	cbz	r3, 11e32 <hci_driver_send+0x38>
	switch (type) {
   11e02:	7e03      	ldrb	r3, [r0, #24]
   11e04:	b9ab      	cbnz	r3, 11e32 <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   11e06:	f04f 30ff 	mov.w	r0, #4294967295
   11e0a:	f04f 31ff 	mov.w	r1, #4294967295
   11e0e:	f7fc fa91 	bl	e334 <multithreading_lock_acquire>
	if (!errcode) {
   11e12:	4604      	mov	r4, r0
   11e14:	b958      	cbnz	r0, 11e2e <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   11e16:	68e8      	ldr	r0, [r5, #12]
   11e18:	f7fc fba2 	bl	e560 <hci_internal_cmd_put>
   11e1c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   11e1e:	f7fc fa91 	bl	e344 <multithreading_lock_release>
	if (errcode) {
   11e22:	b924      	cbnz	r4, 11e2e <hci_driver_send+0x34>
	receive_signal_raise();
   11e24:	f7fc fb34 	bl	e490 <receive_signal_raise>
		net_buf_unref(buf);
   11e28:	4628      	mov	r0, r5
   11e2a:	f7fb f803 	bl	ce34 <net_buf_unref>
}
   11e2e:	4620      	mov	r0, r4
   11e30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11e32:	f06f 0415 	mvn.w	r4, #21
   11e36:	e7fa      	b.n	11e2e <hci_driver_send+0x34>

00011e38 <receive_work_handler>:
	hci_driver_receive_process();
   11e38:	f7fc bb3e 	b.w	e4b8 <hci_driver_receive_process>

00011e3c <m_assert_handler>:
	k_oops();
   11e3c:	4040      	eors	r0, r0
   11e3e:	f380 8811 	msr	BASEPRI, r0
   11e42:	f04f 0003 	mov.w	r0, #3
   11e46:	df02      	svc	2
}
   11e48:	4770      	bx	lr

00011e4a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   11e4a:	4668      	mov	r0, sp
   11e4c:	f020 0107 	bic.w	r1, r0, #7
   11e50:	468d      	mov	sp, r1
   11e52:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   11e54:	f7f4 ff3a 	bl	6ccc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   11e58:	f7f9 fa9e 	bl	b398 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   11e5c:	f7f9 fb86 	bl	b56c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   11e60:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11e64:	4685      	mov	sp, r0
   11e66:	4770      	bx	lr

00011e68 <mpsl_low_prio_work_handler>:
{
   11e68:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   11e6a:	f04f 31ff 	mov.w	r1, #4294967295
   11e6e:	f04f 30ff 	mov.w	r0, #4294967295
   11e72:	f7fc fa5f 	bl	e334 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   11e76:	f7f8 f892 	bl	9f9e <mpsl_low_priority_process>
}
   11e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   11e7e:	f7fc ba61 	b.w	e344 <multithreading_lock_release>

00011e82 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   11e82:	4668      	mov	r0, sp
   11e84:	f020 0107 	bic.w	r1, r0, #7
   11e88:	468d      	mov	sp, r1
   11e8a:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   11e8c:	f7f4 fed4 	bl	6c38 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   11e90:	f7f9 fa82 	bl	b398 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   11e94:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11e98:	4685      	mov	sp, r0
   11e9a:	4770      	bx	lr

00011e9c <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   11e9c:	4668      	mov	r0, sp
   11e9e:	f020 0107 	bic.w	r1, r0, #7
   11ea2:	468d      	mov	sp, r1
   11ea4:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   11ea6:	f7f2 fb9f 	bl	45e8 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   11eaa:	f7f9 fa75 	bl	b398 <_arch_isr_direct_pm>
   11eae:	f7f9 fb5d 	bl	b56c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   11eb2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11eb6:	4685      	mov	sp, r0
   11eb8:	4770      	bx	lr

00011eba <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   11eba:	b508      	push	{r3, lr}

	mpsl_fem_init();
   11ebc:	f7f8 fa45 	bl	a34a <mpsl_fem_init>

	return 0;
}
   11ec0:	2000      	movs	r0, #0
   11ec2:	bd08      	pop	{r3, pc}

00011ec4 <nrfx_clock_stop>:
	switch (domain) {
   11ec4:	2801      	cmp	r0, #1
   11ec6:	d101      	bne.n	11ecc <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   11ec8:	f7f5 bdae 	b.w	7a28 <mpsl_clock_hfclk_release>
}
   11ecc:	4770      	bx	lr

00011ece <nrfx_clock_enable>:
}
   11ece:	4770      	bx	lr

00011ed0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   11ed0:	f7f5 bbb4 	b.w	763c <MPSL_IRQ_CLOCK_Handler>

00011ed4 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   11ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11ed8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   11edc:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   11ede:	bf04      	itt	eq
   11ee0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   11ee4:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   11ee8:	1f83      	subs	r3, r0, #6
   11eea:	4258      	negs	r0, r3
   11eec:	4158      	adcs	r0, r3
   11eee:	4770      	bx	lr

00011ef0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11ef0:	4700      	bx	r0

00011ef2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   11ef2:	f000 bb98 	b.w	12626 <z_impl_k_busy_wait>

00011ef6 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   11ef6:	f000 001f 	and.w	r0, r0, #31
   11efa:	0080      	lsls	r0, r0, #2
   11efc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   11f00:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   11f04:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   11f08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   11f0c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   11f10:	4770      	bx	lr

00011f12 <twi_transfer>:
{
   11f12:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f14:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   11f18:	b12b      	cbz	r3, 11f26 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f1a:	2300      	movs	r3, #0
   11f1c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   11f20:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   11f24:	2301      	movs	r3, #1
    if (p_cb->error)
   11f26:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   11f2a:	b322      	cbz	r2, 11f76 <twi_transfer+0x64>
   11f2c:	2200      	movs	r2, #0
   11f2e:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   11f32:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
   11f36:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
   11f3a:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
   11f3e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   11f42:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
   11f46:	2b00      	cmp	r3, #0
   11f48:	d079      	beq.n	1203e <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   11f4a:	2200      	movs	r2, #0
   11f4c:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
   11f50:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   11f54:	2a00      	cmp	r2, #0
   11f56:	d137      	bne.n	11fc8 <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   11f58:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   11f5a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   11f5c:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   11f5e:	bf1f      	itttt	ne
   11f60:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   11f62:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   11f66:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
   11f6a:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   11f6c:	f083 0301 	eor.w	r3, r3, #1
   11f70:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
   11f74:	e028      	b.n	11fc8 <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f76:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   11f7a:	b114      	cbz	r4, 11f82 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f7c:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   11f80:	e00e      	b.n	11fa0 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f82:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   11f86:	b36a      	cbz	r2, 11fe4 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f88:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
   11f8c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   11f90:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   11f92:	3201      	adds	r2, #1
   11f94:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f96:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   11f9a:	b145      	cbz	r5, 11fae <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f9c:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
   11fa0:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11fa4:	2201      	movs	r2, #1
   11fa6:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
   11fa8:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
   11fac:	e7cb      	b.n	11f46 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   11fae:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   11fb0:	42a2      	cmp	r2, r4
   11fb2:	d204      	bcs.n	11fbe <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   11fb4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
   11fb6:	5ca2      	ldrb	r2, [r4, r2]
   11fb8:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   11fbc:	e7c3      	b.n	11f46 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
   11fbe:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
   11fc2:	b11a      	cbz	r2, 11fcc <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11fc4:	2301      	movs	r3, #1
   11fc6:	61c3      	str	r3, [r0, #28]
                    return false;
   11fc8:	2000      	movs	r0, #0
}
   11fca:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   11fcc:	6a0a      	ldr	r2, [r1, #32]
   11fce:	f012 0f40 	tst.w	r2, #64	; 0x40
   11fd2:	f04f 0201 	mov.w	r2, #1
   11fd6:	d003      	beq.n	11fe0 <twi_transfer+0xce>
   11fd8:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   11fda:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   11fde:	e7f3      	b.n	11fc8 <twi_transfer+0xb6>
   11fe0:	6142      	str	r2, [r0, #20]
   11fe2:	e7b0      	b.n	11f46 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11fe4:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   11fe8:	2c00      	cmp	r4, #0
   11fea:	d0ac      	beq.n	11f46 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11fec:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   11ff0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ff4:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   11ff8:	2c00      	cmp	r4, #0
   11ffa:	d1bf      	bne.n	11f7c <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   11ffc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   11ffe:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   12000:	42a2      	cmp	r2, r4
   12002:	d2a0      	bcs.n	11f46 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   12004:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   12006:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
   1200a:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
   1200c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1200e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   12010:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   12012:	1e65      	subs	r5, r4, #1
   12014:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
   12016:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   12018:	d108      	bne.n	1202c <twi_transfer+0x11a>
   1201a:	6a0a      	ldr	r2, [r1, #32]
   1201c:	0654      	lsls	r4, r2, #25
   1201e:	d402      	bmi.n	12026 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
   12020:	2202      	movs	r2, #2
   12022:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12026:	2201      	movs	r2, #1
   12028:	6202      	str	r2, [r0, #32]
   1202a:	e78c      	b.n	11f46 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1202c:	42a2      	cmp	r2, r4
   1202e:	d1fa      	bne.n	12026 <twi_transfer+0x114>
   12030:	6a0a      	ldr	r2, [r1, #32]
   12032:	0652      	lsls	r2, r2, #25
   12034:	d587      	bpl.n	11f46 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   12036:	2302      	movs	r3, #2
   12038:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   1203c:	e7c4      	b.n	11fc8 <twi_transfer+0xb6>
    return true;
   1203e:	2001      	movs	r0, #1
   12040:	e7c3      	b.n	11fca <twi_transfer+0xb8>

00012042 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   12042:	f7fd bd6d 	b.w	fb20 <_DoInit>

00012046 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   12046:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   12048:	f7ff fffb 	bl	12042 <SEGGER_RTT_Init>

	return 0;
}
   1204c:	2000      	movs	r0, #0
   1204e:	bd08      	pop	{r3, pc}

00012050 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   12050:	4770      	bx	lr

00012052 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   12052:	b140      	cbz	r0, 12066 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   12054:	68c3      	ldr	r3, [r0, #12]
   12056:	7858      	ldrb	r0, [r3, #1]
   12058:	f010 0001 	ands.w	r0, r0, #1
   1205c:	bf1e      	ittt	ne
   1205e:	7818      	ldrbne	r0, [r3, #0]
   12060:	fab0 f080 	clzne	r0, r0
   12064:	0940      	lsrne	r0, r0, #5
}
   12066:	4770      	bx	lr

00012068 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1206a:	4605      	mov	r5, r0
   1206c:	460e      	mov	r6, r1
	__asm__ volatile(
   1206e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12072:	f3ef 8711 	mrs	r7, BASEPRI
   12076:	f383 8812 	msr	BASEPRI_MAX, r3
   1207a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1207e:	f7fe fca5 	bl	109cc <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   12082:	4631      	mov	r1, r6
   12084:	4604      	mov	r4, r0
   12086:	4628      	mov	r0, r5
   12088:	f7ff fe9a 	bl	11dc0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1208c:	f387 8811 	msr	BASEPRI, r7
   12090:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   12094:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   12096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1209a:	f7f9 bc3f 	b.w	b91c <z_impl_k_thread_abort>

0001209e <z_early_memset>:
	(void) memset(dst, c, n);
   1209e:	f7ff bb64 	b.w	1176a <memset>

000120a2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   120a2:	f7ff bb57 	b.w	11754 <memcpy>

000120a6 <k_heap_init>:
{
   120a6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   120a8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   120ac:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   120b0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   120b2:	f7ff b989 	b.w	113c8 <sys_heap_init>

000120b6 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   120b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ba:	b085      	sub	sp, #20
   120bc:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   120c0:	4607      	mov	r7, r0
   120c2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   120c4:	4650      	mov	r0, sl
   120c6:	4621      	mov	r1, r4
{
   120c8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   120ca:	f000 fab0 	bl	1262e <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   120ce:	f1b4 3fff 	cmp.w	r4, #4294967295
   120d2:	bf08      	it	eq
   120d4:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   120d8:	4605      	mov	r5, r0
   120da:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   120dc:	bf04      	itt	eq
   120de:	f04f 35ff 	moveq.w	r5, #4294967295
   120e2:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   120e6:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   120ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   120ee:	f3ef 8411 	mrs	r4, BASEPRI
   120f2:	f383 8812 	msr	BASEPRI_MAX, r3
   120f6:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   120fa:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   120fe:	464a      	mov	r2, r9
   12100:	4641      	mov	r1, r8
   12102:	4638      	mov	r0, r7
   12104:	f7ff f8f9 	bl	112fa <sys_heap_aligned_alloc>
   12108:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1210a:	f7fe fe17 	bl	10d3c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1210e:	9b03      	ldr	r3, [sp, #12]
   12110:	b13b      	cbz	r3, 12122 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   12112:	f384 8811 	msr	BASEPRI, r4
   12116:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1211a:	4618      	mov	r0, r3
   1211c:	b005      	add	sp, #20
   1211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   12122:	1a28      	subs	r0, r5, r0
   12124:	eb66 0101 	sbc.w	r1, r6, r1
   12128:	2801      	cmp	r0, #1
   1212a:	f171 0200 	sbcs.w	r2, r1, #0
   1212e:	dbf0      	blt.n	12112 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12130:	e9cd 0100 	strd	r0, r1, [sp]
   12134:	465a      	mov	r2, fp
   12136:	4621      	mov	r1, r4
   12138:	4650      	mov	r0, sl
   1213a:	f7fe faad 	bl	10698 <z_pend_curr>
	__asm__ volatile(
   1213e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12142:	f3ef 8411 	mrs	r4, BASEPRI
   12146:	f383 8812 	msr	BASEPRI_MAX, r3
   1214a:	f3bf 8f6f 	isb	sy
	return k;
   1214e:	e7d6      	b.n	120fe <k_heap_aligned_alloc+0x48>

00012150 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   12150:	b538      	push	{r3, r4, r5, lr}
   12152:	4604      	mov	r4, r0
   12154:	f04f 0340 	mov.w	r3, #64	; 0x40
   12158:	f3ef 8511 	mrs	r5, BASEPRI
   1215c:	f383 8812 	msr	BASEPRI_MAX, r3
   12160:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   12164:	f7ff f891 	bl	1128a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   12168:	f104 000c 	add.w	r0, r4, #12
   1216c:	f000 f9fc 	bl	12568 <z_unpend_all>
   12170:	b130      	cbz	r0, 12180 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   12172:	4629      	mov	r1, r5
   12174:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   12178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1217c:	f7fe baf0 	b.w	10760 <z_reschedule>
	__asm__ volatile(
   12180:	f385 8811 	msr	BASEPRI, r5
   12184:	f3bf 8f6f 	isb	sy
}
   12188:	bd38      	pop	{r3, r4, r5, pc}

0001218a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1218a:	f3ef 8005 	mrs	r0, IPSR
}
   1218e:	3800      	subs	r0, #0
   12190:	bf18      	it	ne
   12192:	2001      	movne	r0, #1
   12194:	4770      	bx	lr

00012196 <z_impl_k_thread_name_set>:
}
   12196:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1219a:	4770      	bx	lr

0001219c <z_impl_k_thread_start>:
	z_sched_start(thread);
   1219c:	f7fe baf2 	b.w	10784 <z_sched_start>

000121a0 <z_pm_save_idle_exit>:
{
   121a0:	b508      	push	{r3, lr}
	pm_system_resume();
   121a2:	f7f8 ff85 	bl	b0b0 <pm_system_resume>
}
   121a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   121aa:	f7ff bdfc 	b.w	11da6 <sys_clock_idle_exit>

000121ae <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   121ae:	f990 300e 	ldrsb.w	r3, [r0, #14]
   121b2:	428b      	cmp	r3, r1
   121b4:	d001      	beq.n	121ba <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   121b6:	f7fe ba8d 	b.w	106d4 <z_set_prio>
}
   121ba:	2000      	movs	r0, #0
   121bc:	4770      	bx	lr

000121be <queue_insert>:
{
   121be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121c2:	4699      	mov	r9, r3
   121c4:	4604      	mov	r4, r0
   121c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   121ca:	460d      	mov	r5, r1
   121cc:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   121ce:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   121d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   121d6:	f3ef 8711 	mrs	r7, BASEPRI
   121da:	f382 8812 	msr	BASEPRI_MAX, r2
   121de:	f3bf 8f6f 	isb	sy
	if (is_append) {
   121e2:	b103      	cbz	r3, 121e6 <queue_insert+0x28>
	return list->tail;
   121e4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   121e6:	4630      	mov	r0, r6
   121e8:	f000 f974 	bl	124d4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   121ec:	b158      	cbz	r0, 12206 <queue_insert+0x48>
   121ee:	2300      	movs	r3, #0
   121f0:	67c3      	str	r3, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   121f2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   121f6:	f000 f90e 	bl	12416 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   121fa:	4630      	mov	r0, r6
   121fc:	4639      	mov	r1, r7
   121fe:	f7fe faaf 	bl	10760 <z_reschedule>
		return 0;
   12202:	2000      	movs	r0, #0
   12204:	e00c      	b.n	12220 <queue_insert+0x62>
	if (alloc) {
   12206:	f1b9 0f00 	cmp.w	r9, #0
   1220a:	d01b      	beq.n	12244 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1220c:	2108      	movs	r1, #8
   1220e:	f7fe fed5 	bl	10fbc <z_thread_aligned_alloc>
		if (anode == NULL) {
   12212:	b938      	cbnz	r0, 12224 <queue_insert+0x66>
	__asm__ volatile(
   12214:	f387 8811 	msr	BASEPRI, r7
   12218:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1221c:	f06f 000b 	mvn.w	r0, #11
}
   12220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   12224:	2201      	movs	r2, #1
		anode->data = data;
   12226:	f8c0 8004 	str.w	r8, [r0, #4]
   1222a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1222c:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1222e:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   12232:	b95d      	cbnz	r5, 1224c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   12234:	6822      	ldr	r2, [r4, #0]
   12236:	430a      	orrs	r2, r1
   12238:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1223a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1223c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1223e:	b96a      	cbnz	r2, 1225c <queue_insert+0x9e>
	list->tail = node;
   12240:	6060      	str	r0, [r4, #4]
}
   12242:	e00b      	b.n	1225c <queue_insert+0x9e>
	node->next_and_flags = flags;
   12244:	f8c8 9000 	str.w	r9, [r8]
}
   12248:	4640      	mov	r0, r8
   1224a:	e7ef      	b.n	1222c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1224c:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1224e:	2a03      	cmp	r2, #3
   12250:	d810      	bhi.n	12274 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   12252:	6001      	str	r1, [r0, #0]
	return list->tail;
   12254:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   12256:	b939      	cbnz	r1, 12268 <queue_insert+0xaa>
	list->head = node;
   12258:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1225c:	2104      	movs	r1, #4
   1225e:	f104 0010 	add.w	r0, r4, #16
   12262:	f000 fb54 	bl	1290e <z_handle_obj_poll_events>
   12266:	e7c8      	b.n	121fa <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12268:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1226a:	f002 0203 	and.w	r2, r2, #3
   1226e:	4302      	orrs	r2, r0
   12270:	600a      	str	r2, [r1, #0]
   12272:	e7e5      	b.n	12240 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12274:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   12278:	430a      	orrs	r2, r1
   1227a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1227c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1227e:	f002 0203 	and.w	r2, r2, #3
   12282:	ea40 0302 	orr.w	r3, r0, r2
   12286:	602b      	str	r3, [r5, #0]
}
   12288:	e7e8      	b.n	1225c <queue_insert+0x9e>

0001228a <z_queue_node_peek>:
{
   1228a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1228c:	4604      	mov	r4, r0
   1228e:	b130      	cbz	r0, 1229e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12290:	6802      	ldr	r2, [r0, #0]
   12292:	0793      	lsls	r3, r2, #30
   12294:	d003      	beq.n	1229e <z_queue_node_peek+0x14>
		ret = anode->data;
   12296:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   12298:	b109      	cbz	r1, 1229e <z_queue_node_peek+0x14>
			k_free(anode);
   1229a:	f000 fb46 	bl	1292a <k_free>
}
   1229e:	4620      	mov	r0, r4
   122a0:	bd10      	pop	{r4, pc}

000122a2 <z_impl_k_queue_init>:
	list->head = NULL;
   122a2:	2300      	movs	r3, #0
	list->tail = NULL;
   122a4:	e9c0 3300 	strd	r3, r3, [r0]
   122a8:	f100 0308 	add.w	r3, r0, #8
   122ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   122b0:	f100 0310 	add.w	r3, r0, #16
   122b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   122b8:	4770      	bx	lr

000122ba <k_queue_append>:
{
   122ba:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   122bc:	2301      	movs	r3, #1
   122be:	9300      	str	r3, [sp, #0]
   122c0:	2300      	movs	r3, #0
{
   122c2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   122c4:	4619      	mov	r1, r3
   122c6:	f7ff ff7a 	bl	121be <queue_insert>
}
   122ca:	b003      	add	sp, #12
   122cc:	f85d fb04 	ldr.w	pc, [sp], #4

000122d0 <k_queue_prepend>:
{
   122d0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   122d2:	2300      	movs	r3, #0
{
   122d4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   122d6:	9300      	str	r3, [sp, #0]
   122d8:	4619      	mov	r1, r3
   122da:	f7ff ff70 	bl	121be <queue_insert>
}
   122de:	b003      	add	sp, #12
   122e0:	f85d fb04 	ldr.w	pc, [sp], #4

000122e4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   122e4:	b15a      	cbz	r2, 122fe <z_impl_k_sem_init+0x1a>
   122e6:	428a      	cmp	r2, r1
   122e8:	d309      	bcc.n	122fe <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   122ea:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   122ee:	e9c0 1202 	strd	r1, r2, [r0, #8]
   122f2:	e9c0 0000 	strd	r0, r0, [r0]
   122f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   122fa:	2000      	movs	r0, #0
   122fc:	4770      	bx	lr
		return -EINVAL;
   122fe:	f06f 0015 	mvn.w	r0, #21
}
   12302:	4770      	bx	lr

00012304 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   12304:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   12306:	2301      	movs	r3, #1
   12308:	408b      	lsls	r3, r1
   1230a:	ea22 0303 	bic.w	r3, r2, r3
   1230e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   12310:	fa22 f001 	lsr.w	r0, r2, r1
}
   12314:	f000 0001 	and.w	r0, r0, #1
   12318:	4770      	bx	lr

0001231a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1231a:	b120      	cbz	r0, 12326 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1231c:	2200      	movs	r2, #0
   1231e:	4611      	mov	r1, r2
   12320:	3088      	adds	r0, #136	; 0x88
   12322:	f000 b931 	b.w	12588 <z_sched_wake>
}
   12326:	4770      	bx	lr

00012328 <k_work_init>:
{
   12328:	b538      	push	{r3, r4, r5, lr}
   1232a:	4604      	mov	r4, r0
   1232c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1232e:	2210      	movs	r2, #16
   12330:	2100      	movs	r1, #0
   12332:	f7ff fa1a 	bl	1176a <memset>
   12336:	6065      	str	r5, [r4, #4]
}
   12338:	bd38      	pop	{r3, r4, r5, pc}

0001233a <z_work_submit_to_queue>:
{
   1233a:	b513      	push	{r0, r1, r4, lr}
   1233c:	9001      	str	r0, [sp, #4]
   1233e:	4608      	mov	r0, r1
	__asm__ volatile(
   12340:	f04f 0340 	mov.w	r3, #64	; 0x40
   12344:	f3ef 8411 	mrs	r4, BASEPRI
   12348:	f383 8812 	msr	BASEPRI_MAX, r3
   1234c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   12350:	a901      	add	r1, sp, #4
   12352:	f7fd ffc7 	bl	102e4 <submit_to_queue_locked>
	__asm__ volatile(
   12356:	f384 8811 	msr	BASEPRI, r4
   1235a:	f3bf 8f6f 	isb	sy
}
   1235e:	b002      	add	sp, #8
   12360:	bd10      	pop	{r4, pc}

00012362 <k_work_submit_to_queue>:
{
   12362:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   12364:	f7ff ffe9 	bl	1233a <z_work_submit_to_queue>
	if (ret > 0) {
   12368:	1e04      	subs	r4, r0, #0
   1236a:	dd09      	ble.n	12380 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1236c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12370:	f3ef 8011 	mrs	r0, BASEPRI
   12374:	f383 8812 	msr	BASEPRI_MAX, r3
   12378:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1237c:	f000 f8de 	bl	1253c <z_reschedule_irqlock>
}
   12380:	4620      	mov	r0, r4
   12382:	bd10      	pop	{r4, pc}

00012384 <k_work_queue_init>:
{
   12384:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   12386:	22a0      	movs	r2, #160	; 0xa0
   12388:	2100      	movs	r1, #0
   1238a:	f7ff f9ee 	bl	1176a <memset>
}
   1238e:	bd08      	pop	{r3, pc}

00012390 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   12390:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12394:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12396:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12398:	2300      	movs	r3, #0
	node->prev = NULL;
   1239a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1239e:	4770      	bx	lr

000123a0 <unpend_thread_no_timeout>:
{
   123a0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   123a2:	f7ff fff5 	bl	12390 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   123a6:	7b43      	ldrb	r3, [r0, #13]
   123a8:	f023 0302 	bic.w	r3, r3, #2
   123ac:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   123ae:	2300      	movs	r3, #0
   123b0:	6083      	str	r3, [r0, #8]
}
   123b2:	bd08      	pop	{r3, pc}

000123b4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   123b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   123b8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   123bc:	4283      	cmp	r3, r0
		return b2 - b1;
   123be:	bf14      	ite	ne
   123c0:	1ac0      	subne	r0, r0, r3
	return 0;
   123c2:	2000      	moveq	r0, #0
}
   123c4:	4770      	bx	lr

000123c6 <add_to_waitq_locked>:
{
   123c6:	b538      	push	{r3, r4, r5, lr}
   123c8:	4604      	mov	r4, r0
   123ca:	460d      	mov	r5, r1
	unready_thread(thread);
   123cc:	f7fe f904 	bl	105d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   123d0:	7b63      	ldrb	r3, [r4, #13]
   123d2:	f043 0302 	orr.w	r3, r3, #2
   123d6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   123d8:	b1e5      	cbz	r5, 12414 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   123da:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   123dc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   123de:	429d      	cmp	r5, r3
   123e0:	d109      	bne.n	123f6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   123e2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   123e4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   123e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   123ea:	606c      	str	r4, [r5, #4]
}
   123ec:	e012      	b.n	12414 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   123ee:	686a      	ldr	r2, [r5, #4]
   123f0:	4293      	cmp	r3, r2
   123f2:	d0f6      	beq.n	123e2 <add_to_waitq_locked+0x1c>
   123f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   123f6:	2b00      	cmp	r3, #0
   123f8:	d0f3      	beq.n	123e2 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   123fa:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   123fe:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   12402:	428a      	cmp	r2, r1
   12404:	d0f3      	beq.n	123ee <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   12406:	4291      	cmp	r1, r2
   12408:	ddf1      	ble.n	123ee <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1240a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1240c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   12410:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12412:	605c      	str	r4, [r3, #4]
}
   12414:	bd38      	pop	{r3, r4, r5, pc}

00012416 <z_ready_thread>:
{
   12416:	b510      	push	{r4, lr}
   12418:	f04f 0340 	mov.w	r3, #64	; 0x40
   1241c:	f3ef 8411 	mrs	r4, BASEPRI
   12420:	f383 8812 	msr	BASEPRI_MAX, r3
   12424:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   12428:	f7fe f8a2 	bl	10570 <ready_thread>
	__asm__ volatile(
   1242c:	f384 8811 	msr	BASEPRI, r4
   12430:	f3bf 8f6f 	isb	sy
}
   12434:	bd10      	pop	{r4, pc}

00012436 <z_unpend_thread_no_timeout>:
{
   12436:	b508      	push	{r3, lr}
	__asm__ volatile(
   12438:	f04f 0240 	mov.w	r2, #64	; 0x40
   1243c:	f3ef 8111 	mrs	r1, BASEPRI
   12440:	f382 8812 	msr	BASEPRI_MAX, r2
   12444:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   12448:	6883      	ldr	r3, [r0, #8]
   1244a:	b10b      	cbz	r3, 12450 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1244c:	f7ff ffa8 	bl	123a0 <unpend_thread_no_timeout>
	__asm__ volatile(
   12450:	f381 8811 	msr	BASEPRI, r1
   12454:	f3bf 8f6f 	isb	sy
}
   12458:	bd08      	pop	{r3, pc}

0001245a <z_sched_wake_thread>:
{
   1245a:	b538      	push	{r3, r4, r5, lr}
   1245c:	4604      	mov	r4, r0
	__asm__ volatile(
   1245e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12462:	f3ef 8511 	mrs	r5, BASEPRI
   12466:	f383 8812 	msr	BASEPRI_MAX, r3
   1246a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1246e:	7b43      	ldrb	r3, [r0, #13]
   12470:	f013 0f28 	tst.w	r3, #40	; 0x28
   12474:	d10b      	bne.n	1248e <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   12476:	6883      	ldr	r3, [r0, #8]
   12478:	b10b      	cbz	r3, 1247e <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1247a:	f7ff ff91 	bl	123a0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1247e:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   12480:	b951      	cbnz	r1, 12498 <z_sched_wake_thread+0x3e>
   12482:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12486:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   12488:	4620      	mov	r0, r4
   1248a:	f7fe f871 	bl	10570 <ready_thread>
	__asm__ volatile(
   1248e:	f385 8811 	msr	BASEPRI, r5
   12492:	f3bf 8f6f 	isb	sy
}
   12496:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   12498:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1249c:	e7f3      	b.n	12486 <z_sched_wake_thread+0x2c>

0001249e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1249e:	2101      	movs	r1, #1
   124a0:	3818      	subs	r0, #24
   124a2:	f7ff bfda 	b.w	1245a <z_sched_wake_thread>

000124a6 <z_unpend1_no_timeout>:
{
   124a6:	b508      	push	{r3, lr}
   124a8:	4603      	mov	r3, r0
	__asm__ volatile(
   124aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   124ae:	f3ef 8111 	mrs	r1, BASEPRI
   124b2:	f382 8812 	msr	BASEPRI_MAX, r2
   124b6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   124ba:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   124bc:	4283      	cmp	r3, r0
   124be:	d007      	beq.n	124d0 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   124c0:	b108      	cbz	r0, 124c6 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   124c2:	f7ff ff6d 	bl	123a0 <unpend_thread_no_timeout>
	__asm__ volatile(
   124c6:	f381 8811 	msr	BASEPRI, r1
   124ca:	f3bf 8f6f 	isb	sy
}
   124ce:	bd08      	pop	{r3, pc}
   124d0:	2000      	movs	r0, #0
   124d2:	e7f8      	b.n	124c6 <z_unpend1_no_timeout+0x20>

000124d4 <z_unpend_first_thread>:
{
   124d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   124d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   124da:	f3ef 8511 	mrs	r5, BASEPRI
   124de:	f383 8812 	msr	BASEPRI_MAX, r3
   124e2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   124e6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   124e8:	42a0      	cmp	r0, r4
   124ea:	d00d      	beq.n	12508 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   124ec:	b134      	cbz	r4, 124fc <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   124ee:	4620      	mov	r0, r4
   124f0:	f7ff ff56 	bl	123a0 <unpend_thread_no_timeout>
   124f4:	f104 0018 	add.w	r0, r4, #24
   124f8:	f000 f869 	bl	125ce <z_abort_timeout>
	__asm__ volatile(
   124fc:	f385 8811 	msr	BASEPRI, r5
   12500:	f3bf 8f6f 	isb	sy
}
   12504:	4620      	mov	r0, r4
   12506:	bd38      	pop	{r3, r4, r5, pc}
   12508:	2400      	movs	r4, #0
   1250a:	e7f7      	b.n	124fc <z_unpend_first_thread+0x28>

0001250c <z_unpend_thread>:
{
   1250c:	b510      	push	{r4, lr}
   1250e:	4601      	mov	r1, r0
	__asm__ volatile(
   12510:	f04f 0340 	mov.w	r3, #64	; 0x40
   12514:	f3ef 8411 	mrs	r4, BASEPRI
   12518:	f383 8812 	msr	BASEPRI_MAX, r3
   1251c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   12520:	6883      	ldr	r3, [r0, #8]
   12522:	b10b      	cbz	r3, 12528 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   12524:	f7ff ff3c 	bl	123a0 <unpend_thread_no_timeout>
	__asm__ volatile(
   12528:	f384 8811 	msr	BASEPRI, r4
   1252c:	f3bf 8f6f 	isb	sy
}
   12530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12534:	f101 0018 	add.w	r0, r1, #24
   12538:	f000 b849 	b.w	125ce <z_abort_timeout>

0001253c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1253c:	4603      	mov	r3, r0
   1253e:	b920      	cbnz	r0, 1254a <z_reschedule_irqlock+0xe>
   12540:	f3ef 8205 	mrs	r2, IPSR
   12544:	b90a      	cbnz	r2, 1254a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   12546:	f7f8 bf55 	b.w	b3f4 <arch_swap>
   1254a:	f383 8811 	msr	BASEPRI, r3
   1254e:	f3bf 8f6f 	isb	sy
}
   12552:	4770      	bx	lr

00012554 <z_reschedule_unlocked>:
	__asm__ volatile(
   12554:	f04f 0340 	mov.w	r3, #64	; 0x40
   12558:	f3ef 8011 	mrs	r0, BASEPRI
   1255c:	f383 8812 	msr	BASEPRI_MAX, r3
   12560:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   12564:	f7ff bfea 	b.w	1253c <z_reschedule_irqlock>

00012568 <z_unpend_all>:
{
   12568:	b538      	push	{r3, r4, r5, lr}
   1256a:	4605      	mov	r5, r0
	int need_sched = 0;
   1256c:	2000      	movs	r0, #0
	return list->head == list;
   1256e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12570:	42a5      	cmp	r5, r4
   12572:	d000      	beq.n	12576 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   12574:	b904      	cbnz	r4, 12578 <z_unpend_all+0x10>
}
   12576:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   12578:	4620      	mov	r0, r4
   1257a:	f7ff ffc7 	bl	1250c <z_unpend_thread>
		z_ready_thread(thread);
   1257e:	4620      	mov	r0, r4
   12580:	f7ff ff49 	bl	12416 <z_ready_thread>
		need_sched = 1;
   12584:	2001      	movs	r0, #1
   12586:	e7f2      	b.n	1256e <z_unpend_all+0x6>

00012588 <z_sched_wake>:
{
   12588:	b538      	push	{r3, r4, r5, lr}
   1258a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1258e:	f3ef 8511 	mrs	r5, BASEPRI
   12592:	f383 8812 	msr	BASEPRI_MAX, r3
   12596:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1259a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1259c:	42a0      	cmp	r0, r4
   1259e:	d012      	beq.n	125c6 <z_sched_wake+0x3e>
		if (thread != NULL) {
   125a0:	b19c      	cbz	r4, 125ca <z_sched_wake+0x42>
   125a2:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   125a4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   125a6:	4620      	mov	r0, r4
   125a8:	f7ff fefa 	bl	123a0 <unpend_thread_no_timeout>
   125ac:	f104 0018 	add.w	r0, r4, #24
   125b0:	f000 f80d 	bl	125ce <z_abort_timeout>
			ready_thread(thread);
   125b4:	4620      	mov	r0, r4
   125b6:	f7fd ffdb 	bl	10570 <ready_thread>
			ret = true;
   125ba:	2001      	movs	r0, #1
	__asm__ volatile(
   125bc:	f385 8811 	msr	BASEPRI, r5
   125c0:	f3bf 8f6f 	isb	sy
}
   125c4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   125c6:	2000      	movs	r0, #0
   125c8:	e7f8      	b.n	125bc <z_sched_wake+0x34>
   125ca:	4620      	mov	r0, r4
   125cc:	e7f6      	b.n	125bc <z_sched_wake+0x34>

000125ce <z_abort_timeout>:
{
   125ce:	b510      	push	{r4, lr}
	__asm__ volatile(
   125d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   125d4:	f3ef 8411 	mrs	r4, BASEPRI
   125d8:	f382 8812 	msr	BASEPRI_MAX, r2
   125dc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   125e0:	6803      	ldr	r3, [r0, #0]
   125e2:	b13b      	cbz	r3, 125f4 <z_abort_timeout+0x26>
			remove_timeout(to);
   125e4:	f7fe faae 	bl	10b44 <remove_timeout>
			ret = 0;
   125e8:	2000      	movs	r0, #0
	__asm__ volatile(
   125ea:	f384 8811 	msr	BASEPRI, r4
   125ee:	f3bf 8f6f 	isb	sy
}
   125f2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   125f4:	f06f 0015 	mvn.w	r0, #21
   125f8:	e7f7      	b.n	125ea <z_abort_timeout+0x1c>

000125fa <z_get_next_timeout_expiry>:
{
   125fa:	b510      	push	{r4, lr}
	__asm__ volatile(
   125fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   12600:	f3ef 8411 	mrs	r4, BASEPRI
   12604:	f383 8812 	msr	BASEPRI_MAX, r3
   12608:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1260c:	f7fe fa7a 	bl	10b04 <next_timeout>
	__asm__ volatile(
   12610:	f384 8811 	msr	BASEPRI, r4
   12614:	f3bf 8f6f 	isb	sy
}
   12618:	bd10      	pop	{r4, pc}

0001261a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1261a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1261c:	f7fe fb8e 	bl	10d3c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   12620:	bd08      	pop	{r3, pc}

00012622 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   12622:	f7fe bb8b 	b.w	10d3c <sys_clock_tick_get>

00012626 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   12626:	b108      	cbz	r0, 1262c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   12628:	f7f9 ba86 	b.w	bb38 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1262c:	4770      	bx	lr

0001262e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1262e:	f1b1 3fff 	cmp.w	r1, #4294967295
   12632:	bf08      	it	eq
   12634:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   12638:	b538      	push	{r3, r4, r5, lr}
   1263a:	460c      	mov	r4, r1
   1263c:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1263e:	d014      	beq.n	1266a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12640:	4308      	orrs	r0, r1
   12642:	d103      	bne.n	1264c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   12644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   12648:	f7fe bb78 	b.w	10d3c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1264c:	f06f 0001 	mvn.w	r0, #1
   12650:	1b40      	subs	r0, r0, r5
   12652:	f04f 33ff 	mov.w	r3, #4294967295
   12656:	eb63 0101 	sbc.w	r1, r3, r1
   1265a:	2900      	cmp	r1, #0
   1265c:	da04      	bge.n	12668 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1265e:	f7fe fb6d 	bl	10d3c <sys_clock_tick_get>
   12662:	1940      	adds	r0, r0, r5
   12664:	eb41 0104 	adc.w	r1, r1, r4
}
   12668:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1266a:	f04f 30ff 	mov.w	r0, #4294967295
   1266e:	4601      	mov	r1, r0
   12670:	e7fa      	b.n	12668 <sys_clock_timeout_end_calc+0x3a>

00012672 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   12672:	b510      	push	{r4, lr}
   12674:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   12676:	f7ff ffaa 	bl	125ce <z_abort_timeout>

	if (inactive) {
   1267a:	b9b0      	cbnz	r0, 126aa <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1267c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1267e:	b10b      	cbz	r3, 12684 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   12680:	4620      	mov	r0, r4
   12682:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   12684:	f104 0018 	add.w	r0, r4, #24
   12688:	f7ff ff0d 	bl	124a6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1268c:	b168      	cbz	r0, 126aa <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1268e:	f7ff fec2 	bl	12416 <z_ready_thread>
	__asm__ volatile(
   12692:	f04f 0340 	mov.w	r3, #64	; 0x40
   12696:	f3ef 8011 	mrs	r0, BASEPRI
   1269a:	f383 8812 	msr	BASEPRI_MAX, r3
   1269e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   126a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   126a6:	f7ff bf49 	b.w	1253c <z_reschedule_irqlock>
   126aa:	bd10      	pop	{r4, pc}

000126ac <add_event>:
{
   126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126ae:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   126b0:	e9d0 1300 	ldrd	r1, r3, [r0]
   126b4:	4288      	cmp	r0, r1
   126b6:	4604      	mov	r4, r0
   126b8:	d105      	bne.n	126c6 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   126ba:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   126bc:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   126c0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   126c2:	6065      	str	r5, [r4, #4]
   126c4:	e01d      	b.n	12702 <add_event+0x56>
	if ((pending == NULL) ||
   126c6:	2b00      	cmp	r3, #0
   126c8:	d0f7      	beq.n	126ba <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   126ca:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   126cc:	b100      	cbz	r0, 126d0 <add_event+0x24>
   126ce:	3860      	subs	r0, #96	; 0x60
   126d0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   126d4:	4639      	mov	r1, r7
   126d6:	f7ff fe6d 	bl	123b4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   126da:	2800      	cmp	r0, #0
   126dc:	dced      	bgt.n	126ba <add_event+0xe>
	return list->head == list;
   126de:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   126e0:	42b4      	cmp	r4, r6
   126e2:	d0ea      	beq.n	126ba <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   126e4:	2e00      	cmp	r6, #0
   126e6:	d0e8      	beq.n	126ba <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   126e8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   126ea:	b101      	cbz	r1, 126ee <add_event+0x42>
   126ec:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   126ee:	4638      	mov	r0, r7
   126f0:	f7ff fe60 	bl	123b4 <z_sched_prio_cmp>
   126f4:	2800      	cmp	r0, #0
   126f6:	dd05      	ble.n	12704 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   126f8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   126fa:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   126fe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   12700:	6075      	str	r5, [r6, #4]
}
   12702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   12704:	6863      	ldr	r3, [r4, #4]
   12706:	429e      	cmp	r6, r3
   12708:	d0d7      	beq.n	126ba <add_event+0xe>
   1270a:	6836      	ldr	r6, [r6, #0]
   1270c:	e7ea      	b.n	126e4 <add_event+0x38>

0001270e <register_events>:
{
   1270e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   12712:	2500      	movs	r5, #0
{
   12714:	468b      	mov	fp, r1
   12716:	4614      	mov	r4, r2
   12718:	461f      	mov	r7, r3
   1271a:	4682      	mov	sl, r0
	int events_registered = 0;
   1271c:	462e      	mov	r6, r5
	event->poller = NULL;
   1271e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   12720:	455d      	cmp	r5, fp
   12722:	db02      	blt.n	1272a <register_events+0x1c>
}
   12724:	4630      	mov	r0, r6
   12726:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1272a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1272e:	f3ef 8911 	mrs	r9, BASEPRI
   12732:	f383 8812 	msr	BASEPRI_MAX, r3
   12736:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1273a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1273e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12742:	3b01      	subs	r3, #1
   12744:	2b07      	cmp	r3, #7
   12746:	d80f      	bhi.n	12768 <register_events+0x5a>
   12748:	e8df f003 	tbb	[pc, r3]
   1274c:	0a0e041e 	.word	0x0a0e041e
   12750:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   12754:	f8da 3010 	ldr.w	r3, [sl, #16]
   12758:	689b      	ldr	r3, [r3, #8]
   1275a:	b12b      	cbz	r3, 12768 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1275c:	2302      	movs	r3, #2
   1275e:	e020      	b.n	127a2 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   12760:	f8da 3010 	ldr.w	r3, [sl, #16]
   12764:	681b      	ldr	r3, [r3, #0]
   12766:	bb8b      	cbnz	r3, 127cc <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   12768:	bb47      	cbnz	r7, 127bc <register_events+0xae>
   1276a:	7823      	ldrb	r3, [r4, #0]
   1276c:	b333      	cbz	r3, 127bc <register_events+0xae>
	switch (event->type) {
   1276e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   12772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12776:	3b01      	subs	r3, #1
   12778:	2b07      	cmp	r3, #7
   1277a:	d830      	bhi.n	127de <register_events+0xd0>
   1277c:	e8df f003 	tbb	[pc, r3]
   12780:	282f2833 	.word	0x282f2833
   12784:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   12788:	f8da 3010 	ldr.w	r3, [sl, #16]
   1278c:	689b      	ldr	r3, [r3, #8]
   1278e:	2b00      	cmp	r3, #0
   12790:	d0ea      	beq.n	12768 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   12792:	2301      	movs	r3, #1
   12794:	e005      	b.n	127a2 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   12796:	f8da 3010 	ldr.w	r3, [sl, #16]
   1279a:	6a1b      	ldr	r3, [r3, #32]
   1279c:	2b00      	cmp	r3, #0
   1279e:	d0e3      	beq.n	12768 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   127a0:	2310      	movs	r3, #16
	event->state |= state;
   127a2:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   127a6:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   127aa:	f3c2 3186 	ubfx	r1, r2, #14, #7
   127ae:	430b      	orrs	r3, r1
   127b0:	f363 3294 	bfi	r2, r3, #14, #7
   127b4:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   127b8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   127bc:	f389 8811 	msr	BASEPRI, r9
   127c0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   127c4:	3501      	adds	r5, #1
   127c6:	f10a 0a14 	add.w	sl, sl, #20
   127ca:	e7a9      	b.n	12720 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   127cc:	2304      	movs	r3, #4
   127ce:	e7e8      	b.n	127a2 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   127d0:	f8da 0010 	ldr.w	r0, [sl, #16]
   127d4:	4622      	mov	r2, r4
   127d6:	4651      	mov	r1, sl
   127d8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   127da:	f7ff ff67 	bl	126ac <add_event>
	event->poller = poller;
   127de:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   127e2:	3601      	adds	r6, #1
   127e4:	e7ea      	b.n	127bc <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   127e6:	f8da 0010 	ldr.w	r0, [sl, #16]
   127ea:	4622      	mov	r2, r4
   127ec:	4651      	mov	r1, sl
   127ee:	e7f4      	b.n	127da <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   127f0:	f8da 0010 	ldr.w	r0, [sl, #16]
   127f4:	4622      	mov	r2, r4
   127f6:	4651      	mov	r1, sl
   127f8:	3024      	adds	r0, #36	; 0x24
   127fa:	e7ee      	b.n	127da <register_events+0xcc>

000127fc <signal_poll_event>:
{
   127fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   12800:	6884      	ldr	r4, [r0, #8]
{
   12802:	4605      	mov	r5, r0
   12804:	460e      	mov	r6, r1
	if (poller != NULL) {
   12806:	b144      	cbz	r4, 1281a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   12808:	7863      	ldrb	r3, [r4, #1]
   1280a:	2b01      	cmp	r3, #1
   1280c:	d12e      	bne.n	1286c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1280e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   12812:	f013 0302 	ands.w	r3, r3, #2
   12816:	d10a      	bne.n	1282e <signal_poll_event+0x32>
		poller->is_polling = false;
   12818:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1281a:	68eb      	ldr	r3, [r5, #12]
   1281c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   12820:	4316      	orrs	r6, r2
	event->poller = NULL;
   12822:	2000      	movs	r0, #0
	event->state |= state;
   12824:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   12828:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1282a:	60eb      	str	r3, [r5, #12]
	return retcode;
   1282c:	e03e      	b.n	128ac <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1282e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   12832:	f1b3 3fff 	cmp.w	r3, #4294967295
   12836:	bf08      	it	eq
   12838:	f112 0f02 	cmneq.w	r2, #2
   1283c:	d032      	beq.n	128a4 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1283e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   12842:	4640      	mov	r0, r8
   12844:	f7ff fe62 	bl	1250c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   12848:	2e08      	cmp	r6, #8
   1284a:	bf0c      	ite	eq
   1284c:	f06f 0303 	mvneq.w	r3, #3
   12850:	2300      	movne	r3, #0
   12852:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   12854:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   12858:	06db      	lsls	r3, r3, #27
   1285a:	d109      	bne.n	12870 <signal_poll_event+0x74>
   1285c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   12860:	b937      	cbnz	r7, 12870 <signal_poll_event+0x74>
	z_ready_thread(thread);
   12862:	4640      	mov	r0, r8
   12864:	f7ff fdd7 	bl	12416 <z_ready_thread>
		poller->is_polling = false;
   12868:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1286a:	e7d6      	b.n	1281a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1286c:	2b02      	cmp	r3, #2
   1286e:	d001      	beq.n	12874 <signal_poll_event+0x78>
		poller->is_polling = false;
   12870:	2300      	movs	r3, #0
   12872:	e7d1      	b.n	12818 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   12874:	7823      	ldrb	r3, [r4, #0]
   12876:	2b00      	cmp	r3, #0
   12878:	d0cf      	beq.n	1281a <signal_poll_event+0x1e>
   1287a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1287e:	2f00      	cmp	r7, #0
   12880:	d0f2      	beq.n	12868 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   12882:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   12886:	f1a4 0914 	sub.w	r9, r4, #20
   1288a:	f104 0014 	add.w	r0, r4, #20
   1288e:	f7ff fe9e 	bl	125ce <z_abort_timeout>
		twork->poll_result = 0;
   12892:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   12896:	4649      	mov	r1, r9
   12898:	4638      	mov	r0, r7
   1289a:	f7ff fd4e 	bl	1233a <z_work_submit_to_queue>
		poller->is_polling = false;
   1289e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   128a2:	e7ba      	b.n	1281a <signal_poll_event+0x1e>
		poller->is_polling = false;
   128a4:	2300      	movs	r3, #0
   128a6:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   128a8:	f06f 000a 	mvn.w	r0, #10
}
   128ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000128b0 <clear_event_registrations>:
	while (num_events--) {
   128b0:	2314      	movs	r3, #20
{
   128b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   128b4:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   128b8:	2400      	movs	r4, #0
	switch (event->type) {
   128ba:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   128be:	b901      	cbnz	r1, 128c2 <clear_event_registrations+0x12>
}
   128c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   128c2:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   128c6:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   128ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   128ce:	2b08      	cmp	r3, #8
   128d0:	f1a0 0714 	sub.w	r7, r0, #20
   128d4:	d80c      	bhi.n	128f0 <clear_event_registrations+0x40>
   128d6:	fa26 f303 	lsr.w	r3, r6, r3
   128da:	07db      	lsls	r3, r3, #31
   128dc:	d508      	bpl.n	128f0 <clear_event_registrations+0x40>
	return node->next != NULL;
   128de:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   128e2:	b12b      	cbz	r3, 128f0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   128e4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   128e8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   128ea:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   128ec:	e940 4405 	strd	r4, r4, [r0, #-20]
   128f0:	f382 8811 	msr	BASEPRI, r2
   128f4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   128f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   128fc:	f3ef 8211 	mrs	r2, BASEPRI
   12900:	f383 8812 	msr	BASEPRI_MAX, r3
   12904:	f3bf 8f6f 	isb	sy
   12908:	3901      	subs	r1, #1
   1290a:	4638      	mov	r0, r7
   1290c:	e7d7      	b.n	128be <clear_event_registrations+0xe>

0001290e <z_handle_obj_poll_events>:
{
   1290e:	4603      	mov	r3, r0
	return list->head == list;
   12910:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   12912:	4283      	cmp	r3, r0
   12914:	d008      	beq.n	12928 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   12916:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1291a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1291c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1291e:	2300      	movs	r3, #0
	node->prev = NULL;
   12920:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   12924:	f7ff bf6a 	b.w	127fc <signal_poll_event>
}
   12928:	4770      	bx	lr

0001292a <k_free>:
	if (ptr != NULL) {
   1292a:	b120      	cbz	r0, 12936 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1292c:	1f01      	subs	r1, r0, #4
   1292e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   12932:	f7ff bc0d 	b.w	12150 <k_heap_free>
}
   12936:	4770      	bx	lr

00012938 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   12938:	4770      	bx	lr
	...
