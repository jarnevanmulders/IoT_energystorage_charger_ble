
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	80 4a 00 20 09 de 00 00 41 6c 01 00 c1 dd 00 00     .J. ....Al......
	while (ad->len > 1) {
  10:	c1 dd 00 00 c1 dd 00 00 c1 dd 00 00 00 00 00 00     ................
	...
			LOG_WRN("malformed advertising data %u / %u",
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  2c:	35 c9 00 00 c1 dd 00 00 00 00 00 00 dd c8 00 00     5...............
		data.data_len = len - 1;
		data.data = ad->data;

		if (!func(&data, user_data)) {
  3c:	c1 dd 00 00                                         ....

00000040 <_irq_vector_table>:
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  40:	0d ca 00 00 ed 83 01 00 0d ca 00 00 0d ca 00 00     ................
			LOG_WRN("malformed advertising data %u / %u",
  50:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
  60:	b5 83 01 00 0d ca 00 00 0d ca 00 00 d3 83 01 00     ................
  70:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
  80:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
  90:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
  a0:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
  b0:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  c0:	0d ca 00 00 0d ca 00 00 0d ca 00 00 0d ca 00 00     ................
  d0:	0d ca 00 00 0d ca 00 00 0d ca 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f007 fb84 	bl	7808 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop
     110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     112:	4c14      	ldr	r4, [pc, #80]	; (164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>)
     114:	7a20      	ldrb	r0, [r4, #8]
     116:	f88d 0001 	strb.w	r0, [sp, #1]
     11a:	79e0      	ldrb	r0, [r4, #7]
     11c:	f88d 0000 	strb.w	r0, [sp]
     120:	79a0      	ldrb	r0, [r4, #6]
     122:	f8ad 0004 	strh.w	r0, [sp, #4]
     126:	7960      	ldrb	r0, [r4, #5]
     128:	f8ad 0002 	strh.w	r0, [sp, #2]
     12c:	4668      	mov	r0, sp
     12e:	f002 fbe1 	bl	28f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     132:	b108      	cbz	r0, 138 <__aeabi_idiv0+0x2c>
     134:	21ad      	movs	r1, #173	; 0xad
     136:	e010      	b.n	15a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x10>
     138:	68e0      	ldr	r0, [r4, #12]
     13a:	9002      	str	r0, [sp, #8]
     13c:	a802      	add	r0, sp, #8
     13e:	f002 fbef 	bl	2920 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     142:	b108      	cbz	r0, 148 <CONFIG_IDLE_STACK_SIZE+0x8>
     144:	21b1      	movs	r1, #177	; 0xb1
     146:	e008      	b.n	15a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x10>
     148:	4807      	ldr	r0, [pc, #28]	; (168 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1e>)
     14a:	6800      	ldr	r0, [r0, #0]
     14c:	9003      	str	r0, [sp, #12]
     14e:	a803      	add	r0, sp, #12
     150:	f009 fac7 	bl	96e2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     154:	2800      	cmp	r0, #0
     156:	d003      	beq.n	160 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x16>
     158:	21b5      	movs	r1, #181	; 0xb5
     15a:	2003      	movs	r0, #3
     15c:	f000 f8e4 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     160:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     162:	0000      	.short	0x0000
     164:	20000a08 	.word	0x20000a08
     168:	000003b0 	.word	0x000003b0

0000016c <sdc_build_revision_get>:
     16c:	b510      	push	{r4, lr}
     16e:	b128      	cbz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     170:	2214      	movs	r2, #20
     172:	4904      	ldr	r1, [pc, #16]	; (184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>)
     174:	f009 ff3c 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     178:	2000      	movs	r0, #0
     17a:	bd10      	pop	{r4, pc}
     17c:	f06f 0015 	mvn.w	r0, #21
     180:	bd10      	pop	{r4, pc}
     182:	0000      	.short	0x0000
     184:	000003d8 	.word	0x000003d8

00000188 <sdc_cfg_set>:
     188:	b570      	push	{r4, r5, r6, lr}
     18a:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     18e:	bb78      	cbnz	r0, 1f0 <sdc_cfg_set+0x68>
     190:	4c22      	ldr	r4, [pc, #136]	; (21c <CONFIG_FLASH_SIZE+0x1c>)
     192:	7860      	ldrb	r0, [r4, #1]
     194:	b108      	cbz	r0, 19a <sdc_cfg_set+0x12>
     196:	11a8      	asrs	r0, r5, #6
     198:	bd70      	pop	{r4, r5, r6, pc}
     19a:	b1f9      	cbz	r1, 1dc <sdc_cfg_set+0x54>
     19c:	f06f 0015 	mvn.w	r0, #21
     1a0:	2a00      	cmp	r2, #0
     1a2:	d0f9      	beq.n	198 <sdc_cfg_set+0x10>
     1a4:	4b1e      	ldr	r3, [pc, #120]	; (220 <CONFIG_FLASH_SIZE+0x20>)
     1a6:	1e89      	subs	r1, r1, #2
     1a8:	2907      	cmp	r1, #7
     1aa:	d231      	bcs.n	210 <CONFIG_FLASH_SIZE+0x10>
     1ac:	e8df f001 	tbb	[pc, r1]
     1b0:	1a170704 	.word	0x1a170704
     1b4:	00211d30 	.word	0x00211d30
     1b8:	7810      	ldrb	r0, [r2, #0]
     1ba:	7058      	strb	r0, [r3, #1]
     1bc:	e01d      	b.n	1fa <sdc_cfg_set+0x72>
     1be:	7891      	ldrb	r1, [r2, #2]
     1c0:	2900      	cmp	r1, #0
     1c2:	d0e9      	beq.n	198 <sdc_cfg_set+0x10>
     1c4:	78d1      	ldrb	r1, [r2, #3]
     1c6:	2900      	cmp	r1, #0
     1c8:	d0e6      	beq.n	198 <sdc_cfg_set+0x10>
     1ca:	7811      	ldrb	r1, [r2, #0]
     1cc:	291b      	cmp	r1, #27
     1ce:	d3e3      	bcc.n	198 <sdc_cfg_set+0x10>
     1d0:	7851      	ldrb	r1, [r2, #1]
     1d2:	291b      	cmp	r1, #27
     1d4:	d3e0      	bcc.n	198 <sdc_cfg_set+0x10>
     1d6:	6810      	ldr	r0, [r2, #0]
     1d8:	f8c3 0005 	str.w	r0, [r3, #5]
     1dc:	e00d      	b.n	1fa <sdc_cfg_set+0x72>
     1de:	6810      	ldr	r0, [r2, #0]
     1e0:	60d8      	str	r0, [r3, #12]
     1e2:	e00a      	b.n	1fa <sdc_cfg_set+0x72>
     1e4:	7810      	ldrb	r0, [r2, #0]
     1e6:	7098      	strb	r0, [r3, #2]
     1e8:	e007      	b.n	1fa <sdc_cfg_set+0x72>
     1ea:	8810      	ldrh	r0, [r2, #0]
     1ec:	8258      	strh	r0, [r3, #18]
     1ee:	e004      	b.n	1fa <sdc_cfg_set+0x72>
     1f0:	e00e      	b.n	210 <CONFIG_FLASH_SIZE+0x10>
     1f2:	8811      	ldrh	r1, [r2, #0]
     1f4:	29ff      	cmp	r1, #255	; 0xff
     1f6:	d8cf      	bhi.n	198 <sdc_cfg_set+0x10>
     1f8:	7519      	strb	r1, [r3, #20]
     1fa:	2201      	movs	r2, #1
     1fc:	4908      	ldr	r1, [pc, #32]	; (220 <CONFIG_FLASH_SIZE+0x20>)
     1fe:	2000      	movs	r0, #0
     200:	f007 fc52 	bl	7aa8 <__udivmoddi4+0x2a0>
     204:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     208:	db04      	blt.n	214 <CONFIG_FLASH_SIZE+0x14>
     20a:	f06f 000b 	mvn.w	r0, #11
     20e:	bd70      	pop	{r4, r5, r6, pc}
     210:	4628      	mov	r0, r5
     212:	bd70      	pop	{r4, r5, r6, pc}
     214:	2101      	movs	r1, #1
     216:	70a1      	strb	r1, [r4, #2]
     218:	bd70      	pop	{r4, r5, r6, pc}
     21a:	0000      	.short	0x0000
     21c:	20000040 	.word	0x20000040
     220:	20000a08 	.word	0x20000a08

00000224 <sdc_disable>:
     224:	b510      	push	{r4, lr}
     226:	4c07      	ldr	r4, [pc, #28]	; (244 <sdc_disable+0x20>)
     228:	7860      	ldrb	r0, [r4, #1]
     22a:	b120      	cbz	r0, 236 <sdc_disable+0x12>
     22c:	f002 fd10 	bl	2c50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     230:	7820      	ldrb	r0, [r4, #0]
     232:	f007 fa09 	bl	7648 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     236:	f000 fddb 	bl	df0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     23a:	f000 feb3 	bl	fa4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     23e:	2000      	movs	r0, #0
     240:	7060      	strb	r0, [r4, #1]
     242:	bd10      	pop	{r4, pc}
     244:	20000040 	.word	0x20000040

00000248 <sdc_enable>:
     248:	b570      	push	{r4, r5, r6, lr}
     24a:	460c      	mov	r4, r1
     24c:	0005      	movs	r5, r0
     24e:	d002      	beq.n	256 <sdc_enable+0xe>
     250:	b10c      	cbz	r4, 256 <sdc_enable+0xe>
     252:	0760      	lsls	r0, r4, #29
     254:	d002      	beq.n	25c <sdc_enable+0x14>
     256:	f06f 0015 	mvn.w	r0, #21
     25a:	bd70      	pop	{r4, r5, r6, pc}
     25c:	f000 f8e2 	bl	424 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     260:	b1a8      	cbz	r0, 28e <sdc_enable+0x46>
     262:	4628      	mov	r0, r5
     264:	f007 f9b6 	bl	75d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     268:	4d0a      	ldr	r5, [pc, #40]	; (294 <sdc_enable+0x4c>)
     26a:	2200      	movs	r2, #0
     26c:	490a      	ldr	r1, [pc, #40]	; (298 <sdc_enable+0x50>)
     26e:	7028      	strb	r0, [r5, #0]
     270:	4620      	mov	r0, r4
     272:	f007 fc19 	bl	7aa8 <__udivmoddi4+0x2a0>
     276:	f009 fc88 	bl	9b8a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     27a:	2100      	movs	r1, #0
     27c:	7828      	ldrb	r0, [r5, #0]
     27e:	f002 fcd1 	bl	2c24 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     282:	f7ff ff45 	bl	110 <__aeabi_idiv0+0x4>
     286:	2001      	movs	r0, #1
     288:	7068      	strb	r0, [r5, #1]
     28a:	2000      	movs	r0, #0
     28c:	bd70      	pop	{r4, r5, r6, pc}
     28e:	f04f 30ff 	mov.w	r0, #4294967295
     292:	bd70      	pop	{r4, r5, r6, pc}
     294:	20000040 	.word	0x20000040
     298:	20000a08 	.word	0x20000a08

0000029c <sdc_init>:
     29c:	b530      	push	{r4, r5, lr}
     29e:	b089      	sub	sp, #36	; 0x24
     2a0:	0004      	movs	r4, r0
     2a2:	d00c      	beq.n	2be <sdc_init+0x22>
     2a4:	f007 f93e 	bl	7524 <mpsl_is_initialized>
     2a8:	f04f 35ff 	mov.w	r5, #4294967295
     2ac:	b120      	cbz	r0, 2b8 <sdc_init+0x1c>
     2ae:	f006 ffef 	bl	7290 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     2b2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     2b6:	d905      	bls.n	2c4 <sdc_init+0x28>
     2b8:	4628      	mov	r0, r5
     2ba:	b009      	add	sp, #36	; 0x24
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	f06f 0015 	mvn.w	r0, #21
     2c2:	e7fa      	b.n	2ba <sdc_init+0x1e>
     2c4:	4d13      	ldr	r5, [pc, #76]	; (314 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x14>)
     2c6:	4814      	ldr	r0, [pc, #80]	; (318 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x18>)
     2c8:	606c      	str	r4, [r5, #4]
     2ca:	f000 f9bf 	bl	64c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     2ce:	2000      	movs	r0, #0
     2d0:	7068      	strb	r0, [r5, #1]
     2d2:	70a8      	strb	r0, [r5, #2]
     2d4:	4601      	mov	r1, r0
     2d6:	2224      	movs	r2, #36	; 0x24
     2d8:	4668      	mov	r0, sp
     2da:	f009 ff03 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     2de:	2224      	movs	r2, #36	; 0x24
     2e0:	490e      	ldr	r1, [pc, #56]	; (31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>)
     2e2:	4668      	mov	r0, sp
     2e4:	f009 fe84 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     2e8:	2224      	movs	r2, #36	; 0x24
     2ea:	4669      	mov	r1, sp
     2ec:	480c      	ldr	r0, [pc, #48]	; (320 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x20>)
     2ee:	f009 fe7f 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     2f2:	f3ef 8410 	mrs	r4, PRIMASK
     2f6:	b672      	cpsid	i
     2f8:	f000 fd88 	bl	e0c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     2fc:	4809      	ldr	r0, [pc, #36]	; (324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>)
     2fe:	f000 fe5d 	bl	fbc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     302:	b118      	cbz	r0, 30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     304:	21cb      	movs	r1, #203	; 0xcb
     306:	2003      	movs	r0, #3
     308:	f000 f80e 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     30c:	b904      	cbnz	r4, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     30e:	b662      	cpsie	i
     310:	2000      	movs	r0, #0
     312:	e7d2      	b.n	2ba <sdc_init+0x1e>
     314:	20000040 	.word	0x20000040
     318:	00000111 	.word	0x00000111
     31c:	000003b4 	.word	0x000003b4
     320:	20000a08 	.word	0x20000a08
     324:	00000451 	.word	0x00000451

00000328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     328:	b50e      	push	{r1, r2, r3, lr}
     32a:	b672      	cpsid	i
     32c:	4a15      	ldr	r2, [pc, #84]	; (384 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     32e:	6855      	ldr	r5, [r2, #4]
     330:	b1dd      	cbz	r5, 36a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     332:	2200      	movs	r2, #0
     334:	4603      	mov	r3, r0
     336:	466e      	mov	r6, sp
     338:	240a      	movs	r4, #10
     33a:	e003      	b.n	344 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     33c:	fbb0 f0f4 	udiv	r0, r0, r4
     340:	1c52      	adds	r2, r2, #1
     342:	b2d2      	uxtb	r2, r2
     344:	2800      	cmp	r0, #0
     346:	d1f9      	bne.n	33c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     348:	54b0      	strb	r0, [r6, r2]
     34a:	e00a      	b.n	362 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     34c:	b2d8      	uxtb	r0, r3
     34e:	fbb0 f7f4 	udiv	r7, r0, r4
     352:	fbb3 f3f4 	udiv	r3, r3, r4
     356:	fb04 0017 	mls	r0, r4, r7, r0
     35a:	1e52      	subs	r2, r2, #1
     35c:	b2d2      	uxtb	r2, r2
     35e:	3030      	adds	r0, #48	; 0x30
     360:	54b0      	strb	r0, [r6, r2]
     362:	2a00      	cmp	r2, #0
     364:	d1f2      	bne.n	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     366:	4630      	mov	r0, r6
     368:	47a8      	blx	r5
     36a:	f3bf 8f4f 	dsb	sy
     36e:	4806      	ldr	r0, [pc, #24]	; (388 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     370:	6801      	ldr	r1, [r0, #0]
     372:	4a06      	ldr	r2, [pc, #24]	; (38c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     374:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     378:	4311      	orrs	r1, r2
     37a:	6001      	str	r1, [r0, #0]
     37c:	f3bf 8f4f 	dsb	sy
     380:	bf00      	nop
     382:	e7fd      	b.n	380 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     384:	20000040 	.word	0x20000040
     388:	e000ed0c 	.word	0xe000ed0c
     38c:	05fa0004 	.word	0x05fa0004

00000390 <sdc_support_adv>:
     390:	4806      	ldr	r0, [pc, #24]	; (3ac <sdc_support_adv+0x1c>)
     392:	b510      	push	{r4, lr}
     394:	7881      	ldrb	r1, [r0, #2]
     396:	7840      	ldrb	r0, [r0, #1]
     398:	4301      	orrs	r1, r0
     39a:	d002      	beq.n	3a2 <sdc_support_adv+0x12>
     39c:	f04f 30ff 	mov.w	r0, #4294967295
     3a0:	bd10      	pop	{r4, pc}
     3a2:	f002 fc65 	bl	2c70 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     3a6:	2000      	movs	r0, #0
     3a8:	bd10      	pop	{r4, pc}
     3aa:	0000      	.short	0x0000
     3ac:	20000040 	.word	0x20000040
     3b0:	00000001 	.word	0x00000001
     3b4:	00010100 	.word	0x00010100
     3b8:	031b1b00 	.word	0x031b1b00
     3bc:	00000002 	.word	0x00000002
     3c0:	00001d4c 	.word	0x00001d4c
     3c4:	001f0000 	.word	0x001f0000
     3c8:	00000008 	.word	0x00000008
	...
     3d8:	c12e7ee0 	.word	0xc12e7ee0
     3dc:	2385055e 	.word	0x2385055e
     3e0:	fadc1546 	.word	0xfadc1546
     3e4:	707d298e 	.word	0x707d298e
     3e8:	fca59310 	.word	0xfca59310

000003ec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     3ec:	4a05      	ldr	r2, [pc, #20]	; (404 <CONFIG_BT_RX_STACK_SIZE+0x4>)
     3ee:	b510      	push	{r4, lr}
     3f0:	6852      	ldr	r2, [r2, #4]
     3f2:	b112      	cbz	r2, 3fa <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     3f8:	4710      	bx	r2
     3fa:	2192      	movs	r1, #146	; 0x92
     3fc:	2004      	movs	r0, #4
     3fe:	f7ff ff93 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     402:	0000      	.short	0x0000
     404:	20000a2c 	.word	0x20000a2c

00000408 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     408:	4a05      	ldr	r2, [pc, #20]	; (420 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     40a:	b510      	push	{r4, lr}
     40c:	6892      	ldr	r2, [r2, #8]
     40e:	b112      	cbz	r2, 416 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     414:	4710      	bx	r2
     416:	2198      	movs	r1, #152	; 0x98
     418:	2004      	movs	r0, #4
     41a:	f7ff ff85 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     41e:	0000      	.short	0x0000
     420:	20000a2c 	.word	0x20000a2c

00000424 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     424:	4805      	ldr	r0, [pc, #20]	; (43c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     426:	6801      	ldr	r1, [r0, #0]
     428:	b129      	cbz	r1, 436 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     42a:	6841      	ldr	r1, [r0, #4]
     42c:	b119      	cbz	r1, 436 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     42e:	6880      	ldr	r0, [r0, #8]
     430:	b108      	cbz	r0, 436 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     432:	2001      	movs	r0, #1
     434:	4770      	bx	lr
     436:	2000      	movs	r0, #0
     438:	4770      	bx	lr
     43a:	0000      	.short	0x0000
     43c:	20000a2c 	.word	0x20000a2c

00000440 <sdc_rand_source_register>:
     440:	4902      	ldr	r1, [pc, #8]	; (44c <sdc_rand_source_register+0xc>)
     442:	c80d      	ldmia	r0, {r0, r2, r3}
     444:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     448:	2000      	movs	r0, #0
     44a:	4770      	bx	lr
     44c:	20000a2c 	.word	0x20000a2c

00000450 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     452:	4c12      	ldr	r4, [pc, #72]	; (49c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     454:	2600      	movs	r6, #0
     456:	6825      	ldr	r5, [r4, #0]
     458:	e011      	b.n	47e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     45a:	9800      	ldr	r0, [sp, #0]
     45c:	2802      	cmp	r0, #2
     45e:	d002      	beq.n	466 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     460:	2803      	cmp	r0, #3
     462:	d10c      	bne.n	47e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     464:	e006      	b.n	474 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     466:	6820      	ldr	r0, [r4, #0]
     468:	b110      	cbz	r0, 470 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     46a:	2000      	movs	r0, #0
     46c:	6026      	str	r6, [r4, #0]
     46e:	e005      	b.n	47c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     470:	2128      	movs	r1, #40	; 0x28
     472:	e00c      	b.n	48e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     474:	6820      	ldr	r0, [r4, #0]
     476:	b168      	cbz	r0, 494 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     478:	2001      	movs	r0, #1
     47a:	6026      	str	r6, [r4, #0]
     47c:	47a8      	blx	r5
     47e:	4668      	mov	r0, sp
     480:	f000 fd62 	bl	f48 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     484:	2800      	cmp	r0, #0
     486:	d0e8      	beq.n	45a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     488:	2805      	cmp	r0, #5
     48a:	d005      	beq.n	498 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     48c:	2135      	movs	r1, #53	; 0x35
     48e:	2004      	movs	r0, #4
     490:	f7ff ff4a 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     494:	212d      	movs	r1, #45	; 0x2d
     496:	e7fa      	b.n	48e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     49a:	0000      	.short	0x0000
     49c:	20000048 	.word	0x20000048

000004a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     4a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     4a4:	4e28      	ldr	r6, [pc, #160]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4a6:	4605      	mov	r5, r0
     4a8:	1d00      	adds	r0, r0, #4
     4aa:	f106 0744 	add.w	r7, r6, #68	; 0x44
     4ae:	6030      	str	r0, [r6, #0]
     4b0:	7838      	ldrb	r0, [r7, #0]
     4b2:	b158      	cbz	r0, 4cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     4b4:	78ba      	ldrb	r2, [r7, #2]
     4b6:	463c      	mov	r4, r7
     4b8:	1c79      	adds	r1, r7, #1
     4ba:	4628      	mov	r0, r5
     4bc:	1c92      	adds	r2, r2, #2
     4be:	f009 fd97 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     4c2:	2000      	movs	r0, #0
     4c4:	7020      	strb	r0, [r4, #0]
     4c6:	2004      	movs	r0, #4
     4c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     4cc:	481e      	ldr	r0, [pc, #120]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4ce:	f000 ff7d 	bl	13cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     4d2:	4604      	mov	r4, r0
     4d4:	2802      	cmp	r0, #2
     4d6:	d004      	beq.n	4e2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     4d8:	2c04      	cmp	r4, #4
     4da:	d007      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     4dc:	2c08      	cmp	r4, #8
     4de:	d02c      	beq.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
     4e0:	e02f      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     4e2:	4919      	ldr	r1, [pc, #100]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4e4:	4628      	mov	r0, r5
     4e6:	f007 fb64 	bl	7bb2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     4ea:	e02a      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     4ec:	7830      	ldrb	r0, [r6, #0]
     4ee:	2808      	cmp	r0, #8
     4f0:	d104      	bne.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     4f2:	2105      	movs	r1, #5
     4f4:	203e      	movs	r0, #62	; 0x3e
     4f6:	f007 fb48 	bl	7b8a <__udivmoddi4+0x382>
     4fa:	b150      	cbz	r0, 512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     4fc:	4912      	ldr	r1, [pc, #72]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4fe:	4628      	mov	r0, r5
     500:	f007 fbbc 	bl	7c7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     504:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     508:	d30e      	bcc.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     50a:	21c7      	movs	r1, #199	; 0xc7
     50c:	2008      	movs	r0, #8
     50e:	f7ff ff0b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     512:	88b0      	ldrh	r0, [r6, #4]
     514:	f8ad 0000 	strh.w	r0, [sp]
     518:	a901      	add	r1, sp, #4
     51a:	4668      	mov	r0, sp
     51c:	f007 fe00 	bl	8120 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     520:	2800      	cmp	r0, #0
     522:	d0c5      	beq.n	4b0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     524:	21a8      	movs	r1, #168	; 0xa8
     526:	e7f1      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     528:	2800      	cmp	r0, #0
     52a:	d0c1      	beq.n	4b0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     52c:	78a9      	ldrb	r1, [r5, #2]
     52e:	7828      	ldrb	r0, [r5, #0]
     530:	f007 fb2b 	bl	7b8a <__udivmoddi4+0x382>
     534:	2800      	cmp	r0, #0
     536:	d0bb      	beq.n	4b0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     538:	e003      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     53a:	4903      	ldr	r1, [pc, #12]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     53c:	4628      	mov	r0, r5
     53e:	f007 fb66 	bl	7c0e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     542:	4620      	mov	r0, r4
     544:	e7c0      	b.n	4c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     546:	0000      	.short	0x0000
     548:	20000a38 	.word	0x20000a38
     54c:	b570      	push	{r4, r5, r6, lr}
     54e:	780a      	ldrb	r2, [r1, #0]
     550:	7082      	strb	r2, [r0, #2]
     552:	b33a      	cbz	r2, 5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
     554:	2a01      	cmp	r2, #1
     556:	d825      	bhi.n	5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
     558:	2313      	movs	r3, #19
     55a:	7003      	strb	r3, [r0, #0]
     55c:	2300      	movs	r3, #0
     55e:	e00a      	b.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
     560:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     564:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     568:	78a6      	ldrb	r6, [r4, #2]
     56a:	70ee      	strb	r6, [r5, #3]
     56c:	8864      	ldrh	r4, [r4, #2]
     56e:	0a24      	lsrs	r4, r4, #8
     570:	1c5b      	adds	r3, r3, #1
     572:	712c      	strb	r4, [r5, #4]
     574:	b2db      	uxtb	r3, r3
     576:	4293      	cmp	r3, r2
     578:	d3f2      	bcc.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     57a:	2300      	movs	r3, #0
     57c:	e00b      	b.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     57e:	bf00      	nop
     580:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     584:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     588:	792e      	ldrb	r6, [r5, #4]
     58a:	7166      	strb	r6, [r4, #5]
     58c:	88ad      	ldrh	r5, [r5, #4]
     58e:	0a2d      	lsrs	r5, r5, #8
     590:	1c5b      	adds	r3, r3, #1
     592:	71a5      	strb	r5, [r4, #6]
     594:	b2db      	uxtb	r3, r3
     596:	4293      	cmp	r3, r2
     598:	d3f2      	bcc.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     59a:	2101      	movs	r1, #1
     59c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     5a0:	b2c0      	uxtb	r0, r0
     5a2:	bd70      	pop	{r4, r5, r6, pc}
     5a4:	2000      	movs	r0, #0
     5a6:	bd70      	pop	{r4, r5, r6, pc}

000005a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     5a8:	2840      	cmp	r0, #64	; 0x40
     5aa:	d203      	bcs.n	5b4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     5ac:	1e40      	subs	r0, r0, #1
     5ae:	b2c1      	uxtb	r1, r0
     5b0:	4805      	ldr	r0, [pc, #20]	; (5c8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     5b2:	e005      	b.n	5c0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     5b4:	28ff      	cmp	r0, #255	; 0xff
     5b6:	d005      	beq.n	5c4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     5b8:	3840      	subs	r0, #64	; 0x40
     5ba:	b2c1      	uxtb	r1, r0
     5bc:	4802      	ldr	r0, [pc, #8]	; (5c8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     5be:	3008      	adds	r0, #8
     5c0:	f007 bd5b 	b.w	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
     5c4:	2001      	movs	r0, #1
     5c6:	4770      	bx	lr
     5c8:	2000004c 	.word	0x2000004c

000005cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     5cc:	1e40      	subs	r0, r0, #1
     5ce:	b2c1      	uxtb	r1, r0
     5d0:	4801      	ldr	r0, [pc, #4]	; (5d8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     5d2:	f007 bd52 	b.w	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
     5d6:	0000      	.short	0x0000
     5d8:	2000005c 	.word	0x2000005c

000005dc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     5dc:	4902      	ldr	r1, [pc, #8]	; (5e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     5de:	6802      	ldr	r2, [r0, #0]
     5e0:	610a      	str	r2, [r1, #16]
     5e2:	6840      	ldr	r0, [r0, #4]
     5e4:	6148      	str	r0, [r1, #20]
     5e6:	4770      	bx	lr
     5e8:	2000004c 	.word	0x2000004c

000005ec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     5ec:	4905      	ldr	r1, [pc, #20]	; (604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>)
     5ee:	6802      	ldr	r2, [r0, #0]
     5f0:	600a      	str	r2, [r1, #0]
     5f2:	6840      	ldr	r0, [r0, #4]
     5f4:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     5f8:	600a      	str	r2, [r1, #0]
     5fa:	4a03      	ldr	r2, [pc, #12]	; (608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>)
     5fc:	4310      	orrs	r0, r2
     5fe:	6048      	str	r0, [r1, #4]
     600:	4770      	bx	lr
     602:	0000      	.short	0x0000
     604:	2000004c 	.word	0x2000004c
     608:	024007f8 	.word	0x024007f8

0000060c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     60c:	4807      	ldr	r0, [pc, #28]	; (62c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     60e:	f04f 31ff 	mov.w	r1, #4294967295
     612:	2200      	movs	r2, #0
     614:	6001      	str	r1, [r0, #0]
     616:	0cc9      	lsrs	r1, r1, #19
     618:	6041      	str	r1, [r0, #4]
     61a:	f100 0108 	add.w	r1, r0, #8
     61e:	201f      	movs	r0, #31
     620:	600a      	str	r2, [r1, #0]
     622:	604a      	str	r2, [r1, #4]
     624:	3108      	adds	r1, #8
     626:	e9c1 0200 	strd	r0, r2, [r1]
     62a:	4770      	bx	lr
     62c:	2000004c 	.word	0x2000004c

00000630 <sdc_hci_cmd_cb_reset>:
     630:	b510      	push	{r4, lr}
     632:	f7ff ffeb 	bl	60c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     636:	f009 f923 	bl	9880 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     63a:	4604      	mov	r4, r0
     63c:	4802      	ldr	r0, [pc, #8]	; (648 <sdc_hci_cmd_cb_reset+0x18>)
     63e:	6800      	ldr	r0, [r0, #0]
     640:	b100      	cbz	r0, 644 <sdc_hci_cmd_cb_reset+0x14>
     642:	4780      	blx	r0
     644:	4620      	mov	r0, r4
     646:	bd10      	pop	{r4, pc}
     648:	20000064 	.word	0x20000064

0000064c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     64c:	4901      	ldr	r1, [pc, #4]	; (654 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     64e:	6008      	str	r0, [r1, #0]
     650:	4770      	bx	lr
     652:	0000      	.short	0x0000
     654:	20000064 	.word	0x20000064

00000658 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     65c:	4604      	mov	r4, r0
     65e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     662:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     666:	4d1f      	ldr	r5, [pc, #124]	; (6e4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     668:	4e1e      	ldr	r6, [pc, #120]	; (6e4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     66a:	3d10      	subs	r5, #16
     66c:	2210      	movs	r2, #16
     66e:	2100      	movs	r1, #0
     670:	4620      	mov	r0, r4
     672:	f009 fd37 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     676:	2210      	movs	r2, #16
     678:	2100      	movs	r1, #0
     67a:	f104 0010 	add.w	r0, r4, #16
     67e:	f009 fd31 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     682:	6828      	ldr	r0, [r5, #0]
     684:	1c40      	adds	r0, r0, #1
     686:	d108      	bne.n	69a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     688:	6868      	ldr	r0, [r5, #4]
     68a:	1c40      	adds	r0, r0, #1
     68c:	d105      	bne.n	69a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     68e:	68a8      	ldr	r0, [r5, #8]
     690:	1c40      	adds	r0, r0, #1
     692:	d102      	bne.n	69a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     694:	68e8      	ldr	r0, [r5, #12]
     696:	1c40      	adds	r0, r0, #1
     698:	d007      	beq.n	6aa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     69a:	6828      	ldr	r0, [r5, #0]
     69c:	686a      	ldr	r2, [r5, #4]
     69e:	68a9      	ldr	r1, [r5, #8]
     6a0:	68eb      	ldr	r3, [r5, #12]
     6a2:	6120      	str	r0, [r4, #16]
     6a4:	6162      	str	r2, [r4, #20]
     6a6:	61a1      	str	r1, [r4, #24]
     6a8:	61e3      	str	r3, [r4, #28]
     6aa:	2000      	movs	r0, #0
     6ac:	f000 fcda 	bl	1064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     6b0:	4387      	bics	r7, r0
     6b2:	07f8      	lsls	r0, r7, #31
     6b4:	d113      	bne.n	6de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     6b6:	6830      	ldr	r0, [r6, #0]
     6b8:	1c40      	adds	r0, r0, #1
     6ba:	d108      	bne.n	6ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     6bc:	6870      	ldr	r0, [r6, #4]
     6be:	1c40      	adds	r0, r0, #1
     6c0:	d105      	bne.n	6ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     6c2:	68b0      	ldr	r0, [r6, #8]
     6c4:	1c40      	adds	r0, r0, #1
     6c6:	d102      	bne.n	6ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     6c8:	68f0      	ldr	r0, [r6, #12]
     6ca:	1c40      	adds	r0, r0, #1
     6cc:	d007      	beq.n	6de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     6ce:	6832      	ldr	r2, [r6, #0]
     6d0:	6870      	ldr	r0, [r6, #4]
     6d2:	68b1      	ldr	r1, [r6, #8]
     6d4:	68f3      	ldr	r3, [r6, #12]
     6d6:	6022      	str	r2, [r4, #0]
     6d8:	6060      	str	r0, [r4, #4]
     6da:	60a1      	str	r1, [r4, #8]
     6dc:	60e3      	str	r3, [r4, #12]
     6de:	2000      	movs	r0, #0
     6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6e4:	10000090 	.word	0x10000090

000006e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     6e8:	b538      	push	{r3, r4, r5, lr}
     6ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     6ee:	4604      	mov	r4, r0
     6f0:	4822      	ldr	r0, [pc, #136]	; (77c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     6f2:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     6f6:	4d21      	ldr	r5, [pc, #132]	; (77c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     6f8:	6802      	ldr	r2, [r0, #0]
     6fa:	3d14      	subs	r5, #20
     6fc:	1c52      	adds	r2, r2, #1
     6fe:	d104      	bne.n	70a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     700:	6842      	ldr	r2, [r0, #4]
     702:	43d2      	mvns	r2, r2
     704:	0412      	lsls	r2, r2, #16
     706:	0c12      	lsrs	r2, r2, #16
     708:	d035      	beq.n	776 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     70a:	07c9      	lsls	r1, r1, #31
     70c:	d033      	beq.n	776 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     70e:	6801      	ldr	r1, [r0, #0]
     710:	6840      	ldr	r0, [r0, #4]
     712:	f8ad 0000 	strh.w	r0, [sp]
     716:	f8c4 1001 	str.w	r1, [r4, #1]
     71a:	f8bd 0000 	ldrh.w	r0, [sp]
     71e:	f8a4 0005 	strh.w	r0, [r4, #5]
     722:	79a0      	ldrb	r0, [r4, #6]
     724:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     728:	71a0      	strb	r0, [r4, #6]
     72a:	6828      	ldr	r0, [r5, #0]
     72c:	1c40      	adds	r0, r0, #1
     72e:	d00c      	beq.n	74a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     730:	6868      	ldr	r0, [r5, #4]
     732:	1c40      	adds	r0, r0, #1
     734:	d009      	beq.n	74a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     736:	68a8      	ldr	r0, [r5, #8]
     738:	1c40      	adds	r0, r0, #1
     73a:	d006      	beq.n	74a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     73c:	68e8      	ldr	r0, [r5, #12]
     73e:	1c40      	adds	r0, r0, #1
     740:	d003      	beq.n	74a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     742:	2000      	movs	r0, #0
     744:	f000 fc8e 	bl	1064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     748:	b140      	cbz	r0, 75c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     74a:	2210      	movs	r2, #16
     74c:	2100      	movs	r1, #0
     74e:	1de0      	adds	r0, r4, #7
     750:	f009 fcc8 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     754:	2001      	movs	r0, #1
     756:	7020      	strb	r0, [r4, #0]
     758:	2000      	movs	r0, #0
     75a:	bd38      	pop	{r3, r4, r5, pc}
     75c:	682a      	ldr	r2, [r5, #0]
     75e:	6869      	ldr	r1, [r5, #4]
     760:	68a8      	ldr	r0, [r5, #8]
     762:	68eb      	ldr	r3, [r5, #12]
     764:	f8c4 2007 	str.w	r2, [r4, #7]
     768:	f8c4 100b 	str.w	r1, [r4, #11]
     76c:	f8c4 000f 	str.w	r0, [r4, #15]
     770:	f8c4 3013 	str.w	r3, [r4, #19]
     774:	e7ee      	b.n	754 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     776:	2000      	movs	r0, #0
     778:	e7ed      	b.n	756 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     77a:	0000      	.short	0x0000
     77c:	100000a4 	.word	0x100000a4

00000780 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     780:	2102      	movs	r1, #2
     782:	8001      	strh	r1, [r0, #0]
     784:	8041      	strh	r1, [r0, #2]
     786:	2100      	movs	r1, #0
     788:	7101      	strb	r1, [r0, #4]
     78a:	21e0      	movs	r1, #224	; 0xe0
     78c:	7141      	strb	r1, [r0, #5]
     78e:	f642 617e 	movw	r1, #11902	; 0x2e7e
     792:	80c1      	strh	r1, [r0, #6]
     794:	4901      	ldr	r1, [pc, #4]	; (79c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     796:	6081      	str	r1, [r0, #8]
     798:	2000      	movs	r0, #0
     79a:	4770      	bx	lr
     79c:	85055ec1 	.word	0x85055ec1
     7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7a4:	798c      	ldrb	r4, [r1, #6]
     7a6:	f8dd e018 	ldr.w	lr, [sp, #24]
     7aa:	2c08      	cmp	r4, #8
     7ac:	d901      	bls.n	7b2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     7ae:	21db      	movs	r1, #219	; 0xdb
     7b0:	e02c      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7b2:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 858 <__z_interrupt_stack_SIZEOF+0x18>
     7b6:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     7ba:	b10d      	cbz	r5, 7c0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     7bc:	21dc      	movs	r1, #220	; 0xdc
     7be:	e025      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7c0:	79cd      	ldrb	r5, [r1, #7]
     7c2:	2d00      	cmp	r5, #0
     7c4:	d045      	beq.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     7c6:	006f      	lsls	r7, r5, #1
     7c8:	370a      	adds	r7, #10
     7ca:	681d      	ldr	r5, [r3, #0]
     7cc:	2c02      	cmp	r4, #2
     7ce:	443d      	add	r5, r7
     7d0:	d901      	bls.n	7d6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     7d2:	4626      	mov	r6, r4
     7d4:	e001      	b.n	7da <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     7d6:	f04f 0602 	mov.w	r6, #2
     7da:	442e      	add	r6, r5
     7dc:	f1a6 0601 	sub.w	r6, r6, #1
     7e0:	d901      	bls.n	7e6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     7e2:	4625      	mov	r5, r4
     7e4:	e001      	b.n	7ea <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     7e6:	f04f 0502 	mov.w	r5, #2
     7ea:	f1a5 0501 	sub.w	r5, r5, #1
     7ee:	ea26 0605 	bic.w	r6, r6, r5
     7f2:	888d      	ldrh	r5, [r1, #4]
     7f4:	4425      	add	r5, r4
     7f6:	f1a4 0401 	sub.w	r4, r4, #1
     7fa:	f1a5 0501 	sub.w	r5, r5, #1
     7fe:	ea25 0504 	bic.w	r5, r5, r4
     802:	f64f 74ff 	movw	r4, #65535	; 0xffff
     806:	42a5      	cmp	r5, r4
     808:	d303      	bcc.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
     80a:	21e7      	movs	r1, #231	; 0xe7
     80c:	2017      	movs	r0, #23
     80e:	f7ff fd8b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     812:	f1be 0f00 	cmp.w	lr, #0
     816:	d118      	bne.n	84a <__z_interrupt_stack_SIZEOF+0xa>
     818:	1bf4      	subs	r4, r6, r7
     81a:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     81e:	8025      	strh	r5, [r4, #0]
     820:	79c8      	ldrb	r0, [r1, #7]
     822:	70a0      	strb	r0, [r4, #2]
     824:	2001      	movs	r0, #1
     826:	70e0      	strb	r0, [r4, #3]
     828:	7122      	strb	r2, [r4, #4]
     82a:	6808      	ldr	r0, [r1, #0]
     82c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     830:	0c00      	lsrs	r0, r0, #16
     832:	80e0      	strh	r0, [r4, #6]
     834:	8808      	ldrh	r0, [r1, #0]
     836:	8120      	strh	r0, [r4, #8]
     838:	2000      	movs	r0, #0
     83a:	e003      	b.n	844 <__z_interrupt_stack_SIZEOF+0x4>
     83c:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     840:	1c40      	adds	r0, r0, #1
     842:	817a      	strh	r2, [r7, #10]
     844:	79cf      	ldrb	r7, [r1, #7]
     846:	4287      	cmp	r7, r0
     848:	d8f8      	bhi.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     84a:	79c8      	ldrb	r0, [r1, #7]
     84c:	fb00 6005 	mla	r0, r0, r5, r6
     850:	6018      	str	r0, [r3, #0]
     852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     856:	0000      	.short	0x0000
     858:	20000068 	.word	0x20000068
     85c:	b530      	push	{r4, r5, lr}
     85e:	4603      	mov	r3, r0
     860:	ea4f 0002 	mov.w	r0, r2
     864:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     868:	8964      	ldrh	r4, [r4, #10]
     86a:	428c      	cmp	r4, r1
     86c:	d009      	beq.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     86e:	789c      	ldrb	r4, [r3, #2]
     870:	1c40      	adds	r0, r0, #1
     872:	fbb0 f5f4 	udiv	r5, r0, r4
     876:	fb04 0015 	mls	r0, r4, r5, r0
     87a:	b2c0      	uxtb	r0, r0
     87c:	4290      	cmp	r0, r2
     87e:	d1f1      	bne.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     880:	20ff      	movs	r0, #255	; 0xff
     882:	bd30      	pop	{r4, r5, pc}

00000884 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     884:	b570      	push	{r4, r5, r6, lr}
     886:	4605      	mov	r5, r0
     888:	4819      	ldr	r0, [pc, #100]	; (8f0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
     88a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     88e:	b364      	cbz	r4, 8ea <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     890:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     894:	d304      	bcc.n	8a0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     896:	f240 2125 	movw	r1, #549	; 0x225
     89a:	2017      	movs	r0, #23
     89c:	f7ff fd44 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     8a0:	4629      	mov	r1, r5
     8a2:	4620      	mov	r0, r4
     8a4:	f007 fd3c 	bl	8320 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     8a8:	4601      	mov	r1, r0
     8aa:	28ff      	cmp	r0, #255	; 0xff
     8ac:	d004      	beq.n	8b8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     8ae:	4620      	mov	r0, r4
     8b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     8b4:	f007 bd48 	b.w	8348 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     8b8:	78a0      	ldrb	r0, [r4, #2]
     8ba:	fbb5 f1f0 	udiv	r1, r5, r0
     8be:	fb00 5011 	mls	r0, r0, r1, r5
     8c2:	b2c6      	uxtb	r6, r0
     8c4:	4632      	mov	r2, r6
     8c6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     8ca:	4620      	mov	r0, r4
     8cc:	f7ff ffc6 	bl	85c <__z_interrupt_stack_SIZEOF+0x1c>
     8d0:	4602      	mov	r2, r0
     8d2:	28ff      	cmp	r0, #255	; 0xff
     8d4:	d009      	beq.n	8ea <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     8d6:	42b2      	cmp	r2, r6
     8d8:	d001      	beq.n	8de <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     8da:	2000      	movs	r0, #0
     8dc:	70e0      	strb	r0, [r4, #3]
     8de:	4629      	mov	r1, r5
     8e0:	4620      	mov	r0, r4
     8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     8e6:	f007 bd15 	b.w	8314 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     8ea:	2000      	movs	r0, #0
     8ec:	bd70      	pop	{r4, r5, r6, pc}
     8ee:	0000      	.short	0x0000
     8f0:	20000068 	.word	0x20000068

000008f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     8f4:	4a08      	ldr	r2, [pc, #32]	; (918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
     8f6:	b510      	push	{r4, lr}
     8f8:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     8fc:	4601      	mov	r1, r0
     8fe:	4620      	mov	r0, r4
     900:	f007 fd0e 	bl	8320 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     904:	4601      	mov	r1, r0
     906:	28ff      	cmp	r0, #255	; 0xff
     908:	d004      	beq.n	914 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
     90a:	4620      	mov	r0, r4
     90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     910:	f007 bd1a 	b.w	8348 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     914:	2000      	movs	r0, #0
     916:	bd10      	pop	{r4, pc}
     918:	20000068 	.word	0x20000068

0000091c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
     91e:	b089      	sub	sp, #36	; 0x24
     920:	0004      	movs	r4, r0
     922:	460e      	mov	r6, r1
     924:	9406      	str	r4, [sp, #24]
     926:	d007      	beq.n	938 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
     928:	2500      	movs	r5, #0
     92a:	0760      	lsls	r0, r4, #29
     92c:	d006      	beq.n	93c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
     92e:	f240 1119 	movw	r1, #281	; 0x119
     932:	2017      	movs	r0, #23
     934:	f7ff fcf8 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     938:	2501      	movs	r5, #1
     93a:	e7f6      	b.n	92a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
     93c:	4814      	ldr	r0, [pc, #80]	; (990 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
     93e:	2200      	movs	r2, #0
     940:	4f14      	ldr	r7, [pc, #80]	; (994 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     942:	6002      	str	r2, [r0, #0]
     944:	6042      	str	r2, [r0, #4]
     946:	e9d7 1000 	ldrd	r1, r0, [r7]
     94a:	f896 c000 	ldrb.w	ip, [r6]
     94e:	68bb      	ldr	r3, [r7, #8]
     950:	f36c 601f 	bfi	r0, ip, #24, #8
     954:	e9cd 0302 	strd	r0, r3, [sp, #8]
     958:	e9cd 5100 	strd	r5, r1, [sp]
     95c:	ab06      	add	r3, sp, #24
     95e:	a901      	add	r1, sp, #4
     960:	4610      	mov	r0, r2
     962:	f7ff ff1d 	bl	7a0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
     966:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
     96a:	7873      	ldrb	r3, [r6, #1]
     96c:	697a      	ldr	r2, [r7, #20]
     96e:	f363 601f 	bfi	r0, r3, #24, #8
     972:	e9cd 0202 	strd	r0, r2, [sp, #8]
     976:	e9cd 5100 	strd	r5, r1, [sp]
     97a:	ab06      	add	r3, sp, #24
     97c:	2200      	movs	r2, #0
     97e:	a901      	add	r1, sp, #4
     980:	2001      	movs	r0, #1
     982:	f7ff ff0d 	bl	7a0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
     986:	9806      	ldr	r0, [sp, #24]
     988:	b009      	add	sp, #36	; 0x24
     98a:	1b00      	subs	r0, r0, r4
     98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     98e:	0000      	.short	0x0000
     990:	20000068 	.word	0x20000068
     994:	00000a84 	.word	0x00000a84

00000998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     998:	b510      	push	{r4, lr}
     99a:	4604      	mov	r4, r0
     99c:	7980      	ldrb	r0, [r0, #6]
     99e:	490e      	ldr	r1, [pc, #56]	; (9d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
     9a0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     9a4:	b1a8      	cbz	r0, 9d2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     9a6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
     9aa:	79e1      	ldrb	r1, [r4, #7]
     9ac:	7882      	ldrb	r2, [r0, #2]
     9ae:	4291      	cmp	r1, r2
     9b0:	d20f      	bcs.n	9d2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     9b2:	1c4a      	adds	r2, r1, #1
     9b4:	71e2      	strb	r2, [r4, #7]
     9b6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9ba:	8952      	ldrh	r2, [r2, #10]
     9bc:	429a      	cmp	r2, r3
     9be:	d0f4      	beq.n	9aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
     9c0:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9c4:	8952      	ldrh	r2, [r2, #10]
     9c6:	80a2      	strh	r2, [r4, #4]
     9c8:	f007 fcbe 	bl	8348 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     9cc:	6020      	str	r0, [r4, #0]
     9ce:	2000      	movs	r0, #0
     9d0:	bd10      	pop	{r4, pc}
     9d2:	2005      	movs	r0, #5
     9d4:	bd10      	pop	{r4, pc}
     9d6:	0000      	.short	0x0000
     9d8:	20000068 	.word	0x20000068

000009dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9e0:	4607      	mov	r7, r0
     9e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
     9e6:	8038      	strh	r0, [r7, #0]
     9e8:	4812      	ldr	r0, [pc, #72]	; (a34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
     9ea:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     9ee:	b1ec      	cbz	r4, a2c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
     9f0:	78a5      	ldrb	r5, [r4, #2]
     9f2:	7920      	ldrb	r0, [r4, #4]
     9f4:	fbb0 f1f5 	udiv	r1, r0, r5
     9f8:	fb05 0611 	mls	r6, r5, r1, r0
     9fc:	4632      	mov	r2, r6
     9fe:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     a02:	4620      	mov	r0, r4
     a04:	f7ff ff2a 	bl	85c <__z_interrupt_stack_SIZEOF+0x1c>
     a08:	4602      	mov	r2, r0
     a0a:	28ff      	cmp	r0, #255	; 0xff
     a0c:	d00e      	beq.n	a2c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
     a0e:	1ba8      	subs	r0, r5, r6
     a10:	4410      	add	r0, r2
     a12:	fbb0 f1f5 	udiv	r1, r0, r5
     a16:	fb05 0011 	mls	r0, r5, r1, r0
     a1a:	7921      	ldrb	r1, [r4, #4]
     a1c:	4408      	add	r0, r1
     a1e:	b281      	uxth	r1, r0
     a20:	8039      	strh	r1, [r7, #0]
     a22:	4620      	mov	r0, r4
     a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     a28:	f007 bc74 	b.w	8314 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     a2c:	2000      	movs	r0, #0
     a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a32:	0000      	.short	0x0000
     a34:	20000068 	.word	0x20000068

00000a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a3c:	4606      	mov	r6, r0
     a3e:	4810      	ldr	r0, [pc, #64]	; (a80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
     a40:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
     a44:	4631      	mov	r1, r6
     a46:	4628      	mov	r0, r5
     a48:	f007 fc6a 	bl	8320 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     a4c:	4604      	mov	r4, r0
     a4e:	28ff      	cmp	r0, #255	; 0xff
     a50:	d012      	beq.n	a78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
     a52:	f8d5 0006 	ldr.w	r0, [r5, #6]
     a56:	4621      	mov	r1, r4
     a58:	ea4f 4730 	mov.w	r7, r0, ror #16
     a5c:	4628      	mov	r0, r5
     a5e:	f007 fc73 	bl	8348 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     a62:	4601      	mov	r1, r0
     a64:	4630      	mov	r0, r6
     a66:	47b8      	blx	r7
     a68:	eb05 0144 	add.w	r1, r5, r4, lsl #1
     a6c:	f64f 70f0 	movw	r0, #65520	; 0xfff0
     a70:	8148      	strh	r0, [r1, #10]
     a72:	2000      	movs	r0, #0
     a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a78:	f243 0002 	movw	r0, #12290	; 0x3002
     a7c:	e7fa      	b.n	a74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
     a7e:	0000      	.short	0x0000
     a80:	20000068 	.word	0x20000068
     a84:	000092a9 	.word	0x000092a9
     a88:	000802f8 	.word	0x000802f8
     a8c:	00000000 	.word	0x00000000
     a90:	00008b9d 	.word	0x00008b9d
     a94:	00080118 	.word	0x00080118
     a98:	00000000 	.word	0x00000000

00000a9c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
     a9c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aa0:	4c24      	ldr	r4, [pc, #144]	; (b34 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
     aa2:	4606      	mov	r6, r0
     aa4:	b081      	sub	sp, #4
     aa6:	6820      	ldr	r0, [r4, #0]
     aa8:	469a      	mov	sl, r3
     aaa:	4693      	mov	fp, r2
     aac:	b158      	cbz	r0, ac6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
     aae:	7a01      	ldrb	r1, [r0, #8]
     ab0:	42b1      	cmp	r1, r6
     ab2:	d903      	bls.n	abc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
     ab4:	6840      	ldr	r0, [r0, #4]
     ab6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     aba:	b140      	cbz	r0, ace <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
     abc:	f243 0002 	movw	r0, #12290	; 0x3002
     ac0:	b005      	add	sp, #20
     ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ac6:	21a5      	movs	r1, #165	; 0xa5
     ac8:	2018      	movs	r0, #24
     aca:	f7ff fc2d 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ace:	4619      	mov	r1, r3
     ad0:	9802      	ldr	r0, [sp, #8]
     ad2:	f007 fc74 	bl	83be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
     ad6:	4680      	mov	r8, r0
     ad8:	4658      	mov	r0, fp
     ada:	990e      	ldr	r1, [sp, #56]	; 0x38
     adc:	f007 fc65 	bl	83aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
     ae0:	4605      	mov	r5, r0
     ae2:	eb08 0005 	add.w	r0, r8, r5
     ae6:	1d00      	adds	r0, r0, #4
     ae8:	b287      	uxth	r7, r0
     aea:	6820      	ldr	r0, [r4, #0]
     aec:	46a1      	mov	r9, r4
     aee:	4639      	mov	r1, r7
     af0:	6800      	ldr	r0, [r0, #0]
     af2:	f007 fbaa 	bl	824a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     af6:	0004      	movs	r4, r0
     af8:	d01a      	beq.n	b30 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
     afa:	8067      	strh	r7, [r4, #2]
     afc:	8025      	strh	r5, [r4, #0]
     afe:	4629      	mov	r1, r5
     b00:	1d20      	adds	r0, r4, #4
     b02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
     b04:	4607      	mov	r7, r0
     b06:	465a      	mov	r2, fp
     b08:	2309      	movs	r3, #9
     b0a:	9500      	str	r5, [sp, #0]
     b0c:	f007 fb4a 	bl	81a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b10:	8820      	ldrh	r0, [r4, #0]
     b12:	4641      	mov	r1, r8
     b14:	4438      	add	r0, r7
     b16:	230a      	movs	r3, #10
     b18:	9a02      	ldr	r2, [sp, #8]
     b1a:	f8cd a000 	str.w	sl, [sp]
     b1e:	f007 fb41 	bl	81a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b22:	f8d9 0000 	ldr.w	r0, [r9]
     b26:	6840      	ldr	r0, [r0, #4]
     b28:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
     b2c:	2000      	movs	r0, #0
     b2e:	e7c7      	b.n	ac0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
     b30:	2004      	movs	r0, #4
     b32:	e7c5      	b.n	ac0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
     b34:	20000070 	.word	0x20000070

00000b38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
     b38:	b570      	push	{r4, r5, r6, lr}
     b3a:	4c14      	ldr	r4, [pc, #80]	; (b8c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
     b3c:	6823      	ldr	r3, [r4, #0]
     b3e:	b18b      	cbz	r3, b64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
     b40:	7a19      	ldrb	r1, [r3, #8]
     b42:	4281      	cmp	r1, r0
     b44:	d912      	bls.n	b6c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     b46:	685a      	ldr	r2, [r3, #4]
     b48:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
     b4c:	b171      	cbz	r1, b6c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     b4e:	2500      	movs	r5, #0
     b50:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
     b54:	884a      	ldrh	r2, [r1, #2]
     b56:	6818      	ldr	r0, [r3, #0]
     b58:	f007 fbcf 	bl	82fa <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     b5c:	6821      	ldr	r1, [r4, #0]
     b5e:	2000      	movs	r0, #0
     b60:	7a0a      	ldrb	r2, [r1, #8]
     b62:	e00c      	b.n	b7e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
     b64:	21c6      	movs	r1, #198	; 0xc6
     b66:	2018      	movs	r0, #24
     b68:	f7ff fbde 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b6c:	f243 0002 	movw	r0, #12290	; 0x3002
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	684b      	ldr	r3, [r1, #4]
     b74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     b78:	b933      	cbnz	r3, b88 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
     b7a:	1c40      	adds	r0, r0, #1
     b7c:	b2c0      	uxtb	r0, r0
     b7e:	4282      	cmp	r2, r0
     b80:	d8f7      	bhi.n	b72 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
     b82:	6808      	ldr	r0, [r1, #0]
     b84:	f007 fbae 	bl	82e4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
     b88:	2000      	movs	r0, #0
     b8a:	bd70      	pop	{r4, r5, r6, pc}
     b8c:	20000070 	.word	0x20000070

00000b90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
     b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b94:	460d      	mov	r5, r1
     b96:	0004      	movs	r4, r0
     b98:	4690      	mov	r8, r2
     b9a:	f04f 0600 	mov.w	r6, #0
     b9e:	d006      	beq.n	bae <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
     ba0:	2700      	movs	r7, #0
     ba2:	07a0      	lsls	r0, r4, #30
     ba4:	d005      	beq.n	bb2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
     ba6:	2186      	movs	r1, #134	; 0x86
     ba8:	2018      	movs	r0, #24
     baa:	f7ff fbbd 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bae:	2701      	movs	r7, #1
     bb0:	e7f7      	b.n	ba2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
     bb2:	b1cd      	cbz	r5, be8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     bb4:	4611      	mov	r1, r2
     bb6:	2000      	movs	r0, #0
     bb8:	f007 fb78 	bl	82ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     bbc:	300c      	adds	r0, #12
     bbe:	eb00 0685 	add.w	r6, r0, r5, lsl #2
     bc2:	b98f      	cbnz	r7, be8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     bc4:	4f0a      	ldr	r7, [pc, #40]	; (bf0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
     bc6:	f104 000c 	add.w	r0, r4, #12
     bca:	00aa      	lsls	r2, r5, #2
     bcc:	603c      	str	r4, [r7, #0]
     bce:	7225      	strb	r5, [r4, #8]
     bd0:	6060      	str	r0, [r4, #4]
     bd2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     bd6:	6020      	str	r0, [r4, #0]
     bd8:	2100      	movs	r1, #0
     bda:	6860      	ldr	r0, [r4, #4]
     bdc:	f009 fa82 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     be0:	4641      	mov	r1, r8
     be2:	6838      	ldr	r0, [r7, #0]
     be4:	f007 fb62 	bl	82ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     be8:	4630      	mov	r0, r6
     bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     bee:	0000      	.short	0x0000
     bf0:	20000070 	.word	0x20000070

00000bf4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
     bf4:	490a      	ldr	r1, [pc, #40]	; (c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
     bf6:	b510      	push	{r4, lr}
     bf8:	4602      	mov	r2, r0
     bfa:	6809      	ldr	r1, [r1, #0]
     bfc:	2000      	movs	r0, #0
     bfe:	b159      	cbz	r1, c18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
     c00:	7a0b      	ldrb	r3, [r1, #8]
     c02:	4293      	cmp	r3, r2
     c04:	d907      	bls.n	c16 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     c06:	6849      	ldr	r1, [r1, #4]
     c08:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
     c0c:	2900      	cmp	r1, #0
     c0e:	d002      	beq.n	c16 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     c10:	f831 0b04 	ldrh.w	r0, [r1], #4
     c14:	4408      	add	r0, r1
     c16:	bd10      	pop	{r4, pc}
     c18:	21fa      	movs	r1, #250	; 0xfa
     c1a:	2018      	movs	r0, #24
     c1c:	f7ff fb84 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c20:	20000070 	.word	0x20000070
     c24:	b570      	push	{r4, r5, r6, lr}
     c26:	4b1e      	ldr	r3, [pc, #120]	; (ca0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
     c28:	6845      	ldr	r5, [r0, #4]
     c2a:	4604      	mov	r4, r0
     c2c:	2200      	movs	r2, #0
     c2e:	b1a1      	cbz	r1, c5a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
     c30:	2001      	movs	r0, #1
     c32:	7060      	strb	r0, [r4, #1]
     c34:	8858      	ldrh	r0, [r3, #2]
     c36:	0881      	lsrs	r1, r0, #2
     c38:	f05f 0000 	movs.w	r0, #0
     c3c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
     c40:	eb04 0680 	add.w	r6, r4, r0, lsl #2
     c44:	831a      	strh	r2, [r3, #24]
     c46:	8419      	strh	r1, [r3, #32]
     c48:	fb00 5301 	mla	r3, r0, r1, r5
     c4c:	6073      	str	r3, [r6, #4]
     c4e:	1823      	adds	r3, r4, r0
     c50:	1c40      	adds	r0, r0, #1
     c52:	751a      	strb	r2, [r3, #20]
     c54:	2804      	cmp	r0, #4
     c56:	d3f1      	bcc.n	c3c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
     c58:	bd70      	pop	{r4, r5, r6, pc}
     c5a:	7062      	strb	r2, [r4, #1]
     c5c:	f05f 0000 	movs.w	r0, #0
     c60:	eb04 0140 	add.w	r1, r4, r0, lsl #1
     c64:	830a      	strh	r2, [r1, #24]
     c66:	840a      	strh	r2, [r1, #32]
     c68:	eb04 0180 	add.w	r1, r4, r0, lsl #2
     c6c:	604a      	str	r2, [r1, #4]
     c6e:	1821      	adds	r1, r4, r0
     c70:	1c40      	adds	r0, r0, #1
     c72:	750a      	strb	r2, [r1, #20]
     c74:	2804      	cmp	r0, #4
     c76:	d3f3      	bcc.n	c60 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
     c78:	8858      	ldrh	r0, [r3, #2]
     c7a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
     c7e:	d201      	bcs.n	c84 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
     c80:	0846      	lsrs	r6, r0, #1
     c82:	e000      	b.n	c86 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
     c84:	26ff      	movs	r6, #255	; 0xff
     c86:	f007 fc0e 	bl	84a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
     c8a:	6065      	str	r5, [r4, #4]
     c8c:	8420      	strh	r0, [r4, #32]
     c8e:	1829      	adds	r1, r5, r0
     c90:	60a1      	str	r1, [r4, #8]
     c92:	8466      	strh	r6, [r4, #34]	; 0x22
     c94:	60e5      	str	r5, [r4, #12]
     c96:	84a0      	strh	r0, [r4, #36]	; 0x24
     c98:	6121      	str	r1, [r4, #16]
     c9a:	84e6      	strh	r6, [r4, #38]	; 0x26
     c9c:	bd70      	pop	{r4, r5, r6, pc}
     c9e:	0000      	.short	0x0000
     ca0:	20000074 	.word	0x20000074

00000ca4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
     ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ca8:	b158      	cbz	r0, cc2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
     caa:	2500      	movs	r5, #0
     cac:	4411      	add	r1, r2
     cae:	4e24      	ldr	r6, [pc, #144]	; (d40 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
     cb0:	b2cc      	uxtb	r4, r1
     cb2:	2700      	movs	r7, #0
     cb4:	7034      	strb	r4, [r6, #0]
     cb6:	0781      	lsls	r1, r0, #30
     cb8:	d005      	beq.n	cc6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
     cba:	214e      	movs	r1, #78	; 0x4e
     cbc:	2009      	movs	r0, #9
     cbe:	f7ff fb33 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     cc2:	2501      	movs	r5, #1
     cc4:	e7f2      	b.n	cac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
     cc6:	2b1f      	cmp	r3, #31
     cc8:	d804      	bhi.n	cd4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
     cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
     cce:	ea01 0183 	and.w	r1, r1, r3, lsl #2
     cd2:	e009      	b.n	ce8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
     cd4:	0059      	lsls	r1, r3, #1
     cd6:	2bff      	cmp	r3, #255	; 0xff
     cd8:	d90c      	bls.n	cf4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
     cda:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     cde:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
     ce2:	d200      	bcs.n	ce6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
     ce4:	4611      	mov	r1, r2
     ce6:	b289      	uxth	r1, r1
     ce8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
     cec:	1cc9      	adds	r1, r1, #3
     cee:	4011      	ands	r1, r2
     cf0:	b135      	cbz	r5, d00 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
     cf2:	e007      	b.n	d04 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
     cf4:	227c      	movs	r2, #124	; 0x7c
     cf6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
     cfa:	d3f4      	bcc.n	ce6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
     cfc:	217c      	movs	r1, #124	; 0x7c
     cfe:	e7f2      	b.n	ce6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
     d00:	6070      	str	r0, [r6, #4]
     d02:	8071      	strh	r1, [r6, #2]
     d04:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     d08:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
     d0c:	2200      	movs	r2, #0
     d0e:	6876      	ldr	r6, [r6, #4]
     d10:	f04f 0c01 	mov.w	ip, #1
     d14:	e00d      	b.n	d32 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
     d16:	b94d      	cbnz	r5, d2c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
     d18:	eb02 0782 	add.w	r7, r2, r2, lsl #2
     d1c:	eb00 0e03 	add.w	lr, r0, r3
     d20:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
     d24:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
     d28:	f8c7 e004 	str.w	lr, [r7, #4]
     d2c:	1c52      	adds	r2, r2, #1
     d2e:	440b      	add	r3, r1
     d30:	b2d2      	uxtb	r2, r2
     d32:	42a2      	cmp	r2, r4
     d34:	d3ef      	bcc.n	d16 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
     d36:	1ddb      	adds	r3, r3, #7
     d38:	f023 0007 	bic.w	r0, r3, #7
     d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d40:	20000074 	.word	0x20000074

00000d44 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
     d44:	b570      	push	{r4, r5, r6, lr}
     d46:	4a10      	ldr	r2, [pc, #64]	; (d88 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
     d48:	2000      	movs	r0, #0
     d4a:	6851      	ldr	r1, [r2, #4]
     d4c:	7812      	ldrb	r2, [r2, #0]
     d4e:	e014      	b.n	d7a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
     d50:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     d54:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
     d58:	b16b      	cbz	r3, d76 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
     d5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     d5e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
     d62:	d00c      	beq.n	d7e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
     d64:	2500      	movs	r5, #0
     d66:	70a5      	strb	r5, [r4, #2]
     d68:	2101      	movs	r1, #1
     d6a:	4620      	mov	r0, r4
     d6c:	f7ff ff5a 	bl	c24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
     d70:	7025      	strb	r5, [r4, #0]
     d72:	4620      	mov	r0, r4
     d74:	bd70      	pop	{r4, r5, r6, pc}
     d76:	1c40      	adds	r0, r0, #1
     d78:	b2c0      	uxtb	r0, r0
     d7a:	4290      	cmp	r0, r2
     d7c:	d3e8      	bcc.n	d50 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
     d7e:	21a9      	movs	r1, #169	; 0xa9
     d80:	2009      	movs	r0, #9
     d82:	f7ff fad1 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     d86:	0000      	.short	0x0000
     d88:	20000074 	.word	0x20000074

00000d8c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
     d8c:	4804      	ldr	r0, [pc, #16]	; (da0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
     d8e:	b510      	push	{r4, lr}
     d90:	8840      	ldrh	r0, [r0, #2]
     d92:	0884      	lsrs	r4, r0, #2
     d94:	f007 fb87 	bl	84a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
     d98:	4284      	cmp	r4, r0
     d9a:	d300      	bcc.n	d9e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
     d9c:	4620      	mov	r0, r4
     d9e:	bd10      	pop	{r4, pc}
     da0:	20000074 	.word	0x20000074
     da4:	b530      	push	{r4, r5, lr}
     da6:	490d      	ldr	r1, [pc, #52]	; (ddc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
     da8:	2001      	movs	r0, #1
     daa:	6048      	str	r0, [r1, #4]
     dac:	1e82      	subs	r2, r0, #2
     dae:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     db2:	490b      	ldr	r1, [pc, #44]	; (de0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
     db4:	6088      	str	r0, [r1, #8]
     db6:	2300      	movs	r3, #0
     db8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
     dbc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     dc0:	4c08      	ldr	r4, [pc, #32]	; (de4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
     dc2:	6023      	str	r3, [r4, #0]
     dc4:	1d25      	adds	r5, r4, #4
     dc6:	6028      	str	r0, [r5, #0]
     dc8:	6088      	str	r0, [r1, #8]
     dca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     dce:	6023      	str	r3, [r4, #0]
     dd0:	6028      	str	r0, [r5, #0]
     dd2:	4906      	ldr	r1, [pc, #24]	; (dec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
     dd4:	4804      	ldr	r0, [pc, #16]	; (de8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
     dd6:	6008      	str	r0, [r1, #0]
     dd8:	bd30      	pop	{r4, r5, pc}
     dda:	0000      	.short	0x0000
     ddc:	4000e000 	.word	0x4000e000
     de0:	4000f000 	.word	0x4000f000
     de4:	4000f500 	.word	0x4000f500
     de8:	3ff60000 	.word	0x3ff60000
     dec:	4001f508 	.word	0x4001f508

00000df0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
     df0:	b510      	push	{r4, lr}
     df2:	f7ff ffd7 	bl	da4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
     df6:	f007 fc2d 	bl	8654 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
     dfa:	4903      	ldr	r1, [pc, #12]	; (e08 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
     dfc:	4801      	ldr	r0, [pc, #4]	; (e04 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
     dfe:	6008      	str	r0, [r1, #0]
     e00:	bd10      	pop	{r4, pc}
     e02:	0000      	.short	0x0000
     e04:	3ff60000 	.word	0x3ff60000
     e08:	4001f508 	.word	0x4001f508

00000e0c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
     e0c:	b510      	push	{r4, lr}
     e0e:	f7ff ffc9 	bl	da4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
     e12:	f007 fc1f 	bl	8654 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
     e16:	f000 f887 	bl	f28 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
     e1a:	4905      	ldr	r1, [pc, #20]	; (e30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
     e1c:	4803      	ldr	r0, [pc, #12]	; (e2c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
     e1e:	6008      	str	r0, [r1, #0]
     e20:	f000 f8b8 	bl	f94 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
     e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     e28:	f000 b8dc 	b.w	fe4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
     e2c:	3ff60000 	.word	0x3ff60000
     e30:	4001f508 	.word	0x4001f508
     e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e38:	4682      	mov	sl, r0
     e3a:	4838      	ldr	r0, [pc, #224]	; (f1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     e3c:	f008 ffe7 	bl	9e0e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
     e40:	f8df b0d8 	ldr.w	fp, [pc, #216]	; f1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
     e44:	b128      	cbz	r0, e52 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
     e46:	2601      	movs	r6, #1
     e48:	f10b 0001 	add.w	r0, fp, #1
     e4c:	21ff      	movs	r1, #255	; 0xff
     e4e:	7001      	strb	r1, [r0, #0]
     e50:	e000      	b.n	e54 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
     e52:	2600      	movs	r6, #0
     e54:	f44f 7580 	mov.w	r5, #256	; 0x100
     e58:	4c31      	ldr	r4, [pc, #196]	; (f20 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
     e5a:	f04f 0800 	mov.w	r8, #0
     e5e:	1d2f      	adds	r7, r5, #4
     e60:	2101      	movs	r1, #1
     e62:	6061      	str	r1, [r4, #4]
     e64:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     e68:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     e6c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
     e70:	6021      	str	r1, [r4, #0]
     e72:	f8df 90b0 	ldr.w	r9, [pc, #176]	; f24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
     e76:	e01c      	b.n	eb2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     e78:	f8d9 0000 	ldr.w	r0, [r9]
     e7c:	06c0      	lsls	r0, r0, #27
     e7e:	d518      	bpl.n	eb2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     e80:	200e      	movs	r0, #14
     e82:	f007 fbf6 	bl	8672 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
     e86:	f3ef 8010 	mrs	r0, PRIMASK
     e8a:	9000      	str	r0, [sp, #0]
     e8c:	b672      	cpsid	i
     e8e:	2103      	movs	r1, #3
     e90:	4620      	mov	r0, r4
     e92:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
     e96:	4629      	mov	r1, r5
     e98:	f007 fbf8 	bl	868c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     e9c:	b930      	cbnz	r0, eac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     e9e:	4639      	mov	r1, r7
     ea0:	4620      	mov	r0, r4
     ea2:	f007 fbf3 	bl	868c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ea6:	b908      	cbnz	r0, eac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     ea8:	f009 f848 	bl	9f3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
     eac:	9800      	ldr	r0, [sp, #0]
     eae:	b900      	cbnz	r0, eb2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     eb0:	b662      	cpsie	i
     eb2:	4629      	mov	r1, r5
     eb4:	4620      	mov	r0, r4
     eb6:	f007 fbe9 	bl	868c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     eba:	b928      	cbnz	r0, ec8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
     ebc:	4639      	mov	r1, r7
     ebe:	4620      	mov	r0, r4
     ec0:	f007 fbe4 	bl	868c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ec4:	2800      	cmp	r0, #0
     ec6:	d0d7      	beq.n	e78 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
     ec8:	4639      	mov	r1, r7
     eca:	4620      	mov	r0, r4
     ecc:	f007 fbde 	bl	868c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ed0:	2800      	cmp	r0, #0
     ed2:	d1c5      	bne.n	e60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
     ed4:	bb06      	cbnz	r6, f18 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     ed6:	f89b 1001 	ldrb.w	r1, [fp, #1]
     eda:	f88d 1000 	strb.w	r1, [sp]
     ede:	9900      	ldr	r1, [sp, #0]
     ee0:	9100      	str	r1, [sp, #0]
     ee2:	f89d 1000 	ldrb.w	r1, [sp]
     ee6:	b109      	cbz	r1, eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
     ee8:	2501      	movs	r5, #1
     eea:	e000      	b.n	eee <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
     eec:	2500      	movs	r5, #0
     eee:	f10b 0001 	add.w	r0, fp, #1
     ef2:	f880 8000 	strb.w	r8, [r0]
     ef6:	2003      	movs	r0, #3
     ef8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
     efc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     f00:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     f04:	200e      	movs	r0, #14
     f06:	f007 fbb4 	bl	8672 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
     f0a:	4804      	ldr	r0, [pc, #16]	; (f1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     f0c:	f008 ff96 	bl	9e3c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
     f10:	b115      	cbz	r5, f18 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     f12:	2011      	movs	r0, #17
     f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f18:	2000      	movs	r0, #0
     f1a:	e7fb      	b.n	f14 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
     f1c:	20000174 	.word	0x20000174
     f20:	4000e000 	.word	0x4000e000
     f24:	e000ed10 	.word	0xe000ed10

00000f28 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
     f28:	b510      	push	{r4, lr}
     f2a:	4806      	ldr	r0, [pc, #24]	; (f44 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     f2c:	f008 ff82 	bl	9e34 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
     f30:	b118      	cbz	r0, f3a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
     f32:	2130      	movs	r1, #48	; 0x30
     f34:	201d      	movs	r0, #29
     f36:	f7ff f9f7 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f3a:	4802      	ldr	r0, [pc, #8]	; (f44 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     f3c:	2100      	movs	r1, #0
     f3e:	7041      	strb	r1, [r0, #1]
     f40:	bd10      	pop	{r4, pc}
     f42:	0000      	.short	0x0000
     f44:	20000174 	.word	0x20000174

00000f48 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	4911      	ldr	r1, [pc, #68]	; (f90 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
     f4c:	680a      	ldr	r2, [r1, #0]
     f4e:	b1ea      	cbz	r2, f8c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
     f50:	2300      	movs	r3, #0
     f52:	461d      	mov	r5, r3
     f54:	2401      	movs	r4, #1
     f56:	684a      	ldr	r2, [r1, #4]
     f58:	1c52      	adds	r2, r2, #1
     f5a:	604a      	str	r2, [r1, #4]
     f5c:	2a09      	cmp	r2, #9
     f5e:	d300      	bcc.n	f62 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
     f60:	604d      	str	r5, [r1, #4]
     f62:	790e      	ldrb	r6, [r1, #4]
     f64:	fa04 f206 	lsl.w	r2, r4, r6
     f68:	680e      	ldr	r6, [r1, #0]
     f6a:	4216      	tst	r6, r2
     f6c:	d00b      	beq.n	f86 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
     f6e:	f3ef 8310 	mrs	r3, PRIMASK
     f72:	b672      	cpsid	i
     f74:	680c      	ldr	r4, [r1, #0]
     f76:	4394      	bics	r4, r2
     f78:	600c      	str	r4, [r1, #0]
     f7a:	b903      	cbnz	r3, f7e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
     f7c:	b662      	cpsie	i
     f7e:	6849      	ldr	r1, [r1, #4]
     f80:	6001      	str	r1, [r0, #0]
     f82:	2000      	movs	r0, #0
     f84:	bd70      	pop	{r4, r5, r6, pc}
     f86:	1c5b      	adds	r3, r3, #1
     f88:	2b09      	cmp	r3, #9
     f8a:	d3e4      	bcc.n	f56 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
     f8c:	2005      	movs	r0, #5
     f8e:	bd70      	pop	{r4, r5, r6, pc}
     f90:	2000007c 	.word	0x2000007c

00000f94 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
     f94:	4802      	ldr	r0, [pc, #8]	; (fa0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
     f96:	2100      	movs	r1, #0
     f98:	6001      	str	r1, [r0, #0]
     f9a:	6041      	str	r1, [r0, #4]
     f9c:	4770      	bx	lr
     f9e:	0000      	.short	0x0000
     fa0:	2000007c 	.word	0x2000007c

00000fa4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
     fa4:	b510      	push	{r4, lr}
     fa6:	4c04      	ldr	r4, [pc, #16]	; (fb8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
     fa8:	7820      	ldrb	r0, [r4, #0]
     faa:	28ff      	cmp	r0, #255	; 0xff
     fac:	d003      	beq.n	fb6 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
     fae:	f006 fb4b 	bl	7648 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     fb2:	20ff      	movs	r0, #255	; 0xff
     fb4:	7020      	strb	r0, [r4, #0]
     fb6:	bd10      	pop	{r4, pc}
     fb8:	20000000 	.word	0x20000000

00000fbc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
     fbc:	b510      	push	{r4, lr}
     fbe:	4c08      	ldr	r4, [pc, #32]	; (fe0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
     fc0:	7861      	ldrb	r1, [r4, #1]
     fc2:	b109      	cbz	r1, fc8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
     fc4:	200f      	movs	r0, #15
     fc6:	bd10      	pop	{r4, pc}
     fc8:	f006 fb04 	bl	75d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     fcc:	7020      	strb	r0, [r4, #0]
     fce:	28ff      	cmp	r0, #255	; 0xff
     fd0:	d001      	beq.n	fd6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
     fd2:	2000      	movs	r0, #0
     fd4:	bd10      	pop	{r4, pc}
     fd6:	2173      	movs	r1, #115	; 0x73
     fd8:	201f      	movs	r0, #31
     fda:	f7ff f9a5 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fde:	0000      	.short	0x0000
     fe0:	20000000 	.word	0x20000000

00000fe4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
     fe4:	4901      	ldr	r1, [pc, #4]	; (fec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
     fe6:	2000      	movs	r0, #0
     fe8:	7048      	strb	r0, [r1, #1]
     fea:	4770      	bx	lr
     fec:	20000000 	.word	0x20000000
     ff0:	4905      	ldr	r1, [pc, #20]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     ff2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
     ff4:	4282      	cmp	r2, r0
     ff6:	d105      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     ff8:	2000      	movs	r0, #0
     ffa:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
     ffe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1002:	8488      	strh	r0, [r1, #36]	; 0x24
    1004:	4770      	bx	lr
    1006:	0000      	.short	0x0000
    1008:	20000c58 	.word	0x20000c58

0000100c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    100c:	4a0a      	ldr	r2, [pc, #40]	; (1038 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    100e:	b110      	cbz	r0, 1016 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1010:	2801      	cmp	r0, #1
    1012:	d007      	beq.n	1024 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1014:	e00e      	b.n	1034 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1016:	7850      	ldrb	r0, [r2, #1]
    1018:	b160      	cbz	r0, 1034 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    101a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    101e:	6008      	str	r0, [r1, #0]
    1020:	88d0      	ldrh	r0, [r2, #6]
    1022:	e004      	b.n	102e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1024:	7810      	ldrb	r0, [r2, #0]
    1026:	b128      	cbz	r0, 1034 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1028:	6890      	ldr	r0, [r2, #8]
    102a:	6008      	str	r0, [r1, #0]
    102c:	8990      	ldrh	r0, [r2, #12]
    102e:	8088      	strh	r0, [r1, #4]
    1030:	2001      	movs	r0, #1
    1032:	4770      	bx	lr
    1034:	2000      	movs	r0, #0
    1036:	4770      	bx	lr
    1038:	20000176 	.word	0x20000176

0000103c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    103c:	4a08      	ldr	r2, [pc, #32]	; (1060 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    103e:	2301      	movs	r3, #1
    1040:	b138      	cbz	r0, 1052 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1042:	2801      	cmp	r0, #1
    1044:	d104      	bne.n	1050 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1046:	7013      	strb	r3, [r2, #0]
    1048:	6808      	ldr	r0, [r1, #0]
    104a:	6090      	str	r0, [r2, #8]
    104c:	8888      	ldrh	r0, [r1, #4]
    104e:	8190      	strh	r0, [r2, #12]
    1050:	4770      	bx	lr
    1052:	7053      	strb	r3, [r2, #1]
    1054:	6808      	ldr	r0, [r1, #0]
    1056:	f8c2 0002 	str.w	r0, [r2, #2]
    105a:	8888      	ldrh	r0, [r1, #4]
    105c:	80d0      	strh	r0, [r2, #6]
    105e:	4770      	bx	lr
    1060:	20000176 	.word	0x20000176

00001064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1064:	4906      	ldr	r1, [pc, #24]	; (1080 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    1066:	b110      	cbz	r0, 106e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1068:	2801      	cmp	r0, #1
    106a:	d002      	beq.n	1072 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    106c:	e005      	b.n	107a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    106e:	7848      	ldrb	r0, [r1, #1]
    1070:	e000      	b.n	1074 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    1072:	7808      	ldrb	r0, [r1, #0]
    1074:	b108      	cbz	r0, 107a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1076:	2001      	movs	r0, #1
    1078:	4770      	bx	lr
    107a:	2000      	movs	r0, #0
    107c:	4770      	bx	lr
    107e:	0000      	.short	0x0000
    1080:	20000176 	.word	0x20000176

00001084 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    1084:	4901      	ldr	r1, [pc, #4]	; (108c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    1086:	7708      	strb	r0, [r1, #28]
    1088:	4770      	bx	lr
    108a:	0000      	.short	0x0000
    108c:	2000051a 	.word	0x2000051a

00001090 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    1090:	4800      	ldr	r0, [pc, #0]	; (1094 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    1092:	4770      	bx	lr
    1094:	20000e08 	.word	0x20000e08

00001098 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    1098:	4904      	ldr	r1, [pc, #16]	; (10ac <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    109a:	784a      	ldrb	r2, [r1, #1]
    109c:	4282      	cmp	r2, r0
    109e:	d903      	bls.n	10a8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    10a0:	4408      	add	r0, r1
    10a2:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    10a6:	4770      	bx	lr
    10a8:	2000      	movs	r0, #0
    10aa:	4770      	bx	lr
    10ac:	20000c7e 	.word	0x20000c7e

000010b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    10b0:	4904      	ldr	r1, [pc, #16]	; (10c4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    10b2:	784a      	ldrb	r2, [r1, #1]
    10b4:	4282      	cmp	r2, r0
    10b6:	d903      	bls.n	10c0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    10b8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    10bc:	3082      	adds	r0, #130	; 0x82
    10be:	4770      	bx	lr
    10c0:	2000      	movs	r0, #0
    10c2:	4770      	bx	lr
    10c4:	20000c7e 	.word	0x20000c7e

000010c8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    10c8:	4a05      	ldr	r2, [pc, #20]	; (10e0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    10ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    10ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    10d2:	6802      	ldr	r2, [r0, #0]
    10d4:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    10d8:	8880      	ldrh	r0, [r0, #4]
    10da:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    10de:	4770      	bx	lr
    10e0:	20000c7e 	.word	0x20000c7e

000010e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    10e4:	4904      	ldr	r1, [pc, #16]	; (10f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    10e6:	784a      	ldrb	r2, [r1, #1]
    10e8:	4282      	cmp	r2, r0
    10ea:	d903      	bls.n	10f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    10ec:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    10f0:	1c80      	adds	r0, r0, #2
    10f2:	4770      	bx	lr
    10f4:	2000      	movs	r0, #0
    10f6:	4770      	bx	lr
    10f8:	20000c7e 	.word	0x20000c7e

000010fc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    10fc:	b510      	push	{r4, lr}
    10fe:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    1102:	2100      	movs	r1, #0
    1104:	4805      	ldr	r0, [pc, #20]	; (111c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    1106:	f008 ffed 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    110a:	4805      	ldr	r0, [pc, #20]	; (1120 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    110c:	2100      	movs	r1, #0
    110e:	7001      	strb	r1, [r0, #0]
    1110:	7041      	strb	r1, [r0, #1]
    1112:	f44f 7161 	mov.w	r1, #900	; 0x384
    1116:	8041      	strh	r1, [r0, #2]
    1118:	bd10      	pop	{r4, pc}
    111a:	0000      	.short	0x0000
    111c:	20000c7e 	.word	0x20000c7e
    1120:	2000016c 	.word	0x2000016c

00001124 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    1126:	b510      	push	{r4, lr}
    1128:	785c      	ldrb	r4, [r3, #1]
    112a:	4284      	cmp	r4, r0
    112c:	d910      	bls.n	1150 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    112e:	4418      	add	r0, r3
    1130:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    1134:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1138:	4418      	add	r0, r3
    113a:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    113e:	700b      	strb	r3, [r1, #0]
    1140:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    1144:	6011      	str	r1, [r2, #0]
    1146:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    114a:	8090      	strh	r0, [r2, #4]
    114c:	2001      	movs	r0, #1
    114e:	bd10      	pop	{r4, pc}
    1150:	2000      	movs	r0, #0
    1152:	bd10      	pop	{r4, pc}
    1154:	20000c7e 	.word	0x20000c7e

00001158 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    1158:	4801      	ldr	r0, [pc, #4]	; (1160 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    115a:	8840      	ldrh	r0, [r0, #2]
    115c:	4770      	bx	lr
    115e:	0000      	.short	0x0000
    1160:	2000016c 	.word	0x2000016c

00001164 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    1164:	4905      	ldr	r1, [pc, #20]	; (117c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    1166:	784a      	ldrb	r2, [r1, #1]
    1168:	4282      	cmp	r2, r0
    116a:	d903      	bls.n	1174 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    116c:	4408      	add	r0, r1
    116e:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    1172:	b108      	cbz	r0, 1178 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    1174:	2000      	movs	r0, #0
    1176:	4770      	bx	lr
    1178:	2001      	movs	r0, #1
    117a:	4770      	bx	lr
    117c:	20000c7e 	.word	0x20000c7e

00001180 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    1180:	4901      	ldr	r1, [pc, #4]	; (1188 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    1182:	7048      	strb	r0, [r1, #1]
    1184:	4770      	bx	lr
    1186:	0000      	.short	0x0000
    1188:	2000016c 	.word	0x2000016c
    118c:	4602      	mov	r2, r0
    118e:	4809      	ldr	r0, [pc, #36]	; (11b4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    1190:	b510      	push	{r4, lr}
    1192:	7800      	ldrb	r0, [r0, #0]
    1194:	460b      	mov	r3, r1
    1196:	b158      	cbz	r0, 11b0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    1198:	4807      	ldr	r0, [pc, #28]	; (11b8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    119a:	7841      	ldrb	r1, [r0, #1]
    119c:	b141      	cbz	r1, 11b0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    119e:	b10b      	cbz	r3, 11a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    11a0:	1c80      	adds	r0, r0, #2
    11a2:	e001      	b.n	11a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    11a4:	4804      	ldr	r0, [pc, #16]	; (11b8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    11a6:	3082      	adds	r0, #130	; 0x82
    11a8:	f001 fdb6 	bl	2d18 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    11ac:	2001      	movs	r0, #1
    11ae:	bd10      	pop	{r4, pc}
    11b0:	2000      	movs	r0, #0
    11b2:	bd10      	pop	{r4, pc}
    11b4:	2000016c 	.word	0x2000016c
    11b8:	20000c7e 	.word	0x20000c7e
    11bc:	4908      	ldr	r1, [pc, #32]	; (11e0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    11be:	b510      	push	{r4, lr}
    11c0:	4603      	mov	r3, r0
    11c2:	2000      	movs	r0, #0
    11c4:	784a      	ldrb	r2, [r1, #1]
    11c6:	e006      	b.n	11d6 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    11c8:	180c      	adds	r4, r1, r0
    11ca:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    11ce:	429c      	cmp	r4, r3
    11d0:	d004      	beq.n	11dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    11d2:	1c40      	adds	r0, r0, #1
    11d4:	b2c0      	uxtb	r0, r0
    11d6:	4282      	cmp	r2, r0
    11d8:	d8f6      	bhi.n	11c8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    11da:	2008      	movs	r0, #8
    11dc:	bd10      	pop	{r4, pc}
    11de:	0000      	.short	0x0000
    11e0:	20000c7e 	.word	0x20000c7e
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	4c1a      	ldr	r4, [pc, #104]	; (1250 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    11e8:	4603      	mov	r3, r0
    11ea:	2000      	movs	r0, #0
    11ec:	7825      	ldrb	r5, [r4, #0]
    11ee:	e02b      	b.n	1248 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    11f0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    11f4:	4422      	add	r2, r4
    11f6:	780f      	ldrb	r7, [r1, #0]
    11f8:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    11fc:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    1200:	ea87 070c 	eor.w	r7, r7, ip
    1204:	405e      	eors	r6, r3
    1206:	443e      	add	r6, r7
    1208:	784f      	ldrb	r7, [r1, #1]
    120a:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    120e:	ea87 070c 	eor.w	r7, r7, ip
    1212:	443e      	add	r6, r7
    1214:	788f      	ldrb	r7, [r1, #2]
    1216:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    121a:	ea87 070c 	eor.w	r7, r7, ip
    121e:	443e      	add	r6, r7
    1220:	78cf      	ldrb	r7, [r1, #3]
    1222:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    1226:	ea87 070c 	eor.w	r7, r7, ip
    122a:	443e      	add	r6, r7
    122c:	790f      	ldrb	r7, [r1, #4]
    122e:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    1232:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    1236:	ea87 070c 	eor.w	r7, r7, ip
    123a:	443e      	add	r6, r7
    123c:	794f      	ldrb	r7, [r1, #5]
    123e:	4057      	eors	r7, r2
    1240:	42f7      	cmn	r7, r6
    1242:	d004      	beq.n	124e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    1244:	1c40      	adds	r0, r0, #1
    1246:	b2c0      	uxtb	r0, r0
    1248:	4285      	cmp	r5, r0
    124a:	d8d1      	bhi.n	11f0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    124c:	2008      	movs	r0, #8
    124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1250:	20000c7e 	.word	0x20000c7e

00001254 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    1254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1258:	4604      	mov	r4, r0
    125a:	f100 0580 	add.w	r5, r0, #128	; 0x80
    125e:	f04f 0901 	mov.w	r9, #1
    1262:	b171      	cbz	r1, 1282 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    1264:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    1268:	1e7e      	subs	r6, r7, #1
    126a:	2901      	cmp	r1, #1
    126c:	d029      	beq.n	12c2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    126e:	2902      	cmp	r1, #2
    1270:	d04e      	beq.n	1310 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    1272:	2903      	cmp	r1, #3
    1274:	d123      	bne.n	12be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    1276:	4639      	mov	r1, r7
    1278:	4630      	mov	r0, r6
    127a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    127e:	f007 bb1d 	b.w	88bc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    1282:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    1286:	2100      	movs	r1, #0
    1288:	f008 ff2c 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    128c:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    1290:	4924      	ldr	r1, [pc, #144]	; (1324 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    1292:	66e9      	str	r1, [r5, #108]	; 0x6c
    1294:	4620      	mov	r0, r4
    1296:	2107      	movs	r1, #7
    1298:	6729      	str	r1, [r5, #112]	; 0x70
    129a:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    129e:	f021 0104 	bic.w	r1, r1, #4
    12a2:	7001      	strb	r1, [r0, #0]
    12a4:	20fe      	movs	r0, #254	; 0xfe
    12a6:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    12aa:	207f      	movs	r0, #127	; 0x7f
    12ac:	7668      	strb	r0, [r5, #25]
    12ae:	481e      	ldr	r0, [pc, #120]	; (1328 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    12b0:	60a8      	str	r0, [r5, #8]
    12b2:	2000      	movs	r0, #0
    12b4:	e9c5 0000 	strd	r0, r0, [r5]
    12b8:	2020      	movs	r0, #32
    12ba:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f04f 0800 	mov.w	r8, #0
    12c6:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    12ca:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    12ce:	6921      	ldr	r1, [r4, #16]
    12d0:	4816      	ldr	r0, [pc, #88]	; (132c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    12d2:	460a      	mov	r2, r1
    12d4:	4408      	add	r0, r1
    12d6:	fbb0 f0f1 	udiv	r0, r0, r1
    12da:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    12de:	f640 30b8 	movw	r0, #3000	; 0xbb8
    12e2:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    12e6:	8b63      	ldrh	r3, [r4, #26]
    12e8:	4628      	mov	r0, r5
    12ea:	f000 f821 	bl	1330 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    12ee:	4639      	mov	r1, r7
    12f0:	4630      	mov	r0, r6
    12f2:	f007 fae3 	bl	88bc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    12f6:	f008 fdfd 	bl	9ef4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    12fa:	b118      	cbz	r0, 1304 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    12fc:	6960      	ldr	r0, [r4, #20]
    12fe:	f000 f9a9 	bl	1654 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    1302:	b110      	cbz	r0, 130a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    1304:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    1308:	e7d9      	b.n	12be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    130a:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    130e:	e7d6      	b.n	12be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    1310:	6901      	ldr	r1, [r0, #16]
    1312:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    1316:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    131a:	4628      	mov	r0, r5
    131c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1320:	f000 b806 	b.w	1330 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    1324:	c404492f 	.word	0xc404492f
    1328:	fffce000 	.word	0xfffce000
    132c:	01c9c37f 	.word	0x01c9c37f
    1330:	b510      	push	{r4, lr}
    1332:	2400      	movs	r4, #0
    1334:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    1338:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    133c:	434c      	muls	r4, r1
    133e:	fbb4 f4f2 	udiv	r4, r4, r2
    1342:	f820 4910 	strh.w	r4, [r0], #-16
    1346:	f240 2471 	movw	r4, #625	; 0x271
    134a:	4363      	muls	r3, r4
    134c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1350:	1e5b      	subs	r3, r3, #1
    1352:	fbb3 f3f2 	udiv	r3, r3, r2
    1356:	81c3      	strh	r3, [r0, #14]
    1358:	4b09      	ldr	r3, [pc, #36]	; (1380 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    135a:	fbb3 f3f2 	udiv	r3, r3, r2
    135e:	1c5b      	adds	r3, r3, #1
    1360:	8283      	strh	r3, [r0, #20]
    1362:	8903      	ldrh	r3, [r0, #8]
    1364:	4363      	muls	r3, r4
    1366:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    136a:	1e5b      	subs	r3, r3, #1
    136c:	fbb3 f3f2 	udiv	r3, r3, r2
    1370:	6043      	str	r3, [r0, #4]
    1372:	6803      	ldr	r3, [r0, #0]
    1374:	434b      	muls	r3, r1
    1376:	fbb3 f1f2 	udiv	r1, r3, r2
    137a:	6001      	str	r1, [r0, #0]
    137c:	bd10      	pop	{r4, pc}
    137e:	0000      	.short	0x0000
    1380:	02625a00 	.word	0x02625a00

00001384 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    1384:	4902      	ldr	r1, [pc, #8]	; (1390 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    1386:	f991 1000 	ldrsb.w	r1, [r1]
    138a:	f007 ba8c 	b.w	88a6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    138e:	0000      	.short	0x0000
    1390:	20000184 	.word	0x20000184

00001394 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    1394:	b508      	push	{r3, lr}
    1396:	207f      	movs	r0, #127	; 0x7f
    1398:	f88d 0000 	strb.w	r0, [sp]
    139c:	4668      	mov	r0, sp
    139e:	f002 f89f 	bl	34e0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    13a2:	b140      	cbz	r0, 13b6 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    13a4:	4805      	ldr	r0, [pc, #20]	; (13bc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    13a6:	7840      	ldrb	r0, [r0, #1]
    13a8:	4240      	negs	r0, r0
    13aa:	b241      	sxtb	r1, r0
    13ac:	f99d 0000 	ldrsb.w	r0, [sp]
    13b0:	f007 fa79 	bl	88a6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    13b4:	bd08      	pop	{r3, pc}
    13b6:	f99d 0000 	ldrsb.w	r0, [sp]
    13ba:	bd08      	pop	{r3, pc}
    13bc:	20000184 	.word	0x20000184

000013c0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    13c0:	4a01      	ldr	r2, [pc, #4]	; (13c8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    13c2:	7010      	strb	r0, [r2, #0]
    13c4:	7051      	strb	r1, [r2, #1]
    13c6:	4770      	bx	lr
    13c8:	20000184 	.word	0x20000184

000013cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    13cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13d0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    13d4:	4f5e      	ldr	r7, [pc, #376]	; (1550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    13d6:	4683      	mov	fp, r0
    13d8:	f04f 0a01 	mov.w	sl, #1
    13dc:	2600      	movs	r6, #0
    13de:	6878      	ldr	r0, [r7, #4]
    13e0:	4635      	mov	r5, r6
    13e2:	7a00      	ldrb	r0, [r0, #8]
    13e4:	f88d 0000 	strb.w	r0, [sp]
    13e8:	9800      	ldr	r0, [sp, #0]
    13ea:	9000      	str	r0, [sp, #0]
    13ec:	f89d 1000 	ldrb.w	r1, [sp]
    13f0:	2910      	cmp	r1, #16
    13f2:	d106      	bne.n	1402 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    13f4:	f899 1013 	ldrb.w	r1, [r9, #19]
    13f8:	b119      	cbz	r1, 1402 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    13fa:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    13fe:	2800      	cmp	r0, #0
    1400:	d073      	beq.n	14ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1402:	f88d 6000 	strb.w	r6, [sp]
    1406:	4668      	mov	r0, sp
    1408:	f000 f8ac 	bl	1564 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    140c:	f89d 1000 	ldrb.w	r1, [sp]
    1410:	2900      	cmp	r1, #0
    1412:	d1f8      	bne.n	1406 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1414:	2800      	cmp	r0, #0
    1416:	d068      	beq.n	14ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1418:	4604      	mov	r4, r0
    141a:	7a00      	ldrb	r0, [r0, #8]
    141c:	f88d 0000 	strb.w	r0, [sp]
    1420:	9800      	ldr	r0, [sp, #0]
    1422:	9000      	str	r0, [sp, #0]
    1424:	f89d 8000 	ldrb.w	r8, [sp]
    1428:	f104 0008 	add.w	r0, r4, #8
    142c:	2105      	movs	r1, #5
    142e:	9000      	str	r0, [sp, #0]
    1430:	7001      	strb	r1, [r0, #0]
    1432:	4640      	mov	r0, r8
    1434:	f1b8 0f08 	cmp.w	r8, #8
    1438:	d042      	beq.n	14c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    143a:	dc07      	bgt.n	144c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    143c:	2802      	cmp	r0, #2
    143e:	d00d      	beq.n	145c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    1440:	2803      	cmp	r0, #3
    1442:	d017      	beq.n	1474 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    1444:	f1b8 0f04 	cmp.w	r8, #4
    1448:	d105      	bne.n	1456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    144a:	e01d      	b.n	1488 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    144c:	280f      	cmp	r0, #15
    144e:	d052      	beq.n	14f6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1450:	f1b8 0f10 	cmp.w	r8, #16
    1454:	d059      	beq.n	150a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    1456:	f240 214a 	movw	r1, #586	; 0x24a
    145a:	e065      	b.n	1528 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    145c:	6862      	ldr	r2, [r4, #4]
    145e:	b132      	cbz	r2, 146e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    1460:	4659      	mov	r1, fp
    1462:	4620      	mov	r0, r4
    1464:	4790      	blx	r2
    1466:	2004      	movs	r0, #4
    1468:	f360 0507 	bfi	r5, r0, #0, #8
    146c:	e010      	b.n	1490 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    146e:	f240 11c3 	movw	r1, #451	; 0x1c3
    1472:	e059      	b.n	1528 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1474:	6862      	ldr	r2, [r4, #4]
    1476:	b122      	cbz	r2, 1482 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    1478:	4659      	mov	r1, fp
    147a:	4620      	mov	r0, r4
    147c:	4790      	blx	r2
    147e:	4605      	mov	r5, r0
    1480:	e006      	b.n	1490 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    1482:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    1486:	e04f      	b.n	1528 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1488:	6861      	ldr	r1, [r4, #4]
    148a:	b1b1      	cbz	r1, 14ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    148c:	4620      	mov	r0, r4
    148e:	4788      	blx	r1
    1490:	f3c5 2007 	ubfx	r0, r5, #8, #8
    1494:	2801      	cmp	r0, #1
    1496:	d04a      	beq.n	152e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    1498:	f3ef 8110 	mrs	r1, PRIMASK
    149c:	b672      	cpsid	i
    149e:	7a20      	ldrb	r0, [r4, #8]
    14a0:	f88d 0000 	strb.w	r0, [sp]
    14a4:	9800      	ldr	r0, [sp, #0]
    14a6:	9000      	str	r0, [sp, #0]
    14a8:	f89d 0000 	ldrb.w	r0, [sp]
    14ac:	2805      	cmp	r0, #5
    14ae:	d042      	beq.n	1536 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    14b0:	b3b0      	cbz	r0, 1520 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    14b2:	f366 0507 	bfi	r5, r6, #0, #8
    14b6:	b3a1      	cbz	r1, 1522 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    14b8:	e041      	b.n	153e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    14ba:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    14be:	e033      	b.n	1528 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    14c0:	6860      	ldr	r0, [r4, #4]
    14c2:	465d      	mov	r5, fp
    14c4:	b198      	cbz	r0, 14ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    14c6:	8804      	ldrh	r4, [r0, #0]
    14c8:	4620      	mov	r0, r4
    14ca:	f7ff fb93 	bl	bf4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    14ce:	b180      	cbz	r0, 14f2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    14d0:	706e      	strb	r6, [r5, #1]
    14d2:	210d      	movs	r1, #13
    14d4:	7029      	strb	r1, [r5, #0]
    14d6:	80ec      	strh	r4, [r5, #6]
    14d8:	f8a5 a008 	strh.w	sl, [r5, #8]
    14dc:	f885 a004 	strb.w	sl, [r5, #4]
    14e0:	4631      	mov	r1, r6
    14e2:	f006 fe88 	bl	81f6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    14e6:	2004      	movs	r0, #4
    14e8:	613e      	str	r6, [r7, #16]
    14ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ee:	21e5      	movs	r1, #229	; 0xe5
    14f0:	e01a      	b.n	1528 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    14f2:	21c5      	movs	r1, #197	; 0xc5
    14f4:	e018      	b.n	1528 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    14f6:	f88b 6001 	strb.w	r6, [fp, #1]
    14fa:	2116      	movs	r1, #22
    14fc:	f88b 1000 	strb.w	r1, [fp]
    1500:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1504:	f8cb 1004 	str.w	r1, [fp, #4]
    1508:	e7ad      	b.n	1466 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    150a:	4812      	ldr	r0, [pc, #72]	; (1554 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    150c:	6802      	ldr	r2, [r0, #0]
    150e:	b122      	cbz	r2, 151a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    1510:	6860      	ldr	r0, [r4, #4]
    1512:	b138      	cbz	r0, 1524 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    1514:	8800      	ldrh	r0, [r0, #0]
    1516:	4659      	mov	r1, fp
    1518:	4790      	blx	r2
    151a:	2002      	movs	r0, #2
    151c:	613e      	str	r6, [r7, #16]
    151e:	e7e4      	b.n	14ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1520:	e009      	b.n	1536 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    1522:	e00b      	b.n	153c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    1524:	f44f 7110 	mov.w	r1, #576	; 0x240
    1528:	2010      	movs	r0, #16
    152a:	f7fe fefd 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    152e:	9800      	ldr	r0, [sp, #0]
    1530:	4641      	mov	r1, r8
    1532:	7001      	strb	r1, [r0, #0]
    1534:	e003      	b.n	153e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    1536:	7226      	strb	r6, [r4, #8]
    1538:	613e      	str	r6, [r7, #16]
    153a:	e7bc      	b.n	14b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    153c:	b662      	cpsie	i
    153e:	f015 0fff 	tst.w	r5, #255	; 0xff
    1542:	f43f af4c 	beq.w	13de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    1546:	b2e8      	uxtb	r0, r5
    1548:	e7cf      	b.n	14ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    154a:	0000      	.short	0x0000
    154c:	20000b80 	.word	0x20000b80
    1550:	20000bac 	.word	0x20000bac
    1554:	20000084 	.word	0x20000084

00001558 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    1558:	4901      	ldr	r1, [pc, #4]	; (1560 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    155a:	7008      	strb	r0, [r1, #0]
    155c:	f000 b864 	b.w	1628 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    1560:	20000186 	.word	0x20000186
    1564:	b538      	push	{r3, r4, r5, lr}
    1566:	4603      	mov	r3, r0
    1568:	4917      	ldr	r1, [pc, #92]	; (15c8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    156a:	2000      	movs	r0, #0
    156c:	7018      	strb	r0, [r3, #0]
    156e:	6908      	ldr	r0, [r1, #16]
    1570:	2401      	movs	r4, #1
    1572:	b140      	cbz	r0, 1586 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    1574:	7a02      	ldrb	r2, [r0, #8]
    1576:	f88d 2000 	strb.w	r2, [sp]
    157a:	9a00      	ldr	r2, [sp, #0]
    157c:	9200      	str	r2, [sp, #0]
    157e:	f89d 5000 	ldrb.w	r5, [sp]
    1582:	2d00      	cmp	r5, #0
    1584:	d111      	bne.n	15aa <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    1586:	6848      	ldr	r0, [r1, #4]
    1588:	7a02      	ldrb	r2, [r0, #8]
    158a:	f88d 2000 	strb.w	r2, [sp]
    158e:	9a00      	ldr	r2, [sp, #0]
    1590:	9200      	str	r2, [sp, #0]
    1592:	f89d 5000 	ldrb.w	r5, [sp]
    1596:	2d01      	cmp	r5, #1
    1598:	d006      	beq.n	15a8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    159a:	f3ef 8210 	mrs	r2, PRIMASK
    159e:	b672      	cpsid	i
    15a0:	6805      	ldr	r5, [r0, #0]
    15a2:	604d      	str	r5, [r1, #4]
    15a4:	b112      	cbz	r2, 15ac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    15a6:	e002      	b.n	15ae <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    15a8:	2000      	movs	r0, #0
    15aa:	bd38      	pop	{r3, r4, r5, pc}
    15ac:	b662      	cpsie	i
    15ae:	7a02      	ldrb	r2, [r0, #8]
    15b0:	f88d 2000 	strb.w	r2, [sp]
    15b4:	9a00      	ldr	r2, [sp, #0]
    15b6:	9200      	str	r2, [sp, #0]
    15b8:	f89d 5000 	ldrb.w	r5, [sp]
    15bc:	b10d      	cbz	r5, 15c2 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    15be:	6108      	str	r0, [r1, #16]
    15c0:	bd38      	pop	{r3, r4, r5, pc}
    15c2:	701c      	strb	r4, [r3, #0]
    15c4:	bd38      	pop	{r3, r4, r5, pc}
    15c6:	0000      	.short	0x0000
    15c8:	20000bac 	.word	0x20000bac
    15cc:	b538      	push	{r3, r4, r5, lr}
    15ce:	b1d0      	cbz	r0, 1606 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    15d0:	6041      	str	r1, [r0, #4]
    15d2:	f100 0108 	add.w	r1, r0, #8
    15d6:	700a      	strb	r2, [r1, #0]
    15d8:	f3ef 8310 	mrs	r3, PRIMASK
    15dc:	b672      	cpsid	i
    15de:	4c10      	ldr	r4, [pc, #64]	; (1620 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    15e0:	6004      	str	r4, [r0, #0]
    15e2:	1f21      	subs	r1, r4, #4
    15e4:	684a      	ldr	r2, [r1, #4]
    15e6:	b14a      	cbz	r2, 15fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    15e8:	7a12      	ldrb	r2, [r2, #8]
    15ea:	f88d 2000 	strb.w	r2, [sp]
    15ee:	9a00      	ldr	r2, [sp, #0]
    15f0:	9200      	str	r2, [sp, #0]
    15f2:	f89d 5000 	ldrb.w	r5, [sp]
    15f6:	2d01      	cmp	r5, #1
    15f8:	d100      	bne.n	15fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    15fa:	600c      	str	r4, [r1, #0]
    15fc:	680a      	ldr	r2, [r1, #0]
    15fe:	6010      	str	r0, [r2, #0]
    1600:	6008      	str	r0, [r1, #0]
    1602:	b12b      	cbz	r3, 1610 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    1604:	e005      	b.n	1612 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    1606:	f240 2175 	movw	r1, #629	; 0x275
    160a:	2010      	movs	r0, #16
    160c:	f7fe fe8c 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1610:	b662      	cpsie	i
    1612:	4804      	ldr	r0, [pc, #16]	; (1624 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    1614:	7800      	ldrb	r0, [r0, #0]
    1616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    161a:	f005 bff9 	b.w	7610 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    161e:	0000      	.short	0x0000
    1620:	20000bb0 	.word	0x20000bb0
    1624:	20000186 	.word	0x20000186
    1628:	b510      	push	{r4, lr}
    162a:	2214      	movs	r2, #20
    162c:	2100      	movs	r1, #0
    162e:	4808      	ldr	r0, [pc, #32]	; (1650 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1630:	f008 fd58 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1634:	4806      	ldr	r0, [pc, #24]	; (1650 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1636:	2212      	movs	r2, #18
    1638:	2100      	movs	r1, #0
    163a:	3814      	subs	r0, #20
    163c:	f008 fd52 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1640:	4803      	ldr	r0, [pc, #12]	; (1650 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1642:	2101      	movs	r1, #1
    1644:	7301      	strb	r1, [r0, #12]
    1646:	1d01      	adds	r1, r0, #4
    1648:	6041      	str	r1, [r0, #4]
    164a:	6001      	str	r1, [r0, #0]
    164c:	bd10      	pop	{r4, pc}
    164e:	0000      	.short	0x0000
    1650:	20000bac 	.word	0x20000bac

00001654 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	f06f 021f 	mvn.w	r2, #31
    165a:	0c01      	lsrs	r1, r0, #16
    165c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    1660:	251f      	movs	r5, #31
    1662:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    1666:	3854      	subs	r0, #84	; 0x54
    1668:	d00d      	beq.n	1686 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    166a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    166e:	3855      	subs	r0, #85	; 0x55
    1670:	d009      	beq.n	1686 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1672:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    1676:	38aa      	subs	r0, #170	; 0xaa
    1678:	d005      	beq.n	1686 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    167a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    167e:	38aa      	subs	r0, #170	; 0xaa
    1680:	d001      	beq.n	1686 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1682:	2001      	movs	r0, #1
    1684:	e000      	b.n	1688 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    1686:	2000      	movs	r0, #0
    1688:	2200      	movs	r2, #0
    168a:	4613      	mov	r3, r2
    168c:	ea4f 0402 	mov.w	r4, r2
    1690:	ea82 0701 	eor.w	r7, r2, r1
    1694:	43ff      	mvns	r7, r7
    1696:	431f      	orrs	r7, r3
    1698:	1c7f      	adds	r7, r7, #1
    169a:	d00f      	beq.n	16bc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    169c:	f006 0701 	and.w	r7, r6, #1
    16a0:	0852      	lsrs	r2, r2, #1
    16a2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    16a6:	f005 0701 	and.w	r7, r5, #1
    16aa:	085b      	lsrs	r3, r3, #1
    16ac:	0876      	lsrs	r6, r6, #1
    16ae:	086d      	lsrs	r5, r5, #1
    16b0:	1c64      	adds	r4, r4, #1
    16b2:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    16b6:	2c16      	cmp	r4, #22
    16b8:	d3ea      	bcc.n	1690 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    16ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16bc:	2000      	movs	r0, #0
    16be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000016c0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    16c0:	b510      	push	{r4, lr}
    16c2:	4804      	ldr	r0, [pc, #16]	; (16d4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    16c4:	f007 f9d3 	bl	8a6e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    16c8:	4802      	ldr	r0, [pc, #8]	; (16d4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    16ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16ce:	3008      	adds	r0, #8
    16d0:	f007 b9cd 	b.w	8a6e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    16d4:	20000088 	.word	0x20000088

000016d8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    16d8:	4801      	ldr	r0, [pc, #4]	; (16e0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    16da:	f000 b809 	b.w	16f0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    16de:	0000      	.short	0x0000
    16e0:	20000088 	.word	0x20000088

000016e4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    16e4:	4801      	ldr	r0, [pc, #4]	; (16ec <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    16e6:	f000 b803 	b.w	16f0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    16ea:	0000      	.short	0x0000
    16ec:	20000090 	.word	0x20000090
    16f0:	b510      	push	{r4, lr}
    16f2:	e9d0 2100 	ldrd	r2, r1, [r0]
    16f6:	4b09      	ldr	r3, [pc, #36]	; (171c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    16f8:	4c09      	ldr	r4, [pc, #36]	; (1720 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    16fa:	4353      	muls	r3, r2
    16fc:	4354      	muls	r4, r2
    16fe:	4051      	eors	r1, r2
    1700:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    1704:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    1708:	ea4f 41f1 	mov.w	r1, r1, ror #19
    170c:	e9c0 2100 	strd	r2, r1, [r0]
    1710:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    1714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1718:	4618      	mov	r0, r3
    171a:	bd10      	pop	{r4, pc}
    171c:	c6ef3760 	.word	0xc6ef3760
    1720:	9e3779bb 	.word	0x9e3779bb

00001724 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    1724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1726:	f007 f9c7 	bl	8ab8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    172a:	4604      	mov	r4, r0
    172c:	460d      	mov	r5, r1
    172e:	466a      	mov	r2, sp
    1730:	f000 f862 	bl	17f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1734:	b108      	cbz	r0, 173a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    1736:	2001      	movs	r0, #1
    1738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    173a:	480f      	ldr	r0, [pc, #60]	; (1778 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    173c:	7803      	ldrb	r3, [r0, #0]
    173e:	7841      	ldrb	r1, [r0, #1]
    1740:	428b      	cmp	r3, r1
    1742:	d101      	bne.n	1748 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    1744:	2000      	movs	r0, #0
    1746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1748:	461a      	mov	r2, r3
    174a:	6841      	ldr	r1, [r0, #4]
    174c:	e008      	b.n	1760 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    174e:	bf00      	nop
    1750:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1754:	1e52      	subs	r2, r2, #1
    1756:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    175a:	e9c6 7c00 	strd	r7, ip, [r6]
    175e:	b2d2      	uxtb	r2, r2
    1760:	f89d 6000 	ldrb.w	r6, [sp]
    1764:	42b2      	cmp	r2, r6
    1766:	d8f3      	bhi.n	1750 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    1768:	b2f2      	uxtb	r2, r6
    176a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    176e:	1c5b      	adds	r3, r3, #1
    1770:	e9c1 4500 	strd	r4, r5, [r1]
    1774:	7003      	strb	r3, [r0, #0]
    1776:	e7de      	b.n	1736 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    1778:	20000098 	.word	0x20000098

0000177c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    177c:	b510      	push	{r4, lr}
    177e:	0742      	lsls	r2, r0, #29
    1780:	d003      	beq.n	178a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    1782:	2163      	movs	r1, #99	; 0x63
    1784:	2048      	movs	r0, #72	; 0x48
    1786:	f7fe fdcf 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    178a:	b120      	cbz	r0, 1796 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    178c:	4a03      	ldr	r2, [pc, #12]	; (179c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    178e:	7051      	strb	r1, [r2, #1]
    1790:	6050      	str	r0, [r2, #4]
    1792:	2000      	movs	r0, #0
    1794:	7010      	strb	r0, [r2, #0]
    1796:	00c8      	lsls	r0, r1, #3
    1798:	bd10      	pop	{r4, pc}
    179a:	0000      	.short	0x0000
    179c:	20000098 	.word	0x20000098

000017a0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    17a0:	b538      	push	{r3, r4, r5, lr}
    17a2:	f007 f989 	bl	8ab8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    17a6:	466a      	mov	r2, sp
    17a8:	f000 f826 	bl	17f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    17ac:	2800      	cmp	r0, #0
    17ae:	d014      	beq.n	17da <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    17b0:	4a0a      	ldr	r2, [pc, #40]	; (17dc <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    17b2:	7810      	ldrb	r0, [r2, #0]
    17b4:	1e40      	subs	r0, r0, #1
    17b6:	b2c1      	uxtb	r1, r0
    17b8:	7011      	strb	r1, [r2, #0]
    17ba:	f89d 0000 	ldrb.w	r0, [sp]
    17be:	6852      	ldr	r2, [r2, #4]
    17c0:	e008      	b.n	17d4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    17c2:	bf00      	nop
    17c4:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    17c8:	1c40      	adds	r0, r0, #1
    17ca:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    17ce:	e9c3 4500 	strd	r4, r5, [r3]
    17d2:	b2c0      	uxtb	r0, r0
    17d4:	4288      	cmp	r0, r1
    17d6:	d3f5      	bcc.n	17c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    17d8:	2001      	movs	r0, #1
    17da:	bd38      	pop	{r3, r4, r5, pc}
    17dc:	20000098 	.word	0x20000098

000017e0 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    17e0:	4901      	ldr	r1, [pc, #4]	; (17e8 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    17e2:	2000      	movs	r0, #0
    17e4:	7008      	strb	r0, [r1, #0]
    17e6:	4770      	bx	lr
    17e8:	20000098 	.word	0x20000098

000017ec <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    17ec:	4801      	ldr	r0, [pc, #4]	; (17f4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    17ee:	7840      	ldrb	r0, [r0, #1]
    17f0:	4770      	bx	lr
    17f2:	0000      	.short	0x0000
    17f4:	20000098 	.word	0x20000098
    17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fa:	4d20      	ldr	r5, [pc, #128]	; (187c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    17fc:	2300      	movs	r3, #0
    17fe:	7013      	strb	r3, [r2, #0]
    1800:	782b      	ldrb	r3, [r5, #0]
    1802:	b323      	cbz	r3, 184e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    1804:	2400      	movs	r4, #0
    1806:	1e5b      	subs	r3, r3, #1
    1808:	b2db      	uxtb	r3, r3
    180a:	f8d5 c004 	ldr.w	ip, [r5, #4]
    180e:	e00b      	b.n	1828 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    1810:	18e5      	adds	r5, r4, r3
    1812:	086d      	lsrs	r5, r5, #1
    1814:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    1818:	e9d6 7600 	ldrd	r7, r6, [r6]
    181c:	1a3f      	subs	r7, r7, r0
    181e:	418e      	sbcs	r6, r1
    1820:	d201      	bcs.n	1826 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    1822:	462c      	mov	r4, r5
    1824:	e000      	b.n	1828 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    1826:	462b      	mov	r3, r5
    1828:	1b1d      	subs	r5, r3, r4
    182a:	2d01      	cmp	r5, #1
    182c:	dcf0      	bgt.n	1810 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    182e:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    1832:	e9d6 5600 	ldrd	r5, r6, [r6]
    1836:	ea80 0705 	eor.w	r7, r0, r5
    183a:	ea81 0e06 	eor.w	lr, r1, r6
    183e:	ea57 070e 	orrs.w	r7, r7, lr
    1842:	d005      	beq.n	1850 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    1844:	1b45      	subs	r5, r0, r5
    1846:	eb71 0506 	sbcs.w	r5, r1, r6
    184a:	d203      	bcs.n	1854 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    184c:	7014      	strb	r4, [r2, #0]
    184e:	e010      	b.n	1872 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    1850:	7014      	strb	r4, [r2, #0]
    1852:	e011      	b.n	1878 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    1854:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    1858:	e9d5 4500 	ldrd	r4, r5, [r5]
    185c:	ea80 0604 	eor.w	r6, r0, r4
    1860:	ea81 0705 	eor.w	r7, r1, r5
    1864:	433e      	orrs	r6, r7
    1866:	d006      	beq.n	1876 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    1868:	1b00      	subs	r0, r0, r4
    186a:	41a9      	sbcs	r1, r5
    186c:	d300      	bcc.n	1870 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    186e:	1c5b      	adds	r3, r3, #1
    1870:	7013      	strb	r3, [r2, #0]
    1872:	2000      	movs	r0, #0
    1874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1876:	7013      	strb	r3, [r2, #0]
    1878:	2001      	movs	r0, #1
    187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    187c:	20000098 	.word	0x20000098

00001880 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    1880:	b570      	push	{r4, r5, r6, lr}
    1882:	4604      	mov	r4, r0
    1884:	7c00      	ldrb	r0, [r0, #16]
    1886:	b300      	cbz	r0, 18ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    1888:	2802      	cmp	r0, #2
    188a:	d01e      	beq.n	18ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    188c:	f05f 0001 	movs.w	r0, #1
    1890:	f104 0151 	add.w	r1, r4, #81	; 0x51
    1894:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    1898:	460d      	mov	r5, r1
    189a:	b1c0      	cbz	r0, 18ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    189c:	7de0      	ldrb	r0, [r4, #23]
    189e:	b1f0      	cbz	r0, 18de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    18a0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    18a4:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    18a8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    18ac:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    18b0:	7c20      	ldrb	r0, [r4, #16]
    18b2:	f007 f931 	bl	8b18 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    18b6:	7620      	strb	r0, [r4, #24]
    18b8:	2008      	movs	r0, #8
    18ba:	7660      	strb	r0, [r4, #25]
    18bc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    18c0:	4629      	mov	r1, r5
    18c2:	f007 f915 	bl	8af0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    18c6:	b9a8      	cbnz	r0, 18f4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    18c8:	e00e      	b.n	18e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    18ca:	2000      	movs	r0, #0
    18cc:	e7e0      	b.n	1890 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    18ce:	2000      	movs	r0, #0
    18d0:	f7ff fb9c 	bl	100c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    18d4:	2800      	cmp	r0, #0
    18d6:	d1eb      	bne.n	18b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    18d8:	f240 41ba 	movw	r1, #1210	; 0x4ba
    18dc:	e001      	b.n	18e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    18de:	f240 41be 	movw	r1, #1214	; 0x4be
    18e2:	202d      	movs	r0, #45	; 0x2d
    18e4:	f7fe fd20 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    18e8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    18ec:	4629      	mov	r1, r5
    18ee:	f007 f908 	bl	8b02 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    18f2:	b100      	cbz	r0, 18f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    18f4:	2001      	movs	r0, #1
    18f6:	76a0      	strb	r0, [r4, #26]
    18f8:	7e20      	ldrb	r0, [r4, #24]
    18fa:	b130      	cbz	r0, 190a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    18fc:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    1900:	f104 0158 	add.w	r1, r4, #88	; 0x58
    1904:	f006 ff4d 	bl	87a2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    1908:	7660      	strb	r0, [r4, #25]
    190a:	f7ff fc25 	bl	1158 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    190e:	490c      	ldr	r1, [pc, #48]	; (1940 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    1910:	fba0 2301 	umull	r2, r3, r0, r1
    1914:	f104 0048 	add.w	r0, r4, #72	; 0x48
    1918:	f007 fa68 	bl	8dec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    191c:	2100      	movs	r1, #0
    191e:	4620      	mov	r0, r4
    1920:	f007 fa1d 	bl	8d5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    1924:	2000      	movs	r0, #0
    1926:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    192a:	78a0      	ldrb	r0, [r4, #2]
    192c:	0740      	lsls	r0, r0, #29
    192e:	d505      	bpl.n	193c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    1930:	4620      	mov	r0, r4
    1932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1936:	2100      	movs	r1, #0
    1938:	f000 bd84 	b.w	2444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    193c:	bd70      	pop	{r4, r5, r6, pc}
    193e:	0000      	.short	0x0000
    1940:	000f4240 	.word	0x000f4240

00001944 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    1944:	b530      	push	{r4, r5, lr}
    1946:	460c      	mov	r4, r1
    1948:	b08d      	sub	sp, #52	; 0x34
    194a:	4605      	mov	r5, r0
    194c:	4601      	mov	r1, r0
    194e:	2224      	movs	r2, #36	; 0x24
    1950:	a802      	add	r0, sp, #8
    1952:	f008 fb4d 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1956:	a80b      	add	r0, sp, #44	; 0x2c
    1958:	f007 faa5 	bl	8ea6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    195c:	7aa0      	ldrb	r0, [r4, #10]
    195e:	f88d 0018 	strb.w	r0, [sp, #24]
    1962:	7820      	ldrb	r0, [r4, #0]
    1964:	f88d 0008 	strb.w	r0, [sp, #8]
    1968:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    196c:	f8ad 0000 	strh.w	r0, [sp]
    1970:	f89d 0000 	ldrb.w	r0, [sp]
    1974:	f000 0101 	and.w	r1, r0, #1
    1978:	f3c0 0240 	ubfx	r2, r0, #1, #1
    197c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    1980:	f3c0 0280 	ubfx	r2, r0, #2, #1
    1984:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    1988:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    198c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    1990:	f3c0 1200 	ubfx	r2, r0, #4, #1
    1994:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    1998:	f3c0 1240 	ubfx	r2, r0, #5, #1
    199c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    19a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    19a4:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    19a8:	f8ad 000a 	strh.w	r0, [sp, #10]
    19ac:	7d20      	ldrb	r0, [r4, #20]
    19ae:	2801      	cmp	r0, #1
    19b0:	d006      	beq.n	19c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    19b2:	2802      	cmp	r0, #2
    19b4:	d004      	beq.n	19c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    19b6:	f240 21e9 	movw	r1, #745	; 0x2e9
    19ba:	2006      	movs	r0, #6
    19bc:	f7fe fcb4 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19c0:	f88d 000c 	strb.w	r0, [sp, #12]
    19c4:	7a61      	ldrb	r1, [r4, #9]
    19c6:	a80b      	add	r0, sp, #44	; 0x2c
    19c8:	f007 fa54 	bl	8e74 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    19cc:	7d20      	ldrb	r0, [r4, #20]
    19ce:	2101      	movs	r1, #1
    19d0:	2802      	cmp	r0, #2
    19d2:	d102      	bne.n	19da <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    19d4:	7d60      	ldrb	r0, [r4, #21]
    19d6:	1c40      	adds	r0, r0, #1
    19d8:	b2c1      	uxtb	r1, r0
    19da:	7ea0      	ldrb	r0, [r4, #26]
    19dc:	1c40      	adds	r0, r0, #1
    19de:	b2c2      	uxtb	r2, r0
    19e0:	a80b      	add	r0, sp, #44	; 0x2c
    19e2:	f007 fa0e 	bl	8e02 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    19e6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    19ea:	0700      	lsls	r0, r0, #28
    19ec:	d501      	bpl.n	19f2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    19ee:	2000      	movs	r0, #0
    19f0:	e020      	b.n	1a34 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    19f2:	a80b      	add	r0, sp, #44	; 0x2c
    19f4:	f007 fa17 	bl	8e26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    19f8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    19fc:	2228      	movs	r2, #40	; 0x28
    19fe:	f000 fd7d 	bl	24fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    1a02:	f240 2171 	movw	r1, #625	; 0x271
    1a06:	f200 20db 	addw	r0, r0, #731	; 0x2db
    1a0a:	fbb0 f0f1 	udiv	r0, r0, r1
    1a0e:	4348      	muls	r0, r1
    1a10:	f8d4 1002 	ldr.w	r1, [r4, #2]
    1a14:	f240 2371 	movw	r3, #625	; 0x271
    1a18:	0a0a      	lsrs	r2, r1, #8
    1a1a:	f240 2171 	movw	r1, #625	; 0x271
    1a1e:	434a      	muls	r2, r1
    1a20:	f8d4 1005 	ldr.w	r1, [r4, #5]
    1a24:	0a09      	lsrs	r1, r1, #8
    1a26:	4359      	muls	r1, r3
    1a28:	4290      	cmp	r0, r2
    1a2a:	d801      	bhi.n	1a30 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    1a2c:	9204      	str	r2, [sp, #16]
    1a2e:	e004      	b.n	1a3a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    1a30:	4288      	cmp	r0, r1
    1a32:	d801      	bhi.n	1a38 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    1a34:	9004      	str	r0, [sp, #16]
    1a36:	e000      	b.n	1a3a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    1a38:	9104      	str	r1, [sp, #16]
    1a3a:	7ca0      	ldrb	r0, [r4, #18]
    1a3c:	f88d 0017 	strb.w	r0, [sp, #23]
    1a40:	7e20      	ldrb	r0, [r4, #24]
    1a42:	2801      	cmp	r0, #1
    1a44:	d000      	beq.n	1a48 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    1a46:	2000      	movs	r0, #0
    1a48:	f88d 0014 	strb.w	r0, [sp, #20]
    1a4c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    1a4e:	f006 fd38 	bl	84c2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    1a52:	6b68      	ldr	r0, [r5, #52]	; 0x34
    1a54:	f006 fddd 	bl	8612 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    1a58:	2224      	movs	r2, #36	; 0x24
    1a5a:	a902      	add	r1, sp, #8
    1a5c:	4628      	mov	r0, r5
    1a5e:	f008 fac7 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a62:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1a64:	62a8      	str	r0, [r5, #40]	; 0x28
    1a66:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    1a6a:	85a8      	strh	r0, [r5, #44]	; 0x2c
    1a6c:	7ae0      	ldrb	r0, [r4, #11]
    1a6e:	b168      	cbz	r0, 1a8c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    1a70:	2802      	cmp	r0, #2
    1a72:	d00b      	beq.n	1a8c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    1a74:	f05f 0001 	movs.w	r0, #1
    1a78:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    1a7c:	68e0      	ldr	r0, [r4, #12]
    1a7e:	65a8      	str	r0, [r5, #88]	; 0x58
    1a80:	8a20      	ldrh	r0, [r4, #16]
    1a82:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    1a86:	b00d      	add	sp, #52	; 0x34
    1a88:	2000      	movs	r0, #0
    1a8a:	bd30      	pop	{r4, r5, pc}
    1a8c:	2000      	movs	r0, #0
    1a8e:	e7f3      	b.n	1a78 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00001a90 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    1a90:	4a0a      	ldr	r2, [pc, #40]	; (1abc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    1a92:	b510      	push	{r4, lr}
    1a94:	2100      	movs	r1, #0
    1a96:	7011      	strb	r1, [r2, #0]
    1a98:	4c09      	ldr	r4, [pc, #36]	; (1ac0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    1a9a:	6060      	str	r0, [r4, #4]
    1a9c:	f000 f822 	bl	1ae4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    1aa0:	b110      	cbz	r0, 1aa8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    1aa2:	f240 312e 	movw	r1, #814	; 0x32e
    1aa6:	e004      	b.n	1ab2 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    1aa8:	68a0      	ldr	r0, [r4, #8]
    1aaa:	2800      	cmp	r0, #0
    1aac:	d104      	bne.n	1ab8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    1aae:	f240 3131 	movw	r1, #817	; 0x331
    1ab2:	202d      	movs	r0, #45	; 0x2d
    1ab4:	f7fe fc38 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ab8:	bd10      	pop	{r4, pc}
    1aba:	0000      	.short	0x0000
    1abc:	20000bc0 	.word	0x20000bc0
    1ac0:	200000a0 	.word	0x200000a0

00001ac4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    1ac4:	4902      	ldr	r1, [pc, #8]	; (1ad0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    1ac6:	4801      	ldr	r0, [pc, #4]	; (1acc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    1ac8:	6088      	str	r0, [r1, #8]
    1aca:	4770      	bx	lr
    1acc:	000024e4 	.word	0x000024e4
    1ad0:	200000a0 	.word	0x200000a0

00001ad4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    1ad4:	4902      	ldr	r1, [pc, #8]	; (1ae0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    1ad6:	6008      	str	r0, [r1, #0]
    1ad8:	6889      	ldr	r1, [r1, #8]
    1ada:	6809      	ldr	r1, [r1, #0]
    1adc:	4708      	bx	r1
    1ade:	0000      	.short	0x0000
    1ae0:	200000a0 	.word	0x200000a0

00001ae4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    1ae4:	4808      	ldr	r0, [pc, #32]	; (1b08 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    1ae6:	b510      	push	{r4, lr}
    1ae8:	7800      	ldrb	r0, [r0, #0]
    1aea:	b110      	cbz	r0, 1af2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    1aec:	240c      	movs	r4, #12
    1aee:	4620      	mov	r0, r4
    1af0:	bd10      	pop	{r4, pc}
    1af2:	2400      	movs	r4, #0
    1af4:	2218      	movs	r2, #24
    1af6:	4621      	mov	r1, r4
    1af8:	4803      	ldr	r0, [pc, #12]	; (1b08 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    1afa:	f008 faf3 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1afe:	f001 fa03 	bl	2f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1b02:	f001 f921 	bl	2d48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1b06:	e7f2      	b.n	1aee <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    1b08:	20000bc0 	.word	0x20000bc0

00001b0c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    1b0c:	4904      	ldr	r1, [pc, #16]	; (1b20 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    1b0e:	b510      	push	{r4, lr}
    1b10:	7809      	ldrb	r1, [r1, #0]
    1b12:	2901      	cmp	r1, #1
    1b14:	d101      	bne.n	1b1a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    1b16:	f000 fbcd 	bl	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1b1a:	2000      	movs	r0, #0
    1b1c:	bd10      	pop	{r4, pc}
    1b1e:	0000      	.short	0x0000
    1b20:	20000bc0 	.word	0x20000bc0

00001b24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    1b24:	b510      	push	{r4, lr}
    1b26:	4604      	mov	r4, r0
    1b28:	7880      	ldrb	r0, [r0, #2]
    1b2a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b2e:	b158      	cbz	r0, 1b48 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    1b30:	233c      	movs	r3, #60	; 0x3c
    1b32:	22ff      	movs	r2, #255	; 0xff
    1b34:	4620      	mov	r0, r4
    1b36:	69e1      	ldr	r1, [r4, #28]
    1b38:	f000 fbe2 	bl	2300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    1b3c:	2202      	movs	r2, #2
    1b3e:	4904      	ldr	r1, [pc, #16]	; (1b50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    1b40:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    1b44:	f006 ff7f 	bl	8a46 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1b48:	2001      	movs	r0, #1
    1b4a:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    1b4e:	bd10      	pop	{r4, pc}
    1b50:	00008cf7 	.word	0x00008cf7
    1b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b58:	000f      	movs	r7, r1
    1b5a:	4604      	mov	r4, r0
    1b5c:	d023      	beq.n	1ba6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    1b5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1b62:	4605      	mov	r5, r0
    1b64:	f007 f988 	bl	8e78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    1b68:	b9b0      	cbnz	r0, 1b98 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    1b6a:	78a0      	ldrb	r0, [r4, #2]
    1b6c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b70:	b350      	cbz	r0, 1bc8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    1b72:	4628      	mov	r0, r5
    1b74:	f007 f957 	bl	8e26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    1b78:	4606      	mov	r6, r0
    1b7a:	4628      	mov	r0, r5
    1b7c:	f007 f97c 	bl	8e78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    1b80:	1a30      	subs	r0, r6, r0
    1b82:	b2c0      	uxtb	r0, r0
    1b84:	f007 f9cd 	bl	8f22 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    1b88:	4601      	mov	r1, r0
    1b8a:	4835      	ldr	r0, [pc, #212]	; (1c60 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    1b8c:	6842      	ldr	r2, [r0, #4]
    1b8e:	4411      	add	r1, r2
    1b90:	6041      	str	r1, [r0, #4]
    1b92:	4628      	mov	r0, r5
    1b94:	f007 f98e 	bl	8eb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    1b98:	4628      	mov	r0, r5
    1b9a:	f007 f950 	bl	8e3e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    1b9e:	4601      	mov	r1, r0
    1ba0:	4620      	mov	r0, r4
    1ba2:	f007 f918 	bl	8dd6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    1ba6:	4d2f      	ldr	r5, [pc, #188]	; (1c64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    1ba8:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    1bac:	2100      	movs	r1, #0
    1bae:	6868      	ldr	r0, [r5, #4]
    1bb0:	8001      	strh	r1, [r0, #0]
    1bb2:	f007 f891 	bl	8cd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    1bb6:	8860      	ldrh	r0, [r4, #2]
    1bb8:	2813      	cmp	r0, #19
    1bba:	d013      	beq.n	1be4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    1bbc:	dc09      	bgt.n	1bd2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    1bbe:	2810      	cmp	r0, #16
    1bc0:	d036      	beq.n	1c30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    1bc2:	2812      	cmp	r0, #18
    1bc4:	d109      	bne.n	1bda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    1bc6:	e031      	b.n	1c2c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    1bc8:	4620      	mov	r0, r4
    1bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1bce:	f000 bb71 	b.w	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1bd2:	2815      	cmp	r0, #21
    1bd4:	d00f      	beq.n	1bf6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    1bd6:	281d      	cmp	r0, #29
    1bd8:	d00d      	beq.n	1bf6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    1bda:	f240 6173 	movw	r1, #1651	; 0x673
    1bde:	202d      	movs	r0, #45	; 0x2d
    1be0:	f7fe fba2 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1be4:	2100      	movs	r1, #0
    1be6:	6868      	ldr	r0, [r5, #4]
    1be8:	f006 fea6 	bl	8938 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1bec:	2101      	movs	r1, #1
    1bee:	6868      	ldr	r0, [r5, #4]
    1bf0:	f007 f872 	bl	8cd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    1bf4:	e020      	b.n	1c38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    1bf6:	2101      	movs	r1, #1
    1bf8:	6868      	ldr	r0, [r5, #4]
    1bfa:	f006 fe9d 	bl	8938 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1bfe:	2101      	movs	r1, #1
    1c00:	6868      	ldr	r0, [r5, #4]
    1c02:	f007 f869 	bl	8cd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    1c06:	b136      	cbz	r6, 1c16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    1c08:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    1c0c:	6868      	ldr	r0, [r5, #4]
    1c0e:	f006 feae 	bl	896e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1c12:	2101      	movs	r1, #1
    1c14:	e006      	b.n	1c24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    1c16:	f104 0158 	add.w	r1, r4, #88	; 0x58
    1c1a:	6868      	ldr	r0, [r5, #4]
    1c1c:	f006 fea7 	bl	896e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1c20:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    1c24:	6868      	ldr	r0, [r5, #4]
    1c26:	f006 fea8 	bl	897a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    1c2a:	e005      	b.n	1c38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    1c2c:	2106      	movs	r1, #6
    1c2e:	e000      	b.n	1c32 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    1c30:	2102      	movs	r1, #2
    1c32:	6868      	ldr	r0, [r5, #4]
    1c34:	f006 fe80 	bl	8938 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1c38:	4620      	mov	r0, r4
    1c3a:	f000 fc31 	bl	24a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>
    1c3e:	8860      	ldrh	r0, [r4, #2]
    1c40:	281d      	cmp	r0, #29
    1c42:	d007      	beq.n	1c54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    1c44:	2815      	cmp	r0, #21
    1c46:	d005      	beq.n	1c54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    1c48:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    1c4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1c4e:	6868      	ldr	r0, [r5, #4]
    1c50:	f006 fe62 	bl	8918 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    1c54:	4639      	mov	r1, r7
    1c56:	4620      	mov	r0, r4
    1c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1c5c:	f000 b9f4 	b.w	2048 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    1c60:	20000bc0 	.word	0x20000bc0
    1c64:	200000a0 	.word	0x200000a0
    1c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c6c:	4d2f      	ldr	r5, [pc, #188]	; (1d2c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    1c6e:	4680      	mov	r8, r0
    1c70:	7828      	ldrb	r0, [r5, #0]
    1c72:	2802      	cmp	r0, #2
    1c74:	d005      	beq.n	1c82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    1c76:	7828      	ldrb	r0, [r5, #0]
    1c78:	2803      	cmp	r0, #3
    1c7a:	d002      	beq.n	1c82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    1c7c:	f640 512d 	movw	r1, #3373	; 0xd2d
    1c80:	e02b      	b.n	1cda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    1c82:	4c2b      	ldr	r4, [pc, #172]	; (1d30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    1c84:	6826      	ldr	r6, [r4, #0]
    1c86:	7b30      	ldrb	r0, [r6, #12]
    1c88:	b118      	cbz	r0, 1c92 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    1c8a:	f7ff fb83 	bl	1394 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1c8e:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    1c92:	f8d4 c004 	ldr.w	ip, [r4, #4]
    1c96:	2700      	movs	r7, #0
    1c98:	f1b8 0f00 	cmp.w	r8, #0
    1c9c:	f89c 0000 	ldrb.w	r0, [ip]
    1ca0:	f000 060f 	and.w	r6, r0, #15
    1ca4:	d027      	beq.n	1cf6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    1ca6:	6821      	ldr	r1, [r4, #0]
    1ca8:	09c0      	lsrs	r0, r0, #7
    1caa:	f101 0351 	add.w	r3, r1, #81	; 0x51
    1cae:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    1cb2:	f10c 0109 	add.w	r1, ip, #9
    1cb6:	f006 fd02 	bl	86be <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    1cba:	b1e0      	cbz	r0, 1cf6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    1cbc:	4639      	mov	r1, r7
    1cbe:	6860      	ldr	r0, [r4, #4]
    1cc0:	f006 fe1a 	bl	88f8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    1cc4:	b1b8      	cbz	r0, 1cf6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    1cc6:	782a      	ldrb	r2, [r5, #0]
    1cc8:	6820      	ldr	r0, [r4, #0]
    1cca:	4631      	mov	r1, r6
    1ccc:	2a02      	cmp	r2, #2
    1cce:	d007      	beq.n	1ce0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    1cd0:	782a      	ldrb	r2, [r5, #0]
    1cd2:	2a03      	cmp	r2, #3
    1cd4:	d004      	beq.n	1ce0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    1cd6:	f640 5106 	movw	r1, #3334	; 0xd06
    1cda:	202d      	movs	r0, #45	; 0x2d
    1cdc:	f7fe fb24 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ce0:	68a2      	ldr	r2, [r4, #8]
    1ce2:	782b      	ldrb	r3, [r5, #0]
    1ce4:	6952      	ldr	r2, [r2, #20]
    1ce6:	f06f 0607 	mvn.w	r6, #7
    1cea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1cee:	58d2      	ldr	r2, [r2, r3]
    1cf0:	4790      	blx	r2
    1cf2:	4606      	mov	r6, r0
    1cf4:	e000      	b.n	1cf8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    1cf6:	2601      	movs	r6, #1
    1cf8:	7ba8      	ldrb	r0, [r5, #14]
    1cfa:	b118      	cbz	r0, 1d04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    1cfc:	f001 f904 	bl	2f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1d00:	f001 f822 	bl	2d48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1d04:	2e00      	cmp	r6, #0
    1d06:	d00f      	beq.n	1d28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    1d08:	6820      	ldr	r0, [r4, #0]
    1d0a:	f007 f920 	bl	8f4e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    1d0e:	b130      	cbz	r0, 1d1e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    1d10:	f001 f91c 	bl	2f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1d14:	68a0      	ldr	r0, [r4, #8]
    1d16:	6880      	ldr	r0, [r0, #8]
    1d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1d1c:	4700      	bx	r0
    1d1e:	6820      	ldr	r0, [r4, #0]
    1d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1d24:	f000 bac6 	b.w	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d2c:	20000bc0 	.word	0x20000bc0
    1d30:	200000a0 	.word	0x200000a0
    1d34:	b510      	push	{r4, lr}
    1d36:	2903      	cmp	r1, #3
    1d38:	d002      	beq.n	1d40 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    1d3a:	2905      	cmp	r1, #5
    1d3c:	d10a      	bne.n	1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>
    1d3e:	e002      	b.n	1d46 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    1d40:	f000 fb4e 	bl	23e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    1d44:	e003      	b.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d46:	4904      	ldr	r1, [pc, #16]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d48:	6809      	ldr	r1, [r1, #0]
    1d4a:	b109      	cbz	r1, 1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d4c:	4788      	blx	r1
    1d4e:	b108      	cbz	r0, 1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>
    1d50:	2000      	movs	r0, #0
    1d52:	bd10      	pop	{r4, pc}
    1d54:	2001      	movs	r0, #1
    1d56:	bd10      	pop	{r4, pc}
    1d58:	200000ac 	.word	0x200000ac
    1d5c:	4a09      	ldr	r2, [pc, #36]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d5e:	0003      	movs	r3, r0
    1d60:	6810      	ldr	r0, [r2, #0]
    1d62:	d001      	beq.n	1d68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d64:	f000 baa6 	b.w	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1d68:	2900      	cmp	r1, #0
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	6891      	ldr	r1, [r2, #8]
    1d6e:	4a06      	ldr	r2, [pc, #24]	; (1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>)
    1d70:	6909      	ldr	r1, [r1, #16]
    1d72:	7812      	ldrb	r2, [r2, #0]
    1d74:	f06f 030f 	mvn.w	r3, #15
    1d78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1d7c:	5889      	ldr	r1, [r1, r2]
    1d7e:	4708      	bx	r1
    1d80:	4770      	bx	lr
    1d82:	0000      	.short	0x0000
    1d84:	200000a0 	.word	0x200000a0
    1d88:	20000bc0 	.word	0x20000bc0
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	4604      	mov	r4, r0
    1d90:	8840      	ldrh	r0, [r0, #2]
    1d92:	2810      	cmp	r0, #16
    1d94:	d019      	beq.n	1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1d96:	4d10      	ldr	r5, [pc, #64]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1d98:	7ba8      	ldrb	r0, [r5, #14]
    1d9a:	b120      	cbz	r0, 1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d9c:	f000 fff4 	bl	2d88 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    1da0:	2040      	movs	r0, #64	; 0x40
    1da2:	f001 f8bf 	bl	2f24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    1da6:	480d      	ldr	r0, [pc, #52]	; (1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1da8:	6840      	ldr	r0, [r0, #4]
    1daa:	f001 faf3 	bl	3394 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1dae:	78a0      	ldrb	r0, [r4, #2]
    1db0:	0740      	lsls	r0, r0, #29
    1db2:	d404      	bmi.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1db4:	2100      	movs	r1, #0
    1db6:	7922      	ldrb	r2, [r4, #4]
    1db8:	4608      	mov	r0, r1
    1dba:	f001 fb73 	bl	34a4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1dbe:	2000      	movs	r0, #0
    1dc0:	f001 f9ba 	bl	3138 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1dc4:	2002      	movs	r0, #2
    1dc6:	7028      	strb	r0, [r5, #0]
    1dc8:	bd70      	pop	{r4, r5, r6, pc}
    1dca:	4620      	mov	r0, r4
    1dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1dd0:	2101      	movs	r1, #1
    1dd2:	f7ff bebf 	b.w	1b54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    1dd6:	0000      	.short	0x0000
    1dd8:	20000bc0 	.word	0x20000bc0
    1ddc:	200000a0 	.word	0x200000a0
    1de0:	b510      	push	{r4, lr}
    1de2:	4c12      	ldr	r4, [pc, #72]	; (1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>)
    1de4:	6820      	ldr	r0, [r4, #0]
    1de6:	f000 f825 	bl	1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>
    1dea:	6820      	ldr	r0, [r4, #0]
    1dec:	f007 f8af 	bl	8f4e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    1df0:	2800      	cmp	r0, #0
    1df2:	6820      	ldr	r0, [r4, #0]
    1df4:	d00b      	beq.n	1e0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1df6:	490e      	ldr	r1, [pc, #56]	; (1e30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>)
    1df8:	780a      	ldrb	r2, [r1, #0]
    1dfa:	2a02      	cmp	r2, #2
    1dfc:	d00b      	beq.n	1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1dfe:	780a      	ldrb	r2, [r1, #0]
    1e00:	2a03      	cmp	r2, #3
    1e02:	d008      	beq.n	1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e04:	f640 4137 	movw	r1, #3127	; 0xc37
    1e08:	202d      	movs	r0, #45	; 0x2d
    1e0a:	f7fe fa8d 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e12:	f000 ba4f 	b.w	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1e16:	68a2      	ldr	r2, [r4, #8]
    1e18:	7809      	ldrb	r1, [r1, #0]
    1e1a:	68d2      	ldr	r2, [r2, #12]
    1e1c:	f06f 0307 	mvn.w	r3, #7
    1e20:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1e24:	5851      	ldr	r1, [r2, r1]
    1e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e2a:	4708      	bx	r1
    1e2c:	200000a0 	.word	0x200000a0
    1e30:	20000bc0 	.word	0x20000bc0
    1e34:	b510      	push	{r4, lr}
    1e36:	7b01      	ldrb	r1, [r0, #12]
    1e38:	b121      	cbz	r1, 1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	4604      	mov	r4, r0
    1e3c:	f7ff faaa 	bl	1394 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1e40:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    1e44:	4805      	ldr	r0, [pc, #20]	; (1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1e46:	7b80      	ldrb	r0, [r0, #14]
    1e48:	2800      	cmp	r0, #0
    1e4a:	d005      	beq.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e4c:	f001 f85c 	bl	2f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e54:	f000 bf78 	b.w	2d48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1e58:	bd10      	pop	{r4, pc}
    1e5a:	0000      	.short	0x0000
    1e5c:	20000bc0 	.word	0x20000bc0

00001e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    1e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e64:	4d5c      	ldr	r5, [pc, #368]	; (1fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    1e66:	4604      	mov	r4, r0
    1e68:	b086      	sub	sp, #24
    1e6a:	7828      	ldrb	r0, [r5, #0]
    1e6c:	bbe8      	cbnz	r0, 1eea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    1e6e:	7820      	ldrb	r0, [r4, #0]
    1e70:	28ff      	cmp	r0, #255	; 0xff
    1e72:	d04b      	beq.n	1f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    1e74:	f04f 0800 	mov.w	r8, #0
    1e78:	f8a5 800c 	strh.w	r8, [r5, #12]
    1e7c:	f8c5 8004 	str.w	r8, [r5, #4]
    1e80:	f885 8001 	strb.w	r8, [r5, #1]
    1e84:	f885 8002 	strb.w	r8, [r5, #2]
    1e88:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    1e8c:	4b53      	ldr	r3, [pc, #332]	; (1fdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    1e8e:	4e54      	ldr	r6, [pc, #336]	; (1fe0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    1e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1e92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    1e96:	68b0      	ldr	r0, [r6, #8]
    1e98:	6840      	ldr	r0, [r0, #4]
    1e9a:	9003      	str	r0, [sp, #12]
    1e9c:	4668      	mov	r0, sp
    1e9e:	f001 f943 	bl	3128 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1ea2:	f001 f9d1 	bl	3248 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1ea6:	f001 f82f 	bl	2f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1eaa:	f000 ff4d 	bl	2d48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1eae:	484d      	ldr	r0, [pc, #308]	; (1fe4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    1eb0:	f001 fb22 	bl	34f8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1eb4:	484c      	ldr	r0, [pc, #304]	; (1fe8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    1eb6:	f001 fb29 	bl	350c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1eba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1ebe:	4607      	mov	r7, r0
    1ec0:	f006 fff8 	bl	8eb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    1ec4:	4638      	mov	r0, r7
    1ec6:	f006 ffba 	bl	8e3e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    1eca:	4601      	mov	r1, r0
    1ecc:	4620      	mov	r0, r4
    1ece:	f006 ff82 	bl	8dd6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    1ed2:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1ed6:	f001 fa3b 	bl	3350 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    1eda:	7921      	ldrb	r1, [r4, #4]
    1edc:	2000      	movs	r0, #0
    1ede:	f001 f8bf 	bl	3060 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    1ee2:	2101      	movs	r1, #1
    1ee4:	60a8      	str	r0, [r5, #8]
    1ee6:	b1a8      	cbz	r0, 1f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    1ee8:	e000      	b.n	1eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    1eea:	e00f      	b.n	1f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    1eec:	f104 0138 	add.w	r1, r4, #56	; 0x38
    1ef0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1ef2:	f006 fb55 	bl	85a0 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    1ef6:	4607      	mov	r7, r0
    1ef8:	f104 0140 	add.w	r1, r4, #64	; 0x40
    1efc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1efe:	f006 fb52 	bl	85a6 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    1f02:	b14f      	cbz	r7, 1f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    1f04:	f894 1020 	ldrb.w	r1, [r4, #32]
    1f08:	b951      	cbnz	r1, 1f20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    1f0a:	e005      	b.n	1f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    1f0c:	200c      	movs	r0, #12
    1f0e:	b006      	add	sp, #24
    1f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f14:	7029      	strb	r1, [r5, #0]
    1f16:	e05c      	b.n	1fd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    1f18:	b120      	cbz	r0, 1f24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    1f1a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    1f1e:	b108      	cbz	r0, 1f24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    1f20:	2701      	movs	r7, #1
    1f22:	e000      	b.n	1f26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    1f24:	2700      	movs	r7, #0
    1f26:	7ea0      	ldrb	r0, [r4, #26]
    1f28:	b920      	cbnz	r0, 1f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    1f2a:	7e20      	ldrb	r0, [r4, #24]
    1f2c:	b910      	cbnz	r0, 1f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    1f2e:	78a0      	ldrb	r0, [r4, #2]
    1f30:	0740      	lsls	r0, r0, #29
    1f32:	d523      	bpl.n	1f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    1f34:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    1f38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    1f3c:	4050      	eors	r0, r2
    1f3e:	ea70 0101 	orns	r1, r0, r1
    1f42:	d006      	beq.n	1f52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    1f44:	f007 fec2 	bl	9ccc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    1f48:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    1f4c:	1a80      	subs	r0, r0, r2
    1f4e:	4199      	sbcs	r1, r3
    1f50:	d200      	bcs.n	1f54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    1f52:	b19f      	cbz	r7, 1f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    1f54:	f7ff f900 	bl	1158 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    1f58:	4924      	ldr	r1, [pc, #144]	; (1fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    1f5a:	fba0 2301 	umull	r2, r3, r0, r1
    1f5e:	f104 0048 	add.w	r0, r4, #72	; 0x48
    1f62:	f006 ff43 	bl	8dec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    1f66:	2101      	movs	r1, #1
    1f68:	4620      	mov	r0, r4
    1f6a:	f006 fef8 	bl	8d5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    1f6e:	78a0      	ldrb	r0, [r4, #2]
    1f70:	0740      	lsls	r0, r0, #29
    1f72:	d503      	bpl.n	1f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    1f74:	2101      	movs	r1, #1
    1f76:	4620      	mov	r0, r4
    1f78:	f000 fa64 	bl	2444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    1f7c:	6870      	ldr	r0, [r6, #4]
    1f7e:	1cc0      	adds	r0, r0, #3
    1f80:	f006 fc02 	bl	8788 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    1f84:	73a8      	strb	r0, [r5, #14]
    1f86:	78a0      	ldrb	r0, [r4, #2]
    1f88:	07c0      	lsls	r0, r0, #31
    1f8a:	d022      	beq.n	1fd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    1f8c:	f8cd 8010 	str.w	r8, [sp, #16]
    1f90:	20ff      	movs	r0, #255	; 0xff
    1f92:	f8cd 8014 	str.w	r8, [sp, #20]
    1f96:	73e8      	strb	r0, [r5, #15]
    1f98:	69e6      	ldr	r6, [r4, #28]
    1f9a:	f106 070a 	add.w	r7, r6, #10
    1f9e:	e013      	b.n	1fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    1fa0:	9c04      	ldr	r4, [sp, #16]
    1fa2:	42b4      	cmp	r4, r6
    1fa4:	d010      	beq.n	1fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    1fa6:	7a72      	ldrb	r2, [r6, #9]
    1fa8:	7a60      	ldrb	r0, [r4, #9]
    1faa:	463b      	mov	r3, r7
    1fac:	f104 010a 	add.w	r1, r4, #10
    1fb0:	f006 fb85 	bl	86be <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    1fb4:	b140      	cbz	r0, 1fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    1fb6:	78a0      	ldrb	r0, [r4, #2]
    1fb8:	73e8      	strb	r0, [r5, #15]
    1fba:	f8d4 0003 	ldr.w	r0, [r4, #3]
    1fbe:	6128      	str	r0, [r5, #16]
    1fc0:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    1fc4:	82a8      	strh	r0, [r5, #20]
    1fc6:	e004      	b.n	1fd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    1fc8:	a804      	add	r0, sp, #16
    1fca:	f7fe fce5 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    1fce:	2800      	cmp	r0, #0
    1fd0:	d0e6      	beq.n	1fa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    1fd2:	2000      	movs	r0, #0
    1fd4:	e79b      	b.n	1f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    1fd6:	0000      	.short	0x0000
    1fd8:	20000bc0 	.word	0x20000bc0
    1fdc:	000024c4 	.word	0x000024c4
    1fe0:	200000a0 	.word	0x200000a0
    1fe4:	8e89bed6 	.word	0x8e89bed6
    1fe8:	00555555 	.word	0x00555555
    1fec:	000f4240 	.word	0x000f4240
    1ff0:	b510      	push	{r4, lr}
    1ff2:	4604      	mov	r4, r0
    1ff4:	f7ff ff34 	bl	1e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d108      	bne.n	200e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    1ffc:	4804      	ldr	r0, [pc, #16]	; (2010 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    1ffe:	7800      	ldrb	r0, [r0, #0]
    2000:	2801      	cmp	r0, #1
    2002:	d003      	beq.n	200c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    2004:	2100      	movs	r1, #0
    2006:	4620      	mov	r0, r4
    2008:	f7ff fda4 	bl	1b54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    200c:	2000      	movs	r0, #0
    200e:	bd10      	pop	{r4, pc}
    2010:	20000bc0 	.word	0x20000bc0
    2014:	480a      	ldr	r0, [pc, #40]	; (2040 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    2016:	b510      	push	{r4, lr}
    2018:	490a      	ldr	r1, [pc, #40]	; (2044 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    201a:	6804      	ldr	r4, [r0, #0]
    201c:	7808      	ldrb	r0, [r1, #0]
    201e:	2800      	cmp	r0, #0
    2020:	d00d      	beq.n	203e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    2022:	7808      	ldrb	r0, [r1, #0]
    2024:	2802      	cmp	r0, #2
    2026:	d002      	beq.n	202e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    2028:	7808      	ldrb	r0, [r1, #0]
    202a:	2803      	cmp	r0, #3
    202c:	d102      	bne.n	2034 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    202e:	4620      	mov	r0, r4
    2030:	f7ff ff00 	bl	1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>
    2034:	4620      	mov	r0, r4
    2036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    203a:	f000 b93b 	b.w	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    203e:	bd10      	pop	{r4, pc}
    2040:	200000a0 	.word	0x200000a0
    2044:	20000bc0 	.word	0x20000bc0
    2048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    204c:	4604      	mov	r4, r0
    204e:	4829      	ldr	r0, [pc, #164]	; (20f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    2050:	460d      	mov	r5, r1
    2052:	6840      	ldr	r0, [r0, #4]
    2054:	f001 f99e 	bl	3394 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2058:	4e27      	ldr	r6, [pc, #156]	; (20f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    205a:	2004      	movs	r0, #4
    205c:	7030      	strb	r0, [r6, #0]
    205e:	b355      	cbz	r5, 20b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    2060:	8860      	ldrh	r0, [r4, #2]
    2062:	2810      	cmp	r0, #16
    2064:	d023      	beq.n	20ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    2066:	f104 0028 	add.w	r0, r4, #40	; 0x28
    206a:	4680      	mov	r8, r0
    206c:	68b5      	ldr	r5, [r6, #8]
    206e:	f006 feda 	bl	8e26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    2072:	4607      	mov	r7, r0
    2074:	4640      	mov	r0, r8
    2076:	f006 feff 	bl	8e78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    207a:	1a38      	subs	r0, r7, r0
    207c:	1e40      	subs	r0, r0, #1
    207e:	b2c0      	uxtb	r0, r0
    2080:	8861      	ldrh	r1, [r4, #2]
    2082:	2228      	movs	r2, #40	; 0x28
    2084:	f000 fa5a 	bl	253c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    2088:	4405      	add	r5, r0
    208a:	78a0      	ldrb	r0, [r4, #2]
    208c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2090:	b130      	cbz	r0, 20a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    2092:	6870      	ldr	r0, [r6, #4]
    2094:	4405      	add	r5, r0
    2096:	f006 ff48 	bl	8f2a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    209a:	4428      	add	r0, r5
    209c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    20a0:	7922      	ldrb	r2, [r4, #4]
    20a2:	4629      	mov	r1, r5
    20a4:	2000      	movs	r0, #0
    20a6:	f001 f98b 	bl	33c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    20aa:	b920      	cbnz	r0, 20b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    20ac:	e00c      	b.n	20c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    20ae:	7921      	ldrb	r1, [r4, #4]
    20b0:	2000      	movs	r0, #0
    20b2:	f000 ff9b 	bl	2fec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    20b6:	8860      	ldrh	r0, [r4, #2]
    20b8:	2813      	cmp	r0, #19
    20ba:	d011      	beq.n	20e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20bc:	dc07      	bgt.n	20ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    20be:	2810      	cmp	r0, #16
    20c0:	d015      	beq.n	20ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    20c2:	2812      	cmp	r0, #18
    20c4:	d107      	bne.n	20d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    20c6:	e00b      	b.n	20e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20c8:	f640 51a8 	movw	r1, #3496	; 0xda8
    20cc:	e005      	b.n	20da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    20ce:	2815      	cmp	r0, #21
    20d0:	d006      	beq.n	20e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20d2:	281d      	cmp	r0, #29
    20d4:	d004      	beq.n	20e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20d6:	f640 51bc 	movw	r1, #3516	; 0xdbc
    20da:	202d      	movs	r0, #45	; 0x2d
    20dc:	f7fe f924 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20e0:	7922      	ldrb	r2, [r4, #4]
    20e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20e6:	2101      	movs	r1, #1
    20e8:	2000      	movs	r0, #0
    20ea:	f001 b9db 	b.w	34a4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    20ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20f2:	0000      	.short	0x0000
    20f4:	200000a0 	.word	0x200000a0
    20f8:	20000bc0 	.word	0x20000bc0
    20fc:	b538      	push	{r3, r4, r5, lr}
    20fe:	4604      	mov	r4, r0
    2100:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    2104:	460b      	mov	r3, r1
    2106:	f88d 0000 	strb.w	r0, [sp]
    210a:	9800      	ldr	r0, [sp, #0]
    210c:	9000      	str	r0, [sp, #0]
    210e:	f89d 0000 	ldrb.w	r0, [sp]
    2112:	2800      	cmp	r0, #0
    2114:	d13a      	bne.n	218c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    2116:	7820      	ldrb	r0, [r4, #0]
    2118:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    211c:	2bff      	cmp	r3, #255	; 0xff
    211e:	d010      	beq.n	2142 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    2120:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    2124:	1e51      	subs	r1, r2, #1
    2126:	4618      	mov	r0, r3
    2128:	f7fe fffc 	bl	1124 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    212c:	b130      	cbz	r0, 213c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    212e:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    2132:	f040 0002 	orr.w	r0, r0, #2
    2136:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    213a:	e011      	b.n	2160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    213c:	f241 0118 	movw	r1, #4120	; 0x1018
    2140:	e021      	b.n	2186 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    2142:	4813      	ldr	r0, [pc, #76]	; (2190 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    2144:	6840      	ldr	r0, [r0, #4]
    2146:	7801      	ldrb	r1, [r0, #0]
    2148:	f3c1 1180 	ubfx	r1, r1, #6, #1
    214c:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    2150:	f8d0 1003 	ldr.w	r1, [r0, #3]
    2154:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    2158:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    215c:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    2160:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    2164:	287f      	cmp	r0, #127	; 0x7f
    2166:	d00c      	beq.n	2182 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    2168:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    216c:	207f      	movs	r0, #127	; 0x7f
    216e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2172:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    2176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    217a:	2202      	movs	r2, #2
    217c:	4905      	ldr	r1, [pc, #20]	; (2194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    217e:	f006 bc62 	b.w	8a46 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2182:	f640 616c 	movw	r1, #3692	; 0xe6c
    2186:	202d      	movs	r0, #45	; 0x2d
    2188:	f7fe f8ce 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    218c:	bd38      	pop	{r3, r4, r5, pc}
    218e:	0000      	.short	0x0000
    2190:	200000a0 	.word	0x200000a0
    2194:	00008d47 	.word	0x00008d47
    2198:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    219c:	4616      	mov	r6, r2
    219e:	4604      	mov	r4, r0
    21a0:	2903      	cmp	r1, #3
    21a2:	d004      	beq.n	21ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    21a4:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    21a8:	b108      	cbz	r0, 21ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    21aa:	2001      	movs	r0, #1
    21ac:	e000      	b.n	21b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    21ae:	2000      	movs	r0, #0
    21b0:	2500      	movs	r5, #0
    21b2:	2903      	cmp	r1, #3
    21b4:	d003      	beq.n	21be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    21b6:	2701      	movs	r7, #1
    21b8:	2905      	cmp	r1, #5
    21ba:	d005      	beq.n	21c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    21bc:	e008      	b.n	21d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    21be:	78a1      	ldrb	r1, [r4, #2]
    21c0:	2702      	movs	r7, #2
    21c2:	f3c1 0140 	ubfx	r1, r1, #1, #1
    21c6:	e001      	b.n	21cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    21c8:	78a1      	ldrb	r1, [r4, #2]
    21ca:	07c9      	lsls	r1, r1, #31
    21cc:	2900      	cmp	r1, #0
    21ce:	d06b      	beq.n	22a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    21d0:	2800      	cmp	r0, #0
    21d2:	d169      	bne.n	22a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    21d4:	4835      	ldr	r0, [pc, #212]	; (22ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    21d6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 22b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    21da:	7b80      	ldrb	r0, [r0, #14]
    21dc:	b180      	cbz	r0, 2200 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    21de:	f006 fad6 	bl	878e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    21e2:	7030      	strb	r0, [r6, #0]
    21e4:	28ff      	cmp	r0, #255	; 0xff
    21e6:	d014      	beq.n	2212 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    21e8:	b2c0      	uxtb	r0, r0
    21ea:	466a      	mov	r2, sp
    21ec:	a902      	add	r1, sp, #8
    21ee:	f7fe ff99 	bl	1124 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    21f2:	b148      	cbz	r0, 2208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    21f4:	4669      	mov	r1, sp
    21f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    21fa:	f006 fc56 	bl	8aaa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    21fe:	4605      	mov	r5, r0
    2200:	7830      	ldrb	r0, [r6, #0]
    2202:	28ff      	cmp	r0, #255	; 0xff
    2204:	d005      	beq.n	2212 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    2206:	e00d      	b.n	2224 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    2208:	f640 719b 	movw	r1, #3995	; 0xf9b
    220c:	202d      	movs	r0, #45	; 0x2d
    220e:	f7fe f88b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2212:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2216:	f811 0b03 	ldrb.w	r0, [r1], #3
    221a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    221e:	f006 fc44 	bl	8aaa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    2222:	4605      	mov	r5, r0
    2224:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2228:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    222c:	f104 0358 	add.w	r3, r4, #88	; 0x58
    2230:	f811 0b03 	ldrb.w	r0, [r1], #3
    2234:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2238:	f006 fa41 	bl	86be <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    223c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2240:	4680      	mov	r8, r0
    2242:	f811 0b03 	ldrb.w	r0, [r1], #3
    2246:	f3c0 1080 	ubfx	r0, r0, #6, #1
    224a:	f006 faaa 	bl	87a2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    224e:	4681      	mov	r9, r0
    2250:	f7fe ff88 	bl	1164 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    2254:	b138      	cbz	r0, 2266 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    2256:	4648      	mov	r0, r9
    2258:	f7fe ff44 	bl	10e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    225c:	b118      	cbz	r0, 2266 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    225e:	2110      	movs	r1, #16
    2260:	f006 fb0e 	bl	8880 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    2264:	b138      	cbz	r0, 2276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    2266:	2100      	movs	r1, #0
    2268:	7830      	ldrb	r0, [r6, #0]
    226a:	28ff      	cmp	r0, #255	; 0xff
    226c:	d00c      	beq.n	2288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    226e:	f1b8 0f00 	cmp.w	r8, #0
    2272:	d105      	bne.n	2280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    2274:	e001      	b.n	227a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    2276:	2101      	movs	r1, #1
    2278:	e7f6      	b.n	2268 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    227a:	7e62      	ldrb	r2, [r4, #25]
    227c:	4282      	cmp	r2, r0
    227e:	d101      	bne.n	2284 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    2280:	2001      	movs	r0, #1
    2282:	e003      	b.n	228c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    2284:	2000      	movs	r0, #0
    2286:	e001      	b.n	228c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    2288:	ea28 0001 	bic.w	r0, r8, r1
    228c:	78a2      	ldrb	r2, [r4, #2]
    228e:	0752      	lsls	r2, r2, #29
    2290:	d501      	bpl.n	2296 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    2292:	b930      	cbnz	r0, 22a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    2294:	e008      	b.n	22a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    2296:	b939      	cbnz	r1, 22a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    2298:	b91d      	cbnz	r5, 22a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    229a:	7be0      	ldrb	r0, [r4, #15]
    229c:	b108      	cbz	r0, 22a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    229e:	42b8      	cmp	r0, r7
    22a0:	d102      	bne.n	22a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    22a2:	2001      	movs	r0, #1
    22a4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    22a8:	2000      	movs	r0, #0
    22aa:	e7fb      	b.n	22a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    22ac:	20000bc0 	.word	0x20000bc0
    22b0:	200000a0 	.word	0x200000a0
    22b4:	b570      	push	{r4, r5, r6, lr}
    22b6:	4604      	mov	r4, r0
    22b8:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    22ba:	4d10      	ldr	r5, [pc, #64]	; (22fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    22bc:	1c40      	adds	r0, r0, #1
    22be:	8620      	strh	r0, [r4, #48]	; 0x30
    22c0:	7ba8      	ldrb	r0, [r5, #14]
    22c2:	2600      	movs	r6, #0
    22c4:	b120      	cbz	r0, 22d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    22c6:	f000 fe1f 	bl	2f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    22ca:	f000 fd3d 	bl	2d48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    22ce:	73ae      	strb	r6, [r5, #14]
    22d0:	702e      	strb	r6, [r5, #0]
    22d2:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    22d6:	b108      	cbz	r0, 22dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    22d8:	2101      	movs	r1, #1
    22da:	e00a      	b.n	22f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    22dc:	7b60      	ldrb	r0, [r4, #13]
    22de:	b138      	cbz	r0, 22f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    22e0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    22e2:	4288      	cmp	r0, r1
    22e4:	d804      	bhi.n	22f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    22e6:	2101      	movs	r1, #1
    22e8:	4620      	mov	r0, r4
    22ea:	f006 fe42 	bl	8f72 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    22ee:	bd70      	pop	{r4, r5, r6, pc}
    22f0:	2100      	movs	r1, #0
    22f2:	4620      	mov	r0, r4
    22f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    22f8:	f006 be3b 	b.w	8f72 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    22fc:	20000bc0 	.word	0x20000bc0
    2300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2304:	4604      	mov	r4, r0
    2306:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    230a:	8808      	ldrh	r0, [r1, #0]
    230c:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    2310:	20ff      	movs	r0, #255	; 0xff
    2312:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    2316:	f64f 70ff 	movw	r0, #65535	; 0xffff
    231a:	4616      	mov	r6, r2
    231c:	460d      	mov	r5, r1
    231e:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    2322:	2b00      	cmp	r3, #0
    2324:	d14b      	bne.n	23be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    2326:	6928      	ldr	r0, [r5, #16]
    2328:	f006 fa63 	bl	87f2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    232c:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    2330:	8b28      	ldrh	r0, [r5, #24]
    2332:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    2336:	8b68      	ldrh	r0, [r5, #26]
    2338:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    233c:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    2340:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    2344:	7e20      	ldrb	r0, [r4, #24]
    2346:	f104 0151 	add.w	r1, r4, #81	; 0x51
    234a:	460f      	mov	r7, r1
    234c:	2500      	movs	r5, #0
    234e:	b120      	cbz	r0, 235a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    2350:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    2354:	f006 fbd5 	bl	8b02 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    2358:	b940      	cbnz	r0, 236c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    235a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    235e:	b170      	cbz	r0, 237e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    2360:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    2364:	4639      	mov	r1, r7
    2366:	f006 fbc3 	bl	8af0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    236a:	b140      	cbz	r0, 237e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    236c:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    2370:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    2374:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    2378:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    237c:	e003      	b.n	2386 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    237e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    2382:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    2386:	4815      	ldr	r0, [pc, #84]	; (23dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
    2388:	2eff      	cmp	r6, #255	; 0xff
    238a:	6840      	ldr	r0, [r0, #4]
    238c:	7801      	ldrb	r1, [r0, #0]
    238e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    2392:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    2396:	f850 1f03 	ldr.w	r1, [r0, #3]!
    239a:	d017      	beq.n	23cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
    239c:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    23a0:	8880      	ldrh	r0, [r0, #4]
    23a2:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    23a6:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    23aa:	1e51      	subs	r1, r2, #1
    23ac:	4630      	mov	r0, r6
    23ae:	f7fe feb9 	bl	1124 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    23b2:	b130      	cbz	r0, 23c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
    23b4:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    23b8:	f040 0002 	orr.w	r0, r0, #2
    23bc:	7020      	strb	r0, [r4, #0]
    23be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23c2:	f640 418b 	movw	r1, #3211	; 0xc8b
    23c6:	202d      	movs	r0, #45	; 0x2d
    23c8:	f7fd ffae 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23cc:	f844 1f7a 	str.w	r1, [r4, #122]!
    23d0:	8880      	ldrh	r0, [r0, #4]
    23d2:	80a0      	strh	r0, [r4, #4]
    23d4:	60e5      	str	r5, [r4, #12]
    23d6:	8225      	strh	r5, [r4, #16]
    23d8:	e7f1      	b.n	23be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    23da:	0000      	.short	0x0000
    23dc:	200000a0 	.word	0x200000a0
    23e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e2:	4604      	mov	r4, r0
    23e4:	20ff      	movs	r0, #255	; 0xff
    23e6:	f88d 0000 	strb.w	r0, [sp]
    23ea:	2501      	movs	r5, #1
    23ec:	466a      	mov	r2, sp
    23ee:	2103      	movs	r1, #3
    23f0:	4620      	mov	r0, r4
    23f2:	f7ff fed1 	bl	2198 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    23f6:	b1e8      	cbz	r0, 2434 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
    23f8:	7b20      	ldrb	r0, [r4, #12]
    23fa:	b120      	cbz	r0, 2406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a6>
    23fc:	f89d 1000 	ldrb.w	r1, [sp]
    2400:	4620      	mov	r0, r4
    2402:	f7ff fe7b 	bl	20fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    2406:	4e0d      	ldr	r6, [pc, #52]	; (243c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    2408:	2100      	movs	r1, #0
    240a:	6870      	ldr	r0, [r6, #4]
    240c:	8001      	strh	r1, [r0, #0]
    240e:	2104      	movs	r1, #4
    2410:	f006 fa92 	bl	8938 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2414:	4620      	mov	r0, r4
    2416:	f000 f843 	bl	24a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>
    241a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    241e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2420:	6870      	ldr	r0, [r6, #4]
    2422:	f006 fac0 	bl	89a6 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    2426:	4906      	ldr	r1, [pc, #24]	; (2440 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    2428:	2005      	movs	r0, #5
    242a:	7008      	strb	r0, [r1, #0]
    242c:	6870      	ldr	r0, [r6, #4]
    242e:	f000 ffb1 	bl	3394 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2432:	e000      	b.n	2436 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    2434:	2500      	movs	r5, #0
    2436:	4628      	mov	r0, r5
    2438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    243a:	0000      	.short	0x0000
    243c:	200000a0 	.word	0x200000a0
    2440:	20000bc0 	.word	0x20000bc0
    2444:	b570      	push	{r4, r5, r6, lr}
    2446:	4604      	mov	r4, r0
    2448:	460e      	mov	r6, r1
    244a:	7e40      	ldrb	r0, [r0, #25]
    244c:	f7fe fe4a 	bl	10e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2450:	0005      	movs	r5, r0
    2452:	d019      	beq.n	2488 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
    2454:	2110      	movs	r1, #16
    2456:	f006 fa13 	bl	8880 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    245a:	2800      	cmp	r0, #0
    245c:	d114      	bne.n	2488 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
    245e:	2001      	movs	r0, #1
    2460:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    2464:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    2468:	4632      	mov	r2, r6
    246a:	460c      	mov	r4, r1
    246c:	4628      	mov	r0, r5
    246e:	f006 f956 	bl	871e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    2472:	4621      	mov	r1, r4
    2474:	4c05      	ldr	r4, [pc, #20]	; (248c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62c>)
    2476:	6860      	ldr	r0, [r4, #4]
    2478:	f006 fa79 	bl	896e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    247c:	6860      	ldr	r0, [r4, #4]
    247e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2482:	2101      	movs	r1, #1
    2484:	f006 ba79 	b.w	897a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2488:	bd70      	pop	{r4, r5, r6, pc}
    248a:	0000      	.short	0x0000
    248c:	200000a0 	.word	0x200000a0
    2490:	4802      	ldr	r0, [pc, #8]	; (249c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
    2492:	2101      	movs	r1, #1
    2494:	6800      	ldr	r0, [r0, #0]
    2496:	f7ff bb5d 	b.w	1b54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    249a:	0000      	.short	0x0000
    249c:	200000a0 	.word	0x200000a0
    24a0:	b570      	push	{r4, r5, r6, lr}
    24a2:	4d07      	ldr	r5, [pc, #28]	; (24c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>)
    24a4:	4604      	mov	r4, r0
    24a6:	f100 0151 	add.w	r1, r0, #81	; 0x51
    24aa:	6868      	ldr	r0, [r5, #4]
    24ac:	f006 fa6c 	bl	8988 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    24b0:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    24b4:	6868      	ldr	r0, [r5, #4]
    24b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    24ba:	f006 ba6b 	b.w	8994 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    24be:	0000      	.short	0x0000
    24c0:	200000a0 	.word	0x200000a0
    24c4:	00001de1 	.word	0x00001de1
    24c8:	00001c69 	.word	0x00001c69
    24cc:	00001d5d 	.word	0x00001d5d
    24d0:	00000000 	.word	0x00000000
    24d4:	00001d35 	.word	0x00001d35
    24d8:	00001d8d 	.word	0x00001d8d
    24dc:	00008ceb 	.word	0x00008ceb
    24e0:	00008cf1 	.word	0x00008cf1
    24e4:	00001ff1 	.word	0x00001ff1
    24e8:	00002015 	.word	0x00002015
    24ec:	00002491 	.word	0x00002491
    24f0:	000024e0 	.word	0x000024e0
    24f4:	000024d8 	.word	0x000024d8
    24f8:	000024d4 	.word	0x000024d4

000024fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    24fc:	b510      	push	{r4, lr}
    24fe:	1e42      	subs	r2, r0, #1
    2500:	2a02      	cmp	r2, #2
    2502:	d901      	bls.n	2508 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    2504:	21ca      	movs	r1, #202	; 0xca
    2506:	e009      	b.n	251c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    2508:	1e40      	subs	r0, r0, #1
    250a:	2910      	cmp	r1, #16
    250c:	d009      	beq.n	2522 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    250e:	2912      	cmp	r1, #18
    2510:	d00c      	beq.n	252c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    2512:	2913      	cmp	r1, #19
    2514:	d00a      	beq.n	252c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    2516:	2915      	cmp	r1, #21
    2518:	d005      	beq.n	2526 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    251a:	21d8      	movs	r1, #216	; 0xd8
    251c:	202f      	movs	r0, #47	; 0x2f
    251e:	f7fd ff03 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2522:	4905      	ldr	r1, [pc, #20]	; (2538 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2524:	e004      	b.n	2530 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    2526:	4904      	ldr	r1, [pc, #16]	; (2538 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2528:	1d89      	adds	r1, r1, #6
    252a:	e001      	b.n	2530 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    252c:	4902      	ldr	r1, [pc, #8]	; (2538 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    252e:	1f89      	subs	r1, r1, #6
    2530:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    2534:	bd10      	pop	{r4, pc}
    2536:	0000      	.short	0x0000
    2538:	00008f42 	.word	0x00008f42

0000253c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    253c:	1e42      	subs	r2, r0, #1
    253e:	b510      	push	{r4, lr}
    2540:	b2d2      	uxtb	r2, r2
    2542:	2a01      	cmp	r2, #1
    2544:	d903      	bls.n	254e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    2546:	291d      	cmp	r1, #29
    2548:	d001      	beq.n	254e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    254a:	21ee      	movs	r1, #238	; 0xee
    254c:	e00d      	b.n	256a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    254e:	2913      	cmp	r1, #19
    2550:	d013      	beq.n	257a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    2552:	dc04      	bgt.n	255e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    2554:	2910      	cmp	r1, #16
    2556:	d00b      	beq.n	2570 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    2558:	2912      	cmp	r1, #18
    255a:	d104      	bne.n	2566 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    255c:	e00d      	b.n	257a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    255e:	2915      	cmp	r1, #21
    2560:	d008      	beq.n	2574 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    2562:	291d      	cmp	r1, #29
    2564:	d00e      	beq.n	2584 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    2566:	f44f 7181 	mov.w	r1, #258	; 0x102
    256a:	202f      	movs	r0, #47	; 0x2f
    256c:	f7fd fedc 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2570:	4807      	ldr	r0, [pc, #28]	; (2590 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    2572:	e004      	b.n	257e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    2574:	4806      	ldr	r0, [pc, #24]	; (2590 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    2576:	3008      	adds	r0, #8
    2578:	e001      	b.n	257e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    257a:	4805      	ldr	r0, [pc, #20]	; (2590 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    257c:	1d00      	adds	r0, r0, #4
    257e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    2582:	bd10      	pop	{r4, pc}
    2584:	f240 315a 	movw	r1, #858	; 0x35a
    2588:	fb10 f001 	smulbb	r0, r0, r1
    258c:	bd10      	pop	{r4, pc}
    258e:	0000      	.short	0x0000
    2590:	00008f30 	.word	0x00008f30

00002594 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    2594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2598:	4604      	mov	r4, r0
    259a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    259e:	4616      	mov	r6, r2
    25a0:	460f      	mov	r7, r1
    25a2:	2800      	cmp	r0, #0
    25a4:	d15e      	bne.n	2664 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    25a6:	4621      	mov	r1, r4
    25a8:	484d      	ldr	r0, [pc, #308]	; (26e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    25aa:	f003 fc99 	bl	5ee0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    25ae:	4605      	mov	r5, r0
    25b0:	2820      	cmp	r0, #32
    25b2:	d057      	beq.n	2664 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    25b4:	2250      	movs	r2, #80	; 0x50
    25b6:	2100      	movs	r1, #0
    25b8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    25bc:	f007 fd92 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    25c0:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    25c4:	2501      	movs	r5, #1
    25c6:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    25ca:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    25ce:	b137      	cbz	r7, 25de <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    25d0:	f7ff f888 	bl	16e4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    25d4:	f000 0007 	and.w	r0, r0, #7
    25d8:	1c40      	adds	r0, r0, #1
    25da:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    25de:	4620      	mov	r0, r4
    25e0:	f006 fd92 	bl	9108 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    25e4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    25e8:	2002      	movs	r0, #2
    25ea:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    25ee:	46a8      	mov	r8, r5
    25f0:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    25f4:	2500      	movs	r5, #0
    25f6:	f804 5fe8 	strb.w	r5, [r4, #232]!
    25fa:	f004 fd97 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    25fe:	4607      	mov	r7, r0
    2600:	f007 fb5b 	bl	9cba <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    2604:	8921      	ldrh	r1, [r4, #8]
    2606:	3ce8      	subs	r4, #232	; 0xe8
    2608:	4288      	cmp	r0, r1
    260a:	d800      	bhi.n	260e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    260c:	4608      	mov	r0, r1
    260e:	4438      	add	r0, r7
    2610:	30ce      	adds	r0, #206	; 0xce
    2612:	b287      	uxth	r7, r0
    2614:	4620      	mov	r0, r4
    2616:	f006 fb27 	bl	8c68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    261a:	b330      	cbz	r0, 266a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    261c:	f007 fa9b 	bl	9b56 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    2620:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    2624:	b281      	uxth	r1, r0
    2626:	4630      	mov	r0, r6
    2628:	f004 fe82 	bl	7330 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    262c:	4430      	add	r0, r6
    262e:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    2632:	3490      	adds	r4, #144	; 0x90
    2634:	f007 fb4a 	bl	9ccc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2638:	19c0      	adds	r0, r0, r7
    263a:	4169      	adcs	r1, r5
    263c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    2640:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    2644:	f824 5c6e 	strh.w	r5, [r4, #-110]
    2648:	2001      	movs	r0, #1
    264a:	f006 fc6a 	bl	8f22 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    264e:	f200 1015 	addw	r0, r0, #277	; 0x115
    2652:	1a30      	subs	r0, r6, r0
    2654:	6460      	str	r0, [r4, #68]	; 0x44
    2656:	f04f 30ff 	mov.w	r0, #4294967295
    265a:	0841      	lsrs	r1, r0, #1
    265c:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2660:	3c90      	subs	r4, #144	; 0x90
    2662:	e025      	b.n	26b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    2664:	200c      	movs	r0, #12
    2666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    266a:	2100      	movs	r1, #0
    266c:	4620      	mov	r0, r4
    266e:	f006 fd18 	bl	90a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    2672:	f8df 8070 	ldr.w	r8, [pc, #112]	; 26e4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    2676:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    267a:	2000      	movs	r0, #0
    267c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    2680:	b149      	cbz	r1, 2696 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    2682:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    2684:	b139      	cbz	r1, 2696 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    2686:	f7ff f82d 	bl	16e4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    268a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    268e:	fbb0 f2f1 	udiv	r2, r0, r1
    2692:	fb01 0012 	mls	r0, r1, r2, r0
    2696:	4407      	add	r7, r0
    2698:	f007 fb18 	bl	9ccc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    269c:	19c0      	adds	r0, r0, r7
    269e:	4169      	adcs	r1, r5
    26a0:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    26a4:	b19e      	cbz	r6, 26ce <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    26a6:	1980      	adds	r0, r0, r6
    26a8:	eb51 0105 	adcs.w	r1, r1, r5
    26ac:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    26b0:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    26b4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    26b8:	f006 fd24 	bl	9104 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    26bc:	b158      	cbz	r0, 26d6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    26be:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    26c2:	2100      	movs	r1, #0
    26c4:	4620      	mov	r0, r4
    26c6:	f006 faff 	bl	8cc8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    26ca:	2000      	movs	r0, #0
    26cc:	e7cb      	b.n	2666 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    26ce:	f04f 30ff 	mov.w	r0, #4294967295
    26d2:	0841      	lsrs	r1, r0, #1
    26d4:	e7ea      	b.n	26ac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    26d6:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    26da:	2030      	movs	r0, #48	; 0x30
    26dc:	f7fd fe24 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    26e0:	000091e9 	.word	0x000091e9
    26e4:	200000b0 	.word	0x200000b0

000026e8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    26e8:	4901      	ldr	r1, [pc, #4]	; (26f0 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    26ea:	8088      	strh	r0, [r1, #4]
    26ec:	4770      	bx	lr
    26ee:	0000      	.short	0x0000
    26f0:	200000b0 	.word	0x200000b0

000026f4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    26f4:	4805      	ldr	r0, [pc, #20]	; (270c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    26f6:	2100      	movs	r1, #0
    26f8:	7001      	strb	r1, [r0, #0]
    26fa:	2201      	movs	r2, #1
    26fc:	7082      	strb	r2, [r0, #2]
    26fe:	7041      	strb	r1, [r0, #1]
    2700:	f242 7110 	movw	r1, #10000	; 0x2710
    2704:	8081      	strh	r1, [r0, #4]
    2706:	f000 b803 	b.w	2710 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    270a:	0000      	.short	0x0000
    270c:	200000b0 	.word	0x200000b0

00002710 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    2710:	b51c      	push	{r2, r3, r4, lr}
    2712:	4909      	ldr	r1, [pc, #36]	; (2738 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    2714:	e9d1 0100 	ldrd	r0, r1, [r1]
    2718:	e9cd 0100 	strd	r0, r1, [sp]
    271c:	e002      	b.n	2724 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    271e:	9800      	ldr	r0, [sp, #0]
    2720:	f006 fc3b 	bl	8f9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    2724:	4668      	mov	r0, sp
    2726:	f7fe f937 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    272a:	2800      	cmp	r0, #0
    272c:	d0f7      	beq.n	271e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    272e:	f000 f80b 	bl	2748 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0xc>
    2732:	2000      	movs	r0, #0
    2734:	bd1c      	pop	{r2, r3, r4, pc}
    2736:	0000      	.short	0x0000
    2738:	000027ac 	.word	0x000027ac

0000273c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    273c:	4901      	ldr	r1, [pc, #4]	; (2744 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    273e:	7008      	strb	r0, [r1, #0]
    2740:	4770      	bx	lr
    2742:	0000      	.short	0x0000
    2744:	200000b0 	.word	0x200000b0
    2748:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    274c:	4d16      	ldr	r5, [pc, #88]	; (27a8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x6c>)
    274e:	2001      	movs	r0, #1
    2750:	7068      	strb	r0, [r5, #1]
    2752:	2400      	movs	r4, #0
    2754:	f64f 76ff 	movw	r6, #65535	; 0xffff
    2758:	e00b      	b.n	2772 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x36>
    275a:	2100      	movs	r1, #0
    275c:	f7fe f8ca 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2760:	0007      	movs	r7, r0
    2762:	d009      	beq.n	2778 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x3c>
    2764:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    2768:	f003 faa2 	bl	5cb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    276c:	4638      	mov	r0, r7
    276e:	f006 fd2e 	bl	91ce <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1e2>
    2772:	9400      	str	r4, [sp, #0]
    2774:	9401      	str	r4, [sp, #4]
    2776:	e00e      	b.n	2796 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    2778:	f44f 7191 	mov.w	r1, #290	; 0x122
    277c:	2030      	movs	r0, #48	; 0x30
    277e:	f7fd fdd3 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2782:	9800      	ldr	r0, [sp, #0]
    2784:	b138      	cbz	r0, 2796 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    2786:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    278a:	2920      	cmp	r1, #32
    278c:	d003      	beq.n	2796 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    278e:	8800      	ldrh	r0, [r0, #0]
    2790:	42b0      	cmp	r0, r6
    2792:	d1e2      	bne.n	275a <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x1e>
    2794:	e004      	b.n	27a0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x64>
    2796:	4668      	mov	r0, sp
    2798:	f7fe f8fe 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    279c:	2800      	cmp	r0, #0
    279e:	d0f0      	beq.n	2782 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x46>
    27a0:	706c      	strb	r4, [r5, #1]
    27a2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    27a6:	0000      	.short	0x0000
    27a8:	200000b0 	.word	0x200000b0
    27ac:	00000000 	.word	0x00000000
    27b0:	00010000 	.word	0x00010000
    27b4:	00000000 	.word	0x00000000
    27b8:	00010000 	.word	0x00010000
    27bc:	00000000 	.word	0x00000000
    27c0:	00001e14 	.word	0x00001e14
    27c4:	00001130 	.word	0x00001130
    27c8:	00fa01f4 	.word	0x00fa01f4
    27cc:	00640096 	.word	0x00640096
    27d0:	0032004b 	.word	0x0032004b
    27d4:	0014001e 	.word	0x0014001e
    27d8:	0005000a 	.word	0x0005000a
    27dc:	00010002 	.word	0x00010002

000027e0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    27e0:	b570      	push	{r4, r5, r6, lr}
    27e2:	6844      	ldr	r4, [r0, #4]
    27e4:	220d      	movs	r2, #13
    27e6:	f504 7598 	add.w	r5, r4, #304	; 0x130
    27ea:	2100      	movs	r1, #0
    27ec:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    27f0:	f007 fc78 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    27f4:	f44f 70a3 	mov.w	r0, #326	; 0x146
    27f8:	2100      	movs	r1, #0
    27fa:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    27fe:	5501      	strb	r1, [r0, r4]
    2800:	f8a5 1017 	strh.w	r1, [r5, #23]
    2804:	7669      	strb	r1, [r5, #25]
    2806:	4608      	mov	r0, r1
    2808:	f05f 017f 	movs.w	r1, #127	; 0x7f
    280c:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    2810:	1c40      	adds	r0, r0, #1
    2812:	b2c0      	uxtb	r0, r0
    2814:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    2818:	2802      	cmp	r0, #2
    281a:	d3f7      	bcc.n	280c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    281c:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    2820:	4620      	mov	r0, r4
    2822:	f006 fd5e 	bl	92e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    2826:	2000      	movs	r0, #0
    2828:	21ff      	movs	r1, #255	; 0xff
    282a:	1822      	adds	r2, r4, r0
    282c:	1c40      	adds	r0, r0, #1
    282e:	b2c0      	uxtb	r0, r0
    2830:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    2834:	2802      	cmp	r0, #2
    2836:	d3f8      	bcc.n	282a <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    2838:	bd70      	pop	{r4, r5, r6, pc}
	...

0000283c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    283c:	4903      	ldr	r1, [pc, #12]	; (284c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    283e:	884a      	ldrh	r2, [r1, #2]
    2840:	8002      	strh	r2, [r0, #0]
    2842:	7809      	ldrb	r1, [r1, #0]
    2844:	7081      	strb	r1, [r0, #2]
    2846:	2000      	movs	r0, #0
    2848:	4770      	bx	lr
    284a:	0000      	.short	0x0000
    284c:	20000b80 	.word	0x20000b80

00002850 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    2850:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2854:	460f      	mov	r7, r1
    2856:	4605      	mov	r5, r0
    2858:	7806      	ldrb	r6, [r0, #0]
    285a:	f007 f88f 	bl	997c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    285e:	2800      	cmp	r0, #0
    2860:	d10e      	bne.n	2880 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    2862:	4628      	mov	r0, r5
    2864:	f007 f864 	bl	9930 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa2>
    2868:	2800      	cmp	r0, #0
    286a:	d109      	bne.n	2880 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    286c:	2101      	movs	r1, #1
    286e:	4630      	mov	r0, r6
    2870:	f7fe f840 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2874:	0004      	movs	r4, r0
    2876:	d005      	beq.n	2884 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    2878:	f006 fbb8 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    287c:	b170      	cbz	r0, 289c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    287e:	200c      	movs	r0, #12
    2880:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    2884:	2101      	movs	r1, #1
    2886:	4630      	mov	r0, r6
    2888:	f7fd fffc 	bl	884 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    288c:	0004      	movs	r4, r0
    288e:	d013      	beq.n	28b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    2890:	4817      	ldr	r0, [pc, #92]	; (28f0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    2892:	f990 1000 	ldrsb.w	r1, [r0]
    2896:	4620      	mov	r0, r4
    2898:	f006 f985 	bl	8ba6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    289c:	4620      	mov	r0, r4
    289e:	f006 f9ed 	bl	8c7c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    28a2:	7038      	strb	r0, [r7, #0]
    28a4:	74e8      	strb	r0, [r5, #19]
    28a6:	4629      	mov	r1, r5
    28a8:	4620      	mov	r0, r4
    28aa:	f7ff f84b 	bl	1944 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    28ae:	4606      	mov	r6, r0
    28b0:	7e68      	ldrb	r0, [r5, #25]
    28b2:	b1d0      	cbz	r0, 28ea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    28b4:	b12e      	cbz	r6, 28c2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    28b6:	e018      	b.n	28ea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    28b8:	f241 512e 	movw	r1, #5422	; 0x152e
    28bc:	2039      	movs	r0, #57	; 0x39
    28be:	f7fd fd33 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28c2:	2200      	movs	r2, #0
    28c4:	4668      	mov	r0, sp
    28c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    28c8:	f005 fdfe 	bl	84c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    28cc:	2200      	movs	r2, #0
    28ce:	2101      	movs	r1, #1
    28d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    28d2:	f005 fe73 	bl	85bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    28d6:	2204      	movs	r2, #4
    28d8:	4668      	mov	r0, sp
    28da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    28dc:	f005 fdf4 	bl	84c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    28e0:	2200      	movs	r2, #0
    28e2:	4611      	mov	r1, r2
    28e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    28e6:	f005 fe69 	bl	85bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    28ea:	4630      	mov	r0, r6
    28ec:	e7c8      	b.n	2880 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    28ee:	0000      	.short	0x0000
    28f0:	200000c4 	.word	0x200000c4

000028f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    28f4:	7801      	ldrb	r1, [r0, #0]
    28f6:	b171      	cbz	r1, 2916 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    28f8:	7841      	ldrb	r1, [r0, #1]
    28fa:	b161      	cbz	r1, 2916 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    28fc:	8841      	ldrh	r1, [r0, #2]
    28fe:	291b      	cmp	r1, #27
    2900:	d309      	bcc.n	2916 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    2902:	8881      	ldrh	r1, [r0, #4]
    2904:	291b      	cmp	r1, #27
    2906:	d306      	bcc.n	2916 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    2908:	4904      	ldr	r1, [pc, #16]	; (291c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    290a:	6802      	ldr	r2, [r0, #0]
    290c:	600a      	str	r2, [r1, #0]
    290e:	8880      	ldrh	r0, [r0, #4]
    2910:	8088      	strh	r0, [r1, #4]
    2912:	2000      	movs	r0, #0
    2914:	4770      	bx	lr
    2916:	2012      	movs	r0, #18
    2918:	4770      	bx	lr
    291a:	0000      	.short	0x0000
    291c:	20000b80 	.word	0x20000b80

00002920 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    2920:	6800      	ldr	r0, [r0, #0]
    2922:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2926:	4288      	cmp	r0, r1
    2928:	d303      	bcc.n	2932 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    292a:	4903      	ldr	r1, [pc, #12]	; (2938 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    292c:	6088      	str	r0, [r1, #8]
    292e:	2000      	movs	r0, #0
    2930:	4770      	bx	lr
    2932:	2012      	movs	r0, #18
    2934:	4770      	bx	lr
    2936:	0000      	.short	0x0000
    2938:	20000b80 	.word	0x20000b80

0000293c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    293c:	4a03      	ldr	r2, [pc, #12]	; (294c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    293e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    2942:	6001      	str	r1, [r0, #0]
    2944:	6042      	str	r2, [r0, #4]
    2946:	2000      	movs	r0, #0
    2948:	4770      	bx	lr
    294a:	0000      	.short	0x0000
    294c:	00002bfc 	.word	0x00002bfc

00002950 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    2950:	b570      	push	{r4, r5, r6, lr}
    2952:	b086      	sub	sp, #24
    2954:	4604      	mov	r4, r0
    2956:	f000 f9af 	bl	2cb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    295a:	0940      	lsrs	r0, r0, #5
    295c:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    2960:	4e2d      	ldr	r6, [pc, #180]	; (2a18 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    2962:	07c0      	lsls	r0, r0, #31
    2964:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    2968:	d002      	beq.n	2970 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    296a:	8871      	ldrh	r1, [r6, #2]
    296c:	88b0      	ldrh	r0, [r6, #4]
    296e:	e001      	b.n	2974 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    2970:	211b      	movs	r1, #27
    2972:	4608      	mov	r0, r1
    2974:	84e9      	strh	r1, [r5, #38]	; 0x26
    2976:	8528      	strh	r0, [r5, #40]	; 0x28
    2978:	f000 f99e 	bl	2cb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    297c:	0788      	lsls	r0, r1, #30
    297e:	f04f 0501 	mov.w	r5, #1
    2982:	d505      	bpl.n	2990 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    2984:	f88d 5000 	strb.w	r5, [sp]
    2988:	4668      	mov	r0, sp
    298a:	9401      	str	r4, [sp, #4]
    298c:	f7ff ff28 	bl	27e0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    2990:	68b0      	ldr	r0, [r6, #8]
    2992:	62e0      	str	r0, [r4, #44]	; 0x2c
    2994:	f641 514c 	movw	r1, #7500	; 0x1d4c
    2998:	6121      	str	r1, [r4, #16]
    299a:	8821      	ldrh	r1, [r4, #0]
    299c:	f8ad 1004 	strh.w	r1, [sp, #4]
    29a0:	7bb1      	ldrb	r1, [r6, #14]
    29a2:	f88d 1006 	strb.w	r1, [sp, #6]
    29a6:	7bf1      	ldrb	r1, [r6, #15]
    29a8:	f88d 1007 	strb.w	r1, [sp, #7]
    29ac:	8a31      	ldrh	r1, [r6, #16]
    29ae:	f8ad 1008 	strh.w	r1, [sp, #8]
    29b2:	a904      	add	r1, sp, #16
    29b4:	9100      	str	r1, [sp, #0]
    29b6:	4628      	mov	r0, r5
    29b8:	ab03      	add	r3, sp, #12
    29ba:	aa01      	add	r2, sp, #4
    29bc:	4621      	mov	r1, r4
    29be:	f007 f82a 	bl	9a16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    29c2:	b138      	cbz	r0, 29d4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    29c4:	8820      	ldrh	r0, [r4, #0]
    29c6:	2100      	movs	r1, #0
    29c8:	f7fe f836 	bl	a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    29cc:	b308      	cbz	r0, 2a12 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    29ce:	f240 517d 	movw	r1, #1405	; 0x57d
    29d2:	e01b      	b.n	2a0c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    29d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    29d8:	f88d 0014 	strb.w	r0, [sp, #20]
    29dc:	f89d 0010 	ldrb.w	r0, [sp, #16]
    29e0:	f88d 0015 	strb.w	r0, [sp, #21]
    29e4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    29e8:	f8ad 0016 	strh.w	r0, [sp, #22]
    29ec:	a905      	add	r1, sp, #20
    29ee:	4620      	mov	r0, r4
    29f0:	f005 ff05 	bl	87fe <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    29f4:	7870      	ldrb	r0, [r6, #1]
    29f6:	9000      	str	r0, [sp, #0]
    29f8:	7833      	ldrb	r3, [r6, #0]
    29fa:	88b2      	ldrh	r2, [r6, #4]
    29fc:	8871      	ldrh	r1, [r6, #2]
    29fe:	8820      	ldrh	r0, [r4, #0]
    2a00:	f7fe f84c 	bl	a9c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    2a04:	2800      	cmp	r0, #0
    2a06:	d005      	beq.n	2a14 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    2a08:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    2a0c:	2039      	movs	r0, #57	; 0x39
    2a0e:	f7fd fc8b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a12:	2009      	movs	r0, #9
    2a14:	b006      	add	sp, #24
    2a16:	bd70      	pop	{r4, r5, r6, pc}
    2a18:	20000b80 	.word	0x20000b80
    2a1c:	b51c      	push	{r2, r3, r4, lr}
    2a1e:	4909      	ldr	r1, [pc, #36]	; (2a44 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf4>)
    2a20:	e9d1 0100 	ldrd	r0, r1, [r1]
    2a24:	e9cd 0100 	strd	r0, r1, [sp]
    2a28:	e005      	b.n	2a36 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    2a2a:	9800      	ldr	r0, [sp, #0]
    2a2c:	f006 fade 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    2a30:	b108      	cbz	r0, 2a36 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    2a32:	2001      	movs	r0, #1
    2a34:	bd1c      	pop	{r2, r3, r4, pc}
    2a36:	4668      	mov	r0, sp
    2a38:	f7fd ffae 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d0f4      	beq.n	2a2a <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xda>
    2a40:	2000      	movs	r0, #0
    2a42:	bd1c      	pop	{r2, r3, r4, pc}
    2a44:	00002bfc 	.word	0x00002bfc
    2a48:	b510      	push	{r4, lr}
    2a4a:	480d      	ldr	r0, [pc, #52]	; (2a80 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x130>)
    2a4c:	2100      	movs	r1, #0
    2a4e:	4b0d      	ldr	r3, [pc, #52]	; (2a84 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x134>)
    2a50:	74c1      	strb	r1, [r0, #19]
    2a52:	8281      	strh	r1, [r0, #20]
    2a54:	221b      	movs	r2, #27
    2a56:	801a      	strh	r2, [r3, #0]
    2a58:	f44f 74a4 	mov.w	r4, #328	; 0x148
    2a5c:	805c      	strh	r4, [r3, #2]
    2a5e:	809a      	strh	r2, [r3, #4]
    2a60:	80dc      	strh	r4, [r3, #6]
    2a62:	7381      	strb	r1, [r0, #14]
    2a64:	73c1      	strb	r1, [r0, #15]
    2a66:	2303      	movs	r3, #3
    2a68:	7003      	strb	r3, [r0, #0]
    2a6a:	2302      	movs	r3, #2
    2a6c:	7043      	strb	r3, [r0, #1]
    2a6e:	8042      	strh	r2, [r0, #2]
    2a70:	8082      	strh	r2, [r0, #4]
    2a72:	f640 62a6 	movw	r2, #3750	; 0xea6
    2a76:	6082      	str	r2, [r0, #8]
    2a78:	7481      	strb	r1, [r0, #18]
    2a7a:	7301      	strb	r1, [r0, #12]
    2a7c:	bd10      	pop	{r4, pc}
    2a7e:	0000      	.short	0x0000
    2a80:	20000b80 	.word	0x20000b80
    2a84:	200000cc 	.word	0x200000cc
    2a88:	b510      	push	{r4, lr}
    2a8a:	2101      	movs	r1, #1
    2a8c:	2000      	movs	r0, #0
    2a8e:	f7fd ff31 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2a92:	0004      	movs	r4, r0
    2a94:	d10a      	bne.n	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x15c>
    2a96:	2101      	movs	r1, #1
    2a98:	f7fd fef4 	bl	884 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    2a9c:	0004      	movs	r4, r0
    2a9e:	d007      	beq.n	2ab0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x160>
    2aa0:	4806      	ldr	r0, [pc, #24]	; (2abc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x16c>)
    2aa2:	f990 1000 	ldrsb.w	r1, [r0]
    2aa6:	4620      	mov	r0, r4
    2aa8:	f006 f87d 	bl	8ba6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    2aac:	4620      	mov	r0, r4
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	f240 3113 	movw	r1, #787	; 0x313
    2ab4:	2039      	movs	r0, #57	; 0x39
    2ab6:	f7fd fc37 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aba:	0000      	.short	0x0000
    2abc:	200000c4 	.word	0x200000c4

00002ac0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	460c      	mov	r4, r1
    2ac4:	4605      	mov	r5, r0
    2ac6:	f006 f8dc 	bl	8c82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    2aca:	b158      	cbz	r0, 2ae4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    2acc:	4628      	mov	r0, r5
    2ace:	f006 f8cb 	bl	8c68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    2ad2:	b148      	cbz	r0, 2ae8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    2ad4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    2ad8:	2112      	movs	r1, #18
    2ada:	b108      	cbz	r0, 2ae0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    2adc:	2880      	cmp	r0, #128	; 0x80
    2ade:	d903      	bls.n	2ae8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    2ae0:	4608      	mov	r0, r1
    2ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ae4:	2142      	movs	r1, #66	; 0x42
    2ae6:	e7fb      	b.n	2ae0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    2ae8:	4628      	mov	r0, r5
    2aea:	f006 f8ae 	bl	8c4a <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    2aee:	b120      	cbz	r0, 2afa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    2af0:	4628      	mov	r0, r5
    2af2:	f006 f819 	bl	8b28 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    2af6:	b110      	cbz	r0, 2afe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    2af8:	e005      	b.n	2b06 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    2afa:	210c      	movs	r1, #12
    2afc:	e7f0      	b.n	2ae0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    2afe:	4628      	mov	r0, r5
    2b00:	f006 f8ac 	bl	8c5c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    2b04:	b120      	cbz	r0, 2b10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    2b06:	4628      	mov	r0, r5
    2b08:	f006 fa70 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    2b0c:	b930      	cbnz	r0, 2b1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    2b0e:	e001      	b.n	2b14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    2b10:	2012      	movs	r0, #18
    2b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b14:	4628      	mov	r0, r5
    2b16:	f006 f822 	bl	8b5e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    2b1a:	b108      	cbz	r0, 2b20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    2b1c:	200c      	movs	r0, #12
    2b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b20:	4628      	mov	r0, r5
    2b22:	f7fe fead 	bl	1880 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    2b26:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    2b2a:	f242 7010 	movw	r0, #10000	; 0x2710
    2b2e:	4346      	muls	r6, r0
    2b30:	78e1      	ldrb	r1, [r4, #3]
    2b32:	4628      	mov	r0, r5
    2b34:	f006 f880 	bl	8c38 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    2b38:	4628      	mov	r0, r5
    2b3a:	f006 f891 	bl	8c60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    2b3e:	b1a8      	cbz	r0, 2b6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    2b40:	2100      	movs	r1, #0
    2b42:	4668      	mov	r0, sp
    2b44:	f7fd ff4a 	bl	9dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    2b48:	0004      	movs	r4, r0
    2b4a:	d019      	beq.n	2b80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    2b4c:	2100      	movs	r1, #0
    2b4e:	f7fe fb81 	bl	1254 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    2b52:	f8bd 0000 	ldrh.w	r0, [sp]
    2b56:	8020      	strh	r0, [r4, #0]
    2b58:	4621      	mov	r1, r4
    2b5a:	4628      	mov	r0, r5
    2b5c:	f006 f8a8 	bl	8cb0 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    2b60:	4628      	mov	r0, r5
    2b62:	f006 f885 	bl	8c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    2b66:	b168      	cbz	r0, 2b84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    2b68:	2001      	movs	r0, #1
    2b6a:	e00e      	b.n	2b8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    2b6c:	4632      	mov	r2, r6
    2b6e:	2100      	movs	r1, #0
    2b70:	4628      	mov	r0, r5
    2b72:	f7ff fd0f 	bl	2594 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    2b76:	2800      	cmp	r0, #0
    2b78:	d0d1      	beq.n	2b1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    2b7a:	f241 7168 	movw	r1, #5992	; 0x1768
    2b7e:	e012      	b.n	2ba6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    2b80:	200d      	movs	r0, #13
    2b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b84:	4628      	mov	r0, r5
    2b86:	f006 f891 	bl	8cac <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    2b8a:	4601      	mov	r1, r0
    2b8c:	4620      	mov	r0, r4
    2b8e:	f7ff fedf 	bl	2950 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    2b92:	2800      	cmp	r0, #0
    2b94:	d1f5      	bne.n	2b82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    2b96:	4632      	mov	r2, r6
    2b98:	4621      	mov	r1, r4
    2b9a:	4628      	mov	r0, r5
    2b9c:	f7ff fcfa 	bl	2594 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    2ba0:	b120      	cbz	r0, 2bac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    2ba2:	f241 718b 	movw	r1, #6027	; 0x178b
    2ba6:	2039      	movs	r0, #57	; 0x39
    2ba8:	f7fd fbbe 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bac:	4804      	ldr	r0, [pc, #16]	; (2bc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    2bae:	6843      	ldr	r3, [r0, #4]
    2bb0:	b123      	cbz	r3, 2bbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    2bb2:	2200      	movs	r2, #0
    2bb4:	f504 7199 	add.w	r1, r4, #306	; 0x132
    2bb8:	4620      	mov	r0, r4
    2bba:	4798      	blx	r3
    2bbc:	2000      	movs	r0, #0
    2bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bc0:	200000c4 	.word	0x200000c4
    2bc4:	b51c      	push	{r2, r3, r4, lr}
    2bc6:	490c      	ldr	r1, [pc, #48]	; (2bf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x138>)
    2bc8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    2bcc:	e9cd 0100 	strd	r0, r1, [sp]
    2bd0:	e00a      	b.n	2be8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    2bd2:	9c00      	ldr	r4, [sp, #0]
    2bd4:	4620      	mov	r0, r4
    2bd6:	f006 fa09 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    2bda:	b128      	cbz	r0, 2be8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    2bdc:	4620      	mov	r0, r4
    2bde:	f006 f876 	bl	8cce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    2be2:	b108      	cbz	r0, 2be8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    2be4:	2001      	movs	r0, #1
    2be6:	bd1c      	pop	{r2, r3, r4, pc}
    2be8:	4668      	mov	r0, sp
    2bea:	f7fd fed5 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    2bee:	2800      	cmp	r0, #0
    2bf0:	d0ef      	beq.n	2bd2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x112>
    2bf2:	2000      	movs	r0, #0
    2bf4:	bd1c      	pop	{r2, r3, r4, pc}
    2bf6:	0000      	.short	0x0000
    2bf8:	00002bfc 	.word	0x00002bfc
    2bfc:	00000000 	.word	0x00000000
    2c00:	00010000 	.word	0x00010000
    2c04:	00000000 	.word	0x00000000
    2c08:	00010000 	.word	0x00010000
    2c0c:	0d10770d 	.word	0x0d10770d
    2c10:	10770059 	.word	0x10770059
    2c14:	00000000 	.word	0x00000000
    2c18:	00010000 	.word	0x00010000
    2c1c:	00000000 	.word	0x00000000
    2c20:	00010000 	.word	0x00010000

00002c24 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    2c24:	b510      	push	{r4, lr}
    2c26:	f7fe fc97 	bl	1558 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    2c2a:	4c05      	ldr	r4, [pc, #20]	; (2c40 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    2c2c:	6860      	ldr	r0, [r4, #4]
    2c2e:	f006 ff89 	bl	9b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    2c32:	f006 fe2a 	bl	988a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    2c36:	f7fe fd43 	bl	16c0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    2c3a:	2001      	movs	r0, #1
    2c3c:	7020      	strb	r0, [r4, #0]
    2c3e:	bd10      	pop	{r4, pc}
    2c40:	200000d4 	.word	0x200000d4

00002c44 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    2c44:	4801      	ldr	r0, [pc, #4]	; (2c4c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    2c46:	7800      	ldrb	r0, [r0, #0]
    2c48:	4770      	bx	lr
    2c4a:	0000      	.short	0x0000
    2c4c:	200000d4 	.word	0x200000d4

00002c50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    2c50:	b510      	push	{r4, lr}
    2c52:	4c06      	ldr	r4, [pc, #24]	; (2c6c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    2c54:	68a0      	ldr	r0, [r4, #8]
    2c56:	f006 ff75 	bl	9b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    2c5a:	68e0      	ldr	r0, [r4, #12]
    2c5c:	f006 ff72 	bl	9b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    2c60:	f006 fe15 	bl	988e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    2c64:	2000      	movs	r0, #0
    2c66:	7020      	strb	r0, [r4, #0]
    2c68:	bd10      	pop	{r4, pc}
    2c6a:	0000      	.short	0x0000
    2c6c:	200000d4 	.word	0x200000d4

00002c70 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    2c70:	b510      	push	{r4, lr}
    2c72:	4905      	ldr	r1, [pc, #20]	; (2c88 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    2c74:	4805      	ldr	r0, [pc, #20]	; (2c8c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    2c76:	f006 ff58 	bl	9b2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    2c7a:	4804      	ldr	r0, [pc, #16]	; (2c8c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    2c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c80:	4903      	ldr	r1, [pc, #12]	; (2c90 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    2c82:	1d00      	adds	r0, r0, #4
    2c84:	f006 bf51 	b.w	9b2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    2c88:	200000e4 	.word	0x200000e4
    2c8c:	200000d8 	.word	0x200000d8
    2c90:	200000ec 	.word	0x200000ec

00002c94 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    2c94:	4801      	ldr	r0, [pc, #4]	; (2c9c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    2c96:	7840      	ldrb	r0, [r0, #1]
    2c98:	4770      	bx	lr
    2c9a:	0000      	.short	0x0000
    2c9c:	200000d4 	.word	0x200000d4
    2ca0:	b510      	push	{r4, lr}
    2ca2:	f7fe ff0f 	bl	1ac4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    2ca6:	f7ff fd25 	bl	26f4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    2caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2cae:	4801      	ldr	r0, [pc, #4]	; (2cb4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    2cb0:	f7fe beee 	b.w	1a90 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    2cb4:	20000e18 	.word	0x20000e18

00002cb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    2cb8:	4901      	ldr	r1, [pc, #4]	; (2cc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    2cba:	e9d1 0100 	ldrd	r0, r1, [r1]
    2cbe:	4770      	bx	lr
    2cc0:	20000020 	.word	0x20000020

00002cc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    2cc4:	4806      	ldr	r0, [pc, #24]	; (2ce0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    2cc6:	8801      	ldrh	r1, [r0, #0]
    2cc8:	7900      	ldrb	r0, [r0, #4]
    2cca:	0602      	lsls	r2, r0, #24
    2ccc:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    2cd0:	f000 0001 	and.w	r0, r0, #1
    2cd4:	1800      	adds	r0, r0, r0
    2cd6:	b2c0      	uxtb	r0, r0
    2cd8:	f040 0001 	orr.w	r0, r0, #1
    2cdc:	4770      	bx	lr
    2cde:	0000      	.short	0x0000
    2ce0:	20000020 	.word	0x20000020

00002ce4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    2ce4:	b510      	push	{r4, lr}
    2ce6:	f004 fad3 	bl	7290 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    2cea:	2200      	movs	r2, #0
    2cec:	4b08      	ldr	r3, [pc, #32]	; (2d10 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    2cee:	4611      	mov	r1, r2
    2cf0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    2cf4:	4284      	cmp	r4, r0
    2cf6:	d303      	bcc.n	2d00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    2cf8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2cfc:	7882      	ldrb	r2, [r0, #2]
    2cfe:	e003      	b.n	2d08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    2d00:	1c49      	adds	r1, r1, #1
    2d02:	b2c9      	uxtb	r1, r1
    2d04:	290c      	cmp	r1, #12
    2d06:	d3f3      	bcc.n	2cf0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    2d08:	4802      	ldr	r0, [pc, #8]	; (2d14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    2d0a:	7002      	strb	r2, [r0, #0]
    2d0c:	bd10      	pop	{r4, pc}
    2d0e:	0000      	.short	0x0000
    2d10:	00009b5a 	.word	0x00009b5a
    2d14:	20000187 	.word	0x20000187

00002d18 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    2d18:	b570      	push	{r4, r5, r6, lr}
    2d1a:	4605      	mov	r5, r0
    2d1c:	4616      	mov	r6, r2
    2d1e:	460c      	mov	r4, r1
    2d20:	2002      	movs	r0, #2
    2d22:	f000 f8bd 	bl	2ea0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    2d26:	4906      	ldr	r1, [pc, #24]	; (2d40 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    2d28:	2001      	movs	r0, #1
    2d2a:	1ef6      	subs	r6, r6, #3
    2d2c:	7008      	strb	r0, [r1, #0]
    2d2e:	4805      	ldr	r0, [pc, #20]	; (2d44 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    2d30:	6006      	str	r6, [r0, #0]
    2d32:	4804      	ldr	r0, [pc, #16]	; (2d44 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    2d34:	3808      	subs	r0, #8
    2d36:	6005      	str	r5, [r0, #0]
    2d38:	1f00      	subs	r0, r0, #4
    2d3a:	6004      	str	r4, [r0, #0]
    2d3c:	bd70      	pop	{r4, r5, r6, pc}
    2d3e:	0000      	.short	0x0000
    2d40:	20000188 	.word	0x20000188
    2d44:	4000f510 	.word	0x4000f510

00002d48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    2d48:	b510      	push	{r4, lr}
    2d4a:	4c0c      	ldr	r4, [pc, #48]	; (2d7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    2d4c:	7820      	ldrb	r0, [r4, #0]
    2d4e:	b180      	cbz	r0, 2d72 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    2d50:	490b      	ldr	r1, [pc, #44]	; (2d80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    2d52:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2d56:	6008      	str	r0, [r1, #0]
    2d58:	f000 f86a 	bl	2e30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    2d5c:	2100      	movs	r1, #0
    2d5e:	b120      	cbz	r0, 2d6a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    2d60:	2001      	movs	r0, #1
    2d62:	7060      	strb	r0, [r4, #1]
    2d64:	4807      	ldr	r0, [pc, #28]	; (2d84 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    2d66:	6800      	ldr	r0, [r0, #0]
    2d68:	e001      	b.n	2d6e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    2d6a:	7061      	strb	r1, [r4, #1]
    2d6c:	2010      	movs	r0, #16
    2d6e:	70a0      	strb	r0, [r4, #2]
    2d70:	7021      	strb	r1, [r4, #0]
    2d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d76:	2000      	movs	r0, #0
    2d78:	f000 b892 	b.w	2ea0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    2d7c:	20000188 	.word	0x20000188
    2d80:	4001f508 	.word	0x4001f508
    2d84:	4000f400 	.word	0x4000f400

00002d88 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    2d88:	b510      	push	{r4, lr}
    2d8a:	2002      	movs	r0, #2
    2d8c:	f000 f888 	bl	2ea0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    2d90:	4904      	ldr	r1, [pc, #16]	; (2da4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    2d92:	2001      	movs	r0, #1
    2d94:	7008      	strb	r0, [r1, #0]
    2d96:	f000 f859 	bl	2e4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    2d9a:	4903      	ldr	r1, [pc, #12]	; (2da8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    2d9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2da0:	6008      	str	r0, [r1, #0]
    2da2:	bd10      	pop	{r4, pc}
    2da4:	20000188 	.word	0x20000188
    2da8:	4001f504 	.word	0x4001f504

00002dac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    2dac:	4803      	ldr	r0, [pc, #12]	; (2dbc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    2dae:	2100      	movs	r1, #0
    2db0:	7001      	strb	r1, [r0, #0]
    2db2:	7041      	strb	r1, [r0, #1]
    2db4:	2110      	movs	r1, #16
    2db6:	7081      	strb	r1, [r0, #2]
    2db8:	4770      	bx	lr
    2dba:	0000      	.short	0x0000
    2dbc:	20000188 	.word	0x20000188

00002dc0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    2dc0:	4807      	ldr	r0, [pc, #28]	; (2de0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    2dc2:	b510      	push	{r4, lr}
    2dc4:	7801      	ldrb	r1, [r0, #0]
    2dc6:	b141      	cbz	r1, 2dda <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    2dc8:	f000 f832 	bl	2e30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    2dcc:	b118      	cbz	r0, 2dd6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    2dce:	4805      	ldr	r0, [pc, #20]	; (2de4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    2dd0:	6800      	ldr	r0, [r0, #0]
    2dd2:	b2c0      	uxtb	r0, r0
    2dd4:	bd10      	pop	{r4, pc}
    2dd6:	2010      	movs	r0, #16
    2dd8:	bd10      	pop	{r4, pc}
    2dda:	7880      	ldrb	r0, [r0, #2]
    2ddc:	bd10      	pop	{r4, pc}
    2dde:	0000      	.short	0x0000
    2de0:	20000188 	.word	0x20000188
    2de4:	4000f400 	.word	0x4000f400

00002de8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    2de8:	4808      	ldr	r0, [pc, #32]	; (2e0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    2dea:	b510      	push	{r4, lr}
    2dec:	7801      	ldrb	r1, [r0, #0]
    2dee:	b159      	cbz	r1, 2e08 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    2df0:	4807      	ldr	r0, [pc, #28]	; (2e10 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    2df2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    2df6:	b128      	cbz	r0, 2e04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    2df8:	f000 f80c 	bl	2e14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d000      	beq.n	2e02 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    2e00:	2001      	movs	r0, #1
    2e02:	bd10      	pop	{r4, pc}
    2e04:	2002      	movs	r0, #2
    2e06:	bd10      	pop	{r4, pc}
    2e08:	7840      	ldrb	r0, [r0, #1]
    2e0a:	bd10      	pop	{r4, pc}
    2e0c:	20000188 	.word	0x20000188
    2e10:	4000f000 	.word	0x4000f000
    2e14:	4805      	ldr	r0, [pc, #20]	; (2e2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    2e16:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    2e1a:	b111      	cbz	r1, 2e22 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    2e1c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    2e20:	b108      	cbz	r0, 2e26 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    2e22:	2000      	movs	r0, #0
    2e24:	4770      	bx	lr
    2e26:	2001      	movs	r0, #1
    2e28:	4770      	bx	lr
    2e2a:	0000      	.short	0x0000
    2e2c:	4000f000 	.word	0x4000f000
    2e30:	4805      	ldr	r0, [pc, #20]	; (2e48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    2e32:	b510      	push	{r4, lr}
    2e34:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    2e38:	b120      	cbz	r0, 2e44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    2e3a:	f7ff ffeb 	bl	2e14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    2e3e:	b108      	cbz	r0, 2e44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    2e40:	2001      	movs	r0, #1
    2e42:	bd10      	pop	{r4, pc}
    2e44:	2000      	movs	r0, #0
    2e46:	bd10      	pop	{r4, pc}
    2e48:	4000f000 	.word	0x4000f000
    2e4c:	4804      	ldr	r0, [pc, #16]	; (2e60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    2e4e:	2100      	movs	r1, #0
    2e50:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    2e54:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    2e58:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    2e5c:	4770      	bx	lr
    2e5e:	0000      	.short	0x0000
    2e60:	4000f000 	.word	0x4000f000

00002e64 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	4d05      	ldr	r5, [pc, #20]	; (2e7c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    2e68:	2400      	movs	r4, #0
    2e6a:	7828      	ldrb	r0, [r5, #0]
    2e6c:	b110      	cbz	r0, 2e74 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    2e6e:	f000 f80f 	bl	2e90 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    2e72:	702c      	strb	r4, [r5, #0]
    2e74:	706c      	strb	r4, [r5, #1]
    2e76:	70ac      	strb	r4, [r5, #2]
    2e78:	bd70      	pop	{r4, r5, r6, pc}
    2e7a:	0000      	.short	0x0000
    2e7c:	2000018b 	.word	0x2000018b

00002e80 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    2e80:	4802      	ldr	r0, [pc, #8]	; (2e8c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    2e82:	2100      	movs	r1, #0
    2e84:	7001      	strb	r1, [r0, #0]
    2e86:	7041      	strb	r1, [r0, #1]
    2e88:	7081      	strb	r1, [r0, #2]
    2e8a:	4770      	bx	lr
    2e8c:	2000018b 	.word	0x2000018b
    2e90:	4902      	ldr	r1, [pc, #8]	; (2e9c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    2e92:	4801      	ldr	r0, [pc, #4]	; (2e98 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    2e94:	6008      	str	r0, [r1, #0]
    2e96:	4770      	bx	lr
    2e98:	02020000 	.word	0x02020000
    2e9c:	4001f508 	.word	0x4001f508

00002ea0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    2ea0:	b510      	push	{r4, lr}
    2ea2:	4604      	mov	r4, r0
    2ea4:	f000 f820 	bl	2ee8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    2ea8:	2c00      	cmp	r4, #0
    2eaa:	d00e      	beq.n	2eca <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    2eac:	4a0b      	ldr	r2, [pc, #44]	; (2edc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    2eae:	480b      	ldr	r0, [pc, #44]	; (2edc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    2eb0:	490b      	ldr	r1, [pc, #44]	; (2ee0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    2eb2:	3214      	adds	r2, #20
    2eb4:	2c01      	cmp	r4, #1
    2eb6:	d005      	beq.n	2ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    2eb8:	2c02      	cmp	r4, #2
    2eba:	d007      	beq.n	2ecc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    2ebc:	2182      	movs	r1, #130	; 0x82
    2ebe:	203d      	movs	r0, #61	; 0x3d
    2ec0:	f7fd fa32 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ec4:	2302      	movs	r3, #2
    2ec6:	6003      	str	r3, [r0, #0]
    2ec8:	6011      	str	r1, [r2, #0]
    2eca:	bd10      	pop	{r4, pc}
    2ecc:	2303      	movs	r3, #3
    2ece:	6003      	str	r3, [r0, #0]
    2ed0:	6011      	str	r1, [r2, #0]
    2ed2:	4904      	ldr	r1, [pc, #16]	; (2ee4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    2ed4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2ed8:	6008      	str	r0, [r1, #0]
    2eda:	bd10      	pop	{r4, pc}
    2edc:	4000f500 	.word	0x4000f500
    2ee0:	2000101c 	.word	0x2000101c
    2ee4:	4001f504 	.word	0x4001f504
    2ee8:	4805      	ldr	r0, [pc, #20]	; (2f00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    2eea:	b510      	push	{r4, lr}
    2eec:	2100      	movs	r1, #0
    2eee:	6001      	str	r1, [r0, #0]
    2ef0:	6001      	str	r1, [r0, #0]
    2ef2:	f7ff ffb7 	bl	2e64 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2ef6:	4903      	ldr	r1, [pc, #12]	; (2f04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    2ef8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2efc:	6008      	str	r0, [r1, #0]
    2efe:	bd10      	pop	{r4, pc}
    2f00:	4000f500 	.word	0x4000f500
    2f04:	4001f508 	.word	0x4001f508

00002f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    2f08:	4805      	ldr	r0, [pc, #20]	; (2f20 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    2f0a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    2f0e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    2f12:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2f16:	2100      	movs	r1, #0
    2f18:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    2f1c:	4770      	bx	lr
    2f1e:	0000      	.short	0x0000
    2f20:	40001000 	.word	0x40001000

00002f24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    2f24:	4904      	ldr	r1, [pc, #16]	; (2f38 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    2f26:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    2f2a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    2f2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2f32:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    2f36:	4770      	bx	lr
    2f38:	40001000 	.word	0x40001000

00002f3c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    2f3c:	4902      	ldr	r1, [pc, #8]	; (2f48 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    2f3e:	5c08      	ldrb	r0, [r1, r0]
    2f40:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    2f44:	4770      	bx	lr
    2f46:	0000      	.short	0x0000
    2f48:	00003b32 	.word	0x00003b32

00002f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    2f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f4e:	4c24      	ldr	r4, [pc, #144]	; (2fe0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    2f50:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f54:	f010 0f10 	tst.w	r0, #16
    2f58:	d001      	beq.n	2f5e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    2f5a:	2701      	movs	r7, #1
    2f5c:	e000      	b.n	2f60 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    2f5e:	2700      	movs	r7, #0
    2f60:	2010      	movs	r0, #16
    2f62:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2f66:	2002      	movs	r0, #2
    2f68:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    2f6c:	481d      	ldr	r0, [pc, #116]	; (2fe4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    2f6e:	2500      	movs	r5, #0
    2f70:	491d      	ldr	r1, [pc, #116]	; (2fe8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    2f72:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    2f76:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    2f7a:	6008      	str	r0, [r1, #0]
    2f7c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    2f80:	f44f 7688 	mov.w	r6, #272	; 0x110
    2f84:	f010 0fff 	tst.w	r0, #255	; 0xff
    2f88:	d019      	beq.n	2fbe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    2f8a:	20ff      	movs	r0, #255	; 0xff
    2f8c:	f88d 0000 	strb.w	r0, [sp]
    2f90:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    2f94:	2001      	movs	r0, #1
    2f96:	6120      	str	r0, [r4, #16]
    2f98:	e005      	b.n	2fa6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    2f9a:	bf00      	nop
    2f9c:	f89d 0000 	ldrb.w	r0, [sp]
    2fa0:	1e40      	subs	r0, r0, #1
    2fa2:	f88d 0000 	strb.w	r0, [sp]
    2fa6:	f89d 0000 	ldrb.w	r0, [sp]
    2faa:	b128      	cbz	r0, 2fb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    2fac:	4631      	mov	r1, r6
    2fae:	4620      	mov	r0, r4
    2fb0:	f006 fe32 	bl	9c18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d0f1      	beq.n	2f9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    2fb8:	f89d 0000 	ldrb.w	r0, [sp]
    2fbc:	b158      	cbz	r0, 2fd6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    2fbe:	f000 fbcd 	bl	375c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    2fc2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    2fc6:	f000 fd35 	bl	3a34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    2fca:	2f00      	cmp	r7, #0
    2fcc:	d002      	beq.n	2fd4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    2fce:	2010      	movs	r0, #16
    2fd0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    2fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fd6:	f640 0194 	movw	r1, #2196	; 0x894
    2fda:	203e      	movs	r0, #62	; 0x3e
    2fdc:	f7fd f9a4 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fe0:	40001000 	.word	0x40001000
    2fe4:	20000be8 	.word	0x20000be8
    2fe8:	4001f508 	.word	0x4001f508

00002fec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    2fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ff0:	4d18      	ldr	r5, [pc, #96]	; (3054 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    2ff2:	4607      	mov	r7, r0
    2ff4:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    2ff8:	07c2      	lsls	r2, r0, #31
    2ffa:	d00f      	beq.n	301c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    2ffc:	4c16      	ldr	r4, [pc, #88]	; (3058 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    2ffe:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    3002:	f042 0201 	orr.w	r2, r2, #1
    3006:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    300a:	f040 0002 	orr.w	r0, r0, #2
    300e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    3012:	2601      	movs	r6, #1
    3014:	b13f      	cbz	r7, 3026 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    3016:	2f01      	cmp	r7, #1
    3018:	d00b      	beq.n	3032 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    301a:	e010      	b.n	303e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    301c:	f240 716f 	movw	r1, #1903	; 0x76f
    3020:	203e      	movs	r0, #62	; 0x3e
    3022:	f7fd f981 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3026:	4608      	mov	r0, r1
    3028:	f000 fd5e 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    302c:	726e      	strb	r6, [r5, #9]
    302e:	6026      	str	r6, [r4, #0]
    3030:	e005      	b.n	303e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3032:	4608      	mov	r0, r1
    3034:	f000 fd3e 	bl	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3038:	2002      	movs	r0, #2
    303a:	7268      	strb	r0, [r5, #9]
    303c:	6066      	str	r6, [r4, #4]
    303e:	4807      	ldr	r0, [pc, #28]	; (305c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3040:	64c6      	str	r6, [r0, #76]	; 0x4c
    3042:	4806      	ldr	r0, [pc, #24]	; (305c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3044:	300c      	adds	r0, #12
    3046:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    304a:	4638      	mov	r0, r7
    304c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3050:	f000 bcc2 	b.w	39d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    3054:	20000be8 	.word	0x20000be8
    3058:	40001000 	.word	0x40001000
    305c:	40008000 	.word	0x40008000

00003060 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    3060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3064:	4c2c      	ldr	r4, [pc, #176]	; (3118 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    3066:	0006      	movs	r6, r0
    3068:	4d2c      	ldr	r5, [pc, #176]	; (311c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    306a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    306e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 3120 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    3072:	f040 0002 	orr.w	r0, r0, #2
    3076:	4689      	mov	r9, r1
    3078:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    307c:	f04f 0700 	mov.w	r7, #0
    3080:	d002      	beq.n	3088 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    3082:	2e01      	cmp	r6, #1
    3084:	d020      	beq.n	30c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    3086:	e036      	b.n	30f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    3088:	4608      	mov	r0, r1
    308a:	f000 fd2d 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    308e:	2001      	movs	r0, #1
    3090:	7260      	strb	r0, [r4, #9]
    3092:	79e0      	ldrb	r0, [r4, #7]
    3094:	2801      	cmp	r0, #1
    3096:	d105      	bne.n	30a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    3098:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    309c:	f040 0008 	orr.w	r0, r0, #8
    30a0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    30a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    30a6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    30aa:	6260      	str	r0, [r4, #36]	; 0x24
    30ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    30b0:	f8c8 0000 	str.w	r0, [r8]
    30b4:	491b      	ldr	r1, [pc, #108]	; (3124 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    30b6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    30ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    30be:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    30c2:	fbb0 f7f1 	udiv	r7, r0, r1
    30c6:	e016      	b.n	30f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    30c8:	4608      	mov	r0, r1
    30ca:	f000 fcf3 	bl	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    30ce:	2002      	movs	r0, #2
    30d0:	7260      	strb	r0, [r4, #9]
    30d2:	79e0      	ldrb	r0, [r4, #7]
    30d4:	2801      	cmp	r0, #1
    30d6:	d105      	bne.n	30e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    30d8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    30dc:	f040 0004 	orr.w	r0, r0, #4
    30e0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    30e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    30e6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    30ea:	6260      	str	r0, [r4, #36]	; 0x24
    30ec:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    30f0:	f8c8 0000 	str.w	r0, [r8]
    30f4:	2729      	movs	r7, #41	; 0x29
    30f6:	f000 fb9d 	bl	3834 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    30fa:	f006 fdd5 	bl	9ca8 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    30fe:	b120      	cbz	r0, 310a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    3100:	f7ff ff24 	bl	2f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3104:	2000      	movs	r0, #0
    3106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    310a:	2100      	movs	r1, #0
    310c:	4630      	mov	r0, r6
    310e:	f000 fc63 	bl	39d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    3112:	4638      	mov	r0, r7
    3114:	e7f7      	b.n	3106 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    3116:	0000      	.short	0x0000
    3118:	20000be8 	.word	0x20000be8
    311c:	40001000 	.word	0x40001000
    3120:	4001f504 	.word	0x4001f504
    3124:	00003b2c 	.word	0x00003b2c

00003128 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    3128:	b510      	push	{r4, lr}
    312a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    312c:	4901      	ldr	r1, [pc, #4]	; (3134 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    312e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    3132:	bd10      	pop	{r4, pc}
    3134:	20000bd8 	.word	0x20000bd8

00003138 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    3138:	b570      	push	{r4, r5, r6, lr}
    313a:	4c0f      	ldr	r4, [pc, #60]	; (3178 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    313c:	4603      	mov	r3, r0
    313e:	2002      	movs	r0, #2
    3140:	7320      	strb	r0, [r4, #12]
    3142:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    3146:	2096      	movs	r0, #150	; 0x96
    3148:	f894 1020 	ldrb.w	r1, [r4, #32]
    314c:	7d22      	ldrb	r2, [r4, #20]
    314e:	2d01      	cmp	r5, #1
    3150:	d00e      	beq.n	3170 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    3152:	f000 fd27 	bl	3ba4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    3156:	6120      	str	r0, [r4, #16]
    3158:	4808      	ldr	r0, [pc, #32]	; (317c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    315a:	2100      	movs	r1, #0
    315c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3160:	6921      	ldr	r1, [r4, #16]
    3162:	69e0      	ldr	r0, [r4, #28]
    3164:	4408      	add	r0, r1
    3166:	4905      	ldr	r1, [pc, #20]	; (317c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    3168:	1d09      	adds	r1, r1, #4
    316a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    316e:	bd70      	pop	{r4, r5, r6, pc}
    3170:	f000 fd36 	bl	3be0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    3174:	e7ef      	b.n	3156 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    3176:	0000      	.short	0x0000
    3178:	20000be8 	.word	0x20000be8
    317c:	40008000 	.word	0x40008000

00003180 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    3180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3184:	2234      	movs	r2, #52	; 0x34
    3186:	2100      	movs	r1, #0
    3188:	4813      	ldr	r0, [pc, #76]	; (31d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    318a:	f006 ffab 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    318e:	f000 fc51 	bl	3a34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    3192:	f006 fe68 	bl	9e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3196:	4d11      	ldr	r5, [pc, #68]	; (31dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    3198:	4e10      	ldr	r6, [pc, #64]	; (31dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    319a:	2400      	movs	r4, #0
    319c:	4f0f      	ldr	r7, [pc, #60]	; (31dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    319e:	3508      	adds	r5, #8
    31a0:	3610      	adds	r6, #16
    31a2:	b928      	cbnz	r0, 31b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    31a4:	f006 fe76 	bl	9e94 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    31a8:	b910      	cbnz	r0, 31b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    31aa:	f006 fe7d 	bl	9ea8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    31ae:	b108      	cbz	r0, 31b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    31b0:	2224      	movs	r2, #36	; 0x24
    31b2:	e006      	b.n	31c2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    31b4:	f006 feb8 	bl	9f28 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31b8:	b910      	cbnz	r0, 31c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    31ba:	f006 feab 	bl	9f14 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    31be:	b140      	cbz	r0, 31d2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    31c0:	2240      	movs	r2, #64	; 0x40
    31c2:	21ff      	movs	r1, #255	; 0xff
    31c4:	4638      	mov	r0, r7
    31c6:	f006 ff8d 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    31ca:	602c      	str	r4, [r5, #0]
    31cc:	6034      	str	r4, [r6, #0]
    31ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31d2:	2238      	movs	r2, #56	; 0x38
    31d4:	e7f5      	b.n	31c2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    31d6:	0000      	.short	0x0000
    31d8:	20000be8 	.word	0x20000be8
    31dc:	40000e00 	.word	0x40000e00

000031e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    31e0:	b510      	push	{r4, lr}
    31e2:	f000 fbdb 	bl	399c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    31e6:	f7ff feb1 	bl	2f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    31ea:	f004 facd 	bl	7788 <mpsl_fem_disable>
    31ee:	b130      	cbz	r0, 31fe <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    31f0:	1c40      	adds	r0, r0, #1
    31f2:	d004      	beq.n	31fe <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    31f4:	f240 5165 	movw	r1, #1381	; 0x565
    31f8:	203e      	movs	r0, #62	; 0x3e
    31fa:	f7fd f895 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31fe:	480f      	ldr	r0, [pc, #60]	; (323c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    3200:	4a0f      	ldr	r2, [pc, #60]	; (3240 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    3202:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3204:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    3208:	6011      	str	r1, [r2, #0]
    320a:	2400      	movs	r4, #0
    320c:	6244      	str	r4, [r0, #36]	; 0x24
    320e:	7304      	strb	r4, [r0, #12]
    3210:	61c4      	str	r4, [r0, #28]
    3212:	6184      	str	r4, [r0, #24]
    3214:	f000 fbc2 	bl	399c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    3218:	480a      	ldr	r0, [pc, #40]	; (3244 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    321a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    321e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3222:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3226:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    322a:	2001      	movs	r0, #1
    322c:	f006 fce3 	bl	9bf6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    3230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3234:	2001      	movs	r0, #1
    3236:	f006 bcd1 	b.w	9bdc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    323a:	0000      	.short	0x0000
    323c:	20000be8 	.word	0x20000be8
    3240:	4001f508 	.word	0x4001f508
    3244:	40008000 	.word	0x40008000

00003248 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    3248:	b570      	push	{r4, r5, r6, lr}
    324a:	2001      	movs	r0, #1
    324c:	f006 fcd3 	bl	9bf6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    3250:	4c37      	ldr	r4, [pc, #220]	; (3330 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    3252:	2000      	movs	r0, #0
    3254:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    3258:	2001      	movs	r0, #1
    325a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    325e:	f006 fe39 	bl	9ed4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3262:	4d34      	ldr	r5, [pc, #208]	; (3334 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    3264:	b118      	cbz	r0, 326e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    3266:	6828      	ldr	r0, [r5, #0]
    3268:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    326c:	6028      	str	r0, [r5, #0]
    326e:	f006 fe25 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3272:	b128      	cbz	r0, 3280 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    3274:	6828      	ldr	r0, [r5, #0]
    3276:	4930      	ldr	r1, [pc, #192]	; (3338 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    3278:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    327c:	4308      	orrs	r0, r1
    327e:	6028      	str	r0, [r5, #0]
    3280:	f006 fe38 	bl	9ef4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3284:	b138      	cbz	r0, 3296 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    3286:	482b      	ldr	r0, [pc, #172]	; (3334 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    3288:	1d00      	adds	r0, r0, #4
    328a:	6801      	ldr	r1, [r0, #0]
    328c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    3290:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    3294:	6001      	str	r1, [r0, #0]
    3296:	4927      	ldr	r1, [pc, #156]	; (3334 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    3298:	4828      	ldr	r0, [pc, #160]	; (333c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    329a:	313c      	adds	r1, #60	; 0x3c
    329c:	6008      	str	r0, [r1, #0]
    329e:	f004 faad 	bl	77fc <mpsl_fem_device_config_254_apply_get>
    32a2:	b140      	cbz	r0, 32b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    32a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    32a8:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    32ac:	1c41      	adds	r1, r0, #1
    32ae:	d002      	beq.n	32b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    32b0:	4920      	ldr	r1, [pc, #128]	; (3334 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    32b2:	3110      	adds	r1, #16
    32b4:	6008      	str	r0, [r1, #0]
    32b6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    32ba:	6e00      	ldr	r0, [r0, #96]	; 0x60
    32bc:	1c41      	adds	r1, r0, #1
    32be:	d004      	beq.n	32ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    32c0:	491f      	ldr	r1, [pc, #124]	; (3340 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    32c2:	680a      	ldr	r2, [r1, #0]
    32c4:	f360 4217 	bfi	r2, r0, #16, #8
    32c8:	600a      	str	r2, [r1, #0]
    32ca:	f240 1103 	movw	r1, #259	; 0x103
    32ce:	f240 605b 	movw	r0, #1627	; 0x65b
    32d2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    32d6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    32da:	2001      	movs	r0, #1
    32dc:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    32e0:	f000 f842 	bl	3368 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    32e4:	f240 2001 	movw	r0, #513	; 0x201
    32e8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    32ec:	2002      	movs	r0, #2
    32ee:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    32f2:	4914      	ldr	r1, [pc, #80]	; (3344 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    32f4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    32f8:	6008      	str	r0, [r1, #0]
    32fa:	4913      	ldr	r1, [pc, #76]	; (3348 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    32fc:	2000      	movs	r0, #0
    32fe:	8608      	strh	r0, [r1, #48]	; 0x30
    3300:	3110      	adds	r1, #16
    3302:	61c8      	str	r0, [r1, #28]
    3304:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    3308:	2001      	movs	r0, #1
    330a:	f006 fc67 	bl	9bdc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    330e:	2010      	movs	r0, #16
    3310:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3314:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3318:	2002      	movs	r0, #2
    331a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    331e:	480b      	ldr	r0, [pc, #44]	; (334c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    3320:	6800      	ldr	r0, [r0, #0]
    3322:	2800      	cmp	r0, #0
    3324:	d002      	beq.n	332c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    3326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    332a:	4700      	bx	r0
    332c:	bd70      	pop	{r4, r5, r6, pc}
    332e:	0000      	.short	0x0000
    3330:	40001000 	.word	0x40001000
    3334:	4000173c 	.word	0x4000173c
    3338:	80000096 	.word	0x80000096
    333c:	8900002c 	.word	0x8900002c
    3340:	4000158c 	.word	0x4000158c
    3344:	4001f504 	.word	0x4001f504
    3348:	20000bd8 	.word	0x20000bd8
    334c:	200000f4 	.word	0x200000f4

00003350 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    3350:	4901      	ldr	r1, [pc, #4]	; (3358 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    3352:	7548      	strb	r0, [r1, #21]
    3354:	4770      	bx	lr
    3356:	0000      	.short	0x0000
    3358:	20000be8 	.word	0x20000be8

0000335c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    335c:	4901      	ldr	r1, [pc, #4]	; (3364 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    335e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3362:	4770      	bx	lr
    3364:	00003b80 	.word	0x00003b80

00003368 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    3368:	4908      	ldr	r1, [pc, #32]	; (338c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    336a:	b510      	push	{r4, lr}
    336c:	7508      	strb	r0, [r1, #20]
    336e:	4908      	ldr	r1, [pc, #32]	; (3390 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    3370:	2801      	cmp	r0, #1
    3372:	d006      	beq.n	3382 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    3374:	2802      	cmp	r0, #2
    3376:	d006      	beq.n	3386 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    3378:	f640 516c 	movw	r1, #3436	; 0xd6c
    337c:	203e      	movs	r0, #62	; 0x3e
    337e:	f7fc ffd3 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3382:	2003      	movs	r0, #3
    3384:	e000      	b.n	3388 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    3386:	2004      	movs	r0, #4
    3388:	6008      	str	r0, [r1, #0]
    338a:	bd10      	pop	{r4, pc}
    338c:	20000be8 	.word	0x20000be8
    3390:	40001510 	.word	0x40001510

00003394 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    3394:	4905      	ldr	r1, [pc, #20]	; (33ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    3396:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    339a:	4805      	ldr	r0, [pc, #20]	; (33b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    339c:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    33a0:	f041 0101 	orr.w	r1, r1, #1
    33a4:	7001      	strb	r1, [r0, #0]
    33a6:	f000 ba0b 	b.w	37c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    33aa:	0000      	.short	0x0000
    33ac:	40001000 	.word	0x40001000
    33b0:	20000be8 	.word	0x20000be8

000033b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    33b4:	4901      	ldr	r1, [pc, #4]	; (33bc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    33b6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    33ba:	4770      	bx	lr
    33bc:	00003b8c 	.word	0x00003b8c

000033c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    33c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33c4:	4e30      	ldr	r6, [pc, #192]	; (3488 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    33c6:	4c31      	ldr	r4, [pc, #196]	; (348c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    33c8:	4688      	mov	r8, r1
    33ca:	0007      	movs	r7, r0
    33cc:	4615      	mov	r5, r2
    33ce:	f04f 0901 	mov.w	r9, #1
    33d2:	d006      	beq.n	33e2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    33d4:	2f01      	cmp	r7, #1
    33d6:	d012      	beq.n	33fe <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    33d8:	f640 0117 	movw	r1, #2071	; 0x817
    33dc:	203e      	movs	r0, #62	; 0x3e
    33de:	f7fc ffa3 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    33e2:	4610      	mov	r0, r2
    33e4:	f000 fb80 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    33e8:	4829      	ldr	r0, [pc, #164]	; (3490 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    33ea:	f884 9009 	strb.w	r9, [r4, #9]
    33ee:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    33f2:	4640      	mov	r0, r8
    33f4:	f000 fb26 	bl	3a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    33f8:	4605      	mov	r5, r0
    33fa:	4630      	mov	r0, r6
    33fc:	e00c      	b.n	3418 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    33fe:	4610      	mov	r0, r2
    3400:	f000 fb58 	bl	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3404:	2002      	movs	r0, #2
    3406:	7260      	strb	r0, [r4, #9]
    3408:	f649 71ba 	movw	r1, #40890	; 0x9fba
    340c:	4640      	mov	r0, r8
    340e:	f000 fb19 	bl	3a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    3412:	4605      	mov	r5, r0
    3414:	481c      	ldr	r0, [pc, #112]	; (3488 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3416:	1d00      	adds	r0, r0, #4
    3418:	f000 fad2 	bl	39c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    341c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3494 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    3420:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    3424:	f8df a074 	ldr.w	sl, [pc, #116]	; 349c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    3428:	481b      	ldr	r0, [pc, #108]	; (3498 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    342a:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    342e:	2010      	movs	r0, #16
    3430:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    3434:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3436:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    343a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    343e:	6260      	str	r0, [r4, #36]	; 0x24
    3440:	4817      	ldr	r0, [pc, #92]	; (34a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3442:	6006      	str	r6, [r0, #0]
    3444:	f000 f9f6 	bl	3834 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    3448:	4641      	mov	r1, r8
    344a:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    344e:	4811      	ldr	r0, [pc, #68]	; (3494 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    3450:	300c      	adds	r0, #12
    3452:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3456:	42a8      	cmp	r0, r5
    3458:	d310      	bcc.n	347c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    345a:	2000      	movs	r0, #0
    345c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3460:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    3464:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3466:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    346a:	6260      	str	r0, [r4, #36]	; 0x24
    346c:	480c      	ldr	r0, [pc, #48]	; (34a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    346e:	1d00      	adds	r0, r0, #4
    3470:	6006      	str	r6, [r0, #0]
    3472:	f7ff fd6b 	bl	2f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3476:	2000      	movs	r0, #0
    3478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    347c:	4629      	mov	r1, r5
    347e:	4638      	mov	r0, r7
    3480:	f000 faaa 	bl	39d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    3484:	2001      	movs	r0, #1
    3486:	e7f7      	b.n	3478 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    3488:	40001000 	.word	0x40001000
    348c:	20000be8 	.word	0x20000be8
    3490:	00003b2c 	.word	0x00003b2c
    3494:	40008000 	.word	0x40008000
    3498:	40008140 	.word	0x40008140
    349c:	4001f098 	.word	0x4001f098
    34a0:	4001f504 	.word	0x4001f504

000034a4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    34a4:	4b0d      	ldr	r3, [pc, #52]	; (34dc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    34a6:	b510      	push	{r4, lr}
    34a8:	71d8      	strb	r0, [r3, #7]
    34aa:	729a      	strb	r2, [r3, #10]
    34ac:	b151      	cbz	r1, 34c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    34ae:	2002      	movs	r0, #2
    34b0:	7218      	strb	r0, [r3, #8]
    34b2:	2801      	cmp	r0, #1
    34b4:	d008      	beq.n	34c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    34b6:	2802      	cmp	r0, #2
    34b8:	d00f      	beq.n	34da <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    34ba:	f640 2144 	movw	r1, #2628	; 0xa44
    34be:	203e      	movs	r0, #62	; 0x3e
    34c0:	f7fc ff32 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34c4:	2001      	movs	r0, #1
    34c6:	e7f3      	b.n	34b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    34c8:	7a58      	ldrb	r0, [r3, #9]
    34ca:	2802      	cmp	r0, #2
    34cc:	d105      	bne.n	34da <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    34ce:	f000 f93b 	bl	3748 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    34d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34d6:	f000 ba49 	b.w	396c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    34da:	bd10      	pop	{r4, pc}
    34dc:	20000be8 	.word	0x20000be8

000034e0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    34e0:	4904      	ldr	r1, [pc, #16]	; (34f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    34e2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    34e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    34ea:	4249      	negs	r1, r1
    34ec:	7001      	strb	r1, [r0, #0]
    34ee:	2001      	movs	r0, #1
    34f0:	4770      	bx	lr
    34f2:	0000      	.short	0x0000
    34f4:	40001000 	.word	0x40001000

000034f8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    34f8:	4903      	ldr	r1, [pc, #12]	; (3508 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    34fa:	0e02      	lsrs	r2, r0, #24
    34fc:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    3500:	0200      	lsls	r0, r0, #8
    3502:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    3506:	4770      	bx	lr
    3508:	40001000 	.word	0x40001000

0000350c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    350c:	4901      	ldr	r1, [pc, #4]	; (3514 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    350e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3512:	4770      	bx	lr
    3514:	40001000 	.word	0x40001000

00003518 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    3518:	b510      	push	{r4, lr}
    351a:	2200      	movs	r2, #0
    351c:	2901      	cmp	r1, #1
    351e:	d006      	beq.n	352e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    3520:	2902      	cmp	r1, #2
    3522:	d002      	beq.n	352a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    3524:	f240 21d2 	movw	r1, #722	; 0x2d2
    3528:	e014      	b.n	3554 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    352a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    352e:	490b      	ldr	r1, [pc, #44]	; (355c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    3530:	430a      	orrs	r2, r1
    3532:	490b      	ldr	r1, [pc, #44]	; (3560 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3534:	600a      	str	r2, [r1, #0]
    3536:	490b      	ldr	r1, [pc, #44]	; (3564 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    3538:	4308      	orrs	r0, r1
    353a:	4909      	ldr	r1, [pc, #36]	; (3560 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    353c:	1d09      	adds	r1, r1, #4
    353e:	6008      	str	r0, [r1, #0]
    3540:	4809      	ldr	r0, [pc, #36]	; (3568 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    3542:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3546:	b2c0      	uxtb	r0, r0
    3548:	2803      	cmp	r0, #3
    354a:	d001      	beq.n	3550 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    354c:	280b      	cmp	r0, #11
    354e:	d104      	bne.n	355a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    3550:	f240 21ea 	movw	r1, #746	; 0x2ea
    3554:	203e      	movs	r0, #62	; 0x3e
    3556:	f7fc fee7 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    355a:	bd10      	pop	{r4, pc}
    355c:	00100108 	.word	0x00100108
    3560:	40001514 	.word	0x40001514
    3564:	02030000 	.word	0x02030000
    3568:	40001000 	.word	0x40001000

0000356c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    356c:	4901      	ldr	r1, [pc, #4]	; (3574 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    356e:	7588      	strb	r0, [r1, #22]
    3570:	4770      	bx	lr
    3572:	0000      	.short	0x0000
    3574:	20000be8 	.word	0x20000be8

00003578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    3578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    357c:	4851      	ldr	r0, [pc, #324]	; (36c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    357e:	f04f 0a01 	mov.w	sl, #1
    3582:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    3586:	484f      	ldr	r0, [pc, #316]	; (36c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3588:	300c      	adds	r0, #12
    358a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    358e:	f006 fb89 	bl	9ca4 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    3592:	4c4d      	ldr	r4, [pc, #308]	; (36c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3594:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    3598:	f000 f8e0 	bl	375c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    359c:	494b      	ldr	r1, [pc, #300]	; (36cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    359e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    35a0:	6008      	str	r0, [r1, #0]
    35a2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 36d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    35a6:	2000      	movs	r0, #0
    35a8:	6260      	str	r0, [r4, #36]	; 0x24
    35aa:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    35ae:	f240 131d 	movw	r3, #285	; 0x11d
    35b2:	439a      	bics	r2, r3
    35b4:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    35b8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    35bc:	f000 f94e 	bl	385c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    35c0:	4605      	mov	r5, r0
    35c2:	4840      	ldr	r0, [pc, #256]	; (36c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    35c4:	3008      	adds	r0, #8
    35c6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    35ca:	4e3e      	ldr	r6, [pc, #248]	; (36c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    35cc:	61e0      	str	r0, [r4, #28]
    35ce:	1d36      	adds	r6, r6, #4
    35d0:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    35d4:	61a0      	str	r0, [r4, #24]
    35d6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    35da:	7d21      	ldrb	r1, [r4, #20]
    35dc:	f884 1020 	strb.w	r1, [r4, #32]
    35e0:	7a61      	ldrb	r1, [r4, #9]
    35e2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    35e6:	46a1      	mov	r9, r4
    35e8:	2400      	movs	r4, #0
    35ea:	4639      	mov	r1, r7
    35ec:	4628      	mov	r0, r5
    35ee:	f000 f983 	bl	38f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    35f2:	b910      	cbnz	r0, 35fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    35f4:	f8c8 a010 	str.w	sl, [r8, #16]
    35f8:	2401      	movs	r4, #1
    35fa:	4f33      	ldr	r7, [pc, #204]	; (36c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    35fc:	07e8      	lsls	r0, r5, #31
    35fe:	f1a7 0710 	sub.w	r7, r7, #16
    3602:	d120      	bne.n	3646 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    3604:	07a8      	lsls	r0, r5, #30
    3606:	d527      	bpl.n	3658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    3608:	f006 fc74 	bl	9ef4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    360c:	b9f0      	cbnz	r0, 364c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    360e:	f006 fc61 	bl	9ed4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3612:	b9d8      	cbnz	r0, 364c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3614:	482f      	ldr	r0, [pc, #188]	; (36d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    3616:	6800      	ldr	r0, [r0, #0]
    3618:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    361c:	f3c0 6300 	ubfx	r3, r0, #24, #1
    3620:	f000 020f 	and.w	r2, r0, #15
    3624:	f3c0 1103 	ubfx	r1, r0, #4, #4
    3628:	f3c0 2803 	ubfx	r8, r0, #8, #4
    362c:	b173      	cbz	r3, 364c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    362e:	b11a      	cbz	r2, 3638 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3630:	b111      	cbz	r1, 3638 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3632:	f1b8 0f00 	cmp.w	r8, #0
    3636:	d109      	bne.n	364c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3638:	f3c0 4004 	ubfx	r0, r0, #16, #5
    363c:	2801      	cmp	r0, #1
    363e:	d105      	bne.n	364c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3640:	f1bc 0f03 	cmp.w	ip, #3
    3644:	d202      	bcs.n	364c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3646:	6838      	ldr	r0, [r7, #0]
    3648:	4780      	blx	r0
    364a:	e00e      	b.n	366a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    364c:	f345 0080 	sbfx	r0, r5, #2, #1
    3650:	4621      	mov	r1, r4
    3652:	1c40      	adds	r0, r0, #1
    3654:	687a      	ldr	r2, [r7, #4]
    3656:	e007      	b.n	3668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    3658:	f015 0f28 	tst.w	r5, #40	; 0x28
    365c:	d005      	beq.n	366a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    365e:	f345 1140 	sbfx	r1, r5, #5, #1
    3662:	68ba      	ldr	r2, [r7, #8]
    3664:	4620      	mov	r0, r4
    3666:	1c49      	adds	r1, r1, #1
    3668:	4790      	blx	r2
    366a:	06e8      	lsls	r0, r5, #27
    366c:	d501      	bpl.n	3672 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    366e:	68f8      	ldr	r0, [r7, #12]
    3670:	4780      	blx	r0
    3672:	f899 1009 	ldrb.w	r1, [r9, #9]
    3676:	4648      	mov	r0, r9
    3678:	2902      	cmp	r1, #2
    367a:	d120      	bne.n	36be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    367c:	7b01      	ldrb	r1, [r0, #12]
    367e:	2900      	cmp	r1, #0
    3680:	d01d      	beq.n	36be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3682:	2902      	cmp	r1, #2
    3684:	d004      	beq.n	3690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    3686:	2901      	cmp	r1, #1
    3688:	d009      	beq.n	369e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    368a:	f640 4156 	movw	r1, #3158	; 0xc56
    368e:	e00d      	b.n	36ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    3690:	69c1      	ldr	r1, [r0, #28]
    3692:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3696:	4408      	add	r0, r1
    3698:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    369c:	e00b      	b.n	36b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    369e:	6901      	ldr	r1, [r0, #16]
    36a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
    36a4:	4281      	cmp	r1, r0
    36a6:	d804      	bhi.n	36b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    36a8:	f640 4157 	movw	r1, #3159	; 0xc57
    36ac:	203e      	movs	r0, #62	; 0x3e
    36ae:	f7fc fe3b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36b2:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    36b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36ba:	f000 b961 	b.w	3980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    36be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36c2:	0000      	.short	0x0000
    36c4:	40008000 	.word	0x40008000
    36c8:	20000be8 	.word	0x20000be8
    36cc:	4001f508 	.word	0x4001f508
    36d0:	40001000 	.word	0x40001000
    36d4:	40001450 	.word	0x40001450
    36d8:	480b      	ldr	r0, [pc, #44]	; (3708 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    36da:	7d81      	ldrb	r1, [r0, #22]
    36dc:	480b      	ldr	r0, [pc, #44]	; (370c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    36de:	5c40      	ldrb	r0, [r0, r1]
    36e0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    36e4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    36e8:	d204      	bcs.n	36f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    36ea:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    36ee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    36f2:	e001      	b.n	36f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    36f4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    36f8:	4a05      	ldr	r2, [pc, #20]	; (3710 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    36fa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    36fe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    3702:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    3706:	4770      	bx	lr
    3708:	20000be8 	.word	0x20000be8
    370c:	00003b32 	.word	0x00003b32
    3710:	40001000 	.word	0x40001000
    3714:	b508      	push	{r3, lr}
    3716:	490b      	ldr	r1, [pc, #44]	; (3744 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    3718:	466b      	mov	r3, sp
    371a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    371e:	7d89      	ldrb	r1, [r1, #22]
    3720:	f000 faaa 	bl	3c78 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    3724:	f99d 0000 	ldrsb.w	r0, [sp]
    3728:	f000 fa7a 	bl	3c20 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    372c:	f10d 0001 	add.w	r0, sp, #1
    3730:	f004 f84e 	bl	77d0 <mpsl_fem_pa_gain_set>
    3734:	2800      	cmp	r0, #0
    3736:	d004      	beq.n	3742 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    3738:	f240 51e6 	movw	r1, #1510	; 0x5e6
    373c:	203e      	movs	r0, #62	; 0x3e
    373e:	f7fc fdf3 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3742:	bd08      	pop	{r3, pc}
    3744:	20000be8 	.word	0x20000be8
    3748:	4803      	ldr	r0, [pc, #12]	; (3758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    374a:	7a01      	ldrb	r1, [r0, #8]
    374c:	2901      	cmp	r1, #1
    374e:	d102      	bne.n	3756 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    3750:	7a80      	ldrb	r0, [r0, #10]
    3752:	f7ff bfdf 	b.w	3714 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3756:	4770      	bx	lr
    3758:	20000be8 	.word	0x20000be8
    375c:	480d      	ldr	r0, [pc, #52]	; (3794 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    375e:	b510      	push	{r4, lr}
    3760:	7a40      	ldrb	r0, [r0, #9]
    3762:	2801      	cmp	r0, #1
    3764:	d00c      	beq.n	3780 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    3766:	2802      	cmp	r0, #2
    3768:	d113      	bne.n	3792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    376a:	f004 f813 	bl	7794 <mpsl_fem_lna_configuration_clear>
    376e:	2800      	cmp	r0, #0
    3770:	d00f      	beq.n	3792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3772:	1c40      	adds	r0, r0, #1
    3774:	d00d      	beq.n	3792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3776:	f640 01ab 	movw	r1, #2219	; 0x8ab
    377a:	203e      	movs	r0, #62	; 0x3e
    377c:	f7fc fdd4 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3780:	f004 f81a 	bl	77b8 <mpsl_fem_pa_configuration_clear>
    3784:	2800      	cmp	r0, #0
    3786:	d004      	beq.n	3792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3788:	1c40      	adds	r0, r0, #1
    378a:	d002      	beq.n	3792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    378c:	f640 01a5 	movw	r1, #2213	; 0x8a5
    3790:	e7f3      	b.n	377a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    3792:	bd10      	pop	{r4, pc}
    3794:	20000be8 	.word	0x20000be8
    3798:	4808      	ldr	r0, [pc, #32]	; (37bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    379a:	2100      	movs	r1, #0
    379c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    37a0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    37a4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    37a8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    37ac:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    37b0:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    37b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    37b8:	4770      	bx	lr
    37ba:	0000      	.short	0x0000
    37bc:	40001000 	.word	0x40001000
    37c0:	4818      	ldr	r0, [pc, #96]	; (3824 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    37c2:	b510      	push	{r4, lr}
    37c4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    37c8:	07c1      	lsls	r1, r0, #31
    37ca:	d029      	beq.n	3820 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    37cc:	0781      	lsls	r1, r0, #30
    37ce:	d514      	bpl.n	37fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    37d0:	4815      	ldr	r0, [pc, #84]	; (3828 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    37d2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    37d6:	f041 0101 	orr.w	r1, r1, #1
    37da:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    37de:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    37e2:	b2c0      	uxtb	r0, r0
    37e4:	280b      	cmp	r0, #11
    37e6:	d005      	beq.n	37f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    37e8:	280a      	cmp	r0, #10
    37ea:	d003      	beq.n	37f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    37ec:	2803      	cmp	r0, #3
    37ee:	d001      	beq.n	37f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    37f0:	2802      	cmp	r0, #2
    37f2:	d115      	bne.n	3820 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    37f4:	f240 610f 	movw	r1, #1551	; 0x60f
    37f8:	e00f      	b.n	381a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    37fa:	0740      	lsls	r0, r0, #29
    37fc:	d510      	bpl.n	3820 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    37fe:	480a      	ldr	r0, [pc, #40]	; (3828 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3800:	490a      	ldr	r1, [pc, #40]	; (382c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    3802:	3008      	adds	r0, #8
    3804:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    3808:	f44f 71a0 	mov.w	r1, #320	; 0x140
    380c:	4808      	ldr	r0, [pc, #32]	; (3830 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    380e:	f006 fa08 	bl	9c22 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3812:	2800      	cmp	r0, #0
    3814:	d004      	beq.n	3820 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3816:	f240 6117 	movw	r1, #1559	; 0x617
    381a:	203e      	movs	r0, #62	; 0x3e
    381c:	f7fc fd84 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3820:	bd10      	pop	{r4, pc}
    3822:	0000      	.short	0x0000
    3824:	20000be8 	.word	0x20000be8
    3828:	40001000 	.word	0x40001000
    382c:	4001f098 	.word	0x4001f098
    3830:	40008000 	.word	0x40008000
    3834:	4808      	ldr	r0, [pc, #32]	; (3858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    3836:	4601      	mov	r1, r0
    3838:	79c2      	ldrb	r2, [r0, #7]
    383a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    383e:	b112      	cbz	r2, 3846 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    3840:	2a01      	cmp	r2, #1
    3842:	d003      	beq.n	384c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    3844:	e006      	b.n	3854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    3846:	f041 0102 	orr.w	r1, r1, #2
    384a:	e001      	b.n	3850 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    384c:	f041 0104 	orr.w	r1, r1, #4
    3850:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    3854:	f7ff bfb4 	b.w	37c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3858:	20000be8 	.word	0x20000be8
    385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3860:	4d22      	ldr	r5, [pc, #136]	; (38ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    3862:	2400      	movs	r4, #0
    3864:	7b28      	ldrb	r0, [r5, #12]
    3866:	b138      	cbz	r0, 3878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3868:	f44f 71a2 	mov.w	r1, #324	; 0x144
    386c:	4820      	ldr	r0, [pc, #128]	; (38f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    386e:	f006 f9d8 	bl	9c22 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3872:	b108      	cbz	r0, 3878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3874:	2701      	movs	r7, #1
    3876:	e000      	b.n	387a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    3878:	2700      	movs	r7, #0
    387a:	7a68      	ldrb	r0, [r5, #9]
    387c:	4e1d      	ldr	r6, [pc, #116]	; (38f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    387e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3882:	2801      	cmp	r0, #1
    3884:	d002      	beq.n	388c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    3886:	2802      	cmp	r0, #2
    3888:	d006      	beq.n	3898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    388a:	e016      	b.n	38ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    388c:	4630      	mov	r0, r6
    388e:	f006 f9c3 	bl	9c18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3892:	b190      	cbz	r0, 38ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    3894:	2408      	movs	r4, #8
    3896:	e010      	b.n	38ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    3898:	4630      	mov	r0, r6
    389a:	f006 f9bd 	bl	9c18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    389e:	b100      	cbz	r0, 38a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    38a0:	2402      	movs	r4, #2
    38a2:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    38a6:	43c0      	mvns	r0, r0
    38a8:	f340 0000 	sbfx	r0, r0, #0, #1
    38ac:	1c40      	adds	r0, r0, #1
    38ae:	d101      	bne.n	38b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    38b0:	f044 0404 	orr.w	r4, r4, #4
    38b4:	b10f      	cbz	r7, 38ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    38b6:	f044 0401 	orr.w	r4, r4, #1
    38ba:	f014 0f0b 	tst.w	r4, #11
    38be:	d107      	bne.n	38d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    38c0:	f44f 7188 	mov.w	r1, #272	; 0x110
    38c4:	4630      	mov	r0, r6
    38c6:	f006 f9a7 	bl	9c18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    38ca:	b108      	cbz	r0, 38d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    38cc:	f044 0410 	orr.w	r4, r4, #16
    38d0:	f7ff ff62 	bl	3798 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    38d4:	06e0      	lsls	r0, r4, #27
    38d6:	d506      	bpl.n	38e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    38d8:	0720      	lsls	r0, r4, #28
    38da:	d404      	bmi.n	38e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    38dc:	7a68      	ldrb	r0, [r5, #9]
    38de:	2801      	cmp	r0, #1
    38e0:	d101      	bne.n	38e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    38e2:	f044 0420 	orr.w	r4, r4, #32
    38e6:	4620      	mov	r0, r4
    38e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38ec:	20000be8 	.word	0x20000be8
    38f0:	40008000 	.word	0x40008000
    38f4:	40001000 	.word	0x40001000
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38fc:	4c1a      	ldr	r4, [pc, #104]	; (3968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    38fe:	460d      	mov	r5, r1
    3900:	7a21      	ldrb	r1, [r4, #8]
    3902:	b129      	cbz	r1, 3910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    3904:	f010 0f11 	tst.w	r0, #17
    3908:	d007      	beq.n	391a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    390a:	f7ff fb1f 	bl	2f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    390e:	e024      	b.n	395a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    3910:	f000 f890 	bl	3a34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    3914:	2000      	movs	r0, #0
    3916:	7320      	strb	r0, [r4, #12]
    3918:	e01f      	b.n	395a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    391a:	2901      	cmp	r1, #1
    391c:	d001      	beq.n	3922 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    391e:	2601      	movs	r6, #1
    3920:	e000      	b.n	3924 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    3922:	2600      	movs	r6, #0
    3924:	79e0      	ldrb	r0, [r4, #7]
    3926:	2801      	cmp	r0, #1
    3928:	d00e      	beq.n	3948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    392a:	2700      	movs	r7, #0
    392c:	f000 f882 	bl	3a34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    3930:	2196      	movs	r1, #150	; 0x96
    3932:	4630      	mov	r0, r6
    3934:	f000 f894 	bl	3a60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    3938:	4601      	mov	r1, r0
    393a:	b14f      	cbz	r7, 3950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    393c:	353b      	adds	r5, #59	; 0x3b
    393e:	428d      	cmp	r5, r1
    3940:	d904      	bls.n	394c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    3942:	2000      	movs	r0, #0
    3944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3948:	2701      	movs	r7, #1
    394a:	e7ef      	b.n	392c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    394c:	2001      	movs	r0, #1
    394e:	71e0      	strb	r0, [r4, #7]
    3950:	7aa2      	ldrb	r2, [r4, #10]
    3952:	4630      	mov	r0, r6
    3954:	f7ff fd34 	bl	33c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3958:	b108      	cbz	r0, 395e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    395a:	2001      	movs	r0, #1
    395c:	e7f2      	b.n	3944 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    395e:	f640 21a5 	movw	r1, #2725	; 0xaa5
    3962:	203e      	movs	r0, #62	; 0x3e
    3964:	f7fc fce0 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3968:	20000be8 	.word	0x20000be8
    396c:	4803      	ldr	r0, [pc, #12]	; (397c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    396e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3972:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    3976:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    397a:	4770      	bx	lr
    397c:	40001000 	.word	0x40001000
    3980:	4804      	ldr	r0, [pc, #16]	; (3994 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    3982:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3984:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    3988:	6241      	str	r1, [r0, #36]	; 0x24
    398a:	4903      	ldr	r1, [pc, #12]	; (3998 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    398c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    3990:	6008      	str	r0, [r1, #0]
    3992:	4770      	bx	lr
    3994:	20000be8 	.word	0x20000be8
    3998:	4001f504 	.word	0x4001f504
    399c:	4a07      	ldr	r2, [pc, #28]	; (39bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    399e:	2000      	movs	r0, #0
    39a0:	3208      	adds	r2, #8
    39a2:	4906      	ldr	r1, [pc, #24]	; (39bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    39a4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39a8:	1d0a      	adds	r2, r1, #4
    39aa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39ae:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    39b2:	4902      	ldr	r1, [pc, #8]	; (39bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    39b4:	310c      	adds	r1, #12
    39b6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    39ba:	4770      	bx	lr
    39bc:	40008000 	.word	0x40008000
    39c0:	4903      	ldr	r1, [pc, #12]	; (39d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    39c2:	79c9      	ldrb	r1, [r1, #7]
    39c4:	2900      	cmp	r1, #0
    39c6:	d102      	bne.n	39ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    39c8:	4902      	ldr	r1, [pc, #8]	; (39d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    39ca:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    39ce:	4770      	bx	lr
    39d0:	20000be8 	.word	0x20000be8
    39d4:	4001f098 	.word	0x4001f098
    39d8:	b510      	push	{r4, lr}
    39da:	4a14      	ldr	r2, [pc, #80]	; (3a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    39dc:	b120      	cbz	r0, 39e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    39de:	2801      	cmp	r0, #1
    39e0:	d011      	beq.n	3a06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    39e2:	f240 7153 	movw	r1, #1875	; 0x753
    39e6:	e01c      	b.n	3a22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    39e8:	f101 0028 	add.w	r0, r1, #40	; 0x28
    39ec:	e9c2 1002 	strd	r1, r0, [r2, #8]
    39f0:	490f      	ldr	r1, [pc, #60]	; (3a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    39f2:	480e      	ldr	r0, [pc, #56]	; (3a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    39f4:	f003 fee6 	bl	77c4 <mpsl_fem_pa_configuration_set>
    39f8:	2800      	cmp	r0, #0
    39fa:	d015      	beq.n	3a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    39fc:	1c40      	adds	r0, r0, #1
    39fe:	d013      	beq.n	3a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a00:	f240 7142 	movw	r1, #1858	; 0x742
    3a04:	e00d      	b.n	3a22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    3a06:	f101 0029 	add.w	r0, r1, #41	; 0x29
    3a0a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    3a0e:	4908      	ldr	r1, [pc, #32]	; (3a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    3a10:	4806      	ldr	r0, [pc, #24]	; (3a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    3a12:	f003 fec5 	bl	77a0 <mpsl_fem_lna_configuration_set>
    3a16:	2800      	cmp	r0, #0
    3a18:	d006      	beq.n	3a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a1a:	1c40      	adds	r0, r0, #1
    3a1c:	d004      	beq.n	3a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a1e:	f240 714f 	movw	r1, #1871	; 0x74f
    3a22:	203e      	movs	r0, #62	; 0x3e
    3a24:	f7fc fc80 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a28:	bd10      	pop	{r4, pc}
    3a2a:	0000      	.short	0x0000
    3a2c:	200000f8 	.word	0x200000f8
    3a30:	00003b5c 	.word	0x00003b5c
    3a34:	4802      	ldr	r0, [pc, #8]	; (3a40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    3a36:	2100      	movs	r1, #0
    3a38:	71c1      	strb	r1, [r0, #7]
    3a3a:	7201      	strb	r1, [r0, #8]
    3a3c:	7241      	strb	r1, [r0, #9]
    3a3e:	4770      	bx	lr
    3a40:	20000be8 	.word	0x20000be8
    3a44:	4a05      	ldr	r2, [pc, #20]	; (3a5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    3a46:	79d2      	ldrb	r2, [r2, #7]
    3a48:	2a01      	cmp	r2, #1
    3a4a:	d006      	beq.n	3a5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    3a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3a50:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    3a54:	fbb1 f1f2 	udiv	r1, r1, r2
    3a58:	1a40      	subs	r0, r0, r1
    3a5a:	4770      	bx	lr
    3a5c:	20000be8 	.word	0x20000be8
    3a60:	b570      	push	{r4, r5, r6, lr}
    3a62:	4c13      	ldr	r4, [pc, #76]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a64:	4603      	mov	r3, r0
    3a66:	460d      	mov	r5, r1
    3a68:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    3a6c:	2000      	movs	r0, #0
    3a6e:	b15a      	cbz	r2, 3a88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    3a70:	4621      	mov	r1, r4
    3a72:	f891 1020 	ldrb.w	r1, [r1, #32]
    3a76:	b163      	cbz	r3, 3a92 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    3a78:	2b01      	cmp	r3, #1
    3a7a:	d111      	bne.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a7c:	2a01      	cmp	r2, #1
    3a7e:	4628      	mov	r0, r5
    3a80:	d012      	beq.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a82:	f006 f8d3 	bl	9c2c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    3a86:	e009      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a88:	f640 0158 	movw	r1, #2136	; 0x858
    3a8c:	203e      	movs	r0, #62	; 0x3e
    3a8e:	f7fc fc4b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a92:	2a01      	cmp	r2, #1
    3a94:	4628      	mov	r0, r5
    3a96:	d004      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a98:	f006 f8d6 	bl	9c48 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    3a9c:	69e1      	ldr	r1, [r4, #28]
    3a9e:	4408      	add	r0, r1
    3aa0:	bd70      	pop	{r4, r5, r6, pc}
    3aa2:	f000 f8d1 	bl	3c48 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    3aa6:	e7f9      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3aa8:	f000 f8c0 	bl	3c2c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    3aac:	e7f6      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3aae:	0000      	.short	0x0000
    3ab0:	20000be8 	.word	0x20000be8
    3ab4:	b510      	push	{r4, lr}
    3ab6:	f7ff fc57 	bl	3368 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3aba:	f7ff fe0d 	bl	36d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    3abe:	f7ff fe43 	bl	3748 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    3ac2:	f7ff ff53 	bl	396c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    3ac6:	f006 fa15 	bl	9ef4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3aca:	2800      	cmp	r0, #0
    3acc:	d108      	bne.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3ace:	f006 fa01 	bl	9ed4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d104      	bne.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3ad6:	4803      	ldr	r0, [pc, #12]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3ad8:	6801      	ldr	r1, [r0, #0]
    3ada:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    3ade:	6001      	str	r1, [r0, #0]
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	0000      	.short	0x0000
    3ae4:	40001568 	.word	0x40001568
    3ae8:	b510      	push	{r4, lr}
    3aea:	4604      	mov	r4, r0
    3aec:	f7ff fc3c 	bl	3368 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3af0:	f7ff fdf2 	bl	36d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    3af4:	4620      	mov	r0, r4
    3af6:	f7ff fe0d 	bl	3714 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3afa:	f006 f9fb 	bl	9ef4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3afe:	2800      	cmp	r0, #0
    3b00:	d00d      	beq.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
    3b02:	4a09      	ldr	r2, [pc, #36]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3b04:	6811      	ldr	r1, [r2, #0]
    3b06:	0650      	lsls	r0, r2, #25
    3b08:	2c02      	cmp	r4, #2
    3b0a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    3b0e:	d007      	beq.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3b10:	f3c0 2006 	ubfx	r0, r0, #8, #7
    3b14:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    3b18:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    3b1c:	6010      	str	r0, [r2, #0]
    3b1e:	bd10      	pop	{r4, pc}
    3b20:	f3c0 6006 	ubfx	r0, r0, #24, #7
    3b24:	e7f6      	b.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3b26:	0000      	.short	0x0000
    3b28:	40001588 	.word	0x40001588
    3b2c:	a62c0000 	.word	0xa62c0000
    3b30:	0604a1e0 	.word	0x0604a1e0
    3b34:	0e0c0a08 	.word	0x0e0c0a08
    3b38:	16141210 	.word	0x16141210
    3b3c:	201e1c18 	.word	0x201e1c18
    3b40:	28262422 	.word	0x28262422
    3b44:	302e2c2a 	.word	0x302e2c2a
    3b48:	38363432 	.word	0x38363432
    3b4c:	403e3c3a 	.word	0x403e3c3a
    3b50:	48464442 	.word	0x48464442
    3b54:	024e4c4a 	.word	0x024e4c4a
    3b58:	0000501a 	.word	0x0000501a
    3b5c:	00000001 	.word	0x00000001
    3b60:	40001110 	.word	0x40001110
	...
    3b78:	00001e14 	.word	0x00001e14
    3b7c:	00001130 	.word	0x00001130
    3b80:	00000000 	.word	0x00000000
    3b84:	00000028 	.word	0x00000028
    3b88:	00000018 	.word	0x00000018
    3b8c:	00000000 	.word	0x00000000
    3b90:	00001e14 	.word	0x00001e14
    3b94:	00001130 	.word	0x00001130
    3b98:	00000000 	.word	0x00000000
    3b9c:	00001770 	.word	0x00001770
    3ba0:	00000fa0 	.word	0x00000fa0

00003ba4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    3ba4:	b570      	push	{r4, r5, r6, lr}
    3ba6:	4605      	mov	r5, r0
    3ba8:	4614      	mov	r4, r2
    3baa:	4608      	mov	r0, r1
    3bac:	f7ff fc02 	bl	33b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    3bb0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    3bb4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    3bb8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    3bbc:	4807      	ldr	r0, [pc, #28]	; (3bdc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    3bbe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3bc2:	4408      	add	r0, r1
    3bc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3bc8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    3bcc:	fbb0 f5f1 	udiv	r5, r0, r1
    3bd0:	4620      	mov	r0, r4
    3bd2:	f7ff fbc3 	bl	335c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    3bd6:	4428      	add	r0, r5
    3bd8:	1d40      	adds	r0, r0, #5
    3bda:	bd70      	pop	{r4, r5, r6, pc}
    3bdc:	00003c6c 	.word	0x00003c6c

00003be0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    3be0:	b570      	push	{r4, r5, r6, lr}
    3be2:	4d0e      	ldr	r5, [pc, #56]	; (3c1c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    3be4:	461c      	mov	r4, r3
    3be6:	3d08      	subs	r5, #8
    3be8:	4b0c      	ldr	r3, [pc, #48]	; (3c1c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    3bea:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    3bee:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    3bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3bf6:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    3bfa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3bfe:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3c02:	4418      	add	r0, r3
    3c04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3c08:	fbb0 f5f1 	udiv	r5, r0, r1
    3c0c:	4610      	mov	r0, r2
    3c0e:	f7ff fba5 	bl	335c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    3c12:	4428      	add	r0, r5
    3c14:	4420      	add	r0, r4
    3c16:	1d40      	adds	r0, r0, #5
    3c18:	bd70      	pop	{r4, r5, r6, pc}
    3c1a:	0000      	.short	0x0000
    3c1c:	00003c6c 	.word	0x00003c6c

00003c20 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    3c20:	4901      	ldr	r1, [pc, #4]	; (3c28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    3c22:	b2c0      	uxtb	r0, r0
    3c24:	6008      	str	r0, [r1, #0]
    3c26:	4770      	bx	lr
    3c28:	4000150c 	.word	0x4000150c

00003c2c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    3c2c:	4a05      	ldr	r2, [pc, #20]	; (3c44 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    3c2e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    3c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c36:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    3c3a:	fbb1 f1f2 	udiv	r1, r1, r2
    3c3e:	4408      	add	r0, r1
    3c40:	1e80      	subs	r0, r0, #2
    3c42:	4770      	bx	lr
    3c44:	00003c64 	.word	0x00003c64

00003c48 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    3c48:	4a05      	ldr	r2, [pc, #20]	; (3c60 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    3c4a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    3c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c52:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    3c56:	fbb1 f1f2 	udiv	r1, r1, r2
    3c5a:	4408      	add	r0, r1
    3c5c:	4770      	bx	lr
    3c5e:	0000      	.short	0x0000
    3c60:	00003c64 	.word	0x00003c64
    3c64:	05dc0000 	.word	0x05dc0000
    3c68:	000003e8 	.word	0x000003e8
    3c6c:	00000000 	.word	0x00000000
    3c70:	00001e14 	.word	0x00001e14
    3c74:	00001130 	.word	0x00001130

00003c78 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    3c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c7c:	461e      	mov	r6, r3
    3c7e:	4617      	mov	r7, r2
    3c80:	460c      	mov	r4, r1
    3c82:	4605      	mov	r5, r0
    3c84:	f000 f856 	bl	3d34 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    3c88:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3d30 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    3c8c:	4680      	mov	r8, r0
    3c8e:	f899 0000 	ldrb.w	r0, [r9]
    3c92:	42a8      	cmp	r0, r5
    3c94:	d110      	bne.n	3cb8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3c96:	f899 1001 	ldrb.w	r1, [r9, #1]
    3c9a:	4648      	mov	r0, r9
    3c9c:	42a1      	cmp	r1, r4
    3c9e:	d10b      	bne.n	3cb8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3ca0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    3ca4:	42b9      	cmp	r1, r7
    3ca6:	d107      	bne.n	3cb8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3ca8:	78c2      	ldrb	r2, [r0, #3]
    3caa:	4542      	cmp	r2, r8
    3cac:	d104      	bne.n	3cb8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3cae:	8881      	ldrh	r1, [r0, #4]
    3cb0:	8031      	strh	r1, [r6, #0]
    3cb2:	7980      	ldrb	r0, [r0, #6]
    3cb4:	70b0      	strb	r0, [r6, #2]
    3cb6:	e037      	b.n	3d28 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    3cb8:	463a      	mov	r2, r7
    3cba:	4621      	mov	r1, r4
    3cbc:	2d01      	cmp	r5, #1
    3cbe:	d009      	beq.n	3cd4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    3cc0:	2d02      	cmp	r5, #2
    3cc2:	d009      	beq.n	3cd8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    3cc4:	2d04      	cmp	r5, #4
    3cc6:	d009      	beq.n	3cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    3cc8:	2d08      	cmp	r5, #8
    3cca:	d009      	beq.n	3ce0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    3ccc:	f240 4161 	movw	r1, #1121	; 0x461
    3cd0:	2006      	movs	r0, #6
    3cd2:	e00c      	b.n	3cee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    3cd4:	2000      	movs	r0, #0
    3cd6:	e004      	b.n	3ce2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    3cd8:	2001      	movs	r0, #1
    3cda:	e002      	b.n	3ce2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    3cdc:	2003      	movs	r0, #3
    3cde:	e000      	b.n	3ce2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    3ce0:	2002      	movs	r0, #2
    3ce2:	466b      	mov	r3, sp
    3ce4:	f000 f89e 	bl	3e24 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    3ce8:	b118      	cbz	r0, 3cf2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    3cea:	213d      	movs	r1, #61	; 0x3d
    3cec:	2075      	movs	r0, #117	; 0x75
    3cee:	f7fc fb1b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cf2:	4620      	mov	r0, r4
    3cf4:	f7ff f922 	bl	2f3c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    3cf8:	4602      	mov	r2, r0
    3cfa:	2300      	movs	r3, #0
    3cfc:	4631      	mov	r1, r6
    3cfe:	f99d 0000 	ldrsb.w	r0, [sp]
    3d02:	f003 fd71 	bl	77e8 <mpsl_fem_tx_power_split>
    3d06:	4601      	mov	r1, r0
    3d08:	f889 1007 	strb.w	r1, [r9, #7]
    3d0c:	8831      	ldrh	r1, [r6, #0]
    3d0e:	f8a9 1004 	strh.w	r1, [r9, #4]
    3d12:	78b1      	ldrb	r1, [r6, #2]
    3d14:	f889 1006 	strb.w	r1, [r9, #6]
    3d18:	f889 5000 	strb.w	r5, [r9]
    3d1c:	f889 4001 	strb.w	r4, [r9, #1]
    3d20:	f889 7002 	strb.w	r7, [r9, #2]
    3d24:	f889 8003 	strb.w	r8, [r9, #3]
    3d28:	f999 0007 	ldrsb.w	r0, [r9, #7]
    3d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d30:	20000190 	.word	0x20000190

00003d34 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    3d34:	4801      	ldr	r0, [pc, #4]	; (3d3c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    3d36:	7800      	ldrb	r0, [r0, #0]
    3d38:	4770      	bx	lr
    3d3a:	0000      	.short	0x0000
    3d3c:	20000110 	.word	0x20000110

00003d40 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    3d40:	b570      	push	{r4, r5, r6, lr}
    3d42:	4c17      	ldr	r4, [pc, #92]	; (3da0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    3d44:	7860      	ldrb	r0, [r4, #1]
    3d46:	2800      	cmp	r0, #0
    3d48:	d123      	bne.n	3d92 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    3d4a:	2001      	movs	r0, #1
    3d4c:	7060      	strb	r0, [r4, #1]
    3d4e:	f006 f8ab 	bl	9ea8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    3d52:	f06f 0527 	mvn.w	r5, #39	; 0x27
    3d56:	b928      	cbnz	r0, 3d64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    3d58:	f006 f8dc 	bl	9f14 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    3d5c:	b910      	cbnz	r0, 3d64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    3d5e:	f006 f8e3 	bl	9f28 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3d62:	b120      	cbz	r0, 3d6e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    3d64:	480f      	ldr	r0, [pc, #60]	; (3da4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    3d66:	6060      	str	r0, [r4, #4]
    3d68:	70a5      	strb	r5, [r4, #2]
    3d6a:	2008      	movs	r0, #8
    3d6c:	e010      	b.n	3d90 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    3d6e:	f006 f870 	bl	9e52 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d72:	b940      	cbnz	r0, 3d86 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    3d74:	f006 f877 	bl	9e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d78:	b928      	cbnz	r0, 3d86 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    3d7a:	f006 f88b 	bl	9e94 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3d7e:	b910      	cbnz	r0, 3d86 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    3d80:	f006 f89c 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d84:	b130      	cbz	r0, 3d94 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    3d86:	4807      	ldr	r0, [pc, #28]	; (3da4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    3d88:	3031      	adds	r0, #49	; 0x31
    3d8a:	6060      	str	r0, [r4, #4]
    3d8c:	70a5      	strb	r5, [r4, #2]
    3d8e:	2004      	movs	r0, #4
    3d90:	70e0      	strb	r0, [r4, #3]
    3d92:	bd70      	pop	{r4, r5, r6, pc}
    3d94:	f240 113f 	movw	r1, #319	; 0x13f
    3d98:	2074      	movs	r0, #116	; 0x74
    3d9a:	f003 fb67 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d9e:	0000      	.short	0x0000
    3da0:	20000110 	.word	0x20000110
    3da4:	0000a23c 	.word	0x0000a23c

00003da8 <mpsl_tx_power_radio_supported_power_adjust>:
    3da8:	4a06      	ldr	r2, [pc, #24]	; (3dc4 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    3daa:	b500      	push	{lr}
    3dac:	f992 2003 	ldrsb.w	r2, [r2, #3]
    3db0:	4290      	cmp	r0, r2
    3db2:	db01      	blt.n	3db8 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    3db4:	4610      	mov	r0, r2
    3db6:	bd00      	pop	{pc}
    3db8:	f000 f808 	bl	3dcc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    3dbc:	4902      	ldr	r1, [pc, #8]	; (3dc8 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    3dbe:	5608      	ldrsb	r0, [r1, r0]
    3dc0:	bd00      	pop	{pc}
    3dc2:	0000      	.short	0x0000
    3dc4:	20000110 	.word	0x20000110
    3dc8:	0000a22e 	.word	0x0000a22e

00003dcc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    3dcc:	4602      	mov	r2, r0
    3dce:	4813      	ldr	r0, [pc, #76]	; (3e1c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    3dd0:	b510      	push	{r4, lr}
    3dd2:	f990 3003 	ldrsb.w	r3, [r0, #3]
    3dd6:	429a      	cmp	r2, r3
    3dd8:	db01      	blt.n	3dde <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    3dda:	200d      	movs	r0, #13
    3ddc:	bd10      	pop	{r4, pc}
    3dde:	f990 3002 	ldrsb.w	r3, [r0, #2]
    3de2:	429a      	cmp	r2, r3
    3de4:	dc01      	bgt.n	3dea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    3de6:	2000      	movs	r0, #0
    3de8:	bd10      	pop	{r4, pc}
    3dea:	b101      	cbz	r1, 3dee <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    3dec:	2101      	movs	r1, #1
    3dee:	1ad4      	subs	r4, r2, r3
    3df0:	6843      	ldr	r3, [r0, #4]
    3df2:	5d18      	ldrb	r0, [r3, r4]
    3df4:	4c0a      	ldr	r4, [pc, #40]	; (3e20 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    3df6:	5624      	ldrsb	r4, [r4, r0]
    3df8:	4294      	cmp	r4, r2
    3dfa:	d0f5      	beq.n	3de8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3dfc:	4c08      	ldr	r4, [pc, #32]	; (3e20 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    3dfe:	4408      	add	r0, r1
    3e00:	343f      	adds	r4, #63	; 0x3f
    3e02:	b2c0      	uxtb	r0, r0
    3e04:	b2d2      	uxtb	r2, r2
    3e06:	42a3      	cmp	r3, r4
    3e08:	d1ee      	bne.n	3de8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e0a:	2900      	cmp	r1, #0
    3e0c:	d0ec      	beq.n	3de8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e0e:	2a01      	cmp	r2, #1
    3e10:	d001      	beq.n	3e16 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    3e12:	2a02      	cmp	r2, #2
    3e14:	d1e8      	bne.n	3de8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e16:	1c40      	adds	r0, r0, #1
    3e18:	b2c0      	uxtb	r0, r0
    3e1a:	bd10      	pop	{r4, pc}
    3e1c:	20000110 	.word	0x20000110
    3e20:	0000a22e 	.word	0x0000a22e

00003e24 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    3e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e28:	461c      	mov	r4, r3
    3e2a:	4690      	mov	r8, r2
    3e2c:	460d      	mov	r5, r1
    3e2e:	4606      	mov	r6, r0
    3e30:	f06f 0715 	mvn.w	r7, #21
    3e34:	2804      	cmp	r0, #4
    3e36:	d804      	bhi.n	3e42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    3e38:	b11c      	cbz	r4, 3e42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    3e3a:	f005 ff10 	bl	9c5e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    3e3e:	42a8      	cmp	r0, r5
    3e40:	d802      	bhi.n	3e48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    3e42:	4638      	mov	r0, r7
    3e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e48:	4805      	ldr	r0, [pc, #20]	; (3e60 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    3e4a:	4642      	mov	r2, r8
    3e4c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3e50:	b118      	cbz	r0, 3e5a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    3e52:	5740      	ldrsb	r0, [r0, r5]
    3e54:	4282      	cmp	r2, r0
    3e56:	dd00      	ble.n	3e5a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    3e58:	4602      	mov	r2, r0
    3e5a:	7022      	strb	r2, [r4, #0]
    3e5c:	2000      	movs	r0, #0
    3e5e:	e7f1      	b.n	3e44 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    3e60:	20000c1c 	.word	0x20000c1c

00003e64 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    3e64:	4801      	ldr	r0, [pc, #4]	; (3e6c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    3e66:	7800      	ldrb	r0, [r0, #0]
    3e68:	4770      	bx	lr
    3e6a:	0000      	.short	0x0000
    3e6c:	20000118 	.word	0x20000118

00003e70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    3e70:	4905      	ldr	r1, [pc, #20]	; (3e88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    3e72:	780a      	ldrb	r2, [r1, #0]
    3e74:	4290      	cmp	r0, r2
    3e76:	d301      	bcc.n	3e7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    3e78:	2000      	movs	r0, #0
    3e7a:	4770      	bx	lr
    3e7c:	6849      	ldr	r1, [r1, #4]
    3e7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3e82:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    3e86:	4770      	bx	lr
    3e88:	20000118 	.word	0x20000118

00003e8c <MPSL_IRQ_RADIO_Handler>:
    3e8c:	490d      	ldr	r1, [pc, #52]	; (3ec4 <MPSL_IRQ_RADIO_Handler+0x38>)
    3e8e:	b510      	push	{r4, lr}
    3e90:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    3e94:	2820      	cmp	r0, #32
    3e96:	d00f      	beq.n	3eb8 <MPSL_IRQ_RADIO_Handler+0x2c>
    3e98:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    3e9c:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    3ea0:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    3ea4:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    3ea8:	6840      	ldr	r0, [r0, #4]
    3eaa:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    3eae:	680a      	ldr	r2, [r1, #0]
    3eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3eb4:	2104      	movs	r1, #4
    3eb6:	4710      	bx	r2
    3eb8:	f640 017f 	movw	r1, #2175	; 0x87f
    3ebc:	2070      	movs	r0, #112	; 0x70
    3ebe:	f003 fad5 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ec2:	0000      	.short	0x0000
    3ec4:	200009c0 	.word	0x200009c0
    3ec8:	b570      	push	{r4, r5, r6, lr}
    3eca:	4605      	mov	r5, r0
    3ecc:	2a20      	cmp	r2, #32
    3ece:	d028      	beq.n	3f22 <MPSL_IRQ_RADIO_Handler+0x96>
    3ed0:	4819      	ldr	r0, [pc, #100]	; (3f38 <MPSL_IRQ_RADIO_Handler+0xac>)
    3ed2:	4c1a      	ldr	r4, [pc, #104]	; (3f3c <MPSL_IRQ_RADIO_Handler+0xb0>)
    3ed4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    3ed8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3edc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    3ee0:	4423      	add	r3, r4
    3ee2:	2920      	cmp	r1, #32
    3ee4:	d022      	beq.n	3f2c <MPSL_IRQ_RADIO_Handler+0xa0>
    3ee6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    3eea:	7840      	ldrb	r0, [r0, #1]
    3eec:	784c      	ldrb	r4, [r1, #1]
    3eee:	7048      	strb	r0, [r1, #1]
    3ef0:	4620      	mov	r0, r4
    3ef2:	4601      	mov	r1, r0
    3ef4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    3ef8:	4291      	cmp	r1, r2
    3efa:	7005      	strb	r5, [r0, #0]
    3efc:	7840      	ldrb	r0, [r0, #1]
    3efe:	d1f8      	bne.n	3ef2 <MPSL_IRQ_RADIO_Handler+0x66>
    3f00:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    3f04:	2a20      	cmp	r2, #32
    3f06:	bf1a      	itte	ne
    3f08:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    3f0c:	7054      	strbne	r4, [r2, #1]
    3f0e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    3f12:	2220      	movs	r2, #32
    3f14:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    3f18:	f88c 2001 	strb.w	r2, [ip, #1]
    3f1c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    3f20:	bd70      	pop	{r4, r5, r6, pc}
    3f22:	f240 2186 	movw	r1, #646	; 0x286
    3f26:	2070      	movs	r0, #112	; 0x70
    3f28:	f003 faa0 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f2c:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    3f30:	7840      	ldrb	r0, [r0, #1]
    3f32:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    3f36:	e7db      	b.n	3ef0 <MPSL_IRQ_RADIO_Handler+0x64>
    3f38:	20000940 	.word	0x20000940
    3f3c:	200009c0 	.word	0x200009c0
    3f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f44:	b08f      	sub	sp, #60	; 0x3c
    3f46:	4615      	mov	r5, r2
    3f48:	461e      	mov	r6, r3
    3f4a:	460c      	mov	r4, r1
    3f4c:	f002 f9fc 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    3f50:	1828      	adds	r0, r5, r0
    3f52:	f146 0100 	adc.w	r1, r6, #0
    3f56:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3f5a:	e9d4 2300 	ldrd	r2, r3, [r4]
    3f5e:	1a80      	subs	r0, r0, r2
    3f60:	eb71 0003 	sbcs.w	r0, r1, r3
    3f64:	f0c0 80e5 	bcc.w	4132 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x132>
    3f68:	a808      	add	r0, sp, #32
    3f6a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    3f6e:	900a      	str	r0, [sp, #40]	; 0x28
    3f70:	48bc      	ldr	r0, [pc, #752]	; (4264 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x264>)
    3f72:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    3f76:	4408      	add	r0, r1
    3f78:	9009      	str	r0, [sp, #36]	; 0x24
    3f7a:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    3f7e:	2020      	movs	r0, #32
    3f80:	f10d 091c 	add.w	r9, sp, #28
    3f84:	f88d 001c 	strb.w	r0, [sp, #28]
    3f88:	2d20      	cmp	r5, #32
    3f8a:	d036      	beq.n	3ffa <MPSL_IRQ_RADIO_Handler+0x16e>
    3f8c:	48b6      	ldr	r0, [pc, #728]	; (4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>)
    3f8e:	2600      	movs	r6, #0
    3f90:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    3f94:	48b5      	ldr	r0, [pc, #724]	; (426c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26c>)
    3f96:	e9d4 7300 	ldrd	r7, r3, [r4]
    3f9a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    3f9e:	f850 8f08 	ldr.w	r8, [r0, #8]!
    3fa2:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    3fa6:	eb18 0101 	adds.w	r1, r8, r1
    3faa:	4172      	adcs	r2, r6
    3fac:	1a79      	subs	r1, r7, r1
    3fae:	eb73 0102 	sbcs.w	r1, r3, r2
    3fb2:	d322      	bcc.n	3ffa <MPSL_IRQ_RADIO_Handler+0x16e>
    3fb4:	89e1      	ldrh	r1, [r4, #14]
    3fb6:	b1c9      	cbz	r1, 3fec <MPSL_IRQ_RADIO_Handler+0x160>
    3fb8:	89c0      	ldrh	r0, [r0, #14]
    3fba:	b9b8      	cbnz	r0, 3fec <MPSL_IRQ_RADIO_Handler+0x160>
    3fbc:	f003 f8b6 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3fc0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    3fc4:	bf08      	it	eq
    3fc6:	200d      	moveq	r0, #13
    3fc8:	d00b      	beq.n	3fe2 <MPSL_IRQ_RADIO_Handler+0x156>
    3fca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    3fce:	3856      	subs	r0, #86	; 0x56
    3fd0:	bf08      	it	eq
    3fd2:	201c      	moveq	r0, #28
    3fd4:	d005      	beq.n	3fe2 <MPSL_IRQ_RADIO_Handler+0x156>
    3fd6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    3fda:	389f      	subs	r0, #159	; 0x9f
    3fdc:	bf14      	ite	ne
    3fde:	4630      	movne	r0, r6
    3fe0:	2032      	moveq	r0, #50	; 0x32
    3fe2:	1c40      	adds	r0, r0, #1
    3fe4:	ebb7 0108 	subs.w	r1, r7, r8
    3fe8:	4281      	cmp	r1, r0
    3fea:	db06      	blt.n	3ffa <MPSL_IRQ_RADIO_Handler+0x16e>
    3fec:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    3ff0:	f889 5000 	strb.w	r5, [r9]
    3ff4:	7845      	ldrb	r5, [r0, #1]
    3ff6:	2d20      	cmp	r5, #32
    3ff8:	d1cc      	bne.n	3f94 <MPSL_IRQ_RADIO_Handler+0x108>
    3ffa:	980a      	ldr	r0, [sp, #40]	; 0x28
    3ffc:	f899 1000 	ldrb.w	r1, [r9]
    4000:	2d20      	cmp	r5, #32
    4002:	7001      	strb	r1, [r0, #0]
    4004:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4008:	f000 8128 	beq.w	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    400c:	4896      	ldr	r0, [pc, #600]	; (4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>)
    400e:	4f97      	ldr	r7, [pc, #604]	; (426c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26c>)
    4010:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4014:	2600      	movs	r6, #0
    4016:	9004      	str	r0, [sp, #16]
    4018:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    401c:	f10a 0008 	add.w	r0, sl, #8
    4020:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4024:	f8d4 b000 	ldr.w	fp, [r4]
    4028:	e9d0 8300 	ldrd	r8, r3, [r0]
    402c:	eb1b 0202 	adds.w	r2, fp, r2
    4030:	4171      	adcs	r1, r6
    4032:	ebb8 0202 	subs.w	r2, r8, r2
    4036:	eb73 0101 	sbcs.w	r1, r3, r1
    403a:	d320      	bcc.n	407e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e>
    403c:	89c0      	ldrh	r0, [r0, #14]
    403e:	2800      	cmp	r0, #0
    4040:	f000 810c 	beq.w	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    4044:	89e0      	ldrh	r0, [r4, #14]
    4046:	2800      	cmp	r0, #0
    4048:	f040 8108 	bne.w	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    404c:	f003 f86e 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4050:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4054:	bf08      	it	eq
    4056:	200d      	moveq	r0, #13
    4058:	d00b      	beq.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    405a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    405e:	3856      	subs	r0, #86	; 0x56
    4060:	bf08      	it	eq
    4062:	201c      	moveq	r0, #28
    4064:	d005      	beq.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    4066:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    406a:	389f      	subs	r0, #159	; 0x9f
    406c:	bf14      	ite	ne
    406e:	4630      	movne	r0, r6
    4070:	2032      	moveq	r0, #50	; 0x32
    4072:	1c41      	adds	r1, r0, #1
    4074:	ebb8 000b 	subs.w	r0, r8, fp
    4078:	4288      	cmp	r0, r1
    407a:	f280 80ef 	bge.w	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    407e:	f889 5000 	strb.w	r5, [r9]
    4082:	f89a 0018 	ldrb.w	r0, [sl, #24]
    4086:	7c21      	ldrb	r1, [r4, #16]
    4088:	4281      	cmp	r1, r0
    408a:	d207      	bcs.n	409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>
    408c:	9804      	ldr	r0, [sp, #16]
    408e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4092:	7845      	ldrb	r5, [r0, #1]
    4094:	2d20      	cmp	r5, #32
    4096:	d1bf      	bne.n	4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
    4098:	f000 b8e0 	b.w	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    409c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    40a0:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    40a4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    40a8:	f8d0 9008 	ldr.w	r9, [r0, #8]
    40ac:	8ac0      	ldrh	r0, [r0, #22]
    40ae:	eb19 0502 	adds.w	r5, r9, r2
    40b2:	eb41 0806 	adc.w	r8, r1, r6
    40b6:	bbb0      	cbnz	r0, 4126 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x126>
    40b8:	89e0      	ldrh	r0, [r4, #14]
    40ba:	b3a0      	cbz	r0, 4126 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x126>
    40bc:	f003 f836 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    40c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    40c4:	bf08      	it	eq
    40c6:	200d      	moveq	r0, #13
    40c8:	d00b      	beq.n	40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    40ce:	3856      	subs	r0, #86	; 0x56
    40d0:	bf08      	it	eq
    40d2:	201c      	moveq	r0, #28
    40d4:	d005      	beq.n	40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    40da:	389f      	subs	r0, #159	; 0x9f
    40dc:	bf14      	ite	ne
    40de:	4630      	movne	r0, r6
    40e0:	2032      	moveq	r0, #50	; 0x32
    40e2:	1c41      	adds	r1, r0, #1
    40e4:	ebb5 0009 	subs.w	r0, r5, r9
    40e8:	4288      	cmp	r0, r1
    40ea:	da1c      	bge.n	4126 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x126>
    40ec:	f003 f81e 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    40f0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    40f4:	bf08      	it	eq
    40f6:	200d      	moveq	r0, #13
    40f8:	d00b      	beq.n	4112 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x112>
    40fa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    40fe:	3856      	subs	r0, #86	; 0x56
    4100:	bf08      	it	eq
    4102:	201c      	moveq	r0, #28
    4104:	d005      	beq.n	4112 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x112>
    4106:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    410a:	389f      	subs	r0, #159	; 0x9f
    410c:	bf14      	ite	ne
    410e:	4630      	movne	r0, r6
    4110:	2032      	moveq	r0, #50	; 0x32
    4112:	f89d 1020 	ldrb.w	r1, [sp, #32]
    4116:	1c40      	adds	r0, r0, #1
    4118:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    411c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4120:	1815      	adds	r5, r2, r0
    4122:	eb43 0806 	adc.w	r8, r3, r6
    4126:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    412a:	1b49      	subs	r1, r1, r5
    412c:	eb70 0008 	sbcs.w	r0, r0, r8
    4130:	d203      	bcs.n	413a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13a>
    4132:	b00f      	add	sp, #60	; 0x3c
    4134:	2000      	movs	r0, #0
    4136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    413a:	e9c4 5800 	strd	r5, r8, [r4]
    413e:	9818      	ldr	r0, [sp, #96]	; 0x60
    4140:	900b      	str	r0, [sp, #44]	; 0x2c
    4142:	a808      	add	r0, sp, #32
    4144:	900a      	str	r0, [sp, #40]	; 0x28
    4146:	9809      	ldr	r0, [sp, #36]	; 0x24
    4148:	f10d 0a1c 	add.w	sl, sp, #28
    414c:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    4150:	2020      	movs	r0, #32
    4152:	f88d 001c 	strb.w	r0, [sp, #28]
    4156:	2d20      	cmp	r5, #32
    4158:	d037      	beq.n	41ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ca>
    415a:	4843      	ldr	r0, [pc, #268]	; (4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>)
    415c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    415e:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4162:	bf00      	nop
    4164:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    4168:	e9d4 8300 	ldrd	r8, r3, [r4]
    416c:	f850 9f08 	ldr.w	r9, [r0, #8]!
    4170:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4174:	eb19 0202 	adds.w	r2, r9, r2
    4178:	4171      	adcs	r1, r6
    417a:	ebb8 0202 	subs.w	r2, r8, r2
    417e:	eb73 0101 	sbcs.w	r1, r3, r1
    4182:	d322      	bcc.n	41ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ca>
    4184:	89e1      	ldrh	r1, [r4, #14]
    4186:	b1c9      	cbz	r1, 41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>
    4188:	89c0      	ldrh	r0, [r0, #14]
    418a:	b9b8      	cbnz	r0, 41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>
    418c:	f002 ffce 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4190:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4194:	bf08      	it	eq
    4196:	200d      	moveq	r0, #13
    4198:	d00b      	beq.n	41b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b2>
    419a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    419e:	3856      	subs	r0, #86	; 0x56
    41a0:	bf08      	it	eq
    41a2:	201c      	moveq	r0, #28
    41a4:	d005      	beq.n	41b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b2>
    41a6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    41aa:	389f      	subs	r0, #159	; 0x9f
    41ac:	bf14      	ite	ne
    41ae:	4630      	movne	r0, r6
    41b0:	2032      	moveq	r0, #50	; 0x32
    41b2:	1c41      	adds	r1, r0, #1
    41b4:	ebb8 0009 	subs.w	r0, r8, r9
    41b8:	4288      	cmp	r0, r1
    41ba:	db06      	blt.n	41ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ca>
    41bc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    41c0:	f88a 5000 	strb.w	r5, [sl]
    41c4:	7845      	ldrb	r5, [r0, #1]
    41c6:	2d20      	cmp	r5, #32
    41c8:	d1cc      	bne.n	4164 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x164>
    41ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    41cc:	f89a 1000 	ldrb.w	r1, [sl]
    41d0:	2d20      	cmp	r5, #32
    41d2:	7001      	strb	r1, [r0, #0]
    41d4:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    41d8:	d040      	beq.n	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    41da:	4923      	ldr	r1, [pc, #140]	; (4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>)
    41dc:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    41e0:	f8cd 000c 	str.w	r0, [sp, #12]
    41e4:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    41e8:	f109 0008 	add.w	r0, r9, #8
    41ec:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    41f0:	f8d4 b000 	ldr.w	fp, [r4]
    41f4:	e9d0 a300 	ldrd	sl, r3, [r0]
    41f8:	eb1b 0202 	adds.w	r2, fp, r2
    41fc:	4171      	adcs	r1, r6
    41fe:	ebba 0202 	subs.w	r2, sl, r2
    4202:	eb73 0101 	sbcs.w	r1, r3, r1
    4206:	d31b      	bcc.n	4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>
    4208:	89c0      	ldrh	r0, [r0, #14]
    420a:	b338      	cbz	r0, 425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    420c:	89e0      	ldrh	r0, [r4, #14]
    420e:	bb28      	cbnz	r0, 425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    4210:	f002 ff8c 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4214:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4218:	bf08      	it	eq
    421a:	200d      	moveq	r0, #13
    421c:	d00b      	beq.n	4236 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x236>
    421e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4222:	3856      	subs	r0, #86	; 0x56
    4224:	bf08      	it	eq
    4226:	201c      	moveq	r0, #28
    4228:	d005      	beq.n	4236 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x236>
    422a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    422e:	389f      	subs	r0, #159	; 0x9f
    4230:	bf14      	ite	ne
    4232:	4630      	movne	r0, r6
    4234:	2032      	moveq	r0, #50	; 0x32
    4236:	1c41      	adds	r1, r0, #1
    4238:	ebba 000b 	subs.w	r0, sl, fp
    423c:	4288      	cmp	r0, r1
    423e:	da0d      	bge.n	425c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25c>
    4240:	f888 5000 	strb.w	r5, [r8]
    4244:	f899 1018 	ldrb.w	r1, [r9, #24]
    4248:	7c20      	ldrb	r0, [r4, #16]
    424a:	4288      	cmp	r0, r1
    424c:	f4bf af26 	bcs.w	409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>
    4250:	9803      	ldr	r0, [sp, #12]
    4252:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4256:	7845      	ldrb	r5, [r0, #1]
    4258:	2d20      	cmp	r5, #32
    425a:	d1c3      	bne.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    425c:	b00f      	add	sp, #60	; 0x3c
    425e:	2001      	movs	r0, #1
    4260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4264:	200009c0 	.word	0x200009c0
    4268:	20000940 	.word	0x20000940
    426c:	20000540 	.word	0x20000540
    4270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4274:	b083      	sub	sp, #12
    4276:	4691      	mov	r9, r2
    4278:	4604      	mov	r4, r0
    427a:	460d      	mov	r5, r1
    427c:	4698      	mov	r8, r3
    427e:	aa01      	add	r2, sp, #4
    4280:	4669      	mov	r1, sp
    4282:	4618      	mov	r0, r3
    4284:	f002 f87c 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4288:	f002 fd78 	bl	6d7c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    428c:	f002 f85c 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    4290:	4607      	mov	r7, r0
    4292:	481e      	ldr	r0, [pc, #120]	; (430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>)
    4294:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    4298:	2600      	movs	r6, #0
    429a:	2920      	cmp	r1, #32
    429c:	d009      	beq.n	42b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b2>
    429e:	6882      	ldr	r2, [r0, #8]
    42a0:	68c1      	ldr	r1, [r0, #12]
    42a2:	6900      	ldr	r0, [r0, #16]
    42a4:	1d83      	adds	r3, r0, #6
    42a6:	f146 0000 	adc.w	r0, r6, #0
    42aa:	18d4      	adds	r4, r2, r3
    42ac:	eb41 0500 	adc.w	r5, r1, r0
    42b0:	e026      	b.n	4300 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x300>
    42b2:	340a      	adds	r4, #10
    42b4:	f145 0500 	adc.w	r5, r5, #0
    42b8:	f1b8 0f00 	cmp.w	r8, #0
    42bc:	d017      	beq.n	42ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ee>
    42be:	f003 f85d 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    42c2:	b9a0      	cbnz	r0, 42ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ee>
    42c4:	f002 ff32 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    42c8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    42cc:	bf08      	it	eq
    42ce:	200d      	moveq	r0, #13
    42d0:	d00b      	beq.n	42ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ea>
    42d2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    42d6:	3856      	subs	r0, #86	; 0x56
    42d8:	bf08      	it	eq
    42da:	201c      	moveq	r0, #28
    42dc:	d005      	beq.n	42ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ea>
    42de:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    42e2:	389f      	subs	r0, #159	; 0x9f
    42e4:	bf14      	ite	ne
    42e6:	4630      	movne	r0, r6
    42e8:	2032      	moveq	r0, #50	; 0x32
    42ea:	1904      	adds	r4, r0, r4
    42ec:	4175      	adcs	r5, r6
    42ee:	f1b9 0f00 	cmp.w	r9, #0
    42f2:	d105      	bne.n	4300 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x300>
    42f4:	9800      	ldr	r0, [sp, #0]
    42f6:	4287      	cmp	r7, r0
    42f8:	d902      	bls.n	4300 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x300>
    42fa:	1a38      	subs	r0, r7, r0
    42fc:	1904      	adds	r4, r0, r4
    42fe:	4175      	adcs	r5, r6
    4300:	b003      	add	sp, #12
    4302:	4620      	mov	r0, r4
    4304:	4629      	mov	r1, r5
    4306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    430a:	0000      	.short	0x0000
    430c:	200009c0 	.word	0x200009c0
    4310:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4314:	b081      	sub	sp, #4
    4316:	4605      	mov	r5, r0
    4318:	9802      	ldr	r0, [sp, #8]
    431a:	494a      	ldr	r1, [pc, #296]	; (4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>)
    431c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4320:	4408      	add	r0, r1
    4322:	2600      	movs	r6, #0
    4324:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4328:	2020      	movs	r0, #32
    432a:	4692      	mov	sl, r2
    432c:	7010      	strb	r0, [r2, #0]
    432e:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    4332:	2c20      	cmp	r4, #32
    4334:	d036      	beq.n	43a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a4>
    4336:	9902      	ldr	r1, [sp, #8]
    4338:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    433c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4340:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    4344:	e9d5 7300 	ldrd	r7, r3, [r5]
    4348:	f850 8f08 	ldr.w	r8, [r0, #8]!
    434c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4350:	eb18 0202 	adds.w	r2, r8, r2
    4354:	4171      	adcs	r1, r6
    4356:	1aba      	subs	r2, r7, r2
    4358:	eb73 0101 	sbcs.w	r1, r3, r1
    435c:	d322      	bcc.n	43a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a4>
    435e:	89e9      	ldrh	r1, [r5, #14]
    4360:	b1c9      	cbz	r1, 4396 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x396>
    4362:	89c0      	ldrh	r0, [r0, #14]
    4364:	b9b8      	cbnz	r0, 4396 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x396>
    4366:	f002 fee1 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    436a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    436e:	bf08      	it	eq
    4370:	200d      	moveq	r0, #13
    4372:	d00b      	beq.n	438c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38c>
    4374:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4378:	3856      	subs	r0, #86	; 0x56
    437a:	bf08      	it	eq
    437c:	201c      	moveq	r0, #28
    437e:	d005      	beq.n	438c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38c>
    4380:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4384:	389f      	subs	r0, #159	; 0x9f
    4386:	bf14      	ite	ne
    4388:	4630      	movne	r0, r6
    438a:	2032      	moveq	r0, #50	; 0x32
    438c:	1c41      	adds	r1, r0, #1
    438e:	ebb7 0008 	subs.w	r0, r7, r8
    4392:	4288      	cmp	r0, r1
    4394:	db06      	blt.n	43a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a4>
    4396:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    439a:	f88a 4000 	strb.w	r4, [sl]
    439e:	7844      	ldrb	r4, [r0, #1]
    43a0:	2c20      	cmp	r4, #32
    43a2:	d1cd      	bne.n	4340 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x340>
    43a4:	9804      	ldr	r0, [sp, #16]
    43a6:	f89a 1000 	ldrb.w	r1, [sl]
    43aa:	2c20      	cmp	r4, #32
    43ac:	7001      	strb	r1, [r0, #0]
    43ae:	9f04      	ldr	r7, [sp, #16]
    43b0:	9802      	ldr	r0, [sp, #8]
    43b2:	d042      	beq.n	443a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43a>
    43b4:	4924      	ldr	r1, [pc, #144]	; (4448 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x448>)
    43b6:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    43ba:	9000      	str	r0, [sp, #0]
    43bc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    43c0:	f8d5 b000 	ldr.w	fp, [r5]
    43c4:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    43c8:	f108 0008 	add.w	r0, r8, #8
    43cc:	eb1b 0201 	adds.w	r2, fp, r1
    43d0:	eb43 0106 	adc.w	r1, r3, r6
    43d4:	e9d0 a300 	ldrd	sl, r3, [r0]
    43d8:	ebba 0202 	subs.w	r2, sl, r2
    43dc:	eb73 0101 	sbcs.w	r1, r3, r1
    43e0:	d31b      	bcc.n	441a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x41a>
    43e2:	89c0      	ldrh	r0, [r0, #14]
    43e4:	b348      	cbz	r0, 443a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43a>
    43e6:	89e8      	ldrh	r0, [r5, #14]
    43e8:	bb38      	cbnz	r0, 443a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43a>
    43ea:	f002 fe9f 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    43ee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    43f2:	bf08      	it	eq
    43f4:	200d      	moveq	r0, #13
    43f6:	d00b      	beq.n	4410 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x410>
    43f8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    43fc:	3856      	subs	r0, #86	; 0x56
    43fe:	bf08      	it	eq
    4400:	201c      	moveq	r0, #28
    4402:	d005      	beq.n	4410 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x410>
    4404:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4408:	389f      	subs	r0, #159	; 0x9f
    440a:	bf14      	ite	ne
    440c:	4630      	movne	r0, r6
    440e:	2032      	moveq	r0, #50	; 0x32
    4410:	1c41      	adds	r1, r0, #1
    4412:	ebba 000b 	subs.w	r0, sl, fp
    4416:	4288      	cmp	r0, r1
    4418:	da0f      	bge.n	443a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43a>
    441a:	703c      	strb	r4, [r7, #0]
    441c:	f898 1018 	ldrb.w	r1, [r8, #24]
    4420:	7c28      	ldrb	r0, [r5, #16]
    4422:	4288      	cmp	r0, r1
    4424:	d303      	bcc.n	442e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42e>
    4426:	b005      	add	sp, #20
    4428:	2000      	movs	r0, #0
    442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    442e:	9800      	ldr	r0, [sp, #0]
    4430:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4434:	7844      	ldrb	r4, [r0, #1]
    4436:	2c20      	cmp	r4, #32
    4438:	d1c0      	bne.n	43bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3bc>
    443a:	b005      	add	sp, #20
    443c:	2001      	movs	r0, #1
    443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4442:	0000      	.short	0x0000
    4444:	200009c0 	.word	0x200009c0
    4448:	20000940 	.word	0x20000940
    444c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4450:	b09c      	sub	sp, #112	; 0x70
    4452:	461f      	mov	r7, r3
    4454:	f002 f9e4 	bl	6820 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    4458:	4604      	mov	r4, r0
    445a:	460d      	mov	r5, r1
    445c:	f002 fc8e 	bl	6d7c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4460:	4606      	mov	r6, r0
    4462:	981e      	ldr	r0, [sp, #120]	; 0x78
    4464:	2801      	cmp	r0, #1
    4466:	bf18      	it	ne
    4468:	2802      	cmpne	r0, #2
    446a:	d005      	beq.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    446c:	f640 1156 	movw	r1, #2390	; 0x956
    4470:	f04f 0070 	mov.w	r0, #112	; 0x70
    4474:	f002 fffa 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4478:	49fe      	ldr	r1, [pc, #1016]	; (4874 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x874>)
    447a:	2001      	movs	r0, #1
    447c:	6008      	str	r0, [r1, #0]
    447e:	49fe      	ldr	r1, [pc, #1016]	; (4878 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x878>)
    4480:	6889      	ldr	r1, [r1, #8]
    4482:	6008      	str	r0, [r1, #0]
    4484:	2000      	movs	r0, #0
    4486:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    448a:	900c      	str	r0, [sp, #48]	; 0x30
    448c:	1e40      	subs	r0, r0, #1
    448e:	900d      	str	r0, [sp, #52]	; 0x34
    4490:	48fa      	ldr	r0, [pc, #1000]	; (487c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x87c>)
    4492:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    4496:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    449a:	f100 0108 	add.w	r1, r0, #8
    449e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    44a2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    44a6:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    44aa:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    44ae:	980e      	ldr	r0, [sp, #56]	; 0x38
    44b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    44b4:	f005 fc0c 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    44b8:	4602      	mov	r2, r0
    44ba:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    44be:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    44c2:	4bef      	ldr	r3, [pc, #956]	; (4880 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x880>)
    44c4:	4440      	add	r0, r8
    44c6:	1c41      	adds	r1, r0, #1
    44c8:	1850      	adds	r0, r2, r1
    44ca:	429a      	cmp	r2, r3
    44cc:	d856      	bhi.n	457c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x57c>
    44ce:	4aed      	ldr	r2, [pc, #948]	; (4884 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x884>)
    44d0:	4291      	cmp	r1, r2
    44d2:	dc5b      	bgt.n	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    44d4:	4252      	negs	r2, r2
    44d6:	4291      	cmp	r1, r2
    44d8:	db60      	blt.n	459c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x59c>
    44da:	1c59      	adds	r1, r3, #1
    44dc:	4281      	cmp	r1, r0
    44de:	bfdc      	itt	le
    44e0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    44e4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    44e8:	dd05      	ble.n	44f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f6>
    44ea:	2800      	cmp	r0, #0
    44ec:	bfbc      	itt	lt
    44ee:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    44f2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    44f6:	9017      	str	r0, [sp, #92]	; 0x5c
    44f8:	48e3      	ldr	r0, [pc, #908]	; (4888 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x888>)
    44fa:	f1b8 0f00 	cmp.w	r8, #0
    44fe:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    4502:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    4506:	bf14      	ite	ne
    4508:	f04f 0a01 	movne.w	sl, #1
    450c:	f04f 0a00 	moveq.w	sl, #0
    4510:	f002 ff34 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4514:	9019      	str	r0, [sp, #100]	; 0x64
    4516:	f1ba 0f00 	cmp.w	sl, #0
    451a:	d00b      	beq.n	4534 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x534>
    451c:	49db      	ldr	r1, [pc, #876]	; (488c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88c>)
    451e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    4522:	ea6f 0200 	mvn.w	r2, r0
    4526:	ea72 0001 	orns	r0, r2, r1
    452a:	bf02      	ittt	eq
    452c:	9819      	ldreq	r0, [sp, #100]	; 0x64
    452e:	2800      	cmpeq	r0, #0
    4530:	2701      	moveq	r7, #1
    4532:	d001      	beq.n	4538 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x538>
    4534:	f04f 0700 	mov.w	r7, #0
    4538:	f002 fdf8 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    453c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4540:	bf08      	it	eq
    4542:	200d      	moveq	r0, #13
    4544:	d00b      	beq.n	455e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x55e>
    4546:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    454a:	3856      	subs	r0, #86	; 0x56
    454c:	bf08      	it	eq
    454e:	201c      	moveq	r0, #28
    4550:	d005      	beq.n	455e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x55e>
    4552:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4556:	389f      	subs	r0, #159	; 0x9f
    4558:	bf14      	ite	ne
    455a:	2000      	movne	r0, #0
    455c:	2032      	moveq	r0, #50	; 0x32
    455e:	f04f 0900 	mov.w	r9, #0
    4562:	46cb      	mov	fp, r9
    4564:	9016      	str	r0, [sp, #88]	; 0x58
    4566:	4546      	cmp	r6, r8
    4568:	d936      	bls.n	45d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d8>
    456a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    456c:	43f3      	mvns	r3, r6
    456e:	f8df c310 	ldr.w	ip, [pc, #784]	; 4880 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x880>
    4572:	18c8      	adds	r0, r1, r3
    4574:	46e9      	mov	r9, sp
    4576:	aa1a      	add	r2, sp, #104	; 0x68
    4578:	4561      	cmp	r1, ip
    457a:	d904      	bls.n	4586 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x586>
    457c:	f240 517f 	movw	r1, #1407	; 0x57f
    4580:	2070      	movs	r0, #112	; 0x70
    4582:	f002 ff73 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4586:	49bf      	ldr	r1, [pc, #764]	; (4884 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x884>)
    4588:	428b      	cmp	r3, r1
    458a:	dd04      	ble.n	4596 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x596>
    458c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    4590:	2070      	movs	r0, #112	; 0x70
    4592:	f002 ff6b 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4596:	49be      	ldr	r1, [pc, #760]	; (4890 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x890>)
    4598:	428b      	cmp	r3, r1
    459a:	da04      	bge.n	45a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a6>
    459c:	f240 5181 	movw	r1, #1409	; 0x581
    45a0:	2070      	movs	r0, #112	; 0x70
    45a2:	f002 ff63 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45a6:	49bb      	ldr	r1, [pc, #748]	; (4894 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x894>)
    45a8:	4281      	cmp	r1, r0
    45aa:	bfdc      	itt	le
    45ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    45b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    45b4:	dd05      	ble.n	45c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c2>
    45b6:	2800      	cmp	r0, #0
    45b8:	bfbc      	itt	lt
    45ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    45be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    45c2:	4649      	mov	r1, r9
    45c4:	f001 fedc 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    45c8:	9800      	ldr	r0, [sp, #0]
    45ca:	990e      	ldr	r1, [sp, #56]	; 0x38
    45cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45d0:	9000      	str	r0, [sp, #0]
    45d2:	1a08      	subs	r0, r1, r0
    45d4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    45d8:	2f00      	cmp	r7, #0
    45da:	bf18      	it	ne
    45dc:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    45e0:	d105      	bne.n	45ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ee>
    45e2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    45e6:	2800      	cmp	r0, #0
    45e8:	bf18      	it	ne
    45ea:	f04f 0b02 	movne.w	fp, #2
    45ee:	43e0      	mvns	r0, r4
    45f0:	ea70 0005 	orns	r0, r0, r5
    45f4:	d022      	beq.n	463c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x63c>
    45f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    45fa:	1a22      	subs	r2, r4, r0
    45fc:	eb75 0201 	sbcs.w	r2, r5, r1
    4600:	d20c      	bcs.n	461c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x61c>
    4602:	1b02      	subs	r2, r0, r4
    4604:	eb61 0105 	sbc.w	r1, r1, r5
    4608:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    460c:	f171 0100 	sbcs.w	r1, r1, #0
    4610:	d311      	bcc.n	4636 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x636>
    4612:	f640 1195 	movw	r1, #2453	; 0x995
    4616:	2070      	movs	r0, #112	; 0x70
    4618:	f002 ff28 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    461c:	1a22      	subs	r2, r4, r0
    461e:	eb65 0101 	sbc.w	r1, r5, r1
    4622:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4626:	f171 0100 	sbcs.w	r1, r1, #0
    462a:	d304      	bcc.n	4636 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x636>
    462c:	f640 1199 	movw	r1, #2457	; 0x999
    4630:	2070      	movs	r0, #112	; 0x70
    4632:	f002 ff1b 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4636:	1b00      	subs	r0, r0, r4
    4638:	2801      	cmp	r0, #1
    463a:	da03      	bge.n	4644 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x644>
    463c:	981c      	ldr	r0, [sp, #112]	; 0x70
    463e:	901a      	str	r0, [sp, #104]	; 0x68
    4640:	2003      	movs	r0, #3
    4642:	e00d      	b.n	4660 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x660>
    4644:	b157      	cbz	r7, 465c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x65c>
    4646:	4891      	ldr	r0, [pc, #580]	; (488c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88c>)
    4648:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    464c:	b130      	cbz	r0, 465c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x65c>
    464e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4652:	f110 0b00 	adds.w	fp, r0, #0
    4656:	bf18      	it	ne
    4658:	f04f 0b02 	movne.w	fp, #2
    465c:	2000      	movs	r0, #0
    465e:	941a      	str	r4, [sp, #104]	; 0x68
    4660:	4483      	add	fp, r0
    4662:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4666:	ebb0 0009 	subs.w	r0, r0, r9
    466a:	f162 0100 	sbc.w	r1, r2, #0
    466e:	1e42      	subs	r2, r0, #1
    4670:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4672:	f141 3eff 	adc.w	lr, r1, #4294967295
    4676:	1ad3      	subs	r3, r2, r3
    4678:	455b      	cmp	r3, fp
    467a:	db08      	blt.n	468e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68e>
    467c:	f1b9 0f00 	cmp.w	r9, #0
    4680:	d032      	beq.n	46e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e8>
    4682:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4684:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    4688:	444b      	add	r3, r9
    468a:	9310      	str	r3, [sp, #64]	; 0x40
    468c:	e02c      	b.n	46e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e8>
    468e:	f1b9 0f00 	cmp.w	r9, #0
    4692:	d005      	beq.n	46a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6a0>
    4694:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    4698:	b920      	cbnz	r0, 46a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6a4>
    469a:	f002 fb65 	bl	6d68 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    469e:	b108      	cbz	r0, 46a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6a4>
    46a0:	b9af      	cbnz	r7, 46ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6ce>
    46a2:	e00c      	b.n	46be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6be>
    46a4:	b92f      	cbnz	r7, 46b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6b2>
    46a6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    46aa:	2800      	cmp	r0, #0
    46ac:	bf18      	it	ne
    46ae:	f1ab 0b02 	subne.w	fp, fp, #2
    46b2:	f04f 0900 	mov.w	r9, #0
    46b6:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    46ba:	464e      	mov	r6, r9
    46bc:	e007      	b.n	46ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6ce>
    46be:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    46c2:	b120      	cbz	r0, 46ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6ce>
    46c4:	2000      	movs	r0, #0
    46c6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    46ca:	f1ab 0b02 	sub.w	fp, fp, #2
    46ce:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    46d2:	ebb0 0009 	subs.w	r0, r0, r9
    46d6:	f162 0100 	sbc.w	r1, r2, #0
    46da:	1e42      	subs	r2, r0, #1
    46dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    46de:	f141 3eff 	adc.w	lr, r1, #4294967295
    46e2:	1ad3      	subs	r3, r2, r3
    46e4:	455b      	cmp	r3, fp
    46e6:	db7d      	blt.n	47e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e4>
    46e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    46ea:	b99b      	cbnz	r3, 4714 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x714>
    46ec:	4b67      	ldr	r3, [pc, #412]	; (488c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88c>)
    46ee:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    46f2:	ea6f 090c 	mvn.w	r9, ip
    46f6:	ea79 0903 	orns	r9, r9, r3
    46fa:	d00b      	beq.n	4714 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x714>
    46fc:	ebb0 0c0c 	subs.w	ip, r0, ip
    4700:	9816      	ldr	r0, [sp, #88]	; 0x58
    4702:	eb61 0303 	sbc.w	r3, r1, r3
    4706:	ebbc 0000 	subs.w	r0, ip, r0
    470a:	f173 0000 	sbcs.w	r0, r3, #0
    470e:	bf38      	it	cc
    4710:	2000      	movcc	r0, #0
    4712:	d300      	bcc.n	4716 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x716>
    4714:	2001      	movs	r0, #1
    4716:	ea3a 0000 	bics.w	r0, sl, r0
    471a:	d163      	bne.n	47e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e4>
    471c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    4720:	e9cd 0107 	strd	r0, r1, [sp, #28]
    4724:	981e      	ldr	r0, [sp, #120]	; 0x78
    4726:	4691      	mov	r9, r2
    4728:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    472c:	46f3      	mov	fp, lr
    472e:	2700      	movs	r7, #0
    4730:	f002 fcfc 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4734:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4738:	bf08      	it	eq
    473a:	200d      	moveq	r0, #13
    473c:	d00b      	beq.n	4756 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x756>
    473e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4742:	3856      	subs	r0, #86	; 0x56
    4744:	bf08      	it	eq
    4746:	201c      	moveq	r0, #28
    4748:	d005      	beq.n	4756 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x756>
    474a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    474e:	389f      	subs	r0, #159	; 0x9f
    4750:	bf14      	ite	ne
    4752:	4638      	movne	r0, r7
    4754:	2032      	moveq	r0, #50	; 0x32
    4756:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    475a:	300b      	adds	r0, #11
    475c:	ebb9 0202 	subs.w	r2, r9, r2
    4760:	eb6b 0303 	sbc.w	r3, fp, r3
    4764:	1a10      	subs	r0, r2, r0
    4766:	f173 0000 	sbcs.w	r0, r3, #0
    476a:	d22a      	bcs.n	47c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7c2>
    476c:	9819      	ldr	r0, [sp, #100]	; 0x64
    476e:	2801      	cmp	r0, #1
    4770:	d002      	beq.n	4778 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x778>
    4772:	9818      	ldr	r0, [sp, #96]	; 0x60
    4774:	b148      	cbz	r0, 478a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x78a>
    4776:	e017      	b.n	47a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7a8>
    4778:	43e0      	mvns	r0, r4
    477a:	ea70 0005 	orns	r0, r0, r5
    477e:	d127      	bne.n	47d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7d0>
    4780:	f640 01d7 	movw	r1, #2263	; 0x8d7
    4784:	2070      	movs	r0, #112	; 0x70
    4786:	f002 fe71 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    478a:	43e0      	mvns	r0, r4
    478c:	ea70 0005 	orns	r0, r0, r5
    4790:	d00a      	beq.n	47a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7a8>
    4792:	d01d      	beq.n	47d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7d0>
    4794:	ebb4 0009 	subs.w	r0, r4, r9
    4798:	eb65 010b 	sbc.w	r1, r5, fp
    479c:	2300      	movs	r3, #0
    479e:	f1d0 0204 	rsbs	r2, r0, #4
    47a2:	eb73 0201 	sbcs.w	r2, r3, r1
    47a6:	da06      	bge.n	47b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7b6>
    47a8:	464c      	mov	r4, r9
    47aa:	465d      	mov	r5, fp
    47ac:	4620      	mov	r0, r4
    47ae:	4629      	mov	r1, r5
    47b0:	f001 ff16 	bl	65e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    47b4:	e00c      	b.n	47d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7d0>
    47b6:	2200      	movs	r2, #0
    47b8:	1a10      	subs	r0, r2, r0
    47ba:	eb72 0001 	sbcs.w	r0, r2, r1
    47be:	db11      	blt.n	47e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e4>
    47c0:	e006      	b.n	47d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7d0>
    47c2:	464c      	mov	r4, r9
    47c4:	465d      	mov	r5, fp
    47c6:	4620      	mov	r0, r4
    47c8:	4629      	mov	r1, r5
    47ca:	f001 ff09 	bl	65e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    47ce:	4657      	mov	r7, sl
    47d0:	43e1      	mvns	r1, r4
    47d2:	ea71 0005 	orns	r0, r1, r5
    47d6:	d071      	beq.n	48bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8bc>
    47d8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    47dc:	f04f 0b00 	mov.w	fp, #0
    47e0:	990e      	ldr	r1, [sp, #56]	; 0x38
    47e2:	e000      	b.n	47e6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e6>
    47e4:	e06f      	b.n	48c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c6>
    47e6:	1a0b      	subs	r3, r1, r0
    47e8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    47ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    47f0:	eb11 010c 	adds.w	r1, r1, ip
    47f4:	1a08      	subs	r0, r1, r0
    47f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    47fa:	2b01      	cmp	r3, #1
    47fc:	d363      	bcc.n	48c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c6>
    47fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4802:	bf98      	it	ls
    4804:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    4808:	d85d      	bhi.n	48c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c6>
    480a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    480e:	f005 fa5f 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4812:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4814:	4a1b      	ldr	r2, [pc, #108]	; (4884 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x884>)
    4816:	1a0d      	subs	r5, r1, r0
    4818:	1aaa      	subs	r2, r5, r2
    481a:	f17b 0200 	sbcs.w	r2, fp, #0
    481e:	d316      	bcc.n	484e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84e>
    4820:	4b18      	ldr	r3, [pc, #96]	; (4884 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x884>)
    4822:	1a42      	subs	r2, r0, r1
    4824:	1ad3      	subs	r3, r2, r3
    4826:	f17b 0300 	sbcs.w	r3, fp, #0
    482a:	d310      	bcc.n	484e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84e>
    482c:	4b14      	ldr	r3, [pc, #80]	; (4880 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x880>)
    482e:	42ab      	cmp	r3, r5
    4830:	bf3e      	ittt	cc
    4832:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    4836:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    483a:	1845      	addcc	r5, r0, r1
    483c:	d307      	bcc.n	484e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84e>
    483e:	4293      	cmp	r3, r2
    4840:	d245      	bcs.n	48ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ce>
    4842:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    4846:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    484a:	4408      	add	r0, r1
    484c:	4245      	negs	r5, r0
    484e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 488c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88c>
    4852:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    4856:	b378      	cbz	r0, 48b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b8>
    4858:	981e      	ldr	r0, [sp, #120]	; 0x78
    485a:	2801      	cmp	r0, #1
    485c:	d005      	beq.n	486a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x86a>
    485e:	2002      	movs	r0, #2
    4860:	f002 f94a 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4864:	2001      	movs	r0, #1
    4866:	f002 f947 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    486a:	45b0      	cmp	r8, r6
    486c:	d240      	bcs.n	48f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8f0>
    486e:	eba5 0106 	sub.w	r1, r5, r6
    4872:	e011      	b.n	4898 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x898>
    4874:	40000508 	.word	0x40000508
    4878:	20000120 	.word	0x20000120
    487c:	20000540 	.word	0x20000540
    4880:	1e847fff 	.word	0x1e847fff
    4884:	0f424000 	.word	0x0f424000
    4888:	20000940 	.word	0x20000940
    488c:	200009c0 	.word	0x200009c0
    4890:	f0bdc000 	.word	0xf0bdc000
    4894:	1e848000 	.word	0x1e848000
    4898:	f04f 0002 	mov.w	r0, #2
    489c:	f002 f872 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    48a0:	b398      	cbz	r0, 490a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90a>
    48a2:	f1b8 0f00 	cmp.w	r8, #0
    48a6:	bf1c      	itt	ne
    48a8:	eba5 0108 	subne.w	r1, r5, r8
    48ac:	2001      	movne	r0, #1
    48ae:	d035      	beq.n	491c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x91c>
    48b0:	f002 f868 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    48b4:	b348      	cbz	r0, 490a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90a>
    48b6:	e031      	b.n	491c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x91c>
    48b8:	e00e      	b.n	48d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d8>
    48ba:	e7ff      	b.n	48bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8bc>
    48bc:	f640 2103 	movw	r1, #2563	; 0xa03
    48c0:	2070      	movs	r0, #112	; 0x70
    48c2:	f002 fdd3 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48c6:	b020      	add	sp, #128	; 0x80
    48c8:	2000      	movs	r0, #0
    48ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    48ce:	f640 21d7 	movw	r1, #2775	; 0xad7
    48d2:	2070      	movs	r0, #112	; 0x70
    48d4:	f002 fdca 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48d8:	45b0      	cmp	r8, r6
    48da:	bf34      	ite	cc
    48dc:	4630      	movcc	r0, r6
    48de:	4640      	movcs	r0, r8
    48e0:	301e      	adds	r0, #30
    48e2:	42a8      	cmp	r0, r5
    48e4:	dbb8      	blt.n	4858 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x858>
    48e6:	f640 2117 	movw	r1, #2583	; 0xa17
    48ea:	2070      	movs	r0, #112	; 0x70
    48ec:	f002 fdbe 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48f0:	d90c      	bls.n	490c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90c>
    48f2:	eba5 0108 	sub.w	r1, r5, r8
    48f6:	2001      	movs	r0, #1
    48f8:	f002 f844 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    48fc:	b128      	cbz	r0, 490a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90a>
    48fe:	2e00      	cmp	r6, #0
    4900:	bf1c      	itt	ne
    4902:	1ba9      	subne	r1, r5, r6
    4904:	2002      	movne	r0, #2
    4906:	d009      	beq.n	491c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x91c>
    4908:	e7d2      	b.n	48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>
    490a:	e034      	b.n	4976 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x976>
    490c:	ea56 0008 	orrs.w	r0, r6, r8
    4910:	d004      	beq.n	491c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x91c>
    4912:	f640 113a 	movw	r1, #2362	; 0x93a
    4916:	2070      	movs	r0, #112	; 0x70
    4918:	f002 fda8 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    491c:	4629      	mov	r1, r5
    491e:	2000      	movs	r0, #0
    4920:	f002 f830 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4924:	b338      	cbz	r0, 4976 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x976>
    4926:	2601      	movs	r6, #1
    4928:	f1ba 0f00 	cmp.w	sl, #0
    492c:	bf04      	itt	eq
    492e:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    4932:	2800      	cmpeq	r0, #0
    4934:	d000      	beq.n	4938 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x938>
    4936:	b347      	cbz	r7, 498a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x98a>
    4938:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    493c:	ea6f 0101 	mvn.w	r1, r1
    4940:	ea71 0000 	orns	r0, r1, r0
    4944:	d006      	beq.n	4954 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x954>
    4946:	f002 fbf7 	bl	7138 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    494a:	f04f 30ff 	mov.w	r0, #4294967295
    494e:	4601      	mov	r1, r0
    4950:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    4954:	b1ff      	cbz	r7, 4996 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x996>
    4956:	9816      	ldr	r0, [sp, #88]	; 0x58
    4958:	1a20      	subs	r0, r4, r0
    495a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    495e:	f04f 0005 	mov.w	r0, #5
    4962:	f002 f80f 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4966:	b370      	cbz	r0, 49c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c6>
    4968:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    496c:	2800      	cmp	r0, #0
    496e:	bf08      	it	eq
    4970:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    4974:	e017      	b.n	49a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9a6>
    4976:	2002      	movs	r0, #2
    4978:	f002 f8be 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    497c:	2001      	movs	r0, #1
    497e:	f002 f8bb 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4982:	b020      	add	sp, #128	; 0x80
    4984:	2000      	movs	r0, #0
    4986:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    498a:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    498e:	43c0      	mvns	r0, r0
    4990:	ea70 0001 	orns	r0, r0, r1
    4994:	d012      	beq.n	49bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9bc>
    4996:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    499a:	b120      	cbz	r0, 49a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9a6>
    499c:	2005      	movs	r0, #5
    499e:	f002 f8ab 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    49a2:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    49a6:	eba5 0008 	sub.w	r0, r5, r8
    49aa:	f1a0 0119 	sub.w	r1, r0, #25
    49ae:	2900      	cmp	r1, #0
    49b0:	dc0f      	bgt.n	49d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9d2>
    49b2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    49b6:	2070      	movs	r0, #112	; 0x70
    49b8:	f002 fd58 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49bc:	f002 fbd8 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    49c0:	f001 ffbe 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    49c4:	e7c4      	b.n	4950 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x950>
    49c6:	e7ff      	b.n	49c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c8>
    49c8:	f240 21e6 	movw	r1, #742	; 0x2e6
    49cc:	2070      	movs	r0, #112	; 0x70
    49ce:	f002 fd4d 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49d2:	2003      	movs	r0, #3
    49d4:	f001 ffd6 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    49d8:	b338      	cbz	r0, 4a2a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa2a>
    49da:	4816      	ldr	r0, [pc, #88]	; (4a34 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa34>)
    49dc:	6880      	ldr	r0, [r0, #8]
    49de:	f8c0 b000 	str.w	fp, [r0]
    49e2:	4815      	ldr	r0, [pc, #84]	; (4a38 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa38>)
    49e4:	f8c0 b000 	str.w	fp, [r0]
    49e8:	ac0c      	add	r4, sp, #48	; 0x30
    49ea:	4814      	ldr	r0, [pc, #80]	; (4a3c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa3c>)
    49ec:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    49f0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    49f4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    49f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    49fc:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    4a00:	ac10      	add	r4, sp, #64	; 0x40
    4a02:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    4a06:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    4a0a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    4a0e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    4a12:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    4a16:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    4a1a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    4a1e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    4a22:	b020      	add	sp, #128	; 0x80
    4a24:	2001      	movs	r0, #1
    4a26:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4a2a:	f640 2148 	movw	r1, #2632	; 0xa48
    4a2e:	2070      	movs	r0, #112	; 0x70
    4a30:	f002 fd1c 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a34:	20000120 	.word	0x20000120
    4a38:	40000508 	.word	0x40000508
    4a3c:	20000940 	.word	0x20000940
    4a40:	b570      	push	{r4, r5, r6, lr}
    4a42:	4d1d      	ldr	r5, [pc, #116]	; (4ab8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xab8>)
    4a44:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    4a48:	2820      	cmp	r0, #32
    4a4a:	bf18      	it	ne
    4a4c:	bd70      	popne	{r4, r5, r6, pc}
    4a4e:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    4a52:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    4a56:	4428      	add	r0, r5
    4a58:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4a5c:	2c20      	cmp	r4, #32
    4a5e:	d026      	beq.n	4aae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaae>
    4a60:	4b16      	ldr	r3, [pc, #88]	; (4abc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xabc>)
    4a62:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    4a66:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    4a6a:	7849      	ldrb	r1, [r1, #1]
    4a6c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    4a70:	20ff      	movs	r0, #255	; 0xff
    4a72:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    4a76:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    4a7a:	4621      	mov	r1, r4
    4a7c:	2002      	movs	r0, #2
    4a7e:	f000 f88b 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    4a82:	2000      	movs	r0, #0
    4a84:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    4a88:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    4a8c:	480c      	ldr	r0, [pc, #48]	; (4ac0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac0>)
    4a8e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4a92:	7e00      	ldrb	r0, [r0, #24]
    4a94:	2800      	cmp	r0, #0
    4a96:	bf08      	it	eq
    4a98:	f002 fe50 	bleq	773c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    4a9c:	2000      	movs	r0, #0
    4a9e:	4909      	ldr	r1, [pc, #36]	; (4ac4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac4>)
    4aa0:	6849      	ldr	r1, [r1, #4]
    4aa2:	2900      	cmp	r1, #0
    4aa4:	bf08      	it	eq
    4aa6:	bd70      	popeq	{r4, r5, r6, pc}
    4aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4aac:	4708      	bx	r1
    4aae:	f240 311d 	movw	r1, #797	; 0x31d
    4ab2:	2070      	movs	r0, #112	; 0x70
    4ab4:	f002 fcda 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ab8:	200009c0 	.word	0x200009c0
    4abc:	20000940 	.word	0x20000940
    4ac0:	20000540 	.word	0x20000540
    4ac4:	20000120 	.word	0x20000120
    4ac8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4acc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4b88 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb88>
    4ad0:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    4ad4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    4ad8:	4440      	add	r0, r8
    4ada:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    4ade:	2c20      	cmp	r4, #32
    4ae0:	bf08      	it	eq
    4ae2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4ae6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 4b8c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8c>
    4aea:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4b90 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb90>
    4aee:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    4af2:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    4af6:	2607      	movs	r6, #7
    4af8:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    4afc:	2801      	cmp	r0, #1
    4afe:	d00e      	beq.n	4b1e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb1e>
    4b00:	2804      	cmp	r0, #4
    4b02:	bf08      	it	eq
    4b04:	2602      	moveq	r6, #2
    4b06:	d00a      	beq.n	4b1e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb1e>
    4b08:	2805      	cmp	r0, #5
    4b0a:	bf0c      	ite	eq
    4b0c:	2603      	moveq	r6, #3
    4b0e:	2806      	cmpne	r0, #6
    4b10:	d005      	beq.n	4b1e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb1e>
    4b12:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    4b16:	f04f 0070 	mov.w	r0, #112	; 0x70
    4b1a:	f002 fca7 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4b1e:	f1bb 0f00 	cmp.w	fp, #0
    4b22:	bf18      	it	ne
    4b24:	f3af 8000 	nopne.w
    4b28:	f3ef 8010 	mrs	r0, PRIMASK
    4b2c:	b672      	cpsid	i
    4b2e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    4b32:	784a      	ldrb	r2, [r1, #1]
    4b34:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4b38:	4441      	add	r1, r8
    4b3a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    4b3e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    4b42:	42a2      	cmp	r2, r4
    4b44:	bf04      	itt	eq
    4b46:	2220      	moveq	r2, #32
    4b48:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    4b4c:	b1a8      	cbz	r0, 4b7a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb7a>
    4b4e:	462a      	mov	r2, r5
    4b50:	4621      	mov	r1, r4
    4b52:	2001      	movs	r0, #1
    4b54:	f000 f820 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    4b58:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    4b5c:	e9d1 2000 	ldrd	r2, r0, [r1]
    4b60:	4631      	mov	r1, r6
    4b62:	4790      	blx	r2
    4b64:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    4b68:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    4b6c:	4440      	add	r0, r8
    4b6e:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    4b72:	2c20      	cmp	r4, #32
    4b74:	d1bd      	bne.n	4af2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaf2>
    4b76:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4b7a:	4806      	ldr	r0, [pc, #24]	; (4b94 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb94>)
    4b7c:	2800      	cmp	r0, #0
    4b7e:	bf18      	it	ne
    4b80:	f3af 8000 	nopne.w
    4b84:	b662      	cpsie	i
    4b86:	e7e2      	b.n	4b4e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4e>
    4b88:	200009c0 	.word	0x200009c0
    4b8c:	00000000 	.word	0x00000000
    4b90:	20000940 	.word	0x20000940
    4b94:	00000000 	.word	0x00000000
    4b98:	f8df c058 	ldr.w	ip, [pc, #88]	; 4bf4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbf4>
    4b9c:	b510      	push	{r4, lr}
    4b9e:	2300      	movs	r3, #0
    4ba0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    4ba4:	2807      	cmp	r0, #7
    4ba6:	d21f      	bcs.n	4be8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe8>
    4ba8:	e8df f000 	tbb	[pc, r0]
    4bac:	05050505 	.word	0x05050505
    4bb0:	00040404 	.word	0x00040404
    4bb4:	2301      	movs	r3, #1
    4bb6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    4bba:	2b00      	cmp	r3, #0
    4bbc:	bf08      	it	eq
    4bbe:	bd10      	popeq	{r4, pc}
    4bc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4bc4:	480c      	ldr	r0, [pc, #48]	; (4bf8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbf8>)
    4bc6:	4402      	add	r2, r0
    4bc8:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    4bcc:	2820      	cmp	r0, #32
    4bce:	bf0e      	itee	eq
    4bd0:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    4bd4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    4bd8:	7041      	strbne	r1, [r0, #1]
    4bda:	2020      	movs	r0, #32
    4bdc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    4be0:	7058      	strb	r0, [r3, #1]
    4be2:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    4be6:	bd10      	pop	{r4, pc}
    4be8:	f44f 7117 	mov.w	r1, #604	; 0x25c
    4bec:	2070      	movs	r0, #112	; 0x70
    4bee:	f002 fc3d 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bf2:	0000      	.short	0x0000
    4bf4:	20000940 	.word	0x20000940
    4bf8:	200009c0 	.word	0x200009c0
    4bfc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4c00:	460f      	mov	r7, r1
    4c02:	4680      	mov	r8, r0
    4c04:	f8df b154 	ldr.w	fp, [pc, #340]	; 4d5c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd5c>
    4c08:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    4c0c:	4458      	add	r0, fp
    4c0e:	f1b8 0f01 	cmp.w	r8, #1
    4c12:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4c16:	4625      	mov	r5, r4
    4c18:	bf18      	it	ne
    4c1a:	f1b8 0f02 	cmpne.w	r8, #2
    4c1e:	d005      	beq.n	4c2c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc2c>
    4c20:	f640 217e 	movw	r1, #2686	; 0xa7e
    4c24:	f04f 0070 	mov.w	r0, #112	; 0x70
    4c28:	f002 fc20 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c2c:	2d20      	cmp	r5, #32
    4c2e:	d041      	beq.n	4cb4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcb4>
    4c30:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    4c34:	2600      	movs	r6, #0
    4c36:	2800      	cmp	r0, #0
    4c38:	bf08      	it	eq
    4c3a:	2602      	moveq	r6, #2
    4c3c:	f001 fcca 	bl	65d4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    4c40:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4d60 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd60>
    4c44:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    4c48:	6899      	ldr	r1, [r3, #8]
    4c4a:	691b      	ldr	r3, [r3, #16]
    4c4c:	1a0a      	subs	r2, r1, r0
    4c4e:	18c9      	adds	r1, r1, r3
    4c50:	1a09      	subs	r1, r1, r0
    4c52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4c5a:	4296      	cmp	r6, r2
    4c5c:	bf99      	ittee	ls
    4c5e:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    4c62:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    4c66:	4a3f      	ldrhi	r2, [pc, #252]	; (4d64 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd64>)
    4c68:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    4c6c:	d920      	bls.n	4cb0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcb0>
    4c6e:	4622      	mov	r2, r4
    4c70:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    4c74:	784c      	ldrb	r4, [r1, #1]
    4c76:	2c20      	cmp	r4, #32
    4c78:	d012      	beq.n	4ca0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xca0>
    4c7a:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    4c7e:	6899      	ldr	r1, [r3, #8]
    4c80:	691b      	ldr	r3, [r3, #16]
    4c82:	ebb1 0c00 	subs.w	ip, r1, r0
    4c86:	18c9      	adds	r1, r1, r3
    4c88:	1a09      	subs	r1, r1, r0
    4c8a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    4c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4c92:	4566      	cmp	r6, ip
    4c94:	bf9c      	itt	ls
    4c96:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    4c9a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    4c9e:	d8e6      	bhi.n	4c6e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc6e>
    4ca0:	2a20      	cmp	r2, #32
    4ca2:	d005      	beq.n	4cb0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcb0>
    4ca4:	463b      	mov	r3, r7
    4ca6:	2120      	movs	r1, #32
    4ca8:	2004      	movs	r0, #4
    4caa:	f7ff f90d 	bl	3ec8 <MPSL_IRQ_RADIO_Handler+0x3c>
    4cae:	4604      	mov	r4, r0
    4cb0:	42ac      	cmp	r4, r5
    4cb2:	d113      	bne.n	4cdc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcdc>
    4cb4:	482c      	ldr	r0, [pc, #176]	; (4d68 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd68>)
    4cb6:	2800      	cmp	r0, #0
    4cb8:	bf18      	it	ne
    4cba:	f3af 8000 	nopne.w
    4cbe:	f001 fe3f 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    4cc2:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    4cc6:	2a20      	cmp	r2, #32
    4cc8:	d00b      	beq.n	4ce2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xce2>
    4cca:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    4cce:	1c84      	adds	r4, r0, #2
    4cd0:	f141 0c00 	adc.w	ip, r1, #0
    4cd4:	1b1b      	subs	r3, r3, r4
    4cd6:	eb72 020c 	sbcs.w	r2, r2, ip
    4cda:	d202      	bcs.n	4ce2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xce2>
    4cdc:	2000      	movs	r0, #0
    4cde:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4ce2:	2d20      	cmp	r5, #32
    4ce4:	d013      	beq.n	4d0e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0e>
    4ce6:	462b      	mov	r3, r5
    4ce8:	4642      	mov	r2, r8
    4cea:	f7ff fbaf 	bl	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    4cee:	2800      	cmp	r0, #0
    4cf0:	bf1e      	ittt	ne
    4cf2:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    4cf6:	2002      	movne	r0, #2
    4cf8:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4cfc:	463b      	mov	r3, r7
    4cfe:	462a      	mov	r2, r5
    4d00:	2120      	movs	r1, #32
    4d02:	2004      	movs	r0, #4
    4d04:	f7ff f8e0 	bl	3ec8 <MPSL_IRQ_RADIO_Handler+0x3c>
    4d08:	2000      	movs	r0, #0
    4d0a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4d0e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    4d12:	43c0      	mvns	r0, r0
    4d14:	ea70 0001 	orns	r0, r0, r1
    4d18:	d005      	beq.n	4d26 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd26>
    4d1a:	f002 fa0d 	bl	7138 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4d1e:	f04f 30ff 	mov.w	r0, #4294967295
    4d22:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    4d26:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    4d2a:	b128      	cbz	r0, 4d38 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd38>
    4d2c:	2005      	movs	r0, #5
    4d2e:	f001 fee3 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4d32:	2000      	movs	r0, #0
    4d34:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    4d38:	2004      	movs	r0, #4
    4d3a:	f001 fedd 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4d3e:	f001 ff43 	bl	6bc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    4d42:	490a      	ldr	r1, [pc, #40]	; (4d6c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd6c>)
    4d44:	2020      	movs	r0, #32
    4d46:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    4d4a:	6889      	ldr	r1, [r1, #8]
    4d4c:	2000      	movs	r0, #0
    4d4e:	6008      	str	r0, [r1, #0]
    4d50:	4907      	ldr	r1, [pc, #28]	; (4d70 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd70>)
    4d52:	6008      	str	r0, [r1, #0]
    4d54:	2001      	movs	r0, #1
    4d56:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4d5a:	0000      	.short	0x0000
    4d5c:	200009c0 	.word	0x200009c0
    4d60:	20000540 	.word	0x20000540
    4d64:	20000940 	.word	0x20000940
    4d68:	00000000 	.word	0x00000000
    4d6c:	20000120 	.word	0x20000120
    4d70:	40000508 	.word	0x40000508

00004d74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    4d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d78:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 4f40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    4d7c:	4606      	mov	r6, r0
    4d7e:	b08f      	sub	sp, #60	; 0x3c
    4d80:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    4d84:	468a      	mov	sl, r1
    4d86:	2820      	cmp	r0, #32
    4d88:	d061      	beq.n	4e4e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    4d8a:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    4d8e:	f10b 0408 	add.w	r4, fp, #8
    4d92:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    4d96:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    4d9a:	2120      	movs	r1, #32
    4d9c:	f88d 1018 	strb.w	r1, [sp, #24]
    4da0:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    4da4:	f8db 2008 	ldr.w	r2, [fp, #8]
    4da8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4dac:	4459      	add	r1, fp
    4dae:	2700      	movs	r7, #0
    4db0:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    4db4:	f8db 1010 	ldr.w	r1, [fp, #16]
    4db8:	1851      	adds	r1, r2, r1
    4dba:	910a      	str	r1, [sp, #40]	; 0x28
    4dbc:	f8db 0000 	ldr.w	r0, [fp]
    4dc0:	aa09      	add	r2, sp, #36	; 0x24
    4dc2:	4430      	add	r0, r6
    4dc4:	a907      	add	r1, sp, #28
    4dc6:	f001 fadb 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4dca:	f8d9 0010 	ldr.w	r0, [r9, #16]
    4dce:	9907      	ldr	r1, [sp, #28]
    4dd0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4dd4:	1840      	adds	r0, r0, r1
    4dd6:	1810      	adds	r0, r2, r0
    4dd8:	2e67      	cmp	r6, #103	; 0x67
    4dda:	d33d      	bcc.n	4e58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    4ddc:	4959      	ldr	r1, [pc, #356]	; (4f44 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    4dde:	2200      	movs	r2, #0
    4de0:	1b89      	subs	r1, r1, r6
    4de2:	eb72 0107 	sbcs.w	r1, r2, r7
    4de6:	d337      	bcc.n	4e58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    4de8:	6821      	ldr	r1, [r4, #0]
    4dea:	4694      	mov	ip, r2
    4dec:	1a40      	subs	r0, r0, r1
    4dee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    4df2:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    4df6:	eb7c 010c 	sbcs.w	r1, ip, ip
    4dfa:	d32d      	bcc.n	4e58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    4dfc:	60a0      	str	r0, [r4, #8]
    4dfe:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    4e02:	f884 a010 	strb.w	sl, [r4, #16]
    4e06:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    4e0a:	f10d 0b18 	add.w	fp, sp, #24
    4e0e:	2d20      	cmp	r5, #32
    4e10:	d055      	beq.n	4ebe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4e12:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    4e16:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4e1a:	9001      	str	r0, [sp, #4]
    4e1c:	484a      	ldr	r0, [pc, #296]	; (4f48 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    4e1e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    4e22:	f8d4 a000 	ldr.w	sl, [r4]
    4e26:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    4e2a:	f108 0008 	add.w	r0, r8, #8
    4e2e:	eb1a 0201 	adds.w	r2, sl, r1
    4e32:	eb43 0107 	adc.w	r1, r3, r7
    4e36:	e9d0 9300 	ldrd	r9, r3, [r0]
    4e3a:	ebb9 0202 	subs.w	r2, r9, r2
    4e3e:	eb73 0101 	sbcs.w	r1, r3, r1
    4e42:	d325      	bcc.n	4e90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    4e44:	89c0      	ldrh	r0, [r0, #14]
    4e46:	b398      	cbz	r0, 4eb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    4e48:	89e0      	ldrh	r0, [r4, #14]
    4e4a:	b148      	cbz	r0, 4e60 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    4e4c:	e037      	b.n	4ebe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4e4e:	f640 3135 	movw	r1, #2869	; 0xb35
    4e52:	2070      	movs	r0, #112	; 0x70
    4e54:	f002 fb0a 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4e58:	b00f      	add	sp, #60	; 0x3c
    4e5a:	2001      	movs	r0, #1
    4e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e60:	f002 f964 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4e64:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4e68:	bf08      	it	eq
    4e6a:	200d      	moveq	r0, #13
    4e6c:	d00b      	beq.n	4e86 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    4e6e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4e72:	3856      	subs	r0, #86	; 0x56
    4e74:	bf08      	it	eq
    4e76:	201c      	moveq	r0, #28
    4e78:	d005      	beq.n	4e86 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    4e7a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4e7e:	389f      	subs	r0, #159	; 0x9f
    4e80:	bf14      	ite	ne
    4e82:	4638      	movne	r0, r7
    4e84:	2032      	moveq	r0, #50	; 0x32
    4e86:	1c41      	adds	r1, r0, #1
    4e88:	ebb9 000a 	subs.w	r0, r9, sl
    4e8c:	4288      	cmp	r0, r1
    4e8e:	da16      	bge.n	4ebe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4e90:	f88b 5000 	strb.w	r5, [fp]
    4e94:	f898 0018 	ldrb.w	r0, [r8, #24]
    4e98:	7c21      	ldrb	r1, [r4, #16]
    4e9a:	4281      	cmp	r1, r0
    4e9c:	d309      	bcc.n	4eb2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    4e9e:	6821      	ldr	r1, [r4, #0]
    4ea0:	980a      	ldr	r0, [sp, #40]	; 0x28
    4ea2:	1a40      	subs	r0, r0, r1
    4ea4:	60a0      	str	r0, [r4, #8]
    4ea6:	b00f      	add	sp, #60	; 0x3c
    4ea8:	f04f 0002 	mov.w	r0, #2
    4eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4eb0:	e005      	b.n	4ebe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4eb2:	9801      	ldr	r0, [sp, #4]
    4eb4:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4eb8:	7845      	ldrb	r5, [r0, #1]
    4eba:	2d20      	cmp	r5, #32
    4ebc:	d1ae      	bne.n	4e1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    4ebe:	2005      	movs	r0, #5
    4ec0:	f001 fe1a 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4ec4:	4d1e      	ldr	r5, [pc, #120]	; (4f40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    4ec6:	f04f 30ff 	mov.w	r0, #4294967295
    4eca:	6068      	str	r0, [r5, #4]
    4ecc:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    4ed0:	f89d 2018 	ldrb.w	r2, [sp, #24]
    4ed4:	2120      	movs	r1, #32
    4ed6:	2a20      	cmp	r2, #32
    4ed8:	d003      	beq.n	4ee2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    4eda:	2005      	movs	r0, #5
    4edc:	f7fe fff4 	bl	3ec8 <MPSL_IRQ_RADIO_Handler+0x3c>
    4ee0:	e004      	b.n	4eec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    4ee2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    4ee6:	4428      	add	r0, r5
    4ee8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    4eec:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    4ef0:	4916      	ldr	r1, [pc, #88]	; (4f4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    4ef2:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    4ef6:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    4efa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    4efe:	7048      	strb	r0, [r1, #1]
    4f00:	6828      	ldr	r0, [r5, #0]
    4f02:	4430      	add	r0, r6
    4f04:	6028      	str	r0, [r5, #0]
    4f06:	20ff      	movs	r0, #255	; 0xff
    4f08:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    4f0c:	7e68      	ldrb	r0, [r5, #25]
    4f0e:	2801      	cmp	r0, #1
    4f10:	d10a      	bne.n	4f28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    4f12:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    4f16:	6823      	ldr	r3, [r4, #0]
    4f18:	1818      	adds	r0, r3, r0
    4f1a:	f142 0100 	adc.w	r1, r2, #0
    4f1e:	1e40      	subs	r0, r0, #1
    4f20:	f141 31ff 	adc.w	r1, r1, #4294967295
    4f24:	f001 fc0a 	bl	673c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    4f28:	f89d 0018 	ldrb.w	r0, [sp, #24]
    4f2c:	2820      	cmp	r0, #32
    4f2e:	d003      	beq.n	4f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    4f30:	4807      	ldr	r0, [pc, #28]	; (4f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    4f32:	7840      	ldrb	r0, [r0, #1]
    4f34:	f002 fb6c 	bl	7610 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4f38:	b00f      	add	sp, #60	; 0x3c
    4f3a:	2000      	movs	r0, #0
    4f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f40:	200009c0 	.word	0x200009c0
    4f44:	0f424000 	.word	0x0f424000
    4f48:	20000540 	.word	0x20000540
    4f4c:	20000940 	.word	0x20000940
    4f50:	20000120 	.word	0x20000120

00004f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    4f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f56:	4d6f      	ldr	r5, [pc, #444]	; (5114 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    4f58:	2600      	movs	r6, #0
    4f5a:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    4f5e:	2701      	movs	r7, #1
    4f60:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    4f64:	4b6c      	ldr	r3, [pc, #432]	; (5118 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    4f66:	2808      	cmp	r0, #8
    4f68:	d273      	bcs.n	5052 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    4f6a:	e8df f000 	tbb	[pc, r0]
    4f6e:	7804      	.short	0x7804
    4f70:	47ceb3a0 	.word	0x47ceb3a0
    4f74:	bdb8      	.short	0xbdb8
    4f76:	43c8      	mvns	r0, r1
    4f78:	ea70 0002 	orns	r0, r0, r2
    4f7c:	d105      	bne.n	4f8a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    4f7e:	f002 f8f7 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4f82:	f001 fcdd 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    4f86:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    4f8a:	8ae0      	ldrh	r0, [r4, #22]
    4f8c:	b110      	cbz	r0, 4f94 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    4f8e:	f002 f9f5 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4f92:	b180      	cbz	r0, 4fb6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    4f94:	f7ff fd54 	bl	4a40 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa40>
    4f98:	20ff      	movs	r0, #255	; 0xff
    4f9a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    4f9e:	6861      	ldr	r1, [r4, #4]
    4fa0:	f1b1 3fff 	cmp.w	r1, #4294967295
    4fa4:	d003      	beq.n	4fae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    4fa6:	2005      	movs	r0, #5
    4fa8:	f001 fcec 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4fac:	b140      	cbz	r0, 4fc0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    4fae:	7e60      	ldrb	r0, [r4, #25]
    4fb0:	2801      	cmp	r0, #1
    4fb2:	d114      	bne.n	4fde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    4fb4:	e009      	b.n	4fca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    4fb6:	f640 012c 	movw	r1, #2092	; 0x82c
    4fba:	2070      	movs	r0, #112	; 0x70
    4fbc:	f002 fa56 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4fc0:	f640 0131 	movw	r1, #2097	; 0x831
    4fc4:	2070      	movs	r0, #112	; 0x70
    4fc6:	f002 fa51 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4fca:	68a2      	ldr	r2, [r4, #8]
    4fcc:	6920      	ldr	r0, [r4, #16]
    4fce:	68e1      	ldr	r1, [r4, #12]
    4fd0:	1810      	adds	r0, r2, r0
    4fd2:	4171      	adcs	r1, r6
    4fd4:	1e40      	subs	r0, r0, #1
    4fd6:	f141 31ff 	adc.w	r1, r1, #4294967295
    4fda:	f001 fbaf 	bl	673c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    4fde:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    4fe2:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    4fe6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    4fea:	6840      	ldr	r0, [r0, #4]
    4fec:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    4ff0:	680a      	ldr	r2, [r1, #0]
    4ff2:	b001      	add	sp, #4
    4ff4:	2101      	movs	r1, #1
    4ff6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4ffa:	4710      	bx	r2
    4ffc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    5000:	b160      	cbz	r0, 501c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    5002:	43c8      	mvns	r0, r1
    5004:	ea70 0002 	orns	r0, r0, r2
    5008:	d105      	bne.n	5016 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    500a:	f002 f8b1 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    500e:	f001 fc97 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5012:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5016:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    501c:	f7ff fd10 	bl	4a40 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa40>
    5020:	f04f 30ff 	mov.w	r0, #4294967295
    5024:	6060      	str	r0, [r4, #4]
    5026:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    502a:	f88d 0000 	strb.w	r0, [sp]
    502e:	f89d 0000 	ldrb.w	r0, [sp]
    5032:	b178      	cbz	r0, 5054 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    5034:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5038:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    503c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5040:	6840      	ldr	r0, [r0, #4]
    5042:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5046:	680a      	ldr	r2, [r1, #0]
    5048:	b001      	add	sp, #4
    504a:	2106      	movs	r1, #6
    504c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5050:	4710      	bx	r2
    5052:	e05a      	b.n	510a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    5054:	f640 0148 	movw	r1, #2120	; 0x848
    5058:	2070      	movs	r0, #112	; 0x70
    505a:	f002 fa07 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    505e:	f7ff fcef 	bl	4a40 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa40>
    5062:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    5066:	f002 f989 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    506a:	b130      	cbz	r0, 507a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    506c:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    5070:	43c9      	mvns	r1, r1
    5072:	ea71 0000 	orns	r0, r1, r0
    5076:	d005      	beq.n	5084 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    5078:	e00a      	b.n	5090 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    507a:	f640 0156 	movw	r1, #2134	; 0x856
    507e:	2070      	movs	r0, #112	; 0x70
    5080:	f002 f9f4 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5084:	f002 f874 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5088:	f001 fc5a 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    508c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5090:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5094:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5098:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    509c:	6840      	ldr	r0, [r0, #4]
    509e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    50a2:	680a      	ldr	r2, [r1, #0]
    50a4:	b001      	add	sp, #4
    50a6:	2100      	movs	r1, #0
    50a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    50ac:	4710      	bx	r2
    50ae:	f001 fe47 	bl	6d40 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    50b2:	8ae0      	ldrh	r0, [r4, #22]
    50b4:	b110      	cbz	r0, 50bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    50b6:	f002 f961 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    50ba:	b130      	cbz	r0, 50ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    50bc:	f001 fe54 	bl	6d68 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    50c0:	2800      	cmp	r0, #0
    50c2:	bf18      	it	ne
    50c4:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    50c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50ca:	f44f 6106 	mov.w	r1, #2144	; 0x860
    50ce:	2070      	movs	r0, #112	; 0x70
    50d0:	f002 f9cc 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50d4:	4811      	ldr	r0, [pc, #68]	; (511c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    50d6:	6007      	str	r7, [r0, #0]
    50d8:	6898      	ldr	r0, [r3, #8]
    50da:	6007      	str	r7, [r0, #0]
    50dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50de:	7818      	ldrb	r0, [r3, #0]
    50e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    50e4:	f002 ba94 	b.w	7610 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    50e8:	f7ff fcaa 	bl	4a40 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa40>
    50ec:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    50f0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    50f4:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    50f8:	6840      	ldr	r0, [r0, #4]
    50fa:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    50fe:	680a      	ldr	r2, [r1, #0]
    5100:	b001      	add	sp, #4
    5102:	2105      	movs	r1, #5
    5104:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5108:	4710      	bx	r2
    510a:	f640 0173 	movw	r1, #2163	; 0x873
    510e:	2070      	movs	r0, #112	; 0x70
    5110:	f002 f9ac 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5114:	20000540 	.word	0x20000540
    5118:	20000120 	.word	0x20000120
    511c:	40000508 	.word	0x40000508

00005120 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    5120:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5124:	48f7      	ldr	r0, [pc, #988]	; (5504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    5126:	b097      	sub	sp, #92	; 0x5c
    5128:	460c      	mov	r4, r1
    512a:	6800      	ldr	r0, [r0, #0]
    512c:	4ff6      	ldr	r7, [pc, #984]	; (5508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    512e:	05c0      	lsls	r0, r0, #23
    5130:	0dc0      	lsrs	r0, r0, #23
    5132:	d00e      	beq.n	5152 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    5134:	3810      	subs	r0, #16
    5136:	b240      	sxtb	r0, r0
    5138:	2800      	cmp	r0, #0
    513a:	bfb8      	it	lt
    513c:	f000 000f 	andlt.w	r0, r0, #15
    5140:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5144:	bfac      	ite	ge
    5146:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    514a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    514e:	0940      	lsrs	r0, r0, #5
    5150:	d00c      	beq.n	516c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    5152:	7820      	ldrb	r0, [r4, #0]
    5154:	f04f 0a00 	mov.w	sl, #0
    5158:	2800      	cmp	r0, #0
    515a:	bf18      	it	ne
    515c:	2801      	cmpne	r0, #1
    515e:	d017      	beq.n	5190 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    5160:	f240 61f9 	movw	r1, #1785	; 0x6f9
    5164:	f04f 0070 	mov.w	r0, #112	; 0x70
    5168:	f002 f980 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    516c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5170:	f04f 0a01 	mov.w	sl, #1
    5174:	2820      	cmp	r0, #32
    5176:	d006      	beq.n	5186 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    5178:	7820      	ldrb	r0, [r4, #0]
    517a:	b148      	cbz	r0, 5190 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    517c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    5180:	2070      	movs	r0, #112	; 0x70
    5182:	f002 f973 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5186:	f240 61f2 	movw	r1, #1778	; 0x6f2
    518a:	2070      	movs	r0, #112	; 0x70
    518c:	f002 f96e 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5190:	f8df b378 	ldr.w	fp, [pc, #888]	; 550c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    5194:	f1bb 0f00 	cmp.w	fp, #0
    5198:	d004      	beq.n	51a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    519a:	2100      	movs	r1, #0
    519c:	f240 60fc 	movw	r0, #1788	; 0x6fc
    51a0:	f3af 8000 	nop.w
    51a4:	2000      	movs	r0, #0
    51a6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    51aa:	a905      	add	r1, sp, #20
    51ac:	9112      	str	r1, [sp, #72]	; 0x48
    51ae:	49d8      	ldr	r1, [pc, #864]	; (5510 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    51b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    51b2:	f04f 0801 	mov.w	r8, #1
    51b6:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    51ba:	9001      	str	r0, [sp, #4]
    51bc:	f1bb 0f00 	cmp.w	fp, #0
    51c0:	d004      	beq.n	51cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    51c2:	2100      	movs	r1, #0
    51c4:	f240 7007 	movw	r0, #1799	; 0x707
    51c8:	f3af 8000 	nop.w
    51cc:	f1b8 0f00 	cmp.w	r8, #0
    51d0:	d009      	beq.n	51e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    51d2:	bf00      	nop
    51d4:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    51d8:	2500      	movs	r5, #0
    51da:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    51de:	f1ba 0f00 	cmp.w	sl, #0
    51e2:	d007      	beq.n	51f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    51e4:	e03e      	b.n	5264 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    51e6:	48cb      	ldr	r0, [pc, #812]	; (5514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    51e8:	2800      	cmp	r0, #0
    51ea:	bf18      	it	ne
    51ec:	f3af 8000 	nopne.w
    51f0:	b662      	cpsie	i
    51f2:	e7ef      	b.n	51d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    51f4:	46b1      	mov	r9, r6
    51f6:	2001      	movs	r0, #1
    51f8:	ea20 0609 	bic.w	r6, r0, r9
    51fc:	48c6      	ldr	r0, [pc, #792]	; (5518 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    51fe:	2240      	movs	r2, #64	; 0x40
    5200:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    5204:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    5208:	f004 fef2 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    520c:	f1bb 0f00 	cmp.w	fp, #0
    5210:	d004      	beq.n	521c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    5212:	2100      	movs	r1, #0
    5214:	f240 503c 	movw	r0, #1340	; 0x53c
    5218:	f3af 8000 	nop.w
    521c:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    5220:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5224:	4439      	add	r1, r7
    5226:	4438      	add	r0, r7
    5228:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    522a:	8502      	strh	r2, [r0, #40]	; 0x28
    522c:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5230:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5234:	f1bb 0f00 	cmp.w	fp, #0
    5238:	d004      	beq.n	5244 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    523a:	2100      	movs	r1, #0
    523c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5240:	f3af 8000 	nop.w
    5244:	f1bb 0f00 	cmp.w	fp, #0
    5248:	d004      	beq.n	5254 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    524a:	2100      	movs	r1, #0
    524c:	f240 7011 	movw	r0, #1809	; 0x711
    5250:	f3af 8000 	nop.w
    5254:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5258:	f88d 0020 	strb.w	r0, [sp, #32]
    525c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5260:	2800      	cmp	r0, #0
    5262:	d1ab      	bne.n	51bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5264:	f1bb 0f00 	cmp.w	fp, #0
    5268:	d004      	beq.n	5274 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    526a:	2100      	movs	r1, #0
    526c:	f240 701b 	movw	r0, #1819	; 0x71b
    5270:	f3af 8000 	nop.w
    5274:	f001 fb64 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5278:	4681      	mov	r9, r0
    527a:	a802      	add	r0, sp, #8
    527c:	900a      	str	r0, [sp, #40]	; 0x28
    527e:	4688      	mov	r8, r1
    5280:	8921      	ldrh	r1, [r4, #8]
    5282:	4628      	mov	r0, r5
    5284:	f361 401f 	bfi	r0, r1, #16, #16
    5288:	4601      	mov	r1, r0
    528a:	7aa2      	ldrb	r2, [r4, #10]
    528c:	4628      	mov	r0, r5
    528e:	f362 0007 	bfi	r0, r2, #0, #8
    5292:	7ae2      	ldrb	r2, [r4, #11]
    5294:	f362 200f 	bfi	r0, r2, #8, #8
    5298:	7822      	ldrb	r2, [r4, #0]
    529a:	9502      	str	r5, [sp, #8]
    529c:	f362 4017 	bfi	r0, r2, #16, #8
    52a0:	e9cd 5104 	strd	r5, r1, [sp, #16]
    52a4:	e9cd 0506 	strd	r0, r5, [sp, #24]
    52a8:	9503      	str	r5, [sp, #12]
    52aa:	7820      	ldrb	r0, [r4, #0]
    52ac:	b380      	cbz	r0, 5310 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    52ae:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    52b2:	499a      	ldr	r1, [pc, #616]	; (551c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    52b4:	1a08      	subs	r0, r1, r0
    52b6:	990a      	ldr	r1, [sp, #40]	; 0x28
    52b8:	f101 020c 	add.w	r2, r1, #12
    52bc:	a914      	add	r1, sp, #80	; 0x50
    52be:	f001 f85f 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    52c2:	2200      	movs	r2, #0
    52c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52c8:	4648      	mov	r0, r9
    52ca:	4641      	mov	r1, r8
    52cc:	f7fe ffd0 	bl	4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>
    52d0:	468c      	mov	ip, r1
    52d2:	7ae1      	ldrb	r1, [r4, #11]
    52d4:	2900      	cmp	r1, #0
    52d6:	bf0c      	ite	eq
    52d8:	217a      	moveq	r1, #122	; 0x7a
    52da:	214a      	movne	r1, #74	; 0x4a
    52dc:	6862      	ldr	r2, [r4, #4]
    52de:	f89d 3014 	ldrb.w	r3, [sp, #20]
    52e2:	4411      	add	r1, r2
    52e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    52e8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    52ec:	441a      	add	r2, r3
    52ee:	4411      	add	r1, r2
    52f0:	1c88      	adds	r0, r1, #2
    52f2:	f001 f829 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    52f6:	9600      	str	r6, [sp, #0]
    52f8:	9004      	str	r0, [sp, #16]
    52fa:	464a      	mov	r2, r9
    52fc:	4643      	mov	r3, r8
    52fe:	6920      	ldr	r0, [r4, #16]
    5300:	990a      	ldr	r1, [sp, #40]	; 0x28
    5302:	f7fe fe1d 	bl	3f40 <MPSL_IRQ_RADIO_Handler+0xb4>
    5306:	2800      	cmp	r0, #0
    5308:	bf08      	it	eq
    530a:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    530e:	e046      	b.n	539e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    5310:	e7ff      	b.n	5312 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    5312:	4648      	mov	r0, r9
    5314:	4641      	mov	r1, r8
    5316:	f000 ffb5 	bl	6284 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    531a:	f8df c204 	ldr.w	ip, [pc, #516]	; 5520 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    531e:	4602      	mov	r2, r0
    5320:	eb10 0c0c 	adds.w	ip, r0, ip
    5324:	460b      	mov	r3, r1
    5326:	f141 0e00 	adc.w	lr, r1, #0
    532a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    532e:	ebb0 0c0c 	subs.w	ip, r0, ip
    5332:	eb71 0c0e 	sbcs.w	ip, r1, lr
    5336:	d229      	bcs.n	538c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5338:	3229      	adds	r2, #41	; 0x29
    533a:	f143 0300 	adc.w	r3, r3, #0
    533e:	1a82      	subs	r2, r0, r2
    5340:	eb71 0203 	sbcs.w	r2, r1, r3
    5344:	d322      	bcc.n	538c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5346:	8922      	ldrh	r2, [r4, #8]
    5348:	ab0a      	add	r3, sp, #40	; 0x28
    534a:	1a80      	subs	r0, r0, r2
    534c:	eb61 0105 	sbc.w	r1, r1, r5
    5350:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5352:	1e40      	subs	r0, r0, #1
    5354:	9200      	str	r2, [sp, #0]
    5356:	f141 31ff 	adc.w	r1, r1, #4294967295
    535a:	aa0d      	add	r2, sp, #52	; 0x34
    535c:	f000 ffb6 	bl	62cc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5360:	7ae0      	ldrb	r0, [r4, #11]
    5362:	2800      	cmp	r0, #0
    5364:	bf0c      	ite	eq
    5366:	207a      	moveq	r0, #122	; 0x7a
    5368:	204a      	movne	r0, #74	; 0x4a
    536a:	990d      	ldr	r1, [sp, #52]	; 0x34
    536c:	8922      	ldrh	r2, [r4, #8]
    536e:	4408      	add	r0, r1
    5370:	6861      	ldr	r1, [r4, #4]
    5372:	4411      	add	r1, r2
    5374:	4408      	add	r0, r1
    5376:	1c80      	adds	r0, r0, #2
    5378:	f000 ffe6 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    537c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    5380:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5384:	1a40      	subs	r0, r0, r1
    5386:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    538a:	e007      	b.n	539c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    538c:	f1b9 0101 	subs.w	r1, r9, #1
    5390:	f148 30ff 	adc.w	r0, r8, #4294967295
    5394:	e9cd 1002 	strd	r1, r0, [sp, #8]
    5398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    539c:	9004      	str	r0, [sp, #16]
    539e:	f1bb 0f00 	cmp.w	fp, #0
    53a2:	d004      	beq.n	53ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    53a4:	2100      	movs	r1, #0
    53a6:	f240 7022 	movw	r0, #1826	; 0x722
    53aa:	f3af 8000 	nop.w
    53ae:	495a      	ldr	r1, [pc, #360]	; (5518 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    53b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    53b4:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    53b8:	9108      	str	r1, [sp, #32]
    53ba:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    53be:	a802      	add	r0, sp, #8
    53c0:	2901      	cmp	r1, #1
    53c2:	bf18      	it	ne
    53c4:	2902      	cmpne	r1, #2
    53c6:	d141      	bne.n	544c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    53c8:	9511      	str	r5, [sp, #68]	; 0x44
    53ca:	9a02      	ldr	r2, [sp, #8]
    53cc:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    53d0:	1a53      	subs	r3, r2, r1
    53d2:	f8dd c010 	ldr.w	ip, [sp, #16]
    53d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    53da:	eb12 020c 	adds.w	r2, r2, ip
    53de:	1a51      	subs	r1, r2, r1
    53e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    53e4:	2b02      	cmp	r3, #2
    53e6:	d374      	bcc.n	54d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    53e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    53ec:	bf98      	it	ls
    53ee:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    53f2:	d86e      	bhi.n	54d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    53f4:	2501      	movs	r5, #1
    53f6:	ab14      	add	r3, sp, #80	; 0x50
    53f8:	aa0e      	add	r2, sp, #56	; 0x38
    53fa:	4631      	mov	r1, r6
    53fc:	f7fe ff88 	bl	4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>
    5400:	2800      	cmp	r0, #0
    5402:	d06d      	beq.n	54e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    5404:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5408:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    540c:	4633      	mov	r3, r6
    540e:	428a      	cmp	r2, r1
    5410:	d06a      	beq.n	54e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    5412:	2005      	movs	r0, #5
    5414:	f7fe fd58 	bl	3ec8 <MPSL_IRQ_RADIO_Handler+0x3c>
    5418:	9908      	ldr	r1, [sp, #32]
    541a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    541e:	7048      	strb	r0, [r1, #1]
    5420:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5424:	2820      	cmp	r0, #32
    5426:	bf01      	itttt	eq
    5428:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    542c:	4438      	addeq	r0, r7
    542e:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    5432:	9511      	streq	r5, [sp, #68]	; 0x44
    5434:	bf1e      	ittt	ne
    5436:	9908      	ldrne	r1, [sp, #32]
    5438:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    543c:	f880 8001 	strbne.w	r8, [r0, #1]
    5440:	4632      	mov	r2, r6
    5442:	4641      	mov	r1, r8
    5444:	f05f 0003 	movs.w	r0, #3
    5448:	f7ff fba6 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    544c:	f1bb 0f00 	cmp.w	fp, #0
    5450:	d004      	beq.n	545c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    5452:	2100      	movs	r1, #0
    5454:	f240 7027 	movw	r0, #1831	; 0x727
    5458:	f3af 8000 	nop.w
    545c:	4831      	ldr	r0, [pc, #196]	; (5524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    545e:	2800      	cmp	r0, #0
    5460:	bf18      	it	ne
    5462:	f3af 8000 	nopne.w
    5466:	f3ef 8810 	mrs	r8, PRIMASK
    546a:	b672      	cpsid	i
    546c:	f1bb 0f00 	cmp.w	fp, #0
    5470:	d004      	beq.n	547c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    5472:	2100      	movs	r1, #0
    5474:	f240 702d 	movw	r0, #1837	; 0x72d
    5478:	f3af 8000 	nop.w
    547c:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5480:	f88d 0020 	strb.w	r0, [sp, #32]
    5484:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5488:	2800      	cmp	r0, #0
    548a:	f47f ae97 	bne.w	51bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    548e:	f1bb 0f00 	cmp.w	fp, #0
    5492:	d004      	beq.n	549e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    5494:	2100      	movs	r1, #0
    5496:	f240 7035 	movw	r0, #1845	; 0x735
    549a:	f3af 8000 	nop.w
    549e:	f10d 0e04 	add.w	lr, sp, #4
    54a2:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    54a6:	f100 0e08 	add.w	lr, r0, #8
    54aa:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    54ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    54b2:	e9c0 1206 	strd	r1, r2, [r0, #24]
    54b6:	b325      	cbz	r5, 5502 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    54b8:	f1bb 0f00 	cmp.w	fp, #0
    54bc:	d004      	beq.n	54c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    54be:	2100      	movs	r1, #0
    54c0:	f240 7042 	movw	r0, #1858	; 0x742
    54c4:	f3af 8000 	nop.w
    54c8:	f1ba 0f00 	cmp.w	sl, #0
    54cc:	d146      	bne.n	555c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    54ce:	e02b      	b.n	5528 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    54d0:	e7ff      	b.n	54d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    54d2:	4632      	mov	r2, r6
    54d4:	4641      	mov	r1, r8
    54d6:	2004      	movs	r0, #4
    54d8:	f7ff fb5e 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    54dc:	2501      	movs	r5, #1
    54de:	e7b5      	b.n	544c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    54e0:	4632      	mov	r2, r6
    54e2:	4641      	mov	r1, r8
    54e4:	2004      	movs	r0, #4
    54e6:	e7af      	b.n	5448 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    54e8:	2920      	cmp	r1, #32
    54ea:	bf1d      	ittte	ne
    54ec:	9808      	ldrne	r0, [sp, #32]
    54ee:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    54f2:	7840      	ldrbne	r0, [r0, #1]
    54f4:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    54f8:	bf04      	itt	eq
    54fa:	4438      	addeq	r0, r7
    54fc:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    5500:	e78a      	b.n	5418 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    5502:	e03b      	b.n	557c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5504:	e000ed04 	.word	0xe000ed04
    5508:	200009c0 	.word	0x200009c0
    550c:	00000000 	.word	0x00000000
    5510:	20000540 	.word	0x20000540
    5514:	00000000 	.word	0x00000000
    5518:	20000940 	.word	0x20000940
    551c:	1e847fff 	.word	0x1e847fff
    5520:	0f424000 	.word	0x0f424000
    5524:	00000000 	.word	0x00000000
    5528:	9811      	ldr	r0, [sp, #68]	; 0x44
    552a:	f010 0fff 	tst.w	r0, #255	; 0xff
    552e:	d015      	beq.n	555c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5530:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5534:	2820      	cmp	r0, #32
    5536:	d111      	bne.n	555c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5538:	f1bb 0f00 	cmp.w	fp, #0
    553c:	d004      	beq.n	5548 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    553e:	2100      	movs	r1, #0
    5540:	f240 7047 	movw	r0, #1863	; 0x747
    5544:	f3af 8000 	nop.w
    5548:	4631      	mov	r1, r6
    554a:	2002      	movs	r0, #2
    554c:	f7ff fb56 	bl	4bfc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbfc>
    5550:	9010      	str	r0, [sp, #64]	; 0x40
    5552:	b918      	cbnz	r0, 555c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5554:	7820      	ldrb	r0, [r4, #0]
    5556:	b300      	cbz	r0, 559a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    5558:	2801      	cmp	r0, #1
    555a:	d02e      	beq.n	55ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    555c:	f1bb 0f00 	cmp.w	fp, #0
    5560:	d004      	beq.n	556c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    5562:	2100      	movs	r1, #0
    5564:	f240 7064 	movw	r0, #1892	; 0x764
    5568:	f3af 8000 	nop.w
    556c:	20ff      	movs	r0, #255	; 0xff
    556e:	f1ba 0f00 	cmp.w	sl, #0
    5572:	bf18      	it	ne
    5574:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    5578:	d029      	beq.n	55ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    557a:	2501      	movs	r5, #1
    557c:	f1bb 0f00 	cmp.w	fp, #0
    5580:	d004      	beq.n	558c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    5582:	2100      	movs	r1, #0
    5584:	f240 7075 	movw	r0, #1909	; 0x775
    5588:	f3af 8000 	nop.w
    558c:	9810      	ldr	r0, [sp, #64]	; 0x40
    558e:	4c34      	ldr	r4, [pc, #208]	; (5660 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    5590:	2802      	cmp	r0, #2
    5592:	d025      	beq.n	55e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    5594:	2801      	cmp	r0, #1
    5596:	d02b      	beq.n	55f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    5598:	e02f      	b.n	55fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    559a:	f1bb 0f00 	cmp.w	fp, #0
    559e:	d004      	beq.n	55aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    55a0:	2100      	movs	r1, #0
    55a2:	f240 704f 	movw	r0, #1871	; 0x74f
    55a6:	f3af 8000 	nop.w
    55aa:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    55ae:	2004      	movs	r0, #4
    55b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
    55b2:	f7ff faf1 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    55b6:	2501      	movs	r5, #1
    55b8:	e7e0      	b.n	557c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    55ba:	f1bb 0f00 	cmp.w	fp, #0
    55be:	f43f adfd 	beq.w	51bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    55c2:	2100      	movs	r1, #0
    55c4:	f240 705a 	movw	r0, #1882	; 0x75a
    55c8:	f3af 8000 	nop.w
    55cc:	e5f6      	b.n	51bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    55ce:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    55d2:	2101      	movs	r1, #1
    55d4:	4391      	bics	r1, r2
    55d6:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    55da:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    55de:	e7cc      	b.n	557a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    55e0:	68b8      	ldr	r0, [r7, #8]
    55e2:	ebb0 0009 	subs.w	r0, r0, r9
    55e6:	f004 fb73 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    55ea:	6861      	ldr	r1, [r4, #4]
    55ec:	b921      	cbnz	r1, 55f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    55ee:	e004      	b.n	55fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    55f0:	6861      	ldr	r1, [r4, #4]
    55f2:	f04f 30ff 	mov.w	r0, #4294967295
    55f6:	b101      	cbz	r1, 55fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    55f8:	4788      	blx	r1
    55fa:	f1b8 0f00 	cmp.w	r8, #0
    55fe:	d028      	beq.n	5652 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    5600:	f1bb 0f00 	cmp.w	fp, #0
    5604:	d004      	beq.n	5610 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    5606:	2100      	movs	r1, #0
    5608:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    560c:	f3af 8000 	nop.w
    5610:	b19d      	cbz	r5, 563a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5612:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    5616:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    561a:	4438      	add	r0, r7
    561c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    5620:	2820      	cmp	r0, #32
    5622:	d00a      	beq.n	563a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5624:	f1bb 0f00 	cmp.w	fp, #0
    5628:	d004      	beq.n	5634 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    562a:	2100      	movs	r1, #0
    562c:	f240 708f 	movw	r0, #1935	; 0x78f
    5630:	f3af 8000 	nop.w
    5634:	7860      	ldrb	r0, [r4, #1]
    5636:	f001 ffeb 	bl	7610 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    563a:	f1bb 0f00 	cmp.w	fp, #0
    563e:	d004      	beq.n	564a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    5640:	2100      	movs	r1, #0
    5642:	f240 7094 	movw	r0, #1940	; 0x794
    5646:	f3af 8000 	nop.w
    564a:	b019      	add	sp, #100	; 0x64
    564c:	4628      	mov	r0, r5
    564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5652:	4804      	ldr	r0, [pc, #16]	; (5664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    5654:	2800      	cmp	r0, #0
    5656:	bf18      	it	ne
    5658:	f3af 8000 	nopne.w
    565c:	b662      	cpsie	i
    565e:	e7cf      	b.n	5600 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    5660:	20000120 	.word	0x20000120
    5664:	00000000 	.word	0x00000000

00005668 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    5668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    566c:	4604      	mov	r4, r0
    566e:	7800      	ldrb	r0, [r0, #0]
    5670:	b095      	sub	sp, #84	; 0x54
    5672:	b118      	cbz	r0, 567c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    5674:	b015      	add	sp, #84	; 0x54
    5676:	2000      	movs	r0, #0
    5678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    567c:	48d1      	ldr	r0, [pc, #836]	; (59c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    567e:	6800      	ldr	r0, [r0, #0]
    5680:	05c0      	lsls	r0, r0, #23
    5682:	0dc0      	lsrs	r0, r0, #23
    5684:	d00e      	beq.n	56a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    5686:	3810      	subs	r0, #16
    5688:	b240      	sxtb	r0, r0
    568a:	2800      	cmp	r0, #0
    568c:	bfb8      	it	lt
    568e:	f000 000f 	andlt.w	r0, r0, #15
    5692:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5696:	bfac      	ite	ge
    5698:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    569c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    56a0:	0940      	lsrs	r0, r0, #5
    56a2:	d0e7      	beq.n	5674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    56a4:	a80d      	add	r0, sp, #52	; 0x34
    56a6:	f8df 9320 	ldr.w	r9, [pc, #800]	; 59c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    56aa:	9009      	str	r0, [sp, #36]	; 0x24
    56ac:	f1b9 0f00 	cmp.w	r9, #0
    56b0:	d004      	beq.n	56bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    56b2:	2100      	movs	r1, #0
    56b4:	f240 50c5 	movw	r0, #1477	; 0x5c5
    56b8:	f3af 8000 	nop.w
    56bc:	f8df 830c 	ldr.w	r8, [pc, #780]	; 59cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    56c0:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    56c4:	2500      	movs	r5, #0
    56c6:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    56ca:	9503      	str	r5, [sp, #12]
    56cc:	f1b9 0f00 	cmp.w	r9, #0
    56d0:	d004      	beq.n	56dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    56d2:	2100      	movs	r1, #0
    56d4:	f240 50ca 	movw	r0, #1482	; 0x5ca
    56d8:	f3af 8000 	nop.w
    56dc:	2001      	movs	r0, #1
    56de:	ea20 0a06 	bic.w	sl, r0, r6
    56e2:	48bb      	ldr	r0, [pc, #748]	; (59d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    56e4:	2240      	movs	r2, #64	; 0x40
    56e6:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    56ea:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    56ee:	f004 fc7f 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    56f2:	f1b9 0f00 	cmp.w	r9, #0
    56f6:	d004      	beq.n	5702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    56f8:	2100      	movs	r1, #0
    56fa:	f240 503c 	movw	r0, #1340	; 0x53c
    56fe:	f3af 8000 	nop.w
    5702:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5706:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    570a:	eb01 0208 	add.w	r2, r1, r8
    570e:	4440      	add	r0, r8
    5710:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    5712:	8501      	strh	r1, [r0, #40]	; 0x28
    5714:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    5718:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    571c:	f1b9 0f00 	cmp.w	r9, #0
    5720:	d004      	beq.n	572c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    5722:	2100      	movs	r1, #0
    5724:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5728:	f3af 8000 	nop.w
    572c:	f1b9 0f00 	cmp.w	r9, #0
    5730:	d004      	beq.n	573c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    5732:	2100      	movs	r1, #0
    5734:	f240 50cf 	movw	r0, #1487	; 0x5cf
    5738:	f3af 8000 	nop.w
    573c:	f001 f900 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5740:	460f      	mov	r7, r1
    5742:	4606      	mov	r6, r0
    5744:	8921      	ldrh	r1, [r4, #8]
    5746:	4628      	mov	r0, r5
    5748:	f361 401f 	bfi	r0, r1, #16, #16
    574c:	4601      	mov	r1, r0
    574e:	7aa2      	ldrb	r2, [r4, #10]
    5750:	4628      	mov	r0, r5
    5752:	f362 0007 	bfi	r0, r2, #0, #8
    5756:	7ae2      	ldrb	r2, [r4, #11]
    5758:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    575c:	f362 200f 	bfi	r0, r2, #8, #8
    5760:	7822      	ldrb	r2, [r4, #0]
    5762:	950a      	str	r5, [sp, #40]	; 0x28
    5764:	f362 4017 	bfi	r0, r2, #16, #8
    5768:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    576c:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    5770:	950b      	str	r5, [sp, #44]	; 0x2c
    5772:	7820      	ldrb	r0, [r4, #0]
    5774:	b388      	cbz	r0, 57da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    5776:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    577a:	4896      	ldr	r0, [pc, #600]	; (59d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    577c:	f10b 020c 	add.w	r2, fp, #12
    5780:	1a40      	subs	r0, r0, r1
    5782:	a911      	add	r1, sp, #68	; 0x44
    5784:	f000 fdfc 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5788:	2200      	movs	r2, #0
    578a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    578e:	4630      	mov	r0, r6
    5790:	4639      	mov	r1, r7
    5792:	f7fe fd6d 	bl	4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>
    5796:	4684      	mov	ip, r0
    5798:	7ae0      	ldrb	r0, [r4, #11]
    579a:	460b      	mov	r3, r1
    579c:	2800      	cmp	r0, #0
    579e:	bf0c      	ite	eq
    57a0:	207a      	moveq	r0, #122	; 0x7a
    57a2:	204a      	movne	r0, #74	; 0x4a
    57a4:	6861      	ldr	r1, [r4, #4]
    57a6:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    57aa:	4408      	add	r0, r1
    57ac:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    57b0:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    57b4:	4411      	add	r1, r2
    57b6:	4408      	add	r0, r1
    57b8:	1c80      	adds	r0, r0, #2
    57ba:	f000 fdc5 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    57be:	f8cd a000 	str.w	sl, [sp]
    57c2:	900c      	str	r0, [sp, #48]	; 0x30
    57c4:	4632      	mov	r2, r6
    57c6:	463b      	mov	r3, r7
    57c8:	4659      	mov	r1, fp
    57ca:	6920      	ldr	r0, [r4, #16]
    57cc:	f7fe fbb8 	bl	3f40 <MPSL_IRQ_RADIO_Handler+0xb4>
    57d0:	2800      	cmp	r0, #0
    57d2:	bf08      	it	eq
    57d4:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    57d8:	e045      	b.n	5866 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    57da:	e7ff      	b.n	57dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    57dc:	4630      	mov	r0, r6
    57de:	4639      	mov	r1, r7
    57e0:	f000 fd50 	bl	6284 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    57e4:	4b7c      	ldr	r3, [pc, #496]	; (59d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    57e6:	4602      	mov	r2, r0
    57e8:	eb10 0c03 	adds.w	ip, r0, r3
    57ec:	468b      	mov	fp, r1
    57ee:	f141 0300 	adc.w	r3, r1, #0
    57f2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    57f6:	ebb0 0c0c 	subs.w	ip, r0, ip
    57fa:	eb71 0303 	sbcs.w	r3, r1, r3
    57fe:	d22a      	bcs.n	5856 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    5800:	3229      	adds	r2, #41	; 0x29
    5802:	f14b 0300 	adc.w	r3, fp, #0
    5806:	1a82      	subs	r2, r0, r2
    5808:	eb71 0203 	sbcs.w	r2, r1, r3
    580c:	d323      	bcc.n	5856 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    580e:	8922      	ldrh	r2, [r4, #8]
    5810:	ab12      	add	r3, sp, #72	; 0x48
    5812:	1a80      	subs	r0, r0, r2
    5814:	eb61 0105 	sbc.w	r1, r1, r5
    5818:	9a09      	ldr	r2, [sp, #36]	; 0x24
    581a:	1e40      	subs	r0, r0, #1
    581c:	9200      	str	r2, [sp, #0]
    581e:	f141 31ff 	adc.w	r1, r1, #4294967295
    5822:	aa07      	add	r2, sp, #28
    5824:	f000 fd52 	bl	62cc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5828:	7ae0      	ldrb	r0, [r4, #11]
    582a:	2800      	cmp	r0, #0
    582c:	bf0c      	ite	eq
    582e:	207a      	moveq	r0, #122	; 0x7a
    5830:	204a      	movne	r0, #74	; 0x4a
    5832:	9907      	ldr	r1, [sp, #28]
    5834:	8922      	ldrh	r2, [r4, #8]
    5836:	4408      	add	r0, r1
    5838:	6861      	ldr	r1, [r4, #4]
    583a:	4411      	add	r1, r2
    583c:	4408      	add	r0, r1
    583e:	1c80      	adds	r0, r0, #2
    5840:	f000 fd82 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5844:	4601      	mov	r1, r0
    5846:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    584a:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    584e:	1a08      	subs	r0, r1, r0
    5850:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5854:	e006      	b.n	5864 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    5856:	1e70      	subs	r0, r6, #1
    5858:	f147 31ff 	adc.w	r1, r7, #4294967295
    585c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    5860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5864:	900c      	str	r0, [sp, #48]	; 0x30
    5866:	f1b9 0f00 	cmp.w	r9, #0
    586a:	d004      	beq.n	5876 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    586c:	2100      	movs	r1, #0
    586e:	f240 50d5 	movw	r0, #1493	; 0x5d5
    5872:	f3af 8000 	nop.w
    5876:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    587a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    587e:	1808      	adds	r0, r1, r0
    5880:	eb42 0105 	adc.w	r1, r2, r5
    5884:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    5888:	2a20      	cmp	r2, #32
    588a:	d009      	beq.n	58a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    588c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    5890:	1a12      	subs	r2, r2, r0
    5892:	eb73 0201 	sbcs.w	r2, r3, r1
    5896:	d203      	bcs.n	58a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    5898:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    589c:	2001      	movs	r0, #1
    589e:	9003      	str	r0, [sp, #12]
    58a0:	f1b9 0f00 	cmp.w	r9, #0
    58a4:	d004      	beq.n	58b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    58a6:	2100      	movs	r1, #0
    58a8:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    58ac:	f3af 8000 	nop.w
    58b0:	990a      	ldr	r1, [sp, #40]	; 0x28
    58b2:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    58b6:	1a0a      	subs	r2, r1, r0
    58b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    58ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    58be:	18c9      	adds	r1, r1, r3
    58c0:	1a08      	subs	r0, r1, r0
    58c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    58c6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    58ca:	bf98      	it	ls
    58cc:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    58d0:	d80b      	bhi.n	58ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    58d2:	4632      	mov	r2, r6
    58d4:	463b      	mov	r3, r7
    58d6:	a90a      	add	r1, sp, #40	; 0x28
    58d8:	483f      	ldr	r0, [pc, #252]	; (59d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    58da:	f8cd a000 	str.w	sl, [sp]
    58de:	f7fe fb2f 	bl	3f40 <MPSL_IRQ_RADIO_Handler+0xb4>
    58e2:	9903      	ldr	r1, [sp, #12]
    58e4:	4308      	orrs	r0, r1
    58e6:	d145      	bne.n	5974 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    58e8:	e05f      	b.n	59aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    58ea:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    58ee:	aa05      	add	r2, sp, #20
    58f0:	a903      	add	r1, sp, #12
    58f2:	4658      	mov	r0, fp
    58f4:	f000 fd44 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    58f8:	f001 fa40 	bl	6d7c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    58fc:	f000 fd24 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5900:	4682      	mov	sl, r0
    5902:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    5906:	2820      	cmp	r0, #32
    5908:	d00a      	beq.n	5920 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    590a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    590e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5912:	1d80      	adds	r0, r0, #6
    5914:	f145 0100 	adc.w	r1, r5, #0
    5918:	181e      	adds	r6, r3, r0
    591a:	eb42 0701 	adc.w	r7, r2, r1
    591e:	e024      	b.n	596a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    5920:	360a      	adds	r6, #10
    5922:	f147 0700 	adc.w	r7, r7, #0
    5926:	f1bb 0f00 	cmp.w	fp, #0
    592a:	d017      	beq.n	595c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    592c:	f001 fd26 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    5930:	b9a0      	cbnz	r0, 595c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    5932:	f001 fbfb 	bl	712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5936:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    593a:	bf08      	it	eq
    593c:	200d      	moveq	r0, #13
    593e:	d00b      	beq.n	5958 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    5940:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5944:	3856      	subs	r0, #86	; 0x56
    5946:	bf08      	it	eq
    5948:	201c      	moveq	r0, #28
    594a:	d005      	beq.n	5958 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    594c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5950:	389f      	subs	r0, #159	; 0x9f
    5952:	bf14      	ite	ne
    5954:	4628      	movne	r0, r5
    5956:	2032      	moveq	r0, #50	; 0x32
    5958:	1986      	adds	r6, r0, r6
    595a:	416f      	adcs	r7, r5
    595c:	9803      	ldr	r0, [sp, #12]
    595e:	4582      	cmp	sl, r0
    5960:	d903      	bls.n	596a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    5962:	ebaa 0000 	sub.w	r0, sl, r0
    5966:	1986      	adds	r6, r0, r6
    5968:	416f      	adcs	r7, r5
    596a:	201f      	movs	r0, #31
    596c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    5970:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    5974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    5978:	f000 fc84 	bl	6284 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    597c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    5980:	1880      	adds	r0, r0, r2
    5982:	eb41 0205 	adc.w	r2, r1, r5
    5986:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    598a:	1840      	adds	r0, r0, r1
    598c:	eb42 0105 	adc.w	r1, r2, r5
    5990:	1c40      	adds	r0, r0, #1
    5992:	f141 0100 	adc.w	r1, r1, #0
    5996:	f1b9 0f00 	cmp.w	r9, #0
    599a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    599e:	d004      	beq.n	59aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    59a0:	2100      	movs	r1, #0
    59a2:	f240 50fa 	movw	r0, #1530	; 0x5fa
    59a6:	f3af 8000 	nop.w
    59aa:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    59ae:	f88d 0000 	strb.w	r0, [sp]
    59b2:	f89d 0000 	ldrb.w	r0, [sp]
    59b6:	2800      	cmp	r0, #0
    59b8:	f47f ae78 	bne.w	56ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    59bc:	b015      	add	sp, #84	; 0x54
    59be:	2001      	movs	r0, #1
    59c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59c4:	e000ed04 	.word	0xe000ed04
    59c8:	00000000 	.word	0x00000000
    59cc:	200009c0 	.word	0x200009c0
    59d0:	20000940 	.word	0x20000940
    59d4:	1e847fff 	.word	0x1e847fff
    59d8:	0f424000 	.word	0x0f424000

000059dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    59dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59e0:	4d9d      	ldr	r5, [pc, #628]	; (5c58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    59e2:	b08c      	sub	sp, #48	; 0x30
    59e4:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    59e8:	2000      	movs	r0, #0
    59ea:	9007      	str	r0, [sp, #28]
    59ec:	9008      	str	r0, [sp, #32]
    59ee:	2001      	movs	r0, #1
    59f0:	4c9a      	ldr	r4, [pc, #616]	; (5c5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    59f2:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    59f6:	f04f 0800 	mov.w	r8, #0
    59fa:	4607      	mov	r7, r0
    59fc:	9006      	str	r0, [sp, #24]
    59fe:	b124      	cbz	r4, 5a0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    5a00:	2100      	movs	r1, #0
    5a02:	f240 70a5 	movw	r0, #1957	; 0x7a5
    5a06:	f3af 8000 	nop.w
    5a0a:	9806      	ldr	r0, [sp, #24]
    5a0c:	2800      	cmp	r0, #0
    5a0e:	d03c      	beq.n	5a8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    5a10:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    5a14:	b124      	cbz	r4, 5a20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    5a16:	2100      	movs	r1, #0
    5a18:	f240 70aa 	movw	r0, #1962	; 0x7aa
    5a1c:	f3af 8000 	nop.w
    5a20:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    5a24:	2240      	movs	r2, #64	; 0x40
    5a26:	ea27 060a 	bic.w	r6, r7, sl
    5a2a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    5a2e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    5a32:	4683      	mov	fp, r0
    5a34:	f004 fadc 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a38:	b124      	cbz	r4, 5a44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    5a3a:	2100      	movs	r1, #0
    5a3c:	f240 503c 	movw	r0, #1340	; 0x53c
    5a40:	f3af 8000 	nop.w
    5a44:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5a48:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    5a4c:	4428      	add	r0, r5
    5a4e:	4429      	add	r1, r5
    5a50:	9000      	str	r0, [sp, #0]
    5a52:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    5a54:	8502      	strh	r2, [r0, #40]	; 0x28
    5a56:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5a5a:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5a5e:	b124      	cbz	r4, 5a6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    5a60:	2100      	movs	r1, #0
    5a62:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5a66:	f3af 8000 	nop.w
    5a6a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    5a6e:	f88d 0008 	strb.w	r0, [sp, #8]
    5a72:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5a76:	b178      	cbz	r0, 5a98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    5a78:	2c00      	cmp	r4, #0
    5a7a:	bf1c      	itt	ne
    5a7c:	2100      	movne	r1, #0
    5a7e:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    5a82:	d0bc      	beq.n	59fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    5a84:	f3af 8000 	nop.w
    5a88:	e7b9      	b.n	59fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    5a8a:	4875      	ldr	r0, [pc, #468]	; (5c60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    5a8c:	2800      	cmp	r0, #0
    5a8e:	bf18      	it	ne
    5a90:	f3af 8000 	nopne.w
    5a94:	b662      	cpsie	i
    5a96:	e7bb      	b.n	5a10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    5a98:	b124      	cbz	r4, 5aa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    5a9a:	2100      	movs	r1, #0
    5a9c:	f240 70b4 	movw	r0, #1972	; 0x7b4
    5aa0:	f3af 8000 	nop.w
    5aa4:	980c      	ldr	r0, [sp, #48]	; 0x30
    5aa6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    5aaa:	2803      	cmp	r0, #3
    5aac:	d17e      	bne.n	5bac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    5aae:	9a00      	ldr	r2, [sp, #0]
    5ab0:	990c      	ldr	r1, [sp, #48]	; 0x30
    5ab2:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    5ab6:	4288      	cmp	r0, r1
    5ab8:	bf14      	ite	ne
    5aba:	f04f 0a00 	movne.w	sl, #0
    5abe:	f04f 0a01 	moveq.w	sl, #1
    5ac2:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    5ac6:	4683      	mov	fp, r0
    5ac8:	2220      	movs	r2, #32
    5aca:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    5ace:	e003      	b.n	5ad8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    5ad0:	4602      	mov	r2, r0
    5ad2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    5ad6:	7840      	ldrb	r0, [r0, #1]
    5ad8:	4288      	cmp	r0, r1
    5ada:	d002      	beq.n	5ae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    5adc:	2820      	cmp	r0, #32
    5ade:	d00a      	beq.n	5af6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    5ae0:	e7f6      	b.n	5ad0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    5ae2:	2820      	cmp	r0, #32
    5ae4:	d007      	beq.n	5af6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    5ae6:	4583      	cmp	fp, r0
    5ae8:	d107      	bne.n	5afa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    5aea:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    5aee:	7840      	ldrb	r0, [r0, #1]
    5af0:	f88c 0000 	strb.w	r0, [ip]
    5af4:	e007      	b.n	5b06 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    5af6:	4640      	mov	r0, r8
    5af8:	e00c      	b.n	5b14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    5afa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5afe:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    5b02:	7840      	ldrb	r0, [r0, #1]
    5b04:	7048      	strb	r0, [r1, #1]
    5b06:	b124      	cbz	r4, 5b12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    5b08:	2100      	movs	r1, #0
    5b0a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    5b0e:	f3af 8000 	nop.w
    5b12:	4638      	mov	r0, r7
    5b14:	46c3      	mov	fp, r8
    5b16:	ea10 0f0a 	tst.w	r0, sl
    5b1a:	bf18      	it	ne
    5b1c:	46bb      	movne	fp, r7
    5b1e:	2800      	cmp	r0, #0
    5b20:	d04e      	beq.n	5bc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    5b22:	b124      	cbz	r4, 5b2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    5b24:	2100      	movs	r1, #0
    5b26:	f240 70b9 	movw	r0, #1977	; 0x7b9
    5b2a:	f3af 8000 	nop.w
    5b2e:	4632      	mov	r2, r6
    5b30:	2001      	movs	r0, #1
    5b32:	990c      	ldr	r1, [sp, #48]	; 0x30
    5b34:	f7ff f830 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    5b38:	b124      	cbz	r4, 5b44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    5b3a:	2100      	movs	r1, #0
    5b3c:	f240 70c2 	movw	r0, #1986	; 0x7c2
    5b40:	f3af 8000 	nop.w
    5b44:	4847      	ldr	r0, [pc, #284]	; (5c64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    5b46:	2800      	cmp	r0, #0
    5b48:	bf18      	it	ne
    5b4a:	f3af 8000 	nopne.w
    5b4e:	f3ef 8010 	mrs	r0, PRIMASK
    5b52:	b672      	cpsid	i
    5b54:	9006      	str	r0, [sp, #24]
    5b56:	b124      	cbz	r4, 5b62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    5b58:	2100      	movs	r1, #0
    5b5a:	f240 70c7 	movw	r0, #1991	; 0x7c7
    5b5e:	f3af 8000 	nop.w
    5b62:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    5b66:	f88d 0008 	strb.w	r0, [sp, #8]
    5b6a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5b6e:	b138      	cbz	r0, 5b80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    5b70:	2c00      	cmp	r4, #0
    5b72:	bf1c      	itt	ne
    5b74:	2100      	movne	r1, #0
    5b76:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    5b7a:	f43f af40 	beq.w	59fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    5b7e:	e781      	b.n	5a84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    5b80:	f1bb 0f00 	cmp.w	fp, #0
    5b84:	d009      	beq.n	5b9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    5b86:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    5b8a:	2820      	cmp	r0, #32
    5b8c:	d105      	bne.n	5b9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    5b8e:	4631      	mov	r1, r6
    5b90:	2002      	movs	r0, #2
    5b92:	f7ff f833 	bl	4bfc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbfc>
    5b96:	9008      	str	r0, [sp, #32]
    5b98:	b1f8      	cbz	r0, 5bda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    5b9a:	b124      	cbz	r4, 5ba6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    5b9c:	2100      	movs	r1, #0
    5b9e:	f240 70df 	movw	r0, #2015	; 0x7df
    5ba2:	f3af 8000 	nop.w
    5ba6:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    5baa:	e000      	b.n	5bae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    5bac:	e008      	b.n	5bc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    5bae:	ea27 0000 	bic.w	r0, r7, r0
    5bb2:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    5bb6:	20ff      	movs	r0, #255	; 0xff
    5bb8:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    5bbc:	2001      	movs	r0, #1
    5bbe:	9007      	str	r0, [sp, #28]
    5bc0:	b124      	cbz	r4, 5bcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    5bc2:	2100      	movs	r1, #0
    5bc4:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    5bc8:	f3af 8000 	nop.w
    5bcc:	9808      	ldr	r0, [sp, #32]
    5bce:	4e26      	ldr	r6, [pc, #152]	; (5c68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    5bd0:	2802      	cmp	r0, #2
    5bd2:	d009      	beq.n	5be8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    5bd4:	2801      	cmp	r0, #1
    5bd6:	d027      	beq.n	5c28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    5bd8:	e02b      	b.n	5c32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5bda:	b354      	cbz	r4, 5c32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5bdc:	2100      	movs	r1, #0
    5bde:	f240 70da 	movw	r0, #2010	; 0x7da
    5be2:	f3af 8000 	nop.w
    5be6:	e7ec      	b.n	5bc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    5be8:	f000 feaa 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5bec:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    5bf0:	ebb3 0c00 	subs.w	ip, r3, r0
    5bf4:	eb72 0c01 	sbcs.w	ip, r2, r1
    5bf8:	d204      	bcs.n	5c04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    5bfa:	f240 71ee 	movw	r1, #2030	; 0x7ee
    5bfe:	2070      	movs	r0, #112	; 0x70
    5c00:	f001 fc34 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5c04:	1a18      	subs	r0, r3, r0
    5c06:	eb62 0101 	sbc.w	r1, r2, r1
    5c0a:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    5c0e:	f171 0100 	sbcs.w	r1, r1, #0
    5c12:	d304      	bcc.n	5c1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    5c14:	f240 71ef 	movw	r1, #2031	; 0x7ef
    5c18:	2070      	movs	r0, #112	; 0x70
    5c1a:	f001 fc27 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5c1e:	f004 f857 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5c22:	6871      	ldr	r1, [r6, #4]
    5c24:	b129      	cbz	r1, 5c32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5c26:	e003      	b.n	5c30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    5c28:	6871      	ldr	r1, [r6, #4]
    5c2a:	f04f 30ff 	mov.w	r0, #4294967295
    5c2e:	b101      	cbz	r1, 5c32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5c30:	4788      	blx	r1
    5c32:	9806      	ldr	r0, [sp, #24]
    5c34:	b148      	cbz	r0, 5c4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    5c36:	b124      	cbz	r4, 5c42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    5c38:	2100      	movs	r1, #0
    5c3a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5c3e:	f3af 8000 	nop.w
    5c42:	9807      	ldr	r0, [sp, #28]
    5c44:	b00d      	add	sp, #52	; 0x34
    5c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c4a:	4805      	ldr	r0, [pc, #20]	; (5c60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    5c4c:	2800      	cmp	r0, #0
    5c4e:	bf18      	it	ne
    5c50:	f3af 8000 	nopne.w
    5c54:	b662      	cpsie	i
    5c56:	e7ee      	b.n	5c36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    5c58:	200009c0 	.word	0x200009c0
	...
    5c68:	20000120 	.word	0x20000120

00005c6c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    5c6c:	b510      	push	{r4, lr}
    5c6e:	2820      	cmp	r0, #32
    5c70:	d211      	bcs.n	5c96 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    5c72:	490e      	ldr	r1, [pc, #56]	; (5cac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    5c74:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    5c78:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    5c7c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    5c80:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    5c84:	b13b      	cbz	r3, 5c96 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    5c86:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    5c8a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    5c8e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    5c92:	2a01      	cmp	r2, #1
    5c94:	d001      	beq.n	5c9a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    5c96:	2000      	movs	r0, #0
    5c98:	bd10      	pop	{r4, pc}
    5c9a:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    5c9e:	4601      	mov	r1, r0
    5ca0:	2000      	movs	r0, #0
    5ca2:	f7fe ff79 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    5ca6:	2001      	movs	r0, #1
    5ca8:	bd10      	pop	{r4, pc}
    5caa:	0000      	.short	0x0000
    5cac:	200009c0 	.word	0x200009c0

00005cb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    5cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cb4:	4e86      	ldr	r6, [pc, #536]	; (5ed0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    5cb6:	4680      	mov	r8, r0
    5cb8:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    5cbc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    5cc0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    5cc4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    5cc8:	2800      	cmp	r0, #0
    5cca:	d071      	beq.n	5db0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    5ccc:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    5cd0:	4d80      	ldr	r5, [pc, #512]	; (5ed4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    5cd2:	b125      	cbz	r5, 5cde <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    5cd4:	2100      	movs	r1, #0
    5cd6:	f640 307b 	movw	r0, #2939	; 0xb7b
    5cda:	f3af 8000 	nop.w
    5cde:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    5ce2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    5ce6:	2801      	cmp	r0, #1
    5ce8:	d018      	beq.n	5d1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    5cea:	b2c0      	uxtb	r0, r0
    5cec:	2804      	cmp	r0, #4
    5cee:	bf1c      	itt	ne
    5cf0:	2805      	cmpne	r0, #5
    5cf2:	2806      	cmpne	r0, #6
    5cf4:	d061      	beq.n	5dba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    5cf6:	b12d      	cbz	r5, 5d04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    5cf8:	f04f 0100 	mov.w	r1, #0
    5cfc:	f640 3087 	movw	r0, #2951	; 0xb87
    5d00:	f3af 8000 	nop.w
    5d04:	f004 f91a 	bl	9f3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5d08:	b125      	cbz	r5, 5d14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    5d0a:	2100      	movs	r1, #0
    5d0c:	f640 308b 	movw	r0, #2955	; 0xb8b
    5d10:	f3af 8000 	nop.w
    5d14:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    5d18:	2801      	cmp	r0, #1
    5d1a:	d1e6      	bne.n	5cea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    5d1c:	2401      	movs	r4, #1
    5d1e:	b125      	cbz	r5, 5d2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    5d20:	2100      	movs	r1, #0
    5d22:	f640 3092 	movw	r0, #2962	; 0xb92
    5d26:	f3af 8000 	nop.w
    5d2a:	2c00      	cmp	r4, #0
    5d2c:	d04b      	beq.n	5dc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    5d2e:	2000      	movs	r0, #0
    5d30:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    5d34:	b125      	cbz	r5, 5d40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    5d36:	2100      	movs	r1, #0
    5d38:	f640 3097 	movw	r0, #2967	; 0xb97
    5d3c:	f3af 8000 	nop.w
    5d40:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    5d44:	2001      	movs	r0, #1
    5d46:	ea20 090b 	bic.w	r9, r0, fp
    5d4a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    5d4e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    5d52:	2240      	movs	r2, #64	; 0x40
    5d54:	f004 f94c 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5d58:	b125      	cbz	r5, 5d64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    5d5a:	2100      	movs	r1, #0
    5d5c:	f240 503c 	movw	r0, #1340	; 0x53c
    5d60:	f3af 8000 	nop.w
    5d64:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    5d68:	eb00 0a06 	add.w	sl, r0, r6
    5d6c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    5d70:	4430      	add	r0, r6
    5d72:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    5d74:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    5d78:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    5d7c:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    5d80:	b125      	cbz	r5, 5d8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    5d82:	2100      	movs	r1, #0
    5d84:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5d88:	f3af 8000 	nop.w
    5d8c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    5d90:	f88d 0000 	strb.w	r0, [sp]
    5d94:	f89d 0000 	ldrb.w	r0, [sp]
    5d98:	b1e0      	cbz	r0, 5dd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    5d9a:	2d00      	cmp	r5, #0
    5d9c:	bf1c      	itt	ne
    5d9e:	2100      	movne	r1, #0
    5da0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    5da4:	d0bb      	beq.n	5d1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    5da6:	bf00      	nop
    5da8:	f3af 8000 	nop.w
    5dac:	e7b7      	b.n	5d1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    5dae:	e7ff      	b.n	5db0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    5db0:	f640 3172 	movw	r1, #2930	; 0xb72
    5db4:	2070      	movs	r0, #112	; 0x70
    5db6:	f001 fb59 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5dba:	464a      	mov	r2, r9
    5dbc:	4641      	mov	r1, r8
    5dbe:	2001      	movs	r0, #1
    5dc0:	f7fe feea 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    5dc4:	e7a0      	b.n	5d08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    5dc6:	4844      	ldr	r0, [pc, #272]	; (5ed8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    5dc8:	2800      	cmp	r0, #0
    5dca:	bf18      	it	ne
    5dcc:	f3af 8000 	nopne.w
    5dd0:	b662      	cpsie	i
    5dd2:	e7ac      	b.n	5d2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    5dd4:	b125      	cbz	r5, 5de0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    5dd6:	2100      	movs	r1, #0
    5dd8:	f640 30a1 	movw	r0, #2977	; 0xba1
    5ddc:	f3af 8000 	nop.w
    5de0:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    5de4:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    5de8:	4640      	mov	r0, r8
    5dea:	461c      	mov	r4, r3
    5dec:	f04f 0b20 	mov.w	fp, #32
    5df0:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    5df4:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    5df8:	e004      	b.n	5e04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    5dfa:	46a3      	mov	fp, r4
    5dfc:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    5e00:	f89c 4001 	ldrb.w	r4, [ip, #1]
    5e04:	4284      	cmp	r4, r0
    5e06:	d002      	beq.n	5e0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    5e08:	2c20      	cmp	r4, #32
    5e0a:	d02b      	beq.n	5e64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    5e0c:	e7f5      	b.n	5dfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    5e0e:	2c20      	cmp	r4, #32
    5e10:	d028      	beq.n	5e64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    5e12:	42a3      	cmp	r3, r4
    5e14:	d104      	bne.n	5e20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    5e16:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    5e1a:	7840      	ldrb	r0, [r0, #1]
    5e1c:	7008      	strb	r0, [r1, #0]
    5e1e:	e005      	b.n	5e2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    5e20:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    5e24:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    5e28:	7840      	ldrb	r0, [r0, #1]
    5e2a:	7048      	strb	r0, [r1, #1]
    5e2c:	f1ba 0f00 	cmp.w	sl, #0
    5e30:	d011      	beq.n	5e56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    5e32:	b125      	cbz	r5, 5e3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    5e34:	2100      	movs	r1, #0
    5e36:	f240 409c 	movw	r0, #1180	; 0x49c
    5e3a:	f3af 8000 	nop.w
    5e3e:	f89a 0000 	ldrb.w	r0, [sl]
    5e42:	42a0      	cmp	r0, r4
    5e44:	d107      	bne.n	5e56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    5e46:	b125      	cbz	r5, 5e52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    5e48:	2100      	movs	r1, #0
    5e4a:	f240 409f 	movw	r0, #1183	; 0x49f
    5e4e:	f3af 8000 	nop.w
    5e52:	f88a b000 	strb.w	fp, [sl]
    5e56:	b15d      	cbz	r5, 5e70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    5e58:	2100      	movs	r1, #0
    5e5a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    5e5e:	f3af 8000 	nop.w
    5e62:	e000      	b.n	5e66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    5e64:	b125      	cbz	r5, 5e70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    5e66:	2100      	movs	r1, #0
    5e68:	f640 30a5 	movw	r0, #2981	; 0xba5
    5e6c:	f3af 8000 	nop.w
    5e70:	481a      	ldr	r0, [pc, #104]	; (5edc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    5e72:	2800      	cmp	r0, #0
    5e74:	bf18      	it	ne
    5e76:	f3af 8000 	nopne.w
    5e7a:	f3ef 8410 	mrs	r4, PRIMASK
    5e7e:	b672      	cpsid	i
    5e80:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    5e84:	f88d 0000 	strb.w	r0, [sp]
    5e88:	f89d 0000 	ldrb.w	r0, [sp]
    5e8c:	b138      	cbz	r0, 5e9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    5e8e:	2d00      	cmp	r5, #0
    5e90:	bf1c      	itt	ne
    5e92:	2100      	movne	r1, #0
    5e94:	f640 30ab 	movwne	r0, #2987	; 0xbab
    5e98:	f43f af41 	beq.w	5d1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    5e9c:	e784      	b.n	5da8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    5e9e:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    5ea2:	20ff      	movs	r0, #255	; 0xff
    5ea4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    5ea8:	b154      	cbz	r4, 5ec0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    5eaa:	2d00      	cmp	r5, #0
    5eac:	bf08      	it	eq
    5eae:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eb2:	2100      	movs	r1, #0
    5eb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5eb8:	f3af 8000 	nop.w
    5ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ec0:	4805      	ldr	r0, [pc, #20]	; (5ed8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    5ec2:	2800      	cmp	r0, #0
    5ec4:	bf18      	it	ne
    5ec6:	f3af 8000 	nopne.w
    5eca:	b662      	cpsie	i
    5ecc:	e7ed      	b.n	5eaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    5ece:	0000      	.short	0x0000
    5ed0:	200009c0 	.word	0x200009c0
	...

00005ee0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    5ee0:	b570      	push	{r4, r5, r6, lr}
    5ee2:	460d      	mov	r5, r1
    5ee4:	4606      	mov	r6, r0
    5ee6:	f001 fa37 	bl	7358 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    5eea:	480d      	ldr	r0, [pc, #52]	; (5f20 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    5eec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    5ef0:	2400      	movs	r4, #0
    5ef2:	3880      	subs	r0, #128	; 0x80
    5ef4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    5ef8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    5efc:	b129      	cbz	r1, 5f0a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    5efe:	1c61      	adds	r1, r4, #1
    5f00:	b2cc      	uxtb	r4, r1
    5f02:	2c20      	cmp	r4, #32
    5f04:	d3f8      	bcc.n	5ef8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    5f06:	2020      	movs	r0, #32
    5f08:	bd70      	pop	{r4, r5, r6, pc}
    5f0a:	4806      	ldr	r0, [pc, #24]	; (5f24 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    5f0c:	4621      	mov	r1, r4
    5f0e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5f12:	e9c0 6500 	strd	r6, r5, [r0]
    5f16:	2001      	movs	r0, #1
    5f18:	f7fe fe3e 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    5f1c:	4620      	mov	r0, r4
    5f1e:	bd70      	pop	{r4, r5, r6, pc}
    5f20:	200009c0 	.word	0x200009c0
    5f24:	20000540 	.word	0x20000540

00005f28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    5f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f2c:	f000 fd08 	bl	6940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f30:	4606      	mov	r6, r0
    5f32:	460f      	mov	r7, r1
    5f34:	f000 fe48 	bl	6bc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    5f38:	4c65      	ldr	r4, [pc, #404]	; (60d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    5f3a:	6860      	ldr	r0, [r4, #4]
    5f3c:	f1b0 3fff 	cmp.w	r0, #4294967295
    5f40:	bf1c      	itt	ne
    5f42:	f04f 30ff 	movne.w	r0, #4294967295
    5f46:	6060      	strne	r0, [r4, #4]
    5f48:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    5f4c:	f8df b184 	ldr.w	fp, [pc, #388]	; 60d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    5f50:	2500      	movs	r5, #0
    5f52:	bb10      	cbnz	r0, 5f9a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    5f54:	f44f 710c 	mov.w	r1, #560	; 0x230
    5f58:	6920      	ldr	r0, [r4, #16]
    5f5a:	f001 f9e9 	bl	7330 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5f5e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    5f62:	68a1      	ldr	r1, [r4, #8]
    5f64:	1818      	adds	r0, r3, r0
    5f66:	eb45 0305 	adc.w	r3, r5, r5
    5f6a:	1809      	adds	r1, r1, r0
    5f6c:	eb42 0003 	adc.w	r0, r2, r3
    5f70:	1a71      	subs	r1, r6, r1
    5f72:	eb77 0000 	sbcs.w	r0, r7, r0
    5f76:	d310      	bcc.n	5f9a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    5f78:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5f7c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5f80:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    5f84:	6840      	ldr	r0, [r0, #4]
    5f86:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    5f8a:	680a      	ldr	r2, [r1, #0]
    5f8c:	2108      	movs	r1, #8
    5f8e:	4790      	blx	r2
    5f90:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    5f94:	2070      	movs	r0, #112	; 0x70
    5f96:	f001 fa69 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5f9a:	7e60      	ldrb	r0, [r4, #25]
    5f9c:	b180      	cbz	r0, 5fc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    5f9e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    5fa2:	f88d 0000 	strb.w	r0, [sp]
    5fa6:	f89d 0000 	ldrb.w	r0, [sp]
    5faa:	b148      	cbz	r0, 5fc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    5fac:	f000 fc3e 	bl	682c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    5fb0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    5fb4:	b150      	cbz	r0, 5fcc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    5fb6:	f240 31cd 	movw	r1, #973	; 0x3cd
    5fba:	2070      	movs	r0, #112	; 0x70
    5fbc:	f001 fa56 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5fc0:	1cf0      	adds	r0, r6, #3
    5fc2:	f147 0100 	adc.w	r1, r7, #0
    5fc6:	f000 fb0b 	bl	65e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    5fca:	e7f1      	b.n	5fb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    5fcc:	2001      	movs	r0, #1
    5fce:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    5fd2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5fd6:	2820      	cmp	r0, #32
    5fd8:	d020      	beq.n	601c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    5fda:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    5fde:	2020      	movs	r0, #32
    5fe0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    5fe4:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5fe8:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    5fec:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    5ff0:	6025      	str	r5, [r4, #0]
    5ff2:	f000 fec9 	bl	6d88 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    5ff6:	f884 0020 	strb.w	r0, [r4, #32]
    5ffa:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    5ffe:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    6002:	eb00 0a04 	add.w	sl, r0, r4
    6006:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    600a:	2820      	cmp	r0, #32
    600c:	d01c      	beq.n	6048 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    600e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    6012:	f89b 001a 	ldrb.w	r0, [fp, #26]
    6016:	2801      	cmp	r0, #1
    6018:	d005      	beq.n	6026 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    601a:	e015      	b.n	6048 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    601c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6020:	2070      	movs	r0, #112	; 0x70
    6022:	f001 fa23 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6026:	2201      	movs	r2, #1
    6028:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    602c:	4630      	mov	r0, r6
    602e:	4639      	mov	r1, r7
    6030:	f7fe f91e 	bl	4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>
    6034:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    6038:	1a12      	subs	r2, r2, r0
    603a:	eb73 0201 	sbcs.w	r2, r3, r1
    603e:	bf24      	itt	cs
    6040:	f10b 0208 	addcs.w	r2, fp, #8
    6044:	e9c2 0100 	strdcs	r0, r1, [r2]
    6048:	4641      	mov	r1, r8
    604a:	2001      	movs	r0, #1
    604c:	f7fe fdd6 	bl	4bfc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbfc>
    6050:	0007      	movs	r7, r0
    6052:	d0f9      	beq.n	6048 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6054:	4820      	ldr	r0, [pc, #128]	; (60d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    6056:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    605a:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    605e:	2802      	cmp	r0, #2
    6060:	d104      	bne.n	606c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    6062:	4642      	mov	r2, r8
    6064:	4649      	mov	r1, r9
    6066:	2006      	movs	r0, #6
    6068:	f7fe fd96 	bl	4b98 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb98>
    606c:	20ff      	movs	r0, #255	; 0xff
    606e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    6072:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    6076:	f8df 8064 	ldr.w	r8, [pc, #100]	; 60dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    607a:	2820      	cmp	r0, #32
    607c:	bf1c      	itt	ne
    607e:	f898 0001 	ldrbne.w	r0, [r8, #1]
    6082:	f001 fac5 	blne	7610 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6086:	f894 0020 	ldrb.w	r0, [r4, #32]
    608a:	b128      	cbz	r0, 6098 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    608c:	f000 fe58 	bl	6d40 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    6090:	f884 5020 	strb.w	r5, [r4, #32]
    6094:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    6098:	2f02      	cmp	r7, #2
    609a:	d00f      	beq.n	60bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    609c:	2f01      	cmp	r7, #1
    609e:	bf18      	it	ne
    60a0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60a4:	f04f 30ff 	mov.w	r0, #4294967295
    60a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    60ac:	2900      	cmp	r1, #0
    60ae:	bf08      	it	eq
    60b0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60b4:	b001      	add	sp, #4
    60b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60ba:	4708      	bx	r1
    60bc:	68a0      	ldr	r0, [r4, #8]
    60be:	1b80      	subs	r0, r0, r6
    60c0:	f003 fe06 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    60c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    60c8:	2900      	cmp	r1, #0
    60ca:	d1f3      	bne.n	60b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    60cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60d0:	200009c0 	.word	0x200009c0
    60d4:	20000540 	.word	0x20000540
    60d8:	20000940 	.word	0x20000940
    60dc:	20000120 	.word	0x20000120

000060e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    60e0:	b570      	push	{r4, r5, r6, lr}
    60e2:	4c42      	ldr	r4, [pc, #264]	; (61ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    60e4:	4605      	mov	r5, r0
    60e6:	b082      	sub	sp, #8
    60e8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    60ec:	2820      	cmp	r0, #32
    60ee:	d008      	beq.n	6102 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    60f0:	6860      	ldr	r0, [r4, #4]
    60f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    60f6:	d009      	beq.n	610c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    60f8:	f640 21b6 	movw	r1, #2742	; 0xab6
    60fc:	2070      	movs	r0, #112	; 0x70
    60fe:	f001 f9b5 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6102:	f640 21b5 	movw	r1, #2741	; 0xab5
    6106:	2070      	movs	r0, #112	; 0x70
    6108:	f001 f9b0 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    610c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6110:	4937      	ldr	r1, [pc, #220]	; (61f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    6112:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    6116:	68b0      	ldr	r0, [r6, #8]
    6118:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    611c:	f003 fdd8 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6120:	4602      	mov	r2, r0
    6122:	8af0      	ldrh	r0, [r6, #22]
    6124:	7d31      	ldrb	r1, [r6, #20]
    6126:	4b33      	ldr	r3, [pc, #204]	; (61f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    6128:	4408      	add	r0, r1
    612a:	1c40      	adds	r0, r0, #1
    612c:	1811      	adds	r1, r2, r0
    612e:	429a      	cmp	r2, r3
    6130:	d817      	bhi.n	6162 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    6132:	4a31      	ldr	r2, [pc, #196]	; (61f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    6134:	4290      	cmp	r0, r2
    6136:	dc1b      	bgt.n	6170 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    6138:	f1c2 0c00 	rsb	ip, r2, #0
    613c:	4560      	cmp	r0, ip
    613e:	db1e      	blt.n	617e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    6140:	0056      	lsls	r6, r2, #1
    6142:	428e      	cmp	r6, r1
    6144:	bfdc      	itt	le
    6146:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    614a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    614e:	dd05      	ble.n	615c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    6150:	2900      	cmp	r1, #0
    6152:	bfbc      	itt	lt
    6154:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    6158:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    615c:	1948      	adds	r0, r1, r5
    615e:	4299      	cmp	r1, r3
    6160:	d904      	bls.n	616c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    6162:	f240 517f 	movw	r1, #1407	; 0x57f
    6166:	2070      	movs	r0, #112	; 0x70
    6168:	f001 f980 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    616c:	4295      	cmp	r5, r2
    616e:	dd04      	ble.n	617a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    6170:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    6174:	2070      	movs	r0, #112	; 0x70
    6176:	f001 f979 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    617a:	4565      	cmp	r5, ip
    617c:	da04      	bge.n	6188 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    617e:	f240 5181 	movw	r1, #1409	; 0x581
    6182:	2070      	movs	r0, #112	; 0x70
    6184:	f001 f972 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6188:	4286      	cmp	r6, r0
    618a:	bfdc      	itt	le
    618c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    6190:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    6194:	dd05      	ble.n	61a2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    6196:	2800      	cmp	r0, #0
    6198:	bfbc      	itt	lt
    619a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    619e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    61a2:	aa01      	add	r2, sp, #4
    61a4:	4669      	mov	r1, sp
    61a6:	f000 f8eb 	bl	6380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    61aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    61ae:	280f      	cmp	r0, #15
    61b0:	bf8c      	ite	hi
    61b2:	2001      	movhi	r0, #1
    61b4:	2000      	movls	r0, #0
    61b6:	9900      	ldr	r1, [sp, #0]
    61b8:	4408      	add	r0, r1
    61ba:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    61be:	6061      	str	r1, [r4, #4]
    61c0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    61c4:	f88d 0000 	strb.w	r0, [sp]
    61c8:	f89d 0000 	ldrb.w	r0, [sp]
    61cc:	2800      	cmp	r0, #0
    61ce:	bf04      	itt	eq
    61d0:	b002      	addeq	sp, #8
    61d2:	bd70      	popeq	{r4, r5, r6, pc}
    61d4:	2005      	movs	r0, #5
    61d6:	f000 fbd5 	bl	6984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    61da:	2800      	cmp	r0, #0
    61dc:	bf1c      	itt	ne
    61de:	b002      	addne	sp, #8
    61e0:	bd70      	popne	{r4, r5, r6, pc}
    61e2:	f640 21bd 	movw	r1, #2749	; 0xabd
    61e6:	2070      	movs	r0, #112	; 0x70
    61e8:	f001 f940 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    61ec:	200009c0 	.word	0x200009c0
    61f0:	20000540 	.word	0x20000540
    61f4:	1e847fff 	.word	0x1e847fff
    61f8:	0f424000 	.word	0x0f424000

000061fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    61fc:	b570      	push	{r4, r5, r6, lr}
    61fe:	4c1e      	ldr	r4, [pc, #120]	; (6278 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    6200:	2120      	movs	r1, #32
    6202:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    6206:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    620a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    620e:	2000      	movs	r0, #0
    6210:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    6214:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    6218:	1e42      	subs	r2, r0, #1
    621a:	e9c4 0200 	strd	r0, r2, [r4]
    621e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6222:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    6226:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    622a:	f884 0020 	strb.w	r0, [r4, #32]
    622e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    6232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6236:	1e41      	subs	r1, r0, #1
    6238:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    623c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6240:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    6244:	2210      	movs	r2, #16
    6246:	7088      	strb	r0, [r1, #2]
    6248:	f801 0f04 	strb.w	r0, [r1, #4]!
    624c:	1e52      	subs	r2, r2, #1
    624e:	d1fa      	bne.n	6246 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    6250:	f000 fda4 	bl	6d9c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    6254:	4d09      	ldr	r5, [pc, #36]	; (627c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    6256:	2601      	movs	r6, #1
    6258:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    625c:	20ff      	movs	r0, #255	; 0xff
    625e:	7028      	strb	r0, [r5, #0]
    6260:	4807      	ldr	r0, [pc, #28]	; (6280 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    6262:	f001 f9b7 	bl	75d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6266:	7068      	strb	r0, [r5, #1]
    6268:	f001 fa22 	bl	76b0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    626c:	60a8      	str	r0, [r5, #8]
    626e:	f000 fd27 	bl	6cc0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    6272:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    6276:	bd70      	pop	{r4, r5, r6, pc}
    6278:	200009c0 	.word	0x200009c0
    627c:	20000120 	.word	0x20000120
    6280:	00004ac9 	.word	0x00004ac9

00006284 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    6284:	0e03      	lsrs	r3, r0, #24
    6286:	b430      	push	{r4, r5}
    6288:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    628c:	f8df c038 	ldr.w	ip, [pc, #56]	; 62c8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    6290:	0e09      	lsrs	r1, r1, #24
    6292:	fba3 250c 	umull	r2, r5, r3, ip
    6296:	fb01 510c 	mla	r1, r1, ip, r5
    629a:	2400      	movs	r4, #0
    629c:	fb03 1104 	mla	r1, r3, r4, r1
    62a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    62a4:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    62a8:	f643 5c09 	movw	ip, #15625	; 0x3d09
    62ac:	fb13 f30c 	smulbb	r3, r3, ip
    62b0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    62b4:	fb10 f00c 	smulbb	r0, r0, ip
    62b8:	f500 7080 	add.w	r0, r0, #256	; 0x100
    62bc:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    62c0:	1880      	adds	r0, r0, r2
    62c2:	4161      	adcs	r1, r4
    62c4:	bc30      	pop	{r4, r5}
    62c6:	4770      	bx	lr
    62c8:	1e848000 	.word	0x1e848000

000062cc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    62cc:	b570      	push	{r4, r5, r6, lr}
    62ce:	b084      	sub	sp, #16
    62d0:	4615      	mov	r5, r2
    62d2:	aa01      	add	r2, sp, #4
    62d4:	461c      	mov	r4, r3
    62d6:	9200      	str	r2, [sp, #0]
    62d8:	9e08      	ldr	r6, [sp, #32]
    62da:	ab02      	add	r3, sp, #8
    62dc:	4a17      	ldr	r2, [pc, #92]	; (633c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    62de:	f003 fe78 	bl	9fd2 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    62e2:	9801      	ldr	r0, [sp, #4]
    62e4:	f248 6237 	movw	r2, #34359	; 0x8637
    62e8:	0b41      	lsrs	r1, r0, #13
    62ea:	4351      	muls	r1, r2
    62ec:	0c09      	lsrs	r1, r1, #16
    62ee:	4a14      	ldr	r2, [pc, #80]	; (6340 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    62f0:	024b      	lsls	r3, r1, #9
    62f2:	fb01 0102 	mla	r1, r1, r2, r0
    62f6:	4813      	ldr	r0, [pc, #76]	; (6344 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    62f8:	4348      	muls	r0, r1
    62fa:	0d42      	lsrs	r2, r0, #21
    62fc:	1898      	adds	r0, r3, r2
    62fe:	f643 5309 	movw	r3, #15625	; 0x3d09
    6302:	fb12 f303 	smulbb	r3, r2, r3
    6306:	f503 7280 	add.w	r2, r3, #256	; 0x100
    630a:	f643 5c08 	movw	ip, #15624	; 0x3d08
    630e:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    6312:	4463      	add	r3, ip
    6314:	b2d2      	uxtb	r2, r2
    6316:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    631a:	bf84      	itt	hi
    631c:	2200      	movhi	r2, #0
    631e:	1c40      	addhi	r0, r0, #1
    6320:	7032      	strb	r2, [r6, #0]
    6322:	9b02      	ldr	r3, [sp, #8]
    6324:	0a19      	lsrs	r1, r3, #8
    6326:	061b      	lsls	r3, r3, #24
    6328:	1818      	adds	r0, r3, r0
    632a:	f141 0100 	adc.w	r1, r1, #0
    632e:	e9c4 0100 	strd	r0, r1, [r4]
    6332:	9801      	ldr	r0, [sp, #4]
    6334:	6028      	str	r0, [r5, #0]
    6336:	b004      	add	sp, #16
    6338:	bd70      	pop	{r4, r5, r6, pc}
    633a:	0000      	.short	0x0000
    633c:	1e848000 	.word	0x1e848000
    6340:	ffffc2f7 	.word	0xffffc2f7
    6344:	00010c6f 	.word	0x00010c6f

00006348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    6348:	0b41      	lsrs	r1, r0, #13
    634a:	f248 6237 	movw	r2, #34359	; 0x8637
    634e:	4351      	muls	r1, r2
    6350:	0c0a      	lsrs	r2, r1, #16
    6352:	4b09      	ldr	r3, [pc, #36]	; (6378 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    6354:	0251      	lsls	r1, r2, #9
    6356:	fb02 0203 	mla	r2, r2, r3, r0
    635a:	4808      	ldr	r0, [pc, #32]	; (637c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    635c:	4350      	muls	r0, r2
    635e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    6362:	306e      	adds	r0, #110	; 0x6e
    6364:	0d40      	lsrs	r0, r0, #21
    6366:	425b      	negs	r3, r3
    6368:	fb10 f303 	smulbb	r3, r0, r3
    636c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    6370:	bf88      	it	hi
    6372:	1c49      	addhi	r1, r1, #1
    6374:	4408      	add	r0, r1
    6376:	4770      	bx	lr
    6378:	ffffc2f7 	.word	0xffffc2f7
    637c:	00010c6f 	.word	0x00010c6f

00006380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    6380:	0b43      	lsrs	r3, r0, #13
    6382:	f248 6c37 	movw	ip, #34359	; 0x8637
    6386:	fb03 f30c 	mul.w	r3, r3, ip
    638a:	b430      	push	{r4, r5}
    638c:	0c1b      	lsrs	r3, r3, #16
    638e:	f8df c044 	ldr.w	ip, [pc, #68]	; 63d4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    6392:	025c      	lsls	r4, r3, #9
    6394:	fb03 030c 	mla	r3, r3, ip, r0
    6398:	480f      	ldr	r0, [pc, #60]	; (63d8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    639a:	4358      	muls	r0, r3
    639c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    63a0:	eb04 000c 	add.w	r0, r4, ip
    63a4:	f643 5409 	movw	r4, #15625	; 0x3d09
    63a8:	fb1c f404 	smulbb	r4, ip, r4
    63ac:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    63b0:	f643 5508 	movw	r5, #15624	; 0x3d08
    63b4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    63b8:	442c      	add	r4, r5
    63ba:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    63be:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    63c2:	bf84      	itt	hi
    63c4:	f04f 0c00 	movhi.w	ip, #0
    63c8:	1c40      	addhi	r0, r0, #1
    63ca:	6008      	str	r0, [r1, #0]
    63cc:	f882 c000 	strb.w	ip, [r2]
    63d0:	bc30      	pop	{r4, r5}
    63d2:	4770      	bx	lr
    63d4:	ffffc2f7 	.word	0xffffc2f7
    63d8:	00010c6f 	.word	0x00010c6f

000063dc <MPSL_IRQ_RTC0_Handler>:
    63dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63e0:	2400      	movs	r4, #0
    63e2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6464 <MPSL_IRQ_RTC0_Handler+0x88>
    63e6:	4d20      	ldr	r5, [pc, #128]	; (6468 <MPSL_IRQ_RTC0_Handler+0x8c>)
    63e8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    63ec:	f44f 78a0 	mov.w	r8, #320	; 0x140
    63f0:	ea4f 0604 	mov.w	r6, r4
    63f4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    63f8:	fa07 f004 	lsl.w	r0, r7, r4
    63fc:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    6400:	4202      	tst	r2, r0
    6402:	d01a      	beq.n	643a <MPSL_IRQ_RTC0_Handler+0x5e>
    6404:	4a18      	ldr	r2, [pc, #96]	; (6468 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6406:	5852      	ldr	r2, [r2, r1]
    6408:	b1ba      	cbz	r2, 643a <MPSL_IRQ_RTC0_Handler+0x5e>
    640a:	506e      	str	r6, [r5, r1]
    640c:	00a1      	lsls	r1, r4, #2
    640e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6412:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    6416:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    641a:	f8d9 2000 	ldr.w	r2, [r9]
    641e:	1a89      	subs	r1, r1, r2
    6420:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6424:	2902      	cmp	r1, #2
    6426:	d302      	bcc.n	642e <MPSL_IRQ_RTC0_Handler+0x52>
    6428:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    642c:	d905      	bls.n	643a <MPSL_IRQ_RTC0_Handler+0x5e>
    642e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6432:	1d20      	adds	r0, r4, #4
    6434:	b2c0      	uxtb	r0, r0
    6436:	f7fe fd8d 	bl	4f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    643a:	1c60      	adds	r0, r4, #1
    643c:	b2c4      	uxtb	r4, r0
    643e:	2c03      	cmp	r4, #3
    6440:	d3d8      	bcc.n	63f4 <MPSL_IRQ_RTC0_Handler+0x18>
    6442:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    6446:	b128      	cbz	r0, 6454 <MPSL_IRQ_RTC0_Handler+0x78>
    6448:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    644c:	4807      	ldr	r0, [pc, #28]	; (646c <MPSL_IRQ_RTC0_Handler+0x90>)
    644e:	6881      	ldr	r1, [r0, #8]
    6450:	1c49      	adds	r1, r1, #1
    6452:	6081      	str	r1, [r0, #8]
    6454:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6458:	f44f 6000 	mov.w	r0, #2048	; 0x800
    645c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    6460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6464:	4000b504 	.word	0x4000b504
    6468:	4000b000 	.word	0x4000b000
    646c:	20000028 	.word	0x20000028

00006470 <MPSL_IRQ_TIMER0_Handler>:
    6470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6474:	4d38      	ldr	r5, [pc, #224]	; (6558 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    6476:	7828      	ldrb	r0, [r5, #0]
    6478:	2804      	cmp	r0, #4
    647a:	d068      	beq.n	654e <MPSL_IRQ_TIMER0_Handler+0xde>
    647c:	1ca8      	adds	r0, r5, #2
    647e:	2201      	movs	r2, #1
    6480:	7801      	ldrb	r1, [r0, #0]
    6482:	b159      	cbz	r1, 649c <MPSL_IRQ_TIMER0_Handler+0x2c>
    6484:	2901      	cmp	r1, #1
    6486:	bf08      	it	eq
    6488:	706a      	strbeq	r2, [r5, #1]
    648a:	d002      	beq.n	6492 <MPSL_IRQ_TIMER0_Handler+0x22>
    648c:	7869      	ldrb	r1, [r5, #1]
    648e:	2900      	cmp	r1, #0
    6490:	d058      	beq.n	6544 <MPSL_IRQ_TIMER0_Handler+0xd4>
    6492:	2102      	movs	r1, #2
    6494:	7001      	strb	r1, [r0, #0]
    6496:	7840      	ldrb	r0, [r0, #1]
    6498:	f000 fb2e 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    649c:	4c2f      	ldr	r4, [pc, #188]	; (655c <MPSL_IRQ_TIMER0_Handler+0xec>)
    649e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    64a2:	f04f 0800 	mov.w	r8, #0
    64a6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    64aa:	f44f 7780 	mov.w	r7, #256	; 0x100
    64ae:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    64b2:	d00a      	beq.n	64ca <MPSL_IRQ_TIMER0_Handler+0x5a>
    64b4:	482a      	ldr	r0, [pc, #168]	; (6560 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    64b6:	6800      	ldr	r0, [r0, #0]
    64b8:	b138      	cbz	r0, 64ca <MPSL_IRQ_TIMER0_Handler+0x5a>
    64ba:	2003      	movs	r0, #3
    64bc:	f000 fb1c 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    64c0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    64c4:	2003      	movs	r0, #3
    64c6:	f7fe fd45 	bl	4f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    64ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    64ce:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    64d2:	d00a      	beq.n	64ea <MPSL_IRQ_TIMER0_Handler+0x7a>
    64d4:	4823      	ldr	r0, [pc, #140]	; (6564 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    64d6:	6800      	ldr	r0, [r0, #0]
    64d8:	b138      	cbz	r0, 64ea <MPSL_IRQ_TIMER0_Handler+0x7a>
    64da:	2002      	movs	r0, #2
    64dc:	f000 fb0c 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    64e0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    64e4:	2002      	movs	r0, #2
    64e6:	f7fe fd35 	bl	4f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    64ea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    64ee:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    64f2:	d00a      	beq.n	650a <MPSL_IRQ_TIMER0_Handler+0x9a>
    64f4:	481c      	ldr	r0, [pc, #112]	; (6568 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    64f6:	6800      	ldr	r0, [r0, #0]
    64f8:	b138      	cbz	r0, 650a <MPSL_IRQ_TIMER0_Handler+0x9a>
    64fa:	2001      	movs	r0, #1
    64fc:	f000 fafc 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6500:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6504:	2001      	movs	r0, #1
    6506:	f7fe fd25 	bl	4f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    650a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    650e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6512:	bf08      	it	eq
    6514:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6518:	4814      	ldr	r0, [pc, #80]	; (656c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    651a:	6800      	ldr	r0, [r0, #0]
    651c:	2800      	cmp	r0, #0
    651e:	bf08      	it	eq
    6520:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6524:	2000      	movs	r0, #0
    6526:	f000 fae7 	bl	6af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    652a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    652e:	2004      	movs	r0, #4
    6530:	7028      	strb	r0, [r5, #0]
    6532:	f8c5 8004 	str.w	r8, [r5, #4]
    6536:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    653a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    653e:	2000      	movs	r0, #0
    6540:	f7fe bd08 	b.w	4f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6544:	f240 5169 	movw	r1, #1385	; 0x569
    6548:	206c      	movs	r0, #108	; 0x6c
    654a:	f000 ff8f 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    654e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6552:	2007      	movs	r0, #7
    6554:	f7fe bcfe 	b.w	4f54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6558:	20000028 	.word	0x20000028
    655c:	40008000 	.word	0x40008000
    6560:	4000814c 	.word	0x4000814c
    6564:	40008148 	.word	0x40008148
    6568:	40008144 	.word	0x40008144
    656c:	40008140 	.word	0x40008140
    6570:	2201      	movs	r2, #1
    6572:	0211      	lsls	r1, r2, #8
    6574:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6578:	2000      	movs	r0, #0
    657a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    657e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    6582:	f3bf 8f4f 	dsb	sy
    6586:	f3bf 8f6f 	isb	sy
    658a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    658e:	490e      	ldr	r1, [pc, #56]	; (65c8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    6590:	f841 2f04 	str.w	r2, [r1, #4]!
    6594:	1e43      	subs	r3, r0, #1
    6596:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    659a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    659e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    65a2:	4b0a      	ldr	r3, [pc, #40]	; (65cc <MPSL_IRQ_TIMER0_Handler+0x15c>)
    65a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    65a8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    65ac:	1d1b      	adds	r3, r3, #4
    65ae:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    65b2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    65b6:	1d1b      	adds	r3, r3, #4
    65b8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    65bc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    65c0:	60ca      	str	r2, [r1, #12]
    65c2:	4903      	ldr	r1, [pc, #12]	; (65d0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    65c4:	7048      	strb	r0, [r1, #1]
    65c6:	4770      	bx	lr
    65c8:	40008000 	.word	0x40008000
    65cc:	40008004 	.word	0x40008004
    65d0:	20000028 	.word	0x20000028

000065d4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    65d4:	4801      	ldr	r0, [pc, #4]	; (65dc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    65d6:	6800      	ldr	r0, [r0, #0]
    65d8:	4770      	bx	lr
    65da:	0000      	.short	0x0000
    65dc:	4000b504 	.word	0x4000b504

000065e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    65e0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    65e4:	f8df 8130 	ldr.w	r8, [pc, #304]	; 6718 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    65e8:	4604      	mov	r4, r0
    65ea:	f1a8 0702 	sub.w	r7, r8, #2
    65ee:	460e      	mov	r6, r1
    65f0:	f898 c000 	ldrb.w	ip, [r8]
    65f4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    65f8:	f1bc 0f01 	cmp.w	ip, #1
    65fc:	d106      	bne.n	660c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    65fe:	ea81 0204 	eor.w	r2, r1, r4
    6602:	4070      	eors	r0, r6
    6604:	4310      	orrs	r0, r2
    6606:	bf08      	it	eq
    6608:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    660c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6610:	4a42      	ldr	r2, [pc, #264]	; (671c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    6612:	6010      	str	r0, [r2, #0]
    6614:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    6618:	f1bc 0f00 	cmp.w	ip, #0
    661c:	bf07      	ittee	eq
    661e:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    6622:	2200      	moveq	r2, #0
    6624:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    6628:	2201      	movne	r2, #1
    662a:	483d      	ldr	r0, [pc, #244]	; (6720 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    662c:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    6630:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    6634:	2500      	movs	r5, #0
    6636:	f44f 79a0 	mov.w	r9, #320	; 0x140
    663a:	2a02      	cmp	r2, #2
    663c:	d207      	bcs.n	664e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    663e:	bf00      	nop
    6640:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    6644:	50c5      	str	r5, [r0, r3]
    6646:	1c52      	adds	r2, r2, #1
    6648:	b2d2      	uxtb	r2, r2
    664a:	2a02      	cmp	r2, #2
    664c:	d3f8      	bcc.n	6640 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    664e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    6652:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    6656:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    665a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    665e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    6662:	4a30      	ldr	r2, [pc, #192]	; (6724 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    6664:	f8d2 9000 	ldr.w	r9, [r2]
    6668:	eba3 0909 	sub.w	r9, r3, r9
    666c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    6670:	f04f 0901 	mov.w	r9, #1
    6674:	f1ba 0f02 	cmp.w	sl, #2
    6678:	d32e      	bcc.n	66d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    667a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    667e:	d82b      	bhi.n	66d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6680:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    6684:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    6688:	f1bc 0f00 	cmp.w	ip, #0
    668c:	d005      	beq.n	669a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    668e:	6810      	ldr	r0, [r2, #0]
    6690:	1a08      	subs	r0, r1, r0
    6692:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6696:	2802      	cmp	r0, #2
    6698:	d3f9      	bcc.n	668e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    669a:	f8c7 9004 	str.w	r9, [r7, #4]
    669e:	703d      	strb	r5, [r7, #0]
    66a0:	f7ff ff66 	bl	6570 <MPSL_IRQ_TIMER0_Handler+0x100>
    66a4:	4820      	ldr	r0, [pc, #128]	; (6728 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    66a6:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    66aa:	f365 0101 	bfi	r1, r5, #0, #2
    66ae:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    66b2:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    66b6:	2102      	movs	r1, #2
    66b8:	f361 0201 	bfi	r2, r1, #0, #2
    66bc:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    66c0:	2110      	movs	r1, #16
    66c2:	fa91 f1a1 	rbit	r1, r1
    66c6:	fab1 f181 	clz	r1, r1
    66ca:	2909      	cmp	r1, #9
    66cc:	d909      	bls.n	66e2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    66ce:	f240 3155 	movw	r1, #853	; 0x355
    66d2:	a016      	add	r0, pc, #88	; (adr r0, 672c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    66d4:	f000 fe9e 	bl	7414 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    66d8:	f240 31b2 	movw	r1, #946	; 0x3b2
    66dc:	206c      	movs	r0, #108	; 0x6c
    66de:	f000 fec5 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    66e2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    66e6:	f8c0 900c 	str.w	r9, [r0, #12]
    66ea:	6879      	ldr	r1, [r7, #4]
    66ec:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    66f0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    66f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    66f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    66fc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6700:	490d      	ldr	r1, [pc, #52]	; (6738 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    6702:	0480      	lsls	r0, r0, #18
    6704:	6008      	str	r0, [r1, #0]
    6706:	e9c7 4604 	strd	r4, r6, [r7, #16]
    670a:	2004      	movs	r0, #4
    670c:	f888 0001 	strb.w	r0, [r8, #1]
    6710:	f888 9000 	strb.w	r9, [r8]
    6714:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6718:	2000002a 	.word	0x2000002a
    671c:	4001f508 	.word	0x4001f508
    6720:	4000b000 	.word	0x4000b000
    6724:	4000b504 	.word	0x4000b504
    6728:	40008000 	.word	0x40008000
    672c:	5f66726e 	.word	0x5f66726e
    6730:	656d6974 	.word	0x656d6974
    6734:	00682e72 	.word	0x00682e72
    6738:	4001f504 	.word	0x4001f504

0000673c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6740:	4c31      	ldr	r4, [pc, #196]	; (6808 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    6742:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6746:	ea82 0c00 	eor.w	ip, r2, r0
    674a:	404b      	eors	r3, r1
    674c:	ea5c 0303 	orrs.w	r3, ip, r3
    6750:	bf14      	ite	ne
    6752:	2301      	movne	r3, #1
    6754:	2300      	moveq	r3, #0
    6756:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 680c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    675a:	f89c 8000 	ldrb.w	r8, [ip]
    675e:	f1b8 0f02 	cmp.w	r8, #2
    6762:	d002      	beq.n	676a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    6764:	2b00      	cmp	r3, #0
    6766:	d03f      	beq.n	67e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    6768:	e003      	b.n	6772 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    676a:	2b00      	cmp	r3, #0
    676c:	bf08      	it	eq
    676e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6772:	7863      	ldrb	r3, [r4, #1]
    6774:	b3bb      	cbz	r3, 67e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    6776:	4d26      	ldr	r5, [pc, #152]	; (6810 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    6778:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    677c:	602b      	str	r3, [r5, #0]
    677e:	4e25      	ldr	r6, [pc, #148]	; (6814 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    6780:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    6784:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6788:	462f      	mov	r7, r5
    678a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    678e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    6792:	2500      	movs	r5, #0
    6794:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    6798:	4d1f      	ldr	r5, [pc, #124]	; (6818 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    679a:	f8d5 9000 	ldr.w	r9, [r5]
    679e:	eba3 0909 	sub.w	r9, r3, r9
    67a2:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    67a6:	f1b9 0f02 	cmp.w	r9, #2
    67aa:	d327      	bcc.n	67fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    67ac:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    67b0:	d824      	bhi.n	67fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    67b2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    67b6:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    67ba:	f1b8 0f00 	cmp.w	r8, #0
    67be:	d005      	beq.n	67cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    67c0:	682b      	ldr	r3, [r5, #0]
    67c2:	1ad3      	subs	r3, r2, r3
    67c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    67c8:	2b02      	cmp	r3, #2
    67ca:	d3f9      	bcc.n	67c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    67cc:	4d13      	ldr	r5, [pc, #76]	; (681c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    67ce:	2202      	movs	r2, #2
    67d0:	0753      	lsls	r3, r2, #29
    67d2:	602b      	str	r3, [r5, #0]
    67d4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    67d8:	2004      	movs	r0, #4
    67da:	f88c 0001 	strb.w	r0, [ip, #1]
    67de:	f88c 2000 	strb.w	r2, [ip]
    67e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67e6:	e004      	b.n	67f2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    67e8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    67ec:	206c      	movs	r0, #108	; 0x6c
    67ee:	f000 fe3d 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67f2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    67f6:	206c      	movs	r0, #108	; 0x6c
    67f8:	f000 fe38 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67fc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6800:	206c      	movs	r0, #108	; 0x6c
    6802:	f000 fe33 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6806:	0000      	.short	0x0000
    6808:	20000028 	.word	0x20000028
    680c:	2000002a 	.word	0x2000002a
    6810:	4001f508 	.word	0x4001f508
    6814:	4000b000 	.word	0x4000b000
    6818:	4000b504 	.word	0x4000b504
    681c:	4001f504 	.word	0x4001f504

00006820 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    6820:	4901      	ldr	r1, [pc, #4]	; (6828 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    6822:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    6826:	4770      	bx	lr
    6828:	20000028 	.word	0x20000028

0000682c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6830:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 6928 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    6834:	f89c 4000 	ldrb.w	r4, [ip]
    6838:	2c00      	cmp	r4, #0
    683a:	bf07      	ittee	eq
    683c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    6840:	2100      	moveq	r1, #0
    6842:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    6846:	2101      	movne	r1, #1
    6848:	4838      	ldr	r0, [pc, #224]	; (692c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    684a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    684e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    6852:	2300      	movs	r3, #0
    6854:	2902      	cmp	r1, #2
    6856:	bf38      	it	cc
    6858:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    685c:	d207      	bcs.n	686e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    685e:	bf00      	nop
    6860:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    6864:	5083      	str	r3, [r0, r2]
    6866:	1c49      	adds	r1, r1, #1
    6868:	b2c9      	uxtb	r1, r1
    686a:	2902      	cmp	r1, #2
    686c:	d3f8      	bcc.n	6860 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    686e:	2c02      	cmp	r4, #2
    6870:	d004      	beq.n	687c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    6872:	f240 31db 	movw	r1, #987	; 0x3db
    6876:	206c      	movs	r0, #108	; 0x6c
    6878:	f000 fdf8 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    687c:	f3ef 8210 	mrs	r2, PRIMASK
    6880:	b672      	cpsid	i
    6882:	4c2b      	ldr	r4, [pc, #172]	; (6930 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    6884:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    6888:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    688c:	b12d      	cbz	r5, 689a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    688e:	68a1      	ldr	r1, [r4, #8]
    6890:	1c49      	adds	r1, r1, #1
    6892:	60a1      	str	r1, [r4, #8]
    6894:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6898:	e7f4      	b.n	6884 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    689a:	68a0      	ldr	r0, [r4, #8]
    689c:	b902      	cbnz	r2, 68a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    689e:	b662      	cpsie	i
    68a0:	0a02      	lsrs	r2, r0, #8
    68a2:	0600      	lsls	r0, r0, #24
    68a4:	1840      	adds	r0, r0, r1
    68a6:	eb42 0103 	adc.w	r1, r2, r3
    68aa:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    68ae:	1cc0      	adds	r0, r0, #3
    68b0:	f141 0100 	adc.w	r1, r1, #0
    68b4:	4f1f      	ldr	r7, [pc, #124]	; (6934 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    68b6:	2601      	movs	r6, #1
    68b8:	4d1f      	ldr	r5, [pc, #124]	; (6938 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    68ba:	ea80 0902 	eor.w	r9, r0, r2
    68be:	ea81 0808 	eor.w	r8, r1, r8
    68c2:	ea59 0808 	orrs.w	r8, r9, r8
    68c6:	d00e      	beq.n	68e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    68c8:	f8d7 8000 	ldr.w	r8, [r7]
    68cc:	eba2 0808 	sub.w	r8, r2, r8
    68d0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    68d4:	f1b8 0f04 	cmp.w	r8, #4
    68d8:	d305      	bcc.n	68e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    68da:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    68de:	d802      	bhi.n	68e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    68e0:	f7ff fe7e 	bl	65e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    68e4:	e01b      	b.n	691e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    68e6:	6838      	ldr	r0, [r7, #0]
    68e8:	1a10      	subs	r0, r2, r0
    68ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    68ee:	2802      	cmp	r0, #2
    68f0:	d313      	bcc.n	691a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    68f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    68f6:	d810      	bhi.n	691a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    68f8:	4910      	ldr	r1, [pc, #64]	; (693c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    68fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    68fe:	6008      	str	r0, [r1, #0]
    6900:	6066      	str	r6, [r4, #4]
    6902:	7023      	strb	r3, [r4, #0]
    6904:	606e      	str	r6, [r5, #4]
    6906:	60ee      	str	r6, [r5, #12]
    6908:	0040      	lsls	r0, r0, #1
    690a:	1f09      	subs	r1, r1, #4
    690c:	6008      	str	r0, [r1, #0]
    690e:	2004      	movs	r0, #4
    6910:	f88c 0001 	strb.w	r0, [ip, #1]
    6914:	f88c 6000 	strb.w	r6, [ip]
    6918:	e001      	b.n	691e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    691a:	6066      	str	r6, [r4, #4]
    691c:	7023      	strb	r3, [r4, #0]
    691e:	6860      	ldr	r0, [r4, #4]
    6920:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    6924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6928:	2000002a 	.word	0x2000002a
    692c:	4000b000 	.word	0x4000b000
    6930:	20000028 	.word	0x20000028
    6934:	4000b504 	.word	0x4000b504
    6938:	40008000 	.word	0x40008000
    693c:	4001f508 	.word	0x4001f508

00006940 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    6940:	b410      	push	{r4}
    6942:	f3ef 8410 	mrs	r4, PRIMASK
    6946:	b672      	cpsid	i
    6948:	4a0c      	ldr	r2, [pc, #48]	; (697c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    694a:	490d      	ldr	r1, [pc, #52]	; (6980 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    694c:	f04f 0c00 	mov.w	ip, #0
    6950:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    6954:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    6958:	b12b      	cbz	r3, 6966 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    695a:	6888      	ldr	r0, [r1, #8]
    695c:	1c40      	adds	r0, r0, #1
    695e:	6088      	str	r0, [r1, #8]
    6960:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    6964:	e7f4      	b.n	6950 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    6966:	6889      	ldr	r1, [r1, #8]
    6968:	b904      	cbnz	r4, 696c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    696a:	b662      	cpsie	i
    696c:	0a0a      	lsrs	r2, r1, #8
    696e:	0609      	lsls	r1, r1, #24
    6970:	1808      	adds	r0, r1, r0
    6972:	bc10      	pop	{r4}
    6974:	eb42 010c 	adc.w	r1, r2, ip
    6978:	4770      	bx	lr
    697a:	0000      	.short	0x0000
    697c:	4000b000 	.word	0x4000b000
    6980:	20000028 	.word	0x20000028

00006984 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    6984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6988:	4a56      	ldr	r2, [pc, #344]	; (6ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    698a:	2501      	movs	r5, #1
    698c:	2400      	movs	r4, #0
    698e:	f892 c000 	ldrb.w	ip, [r2]
    6992:	7852      	ldrb	r2, [r2, #1]
    6994:	f44f 76a0 	mov.w	r6, #320	; 0x140
    6998:	2807      	cmp	r0, #7
    699a:	d27d      	bcs.n	6a98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    699c:	e8df f000 	tbb	[pc, r0]
    69a0:	04040404 	.word	0x04040404
    69a4:	00606060 	.word	0x00606060
    69a8:	4b4f      	ldr	r3, [pc, #316]	; (6ae8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    69aa:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    69ae:	43ff      	mvns	r7, r7
    69b0:	ea77 0708 	orns	r7, r7, r8
    69b4:	bf04      	itt	eq
    69b6:	785b      	ldrbeq	r3, [r3, #1]
    69b8:	2b00      	cmpeq	r3, #0
    69ba:	d003      	beq.n	69c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    69bc:	f1bc 0f02 	cmp.w	ip, #2
    69c0:	d005      	beq.n	69ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    69c2:	e026      	b.n	6a12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    69c4:	f44f 6186 	mov.w	r1, #1072	; 0x430
    69c8:	206c      	movs	r0, #108	; 0x6c
    69ca:	f000 fd4f 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69ce:	1f13      	subs	r3, r2, #4
    69d0:	b2db      	uxtb	r3, r3
    69d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    69d6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    69da:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    69de:	2300      	movs	r3, #0
    69e0:	f1bc 0f01 	cmp.w	ip, #1
    69e4:	d003      	beq.n	69ee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    69e6:	f1bc 0f02 	cmp.w	ip, #2
    69ea:	d008      	beq.n	69fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    69ec:	e00e      	b.n	6a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    69ee:	2a04      	cmp	r2, #4
    69f0:	bf24      	itt	cs
    69f2:	6837      	ldrcs	r7, [r6, #0]
    69f4:	2f00      	cmpcs	r7, #0
    69f6:	bf08      	it	eq
    69f8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    69fc:	e006      	b.n	6a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    69fe:	2a04      	cmp	r2, #4
    6a00:	bf24      	itt	cs
    6a02:	6837      	ldrcs	r7, [r6, #0]
    6a04:	2f00      	cmpcs	r7, #0
    6a06:	bf08      	it	eq
    6a08:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    6a0c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    6a10:	d1e5      	bne.n	69de <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    6a12:	4b36      	ldr	r3, [pc, #216]	; (6aec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    6a14:	f100 0210 	add.w	r2, r0, #16
    6a18:	fa05 f202 	lsl.w	r2, r5, r2
    6a1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    6a20:	f04f 0c40 	mov.w	ip, #64	; 0x40
    6a24:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    6a28:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6a2c:	449c      	add	ip, r3
    6a2e:	f8cc 5000 	str.w	r5, [ip]
    6a32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a36:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    6a3a:	eba1 0c0c 	sub.w	ip, r1, ip
    6a3e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    6a42:	f1bc 0f03 	cmp.w	ip, #3
    6a46:	bf3e      	ittt	cc
    6a48:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    6a4c:	2000      	movcc	r0, #0
    6a4e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a52:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    6a56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    6a5a:	2001      	movs	r0, #1
    6a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a60:	f1bc 0f00 	cmp.w	ip, #0
    6a64:	d006      	beq.n	6a74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    6a66:	4282      	cmp	r2, r0
    6a68:	d104      	bne.n	6a74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    6a6a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    6a6e:	206c      	movs	r0, #108	; 0x6c
    6a70:	f000 fcfc 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a74:	1f00      	subs	r0, r0, #4
    6a76:	b2c2      	uxtb	r2, r0
    6a78:	2a03      	cmp	r2, #3
    6a7a:	d304      	bcc.n	6a86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    6a7c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    6a80:	206c      	movs	r0, #108	; 0x6c
    6a82:	f000 fcf3 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a86:	4b1a      	ldr	r3, [pc, #104]	; (6af0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    6a88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    6a8c:	4090      	lsls	r0, r2
    6a8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    6a92:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    6a96:	e000      	b.n	6a9a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    6a98:	e01f      	b.n	6ada <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    6a9a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    6a9e:	f843 400c 	str.w	r4, [r3, ip]
    6aa2:	f8df c050 	ldr.w	ip, [pc, #80]	; 6af4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    6aa6:	f8dc c000 	ldr.w	ip, [ip]
    6aaa:	eba1 0c0c 	sub.w	ip, r1, ip
    6aae:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    6ab2:	f1bc 0f02 	cmp.w	ip, #2
    6ab6:	d30d      	bcc.n	6ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    6ab8:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    6abc:	d80a      	bhi.n	6ad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    6abe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6ac2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    6ac6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    6aca:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    6ace:	4628      	mov	r0, r5
    6ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ad4:	4620      	mov	r0, r4
    6ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ada:	f240 4154 	movw	r1, #1108	; 0x454
    6ade:	206c      	movs	r0, #108	; 0x6c
    6ae0:	f000 fcc4 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6ae4:	2000002a 	.word	0x2000002a
    6ae8:	20000028 	.word	0x20000028
    6aec:	40008000 	.word	0x40008000
    6af0:	4000b000 	.word	0x4000b000
    6af4:	4000b504 	.word	0x4000b504

00006af8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    6af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6afa:	2101      	movs	r1, #1
    6afc:	2600      	movs	r6, #0
    6afe:	f44f 77a0 	mov.w	r7, #320	; 0x140
    6b02:	2807      	cmp	r0, #7
    6b04:	d24a      	bcs.n	6b9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    6b06:	e8df f000 	tbb	[pc, r0]
    6b0a:	0404      	.short	0x0404
    6b0c:	18180404 	.word	0x18180404
    6b10:	0018      	.short	0x0018
    6b12:	f100 0210 	add.w	r2, r0, #16
    6b16:	fa01 f202 	lsl.w	r2, r1, r2
    6b1a:	4923      	ldr	r1, [pc, #140]	; (6ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    6b1c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    6b20:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    6b24:	2200      	movs	r2, #0
    6b26:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    6b2a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    6b2e:	508e      	str	r6, [r1, r2]
    6b30:	491e      	ldr	r1, [pc, #120]	; (6bac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    6b32:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    6b36:	9000      	str	r0, [sp, #0]
    6b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b3a:	4d1d      	ldr	r5, [pc, #116]	; (6bb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    6b3c:	1f01      	subs	r1, r0, #4
    6b3e:	b2cc      	uxtb	r4, r1
    6b40:	7829      	ldrb	r1, [r5, #0]
    6b42:	b181      	cbz	r1, 6b66 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    6b44:	786a      	ldrb	r2, [r5, #1]
    6b46:	4282      	cmp	r2, r0
    6b48:	d10d      	bne.n	6b66 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    6b4a:	4a1a      	ldr	r2, [pc, #104]	; (6bb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    6b4c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6b50:	6010      	str	r0, [r2, #0]
    6b52:	2901      	cmp	r1, #1
    6b54:	bf08      	it	eq
    6b56:	f7ff fd0b 	bleq	6570 <MPSL_IRQ_TIMER0_Handler+0x100>
    6b5a:	702e      	strb	r6, [r5, #0]
    6b5c:	4a16      	ldr	r2, [pc, #88]	; (6bb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    6b5e:	f04f 30ff 	mov.w	r0, #4294967295
    6b62:	e9c2 0004 	strd	r0, r0, [r2, #16]
    6b66:	4915      	ldr	r1, [pc, #84]	; (6bbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    6b68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    6b6c:	40a0      	lsls	r0, r4
    6b6e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    6b72:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    6b76:	00a0      	lsls	r0, r4, #2
    6b78:	4408      	add	r0, r1
    6b7a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    6b7e:	4a10      	ldr	r2, [pc, #64]	; (6bc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    6b80:	6812      	ldr	r2, [r2, #0]
    6b82:	1a80      	subs	r0, r0, r2
    6b84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b88:	2802      	cmp	r0, #2
    6b8a:	bf24      	itt	cs
    6b8c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    6b90:	500e      	strcs	r6, [r1, r0]
    6b92:	480c      	ldr	r0, [pc, #48]	; (6bc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    6b94:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    6b98:	9000      	str	r0, [sp, #0]
    6b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b9c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6ba0:	206c      	movs	r0, #108	; 0x6c
    6ba2:	f000 fc63 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6ba6:	0000      	.short	0x0000
    6ba8:	40008000 	.word	0x40008000
    6bac:	40008140 	.word	0x40008140
    6bb0:	2000002a 	.word	0x2000002a
    6bb4:	4001f508 	.word	0x4001f508
    6bb8:	20000028 	.word	0x20000028
    6bbc:	4000b000 	.word	0x4000b000
    6bc0:	4000b504 	.word	0x4000b504
    6bc4:	4000b140 	.word	0x4000b140

00006bc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    6bc8:	481a      	ldr	r0, [pc, #104]	; (6c34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    6bca:	7800      	ldrb	r0, [r0, #0]
    6bcc:	2800      	cmp	r0, #0
    6bce:	bf07      	ittee	eq
    6bd0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    6bd4:	2100      	moveq	r1, #0
    6bd6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    6bda:	2101      	movne	r1, #1
    6bdc:	4a16      	ldr	r2, [pc, #88]	; (6c38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    6bde:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    6be2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    6be6:	2000      	movs	r0, #0
    6be8:	2902      	cmp	r1, #2
    6bea:	bf38      	it	cc
    6bec:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    6bf0:	d207      	bcs.n	6c02 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    6bf2:	bf00      	nop
    6bf4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    6bf8:	50d0      	str	r0, [r2, r3]
    6bfa:	1c49      	adds	r1, r1, #1
    6bfc:	b2c9      	uxtb	r1, r1
    6bfe:	2902      	cmp	r1, #2
    6c00:	d3f8      	bcc.n	6bf4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    6c02:	490e      	ldr	r1, [pc, #56]	; (6c3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    6c04:	f04f 32ff 	mov.w	r2, #4294967295
    6c08:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    6c0c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    6c10:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    6c14:	1d0a      	adds	r2, r1, #4
    6c16:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    6c1a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    6c1e:	1d12      	adds	r2, r2, #4
    6c20:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    6c24:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    6c28:	1d12      	adds	r2, r2, #4
    6c2a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    6c2e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    6c32:	4770      	bx	lr
    6c34:	2000002a 	.word	0x2000002a
    6c38:	4000b000 	.word	0x4000b000
    6c3c:	40008000 	.word	0x40008000

00006c40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    6c40:	b570      	push	{r4, r5, r6, lr}
    6c42:	f3ef 8110 	mrs	r1, PRIMASK
    6c46:	b672      	cpsid	i
    6c48:	2400      	movs	r4, #0
    6c4a:	4b0d      	ldr	r3, [pc, #52]	; (6c80 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    6c4c:	4a0d      	ldr	r2, [pc, #52]	; (6c84 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    6c4e:	bf00      	nop
    6c50:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    6c54:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    6c58:	f1bc 0f00 	cmp.w	ip, #0
    6c5c:	d005      	beq.n	6c6a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    6c5e:	6890      	ldr	r0, [r2, #8]
    6c60:	1c40      	adds	r0, r0, #1
    6c62:	6090      	str	r0, [r2, #8]
    6c64:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    6c68:	e7f2      	b.n	6c50 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    6c6a:	6895      	ldr	r5, [r2, #8]
    6c6c:	b901      	cbnz	r1, 6c70 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    6c6e:	b662      	cpsie	i
    6c70:	f003 f82e 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6c74:	4a04      	ldr	r2, [pc, #16]	; (6c88 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    6c76:	4621      	mov	r1, r4
    6c78:	fbe5 0102 	umlal	r0, r1, r5, r2
    6c7c:	bd70      	pop	{r4, r5, r6, pc}
    6c7e:	0000      	.short	0x0000
    6c80:	4000b000 	.word	0x4000b000
    6c84:	20000028 	.word	0x20000028
    6c88:	1e848000 	.word	0x1e848000

00006c8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    6c8c:	b510      	push	{r4, lr}
    6c8e:	2807      	cmp	r0, #7
    6c90:	d20d      	bcs.n	6cae <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    6c92:	e8df f000 	tbb	[pc, r0]
    6c96:	0404      	.short	0x0404
    6c98:	06060404 	.word	0x06060404
    6c9c:	0006      	.short	0x0006
    6c9e:	4906      	ldr	r1, [pc, #24]	; (6cb8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    6ca0:	e002      	b.n	6ca8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    6ca2:	1f00      	subs	r0, r0, #4
    6ca4:	4905      	ldr	r1, [pc, #20]	; (6cbc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    6ca6:	b2c0      	uxtb	r0, r0
    6ca8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    6cac:	bd10      	pop	{r4, pc}
    6cae:	f240 417b 	movw	r1, #1147	; 0x47b
    6cb2:	206c      	movs	r0, #108	; 0x6c
    6cb4:	f000 fbda 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6cb8:	40008140 	.word	0x40008140
    6cbc:	4000b140 	.word	0x4000b140

00006cc0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    6cc0:	b570      	push	{r4, r5, r6, lr}
    6cc2:	481b      	ldr	r0, [pc, #108]	; (6d30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    6cc4:	2400      	movs	r4, #0
    6cc6:	2104      	movs	r1, #4
    6cc8:	7004      	strb	r4, [r0, #0]
    6cca:	1e80      	subs	r0, r0, #2
    6ccc:	7001      	strb	r1, [r0, #0]
    6cce:	1f49      	subs	r1, r1, #5
    6cd0:	e9c0 1104 	strd	r1, r1, [r0, #16]
    6cd4:	6084      	str	r4, [r0, #8]
    6cd6:	f7ff fc4b 	bl	6570 <MPSL_IRQ_TIMER0_Handler+0x100>
    6cda:	2501      	movs	r5, #1
    6cdc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    6ce0:	02eb      	lsls	r3, r5, #11
    6ce2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    6ce6:	f3bf 8f4f 	dsb	sy
    6cea:	f3bf 8f6f 	isb	sy
    6cee:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    6cf2:	4a10      	ldr	r2, [pc, #64]	; (6d34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    6cf4:	6055      	str	r5, [r2, #4]
    6cf6:	6095      	str	r5, [r2, #8]
    6cf8:	480f      	ldr	r0, [pc, #60]	; (6d38 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    6cfa:	6801      	ldr	r1, [r0, #0]
    6cfc:	2900      	cmp	r1, #0
    6cfe:	d1fc      	bne.n	6cfa <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    6d00:	480e      	ldr	r0, [pc, #56]	; (6d3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    6d02:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    6d06:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    6d0a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    6d0e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    6d12:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    6d16:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    6d1a:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    6d1e:	6015      	str	r5, [r2, #0]
    6d20:	f44f 7082 	mov.w	r0, #260	; 0x104
    6d24:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    6d28:	2002      	movs	r0, #2
    6d2a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    6d2e:	bd70      	pop	{r4, r5, r6, pc}
    6d30:	2000002a 	.word	0x2000002a
    6d34:	4000b000 	.word	0x4000b000
    6d38:	4000b504 	.word	0x4000b504
    6d3c:	00070002 	.word	0x00070002

00006d40 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    6d40:	4808      	ldr	r0, [pc, #32]	; (6d64 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    6d42:	f990 0000 	ldrsb.w	r0, [r0]
    6d46:	2800      	cmp	r0, #0
    6d48:	bfb8      	it	lt
    6d4a:	4770      	bxlt	lr
    6d4c:	f000 011f 	and.w	r1, r0, #31
    6d50:	2201      	movs	r2, #1
    6d52:	fa02 f101 	lsl.w	r1, r2, r1
    6d56:	0940      	lsrs	r0, r0, #5
    6d58:	0080      	lsls	r0, r0, #2
    6d5a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    6d5e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6d62:	4770      	bx	lr
    6d64:	20000198 	.word	0x20000198

00006d68 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    6d68:	4803      	ldr	r0, [pc, #12]	; (6d78 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    6d6a:	7800      	ldrb	r0, [r0, #0]
    6d6c:	2803      	cmp	r0, #3
    6d6e:	bf0c      	ite	eq
    6d70:	2001      	moveq	r0, #1
    6d72:	2000      	movne	r0, #0
    6d74:	4770      	bx	lr
    6d76:	0000      	.short	0x0000
    6d78:	20000170 	.word	0x20000170

00006d7c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    6d7c:	4801      	ldr	r0, [pc, #4]	; (6d84 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    6d7e:	8840      	ldrh	r0, [r0, #2]
    6d80:	4770      	bx	lr
    6d82:	0000      	.short	0x0000
    6d84:	20000170 	.word	0x20000170

00006d88 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    6d88:	4803      	ldr	r0, [pc, #12]	; (6d98 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    6d8a:	7800      	ldrb	r0, [r0, #0]
    6d8c:	2802      	cmp	r0, #2
    6d8e:	bf16      	itet	ne
    6d90:	2803      	cmpne	r0, #3
    6d92:	2001      	moveq	r0, #1
    6d94:	2000      	movne	r0, #0
    6d96:	4770      	bx	lr
    6d98:	20000170 	.word	0x20000170

00006d9c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    6d9c:	4802      	ldr	r0, [pc, #8]	; (6da8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    6d9e:	2100      	movs	r1, #0
    6da0:	7001      	strb	r1, [r0, #0]
    6da2:	8041      	strh	r1, [r0, #2]
    6da4:	4770      	bx	lr
    6da6:	0000      	.short	0x0000
    6da8:	20000170 	.word	0x20000170

00006dac <MPSL_IRQ_CLOCK_Handler>:
    6dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6db0:	4c16      	ldr	r4, [pc, #88]	; (6e0c <MPSL_IRQ_CLOCK_Handler+0x60>)
    6db2:	7a60      	ldrb	r0, [r4, #9]
    6db4:	2800      	cmp	r0, #0
    6db6:	d027      	beq.n	6e08 <MPSL_IRQ_CLOCK_Handler+0x5c>
    6db8:	f44f 7180 	mov.w	r1, #256	; 0x100
    6dbc:	058d      	lsls	r5, r1, #22
    6dbe:	4628      	mov	r0, r5
    6dc0:	f002 ffb1 	bl	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6dc4:	4680      	mov	r8, r0
    6dc6:	f44f 7182 	mov.w	r1, #260	; 0x104
    6dca:	4628      	mov	r0, r5
    6dcc:	f002 ffab 	bl	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6dd0:	2600      	movs	r6, #0
    6dd2:	4607      	mov	r7, r0
    6dd4:	f1b8 0f00 	cmp.w	r8, #0
    6dd8:	d009      	beq.n	6dee <MPSL_IRQ_CLOCK_Handler+0x42>
    6dda:	2001      	movs	r0, #1
    6ddc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6de0:	7920      	ldrb	r0, [r4, #4]
    6de2:	b120      	cbz	r0, 6dee <MPSL_IRQ_CLOCK_Handler+0x42>
    6de4:	7126      	strb	r6, [r4, #4]
    6de6:	69e0      	ldr	r0, [r4, #28]
    6de8:	b108      	cbz	r0, 6dee <MPSL_IRQ_CLOCK_Handler+0x42>
    6dea:	4780      	blx	r0
    6dec:	61e6      	str	r6, [r4, #28]
    6dee:	b137      	cbz	r7, 6dfe <MPSL_IRQ_CLOCK_Handler+0x52>
    6df0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6df4:	2002      	movs	r0, #2
    6df6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6dfa:	f000 fa57 	bl	72ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    6dfe:	4640      	mov	r0, r8
    6e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e04:	f000 b858 	b.w	6eb8 <MPSL_IRQ_CLOCK_Handler+0x10c>
    6e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e0c:	2000012c 	.word	0x2000012c
    6e10:	b510      	push	{r4, lr}
    6e12:	f003 f832 	bl	9e7a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    6e16:	b930      	cbnz	r0, 6e26 <MPSL_IRQ_CLOCK_Handler+0x7a>
    6e18:	f003 f850 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    6e1c:	b918      	cbnz	r0, 6e26 <MPSL_IRQ_CLOCK_Handler+0x7a>
    6e1e:	f003 f883 	bl	9f28 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    6e22:	2800      	cmp	r0, #0
    6e24:	d002      	beq.n	6e2c <MPSL_IRQ_CLOCK_Handler+0x80>
    6e26:	4902      	ldr	r1, [pc, #8]	; (6e30 <MPSL_IRQ_CLOCK_Handler+0x84>)
    6e28:	2002      	movs	r0, #2
    6e2a:	6008      	str	r0, [r1, #0]
    6e2c:	bd10      	pop	{r4, pc}
    6e2e:	0000      	.short	0x0000
    6e30:	40000c34 	.word	0x40000c34
    6e34:	b570      	push	{r4, r5, r6, lr}
    6e36:	f000 f99b 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    6e3a:	f000 fa9f 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6e3e:	4c09      	ldr	r4, [pc, #36]	; (6e64 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    6e40:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6e44:	b130      	cbz	r0, 6e54 <MPSL_IRQ_CLOCK_Handler+0xa8>
    6e46:	f7ff ffe3 	bl	6e10 <MPSL_IRQ_CLOCK_Handler+0x64>
    6e4a:	2001      	movs	r0, #1
    6e4c:	6128      	str	r0, [r5, #16]
    6e4e:	2004      	movs	r0, #4
    6e50:	72a0      	strb	r0, [r4, #10]
    6e52:	e004      	b.n	6e5e <MPSL_IRQ_CLOCK_Handler+0xb2>
    6e54:	2003      	movs	r0, #3
    6e56:	72a0      	strb	r0, [r4, #10]
    6e58:	2001      	movs	r0, #1
    6e5a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    6e5e:	2000      	movs	r0, #0
    6e60:	71e0      	strb	r0, [r4, #7]
    6e62:	bd70      	pop	{r4, r5, r6, pc}
    6e64:	2000012c 	.word	0x2000012c
    6e68:	b570      	push	{r4, r5, r6, lr}
    6e6a:	4c12      	ldr	r4, [pc, #72]	; (6eb4 <MPSL_IRQ_CLOCK_Handler+0x108>)
    6e6c:	79a0      	ldrb	r0, [r4, #6]
    6e6e:	b1e0      	cbz	r0, 6eaa <MPSL_IRQ_CLOCK_Handler+0xfe>
    6e70:	79e1      	ldrb	r1, [r4, #7]
    6e72:	1e40      	subs	r0, r0, #1
    6e74:	4281      	cmp	r1, r0
    6e76:	da18      	bge.n	6eaa <MPSL_IRQ_CLOCK_Handler+0xfe>
    6e78:	f000 fa80 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6e7c:	4605      	mov	r5, r0
    6e7e:	f000 fb69 	bl	7554 <mpsl_temperature_get>
    6e82:	79a1      	ldrb	r1, [r4, #6]
    6e84:	2901      	cmp	r1, #1
    6e86:	d902      	bls.n	6e8e <MPSL_IRQ_CLOCK_Handler+0xe2>
    6e88:	79e1      	ldrb	r1, [r4, #7]
    6e8a:	1c49      	adds	r1, r1, #1
    6e8c:	71e1      	strb	r1, [r4, #7]
    6e8e:	b10d      	cbz	r5, 6e94 <MPSL_IRQ_CLOCK_Handler+0xe8>
    6e90:	6961      	ldr	r1, [r4, #20]
    6e92:	e000      	b.n	6e96 <MPSL_IRQ_CLOCK_Handler+0xea>
    6e94:	6921      	ldr	r1, [r4, #16]
    6e96:	1a41      	subs	r1, r0, r1
    6e98:	2902      	cmp	r1, #2
    6e9a:	da02      	bge.n	6ea2 <MPSL_IRQ_CLOCK_Handler+0xf6>
    6e9c:	f111 0f02 	cmn.w	r1, #2
    6ea0:	dc07      	bgt.n	6eb2 <MPSL_IRQ_CLOCK_Handler+0x106>
    6ea2:	b10d      	cbz	r5, 6ea8 <MPSL_IRQ_CLOCK_Handler+0xfc>
    6ea4:	6160      	str	r0, [r4, #20]
    6ea6:	e000      	b.n	6eaa <MPSL_IRQ_CLOCK_Handler+0xfe>
    6ea8:	6120      	str	r0, [r4, #16]
    6eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6eae:	f7ff bfc1 	b.w	6e34 <MPSL_IRQ_CLOCK_Handler+0x88>
    6eb2:	bd70      	pop	{r4, r5, r6, pc}
    6eb4:	2000012c 	.word	0x2000012c
    6eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ebc:	4606      	mov	r6, r0
    6ebe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6ec2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    6ec6:	4628      	mov	r0, r5
    6ec8:	f002 ff2d 	bl	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6ecc:	4680      	mov	r8, r0
    6ece:	f44f 7188 	mov.w	r1, #272	; 0x110
    6ed2:	4628      	mov	r0, r5
    6ed4:	f002 ff27 	bl	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6ed8:	4c27      	ldr	r4, [pc, #156]	; (6f78 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    6eda:	4682      	mov	sl, r0
    6edc:	7827      	ldrb	r7, [r4, #0]
    6ede:	f104 0008 	add.w	r0, r4, #8
    6ee2:	f002 ff94 	bl	9e0e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    6ee6:	b110      	cbz	r0, 6eee <MPSL_IRQ_CLOCK_Handler+0x142>
    6ee8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    6eec:	e016      	b.n	6f1c <MPSL_IRQ_CLOCK_Handler+0x170>
    6eee:	f04f 0901 	mov.w	r9, #1
    6ef2:	b146      	cbz	r6, 6f06 <MPSL_IRQ_CLOCK_Handler+0x15a>
    6ef4:	7aa0      	ldrb	r0, [r4, #10]
    6ef6:	2803      	cmp	r0, #3
    6ef8:	d105      	bne.n	6f06 <MPSL_IRQ_CLOCK_Handler+0x15a>
    6efa:	2004      	movs	r0, #4
    6efc:	72a0      	strb	r0, [r4, #10]
    6efe:	f7ff ff87 	bl	6e10 <MPSL_IRQ_CLOCK_Handler+0x64>
    6f02:	f8c5 9010 	str.w	r9, [r5, #16]
    6f06:	2600      	movs	r6, #0
    6f08:	f1b8 0f00 	cmp.w	r8, #0
    6f0c:	d018      	beq.n	6f40 <MPSL_IRQ_CLOCK_Handler+0x194>
    6f0e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    6f12:	7aa0      	ldrb	r0, [r4, #10]
    6f14:	2804      	cmp	r0, #4
    6f16:	d004      	beq.n	6f22 <MPSL_IRQ_CLOCK_Handler+0x176>
    6f18:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    6f1c:	206d      	movs	r0, #109	; 0x6d
    6f1e:	f000 faa5 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6f22:	f002 ffaa 	bl	9e7a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    6f26:	b928      	cbnz	r0, 6f34 <MPSL_IRQ_CLOCK_Handler+0x188>
    6f28:	f002 ffc8 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    6f2c:	b910      	cbnz	r0, 6f34 <MPSL_IRQ_CLOCK_Handler+0x188>
    6f2e:	f002 fffb 	bl	9f28 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    6f32:	b108      	cbz	r0, 6f38 <MPSL_IRQ_CLOCK_Handler+0x18c>
    6f34:	4811      	ldr	r0, [pc, #68]	; (6f7c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    6f36:	6006      	str	r6, [r0, #0]
    6f38:	2002      	movs	r0, #2
    6f3a:	72a0      	strb	r0, [r4, #10]
    6f3c:	f000 f8fc 	bl	7138 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    6f40:	f1ba 0f00 	cmp.w	sl, #0
    6f44:	d008      	beq.n	6f58 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    6f46:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    6f4a:	7aa0      	ldrb	r0, [r4, #10]
    6f4c:	2802      	cmp	r0, #2
    6f4e:	d101      	bne.n	6f54 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    6f50:	f7ff ff8a 	bl	6e68 <MPSL_IRQ_CLOCK_Handler+0xbc>
    6f54:	f8c5 9014 	str.w	r9, [r5, #20]
    6f58:	b13f      	cbz	r7, 6f6a <MPSL_IRQ_CLOCK_Handler+0x1be>
    6f5a:	7026      	strb	r6, [r4, #0]
    6f5c:	7aa0      	ldrb	r0, [r4, #10]
    6f5e:	2802      	cmp	r0, #2
    6f60:	d101      	bne.n	6f66 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    6f62:	f7ff ff67 	bl	6e34 <MPSL_IRQ_CLOCK_Handler+0x88>
    6f66:	f000 f8e7 	bl	7138 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    6f6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f6e:	4802      	ldr	r0, [pc, #8]	; (6f78 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    6f70:	3008      	adds	r0, #8
    6f72:	f002 bf63 	b.w	9e3c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    6f76:	0000      	.short	0x0000
    6f78:	2000012c 	.word	0x2000012c
    6f7c:	40000c34 	.word	0x40000c34
    6f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f84:	4c49      	ldr	r4, [pc, #292]	; (70ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    6f86:	2700      	movs	r7, #0
    6f88:	4606      	mov	r6, r0
    6f8a:	61a7      	str	r7, [r4, #24]
    6f8c:	7842      	ldrb	r2, [r0, #1]
    6f8e:	7881      	ldrb	r1, [r0, #2]
    6f90:	7800      	ldrb	r0, [r0, #0]
    6f92:	72e0      	strb	r0, [r4, #11]
    6f94:	7162      	strb	r2, [r4, #5]
    6f96:	71a1      	strb	r1, [r4, #6]
    6f98:	71e7      	strb	r7, [r4, #7]
    6f9a:	f04f 0801 	mov.w	r8, #1
    6f9e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6fa2:	2805      	cmp	r0, #5
    6fa4:	d225      	bcs.n	6ff2 <MPSL_IRQ_CLOCK_Handler+0x246>
    6fa6:	e8df f000 	tbb	[pc, r0]
    6faa:	0310      	.short	0x0310
    6fac:	00222006 	.word	0x00222006
    6fb0:	f8c4 8018 	str.w	r8, [r4, #24]
    6fb4:	e009      	b.n	6fca <MPSL_IRQ_CLOCK_Handler+0x21e>
    6fb6:	f000 f8db 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    6fba:	2101      	movs	r1, #1
    6fbc:	4628      	mov	r0, r5
    6fbe:	f002 feb7 	bl	9d30 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d0f9      	beq.n	6fba <MPSL_IRQ_CLOCK_Handler+0x20e>
    6fc6:	2002      	movs	r0, #2
    6fc8:	61a0      	str	r0, [r4, #24]
    6fca:	f002 fedd 	bl	9d88 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    6fce:	b1c0      	cbz	r0, 7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    6fd0:	f000 f9ee 	bl	73b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    6fd4:	7e21      	ldrb	r1, [r4, #24]
    6fd6:	f001 0103 	and.w	r1, r1, #3
    6fda:	4288      	cmp	r0, r1
    6fdc:	d111      	bne.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    6fde:	79b0      	ldrb	r0, [r6, #6]
    6fe0:	b160      	cbz	r0, 6ffc <MPSL_IRQ_CLOCK_Handler+0x250>
    6fe2:	2002      	movs	r0, #2
    6fe4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    6fe8:	e044      	b.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    6fea:	4831      	ldr	r0, [pc, #196]	; (70b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    6fec:	e7ec      	b.n	6fc8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    6fee:	4831      	ldr	r0, [pc, #196]	; (70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    6ff0:	e7ea      	b.n	6fc8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    6ff2:	f240 313d 	movw	r1, #829	; 0x33d
    6ff6:	206d      	movs	r0, #109	; 0x6d
    6ff8:	f000 fa38 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6ffc:	f000 f9ac 	bl	7358 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7000:	e038      	b.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    7002:	f8c5 800c 	str.w	r8, [r5, #12]
    7006:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    700a:	69a0      	ldr	r0, [r4, #24]
    700c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    7010:	f002 ff1f 	bl	9e52 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7014:	b940      	cbnz	r0, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7016:	f002 ff26 	bl	9e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    701a:	b928      	cbnz	r0, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    701c:	f002 ff3a 	bl	9e94 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7020:	b910      	cbnz	r0, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7022:	f002 ff4b 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7026:	b138      	cbz	r0, 7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    7028:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    702c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    7030:	4921      	ldr	r1, [pc, #132]	; (70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
    7032:	f3c0 3042 	ubfx	r0, r0, #13, #3
    7036:	6008      	str	r0, [r1, #0]
    7038:	f002 ff0b 	bl	9e52 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    703c:	b940      	cbnz	r0, 7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    703e:	f002 ff12 	bl	9e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7042:	b928      	cbnz	r0, 7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    7044:	f002 ff26 	bl	9e94 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7048:	b910      	cbnz	r0, 7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    704a:	f002 ff37 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    704e:	b118      	cbz	r0, 7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7050:	4919      	ldr	r1, [pc, #100]	; (70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
    7052:	3110      	adds	r1, #16
    7054:	f8c1 8000 	str.w	r8, [r1]
    7058:	f8c5 8008 	str.w	r8, [r5, #8]
    705c:	2002      	movs	r0, #2
    705e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7062:	79b0      	ldrb	r0, [r6, #6]
    7064:	b930      	cbnz	r0, 7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    7066:	f000 f829 	bl	70bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    706a:	2002      	movs	r0, #2
    706c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7070:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    7074:	79a0      	ldrb	r0, [r4, #6]
    7076:	b170      	cbz	r0, 7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    7078:	7830      	ldrb	r0, [r6, #0]
    707a:	b960      	cbnz	r0, 7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    707c:	f000 f97e 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7080:	4606      	mov	r6, r0
    7082:	f000 fa67 	bl	7554 <mpsl_temperature_get>
    7086:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    708a:	b116      	cbz	r6, 7092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
    708c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    7090:	e001      	b.n	7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    7092:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7096:	2101      	movs	r1, #1
    7098:	4628      	mov	r0, r5
    709a:	f002 fe49 	bl	9d30 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    709e:	b108      	cbz	r0, 70a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    70a0:	f000 f966 	bl	7370 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    70a4:	72a7      	strb	r7, [r4, #10]
    70a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70aa:	0000      	.short	0x0000
    70ac:	2000012c 	.word	0x2000012c
    70b0:	00020001 	.word	0x00020001
    70b4:	00030001 	.word	0x00030001
    70b8:	4000053c 	.word	0x4000053c
    70bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70c0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    70c4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    70c8:	f010 0f02 	tst.w	r0, #2
    70cc:	d011      	beq.n	70f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    70ce:	4c16      	ldr	r4, [pc, #88]	; (7128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    70d0:	6820      	ldr	r0, [r4, #0]
    70d2:	43c0      	mvns	r0, r0
    70d4:	f340 1600 	sbfx	r6, r0, #4, #1
    70d8:	6820      	ldr	r0, [r4, #0]
    70da:	f040 0010 	orr.w	r0, r0, #16
    70de:	6020      	str	r0, [r4, #0]
    70e0:	f44f 7782 	mov.w	r7, #260	; 0x104
    70e4:	4639      	mov	r1, r7
    70e6:	4628      	mov	r0, r5
    70e8:	1c76      	adds	r6, r6, #1
    70ea:	f002 fe1c 	bl	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    70ee:	b128      	cbz	r0, 70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>
    70f0:	e00a      	b.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    70f2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    70f6:	206d      	movs	r0, #109	; 0x6d
    70f8:	f000 f9b8 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    70fc:	f002 ff20 	bl	9f40 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    7100:	e002      	b.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    7102:	bf00      	nop
    7104:	f002 ff1a 	bl	9f3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7108:	4639      	mov	r1, r7
    710a:	4628      	mov	r0, r5
    710c:	f002 fe0b 	bl	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7110:	2800      	cmp	r0, #0
    7112:	d0f7      	beq.n	7104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
    7114:	f000 f920 	bl	7358 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7118:	2e00      	cmp	r6, #0
    711a:	d103      	bne.n	7124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    711c:	6820      	ldr	r0, [r4, #0]
    711e:	f020 0010 	bic.w	r0, r0, #16
    7122:	6020      	str	r0, [r4, #0]
    7124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7128:	e000ed10 	.word	0xe000ed10

0000712c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    712c:	4801      	ldr	r0, [pc, #4]	; (7134 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    712e:	89c0      	ldrh	r0, [r0, #14]
    7130:	4770      	bx	lr
    7132:	0000      	.short	0x0000
    7134:	2000012c 	.word	0x2000012c

00007138 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    7138:	b510      	push	{r4, lr}
    713a:	f3ef 8410 	mrs	r4, PRIMASK
    713e:	b672      	cpsid	i
    7140:	480a      	ldr	r0, [pc, #40]	; (716c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    7142:	7841      	ldrb	r1, [r0, #1]
    7144:	b129      	cbz	r1, 7152 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    7146:	7841      	ldrb	r1, [r0, #1]
    7148:	1e49      	subs	r1, r1, #1
    714a:	7041      	strb	r1, [r0, #1]
    714c:	7841      	ldrb	r1, [r0, #1]
    714e:	b129      	cbz	r1, 715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    7150:	e008      	b.n	7164 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    7152:	f240 1119 	movw	r1, #281	; 0x119
    7156:	206d      	movs	r0, #109	; 0x6d
    7158:	f000 f988 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    715c:	7880      	ldrb	r0, [r0, #2]
    715e:	b908      	cbnz	r0, 7164 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    7160:	f000 f91a 	bl	7398 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    7164:	2c00      	cmp	r4, #0
    7166:	d100      	bne.n	716a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    7168:	b662      	cpsie	i
    716a:	bd10      	pop	{r4, pc}
    716c:	2000012c 	.word	0x2000012c

00007170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    7170:	b510      	push	{r4, lr}
    7172:	f3ef 8410 	mrs	r4, PRIMASK
    7176:	b672      	cpsid	i
    7178:	4806      	ldr	r0, [pc, #24]	; (7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    717a:	7841      	ldrb	r1, [r0, #1]
    717c:	1c49      	adds	r1, r1, #1
    717e:	7041      	strb	r1, [r0, #1]
    7180:	7840      	ldrb	r0, [r0, #1]
    7182:	2801      	cmp	r0, #1
    7184:	d101      	bne.n	718a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    7186:	f002 fdea 	bl	9d5e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    718a:	2c00      	cmp	r4, #0
    718c:	d100      	bne.n	7190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    718e:	b662      	cpsie	i
    7190:	bd10      	pop	{r4, pc}
    7192:	0000      	.short	0x0000
    7194:	2000012c 	.word	0x2000012c

00007198 <mpsl_clock_hfclk_release>:
    7198:	4805      	ldr	r0, [pc, #20]	; (71b0 <mpsl_clock_hfclk_release+0x18>)
    719a:	b510      	push	{r4, lr}
    719c:	78c1      	ldrb	r1, [r0, #3]
    719e:	b121      	cbz	r1, 71aa <mpsl_clock_hfclk_release+0x12>
    71a0:	2100      	movs	r1, #0
    71a2:	7101      	strb	r1, [r0, #4]
    71a4:	70c1      	strb	r1, [r0, #3]
    71a6:	f7ff ffc7 	bl	7138 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    71aa:	2000      	movs	r0, #0
    71ac:	bd10      	pop	{r4, pc}
    71ae:	0000      	.short	0x0000
    71b0:	2000012c 	.word	0x2000012c

000071b4 <mpsl_clock_hfclk_request>:
    71b4:	b570      	push	{r4, r5, r6, lr}
    71b6:	4c0c      	ldr	r4, [pc, #48]	; (71e8 <mpsl_clock_hfclk_request+0x34>)
    71b8:	78e1      	ldrb	r1, [r4, #3]
    71ba:	b961      	cbnz	r1, 71d6 <mpsl_clock_hfclk_request+0x22>
    71bc:	2501      	movs	r5, #1
    71be:	70e5      	strb	r5, [r4, #3]
    71c0:	61e0      	str	r0, [r4, #28]
    71c2:	f7ff ffd5 	bl	7170 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    71c6:	f000 f8d9 	bl	737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    71ca:	b130      	cbz	r0, 71da <mpsl_clock_hfclk_request+0x26>
    71cc:	69e0      	ldr	r0, [r4, #28]
    71ce:	b110      	cbz	r0, 71d6 <mpsl_clock_hfclk_request+0x22>
    71d0:	4780      	blx	r0
    71d2:	2000      	movs	r0, #0
    71d4:	61e0      	str	r0, [r4, #28]
    71d6:	2000      	movs	r0, #0
    71d8:	bd70      	pop	{r4, r5, r6, pc}
    71da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    71de:	7125      	strb	r5, [r4, #4]
    71e0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    71e4:	e7f7      	b.n	71d6 <mpsl_clock_hfclk_request+0x22>
    71e6:	0000      	.short	0x0000
    71e8:	2000012c 	.word	0x2000012c

000071ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    71ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71f0:	0005      	movs	r5, r0
    71f2:	f06f 0015 	mvn.w	r0, #21
    71f6:	d03f      	beq.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    71f8:	7829      	ldrb	r1, [r5, #0]
    71fa:	2904      	cmp	r1, #4
    71fc:	d83c      	bhi.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    71fe:	2900      	cmp	r1, #0
    7200:	7869      	ldrb	r1, [r5, #1]
    7202:	d03b      	beq.n	727c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    7204:	2900      	cmp	r1, #0
    7206:	d137      	bne.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7208:	78a9      	ldrb	r1, [r5, #2]
    720a:	2900      	cmp	r1, #0
    720c:	d134      	bne.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    720e:	2000      	movs	r0, #0
    7210:	f002 fd78 	bl	9d04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    7214:	2000      	movs	r0, #0
    7216:	f002 fd68 	bl	9cea <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    721a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    721e:	f04f 31ff 	mov.w	r1, #4294967295
    7222:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    7226:	2600      	movs	r6, #0
    7228:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    722c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    7230:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    7234:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    7238:	4c14      	ldr	r4, [pc, #80]	; (728c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    723a:	7066      	strb	r6, [r4, #1]
    723c:	88a8      	ldrh	r0, [r5, #4]
    723e:	81a0      	strh	r0, [r4, #12]
    7240:	f002 fd84 	bl	9d4c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    7244:	2701      	movs	r7, #1
    7246:	b108      	cbz	r0, 724c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    7248:	70e7      	strb	r7, [r4, #3]
    724a:	7067      	strb	r7, [r4, #1]
    724c:	2101      	movs	r1, #1
    724e:	4640      	mov	r0, r8
    7250:	f002 fd6e 	bl	9d30 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7254:	b108      	cbz	r0, 725a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    7256:	f000 f88b 	bl	7370 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    725a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    725e:	81e0      	strh	r0, [r4, #14]
    7260:	4628      	mov	r0, r5
    7262:	f7ff fe8d 	bl	6f80 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    7266:	7267      	strb	r7, [r4, #9]
    7268:	2000      	movs	r0, #0
    726a:	f002 fd3e 	bl	9cea <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    726e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7272:	4630      	mov	r0, r6
    7274:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    7278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    727c:	2900      	cmp	r1, #0
    727e:	d0fb      	beq.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7280:	2920      	cmp	r1, #32
    7282:	d8f9      	bhi.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7284:	78a9      	ldrb	r1, [r5, #2]
    7286:	2921      	cmp	r1, #33	; 0x21
    7288:	d9c1      	bls.n	720e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    728a:	e7f5      	b.n	7278 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    728c:	2000012c 	.word	0x2000012c

00007290 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    7290:	4801      	ldr	r0, [pc, #4]	; (7298 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    7292:	8980      	ldrh	r0, [r0, #12]
    7294:	4770      	bx	lr
    7296:	0000      	.short	0x0000
    7298:	2000012c 	.word	0x2000012c

0000729c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    729c:	4802      	ldr	r0, [pc, #8]	; (72a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    729e:	7a80      	ldrb	r0, [r0, #10]
    72a0:	2800      	cmp	r0, #0
    72a2:	d000      	beq.n	72a6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    72a4:	2001      	movs	r0, #1
    72a6:	4770      	bx	lr
    72a8:	2000012c 	.word	0x2000012c

000072ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    72ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72ae:	4d1f      	ldr	r5, [pc, #124]	; (732c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    72b0:	7ae8      	ldrb	r0, [r5, #11]
    72b2:	2800      	cmp	r0, #0
    72b4:	d10f      	bne.n	72d6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    72b6:	7e28      	ldrb	r0, [r5, #24]
    72b8:	f000 0003 	and.w	r0, r0, #3
    72bc:	f002 fd54 	bl	9d68 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    72c0:	2800      	cmp	r0, #0
    72c2:	d008      	beq.n	72d6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    72c4:	f3ef 8110 	mrs	r1, PRIMASK
    72c8:	b672      	cpsid	i
    72ca:	f7ff ffe7 	bl	729c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    72ce:	b118      	cbz	r0, 72d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    72d0:	2900      	cmp	r1, #0
    72d2:	d100      	bne.n	72d6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    72d4:	b662      	cpsie	i
    72d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72d8:	2601      	movs	r6, #1
    72da:	72ae      	strb	r6, [r5, #10]
    72dc:	b901      	cbnz	r1, 72e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    72de:	b662      	cpsie	i
    72e0:	2018      	movs	r0, #24
    72e2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    72e6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    72ea:	61a6      	str	r6, [r4, #24]
    72ec:	f44f 7020 	mov.w	r0, #640	; 0x280
    72f0:	f8ad 0000 	strh.w	r0, [sp]
    72f4:	f8bd 0000 	ldrh.w	r0, [sp]
    72f8:	1e41      	subs	r1, r0, #1
    72fa:	f8ad 1000 	strh.w	r1, [sp]
    72fe:	d2f9      	bcs.n	72f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    7300:	2700      	movs	r7, #0
    7302:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    7306:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    730a:	4808      	ldr	r0, [pc, #32]	; (732c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    730c:	3008      	adds	r0, #8
    730e:	f002 fd91 	bl	9e34 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    7312:	702f      	strb	r7, [r5, #0]
    7314:	f7ff fd8e 	bl	6e34 <MPSL_IRQ_CLOCK_Handler+0x88>
    7318:	6166      	str	r6, [r4, #20]
    731a:	7968      	ldrb	r0, [r5, #5]
    731c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7320:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7324:	2018      	movs	r0, #24
    7326:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    732c:	2000012c 	.word	0x2000012c

00007330 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7330:	4602      	mov	r2, r0
    7332:	b510      	push	{r4, lr}
    7334:	2000      	movs	r0, #0
    7336:	2900      	cmp	r1, #0
    7338:	d00a      	beq.n	7350 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    733a:	2a00      	cmp	r2, #0
    733c:	d008      	beq.n	7350 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    733e:	fba2 0101 	umull	r0, r1, r2, r1
    7342:	1e40      	subs	r0, r0, #1
    7344:	4a03      	ldr	r2, [pc, #12]	; (7354 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    7346:	f141 31ff 	adc.w	r1, r1, #4294967295
    734a:	f002 fdfb 	bl	9f44 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    734e:	1c40      	adds	r0, r0, #1
    7350:	bd10      	pop	{r4, pc}
    7352:	0000      	.short	0x0000
    7354:	000f4240 	.word	0x000f4240

00007358 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    7358:	b510      	push	{r4, lr}
    735a:	4c04      	ldr	r4, [pc, #16]	; (736c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    735c:	7e20      	ldrb	r0, [r4, #24]
    735e:	f000 0003 	and.w	r0, r0, #3
    7362:	f002 fd01 	bl	9d68 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7366:	2800      	cmp	r0, #0
    7368:	d0f8      	beq.n	735c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    736a:	bd10      	pop	{r4, pc}
    736c:	2000012c 	.word	0x2000012c

00007370 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    7370:	4901      	ldr	r1, [pc, #4]	; (7378 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    7372:	2001      	movs	r0, #1
    7374:	7008      	strb	r0, [r1, #0]
    7376:	4770      	bx	lr
    7378:	20000199 	.word	0x20000199

0000737c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    737c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7380:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7384:	b918      	cbnz	r0, 738e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    7386:	4803      	ldr	r0, [pc, #12]	; (7394 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    7388:	7800      	ldrb	r0, [r0, #0]
    738a:	2800      	cmp	r0, #0
    738c:	d000      	beq.n	7390 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    738e:	2001      	movs	r0, #1
    7390:	4770      	bx	lr
    7392:	0000      	.short	0x0000
    7394:	20000199 	.word	0x20000199

00007398 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    7398:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    739c:	2101      	movs	r1, #1
    739e:	6041      	str	r1, [r0, #4]
    73a0:	2100      	movs	r1, #0
    73a2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    73a6:	4801      	ldr	r0, [pc, #4]	; (73ac <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    73a8:	7001      	strb	r1, [r0, #0]
    73aa:	4770      	bx	lr
    73ac:	20000199 	.word	0x20000199

000073b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    73b0:	4802      	ldr	r0, [pc, #8]	; (73bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    73b2:	6800      	ldr	r0, [r0, #0]
    73b4:	f000 0003 	and.w	r0, r0, #3
    73b8:	4770      	bx	lr
    73ba:	0000      	.short	0x0000
    73bc:	4000041c 	.word	0x4000041c
    73c0:	b510      	push	{r4, lr}
    73c2:	b131      	cbz	r1, 73d2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    73c4:	2901      	cmp	r1, #1
    73c6:	d007      	beq.n	73d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    73c8:	f240 3102 	movw	r1, #770	; 0x302
    73cc:	a005      	add	r0, pc, #20	; (adr r0, 73e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    73ce:	f000 f821 	bl	7414 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    73d2:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    73d6:	e001      	b.n	73dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    73d8:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    73dc:	f000 0001 	and.w	r0, r0, #1
    73e0:	bd10      	pop	{r4, pc}
    73e2:	0000      	.short	0x0000
    73e4:	5f66726e 	.word	0x5f66726e
    73e8:	636f6c63 	.word	0x636f6c63
    73ec:	00682e6b 	.word	0x00682e6b
    73f0:	f3bf 8f4f 	dsb	sy
    73f4:	4805      	ldr	r0, [pc, #20]	; (740c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    73f6:	6801      	ldr	r1, [r0, #0]
    73f8:	4a05      	ldr	r2, [pc, #20]	; (7410 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    73fa:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    73fe:	4311      	orrs	r1, r2
    7400:	6001      	str	r1, [r0, #0]
    7402:	f3bf 8f4f 	dsb	sy
    7406:	bf00      	nop
    7408:	e7fd      	b.n	7406 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    740a:	0000      	.short	0x0000
    740c:	e000ed0c 	.word	0xe000ed0c
    7410:	05fa0004 	.word	0x05fa0004

00007414 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    7414:	b672      	cpsid	i
    7416:	4a03      	ldr	r2, [pc, #12]	; (7424 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    7418:	6852      	ldr	r2, [r2, #4]
    741a:	b102      	cbz	r2, 741e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    741c:	4790      	blx	r2
    741e:	f7ff ffe7 	bl	73f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7422:	0000      	.short	0x0000
    7424:	2000014c 	.word	0x2000014c
    7428:	4806      	ldr	r0, [pc, #24]	; (7444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    742a:	b510      	push	{r4, lr}
    742c:	2100      	movs	r1, #0
    742e:	6001      	str	r1, [r0, #0]
    7430:	2101      	movs	r1, #1
    7432:	6001      	str	r1, [r0, #0]
    7434:	4608      	mov	r0, r1
    7436:	f002 fcbe 	bl	9db6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    743a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    743e:	2001      	movs	r0, #1
    7440:	f002 bcac 	b.w	9d9c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7444:	40001ffc 	.word	0x40001ffc
    7448:	4807      	ldr	r0, [pc, #28]	; (7468 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    744a:	b510      	push	{r4, lr}
    744c:	2101      	movs	r1, #1
    744e:	6041      	str	r1, [r0, #4]
    7450:	1e89      	subs	r1, r1, #2
    7452:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    7456:	200c      	movs	r0, #12
    7458:	f002 fcad 	bl	9db6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7460:	200c      	movs	r0, #12
    7462:	f002 bc9b 	b.w	9d9c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7466:	0000      	.short	0x0000
    7468:	4000c000 	.word	0x4000c000

0000746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    746c:	b50e      	push	{r1, r2, r3, lr}
    746e:	b672      	cpsid	i
    7470:	4a0f      	ldr	r2, [pc, #60]	; (74b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    7472:	6855      	ldr	r5, [r2, #4]
    7474:	b1d5      	cbz	r5, 74ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    7476:	2200      	movs	r2, #0
    7478:	4603      	mov	r3, r0
    747a:	466e      	mov	r6, sp
    747c:	240a      	movs	r4, #10
    747e:	e003      	b.n	7488 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    7480:	fbb0 f0f4 	udiv	r0, r0, r4
    7484:	1c52      	adds	r2, r2, #1
    7486:	b2d2      	uxtb	r2, r2
    7488:	2800      	cmp	r0, #0
    748a:	d1f9      	bne.n	7480 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    748c:	54b0      	strb	r0, [r6, r2]
    748e:	e009      	b.n	74a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    7490:	fbb3 f0f4 	udiv	r0, r3, r4
    7494:	fb04 3010 	mls	r0, r4, r0, r3
    7498:	fbb3 f3f4 	udiv	r3, r3, r4
    749c:	1e52      	subs	r2, r2, #1
    749e:	b2d2      	uxtb	r2, r2
    74a0:	3030      	adds	r0, #48	; 0x30
    74a2:	54b0      	strb	r0, [r6, r2]
    74a4:	2a00      	cmp	r2, #0
    74a6:	d1f3      	bne.n	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    74a8:	4630      	mov	r0, r6
    74aa:	47a8      	blx	r5
    74ac:	f7ff ffa0 	bl	73f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    74b0:	2000014c 	.word	0x2000014c

000074b4 <mpsl_init>:
    74b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74b8:	4c18      	ldr	r4, [pc, #96]	; (751c <mpsl_init+0x68>)
    74ba:	4606      	mov	r6, r0
    74bc:	4617      	mov	r7, r2
    74be:	7860      	ldrb	r0, [r4, #1]
    74c0:	460d      	mov	r5, r1
    74c2:	b118      	cbz	r0, 74cc <mpsl_init+0x18>
    74c4:	f04f 30ff 	mov.w	r0, #4294967295
    74c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74cc:	f7fc fc38 	bl	3d40 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    74d0:	b906      	cbnz	r6, 74d4 <mpsl_init+0x20>
    74d2:	4e13      	ldr	r6, [pc, #76]	; (7520 <mpsl_init+0x6c>)
    74d4:	6067      	str	r7, [r4, #4]
    74d6:	7025      	strb	r5, [r4, #0]
    74d8:	f7ff ffa6 	bl	7428 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    74dc:	f7ff ffb4 	bl	7448 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    74e0:	4630      	mov	r0, r6
    74e2:	f7ff fe83 	bl	71ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    74e6:	0006      	movs	r6, r0
    74e8:	d1ee      	bne.n	74c8 <mpsl_init+0x14>
    74ea:	f7fe fe87 	bl	61fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    74ee:	f7ff fedd 	bl	72ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    74f2:	f002 fbc7 	bl	9c84 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    74f6:	4628      	mov	r0, r5
    74f8:	f002 fc50 	bl	9d9c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    74fc:	2001      	movs	r0, #1
    74fe:	2d00      	cmp	r5, #0
    7500:	db09      	blt.n	7516 <mpsl_init+0x62>
    7502:	f005 011f 	and.w	r1, r5, #31
    7506:	fa00 f101 	lsl.w	r1, r0, r1
    750a:	096a      	lsrs	r2, r5, #5
    750c:	0092      	lsls	r2, r2, #2
    750e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    7512:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    7516:	7060      	strb	r0, [r4, #1]
    7518:	4630      	mov	r0, r6
    751a:	e7d5      	b.n	74c8 <mpsl_init+0x14>
    751c:	2000014c 	.word	0x2000014c
    7520:	00009dd8 	.word	0x00009dd8

00007524 <mpsl_is_initialized>:
    7524:	4801      	ldr	r0, [pc, #4]	; (752c <mpsl_is_initialized+0x8>)
    7526:	7840      	ldrb	r0, [r0, #1]
    7528:	4770      	bx	lr
    752a:	0000      	.short	0x0000
    752c:	2000014c 	.word	0x2000014c

00007530 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    7530:	4807      	ldr	r0, [pc, #28]	; (7550 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    7532:	f990 0000 	ldrsb.w	r0, [r0]
    7536:	2800      	cmp	r0, #0
    7538:	db09      	blt.n	754e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    753a:	f000 021f 	and.w	r2, r0, #31
    753e:	2101      	movs	r1, #1
    7540:	4091      	lsls	r1, r2
    7542:	0940      	lsrs	r0, r0, #5
    7544:	0080      	lsls	r0, r0, #2
    7546:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    754a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    754e:	4770      	bx	lr
    7550:	2000014c 	.word	0x2000014c

00007554 <mpsl_temperature_get>:
    7554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7558:	2501      	movs	r5, #1
    755a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    755e:	0329      	lsls	r1, r5, #12
    7560:	f04f 0800 	mov.w	r8, #0
    7564:	4640      	mov	r0, r8
    7566:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    756a:	f3bf 8f4f 	dsb	sy
    756e:	f3bf 8f6f 	isb	sy
    7572:	4c16      	ldr	r4, [pc, #88]	; (75cc <mpsl_temperature_get+0x78>)
    7574:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7578:	200c      	movs	r0, #12
    757a:	f002 fc3b 	bl	9df4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    757e:	4e14      	ldr	r6, [pc, #80]	; (75d0 <mpsl_temperature_get+0x7c>)
    7580:	6830      	ldr	r0, [r6, #0]
    7582:	43c0      	mvns	r0, r0
    7584:	f340 1700 	sbfx	r7, r0, #4, #1
    7588:	6830      	ldr	r0, [r6, #0]
    758a:	f040 0010 	orr.w	r0, r0, #16
    758e:	6030      	str	r0, [r6, #0]
    7590:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    7594:	6025      	str	r5, [r4, #0]
    7596:	1c7f      	adds	r7, r7, #1
    7598:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    759c:	b108      	cbz	r0, 75a2 <mpsl_temperature_get+0x4e>
    759e:	b11f      	cbz	r7, 75a8 <mpsl_temperature_get+0x54>
    75a0:	e006      	b.n	75b0 <mpsl_temperature_get+0x5c>
    75a2:	f002 fccb 	bl	9f3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    75a6:	e7f7      	b.n	7598 <mpsl_temperature_get+0x44>
    75a8:	6830      	ldr	r0, [r6, #0]
    75aa:	f020 0010 	bic.w	r0, r0, #16
    75ae:	6030      	str	r0, [r6, #0]
    75b0:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    75b4:	6065      	str	r5, [r4, #4]
    75b6:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    75ba:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    75be:	200c      	movs	r0, #12
    75c0:	f002 fc18 	bl	9df4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    75c4:	4630      	mov	r0, r6
    75c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ca:	0000      	.short	0x0000
    75cc:	4000c000 	.word	0x4000c000
    75d0:	e000ed10 	.word	0xe000ed10

000075d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    75d4:	b510      	push	{r4, lr}
    75d6:	4602      	mov	r2, r0
    75d8:	2005      	movs	r0, #5
    75da:	490c      	ldr	r1, [pc, #48]	; (760c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    75dc:	e004      	b.n	75e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    75de:	bf00      	nop
    75e0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    75e4:	791b      	ldrb	r3, [r3, #4]
    75e6:	b133      	cbz	r3, 75f6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    75e8:	1e40      	subs	r0, r0, #1
    75ea:	b2c0      	uxtb	r0, r0
    75ec:	d2f8      	bcs.n	75e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    75ee:	2148      	movs	r1, #72	; 0x48
    75f0:	2069      	movs	r0, #105	; 0x69
    75f2:	f7ff ff3b 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    75f6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    75fa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    75fe:	2200      	movs	r2, #0
    7600:	714a      	strb	r2, [r1, #5]
    7602:	718a      	strb	r2, [r1, #6]
    7604:	2201      	movs	r2, #1
    7606:	710a      	strb	r2, [r1, #4]
    7608:	bd10      	pop	{r4, pc}
    760a:	0000      	.short	0x0000
    760c:	20000c30 	.word	0x20000c30

00007610 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    7610:	b510      	push	{r4, lr}
    7612:	2805      	cmp	r0, #5
    7614:	d301      	bcc.n	761a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    7616:	2158      	movs	r1, #88	; 0x58
    7618:	e006      	b.n	7628 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    761a:	490a      	ldr	r1, [pc, #40]	; (7644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    761c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7620:	7901      	ldrb	r1, [r0, #4]
    7622:	2901      	cmp	r1, #1
    7624:	d003      	beq.n	762e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    7626:	2159      	movs	r1, #89	; 0x59
    7628:	2069      	movs	r0, #105	; 0x69
    762a:	f7ff ff1f 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    762e:	7941      	ldrb	r1, [r0, #5]
    7630:	7982      	ldrb	r2, [r0, #6]
    7632:	1c49      	adds	r1, r1, #1
    7634:	b2c9      	uxtb	r1, r1
    7636:	428a      	cmp	r2, r1
    7638:	d000      	beq.n	763c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    763a:	7141      	strb	r1, [r0, #5]
    763c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7640:	f7ff bf76 	b.w	7530 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    7644:	20000c30 	.word	0x20000c30

00007648 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    7648:	b510      	push	{r4, lr}
    764a:	2805      	cmp	r0, #5
    764c:	d303      	bcc.n	7656 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    764e:	214f      	movs	r1, #79	; 0x4f
    7650:	2069      	movs	r0, #105	; 0x69
    7652:	f7ff ff0b 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7656:	4a03      	ldr	r2, [pc, #12]	; (7664 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    7658:	2100      	movs	r1, #0
    765a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    765e:	7101      	strb	r1, [r0, #4]
    7660:	bd10      	pop	{r4, pc}
    7662:	0000      	.short	0x0000
    7664:	20000c30 	.word	0x20000c30

00007668 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    7668:	b570      	push	{r4, r5, r6, lr}
    766a:	2505      	movs	r5, #5
    766c:	4e0e      	ldr	r6, [pc, #56]	; (76a8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    766e:	4c0f      	ldr	r4, [pc, #60]	; (76ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    7670:	e016      	b.n	76a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7672:	7821      	ldrb	r1, [r4, #0]
    7674:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    7678:	7902      	ldrb	r2, [r0, #4]
    767a:	2a01      	cmp	r2, #1
    767c:	d108      	bne.n	7690 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    767e:	7942      	ldrb	r2, [r0, #5]
    7680:	7983      	ldrb	r3, [r0, #6]
    7682:	429a      	cmp	r2, r3
    7684:	d004      	beq.n	7690 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7686:	7942      	ldrb	r2, [r0, #5]
    7688:	7182      	strb	r2, [r0, #6]
    768a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    768e:	4780      	blx	r0
    7690:	7820      	ldrb	r0, [r4, #0]
    7692:	1c40      	adds	r0, r0, #1
    7694:	b2c0      	uxtb	r0, r0
    7696:	7020      	strb	r0, [r4, #0]
    7698:	2805      	cmp	r0, #5
    769a:	d301      	bcc.n	76a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    769c:	2000      	movs	r0, #0
    769e:	7020      	strb	r0, [r4, #0]
    76a0:	1e6d      	subs	r5, r5, #1
    76a2:	b2ed      	uxtb	r5, r5
    76a4:	d2e5      	bcs.n	7672 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    76a6:	bd70      	pop	{r4, r5, r6, pc}
    76a8:	20000c30 	.word	0x20000c30
    76ac:	2000019a 	.word	0x2000019a

000076b0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    76b0:	b500      	push	{lr}
    76b2:	f002 fbce 	bl	9e52 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    76b6:	b940      	cbnz	r0, 76ca <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    76b8:	f002 fbd5 	bl	9e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    76bc:	b928      	cbnz	r0, 76ca <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    76be:	f002 fbe9 	bl	9e94 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    76c2:	b910      	cbnz	r0, 76ca <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    76c4:	f002 fbfa 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76c8:	b108      	cbz	r0, 76ce <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    76ca:	4802      	ldr	r0, [pc, #8]	; (76d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    76cc:	bd00      	pop	{pc}
    76ce:	4802      	ldr	r0, [pc, #8]	; (76d8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    76d0:	bd00      	pop	{pc}
    76d2:	0000      	.short	0x0000
    76d4:	4000050c 	.word	0x4000050c
    76d8:	4001e700 	.word	0x4001e700
    76dc:	b510      	push	{r4, lr}
    76de:	f002 fbed 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76e2:	b330      	cbz	r0, 7732 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    76e4:	f3ef 8010 	mrs	r0, PRIMASK
    76e8:	b1c8      	cbz	r0, 771e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    76ea:	2100      	movs	r1, #0
    76ec:	b672      	cpsid	i
    76ee:	4812      	ldr	r0, [pc, #72]	; (7738 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    76f0:	6802      	ldr	r2, [r0, #0]
    76f2:	6803      	ldr	r3, [r0, #0]
    76f4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    76f8:	f043 0310 	orr.w	r3, r3, #16
    76fc:	6003      	str	r3, [r0, #0]
    76fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7702:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7706:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    770a:	431c      	orrs	r4, r3
    770c:	d000      	beq.n	7710 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    770e:	bf40      	sev
    7710:	bf20      	wfe
    7712:	bf00      	nop
    7714:	bf00      	nop
    7716:	bf00      	nop
    7718:	bf00      	nop
    771a:	b112      	cbz	r2, 7722 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    771c:	e005      	b.n	772a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    771e:	2101      	movs	r1, #1
    7720:	e7e4      	b.n	76ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    7722:	6802      	ldr	r2, [r0, #0]
    7724:	f022 0210 	bic.w	r2, r2, #16
    7728:	6002      	str	r2, [r0, #0]
    772a:	2900      	cmp	r1, #0
    772c:	d000      	beq.n	7730 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    772e:	b662      	cpsie	i
    7730:	bd10      	pop	{r4, pc}
    7732:	bf20      	wfe
    7734:	bd10      	pop	{r4, pc}
    7736:	0000      	.short	0x0000
    7738:	e000ed10 	.word	0xe000ed10

0000773c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    773c:	4901      	ldr	r1, [pc, #4]	; (7744 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    773e:	2001      	movs	r0, #1
    7740:	7088      	strb	r0, [r1, #2]
    7742:	4770      	bx	lr
    7744:	20000154 	.word	0x20000154

00007748 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    7748:	0000a1bd 0000a1f5 0000a1df 0000a1cd     ................
    7758:	0000a1d9 0000a1c7 0000a1bb 0000a1b9     ................
    7768:	0000a1f1 0000a1e5 0000a1d3 0000a1c1     ................
    7778:	0000a1b3 0000a1ab 0000a1af 0000a1a5     ................

00007788 <mpsl_fem_disable>:
    7788:	4801      	ldr	r0, [pc, #4]	; (7790 <mpsl_fem_disable+0x8>)
    778a:	6800      	ldr	r0, [r0, #0]
    778c:	6800      	ldr	r0, [r0, #0]
    778e:	4700      	bx	r0
    7790:	20000168 	.word	0x20000168

00007794 <mpsl_fem_lna_configuration_clear>:
    7794:	4801      	ldr	r0, [pc, #4]	; (779c <mpsl_fem_lna_configuration_clear+0x8>)
    7796:	6800      	ldr	r0, [r0, #0]
    7798:	6940      	ldr	r0, [r0, #20]
    779a:	4700      	bx	r0
    779c:	20000168 	.word	0x20000168

000077a0 <mpsl_fem_lna_configuration_set>:
    77a0:	4a01      	ldr	r2, [pc, #4]	; (77a8 <mpsl_fem_lna_configuration_set+0x8>)
    77a2:	6812      	ldr	r2, [r2, #0]
    77a4:	68d2      	ldr	r2, [r2, #12]
    77a6:	4710      	bx	r2
    77a8:	20000168 	.word	0x20000168

000077ac <mpsl_fem_lna_is_configured>:
    77ac:	4901      	ldr	r1, [pc, #4]	; (77b4 <mpsl_fem_lna_is_configured+0x8>)
    77ae:	6809      	ldr	r1, [r1, #0]
    77b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    77b2:	4708      	bx	r1
    77b4:	20000168 	.word	0x20000168

000077b8 <mpsl_fem_pa_configuration_clear>:
    77b8:	4801      	ldr	r0, [pc, #4]	; (77c0 <mpsl_fem_pa_configuration_clear+0x8>)
    77ba:	6800      	ldr	r0, [r0, #0]
    77bc:	6900      	ldr	r0, [r0, #16]
    77be:	4700      	bx	r0
    77c0:	20000168 	.word	0x20000168

000077c4 <mpsl_fem_pa_configuration_set>:
    77c4:	4a01      	ldr	r2, [pc, #4]	; (77cc <mpsl_fem_pa_configuration_set+0x8>)
    77c6:	6812      	ldr	r2, [r2, #0]
    77c8:	6892      	ldr	r2, [r2, #8]
    77ca:	4710      	bx	r2
    77cc:	20000168 	.word	0x20000168

000077d0 <mpsl_fem_pa_gain_set>:
    77d0:	4901      	ldr	r1, [pc, #4]	; (77d8 <mpsl_fem_pa_gain_set+0x8>)
    77d2:	6809      	ldr	r1, [r1, #0]
    77d4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    77d6:	4708      	bx	r1
    77d8:	20000168 	.word	0x20000168

000077dc <mpsl_fem_pa_is_configured>:
    77dc:	4901      	ldr	r1, [pc, #4]	; (77e4 <mpsl_fem_pa_is_configured+0x8>)
    77de:	6809      	ldr	r1, [r1, #0]
    77e0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    77e2:	4708      	bx	r1
    77e4:	20000168 	.word	0x20000168

000077e8 <mpsl_fem_tx_power_split>:
    77e8:	b430      	push	{r4, r5}
    77ea:	4c03      	ldr	r4, [pc, #12]	; (77f8 <mpsl_fem_tx_power_split+0x10>)
    77ec:	6824      	ldr	r4, [r4, #0]
    77ee:	6864      	ldr	r4, [r4, #4]
    77f0:	46a4      	mov	ip, r4
    77f2:	bc30      	pop	{r4, r5}
    77f4:	4760      	bx	ip
    77f6:	0000      	.short	0x0000
    77f8:	20000168 	.word	0x20000168

000077fc <mpsl_fem_device_config_254_apply_get>:
    77fc:	4801      	ldr	r0, [pc, #4]	; (7804 <mpsl_fem_device_config_254_apply_get+0x8>)
    77fe:	7800      	ldrb	r0, [r0, #0]
    7800:	4770      	bx	lr
    7802:	0000      	.short	0x0000
    7804:	2000019b 	.word	0x2000019b

00007808 <__udivmoddi4>:
    7808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    780c:	4686      	mov	lr, r0
    780e:	468c      	mov	ip, r1
    7810:	4608      	mov	r0, r1
    7812:	9e08      	ldr	r6, [sp, #32]
    7814:	4615      	mov	r5, r2
    7816:	4674      	mov	r4, lr
    7818:	4619      	mov	r1, r3
    781a:	2b00      	cmp	r3, #0
    781c:	f040 80c2 	bne.w	79a4 <__udivmoddi4+0x19c>
    7820:	4285      	cmp	r5, r0
    7822:	fab2 f282 	clz	r2, r2
    7826:	d945      	bls.n	78b4 <__udivmoddi4+0xac>
    7828:	b14a      	cbz	r2, 783e <__udivmoddi4+0x36>
    782a:	f1c2 0320 	rsb	r3, r2, #32
    782e:	fa00 fc02 	lsl.w	ip, r0, r2
    7832:	fa2e f303 	lsr.w	r3, lr, r3
    7836:	4095      	lsls	r5, r2
    7838:	ea43 0c0c 	orr.w	ip, r3, ip
    783c:	4094      	lsls	r4, r2
    783e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7842:	b2a8      	uxth	r0, r5
    7844:	fbbc f8fe 	udiv	r8, ip, lr
    7848:	0c23      	lsrs	r3, r4, #16
    784a:	fb0e cc18 	mls	ip, lr, r8, ip
    784e:	fb08 f900 	mul.w	r9, r8, r0
    7852:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    7856:	4599      	cmp	r9, r3
    7858:	d928      	bls.n	78ac <__udivmoddi4+0xa4>
    785a:	18eb      	adds	r3, r5, r3
    785c:	f108 37ff 	add.w	r7, r8, #4294967295
    7860:	d204      	bcs.n	786c <__udivmoddi4+0x64>
    7862:	4599      	cmp	r9, r3
    7864:	d902      	bls.n	786c <__udivmoddi4+0x64>
    7866:	f1a8 0702 	sub.w	r7, r8, #2
    786a:	442b      	add	r3, r5
    786c:	eba3 0309 	sub.w	r3, r3, r9
    7870:	b2a4      	uxth	r4, r4
    7872:	fbb3 fcfe 	udiv	ip, r3, lr
    7876:	fb0e 331c 	mls	r3, lr, ip, r3
    787a:	fb0c f000 	mul.w	r0, ip, r0
    787e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7882:	42a0      	cmp	r0, r4
    7884:	d914      	bls.n	78b0 <__udivmoddi4+0xa8>
    7886:	192c      	adds	r4, r5, r4
    7888:	f10c 33ff 	add.w	r3, ip, #4294967295
    788c:	d204      	bcs.n	7898 <__udivmoddi4+0x90>
    788e:	42a0      	cmp	r0, r4
    7890:	d902      	bls.n	7898 <__udivmoddi4+0x90>
    7892:	f1ac 0302 	sub.w	r3, ip, #2
    7896:	442c      	add	r4, r5
    7898:	1a24      	subs	r4, r4, r0
    789a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    789e:	b11e      	cbz	r6, 78a8 <__udivmoddi4+0xa0>
    78a0:	40d4      	lsrs	r4, r2
    78a2:	2300      	movs	r3, #0
    78a4:	6034      	str	r4, [r6, #0]
    78a6:	6073      	str	r3, [r6, #4]
    78a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78ac:	4647      	mov	r7, r8
    78ae:	e7dd      	b.n	786c <__udivmoddi4+0x64>
    78b0:	4663      	mov	r3, ip
    78b2:	e7f1      	b.n	7898 <__udivmoddi4+0x90>
    78b4:	bb92      	cbnz	r2, 791c <__udivmoddi4+0x114>
    78b6:	1b43      	subs	r3, r0, r5
    78b8:	2101      	movs	r1, #1
    78ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    78be:	b2af      	uxth	r7, r5
    78c0:	fbb3 fcfe 	udiv	ip, r3, lr
    78c4:	0c20      	lsrs	r0, r4, #16
    78c6:	fb0e 331c 	mls	r3, lr, ip, r3
    78ca:	fb0c f807 	mul.w	r8, ip, r7
    78ce:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    78d2:	4598      	cmp	r8, r3
    78d4:	d962      	bls.n	799c <__udivmoddi4+0x194>
    78d6:	18eb      	adds	r3, r5, r3
    78d8:	f10c 30ff 	add.w	r0, ip, #4294967295
    78dc:	d204      	bcs.n	78e8 <__udivmoddi4+0xe0>
    78de:	4598      	cmp	r8, r3
    78e0:	d902      	bls.n	78e8 <__udivmoddi4+0xe0>
    78e2:	f1ac 0002 	sub.w	r0, ip, #2
    78e6:	442b      	add	r3, r5
    78e8:	eba3 0308 	sub.w	r3, r3, r8
    78ec:	b2a4      	uxth	r4, r4
    78ee:	fbb3 fcfe 	udiv	ip, r3, lr
    78f2:	fb0e 331c 	mls	r3, lr, ip, r3
    78f6:	fb0c f707 	mul.w	r7, ip, r7
    78fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    78fe:	42a7      	cmp	r7, r4
    7900:	d94e      	bls.n	79a0 <__udivmoddi4+0x198>
    7902:	192c      	adds	r4, r5, r4
    7904:	f10c 33ff 	add.w	r3, ip, #4294967295
    7908:	d204      	bcs.n	7914 <__udivmoddi4+0x10c>
    790a:	42a7      	cmp	r7, r4
    790c:	d902      	bls.n	7914 <__udivmoddi4+0x10c>
    790e:	f1ac 0302 	sub.w	r3, ip, #2
    7912:	442c      	add	r4, r5
    7914:	1be4      	subs	r4, r4, r7
    7916:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    791a:	e7c0      	b.n	789e <__udivmoddi4+0x96>
    791c:	f1c2 0320 	rsb	r3, r2, #32
    7920:	fa20 f103 	lsr.w	r1, r0, r3
    7924:	4095      	lsls	r5, r2
    7926:	4090      	lsls	r0, r2
    7928:	fa2e f303 	lsr.w	r3, lr, r3
    792c:	4303      	orrs	r3, r0
    792e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7932:	b2af      	uxth	r7, r5
    7934:	fbb1 fcfe 	udiv	ip, r1, lr
    7938:	fb0e 101c 	mls	r0, lr, ip, r1
    793c:	0c19      	lsrs	r1, r3, #16
    793e:	fb0c f807 	mul.w	r8, ip, r7
    7942:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    7946:	4588      	cmp	r8, r1
    7948:	fa04 f402 	lsl.w	r4, r4, r2
    794c:	d922      	bls.n	7994 <__udivmoddi4+0x18c>
    794e:	1869      	adds	r1, r5, r1
    7950:	f10c 30ff 	add.w	r0, ip, #4294967295
    7954:	d204      	bcs.n	7960 <__udivmoddi4+0x158>
    7956:	4588      	cmp	r8, r1
    7958:	d902      	bls.n	7960 <__udivmoddi4+0x158>
    795a:	f1ac 0002 	sub.w	r0, ip, #2
    795e:	4429      	add	r1, r5
    7960:	eba1 0108 	sub.w	r1, r1, r8
    7964:	b29b      	uxth	r3, r3
    7966:	fbb1 fcfe 	udiv	ip, r1, lr
    796a:	fb0e 111c 	mls	r1, lr, ip, r1
    796e:	fb0c f707 	mul.w	r7, ip, r7
    7972:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7976:	429f      	cmp	r7, r3
    7978:	d90e      	bls.n	7998 <__udivmoddi4+0x190>
    797a:	18eb      	adds	r3, r5, r3
    797c:	f10c 31ff 	add.w	r1, ip, #4294967295
    7980:	d204      	bcs.n	798c <__udivmoddi4+0x184>
    7982:	429f      	cmp	r7, r3
    7984:	d902      	bls.n	798c <__udivmoddi4+0x184>
    7986:	f1ac 0102 	sub.w	r1, ip, #2
    798a:	442b      	add	r3, r5
    798c:	1bdb      	subs	r3, r3, r7
    798e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    7992:	e792      	b.n	78ba <__udivmoddi4+0xb2>
    7994:	4660      	mov	r0, ip
    7996:	e7e3      	b.n	7960 <__udivmoddi4+0x158>
    7998:	4661      	mov	r1, ip
    799a:	e7f7      	b.n	798c <__udivmoddi4+0x184>
    799c:	4660      	mov	r0, ip
    799e:	e7a3      	b.n	78e8 <__udivmoddi4+0xe0>
    79a0:	4663      	mov	r3, ip
    79a2:	e7b7      	b.n	7914 <__udivmoddi4+0x10c>
    79a4:	4283      	cmp	r3, r0
    79a6:	d906      	bls.n	79b6 <__udivmoddi4+0x1ae>
    79a8:	b916      	cbnz	r6, 79b0 <__udivmoddi4+0x1a8>
    79aa:	2100      	movs	r1, #0
    79ac:	4608      	mov	r0, r1
    79ae:	e77b      	b.n	78a8 <__udivmoddi4+0xa0>
    79b0:	e9c6 e000 	strd	lr, r0, [r6]
    79b4:	e7f9      	b.n	79aa <__udivmoddi4+0x1a2>
    79b6:	fab3 f783 	clz	r7, r3
    79ba:	b98f      	cbnz	r7, 79e0 <__udivmoddi4+0x1d8>
    79bc:	4283      	cmp	r3, r0
    79be:	d301      	bcc.n	79c4 <__udivmoddi4+0x1bc>
    79c0:	4572      	cmp	r2, lr
    79c2:	d808      	bhi.n	79d6 <__udivmoddi4+0x1ce>
    79c4:	ebbe 0402 	subs.w	r4, lr, r2
    79c8:	eb60 0303 	sbc.w	r3, r0, r3
    79cc:	2001      	movs	r0, #1
    79ce:	469c      	mov	ip, r3
    79d0:	b91e      	cbnz	r6, 79da <__udivmoddi4+0x1d2>
    79d2:	2100      	movs	r1, #0
    79d4:	e768      	b.n	78a8 <__udivmoddi4+0xa0>
    79d6:	4638      	mov	r0, r7
    79d8:	e7fa      	b.n	79d0 <__udivmoddi4+0x1c8>
    79da:	e9c6 4c00 	strd	r4, ip, [r6]
    79de:	e7f8      	b.n	79d2 <__udivmoddi4+0x1ca>
    79e0:	f1c7 0c20 	rsb	ip, r7, #32
    79e4:	40bb      	lsls	r3, r7
    79e6:	fa22 f40c 	lsr.w	r4, r2, ip
    79ea:	431c      	orrs	r4, r3
    79ec:	fa2e f10c 	lsr.w	r1, lr, ip
    79f0:	fa20 f30c 	lsr.w	r3, r0, ip
    79f4:	40b8      	lsls	r0, r7
    79f6:	4301      	orrs	r1, r0
    79f8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    79fc:	fa0e f507 	lsl.w	r5, lr, r7
    7a00:	fbb3 f8f9 	udiv	r8, r3, r9
    7a04:	fa1f fe84 	uxth.w	lr, r4
    7a08:	fb09 3018 	mls	r0, r9, r8, r3
    7a0c:	0c0b      	lsrs	r3, r1, #16
    7a0e:	fb08 fa0e 	mul.w	sl, r8, lr
    7a12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    7a16:	459a      	cmp	sl, r3
    7a18:	fa02 f207 	lsl.w	r2, r2, r7
    7a1c:	d940      	bls.n	7aa0 <__udivmoddi4+0x298>
    7a1e:	18e3      	adds	r3, r4, r3
    7a20:	f108 30ff 	add.w	r0, r8, #4294967295
    7a24:	d204      	bcs.n	7a30 <__udivmoddi4+0x228>
    7a26:	459a      	cmp	sl, r3
    7a28:	d902      	bls.n	7a30 <__udivmoddi4+0x228>
    7a2a:	f1a8 0002 	sub.w	r0, r8, #2
    7a2e:	4423      	add	r3, r4
    7a30:	eba3 030a 	sub.w	r3, r3, sl
    7a34:	b289      	uxth	r1, r1
    7a36:	fbb3 f8f9 	udiv	r8, r3, r9
    7a3a:	fb09 3318 	mls	r3, r9, r8, r3
    7a3e:	fb08 fe0e 	mul.w	lr, r8, lr
    7a42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    7a46:	458e      	cmp	lr, r1
    7a48:	d92c      	bls.n	7aa4 <__udivmoddi4+0x29c>
    7a4a:	1861      	adds	r1, r4, r1
    7a4c:	f108 33ff 	add.w	r3, r8, #4294967295
    7a50:	d204      	bcs.n	7a5c <__udivmoddi4+0x254>
    7a52:	458e      	cmp	lr, r1
    7a54:	d902      	bls.n	7a5c <__udivmoddi4+0x254>
    7a56:	f1a8 0302 	sub.w	r3, r8, #2
    7a5a:	4421      	add	r1, r4
    7a5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    7a60:	fba0 9802 	umull	r9, r8, r0, r2
    7a64:	eba1 010e 	sub.w	r1, r1, lr
    7a68:	4541      	cmp	r1, r8
    7a6a:	46ce      	mov	lr, r9
    7a6c:	4643      	mov	r3, r8
    7a6e:	d302      	bcc.n	7a76 <__udivmoddi4+0x26e>
    7a70:	d106      	bne.n	7a80 <__udivmoddi4+0x278>
    7a72:	454d      	cmp	r5, r9
    7a74:	d204      	bcs.n	7a80 <__udivmoddi4+0x278>
    7a76:	ebb9 0e02 	subs.w	lr, r9, r2
    7a7a:	eb68 0304 	sbc.w	r3, r8, r4
    7a7e:	3801      	subs	r0, #1
    7a80:	2e00      	cmp	r6, #0
    7a82:	d0a6      	beq.n	79d2 <__udivmoddi4+0x1ca>
    7a84:	ebb5 020e 	subs.w	r2, r5, lr
    7a88:	eb61 0103 	sbc.w	r1, r1, r3
    7a8c:	fa01 fc0c 	lsl.w	ip, r1, ip
    7a90:	fa22 f307 	lsr.w	r3, r2, r7
    7a94:	ea4c 0303 	orr.w	r3, ip, r3
    7a98:	40f9      	lsrs	r1, r7
    7a9a:	e9c6 3100 	strd	r3, r1, [r6]
    7a9e:	e798      	b.n	79d2 <__udivmoddi4+0x1ca>
    7aa0:	4640      	mov	r0, r8
    7aa2:	e7c5      	b.n	7a30 <__udivmoddi4+0x228>
    7aa4:	4643      	mov	r3, r8
    7aa6:	e7d9      	b.n	7a5c <__udivmoddi4+0x254>
    7aa8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7aac:	4681      	mov	r9, r0
    7aae:	f100 0007 	add.w	r0, r0, #7
    7ab2:	f020 0007 	bic.w	r0, r0, #7
    7ab6:	ea5f 0802 	movs.w	r8, r2
    7aba:	9000      	str	r0, [sp, #0]
    7abc:	784a      	ldrb	r2, [r1, #1]
    7abe:	f88d 2004 	strb.w	r2, [sp, #4]
    7ac2:	788a      	ldrb	r2, [r1, #2]
    7ac4:	460c      	mov	r4, r1
    7ac6:	f88d 2005 	strb.w	r2, [sp, #5]
    7aca:	d000      	beq.n	7ace <__udivmoddi4+0x2c6>
    7acc:	2000      	movs	r0, #0
    7ace:	a901      	add	r1, sp, #4
    7ad0:	f7f8 ff24 	bl	91c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    7ad4:	9900      	ldr	r1, [sp, #0]
    7ad6:	2600      	movs	r6, #0
    7ad8:	4408      	add	r0, r1
    7ada:	9000      	str	r0, [sp, #0]
    7adc:	7820      	ldrb	r0, [r4, #0]
    7ade:	7861      	ldrb	r1, [r4, #1]
    7ae0:	4635      	mov	r5, r6
    7ae2:	4408      	add	r0, r1
    7ae4:	b2c7      	uxtb	r7, r0
    7ae6:	e008      	b.n	7afa <__udivmoddi4+0x2f2>
    7ae8:	7a23      	ldrb	r3, [r4, #8]
    7aea:	79e2      	ldrb	r2, [r4, #7]
    7aec:	79a1      	ldrb	r1, [r4, #6]
    7aee:	7960      	ldrb	r0, [r4, #5]
    7af0:	f000 fc4c 	bl	838c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    7af4:	1c6d      	adds	r5, r5, #1
    7af6:	4406      	add	r6, r0
    7af8:	b2ed      	uxtb	r5, r5
    7afa:	42bd      	cmp	r5, r7
    7afc:	d3f4      	bcc.n	7ae8 <__udivmoddi4+0x2e0>
    7afe:	9800      	ldr	r0, [sp, #0]
    7b00:	1cc0      	adds	r0, r0, #3
    7b02:	f020 0003 	bic.w	r0, r0, #3
    7b06:	9000      	str	r0, [sp, #0]
    7b08:	f1b8 0f00 	cmp.w	r8, #0
    7b0c:	d000      	beq.n	7b10 <__udivmoddi4+0x308>
    7b0e:	2000      	movs	r0, #0
    7b10:	4632      	mov	r2, r6
    7b12:	4639      	mov	r1, r7
    7b14:	f7f9 f83c 	bl	b90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    7b18:	9900      	ldr	r1, [sp, #0]
    7b1a:	4642      	mov	r2, r8
    7b1c:	4408      	add	r0, r1
    7b1e:	9000      	str	r0, [sp, #0]
    7b20:	4621      	mov	r1, r4
    7b22:	4668      	mov	r0, sp
    7b24:	f000 f805 	bl	7b32 <__udivmoddi4+0x32a>
    7b28:	9900      	ldr	r1, [sp, #0]
    7b2a:	eba1 0009 	sub.w	r0, r1, r9
    7b2e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    7b32:	b570      	push	{r4, r5, r6, lr}
    7b34:	4605      	mov	r5, r0
    7b36:	7888      	ldrb	r0, [r1, #2]
    7b38:	4616      	mov	r6, r2
    7b3a:	460c      	mov	r4, r1
    7b3c:	b188      	cbz	r0, 7b62 <__udivmoddi4+0x35a>
    7b3e:	6828      	ldr	r0, [r5, #0]
    7b40:	1cc0      	adds	r0, r0, #3
    7b42:	f020 0003 	bic.w	r0, r0, #3
    7b46:	6028      	str	r0, [r5, #0]
    7b48:	7de1      	ldrb	r1, [r4, #23]
    7b4a:	78e2      	ldrb	r2, [r4, #3]
    7b4c:	8a63      	ldrh	r3, [r4, #18]
    7b4e:	4411      	add	r1, r2
    7b50:	b2ca      	uxtb	r2, r1
    7b52:	78a1      	ldrb	r1, [r4, #2]
    7b54:	b106      	cbz	r6, 7b58 <__udivmoddi4+0x350>
    7b56:	2000      	movs	r0, #0
    7b58:	f7f9 f8a4 	bl	ca4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    7b5c:	6829      	ldr	r1, [r5, #0]
    7b5e:	4408      	add	r0, r1
    7b60:	6028      	str	r0, [r5, #0]
    7b62:	7d20      	ldrb	r0, [r4, #20]
    7b64:	2800      	cmp	r0, #0
    7b66:	d00f      	beq.n	7b88 <__udivmoddi4+0x380>
    7b68:	78a0      	ldrb	r0, [r4, #2]
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d00c      	beq.n	7b88 <__udivmoddi4+0x380>
    7b6e:	6828      	ldr	r0, [r5, #0]
    7b70:	1dc0      	adds	r0, r0, #7
    7b72:	f020 0007 	bic.w	r0, r0, #7
    7b76:	6028      	str	r0, [r5, #0]
    7b78:	7d21      	ldrb	r1, [r4, #20]
    7b7a:	b106      	cbz	r6, 7b7e <__udivmoddi4+0x376>
    7b7c:	2000      	movs	r0, #0
    7b7e:	f7f9 fdfd 	bl	177c <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    7b82:	6829      	ldr	r1, [r5, #0]
    7b84:	4408      	add	r0, r1
    7b86:	6028      	str	r0, [r5, #0]
    7b88:	bd70      	pop	{r4, r5, r6, pc}
    7b8a:	b570      	push	{r4, r5, r6, lr}
    7b8c:	460c      	mov	r4, r1
    7b8e:	4605      	mov	r5, r0
    7b90:	f7f8 fd0a 	bl	5a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    7b94:	2800      	cmp	r0, #0
    7b96:	d002      	beq.n	7b9e <__udivmoddi4+0x396>
    7b98:	2d3e      	cmp	r5, #62	; 0x3e
    7b9a:	d001      	beq.n	7ba0 <__udivmoddi4+0x398>
    7b9c:	2001      	movs	r0, #1
    7b9e:	bd70      	pop	{r4, r5, r6, pc}
    7ba0:	2c12      	cmp	r4, #18
    7ba2:	d004      	beq.n	7bae <__udivmoddi4+0x3a6>
    7ba4:	4620      	mov	r0, r4
    7ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7baa:	f7f8 bd0f 	b.w	5cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7bae:	2000      	movs	r0, #0
    7bb0:	bd70      	pop	{r4, r5, r6, pc}

00007bb2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    7bb2:	b510      	push	{r4, lr}
    7bb4:	460c      	mov	r4, r1
    7bb6:	7909      	ldrb	r1, [r1, #4]
    7bb8:	7001      	strb	r1, [r0, #0]
    7bba:	7841      	ldrb	r1, [r0, #1]
    7bbc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    7bc0:	7041      	strb	r1, [r0, #1]
    7bc2:	88a2      	ldrh	r2, [r4, #4]
    7bc4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    7bc8:	4311      	orrs	r1, r2
    7bca:	7041      	strb	r1, [r0, #1]
    7bcc:	79a2      	ldrb	r2, [r4, #6]
    7bce:	7082      	strb	r2, [r0, #2]
    7bd0:	88e2      	ldrh	r2, [r4, #6]
    7bd2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    7bd6:	0a12      	lsrs	r2, r2, #8
    7bd8:	70c2      	strb	r2, [r0, #3]
    7bda:	7041      	strb	r1, [r0, #1]
    7bdc:	7a22      	ldrb	r2, [r4, #8]
    7bde:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7be2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    7be6:	7041      	strb	r1, [r0, #1]
    7be8:	7a62      	ldrb	r2, [r4, #9]
    7bea:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    7bee:	7041      	strb	r1, [r0, #1]
    7bf0:	6821      	ldr	r1, [r4, #0]
    7bf2:	1d02      	adds	r2, r0, #4
    7bf4:	4291      	cmp	r1, r2
    7bf6:	d006      	beq.n	7c06 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    7bf8:	88e2      	ldrh	r2, [r4, #6]
    7bfa:	2afb      	cmp	r2, #251	; 0xfb
    7bfc:	d300      	bcc.n	7c00 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    7bfe:	22fb      	movs	r2, #251	; 0xfb
    7c00:	1d00      	adds	r0, r0, #4
    7c02:	f002 f9f5 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7c06:	79a0      	ldrb	r0, [r4, #6]
    7c08:	1d00      	adds	r0, r0, #4
    7c0a:	b2c0      	uxtb	r0, r0
    7c0c:	bd10      	pop	{r4, pc}

00007c0e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    7c0e:	b430      	push	{r4, r5}
    7c10:	790a      	ldrb	r2, [r1, #4]
    7c12:	7002      	strb	r2, [r0, #0]
    7c14:	7842      	ldrb	r2, [r0, #1]
    7c16:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    7c1a:	7042      	strb	r2, [r0, #1]
    7c1c:	888b      	ldrh	r3, [r1, #4]
    7c1e:	f3c3 2303 	ubfx	r3, r3, #8, #4
    7c22:	431a      	orrs	r2, r3
    7c24:	7042      	strb	r2, [r0, #1]
    7c26:	798b      	ldrb	r3, [r1, #6]
    7c28:	7083      	strb	r3, [r0, #2]
    7c2a:	78c3      	ldrb	r3, [r0, #3]
    7c2c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    7c30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7c34:	70c3      	strb	r3, [r0, #3]
    7c36:	88cc      	ldrh	r4, [r1, #6]
    7c38:	f3c4 2405 	ubfx	r4, r4, #8, #6
    7c3c:	4323      	orrs	r3, r4
    7c3e:	70c3      	strb	r3, [r0, #3]
    7c40:	7042      	strb	r2, [r0, #1]
    7c42:	7a0c      	ldrb	r4, [r1, #8]
    7c44:	f004 0403 	and.w	r4, r4, #3
    7c48:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    7c4c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    7c50:	7042      	strb	r2, [r0, #1]
    7c52:	7a4c      	ldrb	r4, [r1, #9]
    7c54:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    7c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7c5c:	7042      	strb	r2, [r0, #1]
    7c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    7c62:	70c2      	strb	r2, [r0, #3]
    7c64:	680b      	ldr	r3, [r1, #0]
    7c66:	1d02      	adds	r2, r0, #4
    7c68:	4293      	cmp	r3, r2
    7c6a:	d005      	beq.n	7c78 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    7c6c:	88ca      	ldrh	r2, [r1, #6]
    7c6e:	bc30      	pop	{r4, r5}
    7c70:	4619      	mov	r1, r3
    7c72:	1d00      	adds	r0, r0, #4
    7c74:	f002 b9bc 	b.w	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7c78:	bc30      	pop	{r4, r5}
    7c7a:	4770      	bx	lr

00007c7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    7c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c80:	460d      	mov	r5, r1
    7c82:	4604      	mov	r4, r0
    7c84:	f891 c000 	ldrb.w	ip, [r1]
    7c88:	2000      	movs	r0, #0
    7c8a:	230c      	movs	r3, #12
    7c8c:	2705      	movs	r7, #5
    7c8e:	2203      	movs	r2, #3
    7c90:	263e      	movs	r6, #62	; 0x3e
    7c92:	21ff      	movs	r1, #255	; 0xff
    7c94:	f1bc 0f1e 	cmp.w	ip, #30
    7c98:	d27e      	bcs.n	7d98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    7c9a:	e8df f00c 	tbb	[pc, ip]
    7c9e:	29e7      	.short	0x29e7
    7ca0:	63e74240 	.word	0x63e74240
    7ca4:	ac99806d 	.word	0xac99806d
    7ca8:	dfc4b9ae 	.word	0xdfc4b9ae
    7cac:	e7e70ff3 	.word	0xe7e70ff3
    7cb0:	fcd2cf48 	.word	0xfcd2cf48
    7cb4:	edeeeff0 	.word	0xedeeeff0
    7cb8:	e9eaebec 	.word	0xe9eaebec
    7cbc:	200e      	movs	r0, #14
    7cbe:	7020      	strb	r0, [r4, #0]
    7cc0:	7968      	ldrb	r0, [r5, #5]
    7cc2:	70e0      	strb	r0, [r4, #3]
    7cc4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7cc8:	0a00      	lsrs	r0, r0, #8
    7cca:	7120      	strb	r0, [r4, #4]
    7ccc:	7928      	ldrb	r0, [r5, #4]
    7cce:	70a0      	strb	r0, [r4, #2]
    7cd0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7cd4:	3883      	subs	r0, #131	; 0x83
    7cd6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    7cda:	d003      	beq.n	7ce4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    7cdc:	2136      	movs	r1, #54	; 0x36
    7cde:	20c7      	movs	r0, #199	; 0xc7
    7ce0:	f7f8 fb22 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ce4:	1de9      	adds	r1, r5, #7
    7ce6:	1d60      	adds	r0, r4, #5
    7ce8:	f002 f982 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7cec:	2007      	movs	r0, #7
    7cee:	e0bb      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7cf0:	7023      	strb	r3, [r4, #0]
    7cf2:	7928      	ldrb	r0, [r5, #4]
    7cf4:	70a0      	strb	r0, [r4, #2]
    7cf6:	7968      	ldrb	r0, [r5, #5]
    7cf8:	70e0      	strb	r0, [r4, #3]
    7cfa:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7cfe:	0a00      	lsrs	r0, r0, #8
    7d00:	7120      	strb	r0, [r4, #4]
    7d02:	79e8      	ldrb	r0, [r5, #7]
    7d04:	7160      	strb	r0, [r4, #5]
    7d06:	7a28      	ldrb	r0, [r5, #8]
    7d08:	71a0      	strb	r0, [r4, #6]
    7d0a:	8928      	ldrh	r0, [r5, #8]
    7d0c:	0a00      	lsrs	r0, r0, #8
    7d0e:	71e0      	strb	r0, [r4, #7]
    7d10:	7aa8      	ldrb	r0, [r5, #10]
    7d12:	7220      	strb	r0, [r4, #8]
    7d14:	8968      	ldrh	r0, [r5, #10]
    7d16:	0a00      	lsrs	r0, r0, #8
    7d18:	7260      	strb	r0, [r4, #9]
    7d1a:	2008      	movs	r0, #8
    7d1c:	e0a4      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d1e:	2010      	movs	r0, #16
    7d20:	e000      	b.n	7d24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    7d22:	201a      	movs	r0, #26
    7d24:	7020      	strb	r0, [r4, #0]
    7d26:	7928      	ldrb	r0, [r5, #4]
    7d28:	70a0      	strb	r0, [r4, #2]
    7d2a:	2001      	movs	r0, #1
    7d2c:	e09c      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d2e:	2029      	movs	r0, #41	; 0x29
    7d30:	f7f8 fc4c 	bl	5cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7d34:	b148      	cbz	r0, 7d4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    7d36:	7026      	strb	r6, [r4, #0]
    7d38:	2029      	movs	r0, #41	; 0x29
    7d3a:	70a0      	strb	r0, [r4, #2]
    7d3c:	2221      	movs	r2, #33	; 0x21
    7d3e:	1d29      	adds	r1, r5, #4
    7d40:	1ce0      	adds	r0, r4, #3
    7d42:	f002 f955 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d46:	2022      	movs	r0, #34	; 0x22
    7d48:	e08e      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d4a:	200a      	movs	r0, #10
    7d4c:	f7f8 fc3e 	bl	5cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7d50:	2800      	cmp	r0, #0
    7d52:	4629      	mov	r1, r5
    7d54:	4620      	mov	r0, r4
    7d56:	d002      	beq.n	7d5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    7d58:	f000 f95b 	bl	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    7d5c:	e082      	b.n	7e64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    7d5e:	f000 f92f 	bl	7fc0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    7d62:	e07f      	b.n	7e64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    7d64:	7026      	strb	r6, [r4, #0]
    7d66:	2014      	movs	r0, #20
    7d68:	70a0      	strb	r0, [r4, #2]
    7d6a:	7928      	ldrb	r0, [r5, #4]
    7d6c:	70e0      	strb	r0, [r4, #3]
    7d6e:	88a8      	ldrh	r0, [r5, #4]
    7d70:	0a00      	lsrs	r0, r0, #8
    7d72:	7120      	strb	r0, [r4, #4]
    7d74:	79a8      	ldrb	r0, [r5, #6]
    7d76:	e0c0      	b.n	7efa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    7d78:	223e      	movs	r2, #62	; 0x3e
    7d7a:	7022      	strb	r2, [r4, #0]
    7d7c:	2204      	movs	r2, #4
    7d7e:	70a2      	strb	r2, [r4, #2]
    7d80:	6868      	ldr	r0, [r5, #4]
    7d82:	f8c4 0003 	str.w	r0, [r4, #3]
    7d86:	68a8      	ldr	r0, [r5, #8]
    7d88:	f8c4 0007 	str.w	r0, [r4, #7]
    7d8c:	89a8      	ldrh	r0, [r5, #12]
    7d8e:	f8a4 000b 	strh.w	r0, [r4, #11]
    7d92:	7ba8      	ldrb	r0, [r5, #14]
    7d94:	7360      	strb	r0, [r4, #13]
    7d96:	e000      	b.n	7d9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    7d98:	e068      	b.n	7e6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    7d9a:	200c      	movs	r0, #12
    7d9c:	e064      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d9e:	7026      	strb	r6, [r4, #0]
    7da0:	70a2      	strb	r2, [r4, #2]
    7da2:	7928      	ldrb	r0, [r5, #4]
    7da4:	70e0      	strb	r0, [r4, #3]
    7da6:	79a8      	ldrb	r0, [r5, #6]
    7da8:	7120      	strb	r0, [r4, #4]
    7daa:	88e8      	ldrh	r0, [r5, #6]
    7dac:	0a00      	lsrs	r0, r0, #8
    7dae:	7160      	strb	r0, [r4, #5]
    7db0:	7a28      	ldrb	r0, [r5, #8]
    7db2:	71a0      	strb	r0, [r4, #6]
    7db4:	8928      	ldrh	r0, [r5, #8]
    7db6:	0a00      	lsrs	r0, r0, #8
    7db8:	71e0      	strb	r0, [r4, #7]
    7dba:	7aa8      	ldrb	r0, [r5, #10]
    7dbc:	7220      	strb	r0, [r4, #8]
    7dbe:	8968      	ldrh	r0, [r5, #10]
    7dc0:	0a00      	lsrs	r0, r0, #8
    7dc2:	7260      	strb	r0, [r4, #9]
    7dc4:	7b28      	ldrb	r0, [r5, #12]
    7dc6:	72a0      	strb	r0, [r4, #10]
    7dc8:	89a8      	ldrh	r0, [r5, #12]
    7dca:	0a00      	lsrs	r0, r0, #8
    7dcc:	72e0      	strb	r0, [r4, #11]
    7dce:	e0d1      	b.n	7f74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    7dd0:	7026      	strb	r6, [r4, #0]
    7dd2:	70a7      	strb	r7, [r4, #2]
    7dd4:	7928      	ldrb	r0, [r5, #4]
    7dd6:	70e0      	strb	r0, [r4, #3]
    7dd8:	88a8      	ldrh	r0, [r5, #4]
    7dda:	0a00      	lsrs	r0, r0, #8
    7ddc:	7120      	strb	r0, [r4, #4]
    7dde:	f8d5 0006 	ldr.w	r0, [r5, #6]
    7de2:	f8c4 0005 	str.w	r0, [r4, #5]
    7de6:	f8d5 000a 	ldr.w	r0, [r5, #10]
    7dea:	f8c4 0009 	str.w	r0, [r4, #9]
    7dee:	89e8      	ldrh	r0, [r5, #14]
    7df0:	f8a4 000d 	strh.w	r0, [r4, #13]
    7df4:	e0e2      	b.n	7fbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    7df6:	2011      	movs	r0, #17
    7df8:	e045      	b.n	7e86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    7dfa:	7027      	strb	r7, [r4, #0]
    7dfc:	7928      	ldrb	r0, [r5, #4]
    7dfe:	70a0      	strb	r0, [r4, #2]
    7e00:	7968      	ldrb	r0, [r5, #5]
    7e02:	70e0      	strb	r0, [r4, #3]
    7e04:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7e08:	0a00      	lsrs	r0, r0, #8
    7e0a:	7120      	strb	r0, [r4, #4]
    7e0c:	79e8      	ldrb	r0, [r5, #7]
    7e0e:	e074      	b.n	7efa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    7e10:	2008      	movs	r0, #8
    7e12:	7020      	strb	r0, [r4, #0]
    7e14:	7928      	ldrb	r0, [r5, #4]
    7e16:	70a0      	strb	r0, [r4, #2]
    7e18:	79a8      	ldrb	r0, [r5, #6]
    7e1a:	70e0      	strb	r0, [r4, #3]
    7e1c:	88e8      	ldrh	r0, [r5, #6]
    7e1e:	0a00      	lsrs	r0, r0, #8
    7e20:	7120      	strb	r0, [r4, #4]
    7e22:	7a28      	ldrb	r0, [r5, #8]
    7e24:	e069      	b.n	7efa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    7e26:	2030      	movs	r0, #48	; 0x30
    7e28:	7020      	strb	r0, [r4, #0]
    7e2a:	7928      	ldrb	r0, [r5, #4]
    7e2c:	70a0      	strb	r0, [r4, #2]
    7e2e:	79a8      	ldrb	r0, [r5, #6]
    7e30:	70e0      	strb	r0, [r4, #3]
    7e32:	88e8      	ldrh	r0, [r5, #6]
    7e34:	0a00      	lsrs	r0, r0, #8
    7e36:	7120      	strb	r0, [r4, #4]
    7e38:	2003      	movs	r0, #3
    7e3a:	e015      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7e3c:	7026      	strb	r6, [r4, #0]
    7e3e:	2007      	movs	r0, #7
    7e40:	e060      	b.n	7f04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    7e42:	7026      	strb	r6, [r4, #0]
    7e44:	70a3      	strb	r3, [r4, #2]
    7e46:	7928      	ldrb	r0, [r5, #4]
    7e48:	70e0      	strb	r0, [r4, #3]
    7e4a:	79a8      	ldrb	r0, [r5, #6]
    7e4c:	7120      	strb	r0, [r4, #4]
    7e4e:	88e8      	ldrh	r0, [r5, #6]
    7e50:	0a00      	lsrs	r0, r0, #8
    7e52:	7160      	strb	r0, [r4, #5]
    7e54:	7a28      	ldrb	r0, [r5, #8]
    7e56:	71a0      	strb	r0, [r4, #6]
    7e58:	7a68      	ldrb	r0, [r5, #9]
    7e5a:	e029      	b.n	7eb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    7e5c:	1d29      	adds	r1, r5, #4
    7e5e:	4620      	mov	r0, r4
    7e60:	f7f8 fb74 	bl	54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
    7e64:	2800      	cmp	r0, #0
    7e66:	d001      	beq.n	7e6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    7e68:	7060      	strb	r0, [r4, #1]
    7e6a:	1c80      	adds	r0, r0, #2
    7e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e70:	e08f      	b.n	7f92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    7e72:	e063      	b.n	7f3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    7e74:	e044      	b.n	7f00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    7e76:	e06f      	b.n	7f58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    7e78:	e07e      	b.n	7f78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    7e7a:	e036      	b.n	7eea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    7e7c:	e01e      	b.n	7ebc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    7e7e:	e01a      	b.n	7eb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    7e80:	e009      	b.n	7e96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    7e82:	e7ff      	b.n	7e84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    7e84:	2057      	movs	r0, #87	; 0x57
    7e86:	7020      	strb	r0, [r4, #0]
    7e88:	7928      	ldrb	r0, [r5, #4]
    7e8a:	70a0      	strb	r0, [r4, #2]
    7e8c:	88a8      	ldrh	r0, [r5, #4]
    7e8e:	0a00      	lsrs	r0, r0, #8
    7e90:	70e0      	strb	r0, [r4, #3]
    7e92:	2002      	movs	r0, #2
    7e94:	e7e8      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7e96:	7026      	strb	r6, [r4, #0]
    7e98:	2012      	movs	r0, #18
    7e9a:	70a0      	strb	r0, [r4, #2]
    7e9c:	7928      	ldrb	r0, [r5, #4]
    7e9e:	70e0      	strb	r0, [r4, #3]
    7ea0:	7968      	ldrb	r0, [r5, #5]
    7ea2:	7120      	strb	r0, [r4, #4]
    7ea4:	79a8      	ldrb	r0, [r5, #6]
    7ea6:	7160      	strb	r0, [r4, #5]
    7ea8:	88e8      	ldrh	r0, [r5, #6]
    7eaa:	0a00      	lsrs	r0, r0, #8
    7eac:	71a0      	strb	r0, [r4, #6]
    7eae:	7a28      	ldrb	r0, [r5, #8]
    7eb0:	71e0      	strb	r0, [r4, #7]
    7eb2:	2006      	movs	r0, #6
    7eb4:	e7d8      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7eb6:	7026      	strb	r6, [r4, #0]
    7eb8:	2020      	movs	r0, #32
    7eba:	e041      	b.n	7f40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    7ebc:	7026      	strb	r6, [r4, #0]
    7ebe:	2021      	movs	r0, #33	; 0x21
    7ec0:	70a0      	strb	r0, [r4, #2]
    7ec2:	7928      	ldrb	r0, [r5, #4]
    7ec4:	70e0      	strb	r0, [r4, #3]
    7ec6:	7968      	ldrb	r0, [r5, #5]
    7ec8:	7120      	strb	r0, [r4, #4]
    7eca:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7ece:	0a00      	lsrs	r0, r0, #8
    7ed0:	7160      	strb	r0, [r4, #5]
    7ed2:	79e8      	ldrb	r0, [r5, #7]
    7ed4:	71a0      	strb	r0, [r4, #6]
    7ed6:	7a28      	ldrb	r0, [r5, #8]
    7ed8:	71e0      	strb	r0, [r4, #7]
    7eda:	7a68      	ldrb	r0, [r5, #9]
    7edc:	7220      	strb	r0, [r4, #8]
    7ede:	7aa8      	ldrb	r0, [r5, #10]
    7ee0:	7260      	strb	r0, [r4, #9]
    7ee2:	7ae8      	ldrb	r0, [r5, #11]
    7ee4:	72a0      	strb	r0, [r4, #10]
    7ee6:	2009      	movs	r0, #9
    7ee8:	e7be      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7eea:	7021      	strb	r1, [r4, #0]
    7eec:	20a1      	movs	r0, #161	; 0xa1
    7eee:	70a0      	strb	r0, [r4, #2]
    7ef0:	7928      	ldrb	r0, [r5, #4]
    7ef2:	70e0      	strb	r0, [r4, #3]
    7ef4:	7968      	ldrb	r0, [r5, #5]
    7ef6:	7120      	strb	r0, [r4, #4]
    7ef8:	2000      	movs	r0, #0
    7efa:	7160      	strb	r0, [r4, #5]
    7efc:	2004      	movs	r0, #4
    7efe:	e7b3      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f00:	7021      	strb	r1, [r4, #0]
    7f02:	20a2      	movs	r0, #162	; 0xa2
    7f04:	70a0      	strb	r0, [r4, #2]
    7f06:	7928      	ldrb	r0, [r5, #4]
    7f08:	70e0      	strb	r0, [r4, #3]
    7f0a:	88a8      	ldrh	r0, [r5, #4]
    7f0c:	0a00      	lsrs	r0, r0, #8
    7f0e:	7120      	strb	r0, [r4, #4]
    7f10:	79a8      	ldrb	r0, [r5, #6]
    7f12:	7160      	strb	r0, [r4, #5]
    7f14:	88e8      	ldrh	r0, [r5, #6]
    7f16:	0a00      	lsrs	r0, r0, #8
    7f18:	71a0      	strb	r0, [r4, #6]
    7f1a:	7a28      	ldrb	r0, [r5, #8]
    7f1c:	71e0      	strb	r0, [r4, #7]
    7f1e:	8928      	ldrh	r0, [r5, #8]
    7f20:	0a00      	lsrs	r0, r0, #8
    7f22:	7220      	strb	r0, [r4, #8]
    7f24:	7aa8      	ldrb	r0, [r5, #10]
    7f26:	7260      	strb	r0, [r4, #9]
    7f28:	8968      	ldrh	r0, [r5, #10]
    7f2a:	0a00      	lsrs	r0, r0, #8
    7f2c:	72a0      	strb	r0, [r4, #10]
    7f2e:	7b28      	ldrb	r0, [r5, #12]
    7f30:	72e0      	strb	r0, [r4, #11]
    7f32:	89a8      	ldrh	r0, [r5, #12]
    7f34:	0a00      	lsrs	r0, r0, #8
    7f36:	7320      	strb	r0, [r4, #12]
    7f38:	200b      	movs	r0, #11
    7f3a:	e795      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f3c:	7021      	strb	r1, [r4, #0]
    7f3e:	20a3      	movs	r0, #163	; 0xa3
    7f40:	70a0      	strb	r0, [r4, #2]
    7f42:	7928      	ldrb	r0, [r5, #4]
    7f44:	70e0      	strb	r0, [r4, #3]
    7f46:	88a8      	ldrh	r0, [r5, #4]
    7f48:	0a00      	lsrs	r0, r0, #8
    7f4a:	7120      	strb	r0, [r4, #4]
    7f4c:	79a8      	ldrb	r0, [r5, #6]
    7f4e:	7160      	strb	r0, [r4, #5]
    7f50:	79e8      	ldrb	r0, [r5, #7]
    7f52:	71a0      	strb	r0, [r4, #6]
    7f54:	2005      	movs	r0, #5
    7f56:	e787      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f58:	7026      	strb	r6, [r4, #0]
    7f5a:	2013      	movs	r0, #19
    7f5c:	70a0      	strb	r0, [r4, #2]
    7f5e:	7928      	ldrb	r0, [r5, #4]
    7f60:	70e0      	strb	r0, [r4, #3]
    7f62:	7968      	ldrb	r0, [r5, #5]
    7f64:	7120      	strb	r0, [r4, #4]
    7f66:	f8d5 0006 	ldr.w	r0, [r5, #6]
    7f6a:	f8c4 0005 	str.w	r0, [r4, #5]
    7f6e:	8968      	ldrh	r0, [r5, #10]
    7f70:	f8a4 0009 	strh.w	r0, [r4, #9]
    7f74:	200a      	movs	r0, #10
    7f76:	e777      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f78:	7021      	strb	r1, [r4, #0]
    7f7a:	20a4      	movs	r0, #164	; 0xa4
    7f7c:	70a0      	strb	r0, [r4, #2]
    7f7e:	7928      	ldrb	r0, [r5, #4]
    7f80:	70e0      	strb	r0, [r4, #3]
    7f82:	88a8      	ldrh	r0, [r5, #4]
    7f84:	0a00      	lsrs	r0, r0, #8
    7f86:	7120      	strb	r0, [r4, #4]
    7f88:	79a8      	ldrb	r0, [r5, #6]
    7f8a:	7160      	strb	r0, [r4, #5]
    7f8c:	79e8      	ldrb	r0, [r5, #7]
    7f8e:	71a0      	strb	r0, [r4, #6]
    7f90:	e6ac      	b.n	7cec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    7f92:	7021      	strb	r1, [r4, #0]
    7f94:	2080      	movs	r0, #128	; 0x80
    7f96:	70a0      	strb	r0, [r4, #2]
    7f98:	88a9      	ldrh	r1, [r5, #4]
    7f9a:	f8a4 1003 	strh.w	r1, [r4, #3]
    7f9e:	88e9      	ldrh	r1, [r5, #6]
    7fa0:	f8a4 1005 	strh.w	r1, [r4, #5]
    7fa4:	7a29      	ldrb	r1, [r5, #8]
    7fa6:	71e1      	strb	r1, [r4, #7]
    7fa8:	8969      	ldrh	r1, [r5, #10]
    7faa:	8121      	strh	r1, [r4, #8]
    7fac:	89a9      	ldrh	r1, [r5, #12]
    7fae:	8161      	strh	r1, [r4, #10]
    7fb0:	89e9      	ldrh	r1, [r5, #14]
    7fb2:	81a1      	strh	r1, [r4, #12]
    7fb4:	7c29      	ldrb	r1, [r5, #16]
    7fb6:	f001 0101 	and.w	r1, r1, #1
    7fba:	73a1      	strb	r1, [r4, #14]
    7fbc:	200d      	movs	r0, #13
    7fbe:	e753      	b.n	7e68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

00007fc0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    7fc0:	223e      	movs	r2, #62	; 0x3e
    7fc2:	7002      	strb	r2, [r0, #0]
    7fc4:	2201      	movs	r2, #1
    7fc6:	7082      	strb	r2, [r0, #2]
    7fc8:	790a      	ldrb	r2, [r1, #4]
    7fca:	70c2      	strb	r2, [r0, #3]
    7fcc:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    7fd0:	7102      	strb	r2, [r0, #4]
    7fd2:	880a      	ldrh	r2, [r1, #0]
    7fd4:	0a12      	lsrs	r2, r2, #8
    7fd6:	7142      	strb	r2, [r0, #5]
    7fd8:	788a      	ldrb	r2, [r1, #2]
    7fda:	7182      	strb	r2, [r0, #6]
    7fdc:	78ca      	ldrb	r2, [r1, #3]
    7fde:	71c2      	strb	r2, [r0, #7]
    7fe0:	684a      	ldr	r2, [r1, #4]
    7fe2:	6082      	str	r2, [r0, #8]
    7fe4:	890a      	ldrh	r2, [r1, #8]
    7fe6:	8182      	strh	r2, [r0, #12]
    7fe8:	7d8a      	ldrb	r2, [r1, #22]
    7fea:	7382      	strb	r2, [r0, #14]
    7fec:	8aca      	ldrh	r2, [r1, #22]
    7fee:	0a12      	lsrs	r2, r2, #8
    7ff0:	73c2      	strb	r2, [r0, #15]
    7ff2:	7e0a      	ldrb	r2, [r1, #24]
    7ff4:	7402      	strb	r2, [r0, #16]
    7ff6:	8b0a      	ldrh	r2, [r1, #24]
    7ff8:	0a12      	lsrs	r2, r2, #8
    7ffa:	7442      	strb	r2, [r0, #17]
    7ffc:	7e8a      	ldrb	r2, [r1, #26]
    7ffe:	7482      	strb	r2, [r0, #18]
    8000:	8b4a      	ldrh	r2, [r1, #26]
    8002:	0a12      	lsrs	r2, r2, #8
    8004:	74c2      	strb	r2, [r0, #19]
    8006:	7f09      	ldrb	r1, [r1, #28]
    8008:	7501      	strb	r1, [r0, #20]
    800a:	2113      	movs	r1, #19
    800c:	7041      	strb	r1, [r0, #1]
    800e:	4608      	mov	r0, r1
    8010:	4770      	bx	lr
    8012:	223e      	movs	r2, #62	; 0x3e
    8014:	7002      	strb	r2, [r0, #0]
    8016:	220a      	movs	r2, #10
    8018:	7082      	strb	r2, [r0, #2]
    801a:	790a      	ldrb	r2, [r1, #4]
    801c:	70c2      	strb	r2, [r0, #3]
    801e:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    8022:	7102      	strb	r2, [r0, #4]
    8024:	880a      	ldrh	r2, [r1, #0]
    8026:	0a12      	lsrs	r2, r2, #8
    8028:	7142      	strb	r2, [r0, #5]
    802a:	788a      	ldrb	r2, [r1, #2]
    802c:	7182      	strb	r2, [r0, #6]
    802e:	78ca      	ldrb	r2, [r1, #3]
    8030:	71c2      	strb	r2, [r0, #7]
    8032:	684a      	ldr	r2, [r1, #4]
    8034:	6082      	str	r2, [r0, #8]
    8036:	890a      	ldrh	r2, [r1, #8]
    8038:	8182      	strh	r2, [r0, #12]
    803a:	f8d1 200a 	ldr.w	r2, [r1, #10]
    803e:	f8c0 200e 	str.w	r2, [r0, #14]
    8042:	89ca      	ldrh	r2, [r1, #14]
    8044:	8242      	strh	r2, [r0, #18]
    8046:	690a      	ldr	r2, [r1, #16]
    8048:	6142      	str	r2, [r0, #20]
    804a:	8a8a      	ldrh	r2, [r1, #20]
    804c:	8302      	strh	r2, [r0, #24]
    804e:	7d8a      	ldrb	r2, [r1, #22]
    8050:	7682      	strb	r2, [r0, #26]
    8052:	8aca      	ldrh	r2, [r1, #22]
    8054:	0a12      	lsrs	r2, r2, #8
    8056:	76c2      	strb	r2, [r0, #27]
    8058:	7e0a      	ldrb	r2, [r1, #24]
    805a:	7702      	strb	r2, [r0, #28]
    805c:	8b0a      	ldrh	r2, [r1, #24]
    805e:	0a12      	lsrs	r2, r2, #8
    8060:	7742      	strb	r2, [r0, #29]
    8062:	7e8a      	ldrb	r2, [r1, #26]
    8064:	7782      	strb	r2, [r0, #30]
    8066:	8b4a      	ldrh	r2, [r1, #26]
    8068:	0a12      	lsrs	r2, r2, #8
    806a:	77c2      	strb	r2, [r0, #31]
    806c:	7f09      	ldrb	r1, [r1, #28]
    806e:	f880 1020 	strb.w	r1, [r0, #32]
    8072:	211f      	movs	r1, #31
    8074:	7041      	strb	r1, [r0, #1]
    8076:	4608      	mov	r0, r1
    8078:	4770      	bx	lr
    807a:	094a      	lsrs	r2, r1, #5
    807c:	f001 011f 	and.w	r1, r1, #31
    8080:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    8084:	40c8      	lsrs	r0, r1
    8086:	f000 0001 	and.w	r0, r0, #1
    808a:	4770      	bx	lr

0000808c <sdc_hci_get>:
    808c:	b510      	push	{r4, lr}
    808e:	460c      	mov	r4, r1
    8090:	b130      	cbz	r0, 80a0 <sdc_hci_get+0x14>
    8092:	b12c      	cbz	r4, 80a0 <sdc_hci_get+0x14>
    8094:	f7f8 fa04 	bl	4a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    8098:	b128      	cbz	r0, 80a6 <sdc_hci_get+0x1a>
    809a:	7020      	strb	r0, [r4, #0]
    809c:	2000      	movs	r0, #0
    809e:	bd10      	pop	{r4, pc}
    80a0:	f06f 0015 	mvn.w	r0, #21
    80a4:	bd10      	pop	{r4, pc}
    80a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    80aa:	bd10      	pop	{r4, pc}

000080ac <sdc_hci_cmd_cb_set_event_mask>:
    80ac:	b510      	push	{r4, lr}
    80ae:	f7f8 fa9d 	bl	5ec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    80b2:	2000      	movs	r0, #0
    80b4:	bd10      	pop	{r4, pc}

000080b6 <sdc_hci_cmd_vs_conn_event_extend>:
    80b6:	b508      	push	{r3, lr}
    80b8:	7800      	ldrb	r0, [r0, #0]
    80ba:	f88d 0000 	strb.w	r0, [sp]
    80be:	4668      	mov	r0, sp
    80c0:	f001 fb0f 	bl	96e2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    80c4:	bd08      	pop	{r3, pc}

000080c6 <sdc_hci_cmd_vs_conn_update>:
    80c6:	2001      	movs	r0, #1
    80c8:	4770      	bx	lr

000080ca <sdc_hci_cmd_vs_event_length_set>:
    80ca:	f7fa bc29 	b.w	2920 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

000080ce <sdc_hci_cmd_vs_llpm_mode_set>:
    80ce:	2001      	movs	r0, #1
    80d0:	4770      	bx	lr

000080d2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    80d2:	7800      	ldrb	r0, [r0, #0]
    80d4:	b100      	cbz	r0, 80d8 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    80d6:	2001      	movs	r0, #1
    80d8:	f001 bad8 	b.w	968c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

000080dc <sdc_hci_cmd_vs_set_adv_randomness>:
    80dc:	f001 badb 	b.w	9696 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

000080e0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    80e0:	b510      	push	{r4, lr}
    80e2:	4604      	mov	r4, r0
    80e4:	f7ff fa36 	bl	7554 <mpsl_temperature_get>
    80e8:	17c1      	asrs	r1, r0, #31
    80ea:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    80ee:	1080      	asrs	r0, r0, #2
    80f0:	287f      	cmp	r0, #127	; 0x7f
    80f2:	dd01      	ble.n	80f8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    80f4:	207f      	movs	r0, #127	; 0x7f
    80f6:	e004      	b.n	8102 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    80f8:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    80fc:	4288      	cmp	r0, r1
    80fe:	da00      	bge.n	8102 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8100:	4608      	mov	r0, r1
    8102:	7020      	strb	r0, [r4, #0]
    8104:	2000      	movs	r0, #0
    8106:	bd10      	pop	{r4, pc}

00008108 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    8108:	f001 bada 	b.w	96c0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000810c <sdc_hci_cmd_ip_read_bd_addr>:
    810c:	f001 bbac 	b.w	9868 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00008110 <sdc_hci_cmd_ip_read_local_version_information>:
    8110:	f7fa bc14 	b.w	293c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008114 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8114:	f001 b92a 	b.w	936c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00008118 <sdc_hci_cmd_le_clear_filter_accept_list>:
    8118:	f001 b93f 	b.w	939a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000811c <sdc_hci_cmd_le_encrypt>:
    811c:	f001 b94a 	b.w	93b4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008120 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    8120:	8802      	ldrh	r2, [r0, #0]
    8122:	800a      	strh	r2, [r1, #0]
    8124:	f001 b94f 	b.w	93c6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00008128 <sdc_hci_cmd_le_rand>:
    8128:	f001 b966 	b.w	93f8 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000812c <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    812c:	f001 b96a 	b.w	9404 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00008130 <sdc_hci_cmd_le_read_buffer_size>:
    8130:	f7fa bb84 	b.w	283c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008134 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8134:	f001 b981 	b.w	943a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00008138 <sdc_hci_cmd_le_read_transmit_power>:
    8138:	f001 b96f 	b.w	941a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000813c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    813c:	f001 b984 	b.w	9448 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008140 <sdc_hci_cmd_le_set_adv_data>:
    8140:	f001 b997 	b.w	9472 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00008144 <sdc_hci_cmd_le_set_adv_enable>:
    8144:	f001 b9aa 	b.w	949c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00008148 <sdc_hci_cmd_le_set_adv_params>:
    8148:	f001 b9db 	b.w	9502 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000814c <sdc_hci_cmd_le_set_data_related_address_changes>:
    814c:	f001 ba6e 	b.w	962c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

00008150 <sdc_hci_cmd_le_set_event_mask>:
    8150:	b510      	push	{r4, lr}
    8152:	f7f8 fa43 	bl	5dc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    8156:	2000      	movs	r0, #0
    8158:	bd10      	pop	{r4, pc}

0000815a <sdc_hci_cmd_le_set_random_address>:
    815a:	f001 ba74 	b.w	9646 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000815e <sdc_hci_cmd_le_set_scan_response_data>:
    815e:	f001 ba80 	b.w	9662 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    8162:	b570      	push	{r4, r5, r6, lr}
    8164:	880b      	ldrh	r3, [r1, #0]
    8166:	7cc4      	ldrb	r4, [r0, #19]
    8168:	f100 0518 	add.w	r5, r0, #24
    816c:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8170:	8802      	ldrh	r2, [r0, #0]
    8172:	4435      	add	r5, r6
    8174:	1d64      	adds	r4, r4, #5
    8176:	882d      	ldrh	r5, [r5, #0]
    8178:	4422      	add	r2, r4
    817a:	b292      	uxth	r2, r2
    817c:	4425      	add	r5, r4
    817e:	1e54      	subs	r4, r2, #1
    8180:	442c      	add	r4, r5
    8182:	fb94 f4f2 	sdiv	r4, r4, r2
    8186:	fb02 6204 	mla	r2, r2, r4, r6
    818a:	8840      	ldrh	r0, [r0, #2]
    818c:	b292      	uxth	r2, r2
    818e:	4290      	cmp	r0, r2
    8190:	d903      	bls.n	819a <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    8192:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    8196:	4310      	orrs	r0, r2
    8198:	e002      	b.n	81a0 <sdc_hci_cmd_le_set_scan_response_data+0x42>
    819a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    819e:	4398      	bics	r0, r3
    81a0:	8008      	strh	r0, [r1, #0]
    81a2:	bd70      	pop	{r4, r5, r6, pc}

000081a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    81a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81a8:	461d      	mov	r5, r3
    81aa:	4616      	mov	r6, r2
    81ac:	9f06      	ldr	r7, [sp, #24]
    81ae:	460b      	mov	r3, r1
    81b0:	4604      	mov	r4, r0
    81b2:	463a      	mov	r2, r7
    81b4:	4629      	mov	r1, r5
    81b6:	4630      	mov	r0, r6
    81b8:	f000 f839 	bl	822e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    81bc:	4283      	cmp	r3, r0
    81be:	d201      	bcs.n	81c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    81c0:	219e      	movs	r1, #158	; 0x9e
    81c2:	e012      	b.n	81ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    81c4:	07a0      	lsls	r0, r4, #30
    81c6:	d001      	beq.n	81cc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    81c8:	219f      	movs	r1, #159	; 0x9f
    81ca:	e00e      	b.n	81ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    81cc:	2218      	movs	r2, #24
    81ce:	2100      	movs	r1, #0
    81d0:	4620      	mov	r0, r4
    81d2:	f001 ff87 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81d6:	19a8      	adds	r0, r5, r6
    81d8:	1d40      	adds	r0, r0, #5
    81da:	4378      	muls	r0, r7
    81dc:	b280      	uxth	r0, r0
    81de:	74e5      	strb	r5, [r4, #19]
    81e0:	8060      	strh	r0, [r4, #2]
    81e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    81e6:	d903      	bls.n	81f0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    81e8:	21a4      	movs	r1, #164	; 0xa4
    81ea:	2014      	movs	r0, #20
    81ec:	f7f8 f89c 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81f0:	8026      	strh	r6, [r4, #0]
    81f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000081f6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    81f6:	b570      	push	{r4, r5, r6, lr}
    81f8:	460b      	mov	r3, r1
    81fa:	4604      	mov	r4, r0
    81fc:	f100 0118 	add.w	r1, r0, #24
    8200:	8902      	ldrh	r2, [r0, #8]
    8202:	8880      	ldrh	r0, [r0, #4]
    8204:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8208:	440d      	add	r5, r1
    820a:	4282      	cmp	r2, r0
    820c:	d101      	bne.n	8212 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    820e:	2000      	movs	r0, #0
    8210:	bd70      	pop	{r4, r5, r6, pc}
    8212:	b123      	cbz	r3, 821e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8214:	7ce2      	ldrb	r2, [r4, #19]
    8216:	1ca9      	adds	r1, r5, #2
    8218:	4618      	mov	r0, r3
    821a:	f001 fee9 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    821e:	882d      	ldrh	r5, [r5, #0]
    8220:	f104 0108 	add.w	r1, r4, #8
    8224:	4620      	mov	r0, r4
    8226:	f7ff ff9c 	bl	8162 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    822a:	4628      	mov	r0, r5
    822c:	bd70      	pop	{r4, r5, r6, pc}

0000822e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    822e:	4401      	add	r1, r0
    8230:	1d49      	adds	r1, r1, #5
    8232:	4351      	muls	r1, r2
    8234:	b28a      	uxth	r2, r1
    8236:	2100      	movs	r1, #0
    8238:	2845      	cmp	r0, #69	; 0x45
    823a:	d202      	bcs.n	8242 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    823c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8240:	b281      	uxth	r1, r0
    8242:	3218      	adds	r2, #24
    8244:	1850      	adds	r0, r2, r1
    8246:	b280      	uxth	r0, r0
    8248:	4770      	bx	lr

0000824a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    824a:	b570      	push	{r4, r5, r6, lr}
    824c:	2300      	movs	r3, #0
    824e:	f1a1 0208 	sub.w	r2, r1, #8
    8252:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    8256:	42a2      	cmp	r2, r4
    8258:	d304      	bcc.n	8264 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    825a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    825e:	2015      	movs	r0, #21
    8260:	f7f8 f862 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8264:	6802      	ldr	r2, [r0, #0]
    8266:	b90a      	cbnz	r2, 826c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    8268:	e01e      	b.n	82a8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    826a:	4610      	mov	r0, r2
    826c:	6802      	ldr	r2, [r0, #0]
    826e:	8893      	ldrh	r3, [r2, #4]
    8270:	428b      	cmp	r3, r1
    8272:	d002      	beq.n	827a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    8274:	6813      	ldr	r3, [r2, #0]
    8276:	2b00      	cmp	r3, #0
    8278:	d1f7      	bne.n	826a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    827a:	8894      	ldrh	r4, [r2, #4]
    827c:	4613      	mov	r3, r2
    827e:	428c      	cmp	r4, r1
    8280:	d101      	bne.n	8286 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    8282:	6811      	ldr	r1, [r2, #0]
    8284:	e00d      	b.n	82a2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    8286:	f101 0508 	add.w	r5, r1, #8
    828a:	b2ae      	uxth	r6, r5
    828c:	2500      	movs	r5, #0
    828e:	42b4      	cmp	r4, r6
    8290:	d309      	bcc.n	82a6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    8292:	1a64      	subs	r4, r4, r1
    8294:	4411      	add	r1, r2
    8296:	600d      	str	r5, [r1, #0]
    8298:	808c      	strh	r4, [r1, #4]
    829a:	6802      	ldr	r2, [r0, #0]
    829c:	6812      	ldr	r2, [r2, #0]
    829e:	6002      	str	r2, [r0, #0]
    82a0:	600a      	str	r2, [r1, #0]
    82a2:	6001      	str	r1, [r0, #0]
    82a4:	e000      	b.n	82a8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    82a6:	2300      	movs	r3, #0
    82a8:	4618      	mov	r0, r3
    82aa:	bd70      	pop	{r4, r5, r6, pc}

000082ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    82ac:	b510      	push	{r4, lr}
    82ae:	000c      	movs	r4, r1
    82b0:	d004      	beq.n	82bc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    82b2:	2c08      	cmp	r4, #8
    82b4:	d207      	bcs.n	82c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    82b6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    82ba:	e00a      	b.n	82d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    82bc:	b108      	cbz	r0, 82c2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    82be:	2100      	movs	r1, #0
    82c0:	6001      	str	r1, [r0, #0]
    82c2:	2000      	movs	r0, #0
    82c4:	bd10      	pop	{r4, pc}
    82c6:	b158      	cbz	r0, 82e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    82c8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    82cc:	d304      	bcc.n	82d8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    82ce:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    82d2:	2015      	movs	r0, #21
    82d4:	f7f8 f828 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82d8:	b2a1      	uxth	r1, r4
    82da:	6800      	ldr	r0, [r0, #0]
    82dc:	f000 f814 	bl	8308 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    82e0:	1d20      	adds	r0, r4, #4
    82e2:	bd10      	pop	{r4, pc}

000082e4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    82e4:	2100      	movs	r1, #0
    82e6:	6802      	ldr	r2, [r0, #0]
    82e8:	e003      	b.n	82f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    82ea:	8893      	ldrh	r3, [r2, #4]
    82ec:	6812      	ldr	r2, [r2, #0]
    82ee:	4419      	add	r1, r3
    82f0:	b289      	uxth	r1, r1
    82f2:	2a00      	cmp	r2, #0
    82f4:	d1f9      	bne.n	82ea <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    82f6:	f000 b807 	b.w	8308 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

000082fa <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    82fa:	2300      	movs	r3, #0
    82fc:	600b      	str	r3, [r1, #0]
    82fe:	808a      	strh	r2, [r1, #4]
    8300:	6802      	ldr	r2, [r0, #0]
    8302:	600a      	str	r2, [r1, #0]
    8304:	6001      	str	r1, [r0, #0]
    8306:	4770      	bx	lr
    8308:	2300      	movs	r3, #0
    830a:	6043      	str	r3, [r0, #4]
    830c:	1d02      	adds	r2, r0, #4
    830e:	8101      	strh	r1, [r0, #8]
    8310:	6002      	str	r2, [r0, #0]
    8312:	4770      	bx	lr
    8314:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8318:	8159      	strh	r1, [r3, #10]
    831a:	4611      	mov	r1, r2
    831c:	f000 b814 	b.w	8348 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    8320:	b170      	cbz	r0, 8340 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    8322:	7882      	ldrb	r2, [r0, #2]
    8324:	fbb1 f3f2 	udiv	r3, r1, r2
    8328:	fb02 1213 	mls	r2, r2, r3, r1
    832c:	b2d2      	uxtb	r2, r2
    832e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8332:	895b      	ldrh	r3, [r3, #10]
    8334:	428b      	cmp	r3, r1
    8336:	d101      	bne.n	833c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    8338:	4610      	mov	r0, r2
    833a:	4770      	bx	lr
    833c:	78c3      	ldrb	r3, [r0, #3]
    833e:	b10b      	cbz	r3, 8344 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    8340:	20ff      	movs	r0, #255	; 0xff
    8342:	4770      	bx	lr
    8344:	f7f8 ba8a 	b.w	85c <__z_interrupt_stack_SIZEOF+0x1c>
    8348:	8802      	ldrh	r2, [r0, #0]
    834a:	fb01 0102 	mla	r1, r1, r2, r0
    834e:	7880      	ldrb	r0, [r0, #2]
    8350:	220a      	movs	r2, #10
    8352:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8356:	4408      	add	r0, r1
    8358:	4770      	bx	lr

0000835a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    835a:	b51c      	push	{r2, r3, r4, lr}
    835c:	4604      	mov	r4, r0
    835e:	2000      	movs	r0, #0
    8360:	9001      	str	r0, [sp, #4]
    8362:	9000      	str	r0, [sp, #0]
    8364:	f88d 4006 	strb.w	r4, [sp, #6]
    8368:	e00a      	b.n	8380 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    836a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    836e:	4621      	mov	r1, r4
    8370:	f7f8 fb62 	bl	a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    8374:	b120      	cbz	r0, 8380 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    8376:	f240 217e 	movw	r1, #638	; 0x27e
    837a:	2017      	movs	r0, #23
    837c:	f7f7 ffd4 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8380:	4668      	mov	r0, sp
    8382:	f7f8 fb09 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8386:	2800      	cmp	r0, #0
    8388:	d0ef      	beq.n	836a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    838a:	bd1c      	pop	{r2, r3, r4, pc}

0000838c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    838c:	b570      	push	{r4, r5, r6, lr}
    838e:	460e      	mov	r6, r1
    8390:	461d      	mov	r5, r3
    8392:	4611      	mov	r1, r2
    8394:	f000 f813 	bl	83be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    8398:	4604      	mov	r4, r0
    839a:	4629      	mov	r1, r5
    839c:	4630      	mov	r0, r6
    839e:	f000 f804 	bl	83aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    83a2:	4420      	add	r0, r4
    83a4:	1d00      	adds	r0, r0, #4
    83a6:	b280      	uxth	r0, r0
    83a8:	bd70      	pop	{r4, r5, r6, pc}
    83aa:	b510      	push	{r4, lr}
    83ac:	460a      	mov	r2, r1
    83ae:	2109      	movs	r1, #9
    83b0:	f7ff ff3d 	bl	822e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    83b4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    83b8:	1cc0      	adds	r0, r0, #3
    83ba:	4008      	ands	r0, r1
    83bc:	bd10      	pop	{r4, pc}
    83be:	b510      	push	{r4, lr}
    83c0:	460a      	mov	r2, r1
    83c2:	210a      	movs	r1, #10
    83c4:	f7ff ff33 	bl	822e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    83c8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    83cc:	1cc0      	adds	r0, r0, #3
    83ce:	4008      	ands	r0, r1
    83d0:	bd10      	pop	{r4, pc}
    83d2:	b109      	cbz	r1, 83d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    83d4:	2100      	movs	r1, #0
    83d6:	e000      	b.n	83da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    83d8:	2102      	movs	r1, #2
    83da:	1843      	adds	r3, r0, r1
    83dc:	7d1a      	ldrb	r2, [r3, #20]
    83de:	2a02      	cmp	r2, #2
    83e0:	d008      	beq.n	83f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    83e2:	7d5b      	ldrb	r3, [r3, #21]
    83e4:	2b02      	cmp	r3, #2
    83e6:	d009      	beq.n	83fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    83e8:	2a03      	cmp	r2, #3
    83ea:	d003      	beq.n	83f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    83ec:	2b03      	cmp	r3, #3
    83ee:	d005      	beq.n	83fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    83f0:	2000      	movs	r0, #0
    83f2:	4770      	bx	lr
    83f4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    83f8:	8b00      	ldrh	r0, [r0, #24]
    83fa:	4770      	bx	lr
    83fc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8400:	8b40      	ldrh	r0, [r0, #26]
    8402:	4770      	bx	lr
    8404:	b109      	cbz	r1, 840a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    8406:	2100      	movs	r1, #0
    8408:	e000      	b.n	840c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    840a:	2102      	movs	r1, #2
    840c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8410:	8b01      	ldrh	r1, [r0, #24]
    8412:	b911      	cbnz	r1, 841a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    8414:	8b40      	ldrh	r0, [r0, #26]
    8416:	2800      	cmp	r0, #0
    8418:	d000      	beq.n	841c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    841a:	2001      	movs	r0, #1
    841c:	4770      	bx	lr
    841e:	b538      	push	{r3, r4, r5, lr}
    8420:	7883      	ldrb	r3, [r0, #2]
    8422:	f88d 3000 	strb.w	r3, [sp]
    8426:	9b00      	ldr	r3, [sp, #0]
    8428:	9300      	str	r3, [sp, #0]
    842a:	f89d 3000 	ldrb.w	r3, [sp]
    842e:	b95b      	cbnz	r3, 8448 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    8430:	2400      	movs	r4, #0
    8432:	b10a      	cbz	r2, 8438 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    8434:	2300      	movs	r3, #0
    8436:	e000      	b.n	843a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    8438:	2302      	movs	r3, #2
    843a:	18c2      	adds	r2, r0, r3
    843c:	7d15      	ldrb	r5, [r2, #20]
    843e:	2d02      	cmp	r5, #2
    8440:	d004      	beq.n	844c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    8442:	7d52      	ldrb	r2, [r2, #21]
    8444:	2a02      	cmp	r2, #2
    8446:	d004      	beq.n	8452 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    8448:	2000      	movs	r0, #0
    844a:	bd38      	pop	{r3, r4, r5, pc}
    844c:	461a      	mov	r2, r3
    844e:	1c5b      	adds	r3, r3, #1
    8450:	e000      	b.n	8454 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    8452:	1c5a      	adds	r2, r3, #1
    8454:	b179      	cbz	r1, 8476 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    8456:	18c5      	adds	r5, r0, r3
    8458:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    845c:	752c      	strb	r4, [r5, #20]
    845e:	831c      	strh	r4, [r3, #24]
    8460:	2303      	movs	r3, #3
    8462:	1884      	adds	r4, r0, r2
    8464:	7523      	strb	r3, [r4, #20]
    8466:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    846a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    846e:	685b      	ldr	r3, [r3, #4]
    8470:	600b      	str	r3, [r1, #0]
    8472:	8b00      	ldrh	r0, [r0, #24]
    8474:	8088      	strh	r0, [r1, #4]
    8476:	2001      	movs	r0, #1
    8478:	bd38      	pop	{r3, r4, r5, pc}
    847a:	b510      	push	{r4, lr}
    847c:	b109      	cbz	r1, 8482 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    847e:	2100      	movs	r1, #0
    8480:	e000      	b.n	8484 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    8482:	2102      	movs	r1, #2
    8484:	1843      	adds	r3, r0, r1
    8486:	7d1c      	ldrb	r4, [r3, #20]
    8488:	4294      	cmp	r4, r2
    848a:	d103      	bne.n	8494 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    848c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8490:	8b00      	ldrh	r0, [r0, #24]
    8492:	bd10      	pop	{r4, pc}
    8494:	7d5b      	ldrb	r3, [r3, #21]
    8496:	4293      	cmp	r3, r2
    8498:	d103      	bne.n	84a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    849a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    849e:	8b40      	ldrh	r0, [r0, #26]
    84a0:	bd10      	pop	{r4, pc}
    84a2:	2000      	movs	r0, #0
    84a4:	bd10      	pop	{r4, pc}
    84a6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    84aa:	d201      	bcs.n	84b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    84ac:	0841      	lsrs	r1, r0, #1
    84ae:	e000      	b.n	84b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    84b0:	21ff      	movs	r1, #255	; 0xff
    84b2:	1a40      	subs	r0, r0, r1
    84b4:	f240 6172 	movw	r1, #1650	; 0x672
    84b8:	4288      	cmp	r0, r1
    84ba:	db00      	blt.n	84be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    84bc:	4608      	mov	r0, r1
    84be:	b280      	uxth	r0, r0
    84c0:	4770      	bx	lr

000084c2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    84c2:	2101      	movs	r1, #1
    84c4:	f7ff bf85 	b.w	83d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

000084c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    84c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84cc:	4606      	mov	r6, r0
    84ce:	f342 0780 	sbfx	r7, r2, #2, #1
    84d2:	7848      	ldrb	r0, [r1, #1]
    84d4:	460c      	mov	r4, r1
    84d6:	f022 0504 	bic.w	r5, r2, #4
    84da:	1c7f      	adds	r7, r7, #1
    84dc:	b100      	cbz	r0, 84e0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    84de:	b90d      	cbnz	r5, 84e4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    84e0:	4328      	orrs	r0, r5
    84e2:	d104      	bne.n	84ee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    84e4:	b145      	cbz	r5, 84f8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    84e6:	2100      	movs	r1, #0
    84e8:	4620      	mov	r0, r4
    84ea:	f7f8 fb9b 	bl	c24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    84ee:	20ff      	movs	r0, #255	; 0xff
    84f0:	70a0      	strb	r0, [r4, #2]
    84f2:	b11f      	cbz	r7, 84fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    84f4:	2000      	movs	r0, #0
    84f6:	e002      	b.n	84fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    84f8:	2101      	movs	r1, #1
    84fa:	e7f5      	b.n	84e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    84fc:	2002      	movs	r0, #2
    84fe:	1821      	adds	r1, r4, r0
    8500:	7d09      	ldrb	r1, [r1, #20]
    8502:	2903      	cmp	r1, #3
    8504:	d102      	bne.n	850c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    8506:	2d02      	cmp	r5, #2
    8508:	d000      	beq.n	850c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    850a:	1c40      	adds	r0, r0, #1
    850c:	1822      	adds	r2, r4, r0
    850e:	2101      	movs	r1, #1
    8510:	7511      	strb	r1, [r2, #20]
    8512:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    8516:	2200      	movs	r2, #0
    8518:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    851c:	830a      	strh	r2, [r1, #24]
    851e:	6840      	ldr	r0, [r0, #4]
    8520:	70a2      	strb	r2, [r4, #2]
    8522:	4631      	mov	r1, r6
    8524:	f362 010f 	bfi	r1, r2, #0, #16
    8528:	e9c6 0100 	strd	r0, r1, [r6]
    852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008530 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    8530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8534:	461e      	mov	r6, r3
    8536:	4613      	mov	r3, r2
    8538:	4604      	mov	r4, r0
    853a:	b109      	cbz	r1, 8540 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    853c:	2000      	movs	r0, #0
    853e:	e000      	b.n	8542 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    8540:	2002      	movs	r0, #2
    8542:	21ff      	movs	r1, #255	; 0xff
    8544:	70a1      	strb	r1, [r4, #2]
    8546:	1821      	adds	r1, r4, r0
    8548:	7d0a      	ldrb	r2, [r1, #20]
    854a:	2a01      	cmp	r2, #1
    854c:	d003      	beq.n	8556 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    854e:	7d49      	ldrb	r1, [r1, #21]
    8550:	2901      	cmp	r1, #1
    8552:	d10c      	bne.n	856e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    8554:	1c40      	adds	r0, r0, #1
    8556:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    855a:	2700      	movs	r7, #0
    855c:	8b29      	ldrh	r1, [r5, #24]
    855e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    8562:	198a      	adds	r2, r1, r6
    8564:	4562      	cmp	r2, ip
    8566:	d905      	bls.n	8574 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    8568:	4420      	add	r0, r4
    856a:	832f      	strh	r7, [r5, #24]
    856c:	7507      	strb	r7, [r0, #20]
    856e:	2000      	movs	r0, #0
    8570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8574:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8578:	4632      	mov	r2, r6
    857a:	6840      	ldr	r0, [r0, #4]
    857c:	4408      	add	r0, r1
    857e:	4619      	mov	r1, r3
    8580:	f001 fd36 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8584:	8b28      	ldrh	r0, [r5, #24]
    8586:	4430      	add	r0, r6
    8588:	8328      	strh	r0, [r5, #24]
    858a:	70a7      	strb	r7, [r4, #2]
    858c:	2001      	movs	r0, #1
    858e:	e7ef      	b.n	8570 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00008590 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    8590:	b510      	push	{r4, lr}
    8592:	2101      	movs	r1, #1
    8594:	f7ff ff36 	bl	8404 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    8598:	2800      	cmp	r0, #0
    859a:	d000      	beq.n	859e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    859c:	2001      	movs	r0, #1
    859e:	bd10      	pop	{r4, pc}

000085a0 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    85a0:	2201      	movs	r2, #1
    85a2:	f7ff bf3c 	b.w	841e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

000085a6 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    85a6:	2200      	movs	r2, #0
    85a8:	f7ff bf39 	b.w	841e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

000085ac <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    85ac:	b510      	push	{r4, lr}
    85ae:	2100      	movs	r1, #0
    85b0:	f7ff ff28 	bl	8404 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    85b4:	2800      	cmp	r0, #0
    85b6:	d000      	beq.n	85ba <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    85b8:	2001      	movs	r0, #1
    85ba:	bd10      	pop	{r4, pc}

000085bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    85bc:	b570      	push	{r4, r5, r6, lr}
    85be:	b109      	cbz	r1, 85c4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    85c0:	2300      	movs	r3, #0
    85c2:	e000      	b.n	85c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    85c4:	2302      	movs	r3, #2
    85c6:	21ff      	movs	r1, #255	; 0xff
    85c8:	7081      	strb	r1, [r0, #2]
    85ca:	18c1      	adds	r1, r0, r3
    85cc:	2402      	movs	r4, #2
    85ce:	7d0d      	ldrb	r5, [r1, #20]
    85d0:	2d01      	cmp	r5, #1
    85d2:	d007      	beq.n	85e4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    85d4:	7d4d      	ldrb	r5, [r1, #21]
    85d6:	2d01      	cmp	r5, #1
    85d8:	d009      	beq.n	85ee <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    85da:	f44f 718b 	mov.w	r1, #278	; 0x116
    85de:	2009      	movs	r0, #9
    85e0:	f7f7 fea2 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    85e8:	831a      	strh	r2, [r3, #24]
    85ea:	750c      	strb	r4, [r1, #20]
    85ec:	e003      	b.n	85f6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    85ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    85f2:	835a      	strh	r2, [r3, #26]
    85f4:	754c      	strb	r4, [r1, #21]
    85f6:	2100      	movs	r1, #0
    85f8:	7081      	strb	r1, [r0, #2]
    85fa:	bd70      	pop	{r4, r5, r6, pc}

000085fc <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    85fc:	2101      	movs	r1, #1
    85fe:	7001      	strb	r1, [r0, #0]
    8600:	4770      	bx	lr

00008602 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    8602:	2201      	movs	r2, #1
    8604:	4611      	mov	r1, r2
    8606:	f7ff bf38 	b.w	847a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000860a <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    860a:	2201      	movs	r2, #1
    860c:	2100      	movs	r1, #0
    860e:	f7ff bf34 	b.w	847a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008612 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    8612:	2100      	movs	r1, #0
    8614:	f7ff bedd 	b.w	83d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8618:	2800      	cmp	r0, #0
    861a:	db09      	blt.n	8630 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    861c:	f000 021f 	and.w	r2, r0, #31
    8620:	2101      	movs	r1, #1
    8622:	4091      	lsls	r1, r2
    8624:	0940      	lsrs	r0, r0, #5
    8626:	0080      	lsls	r0, r0, #2
    8628:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    862c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8630:	4770      	bx	lr
    8632:	2800      	cmp	r0, #0
    8634:	db0d      	blt.n	8652 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    8636:	f000 021f 	and.w	r2, r0, #31
    863a:	2101      	movs	r1, #1
    863c:	4091      	lsls	r1, r2
    863e:	0940      	lsrs	r0, r0, #5
    8640:	0080      	lsls	r0, r0, #2
    8642:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8646:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    864a:	f3bf 8f4f 	dsb	sy
    864e:	f3bf 8f6f 	isb	sy
    8652:	4770      	bx	lr
    8654:	b510      	push	{r4, lr}
    8656:	200e      	movs	r0, #14
    8658:	f7ff ffeb 	bl	8632 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    865c:	200e      	movs	r0, #14
    865e:	f7ff ffdb 	bl	8618 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8662:	200f      	movs	r0, #15
    8664:	f7ff ffe5 	bl	8632 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    8668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    866c:	200f      	movs	r0, #15
    866e:	f7ff bfd3 	b.w	8618 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8672:	2800      	cmp	r0, #0
    8674:	db09      	blt.n	868a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    8676:	f000 021f 	and.w	r2, r0, #31
    867a:	2101      	movs	r1, #1
    867c:	4091      	lsls	r1, r2
    867e:	0940      	lsrs	r0, r0, #5
    8680:	0080      	lsls	r0, r0, #2
    8682:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8686:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    868a:	4770      	bx	lr
    868c:	5840      	ldr	r0, [r0, r1]
    868e:	2800      	cmp	r0, #0
    8690:	d000      	beq.n	8694 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    8692:	2001      	movs	r0, #1
    8694:	4770      	bx	lr

00008696 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    8696:	b510      	push	{r4, lr}
    8698:	4604      	mov	r4, r0
    869a:	4620      	mov	r0, r4
    869c:	f7f8 fbca 	bl	e34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    86a0:	2811      	cmp	r0, #17
    86a2:	d0fa      	beq.n	869a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    86a4:	bd10      	pop	{r4, pc}

000086a6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    86a6:	b510      	push	{r4, lr}
    86a8:	f7ff fff5 	bl	8696 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    86ac:	2800      	cmp	r0, #0
    86ae:	d003      	beq.n	86b8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    86b0:	21a9      	movs	r1, #169	; 0xa9
    86b2:	201d      	movs	r0, #29
    86b4:	f7f7 fe38 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86b8:	bd10      	pop	{r4, pc}

000086ba <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    86ba:	f7f8 bc99 	b.w	ff0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

000086be <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    86be:	b510      	push	{r4, lr}
    86c0:	4050      	eors	r0, r2
    86c2:	780a      	ldrb	r2, [r1, #0]
    86c4:	781c      	ldrb	r4, [r3, #0]
    86c6:	4062      	eors	r2, r4
    86c8:	4410      	add	r0, r2
    86ca:	784a      	ldrb	r2, [r1, #1]
    86cc:	785c      	ldrb	r4, [r3, #1]
    86ce:	4062      	eors	r2, r4
    86d0:	4410      	add	r0, r2
    86d2:	788a      	ldrb	r2, [r1, #2]
    86d4:	789c      	ldrb	r4, [r3, #2]
    86d6:	4062      	eors	r2, r4
    86d8:	4410      	add	r0, r2
    86da:	78ca      	ldrb	r2, [r1, #3]
    86dc:	78dc      	ldrb	r4, [r3, #3]
    86de:	4062      	eors	r2, r4
    86e0:	4410      	add	r0, r2
    86e2:	790a      	ldrb	r2, [r1, #4]
    86e4:	791c      	ldrb	r4, [r3, #4]
    86e6:	7949      	ldrb	r1, [r1, #5]
    86e8:	4062      	eors	r2, r4
    86ea:	4410      	add	r0, r2
    86ec:	795a      	ldrb	r2, [r3, #5]
    86ee:	4051      	eors	r1, r2
    86f0:	42c1      	cmn	r1, r0
    86f2:	d101      	bne.n	86f8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    86f4:	2001      	movs	r0, #1
    86f6:	bd10      	pop	{r4, pc}
    86f8:	2000      	movs	r0, #0
    86fa:	bd10      	pop	{r4, pc}

000086fc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    86fc:	b510      	push	{r4, lr}
    86fe:	2900      	cmp	r1, #0
    8700:	4604      	mov	r4, r0
    8702:	f04f 0106 	mov.w	r1, #6
    8706:	d002      	beq.n	870e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    8708:	f7f7 fe70 	bl	3ec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    870c:	e001      	b.n	8712 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    870e:	f7f7 fe7b 	bl	408 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8712:	7960      	ldrb	r0, [r4, #5]
    8714:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8718:	7160      	strb	r0, [r4, #5]
    871a:	bd10      	pop	{r4, pc}

0000871c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    871c:	4770      	bx	lr

0000871e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    871e:	b530      	push	{r4, r5, lr}
    8720:	460c      	mov	r4, r1
    8722:	4605      	mov	r5, r0
    8724:	b08d      	sub	sp, #52	; 0x34
    8726:	f04f 0103 	mov.w	r1, #3
    872a:	f104 0003 	add.w	r0, r4, #3
    872e:	b112      	cbz	r2, 8736 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8730:	f7f7 fe5c 	bl	3ec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8734:	e001      	b.n	873a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    8736:	f7f7 fe67 	bl	408 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    873a:	7960      	ldrb	r0, [r4, #5]
    873c:	220d      	movs	r2, #13
    873e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8742:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8746:	7160      	strb	r0, [r4, #5]
    8748:	2100      	movs	r1, #0
    874a:	a804      	add	r0, sp, #16
    874c:	f001 fcca 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8750:	78e0      	ldrb	r0, [r4, #3]
    8752:	f88d 001f 	strb.w	r0, [sp, #31]
    8756:	7920      	ldrb	r0, [r4, #4]
    8758:	f88d 001e 	strb.w	r0, [sp, #30]
    875c:	7960      	ldrb	r0, [r4, #5]
    875e:	f88d 001d 	strb.w	r0, [sp, #29]
    8762:	2210      	movs	r2, #16
    8764:	4629      	mov	r1, r5
    8766:	4668      	mov	r0, sp
    8768:	f001 fc42 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    876c:	4668      	mov	r0, sp
    876e:	f7ff ff9a 	bl	86a6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8772:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    8776:	7020      	strb	r0, [r4, #0]
    8778:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    877c:	7060      	strb	r0, [r4, #1]
    877e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8782:	70a0      	strb	r0, [r4, #2]
    8784:	b00d      	add	sp, #52	; 0x34
    8786:	bd30      	pop	{r4, r5, pc}

00008788 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    8788:	2101      	movs	r1, #1
    878a:	f7f8 bcff 	b.w	118c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000878e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    878e:	b510      	push	{r4, lr}
    8790:	f001 fa06 	bl	9ba0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    8794:	b118      	cbz	r0, 879e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    8796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    879a:	f7fa bb11 	b.w	2dc0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    879e:	20ff      	movs	r0, #255	; 0xff
    87a0:	bd10      	pop	{r4, pc}

000087a2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    87a2:	b510      	push	{r4, lr}
    87a4:	f7f8 fd1e 	bl	11e4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    87a8:	2808      	cmp	r0, #8
    87aa:	d003      	beq.n	87b4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    87ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87b0:	f7f8 bd04 	b.w	11bc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    87b4:	bd10      	pop	{r4, pc}

000087b6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    87b6:	b570      	push	{r4, r5, r6, lr}
    87b8:	460e      	mov	r6, r1
    87ba:	b08c      	sub	sp, #48	; 0x30
    87bc:	4614      	mov	r4, r2
    87be:	4601      	mov	r1, r0
    87c0:	461d      	mov	r5, r3
    87c2:	2210      	movs	r2, #16
    87c4:	4668      	mov	r0, sp
    87c6:	f000 f84e 	bl	8866 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    87ca:	2210      	movs	r2, #16
    87cc:	4631      	mov	r1, r6
    87ce:	a804      	add	r0, sp, #16
    87d0:	f000 f849 	bl	8866 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    87d4:	4668      	mov	r0, sp
    87d6:	f7ff ff66 	bl	86a6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    87da:	a908      	add	r1, sp, #32
    87dc:	f04f 0210 	mov.w	r2, #16
    87e0:	4628      	mov	r0, r5
    87e2:	b11c      	cbz	r4, 87ec <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    87e4:	f000 f83f 	bl	8866 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    87e8:	b00c      	add	sp, #48	; 0x30
    87ea:	bd70      	pop	{r4, r5, r6, pc}
    87ec:	f001 fc00 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    87f0:	e7fa      	b.n	87e8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

000087f2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    87f2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    87f6:	fbb0 f0f1 	udiv	r0, r0, r1
    87fa:	b280      	uxth	r0, r0
    87fc:	4770      	bx	lr

000087fe <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    87fe:	6809      	ldr	r1, [r1, #0]
    8800:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    8804:	4770      	bx	lr

00008806 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    8806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    880a:	4607      	mov	r7, r0
    880c:	460e      	mov	r6, r1
    880e:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    8812:	f7fc ff29 	bl	5668 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8816:	b198      	cbz	r0, 8840 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    8818:	b31e      	cbz	r6, 8862 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    881a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    881e:	1b40      	subs	r0, r0, r5
    8820:	2300      	movs	r3, #0
    8822:	eb61 0104 	sbc.w	r1, r1, r4
    8826:	461a      	mov	r2, r3
    8828:	1a1b      	subs	r3, r3, r0
    882a:	418a      	sbcs	r2, r1
    882c:	da19      	bge.n	8862 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    882e:	1c42      	adds	r2, r0, #1
    8830:	f171 0100 	sbcs.w	r1, r1, #0
    8834:	db07      	blt.n	8846 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    8836:	f240 211a 	movw	r1, #538	; 0x21a
    883a:	2029      	movs	r0, #41	; 0x29
    883c:	f7f7 fd74 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8840:	f44f 7104 	mov.w	r1, #528	; 0x210
    8844:	e7f9      	b.n	883a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    8846:	4430      	add	r0, r6
    8848:	1e40      	subs	r0, r0, #1
    884a:	fbb0 f1f6 	udiv	r1, r0, r6
    884e:	fb01 f006 	mul.w	r0, r1, r6
    8852:	1828      	adds	r0, r5, r0
    8854:	f144 0400 	adc.w	r4, r4, #0
    8858:	e9c7 0404 	strd	r0, r4, [r7, #16]
    885c:	4608      	mov	r0, r1
    885e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8862:	2000      	movs	r0, #0
    8864:	e7fb      	b.n	885e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

00008866 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    8866:	b530      	push	{r4, r5, lr}
    8868:	4613      	mov	r3, r2
    886a:	e006      	b.n	887a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    886c:	18cc      	adds	r4, r1, r3
    886e:	1ad5      	subs	r5, r2, r3
    8870:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    8874:	1e5b      	subs	r3, r3, #1
    8876:	5544      	strb	r4, [r0, r5]
    8878:	b2db      	uxtb	r3, r3
    887a:	2b00      	cmp	r3, #0
    887c:	d1f6      	bne.n	886c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    887e:	bd30      	pop	{r4, r5, pc}

00008880 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    8880:	b510      	push	{r4, lr}
    8882:	2300      	movs	r3, #0
    8884:	461a      	mov	r2, r3
    8886:	e003      	b.n	8890 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    8888:	5c84      	ldrb	r4, [r0, r2]
    888a:	4323      	orrs	r3, r4
    888c:	1c52      	adds	r2, r2, #1
    888e:	b2d2      	uxtb	r2, r2
    8890:	428a      	cmp	r2, r1
    8892:	d3f9      	bcc.n	8888 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    8894:	b10b      	cbz	r3, 889a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    8896:	2000      	movs	r0, #0
    8898:	bd10      	pop	{r4, pc}
    889a:	2001      	movs	r0, #1
    889c:	bd10      	pop	{r4, pc}

0000889e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    889e:	2100      	movs	r1, #0
    88a0:	4608      	mov	r0, r1
    88a2:	f7f8 bd8d 	b.w	13c0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    88a6:	4401      	add	r1, r0
    88a8:	2914      	cmp	r1, #20
    88aa:	dd01      	ble.n	88b0 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    88ac:	2014      	movs	r0, #20
    88ae:	4770      	bx	lr
    88b0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    88b4:	4281      	cmp	r1, r0
    88b6:	dbfa      	blt.n	88ae <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    88b8:	b248      	sxtb	r0, r1
    88ba:	4770      	bx	lr

000088bc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    88bc:	b570      	push	{r4, r5, r6, lr}
    88be:	4604      	mov	r4, r0
    88c0:	1c40      	adds	r0, r0, #1
    88c2:	4288      	cmp	r0, r1
    88c4:	d004      	beq.n	88d0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    88c6:	6808      	ldr	r0, [r1, #0]
    88c8:	f8c4 0001 	str.w	r0, [r4, #1]
    88cc:	7908      	ldrb	r0, [r1, #4]
    88ce:	7160      	strb	r0, [r4, #5]
    88d0:	7960      	ldrb	r0, [r4, #5]
    88d2:	f000 001f 	and.w	r0, r0, #31
    88d6:	7160      	strb	r0, [r4, #5]
    88d8:	2000      	movs	r0, #0
    88da:	72e0      	strb	r0, [r4, #11]
    88dc:	4605      	mov	r5, r0
    88de:	1966      	adds	r6, r4, r5
    88e0:	7870      	ldrb	r0, [r6, #1]
    88e2:	f000 f8d1 	bl	8a88 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    88e6:	71b0      	strb	r0, [r6, #6]
    88e8:	7ae1      	ldrb	r1, [r4, #11]
    88ea:	1c6d      	adds	r5, r5, #1
    88ec:	4408      	add	r0, r1
    88ee:	b2ed      	uxtb	r5, r5
    88f0:	72e0      	strb	r0, [r4, #11]
    88f2:	2d05      	cmp	r5, #5
    88f4:	d3f3      	bcc.n	88de <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    88f6:	bd70      	pop	{r4, r5, r6, pc}

000088f8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    88f8:	7802      	ldrb	r2, [r0, #0]
    88fa:	f002 020f 	and.w	r2, r2, #15
    88fe:	2a03      	cmp	r2, #3
    8900:	d003      	beq.n	890a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    8902:	2a05      	cmp	r2, #5
    8904:	d104      	bne.n	8910 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    8906:	f000 b85f 	b.w	89c8 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    890a:	7840      	ldrb	r0, [r0, #1]
    890c:	280c      	cmp	r0, #12
    890e:	d001      	beq.n	8914 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    8910:	2000      	movs	r0, #0
    8912:	4770      	bx	lr
    8914:	2001      	movs	r0, #1
    8916:	4770      	bx	lr

00008918 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    8918:	b570      	push	{r4, r5, r6, lr}
    891a:	4614      	mov	r4, r2
    891c:	4605      	mov	r5, r0
    891e:	2a1f      	cmp	r2, #31
    8920:	d903      	bls.n	892a <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    8922:	21ee      	movs	r1, #238	; 0xee
    8924:	202a      	movs	r0, #42	; 0x2a
    8926:	f7f7 fcff 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    892a:	f105 0009 	add.w	r0, r5, #9
    892e:	f001 fb5f 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8932:	1da4      	adds	r4, r4, #6
    8934:	706c      	strb	r4, [r5, #1]
    8936:	bd70      	pop	{r4, r5, r6, pc}

00008938 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    8938:	b510      	push	{r4, lr}
    893a:	7802      	ldrb	r2, [r0, #0]
    893c:	f001 030f 	and.w	r3, r1, #15
    8940:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    8944:	431a      	orrs	r2, r3
    8946:	7002      	strb	r2, [r0, #0]
    8948:	2907      	cmp	r1, #7
    894a:	d20c      	bcs.n	8966 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    894c:	e8df f001 	tbb	[pc, r1]
    8950:	06040604 	.word	0x06040604
    8954:	00040804 	.word	0x00040804
    8958:	2106      	movs	r1, #6
    895a:	e002      	b.n	8962 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    895c:	210c      	movs	r1, #12
    895e:	e000      	b.n	8962 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    8960:	2122      	movs	r1, #34	; 0x22
    8962:	7041      	strb	r1, [r0, #1]
    8964:	bd10      	pop	{r4, pc}
    8966:	21a8      	movs	r1, #168	; 0xa8
    8968:	202a      	movs	r0, #42	; 0x2a
    896a:	f7f7 fcdd 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000896e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    896e:	680a      	ldr	r2, [r1, #0]
    8970:	f840 2f09 	str.w	r2, [r0, #9]!
    8974:	8889      	ldrh	r1, [r1, #4]
    8976:	8081      	strh	r1, [r0, #4]
    8978:	4770      	bx	lr

0000897a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    897a:	7802      	ldrb	r2, [r0, #0]
    897c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8980:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    8984:	7002      	strb	r2, [r0, #0]
    8986:	4770      	bx	lr

00008988 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    8988:	680a      	ldr	r2, [r1, #0]
    898a:	f840 2f03 	str.w	r2, [r0, #3]!
    898e:	8889      	ldrh	r1, [r1, #4]
    8990:	8081      	strh	r1, [r0, #4]
    8992:	4770      	bx	lr

00008994 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    8994:	7802      	ldrb	r2, [r0, #0]
    8996:	2340      	movs	r3, #64	; 0x40
    8998:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    899c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    89a0:	430a      	orrs	r2, r1
    89a2:	7002      	strb	r2, [r0, #0]
    89a4:	4770      	bx	lr

000089a6 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    89a6:	b570      	push	{r4, r5, r6, lr}
    89a8:	4614      	mov	r4, r2
    89aa:	4605      	mov	r5, r0
    89ac:	2a1f      	cmp	r2, #31
    89ae:	d904      	bls.n	89ba <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    89b0:	f44f 7188 	mov.w	r1, #272	; 0x110
    89b4:	202a      	movs	r0, #42	; 0x2a
    89b6:	f7f7 fcb7 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89ba:	f105 0009 	add.w	r0, r5, #9
    89be:	f001 fb17 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    89c2:	1da4      	adds	r4, r4, #6
    89c4:	706c      	strb	r4, [r5, #1]
    89c6:	bd70      	pop	{r4, r5, r6, pc}
    89c8:	b570      	push	{r4, r5, r6, lr}
    89ca:	f8d0 201f 	ldr.w	r2, [r0, #31]
    89ce:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    89d2:	f012 0fff 	tst.w	r2, #255	; 0xff
    89d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    89da:	d108      	bne.n	89ee <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    89dc:	f3c2 2407 	ubfx	r4, r2, #8, #8
    89e0:	b92c      	cbnz	r4, 89ee <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    89e2:	f3c2 4407 	ubfx	r4, r2, #16, #8
    89e6:	b914      	cbnz	r4, 89ee <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    89e8:	0e12      	lsrs	r2, r2, #24
    89ea:	d100      	bne.n	89ee <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    89ec:	b34b      	cbz	r3, 8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    89ee:	7846      	ldrb	r6, [r0, #1]
    89f0:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    89f4:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    89f8:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    89fc:	7d83      	ldrb	r3, [r0, #22]
    89fe:	2e22      	cmp	r6, #34	; 0x22
    8a00:	d11f      	bne.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a02:	b131      	cbz	r1, 8a12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    8a04:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    8a08:	d903      	bls.n	8a12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    8a0a:	f640 5107 	movw	r1, #3335	; 0xd07
    8a0e:	428a      	cmp	r2, r1
    8a10:	d90b      	bls.n	8a2a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    8a12:	1f91      	subs	r1, r2, #6
    8a14:	f640 467a 	movw	r6, #3194	; 0xc7a
    8a18:	42b1      	cmp	r1, r6
    8a1a:	d812      	bhi.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a1c:	b18b      	cbz	r3, 8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a1e:	2b08      	cmp	r3, #8
    8a20:	d80f      	bhi.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a22:	4293      	cmp	r3, r2
    8a24:	d20d      	bcs.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a26:	4295      	cmp	r5, r2
    8a28:	d80b      	bhi.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a2a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    8a2e:	d208      	bcs.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a30:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    8a34:	f640 4176 	movw	r1, #3190	; 0xc76
    8a38:	380a      	subs	r0, #10
    8a3a:	4288      	cmp	r0, r1
    8a3c:	d801      	bhi.n	8a42 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a3e:	2001      	movs	r0, #1
    8a40:	bd70      	pop	{r4, r5, r6, pc}
    8a42:	2000      	movs	r0, #0
    8a44:	bd70      	pop	{r4, r5, r6, pc}

00008a46 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    8a46:	b508      	push	{r3, lr}
    8a48:	7a03      	ldrb	r3, [r0, #8]
    8a4a:	f88d 3000 	strb.w	r3, [sp]
    8a4e:	9b00      	ldr	r3, [sp, #0]
    8a50:	9300      	str	r3, [sp, #0]
    8a52:	f89d 3000 	ldrb.w	r3, [sp]
    8a56:	b123      	cbz	r3, 8a62 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    8a58:	f240 21c2 	movw	r1, #706	; 0x2c2
    8a5c:	2010      	movs	r0, #16
    8a5e:	f7f7 fc63 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8a66:	f7f8 bdb1 	b.w	15cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

00008a6a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    8a6a:	f7f8 bddd 	b.w	1628 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    8a6e:	b510      	push	{r4, lr}
    8a70:	4604      	mov	r4, r0
    8a72:	2108      	movs	r1, #8
    8a74:	4620      	mov	r0, r4
    8a76:	f7f7 fcc7 	bl	408 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8a7a:	6820      	ldr	r0, [r4, #0]
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d102      	bne.n	8a86 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    8a80:	6860      	ldr	r0, [r4, #4]
    8a82:	2800      	cmp	r0, #0
    8a84:	d0f5      	beq.n	8a72 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    8a86:	bd10      	pop	{r4, pc}

00008a88 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    8a88:	f000 0155 	and.w	r1, r0, #85	; 0x55
    8a8c:	2255      	movs	r2, #85	; 0x55
    8a8e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    8a92:	4408      	add	r0, r1
    8a94:	f000 0133 	and.w	r1, r0, #51	; 0x33
    8a98:	2233      	movs	r2, #51	; 0x33
    8a9a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    8a9e:	4408      	add	r0, r1
    8aa0:	f000 010f 	and.w	r1, r0, #15
    8aa4:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    8aa8:	4770      	bx	lr

00008aaa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    8aaa:	b508      	push	{r3, lr}
    8aac:	f000 f804 	bl	8ab8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    8ab0:	466a      	mov	r2, sp
    8ab2:	f7f8 fea1 	bl	17f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    8ab6:	bd08      	pop	{r3, pc}
    8ab8:	b530      	push	{r4, r5, lr}
    8aba:	784c      	ldrb	r4, [r1, #1]
    8abc:	4603      	mov	r3, r0
    8abe:	7808      	ldrb	r0, [r1, #0]
    8ac0:	788d      	ldrb	r5, [r1, #2]
    8ac2:	0e22      	lsrs	r2, r4, #24
    8ac4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    8ac8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    8acc:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    8ad0:	78cd      	ldrb	r5, [r1, #3]
    8ad2:	790c      	ldrb	r4, [r1, #4]
    8ad4:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    8ad8:	4322      	orrs	r2, r4
    8ada:	7949      	ldrb	r1, [r1, #5]
    8adc:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    8ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8ae4:	4611      	mov	r1, r2
    8ae6:	2b01      	cmp	r3, #1
    8ae8:	d101      	bne.n	8aee <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    8aea:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    8aee:	bd30      	pop	{r4, r5, pc}
    8af0:	2801      	cmp	r0, #1
    8af2:	d102      	bne.n	8afa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    8af4:	7948      	ldrb	r0, [r1, #5]
    8af6:	0980      	lsrs	r0, r0, #6
    8af8:	d001      	beq.n	8afe <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    8afa:	2000      	movs	r0, #0
    8afc:	4770      	bx	lr
    8afe:	2001      	movs	r0, #1
    8b00:	4770      	bx	lr
    8b02:	2801      	cmp	r0, #1
    8b04:	d106      	bne.n	8b14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    8b06:	7948      	ldrb	r0, [r1, #5]
    8b08:	2101      	movs	r1, #1
    8b0a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    8b0e:	d101      	bne.n	8b14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    8b10:	2001      	movs	r0, #1
    8b12:	4770      	bx	lr
    8b14:	2000      	movs	r0, #0
    8b16:	4770      	bx	lr
    8b18:	2802      	cmp	r0, #2
    8b1a:	d003      	beq.n	8b24 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    8b1c:	2803      	cmp	r0, #3
    8b1e:	d001      	beq.n	8b24 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    8b20:	2000      	movs	r0, #0
    8b22:	4770      	bx	lr
    8b24:	2001      	movs	r0, #1
    8b26:	4770      	bx	lr

00008b28 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    8b28:	b510      	push	{r4, lr}
    8b2a:	4604      	mov	r4, r0
    8b2c:	7c00      	ldrb	r0, [r0, #16]
    8b2e:	f7ff fff3 	bl	8b18 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    8b32:	b148      	cbz	r0, 8b48 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    8b34:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    8b38:	f104 0158 	add.w	r1, r4, #88	; 0x58
    8b3c:	f7ff fe31 	bl	87a2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    8b40:	2808      	cmp	r0, #8
    8b42:	d001      	beq.n	8b48 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    8b44:	2001      	movs	r0, #1
    8b46:	bd10      	pop	{r4, pc}
    8b48:	7c20      	ldrb	r0, [r4, #16]
    8b4a:	b118      	cbz	r0, 8b54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    8b4c:	2802      	cmp	r0, #2
    8b4e:	d001      	beq.n	8b54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    8b50:	7de0      	ldrb	r0, [r4, #23]
    8b52:	bd10      	pop	{r4, pc}
    8b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8b58:	2000      	movs	r0, #0
    8b5a:	f7f8 ba83 	b.w	1064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00008b5e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    8b5e:	b508      	push	{r3, lr}
    8b60:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    8b64:	f88d 1000 	strb.w	r1, [sp]
    8b68:	9900      	ldr	r1, [sp, #0]
    8b6a:	9100      	str	r1, [sp, #0]
    8b6c:	f89d 1000 	ldrb.w	r1, [sp]
    8b70:	b941      	cbnz	r1, 8b84 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    8b72:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8b76:	f88d 1000 	strb.w	r1, [sp]
    8b7a:	9900      	ldr	r1, [sp, #0]
    8b7c:	9100      	str	r1, [sp, #0]
    8b7e:	f89d 1000 	ldrb.w	r1, [sp]
    8b82:	b109      	cbz	r1, 8b88 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    8b84:	2001      	movs	r0, #1
    8b86:	bd08      	pop	{r3, pc}
    8b88:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    8b8c:	f88d 0000 	strb.w	r0, [sp]
    8b90:	9800      	ldr	r0, [sp, #0]
    8b92:	9000      	str	r0, [sp, #0]
    8b94:	f89d 0000 	ldrb.w	r0, [sp]
    8b98:	2000      	movs	r0, #0
    8b9a:	bd08      	pop	{r3, pc}

00008b9c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    8b9c:	20ff      	movs	r0, #255	; 0xff
    8b9e:	7008      	strb	r0, [r1, #0]
    8ba0:	6b48      	ldr	r0, [r1, #52]	; 0x34
    8ba2:	f7ff bd2b 	b.w	85fc <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00008ba6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    8ba6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8ba8:	460d      	mov	r5, r1
    8baa:	4604      	mov	r4, r0
    8bac:	f44f 728c 	mov.w	r2, #280	; 0x118
    8bb0:	2100      	movs	r1, #0
    8bb2:	f001 fa97 	bl	a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8bb6:	20ff      	movs	r0, #255	; 0xff
    8bb8:	7020      	strb	r0, [r4, #0]
    8bba:	207f      	movs	r0, #127	; 0x7f
    8bbc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    8bc0:	2013      	movs	r0, #19
    8bc2:	8060      	strh	r0, [r4, #2]
    8bc4:	f242 7010 	movw	r0, #10000	; 0x2710
    8bc8:	8460      	strh	r0, [r4, #34]	; 0x22
    8bca:	f7f8 f8bb 	bl	d44 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    8bce:	4601      	mov	r1, r0
    8bd0:	6360      	str	r0, [r4, #52]	; 0x34
    8bd2:	2200      	movs	r2, #0
    8bd4:	4668      	mov	r0, sp
    8bd6:	f7ff fc77 	bl	84c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    8bda:	2200      	movs	r2, #0
    8bdc:	2101      	movs	r1, #1
    8bde:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8be0:	f7ff fcec 	bl	85bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    8be4:	2204      	movs	r2, #4
    8be6:	4668      	mov	r0, sp
    8be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8bea:	f7ff fc6d 	bl	84c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    8bee:	2200      	movs	r2, #0
    8bf0:	4611      	mov	r1, r2
    8bf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8bf4:	f7ff fce2 	bl	85bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    8bf8:	73a5      	strb	r5, [r4, #14]
    8bfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8bfe:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    8c02:	f000 b950 	b.w	8ea6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

00008c06 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    8c06:	7880      	ldrb	r0, [r0, #2]
    8c08:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8c0c:	b108      	cbz	r0, 8c12 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    8c0e:	2000      	movs	r0, #0
    8c10:	4770      	bx	lr
    8c12:	201f      	movs	r0, #31
    8c14:	4770      	bx	lr

00008c16 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    8c16:	f7f9 bb4d 	b.w	22b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

00008c1a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    8c1a:	6880      	ldr	r0, [r0, #8]
    8c1c:	4770      	bx	lr

00008c1e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    8c1e:	2001      	movs	r0, #1
    8c20:	4770      	bx	lr

00008c22 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    8c22:	b510      	push	{r4, lr}
    8c24:	4604      	mov	r4, r0
    8c26:	3028      	adds	r0, #40	; 0x28
    8c28:	f000 f8fd 	bl	8e26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8c2c:	8861      	ldrh	r1, [r4, #2]
    8c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c32:	2228      	movs	r2, #40	; 0x28
    8c34:	f7f9 bc62 	b.w	24fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

00008c38 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    8c38:	2200      	movs	r2, #0
    8c3a:	8602      	strh	r2, [r0, #48]	; 0x30
    8c3c:	8843      	ldrh	r3, [r0, #2]
    8c3e:	2b1d      	cmp	r3, #29
    8c40:	d001      	beq.n	8c46 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    8c42:	7341      	strb	r1, [r0, #13]
    8c44:	4770      	bx	lr
    8c46:	7342      	strb	r2, [r0, #13]
    8c48:	4770      	bx	lr

00008c4a <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    8c4a:	b510      	push	{r4, lr}
    8c4c:	2400      	movs	r4, #0
    8c4e:	6b40      	ldr	r0, [r0, #52]	; 0x34
    8c50:	f7ff fcac 	bl	85ac <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    8c54:	4384      	bics	r4, r0
    8c56:	f084 0001 	eor.w	r0, r4, #1
    8c5a:	bd10      	pop	{r4, pc}

00008c5c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    8c5c:	2000      	movs	r0, #0
    8c5e:	4770      	bx	lr

00008c60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    8c60:	7880      	ldrb	r0, [r0, #2]
    8c62:	f000 0001 	and.w	r0, r0, #1
    8c66:	4770      	bx	lr

00008c68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    8c68:	7880      	ldrb	r0, [r0, #2]
    8c6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8c6e:	4770      	bx	lr

00008c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    8c70:	2001      	movs	r0, #1
    8c72:	4770      	bx	lr

00008c74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    8c74:	7880      	ldrb	r0, [r0, #2]
    8c76:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8c7a:	4770      	bx	lr

00008c7c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    8c7c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    8c80:	4770      	bx	lr

00008c82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    8c82:	7800      	ldrb	r0, [r0, #0]
    8c84:	28ff      	cmp	r0, #255	; 0xff
    8c86:	d001      	beq.n	8c8c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    8c88:	2001      	movs	r0, #1
    8c8a:	4770      	bx	lr
    8c8c:	2000      	movs	r0, #0
    8c8e:	4770      	bx	lr

00008c90 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    8c90:	f800 1f20 	strb.w	r1, [r0, #32]!
    8c94:	7042      	strb	r2, [r0, #1]
    8c96:	4770      	bx	lr

00008c98 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    8c98:	680a      	ldr	r2, [r1, #0]
    8c9a:	f840 2f11 	str.w	r2, [r0, #17]!
    8c9e:	8889      	ldrh	r1, [r1, #4]
    8ca0:	8081      	strh	r1, [r0, #4]
    8ca2:	2101      	movs	r1, #1
    8ca4:	7181      	strb	r1, [r0, #6]
    8ca6:	4770      	bx	lr

00008ca8 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    8ca8:	7b00      	ldrb	r0, [r0, #12]
    8caa:	4770      	bx	lr

00008cac <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    8cac:	2001      	movs	r0, #1
    8cae:	4770      	bx	lr

00008cb0 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    8cb0:	61c1      	str	r1, [r0, #28]
    8cb2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    8cb6:	724a      	strb	r2, [r1, #9]
    8cb8:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    8cbc:	f8c1 200a 	str.w	r2, [r1, #10]
    8cc0:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    8cc4:	81c8      	strh	r0, [r1, #14]
    8cc6:	4770      	bx	lr

00008cc8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    8cc8:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    8ccc:	4770      	bx	lr

00008cce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    8cce:	7bc0      	ldrb	r0, [r0, #15]
    8cd0:	2800      	cmp	r0, #0
    8cd2:	d000      	beq.n	8cd6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    8cd4:	2001      	movs	r0, #1
    8cd6:	4770      	bx	lr
    8cd8:	7802      	ldrb	r2, [r0, #0]
    8cda:	2320      	movs	r3, #32
    8cdc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8ce0:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    8ce4:	430a      	orrs	r2, r1
    8ce6:	7002      	strb	r2, [r0, #0]
    8ce8:	4770      	bx	lr
    8cea:	2101      	movs	r1, #1
    8cec:	f7f8 bf32 	b.w	1b54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    8cf0:	2101      	movs	r1, #1
    8cf2:	f7f8 bf2f 	b.w	1b54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    8cf6:	b510      	push	{r4, lr}
    8cf8:	460c      	mov	r4, r1
    8cfa:	2100      	movs	r1, #0
    8cfc:	7061      	strb	r1, [r4, #1]
    8cfe:	2112      	movs	r1, #18
    8d00:	7021      	strb	r1, [r4, #0]
    8d02:	f100 0109 	add.w	r1, r0, #9
    8d06:	2221      	movs	r2, #33	; 0x21
    8d08:	1d20      	adds	r0, r4, #4
    8d0a:	f001 f971 	bl	9ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d0e:	2001      	movs	r0, #1
    8d10:	71e0      	strb	r0, [r4, #7]
    8d12:	7920      	ldrb	r0, [r4, #4]
    8d14:	2800      	cmp	r0, #0
    8d16:	d015      	beq.n	8d44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    8d18:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    8d1c:	2100      	movs	r1, #0
    8d1e:	4620      	mov	r0, r4
    8d20:	f7f7 fde8 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8d24:	2800      	cmp	r0, #0
    8d26:	d00d      	beq.n	8d44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    8d28:	8800      	ldrh	r0, [r0, #0]
    8d2a:	f7ff fcc6 	bl	86ba <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    8d2e:	2100      	movs	r1, #0
    8d30:	4620      	mov	r0, r4
    8d32:	f7f7 fe81 	bl	a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    8d36:	2800      	cmp	r0, #0
    8d38:	d004      	beq.n	8d44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    8d3a:	f240 2151 	movw	r1, #593	; 0x251
    8d3e:	202d      	movs	r0, #45	; 0x2d
    8d40:	f7f7 faf2 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d44:	bd10      	pop	{r4, pc}
    8d46:	2200      	movs	r2, #0
    8d48:	704a      	strb	r2, [r1, #1]
    8d4a:	221a      	movs	r2, #26
    8d4c:	700a      	strb	r2, [r1, #0]
    8d4e:	f850 2f09 	ldr.w	r2, [r0, #9]!
    8d52:	604a      	str	r2, [r1, #4]
    8d54:	6842      	ldr	r2, [r0, #4]
    8d56:	608a      	str	r2, [r1, #8]
    8d58:	7a00      	ldrb	r0, [r0, #8]
    8d5a:	7308      	strb	r0, [r1, #12]
    8d5c:	4770      	bx	lr
    8d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d62:	4604      	mov	r4, r0
    8d64:	460f      	mov	r7, r1
    8d66:	7e40      	ldrb	r0, [r0, #25]
    8d68:	f7f8 f9a2 	bl	10b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    8d6c:	4606      	mov	r6, r0
    8d6e:	7e20      	ldrb	r0, [r4, #24]
    8d70:	f104 0551 	add.w	r5, r4, #81	; 0x51
    8d74:	b120      	cbz	r0, 8d80 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    8d76:	b11e      	cbz	r6, 8d80 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    8d78:	7e60      	ldrb	r0, [r4, #25]
    8d7a:	f7f8 f98d 	bl	1098 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    8d7e:	b1a0      	cbz	r0, 8daa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    8d80:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    8d84:	2800      	cmp	r0, #0
    8d86:	d024      	beq.n	8dd2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    8d88:	7ea0      	ldrb	r0, [r4, #26]
    8d8a:	2800      	cmp	r0, #0
    8d8c:	d021      	beq.n	8dd2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    8d8e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    8d92:	4629      	mov	r1, r5
    8d94:	f7ff feb5 	bl	8b02 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    8d98:	b1a8      	cbz	r0, 8dc6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    8d9a:	f7f8 f979 	bl	1090 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8d9e:	463a      	mov	r2, r7
    8da0:	4629      	mov	r1, r5
    8da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8da6:	f7ff bcba 	b.w	871e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8daa:	2001      	movs	r0, #1
    8dac:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    8db0:	463a      	mov	r2, r7
    8db2:	4629      	mov	r1, r5
    8db4:	4630      	mov	r0, r6
    8db6:	f7ff fcb2 	bl	871e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8dba:	7e61      	ldrb	r1, [r4, #25]
    8dbc:	4628      	mov	r0, r5
    8dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8dc2:	f7f8 b981 	b.w	10c8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8dc6:	4639      	mov	r1, r7
    8dc8:	4628      	mov	r0, r5
    8dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8dce:	f7ff bc95 	b.w	86fc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dd6:	b510      	push	{r4, lr}
    8dd8:	4604      	mov	r4, r0
    8dda:	4608      	mov	r0, r1
    8ddc:	f7fa fbc6 	bl	356c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8de0:	7921      	ldrb	r1, [r4, #4]
    8de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8de6:	2025      	movs	r0, #37	; 0x25
    8de8:	f7fa bb96 	b.w	3518 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    8dec:	b570      	push	{r4, r5, r6, lr}
    8dee:	4614      	mov	r4, r2
    8df0:	461d      	mov	r5, r3
    8df2:	4606      	mov	r6, r0
    8df4:	f000 ff6a 	bl	9ccc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8df8:	1900      	adds	r0, r0, r4
    8dfa:	4169      	adcs	r1, r5
    8dfc:	e9c6 0100 	strd	r0, r1, [r6]
    8e00:	bd70      	pop	{r4, r5, r6, pc}

00008e02 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    8e02:	b570      	push	{r4, r5, r6, lr}
    8e04:	7001      	strb	r1, [r0, #0]
    8e06:	7042      	strb	r2, [r0, #1]
    8e08:	4614      	mov	r4, r2
    8e0a:	460d      	mov	r5, r1
    8e0c:	7880      	ldrb	r0, [r0, #2]
    8e0e:	f000 f87f 	bl	8f10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8e12:	fb10 f005 	smulbb	r0, r0, r5
    8e16:	4360      	muls	r0, r4
    8e18:	28ff      	cmp	r0, #255	; 0xff
    8e1a:	d303      	bcc.n	8e24 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    8e1c:	215c      	movs	r1, #92	; 0x5c
    8e1e:	202e      	movs	r0, #46	; 0x2e
    8e20:	f7f7 fa82 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e24:	bd70      	pop	{r4, r5, r6, pc}

00008e26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    8e26:	b510      	push	{r4, lr}
    8e28:	4604      	mov	r4, r0
    8e2a:	7880      	ldrb	r0, [r0, #2]
    8e2c:	f000 f870 	bl	8f10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8e30:	7861      	ldrb	r1, [r4, #1]
    8e32:	7822      	ldrb	r2, [r4, #0]
    8e34:	fb11 f102 	smulbb	r1, r1, r2
    8e38:	4348      	muls	r0, r1
    8e3a:	b2c0      	uxtb	r0, r0
    8e3c:	bd10      	pop	{r4, pc}

00008e3e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    8e3e:	b510      	push	{r4, lr}
    8e40:	4604      	mov	r4, r0
    8e42:	f000 f84d 	bl	8ee0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    8e46:	7961      	ldrb	r1, [r4, #5]
    8e48:	1c49      	adds	r1, r1, #1
    8e4a:	b2c9      	uxtb	r1, r1
    8e4c:	7161      	strb	r1, [r4, #5]
    8e4e:	7862      	ldrb	r2, [r4, #1]
    8e50:	4291      	cmp	r1, r2
    8e52:	d10b      	bne.n	8e6c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    8e54:	2200      	movs	r2, #0
    8e56:	7162      	strb	r2, [r4, #5]
    8e58:	78e1      	ldrb	r1, [r4, #3]
    8e5a:	4301      	orrs	r1, r0
    8e5c:	70e1      	strb	r1, [r4, #3]
    8e5e:	78a3      	ldrb	r3, [r4, #2]
    8e60:	4299      	cmp	r1, r3
    8e62:	d103      	bne.n	8e6c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    8e64:	70e2      	strb	r2, [r4, #3]
    8e66:	7921      	ldrb	r1, [r4, #4]
    8e68:	1c49      	adds	r1, r1, #1
    8e6a:	7121      	strb	r1, [r4, #4]
    8e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e70:	f000 b825 	b.w	8ebe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00008e74 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    8e74:	7081      	strb	r1, [r0, #2]
    8e76:	4770      	bx	lr

00008e78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    8e78:	b570      	push	{r4, r5, r6, lr}
    8e7a:	4604      	mov	r4, r0
    8e7c:	7880      	ldrb	r0, [r0, #2]
    8e7e:	f000 f847 	bl	8f10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8e82:	7861      	ldrb	r1, [r4, #1]
    8e84:	fb11 f500 	smulbb	r5, r1, r0
    8e88:	78e0      	ldrb	r0, [r4, #3]
    8e8a:	f000 f841 	bl	8f10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8e8e:	7861      	ldrb	r1, [r4, #1]
    8e90:	7962      	ldrb	r2, [r4, #5]
    8e92:	fb10 2001 	smlabb	r0, r0, r1, r2
    8e96:	7821      	ldrb	r1, [r4, #0]
    8e98:	7922      	ldrb	r2, [r4, #4]
    8e9a:	1a89      	subs	r1, r1, r2
    8e9c:	fb11 f105 	smulbb	r1, r1, r5
    8ea0:	1a08      	subs	r0, r1, r0
    8ea2:	b2c0      	uxtb	r0, r0
    8ea4:	bd70      	pop	{r4, r5, r6, pc}

00008ea6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    8ea6:	2100      	movs	r1, #0
    8ea8:	6001      	str	r1, [r0, #0]
    8eaa:	8081      	strh	r1, [r0, #4]
    8eac:	2101      	movs	r1, #1
    8eae:	7041      	strb	r1, [r0, #1]
    8eb0:	7001      	strb	r1, [r0, #0]
    8eb2:	4770      	bx	lr

00008eb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    8eb4:	2100      	movs	r1, #0
    8eb6:	70c1      	strb	r1, [r0, #3]
    8eb8:	7141      	strb	r1, [r0, #5]
    8eba:	7101      	strb	r1, [r0, #4]
    8ebc:	4770      	bx	lr
    8ebe:	b510      	push	{r4, lr}
    8ec0:	2801      	cmp	r0, #1
    8ec2:	d007      	beq.n	8ed4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    8ec4:	2802      	cmp	r0, #2
    8ec6:	d007      	beq.n	8ed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    8ec8:	2804      	cmp	r0, #4
    8eca:	d007      	beq.n	8edc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    8ecc:	2139      	movs	r1, #57	; 0x39
    8ece:	202e      	movs	r0, #46	; 0x2e
    8ed0:	f7f7 fa2a 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ed4:	2025      	movs	r0, #37	; 0x25
    8ed6:	bd10      	pop	{r4, pc}
    8ed8:	2026      	movs	r0, #38	; 0x26
    8eda:	bd10      	pop	{r4, pc}
    8edc:	2027      	movs	r0, #39	; 0x27
    8ede:	bd10      	pop	{r4, pc}
    8ee0:	4601      	mov	r1, r0
    8ee2:	2000      	movs	r0, #0
    8ee4:	788a      	ldrb	r2, [r1, #2]
    8ee6:	07d3      	lsls	r3, r2, #31
    8ee8:	d002      	beq.n	8ef0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    8eea:	78cb      	ldrb	r3, [r1, #3]
    8eec:	07db      	lsls	r3, r3, #31
    8eee:	d006      	beq.n	8efe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    8ef0:	0793      	lsls	r3, r2, #30
    8ef2:	d506      	bpl.n	8f02 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    8ef4:	78cb      	ldrb	r3, [r1, #3]
    8ef6:	079b      	lsls	r3, r3, #30
    8ef8:	d403      	bmi.n	8f02 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    8efa:	2002      	movs	r0, #2
    8efc:	4770      	bx	lr
    8efe:	2001      	movs	r0, #1
    8f00:	4770      	bx	lr
    8f02:	0752      	lsls	r2, r2, #29
    8f04:	d5fc      	bpl.n	8f00 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    8f06:	78c9      	ldrb	r1, [r1, #3]
    8f08:	0749      	lsls	r1, r1, #29
    8f0a:	d4f9      	bmi.n	8f00 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    8f0c:	2004      	movs	r0, #4
    8f0e:	4770      	bx	lr
    8f10:	f3c0 0180 	ubfx	r1, r0, #2, #1
    8f14:	f3c0 0240 	ubfx	r2, r0, #1, #1
    8f18:	4411      	add	r1, r2
    8f1a:	f000 0001 	and.w	r0, r0, #1
    8f1e:	4408      	add	r0, r1
    8f20:	4770      	bx	lr

00008f22 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    8f22:	f240 315a 	movw	r1, #858	; 0x35a
    8f26:	4348      	muls	r0, r1
    8f28:	4770      	bx	lr

00008f2a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    8f2a:	f240 20ef 	movw	r0, #751	; 0x2ef
    8f2e:	4770      	bx	lr
    8f30:	041c020e 	.word	0x041c020e
    8f34:	0c600630 	.word	0x0c600630
    8f38:	06b4035a 	.word	0x06b4035a
    8f3c:	0bf505c5 	.word	0x0bf505c5
    8f40:	01a31225 	.word	0x01a31225
    8f44:	05bf03b1 	.word	0x05bf03b1
    8f48:	064902ef 	.word	0x064902ef
    8f4c:	09a3      	.short	0x09a3

00008f4e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    8f4e:	b510      	push	{r4, lr}
    8f50:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    8f54:	b109      	cbz	r1, 8f5a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    8f56:	2000      	movs	r0, #0
    8f58:	bd10      	pop	{r4, pc}
    8f5a:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    8f5e:	b131      	cbz	r1, 8f6e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    8f60:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    8f64:	428a      	cmp	r2, r1
    8f66:	d902      	bls.n	8f6e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    8f68:	f7f8 fddc 	bl	1b24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8f6c:	e7f3      	b.n	8f56 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    8f6e:	2001      	movs	r0, #1
    8f70:	bd10      	pop	{r4, pc}

00008f72 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8f72:	b510      	push	{r4, lr}
    8f74:	b131      	cbz	r1, 8f84 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    8f76:	2901      	cmp	r1, #1
    8f78:	d008      	beq.n	8f8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    8f7a:	f240 71d3 	movw	r1, #2003	; 0x7d3
    8f7e:	2030      	movs	r0, #48	; 0x30
    8f80:	f7f7 f9d2 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f88:	f000 b8e5 	b.w	9156 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x16a>
    8f8c:	2100      	movs	r1, #0
    8f8e:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    8f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f96:	f000 b8ae 	b.w	90f6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>

00008f9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    8f9a:	b510      	push	{r4, lr}
    8f9c:	4604      	mov	r4, r0
    8f9e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    8fa2:	2800      	cmp	r0, #0
    8fa4:	d019      	beq.n	8fda <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    8fa6:	2001      	movs	r0, #1
    8fa8:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    8fac:	4601      	mov	r1, r0
    8fae:	4620      	mov	r0, r4
    8fb0:	f7ff fe8a 	bl	8cc8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8fb4:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    8fb8:	b170      	cbz	r0, 8fd8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    8fba:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    8fbe:	f7fc fd0d 	bl	59dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8fc2:	7820      	ldrb	r0, [r4, #0]
    8fc4:	f7fc fe74 	bl	5cb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8fc8:	f814 09c8 	ldrb.w	r0, [r4], #-200
    8fcc:	f7fc fe4e 	bl	5c6c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8fd0:	b120      	cbz	r0, 8fdc <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    8fd2:	2000      	movs	r0, #0
    8fd4:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    8fd8:	2000      	movs	r0, #0
    8fda:	bd10      	pop	{r4, pc}
    8fdc:	f240 210b 	movw	r1, #523	; 0x20b
    8fe0:	2030      	movs	r0, #48	; 0x30
    8fe2:	f7f7 f9a1 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00008fe6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    8fe6:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    8fea:	4770      	bx	lr

00008fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    8fec:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    8ff0:	4770      	bx	lr
    8ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ff6:	4604      	mov	r4, r0
    8ff8:	f000 f886 	bl	9108 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    8ffc:	2700      	movs	r7, #0
    8ffe:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    9002:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    9006:	2601      	movs	r6, #1
    9008:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    900c:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    900e:	463d      	mov	r5, r7
    9010:	b130      	cbz	r0, 9020 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x34>
    9012:	f000 fe5b 	bl	9ccc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9016:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9018:	fbb0 f2f1 	udiv	r2, r0, r1
    901c:	fb01 0512 	mls	r5, r1, r2, r0
    9020:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    9024:	2100      	movs	r1, #0
    9026:	4680      	mov	r8, r0
    9028:	f7ff fbed 	bl	8806 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    902c:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    9030:	1949      	adds	r1, r1, r5
    9032:	4178      	adcs	r0, r7
    9034:	e9c4 1000 	strd	r1, r0, [r4]
    9038:	8920      	ldrh	r0, [r4, #8]
    903a:	3cf8      	subs	r4, #248	; 0xf8
    903c:	1c40      	adds	r0, r0, #1
    903e:	280a      	cmp	r0, #10
    9040:	d201      	bcs.n	9046 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x5a>
    9042:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    9046:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    904a:	b138      	cbz	r0, 905c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    904c:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    9050:	1c40      	adds	r0, r0, #1
    9052:	280a      	cmp	r0, #10
    9054:	d302      	bcc.n	905c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    9056:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    905a:	e002      	b.n	9062 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x76>
    905c:	2002      	movs	r0, #2
    905e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    9062:	4620      	mov	r0, r4
    9064:	f000 f823 	bl	90ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    9068:	b120      	cbz	r0, 9074 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x88>
    906a:	4620      	mov	r0, r4
    906c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9070:	f000 b80e 	b.w	9090 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    9074:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    9078:	4641      	mov	r1, r8
    907a:	f000 f843 	bl	9104 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    907e:	2800      	cmp	r0, #0
    9080:	d104      	bne.n	908c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa0>
    9082:	f240 61e7 	movw	r1, #1767	; 0x6e7
    9086:	2030      	movs	r0, #48	; 0x30
    9088:	f7f7 f94e 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9090:	b510      	push	{r4, lr}
    9092:	4604      	mov	r4, r0
    9094:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    9098:	f7fc fde8 	bl	5c6c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    909c:	2000      	movs	r0, #0
    909e:	7620      	strb	r0, [r4, #24]
    90a0:	bd10      	pop	{r4, pc}
    90a2:	b510      	push	{r4, lr}
    90a4:	f7ff fdbd 	bl	8c22 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    90a8:	f200 1015 	addw	r0, r0, #277	; 0x115
    90ac:	bd10      	pop	{r4, pc}
    90ae:	b570      	push	{r4, r5, r6, lr}
    90b0:	4605      	mov	r5, r0
    90b2:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    90b6:	b108      	cbz	r0, 90bc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd0>
    90b8:	2001      	movs	r0, #1
    90ba:	bd70      	pop	{r4, r5, r6, pc}
    90bc:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    90c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    90c4:	4050      	eors	r0, r2
    90c6:	ea70 0101 	orns	r1, r0, r1
    90ca:	d012      	beq.n	90f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    90cc:	2400      	movs	r4, #0
    90ce:	4621      	mov	r1, r4
    90d0:	4628      	mov	r0, r5
    90d2:	f7ff ffe6 	bl	90a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    90d6:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    90da:	1840      	adds	r0, r0, r1
    90dc:	4154      	adcs	r4, r2
    90de:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    90e2:	3df8      	subs	r5, #248	; 0xf8
    90e4:	1a10      	subs	r0, r2, r0
    90e6:	41a1      	sbcs	r1, r4
    90e8:	d503      	bpl.n	90f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    90ea:	4628      	mov	r0, r5
    90ec:	f7f8 fd1a 	bl	1b24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    90f0:	e7e2      	b.n	90b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xcc>
    90f2:	2000      	movs	r0, #0
    90f4:	bd70      	pop	{r4, r5, r6, pc}
    90f6:	b510      	push	{r4, lr}
    90f8:	f7fa f872 	bl	31e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    90fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9100:	f7fc bf12 	b.w	5f28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9104:	f7fc b80c 	b.w	5120 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9108:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    910a:	4604      	mov	r4, r0
    910c:	f7ff fdb0 	bl	8c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9110:	b1f8      	cbz	r0, 9152 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x166>
    9112:	4620      	mov	r0, r4
    9114:	f7ff fda4 	bl	8c60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9118:	b918      	cbnz	r0, 9122 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x136>
    911a:	4620      	mov	r0, r4
    911c:	f7ff fdaa 	bl	8c74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9120:	b140      	cbz	r0, 9134 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x148>
    9122:	245a      	movs	r4, #90	; 0x5a
    9124:	4668      	mov	r0, sp
    9126:	f7fe fb59 	bl	77dc <mpsl_fem_pa_is_configured>
    912a:	f89d 0000 	ldrb.w	r0, [sp]
    912e:	b118      	cbz	r0, 9138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14c>
    9130:	2501      	movs	r5, #1
    9132:	e002      	b.n	913a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14e>
    9134:	2450      	movs	r4, #80	; 0x50
    9136:	e7f5      	b.n	9124 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    9138:	2500      	movs	r5, #0
    913a:	a801      	add	r0, sp, #4
    913c:	f7fe fb36 	bl	77ac <mpsl_fem_lna_is_configured>
    9140:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9144:	b100      	cbz	r0, 9148 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15c>
    9146:	2001      	movs	r0, #1
    9148:	4305      	orrs	r5, r0
    914a:	d000      	beq.n	914e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x162>
    914c:	340a      	adds	r4, #10
    914e:	4620      	mov	r0, r4
    9150:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9152:	2061      	movs	r0, #97	; 0x61
    9154:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9156:	b570      	push	{r4, r5, r6, lr}
    9158:	4604      	mov	r4, r0
    915a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    915c:	2500      	movs	r5, #0
    915e:	b130      	cbz	r0, 916e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x182>
    9160:	f7f8 faba 	bl	16d8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9164:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9166:	fbb0 f2f1 	udiv	r2, r0, r1
    916a:	fb01 0512 	mls	r5, r1, r2, r0
    916e:	4620      	mov	r0, r4
    9170:	f7ff fd53 	bl	8c1a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9174:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    9178:	4428      	add	r0, r5
    917a:	34e8      	adds	r4, #232	; 0xe8
    917c:	2500      	movs	r5, #0
    917e:	1882      	adds	r2, r0, r2
    9180:	eb45 0001 	adc.w	r0, r5, r1
    9184:	e9c4 2004 	strd	r2, r0, [r4, #16]
    9188:	f804 5b0b 	strb.w	r5, [r4], #11
    918c:	2001      	movs	r0, #1
    918e:	f804 0901 	strb.w	r0, [r4], #-1
    9192:	2002      	movs	r0, #2
    9194:	f804 09f2 	strb.w	r0, [r4], #-242
    9198:	4620      	mov	r0, r4
    919a:	f7ff ffb5 	bl	9108 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    919e:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    91a2:	4620      	mov	r0, r4
    91a4:	f7ff ff83 	bl	90ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    91a8:	b930      	cbnz	r0, 91b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1cc>
    91aa:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    91ae:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    91b2:	f7ff ffa7 	bl	9104 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    91b6:	b128      	cbz	r0, 91c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1d8>
    91b8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    91bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91c0:	f7ff bf99 	b.w	90f6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>
    91c4:	f240 712d 	movw	r1, #1837	; 0x72d
    91c8:	2030      	movs	r0, #48	; 0x30
    91ca:	f7f7 f8ad 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91ce:	b510      	push	{r4, lr}
    91d0:	4604      	mov	r4, r0
    91d2:	2000      	movs	r0, #0
    91d4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    91d8:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    91dc:	f7fc fd46 	bl	5c6c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    91e0:	2020      	movs	r0, #32
    91e2:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    91e6:	bd10      	pop	{r4, pc}
    91e8:	b510      	push	{r4, lr}
    91ea:	b140      	cbz	r0, 91fe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x212>
    91ec:	2909      	cmp	r1, #9
    91ee:	d22f      	bcs.n	9250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x264>
    91f0:	e8df f001 	tbb	[pc, r1]
    91f4:	1e1e1607 	.word	0x1e1e1607
    91f8:	26222e1a 	.word	0x26222e1a
    91fc:	002a      	.short	0x002a
    91fe:	21cd      	movs	r1, #205	; 0xcd
    9200:	e023      	b.n	924a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9202:	4604      	mov	r4, r0
    9204:	f7f8 fc66 	bl	1ad4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    9208:	b110      	cbz	r0, 9210 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x224>
    920a:	f240 2187 	movw	r1, #647	; 0x287
    920e:	e01c      	b.n	924a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9210:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    9214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9218:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    921c:	f7fc bf60 	b.w	60e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9224:	f000 b816 	b.w	9254 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x268>
    9228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    922c:	f7fa b9a4 	b.w	3578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9234:	f7ff bedd 	b.w	8ff2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    9238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    923c:	f7ff bceb 	b.w	8c16 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    9240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9244:	f7ff bf24 	b.w	9090 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    9248:	21ed      	movs	r1, #237	; 0xed
    924a:	2030      	movs	r0, #48	; 0x30
    924c:	f7f7 f86c 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9250:	21f1      	movs	r1, #241	; 0xf1
    9252:	e7fa      	b.n	924a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9254:	b570      	push	{r4, r5, r6, lr}
    9256:	4605      	mov	r5, r0
    9258:	f7ff fd06 	bl	8c68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    925c:	b9c8      	cbnz	r0, 9292 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a6>
    925e:	2100      	movs	r1, #0
    9260:	4628      	mov	r0, r5
    9262:	f7ff ff1e 	bl	90a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    9266:	4604      	mov	r4, r0
    9268:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    926c:	42a0      	cmp	r0, r4
    926e:	d20e      	bcs.n	928e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    9270:	1a20      	subs	r0, r4, r0
    9272:	2867      	cmp	r0, #103	; 0x67
    9274:	d200      	bcs.n	9278 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x28c>
    9276:	2067      	movs	r0, #103	; 0x67
    9278:	2103      	movs	r1, #3
    927a:	f7fb fd7b 	bl	4d74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    927e:	b130      	cbz	r0, 928e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    9280:	4628      	mov	r0, r5
    9282:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    9286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    928a:	f7ff bcc4 	b.w	8c16 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    928e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    9292:	4628      	mov	r0, r5
    9294:	f7f8 fc3a 	bl	1b0c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    9298:	2800      	cmp	r0, #0
    929a:	d004      	beq.n	92a6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2ba>
    929c:	f240 21bd 	movw	r1, #701	; 0x2bd
    92a0:	2030      	movs	r0, #48	; 0x30
    92a2:	f7f7 f841 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92a6:	bd70      	pop	{r4, r5, r6, pc}

000092a8 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    92a8:	b510      	push	{r4, lr}
    92aa:	460c      	mov	r4, r1
    92ac:	f7f7 fc44 	bl	b38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    92b0:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    92b4:	2820      	cmp	r0, #32
    92b6:	d00c      	beq.n	92d2 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    92b8:	f7fc fcfa 	bl	5cb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    92bc:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    92c0:	f7fc fcd4 	bl	5c6c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    92c4:	2800      	cmp	r0, #0
    92c6:	d104      	bne.n	92d2 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    92c8:	f640 4129 	movw	r1, #3113	; 0xc29
    92cc:	2031      	movs	r0, #49	; 0x31
    92ce:	f7f7 f82b 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92d2:	bd10      	pop	{r4, pc}

000092d4 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    92d4:	207f      	movs	r0, #127	; 0x7f
    92d6:	f000 b83a 	b.w	934e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

000092da <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    92da:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    92de:	f000 b836 	b.w	934e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

000092e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    92e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92e6:	460d      	mov	r5, r1
    92e8:	4606      	mov	r6, r0
    92ea:	f7ff fff3 	bl	92d4 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    92ee:	4607      	mov	r7, r0
    92f0:	f7ff fff3 	bl	92da <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    92f4:	2400      	movs	r4, #0
    92f6:	4285      	cmp	r5, r0
    92f8:	d100      	bne.n	92fc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    92fa:	2401      	movs	r4, #1
    92fc:	42bd      	cmp	r5, r7
    92fe:	d101      	bne.n	9304 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    9300:	f044 0402 	orr.w	r4, r4, #2
    9304:	f000 f813 	bl	932e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    9308:	2200      	movs	r2, #0
    930a:	4601      	mov	r1, r0
    930c:	2301      	movs	r3, #1
    930e:	fa03 f002 	lsl.w	r0, r3, r2
    9312:	4208      	tst	r0, r1
    9314:	d005      	beq.n	9322 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    9316:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    931a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    931e:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    9322:	1c52      	adds	r2, r2, #1
    9324:	b2d2      	uxtb	r2, r2
    9326:	2a02      	cmp	r2, #2
    9328:	d3f1      	bcc.n	930e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    932e:	b510      	push	{r4, lr}
    9330:	f7f9 fcc2 	bl	2cb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9338:	f000 b800 	b.w	933c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x5a>
    933c:	0a00      	lsrs	r0, r0, #8
    933e:	2201      	movs	r2, #1
    9340:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    9344:	07c0      	lsls	r0, r0, #31
    9346:	d000      	beq.n	934a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x68>
    9348:	2203      	movs	r2, #3
    934a:	4610      	mov	r0, r2
    934c:	4770      	bx	lr
    934e:	b508      	push	{r3, lr}
    9350:	2301      	movs	r3, #1
    9352:	f640 1288 	movw	r2, #2440	; 0x988
    9356:	4669      	mov	r1, sp
    9358:	f7fe fa46 	bl	77e8 <mpsl_fem_tx_power_split>
    935c:	bd08      	pop	{r3, pc}
    935e:	b118      	cbz	r0, 9368 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9360:	2802      	cmp	r0, #2
    9362:	d001      	beq.n	9368 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9364:	2001      	movs	r0, #1
    9366:	4770      	bx	lr
    9368:	2000      	movs	r0, #0
    936a:	4770      	bx	lr

0000936c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    936c:	b510      	push	{r4, lr}
    936e:	4604      	mov	r4, r0
    9370:	f7f9 fc28 	bl	2bc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9374:	b108      	cbz	r0, 937a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    9376:	200c      	movs	r0, #12
    9378:	bd10      	pop	{r4, pc}
    937a:	7820      	ldrb	r0, [r4, #0]
    937c:	b118      	cbz	r0, 9386 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    937e:	2801      	cmp	r0, #1
    9380:	d001      	beq.n	9386 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    9382:	2012      	movs	r0, #18
    9384:	bd10      	pop	{r4, pc}
    9386:	f7ff ffea 	bl	935e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    938a:	1c61      	adds	r1, r4, #1
    938c:	f7f8 f9ca 	bl	1724 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    9390:	b108      	cbz	r0, 9396 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    9392:	2000      	movs	r0, #0
    9394:	bd10      	pop	{r4, pc}
    9396:	2007      	movs	r0, #7
    9398:	bd10      	pop	{r4, pc}

0000939a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    939a:	b510      	push	{r4, lr}
    939c:	f7f9 fc12 	bl	2bc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    93a0:	b108      	cbz	r0, 93a6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    93a2:	200c      	movs	r0, #12
    93a4:	bd10      	pop	{r4, pc}
    93a6:	f7f8 fa1b 	bl	17e0 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    93aa:	2000      	movs	r0, #0
    93ac:	f7f7 fee8 	bl	1180 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    93b0:	2000      	movs	r0, #0
    93b2:	bd10      	pop	{r4, pc}

000093b4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    93b4:	b510      	push	{r4, lr}
    93b6:	460b      	mov	r3, r1
    93b8:	2201      	movs	r2, #1
    93ba:	f100 0110 	add.w	r1, r0, #16
    93be:	f7ff f9fa 	bl	87b6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    93c2:	2000      	movs	r0, #0
    93c4:	bd10      	pop	{r4, pc}

000093c6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    93c6:	b510      	push	{r4, lr}
    93c8:	8800      	ldrh	r0, [r0, #0]
    93ca:	2100      	movs	r1, #0
    93cc:	f7f7 fa92 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    93d0:	b118      	cbz	r0, 93da <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    93d2:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    93d6:	b111      	cbz	r1, 93de <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    93d8:	e007      	b.n	93ea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    93da:	2002      	movs	r0, #2
    93dc:	bd10      	pop	{r4, pc}
    93de:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    93e2:	2915      	cmp	r1, #21
    93e4:	d003      	beq.n	93ee <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    93e6:	2916      	cmp	r1, #22
    93e8:	d001      	beq.n	93ee <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    93ea:	200c      	movs	r0, #12
    93ec:	bd10      	pop	{r4, pc}
    93ee:	2102      	movs	r1, #2
    93f0:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    93f4:	2000      	movs	r0, #0
    93f6:	bd10      	pop	{r4, pc}

000093f8 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    93f8:	b510      	push	{r4, lr}
    93fa:	2108      	movs	r1, #8
    93fc:	f7f7 f804 	bl	408 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9400:	2000      	movs	r0, #0
    9402:	bd10      	pop	{r4, pc}

00009404 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    9404:	b510      	push	{r4, lr}
    9406:	4604      	mov	r4, r0
    9408:	f7f9 fb3e 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    940c:	f7ff fc36 	bl	8c7c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9410:	f7f7 ffb8 	bl	1384 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9414:	7020      	strb	r0, [r4, #0]
    9416:	2000      	movs	r0, #0
    9418:	bd10      	pop	{r4, pc}

0000941a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    941a:	b510      	push	{r4, lr}
    941c:	4604      	mov	r4, r0
    941e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9422:	f000 fb41 	bl	9aa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9426:	f7f7 ffad 	bl	1384 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    942a:	7020      	strb	r0, [r4, #0]
    942c:	f000 fb13 	bl	9a56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c8>
    9430:	f7f7 ffa8 	bl	1384 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9434:	7060      	strb	r0, [r4, #1]
    9436:	2000      	movs	r0, #0
    9438:	bd10      	pop	{r4, pc}

0000943a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    943a:	b510      	push	{r4, lr}
    943c:	4604      	mov	r4, r0
    943e:	f7f8 f9d5 	bl	17ec <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    9442:	7020      	strb	r0, [r4, #0]
    9444:	2000      	movs	r0, #0
    9446:	bd10      	pop	{r4, pc}

00009448 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    9448:	b510      	push	{r4, lr}
    944a:	4604      	mov	r4, r0
    944c:	f7f9 fbba 	bl	2bc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9450:	b108      	cbz	r0, 9456 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    9452:	200c      	movs	r0, #12
    9454:	bd10      	pop	{r4, pc}
    9456:	7820      	ldrb	r0, [r4, #0]
    9458:	b108      	cbz	r0, 945e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    945a:	2801      	cmp	r0, #1
    945c:	d107      	bne.n	946e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    945e:	f7ff ff7e 	bl	935e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    9462:	1c61      	adds	r1, r4, #1
    9464:	f7f8 f99c 	bl	17a0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    9468:	b108      	cbz	r0, 946e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    946a:	2000      	movs	r0, #0
    946c:	bd10      	pop	{r4, pc}
    946e:	2012      	movs	r0, #18
    9470:	bd10      	pop	{r4, pc}

00009472 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    9472:	b51c      	push	{r2, r3, r4, lr}
    9474:	4604      	mov	r4, r0
    9476:	f7f9 fb07 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    947a:	2000      	movs	r0, #0
    947c:	f88d 0002 	strb.w	r0, [sp, #2]
    9480:	2103      	movs	r1, #3
    9482:	f88d 1001 	strb.w	r1, [sp, #1]
    9486:	f814 1b01 	ldrb.w	r1, [r4], #1
    948a:	f88d 1003 	strb.w	r1, [sp, #3]
    948e:	f88d 0000 	strb.w	r0, [sp]
    9492:	4668      	mov	r0, sp
    9494:	9401      	str	r4, [sp, #4]
    9496:	f000 f92c 	bl	96f2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    949a:	bd1c      	pop	{r2, r3, r4, pc}

0000949c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    949c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    949e:	4605      	mov	r5, r0
    94a0:	f7f9 faf2 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    94a4:	4606      	mov	r6, r0
    94a6:	7828      	ldrb	r0, [r5, #0]
    94a8:	2400      	movs	r4, #0
    94aa:	b160      	cbz	r0, 94c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    94ac:	f88d 4000 	strb.w	r4, [sp]
    94b0:	2001      	movs	r0, #1
    94b2:	f10d 0101 	add.w	r1, sp, #1
    94b6:	f7f7 fda9 	bl	100c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    94ba:	b120      	cbz	r0, 94c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    94bc:	4668      	mov	r0, sp
    94be:	f000 f897 	bl	95f0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    94c2:	2800      	cmp	r0, #0
    94c4:	d112      	bne.n	94ec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    94c6:	f88d 400c 	strb.w	r4, [sp, #12]
    94ca:	4630      	mov	r0, r6
    94cc:	f7ff fbcc 	bl	8c68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    94d0:	b118      	cbz	r0, 94da <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    94d2:	2080      	movs	r0, #128	; 0x80
    94d4:	f8ad 000d 	strh.w	r0, [sp, #13]
    94d8:	e001      	b.n	94de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    94da:	f8ad 400d 	strh.w	r4, [sp, #13]
    94de:	f88d 400f 	strb.w	r4, [sp, #15]
    94e2:	7828      	ldrb	r0, [r5, #0]
    94e4:	2801      	cmp	r0, #1
    94e6:	d003      	beq.n	94f0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    94e8:	b138      	cbz	r0, 94fa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    94ea:	2012      	movs	r0, #18
    94ec:	b004      	add	sp, #16
    94ee:	bd70      	pop	{r4, r5, r6, pc}
    94f0:	a903      	add	r1, sp, #12
    94f2:	4630      	mov	r0, r6
    94f4:	f7f9 fae4 	bl	2ac0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    94f8:	e7f8      	b.n	94ec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    94fa:	4630      	mov	r0, r6
    94fc:	f000 faae 	bl	9a5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9500:	e7f4      	b.n	94ec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00009502 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    9502:	b530      	push	{r4, r5, lr}
    9504:	b08b      	sub	sp, #44	; 0x2c
    9506:	4604      	mov	r4, r0
    9508:	f7f9 fabe 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    950c:	4602      	mov	r2, r0
    950e:	7920      	ldrb	r0, [r4, #4]
    9510:	2804      	cmp	r0, #4
    9512:	d803      	bhi.n	951c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    9514:	8860      	ldrh	r0, [r4, #2]
    9516:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    951a:	d902      	bls.n	9522 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    951c:	2012      	movs	r0, #18
    951e:	b00b      	add	sp, #44	; 0x2c
    9520:	bd30      	pop	{r4, r5, pc}
    9522:	2500      	movs	r5, #0
    9524:	f88d 5004 	strb.w	r5, [sp, #4]
    9528:	7921      	ldrb	r1, [r4, #4]
    952a:	9500      	str	r5, [sp, #0]
    952c:	f89d 0000 	ldrb.w	r0, [sp]
    9530:	2905      	cmp	r1, #5
    9532:	f040 0010 	orr.w	r0, r0, #16
    9536:	f88d 0000 	strb.w	r0, [sp]
    953a:	d254      	bcs.n	95e6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    953c:	e8df f001 	tbb	[pc, r1]
    9540:	11050803 	.word	0x11050803
    9544:	000b      	.short	0x000b
    9546:	f040 0001 	orr.w	r0, r0, #1
    954a:	f040 0002 	orr.w	r0, r0, #2
    954e:	e006      	b.n	955e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    9550:	f040 0009 	orr.w	r0, r0, #9
    9554:	e001      	b.n	955a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    9556:	f040 0001 	orr.w	r0, r0, #1
    955a:	f040 0004 	orr.w	r0, r0, #4
    955e:	f88d 0000 	strb.w	r0, [sp]
    9562:	f8bd 0000 	ldrh.w	r0, [sp]
    9566:	9000      	str	r0, [sp, #0]
    9568:	f8bd 0000 	ldrh.w	r0, [sp]
    956c:	f8ad 0005 	strh.w	r0, [sp, #5]
    9570:	8821      	ldrh	r1, [r4, #0]
    9572:	f8dd 0006 	ldr.w	r0, [sp, #6]
    9576:	f361 201f 	bfi	r0, r1, #8, #24
    957a:	f8cd 0006 	str.w	r0, [sp, #6]
    957e:	8861      	ldrh	r1, [r4, #2]
    9580:	f8dd 0009 	ldr.w	r0, [sp, #9]
    9584:	f361 201f 	bfi	r0, r1, #8, #24
    9588:	f8cd 0009 	str.w	r0, [sp, #9]
    958c:	7b60      	ldrb	r0, [r4, #13]
    958e:	f88d 000d 	strb.w	r0, [sp, #13]
    9592:	7960      	ldrb	r0, [r4, #5]
    9594:	f88d 000e 	strb.w	r0, [sp, #14]
    9598:	79a0      	ldrb	r0, [r4, #6]
    959a:	f88d 000f 	strb.w	r0, [sp, #15]
    959e:	f8d4 0007 	ldr.w	r0, [r4, #7]
    95a2:	9004      	str	r0, [sp, #16]
    95a4:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    95a8:	f8ad 0014 	strh.w	r0, [sp, #20]
    95ac:	7ba0      	ldrb	r0, [r4, #14]
    95ae:	f88d 0016 	strb.w	r0, [sp, #22]
    95b2:	207f      	movs	r0, #127	; 0x7f
    95b4:	f88d 0017 	strb.w	r0, [sp, #23]
    95b8:	2001      	movs	r0, #1
    95ba:	f88d 0018 	strb.w	r0, [sp, #24]
    95be:	f88d 5019 	strb.w	r5, [sp, #25]
    95c2:	f88d 001a 	strb.w	r0, [sp, #26]
    95c6:	f88d 501b 	strb.w	r5, [sp, #27]
    95ca:	4610      	mov	r0, r2
    95cc:	f7ff fb6c 	bl	8ca8 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    95d0:	f88d 001c 	strb.w	r0, [sp, #28]
    95d4:	f88d 501d 	strb.w	r5, [sp, #29]
    95d8:	f88d 501e 	strb.w	r5, [sp, #30]
    95dc:	a909      	add	r1, sp, #36	; 0x24
    95de:	a801      	add	r0, sp, #4
    95e0:	f7f9 f936 	bl	2850 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    95e4:	e79b      	b.n	951e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    95e6:	f241 31a9 	movw	r1, #5033	; 0x13a9
    95ea:	2039      	movs	r0, #57	; 0x39
    95ec:	f7f6 fe9c 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000095f0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    95f0:	b570      	push	{r4, r5, r6, lr}
    95f2:	4604      	mov	r4, r0
    95f4:	7800      	ldrb	r0, [r0, #0]
    95f6:	2101      	movs	r1, #1
    95f8:	f7f7 f97c 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    95fc:	0005      	movs	r5, r0
    95fe:	d007      	beq.n	9610 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    9600:	f7ff fcf4 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9604:	b160      	cbz	r0, 9620 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    9606:	4628      	mov	r0, r5
    9608:	f7ff fb34 	bl	8c74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    960c:	b110      	cbz	r0, 9614 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    960e:	e005      	b.n	961c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    9610:	2042      	movs	r0, #66	; 0x42
    9612:	bd70      	pop	{r4, r5, r6, pc}
    9614:	4628      	mov	r0, r5
    9616:	f7ff fb23 	bl	8c60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    961a:	b108      	cbz	r0, 9620 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    961c:	200c      	movs	r0, #12
    961e:	bd70      	pop	{r4, r5, r6, pc}
    9620:	1c61      	adds	r1, r4, #1
    9622:	4628      	mov	r0, r5
    9624:	f7ff fb38 	bl	8c98 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    9628:	2000      	movs	r0, #0
    962a:	bd70      	pop	{r4, r5, r6, pc}

0000962c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    962c:	b510      	push	{r4, lr}
    962e:	4604      	mov	r4, r0
    9630:	f7f9 fa2a 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9634:	7861      	ldrb	r1, [r4, #1]
    9636:	f3c1 0240 	ubfx	r2, r1, #1, #1
    963a:	f001 0101 	and.w	r1, r1, #1
    963e:	f7ff fb27 	bl	8c90 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    9642:	2000      	movs	r0, #0
    9644:	bd10      	pop	{r4, pc}

00009646 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    9646:	b510      	push	{r4, lr}
    9648:	4604      	mov	r4, r0
    964a:	2001      	movs	r0, #1
    964c:	f000 f93a 	bl	98c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9650:	b128      	cbz	r0, 965e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    9652:	4621      	mov	r1, r4
    9654:	2001      	movs	r0, #1
    9656:	f7f7 fcf1 	bl	103c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    965a:	2000      	movs	r0, #0
    965c:	bd10      	pop	{r4, pc}
    965e:	200c      	movs	r0, #12
    9660:	bd10      	pop	{r4, pc}

00009662 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    9662:	b51c      	push	{r2, r3, r4, lr}
    9664:	4604      	mov	r4, r0
    9666:	f7f9 fa0f 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    966a:	2000      	movs	r0, #0
    966c:	f88d 0000 	strb.w	r0, [sp]
    9670:	f88d 0002 	strb.w	r0, [sp, #2]
    9674:	2003      	movs	r0, #3
    9676:	f88d 0001 	strb.w	r0, [sp, #1]
    967a:	f814 0b01 	ldrb.w	r0, [r4], #1
    967e:	f88d 0003 	strb.w	r0, [sp, #3]
    9682:	4668      	mov	r0, sp
    9684:	9401      	str	r4, [sp, #4]
    9686:	f000 f89d 	bl	97c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    968a:	bd1c      	pop	{r2, r3, r4, pc}

0000968c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    968c:	b510      	push	{r4, lr}
    968e:	f7f7 fcf9 	bl	1084 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    9692:	2000      	movs	r0, #0
    9694:	bd10      	pop	{r4, pc}

00009696 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    9696:	b510      	push	{r4, lr}
    9698:	4604      	mov	r4, r0
    969a:	7800      	ldrb	r0, [r0, #0]
    969c:	28ff      	cmp	r0, #255	; 0xff
    969e:	d009      	beq.n	96b4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    96a0:	2101      	movs	r1, #1
    96a2:	f7f7 f927 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    96a6:	b118      	cbz	r0, 96b0 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    96a8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    96ac:	8441      	strh	r1, [r0, #34]	; 0x22
    96ae:	e005      	b.n	96bc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    96b0:	2042      	movs	r0, #66	; 0x42
    96b2:	bd10      	pop	{r4, pc}
    96b4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    96b8:	f7f9 f816 	bl	26e8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    96bc:	2000      	movs	r0, #0
    96be:	bd10      	pop	{r4, pc}

000096c0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    96c0:	b510      	push	{r4, lr}
    96c2:	4604      	mov	r4, r0
    96c4:	f7f9 fabe 	bl	2c44 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    96c8:	b118      	cbz	r0, 96d2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    96ca:	2000      	movs	r0, #0
    96cc:	f000 f8fa 	bl	98c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    96d0:	b128      	cbz	r0, 96de <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    96d2:	4621      	mov	r1, r4
    96d4:	2000      	movs	r0, #0
    96d6:	f7f7 fcb1 	bl	103c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    96da:	2000      	movs	r0, #0
    96dc:	bd10      	pop	{r4, pc}
    96de:	200c      	movs	r0, #12
    96e0:	bd10      	pop	{r4, pc}

000096e2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    96e2:	b510      	push	{r4, lr}
    96e4:	7800      	ldrb	r0, [r0, #0]
    96e6:	b100      	cbz	r0, 96ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    96e8:	2001      	movs	r0, #1
    96ea:	f7f9 f827 	bl	273c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    96ee:	2000      	movs	r0, #0
    96f0:	bd10      	pop	{r4, pc}

000096f2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    96f2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    96f6:	4606      	mov	r6, r0
    96f8:	7845      	ldrb	r5, [r0, #1]
    96fa:	7800      	ldrb	r0, [r0, #0]
    96fc:	2101      	movs	r1, #1
    96fe:	f7f7 f8f9 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9702:	0004      	movs	r4, r0
    9704:	d01e      	beq.n	9744 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    9706:	f7ff fa7e 	bl	8c06 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    970a:	78f1      	ldrb	r1, [r6, #3]
    970c:	4281      	cmp	r1, r0
    970e:	d800      	bhi.n	9712 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    9710:	4608      	mov	r0, r1
    9712:	4607      	mov	r7, r0
    9714:	2d04      	cmp	r5, #4
    9716:	d018      	beq.n	974a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    9718:	6b60      	ldr	r0, [r4, #52]	; 0x34
    971a:	f7fe ff72 	bl	8602 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    971e:	4438      	add	r0, r7
    9720:	b281      	uxth	r1, r0
    9722:	4620      	mov	r0, r4
    9724:	2201      	movs	r2, #1
    9726:	f000 f8df 	bl	98e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    972a:	2800      	cmp	r0, #0
    972c:	d10b      	bne.n	9746 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    972e:	2d03      	cmp	r5, #3
    9730:	d000      	beq.n	9734 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9732:	b1df      	cbz	r7, 976c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9734:	4620      	mov	r0, r4
    9736:	f7ff fa9b 	bl	8c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    973a:	7871      	ldrb	r1, [r6, #1]
    973c:	2903      	cmp	r1, #3
    973e:	d010      	beq.n	9762 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9740:	b9a0      	cbnz	r0, 976c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9742:	e004      	b.n	974e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    9744:	2042      	movs	r0, #66	; 0x42
    9746:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    974a:	b97f      	cbnz	r7, 976c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    974c:	e7f2      	b.n	9734 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    974e:	2904      	cmp	r1, #4
    9750:	d107      	bne.n	9762 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9752:	4620      	mov	r0, r4
    9754:	f7ff fc4a 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9758:	b140      	cbz	r0, 976c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    975a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    975c:	f7fe ff18 	bl	8590 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    9760:	b120      	cbz	r0, 976c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9762:	2d01      	cmp	r5, #1
    9764:	d004      	beq.n	9770 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    9766:	2d03      	cmp	r5, #3
    9768:	d002      	beq.n	9770 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    976a:	e00e      	b.n	978a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    976c:	2012      	movs	r0, #18
    976e:	e7ea      	b.n	9746 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9770:	4620      	mov	r0, r4
    9772:	f7ff fa7d 	bl	8c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9776:	b108      	cbz	r0, 977c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    9778:	2200      	movs	r2, #0
    977a:	e002      	b.n	9782 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    977c:	2d01      	cmp	r5, #1
    977e:	d013      	beq.n	97a8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    9780:	2201      	movs	r2, #1
    9782:	4668      	mov	r0, sp
    9784:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9786:	f7fe fe9f 	bl	84c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    978a:	2d04      	cmp	r5, #4
    978c:	d018      	beq.n	97c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    978e:	6872      	ldr	r2, [r6, #4]
    9790:	463b      	mov	r3, r7
    9792:	2101      	movs	r1, #1
    9794:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9796:	f7fe fecb 	bl	8530 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    979a:	b138      	cbz	r0, 97ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    979c:	7870      	ldrb	r0, [r6, #1]
    979e:	2802      	cmp	r0, #2
    97a0:	d006      	beq.n	97b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    97a2:	2803      	cmp	r0, #3
    97a4:	d004      	beq.n	97b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    97a6:	e00b      	b.n	97c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    97a8:	2202      	movs	r2, #2
    97aa:	e7ea      	b.n	9782 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    97ac:	2007      	movs	r0, #7
    97ae:	e7ca      	b.n	9746 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    97b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    97b2:	f7fe ff26 	bl	8602 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    97b6:	4602      	mov	r2, r0
    97b8:	2101      	movs	r1, #1
    97ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
    97bc:	f7fe fefe 	bl	85bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    97c0:	2000      	movs	r0, #0
    97c2:	e7c0      	b.n	9746 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

000097c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    97c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    97c8:	4607      	mov	r7, r0
    97ca:	7845      	ldrb	r5, [r0, #1]
    97cc:	78c6      	ldrb	r6, [r0, #3]
    97ce:	7800      	ldrb	r0, [r0, #0]
    97d0:	2101      	movs	r1, #1
    97d2:	f7f7 f88f 	bl	8f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97d6:	0004      	movs	r4, r0
    97d8:	d003      	beq.n	97e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    97da:	f7ff fa4b 	bl	8c74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    97de:	b118      	cbz	r0, 97e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    97e0:	e003      	b.n	97ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    97e2:	2042      	movs	r0, #66	; 0x42
    97e4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    97e8:	2600      	movs	r6, #0
    97ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
    97ec:	f7fe ff0d 	bl	860a <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    97f0:	4430      	add	r0, r6
    97f2:	b281      	uxth	r1, r0
    97f4:	4688      	mov	r8, r1
    97f6:	4620      	mov	r0, r4
    97f8:	2201      	movs	r2, #1
    97fa:	f000 f875 	bl	98e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    97fe:	2800      	cmp	r0, #0
    9800:	d1f0      	bne.n	97e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9802:	2d04      	cmp	r5, #4
    9804:	d008      	beq.n	9818 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    9806:	2d03      	cmp	r5, #3
    9808:	d00a      	beq.n	9820 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    980a:	b12e      	cbz	r6, 9818 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    980c:	4620      	mov	r0, r4
    980e:	f7ff fbed 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9812:	b118      	cbz	r0, 981c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    9814:	200c      	movs	r0, #12
    9816:	e7e5      	b.n	97e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9818:	2012      	movs	r0, #18
    981a:	e7e3      	b.n	97e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    981c:	2d01      	cmp	r5, #1
    981e:	d10c      	bne.n	983a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    9820:	4620      	mov	r0, r4
    9822:	f7ff fa25 	bl	8c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9826:	b108      	cbz	r0, 982c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    9828:	2204      	movs	r2, #4
    982a:	e002      	b.n	9832 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    982c:	2d01      	cmp	r5, #1
    982e:	d010      	beq.n	9852 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    9830:	2205      	movs	r2, #5
    9832:	4668      	mov	r0, sp
    9834:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9836:	f7fe fe47 	bl	84c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    983a:	687a      	ldr	r2, [r7, #4]
    983c:	4633      	mov	r3, r6
    983e:	2100      	movs	r1, #0
    9840:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9842:	f7fe fe75 	bl	8530 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    9846:	b130      	cbz	r0, 9856 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    9848:	2d02      	cmp	r5, #2
    984a:	d006      	beq.n	985a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    984c:	2d03      	cmp	r5, #3
    984e:	d004      	beq.n	985a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    9850:	e008      	b.n	9864 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    9852:	2206      	movs	r2, #6
    9854:	e7ed      	b.n	9832 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    9856:	2007      	movs	r0, #7
    9858:	e7c4      	b.n	97e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    985a:	4642      	mov	r2, r8
    985c:	2100      	movs	r1, #0
    985e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9860:	f7fe feac 	bl	85bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9864:	2000      	movs	r0, #0
    9866:	e7bd      	b.n	97e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00009868 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    9868:	b510      	push	{r4, lr}
    986a:	4604      	mov	r4, r0
    986c:	4601      	mov	r1, r0
    986e:	2000      	movs	r0, #0
    9870:	f7f7 fbcc 	bl	100c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    9874:	b910      	cbnz	r0, 987c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    9876:	2000      	movs	r0, #0
    9878:	6020      	str	r0, [r4, #0]
    987a:	80a0      	strh	r0, [r4, #4]
    987c:	2000      	movs	r0, #0
    987e:	bd10      	pop	{r4, pc}

00009880 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    9880:	b510      	push	{r4, lr}
    9882:	f7f9 f9e5 	bl	2c50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    9886:	2000      	movs	r0, #0
    9888:	bd10      	pop	{r4, pc}

0000988a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    988a:	f000 b800 	b.w	988e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000988e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    988e:	b510      	push	{r4, lr}
    9890:	f7fe ff44 	bl	871c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9894:	f7f7 fc32 	bl	10fc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9898:	f7f9 fa24 	bl	2ce4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    989c:	f7ff f8e5 	bl	8a6a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    98a0:	f7fe fffd 	bl	889e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    98a4:	f7f7 ff9c 	bl	17e0 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    98a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98ac:	f7f9 b8cc 	b.w	2a48 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf8>
    98b0:	07c1      	lsls	r1, r0, #31
    98b2:	d001      	beq.n	98b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    98b4:	2001      	movs	r0, #1
    98b6:	4770      	bx	lr
    98b8:	0780      	lsls	r0, r0, #30
    98ba:	d501      	bpl.n	98c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
    98bc:	2002      	movs	r0, #2
    98be:	4770      	bx	lr
    98c0:	2000      	movs	r0, #0
    98c2:	4770      	bx	lr
    98c4:	b510      	push	{r4, lr}
    98c6:	f7f9 f8a9 	bl	2a1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xcc>
    98ca:	b158      	cbz	r0, 98e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    98cc:	f7f9 f8dc 	bl	2a88 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    98d0:	4604      	mov	r4, r0
    98d2:	f7ff f9cf 	bl	8c74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    98d6:	b918      	cbnz	r0, 98e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x52>
    98d8:	4620      	mov	r0, r4
    98da:	f7ff f9c1 	bl	8c60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    98de:	b108      	cbz	r0, 98e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    98e0:	2000      	movs	r0, #0
    98e2:	bd10      	pop	{r4, pc}
    98e4:	2001      	movs	r0, #1
    98e6:	bd10      	pop	{r4, pc}
    98e8:	b570      	push	{r4, r5, r6, lr}
    98ea:	460c      	mov	r4, r1
    98ec:	4605      	mov	r5, r0
    98ee:	b112      	cbz	r2, 98f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    98f0:	291f      	cmp	r1, #31
    98f2:	d80c      	bhi.n	990e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    98f4:	e016      	b.n	9924 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    98f6:	f7f7 fa49 	bl	d8c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    98fa:	42a0      	cmp	r0, r4
    98fc:	d201      	bcs.n	9902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x74>
    98fe:	2007      	movs	r0, #7
    9900:	bd70      	pop	{r4, r5, r6, pc}
    9902:	4628      	mov	r0, r5
    9904:	f7ff f9b4 	bl	8c70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9908:	b118      	cbz	r0, 9912 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    990a:	2c1f      	cmp	r4, #31
    990c:	d901      	bls.n	9912 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    990e:	2012      	movs	r0, #18
    9910:	bd70      	pop	{r4, r5, r6, pc}
    9912:	4628      	mov	r0, r5
    9914:	f7ff f9b5 	bl	8c82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9918:	b130      	cbz	r0, 9928 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    991a:	4621      	mov	r1, r4
    991c:	4628      	mov	r0, r5
    991e:	f7ff f97e 	bl	8c1e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    9922:	b118      	cbz	r0, 992c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    9924:	2000      	movs	r0, #0
    9926:	bd70      	pop	{r4, r5, r6, pc}
    9928:	2042      	movs	r0, #66	; 0x42
    992a:	bd70      	pop	{r4, r5, r6, pc}
    992c:	2045      	movs	r0, #69	; 0x45
    992e:	bd70      	pop	{r4, r5, r6, pc}
    9930:	b510      	push	{r4, lr}
    9932:	4604      	mov	r4, r0
    9934:	7840      	ldrb	r0, [r0, #1]
    9936:	06c1      	lsls	r1, r0, #27
    9938:	d51c      	bpl.n	9974 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    993a:	07c0      	lsls	r0, r0, #31
    993c:	d00b      	beq.n	9956 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    993e:	f7f9 f9a9 	bl	2c94 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    9942:	b1b8      	cbz	r0, 9974 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9944:	7860      	ldrb	r0, [r4, #1]
    9946:	06c1      	lsls	r1, r0, #27
    9948:	d405      	bmi.n	9956 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    994a:	0700      	lsls	r0, r0, #28
    994c:	d503      	bpl.n	9956 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    994e:	7d20      	ldrb	r0, [r4, #20]
    9950:	2802      	cmp	r0, #2
    9952:	d10f      	bne.n	9974 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9954:	e010      	b.n	9978 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    9956:	7d20      	ldrb	r0, [r4, #20]
    9958:	2802      	cmp	r0, #2
    995a:	d001      	beq.n	9960 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    995c:	7ea0      	ldrb	r0, [r4, #26]
    995e:	b948      	cbnz	r0, 9974 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9960:	7860      	ldrb	r0, [r4, #1]
    9962:	0700      	lsls	r0, r0, #28
    9964:	d408      	bmi.n	9978 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    9966:	f8d4 0005 	ldr.w	r0, [r4, #5]
    996a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    996e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    9972:	d201      	bcs.n	9978 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    9974:	2011      	movs	r0, #17
    9976:	bd10      	pop	{r4, pc}
    9978:	2000      	movs	r0, #0
    997a:	bd10      	pop	{r4, pc}
    997c:	b538      	push	{r3, r4, r5, lr}
    997e:	4604      	mov	r4, r0
    9980:	7800      	ldrb	r0, [r0, #0]
    9982:	28ef      	cmp	r0, #239	; 0xef
    9984:	d843      	bhi.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9986:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    998a:	f8ad 0000 	strh.w	r0, [sp]
    998e:	9800      	ldr	r0, [sp, #0]
    9990:	f000 f892 	bl	9ab8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    9994:	b3a0      	cbz	r0, 9a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    9996:	7861      	ldrb	r1, [r4, #1]
    9998:	0708      	lsls	r0, r1, #28
    999a:	d40b      	bmi.n	99b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x126>
    999c:	f8d4 0002 	ldr.w	r0, [r4, #2]
    99a0:	f8d4 3005 	ldr.w	r3, [r4, #5]
    99a4:	0a02      	lsrs	r2, r0, #8
    99a6:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    99aa:	d830      	bhi.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99ac:	2220      	movs	r2, #32
    99ae:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    99b2:	d82c      	bhi.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99b4:	7a60      	ldrb	r0, [r4, #9]
    99b6:	b318      	cbz	r0, 9a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    99b8:	2807      	cmp	r0, #7
    99ba:	d828      	bhi.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99bc:	7aa0      	ldrb	r0, [r4, #10]
    99be:	b128      	cbz	r0, 99cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    99c0:	2801      	cmp	r0, #1
    99c2:	d003      	beq.n	99cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    99c4:	2802      	cmp	r0, #2
    99c6:	d001      	beq.n	99cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    99c8:	2803      	cmp	r0, #3
    99ca:	d120      	bne.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99cc:	074a      	lsls	r2, r1, #29
    99ce:	d403      	bmi.n	99d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    99d0:	2802      	cmp	r0, #2
    99d2:	d001      	beq.n	99d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    99d4:	2803      	cmp	r0, #3
    99d6:	d105      	bne.n	99e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x156>
    99d8:	7ae0      	ldrb	r0, [r4, #11]
    99da:	b108      	cbz	r0, 99e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    99dc:	2801      	cmp	r0, #1
    99de:	d116      	bne.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99e0:	0748      	lsls	r0, r1, #29
    99e2:	d407      	bmi.n	99f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    99e4:	7ca0      	ldrb	r0, [r4, #18]
    99e6:	b128      	cbz	r0, 99f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    99e8:	2801      	cmp	r0, #1
    99ea:	d003      	beq.n	99f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    99ec:	2802      	cmp	r0, #2
    99ee:	d001      	beq.n	99f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    99f0:	2803      	cmp	r0, #3
    99f2:	d10c      	bne.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99f4:	06c8      	lsls	r0, r1, #27
    99f6:	7d20      	ldrb	r0, [r4, #20]
    99f8:	d503      	bpl.n	9a02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    99fa:	2801      	cmp	r0, #1
    99fc:	d107      	bne.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99fe:	e002      	b.n	9a06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    9a00:	e005      	b.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a02:	2802      	cmp	r0, #2
    9a04:	d003      	beq.n	9a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a06:	7e20      	ldrb	r0, [r4, #24]
    9a08:	b118      	cbz	r0, 9a12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    9a0a:	2801      	cmp	r0, #1
    9a0c:	d001      	beq.n	9a12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    9a0e:	2012      	movs	r0, #18
    9a10:	bd38      	pop	{r3, r4, r5, pc}
    9a12:	2000      	movs	r0, #0
    9a14:	bd38      	pop	{r3, r4, r5, pc}
    9a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a1a:	7890      	ldrb	r0, [r2, #2]
    9a1c:	9e06      	ldr	r6, [sp, #24]
    9a1e:	461d      	mov	r5, r3
    9a20:	4614      	mov	r4, r2
    9a22:	b908      	cbnz	r0, 9a28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19a>
    9a24:	f7f9 f94e 	bl	2cc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9a28:	78e4      	ldrb	r4, [r4, #3]
    9a2a:	4607      	mov	r7, r0
    9a2c:	b914      	cbnz	r4, 9a34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    9a2e:	f7f9 f949 	bl	2cc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9a32:	4604      	mov	r4, r0
    9a34:	b16f      	cbz	r7, 9a52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a36:	b164      	cbz	r4, 9a52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a38:	4638      	mov	r0, r7
    9a3a:	f7ff ff39 	bl	98b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    9a3e:	4620      	mov	r0, r4
    9a40:	f7ff ff36 	bl	98b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    9a44:	b12f      	cbz	r7, 9a52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a46:	b124      	cbz	r4, 9a52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a48:	702f      	strb	r7, [r5, #0]
    9a4a:	7034      	strb	r4, [r6, #0]
    9a4c:	2000      	movs	r0, #0
    9a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a52:	2009      	movs	r0, #9
    9a54:	e7fb      	b.n	9a4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    9a56:	207f      	movs	r0, #127	; 0x7f
    9a58:	f000 b826 	b.w	9aa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9a5c:	b570      	push	{r4, r5, r6, lr}
    9a5e:	4605      	mov	r5, r0
    9a60:	f7ff f90f 	bl	8c82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9a64:	b170      	cbz	r0, 9a84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    9a66:	4628      	mov	r0, r5
    9a68:	f7ff fac0 	bl	8fec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9a6c:	2800      	cmp	r0, #0
    9a6e:	d008      	beq.n	9a82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    9a70:	4628      	mov	r0, r5
    9a72:	f7ff fab8 	bl	8fe6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    9a76:	4604      	mov	r4, r0
    9a78:	4628      	mov	r0, r5
    9a7a:	f7ff fa8e 	bl	8f9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    9a7e:	b118      	cbz	r0, 9a88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    9a80:	200c      	movs	r0, #12
    9a82:	bd70      	pop	{r4, r5, r6, pc}
    9a84:	2042      	movs	r0, #66	; 0x42
    9a86:	bd70      	pop	{r4, r5, r6, pc}
    9a88:	b164      	cbz	r4, 9aa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9a8a:	8820      	ldrh	r0, [r4, #0]
    9a8c:	f7fe fe15 	bl	86ba <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    9a90:	8820      	ldrh	r0, [r4, #0]
    9a92:	2100      	movs	r1, #0
    9a94:	f7f6 ffd0 	bl	a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9a98:	b120      	cbz	r0, 9aa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9a9a:	f241 71ae 	movw	r1, #6062	; 0x17ae
    9a9e:	2039      	movs	r0, #57	; 0x39
    9aa0:	f7f6 fc42 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9aa4:	2000      	movs	r0, #0
    9aa6:	bd70      	pop	{r4, r5, r6, pc}
    9aa8:	b508      	push	{r3, lr}
    9aaa:	f640 1288 	movw	r2, #2440	; 0x988
    9aae:	2300      	movs	r3, #0
    9ab0:	4669      	mov	r1, sp
    9ab2:	f7fd fe99 	bl	77e8 <mpsl_fem_tx_power_split>
    9ab6:	bd08      	pop	{r3, pc}
    9ab8:	b2c0      	uxtb	r0, r0
    9aba:	06c1      	lsls	r1, r0, #27
    9abc:	d40c      	bmi.n	9ad8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    9abe:	0681      	lsls	r1, r0, #26
    9ac0:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    9ac4:	d503      	bpl.n	9ace <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    9ac6:	b9d1      	cbnz	r1, 9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9ac8:	0781      	lsls	r1, r0, #30
    9aca:	d418      	bmi.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9acc:	e001      	b.n	9ad2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    9ace:	2900      	cmp	r1, #0
    9ad0:	d1fa      	bne.n	9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23a>
    9ad2:	0700      	lsls	r0, r0, #28
    9ad4:	d413      	bmi.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9ad6:	e010      	b.n	9afa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    9ad8:	0641      	lsls	r1, r0, #25
    9ada:	d410      	bmi.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9adc:	0681      	lsls	r1, r0, #26
    9ade:	d40e      	bmi.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9ae0:	07c1      	lsls	r1, r0, #31
    9ae2:	ea4f 7180 	mov.w	r1, r0, lsl #30
    9ae6:	d004      	beq.n	9af2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    9ae8:	2900      	cmp	r1, #0
    9aea:	db02      	blt.n	9af2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    9aec:	0740      	lsls	r0, r0, #29
    9aee:	d404      	bmi.n	9afa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    9af0:	e005      	b.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9af2:	0701      	lsls	r1, r0, #28
    9af4:	d403      	bmi.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9af6:	0740      	lsls	r0, r0, #29
    9af8:	d401      	bmi.n	9afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9afa:	2001      	movs	r0, #1
    9afc:	4770      	bx	lr
    9afe:	2000      	movs	r0, #0
    9b00:	4770      	bx	lr
    9b02:	b510      	push	{r4, lr}
    9b04:	f7f8 fe04 	bl	2710 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    9b08:	b110      	cbz	r0, 9b10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x282>
    9b0a:	f44f 7188 	mov.w	r1, #272	; 0x110
    9b0e:	e004      	b.n	9b1a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28c>
    9b10:	f7f7 ffe8 	bl	1ae4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    9b14:	b120      	cbz	r0, 9b20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    9b16:	f240 1115 	movw	r1, #277	; 0x115
    9b1a:	2001      	movs	r0, #1
    9b1c:	f7f6 fc04 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b24:	2001      	movs	r0, #1
    9b26:	f7fe bc18 	b.w	835a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    9b2a:	6802      	ldr	r2, [r0, #0]
    9b2c:	b912      	cbnz	r2, 9b34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a6>
    9b2e:	6001      	str	r1, [r0, #0]
    9b30:	4770      	bx	lr
    9b32:	4602      	mov	r2, r0
    9b34:	6850      	ldr	r0, [r2, #4]
    9b36:	b108      	cbz	r0, 9b3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ae>
    9b38:	428a      	cmp	r2, r1
    9b3a:	d1fa      	bne.n	9b32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    9b3c:	428a      	cmp	r2, r1
    9b3e:	d0f7      	beq.n	9b30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a2>
    9b40:	6051      	str	r1, [r2, #4]
    9b42:	4770      	bx	lr
    9b44:	b510      	push	{r4, lr}
    9b46:	4604      	mov	r4, r0
    9b48:	e002      	b.n	9b50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
    9b4a:	6820      	ldr	r0, [r4, #0]
    9b4c:	4780      	blx	r0
    9b4e:	6864      	ldr	r4, [r4, #4]
    9b50:	2c00      	cmp	r4, #0
    9b52:	d1fa      	bne.n	9b4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2bc>
    9b54:	bd10      	pop	{r4, pc}

00009b56 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    9b56:	f7fd bb9b 	b.w	7290 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    9b5a:	0001      	.short	0x0001
    9b5c:	0002000b 	.word	0x0002000b
    9b60:	0005000a 	.word	0x0005000a
    9b64:	000a0009 	.word	0x000a0009
    9b68:	00140008 	.word	0x00140008
    9b6c:	001e0007 	.word	0x001e0007
    9b70:	00320006 	.word	0x00320006
    9b74:	004b0005 	.word	0x004b0005
    9b78:	00640004 	.word	0x00640004
    9b7c:	00960003 	.word	0x00960003
    9b80:	00fa0002 	.word	0x00fa0002
    9b84:	01f40001 	.word	0x01f40001
	...

00009b8a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    9b8a:	b510      	push	{r4, lr}
    9b8c:	f7f9 faf8 	bl	3180 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    9b90:	f000 f818 	bl	9bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    9b94:	f7f9 f90a 	bl	2dac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    9b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b9c:	f7f9 b970 	b.w	2e80 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00009ba0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    9ba0:	b510      	push	{r4, lr}
    9ba2:	24c8      	movs	r4, #200	; 0xc8
    9ba4:	1e64      	subs	r4, r4, #1
    9ba6:	b2e4      	uxtb	r4, r4
    9ba8:	f7f9 f91e 	bl	2de8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    9bac:	2802      	cmp	r0, #2
    9bae:	d003      	beq.n	9bb8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    9bb0:	2801      	cmp	r0, #1
    9bb2:	d000      	beq.n	9bb6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    9bb4:	2000      	movs	r0, #0
    9bb6:	bd10      	pop	{r4, pc}
    9bb8:	2c00      	cmp	r4, #0
    9bba:	d1f3      	bne.n	9ba4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    9bbc:	21ed      	movs	r1, #237	; 0xed
    9bbe:	203b      	movs	r0, #59	; 0x3b
    9bc0:	f7f6 fbb2 	bl	328 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    9bc4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9bc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9bcc:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    9bd0:	f3bf 8f4f 	dsb	sy
    9bd4:	f3bf 8f6f 	isb	sy
    9bd8:	f7f9 b986 	b.w	2ee8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    9bdc:	2800      	cmp	r0, #0
    9bde:	db09      	blt.n	9bf4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    9be0:	f000 021f 	and.w	r2, r0, #31
    9be4:	2101      	movs	r1, #1
    9be6:	4091      	lsls	r1, r2
    9be8:	0940      	lsrs	r0, r0, #5
    9bea:	0080      	lsls	r0, r0, #2
    9bec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9bf0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9bf4:	4770      	bx	lr
    9bf6:	2800      	cmp	r0, #0
    9bf8:	db0d      	blt.n	9c16 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    9bfa:	f000 021f 	and.w	r2, r0, #31
    9bfe:	2101      	movs	r1, #1
    9c00:	4091      	lsls	r1, r2
    9c02:	0940      	lsrs	r0, r0, #5
    9c04:	0080      	lsls	r0, r0, #2
    9c06:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9c0a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9c0e:	f3bf 8f4f 	dsb	sy
    9c12:	f3bf 8f6f 	isb	sy
    9c16:	4770      	bx	lr
    9c18:	5840      	ldr	r0, [r0, r1]
    9c1a:	2800      	cmp	r0, #0
    9c1c:	d000      	beq.n	9c20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    9c1e:	2001      	movs	r0, #1
    9c20:	4770      	bx	lr
    9c22:	5840      	ldr	r0, [r0, r1]
    9c24:	2800      	cmp	r0, #0
    9c26:	d000      	beq.n	9c2a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    9c28:	2001      	movs	r0, #1
    9c2a:	4770      	bx	lr

00009c2c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    9c2c:	b510      	push	{r4, lr}
    9c2e:	4604      	mov	r4, r0
    9c30:	4608      	mov	r0, r1
    9c32:	f7f9 fbbf 	bl	33b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9c36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c3a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9c3e:	fbb0 f0f1 	udiv	r0, r0, r1
    9c42:	1a20      	subs	r0, r4, r0
    9c44:	1e80      	subs	r0, r0, #2
    9c46:	bd10      	pop	{r4, pc}

00009c48 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    9c48:	b510      	push	{r4, lr}
    9c4a:	4604      	mov	r4, r0
    9c4c:	4608      	mov	r0, r1
    9c4e:	f7f9 fbb1 	bl	33b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c56:	fbb0 f0f1 	udiv	r0, r0, r1
    9c5a:	1a20      	subs	r0, r4, r0
    9c5c:	bd10      	pop	{r4, pc}
    9c5e:	2804      	cmp	r0, #4
    9c60:	d202      	bcs.n	9c68 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    9c62:	f04f 0028 	mov.w	r0, #40	; 0x28
    9c66:	4770      	bx	lr
    9c68:	d102      	bne.n	9c70 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    9c6a:	f04f 0010 	mov.w	r0, #16
    9c6e:	4770      	bx	lr
    9c70:	f04f 0000 	mov.w	r0, #0
    9c74:	4770      	bx	lr
    9c76:	2100      	movs	r1, #0
    9c78:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    9c7c:	f800 1f24 	strb.w	r1, [r0, #36]!
    9c80:	7041      	strb	r1, [r0, #1]
    9c82:	4770      	bx	lr

00009c84 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    9c84:	b570      	push	{r4, r5, r6, lr}
    9c86:	f7fa f8ed 	bl	3e64 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9c8a:	4605      	mov	r5, r0
    9c8c:	2400      	movs	r4, #0
    9c8e:	e006      	b.n	9c9e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    9c90:	4620      	mov	r0, r4
    9c92:	f7fa f8ed 	bl	3e70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9c96:	f7ff ffee 	bl	9c76 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9c9a:	1c64      	adds	r4, r4, #1
    9c9c:	b2e4      	uxtb	r4, r4
    9c9e:	42ac      	cmp	r4, r5
    9ca0:	d3f6      	bcc.n	9c90 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    9ca2:	bd70      	pop	{r4, r5, r6, pc}

00009ca4 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    9ca4:	f7fc bc96 	b.w	65d4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00009ca8 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    9ca8:	b510      	push	{r4, lr}
    9caa:	2000      	movs	r0, #0
    9cac:	f7fc ffee 	bl	6c8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    9cb0:	6800      	ldr	r0, [r0, #0]
    9cb2:	2800      	cmp	r0, #0
    9cb4:	bf18      	it	ne
    9cb6:	2001      	movne	r0, #1
    9cb8:	bd10      	pop	{r4, pc}

00009cba <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    9cba:	b510      	push	{r4, lr}
    9cbc:	f7fd f85e 	bl	6d7c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9cc0:	f7fc fb42 	bl	6348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9cc4:	f000 f804 	bl	9cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9cc8:	b280      	uxth	r0, r0
    9cca:	bd10      	pop	{r4, pc}

00009ccc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    9ccc:	f7fc bfb8 	b.w	6c40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00009cd0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    9cd0:	0a41      	lsrs	r1, r0, #9
    9cd2:	f643 5209 	movw	r2, #15625	; 0x3d09
    9cd6:	4351      	muls	r1, r2
    9cd8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9cdc:	fb10 f002 	smulbb	r0, r0, r2
    9ce0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9ce4:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    9ce8:	4770      	bx	lr
    9cea:	2800      	cmp	r0, #0
    9cec:	db09      	blt.n	9d02 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    9cee:	f000 021f 	and.w	r2, r0, #31
    9cf2:	2101      	movs	r1, #1
    9cf4:	4091      	lsls	r1, r2
    9cf6:	0940      	lsrs	r0, r0, #5
    9cf8:	0080      	lsls	r0, r0, #2
    9cfa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9cfe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9d02:	4770      	bx	lr
    9d04:	2800      	cmp	r0, #0
    9d06:	db0d      	blt.n	9d24 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    9d08:	f000 021f 	and.w	r2, r0, #31
    9d0c:	2101      	movs	r1, #1
    9d0e:	4091      	lsls	r1, r2
    9d10:	0940      	lsrs	r0, r0, #5
    9d12:	0080      	lsls	r0, r0, #2
    9d14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d18:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9d1c:	f3bf 8f4f 	dsb	sy
    9d20:	f3bf 8f6f 	isb	sy
    9d24:	4770      	bx	lr
    9d26:	5840      	ldr	r0, [r0, r1]
    9d28:	2800      	cmp	r0, #0
    9d2a:	d000      	beq.n	9d2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    9d2c:	2001      	movs	r0, #1
    9d2e:	4770      	bx	lr
    9d30:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    9d34:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    9d38:	f002 0201 	and.w	r2, r2, #1
    9d3c:	03c0      	lsls	r0, r0, #15
    9d3e:	d503      	bpl.n	9d48 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9d40:	428a      	cmp	r2, r1
    9d42:	d101      	bne.n	9d48 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9d44:	2001      	movs	r0, #1
    9d46:	4770      	bx	lr
    9d48:	2000      	movs	r0, #0
    9d4a:	4770      	bx	lr

00009d4c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    9d4c:	b510      	push	{r4, lr}
    9d4e:	2101      	movs	r1, #1
    9d50:	0788      	lsls	r0, r1, #30
    9d52:	f7fd fb35 	bl	73c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9d56:	2800      	cmp	r0, #0
    9d58:	d000      	beq.n	9d5c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    9d5a:	2001      	movs	r0, #1
    9d5c:	bd10      	pop	{r4, pc}

00009d5e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    9d5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9d62:	2101      	movs	r1, #1
    9d64:	6001      	str	r1, [r0, #0]
    9d66:	4770      	bx	lr

00009d68 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    9d68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9d6c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    9d70:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    9d74:	f002 0203 	and.w	r2, r2, #3
    9d78:	03c9      	lsls	r1, r1, #15
    9d7a:	d503      	bpl.n	9d84 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9d7c:	4282      	cmp	r2, r0
    9d7e:	d101      	bne.n	9d84 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9d80:	2001      	movs	r0, #1
    9d82:	4770      	bx	lr
    9d84:	2000      	movs	r0, #0
    9d86:	4770      	bx	lr

00009d88 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    9d88:	b510      	push	{r4, lr}
    9d8a:	2100      	movs	r1, #0
    9d8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9d90:	f7fd fb16 	bl	73c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9d94:	2800      	cmp	r0, #0
    9d96:	d000      	beq.n	9d9a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    9d98:	2001      	movs	r0, #1
    9d9a:	bd10      	pop	{r4, pc}
    9d9c:	2800      	cmp	r0, #0
    9d9e:	db09      	blt.n	9db4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    9da0:	f000 021f 	and.w	r2, r0, #31
    9da4:	2101      	movs	r1, #1
    9da6:	4091      	lsls	r1, r2
    9da8:	0940      	lsrs	r0, r0, #5
    9daa:	0080      	lsls	r0, r0, #2
    9dac:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9db0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9db4:	4770      	bx	lr
    9db6:	2800      	cmp	r0, #0
    9db8:	db0d      	blt.n	9dd6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    9dba:	f000 021f 	and.w	r2, r0, #31
    9dbe:	2101      	movs	r1, #1
    9dc0:	4091      	lsls	r1, r2
    9dc2:	0940      	lsrs	r0, r0, #5
    9dc4:	0080      	lsls	r0, r0, #2
    9dc6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9dca:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9dce:	f3bf 8f4f 	dsb	sy
    9dd2:	f3bf 8f6f 	isb	sy
    9dd6:	4770      	bx	lr
    9dd8:	00021000 	.word	0x00021000
    9ddc:	000000fa 	.word	0x000000fa
    9de0:	5faee8ff 	.word	0x5faee8ff
    9de4:	c87c9577 	.word	0xc87c9577
    9de8:	18146227 	.word	0x18146227
    9dec:	c65deae6 	.word	0xc65deae6
    9df0:	3a723992 	.word	0x3a723992
    9df4:	2800      	cmp	r0, #0
    9df6:	db09      	blt.n	9e0c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    9df8:	f000 021f 	and.w	r2, r0, #31
    9dfc:	2101      	movs	r1, #1
    9dfe:	4091      	lsls	r1, r2
    9e00:	0940      	lsrs	r0, r0, #5
    9e02:	0080      	lsls	r0, r0, #2
    9e04:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e08:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9e0c:	4770      	bx	lr

00009e0e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    9e0e:	f3ef 8110 	mrs	r1, PRIMASK
    9e12:	b672      	cpsid	i
    9e14:	7802      	ldrb	r2, [r0, #0]
    9e16:	2a01      	cmp	r2, #1
    9e18:	d001      	beq.n	9e1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    9e1a:	2201      	movs	r2, #1
    9e1c:	e000      	b.n	9e20 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    9e1e:	2200      	movs	r2, #0
    9e20:	2301      	movs	r3, #1
    9e22:	7003      	strb	r3, [r0, #0]
    9e24:	b901      	cbnz	r1, 9e28 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    9e26:	b662      	cpsie	i
    9e28:	b10a      	cbz	r2, 9e2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    9e2a:	2000      	movs	r0, #0
    9e2c:	4770      	bx	lr
    9e2e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9e32:	4770      	bx	lr

00009e34 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    9e34:	2100      	movs	r1, #0
    9e36:	7001      	strb	r1, [r0, #0]
    9e38:	4608      	mov	r0, r1
    9e3a:	4770      	bx	lr

00009e3c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    9e3c:	f3ef 8110 	mrs	r1, PRIMASK
    9e40:	b672      	cpsid	i
    9e42:	2200      	movs	r2, #0
    9e44:	7002      	strb	r2, [r0, #0]
    9e46:	b901      	cbnz	r1, 9e4a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    9e48:	b662      	cpsie	i
    9e4a:	2000      	movs	r0, #0
    9e4c:	4770      	bx	lr

00009e4e <mpsl_low_priority_process>:
    9e4e:	f7fd bc0b 	b.w	7668 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00009e52 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    9e52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9e56:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9e5a:	280f      	cmp	r0, #15
    9e5c:	d001      	beq.n	9e62 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    9e5e:	2000      	movs	r0, #0
    9e60:	4770      	bx	lr
    9e62:	2001      	movs	r0, #1
    9e64:	4770      	bx	lr

00009e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    9e66:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9e6a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9e6e:	280a      	cmp	r0, #10
    9e70:	d001      	beq.n	9e76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    9e72:	2000      	movs	r0, #0
    9e74:	4770      	bx	lr
    9e76:	2001      	movs	r0, #1
    9e78:	4770      	bx	lr

00009e7a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    9e7a:	b500      	push	{lr}
    9e7c:	f7ff fff3 	bl	9e66 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9e80:	b120      	cbz	r0, 9e8c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    9e82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9e86:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9e8a:	b108      	cbz	r0, 9e90 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    9e8c:	2000      	movs	r0, #0
    9e8e:	bd00      	pop	{pc}
    9e90:	2001      	movs	r0, #1
    9e92:	bd00      	pop	{pc}

00009e94 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    9e94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9e98:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9e9c:	280e      	cmp	r0, #14
    9e9e:	d001      	beq.n	9ea4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    9ea0:	2000      	movs	r0, #0
    9ea2:	4770      	bx	lr
    9ea4:	2001      	movs	r0, #1
    9ea6:	4770      	bx	lr

00009ea8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    9ea8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9eac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9eb0:	2810      	cmp	r0, #16
    9eb2:	d001      	beq.n	9eb8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    9eb4:	2000      	movs	r0, #0
    9eb6:	4770      	bx	lr
    9eb8:	2001      	movs	r0, #1
    9eba:	4770      	bx	lr

00009ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    9ebc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ec0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9ec4:	2806      	cmp	r0, #6
    9ec6:	d003      	beq.n	9ed0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    9ec8:	1c40      	adds	r0, r0, #1
    9eca:	d001      	beq.n	9ed0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    9ecc:	2000      	movs	r0, #0
    9ece:	4770      	bx	lr
    9ed0:	2001      	movs	r0, #1
    9ed2:	4770      	bx	lr

00009ed4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    9ed4:	b500      	push	{lr}
    9ed6:	f7ff fff1 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    9eda:	b148      	cbz	r0, 9ef0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    9edc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ee0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9ee4:	2806      	cmp	r0, #6
    9ee6:	d303      	bcc.n	9ef0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    9ee8:	1c40      	adds	r0, r0, #1
    9eea:	d001      	beq.n	9ef0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    9eec:	2001      	movs	r0, #1
    9eee:	bd00      	pop	{pc}
    9ef0:	2000      	movs	r0, #0
    9ef2:	bd00      	pop	{pc}

00009ef4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    9ef4:	b500      	push	{lr}
    9ef6:	f7ff ffe1 	bl	9ebc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    9efa:	b138      	cbz	r0, 9f0c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    9efc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f00:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9f04:	2806      	cmp	r0, #6
    9f06:	d303      	bcc.n	9f10 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    9f08:	1c40      	adds	r0, r0, #1
    9f0a:	d001      	beq.n	9f10 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    9f0c:	2000      	movs	r0, #0
    9f0e:	bd00      	pop	{pc}
    9f10:	2001      	movs	r0, #1
    9f12:	bd00      	pop	{pc}

00009f14 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    9f14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f18:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9f1c:	280d      	cmp	r0, #13
    9f1e:	d001      	beq.n	9f24 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    9f20:	2000      	movs	r0, #0
    9f22:	4770      	bx	lr
    9f24:	2001      	movs	r0, #1
    9f26:	4770      	bx	lr

00009f28 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    9f28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f2c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9f30:	2808      	cmp	r0, #8
    9f32:	d001      	beq.n	9f38 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    9f34:	2000      	movs	r0, #0
    9f36:	4770      	bx	lr
    9f38:	2001      	movs	r0, #1
    9f3a:	4770      	bx	lr

00009f3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    9f3c:	f7fd bbce 	b.w	76dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00009f40 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    9f40:	f7fd bbcc 	b.w	76dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00009f44 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    9f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f48:	428a      	cmp	r2, r1
    9f4a:	d803      	bhi.n	9f54 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    9f4c:	2179      	movs	r1, #121	; 0x79
    9f4e:	2096      	movs	r0, #150	; 0x96
    9f50:	f7fd fa8c 	bl	746c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f54:	fab2 f382 	clz	r3, r2
    9f58:	b143      	cbz	r3, 9f6c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    9f5a:	4099      	lsls	r1, r3
    9f5c:	f1c3 0c20 	rsb	ip, r3, #32
    9f60:	fa20 fc0c 	lsr.w	ip, r0, ip
    9f64:	4098      	lsls	r0, r3
    9f66:	ea41 010c 	orr.w	r1, r1, ip
    9f6a:	409a      	lsls	r2, r3
    9f6c:	0c13      	lsrs	r3, r2, #16
    9f6e:	fbb1 f5f3 	udiv	r5, r1, r3
    9f72:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    9f76:	b287      	uxth	r7, r0
    9f78:	fbb1 f0f3 	udiv	r0, r1, r3
    9f7c:	fb03 1615 	mls	r6, r3, r5, r1
    9f80:	b294      	uxth	r4, r2
    9f82:	fb00 f504 	mul.w	r5, r0, r4
    9f86:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    9f8a:	42b5      	cmp	r5, r6
    9f8c:	d905      	bls.n	9f9a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    9f8e:	1bad      	subs	r5, r5, r6
    9f90:	4295      	cmp	r5, r2
    9f92:	bf94      	ite	ls
    9f94:	2501      	movls	r5, #1
    9f96:	2502      	movhi	r5, #2
    9f98:	1b40      	subs	r0, r0, r5
    9f9a:	0409      	lsls	r1, r1, #16
    9f9c:	0405      	lsls	r5, r0, #16
    9f9e:	eb11 010c 	adds.w	r1, r1, ip
    9fa2:	fba0 0c02 	umull	r0, ip, r0, r2
    9fa6:	1a09      	subs	r1, r1, r0
    9fa8:	fbb1 f0f3 	udiv	r0, r1, r3
    9fac:	fbb1 fcf3 	udiv	ip, r1, r3
    9fb0:	fb03 131c 	mls	r3, r3, ip, r1
    9fb4:	fb00 f104 	mul.w	r1, r0, r4
    9fb8:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    9fbc:	4299      	cmp	r1, r3
    9fbe:	d905      	bls.n	9fcc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    9fc0:	1ac9      	subs	r1, r1, r3
    9fc2:	4291      	cmp	r1, r2
    9fc4:	bf94      	ite	ls
    9fc6:	2101      	movls	r1, #1
    9fc8:	2102      	movhi	r1, #2
    9fca:	1a40      	subs	r0, r0, r1
    9fcc:	4328      	orrs	r0, r5
    9fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009fd2 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    9fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fd6:	461e      	mov	r6, r3
    9fd8:	4615      	mov	r5, r2
    9fda:	4604      	mov	r4, r0
    9fdc:	9f06      	ldr	r7, [sp, #24]
    9fde:	f7ff ffb1 	bl	9f44 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    9fe2:	6030      	str	r0, [r6, #0]
    9fe4:	fba0 0105 	umull	r0, r1, r0, r5
    9fe8:	1a20      	subs	r0, r4, r0
    9fea:	6038      	str	r0, [r7, #0]
    9fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009ff0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    9ff0:	b4f0      	push	{r4, r5, r6, r7}
    9ff2:	ea80 0c01 	eor.w	ip, r0, r1
    9ff6:	4603      	mov	r3, r0
    9ff8:	f01c 0f03 	tst.w	ip, #3
    9ffc:	d13c      	bne.n	a078 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    9ffe:	f013 0f03 	tst.w	r3, #3
    a002:	d00b      	beq.n	a01c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a004:	2a00      	cmp	r2, #0
    a006:	bf04      	itt	eq
    a008:	bcf0      	popeq	{r4, r5, r6, r7}
    a00a:	4770      	bxeq	lr
    a00c:	f811 cb01 	ldrb.w	ip, [r1], #1
    a010:	f803 cb01 	strb.w	ip, [r3], #1
    a014:	1e52      	subs	r2, r2, #1
    a016:	f013 0f03 	tst.w	r3, #3
    a01a:	d1f3      	bne.n	a004 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a01c:	2a03      	cmp	r2, #3
    a01e:	d94f      	bls.n	a0c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a020:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a024:	d24c      	bcs.n	a0c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a026:	f1c2 0c00 	rsb	ip, r2, #0
    a02a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a02e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a032:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a036:	f1cc 0c00 	rsb	ip, ip, #0
    a03a:	f1bc 0f00 	cmp.w	ip, #0
    a03e:	dd1b      	ble.n	a078 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a040:	1f0d      	subs	r5, r1, #4
    a042:	1f1c      	subs	r4, r3, #4
    a044:	f01c 0f01 	tst.w	ip, #1
    a048:	d003      	beq.n	a052 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a04a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a04e:	f844 6f04 	str.w	r6, [r4, #4]!
    a052:	ea5f 066c 	movs.w	r6, ip, asr #1
    a056:	d007      	beq.n	a068 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a058:	686f      	ldr	r7, [r5, #4]
    a05a:	6067      	str	r7, [r4, #4]
    a05c:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a060:	f844 7f08 	str.w	r7, [r4, #8]!
    a064:	1e76      	subs	r6, r6, #1
    a066:	d1f7      	bne.n	a058 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a068:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a06c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a070:	f1cc 0c00 	rsb	ip, ip, #0
    a074:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a078:	2a00      	cmp	r2, #0
    a07a:	bf04      	itt	eq
    a07c:	bcf0      	popeq	{r4, r5, r6, r7}
    a07e:	4770      	bxeq	lr
    a080:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a084:	d226      	bcs.n	a0d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a086:	2a00      	cmp	r2, #0
    a088:	bfdc      	itt	le
    a08a:	bcf0      	pople	{r4, r5, r6, r7}
    a08c:	4770      	bxle	lr
    a08e:	1e49      	subs	r1, r1, #1
    a090:	1e5b      	subs	r3, r3, #1
    a092:	f012 0f01 	tst.w	r2, #1
    a096:	d003      	beq.n	a0a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a098:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a09c:	f803 cf01 	strb.w	ip, [r3, #1]!
    a0a0:	1052      	asrs	r2, r2, #1
    a0a2:	bf04      	itt	eq
    a0a4:	bcf0      	popeq	{r4, r5, r6, r7}
    a0a6:	4770      	bxeq	lr
    a0a8:	f891 c001 	ldrb.w	ip, [r1, #1]
    a0ac:	f883 c001 	strb.w	ip, [r3, #1]
    a0b0:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a0b4:	f803 cf02 	strb.w	ip, [r3, #2]!
    a0b8:	1e52      	subs	r2, r2, #1
    a0ba:	d1f5      	bne.n	a0a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a0bc:	bcf0      	pop	{r4, r5, r6, r7}
    a0be:	4770      	bx	lr
    a0c0:	2a04      	cmp	r2, #4
    a0c2:	d3d9      	bcc.n	a078 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a0c4:	f851 cb04 	ldr.w	ip, [r1], #4
    a0c8:	1f12      	subs	r2, r2, #4
    a0ca:	f843 cb04 	str.w	ip, [r3], #4
    a0ce:	2a04      	cmp	r2, #4
    a0d0:	d2f8      	bcs.n	a0c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    a0d2:	e7d1      	b.n	a078 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a0d4:	f811 cb01 	ldrb.w	ip, [r1], #1
    a0d8:	f803 cb01 	strb.w	ip, [r3], #1
    a0dc:	1e52      	subs	r2, r2, #1
    a0de:	d1f9      	bne.n	a0d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a0e0:	bcf0      	pop	{r4, r5, r6, r7}
    a0e2:	4770      	bx	lr

0000a0e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    a0e4:	b470      	push	{r4, r5, r6}
    a0e6:	4603      	mov	r3, r0
    a0e8:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    a0ec:	f010 0f03 	tst.w	r0, #3
    a0f0:	d009      	beq.n	a106 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    a0f2:	2a00      	cmp	r2, #0
    a0f4:	bf04      	itt	eq
    a0f6:	bc70      	popeq	{r4, r5, r6}
    a0f8:	4770      	bxeq	lr
    a0fa:	f803 cb01 	strb.w	ip, [r3], #1
    a0fe:	1e52      	subs	r2, r2, #1
    a100:	f013 0f03 	tst.w	r3, #3
    a104:	d1f5      	bne.n	a0f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    a106:	b2c9      	uxtb	r1, r1
    a108:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a10c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    a110:	2a03      	cmp	r2, #3
    a112:	d939      	bls.n	a188 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a114:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a118:	d236      	bcs.n	a188 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a11a:	4251      	negs	r1, r2
    a11c:	17cc      	asrs	r4, r1, #31
    a11e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    a122:	1089      	asrs	r1, r1, #2
    a124:	424e      	negs	r6, r1
    a126:	2e00      	cmp	r6, #0
    a128:	dd11      	ble.n	a14e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a12a:	1f19      	subs	r1, r3, #4
    a12c:	f016 0f01 	tst.w	r6, #1
    a130:	bf18      	it	ne
    a132:	f841 5f04 	strne.w	r5, [r1, #4]!
    a136:	1074      	asrs	r4, r6, #1
    a138:	d004      	beq.n	a144 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    a13a:	604d      	str	r5, [r1, #4]
    a13c:	f841 5f08 	str.w	r5, [r1, #8]!
    a140:	1e64      	subs	r4, r4, #1
    a142:	d1fa      	bne.n	a13a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    a144:	4271      	negs	r1, r6
    a146:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    a14a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a14e:	2a00      	cmp	r2, #0
    a150:	bf04      	itt	eq
    a152:	bc70      	popeq	{r4, r5, r6}
    a154:	4770      	bxeq	lr
    a156:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a15a:	d21d      	bcs.n	a198 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a15c:	2a00      	cmp	r2, #0
    a15e:	bfdc      	itt	le
    a160:	bc70      	pople	{r4, r5, r6}
    a162:	4770      	bxle	lr
    a164:	1e59      	subs	r1, r3, #1
    a166:	f012 0f01 	tst.w	r2, #1
    a16a:	bf18      	it	ne
    a16c:	f801 cf01 	strbne.w	ip, [r1, #1]!
    a170:	1052      	asrs	r2, r2, #1
    a172:	bf04      	itt	eq
    a174:	bc70      	popeq	{r4, r5, r6}
    a176:	4770      	bxeq	lr
    a178:	f881 c001 	strb.w	ip, [r1, #1]
    a17c:	f801 cf02 	strb.w	ip, [r1, #2]!
    a180:	1e52      	subs	r2, r2, #1
    a182:	d1f9      	bne.n	a178 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    a184:	bc70      	pop	{r4, r5, r6}
    a186:	4770      	bx	lr
    a188:	2a04      	cmp	r2, #4
    a18a:	d3e0      	bcc.n	a14e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a18c:	1f12      	subs	r2, r2, #4
    a18e:	f843 5b04 	str.w	r5, [r3], #4
    a192:	2a04      	cmp	r2, #4
    a194:	d2fa      	bcs.n	a18c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    a196:	e7da      	b.n	a14e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a198:	f803 cb01 	strb.w	ip, [r3], #1
    a19c:	1e52      	subs	r2, r2, #1
    a19e:	d1fb      	bne.n	a198 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a1a0:	bc70      	pop	{r4, r5, r6}
    a1a2:	4770      	bx	lr
    a1a4:	f04f 30ff 	mov.w	r0, #4294967295
    a1a8:	4770      	bx	lr
    a1aa:	2000      	movs	r0, #0
    a1ac:	4770      	bx	lr
    a1ae:	2000      	movs	r0, #0
    a1b0:	4770      	bx	lr
    a1b2:	f04f 30ff 	mov.w	r0, #4294967295
    a1b6:	4770      	bx	lr
    a1b8:	4770      	bx	lr
    a1ba:	4770      	bx	lr
    a1bc:	2000      	movs	r0, #0
    a1be:	4770      	bx	lr
    a1c0:	2100      	movs	r1, #0
    a1c2:	7001      	strb	r1, [r0, #0]
    a1c4:	4770      	bx	lr
    a1c6:	f04f 30ff 	mov.w	r0, #4294967295
    a1ca:	4770      	bx	lr
    a1cc:	f04f 30ff 	mov.w	r0, #4294967295
    a1d0:	4770      	bx	lr
    a1d2:	2100      	movs	r1, #0
    a1d4:	7001      	strb	r1, [r0, #0]
    a1d6:	4770      	bx	lr
    a1d8:	f04f 30ff 	mov.w	r0, #4294967295
    a1dc:	4770      	bx	lr
    a1de:	f04f 30ff 	mov.w	r0, #4294967295
    a1e2:	4770      	bx	lr
    a1e4:	7800      	ldrb	r0, [r0, #0]
    a1e6:	2800      	cmp	r0, #0
    a1e8:	d001      	beq.n	a1ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    a1ea:	f06f 0015 	mvn.w	r0, #21
    a1ee:	4770      	bx	lr
    a1f0:	2000      	movs	r0, #0
    a1f2:	4770      	bx	lr
    a1f4:	2200      	movs	r2, #0
    a1f6:	f000 b802 	b.w	a1fe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000a1fa <mpsl_fem_init>:
    a1fa:	f7f9 bda1 	b.w	3d40 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000a1fe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    a1fe:	b570      	push	{r4, r5, r6, lr}
    a200:	4614      	mov	r4, r2
    a202:	460d      	mov	r5, r1
    a204:	1b00      	subs	r0, r0, r4
    a206:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a20a:	4288      	cmp	r0, r1
    a20c:	da01      	bge.n	a212 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    a20e:	4608      	mov	r0, r1
    a210:	e002      	b.n	a218 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a212:	287f      	cmp	r0, #127	; 0x7f
    a214:	dd00      	ble.n	a218 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a216:	207f      	movs	r0, #127	; 0x7f
    a218:	4619      	mov	r1, r3
    a21a:	b240      	sxtb	r0, r0
    a21c:	f7f9 fdc4 	bl	3da8 <mpsl_tx_power_radio_supported_power_adjust>
    a220:	7028      	strb	r0, [r5, #0]
    a222:	706c      	strb	r4, [r5, #1]
    a224:	2100      	movs	r1, #0
    a226:	4420      	add	r0, r4
    a228:	70a9      	strb	r1, [r5, #2]
    a22a:	b240      	sxtb	r0, r0
    a22c:	bd70      	pop	{r4, r5, r6, pc}
    a22e:	ecd8      	.short	0xecd8
    a230:	fcf8f4f0 	.word	0xfcf8f4f0
    a234:	04030200 	.word	0x04030200
    a238:	08070605 	.word	0x08070605
	...
    a250:	01010101 	.word	0x01010101
    a254:	02020202 	.word	0x02020202
    a258:	03030303 	.word	0x03030303
    a25c:	04040404 	.word	0x04040404
    a260:	05050505 	.word	0x05050505
    a264:	08070606 	.word	0x08070606
    a268:	0c0b0a09 	.word	0x0c0b0a09
    a26c:	0000000d 	.word	0x0000000d
	...
    a280:	01010100 	.word	0x01010100
    a284:	02020201 	.word	0x02020201
    a288:	03030302 	.word	0x03030302
    a28c:	04040403 	.word	0x04040403
    a290:	05050504 	.word	0x05050504
    a294:	06060605 	.word	0x06060605
    a298:	00000908 	.word	0x00000908

0000a29c <main>:
// };



int main(void)
{
    a29c:	b508      	push	{r3, lr}
	// Start
	printk("Start firmware");
    a29e:	480f      	ldr	r0, [pc, #60]	; (a2dc <main+0x40>)
    a2a0:	f00b fa18 	bl	156d4 <printk>
	
	// *** SETUP FUNCTIONS *** //
	gpio_pin_configure_dt(&led, GPIO_OUTPUT_INACTIVE);
    a2a4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    a2a8:	480d      	ldr	r0, [pc, #52]	; (a2e0 <main+0x44>)
    a2aa:	f00b f923 	bl	154f4 <gpio_pin_configure_dt>
		// 		continue;
		// 	}
		// }


		k_msleep(1000);
    a2ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a2b2:	f00b f934 	bl	1551e <k_msleep>
		gpio_pin_toggle_dt(&led);
    a2b6:	4c0a      	ldr	r4, [pc, #40]	; (a2e0 <main+0x44>)
    a2b8:	4620      	mov	r0, r4
    a2ba:	f00b f926 	bl	1550a <gpio_pin_toggle_dt>
		adv_change_status(STAT_CHG);
    a2be:	2000      	movs	r0, #0
    a2c0:	f000 f868 	bl	a394 <adv_change_status>
		k_msleep(500);
    a2c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    a2c8:	f00b f929 	bl	1551e <k_msleep>
		gpio_pin_toggle_dt(&led);
    a2cc:	4620      	mov	r0, r4
    a2ce:	f00b f91c 	bl	1550a <gpio_pin_toggle_dt>
		adv_change_status(STAT_RDY);
    a2d2:	2001      	movs	r0, #1
    a2d4:	f000 f85e 	bl	a394 <adv_change_status>
	while(1){
    a2d8:	e7e9      	b.n	a2ae <main+0x12>
    a2da:	bf00      	nop
    a2dc:	00019af8 	.word	0x00019af8
    a2e0:	00019b18 	.word	0x00019b18

0000a2e4 <copy_to_adv_buffer>:


// Global adv params buffer
struct adv_params ap;

static void copy_to_adv_buffer(){
    a2e4:	b510      	push	{r4, lr}
    a2e6:	b082      	sub	sp, #8
	struct bt_data ad_variable;
	ad_variable.type = BT_DATA_MANUFACTURER_DATA;
    a2e8:	23ff      	movs	r3, #255	; 0xff
    a2ea:	f88d 3000 	strb.w	r3, [sp]
	ad_variable.data = ap.usr_tx_buffer;
    a2ee:	4c0b      	ldr	r4, [pc, #44]	; (a31c <copy_to_adv_buffer+0x38>)
    a2f0:	9401      	str	r4, [sp, #4]
	ad_variable.data_len = sizeof(ap.usr_tx_buffer);
    a2f2:	2307      	movs	r3, #7
    a2f4:	f88d 3001 	strb.w	r3, [sp, #1]

	memcpy(ap.adv_buffer, ad, sizeof(ad));
    a2f8:	2210      	movs	r2, #16
    a2fa:	4909      	ldr	r1, [pc, #36]	; (a320 <copy_to_adv_buffer+0x3c>)
    a2fc:	18e0      	adds	r0, r4, r3
    a2fe:	f00c fd58 	bl	16db2 <memcpy>
	ap.adv_buffer[DEFAULT_SIZE_ADV_MSG] = ad_variable;
    a302:	f104 0317 	add.w	r3, r4, #23
    a306:	aa02      	add	r2, sp, #8
    a308:	e912 0003 	ldmdb	r2, {r0, r1}
    a30c:	e883 0003 	stmia.w	r3, {r0, r1}

	// Update advertisement packet
	ap.update = true;
    a310:	2301      	movs	r3, #1
    a312:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    a316:	b002      	add	sp, #8
    a318:	bd10      	pop	{r4, pc}
    a31a:	bf00      	nop
    a31c:	20001e29 	.word	0x20001e29
    a320:	00019b38 	.word	0x00019b38

0000a324 <adv_init>:

static void adv_init(void){
    a324:	b508      	push	{r3, lr}
	ap.update = true;
    a326:	4b06      	ldr	r3, [pc, #24]	; (a340 <adv_init+0x1c>)
    a328:	2201      	movs	r2, #1
    a32a:	701a      	strb	r2, [r3, #0]

	copy_to_adv_buffer();
    a32c:	f7ff ffda 	bl	a2e4 <copy_to_adv_buffer>

	/* Initialize the Bluetooth Subsystem */
	bt_enable(NULL);
    a330:	2000      	movs	r0, #0
    a332:	f005 fe13 	bl	ff5c <bt_enable>
	printk("Bluetooth initialized\n");
    a336:	4803      	ldr	r0, [pc, #12]	; (a344 <adv_init+0x20>)
    a338:	f00b f9cc 	bl	156d4 <printk>

}
    a33c:	bd08      	pop	{r3, pc}
    a33e:	bf00      	nop
    a340:	20001e28 	.word	0x20001e28
    a344:	00019b20 	.word	0x00019b20

0000a348 <adv_start>:

// Start advertisements
void adv_start(void){
    a348:	b500      	push	{lr}
    a34a:	b089      	sub	sp, #36	; 0x24

	adv_init();
    a34c:	f7ff ffea 	bl	a324 <adv_init>

	while (1)
	{
		// Check every 100 ms
		k_msleep(100);
    a350:	2064      	movs	r0, #100	; 0x64
    a352:	f00b f8fa 	bl	1554a <k_msleep>

		if(ap.update){
    a356:	4b0d      	ldr	r3, [pc, #52]	; (a38c <adv_start+0x44>)
    a358:	781b      	ldrb	r3, [r3, #0]
    a35a:	2b00      	cmp	r3, #0
    a35c:	d0f8      	beq.n	a350 <adv_start+0x8>
			ap.update = false;
    a35e:	2600      	movs	r6, #0
    a360:	4d0a      	ldr	r5, [pc, #40]	; (a38c <adv_start+0x44>)
    a362:	f805 6b08 	strb.w	r6, [r5], #8

			// Stop advertising
			bt_le_adv_stop();
    a366:	f006 fe1b 	bl	10fa0 <bt_le_adv_stop>
			
			// Start advertising 
			bt_le_adv_start(BT_LE_ADV_NCONN, ap.adv_buffer, ARRAY_SIZE(ap.adv_buffer), NULL, 0);
    a36a:	f10d 0c0c 	add.w	ip, sp, #12
    a36e:	4c08      	ldr	r4, [pc, #32]	; (a390 <adv_start+0x48>)
    a370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a372:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a376:	6823      	ldr	r3, [r4, #0]
    a378:	f8cc 3000 	str.w	r3, [ip]
    a37c:	9600      	str	r6, [sp, #0]
    a37e:	4633      	mov	r3, r6
    a380:	2203      	movs	r2, #3
    a382:	4629      	mov	r1, r5
    a384:	a803      	add	r0, sp, #12
    a386:	f006 fddb 	bl	10f40 <bt_le_adv_start>
    a38a:	e7e1      	b.n	a350 <adv_start+0x8>
    a38c:	20001e28 	.word	0x20001e28
    a390:	00019a90 	.word	0x00019a90

0000a394 <adv_change_status>:
	}
}



void adv_change_status(uint8_t stat){
    a394:	b508      	push	{r3, lr}
	ap.usr_tx_buffer[STAT_NR] = stat;
    a396:	4b02      	ldr	r3, [pc, #8]	; (a3a0 <adv_change_status+0xc>)
    a398:	7058      	strb	r0, [r3, #1]

	copy_to_adv_buffer();
    a39a:	f7ff ffa3 	bl	a2e4 <copy_to_adv_buffer>
}
    a39e:	bd08      	pop	{r3, pc}
    a3a0:	20001e28 	.word	0x20001e28

0000a3a4 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3a8:	b091      	sub	sp, #68	; 0x44
    a3aa:	9205      	str	r2, [sp, #20]
    a3ac:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    a3ae:	4613      	mov	r3, r2
    a3b0:	f002 0204 	and.w	r2, r2, #4
    a3b4:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    a3b6:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    a3ba:	f010 0303 	ands.w	r3, r0, #3
    a3be:	9301      	str	r3, [sp, #4]
    a3c0:	f040 8223 	bne.w	a80a <cbvprintf_package+0x466>
    a3c4:	4607      	mov	r7, r0
    a3c6:	468a      	mov	sl, r1
    a3c8:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    a3ca:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    a3cc:	2800      	cmp	r0, #0
    a3ce:	d047      	beq.n	a460 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    a3d0:	b127      	cbz	r7, a3dc <cbvprintf_package+0x38>
    a3d2:	1be3      	subs	r3, r4, r7
    a3d4:	3304      	adds	r3, #4
    a3d6:	4553      	cmp	r3, sl
    a3d8:	f200 821a 	bhi.w	a810 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    a3dc:	9b02      	ldr	r3, [sp, #8]
    a3de:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    a3e0:	9b01      	ldr	r3, [sp, #4]
    a3e2:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    a3e4:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    a3e6:	9303      	str	r3, [sp, #12]
	bool parsing = false;
    a3e8:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    a3ea:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
    a3ee:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    a3f2:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    a3f4:	b10f      	cbz	r7, a3fa <cbvprintf_package+0x56>
				*(const char **)buf = s;
    a3f6:	9b02      	ldr	r3, [sp, #8]
    a3f8:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a3fa:	1e53      	subs	r3, r2, #1
    a3fc:	9307      	str	r3, [sp, #28]
    a3fe:	2a00      	cmp	r2, #0
    a400:	f340 815f 	ble.w	a6c2 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    a404:	9b05      	ldr	r3, [sp, #20]
    a406:	f013 0202 	ands.w	r2, r3, #2
    a40a:	d026      	beq.n	a45a <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a40c:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    a40e:	1be1      	subs	r1, r4, r7
    a410:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    a412:	b11a      	cbz	r2, a41c <cbvprintf_package+0x78>
    a414:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a418:	f080 8200 	bcs.w	a81c <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    a41c:	9903      	ldr	r1, [sp, #12]
    a41e:	290f      	cmp	r1, #15
    a420:	f200 81ff 	bhi.w	a822 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    a424:	2f00      	cmp	r7, #0
    a426:	f000 8164 	beq.w	a6f2 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    a42a:	b2db      	uxtb	r3, r3
    a42c:	f101 0240 	add.w	r2, r1, #64	; 0x40
    a430:	446a      	add	r2, sp
    a432:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
    a436:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
    a43a:	2800      	cmp	r0, #0
    a43c:	f000 8155 	beq.w	a6ea <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    a440:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a444:	f101 0240 	add.w	r2, r1, #64	; 0x40
    a448:	446a      	add	r2, sp
    a44a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    a44e:	9b04      	ldr	r3, [sp, #16]
    a450:	3301      	adds	r3, #1
    a452:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    a454:	9b03      	ldr	r3, [sp, #12]
    a456:	3301      	adds	r3, #1
    a458:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
    a45a:	3404      	adds	r4, #4

			is_str_arg = false;
    a45c:	2200      	movs	r2, #0
    a45e:	e03d      	b.n	a4dc <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    a460:	f001 0a07 	and.w	sl, r1, #7
    a464:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    a466:	f1ca 0a08 	rsb	sl, sl, #8
    a46a:	e7b1      	b.n	a3d0 <cbvprintf_package+0x2c>
				parsing = false;
    a46c:	2600      	movs	r6, #0
    a46e:	e034      	b.n	a4da <cbvprintf_package+0x136>
    a470:	2600      	movs	r6, #0
    a472:	e032      	b.n	a4da <cbvprintf_package+0x136>
    a474:	2600      	movs	r6, #0
    a476:	e030      	b.n	a4da <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
    a478:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
    a47c:	46c1      	mov	r9, r8
    a47e:	e02c      	b.n	a4da <cbvprintf_package+0x136>
				if (*fmt == '%') {
    a480:	2925      	cmp	r1, #37	; 0x25
    a482:	d12a      	bne.n	a4da <cbvprintf_package+0x136>
					arg_idx++;
    a484:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
    a488:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
    a48a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
    a48e:	46c1      	mov	r9, r8
				continue;
    a490:	e023      	b.n	a4da <cbvprintf_package+0x136>
			switch (*fmt) {
    a492:	2947      	cmp	r1, #71	; 0x47
    a494:	d8ec      	bhi.n	a470 <cbvprintf_package+0xcc>
    a496:	292a      	cmp	r1, #42	; 0x2a
    a498:	d312      	bcc.n	a4c0 <cbvprintf_package+0x11c>
    a49a:	392a      	subs	r1, #42	; 0x2a
    a49c:	b2c9      	uxtb	r1, r1
    a49e:	2001      	movs	r0, #1
    a4a0:	fa00 f101 	lsl.w	r1, r0, r1
    a4a4:	f64f 70da 	movw	r0, #65498	; 0xffda
    a4a8:	4201      	tst	r1, r0
    a4aa:	d116      	bne.n	a4da <cbvprintf_package+0x136>
    a4ac:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
    a4b0:	f040 80c4 	bne.w	a63c <cbvprintf_package+0x298>
    a4b4:	f011 0f01 	tst.w	r1, #1
    a4b8:	f040 808e 	bne.w	a5d8 <cbvprintf_package+0x234>
				parsing = false;
    a4bc:	2600      	movs	r6, #0
    a4be:	e00c      	b.n	a4da <cbvprintf_package+0x136>
			switch (*fmt) {
    a4c0:	2925      	cmp	r1, #37	; 0x25
    a4c2:	d103      	bne.n	a4cc <cbvprintf_package+0x128>
				arg_idx--;
    a4c4:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
    a4c8:	2600      	movs	r6, #0
				continue;
    a4ca:	e006      	b.n	a4da <cbvprintf_package+0x136>
			switch (*fmt) {
    a4cc:	d901      	bls.n	a4d2 <cbvprintf_package+0x12e>
				parsing = false;
    a4ce:	2600      	movs	r6, #0
    a4d0:	e003      	b.n	a4da <cbvprintf_package+0x136>
			switch (*fmt) {
    a4d2:	2920      	cmp	r1, #32
    a4d4:	d001      	beq.n	a4da <cbvprintf_package+0x136>
    a4d6:	2923      	cmp	r1, #35	; 0x23
    a4d8:	d1cc      	bne.n	a474 <cbvprintf_package+0xd0>
				parsing = false;
    a4da:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
    a4dc:	1c6b      	adds	r3, r5, #1
    a4de:	7869      	ldrb	r1, [r5, #1]
    a4e0:	2900      	cmp	r1, #0
    a4e2:	f000 811d 	beq.w	a720 <cbvprintf_package+0x37c>
			if (!parsing) {
    a4e6:	2e00      	cmp	r6, #0
    a4e8:	d0ca      	beq.n	a480 <cbvprintf_package+0xdc>
			switch (*fmt) {
    a4ea:	297a      	cmp	r1, #122	; 0x7a
    a4ec:	d8be      	bhi.n	a46c <cbvprintf_package+0xc8>
    a4ee:	294c      	cmp	r1, #76	; 0x4c
    a4f0:	d3cf      	bcc.n	a492 <cbvprintf_package+0xee>
    a4f2:	394c      	subs	r1, #76	; 0x4c
    a4f4:	292e      	cmp	r1, #46	; 0x2e
    a4f6:	d861      	bhi.n	a5bc <cbvprintf_package+0x218>
    a4f8:	a001      	add	r0, pc, #4	; (adr r0, a500 <cbvprintf_package+0x15c>)
    a4fa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    a4fe:	bf00      	nop
    a500:	0000a4db 	.word	0x0000a4db
    a504:	0000a5bd 	.word	0x0000a5bd
    a508:	0000a5bd 	.word	0x0000a5bd
    a50c:	0000a5bd 	.word	0x0000a5bd
    a510:	0000a5bd 	.word	0x0000a5bd
    a514:	0000a5bd 	.word	0x0000a5bd
    a518:	0000a5bd 	.word	0x0000a5bd
    a51c:	0000a5bd 	.word	0x0000a5bd
    a520:	0000a5bd 	.word	0x0000a5bd
    a524:	0000a5bd 	.word	0x0000a5bd
    a528:	0000a5bd 	.word	0x0000a5bd
    a52c:	0000a5bd 	.word	0x0000a5bd
    a530:	0000a5d1 	.word	0x0000a5d1
    a534:	0000a5bd 	.word	0x0000a5bd
    a538:	0000a5bd 	.word	0x0000a5bd
    a53c:	0000a5bd 	.word	0x0000a5bd
    a540:	0000a5bd 	.word	0x0000a5bd
    a544:	0000a5bd 	.word	0x0000a5bd
    a548:	0000a5bd 	.word	0x0000a5bd
    a54c:	0000a5bd 	.word	0x0000a5bd
    a550:	0000a5bd 	.word	0x0000a5bd
    a554:	0000a63d 	.word	0x0000a63d
    a558:	0000a5bd 	.word	0x0000a5bd
    a55c:	0000a5d1 	.word	0x0000a5d1
    a560:	0000a5d1 	.word	0x0000a5d1
    a564:	0000a63d 	.word	0x0000a63d
    a568:	0000a63d 	.word	0x0000a63d
    a56c:	0000a63d 	.word	0x0000a63d
    a570:	0000a4db 	.word	0x0000a4db
    a574:	0000a5d1 	.word	0x0000a5d1
    a578:	0000a479 	.word	0x0000a479
    a57c:	0000a5bd 	.word	0x0000a5bd
    a580:	0000a4db 	.word	0x0000a4db
    a584:	0000a5bd 	.word	0x0000a5bd
    a588:	0000a69b 	.word	0x0000a69b
    a58c:	0000a5d1 	.word	0x0000a5d1
    a590:	0000a69b 	.word	0x0000a69b
    a594:	0000a5bd 	.word	0x0000a5bd
    a598:	0000a5bd 	.word	0x0000a5bd
    a59c:	0000a6a5 	.word	0x0000a6a5
    a5a0:	0000a5c9 	.word	0x0000a5c9
    a5a4:	0000a5d1 	.word	0x0000a5d1
    a5a8:	0000a5bd 	.word	0x0000a5bd
    a5ac:	0000a5bd 	.word	0x0000a5bd
    a5b0:	0000a5d1 	.word	0x0000a5d1
    a5b4:	0000a5bd 	.word	0x0000a5bd
    a5b8:	0000a5c1 	.word	0x0000a5c1
				parsing = false;
    a5bc:	2600      	movs	r6, #0
    a5be:	e78c      	b.n	a4da <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
    a5c0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
    a5c4:	46c1      	mov	r9, r8
				continue;
    a5c6:	e788      	b.n	a4da <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
    a5c8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
    a5cc:	46c1      	mov	r9, r8
				continue;
    a5ce:	e784      	b.n	a4da <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
    a5d0:	7829      	ldrb	r1, [r5, #0]
    a5d2:	296c      	cmp	r1, #108	; 0x6c
    a5d4:	d024      	beq.n	a620 <cbvprintf_package+0x27c>
				parsing = false;
    a5d6:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    a5d8:	4444      	add	r4, r8
    a5da:	3c01      	subs	r4, #1
    a5dc:	f1c8 0100 	rsb	r1, r8, #0
    a5e0:	400c      	ands	r4, r1
    a5e2:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    a5e4:	b127      	cbz	r7, a5f0 <cbvprintf_package+0x24c>
    a5e6:	1be1      	subs	r1, r4, r7
    a5e8:	4449      	add	r1, r9
    a5ea:	4551      	cmp	r1, sl
    a5ec:	f200 8113 	bhi.w	a816 <cbvprintf_package+0x472>
		if (is_str_arg) {
    a5f0:	2a00      	cmp	r2, #0
    a5f2:	d15d      	bne.n	a6b0 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
    a5f4:	f1b9 0f04 	cmp.w	r9, #4
    a5f8:	f000 808a 	beq.w	a710 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    a5fc:	f1b9 0f08 	cmp.w	r9, #8
    a600:	f040 8112 	bne.w	a828 <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
    a604:	991a      	ldr	r1, [sp, #104]	; 0x68
    a606:	3107      	adds	r1, #7
    a608:	f021 0107 	bic.w	r1, r1, #7
    a60c:	f101 0008 	add.w	r0, r1, #8
    a610:	901a      	str	r0, [sp, #104]	; 0x68
    a612:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
    a616:	b10f      	cbz	r7, a61c <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    a618:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
    a61c:	3408      	adds	r4, #8
    a61e:	e75c      	b.n	a4da <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
    a620:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    a624:	296c      	cmp	r1, #108	; 0x6c
    a626:	d004      	beq.n	a632 <cbvprintf_package+0x28e>
				parsing = false;
    a628:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
    a62a:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
    a62e:	46c1      	mov	r9, r8
    a630:	e7d2      	b.n	a5d8 <cbvprintf_package+0x234>
				parsing = false;
    a632:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
    a634:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
    a638:	46c1      	mov	r9, r8
    a63a:	e7cd      	b.n	a5d8 <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
    a63c:	7829      	ldrb	r1, [r5, #0]
    a63e:	294c      	cmp	r1, #76	; 0x4c
    a640:	d01b      	beq.n	a67a <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
    a642:	991a      	ldr	r1, [sp, #104]	; 0x68
    a644:	3107      	adds	r1, #7
    a646:	f021 0107 	bic.w	r1, r1, #7
    a64a:	f101 0008 	add.w	r0, r1, #8
    a64e:	901a      	str	r0, [sp, #104]	; 0x68
    a650:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
    a654:	3407      	adds	r4, #7
    a656:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    a65a:	b147      	cbz	r7, a66e <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
    a65c:	1be6      	subs	r6, r4, r7
    a65e:	3608      	adds	r6, #8
    a660:	4556      	cmp	r6, sl
    a662:	d814      	bhi.n	a68e <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
    a664:	782d      	ldrb	r5, [r5, #0]
    a666:	2d4c      	cmp	r5, #76	; 0x4c
    a668:	d014      	beq.n	a694 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
    a66a:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
    a66e:	3408      	adds	r4, #8
				parsing = false;
    a670:	2600      	movs	r6, #0
				continue;
    a672:	f04f 0808 	mov.w	r8, #8
    a676:	46c1      	mov	r9, r8
    a678:	e72f      	b.n	a4da <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
    a67a:	991a      	ldr	r1, [sp, #104]	; 0x68
    a67c:	3107      	adds	r1, #7
    a67e:	f021 0107 	bic.w	r1, r1, #7
    a682:	f101 0008 	add.w	r0, r1, #8
    a686:	901a      	str	r0, [sp, #104]	; 0x68
    a688:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
    a68c:	e7e2      	b.n	a654 <cbvprintf_package+0x2b0>
						return -ENOSPC;
    a68e:	f06f 001b 	mvn.w	r0, #27
    a692:	e0b7      	b.n	a804 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
    a694:	e9c4 0100 	strd	r0, r1, [r4]
    a698:	e7e9      	b.n	a66e <cbvprintf_package+0x2ca>
				parsing = false;
    a69a:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    a69c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    a6a0:	46c1      	mov	r9, r8
    a6a2:	e799      	b.n	a5d8 <cbvprintf_package+0x234>
				is_str_arg = true;
    a6a4:	4632      	mov	r2, r6
				parsing = false;
    a6a6:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    a6a8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    a6ac:	46c1      	mov	r9, r8
    a6ae:	e793      	b.n	a5d8 <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
    a6b0:	4604      	mov	r4, r0
    a6b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a6b4:	1d11      	adds	r1, r2, #4
    a6b6:	911a      	str	r1, [sp, #104]	; 0x68
    a6b8:	6812      	ldr	r2, [r2, #0]
    a6ba:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a6bc:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
    a6be:	461d      	mov	r5, r3
    a6c0:	e698      	b.n	a3f4 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    a6c2:	4b5f      	ldr	r3, [pc, #380]	; (a840 <cbvprintf_package+0x49c>)
    a6c4:	9a02      	ldr	r2, [sp, #8]
    a6c6:	429a      	cmp	r2, r3
    a6c8:	d304      	bcc.n	a6d4 <cbvprintf_package+0x330>
    a6ca:	4b5e      	ldr	r3, [pc, #376]	; (a844 <cbvprintf_package+0x4a0>)
    a6cc:	429a      	cmp	r2, r3
    a6ce:	d30a      	bcc.n	a6e6 <cbvprintf_package+0x342>
    a6d0:	2300      	movs	r3, #0
    a6d2:	e000      	b.n	a6d6 <cbvprintf_package+0x332>
    a6d4:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	f47f ae94 	bne.w	a404 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    a6dc:	9b05      	ldr	r3, [sp, #20]
    a6de:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a6e2:	2000      	movs	r0, #0
    a6e4:	e693      	b.n	a40e <cbvprintf_package+0x6a>
    a6e6:	2301      	movs	r3, #1
    a6e8:	e7f5      	b.n	a6d6 <cbvprintf_package+0x332>
						s_rw_cnt++;
    a6ea:	9b06      	ldr	r3, [sp, #24]
    a6ec:	3301      	adds	r3, #1
    a6ee:	9306      	str	r3, [sp, #24]
    a6f0:	e6b0      	b.n	a454 <cbvprintf_package+0xb0>
				} else if (is_ro) {
    a6f2:	b110      	cbz	r0, a6fa <cbvprintf_package+0x356>
					len += 1;
    a6f4:	f10a 0a01 	add.w	sl, sl, #1
    a6f8:	e6ac      	b.n	a454 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
    a6fa:	9b00      	ldr	r3, [sp, #0]
    a6fc:	b113      	cbz	r3, a704 <cbvprintf_package+0x360>
					len += 2;
    a6fe:	f10a 0a02 	add.w	sl, sl, #2
    a702:	e6a7      	b.n	a454 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
    a704:	9802      	ldr	r0, [sp, #8]
    a706:	f00c fb24 	bl	16d52 <strlen>
    a70a:	1c83      	adds	r3, r0, #2
    a70c:	449a      	add	sl, r3
    a70e:	e6a1      	b.n	a454 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
    a710:	991a      	ldr	r1, [sp, #104]	; 0x68
    a712:	1d08      	adds	r0, r1, #4
    a714:	901a      	str	r0, [sp, #104]	; 0x68
    a716:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
    a718:	b107      	cbz	r7, a71c <cbvprintf_package+0x378>
				*(int *)buf = v;
    a71a:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
    a71c:	3404      	adds	r4, #4
    a71e:	e6dc      	b.n	a4da <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    a720:	1be3      	subs	r3, r4, r7
    a722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a726:	f080 8082 	bcs.w	a82e <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    a72a:	b197      	cbz	r7, a752 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    a72c:	2200      	movs	r2, #0
    a72e:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    a730:	089b      	lsrs	r3, r3, #2
    a732:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    a734:	9b00      	ldr	r3, [sp, #0]
    a736:	b183      	cbz	r3, a75a <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    a738:	9b06      	ldr	r3, [sp, #24]
    a73a:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    a73c:	9b04      	ldr	r3, [sp, #16]
    a73e:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    a740:	bb1b      	cbnz	r3, a78a <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
    a742:	9d01      	ldr	r5, [sp, #4]
    a744:	f8dd 900c 	ldr.w	r9, [sp, #12]
    a748:	f8dd b010 	ldr.w	fp, [sp, #16]
    a74c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a750:	e03b      	b.n	a7ca <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    a752:	4453      	add	r3, sl
    a754:	f1a3 0008 	sub.w	r0, r3, #8
    a758:	e054      	b.n	a804 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    a75a:	9b06      	ldr	r3, [sp, #24]
    a75c:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    a75e:	e7ed      	b.n	a73c <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
    a760:	3301      	adds	r3, #1
    a762:	4298      	cmp	r0, r3
    a764:	d9ed      	bls.n	a742 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    a766:	f103 0240 	add.w	r2, r3, #64	; 0x40
    a76a:	446a      	add	r2, sp
    a76c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    a770:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    a774:	2a00      	cmp	r2, #0
    a776:	daf3      	bge.n	a760 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    a778:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    a77c:	1be2      	subs	r2, r4, r7
    a77e:	3201      	adds	r2, #1
    a780:	4552      	cmp	r2, sl
    a782:	d857      	bhi.n	a834 <cbvprintf_package+0x490>
			*buf++ = pos;
    a784:	f804 1b01 	strb.w	r1, [r4], #1
    a788:	e7ea      	b.n	a760 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
    a78a:	9b01      	ldr	r3, [sp, #4]
    a78c:	9803      	ldr	r0, [sp, #12]
    a78e:	e7e8      	b.n	a762 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
    a790:	9b00      	ldr	r3, [sp, #0]
    a792:	b33b      	cbz	r3, a7e4 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
    a794:	f105 0340 	add.w	r3, r5, #64	; 0x40
    a798:	446b      	add	r3, sp
    a79a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    a79e:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
    a7a2:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    a7a4:	1be3      	subs	r3, r4, r7
    a7a6:	4433      	add	r3, r6
    a7a8:	3301      	adds	r3, #1
    a7aa:	4553      	cmp	r3, sl
    a7ac:	d845      	bhi.n	a83a <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    a7ae:	f105 0340 	add.w	r3, r5, #64	; 0x40
    a7b2:	446b      	add	r3, sp
    a7b4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    a7b8:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    a7bc:	4632      	mov	r2, r6
    a7be:	4641      	mov	r1, r8
    a7c0:	4620      	mov	r0, r4
    a7c2:	f00c faf6 	bl	16db2 <memcpy>
		buf += size;
    a7c6:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    a7c8:	3501      	adds	r5, #1
    a7ca:	45a9      	cmp	r9, r5
    a7cc:	d919      	bls.n	a802 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    a7ce:	f1bb 0f00 	cmp.w	fp, #0
    a7d2:	d0dd      	beq.n	a790 <cbvprintf_package+0x3ec>
    a7d4:	f105 0340 	add.w	r3, r5, #64	; 0x40
    a7d8:	446b      	add	r3, sp
    a7da:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    a7de:	2b00      	cmp	r3, #0
    a7e0:	dad6      	bge.n	a790 <cbvprintf_package+0x3ec>
    a7e2:	e7f1      	b.n	a7c8 <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    a7e4:	f105 0340 	add.w	r3, r5, #64	; 0x40
    a7e8:	446b      	add	r3, sp
    a7ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    a7ee:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    a7f2:	2200      	movs	r2, #0
    a7f4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    a7f8:	4640      	mov	r0, r8
    a7fa:	f00c faaa 	bl	16d52 <strlen>
    a7fe:	1c46      	adds	r6, r0, #1
    a800:	e7d0      	b.n	a7a4 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    a802:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    a804:	b011      	add	sp, #68	; 0x44
    a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    a80a:	f06f 000d 	mvn.w	r0, #13
    a80e:	e7f9      	b.n	a804 <cbvprintf_package+0x460>
		return -ENOSPC;
    a810:	f06f 001b 	mvn.w	r0, #27
    a814:	e7f6      	b.n	a804 <cbvprintf_package+0x460>
			return -ENOSPC;
    a816:	f06f 001b 	mvn.w	r0, #27
    a81a:	e7f3      	b.n	a804 <cbvprintf_package+0x460>
					return -EINVAL;
    a81c:	f06f 0015 	mvn.w	r0, #21
    a820:	e7f0      	b.n	a804 <cbvprintf_package+0x460>
					return -EINVAL;
    a822:	f06f 0015 	mvn.w	r0, #21
    a826:	e7ed      	b.n	a804 <cbvprintf_package+0x460>
			return -EINVAL;
    a828:	f06f 0015 	mvn.w	r0, #21
    a82c:	e7ea      	b.n	a804 <cbvprintf_package+0x460>
		return -EINVAL;
    a82e:	f06f 0015 	mvn.w	r0, #21
    a832:	e7e7      	b.n	a804 <cbvprintf_package+0x460>
				return -ENOSPC;
    a834:	f06f 001b 	mvn.w	r0, #27
    a838:	e7e4      	b.n	a804 <cbvprintf_package+0x460>
			return -ENOSPC;
    a83a:	f06f 001b 	mvn.w	r0, #27
    a83e:	e7e1      	b.n	a804 <cbvprintf_package+0x460>
    a840:	000196f0 	.word	0x000196f0
    a844:	0001b440 	.word	0x0001b440

0000a848 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a84c:	b097      	sub	sp, #92	; 0x5c
    a84e:	af00      	add	r7, sp, #0
    a850:	4683      	mov	fp, r0
    a852:	61ba      	str	r2, [r7, #24]
    a854:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    a856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    a85a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a85e:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    a860:	60f9      	str	r1, [r7, #12]
    a862:	b151      	cbz	r1, a87a <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    a864:	f89b 6002 	ldrb.w	r6, [fp, #2]
    a868:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
    a86a:	b156      	cbz	r6, a882 <cbprintf_package_convert+0x3a>
    a86c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    a870:	f013 0f01 	tst.w	r3, #1
    a874:	d111      	bne.n	a89a <cbprintf_package_convert+0x52>
    a876:	2300      	movs	r3, #0
    a878:	e004      	b.n	a884 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    a87a:	f00a fe8a 	bl	15592 <get_package_len>
    a87e:	60f8      	str	r0, [r7, #12]
    a880:	e7f0      	b.n	a864 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
    a882:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    a884:	f89b 2003 	ldrb.w	r2, [fp, #3]
    a888:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
    a88a:	b142      	cbz	r2, a89e <cbprintf_package_convert+0x56>
    a88c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    a890:	f012 0f02 	tst.w	r2, #2
    a894:	d122      	bne.n	a8dc <cbprintf_package_convert+0x94>
    a896:	2200      	movs	r2, #0
    a898:	e002      	b.n	a8a0 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
    a89a:	2301      	movs	r3, #1
    a89c:	e7f2      	b.n	a884 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
    a89e:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    a8a0:	b902      	cbnz	r2, a8a4 <cbprintf_package_convert+0x5c>
    a8a2:	b1eb      	cbz	r3, a8e0 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    a8a4:	f89b 5000 	ldrb.w	r5, [fp]
    a8a8:	00aa      	lsls	r2, r5, #2
    a8aa:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
    a8ac:	f8db 2004 	ldr.w	r2, [fp, #4]
    a8b0:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
    a8b2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    a8b6:	69ba      	ldr	r2, [r7, #24]
    a8b8:	b1f2      	cbz	r2, a8f8 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	f040 8115 	bne.w	aaea <cbprintf_package_convert+0x2a2>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    a8c0:	f1b9 0f00 	cmp.w	r9, #0
    a8c4:	f000 8120 	beq.w	ab08 <cbprintf_package_convert+0x2c0>
    a8c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    a8cc:	f013 0f04 	tst.w	r3, #4
    a8d0:	f040 811e 	bne.w	ab10 <cbprintf_package_convert+0x2c8>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    a8d4:	2000      	movs	r0, #0
		keep_cnt = 0;
    a8d6:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    a8d8:	4606      	mov	r6, r0
    a8da:	e10a      	b.n	aaf2 <cbprintf_package_convert+0x2aa>
	rw_cpy = rws_nbr > 0 &&
    a8dc:	2201      	movs	r2, #1
    a8de:	e7df      	b.n	a8a0 <cbprintf_package_convert+0x58>
		if (cb) {
    a8e0:	69bb      	ldr	r3, [r7, #24]
    a8e2:	b11b      	cbz	r3, a8ec <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
    a8e4:	693a      	ldr	r2, [r7, #16]
    a8e6:	68f9      	ldr	r1, [r7, #12]
    a8e8:	4658      	mov	r0, fp
    a8ea:	4798      	blx	r3
		return in_len;
    a8ec:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    a8ee:	4620      	mov	r0, r4
    a8f0:	375c      	adds	r7, #92	; 0x5c
    a8f2:	46bd      	mov	sp, r7
    a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    a8f8:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
    a8fa:	bb2b      	cbnz	r3, a948 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    a8fc:	f1b9 0f00 	cmp.w	r9, #0
    a900:	d038      	beq.n	a974 <cbprintf_package_convert+0x12c>
    a902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    a906:	f013 0304 	ands.w	r3, r3, #4
    a90a:	613b      	str	r3, [r7, #16]
    a90c:	d027      	beq.n	a95e <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
    a90e:	444d      	add	r5, r9
	size_t strl_cnt = 0;
    a910:	2300      	movs	r3, #0
    a912:	613b      	str	r3, [r7, #16]
    a914:	e023      	b.n	a95e <cbprintf_package_convert+0x116>
				out_len += len;
    a916:	4404      	add	r4, r0
				str_pos++;
    a918:	3501      	adds	r5, #1
			for (unsigned int i = 0; i < ros_nbr; i++) {
    a91a:	3601      	adds	r6, #1
    a91c:	454e      	cmp	r6, r9
    a91e:	d21a      	bcs.n	a956 <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
    a920:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    a922:	2300      	movs	r3, #0
    a924:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
    a928:	4619      	mov	r1, r3
    a92a:	69b8      	ldr	r0, [r7, #24]
    a92c:	f00a fe46 	bl	155bc <append_string>
				if (strl && strl_cnt < strl_len) {
    a930:	f1ba 0f00 	cmp.w	sl, #0
    a934:	d0ef      	beq.n	a916 <cbprintf_package_convert+0xce>
    a936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    a93a:	4598      	cmp	r8, r3
    a93c:	d2eb      	bcs.n	a916 <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
    a93e:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
    a942:	f108 0801 	add.w	r8, r8, #1
    a946:	e7e6      	b.n	a916 <cbprintf_package_convert+0xce>
			for (unsigned int i = 0; i < ros_nbr; i++) {
    a948:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
    a94a:	f8c7 801c 	str.w	r8, [r7, #28]
    a94e:	46b0      	mov	r8, r6
    a950:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
    a954:	e7e2      	b.n	a91c <cbprintf_package_convert+0xd4>
    a956:	f8c7 8010 	str.w	r8, [r7, #16]
    a95a:	f8d7 801c 	ldr.w	r8, [r7, #28]
		bool drop_ro_str_pos = !(flags &
    a95e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    a962:	f003 0305 	and.w	r3, r3, #5
    a966:	60fb      	str	r3, [r7, #12]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    a968:	f04f 0a00 	mov.w	sl, #0
    a96c:	46a1      	mov	r9, r4
    a96e:	f8c7 b01c 	str.w	fp, [r7, #28]
    a972:	e0a4      	b.n	aabe <cbprintf_package_convert+0x276>
	size_t strl_cnt = 0;
    a974:	f8c7 9010 	str.w	r9, [r7, #16]
    a978:	e7f1      	b.n	a95e <cbprintf_package_convert+0x116>
    a97a:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    a97c:	6a3b      	ldr	r3, [r7, #32]
    a97e:	b97b      	cbnz	r3, a9a0 <cbprintf_package_convert+0x158>
			if (is_ro) {
    a980:	2d00      	cmp	r5, #0
    a982:	d07e      	beq.n	aa82 <cbprintf_package_convert+0x23a>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    a984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    a988:	f013 0f01 	tst.w	r3, #1
    a98c:	d17e      	bne.n	aa8c <cbprintf_package_convert+0x244>
					out_len -= drop_ro_str_pos ? 2 : 1;
    a98e:	68fb      	ldr	r3, [r7, #12]
    a990:	2b00      	cmp	r3, #0
    a992:	d174      	bne.n	aa7e <cbprintf_package_convert+0x236>
    a994:	2302      	movs	r3, #2
    a996:	eba9 0903 	sub.w	r9, r9, r3
    a99a:	e08d      	b.n	aab8 <cbprintf_package_convert+0x270>
    a99c:	2501      	movs	r5, #1
    a99e:	e7ed      	b.n	a97c <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    a9a0:	4659      	mov	r1, fp
    a9a2:	6978      	ldr	r0, [r7, #20]
    a9a4:	f00a fe51 	bl	1564a <is_ptr>
    a9a8:	2800      	cmp	r0, #0
    a9aa:	d0e9      	beq.n	a980 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    a9ac:	466c      	mov	r4, sp
    a9ae:	2301      	movs	r3, #1
    a9b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    a9b4:	2303      	movs	r3, #3
    a9b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    a9ba:	b08a      	sub	sp, #40	; 0x28
    a9bc:	4669      	mov	r1, sp
    a9be:	f111 0210 	adds.w	r2, r1, #16
    a9c2:	d03c      	beq.n	aa3e <cbprintf_package_convert+0x1f6>
    a9c4:	2516      	movs	r5, #22
    a9c6:	b142      	cbz	r2, a9da <cbprintf_package_convert+0x192>
    a9c8:	462b      	mov	r3, r5
    a9ca:	2d04      	cmp	r5, #4
    a9cc:	dd01      	ble.n	a9d2 <cbprintf_package_convert+0x18a>
    a9ce:	48b4      	ldr	r0, [pc, #720]	; (aca0 <cbprintf_package_convert+0x458>)
    a9d0:	6148      	str	r0, [r1, #20]
    a9d2:	2b08      	cmp	r3, #8
    a9d4:	dd01      	ble.n	a9da <cbprintf_package_convert+0x192>
    a9d6:	4bb3      	ldr	r3, [pc, #716]	; (aca4 <cbprintf_package_convert+0x45c>)
    a9d8:	618b      	str	r3, [r1, #24]
    a9da:	2301      	movs	r3, #1
    a9dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    a9e0:	2303      	movs	r3, #3
    a9e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    a9e6:	bb6a      	cbnz	r2, aa44 <cbprintf_package_convert+0x1fc>
    a9e8:	2d15      	cmp	r5, #21
    a9ea:	dd45      	ble.n	aa78 <cbprintf_package_convert+0x230>
    a9ec:	2316      	movs	r3, #22
    a9ee:	b162      	cbz	r2, aa0a <cbprintf_package_convert+0x1c2>
    a9f0:	2005      	movs	r0, #5
    a9f2:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
    a9f6:	2000      	movs	r0, #0
    a9f8:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    a9fc:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
    aa00:	2001      	movs	r0, #1
    aa02:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
    aa06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    aa08:	6108      	str	r0, [r1, #16]
    aa0a:	f36f 0800 	bfc	r8, #0, #1
    aa0e:	f36f 0841 	bfc	r8, #1, #1
    aa12:	f36f 0882 	bfc	r8, #2, #1
    aa16:	f36f 08c5 	bfc	r8, #3, #3
    aa1a:	2102      	movs	r1, #2
    aa1c:	f361 1888 	bfi	r8, r1, #6, #3
    aa20:	f3c3 030a 	ubfx	r3, r3, #0, #11
    aa24:	f363 2853 	bfi	r8, r3, #9, #11
    aa28:	f36f 581f 	bfc	r8, #20, #12
    aa2c:	2300      	movs	r3, #0
    aa2e:	4641      	mov	r1, r8
    aa30:	489d      	ldr	r0, [pc, #628]	; (aca8 <cbprintf_package_convert+0x460>)
    aa32:	f001 f897 	bl	bb64 <z_impl_z_log_msg_static_create>
    aa36:	46a5      	mov	sp, r4
				out_len -= 2;
    aa38:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
    aa3c:	e03c      	b.n	aab8 <cbprintf_package_convert+0x270>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    aa3e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    aa42:	e7c0      	b.n	a9c6 <cbprintf_package_convert+0x17e>
    aa44:	462b      	mov	r3, r5
    aa46:	2d0c      	cmp	r5, #12
    aa48:	dd01      	ble.n	aa4e <cbprintf_package_convert+0x206>
    aa4a:	6978      	ldr	r0, [r7, #20]
    aa4c:	61c8      	str	r0, [r1, #28]
    aa4e:	2b10      	cmp	r3, #16
    aa50:	dd01      	ble.n	aa56 <cbprintf_package_convert+0x20e>
    aa52:	f8c1 b020 	str.w	fp, [r1, #32]
    aa56:	f101 0324 	add.w	r3, r1, #36	; 0x24
    aa5a:	2000      	movs	r0, #0
    aa5c:	e009      	b.n	aa72 <cbprintf_package_convert+0x22a>
    aa5e:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    aa62:	f107 0e28 	add.w	lr, r7, #40	; 0x28
    aa66:	44f4      	add	ip, lr
    aa68:	f81c cc30 	ldrb.w	ip, [ip, #-48]
    aa6c:	f803 cb01 	strb.w	ip, [r3], #1
    aa70:	3001      	adds	r0, #1
    aa72:	2801      	cmp	r0, #1
    aa74:	d9f3      	bls.n	aa5e <cbprintf_package_convert+0x216>
    aa76:	e7b7      	b.n	a9e8 <cbprintf_package_convert+0x1a0>
    aa78:	f06f 031b 	mvn.w	r3, #27
    aa7c:	e7b7      	b.n	a9ee <cbprintf_package_convert+0x1a6>
					out_len -= drop_ro_str_pos ? 2 : 1;
    aa7e:	2301      	movs	r3, #1
    aa80:	e789      	b.n	a996 <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    aa82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    aa86:	f013 0f02 	tst.w	r3, #2
    aa8a:	d015      	beq.n	aab8 <cbprintf_package_convert+0x270>
				len = append_string(cb, NULL, str, 0);
    aa8c:	2300      	movs	r3, #0
    aa8e:	4622      	mov	r2, r4
    aa90:	4619      	mov	r1, r3
    aa92:	69b8      	ldr	r0, [r7, #24]
    aa94:	f00a fd92 	bl	155bc <append_string>
				if (strl && strl_cnt < strl_len) {
    aa98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    aa9c:	b153      	cbz	r3, aab4 <cbprintf_package_convert+0x26c>
    aa9e:	693b      	ldr	r3, [r7, #16]
    aaa0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    aaa4:	4293      	cmp	r3, r2
    aaa6:	d205      	bcs.n	aab4 <cbprintf_package_convert+0x26c>
					strl[strl_cnt++] = (uint16_t)len;
    aaa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    aaac:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    aab0:	3301      	adds	r3, #1
    aab2:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
    aab4:	3801      	subs	r0, #1
    aab6:	4481      	add	r9, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    aab8:	f10a 0a01 	add.w	sl, sl, #1
			uint8_t arg_pos = *str_pos++;
    aabc:	4635      	mov	r5, r6
		for (unsigned int i = 0; i < rws_nbr; i++) {
    aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aac0:	459a      	cmp	sl, r3
    aac2:	d210      	bcs.n	aae6 <cbprintf_package_convert+0x29e>
			uint8_t arg_idx = *str_pos++;
    aac4:	462e      	mov	r6, r5
    aac6:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
    aaca:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
    aacc:	69fa      	ldr	r2, [r7, #28]
    aace:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    aad2:	4b76      	ldr	r3, [pc, #472]	; (acac <cbprintf_package_convert+0x464>)
    aad4:	429c      	cmp	r4, r3
    aad6:	f4ff af50 	bcc.w	a97a <cbprintf_package_convert+0x132>
    aada:	4b75      	ldr	r3, [pc, #468]	; (acb0 <cbprintf_package_convert+0x468>)
    aadc:	429c      	cmp	r4, r3
    aade:	f4ff af5d 	bcc.w	a99c <cbprintf_package_convert+0x154>
    aae2:	2500      	movs	r5, #0
    aae4:	e74a      	b.n	a97c <cbprintf_package_convert+0x134>
    aae6:	464c      	mov	r4, r9
    aae8:	e701      	b.n	a8ee <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
    aaea:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
    aaee:	2300      	movs	r3, #0
    aaf0:	61fb      	str	r3, [r7, #28]
	if (dst) {
    aaf2:	b118      	cbz	r0, aafc <cbprintf_package_convert+0x2b4>
		memcpy(dst, str_pos, ros_nbr);
    aaf4:	464a      	mov	r2, r9
    aaf6:	4629      	mov	r1, r5
    aaf8:	f00c f95b 	bl	16db2 <memcpy>
	str_pos += ros_nbr;
    aafc:	444d      	add	r5, r9
	for (unsigned int i = 0; i < rws_nbr; i++) {
    aafe:	f04f 0800 	mov.w	r8, #0
    ab02:	f8c7 9004 	str.w	r9, [r7, #4]
    ab06:	e01e      	b.n	ab46 <cbprintf_package_convert+0x2fe>
		dst = NULL;
    ab08:	2000      	movs	r0, #0
		keep_cnt = 0;
    ab0a:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    ab0c:	4606      	mov	r6, r0
    ab0e:	e7f0      	b.n	aaf2 <cbprintf_package_convert+0x2aa>
		keep_cnt = ros_nbr;
    ab10:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
    ab12:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
    ab16:	2600      	movs	r6, #0
    ab18:	e7eb      	b.n	aaf2 <cbprintf_package_convert+0x2aa>
    ab1a:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    ab1c:	6a3b      	ldr	r3, [r7, #32]
    ab1e:	bb33      	cbnz	r3, ab6e <cbprintf_package_convert+0x326>
		if (is_ro) {
    ab20:	2d00      	cmp	r5, #0
    ab22:	d03b      	beq.n	ab9c <cbprintf_package_convert+0x354>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    ab24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ab28:	f013 0f01 	tst.w	r3, #1
    ab2c:	d026      	beq.n	ab7c <cbprintf_package_convert+0x334>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    ab2e:	1c73      	adds	r3, r6, #1
    ab30:	f106 0230 	add.w	r2, r6, #48	; 0x30
    ab34:	f107 0128 	add.w	r1, r7, #40	; 0x28
    ab38:	1856      	adds	r6, r2, r1
    ab3a:	f806 9c14 	strb.w	r9, [r6, #-20]
    ab3e:	b2de      	uxtb	r6, r3
	for (unsigned int i = 0; i < rws_nbr; i++) {
    ab40:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
    ab44:	4625      	mov	r5, r4
	for (unsigned int i = 0; i < rws_nbr; i++) {
    ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ab48:	4598      	cmp	r8, r3
    ab4a:	d24a      	bcs.n	abe2 <cbprintf_package_convert+0x39a>
		uint8_t arg_idx = *str_pos++;
    ab4c:	462c      	mov	r4, r5
    ab4e:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
    ab52:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
    ab56:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
    ab5a:	4a54      	ldr	r2, [pc, #336]	; (acac <cbprintf_package_convert+0x464>)
    ab5c:	4293      	cmp	r3, r2
    ab5e:	d3dc      	bcc.n	ab1a <cbprintf_package_convert+0x2d2>
    ab60:	4a53      	ldr	r2, [pc, #332]	; (acb0 <cbprintf_package_convert+0x468>)
    ab62:	4293      	cmp	r3, r2
    ab64:	d301      	bcc.n	ab6a <cbprintf_package_convert+0x322>
    ab66:	2500      	movs	r5, #0
    ab68:	e7d8      	b.n	ab1c <cbprintf_package_convert+0x2d4>
    ab6a:	2501      	movs	r5, #1
    ab6c:	e7d6      	b.n	ab1c <cbprintf_package_convert+0x2d4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    ab6e:	4651      	mov	r1, sl
    ab70:	6978      	ldr	r0, [r7, #20]
    ab72:	f00a fd6a 	bl	1564a <is_ptr>
    ab76:	2800      	cmp	r0, #0
    ab78:	d0d2      	beq.n	ab20 <cbprintf_package_convert+0x2d8>
    ab7a:	e7e1      	b.n	ab40 <cbprintf_package_convert+0x2f8>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    ab7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ab80:	f013 0f04 	tst.w	r3, #4
    ab84:	d0dc      	beq.n	ab40 <cbprintf_package_convert+0x2f8>
				keep_str_pos[keep_cnt++] = arg_pos;
    ab86:	69fa      	ldr	r2, [r7, #28]
    ab88:	1c53      	adds	r3, r2, #1
    ab8a:	3230      	adds	r2, #48	; 0x30
    ab8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    ab90:	440a      	add	r2, r1
    ab92:	f802 9c24 	strb.w	r9, [r2, #-36]
    ab96:	b2db      	uxtb	r3, r3
    ab98:	61fb      	str	r3, [r7, #28]
    ab9a:	e7d1      	b.n	ab40 <cbprintf_package_convert+0x2f8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    ab9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    aba0:	f013 0f02 	tst.w	r3, #2
    aba4:	d009      	beq.n	abba <cbprintf_package_convert+0x372>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    aba6:	1c73      	adds	r3, r6, #1
    aba8:	f106 0230 	add.w	r2, r6, #48	; 0x30
    abac:	f107 0128 	add.w	r1, r7, #40	; 0x28
    abb0:	1856      	adds	r6, r2, r1
    abb2:	f806 9c14 	strb.w	r9, [r6, #-20]
    abb6:	b2de      	uxtb	r6, r3
    abb8:	e7c2      	b.n	ab40 <cbprintf_package_convert+0x2f8>
				keep_str_pos[keep_cnt++] = arg_idx;
    abba:	69f8      	ldr	r0, [r7, #28]
    abbc:	1c43      	adds	r3, r0, #1
    abbe:	f100 0130 	add.w	r1, r0, #48	; 0x30
    abc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
    abc6:	188a      	adds	r2, r1, r2
    abc8:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
    abcc:	4602      	mov	r2, r0
    abce:	3202      	adds	r2, #2
    abd0:	b2d2      	uxtb	r2, r2
    abd2:	61fa      	str	r2, [r7, #28]
    abd4:	f107 0258 	add.w	r2, r7, #88	; 0x58
    abd8:	fa52 f383 	uxtab	r3, r2, r3
    abdc:	f803 9c24 	strb.w	r9, [r3, #-36]
    abe0:	e7ae      	b.n	ab40 <cbprintf_package_convert+0x2f8>
	out_desc.len = in_desc->len;
    abe2:	f8d7 9004 	ldr.w	r9, [r7, #4]
    abe6:	f89b 3000 	ldrb.w	r3, [fp]
    abea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    abee:	f89b 3001 	ldrb.w	r3, [fp, #1]
    abf2:	4433      	add	r3, r6
    abf4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    abf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    abfc:	f013 0f02 	tst.w	r3, #2
    ac00:	d10e      	bne.n	ac20 <cbprintf_package_convert+0x3d8>
    ac02:	69fb      	ldr	r3, [r7, #28]
    ac04:	f3c3 0347 	ubfx	r3, r3, #1, #8
    ac08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    ac0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    ac10:	f013 0f01 	tst.w	r3, #1
    ac14:	d106      	bne.n	ac24 <cbprintf_package_convert+0x3dc>
    ac16:	f013 0f04 	tst.w	r3, #4
    ac1a:	d13f      	bne.n	ac9c <cbprintf_package_convert+0x454>
    ac1c:	2300      	movs	r3, #0
    ac1e:	e002      	b.n	ac26 <cbprintf_package_convert+0x3de>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    ac20:	2300      	movs	r3, #0
    ac22:	e7f1      	b.n	ac08 <cbprintf_package_convert+0x3c0>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    ac24:	2300      	movs	r3, #0
    ac26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    ac2a:	f8db 0000 	ldr.w	r0, [fp]
    ac2e:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
    ac30:	6d78      	ldr	r0, [r7, #84]	; 0x54
    ac32:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
    ac36:	f8d7 8010 	ldr.w	r8, [r7, #16]
    ac3a:	4642      	mov	r2, r8
    ac3c:	68b9      	ldr	r1, [r7, #8]
    ac3e:	4658      	mov	r0, fp
    ac40:	f8d7 a018 	ldr.w	sl, [r7, #24]
    ac44:	47d0      	blx	sl
	if (rv < 0) {
    ac46:	1e04      	subs	r4, r0, #0
    ac48:	f6ff ae51 	blt.w	a8ee <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
    ac4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ac4e:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    ac52:	f8c7 8010 	str.w	r8, [r7, #16]
    ac56:	4642      	mov	r2, r8
    ac58:	69f9      	ldr	r1, [r7, #28]
    ac5a:	f107 0034 	add.w	r0, r7, #52	; 0x34
    ac5e:	47d0      	blx	sl
	if (rv < 0) {
    ac60:	2800      	cmp	r0, #0
    ac62:	db58      	blt.n	ad16 <cbprintf_package_convert+0x4ce>
	out_len += rv;
    ac64:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    ac68:	68b9      	ldr	r1, [r7, #8]
    ac6a:	4449      	add	r1, r9
    ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac6e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
    ac72:	f8d7 9010 	ldr.w	r9, [r7, #16]
    ac76:	464a      	mov	r2, r9
    ac78:	68fb      	ldr	r3, [r7, #12]
    ac7a:	1a59      	subs	r1, r3, r1
    ac7c:	4628      	mov	r0, r5
    ac7e:	47d0      	blx	sl
	if (rv < 0) {
    ac80:	1e04      	subs	r4, r0, #0
    ac82:	f6ff ae34 	blt.w	a8ee <cbprintf_package_convert+0xa6>
	out_len += rv;
    ac86:	eb08 0504 	add.w	r5, r8, r4
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    ac8a:	f04f 0800 	mov.w	r8, #0
    ac8e:	627e      	str	r6, [r7, #36]	; 0x24
    ac90:	f8c7 b020 	str.w	fp, [r7, #32]
    ac94:	4656      	mov	r6, sl
    ac96:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
    ac9a:	e020      	b.n	acde <cbprintf_package_convert+0x496>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    ac9c:	69fb      	ldr	r3, [r7, #28]
    ac9e:	e7c2      	b.n	ac26 <cbprintf_package_convert+0x3de>
    aca0:	00019b48 	.word	0x00019b48
    aca4:	00019bf0 	.word	0x00019bf0
    aca8:	000199b4 	.word	0x000199b4
    acac:	000196f0 	.word	0x000196f0
    acb0:	0001b440 	.word	0x0001b440
		uint16_t str_len = strl ? strl[i] : 0;
    acb4:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    acb8:	464a      	mov	r2, r9
    acba:	2101      	movs	r1, #1
    acbc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    acc0:	47b0      	blx	r6
		if (rv < 0) {
    acc2:	2800      	cmp	r0, #0
    acc4:	db29      	blt.n	ad1a <cbprintf_package_convert+0x4d2>
		out_len += rv;
    acc6:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    acc8:	4653      	mov	r3, sl
    acca:	4622      	mov	r2, r4
    accc:	4649      	mov	r1, r9
    acce:	4630      	mov	r0, r6
    acd0:	f00a fc74 	bl	155bc <append_string>
		if (rv < 0) {
    acd4:	2800      	cmp	r0, #0
    acd6:	db22      	blt.n	ad1e <cbprintf_package_convert+0x4d6>
		out_len += rv;
    acd8:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    acda:	f108 0801 	add.w	r8, r8, #1
    acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ace0:	4598      	cmp	r8, r3
    ace2:	d211      	bcs.n	ad08 <cbprintf_package_convert+0x4c0>
		uint8_t loc = cpy_str_pos[i];
    ace4:	f108 0330 	add.w	r3, r8, #48	; 0x30
    ace8:	f107 0228 	add.w	r2, r7, #40	; 0x28
    acec:	4413      	add	r3, r2
    acee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    acf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
    acf6:	6a3a      	ldr	r2, [r7, #32]
    acf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    acfc:	f1bb 0f00 	cmp.w	fp, #0
    ad00:	d0d8      	beq.n	acb4 <cbprintf_package_convert+0x46c>
    ad02:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
    ad06:	e7d7      	b.n	acb8 <cbprintf_package_convert+0x470>
	(void)cb(NULL, 0, ctx);
    ad08:	693a      	ldr	r2, [r7, #16]
    ad0a:	2100      	movs	r1, #0
    ad0c:	4608      	mov	r0, r1
    ad0e:	69bb      	ldr	r3, [r7, #24]
    ad10:	4798      	blx	r3
	return out_len;
    ad12:	462c      	mov	r4, r5
    ad14:	e5eb      	b.n	a8ee <cbprintf_package_convert+0xa6>
		return rv;
    ad16:	4604      	mov	r4, r0
    ad18:	e5e9      	b.n	a8ee <cbprintf_package_convert+0xa6>
    ad1a:	4604      	mov	r4, r0
    ad1c:	e5e7      	b.n	a8ee <cbprintf_package_convert+0xa6>
    ad1e:	4604      	mov	r4, r0
    ad20:	e5e5      	b.n	a8ee <cbprintf_package_convert+0xa6>
    ad22:	bf00      	nop

0000ad24 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    ad24:	4b01      	ldr	r3, [pc, #4]	; (ad2c <__printk_hook_install+0x8>)
    ad26:	6018      	str	r0, [r3, #0]
}
    ad28:	4770      	bx	lr
    ad2a:	bf00      	nop
    ad2c:	200002fc 	.word	0x200002fc

0000ad30 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ad30:	b510      	push	{r4, lr}
    ad32:	b086      	sub	sp, #24
    ad34:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    ad36:	9003      	str	r0, [sp, #12]
    ad38:	9104      	str	r1, [sp, #16]
    ad3a:	2100      	movs	r1, #0
    ad3c:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    ad3e:	9100      	str	r1, [sp, #0]
    ad40:	a903      	add	r1, sp, #12
    ad42:	4806      	ldr	r0, [pc, #24]	; (ad5c <vsnprintk+0x2c>)
    ad44:	f000 f924 	bl	af90 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    ad48:	9b05      	ldr	r3, [sp, #20]
    ad4a:	9a04      	ldr	r2, [sp, #16]
    ad4c:	4293      	cmp	r3, r2
    ad4e:	da01      	bge.n	ad54 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    ad50:	2200      	movs	r2, #0
    ad52:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    ad54:	9805      	ldr	r0, [sp, #20]
    ad56:	b006      	add	sp, #24
    ad58:	bd10      	pop	{r4, pc}
    ad5a:	bf00      	nop
    ad5c:	0001569d 	.word	0x0001569d

0000ad60 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    ad60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ad64:	b083      	sub	sp, #12
    ad66:	4604      	mov	r4, r0
    ad68:	4608      	mov	r0, r1
    ad6a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ad6c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    ad6e:	f013 0f08 	tst.w	r3, #8
    ad72:	d105      	bne.n	ad80 <process_event+0x20>
    ad74:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    ad78:	2300      	movs	r3, #0
    ad7a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    ad7c:	9301      	str	r3, [sp, #4]
}
    ad7e:	e055      	b.n	ae2c <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    ad80:	2901      	cmp	r1, #1
    ad82:	d009      	beq.n	ad98 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    ad84:	f043 0320 	orr.w	r3, r3, #32
    ad88:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ad8a:	f385 8811 	msr	BASEPRI, r5
    ad8e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ad92:	b003      	add	sp, #12
    ad94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    ad98:	f043 0310 	orr.w	r3, r3, #16
    ad9c:	8323      	strh	r3, [r4, #24]
    ad9e:	e7f4      	b.n	ad8a <process_event+0x2a>
			evt = process_recheck(mgr);
    ada0:	4620      	mov	r0, r4
    ada2:	f00a feec 	bl	15b7e <process_recheck>
    ada6:	e043      	b.n	ae30 <process_event+0xd0>
			res = mgr->last_res;
    ada8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    adac:	464a      	mov	r2, r9
    adae:	4669      	mov	r1, sp
    adb0:	4620      	mov	r0, r4
    adb2:	f00a fefd 	bl	15bb0 <process_complete>
		onoff_transition_fn transit = NULL;
    adb6:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    adba:	8b23      	ldrh	r3, [r4, #24]
    adbc:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    adc0:	42b7      	cmp	r7, r6
    adc2:	d069      	beq.n	ae98 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    adc4:	68a2      	ldr	r2, [r4, #8]
    adc6:	2a00      	cmp	r2, #0
    adc8:	d066      	beq.n	ae98 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    adca:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    adcc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    add0:	8323      	strh	r3, [r4, #24]
    add2:	f385 8811 	msr	BASEPRI, r5
    add6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    adda:	2a00      	cmp	r2, #0
    addc:	d164      	bne.n	aea8 <process_event+0x148>
    adde:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    ade0:	b12b      	cbz	r3, adee <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    ade2:	464b      	mov	r3, r9
    ade4:	463a      	mov	r2, r7
    ade6:	4669      	mov	r1, sp
    ade8:	4620      	mov	r0, r4
    adea:	f00a ff5a 	bl	15ca2 <notify_all>
			if (transit != NULL) {
    adee:	f1b8 0f00 	cmp.w	r8, #0
    adf2:	d002      	beq.n	adfa <process_event+0x9a>
				transit(mgr, transition_complete);
    adf4:	4934      	ldr	r1, [pc, #208]	; (aec8 <process_event+0x168>)
    adf6:	4620      	mov	r0, r4
    adf8:	47c0      	blx	r8
	__asm__ volatile(
    adfa:	f04f 0340 	mov.w	r3, #64	; 0x40
    adfe:	f3ef 8511 	mrs	r5, BASEPRI
    ae02:	f383 8812 	msr	BASEPRI_MAX, r3
    ae06:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ae0a:	8b23      	ldrh	r3, [r4, #24]
    ae0c:	f023 0308 	bic.w	r3, r3, #8
    ae10:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ae12:	8b23      	ldrh	r3, [r4, #24]
    ae14:	f013 0f10 	tst.w	r3, #16
    ae18:	d04c      	beq.n	aeb4 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ae1a:	f023 0310 	bic.w	r3, r3, #16
    ae1e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    ae20:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    ae22:	8b26      	ldrh	r6, [r4, #24]
    ae24:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    ae28:	2800      	cmp	r0, #0
    ae2a:	d0ae      	beq.n	ad8a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    ae2c:	2802      	cmp	r0, #2
    ae2e:	d0b7      	beq.n	ada0 <process_event+0x40>
		if (evt == EVT_NOP) {
    ae30:	2800      	cmp	r0, #0
    ae32:	d0aa      	beq.n	ad8a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    ae34:	3801      	subs	r0, #1
    ae36:	2804      	cmp	r0, #4
    ae38:	d82a      	bhi.n	ae90 <process_event+0x130>
    ae3a:	a301      	add	r3, pc, #4	; (adr r3, ae40 <process_event+0xe0>)
    ae3c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    ae40:	0000ada9 	.word	0x0000ada9
    ae44:	0000ae91 	.word	0x0000ae91
    ae48:	0000ae55 	.word	0x0000ae55
    ae4c:	0000ae69 	.word	0x0000ae69
    ae50:	0000ae7d 	.word	0x0000ae7d
			transit = mgr->transitions->start;
    ae54:	6923      	ldr	r3, [r4, #16]
    ae56:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    ae5a:	2106      	movs	r1, #6
    ae5c:	4620      	mov	r0, r4
    ae5e:	f00a fe64 	bl	15b2a <set_state>
		res = 0;
    ae62:	f04f 0900 	mov.w	r9, #0
    ae66:	e7a8      	b.n	adba <process_event+0x5a>
			transit = mgr->transitions->stop;
    ae68:	6923      	ldr	r3, [r4, #16]
    ae6a:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    ae6e:	2104      	movs	r1, #4
    ae70:	4620      	mov	r0, r4
    ae72:	f00a fe5a 	bl	15b2a <set_state>
		res = 0;
    ae76:	f04f 0900 	mov.w	r9, #0
    ae7a:	e79e      	b.n	adba <process_event+0x5a>
			transit = mgr->transitions->reset;
    ae7c:	6923      	ldr	r3, [r4, #16]
    ae7e:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    ae82:	2105      	movs	r1, #5
    ae84:	4620      	mov	r0, r4
    ae86:	f00a fe50 	bl	15b2a <set_state>
		res = 0;
    ae8a:	f04f 0900 	mov.w	r9, #0
    ae8e:	e794      	b.n	adba <process_event+0x5a>
		if (evt == EVT_NOP) {
    ae90:	f04f 0800 	mov.w	r8, #0
    ae94:	46c1      	mov	r9, r8
    ae96:	e790      	b.n	adba <process_event+0x5a>
    ae98:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    ae9a:	b10a      	cbz	r2, aea0 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ae9c:	2200      	movs	r2, #0
    ae9e:	e795      	b.n	adcc <process_event+0x6c>
		    || (transit != NULL)) {
    aea0:	f1b8 0f00 	cmp.w	r8, #0
    aea4:	d192      	bne.n	adcc <process_event+0x6c>
    aea6:	e7b4      	b.n	ae12 <process_event+0xb2>
				notify_monitors(mgr, state, res);
    aea8:	464a      	mov	r2, r9
    aeaa:	4639      	mov	r1, r7
    aeac:	4620      	mov	r0, r4
    aeae:	f00a fe44 	bl	15b3a <notify_monitors>
    aeb2:	e794      	b.n	adde <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    aeb4:	f013 0f20 	tst.w	r3, #32
    aeb8:	d004      	beq.n	aec4 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    aeba:	f023 0320 	bic.w	r3, r3, #32
    aebe:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    aec0:	2002      	movs	r0, #2
    aec2:	e7ae      	b.n	ae22 <process_event+0xc2>
		evt = EVT_NOP;
    aec4:	2000      	movs	r0, #0
    aec6:	e7ac      	b.n	ae22 <process_event+0xc2>
    aec8:	00015cd1 	.word	0x00015cd1

0000aecc <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    aecc:	4684      	mov	ip, r0
    aece:	4608      	mov	r0, r1
	bool loop = true;
    aed0:	2201      	movs	r2, #1
    aed2:	e026      	b.n	af22 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    aed4:	f89c 3000 	ldrb.w	r3, [ip]
    aed8:	f043 0304 	orr.w	r3, r3, #4
    aedc:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    aee0:	b1f2      	cbz	r2, af20 <extract_flags+0x54>
			++sp;
    aee2:	3001      	adds	r0, #1
    aee4:	e01c      	b.n	af20 <extract_flags+0x54>
			conv->flag_plus = true;
    aee6:	f89c 3000 	ldrb.w	r3, [ip]
    aeea:	f043 0308 	orr.w	r3, r3, #8
    aeee:	f88c 3000 	strb.w	r3, [ip]
			break;
    aef2:	e7f5      	b.n	aee0 <extract_flags+0x14>
			conv->flag_space = true;
    aef4:	f89c 3000 	ldrb.w	r3, [ip]
    aef8:	f043 0310 	orr.w	r3, r3, #16
    aefc:	f88c 3000 	strb.w	r3, [ip]
			break;
    af00:	e7ee      	b.n	aee0 <extract_flags+0x14>
			conv->flag_hash = true;
    af02:	f89c 3000 	ldrb.w	r3, [ip]
    af06:	f043 0320 	orr.w	r3, r3, #32
    af0a:	f88c 3000 	strb.w	r3, [ip]
			break;
    af0e:	e7e7      	b.n	aee0 <extract_flags+0x14>
			conv->flag_zero = true;
    af10:	f89c 3000 	ldrb.w	r3, [ip]
    af14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    af18:	f88c 3000 	strb.w	r3, [ip]
			break;
    af1c:	e7e0      	b.n	aee0 <extract_flags+0x14>
		switch (*sp) {
    af1e:	2200      	movs	r2, #0
		}
	} while (loop);
    af20:	b342      	cbz	r2, af74 <extract_flags+0xa8>
		switch (*sp) {
    af22:	7803      	ldrb	r3, [r0, #0]
    af24:	3b20      	subs	r3, #32
    af26:	2b10      	cmp	r3, #16
    af28:	d8f9      	bhi.n	af1e <extract_flags+0x52>
    af2a:	a101      	add	r1, pc, #4	; (adr r1, af30 <extract_flags+0x64>)
    af2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    af30:	0000aef5 	.word	0x0000aef5
    af34:	0000af1f 	.word	0x0000af1f
    af38:	0000af1f 	.word	0x0000af1f
    af3c:	0000af03 	.word	0x0000af03
    af40:	0000af1f 	.word	0x0000af1f
    af44:	0000af1f 	.word	0x0000af1f
    af48:	0000af1f 	.word	0x0000af1f
    af4c:	0000af1f 	.word	0x0000af1f
    af50:	0000af1f 	.word	0x0000af1f
    af54:	0000af1f 	.word	0x0000af1f
    af58:	0000af1f 	.word	0x0000af1f
    af5c:	0000aee7 	.word	0x0000aee7
    af60:	0000af1f 	.word	0x0000af1f
    af64:	0000aed5 	.word	0x0000aed5
    af68:	0000af1f 	.word	0x0000af1f
    af6c:	0000af1f 	.word	0x0000af1f
    af70:	0000af11 	.word	0x0000af11

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    af74:	f89c 3000 	ldrb.w	r3, [ip]
    af78:	f003 0344 	and.w	r3, r3, #68	; 0x44
    af7c:	2b44      	cmp	r3, #68	; 0x44
    af7e:	d000      	beq.n	af82 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    af80:	4770      	bx	lr
		conv->flag_zero = false;
    af82:	f89c 3000 	ldrb.w	r3, [ip]
    af86:	f36f 1386 	bfc	r3, #6, #1
    af8a:	f88c 3000 	strb.w	r3, [ip]
    af8e:	e7f7      	b.n	af80 <extract_flags+0xb4>

0000af90 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af94:	b091      	sub	sp, #68	; 0x44
    af96:	4606      	mov	r6, r0
    af98:	460d      	mov	r5, r1
    af9a:	4691      	mov	r9, r2
    af9c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    af9e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    afa0:	f899 0000 	ldrb.w	r0, [r9]
    afa4:	2800      	cmp	r0, #0
    afa6:	f000 82b9 	beq.w	b51c <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    afaa:	2825      	cmp	r0, #37	; 0x25
    afac:	d008      	beq.n	afc0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    afae:	f109 0901 	add.w	r9, r9, #1
    afb2:	4629      	mov	r1, r5
    afb4:	47b0      	blx	r6
    afb6:	2800      	cmp	r0, #0
    afb8:	f2c0 82b1 	blt.w	b51e <z_cbvprintf_impl+0x58e>
    afbc:	3401      	adds	r4, #1
			continue;
    afbe:	e7ef      	b.n	afa0 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    afc0:	2300      	movs	r3, #0
    afc2:	9304      	str	r3, [sp, #16]
    afc4:	9305      	str	r3, [sp, #20]
    afc6:	9306      	str	r3, [sp, #24]
    afc8:	9307      	str	r3, [sp, #28]
    afca:	9308      	str	r3, [sp, #32]
    afcc:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    afce:	4649      	mov	r1, r9
    afd0:	a806      	add	r0, sp, #24
    afd2:	f00b f8ad 	bl	16130 <extract_conversion>
    afd6:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    afd8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    afdc:	f013 0f01 	tst.w	r3, #1
    afe0:	f000 8097 	beq.w	b112 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    afe4:	9b03      	ldr	r3, [sp, #12]
    afe6:	1d1a      	adds	r2, r3, #4
    afe8:	9203      	str	r2, [sp, #12]
    afea:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    afec:	2f00      	cmp	r7, #0
    afee:	f2c0 8088 	blt.w	b102 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    aff2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    aff6:	f013 0f04 	tst.w	r3, #4
    affa:	f000 809c 	beq.w	b136 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    affe:	9b03      	ldr	r3, [sp, #12]
    b000:	1d1a      	adds	r2, r3, #4
    b002:	9203      	str	r2, [sp, #12]
    b004:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    b008:	f1ba 0f00 	cmp.w	sl, #0
    b00c:	f2c0 808a 	blt.w	b124 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    b010:	2300      	movs	r3, #0
    b012:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    b014:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    b016:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b01a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    b01e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b022:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    b026:	2b01      	cmp	r3, #1
    b028:	f000 808e 	beq.w	b148 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    b02c:	2b02      	cmp	r3, #2
    b02e:	f000 80d3 	beq.w	b1d8 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    b032:	2b04      	cmp	r3, #4
    b034:	f000 8124 	beq.w	b280 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    b038:	2b03      	cmp	r3, #3
    b03a:	f000 813b 	beq.w	b2b4 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    b03e:	f89d 8018 	ldrb.w	r8, [sp, #24]
    b042:	f018 0b03 	ands.w	fp, r8, #3
    b046:	f040 813b 	bne.w	b2c0 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    b04a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b04e:	3b25      	subs	r3, #37	; 0x25
    b050:	2b53      	cmp	r3, #83	; 0x53
    b052:	f200 81ca 	bhi.w	b3ea <z_cbvprintf_impl+0x45a>
    b056:	e8df f013 	tbh	[pc, r3, lsl #1]
    b05a:	0140      	.short	0x0140
    b05c:	01c801c8 	.word	0x01c801c8
    b060:	01c801c8 	.word	0x01c801c8
    b064:	01c801c8 	.word	0x01c801c8
    b068:	01c801c8 	.word	0x01c801c8
    b06c:	01c801c8 	.word	0x01c801c8
    b070:	01c801c8 	.word	0x01c801c8
    b074:	01c801c8 	.word	0x01c801c8
    b078:	01c801c8 	.word	0x01c801c8
    b07c:	01c801c8 	.word	0x01c801c8
    b080:	01c801c8 	.word	0x01c801c8
    b084:	01c801c8 	.word	0x01c801c8
    b088:	01c801c8 	.word	0x01c801c8
    b08c:	01c801c8 	.word	0x01c801c8
    b090:	01c801c8 	.word	0x01c801c8
    b094:	01c801c8 	.word	0x01c801c8
    b098:	01c801c8 	.word	0x01c801c8
    b09c:	01c801c8 	.word	0x01c801c8
    b0a0:	01c801c8 	.word	0x01c801c8
    b0a4:	01c801c8 	.word	0x01c801c8
    b0a8:	01c801c8 	.word	0x01c801c8
    b0ac:	01c801c8 	.word	0x01c801c8
    b0b0:	01c801c8 	.word	0x01c801c8
    b0b4:	01c801c8 	.word	0x01c801c8
    b0b8:	01c801c8 	.word	0x01c801c8
    b0bc:	01c801c8 	.word	0x01c801c8
    b0c0:	01c80181 	.word	0x01c80181
    b0c4:	01c801c8 	.word	0x01c801c8
    b0c8:	01c801c8 	.word	0x01c801c8
    b0cc:	01c801c8 	.word	0x01c801c8
    b0d0:	01c801c8 	.word	0x01c801c8
    b0d4:	015e01c8 	.word	0x015e01c8
    b0d8:	01c80167 	.word	0x01c80167
    b0dc:	01c801c8 	.word	0x01c801c8
    b0e0:	016701c8 	.word	0x016701c8
    b0e4:	01c801c8 	.word	0x01c801c8
    b0e8:	01c801c8 	.word	0x01c801c8
    b0ec:	018101bd 	.word	0x018101bd
    b0f0:	01c801a1 	.word	0x01c801a1
    b0f4:	014d01c8 	.word	0x014d01c8
    b0f8:	018101c8 	.word	0x018101c8
    b0fc:	01c801c8 	.word	0x01c801c8
    b100:	0181      	.short	0x0181
				conv->flag_dash = true;
    b102:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b106:	f043 0304 	orr.w	r3, r3, #4
    b10a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    b10e:	427f      	negs	r7, r7
    b110:	e76f      	b.n	aff2 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    b112:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    b116:	2b00      	cmp	r3, #0
    b118:	db02      	blt.n	b120 <z_cbvprintf_impl+0x190>
		int width = -1;
    b11a:	f04f 37ff 	mov.w	r7, #4294967295
    b11e:	e768      	b.n	aff2 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    b120:	9f07      	ldr	r7, [sp, #28]
    b122:	e766      	b.n	aff2 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    b124:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b128:	f36f 0341 	bfc	r3, #1, #1
    b12c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    b130:	f04f 3aff 	mov.w	sl, #4294967295
    b134:	e76c      	b.n	b010 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    b136:	f013 0f02 	tst.w	r3, #2
    b13a:	d002      	beq.n	b142 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    b13c:	f8dd a020 	ldr.w	sl, [sp, #32]
    b140:	e766      	b.n	b010 <z_cbvprintf_impl+0x80>
		int precision = -1;
    b142:	f04f 3aff 	mov.w	sl, #4294967295
    b146:	e763      	b.n	b010 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    b148:	1ecb      	subs	r3, r1, #3
    b14a:	2b04      	cmp	r3, #4
    b14c:	d804      	bhi.n	b158 <z_cbvprintf_impl+0x1c8>
    b14e:	e8df f003 	tbb	[pc, r3]
    b152:	1d0b      	.short	0x1d0b
    b154:	3529      	.short	0x3529
    b156:	35          	.byte	0x35
    b157:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b158:	9b03      	ldr	r3, [sp, #12]
    b15a:	1d1a      	adds	r2, r3, #4
    b15c:	9203      	str	r2, [sp, #12]
    b15e:	681b      	ldr	r3, [r3, #0]
    b160:	17da      	asrs	r2, r3, #31
    b162:	9304      	str	r3, [sp, #16]
    b164:	9205      	str	r2, [sp, #20]
				break;
    b166:	e006      	b.n	b176 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    b168:	9b03      	ldr	r3, [sp, #12]
    b16a:	1d1a      	adds	r2, r3, #4
    b16c:	9203      	str	r2, [sp, #12]
    b16e:	681b      	ldr	r3, [r3, #0]
    b170:	17da      	asrs	r2, r3, #31
    b172:	9304      	str	r3, [sp, #16]
    b174:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    b176:	2901      	cmp	r1, #1
    b178:	d028      	beq.n	b1cc <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    b17a:	2902      	cmp	r1, #2
    b17c:	f47f af5f 	bne.w	b03e <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    b180:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    b184:	17da      	asrs	r2, r3, #31
    b186:	9304      	str	r3, [sp, #16]
    b188:	9205      	str	r2, [sp, #20]
    b18a:	e758      	b.n	b03e <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    b18c:	9b03      	ldr	r3, [sp, #12]
    b18e:	3307      	adds	r3, #7
    b190:	f023 0307 	bic.w	r3, r3, #7
    b194:	f103 0208 	add.w	r2, r3, #8
    b198:	9203      	str	r2, [sp, #12]
    b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b19e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b1a2:	e7e8      	b.n	b176 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    b1a4:	9b03      	ldr	r3, [sp, #12]
    b1a6:	3307      	adds	r3, #7
    b1a8:	f023 0307 	bic.w	r3, r3, #7
    b1ac:	f103 0208 	add.w	r2, r3, #8
    b1b0:	9203      	str	r2, [sp, #12]
    b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    b1b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b1ba:	e7dc      	b.n	b176 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b1bc:	9b03      	ldr	r3, [sp, #12]
    b1be:	1d1a      	adds	r2, r3, #4
    b1c0:	9203      	str	r2, [sp, #12]
    b1c2:	681b      	ldr	r3, [r3, #0]
    b1c4:	17da      	asrs	r2, r3, #31
				value->sint =
    b1c6:	9304      	str	r3, [sp, #16]
    b1c8:	9205      	str	r2, [sp, #20]
				break;
    b1ca:	e7d4      	b.n	b176 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    b1cc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    b1d0:	17da      	asrs	r2, r3, #31
    b1d2:	9304      	str	r3, [sp, #16]
    b1d4:	9205      	str	r2, [sp, #20]
    b1d6:	e732      	b.n	b03e <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    b1d8:	1ecb      	subs	r3, r1, #3
    b1da:	2b04      	cmp	r3, #4
    b1dc:	d804      	bhi.n	b1e8 <z_cbvprintf_impl+0x258>
    b1de:	e8df f003 	tbb	[pc, r3]
    b1e2:	1f0b      	.short	0x1f0b
    b1e4:	4135      	.short	0x4135
    b1e6:	41          	.byte	0x41
    b1e7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    b1e8:	9b03      	ldr	r3, [sp, #12]
    b1ea:	1d1a      	adds	r2, r3, #4
    b1ec:	9203      	str	r2, [sp, #12]
    b1ee:	681b      	ldr	r3, [r3, #0]
    b1f0:	9304      	str	r3, [sp, #16]
    b1f2:	2300      	movs	r3, #0
    b1f4:	9305      	str	r3, [sp, #20]
				break;
    b1f6:	e01e      	b.n	b236 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    b1f8:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    b1fc:	2b63      	cmp	r3, #99	; 0x63
    b1fe:	d007      	beq.n	b210 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    b200:	9b03      	ldr	r3, [sp, #12]
    b202:	1d1a      	adds	r2, r3, #4
    b204:	9203      	str	r2, [sp, #12]
    b206:	681b      	ldr	r3, [r3, #0]
    b208:	9304      	str	r3, [sp, #16]
    b20a:	2300      	movs	r3, #0
    b20c:	9305      	str	r3, [sp, #20]
    b20e:	e012      	b.n	b236 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    b210:	9b03      	ldr	r3, [sp, #12]
    b212:	1d1a      	adds	r2, r3, #4
    b214:	9203      	str	r2, [sp, #12]
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	9304      	str	r3, [sp, #16]
    b21a:	2300      	movs	r3, #0
    b21c:	9305      	str	r3, [sp, #20]
    b21e:	e00a      	b.n	b236 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    b220:	9b03      	ldr	r3, [sp, #12]
    b222:	3307      	adds	r3, #7
    b224:	f023 0307 	bic.w	r3, r3, #7
    b228:	f103 0208 	add.w	r2, r3, #8
    b22c:	9203      	str	r2, [sp, #12]
    b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    b232:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    b236:	2901      	cmp	r1, #1
    b238:	d01c      	beq.n	b274 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    b23a:	2902      	cmp	r1, #2
    b23c:	f47f aeff 	bne.w	b03e <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    b240:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b244:	9304      	str	r3, [sp, #16]
    b246:	2300      	movs	r3, #0
    b248:	9305      	str	r3, [sp, #20]
    b24a:	e6f8      	b.n	b03e <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    b24c:	9b03      	ldr	r3, [sp, #12]
    b24e:	3307      	adds	r3, #7
    b250:	f023 0307 	bic.w	r3, r3, #7
    b254:	f103 0208 	add.w	r2, r3, #8
    b258:	9203      	str	r2, [sp, #12]
    b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    b25e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    b262:	e7e8      	b.n	b236 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    b264:	9b03      	ldr	r3, [sp, #12]
    b266:	1d1a      	adds	r2, r3, #4
    b268:	9203      	str	r2, [sp, #12]
    b26a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    b26c:	9304      	str	r3, [sp, #16]
    b26e:	2300      	movs	r3, #0
    b270:	9305      	str	r3, [sp, #20]
				break;
    b272:	e7e0      	b.n	b236 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    b274:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b278:	9304      	str	r3, [sp, #16]
    b27a:	2300      	movs	r3, #0
    b27c:	9305      	str	r3, [sp, #20]
    b27e:	e6de      	b.n	b03e <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    b280:	2908      	cmp	r1, #8
    b282:	d00b      	beq.n	b29c <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    b284:	9b03      	ldr	r3, [sp, #12]
    b286:	3307      	adds	r3, #7
    b288:	f023 0307 	bic.w	r3, r3, #7
    b28c:	f103 0208 	add.w	r2, r3, #8
    b290:	9203      	str	r2, [sp, #12]
    b292:	e9d3 2300 	ldrd	r2, r3, [r3]
    b296:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b29a:	e6d0      	b.n	b03e <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    b29c:	9b03      	ldr	r3, [sp, #12]
    b29e:	3307      	adds	r3, #7
    b2a0:	f023 0307 	bic.w	r3, r3, #7
    b2a4:	f103 0208 	add.w	r2, r3, #8
    b2a8:	9203      	str	r2, [sp, #12]
    b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b2b2:	e6c4      	b.n	b03e <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    b2b4:	9b03      	ldr	r3, [sp, #12]
    b2b6:	1d1a      	adds	r2, r3, #4
    b2b8:	9203      	str	r2, [sp, #12]
    b2ba:	681b      	ldr	r3, [r3, #0]
    b2bc:	9304      	str	r3, [sp, #16]
    b2be:	e6be      	b.n	b03e <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    b2c0:	9f02      	ldr	r7, [sp, #8]
    b2c2:	463b      	mov	r3, r7
    b2c4:	464a      	mov	r2, r9
    b2c6:	4629      	mov	r1, r5
    b2c8:	4630      	mov	r0, r6
    b2ca:	f00a ffd7 	bl	1627c <outs>
    b2ce:	2800      	cmp	r0, #0
    b2d0:	f2c0 8125 	blt.w	b51e <z_cbvprintf_impl+0x58e>
    b2d4:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    b2d6:	46b9      	mov	r9, r7
			continue;
    b2d8:	e662      	b.n	afa0 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    b2da:	4629      	mov	r1, r5
    b2dc:	2025      	movs	r0, #37	; 0x25
    b2de:	47b0      	blx	r6
    b2e0:	2800      	cmp	r0, #0
    b2e2:	f2c0 811c 	blt.w	b51e <z_cbvprintf_impl+0x58e>
    b2e6:	3401      	adds	r4, #1
		char sign = 0;
    b2e8:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    b2ea:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    b2ee:	f04f 0900 	mov.w	r9, #0
			break;
    b2f2:	e07f      	b.n	b3f4 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    b2f4:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    b2f8:	f1ba 0f00 	cmp.w	sl, #0
    b2fc:	db07      	blt.n	b30e <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    b2fe:	4651      	mov	r1, sl
    b300:	4648      	mov	r0, r9
    b302:	f00b fd2f 	bl	16d64 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    b306:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    b30a:	46d8      	mov	r8, fp
			precision = -1;

			break;
    b30c:	e072      	b.n	b3f4 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    b30e:	4648      	mov	r0, r9
    b310:	f00b fd1f 	bl	16d52 <strlen>
    b314:	e7f7      	b.n	b306 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b316:	9b04      	ldr	r3, [sp, #16]
    b318:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    b31c:	46d8      	mov	r8, fp
			bpe = buf + 1;
    b31e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    b322:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    b326:	e065      	b.n	b3f4 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    b328:	f018 0f08 	tst.w	r8, #8
    b32c:	d105      	bne.n	b33a <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    b32e:	f018 0810 	ands.w	r8, r8, #16
    b332:	d004      	beq.n	b33e <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    b334:	f04f 0820 	mov.w	r8, #32
    b338:	e001      	b.n	b33e <z_cbvprintf_impl+0x3ae>
				sign = '+';
    b33a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    b33e:	9a04      	ldr	r2, [sp, #16]
    b340:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    b342:	2b00      	cmp	r3, #0
    b344:	db02      	blt.n	b34c <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    b346:	9204      	str	r2, [sp, #16]
    b348:	9305      	str	r3, [sp, #20]
    b34a:	e008      	b.n	b35e <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    b34c:	4252      	negs	r2, r2
    b34e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b352:	9204      	str	r2, [sp, #16]
    b354:	9305      	str	r3, [sp, #20]
				sign = '-';
    b356:	f04f 082d 	mov.w	r8, #45	; 0x2d
    b35a:	e000      	b.n	b35e <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    b35c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    b35e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b362:	9300      	str	r3, [sp, #0]
    b364:	ab0a      	add	r3, sp, #40	; 0x28
    b366:	aa06      	add	r2, sp, #24
    b368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b36c:	f00a ff17 	bl	1619e <encode_uint>
    b370:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    b372:	f1ba 0f00 	cmp.w	sl, #0
    b376:	db6c      	blt.n	b452 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    b378:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b37c:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    b380:	f89d 2018 	ldrb.w	r2, [sp, #24]
    b384:	f36f 1286 	bfc	r2, #6, #1
    b388:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    b38c:	459a      	cmp	sl, r3
    b38e:	d963      	bls.n	b458 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    b390:	ebaa 0303 	sub.w	r3, sl, r3
    b394:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    b396:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b39a:	e02b      	b.n	b3f4 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    b39c:	9804      	ldr	r0, [sp, #16]
    b39e:	b928      	cbnz	r0, b3ac <z_cbvprintf_impl+0x41c>
		char sign = 0;
    b3a0:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    b3a2:	f8df a180 	ldr.w	sl, [pc, #384]	; b524 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    b3a6:	f1aa 0905 	sub.w	r9, sl, #5
    b3aa:	e023      	b.n	b3f4 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b3ac:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b3b0:	9300      	str	r3, [sp, #0]
    b3b2:	ab0a      	add	r3, sp, #40	; 0x28
    b3b4:	aa06      	add	r2, sp, #24
    b3b6:	2100      	movs	r1, #0
    b3b8:	f00a fef1 	bl	1619e <encode_uint>
    b3bc:	4681      	mov	r9, r0
				conv->altform_0c = true;
    b3be:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b3c2:	f043 0310 	orr.w	r3, r3, #16
    b3c6:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    b3ca:	2378      	movs	r3, #120	; 0x78
    b3cc:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    b3d0:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    b3d2:	e7ce      	b.n	b372 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    b3d4:	4622      	mov	r2, r4
    b3d6:	9904      	ldr	r1, [sp, #16]
    b3d8:	a806      	add	r0, sp, #24
    b3da:	f00a ff30 	bl	1623e <store_count>
		char sign = 0;
    b3de:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    b3e0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    b3e4:	f04f 0900 	mov.w	r9, #0
			}

			break;
    b3e8:	e004      	b.n	b3f4 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    b3ea:	46d8      	mov	r8, fp
    b3ec:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b3f0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    b3f4:	f1b9 0f00 	cmp.w	r9, #0
    b3f8:	f000 808d 	beq.w	b516 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    b3fc:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    b400:	f1b8 0f00 	cmp.w	r8, #0
    b404:	d000      	beq.n	b408 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    b406:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    b408:	f89d 201a 	ldrb.w	r2, [sp, #26]
    b40c:	f012 0f10 	tst.w	r2, #16
    b410:	d025      	beq.n	b45e <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    b412:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    b414:	9907      	ldr	r1, [sp, #28]
    b416:	440b      	add	r3, r1
		if (conv->pad_fp) {
    b418:	f012 0f40 	tst.w	r2, #64	; 0x40
    b41c:	d001      	beq.n	b422 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    b41e:	9a08      	ldr	r2, [sp, #32]
    b420:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    b422:	2f00      	cmp	r7, #0
    b424:	dd31      	ble.n	b48a <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    b426:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    b428:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b42c:	f013 0f04 	tst.w	r3, #4
    b430:	d12b      	bne.n	b48a <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    b432:	f013 0f40 	tst.w	r3, #64	; 0x40
    b436:	d017      	beq.n	b468 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    b438:	f1b8 0f00 	cmp.w	r8, #0
    b43c:	d017      	beq.n	b46e <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    b43e:	4629      	mov	r1, r5
    b440:	4640      	mov	r0, r8
    b442:	47b0      	blx	r6
    b444:	2800      	cmp	r0, #0
    b446:	db6a      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b448:	3401      	adds	r4, #1
						sign = 0;
    b44a:	46d8      	mov	r8, fp
					}
					pad = '0';
    b44c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    b450:	e00f      	b.n	b472 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    b452:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b456:	e7cd      	b.n	b3f4 <z_cbvprintf_impl+0x464>
    b458:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    b45c:	e7ca      	b.n	b3f4 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    b45e:	f012 0f08 	tst.w	r2, #8
    b462:	d0d7      	beq.n	b414 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    b464:	3301      	adds	r3, #1
    b466:	e7d5      	b.n	b414 <z_cbvprintf_impl+0x484>
				char pad = ' ';
    b468:	f04f 0b20 	mov.w	fp, #32
    b46c:	e001      	b.n	b472 <z_cbvprintf_impl+0x4e2>
					pad = '0';
    b46e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    b472:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    b474:	1e5f      	subs	r7, r3, #1
    b476:	2b00      	cmp	r3, #0
    b478:	dd07      	ble.n	b48a <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    b47a:	4629      	mov	r1, r5
    b47c:	4658      	mov	r0, fp
    b47e:	47b0      	blx	r6
    b480:	2800      	cmp	r0, #0
    b482:	db4c      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b484:	3401      	adds	r4, #1
				while (width-- > 0) {
    b486:	463b      	mov	r3, r7
    b488:	e7f4      	b.n	b474 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    b48a:	f1b8 0f00 	cmp.w	r8, #0
    b48e:	d005      	beq.n	b49c <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    b490:	4629      	mov	r1, r5
    b492:	4640      	mov	r0, r8
    b494:	47b0      	blx	r6
    b496:	2800      	cmp	r0, #0
    b498:	db41      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b49a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    b49c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b4a0:	f3c3 1200 	ubfx	r2, r3, #4, #1
    b4a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    b4a8:	431a      	orrs	r2, r3
    b4aa:	d005      	beq.n	b4b8 <z_cbvprintf_impl+0x528>
				OUTC('0');
    b4ac:	4629      	mov	r1, r5
    b4ae:	2030      	movs	r0, #48	; 0x30
    b4b0:	47b0      	blx	r6
    b4b2:	2800      	cmp	r0, #0
    b4b4:	db33      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b4b6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    b4b8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    b4bc:	f013 0f10 	tst.w	r3, #16
    b4c0:	d006      	beq.n	b4d0 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    b4c2:	4629      	mov	r1, r5
    b4c4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    b4c8:	47b0      	blx	r6
    b4ca:	2800      	cmp	r0, #0
    b4cc:	db27      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b4ce:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    b4d0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    b4d2:	f103 38ff 	add.w	r8, r3, #4294967295
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	dd07      	ble.n	b4ea <z_cbvprintf_impl+0x55a>
				OUTC('0');
    b4da:	4629      	mov	r1, r5
    b4dc:	2030      	movs	r0, #48	; 0x30
    b4de:	47b0      	blx	r6
    b4e0:	2800      	cmp	r0, #0
    b4e2:	db1c      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b4e4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    b4e6:	4643      	mov	r3, r8
    b4e8:	e7f3      	b.n	b4d2 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    b4ea:	4653      	mov	r3, sl
    b4ec:	464a      	mov	r2, r9
    b4ee:	4629      	mov	r1, r5
    b4f0:	4630      	mov	r0, r6
    b4f2:	f00a fec3 	bl	1627c <outs>
    b4f6:	2800      	cmp	r0, #0
    b4f8:	db11      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b4fa:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    b4fc:	2f00      	cmp	r7, #0
    b4fe:	dd07      	ble.n	b510 <z_cbvprintf_impl+0x580>
			OUTC(' ');
    b500:	4629      	mov	r1, r5
    b502:	2020      	movs	r0, #32
    b504:	47b0      	blx	r6
    b506:	2800      	cmp	r0, #0
    b508:	db09      	blt.n	b51e <z_cbvprintf_impl+0x58e>
    b50a:	3401      	adds	r4, #1
			--width;
    b50c:	3f01      	subs	r7, #1
    b50e:	e7f5      	b.n	b4fc <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    b510:	f8dd 9008 	ldr.w	r9, [sp, #8]
    b514:	e544      	b.n	afa0 <z_cbvprintf_impl+0x10>
    b516:	f8dd 9008 	ldr.w	r9, [sp, #8]
    b51a:	e541      	b.n	afa0 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    b51c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    b51e:	b011      	add	sp, #68	; 0x44
    b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b524:	00019c25 	.word	0x00019c25

0000b528 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b528:	f007 bd3e 	b.w	12fa8 <SystemInit>

0000b52c <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
    b52c:	b538      	push	{r3, r4, r5, lr}
    b52e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b530:	4c0b      	ldr	r4, [pc, #44]	; (b560 <msg_process+0x34>)
    b532:	e000      	b.n	b536 <msg_process+0xa>
    b534:	3410      	adds	r4, #16
    b536:	4b0b      	ldr	r3, [pc, #44]	; (b564 <msg_process+0x38>)
    b538:	429c      	cmp	r4, r3
    b53a:	d20f      	bcs.n	b55c <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b53c:	6863      	ldr	r3, [r4, #4]
    b53e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    b540:	2b00      	cmp	r3, #0
    b542:	d0f7      	beq.n	b534 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    b544:	4629      	mov	r1, r5
    b546:	4620      	mov	r0, r4
    b548:	f00b f9c8 	bl	168dc <msg_filter_check>
		if (log_backend_is_active(backend) &&
    b54c:	2800      	cmp	r0, #0
    b54e:	d0f1      	beq.n	b534 <msg_process+0x8>
	backend->api->process(backend, msg);
    b550:	6823      	ldr	r3, [r4, #0]
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	4629      	mov	r1, r5
    b556:	4620      	mov	r0, r4
    b558:	4798      	blx	r3
}
    b55a:	e7eb      	b.n	b534 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    b55c:	bd38      	pop	{r3, r4, r5, pc}
    b55e:	bf00      	nop
    b560:	00019a24 	.word	0x00019a24
    b564:	00019a44 	.word	0x00019a44

0000b568 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    b568:	b570      	push	{r4, r5, r6, lr}
    b56a:	4606      	mov	r6, r0
    b56c:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b56e:	4c08      	ldr	r4, [pc, #32]	; (b590 <log_backend_notify_all+0x28>)
    b570:	e004      	b.n	b57c <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    b572:	462a      	mov	r2, r5
    b574:	4631      	mov	r1, r6
    b576:	4620      	mov	r0, r4
    b578:	4798      	blx	r3
    b57a:	3410      	adds	r4, #16
    b57c:	4b05      	ldr	r3, [pc, #20]	; (b594 <log_backend_notify_all+0x2c>)
    b57e:	429c      	cmp	r4, r3
    b580:	d204      	bcs.n	b58c <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    b582:	6823      	ldr	r3, [r4, #0]
    b584:	699b      	ldr	r3, [r3, #24]
    b586:	2b00      	cmp	r3, #0
    b588:	d1f3      	bne.n	b572 <log_backend_notify_all+0xa>
    b58a:	e7f6      	b.n	b57a <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    b58c:	bd70      	pop	{r4, r5, r6, pc}
    b58e:	bf00      	nop
    b590:	00019a24 	.word	0x00019a24
    b594:	00019a44 	.word	0x00019a44

0000b598 <activate_foreach_backend>:
{
    b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b59c:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    b59e:	4605      	mov	r5, r0
	while (mask_cpy) {
    b5a0:	e00a      	b.n	b5b8 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    b5a2:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    b5a6:	4b14      	ldr	r3, [pc, #80]	; (b5f8 <activate_foreach_backend+0x60>)
    b5a8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    b5ac:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    b5ae:	2204      	movs	r2, #4
    b5b0:	6819      	ldr	r1, [r3, #0]
    b5b2:	4620      	mov	r0, r4
    b5b4:	f000 faa8 	bl	bb08 <log_backend_enable>
	while (mask_cpy) {
    b5b8:	b1d5      	cbz	r5, b5f0 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    b5ba:	fa95 f6a5 	rbit	r6, r5
    b5be:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    b5c2:	4c0d      	ldr	r4, [pc, #52]	; (b5f8 <activate_foreach_backend+0x60>)
    b5c4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    b5c8:	2301      	movs	r3, #1
    b5ca:	40b3      	lsls	r3, r6
    b5cc:	ea6f 0803 	mvn.w	r8, r3
    b5d0:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b5d4:	7b23      	ldrb	r3, [r4, #12]
    b5d6:	2b00      	cmp	r3, #0
    b5d8:	d0ee      	beq.n	b5b8 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    b5da:	0133      	lsls	r3, r6, #4
    b5dc:	4a06      	ldr	r2, [pc, #24]	; (b5f8 <activate_foreach_backend+0x60>)
    b5de:	58d3      	ldr	r3, [r2, r3]
    b5e0:	691b      	ldr	r3, [r3, #16]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d0dd      	beq.n	b5a2 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    b5e6:	4620      	mov	r0, r4
    b5e8:	4798      	blx	r3
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d1e4      	bne.n	b5b8 <activate_foreach_backend+0x20>
    b5ee:	e7d8      	b.n	b5a2 <activate_foreach_backend+0xa>
}
    b5f0:	4638      	mov	r0, r7
    b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5f6:	bf00      	nop
    b5f8:	00019a24 	.word	0x00019a24

0000b5fc <z_log_init>:
{
    b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b600:	4680      	mov	r8, r0
    b602:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b604:	4b20      	ldr	r3, [pc, #128]	; (b688 <z_log_init+0x8c>)
    b606:	f3bf 8f5b 	dmb	ish
    b60a:	e853 5f00 	ldrex	r5, [r3]
    b60e:	1c6a      	adds	r2, r5, #1
    b610:	e843 2100 	strex	r1, r2, [r3]
    b614:	2900      	cmp	r1, #0
    b616:	d1f8      	bne.n	b60a <z_log_init+0xe>
    b618:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    b61c:	2d00      	cmp	r5, #0
    b61e:	d12f      	bne.n	b680 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b620:	4c1a      	ldr	r4, [pc, #104]	; (b68c <z_log_init+0x90>)
	int i = 0;
    b622:	2600      	movs	r6, #0
    b624:	e007      	b.n	b636 <z_log_init+0x3a>
						   backend->cb->ctx,
    b626:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    b628:	2204      	movs	r2, #4
    b62a:	6819      	ldr	r1, [r3, #0]
    b62c:	4620      	mov	r0, r4
    b62e:	f000 fa6b 	bl	bb08 <log_backend_enable>
			i++;
    b632:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b634:	3410      	adds	r4, #16
    b636:	4b16      	ldr	r3, [pc, #88]	; (b690 <z_log_init+0x94>)
    b638:	429c      	cmp	r4, r3
    b63a:	d213      	bcs.n	b664 <z_log_init+0x68>
		if (backend->autostart) {
    b63c:	7b23      	ldrb	r3, [r4, #12]
    b63e:	2b00      	cmp	r3, #0
    b640:	d0f8      	beq.n	b634 <z_log_init+0x38>
	if (backend->api->init) {
    b642:	6823      	ldr	r3, [r4, #0]
    b644:	68db      	ldr	r3, [r3, #12]
    b646:	b10b      	cbz	r3, b64c <z_log_init+0x50>
		backend->api->init(backend);
    b648:	4620      	mov	r0, r4
    b64a:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    b64c:	6823      	ldr	r3, [r4, #0]
    b64e:	691b      	ldr	r3, [r3, #16]
    b650:	2b00      	cmp	r3, #0
    b652:	d0e8      	beq.n	b626 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
    b654:	4620      	mov	r0, r4
    b656:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b658:	2800      	cmp	r0, #0
    b65a:	d0e4      	beq.n	b626 <z_log_init+0x2a>
				mask |= BIT(i);
    b65c:	2301      	movs	r3, #1
    b65e:	40b3      	lsls	r3, r6
    b660:	431d      	orrs	r5, r3
    b662:	e7e6      	b.n	b632 <z_log_init+0x36>
	if (blocking) {
    b664:	f1b8 0f00 	cmp.w	r8, #0
    b668:	d00b      	beq.n	b682 <z_log_init+0x86>
		while (mask) {
    b66a:	b155      	cbz	r5, b682 <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
    b66c:	4628      	mov	r0, r5
    b66e:	f7ff ff93 	bl	b598 <activate_foreach_backend>
    b672:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b674:	2f00      	cmp	r7, #0
    b676:	d0f8      	beq.n	b66a <z_log_init+0x6e>
				k_msleep(10);
    b678:	200a      	movs	r0, #10
    b67a:	f00b f935 	bl	168e8 <k_msleep>
    b67e:	e7f4      	b.n	b66a <z_log_init+0x6e>
		return 0;
    b680:	2500      	movs	r5, #0
}
    b682:	4628      	mov	r0, r5
    b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b688:	20001e5c 	.word	0x20001e5c
    b68c:	00019a24 	.word	0x00019a24
    b690:	00019a44 	.word	0x00019a44

0000b694 <thread_set>:
{
    b694:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    b696:	4b06      	ldr	r3, [pc, #24]	; (b6b0 <thread_set+0x1c>)
    b698:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b69a:	b118      	cbz	r0, b6a4 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    b69c:	4b05      	ldr	r3, [pc, #20]	; (b6b4 <thread_set+0x20>)
    b69e:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    b6a0:	2b09      	cmp	r3, #9
    b6a2:	dc00      	bgt.n	b6a6 <thread_set+0x12>
}
    b6a4:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b6a6:	4804      	ldr	r0, [pc, #16]	; (b6b8 <thread_set+0x24>)
    b6a8:	f008 fed8 	bl	1445c <z_impl_k_sem_give>
}
    b6ac:	e7fa      	b.n	b6a4 <thread_set+0x10>
    b6ae:	bf00      	nop
    b6b0:	20001e50 	.word	0x20001e50
    b6b4:	20001e58 	.word	0x20001e58
    b6b8:	20000434 	.word	0x20000434

0000b6bc <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    b6bc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b6be:	4802      	ldr	r0, [pc, #8]	; (b6c8 <log_process_thread_timer_expiry_fn+0xc>)
    b6c0:	f008 fecc 	bl	1445c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    b6c4:	bd08      	pop	{r3, pc}
    b6c6:	bf00      	nop
    b6c8:	20000434 	.word	0x20000434

0000b6cc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    b6cc:	b530      	push	{r4, r5, lr}
    b6ce:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    b6d0:	2200      	movs	r2, #0
    b6d2:	490f      	ldr	r1, [pc, #60]	; (b710 <enable_logger+0x44>)
    b6d4:	480f      	ldr	r0, [pc, #60]	; (b714 <enable_logger+0x48>)
    b6d6:	f00d fe31 	bl	1933c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b6da:	4d0f      	ldr	r5, [pc, #60]	; (b718 <enable_logger+0x4c>)
    b6dc:	2200      	movs	r2, #0
    b6de:	2300      	movs	r3, #0
    b6e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b6e4:	2400      	movs	r4, #0
    b6e6:	9404      	str	r4, [sp, #16]
    b6e8:	230e      	movs	r3, #14
    b6ea:	9303      	str	r3, [sp, #12]
    b6ec:	9402      	str	r4, [sp, #8]
    b6ee:	9401      	str	r4, [sp, #4]
    b6f0:	9400      	str	r4, [sp, #0]
    b6f2:	4b0a      	ldr	r3, [pc, #40]	; (b71c <enable_logger+0x50>)
    b6f4:	f44f 7240 	mov.w	r2, #768	; 0x300
    b6f8:	4909      	ldr	r1, [pc, #36]	; (b720 <enable_logger+0x54>)
    b6fa:	4628      	mov	r0, r5
    b6fc:	f00d f9a4 	bl	18a48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    b700:	4908      	ldr	r1, [pc, #32]	; (b724 <enable_logger+0x58>)
    b702:	4628      	mov	r0, r5
    b704:	f008 fcbe 	bl	14084 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    b708:	4620      	mov	r0, r4
    b70a:	b009      	add	sp, #36	; 0x24
    b70c:	bd30      	pop	{r4, r5, pc}
    b70e:	bf00      	nop
    b710:	0000b6bd 	.word	0x0000b6bd
    b714:	200016a0 	.word	0x200016a0
    b718:	200011e0 	.word	0x200011e0
    b71c:	0000ba69 	.word	0x0000ba69
    b720:	20002ac0 	.word	0x20002ac0
    b724:	00019c28 	.word	0x00019c28

0000b728 <log_format_func_t_get>:
}
    b728:	4b01      	ldr	r3, [pc, #4]	; (b730 <log_format_func_t_get+0x8>)
    b72a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b72e:	4770      	bx	lr
    b730:	00019c44 	.word	0x00019c44

0000b734 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    b734:	b148      	cbz	r0, b74a <log_set_timestamp_func+0x16>
{
    b736:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    b738:	4a05      	ldr	r2, [pc, #20]	; (b750 <log_set_timestamp_func+0x1c>)
    b73a:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    b73c:	4b05      	ldr	r3, [pc, #20]	; (b754 <log_set_timestamp_func+0x20>)
    b73e:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    b740:	4608      	mov	r0, r1
    b742:	f000 fcbb 	bl	c0bc <log_output_timestamp_freq_set>
	return 0;
    b746:	2000      	movs	r0, #0
}
    b748:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b74a:	f06f 0015 	mvn.w	r0, #21
}
    b74e:	4770      	bx	lr
    b750:	20000300 	.word	0x20000300
    b754:	20001e4c 	.word	0x20001e4c

0000b758 <z_log_notify_backend_enabled>:
{
    b758:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    b75a:	4b05      	ldr	r3, [pc, #20]	; (b770 <z_log_notify_backend_enabled+0x18>)
    b75c:	781b      	ldrb	r3, [r3, #0]
    b75e:	b11b      	cbz	r3, b768 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    b760:	4b03      	ldr	r3, [pc, #12]	; (b770 <z_log_notify_backend_enabled+0x18>)
    b762:	2201      	movs	r2, #1
    b764:	701a      	strb	r2, [r3, #0]
}
    b766:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    b768:	4802      	ldr	r0, [pc, #8]	; (b774 <z_log_notify_backend_enabled+0x1c>)
    b76a:	f008 fe77 	bl	1445c <z_impl_k_sem_give>
}
    b76e:	e7f7      	b.n	b760 <z_log_notify_backend_enabled+0x8>
    b770:	20002640 	.word	0x20002640
    b774:	20000434 	.word	0x20000434

0000b778 <z_log_dropped>:
    b778:	4b0d      	ldr	r3, [pc, #52]	; (b7b0 <z_log_dropped+0x38>)
    b77a:	f3bf 8f5b 	dmb	ish
    b77e:	e853 1f00 	ldrex	r1, [r3]
    b782:	3101      	adds	r1, #1
    b784:	e843 1200 	strex	r2, r1, [r3]
    b788:	2a00      	cmp	r2, #0
    b78a:	d1f8      	bne.n	b77e <z_log_dropped+0x6>
    b78c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    b790:	b900      	cbnz	r0, b794 <z_log_dropped+0x1c>
}
    b792:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b794:	4b07      	ldr	r3, [pc, #28]	; (b7b4 <z_log_dropped+0x3c>)
    b796:	f3bf 8f5b 	dmb	ish
    b79a:	e853 1f00 	ldrex	r1, [r3]
    b79e:	3901      	subs	r1, #1
    b7a0:	e843 1200 	strex	r2, r1, [r3]
    b7a4:	2a00      	cmp	r2, #0
    b7a6:	d1f8      	bne.n	b79a <z_log_dropped+0x22>
    b7a8:	f3bf 8f5b 	dmb	ish
    b7ac:	e7f1      	b.n	b792 <z_log_dropped+0x1a>
    b7ae:	bf00      	nop
    b7b0:	20001e54 	.word	0x20001e54
    b7b4:	20001e58 	.word	0x20001e58

0000b7b8 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b7b8:	4b06      	ldr	r3, [pc, #24]	; (b7d4 <z_log_dropped_read_and_clear+0x1c>)
}
    b7ba:	2000      	movs	r0, #0
    b7bc:	4601      	mov	r1, r0
    b7be:	f3bf 8f5b 	dmb	ish
    b7c2:	e853 0f00 	ldrex	r0, [r3]
    b7c6:	e843 1200 	strex	r2, r1, [r3]
    b7ca:	2a00      	cmp	r2, #0
    b7cc:	d1f9      	bne.n	b7c2 <z_log_dropped_read_and_clear+0xa>
    b7ce:	f3bf 8f5b 	dmb	ish
    b7d2:	4770      	bx	lr
    b7d4:	20001e54 	.word	0x20001e54

0000b7d8 <dropped_notify>:
{
    b7d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    b7da:	f7ff ffed 	bl	b7b8 <z_log_dropped_read_and_clear>
    b7de:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b7e0:	4c09      	ldr	r4, [pc, #36]	; (b808 <dropped_notify+0x30>)
    b7e2:	e000      	b.n	b7e6 <dropped_notify+0xe>
    b7e4:	3410      	adds	r4, #16
    b7e6:	4b09      	ldr	r3, [pc, #36]	; (b80c <dropped_notify+0x34>)
    b7e8:	429c      	cmp	r4, r3
    b7ea:	d20b      	bcs.n	b804 <dropped_notify+0x2c>
	return backend->cb->active;
    b7ec:	6863      	ldr	r3, [r4, #4]
    b7ee:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d0f7      	beq.n	b7e4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    b7f4:	6823      	ldr	r3, [r4, #0]
    b7f6:	685b      	ldr	r3, [r3, #4]
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	d0f3      	beq.n	b7e4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    b7fc:	4629      	mov	r1, r5
    b7fe:	4620      	mov	r0, r4
    b800:	4798      	blx	r3
    b802:	e7ef      	b.n	b7e4 <dropped_notify+0xc>
}
    b804:	bd38      	pop	{r3, r4, r5, pc}
    b806:	bf00      	nop
    b808:	00019a24 	.word	0x00019a24
    b80c:	00019a44 	.word	0x00019a44

0000b810 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    b810:	4b03      	ldr	r3, [pc, #12]	; (b820 <z_log_dropped_pending+0x10>)
    b812:	6818      	ldr	r0, [r3, #0]
}
    b814:	2800      	cmp	r0, #0
    b816:	bfd4      	ite	le
    b818:	2000      	movle	r0, #0
    b81a:	2001      	movgt	r0, #1
    b81c:	4770      	bx	lr
    b81e:	bf00      	nop
    b820:	20001e54 	.word	0x20001e54

0000b824 <z_log_msg_init>:
{
    b824:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    b826:	4c04      	ldr	r4, [pc, #16]	; (b838 <z_log_msg_init+0x14>)
    b828:	4904      	ldr	r1, [pc, #16]	; (b83c <z_log_msg_init+0x18>)
    b82a:	4620      	mov	r0, r4
    b82c:	f00a fea5 	bl	1657a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    b830:	4b03      	ldr	r3, [pc, #12]	; (b840 <z_log_msg_init+0x1c>)
    b832:	601c      	str	r4, [r3, #0]
}
    b834:	bd10      	pop	{r4, pc}
    b836:	bf00      	nop
    b838:	200003c8 	.word	0x200003c8
    b83c:	00019c30 	.word	0x00019c30
    b840:	20001e48 	.word	0x20001e48

0000b844 <log_core_init>:
{
    b844:	b508      	push	{r3, lr}
	panic_mode = false;
    b846:	2300      	movs	r3, #0
    b848:	4a06      	ldr	r2, [pc, #24]	; (b864 <log_core_init+0x20>)
    b84a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    b84c:	4a06      	ldr	r2, [pc, #24]	; (b868 <log_core_init+0x24>)
    b84e:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    b850:	4a06      	ldr	r2, [pc, #24]	; (b86c <log_core_init+0x28>)
    b852:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    b854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b858:	4805      	ldr	r0, [pc, #20]	; (b870 <log_core_init+0x2c>)
    b85a:	f7ff ff6b 	bl	b734 <log_set_timestamp_func>
		z_log_msg_init();
    b85e:	f7ff ffe1 	bl	b824 <z_log_msg_init>
}
    b862:	bd08      	pop	{r3, pc}
    b864:	20002641 	.word	0x20002641
    b868:	20001e54 	.word	0x20001e54
    b86c:	20001e58 	.word	0x20001e58
    b870:	000168e1 	.word	0x000168e1

0000b874 <z_log_msg_alloc>:
{
    b874:	b508      	push	{r3, lr}
    b876:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    b878:	4801      	ldr	r0, [pc, #4]	; (b880 <z_log_msg_alloc+0xc>)
    b87a:	f00b f84b 	bl	16914 <msg_alloc>
}
    b87e:	bd08      	pop	{r3, pc}
    b880:	200003c8 	.word	0x200003c8

0000b884 <z_log_msg_local_claim>:
{
    b884:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    b886:	4802      	ldr	r0, [pc, #8]	; (b890 <z_log_msg_local_claim+0xc>)
    b888:	f00a ff5b 	bl	16742 <mpsc_pbuf_claim>
}
    b88c:	bd08      	pop	{r3, pc}
    b88e:	bf00      	nop
    b890:	200003c8 	.word	0x200003c8

0000b894 <z_log_msg_free>:
{
    b894:	b508      	push	{r3, lr}
    b896:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    b898:	4b02      	ldr	r3, [pc, #8]	; (b8a4 <z_log_msg_free+0x10>)
    b89a:	6818      	ldr	r0, [r3, #0]
    b89c:	f00b f840 	bl	16920 <msg_free>
}
    b8a0:	bd08      	pop	{r3, pc}
    b8a2:	bf00      	nop
    b8a4:	20001e48 	.word	0x20001e48

0000b8a8 <z_log_msg_pending>:
{
    b8a8:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    b8aa:	4802      	ldr	r0, [pc, #8]	; (b8b4 <z_log_msg_pending+0xc>)
    b8ac:	f00b f83c 	bl	16928 <msg_pending>
}
    b8b0:	bd08      	pop	{r3, pc}
    b8b2:	bf00      	nop
    b8b4:	200003c8 	.word	0x200003c8

0000b8b8 <z_impl_log_process>:
{
    b8b8:	b510      	push	{r4, lr}
    b8ba:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    b8bc:	2200      	movs	r2, #0
    b8be:	2300      	movs	r3, #0
    b8c0:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    b8c4:	4b28      	ldr	r3, [pc, #160]	; (b968 <z_impl_log_process+0xb0>)
    b8c6:	7818      	ldrb	r0, [r3, #0]
    b8c8:	b908      	cbnz	r0, b8ce <z_impl_log_process+0x16>
}
    b8ca:	b002      	add	sp, #8
    b8cc:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    b8ce:	4668      	mov	r0, sp
    b8d0:	f00b f842 	bl	16958 <z_log_msg_claim>
	if (msg) {
    b8d4:	4604      	mov	r4, r0
    b8d6:	b188      	cbz	r0, b8fc <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b8d8:	4b24      	ldr	r3, [pc, #144]	; (b96c <z_impl_log_process+0xb4>)
    b8da:	f3bf 8f5b 	dmb	ish
    b8de:	e853 1f00 	ldrex	r1, [r3]
    b8e2:	3901      	subs	r1, #1
    b8e4:	e843 1200 	strex	r2, r1, [r3]
    b8e8:	2a00      	cmp	r2, #0
    b8ea:	d1f8      	bne.n	b8de <z_impl_log_process+0x26>
    b8ec:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    b8f0:	4620      	mov	r0, r4
    b8f2:	f7ff fe1b 	bl	b52c <msg_process>
		z_log_msg_free(msg);
    b8f6:	4620      	mov	r0, r4
    b8f8:	f7ff ffcc 	bl	b894 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    b8fc:	f7ff ff88 	bl	b810 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    b900:	b958      	cbnz	r0, b91a <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    b902:	4a1b      	ldr	r2, [pc, #108]	; (b970 <z_impl_log_process+0xb8>)
    b904:	6813      	ldr	r3, [r2, #0]
    b906:	6851      	ldr	r1, [r2, #4]
    b908:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    b90c:	f141 0100 	adc.w	r1, r1, #0
    b910:	6013      	str	r3, [r2, #0]
    b912:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    b914:	f7ff ffc8 	bl	b8a8 <z_log_msg_pending>
    b918:	e7d7      	b.n	b8ca <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    b91a:	f00d fccc 	bl	192b6 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b91e:	014a      	lsls	r2, r1, #5
    b920:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    b924:	0143      	lsls	r3, r0, #5
    b926:	1a1b      	subs	r3, r3, r0
    b928:	eb62 0201 	sbc.w	r2, r2, r1
    b92c:	0092      	lsls	r2, r2, #2
    b92e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    b932:	009b      	lsls	r3, r3, #2
    b934:	181b      	adds	r3, r3, r0
    b936:	eb42 0201 	adc.w	r2, r2, r1
    b93a:	00d2      	lsls	r2, r2, #3
    b93c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    b940:	f3c3 3310 	ubfx	r3, r3, #12, #17
    b944:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    b948:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b94a:	4809      	ldr	r0, [pc, #36]	; (b970 <z_impl_log_process+0xb8>)
    b94c:	6801      	ldr	r1, [r0, #0]
    b94e:	6840      	ldr	r0, [r0, #4]
    b950:	1a5b      	subs	r3, r3, r1
    b952:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    b956:	f240 31e9 	movw	r1, #1001	; 0x3e9
    b95a:	428b      	cmp	r3, r1
    b95c:	f172 0200 	sbcs.w	r2, r2, #0
    b960:	d3cf      	bcc.n	b902 <z_impl_log_process+0x4a>
				dropped_notify();
    b962:	f7ff ff39 	bl	b7d8 <dropped_notify>
			if (unordered_pend) {
    b966:	e7cc      	b.n	b902 <z_impl_log_process+0x4a>
    b968:	20002640 	.word	0x20002640
    b96c:	20001e58 	.word	0x20001e58
    b970:	20001698 	.word	0x20001698

0000b974 <z_impl_log_panic>:
	if (panic_mode) {
    b974:	4b0f      	ldr	r3, [pc, #60]	; (b9b4 <z_impl_log_panic+0x40>)
    b976:	781b      	ldrb	r3, [r3, #0]
    b978:	b103      	cbz	r3, b97c <z_impl_log_panic+0x8>
    b97a:	4770      	bx	lr
{
    b97c:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    b97e:	2100      	movs	r1, #0
    b980:	2001      	movs	r0, #1
    b982:	f7ff fe3b 	bl	b5fc <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b986:	4c0c      	ldr	r4, [pc, #48]	; (b9b8 <z_impl_log_panic+0x44>)
    b988:	e000      	b.n	b98c <z_impl_log_panic+0x18>
    b98a:	3410      	adds	r4, #16
    b98c:	4b0b      	ldr	r3, [pc, #44]	; (b9bc <z_impl_log_panic+0x48>)
    b98e:	429c      	cmp	r4, r3
    b990:	d208      	bcs.n	b9a4 <z_impl_log_panic+0x30>
	return backend->cb->active;
    b992:	6863      	ldr	r3, [r4, #4]
    b994:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    b996:	2b00      	cmp	r3, #0
    b998:	d0f7      	beq.n	b98a <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    b99a:	6823      	ldr	r3, [r4, #0]
    b99c:	689b      	ldr	r3, [r3, #8]
    b99e:	4620      	mov	r0, r4
    b9a0:	4798      	blx	r3
}
    b9a2:	e7f2      	b.n	b98a <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    b9a4:	f7ff ff88 	bl	b8b8 <z_impl_log_process>
		while (log_process() == true) {
    b9a8:	2800      	cmp	r0, #0
    b9aa:	d1fb      	bne.n	b9a4 <z_impl_log_panic+0x30>
	panic_mode = true;
    b9ac:	4b01      	ldr	r3, [pc, #4]	; (b9b4 <z_impl_log_panic+0x40>)
    b9ae:	2201      	movs	r2, #1
    b9b0:	701a      	strb	r2, [r3, #0]
}
    b9b2:	bd10      	pop	{r4, pc}
    b9b4:	20002641 	.word	0x20002641
    b9b8:	00019a24 	.word	0x00019a24
    b9bc:	00019a44 	.word	0x00019a44

0000b9c0 <z_log_msg_post_finalize>:
{
    b9c0:	b510      	push	{r4, lr}
    b9c2:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b9c4:	4b1b      	ldr	r3, [pc, #108]	; (ba34 <z_log_msg_post_finalize+0x74>)
    b9c6:	f3bf 8f5b 	dmb	ish
    b9ca:	e853 2f00 	ldrex	r2, [r3]
    b9ce:	1c51      	adds	r1, r2, #1
    b9d0:	e843 1000 	strex	r0, r1, [r3]
    b9d4:	2800      	cmp	r0, #0
    b9d6:	d1f8      	bne.n	b9ca <z_log_msg_post_finalize+0xa>
    b9d8:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    b9dc:	4b16      	ldr	r3, [pc, #88]	; (ba38 <z_log_msg_post_finalize+0x78>)
    b9de:	781b      	ldrb	r3, [r3, #0]
    b9e0:	b963      	cbnz	r3, b9fc <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
    b9e2:	4b16      	ldr	r3, [pc, #88]	; (ba3c <z_log_msg_post_finalize+0x7c>)
    b9e4:	681b      	ldr	r3, [r3, #0]
    b9e6:	b1bb      	cbz	r3, ba18 <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
    b9e8:	b1c2      	cbz	r2, ba1c <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b9ea:	2a0a      	cmp	r2, #10
    b9ec:	d114      	bne.n	ba18 <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
    b9ee:	4814      	ldr	r0, [pc, #80]	; (ba40 <z_log_msg_post_finalize+0x80>)
    b9f0:	f00d fcb0 	bl	19354 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    b9f4:	4813      	ldr	r0, [pc, #76]	; (ba44 <z_log_msg_post_finalize+0x84>)
    b9f6:	f008 fd31 	bl	1445c <z_impl_k_sem_give>
}
    b9fa:	e00d      	b.n	ba18 <z_log_msg_post_finalize+0x58>
    b9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    ba00:	f3ef 8411 	mrs	r4, BASEPRI
    ba04:	f383 8812 	msr	BASEPRI_MAX, r3
    ba08:	f3bf 8f6f 	isb	sy
    ba0c:	f7ff ff54 	bl	b8b8 <z_impl_log_process>
	__asm__ volatile(
    ba10:	f384 8811 	msr	BASEPRI, r4
    ba14:	f3bf 8f6f 	isb	sy
    ba18:	b002      	add	sp, #8
    ba1a:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    ba1c:	2200      	movs	r2, #0
    ba1e:	2300      	movs	r3, #0
    ba20:	e9cd 2300 	strd	r2, r3, [sp]
    ba24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ba28:	2300      	movs	r3, #0
    ba2a:	4805      	ldr	r0, [pc, #20]	; (ba40 <z_log_msg_post_finalize+0x80>)
    ba2c:	f009 fc4c 	bl	152c8 <z_impl_k_timer_start>
    ba30:	e7f2      	b.n	ba18 <z_log_msg_post_finalize+0x58>
    ba32:	bf00      	nop
    ba34:	20001e58 	.word	0x20001e58
    ba38:	20002641 	.word	0x20002641
    ba3c:	20001e50 	.word	0x20001e50
    ba40:	200016a0 	.word	0x200016a0
    ba44:	20000434 	.word	0x20000434

0000ba48 <z_log_msg_commit>:
{
    ba48:	b510      	push	{r4, lr}
    ba4a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    ba4c:	4b04      	ldr	r3, [pc, #16]	; (ba60 <z_log_msg_commit+0x18>)
    ba4e:	681b      	ldr	r3, [r3, #0]
    ba50:	4798      	blx	r3
    ba52:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    ba54:	4621      	mov	r1, r4
    ba56:	4803      	ldr	r0, [pc, #12]	; (ba64 <z_log_msg_commit+0x1c>)
    ba58:	f00a ff82 	bl	16960 <msg_commit>
}
    ba5c:	bd10      	pop	{r4, pc}
    ba5e:	bf00      	nop
    ba60:	20000300 	.word	0x20000300
    ba64:	200003c8 	.word	0x200003c8

0000ba68 <log_process_thread_func>:
{
    ba68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    ba6c:	2100      	movs	r1, #0
    ba6e:	4608      	mov	r0, r1
    ba70:	f7ff fdc4 	bl	b5fc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ba74:	4680      	mov	r8, r0
    ba76:	b140      	cbz	r0, ba8a <log_process_thread_func+0x22>
    ba78:	f240 6667 	movw	r6, #1639	; 0x667
    ba7c:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    ba7e:	f009 fa11 	bl	14ea4 <z_impl_z_current_get>
	thread_set(k_current_get());
    ba82:	f7ff fe07 	bl	b694 <thread_set>
	bool processed_any = false;
    ba86:	2500      	movs	r5, #0
    ba88:	e015      	b.n	bab6 <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ba8a:	f04f 36ff 	mov.w	r6, #4294967295
    ba8e:	f04f 37ff 	mov.w	r7, #4294967295
    ba92:	e7f4      	b.n	ba7e <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    ba94:	4640      	mov	r0, r8
    ba96:	f7ff fd7f 	bl	b598 <activate_foreach_backend>
			if (!activate_mask) {
    ba9a:	4680      	mov	r8, r0
    ba9c:	b970      	cbnz	r0, babc <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    ba9e:	f04f 36ff 	mov.w	r6, #4294967295
    baa2:	f04f 37ff 	mov.w	r7, #4294967295
    baa6:	e009      	b.n	babc <log_process_thread_func+0x54>
    baa8:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    baaa:	4632      	mov	r2, r6
    baac:	463b      	mov	r3, r7
    baae:	4809      	ldr	r0, [pc, #36]	; (bad4 <log_process_thread_func+0x6c>)
    bab0:	f008 fcfc 	bl	144ac <z_impl_k_sem_take>
{
    bab4:	4625      	mov	r5, r4
		if (activate_mask) {
    bab6:	f1b8 0f00 	cmp.w	r8, #0
    baba:	d1eb      	bne.n	ba94 <log_process_thread_func+0x2c>
    babc:	f7ff fefc 	bl	b8b8 <z_impl_log_process>
		if (log_process() == false) {
    bac0:	4604      	mov	r4, r0
    bac2:	2800      	cmp	r0, #0
    bac4:	d1f6      	bne.n	bab4 <log_process_thread_func+0x4c>
			if (processed_any) {
    bac6:	2d00      	cmp	r5, #0
    bac8:	d0ee      	beq.n	baa8 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    baca:	2100      	movs	r1, #0
    bacc:	4608      	mov	r0, r1
    bace:	f7ff fd4b 	bl	b568 <log_backend_notify_all>
    bad2:	e7ea      	b.n	baaa <log_process_thread_func+0x42>
    bad4:	20000434 	.word	0x20000434

0000bad8 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    bad8:	4802      	ldr	r0, [pc, #8]	; (bae4 <log_src_cnt_get+0xc>)
    bada:	4b03      	ldr	r3, [pc, #12]	; (bae8 <log_src_cnt_get+0x10>)
    badc:	1ac0      	subs	r0, r0, r3
    bade:	08c0      	lsrs	r0, r0, #3
    bae0:	4770      	bx	lr
    bae2:	bf00      	nop
    bae4:	00019a24 	.word	0x00019a24
    bae8:	00019974 	.word	0x00019974

0000baec <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
    baec:	b510      	push	{r4, lr}
    baee:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    baf0:	f7ff fff2 	bl	bad8 <log_src_cnt_get>
    baf4:	42a0      	cmp	r0, r4
    baf6:	d903      	bls.n	bb00 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    baf8:	4b02      	ldr	r3, [pc, #8]	; (bb04 <log_source_name_get+0x18>)
    bafa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    bafe:	bd10      	pop	{r4, pc}
			return NULL;
    bb00:	2000      	movs	r0, #0
    bb02:	e7fc      	b.n	bafe <log_source_name_get+0x12>
    bb04:	00019974 	.word	0x00019974

0000bb08 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    bb08:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    bb0a:	4b09      	ldr	r3, [pc, #36]	; (bb30 <log_backend_enable+0x28>)
    bb0c:	1ac3      	subs	r3, r0, r3
    bb0e:	111b      	asrs	r3, r3, #4
    bb10:	3301      	adds	r3, #1
	backend->cb->id = id;
    bb12:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bb16:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    bb1a:	6843      	ldr	r3, [r0, #4]
    bb1c:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    bb1e:	6843      	ldr	r3, [r0, #4]
    bb20:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    bb22:	6843      	ldr	r3, [r0, #4]
    bb24:	2201      	movs	r2, #1
    bb26:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    bb28:	f7ff fe16 	bl	b758 <z_log_notify_backend_enabled>
}
    bb2c:	bd08      	pop	{r3, pc}
    bb2e:	bf00      	nop
    bb30:	00019a24 	.word	0x00019a24

0000bb34 <cbprintf_package_copy>:
{
    bb34:	b500      	push	{lr}
    bb36:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    bb38:	9205      	str	r2, [sp, #20]
    bb3a:	9306      	str	r3, [sp, #24]
    bb3c:	2300      	movs	r3, #0
    bb3e:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    bb40:	b162      	cbz	r2, bb5c <cbprintf_package_copy+0x28>
    bb42:	4a07      	ldr	r2, [pc, #28]	; (bb60 <cbprintf_package_copy+0x2c>)
    bb44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bb46:	9302      	str	r3, [sp, #8]
    bb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb4a:	9301      	str	r3, [sp, #4]
    bb4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bb4e:	9300      	str	r3, [sp, #0]
    bb50:	ab05      	add	r3, sp, #20
    bb52:	f7fe fe79 	bl	a848 <cbprintf_package_convert>
}
    bb56:	b009      	add	sp, #36	; 0x24
    bb58:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    bb5c:	2200      	movs	r2, #0
    bb5e:	e7f1      	b.n	bb44 <cbprintf_package_copy+0x10>
    bb60:	00016971 	.word	0x00016971

0000bb64 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb68:	b08b      	sub	sp, #44	; 0x2c
    bb6a:	af04      	add	r7, sp, #16
    bb6c:	4605      	mov	r5, r0
    bb6e:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    bb70:	4688      	mov	r8, r1
	int inlen = desc.package_len;
    bb72:	f3c1 244a 	ubfx	r4, r1, #9, #11
	struct log_msg *msg;

	if (inlen > 0) {
    bb76:	2c00      	cmp	r4, #0
    bb78:	f000 808e 	beq.w	bc98 <z_impl_z_log_msg_static_create+0x134>
    bb7c:	4691      	mov	r9, r2
	struct z_cbprintf_buf_desc buf_desc = {
    bb7e:	2200      	movs	r2, #0
    bb80:	60fa      	str	r2, [r7, #12]
    bb82:	613a      	str	r2, [r7, #16]
    bb84:	617a      	str	r2, [r7, #20]
	return cbprintf_package_convert(in_packaged, in_len,
    bb86:	2304      	movs	r3, #4
    bb88:	9302      	str	r3, [sp, #8]
    bb8a:	18fb      	adds	r3, r7, r3
    bb8c:	9301      	str	r3, [sp, #4]
    bb8e:	230a      	movs	r3, #10
    bb90:	9300      	str	r3, [sp, #0]
    bb92:	f107 030c 	add.w	r3, r7, #12
    bb96:	4621      	mov	r1, r4
    bb98:	4648      	mov	r0, r9
    bb9a:	f7fe fe55 	bl	a848 <cbprintf_package_convert>

		len = cbprintf_package_copy(package, inlen,
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    bb9e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bba2:	d35d      	bcc.n	bc60 <z_impl_z_log_msg_static_create+0xfc>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    bba4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bba8:	466d      	mov	r5, sp
    bbaa:	2301      	movs	r3, #1
    bbac:	733b      	strb	r3, [r7, #12]
    bbae:	2303      	movs	r3, #3
    bbb0:	737b      	strb	r3, [r7, #13]
    bbb2:	b08a      	sub	sp, #40	; 0x28
    bbb4:	ac04      	add	r4, sp, #16
    bbb6:	f114 0210 	adds.w	r2, r4, #16
    bbba:	d01c      	beq.n	bbf6 <z_impl_z_log_msg_static_create+0x92>
    bbbc:	2016      	movs	r0, #22
    bbbe:	b142      	cbz	r2, bbd2 <z_impl_z_log_msg_static_create+0x6e>
    bbc0:	4603      	mov	r3, r0
    bbc2:	2804      	cmp	r0, #4
    bbc4:	dd01      	ble.n	bbca <z_impl_z_log_msg_static_create+0x66>
    bbc6:	4e3e      	ldr	r6, [pc, #248]	; (bcc0 <z_impl_z_log_msg_static_create+0x15c>)
    bbc8:	6166      	str	r6, [r4, #20]
    bbca:	2b08      	cmp	r3, #8
    bbcc:	dd01      	ble.n	bbd2 <z_impl_z_log_msg_static_create+0x6e>
    bbce:	4b3d      	ldr	r3, [pc, #244]	; (bcc4 <z_impl_z_log_msg_static_create+0x160>)
    bbd0:	61a3      	str	r3, [r4, #24]
    bbd2:	2301      	movs	r3, #1
    bbd4:	703b      	strb	r3, [r7, #0]
    bbd6:	2303      	movs	r3, #3
    bbd8:	707b      	strb	r3, [r7, #1]
    bbda:	b1ca      	cbz	r2, bc10 <z_impl_z_log_msg_static_create+0xac>
    bbdc:	4603      	mov	r3, r0
    bbde:	280c      	cmp	r0, #12
    bbe0:	dd00      	ble.n	bbe4 <z_impl_z_log_msg_static_create+0x80>
    bbe2:	61e1      	str	r1, [r4, #28]
    bbe4:	2b10      	cmp	r3, #16
    bbe6:	dd02      	ble.n	bbee <z_impl_z_log_msg_static_create+0x8a>
    bbe8:	f240 73ff 	movw	r3, #2047	; 0x7ff
    bbec:	6223      	str	r3, [r4, #32]
    bbee:	f104 0324 	add.w	r3, r4, #36	; 0x24
    bbf2:	2100      	movs	r1, #0
    bbf4:	e00a      	b.n	bc0c <z_impl_z_log_msg_static_create+0xa8>
    bbf6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    bbfa:	e7e0      	b.n	bbbe <z_impl_z_log_msg_static_create+0x5a>
    bbfc:	f101 0618 	add.w	r6, r1, #24
    bc00:	443e      	add	r6, r7
    bc02:	f816 6c18 	ldrb.w	r6, [r6, #-24]
    bc06:	f803 6b01 	strb.w	r6, [r3], #1
    bc0a:	3101      	adds	r1, #1
    bc0c:	2901      	cmp	r1, #1
    bc0e:	d9f5      	bls.n	bbfc <z_impl_z_log_msg_static_create+0x98>
    bc10:	2815      	cmp	r0, #21
    bc12:	dd22      	ble.n	bc5a <z_impl_z_log_msg_static_create+0xf6>
    bc14:	2316      	movs	r3, #22
    bc16:	b142      	cbz	r2, bc2a <z_impl_z_log_msg_static_create+0xc6>
    bc18:	2105      	movs	r1, #5
    bc1a:	7339      	strb	r1, [r7, #12]
    bc1c:	2100      	movs	r1, #0
    bc1e:	7379      	strb	r1, [r7, #13]
    bc20:	73b9      	strb	r1, [r7, #14]
    bc22:	2101      	movs	r1, #1
    bc24:	73f9      	strb	r1, [r7, #15]
    bc26:	68f8      	ldr	r0, [r7, #12]
    bc28:	6120      	str	r0, [r4, #16]
    bc2a:	2100      	movs	r1, #0
    bc2c:	f36f 0100 	bfc	r1, #0, #1
    bc30:	f36f 0141 	bfc	r1, #1, #1
    bc34:	f36f 0182 	bfc	r1, #2, #1
    bc38:	f36f 01c5 	bfc	r1, #3, #3
    bc3c:	2002      	movs	r0, #2
    bc3e:	f360 1188 	bfi	r1, r0, #6, #3
    bc42:	f3c3 030a 	ubfx	r3, r3, #0, #11
    bc46:	f363 2153 	bfi	r1, r3, #9, #11
    bc4a:	2300      	movs	r3, #0
    bc4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
    bc50:	481d      	ldr	r0, [pc, #116]	; (bcc8 <z_impl_z_log_msg_static_create+0x164>)
    bc52:	f00a feba 	bl	169ca <z_log_msg_static_create>
    bc56:	46ad      	mov	sp, r5
				pkg->fmt, (uint32_t)Z_LOG_MSG_MAX_PACKAGE);
			return;
    bc58:	e02d      	b.n	bcb6 <z_impl_z_log_msg_static_create+0x152>
			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    bc5a:	f06f 031b 	mvn.w	r3, #27
    bc5e:	e7da      	b.n	bc16 <z_impl_z_log_msg_static_create+0xb2>
		}
		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    bc60:	f360 2853 	bfi	r8, r0, #9, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    bc64:	f3c0 0a0a 	ubfx	sl, r0, #0, #11
    bc68:	eb0a 5018 	add.w	r0, sl, r8, lsr #20
    bc6c:	3017      	adds	r0, #23
    bc6e:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    bc72:	0880      	lsrs	r0, r0, #2
    bc74:	f7ff fdfe 	bl	b874 <z_log_msg_alloc>
		if (msg) {
    bc78:	4683      	mov	fp, r0
    bc7a:	b1b0      	cbz	r0, bcaa <z_impl_z_log_msg_static_create+0x146>
			len = cbprintf_package_copy(package, inlen,
    bc7c:	2304      	movs	r3, #4
    bc7e:	9302      	str	r3, [sp, #8]
    bc80:	18fb      	adds	r3, r7, r3
    bc82:	9301      	str	r3, [sp, #4]
    bc84:	230a      	movs	r3, #10
    bc86:	9300      	str	r3, [sp, #0]
    bc88:	4653      	mov	r3, sl
    bc8a:	f100 0210 	add.w	r2, r0, #16
    bc8e:	4621      	mov	r1, r4
    bc90:	4648      	mov	r0, r9
    bc92:	f7ff ff4f 	bl	bb34 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    bc96:	e008      	b.n	bcaa <z_impl_z_log_msg_static_create+0x146>
    bc98:	eb04 5411 	add.w	r4, r4, r1, lsr #20
    bc9c:	3417      	adds	r4, #23
    bc9e:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    bca2:	08a0      	lsrs	r0, r4, #2
    bca4:	f7ff fde6 	bl	b874 <z_log_msg_alloc>
    bca8:	4683      	mov	fp, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    bcaa:	4633      	mov	r3, r6
    bcac:	4642      	mov	r2, r8
    bcae:	4629      	mov	r1, r5
    bcb0:	4658      	mov	r0, fp
    bcb2:	f00a fe73 	bl	1699c <z_log_msg_finalize>
}
    bcb6:	371c      	adds	r7, #28
    bcb8:	46bd      	mov	sp, r7
    bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcbe:	bf00      	nop
    bcc0:	00019c64 	.word	0x00019c64
    bcc4:	00019ca8 	.word	0x00019ca8
    bcc8:	000199cc 	.word	0x000199cc

0000bccc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    bccc:	b40e      	push	{r1, r2, r3}
    bcce:	b500      	push	{lr}
    bcd0:	b084      	sub	sp, #16
    bcd2:	4601      	mov	r1, r0
    bcd4:	ab05      	add	r3, sp, #20
    bcd6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    bcda:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    bcdc:	2000      	movs	r0, #0
    bcde:	9000      	str	r0, [sp, #0]
    bce0:	4803      	ldr	r0, [pc, #12]	; (bcf0 <print_formatted+0x24>)
    bce2:	f7ff f955 	bl	af90 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    bce6:	b004      	add	sp, #16
    bce8:	f85d eb04 	ldr.w	lr, [sp], #4
    bcec:	b003      	add	sp, #12
    bcee:	4770      	bx	lr
    bcf0:	00016b01 	.word	0x00016b01

0000bcf4 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    bcf4:	b530      	push	{r4, r5, lr}
    bcf6:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_CUSTOM_TIMESTAMP);


	if (!format) {
    bcf8:	f011 0f44 	tst.w	r1, #68	; 0x44
    bcfc:	d005      	beq.n	bd0a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    bcfe:	4b1a      	ldr	r3, [pc, #104]	; (bd68 <timestamp_print+0x74>)
    bd00:	681c      	ldr	r4, [r3, #0]
    bd02:	b934      	cbnz	r4, bd12 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    bd04:	2000      	movs	r0, #0
	}

	return length;
}
    bd06:	b005      	add	sp, #20
    bd08:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    bd0a:	4918      	ldr	r1, [pc, #96]	; (bd6c <timestamp_print+0x78>)
    bd0c:	f7ff ffde 	bl	bccc <print_formatted>
    bd10:	e7f9      	b.n	bd06 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    bd12:	4b17      	ldr	r3, [pc, #92]	; (bd70 <timestamp_print+0x7c>)
    bd14:	6819      	ldr	r1, [r3, #0]
    bd16:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    bd1a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    bd1e:	4a15      	ldr	r2, [pc, #84]	; (bd74 <timestamp_print+0x80>)
    bd20:	fba2 320c 	umull	r3, r2, r2, ip
    bd24:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    bd26:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    bd2a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    bd2e:	4b12      	ldr	r3, [pc, #72]	; (bd78 <timestamp_print+0x84>)
    bd30:	fba3 530e 	umull	r5, r3, r3, lr
    bd34:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    bd36:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    bd3a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    bd3e:	fb0c f101 	mul.w	r1, ip, r1
    bd42:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bd46:	fb04 1115 	mls	r1, r4, r5, r1
    bd4a:	fb0c f101 	mul.w	r1, ip, r1
    bd4e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    bd52:	9102      	str	r1, [sp, #8]
    bd54:	9501      	str	r5, [sp, #4]
    bd56:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    bd5a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    bd5e:	9100      	str	r1, [sp, #0]
    bd60:	4906      	ldr	r1, [pc, #24]	; (bd7c <timestamp_print+0x88>)
    bd62:	f7ff ffb3 	bl	bccc <print_formatted>
    bd66:	e7ce      	b.n	bd06 <timestamp_print+0x12>
    bd68:	20001e64 	.word	0x20001e64
    bd6c:	00019cc8 	.word	0x00019cc8
    bd70:	20001e60 	.word	0x20001e60
    bd74:	91a2b3c5 	.word	0x91a2b3c5
    bd78:	88888889 	.word	0x88888889
    bd7c:	00019cd4 	.word	0x00019cd4

0000bd80 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    bd80:	b161      	cbz	r1, bd9c <color_print+0x1c>
{
    bd82:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    bd84:	b12a      	cbz	r2, bd92 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    bd86:	4a06      	ldr	r2, [pc, #24]	; (bda0 <color_print+0x20>)
    bd88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bd8c:	b912      	cbnz	r2, bd94 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    bd8e:	4a05      	ldr	r2, [pc, #20]	; (bda4 <color_print+0x24>)
    bd90:	e000      	b.n	bd94 <color_print+0x14>
    bd92:	4a04      	ldr	r2, [pc, #16]	; (bda4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    bd94:	4904      	ldr	r1, [pc, #16]	; (bda8 <color_print+0x28>)
    bd96:	f7ff ff99 	bl	bccc <print_formatted>
	}
}
    bd9a:	bd08      	pop	{r3, pc}
    bd9c:	4770      	bx	lr
    bd9e:	bf00      	nop
    bda0:	00019d74 	.word	0x00019d74
    bda4:	00019cf0 	.word	0x00019cf0
    bda8:	0001a67c 	.word	0x0001a67c

0000bdac <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdb0:	4605      	mov	r5, r0
    bdb2:	4617      	mov	r7, r2
    bdb4:	461e      	mov	r6, r3
    bdb6:	f8dd 8018 	ldr.w	r8, [sp, #24]
	int total = 0;

	if (level_on) {
    bdba:	b999      	cbnz	r1, bde4 <ids_print+0x38>
	int total = 0;
    bdbc:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    bdbe:	b12e      	cbz	r6, bdcc <ids_print+0x20>
		total += print_formatted(output, "%s/", domain);
    bdc0:	4632      	mov	r2, r6
    bdc2:	4912      	ldr	r1, [pc, #72]	; (be0c <ids_print+0x60>)
    bdc4:	4628      	mov	r0, r5
    bdc6:	f7ff ff81 	bl	bccc <print_formatted>
    bdca:	4404      	add	r4, r0
	}

	if (source) {
    bdcc:	f1b8 0f00 	cmp.w	r8, #0
    bdd0:	d017      	beq.n	be02 <ids_print+0x56>
		total += print_formatted(output,
    bdd2:	b187      	cbz	r7, bdf6 <ids_print+0x4a>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    bdd4:	2301      	movs	r3, #1
    bdd6:	9a07      	ldr	r2, [sp, #28]
    bdd8:	4093      	lsls	r3, r2
				(func_on &&
    bdda:	f013 0f1e 	tst.w	r3, #30
    bdde:	d113      	bne.n	be08 <ids_print+0x5c>
		total += print_formatted(output,
    bde0:	490b      	ldr	r1, [pc, #44]	; (be10 <ids_print+0x64>)
    bde2:	e009      	b.n	bdf8 <ids_print+0x4c>
		total += print_formatted(output, "<%s> ", severity[level]);
    bde4:	4b0b      	ldr	r3, [pc, #44]	; (be14 <ids_print+0x68>)
    bde6:	9a07      	ldr	r2, [sp, #28]
    bde8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    bdec:	490a      	ldr	r1, [pc, #40]	; (be18 <ids_print+0x6c>)
    bdee:	f7ff ff6d 	bl	bccc <print_formatted>
    bdf2:	4604      	mov	r4, r0
    bdf4:	e7e3      	b.n	bdbe <ids_print+0x12>
		total += print_formatted(output,
    bdf6:	4906      	ldr	r1, [pc, #24]	; (be10 <ids_print+0x64>)
    bdf8:	4642      	mov	r2, r8
    bdfa:	4628      	mov	r0, r5
    bdfc:	f7ff ff66 	bl	bccc <print_formatted>
    be00:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    be02:	4620      	mov	r0, r4
    be04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    be08:	4904      	ldr	r1, [pc, #16]	; (be1c <ids_print+0x70>)
    be0a:	e7f5      	b.n	bdf8 <ids_print+0x4c>
    be0c:	00019d0c 	.word	0x00019d0c
    be10:	00019cfc 	.word	0x00019cfc
    be14:	00019d88 	.word	0x00019d88
    be18:	00019d04 	.word	0x00019d04
    be1c:	00019cf8 	.word	0x00019cf8

0000be20 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be24:	b085      	sub	sp, #20
    be26:	4605      	mov	r5, r0
    be28:	460c      	mov	r4, r1
    be2a:	4616      	mov	r6, r2
    be2c:	9303      	str	r3, [sp, #12]
    be2e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    be32:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    be36:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    be3a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    be3e:	f00a fd95 	bl	1696c <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    be42:	b1d8      	cbz	r0, be7c <prefix_print+0x5c>
    be44:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    be46:	4912      	ldr	r1, [pc, #72]	; (be90 <prefix_print+0x70>)
    be48:	4628      	mov	r0, r5
    be4a:	f7ff ff3f 	bl	bccc <print_formatted>
    be4e:	4607      	mov	r7, r0
	}

	if (stamp) {
    be50:	f1bb 0f00 	cmp.w	fp, #0
    be54:	d114      	bne.n	be80 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    be56:	4642      	mov	r2, r8
    be58:	4651      	mov	r1, sl
    be5a:	4628      	mov	r0, r5
    be5c:	f00a fe10 	bl	16a80 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    be60:	f8cd 8004 	str.w	r8, [sp, #4]
    be64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    be66:	9300      	str	r3, [sp, #0]
    be68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    be6a:	4632      	mov	r2, r6
    be6c:	4649      	mov	r1, r9
    be6e:	4628      	mov	r0, r5
    be70:	f7ff ff9c 	bl	bdac <ids_print>

	return length;
}
    be74:	4438      	add	r0, r7
    be76:	b005      	add	sp, #20
    be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    be7c:	2700      	movs	r7, #0
    be7e:	e7e7      	b.n	be50 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    be80:	9a03      	ldr	r2, [sp, #12]
    be82:	4621      	mov	r1, r4
    be84:	4628      	mov	r0, r5
    be86:	f7ff ff35 	bl	bcf4 <timestamp_print>
    be8a:	4407      	add	r7, r0
    be8c:	e7e3      	b.n	be56 <prefix_print+0x36>
    be8e:	bf00      	nop
    be90:	00019d10 	.word	0x00019d10

0000be94 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    be94:	f011 0f10 	tst.w	r1, #16
    be98:	d10b      	bne.n	beb2 <newline_print+0x1e>
{
    be9a:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    be9c:	f011 0f20 	tst.w	r1, #32
    bea0:	d003      	beq.n	beaa <newline_print+0x16>
		print_formatted(ctx, "\n");
    bea2:	4904      	ldr	r1, [pc, #16]	; (beb4 <newline_print+0x20>)
    bea4:	f7ff ff12 	bl	bccc <print_formatted>
}
    bea8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    beaa:	4903      	ldr	r1, [pc, #12]	; (beb8 <newline_print+0x24>)
    beac:	f7ff ff0e 	bl	bccc <print_formatted>
    beb0:	e7fa      	b.n	bea8 <newline_print+0x14>
    beb2:	4770      	bx	lr
    beb4:	0001b430 	.word	0x0001b430
    beb8:	00019d14 	.word	0x00019d14

0000bebc <hexdump_line_print>:
{
    bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bec0:	4605      	mov	r5, r0
    bec2:	460f      	mov	r7, r1
    bec4:	4616      	mov	r6, r2
    bec6:	4698      	mov	r8, r3
	newline_print(output, flags);
    bec8:	9906      	ldr	r1, [sp, #24]
    beca:	f7ff ffe3 	bl	be94 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    bece:	2400      	movs	r4, #0
    bed0:	4544      	cmp	r4, r8
    bed2:	da05      	bge.n	bee0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    bed4:	4923      	ldr	r1, [pc, #140]	; (bf64 <hexdump_line_print+0xa8>)
    bed6:	4628      	mov	r0, r5
    bed8:	f7ff fef8 	bl	bccc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    bedc:	3401      	adds	r4, #1
    bede:	e7f7      	b.n	bed0 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bee0:	2400      	movs	r4, #0
    bee2:	e009      	b.n	bef8 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    bee4:	491f      	ldr	r1, [pc, #124]	; (bf64 <hexdump_line_print+0xa8>)
    bee6:	4628      	mov	r0, r5
    bee8:	f7ff fef0 	bl	bccc <print_formatted>
    beec:	e00b      	b.n	bf06 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    beee:	491e      	ldr	r1, [pc, #120]	; (bf68 <hexdump_line_print+0xac>)
    bef0:	4628      	mov	r0, r5
    bef2:	f7ff feeb 	bl	bccc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bef6:	3401      	adds	r4, #1
    bef8:	2c0f      	cmp	r4, #15
    befa:	dc0c      	bgt.n	bf16 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    befc:	2c00      	cmp	r4, #0
    befe:	dd02      	ble.n	bf06 <hexdump_line_print+0x4a>
    bf00:	f014 0f07 	tst.w	r4, #7
    bf04:	d0ee      	beq.n	bee4 <hexdump_line_print+0x28>
		if (i < length) {
    bf06:	42b4      	cmp	r4, r6
    bf08:	d2f1      	bcs.n	beee <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    bf0a:	5d3a      	ldrb	r2, [r7, r4]
    bf0c:	4917      	ldr	r1, [pc, #92]	; (bf6c <hexdump_line_print+0xb0>)
    bf0e:	4628      	mov	r0, r5
    bf10:	f7ff fedc 	bl	bccc <print_formatted>
    bf14:	e7ef      	b.n	bef6 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    bf16:	4916      	ldr	r1, [pc, #88]	; (bf70 <hexdump_line_print+0xb4>)
    bf18:	4628      	mov	r0, r5
    bf1a:	f7ff fed7 	bl	bccc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bf1e:	2400      	movs	r4, #0
    bf20:	e009      	b.n	bf36 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    bf22:	4910      	ldr	r1, [pc, #64]	; (bf64 <hexdump_line_print+0xa8>)
    bf24:	4628      	mov	r0, r5
    bf26:	f7ff fed1 	bl	bccc <print_formatted>
    bf2a:	e00b      	b.n	bf44 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    bf2c:	4911      	ldr	r1, [pc, #68]	; (bf74 <hexdump_line_print+0xb8>)
    bf2e:	4628      	mov	r0, r5
    bf30:	f7ff fecc 	bl	bccc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bf34:	3401      	adds	r4, #1
    bf36:	2c0f      	cmp	r4, #15
    bf38:	dc12      	bgt.n	bf60 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    bf3a:	2c00      	cmp	r4, #0
    bf3c:	dd02      	ble.n	bf44 <hexdump_line_print+0x88>
    bf3e:	f014 0f07 	tst.w	r4, #7
    bf42:	d0ee      	beq.n	bf22 <hexdump_line_print+0x66>
		if (i < length) {
    bf44:	42b4      	cmp	r4, r6
    bf46:	d206      	bcs.n	bf56 <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
    bf48:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    bf4a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    bf4e:	2b5e      	cmp	r3, #94	; 0x5e
    bf50:	d9ec      	bls.n	bf2c <hexdump_line_print+0x70>
    bf52:	222e      	movs	r2, #46	; 0x2e
    bf54:	e7ea      	b.n	bf2c <hexdump_line_print+0x70>
			print_formatted(output, " ");
    bf56:	4903      	ldr	r1, [pc, #12]	; (bf64 <hexdump_line_print+0xa8>)
    bf58:	4628      	mov	r0, r5
    bf5a:	f7ff feb7 	bl	bccc <print_formatted>
    bf5e:	e7e9      	b.n	bf34 <hexdump_line_print+0x78>
}
    bf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf64:	00019d08 	.word	0x00019d08
    bf68:	00019d20 	.word	0x00019d20
    bf6c:	00019d18 	.word	0x00019d18
    bf70:	00019d24 	.word	0x00019d24
    bf74:	00019d28 	.word	0x00019d28

0000bf78 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    bf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf7c:	b084      	sub	sp, #16
    bf7e:	4604      	mov	r4, r0
    bf80:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    bf84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bf86:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    bf88:	b995      	cbnz	r5, bfb0 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bf8a:	2b01      	cmp	r3, #1
    bf8c:	d01b      	beq.n	bfc6 <log_output_process+0x4e>
    bf8e:	4817      	ldr	r0, [pc, #92]	; (bfec <log_output_process+0x74>)
		prefix_offset = 0;
    bf90:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    bf94:	b127      	cbz	r7, bfa0 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    bf96:	463b      	mov	r3, r7
    bf98:	4622      	mov	r2, r4
    bf9a:	4915      	ldr	r1, [pc, #84]	; (bff0 <log_output_process+0x78>)
    bf9c:	f009 fb25 	bl	155ea <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    bfa0:	b9ae      	cbnz	r6, bfce <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    bfa2:	b9ed      	cbnz	r5, bfe0 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    bfa4:	4620      	mov	r0, r4
    bfa6:	f00a fd9e 	bl	16ae6 <log_output_flush>
}
    bfaa:	b004      	add	sp, #16
    bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    bfb0:	9502      	str	r5, [sp, #8]
    bfb2:	9301      	str	r3, [sp, #4]
    bfb4:	9200      	str	r2, [sp, #0]
    bfb6:	460b      	mov	r3, r1
    bfb8:	2200      	movs	r2, #0
    bfba:	990e      	ldr	r1, [sp, #56]	; 0x38
    bfbc:	f7ff ff30 	bl	be20 <prefix_print>
    bfc0:	4680      	mov	r8, r0
		cb = out_func;
    bfc2:	480c      	ldr	r0, [pc, #48]	; (bff4 <log_output_process+0x7c>)
    bfc4:	e7e6      	b.n	bf94 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bfc6:	480b      	ldr	r0, [pc, #44]	; (bff4 <log_output_process+0x7c>)
		prefix_offset = 0;
    bfc8:	f04f 0800 	mov.w	r8, #0
    bfcc:	e7e2      	b.n	bf94 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    bfce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bfd0:	9300      	str	r3, [sp, #0]
    bfd2:	4643      	mov	r3, r8
    bfd4:	4632      	mov	r2, r6
    bfd6:	990c      	ldr	r1, [sp, #48]	; 0x30
    bfd8:	4620      	mov	r0, r4
    bfda:	f00a fd69 	bl	16ab0 <log_msg_hexdump>
    bfde:	e7e0      	b.n	bfa2 <log_output_process+0x2a>
		postfix_print(output, flags, level);
    bfe0:	462a      	mov	r2, r5
    bfe2:	990e      	ldr	r1, [sp, #56]	; 0x38
    bfe4:	4620      	mov	r0, r4
    bfe6:	f00a fd57 	bl	16a98 <postfix_print>
    bfea:	e7db      	b.n	bfa4 <log_output_process+0x2c>
    bfec:	00016b39 	.word	0x00016b39
    bff0:	00016a71 	.word	0x00016a71
    bff4:	00016b01 	.word	0x00016b01

0000bff8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bffc:	b086      	sub	sp, #24
    bffe:	4605      	mov	r5, r0
    c000:	460c      	mov	r4, r1
    c002:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    c004:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    c008:	880e      	ldrh	r6, [r1, #0]
    c00a:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    c00e:	7808      	ldrb	r0, [r1, #0]
    c010:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    c014:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    c016:	b133      	cbz	r3, c026 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    c018:	4a11      	ldr	r2, [pc, #68]	; (c060 <log_output_msg_process+0x68>)
    c01a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    c01c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c020:	2900      	cmp	r1, #0
    c022:	da18      	bge.n	c056 <log_output_msg_process+0x5e>
    c024:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    c026:	4622      	mov	r2, r4
    c028:	f852 1b10 	ldr.w	r1, [r2], #16
    c02c:	f3c1 214a 	ubfx	r1, r1, #9, #11
	*len = msg->hdr.desc.data_len;
    c030:	8860      	ldrh	r0, [r4, #2]
    c032:	f3c0 100b 	ubfx	r0, r0, #4, #12
	return msg->data + msg->hdr.desc.package_len;
    c036:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    c038:	b901      	cbnz	r1, c03c <log_output_msg_process+0x44>
    c03a:	2200      	movs	r2, #0
    c03c:	9704      	str	r7, [sp, #16]
    c03e:	9003      	str	r0, [sp, #12]
    c040:	9402      	str	r4, [sp, #8]
    c042:	9201      	str	r2, [sp, #4]
    c044:	9600      	str	r6, [sp, #0]
    c046:	2200      	movs	r2, #0
    c048:	4641      	mov	r1, r8
    c04a:	4628      	mov	r0, r5
    c04c:	f7ff ff94 	bl	bf78 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    c050:	b006      	add	sp, #24
    c052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c056:	f7ff fd49 	bl	baec <log_source_name_get>
    c05a:	4603      	mov	r3, r0
    c05c:	e7e3      	b.n	c026 <log_output_msg_process+0x2e>
    c05e:	bf00      	nop
    c060:	00019974 	.word	0x00019974

0000c064 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    c064:	b570      	push	{r4, r5, r6, lr}
    c066:	b082      	sub	sp, #8
    c068:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    c06a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c06c:	f242 730f 	movw	r3, #9999	; 0x270f
    c070:	428b      	cmp	r3, r1
    c072:	bf28      	it	cs
    c074:	460b      	movcs	r3, r1
    c076:	4a0e      	ldr	r2, [pc, #56]	; (c0b0 <log_output_dropped_process+0x4c>)
    c078:	2105      	movs	r1, #5
    c07a:	4668      	mov	r0, sp
    c07c:	f009 fb38 	bl	156f0 <snprintk>
    c080:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    c082:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    c084:	685b      	ldr	r3, [r3, #4]
    c086:	220b      	movs	r2, #11
    c088:	490a      	ldr	r1, [pc, #40]	; (c0b4 <log_output_dropped_process+0x50>)
    c08a:	4628      	mov	r0, r5
    c08c:	f00a fce3 	bl	16a56 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    c090:	6863      	ldr	r3, [r4, #4]
    c092:	685b      	ldr	r3, [r3, #4]
    c094:	4632      	mov	r2, r6
    c096:	4669      	mov	r1, sp
    c098:	4628      	mov	r0, r5
    c09a:	f00a fcdc 	bl	16a56 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    c09e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    c0a0:	685b      	ldr	r3, [r3, #4]
    c0a2:	221b      	movs	r2, #27
    c0a4:	4904      	ldr	r1, [pc, #16]	; (c0b8 <log_output_dropped_process+0x54>)
    c0a6:	4628      	mov	r0, r5
    c0a8:	f00a fcd5 	bl	16a56 <buffer_write>
}
    c0ac:	b002      	add	sp, #8
    c0ae:	bd70      	pop	{r4, r5, r6, pc}
    c0b0:	0001ae18 	.word	0x0001ae18
    c0b4:	00019d48 	.word	0x00019d48
    c0b8:	00019d2c 	.word	0x00019d2c

0000c0bc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    c0bc:	4b07      	ldr	r3, [pc, #28]	; (c0dc <log_output_timestamp_freq_set+0x20>)
    c0be:	2201      	movs	r2, #1
    c0c0:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    c0c2:	e004      	b.n	c0ce <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    c0c4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    c0c6:	4a05      	ldr	r2, [pc, #20]	; (c0dc <log_output_timestamp_freq_set+0x20>)
    c0c8:	6813      	ldr	r3, [r2, #0]
    c0ca:	005b      	lsls	r3, r3, #1
    c0cc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    c0ce:	4b04      	ldr	r3, [pc, #16]	; (c0e0 <log_output_timestamp_freq_set+0x24>)
    c0d0:	4298      	cmp	r0, r3
    c0d2:	d8f7      	bhi.n	c0c4 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    c0d4:	4b03      	ldr	r3, [pc, #12]	; (c0e4 <log_output_timestamp_freq_set+0x28>)
    c0d6:	6018      	str	r0, [r3, #0]
}
    c0d8:	4770      	bx	lr
    c0da:	bf00      	nop
    c0dc:	20001e60 	.word	0x20001e60
    c0e0:	000f4240 	.word	0x000f4240
    c0e4:	20001e64 	.word	0x20001e64

0000c0e8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    c0e8:	4b03      	ldr	r3, [pc, #12]	; (c0f8 <log_backend_rtt_init+0x10>)
    c0ea:	2201      	movs	r2, #1
    c0ec:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    c0ee:	4b03      	ldr	r3, [pc, #12]	; (c0fc <log_backend_rtt_init+0x14>)
    c0f0:	4a03      	ldr	r2, [pc, #12]	; (c100 <log_backend_rtt_init+0x18>)
    c0f2:	601a      	str	r2, [r3, #0]
}
    c0f4:	4770      	bx	lr
    c0f6:	bf00      	nop
    c0f8:	20002642 	.word	0x20002642
    c0fc:	20001e90 	.word	0x20001e90
    c100:	20001e94 	.word	0x20001e94

0000c104 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c104:	4b01      	ldr	r3, [pc, #4]	; (c10c <format_set+0x8>)
    c106:	6019      	str	r1, [r3, #0]
	return 0;
}
    c108:	2000      	movs	r0, #0
    c10a:	4770      	bx	lr
    c10c:	20001e7c 	.word	0x20001e7c

0000c110 <on_failed_write>:
{
    c110:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    c112:	b918      	cbnz	r0, c11c <on_failed_write+0xc>
		host_present = false;
    c114:	4b07      	ldr	r3, [pc, #28]	; (c134 <on_failed_write+0x24>)
    c116:	2200      	movs	r2, #0
    c118:	701a      	strb	r2, [r3, #0]
}
    c11a:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    c11c:	4b06      	ldr	r3, [pc, #24]	; (c138 <on_failed_write+0x28>)
    c11e:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    c120:	b123      	cbz	r3, c12c <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    c122:	f241 3088 	movw	r0, #5000	; 0x1388
    c126:	f00d f8ca 	bl	192be <z_impl_k_busy_wait>
}
    c12a:	e7f6      	b.n	c11a <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    c12c:	2005      	movs	r0, #5
    c12e:	f00a fd12 	bl	16b56 <k_msleep>
}
    c132:	e7f2      	b.n	c11a <on_failed_write+0xa>
    c134:	20002642 	.word	0x20002642
    c138:	20002643 	.word	0x20002643

0000c13c <on_write>:
{
    c13c:	b538      	push	{r3, r4, r5, lr}
    c13e:	4604      	mov	r4, r0
	host_present = true;
    c140:	4b0a      	ldr	r3, [pc, #40]	; (c16c <on_write+0x30>)
    c142:	2201      	movs	r2, #1
    c144:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    c146:	4b0a      	ldr	r3, [pc, #40]	; (c170 <on_write+0x34>)
    c148:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    c14a:	b92b      	cbnz	r3, c158 <on_write+0x1c>
}
    c14c:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    c14e:	1e65      	subs	r5, r4, #1
    c150:	4620      	mov	r0, r4
    c152:	f7ff ffdd 	bl	c110 <on_failed_write>
    c156:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    c158:	2000      	movs	r0, #0
    c15a:	f007 fc9f 	bl	13a9c <SEGGER_RTT_HasDataUp>
    c15e:	2800      	cmp	r0, #0
    c160:	d0f4      	beq.n	c14c <on_write+0x10>
    c162:	4b02      	ldr	r3, [pc, #8]	; (c16c <on_write+0x30>)
    c164:	781b      	ldrb	r3, [r3, #0]
    c166:	2b00      	cmp	r3, #0
    c168:	d1f1      	bne.n	c14e <on_write+0x12>
    c16a:	e7ef      	b.n	c14c <on_write+0x10>
    c16c:	20002642 	.word	0x20002642
    c170:	20002643 	.word	0x20002643

0000c174 <data_out_block_mode>:
{
    c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c176:	4606      	mov	r6, r0
    c178:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    c17a:	2704      	movs	r7, #4
    c17c:	e00d      	b.n	c19a <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    c17e:	462a      	mov	r2, r5
    c180:	4631      	mov	r1, r6
    c182:	2000      	movs	r0, #0
    c184:	f007 fc26 	bl	139d4 <SEGGER_RTT_WriteSkipNoLock>
    c188:	4604      	mov	r4, r0
    c18a:	e014      	b.n	c1b6 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    c18c:	4638      	mov	r0, r7
    c18e:	f7ff ffd5 	bl	c13c <on_write>
	} while ((ret == 0) && host_present);
    c192:	b9dc      	cbnz	r4, c1cc <data_out_block_mode+0x58>
    c194:	4b11      	ldr	r3, [pc, #68]	; (c1dc <data_out_block_mode+0x68>)
    c196:	781b      	ldrb	r3, [r3, #0]
    c198:	b1c3      	cbz	r3, c1cc <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    c19a:	4b11      	ldr	r3, [pc, #68]	; (c1e0 <data_out_block_mode+0x6c>)
    c19c:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    c19e:	2b00      	cmp	r3, #0
    c1a0:	d1ed      	bne.n	c17e <data_out_block_mode+0xa>
			RTT_LOCK();
    c1a2:	f007 fc8b 	bl	13abc <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    c1a6:	462a      	mov	r2, r5
    c1a8:	4631      	mov	r1, r6
    c1aa:	2000      	movs	r0, #0
    c1ac:	f007 fc12 	bl	139d4 <SEGGER_RTT_WriteSkipNoLock>
    c1b0:	4604      	mov	r4, r0
			RTT_UNLOCK();
    c1b2:	f007 fc8f 	bl	13ad4 <zephyr_rtt_mutex_unlock>
		if (ret) {
    c1b6:	2c00      	cmp	r4, #0
    c1b8:	d1e8      	bne.n	c18c <data_out_block_mode+0x18>
		} else if (host_present) {
    c1ba:	4b08      	ldr	r3, [pc, #32]	; (c1dc <data_out_block_mode+0x68>)
    c1bc:	781b      	ldrb	r3, [r3, #0]
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d0e7      	beq.n	c192 <data_out_block_mode+0x1e>
			retry_cnt--;
    c1c2:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    c1c4:	4638      	mov	r0, r7
    c1c6:	f7ff ffa3 	bl	c110 <on_failed_write>
    c1ca:	e7e2      	b.n	c192 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    c1cc:	b914      	cbnz	r4, c1d4 <data_out_block_mode+0x60>
    c1ce:	4b03      	ldr	r3, [pc, #12]	; (c1dc <data_out_block_mode+0x68>)
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	b903      	cbnz	r3, c1d6 <data_out_block_mode+0x62>
    c1d4:	462c      	mov	r4, r5
}
    c1d6:	4620      	mov	r0, r4
    c1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1da:	bf00      	nop
    c1dc:	20002642 	.word	0x20002642
    c1e0:	20002643 	.word	0x20002643

0000c1e4 <panic>:
{
    c1e4:	b508      	push	{r3, lr}
	panic_mode = true;
    c1e6:	4b03      	ldr	r3, [pc, #12]	; (c1f4 <panic+0x10>)
    c1e8:	2201      	movs	r2, #1
    c1ea:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    c1ec:	4802      	ldr	r0, [pc, #8]	; (c1f8 <panic+0x14>)
    c1ee:	f00a fc7a 	bl	16ae6 <log_output_flush>
}
    c1f2:	bd08      	pop	{r3, pc}
    c1f4:	20002643 	.word	0x20002643
    c1f8:	00019dc8 	.word	0x00019dc8

0000c1fc <dropped>:
{
    c1fc:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    c1fe:	4802      	ldr	r0, [pc, #8]	; (c208 <dropped+0xc>)
    c200:	f7ff ff30 	bl	c064 <log_output_dropped_process>
}
    c204:	bd08      	pop	{r3, pc}
    c206:	bf00      	nop
    c208:	00019dc8 	.word	0x00019dc8

0000c20c <process>:
{
    c20c:	b510      	push	{r4, lr}
    c20e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c210:	4b04      	ldr	r3, [pc, #16]	; (c224 <process+0x18>)
    c212:	6818      	ldr	r0, [r3, #0]
    c214:	f7ff fa88 	bl	b728 <log_format_func_t_get>
    c218:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    c21a:	220f      	movs	r2, #15
    c21c:	4621      	mov	r1, r4
    c21e:	4802      	ldr	r0, [pc, #8]	; (c228 <process+0x1c>)
    c220:	4798      	blx	r3
}
    c222:	bd10      	pop	{r4, pc}
    c224:	20001e7c 	.word	0x20001e7c
    c228:	00019dc8 	.word	0x00019dc8

0000c22c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    c22c:	b570      	push	{r4, r5, r6, lr}
    c22e:	4606      	mov	r6, r0
    c230:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		goto cleanup;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    c232:	2400      	movs	r4, #0
    c234:	e005      	b.n	c242 <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
    c236:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    c238:	4804      	ldr	r0, [pc, #16]	; (c24c <char_out+0x20>)
    c23a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    c23c:	685b      	ldr	r3, [r3, #4]
    c23e:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    c240:	3401      	adds	r4, #1
    c242:	42ac      	cmp	r4, r5
    c244:	d3f7      	bcc.n	c236 <char_out+0xa>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_dev);
	}

	return length;
}
    c246:	4628      	mov	r0, r5
    c248:	bd70      	pop	{r4, r5, r6, pc}
    c24a:	bf00      	nop
    c24c:	000197d8 	.word	0x000197d8

0000c250 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c250:	4b01      	ldr	r3, [pc, #4]	; (c258 <format_set+0x8>)
    c252:	6019      	str	r1, [r3, #0]
	return 0;
}
    c254:	2000      	movs	r0, #0
    c256:	4770      	bx	lr
    c258:	20001ec4 	.word	0x20001ec4

0000c25c <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    c25c:	b508      	push	{r3, lr}
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    c25e:	4b03      	ldr	r3, [pc, #12]	; (c26c <panic+0x10>)
    c260:	2201      	movs	r2, #1
    c262:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    c264:	4802      	ldr	r0, [pc, #8]	; (c270 <panic+0x14>)
    c266:	f00a fc3e 	bl	16ae6 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    c26a:	bd08      	pop	{r3, pc}
    c26c:	20002644 	.word	0x20002644
    c270:	00019e14 	.word	0x00019e14

0000c274 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    c274:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    c276:	4802      	ldr	r0, [pc, #8]	; (c280 <dropped+0xc>)
    c278:	f7ff fef4 	bl	c064 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    c27c:	bd08      	pop	{r3, pc}
    c27e:	bf00      	nop
    c280:	00019e14 	.word	0x00019e14

0000c284 <process>:
{
    c284:	b510      	push	{r4, lr}
    c286:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c288:	4b04      	ldr	r3, [pc, #16]	; (c29c <process+0x18>)
    c28a:	6818      	ldr	r0, [r3, #0]
    c28c:	f7ff fa4c 	bl	b728 <log_format_func_t_get>
    c290:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    c292:	220f      	movs	r2, #15
    c294:	4621      	mov	r1, r4
    c296:	4802      	ldr	r0, [pc, #8]	; (c2a0 <process+0x1c>)
    c298:	4798      	blx	r3
}
    c29a:	bd10      	pop	{r4, pc}
    c29c:	20001ec4 	.word	0x20001ec4
    c2a0:	00019e14 	.word	0x00019e14

0000c2a4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c2a4:	b570      	push	{r4, r5, r6, lr}
    c2a6:	4605      	mov	r5, r0
	__asm__ volatile(
    c2a8:	f04f 0340 	mov.w	r3, #64	; 0x40
    c2ac:	f3ef 8611 	mrs	r6, BASEPRI
    c2b0:	f383 8812 	msr	BASEPRI_MAX, r3
    c2b4:	f3bf 8f6f 	isb	sy
    c2b8:	4b0e      	ldr	r3, [pc, #56]	; (c2f4 <pm_state_notify+0x50>)
    c2ba:	681c      	ldr	r4, [r3, #0]
    c2bc:	e00d      	b.n	c2da <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    c2be:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    c2c0:	b13a      	cbz	r2, c2d2 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c2c2:	4b0d      	ldr	r3, [pc, #52]	; (c2f8 <pm_state_notify+0x54>)
    c2c4:	7c1b      	ldrb	r3, [r3, #16]
    c2c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c2ca:	490c      	ldr	r1, [pc, #48]	; (c2fc <pm_state_notify+0x58>)
    c2cc:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    c2d0:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c2d2:	4623      	mov	r3, r4
	return node->next;
    c2d4:	6824      	ldr	r4, [r4, #0]
    c2d6:	b104      	cbz	r4, c2da <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    c2d8:	b123      	cbz	r3, c2e4 <pm_state_notify+0x40>
    c2da:	b12c      	cbz	r4, c2e8 <pm_state_notify+0x44>
		if (entering_state) {
    c2dc:	2d00      	cmp	r5, #0
    c2de:	d0ee      	beq.n	c2be <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    c2e0:	6862      	ldr	r2, [r4, #4]
    c2e2:	e7ed      	b.n	c2c0 <pm_state_notify+0x1c>
    c2e4:	461c      	mov	r4, r3
    c2e6:	e7f8      	b.n	c2da <pm_state_notify+0x36>
	__asm__ volatile(
    c2e8:	f386 8811 	msr	BASEPRI, r6
    c2ec:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c2f0:	bd70      	pop	{r4, r5, r6, pc}
    c2f2:	bf00      	nop
    c2f4:	20001ee0 	.word	0x20001ee0
    c2f8:	200025fc 	.word	0x200025fc
    c2fc:	20001ed4 	.word	0x20001ed4

0000c300 <pm_exit_pos_ops>:
{
    c300:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    c302:	4b06      	ldr	r3, [pc, #24]	; (c31c <pm_exit_pos_ops+0x1c>)
    c304:	b123      	cbz	r3, c310 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c306:	7841      	ldrb	r1, [r0, #1]
    c308:	7800      	ldrb	r0, [r0, #0]
    c30a:	f00a fdb9 	bl	16e80 <pm_state_exit_post_ops>
}
    c30e:	bd08      	pop	{r3, pc}
    c310:	2300      	movs	r3, #0
    c312:	f383 8811 	msr	BASEPRI, r3
    c316:	f3bf 8f6f 	isb	sy
    c31a:	e7f8      	b.n	c30e <pm_exit_pos_ops+0xe>
    c31c:	00016e81 	.word	0x00016e81

0000c320 <pm_system_resume>:

void pm_system_resume(void)
{
    c320:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c322:	4b0e      	ldr	r3, [pc, #56]	; (c35c <pm_system_resume+0x3c>)
    c324:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c326:	4621      	mov	r1, r4
    c328:	480d      	ldr	r0, [pc, #52]	; (c360 <pm_system_resume+0x40>)
    c32a:	f00a fc2b 	bl	16b84 <atomic_test_and_clear_bit>
    c32e:	b900      	cbnz	r0, c332 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    c330:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    c332:	0065      	lsls	r5, r4, #1
    c334:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    c338:	4e0a      	ldr	r6, [pc, #40]	; (c364 <pm_system_resume+0x44>)
    c33a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    c33e:	f7ff ffdf 	bl	c300 <pm_exit_pos_ops>
		pm_state_notify(false);
    c342:	2000      	movs	r0, #0
    c344:	f7ff ffae 	bl	c2a4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c348:	192b      	adds	r3, r5, r4
    c34a:	0099      	lsls	r1, r3, #2
    c34c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    c350:	2200      	movs	r2, #0
    c352:	5072      	str	r2, [r6, r1]
    c354:	605a      	str	r2, [r3, #4]
    c356:	609a      	str	r2, [r3, #8]
}
    c358:	e7ea      	b.n	c330 <pm_system_resume+0x10>
    c35a:	bf00      	nop
    c35c:	200025fc 	.word	0x200025fc
    c360:	20001ee8 	.word	0x20001ee8
    c364:	20001ed4 	.word	0x20001ed4

0000c368 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c36a:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    c36c:	4b38      	ldr	r3, [pc, #224]	; (c450 <pm_system_suspend+0xe8>)
    c36e:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    c370:	f04f 0340 	mov.w	r3, #64	; 0x40
    c374:	f3ef 8611 	mrs	r6, BASEPRI
    c378:	f383 8812 	msr	BASEPRI_MAX, r3
    c37c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c380:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c384:	4b33      	ldr	r3, [pc, #204]	; (c454 <pm_system_suspend+0xec>)
    c386:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    c38a:	2b00      	cmp	r3, #0
    c38c:	d039      	beq.n	c402 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c38e:	4b32      	ldr	r3, [pc, #200]	; (c458 <pm_system_suspend+0xf0>)
    c390:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    c394:	4f2f      	ldr	r7, [pc, #188]	; (c454 <pm_system_suspend+0xec>)
    c396:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    c39a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c39e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    c3a2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c3a6:	2300      	movs	r3, #0
    c3a8:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    c3ac:	f386 8811 	msr	BASEPRI, r6
    c3b0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c3b4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c3b8:	4a27      	ldr	r2, [pc, #156]	; (c458 <pm_system_suspend+0xf0>)
    c3ba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    c3be:	2b00      	cmp	r3, #0
    c3c0:	d044      	beq.n	c44c <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c3c2:	f1b5 3fff 	cmp.w	r5, #4294967295
    c3c6:	d12b      	bne.n	c420 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c3c8:	f008 fa6a 	bl	148a0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c3cc:	2001      	movs	r0, #1
    c3ce:	f7ff ff69 	bl	c2a4 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    c3d2:	4621      	mov	r1, r4
    c3d4:	4821      	ldr	r0, [pc, #132]	; (c45c <pm_system_suspend+0xf4>)
    c3d6:	f00a fbf1 	bl	16bbc <atomic_set_bit>
	if (pm_state_set != NULL) {
    c3da:	4b21      	ldr	r3, [pc, #132]	; (c460 <pm_system_suspend+0xf8>)
    c3dc:	b15b      	cbz	r3, c3f6 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    c3de:	4a1e      	ldr	r2, [pc, #120]	; (c458 <pm_system_suspend+0xf0>)
    c3e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c3e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c3e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c3ec:	7859      	ldrb	r1, [r3, #1]
    c3ee:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    c3f2:	f00a fd3d 	bl	16e70 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c3f6:	f7ff ff93 	bl	c320 <pm_system_resume>
	k_sched_unlock();
    c3fa:	f008 fc3d 	bl	14c78 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    c3fe:	2001      	movs	r0, #1
}
    c400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    c402:	4601      	mov	r1, r0
    c404:	4620      	mov	r0, r4
    c406:	f000 f831 	bl	c46c <pm_policy_next_state>
		if (info != NULL) {
    c40a:	2800      	cmp	r0, #0
    c40c:	d0ce      	beq.n	c3ac <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    c40e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    c412:	4b11      	ldr	r3, [pc, #68]	; (c458 <pm_system_suspend+0xf0>)
    c414:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c418:	c807      	ldmia	r0, {r0, r1, r2}
    c41a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    c41e:	e7c5      	b.n	c3ac <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    c420:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c424:	4b0c      	ldr	r3, [pc, #48]	; (c458 <pm_system_suspend+0xf0>)
    c426:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c42a:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    c42c:	0c41      	lsrs	r1, r0, #17
    c42e:	03c0      	lsls	r0, r0, #15
    c430:	4b0c      	ldr	r3, [pc, #48]	; (c464 <pm_system_suspend+0xfc>)
    c432:	18c0      	adds	r0, r0, r3
    c434:	4a0c      	ldr	r2, [pc, #48]	; (c468 <pm_system_suspend+0x100>)
    c436:	f04f 0300 	mov.w	r3, #0
    c43a:	f141 0100 	adc.w	r1, r1, #0
    c43e:	f7f3 fe4d 	bl	dc <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    c442:	2101      	movs	r1, #1
    c444:	1a28      	subs	r0, r5, r0
    c446:	f005 ff03 	bl	12250 <sys_clock_set_timeout>
    c44a:	e7bd      	b.n	c3c8 <pm_system_suspend+0x60>
		return false;
    c44c:	2000      	movs	r0, #0
    c44e:	e7d7      	b.n	c400 <pm_system_suspend+0x98>
    c450:	200025fc 	.word	0x200025fc
    c454:	20001ec8 	.word	0x20001ec8
    c458:	20001ed4 	.word	0x20001ed4
    c45c:	20001ee8 	.word	0x20001ee8
    c460:	00016e71 	.word	0x00016e71
    c464:	000f423f 	.word	0x000f423f
    c468:	000f4240 	.word	0x000f4240

0000c46c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c470:	b082      	sub	sp, #8
    c472:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c474:	a901      	add	r1, sp, #4
    c476:	f000 f845 	bl	c504 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c47a:	1e44      	subs	r4, r0, #1
    c47c:	b224      	sxth	r4, r4
    c47e:	e007      	b.n	c490 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    c480:	f1b6 3fff 	cmp.w	r6, #4294967295
    c484:	d033      	beq.n	c4ee <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    c486:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    c488:	45b0      	cmp	r8, r6
    c48a:	d930      	bls.n	c4ee <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c48c:	3c01      	subs	r4, #1
    c48e:	b224      	sxth	r4, r4
    c490:	2c00      	cmp	r4, #0
    c492:	db2b      	blt.n	c4ec <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    c494:	9b01      	ldr	r3, [sp, #4]
    c496:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c49a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    c49e:	7869      	ldrb	r1, [r5, #1]
    c4a0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    c4a4:	f00a fb9d 	bl	16be2 <pm_policy_state_lock_is_active>
    c4a8:	2800      	cmp	r0, #0
    c4aa:	d1ef      	bne.n	c48c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    c4ac:	6868      	ldr	r0, [r5, #4]
    c4ae:	0c41      	lsrs	r1, r0, #17
    c4b0:	03c0      	lsls	r0, r0, #15
    c4b2:	4f11      	ldr	r7, [pc, #68]	; (c4f8 <pm_policy_next_state+0x8c>)
    c4b4:	19c0      	adds	r0, r0, r7
    c4b6:	4a11      	ldr	r2, [pc, #68]	; (c4fc <pm_policy_next_state+0x90>)
    c4b8:	f04f 0300 	mov.w	r3, #0
    c4bc:	f141 0100 	adc.w	r1, r1, #0
    c4c0:	f7f3 fe0c 	bl	dc <__aeabi_uldivmod>
    c4c4:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    c4c6:	68ab      	ldr	r3, [r5, #8]
    c4c8:	0c59      	lsrs	r1, r3, #17
    c4ca:	03db      	lsls	r3, r3, #15
    c4cc:	19d8      	adds	r0, r3, r7
    c4ce:	4a0b      	ldr	r2, [pc, #44]	; (c4fc <pm_policy_next_state+0x90>)
    c4d0:	f04f 0300 	mov.w	r3, #0
    c4d4:	f141 0100 	adc.w	r1, r1, #0
    c4d8:	f7f3 fe00 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c4dc:	4b08      	ldr	r3, [pc, #32]	; (c500 <pm_policy_next_state+0x94>)
    c4de:	681b      	ldr	r3, [r3, #0]
    c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    c4e4:	d0cc      	beq.n	c480 <pm_policy_next_state+0x14>
    c4e6:	4283      	cmp	r3, r0
    c4e8:	d8ca      	bhi.n	c480 <pm_policy_next_state+0x14>
    c4ea:	e7cf      	b.n	c48c <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    c4ec:	2500      	movs	r5, #0
}
    c4ee:	4628      	mov	r0, r5
    c4f0:	b002      	add	sp, #8
    c4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4f6:	bf00      	nop
    c4f8:	000f423f 	.word	0x000f423f
    c4fc:	000f4240 	.word	0x000f4240
    c500:	20000304 	.word	0x20000304

0000c504 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c504:	b908      	cbnz	r0, c50a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c506:	4b02      	ldr	r3, [pc, #8]	; (c510 <pm_state_cpu_get_all+0xc>)
    c508:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c50a:	2000      	movs	r0, #0
    c50c:	4770      	bx	lr
    c50e:	bf00      	nop
    c510:	00019e28 	.word	0x00019e28

0000c514 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c514:	4901      	ldr	r1, [pc, #4]	; (c51c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c516:	2210      	movs	r2, #16
	str	r2, [r1]
    c518:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c51a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c51c:	e000ed10 	.word	0xe000ed10

0000c520 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c520:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c522:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c524:	f380 8811 	msr	BASEPRI, r0
	isb
    c528:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    c52c:	f3bf 8f4f 	dsb	sy
    c530:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c532:	b662      	cpsie	i
	isb
    c534:	f3bf 8f6f 	isb	sy

	bx	lr
    c538:	4770      	bx	lr
    c53a:	bf00      	nop

0000c53c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c53c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c53e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c540:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    c544:	f3bf 8f4f 	dsb	sy
    c548:	bf20      	wfe

	msr	BASEPRI, r0
    c54a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c54e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c550:	4770      	bx	lr
    c552:	bf00      	nop

0000c554 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    c554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c558:	b082      	sub	sp, #8
    c55a:	af00      	add	r7, sp, #0
    c55c:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c55e:	f8d0 e000 	ldr.w	lr, [r0]
    c562:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c566:	6886      	ldr	r6, [r0, #8]
    c568:	466d      	mov	r5, sp
    c56a:	b08a      	sub	sp, #40	; 0x28
    c56c:	466b      	mov	r3, sp
    c56e:	f113 0210 	adds.w	r2, r3, #16
    c572:	f000 8101 	beq.w	c778 <esf_dump+0x224>
    c576:	2018      	movs	r0, #24
    c578:	b1ba      	cbz	r2, c5aa <esf_dump+0x56>
    c57a:	4601      	mov	r1, r0
    c57c:	2804      	cmp	r0, #4
    c57e:	dd03      	ble.n	c588 <esf_dump+0x34>
    c580:	f8df 8224 	ldr.w	r8, [pc, #548]	; c7a8 <esf_dump+0x254>
    c584:	f8c3 8014 	str.w	r8, [r3, #20]
    c588:	2908      	cmp	r1, #8
    c58a:	dd03      	ble.n	c594 <esf_dump+0x40>
    c58c:	f8df 821c 	ldr.w	r8, [pc, #540]	; c7ac <esf_dump+0x258>
    c590:	f8c3 8018 	str.w	r8, [r3, #24]
    c594:	290c      	cmp	r1, #12
    c596:	dd01      	ble.n	c59c <esf_dump+0x48>
    c598:	f8c3 e01c 	str.w	lr, [r3, #28]
    c59c:	2910      	cmp	r1, #16
    c59e:	dd01      	ble.n	c5a4 <esf_dump+0x50>
    c5a0:	f8c3 c020 	str.w	ip, [r3, #32]
    c5a4:	2914      	cmp	r1, #20
    c5a6:	dd00      	ble.n	c5aa <esf_dump+0x56>
    c5a8:	625e      	str	r6, [r3, #36]	; 0x24
    c5aa:	2817      	cmp	r0, #23
    c5ac:	f340 80e7 	ble.w	c77e <esf_dump+0x22a>
    c5b0:	f04f 0c18 	mov.w	ip, #24
    c5b4:	b13a      	cbz	r2, c5c6 <esf_dump+0x72>
    c5b6:	2106      	movs	r1, #6
    c5b8:	7139      	strb	r1, [r7, #4]
    c5ba:	2100      	movs	r1, #0
    c5bc:	7179      	strb	r1, [r7, #5]
    c5be:	71b9      	strb	r1, [r7, #6]
    c5c0:	71f9      	strb	r1, [r7, #7]
    c5c2:	6878      	ldr	r0, [r7, #4]
    c5c4:	6118      	str	r0, [r3, #16]
    c5c6:	2100      	movs	r1, #0
    c5c8:	f36f 0100 	bfc	r1, #0, #1
    c5cc:	f36f 0141 	bfc	r1, #1, #1
    c5d0:	f36f 0182 	bfc	r1, #2, #1
    c5d4:	f36f 01c5 	bfc	r1, #3, #3
    c5d8:	2301      	movs	r3, #1
    c5da:	f363 1188 	bfi	r1, r3, #6, #3
    c5de:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    c5e2:	f36c 2153 	bfi	r1, ip, #9, #11
    c5e6:	f36f 511f 	bfc	r1, #20, #12
    c5ea:	2300      	movs	r3, #0
    c5ec:	4870      	ldr	r0, [pc, #448]	; (c7b0 <esf_dump+0x25c>)
    c5ee:	f7ff fab9 	bl	bb64 <z_impl_z_log_msg_static_create>
    c5f2:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c5f4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    c5f8:	f8d4 c010 	ldr.w	ip, [r4, #16]
    c5fc:	6966      	ldr	r6, [r4, #20]
    c5fe:	466d      	mov	r5, sp
    c600:	b08a      	sub	sp, #40	; 0x28
    c602:	466b      	mov	r3, sp
    c604:	f113 0210 	adds.w	r2, r3, #16
    c608:	f000 80bc 	beq.w	c784 <esf_dump+0x230>
    c60c:	2018      	movs	r0, #24
    c60e:	b1ba      	cbz	r2, c640 <esf_dump+0xec>
    c610:	4601      	mov	r1, r0
    c612:	2804      	cmp	r0, #4
    c614:	dd03      	ble.n	c61e <esf_dump+0xca>
    c616:	f8df 819c 	ldr.w	r8, [pc, #412]	; c7b4 <esf_dump+0x260>
    c61a:	f8c3 8014 	str.w	r8, [r3, #20]
    c61e:	2908      	cmp	r1, #8
    c620:	dd03      	ble.n	c62a <esf_dump+0xd6>
    c622:	f8df 8188 	ldr.w	r8, [pc, #392]	; c7ac <esf_dump+0x258>
    c626:	f8c3 8018 	str.w	r8, [r3, #24]
    c62a:	290c      	cmp	r1, #12
    c62c:	dd01      	ble.n	c632 <esf_dump+0xde>
    c62e:	f8c3 e01c 	str.w	lr, [r3, #28]
    c632:	2910      	cmp	r1, #16
    c634:	dd01      	ble.n	c63a <esf_dump+0xe6>
    c636:	f8c3 c020 	str.w	ip, [r3, #32]
    c63a:	2914      	cmp	r1, #20
    c63c:	dd00      	ble.n	c640 <esf_dump+0xec>
    c63e:	625e      	str	r6, [r3, #36]	; 0x24
    c640:	2817      	cmp	r0, #23
    c642:	f340 80a2 	ble.w	c78a <esf_dump+0x236>
    c646:	f04f 0c18 	mov.w	ip, #24
    c64a:	b13a      	cbz	r2, c65c <esf_dump+0x108>
    c64c:	2106      	movs	r1, #6
    c64e:	7139      	strb	r1, [r7, #4]
    c650:	2100      	movs	r1, #0
    c652:	7179      	strb	r1, [r7, #5]
    c654:	71b9      	strb	r1, [r7, #6]
    c656:	71f9      	strb	r1, [r7, #7]
    c658:	6878      	ldr	r0, [r7, #4]
    c65a:	6118      	str	r0, [r3, #16]
    c65c:	2100      	movs	r1, #0
    c65e:	f36f 0100 	bfc	r1, #0, #1
    c662:	f36f 0141 	bfc	r1, #1, #1
    c666:	f36f 0182 	bfc	r1, #2, #1
    c66a:	f36f 01c5 	bfc	r1, #3, #3
    c66e:	2301      	movs	r3, #1
    c670:	f363 1188 	bfi	r1, r3, #6, #3
    c674:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    c678:	f36c 2153 	bfi	r1, ip, #9, #11
    c67c:	f36f 511f 	bfc	r1, #20, #12
    c680:	2300      	movs	r3, #0
    c682:	484b      	ldr	r0, [pc, #300]	; (c7b0 <esf_dump+0x25c>)
    c684:	f7ff fa6e 	bl	bb64 <z_impl_z_log_msg_static_create>
    c688:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c68a:	69e6      	ldr	r6, [r4, #28]
    c68c:	466d      	mov	r5, sp
    c68e:	b088      	sub	sp, #32
    c690:	466b      	mov	r3, sp
    c692:	f113 0210 	adds.w	r2, r3, #16
    c696:	d07b      	beq.n	c790 <esf_dump+0x23c>
    c698:	2110      	movs	r1, #16
    c69a:	b17a      	cbz	r2, c6bc <esf_dump+0x168>
    c69c:	4608      	mov	r0, r1
    c69e:	2904      	cmp	r1, #4
    c6a0:	dd03      	ble.n	c6aa <esf_dump+0x156>
    c6a2:	f8df c114 	ldr.w	ip, [pc, #276]	; c7b8 <esf_dump+0x264>
    c6a6:	f8c3 c014 	str.w	ip, [r3, #20]
    c6aa:	2808      	cmp	r0, #8
    c6ac:	dd03      	ble.n	c6b6 <esf_dump+0x162>
    c6ae:	f8df c0fc 	ldr.w	ip, [pc, #252]	; c7ac <esf_dump+0x258>
    c6b2:	f8c3 c018 	str.w	ip, [r3, #24]
    c6b6:	280c      	cmp	r0, #12
    c6b8:	dd00      	ble.n	c6bc <esf_dump+0x168>
    c6ba:	61de      	str	r6, [r3, #28]
    c6bc:	290f      	cmp	r1, #15
    c6be:	dd6a      	ble.n	c796 <esf_dump+0x242>
    c6c0:	f04f 0c10 	mov.w	ip, #16
    c6c4:	b13a      	cbz	r2, c6d6 <esf_dump+0x182>
    c6c6:	2104      	movs	r1, #4
    c6c8:	7139      	strb	r1, [r7, #4]
    c6ca:	2100      	movs	r1, #0
    c6cc:	7179      	strb	r1, [r7, #5]
    c6ce:	71b9      	strb	r1, [r7, #6]
    c6d0:	71f9      	strb	r1, [r7, #7]
    c6d2:	6878      	ldr	r0, [r7, #4]
    c6d4:	6118      	str	r0, [r3, #16]
    c6d6:	2100      	movs	r1, #0
    c6d8:	f36f 0100 	bfc	r1, #0, #1
    c6dc:	f36f 0141 	bfc	r1, #1, #1
    c6e0:	f36f 0182 	bfc	r1, #2, #1
    c6e4:	f36f 01c5 	bfc	r1, #3, #3
    c6e8:	2301      	movs	r3, #1
    c6ea:	f363 1188 	bfi	r1, r3, #6, #3
    c6ee:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    c6f2:	f36c 2153 	bfi	r1, ip, #9, #11
    c6f6:	f36f 511f 	bfc	r1, #20, #12
    c6fa:	2300      	movs	r3, #0
    c6fc:	482c      	ldr	r0, [pc, #176]	; (c7b0 <esf_dump+0x25c>)
    c6fe:	f7ff fa31 	bl	bb64 <z_impl_z_log_msg_static_create>
    c702:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    c704:	69a4      	ldr	r4, [r4, #24]
    c706:	b088      	sub	sp, #32
    c708:	466b      	mov	r3, sp
    c70a:	f113 0210 	adds.w	r2, r3, #16
    c70e:	d045      	beq.n	c79c <esf_dump+0x248>
    c710:	2110      	movs	r1, #16
    c712:	b15a      	cbz	r2, c72c <esf_dump+0x1d8>
    c714:	4608      	mov	r0, r1
    c716:	2904      	cmp	r1, #4
    c718:	dd01      	ble.n	c71e <esf_dump+0x1ca>
    c71a:	4d28      	ldr	r5, [pc, #160]	; (c7bc <esf_dump+0x268>)
    c71c:	615d      	str	r5, [r3, #20]
    c71e:	2808      	cmp	r0, #8
    c720:	dd01      	ble.n	c726 <esf_dump+0x1d2>
    c722:	4d22      	ldr	r5, [pc, #136]	; (c7ac <esf_dump+0x258>)
    c724:	619d      	str	r5, [r3, #24]
    c726:	280c      	cmp	r0, #12
    c728:	dd00      	ble.n	c72c <esf_dump+0x1d8>
    c72a:	61dc      	str	r4, [r3, #28]
    c72c:	290f      	cmp	r1, #15
    c72e:	dd38      	ble.n	c7a2 <esf_dump+0x24e>
    c730:	2410      	movs	r4, #16
    c732:	b13a      	cbz	r2, c744 <esf_dump+0x1f0>
    c734:	2104      	movs	r1, #4
    c736:	7139      	strb	r1, [r7, #4]
    c738:	2100      	movs	r1, #0
    c73a:	7179      	strb	r1, [r7, #5]
    c73c:	71b9      	strb	r1, [r7, #6]
    c73e:	71f9      	strb	r1, [r7, #7]
    c740:	6878      	ldr	r0, [r7, #4]
    c742:	6118      	str	r0, [r3, #16]
    c744:	2100      	movs	r1, #0
    c746:	f36f 0100 	bfc	r1, #0, #1
    c74a:	f36f 0141 	bfc	r1, #1, #1
    c74e:	f36f 0182 	bfc	r1, #2, #1
    c752:	f36f 01c5 	bfc	r1, #3, #3
    c756:	2301      	movs	r3, #1
    c758:	f363 1188 	bfi	r1, r3, #6, #3
    c75c:	f3c4 040a 	ubfx	r4, r4, #0, #11
    c760:	f364 2153 	bfi	r1, r4, #9, #11
    c764:	f36f 511f 	bfc	r1, #20, #12
    c768:	2300      	movs	r3, #0
    c76a:	4811      	ldr	r0, [pc, #68]	; (c7b0 <esf_dump+0x25c>)
    c76c:	f7ff f9fa 	bl	bb64 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    c770:	3708      	adds	r7, #8
    c772:	46bd      	mov	sp, r7
    c774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c778:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c77c:	e6fc      	b.n	c578 <esf_dump+0x24>
    c77e:	f06f 0c1b 	mvn.w	ip, #27
    c782:	e717      	b.n	c5b4 <esf_dump+0x60>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c784:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c788:	e741      	b.n	c60e <esf_dump+0xba>
    c78a:	f06f 0c1b 	mvn.w	ip, #27
    c78e:	e75c      	b.n	c64a <esf_dump+0xf6>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c794:	e781      	b.n	c69a <esf_dump+0x146>
    c796:	f06f 0c1b 	mvn.w	ip, #27
    c79a:	e793      	b.n	c6c4 <esf_dump+0x170>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    c79c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c7a0:	e7b7      	b.n	c712 <esf_dump+0x1be>
    c7a2:	f06f 041b 	mvn.w	r4, #27
    c7a6:	e7c4      	b.n	c732 <esf_dump+0x1de>
    c7a8:	00019e28 	.word	0x00019e28
    c7ac:	00019ed8 	.word	0x00019ed8
    c7b0:	00019a04 	.word	0x00019a04
    c7b4:	00019e5c 	.word	0x00019e5c
    c7b8:	00019e90 	.word	0x00019e90
    c7bc:	00019ea4 	.word	0x00019ea4

0000c7c0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c7c0:	2800      	cmp	r0, #0
    c7c2:	db07      	blt.n	c7d4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c7c4:	f000 021f 	and.w	r2, r0, #31
    c7c8:	0940      	lsrs	r0, r0, #5
    c7ca:	2301      	movs	r3, #1
    c7cc:	4093      	lsls	r3, r2
    c7ce:	4a02      	ldr	r2, [pc, #8]	; (c7d8 <__NVIC_EnableIRQ+0x18>)
    c7d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c7d4:	4770      	bx	lr
    c7d6:	bf00      	nop
    c7d8:	e000e100 	.word	0xe000e100

0000c7dc <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c7dc:	2800      	cmp	r0, #0
    c7de:	db0c      	blt.n	c7fa <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c7e0:	f000 021f 	and.w	r2, r0, #31
    c7e4:	0940      	lsrs	r0, r0, #5
    c7e6:	2301      	movs	r3, #1
    c7e8:	4093      	lsls	r3, r2
    c7ea:	3020      	adds	r0, #32
    c7ec:	4a03      	ldr	r2, [pc, #12]	; (c7fc <__NVIC_DisableIRQ+0x20>)
    c7ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c7f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c7f6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c7fa:	4770      	bx	lr
    c7fc:	e000e100 	.word	0xe000e100

0000c800 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c800:	2800      	cmp	r0, #0
    c802:	db08      	blt.n	c816 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c804:	0149      	lsls	r1, r1, #5
    c806:	b2c9      	uxtb	r1, r1
    c808:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    c80c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    c810:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    c814:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c816:	f000 000f 	and.w	r0, r0, #15
    c81a:	0149      	lsls	r1, r1, #5
    c81c:	b2c9      	uxtb	r1, r1
    c81e:	4b01      	ldr	r3, [pc, #4]	; (c824 <__NVIC_SetPriority+0x24>)
    c820:	5419      	strb	r1, [r3, r0]
  }
}
    c822:	4770      	bx	lr
    c824:	e000ed14 	.word	0xe000ed14

0000c828 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c828:	0942      	lsrs	r2, r0, #5
    c82a:	4b05      	ldr	r3, [pc, #20]	; (c840 <arch_irq_is_enabled+0x18>)
    c82c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c830:	f000 001f 	and.w	r0, r0, #31
    c834:	2301      	movs	r3, #1
    c836:	fa03 f000 	lsl.w	r0, r3, r0
}
    c83a:	4010      	ands	r0, r2
    c83c:	4770      	bx	lr
    c83e:	bf00      	nop
    c840:	e000e100 	.word	0xe000e100

0000c844 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    c844:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    c846:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    c848:	4b05      	ldr	r3, [pc, #20]	; (c860 <_arch_isr_direct_pm+0x1c>)
    c84a:	695b      	ldr	r3, [r3, #20]
    c84c:	b90b      	cbnz	r3, c852 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    c84e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    c850:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    c852:	4b03      	ldr	r3, [pc, #12]	; (c860 <_arch_isr_direct_pm+0x1c>)
    c854:	2200      	movs	r2, #0
    c856:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    c858:	f00c f918 	bl	18a8c <z_pm_save_idle_exit>
    c85c:	e7f7      	b.n	c84e <_arch_isr_direct_pm+0xa>
    c85e:	bf00      	nop
    c860:	200025fc 	.word	0x200025fc

0000c864 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c864:	bf30      	wfi
    b z_SysNmiOnReset
    c866:	f7ff bffd 	b.w	c864 <z_SysNmiOnReset>
    c86a:	bf00      	nop

0000c86c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c86c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c86e:	4b0b      	ldr	r3, [pc, #44]	; (c89c <z_arm_prep_c+0x30>)
    c870:	4a0b      	ldr	r2, [pc, #44]	; (c8a0 <z_arm_prep_c+0x34>)
    c872:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    c876:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    c878:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c87c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    c880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c884:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    c888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c88c:	f007 fb20 	bl	13ed0 <z_bss_zero>
	z_data_copy();
    c890:	f008 fb5a 	bl	14f48 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c894:	f001 fa9e 	bl	ddd4 <z_arm_interrupt_init>
	z_cstart();
    c898:	f007 fb78 	bl	13f8c <z_cstart>
    c89c:	e000ed00 	.word	0xe000ed00
    c8a0:	00000000 	.word	0x00000000

0000c8a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c8a4:	4a0a      	ldr	r2, [pc, #40]	; (c8d0 <arch_swap+0x2c>)
    c8a6:	6893      	ldr	r3, [r2, #8]
    c8a8:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    c8ac:	4909      	ldr	r1, [pc, #36]	; (c8d4 <arch_swap+0x30>)
    c8ae:	6809      	ldr	r1, [r1, #0]
    c8b0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c8b4:	4908      	ldr	r1, [pc, #32]	; (c8d8 <arch_swap+0x34>)
    c8b6:	684b      	ldr	r3, [r1, #4]
    c8b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c8bc:	604b      	str	r3, [r1, #4]
    c8be:	2300      	movs	r3, #0
    c8c0:	f383 8811 	msr	BASEPRI, r3
    c8c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c8c8:	6893      	ldr	r3, [r2, #8]
}
    c8ca:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    c8ce:	4770      	bx	lr
    c8d0:	200025fc 	.word	0x200025fc
    c8d4:	0001b2f4 	.word	0x0001b2f4
    c8d8:	e000ed00 	.word	0xe000ed00

0000c8dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c8dc:	4913      	ldr	r1, [pc, #76]	; (c92c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c8de:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c8e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c8e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c8e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c8ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c8ee:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    c8f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c8f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c8f8:	4f0d      	ldr	r7, [pc, #52]	; (c930 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c8fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c8fe:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    c900:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c902:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c904:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    c908:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c90a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c90e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    c912:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    c914:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    c916:	f001 fb0d 	bl	df34 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    c91a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c91e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c922:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c926:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c92a:	4770      	bx	lr
    ldr r1, =_kernel
    c92c:	200025fc 	.word	0x200025fc
    ldr v4, =_SCS_ICSR
    c930:	e000ed04 	.word	0xe000ed04

0000c934 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c934:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c938:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c93a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c93e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c942:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c944:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c948:	2902      	cmp	r1, #2
    beq _oops
    c94a:	d0ff      	beq.n	c94c <_oops>

0000c94c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c94c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    c94e:	f00a f956 	bl	16bfe <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    c952:	bd01      	pop	{r0, pc}

0000c954 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    c954:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c956:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    c95a:	490e      	ldr	r1, [pc, #56]	; (c994 <arch_new_thread+0x40>)
    c95c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    c960:	f021 0101 	bic.w	r1, r1, #1
    c964:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    c968:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c96c:	9b01      	ldr	r3, [sp, #4]
    c96e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    c972:	9b02      	ldr	r3, [sp, #8]
    c974:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    c978:	9b03      	ldr	r3, [sp, #12]
    c97a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c97e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c982:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    c986:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    c988:	2300      	movs	r3, #0
    c98a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c98e:	bc10      	pop	{r4}
    c990:	4770      	bx	lr
    c992:	bf00      	nop
    c994:	0001570d 	.word	0x0001570d

0000c998 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    c998:	4b10      	ldr	r3, [pc, #64]	; (c9dc <z_check_thread_stack_fail+0x44>)
    c99a:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    c99c:	b1bb      	cbz	r3, c9ce <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c99e:	f110 0f16 	cmn.w	r0, #22
    c9a2:	d00b      	beq.n	c9bc <z_check_thread_stack_fail+0x24>
    c9a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    c9a8:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    c9ac:	4584      	cmp	ip, r0
    c9ae:	d810      	bhi.n	c9d2 <z_check_thread_stack_fail+0x3a>
    c9b0:	4282      	cmp	r2, r0
    c9b2:	d910      	bls.n	c9d6 <z_check_thread_stack_fail+0x3e>
    c9b4:	428a      	cmp	r2, r1
    c9b6:	d807      	bhi.n	c9c8 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    c9b8:	2000      	movs	r0, #0
    c9ba:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c9bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    c9c0:	428a      	cmp	r2, r1
    c9c2:	d801      	bhi.n	c9c8 <z_check_thread_stack_fail+0x30>
	return 0;
    c9c4:	2000      	movs	r0, #0
}
    c9c6:	4770      	bx	lr
		return thread->stack_info.start;
    c9c8:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    c9cc:	4770      	bx	lr
		return 0;
    c9ce:	2000      	movs	r0, #0
    c9d0:	4770      	bx	lr
	return 0;
    c9d2:	2000      	movs	r0, #0
    c9d4:	4770      	bx	lr
    c9d6:	2000      	movs	r0, #0
    c9d8:	4770      	bx	lr
    c9da:	bf00      	nop
    c9dc:	200025fc 	.word	0x200025fc

0000c9e0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    c9e0:	b508      	push	{r3, lr}
    c9e2:	460d      	mov	r5, r1
    c9e4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c9e6:	4b08      	ldr	r3, [pc, #32]	; (ca08 <arch_switch_to_main_thread+0x28>)
    c9e8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    c9ea:	f001 faa3 	bl	df34 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c9ee:	4620      	mov	r0, r4
    c9f0:	f385 8809 	msr	PSP, r5
    c9f4:	2100      	movs	r1, #0
    c9f6:	b663      	cpsie	if
    c9f8:	f381 8811 	msr	BASEPRI, r1
    c9fc:	f3bf 8f6f 	isb	sy
    ca00:	2200      	movs	r2, #0
    ca02:	2300      	movs	r3, #0
    ca04:	f008 fe82 	bl	1570c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ca08:	200025fc 	.word	0x200025fc

0000ca0c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ca0c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ca0e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ca10:	4a0b      	ldr	r2, [pc, #44]	; (ca40 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ca12:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    ca14:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ca16:	bf1e      	ittt	ne
	movne	r1, #0
    ca18:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ca1a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    ca1c:	f00c f836 	blne	18a8c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ca20:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ca22:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ca26:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ca2a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ca2e:	4905      	ldr	r1, [pc, #20]	; (ca44 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ca30:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ca32:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ca34:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ca36:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ca3a:	4903      	ldr	r1, [pc, #12]	; (ca48 <_isr_wrapper+0x3c>)
	bx r1
    ca3c:	4708      	bx	r1
    ca3e:	0000      	.short	0x0000
	ldr r2, =_kernel
    ca40:	200025fc 	.word	0x200025fc
	ldr r1, =_sw_isr_table
    ca44:	000197f0 	.word	0x000197f0
	ldr r1, =z_arm_int_exit
    ca48:	0000ca4d 	.word	0x0000ca4d

0000ca4c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ca4c:	4b04      	ldr	r3, [pc, #16]	; (ca60 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ca4e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ca50:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    ca52:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ca54:	d003      	beq.n	ca5e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ca56:	4903      	ldr	r1, [pc, #12]	; (ca64 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    ca58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    ca5c:	600a      	str	r2, [r1, #0]

0000ca5e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    ca5e:	4770      	bx	lr
	ldr r3, =_kernel
    ca60:	200025fc 	.word	0x200025fc
	ldr r1, =_SCS_ICSR
    ca64:	e000ed04 	.word	0xe000ed04

0000ca68 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    ca68:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    ca6a:	4b0d      	ldr	r3, [pc, #52]	; (caa0 <z_arm_is_synchronous_svc+0x38>)
    ca6c:	695a      	ldr	r2, [r3, #20]
    ca6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ca72:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ca74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca78:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    ca7c:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    ca80:	695a      	ldr	r2, [r3, #20]
    ca82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    ca86:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ca88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca8c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ca90:	f64d 7302 	movw	r3, #57090	; 0xdf02
    ca94:	4299      	cmp	r1, r3
    ca96:	d001      	beq.n	ca9c <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    ca98:	2000      	movs	r0, #0
    ca9a:	4770      	bx	lr
		return true;
    ca9c:	2001      	movs	r0, #1
}
    ca9e:	4770      	bx	lr
    caa0:	e000ed00 	.word	0xe000ed00

0000caa4 <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    caa4:	f04f 0c00 	mov.w	ip, #0
    caa8:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    caac:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
    cab0:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
    cab4:	d14e      	bne.n	cb54 <get_esf+0xb0>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    cab6:	f002 0c0c 	and.w	ip, r2, #12
    caba:	f1bc 0f08 	cmp.w	ip, #8
    cabe:	d004      	beq.n	caca <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    cac0:	f012 0f08 	tst.w	r2, #8
    cac4:	d043      	beq.n	cb4e <get_esf+0xaa>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    cac6:	4608      	mov	r0, r1
    cac8:	4770      	bx	lr
{
    caca:	b5b0      	push	{r4, r5, r7, lr}
    cacc:	b082      	sub	sp, #8
    cace:	af00      	add	r7, sp, #0
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    cad0:	466c      	mov	r4, sp
    cad2:	b088      	sub	sp, #32
    cad4:	466b      	mov	r3, sp
    cad6:	f113 0210 	adds.w	r2, r3, #16
    cada:	d032      	beq.n	cb42 <get_esf+0x9e>
    cadc:	210c      	movs	r1, #12
    cade:	b142      	cbz	r2, caf2 <get_esf+0x4e>
    cae0:	4608      	mov	r0, r1
    cae2:	2904      	cmp	r1, #4
    cae4:	dd01      	ble.n	caea <get_esf+0x46>
    cae6:	4d1c      	ldr	r5, [pc, #112]	; (cb58 <get_esf+0xb4>)
    cae8:	615d      	str	r5, [r3, #20]
    caea:	2808      	cmp	r0, #8
    caec:	dd01      	ble.n	caf2 <get_esf+0x4e>
    caee:	481b      	ldr	r0, [pc, #108]	; (cb5c <get_esf+0xb8>)
    caf0:	6198      	str	r0, [r3, #24]
    caf2:	290b      	cmp	r1, #11
    caf4:	dd28      	ble.n	cb48 <get_esf+0xa4>
    caf6:	f04f 0c0c 	mov.w	ip, #12
    cafa:	b13a      	cbz	r2, cb0c <get_esf+0x68>
    cafc:	2103      	movs	r1, #3
    cafe:	7139      	strb	r1, [r7, #4]
    cb00:	2100      	movs	r1, #0
    cb02:	7179      	strb	r1, [r7, #5]
    cb04:	71b9      	strb	r1, [r7, #6]
    cb06:	71f9      	strb	r1, [r7, #7]
    cb08:	6878      	ldr	r0, [r7, #4]
    cb0a:	6118      	str	r0, [r3, #16]
    cb0c:	2100      	movs	r1, #0
    cb0e:	f36f 0100 	bfc	r1, #0, #1
    cb12:	f36f 0141 	bfc	r1, #1, #1
    cb16:	f36f 0182 	bfc	r1, #2, #1
    cb1a:	f36f 01c5 	bfc	r1, #3, #3
    cb1e:	2301      	movs	r3, #1
    cb20:	f363 1188 	bfi	r1, r3, #6, #3
    cb24:	f3cc 030a 	ubfx	r3, ip, #0, #11
    cb28:	f363 2153 	bfi	r1, r3, #9, #11
    cb2c:	f36f 511f 	bfc	r1, #20, #12
    cb30:	2300      	movs	r3, #0
    cb32:	480b      	ldr	r0, [pc, #44]	; (cb60 <get_esf+0xbc>)
    cb34:	f7ff f816 	bl	bb64 <z_impl_z_log_msg_static_create>
    cb38:	46a5      	mov	sp, r4
		return NULL;
    cb3a:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    cb3c:	3708      	adds	r7, #8
    cb3e:	46bd      	mov	sp, r7
    cb40:	bdb0      	pop	{r4, r5, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    cb42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cb46:	e7ca      	b.n	cade <get_esf+0x3a>
    cb48:	f06f 0c1b 	mvn.w	ip, #27
    cb4c:	e7d5      	b.n	cafa <get_esf+0x56>
			*nested_exc = true;
    cb4e:	2201      	movs	r2, #1
    cb50:	701a      	strb	r2, [r3, #0]
    cb52:	4770      	bx	lr
		return NULL;
    cb54:	2000      	movs	r0, #0
}
    cb56:	4770      	bx	lr
    cb58:	00019ee4 	.word	0x00019ee4
    cb5c:	0001a31c 	.word	0x0001a31c
    cb60:	00019a04 	.word	0x00019a04

0000cb64 <bus_fault>:
{
    cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb68:	b082      	sub	sp, #8
    cb6a:	af00      	add	r7, sp, #0
    cb6c:	4605      	mov	r5, r0
    cb6e:	460e      	mov	r6, r1
    cb70:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    cb72:	46e8      	mov	r8, sp
    cb74:	b088      	sub	sp, #32
    cb76:	466b      	mov	r3, sp
    cb78:	f113 0210 	adds.w	r2, r3, #16
    cb7c:	f000 8141 	beq.w	ce02 <bus_fault+0x29e>
    cb80:	210c      	movs	r1, #12
    cb82:	b152      	cbz	r2, cb9a <bus_fault+0x36>
    cb84:	4608      	mov	r0, r1
    cb86:	2904      	cmp	r1, #4
    cb88:	dd03      	ble.n	cb92 <bus_fault+0x2e>
    cb8a:	f8df c2b8 	ldr.w	ip, [pc, #696]	; ce44 <bus_fault+0x2e0>
    cb8e:	f8c3 c014 	str.w	ip, [r3, #20]
    cb92:	2808      	cmp	r0, #8
    cb94:	dd01      	ble.n	cb9a <bus_fault+0x36>
    cb96:	48ac      	ldr	r0, [pc, #688]	; (ce48 <bus_fault+0x2e4>)
    cb98:	6198      	str	r0, [r3, #24]
    cb9a:	290b      	cmp	r1, #11
    cb9c:	f340 8134 	ble.w	ce08 <bus_fault+0x2a4>
    cba0:	f04f 0c0c 	mov.w	ip, #12
    cba4:	b13a      	cbz	r2, cbb6 <bus_fault+0x52>
    cba6:	2103      	movs	r1, #3
    cba8:	7139      	strb	r1, [r7, #4]
    cbaa:	2100      	movs	r1, #0
    cbac:	7179      	strb	r1, [r7, #5]
    cbae:	71b9      	strb	r1, [r7, #6]
    cbb0:	71f9      	strb	r1, [r7, #7]
    cbb2:	6878      	ldr	r0, [r7, #4]
    cbb4:	6118      	str	r0, [r3, #16]
    cbb6:	2100      	movs	r1, #0
    cbb8:	f36f 0100 	bfc	r1, #0, #1
    cbbc:	f36f 0141 	bfc	r1, #1, #1
    cbc0:	f36f 0182 	bfc	r1, #2, #1
    cbc4:	f36f 01c5 	bfc	r1, #3, #3
    cbc8:	2301      	movs	r3, #1
    cbca:	f363 1188 	bfi	r1, r3, #6, #3
    cbce:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    cbd2:	f36c 2153 	bfi	r1, ip, #9, #11
    cbd6:	f36f 511f 	bfc	r1, #20, #12
    cbda:	2300      	movs	r3, #0
    cbdc:	489b      	ldr	r0, [pc, #620]	; (ce4c <bus_fault+0x2e8>)
    cbde:	f7fe ffc1 	bl	bb64 <z_impl_z_log_msg_static_create>
    cbe2:	46c5      	mov	sp, r8
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    cbe4:	4b9a      	ldr	r3, [pc, #616]	; (ce50 <bus_fault+0x2ec>)
    cbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cbe8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cbec:	f000 8115 	beq.w	ce1a <bus_fault+0x2b6>
		PR_FAULT_INFO("  Stacking error");
    cbf0:	46e8      	mov	r8, sp
    cbf2:	b088      	sub	sp, #32
    cbf4:	466b      	mov	r3, sp
    cbf6:	f113 0210 	adds.w	r2, r3, #16
    cbfa:	f000 8108 	beq.w	ce0e <bus_fault+0x2aa>
    cbfe:	210c      	movs	r1, #12
    cc00:	b152      	cbz	r2, cc18 <bus_fault+0xb4>
    cc02:	4608      	mov	r0, r1
    cc04:	2904      	cmp	r1, #4
    cc06:	dd03      	ble.n	cc10 <bus_fault+0xac>
    cc08:	f8df c248 	ldr.w	ip, [pc, #584]	; ce54 <bus_fault+0x2f0>
    cc0c:	f8c3 c014 	str.w	ip, [r3, #20]
    cc10:	2808      	cmp	r0, #8
    cc12:	dd01      	ble.n	cc18 <bus_fault+0xb4>
    cc14:	488c      	ldr	r0, [pc, #560]	; (ce48 <bus_fault+0x2e4>)
    cc16:	6198      	str	r0, [r3, #24]
    cc18:	290b      	cmp	r1, #11
    cc1a:	f340 80fb 	ble.w	ce14 <bus_fault+0x2b0>
    cc1e:	f04f 0c0c 	mov.w	ip, #12
    cc22:	b13a      	cbz	r2, cc34 <bus_fault+0xd0>
    cc24:	2103      	movs	r1, #3
    cc26:	7139      	strb	r1, [r7, #4]
    cc28:	2100      	movs	r1, #0
    cc2a:	7179      	strb	r1, [r7, #5]
    cc2c:	71b9      	strb	r1, [r7, #6]
    cc2e:	71f9      	strb	r1, [r7, #7]
    cc30:	6878      	ldr	r0, [r7, #4]
    cc32:	6118      	str	r0, [r3, #16]
    cc34:	2100      	movs	r1, #0
    cc36:	f36f 0100 	bfc	r1, #0, #1
    cc3a:	f36f 0141 	bfc	r1, #1, #1
    cc3e:	f36f 0182 	bfc	r1, #2, #1
    cc42:	f36f 01c5 	bfc	r1, #3, #3
    cc46:	2301      	movs	r3, #1
    cc48:	f363 1188 	bfi	r1, r3, #6, #3
    cc4c:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    cc50:	f36c 2153 	bfi	r1, ip, #9, #11
    cc54:	f36f 511f 	bfc	r1, #20, #12
    cc58:	2300      	movs	r3, #0
    cc5a:	487c      	ldr	r0, [pc, #496]	; (ce4c <bus_fault+0x2e8>)
    cc5c:	f7fe ff82 	bl	bb64 <z_impl_z_log_msg_static_create>
    cc60:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_STACKING;
    cc62:	f04f 0817 	mov.w	r8, #23
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    cc66:	4b7a      	ldr	r3, [pc, #488]	; (ce50 <bus_fault+0x2ec>)
    cc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc6a:	f413 6f00 	tst.w	r3, #2048	; 0x800
    cc6e:	d03a      	beq.n	cce6 <bus_fault+0x182>
		PR_FAULT_INFO("  Unstacking error");
    cc70:	46e8      	mov	r8, sp
    cc72:	b088      	sub	sp, #32
    cc74:	466b      	mov	r3, sp
    cc76:	f113 0210 	adds.w	r2, r3, #16
    cc7a:	f000 80d1 	beq.w	ce20 <bus_fault+0x2bc>
    cc7e:	210c      	movs	r1, #12
    cc80:	b152      	cbz	r2, cc98 <bus_fault+0x134>
    cc82:	4608      	mov	r0, r1
    cc84:	2904      	cmp	r1, #4
    cc86:	dd03      	ble.n	cc90 <bus_fault+0x12c>
    cc88:	f8df c1cc 	ldr.w	ip, [pc, #460]	; ce58 <bus_fault+0x2f4>
    cc8c:	f8c3 c014 	str.w	ip, [r3, #20]
    cc90:	2808      	cmp	r0, #8
    cc92:	dd01      	ble.n	cc98 <bus_fault+0x134>
    cc94:	486c      	ldr	r0, [pc, #432]	; (ce48 <bus_fault+0x2e4>)
    cc96:	6198      	str	r0, [r3, #24]
    cc98:	290b      	cmp	r1, #11
    cc9a:	f340 80c4 	ble.w	ce26 <bus_fault+0x2c2>
    cc9e:	f04f 0c0c 	mov.w	ip, #12
    cca2:	b13a      	cbz	r2, ccb4 <bus_fault+0x150>
    cca4:	2103      	movs	r1, #3
    cca6:	7139      	strb	r1, [r7, #4]
    cca8:	2100      	movs	r1, #0
    ccaa:	7179      	strb	r1, [r7, #5]
    ccac:	71b9      	strb	r1, [r7, #6]
    ccae:	71f9      	strb	r1, [r7, #7]
    ccb0:	6878      	ldr	r0, [r7, #4]
    ccb2:	6118      	str	r0, [r3, #16]
    ccb4:	2100      	movs	r1, #0
    ccb6:	f36f 0100 	bfc	r1, #0, #1
    ccba:	f36f 0141 	bfc	r1, #1, #1
    ccbe:	f36f 0182 	bfc	r1, #2, #1
    ccc2:	f36f 01c5 	bfc	r1, #3, #3
    ccc6:	2301      	movs	r3, #1
    ccc8:	f363 1188 	bfi	r1, r3, #6, #3
    cccc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    ccd0:	f36c 2153 	bfi	r1, ip, #9, #11
    ccd4:	f36f 511f 	bfc	r1, #20, #12
    ccd8:	2300      	movs	r3, #0
    ccda:	485c      	ldr	r0, [pc, #368]	; (ce4c <bus_fault+0x2e8>)
    ccdc:	f7fe ff42 	bl	bb64 <z_impl_z_log_msg_static_create>
    cce0:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_UNSTACKING;
    cce2:	f04f 0818 	mov.w	r8, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    cce6:	4b5a      	ldr	r3, [pc, #360]	; (ce50 <bus_fault+0x2ec>)
    cce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ccea:	f413 7f00 	tst.w	r3, #512	; 0x200
    ccee:	f000 80bb 	beq.w	ce68 <bus_fault+0x304>
		PR_FAULT_INFO("  Precise data bus error");
    ccf2:	46e8      	mov	r8, sp
    ccf4:	b088      	sub	sp, #32
    ccf6:	466b      	mov	r3, sp
    ccf8:	f113 0210 	adds.w	r2, r3, #16
    ccfc:	f000 8096 	beq.w	ce2c <bus_fault+0x2c8>
    cd00:	210c      	movs	r1, #12
    cd02:	b152      	cbz	r2, cd1a <bus_fault+0x1b6>
    cd04:	4608      	mov	r0, r1
    cd06:	2904      	cmp	r1, #4
    cd08:	dd03      	ble.n	cd12 <bus_fault+0x1ae>
    cd0a:	f8df c150 	ldr.w	ip, [pc, #336]	; ce5c <bus_fault+0x2f8>
    cd0e:	f8c3 c014 	str.w	ip, [r3, #20]
    cd12:	2808      	cmp	r0, #8
    cd14:	dd01      	ble.n	cd1a <bus_fault+0x1b6>
    cd16:	484c      	ldr	r0, [pc, #304]	; (ce48 <bus_fault+0x2e4>)
    cd18:	6198      	str	r0, [r3, #24]
    cd1a:	290b      	cmp	r1, #11
    cd1c:	f340 8089 	ble.w	ce32 <bus_fault+0x2ce>
    cd20:	f04f 0c0c 	mov.w	ip, #12
    cd24:	b13a      	cbz	r2, cd36 <bus_fault+0x1d2>
    cd26:	2103      	movs	r1, #3
    cd28:	7139      	strb	r1, [r7, #4]
    cd2a:	2100      	movs	r1, #0
    cd2c:	7179      	strb	r1, [r7, #5]
    cd2e:	71b9      	strb	r1, [r7, #6]
    cd30:	71f9      	strb	r1, [r7, #7]
    cd32:	6878      	ldr	r0, [r7, #4]
    cd34:	6118      	str	r0, [r3, #16]
    cd36:	2100      	movs	r1, #0
    cd38:	f36f 0100 	bfc	r1, #0, #1
    cd3c:	f36f 0141 	bfc	r1, #1, #1
    cd40:	f36f 0182 	bfc	r1, #2, #1
    cd44:	f36f 01c5 	bfc	r1, #3, #3
    cd48:	2301      	movs	r3, #1
    cd4a:	f363 1188 	bfi	r1, r3, #6, #3
    cd4e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    cd52:	f36c 2153 	bfi	r1, ip, #9, #11
    cd56:	f36f 511f 	bfc	r1, #20, #12
    cd5a:	2300      	movs	r3, #0
    cd5c:	483b      	ldr	r0, [pc, #236]	; (ce4c <bus_fault+0x2e8>)
    cd5e:	f7fe ff01 	bl	bb64 <z_impl_z_log_msg_static_create>
    cd62:	46c5      	mov	sp, r8
		STORE_xFAR(bfar, SCB->BFAR);
    cd64:	4b3a      	ldr	r3, [pc, #232]	; (ce50 <bus_fault+0x2ec>)
    cd66:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    cd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd6a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    cd6e:	d079      	beq.n	ce64 <bus_fault+0x300>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    cd70:	46e8      	mov	r8, sp
    cd72:	b088      	sub	sp, #32
    cd74:	466b      	mov	r3, sp
    cd76:	f113 0210 	adds.w	r2, r3, #16
    cd7a:	d05d      	beq.n	ce38 <bus_fault+0x2d4>
    cd7c:	2110      	movs	r1, #16
    cd7e:	b18a      	cbz	r2, cda4 <bus_fault+0x240>
    cd80:	468c      	mov	ip, r1
    cd82:	2904      	cmp	r1, #4
    cd84:	dd03      	ble.n	cd8e <bus_fault+0x22a>
    cd86:	f8df e0d8 	ldr.w	lr, [pc, #216]	; ce60 <bus_fault+0x2fc>
    cd8a:	f8c3 e014 	str.w	lr, [r3, #20]
    cd8e:	f1bc 0f08 	cmp.w	ip, #8
    cd92:	dd03      	ble.n	cd9c <bus_fault+0x238>
    cd94:	f8df e0b0 	ldr.w	lr, [pc, #176]	; ce48 <bus_fault+0x2e4>
    cd98:	f8c3 e018 	str.w	lr, [r3, #24]
    cd9c:	f1bc 0f0c 	cmp.w	ip, #12
    cda0:	dd00      	ble.n	cda4 <bus_fault+0x240>
    cda2:	61d8      	str	r0, [r3, #28]
    cda4:	290f      	cmp	r1, #15
    cda6:	dd4a      	ble.n	ce3e <bus_fault+0x2da>
    cda8:	f04f 0c10 	mov.w	ip, #16
    cdac:	b13a      	cbz	r2, cdbe <bus_fault+0x25a>
    cdae:	2104      	movs	r1, #4
    cdb0:	7139      	strb	r1, [r7, #4]
    cdb2:	2100      	movs	r1, #0
    cdb4:	7179      	strb	r1, [r7, #5]
    cdb6:	71b9      	strb	r1, [r7, #6]
    cdb8:	71f9      	strb	r1, [r7, #7]
    cdba:	6878      	ldr	r0, [r7, #4]
    cdbc:	6118      	str	r0, [r3, #16]
    cdbe:	2100      	movs	r1, #0
    cdc0:	f36f 0100 	bfc	r1, #0, #1
    cdc4:	f36f 0141 	bfc	r1, #1, #1
    cdc8:	f36f 0182 	bfc	r1, #2, #1
    cdcc:	f36f 01c5 	bfc	r1, #3, #3
    cdd0:	2301      	movs	r3, #1
    cdd2:	f363 1188 	bfi	r1, r3, #6, #3
    cdd6:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    cdda:	f36c 2153 	bfi	r1, ip, #9, #11
    cdde:	f36f 511f 	bfc	r1, #20, #12
    cde2:	2300      	movs	r3, #0
    cde4:	4819      	ldr	r0, [pc, #100]	; (ce4c <bus_fault+0x2e8>)
    cde6:	f7fe febd 	bl	bb64 <z_impl_z_log_msg_static_create>
    cdea:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    cdec:	2e00      	cmp	r6, #0
    cdee:	f000 80c0 	beq.w	cf72 <bus_fault+0x40e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    cdf2:	4a17      	ldr	r2, [pc, #92]	; (ce50 <bus_fault+0x2ec>)
    cdf4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cdf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    cdfa:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    cdfc:	f04f 0819 	mov.w	r8, #25
    ce00:	e032      	b.n	ce68 <bus_fault+0x304>
	PR_FAULT_INFO("***** BUS FAULT *****");
    ce02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ce06:	e6bc      	b.n	cb82 <bus_fault+0x1e>
    ce08:	f06f 0c1b 	mvn.w	ip, #27
    ce0c:	e6ca      	b.n	cba4 <bus_fault+0x40>
		PR_FAULT_INFO("  Stacking error");
    ce0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ce12:	e6f5      	b.n	cc00 <bus_fault+0x9c>
    ce14:	f06f 0c1b 	mvn.w	ip, #27
    ce18:	e703      	b.n	cc22 <bus_fault+0xbe>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    ce1a:	f04f 0816 	mov.w	r8, #22
    ce1e:	e722      	b.n	cc66 <bus_fault+0x102>
		PR_FAULT_INFO("  Unstacking error");
    ce20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ce24:	e72c      	b.n	cc80 <bus_fault+0x11c>
    ce26:	f06f 0c1b 	mvn.w	ip, #27
    ce2a:	e73a      	b.n	cca2 <bus_fault+0x13e>
		PR_FAULT_INFO("  Precise data bus error");
    ce2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ce30:	e767      	b.n	cd02 <bus_fault+0x19e>
    ce32:	f06f 0c1b 	mvn.w	ip, #27
    ce36:	e775      	b.n	cd24 <bus_fault+0x1c0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ce38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ce3c:	e79f      	b.n	cd7e <bus_fault+0x21a>
    ce3e:	f06f 0c1b 	mvn.w	ip, #27
    ce42:	e7b3      	b.n	cdac <bus_fault+0x248>
    ce44:	00019f14 	.word	0x00019f14
    ce48:	0001a2f0 	.word	0x0001a2f0
    ce4c:	00019a04 	.word	0x00019a04
    ce50:	e000ed00 	.word	0xe000ed00
    ce54:	00019f30 	.word	0x00019f30
    ce58:	00019f48 	.word	0x00019f48
    ce5c:	00019f60 	.word	0x00019f60
    ce60:	00019f80 	.word	0x00019f80
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    ce64:	f04f 0819 	mov.w	r8, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ce68:	4b6a      	ldr	r3, [pc, #424]	; (d014 <bus_fault+0x4b0>)
    ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ce70:	d035      	beq.n	cede <bus_fault+0x37a>
		PR_FAULT_INFO("  Imprecise data bus error");
    ce72:	46e8      	mov	r8, sp
    ce74:	b088      	sub	sp, #32
    ce76:	466b      	mov	r3, sp
    ce78:	f113 0210 	adds.w	r2, r3, #16
    ce7c:	d07c      	beq.n	cf78 <bus_fault+0x414>
    ce7e:	210c      	movs	r1, #12
    ce80:	b142      	cbz	r2, ce94 <bus_fault+0x330>
    ce82:	4608      	mov	r0, r1
    ce84:	2904      	cmp	r1, #4
    ce86:	dd01      	ble.n	ce8c <bus_fault+0x328>
    ce88:	4e63      	ldr	r6, [pc, #396]	; (d018 <bus_fault+0x4b4>)
    ce8a:	615e      	str	r6, [r3, #20]
    ce8c:	2808      	cmp	r0, #8
    ce8e:	dd01      	ble.n	ce94 <bus_fault+0x330>
    ce90:	4862      	ldr	r0, [pc, #392]	; (d01c <bus_fault+0x4b8>)
    ce92:	6198      	str	r0, [r3, #24]
    ce94:	290b      	cmp	r1, #11
    ce96:	dd72      	ble.n	cf7e <bus_fault+0x41a>
    ce98:	260c      	movs	r6, #12
    ce9a:	b13a      	cbz	r2, ceac <bus_fault+0x348>
    ce9c:	2103      	movs	r1, #3
    ce9e:	7139      	strb	r1, [r7, #4]
    cea0:	2100      	movs	r1, #0
    cea2:	7179      	strb	r1, [r7, #5]
    cea4:	71b9      	strb	r1, [r7, #6]
    cea6:	71f9      	strb	r1, [r7, #7]
    cea8:	6878      	ldr	r0, [r7, #4]
    ceaa:	6118      	str	r0, [r3, #16]
    ceac:	2100      	movs	r1, #0
    ceae:	f36f 0100 	bfc	r1, #0, #1
    ceb2:	f36f 0141 	bfc	r1, #1, #1
    ceb6:	f36f 0182 	bfc	r1, #2, #1
    ceba:	f36f 01c5 	bfc	r1, #3, #3
    cebe:	2301      	movs	r3, #1
    cec0:	f363 1188 	bfi	r1, r3, #6, #3
    cec4:	f3c6 060a 	ubfx	r6, r6, #0, #11
    cec8:	f366 2153 	bfi	r1, r6, #9, #11
    cecc:	f36f 511f 	bfc	r1, #20, #12
    ced0:	2300      	movs	r3, #0
    ced2:	4853      	ldr	r0, [pc, #332]	; (d020 <bus_fault+0x4bc>)
    ced4:	f7fe fe46 	bl	bb64 <z_impl_z_log_msg_static_create>
    ced8:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    ceda:	f04f 081a 	mov.w	r8, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    cede:	4b4d      	ldr	r3, [pc, #308]	; (d014 <bus_fault+0x4b0>)
    cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cee2:	f413 7f80 	tst.w	r3, #256	; 0x100
    cee6:	d053      	beq.n	cf90 <bus_fault+0x42c>
		PR_FAULT_INFO("  Instruction bus error");
    cee8:	46e8      	mov	r8, sp
    ceea:	b088      	sub	sp, #32
    ceec:	466b      	mov	r3, sp
    ceee:	f113 0210 	adds.w	r2, r3, #16
    cef2:	d047      	beq.n	cf84 <bus_fault+0x420>
    cef4:	210c      	movs	r1, #12
    cef6:	b142      	cbz	r2, cf0a <bus_fault+0x3a6>
    cef8:	4608      	mov	r0, r1
    cefa:	2904      	cmp	r1, #4
    cefc:	dd01      	ble.n	cf02 <bus_fault+0x39e>
    cefe:	4e49      	ldr	r6, [pc, #292]	; (d024 <bus_fault+0x4c0>)
    cf00:	615e      	str	r6, [r3, #20]
    cf02:	2808      	cmp	r0, #8
    cf04:	dd01      	ble.n	cf0a <bus_fault+0x3a6>
    cf06:	4845      	ldr	r0, [pc, #276]	; (d01c <bus_fault+0x4b8>)
    cf08:	6198      	str	r0, [r3, #24]
    cf0a:	290b      	cmp	r1, #11
    cf0c:	dd3d      	ble.n	cf8a <bus_fault+0x426>
    cf0e:	260c      	movs	r6, #12
    cf10:	b13a      	cbz	r2, cf22 <bus_fault+0x3be>
    cf12:	2103      	movs	r1, #3
    cf14:	7139      	strb	r1, [r7, #4]
    cf16:	2100      	movs	r1, #0
    cf18:	7179      	strb	r1, [r7, #5]
    cf1a:	71b9      	strb	r1, [r7, #6]
    cf1c:	71f9      	strb	r1, [r7, #7]
    cf1e:	6878      	ldr	r0, [r7, #4]
    cf20:	6118      	str	r0, [r3, #16]
    cf22:	2100      	movs	r1, #0
    cf24:	f36f 0100 	bfc	r1, #0, #1
    cf28:	f36f 0141 	bfc	r1, #1, #1
    cf2c:	f36f 0182 	bfc	r1, #2, #1
    cf30:	f36f 01c5 	bfc	r1, #3, #3
    cf34:	2301      	movs	r3, #1
    cf36:	f363 1188 	bfi	r1, r3, #6, #3
    cf3a:	f3c6 060a 	ubfx	r6, r6, #0, #11
    cf3e:	f366 2153 	bfi	r1, r6, #9, #11
    cf42:	f36f 511f 	bfc	r1, #20, #12
    cf46:	2300      	movs	r3, #0
    cf48:	4835      	ldr	r0, [pc, #212]	; (d020 <bus_fault+0x4bc>)
    cf4a:	f7fe fe0b 	bl	bb64 <z_impl_z_log_msg_static_create>
    cf4e:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    cf50:	f04f 081b 	mov.w	r8, #27
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    cf54:	4a2f      	ldr	r2, [pc, #188]	; (d014 <bus_fault+0x4b0>)
    cf56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cf58:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    cf5c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    cf5e:	2101      	movs	r1, #1
    cf60:	4628      	mov	r0, r5
    cf62:	f009 fe73 	bl	16c4c <memory_fault_recoverable>
    cf66:	7020      	strb	r0, [r4, #0]
}
    cf68:	4640      	mov	r0, r8
    cf6a:	3708      	adds	r7, #8
    cf6c:	46bd      	mov	sp, r7
    cf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    cf72:	f04f 0819 	mov.w	r8, #25
    cf76:	e777      	b.n	ce68 <bus_fault+0x304>
		PR_FAULT_INFO("  Imprecise data bus error");
    cf78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cf7c:	e780      	b.n	ce80 <bus_fault+0x31c>
    cf7e:	f06f 061b 	mvn.w	r6, #27
    cf82:	e78a      	b.n	ce9a <bus_fault+0x336>
		PR_FAULT_INFO("  Instruction bus error");
    cf84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cf88:	e7b5      	b.n	cef6 <bus_fault+0x392>
    cf8a:	f06f 061b 	mvn.w	r6, #27
    cf8e:	e7bf      	b.n	cf10 <bus_fault+0x3ac>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    cf90:	4b20      	ldr	r3, [pc, #128]	; (d014 <bus_fault+0x4b0>)
    cf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf94:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    cf98:	d0dc      	beq.n	cf54 <bus_fault+0x3f0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    cf9a:	46e8      	mov	r8, sp
    cf9c:	b088      	sub	sp, #32
    cf9e:	466b      	mov	r3, sp
    cfa0:	f113 0210 	adds.w	r2, r3, #16
    cfa4:	d030      	beq.n	d008 <bus_fault+0x4a4>
    cfa6:	210c      	movs	r1, #12
    cfa8:	b142      	cbz	r2, cfbc <bus_fault+0x458>
    cfaa:	4608      	mov	r0, r1
    cfac:	2904      	cmp	r1, #4
    cfae:	dd01      	ble.n	cfb4 <bus_fault+0x450>
    cfb0:	4e1d      	ldr	r6, [pc, #116]	; (d028 <bus_fault+0x4c4>)
    cfb2:	615e      	str	r6, [r3, #20]
    cfb4:	2808      	cmp	r0, #8
    cfb6:	dd01      	ble.n	cfbc <bus_fault+0x458>
    cfb8:	4818      	ldr	r0, [pc, #96]	; (d01c <bus_fault+0x4b8>)
    cfba:	6198      	str	r0, [r3, #24]
    cfbc:	290b      	cmp	r1, #11
    cfbe:	dd26      	ble.n	d00e <bus_fault+0x4aa>
    cfc0:	260c      	movs	r6, #12
    cfc2:	b13a      	cbz	r2, cfd4 <bus_fault+0x470>
    cfc4:	2103      	movs	r1, #3
    cfc6:	7139      	strb	r1, [r7, #4]
    cfc8:	2100      	movs	r1, #0
    cfca:	7179      	strb	r1, [r7, #5]
    cfcc:	71b9      	strb	r1, [r7, #6]
    cfce:	71f9      	strb	r1, [r7, #7]
    cfd0:	6878      	ldr	r0, [r7, #4]
    cfd2:	6118      	str	r0, [r3, #16]
    cfd4:	2100      	movs	r1, #0
    cfd6:	f36f 0100 	bfc	r1, #0, #1
    cfda:	f36f 0141 	bfc	r1, #1, #1
    cfde:	f36f 0182 	bfc	r1, #2, #1
    cfe2:	f36f 01c5 	bfc	r1, #3, #3
    cfe6:	2301      	movs	r3, #1
    cfe8:	f363 1188 	bfi	r1, r3, #6, #3
    cfec:	f3c6 060a 	ubfx	r6, r6, #0, #11
    cff0:	f366 2153 	bfi	r1, r6, #9, #11
    cff4:	f36f 511f 	bfc	r1, #20, #12
    cff8:	2300      	movs	r3, #0
    cffa:	4809      	ldr	r0, [pc, #36]	; (d020 <bus_fault+0x4bc>)
    cffc:	f7fe fdb2 	bl	bb64 <z_impl_z_log_msg_static_create>
    d000:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    d002:	f04f 081c 	mov.w	r8, #28
    d006:	e7a5      	b.n	cf54 <bus_fault+0x3f0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d00c:	e7cc      	b.n	cfa8 <bus_fault+0x444>
    d00e:	f06f 061b 	mvn.w	r6, #27
    d012:	e7d6      	b.n	cfc2 <bus_fault+0x45e>
    d014:	e000ed00 	.word	0xe000ed00
    d018:	00019f9c 	.word	0x00019f9c
    d01c:	0001a2f0 	.word	0x0001a2f0
    d020:	00019a04 	.word	0x00019a04
    d024:	00019fbc 	.word	0x00019fbc
    d028:	00019fd8 	.word	0x00019fd8

0000d02c <usage_fault>:
{
    d02c:	b5b0      	push	{r4, r5, r7, lr}
    d02e:	b082      	sub	sp, #8
    d030:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** USAGE FAULT *****");
    d032:	466c      	mov	r4, sp
    d034:	b088      	sub	sp, #32
    d036:	466b      	mov	r3, sp
    d038:	f113 0210 	adds.w	r2, r3, #16
    d03c:	f000 816a 	beq.w	d314 <usage_fault+0x2e8>
    d040:	210c      	movs	r1, #12
    d042:	b142      	cbz	r2, d056 <usage_fault+0x2a>
    d044:	4608      	mov	r0, r1
    d046:	2904      	cmp	r1, #4
    d048:	dd01      	ble.n	d04e <usage_fault+0x22>
    d04a:	4db8      	ldr	r5, [pc, #736]	; (d32c <usage_fault+0x300>)
    d04c:	615d      	str	r5, [r3, #20]
    d04e:	2808      	cmp	r0, #8
    d050:	dd01      	ble.n	d056 <usage_fault+0x2a>
    d052:	48b7      	ldr	r0, [pc, #732]	; (d330 <usage_fault+0x304>)
    d054:	6198      	str	r0, [r3, #24]
    d056:	290b      	cmp	r1, #11
    d058:	f340 815f 	ble.w	d31a <usage_fault+0x2ee>
    d05c:	f04f 0c0c 	mov.w	ip, #12
    d060:	b13a      	cbz	r2, d072 <usage_fault+0x46>
    d062:	2103      	movs	r1, #3
    d064:	7139      	strb	r1, [r7, #4]
    d066:	2100      	movs	r1, #0
    d068:	7179      	strb	r1, [r7, #5]
    d06a:	71b9      	strb	r1, [r7, #6]
    d06c:	71f9      	strb	r1, [r7, #7]
    d06e:	6878      	ldr	r0, [r7, #4]
    d070:	6118      	str	r0, [r3, #16]
    d072:	2100      	movs	r1, #0
    d074:	f36f 0100 	bfc	r1, #0, #1
    d078:	f36f 0141 	bfc	r1, #1, #1
    d07c:	f36f 0182 	bfc	r1, #2, #1
    d080:	f36f 01c5 	bfc	r1, #3, #3
    d084:	2301      	movs	r3, #1
    d086:	f363 1188 	bfi	r1, r3, #6, #3
    d08a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d08e:	f36c 2153 	bfi	r1, ip, #9, #11
    d092:	f36f 511f 	bfc	r1, #20, #12
    d096:	2300      	movs	r3, #0
    d098:	48a6      	ldr	r0, [pc, #664]	; (d334 <usage_fault+0x308>)
    d09a:	f7fe fd63 	bl	bb64 <z_impl_z_log_msg_static_create>
    d09e:	46a5      	mov	sp, r4
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d0a0:	4ba5      	ldr	r3, [pc, #660]	; (d338 <usage_fault+0x30c>)
    d0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    d0a8:	f000 8152 	beq.w	d350 <usage_fault+0x324>
		PR_FAULT_INFO("  Division by zero");
    d0ac:	466d      	mov	r5, sp
    d0ae:	b088      	sub	sp, #32
    d0b0:	466b      	mov	r3, sp
    d0b2:	f113 0210 	adds.w	r2, r3, #16
    d0b6:	f000 8133 	beq.w	d320 <usage_fault+0x2f4>
    d0ba:	210c      	movs	r1, #12
    d0bc:	b142      	cbz	r2, d0d0 <usage_fault+0xa4>
    d0be:	4608      	mov	r0, r1
    d0c0:	2904      	cmp	r1, #4
    d0c2:	dd01      	ble.n	d0c8 <usage_fault+0x9c>
    d0c4:	4c9d      	ldr	r4, [pc, #628]	; (d33c <usage_fault+0x310>)
    d0c6:	615c      	str	r4, [r3, #20]
    d0c8:	2808      	cmp	r0, #8
    d0ca:	dd01      	ble.n	d0d0 <usage_fault+0xa4>
    d0cc:	4898      	ldr	r0, [pc, #608]	; (d330 <usage_fault+0x304>)
    d0ce:	6198      	str	r0, [r3, #24]
    d0d0:	290b      	cmp	r1, #11
    d0d2:	f340 8128 	ble.w	d326 <usage_fault+0x2fa>
    d0d6:	240c      	movs	r4, #12
    d0d8:	b13a      	cbz	r2, d0ea <usage_fault+0xbe>
    d0da:	2103      	movs	r1, #3
    d0dc:	7139      	strb	r1, [r7, #4]
    d0de:	2100      	movs	r1, #0
    d0e0:	7179      	strb	r1, [r7, #5]
    d0e2:	71b9      	strb	r1, [r7, #6]
    d0e4:	71f9      	strb	r1, [r7, #7]
    d0e6:	6878      	ldr	r0, [r7, #4]
    d0e8:	6118      	str	r0, [r3, #16]
    d0ea:	2100      	movs	r1, #0
    d0ec:	f36f 0100 	bfc	r1, #0, #1
    d0f0:	f36f 0141 	bfc	r1, #1, #1
    d0f4:	f36f 0182 	bfc	r1, #2, #1
    d0f8:	f36f 01c5 	bfc	r1, #3, #3
    d0fc:	2301      	movs	r3, #1
    d0fe:	f363 1188 	bfi	r1, r3, #6, #3
    d102:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d106:	f364 2153 	bfi	r1, r4, #9, #11
    d10a:	f36f 511f 	bfc	r1, #20, #12
    d10e:	2300      	movs	r3, #0
    d110:	4888      	ldr	r0, [pc, #544]	; (d334 <usage_fault+0x308>)
    d112:	f7fe fd27 	bl	bb64 <z_impl_z_log_msg_static_create>
    d116:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_DIV_0;
    d118:	201e      	movs	r0, #30
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d11a:	4b87      	ldr	r3, [pc, #540]	; (d338 <usage_fault+0x30c>)
    d11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d11e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    d122:	d036      	beq.n	d192 <usage_fault+0x166>
		PR_FAULT_INFO("  Unaligned memory access");
    d124:	466d      	mov	r5, sp
    d126:	b088      	sub	sp, #32
    d128:	466b      	mov	r3, sp
    d12a:	f113 0210 	adds.w	r2, r3, #16
    d12e:	f000 8111 	beq.w	d354 <usage_fault+0x328>
    d132:	210c      	movs	r1, #12
    d134:	b142      	cbz	r2, d148 <usage_fault+0x11c>
    d136:	4608      	mov	r0, r1
    d138:	2904      	cmp	r1, #4
    d13a:	dd01      	ble.n	d140 <usage_fault+0x114>
    d13c:	4c80      	ldr	r4, [pc, #512]	; (d340 <usage_fault+0x314>)
    d13e:	615c      	str	r4, [r3, #20]
    d140:	2808      	cmp	r0, #8
    d142:	dd01      	ble.n	d148 <usage_fault+0x11c>
    d144:	487a      	ldr	r0, [pc, #488]	; (d330 <usage_fault+0x304>)
    d146:	6198      	str	r0, [r3, #24]
    d148:	290b      	cmp	r1, #11
    d14a:	f340 8106 	ble.w	d35a <usage_fault+0x32e>
    d14e:	240c      	movs	r4, #12
    d150:	b13a      	cbz	r2, d162 <usage_fault+0x136>
    d152:	2103      	movs	r1, #3
    d154:	7139      	strb	r1, [r7, #4]
    d156:	2100      	movs	r1, #0
    d158:	7179      	strb	r1, [r7, #5]
    d15a:	71b9      	strb	r1, [r7, #6]
    d15c:	71f9      	strb	r1, [r7, #7]
    d15e:	6878      	ldr	r0, [r7, #4]
    d160:	6118      	str	r0, [r3, #16]
    d162:	2100      	movs	r1, #0
    d164:	f36f 0100 	bfc	r1, #0, #1
    d168:	f36f 0141 	bfc	r1, #1, #1
    d16c:	f36f 0182 	bfc	r1, #2, #1
    d170:	f36f 01c5 	bfc	r1, #3, #3
    d174:	2301      	movs	r3, #1
    d176:	f363 1188 	bfi	r1, r3, #6, #3
    d17a:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d17e:	f364 2153 	bfi	r1, r4, #9, #11
    d182:	f36f 511f 	bfc	r1, #20, #12
    d186:	2300      	movs	r3, #0
    d188:	486a      	ldr	r0, [pc, #424]	; (d334 <usage_fault+0x308>)
    d18a:	f7fe fceb 	bl	bb64 <z_impl_z_log_msg_static_create>
    d18e:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    d190:	201f      	movs	r0, #31
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d192:	4b69      	ldr	r3, [pc, #420]	; (d338 <usage_fault+0x30c>)
    d194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d196:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    d19a:	d036      	beq.n	d20a <usage_fault+0x1de>
		PR_FAULT_INFO("  No coprocessor instructions");
    d19c:	466d      	mov	r5, sp
    d19e:	b088      	sub	sp, #32
    d1a0:	466b      	mov	r3, sp
    d1a2:	f113 0210 	adds.w	r2, r3, #16
    d1a6:	f000 80db 	beq.w	d360 <usage_fault+0x334>
    d1aa:	210c      	movs	r1, #12
    d1ac:	b142      	cbz	r2, d1c0 <usage_fault+0x194>
    d1ae:	4608      	mov	r0, r1
    d1b0:	2904      	cmp	r1, #4
    d1b2:	dd01      	ble.n	d1b8 <usage_fault+0x18c>
    d1b4:	4c63      	ldr	r4, [pc, #396]	; (d344 <usage_fault+0x318>)
    d1b6:	615c      	str	r4, [r3, #20]
    d1b8:	2808      	cmp	r0, #8
    d1ba:	dd01      	ble.n	d1c0 <usage_fault+0x194>
    d1bc:	485c      	ldr	r0, [pc, #368]	; (d330 <usage_fault+0x304>)
    d1be:	6198      	str	r0, [r3, #24]
    d1c0:	290b      	cmp	r1, #11
    d1c2:	f340 80d0 	ble.w	d366 <usage_fault+0x33a>
    d1c6:	240c      	movs	r4, #12
    d1c8:	b13a      	cbz	r2, d1da <usage_fault+0x1ae>
    d1ca:	2103      	movs	r1, #3
    d1cc:	7139      	strb	r1, [r7, #4]
    d1ce:	2100      	movs	r1, #0
    d1d0:	7179      	strb	r1, [r7, #5]
    d1d2:	71b9      	strb	r1, [r7, #6]
    d1d4:	71f9      	strb	r1, [r7, #7]
    d1d6:	6878      	ldr	r0, [r7, #4]
    d1d8:	6118      	str	r0, [r3, #16]
    d1da:	2100      	movs	r1, #0
    d1dc:	f36f 0100 	bfc	r1, #0, #1
    d1e0:	f36f 0141 	bfc	r1, #1, #1
    d1e4:	f36f 0182 	bfc	r1, #2, #1
    d1e8:	f36f 01c5 	bfc	r1, #3, #3
    d1ec:	2301      	movs	r3, #1
    d1ee:	f363 1188 	bfi	r1, r3, #6, #3
    d1f2:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d1f6:	f364 2153 	bfi	r1, r4, #9, #11
    d1fa:	f36f 511f 	bfc	r1, #20, #12
    d1fe:	2300      	movs	r3, #0
    d200:	484c      	ldr	r0, [pc, #304]	; (d334 <usage_fault+0x308>)
    d202:	f7fe fcaf 	bl	bb64 <z_impl_z_log_msg_static_create>
    d206:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    d208:	2021      	movs	r0, #33	; 0x21
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d20a:	4b4b      	ldr	r3, [pc, #300]	; (d338 <usage_fault+0x30c>)
    d20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d20e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    d212:	d036      	beq.n	d282 <usage_fault+0x256>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d214:	466d      	mov	r5, sp
    d216:	b088      	sub	sp, #32
    d218:	466b      	mov	r3, sp
    d21a:	f113 0210 	adds.w	r2, r3, #16
    d21e:	f000 80a5 	beq.w	d36c <usage_fault+0x340>
    d222:	210c      	movs	r1, #12
    d224:	b142      	cbz	r2, d238 <usage_fault+0x20c>
    d226:	4608      	mov	r0, r1
    d228:	2904      	cmp	r1, #4
    d22a:	dd01      	ble.n	d230 <usage_fault+0x204>
    d22c:	4c46      	ldr	r4, [pc, #280]	; (d348 <usage_fault+0x31c>)
    d22e:	615c      	str	r4, [r3, #20]
    d230:	2808      	cmp	r0, #8
    d232:	dd01      	ble.n	d238 <usage_fault+0x20c>
    d234:	483e      	ldr	r0, [pc, #248]	; (d330 <usage_fault+0x304>)
    d236:	6198      	str	r0, [r3, #24]
    d238:	290b      	cmp	r1, #11
    d23a:	f340 809a 	ble.w	d372 <usage_fault+0x346>
    d23e:	240c      	movs	r4, #12
    d240:	b13a      	cbz	r2, d252 <usage_fault+0x226>
    d242:	2103      	movs	r1, #3
    d244:	7139      	strb	r1, [r7, #4]
    d246:	2100      	movs	r1, #0
    d248:	7179      	strb	r1, [r7, #5]
    d24a:	71b9      	strb	r1, [r7, #6]
    d24c:	71f9      	strb	r1, [r7, #7]
    d24e:	6878      	ldr	r0, [r7, #4]
    d250:	6118      	str	r0, [r3, #16]
    d252:	2100      	movs	r1, #0
    d254:	f36f 0100 	bfc	r1, #0, #1
    d258:	f36f 0141 	bfc	r1, #1, #1
    d25c:	f36f 0182 	bfc	r1, #2, #1
    d260:	f36f 01c5 	bfc	r1, #3, #3
    d264:	2301      	movs	r3, #1
    d266:	f363 1188 	bfi	r1, r3, #6, #3
    d26a:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d26e:	f364 2153 	bfi	r1, r4, #9, #11
    d272:	f36f 511f 	bfc	r1, #20, #12
    d276:	2300      	movs	r3, #0
    d278:	482e      	ldr	r0, [pc, #184]	; (d334 <usage_fault+0x308>)
    d27a:	f7fe fc73 	bl	bb64 <z_impl_z_log_msg_static_create>
    d27e:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    d280:	2022      	movs	r0, #34	; 0x22
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d282:	4b2d      	ldr	r3, [pc, #180]	; (d338 <usage_fault+0x30c>)
    d284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d286:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    d28a:	d034      	beq.n	d2f6 <usage_fault+0x2ca>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d28c:	466d      	mov	r5, sp
    d28e:	b088      	sub	sp, #32
    d290:	466b      	mov	r3, sp
    d292:	f113 0210 	adds.w	r2, r3, #16
    d296:	d06f      	beq.n	d378 <usage_fault+0x34c>
    d298:	210c      	movs	r1, #12
    d29a:	b142      	cbz	r2, d2ae <usage_fault+0x282>
    d29c:	4608      	mov	r0, r1
    d29e:	2904      	cmp	r1, #4
    d2a0:	dd01      	ble.n	d2a6 <usage_fault+0x27a>
    d2a2:	4c2a      	ldr	r4, [pc, #168]	; (d34c <usage_fault+0x320>)
    d2a4:	615c      	str	r4, [r3, #20]
    d2a6:	2808      	cmp	r0, #8
    d2a8:	dd01      	ble.n	d2ae <usage_fault+0x282>
    d2aa:	4821      	ldr	r0, [pc, #132]	; (d330 <usage_fault+0x304>)
    d2ac:	6198      	str	r0, [r3, #24]
    d2ae:	290b      	cmp	r1, #11
    d2b0:	dd65      	ble.n	d37e <usage_fault+0x352>
    d2b2:	240c      	movs	r4, #12
    d2b4:	b13a      	cbz	r2, d2c6 <usage_fault+0x29a>
    d2b6:	2103      	movs	r1, #3
    d2b8:	7139      	strb	r1, [r7, #4]
    d2ba:	2100      	movs	r1, #0
    d2bc:	7179      	strb	r1, [r7, #5]
    d2be:	71b9      	strb	r1, [r7, #6]
    d2c0:	71f9      	strb	r1, [r7, #7]
    d2c2:	6878      	ldr	r0, [r7, #4]
    d2c4:	6118      	str	r0, [r3, #16]
    d2c6:	2100      	movs	r1, #0
    d2c8:	f36f 0100 	bfc	r1, #0, #1
    d2cc:	f36f 0141 	bfc	r1, #1, #1
    d2d0:	f36f 0182 	bfc	r1, #2, #1
    d2d4:	f36f 01c5 	bfc	r1, #3, #3
    d2d8:	2301      	movs	r3, #1
    d2da:	f363 1188 	bfi	r1, r3, #6, #3
    d2de:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d2e2:	f364 2153 	bfi	r1, r4, #9, #11
    d2e6:	f36f 511f 	bfc	r1, #20, #12
    d2ea:	2300      	movs	r3, #0
    d2ec:	4811      	ldr	r0, [pc, #68]	; (d334 <usage_fault+0x308>)
    d2ee:	f7fe fc39 	bl	bb64 <z_impl_z_log_msg_static_create>
    d2f2:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    d2f4:	2023      	movs	r0, #35	; 0x23
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d2f6:	4b10      	ldr	r3, [pc, #64]	; (d338 <usage_fault+0x30c>)
    d2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d2fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d2fe:	d141      	bne.n	d384 <usage_fault+0x358>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d300:	4a0d      	ldr	r2, [pc, #52]	; (d338 <usage_fault+0x30c>)
    d302:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d304:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d308:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d30c:	6293      	str	r3, [r2, #40]	; 0x28
}
    d30e:	3708      	adds	r7, #8
    d310:	46bd      	mov	sp, r7
    d312:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    d314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d318:	e693      	b.n	d042 <usage_fault+0x16>
    d31a:	f06f 0c1b 	mvn.w	ip, #27
    d31e:	e69f      	b.n	d060 <usage_fault+0x34>
		PR_FAULT_INFO("  Division by zero");
    d320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d324:	e6ca      	b.n	d0bc <usage_fault+0x90>
    d326:	f06f 041b 	mvn.w	r4, #27
    d32a:	e6d5      	b.n	d0d8 <usage_fault+0xac>
    d32c:	0001a00c 	.word	0x0001a00c
    d330:	0001a2e4 	.word	0x0001a2e4
    d334:	00019a04 	.word	0x00019a04
    d338:	e000ed00 	.word	0xe000ed00
    d33c:	0001a028 	.word	0x0001a028
    d340:	0001a040 	.word	0x0001a040
    d344:	0001a060 	.word	0x0001a060
    d348:	0001a084 	.word	0x0001a084
    d34c:	0001a0b0 	.word	0x0001a0b0
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    d350:	201d      	movs	r0, #29
    d352:	e6e2      	b.n	d11a <usage_fault+0xee>
		PR_FAULT_INFO("  Unaligned memory access");
    d354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d358:	e6ec      	b.n	d134 <usage_fault+0x108>
    d35a:	f06f 041b 	mvn.w	r4, #27
    d35e:	e6f7      	b.n	d150 <usage_fault+0x124>
		PR_FAULT_INFO("  No coprocessor instructions");
    d360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d364:	e722      	b.n	d1ac <usage_fault+0x180>
    d366:	f06f 041b 	mvn.w	r4, #27
    d36a:	e72d      	b.n	d1c8 <usage_fault+0x19c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d36c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d370:	e758      	b.n	d224 <usage_fault+0x1f8>
    d372:	f06f 041b 	mvn.w	r4, #27
    d376:	e763      	b.n	d240 <usage_fault+0x214>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d37c:	e78d      	b.n	d29a <usage_fault+0x26e>
    d37e:	f06f 041b 	mvn.w	r4, #27
    d382:	e797      	b.n	d2b4 <usage_fault+0x288>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d384:	466d      	mov	r5, sp
    d386:	b088      	sub	sp, #32
    d388:	466b      	mov	r3, sp
    d38a:	f113 0210 	adds.w	r2, r3, #16
    d38e:	d02f      	beq.n	d3f0 <usage_fault+0x3c4>
    d390:	210c      	movs	r1, #12
    d392:	b142      	cbz	r2, d3a6 <usage_fault+0x37a>
    d394:	4608      	mov	r0, r1
    d396:	2904      	cmp	r1, #4
    d398:	dd01      	ble.n	d39e <usage_fault+0x372>
    d39a:	4c18      	ldr	r4, [pc, #96]	; (d3fc <usage_fault+0x3d0>)
    d39c:	615c      	str	r4, [r3, #20]
    d39e:	2808      	cmp	r0, #8
    d3a0:	dd01      	ble.n	d3a6 <usage_fault+0x37a>
    d3a2:	4817      	ldr	r0, [pc, #92]	; (d400 <usage_fault+0x3d4>)
    d3a4:	6198      	str	r0, [r3, #24]
    d3a6:	290b      	cmp	r1, #11
    d3a8:	dd25      	ble.n	d3f6 <usage_fault+0x3ca>
    d3aa:	240c      	movs	r4, #12
    d3ac:	b13a      	cbz	r2, d3be <usage_fault+0x392>
    d3ae:	2103      	movs	r1, #3
    d3b0:	7139      	strb	r1, [r7, #4]
    d3b2:	2100      	movs	r1, #0
    d3b4:	7179      	strb	r1, [r7, #5]
    d3b6:	71b9      	strb	r1, [r7, #6]
    d3b8:	71f9      	strb	r1, [r7, #7]
    d3ba:	6878      	ldr	r0, [r7, #4]
    d3bc:	6118      	str	r0, [r3, #16]
    d3be:	2100      	movs	r1, #0
    d3c0:	f36f 0100 	bfc	r1, #0, #1
    d3c4:	f36f 0141 	bfc	r1, #1, #1
    d3c8:	f36f 0182 	bfc	r1, #2, #1
    d3cc:	f36f 01c5 	bfc	r1, #3, #3
    d3d0:	2301      	movs	r3, #1
    d3d2:	f363 1188 	bfi	r1, r3, #6, #3
    d3d6:	f3c4 040a 	ubfx	r4, r4, #0, #11
    d3da:	f364 2153 	bfi	r1, r4, #9, #11
    d3de:	f36f 511f 	bfc	r1, #20, #12
    d3e2:	2300      	movs	r3, #0
    d3e4:	4807      	ldr	r0, [pc, #28]	; (d404 <usage_fault+0x3d8>)
    d3e6:	f7fe fbbd 	bl	bb64 <z_impl_z_log_msg_static_create>
    d3ea:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    d3ec:	2024      	movs	r0, #36	; 0x24
    d3ee:	e787      	b.n	d300 <usage_fault+0x2d4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d3f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d3f4:	e7cd      	b.n	d392 <usage_fault+0x366>
    d3f6:	f06f 041b 	mvn.w	r4, #27
    d3fa:	e7d7      	b.n	d3ac <usage_fault+0x380>
    d3fc:	0001a0d0 	.word	0x0001a0d0
    d400:	0001a2e4 	.word	0x0001a2e4
    d404:	00019a04 	.word	0x00019a04

0000d408 <debug_monitor>:
{
    d408:	b590      	push	{r4, r7, lr}
    d40a:	b083      	sub	sp, #12
    d40c:	af00      	add	r7, sp, #0
	*recoverable = false;
    d40e:	2300      	movs	r3, #0
    d410:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    d412:	b088      	sub	sp, #32
    d414:	466b      	mov	r3, sp
    d416:	f113 0210 	adds.w	r2, r3, #16
    d41a:	d030      	beq.n	d47e <debug_monitor+0x76>
    d41c:	210c      	movs	r1, #12
    d41e:	b142      	cbz	r2, d432 <debug_monitor+0x2a>
    d420:	4608      	mov	r0, r1
    d422:	2904      	cmp	r1, #4
    d424:	dd01      	ble.n	d42a <debug_monitor+0x22>
    d426:	4c19      	ldr	r4, [pc, #100]	; (d48c <debug_monitor+0x84>)
    d428:	615c      	str	r4, [r3, #20]
    d42a:	2808      	cmp	r0, #8
    d42c:	dd01      	ble.n	d432 <debug_monitor+0x2a>
    d42e:	4818      	ldr	r0, [pc, #96]	; (d490 <debug_monitor+0x88>)
    d430:	6198      	str	r0, [r3, #24]
    d432:	290b      	cmp	r1, #11
    d434:	dd26      	ble.n	d484 <debug_monitor+0x7c>
    d436:	f04f 0c0c 	mov.w	ip, #12
    d43a:	b13a      	cbz	r2, d44c <debug_monitor+0x44>
    d43c:	2103      	movs	r1, #3
    d43e:	7139      	strb	r1, [r7, #4]
    d440:	2100      	movs	r1, #0
    d442:	7179      	strb	r1, [r7, #5]
    d444:	71b9      	strb	r1, [r7, #6]
    d446:	71f9      	strb	r1, [r7, #7]
    d448:	6878      	ldr	r0, [r7, #4]
    d44a:	6118      	str	r0, [r3, #16]
    d44c:	2100      	movs	r1, #0
    d44e:	f36f 0100 	bfc	r1, #0, #1
    d452:	f36f 0141 	bfc	r1, #1, #1
    d456:	f36f 0182 	bfc	r1, #2, #1
    d45a:	f36f 01c5 	bfc	r1, #3, #3
    d45e:	2301      	movs	r3, #1
    d460:	f363 1188 	bfi	r1, r3, #6, #3
    d464:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d468:	f36c 2153 	bfi	r1, ip, #9, #11
    d46c:	f36f 511f 	bfc	r1, #20, #12
    d470:	2300      	movs	r3, #0
    d472:	4808      	ldr	r0, [pc, #32]	; (d494 <debug_monitor+0x8c>)
    d474:	f7fe fb76 	bl	bb64 <z_impl_z_log_msg_static_create>
}
    d478:	370c      	adds	r7, #12
    d47a:	46bd      	mov	sp, r7
    d47c:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO(
    d47e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d482:	e7cc      	b.n	d41e <debug_monitor+0x16>
    d484:	f06f 0c1b 	mvn.w	ip, #27
    d488:	e7d7      	b.n	d43a <debug_monitor+0x32>
    d48a:	bf00      	nop
    d48c:	0001a100 	.word	0x0001a100
    d490:	0001a2d4 	.word	0x0001a2d4
    d494:	00019a04 	.word	0x00019a04

0000d498 <reserved_exception>:
{
    d498:	b5b0      	push	{r4, r5, r7, lr}
    d49a:	b082      	sub	sp, #8
    d49c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    d49e:	290f      	cmp	r1, #15
    d4a0:	dc29      	bgt.n	d4f6 <reserved_exception+0x5e>
    d4a2:	4c32      	ldr	r4, [pc, #200]	; (d56c <reserved_exception+0xd4>)
    d4a4:	3910      	subs	r1, #16
    d4a6:	2301      	movs	r3, #1
    d4a8:	713b      	strb	r3, [r7, #4]
    d4aa:	2303      	movs	r3, #3
    d4ac:	717b      	strb	r3, [r7, #5]
    d4ae:	b08a      	sub	sp, #40	; 0x28
    d4b0:	46ec      	mov	ip, sp
    d4b2:	f11c 0210 	adds.w	r2, ip, #16
    d4b6:	d020      	beq.n	d4fa <reserved_exception+0x62>
    d4b8:	2016      	movs	r0, #22
    d4ba:	b152      	cbz	r2, d4d2 <reserved_exception+0x3a>
    d4bc:	4603      	mov	r3, r0
    d4be:	2804      	cmp	r0, #4
    d4c0:	dd02      	ble.n	d4c8 <reserved_exception+0x30>
    d4c2:	4d2b      	ldr	r5, [pc, #172]	; (d570 <reserved_exception+0xd8>)
    d4c4:	f8cc 5014 	str.w	r5, [ip, #20]
    d4c8:	2b08      	cmp	r3, #8
    d4ca:	dd02      	ble.n	d4d2 <reserved_exception+0x3a>
    d4cc:	4b29      	ldr	r3, [pc, #164]	; (d574 <reserved_exception+0xdc>)
    d4ce:	f8cc 3018 	str.w	r3, [ip, #24]
    d4d2:	2301      	movs	r3, #1
    d4d4:	703b      	strb	r3, [r7, #0]
    d4d6:	2303      	movs	r3, #3
    d4d8:	707b      	strb	r3, [r7, #1]
    d4da:	b1e2      	cbz	r2, d516 <reserved_exception+0x7e>
    d4dc:	4603      	mov	r3, r0
    d4de:	280c      	cmp	r0, #12
    d4e0:	dd01      	ble.n	d4e6 <reserved_exception+0x4e>
    d4e2:	f8cc 401c 	str.w	r4, [ip, #28]
    d4e6:	2b10      	cmp	r3, #16
    d4e8:	dd01      	ble.n	d4ee <reserved_exception+0x56>
    d4ea:	f8cc 1020 	str.w	r1, [ip, #32]
    d4ee:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    d4f2:	2100      	movs	r1, #0
    d4f4:	e00d      	b.n	d512 <reserved_exception+0x7a>
    d4f6:	4c20      	ldr	r4, [pc, #128]	; (d578 <reserved_exception+0xe0>)
    d4f8:	e7d4      	b.n	d4a4 <reserved_exception+0xc>
    d4fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d4fe:	e7dc      	b.n	d4ba <reserved_exception+0x22>
    d500:	f101 0408 	add.w	r4, r1, #8
    d504:	eb04 0e07 	add.w	lr, r4, r7
    d508:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    d50c:	f803 eb01 	strb.w	lr, [r3], #1
    d510:	3101      	adds	r1, #1
    d512:	2901      	cmp	r1, #1
    d514:	d9f4      	bls.n	d500 <reserved_exception+0x68>
    d516:	2815      	cmp	r0, #21
    d518:	dd24      	ble.n	d564 <reserved_exception+0xcc>
    d51a:	2316      	movs	r3, #22
    d51c:	b14a      	cbz	r2, d532 <reserved_exception+0x9a>
    d51e:	2105      	movs	r1, #5
    d520:	7139      	strb	r1, [r7, #4]
    d522:	2100      	movs	r1, #0
    d524:	7179      	strb	r1, [r7, #5]
    d526:	71b9      	strb	r1, [r7, #6]
    d528:	2101      	movs	r1, #1
    d52a:	71f9      	strb	r1, [r7, #7]
    d52c:	6878      	ldr	r0, [r7, #4]
    d52e:	f8cc 0010 	str.w	r0, [ip, #16]
    d532:	2100      	movs	r1, #0
    d534:	f36f 0100 	bfc	r1, #0, #1
    d538:	f36f 0141 	bfc	r1, #1, #1
    d53c:	f36f 0182 	bfc	r1, #2, #1
    d540:	f36f 01c5 	bfc	r1, #3, #3
    d544:	2001      	movs	r0, #1
    d546:	f360 1188 	bfi	r1, r0, #6, #3
    d54a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    d54e:	f363 2153 	bfi	r1, r3, #9, #11
    d552:	f36f 511f 	bfc	r1, #20, #12
    d556:	2300      	movs	r3, #0
    d558:	4808      	ldr	r0, [pc, #32]	; (d57c <reserved_exception+0xe4>)
    d55a:	f7fe fb03 	bl	bb64 <z_impl_z_log_msg_static_create>
}
    d55e:	3708      	adds	r7, #8
    d560:	46bd      	mov	sp, r7
    d562:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    d564:	f06f 031b 	mvn.w	r3, #27
    d568:	e7d8      	b.n	d51c <reserved_exception+0x84>
    d56a:	bf00      	nop
    d56c:	0001a128 	.word	0x0001a128
    d570:	0001a15c 	.word	0x0001a15c
    d574:	0001a2c0 	.word	0x0001a2c0
    d578:	0001a140 	.word	0x0001a140
    d57c:	00019a04 	.word	0x00019a04

0000d580 <mem_manage_fault>:
{
    d580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d584:	b083      	sub	sp, #12
    d586:	af00      	add	r7, sp, #0
    d588:	4604      	mov	r4, r0
    d58a:	460e      	mov	r6, r1
    d58c:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    d58e:	46e8      	mov	r8, sp
    d590:	b088      	sub	sp, #32
    d592:	466b      	mov	r3, sp
    d594:	f113 0210 	adds.w	r2, r3, #16
    d598:	f000 8142 	beq.w	d820 <mem_manage_fault+0x2a0>
    d59c:	210c      	movs	r1, #12
    d59e:	b152      	cbz	r2, d5b6 <mem_manage_fault+0x36>
    d5a0:	4608      	mov	r0, r1
    d5a2:	2904      	cmp	r1, #4
    d5a4:	dd03      	ble.n	d5ae <mem_manage_fault+0x2e>
    d5a6:	f8df c2bc 	ldr.w	ip, [pc, #700]	; d864 <mem_manage_fault+0x2e4>
    d5aa:	f8c3 c014 	str.w	ip, [r3, #20]
    d5ae:	2808      	cmp	r0, #8
    d5b0:	dd01      	ble.n	d5b6 <mem_manage_fault+0x36>
    d5b2:	48ad      	ldr	r0, [pc, #692]	; (d868 <mem_manage_fault+0x2e8>)
    d5b4:	6198      	str	r0, [r3, #24]
    d5b6:	290b      	cmp	r1, #11
    d5b8:	f340 8135 	ble.w	d826 <mem_manage_fault+0x2a6>
    d5bc:	f04f 0c0c 	mov.w	ip, #12
    d5c0:	b13a      	cbz	r2, d5d2 <mem_manage_fault+0x52>
    d5c2:	2103      	movs	r1, #3
    d5c4:	7139      	strb	r1, [r7, #4]
    d5c6:	2100      	movs	r1, #0
    d5c8:	7179      	strb	r1, [r7, #5]
    d5ca:	71b9      	strb	r1, [r7, #6]
    d5cc:	71f9      	strb	r1, [r7, #7]
    d5ce:	6878      	ldr	r0, [r7, #4]
    d5d0:	6118      	str	r0, [r3, #16]
    d5d2:	2100      	movs	r1, #0
    d5d4:	f36f 0100 	bfc	r1, #0, #1
    d5d8:	f36f 0141 	bfc	r1, #1, #1
    d5dc:	f36f 0182 	bfc	r1, #2, #1
    d5e0:	f36f 01c5 	bfc	r1, #3, #3
    d5e4:	2301      	movs	r3, #1
    d5e6:	f363 1188 	bfi	r1, r3, #6, #3
    d5ea:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d5ee:	f36c 2153 	bfi	r1, ip, #9, #11
    d5f2:	f36f 511f 	bfc	r1, #20, #12
    d5f6:	2300      	movs	r3, #0
    d5f8:	489c      	ldr	r0, [pc, #624]	; (d86c <mem_manage_fault+0x2ec>)
    d5fa:	f7fe fab3 	bl	bb64 <z_impl_z_log_msg_static_create>
    d5fe:	46c5      	mov	sp, r8
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d600:	4b9b      	ldr	r3, [pc, #620]	; (d870 <mem_manage_fault+0x2f0>)
    d602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d604:	f013 0f10 	tst.w	r3, #16
    d608:	f000 8116 	beq.w	d838 <mem_manage_fault+0x2b8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d60c:	46e8      	mov	r8, sp
    d60e:	b088      	sub	sp, #32
    d610:	466b      	mov	r3, sp
    d612:	f113 0210 	adds.w	r2, r3, #16
    d616:	f000 8109 	beq.w	d82c <mem_manage_fault+0x2ac>
    d61a:	210c      	movs	r1, #12
    d61c:	b152      	cbz	r2, d634 <mem_manage_fault+0xb4>
    d61e:	4608      	mov	r0, r1
    d620:	2904      	cmp	r1, #4
    d622:	dd03      	ble.n	d62c <mem_manage_fault+0xac>
    d624:	f8df c24c 	ldr.w	ip, [pc, #588]	; d874 <mem_manage_fault+0x2f4>
    d628:	f8c3 c014 	str.w	ip, [r3, #20]
    d62c:	2808      	cmp	r0, #8
    d62e:	dd01      	ble.n	d634 <mem_manage_fault+0xb4>
    d630:	488d      	ldr	r0, [pc, #564]	; (d868 <mem_manage_fault+0x2e8>)
    d632:	6198      	str	r0, [r3, #24]
    d634:	290b      	cmp	r1, #11
    d636:	f340 80fc 	ble.w	d832 <mem_manage_fault+0x2b2>
    d63a:	f04f 0c0c 	mov.w	ip, #12
    d63e:	b13a      	cbz	r2, d650 <mem_manage_fault+0xd0>
    d640:	2103      	movs	r1, #3
    d642:	7139      	strb	r1, [r7, #4]
    d644:	2100      	movs	r1, #0
    d646:	7179      	strb	r1, [r7, #5]
    d648:	71b9      	strb	r1, [r7, #6]
    d64a:	71f9      	strb	r1, [r7, #7]
    d64c:	6878      	ldr	r0, [r7, #4]
    d64e:	6118      	str	r0, [r3, #16]
    d650:	2100      	movs	r1, #0
    d652:	f36f 0100 	bfc	r1, #0, #1
    d656:	f36f 0141 	bfc	r1, #1, #1
    d65a:	f36f 0182 	bfc	r1, #2, #1
    d65e:	f36f 01c5 	bfc	r1, #3, #3
    d662:	2301      	movs	r3, #1
    d664:	f363 1188 	bfi	r1, r3, #6, #3
    d668:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d66c:	f36c 2153 	bfi	r1, ip, #9, #11
    d670:	f36f 511f 	bfc	r1, #20, #12
    d674:	2300      	movs	r3, #0
    d676:	487d      	ldr	r0, [pc, #500]	; (d86c <mem_manage_fault+0x2ec>)
    d678:	f7fe fa74 	bl	bb64 <z_impl_z_log_msg_static_create>
    d67c:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_MEM_STACKING;
    d67e:	f04f 0811 	mov.w	r8, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d682:	4b7b      	ldr	r3, [pc, #492]	; (d870 <mem_manage_fault+0x2f0>)
    d684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d686:	f013 0f08 	tst.w	r3, #8
    d68a:	d03a      	beq.n	d702 <mem_manage_fault+0x182>
		PR_FAULT_INFO("  Unstacking error");
    d68c:	46e8      	mov	r8, sp
    d68e:	b088      	sub	sp, #32
    d690:	466b      	mov	r3, sp
    d692:	f113 0210 	adds.w	r2, r3, #16
    d696:	f000 80d2 	beq.w	d83e <mem_manage_fault+0x2be>
    d69a:	210c      	movs	r1, #12
    d69c:	b152      	cbz	r2, d6b4 <mem_manage_fault+0x134>
    d69e:	4608      	mov	r0, r1
    d6a0:	2904      	cmp	r1, #4
    d6a2:	dd03      	ble.n	d6ac <mem_manage_fault+0x12c>
    d6a4:	f8df c1d0 	ldr.w	ip, [pc, #464]	; d878 <mem_manage_fault+0x2f8>
    d6a8:	f8c3 c014 	str.w	ip, [r3, #20]
    d6ac:	2808      	cmp	r0, #8
    d6ae:	dd01      	ble.n	d6b4 <mem_manage_fault+0x134>
    d6b0:	486d      	ldr	r0, [pc, #436]	; (d868 <mem_manage_fault+0x2e8>)
    d6b2:	6198      	str	r0, [r3, #24]
    d6b4:	290b      	cmp	r1, #11
    d6b6:	f340 80c5 	ble.w	d844 <mem_manage_fault+0x2c4>
    d6ba:	f04f 0c0c 	mov.w	ip, #12
    d6be:	b13a      	cbz	r2, d6d0 <mem_manage_fault+0x150>
    d6c0:	2103      	movs	r1, #3
    d6c2:	7139      	strb	r1, [r7, #4]
    d6c4:	2100      	movs	r1, #0
    d6c6:	7179      	strb	r1, [r7, #5]
    d6c8:	71b9      	strb	r1, [r7, #6]
    d6ca:	71f9      	strb	r1, [r7, #7]
    d6cc:	6878      	ldr	r0, [r7, #4]
    d6ce:	6118      	str	r0, [r3, #16]
    d6d0:	2100      	movs	r1, #0
    d6d2:	f36f 0100 	bfc	r1, #0, #1
    d6d6:	f36f 0141 	bfc	r1, #1, #1
    d6da:	f36f 0182 	bfc	r1, #2, #1
    d6de:	f36f 01c5 	bfc	r1, #3, #3
    d6e2:	2301      	movs	r3, #1
    d6e4:	f363 1188 	bfi	r1, r3, #6, #3
    d6e8:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d6ec:	f36c 2153 	bfi	r1, ip, #9, #11
    d6f0:	f36f 511f 	bfc	r1, #20, #12
    d6f4:	2300      	movs	r3, #0
    d6f6:	485d      	ldr	r0, [pc, #372]	; (d86c <mem_manage_fault+0x2ec>)
    d6f8:	f7fe fa34 	bl	bb64 <z_impl_z_log_msg_static_create>
    d6fc:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_MEM_UNSTACKING;
    d6fe:	f04f 0812 	mov.w	r8, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d702:	4b5b      	ldr	r3, [pc, #364]	; (d870 <mem_manage_fault+0x2f0>)
    d704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d706:	f013 0f02 	tst.w	r3, #2
    d70a:	f000 80bb 	beq.w	d884 <mem_manage_fault+0x304>
		PR_FAULT_INFO("  Data Access Violation");
    d70e:	46e8      	mov	r8, sp
    d710:	b088      	sub	sp, #32
    d712:	466b      	mov	r3, sp
    d714:	f113 0210 	adds.w	r2, r3, #16
    d718:	f000 8097 	beq.w	d84a <mem_manage_fault+0x2ca>
    d71c:	210c      	movs	r1, #12
    d71e:	b152      	cbz	r2, d736 <mem_manage_fault+0x1b6>
    d720:	4608      	mov	r0, r1
    d722:	2904      	cmp	r1, #4
    d724:	dd03      	ble.n	d72e <mem_manage_fault+0x1ae>
    d726:	f8df c154 	ldr.w	ip, [pc, #340]	; d87c <mem_manage_fault+0x2fc>
    d72a:	f8c3 c014 	str.w	ip, [r3, #20]
    d72e:	2808      	cmp	r0, #8
    d730:	dd01      	ble.n	d736 <mem_manage_fault+0x1b6>
    d732:	484d      	ldr	r0, [pc, #308]	; (d868 <mem_manage_fault+0x2e8>)
    d734:	6198      	str	r0, [r3, #24]
    d736:	290b      	cmp	r1, #11
    d738:	f340 808a 	ble.w	d850 <mem_manage_fault+0x2d0>
    d73c:	f04f 0c0c 	mov.w	ip, #12
    d740:	b13a      	cbz	r2, d752 <mem_manage_fault+0x1d2>
    d742:	2103      	movs	r1, #3
    d744:	7139      	strb	r1, [r7, #4]
    d746:	2100      	movs	r1, #0
    d748:	7179      	strb	r1, [r7, #5]
    d74a:	71b9      	strb	r1, [r7, #6]
    d74c:	71f9      	strb	r1, [r7, #7]
    d74e:	6878      	ldr	r0, [r7, #4]
    d750:	6118      	str	r0, [r3, #16]
    d752:	2100      	movs	r1, #0
    d754:	f36f 0100 	bfc	r1, #0, #1
    d758:	f36f 0141 	bfc	r1, #1, #1
    d75c:	f36f 0182 	bfc	r1, #2, #1
    d760:	f36f 01c5 	bfc	r1, #3, #3
    d764:	2301      	movs	r3, #1
    d766:	f363 1188 	bfi	r1, r3, #6, #3
    d76a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d76e:	f36c 2153 	bfi	r1, ip, #9, #11
    d772:	f36f 511f 	bfc	r1, #20, #12
    d776:	2300      	movs	r3, #0
    d778:	483c      	ldr	r0, [pc, #240]	; (d86c <mem_manage_fault+0x2ec>)
    d77a:	f7fe f9f3 	bl	bb64 <z_impl_z_log_msg_static_create>
    d77e:	46c5      	mov	sp, r8
		uint32_t temp = SCB->MMFAR;
    d780:	4b3b      	ldr	r3, [pc, #236]	; (d870 <mem_manage_fault+0x2f0>)
    d782:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d788:	f013 0f80 	tst.w	r3, #128	; 0x80
    d78c:	f000 8122 	beq.w	d9d4 <mem_manage_fault+0x454>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    d790:	46e8      	mov	r8, sp
    d792:	b088      	sub	sp, #32
    d794:	466b      	mov	r3, sp
    d796:	f113 0210 	adds.w	r2, r3, #16
    d79a:	d05c      	beq.n	d856 <mem_manage_fault+0x2d6>
    d79c:	2110      	movs	r1, #16
    d79e:	b182      	cbz	r2, d7c2 <mem_manage_fault+0x242>
    d7a0:	4608      	mov	r0, r1
    d7a2:	2904      	cmp	r1, #4
    d7a4:	dd03      	ble.n	d7ae <mem_manage_fault+0x22e>
    d7a6:	f8df c0d8 	ldr.w	ip, [pc, #216]	; d880 <mem_manage_fault+0x300>
    d7aa:	f8c3 c014 	str.w	ip, [r3, #20]
    d7ae:	2808      	cmp	r0, #8
    d7b0:	dd03      	ble.n	d7ba <mem_manage_fault+0x23a>
    d7b2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; d868 <mem_manage_fault+0x2e8>
    d7b6:	f8c3 c018 	str.w	ip, [r3, #24]
    d7ba:	280c      	cmp	r0, #12
    d7bc:	dd01      	ble.n	d7c2 <mem_manage_fault+0x242>
    d7be:	f8c3 901c 	str.w	r9, [r3, #28]
    d7c2:	290f      	cmp	r1, #15
    d7c4:	dd4a      	ble.n	d85c <mem_manage_fault+0x2dc>
    d7c6:	f04f 0c10 	mov.w	ip, #16
    d7ca:	b13a      	cbz	r2, d7dc <mem_manage_fault+0x25c>
    d7cc:	2104      	movs	r1, #4
    d7ce:	7139      	strb	r1, [r7, #4]
    d7d0:	2100      	movs	r1, #0
    d7d2:	7179      	strb	r1, [r7, #5]
    d7d4:	71b9      	strb	r1, [r7, #6]
    d7d6:	71f9      	strb	r1, [r7, #7]
    d7d8:	6878      	ldr	r0, [r7, #4]
    d7da:	6118      	str	r0, [r3, #16]
    d7dc:	2100      	movs	r1, #0
    d7de:	f36f 0100 	bfc	r1, #0, #1
    d7e2:	f36f 0141 	bfc	r1, #1, #1
    d7e6:	f36f 0182 	bfc	r1, #2, #1
    d7ea:	f36f 01c5 	bfc	r1, #3, #3
    d7ee:	2301      	movs	r3, #1
    d7f0:	f363 1188 	bfi	r1, r3, #6, #3
    d7f4:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d7f8:	f36c 2153 	bfi	r1, ip, #9, #11
    d7fc:	f36f 511f 	bfc	r1, #20, #12
    d800:	2300      	movs	r3, #0
    d802:	481a      	ldr	r0, [pc, #104]	; (d86c <mem_manage_fault+0x2ec>)
    d804:	f7fe f9ae 	bl	bb64 <z_impl_z_log_msg_static_create>
    d808:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    d80a:	2e00      	cmp	r6, #0
    d80c:	f000 80e7 	beq.w	d9de <mem_manage_fault+0x45e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d810:	4a17      	ldr	r2, [pc, #92]	; (d870 <mem_manage_fault+0x2f0>)
    d812:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d818:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    d81a:	f04f 0813 	mov.w	r8, #19
    d81e:	e033      	b.n	d888 <mem_manage_fault+0x308>
	PR_FAULT_INFO("***** MPU FAULT *****");
    d820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d824:	e6bb      	b.n	d59e <mem_manage_fault+0x1e>
    d826:	f06f 0c1b 	mvn.w	ip, #27
    d82a:	e6c9      	b.n	d5c0 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d82c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d830:	e6f4      	b.n	d61c <mem_manage_fault+0x9c>
    d832:	f06f 0c1b 	mvn.w	ip, #27
    d836:	e702      	b.n	d63e <mem_manage_fault+0xbe>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    d838:	f04f 0810 	mov.w	r8, #16
    d83c:	e721      	b.n	d682 <mem_manage_fault+0x102>
		PR_FAULT_INFO("  Unstacking error");
    d83e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d842:	e72b      	b.n	d69c <mem_manage_fault+0x11c>
    d844:	f06f 0c1b 	mvn.w	ip, #27
    d848:	e739      	b.n	d6be <mem_manage_fault+0x13e>
		PR_FAULT_INFO("  Data Access Violation");
    d84a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d84e:	e766      	b.n	d71e <mem_manage_fault+0x19e>
    d850:	f06f 0c1b 	mvn.w	ip, #27
    d854:	e774      	b.n	d740 <mem_manage_fault+0x1c0>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    d856:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d85a:	e7a0      	b.n	d79e <mem_manage_fault+0x21e>
    d85c:	f06f 0c1b 	mvn.w	ip, #27
    d860:	e7b3      	b.n	d7ca <mem_manage_fault+0x24a>
    d862:	bf00      	nop
    d864:	0001a174 	.word	0x0001a174
    d868:	0001a2fc 	.word	0x0001a2fc
    d86c:	00019a04 	.word	0x00019a04
    d870:	e000ed00 	.word	0xe000ed00
    d874:	0001a190 	.word	0x0001a190
    d878:	00019f48 	.word	0x00019f48
    d87c:	0001a1c8 	.word	0x0001a1c8
    d880:	0001a1e4 	.word	0x0001a1e4
	uint32_t mmfar = -EINVAL;
    d884:	f06f 0915 	mvn.w	r9, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d888:	4b62      	ldr	r3, [pc, #392]	; (da14 <mem_manage_fault+0x494>)
    d88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d88c:	f013 0f01 	tst.w	r3, #1
    d890:	d03a      	beq.n	d908 <mem_manage_fault+0x388>
		PR_FAULT_INFO("  Instruction Access Violation");
    d892:	466e      	mov	r6, sp
    d894:	b088      	sub	sp, #32
    d896:	466b      	mov	r3, sp
    d898:	f113 0210 	adds.w	r2, r3, #16
    d89c:	f000 80a2 	beq.w	d9e4 <mem_manage_fault+0x464>
    d8a0:	210c      	movs	r1, #12
    d8a2:	b152      	cbz	r2, d8ba <mem_manage_fault+0x33a>
    d8a4:	4608      	mov	r0, r1
    d8a6:	2904      	cmp	r1, #4
    d8a8:	dd03      	ble.n	d8b2 <mem_manage_fault+0x332>
    d8aa:	f8df c16c 	ldr.w	ip, [pc, #364]	; da18 <mem_manage_fault+0x498>
    d8ae:	f8c3 c014 	str.w	ip, [r3, #20]
    d8b2:	2808      	cmp	r0, #8
    d8b4:	dd01      	ble.n	d8ba <mem_manage_fault+0x33a>
    d8b6:	4859      	ldr	r0, [pc, #356]	; (da1c <mem_manage_fault+0x49c>)
    d8b8:	6198      	str	r0, [r3, #24]
    d8ba:	290b      	cmp	r1, #11
    d8bc:	f340 8095 	ble.w	d9ea <mem_manage_fault+0x46a>
    d8c0:	f04f 0c0c 	mov.w	ip, #12
    d8c4:	b13a      	cbz	r2, d8d6 <mem_manage_fault+0x356>
    d8c6:	2103      	movs	r1, #3
    d8c8:	7139      	strb	r1, [r7, #4]
    d8ca:	2100      	movs	r1, #0
    d8cc:	7179      	strb	r1, [r7, #5]
    d8ce:	71b9      	strb	r1, [r7, #6]
    d8d0:	71f9      	strb	r1, [r7, #7]
    d8d2:	6878      	ldr	r0, [r7, #4]
    d8d4:	6118      	str	r0, [r3, #16]
    d8d6:	2100      	movs	r1, #0
    d8d8:	f36f 0100 	bfc	r1, #0, #1
    d8dc:	f36f 0141 	bfc	r1, #1, #1
    d8e0:	f36f 0182 	bfc	r1, #2, #1
    d8e4:	f36f 01c5 	bfc	r1, #3, #3
    d8e8:	2301      	movs	r3, #1
    d8ea:	f363 1188 	bfi	r1, r3, #6, #3
    d8ee:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d8f2:	f36c 2153 	bfi	r1, ip, #9, #11
    d8f6:	f36f 511f 	bfc	r1, #20, #12
    d8fa:	2300      	movs	r3, #0
    d8fc:	4848      	ldr	r0, [pc, #288]	; (da20 <mem_manage_fault+0x4a0>)
    d8fe:	f7fe f931 	bl	bb64 <z_impl_z_log_msg_static_create>
    d902:	46b5      	mov	sp, r6
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    d904:	f04f 0814 	mov.w	r8, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d908:	4b42      	ldr	r3, [pc, #264]	; (da14 <mem_manage_fault+0x494>)
    d90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d90c:	f013 0f20 	tst.w	r3, #32
    d910:	d038      	beq.n	d984 <mem_manage_fault+0x404>
		PR_FAULT_INFO(
    d912:	466e      	mov	r6, sp
    d914:	b088      	sub	sp, #32
    d916:	466b      	mov	r3, sp
    d918:	f113 0210 	adds.w	r2, r3, #16
    d91c:	d068      	beq.n	d9f0 <mem_manage_fault+0x470>
    d91e:	210c      	movs	r1, #12
    d920:	b152      	cbz	r2, d938 <mem_manage_fault+0x3b8>
    d922:	4608      	mov	r0, r1
    d924:	2904      	cmp	r1, #4
    d926:	dd03      	ble.n	d930 <mem_manage_fault+0x3b0>
    d928:	f8df c0f8 	ldr.w	ip, [pc, #248]	; da24 <mem_manage_fault+0x4a4>
    d92c:	f8c3 c014 	str.w	ip, [r3, #20]
    d930:	2808      	cmp	r0, #8
    d932:	dd01      	ble.n	d938 <mem_manage_fault+0x3b8>
    d934:	4839      	ldr	r0, [pc, #228]	; (da1c <mem_manage_fault+0x49c>)
    d936:	6198      	str	r0, [r3, #24]
    d938:	290b      	cmp	r1, #11
    d93a:	dd5c      	ble.n	d9f6 <mem_manage_fault+0x476>
    d93c:	f04f 0c0c 	mov.w	ip, #12
    d940:	b13a      	cbz	r2, d952 <mem_manage_fault+0x3d2>
    d942:	2103      	movs	r1, #3
    d944:	7139      	strb	r1, [r7, #4]
    d946:	2100      	movs	r1, #0
    d948:	7179      	strb	r1, [r7, #5]
    d94a:	71b9      	strb	r1, [r7, #6]
    d94c:	71f9      	strb	r1, [r7, #7]
    d94e:	6878      	ldr	r0, [r7, #4]
    d950:	6118      	str	r0, [r3, #16]
    d952:	2100      	movs	r1, #0
    d954:	f36f 0100 	bfc	r1, #0, #1
    d958:	f36f 0141 	bfc	r1, #1, #1
    d95c:	f36f 0182 	bfc	r1, #2, #1
    d960:	f36f 01c5 	bfc	r1, #3, #3
    d964:	2301      	movs	r3, #1
    d966:	f363 1188 	bfi	r1, r3, #6, #3
    d96a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    d96e:	f36c 2153 	bfi	r1, ip, #9, #11
    d972:	f36f 511f 	bfc	r1, #20, #12
    d976:	2300      	movs	r3, #0
    d978:	4829      	ldr	r0, [pc, #164]	; (da20 <mem_manage_fault+0x4a0>)
    d97a:	f7fe f8f3 	bl	bb64 <z_impl_z_log_msg_static_create>
    d97e:	46b5      	mov	sp, r6
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    d980:	f04f 0815 	mov.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d984:	4b23      	ldr	r3, [pc, #140]	; (da14 <mem_manage_fault+0x494>)
    d986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d988:	f013 0f10 	tst.w	r3, #16
    d98c:	d104      	bne.n	d998 <mem_manage_fault+0x418>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d98e:	4b21      	ldr	r3, [pc, #132]	; (da14 <mem_manage_fault+0x494>)
    d990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d992:	f013 0f02 	tst.w	r3, #2
    d996:	d004      	beq.n	d9a2 <mem_manage_fault+0x422>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    d998:	4b1e      	ldr	r3, [pc, #120]	; (da14 <mem_manage_fault+0x494>)
    d99a:	685b      	ldr	r3, [r3, #4]
    d99c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d9a0:	d12c      	bne.n	d9fc <mem_manage_fault+0x47c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d9a2:	4b1c      	ldr	r3, [pc, #112]	; (da14 <mem_manage_fault+0x494>)
    d9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d9a6:	f013 0f20 	tst.w	r3, #32
    d9aa:	d004      	beq.n	d9b6 <mem_manage_fault+0x436>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    d9ac:	4a19      	ldr	r2, [pc, #100]	; (da14 <mem_manage_fault+0x494>)
    d9ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
    d9b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    d9b4:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d9b6:	4a17      	ldr	r2, [pc, #92]	; (da14 <mem_manage_fault+0x494>)
    d9b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d9ba:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    d9be:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d9c0:	2101      	movs	r1, #1
    d9c2:	4620      	mov	r0, r4
    d9c4:	f009 f942 	bl	16c4c <memory_fault_recoverable>
    d9c8:	7028      	strb	r0, [r5, #0]
}
    d9ca:	4640      	mov	r0, r8
    d9cc:	370c      	adds	r7, #12
    d9ce:	46bd      	mov	sp, r7
    d9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t mmfar = -EINVAL;
    d9d4:	f06f 0915 	mvn.w	r9, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    d9d8:	f04f 0813 	mov.w	r8, #19
    d9dc:	e754      	b.n	d888 <mem_manage_fault+0x308>
    d9de:	f04f 0813 	mov.w	r8, #19
    d9e2:	e751      	b.n	d888 <mem_manage_fault+0x308>
		PR_FAULT_INFO("  Instruction Access Violation");
    d9e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d9e8:	e75b      	b.n	d8a2 <mem_manage_fault+0x322>
    d9ea:	f06f 0c1b 	mvn.w	ip, #27
    d9ee:	e769      	b.n	d8c4 <mem_manage_fault+0x344>
		PR_FAULT_INFO(
    d9f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d9f4:	e794      	b.n	d920 <mem_manage_fault+0x3a0>
    d9f6:	f06f 0c1b 	mvn.w	ip, #27
    d9fa:	e7a1      	b.n	d940 <mem_manage_fault+0x3c0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    d9fc:	4621      	mov	r1, r4
    d9fe:	4648      	mov	r0, r9
    da00:	f7fe ffca 	bl	c998 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    da04:	2800      	cmp	r0, #0
    da06:	d0cc      	beq.n	d9a2 <mem_manage_fault+0x422>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    da08:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    da0c:	f04f 0802 	mov.w	r8, #2
    da10:	e7c7      	b.n	d9a2 <mem_manage_fault+0x422>
    da12:	bf00      	nop
    da14:	e000ed00 	.word	0xe000ed00
    da18:	0001a200 	.word	0x0001a200
    da1c:	0001a2fc 	.word	0x0001a2fc
    da20:	00019a04 	.word	0x00019a04
    da24:	00019fd8 	.word	0x00019fd8

0000da28 <hard_fault>:
{
    da28:	b5f0      	push	{r4, r5, r6, r7, lr}
    da2a:	b083      	sub	sp, #12
    da2c:	af00      	add	r7, sp, #0
    da2e:	4605      	mov	r5, r0
    da30:	460c      	mov	r4, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    da32:	466e      	mov	r6, sp
    da34:	b088      	sub	sp, #32
    da36:	466b      	mov	r3, sp
    da38:	f113 0210 	adds.w	r2, r3, #16
    da3c:	d070      	beq.n	db20 <hard_fault+0xf8>
    da3e:	210c      	movs	r1, #12
    da40:	b152      	cbz	r2, da58 <hard_fault+0x30>
    da42:	4608      	mov	r0, r1
    da44:	2904      	cmp	r1, #4
    da46:	dd03      	ble.n	da50 <hard_fault+0x28>
    da48:	f8df c2d0 	ldr.w	ip, [pc, #720]	; dd1c <hard_fault+0x2f4>
    da4c:	f8c3 c014 	str.w	ip, [r3, #20]
    da50:	2808      	cmp	r0, #8
    da52:	dd01      	ble.n	da58 <hard_fault+0x30>
    da54:	48b2      	ldr	r0, [pc, #712]	; (dd20 <hard_fault+0x2f8>)
    da56:	6198      	str	r0, [r3, #24]
    da58:	290b      	cmp	r1, #11
    da5a:	dd64      	ble.n	db26 <hard_fault+0xfe>
    da5c:	f04f 0c0c 	mov.w	ip, #12
    da60:	b13a      	cbz	r2, da72 <hard_fault+0x4a>
    da62:	2103      	movs	r1, #3
    da64:	7139      	strb	r1, [r7, #4]
    da66:	2100      	movs	r1, #0
    da68:	7179      	strb	r1, [r7, #5]
    da6a:	71b9      	strb	r1, [r7, #6]
    da6c:	71f9      	strb	r1, [r7, #7]
    da6e:	6878      	ldr	r0, [r7, #4]
    da70:	6118      	str	r0, [r3, #16]
    da72:	2100      	movs	r1, #0
    da74:	f36f 0100 	bfc	r1, #0, #1
    da78:	f36f 0141 	bfc	r1, #1, #1
    da7c:	f36f 0182 	bfc	r1, #2, #1
    da80:	f36f 01c5 	bfc	r1, #3, #3
    da84:	2301      	movs	r3, #1
    da86:	f363 1188 	bfi	r1, r3, #6, #3
    da8a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    da8e:	f36c 2153 	bfi	r1, ip, #9, #11
    da92:	f36f 511f 	bfc	r1, #20, #12
    da96:	2300      	movs	r3, #0
    da98:	48a2      	ldr	r0, [pc, #648]	; (dd24 <hard_fault+0x2fc>)
    da9a:	f7fe f863 	bl	bb64 <z_impl_z_log_msg_static_create>
    da9e:	46b5      	mov	sp, r6
	*recoverable = false;
    daa0:	2300      	movs	r3, #0
    daa2:	7023      	strb	r3, [r4, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    daa4:	4ba0      	ldr	r3, [pc, #640]	; (dd28 <hard_fault+0x300>)
    daa6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    daa8:	f016 0602 	ands.w	r6, r6, #2
    daac:	d044      	beq.n	db38 <hard_fault+0x110>
		PR_EXC("  Bus fault on vector table read");
    daae:	466d      	mov	r5, sp
    dab0:	b088      	sub	sp, #32
    dab2:	466b      	mov	r3, sp
    dab4:	f113 0210 	adds.w	r2, r3, #16
    dab8:	d038      	beq.n	db2c <hard_fault+0x104>
    daba:	210c      	movs	r1, #12
    dabc:	b142      	cbz	r2, dad0 <hard_fault+0xa8>
    dabe:	4608      	mov	r0, r1
    dac0:	2904      	cmp	r1, #4
    dac2:	dd01      	ble.n	dac8 <hard_fault+0xa0>
    dac4:	4c99      	ldr	r4, [pc, #612]	; (dd2c <hard_fault+0x304>)
    dac6:	615c      	str	r4, [r3, #20]
    dac8:	2808      	cmp	r0, #8
    daca:	dd01      	ble.n	dad0 <hard_fault+0xa8>
    dacc:	4894      	ldr	r0, [pc, #592]	; (dd20 <hard_fault+0x2f8>)
    dace:	6198      	str	r0, [r3, #24]
    dad0:	290b      	cmp	r1, #11
    dad2:	dd2e      	ble.n	db32 <hard_fault+0x10a>
    dad4:	240c      	movs	r4, #12
    dad6:	b13a      	cbz	r2, dae8 <hard_fault+0xc0>
    dad8:	2103      	movs	r1, #3
    dada:	7139      	strb	r1, [r7, #4]
    dadc:	2100      	movs	r1, #0
    dade:	7179      	strb	r1, [r7, #5]
    dae0:	71b9      	strb	r1, [r7, #6]
    dae2:	71f9      	strb	r1, [r7, #7]
    dae4:	6878      	ldr	r0, [r7, #4]
    dae6:	6118      	str	r0, [r3, #16]
    dae8:	2100      	movs	r1, #0
    daea:	f36f 0100 	bfc	r1, #0, #1
    daee:	f36f 0141 	bfc	r1, #1, #1
    daf2:	f36f 0182 	bfc	r1, #2, #1
    daf6:	f36f 01c5 	bfc	r1, #3, #3
    dafa:	2301      	movs	r3, #1
    dafc:	f363 1188 	bfi	r1, r3, #6, #3
    db00:	f3c4 040a 	ubfx	r4, r4, #0, #11
    db04:	f364 2153 	bfi	r1, r4, #9, #11
    db08:	f36f 511f 	bfc	r1, #20, #12
    db0c:	2300      	movs	r3, #0
    db0e:	4885      	ldr	r0, [pc, #532]	; (dd24 <hard_fault+0x2fc>)
    db10:	f7fe f828 	bl	bb64 <z_impl_z_log_msg_static_create>
    db14:	46ad      	mov	sp, r5
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    db16:	2600      	movs	r6, #0
}
    db18:	4630      	mov	r0, r6
    db1a:	370c      	adds	r7, #12
    db1c:	46bd      	mov	sp, r7
    db1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	PR_FAULT_INFO("***** HARD FAULT *****");
    db20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db24:	e78c      	b.n	da40 <hard_fault+0x18>
    db26:	f06f 0c1b 	mvn.w	ip, #27
    db2a:	e799      	b.n	da60 <hard_fault+0x38>
		PR_EXC("  Bus fault on vector table read");
    db2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db30:	e7c4      	b.n	dabc <hard_fault+0x94>
    db32:	f06f 041b 	mvn.w	r4, #27
    db36:	e7ce      	b.n	dad6 <hard_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    db38:	4b7b      	ldr	r3, [pc, #492]	; (dd28 <hard_fault+0x300>)
    db3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    db3c:	2b00      	cmp	r3, #0
    db3e:	f2c0 8082 	blt.w	dc46 <hard_fault+0x21e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    db42:	4b79      	ldr	r3, [pc, #484]	; (dd28 <hard_fault+0x300>)
    db44:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    db46:	f016 4680 	ands.w	r6, r6, #1073741824	; 0x40000000
    db4a:	d0e5      	beq.n	db18 <hard_fault+0xf0>
		PR_EXC("  Fault escalation (see below)");
    db4c:	466e      	mov	r6, sp
    db4e:	b088      	sub	sp, #32
    db50:	466b      	mov	r3, sp
    db52:	f113 0210 	adds.w	r2, r3, #16
    db56:	f000 80b1 	beq.w	dcbc <hard_fault+0x294>
    db5a:	210c      	movs	r1, #12
    db5c:	b152      	cbz	r2, db74 <hard_fault+0x14c>
    db5e:	4608      	mov	r0, r1
    db60:	2904      	cmp	r1, #4
    db62:	dd03      	ble.n	db6c <hard_fault+0x144>
    db64:	f8df c1c8 	ldr.w	ip, [pc, #456]	; dd30 <hard_fault+0x308>
    db68:	f8c3 c014 	str.w	ip, [r3, #20]
    db6c:	2808      	cmp	r0, #8
    db6e:	dd01      	ble.n	db74 <hard_fault+0x14c>
    db70:	486b      	ldr	r0, [pc, #428]	; (dd20 <hard_fault+0x2f8>)
    db72:	6198      	str	r0, [r3, #24]
    db74:	290b      	cmp	r1, #11
    db76:	f340 80a4 	ble.w	dcc2 <hard_fault+0x29a>
    db7a:	f04f 0c0c 	mov.w	ip, #12
    db7e:	b13a      	cbz	r2, db90 <hard_fault+0x168>
    db80:	2103      	movs	r1, #3
    db82:	7139      	strb	r1, [r7, #4]
    db84:	2100      	movs	r1, #0
    db86:	7179      	strb	r1, [r7, #5]
    db88:	71b9      	strb	r1, [r7, #6]
    db8a:	71f9      	strb	r1, [r7, #7]
    db8c:	6878      	ldr	r0, [r7, #4]
    db8e:	6118      	str	r0, [r3, #16]
    db90:	2100      	movs	r1, #0
    db92:	f36f 0100 	bfc	r1, #0, #1
    db96:	f36f 0141 	bfc	r1, #1, #1
    db9a:	f36f 0182 	bfc	r1, #2, #1
    db9e:	f36f 01c5 	bfc	r1, #3, #3
    dba2:	2301      	movs	r3, #1
    dba4:	f363 1188 	bfi	r1, r3, #6, #3
    dba8:	f3cc 030a 	ubfx	r3, ip, #0, #11
    dbac:	f363 2153 	bfi	r1, r3, #9, #11
    dbb0:	f36f 511f 	bfc	r1, #20, #12
    dbb4:	2300      	movs	r3, #0
    dbb6:	485b      	ldr	r0, [pc, #364]	; (dd24 <hard_fault+0x2fc>)
    dbb8:	f7fd ffd4 	bl	bb64 <z_impl_z_log_msg_static_create>
    dbbc:	46b5      	mov	sp, r6
		if (z_arm_is_synchronous_svc(esf)) {
    dbbe:	4628      	mov	r0, r5
    dbc0:	f7fe ff52 	bl	ca68 <z_arm_is_synchronous_svc>
    dbc4:	2800      	cmp	r0, #0
    dbc6:	f000 8085 	beq.w	dcd4 <hard_fault+0x2ac>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    dbca:	682c      	ldr	r4, [r5, #0]
    dbcc:	466e      	mov	r6, sp
    dbce:	b088      	sub	sp, #32
    dbd0:	466b      	mov	r3, sp
    dbd2:	f113 0210 	adds.w	r2, r3, #16
    dbd6:	d077      	beq.n	dcc8 <hard_fault+0x2a0>
    dbd8:	2110      	movs	r1, #16
    dbda:	b17a      	cbz	r2, dbfc <hard_fault+0x1d4>
    dbdc:	4608      	mov	r0, r1
    dbde:	2904      	cmp	r1, #4
    dbe0:	dd03      	ble.n	dbea <hard_fault+0x1c2>
    dbe2:	f8df c150 	ldr.w	ip, [pc, #336]	; dd34 <hard_fault+0x30c>
    dbe6:	f8c3 c014 	str.w	ip, [r3, #20]
    dbea:	2808      	cmp	r0, #8
    dbec:	dd03      	ble.n	dbf6 <hard_fault+0x1ce>
    dbee:	f8df c130 	ldr.w	ip, [pc, #304]	; dd20 <hard_fault+0x2f8>
    dbf2:	f8c3 c018 	str.w	ip, [r3, #24]
    dbf6:	280c      	cmp	r0, #12
    dbf8:	dd00      	ble.n	dbfc <hard_fault+0x1d4>
    dbfa:	61dc      	str	r4, [r3, #28]
    dbfc:	290f      	cmp	r1, #15
    dbfe:	dd66      	ble.n	dcce <hard_fault+0x2a6>
    dc00:	2410      	movs	r4, #16
    dc02:	b13a      	cbz	r2, dc14 <hard_fault+0x1ec>
    dc04:	2104      	movs	r1, #4
    dc06:	7139      	strb	r1, [r7, #4]
    dc08:	2100      	movs	r1, #0
    dc0a:	7179      	strb	r1, [r7, #5]
    dc0c:	71b9      	strb	r1, [r7, #6]
    dc0e:	71f9      	strb	r1, [r7, #7]
    dc10:	6878      	ldr	r0, [r7, #4]
    dc12:	6118      	str	r0, [r3, #16]
    dc14:	2100      	movs	r1, #0
    dc16:	f36f 0100 	bfc	r1, #0, #1
    dc1a:	f36f 0141 	bfc	r1, #1, #1
    dc1e:	f36f 0182 	bfc	r1, #2, #1
    dc22:	f36f 01c5 	bfc	r1, #3, #3
    dc26:	2301      	movs	r3, #1
    dc28:	f363 1188 	bfi	r1, r3, #6, #3
    dc2c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    dc30:	f363 2153 	bfi	r1, r3, #9, #11
    dc34:	f36f 511f 	bfc	r1, #20, #12
    dc38:	2300      	movs	r3, #0
    dc3a:	483a      	ldr	r0, [pc, #232]	; (dd24 <hard_fault+0x2fc>)
    dc3c:	f7fd ff92 	bl	bb64 <z_impl_z_log_msg_static_create>
    dc40:	46b5      	mov	sp, r6
			reason = esf->basic.r0;
    dc42:	682e      	ldr	r6, [r5, #0]
    dc44:	e768      	b.n	db18 <hard_fault+0xf0>
		PR_EXC("  Debug event");
    dc46:	466d      	mov	r5, sp
    dc48:	b088      	sub	sp, #32
    dc4a:	466b      	mov	r3, sp
    dc4c:	f113 0210 	adds.w	r2, r3, #16
    dc50:	d02e      	beq.n	dcb0 <hard_fault+0x288>
    dc52:	210c      	movs	r1, #12
    dc54:	b142      	cbz	r2, dc68 <hard_fault+0x240>
    dc56:	4608      	mov	r0, r1
    dc58:	2904      	cmp	r1, #4
    dc5a:	dd01      	ble.n	dc60 <hard_fault+0x238>
    dc5c:	4c36      	ldr	r4, [pc, #216]	; (dd38 <hard_fault+0x310>)
    dc5e:	615c      	str	r4, [r3, #20]
    dc60:	2808      	cmp	r0, #8
    dc62:	dd01      	ble.n	dc68 <hard_fault+0x240>
    dc64:	482e      	ldr	r0, [pc, #184]	; (dd20 <hard_fault+0x2f8>)
    dc66:	6198      	str	r0, [r3, #24]
    dc68:	290b      	cmp	r1, #11
    dc6a:	dd24      	ble.n	dcb6 <hard_fault+0x28e>
    dc6c:	240c      	movs	r4, #12
    dc6e:	b13a      	cbz	r2, dc80 <hard_fault+0x258>
    dc70:	2103      	movs	r1, #3
    dc72:	7139      	strb	r1, [r7, #4]
    dc74:	2100      	movs	r1, #0
    dc76:	7179      	strb	r1, [r7, #5]
    dc78:	71b9      	strb	r1, [r7, #6]
    dc7a:	71f9      	strb	r1, [r7, #7]
    dc7c:	6878      	ldr	r0, [r7, #4]
    dc7e:	6118      	str	r0, [r3, #16]
    dc80:	2100      	movs	r1, #0
    dc82:	f36f 0100 	bfc	r1, #0, #1
    dc86:	f36f 0141 	bfc	r1, #1, #1
    dc8a:	f36f 0182 	bfc	r1, #2, #1
    dc8e:	f36f 01c5 	bfc	r1, #3, #3
    dc92:	2301      	movs	r3, #1
    dc94:	f363 1188 	bfi	r1, r3, #6, #3
    dc98:	f3c4 030a 	ubfx	r3, r4, #0, #11
    dc9c:	f363 2153 	bfi	r1, r3, #9, #11
    dca0:	f36f 511f 	bfc	r1, #20, #12
    dca4:	2300      	movs	r3, #0
    dca6:	481f      	ldr	r0, [pc, #124]	; (dd24 <hard_fault+0x2fc>)
    dca8:	f7fd ff5c 	bl	bb64 <z_impl_z_log_msg_static_create>
    dcac:	46ad      	mov	sp, r5
    dcae:	e733      	b.n	db18 <hard_fault+0xf0>
    dcb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcb4:	e7ce      	b.n	dc54 <hard_fault+0x22c>
    dcb6:	f06f 041b 	mvn.w	r4, #27
    dcba:	e7d8      	b.n	dc6e <hard_fault+0x246>
		PR_EXC("  Fault escalation (see below)");
    dcbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcc0:	e74c      	b.n	db5c <hard_fault+0x134>
    dcc2:	f06f 0c1b 	mvn.w	ip, #27
    dcc6:	e75a      	b.n	db7e <hard_fault+0x156>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    dcc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dccc:	e785      	b.n	dbda <hard_fault+0x1b2>
    dcce:	f06f 041b 	mvn.w	r4, #27
    dcd2:	e796      	b.n	dc02 <hard_fault+0x1da>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    dcd4:	4b14      	ldr	r3, [pc, #80]	; (dd28 <hard_fault+0x300>)
    dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcd8:	f013 0fff 	tst.w	r3, #255	; 0xff
    dcdc:	d10f      	bne.n	dcfe <hard_fault+0x2d6>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    dcde:	4b12      	ldr	r3, [pc, #72]	; (dd28 <hard_fault+0x300>)
    dce0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    dce2:	f416 467f 	ands.w	r6, r6, #65280	; 0xff00
    dce6:	d111      	bne.n	dd0c <hard_fault+0x2e4>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    dce8:	4b0f      	ldr	r3, [pc, #60]	; (dd28 <hard_fault+0x300>)
    dcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    dcf0:	f4ff af12 	bcc.w	db18 <hard_fault+0xf0>
			reason = usage_fault(esf);
    dcf4:	4628      	mov	r0, r5
    dcf6:	f7ff f999 	bl	d02c <usage_fault>
    dcfa:	4606      	mov	r6, r0
	return reason;
    dcfc:	e70c      	b.n	db18 <hard_fault+0xf0>
			reason = mem_manage_fault(esf, 1, recoverable);
    dcfe:	4622      	mov	r2, r4
    dd00:	2101      	movs	r1, #1
    dd02:	4628      	mov	r0, r5
    dd04:	f7ff fc3c 	bl	d580 <mem_manage_fault>
    dd08:	4606      	mov	r6, r0
    dd0a:	e705      	b.n	db18 <hard_fault+0xf0>
			reason = bus_fault(esf, 1, recoverable);
    dd0c:	4622      	mov	r2, r4
    dd0e:	2101      	movs	r1, #1
    dd10:	4628      	mov	r0, r5
    dd12:	f7fe ff27 	bl	cb64 <bus_fault>
    dd16:	4606      	mov	r6, r0
    dd18:	e6fe      	b.n	db18 <hard_fault+0xf0>
    dd1a:	bf00      	nop
    dd1c:	0001a224 	.word	0x0001a224
    dd20:	0001a310 	.word	0x0001a310
    dd24:	00019a04 	.word	0x00019a04
    dd28:	e000ed00 	.word	0xe000ed00
    dd2c:	0001a240 	.word	0x0001a240
    dd30:	0001a27c 	.word	0x0001a27c
    dd34:	0001a2a0 	.word	0x0001a2a0
    dd38:	0001a268 	.word	0x0001a268

0000dd3c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    dd3c:	b530      	push	{r4, r5, lr}
    dd3e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dd40:	4b1a      	ldr	r3, [pc, #104]	; (ddac <z_arm_fault+0x70>)
    dd42:	685c      	ldr	r4, [r3, #4]
    dd44:	f3c4 0408 	ubfx	r4, r4, #0, #9
    dd48:	2300      	movs	r3, #0
    dd4a:	f383 8811 	msr	BASEPRI, r3
    dd4e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    dd52:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    dd56:	f7fe fea5 	bl	caa4 <get_esf>
    dd5a:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    dd5c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    dd60:	4621      	mov	r1, r4
    dd62:	f008 ff75 	bl	16c50 <fault_handle>
	if (recoverable) {
    dd66:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    dd6a:	b10b      	cbz	r3, dd70 <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    dd6c:	b00b      	add	sp, #44	; 0x2c
    dd6e:	bd30      	pop	{r4, r5, pc}
    dd70:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dd72:	2220      	movs	r2, #32
    dd74:	4629      	mov	r1, r5
    dd76:	a801      	add	r0, sp, #4
    dd78:	f009 f81b 	bl	16db2 <memcpy>
	if (nested_exc) {
    dd7c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    dd80:	b14b      	cbz	r3, dd96 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dd82:	9b08      	ldr	r3, [sp, #32]
    dd84:	f3c3 0208 	ubfx	r2, r3, #0, #9
    dd88:	b95a      	cbnz	r2, dda2 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dd8a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    dd8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    dd92:	9308      	str	r3, [sp, #32]
    dd94:	e005      	b.n	dda2 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dd96:	9b08      	ldr	r3, [sp, #32]
    dd98:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    dd9c:	f023 0301 	bic.w	r3, r3, #1
    dda0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    dda2:	a901      	add	r1, sp, #4
    dda4:	4620      	mov	r0, r4
    dda6:	f008 ff1e 	bl	16be6 <z_arm_fatal_error>
    ddaa:	e7df      	b.n	dd6c <z_arm_fault+0x30>
    ddac:	e000ed00 	.word	0xe000ed00

0000ddb0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    ddb0:	4a02      	ldr	r2, [pc, #8]	; (ddbc <z_arm_fault_init+0xc>)
    ddb2:	6953      	ldr	r3, [r2, #20]
    ddb4:	f043 0310 	orr.w	r3, r3, #16
    ddb8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    ddba:	4770      	bx	lr
    ddbc:	e000ed00 	.word	0xe000ed00

0000ddc0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    ddc0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    ddc4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    ddc8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    ddca:	4672      	mov	r2, lr
	bl z_arm_fault
    ddcc:	f7ff ffb6 	bl	dd3c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    ddd0:	bd01      	pop	{r0, pc}
    ddd2:	bf00      	nop

0000ddd4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    ddd4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    ddd6:	e006      	b.n	dde6 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ddd8:	f003 030f 	and.w	r3, r3, #15
    dddc:	4909      	ldr	r1, [pc, #36]	; (de04 <z_arm_interrupt_init+0x30>)
    ddde:	4419      	add	r1, r3
    dde0:	2340      	movs	r3, #64	; 0x40
    dde2:	760b      	strb	r3, [r1, #24]
    dde4:	3201      	adds	r2, #1
    dde6:	2a26      	cmp	r2, #38	; 0x26
    dde8:	dc0a      	bgt.n	de00 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    ddea:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    ddec:	2b00      	cmp	r3, #0
    ddee:	dbf3      	blt.n	ddd8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ddf0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    ddf4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    ddf8:	2140      	movs	r1, #64	; 0x40
    ddfa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    ddfe:	e7f1      	b.n	dde4 <z_arm_interrupt_init+0x10>
	}
}
    de00:	4770      	bx	lr
    de02:	bf00      	nop
    de04:	e000ecfc 	.word	0xe000ecfc

0000de08 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    de08:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    de0a:	4913      	ldr	r1, [pc, #76]	; (de58 <__start+0x50>)
    strb r0, [r1]
    de0c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    de0e:	2000      	movs	r0, #0
    msr CONTROL, r0
    de10:	f380 8814 	msr	CONTROL, r0
    isb
    de14:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    de18:	f7fd fb86 	bl	b528 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    de1c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    de1e:	490f      	ldr	r1, [pc, #60]	; (de5c <__start+0x54>)
    str r0, [r1]
    de20:	6008      	str	r0, [r1, #0]
    dsb
    de22:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    de26:	480e      	ldr	r0, [pc, #56]	; (de60 <__start+0x58>)
    msr msp, r0
    de28:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    de2c:	f000 f830 	bl	de90 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    de30:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    de32:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    de36:	480b      	ldr	r0, [pc, #44]	; (de64 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    de38:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    de3c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    de3e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    de42:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    de46:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    de48:	4308      	orrs	r0, r1
    msr CONTROL, r0
    de4a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    de4e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    de52:	f7fe fd0b 	bl	c86c <z_arm_prep_c>
    de56:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    de58:	2000264a 	.word	0x2000264a
    ldr r1, =_SCS_MPU_CTRL
    de5c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    de60:	20004a80 	.word	0x20004a80
    ldr r0, =z_interrupt_stacks
    de64:	20003cc0 	.word	0x20003cc0

0000de68 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    de68:	4b08      	ldr	r3, [pc, #32]	; (de8c <z_arm_clear_arm_mpu_config+0x24>)
    de6a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    de6e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    de72:	2300      	movs	r3, #0
    de74:	e006      	b.n	de84 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    de76:	4a05      	ldr	r2, [pc, #20]	; (de8c <z_arm_clear_arm_mpu_config+0x24>)
    de78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    de7c:	2100      	movs	r1, #0
    de7e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    de82:	3301      	adds	r3, #1
    de84:	4283      	cmp	r3, r0
    de86:	dbf6      	blt.n	de76 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    de88:	4770      	bx	lr
    de8a:	bf00      	nop
    de8c:	e000ed00 	.word	0xe000ed00

0000de90 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    de90:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    de92:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    de94:	2400      	movs	r4, #0
    de96:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    de9a:	f7ff ffe5 	bl	de68 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    de9e:	4623      	mov	r3, r4
    dea0:	e008      	b.n	deb4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    dea2:	f103 0120 	add.w	r1, r3, #32
    dea6:	4a0e      	ldr	r2, [pc, #56]	; (dee0 <z_arm_init_arch_hw_at_boot+0x50>)
    dea8:	f04f 30ff 	mov.w	r0, #4294967295
    deac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    deb0:	3301      	adds	r3, #1
    deb2:	b2db      	uxtb	r3, r3
    deb4:	2b07      	cmp	r3, #7
    deb6:	d9f4      	bls.n	dea2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    deb8:	2300      	movs	r3, #0
    deba:	e008      	b.n	dece <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    debc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    dec0:	4a07      	ldr	r2, [pc, #28]	; (dee0 <z_arm_init_arch_hw_at_boot+0x50>)
    dec2:	f04f 30ff 	mov.w	r0, #4294967295
    dec6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    deca:	3301      	adds	r3, #1
    decc:	b2db      	uxtb	r3, r3
    dece:	2b07      	cmp	r3, #7
    ded0:	d9f4      	bls.n	debc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    ded2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    ded4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ded8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    dedc:	bd10      	pop	{r4, pc}
    dede:	bf00      	nop
    dee0:	e000e100 	.word	0xe000e100

0000dee4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    dee4:	b508      	push	{r3, lr}
	if (_current == thread) {
    dee6:	4b0a      	ldr	r3, [pc, #40]	; (df10 <z_impl_k_thread_abort+0x2c>)
    dee8:	689b      	ldr	r3, [r3, #8]
    deea:	4283      	cmp	r3, r0
    deec:	d002      	beq.n	def4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    deee:	f006 ffdf 	bl	14eb0 <z_thread_abort>
}
    def2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    def4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    def8:	2b00      	cmp	r3, #0
    defa:	d0f8      	beq.n	deee <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    defc:	4b05      	ldr	r3, [pc, #20]	; (df14 <z_impl_k_thread_abort+0x30>)
    defe:	685a      	ldr	r2, [r3, #4]
    df00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    df04:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    df06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    df08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    df0c:	625a      	str	r2, [r3, #36]	; 0x24
    df0e:	e7ee      	b.n	deee <z_impl_k_thread_abort+0xa>
    df10:	200025fc 	.word	0x200025fc
    df14:	e000ed00 	.word	0xe000ed00

0000df18 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    df18:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    df1a:	4b03      	ldr	r3, [pc, #12]	; (df28 <z_arm_configure_static_mpu_regions+0x10>)
    df1c:	4a03      	ldr	r2, [pc, #12]	; (df2c <z_arm_configure_static_mpu_regions+0x14>)
    df1e:	2101      	movs	r1, #1
    df20:	4803      	ldr	r0, [pc, #12]	; (df30 <z_arm_configure_static_mpu_regions+0x18>)
    df22:	f008 feea 	bl	16cfa <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    df26:	bd08      	pop	{r3, pc}
    df28:	20010000 	.word	0x20010000
    df2c:	20000000 	.word	0x20000000
    df30:	0001a324 	.word	0x0001a324

0000df34 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    df34:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    df36:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    df3a:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    df3c:	4804      	ldr	r0, [pc, #16]	; (df50 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    df3e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    df40:	2340      	movs	r3, #64	; 0x40
    df42:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    df44:	4b03      	ldr	r3, [pc, #12]	; (df54 <z_arm_configure_dynamic_mpu_regions+0x20>)
    df46:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    df48:	2101      	movs	r1, #1
    df4a:	f008 feda 	bl	16d02 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    df4e:	bd08      	pop	{r3, pc}
    df50:	20001eec 	.word	0x20001eec
    df54:	150b0000 	.word	0x150b0000

0000df58 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    df58:	4a08      	ldr	r2, [pc, #32]	; (df7c <region_init+0x24>)
    df5a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    df5e:	680b      	ldr	r3, [r1, #0]
    df60:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    df64:	4303      	orrs	r3, r0
    df66:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    df6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    df6e:	688b      	ldr	r3, [r1, #8]
    df70:	f043 0301 	orr.w	r3, r3, #1
    df74:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    df78:	4770      	bx	lr
    df7a:	bf00      	nop
    df7c:	e000ed00 	.word	0xe000ed00

0000df80 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    df80:	b5f0      	push	{r4, r5, r6, r7, lr}
    df82:	b083      	sub	sp, #12
    df84:	af00      	add	r7, sp, #0
    df86:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    df88:	2807      	cmp	r0, #7
    df8a:	d805      	bhi.n	df98 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    df8c:	f7ff ffe4 	bl	df58 <region_init>

	return index;
    df90:	4620      	mov	r0, r4
}
    df92:	370c      	adds	r7, #12
    df94:	46bd      	mov	sp, r7
    df96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df98:	466d      	mov	r5, sp
    df9a:	b088      	sub	sp, #32
    df9c:	466b      	mov	r3, sp
    df9e:	f113 0210 	adds.w	r2, r3, #16
    dfa2:	d033      	beq.n	e00c <region_allocate_and_init+0x8c>
    dfa4:	2110      	movs	r1, #16
    dfa6:	b15a      	cbz	r2, dfc0 <region_allocate_and_init+0x40>
    dfa8:	4608      	mov	r0, r1
    dfaa:	2904      	cmp	r1, #4
    dfac:	dd01      	ble.n	dfb2 <region_allocate_and_init+0x32>
    dfae:	4e1a      	ldr	r6, [pc, #104]	; (e018 <region_allocate_and_init+0x98>)
    dfb0:	615e      	str	r6, [r3, #20]
    dfb2:	2808      	cmp	r0, #8
    dfb4:	dd01      	ble.n	dfba <region_allocate_and_init+0x3a>
    dfb6:	4e19      	ldr	r6, [pc, #100]	; (e01c <region_allocate_and_init+0x9c>)
    dfb8:	619e      	str	r6, [r3, #24]
    dfba:	280c      	cmp	r0, #12
    dfbc:	dd00      	ble.n	dfc0 <region_allocate_and_init+0x40>
    dfbe:	61dc      	str	r4, [r3, #28]
    dfc0:	290f      	cmp	r1, #15
    dfc2:	dd26      	ble.n	e012 <region_allocate_and_init+0x92>
    dfc4:	2410      	movs	r4, #16
    dfc6:	b13a      	cbz	r2, dfd8 <region_allocate_and_init+0x58>
    dfc8:	2104      	movs	r1, #4
    dfca:	7139      	strb	r1, [r7, #4]
    dfcc:	2100      	movs	r1, #0
    dfce:	7179      	strb	r1, [r7, #5]
    dfd0:	71b9      	strb	r1, [r7, #6]
    dfd2:	71f9      	strb	r1, [r7, #7]
    dfd4:	6878      	ldr	r0, [r7, #4]
    dfd6:	6118      	str	r0, [r3, #16]
    dfd8:	2100      	movs	r1, #0
    dfda:	f36f 0100 	bfc	r1, #0, #1
    dfde:	f36f 0141 	bfc	r1, #1, #1
    dfe2:	f36f 0182 	bfc	r1, #2, #1
    dfe6:	f36f 01c5 	bfc	r1, #3, #3
    dfea:	2301      	movs	r3, #1
    dfec:	f363 1188 	bfi	r1, r3, #6, #3
    dff0:	f3c4 040a 	ubfx	r4, r4, #0, #11
    dff4:	f364 2153 	bfi	r1, r4, #9, #11
    dff8:	f36f 511f 	bfc	r1, #20, #12
    dffc:	2300      	movs	r3, #0
    dffe:	4808      	ldr	r0, [pc, #32]	; (e020 <region_allocate_and_init+0xa0>)
    e000:	f7fd fdb0 	bl	bb64 <z_impl_z_log_msg_static_create>
    e004:	46ad      	mov	sp, r5
		return -EINVAL;
    e006:	f06f 0015 	mvn.w	r0, #21
    e00a:	e7c2      	b.n	df92 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e00c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e010:	e7c9      	b.n	dfa6 <region_allocate_and_init+0x26>
    e012:	f06f 041b 	mvn.w	r4, #27
    e016:	e7d6      	b.n	dfc6 <region_allocate_and_init+0x46>
    e018:	0001a334 	.word	0x0001a334
    e01c:	0001a388 	.word	0x0001a388
    e020:	000199ec 	.word	0x000199ec

0000e024 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    e024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e028:	b082      	sub	sp, #8
    e02a:	af00      	add	r7, sp, #0
    e02c:	4681      	mov	r9, r0
    e02e:	4688      	mov	r8, r1
    e030:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    e032:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    e034:	2500      	movs	r5, #0
    e036:	e00f      	b.n	e058 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    e038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e03c:	e024      	b.n	e088 <mpu_configure_regions+0x64>
    e03e:	f06f 041b 	mvn.w	r4, #27
    e042:	e031      	b.n	e0a8 <mpu_configure_regions+0x84>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    e044:	4621      	mov	r1, r4
    e046:	b2f0      	uxtb	r0, r6
    e048:	f008 fe38 	bl	16cbc <mpu_configure_region>
    e04c:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    e04e:	f110 0f16 	cmn.w	r0, #22
    e052:	d04b      	beq.n	e0ec <mpu_configure_regions+0xc8>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    e054:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    e056:	3501      	adds	r5, #1
    e058:	4545      	cmp	r5, r8
    e05a:	da47      	bge.n	e0ec <mpu_configure_regions+0xc8>
		if (regions[i].size == 0U) {
    e05c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    e060:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    e064:	6862      	ldr	r2, [r4, #4]
    e066:	2a00      	cmp	r2, #0
    e068:	d0f5      	beq.n	e056 <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    e06a:	f1ba 0f00 	cmp.w	sl, #0
    e06e:	d0e9      	beq.n	e044 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    e070:	4620      	mov	r0, r4
    e072:	f008 fe12 	bl	16c9a <mpu_partition_is_valid>
		if (do_sanity_check &&
    e076:	2800      	cmp	r0, #0
    e078:	d1e4      	bne.n	e044 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e07a:	466e      	mov	r6, sp
    e07c:	b088      	sub	sp, #32
    e07e:	466b      	mov	r3, sp
    e080:	f113 0210 	adds.w	r2, r3, #16
    e084:	d0d8      	beq.n	e038 <mpu_configure_regions+0x14>
    e086:	2110      	movs	r1, #16
    e088:	b15a      	cbz	r2, e0a2 <mpu_configure_regions+0x7e>
    e08a:	4608      	mov	r0, r1
    e08c:	2904      	cmp	r1, #4
    e08e:	dd01      	ble.n	e094 <mpu_configure_regions+0x70>
    e090:	4c19      	ldr	r4, [pc, #100]	; (e0f8 <mpu_configure_regions+0xd4>)
    e092:	615c      	str	r4, [r3, #20]
    e094:	2808      	cmp	r0, #8
    e096:	dd01      	ble.n	e09c <mpu_configure_regions+0x78>
    e098:	4c18      	ldr	r4, [pc, #96]	; (e0fc <mpu_configure_regions+0xd8>)
    e09a:	619c      	str	r4, [r3, #24]
    e09c:	280c      	cmp	r0, #12
    e09e:	dd00      	ble.n	e0a2 <mpu_configure_regions+0x7e>
    e0a0:	61dd      	str	r5, [r3, #28]
    e0a2:	290f      	cmp	r1, #15
    e0a4:	ddcb      	ble.n	e03e <mpu_configure_regions+0x1a>
    e0a6:	2410      	movs	r4, #16
    e0a8:	b13a      	cbz	r2, e0ba <mpu_configure_regions+0x96>
    e0aa:	2104      	movs	r1, #4
    e0ac:	7139      	strb	r1, [r7, #4]
    e0ae:	2100      	movs	r1, #0
    e0b0:	7179      	strb	r1, [r7, #5]
    e0b2:	71b9      	strb	r1, [r7, #6]
    e0b4:	71f9      	strb	r1, [r7, #7]
    e0b6:	6878      	ldr	r0, [r7, #4]
    e0b8:	6118      	str	r0, [r3, #16]
    e0ba:	2100      	movs	r1, #0
    e0bc:	f36f 0100 	bfc	r1, #0, #1
    e0c0:	f36f 0141 	bfc	r1, #1, #1
    e0c4:	f36f 0182 	bfc	r1, #2, #1
    e0c8:	f36f 01c5 	bfc	r1, #3, #3
    e0cc:	2301      	movs	r3, #1
    e0ce:	f363 1188 	bfi	r1, r3, #6, #3
    e0d2:	f3c4 030a 	ubfx	r3, r4, #0, #11
    e0d6:	f363 2153 	bfi	r1, r3, #9, #11
    e0da:	f36f 511f 	bfc	r1, #20, #12
    e0de:	2300      	movs	r3, #0
    e0e0:	4807      	ldr	r0, [pc, #28]	; (e100 <mpu_configure_regions+0xdc>)
    e0e2:	f7fd fd3f 	bl	bb64 <z_impl_z_log_msg_static_create>
    e0e6:	46b5      	mov	sp, r6
			return -EINVAL;
    e0e8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    e0ec:	4630      	mov	r0, r6
    e0ee:	3708      	adds	r7, #8
    e0f0:	46bd      	mov	sp, r7
    e0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0f6:	bf00      	nop
    e0f8:	0001a360 	.word	0x0001a360
    e0fc:	0001a3a4 	.word	0x0001a3a4
    e100:	000199ec 	.word	0x000199ec

0000e104 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    e104:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    e106:	4c03      	ldr	r4, [pc, #12]	; (e114 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    e108:	2301      	movs	r3, #1
    e10a:	7822      	ldrb	r2, [r4, #0]
    e10c:	f7ff ff8a 	bl	e024 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e110:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    e112:	bd10      	pop	{r4, pc}
    e114:	20002645 	.word	0x20002645

0000e118 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    e118:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    e11a:	2300      	movs	r3, #0
    e11c:	4a09      	ldr	r2, [pc, #36]	; (e144 <mpu_configure_dynamic_mpu_regions+0x2c>)
    e11e:	7812      	ldrb	r2, [r2, #0]
    e120:	f7ff ff80 	bl	e024 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    e124:	f110 0f16 	cmn.w	r0, #22
    e128:	d00a      	beq.n	e140 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e12a:	4603      	mov	r3, r0
    e12c:	e006      	b.n	e13c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    e12e:	4a06      	ldr	r2, [pc, #24]	; (e148 <mpu_configure_dynamic_mpu_regions+0x30>)
    e130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    e134:	2100      	movs	r1, #0
    e136:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    e13a:	3301      	adds	r3, #1
    e13c:	2b07      	cmp	r3, #7
    e13e:	ddf6      	ble.n	e12e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    e140:	bd08      	pop	{r3, pc}
    e142:	bf00      	nop
    e144:	20002645 	.word	0x20002645
    e148:	e000ed00 	.word	0xe000ed00

0000e14c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e14c:	4b04      	ldr	r3, [pc, #16]	; (e160 <arm_core_mpu_enable+0x14>)
    e14e:	2205      	movs	r2, #5
    e150:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e154:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e158:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e15c:	4770      	bx	lr
    e15e:	bf00      	nop
    e160:	e000ed00 	.word	0xe000ed00

0000e164 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e164:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e168:	4b02      	ldr	r3, [pc, #8]	; (e174 <arm_core_mpu_disable+0x10>)
    e16a:	2200      	movs	r2, #0
    e16c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e170:	4770      	bx	lr
    e172:	bf00      	nop
    e174:	e000ed00 	.word	0xe000ed00

0000e178 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e178:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e17a:	4b0e      	ldr	r3, [pc, #56]	; (e1b4 <z_arm_mpu_init+0x3c>)
    e17c:	681d      	ldr	r5, [r3, #0]
    e17e:	2d08      	cmp	r5, #8
    e180:	d815      	bhi.n	e1ae <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    e182:	f7ff ffef 	bl	e164 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e186:	2400      	movs	r4, #0
    e188:	e009      	b.n	e19e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e18a:	4b0a      	ldr	r3, [pc, #40]	; (e1b4 <z_arm_mpu_init+0x3c>)
    e18c:	6859      	ldr	r1, [r3, #4]
    e18e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    e192:	0093      	lsls	r3, r2, #2
    e194:	4419      	add	r1, r3
    e196:	4620      	mov	r0, r4
    e198:	f7ff fede 	bl	df58 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e19c:	3401      	adds	r4, #1
    e19e:	42a5      	cmp	r5, r4
    e1a0:	d8f3      	bhi.n	e18a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e1a2:	4b05      	ldr	r3, [pc, #20]	; (e1b8 <z_arm_mpu_init+0x40>)
    e1a4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    e1a6:	f7ff ffd1 	bl	e14c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    e1aa:	2000      	movs	r0, #0
}
    e1ac:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    e1ae:	f04f 30ff 	mov.w	r0, #4294967295
    e1b2:	e7fb      	b.n	e1ac <z_arm_mpu_init+0x34>
    e1b4:	0001a3bc 	.word	0x0001a3bc
    e1b8:	20002645 	.word	0x20002645

0000e1bc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    e1bc:	4b01      	ldr	r3, [pc, #4]	; (e1c4 <__stdout_hook_install+0x8>)
    e1be:	6018      	str	r0, [r3, #0]
}
    e1c0:	4770      	bx	lr
    e1c2:	bf00      	nop
    e1c4:	20000308 	.word	0x20000308

0000e1c8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    e1c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e1cc:	4905      	ldr	r1, [pc, #20]	; (e1e4 <__NVIC_SystemReset+0x1c>)
    e1ce:	68ca      	ldr	r2, [r1, #12]
    e1d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e1d4:	4b04      	ldr	r3, [pc, #16]	; (e1e8 <__NVIC_SystemReset+0x20>)
    e1d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e1d8:	60cb      	str	r3, [r1, #12]
    e1da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e1de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e1e0:	e7fd      	b.n	e1de <__NVIC_SystemReset+0x16>
    e1e2:	bf00      	nop
    e1e4:	e000ed00 	.word	0xe000ed00
    e1e8:	05fa0004 	.word	0x05fa0004

0000e1ec <nordicsemi_nrf52_init>:
	__asm__ volatile(
    e1ec:	f04f 0340 	mov.w	r3, #64	; 0x40
    e1f0:	f3ef 8211 	mrs	r2, BASEPRI
    e1f4:	f383 8812 	msr	BASEPRI_MAX, r3
    e1f8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e1fc:	2301      	movs	r3, #1
    e1fe:	4906      	ldr	r1, [pc, #24]	; (e218 <nordicsemi_nrf52_init+0x2c>)
    e200:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    e204:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e208:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    e20c:	f382 8811 	msr	BASEPRI, r2
    e210:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e214:	2000      	movs	r0, #0
    e216:	4770      	bx	lr
    e218:	4001e000 	.word	0x4001e000

0000e21c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e21c:	b130      	cbz	r0, e22c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    e21e:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    e220:	4b03      	ldr	r3, [pc, #12]	; (e230 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    e222:	0180      	lsls	r0, r0, #6
    e224:	f043 0301 	orr.w	r3, r3, #1
    e228:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    e22a:	bd08      	pop	{r3, pc}
    e22c:	4770      	bx	lr
    e22e:	bf00      	nop
    e230:	00019af0 	.word	0x00019af0

0000e234 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    e234:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    e236:	4804      	ldr	r0, [pc, #16]	; (e248 <xoshiro128_initialize+0x14>)
    e238:	f00a fb49 	bl	188ce <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
    e23c:	b108      	cbz	r0, e242 <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
    e23e:	2000      	movs	r0, #0
}
    e240:	bd08      	pop	{r3, pc}
		return -ENODEV;
    e242:	f06f 0012 	mvn.w	r0, #18
    e246:	e7fb      	b.n	e240 <xoshiro128_initialize+0xc>
    e248:	000197a8 	.word	0x000197a8

0000e24c <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
    e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e24e:	b08b      	sub	sp, #44	; 0x2c
    e250:	4604      	mov	r4, r0
    e252:	460d      	mov	r5, r1
    e254:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
    e256:	7803      	ldrb	r3, [r0, #0]
    e258:	2b03      	cmp	r3, #3
    e25a:	d82c      	bhi.n	e2b6 <bt_addr_le_to_str+0x6a>
    e25c:	e8df f003 	tbb	[pc, r3]
    e260:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    e264:	4917      	ldr	r1, [pc, #92]	; (e2c4 <bt_addr_le_to_str+0x78>)
    e266:	a807      	add	r0, sp, #28
    e268:	f008 fd4f 	bl	16d0a <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e26c:	7963      	ldrb	r3, [r4, #5]
    e26e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e270:	78e1      	ldrb	r1, [r4, #3]
    e272:	78a0      	ldrb	r0, [r4, #2]
    e274:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e276:	f10d 0c1c 	add.w	ip, sp, #28
    e27a:	f8cd c014 	str.w	ip, [sp, #20]
    e27e:	9704      	str	r7, [sp, #16]
    e280:	9003      	str	r0, [sp, #12]
    e282:	9102      	str	r1, [sp, #8]
    e284:	9201      	str	r2, [sp, #4]
    e286:	9300      	str	r3, [sp, #0]
    e288:	79a3      	ldrb	r3, [r4, #6]
    e28a:	4a0f      	ldr	r2, [pc, #60]	; (e2c8 <bt_addr_le_to_str+0x7c>)
    e28c:	4631      	mov	r1, r6
    e28e:	4628      	mov	r0, r5
    e290:	f007 fa2e 	bl	156f0 <snprintk>
}
    e294:	b00b      	add	sp, #44	; 0x2c
    e296:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    e298:	490c      	ldr	r1, [pc, #48]	; (e2cc <bt_addr_le_to_str+0x80>)
    e29a:	a807      	add	r0, sp, #28
    e29c:	f008 fd35 	bl	16d0a <strcpy>
		break;
    e2a0:	e7e4      	b.n	e26c <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
    e2a2:	490b      	ldr	r1, [pc, #44]	; (e2d0 <bt_addr_le_to_str+0x84>)
    e2a4:	a807      	add	r0, sp, #28
    e2a6:	f008 fd30 	bl	16d0a <strcpy>
		break;
    e2aa:	e7df      	b.n	e26c <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
    e2ac:	4909      	ldr	r1, [pc, #36]	; (e2d4 <bt_addr_le_to_str+0x88>)
    e2ae:	a807      	add	r0, sp, #28
    e2b0:	f008 fd2b 	bl	16d0a <strcpy>
		break;
    e2b4:	e7da      	b.n	e26c <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e2b6:	4a08      	ldr	r2, [pc, #32]	; (e2d8 <bt_addr_le_to_str+0x8c>)
    e2b8:	210a      	movs	r1, #10
    e2ba:	a807      	add	r0, sp, #28
    e2bc:	f007 fa18 	bl	156f0 <snprintk>
		break;
    e2c0:	e7d4      	b.n	e26c <bt_addr_le_to_str+0x20>
    e2c2:	bf00      	nop
    e2c4:	0001a408 	.word	0x0001a408
    e2c8:	0001a438 	.word	0x0001a438
    e2cc:	0001a410 	.word	0x0001a410
    e2d0:	0001a418 	.word	0x0001a418
    e2d4:	0001a424 	.word	0x0001a424
    e2d8:	0001a430 	.word	0x0001a430

0000e2dc <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e2dc:	2940      	cmp	r1, #64	; 0x40
    e2de:	bf28      	it	cs
    e2e0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
    e2e2:	2300      	movs	r3, #0
    e2e4:	428b      	cmp	r3, r1
    e2e6:	d21c      	bcs.n	e322 <bt_hex+0x46>
{
    e2e8:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
    e2ea:	f810 c003 	ldrb.w	ip, [r0, r3]
    e2ee:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    e2f2:	005a      	lsls	r2, r3, #1
    e2f4:	4d0d      	ldr	r5, [pc, #52]	; (e32c <bt_hex+0x50>)
    e2f6:	f815 c00c 	ldrb.w	ip, [r5, ip]
    e2fa:	4c0d      	ldr	r4, [pc, #52]	; (e330 <bt_hex+0x54>)
    e2fc:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e300:	f810 c003 	ldrb.w	ip, [r0, r3]
    e304:	f00c 0c0f 	and.w	ip, ip, #15
    e308:	3201      	adds	r2, #1
    e30a:	f815 500c 	ldrb.w	r5, [r5, ip]
    e30e:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
    e310:	3301      	adds	r3, #1
    e312:	428b      	cmp	r3, r1
    e314:	d3e9      	bcc.n	e2ea <bt_hex+0xe>
	}

	str[i * 2] = '\0';
    e316:	4806      	ldr	r0, [pc, #24]	; (e330 <bt_hex+0x54>)
    e318:	2200      	movs	r2, #0
    e31a:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
    e31e:	bc30      	pop	{r4, r5}
    e320:	4770      	bx	lr
	str[i * 2] = '\0';
    e322:	4803      	ldr	r0, [pc, #12]	; (e330 <bt_hex+0x54>)
    e324:	2200      	movs	r2, #0
    e326:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
    e32a:	4770      	bx	lr
    e32c:	0001a45c 	.word	0x0001a45c
    e330:	20001f18 	.word	0x20001f18

0000e334 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    e334:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
    e336:	4c03      	ldr	r4, [pc, #12]	; (e344 <bt_addr_le_str+0x10>)
    e338:	221e      	movs	r2, #30
    e33a:	4621      	mov	r1, r4
    e33c:	f7ff ff86 	bl	e24c <bt_addr_le_to_str>

	return str;
}
    e340:	4620      	mov	r0, r4
    e342:	bd10      	pop	{r4, pc}
    e344:	20001ef8 	.word	0x20001ef8

0000e348 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    e348:	b538      	push	{r3, r4, r5, lr}
    e34a:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    e34c:	4805      	ldr	r0, [pc, #20]	; (e364 <bt_buf_get_rx+0x1c>)
    e34e:	f009 f8af 	bl	174b0 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e352:	4605      	mov	r5, r0
    e354:	b120      	cbz	r0, e360 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    e356:	2100      	movs	r1, #0
    e358:	300c      	adds	r0, #12
    e35a:	f009 f90d 	bl	17578 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e35e:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e360:	4628      	mov	r0, r5
    e362:	bd38      	pop	{r3, r4, r5, pc}
    e364:	200004a4 	.word	0x200004a4

0000e368 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e368:	b538      	push	{r3, r4, r5, lr}
    e36a:	4602      	mov	r2, r0
    e36c:	460b      	mov	r3, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e36e:	490e      	ldr	r1, [pc, #56]	; (e3a8 <bt_buf_get_cmd_complete+0x40>)
    e370:	2000      	movs	r0, #0
    e372:	f3bf 8f5b 	dmb	ish
    e376:	e851 4f00 	ldrex	r4, [r1]
    e37a:	e841 0500 	strex	r5, r0, [r1]
    e37e:	2d00      	cmp	r5, #0
    e380:	d1f9      	bne.n	e376 <bt_buf_get_cmd_complete+0xe>
    e382:	f3bf 8f5b 	dmb	ish
    e386:	4625      	mov	r5, r4
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    e388:	b92c      	cbnz	r4, e396 <bt_buf_get_cmd_complete+0x2e>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e38a:	2001      	movs	r0, #1
    e38c:	f7ff ffdc 	bl	e348 <bt_buf_get_rx>
    e390:	4605      	mov	r5, r0
}
    e392:	4628      	mov	r0, r5
    e394:	bd38      	pop	{r3, r4, r5, pc}
    e396:	2301      	movs	r3, #1
    e398:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    e39a:	4601      	mov	r1, r0
    e39c:	8220      	strh	r0, [r4, #16]
    e39e:	f104 000c 	add.w	r0, r4, #12
    e3a2:	f009 f8e9 	bl	17578 <net_buf_simple_reserve>
		return buf;
    e3a6:	e7f4      	b.n	e392 <bt_buf_get_cmd_complete+0x2a>
    e3a8:	200002a0 	.word	0x200002a0

0000e3ac <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e3ac:	b510      	push	{r4, lr}
	switch (evt) {
    e3ae:	f1a0 0c0e 	sub.w	ip, r0, #14
    e3b2:	f1bc 0f01 	cmp.w	ip, #1
    e3b6:	d906      	bls.n	e3c6 <bt_buf_get_evt+0x1a>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
    e3b8:	b959      	cbnz	r1, e3d2 <bt_buf_get_evt+0x26>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e3ba:	2001      	movs	r0, #1
    e3bc:	f7ff ffc4 	bl	e348 <bt_buf_get_rx>
    e3c0:	4604      	mov	r4, r0
	}
}
    e3c2:	4620      	mov	r0, r4
    e3c4:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    e3c6:	4610      	mov	r0, r2
    e3c8:	4619      	mov	r1, r3
    e3ca:	f7ff ffcd 	bl	e368 <bt_buf_get_cmd_complete>
    e3ce:	4604      	mov	r4, r0
    e3d0:	e7f7      	b.n	e3c2 <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
    e3d2:	4806      	ldr	r0, [pc, #24]	; (e3ec <bt_buf_get_evt+0x40>)
    e3d4:	f009 f86c 	bl	174b0 <net_buf_alloc_fixed>
			if (buf) {
    e3d8:	4604      	mov	r4, r0
    e3da:	2800      	cmp	r0, #0
    e3dc:	d0f1      	beq.n	e3c2 <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
    e3de:	2100      	movs	r1, #0
    e3e0:	300c      	adds	r0, #12
    e3e2:	f009 f8c9 	bl	17578 <net_buf_simple_reserve>
    e3e6:	2301      	movs	r3, #1
    e3e8:	7623      	strb	r3, [r4, #24]
			return buf;
    e3ea:	e7ea      	b.n	e3c2 <bt_buf_get_evt+0x16>
    e3ec:	2000044c 	.word	0x2000044c

0000e3f0 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    e3f0:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    e3f2:	7851      	ldrb	r1, [r2, #1]
    e3f4:	4b08      	ldr	r3, [pc, #32]	; (e418 <read_local_ver_complete+0x28>)
    e3f6:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    e3fa:	8851      	ldrh	r1, [r2, #2]
    e3fc:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    e400:	7911      	ldrb	r1, [r2, #4]
    e402:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    e406:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    e40a:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    e40e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    e412:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
    e416:	4770      	bx	lr
    e418:	200001a0 	.word	0x200001a0

0000e41c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    e41c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    e41e:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    e420:	3001      	adds	r0, #1
    e422:	f008 fd52 	bl	16eca <sys_get_le64>
    e426:	4b02      	ldr	r3, [pc, #8]	; (e430 <le_read_supp_states_complete+0x14>)
    e428:	e9c3 0138 	strd	r0, r1, [r3, #224]	; 0xe0
}
    e42c:	bd08      	pop	{r3, pc}
    e42e:	bf00      	nop
    e430:	200001a0 	.word	0x200001a0

0000e434 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
    e434:	b510      	push	{r4, lr}
    e436:	b08e      	sub	sp, #56	; 0x38
    e438:	4686      	mov	lr, r0
	const char * const str[] = {
    e43a:	46ec      	mov	ip, sp
    e43c:	4c0c      	ldr	r4, [pc, #48]	; (e470 <ver_str+0x3c>)
    e43e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e44a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e44c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e450:	e894 0003 	ldmia.w	r4, {r0, r1}
    e454:	e88c 0003 	stmia.w	ip, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
    e458:	f1be 0f0d 	cmp.w	lr, #13
    e45c:	d902      	bls.n	e464 <ver_str+0x30>
		return str[ver];
	}

	return "unknown";
    e45e:	4805      	ldr	r0, [pc, #20]	; (e474 <ver_str+0x40>)
}
    e460:	b00e      	add	sp, #56	; 0x38
    e462:	bd10      	pop	{r4, pc}
		return str[ver];
    e464:	ab0e      	add	r3, sp, #56	; 0x38
    e466:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    e46a:	f85e 0c38 	ldr.w	r0, [lr, #-56]
    e46e:	e7f7      	b.n	e460 <ver_str+0x2c>
    e470:	00019aa4 	.word	0x00019aa4
    e474:	0001a498 	.word	0x0001a498

0000e478 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
    e478:	2803      	cmp	r0, #3
    e47a:	d901      	bls.n	e480 <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
    e47c:	4802      	ldr	r0, [pc, #8]	; (e488 <vs_hw_platform+0x10>)
}
    e47e:	4770      	bx	lr
		return plat_str[platform];
    e480:	4b02      	ldr	r3, [pc, #8]	; (e48c <vs_hw_platform+0x14>)
    e482:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e486:	4770      	bx	lr
    e488:	0001a498 	.word	0x0001a498
    e48c:	0001abb0 	.word	0x0001abb0

0000e490 <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    e490:	2802      	cmp	r0, #2
    e492:	d107      	bne.n	e4a4 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
    e494:	2903      	cmp	r1, #3
    e496:	d901      	bls.n	e49c <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
    e498:	4803      	ldr	r0, [pc, #12]	; (e4a8 <vs_hw_variant+0x18>)
}
    e49a:	4770      	bx	lr
		return nordic_str[variant];
    e49c:	4b03      	ldr	r3, [pc, #12]	; (e4ac <vs_hw_variant+0x1c>)
    e49e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    e4a2:	4770      	bx	lr
		return "unknown";
    e4a4:	4800      	ldr	r0, [pc, #0]	; (e4a8 <vs_hw_variant+0x18>)
    e4a6:	4770      	bx	lr
    e4a8:	0001a498 	.word	0x0001a498
    e4ac:	0001aba0 	.word	0x0001aba0

0000e4b0 <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
    e4b0:	2803      	cmp	r0, #3
    e4b2:	d901      	bls.n	e4b8 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
    e4b4:	4802      	ldr	r0, [pc, #8]	; (e4c0 <vs_fw_variant+0x10>)
}
    e4b6:	4770      	bx	lr
		return var_str[variant];
    e4b8:	4b02      	ldr	r3, [pc, #8]	; (e4c4 <vs_fw_variant+0x14>)
    e4ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e4be:	4770      	bx	lr
    e4c0:	0001a498 	.word	0x0001a498
    e4c4:	0001ab90 	.word	0x0001ab90

0000e4c8 <hci_reset_complete>:
	uint8_t status = buf->data[0];
    e4c8:	68c3      	ldr	r3, [r0, #12]
    e4ca:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    e4cc:	b98b      	cbnz	r3, e4f2 <hci_reset_complete+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e4ce:	4b09      	ldr	r3, [pc, #36]	; (e4f4 <hci_reset_complete+0x2c>)
    e4d0:	f3bf 8f5b 	dmb	ish
    e4d4:	681a      	ldr	r2, [r3, #0]
    e4d6:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e4da:	f002 0209 	and.w	r2, r2, #9
    e4de:	f3bf 8f5b 	dmb	ish
    e4e2:	e853 1f00 	ldrex	r1, [r3]
    e4e6:	e843 2000 	strex	r0, r2, [r3]
    e4ea:	2800      	cmp	r0, #0
    e4ec:	d1f9      	bne.n	e4e2 <hci_reset_complete+0x1a>
    e4ee:	f3bf 8f5b 	dmb	ish
}
    e4f2:	4770      	bx	lr
    e4f4:	20000274 	.word	0x20000274

0000e4f8 <read_local_features_complete>:
{
    e4f8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    e4fa:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    e4fc:	2208      	movs	r2, #8
    e4fe:	3101      	adds	r1, #1
    e500:	4801      	ldr	r0, [pc, #4]	; (e508 <read_local_features_complete+0x10>)
    e502:	f008 fc56 	bl	16db2 <memcpy>
}
    e506:	bd08      	pop	{r3, pc}
    e508:	20000218 	.word	0x20000218

0000e50c <read_supported_commands_complete>:
{
    e50c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    e50e:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    e510:	2240      	movs	r2, #64	; 0x40
    e512:	3101      	adds	r1, #1
    e514:	4801      	ldr	r0, [pc, #4]	; (e51c <read_supported_commands_complete+0x10>)
    e516:	f008 fc4c 	bl	16db2 <memcpy>
}
    e51a:	bd08      	pop	{r3, pc}
    e51c:	20000220 	.word	0x20000220

0000e520 <read_le_features_complete>:
{
    e520:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    e522:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    e524:	2208      	movs	r2, #8
    e526:	3101      	adds	r1, #1
    e528:	4801      	ldr	r0, [pc, #4]	; (e530 <read_le_features_complete+0x10>)
    e52a:	f008 fc42 	bl	16db2 <memcpy>
}
    e52e:	bd08      	pop	{r3, pc}
    e530:	20000278 	.word	0x20000278

0000e534 <handle_event_common>:
{
    e534:	b5f0      	push	{r4, r5, r6, r7, lr}
    e536:	b083      	sub	sp, #12
    e538:	af00      	add	r7, sp, #0
    e53a:	4604      	mov	r4, r0
    e53c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    e53e:	f04f 0c00 	mov.w	ip, #0
    e542:	4563      	cmp	r3, ip
    e544:	d958      	bls.n	e5f8 <handle_event_common+0xc4>
		const struct event_handler *handler = &handlers[i];
    e546:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
    e54a:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
    e54e:	45a6      	cmp	lr, r4
    e550:	d109      	bne.n	e566 <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
    e552:	8a03      	ldrh	r3, [r0, #16]
    e554:	784a      	ldrb	r2, [r1, #1]
    e556:	4293      	cmp	r3, r2
    e558:	d308      	bcc.n	e56c <handle_event_common+0x38>
		handler->handler(buf);
    e55a:	684b      	ldr	r3, [r1, #4]
    e55c:	4798      	blx	r3
		return 0;
    e55e:	2000      	movs	r0, #0
}
    e560:	370c      	adds	r7, #12
    e562:	46bd      	mov	sp, r7
    e564:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
    e566:	f10c 0c01 	add.w	ip, ip, #1
    e56a:	e7ea      	b.n	e542 <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    e56c:	466d      	mov	r5, sp
    e56e:	b08a      	sub	sp, #40	; 0x28
    e570:	4669      	mov	r1, sp
    e572:	f111 0210 	adds.w	r2, r1, #16
    e576:	d039      	beq.n	e5ec <handle_event_common+0xb8>
    e578:	2014      	movs	r0, #20
    e57a:	b18a      	cbz	r2, e5a0 <handle_event_common+0x6c>
    e57c:	4684      	mov	ip, r0
    e57e:	2804      	cmp	r0, #4
    e580:	dd01      	ble.n	e586 <handle_event_common+0x52>
    e582:	4e1f      	ldr	r6, [pc, #124]	; (e600 <handle_event_common+0xcc>)
    e584:	614e      	str	r6, [r1, #20]
    e586:	f1bc 0f08 	cmp.w	ip, #8
    e58a:	dd01      	ble.n	e590 <handle_event_common+0x5c>
    e58c:	4e1d      	ldr	r6, [pc, #116]	; (e604 <handle_event_common+0xd0>)
    e58e:	618e      	str	r6, [r1, #24]
    e590:	f1bc 0f0c 	cmp.w	ip, #12
    e594:	dd00      	ble.n	e598 <handle_event_common+0x64>
    e596:	61cb      	str	r3, [r1, #28]
    e598:	f1bc 0f10 	cmp.w	ip, #16
    e59c:	dd00      	ble.n	e5a0 <handle_event_common+0x6c>
    e59e:	620c      	str	r4, [r1, #32]
    e5a0:	2813      	cmp	r0, #19
    e5a2:	dd26      	ble.n	e5f2 <handle_event_common+0xbe>
    e5a4:	2314      	movs	r3, #20
    e5a6:	b13a      	cbz	r2, e5b8 <handle_event_common+0x84>
    e5a8:	2005      	movs	r0, #5
    e5aa:	7138      	strb	r0, [r7, #4]
    e5ac:	2000      	movs	r0, #0
    e5ae:	7178      	strb	r0, [r7, #5]
    e5b0:	71b8      	strb	r0, [r7, #6]
    e5b2:	71f8      	strb	r0, [r7, #7]
    e5b4:	6878      	ldr	r0, [r7, #4]
    e5b6:	6108      	str	r0, [r1, #16]
    e5b8:	2100      	movs	r1, #0
    e5ba:	f36f 0100 	bfc	r1, #0, #1
    e5be:	f36f 0141 	bfc	r1, #1, #1
    e5c2:	f36f 0182 	bfc	r1, #2, #1
    e5c6:	f36f 01c5 	bfc	r1, #3, #3
    e5ca:	2001      	movs	r0, #1
    e5cc:	f360 1188 	bfi	r1, r0, #6, #3
    e5d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    e5d4:	f363 2153 	bfi	r1, r3, #9, #11
    e5d8:	f36f 511f 	bfc	r1, #20, #12
    e5dc:	2300      	movs	r3, #0
    e5de:	480a      	ldr	r0, [pc, #40]	; (e608 <handle_event_common+0xd4>)
    e5e0:	f7fd fac0 	bl	bb64 <z_impl_z_log_msg_static_create>
    e5e4:	46ad      	mov	sp, r5
			return -EINVAL;
    e5e6:	f06f 0015 	mvn.w	r0, #21
    e5ea:	e7b9      	b.n	e560 <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    e5ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e5f0:	e7c3      	b.n	e57a <handle_event_common+0x46>
    e5f2:	f06f 031b 	mvn.w	r3, #27
    e5f6:	e7d6      	b.n	e5a6 <handle_event_common+0x72>
	return -EOPNOTSUPP;
    e5f8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
    e5fc:	e7b0      	b.n	e560 <handle_event_common+0x2c>
    e5fe:	bf00      	nop
    e600:	0001a4a0 	.word	0x0001a4a0
    e604:	0001ab44 	.word	0x0001ab44
    e608:	00019994 	.word	0x00019994

0000e60c <hci_cmd_done>:
{
    e60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e610:	b082      	sub	sp, #8
    e612:	af00      	add	r7, sp, #0
    e614:	4605      	mov	r5, r0
    e616:	460e      	mov	r6, r1
    e618:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e61a:	7a90      	ldrb	r0, [r2, #10]
    e61c:	f002 fd84 	bl	11128 <net_buf_pool_get>
    e620:	4b79      	ldr	r3, [pc, #484]	; (e808 <hci_cmd_done+0x1fc>)
    e622:	4283      	cmp	r3, r0
    e624:	d054      	beq.n	e6d0 <hci_cmd_done+0xc4>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    e626:	f894 800a 	ldrb.w	r8, [r4, #10]
    e62a:	4640      	mov	r0, r8
    e62c:	f002 fd7c 	bl	11128 <net_buf_pool_get>
    e630:	466e      	mov	r6, sp
    e632:	b08c      	sub	sp, #48	; 0x30
    e634:	466b      	mov	r3, sp
    e636:	f113 0210 	adds.w	r2, r3, #16
    e63a:	d043      	beq.n	e6c4 <hci_cmd_done+0xb8>
    e63c:	241c      	movs	r4, #28
    e63e:	b1d2      	cbz	r2, e676 <hci_cmd_done+0x6a>
    e640:	4621      	mov	r1, r4
    e642:	2c04      	cmp	r4, #4
    e644:	dd03      	ble.n	e64e <hci_cmd_done+0x42>
    e646:	f8df c1c4 	ldr.w	ip, [pc, #452]	; e80c <hci_cmd_done+0x200>
    e64a:	f8c3 c014 	str.w	ip, [r3, #20]
    e64e:	2908      	cmp	r1, #8
    e650:	dd03      	ble.n	e65a <hci_cmd_done+0x4e>
    e652:	f8df c1bc 	ldr.w	ip, [pc, #444]	; e810 <hci_cmd_done+0x204>
    e656:	f8c3 c018 	str.w	ip, [r3, #24]
    e65a:	290c      	cmp	r1, #12
    e65c:	dd00      	ble.n	e660 <hci_cmd_done+0x54>
    e65e:	61dd      	str	r5, [r3, #28]
    e660:	2910      	cmp	r1, #16
    e662:	dd01      	ble.n	e668 <hci_cmd_done+0x5c>
    e664:	f8c3 8020 	str.w	r8, [r3, #32]
    e668:	2914      	cmp	r1, #20
    e66a:	dd00      	ble.n	e66e <hci_cmd_done+0x62>
    e66c:	6258      	str	r0, [r3, #36]	; 0x24
    e66e:	2918      	cmp	r1, #24
    e670:	dd01      	ble.n	e676 <hci_cmd_done+0x6a>
    e672:	4965      	ldr	r1, [pc, #404]	; (e808 <hci_cmd_done+0x1fc>)
    e674:	6299      	str	r1, [r3, #40]	; 0x28
    e676:	2c1b      	cmp	r4, #27
    e678:	dd27      	ble.n	e6ca <hci_cmd_done+0xbe>
    e67a:	241c      	movs	r4, #28
    e67c:	b13a      	cbz	r2, e68e <hci_cmd_done+0x82>
    e67e:	2107      	movs	r1, #7
    e680:	7139      	strb	r1, [r7, #4]
    e682:	2100      	movs	r1, #0
    e684:	7179      	strb	r1, [r7, #5]
    e686:	71b9      	strb	r1, [r7, #6]
    e688:	71f9      	strb	r1, [r7, #7]
    e68a:	6878      	ldr	r0, [r7, #4]
    e68c:	6118      	str	r0, [r3, #16]
    e68e:	2100      	movs	r1, #0
    e690:	f36f 0100 	bfc	r1, #0, #1
    e694:	f36f 0141 	bfc	r1, #1, #1
    e698:	f36f 0182 	bfc	r1, #2, #1
    e69c:	f36f 01c5 	bfc	r1, #3, #3
    e6a0:	2302      	movs	r3, #2
    e6a2:	f363 1188 	bfi	r1, r3, #6, #3
    e6a6:	f3c4 040a 	ubfx	r4, r4, #0, #11
    e6aa:	f364 2153 	bfi	r1, r4, #9, #11
    e6ae:	f36f 511f 	bfc	r1, #20, #12
    e6b2:	2300      	movs	r3, #0
    e6b4:	4857      	ldr	r0, [pc, #348]	; (e814 <hci_cmd_done+0x208>)
    e6b6:	f7fd fa55 	bl	bb64 <z_impl_z_log_msg_static_create>
    e6ba:	46b5      	mov	sp, r6
}
    e6bc:	3708      	adds	r7, #8
    e6be:	46bd      	mov	sp, r7
    e6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    e6c4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e6c8:	e7b9      	b.n	e63e <hci_cmd_done+0x32>
    e6ca:	f06f 041b 	mvn.w	r4, #27
    e6ce:	e7d5      	b.n	e67c <hci_cmd_done+0x70>
	if (cmd(buf)->opcode != opcode) {
    e6d0:	4620      	mov	r0, r4
    e6d2:	f008 fe4a 	bl	1736a <net_buf_id>
    e6d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e6da:	4b4f      	ldr	r3, [pc, #316]	; (e818 <hci_cmd_done+0x20c>)
    e6dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e6e0:	885b      	ldrh	r3, [r3, #2]
    e6e2:	429d      	cmp	r5, r3
    e6e4:	d133      	bne.n	e74e <hci_cmd_done+0x142>
	if (bt_dev.sent_cmd) {
    e6e6:	4b4d      	ldr	r3, [pc, #308]	; (e81c <hci_cmd_done+0x210>)
    e6e8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    e6ec:	b128      	cbz	r0, e6fa <hci_cmd_done+0xee>
		net_buf_unref(bt_dev.sent_cmd);
    e6ee:	f008 ff1c 	bl	1752a <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e6f2:	4b4a      	ldr	r3, [pc, #296]	; (e81c <hci_cmd_done+0x210>)
    e6f4:	2200      	movs	r2, #0
    e6f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    e6fa:	4620      	mov	r0, r4
    e6fc:	f008 fe35 	bl	1736a <net_buf_id>
    e700:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e704:	4b44      	ldr	r3, [pc, #272]	; (e818 <hci_cmd_done+0x20c>)
    e706:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e70a:	685b      	ldr	r3, [r3, #4]
    e70c:	b10b      	cbz	r3, e712 <hci_cmd_done+0x106>
    e70e:	2e00      	cmp	r6, #0
    e710:	d06b      	beq.n	e7ea <hci_cmd_done+0x1de>
	if (cmd(buf)->sync) {
    e712:	4620      	mov	r0, r4
    e714:	f008 fe29 	bl	1736a <net_buf_id>
    e718:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e71c:	4b3e      	ldr	r3, [pc, #248]	; (e818 <hci_cmd_done+0x20c>)
    e71e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e722:	689b      	ldr	r3, [r3, #8]
    e724:	2b00      	cmp	r3, #0
    e726:	d0c9      	beq.n	e6bc <hci_cmd_done+0xb0>
		cmd(buf)->status = status;
    e728:	4620      	mov	r0, r4
    e72a:	f008 fe1e 	bl	1736a <net_buf_id>
    e72e:	4d3a      	ldr	r5, [pc, #232]	; (e818 <hci_cmd_done+0x20c>)
    e730:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e734:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    e738:	4620      	mov	r0, r4
    e73a:	f008 fe16 	bl	1736a <net_buf_id>
    e73e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e742:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    e746:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    e748:	f005 fe88 	bl	1445c <z_impl_k_sem_give>
}
    e74c:	e7b6      	b.n	e6bc <hci_cmd_done+0xb0>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    e74e:	4620      	mov	r0, r4
    e750:	f008 fe0b 	bl	1736a <net_buf_id>
    e754:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e758:	4b2f      	ldr	r3, [pc, #188]	; (e818 <hci_cmd_done+0x20c>)
    e75a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e75e:	885c      	ldrh	r4, [r3, #2]
    e760:	466e      	mov	r6, sp
    e762:	b08a      	sub	sp, #40	; 0x28
    e764:	466b      	mov	r3, sp
    e766:	f113 0210 	adds.w	r2, r3, #16
    e76a:	d038      	beq.n	e7de <hci_cmd_done+0x1d2>
    e76c:	2114      	movs	r1, #20
    e76e:	b192      	cbz	r2, e796 <hci_cmd_done+0x18a>
    e770:	4608      	mov	r0, r1
    e772:	2904      	cmp	r1, #4
    e774:	dd03      	ble.n	e77e <hci_cmd_done+0x172>
    e776:	f8df c0a8 	ldr.w	ip, [pc, #168]	; e820 <hci_cmd_done+0x214>
    e77a:	f8c3 c014 	str.w	ip, [r3, #20]
    e77e:	2808      	cmp	r0, #8
    e780:	dd03      	ble.n	e78a <hci_cmd_done+0x17e>
    e782:	f8df c08c 	ldr.w	ip, [pc, #140]	; e810 <hci_cmd_done+0x204>
    e786:	f8c3 c018 	str.w	ip, [r3, #24]
    e78a:	280c      	cmp	r0, #12
    e78c:	dd00      	ble.n	e790 <hci_cmd_done+0x184>
    e78e:	61dd      	str	r5, [r3, #28]
    e790:	2810      	cmp	r0, #16
    e792:	dd00      	ble.n	e796 <hci_cmd_done+0x18a>
    e794:	621c      	str	r4, [r3, #32]
    e796:	2913      	cmp	r1, #19
    e798:	dd24      	ble.n	e7e4 <hci_cmd_done+0x1d8>
    e79a:	2414      	movs	r4, #20
    e79c:	b13a      	cbz	r2, e7ae <hci_cmd_done+0x1a2>
    e79e:	2105      	movs	r1, #5
    e7a0:	7139      	strb	r1, [r7, #4]
    e7a2:	2100      	movs	r1, #0
    e7a4:	7179      	strb	r1, [r7, #5]
    e7a6:	71b9      	strb	r1, [r7, #6]
    e7a8:	71f9      	strb	r1, [r7, #7]
    e7aa:	6878      	ldr	r0, [r7, #4]
    e7ac:	6118      	str	r0, [r3, #16]
    e7ae:	2100      	movs	r1, #0
    e7b0:	f36f 0100 	bfc	r1, #0, #1
    e7b4:	f36f 0141 	bfc	r1, #1, #1
    e7b8:	f36f 0182 	bfc	r1, #2, #1
    e7bc:	f36f 01c5 	bfc	r1, #3, #3
    e7c0:	2302      	movs	r3, #2
    e7c2:	f363 1188 	bfi	r1, r3, #6, #3
    e7c6:	f3c4 030a 	ubfx	r3, r4, #0, #11
    e7ca:	f363 2153 	bfi	r1, r3, #9, #11
    e7ce:	f36f 511f 	bfc	r1, #20, #12
    e7d2:	2300      	movs	r3, #0
    e7d4:	480f      	ldr	r0, [pc, #60]	; (e814 <hci_cmd_done+0x208>)
    e7d6:	f7fd f9c5 	bl	bb64 <z_impl_z_log_msg_static_create>
    e7da:	46b5      	mov	sp, r6
		return;
    e7dc:	e76e      	b.n	e6bc <hci_cmd_done+0xb0>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    e7de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e7e2:	e7c4      	b.n	e76e <hci_cmd_done+0x162>
    e7e4:	f06f 041b 	mvn.w	r4, #27
    e7e8:	e7d8      	b.n	e79c <hci_cmd_done+0x190>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e7ea:	4620      	mov	r0, r4
    e7ec:	f008 fdbd 	bl	1736a <net_buf_id>
    e7f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e7f4:	4b08      	ldr	r3, [pc, #32]	; (e818 <hci_cmd_done+0x20c>)
    e7f6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e7fa:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e7fc:	7a1a      	ldrb	r2, [r3, #8]
    e7fe:	6859      	ldr	r1, [r3, #4]
    e800:	6818      	ldr	r0, [r3, #0]
    e802:	f008 fb7e 	bl	16f02 <atomic_set_bit_to>
    e806:	e784      	b.n	e712 <hci_cmd_done+0x106>
    e808:	20000478 	.word	0x20000478
    e80c:	0001a4c8 	.word	0x0001a4c8
    e810:	0001ab68 	.word	0x0001ab68
    e814:	00019994 	.word	0x00019994
    e818:	20001f9c 	.word	0x20001f9c
    e81c:	200001a0 	.word	0x200001a0
    e820:	0001a504 	.word	0x0001a504

0000e824 <hci_cmd_status>:
{
    e824:	b538      	push	{r3, r4, r5, lr}
    e826:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e828:	2104      	movs	r1, #4
    e82a:	300c      	adds	r0, #12
    e82c:	f008 fec0 	bl	175b0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e830:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e832:	4622      	mov	r2, r4
    e834:	7801      	ldrb	r1, [r0, #0]
    e836:	8840      	ldrh	r0, [r0, #2]
    e838:	f7ff fee8 	bl	e60c <hci_cmd_done>
	if (ncmd) {
    e83c:	b905      	cbnz	r5, e840 <hci_cmd_status+0x1c>
}
    e83e:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    e840:	4801      	ldr	r0, [pc, #4]	; (e848 <hci_cmd_status+0x24>)
    e842:	f005 fe0b 	bl	1445c <z_impl_k_sem_give>
    e846:	e7fa      	b.n	e83e <hci_cmd_status+0x1a>
    e848:	20000288 	.word	0x20000288

0000e84c <hci_cmd_complete>:
{
    e84c:	b538      	push	{r3, r4, r5, lr}
    e84e:	4604      	mov	r4, r0
    e850:	2103      	movs	r1, #3
    e852:	300c      	adds	r0, #12
    e854:	f008 feac 	bl	175b0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e858:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    e85a:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
    e85c:	4622      	mov	r2, r4
    e85e:	7819      	ldrb	r1, [r3, #0]
    e860:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e864:	f7ff fed2 	bl	e60c <hci_cmd_done>
	if (ncmd) {
    e868:	b905      	cbnz	r5, e86c <hci_cmd_complete+0x20>
}
    e86a:	bd38      	pop	{r3, r4, r5, pc}
    e86c:	4801      	ldr	r0, [pc, #4]	; (e874 <hci_cmd_complete+0x28>)
    e86e:	f005 fdf5 	bl	1445c <z_impl_k_sem_give>
    e872:	e7fa      	b.n	e86a <hci_cmd_complete+0x1e>
    e874:	20000288 	.word	0x20000288

0000e878 <hci_hardware_error>:
{
    e878:	b5b0      	push	{r4, r5, r7, lr}
    e87a:	b082      	sub	sp, #8
    e87c:	af00      	add	r7, sp, #0
    e87e:	2101      	movs	r1, #1
    e880:	300c      	adds	r0, #12
    e882:	f008 fe95 	bl	175b0 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e886:	7804      	ldrb	r4, [r0, #0]
    e888:	b088      	sub	sp, #32
    e88a:	466b      	mov	r3, sp
    e88c:	f113 0210 	adds.w	r2, r3, #16
    e890:	d033      	beq.n	e8fa <hci_hardware_error+0x82>
    e892:	2110      	movs	r1, #16
    e894:	b15a      	cbz	r2, e8ae <hci_hardware_error+0x36>
    e896:	4608      	mov	r0, r1
    e898:	2904      	cmp	r1, #4
    e89a:	dd01      	ble.n	e8a0 <hci_hardware_error+0x28>
    e89c:	4d1a      	ldr	r5, [pc, #104]	; (e908 <hci_hardware_error+0x90>)
    e89e:	615d      	str	r5, [r3, #20]
    e8a0:	2808      	cmp	r0, #8
    e8a2:	dd01      	ble.n	e8a8 <hci_hardware_error+0x30>
    e8a4:	4d19      	ldr	r5, [pc, #100]	; (e90c <hci_hardware_error+0x94>)
    e8a6:	619d      	str	r5, [r3, #24]
    e8a8:	280c      	cmp	r0, #12
    e8aa:	dd00      	ble.n	e8ae <hci_hardware_error+0x36>
    e8ac:	61dc      	str	r4, [r3, #28]
    e8ae:	290f      	cmp	r1, #15
    e8b0:	dd26      	ble.n	e900 <hci_hardware_error+0x88>
    e8b2:	f04f 0c10 	mov.w	ip, #16
    e8b6:	b13a      	cbz	r2, e8c8 <hci_hardware_error+0x50>
    e8b8:	2104      	movs	r1, #4
    e8ba:	7139      	strb	r1, [r7, #4]
    e8bc:	2100      	movs	r1, #0
    e8be:	7179      	strb	r1, [r7, #5]
    e8c0:	71b9      	strb	r1, [r7, #6]
    e8c2:	71f9      	strb	r1, [r7, #7]
    e8c4:	6878      	ldr	r0, [r7, #4]
    e8c6:	6118      	str	r0, [r3, #16]
    e8c8:	2100      	movs	r1, #0
    e8ca:	f36f 0100 	bfc	r1, #0, #1
    e8ce:	f36f 0141 	bfc	r1, #1, #1
    e8d2:	f36f 0182 	bfc	r1, #2, #1
    e8d6:	f36f 01c5 	bfc	r1, #3, #3
    e8da:	2301      	movs	r3, #1
    e8dc:	f363 1188 	bfi	r1, r3, #6, #3
    e8e0:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    e8e4:	f36c 2153 	bfi	r1, ip, #9, #11
    e8e8:	f36f 511f 	bfc	r1, #20, #12
    e8ec:	2300      	movs	r3, #0
    e8ee:	4808      	ldr	r0, [pc, #32]	; (e910 <hci_hardware_error+0x98>)
    e8f0:	f7fd f938 	bl	bb64 <z_impl_z_log_msg_static_create>
}
    e8f4:	3708      	adds	r7, #8
    e8f6:	46bd      	mov	sp, r7
    e8f8:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e8fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e8fe:	e7c9      	b.n	e894 <hci_hardware_error+0x1c>
    e900:	f06f 0c1b 	mvn.w	ip, #27
    e904:	e7d7      	b.n	e8b6 <hci_hardware_error+0x3e>
    e906:	bf00      	nop
    e908:	0001a53c 	.word	0x0001a53c
    e90c:	0001ab08 	.word	0x0001ab08
    e910:	00019994 	.word	0x00019994

0000e914 <handle_event>:
{
    e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e918:	b082      	sub	sp, #8
    e91a:	af00      	add	r7, sp, #0
    e91c:	4605      	mov	r5, r0
    e91e:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
    e920:	f7ff fe08 	bl	e534 <handle_event_common>
	if (err == -EOPNOTSUPP) {
    e924:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
    e928:	d003      	beq.n	e932 <handle_event+0x1e>
}
    e92a:	3708      	adds	r7, #8
    e92c:	46bd      	mov	sp, r7
    e92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    e932:	f8b4 8010 	ldrh.w	r8, [r4, #16]
    e936:	4641      	mov	r1, r8
    e938:	68e0      	ldr	r0, [r4, #12]
    e93a:	f7ff fccf 	bl	e2dc <bt_hex>
    e93e:	466e      	mov	r6, sp
    e940:	2303      	movs	r3, #3
    e942:	713b      	strb	r3, [r7, #4]
    e944:	2305      	movs	r3, #5
    e946:	717b      	strb	r3, [r7, #5]
    e948:	b08c      	sub	sp, #48	; 0x30
    e94a:	466c      	mov	r4, sp
    e94c:	f114 0210 	adds.w	r2, r4, #16
    e950:	d020      	beq.n	e994 <handle_event+0x80>
    e952:	f04f 0c1a 	mov.w	ip, #26
    e956:	b182      	cbz	r2, e97a <handle_event+0x66>
    e958:	4663      	mov	r3, ip
    e95a:	f1bc 0f04 	cmp.w	ip, #4
    e95e:	dd01      	ble.n	e964 <handle_event+0x50>
    e960:	4927      	ldr	r1, [pc, #156]	; (ea00 <handle_event+0xec>)
    e962:	6161      	str	r1, [r4, #20]
    e964:	2b08      	cmp	r3, #8
    e966:	dd01      	ble.n	e96c <handle_event+0x58>
    e968:	4926      	ldr	r1, [pc, #152]	; (ea04 <handle_event+0xf0>)
    e96a:	61a1      	str	r1, [r4, #24]
    e96c:	2b0c      	cmp	r3, #12
    e96e:	dd00      	ble.n	e972 <handle_event+0x5e>
    e970:	61e5      	str	r5, [r4, #28]
    e972:	2b10      	cmp	r3, #16
    e974:	dd01      	ble.n	e97a <handle_event+0x66>
    e976:	f8c4 8020 	str.w	r8, [r4, #32]
    e97a:	2303      	movs	r3, #3
    e97c:	703b      	strb	r3, [r7, #0]
    e97e:	2305      	movs	r3, #5
    e980:	707b      	strb	r3, [r7, #1]
    e982:	b1a2      	cbz	r2, e9ae <handle_event+0x9a>
    e984:	f1bc 0f14 	cmp.w	ip, #20
    e988:	dd00      	ble.n	e98c <handle_event+0x78>
    e98a:	6260      	str	r0, [r4, #36]	; 0x24
    e98c:	f104 0328 	add.w	r3, r4, #40	; 0x28
    e990:	2100      	movs	r1, #0
    e992:	e00a      	b.n	e9aa <handle_event+0x96>
    e994:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    e998:	e7dd      	b.n	e956 <handle_event+0x42>
    e99a:	f101 0008 	add.w	r0, r1, #8
    e99e:	4438      	add	r0, r7
    e9a0:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    e9a4:	f803 0b01 	strb.w	r0, [r3], #1
    e9a8:	3101      	adds	r1, #1
    e9aa:	2901      	cmp	r1, #1
    e9ac:	d9f5      	bls.n	e99a <handle_event+0x86>
    e9ae:	f1bc 0f19 	cmp.w	ip, #25
    e9b2:	dd22      	ble.n	e9fa <handle_event+0xe6>
    e9b4:	231a      	movs	r3, #26
    e9b6:	b142      	cbz	r2, e9ca <handle_event+0xb6>
    e9b8:	2106      	movs	r1, #6
    e9ba:	7139      	strb	r1, [r7, #4]
    e9bc:	2100      	movs	r1, #0
    e9be:	7179      	strb	r1, [r7, #5]
    e9c0:	71b9      	strb	r1, [r7, #6]
    e9c2:	2101      	movs	r1, #1
    e9c4:	71f9      	strb	r1, [r7, #7]
    e9c6:	6878      	ldr	r0, [r7, #4]
    e9c8:	6120      	str	r0, [r4, #16]
    e9ca:	2100      	movs	r1, #0
    e9cc:	f36f 0100 	bfc	r1, #0, #1
    e9d0:	f36f 0141 	bfc	r1, #1, #1
    e9d4:	f36f 0182 	bfc	r1, #2, #1
    e9d8:	f36f 01c5 	bfc	r1, #3, #3
    e9dc:	2002      	movs	r0, #2
    e9de:	f360 1188 	bfi	r1, r0, #6, #3
    e9e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    e9e6:	f363 2153 	bfi	r1, r3, #9, #11
    e9ea:	f36f 511f 	bfc	r1, #20, #12
    e9ee:	2300      	movs	r3, #0
    e9f0:	4805      	ldr	r0, [pc, #20]	; (ea08 <handle_event+0xf4>)
    e9f2:	f7fd f8b7 	bl	bb64 <z_impl_z_log_msg_static_create>
    e9f6:	46b5      	mov	sp, r6
}
    e9f8:	e797      	b.n	e92a <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    e9fa:	f06f 031b 	mvn.w	r3, #27
    e9fe:	e7da      	b.n	e9b6 <handle_event+0xa2>
    ea00:	0001a564 	.word	0x0001a564
    ea04:	0001ab58 	.word	0x0001ab58
    ea08:	00019994 	.word	0x00019994

0000ea0c <hci_event>:
{
    ea0c:	b538      	push	{r3, r4, r5, lr}
    ea0e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ea10:	8a03      	ldrh	r3, [r0, #16]
    ea12:	2b01      	cmp	r3, #1
    ea14:	d91b      	bls.n	ea4e <hci_event+0x42>
    ea16:	2102      	movs	r1, #2
    ea18:	f104 000c 	add.w	r0, r4, #12
    ea1c:	f008 fdc8 	bl	175b0 <net_buf_simple_pull_mem>
    ea20:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ea22:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    ea24:	2b05      	cmp	r3, #5
    ea26:	d022      	beq.n	ea6e <hci_event+0x62>
    ea28:	d323      	bcc.n	ea72 <hci_event+0x66>
    ea2a:	3b0e      	subs	r3, #14
    ea2c:	b2db      	uxtb	r3, r3
    ea2e:	2b01      	cmp	r3, #1
    ea30:	d81b      	bhi.n	ea6a <hci_event+0x5e>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    ea32:	2301      	movs	r3, #1
    ea34:	f013 0f02 	tst.w	r3, #2
    ea38:	d01d      	beq.n	ea76 <hci_event+0x6a>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ea3a:	2303      	movs	r3, #3
    ea3c:	4a15      	ldr	r2, [pc, #84]	; (ea94 <hci_event+0x88>)
    ea3e:	4621      	mov	r1, r4
    ea40:	7828      	ldrb	r0, [r5, #0]
    ea42:	f7ff ff67 	bl	e914 <handle_event>
	net_buf_unref(buf);
    ea46:	4620      	mov	r0, r4
    ea48:	f008 fd6f 	bl	1752a <net_buf_unref>
}
    ea4c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ea4e:	f640 2347 	movw	r3, #2631	; 0xa47
    ea52:	4a11      	ldr	r2, [pc, #68]	; (ea98 <hci_event+0x8c>)
    ea54:	4911      	ldr	r1, [pc, #68]	; (ea9c <hci_event+0x90>)
    ea56:	4812      	ldr	r0, [pc, #72]	; (eaa0 <hci_event+0x94>)
    ea58:	f007 fc2a 	bl	162b0 <assert_print>
    ea5c:	4040      	eors	r0, r0
    ea5e:	f380 8811 	msr	BASEPRI, r0
    ea62:	f04f 0003 	mov.w	r0, #3
    ea66:	df02      	svc	2
    ea68:	e7d5      	b.n	ea16 <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
    ea6a:	2302      	movs	r3, #2
    ea6c:	e7e2      	b.n	ea34 <hci_event+0x28>
	switch (evt) {
    ea6e:	2303      	movs	r3, #3
    ea70:	e7e0      	b.n	ea34 <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
    ea72:	2302      	movs	r3, #2
    ea74:	e7de      	b.n	ea34 <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ea76:	f640 234b 	movw	r3, #2635	; 0xa4b
    ea7a:	4a07      	ldr	r2, [pc, #28]	; (ea98 <hci_event+0x8c>)
    ea7c:	4909      	ldr	r1, [pc, #36]	; (eaa4 <hci_event+0x98>)
    ea7e:	4808      	ldr	r0, [pc, #32]	; (eaa0 <hci_event+0x94>)
    ea80:	f007 fc16 	bl	162b0 <assert_print>
    ea84:	4040      	eors	r0, r0
    ea86:	f380 8811 	msr	BASEPRI, r0
    ea8a:	f04f 0003 	mov.w	r0, #3
    ea8e:	df02      	svc	2
    ea90:	e7d3      	b.n	ea3a <hci_event+0x2e>
    ea92:	bf00      	nop
    ea94:	0001abe4 	.word	0x0001abe4
    ea98:	0001a58c 	.word	0x0001a58c
    ea9c:	0001a5c0 	.word	0x0001a5c0
    eaa0:	0001a5dc 	.word	0x0001a5dc
    eaa4:	0001a5fc 	.word	0x0001a5fc

0000eaa8 <hci_le_meta_event>:
{
    eaa8:	b510      	push	{r4, lr}
    eaaa:	4604      	mov	r4, r0
    eaac:	2101      	movs	r1, #1
    eaae:	300c      	adds	r0, #12
    eab0:	f008 fd7e 	bl	175b0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    eab4:	2300      	movs	r3, #0
    eab6:	4a03      	ldr	r2, [pc, #12]	; (eac4 <hci_le_meta_event+0x1c>)
    eab8:	4621      	mov	r1, r4
    eaba:	7800      	ldrb	r0, [r0, #0]
    eabc:	f7ff ff2a 	bl	e914 <handle_event>
}
    eac0:	bd10      	pop	{r4, pc}
    eac2:	bf00      	nop
    eac4:	0001abfc 	.word	0x0001abfc

0000eac8 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    eac8:	b5b0      	push	{r4, r5, r7, lr}
    eaca:	b082      	sub	sp, #8
    eacc:	af00      	add	r7, sp, #0
    eace:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    ead0:	4826      	ldr	r0, [pc, #152]	; (eb6c <rx_queue_put+0xa4>)
    ead2:	f008 fcf8 	bl	174c6 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ead6:	4926      	ldr	r1, [pc, #152]	; (eb70 <rx_queue_put+0xa8>)
    ead8:	4826      	ldr	r0, [pc, #152]	; (eb74 <rx_queue_put+0xac>)
    eada:	f00a f99f 	bl	18e1c <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    eade:	2800      	cmp	r0, #0
    eae0:	db02      	blt.n	eae8 <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
    eae2:	3708      	adds	r7, #8
    eae4:	46bd      	mov	sp, r7
    eae6:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
    eae8:	466c      	mov	r4, sp
    eaea:	b088      	sub	sp, #32
    eaec:	466b      	mov	r3, sp
    eaee:	f113 0210 	adds.w	r2, r3, #16
    eaf2:	d034      	beq.n	eb5e <rx_queue_put+0x96>
    eaf4:	2110      	movs	r1, #16
    eaf6:	b16a      	cbz	r2, eb14 <rx_queue_put+0x4c>
    eaf8:	468c      	mov	ip, r1
    eafa:	2904      	cmp	r1, #4
    eafc:	dd01      	ble.n	eb02 <rx_queue_put+0x3a>
    eafe:	4d1e      	ldr	r5, [pc, #120]	; (eb78 <rx_queue_put+0xb0>)
    eb00:	615d      	str	r5, [r3, #20]
    eb02:	f1bc 0f08 	cmp.w	ip, #8
    eb06:	dd01      	ble.n	eb0c <rx_queue_put+0x44>
    eb08:	4d1c      	ldr	r5, [pc, #112]	; (eb7c <rx_queue_put+0xb4>)
    eb0a:	619d      	str	r5, [r3, #24]
    eb0c:	f1bc 0f0c 	cmp.w	ip, #12
    eb10:	dd00      	ble.n	eb14 <rx_queue_put+0x4c>
    eb12:	61d8      	str	r0, [r3, #28]
    eb14:	290f      	cmp	r1, #15
    eb16:	dd25      	ble.n	eb64 <rx_queue_put+0x9c>
    eb18:	f04f 0c10 	mov.w	ip, #16
    eb1c:	b13a      	cbz	r2, eb2e <rx_queue_put+0x66>
    eb1e:	2104      	movs	r1, #4
    eb20:	7139      	strb	r1, [r7, #4]
    eb22:	2100      	movs	r1, #0
    eb24:	7179      	strb	r1, [r7, #5]
    eb26:	71b9      	strb	r1, [r7, #6]
    eb28:	71f9      	strb	r1, [r7, #7]
    eb2a:	6878      	ldr	r0, [r7, #4]
    eb2c:	6118      	str	r0, [r3, #16]
    eb2e:	2100      	movs	r1, #0
    eb30:	f36f 0100 	bfc	r1, #0, #1
    eb34:	f36f 0141 	bfc	r1, #1, #1
    eb38:	f36f 0182 	bfc	r1, #2, #1
    eb3c:	f36f 01c5 	bfc	r1, #3, #3
    eb40:	2301      	movs	r3, #1
    eb42:	f363 1188 	bfi	r1, r3, #6, #3
    eb46:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    eb4a:	f36c 2153 	bfi	r1, ip, #9, #11
    eb4e:	f36f 511f 	bfc	r1, #20, #12
    eb52:	2300      	movs	r3, #0
    eb54:	480a      	ldr	r0, [pc, #40]	; (eb80 <rx_queue_put+0xb8>)
    eb56:	f7fd f805 	bl	bb64 <z_impl_z_log_msg_static_create>
    eb5a:	46a5      	mov	sp, r4
}
    eb5c:	e7c1      	b.n	eae2 <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
    eb5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    eb62:	e7c8      	b.n	eaf6 <rx_queue_put+0x2e>
    eb64:	f06f 0c1b 	mvn.w	ip, #27
    eb68:	e7d8      	b.n	eb1c <rx_queue_put+0x54>
    eb6a:	bf00      	nop
    eb6c:	200002a4 	.word	0x200002a4
    eb70:	20000320 	.word	0x20000320
    eb74:	20001790 	.word	0x20001790
    eb78:	0001a62c 	.word	0x0001a62c
    eb7c:	0001ab2c 	.word	0x0001ab2c
    eb80:	00019994 	.word	0x00019994

0000eb84 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    eb84:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb86:	b083      	sub	sp, #12
    eb88:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    eb8a:	484d      	ldr	r0, [pc, #308]	; (ecc0 <rx_work_handler+0x13c>)
    eb8c:	f008 fcb1 	bl	174f2 <net_buf_slist_get>
	if (!buf) {
    eb90:	2800      	cmp	r0, #0
    eb92:	d04a      	beq.n	ec2a <rx_work_handler+0xa6>
    eb94:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    eb96:	7e00      	ldrb	r0, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    eb98:	2801      	cmp	r0, #1
    eb9a:	d049      	beq.n	ec30 <rx_work_handler+0xac>
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eb9c:	466d      	mov	r5, sp
    eb9e:	b088      	sub	sp, #32
    eba0:	466b      	mov	r3, sp
    eba2:	f113 0210 	adds.w	r2, r3, #16
    eba6:	d047      	beq.n	ec38 <rx_work_handler+0xb4>
    eba8:	2110      	movs	r1, #16
    ebaa:	b16a      	cbz	r2, ebc8 <rx_work_handler+0x44>
    ebac:	468c      	mov	ip, r1
    ebae:	2904      	cmp	r1, #4
    ebb0:	dd01      	ble.n	ebb6 <rx_work_handler+0x32>
    ebb2:	4e44      	ldr	r6, [pc, #272]	; (ecc4 <rx_work_handler+0x140>)
    ebb4:	615e      	str	r6, [r3, #20]
    ebb6:	f1bc 0f08 	cmp.w	ip, #8
    ebba:	dd01      	ble.n	ebc0 <rx_work_handler+0x3c>
    ebbc:	4e42      	ldr	r6, [pc, #264]	; (ecc8 <rx_work_handler+0x144>)
    ebbe:	619e      	str	r6, [r3, #24]
    ebc0:	f1bc 0f0c 	cmp.w	ip, #12
    ebc4:	dd00      	ble.n	ebc8 <rx_work_handler+0x44>
    ebc6:	61d8      	str	r0, [r3, #28]
    ebc8:	290f      	cmp	r1, #15
    ebca:	dd38      	ble.n	ec3e <rx_work_handler+0xba>
    ebcc:	f04f 0c10 	mov.w	ip, #16
    ebd0:	b13a      	cbz	r2, ebe2 <rx_work_handler+0x5e>
    ebd2:	2104      	movs	r1, #4
    ebd4:	7139      	strb	r1, [r7, #4]
    ebd6:	2100      	movs	r1, #0
    ebd8:	7179      	strb	r1, [r7, #5]
    ebda:	71b9      	strb	r1, [r7, #6]
    ebdc:	71f9      	strb	r1, [r7, #7]
    ebde:	6878      	ldr	r0, [r7, #4]
    ebe0:	6118      	str	r0, [r3, #16]
    ebe2:	2100      	movs	r1, #0
    ebe4:	f36f 0100 	bfc	r1, #0, #1
    ebe8:	f36f 0141 	bfc	r1, #1, #1
    ebec:	f36f 0182 	bfc	r1, #2, #1
    ebf0:	f36f 01c5 	bfc	r1, #3, #3
    ebf4:	2301      	movs	r3, #1
    ebf6:	f363 1188 	bfi	r1, r3, #6, #3
    ebfa:	f3cc 030a 	ubfx	r3, ip, #0, #11
    ebfe:	f363 2153 	bfi	r1, r3, #9, #11
    ec02:	f36f 511f 	bfc	r1, #20, #12
    ec06:	2300      	movs	r3, #0
    ec08:	4830      	ldr	r0, [pc, #192]	; (eccc <rx_work_handler+0x148>)
    ec0a:	f7fc ffab 	bl	bb64 <z_impl_z_log_msg_static_create>
    ec0e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    ec10:	4620      	mov	r0, r4
    ec12:	f008 fc8a 	bl	1752a <net_buf_unref>
	return list->head;
    ec16:	4b2e      	ldr	r3, [pc, #184]	; (ecd0 <rx_work_handler+0x14c>)
    ec18:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    ec1c:	b12b      	cbz	r3, ec2a <rx_work_handler+0xa6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ec1e:	492d      	ldr	r1, [pc, #180]	; (ecd4 <rx_work_handler+0x150>)
    ec20:	482d      	ldr	r0, [pc, #180]	; (ecd8 <rx_work_handler+0x154>)
    ec22:	f00a f8fb 	bl	18e1c <k_work_submit_to_queue>
#endif
		if (err < 0) {
    ec26:	2800      	cmp	r0, #0
    ec28:	db0c      	blt.n	ec44 <rx_work_handler+0xc0>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    ec2a:	370c      	adds	r7, #12
    ec2c:	46bd      	mov	sp, r7
    ec2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hci_event(buf);
    ec30:	4620      	mov	r0, r4
    ec32:	f7ff feeb 	bl	ea0c <hci_event>
		break;
    ec36:	e7ee      	b.n	ec16 <rx_work_handler+0x92>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ec38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ec3c:	e7b5      	b.n	ebaa <rx_work_handler+0x26>
    ec3e:	f06f 0c1b 	mvn.w	ip, #27
    ec42:	e7c5      	b.n	ebd0 <rx_work_handler+0x4c>
			LOG_ERR("Could not submit rx_work: %d", err);
    ec44:	466d      	mov	r5, sp
    ec46:	b088      	sub	sp, #32
    ec48:	466b      	mov	r3, sp
    ec4a:	f113 0210 	adds.w	r2, r3, #16
    ec4e:	d031      	beq.n	ecb4 <rx_work_handler+0x130>
    ec50:	2110      	movs	r1, #16
    ec52:	b15a      	cbz	r2, ec6c <rx_work_handler+0xe8>
    ec54:	460c      	mov	r4, r1
    ec56:	2904      	cmp	r1, #4
    ec58:	dd01      	ble.n	ec5e <rx_work_handler+0xda>
    ec5a:	4e20      	ldr	r6, [pc, #128]	; (ecdc <rx_work_handler+0x158>)
    ec5c:	615e      	str	r6, [r3, #20]
    ec5e:	2c08      	cmp	r4, #8
    ec60:	dd01      	ble.n	ec66 <rx_work_handler+0xe2>
    ec62:	4e19      	ldr	r6, [pc, #100]	; (ecc8 <rx_work_handler+0x144>)
    ec64:	619e      	str	r6, [r3, #24]
    ec66:	2c0c      	cmp	r4, #12
    ec68:	dd00      	ble.n	ec6c <rx_work_handler+0xe8>
    ec6a:	61d8      	str	r0, [r3, #28]
    ec6c:	290f      	cmp	r1, #15
    ec6e:	dd24      	ble.n	ecba <rx_work_handler+0x136>
    ec70:	2410      	movs	r4, #16
    ec72:	b13a      	cbz	r2, ec84 <rx_work_handler+0x100>
    ec74:	2104      	movs	r1, #4
    ec76:	7139      	strb	r1, [r7, #4]
    ec78:	2100      	movs	r1, #0
    ec7a:	7179      	strb	r1, [r7, #5]
    ec7c:	71b9      	strb	r1, [r7, #6]
    ec7e:	71f9      	strb	r1, [r7, #7]
    ec80:	6878      	ldr	r0, [r7, #4]
    ec82:	6118      	str	r0, [r3, #16]
    ec84:	2100      	movs	r1, #0
    ec86:	f36f 0100 	bfc	r1, #0, #1
    ec8a:	f36f 0141 	bfc	r1, #1, #1
    ec8e:	f36f 0182 	bfc	r1, #2, #1
    ec92:	f36f 01c5 	bfc	r1, #3, #3
    ec96:	2301      	movs	r3, #1
    ec98:	f363 1188 	bfi	r1, r3, #6, #3
    ec9c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    eca0:	f363 2153 	bfi	r1, r3, #9, #11
    eca4:	f36f 511f 	bfc	r1, #20, #12
    eca8:	2300      	movs	r3, #0
    ecaa:	4808      	ldr	r0, [pc, #32]	; (eccc <rx_work_handler+0x148>)
    ecac:	f7fc ff5a 	bl	bb64 <z_impl_z_log_msg_static_create>
    ecb0:	46ad      	mov	sp, r5
    ecb2:	e7ba      	b.n	ec2a <rx_work_handler+0xa6>
    ecb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ecb8:	e7cb      	b.n	ec52 <rx_work_handler+0xce>
    ecba:	f06f 041b 	mvn.w	r4, #27
    ecbe:	e7d8      	b.n	ec72 <rx_work_handler+0xee>
    ecc0:	200002a4 	.word	0x200002a4
    ecc4:	0001a650 	.word	0x0001a650
    ecc8:	0001ab1c 	.word	0x0001ab1c
    eccc:	00019994 	.word	0x00019994
    ecd0:	200001a0 	.word	0x200001a0
    ecd4:	20000320 	.word	0x20000320
    ecd8:	20001790 	.word	0x20001790
    ecdc:	0001a62c 	.word	0x0001a62c

0000ece0 <bt_dev_show_info>:
{
    ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ece4:	b082      	sub	sp, #8
    ece6:	af00      	add	r7, sp, #0
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    ece8:	4b8f      	ldr	r3, [pc, #572]	; (ef28 <bt_dev_show_info+0x248>)
    ecea:	79db      	ldrb	r3, [r3, #7]
    ecec:	2b01      	cmp	r3, #1
    ecee:	d936      	bls.n	ed5e <bt_dev_show_info+0x7e>
    ecf0:	f8df 8238 	ldr.w	r8, [pc, #568]	; ef2c <bt_dev_show_info+0x24c>
    ecf4:	488c      	ldr	r0, [pc, #560]	; (ef28 <bt_dev_show_info+0x248>)
    ecf6:	f7ff fb1d 	bl	e334 <bt_addr_le_str>
    ecfa:	466d      	mov	r5, sp
    ecfc:	2301      	movs	r3, #1
    ecfe:	713b      	strb	r3, [r7, #4]
    ed00:	2303      	movs	r3, #3
    ed02:	717b      	strb	r3, [r7, #5]
    ed04:	2302      	movs	r3, #2
    ed06:	71bb      	strb	r3, [r7, #6]
    ed08:	2304      	movs	r3, #4
    ed0a:	71fb      	strb	r3, [r7, #7]
    ed0c:	b08a      	sub	sp, #40	; 0x28
    ed0e:	466e      	mov	r6, sp
    ed10:	f116 0210 	adds.w	r2, r6, #16
    ed14:	d026      	beq.n	ed64 <bt_dev_show_info+0x84>
    ed16:	f04f 0c18 	mov.w	ip, #24
    ed1a:	b14a      	cbz	r2, ed30 <bt_dev_show_info+0x50>
    ed1c:	4663      	mov	r3, ip
    ed1e:	f1bc 0f04 	cmp.w	ip, #4
    ed22:	dd01      	ble.n	ed28 <bt_dev_show_info+0x48>
    ed24:	4982      	ldr	r1, [pc, #520]	; (ef30 <bt_dev_show_info+0x250>)
    ed26:	6171      	str	r1, [r6, #20]
    ed28:	2b08      	cmp	r3, #8
    ed2a:	dd01      	ble.n	ed30 <bt_dev_show_info+0x50>
    ed2c:	4b81      	ldr	r3, [pc, #516]	; (ef34 <bt_dev_show_info+0x254>)
    ed2e:	61b3      	str	r3, [r6, #24]
    ed30:	2301      	movs	r3, #1
    ed32:	703b      	strb	r3, [r7, #0]
    ed34:	2303      	movs	r3, #3
    ed36:	707b      	strb	r3, [r7, #1]
    ed38:	b122      	cbz	r2, ed44 <bt_dev_show_info+0x64>
    ed3a:	f1bc 0f0c 	cmp.w	ip, #12
    ed3e:	dd01      	ble.n	ed44 <bt_dev_show_info+0x64>
    ed40:	f8c6 801c 	str.w	r8, [r6, #28]
    ed44:	2302      	movs	r3, #2
    ed46:	70bb      	strb	r3, [r7, #2]
    ed48:	2304      	movs	r3, #4
    ed4a:	70fb      	strb	r3, [r7, #3]
    ed4c:	b1ba      	cbz	r2, ed7e <bt_dev_show_info+0x9e>
    ed4e:	f1bc 0f10 	cmp.w	ip, #16
    ed52:	dd00      	ble.n	ed56 <bt_dev_show_info+0x76>
    ed54:	6230      	str	r0, [r6, #32]
    ed56:	f106 0324 	add.w	r3, r6, #36	; 0x24
    ed5a:	2100      	movs	r1, #0
    ed5c:	e00d      	b.n	ed7a <bt_dev_show_info+0x9a>
    ed5e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; ef38 <bt_dev_show_info+0x258>
    ed62:	e7c7      	b.n	ecf4 <bt_dev_show_info+0x14>
    ed64:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    ed68:	e7d7      	b.n	ed1a <bt_dev_show_info+0x3a>
    ed6a:	f101 0008 	add.w	r0, r1, #8
    ed6e:	4438      	add	r0, r7
    ed70:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    ed74:	f803 0b01 	strb.w	r0, [r3], #1
    ed78:	3101      	adds	r1, #1
    ed7a:	2903      	cmp	r1, #3
    ed7c:	d9f5      	bls.n	ed6a <bt_dev_show_info+0x8a>
    ed7e:	f1bc 0f17 	cmp.w	ip, #23
    ed82:	dd23      	ble.n	edcc <bt_dev_show_info+0xec>
    ed84:	2318      	movs	r3, #24
    ed86:	b142      	cbz	r2, ed9a <bt_dev_show_info+0xba>
    ed88:	2105      	movs	r1, #5
    ed8a:	7139      	strb	r1, [r7, #4]
    ed8c:	2100      	movs	r1, #0
    ed8e:	7179      	strb	r1, [r7, #5]
    ed90:	71b9      	strb	r1, [r7, #6]
    ed92:	2102      	movs	r1, #2
    ed94:	71f9      	strb	r1, [r7, #7]
    ed96:	6878      	ldr	r0, [r7, #4]
    ed98:	6130      	str	r0, [r6, #16]
    ed9a:	2100      	movs	r1, #0
    ed9c:	f36f 0100 	bfc	r1, #0, #1
    eda0:	f36f 0141 	bfc	r1, #1, #1
    eda4:	f36f 0182 	bfc	r1, #2, #1
    eda8:	f36f 01c5 	bfc	r1, #3, #3
    edac:	2003      	movs	r0, #3
    edae:	f360 1188 	bfi	r1, r0, #6, #3
    edb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    edb6:	f363 2153 	bfi	r1, r3, #9, #11
    edba:	f36f 511f 	bfc	r1, #20, #12
    edbe:	2300      	movs	r3, #0
    edc0:	485e      	ldr	r0, [pc, #376]	; (ef3c <bt_dev_show_info+0x25c>)
    edc2:	f7fc fecf 	bl	bb64 <z_impl_z_log_msg_static_create>
    edc6:	46ad      	mov	sp, r5
	for (i = 1; i < bt_dev.id_count; i++) {
    edc8:	2501      	movs	r5, #1
    edca:	e031      	b.n	ee30 <bt_dev_show_info+0x150>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    edcc:	f06f 031b 	mvn.w	r3, #27
    edd0:	e7d9      	b.n	ed86 <bt_dev_show_info+0xa6>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    edd2:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    edd6:	e041      	b.n	ee5c <bt_dev_show_info+0x17c>
    edd8:	2302      	movs	r3, #2
    edda:	703b      	strb	r3, [r7, #0]
    eddc:	2304      	movs	r3, #4
    edde:	707b      	strb	r3, [r7, #1]
    ede0:	2a00      	cmp	r2, #0
    ede2:	d14f      	bne.n	ee84 <bt_dev_show_info+0x1a4>
    ede4:	f1bc 0f15 	cmp.w	ip, #21
    ede8:	dd5f      	ble.n	eeaa <bt_dev_show_info+0x1ca>
    edea:	2316      	movs	r3, #22
    edec:	b142      	cbz	r2, ee00 <bt_dev_show_info+0x120>
    edee:	2005      	movs	r0, #5
    edf0:	7138      	strb	r0, [r7, #4]
    edf2:	2000      	movs	r0, #0
    edf4:	7178      	strb	r0, [r7, #5]
    edf6:	71b8      	strb	r0, [r7, #6]
    edf8:	2001      	movs	r0, #1
    edfa:	71f8      	strb	r0, [r7, #7]
    edfc:	6878      	ldr	r0, [r7, #4]
    edfe:	6108      	str	r0, [r1, #16]
    ee00:	f36f 0400 	bfc	r4, #0, #1
    ee04:	f36f 0441 	bfc	r4, #1, #1
    ee08:	f36f 0482 	bfc	r4, #2, #1
    ee0c:	f36f 04c5 	bfc	r4, #3, #3
    ee10:	2103      	movs	r1, #3
    ee12:	f361 1488 	bfi	r4, r1, #6, #3
    ee16:	f3c3 030a 	ubfx	r3, r3, #0, #11
    ee1a:	f363 2453 	bfi	r4, r3, #9, #11
    ee1e:	f36f 541f 	bfc	r4, #20, #12
    ee22:	2300      	movs	r3, #0
    ee24:	4621      	mov	r1, r4
    ee26:	4845      	ldr	r0, [pc, #276]	; (ef3c <bt_dev_show_info+0x25c>)
    ee28:	f7fc fe9c 	bl	bb64 <z_impl_z_log_msg_static_create>
    ee2c:	46b5      	mov	sp, r6
	for (i = 1; i < bt_dev.id_count; i++) {
    ee2e:	3501      	adds	r5, #1
    ee30:	4b3d      	ldr	r3, [pc, #244]	; (ef28 <bt_dev_show_info+0x248>)
    ee32:	79db      	ldrb	r3, [r3, #7]
    ee34:	42ab      	cmp	r3, r5
    ee36:	dd3b      	ble.n	eeb0 <bt_dev_show_info+0x1d0>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    ee38:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ee3c:	4b3a      	ldr	r3, [pc, #232]	; (ef28 <bt_dev_show_info+0x248>)
    ee3e:	4418      	add	r0, r3
    ee40:	f7ff fa78 	bl	e334 <bt_addr_le_str>
    ee44:	466e      	mov	r6, sp
    ee46:	2302      	movs	r3, #2
    ee48:	713b      	strb	r3, [r7, #4]
    ee4a:	2304      	movs	r3, #4
    ee4c:	717b      	strb	r3, [r7, #5]
    ee4e:	b08a      	sub	sp, #40	; 0x28
    ee50:	4669      	mov	r1, sp
    ee52:	f111 0210 	adds.w	r2, r1, #16
    ee56:	d0bc      	beq.n	edd2 <bt_dev_show_info+0xf2>
    ee58:	f04f 0c16 	mov.w	ip, #22
    ee5c:	2a00      	cmp	r2, #0
    ee5e:	d0bb      	beq.n	edd8 <bt_dev_show_info+0xf8>
    ee60:	4663      	mov	r3, ip
    ee62:	f1bc 0f04 	cmp.w	ip, #4
    ee66:	dd03      	ble.n	ee70 <bt_dev_show_info+0x190>
    ee68:	f8df e0d4 	ldr.w	lr, [pc, #212]	; ef40 <bt_dev_show_info+0x260>
    ee6c:	f8c1 e014 	str.w	lr, [r1, #20]
    ee70:	2b08      	cmp	r3, #8
    ee72:	dd03      	ble.n	ee7c <bt_dev_show_info+0x19c>
    ee74:	f8df e0bc 	ldr.w	lr, [pc, #188]	; ef34 <bt_dev_show_info+0x254>
    ee78:	f8c1 e018 	str.w	lr, [r1, #24]
    ee7c:	2b0c      	cmp	r3, #12
    ee7e:	ddab      	ble.n	edd8 <bt_dev_show_info+0xf8>
    ee80:	61cd      	str	r5, [r1, #28]
    ee82:	e7a9      	b.n	edd8 <bt_dev_show_info+0xf8>
    ee84:	f1bc 0f10 	cmp.w	ip, #16
    ee88:	dd00      	ble.n	ee8c <bt_dev_show_info+0x1ac>
    ee8a:	6208      	str	r0, [r1, #32]
    ee8c:	f101 0324 	add.w	r3, r1, #36	; 0x24
    ee90:	2000      	movs	r0, #0
    ee92:	e007      	b.n	eea4 <bt_dev_show_info+0x1c4>
    ee94:	f100 0e08 	add.w	lr, r0, #8
    ee98:	44be      	add	lr, r7
    ee9a:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    ee9e:	f803 eb01 	strb.w	lr, [r3], #1
    eea2:	3001      	adds	r0, #1
    eea4:	2801      	cmp	r0, #1
    eea6:	d9f5      	bls.n	ee94 <bt_dev_show_info+0x1b4>
    eea8:	e79c      	b.n	ede4 <bt_dev_show_info+0x104>
    eeaa:	f06f 031b 	mvn.w	r3, #27
    eeae:	e79d      	b.n	edec <bt_dev_show_info+0x10c>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    eeb0:	4c1d      	ldr	r4, [pc, #116]	; (ef28 <bt_dev_show_info+0x248>)
    eeb2:	f894 8070 	ldrb.w	r8, [r4, #112]	; 0x70
    eeb6:	4640      	mov	r0, r8
    eeb8:	f7ff fabc 	bl	e434 <ver_str>
    eebc:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
    eec0:	f8b4 c076 	ldrh.w	ip, [r4, #118]	; 0x76
    eec4:	466d      	mov	r5, sp
    eec6:	2301      	movs	r3, #1
    eec8:	713b      	strb	r3, [r7, #4]
    eeca:	2303      	movs	r3, #3
    eecc:	717b      	strb	r3, [r7, #5]
    eece:	b08c      	sub	sp, #48	; 0x30
    eed0:	466c      	mov	r4, sp
    eed2:	f114 0210 	adds.w	r2, r4, #16
    eed6:	d024      	beq.n	ef22 <bt_dev_show_info+0x242>
    eed8:	261e      	movs	r6, #30
    eeda:	b152      	cbz	r2, eef2 <bt_dev_show_info+0x212>
    eedc:	4633      	mov	r3, r6
    eede:	2e04      	cmp	r6, #4
    eee0:	dd03      	ble.n	eeea <bt_dev_show_info+0x20a>
    eee2:	f8df e060 	ldr.w	lr, [pc, #96]	; ef44 <bt_dev_show_info+0x264>
    eee6:	f8c4 e014 	str.w	lr, [r4, #20]
    eeea:	2b08      	cmp	r3, #8
    eeec:	dd01      	ble.n	eef2 <bt_dev_show_info+0x212>
    eeee:	4b11      	ldr	r3, [pc, #68]	; (ef34 <bt_dev_show_info+0x254>)
    eef0:	61a3      	str	r3, [r4, #24]
    eef2:	2301      	movs	r3, #1
    eef4:	703b      	strb	r3, [r7, #0]
    eef6:	2303      	movs	r3, #3
    eef8:	707b      	strb	r3, [r7, #1]
    eefa:	b37a      	cbz	r2, ef5c <bt_dev_show_info+0x27c>
    eefc:	4633      	mov	r3, r6
    eefe:	2e0c      	cmp	r6, #12
    ef00:	dd00      	ble.n	ef04 <bt_dev_show_info+0x224>
    ef02:	61e0      	str	r0, [r4, #28]
    ef04:	2b10      	cmp	r3, #16
    ef06:	dd01      	ble.n	ef0c <bt_dev_show_info+0x22c>
    ef08:	f8c4 8020 	str.w	r8, [r4, #32]
    ef0c:	2b14      	cmp	r3, #20
    ef0e:	dd00      	ble.n	ef12 <bt_dev_show_info+0x232>
    ef10:	6261      	str	r1, [r4, #36]	; 0x24
    ef12:	2b18      	cmp	r3, #24
    ef14:	dd01      	ble.n	ef1a <bt_dev_show_info+0x23a>
    ef16:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
    ef1a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    ef1e:	2100      	movs	r1, #0
    ef20:	e01a      	b.n	ef58 <bt_dev_show_info+0x278>
    ef22:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    ef26:	e7d8      	b.n	eeda <bt_dev_show_info+0x1fa>
    ef28:	200001a0 	.word	0x200001a0
    ef2c:	0001a668 	.word	0x0001a668
    ef30:	0001a66c 	.word	0x0001a66c
    ef34:	0001aaf4 	.word	0x0001aaf4
    ef38:	0001a5f8 	.word	0x0001a5f8
    ef3c:	00019994 	.word	0x00019994
    ef40:	0001a680 	.word	0x0001a680
    ef44:	0001a698 	.word	0x0001a698
    ef48:	f101 0008 	add.w	r0, r1, #8
    ef4c:	4438      	add	r0, r7
    ef4e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    ef52:	f803 0b01 	strb.w	r0, [r3], #1
    ef56:	3101      	adds	r1, #1
    ef58:	2901      	cmp	r1, #1
    ef5a:	d9f5      	bls.n	ef48 <bt_dev_show_info+0x268>
    ef5c:	2e1d      	cmp	r6, #29
    ef5e:	dd51      	ble.n	f004 <bt_dev_show_info+0x324>
    ef60:	231e      	movs	r3, #30
    ef62:	b142      	cbz	r2, ef76 <bt_dev_show_info+0x296>
    ef64:	2107      	movs	r1, #7
    ef66:	7139      	strb	r1, [r7, #4]
    ef68:	2100      	movs	r1, #0
    ef6a:	7179      	strb	r1, [r7, #5]
    ef6c:	71b9      	strb	r1, [r7, #6]
    ef6e:	2101      	movs	r1, #1
    ef70:	71f9      	strb	r1, [r7, #7]
    ef72:	6878      	ldr	r0, [r7, #4]
    ef74:	6120      	str	r0, [r4, #16]
    ef76:	2100      	movs	r1, #0
    ef78:	f36f 0100 	bfc	r1, #0, #1
    ef7c:	f36f 0141 	bfc	r1, #1, #1
    ef80:	f36f 0182 	bfc	r1, #2, #1
    ef84:	f36f 01c5 	bfc	r1, #3, #3
    ef88:	2403      	movs	r4, #3
    ef8a:	f364 1188 	bfi	r1, r4, #6, #3
    ef8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    ef92:	f363 2153 	bfi	r1, r3, #9, #11
    ef96:	f36f 511f 	bfc	r1, #20, #12
    ef9a:	2300      	movs	r3, #0
    ef9c:	4836      	ldr	r0, [pc, #216]	; (f078 <bt_dev_show_info+0x398>)
    ef9e:	f7fc fde1 	bl	bb64 <z_impl_z_log_msg_static_create>
    efa2:	46ad      	mov	sp, r5
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    efa4:	4d35      	ldr	r5, [pc, #212]	; (f07c <bt_dev_show_info+0x39c>)
    efa6:	f895 6071 	ldrb.w	r6, [r5, #113]	; 0x71
    efaa:	4630      	mov	r0, r6
    efac:	f7ff fa42 	bl	e434 <ver_str>
    efb0:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
    efb4:	2301      	movs	r3, #1
    efb6:	713b      	strb	r3, [r7, #4]
    efb8:	717c      	strb	r4, [r7, #5]
    efba:	b08c      	sub	sp, #48	; 0x30
    efbc:	466c      	mov	r4, sp
    efbe:	f114 0210 	adds.w	r2, r4, #16
    efc2:	d022      	beq.n	f00a <bt_dev_show_info+0x32a>
    efc4:	251a      	movs	r5, #26
    efc6:	b152      	cbz	r2, efde <bt_dev_show_info+0x2fe>
    efc8:	462b      	mov	r3, r5
    efca:	2d04      	cmp	r5, #4
    efcc:	dd03      	ble.n	efd6 <bt_dev_show_info+0x2f6>
    efce:	f8df c0b0 	ldr.w	ip, [pc, #176]	; f080 <bt_dev_show_info+0x3a0>
    efd2:	f8c4 c014 	str.w	ip, [r4, #20]
    efd6:	2b08      	cmp	r3, #8
    efd8:	dd01      	ble.n	efde <bt_dev_show_info+0x2fe>
    efda:	4b2a      	ldr	r3, [pc, #168]	; (f084 <bt_dev_show_info+0x3a4>)
    efdc:	61a3      	str	r3, [r4, #24]
    efde:	2301      	movs	r3, #1
    efe0:	703b      	strb	r3, [r7, #0]
    efe2:	2303      	movs	r3, #3
    efe4:	707b      	strb	r3, [r7, #1]
    efe6:	b1ea      	cbz	r2, f024 <bt_dev_show_info+0x344>
    efe8:	462b      	mov	r3, r5
    efea:	2d0c      	cmp	r5, #12
    efec:	dd00      	ble.n	eff0 <bt_dev_show_info+0x310>
    efee:	61e0      	str	r0, [r4, #28]
    eff0:	2b10      	cmp	r3, #16
    eff2:	dd00      	ble.n	eff6 <bt_dev_show_info+0x316>
    eff4:	6226      	str	r6, [r4, #32]
    eff6:	2b14      	cmp	r3, #20
    eff8:	dd00      	ble.n	effc <bt_dev_show_info+0x31c>
    effa:	6261      	str	r1, [r4, #36]	; 0x24
    effc:	f104 0328 	add.w	r3, r4, #40	; 0x28
    f000:	2100      	movs	r1, #0
    f002:	e00d      	b.n	f020 <bt_dev_show_info+0x340>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    f004:	f06f 031b 	mvn.w	r3, #27
    f008:	e7ab      	b.n	ef62 <bt_dev_show_info+0x282>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    f00a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    f00e:	e7da      	b.n	efc6 <bt_dev_show_info+0x2e6>
    f010:	f101 0008 	add.w	r0, r1, #8
    f014:	4438      	add	r0, r7
    f016:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    f01a:	f803 0b01 	strb.w	r0, [r3], #1
    f01e:	3101      	adds	r1, #1
    f020:	2901      	cmp	r1, #1
    f022:	d9f5      	bls.n	f010 <bt_dev_show_info+0x330>
    f024:	2d19      	cmp	r5, #25
    f026:	dd24      	ble.n	f072 <bt_dev_show_info+0x392>
    f028:	231a      	movs	r3, #26
    f02a:	b142      	cbz	r2, f03e <bt_dev_show_info+0x35e>
    f02c:	2106      	movs	r1, #6
    f02e:	7139      	strb	r1, [r7, #4]
    f030:	2100      	movs	r1, #0
    f032:	7179      	strb	r1, [r7, #5]
    f034:	71b9      	strb	r1, [r7, #6]
    f036:	2101      	movs	r1, #1
    f038:	71f9      	strb	r1, [r7, #7]
    f03a:	6878      	ldr	r0, [r7, #4]
    f03c:	6120      	str	r0, [r4, #16]
    f03e:	2100      	movs	r1, #0
    f040:	f36f 0100 	bfc	r1, #0, #1
    f044:	f36f 0141 	bfc	r1, #1, #1
    f048:	f36f 0182 	bfc	r1, #2, #1
    f04c:	f36f 01c5 	bfc	r1, #3, #3
    f050:	2003      	movs	r0, #3
    f052:	f360 1188 	bfi	r1, r0, #6, #3
    f056:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f05a:	f363 2153 	bfi	r1, r3, #9, #11
    f05e:	f36f 511f 	bfc	r1, #20, #12
    f062:	2300      	movs	r3, #0
    f064:	4804      	ldr	r0, [pc, #16]	; (f078 <bt_dev_show_info+0x398>)
    f066:	f7fc fd7d 	bl	bb64 <z_impl_z_log_msg_static_create>
}
    f06a:	3708      	adds	r7, #8
    f06c:	46bd      	mov	sp, r7
    f06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    f072:	f06f 031b 	mvn.w	r3, #27
    f076:	e7d8      	b.n	f02a <bt_dev_show_info+0x34a>
    f078:	00019994 	.word	0x00019994
    f07c:	200001a0 	.word	0x200001a0
    f080:	0001a6dc 	.word	0x0001a6dc
    f084:	0001aaf4 	.word	0x0001aaf4

0000f088 <bt_hci_cmd_state_set_init>:
{
    f088:	b510      	push	{r4, lr}
    f08a:	460c      	mov	r4, r1
	state->target = target;
    f08c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    f08e:	604b      	str	r3, [r1, #4]
	state->val = val;
    f090:	f89d 3008 	ldrb.w	r3, [sp, #8]
    f094:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    f096:	f008 f968 	bl	1736a <net_buf_id>
    f09a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f09e:	4b02      	ldr	r3, [pc, #8]	; (f0a8 <bt_hci_cmd_state_set_init+0x20>)
    f0a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f0a4:	605c      	str	r4, [r3, #4]
}
    f0a6:	bd10      	pop	{r4, pc}
    f0a8:	20001f9c 	.word	0x20001f9c

0000f0ac <bt_hci_cmd_create>:
{
    f0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f0b0:	4606      	mov	r6, r0
    f0b2:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
    f0b4:	f04f 32ff 	mov.w	r2, #4294967295
    f0b8:	f04f 33ff 	mov.w	r3, #4294967295
    f0bc:	4818      	ldr	r0, [pc, #96]	; (f120 <bt_hci_cmd_create+0x74>)
    f0be:	f008 f9f7 	bl	174b0 <net_buf_alloc_fixed>
    f0c2:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    f0c4:	f100 090c 	add.w	r9, r0, #12
    f0c8:	2100      	movs	r1, #0
    f0ca:	4648      	mov	r0, r9
    f0cc:	f008 fa54 	bl	17578 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f0d0:	f04f 0800 	mov.w	r8, #0
    f0d4:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    f0d8:	4620      	mov	r0, r4
    f0da:	f008 f946 	bl	1736a <net_buf_id>
    f0de:	4d11      	ldr	r5, [pc, #68]	; (f124 <bt_hci_cmd_create+0x78>)
    f0e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f0e4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    f0e8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f0ea:	4620      	mov	r0, r4
    f0ec:	f008 f93d 	bl	1736a <net_buf_id>
    f0f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f0f4:	eb05 0380 	add.w	r3, r5, r0, lsl #2
    f0f8:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
    f0fc:	4620      	mov	r0, r4
    f0fe:	f008 f934 	bl	1736a <net_buf_id>
    f102:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f106:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    f10a:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    f10e:	2103      	movs	r1, #3
    f110:	4648      	mov	r0, r9
    f112:	f008 fa35 	bl	17580 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    f116:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    f118:	7087      	strb	r7, [r0, #2]
}
    f11a:	4620      	mov	r0, r4
    f11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f120:	20000478 	.word	0x20000478
    f124:	20001f9c 	.word	0x20001f9c

0000f128 <bt_hci_cmd_send_sync>:
{
    f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f12c:	b088      	sub	sp, #32
    f12e:	af00      	add	r7, sp, #0
    f130:	4606      	mov	r6, r0
    f132:	4615      	mov	r5, r2
	if (!buf) {
    f134:	460c      	mov	r4, r1
    f136:	2900      	cmp	r1, #0
    f138:	d073      	beq.n	f222 <bt_hci_cmd_send_sync+0xfa>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f13a:	f107 0808 	add.w	r8, r7, #8
    f13e:	2201      	movs	r2, #1
    f140:	2100      	movs	r1, #0
    f142:	4640      	mov	r0, r8
    f144:	f009 fd74 	bl	18c30 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f148:	4620      	mov	r0, r4
    f14a:	f008 f90e 	bl	1736a <net_buf_id>
    f14e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f152:	4b4c      	ldr	r3, [pc, #304]	; (f284 <bt_hci_cmd_send_sync+0x15c>)
    f154:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f158:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    f15c:	4620      	mov	r0, r4
    f15e:	f008 fa07 	bl	17570 <net_buf_ref>
    f162:	4601      	mov	r1, r0
    f164:	4848      	ldr	r0, [pc, #288]	; (f288 <bt_hci_cmd_send_sync+0x160>)
    f166:	f008 f9dc 	bl	17522 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f16a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f16e:	2300      	movs	r3, #0
    f170:	4640      	mov	r0, r8
    f172:	f005 f99b 	bl	144ac <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    f176:	4680      	mov	r8, r0
    f178:	2800      	cmp	r0, #0
    f17a:	d15a      	bne.n	f232 <bt_hci_cmd_send_sync+0x10a>
	status = cmd(buf)->status;
    f17c:	4620      	mov	r0, r4
    f17e:	f008 f8f4 	bl	1736a <net_buf_id>
    f182:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f186:	4b3f      	ldr	r3, [pc, #252]	; (f284 <bt_hci_cmd_send_sync+0x15c>)
    f188:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
    f18c:	f1b8 0f00 	cmp.w	r8, #0
    f190:	d06b      	beq.n	f26a <bt_hci_cmd_send_sync+0x142>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    f192:	466d      	mov	r5, sp
    f194:	b08a      	sub	sp, #40	; 0x28
    f196:	466b      	mov	r3, sp
    f198:	f113 0210 	adds.w	r2, r3, #16
    f19c:	d05c      	beq.n	f258 <bt_hci_cmd_send_sync+0x130>
    f19e:	2114      	movs	r1, #20
    f1a0:	b19a      	cbz	r2, f1ca <bt_hci_cmd_send_sync+0xa2>
    f1a2:	4608      	mov	r0, r1
    f1a4:	2904      	cmp	r1, #4
    f1a6:	dd03      	ble.n	f1b0 <bt_hci_cmd_send_sync+0x88>
    f1a8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; f28c <bt_hci_cmd_send_sync+0x164>
    f1ac:	f8c3 c014 	str.w	ip, [r3, #20]
    f1b0:	2808      	cmp	r0, #8
    f1b2:	dd03      	ble.n	f1bc <bt_hci_cmd_send_sync+0x94>
    f1b4:	f8df c0d8 	ldr.w	ip, [pc, #216]	; f290 <bt_hci_cmd_send_sync+0x168>
    f1b8:	f8c3 c018 	str.w	ip, [r3, #24]
    f1bc:	280c      	cmp	r0, #12
    f1be:	dd00      	ble.n	f1c2 <bt_hci_cmd_send_sync+0x9a>
    f1c0:	61de      	str	r6, [r3, #28]
    f1c2:	2810      	cmp	r0, #16
    f1c4:	dd01      	ble.n	f1ca <bt_hci_cmd_send_sync+0xa2>
    f1c6:	f8c3 8020 	str.w	r8, [r3, #32]
    f1ca:	2913      	cmp	r1, #19
    f1cc:	dd47      	ble.n	f25e <bt_hci_cmd_send_sync+0x136>
    f1ce:	2614      	movs	r6, #20
    f1d0:	b13a      	cbz	r2, f1e2 <bt_hci_cmd_send_sync+0xba>
    f1d2:	2105      	movs	r1, #5
    f1d4:	7139      	strb	r1, [r7, #4]
    f1d6:	2100      	movs	r1, #0
    f1d8:	7179      	strb	r1, [r7, #5]
    f1da:	71b9      	strb	r1, [r7, #6]
    f1dc:	71f9      	strb	r1, [r7, #7]
    f1de:	6878      	ldr	r0, [r7, #4]
    f1e0:	6118      	str	r0, [r3, #16]
    f1e2:	2100      	movs	r1, #0
    f1e4:	f36f 0100 	bfc	r1, #0, #1
    f1e8:	f36f 0141 	bfc	r1, #1, #1
    f1ec:	f36f 0182 	bfc	r1, #2, #1
    f1f0:	f36f 01c5 	bfc	r1, #3, #3
    f1f4:	2302      	movs	r3, #2
    f1f6:	f363 1188 	bfi	r1, r3, #6, #3
    f1fa:	f3c6 030a 	ubfx	r3, r6, #0, #11
    f1fe:	f363 2153 	bfi	r1, r3, #9, #11
    f202:	f36f 511f 	bfc	r1, #20, #12
    f206:	2300      	movs	r3, #0
    f208:	4822      	ldr	r0, [pc, #136]	; (f294 <bt_hci_cmd_send_sync+0x16c>)
    f20a:	f7fc fcab 	bl	bb64 <z_impl_z_log_msg_static_create>
    f20e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    f210:	4620      	mov	r0, r4
    f212:	f008 f98a 	bl	1752a <net_buf_unref>
		switch (status) {
    f216:	f1b8 0f09 	cmp.w	r8, #9
    f21a:	d023      	beq.n	f264 <bt_hci_cmd_send_sync+0x13c>
			return -EIO;
    f21c:	f06f 0004 	mvn.w	r0, #4
    f220:	e026      	b.n	f270 <bt_hci_cmd_send_sync+0x148>
		buf = bt_hci_cmd_create(opcode, 0);
    f222:	f7ff ff43 	bl	f0ac <bt_hci_cmd_create>
		if (!buf) {
    f226:	4604      	mov	r4, r0
    f228:	2800      	cmp	r0, #0
    f22a:	d186      	bne.n	f13a <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
    f22c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f230:	e01e      	b.n	f270 <bt_hci_cmd_send_sync+0x148>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    f232:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    f236:	4a18      	ldr	r2, [pc, #96]	; (f298 <bt_hci_cmd_send_sync+0x170>)
    f238:	4918      	ldr	r1, [pc, #96]	; (f29c <bt_hci_cmd_send_sync+0x174>)
    f23a:	4819      	ldr	r0, [pc, #100]	; (f2a0 <bt_hci_cmd_send_sync+0x178>)
    f23c:	f007 f838 	bl	162b0 <assert_print>
    f240:	4642      	mov	r2, r8
    f242:	4631      	mov	r1, r6
    f244:	4817      	ldr	r0, [pc, #92]	; (f2a4 <bt_hci_cmd_send_sync+0x17c>)
    f246:	f007 f833 	bl	162b0 <assert_print>
    f24a:	4040      	eors	r0, r0
    f24c:	f380 8811 	msr	BASEPRI, r0
    f250:	f04f 0003 	mov.w	r0, #3
    f254:	df02      	svc	2
    f256:	e791      	b.n	f17c <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    f258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f25c:	e7a0      	b.n	f1a0 <bt_hci_cmd_send_sync+0x78>
    f25e:	f06f 061b 	mvn.w	r6, #27
    f262:	e7b5      	b.n	f1d0 <bt_hci_cmd_send_sync+0xa8>
			return -ECONNREFUSED;
    f264:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    f268:	e002      	b.n	f270 <bt_hci_cmd_send_sync+0x148>
	if (rsp) {
    f26a:	b12d      	cbz	r5, f278 <bt_hci_cmd_send_sync+0x150>
		*rsp = buf;
    f26c:	602c      	str	r4, [r5, #0]
	return 0;
    f26e:	2000      	movs	r0, #0
}
    f270:	3720      	adds	r7, #32
    f272:	46bd      	mov	sp, r7
    f274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f278:	4620      	mov	r0, r4
    f27a:	f008 f956 	bl	1752a <net_buf_unref>
	return 0;
    f27e:	2000      	movs	r0, #0
    f280:	e7f6      	b.n	f270 <bt_hci_cmd_send_sync+0x148>
    f282:	bf00      	nop
    f284:	20001f9c 	.word	0x20001f9c
    f288:	200002ac 	.word	0x200002ac
    f28c:	0001a740 	.word	0x0001a740
    f290:	0001ab78 	.word	0x0001ab78
    f294:	00019994 	.word	0x00019994
    f298:	0001a58c 	.word	0x0001a58c
    f29c:	0001a708 	.word	0x0001a708
    f2a0:	0001a5dc 	.word	0x0001a5dc
    f2a4:	0001a714 	.word	0x0001a714

0000f2a8 <common_init>:
{
    f2a8:	b510      	push	{r4, lr}
    f2aa:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f2ac:	4b22      	ldr	r3, [pc, #136]	; (f338 <common_init+0x90>)
    f2ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    f2b2:	689b      	ldr	r3, [r3, #8]
    f2b4:	f013 0f01 	tst.w	r3, #1
    f2b8:	d10d      	bne.n	f2d6 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f2ba:	aa01      	add	r2, sp, #4
    f2bc:	2100      	movs	r1, #0
    f2be:	f640 4003 	movw	r0, #3075	; 0xc03
    f2c2:	f7ff ff31 	bl	f128 <bt_hci_cmd_send_sync>
		if (err) {
    f2c6:	4604      	mov	r4, r0
    f2c8:	b968      	cbnz	r0, f2e6 <common_init+0x3e>
		hci_reset_complete(rsp);
    f2ca:	9801      	ldr	r0, [sp, #4]
    f2cc:	f7ff f8fc 	bl	e4c8 <hci_reset_complete>
		net_buf_unref(rsp);
    f2d0:	9801      	ldr	r0, [sp, #4]
    f2d2:	f008 f92a 	bl	1752a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f2d6:	aa01      	add	r2, sp, #4
    f2d8:	2100      	movs	r1, #0
    f2da:	f241 0003 	movw	r0, #4099	; 0x1003
    f2de:	f7ff ff23 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
    f2e2:	4604      	mov	r4, r0
    f2e4:	b110      	cbz	r0, f2ec <common_init+0x44>
}
    f2e6:	4620      	mov	r0, r4
    f2e8:	b002      	add	sp, #8
    f2ea:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
    f2ec:	9801      	ldr	r0, [sp, #4]
    f2ee:	f7ff f903 	bl	e4f8 <read_local_features_complete>
	net_buf_unref(rsp);
    f2f2:	9801      	ldr	r0, [sp, #4]
    f2f4:	f008 f919 	bl	1752a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f2f8:	aa01      	add	r2, sp, #4
    f2fa:	2100      	movs	r1, #0
    f2fc:	f241 0001 	movw	r0, #4097	; 0x1001
    f300:	f7ff ff12 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
    f304:	4604      	mov	r4, r0
    f306:	2800      	cmp	r0, #0
    f308:	d1ed      	bne.n	f2e6 <common_init+0x3e>
	read_local_ver_complete(rsp);
    f30a:	9801      	ldr	r0, [sp, #4]
    f30c:	f7ff f870 	bl	e3f0 <read_local_ver_complete>
	net_buf_unref(rsp);
    f310:	9801      	ldr	r0, [sp, #4]
    f312:	f008 f90a 	bl	1752a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f316:	aa01      	add	r2, sp, #4
    f318:	2100      	movs	r1, #0
    f31a:	f241 0002 	movw	r0, #4098	; 0x1002
    f31e:	f7ff ff03 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
    f322:	4604      	mov	r4, r0
    f324:	2800      	cmp	r0, #0
    f326:	d1de      	bne.n	f2e6 <common_init+0x3e>
	read_supported_commands_complete(rsp);
    f328:	9801      	ldr	r0, [sp, #4]
    f32a:	f7ff f8ef 	bl	e50c <read_supported_commands_complete>
	net_buf_unref(rsp);
    f32e:	9801      	ldr	r0, [sp, #4]
    f330:	f008 f8fb 	bl	1752a <net_buf_unref>
	return 0;
    f334:	e7d7      	b.n	f2e6 <common_init+0x3e>
    f336:	bf00      	nop
    f338:	200001a0 	.word	0x200001a0

0000f33c <le_init>:
{
    f33c:	b5b0      	push	{r4, r5, r7, lr}
    f33e:	b082      	sub	sp, #8
    f340:	af00      	add	r7, sp, #0
	if (!BT_FEAT_LE(bt_dev.features)) {
    f342:	4b48      	ldr	r3, [pc, #288]	; (f464 <le_init+0x128>)
    f344:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f348:	f013 0f40 	tst.w	r3, #64	; 0x40
    f34c:	d00c      	beq.n	f368 <le_init+0x2c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f34e:	1d3a      	adds	r2, r7, #4
    f350:	2100      	movs	r1, #0
    f352:	f242 0003 	movw	r0, #8195	; 0x2003
    f356:	f7ff fee7 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
    f35a:	4603      	mov	r3, r0
    f35c:	2800      	cmp	r0, #0
    f35e:	d040      	beq.n	f3e2 <le_init+0xa6>
}
    f360:	4618      	mov	r0, r3
    f362:	3708      	adds	r7, #8
    f364:	46bd      	mov	sp, r7
    f366:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Non-LE capable controller detected!");
    f368:	466d      	mov	r5, sp
    f36a:	b088      	sub	sp, #32
    f36c:	466b      	mov	r3, sp
    f36e:	f113 0210 	adds.w	r2, r3, #16
    f372:	d030      	beq.n	f3d6 <le_init+0x9a>
    f374:	210c      	movs	r1, #12
    f376:	b142      	cbz	r2, f38a <le_init+0x4e>
    f378:	4608      	mov	r0, r1
    f37a:	2904      	cmp	r1, #4
    f37c:	dd01      	ble.n	f382 <le_init+0x46>
    f37e:	4c3a      	ldr	r4, [pc, #232]	; (f468 <le_init+0x12c>)
    f380:	615c      	str	r4, [r3, #20]
    f382:	2808      	cmp	r0, #8
    f384:	dd01      	ble.n	f38a <le_init+0x4e>
    f386:	4839      	ldr	r0, [pc, #228]	; (f46c <le_init+0x130>)
    f388:	6198      	str	r0, [r3, #24]
    f38a:	290b      	cmp	r1, #11
    f38c:	dd26      	ble.n	f3dc <le_init+0xa0>
    f38e:	240c      	movs	r4, #12
    f390:	b13a      	cbz	r2, f3a2 <le_init+0x66>
    f392:	2103      	movs	r1, #3
    f394:	7039      	strb	r1, [r7, #0]
    f396:	2100      	movs	r1, #0
    f398:	7079      	strb	r1, [r7, #1]
    f39a:	70b9      	strb	r1, [r7, #2]
    f39c:	70f9      	strb	r1, [r7, #3]
    f39e:	6838      	ldr	r0, [r7, #0]
    f3a0:	6118      	str	r0, [r3, #16]
    f3a2:	2100      	movs	r1, #0
    f3a4:	f36f 0100 	bfc	r1, #0, #1
    f3a8:	f36f 0141 	bfc	r1, #1, #1
    f3ac:	f36f 0182 	bfc	r1, #2, #1
    f3b0:	f36f 01c5 	bfc	r1, #3, #3
    f3b4:	2301      	movs	r3, #1
    f3b6:	f363 1188 	bfi	r1, r3, #6, #3
    f3ba:	f3c4 040a 	ubfx	r4, r4, #0, #11
    f3be:	f364 2153 	bfi	r1, r4, #9, #11
    f3c2:	f36f 511f 	bfc	r1, #20, #12
    f3c6:	2300      	movs	r3, #0
    f3c8:	4829      	ldr	r0, [pc, #164]	; (f470 <le_init+0x134>)
    f3ca:	f7fc fbcb 	bl	bb64 <z_impl_z_log_msg_static_create>
    f3ce:	46ad      	mov	sp, r5
		return -ENODEV;
    f3d0:	f06f 0312 	mvn.w	r3, #18
    f3d4:	e7c4      	b.n	f360 <le_init+0x24>
		LOG_ERR("Non-LE capable controller detected!");
    f3d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f3da:	e7cc      	b.n	f376 <le_init+0x3a>
    f3dc:	f06f 041b 	mvn.w	r4, #27
    f3e0:	e7d6      	b.n	f390 <le_init+0x54>
	read_le_features_complete(rsp);
    f3e2:	6878      	ldr	r0, [r7, #4]
    f3e4:	f7ff f89c 	bl	e520 <read_le_features_complete>
	net_buf_unref(rsp);
    f3e8:	6878      	ldr	r0, [r7, #4]
    f3ea:	f008 f89e 	bl	1752a <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f3ee:	4b1d      	ldr	r3, [pc, #116]	; (f464 <le_init+0x128>)
    f3f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f3f4:	f013 0f20 	tst.w	r3, #32
    f3f8:	d018      	beq.n	f42c <le_init+0xf0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f3fa:	4b1a      	ldr	r3, [pc, #104]	; (f464 <le_init+0x128>)
    f3fc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    f400:	f013 0f08 	tst.w	r3, #8
    f404:	d00e      	beq.n	f424 <le_init+0xe8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f406:	1d3a      	adds	r2, r7, #4
    f408:	2100      	movs	r1, #0
    f40a:	f242 001c 	movw	r0, #8220	; 0x201c
    f40e:	f7ff fe8b 	bl	f128 <bt_hci_cmd_send_sync>
		if (err) {
    f412:	4603      	mov	r3, r0
    f414:	2800      	cmp	r0, #0
    f416:	d1a3      	bne.n	f360 <le_init+0x24>
		le_read_supp_states_complete(rsp);
    f418:	6878      	ldr	r0, [r7, #4]
    f41a:	f7fe ffff 	bl	e41c <le_read_supp_states_complete>
		net_buf_unref(rsp);
    f41e:	6878      	ldr	r0, [r7, #4]
    f420:	f008 f883 	bl	1752a <net_buf_unref>
	return  le_set_event_mask();
    f424:	f007 fd92 	bl	16f4c <le_set_event_mask>
    f428:	4603      	mov	r3, r0
    f42a:	e799      	b.n	f360 <le_init+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f42c:	2102      	movs	r1, #2
    f42e:	f640 406d 	movw	r0, #3181	; 0xc6d
    f432:	f7ff fe3b 	bl	f0ac <bt_hci_cmd_create>
		if (!buf) {
    f436:	4604      	mov	r4, r0
    f438:	b180      	cbz	r0, f45c <le_init+0x120>
    f43a:	2102      	movs	r1, #2
    f43c:	300c      	adds	r0, #12
    f43e:	f008 f89f 	bl	17580 <net_buf_simple_add>
		cp_le->le = 0x01;
    f442:	2301      	movs	r3, #1
    f444:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f446:	2200      	movs	r2, #0
    f448:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f44a:	4621      	mov	r1, r4
    f44c:	f640 406d 	movw	r0, #3181	; 0xc6d
    f450:	f7ff fe6a 	bl	f128 <bt_hci_cmd_send_sync>
		if (err) {
    f454:	4603      	mov	r3, r0
    f456:	2800      	cmp	r0, #0
    f458:	d0cf      	beq.n	f3fa <le_init+0xbe>
    f45a:	e781      	b.n	f360 <le_init+0x24>
			return -ENOBUFS;
    f45c:	f06f 0368 	mvn.w	r3, #104	; 0x68
    f460:	e77e      	b.n	f360 <le_init+0x24>
    f462:	bf00      	nop
    f464:	200001a0 	.word	0x200001a0
    f468:	0001a760 	.word	0x0001a760
    f46c:	0001abcc 	.word	0x0001abcc
    f470:	00019994 	.word	0x00019994

0000f474 <set_event_mask>:
{
    f474:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f476:	2108      	movs	r1, #8
    f478:	f640 4001 	movw	r0, #3073	; 0xc01
    f47c:	f7ff fe16 	bl	f0ac <bt_hci_cmd_create>
	if (!buf) {
    f480:	b188      	cbz	r0, f4a6 <set_event_mask+0x32>
    f482:	4604      	mov	r4, r0
    f484:	2108      	movs	r1, #8
    f486:	300c      	adds	r0, #12
    f488:	f008 f87a 	bl	17580 <net_buf_simple_add>
    f48c:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
    f48e:	4807      	ldr	r0, [pc, #28]	; (f4ac <set_event_mask+0x38>)
    f490:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f494:	f007 fd08 	bl	16ea8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f498:	2200      	movs	r2, #0
    f49a:	4621      	mov	r1, r4
    f49c:	f640 4001 	movw	r0, #3073	; 0xc01
    f4a0:	f7ff fe42 	bl	f128 <bt_hci_cmd_send_sync>
}
    f4a4:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
    f4a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f4aa:	e7fb      	b.n	f4a4 <set_event_mask+0x30>
    f4ac:	02008000 	.word	0x02008000

0000f4b0 <hci_vs_init>:
{
    f4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f4b4:	b085      	sub	sp, #20
    f4b6:	af00      	add	r7, sp, #0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f4b8:	f107 020c 	add.w	r2, r7, #12
    f4bc:	2100      	movs	r1, #0
    f4be:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f4c2:	f7ff fe31 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
    f4c6:	bb98      	cbnz	r0, f530 <hci_vs_init+0x80>
	rp.info = (void *)rsp->data;
    f4c8:	68fb      	ldr	r3, [r7, #12]
    f4ca:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    f4cc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    f4d0:	4630      	mov	r0, r6
    f4d2:	f7fe ffd1 	bl	e478 <vs_hw_platform>
    f4d6:	466d      	mov	r5, sp
    f4d8:	2301      	movs	r3, #1
    f4da:	723b      	strb	r3, [r7, #8]
    f4dc:	2303      	movs	r3, #3
    f4de:	727b      	strb	r3, [r7, #9]
    f4e0:	b08a      	sub	sp, #40	; 0x28
    f4e2:	46ec      	mov	ip, sp
    f4e4:	f11c 0210 	adds.w	r2, ip, #16
    f4e8:	d060      	beq.n	f5ac <hci_vs_init+0xfc>
    f4ea:	f04f 0e16 	mov.w	lr, #22
    f4ee:	b15a      	cbz	r2, f508 <hci_vs_init+0x58>
    f4f0:	4673      	mov	r3, lr
    f4f2:	f1be 0f04 	cmp.w	lr, #4
    f4f6:	dd02      	ble.n	f4fe <hci_vs_init+0x4e>
    f4f8:	499c      	ldr	r1, [pc, #624]	; (f76c <hci_vs_init+0x2bc>)
    f4fa:	f8cc 1014 	str.w	r1, [ip, #20]
    f4fe:	2b08      	cmp	r3, #8
    f500:	dd02      	ble.n	f508 <hci_vs_init+0x58>
    f502:	4b9b      	ldr	r3, [pc, #620]	; (f770 <hci_vs_init+0x2c0>)
    f504:	f8cc 3018 	str.w	r3, [ip, #24]
    f508:	2301      	movs	r3, #1
    f50a:	713b      	strb	r3, [r7, #4]
    f50c:	2303      	movs	r3, #3
    f50e:	717b      	strb	r3, [r7, #5]
    f510:	2a00      	cmp	r2, #0
    f512:	d058      	beq.n	f5c6 <hci_vs_init+0x116>
    f514:	4673      	mov	r3, lr
    f516:	f1be 0f0c 	cmp.w	lr, #12
    f51a:	dd01      	ble.n	f520 <hci_vs_init+0x70>
    f51c:	f8cc 001c 	str.w	r0, [ip, #28]
    f520:	2b10      	cmp	r3, #16
    f522:	dd01      	ble.n	f528 <hci_vs_init+0x78>
    f524:	f8cc 6020 	str.w	r6, [ip, #32]
    f528:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    f52c:	2100      	movs	r1, #0
    f52e:	e048      	b.n	f5c2 <hci_vs_init+0x112>
		LOG_WRN("Vendor HCI extensions not available");
    f530:	466d      	mov	r5, sp
    f532:	b088      	sub	sp, #32
    f534:	466b      	mov	r3, sp
    f536:	f113 0210 	adds.w	r2, r3, #16
    f53a:	d031      	beq.n	f5a0 <hci_vs_init+0xf0>
    f53c:	210c      	movs	r1, #12
    f53e:	b142      	cbz	r2, f552 <hci_vs_init+0xa2>
    f540:	4608      	mov	r0, r1
    f542:	2904      	cmp	r1, #4
    f544:	dd01      	ble.n	f54a <hci_vs_init+0x9a>
    f546:	4c8b      	ldr	r4, [pc, #556]	; (f774 <hci_vs_init+0x2c4>)
    f548:	615c      	str	r4, [r3, #20]
    f54a:	2808      	cmp	r0, #8
    f54c:	dd01      	ble.n	f552 <hci_vs_init+0xa2>
    f54e:	4888      	ldr	r0, [pc, #544]	; (f770 <hci_vs_init+0x2c0>)
    f550:	6198      	str	r0, [r3, #24]
    f552:	290b      	cmp	r1, #11
    f554:	dd27      	ble.n	f5a6 <hci_vs_init+0xf6>
    f556:	240c      	movs	r4, #12
    f558:	b13a      	cbz	r2, f56a <hci_vs_init+0xba>
    f55a:	2103      	movs	r1, #3
    f55c:	7239      	strb	r1, [r7, #8]
    f55e:	2100      	movs	r1, #0
    f560:	7279      	strb	r1, [r7, #9]
    f562:	72b9      	strb	r1, [r7, #10]
    f564:	72f9      	strb	r1, [r7, #11]
    f566:	68b8      	ldr	r0, [r7, #8]
    f568:	6118      	str	r0, [r3, #16]
    f56a:	2100      	movs	r1, #0
    f56c:	f36f 0100 	bfc	r1, #0, #1
    f570:	f36f 0141 	bfc	r1, #1, #1
    f574:	f36f 0182 	bfc	r1, #2, #1
    f578:	f36f 01c5 	bfc	r1, #3, #3
    f57c:	2302      	movs	r3, #2
    f57e:	f363 1188 	bfi	r1, r3, #6, #3
    f582:	f3c4 030a 	ubfx	r3, r4, #0, #11
    f586:	f363 2153 	bfi	r1, r3, #9, #11
    f58a:	f36f 511f 	bfc	r1, #20, #12
    f58e:	2300      	movs	r3, #0
    f590:	4879      	ldr	r0, [pc, #484]	; (f778 <hci_vs_init+0x2c8>)
    f592:	f7fc fae7 	bl	bb64 <z_impl_z_log_msg_static_create>
    f596:	46ad      	mov	sp, r5
}
    f598:	3714      	adds	r7, #20
    f59a:	46bd      	mov	sp, r7
    f59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Vendor HCI extensions not available");
    f5a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f5a4:	e7cb      	b.n	f53e <hci_vs_init+0x8e>
    f5a6:	f06f 041b 	mvn.w	r4, #27
    f5aa:	e7d5      	b.n	f558 <hci_vs_init+0xa8>
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    f5ac:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    f5b0:	e79d      	b.n	f4ee <hci_vs_init+0x3e>
    f5b2:	f101 0010 	add.w	r0, r1, #16
    f5b6:	4438      	add	r0, r7
    f5b8:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
    f5bc:	f803 0b01 	strb.w	r0, [r3], #1
    f5c0:	3101      	adds	r1, #1
    f5c2:	2901      	cmp	r1, #1
    f5c4:	d9f5      	bls.n	f5b2 <hci_vs_init+0x102>
    f5c6:	f1be 0f15 	cmp.w	lr, #21
    f5ca:	dd54      	ble.n	f676 <hci_vs_init+0x1c6>
    f5cc:	2316      	movs	r3, #22
    f5ce:	b14a      	cbz	r2, f5e4 <hci_vs_init+0x134>
    f5d0:	2105      	movs	r1, #5
    f5d2:	7239      	strb	r1, [r7, #8]
    f5d4:	2100      	movs	r1, #0
    f5d6:	7279      	strb	r1, [r7, #9]
    f5d8:	72b9      	strb	r1, [r7, #10]
    f5da:	2101      	movs	r1, #1
    f5dc:	72f9      	strb	r1, [r7, #11]
    f5de:	68b8      	ldr	r0, [r7, #8]
    f5e0:	f8cc 0010 	str.w	r0, [ip, #16]
    f5e4:	2100      	movs	r1, #0
    f5e6:	f36f 0100 	bfc	r1, #0, #1
    f5ea:	f36f 0141 	bfc	r1, #1, #1
    f5ee:	f36f 0182 	bfc	r1, #2, #1
    f5f2:	f36f 01c5 	bfc	r1, #3, #3
    f5f6:	2603      	movs	r6, #3
    f5f8:	f366 1188 	bfi	r1, r6, #6, #3
    f5fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f600:	f363 2153 	bfi	r1, r3, #9, #11
    f604:	f36f 511f 	bfc	r1, #20, #12
    f608:	2300      	movs	r3, #0
    f60a:	485b      	ldr	r0, [pc, #364]	; (f778 <hci_vs_init+0x2c8>)
    f60c:	f7fc faaa 	bl	bb64 <z_impl_z_log_msg_static_create>
    f610:	46ad      	mov	sp, r5
	LOG_INF("HW Variant: %s (0x%04x)",
    f612:	f8b4 8003 	ldrh.w	r8, [r4, #3]
    f616:	4641      	mov	r1, r8
    f618:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f61c:	f7fe ff38 	bl	e490 <vs_hw_variant>
    f620:	466d      	mov	r5, sp
    f622:	2301      	movs	r3, #1
    f624:	723b      	strb	r3, [r7, #8]
    f626:	727e      	strb	r6, [r7, #9]
    f628:	b08a      	sub	sp, #40	; 0x28
    f62a:	46ec      	mov	ip, sp
    f62c:	f11c 0210 	adds.w	r2, ip, #16
    f630:	d024      	beq.n	f67c <hci_vs_init+0x1cc>
    f632:	f04f 0e16 	mov.w	lr, #22
    f636:	b15a      	cbz	r2, f650 <hci_vs_init+0x1a0>
    f638:	4673      	mov	r3, lr
    f63a:	f1be 0f04 	cmp.w	lr, #4
    f63e:	dd02      	ble.n	f646 <hci_vs_init+0x196>
    f640:	494e      	ldr	r1, [pc, #312]	; (f77c <hci_vs_init+0x2cc>)
    f642:	f8cc 1014 	str.w	r1, [ip, #20]
    f646:	2b08      	cmp	r3, #8
    f648:	dd02      	ble.n	f650 <hci_vs_init+0x1a0>
    f64a:	4b49      	ldr	r3, [pc, #292]	; (f770 <hci_vs_init+0x2c0>)
    f64c:	f8cc 3018 	str.w	r3, [ip, #24]
    f650:	2301      	movs	r3, #1
    f652:	713b      	strb	r3, [r7, #4]
    f654:	2303      	movs	r3, #3
    f656:	717b      	strb	r3, [r7, #5]
    f658:	b1ea      	cbz	r2, f696 <hci_vs_init+0x1e6>
    f65a:	4673      	mov	r3, lr
    f65c:	f1be 0f0c 	cmp.w	lr, #12
    f660:	dd01      	ble.n	f666 <hci_vs_init+0x1b6>
    f662:	f8cc 001c 	str.w	r0, [ip, #28]
    f666:	2b10      	cmp	r3, #16
    f668:	dd01      	ble.n	f66e <hci_vs_init+0x1be>
    f66a:	f8cc 8020 	str.w	r8, [ip, #32]
    f66e:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    f672:	2100      	movs	r1, #0
    f674:	e00d      	b.n	f692 <hci_vs_init+0x1e2>
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    f676:	f06f 031b 	mvn.w	r3, #27
    f67a:	e7a8      	b.n	f5ce <hci_vs_init+0x11e>
	LOG_INF("HW Variant: %s (0x%04x)",
    f67c:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    f680:	e7d9      	b.n	f636 <hci_vs_init+0x186>
    f682:	f101 0010 	add.w	r0, r1, #16
    f686:	4438      	add	r0, r7
    f688:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
    f68c:	f803 0b01 	strb.w	r0, [r3], #1
    f690:	3101      	adds	r1, #1
    f692:	2901      	cmp	r1, #1
    f694:	d9f5      	bls.n	f682 <hci_vs_init+0x1d2>
    f696:	f1be 0f15 	cmp.w	lr, #21
    f69a:	dd60      	ble.n	f75e <hci_vs_init+0x2ae>
    f69c:	2316      	movs	r3, #22
    f69e:	b14a      	cbz	r2, f6b4 <hci_vs_init+0x204>
    f6a0:	2105      	movs	r1, #5
    f6a2:	7239      	strb	r1, [r7, #8]
    f6a4:	2100      	movs	r1, #0
    f6a6:	7279      	strb	r1, [r7, #9]
    f6a8:	72b9      	strb	r1, [r7, #10]
    f6aa:	2101      	movs	r1, #1
    f6ac:	72f9      	strb	r1, [r7, #11]
    f6ae:	68b8      	ldr	r0, [r7, #8]
    f6b0:	f8cc 0010 	str.w	r0, [ip, #16]
    f6b4:	2100      	movs	r1, #0
    f6b6:	f36f 0100 	bfc	r1, #0, #1
    f6ba:	f36f 0141 	bfc	r1, #1, #1
    f6be:	f36f 0182 	bfc	r1, #2, #1
    f6c2:	f36f 01c5 	bfc	r1, #3, #3
    f6c6:	2603      	movs	r6, #3
    f6c8:	f366 1188 	bfi	r1, r6, #6, #3
    f6cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f6d0:	f363 2153 	bfi	r1, r3, #9, #11
    f6d4:	f36f 511f 	bfc	r1, #20, #12
    f6d8:	2300      	movs	r3, #0
    f6da:	4827      	ldr	r0, [pc, #156]	; (f778 <hci_vs_init+0x2c8>)
    f6dc:	f7fc fa42 	bl	bb64 <z_impl_z_log_msg_static_create>
    f6e0:	46ad      	mov	sp, r5
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    f6e2:	f894 8005 	ldrb.w	r8, [r4, #5]
    f6e6:	4640      	mov	r0, r8
    f6e8:	f7fe fee2 	bl	e4b0 <vs_fw_variant>
    f6ec:	f894 e006 	ldrb.w	lr, [r4, #6]
    f6f0:	f8b4 1007 	ldrh.w	r1, [r4, #7]
    f6f4:	f8d4 9009 	ldr.w	r9, [r4, #9]
    f6f8:	466d      	mov	r5, sp
    f6fa:	2301      	movs	r3, #1
    f6fc:	723b      	strb	r3, [r7, #8]
    f6fe:	727e      	strb	r6, [r7, #9]
    f700:	b08e      	sub	sp, #56	; 0x38
    f702:	466c      	mov	r4, sp
    f704:	f114 0210 	adds.w	r2, r4, #16
    f708:	d02c      	beq.n	f764 <hci_vs_init+0x2b4>
    f70a:	f04f 0c22 	mov.w	ip, #34	; 0x22
    f70e:	b14a      	cbz	r2, f724 <hci_vs_init+0x274>
    f710:	4663      	mov	r3, ip
    f712:	f1bc 0f04 	cmp.w	ip, #4
    f716:	dd01      	ble.n	f71c <hci_vs_init+0x26c>
    f718:	4e19      	ldr	r6, [pc, #100]	; (f780 <hci_vs_init+0x2d0>)
    f71a:	6166      	str	r6, [r4, #20]
    f71c:	2b08      	cmp	r3, #8
    f71e:	dd01      	ble.n	f724 <hci_vs_init+0x274>
    f720:	4b13      	ldr	r3, [pc, #76]	; (f770 <hci_vs_init+0x2c0>)
    f722:	61a3      	str	r3, [r4, #24]
    f724:	2301      	movs	r3, #1
    f726:	713b      	strb	r3, [r7, #4]
    f728:	2303      	movs	r3, #3
    f72a:	717b      	strb	r3, [r7, #5]
    f72c:	b3a2      	cbz	r2, f798 <hci_vs_init+0x2e8>
    f72e:	4663      	mov	r3, ip
    f730:	f1bc 0f0c 	cmp.w	ip, #12
    f734:	dd00      	ble.n	f738 <hci_vs_init+0x288>
    f736:	61e0      	str	r0, [r4, #28]
    f738:	2b10      	cmp	r3, #16
    f73a:	dd01      	ble.n	f740 <hci_vs_init+0x290>
    f73c:	f8c4 8020 	str.w	r8, [r4, #32]
    f740:	2b14      	cmp	r3, #20
    f742:	dd01      	ble.n	f748 <hci_vs_init+0x298>
    f744:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
    f748:	2b18      	cmp	r3, #24
    f74a:	dd00      	ble.n	f74e <hci_vs_init+0x29e>
    f74c:	62a1      	str	r1, [r4, #40]	; 0x28
    f74e:	2b1c      	cmp	r3, #28
    f750:	dd01      	ble.n	f756 <hci_vs_init+0x2a6>
    f752:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    f756:	f104 0330 	add.w	r3, r4, #48	; 0x30
    f75a:	2100      	movs	r1, #0
    f75c:	e01a      	b.n	f794 <hci_vs_init+0x2e4>
	LOG_INF("HW Variant: %s (0x%04x)",
    f75e:	f06f 031b 	mvn.w	r3, #27
    f762:	e79c      	b.n	f69e <hci_vs_init+0x1ee>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    f764:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    f768:	e7d1      	b.n	f70e <hci_vs_init+0x25e>
    f76a:	bf00      	nop
    f76c:	0001a7b0 	.word	0x0001a7b0
    f770:	0001abc0 	.word	0x0001abc0
    f774:	0001a788 	.word	0x0001a788
    f778:	00019994 	.word	0x00019994
    f77c:	0001a7d0 	.word	0x0001a7d0
    f780:	0001a7ec 	.word	0x0001a7ec
    f784:	f101 0010 	add.w	r0, r1, #16
    f788:	4438      	add	r0, r7
    f78a:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
    f78e:	f803 0b01 	strb.w	r0, [r3], #1
    f792:	3101      	adds	r1, #1
    f794:	2901      	cmp	r1, #1
    f796:	d9f5      	bls.n	f784 <hci_vs_init+0x2d4>
    f798:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    f79c:	dd62      	ble.n	f864 <hci_vs_init+0x3b4>
    f79e:	2322      	movs	r3, #34	; 0x22
    f7a0:	b142      	cbz	r2, f7b4 <hci_vs_init+0x304>
    f7a2:	2108      	movs	r1, #8
    f7a4:	7239      	strb	r1, [r7, #8]
    f7a6:	2100      	movs	r1, #0
    f7a8:	7279      	strb	r1, [r7, #9]
    f7aa:	72b9      	strb	r1, [r7, #10]
    f7ac:	2101      	movs	r1, #1
    f7ae:	72f9      	strb	r1, [r7, #11]
    f7b0:	68b8      	ldr	r0, [r7, #8]
    f7b2:	6120      	str	r0, [r4, #16]
    f7b4:	2100      	movs	r1, #0
    f7b6:	f36f 0100 	bfc	r1, #0, #1
    f7ba:	f36f 0141 	bfc	r1, #1, #1
    f7be:	f36f 0182 	bfc	r1, #2, #1
    f7c2:	f36f 01c5 	bfc	r1, #3, #3
    f7c6:	2003      	movs	r0, #3
    f7c8:	f360 1188 	bfi	r1, r0, #6, #3
    f7cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    f7d0:	f363 2153 	bfi	r1, r3, #9, #11
    f7d4:	f36f 511f 	bfc	r1, #20, #12
    f7d8:	2300      	movs	r3, #0
    f7da:	4856      	ldr	r0, [pc, #344]	; (f934 <hci_vs_init+0x484>)
    f7dc:	f7fc f9c2 	bl	bb64 <z_impl_z_log_msg_static_create>
    f7e0:	46ad      	mov	sp, r5
	net_buf_unref(rsp);
    f7e2:	68f8      	ldr	r0, [r7, #12]
    f7e4:	f007 fea1 	bl	1752a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f7e8:	f107 020c 	add.w	r2, r7, #12
    f7ec:	2100      	movs	r1, #0
    f7ee:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f7f2:	f7ff fc99 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
    f7f6:	2800      	cmp	r0, #0
    f7f8:	d03d      	beq.n	f876 <hci_vs_init+0x3c6>
		LOG_WRN("Failed to read supported vendor commands");
    f7fa:	466d      	mov	r5, sp
    f7fc:	b088      	sub	sp, #32
    f7fe:	466b      	mov	r3, sp
    f800:	f113 0210 	adds.w	r2, r3, #16
    f804:	d031      	beq.n	f86a <hci_vs_init+0x3ba>
    f806:	210c      	movs	r1, #12
    f808:	b142      	cbz	r2, f81c <hci_vs_init+0x36c>
    f80a:	4608      	mov	r0, r1
    f80c:	2904      	cmp	r1, #4
    f80e:	dd01      	ble.n	f814 <hci_vs_init+0x364>
    f810:	4c49      	ldr	r4, [pc, #292]	; (f938 <hci_vs_init+0x488>)
    f812:	615c      	str	r4, [r3, #20]
    f814:	2808      	cmp	r0, #8
    f816:	dd01      	ble.n	f81c <hci_vs_init+0x36c>
    f818:	4848      	ldr	r0, [pc, #288]	; (f93c <hci_vs_init+0x48c>)
    f81a:	6198      	str	r0, [r3, #24]
    f81c:	290b      	cmp	r1, #11
    f81e:	dd27      	ble.n	f870 <hci_vs_init+0x3c0>
    f820:	240c      	movs	r4, #12
    f822:	b13a      	cbz	r2, f834 <hci_vs_init+0x384>
    f824:	2103      	movs	r1, #3
    f826:	7239      	strb	r1, [r7, #8]
    f828:	2100      	movs	r1, #0
    f82a:	7279      	strb	r1, [r7, #9]
    f82c:	72b9      	strb	r1, [r7, #10]
    f82e:	72f9      	strb	r1, [r7, #11]
    f830:	68b8      	ldr	r0, [r7, #8]
    f832:	6118      	str	r0, [r3, #16]
    f834:	2100      	movs	r1, #0
    f836:	f36f 0100 	bfc	r1, #0, #1
    f83a:	f36f 0141 	bfc	r1, #1, #1
    f83e:	f36f 0182 	bfc	r1, #2, #1
    f842:	f36f 01c5 	bfc	r1, #3, #3
    f846:	2302      	movs	r3, #2
    f848:	f363 1188 	bfi	r1, r3, #6, #3
    f84c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    f850:	f363 2153 	bfi	r1, r3, #9, #11
    f854:	f36f 511f 	bfc	r1, #20, #12
    f858:	2300      	movs	r3, #0
    f85a:	4836      	ldr	r0, [pc, #216]	; (f934 <hci_vs_init+0x484>)
    f85c:	f7fc f982 	bl	bb64 <z_impl_z_log_msg_static_create>
    f860:	46ad      	mov	sp, r5
		return;
    f862:	e699      	b.n	f598 <hci_vs_init+0xe8>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    f864:	f06f 031b 	mvn.w	r3, #27
    f868:	e79a      	b.n	f7a0 <hci_vs_init+0x2f0>
		LOG_WRN("Failed to read supported vendor commands");
    f86a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f86e:	e7cb      	b.n	f808 <hci_vs_init+0x358>
    f870:	f06f 041b 	mvn.w	r4, #27
    f874:	e7d5      	b.n	f822 <hci_vs_init+0x372>
	rp.cmds = (void *)rsp->data;
    f876:	68fb      	ldr	r3, [r7, #12]
    f878:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f87a:	4c31      	ldr	r4, [pc, #196]	; (f940 <hci_vs_init+0x490>)
    f87c:	2202      	movs	r2, #2
    f87e:	3101      	adds	r1, #1
    f880:	4620      	mov	r0, r4
    f882:	f007 fa96 	bl	16db2 <memcpy>
	net_buf_unref(rsp);
    f886:	68f8      	ldr	r0, [r7, #12]
    f888:	f007 fe4f 	bl	1752a <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f88c:	7823      	ldrb	r3, [r4, #0]
    f88e:	f013 0f04 	tst.w	r3, #4
    f892:	f43f ae81 	beq.w	f598 <hci_vs_init+0xe8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f896:	f107 020c 	add.w	r2, r7, #12
    f89a:	2100      	movs	r1, #0
    f89c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f8a0:	f7ff fc42 	bl	f128 <bt_hci_cmd_send_sync>
		if (err) {
    f8a4:	2800      	cmp	r0, #0
    f8a6:	d03a      	beq.n	f91e <hci_vs_init+0x46e>
			LOG_WRN("Failed to read supported vendor features");
    f8a8:	466d      	mov	r5, sp
    f8aa:	b088      	sub	sp, #32
    f8ac:	466b      	mov	r3, sp
    f8ae:	f113 0210 	adds.w	r2, r3, #16
    f8b2:	d02e      	beq.n	f912 <hci_vs_init+0x462>
    f8b4:	210c      	movs	r1, #12
    f8b6:	b142      	cbz	r2, f8ca <hci_vs_init+0x41a>
    f8b8:	4608      	mov	r0, r1
    f8ba:	2904      	cmp	r1, #4
    f8bc:	dd01      	ble.n	f8c2 <hci_vs_init+0x412>
    f8be:	4c21      	ldr	r4, [pc, #132]	; (f944 <hci_vs_init+0x494>)
    f8c0:	615c      	str	r4, [r3, #20]
    f8c2:	2808      	cmp	r0, #8
    f8c4:	dd01      	ble.n	f8ca <hci_vs_init+0x41a>
    f8c6:	481d      	ldr	r0, [pc, #116]	; (f93c <hci_vs_init+0x48c>)
    f8c8:	6198      	str	r0, [r3, #24]
    f8ca:	290b      	cmp	r1, #11
    f8cc:	dd24      	ble.n	f918 <hci_vs_init+0x468>
    f8ce:	240c      	movs	r4, #12
    f8d0:	b13a      	cbz	r2, f8e2 <hci_vs_init+0x432>
    f8d2:	2103      	movs	r1, #3
    f8d4:	7239      	strb	r1, [r7, #8]
    f8d6:	2100      	movs	r1, #0
    f8d8:	7279      	strb	r1, [r7, #9]
    f8da:	72b9      	strb	r1, [r7, #10]
    f8dc:	72f9      	strb	r1, [r7, #11]
    f8de:	68b8      	ldr	r0, [r7, #8]
    f8e0:	6118      	str	r0, [r3, #16]
    f8e2:	2100      	movs	r1, #0
    f8e4:	f36f 0100 	bfc	r1, #0, #1
    f8e8:	f36f 0141 	bfc	r1, #1, #1
    f8ec:	f36f 0182 	bfc	r1, #2, #1
    f8f0:	f36f 01c5 	bfc	r1, #3, #3
    f8f4:	2302      	movs	r3, #2
    f8f6:	f363 1188 	bfi	r1, r3, #6, #3
    f8fa:	f3c4 030a 	ubfx	r3, r4, #0, #11
    f8fe:	f363 2153 	bfi	r1, r3, #9, #11
    f902:	f36f 511f 	bfc	r1, #20, #12
    f906:	2300      	movs	r3, #0
    f908:	480a      	ldr	r0, [pc, #40]	; (f934 <hci_vs_init+0x484>)
    f90a:	f7fc f92b 	bl	bb64 <z_impl_z_log_msg_static_create>
    f90e:	46ad      	mov	sp, r5
			return;
    f910:	e642      	b.n	f598 <hci_vs_init+0xe8>
			LOG_WRN("Failed to read supported vendor features");
    f912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f916:	e7ce      	b.n	f8b6 <hci_vs_init+0x406>
    f918:	f06f 041b 	mvn.w	r4, #27
    f91c:	e7d8      	b.n	f8d0 <hci_vs_init+0x420>
		rp.feat = (void *)rsp->data;
    f91e:	68fb      	ldr	r3, [r7, #12]
    f920:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f922:	2201      	movs	r2, #1
    f924:	4411      	add	r1, r2
    f926:	4808      	ldr	r0, [pc, #32]	; (f948 <hci_vs_init+0x498>)
    f928:	f007 fa43 	bl	16db2 <memcpy>
		net_buf_unref(rsp);
    f92c:	68f8      	ldr	r0, [r7, #12]
    f92e:	f007 fdfc 	bl	1752a <net_buf_unref>
    f932:	e631      	b.n	f598 <hci_vs_init+0xe8>
    f934:	00019994 	.word	0x00019994
    f938:	0001a820 	.word	0x0001a820
    f93c:	0001abc0 	.word	0x0001abc0
    f940:	20000261 	.word	0x20000261
    f944:	0001a850 	.word	0x0001a850
    f948:	20000260 	.word	0x20000260

0000f94c <hci_init>:
{
    f94c:	b508      	push	{r3, lr}
	err = common_init();
    f94e:	f7ff fcab 	bl	f2a8 <common_init>
	if (err) {
    f952:	4603      	mov	r3, r0
    f954:	b108      	cbz	r0, f95a <hci_init+0xe>
}
    f956:	4618      	mov	r0, r3
    f958:	bd08      	pop	{r3, pc}
	err = le_init();
    f95a:	f7ff fcef 	bl	f33c <le_init>
	if (err) {
    f95e:	4603      	mov	r3, r0
    f960:	2800      	cmp	r0, #0
    f962:	d1f8      	bne.n	f956 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f964:	4b0a      	ldr	r3, [pc, #40]	; (f990 <hci_init+0x44>)
    f966:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f96a:	f013 0f20 	tst.w	r3, #32
    f96e:	d104      	bne.n	f97a <hci_init+0x2e>
		err = bt_br_init();
    f970:	f007 fac5 	bl	16efe <bt_br_init>
		if (err) {
    f974:	4603      	mov	r3, r0
    f976:	2800      	cmp	r0, #0
    f978:	d1ed      	bne.n	f956 <hci_init+0xa>
	err = set_event_mask();
    f97a:	f7ff fd7b 	bl	f474 <set_event_mask>
	if (err) {
    f97e:	4603      	mov	r3, r0
    f980:	2800      	cmp	r0, #0
    f982:	d1e8      	bne.n	f956 <hci_init+0xa>
	hci_vs_init();
    f984:	f7ff fd94 	bl	f4b0 <hci_vs_init>
	err = bt_id_init();
    f988:	f000 ffb6 	bl	108f8 <bt_id_init>
    f98c:	4603      	mov	r3, r0
	if (err) {
    f98e:	e7e2      	b.n	f956 <hci_init+0xa>
    f990:	200001a0 	.word	0x200001a0

0000f994 <bt_hci_le_rand>:
{
    f994:	b570      	push	{r4, r5, r6, lr}
    f996:	b082      	sub	sp, #8
    f998:	4606      	mov	r6, r0
    f99a:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    f99c:	4b12      	ldr	r3, [pc, #72]	; (f9e8 <bt_hci_le_rand+0x54>)
    f99e:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    f9a2:	2b00      	cmp	r3, #0
    f9a4:	da1d      	bge.n	f9e2 <bt_hci_le_rand+0x4e>
	while (len > 0) {
    f9a6:	b1c4      	cbz	r4, f9da <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
    f9a8:	4625      	mov	r5, r4
    f9aa:	2c08      	cmp	r4, #8
    f9ac:	bf28      	it	cs
    f9ae:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    f9b0:	aa01      	add	r2, sp, #4
    f9b2:	2100      	movs	r1, #0
    f9b4:	f242 0018 	movw	r0, #8216	; 0x2018
    f9b8:	f7ff fbb6 	bl	f128 <bt_hci_cmd_send_sync>
		if (err) {
    f9bc:	4603      	mov	r3, r0
    f9be:	b968      	cbnz	r0, f9dc <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
    f9c0:	9b01      	ldr	r3, [sp, #4]
    f9c2:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
    f9c4:	462a      	mov	r2, r5
    f9c6:	3101      	adds	r1, #1
    f9c8:	4630      	mov	r0, r6
    f9ca:	f007 f9f2 	bl	16db2 <memcpy>
		net_buf_unref(rsp);
    f9ce:	9801      	ldr	r0, [sp, #4]
    f9d0:	f007 fdab 	bl	1752a <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    f9d4:	442e      	add	r6, r5
		len -= count;
    f9d6:	1b64      	subs	r4, r4, r5
    f9d8:	e7e5      	b.n	f9a6 <bt_hci_le_rand+0x12>
	return 0;
    f9da:	2300      	movs	r3, #0
}
    f9dc:	4618      	mov	r0, r3
    f9de:	b002      	add	sp, #8
    f9e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    f9e2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f9e6:	e7f9      	b.n	f9dc <bt_hci_le_rand+0x48>
    f9e8:	200001a0 	.word	0x200001a0

0000f9ec <bt_send>:
{
    f9ec:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    f9ee:	4b03      	ldr	r3, [pc, #12]	; (f9fc <bt_send+0x10>)
    f9f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    f9f4:	695b      	ldr	r3, [r3, #20]
    f9f6:	4798      	blx	r3
}
    f9f8:	bd08      	pop	{r3, pc}
    f9fa:	bf00      	nop
    f9fc:	200001a0 	.word	0x200001a0

0000fa00 <send_cmd>:
{
    fa00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa02:	b083      	sub	sp, #12
    fa04:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fa06:	2200      	movs	r2, #0
    fa08:	2300      	movs	r3, #0
    fa0a:	4863      	ldr	r0, [pc, #396]	; (fb98 <__kernel_ram_size+0x68>)
    fa0c:	f007 fd57 	bl	174be <net_buf_get>
	BT_ASSERT(buf);
    fa10:	4604      	mov	r4, r0
    fa12:	2800      	cmp	r0, #0
    fa14:	f000 80a6 	beq.w	fb64 <__kernel_ram_size+0x34>
    fa18:	4d60      	ldr	r5, [pc, #384]	; (fb9c <__kernel_ram_size+0x6c>)
    fa1a:	f04f 32ff 	mov.w	r2, #4294967295
    fa1e:	f04f 33ff 	mov.w	r3, #4294967295
    fa22:	4628      	mov	r0, r5
    fa24:	f004 fd42 	bl	144ac <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    fa28:	69ab      	ldr	r3, [r5, #24]
    fa2a:	2b00      	cmp	r3, #0
    fa2c:	d03d      	beq.n	faaa <send_cmd+0xaa>
		LOG_ERR("Uncleared pending sent_cmd");
    fa2e:	466e      	mov	r6, sp
    fa30:	b088      	sub	sp, #32
    fa32:	466b      	mov	r3, sp
    fa34:	f113 0210 	adds.w	r2, r3, #16
    fa38:	f000 80a2 	beq.w	fb80 <__kernel_ram_size+0x50>
    fa3c:	210c      	movs	r1, #12
    fa3e:	b142      	cbz	r2, fa52 <send_cmd+0x52>
    fa40:	4608      	mov	r0, r1
    fa42:	2904      	cmp	r1, #4
    fa44:	dd01      	ble.n	fa4a <send_cmd+0x4a>
    fa46:	4d56      	ldr	r5, [pc, #344]	; (fba0 <__kernel_ram_size+0x70>)
    fa48:	615d      	str	r5, [r3, #20]
    fa4a:	2808      	cmp	r0, #8
    fa4c:	dd01      	ble.n	fa52 <send_cmd+0x52>
    fa4e:	4855      	ldr	r0, [pc, #340]	; (fba4 <__kernel_ram_size+0x74>)
    fa50:	6198      	str	r0, [r3, #24]
    fa52:	290b      	cmp	r1, #11
    fa54:	f340 8097 	ble.w	fb86 <__kernel_ram_size+0x56>
    fa58:	250c      	movs	r5, #12
    fa5a:	b13a      	cbz	r2, fa6c <send_cmd+0x6c>
    fa5c:	2103      	movs	r1, #3
    fa5e:	7139      	strb	r1, [r7, #4]
    fa60:	2100      	movs	r1, #0
    fa62:	7179      	strb	r1, [r7, #5]
    fa64:	71b9      	strb	r1, [r7, #6]
    fa66:	71f9      	strb	r1, [r7, #7]
    fa68:	6878      	ldr	r0, [r7, #4]
    fa6a:	6118      	str	r0, [r3, #16]
    fa6c:	2100      	movs	r1, #0
    fa6e:	f36f 0100 	bfc	r1, #0, #1
    fa72:	f36f 0141 	bfc	r1, #1, #1
    fa76:	f36f 0182 	bfc	r1, #2, #1
    fa7a:	f36f 01c5 	bfc	r1, #3, #3
    fa7e:	2301      	movs	r3, #1
    fa80:	f363 1188 	bfi	r1, r3, #6, #3
    fa84:	f3c5 050a 	ubfx	r5, r5, #0, #11
    fa88:	f365 2153 	bfi	r1, r5, #9, #11
    fa8c:	f36f 511f 	bfc	r1, #20, #12
    fa90:	2300      	movs	r3, #0
    fa92:	4845      	ldr	r0, [pc, #276]	; (fba8 <__kernel_ram_size+0x78>)
    fa94:	f7fc f866 	bl	bb64 <z_impl_z_log_msg_static_create>
    fa98:	46b5      	mov	sp, r6
		net_buf_unref(bt_dev.sent_cmd);
    fa9a:	4d44      	ldr	r5, [pc, #272]	; (fbac <__kernel_ram_size+0x7c>)
    fa9c:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
    faa0:	f007 fd43 	bl	1752a <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    faa4:	2300      	movs	r3, #0
    faa6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    faaa:	4620      	mov	r0, r4
    faac:	f007 fd60 	bl	17570 <net_buf_ref>
    fab0:	4b3e      	ldr	r3, [pc, #248]	; (fbac <__kernel_ram_size+0x7c>)
    fab2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
    fab6:	4620      	mov	r0, r4
    fab8:	f7ff ff98 	bl	f9ec <bt_send>
	if (err) {
    fabc:	4605      	mov	r5, r0
    fabe:	2800      	cmp	r0, #0
    fac0:	d04d      	beq.n	fb5e <__kernel_ram_size+0x2e>
		LOG_ERR("Unable to send to driver (err %d)", err);
    fac2:	466e      	mov	r6, sp
    fac4:	b088      	sub	sp, #32
    fac6:	466b      	mov	r3, sp
    fac8:	f113 0210 	adds.w	r2, r3, #16
    facc:	d05e      	beq.n	fb8c <__kernel_ram_size+0x5c>
    face:	2110      	movs	r1, #16
    fad0:	b17a      	cbz	r2, faf2 <send_cmd+0xf2>
    fad2:	4608      	mov	r0, r1
    fad4:	2904      	cmp	r1, #4
    fad6:	dd03      	ble.n	fae0 <send_cmd+0xe0>
    fad8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; fbb0 <__kernel_ram_size+0x80>
    fadc:	f8c3 c014 	str.w	ip, [r3, #20]
    fae0:	2808      	cmp	r0, #8
    fae2:	dd03      	ble.n	faec <send_cmd+0xec>
    fae4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; fba4 <__kernel_ram_size+0x74>
    fae8:	f8c3 c018 	str.w	ip, [r3, #24]
    faec:	280c      	cmp	r0, #12
    faee:	dd00      	ble.n	faf2 <send_cmd+0xf2>
    faf0:	61dd      	str	r5, [r3, #28]
    faf2:	290f      	cmp	r1, #15
    faf4:	dd4d      	ble.n	fb92 <__kernel_ram_size+0x62>
    faf6:	2510      	movs	r5, #16
    faf8:	b13a      	cbz	r2, fb0a <send_cmd+0x10a>
    fafa:	2104      	movs	r1, #4
    fafc:	7139      	strb	r1, [r7, #4]
    fafe:	2100      	movs	r1, #0
    fb00:	7179      	strb	r1, [r7, #5]
    fb02:	71b9      	strb	r1, [r7, #6]
    fb04:	71f9      	strb	r1, [r7, #7]
    fb06:	6878      	ldr	r0, [r7, #4]
    fb08:	6118      	str	r0, [r3, #16]
    fb0a:	2100      	movs	r1, #0
    fb0c:	f36f 0100 	bfc	r1, #0, #1
    fb10:	f36f 0141 	bfc	r1, #1, #1
    fb14:	f36f 0182 	bfc	r1, #2, #1
    fb18:	f36f 01c5 	bfc	r1, #3, #3
    fb1c:	2301      	movs	r3, #1
    fb1e:	f363 1188 	bfi	r1, r3, #6, #3
    fb22:	f3c5 050a 	ubfx	r5, r5, #0, #11
    fb26:	f365 2153 	bfi	r1, r5, #9, #11
    fb2a:	f36f 511f 	bfc	r1, #20, #12
    fb2e:	2300      	movs	r3, #0
    fb30:	481d      	ldr	r0, [pc, #116]	; (fba8 <__kernel_ram_size+0x78>)
    fb32:	f7fc f817 	bl	bb64 <z_impl_z_log_msg_static_create>
    fb36:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    fb38:	4818      	ldr	r0, [pc, #96]	; (fb9c <__kernel_ram_size+0x6c>)
    fb3a:	f004 fc8f 	bl	1445c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fb3e:	4620      	mov	r0, r4
    fb40:	f007 fc13 	bl	1736a <net_buf_id>
    fb44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    fb48:	4b1a      	ldr	r3, [pc, #104]	; (fbb4 <__kernel_ram_size+0x84>)
    fb4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fb4e:	4622      	mov	r2, r4
    fb50:	211f      	movs	r1, #31
    fb52:	8858      	ldrh	r0, [r3, #2]
    fb54:	f7fe fd5a 	bl	e60c <hci_cmd_done>
		net_buf_unref(buf);
    fb58:	4620      	mov	r0, r4
    fb5a:	f007 fce6 	bl	1752a <net_buf_unref>
}
    fb5e:	370c      	adds	r7, #12
    fb60:	46bd      	mov	sp, r7
    fb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf);
    fb64:	f640 235a 	movw	r3, #2650	; 0xa5a
    fb68:	4a13      	ldr	r2, [pc, #76]	; (fbb8 <__kernel_ram_size+0x88>)
    fb6a:	4914      	ldr	r1, [pc, #80]	; (fbbc <__kernel_ram_size+0x8c>)
    fb6c:	4814      	ldr	r0, [pc, #80]	; (fbc0 <__kernel_ram_size+0x90>)
    fb6e:	f006 fb9f 	bl	162b0 <assert_print>
    fb72:	4040      	eors	r0, r0
    fb74:	f380 8811 	msr	BASEPRI, r0
    fb78:	f04f 0003 	mov.w	r0, #3
    fb7c:	df02      	svc	2
    fb7e:	e74b      	b.n	fa18 <send_cmd+0x18>
		LOG_ERR("Uncleared pending sent_cmd");
    fb80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fb84:	e75b      	b.n	fa3e <send_cmd+0x3e>
    fb86:	f06f 051b 	mvn.w	r5, #27
    fb8a:	e766      	b.n	fa5a <send_cmd+0x5a>
		LOG_ERR("Unable to send to driver (err %d)", err);
    fb8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fb90:	e79e      	b.n	fad0 <send_cmd+0xd0>
    fb92:	f06f 051b 	mvn.w	r5, #27
    fb96:	e7af      	b.n	faf8 <send_cmd+0xf8>
    fb98:	200002ac 	.word	0x200002ac
    fb9c:	20000288 	.word	0x20000288
    fba0:	0001a8a8 	.word	0x0001a8a8
    fba4:	0001a9c4 	.word	0x0001a9c4
    fba8:	00019994 	.word	0x00019994
    fbac:	200001a0 	.word	0x200001a0
    fbb0:	0001a880 	.word	0x0001a880
    fbb4:	20001f9c 	.word	0x20001f9c
    fbb8:	0001a58c 	.word	0x0001a58c
    fbbc:	0001ae80 	.word	0x0001ae80
    fbc0:	0001a5dc 	.word	0x0001a5dc

0000fbc4 <process_events>:
{
    fbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbc8:	b082      	sub	sp, #8
    fbca:	af00      	add	r7, sp, #0
    fbcc:	4604      	mov	r4, r0
    fbce:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
    fbd0:	e03e      	b.n	fc50 <process_events+0x8c>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    fbd2:	46e8      	mov	r8, sp
    fbd4:	b088      	sub	sp, #32
    fbd6:	4669      	mov	r1, sp
    fbd8:	f111 0210 	adds.w	r2, r1, #16
    fbdc:	d046      	beq.n	fc6c <process_events+0xa8>
    fbde:	2010      	movs	r0, #16
    fbe0:	b18a      	cbz	r2, fc06 <process_events+0x42>
    fbe2:	4684      	mov	ip, r0
    fbe4:	2804      	cmp	r0, #4
    fbe6:	dd03      	ble.n	fbf0 <process_events+0x2c>
    fbe8:	f8df e094 	ldr.w	lr, [pc, #148]	; fc80 <process_events+0xbc>
    fbec:	f8c1 e014 	str.w	lr, [r1, #20]
    fbf0:	f1bc 0f08 	cmp.w	ip, #8
    fbf4:	dd03      	ble.n	fbfe <process_events+0x3a>
    fbf6:	f8df e08c 	ldr.w	lr, [pc, #140]	; fc84 <process_events+0xc0>
    fbfa:	f8c1 e018 	str.w	lr, [r1, #24]
    fbfe:	f1bc 0f0c 	cmp.w	ip, #12
    fc02:	dd00      	ble.n	fc06 <process_events+0x42>
    fc04:	61cb      	str	r3, [r1, #28]
    fc06:	280f      	cmp	r0, #15
    fc08:	dd33      	ble.n	fc72 <process_events+0xae>
    fc0a:	2310      	movs	r3, #16
    fc0c:	b13a      	cbz	r2, fc1e <process_events+0x5a>
    fc0e:	2004      	movs	r0, #4
    fc10:	7138      	strb	r0, [r7, #4]
    fc12:	2000      	movs	r0, #0
    fc14:	7178      	strb	r0, [r7, #5]
    fc16:	71b8      	strb	r0, [r7, #6]
    fc18:	71f8      	strb	r0, [r7, #7]
    fc1a:	6878      	ldr	r0, [r7, #4]
    fc1c:	6108      	str	r0, [r1, #16]
    fc1e:	f36f 0600 	bfc	r6, #0, #1
    fc22:	f36f 0641 	bfc	r6, #1, #1
    fc26:	f36f 0682 	bfc	r6, #2, #1
    fc2a:	f36f 06c5 	bfc	r6, #3, #3
    fc2e:	2102      	movs	r1, #2
    fc30:	f361 1688 	bfi	r6, r1, #6, #3
    fc34:	f3c3 030a 	ubfx	r3, r3, #0, #11
    fc38:	f363 2653 	bfi	r6, r3, #9, #11
    fc3c:	f36f 561f 	bfc	r6, #20, #12
    fc40:	2300      	movs	r3, #0
    fc42:	4631      	mov	r1, r6
    fc44:	4810      	ldr	r0, [pc, #64]	; (fc88 <process_events+0xc4>)
    fc46:	f7fb ff8d 	bl	bb64 <z_impl_z_log_msg_static_create>
    fc4a:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
    fc4c:	3414      	adds	r4, #20
    fc4e:	3d01      	subs	r5, #1
    fc50:	b195      	cbz	r5, fc78 <process_events+0xb4>
		switch (ev->state) {
    fc52:	68e3      	ldr	r3, [r4, #12]
    fc54:	f3c3 3386 	ubfx	r3, r3, #14, #7
    fc58:	2b02      	cmp	r3, #2
    fc5a:	d9f7      	bls.n	fc4c <process_events+0x88>
    fc5c:	2b04      	cmp	r3, #4
    fc5e:	d1b8      	bne.n	fbd2 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
    fc60:	7b23      	ldrb	r3, [r4, #12]
    fc62:	2b00      	cmp	r3, #0
    fc64:	d1f2      	bne.n	fc4c <process_events+0x88>
				send_cmd();
    fc66:	f7ff fecb 	bl	fa00 <send_cmd>
    fc6a:	e7ef      	b.n	fc4c <process_events+0x88>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    fc6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fc70:	e7b6      	b.n	fbe0 <process_events+0x1c>
    fc72:	f06f 031b 	mvn.w	r3, #27
    fc76:	e7c9      	b.n	fc0c <process_events+0x48>
}
    fc78:	3708      	adds	r7, #8
    fc7a:	46bd      	mov	sp, r7
    fc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc80:	0001a8c8 	.word	0x0001a8c8
    fc84:	0001a9d0 	.word	0x0001a9d0
    fc88:	00019994 	.word	0x00019994

0000fc8c <hci_tx_thread>:
{
    fc8c:	b508      	push	{r3, lr}
    fc8e:	e012      	b.n	fcb6 <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
    fc90:	f640 23c8 	movw	r3, #2760	; 0xac8
    fc94:	4a0f      	ldr	r2, [pc, #60]	; (fcd4 <hci_tx_thread+0x48>)
    fc96:	4910      	ldr	r1, [pc, #64]	; (fcd8 <hci_tx_thread+0x4c>)
    fc98:	4810      	ldr	r0, [pc, #64]	; (fcdc <hci_tx_thread+0x50>)
    fc9a:	f006 fb09 	bl	162b0 <assert_print>
    fc9e:	4040      	eors	r0, r0
    fca0:	f380 8811 	msr	BASEPRI, r0
    fca4:	f04f 0003 	mov.w	r0, #3
    fca8:	df02      	svc	2
		process_events(events, ev_count);
    fcaa:	2101      	movs	r1, #1
    fcac:	480c      	ldr	r0, [pc, #48]	; (fce0 <hci_tx_thread+0x54>)
    fcae:	f7ff ff89 	bl	fbc4 <process_events>
	z_impl_k_yield();
    fcb2:	f005 f83b 	bl	14d2c <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    fcb6:	480a      	ldr	r0, [pc, #40]	; (fce0 <hci_tx_thread+0x54>)
    fcb8:	68c3      	ldr	r3, [r0, #12]
    fcba:	f36f 3394 	bfc	r3, #14, #7
    fcbe:	60c3      	str	r3, [r0, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    fcc0:	f04f 32ff 	mov.w	r2, #4294967295
    fcc4:	f04f 33ff 	mov.w	r3, #4294967295
    fcc8:	2101      	movs	r1, #1
    fcca:	f005 fb2d 	bl	15328 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fcce:	2800      	cmp	r0, #0
    fcd0:	d1de      	bne.n	fc90 <hci_tx_thread+0x4>
    fcd2:	e7ea      	b.n	fcaa <hci_tx_thread+0x1e>
    fcd4:	0001a58c 	.word	0x0001a58c
    fcd8:	0001a708 	.word	0x0001a708
    fcdc:	0001a5dc 	.word	0x0001a5dc
    fce0:	2000030c 	.word	0x2000030c

0000fce4 <hci_event_prio>:
{
    fce4:	b570      	push	{r4, r5, r6, lr}
    fce6:	b082      	sub	sp, #8
    fce8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    fcea:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    fcee:	4628      	mov	r0, r5
    fcf0:	f007 fc66 	bl	175c0 <net_buf_simple_headroom>
    fcf4:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    fcf8:	8a23      	ldrh	r3, [r4, #16]
    fcfa:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fcfe:	2b01      	cmp	r3, #1
    fd00:	d923      	bls.n	fd4a <hci_event_prio+0x66>
	return net_buf_simple_pull_mem(&buf->b, len);
    fd02:	2102      	movs	r1, #2
    fd04:	4628      	mov	r0, r5
    fd06:	f007 fc53 	bl	175b0 <net_buf_simple_pull_mem>
    fd0a:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd0c:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    fd0e:	2b05      	cmp	r3, #5
    fd10:	d02b      	beq.n	fd6a <hci_event_prio+0x86>
    fd12:	d32c      	bcc.n	fd6e <hci_event_prio+0x8a>
    fd14:	3b0e      	subs	r3, #14
    fd16:	b2db      	uxtb	r3, r3
    fd18:	2b01      	cmp	r3, #1
    fd1a:	d824      	bhi.n	fd66 <hci_event_prio+0x82>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    fd1c:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd1e:	f016 0f01 	tst.w	r6, #1
    fd22:	d026      	beq.n	fd72 <hci_event_prio+0x8e>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    fd24:	2302      	movs	r3, #2
    fd26:	4a1c      	ldr	r2, [pc, #112]	; (fd98 <hci_event_prio+0xb4>)
    fd28:	4621      	mov	r1, r4
    fd2a:	7828      	ldrb	r0, [r5, #0]
    fd2c:	f7fe fdf2 	bl	e914 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fd30:	f016 0f02 	tst.w	r6, #2
    fd34:	d02b      	beq.n	fd8e <hci_event_prio+0xaa>
	buf->data = buf->__buf + state->offset;
    fd36:	6963      	ldr	r3, [r4, #20]
    fd38:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fd3c:	4413      	add	r3, r2
    fd3e:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
    fd40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fd44:	8223      	strh	r3, [r4, #16]
}
    fd46:	b002      	add	sp, #8
    fd48:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fd4a:	f640 636f 	movw	r3, #3695	; 0xe6f
    fd4e:	4a13      	ldr	r2, [pc, #76]	; (fd9c <hci_event_prio+0xb8>)
    fd50:	4913      	ldr	r1, [pc, #76]	; (fda0 <hci_event_prio+0xbc>)
    fd52:	4814      	ldr	r0, [pc, #80]	; (fda4 <hci_event_prio+0xc0>)
    fd54:	f006 faac 	bl	162b0 <assert_print>
    fd58:	4040      	eors	r0, r0
    fd5a:	f380 8811 	msr	BASEPRI, r0
    fd5e:	f04f 0003 	mov.w	r0, #3
    fd62:	df02      	svc	2
    fd64:	e7cd      	b.n	fd02 <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
    fd66:	2602      	movs	r6, #2
    fd68:	e7d9      	b.n	fd1e <hci_event_prio+0x3a>
	switch (evt) {
    fd6a:	2603      	movs	r6, #3
    fd6c:	e7d7      	b.n	fd1e <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
    fd6e:	2602      	movs	r6, #2
    fd70:	e7d5      	b.n	fd1e <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd72:	f640 6373 	movw	r3, #3699	; 0xe73
    fd76:	4a09      	ldr	r2, [pc, #36]	; (fd9c <hci_event_prio+0xb8>)
    fd78:	490b      	ldr	r1, [pc, #44]	; (fda8 <hci_event_prio+0xc4>)
    fd7a:	480a      	ldr	r0, [pc, #40]	; (fda4 <hci_event_prio+0xc0>)
    fd7c:	f006 fa98 	bl	162b0 <assert_print>
    fd80:	4040      	eors	r0, r0
    fd82:	f380 8811 	msr	BASEPRI, r0
    fd86:	f04f 0003 	mov.w	r0, #3
    fd8a:	df02      	svc	2
    fd8c:	e7ca      	b.n	fd24 <hci_event_prio+0x40>
		net_buf_unref(buf);
    fd8e:	4620      	mov	r0, r4
    fd90:	f007 fbcb 	bl	1752a <net_buf_unref>
}
    fd94:	e7d7      	b.n	fd46 <hci_event_prio+0x62>
    fd96:	bf00      	nop
    fd98:	0001abd4 	.word	0x0001abd4
    fd9c:	0001a58c 	.word	0x0001a58c
    fda0:	0001a5c0 	.word	0x0001a5c0
    fda4:	0001a5dc 	.word	0x0001a5dc
    fda8:	0001a8f0 	.word	0x0001a8f0

0000fdac <bt_recv>:
{
    fdac:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdae:	b083      	sub	sp, #12
    fdb0:	af00      	add	r7, sp, #0
    fdb2:	4605      	mov	r5, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fdb4:	7e04      	ldrb	r4, [r0, #24]
	switch (bt_buf_get_type(buf)) {
    fdb6:	2c01      	cmp	r4, #1
    fdb8:	d121      	bne.n	fdfe <bt_recv+0x52>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    fdba:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fdbc:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
    fdbe:	2b05      	cmp	r3, #5
    fdc0:	d010      	beq.n	fde4 <bt_recv+0x38>
    fdc2:	d311      	bcc.n	fde8 <bt_recv+0x3c>
    fdc4:	3b0e      	subs	r3, #14
    fdc6:	b2db      	uxtb	r3, r3
    fdc8:	2b01      	cmp	r3, #1
    fdca:	d809      	bhi.n	fde0 <bt_recv+0x34>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fdcc:	f014 0f01 	tst.w	r4, #1
    fdd0:	d10c      	bne.n	fdec <bt_recv+0x40>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fdd2:	f014 0f02 	tst.w	r4, #2
    fdd6:	d10d      	bne.n	fdf4 <bt_recv+0x48>
		return 0;
    fdd8:	2000      	movs	r0, #0
}
    fdda:	370c      	adds	r7, #12
    fddc:	46bd      	mov	sp, r7
    fdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV;
    fde0:	2402      	movs	r4, #2
    fde2:	e7f3      	b.n	fdcc <bt_recv+0x20>
	switch (evt) {
    fde4:	2403      	movs	r4, #3
    fde6:	e7f1      	b.n	fdcc <bt_recv+0x20>
		return BT_HCI_EVT_FLAG_RECV;
    fde8:	2402      	movs	r4, #2
    fdea:	e7ef      	b.n	fdcc <bt_recv+0x20>
			hci_event_prio(buf);
    fdec:	4628      	mov	r0, r5
    fdee:	f7ff ff79 	bl	fce4 <hci_event_prio>
    fdf2:	e7ee      	b.n	fdd2 <bt_recv+0x26>
			rx_queue_put(buf);
    fdf4:	4628      	mov	r0, r5
    fdf6:	f7fe fe67 	bl	eac8 <rx_queue_put>
		return 0;
    fdfa:	2000      	movs	r0, #0
    fdfc:	e7ed      	b.n	fdda <bt_recv+0x2e>
    fdfe:	4623      	mov	r3, r4
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    fe00:	466c      	mov	r4, sp
    fe02:	b088      	sub	sp, #32
    fe04:	4669      	mov	r1, sp
    fe06:	f111 0210 	adds.w	r2, r1, #16
    fe0a:	d038      	beq.n	fe7e <bt_recv+0xd2>
    fe0c:	2010      	movs	r0, #16
    fe0e:	b16a      	cbz	r2, fe2c <bt_recv+0x80>
    fe10:	4684      	mov	ip, r0
    fe12:	2804      	cmp	r0, #4
    fe14:	dd01      	ble.n	fe1a <bt_recv+0x6e>
    fe16:	4e1d      	ldr	r6, [pc, #116]	; (fe8c <bt_recv+0xe0>)
    fe18:	614e      	str	r6, [r1, #20]
    fe1a:	f1bc 0f08 	cmp.w	ip, #8
    fe1e:	dd01      	ble.n	fe24 <bt_recv+0x78>
    fe20:	4e1b      	ldr	r6, [pc, #108]	; (fe90 <bt_recv+0xe4>)
    fe22:	618e      	str	r6, [r1, #24]
    fe24:	f1bc 0f0c 	cmp.w	ip, #12
    fe28:	dd00      	ble.n	fe2c <bt_recv+0x80>
    fe2a:	61cb      	str	r3, [r1, #28]
    fe2c:	280f      	cmp	r0, #15
    fe2e:	dd29      	ble.n	fe84 <bt_recv+0xd8>
    fe30:	2310      	movs	r3, #16
    fe32:	b13a      	cbz	r2, fe44 <bt_recv+0x98>
    fe34:	2004      	movs	r0, #4
    fe36:	7138      	strb	r0, [r7, #4]
    fe38:	2000      	movs	r0, #0
    fe3a:	7178      	strb	r0, [r7, #5]
    fe3c:	71b8      	strb	r0, [r7, #6]
    fe3e:	71f8      	strb	r0, [r7, #7]
    fe40:	6878      	ldr	r0, [r7, #4]
    fe42:	6108      	str	r0, [r1, #16]
    fe44:	2100      	movs	r1, #0
    fe46:	f36f 0100 	bfc	r1, #0, #1
    fe4a:	f36f 0141 	bfc	r1, #1, #1
    fe4e:	f36f 0182 	bfc	r1, #2, #1
    fe52:	f36f 01c5 	bfc	r1, #3, #3
    fe56:	2001      	movs	r0, #1
    fe58:	f360 1188 	bfi	r1, r0, #6, #3
    fe5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    fe60:	f363 2153 	bfi	r1, r3, #9, #11
    fe64:	f36f 511f 	bfc	r1, #20, #12
    fe68:	2300      	movs	r3, #0
    fe6a:	480a      	ldr	r0, [pc, #40]	; (fe94 <bt_recv+0xe8>)
    fe6c:	f7fb fe7a 	bl	bb64 <z_impl_z_log_msg_static_create>
    fe70:	46a5      	mov	sp, r4
		net_buf_unref(buf);
    fe72:	4628      	mov	r0, r5
    fe74:	f007 fb59 	bl	1752a <net_buf_unref>
		return -EINVAL;
    fe78:	f06f 0015 	mvn.w	r0, #21
    fe7c:	e7ad      	b.n	fdda <bt_recv+0x2e>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    fe7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fe82:	e7c4      	b.n	fe0e <bt_recv+0x62>
    fe84:	f06f 031b 	mvn.w	r3, #27
    fe88:	e7d3      	b.n	fe32 <bt_recv+0x86>
    fe8a:	bf00      	nop
    fe8c:	0001a90c 	.word	0x0001a90c
    fe90:	0001ab3c 	.word	0x0001ab3c
    fe94:	00019994 	.word	0x00019994

0000fe98 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    fe98:	4b0a      	ldr	r3, [pc, #40]	; (fec4 <bt_hci_driver_register+0x2c>)
    fe9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    fe9e:	b943      	cbnz	r3, feb2 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    fea0:	68c3      	ldr	r3, [r0, #12]
    fea2:	b14b      	cbz	r3, feb8 <bt_hci_driver_register+0x20>
    fea4:	6943      	ldr	r3, [r0, #20]
    fea6:	b153      	cbz	r3, febe <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    fea8:	4b06      	ldr	r3, [pc, #24]	; (fec4 <bt_hci_driver_register+0x2c>)
    feaa:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	return 0;
    feae:	2000      	movs	r0, #0
    feb0:	4770      	bx	lr
		return -EALREADY;
    feb2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    feb6:	4770      	bx	lr
		return -EINVAL;
    feb8:	f06f 0015 	mvn.w	r0, #21
    febc:	4770      	bx	lr
    febe:	f06f 0015 	mvn.w	r0, #21
}
    fec2:	4770      	bx	lr
    fec4:	200001a0 	.word	0x200001a0

0000fec8 <bt_finalize_init>:
{
    fec8:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    feca:	4b08      	ldr	r3, [pc, #32]	; (feec <bt_finalize_init+0x24>)
    fecc:	f3bf 8f5b 	dmb	ish
    fed0:	e853 1f00 	ldrex	r1, [r3]
    fed4:	f041 0104 	orr.w	r1, r1, #4
    fed8:	e843 1200 	strex	r2, r1, [r3]
    fedc:	2a00      	cmp	r2, #0
    fede:	d1f7      	bne.n	fed0 <bt_finalize_init+0x8>
    fee0:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
    fee4:	f7fe fefc 	bl	ece0 <bt_dev_show_info>
}
    fee8:	bd08      	pop	{r3, pc}
    feea:	bf00      	nop
    feec:	20000274 	.word	0x20000274

0000fef0 <init_work>:
{
    fef0:	b508      	push	{r3, lr}
	err = bt_init();
    fef2:	f007 f846 	bl	16f82 <bt_init>
	if (ready_cb) {
    fef6:	4b02      	ldr	r3, [pc, #8]	; (ff00 <init_work+0x10>)
    fef8:	681b      	ldr	r3, [r3, #0]
    fefa:	b103      	cbz	r3, fefe <init_work+0xe>
		ready_cb(err);
    fefc:	4798      	blx	r3
}
    fefe:	bd08      	pop	{r3, pc}
    ff00:	20001fb4 	.word	0x20001fb4

0000ff04 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ff04:	f3bf 8f5b 	dmb	ish
    ff08:	4b03      	ldr	r3, [pc, #12]	; (ff18 <bt_is_ready+0x14>)
    ff0a:	6818      	ldr	r0, [r3, #0]
    ff0c:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ff10:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    ff14:	4770      	bx	lr
    ff16:	bf00      	nop
    ff18:	20000274 	.word	0x20000274

0000ff1c <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
    ff1c:	b570      	push	{r4, r5, r6, lr}
    ff1e:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
    ff20:	f006 ff17 	bl	16d52 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    ff24:	281e      	cmp	r0, #30
    ff26:	d813      	bhi.n	ff50 <bt_set_name+0x34>
    ff28:	4604      	mov	r4, r0
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
    ff2a:	4629      	mov	r1, r5
    ff2c:	480a      	ldr	r0, [pc, #40]	; (ff58 <bt_set_name+0x3c>)
    ff2e:	f006 ff23 	bl	16d78 <strcmp>
    ff32:	b900      	cbnz	r0, ff36 <bt_set_name+0x1a>

	return 0;
#else
	return -ENOMEM;
#endif
}
    ff34:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    ff36:	4e08      	ldr	r6, [pc, #32]	; (ff58 <bt_set_name+0x3c>)
    ff38:	4622      	mov	r2, r4
    ff3a:	4629      	mov	r1, r5
    ff3c:	4630      	mov	r0, r6
    ff3e:	f006 feee 	bl	16d1e <strncpy>
	bt_dev.name[len] = '\0';
    ff42:	f5a6 7694 	sub.w	r6, r6, #296	; 0x128
    ff46:	4426      	add	r6, r4
    ff48:	2000      	movs	r0, #0
    ff4a:	f886 0128 	strb.w	r0, [r6, #296]	; 0x128
	return 0;
    ff4e:	e7f1      	b.n	ff34 <bt_set_name+0x18>
		return -ENOMEM;
    ff50:	f06f 000b 	mvn.w	r0, #11
    ff54:	e7ee      	b.n	ff34 <bt_set_name+0x18>
    ff56:	bf00      	nop
    ff58:	200002c8 	.word	0x200002c8

0000ff5c <bt_enable>:
{
    ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff60:	b08a      	sub	sp, #40	; 0x28
    ff62:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    ff64:	4b9b      	ldr	r3, [pc, #620]	; (101d4 <CONFIG_PM_SRAM_SIZE+0x1d4>)
    ff66:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	f000 80a9 	beq.w	100c2 <CONFIG_PM_SRAM_SIZE+0xc2>
    ff70:	4605      	mov	r5, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ff72:	4b99      	ldr	r3, [pc, #612]	; (101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>)
    ff74:	f3bf 8f5b 	dmb	ish
    ff78:	e853 2f00 	ldrex	r2, [r3]
    ff7c:	f022 0202 	bic.w	r2, r2, #2
    ff80:	e843 2100 	strex	r1, r2, [r3]
    ff84:	2900      	cmp	r1, #0
    ff86:	d1f7      	bne.n	ff78 <bt_enable+0x1c>
    ff88:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ff8c:	f3bf 8f5b 	dmb	ish
    ff90:	e853 2f00 	ldrex	r2, [r3]
    ff94:	f042 0101 	orr.w	r1, r2, #1
    ff98:	e843 1000 	strex	r0, r1, [r3]
    ff9c:	2800      	cmp	r0, #0
    ff9e:	d1f7      	bne.n	ff90 <bt_enable+0x34>
    ffa0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ffa4:	f012 0f01 	tst.w	r2, #1
    ffa8:	f040 8110 	bne.w	101cc <CONFIG_PM_SRAM_SIZE+0x1cc>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
    ffac:	488b      	ldr	r0, [pc, #556]	; (101dc <CONFIG_PM_SRAM_SIZE+0x1dc>)
    ffae:	f7ff ffb5 	bl	ff1c <bt_set_name>
		if (err) {
    ffb2:	4604      	mov	r4, r0
    ffb4:	2800      	cmp	r0, #0
    ffb6:	d03c      	beq.n	10032 <CONFIG_PM_SRAM_SIZE+0x32>
			LOG_WRN("Failed to set device name (%d)", err);
    ffb8:	466e      	mov	r6, sp
    ffba:	b088      	sub	sp, #32
    ffbc:	4633      	mov	r3, r6
    ffbe:	f116 0210 	adds.w	r2, r6, #16
    ffc2:	f000 80bb 	beq.w	1013c <CONFIG_PM_SRAM_SIZE+0x13c>
    ffc6:	2110      	movs	r1, #16
    ffc8:	b17a      	cbz	r2, ffea <bt_enable+0x8e>
    ffca:	4608      	mov	r0, r1
    ffcc:	2904      	cmp	r1, #4
    ffce:	dd03      	ble.n	ffd8 <bt_enable+0x7c>
    ffd0:	f8df c20c 	ldr.w	ip, [pc, #524]	; 101e0 <CONFIG_PM_SRAM_SIZE+0x1e0>
    ffd4:	f8c3 c014 	str.w	ip, [r3, #20]
    ffd8:	2808      	cmp	r0, #8
    ffda:	dd03      	ble.n	ffe4 <bt_enable+0x88>
    ffdc:	f8df c204 	ldr.w	ip, [pc, #516]	; 101e4 <CONFIG_PM_SRAM_SIZE+0x1e4>
    ffe0:	f8c3 c018 	str.w	ip, [r3, #24]
    ffe4:	280c      	cmp	r0, #12
    ffe6:	dd00      	ble.n	ffea <bt_enable+0x8e>
    ffe8:	61dc      	str	r4, [r3, #28]
    ffea:	290f      	cmp	r1, #15
    ffec:	f340 80a9 	ble.w	10142 <CONFIG_PM_SRAM_SIZE+0x142>
    fff0:	2410      	movs	r4, #16
    fff2:	b13a      	cbz	r2, 10004 <CONFIG_PM_SRAM_SIZE+0x4>
    fff4:	2104      	movs	r1, #4
    fff6:	7139      	strb	r1, [r7, #4]
    fff8:	2100      	movs	r1, #0
    fffa:	7179      	strb	r1, [r7, #5]
    fffc:	71b9      	strb	r1, [r7, #6]
    fffe:	71f9      	strb	r1, [r7, #7]
   10000:	6878      	ldr	r0, [r7, #4]
   10002:	6118      	str	r0, [r3, #16]
   10004:	2100      	movs	r1, #0
   10006:	f36f 0100 	bfc	r1, #0, #1
   1000a:	f36f 0141 	bfc	r1, #1, #1
   1000e:	f36f 0182 	bfc	r1, #2, #1
   10012:	f36f 01c5 	bfc	r1, #3, #3
   10016:	2302      	movs	r3, #2
   10018:	f363 1188 	bfi	r1, r3, #6, #3
   1001c:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10020:	f363 2153 	bfi	r1, r3, #9, #11
   10024:	f36f 511f 	bfc	r1, #20, #12
   10028:	2300      	movs	r3, #0
   1002a:	486f      	ldr	r0, [pc, #444]	; (101e8 <CONFIG_PM_SRAM_SIZE+0x1e8>)
   1002c:	f7fb fd9a 	bl	bb64 <z_impl_z_log_msg_static_create>
   10030:	46b5      	mov	sp, r6
	ready_cb = cb;
   10032:	4b6e      	ldr	r3, [pc, #440]	; (101ec <CONFIG_PM_SRAM_SIZE+0x1ec>)
   10034:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   10036:	4e6e      	ldr	r6, [pc, #440]	; (101f0 <CONFIG_PM_SRAM_SIZE+0x1f0>)
   10038:	2201      	movs	r2, #1
   1003a:	4611      	mov	r1, r2
   1003c:	4630      	mov	r0, r6
   1003e:	f008 fdf7 	bl	18c30 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   10042:	f106 0024 	add.w	r0, r6, #36	; 0x24
   10046:	f008 fdd0 	bl	18bea <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1004a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 101f4 <CONFIG_PM_SRAM_SIZE+0x1f4>
   1004e:	2200      	movs	r2, #0
   10050:	2300      	movs	r3, #0
   10052:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10056:	2400      	movs	r4, #0
   10058:	9404      	str	r4, [sp, #16]
   1005a:	f06f 0308 	mvn.w	r3, #8
   1005e:	9303      	str	r3, [sp, #12]
   10060:	9402      	str	r4, [sp, #8]
   10062:	9401      	str	r4, [sp, #4]
   10064:	9400      	str	r4, [sp, #0]
   10066:	4b64      	ldr	r3, [pc, #400]	; (101f8 <CONFIG_PM_SRAM_SIZE+0x1f8>)
   10068:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1006c:	4963      	ldr	r1, [pc, #396]	; (101fc <CONFIG_PM_SRAM_SIZE+0x1fc>)
   1006e:	4640      	mov	r0, r8
   10070:	f008 fcea 	bl	18a48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10074:	4962      	ldr	r1, [pc, #392]	; (10200 <CONFIG_PM_SRAM_SIZE+0x200>)
   10076:	4640      	mov	r0, r8
   10078:	f004 f804 	bl	14084 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1007c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 10204 <CONFIG_PM_SRAM_SIZE+0x204>
   10080:	4640      	mov	r0, r8
   10082:	f008 fed5 	bl	18e30 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   10086:	9400      	str	r4, [sp, #0]
   10088:	f06f 0307 	mvn.w	r3, #7
   1008c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10090:	495d      	ldr	r1, [pc, #372]	; (10208 <CONFIG_PM_SRAM_SIZE+0x208>)
   10092:	4640      	mov	r0, r8
   10094:	f004 fb3a 	bl	1470c <k_work_queue_start>
   10098:	495c      	ldr	r1, [pc, #368]	; (1020c <CONFIG_PM_SRAM_SIZE+0x20c>)
   1009a:	4640      	mov	r0, r8
   1009c:	f003 fff2 	bl	14084 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   100a0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   100a2:	68db      	ldr	r3, [r3, #12]
   100a4:	4798      	blx	r3
	if (err) {
   100a6:	4604      	mov	r4, r0
   100a8:	2800      	cmp	r0, #0
   100aa:	d14d      	bne.n	10148 <CONFIG_PM_SRAM_SIZE+0x148>
	if (!cb) {
   100ac:	2d00      	cmp	r5, #0
   100ae:	f000 8089 	beq.w	101c4 <CONFIG_PM_SRAM_SIZE+0x1c4>
	k_work_submit(&bt_dev.init);
   100b2:	4857      	ldr	r0, [pc, #348]	; (10210 <CONFIG_PM_SRAM_SIZE+0x210>)
   100b4:	f004 fb22 	bl	146fc <k_work_submit>
}
   100b8:	4620      	mov	r0, r4
   100ba:	3708      	adds	r7, #8
   100bc:	46bd      	mov	sp, r7
   100be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   100c2:	466d      	mov	r5, sp
   100c4:	b088      	sub	sp, #32
   100c6:	462b      	mov	r3, r5
   100c8:	f115 0210 	adds.w	r2, r5, #16
   100cc:	d030      	beq.n	10130 <CONFIG_PM_SRAM_SIZE+0x130>
   100ce:	210c      	movs	r1, #12
   100d0:	b142      	cbz	r2, 100e4 <CONFIG_PM_SRAM_SIZE+0xe4>
   100d2:	4608      	mov	r0, r1
   100d4:	2904      	cmp	r1, #4
   100d6:	dd01      	ble.n	100dc <CONFIG_PM_SRAM_SIZE+0xdc>
   100d8:	4c4e      	ldr	r4, [pc, #312]	; (10214 <CONFIG_PM_SRAM_SIZE+0x214>)
   100da:	615c      	str	r4, [r3, #20]
   100dc:	2808      	cmp	r0, #8
   100de:	dd01      	ble.n	100e4 <CONFIG_PM_SRAM_SIZE+0xe4>
   100e0:	4840      	ldr	r0, [pc, #256]	; (101e4 <CONFIG_PM_SRAM_SIZE+0x1e4>)
   100e2:	6198      	str	r0, [r3, #24]
   100e4:	290b      	cmp	r1, #11
   100e6:	dd26      	ble.n	10136 <CONFIG_PM_SRAM_SIZE+0x136>
   100e8:	240c      	movs	r4, #12
   100ea:	b13a      	cbz	r2, 100fc <CONFIG_PM_SRAM_SIZE+0xfc>
   100ec:	2103      	movs	r1, #3
   100ee:	7139      	strb	r1, [r7, #4]
   100f0:	2100      	movs	r1, #0
   100f2:	7179      	strb	r1, [r7, #5]
   100f4:	71b9      	strb	r1, [r7, #6]
   100f6:	71f9      	strb	r1, [r7, #7]
   100f8:	6878      	ldr	r0, [r7, #4]
   100fa:	6118      	str	r0, [r3, #16]
   100fc:	2100      	movs	r1, #0
   100fe:	f36f 0100 	bfc	r1, #0, #1
   10102:	f36f 0141 	bfc	r1, #1, #1
   10106:	f36f 0182 	bfc	r1, #2, #1
   1010a:	f36f 01c5 	bfc	r1, #3, #3
   1010e:	2301      	movs	r3, #1
   10110:	f363 1188 	bfi	r1, r3, #6, #3
   10114:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10118:	f363 2153 	bfi	r1, r3, #9, #11
   1011c:	f36f 511f 	bfc	r1, #20, #12
   10120:	2300      	movs	r3, #0
   10122:	4831      	ldr	r0, [pc, #196]	; (101e8 <CONFIG_PM_SRAM_SIZE+0x1e8>)
   10124:	f7fb fd1e 	bl	bb64 <z_impl_z_log_msg_static_create>
   10128:	46ad      	mov	sp, r5
		return -ENODEV;
   1012a:	f06f 0412 	mvn.w	r4, #18
   1012e:	e7c3      	b.n	100b8 <CONFIG_PM_SRAM_SIZE+0xb8>
		LOG_ERR("No HCI driver registered");
   10130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10134:	e7cc      	b.n	100d0 <CONFIG_PM_SRAM_SIZE+0xd0>
   10136:	f06f 041b 	mvn.w	r4, #27
   1013a:	e7d6      	b.n	100ea <CONFIG_PM_SRAM_SIZE+0xea>
			LOG_WRN("Failed to set device name (%d)", err);
   1013c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10140:	e742      	b.n	ffc8 <bt_enable+0x6c>
   10142:	f06f 041b 	mvn.w	r4, #27
   10146:	e754      	b.n	fff2 <bt_enable+0x96>
		LOG_ERR("HCI driver open failed (%d)", err);
   10148:	466e      	mov	r6, sp
   1014a:	b088      	sub	sp, #32
   1014c:	4633      	mov	r3, r6
   1014e:	f116 0210 	adds.w	r2, r6, #16
   10152:	d031      	beq.n	101b8 <CONFIG_PM_SRAM_SIZE+0x1b8>
   10154:	2110      	movs	r1, #16
   10156:	b15a      	cbz	r2, 10170 <CONFIG_PM_SRAM_SIZE+0x170>
   10158:	4608      	mov	r0, r1
   1015a:	2904      	cmp	r1, #4
   1015c:	dd01      	ble.n	10162 <CONFIG_PM_SRAM_SIZE+0x162>
   1015e:	4d2e      	ldr	r5, [pc, #184]	; (10218 <CONFIG_PM_SRAM_SIZE+0x218>)
   10160:	615d      	str	r5, [r3, #20]
   10162:	2808      	cmp	r0, #8
   10164:	dd01      	ble.n	1016a <CONFIG_PM_SRAM_SIZE+0x16a>
   10166:	4d1f      	ldr	r5, [pc, #124]	; (101e4 <CONFIG_PM_SRAM_SIZE+0x1e4>)
   10168:	619d      	str	r5, [r3, #24]
   1016a:	280c      	cmp	r0, #12
   1016c:	dd00      	ble.n	10170 <CONFIG_PM_SRAM_SIZE+0x170>
   1016e:	61dc      	str	r4, [r3, #28]
   10170:	290f      	cmp	r1, #15
   10172:	dd24      	ble.n	101be <CONFIG_PM_SRAM_SIZE+0x1be>
   10174:	2510      	movs	r5, #16
   10176:	b13a      	cbz	r2, 10188 <CONFIG_PM_SRAM_SIZE+0x188>
   10178:	2104      	movs	r1, #4
   1017a:	7139      	strb	r1, [r7, #4]
   1017c:	2100      	movs	r1, #0
   1017e:	7179      	strb	r1, [r7, #5]
   10180:	71b9      	strb	r1, [r7, #6]
   10182:	71f9      	strb	r1, [r7, #7]
   10184:	6878      	ldr	r0, [r7, #4]
   10186:	6118      	str	r0, [r3, #16]
   10188:	2100      	movs	r1, #0
   1018a:	f36f 0100 	bfc	r1, #0, #1
   1018e:	f36f 0141 	bfc	r1, #1, #1
   10192:	f36f 0182 	bfc	r1, #2, #1
   10196:	f36f 01c5 	bfc	r1, #3, #3
   1019a:	2301      	movs	r3, #1
   1019c:	f363 1188 	bfi	r1, r3, #6, #3
   101a0:	f3c5 030a 	ubfx	r3, r5, #0, #11
   101a4:	f363 2153 	bfi	r1, r3, #9, #11
   101a8:	f36f 511f 	bfc	r1, #20, #12
   101ac:	2300      	movs	r3, #0
   101ae:	480e      	ldr	r0, [pc, #56]	; (101e8 <CONFIG_PM_SRAM_SIZE+0x1e8>)
   101b0:	f7fb fcd8 	bl	bb64 <z_impl_z_log_msg_static_create>
   101b4:	46b5      	mov	sp, r6
		return err;
   101b6:	e77f      	b.n	100b8 <CONFIG_PM_SRAM_SIZE+0xb8>
		LOG_ERR("HCI driver open failed (%d)", err);
   101b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   101bc:	e7cb      	b.n	10156 <CONFIG_PM_SRAM_SIZE+0x156>
   101be:	f06f 051b 	mvn.w	r5, #27
   101c2:	e7d8      	b.n	10176 <CONFIG_PM_SRAM_SIZE+0x176>
		return bt_init();
   101c4:	f006 fedd 	bl	16f82 <bt_init>
   101c8:	4604      	mov	r4, r0
   101ca:	e775      	b.n	100b8 <CONFIG_PM_SRAM_SIZE+0xb8>
		return -EALREADY;
   101cc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   101d0:	e772      	b.n	100b8 <CONFIG_PM_SRAM_SIZE+0xb8>
   101d2:	bf00      	nop
   101d4:	200001a0 	.word	0x200001a0
   101d8:	20000274 	.word	0x20000274
   101dc:	0001a968 	.word	0x0001a968
   101e0:	0001a970 	.word	0x0001a970
   101e4:	0001a9e0 	.word	0x0001a9e0
   101e8:	00019994 	.word	0x00019994
   101ec:	20001fb4 	.word	0x20001fb4
   101f0:	20000288 	.word	0x20000288
   101f4:	200016d8 	.word	0x200016d8
   101f8:	0000fc8d 	.word	0x0000fc8d
   101fc:	20002e00 	.word	0x20002e00
   10200:	0001a994 	.word	0x0001a994
   10204:	20001790 	.word	0x20001790
   10208:	20003440 	.word	0x20003440
   1020c:	0001a99c 	.word	0x0001a99c
   10210:	20000264 	.word	0x20000264
   10214:	0001a924 	.word	0x0001a924
   10218:	0001a9a4 	.word	0x0001a9a4

0001021c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1021c:	4800      	ldr	r0, [pc, #0]	; (10220 <bt_get_name+0x4>)
   1021e:	4770      	bx	lr
   10220:	200002c8 	.word	0x200002c8

00010224 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   10224:	b570      	push	{r4, r5, r6, lr}
   10226:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   10228:	2400      	movs	r4, #0
   1022a:	e001      	b.n	10230 <id_find+0xc>
   1022c:	3401      	adds	r4, #1
   1022e:	b2e4      	uxtb	r4, r4
   10230:	4b09      	ldr	r3, [pc, #36]	; (10258 <id_find+0x34>)
   10232:	79db      	ldrb	r3, [r3, #7]
   10234:	42a3      	cmp	r3, r4
   10236:	d90b      	bls.n	10250 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   10238:	4626      	mov	r6, r4
   1023a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1023e:	2207      	movs	r2, #7
   10240:	4b05      	ldr	r3, [pc, #20]	; (10258 <id_find+0x34>)
   10242:	4419      	add	r1, r3
   10244:	4628      	mov	r0, r5
   10246:	f006 fda2 	bl	16d8e <memcmp>
   1024a:	2800      	cmp	r0, #0
   1024c:	d1ee      	bne.n	1022c <id_find+0x8>
   1024e:	e001      	b.n	10254 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   10250:	f06f 0601 	mvn.w	r6, #1
}
   10254:	4630      	mov	r0, r6
   10256:	bd70      	pop	{r4, r5, r6, pc}
   10258:	200001a0 	.word	0x200001a0

0001025c <set_random_address>:
{
   1025c:	b570      	push	{r4, r5, r6, lr}
   1025e:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   10260:	2206      	movs	r2, #6
   10262:	4914      	ldr	r1, [pc, #80]	; (102b4 <set_random_address+0x58>)
   10264:	f006 fd93 	bl	16d8e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   10268:	4605      	mov	r5, r0
   1026a:	b908      	cbnz	r0, 10270 <set_random_address+0x14>
}
   1026c:	4628      	mov	r0, r5
   1026e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   10270:	2106      	movs	r1, #6
   10272:	f242 0005 	movw	r0, #8197	; 0x2005
   10276:	f7fe ff19 	bl	f0ac <bt_hci_cmd_create>
	if (!buf) {
   1027a:	4605      	mov	r5, r0
   1027c:	b1b8      	cbz	r0, 102ae <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1027e:	2206      	movs	r2, #6
   10280:	4621      	mov	r1, r4
   10282:	300c      	adds	r0, #12
   10284:	f007 f982 	bl	1758c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   10288:	2200      	movs	r2, #0
   1028a:	4629      	mov	r1, r5
   1028c:	f242 0005 	movw	r0, #8197	; 0x2005
   10290:	f7fe ff4a 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
   10294:	4605      	mov	r5, r0
   10296:	2800      	cmp	r0, #0
   10298:	d1e8      	bne.n	1026c <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1029a:	4e06      	ldr	r6, [pc, #24]	; (102b4 <set_random_address+0x58>)
   1029c:	2206      	movs	r2, #6
   1029e:	4621      	mov	r1, r4
   102a0:	4630      	mov	r0, r6
   102a2:	f006 fd86 	bl	16db2 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   102a6:	2301      	movs	r3, #1
   102a8:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   102ac:	e7de      	b.n	1026c <set_random_address+0x10>
		return -ENOBUFS;
   102ae:	f06f 0568 	mvn.w	r5, #104	; 0x68
   102b2:	e7db      	b.n	1026c <set_random_address+0x10>
   102b4:	20000209 	.word	0x20000209

000102b8 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   102b8:	b570      	push	{r4, r5, r6, lr}
   102ba:	b082      	sub	sp, #8
   102bc:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   102be:	460e      	mov	r6, r1
   102c0:	b129      	cbz	r1, 102ce <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   102c2:	2207      	movs	r2, #7
   102c4:	4915      	ldr	r1, [pc, #84]	; (1031c <id_create+0x64>)
   102c6:	4630      	mov	r0, r6
   102c8:	f006 fd61 	bl	16d8e <memcmp>
   102cc:	b9d8      	cbnz	r0, 10306 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   102ce:	4668      	mov	r0, sp
   102d0:	f006 fddc 	bl	16e8c <bt_addr_le_create_static>
			if (err) {
   102d4:	4604      	mov	r4, r0
   102d6:	b998      	cbnz	r0, 10300 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   102d8:	4668      	mov	r0, sp
   102da:	f7ff ffa3 	bl	10224 <id_find>
   102de:	2800      	cmp	r0, #0
   102e0:	daf5      	bge.n	102ce <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   102e2:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   102e6:	4b0e      	ldr	r3, [pc, #56]	; (10320 <id_create+0x68>)
   102e8:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   102ea:	2207      	movs	r2, #7
   102ec:	4669      	mov	r1, sp
   102ee:	4628      	mov	r0, r5
   102f0:	f006 fd5f 	bl	16db2 <memcpy>

		if (addr) {
   102f4:	b126      	cbz	r6, 10300 <id_create+0x48>
   102f6:	2207      	movs	r2, #7
   102f8:	4629      	mov	r1, r5
   102fa:	4630      	mov	r0, r6
   102fc:	f006 fd59 	bl	16db2 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   10300:	4620      	mov	r0, r4
   10302:	b002      	add	sp, #8
   10304:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   10306:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1030a:	2207      	movs	r2, #7
   1030c:	4631      	mov	r1, r6
   1030e:	4804      	ldr	r0, [pc, #16]	; (10320 <id_create+0x68>)
   10310:	4428      	add	r0, r5
   10312:	f006 fd4e 	bl	16db2 <memcpy>
	return 0;
   10316:	2400      	movs	r4, #0
}
   10318:	e7f2      	b.n	10300 <id_create+0x48>
   1031a:	bf00      	nop
   1031c:	0001a3f0 	.word	0x0001a3f0
   10320:	200001a0 	.word	0x200001a0

00010324 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   10324:	b5f0      	push	{r4, r5, r6, r7, lr}
   10326:	b085      	sub	sp, #20
   10328:	af00      	add	r7, sp, #0
   1032a:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1032c:	4605      	mov	r5, r0
   1032e:	b188      	cbz	r0, 10354 <bt_id_create+0x30>
	return memcmp(a, b, sizeof(*a));
   10330:	2207      	movs	r2, #7
   10332:	4943      	ldr	r1, [pc, #268]	; (10440 <bt_id_create+0x11c>)
   10334:	f006 fd2b 	bl	16d8e <memcmp>
   10338:	b160      	cbz	r0, 10354 <bt_id_create+0x30>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1033a:	782b      	ldrb	r3, [r5, #0]
   1033c:	2b01      	cmp	r3, #1
   1033e:	d136      	bne.n	103ae <bt_id_create+0x8a>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   10340:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10346:	2bc0      	cmp	r3, #192	; 0xc0
   10348:	d131      	bne.n	103ae <bt_id_create+0x8a>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   1034a:	4628      	mov	r0, r5
   1034c:	f7ff ff6a 	bl	10224 <id_find>
   10350:	2800      	cmp	r0, #0
   10352:	da6c      	bge.n	1042e <bt_id_create+0x10a>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10354:	2c00      	cmp	r4, #0
   10356:	d16d      	bne.n	10434 <bt_id_create+0x110>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10358:	4b3a      	ldr	r3, [pc, #232]	; (10444 <bt_id_create+0x120>)
   1035a:	79db      	ldrb	r3, [r3, #7]
   1035c:	2b01      	cmp	r3, #1
   1035e:	d06c      	beq.n	1043a <bt_id_create+0x116>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10360:	f3bf 8f5b 	dmb	ish
   10364:	4b38      	ldr	r3, [pc, #224]	; (10448 <bt_id_create+0x124>)
   10366:	681b      	ldr	r3, [r3, #0]
   10368:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1036c:	f013 0f01 	tst.w	r3, #1
   10370:	d10d      	bne.n	1038e <bt_id_create+0x6a>
		uint8_t zero_irk[16] = { 0 };
   10372:	2300      	movs	r3, #0
   10374:	603b      	str	r3, [r7, #0]
   10376:	607b      	str	r3, [r7, #4]
   10378:	60bb      	str	r3, [r7, #8]
   1037a:	60fb      	str	r3, [r7, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1037c:	2d00      	cmp	r5, #0
   1037e:	d053      	beq.n	10428 <bt_id_create+0x104>
   10380:	2207      	movs	r2, #7
   10382:	492f      	ldr	r1, [pc, #188]	; (10440 <bt_id_create+0x11c>)
   10384:	4628      	mov	r0, r5
   10386:	f006 fd02 	bl	16d8e <memcmp>
   1038a:	2800      	cmp	r0, #0
   1038c:	d04c      	beq.n	10428 <bt_id_create+0x104>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   1038e:	4b2d      	ldr	r3, [pc, #180]	; (10444 <bt_id_create+0x120>)
   10390:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   10392:	4622      	mov	r2, r4
   10394:	4629      	mov	r1, r5
   10396:	4630      	mov	r0, r6
   10398:	f7ff ff8e 	bl	102b8 <id_create>
	if (err) {
   1039c:	b920      	cbnz	r0, 103a8 <bt_id_create+0x84>
		return err;
	} else {
		bt_dev.id_count++;
   1039e:	4a29      	ldr	r2, [pc, #164]	; (10444 <bt_id_create+0x120>)
   103a0:	79d3      	ldrb	r3, [r2, #7]
   103a2:	3301      	adds	r3, #1
   103a4:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   103a6:	4630      	mov	r0, r6
}
   103a8:	3714      	adds	r7, #20
   103aa:	46bd      	mov	sp, r7
   103ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Only static random identity address supported");
   103ae:	466d      	mov	r5, sp
   103b0:	b088      	sub	sp, #32
   103b2:	466b      	mov	r3, sp
   103b4:	f113 0210 	adds.w	r2, r3, #16
   103b8:	d030      	beq.n	1041c <bt_id_create+0xf8>
   103ba:	210c      	movs	r1, #12
   103bc:	b142      	cbz	r2, 103d0 <bt_id_create+0xac>
   103be:	4608      	mov	r0, r1
   103c0:	2904      	cmp	r1, #4
   103c2:	dd01      	ble.n	103c8 <bt_id_create+0xa4>
   103c4:	4c21      	ldr	r4, [pc, #132]	; (1044c <bt_id_create+0x128>)
   103c6:	615c      	str	r4, [r3, #20]
   103c8:	2808      	cmp	r0, #8
   103ca:	dd01      	ble.n	103d0 <bt_id_create+0xac>
   103cc:	4820      	ldr	r0, [pc, #128]	; (10450 <bt_id_create+0x12c>)
   103ce:	6198      	str	r0, [r3, #24]
   103d0:	290b      	cmp	r1, #11
   103d2:	dd26      	ble.n	10422 <bt_id_create+0xfe>
   103d4:	240c      	movs	r4, #12
   103d6:	b13a      	cbz	r2, 103e8 <bt_id_create+0xc4>
   103d8:	2103      	movs	r1, #3
   103da:	7039      	strb	r1, [r7, #0]
   103dc:	2100      	movs	r1, #0
   103de:	7079      	strb	r1, [r7, #1]
   103e0:	70b9      	strb	r1, [r7, #2]
   103e2:	70f9      	strb	r1, [r7, #3]
   103e4:	6838      	ldr	r0, [r7, #0]
   103e6:	6118      	str	r0, [r3, #16]
   103e8:	2100      	movs	r1, #0
   103ea:	f36f 0100 	bfc	r1, #0, #1
   103ee:	f36f 0141 	bfc	r1, #1, #1
   103f2:	f36f 0182 	bfc	r1, #2, #1
   103f6:	f36f 01c5 	bfc	r1, #3, #3
   103fa:	2301      	movs	r3, #1
   103fc:	f363 1188 	bfi	r1, r3, #6, #3
   10400:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10404:	f363 2153 	bfi	r1, r3, #9, #11
   10408:	f36f 511f 	bfc	r1, #20, #12
   1040c:	2300      	movs	r3, #0
   1040e:	4811      	ldr	r0, [pc, #68]	; (10454 <bt_id_create+0x130>)
   10410:	f7fb fba8 	bl	bb64 <z_impl_z_log_msg_static_create>
   10414:	46ad      	mov	sp, r5
			return -EINVAL;
   10416:	f06f 0015 	mvn.w	r0, #21
   1041a:	e7c5      	b.n	103a8 <bt_id_create+0x84>
			LOG_ERR("Only static random identity address supported");
   1041c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10420:	e7cc      	b.n	103bc <bt_id_create+0x98>
   10422:	f06f 041b 	mvn.w	r4, #27
   10426:	e7d6      	b.n	103d6 <bt_id_create+0xb2>
			return -EINVAL;
   10428:	f06f 0015 	mvn.w	r0, #21
   1042c:	e7bc      	b.n	103a8 <bt_id_create+0x84>
			return -EALREADY;
   1042e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10432:	e7b9      	b.n	103a8 <bt_id_create+0x84>
		return -EINVAL;
   10434:	f06f 0015 	mvn.w	r0, #21
   10438:	e7b6      	b.n	103a8 <bt_id_create+0x84>
		return -ENOMEM;
   1043a:	f06f 000b 	mvn.w	r0, #11
   1043e:	e7b3      	b.n	103a8 <bt_id_create+0x84>
   10440:	0001a3f0 	.word	0x0001a3f0
   10444:	200001a0 	.word	0x200001a0
   10448:	20000274 	.word	0x20000274
   1044c:	0001ac0c 	.word	0x0001ac0c
   10450:	0001ad88 	.word	0x0001ad88
   10454:	0001999c 	.word	0x0001999c

00010458 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   10458:	b5b0      	push	{r4, r5, r7, lr}
   1045a:	b082      	sub	sp, #8
   1045c:	af00      	add	r7, sp, #0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1045e:	2800      	cmp	r0, #0
   10460:	d040      	beq.n	104e4 <bt_id_read_public_addr+0x8c>
   10462:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10464:	1d3a      	adds	r2, r7, #4
   10466:	2100      	movs	r1, #0
   10468:	f241 0009 	movw	r0, #4105	; 0x1009
   1046c:	f7fe fe5c 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
   10470:	2800      	cmp	r0, #0
   10472:	d079      	beq.n	10568 <bt_id_read_public_addr+0x110>
		LOG_WRN("Failed to read public address");
   10474:	466d      	mov	r5, sp
   10476:	b088      	sub	sp, #32
   10478:	466b      	mov	r3, sp
   1047a:	f113 0210 	adds.w	r2, r3, #16
   1047e:	d06d      	beq.n	1055c <bt_id_read_public_addr+0x104>
   10480:	210c      	movs	r1, #12
   10482:	b142      	cbz	r2, 10496 <bt_id_read_public_addr+0x3e>
   10484:	4608      	mov	r0, r1
   10486:	2904      	cmp	r1, #4
   10488:	dd01      	ble.n	1048e <bt_id_read_public_addr+0x36>
   1048a:	4c47      	ldr	r4, [pc, #284]	; (105a8 <bt_id_read_public_addr+0x150>)
   1048c:	615c      	str	r4, [r3, #20]
   1048e:	2808      	cmp	r0, #8
   10490:	dd01      	ble.n	10496 <bt_id_read_public_addr+0x3e>
   10492:	4846      	ldr	r0, [pc, #280]	; (105ac <bt_id_read_public_addr+0x154>)
   10494:	6198      	str	r0, [r3, #24]
   10496:	290b      	cmp	r1, #11
   10498:	dd63      	ble.n	10562 <bt_id_read_public_addr+0x10a>
   1049a:	240c      	movs	r4, #12
   1049c:	b13a      	cbz	r2, 104ae <bt_id_read_public_addr+0x56>
   1049e:	2103      	movs	r1, #3
   104a0:	7039      	strb	r1, [r7, #0]
   104a2:	2100      	movs	r1, #0
   104a4:	7079      	strb	r1, [r7, #1]
   104a6:	70b9      	strb	r1, [r7, #2]
   104a8:	70f9      	strb	r1, [r7, #3]
   104aa:	6838      	ldr	r0, [r7, #0]
   104ac:	6118      	str	r0, [r3, #16]
   104ae:	2100      	movs	r1, #0
   104b0:	f36f 0100 	bfc	r1, #0, #1
   104b4:	f36f 0141 	bfc	r1, #1, #1
   104b8:	f36f 0182 	bfc	r1, #2, #1
   104bc:	f36f 01c5 	bfc	r1, #3, #3
   104c0:	2302      	movs	r3, #2
   104c2:	f363 1188 	bfi	r1, r3, #6, #3
   104c6:	f3c4 030a 	ubfx	r3, r4, #0, #11
   104ca:	f363 2153 	bfi	r1, r3, #9, #11
   104ce:	f36f 511f 	bfc	r1, #20, #12
   104d2:	2300      	movs	r3, #0
   104d4:	4836      	ldr	r0, [pc, #216]	; (105b0 <bt_id_read_public_addr+0x158>)
   104d6:	f7fb fb45 	bl	bb64 <z_impl_z_log_msg_static_create>
   104da:	46ad      	mov	sp, r5
		return 0U;
   104dc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   104de:	3708      	adds	r7, #8
   104e0:	46bd      	mov	sp, r7
   104e2:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Invalid input parameters");
   104e4:	466d      	mov	r5, sp
   104e6:	b088      	sub	sp, #32
   104e8:	466b      	mov	r3, sp
   104ea:	f113 0210 	adds.w	r2, r3, #16
   104ee:	d02f      	beq.n	10550 <bt_id_read_public_addr+0xf8>
   104f0:	210c      	movs	r1, #12
   104f2:	b142      	cbz	r2, 10506 <bt_id_read_public_addr+0xae>
   104f4:	4608      	mov	r0, r1
   104f6:	2904      	cmp	r1, #4
   104f8:	dd01      	ble.n	104fe <bt_id_read_public_addr+0xa6>
   104fa:	4c2e      	ldr	r4, [pc, #184]	; (105b4 <bt_id_read_public_addr+0x15c>)
   104fc:	615c      	str	r4, [r3, #20]
   104fe:	2808      	cmp	r0, #8
   10500:	dd01      	ble.n	10506 <bt_id_read_public_addr+0xae>
   10502:	482a      	ldr	r0, [pc, #168]	; (105ac <bt_id_read_public_addr+0x154>)
   10504:	6198      	str	r0, [r3, #24]
   10506:	290b      	cmp	r1, #11
   10508:	dd25      	ble.n	10556 <bt_id_read_public_addr+0xfe>
   1050a:	240c      	movs	r4, #12
   1050c:	b13a      	cbz	r2, 1051e <bt_id_read_public_addr+0xc6>
   1050e:	2103      	movs	r1, #3
   10510:	7039      	strb	r1, [r7, #0]
   10512:	2100      	movs	r1, #0
   10514:	7079      	strb	r1, [r7, #1]
   10516:	70b9      	strb	r1, [r7, #2]
   10518:	70f9      	strb	r1, [r7, #3]
   1051a:	6838      	ldr	r0, [r7, #0]
   1051c:	6118      	str	r0, [r3, #16]
   1051e:	2100      	movs	r1, #0
   10520:	f36f 0100 	bfc	r1, #0, #1
   10524:	f36f 0141 	bfc	r1, #1, #1
   10528:	f36f 0182 	bfc	r1, #2, #1
   1052c:	f36f 01c5 	bfc	r1, #3, #3
   10530:	2302      	movs	r3, #2
   10532:	f363 1188 	bfi	r1, r3, #6, #3
   10536:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1053a:	f363 2153 	bfi	r1, r3, #9, #11
   1053e:	f36f 511f 	bfc	r1, #20, #12
   10542:	2300      	movs	r3, #0
   10544:	481a      	ldr	r0, [pc, #104]	; (105b0 <bt_id_read_public_addr+0x158>)
   10546:	f7fb fb0d 	bl	bb64 <z_impl_z_log_msg_static_create>
   1054a:	46ad      	mov	sp, r5
		return 0U;
   1054c:	2000      	movs	r0, #0
   1054e:	e7c6      	b.n	104de <bt_id_read_public_addr+0x86>
		LOG_WRN("Invalid input parameters");
   10550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10554:	e7cd      	b.n	104f2 <bt_id_read_public_addr+0x9a>
   10556:	f06f 041b 	mvn.w	r4, #27
   1055a:	e7d7      	b.n	1050c <bt_id_read_public_addr+0xb4>
		LOG_WRN("Failed to read public address");
   1055c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10560:	e78f      	b.n	10482 <bt_id_read_public_addr+0x2a>
   10562:	f06f 041b 	mvn.w	r4, #27
   10566:	e799      	b.n	1049c <bt_id_read_public_addr+0x44>
	rp = (void *)rsp->data;
   10568:	687b      	ldr	r3, [r7, #4]
   1056a:	68dc      	ldr	r4, [r3, #12]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1056c:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1056e:	2206      	movs	r2, #6
   10570:	4911      	ldr	r1, [pc, #68]	; (105b8 <bt_id_read_public_addr+0x160>)
   10572:	4620      	mov	r0, r4
   10574:	f006 fc0b 	bl	16d8e <memcmp>
   10578:	b128      	cbz	r0, 10586 <bt_id_read_public_addr+0x12e>
   1057a:	2206      	movs	r2, #6
   1057c:	490f      	ldr	r1, [pc, #60]	; (105bc <bt_id_read_public_addr+0x164>)
   1057e:	4620      	mov	r0, r4
   10580:	f006 fc05 	bl	16d8e <memcmp>
   10584:	b920      	cbnz	r0, 10590 <bt_id_read_public_addr+0x138>
		net_buf_unref(rsp);
   10586:	6878      	ldr	r0, [r7, #4]
   10588:	f006 ffcf 	bl	1752a <net_buf_unref>
		return 0U;
   1058c:	2000      	movs	r0, #0
   1058e:	e7a6      	b.n	104de <bt_id_read_public_addr+0x86>
	memcpy(dst, src, sizeof(*dst));
   10590:	2206      	movs	r2, #6
   10592:	4621      	mov	r1, r4
   10594:	1c68      	adds	r0, r5, #1
   10596:	f006 fc0c 	bl	16db2 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   1059a:	2300      	movs	r3, #0
   1059c:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   1059e:	6878      	ldr	r0, [r7, #4]
   105a0:	f006 ffc3 	bl	1752a <net_buf_unref>
	return 1U;
   105a4:	2001      	movs	r0, #1
   105a6:	e79a      	b.n	104de <bt_id_read_public_addr+0x86>
   105a8:	0001ac60 	.word	0x0001ac60
   105ac:	0001ad70 	.word	0x0001ad70
   105b0:	0001999c 	.word	0x0001999c
   105b4:	0001ac40 	.word	0x0001ac40
   105b8:	0001a400 	.word	0x0001a400
   105bc:	0001a3f8 	.word	0x0001a3f8

000105c0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   105c0:	b500      	push	{lr}
   105c2:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   105c4:	4668      	mov	r0, sp
   105c6:	f7ff ff47 	bl	10458 <bt_id_read_public_addr>
   105ca:	4b06      	ldr	r3, [pc, #24]	; (105e4 <bt_setup_public_id_addr+0x24>)
   105cc:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   105ce:	b918      	cbnz	r0, 105d8 <bt_setup_public_id_addr+0x18>
		return 0;
   105d0:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   105d2:	b003      	add	sp, #12
   105d4:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   105d8:	2200      	movs	r2, #0
   105da:	4669      	mov	r1, sp
   105dc:	4610      	mov	r0, r2
   105de:	f7ff fe6b 	bl	102b8 <id_create>
   105e2:	e7f6      	b.n	105d2 <bt_setup_public_id_addr+0x12>
   105e4:	200001a0 	.word	0x200001a0

000105e8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   105e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   105ec:	b083      	sub	sp, #12
   105ee:	af00      	add	r7, sp, #0
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   105f0:	4b6f      	ldr	r3, [pc, #444]	; (107b0 <bt_read_static_addr+0x1c8>)
   105f2:	f893 50c2 	ldrb.w	r5, [r3, #194]	; 0xc2
   105f6:	f015 0501 	ands.w	r5, r5, #1
   105fa:	d13e      	bne.n	1067a <bt_read_static_addr+0x92>
		LOG_WRN("Read Static Addresses command not available");
   105fc:	466e      	mov	r6, sp
   105fe:	b088      	sub	sp, #32
   10600:	466b      	mov	r3, sp
   10602:	f113 0210 	adds.w	r2, r3, #16
   10606:	d032      	beq.n	1066e <bt_read_static_addr+0x86>
   10608:	210c      	movs	r1, #12
   1060a:	b142      	cbz	r2, 1061e <bt_read_static_addr+0x36>
   1060c:	4608      	mov	r0, r1
   1060e:	2904      	cmp	r1, #4
   10610:	dd01      	ble.n	10616 <bt_read_static_addr+0x2e>
   10612:	4c68      	ldr	r4, [pc, #416]	; (107b4 <bt_read_static_addr+0x1cc>)
   10614:	615c      	str	r4, [r3, #20]
   10616:	2808      	cmp	r0, #8
   10618:	dd01      	ble.n	1061e <bt_read_static_addr+0x36>
   1061a:	4867      	ldr	r0, [pc, #412]	; (107b8 <bt_read_static_addr+0x1d0>)
   1061c:	6198      	str	r0, [r3, #24]
   1061e:	290b      	cmp	r1, #11
   10620:	dd28      	ble.n	10674 <bt_read_static_addr+0x8c>
   10622:	240c      	movs	r4, #12
   10624:	b13a      	cbz	r2, 10636 <bt_read_static_addr+0x4e>
   10626:	2103      	movs	r1, #3
   10628:	7039      	strb	r1, [r7, #0]
   1062a:	2100      	movs	r1, #0
   1062c:	7079      	strb	r1, [r7, #1]
   1062e:	70b9      	strb	r1, [r7, #2]
   10630:	70f9      	strb	r1, [r7, #3]
   10632:	6838      	ldr	r0, [r7, #0]
   10634:	6118      	str	r0, [r3, #16]
   10636:	2100      	movs	r1, #0
   10638:	f36f 0100 	bfc	r1, #0, #1
   1063c:	f36f 0141 	bfc	r1, #1, #1
   10640:	f36f 0182 	bfc	r1, #2, #1
   10644:	f36f 01c5 	bfc	r1, #3, #3
   10648:	2302      	movs	r3, #2
   1064a:	f363 1188 	bfi	r1, r3, #6, #3
   1064e:	f3c4 040a 	ubfx	r4, r4, #0, #11
   10652:	f364 2153 	bfi	r1, r4, #9, #11
   10656:	f36f 511f 	bfc	r1, #20, #12
   1065a:	2300      	movs	r3, #0
   1065c:	4857      	ldr	r0, [pc, #348]	; (107bc <bt_read_static_addr+0x1d4>)
   1065e:	f7fb fa81 	bl	bb64 <z_impl_z_log_msg_static_create>
   10662:	46b5      	mov	sp, r6
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   10664:	4628      	mov	r0, r5
   10666:	370c      	adds	r7, #12
   10668:	46bd      	mov	sp, r7
   1066a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Read Static Addresses command not available");
   1066e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10672:	e7ca      	b.n	1060a <bt_read_static_addr+0x22>
   10674:	f06f 041b 	mvn.w	r4, #27
   10678:	e7d4      	b.n	10624 <bt_read_static_addr+0x3c>
   1067a:	4606      	mov	r6, r0
   1067c:	4689      	mov	r9, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1067e:	1d3a      	adds	r2, r7, #4
   10680:	2100      	movs	r1, #0
   10682:	f64f 4009 	movw	r0, #64521	; 0xfc09
   10686:	f7fe fd4f 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
   1068a:	4604      	mov	r4, r0
   1068c:	b940      	cbnz	r0, 106a0 <bt_read_static_addr+0xb8>
	rp = (void *)rsp->data;
   1068e:	687b      	ldr	r3, [r7, #4]
   10690:	f8d3 800c 	ldr.w	r8, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   10694:	f898 5001 	ldrb.w	r5, [r8, #1]
   10698:	454d      	cmp	r5, r9
   1069a:	bf28      	it	cs
   1069c:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
   1069e:	e045      	b.n	1072c <bt_read_static_addr+0x144>
		LOG_WRN("Failed to read static addresses");
   106a0:	466d      	mov	r5, sp
   106a2:	b088      	sub	sp, #32
   106a4:	466b      	mov	r3, sp
   106a6:	f113 0210 	adds.w	r2, r3, #16
   106aa:	d02f      	beq.n	1070c <bt_read_static_addr+0x124>
   106ac:	210c      	movs	r1, #12
   106ae:	b142      	cbz	r2, 106c2 <bt_read_static_addr+0xda>
   106b0:	4608      	mov	r0, r1
   106b2:	2904      	cmp	r1, #4
   106b4:	dd01      	ble.n	106ba <bt_read_static_addr+0xd2>
   106b6:	4c42      	ldr	r4, [pc, #264]	; (107c0 <bt_read_static_addr+0x1d8>)
   106b8:	615c      	str	r4, [r3, #20]
   106ba:	2808      	cmp	r0, #8
   106bc:	dd01      	ble.n	106c2 <bt_read_static_addr+0xda>
   106be:	483e      	ldr	r0, [pc, #248]	; (107b8 <bt_read_static_addr+0x1d0>)
   106c0:	6198      	str	r0, [r3, #24]
   106c2:	290b      	cmp	r1, #11
   106c4:	dd25      	ble.n	10712 <bt_read_static_addr+0x12a>
   106c6:	240c      	movs	r4, #12
   106c8:	b13a      	cbz	r2, 106da <bt_read_static_addr+0xf2>
   106ca:	2103      	movs	r1, #3
   106cc:	7039      	strb	r1, [r7, #0]
   106ce:	2100      	movs	r1, #0
   106d0:	7079      	strb	r1, [r7, #1]
   106d2:	70b9      	strb	r1, [r7, #2]
   106d4:	70f9      	strb	r1, [r7, #3]
   106d6:	6838      	ldr	r0, [r7, #0]
   106d8:	6118      	str	r0, [r3, #16]
   106da:	2100      	movs	r1, #0
   106dc:	f36f 0100 	bfc	r1, #0, #1
   106e0:	f36f 0141 	bfc	r1, #1, #1
   106e4:	f36f 0182 	bfc	r1, #2, #1
   106e8:	f36f 01c5 	bfc	r1, #3, #3
   106ec:	2302      	movs	r3, #2
   106ee:	f363 1188 	bfi	r1, r3, #6, #3
   106f2:	f3c4 040a 	ubfx	r4, r4, #0, #11
   106f6:	f364 2153 	bfi	r1, r4, #9, #11
   106fa:	f36f 511f 	bfc	r1, #20, #12
   106fe:	2300      	movs	r3, #0
   10700:	482e      	ldr	r0, [pc, #184]	; (107bc <bt_read_static_addr+0x1d4>)
   10702:	f7fb fa2f 	bl	bb64 <z_impl_z_log_msg_static_create>
   10706:	46ad      	mov	sp, r5
		return 0;
   10708:	2500      	movs	r5, #0
   1070a:	e7ab      	b.n	10664 <bt_read_static_addr+0x7c>
		LOG_WRN("Failed to read static addresses");
   1070c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10710:	e7cd      	b.n	106ae <bt_read_static_addr+0xc6>
   10712:	f06f 041b 	mvn.w	r4, #27
   10716:	e7d7      	b.n	106c8 <bt_read_static_addr+0xe0>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   10718:	2216      	movs	r2, #22
   1071a:	fb02 f004 	mul.w	r0, r2, r4
   1071e:	eb08 0100 	add.w	r1, r8, r0
   10722:	3102      	adds	r1, #2
   10724:	4430      	add	r0, r6
   10726:	f006 fb44 	bl	16db2 <memcpy>
	for (i = 0; i < cnt; i++) {
   1072a:	3401      	adds	r4, #1
   1072c:	42a5      	cmp	r5, r4
   1072e:	dcf3      	bgt.n	10718 <bt_read_static_addr+0x130>
	net_buf_unref(rsp);
   10730:	6878      	ldr	r0, [r7, #4]
   10732:	f006 fefa 	bl	1752a <net_buf_unref>
	if (!cnt) {
   10736:	2d00      	cmp	r5, #0
   10738:	d194      	bne.n	10664 <bt_read_static_addr+0x7c>
		LOG_WRN("No static addresses stored in controller");
   1073a:	466e      	mov	r6, sp
   1073c:	b088      	sub	sp, #32
   1073e:	466b      	mov	r3, sp
   10740:	f113 0210 	adds.w	r2, r3, #16
   10744:	d02e      	beq.n	107a4 <bt_read_static_addr+0x1bc>
   10746:	210c      	movs	r1, #12
   10748:	b142      	cbz	r2, 1075c <bt_read_static_addr+0x174>
   1074a:	4608      	mov	r0, r1
   1074c:	2904      	cmp	r1, #4
   1074e:	dd01      	ble.n	10754 <bt_read_static_addr+0x16c>
   10750:	4c1c      	ldr	r4, [pc, #112]	; (107c4 <bt_read_static_addr+0x1dc>)
   10752:	615c      	str	r4, [r3, #20]
   10754:	2808      	cmp	r0, #8
   10756:	dd01      	ble.n	1075c <bt_read_static_addr+0x174>
   10758:	4817      	ldr	r0, [pc, #92]	; (107b8 <bt_read_static_addr+0x1d0>)
   1075a:	6198      	str	r0, [r3, #24]
   1075c:	290b      	cmp	r1, #11
   1075e:	dd24      	ble.n	107aa <bt_read_static_addr+0x1c2>
   10760:	240c      	movs	r4, #12
   10762:	b13a      	cbz	r2, 10774 <bt_read_static_addr+0x18c>
   10764:	2103      	movs	r1, #3
   10766:	7039      	strb	r1, [r7, #0]
   10768:	2100      	movs	r1, #0
   1076a:	7079      	strb	r1, [r7, #1]
   1076c:	70b9      	strb	r1, [r7, #2]
   1076e:	70f9      	strb	r1, [r7, #3]
   10770:	6838      	ldr	r0, [r7, #0]
   10772:	6118      	str	r0, [r3, #16]
   10774:	2100      	movs	r1, #0
   10776:	f36f 0100 	bfc	r1, #0, #1
   1077a:	f36f 0141 	bfc	r1, #1, #1
   1077e:	f36f 0182 	bfc	r1, #2, #1
   10782:	f36f 01c5 	bfc	r1, #3, #3
   10786:	2302      	movs	r3, #2
   10788:	f363 1188 	bfi	r1, r3, #6, #3
   1078c:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10790:	f363 2153 	bfi	r1, r3, #9, #11
   10794:	f36f 511f 	bfc	r1, #20, #12
   10798:	2300      	movs	r3, #0
   1079a:	4808      	ldr	r0, [pc, #32]	; (107bc <bt_read_static_addr+0x1d4>)
   1079c:	f7fb f9e2 	bl	bb64 <z_impl_z_log_msg_static_create>
   107a0:	46b5      	mov	sp, r6
   107a2:	e75f      	b.n	10664 <bt_read_static_addr+0x7c>
   107a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   107a8:	e7ce      	b.n	10748 <bt_read_static_addr+0x160>
   107aa:	f06f 041b 	mvn.w	r4, #27
   107ae:	e7d8      	b.n	10762 <bt_read_static_addr+0x17a>
   107b0:	200001a0 	.word	0x200001a0
   107b4:	0001ac84 	.word	0x0001ac84
   107b8:	0001ad5c 	.word	0x0001ad5c
   107bc:	0001999c 	.word	0x0001999c
   107c0:	0001acb4 	.word	0x0001acb4
   107c4:	0001acd8 	.word	0x0001acd8

000107c8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   107c8:	b510      	push	{r4, lr}
   107ca:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   107cc:	4b17      	ldr	r3, [pc, #92]	; (1082c <bt_setup_random_id_addr+0x64>)
   107ce:	79dc      	ldrb	r4, [r3, #7]
   107d0:	b934      	cbnz	r4, 107e0 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   107d2:	2101      	movs	r1, #1
   107d4:	a802      	add	r0, sp, #8
   107d6:	f7ff ff07 	bl	105e8 <bt_read_static_addr>
   107da:	4b14      	ldr	r3, [pc, #80]	; (1082c <bt_setup_random_id_addr+0x64>)
   107dc:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   107de:	b948      	cbnz	r0, 107f4 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   107e0:	2100      	movs	r1, #0
   107e2:	4608      	mov	r0, r1
   107e4:	f7ff fd9e 	bl	10324 <bt_id_create>
   107e8:	4603      	mov	r3, r0
}
   107ea:	4618      	mov	r0, r3
   107ec:	b008      	add	sp, #32
   107ee:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   107f0:	3401      	adds	r4, #1
   107f2:	b2e4      	uxtb	r4, r4
   107f4:	4b0d      	ldr	r3, [pc, #52]	; (1082c <bt_setup_random_id_addr+0x64>)
   107f6:	79db      	ldrb	r3, [r3, #7]
   107f8:	42a3      	cmp	r3, r4
   107fa:	d914      	bls.n	10826 <bt_setup_random_id_addr+0x5e>
   107fc:	2206      	movs	r2, #6
   107fe:	2116      	movs	r1, #22
   10800:	ab02      	add	r3, sp, #8
   10802:	fb01 3104 	mla	r1, r1, r4, r3
   10806:	f10d 0001 	add.w	r0, sp, #1
   1080a:	f006 fad2 	bl	16db2 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1080e:	2301      	movs	r3, #1
   10810:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   10814:	2200      	movs	r2, #0
   10816:	4669      	mov	r1, sp
   10818:	4620      	mov	r0, r4
   1081a:	f7ff fd4d 	bl	102b8 <id_create>
				if (err) {
   1081e:	4603      	mov	r3, r0
   10820:	2800      	cmp	r0, #0
   10822:	d0e5      	beq.n	107f0 <bt_setup_random_id_addr+0x28>
   10824:	e7e1      	b.n	107ea <bt_setup_random_id_addr+0x22>
			return 0;
   10826:	2300      	movs	r3, #0
   10828:	e7df      	b.n	107ea <bt_setup_random_id_addr+0x22>
   1082a:	bf00      	nop
   1082c:	200001a0 	.word	0x200001a0

00010830 <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   10830:	2800      	cmp	r0, #0
   10832:	d051      	beq.n	108d8 <bt_id_set_adv_own_addr+0xa8>
{
   10834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10836:	460e      	mov	r6, r1
   10838:	4617      	mov	r7, r2
   1083a:	461d      	mov	r5, r3
   1083c:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1083e:	2d00      	cmp	r5, #0
   10840:	d04d      	beq.n	108de <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   10842:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   10844:	f011 0f01 	tst.w	r1, #1
   10848:	d029      	beq.n	1089e <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1084a:	b142      	cbz	r2, 1085e <bt_id_set_adv_own_addr+0x2e>
   1084c:	f011 0f20 	tst.w	r1, #32
   10850:	d005      	beq.n	1085e <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10852:	4a28      	ldr	r2, [pc, #160]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   10854:	f892 20d8 	ldrb.w	r2, [r2, #216]	; 0xd8
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   10858:	f012 0f40 	tst.w	r2, #64	; 0x40
   1085c:	d042      	beq.n	108e4 <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1085e:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   10862:	4924      	ldr	r1, [pc, #144]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   10864:	5c8a      	ldrb	r2, [r1, r2]
   10866:	2a01      	cmp	r2, #1
   10868:	d00e      	beq.n	10888 <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1086a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1086e:	4b21      	ldr	r3, [pc, #132]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   10870:	5d1b      	ldrb	r3, [r3, r4]
   10872:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   10874:	2f00      	cmp	r7, #0
   10876:	d038      	beq.n	108ea <bt_id_set_adv_own_addr+0xba>
   10878:	f016 0f20 	tst.w	r6, #32
   1087c:	d037      	beq.n	108ee <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1087e:	f043 0302 	orr.w	r3, r3, #2
   10882:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   10884:	2000      	movs	r0, #0
   10886:	e019      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   10888:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1088c:	4a19      	ldr	r2, [pc, #100]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   1088e:	4411      	add	r1, r2
   10890:	3101      	adds	r1, #1
   10892:	4618      	mov	r0, r3
   10894:	f006 fb7f 	bl	16f96 <bt_id_set_adv_random_addr>
				if (err) {
   10898:	2800      	cmp	r0, #0
   1089a:	d0e6      	beq.n	1086a <bt_id_set_adv_own_addr+0x3a>
   1089c:	e00e      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1089e:	f011 0f04 	tst.w	r1, #4
   108a2:	d014      	beq.n	108ce <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   108a4:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   108a8:	4912      	ldr	r1, [pc, #72]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   108aa:	5c8a      	ldrb	r2, [r1, r2]
   108ac:	2a01      	cmp	r2, #1
   108ae:	d006      	beq.n	108be <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
   108b0:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   108b2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   108b6:	4b0f      	ldr	r3, [pc, #60]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   108b8:	5d1b      	ldrb	r3, [r3, r4]
   108ba:	702b      	strb	r3, [r5, #0]
}
   108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   108be:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   108c2:	4a0c      	ldr	r2, [pc, #48]	; (108f4 <bt_id_set_adv_own_addr+0xc4>)
   108c4:	4411      	add	r1, r2
   108c6:	3101      	adds	r1, #1
   108c8:	f006 fb65 	bl	16f96 <bt_id_set_adv_random_addr>
   108cc:	e7f1      	b.n	108b2 <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   108ce:	f006 fb6f 	bl	16fb0 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   108d2:	2301      	movs	r3, #1
   108d4:	702b      	strb	r3, [r5, #0]
		if (err) {
   108d6:	e7f1      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
   108d8:	f06f 0015 	mvn.w	r0, #21
}
   108dc:	4770      	bx	lr
		return -EINVAL;
   108de:	f06f 0015 	mvn.w	r0, #21
   108e2:	e7eb      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   108e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   108e8:	e7e8      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
	return 0;
   108ea:	2000      	movs	r0, #0
   108ec:	e7e6      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
   108ee:	2000      	movs	r0, #0
   108f0:	e7e4      	b.n	108bc <bt_id_set_adv_own_addr+0x8c>
   108f2:	bf00      	nop
   108f4:	200001a0 	.word	0x200001a0

000108f8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   108f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108fa:	b083      	sub	sp, #12
   108fc:	af00      	add	r7, sp, #0
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   108fe:	4b67      	ldr	r3, [pc, #412]	; (10a9c <bt_id_init+0x1a4>)
   10900:	79db      	ldrb	r3, [r3, #7]
   10902:	b143      	cbz	r3, 10916 <bt_id_init+0x1e>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   10904:	4b65      	ldr	r3, [pc, #404]	; (10a9c <bt_id_init+0x1a4>)
   10906:	79db      	ldrb	r3, [r3, #7]
   10908:	2b00      	cmp	r3, #0
   1090a:	d044      	beq.n	10996 <bt_id_init+0x9e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1090c:	2400      	movs	r4, #0
}
   1090e:	4620      	mov	r0, r4
   10910:	370c      	adds	r7, #12
   10912:	46bd      	mov	sp, r7
   10914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_setup_public_id_addr();
   10916:	f7ff fe53 	bl	105c0 <bt_setup_public_id_addr>
		if (err) {
   1091a:	4604      	mov	r4, r0
   1091c:	2800      	cmp	r0, #0
   1091e:	d0f1      	beq.n	10904 <bt_id_init+0xc>
			LOG_ERR("Unable to set identity address");
   10920:	466e      	mov	r6, sp
   10922:	b088      	sub	sp, #32
   10924:	466b      	mov	r3, sp
   10926:	f113 0210 	adds.w	r2, r3, #16
   1092a:	d02e      	beq.n	1098a <bt_id_init+0x92>
   1092c:	210c      	movs	r1, #12
   1092e:	b142      	cbz	r2, 10942 <bt_id_init+0x4a>
   10930:	4608      	mov	r0, r1
   10932:	2904      	cmp	r1, #4
   10934:	dd01      	ble.n	1093a <bt_id_init+0x42>
   10936:	4d5a      	ldr	r5, [pc, #360]	; (10aa0 <bt_id_init+0x1a8>)
   10938:	615d      	str	r5, [r3, #20]
   1093a:	2808      	cmp	r0, #8
   1093c:	dd01      	ble.n	10942 <bt_id_init+0x4a>
   1093e:	4859      	ldr	r0, [pc, #356]	; (10aa4 <bt_id_init+0x1ac>)
   10940:	6198      	str	r0, [r3, #24]
   10942:	290b      	cmp	r1, #11
   10944:	dd24      	ble.n	10990 <bt_id_init+0x98>
   10946:	250c      	movs	r5, #12
   10948:	b13a      	cbz	r2, 1095a <bt_id_init+0x62>
   1094a:	2103      	movs	r1, #3
   1094c:	7139      	strb	r1, [r7, #4]
   1094e:	2100      	movs	r1, #0
   10950:	7179      	strb	r1, [r7, #5]
   10952:	71b9      	strb	r1, [r7, #6]
   10954:	71f9      	strb	r1, [r7, #7]
   10956:	6878      	ldr	r0, [r7, #4]
   10958:	6118      	str	r0, [r3, #16]
   1095a:	2100      	movs	r1, #0
   1095c:	f36f 0100 	bfc	r1, #0, #1
   10960:	f36f 0141 	bfc	r1, #1, #1
   10964:	f36f 0182 	bfc	r1, #2, #1
   10968:	f36f 01c5 	bfc	r1, #3, #3
   1096c:	2301      	movs	r3, #1
   1096e:	f363 1188 	bfi	r1, r3, #6, #3
   10972:	f3c5 050a 	ubfx	r5, r5, #0, #11
   10976:	f365 2153 	bfi	r1, r5, #9, #11
   1097a:	f36f 511f 	bfc	r1, #20, #12
   1097e:	2300      	movs	r3, #0
   10980:	4849      	ldr	r0, [pc, #292]	; (10aa8 <bt_id_init+0x1b0>)
   10982:	f7fb f8ef 	bl	bb64 <z_impl_z_log_msg_static_create>
   10986:	46b5      	mov	sp, r6
			return err;
   10988:	e7c1      	b.n	1090e <bt_id_init+0x16>
			LOG_ERR("Unable to set identity address");
   1098a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1098e:	e7ce      	b.n	1092e <bt_id_init+0x36>
   10990:	f06f 051b 	mvn.w	r5, #27
   10994:	e7d8      	b.n	10948 <bt_id_init+0x50>
		err = bt_setup_random_id_addr();
   10996:	f7ff ff17 	bl	107c8 <bt_setup_random_id_addr>
		if (err) {
   1099a:	4604      	mov	r4, r0
   1099c:	2800      	cmp	r0, #0
   1099e:	d03b      	beq.n	10a18 <bt_id_init+0x120>
			LOG_ERR("Unable to set identity address");
   109a0:	466d      	mov	r5, sp
   109a2:	b088      	sub	sp, #32
   109a4:	466b      	mov	r3, sp
   109a6:	f113 0210 	adds.w	r2, r3, #16
   109aa:	d02f      	beq.n	10a0c <bt_id_init+0x114>
   109ac:	210c      	movs	r1, #12
   109ae:	b142      	cbz	r2, 109c2 <bt_id_init+0xca>
   109b0:	4608      	mov	r0, r1
   109b2:	2904      	cmp	r1, #4
   109b4:	dd01      	ble.n	109ba <bt_id_init+0xc2>
   109b6:	4e3a      	ldr	r6, [pc, #232]	; (10aa0 <bt_id_init+0x1a8>)
   109b8:	615e      	str	r6, [r3, #20]
   109ba:	2808      	cmp	r0, #8
   109bc:	dd01      	ble.n	109c2 <bt_id_init+0xca>
   109be:	4839      	ldr	r0, [pc, #228]	; (10aa4 <bt_id_init+0x1ac>)
   109c0:	6198      	str	r0, [r3, #24]
   109c2:	290b      	cmp	r1, #11
   109c4:	dd25      	ble.n	10a12 <bt_id_init+0x11a>
   109c6:	f04f 0c0c 	mov.w	ip, #12
   109ca:	b13a      	cbz	r2, 109dc <bt_id_init+0xe4>
   109cc:	2103      	movs	r1, #3
   109ce:	7139      	strb	r1, [r7, #4]
   109d0:	2100      	movs	r1, #0
   109d2:	7179      	strb	r1, [r7, #5]
   109d4:	71b9      	strb	r1, [r7, #6]
   109d6:	71f9      	strb	r1, [r7, #7]
   109d8:	6878      	ldr	r0, [r7, #4]
   109da:	6118      	str	r0, [r3, #16]
   109dc:	2100      	movs	r1, #0
   109de:	f36f 0100 	bfc	r1, #0, #1
   109e2:	f36f 0141 	bfc	r1, #1, #1
   109e6:	f36f 0182 	bfc	r1, #2, #1
   109ea:	f36f 01c5 	bfc	r1, #3, #3
   109ee:	2301      	movs	r3, #1
   109f0:	f363 1188 	bfi	r1, r3, #6, #3
   109f4:	f3cc 030a 	ubfx	r3, ip, #0, #11
   109f8:	f363 2153 	bfi	r1, r3, #9, #11
   109fc:	f36f 511f 	bfc	r1, #20, #12
   10a00:	2300      	movs	r3, #0
   10a02:	4829      	ldr	r0, [pc, #164]	; (10aa8 <bt_id_init+0x1b0>)
   10a04:	f7fb f8ae 	bl	bb64 <z_impl_z_log_msg_static_create>
   10a08:	46ad      	mov	sp, r5
			return err;
   10a0a:	e780      	b.n	1090e <bt_id_init+0x16>
			LOG_ERR("Unable to set identity address");
   10a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10a10:	e7cd      	b.n	109ae <bt_id_init+0xb6>
   10a12:	f06f 0c1b 	mvn.w	ip, #27
   10a16:	e7d8      	b.n	109ca <bt_id_init+0xd2>
		err = set_random_address(&bt_dev.id_addr[0].a);
   10a18:	4824      	ldr	r0, [pc, #144]	; (10aac <bt_id_init+0x1b4>)
   10a1a:	f7ff fc1f 	bl	1025c <set_random_address>
		if (err) {
   10a1e:	4604      	mov	r4, r0
   10a20:	2800      	cmp	r0, #0
   10a22:	f43f af74 	beq.w	1090e <bt_id_init+0x16>
			LOG_ERR("Unable to set random address");
   10a26:	466e      	mov	r6, sp
   10a28:	b088      	sub	sp, #32
   10a2a:	466b      	mov	r3, sp
   10a2c:	f113 0210 	adds.w	r2, r3, #16
   10a30:	d02e      	beq.n	10a90 <bt_id_init+0x198>
   10a32:	210c      	movs	r1, #12
   10a34:	b142      	cbz	r2, 10a48 <bt_id_init+0x150>
   10a36:	4608      	mov	r0, r1
   10a38:	2904      	cmp	r1, #4
   10a3a:	dd01      	ble.n	10a40 <bt_id_init+0x148>
   10a3c:	4d1c      	ldr	r5, [pc, #112]	; (10ab0 <bt_id_init+0x1b8>)
   10a3e:	615d      	str	r5, [r3, #20]
   10a40:	2808      	cmp	r0, #8
   10a42:	dd01      	ble.n	10a48 <bt_id_init+0x150>
   10a44:	4817      	ldr	r0, [pc, #92]	; (10aa4 <bt_id_init+0x1ac>)
   10a46:	6198      	str	r0, [r3, #24]
   10a48:	290b      	cmp	r1, #11
   10a4a:	dd24      	ble.n	10a96 <bt_id_init+0x19e>
   10a4c:	250c      	movs	r5, #12
   10a4e:	b13a      	cbz	r2, 10a60 <bt_id_init+0x168>
   10a50:	2103      	movs	r1, #3
   10a52:	7139      	strb	r1, [r7, #4]
   10a54:	2100      	movs	r1, #0
   10a56:	7179      	strb	r1, [r7, #5]
   10a58:	71b9      	strb	r1, [r7, #6]
   10a5a:	71f9      	strb	r1, [r7, #7]
   10a5c:	6878      	ldr	r0, [r7, #4]
   10a5e:	6118      	str	r0, [r3, #16]
   10a60:	2100      	movs	r1, #0
   10a62:	f36f 0100 	bfc	r1, #0, #1
   10a66:	f36f 0141 	bfc	r1, #1, #1
   10a6a:	f36f 0182 	bfc	r1, #2, #1
   10a6e:	f36f 01c5 	bfc	r1, #3, #3
   10a72:	2301      	movs	r3, #1
   10a74:	f363 1188 	bfi	r1, r3, #6, #3
   10a78:	f3c5 050a 	ubfx	r5, r5, #0, #11
   10a7c:	f365 2153 	bfi	r1, r5, #9, #11
   10a80:	f36f 511f 	bfc	r1, #20, #12
   10a84:	2300      	movs	r3, #0
   10a86:	4808      	ldr	r0, [pc, #32]	; (10aa8 <bt_id_init+0x1b0>)
   10a88:	f7fb f86c 	bl	bb64 <z_impl_z_log_msg_static_create>
   10a8c:	46b5      	mov	sp, r6
			return err;
   10a8e:	e73e      	b.n	1090e <bt_id_init+0x16>
			LOG_ERR("Unable to set random address");
   10a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10a94:	e7ce      	b.n	10a34 <bt_id_init+0x13c>
   10a96:	f06f 051b 	mvn.w	r5, #27
   10a9a:	e7d8      	b.n	10a4e <bt_id_init+0x156>
   10a9c:	200001a0 	.word	0x200001a0
   10aa0:	0001ad08 	.word	0x0001ad08
   10aa4:	0001ad50 	.word	0x0001ad50
   10aa8:	0001999c 	.word	0x0001999c
   10aac:	200001a1 	.word	0x200001a1
   10ab0:	0001ad2c 	.word	0x0001ad2c

00010ab4 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   10ab4:	4800      	ldr	r0, [pc, #0]	; (10ab8 <adv_get_legacy+0x4>)
   10ab6:	4770      	bx	lr
   10ab8:	200001b8 	.word	0x200001b8

00010abc <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   10abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ac0:	b087      	sub	sp, #28
   10ac2:	af00      	add	r7, sp, #0
   10ac4:	4680      	mov	r8, r0
   10ac6:	468a      	mov	sl, r1
   10ac8:	60fb      	str	r3, [r7, #12]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   10aca:	2600      	movs	r6, #0
	uint8_t set_data_len = 0;
   10acc:	4634      	mov	r4, r6
   10ace:	4613      	mov	r3, r2
	for (size_t i = 0; i < ad_len; i++) {
   10ad0:	68fa      	ldr	r2, [r7, #12]
   10ad2:	4296      	cmp	r6, r2
   10ad4:	d275      	bcs.n	10bc2 <set_data_add_complete+0x106>
		const struct bt_data *data = ad[i].data;
   10ad6:	eb03 0bc6 	add.w	fp, r3, r6, lsl #3
   10ada:	f853 9036 	ldr.w	r9, [r3, r6, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   10ade:	2500      	movs	r5, #0
   10ae0:	60be      	str	r6, [r7, #8]
   10ae2:	607b      	str	r3, [r7, #4]
   10ae4:	e052      	b.n	10b8c <set_data_add_complete+0xd0>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					LOG_ERR("Too big advertising data");
   10ae6:	466d      	mov	r5, sp
   10ae8:	b088      	sub	sp, #32
   10aea:	466b      	mov	r3, sp
   10aec:	f113 0210 	adds.w	r2, r3, #16
   10af0:	d033      	beq.n	10b5a <set_data_add_complete+0x9e>
   10af2:	210c      	movs	r1, #12
   10af4:	b142      	cbz	r2, 10b08 <set_data_add_complete+0x4c>
   10af6:	4608      	mov	r0, r1
   10af8:	2904      	cmp	r1, #4
   10afa:	dd01      	ble.n	10b00 <set_data_add_complete+0x44>
   10afc:	4c33      	ldr	r4, [pc, #204]	; (10bcc <set_data_add_complete+0x110>)
   10afe:	615c      	str	r4, [r3, #20]
   10b00:	2808      	cmp	r0, #8
   10b02:	dd01      	ble.n	10b08 <set_data_add_complete+0x4c>
   10b04:	4832      	ldr	r0, [pc, #200]	; (10bd0 <set_data_add_complete+0x114>)
   10b06:	6198      	str	r0, [r3, #24]
   10b08:	290b      	cmp	r1, #11
   10b0a:	dd29      	ble.n	10b60 <set_data_add_complete+0xa4>
   10b0c:	240c      	movs	r4, #12
   10b0e:	b13a      	cbz	r2, 10b20 <set_data_add_complete+0x64>
   10b10:	2103      	movs	r1, #3
   10b12:	7539      	strb	r1, [r7, #20]
   10b14:	2100      	movs	r1, #0
   10b16:	7579      	strb	r1, [r7, #21]
   10b18:	75b9      	strb	r1, [r7, #22]
   10b1a:	75f9      	strb	r1, [r7, #23]
   10b1c:	6978      	ldr	r0, [r7, #20]
   10b1e:	6118      	str	r0, [r3, #16]
   10b20:	2100      	movs	r1, #0
   10b22:	f36f 0100 	bfc	r1, #0, #1
   10b26:	f36f 0141 	bfc	r1, #1, #1
   10b2a:	f36f 0182 	bfc	r1, #2, #1
   10b2e:	f36f 01c5 	bfc	r1, #3, #3
   10b32:	2301      	movs	r3, #1
   10b34:	f363 1188 	bfi	r1, r3, #6, #3
   10b38:	f3c4 040a 	ubfx	r4, r4, #0, #11
   10b3c:	f364 2153 	bfi	r1, r4, #9, #11
   10b40:	f36f 511f 	bfc	r1, #20, #12
   10b44:	2300      	movs	r3, #0
   10b46:	4823      	ldr	r0, [pc, #140]	; (10bd4 <set_data_add_complete+0x118>)
   10b48:	f7fb f80c 	bl	bb64 <z_impl_z_log_msg_static_create>
   10b4c:	46ad      	mov	sp, r5
					return -EINVAL;
   10b4e:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   10b52:	371c      	adds	r7, #28
   10b54:	46bd      	mov	sp, r7
   10b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					LOG_ERR("Too big advertising data");
   10b5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10b5e:	e7c9      	b.n	10af4 <set_data_add_complete+0x38>
   10b60:	f06f 041b 	mvn.w	r4, #27
   10b64:	e7d3      	b.n	10b0e <set_data_add_complete+0x52>
			set_data[set_data_len++] = len + 1;
   10b66:	b2d6      	uxtb	r6, r2
   10b68:	1c63      	adds	r3, r4, #1
   10b6a:	b2db      	uxtb	r3, r3
   10b6c:	f106 0e01 	add.w	lr, r6, #1
   10b70:	f808 e00c 	strb.w	lr, [r8, ip]
			set_data[set_data_len++] = type;
   10b74:	3402      	adds	r4, #2
   10b76:	b2e4      	uxtb	r4, r4
   10b78:	f808 1003 	strb.w	r1, [r8, r3]
			memcpy(&set_data[set_data_len], data[j].data, len);
   10b7c:	6841      	ldr	r1, [r0, #4]
   10b7e:	eb08 0004 	add.w	r0, r8, r4
   10b82:	f006 f916 	bl	16db2 <memcpy>
			set_data_len += len;
   10b86:	4426      	add	r6, r4
   10b88:	b2f4      	uxtb	r4, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   10b8a:	3501      	adds	r5, #1
   10b8c:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b90:	429d      	cmp	r5, r3
   10b92:	d212      	bcs.n	10bba <set_data_add_complete+0xfe>
			size_t len = data[j].data_len;
   10b94:	eb09 00c5 	add.w	r0, r9, r5, lsl #3
   10b98:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   10b9a:	f819 1035 	ldrb.w	r1, [r9, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   10b9e:	46a4      	mov	ip, r4
   10ba0:	18a3      	adds	r3, r4, r2
   10ba2:	3302      	adds	r3, #2
   10ba4:	4553      	cmp	r3, sl
   10ba6:	d9de      	bls.n	10b66 <set_data_add_complete+0xaa>
							(set_data_len + 2);
   10ba8:	1ca2      	adds	r2, r4, #2
				ssize_t shortened_len = set_data_len_max -
   10baa:	ebaa 0202 	sub.w	r2, sl, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   10bae:	2909      	cmp	r1, #9
   10bb0:	d199      	bne.n	10ae6 <set_data_add_complete+0x2a>
   10bb2:	2a00      	cmp	r2, #0
   10bb4:	dd97      	ble.n	10ae6 <set_data_add_complete+0x2a>
				type = BT_DATA_NAME_SHORTENED;
   10bb6:	2108      	movs	r1, #8
   10bb8:	e7d5      	b.n	10b66 <set_data_add_complete+0xaa>
	for (size_t i = 0; i < ad_len; i++) {
   10bba:	68be      	ldr	r6, [r7, #8]
   10bbc:	687b      	ldr	r3, [r7, #4]
   10bbe:	3601      	adds	r6, #1
   10bc0:	e786      	b.n	10ad0 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   10bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10bc4:	701c      	strb	r4, [r3, #0]
	return 0;
   10bc6:	2000      	movs	r0, #0
   10bc8:	e7c3      	b.n	10b52 <set_data_add_complete+0x96>
   10bca:	bf00      	nop
   10bcc:	0001ada0 	.word	0x0001ada0
   10bd0:	0001ae50 	.word	0x0001ae50
   10bd4:	00019984 	.word	0x00019984

00010bd8 <valid_adv_ext_param>:
{
   10bd8:	b510      	push	{r4, lr}
   10bda:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   10bdc:	7800      	ldrb	r0, [r0, #0]
   10bde:	4b21      	ldr	r3, [pc, #132]	; (10c64 <valid_adv_ext_param+0x8c>)
   10be0:	79db      	ldrb	r3, [r3, #7]
   10be2:	4298      	cmp	r0, r3
   10be4:	d301      	bcc.n	10bea <valid_adv_ext_param+0x12>
		return false;
   10be6:	2000      	movs	r0, #0
}
   10be8:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   10bea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   10bee:	2207      	movs	r2, #7
   10bf0:	491d      	ldr	r1, [pc, #116]	; (10c68 <valid_adv_ext_param+0x90>)
   10bf2:	4b1c      	ldr	r3, [pc, #112]	; (10c64 <valid_adv_ext_param+0x8c>)
   10bf4:	4418      	add	r0, r3
   10bf6:	f006 f8ca 	bl	16d8e <memcmp>
	if (param->id >= bt_dev.id_count ||
   10bfa:	2800      	cmp	r0, #0
   10bfc:	d0f3      	beq.n	10be6 <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10bfe:	6863      	ldr	r3, [r4, #4]
   10c00:	f013 0f01 	tst.w	r3, #1
   10c04:	d107      	bne.n	10c16 <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   10c06:	4a17      	ldr	r2, [pc, #92]	; (10c64 <valid_adv_ext_param+0x8c>)
   10c08:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   10c0c:	2a08      	cmp	r2, #8
   10c0e:	d802      	bhi.n	10c16 <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
   10c10:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   10c12:	2a9f      	cmp	r2, #159	; 0x9f
   10c14:	d91b      	bls.n	10c4e <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   10c16:	f013 0f30 	tst.w	r3, #48	; 0x30
   10c1a:	d001      	beq.n	10c20 <valid_adv_ext_param+0x48>
	    !param->peer) {
   10c1c:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   10c1e:	b1c2      	cbz	r2, 10c52 <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   10c20:	f013 0f10 	tst.w	r3, #16
   10c24:	d108      	bne.n	10c38 <valid_adv_ext_param+0x60>
	    !param->peer) {
   10c26:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   10c28:	b132      	cbz	r2, 10c38 <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   10c2a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   10c2e:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   10c32:	d014      	beq.n	10c5e <valid_adv_ext_param+0x86>
	return true;
   10c34:	2001      	movs	r0, #1
   10c36:	e7d7      	b.n	10be8 <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
   10c38:	68a2      	ldr	r2, [r4, #8]
   10c3a:	68e1      	ldr	r1, [r4, #12]
   10c3c:	428a      	cmp	r2, r1
   10c3e:	d80a      	bhi.n	10c56 <valid_adv_ext_param+0x7e>
   10c40:	2a1f      	cmp	r2, #31
   10c42:	d90a      	bls.n	10c5a <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
   10c44:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   10c48:	d9ef      	bls.n	10c2a <valid_adv_ext_param+0x52>
			return false;
   10c4a:	2000      	movs	r0, #0
   10c4c:	e7cc      	b.n	10be8 <valid_adv_ext_param+0x10>
			return false;
   10c4e:	2000      	movs	r0, #0
   10c50:	e7ca      	b.n	10be8 <valid_adv_ext_param+0x10>
		return false;
   10c52:	2000      	movs	r0, #0
   10c54:	e7c8      	b.n	10be8 <valid_adv_ext_param+0x10>
			return false;
   10c56:	2000      	movs	r0, #0
   10c58:	e7c6      	b.n	10be8 <valid_adv_ext_param+0x10>
   10c5a:	2000      	movs	r0, #0
   10c5c:	e7c4      	b.n	10be8 <valid_adv_ext_param+0x10>
		return false;
   10c5e:	2000      	movs	r0, #0
   10c60:	e7c2      	b.n	10be8 <valid_adv_ext_param+0x10>
   10c62:	bf00      	nop
   10c64:	200001a0 	.word	0x200001a0
   10c68:	0001a3f0 	.word	0x0001a3f0

00010c6c <bt_le_adv_lookup_legacy>:
}
   10c6c:	4800      	ldr	r0, [pc, #0]	; (10c70 <bt_le_adv_lookup_legacy+0x4>)
   10c6e:	4770      	bx	lr
   10c70:	200001b8 	.word	0x200001b8

00010c74 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   10c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c78:	b08f      	sub	sp, #60	; 0x3c
   10c7a:	af04      	add	r7, sp, #16
   10c7c:	60ba      	str	r2, [r7, #8]
   10c7e:	607b      	str	r3, [r7, #4]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   10c80:	690e      	ldr	r6, [r1, #16]
   10c82:	f1b6 0b00 	subs.w	fp, r6, #0
   10c86:	bf18      	it	ne
   10c88:	f04f 0b01 	movne.w	fp, #1
   10c8c:	f3bf 8f5b 	dmb	ish
   10c90:	4ba5      	ldr	r3, [pc, #660]	; (10f28 <bt_le_adv_start_legacy+0x2b4>)
   10c92:	681b      	ldr	r3, [r3, #0]
   10c94:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c98:	f013 0f04 	tst.w	r3, #4
   10c9c:	f000 8134 	beq.w	10f08 <bt_le_adv_start_legacy+0x294>
   10ca0:	4605      	mov	r5, r0
   10ca2:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   10ca4:	4608      	mov	r0, r1
   10ca6:	f006 faa4 	bl	171f2 <valid_adv_param>
   10caa:	2800      	cmp	r0, #0
   10cac:	f000 812f 	beq.w	10f0e <bt_le_adv_start_legacy+0x29a>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   10cb0:	4620      	mov	r0, r4
   10cb2:	f006 f996 	bl	16fe2 <bt_id_adv_random_addr_check>
   10cb6:	4682      	mov	sl, r0
   10cb8:	2800      	cmp	r0, #0
   10cba:	f000 812b 	beq.w	10f14 <bt_le_adv_start_legacy+0x2a0>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10cbe:	f105 0810 	add.w	r8, r5, #16
   10cc2:	2107      	movs	r1, #7
   10cc4:	4640      	mov	r0, r8
   10cc6:	f006 f9c2 	bl	1704e <atomic_test_bit>
   10cca:	60f8      	str	r0, [r7, #12]
   10ccc:	2800      	cmp	r0, #0
   10cce:	f040 8124 	bne.w	10f1a <bt_le_adv_start_legacy+0x2a6>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10cd2:	220f      	movs	r2, #15
   10cd4:	2100      	movs	r1, #0
   10cd6:	f107 0018 	add.w	r0, r7, #24
   10cda:	f006 f899 	bl	16e10 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10cde:	68a3      	ldr	r3, [r4, #8]
   10ce0:	833b      	strh	r3, [r7, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10ce2:	68e3      	ldr	r3, [r4, #12]
   10ce4:	837b      	strh	r3, [r7, #26]
	set_param.channel_map  = get_adv_channel_map(param->options);
   10ce6:	f8d4 9004 	ldr.w	r9, [r4, #4]
   10cea:	4648      	mov	r0, r9
   10cec:	f006 f99d 	bl	1702a <get_adv_channel_map>
   10cf0:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
	set_param.filter_policy = get_filter_policy(param->options);
   10cf4:	4648      	mov	r0, r9
   10cf6:	f006 f996 	bl	17026 <get_filter_policy>
   10cfa:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26

	if (adv->id != param->id) {
   10cfe:	782a      	ldrb	r2, [r5, #0]
   10d00:	7823      	ldrb	r3, [r4, #0]
   10d02:	429a      	cmp	r2, r3
   10d04:	d00c      	beq.n	10d20 <bt_le_adv_start_legacy+0xac>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d06:	4b88      	ldr	r3, [pc, #544]	; (10f28 <bt_le_adv_start_legacy+0x2b4>)
   10d08:	f3bf 8f5b 	dmb	ish
   10d0c:	e853 1f00 	ldrex	r1, [r3]
   10d10:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   10d14:	e843 1200 	strex	r2, r1, [r3]
   10d18:	2a00      	cmp	r2, #0
   10d1a:	d1f7      	bne.n	10d0c <bt_le_adv_start_legacy+0x98>
   10d1c:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   10d20:	7823      	ldrb	r3, [r4, #0]
   10d22:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   10d24:	4a81      	ldr	r2, [pc, #516]	; (10f2c <bt_le_adv_start_legacy+0x2b8>)
   10d26:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   10d2a:	f107 031d 	add.w	r3, r7, #29
   10d2e:	465a      	mov	r2, fp
   10d30:	6861      	ldr	r1, [r4, #4]
   10d32:	4628      	mov	r0, r5
   10d34:	f7ff fd7c 	bl	10830 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   10d38:	4681      	mov	r9, r0
   10d3a:	2800      	cmp	r0, #0
   10d3c:	f040 8083 	bne.w	10e46 <bt_le_adv_start_legacy+0x1d2>
		return err;
	}

	if (dir_adv) {
   10d40:	b1e6      	cbz	r6, 10d7c <bt_le_adv_start_legacy+0x108>
	memcpy(dst, src, sizeof(*dst));
   10d42:	2207      	movs	r2, #7
   10d44:	6921      	ldr	r1, [r4, #16]
   10d46:	f105 0009 	add.w	r0, r5, #9
   10d4a:	f006 f832 	bl	16db2 <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   10d4e:	4620      	mov	r0, r4
   10d50:	f006 fa85 	bl	1725e <get_adv_name_type_param>
   10d54:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10d56:	6863      	ldr	r3, [r4, #4]
   10d58:	f013 0f01 	tst.w	r3, #1
   10d5c:	d01b      	beq.n	10d96 <bt_le_adv_start_legacy+0x122>
		if (dir_adv) {
   10d5e:	b1be      	cbz	r6, 10d90 <bt_le_adv_start_legacy+0x11c>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   10d60:	f013 0f10 	tst.w	r3, #16
   10d64:	d011      	beq.n	10d8a <bt_le_adv_start_legacy+0x116>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   10d66:	2304      	movs	r3, #4
   10d68:	773b      	strb	r3, [r7, #28]
   10d6a:	2207      	movs	r2, #7
   10d6c:	6921      	ldr	r1, [r4, #16]
   10d6e:	f107 001e 	add.w	r0, r7, #30
   10d72:	f006 f81e 	bl	16db2 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   10d76:	f8d7 a00c 	ldr.w	sl, [r7, #12]
}
   10d7a:	e014      	b.n	10da6 <bt_le_adv_start_legacy+0x132>
	memcpy(dst, src, sizeof(*dst));
   10d7c:	2207      	movs	r2, #7
   10d7e:	496c      	ldr	r1, [pc, #432]	; (10f30 <bt_le_adv_start_legacy+0x2bc>)
   10d80:	f105 0009 	add.w	r0, r5, #9
   10d84:	f006 f815 	bl	16db2 <memcpy>
}
   10d88:	e7e1      	b.n	10d4e <bt_le_adv_start_legacy+0xda>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10d8a:	2301      	movs	r3, #1
   10d8c:	773b      	strb	r3, [r7, #28]
   10d8e:	e7ec      	b.n	10d6a <bt_le_adv_start_legacy+0xf6>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   10d90:	2300      	movs	r3, #0
   10d92:	773b      	strb	r3, [r7, #28]
   10d94:	e007      	b.n	10da6 <bt_le_adv_start_legacy+0x132>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   10d96:	f413 7f00 	tst.w	r3, #512	; 0x200
   10d9a:	d102      	bne.n	10da2 <bt_le_adv_start_legacy+0x12e>
   10d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10d9e:	2b00      	cmp	r3, #0
   10da0:	d056      	beq.n	10e50 <bt_le_adv_start_legacy+0x1dc>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   10da2:	2302      	movs	r3, #2
   10da4:	773b      	strb	r3, [r7, #28]
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10da6:	210f      	movs	r1, #15
   10da8:	f242 0006 	movw	r0, #8198	; 0x2006
   10dac:	f7fe f97e 	bl	f0ac <bt_hci_cmd_create>
	if (!buf) {
   10db0:	4681      	mov	r9, r0
   10db2:	2800      	cmp	r0, #0
   10db4:	f000 80b4 	beq.w	10f20 <bt_le_adv_start_legacy+0x2ac>
   10db8:	220f      	movs	r2, #15
   10dba:	f107 0118 	add.w	r1, r7, #24
   10dbe:	300c      	adds	r0, #12
   10dc0:	f006 fbe4 	bl	1758c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   10dc4:	2200      	movs	r2, #0
   10dc6:	4649      	mov	r1, r9
   10dc8:	f242 0006 	movw	r0, #8198	; 0x2006
   10dcc:	f7fe f9ac 	bl	f128 <bt_hci_cmd_send_sync>
	if (err) {
   10dd0:	4681      	mov	r9, r0
   10dd2:	2800      	cmp	r0, #0
   10dd4:	d137      	bne.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		return err;
	}

	if (!dir_adv) {
   10dd6:	2e00      	cmp	r6, #0
   10dd8:	d041      	beq.n	10e5e <bt_le_adv_start_legacy+0x1ea>

			return err;
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   10dda:	2101      	movs	r1, #1
   10ddc:	4628      	mov	r0, r5
   10dde:	f006 fa7a 	bl	172d6 <bt_le_adv_set_enable>
	if (err) {
   10de2:	4681      	mov	r9, r0
   10de4:	2800      	cmp	r0, #0
   10de6:	d14c      	bne.n	10e82 <bt_le_adv_start_legacy+0x20e>
		 */
		bt_conn_unref(conn);
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10de8:	2e00      	cmp	r6, #0
   10dea:	f000 8085 	beq.w	10ef8 <bt_le_adv_start_legacy+0x284>
   10dee:	4602      	mov	r2, r0
   10df0:	f002 0201 	and.w	r2, r2, #1
   10df4:	210e      	movs	r1, #14
   10df6:	4640      	mov	r0, r8
   10df8:	f006 fa0c 	bl	17214 <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   10dfc:	f1bb 0f01 	cmp.w	fp, #1
   10e00:	bf14      	ite	ne
   10e02:	2200      	movne	r2, #0
   10e04:	2201      	moveq	r2, #1
   10e06:	2108      	movs	r1, #8
   10e08:	4640      	mov	r0, r8
   10e0a:	f006 fa03 	bl	17214 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   10e0e:	f1bb 0f02 	cmp.w	fp, #2
   10e12:	bf14      	ite	ne
   10e14:	2200      	movne	r2, #0
   10e16:	2201      	moveq	r2, #1
   10e18:	2109      	movs	r1, #9
   10e1a:	4640      	mov	r0, r8
   10e1c:	f006 f9fa 	bl	17214 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   10e20:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10e22:	f002 0201 	and.w	r2, r2, #1
   10e26:	210a      	movs	r1, #10
   10e28:	4640      	mov	r0, r8
   10e2a:	f006 f9f3 	bl	17214 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10e2e:	4652      	mov	r2, sl
   10e30:	210b      	movs	r1, #11
   10e32:	4640      	mov	r0, r8
   10e34:	f006 f9ee 	bl	17214 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   10e38:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10e3a:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10e3e:	210d      	movs	r1, #13
   10e40:	4640      	mov	r0, r8
   10e42:	f006 f9e7 	bl	17214 <atomic_set_bit_to>

	return 0;
}
   10e46:	4648      	mov	r0, r9
   10e48:	372c      	adds	r7, #44	; 0x2c
   10e4a:	46bd      	mov	sp, r7
   10e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   10e50:	2802      	cmp	r0, #2
   10e52:	d0a6      	beq.n	10da2 <bt_le_adv_start_legacy+0x12e>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   10e54:	2303      	movs	r3, #3
   10e56:	773b      	strb	r3, [r7, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   10e58:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   10e5c:	e7a3      	b.n	10da6 <bt_le_adv_start_legacy+0x132>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10e5e:	f8cd b00c 	str.w	fp, [sp, #12]
   10e62:	f8cd a008 	str.w	sl, [sp, #8]
   10e66:	2300      	movs	r3, #0
   10e68:	9301      	str	r3, [sp, #4]
   10e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10e6c:	9300      	str	r3, [sp, #0]
   10e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10e70:	687a      	ldr	r2, [r7, #4]
   10e72:	68b9      	ldr	r1, [r7, #8]
   10e74:	4628      	mov	r0, r5
   10e76:	f006 f931 	bl	170dc <le_adv_update>
		if (err) {
   10e7a:	4681      	mov	r9, r0
   10e7c:	2800      	cmp	r0, #0
   10e7e:	d0ac      	beq.n	10dda <bt_le_adv_start_legacy+0x166>
   10e80:	e7e1      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		LOG_ERR("Failed to start advertiser");
   10e82:	466d      	mov	r5, sp
   10e84:	b088      	sub	sp, #32
   10e86:	ab04      	add	r3, sp, #16
   10e88:	f113 0210 	adds.w	r2, r3, #16
   10e8c:	d02e      	beq.n	10eec <bt_le_adv_start_legacy+0x278>
   10e8e:	210c      	movs	r1, #12
   10e90:	b142      	cbz	r2, 10ea4 <bt_le_adv_start_legacy+0x230>
   10e92:	4608      	mov	r0, r1
   10e94:	2904      	cmp	r1, #4
   10e96:	dd01      	ble.n	10e9c <bt_le_adv_start_legacy+0x228>
   10e98:	4c26      	ldr	r4, [pc, #152]	; (10f34 <bt_le_adv_start_legacy+0x2c0>)
   10e9a:	615c      	str	r4, [r3, #20]
   10e9c:	2808      	cmp	r0, #8
   10e9e:	dd01      	ble.n	10ea4 <bt_le_adv_start_legacy+0x230>
   10ea0:	4825      	ldr	r0, [pc, #148]	; (10f38 <bt_le_adv_start_legacy+0x2c4>)
   10ea2:	6198      	str	r0, [r3, #24]
   10ea4:	290b      	cmp	r1, #11
   10ea6:	dd24      	ble.n	10ef2 <bt_le_adv_start_legacy+0x27e>
   10ea8:	240c      	movs	r4, #12
   10eaa:	b13a      	cbz	r2, 10ebc <bt_le_adv_start_legacy+0x248>
   10eac:	2103      	movs	r1, #3
   10eae:	7539      	strb	r1, [r7, #20]
   10eb0:	2100      	movs	r1, #0
   10eb2:	7579      	strb	r1, [r7, #21]
   10eb4:	75b9      	strb	r1, [r7, #22]
   10eb6:	75f9      	strb	r1, [r7, #23]
   10eb8:	6978      	ldr	r0, [r7, #20]
   10eba:	6118      	str	r0, [r3, #16]
   10ebc:	2100      	movs	r1, #0
   10ebe:	f36f 0100 	bfc	r1, #0, #1
   10ec2:	f36f 0141 	bfc	r1, #1, #1
   10ec6:	f36f 0182 	bfc	r1, #2, #1
   10eca:	f36f 01c5 	bfc	r1, #3, #3
   10ece:	2301      	movs	r3, #1
   10ed0:	f363 1188 	bfi	r1, r3, #6, #3
   10ed4:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10ed8:	f363 2153 	bfi	r1, r3, #9, #11
   10edc:	f36f 511f 	bfc	r1, #20, #12
   10ee0:	2300      	movs	r3, #0
   10ee2:	4816      	ldr	r0, [pc, #88]	; (10f3c <bt_le_adv_start_legacy+0x2c8>)
   10ee4:	f7fa fe3e 	bl	bb64 <z_impl_z_log_msg_static_create>
   10ee8:	46ad      	mov	sp, r5
		return err;
   10eea:	e7ac      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		LOG_ERR("Failed to start advertiser");
   10eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10ef0:	e7ce      	b.n	10e90 <bt_le_adv_start_legacy+0x21c>
   10ef2:	f06f 041b 	mvn.w	r4, #27
   10ef6:	e7d8      	b.n	10eaa <bt_le_adv_start_legacy+0x236>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   10ef8:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10efa:	f013 0f02 	tst.w	r3, #2
   10efe:	d001      	beq.n	10f04 <bt_le_adv_start_legacy+0x290>
   10f00:	4602      	mov	r2, r0
   10f02:	e775      	b.n	10df0 <bt_le_adv_start_legacy+0x17c>
   10f04:	2201      	movs	r2, #1
   10f06:	e773      	b.n	10df0 <bt_le_adv_start_legacy+0x17c>
		return -EAGAIN;
   10f08:	f06f 090a 	mvn.w	r9, #10
   10f0c:	e79b      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		return -EINVAL;
   10f0e:	f06f 0915 	mvn.w	r9, #21
   10f12:	e798      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		return -EINVAL;
   10f14:	f06f 0915 	mvn.w	r9, #21
   10f18:	e795      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		return -EALREADY;
   10f1a:	f06f 0977 	mvn.w	r9, #119	; 0x77
   10f1e:	e792      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
		return -ENOBUFS;
   10f20:	f06f 0968 	mvn.w	r9, #104	; 0x68
   10f24:	e78f      	b.n	10e46 <bt_le_adv_start_legacy+0x1d2>
   10f26:	bf00      	nop
   10f28:	20000274 	.word	0x20000274
   10f2c:	200001a0 	.word	0x200001a0
   10f30:	0001a3f0 	.word	0x0001a3f0
   10f34:	0001adc0 	.word	0x0001adc0
   10f38:	0001ae38 	.word	0x0001ae38
   10f3c:	00019984 	.word	0x00019984

00010f40 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f44:	b082      	sub	sp, #8
   10f46:	4606      	mov	r6, r0
   10f48:	460c      	mov	r4, r1
   10f4a:	4615      	mov	r5, r2
   10f4c:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
   10f4e:	f7ff fdb1 	bl	10ab4 <adv_get_legacy>
	int err;

	if (!adv) {
   10f52:	b1f8      	cbz	r0, 10f94 <bt_le_adv_start+0x54>
   10f54:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10f56:	9b08      	ldr	r3, [sp, #32]
   10f58:	9301      	str	r3, [sp, #4]
   10f5a:	9700      	str	r7, [sp, #0]
   10f5c:	462b      	mov	r3, r5
   10f5e:	4622      	mov	r2, r4
   10f60:	4631      	mov	r1, r6
   10f62:	f7ff fe87 	bl	10c74 <bt_le_adv_start_legacy>
   10f66:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   10f68:	4629      	mov	r1, r5
   10f6a:	4620      	mov	r0, r4
   10f6c:	f006 f83c 	bl	16fe8 <ad_is_limited>
   10f70:	b918      	cbnz	r0, 10f7a <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   10f72:	4630      	mov	r0, r6
   10f74:	b002      	add	sp, #8
   10f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   10f7a:	f108 0818 	add.w	r8, r8, #24
   10f7e:	4907      	ldr	r1, [pc, #28]	; (10f9c <bt_le_adv_start+0x5c>)
   10f80:	4640      	mov	r0, r8
   10f82:	f007 ff5b 	bl	18e3c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   10f86:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   10f8a:	2300      	movs	r3, #0
   10f8c:	4640      	mov	r0, r8
   10f8e:	f003 fbfb 	bl	14788 <k_work_reschedule>
   10f92:	e7ee      	b.n	10f72 <bt_le_adv_start+0x32>
		return -ENOMEM;
   10f94:	f06f 060b 	mvn.w	r6, #11
   10f98:	e7eb      	b.n	10f72 <bt_le_adv_start+0x32>
   10f9a:	bf00      	nop
   10f9c:	00011071 	.word	0x00011071

00010fa0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10fa0:	b5b0      	push	{r4, r5, r7, lr}
   10fa2:	b082      	sub	sp, #8
   10fa4:	af00      	add	r7, sp, #0
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   10fa6:	f7ff fe61 	bl	10c6c <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   10faa:	b1c8      	cbz	r0, 10fe0 <bt_le_adv_stop+0x40>
   10fac:	4604      	mov	r4, r0
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   10fae:	f006 f996 	bl	172de <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   10fb2:	f104 0010 	add.w	r0, r4, #16
   10fb6:	f3bf 8f5b 	dmb	ish
   10fba:	e850 3f00 	ldrex	r3, [r0]
   10fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   10fc2:	e840 3200 	strex	r2, r3, [r0]
   10fc6:	2a00      	cmp	r2, #0
   10fc8:	d1f7      	bne.n	10fba <bt_le_adv_stop+0x1a>
   10fca:	f3bf 8f5b 	dmb	ish

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10fce:	2107      	movs	r1, #7
   10fd0:	f006 f83d 	bl	1704e <atomic_test_bit>
   10fd4:	2800      	cmp	r0, #0
   10fd6:	d13f      	bne.n	11058 <bt_le_adv_stop+0xb8>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   10fd8:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10fda:	3708      	adds	r7, #8
   10fdc:	46bd      	mov	sp, r7
   10fde:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("No valid legacy adv");
   10fe0:	466d      	mov	r5, sp
   10fe2:	b088      	sub	sp, #32
   10fe4:	466b      	mov	r3, sp
   10fe6:	f113 0210 	adds.w	r2, r3, #16
   10fea:	d02f      	beq.n	1104c <bt_le_adv_stop+0xac>
   10fec:	210c      	movs	r1, #12
   10fee:	b142      	cbz	r2, 11002 <bt_le_adv_stop+0x62>
   10ff0:	4608      	mov	r0, r1
   10ff2:	2904      	cmp	r1, #4
   10ff4:	dd01      	ble.n	10ffa <bt_le_adv_stop+0x5a>
   10ff6:	4c1b      	ldr	r4, [pc, #108]	; (11064 <bt_le_adv_stop+0xc4>)
   10ff8:	615c      	str	r4, [r3, #20]
   10ffa:	2808      	cmp	r0, #8
   10ffc:	dd01      	ble.n	11002 <bt_le_adv_stop+0x62>
   10ffe:	481a      	ldr	r0, [pc, #104]	; (11068 <bt_le_adv_stop+0xc8>)
   11000:	6198      	str	r0, [r3, #24]
   11002:	290b      	cmp	r1, #11
   11004:	dd25      	ble.n	11052 <bt_le_adv_stop+0xb2>
   11006:	240c      	movs	r4, #12
   11008:	b13a      	cbz	r2, 1101a <bt_le_adv_stop+0x7a>
   1100a:	2103      	movs	r1, #3
   1100c:	7139      	strb	r1, [r7, #4]
   1100e:	2100      	movs	r1, #0
   11010:	7179      	strb	r1, [r7, #5]
   11012:	71b9      	strb	r1, [r7, #6]
   11014:	71f9      	strb	r1, [r7, #7]
   11016:	6878      	ldr	r0, [r7, #4]
   11018:	6118      	str	r0, [r3, #16]
   1101a:	2100      	movs	r1, #0
   1101c:	f36f 0100 	bfc	r1, #0, #1
   11020:	f36f 0141 	bfc	r1, #1, #1
   11024:	f36f 0182 	bfc	r1, #2, #1
   11028:	f36f 01c5 	bfc	r1, #3, #3
   1102c:	2301      	movs	r3, #1
   1102e:	f363 1188 	bfi	r1, r3, #6, #3
   11032:	f3c4 030a 	ubfx	r3, r4, #0, #11
   11036:	f363 2153 	bfi	r1, r3, #9, #11
   1103a:	f36f 511f 	bfc	r1, #20, #12
   1103e:	2300      	movs	r3, #0
   11040:	480a      	ldr	r0, [pc, #40]	; (1106c <bt_le_adv_stop+0xcc>)
   11042:	f7fa fd8f 	bl	bb64 <z_impl_z_log_msg_static_create>
   11046:	46ad      	mov	sp, r5
		return 0;
   11048:	2000      	movs	r0, #0
   1104a:	e7c6      	b.n	10fda <bt_le_adv_stop+0x3a>
		LOG_ERR("No valid legacy adv");
   1104c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11050:	e7cd      	b.n	10fee <bt_le_adv_stop+0x4e>
   11052:	f06f 041b 	mvn.w	r4, #27
   11056:	e7d7      	b.n	11008 <bt_le_adv_stop+0x68>
		err = bt_le_adv_set_enable_legacy(adv, false);
   11058:	2100      	movs	r1, #0
   1105a:	4620      	mov	r0, r4
   1105c:	f006 f913 	bl	17286 <bt_le_adv_set_enable_legacy>
		if (err) {
   11060:	e7bb      	b.n	10fda <bt_le_adv_stop+0x3a>
   11062:	bf00      	nop
   11064:	0001ade0 	.word	0x0001ade0
   11068:	0001ae1c 	.word	0x0001ae1c
   1106c:	00019984 	.word	0x00019984

00011070 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   11070:	b5f0      	push	{r4, r5, r6, r7, lr}
   11072:	b083      	sub	sp, #12
   11074:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   11076:	f7ff ff93 	bl	10fa0 <bt_le_adv_stop>
#endif
	if (err) {
   1107a:	2800      	cmp	r0, #0
   1107c:	d038      	beq.n	110f0 <adv_timeout+0x80>
   1107e:	4605      	mov	r5, r0
		LOG_WRN("Failed to stop advertising: %d", err);
   11080:	466c      	mov	r4, sp
   11082:	b088      	sub	sp, #32
   11084:	466b      	mov	r3, sp
   11086:	f113 0210 	adds.w	r2, r3, #16
   1108a:	d034      	beq.n	110f6 <adv_timeout+0x86>
   1108c:	2110      	movs	r1, #16
   1108e:	b15a      	cbz	r2, 110a8 <adv_timeout+0x38>
   11090:	4608      	mov	r0, r1
   11092:	2904      	cmp	r1, #4
   11094:	dd01      	ble.n	1109a <adv_timeout+0x2a>
   11096:	4e1b      	ldr	r6, [pc, #108]	; (11104 <adv_timeout+0x94>)
   11098:	615e      	str	r6, [r3, #20]
   1109a:	2808      	cmp	r0, #8
   1109c:	dd01      	ble.n	110a2 <adv_timeout+0x32>
   1109e:	4e1a      	ldr	r6, [pc, #104]	; (11108 <adv_timeout+0x98>)
   110a0:	619e      	str	r6, [r3, #24]
   110a2:	280c      	cmp	r0, #12
   110a4:	dd00      	ble.n	110a8 <adv_timeout+0x38>
   110a6:	61dd      	str	r5, [r3, #28]
   110a8:	290f      	cmp	r1, #15
   110aa:	dd27      	ble.n	110fc <adv_timeout+0x8c>
   110ac:	f04f 0c10 	mov.w	ip, #16
   110b0:	b13a      	cbz	r2, 110c2 <adv_timeout+0x52>
   110b2:	2104      	movs	r1, #4
   110b4:	7139      	strb	r1, [r7, #4]
   110b6:	2100      	movs	r1, #0
   110b8:	7179      	strb	r1, [r7, #5]
   110ba:	71b9      	strb	r1, [r7, #6]
   110bc:	71f9      	strb	r1, [r7, #7]
   110be:	6878      	ldr	r0, [r7, #4]
   110c0:	6118      	str	r0, [r3, #16]
   110c2:	2100      	movs	r1, #0
   110c4:	f36f 0100 	bfc	r1, #0, #1
   110c8:	f36f 0141 	bfc	r1, #1, #1
   110cc:	f36f 0182 	bfc	r1, #2, #1
   110d0:	f36f 01c5 	bfc	r1, #3, #3
   110d4:	2302      	movs	r3, #2
   110d6:	f363 1188 	bfi	r1, r3, #6, #3
   110da:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   110de:	f36c 2153 	bfi	r1, ip, #9, #11
   110e2:	f36f 511f 	bfc	r1, #20, #12
   110e6:	2300      	movs	r3, #0
   110e8:	4808      	ldr	r0, [pc, #32]	; (1110c <adv_timeout+0x9c>)
   110ea:	f7fa fd3b 	bl	bb64 <z_impl_z_log_msg_static_create>
   110ee:	46a5      	mov	sp, r4
	}
}
   110f0:	370c      	adds	r7, #12
   110f2:	46bd      	mov	sp, r7
   110f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Failed to stop advertising: %d", err);
   110f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   110fa:	e7c8      	b.n	1108e <adv_timeout+0x1e>
   110fc:	f06f 0c1b 	mvn.w	ip, #27
   11100:	e7d6      	b.n	110b0 <adv_timeout+0x40>
   11102:	bf00      	nop
   11104:	0001adf8 	.word	0x0001adf8
   11108:	0001ae2c 	.word	0x0001ae2c
   1110c:	00019984 	.word	0x00019984

00011110 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   11110:	4b03      	ldr	r3, [pc, #12]	; (11120 <pool_id+0x10>)
   11112:	1ac0      	subs	r0, r0, r3
   11114:	1080      	asrs	r0, r0, #2
}
   11116:	4b03      	ldr	r3, [pc, #12]	; (11124 <pool_id+0x14>)
   11118:	fb03 f000 	mul.w	r0, r3, r0
   1111c:	4770      	bx	lr
   1111e:	bf00      	nop
   11120:	2000044c 	.word	0x2000044c
   11124:	ba2e8ba3 	.word	0xba2e8ba3

00011128 <net_buf_pool_get>:
}
   11128:	222c      	movs	r2, #44	; 0x2c
   1112a:	4b02      	ldr	r3, [pc, #8]	; (11134 <net_buf_pool_get+0xc>)
   1112c:	fb02 3000 	mla	r0, r2, r0, r3
   11130:	4770      	bx	lr
   11132:	bf00      	nop
   11134:	2000044c 	.word	0x2000044c

00011138 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   11138:	4800      	ldr	r0, [pc, #0]	; (1113c <get_hf_flags+0x4>)
   1113a:	4770      	bx	lr
   1113c:	2000200c 	.word	0x2000200c

00011140 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11140:	4b03      	ldr	r3, [pc, #12]	; (11150 <get_subsys+0x10>)
   11142:	1ac0      	subs	r0, r0, r3
   11144:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   11146:	4b03      	ldr	r3, [pc, #12]	; (11154 <get_subsys+0x14>)
   11148:	fb03 f000 	mul.w	r0, r3, r0
   1114c:	4770      	bx	lr
   1114e:	bf00      	nop
   11150:	20001fcc 	.word	0x20001fcc
   11154:	b6db6db7 	.word	0xb6db6db7

00011158 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11158:	b538      	push	{r3, r4, r5, lr}
   1115a:	4605      	mov	r5, r0
   1115c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1115e:	f7ff ffef 	bl	11140 <get_subsys>
   11162:	4601      	mov	r1, r0
   11164:	2240      	movs	r2, #64	; 0x40
   11166:	4803      	ldr	r0, [pc, #12]	; (11174 <onoff_stop+0x1c>)
   11168:	f006 fac8 	bl	176fc <stop>
   1116c:	4601      	mov	r1, r0
	notify(mgr, res);
   1116e:	4628      	mov	r0, r5
   11170:	47a0      	blx	r4
}
   11172:	bd38      	pop	{r3, r4, r5, pc}
   11174:	00019778 	.word	0x00019778

00011178 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11178:	b530      	push	{r4, r5, lr}
   1117a:	b083      	sub	sp, #12
   1117c:	4605      	mov	r5, r0
   1117e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11180:	f7ff ffde 	bl	11140 <get_subsys>
   11184:	4601      	mov	r1, r0
   11186:	2340      	movs	r3, #64	; 0x40
   11188:	9300      	str	r3, [sp, #0]
   1118a:	4623      	mov	r3, r4
   1118c:	4a05      	ldr	r2, [pc, #20]	; (111a4 <onoff_start+0x2c>)
   1118e:	4806      	ldr	r0, [pc, #24]	; (111a8 <onoff_start+0x30>)
   11190:	f006 face 	bl	17730 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   11194:	1e01      	subs	r1, r0, #0
   11196:	db01      	blt.n	1119c <onoff_start+0x24>
		notify(mgr, err);
	}
}
   11198:	b003      	add	sp, #12
   1119a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1119c:	4628      	mov	r0, r5
   1119e:	47a0      	blx	r4
}
   111a0:	e7fa      	b.n	11198 <onoff_start+0x20>
   111a2:	bf00      	nop
   111a4:	00017779 	.word	0x00017779
   111a8:	00019778 	.word	0x00019778

000111ac <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   111ac:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   111ae:	b110      	cbz	r0, 111b6 <clock_event_handler+0xa>
   111b0:	2801      	cmp	r0, #1
   111b2:	d00d      	beq.n	111d0 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   111b4:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   111b6:	2100      	movs	r1, #0
   111b8:	4808      	ldr	r0, [pc, #32]	; (111dc <clock_event_handler+0x30>)
   111ba:	f006 fa28 	bl	1760e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   111be:	6883      	ldr	r3, [r0, #8]
   111c0:	f013 0f07 	tst.w	r3, #7
   111c4:	d1f6      	bne.n	111b4 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   111c6:	2100      	movs	r1, #0
   111c8:	4804      	ldr	r0, [pc, #16]	; (111dc <clock_event_handler+0x30>)
   111ca:	f006 fa85 	bl	176d8 <clkstarted_handle>
   111ce:	e7f1      	b.n	111b4 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   111d0:	2101      	movs	r1, #1
   111d2:	4802      	ldr	r0, [pc, #8]	; (111dc <clock_event_handler+0x30>)
   111d4:	f006 fa80 	bl	176d8 <clkstarted_handle>
}
   111d8:	e7ec      	b.n	111b4 <clock_event_handler+0x8>
   111da:	bf00      	nop
   111dc:	00019778 	.word	0x00019778

000111e0 <generic_hfclk_start>:
{
   111e0:	b510      	push	{r4, lr}
   111e2:	b082      	sub	sp, #8
	__asm__ volatile(
   111e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   111e8:	f3ef 8411 	mrs	r4, BASEPRI
   111ec:	f383 8812 	msr	BASEPRI_MAX, r3
   111f0:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   111f4:	4a14      	ldr	r2, [pc, #80]	; (11248 <generic_hfclk_start+0x68>)
   111f6:	6813      	ldr	r3, [r2, #0]
   111f8:	f043 0102 	orr.w	r1, r3, #2
   111fc:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   111fe:	f013 0f01 	tst.w	r3, #1
   11202:	d109      	bne.n	11218 <generic_hfclk_start+0x38>
	bool already_started = false;
   11204:	2300      	movs	r3, #0
	__asm__ volatile(
   11206:	f384 8811 	msr	BASEPRI, r4
   1120a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1120e:	b9b3      	cbnz	r3, 1123e <generic_hfclk_start+0x5e>
	hfclk_start();
   11210:	f006 faba 	bl	17788 <hfclk_start>
}
   11214:	b002      	add	sp, #8
   11216:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   11218:	f10d 0207 	add.w	r2, sp, #7
   1121c:	2101      	movs	r1, #1
   1121e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   11222:	f006 f9d1 	bl	175c8 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11226:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1122a:	2b01      	cmp	r3, #1
   1122c:	d001      	beq.n	11232 <generic_hfclk_start+0x52>
	bool already_started = false;
   1122e:	2300      	movs	r3, #0
   11230:	e7e9      	b.n	11206 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   11232:	f7ff ff81 	bl	11138 <get_hf_flags>
   11236:	f006 fa3c 	bl	176b2 <set_on_state>
			already_started = true;
   1123a:	2301      	movs	r3, #1
   1123c:	e7e3      	b.n	11206 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1123e:	2100      	movs	r1, #0
   11240:	4802      	ldr	r0, [pc, #8]	; (1124c <generic_hfclk_start+0x6c>)
   11242:	f006 fa49 	bl	176d8 <clkstarted_handle>
		return;
   11246:	e7e5      	b.n	11214 <generic_hfclk_start+0x34>
   11248:	2000201c 	.word	0x2000201c
   1124c:	00019778 	.word	0x00019778

00011250 <generic_hfclk_stop>:
{
   11250:	b510      	push	{r4, lr}
	__asm__ volatile(
   11252:	f04f 0340 	mov.w	r3, #64	; 0x40
   11256:	f3ef 8411 	mrs	r4, BASEPRI
   1125a:	f383 8812 	msr	BASEPRI_MAX, r3
   1125e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   11262:	4a08      	ldr	r2, [pc, #32]	; (11284 <generic_hfclk_stop+0x34>)
   11264:	6813      	ldr	r3, [r2, #0]
   11266:	f023 0102 	bic.w	r1, r3, #2
   1126a:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1126c:	f013 0f01 	tst.w	r3, #1
   11270:	d004      	beq.n	1127c <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   11272:	f384 8811 	msr	BASEPRI, r4
   11276:	f3bf 8f6f 	isb	sy
}
   1127a:	bd10      	pop	{r4, pc}
		hfclk_stop();
   1127c:	f006 fa89 	bl	17792 <hfclk_stop>
   11280:	e7f7      	b.n	11272 <generic_hfclk_stop+0x22>
   11282:	bf00      	nop
   11284:	2000201c 	.word	0x2000201c

00011288 <lfclk_spinwait>:
{
   11288:	b570      	push	{r4, r5, r6, lr}
   1128a:	b082      	sub	sp, #8
   1128c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1128e:	2801      	cmp	r0, #1
   11290:	d107      	bne.n	112a2 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11296:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1129a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1129e:	2b01      	cmp	r3, #1
   112a0:	d04c      	beq.n	1133c <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   112a2:	f007 fbba 	bl	18a1a <k_is_in_isr>
   112a6:	4604      	mov	r4, r0
   112a8:	b918      	cbnz	r0, 112b2 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   112aa:	4b28      	ldr	r3, [pc, #160]	; (1134c <lfclk_spinwait+0xc4>)
   112ac:	781b      	ldrb	r3, [r3, #0]
   112ae:	2b00      	cmp	r3, #0
   112b0:	d139      	bne.n	11326 <lfclk_spinwait+0x9e>
	__asm__ volatile(
   112b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   112b6:	f3ef 8611 	mrs	r6, BASEPRI
   112ba:	f383 8812 	msr	BASEPRI_MAX, r3
   112be:	f3bf 8f6f 	isb	sy
   112c2:	2401      	movs	r4, #1
	if (!isr_mode) {
   112c4:	b924      	cbnz	r4, 112d0 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   112c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   112ca:	2202      	movs	r2, #2
   112cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   112d0:	aa01      	add	r2, sp, #4
   112d2:	2100      	movs	r1, #0
   112d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   112d8:	f006 f976 	bl	175c8 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   112dc:	b120      	cbz	r0, 112e8 <lfclk_spinwait+0x60>
		 && ((type == target_type)
   112de:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   112e0:	2b01      	cmp	r3, #1
   112e2:	d026      	beq.n	11332 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   112e4:	2d01      	cmp	r5, #1
   112e6:	d024      	beq.n	11332 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   112e8:	b1fc      	cbz	r4, 1132a <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   112ea:	4630      	mov	r0, r6
   112ec:	f7fb f926 	bl	c53c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   112f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   112f4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   112f8:	2b00      	cmp	r3, #0
   112fa:	d1e9      	bne.n	112d0 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   112fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11300:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   11304:	2b00      	cmp	r3, #0
   11306:	d0e3      	beq.n	112d0 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1130c:	2200      	movs	r2, #0
   1130e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11312:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   11316:	2201      	movs	r2, #1
   11318:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1131c:	490c      	ldr	r1, [pc, #48]	; (11350 <lfclk_spinwait+0xc8>)
   1131e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11322:	609a      	str	r2, [r3, #8]
}
   11324:	e7d4      	b.n	112d0 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
   11326:	2600      	movs	r6, #0
   11328:	e7cc      	b.n	112c4 <lfclk_spinwait+0x3c>
				k_msleep(1);
   1132a:	2001      	movs	r0, #1
   1132c:	f006 fa3b 	bl	177a6 <k_msleep>
   11330:	e7de      	b.n	112f0 <lfclk_spinwait+0x68>
	if (isr_mode) {
   11332:	b12c      	cbz	r4, 11340 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   11334:	f386 8811 	msr	BASEPRI, r6
   11338:	f3bf 8f6f 	isb	sy
}
   1133c:	b002      	add	sp, #8
   1133e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   11340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11344:	2202      	movs	r2, #2
   11346:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1134a:	e7f7      	b.n	1133c <lfclk_spinwait+0xb4>
   1134c:	2000264a 	.word	0x2000264a
   11350:	e000e100 	.word	0xe000e100

00011354 <api_blocking_start>:
{
   11354:	b500      	push	{lr}
   11356:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11358:	f8cd d000 	str.w	sp, [sp]
   1135c:	f8cd d004 	str.w	sp, [sp, #4]
   11360:	2300      	movs	r3, #0
   11362:	9302      	str	r3, [sp, #8]
   11364:	2301      	movs	r3, #1
   11366:	9303      	str	r3, [sp, #12]
   11368:	ab04      	add	r3, sp, #16
   1136a:	9304      	str	r3, [sp, #16]
   1136c:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1136e:	466b      	mov	r3, sp
   11370:	4a06      	ldr	r2, [pc, #24]	; (1138c <api_blocking_start+0x38>)
   11372:	f006 f9f9 	bl	17768 <api_start>
	if (err < 0) {
   11376:	2800      	cmp	r0, #0
   11378:	db05      	blt.n	11386 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1137e:	2300      	movs	r3, #0
   11380:	4668      	mov	r0, sp
   11382:	f003 f893 	bl	144ac <z_impl_k_sem_take>
}
   11386:	b007      	add	sp, #28
   11388:	f85d fb04 	ldr.w	pc, [sp], #4
   1138c:	000177d3 	.word	0x000177d3

00011390 <anomaly_132_workaround>:
{
   11390:	b508      	push	{r3, lr}
	if (!once) {
   11392:	4b06      	ldr	r3, [pc, #24]	; (113ac <anomaly_132_workaround+0x1c>)
   11394:	781b      	ldrb	r3, [r3, #0]
   11396:	b103      	cbz	r3, 1139a <anomaly_132_workaround+0xa>
}
   11398:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
   1139a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1139e:	f007 ff8e 	bl	192be <z_impl_k_busy_wait>
		once = true;
   113a2:	4b02      	ldr	r3, [pc, #8]	; (113ac <anomaly_132_workaround+0x1c>)
   113a4:	2201      	movs	r2, #1
   113a6:	701a      	strb	r2, [r3, #0]
}
   113a8:	e7f6      	b.n	11398 <anomaly_132_workaround+0x8>
   113aa:	bf00      	nop
   113ac:	20002646 	.word	0x20002646

000113b0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   113b0:	b570      	push	{r4, r5, r6, lr}
   113b2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   113b4:	2200      	movs	r2, #0
   113b6:	2101      	movs	r1, #1
   113b8:	4610      	mov	r0, r2
   113ba:	f005 fc30 	bl	16c1e <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   113be:	4811      	ldr	r0, [pc, #68]	; (11404 <clk_init+0x54>)
   113c0:	f001 fdc6 	bl	12f50 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   113c4:	4b10      	ldr	r3, [pc, #64]	; (11408 <clk_init+0x58>)
   113c6:	4298      	cmp	r0, r3
   113c8:	d119      	bne.n	113fe <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   113ca:	f007 f84d 	bl	18468 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   113ce:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   113d0:	2c01      	cmp	r4, #1
   113d2:	d812      	bhi.n	113fa <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   113d4:	4621      	mov	r1, r4
   113d6:	4630      	mov	r0, r6
   113d8:	f006 f919 	bl	1760e <get_sub_data>
   113dc:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   113de:	4621      	mov	r1, r4
   113e0:	4630      	mov	r0, r6
   113e2:	f006 f921 	bl	17628 <get_onoff_manager>
   113e6:	4909      	ldr	r1, [pc, #36]	; (1140c <clk_init+0x5c>)
   113e8:	f004 fc80 	bl	15cec <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   113ec:	2800      	cmp	r0, #0
   113ee:	db05      	blt.n	113fc <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   113f0:	2301      	movs	r3, #1
   113f2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   113f4:	441c      	add	r4, r3
   113f6:	b2e4      	uxtb	r4, r4
   113f8:	e7ea      	b.n	113d0 <clk_init+0x20>
	}

	return 0;
   113fa:	2000      	movs	r0, #0
}
   113fc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   113fe:	f06f 0004 	mvn.w	r0, #4
   11402:	e7fb      	b.n	113fc <clk_init+0x4c>
   11404:	000111ad 	.word	0x000111ad
   11408:	0bad0000 	.word	0x0bad0000
   1140c:	0001ae94 	.word	0x0001ae94

00011410 <z_nrf_clock_control_lf_on>:
{
   11410:	b510      	push	{r4, lr}
   11412:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11414:	4b10      	ldr	r3, [pc, #64]	; (11458 <z_nrf_clock_control_lf_on+0x48>)
   11416:	2101      	movs	r1, #1
   11418:	f3bf 8f5b 	dmb	ish
   1141c:	e853 2f00 	ldrex	r2, [r3]
   11420:	e843 1000 	strex	r0, r1, [r3]
   11424:	2800      	cmp	r0, #0
   11426:	d1f9      	bne.n	1141c <z_nrf_clock_control_lf_on+0xc>
   11428:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1142c:	b11a      	cbz	r2, 11436 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1142e:	1e63      	subs	r3, r4, #1
   11430:	2b01      	cmp	r3, #1
   11432:	d90d      	bls.n	11450 <z_nrf_clock_control_lf_on+0x40>
}
   11434:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   11436:	4809      	ldr	r0, [pc, #36]	; (1145c <z_nrf_clock_control_lf_on+0x4c>)
   11438:	f006 f8f6 	bl	17628 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1143c:	4908      	ldr	r1, [pc, #32]	; (11460 <z_nrf_clock_control_lf_on+0x50>)
   1143e:	2300      	movs	r3, #0
   11440:	604b      	str	r3, [r1, #4]
   11442:	608b      	str	r3, [r1, #8]
   11444:	60cb      	str	r3, [r1, #12]
   11446:	2301      	movs	r3, #1
   11448:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1144a:	f004 fc6c 	bl	15d26 <onoff_request>
   1144e:	e7ee      	b.n	1142e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   11450:	4620      	mov	r0, r4
   11452:	f7ff ff19 	bl	11288 <lfclk_spinwait>
		break;
   11456:	e7ed      	b.n	11434 <z_nrf_clock_control_lf_on+0x24>
   11458:	20001fc8 	.word	0x20001fc8
   1145c:	00019778 	.word	0x00019778
   11460:	20001fb8 	.word	0x20001fb8

00011464 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   11464:	b510      	push	{r4, lr}
   11466:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
   11468:	280a      	cmp	r0, #10
   1146a:	d006      	beq.n	1147a <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1146c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1146e:	4806      	ldr	r0, [pc, #24]	; (11488 <console_out+0x24>)
   11470:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   11472:	685b      	ldr	r3, [r3, #4]
   11474:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   11476:	4620      	mov	r0, r4
   11478:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   1147a:	4803      	ldr	r0, [pc, #12]	; (11488 <console_out+0x24>)
   1147c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1147e:	685b      	ldr	r3, [r3, #4]
   11480:	210d      	movs	r1, #13
   11482:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   11484:	e7f2      	b.n	1146c <console_out+0x8>
   11486:	bf00      	nop
   11488:	000197d8 	.word	0x000197d8

0001148c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   1148c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1148e:	4c04      	ldr	r4, [pc, #16]	; (114a0 <uart_console_hook_install+0x14>)
   11490:	4620      	mov	r0, r4
   11492:	f7fc fe93 	bl	e1bc <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   11496:	4620      	mov	r0, r4
   11498:	f7f9 fc44 	bl	ad24 <__printk_hook_install>
#endif
}
   1149c:	bd10      	pop	{r4, pc}
   1149e:	bf00      	nop
   114a0:	00011465 	.word	0x00011465

000114a4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   114a4:	b508      	push	{r3, lr}
   114a6:	4805      	ldr	r0, [pc, #20]	; (114bc <uart_console_init+0x18>)
   114a8:	f007 fa11 	bl	188ce <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   114ac:	b118      	cbz	r0, 114b6 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   114ae:	f7ff ffed 	bl	1148c <uart_console_hook_install>

	return 0;
   114b2:	2000      	movs	r0, #0
}
   114b4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   114b6:	f06f 0012 	mvn.w	r0, #18
   114ba:	e7fb      	b.n	114b4 <uart_console_init+0x10>
   114bc:	000197d8 	.word	0x000197d8

000114c0 <random_byte_get>:
	__asm__ volatile(
   114c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   114c4:	f3ef 8311 	mrs	r3, BASEPRI
   114c8:	f382 8812 	msr	BASEPRI_MAX, r2
   114cc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   114d0:	4a0a      	ldr	r2, [pc, #40]	; (114fc <random_byte_get+0x3c>)
   114d2:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   114d6:	b16a      	cbz	r2, 114f4 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   114d8:	4a08      	ldr	r2, [pc, #32]	; (114fc <random_byte_get+0x3c>)
   114da:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   114de:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   114e0:	2100      	movs	r1, #0
   114e2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   114e6:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   114ea:	f383 8811 	msr	BASEPRI, r3
   114ee:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   114f2:	4770      	bx	lr
	int retval = -EAGAIN;
   114f4:	f06f 000a 	mvn.w	r0, #10
   114f8:	e7f7      	b.n	114ea <random_byte_get+0x2a>
   114fa:	bf00      	nop
   114fc:	4000d000 	.word	0x4000d000

00011500 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   11500:	b5f0      	push	{r4, r5, r6, r7, lr}
   11502:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   11504:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   11506:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   11508:	f04f 0340 	mov.w	r3, #64	; 0x40
   1150c:	f3ef 8011 	mrs	r0, BASEPRI
   11510:	f383 8812 	msr	BASEPRI_MAX, r3
   11514:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   11518:	f89e 6000 	ldrb.w	r6, [lr]
   1151c:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1151e:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   11522:	1bad      	subs	r5, r5, r6
   11524:	4025      	ands	r5, r4
	if (available < len) {
   11526:	42aa      	cmp	r2, r5
   11528:	d900      	bls.n	1152c <rng_pool_get+0x2c>
		len = available;
   1152a:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1152c:	eb06 0c02 	add.w	ip, r6, r2
   11530:	ea0c 0c04 	and.w	ip, ip, r4
   11534:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   11538:	f380 8811 	msr	BASEPRI, r0
   1153c:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   11540:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11542:	e007      	b.n	11554 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   11544:	eb0e 0203 	add.w	r2, lr, r3
   11548:	7952      	ldrb	r2, [r2, #5]
   1154a:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1154e:	3301      	adds	r3, #1
   11550:	4023      	ands	r3, r4
	while (likely(len--)) {
   11552:	4662      	mov	r2, ip
   11554:	f102 3cff 	add.w	ip, r2, #4294967295
   11558:	fa1f fc8c 	uxth.w	ip, ip
   1155c:	2a00      	cmp	r2, #0
   1155e:	d1f1      	bne.n	11544 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   11560:	42be      	cmp	r6, r7
   11562:	d10f      	bne.n	11584 <rng_pool_get+0x84>
	__asm__ volatile(
   11564:	f04f 0240 	mov.w	r2, #64	; 0x40
   11568:	f3ef 8311 	mrs	r3, BASEPRI
   1156c:	f382 8812 	msr	BASEPRI_MAX, r2
   11570:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   11574:	f89e 2000 	ldrb.w	r2, [lr]
   11578:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   1157c:	f383 8811 	msr	BASEPRI, r3
   11580:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   11584:	1a40      	subs	r0, r0, r1
   11586:	b280      	uxth	r0, r0
	available = available - len;
   11588:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   1158a:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1158e:	42ab      	cmp	r3, r5
   11590:	d302      	bcc.n	11598 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11592:	4b02      	ldr	r3, [pc, #8]	; (1159c <rng_pool_get+0x9c>)
   11594:	2201      	movs	r2, #1
   11596:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   11598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1159a:	bf00      	nop
   1159c:	4000d000 	.word	0x4000d000

000115a0 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   115a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115a2:	460d      	mov	r5, r1
   115a4:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   115a6:	f013 0f01 	tst.w	r3, #1
   115aa:	d103      	bne.n	115b4 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   115ac:	4826      	ldr	r0, [pc, #152]	; (11648 <entropy_nrf5_get_entropy_isr+0xa8>)
   115ae:	f7ff ffa7 	bl	11500 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   115b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   115b4:	b90a      	cbnz	r2, 115ba <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   115b6:	4620      	mov	r0, r4
   115b8:	e7fb      	b.n	115b2 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   115ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   115be:	f3ef 8611 	mrs	r6, BASEPRI
   115c2:	f383 8812 	msr	BASEPRI_MAX, r3
   115c6:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   115ca:	200d      	movs	r0, #13
   115cc:	f7fb f92c 	bl	c828 <arch_irq_is_enabled>
   115d0:	4607      	mov	r7, r0
		irq_disable(IRQN);
   115d2:	200d      	movs	r0, #13
   115d4:	f005 fb1e 	bl	16c14 <arch_irq_disable>
	__asm__ volatile(
   115d8:	f386 8811 	msr	BASEPRI, r6
   115dc:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   115e0:	4b1a      	ldr	r3, [pc, #104]	; (1164c <entropy_nrf5_get_entropy_isr+0xac>)
   115e2:	2200      	movs	r2, #0
   115e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   115e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   115ec:	2201      	movs	r2, #1
   115ee:	601a      	str	r2, [r3, #0]
   115f0:	4b17      	ldr	r3, [pc, #92]	; (11650 <entropy_nrf5_get_entropy_isr+0xb0>)
   115f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   115f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   115fa:	4626      	mov	r6, r4
   115fc:	e00b      	b.n	11616 <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   115fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   11602:	f3ef 8011 	mrs	r0, BASEPRI
   11606:	f383 8812 	msr	BASEPRI_MAX, r3
   1160a:	f3bf 8f6f 	isb	sy
   1160e:	f7fa ff95 	bl	c53c <arch_cpu_atomic_idle>
}
   11612:	e000      	b.n	11616 <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   11614:	b18e      	cbz	r6, 1163a <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   11616:	4b0d      	ldr	r3, [pc, #52]	; (1164c <entropy_nrf5_get_entropy_isr+0xac>)
   11618:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1161c:	2b00      	cmp	r3, #0
   1161e:	d0ee      	beq.n	115fe <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   11620:	f7ff ff4e 	bl	114c0 <random_byte_get>
   11624:	4b0a      	ldr	r3, [pc, #40]	; (11650 <entropy_nrf5_get_entropy_isr+0xb0>)
   11626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1162a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1162e:	2800      	cmp	r0, #0
   11630:	dbf0      	blt.n	11614 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   11632:	3e01      	subs	r6, #1
   11634:	b2b6      	uxth	r6, r6
   11636:	55a8      	strb	r0, [r5, r6]
   11638:	e7ec      	b.n	11614 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   1163a:	2f00      	cmp	r7, #0
   1163c:	d0bb      	beq.n	115b6 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1163e:	200d      	movs	r0, #13
   11640:	f005 fae3 	bl	16c0a <arch_irq_enable>
   11644:	e7b7      	b.n	115b6 <entropy_nrf5_get_entropy_isr+0x16>
   11646:	bf00      	nop
   11648:	20002050 	.word	0x20002050
   1164c:	4000d000 	.word	0x4000d000
   11650:	e000e100 	.word	0xe000e100

00011654 <isr>:
{
   11654:	b510      	push	{r4, lr}
	byte = random_byte_get();
   11656:	f7ff ff33 	bl	114c0 <random_byte_get>
	if (byte < 0) {
   1165a:	2800      	cmp	r0, #0
   1165c:	db06      	blt.n	1166c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1165e:	b2c4      	uxtb	r4, r0
   11660:	4621      	mov	r1, r4
   11662:	480a      	ldr	r0, [pc, #40]	; (1168c <isr+0x38>)
   11664:	f006 f8c1 	bl	177ea <rng_pool_put>
	if (ret < 0) {
   11668:	2800      	cmp	r0, #0
   1166a:	db00      	blt.n	1166e <isr+0x1a>
}
   1166c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1166e:	4621      	mov	r1, r4
   11670:	4807      	ldr	r0, [pc, #28]	; (11690 <isr+0x3c>)
   11672:	f006 f8ba 	bl	177ea <rng_pool_put>
		if (ret < 0) {
   11676:	2800      	cmp	r0, #0
   11678:	db03      	blt.n	11682 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1167a:	4806      	ldr	r0, [pc, #24]	; (11694 <isr+0x40>)
   1167c:	f002 feee 	bl	1445c <z_impl_k_sem_give>
}
   11680:	e7f4      	b.n	1166c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11682:	4b05      	ldr	r3, [pc, #20]	; (11698 <isr+0x44>)
   11684:	2201      	movs	r2, #1
   11686:	605a      	str	r2, [r3, #4]
}
   11688:	e7f7      	b.n	1167a <isr+0x26>
   1168a:	bf00      	nop
   1168c:	20002050 	.word	0x20002050
   11690:	20002065 	.word	0x20002065
   11694:	20002038 	.word	0x20002038
   11698:	4000d000 	.word	0x4000d000

0001169c <entropy_nrf5_get_entropy>:
{
   1169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1169e:	460f      	mov	r7, r1
   116a0:	4614      	mov	r4, r2
	while (len) {
   116a2:	e007      	b.n	116b4 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   116a4:	f04f 32ff 	mov.w	r2, #4294967295
   116a8:	f04f 33ff 	mov.w	r3, #4294967295
   116ac:	f106 0018 	add.w	r0, r6, #24
   116b0:	f002 fefc 	bl	144ac <z_impl_k_sem_take>
   116b4:	b1bc      	cbz	r4, 116e6 <entropy_nrf5_get_entropy+0x4a>
   116b6:	4e0d      	ldr	r6, [pc, #52]	; (116ec <entropy_nrf5_get_entropy+0x50>)
   116b8:	f04f 32ff 	mov.w	r2, #4294967295
   116bc:	f04f 33ff 	mov.w	r3, #4294967295
   116c0:	4630      	mov	r0, r6
   116c2:	f002 fef3 	bl	144ac <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   116c6:	4622      	mov	r2, r4
   116c8:	4639      	mov	r1, r7
   116ca:	f106 0045 	add.w	r0, r6, #69	; 0x45
   116ce:	f7ff ff17 	bl	11500 <rng_pool_get>
   116d2:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   116d4:	4630      	mov	r0, r6
   116d6:	f002 fec1 	bl	1445c <z_impl_k_sem_give>
		if (bytes == 0U) {
   116da:	2d00      	cmp	r5, #0
   116dc:	d0e2      	beq.n	116a4 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   116de:	1b64      	subs	r4, r4, r5
   116e0:	b2a4      	uxth	r4, r4
		buf += bytes;
   116e2:	442f      	add	r7, r5
   116e4:	e7e6      	b.n	116b4 <entropy_nrf5_get_entropy+0x18>
}
   116e6:	2000      	movs	r0, #0
   116e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116ea:	bf00      	nop
   116ec:	20002020 	.word	0x20002020

000116f0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   116f0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   116f2:	4c18      	ldr	r4, [pc, #96]	; (11754 <entropy_nrf5_init+0x64>)
   116f4:	2201      	movs	r2, #1
   116f6:	4611      	mov	r1, r2
   116f8:	4620      	mov	r0, r4
   116fa:	f007 fa99 	bl	18c30 <z_impl_k_sem_init>
   116fe:	2201      	movs	r2, #1
   11700:	2100      	movs	r1, #0
   11702:	f104 0018 	add.w	r0, r4, #24
   11706:	f007 fa93 	bl	18c30 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1170a:	2204      	movs	r2, #4
   1170c:	2108      	movs	r1, #8
   1170e:	f104 0045 	add.w	r0, r4, #69	; 0x45
   11712:	f006 f87d 	bl	17810 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   11716:	220c      	movs	r2, #12
   11718:	2110      	movs	r1, #16
   1171a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1171e:	f006 f877 	bl	17810 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   11722:	4b0d      	ldr	r3, [pc, #52]	; (11758 <entropy_nrf5_init+0x68>)
   11724:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   11728:	f022 0201 	bic.w	r2, r2, #1
   1172c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   11730:	2400      	movs	r4, #0
   11732:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   11736:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1173a:	2101      	movs	r1, #1
   1173c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11740:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   11742:	4622      	mov	r2, r4
   11744:	200d      	movs	r0, #13
   11746:	f005 fa6a 	bl	16c1e <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1174a:	200d      	movs	r0, #13
   1174c:	f005 fa5d 	bl	16c0a <arch_irq_enable>

	return 0;
}
   11750:	4620      	mov	r0, r4
   11752:	bd10      	pop	{r4, pc}
   11754:	20002020 	.word	0x20002020
   11758:	4000d000 	.word	0x4000d000

0001175c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1175c:	b908      	cbnz	r0, 11762 <get_dev+0x6>
   1175e:	4802      	ldr	r0, [pc, #8]	; (11768 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   11760:	4770      	bx	lr
	const struct device *dev = NULL;
   11762:	2000      	movs	r0, #0
   11764:	4770      	bx	lr
   11766:	bf00      	nop
   11768:	00019790 	.word	0x00019790

0001176c <gpio_nrfx_pin_interrupt_configure>:
{
   1176c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1176e:	b085      	sub	sp, #20
   11770:	460e      	mov	r6, r1
   11772:	4619      	mov	r1, r3
	return port->config;
   11774:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11776:	7b1b      	ldrb	r3, [r3, #12]
   11778:	f006 051f 	and.w	r5, r6, #31
   1177c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   11780:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   11784:	d022      	beq.n	117cc <gpio_nrfx_pin_interrupt_configure+0x60>
   11786:	4607      	mov	r7, r0
   11788:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1178a:	2300      	movs	r3, #0
   1178c:	9301      	str	r3, [sp, #4]
   1178e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   11790:	4610      	mov	r0, r2
   11792:	f006 f932 	bl	179fa <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11796:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   1179a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1179c:	6899      	ldr	r1, [r3, #8]
   1179e:	40f1      	lsrs	r1, r6
   117a0:	f011 0f01 	tst.w	r1, #1
   117a4:	d102      	bne.n	117ac <gpio_nrfx_pin_interrupt_configure+0x40>
   117a6:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   117aa:	d014      	beq.n	117d6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   117ac:	2300      	movs	r3, #0
   117ae:	aa01      	add	r2, sp, #4
   117b0:	4619      	mov	r1, r3
   117b2:	4628      	mov	r0, r5
   117b4:	f001 fec4 	bl	13540 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   117b8:	4b19      	ldr	r3, [pc, #100]	; (11820 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   117ba:	4298      	cmp	r0, r3
   117bc:	d12c      	bne.n	11818 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   117be:	2101      	movs	r1, #1
   117c0:	4628      	mov	r0, r5
   117c2:	f002 f81d 	bl	13800 <nrfx_gpiote_trigger_enable>
	return 0;
   117c6:	2000      	movs	r0, #0
}
   117c8:	b005      	add	sp, #20
   117ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   117cc:	4628      	mov	r0, r5
   117ce:	f002 f853 	bl	13878 <nrfx_gpiote_trigger_disable>
		return 0;
   117d2:	2000      	movs	r0, #0
   117d4:	e7f8      	b.n	117c8 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   117d6:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   117da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   117de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   117e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   117e6:	f013 0f01 	tst.w	r3, #1
   117ea:	d1df      	bne.n	117ac <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   117ec:	f10d 010f 	add.w	r1, sp, #15
   117f0:	4628      	mov	r0, r5
   117f2:	f001 ffa9 	bl	13748 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   117f6:	4b0b      	ldr	r3, [pc, #44]	; (11824 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   117f8:	4298      	cmp	r0, r3
   117fa:	d003      	beq.n	11804 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
   117fc:	f10d 030f 	add.w	r3, sp, #15
   11800:	9302      	str	r3, [sp, #8]
   11802:	e7d3      	b.n	117ac <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   11804:	f10d 000f 	add.w	r0, sp, #15
   11808:	f001 fff2 	bl	137f0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1180c:	4b04      	ldr	r3, [pc, #16]	; (11820 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   1180e:	4298      	cmp	r0, r3
   11810:	d0f4      	beq.n	117fc <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
   11812:	f06f 000b 	mvn.w	r0, #11
   11816:	e7d7      	b.n	117c8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   11818:	f06f 0015 	mvn.w	r0, #21
   1181c:	e7d4      	b.n	117c8 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1181e:	bf00      	nop
   11820:	0bad0000 	.word	0x0bad0000
   11824:	0bad0004 	.word	0x0bad0004

00011828 <gpio_nrfx_pin_configure>:
{
   11828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1182c:	b086      	sub	sp, #24
   1182e:	460e      	mov	r6, r1
   11830:	4614      	mov	r4, r2
	return port->config;
   11832:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11836:	f898 300c 	ldrb.w	r3, [r8, #12]
   1183a:	f001 051f 	and.w	r5, r1, #31
   1183e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11842:	f10d 0117 	add.w	r1, sp, #23
   11846:	4628      	mov	r0, r5
   11848:	f001 ff7e 	bl	13748 <nrfx_gpiote_channel_get>
   1184c:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1184e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   11852:	d03a      	beq.n	118ca <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11854:	2100      	movs	r1, #0
   11856:	9103      	str	r1, [sp, #12]
   11858:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1185a:	460b      	mov	r3, r1
   1185c:	aa03      	add	r2, sp, #12
   1185e:	4628      	mov	r0, r5
   11860:	f001 fe6e 	bl	13540 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11864:	4b33      	ldr	r3, [pc, #204]	; (11934 <gpio_nrfx_pin_configure+0x10c>)
   11866:	4298      	cmp	r0, r3
   11868:	d161      	bne.n	1192e <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   1186a:	429f      	cmp	r7, r3
   1186c:	d03d      	beq.n	118ea <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   1186e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   11872:	d049      	beq.n	11908 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   11874:	f10d 0103 	add.w	r1, sp, #3
   11878:	4620      	mov	r0, r4
   1187a:	f006 f843 	bl	17904 <get_drive>
		if (rv != 0) {
   1187e:	4607      	mov	r7, r0
   11880:	bb50      	cbnz	r0, 118d8 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   11882:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11886:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1188a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1188e:	bf0c      	ite	eq
   11890:	2301      	moveq	r3, #1
   11892:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   11894:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   11898:	4620      	mov	r0, r4
   1189a:	f006 f876 	bl	1798a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1189e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   118a2:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   118a6:	d025      	beq.n	118f4 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   118a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   118ac:	2301      	movs	r3, #1
   118ae:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   118b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   118b4:	2200      	movs	r2, #0
   118b6:	a901      	add	r1, sp, #4
   118b8:	4628      	mov	r0, r5
   118ba:	f001 fed5 	bl	13668 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   118be:	4b1d      	ldr	r3, [pc, #116]	; (11934 <gpio_nrfx_pin_configure+0x10c>)
   118c0:	4298      	cmp	r0, r3
   118c2:	d009      	beq.n	118d8 <gpio_nrfx_pin_configure+0xb0>
   118c4:	f06f 0715 	mvn.w	r7, #21
   118c8:	e006      	b.n	118d8 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   118ca:	4628      	mov	r0, r5
   118cc:	f001 fffe 	bl	138cc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   118d0:	4b18      	ldr	r3, [pc, #96]	; (11934 <gpio_nrfx_pin_configure+0x10c>)
   118d2:	429f      	cmp	r7, r3
   118d4:	d004      	beq.n	118e0 <gpio_nrfx_pin_configure+0xb8>
		return 0;
   118d6:	2700      	movs	r7, #0
}
   118d8:	4638      	mov	r0, r7
   118da:	b006      	add	sp, #24
   118dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   118e0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   118e4:	f001 ff7c 	bl	137e0 <nrfx_gpiote_channel_free>
   118e8:	e7f5      	b.n	118d6 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   118ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
   118ee:	f001 ff77 	bl	137e0 <nrfx_gpiote_channel_free>
   118f2:	e7bc      	b.n	1186e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   118f4:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   118f8:	d0dc      	beq.n	118b4 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   118fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   118fe:	2301      	movs	r3, #1
   11900:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   11902:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   11906:	e7d5      	b.n	118b4 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   11908:	4620      	mov	r0, r4
   1190a:	f006 f83e 	bl	1798a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1190e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   11912:	2300      	movs	r3, #0
   11914:	461a      	mov	r2, r3
   11916:	a902      	add	r1, sp, #8
   11918:	4628      	mov	r0, r5
   1191a:	f001 fe11 	bl	13540 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1191e:	4b05      	ldr	r3, [pc, #20]	; (11934 <gpio_nrfx_pin_configure+0x10c>)
   11920:	4298      	cmp	r0, r3
   11922:	d101      	bne.n	11928 <gpio_nrfx_pin_configure+0x100>
   11924:	2700      	movs	r7, #0
   11926:	e7d7      	b.n	118d8 <gpio_nrfx_pin_configure+0xb0>
   11928:	f06f 0715 	mvn.w	r7, #21
   1192c:	e7d4      	b.n	118d8 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   1192e:	f06f 0715 	mvn.w	r7, #21
   11932:	e7d1      	b.n	118d8 <gpio_nrfx_pin_configure+0xb0>
   11934:	0bad0000 	.word	0x0bad0000

00011938 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   11938:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1193a:	f001 ff47 	bl	137cc <nrfx_gpiote_is_init>
   1193e:	b108      	cbz	r0, 11944 <gpio_nrfx_init+0xc>
		return 0;
   11940:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   11942:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   11944:	f001 ff18 	bl	13778 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   11948:	4b08      	ldr	r3, [pc, #32]	; (1196c <gpio_nrfx_init+0x34>)
   1194a:	4298      	cmp	r0, r3
   1194c:	d10a      	bne.n	11964 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1194e:	2100      	movs	r1, #0
   11950:	4807      	ldr	r0, [pc, #28]	; (11970 <gpio_nrfx_init+0x38>)
   11952:	f001 fef3 	bl	1373c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11956:	2200      	movs	r2, #0
   11958:	2105      	movs	r1, #5
   1195a:	2006      	movs	r0, #6
   1195c:	f005 f95f 	bl	16c1e <z_arm_irq_priority_set>
	return 0;
   11960:	2000      	movs	r0, #0
   11962:	e7ee      	b.n	11942 <gpio_nrfx_init+0xa>
		return -EIO;
   11964:	f06f 0004 	mvn.w	r0, #4
   11968:	e7eb      	b.n	11942 <gpio_nrfx_init+0xa>
   1196a:	bf00      	nop
   1196c:	0bad0000 	.word	0x0bad0000
   11970:	00017a33 	.word	0x00017a33

00011974 <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11974:	f04f 0c00 	mov.w	ip, #0
   11978:	458c      	cmp	ip, r1
   1197a:	f080 8100 	bcs.w	11b7e <pinctrl_configure_pins+0x20a>
{
   1197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11982:	e037      	b.n	119f4 <pinctrl_configure_pins+0x80>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   11984:	f04f 33ff 	mov.w	r3, #4294967295
   11988:	e03e      	b.n	11a08 <pinctrl_configure_pins+0x94>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   1198a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1198e:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11992:	4674      	mov	r4, lr
			write = 1U;
   11994:	4675      	mov	r5, lr
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   11996:	2b7f      	cmp	r3, #127	; 0x7f
   11998:	d025      	beq.n	119e6 <pinctrl_configure_pins+0x72>
			if (write != NO_WRITE) {
   1199a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1199e:	d00b      	beq.n	119b8 <pinctrl_configure_pins+0x44>
    if (value == 0)
   119a0:	2d00      	cmp	r5, #0
   119a2:	f040 80dc 	bne.w	11b5e <pinctrl_configure_pins+0x1ea>
    *p_pin = pin_number & 0x1F;
   119a6:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   119aa:	2501      	movs	r5, #1
   119ac:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTCLR = clr_mask;
   119b0:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   119b4:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   119b8:	59c5      	ldr	r5, [r0, r7]
   119ba:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   119be:	d002      	beq.n	119c6 <pinctrl_configure_pins+0x52>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   119c0:	f04f 0e01 	mov.w	lr, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   119c4:	2400      	movs	r4, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   119c6:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
   119ca:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   119ce:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   119d2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   119d6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   119da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   119de:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   119e2:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   119e6:	f10c 0c01 	add.w	ip, ip, #1
   119ea:	fa5f fc8c 	uxtb.w	ip, ip
   119ee:	458c      	cmp	ip, r1
   119f0:	f080 80bf 	bcs.w	11b72 <pinctrl_configure_pins+0x1fe>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   119f4:	ea4f 078c 	mov.w	r7, ip, lsl #2
   119f8:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
   119fc:	f3c4 2643 	ubfx	r6, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   11a00:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   11a04:	2b7f      	cmp	r3, #127	; 0x7f
   11a06:	d0bd      	beq.n	11984 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   11a08:	0c24      	lsrs	r4, r4, #16
   11a0a:	2c19      	cmp	r4, #25
   11a0c:	f200 80b3 	bhi.w	11b76 <pinctrl_configure_pins+0x202>
   11a10:	a501      	add	r5, pc, #4	; (adr r5, 11a18 <pinctrl_configure_pins+0xa4>)
   11a12:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
   11a16:	bf00      	nop
   11a18:	0001198b 	.word	0x0001198b
   11a1c:	00011a81 	.word	0x00011a81
   11a20:	00011a91 	.word	0x00011a91
   11a24:	00011a9f 	.word	0x00011a9f
   11a28:	00011aaf 	.word	0x00011aaf
   11a2c:	00011abd 	.word	0x00011abd
   11a30:	00011acb 	.word	0x00011acb
   11a34:	00011b77 	.word	0x00011b77
   11a38:	00011b77 	.word	0x00011b77
   11a3c:	00011b77 	.word	0x00011b77
   11a40:	00011b77 	.word	0x00011b77
   11a44:	00011adb 	.word	0x00011adb
   11a48:	00011aed 	.word	0x00011aed
   11a4c:	00011b77 	.word	0x00011b77
   11a50:	00011b77 	.word	0x00011b77
   11a54:	00011b77 	.word	0x00011b77
   11a58:	00011b77 	.word	0x00011b77
   11a5c:	00011b77 	.word	0x00011b77
   11a60:	00011b77 	.word	0x00011b77
   11a64:	00011b77 	.word	0x00011b77
   11a68:	00011b77 	.word	0x00011b77
   11a6c:	00011b77 	.word	0x00011b77
   11a70:	00011aff 	.word	0x00011aff
   11a74:	00011b11 	.word	0x00011b11
   11a78:	00011b23 	.word	0x00011b23
   11a7c:	00011b35 	.word	0x00011b35
			NRF_PSEL_UART(reg, RXD) = pin;
   11a80:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11a84:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11a88:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11a8a:	f04f 35ff 	mov.w	r5, #4294967295
			break;
   11a8e:	e782      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
   11a90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11a94:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11a98:	4674      	mov	r4, lr
			write = 1U;
   11a9a:	4675      	mov	r5, lr
			break;
   11a9c:	e77b      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
   11a9e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11aa2:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11aa6:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11aa8:	f04f 35ff 	mov.w	r5, #4294967295
			break;
   11aac:	e773      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   11aae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11ab2:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11ab6:	2401      	movs	r4, #1
			write = 0U;
   11ab8:	4675      	mov	r5, lr
			break;
   11aba:	e76c      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   11abc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11ac0:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11ac4:	4674      	mov	r4, lr
			write = 0U;
   11ac6:	2500      	movs	r5, #0
			break;
   11ac8:	e765      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   11aca:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11ace:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11ad2:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11ad4:	f04f 35ff 	mov.w	r5, #4294967295
			break;
   11ad8:	e75d      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   11ada:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   11ade:	b396      	cbz	r6, 11b46 <pinctrl_configure_pins+0x1d2>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11ae0:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11ae4:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11ae6:	f04f 35ff 	mov.w	r5, #4294967295
   11aea:	e754      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   11aec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   11af0:	b37e      	cbz	r6, 11b52 <pinctrl_configure_pins+0x1de>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11af2:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11af6:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   11af8:	f04f 35ff 	mov.w	r5, #4294967295
   11afc:	e74b      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   11afe:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   11b02:	59c5      	ldr	r5, [r0, r7]
   11b04:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11b08:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11b0c:	4674      	mov	r4, lr
			break;
   11b0e:	e742      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   11b10:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   11b14:	59c5      	ldr	r5, [r0, r7]
   11b16:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11b1a:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11b1e:	4674      	mov	r4, lr
			break;
   11b20:	e739      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   11b22:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   11b26:	59c5      	ldr	r5, [r0, r7]
   11b28:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11b2c:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11b30:	4674      	mov	r4, lr
			break;
   11b32:	e730      	b.n	11996 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   11b34:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   11b38:	59c5      	ldr	r5, [r0, r7]
   11b3a:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11b3e:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11b42:	4674      	mov	r4, lr
			break;
   11b44:	e727      	b.n	11996 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11b46:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11b48:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
   11b4a:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
   11b4e:	2606      	movs	r6, #6
   11b50:	e721      	b.n	11996 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   11b52:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   11b54:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
   11b56:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
   11b5a:	2606      	movs	r6, #6
   11b5c:	e71b      	b.n	11996 <pinctrl_configure_pins+0x22>
    *p_pin = pin_number & 0x1F;
   11b5e:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11b62:	2501      	movs	r5, #1
   11b64:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTSET = set_mask;
   11b68:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   11b6c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
}
   11b70:	e722      	b.n	119b8 <pinctrl_configure_pins+0x44>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   11b72:	2000      	movs	r0, #0
   11b74:	e001      	b.n	11b7a <pinctrl_configure_pins+0x206>
		switch (NRF_GET_FUN(pins[i])) {
   11b76:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   11b7e:	2000      	movs	r0, #0
}
   11b80:	4770      	bx	lr
   11b82:	bf00      	nop

00011b84 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   11b84:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   11b86:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   11b88:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   11b8c:	d06f      	beq.n	11c6e <baudrate_set+0xea>
   11b8e:	d83a      	bhi.n	11c06 <baudrate_set+0x82>
   11b90:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   11b94:	d06e      	beq.n	11c74 <baudrate_set+0xf0>
   11b96:	d90a      	bls.n	11bae <baudrate_set+0x2a>
   11b98:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   11b9c:	d075      	beq.n	11c8a <baudrate_set+0x106>
   11b9e:	d924      	bls.n	11bea <baudrate_set+0x66>
   11ba0:	f647 2312 	movw	r3, #31250	; 0x7a12
   11ba4:	4299      	cmp	r1, r3
   11ba6:	d12b      	bne.n	11c00 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11ba8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11bac:	e013      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11bae:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   11bb2:	d061      	beq.n	11c78 <baudrate_set+0xf4>
   11bb4:	d907      	bls.n	11bc6 <baudrate_set+0x42>
   11bb6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   11bba:	d063      	beq.n	11c84 <baudrate_set+0x100>
   11bbc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   11bc0:	d110      	bne.n	11be4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11bc2:	4b3c      	ldr	r3, [pc, #240]	; (11cb4 <baudrate_set+0x130>)
   11bc4:	e007      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11bc6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11bca:	d058      	beq.n	11c7e <baudrate_set+0xfa>
   11bcc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   11bd0:	d105      	bne.n	11bde <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   11bd2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11bd6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   11bda:	2000      	movs	r0, #0
   11bdc:	4770      	bx	lr
	switch (baudrate) {
   11bde:	f06f 0015 	mvn.w	r0, #21
   11be2:	4770      	bx	lr
   11be4:	f06f 0015 	mvn.w	r0, #21
   11be8:	4770      	bx	lr
   11bea:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   11bee:	d04e      	beq.n	11c8e <baudrate_set+0x10a>
   11bf0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   11bf4:	d101      	bne.n	11bfa <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11bf6:	4b30      	ldr	r3, [pc, #192]	; (11cb8 <baudrate_set+0x134>)
   11bf8:	e7ed      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11bfa:	f06f 0015 	mvn.w	r0, #21
   11bfe:	4770      	bx	lr
   11c00:	f06f 0015 	mvn.w	r0, #21
   11c04:	4770      	bx	lr
   11c06:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   11c0a:	d042      	beq.n	11c92 <baudrate_set+0x10e>
   11c0c:	d909      	bls.n	11c22 <baudrate_set+0x9e>
   11c0e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   11c12:	d046      	beq.n	11ca2 <baudrate_set+0x11e>
   11c14:	d91f      	bls.n	11c56 <baudrate_set+0xd2>
   11c16:	4b29      	ldr	r3, [pc, #164]	; (11cbc <baudrate_set+0x138>)
   11c18:	4299      	cmp	r1, r3
   11c1a:	d148      	bne.n	11cae <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11c1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11c20:	e7d9      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11c22:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   11c26:	d037      	beq.n	11c98 <baudrate_set+0x114>
   11c28:	d905      	bls.n	11c36 <baudrate_set+0xb2>
   11c2a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   11c2e:	d10f      	bne.n	11c50 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11c30:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11c34:	e7cf      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11c36:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   11c3a:	4299      	cmp	r1, r3
   11c3c:	d02e      	beq.n	11c9c <baudrate_set+0x118>
   11c3e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   11c42:	d102      	bne.n	11c4a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11c44:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11c48:	e7c5      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11c4a:	f06f 0015 	mvn.w	r0, #21
   11c4e:	4770      	bx	lr
   11c50:	f06f 0015 	mvn.w	r0, #21
   11c54:	4770      	bx	lr
   11c56:	4b1a      	ldr	r3, [pc, #104]	; (11cc0 <baudrate_set+0x13c>)
   11c58:	4299      	cmp	r1, r3
   11c5a:	d025      	beq.n	11ca8 <baudrate_set+0x124>
   11c5c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   11c60:	d102      	bne.n	11c68 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11c62:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11c66:	e7b6      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11c68:	f06f 0015 	mvn.w	r0, #21
   11c6c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11c6e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11c72:	e7b0      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11c74:	4b13      	ldr	r3, [pc, #76]	; (11cc4 <baudrate_set+0x140>)
   11c76:	e7ae      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11c78:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11c7c:	e7ab      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11c7e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11c82:	e7a8      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11c84:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11c88:	e7a5      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11c8a:	4b0f      	ldr	r3, [pc, #60]	; (11cc8 <baudrate_set+0x144>)
   11c8c:	e7a3      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11c8e:	4b0f      	ldr	r3, [pc, #60]	; (11ccc <baudrate_set+0x148>)
   11c90:	e7a1      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11c92:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11c96:	e79e      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11c98:	4b0d      	ldr	r3, [pc, #52]	; (11cd0 <baudrate_set+0x14c>)
   11c9a:	e79c      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11c9c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11ca0:	e799      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11ca2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11ca6:	e796      	b.n	11bd6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11ca8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11cac:	e793      	b.n	11bd6 <baudrate_set+0x52>
	switch (baudrate) {
   11cae:	f06f 0015 	mvn.w	r0, #21
}
   11cb2:	4770      	bx	lr
   11cb4:	0013b000 	.word	0x0013b000
   11cb8:	004ea000 	.word	0x004ea000
   11cbc:	000f4240 	.word	0x000f4240
   11cc0:	0003d090 	.word	0x0003d090
   11cc4:	00275000 	.word	0x00275000
   11cc8:	0075c000 	.word	0x0075c000
   11ccc:	003af000 	.word	0x003af000
   11cd0:	013a9000 	.word	0x013a9000

00011cd4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   11cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cd6:	4605      	mov	r5, r0
   11cd8:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   11cda:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11cdc:	f006 fe9d 	bl	18a1a <k_is_in_isr>
   11ce0:	b910      	cbnz	r0, 11ce8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   11ce2:	4b12      	ldr	r3, [pc, #72]	; (11d2c <uarte_nrfx_poll_out+0x58>)
   11ce4:	781b      	ldrb	r3, [r3, #0]
   11ce6:	b983      	cbnz	r3, 11d0a <uarte_nrfx_poll_out+0x36>
   11ce8:	f04f 0340 	mov.w	r3, #64	; 0x40
   11cec:	f3ef 8411 	mrs	r4, BASEPRI
   11cf0:	f383 8812 	msr	BASEPRI_MAX, r3
   11cf4:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   11cf8:	4628      	mov	r0, r5
   11cfa:	f005 ff5b 	bl	17bb4 <is_tx_ready>
   11cfe:	b940      	cbnz	r0, 11d12 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   11d00:	f384 8811 	msr	BASEPRI, r4
   11d04:	f3bf 8f6f 	isb	sy
}
   11d08:	e7ee      	b.n	11ce8 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   11d0a:	4628      	mov	r0, r5
   11d0c:	f005 ffb7 	bl	17c7e <wait_tx_ready>
   11d10:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   11d12:	693b      	ldr	r3, [r7, #16]
   11d14:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   11d16:	2201      	movs	r2, #1
   11d18:	6939      	ldr	r1, [r7, #16]
   11d1a:	4628      	mov	r0, r5
   11d1c:	f005 ff64 	bl	17be8 <tx_start>
	__asm__ volatile(
   11d20:	f384 8811 	msr	BASEPRI, r4
   11d24:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   11d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d2a:	bf00      	nop
   11d2c:	2000264a 	.word	0x2000264a

00011d30 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   11d30:	b5b0      	push	{r4, r5, r7, lr}
   11d32:	b082      	sub	sp, #8
   11d34:	af00      	add	r7, sp, #0
   11d36:	4604      	mov	r4, r0
   11d38:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   11d3a:	f101 0018 	add.w	r0, r1, #24
   11d3e:	f001 fe11 	bl	13964 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   11d42:	4b2a      	ldr	r3, [pc, #168]	; (11dec <endtx_stoptx_ppi_init+0xbc>)
   11d44:	4298      	cmp	r0, r3
   11d46:	d113      	bne.n	11d70 <endtx_stoptx_ppi_init+0x40>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   11d48:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   11d4a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   11d4e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11d50:	4a27      	ldr	r2, [pc, #156]	; (11df0 <endtx_stoptx_ppi_init+0xc0>)
   11d52:	33a2      	adds	r3, #162	; 0xa2
   11d54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11d5c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   11d5e:	7e29      	ldrb	r1, [r5, #24]
   11d60:	2301      	movs	r3, #1
   11d62:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   11d64:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   11d68:	2000      	movs	r0, #0
}
   11d6a:	3708      	adds	r7, #8
   11d6c:	46bd      	mov	sp, r7
   11d6e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   11d70:	466d      	mov	r5, sp
   11d72:	b088      	sub	sp, #32
   11d74:	466b      	mov	r3, sp
   11d76:	f113 0210 	adds.w	r2, r3, #16
   11d7a:	d030      	beq.n	11dde <endtx_stoptx_ppi_init+0xae>
   11d7c:	210c      	movs	r1, #12
   11d7e:	b142      	cbz	r2, 11d92 <endtx_stoptx_ppi_init+0x62>
   11d80:	4608      	mov	r0, r1
   11d82:	2904      	cmp	r1, #4
   11d84:	dd01      	ble.n	11d8a <endtx_stoptx_ppi_init+0x5a>
   11d86:	4c1b      	ldr	r4, [pc, #108]	; (11df4 <endtx_stoptx_ppi_init+0xc4>)
   11d88:	615c      	str	r4, [r3, #20]
   11d8a:	2808      	cmp	r0, #8
   11d8c:	dd01      	ble.n	11d92 <endtx_stoptx_ppi_init+0x62>
   11d8e:	481a      	ldr	r0, [pc, #104]	; (11df8 <endtx_stoptx_ppi_init+0xc8>)
   11d90:	6198      	str	r0, [r3, #24]
   11d92:	290b      	cmp	r1, #11
   11d94:	dd26      	ble.n	11de4 <endtx_stoptx_ppi_init+0xb4>
   11d96:	240c      	movs	r4, #12
   11d98:	b13a      	cbz	r2, 11daa <endtx_stoptx_ppi_init+0x7a>
   11d9a:	2103      	movs	r1, #3
   11d9c:	7139      	strb	r1, [r7, #4]
   11d9e:	2100      	movs	r1, #0
   11da0:	7179      	strb	r1, [r7, #5]
   11da2:	71b9      	strb	r1, [r7, #6]
   11da4:	71f9      	strb	r1, [r7, #7]
   11da6:	6878      	ldr	r0, [r7, #4]
   11da8:	6118      	str	r0, [r3, #16]
   11daa:	2100      	movs	r1, #0
   11dac:	f36f 0100 	bfc	r1, #0, #1
   11db0:	f36f 0141 	bfc	r1, #1, #1
   11db4:	f36f 0182 	bfc	r1, #2, #1
   11db8:	f36f 01c5 	bfc	r1, #3, #3
   11dbc:	2301      	movs	r3, #1
   11dbe:	f363 1188 	bfi	r1, r3, #6, #3
   11dc2:	f3c4 040a 	ubfx	r4, r4, #0, #11
   11dc6:	f364 2153 	bfi	r1, r4, #9, #11
   11dca:	f36f 511f 	bfc	r1, #20, #12
   11dce:	2300      	movs	r3, #0
   11dd0:	480a      	ldr	r0, [pc, #40]	; (11dfc <endtx_stoptx_ppi_init+0xcc>)
   11dd2:	f7f9 fec7 	bl	bb64 <z_impl_z_log_msg_static_create>
   11dd6:	46ad      	mov	sp, r5
		return -EIO;
   11dd8:	f06f 0004 	mvn.w	r0, #4
   11ddc:	e7c5      	b.n	11d6a <endtx_stoptx_ppi_init+0x3a>
		LOG_ERR("Failed to allocate PPI Channel");
   11dde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11de2:	e7cc      	b.n	11d7e <endtx_stoptx_ppi_init+0x4e>
   11de4:	f06f 041b 	mvn.w	r4, #27
   11de8:	e7d6      	b.n	11d98 <endtx_stoptx_ppi_init+0x68>
   11dea:	bf00      	nop
   11dec:	0bad0000 	.word	0x0bad0000
   11df0:	4001f000 	.word	0x4001f000
   11df4:	0001af78 	.word	0x0001af78
   11df8:	0001af9c 	.word	0x0001af9c
   11dfc:	00019a1c 	.word	0x00019a1c

00011e00 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11e00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   11e04:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11e08:	4b01      	ldr	r3, [pc, #4]	; (11e10 <set_comparator+0x10>)
   11e0a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   11e0e:	4770      	bx	lr
   11e10:	40011000 	.word	0x40011000

00011e14 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11e18:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11e1a:	4a02      	ldr	r2, [pc, #8]	; (11e24 <event_enable+0x10>)
   11e1c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   11e20:	4770      	bx	lr
   11e22:	bf00      	nop
   11e24:	40011000 	.word	0x40011000

00011e28 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11e2c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11e2e:	4a02      	ldr	r2, [pc, #8]	; (11e38 <event_disable+0x10>)
   11e30:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   11e34:	4770      	bx	lr
   11e36:	bf00      	nop
   11e38:	40011000 	.word	0x40011000

00011e3c <counter>:
     return p_reg->COUNTER;
   11e3c:	4b01      	ldr	r3, [pc, #4]	; (11e44 <counter+0x8>)
   11e3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   11e42:	4770      	bx	lr
   11e44:	40011000 	.word	0x40011000

00011e48 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   11e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e4c:	4606      	mov	r6, r0
   11e4e:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   11e50:	f7ff ffea 	bl	11e28 <event_disable>
	event_clear(chan);
   11e54:	4630      	mov	r0, r6
   11e56:	f005 ffbb 	bl	17dd0 <event_clear>
	uint32_t cc_val = req_cc;
   11e5a:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   11e5c:	2703      	movs	r7, #3
   11e5e:	e001      	b.n	11e64 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   11e60:	193d      	adds	r5, r7, r4
			cc_inc++;
   11e62:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   11e64:	4629      	mov	r1, r5
   11e66:	4630      	mov	r0, r6
   11e68:	f7ff ffca 	bl	11e00 <set_comparator>
		event_enable(chan);
   11e6c:	4630      	mov	r0, r6
   11e6e:	f7ff ffd1 	bl	11e14 <event_enable>
		now = counter();
   11e72:	f7ff ffe3 	bl	11e3c <counter>
   11e76:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   11e78:	1cc1      	adds	r1, r0, #3
   11e7a:	4628      	mov	r0, r5
   11e7c:	f005 ff97 	bl	17dae <counter_sub>
   11e80:	4b0b      	ldr	r3, [pc, #44]	; (11eb0 <set_alarm+0x68>)
   11e82:	4298      	cmp	r0, r3
   11e84:	d911      	bls.n	11eaa <set_alarm+0x62>
			if (event_check(chan)) {
   11e86:	4630      	mov	r0, r6
   11e88:	f005 ff95 	bl	17db6 <event_check>
   11e8c:	2800      	cmp	r0, #0
   11e8e:	d0e7      	beq.n	11e60 <set_alarm+0x18>
				now = counter();
   11e90:	f7ff ffd4 	bl	11e3c <counter>
   11e94:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   11e96:	4641      	mov	r1, r8
   11e98:	f005 ff89 	bl	17dae <counter_sub>
   11e9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11ea0:	d903      	bls.n	11eaa <set_alarm+0x62>
					event_clear(chan);
   11ea2:	4630      	mov	r0, r6
   11ea4:	f005 ff94 	bl	17dd0 <event_clear>
   11ea8:	e7da      	b.n	11e60 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   11eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11eae:	bf00      	nop
   11eb0:	007ffffd 	.word	0x007ffffd

00011eb4 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
   11eb4:	4b03      	ldr	r3, [pc, #12]	; (11ec4 <int_event_disable_rtc+0x10>)
   11eb6:	4a04      	ldr	r2, [pc, #16]	; (11ec8 <int_event_disable_rtc+0x14>)
   11eb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   11ebc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
   11ec0:	4770      	bx	lr
   11ec2:	bf00      	nop
   11ec4:	40011000 	.word	0x40011000
   11ec8:	000f0003 	.word	0x000f0003

00011ecc <compare_int_lock>:
{
   11ecc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   11ece:	2301      	movs	r3, #1
   11ed0:	4083      	lsls	r3, r0
   11ed2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11ed6:	4a0e      	ldr	r2, [pc, #56]	; (11f10 <compare_int_lock+0x44>)
   11ed8:	f3bf 8f5b 	dmb	ish
   11edc:	e852 1f00 	ldrex	r1, [r2]
   11ee0:	ea01 0e0c 	and.w	lr, r1, ip
   11ee4:	e842 e400 	strex	r4, lr, [r2]
   11ee8:	2c00      	cmp	r4, #0
   11eea:	d1f7      	bne.n	11edc <compare_int_lock+0x10>
   11eec:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11ef0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11ef4:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   11ef6:	4807      	ldr	r0, [pc, #28]	; (11f14 <compare_int_lock+0x48>)
   11ef8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   11efc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11f00:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   11f04:	420b      	tst	r3, r1
}
   11f06:	bf14      	ite	ne
   11f08:	2001      	movne	r0, #1
   11f0a:	2000      	moveq	r0, #0
   11f0c:	bd10      	pop	{r4, pc}
   11f0e:	bf00      	nop
   11f10:	20002084 	.word	0x20002084
   11f14:	40011000 	.word	0x40011000

00011f18 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   11f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11f1c:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   11f1e:	4a14      	ldr	r2, [pc, #80]	; (11f70 <channel_processing_check_and_clear+0x58>)
   11f20:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   11f24:	4213      	tst	r3, r2
   11f26:	d101      	bne.n	11f2c <channel_processing_check_and_clear+0x14>
	return false;
   11f28:	2000      	movs	r0, #0
}
   11f2a:	4770      	bx	lr
{
   11f2c:	b510      	push	{r4, lr}
   11f2e:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   11f30:	2301      	movs	r3, #1
   11f32:	4083      	lsls	r3, r0
   11f34:	43db      	mvns	r3, r3
   11f36:	490f      	ldr	r1, [pc, #60]	; (11f74 <channel_processing_check_and_clear+0x5c>)
   11f38:	f3bf 8f5b 	dmb	ish
   11f3c:	e851 2f00 	ldrex	r2, [r1]
   11f40:	ea02 0003 	and.w	r0, r2, r3
   11f44:	e841 0c00 	strex	ip, r0, [r1]
   11f48:	f1bc 0f00 	cmp.w	ip, #0
   11f4c:	d1f6      	bne.n	11f3c <channel_processing_check_and_clear+0x24>
   11f4e:	f3bf 8f5b 	dmb	ish
   11f52:	fa22 f304 	lsr.w	r3, r2, r4
   11f56:	f013 0f01 	tst.w	r3, #1
   11f5a:	d103      	bne.n	11f64 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   11f5c:	4620      	mov	r0, r4
   11f5e:	f005 ff2a 	bl	17db6 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   11f62:	b118      	cbz	r0, 11f6c <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   11f64:	4620      	mov	r0, r4
   11f66:	f005 ff33 	bl	17dd0 <event_clear>
			return true;
   11f6a:	2001      	movs	r0, #1
}
   11f6c:	bd10      	pop	{r4, pc}
   11f6e:	bf00      	nop
   11f70:	40011000 	.word	0x40011000
   11f74:	20002080 	.word	0x20002080

00011f78 <compare_int_unlock>:
	if (key) {
   11f78:	b901      	cbnz	r1, 11f7c <compare_int_unlock+0x4>
}
   11f7a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   11f7c:	2301      	movs	r3, #1
   11f7e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f80:	4a11      	ldr	r2, [pc, #68]	; (11fc8 <compare_int_unlock+0x50>)
   11f82:	f3bf 8f5b 	dmb	ish
   11f86:	e852 cf00 	ldrex	ip, [r2]
   11f8a:	ea4c 0c03 	orr.w	ip, ip, r3
   11f8e:	e842 c100 	strex	r1, ip, [r2]
   11f92:	2900      	cmp	r1, #0
   11f94:	d1f7      	bne.n	11f86 <compare_int_unlock+0xe>
   11f96:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11f9e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   11fa0:	4a0a      	ldr	r2, [pc, #40]	; (11fcc <compare_int_unlock+0x54>)
   11fa2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11fa6:	f3bf 8f5b 	dmb	ish
   11faa:	4b09      	ldr	r3, [pc, #36]	; (11fd0 <compare_int_unlock+0x58>)
   11fac:	681b      	ldr	r3, [r3, #0]
   11fae:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   11fb2:	40c3      	lsrs	r3, r0
   11fb4:	f013 0f01 	tst.w	r3, #1
   11fb8:	d0df      	beq.n	11f7a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11fba:	4b06      	ldr	r3, [pc, #24]	; (11fd4 <compare_int_unlock+0x5c>)
   11fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11fc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11fc4:	e7d9      	b.n	11f7a <compare_int_unlock+0x2>
   11fc6:	bf00      	nop
   11fc8:	20002084 	.word	0x20002084
   11fcc:	40011000 	.word	0x40011000
   11fd0:	20002080 	.word	0x20002080
   11fd4:	e000e100 	.word	0xe000e100

00011fd8 <sys_clock_timeout_handler>:
{
   11fd8:	b538      	push	{r3, r4, r5, lr}
   11fda:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   11fdc:	4610      	mov	r0, r2
   11fde:	4619      	mov	r1, r3
   11fe0:	f005 ff02 	bl	17de8 <absolute_time_to_cc>
   11fe4:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   11fe6:	490d      	ldr	r1, [pc, #52]	; (1201c <sys_clock_timeout_handler+0x44>)
   11fe8:	680b      	ldr	r3, [r1, #0]
   11fea:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   11fec:	181b      	adds	r3, r3, r0
   11fee:	684c      	ldr	r4, [r1, #4]
   11ff0:	f144 0400 	adc.w	r4, r4, #0
   11ff4:	600b      	str	r3, [r1, #0]
   11ff6:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   11ff8:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   11ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   12000:	d209      	bcs.n	12016 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   12002:	4b07      	ldr	r3, [pc, #28]	; (12020 <sys_clock_timeout_handler+0x48>)
   12004:	681b      	ldr	r3, [r3, #0]
   12006:	0a19      	lsrs	r1, r3, #8
   12008:	061b      	lsls	r3, r3, #24
   1200a:	18d4      	adds	r4, r2, r3
   1200c:	f141 0500 	adc.w	r5, r1, #0
   12010:	4b04      	ldr	r3, [pc, #16]	; (12024 <sys_clock_timeout_handler+0x4c>)
   12012:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   12016:	f003 f853 	bl	150c0 <sys_clock_announce>
}
   1201a:	bd38      	pop	{r3, r4, r5, pc}
   1201c:	20001878 	.word	0x20001878
   12020:	20002088 	.word	0x20002088
   12024:	20001880 	.word	0x20001880

00012028 <z_nrf_rtc_timer_read>:
{
   12028:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1202a:	4b0d      	ldr	r3, [pc, #52]	; (12060 <z_nrf_rtc_timer_read+0x38>)
   1202c:	681c      	ldr	r4, [r3, #0]
   1202e:	0a25      	lsrs	r5, r4, #8
   12030:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   12032:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   12036:	f7ff ff01 	bl	11e3c <counter>
   1203a:	4603      	mov	r3, r0
	val += cntr;
   1203c:	1900      	adds	r0, r0, r4
   1203e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   12042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12046:	d20a      	bcs.n	1205e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   12048:	4b06      	ldr	r3, [pc, #24]	; (12064 <z_nrf_rtc_timer_read+0x3c>)
   1204a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1204e:	4290      	cmp	r0, r2
   12050:	eb71 0303 	sbcs.w	r3, r1, r3
   12054:	d203      	bcs.n	1205e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   12056:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1205a:	f141 0100 	adc.w	r1, r1, #0
}
   1205e:	bd38      	pop	{r3, r4, r5, pc}
   12060:	20002088 	.word	0x20002088
   12064:	20001880 	.word	0x20001880

00012068 <compare_set_nolocks>:
{
   12068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1206a:	4606      	mov	r6, r0
   1206c:	4614      	mov	r4, r2
   1206e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   12070:	4610      	mov	r0, r2
   12072:	4619      	mov	r1, r3
   12074:	f005 feb8 	bl	17de8 <absolute_time_to_cc>
   12078:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1207a:	f7ff ffd5 	bl	12028 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1207e:	42a0      	cmp	r0, r4
   12080:	eb71 0305 	sbcs.w	r3, r1, r5
   12084:	d215      	bcs.n	120b2 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   12086:	1a20      	subs	r0, r4, r0
   12088:	eb65 0101 	sbc.w	r1, r5, r1
   1208c:	4b17      	ldr	r3, [pc, #92]	; (120ec <compare_set_nolocks+0x84>)
   1208e:	4298      	cmp	r0, r3
   12090:	f171 0100 	sbcs.w	r1, r1, #0
   12094:	d227      	bcs.n	120e6 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   12096:	4b16      	ldr	r3, [pc, #88]	; (120f0 <compare_set_nolocks+0x88>)
   12098:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1209c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   120a0:	42ab      	cmp	r3, r5
   120a2:	bf08      	it	eq
   120a4:	42a2      	cmpeq	r2, r4
   120a6:	d012      	beq.n	120ce <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   120a8:	4639      	mov	r1, r7
   120aa:	4630      	mov	r0, r6
   120ac:	f7ff fecc 	bl	11e48 <set_alarm>
   120b0:	e00d      	b.n	120ce <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   120b2:	2301      	movs	r3, #1
   120b4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   120b6:	4a0f      	ldr	r2, [pc, #60]	; (120f4 <compare_set_nolocks+0x8c>)
   120b8:	f3bf 8f5b 	dmb	ish
   120bc:	e852 0f00 	ldrex	r0, [r2]
   120c0:	4318      	orrs	r0, r3
   120c2:	e842 0100 	strex	r1, r0, [r2]
   120c6:	2900      	cmp	r1, #0
   120c8:	d1f8      	bne.n	120bc <compare_set_nolocks+0x54>
   120ca:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   120ce:	4b08      	ldr	r3, [pc, #32]	; (120f0 <compare_set_nolocks+0x88>)
   120d0:	0132      	lsls	r2, r6, #4
   120d2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   120d6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   120da:	9906      	ldr	r1, [sp, #24]
   120dc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   120de:	9b07      	ldr	r3, [sp, #28]
   120e0:	6073      	str	r3, [r6, #4]
	return ret;
   120e2:	2000      	movs	r0, #0
}
   120e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   120e6:	f06f 0015 	mvn.w	r0, #21
   120ea:	e7fb      	b.n	120e4 <compare_set_nolocks+0x7c>
   120ec:	00800001 	.word	0x00800001
   120f0:	20001868 	.word	0x20001868
   120f4:	20002080 	.word	0x20002080

000120f8 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   120f8:	b530      	push	{r4, r5, lr}
   120fa:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
   120fc:	f7ff feda 	bl	11eb4 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
   12100:	2300      	movs	r3, #0
   12102:	4a1d      	ldr	r2, [pc, #116]	; (12178 <sys_clock_driver_init+0x80>)
   12104:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12108:	2b00      	cmp	r3, #0
   1210a:	dd24      	ble.n	12156 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
   1210c:	4c1a      	ldr	r4, [pc, #104]	; (12178 <sys_clock_driver_init+0x80>)
   1210e:	2502      	movs	r5, #2
   12110:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12114:	4b19      	ldr	r3, [pc, #100]	; (1217c <sys_clock_driver_init+0x84>)
   12116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1211a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1211e:	2200      	movs	r2, #0
   12120:	2101      	movs	r1, #1
   12122:	2011      	movs	r0, #17
   12124:	f004 fd7b 	bl	16c1e <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12128:	2011      	movs	r0, #17
   1212a:	f004 fd6e 	bl	16c0a <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1212e:	2301      	movs	r3, #1
   12130:	60a3      	str	r3, [r4, #8]
   12132:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12134:	4a12      	ldr	r2, [pc, #72]	; (12180 <sys_clock_driver_init+0x88>)
   12136:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   12138:	2400      	movs	r4, #0
   1213a:	9401      	str	r4, [sp, #4]
   1213c:	4b11      	ldr	r3, [pc, #68]	; (12184 <sys_clock_driver_init+0x8c>)
   1213e:	9300      	str	r3, [sp, #0]
   12140:	4a11      	ldr	r2, [pc, #68]	; (12188 <sys_clock_driver_init+0x90>)
   12142:	2300      	movs	r3, #0
   12144:	4620      	mov	r0, r4
   12146:	f005 fe59 	bl	17dfc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1214a:	4628      	mov	r0, r5
   1214c:	f7ff f960 	bl	11410 <z_nrf_clock_control_lf_on>

	return 0;
}
   12150:	4620      	mov	r0, r4
   12152:	b003      	add	sp, #12
   12154:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   12156:	4a0d      	ldr	r2, [pc, #52]	; (1218c <sys_clock_driver_init+0x94>)
   12158:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1215c:	f04f 30ff 	mov.w	r0, #4294967295
   12160:	f04f 31ff 	mov.w	r1, #4294967295
   12164:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12168:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1216c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1216e:	4902      	ldr	r1, [pc, #8]	; (12178 <sys_clock_driver_init+0x80>)
   12170:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12174:	3301      	adds	r3, #1
   12176:	e7c7      	b.n	12108 <sys_clock_driver_init+0x10>
   12178:	40011000 	.word	0x40011000
   1217c:	e000e100 	.word	0xe000e100
   12180:	20002084 	.word	0x20002084
   12184:	00011fd9 	.word	0x00011fd9
   12188:	007fffff 	.word	0x007fffff
   1218c:	20001868 	.word	0x20001868

00012190 <process_channel>:
{
   12190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12194:	b082      	sub	sp, #8
   12196:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   12198:	f7ff febe 	bl	11f18 <channel_processing_check_and_clear>
   1219c:	b910      	cbnz	r0, 121a4 <process_channel+0x14>
}
   1219e:	b002      	add	sp, #8
   121a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   121a4:	f7ff ff40 	bl	12028 <z_nrf_rtc_timer_read>
   121a8:	4682      	mov	sl, r0
   121aa:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   121ac:	f005 fe1f 	bl	17dee <full_int_lock>
   121b0:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   121b2:	4b15      	ldr	r3, [pc, #84]	; (12208 <process_channel+0x78>)
   121b4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   121b8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   121bc:	45c2      	cmp	sl, r8
   121be:	eb75 0509 	sbcs.w	r5, r5, r9
   121c2:	d20b      	bcs.n	121dc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   121c4:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   121c6:	4630      	mov	r0, r6
   121c8:	f005 fe15 	bl	17df6 <full_int_unlock>
		if (handler) {
   121cc:	2d00      	cmp	r5, #0
   121ce:	d0e6      	beq.n	1219e <process_channel+0xe>
			handler(chan, expire_time, user_context);
   121d0:	9700      	str	r7, [sp, #0]
   121d2:	4642      	mov	r2, r8
   121d4:	464b      	mov	r3, r9
   121d6:	4620      	mov	r0, r4
   121d8:	47a8      	blx	r5
}
   121da:	e7e0      	b.n	1219e <process_channel+0xe>
			handler = cc_data[chan].callback;
   121dc:	4a0a      	ldr	r2, [pc, #40]	; (12208 <process_channel+0x78>)
   121de:	0123      	lsls	r3, r4, #4
   121e0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   121e4:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   121e6:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   121e8:	2000      	movs	r0, #0
   121ea:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   121ec:	f04f 32ff 	mov.w	r2, #4294967295
   121f0:	f04f 33ff 	mov.w	r3, #4294967295
   121f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   121f8:	4620      	mov	r0, r4
   121fa:	f7ff fe15 	bl	11e28 <event_disable>
			event_clear(chan);
   121fe:	4620      	mov	r0, r4
   12200:	f005 fde6 	bl	17dd0 <event_clear>
   12204:	e7df      	b.n	121c6 <process_channel+0x36>
   12206:	bf00      	nop
   12208:	20001868 	.word	0x20001868

0001220c <rtc_nrf_isr>:
{
   1220c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1220e:	4b0e      	ldr	r3, [pc, #56]	; (12248 <rtc_nrf_isr+0x3c>)
   12210:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   12214:	f013 0f02 	tst.w	r3, #2
   12218:	d00d      	beq.n	12236 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1221a:	4b0b      	ldr	r3, [pc, #44]	; (12248 <rtc_nrf_isr+0x3c>)
   1221c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   12220:	b14b      	cbz	r3, 12236 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12222:	4b09      	ldr	r3, [pc, #36]	; (12248 <rtc_nrf_isr+0x3c>)
   12224:	2200      	movs	r2, #0
   12226:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1222a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1222e:	4a07      	ldr	r2, [pc, #28]	; (1224c <rtc_nrf_isr+0x40>)
   12230:	6813      	ldr	r3, [r2, #0]
   12232:	3301      	adds	r3, #1
   12234:	6013      	str	r3, [r2, #0]
{
   12236:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12238:	2c00      	cmp	r4, #0
   1223a:	dd00      	ble.n	1223e <rtc_nrf_isr+0x32>
}
   1223c:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1223e:	4620      	mov	r0, r4
   12240:	f7ff ffa6 	bl	12190 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12244:	3401      	adds	r4, #1
   12246:	e7f7      	b.n	12238 <rtc_nrf_isr+0x2c>
   12248:	40011000 	.word	0x40011000
   1224c:	20002088 	.word	0x20002088

00012250 <sys_clock_set_timeout>:
{
   12250:	b510      	push	{r4, lr}
   12252:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   12254:	f1b0 3fff 	cmp.w	r0, #4294967295
   12258:	d006      	beq.n	12268 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1225a:	2801      	cmp	r0, #1
   1225c:	dd09      	ble.n	12272 <sys_clock_set_timeout+0x22>
   1225e:	4b15      	ldr	r3, [pc, #84]	; (122b4 <sys_clock_set_timeout+0x64>)
   12260:	4298      	cmp	r0, r3
   12262:	dc24      	bgt.n	122ae <sys_clock_set_timeout+0x5e>
   12264:	4604      	mov	r4, r0
   12266:	e005      	b.n	12274 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   12268:	4b13      	ldr	r3, [pc, #76]	; (122b8 <sys_clock_set_timeout+0x68>)
   1226a:	2200      	movs	r2, #0
   1226c:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   1226e:	4c13      	ldr	r4, [pc, #76]	; (122bc <sys_clock_set_timeout+0x6c>)
   12270:	e003      	b.n	1227a <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   12272:	2401      	movs	r4, #1
		sys_busy = true;
   12274:	4b10      	ldr	r3, [pc, #64]	; (122b8 <sys_clock_set_timeout+0x68>)
   12276:	2201      	movs	r2, #1
   12278:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1227a:	f7ff fed5 	bl	12028 <z_nrf_rtc_timer_read>
   1227e:	4b10      	ldr	r3, [pc, #64]	; (122c0 <sys_clock_set_timeout+0x70>)
   12280:	681a      	ldr	r2, [r3, #0]
   12282:	685b      	ldr	r3, [r3, #4]
   12284:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   12286:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1228a:	d300      	bcc.n	1228e <sys_clock_set_timeout+0x3e>
		cyc = 0;
   1228c:	2400      	movs	r4, #0
	cyc += unannounced;
   1228e:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   12290:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   12294:	d300      	bcc.n	12298 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   12296:	4c09      	ldr	r4, [pc, #36]	; (122bc <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   12298:	2000      	movs	r0, #0
   1229a:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1229c:	9001      	str	r0, [sp, #4]
   1229e:	4909      	ldr	r1, [pc, #36]	; (122c4 <sys_clock_set_timeout+0x74>)
   122a0:	9100      	str	r1, [sp, #0]
   122a2:	f143 0300 	adc.w	r3, r3, #0
   122a6:	f005 fda9 	bl	17dfc <compare_set>
}
   122aa:	b002      	add	sp, #8
   122ac:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   122ae:	4c03      	ldr	r4, [pc, #12]	; (122bc <sys_clock_set_timeout+0x6c>)
   122b0:	e7e0      	b.n	12274 <sys_clock_set_timeout+0x24>
   122b2:	bf00      	nop
   122b4:	007ffffe 	.word	0x007ffffe
   122b8:	20002649 	.word	0x20002649
   122bc:	007fffff 	.word	0x007fffff
   122c0:	20001878 	.word	0x20001878
   122c4:	00011fd9 	.word	0x00011fd9

000122c8 <sys_clock_elapsed>:
{
   122c8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   122ca:	f7ff fead 	bl	12028 <z_nrf_rtc_timer_read>
   122ce:	4b02      	ldr	r3, [pc, #8]	; (122d8 <sys_clock_elapsed+0x10>)
   122d0:	681b      	ldr	r3, [r3, #0]
}
   122d2:	1ac0      	subs	r0, r0, r3
   122d4:	bd08      	pop	{r3, pc}
   122d6:	bf00      	nop
   122d8:	20001878 	.word	0x20001878

000122dc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   122dc:	b508      	push	{r3, lr}
   122de:	4602      	mov	r2, r0
   122e0:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   122e2:	4802      	ldr	r0, [pc, #8]	; (122ec <multithreading_lock_acquire+0x10>)
   122e4:	f001 ffba 	bl	1425c <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   122e8:	bd08      	pop	{r3, pc}
   122ea:	bf00      	nop
   122ec:	2000040c 	.word	0x2000040c

000122f0 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   122f0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   122f2:	4802      	ldr	r0, [pc, #8]	; (122fc <multithreading_lock_release+0xc>)
   122f4:	f002 f836 	bl	14364 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   122f8:	bd08      	pop	{r3, pc}
   122fa:	bf00      	nop
   122fc:	2000040c 	.word	0x2000040c

00012300 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12300:	b5b0      	push	{r4, r5, r7, lr}
   12302:	b082      	sub	sp, #8
   12304:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   12306:	f7f9 fb35 	bl	b974 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1230a:	466c      	mov	r4, sp
   1230c:	b088      	sub	sp, #32
   1230e:	466b      	mov	r3, sp
   12310:	f113 0210 	adds.w	r2, r3, #16
   12314:	d031      	beq.n	1237a <k_sys_fatal_error_handler+0x7a>
   12316:	210c      	movs	r1, #12
   12318:	b142      	cbz	r2, 1232c <k_sys_fatal_error_handler+0x2c>
   1231a:	4608      	mov	r0, r1
   1231c:	2904      	cmp	r1, #4
   1231e:	dd01      	ble.n	12324 <k_sys_fatal_error_handler+0x24>
   12320:	4d19      	ldr	r5, [pc, #100]	; (12388 <k_sys_fatal_error_handler+0x88>)
   12322:	615d      	str	r5, [r3, #20]
   12324:	2808      	cmp	r0, #8
   12326:	dd01      	ble.n	1232c <k_sys_fatal_error_handler+0x2c>
   12328:	4818      	ldr	r0, [pc, #96]	; (1238c <k_sys_fatal_error_handler+0x8c>)
   1232a:	6198      	str	r0, [r3, #24]
   1232c:	290b      	cmp	r1, #11
   1232e:	dd27      	ble.n	12380 <k_sys_fatal_error_handler+0x80>
   12330:	f04f 0c0c 	mov.w	ip, #12
   12334:	b13a      	cbz	r2, 12346 <k_sys_fatal_error_handler+0x46>
   12336:	2103      	movs	r1, #3
   12338:	7139      	strb	r1, [r7, #4]
   1233a:	2100      	movs	r1, #0
   1233c:	7179      	strb	r1, [r7, #5]
   1233e:	71b9      	strb	r1, [r7, #6]
   12340:	71f9      	strb	r1, [r7, #7]
   12342:	6878      	ldr	r0, [r7, #4]
   12344:	6118      	str	r0, [r3, #16]
   12346:	2100      	movs	r1, #0
   12348:	f36f 0100 	bfc	r1, #0, #1
   1234c:	f36f 0141 	bfc	r1, #1, #1
   12350:	f36f 0182 	bfc	r1, #2, #1
   12354:	f36f 01c5 	bfc	r1, #3, #3
   12358:	2301      	movs	r3, #1
   1235a:	f363 1188 	bfi	r1, r3, #6, #3
   1235e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   12362:	f36c 2153 	bfi	r1, ip, #9, #11
   12366:	f36f 511f 	bfc	r1, #20, #12
   1236a:	2300      	movs	r3, #0
   1236c:	4808      	ldr	r0, [pc, #32]	; (12390 <k_sys_fatal_error_handler+0x90>)
   1236e:	f7f9 fbf9 	bl	bb64 <z_impl_z_log_msg_static_create>
   12372:	46a5      	mov	sp, r4
		sys_arch_reboot(0);
   12374:	2000      	movs	r0, #0
   12376:	f004 fd6c 	bl	16e52 <sys_arch_reboot>
		LOG_ERR("Resetting system");
   1237a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1237e:	e7cb      	b.n	12318 <k_sys_fatal_error_handler+0x18>
   12380:	f06f 0c1b 	mvn.w	ip, #27
   12384:	e7d6      	b.n	12334 <k_sys_fatal_error_handler+0x34>
   12386:	bf00      	nop
   12388:	0001b01c 	.word	0x0001b01c
   1238c:	0001b034 	.word	0x0001b034
   12390:	000199c4 	.word	0x000199c4

00012394 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   12394:	b510      	push	{r4, lr}
   12396:	4603      	mov	r3, r0
   12398:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1239a:	4803      	ldr	r0, [pc, #12]	; (123a8 <rand_prio_low_vector_get_blocking+0x14>)
   1239c:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1239e:	680c      	ldr	r4, [r1, #0]
   123a0:	4619      	mov	r1, r3
   123a2:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   123a4:	bd10      	pop	{r4, pc}
   123a6:	bf00      	nop
   123a8:	000197a8 	.word	0x000197a8

000123ac <sdc_assertion_handler>:
{
   123ac:	b5b0      	push	{r4, r5, r7, lr}
   123ae:	b082      	sub	sp, #8
   123b0:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   123b2:	466c      	mov	r4, sp
   123b4:	2301      	movs	r3, #1
   123b6:	713b      	strb	r3, [r7, #4]
   123b8:	2303      	movs	r3, #3
   123ba:	717b      	strb	r3, [r7, #5]
   123bc:	b08a      	sub	sp, #40	; 0x28
   123be:	46ec      	mov	ip, sp
   123c0:	f11c 0210 	adds.w	r2, ip, #16
   123c4:	d021      	beq.n	1240a <sdc_assertion_handler+0x5e>
   123c6:	f04f 0e16 	mov.w	lr, #22
   123ca:	b15a      	cbz	r2, 123e4 <sdc_assertion_handler+0x38>
   123cc:	4673      	mov	r3, lr
   123ce:	f1be 0f04 	cmp.w	lr, #4
   123d2:	dd02      	ble.n	123da <sdc_assertion_handler+0x2e>
   123d4:	4d2c      	ldr	r5, [pc, #176]	; (12488 <sdc_assertion_handler+0xdc>)
   123d6:	f8cc 5014 	str.w	r5, [ip, #20]
   123da:	2b08      	cmp	r3, #8
   123dc:	dd02      	ble.n	123e4 <sdc_assertion_handler+0x38>
   123de:	4b2b      	ldr	r3, [pc, #172]	; (1248c <sdc_assertion_handler+0xe0>)
   123e0:	f8cc 3018 	str.w	r3, [ip, #24]
   123e4:	2301      	movs	r3, #1
   123e6:	703b      	strb	r3, [r7, #0]
   123e8:	2303      	movs	r3, #3
   123ea:	707b      	strb	r3, [r7, #1]
   123ec:	b1d2      	cbz	r2, 12424 <sdc_assertion_handler+0x78>
   123ee:	4673      	mov	r3, lr
   123f0:	f1be 0f0c 	cmp.w	lr, #12
   123f4:	dd01      	ble.n	123fa <sdc_assertion_handler+0x4e>
   123f6:	f8cc 001c 	str.w	r0, [ip, #28]
   123fa:	2b10      	cmp	r3, #16
   123fc:	dd01      	ble.n	12402 <sdc_assertion_handler+0x56>
   123fe:	f8cc 1020 	str.w	r1, [ip, #32]
   12402:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   12406:	2100      	movs	r1, #0
   12408:	e00a      	b.n	12420 <sdc_assertion_handler+0x74>
   1240a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1240e:	e7dc      	b.n	123ca <sdc_assertion_handler+0x1e>
   12410:	f101 0008 	add.w	r0, r1, #8
   12414:	4438      	add	r0, r7
   12416:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1241a:	f803 0b01 	strb.w	r0, [r3], #1
   1241e:	3101      	adds	r1, #1
   12420:	2901      	cmp	r1, #1
   12422:	d9f5      	bls.n	12410 <sdc_assertion_handler+0x64>
   12424:	f1be 0f15 	cmp.w	lr, #21
   12428:	dd2b      	ble.n	12482 <sdc_assertion_handler+0xd6>
   1242a:	2316      	movs	r3, #22
   1242c:	b14a      	cbz	r2, 12442 <sdc_assertion_handler+0x96>
   1242e:	2105      	movs	r1, #5
   12430:	7139      	strb	r1, [r7, #4]
   12432:	2100      	movs	r1, #0
   12434:	7179      	strb	r1, [r7, #5]
   12436:	71b9      	strb	r1, [r7, #6]
   12438:	2101      	movs	r1, #1
   1243a:	71f9      	strb	r1, [r7, #7]
   1243c:	6878      	ldr	r0, [r7, #4]
   1243e:	f8cc 0010 	str.w	r0, [ip, #16]
   12442:	2100      	movs	r1, #0
   12444:	f36f 0100 	bfc	r1, #0, #1
   12448:	f36f 0141 	bfc	r1, #1, #1
   1244c:	f36f 0182 	bfc	r1, #2, #1
   12450:	f36f 01c5 	bfc	r1, #3, #3
   12454:	2001      	movs	r0, #1
   12456:	f360 1188 	bfi	r1, r0, #6, #3
   1245a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1245e:	f363 2153 	bfi	r1, r3, #9, #11
   12462:	f36f 511f 	bfc	r1, #20, #12
   12466:	2300      	movs	r3, #0
   12468:	4809      	ldr	r0, [pc, #36]	; (12490 <sdc_assertion_handler+0xe4>)
   1246a:	f7f9 fb7b 	bl	bb64 <z_impl_z_log_msg_static_create>
   1246e:	46a5      	mov	sp, r4
	k_oops();
   12470:	4040      	eors	r0, r0
   12472:	f380 8811 	msr	BASEPRI, r0
   12476:	f04f 0003 	mov.w	r0, #3
   1247a:	df02      	svc	2
}
   1247c:	3708      	adds	r7, #8
   1247e:	46bd      	mov	sp, r7
   12480:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   12482:	f06f 031b 	mvn.w	r3, #27
   12486:	e7d1      	b.n	1242c <sdc_assertion_handler+0x80>
   12488:	0001b05c 	.word	0x0001b05c
   1248c:	0001b214 	.word	0x0001b214
   12490:	000199ac 	.word	0x000199ac

00012494 <event_packet_process>:
{
   12494:	b5f0      	push	{r4, r5, r6, r7, lr}
   12496:	b083      	sub	sp, #12
   12498:	af00      	add	r7, sp, #0
   1249a:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1249c:	f005 fccb 	bl	17e36 <event_packet_is_discardable>
   124a0:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   124a2:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   124a4:	461d      	mov	r5, r3
   124a6:	b193      	cbz	r3, 124ce <event_packet_process+0x3a>
   124a8:	2200      	movs	r2, #0
   124aa:	2300      	movs	r3, #0
   124ac:	4629      	mov	r1, r5
   124ae:	f7fb ff7d 	bl	e3ac <bt_buf_get_evt>
	if (!evt_buf) {
   124b2:	4606      	mov	r6, r0
   124b4:	b180      	cbz	r0, 124d8 <event_packet_process+0x44>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   124b6:	7862      	ldrb	r2, [r4, #1]
   124b8:	3202      	adds	r2, #2
   124ba:	4621      	mov	r1, r4
   124bc:	300c      	adds	r0, #12
   124be:	f005 f865 	bl	1758c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   124c2:	4630      	mov	r0, r6
   124c4:	f7fd fc72 	bl	fdac <bt_recv>
}
   124c8:	370c      	adds	r7, #12
   124ca:	46bd      	mov	sp, r7
   124cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   124ce:	f04f 32ff 	mov.w	r2, #4294967295
   124d2:	f04f 33ff 	mov.w	r3, #4294967295
   124d6:	e7e9      	b.n	124ac <event_packet_process+0x18>
		if (discardable) {
   124d8:	2d00      	cmp	r5, #0
   124da:	d1f5      	bne.n	124c8 <event_packet_process+0x34>
		LOG_ERR("No event buffer available");
   124dc:	466d      	mov	r5, sp
   124de:	b088      	sub	sp, #32
   124e0:	466b      	mov	r3, sp
   124e2:	f113 0210 	adds.w	r2, r3, #16
   124e6:	d02e      	beq.n	12546 <event_packet_process+0xb2>
   124e8:	210c      	movs	r1, #12
   124ea:	b142      	cbz	r2, 124fe <event_packet_process+0x6a>
   124ec:	4608      	mov	r0, r1
   124ee:	2904      	cmp	r1, #4
   124f0:	dd01      	ble.n	124f6 <event_packet_process+0x62>
   124f2:	4c18      	ldr	r4, [pc, #96]	; (12554 <event_packet_process+0xc0>)
   124f4:	615c      	str	r4, [r3, #20]
   124f6:	2808      	cmp	r0, #8
   124f8:	dd01      	ble.n	124fe <event_packet_process+0x6a>
   124fa:	4817      	ldr	r0, [pc, #92]	; (12558 <event_packet_process+0xc4>)
   124fc:	6198      	str	r0, [r3, #24]
   124fe:	290b      	cmp	r1, #11
   12500:	dd24      	ble.n	1254c <event_packet_process+0xb8>
   12502:	240c      	movs	r4, #12
   12504:	b13a      	cbz	r2, 12516 <event_packet_process+0x82>
   12506:	2103      	movs	r1, #3
   12508:	7139      	strb	r1, [r7, #4]
   1250a:	2100      	movs	r1, #0
   1250c:	7179      	strb	r1, [r7, #5]
   1250e:	71b9      	strb	r1, [r7, #6]
   12510:	71f9      	strb	r1, [r7, #7]
   12512:	6878      	ldr	r0, [r7, #4]
   12514:	6118      	str	r0, [r3, #16]
   12516:	2100      	movs	r1, #0
   12518:	f36f 0100 	bfc	r1, #0, #1
   1251c:	f36f 0141 	bfc	r1, #1, #1
   12520:	f36f 0182 	bfc	r1, #2, #1
   12524:	f36f 01c5 	bfc	r1, #3, #3
   12528:	2301      	movs	r3, #1
   1252a:	f363 1188 	bfi	r1, r3, #6, #3
   1252e:	f3c4 040a 	ubfx	r4, r4, #0, #11
   12532:	f364 2153 	bfi	r1, r4, #9, #11
   12536:	f36f 511f 	bfc	r1, #20, #12
   1253a:	2300      	movs	r3, #0
   1253c:	4807      	ldr	r0, [pc, #28]	; (1255c <event_packet_process+0xc8>)
   1253e:	f7f9 fb11 	bl	bb64 <z_impl_z_log_msg_static_create>
   12542:	46ad      	mov	sp, r5
		return;
   12544:	e7c0      	b.n	124c8 <event_packet_process+0x34>
		LOG_ERR("No event buffer available");
   12546:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1254a:	e7ce      	b.n	124ea <event_packet_process+0x56>
   1254c:	f06f 041b 	mvn.w	r4, #27
   12550:	e7d8      	b.n	12504 <event_packet_process+0x70>
   12552:	bf00      	nop
   12554:	0001b088 	.word	0x0001b088
   12558:	0001b1e0 	.word	0x0001b1e0
   1255c:	000199ac 	.word	0x000199ac

00012560 <data_packet_process>:
{
   12560:	b5b0      	push	{r4, r5, r7, lr}
   12562:	b082      	sub	sp, #8
   12564:	af00      	add	r7, sp, #0
   12566:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12568:	f04f 32ff 	mov.w	r2, #4294967295
   1256c:	f04f 33ff 	mov.w	r3, #4294967295
   12570:	2003      	movs	r0, #3
   12572:	f7fb fee9 	bl	e348 <bt_buf_get_rx>
	if (!data_buf) {
   12576:	b160      	cbz	r0, 12592 <data_packet_process+0x32>
   12578:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1257a:	8862      	ldrh	r2, [r4, #2]
   1257c:	3204      	adds	r2, #4
   1257e:	4621      	mov	r1, r4
   12580:	300c      	adds	r0, #12
   12582:	f005 f803 	bl	1758c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   12586:	4628      	mov	r0, r5
   12588:	f7fd fc10 	bl	fdac <bt_recv>
}
   1258c:	3708      	adds	r7, #8
   1258e:	46bd      	mov	sp, r7
   12590:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("No data buffer available");
   12592:	466d      	mov	r5, sp
   12594:	b088      	sub	sp, #32
   12596:	466b      	mov	r3, sp
   12598:	f113 0210 	adds.w	r2, r3, #16
   1259c:	d02e      	beq.n	125fc <data_packet_process+0x9c>
   1259e:	210c      	movs	r1, #12
   125a0:	b142      	cbz	r2, 125b4 <data_packet_process+0x54>
   125a2:	4608      	mov	r0, r1
   125a4:	2904      	cmp	r1, #4
   125a6:	dd01      	ble.n	125ac <data_packet_process+0x4c>
   125a8:	4c17      	ldr	r4, [pc, #92]	; (12608 <data_packet_process+0xa8>)
   125aa:	615c      	str	r4, [r3, #20]
   125ac:	2808      	cmp	r0, #8
   125ae:	dd01      	ble.n	125b4 <data_packet_process+0x54>
   125b0:	4816      	ldr	r0, [pc, #88]	; (1260c <data_packet_process+0xac>)
   125b2:	6198      	str	r0, [r3, #24]
   125b4:	290b      	cmp	r1, #11
   125b6:	dd24      	ble.n	12602 <data_packet_process+0xa2>
   125b8:	240c      	movs	r4, #12
   125ba:	b13a      	cbz	r2, 125cc <data_packet_process+0x6c>
   125bc:	2103      	movs	r1, #3
   125be:	7139      	strb	r1, [r7, #4]
   125c0:	2100      	movs	r1, #0
   125c2:	7179      	strb	r1, [r7, #5]
   125c4:	71b9      	strb	r1, [r7, #6]
   125c6:	71f9      	strb	r1, [r7, #7]
   125c8:	6878      	ldr	r0, [r7, #4]
   125ca:	6118      	str	r0, [r3, #16]
   125cc:	2100      	movs	r1, #0
   125ce:	f36f 0100 	bfc	r1, #0, #1
   125d2:	f36f 0141 	bfc	r1, #1, #1
   125d6:	f36f 0182 	bfc	r1, #2, #1
   125da:	f36f 01c5 	bfc	r1, #3, #3
   125de:	2301      	movs	r3, #1
   125e0:	f363 1188 	bfi	r1, r3, #6, #3
   125e4:	f3c4 030a 	ubfx	r3, r4, #0, #11
   125e8:	f363 2153 	bfi	r1, r3, #9, #11
   125ec:	f36f 511f 	bfc	r1, #20, #12
   125f0:	2300      	movs	r3, #0
   125f2:	4807      	ldr	r0, [pc, #28]	; (12610 <data_packet_process+0xb0>)
   125f4:	f7f9 fab6 	bl	bb64 <z_impl_z_log_msg_static_create>
   125f8:	46ad      	mov	sp, r5
		return;
   125fa:	e7c7      	b.n	1258c <data_packet_process+0x2c>
		LOG_ERR("No data buffer available");
   125fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12600:	e7ce      	b.n	125a0 <data_packet_process+0x40>
   12602:	f06f 041b 	mvn.w	r4, #27
   12606:	e7d8      	b.n	125ba <data_packet_process+0x5a>
   12608:	0001b0a8 	.word	0x0001b0a8
   1260c:	0001b1cc 	.word	0x0001b1cc
   12610:	000199ac 	.word	0x000199ac

00012614 <fetch_and_process_hci_msg>:
{
   12614:	b5f0      	push	{r4, r5, r6, r7, lr}
   12616:	b083      	sub	sp, #12
   12618:	af00      	add	r7, sp, #0
   1261a:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1261c:	f04f 30ff 	mov.w	r0, #4294967295
   12620:	f04f 31ff 	mov.w	r1, #4294967295
   12624:	f7ff fe5a 	bl	122dc <multithreading_lock_acquire>
	if (!errcode) {
   12628:	b118      	cbz	r0, 12632 <fetch_and_process_hci_msg+0x1e>
		return false;
   1262a:	2000      	movs	r0, #0
}
   1262c:	370c      	adds	r7, #12
   1262e:	46bd      	mov	sp, r7
   12630:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   12632:	1df9      	adds	r1, r7, #7
   12634:	4620      	mov	r0, r4
   12636:	f000 fb83 	bl	12d40 <hci_internal_msg_get>
   1263a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1263c:	f7ff fe58 	bl	122f0 <multithreading_lock_release>
	if (errcode) {
   12640:	2d00      	cmp	r5, #0
   12642:	d1f2      	bne.n	1262a <fetch_and_process_hci_msg+0x16>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   12644:	79fb      	ldrb	r3, [r7, #7]
   12646:	2b04      	cmp	r3, #4
   12648:	d03a      	beq.n	126c0 <fetch_and_process_hci_msg+0xac>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1264a:	2b02      	cmp	r3, #2
   1264c:	d03d      	beq.n	126ca <fetch_and_process_hci_msg+0xb6>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1264e:	466d      	mov	r5, sp
   12650:	b088      	sub	sp, #32
   12652:	4669      	mov	r1, sp
   12654:	f111 0210 	adds.w	r2, r1, #16
   12658:	d03c      	beq.n	126d4 <fetch_and_process_hci_msg+0xc0>
   1265a:	2010      	movs	r0, #16
   1265c:	b15a      	cbz	r2, 12676 <fetch_and_process_hci_msg+0x62>
   1265e:	4604      	mov	r4, r0
   12660:	2804      	cmp	r0, #4
   12662:	dd01      	ble.n	12668 <fetch_and_process_hci_msg+0x54>
   12664:	4e1e      	ldr	r6, [pc, #120]	; (126e0 <fetch_and_process_hci_msg+0xcc>)
   12666:	614e      	str	r6, [r1, #20]
   12668:	2c08      	cmp	r4, #8
   1266a:	dd01      	ble.n	12670 <fetch_and_process_hci_msg+0x5c>
   1266c:	4e1d      	ldr	r6, [pc, #116]	; (126e4 <fetch_and_process_hci_msg+0xd0>)
   1266e:	618e      	str	r6, [r1, #24]
   12670:	2c0c      	cmp	r4, #12
   12672:	dd00      	ble.n	12676 <fetch_and_process_hci_msg+0x62>
   12674:	61cb      	str	r3, [r1, #28]
   12676:	280f      	cmp	r0, #15
   12678:	dd2f      	ble.n	126da <fetch_and_process_hci_msg+0xc6>
   1267a:	2310      	movs	r3, #16
   1267c:	b13a      	cbz	r2, 1268e <fetch_and_process_hci_msg+0x7a>
   1267e:	2004      	movs	r0, #4
   12680:	7038      	strb	r0, [r7, #0]
   12682:	2000      	movs	r0, #0
   12684:	7078      	strb	r0, [r7, #1]
   12686:	70b8      	strb	r0, [r7, #2]
   12688:	70f8      	strb	r0, [r7, #3]
   1268a:	6838      	ldr	r0, [r7, #0]
   1268c:	6108      	str	r0, [r1, #16]
   1268e:	2100      	movs	r1, #0
   12690:	f36f 0100 	bfc	r1, #0, #1
   12694:	f36f 0141 	bfc	r1, #1, #1
   12698:	f36f 0182 	bfc	r1, #2, #1
   1269c:	f36f 01c5 	bfc	r1, #3, #3
   126a0:	2401      	movs	r4, #1
   126a2:	f364 1188 	bfi	r1, r4, #6, #3
   126a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   126aa:	f363 2153 	bfi	r1, r3, #9, #11
   126ae:	f36f 511f 	bfc	r1, #20, #12
   126b2:	2300      	movs	r3, #0
   126b4:	480c      	ldr	r0, [pc, #48]	; (126e8 <fetch_and_process_hci_msg+0xd4>)
   126b6:	f7f9 fa55 	bl	bb64 <z_impl_z_log_msg_static_create>
   126ba:	46ad      	mov	sp, r5
	return true;
   126bc:	4620      	mov	r0, r4
   126be:	e7b5      	b.n	1262c <fetch_and_process_hci_msg+0x18>
		event_packet_process(p_hci_buffer);
   126c0:	4620      	mov	r0, r4
   126c2:	f7ff fee7 	bl	12494 <event_packet_process>
	return true;
   126c6:	2001      	movs	r0, #1
   126c8:	e7b0      	b.n	1262c <fetch_and_process_hci_msg+0x18>
		data_packet_process(p_hci_buffer);
   126ca:	4620      	mov	r0, r4
   126cc:	f7ff ff48 	bl	12560 <data_packet_process>
	return true;
   126d0:	2001      	movs	r0, #1
   126d2:	e7ab      	b.n	1262c <fetch_and_process_hci_msg+0x18>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   126d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   126d8:	e7c0      	b.n	1265c <fetch_and_process_hci_msg+0x48>
   126da:	f06f 031b 	mvn.w	r3, #27
   126de:	e7cd      	b.n	1267c <fetch_and_process_hci_msg+0x68>
   126e0:	0001b0c8 	.word	0x0001b0c8
   126e4:	0001b1f8 	.word	0x0001b1f8
   126e8:	000199ac 	.word	0x000199ac

000126ec <receive_signal_raise>:
{
   126ec:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   126ee:	4902      	ldr	r1, [pc, #8]	; (126f8 <receive_signal_raise+0xc>)
   126f0:	4802      	ldr	r0, [pc, #8]	; (126fc <receive_signal_raise+0x10>)
   126f2:	f006 fb93 	bl	18e1c <k_work_submit_to_queue>
}
   126f6:	bd08      	pop	{r3, pc}
   126f8:	200020d4 	.word	0x200020d4
   126fc:	20001ae8 	.word	0x20001ae8

00012700 <cmd_handle>:
{
   12700:	b538      	push	{r3, r4, r5, lr}
   12702:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   12704:	f04f 30ff 	mov.w	r0, #4294967295
   12708:	f04f 31ff 	mov.w	r1, #4294967295
   1270c:	f7ff fde6 	bl	122dc <multithreading_lock_acquire>
	if (!errcode) {
   12710:	4604      	mov	r4, r0
   12712:	b108      	cbz	r0, 12718 <cmd_handle+0x18>
}
   12714:	4620      	mov	r0, r4
   12716:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   12718:	68e8      	ldr	r0, [r5, #12]
   1271a:	f000 fae9 	bl	12cf0 <hci_internal_cmd_put>
   1271e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   12720:	f7ff fde6 	bl	122f0 <multithreading_lock_release>
	if (errcode) {
   12724:	2c00      	cmp	r4, #0
   12726:	d1f5      	bne.n	12714 <cmd_handle+0x14>
   12728:	4902      	ldr	r1, [pc, #8]	; (12734 <cmd_handle+0x34>)
   1272a:	4803      	ldr	r0, [pc, #12]	; (12738 <cmd_handle+0x38>)
   1272c:	f006 fb76 	bl	18e1c <k_work_submit_to_queue>
	return 0;
   12730:	e7f0      	b.n	12714 <cmd_handle+0x14>
   12732:	bf00      	nop
   12734:	200020d4 	.word	0x200020d4
   12738:	20001ae8 	.word	0x20001ae8

0001273c <rand_prio_high_vector_get>:
{
   1273c:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1273e:	4b08      	ldr	r3, [pc, #32]	; (12760 <rand_prio_high_vector_get+0x24>)
   12740:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   12742:	685c      	ldr	r4, [r3, #4]
   12744:	b144      	cbz	r4, 12758 <rand_prio_high_vector_get+0x1c>
   12746:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   12748:	2300      	movs	r3, #0
   1274a:	4601      	mov	r1, r0
   1274c:	4804      	ldr	r0, [pc, #16]	; (12760 <rand_prio_high_vector_get+0x24>)
   1274e:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   12750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   12754:	b2c0      	uxtb	r0, r0
   12756:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   12758:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1275c:	e7f8      	b.n	12750 <rand_prio_high_vector_get+0x14>
   1275e:	bf00      	nop
   12760:	000197a8 	.word	0x000197a8

00012764 <rand_prio_low_vector_get>:
{
   12764:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   12766:	4b08      	ldr	r3, [pc, #32]	; (12788 <rand_prio_low_vector_get+0x24>)
   12768:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1276a:	685c      	ldr	r4, [r3, #4]
   1276c:	b144      	cbz	r4, 12780 <rand_prio_low_vector_get+0x1c>
   1276e:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   12770:	2300      	movs	r3, #0
   12772:	4601      	mov	r1, r0
   12774:	4804      	ldr	r0, [pc, #16]	; (12788 <rand_prio_low_vector_get+0x24>)
   12776:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   12778:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1277c:	b2c0      	uxtb	r0, r0
   1277e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   12780:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12784:	e7f8      	b.n	12778 <rand_prio_low_vector_get+0x14>
   12786:	bf00      	nop
   12788:	000197a8 	.word	0x000197a8

0001278c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   1278c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1278e:	b08b      	sub	sp, #44	; 0x2c
   12790:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   12792:	4985      	ldr	r1, [pc, #532]	; (129a8 <hci_driver_open+0x21c>)
   12794:	4885      	ldr	r0, [pc, #532]	; (129ac <hci_driver_open+0x220>)
   12796:	f006 fb25 	bl	18de4 <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   1279a:	f107 0014 	add.w	r0, r7, #20
   1279e:	f7ed fce5 	bl	16c <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   127a2:	466c      	mov	r4, sp
   127a4:	2301      	movs	r3, #1
   127a6:	713b      	strb	r3, [r7, #4]
   127a8:	2303      	movs	r3, #3
   127aa:	717b      	strb	r3, [r7, #5]
   127ac:	b08a      	sub	sp, #40	; 0x28
   127ae:	46ec      	mov	ip, sp
   127b0:	f11c 0210 	adds.w	r2, ip, #16
   127b4:	d01a      	beq.n	127ec <hci_driver_open+0x60>
   127b6:	2012      	movs	r0, #18
   127b8:	b152      	cbz	r2, 127d0 <hci_driver_open+0x44>
   127ba:	4603      	mov	r3, r0
   127bc:	2804      	cmp	r0, #4
   127be:	dd02      	ble.n	127c6 <hci_driver_open+0x3a>
   127c0:	497b      	ldr	r1, [pc, #492]	; (129b0 <hci_driver_open+0x224>)
   127c2:	f8cc 1014 	str.w	r1, [ip, #20]
   127c6:	2b08      	cmp	r3, #8
   127c8:	dd02      	ble.n	127d0 <hci_driver_open+0x44>
   127ca:	4b7a      	ldr	r3, [pc, #488]	; (129b4 <hci_driver_open+0x228>)
   127cc:	f8cc 3018 	str.w	r3, [ip, #24]
   127d0:	2301      	movs	r3, #1
   127d2:	703b      	strb	r3, [r7, #0]
   127d4:	2303      	movs	r3, #3
   127d6:	707b      	strb	r3, [r7, #1]
   127d8:	b1b2      	cbz	r2, 12808 <hci_driver_open+0x7c>
   127da:	280c      	cmp	r0, #12
   127dc:	dd02      	ble.n	127e4 <hci_driver_open+0x58>
   127de:	4b76      	ldr	r3, [pc, #472]	; (129b8 <hci_driver_open+0x22c>)
   127e0:	f8cc 301c 	str.w	r3, [ip, #28]
   127e4:	f10c 0320 	add.w	r3, ip, #32
   127e8:	2100      	movs	r1, #0
   127ea:	e00b      	b.n	12804 <hci_driver_open+0x78>
   127ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   127f0:	e7e2      	b.n	127b8 <hci_driver_open+0x2c>
   127f2:	f101 0528 	add.w	r5, r1, #40	; 0x28
   127f6:	eb05 0e07 	add.w	lr, r5, r7
   127fa:	f81e ec28 	ldrb.w	lr, [lr, #-40]
   127fe:	f803 eb01 	strb.w	lr, [r3], #1
   12802:	3101      	adds	r1, #1
   12804:	2901      	cmp	r1, #1
   12806:	d9f4      	bls.n	127f2 <hci_driver_open+0x66>
   12808:	2811      	cmp	r0, #17
   1280a:	dd41      	ble.n	12890 <hci_driver_open+0x104>
   1280c:	2312      	movs	r3, #18
   1280e:	b14a      	cbz	r2, 12824 <hci_driver_open+0x98>
   12810:	2104      	movs	r1, #4
   12812:	7139      	strb	r1, [r7, #4]
   12814:	2100      	movs	r1, #0
   12816:	7179      	strb	r1, [r7, #5]
   12818:	71b9      	strb	r1, [r7, #6]
   1281a:	2101      	movs	r1, #1
   1281c:	71f9      	strb	r1, [r7, #7]
   1281e:	6878      	ldr	r0, [r7, #4]
   12820:	f8cc 0010 	str.w	r0, [ip, #16]
   12824:	2100      	movs	r1, #0
   12826:	f36f 0100 	bfc	r1, #0, #1
   1282a:	f36f 0141 	bfc	r1, #1, #1
   1282e:	f36f 0182 	bfc	r1, #2, #1
   12832:	f36f 01c5 	bfc	r1, #3, #3
   12836:	2003      	movs	r0, #3
   12838:	f360 1188 	bfi	r1, r0, #6, #3
   1283c:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12840:	f363 2153 	bfi	r1, r3, #9, #11
   12844:	2314      	movs	r3, #20
   12846:	f363 511f 	bfi	r1, r3, #20, #12
   1284a:	18fb      	adds	r3, r7, r3
   1284c:	485b      	ldr	r0, [pc, #364]	; (129bc <hci_driver_open+0x230>)
   1284e:	f7f9 f989 	bl	bb64 <z_impl_z_log_msg_static_create>
   12852:	46a5      	mov	sp, r4
   12854:	485a      	ldr	r0, [pc, #360]	; (129c0 <hci_driver_open+0x234>)
   12856:	f006 f83a 	bl	188ce <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   1285a:	b1e0      	cbz	r0, 12896 <hci_driver_open+0x10a>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   1285c:	4a59      	ldr	r2, [pc, #356]	; (129c4 <hci_driver_open+0x238>)
   1285e:	f107 0308 	add.w	r3, r7, #8
   12862:	ca07      	ldmia	r2, {r0, r1, r2}
   12864:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   12868:	4618      	mov	r0, r3
   1286a:	f7ed fde9 	bl	440 <sdc_rand_source_register>
	if (err) {
   1286e:	4603      	mov	r3, r0
   12870:	2800      	cmp	r0, #0
   12872:	d14d      	bne.n	12910 <hci_driver_open+0x184>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   12874:	f04f 30ff 	mov.w	r0, #4294967295
   12878:	f04f 31ff 	mov.w	r1, #4294967295
   1287c:	f7ff fd2e 	bl	122dc <multithreading_lock_acquire>
	if (err) {
   12880:	4604      	mov	r4, r0
   12882:	2800      	cmp	r0, #0
   12884:	f000 8084 	beq.w	12990 <hci_driver_open+0x204>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   12888:	4620      	mov	r0, r4
   1288a:	372c      	adds	r7, #44	; 0x2c
   1288c:	46bd      	mov	sp, r7
   1288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   12890:	f06f 031b 	mvn.w	r3, #27
   12894:	e7bb      	b.n	1280e <hci_driver_open+0x82>
		LOG_ERR("Entropy source device not ready");
   12896:	466d      	mov	r5, sp
   12898:	b088      	sub	sp, #32
   1289a:	466b      	mov	r3, sp
   1289c:	f113 0210 	adds.w	r2, r3, #16
   128a0:	d030      	beq.n	12904 <hci_driver_open+0x178>
   128a2:	210c      	movs	r1, #12
   128a4:	b142      	cbz	r2, 128b8 <hci_driver_open+0x12c>
   128a6:	4608      	mov	r0, r1
   128a8:	2904      	cmp	r1, #4
   128aa:	dd01      	ble.n	128b0 <hci_driver_open+0x124>
   128ac:	4c46      	ldr	r4, [pc, #280]	; (129c8 <hci_driver_open+0x23c>)
   128ae:	615c      	str	r4, [r3, #20]
   128b0:	2808      	cmp	r0, #8
   128b2:	dd01      	ble.n	128b8 <hci_driver_open+0x12c>
   128b4:	483f      	ldr	r0, [pc, #252]	; (129b4 <hci_driver_open+0x228>)
   128b6:	6198      	str	r0, [r3, #24]
   128b8:	290b      	cmp	r1, #11
   128ba:	dd26      	ble.n	1290a <hci_driver_open+0x17e>
   128bc:	240c      	movs	r4, #12
   128be:	b13a      	cbz	r2, 128d0 <hci_driver_open+0x144>
   128c0:	2103      	movs	r1, #3
   128c2:	7139      	strb	r1, [r7, #4]
   128c4:	2100      	movs	r1, #0
   128c6:	7179      	strb	r1, [r7, #5]
   128c8:	71b9      	strb	r1, [r7, #6]
   128ca:	71f9      	strb	r1, [r7, #7]
   128cc:	6878      	ldr	r0, [r7, #4]
   128ce:	6118      	str	r0, [r3, #16]
   128d0:	2100      	movs	r1, #0
   128d2:	f36f 0100 	bfc	r1, #0, #1
   128d6:	f36f 0141 	bfc	r1, #1, #1
   128da:	f36f 0182 	bfc	r1, #2, #1
   128de:	f36f 01c5 	bfc	r1, #3, #3
   128e2:	2301      	movs	r3, #1
   128e4:	f363 1188 	bfi	r1, r3, #6, #3
   128e8:	f3c4 040a 	ubfx	r4, r4, #0, #11
   128ec:	f364 2153 	bfi	r1, r4, #9, #11
   128f0:	f36f 511f 	bfc	r1, #20, #12
   128f4:	2300      	movs	r3, #0
   128f6:	4831      	ldr	r0, [pc, #196]	; (129bc <hci_driver_open+0x230>)
   128f8:	f7f9 f934 	bl	bb64 <z_impl_z_log_msg_static_create>
   128fc:	46ad      	mov	sp, r5
		return -ENODEV;
   128fe:	f06f 0412 	mvn.w	r4, #18
   12902:	e7c1      	b.n	12888 <hci_driver_open+0xfc>
		LOG_ERR("Entropy source device not ready");
   12904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12908:	e7cc      	b.n	128a4 <hci_driver_open+0x118>
   1290a:	f06f 041b 	mvn.w	r4, #27
   1290e:	e7d6      	b.n	128be <hci_driver_open+0x132>
		LOG_ERR("Failed to register rand source (%d)", err);
   12910:	466c      	mov	r4, sp
   12912:	b088      	sub	sp, #32
   12914:	4669      	mov	r1, sp
   12916:	f111 0210 	adds.w	r2, r1, #16
   1291a:	d033      	beq.n	12984 <hci_driver_open+0x1f8>
   1291c:	2010      	movs	r0, #16
   1291e:	b15a      	cbz	r2, 12938 <hci_driver_open+0x1ac>
   12920:	4605      	mov	r5, r0
   12922:	2804      	cmp	r0, #4
   12924:	dd01      	ble.n	1292a <hci_driver_open+0x19e>
   12926:	4e29      	ldr	r6, [pc, #164]	; (129cc <hci_driver_open+0x240>)
   12928:	614e      	str	r6, [r1, #20]
   1292a:	2d08      	cmp	r5, #8
   1292c:	dd01      	ble.n	12932 <hci_driver_open+0x1a6>
   1292e:	4e21      	ldr	r6, [pc, #132]	; (129b4 <hci_driver_open+0x228>)
   12930:	618e      	str	r6, [r1, #24]
   12932:	2d0c      	cmp	r5, #12
   12934:	dd00      	ble.n	12938 <hci_driver_open+0x1ac>
   12936:	61cb      	str	r3, [r1, #28]
   12938:	280f      	cmp	r0, #15
   1293a:	dd26      	ble.n	1298a <hci_driver_open+0x1fe>
   1293c:	2310      	movs	r3, #16
   1293e:	b13a      	cbz	r2, 12950 <hci_driver_open+0x1c4>
   12940:	2004      	movs	r0, #4
   12942:	7138      	strb	r0, [r7, #4]
   12944:	2000      	movs	r0, #0
   12946:	7178      	strb	r0, [r7, #5]
   12948:	71b8      	strb	r0, [r7, #6]
   1294a:	71f8      	strb	r0, [r7, #7]
   1294c:	6878      	ldr	r0, [r7, #4]
   1294e:	6108      	str	r0, [r1, #16]
   12950:	2100      	movs	r1, #0
   12952:	f36f 0100 	bfc	r1, #0, #1
   12956:	f36f 0141 	bfc	r1, #1, #1
   1295a:	f36f 0182 	bfc	r1, #2, #1
   1295e:	f36f 01c5 	bfc	r1, #3, #3
   12962:	2001      	movs	r0, #1
   12964:	f360 1188 	bfi	r1, r0, #6, #3
   12968:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1296c:	f363 2153 	bfi	r1, r3, #9, #11
   12970:	f36f 511f 	bfc	r1, #20, #12
   12974:	2300      	movs	r3, #0
   12976:	4811      	ldr	r0, [pc, #68]	; (129bc <hci_driver_open+0x230>)
   12978:	f7f9 f8f4 	bl	bb64 <z_impl_z_log_msg_static_create>
   1297c:	46a5      	mov	sp, r4
		return -EINVAL;
   1297e:	f06f 0415 	mvn.w	r4, #21
   12982:	e781      	b.n	12888 <hci_driver_open+0xfc>
		LOG_ERR("Failed to register rand source (%d)", err);
   12984:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12988:	e7c9      	b.n	1291e <hci_driver_open+0x192>
   1298a:	f06f 031b 	mvn.w	r3, #27
   1298e:	e7d6      	b.n	1293e <hci_driver_open+0x1b2>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   12990:	490f      	ldr	r1, [pc, #60]	; (129d0 <hci_driver_open+0x244>)
   12992:	4810      	ldr	r0, [pc, #64]	; (129d4 <hci_driver_open+0x248>)
   12994:	f7ed fc58 	bl	248 <sdc_enable>
	if (err) {
   12998:	4604      	mov	r4, r0
   1299a:	b910      	cbnz	r0, 129a2 <hci_driver_open+0x216>
	MULTITHREADING_LOCK_RELEASE();
   1299c:	f7ff fca8 	bl	122f0 <multithreading_lock_release>
	return 0;
   129a0:	e772      	b.n	12888 <hci_driver_open+0xfc>
		MULTITHREADING_LOCK_RELEASE();
   129a2:	f7ff fca5 	bl	122f0 <multithreading_lock_release>
		return err;
   129a6:	e76f      	b.n	12888 <hci_driver_open+0xfc>
   129a8:	00017ec7 	.word	0x00017ec7
   129ac:	200020d4 	.word	0x200020d4
   129b0:	0001a678 	.word	0x0001a678
   129b4:	0001b1bc 	.word	0x0001b1bc
   129b8:	0001b108 	.word	0x0001b108
   129bc:	000199ac 	.word	0x000199ac
   129c0:	000197a8 	.word	0x000197a8
   129c4:	00019adc 	.word	0x00019adc
   129c8:	0001b130 	.word	0x0001b130
   129cc:	0001b154 	.word	0x0001b154
   129d0:	20001888 	.word	0x20001888
   129d4:	000126ed 	.word	0x000126ed

000129d8 <configure_memory_usage>:
{
   129d8:	b5b0      	push	{r4, r5, r7, lr}
   129da:	b082      	sub	sp, #8
   129dc:	af00      	add	r7, sp, #0
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   129de:	2000      	movs	r0, #0
   129e0:	7138      	strb	r0, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   129e2:	1d3a      	adds	r2, r7, #4
   129e4:	2102      	movs	r1, #2
   129e6:	f7ed fbcf 	bl	188 <sdc_cfg_set>
	if (required_memory < 0) {
   129ea:	2800      	cmp	r0, #0
   129ec:	db35      	blt.n	12a5a <configure_memory_usage+0x82>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   129ee:	2108      	movs	r1, #8
   129f0:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   129f2:	1d3a      	adds	r2, r7, #4
   129f4:	2000      	movs	r0, #0
   129f6:	f7ed fbc7 	bl	188 <sdc_cfg_set>
	if (required_memory < 0) {
   129fa:	2800      	cmp	r0, #0
   129fc:	db2d      	blt.n	12a5a <configure_memory_usage+0x82>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   129fe:	231b      	movs	r3, #27
   12a00:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   12a02:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   12a04:	2302      	movs	r3, #2
   12a06:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   12a08:	2103      	movs	r1, #3
   12a0a:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12a0c:	1d3a      	adds	r2, r7, #4
   12a0e:	2000      	movs	r0, #0
   12a10:	f7ed fbba 	bl	188 <sdc_cfg_set>
	if (required_memory < 0) {
   12a14:	2800      	cmp	r0, #0
   12a16:	db20      	blt.n	12a5a <configure_memory_usage+0x82>
	cfg.event_length.event_length_us =
   12a18:	f641 534c 	movw	r3, #7500	; 0x1d4c
   12a1c:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12a1e:	1d3a      	adds	r2, r7, #4
   12a20:	2104      	movs	r1, #4
   12a22:	2000      	movs	r0, #0
   12a24:	f7ed fbb0 	bl	188 <sdc_cfg_set>
	if (required_memory < 0) {
   12a28:	2800      	cmp	r0, #0
   12a2a:	db16      	blt.n	12a5a <configure_memory_usage+0x82>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   12a2c:	2301      	movs	r3, #1
   12a2e:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12a30:	1d3a      	adds	r2, r7, #4
   12a32:	2105      	movs	r1, #5
   12a34:	2000      	movs	r0, #0
   12a36:	f7ed fba7 	bl	188 <sdc_cfg_set>
	if (required_memory < 0) {
   12a3a:	2800      	cmp	r0, #0
   12a3c:	db0d      	blt.n	12a5a <configure_memory_usage+0x82>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   12a3e:	231f      	movs	r3, #31
   12a40:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   12a42:	1d3a      	adds	r2, r7, #4
   12a44:	2107      	movs	r1, #7
   12a46:	2000      	movs	r0, #0
   12a48:	f7ed fb9e 	bl	188 <sdc_cfg_set>
	if (required_memory < 0) {
   12a4c:	2800      	cmp	r0, #0
   12a4e:	db04      	blt.n	12a5a <configure_memory_usage+0x82>
	if (required_memory > sizeof(sdc_mempool)) {
   12a50:	f240 235e 	movw	r3, #606	; 0x25e
   12a54:	4298      	cmp	r0, r3
   12a56:	d803      	bhi.n	12a60 <configure_memory_usage+0x88>
	return 0;
   12a58:	2000      	movs	r0, #0
}
   12a5a:	3708      	adds	r7, #8
   12a5c:	46bd      	mov	sp, r7
   12a5e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   12a60:	466c      	mov	r4, sp
   12a62:	b08a      	sub	sp, #40	; 0x28
   12a64:	466b      	mov	r3, sp
   12a66:	f113 0210 	adds.w	r2, r3, #16
   12a6a:	d042      	beq.n	12af2 <configure_memory_usage+0x11a>
   12a6c:	2114      	movs	r1, #20
   12a6e:	b19a      	cbz	r2, 12a98 <configure_memory_usage+0xc0>
   12a70:	468c      	mov	ip, r1
   12a72:	2904      	cmp	r1, #4
   12a74:	dd01      	ble.n	12a7a <configure_memory_usage+0xa2>
   12a76:	4d22      	ldr	r5, [pc, #136]	; (12b00 <configure_memory_usage+0x128>)
   12a78:	615d      	str	r5, [r3, #20]
   12a7a:	f1bc 0f08 	cmp.w	ip, #8
   12a7e:	dd01      	ble.n	12a84 <configure_memory_usage+0xac>
   12a80:	4d20      	ldr	r5, [pc, #128]	; (12b04 <configure_memory_usage+0x12c>)
   12a82:	619d      	str	r5, [r3, #24]
   12a84:	f1bc 0f0c 	cmp.w	ip, #12
   12a88:	dd02      	ble.n	12a90 <configure_memory_usage+0xb8>
   12a8a:	f240 255e 	movw	r5, #606	; 0x25e
   12a8e:	61dd      	str	r5, [r3, #28]
   12a90:	f1bc 0f10 	cmp.w	ip, #16
   12a94:	dd00      	ble.n	12a98 <configure_memory_usage+0xc0>
   12a96:	6218      	str	r0, [r3, #32]
   12a98:	2913      	cmp	r1, #19
   12a9a:	dd2d      	ble.n	12af8 <configure_memory_usage+0x120>
   12a9c:	f04f 0c14 	mov.w	ip, #20
   12aa0:	b13a      	cbz	r2, 12ab2 <configure_memory_usage+0xda>
   12aa2:	2105      	movs	r1, #5
   12aa4:	7039      	strb	r1, [r7, #0]
   12aa6:	2100      	movs	r1, #0
   12aa8:	7079      	strb	r1, [r7, #1]
   12aaa:	70b9      	strb	r1, [r7, #2]
   12aac:	70f9      	strb	r1, [r7, #3]
   12aae:	6838      	ldr	r0, [r7, #0]
   12ab0:	6118      	str	r0, [r3, #16]
   12ab2:	2100      	movs	r1, #0
   12ab4:	f36f 0100 	bfc	r1, #0, #1
   12ab8:	f36f 0141 	bfc	r1, #1, #1
   12abc:	f36f 0182 	bfc	r1, #2, #1
   12ac0:	f36f 01c5 	bfc	r1, #3, #3
   12ac4:	2301      	movs	r3, #1
   12ac6:	f363 1188 	bfi	r1, r3, #6, #3
   12aca:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   12ace:	f36c 2153 	bfi	r1, ip, #9, #11
   12ad2:	f36f 511f 	bfc	r1, #20, #12
   12ad6:	2300      	movs	r3, #0
   12ad8:	480b      	ldr	r0, [pc, #44]	; (12b08 <configure_memory_usage+0x130>)
   12ada:	f7f9 f843 	bl	bb64 <z_impl_z_log_msg_static_create>
   12ade:	46a5      	mov	sp, r4
		k_panic();
   12ae0:	4040      	eors	r0, r0
   12ae2:	f380 8811 	msr	BASEPRI, r0
   12ae6:	f04f 0004 	mov.w	r0, #4
   12aea:	df02      	svc	2
		return -ENOMEM;
   12aec:	f06f 000b 	mvn.w	r0, #11
   12af0:	e7b3      	b.n	12a5a <configure_memory_usage+0x82>
		LOG_ERR("Allocated memory too low: %u < %u",
   12af2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12af6:	e7ba      	b.n	12a6e <configure_memory_usage+0x96>
   12af8:	f06f 0c1b 	mvn.w	ip, #27
   12afc:	e7d0      	b.n	12aa0 <configure_memory_usage+0xc8>
   12afe:	bf00      	nop
   12b00:	0001b17c 	.word	0x0001b17c
   12b04:	0001b1a4 	.word	0x0001b1a4
   12b08:	000199ac 	.word	0x000199ac

00012b0c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   12b0c:	b508      	push	{r3, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
   12b0e:	4806      	ldr	r0, [pc, #24]	; (12b28 <hci_driver_init+0x1c>)
   12b10:	f7fd f9c2 	bl	fe98 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   12b14:	4805      	ldr	r0, [pc, #20]	; (12b2c <hci_driver_init+0x20>)
   12b16:	f7ed fbc1 	bl	29c <sdc_init>

	err = configure_supported_features();
   12b1a:	f005 f9cc 	bl	17eb6 <configure_supported_features>
	if (err) {
   12b1e:	b100      	cbz	r0, 12b22 <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   12b20:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   12b22:	f7ff ff59 	bl	129d8 <configure_memory_usage>
	if (err) {
   12b26:	e7fb      	b.n	12b20 <hci_driver_init+0x14>
   12b28:	0001b258 	.word	0x0001b258
   12b2c:	000123ad 	.word	0x000123ad

00012b30 <hci_driver_receive_process>:
{
   12b30:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   12b32:	4805      	ldr	r0, [pc, #20]	; (12b48 <hci_driver_receive_process+0x18>)
   12b34:	f7ff fd6e 	bl	12614 <fetch_and_process_hci_msg>
   12b38:	b900      	cbnz	r0, 12b3c <hci_driver_receive_process+0xc>
}
   12b3a:	bd08      	pop	{r3, pc}
   12b3c:	4903      	ldr	r1, [pc, #12]	; (12b4c <hci_driver_receive_process+0x1c>)
   12b3e:	4804      	ldr	r0, [pc, #16]	; (12b50 <hci_driver_receive_process+0x20>)
   12b40:	f006 f96c 	bl	18e1c <k_work_submit_to_queue>
   12b44:	e7f9      	b.n	12b3a <hci_driver_receive_process+0xa>
   12b46:	bf00      	nop
   12b48:	2000208c 	.word	0x2000208c
   12b4c:	200020d4 	.word	0x200020d4
   12b50:	20001ae8 	.word	0x20001ae8

00012b54 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   12b54:	f242 0332 	movw	r3, #8242	; 0x2032
   12b58:	4298      	cmp	r0, r3
   12b5a:	d04a      	beq.n	12bf2 <command_generates_command_complete_event+0x9e>
   12b5c:	d82d      	bhi.n	12bba <command_generates_command_complete_event+0x66>
   12b5e:	f242 0326 	movw	r3, #8230	; 0x2026
   12b62:	4298      	cmp	r0, r3
   12b64:	d847      	bhi.n	12bf6 <command_generates_command_complete_event+0xa2>
   12b66:	f242 030d 	movw	r3, #8205	; 0x200d
   12b6a:	4298      	cmp	r0, r3
   12b6c:	d218      	bcs.n	12ba0 <command_generates_command_complete_event+0x4c>
   12b6e:	f240 4306 	movw	r3, #1030	; 0x406
   12b72:	4298      	cmp	r0, r3
   12b74:	d041      	beq.n	12bfa <command_generates_command_complete_event+0xa6>
   12b76:	f240 431d 	movw	r3, #1053	; 0x41d
   12b7a:	4298      	cmp	r0, r3
   12b7c:	d001      	beq.n	12b82 <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   12b7e:	2001      	movs	r0, #1
   12b80:	4770      	bx	lr
	switch (hci_opcode) {
   12b82:	2000      	movs	r0, #0
   12b84:	4770      	bx	lr
   12b86:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   12b8a:	382d      	subs	r0, #45	; 0x2d
   12b8c:	b280      	uxth	r0, r0
   12b8e:	4b1e      	ldr	r3, [pc, #120]	; (12c08 <command_generates_command_complete_event+0xb4>)
   12b90:	40c3      	lsrs	r3, r0
   12b92:	f013 0f01 	tst.w	r3, #1
   12b96:	d101      	bne.n	12b9c <command_generates_command_complete_event+0x48>
		return true;
   12b98:	2001      	movs	r0, #1
   12b9a:	4770      	bx	lr
	switch (hci_opcode) {
   12b9c:	2000      	movs	r0, #0
   12b9e:	4770      	bx	lr
   12ba0:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   12ba4:	380d      	subs	r0, #13
   12ba6:	b280      	uxth	r0, r0
   12ba8:	4b18      	ldr	r3, [pc, #96]	; (12c0c <command_generates_command_complete_event+0xb8>)
   12baa:	40c3      	lsrs	r3, r0
   12bac:	f013 0f01 	tst.w	r3, #1
   12bb0:	d101      	bne.n	12bb6 <command_generates_command_complete_event+0x62>
		return true;
   12bb2:	2001      	movs	r0, #1
   12bb4:	4770      	bx	lr
	switch (hci_opcode) {
   12bb6:	2000      	movs	r0, #0
   12bb8:	4770      	bx	lr
   12bba:	f242 0385 	movw	r3, #8325	; 0x2085
   12bbe:	4298      	cmp	r0, r3
   12bc0:	d80b      	bhi.n	12bda <command_generates_command_complete_event+0x86>
   12bc2:	f242 036d 	movw	r3, #8301	; 0x206d
   12bc6:	4298      	cmp	r0, r3
   12bc8:	d2dd      	bcs.n	12b86 <command_generates_command_complete_event+0x32>
   12bca:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   12bce:	3803      	subs	r0, #3
   12bd0:	b280      	uxth	r0, r0
   12bd2:	2801      	cmp	r0, #1
   12bd4:	d913      	bls.n	12bfe <command_generates_command_complete_event+0xaa>
		return true;
   12bd6:	2001      	movs	r0, #1
   12bd8:	4770      	bx	lr
	switch (hci_opcode) {
   12bda:	f64f 5302 	movw	r3, #64770	; 0xfd02
   12bde:	4298      	cmp	r0, r3
   12be0:	d00f      	beq.n	12c02 <command_generates_command_complete_event+0xae>
   12be2:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   12be6:	4298      	cmp	r0, r3
   12be8:	d001      	beq.n	12bee <command_generates_command_complete_event+0x9a>
		return true;
   12bea:	2001      	movs	r0, #1
	}
}
   12bec:	4770      	bx	lr
	switch (hci_opcode) {
   12bee:	2000      	movs	r0, #0
   12bf0:	4770      	bx	lr
   12bf2:	2000      	movs	r0, #0
   12bf4:	4770      	bx	lr
		return true;
   12bf6:	2001      	movs	r0, #1
   12bf8:	4770      	bx	lr
	switch (hci_opcode) {
   12bfa:	2000      	movs	r0, #0
   12bfc:	4770      	bx	lr
   12bfe:	2000      	movs	r0, #0
   12c00:	4770      	bx	lr
   12c02:	2000      	movs	r0, #0
   12c04:	4770      	bx	lr
   12c06:	bf00      	nop
   12c08:	01000401 	.word	0x01000401
   12c0c:	03001241 	.word	0x03001241

00012c10 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   12c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c12:	b083      	sub	sp, #12
   12c14:	4607      	mov	r7, r0
   12c16:	460e      	mov	r6, r1
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   12c18:	7843      	ldrb	r3, [r0, #1]
   12c1a:	7805      	ldrb	r5, [r0, #0]
   12c1c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   12c20:	2304      	movs	r3, #4
   12c22:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   12c26:	4b31      	ldr	r3, [pc, #196]	; (12cec <cmd_put+0xdc>)
   12c28:	681c      	ldr	r4, [r3, #0]
   12c2a:	b13c      	cbz	r4, 12c3c <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   12c2c:	f10d 0307 	add.w	r3, sp, #7
   12c30:	f10d 0206 	add.w	r2, sp, #6
   12c34:	47a0      	blx	r4
   12c36:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   12c38:	2801      	cmp	r0, #1
   12c3a:	d11f      	bne.n	12c7c <cmd_put+0x6c>

		switch (BT_OGF(opcode)) {
   12c3c:	0aab      	lsrs	r3, r5, #10
   12c3e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   12c42:	d209      	bcs.n	12c58 <cmd_put+0x48>
   12c44:	2b03      	cmp	r3, #3
   12c46:	d345      	bcc.n	12cd4 <cmd_put+0xc4>
   12c48:	3b03      	subs	r3, #3
   12c4a:	2b05      	cmp	r3, #5
   12c4c:	d844      	bhi.n	12cd8 <cmd_put+0xc8>
   12c4e:	e8df f003 	tbb	[pc, r3]
   12c52:	2921      	.short	0x2921
   12c54:	39434331 	.word	0x39434331
   12c58:	2b3f      	cmp	r3, #63	; 0x3f
   12c5a:	d107      	bne.n	12c6c <cmd_put+0x5c>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   12c5c:	f10d 0206 	add.w	r2, sp, #6
   12c60:	4631      	mov	r1, r6
   12c62:	4638      	mov	r0, r7
   12c64:	f005 fb26 	bl	182b4 <vs_cmd_put>
   12c68:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   12c6a:	e000      	b.n	12c6e <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
   12c6c:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   12c6e:	4628      	mov	r0, r5
   12c70:	f7ff ff70 	bl	12b54 <command_generates_command_complete_event>
   12c74:	f080 0001 	eor.w	r0, r0, #1
   12c78:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   12c7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c80:	b90b      	cbnz	r3, 12c86 <cmd_put+0x76>
   12c82:	2c01      	cmp	r4, #1
   12c84:	d12a      	bne.n	12cdc <cmd_put+0xcc>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   12c86:	4622      	mov	r2, r4
   12c88:	4629      	mov	r1, r5
   12c8a:	4630      	mov	r0, r6
   12c8c:	f005 f91f 	bl	17ece <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   12c90:	b003      	add	sp, #12
   12c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = controller_and_baseband_cmd_put(cmd_in,
   12c94:	f10d 0206 	add.w	r2, sp, #6
   12c98:	4631      	mov	r1, r6
   12c9a:	4638      	mov	r0, r7
   12c9c:	f005 f932 	bl	17f04 <controller_and_baseband_cmd_put>
   12ca0:	4604      	mov	r4, r0
			break;
   12ca2:	e7e4      	b.n	12c6e <cmd_put+0x5e>
			status = info_param_cmd_put(cmd_in,
   12ca4:	f10d 0206 	add.w	r2, sp, #6
   12ca8:	4631      	mov	r1, r6
   12caa:	4638      	mov	r0, r7
   12cac:	f005 f9cf 	bl	1804e <info_param_cmd_put>
   12cb0:	4604      	mov	r4, r0
			break;
   12cb2:	e7dc      	b.n	12c6e <cmd_put+0x5e>
			status = status_param_cmd_put(cmd_in,
   12cb4:	f10d 0206 	add.w	r2, sp, #6
   12cb8:	4631      	mov	r1, r6
   12cba:	4638      	mov	r0, r7
   12cbc:	f005 f920 	bl	17f00 <status_param_cmd_put>
   12cc0:	4604      	mov	r4, r0
			break;
   12cc2:	e7d4      	b.n	12c6e <cmd_put+0x5e>
			status = le_controller_cmd_put(cmd_in,
   12cc4:	f10d 0206 	add.w	r2, sp, #6
   12cc8:	4631      	mov	r1, r6
   12cca:	4638      	mov	r0, r7
   12ccc:	f005 fa49 	bl	18162 <le_controller_cmd_put>
   12cd0:	4604      	mov	r4, r0
			break;
   12cd2:	e7cc      	b.n	12c6e <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
   12cd4:	2401      	movs	r4, #1
   12cd6:	e7ca      	b.n	12c6e <cmd_put+0x5e>
   12cd8:	2401      	movs	r4, #1
   12cda:	e7c8      	b.n	12c6e <cmd_put+0x5e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   12cdc:	4623      	mov	r3, r4
   12cde:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12ce2:	4629      	mov	r1, r5
   12ce4:	4630      	mov	r0, r6
   12ce6:	f005 f8fb 	bl	17ee0 <encode_command_complete_header>
}
   12cea:	e7d1      	b.n	12c90 <cmd_put+0x80>
   12cec:	200020e4 	.word	0x200020e4

00012cf0 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   12cf0:	b538      	push	{r3, r4, r5, lr}
   12cf2:	7842      	ldrb	r2, [r0, #1]
   12cf4:	7803      	ldrb	r3, [r0, #0]
   12cf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12cfa:	b21c      	sxth	r4, r3
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   12cfc:	4b0e      	ldr	r3, [pc, #56]	; (12d38 <hci_internal_cmd_put+0x48>)
   12cfe:	781b      	ldrb	r3, [r3, #0]
   12d00:	b9b3      	cbnz	r3, 12d30 <hci_internal_cmd_put+0x40>
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   12d02:	4d0e      	ldr	r5, [pc, #56]	; (12d3c <hci_internal_cmd_put+0x4c>)
   12d04:	4629      	mov	r1, r5
   12d06:	f7ff ff83 	bl	12c10 <cmd_put>
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
   12d0a:	2301      	movs	r3, #1
   12d0c:	f805 3c01 	strb.w	r3, [r5, #-1]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   12d10:	f242 0383 	movw	r3, #8323	; 0x2083
   12d14:	429c      	cmp	r4, r3
   12d16:	d001      	beq.n	12d1c <hci_internal_cmd_put+0x2c>
		 */

		cmd_complete_or_status.occurred = false;
	}

	return 0;
   12d18:	2000      	movs	r0, #0
}
   12d1a:	bd38      	pop	{r3, r4, r5, pc}
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
   12d1c:	1e6b      	subs	r3, r5, #1
   12d1e:	785b      	ldrb	r3, [r3, #1]
		&&
   12d20:	2b0e      	cmp	r3, #14
   12d22:	d001      	beq.n	12d28 <hci_internal_cmd_put+0x38>
	return 0;
   12d24:	2000      	movs	r0, #0
   12d26:	e7f8      	b.n	12d1a <hci_internal_cmd_put+0x2a>
		cmd_complete_or_status.occurred = false;
   12d28:	2000      	movs	r0, #0
   12d2a:	1e6b      	subs	r3, r5, #1
   12d2c:	7018      	strb	r0, [r3, #0]
   12d2e:	e7f4      	b.n	12d1a <hci_internal_cmd_put+0x2a>
		return -NRF_EPERM;
   12d30:	f04f 30ff 	mov.w	r0, #4294967295
   12d34:	e7f1      	b.n	12d1a <hci_internal_cmd_put+0x2a>
   12d36:	bf00      	nop
   12d38:	200020e8 	.word	0x200020e8
   12d3c:	200020e9 	.word	0x200020e9

00012d40 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   12d40:	b538      	push	{r3, r4, r5, lr}
   12d42:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   12d44:	4b08      	ldr	r3, [pc, #32]	; (12d68 <hci_internal_msg_get+0x28>)
   12d46:	781b      	ldrb	r3, [r3, #0]
   12d48:	b913      	cbnz	r3, 12d50 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   12d4a:	f7f5 f99f 	bl	808c <sdc_hci_get>
}
   12d4e:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   12d50:	4d05      	ldr	r5, [pc, #20]	; (12d68 <hci_internal_msg_get+0x28>)
   12d52:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   12d54:	3202      	adds	r2, #2
   12d56:	1c69      	adds	r1, r5, #1
   12d58:	f004 f82b 	bl	16db2 <memcpy>
		cmd_complete_or_status.occurred = false;
   12d5c:	2000      	movs	r0, #0
   12d5e:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   12d60:	2304      	movs	r3, #4
   12d62:	7023      	strb	r3, [r4, #0]
		return 0;
   12d64:	e7f3      	b.n	12d4e <hci_internal_msg_get+0xe>
   12d66:	bf00      	nop
   12d68:	200020e8 	.word	0x200020e8

00012d6c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   12d6c:	b538      	push	{r3, r4, r5, lr}
   12d6e:	4605      	mov	r5, r0
   12d70:	460c      	mov	r4, r1
   12d72:	4809      	ldr	r0, [pc, #36]	; (12d98 <bt_rand+0x2c>)
   12d74:	f005 fdab 	bl	188ce <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   12d78:	f080 0301 	eor.w	r3, r0, #1
   12d7c:	f013 0fff 	tst.w	r3, #255	; 0xff
   12d80:	d106      	bne.n	12d90 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   12d82:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   12d84:	4804      	ldr	r0, [pc, #16]	; (12d98 <bt_rand+0x2c>)
   12d86:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   12d88:	681b      	ldr	r3, [r3, #0]
   12d8a:	4629      	mov	r1, r5
   12d8c:	4798      	blx	r3
}
   12d8e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   12d90:	f06f 0012 	mvn.w	r0, #18
   12d94:	e7fb      	b.n	12d8e <bt_rand+0x22>
   12d96:	bf00      	nop
   12d98:	000197a8 	.word	0x000197a8

00012d9c <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   12d9c:	b500      	push	{lr}
   12d9e:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   12da0:	f005 fb06 	bl	183b0 <m_config_clock_source_get>
   12da4:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   12da8:	2332      	movs	r3, #50	; 0x32
   12daa:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   12dae:	2300      	movs	r3, #0
   12db0:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   12db4:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   12db8:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   12dbc:	4a03      	ldr	r2, [pc, #12]	; (12dcc <mpsl_lib_init_internal+0x30>)
   12dbe:	2119      	movs	r1, #25
   12dc0:	4668      	mov	r0, sp
   12dc2:	f7f4 fb77 	bl	74b4 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   12dc6:	b003      	add	sp, #12
   12dc8:	f85d fb04 	ldr.w	pc, [sp], #4
   12dcc:	00012dd1 	.word	0x00012dd1

00012dd0 <m_assert_handler>:
{
   12dd0:	b5b0      	push	{r4, r5, r7, lr}
   12dd2:	b082      	sub	sp, #8
   12dd4:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   12dd6:	466c      	mov	r4, sp
   12dd8:	2301      	movs	r3, #1
   12dda:	713b      	strb	r3, [r7, #4]
   12ddc:	2303      	movs	r3, #3
   12dde:	717b      	strb	r3, [r7, #5]
   12de0:	b08a      	sub	sp, #40	; 0x28
   12de2:	46ec      	mov	ip, sp
   12de4:	f11c 0210 	adds.w	r2, ip, #16
   12de8:	d021      	beq.n	12e2e <m_assert_handler+0x5e>
   12dea:	f04f 0e16 	mov.w	lr, #22
   12dee:	b15a      	cbz	r2, 12e08 <m_assert_handler+0x38>
   12df0:	4673      	mov	r3, lr
   12df2:	f1be 0f04 	cmp.w	lr, #4
   12df6:	dd02      	ble.n	12dfe <m_assert_handler+0x2e>
   12df8:	4d2c      	ldr	r5, [pc, #176]	; (12eac <m_assert_handler+0xdc>)
   12dfa:	f8cc 5014 	str.w	r5, [ip, #20]
   12dfe:	2b08      	cmp	r3, #8
   12e00:	dd02      	ble.n	12e08 <m_assert_handler+0x38>
   12e02:	4b2b      	ldr	r3, [pc, #172]	; (12eb0 <m_assert_handler+0xe0>)
   12e04:	f8cc 3018 	str.w	r3, [ip, #24]
   12e08:	2301      	movs	r3, #1
   12e0a:	703b      	strb	r3, [r7, #0]
   12e0c:	2303      	movs	r3, #3
   12e0e:	707b      	strb	r3, [r7, #1]
   12e10:	b1d2      	cbz	r2, 12e48 <m_assert_handler+0x78>
   12e12:	4673      	mov	r3, lr
   12e14:	f1be 0f0c 	cmp.w	lr, #12
   12e18:	dd01      	ble.n	12e1e <m_assert_handler+0x4e>
   12e1a:	f8cc 001c 	str.w	r0, [ip, #28]
   12e1e:	2b10      	cmp	r3, #16
   12e20:	dd01      	ble.n	12e26 <m_assert_handler+0x56>
   12e22:	f8cc 1020 	str.w	r1, [ip, #32]
   12e26:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   12e2a:	2100      	movs	r1, #0
   12e2c:	e00a      	b.n	12e44 <m_assert_handler+0x74>
   12e2e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   12e32:	e7dc      	b.n	12dee <m_assert_handler+0x1e>
   12e34:	f101 0008 	add.w	r0, r1, #8
   12e38:	4438      	add	r0, r7
   12e3a:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   12e3e:	f803 0b01 	strb.w	r0, [r3], #1
   12e42:	3101      	adds	r1, #1
   12e44:	2901      	cmp	r1, #1
   12e46:	d9f5      	bls.n	12e34 <m_assert_handler+0x64>
   12e48:	f1be 0f15 	cmp.w	lr, #21
   12e4c:	dd2b      	ble.n	12ea6 <m_assert_handler+0xd6>
   12e4e:	2316      	movs	r3, #22
   12e50:	b14a      	cbz	r2, 12e66 <m_assert_handler+0x96>
   12e52:	2105      	movs	r1, #5
   12e54:	7139      	strb	r1, [r7, #4]
   12e56:	2100      	movs	r1, #0
   12e58:	7179      	strb	r1, [r7, #5]
   12e5a:	71b9      	strb	r1, [r7, #6]
   12e5c:	2101      	movs	r1, #1
   12e5e:	71f9      	strb	r1, [r7, #7]
   12e60:	6878      	ldr	r0, [r7, #4]
   12e62:	f8cc 0010 	str.w	r0, [ip, #16]
   12e66:	2100      	movs	r1, #0
   12e68:	f36f 0100 	bfc	r1, #0, #1
   12e6c:	f36f 0141 	bfc	r1, #1, #1
   12e70:	f36f 0182 	bfc	r1, #2, #1
   12e74:	f36f 01c5 	bfc	r1, #3, #3
   12e78:	2001      	movs	r0, #1
   12e7a:	f360 1188 	bfi	r1, r0, #6, #3
   12e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12e82:	f363 2153 	bfi	r1, r3, #9, #11
   12e86:	f36f 511f 	bfc	r1, #20, #12
   12e8a:	2300      	movs	r3, #0
   12e8c:	4809      	ldr	r0, [pc, #36]	; (12eb4 <m_assert_handler+0xe4>)
   12e8e:	f7f8 fe69 	bl	bb64 <z_impl_z_log_msg_static_create>
   12e92:	46a5      	mov	sp, r4
	k_oops();
   12e94:	4040      	eors	r0, r0
   12e96:	f380 8811 	msr	BASEPRI, r0
   12e9a:	f04f 0003 	mov.w	r0, #3
   12e9e:	df02      	svc	2
}
   12ea0:	3708      	adds	r7, #8
   12ea2:	46bd      	mov	sp, r7
   12ea4:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   12ea6:	f06f 031b 	mvn.w	r3, #27
   12eaa:	e7d1      	b.n	12e50 <m_assert_handler+0x80>
   12eac:	0001b280 	.word	0x0001b280
   12eb0:	0001b2a4 	.word	0x0001b2a4
   12eb4:	000199e4 	.word	0x000199e4

00012eb8 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(void)
{
   12eb8:	b530      	push	{r4, r5, lr}
   12eba:	b083      	sub	sp, #12

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   12ebc:	4d0d      	ldr	r5, [pc, #52]	; (12ef4 <mpsl_low_prio_init+0x3c>)
   12ebe:	2400      	movs	r4, #0
   12ec0:	9400      	str	r4, [sp, #0]
   12ec2:	f06f 0309 	mvn.w	r3, #9
   12ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12eca:	490b      	ldr	r1, [pc, #44]	; (12ef8 <mpsl_low_prio_init+0x40>)
   12ecc:	4628      	mov	r0, r5
   12ece:	f001 fc1d 	bl	1470c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   12ed2:	490a      	ldr	r1, [pc, #40]	; (12efc <mpsl_low_prio_init+0x44>)
   12ed4:	4628      	mov	r0, r5
   12ed6:	f001 f8d5 	bl	14084 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   12eda:	4909      	ldr	r1, [pc, #36]	; (12f00 <mpsl_low_prio_init+0x48>)
   12edc:	4809      	ldr	r0, [pc, #36]	; (12f04 <mpsl_low_prio_init+0x4c>)
   12ede:	f005 ff81 	bl	18de4 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   12ee2:	4622      	mov	r2, r4
   12ee4:	2104      	movs	r1, #4
   12ee6:	2019      	movs	r0, #25
   12ee8:	f003 fe99 	bl	16c1e <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   12eec:	4620      	mov	r0, r4
   12eee:	b003      	add	sp, #12
   12ef0:	bd30      	pop	{r4, r5, pc}
   12ef2:	bf00      	nop
   12ef4:	20001ae8 	.word	0x20001ae8
   12ef8:	20003880 	.word	0x20003880
   12efc:	0001b298 	.word	0x0001b298
   12f00:	00018439 	.word	0x00018439
   12f04:	20002130 	.word	0x20002130

00012f08 <mpsl_low_prio_irq_handler>:
{
   12f08:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   12f0a:	4902      	ldr	r1, [pc, #8]	; (12f14 <mpsl_low_prio_irq_handler+0xc>)
   12f0c:	4802      	ldr	r0, [pc, #8]	; (12f18 <mpsl_low_prio_irq_handler+0x10>)
   12f0e:	f005 ff85 	bl	18e1c <k_work_submit_to_queue>
}
   12f12:	bd08      	pop	{r3, pc}
   12f14:	20002130 	.word	0x20002130
   12f18:	20001ae8 	.word	0x20001ae8

00012f1c <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   12f1c:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   12f1e:	4b02      	ldr	r3, [pc, #8]	; (12f28 <mpsl_hfclk_callback+0xc>)
   12f20:	681b      	ldr	r3, [r3, #0]
   12f22:	2000      	movs	r0, #0
   12f24:	4798      	blx	r3
}
   12f26:	bd08      	pop	{r3, pc}
   12f28:	20002140 	.word	0x20002140

00012f2c <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   12f2c:	b508      	push	{r3, lr}
	switch (domain) {
   12f2e:	b128      	cbz	r0, 12f3c <nrfx_clock_start+0x10>
   12f30:	2801      	cmp	r0, #1
   12f32:	d102      	bne.n	12f3a <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   12f34:	4804      	ldr	r0, [pc, #16]	; (12f48 <nrfx_clock_start+0x1c>)
   12f36:	f7f4 f93d 	bl	71b4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   12f3a:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12f3c:	4b03      	ldr	r3, [pc, #12]	; (12f4c <nrfx_clock_start+0x20>)
   12f3e:	681b      	ldr	r3, [r3, #0]
   12f40:	2001      	movs	r0, #1
   12f42:	4798      	blx	r3
}
   12f44:	e7f9      	b.n	12f3a <nrfx_clock_start+0xe>
   12f46:	bf00      	nop
   12f48:	00012f1d 	.word	0x00012f1d
   12f4c:	20002140 	.word	0x20002140

00012f50 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   12f50:	4b01      	ldr	r3, [pc, #4]	; (12f58 <nrfx_clock_init+0x8>)
   12f52:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   12f54:	4801      	ldr	r0, [pc, #4]	; (12f5c <nrfx_clock_init+0xc>)
   12f56:	4770      	bx	lr
   12f58:	20002140 	.word	0x20002140
   12f5c:	0bad0000 	.word	0x0bad0000

00012f60 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   12f60:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12f64:	4905      	ldr	r1, [pc, #20]	; (12f7c <__NVIC_SystemReset+0x1c>)
   12f66:	68ca      	ldr	r2, [r1, #12]
   12f68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12f6c:	4b04      	ldr	r3, [pc, #16]	; (12f80 <__NVIC_SystemReset+0x20>)
   12f6e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12f70:	60cb      	str	r3, [r1, #12]
   12f72:	f3bf 8f4f 	dsb	sy
    __NOP();
   12f76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12f78:	e7fd      	b.n	12f76 <__NVIC_SystemReset+0x16>
   12f7a:	bf00      	nop
   12f7c:	e000ed00 	.word	0xe000ed00
   12f80:	05fa0004 	.word	0x05fa0004

00012f84 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   12f84:	4b02      	ldr	r3, [pc, #8]	; (12f90 <nvmc_wait+0xc>)
   12f86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d0fa      	beq.n	12f84 <nvmc_wait>
}
   12f8e:	4770      	bx	lr
   12f90:	4001e000 	.word	0x4001e000

00012f94 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   12f94:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   12f96:	4b03      	ldr	r3, [pc, #12]	; (12fa4 <nvmc_config+0x10>)
   12f98:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   12f9c:	f7ff fff2 	bl	12f84 <nvmc_wait>
}
   12fa0:	bd08      	pop	{r3, pc}
   12fa2:	bf00      	nop
   12fa4:	4001e000 	.word	0x4001e000

00012fa8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   12fa8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   12faa:	f005 fa62 	bl	18472 <nrf52_errata_12>
   12fae:	b140      	cbz	r0, 12fc2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   12fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12fb4:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   12fb8:	f3c3 2304 	ubfx	r3, r3, #8, #5
   12fbc:	4a6b      	ldr	r2, [pc, #428]	; (1316c <SystemInit+0x1c4>)
   12fbe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   12fc2:	f005 fa68 	bl	18496 <nrf52_errata_16>
   12fc6:	b110      	cbz	r0, 12fce <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   12fc8:	4b69      	ldr	r3, [pc, #420]	; (13170 <SystemInit+0x1c8>)
   12fca:	4a6a      	ldr	r2, [pc, #424]	; (13174 <SystemInit+0x1cc>)
   12fcc:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   12fce:	f005 fa78 	bl	184c2 <nrf52_errata_31>
   12fd2:	b148      	cbz	r0, 12fe8 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   12fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12fd8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   12fdc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   12fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12fe4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   12fe8:	f005 fa7d 	bl	184e6 <nrf52_errata_32>
   12fec:	b130      	cbz	r0, 12ffc <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   12fee:	4a62      	ldr	r2, [pc, #392]	; (13178 <SystemInit+0x1d0>)
   12ff0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   12ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12ff8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   12ffc:	f005 fa89 	bl	18512 <nrf52_errata_36>
   13000:	b140      	cbz	r0, 13014 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   13002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13006:	2200      	movs	r2, #0
   13008:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1300c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   13010:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   13014:	f005 fa8f 	bl	18536 <nrf52_errata_37>
   13018:	b120      	cbz	r0, 13024 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1301a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1301e:	2203      	movs	r2, #3
   13020:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   13024:	f005 fa9d 	bl	18562 <nrf52_errata_57>
   13028:	b160      	cbz	r0, 13044 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1302a:	4b54      	ldr	r3, [pc, #336]	; (1317c <SystemInit+0x1d4>)
   1302c:	2205      	movs	r2, #5
   1302e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   13032:	2201      	movs	r2, #1
   13034:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   13038:	2200      	movs	r2, #0
   1303a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1303e:	223f      	movs	r2, #63	; 0x3f
   13040:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   13044:	f005 faa3 	bl	1858e <nrf52_errata_66>
   13048:	2800      	cmp	r0, #0
   1304a:	d046      	beq.n	130da <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13050:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   13054:	4b4a      	ldr	r3, [pc, #296]	; (13180 <SystemInit+0x1d8>)
   13056:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1305a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1305e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   13062:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   13066:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1306a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1306e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   13072:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   13076:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1307a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1307e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   13082:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   13086:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1308a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1308e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   13092:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   13096:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1309a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1309e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   130a2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   130a6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   130aa:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   130ae:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   130b2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   130b6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   130ba:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   130be:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   130c2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   130c6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   130ca:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   130ce:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   130d2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   130d6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   130da:	f005 fa7a 	bl	185d2 <nrf52_errata_108>
   130de:	b148      	cbz	r0, 130f4 <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   130e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   130e4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   130e8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   130ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   130f0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   130f4:	f005 fa7f 	bl	185f6 <nrf52_errata_136>
   130f8:	b160      	cbz	r0, 13114 <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   130fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   130fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   13102:	f013 0f01 	tst.w	r3, #1
   13106:	d005      	beq.n	13114 <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   13108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1310c:	f06f 0201 	mvn.w	r2, #1
   13110:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   13114:	f005 fa81 	bl	1861a <nrf52_errata_182>
   13118:	b130      	cbz	r0, 13128 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1311a:	4a1a      	ldr	r2, [pc, #104]	; (13184 <SystemInit+0x1dc>)
   1311c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   13120:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13124:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   13128:	f005 fa9f 	bl	1866a <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1312c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   13134:	2b00      	cmp	r3, #0
   13136:	db06      	blt.n	13146 <SystemInit+0x19e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   13138:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1313c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13140:	2b00      	cmp	r3, #0
   13142:	db00      	blt.n	13146 <SystemInit+0x19e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   13144:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   13146:	2001      	movs	r0, #1
   13148:	f7ff ff24 	bl	12f94 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1314c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   13150:	2515      	movs	r5, #21
   13152:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   13156:	f7ff ff15 	bl	12f84 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1315a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1315e:	f7ff ff11 	bl	12f84 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   13162:	2000      	movs	r0, #0
   13164:	f7ff ff16 	bl	12f94 <nvmc_config>
            NVIC_SystemReset();
   13168:	f7ff fefa 	bl	12f60 <__NVIC_SystemReset>
   1316c:	40013000 	.word	0x40013000
   13170:	4007c000 	.word	0x4007c000
   13174:	baadf00d 	.word	0xbaadf00d
   13178:	e000ed00 	.word	0xe000ed00
   1317c:	40005000 	.word	0x40005000
   13180:	4000c000 	.word	0x4000c000
   13184:	40001000 	.word	0x40001000

00013188 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13188:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1318a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1318c:	fab4 f384 	clz	r3, r4
   13190:	f1c3 031f 	rsb	r3, r3, #31
   13194:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   13198:	2b00      	cmp	r3, #0
   1319a:	db16      	blt.n	131ca <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1319c:	2201      	movs	r2, #1
   1319e:	fa02 f303 	lsl.w	r3, r2, r3
   131a2:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   131a6:	f3bf 8f5b 	dmb	ish
   131aa:	e850 2f00 	ldrex	r2, [r0]
   131ae:	42a2      	cmp	r2, r4
   131b0:	d104      	bne.n	131bc <nrfx_flag32_alloc+0x34>
   131b2:	e840 3e00 	strex	lr, r3, [r0]
   131b6:	f1be 0f00 	cmp.w	lr, #0
   131ba:	d1f6      	bne.n	131aa <nrfx_flag32_alloc+0x22>
   131bc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   131c0:	d1e3      	bne.n	1318a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   131c2:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   131c6:	4802      	ldr	r0, [pc, #8]	; (131d0 <nrfx_flag32_alloc+0x48>)
}
   131c8:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   131ca:	4802      	ldr	r0, [pc, #8]	; (131d4 <nrfx_flag32_alloc+0x4c>)
   131cc:	e7fc      	b.n	131c8 <nrfx_flag32_alloc+0x40>
   131ce:	bf00      	nop
   131d0:	0bad0000 	.word	0x0bad0000
   131d4:	0bad0002 	.word	0x0bad0002

000131d8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   131d8:	6803      	ldr	r3, [r0, #0]
   131da:	40cb      	lsrs	r3, r1
   131dc:	f013 0f01 	tst.w	r3, #1
   131e0:	d115      	bne.n	1320e <nrfx_flag32_free+0x36>
{
   131e2:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   131e4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   131e6:	2301      	movs	r3, #1
   131e8:	408b      	lsls	r3, r1
   131ea:	4313      	orrs	r3, r2
   131ec:	f3bf 8f5b 	dmb	ish
   131f0:	e850 cf00 	ldrex	ip, [r0]
   131f4:	4594      	cmp	ip, r2
   131f6:	d104      	bne.n	13202 <nrfx_flag32_free+0x2a>
   131f8:	e840 3e00 	strex	lr, r3, [r0]
   131fc:	f1be 0f00 	cmp.w	lr, #0
   13200:	d1f6      	bne.n	131f0 <nrfx_flag32_free+0x18>
   13202:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13206:	d1ed      	bne.n	131e4 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   13208:	4802      	ldr	r0, [pc, #8]	; (13214 <nrfx_flag32_free+0x3c>)
}
   1320a:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   1320e:	4802      	ldr	r0, [pc, #8]	; (13218 <nrfx_flag32_free+0x40>)
}
   13210:	4770      	bx	lr
   13212:	bf00      	nop
   13214:	0bad0000 	.word	0x0bad0000
   13218:	0bad0004 	.word	0x0bad0004

0001321c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1321c:	3008      	adds	r0, #8
   1321e:	4b03      	ldr	r3, [pc, #12]	; (1322c <pin_in_use+0x10>)
   13220:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13224:	f000 0001 	and.w	r0, r0, #1
   13228:	4770      	bx	lr
   1322a:	bf00      	nop
   1322c:	2000034c 	.word	0x2000034c

00013230 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   13230:	3008      	adds	r0, #8
   13232:	4b03      	ldr	r3, [pc, #12]	; (13240 <pin_in_use_by_te+0x10>)
   13234:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13238:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1323c:	4770      	bx	lr
   1323e:	bf00      	nop
   13240:	2000034c 	.word	0x2000034c

00013244 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   13244:	3008      	adds	r0, #8
   13246:	4b04      	ldr	r3, [pc, #16]	; (13258 <pin_has_trigger+0x14>)
   13248:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1324c:	f010 001c 	ands.w	r0, r0, #28
   13250:	bf18      	it	ne
   13252:	2001      	movne	r0, #1
   13254:	4770      	bx	lr
   13256:	bf00      	nop
   13258:	2000034c 	.word	0x2000034c

0001325c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1325c:	3008      	adds	r0, #8
   1325e:	4b03      	ldr	r3, [pc, #12]	; (1326c <pin_is_output+0x10>)
   13260:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13264:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13268:	4770      	bx	lr
   1326a:	bf00      	nop
   1326c:	2000034c 	.word	0x2000034c

00013270 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13270:	3008      	adds	r0, #8
   13272:	4b02      	ldr	r3, [pc, #8]	; (1327c <pin_te_get+0xc>)
   13274:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13278:	0b40      	lsrs	r0, r0, #13
   1327a:	4770      	bx	lr
   1327c:	2000034c 	.word	0x2000034c

00013280 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   13280:	2200      	movs	r2, #0
   13282:	e004      	b.n	1328e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   13284:	f04f 33ff 	mov.w	r3, #4294967295
   13288:	4283      	cmp	r3, r0
   1328a:	d00f      	beq.n	132ac <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1328c:	3201      	adds	r2, #1
   1328e:	2a1f      	cmp	r2, #31
   13290:	d80a      	bhi.n	132a8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   13292:	f102 0308 	add.w	r3, r2, #8
   13296:	4906      	ldr	r1, [pc, #24]	; (132b0 <handler_in_use+0x30>)
   13298:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1329c:	f413 7f80 	tst.w	r3, #256	; 0x100
   132a0:	d0f0      	beq.n	13284 <handler_in_use+0x4>
   132a2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   132a6:	e7ef      	b.n	13288 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   132a8:	2000      	movs	r0, #0
   132aa:	4770      	bx	lr
            return true;
   132ac:	2001      	movs	r0, #1
}
   132ae:	4770      	bx	lr
   132b0:	2000034c 	.word	0x2000034c

000132b4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   132b4:	2300      	movs	r3, #0
   132b6:	b113      	cbz	r3, 132be <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   132b8:	f04f 30ff 	mov.w	r0, #4294967295
}
   132bc:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   132be:	4a07      	ldr	r2, [pc, #28]	; (132dc <find_handler+0x28>)
   132c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   132c4:	4282      	cmp	r2, r0
   132c6:	d001      	beq.n	132cc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   132c8:	3301      	adds	r3, #1
   132ca:	e7f4      	b.n	132b6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   132cc:	4a03      	ldr	r2, [pc, #12]	; (132dc <find_handler+0x28>)
   132ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   132d2:	6852      	ldr	r2, [r2, #4]
   132d4:	428a      	cmp	r2, r1
   132d6:	d1f7      	bne.n	132c8 <find_handler+0x14>
            return i;
   132d8:	4618      	mov	r0, r3
   132da:	4770      	bx	lr
   132dc:	2000034c 	.word	0x2000034c

000132e0 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   132e0:	f100 0208 	add.w	r2, r0, #8
   132e4:	4b0d      	ldr	r3, [pc, #52]	; (1331c <get_initial_sense+0x3c>)
   132e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   132ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   132ee:	2b04      	cmp	r3, #4
   132f0:	d00d      	beq.n	1330e <get_initial_sense+0x2e>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   132f2:	2b05      	cmp	r3, #5
   132f4:	d00d      	beq.n	13312 <get_initial_sense+0x32>
    *p_pin = pin_number & 0x1F;
   132f6:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
   132fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   132fe:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13302:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13304:	f013 0f01 	tst.w	r3, #1
   13308:	d005      	beq.n	13316 <get_initial_sense+0x36>
   1330a:	2003      	movs	r0, #3
   1330c:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1330e:	2003      	movs	r0, #3
   13310:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   13312:	2002      	movs	r0, #2
   13314:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13316:	2002      	movs	r0, #2
    }

    return sense;
}
   13318:	4770      	bx	lr
   1331a:	bf00      	nop
   1331c:	2000034c 	.word	0x2000034c

00013320 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13320:	3008      	adds	r0, #8
   13322:	4b06      	ldr	r3, [pc, #24]	; (1333c <channel_handler_get+0x1c>)
   13324:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13328:	f410 7f80 	tst.w	r0, #256	; 0x100
   1332c:	d004      	beq.n	13338 <channel_handler_get+0x18>
   1332e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   13332:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   13336:	4770      	bx	lr
        return NULL;
   13338:	2000      	movs	r0, #0
}
   1333a:	4770      	bx	lr
   1333c:	2000034c 	.word	0x2000034c

00013340 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   13340:	b570      	push	{r4, r5, r6, lr}
   13342:	4604      	mov	r4, r0
   13344:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   13346:	f7ff ffeb 	bl	13320 <channel_handler_get>

    if (handler)
   1334a:	b120      	cbz	r0, 13356 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1334c:	6806      	ldr	r6, [r0, #0]
   1334e:	6842      	ldr	r2, [r0, #4]
   13350:	4629      	mov	r1, r5
   13352:	4620      	mov	r0, r4
   13354:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   13356:	4b04      	ldr	r3, [pc, #16]	; (13368 <call_handler+0x28>)
   13358:	689b      	ldr	r3, [r3, #8]
   1335a:	b123      	cbz	r3, 13366 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1335c:	4a02      	ldr	r2, [pc, #8]	; (13368 <call_handler+0x28>)
   1335e:	68d2      	ldr	r2, [r2, #12]
   13360:	4629      	mov	r1, r5
   13362:	4620      	mov	r0, r4
   13364:	4798      	blx	r3
    }
}
   13366:	bd70      	pop	{r4, r5, r6, pc}
   13368:	2000034c 	.word	0x2000034c

0001336c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1336c:	f100 0208 	add.w	r2, r0, #8
   13370:	4b0e      	ldr	r3, [pc, #56]	; (133ac <release_handler+0x40>)
   13372:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   13376:	f413 7f80 	tst.w	r3, #256	; 0x100
   1337a:	d016      	beq.n	133aa <release_handler+0x3e>
{
   1337c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1337e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   13382:	4610      	mov	r0, r2
   13384:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   13388:	4a08      	ldr	r2, [pc, #32]	; (133ac <release_handler+0x40>)
   1338a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1338e:	4620      	mov	r0, r4
   13390:	f7ff ff76 	bl	13280 <handler_in_use>
   13394:	b100      	cbz	r0, 13398 <release_handler+0x2c>
}
   13396:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   13398:	4804      	ldr	r0, [pc, #16]	; (133ac <release_handler+0x40>)
   1339a:	2300      	movs	r3, #0
   1339c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   133a0:	4621      	mov	r1, r4
   133a2:	3054      	adds	r0, #84	; 0x54
   133a4:	f7ff ff18 	bl	131d8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   133a8:	e7f5      	b.n	13396 <release_handler+0x2a>
   133aa:	4770      	bx	lr
   133ac:	2000034c 	.word	0x2000034c

000133b0 <pin_handler_trigger_uninit>:
{
   133b0:	b510      	push	{r4, lr}
   133b2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   133b4:	f7ff ff3c 	bl	13230 <pin_in_use_by_te>
   133b8:	b140      	cbz	r0, 133cc <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   133ba:	4620      	mov	r0, r4
   133bc:	f7ff ff58 	bl	13270 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   133c0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   133c4:	4b06      	ldr	r3, [pc, #24]	; (133e0 <pin_handler_trigger_uninit+0x30>)
   133c6:	2200      	movs	r2, #0
   133c8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   133cc:	4620      	mov	r0, r4
   133ce:	f7ff ffcd 	bl	1336c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   133d2:	3408      	adds	r4, #8
   133d4:	4b03      	ldr	r3, [pc, #12]	; (133e4 <pin_handler_trigger_uninit+0x34>)
   133d6:	2200      	movs	r2, #0
   133d8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   133dc:	bd10      	pop	{r4, pc}
   133de:	bf00      	nop
   133e0:	40006000 	.word	0x40006000
   133e4:	2000034c 	.word	0x2000034c

000133e8 <pin_handler_set>:
{
   133e8:	b570      	push	{r4, r5, r6, lr}
   133ea:	b082      	sub	sp, #8
   133ec:	4605      	mov	r5, r0
   133ee:	460e      	mov	r6, r1
   133f0:	4614      	mov	r4, r2
    release_handler(pin);
   133f2:	f7ff ffbb 	bl	1336c <release_handler>
    if (!handler)
   133f6:	b326      	cbz	r6, 13442 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   133f8:	4621      	mov	r1, r4
   133fa:	4630      	mov	r0, r6
   133fc:	f7ff ff5a 	bl	132b4 <find_handler>
    if (handler_id < 0)
   13400:	1e03      	subs	r3, r0, #0
   13402:	db13      	blt.n	1342c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   13404:	4910      	ldr	r1, [pc, #64]	; (13448 <pin_handler_set+0x60>)
   13406:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1340a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1340e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13410:	f105 0008 	add.w	r0, r5, #8
   13414:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   13418:	025b      	lsls	r3, r3, #9
   1341a:	b29b      	uxth	r3, r3
   1341c:	4313      	orrs	r3, r2
   1341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13422:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   13426:	4809      	ldr	r0, [pc, #36]	; (1344c <pin_handler_set+0x64>)
}
   13428:	b002      	add	sp, #8
   1342a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1342c:	f10d 0107 	add.w	r1, sp, #7
   13430:	4807      	ldr	r0, [pc, #28]	; (13450 <pin_handler_set+0x68>)
   13432:	f7ff fea9 	bl	13188 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   13436:	4b05      	ldr	r3, [pc, #20]	; (1344c <pin_handler_set+0x64>)
   13438:	4298      	cmp	r0, r3
   1343a:	d1f5      	bne.n	13428 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1343c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13440:	e7e0      	b.n	13404 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   13442:	4802      	ldr	r0, [pc, #8]	; (1344c <pin_handler_set+0x64>)
   13444:	e7f0      	b.n	13428 <pin_handler_set+0x40>
   13446:	bf00      	nop
   13448:	2000034c 	.word	0x2000034c
   1344c:	0bad0000 	.word	0x0bad0000
   13450:	200003a0 	.word	0x200003a0

00013454 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   13454:	b5f0      	push	{r4, r5, r6, r7, lr}
   13456:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
   13458:	2300      	movs	r3, #0
   1345a:	a801      	add	r0, sp, #4
   1345c:	e008      	b.n	13470 <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
   1345e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13462:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   13466:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1346a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1346e:	3301      	adds	r3, #1
   13470:	2b00      	cmp	r3, #0
   13472:	d0f4      	beq.n	1345e <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13474:	2400      	movs	r4, #0
   13476:	b3a4      	cbz	r4, 134e2 <port_event_handle+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13478:	4b1e      	ldr	r3, [pc, #120]	; (134f4 <port_event_handle+0xa0>)
   1347a:	2200      	movs	r2, #0
   1347c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   13480:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   13484:	a801      	add	r0, sp, #4
   13486:	f005 fa00 	bl	1888a <latch_pending_read_and_check>
   1348a:	2800      	cmp	r0, #0
   1348c:	d1f2      	bne.n	13474 <port_event_handle+0x20>
}
   1348e:	b003      	add	sp, #12
   13490:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   13492:	fa90 f0a0 	rbit	r0, r0
   13496:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   1349a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1349e:	f100 0208 	add.w	r2, r0, #8
   134a2:	4b15      	ldr	r3, [pc, #84]	; (134f8 <port_event_handle+0xa4>)
   134a4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   134a8:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   134aa:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   134ae:	af01      	add	r7, sp, #4
   134b0:	5dba      	ldrb	r2, [r7, r6]
   134b2:	2501      	movs	r5, #1
   134b4:	fa05 f303 	lsl.w	r3, r5, r3
   134b8:	43db      	mvns	r3, r3
   134ba:	b25b      	sxtb	r3, r3
   134bc:	4013      	ands	r3, r2
   134be:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   134c0:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   134c4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   134c8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   134cc:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   134d0:	f3c2 4201 	ubfx	r2, r2, #16, #2
   134d4:	f3c1 0182 	ubfx	r1, r1, #2, #3
   134d8:	f005 f988 	bl	187ec <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   134dc:	40bd      	lsls	r5, r7
   134de:	f8c6 5520 	str.w	r5, [r6, #1312]	; 0x520
            while (latch[i])
   134e2:	ab02      	add	r3, sp, #8
   134e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   134e8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   134ec:	2800      	cmp	r0, #0
   134ee:	d1d0      	bne.n	13492 <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   134f0:	3401      	adds	r4, #1
   134f2:	e7c0      	b.n	13476 <port_event_handle+0x22>
   134f4:	40006000 	.word	0x40006000
   134f8:	2000034c 	.word	0x2000034c

000134fc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   134fc:	b538      	push	{r3, r4, r5, lr}
   134fe:	4604      	mov	r4, r0
    while (mask)
   13500:	e018      	b.n	13534 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   13502:	fa94 f3a4 	rbit	r3, r4
   13506:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1350a:	2201      	movs	r2, #1
   1350c:	409a      	lsls	r2, r3
   1350e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13512:	4a0a      	ldr	r2, [pc, #40]	; (1353c <gpiote_evt_handle+0x40>)
   13514:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   13518:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1351c:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   13520:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13524:	f3c0 4001 	ubfx	r0, r0, #16, #2
   13528:	f005 f959 	bl	187de <gpiote_polarity_to_trigger>
   1352c:	4601      	mov	r1, r0
   1352e:	4628      	mov	r0, r5
   13530:	f7ff ff06 	bl	13340 <call_handler>
    while (mask)
   13534:	2c00      	cmp	r4, #0
   13536:	d1e4      	bne.n	13502 <gpiote_evt_handle+0x6>
    }
}
   13538:	bd38      	pop	{r3, r4, r5, pc}
   1353a:	bf00      	nop
   1353c:	40006000 	.word	0x40006000

00013540 <nrfx_gpiote_input_configure>:
{
   13540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13544:	b084      	sub	sp, #16
   13546:	4604      	mov	r4, r0
   13548:	4615      	mov	r5, r2
   1354a:	461e      	mov	r6, r3
    if (p_input_config)
   1354c:	b309      	cbz	r1, 13592 <nrfx_gpiote_input_configure+0x52>
   1354e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   13550:	f005 f92f 	bl	187b2 <pin_is_task_output>
   13554:	2800      	cmp	r0, #0
   13556:	d13f      	bne.n	135d8 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   13558:	2300      	movs	r3, #0
   1355a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1355e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   13562:	9301      	str	r3, [sp, #4]
   13564:	9300      	str	r3, [sp, #0]
   13566:	463b      	mov	r3, r7
   13568:	f10d 020f 	add.w	r2, sp, #15
   1356c:	f10d 010e 	add.w	r1, sp, #14
   13570:	4620      	mov	r0, r4
   13572:	f005 f8c6 	bl	18702 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   13576:	4a38      	ldr	r2, [pc, #224]	; (13658 <nrfx_gpiote_input_configure+0x118>)
   13578:	f104 0108 	add.w	r1, r4, #8
   1357c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13580:	f023 0302 	bic.w	r3, r3, #2
   13584:	b29b      	uxth	r3, r3
   13586:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1358a:	f043 0301 	orr.w	r3, r3, #1
   1358e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   13592:	b1bd      	cbz	r5, 135c4 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   13594:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   13596:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   1359a:	4620      	mov	r0, r4
   1359c:	f7ff fe5e 	bl	1325c <pin_is_output>
   135a0:	b1e0      	cbz	r0, 135dc <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   135a2:	f1b8 0f00 	cmp.w	r8, #0
   135a6:	d151      	bne.n	1364c <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   135a8:	4a2b      	ldr	r2, [pc, #172]	; (13658 <nrfx_gpiote_input_configure+0x118>)
   135aa:	f104 0108 	add.w	r1, r4, #8
   135ae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   135b2:	f023 031c 	bic.w	r3, r3, #28
   135b6:	b29b      	uxth	r3, r3
   135b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   135bc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   135c0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   135c4:	2e00      	cmp	r6, #0
   135c6:	d045      	beq.n	13654 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   135c8:	6872      	ldr	r2, [r6, #4]
   135ca:	6831      	ldr	r1, [r6, #0]
   135cc:	4620      	mov	r0, r4
   135ce:	f7ff ff0b 	bl	133e8 <pin_handler_set>
}
   135d2:	b004      	add	sp, #16
   135d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   135d8:	4820      	ldr	r0, [pc, #128]	; (1365c <nrfx_gpiote_input_configure+0x11c>)
   135da:	e7fa      	b.n	135d2 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   135dc:	4a1e      	ldr	r2, [pc, #120]	; (13658 <nrfx_gpiote_input_configure+0x118>)
   135de:	f104 0108 	add.w	r1, r4, #8
   135e2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   135e6:	f023 0320 	bic.w	r3, r3, #32
   135ea:	04db      	lsls	r3, r3, #19
   135ec:	0cdb      	lsrs	r3, r3, #19
   135ee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   135f2:	f1b8 0f00 	cmp.w	r8, #0
   135f6:	d0d7      	beq.n	135a8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   135f8:	2f03      	cmp	r7, #3
   135fa:	d829      	bhi.n	13650 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   135fc:	686b      	ldr	r3, [r5, #4]
   135fe:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   13600:	b937      	cbnz	r7, 13610 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   13602:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   13606:	4b16      	ldr	r3, [pc, #88]	; (13660 <nrfx_gpiote_input_configure+0x120>)
   13608:	2200      	movs	r2, #0
   1360a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1360e:	e7cb      	b.n	135a8 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   13610:	4638      	mov	r0, r7
   13612:	f005 f8e5 	bl	187e0 <gpiote_trigger_to_polarity>
   13616:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13618:	4811      	ldr	r0, [pc, #68]	; (13660 <nrfx_gpiote_input_configure+0x120>)
   1361a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1361e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   13622:	f022 0203 	bic.w	r2, r2, #3
   13626:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   1362a:	4622      	mov	r2, r4
   1362c:	4629      	mov	r1, r5
   1362e:	f005 f830 	bl	18692 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13632:	4a09      	ldr	r2, [pc, #36]	; (13658 <nrfx_gpiote_input_configure+0x118>)
   13634:	f104 0108 	add.w	r1, r4, #8
   13638:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1363c:	036d      	lsls	r5, r5, #13
   1363e:	b2ad      	uxth	r5, r5
   13640:	432b      	orrs	r3, r5
   13642:	f043 0320 	orr.w	r3, r3, #32
   13646:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   1364a:	e7ad      	b.n	135a8 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   1364c:	4803      	ldr	r0, [pc, #12]	; (1365c <nrfx_gpiote_input_configure+0x11c>)
   1364e:	e7c0      	b.n	135d2 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   13650:	4802      	ldr	r0, [pc, #8]	; (1365c <nrfx_gpiote_input_configure+0x11c>)
   13652:	e7be      	b.n	135d2 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   13654:	4803      	ldr	r0, [pc, #12]	; (13664 <nrfx_gpiote_input_configure+0x124>)
   13656:	e7bc      	b.n	135d2 <nrfx_gpiote_input_configure+0x92>
   13658:	2000034c 	.word	0x2000034c
   1365c:	0bad0004 	.word	0x0bad0004
   13660:	40006000 	.word	0x40006000
   13664:	0bad0000 	.word	0x0bad0000

00013668 <nrfx_gpiote_output_configure>:
{
   13668:	b570      	push	{r4, r5, r6, lr}
   1366a:	b084      	sub	sp, #16
   1366c:	4604      	mov	r4, r0
   1366e:	4615      	mov	r5, r2
    if (p_config)
   13670:	b329      	cbz	r1, 136be <nrfx_gpiote_output_configure+0x56>
   13672:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   13674:	f005 f8ac 	bl	187d0 <pin_is_input>
   13678:	b120      	cbz	r0, 13684 <nrfx_gpiote_output_configure+0x1c>
   1367a:	4620      	mov	r0, r4
   1367c:	f7ff fdd8 	bl	13230 <pin_in_use_by_te>
   13680:	2800      	cmp	r0, #0
   13682:	d138      	bne.n	136f6 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   13684:	4620      	mov	r0, r4
   13686:	f7ff fddd 	bl	13244 <pin_has_trigger>
   1368a:	b110      	cbz	r0, 13692 <nrfx_gpiote_output_configure+0x2a>
   1368c:	7873      	ldrb	r3, [r6, #1]
   1368e:	2b01      	cmp	r3, #1
   13690:	d031      	beq.n	136f6 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   13692:	2301      	movs	r3, #1
   13694:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   13698:	2300      	movs	r3, #0
   1369a:	9301      	str	r3, [sp, #4]
   1369c:	9600      	str	r6, [sp, #0]
   1369e:	1cb3      	adds	r3, r6, #2
   136a0:	1c72      	adds	r2, r6, #1
   136a2:	f10d 010f 	add.w	r1, sp, #15
   136a6:	4620      	mov	r0, r4
   136a8:	f005 f82b 	bl	18702 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   136ac:	4a1f      	ldr	r2, [pc, #124]	; (1372c <nrfx_gpiote_output_configure+0xc4>)
   136ae:	f104 0108 	add.w	r1, r4, #8
   136b2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   136b6:	f043 0303 	orr.w	r3, r3, #3
   136ba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   136be:	b385      	cbz	r5, 13722 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   136c0:	4620      	mov	r0, r4
   136c2:	f005 f885 	bl	187d0 <pin_is_input>
   136c6:	bb70      	cbnz	r0, 13726 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   136c8:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   136ca:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   136ce:	4b18      	ldr	r3, [pc, #96]	; (13730 <nrfx_gpiote_output_configure+0xc8>)
   136d0:	2100      	movs	r1, #0
   136d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   136d6:	4a15      	ldr	r2, [pc, #84]	; (1372c <nrfx_gpiote_output_configure+0xc4>)
   136d8:	f104 0108 	add.w	r1, r4, #8
   136dc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   136e0:	f023 0320 	bic.w	r3, r3, #32
   136e4:	04db      	lsls	r3, r3, #19
   136e6:	0cdb      	lsrs	r3, r3, #19
   136e8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   136ec:	786b      	ldrb	r3, [r5, #1]
   136ee:	b923      	cbnz	r3, 136fa <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   136f0:	4810      	ldr	r0, [pc, #64]	; (13734 <nrfx_gpiote_output_configure+0xcc>)
}
   136f2:	b004      	add	sp, #16
   136f4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   136f6:	4810      	ldr	r0, [pc, #64]	; (13738 <nrfx_gpiote_output_configure+0xd0>)
   136f8:	e7fb      	b.n	136f2 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   136fa:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   136fc:	9200      	str	r2, [sp, #0]
   136fe:	4622      	mov	r2, r4
   13700:	4631      	mov	r1, r6
   13702:	480b      	ldr	r0, [pc, #44]	; (13730 <nrfx_gpiote_output_configure+0xc8>)
   13704:	f004 ffde 	bl	186c4 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13708:	4a08      	ldr	r2, [pc, #32]	; (1372c <nrfx_gpiote_output_configure+0xc4>)
   1370a:	3408      	adds	r4, #8
   1370c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   13710:	0376      	lsls	r6, r6, #13
   13712:	b2b6      	uxth	r6, r6
   13714:	4333      	orrs	r3, r6
   13716:	f043 0320 	orr.w	r3, r3, #32
   1371a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   1371e:	4805      	ldr	r0, [pc, #20]	; (13734 <nrfx_gpiote_output_configure+0xcc>)
   13720:	e7e7      	b.n	136f2 <nrfx_gpiote_output_configure+0x8a>
   13722:	4804      	ldr	r0, [pc, #16]	; (13734 <nrfx_gpiote_output_configure+0xcc>)
   13724:	e7e5      	b.n	136f2 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   13726:	4804      	ldr	r0, [pc, #16]	; (13738 <nrfx_gpiote_output_configure+0xd0>)
   13728:	e7e3      	b.n	136f2 <nrfx_gpiote_output_configure+0x8a>
   1372a:	bf00      	nop
   1372c:	2000034c 	.word	0x2000034c
   13730:	40006000 	.word	0x40006000
   13734:	0bad0000 	.word	0x0bad0000
   13738:	0bad0004 	.word	0x0bad0004

0001373c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1373c:	4b01      	ldr	r3, [pc, #4]	; (13744 <nrfx_gpiote_global_callback_set+0x8>)
   1373e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   13740:	60d9      	str	r1, [r3, #12]
}
   13742:	4770      	bx	lr
   13744:	2000034c 	.word	0x2000034c

00013748 <nrfx_gpiote_channel_get>:
{
   13748:	b538      	push	{r3, r4, r5, lr}
   1374a:	4604      	mov	r4, r0
   1374c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1374e:	f7ff fd6f 	bl	13230 <pin_in_use_by_te>
   13752:	b140      	cbz	r0, 13766 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13754:	f104 0008 	add.w	r0, r4, #8
   13758:	4b04      	ldr	r3, [pc, #16]	; (1376c <nrfx_gpiote_channel_get+0x24>)
   1375a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1375e:	0b5b      	lsrs	r3, r3, #13
   13760:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   13762:	4803      	ldr	r0, [pc, #12]	; (13770 <nrfx_gpiote_channel_get+0x28>)
}
   13764:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13766:	4803      	ldr	r0, [pc, #12]	; (13774 <nrfx_gpiote_channel_get+0x2c>)
   13768:	e7fc      	b.n	13764 <nrfx_gpiote_channel_get+0x1c>
   1376a:	bf00      	nop
   1376c:	2000034c 	.word	0x2000034c
   13770:	0bad0000 	.word	0x0bad0000
   13774:	0bad0004 	.word	0x0bad0004

00013778 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13778:	4b0f      	ldr	r3, [pc, #60]	; (137b8 <nrfx_gpiote_init+0x40>)
   1377a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   1377e:	b10b      	cbz	r3, 13784 <nrfx_gpiote_init+0xc>
        return err_code;
   13780:	480e      	ldr	r0, [pc, #56]	; (137bc <nrfx_gpiote_init+0x44>)
}
   13782:	4770      	bx	lr
{
   13784:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   13786:	4c0e      	ldr	r4, [pc, #56]	; (137c0 <nrfx_gpiote_init+0x48>)
   13788:	2240      	movs	r2, #64	; 0x40
   1378a:	2100      	movs	r1, #0
   1378c:	4620      	mov	r0, r4
   1378e:	f003 fb3f 	bl	16e10 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   13792:	2006      	movs	r0, #6
   13794:	f003 fa39 	bl	16c0a <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13798:	4b0a      	ldr	r3, [pc, #40]	; (137c4 <nrfx_gpiote_init+0x4c>)
   1379a:	2200      	movs	r2, #0
   1379c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   137a0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   137a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   137a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   137ac:	2301      	movs	r3, #1
   137ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   137b2:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
   137b4:	4804      	ldr	r0, [pc, #16]	; (137c8 <nrfx_gpiote_init+0x50>)
}
   137b6:	bd10      	pop	{r4, pc}
   137b8:	2000034c 	.word	0x2000034c
   137bc:	0bad0005 	.word	0x0bad0005
   137c0:	2000035c 	.word	0x2000035c
   137c4:	40006000 	.word	0x40006000
   137c8:	0bad0000 	.word	0x0bad0000

000137cc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   137cc:	4b03      	ldr	r3, [pc, #12]	; (137dc <nrfx_gpiote_is_init+0x10>)
   137ce:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   137d2:	3800      	subs	r0, #0
   137d4:	bf18      	it	ne
   137d6:	2001      	movne	r0, #1
   137d8:	4770      	bx	lr
   137da:	bf00      	nop
   137dc:	2000034c 	.word	0x2000034c

000137e0 <nrfx_gpiote_channel_free>:
{
   137e0:	b508      	push	{r3, lr}
   137e2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   137e4:	4801      	ldr	r0, [pc, #4]	; (137ec <nrfx_gpiote_channel_free+0xc>)
   137e6:	f7ff fcf7 	bl	131d8 <nrfx_flag32_free>
}
   137ea:	bd08      	pop	{r3, pc}
   137ec:	2000039c 	.word	0x2000039c

000137f0 <nrfx_gpiote_channel_alloc>:
{
   137f0:	b508      	push	{r3, lr}
   137f2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   137f4:	4801      	ldr	r0, [pc, #4]	; (137fc <nrfx_gpiote_channel_alloc+0xc>)
   137f6:	f7ff fcc7 	bl	13188 <nrfx_flag32_alloc>
}
   137fa:	bd08      	pop	{r3, pc}
   137fc:	2000039c 	.word	0x2000039c

00013800 <nrfx_gpiote_trigger_enable>:
{
   13800:	b538      	push	{r3, r4, r5, lr}
   13802:	4604      	mov	r4, r0
   13804:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13806:	f7ff fd13 	bl	13230 <pin_in_use_by_te>
   1380a:	b300      	cbz	r0, 1384e <nrfx_gpiote_trigger_enable+0x4e>
   1380c:	4620      	mov	r0, r4
   1380e:	f004 ffdf 	bl	187d0 <pin_is_input>
   13812:	b1e0      	cbz	r0, 1384e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   13814:	4620      	mov	r0, r4
   13816:	f7ff fd2b 	bl	13270 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1381a:	0083      	lsls	r3, r0, #2
   1381c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   13820:	b29b      	uxth	r3, r3
   13822:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13826:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1382a:	2200      	movs	r2, #0
   1382c:	601a      	str	r2, [r3, #0]
   1382e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   13830:	4a10      	ldr	r2, [pc, #64]	; (13874 <nrfx_gpiote_trigger_enable+0x74>)
   13832:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   13836:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1383a:	f043 0301 	orr.w	r3, r3, #1
   1383e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   13842:	b1ad      	cbz	r5, 13870 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   13844:	2301      	movs	r3, #1
   13846:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   13848:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1384c:	e010      	b.n	13870 <nrfx_gpiote_trigger_enable+0x70>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1384e:	4620      	mov	r0, r4
   13850:	f7ff fd46 	bl	132e0 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
   13854:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13858:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1385c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   13860:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   13864:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13868:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1386c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   13870:	bd38      	pop	{r3, r4, r5, pc}
   13872:	bf00      	nop
   13874:	40006000 	.word	0x40006000

00013878 <nrfx_gpiote_trigger_disable>:
{
   13878:	b510      	push	{r4, lr}
   1387a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1387c:	f7ff fcd8 	bl	13230 <pin_in_use_by_te>
   13880:	b1a0      	cbz	r0, 138ac <nrfx_gpiote_trigger_disable+0x34>
   13882:	4620      	mov	r0, r4
   13884:	f004 ffa4 	bl	187d0 <pin_is_input>
   13888:	b180      	cbz	r0, 138ac <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1388a:	4620      	mov	r0, r4
   1388c:	f7ff fcf0 	bl	13270 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   13890:	2201      	movs	r2, #1
   13892:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   13894:	4b0c      	ldr	r3, [pc, #48]	; (138c8 <nrfx_gpiote_trigger_disable+0x50>)
   13896:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1389a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1389e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   138a2:	f022 0203 	bic.w	r2, r2, #3
   138a6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   138aa:	e00b      	b.n	138c4 <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
   138ac:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   138b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   138b4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   138b8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   138bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   138c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   138c4:	bd10      	pop	{r4, pc}
   138c6:	bf00      	nop
   138c8:	40006000 	.word	0x40006000

000138cc <nrfx_gpiote_pin_uninit>:
{
   138cc:	b510      	push	{r4, lr}
   138ce:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   138d0:	f7ff fca4 	bl	1321c <pin_in_use>
   138d4:	b908      	cbnz	r0, 138da <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   138d6:	4809      	ldr	r0, [pc, #36]	; (138fc <nrfx_gpiote_pin_uninit+0x30>)
}
   138d8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   138da:	4620      	mov	r0, r4
   138dc:	f7ff ffcc 	bl	13878 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   138e0:	4620      	mov	r0, r4
   138e2:	f7ff fd65 	bl	133b0 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   138e6:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   138ea:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   138ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   138f2:	2202      	movs	r2, #2
   138f4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   138f8:	4801      	ldr	r0, [pc, #4]	; (13900 <nrfx_gpiote_pin_uninit+0x34>)
   138fa:	e7ed      	b.n	138d8 <nrfx_gpiote_pin_uninit+0xc>
   138fc:	0bad0004 	.word	0x0bad0004
   13900:	0bad0000 	.word	0x0bad0000

00013904 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   13904:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   13906:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   13908:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1390c:	2100      	movs	r1, #0
    uint32_t status = 0;
   1390e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13910:	e003      	b.n	1391a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   13912:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   13914:	3304      	adds	r3, #4
   13916:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13918:	3101      	adds	r1, #1
   1391a:	2907      	cmp	r1, #7
   1391c:	d814      	bhi.n	13948 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1391e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   13922:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   13926:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   13928:	2a00      	cmp	r2, #0
   1392a:	d0f2      	beq.n	13912 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1392c:	4a0c      	ldr	r2, [pc, #48]	; (13960 <nrfx_gpiote_irq_handler+0x5c>)
   1392e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   13932:	4210      	tst	r0, r2
   13934:	d0ed      	beq.n	13912 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   13936:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1393a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1393e:	2500      	movs	r5, #0
   13940:	6015      	str	r5, [r2, #0]
   13942:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   13944:	4304      	orrs	r4, r0
   13946:	e7e4      	b.n	13912 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13948:	4b05      	ldr	r3, [pc, #20]	; (13960 <nrfx_gpiote_irq_handler+0x5c>)
   1394a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1394e:	b91b      	cbnz	r3, 13958 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   13950:	4620      	mov	r0, r4
   13952:	f7ff fdd3 	bl	134fc <gpiote_evt_handle>
}
   13956:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   13958:	f7ff fd7c 	bl	13454 <port_event_handle>
   1395c:	e7f8      	b.n	13950 <nrfx_gpiote_irq_handler+0x4c>
   1395e:	bf00      	nop
   13960:	40006000 	.word	0x40006000

00013964 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   13964:	b508      	push	{r3, lr}
   13966:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   13968:	4801      	ldr	r0, [pc, #4]	; (13970 <nrfx_ppi_channel_alloc+0xc>)
   1396a:	f7ff fc0d 	bl	13188 <nrfx_flag32_alloc>
}
   1396e:	bd08      	pop	{r3, pc}
   13970:	200003a8 	.word	0x200003a8

00013974 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   13974:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13976:	4c11      	ldr	r4, [pc, #68]	; (139bc <_DoInit+0x48>)
   13978:	2303      	movs	r3, #3
   1397a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1397c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1397e:	4a10      	ldr	r2, [pc, #64]	; (139c0 <_DoInit+0x4c>)
   13980:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13982:	4b10      	ldr	r3, [pc, #64]	; (139c4 <_DoInit+0x50>)
   13984:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   13986:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1398a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1398c:	2300      	movs	r3, #0
   1398e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   13990:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13992:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   13994:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   13996:	4a0c      	ldr	r2, [pc, #48]	; (139c8 <_DoInit+0x54>)
   13998:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1399a:	2210      	movs	r2, #16
   1399c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1399e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   139a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   139a2:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   139a4:	4909      	ldr	r1, [pc, #36]	; (139cc <_DoInit+0x58>)
   139a6:	1de0      	adds	r0, r4, #7
   139a8:	f003 f9af 	bl	16d0a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   139ac:	4908      	ldr	r1, [pc, #32]	; (139d0 <_DoInit+0x5c>)
   139ae:	4620      	mov	r0, r4
   139b0:	f003 f9ab 	bl	16d0a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   139b4:	2320      	movs	r3, #32
   139b6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   139b8:	bd10      	pop	{r4, pc}
   139ba:	bf00      	nop
   139bc:	20002554 	.word	0x20002554
   139c0:	0001b2dc 	.word	0x0001b2dc
   139c4:	20002154 	.word	0x20002154
   139c8:	20002144 	.word	0x20002144
   139cc:	0001b2e8 	.word	0x0001b2e8
   139d0:	0001b2ec 	.word	0x0001b2ec

000139d4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   139d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   139d8:	4604      	mov	r4, r0
   139da:	460e      	mov	r6, r1
   139dc:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   139de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   139e2:	4a2d      	ldr	r2, [pc, #180]	; (13a98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   139e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   139e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   139ea:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   139ec:	42bb      	cmp	r3, r7
   139ee:	d84c      	bhi.n	13a8a <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   139f0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   139f4:	4a28      	ldr	r2, [pc, #160]	; (13a98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   139f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   139fa:	f8d2 8020 	ldr.w	r8, [r2, #32]
   139fe:	eba8 0907 	sub.w	r9, r8, r7
   13a02:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   13a06:	4295      	cmp	r5, r2
   13a08:	d904      	bls.n	13a14 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   13a0a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   13a0c:	429d      	cmp	r5, r3
   13a0e:	d916      	bls.n	13a3e <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   13a10:	2000      	movs	r0, #0
   13a12:	e03f      	b.n	13a94 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   13a14:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13a98 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   13a18:	1c63      	adds	r3, r4, #1
   13a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a1e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   13a22:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   13a24:	462a      	mov	r2, r5
   13a26:	4631      	mov	r1, r6
   13a28:	4438      	add	r0, r7
   13a2a:	f003 f9c2 	bl	16db2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   13a2e:	442f      	add	r7, r5
   13a30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13a34:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   13a38:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   13a3a:	2001      	movs	r0, #1
   13a3c:	e02a      	b.n	13a94 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   13a3e:	1c43      	adds	r3, r0, #1
   13a40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a44:	4a14      	ldr	r2, [pc, #80]	; (13a98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   13a46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13a4a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   13a4c:	464a      	mov	r2, r9
   13a4e:	4631      	mov	r1, r6
   13a50:	4438      	add	r0, r7
   13a52:	f003 f9ae 	bl	16db2 <memcpy>
      NumBytes -= Rem;
   13a56:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   13a5a:	eb18 0505 	adds.w	r5, r8, r5
   13a5e:	d107      	bne.n	13a70 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   13a60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13a64:	4b0c      	ldr	r3, [pc, #48]	; (13a98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   13a66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13a6a:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   13a6c:	2001      	movs	r0, #1
   13a6e:	e011      	b.n	13a94 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   13a70:	1c63      	adds	r3, r4, #1
   13a72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a76:	4a08      	ldr	r2, [pc, #32]	; (13a98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   13a78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   13a7c:	462a      	mov	r2, r5
   13a7e:	eb06 0109 	add.w	r1, r6, r9
   13a82:	6858      	ldr	r0, [r3, #4]
   13a84:	f003 f995 	bl	16db2 <memcpy>
   13a88:	e7ea      	b.n	13a60 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   13a8a:	1bdb      	subs	r3, r3, r7
   13a8c:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   13a8e:	42ab      	cmp	r3, r5
   13a90:	d2c0      	bcs.n	13a14 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   13a92:	2000      	movs	r0, #0
}
   13a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13a98:	20002554 	.word	0x20002554

00013a9c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   13a9c:	4b06      	ldr	r3, [pc, #24]	; (13ab8 <SEGGER_RTT_HasDataUp+0x1c>)
   13a9e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   13aa2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   13aa6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   13aa8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13aac:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   13ab0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   13ab2:	1a80      	subs	r0, r0, r2
   13ab4:	4770      	bx	lr
   13ab6:	bf00      	nop
   13ab8:	20002554 	.word	0x20002554

00013abc <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   13abc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   13abe:	f04f 32ff 	mov.w	r2, #4294967295
   13ac2:	f04f 33ff 	mov.w	r3, #4294967295
   13ac6:	4802      	ldr	r0, [pc, #8]	; (13ad0 <zephyr_rtt_mutex_lock+0x14>)
   13ac8:	f000 fbc8 	bl	1425c <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   13acc:	bd08      	pop	{r3, pc}
   13ace:	bf00      	nop
   13ad0:	20000420 	.word	0x20000420

00013ad4 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   13ad4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   13ad6:	4802      	ldr	r0, [pc, #8]	; (13ae0 <zephyr_rtt_mutex_unlock+0xc>)
   13ad8:	f000 fc44 	bl	14364 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   13adc:	bd08      	pop	{r3, pc}
   13ade:	bf00      	nop
   13ae0:	20000420 	.word	0x20000420

00013ae4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   13ae4:	4b03      	ldr	r3, [pc, #12]	; (13af4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   13ae6:	e000      	b.n	13aea <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   13ae8:	3318      	adds	r3, #24
	while (dev < __device_end) {
   13aea:	4a03      	ldr	r2, [pc, #12]	; (13af8 <z_device_state_init+0x14>)
   13aec:	4293      	cmp	r3, r2
   13aee:	d3fb      	bcc.n	13ae8 <z_device_state_init+0x4>
	}
}
   13af0:	4770      	bx	lr
   13af2:	bf00      	nop
   13af4:	00019778 	.word	0x00019778
   13af8:	000197f0 	.word	0x000197f0

00013afc <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   13afc:	2804      	cmp	r0, #4
   13afe:	d80c      	bhi.n	13b1a <reason_to_str+0x1e>
   13b00:	e8df f000 	tbb	[pc, r0]
   13b04:	07050d03 	.word	0x07050d03
   13b08:	09          	.byte	0x09
   13b09:	00          	.byte	0x00
   13b0a:	4806      	ldr	r0, [pc, #24]	; (13b24 <reason_to_str+0x28>)
   13b0c:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   13b0e:	4806      	ldr	r0, [pc, #24]	; (13b28 <reason_to_str+0x2c>)
   13b10:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   13b12:	4806      	ldr	r0, [pc, #24]	; (13b2c <reason_to_str+0x30>)
   13b14:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   13b16:	4806      	ldr	r0, [pc, #24]	; (13b30 <reason_to_str+0x34>)
   13b18:	4770      	bx	lr
	default:
		return "Unknown error";
   13b1a:	4806      	ldr	r0, [pc, #24]	; (13b34 <reason_to_str+0x38>)
   13b1c:	4770      	bx	lr
		return "Unhandled interrupt";
   13b1e:	4806      	ldr	r0, [pc, #24]	; (13b38 <reason_to_str+0x3c>)
	}
}
   13b20:	4770      	bx	lr
   13b22:	bf00      	nop
   13b24:	0001b2f8 	.word	0x0001b2f8
   13b28:	0001b31c 	.word	0x0001b31c
   13b2c:	0001b32c 	.word	0x0001b32c
   13b30:	0001b338 	.word	0x0001b338
   13b34:	0001b348 	.word	0x0001b348
   13b38:	0001b308 	.word	0x0001b308

00013b3c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   13b3c:	b130      	cbz	r0, 13b4c <thread_name_get+0x10>
{
   13b3e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   13b40:	f004 ff71 	bl	18a26 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   13b44:	b120      	cbz	r0, 13b50 <thread_name_get+0x14>
   13b46:	7803      	ldrb	r3, [r0, #0]
   13b48:	b123      	cbz	r3, 13b54 <thread_name_get+0x18>
}
   13b4a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   13b4c:	4802      	ldr	r0, [pc, #8]	; (13b58 <thread_name_get+0x1c>)
}
   13b4e:	4770      	bx	lr
		thread_name = "unknown";
   13b50:	4801      	ldr	r0, [pc, #4]	; (13b58 <thread_name_get+0x1c>)
   13b52:	e7fa      	b.n	13b4a <thread_name_get+0xe>
   13b54:	4800      	ldr	r0, [pc, #0]	; (13b58 <thread_name_get+0x1c>)
	return thread_name;
   13b56:	e7f8      	b.n	13b4a <thread_name_get+0xe>
   13b58:	0001a498 	.word	0x0001a498

00013b5c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b60:	b083      	sub	sp, #12
   13b62:	af00      	add	r7, sp, #0
   13b64:	4606      	mov	r6, r0
   13b66:	460c      	mov	r4, r1
	__asm__ volatile(
   13b68:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b6c:	f3ef 8811 	mrs	r8, BASEPRI
   13b70:	f383 8812 	msr	BASEPRI_MAX, r3
   13b74:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   13b78:	f001 f994 	bl	14ea4 <z_impl_z_current_get>
   13b7c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   13b7e:	4630      	mov	r0, r6
   13b80:	f7ff ffbc 	bl	13afc <reason_to_str>
   13b84:	46e9      	mov	r9, sp
   13b86:	2302      	movs	r3, #2
   13b88:	713b      	strb	r3, [r7, #4]
   13b8a:	2304      	movs	r3, #4
   13b8c:	717b      	strb	r3, [r7, #5]
   13b8e:	b08c      	sub	sp, #48	; 0x30
   13b90:	46ec      	mov	ip, sp
   13b92:	f11c 0210 	adds.w	r2, ip, #16
   13b96:	d026      	beq.n	13be6 <z_fatal_error+0x8a>
   13b98:	f04f 0e1a 	mov.w	lr, #26
   13b9c:	b17a      	cbz	r2, 13bbe <z_fatal_error+0x62>
   13b9e:	4673      	mov	r3, lr
   13ba0:	f1be 0f04 	cmp.w	lr, #4
   13ba4:	dd02      	ble.n	13bac <z_fatal_error+0x50>
   13ba6:	4986      	ldr	r1, [pc, #536]	; (13dc0 <z_fatal_error+0x264>)
   13ba8:	f8cc 1014 	str.w	r1, [ip, #20]
   13bac:	2b08      	cmp	r3, #8
   13bae:	dd02      	ble.n	13bb6 <z_fatal_error+0x5a>
   13bb0:	4984      	ldr	r1, [pc, #528]	; (13dc4 <z_fatal_error+0x268>)
   13bb2:	f8cc 1018 	str.w	r1, [ip, #24]
   13bb6:	2b0c      	cmp	r3, #12
   13bb8:	dd01      	ble.n	13bbe <z_fatal_error+0x62>
   13bba:	f8cc 601c 	str.w	r6, [ip, #28]
   13bbe:	2302      	movs	r3, #2
   13bc0:	703b      	strb	r3, [r7, #0]
   13bc2:	2304      	movs	r3, #4
   13bc4:	707b      	strb	r3, [r7, #1]
   13bc6:	b1da      	cbz	r2, 13c00 <z_fatal_error+0xa4>
   13bc8:	4673      	mov	r3, lr
   13bca:	f1be 0f10 	cmp.w	lr, #16
   13bce:	dd01      	ble.n	13bd4 <z_fatal_error+0x78>
   13bd0:	f8cc 0020 	str.w	r0, [ip, #32]
   13bd4:	2b14      	cmp	r3, #20
   13bd6:	dd02      	ble.n	13bde <z_fatal_error+0x82>
   13bd8:	2300      	movs	r3, #0
   13bda:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   13bde:	f10c 0328 	add.w	r3, ip, #40	; 0x28
   13be2:	2100      	movs	r1, #0
   13be4:	e00a      	b.n	13bfc <z_fatal_error+0xa0>
   13be6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   13bea:	e7d7      	b.n	13b9c <z_fatal_error+0x40>
   13bec:	f101 0008 	add.w	r0, r1, #8
   13bf0:	4438      	add	r0, r7
   13bf2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   13bf6:	f803 0b01 	strb.w	r0, [r3], #1
   13bfa:	3101      	adds	r1, #1
   13bfc:	2901      	cmp	r1, #1
   13bfe:	d9f5      	bls.n	13bec <z_fatal_error+0x90>
   13c00:	f1be 0f19 	cmp.w	lr, #25
   13c04:	f340 808e 	ble.w	13d24 <z_fatal_error+0x1c8>
   13c08:	231a      	movs	r3, #26
   13c0a:	b14a      	cbz	r2, 13c20 <z_fatal_error+0xc4>
   13c0c:	2106      	movs	r1, #6
   13c0e:	7139      	strb	r1, [r7, #4]
   13c10:	2100      	movs	r1, #0
   13c12:	7179      	strb	r1, [r7, #5]
   13c14:	71b9      	strb	r1, [r7, #6]
   13c16:	2101      	movs	r1, #1
   13c18:	71f9      	strb	r1, [r7, #7]
   13c1a:	6878      	ldr	r0, [r7, #4]
   13c1c:	f8cc 0010 	str.w	r0, [ip, #16]
   13c20:	2100      	movs	r1, #0
   13c22:	f36f 0100 	bfc	r1, #0, #1
   13c26:	f36f 0141 	bfc	r1, #1, #1
   13c2a:	f36f 0182 	bfc	r1, #2, #1
   13c2e:	f36f 01c5 	bfc	r1, #3, #3
   13c32:	2001      	movs	r0, #1
   13c34:	f360 1188 	bfi	r1, r0, #6, #3
   13c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
   13c3c:	f363 2153 	bfi	r1, r3, #9, #11
   13c40:	f36f 511f 	bfc	r1, #20, #12
   13c44:	2300      	movs	r3, #0
   13c46:	4860      	ldr	r0, [pc, #384]	; (13dc8 <z_fatal_error+0x26c>)
   13c48:	f7f7 ff8c 	bl	bb64 <z_impl_z_log_msg_static_create>
   13c4c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   13c4e:	2c00      	cmp	r4, #0
   13c50:	d03a      	beq.n	13cc8 <z_fatal_error+0x16c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   13c52:	69e3      	ldr	r3, [r4, #28]
   13c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13c58:	b3b3      	cbz	r3, 13cc8 <z_fatal_error+0x16c>
		LOG_ERR("Fault during interrupt handling\n");
   13c5a:	46e9      	mov	r9, sp
   13c5c:	b088      	sub	sp, #32
   13c5e:	466b      	mov	r3, sp
   13c60:	f113 0210 	adds.w	r2, r3, #16
   13c64:	d061      	beq.n	13d2a <z_fatal_error+0x1ce>
   13c66:	210c      	movs	r1, #12
   13c68:	b152      	cbz	r2, 13c80 <z_fatal_error+0x124>
   13c6a:	4608      	mov	r0, r1
   13c6c:	2904      	cmp	r1, #4
   13c6e:	dd03      	ble.n	13c78 <z_fatal_error+0x11c>
   13c70:	f8df c158 	ldr.w	ip, [pc, #344]	; 13dcc <z_fatal_error+0x270>
   13c74:	f8c3 c014 	str.w	ip, [r3, #20]
   13c78:	2808      	cmp	r0, #8
   13c7a:	dd01      	ble.n	13c80 <z_fatal_error+0x124>
   13c7c:	4851      	ldr	r0, [pc, #324]	; (13dc4 <z_fatal_error+0x268>)
   13c7e:	6198      	str	r0, [r3, #24]
   13c80:	290b      	cmp	r1, #11
   13c82:	dd55      	ble.n	13d30 <z_fatal_error+0x1d4>
   13c84:	f04f 0c0c 	mov.w	ip, #12
   13c88:	b13a      	cbz	r2, 13c9a <z_fatal_error+0x13e>
   13c8a:	2103      	movs	r1, #3
   13c8c:	7139      	strb	r1, [r7, #4]
   13c8e:	2100      	movs	r1, #0
   13c90:	7179      	strb	r1, [r7, #5]
   13c92:	71b9      	strb	r1, [r7, #6]
   13c94:	71f9      	strb	r1, [r7, #7]
   13c96:	6878      	ldr	r0, [r7, #4]
   13c98:	6118      	str	r0, [r3, #16]
   13c9a:	2100      	movs	r1, #0
   13c9c:	f36f 0100 	bfc	r1, #0, #1
   13ca0:	f36f 0141 	bfc	r1, #1, #1
   13ca4:	f36f 0182 	bfc	r1, #2, #1
   13ca8:	f36f 01c5 	bfc	r1, #3, #3
   13cac:	2301      	movs	r3, #1
   13cae:	f363 1188 	bfi	r1, r3, #6, #3
   13cb2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   13cb6:	f36c 2153 	bfi	r1, ip, #9, #11
   13cba:	f36f 511f 	bfc	r1, #20, #12
   13cbe:	2300      	movs	r3, #0
   13cc0:	4841      	ldr	r0, [pc, #260]	; (13dc8 <z_fatal_error+0x26c>)
   13cc2:	f7f7 ff4f 	bl	bb64 <z_impl_z_log_msg_static_create>
   13cc6:	46cd      	mov	sp, r9
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   13cc8:	4628      	mov	r0, r5
   13cca:	f7ff ff37 	bl	13b3c <thread_name_get>
   13cce:	46e9      	mov	r9, sp
   13cd0:	2302      	movs	r3, #2
   13cd2:	713b      	strb	r3, [r7, #4]
   13cd4:	2304      	movs	r3, #4
   13cd6:	717b      	strb	r3, [r7, #5]
   13cd8:	b08a      	sub	sp, #40	; 0x28
   13cda:	46ec      	mov	ip, sp
   13cdc:	f11c 0210 	adds.w	r2, ip, #16
   13ce0:	d029      	beq.n	13d36 <z_fatal_error+0x1da>
   13ce2:	f04f 0e16 	mov.w	lr, #22
   13ce6:	b17a      	cbz	r2, 13d08 <z_fatal_error+0x1ac>
   13ce8:	4673      	mov	r3, lr
   13cea:	f1be 0f04 	cmp.w	lr, #4
   13cee:	dd02      	ble.n	13cf6 <z_fatal_error+0x19a>
   13cf0:	4937      	ldr	r1, [pc, #220]	; (13dd0 <z_fatal_error+0x274>)
   13cf2:	f8cc 1014 	str.w	r1, [ip, #20]
   13cf6:	2b08      	cmp	r3, #8
   13cf8:	dd02      	ble.n	13d00 <z_fatal_error+0x1a4>
   13cfa:	4932      	ldr	r1, [pc, #200]	; (13dc4 <z_fatal_error+0x268>)
   13cfc:	f8cc 1018 	str.w	r1, [ip, #24]
   13d00:	2b0c      	cmp	r3, #12
   13d02:	dd01      	ble.n	13d08 <z_fatal_error+0x1ac>
   13d04:	f8cc 501c 	str.w	r5, [ip, #28]
   13d08:	2302      	movs	r3, #2
   13d0a:	703b      	strb	r3, [r7, #0]
   13d0c:	2304      	movs	r3, #4
   13d0e:	707b      	strb	r3, [r7, #1]
   13d10:	b1f2      	cbz	r2, 13d50 <z_fatal_error+0x1f4>
   13d12:	f1be 0f10 	cmp.w	lr, #16
   13d16:	dd01      	ble.n	13d1c <z_fatal_error+0x1c0>
   13d18:	f8cc 0020 	str.w	r0, [ip, #32]
   13d1c:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   13d20:	2100      	movs	r1, #0
   13d22:	e013      	b.n	13d4c <z_fatal_error+0x1f0>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   13d24:	f06f 031b 	mvn.w	r3, #27
   13d28:	e76f      	b.n	13c0a <z_fatal_error+0xae>
		LOG_ERR("Fault during interrupt handling\n");
   13d2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   13d2e:	e79b      	b.n	13c68 <z_fatal_error+0x10c>
   13d30:	f06f 0c1b 	mvn.w	ip, #27
   13d34:	e7a8      	b.n	13c88 <z_fatal_error+0x12c>
	LOG_ERR("Current thread: %p (%s)", thread,
   13d36:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   13d3a:	e7d4      	b.n	13ce6 <z_fatal_error+0x18a>
   13d3c:	f101 0008 	add.w	r0, r1, #8
   13d40:	4438      	add	r0, r7
   13d42:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   13d46:	f803 0b01 	strb.w	r0, [r3], #1
   13d4a:	3101      	adds	r1, #1
   13d4c:	2901      	cmp	r1, #1
   13d4e:	d9f5      	bls.n	13d3c <z_fatal_error+0x1e0>
   13d50:	f1be 0f15 	cmp.w	lr, #21
   13d54:	dd31      	ble.n	13dba <z_fatal_error+0x25e>
   13d56:	2316      	movs	r3, #22
   13d58:	b14a      	cbz	r2, 13d6e <z_fatal_error+0x212>
   13d5a:	2105      	movs	r1, #5
   13d5c:	7139      	strb	r1, [r7, #4]
   13d5e:	2100      	movs	r1, #0
   13d60:	7179      	strb	r1, [r7, #5]
   13d62:	71b9      	strb	r1, [r7, #6]
   13d64:	2101      	movs	r1, #1
   13d66:	71f9      	strb	r1, [r7, #7]
   13d68:	6878      	ldr	r0, [r7, #4]
   13d6a:	f8cc 0010 	str.w	r0, [ip, #16]
   13d6e:	2100      	movs	r1, #0
   13d70:	f36f 0100 	bfc	r1, #0, #1
   13d74:	f36f 0141 	bfc	r1, #1, #1
   13d78:	f36f 0182 	bfc	r1, #2, #1
   13d7c:	f36f 01c5 	bfc	r1, #3, #3
   13d80:	2001      	movs	r0, #1
   13d82:	f360 1188 	bfi	r1, r0, #6, #3
   13d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
   13d8a:	f363 2153 	bfi	r1, r3, #9, #11
   13d8e:	f36f 511f 	bfc	r1, #20, #12
   13d92:	2300      	movs	r3, #0
   13d94:	480c      	ldr	r0, [pc, #48]	; (13dc8 <z_fatal_error+0x26c>)
   13d96:	f7f7 fee5 	bl	bb64 <z_impl_z_log_msg_static_create>
   13d9a:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   13d9c:	4621      	mov	r1, r4
   13d9e:	4630      	mov	r0, r6
   13da0:	f7fe faae 	bl	12300 <k_sys_fatal_error_handler>
	__asm__ volatile(
   13da4:	f388 8811 	msr	BASEPRI, r8
   13da8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   13dac:	4628      	mov	r0, r5
   13dae:	f7fa f899 	bl	dee4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   13db2:	370c      	adds	r7, #12
   13db4:	46bd      	mov	sp, r7
   13db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   13dba:	f06f 031b 	mvn.w	r3, #27
   13dbe:	e7cb      	b.n	13d58 <z_fatal_error+0x1fc>
   13dc0:	0001b358 	.word	0x0001b358
   13dc4:	0001b3c8 	.word	0x0001b3c8
   13dc8:	00019a04 	.word	0x00019a04
   13dcc:	0001b384 	.word	0x0001b384
   13dd0:	0001b3ac 	.word	0x0001b3ac

00013dd4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   13dd4:	b570      	push	{r4, r5, r6, lr}
   13dd6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13dd8:	4b12      	ldr	r3, [pc, #72]	; (13e24 <z_sys_init_run_level+0x50>)
   13dda:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13dde:	e009      	b.n	13df4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   13de0:	4243      	negs	r3, r0
   13de2:	e017      	b.n	13e14 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   13de4:	68ea      	ldr	r2, [r5, #12]
   13de6:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   13de8:	68ea      	ldr	r2, [r5, #12]
   13dea:	7853      	ldrb	r3, [r2, #1]
   13dec:	f043 0301 	orr.w	r3, r3, #1
   13df0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13df2:	3408      	adds	r4, #8
   13df4:	1c73      	adds	r3, r6, #1
   13df6:	4a0b      	ldr	r2, [pc, #44]	; (13e24 <z_sys_init_run_level+0x50>)
   13df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dfc:	42a3      	cmp	r3, r4
   13dfe:	d910      	bls.n	13e22 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   13e00:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   13e02:	b15d      	cbz	r5, 13e1c <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   13e04:	6823      	ldr	r3, [r4, #0]
   13e06:	4628      	mov	r0, r5
   13e08:	4798      	blx	r3
			if (rc != 0) {
   13e0a:	4603      	mov	r3, r0
   13e0c:	2800      	cmp	r0, #0
   13e0e:	d0eb      	beq.n	13de8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   13e10:	2800      	cmp	r0, #0
   13e12:	dbe5      	blt.n	13de0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   13e14:	2bff      	cmp	r3, #255	; 0xff
   13e16:	dde5      	ble.n	13de4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   13e18:	23ff      	movs	r3, #255	; 0xff
   13e1a:	e7e3      	b.n	13de4 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   13e1c:	6823      	ldr	r3, [r4, #0]
   13e1e:	4798      	blx	r3
   13e20:	e7e7      	b.n	13df2 <z_sys_init_run_level+0x1e>
		}
	}
}
   13e22:	bd70      	pop	{r4, r5, r6, pc}
   13e24:	0001b3e8 	.word	0x0001b3e8

00013e28 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   13e28:	b510      	push	{r4, lr}
   13e2a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   13e2c:	23b8      	movs	r3, #184	; 0xb8
   13e2e:	4c11      	ldr	r4, [pc, #68]	; (13e74 <init_idle_thread+0x4c>)
   13e30:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   13e34:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   13e38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13e3c:	4b0e      	ldr	r3, [pc, #56]	; (13e78 <init_idle_thread+0x50>)
   13e3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
   13e42:	4a0e      	ldr	r2, [pc, #56]	; (13e7c <init_idle_thread+0x54>)
   13e44:	9205      	str	r2, [sp, #20]
   13e46:	2201      	movs	r2, #1
   13e48:	9204      	str	r2, [sp, #16]
   13e4a:	220f      	movs	r2, #15
   13e4c:	9203      	str	r2, [sp, #12]
   13e4e:	2200      	movs	r2, #0
   13e50:	9202      	str	r2, [sp, #8]
   13e52:	9201      	str	r2, [sp, #4]
   13e54:	9300      	str	r3, [sp, #0]
   13e56:	4b0a      	ldr	r3, [pc, #40]	; (13e80 <init_idle_thread+0x58>)
   13e58:	f44f 72a0 	mov.w	r2, #320	; 0x140
   13e5c:	4909      	ldr	r1, [pc, #36]	; (13e84 <init_idle_thread+0x5c>)
   13e5e:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   13e62:	4620      	mov	r0, r4
   13e64:	f000 f92e 	bl	140c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e68:	7b63      	ldrb	r3, [r4, #13]
   13e6a:	f023 0304 	bic.w	r3, r3, #4
   13e6e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   13e70:	b006      	add	sp, #24
   13e72:	bd10      	pop	{r4, pc}
   13e74:	20001bc0 	.word	0x20001bc0
   13e78:	200025fc 	.word	0x200025fc
   13e7c:	0001b3d8 	.word	0x0001b3d8
   13e80:	00014221 	.word	0x00014221
   13e84:	20004500 	.word	0x20004500

00013e88 <bg_thread_main>:
{
   13e88:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   13e8a:	4b0a      	ldr	r3, [pc, #40]	; (13eb4 <bg_thread_main+0x2c>)
   13e8c:	2201      	movs	r2, #1
   13e8e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   13e90:	2003      	movs	r0, #3
   13e92:	f7ff ff9f 	bl	13dd4 <z_sys_init_run_level>
	boot_banner();
   13e96:	f001 fae3 	bl	15460 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   13e9a:	2004      	movs	r0, #4
   13e9c:	f7ff ff9a 	bl	13dd4 <z_sys_init_run_level>
	z_init_static_threads();
   13ea0:	f000 f974 	bl	1418c <z_init_static_threads>
	(void)main();
   13ea4:	f7f6 f9fa 	bl	a29c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   13ea8:	4a03      	ldr	r2, [pc, #12]	; (13eb8 <bg_thread_main+0x30>)
   13eaa:	7b13      	ldrb	r3, [r2, #12]
   13eac:	f023 0301 	bic.w	r3, r3, #1
   13eb0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   13eb2:	bd08      	pop	{r3, pc}
   13eb4:	2000264a 	.word	0x2000264a
   13eb8:	20001c78 	.word	0x20001c78

00013ebc <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   13ebc:	b508      	push	{r3, lr}
   13ebe:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   13ec0:	4a01      	ldr	r2, [pc, #4]	; (13ec8 <switch_to_main_thread+0xc>)
   13ec2:	4802      	ldr	r0, [pc, #8]	; (13ecc <switch_to_main_thread+0x10>)
   13ec4:	f7f8 fd8c 	bl	c9e0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   13ec8:	00013e89 	.word	0x00013e89
   13ecc:	20001c78 	.word	0x20001c78

00013ed0 <z_bss_zero>:
{
   13ed0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   13ed2:	4803      	ldr	r0, [pc, #12]	; (13ee0 <z_bss_zero+0x10>)
   13ed4:	4a03      	ldr	r2, [pc, #12]	; (13ee4 <z_bss_zero+0x14>)
   13ed6:	1a12      	subs	r2, r2, r0
   13ed8:	2100      	movs	r1, #0
   13eda:	f004 fd08 	bl	188ee <z_early_memset>
}
   13ede:	bd08      	pop	{r3, pc}
   13ee0:	200004d0 	.word	0x200004d0
   13ee4:	2000264c 	.word	0x2000264c

00013ee8 <z_init_cpu>:
{
   13ee8:	b510      	push	{r4, lr}
   13eea:	4604      	mov	r4, r0
	init_idle_thread(id);
   13eec:	f7ff ff9c 	bl	13e28 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   13ef0:	23b8      	movs	r3, #184	; 0xb8
   13ef2:	490b      	ldr	r1, [pc, #44]	; (13f20 <z_init_cpu+0x38>)
   13ef4:	fb03 1104 	mla	r1, r3, r4, r1
   13ef8:	4a0a      	ldr	r2, [pc, #40]	; (13f24 <z_init_cpu+0x3c>)
   13efa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   13efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13f02:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   13f04:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   13f06:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   13f0a:	4b07      	ldr	r3, [pc, #28]	; (13f28 <z_init_cpu+0x40>)
   13f0c:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   13f10:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   13f14:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   13f18:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   13f1c:	6053      	str	r3, [r2, #4]
}
   13f1e:	bd10      	pop	{r4, pc}
   13f20:	20001bc0 	.word	0x20001bc0
   13f24:	200025fc 	.word	0x200025fc
   13f28:	20003cc0 	.word	0x20003cc0

00013f2c <prepare_multithreading>:
{
   13f2c:	b570      	push	{r4, r5, r6, lr}
   13f2e:	b086      	sub	sp, #24
	z_sched_init();
   13f30:	f000 fef4 	bl	14d1c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   13f34:	4d10      	ldr	r5, [pc, #64]	; (13f78 <prepare_multithreading+0x4c>)
   13f36:	4b11      	ldr	r3, [pc, #68]	; (13f7c <prepare_multithreading+0x50>)
   13f38:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13f3a:	4b11      	ldr	r3, [pc, #68]	; (13f80 <prepare_multithreading+0x54>)
   13f3c:	9305      	str	r3, [sp, #20]
   13f3e:	2301      	movs	r3, #1
   13f40:	9304      	str	r3, [sp, #16]
   13f42:	2400      	movs	r4, #0
   13f44:	9403      	str	r4, [sp, #12]
   13f46:	9402      	str	r4, [sp, #8]
   13f48:	9401      	str	r4, [sp, #4]
   13f4a:	9400      	str	r4, [sp, #0]
   13f4c:	4b0d      	ldr	r3, [pc, #52]	; (13f84 <prepare_multithreading+0x58>)
   13f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13f52:	490d      	ldr	r1, [pc, #52]	; (13f88 <prepare_multithreading+0x5c>)
   13f54:	4628      	mov	r0, r5
   13f56:	f000 f8b5 	bl	140c4 <z_setup_new_thread>
   13f5a:	4606      	mov	r6, r0
   13f5c:	7b6b      	ldrb	r3, [r5, #13]
   13f5e:	f023 0304 	bic.w	r3, r3, #4
   13f62:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   13f64:	4628      	mov	r0, r5
   13f66:	f005 f81f 	bl	18fa8 <z_ready_thread>
	z_init_cpu(0);
   13f6a:	4620      	mov	r0, r4
   13f6c:	f7ff ffbc 	bl	13ee8 <z_init_cpu>
}
   13f70:	4630      	mov	r0, r6
   13f72:	b006      	add	sp, #24
   13f74:	bd70      	pop	{r4, r5, r6, pc}
   13f76:	bf00      	nop
   13f78:	20001c78 	.word	0x20001c78
   13f7c:	200025fc 	.word	0x200025fc
   13f80:	0001b3e0 	.word	0x0001b3e0
   13f84:	00013e89 	.word	0x00013e89
   13f88:	20004680 	.word	0x20004680

00013f8c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   13f8c:	b500      	push	{lr}
   13f8e:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   13f90:	2000      	movs	r0, #0
   13f92:	f7ff ff1f 	bl	13dd4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   13f96:	4b1f      	ldr	r3, [pc, #124]	; (14014 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13f98:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   13f9c:	4c1e      	ldr	r4, [pc, #120]	; (14018 <z_cstart+0x8c>)
   13f9e:	6963      	ldr	r3, [r4, #20]
   13fa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13fa4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13fa6:	23e0      	movs	r3, #224	; 0xe0
   13fa8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   13fac:	2320      	movs	r3, #32
   13fae:	77e3      	strb	r3, [r4, #31]
   13fb0:	2500      	movs	r5, #0
   13fb2:	7625      	strb	r5, [r4, #24]
   13fb4:	7665      	strb	r5, [r4, #25]
   13fb6:	76a5      	strb	r5, [r4, #26]
   13fb8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13fbe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   13fc2:	6263      	str	r3, [r4, #36]	; 0x24
   13fc4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   13fc8:	f7f9 fef2 	bl	ddb0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   13fcc:	f7f8 faa2 	bl	c514 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   13fd0:	f04f 33ff 	mov.w	r3, #4294967295
   13fd4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   13fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   13fd8:	f7fa f8ce 	bl	e178 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   13fdc:	f7f9 ff9c 	bl	df18 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   13fe0:	f7f7 fc30 	bl	b844 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   13fe4:	2401      	movs	r4, #1
   13fe6:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   13fea:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   13fee:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   13ff0:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   13ff2:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   13ff4:	4b09      	ldr	r3, [pc, #36]	; (1401c <z_cstart+0x90>)
   13ff6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   13ffa:	f7ff fd73 	bl	13ae4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   13ffe:	4620      	mov	r0, r4
   14000:	f7ff fee8 	bl	13dd4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   14004:	2002      	movs	r0, #2
   14006:	f7ff fee5 	bl	13dd4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1400a:	f7ff ff8f 	bl	13f2c <prepare_multithreading>
   1400e:	f7ff ff55 	bl	13ebc <switch_to_main_thread>
   14012:	bf00      	nop
   14014:	20004500 	.word	0x20004500
   14018:	e000ed00 	.word	0xe000ed00
   1401c:	200025fc 	.word	0x200025fc

00014020 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   14020:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   14022:	4c06      	ldr	r4, [pc, #24]	; (1403c <statics_init+0x1c>)
   14024:	e005      	b.n	14032 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   14026:	68a2      	ldr	r2, [r4, #8]
   14028:	6861      	ldr	r1, [r4, #4]
   1402a:	4620      	mov	r0, r4
   1402c:	f004 fc67 	bl	188fe <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   14030:	3414      	adds	r4, #20
   14032:	4b03      	ldr	r3, [pc, #12]	; (14040 <statics_init+0x20>)
   14034:	429c      	cmp	r4, r3
   14036:	d3f6      	bcc.n	14026 <statics_init+0x6>
		}
	}
	return 0;
}
   14038:	2000      	movs	r0, #0
   1403a:	bd10      	pop	{r4, pc}
   1403c:	2000040c 	.word	0x2000040c
   14040:	2000040c 	.word	0x2000040c

00014044 <z_thread_monitor_exit>:
	__asm__ volatile(
   14044:	f04f 0340 	mov.w	r3, #64	; 0x40
   14048:	f3ef 8111 	mrs	r1, BASEPRI
   1404c:	f383 8812 	msr	BASEPRI_MAX, r3
   14050:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   14054:	4b0a      	ldr	r3, [pc, #40]	; (14080 <z_thread_monitor_exit+0x3c>)
   14056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14058:	4283      	cmp	r3, r0
   1405a:	d104      	bne.n	14066 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1405c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1405e:	4b08      	ldr	r3, [pc, #32]	; (14080 <z_thread_monitor_exit+0x3c>)
   14060:	625a      	str	r2, [r3, #36]	; 0x24
   14062:	e007      	b.n	14074 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   14064:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   14066:	b113      	cbz	r3, 1406e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   14068:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1406a:	4282      	cmp	r2, r0
   1406c:	d1fa      	bne.n	14064 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1406e:	b10b      	cbz	r3, 14074 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   14070:	6f42      	ldr	r2, [r0, #116]	; 0x74
   14072:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   14074:	f381 8811 	msr	BASEPRI, r1
   14078:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1407c:	4770      	bx	lr
   1407e:	bf00      	nop
   14080:	200025fc 	.word	0x200025fc

00014084 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   14084:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   14086:	4604      	mov	r4, r0
   14088:	b140      	cbz	r0, 1409c <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   1408a:	221f      	movs	r2, #31
   1408c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   14090:	f002 fe45 	bl	16d1e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   14094:	2000      	movs	r0, #0
   14096:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1409a:	bd10      	pop	{r4, pc}
		thread = _current;
   1409c:	4b01      	ldr	r3, [pc, #4]	; (140a4 <z_impl_k_thread_name_set+0x20>)
   1409e:	689c      	ldr	r4, [r3, #8]
   140a0:	e7f3      	b.n	1408a <z_impl_k_thread_name_set+0x6>
   140a2:	bf00      	nop
   140a4:	200025fc 	.word	0x200025fc

000140a8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   140a8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   140aa:	ea53 0102 	orrs.w	r1, r3, r2
   140ae:	d102      	bne.n	140b6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   140b0:	f004 fcbb 	bl	18a2a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   140b4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   140b6:	4902      	ldr	r1, [pc, #8]	; (140c0 <schedule_new_thread+0x18>)
   140b8:	3018      	adds	r0, #24
   140ba:	f000 ff81 	bl	14fc0 <z_add_timeout>
   140be:	e7f9      	b.n	140b4 <schedule_new_thread+0xc>
   140c0:	00019035 	.word	0x00019035

000140c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   140c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140c8:	b085      	sub	sp, #20
   140ca:	4604      	mov	r4, r0
   140cc:	460f      	mov	r7, r1
   140ce:	4615      	mov	r5, r2
   140d0:	461e      	mov	r6, r3
   140d2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   140d6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   140da:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   140de:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   140e2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   140e6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   140e8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   140ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   140ec:	2204      	movs	r2, #4
   140ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   140f0:	f004 fc9f 	bl	18a32 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   140f4:	462a      	mov	r2, r5
   140f6:	4639      	mov	r1, r7
   140f8:	4620      	mov	r0, r4
   140fa:	f004 fc7b 	bl	189f4 <setup_thread_stack>
   140fe:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14100:	f8cd 8008 	str.w	r8, [sp, #8]
   14104:	f8cd 9004 	str.w	r9, [sp, #4]
   14108:	f8cd a000 	str.w	sl, [sp]
   1410c:	4633      	mov	r3, r6
   1410e:	4602      	mov	r2, r0
   14110:	4639      	mov	r1, r7
   14112:	4620      	mov	r0, r4
   14114:	f7f8 fc1e 	bl	c954 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   14118:	2300      	movs	r3, #0
   1411a:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1411c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1411e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   14122:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   14126:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1412a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1412e:	f3ef 8211 	mrs	r2, BASEPRI
   14132:	f383 8812 	msr	BASEPRI_MAX, r3
   14136:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1413a:	4b13      	ldr	r3, [pc, #76]	; (14188 <z_setup_new_thread+0xc4>)
   1413c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1413e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   14140:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
   14142:	f382 8811 	msr	BASEPRI, r2
   14146:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1414a:	f1bb 0f00 	cmp.w	fp, #0
   1414e:	d013      	beq.n	14178 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   14150:	221f      	movs	r2, #31
   14152:	4659      	mov	r1, fp
   14154:	f104 0078 	add.w	r0, r4, #120	; 0x78
   14158:	f002 fde1 	bl	16d1e <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1415c:	2300      	movs	r3, #0
   1415e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   14162:	4b09      	ldr	r3, [pc, #36]	; (14188 <z_setup_new_thread+0xc4>)
   14164:	689b      	ldr	r3, [r3, #8]
   14166:	b15b      	cbz	r3, 14180 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1416c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   14170:	4628      	mov	r0, r5
   14172:	b005      	add	sp, #20
   14174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   14178:	2300      	movs	r3, #0
   1417a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1417e:	e7f0      	b.n	14162 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   14180:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   14184:	e7f4      	b.n	14170 <z_setup_new_thread+0xac>
   14186:	bf00      	nop
   14188:	200025fc 	.word	0x200025fc

0001418c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1418c:	b530      	push	{r4, r5, lr}
   1418e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   14190:	4c21      	ldr	r4, [pc, #132]	; (14218 <z_init_static_threads+0x8c>)
   14192:	e014      	b.n	141be <z_init_static_threads+0x32>
		z_setup_new_thread(
   14194:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14196:	9305      	str	r3, [sp, #20]
   14198:	6a23      	ldr	r3, [r4, #32]
   1419a:	9304      	str	r3, [sp, #16]
   1419c:	69e3      	ldr	r3, [r4, #28]
   1419e:	9303      	str	r3, [sp, #12]
   141a0:	69a3      	ldr	r3, [r4, #24]
   141a2:	9302      	str	r3, [sp, #8]
   141a4:	6963      	ldr	r3, [r4, #20]
   141a6:	9301      	str	r3, [sp, #4]
   141a8:	6923      	ldr	r3, [r4, #16]
   141aa:	9300      	str	r3, [sp, #0]
   141ac:	68e3      	ldr	r3, [r4, #12]
   141ae:	68a2      	ldr	r2, [r4, #8]
   141b0:	6861      	ldr	r1, [r4, #4]
   141b2:	6820      	ldr	r0, [r4, #0]
   141b4:	f7ff ff86 	bl	140c4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   141b8:	6823      	ldr	r3, [r4, #0]
   141ba:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   141bc:	342c      	adds	r4, #44	; 0x2c
   141be:	4b17      	ldr	r3, [pc, #92]	; (1421c <z_init_static_threads+0x90>)
   141c0:	429c      	cmp	r4, r3
   141c2:	d3e7      	bcc.n	14194 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   141c4:	f000 fb6c 	bl	148a0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   141c8:	4c13      	ldr	r4, [pc, #76]	; (14218 <z_init_static_threads+0x8c>)
   141ca:	e000      	b.n	141ce <z_init_static_threads+0x42>
   141cc:	342c      	adds	r4, #44	; 0x2c
   141ce:	4b13      	ldr	r3, [pc, #76]	; (1421c <z_init_static_threads+0x90>)
   141d0:	429c      	cmp	r4, r3
   141d2:	d21c      	bcs.n	1420e <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   141d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   141d6:	f1b0 3fff 	cmp.w	r0, #4294967295
   141da:	d0f7      	beq.n	141cc <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   141dc:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   141de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   141e2:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
   141e4:	03c9      	lsls	r1, r1, #15
   141e6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   141ea:	03c0      	lsls	r0, r0, #15
   141ec:	f240 33e7 	movw	r3, #999	; 0x3e7
   141f0:	18c0      	adds	r0, r0, r3
   141f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   141f6:	f04f 0300 	mov.w	r3, #0
   141fa:	f141 0100 	adc.w	r1, r1, #0
   141fe:	f7eb ff6d 	bl	dc <__aeabi_uldivmod>
   14202:	4602      	mov	r2, r0
   14204:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   14206:	4628      	mov	r0, r5
   14208:	f7ff ff4e 	bl	140a8 <schedule_new_thread>
   1420c:	e7de      	b.n	141cc <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1420e:	f000 fd33 	bl	14c78 <k_sched_unlock>
}
   14212:	b007      	add	sp, #28
   14214:	bd30      	pop	{r4, r5, pc}
   14216:	bf00      	nop
   14218:	00019928 	.word	0x00019928
   1421c:	00019954 	.word	0x00019954

00014220 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   14220:	b508      	push	{r3, lr}
   14222:	e001      	b.n	14228 <idle+0x8>
	arch_cpu_idle();
   14224:	f7f8 f97c 	bl	c520 <arch_cpu_idle>
	__asm__ volatile(
   14228:	f04f 0240 	mov.w	r2, #64	; 0x40
   1422c:	f3ef 8311 	mrs	r3, BASEPRI
   14230:	f382 8812 	msr	BASEPRI_MAX, r2
   14234:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   14238:	f005 f822 	bl	19280 <z_get_next_timeout_expiry>
   1423c:	4b05      	ldr	r3, [pc, #20]	; (14254 <idle+0x34>)
   1423e:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
   14240:	4b05      	ldr	r3, [pc, #20]	; (14258 <idle+0x38>)
   14242:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14244:	2b00      	cmp	r3, #0
   14246:	d0ed      	beq.n	14224 <idle+0x4>
   14248:	f7f8 f88e 	bl	c368 <pm_system_suspend>
   1424c:	2800      	cmp	r0, #0
   1424e:	d1eb      	bne.n	14228 <idle+0x8>
   14250:	e7e8      	b.n	14224 <idle+0x4>
   14252:	bf00      	nop
   14254:	200025fc 	.word	0x200025fc
   14258:	2000264a 	.word	0x2000264a

0001425c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14260:	b082      	sub	sp, #8
   14262:	4604      	mov	r4, r0
   14264:	461e      	mov	r6, r3
   14266:	f04f 0340 	mov.w	r3, #64	; 0x40
   1426a:	f3ef 8511 	mrs	r5, BASEPRI
   1426e:	f383 8812 	msr	BASEPRI_MAX, r3
   14272:	f3bf 8f6f 	isb	sy
   14276:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14278:	68c1      	ldr	r1, [r0, #12]
   1427a:	b999      	cbnz	r1, 142a4 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1427c:	2900      	cmp	r1, #0
   1427e:	d151      	bne.n	14324 <z_impl_k_mutex_lock+0xc8>
   14280:	4a36      	ldr	r2, [pc, #216]	; (1435c <z_impl_k_mutex_lock+0x100>)
   14282:	6892      	ldr	r2, [r2, #8]
   14284:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   14288:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1428a:	3101      	adds	r1, #1
   1428c:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1428e:	4a33      	ldr	r2, [pc, #204]	; (1435c <z_impl_k_mutex_lock+0x100>)
   14290:	6892      	ldr	r2, [r2, #8]
   14292:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   14294:	f383 8811 	msr	BASEPRI, r3
   14298:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1429c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1429e:	b002      	add	sp, #8
   142a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142a4:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   142a6:	6880      	ldr	r0, [r0, #8]
   142a8:	4a2c      	ldr	r2, [pc, #176]	; (1435c <z_impl_k_mutex_lock+0x100>)
   142aa:	6892      	ldr	r2, [r2, #8]
   142ac:	4290      	cmp	r0, r2
   142ae:	d0e5      	beq.n	1427c <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   142b0:	ea56 0107 	orrs.w	r1, r6, r7
   142b4:	d038      	beq.n	14328 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   142b6:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   142ba:	4641      	mov	r1, r8
   142bc:	f992 000e 	ldrsb.w	r0, [r2, #14]
   142c0:	f004 fbea 	bl	18a98 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   142c4:	4580      	cmp	r8, r0
   142c6:	dc36      	bgt.n	14336 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   142c8:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   142cc:	9700      	str	r7, [sp, #0]
   142ce:	9601      	str	r6, [sp, #4]
   142d0:	4622      	mov	r2, r4
   142d2:	4629      	mov	r1, r5
   142d4:	4822      	ldr	r0, [pc, #136]	; (14360 <z_impl_k_mutex_lock+0x104>)
   142d6:	f000 fc1b 	bl	14b10 <z_pend_curr>
	if (got_mutex == 0) {
   142da:	2800      	cmp	r0, #0
   142dc:	d0df      	beq.n	1429e <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   142de:	f04f 0340 	mov.w	r3, #64	; 0x40
   142e2:	f3ef 8511 	mrs	r5, BASEPRI
   142e6:	f383 8812 	msr	BASEPRI_MAX, r3
   142ea:	f3bf 8f6f 	isb	sy
   142ee:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   142f0:	68a3      	ldr	r3, [r4, #8]
   142f2:	b343      	cbz	r3, 14346 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   142f4:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   142f6:	429c      	cmp	r4, r3
   142f8:	d023      	beq.n	14342 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   142fa:	b313      	cbz	r3, 14342 <z_impl_k_mutex_lock+0xe6>
   142fc:	6921      	ldr	r1, [r4, #16]
   142fe:	f993 000e 	ldrsb.w	r0, [r3, #14]
   14302:	f004 fbc9 	bl	18a98 <new_prio_for_inheritance>
   14306:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   14308:	4620      	mov	r0, r4
   1430a:	f004 fbd0 	bl	18aae <adjust_owner_prio>
   1430e:	b9e8      	cbnz	r0, 1434c <z_impl_k_mutex_lock+0xf0>
   14310:	f1b8 0f00 	cmp.w	r8, #0
   14314:	d11a      	bne.n	1434c <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   14316:	f386 8811 	msr	BASEPRI, r6
   1431a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1431e:	f06f 000a 	mvn.w	r0, #10
   14322:	e7bc      	b.n	1429e <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   14324:	6922      	ldr	r2, [r4, #16]
   14326:	e7af      	b.n	14288 <z_impl_k_mutex_lock+0x2c>
   14328:	f385 8811 	msr	BASEPRI, r5
   1432c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   14330:	f06f 000f 	mvn.w	r0, #15
   14334:	e7b3      	b.n	1429e <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   14336:	4601      	mov	r1, r0
   14338:	4620      	mov	r0, r4
   1433a:	f004 fbb8 	bl	18aae <adjust_owner_prio>
   1433e:	4680      	mov	r8, r0
   14340:	e7c4      	b.n	142cc <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14342:	6921      	ldr	r1, [r4, #16]
   14344:	e7e0      	b.n	14308 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   14346:	f1b8 0f00 	cmp.w	r8, #0
   1434a:	d0e4      	beq.n	14316 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   1434c:	4629      	mov	r1, r5
   1434e:	4804      	ldr	r0, [pc, #16]	; (14360 <z_impl_k_mutex_lock+0x104>)
   14350:	f000 fa90 	bl	14874 <z_reschedule>
	return -EAGAIN;
   14354:	f06f 000a 	mvn.w	r0, #10
   14358:	e7a1      	b.n	1429e <z_impl_k_mutex_lock+0x42>
   1435a:	bf00      	nop
   1435c:	200025fc 	.word	0x200025fc
   14360:	20002624 	.word	0x20002624

00014364 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   14364:	6883      	ldr	r3, [r0, #8]
   14366:	b38b      	cbz	r3, 143cc <z_impl_k_mutex_unlock+0x68>
{
   14368:	b570      	push	{r4, r5, r6, lr}
   1436a:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1436c:	4a1a      	ldr	r2, [pc, #104]	; (143d8 <z_impl_k_mutex_unlock+0x74>)
   1436e:	6892      	ldr	r2, [r2, #8]
   14370:	4293      	cmp	r3, r2
   14372:	d12e      	bne.n	143d2 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   14374:	68c3      	ldr	r3, [r0, #12]
   14376:	2b01      	cmp	r3, #1
   14378:	d903      	bls.n	14382 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1437a:	3b01      	subs	r3, #1
   1437c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1437e:	2000      	movs	r0, #0
}
   14380:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   14382:	f04f 0340 	mov.w	r3, #64	; 0x40
   14386:	f3ef 8511 	mrs	r5, BASEPRI
   1438a:	f383 8812 	msr	BASEPRI_MAX, r3
   1438e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   14392:	6901      	ldr	r1, [r0, #16]
   14394:	f004 fb8b 	bl	18aae <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   14398:	4620      	mov	r0, r4
   1439a:	f004 febb 	bl	19114 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1439e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   143a0:	b168      	cbz	r0, 143be <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   143a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   143a6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   143a8:	2400      	movs	r4, #0
   143aa:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   143ae:	f004 fdfb 	bl	18fa8 <z_ready_thread>
		z_reschedule(&lock, key);
   143b2:	4629      	mov	r1, r5
   143b4:	4809      	ldr	r0, [pc, #36]	; (143dc <z_impl_k_mutex_unlock+0x78>)
   143b6:	f000 fa5d 	bl	14874 <z_reschedule>
	return 0;
   143ba:	4620      	mov	r0, r4
   143bc:	e7e0      	b.n	14380 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   143be:	2000      	movs	r0, #0
   143c0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   143c2:	f385 8811 	msr	BASEPRI, r5
   143c6:	f3bf 8f6f 	isb	sy
   143ca:	e7d9      	b.n	14380 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   143cc:	f06f 0015 	mvn.w	r0, #21
}
   143d0:	4770      	bx	lr
		return -EPERM;
   143d2:	f04f 30ff 	mov.w	r0, #4294967295
   143d6:	e7d3      	b.n	14380 <z_impl_k_mutex_unlock+0x1c>
   143d8:	200025fc 	.word	0x200025fc
   143dc:	20002624 	.word	0x20002624

000143e0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   143e0:	b510      	push	{r4, lr}
   143e2:	b082      	sub	sp, #8
   143e4:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   143e6:	4686      	mov	lr, r0
	__asm__ volatile(
   143e8:	f04f 0040 	mov.w	r0, #64	; 0x40
   143ec:	f3ef 8111 	mrs	r1, BASEPRI
   143f0:	f380 8812 	msr	BASEPRI_MAX, r0
   143f4:	f3bf 8f6f 	isb	sy
   143f8:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   143fa:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   143fe:	b1a0      	cbz	r0, 1442a <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14400:	6803      	ldr	r3, [r0, #0]
   14402:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   14406:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1440a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1440e:	4290      	cmp	r0, r2
   14410:	d008      	beq.n	14424 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14412:	2101      	movs	r1, #1
   14414:	f004 fbda 	bl	18bcc <z_queue_node_peek>
	__asm__ volatile(
   14418:	f384 8811 	msr	BASEPRI, r4
   1441c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   14420:	b002      	add	sp, #8
   14422:	bd10      	pop	{r4, pc}
	list->tail = node;
   14424:	f8cc 3004 	str.w	r3, [ip, #4]
}
   14428:	e7f3      	b.n	14412 <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1442a:	ea53 0002 	orrs.w	r0, r3, r2
   1442e:	d00a      	beq.n	14446 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   14430:	9200      	str	r2, [sp, #0]
   14432:	9301      	str	r3, [sp, #4]
   14434:	4672      	mov	r2, lr
   14436:	4670      	mov	r0, lr
   14438:	f000 fb6a 	bl	14b10 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1443c:	b948      	cbnz	r0, 14452 <z_impl_k_queue_get+0x72>
   1443e:	4b06      	ldr	r3, [pc, #24]	; (14458 <z_impl_k_queue_get+0x78>)
   14440:	689b      	ldr	r3, [r3, #8]
   14442:	6958      	ldr	r0, [r3, #20]
   14444:	e7ec      	b.n	14420 <z_impl_k_queue_get+0x40>
   14446:	f381 8811 	msr	BASEPRI, r1
   1444a:	f3bf 8f6f 	isb	sy
		return NULL;
   1444e:	2000      	movs	r0, #0
   14450:	e7e6      	b.n	14420 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   14452:	2000      	movs	r0, #0
   14454:	e7e4      	b.n	14420 <z_impl_k_queue_get+0x40>
   14456:	bf00      	nop
   14458:	200025fc 	.word	0x200025fc

0001445c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1445c:	b538      	push	{r3, r4, r5, lr}
   1445e:	4604      	mov	r4, r0
	__asm__ volatile(
   14460:	f04f 0340 	mov.w	r3, #64	; 0x40
   14464:	f3ef 8511 	mrs	r5, BASEPRI
   14468:	f383 8812 	msr	BASEPRI_MAX, r3
   1446c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   14470:	f004 fe50 	bl	19114 <z_unpend_first_thread>

	if (thread != NULL) {
   14474:	b148      	cbz	r0, 1448a <z_impl_k_sem_give+0x2e>
   14476:	2200      	movs	r2, #0
   14478:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1447c:	f004 fd94 	bl	18fa8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   14480:	4629      	mov	r1, r5
   14482:	4809      	ldr	r0, [pc, #36]	; (144a8 <z_impl_k_sem_give+0x4c>)
   14484:	f000 f9f6 	bl	14874 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   14488:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1448a:	68a3      	ldr	r3, [r4, #8]
   1448c:	68e2      	ldr	r2, [r4, #12]
   1448e:	4293      	cmp	r3, r2
   14490:	d008      	beq.n	144a4 <z_impl_k_sem_give+0x48>
   14492:	2201      	movs	r2, #1
   14494:	4413      	add	r3, r2
   14496:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14498:	2102      	movs	r1, #2
   1449a:	f104 0010 	add.w	r0, r4, #16
   1449e:	f005 f8f0 	bl	19682 <z_handle_obj_poll_events>
}
   144a2:	e7ed      	b.n	14480 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   144a4:	2200      	movs	r2, #0
   144a6:	e7f5      	b.n	14494 <z_impl_k_sem_give+0x38>
   144a8:	20002624 	.word	0x20002624

000144ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   144ac:	b510      	push	{r4, lr}
   144ae:	b082      	sub	sp, #8
   144b0:	f04f 0440 	mov.w	r4, #64	; 0x40
   144b4:	f3ef 8111 	mrs	r1, BASEPRI
   144b8:	f384 8812 	msr	BASEPRI_MAX, r4
   144bc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   144c0:	6884      	ldr	r4, [r0, #8]
   144c2:	b144      	cbz	r4, 144d6 <z_impl_k_sem_take+0x2a>
		sem->count--;
   144c4:	3c01      	subs	r4, #1
   144c6:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   144c8:	f381 8811 	msr	BASEPRI, r1
   144cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   144d0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   144d2:	b002      	add	sp, #8
   144d4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   144d6:	ea53 0402 	orrs.w	r4, r3, r2
   144da:	d006      	beq.n	144ea <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   144dc:	9200      	str	r2, [sp, #0]
   144de:	9301      	str	r3, [sp, #4]
   144e0:	4602      	mov	r2, r0
   144e2:	4805      	ldr	r0, [pc, #20]	; (144f8 <z_impl_k_sem_take+0x4c>)
   144e4:	f000 fb14 	bl	14b10 <z_pend_curr>
	return ret;
   144e8:	e7f3      	b.n	144d2 <z_impl_k_sem_take+0x26>
   144ea:	f381 8811 	msr	BASEPRI, r1
   144ee:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   144f2:	f06f 000f 	mvn.w	r0, #15
   144f6:	e7ec      	b.n	144d2 <z_impl_k_sem_take+0x26>
   144f8:	20002624 	.word	0x20002624

000144fc <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   144fc:	b370      	cbz	r0, 1455c <queue_submit_locked+0x60>
{
   144fe:	b538      	push	{r3, r4, r5, lr}
   14500:	460d      	mov	r5, r1
   14502:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   14504:	4b1b      	ldr	r3, [pc, #108]	; (14574 <queue_submit_locked+0x78>)
   14506:	689b      	ldr	r3, [r3, #8]
   14508:	4283      	cmp	r3, r0
   1450a:	d01b      	beq.n	14544 <queue_submit_locked+0x48>
   1450c:	2300      	movs	r3, #0
   1450e:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   14510:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   14514:	f3c3 0180 	ubfx	r1, r3, #2, #1
   14518:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1451c:	f013 0f01 	tst.w	r3, #1
   14520:	d01f      	beq.n	14562 <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   14522:	b101      	cbz	r1, 14526 <queue_submit_locked+0x2a>
   14524:	b302      	cbz	r2, 14568 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   14526:	b100      	cbz	r0, 1452a <queue_submit_locked+0x2e>
   14528:	b309      	cbz	r1, 1456e <queue_submit_locked+0x72>
	parent->next = child;
   1452a:	2300      	movs	r3, #0
   1452c:	602b      	str	r3, [r5, #0]
	return list->tail;
   1452e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   14532:	b173      	cbz	r3, 14552 <queue_submit_locked+0x56>
	parent->next = child;
   14534:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14536:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   1453a:	4620      	mov	r0, r4
   1453c:	f004 fbd0 	bl	18ce0 <notify_queue_locked>
		ret = 1;
   14540:	2001      	movs	r0, #1
	}

	return ret;
}
   14542:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   14544:	f004 fa69 	bl	18a1a <k_is_in_isr>
   14548:	b908      	cbnz	r0, 1454e <queue_submit_locked+0x52>
   1454a:	2301      	movs	r3, #1
   1454c:	e7df      	b.n	1450e <queue_submit_locked+0x12>
   1454e:	2300      	movs	r3, #0
   14550:	e7dd      	b.n	1450e <queue_submit_locked+0x12>
   14552:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   14556:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   1455a:	e7ee      	b.n	1453a <queue_submit_locked+0x3e>
		return -EINVAL;
   1455c:	f06f 0015 	mvn.w	r0, #21
}
   14560:	4770      	bx	lr
		ret = -ENODEV;
   14562:	f06f 0012 	mvn.w	r0, #18
   14566:	e7ec      	b.n	14542 <queue_submit_locked+0x46>
		ret = -EBUSY;
   14568:	f06f 000f 	mvn.w	r0, #15
   1456c:	e7e9      	b.n	14542 <queue_submit_locked+0x46>
		ret = -EBUSY;
   1456e:	f06f 000f 	mvn.w	r0, #15
   14572:	e7e6      	b.n	14542 <queue_submit_locked+0x46>
   14574:	200025fc 	.word	0x200025fc

00014578 <finalize_cancel_locked>:
{
   14578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1457a:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   1457c:	68c3      	ldr	r3, [r0, #12]
   1457e:	f023 0302 	bic.w	r3, r3, #2
   14582:	60c3      	str	r3, [r0, #12]
	return list->head;
   14584:	4b13      	ldr	r3, [pc, #76]	; (145d4 <finalize_cancel_locked+0x5c>)
   14586:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   14588:	b185      	cbz	r5, 145ac <finalize_cancel_locked+0x34>
	return node->next;
   1458a:	682c      	ldr	r4, [r5, #0]
   1458c:	b104      	cbz	r4, 14590 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1458e:	b10d      	cbz	r5, 14594 <finalize_cancel_locked+0x1c>
   14590:	2700      	movs	r7, #0
   14592:	e010      	b.n	145b6 <finalize_cancel_locked+0x3e>
   14594:	462c      	mov	r4, r5
   14596:	e7fb      	b.n	14590 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   14598:	462a      	mov	r2, r5
   1459a:	4639      	mov	r1, r7
   1459c:	480d      	ldr	r0, [pc, #52]	; (145d4 <finalize_cancel_locked+0x5c>)
   1459e:	f004 fb5a 	bl	18c56 <sys_slist_remove>
			k_sem_give(&wc->sem);
   145a2:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   145a6:	f7ff ff59 	bl	1445c <z_impl_k_sem_give>
}
   145aa:	e009      	b.n	145c0 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   145ac:	462c      	mov	r4, r5
   145ae:	e7ef      	b.n	14590 <finalize_cancel_locked+0x18>
   145b0:	4623      	mov	r3, r4
   145b2:	4625      	mov	r5, r4
   145b4:	461c      	mov	r4, r3
   145b6:	b165      	cbz	r5, 145d2 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   145b8:	686b      	ldr	r3, [r5, #4]
   145ba:	42b3      	cmp	r3, r6
   145bc:	d0ec      	beq.n	14598 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   145be:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   145c0:	2c00      	cmp	r4, #0
   145c2:	d0f5      	beq.n	145b0 <finalize_cancel_locked+0x38>
	return node->next;
   145c4:	6823      	ldr	r3, [r4, #0]
   145c6:	2b00      	cmp	r3, #0
   145c8:	d0f3      	beq.n	145b2 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   145ca:	2c00      	cmp	r4, #0
   145cc:	d1f1      	bne.n	145b2 <finalize_cancel_locked+0x3a>
   145ce:	4623      	mov	r3, r4
   145d0:	e7ef      	b.n	145b2 <finalize_cancel_locked+0x3a>
}
   145d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145d4:	20002624 	.word	0x20002624

000145d8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   145d8:	b570      	push	{r4, r5, r6, lr}
   145da:	b084      	sub	sp, #16
   145dc:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   145de:	e016      	b.n	1460e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   145e0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   145e4:	f023 0204 	bic.w	r2, r3, #4
   145e8:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   145ec:	f013 0f04 	tst.w	r3, #4
   145f0:	d15a      	bne.n	146a8 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   145f2:	2300      	movs	r3, #0
   145f4:	9302      	str	r3, [sp, #8]
   145f6:	f04f 32ff 	mov.w	r2, #4294967295
   145fa:	f04f 33ff 	mov.w	r3, #4294967295
   145fe:	e9cd 2300 	strd	r2, r3, [sp]
   14602:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   14606:	4631      	mov	r1, r6
   14608:	482e      	ldr	r0, [pc, #184]	; (146c4 <work_queue_main+0xec>)
   1460a:	f000 fc89 	bl	14f20 <z_sched_wait>
	__asm__ volatile(
   1460e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14612:	f3ef 8611 	mrs	r6, BASEPRI
   14616:	f383 8812 	msr	BASEPRI_MAX, r3
   1461a:	f3bf 8f6f 	isb	sy
   1461e:	4632      	mov	r2, r6
	return list->head;
   14620:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14624:	2c00      	cmp	r4, #0
   14626:	d0db      	beq.n	145e0 <work_queue_main+0x8>
	return node->next;
   14628:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1462a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1462e:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14632:	428c      	cmp	r4, r1
   14634:	d035      	beq.n	146a2 <work_queue_main+0xca>
	*flagp |= BIT(bit);
   14636:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1463a:	f043 0302 	orr.w	r3, r3, #2
   1463e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   14642:	68e3      	ldr	r3, [r4, #12]
   14644:	f043 0101 	orr.w	r1, r3, #1
   14648:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   1464a:	f023 0304 	bic.w	r3, r3, #4
   1464e:	f043 0301 	orr.w	r3, r3, #1
   14652:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   14654:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   14656:	f382 8811 	msr	BASEPRI, r2
   1465a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1465e:	4620      	mov	r0, r4
   14660:	4798      	blx	r3
	__asm__ volatile(
   14662:	f04f 0340 	mov.w	r3, #64	; 0x40
   14666:	f3ef 8611 	mrs	r6, BASEPRI
   1466a:	f383 8812 	msr	BASEPRI_MAX, r3
   1466e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   14672:	68e3      	ldr	r3, [r4, #12]
   14674:	f023 0301 	bic.w	r3, r3, #1
   14678:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1467a:	f013 0f02 	tst.w	r3, #2
   1467e:	d11d      	bne.n	146bc <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   14680:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   14684:	f023 0302 	bic.w	r3, r3, #2
   14688:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1468c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   14690:	f386 8811 	msr	BASEPRI, r6
   14694:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   14698:	2b00      	cmp	r3, #0
   1469a:	d1b8      	bne.n	1460e <work_queue_main+0x36>
	z_impl_k_yield();
   1469c:	f000 fb46 	bl	14d2c <z_impl_k_yield>
}
   146a0:	e7b5      	b.n	1460e <work_queue_main+0x36>
	list->tail = node;
   146a2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   146a6:	e7c6      	b.n	14636 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   146a8:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   146ac:	2200      	movs	r2, #0
   146ae:	2101      	movs	r1, #1
   146b0:	4620      	mov	r0, r4
   146b2:	f004 fd65 	bl	19180 <z_sched_wake>
   146b6:	2800      	cmp	r0, #0
   146b8:	d1f8      	bne.n	146ac <work_queue_main+0xd4>
   146ba:	e79a      	b.n	145f2 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   146bc:	4620      	mov	r0, r4
   146be:	f7ff ff5b 	bl	14578 <finalize_cancel_locked>
   146c2:	e7dd      	b.n	14680 <work_queue_main+0xa8>
   146c4:	2000262c 	.word	0x2000262c

000146c8 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   146c8:	b508      	push	{r3, lr}
   146ca:	4684      	mov	ip, r0
   146cc:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   146ce:	ea53 0102 	orrs.w	r1, r3, r2
   146d2:	d00c      	beq.n	146ee <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   146d4:	68c1      	ldr	r1, [r0, #12]
   146d6:	f041 0108 	orr.w	r1, r1, #8
   146da:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   146dc:	f8dc 1000 	ldr.w	r1, [ip]
   146e0:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   146e2:	4905      	ldr	r1, [pc, #20]	; (146f8 <schedule_for_queue_locked+0x30>)
   146e4:	3010      	adds	r0, #16
   146e6:	f000 fc6b 	bl	14fc0 <z_add_timeout>

	return ret;
   146ea:	2001      	movs	r0, #1
}
   146ec:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   146ee:	4661      	mov	r1, ip
   146f0:	f004 fb00 	bl	18cf4 <submit_to_queue_locked>
   146f4:	e7fa      	b.n	146ec <schedule_for_queue_locked+0x24>
   146f6:	bf00      	nop
   146f8:	00018d55 	.word	0x00018d55

000146fc <k_work_submit>:
{
   146fc:	b508      	push	{r3, lr}
   146fe:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   14700:	4801      	ldr	r0, [pc, #4]	; (14708 <k_work_submit+0xc>)
   14702:	f004 fb8b 	bl	18e1c <k_work_submit_to_queue>
}
   14706:	bd08      	pop	{r3, pc}
   14708:	20001d50 	.word	0x20001d50

0001470c <k_work_queue_start>:
{
   1470c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1470e:	b089      	sub	sp, #36	; 0x24
   14710:	4604      	mov	r4, r0
   14712:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   14714:	2000      	movs	r0, #0
   14716:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1471a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1471e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   14722:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   14726:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1472a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1472e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   14732:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   14736:	b1fd      	cbz	r5, 14778 <k_work_queue_start+0x6c>
   14738:	7928      	ldrb	r0, [r5, #4]
   1473a:	b9f8      	cbnz	r0, 1477c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1473c:	2001      	movs	r0, #1
	*flagp = flags;
   1473e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14742:	f04f 36ff 	mov.w	r6, #4294967295
   14746:	f04f 37ff 	mov.w	r7, #4294967295
   1474a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1474e:	2000      	movs	r0, #0
   14750:	9004      	str	r0, [sp, #16]
   14752:	9303      	str	r3, [sp, #12]
   14754:	9002      	str	r0, [sp, #8]
   14756:	9001      	str	r0, [sp, #4]
   14758:	9400      	str	r4, [sp, #0]
   1475a:	4b0a      	ldr	r3, [pc, #40]	; (14784 <k_work_queue_start+0x78>)
   1475c:	4620      	mov	r0, r4
   1475e:	f004 f973 	bl	18a48 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   14762:	b125      	cbz	r5, 1476e <k_work_queue_start+0x62>
   14764:	6829      	ldr	r1, [r5, #0]
   14766:	b111      	cbz	r1, 1476e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   14768:	4620      	mov	r0, r4
   1476a:	f7ff fc8b 	bl	14084 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1476e:	4620      	mov	r0, r4
   14770:	f004 f95b 	bl	18a2a <z_impl_k_thread_start>
}
   14774:	b009      	add	sp, #36	; 0x24
   14776:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   14778:	2001      	movs	r0, #1
   1477a:	e7e0      	b.n	1473e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1477c:	f240 1001 	movw	r0, #257	; 0x101
   14780:	e7dd      	b.n	1473e <k_work_queue_start+0x32>
   14782:	bf00      	nop
   14784:	000145d9 	.word	0x000145d9

00014788 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   14788:	b508      	push	{r3, lr}
   1478a:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1478c:	4801      	ldr	r0, [pc, #4]	; (14794 <k_work_reschedule+0xc>)
   1478e:	f004 fb61 	bl	18e54 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   14792:	bd08      	pop	{r3, pc}
   14794:	20001d50 	.word	0x20001d50

00014798 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   14798:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   1479a:	2b7f      	cmp	r3, #127	; 0x7f
   1479c:	d811      	bhi.n	147c2 <sliceable+0x2a>
	int ret = slice_ticks;
   1479e:	4b0e      	ldr	r3, [pc, #56]	; (147d8 <sliceable+0x40>)
   147a0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   147a2:	b17b      	cbz	r3, 147c4 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   147a4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   147a8:	4b0c      	ldr	r3, [pc, #48]	; (147dc <sliceable+0x44>)
   147aa:	681b      	ldr	r3, [r3, #0]
   147ac:	429a      	cmp	r2, r3
   147ae:	db0c      	blt.n	147ca <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   147b0:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   147b2:	f013 0f1f 	tst.w	r3, #31
   147b6:	d10a      	bne.n	147ce <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   147b8:	4b09      	ldr	r3, [pc, #36]	; (147e0 <sliceable+0x48>)
   147ba:	4298      	cmp	r0, r3
   147bc:	d009      	beq.n	147d2 <sliceable+0x3a>
   147be:	2301      	movs	r3, #1
   147c0:	e000      	b.n	147c4 <sliceable+0x2c>
   147c2:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   147c4:	f003 0001 	and.w	r0, r3, #1
   147c8:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   147ca:	2300      	movs	r3, #0
   147cc:	e7fa      	b.n	147c4 <sliceable+0x2c>
   147ce:	2300      	movs	r3, #0
   147d0:	e7f8      	b.n	147c4 <sliceable+0x2c>
   147d2:	2300      	movs	r3, #0
   147d4:	e7f6      	b.n	147c4 <sliceable+0x2c>
   147d6:	bf00      	nop
   147d8:	20002638 	.word	0x20002638
   147dc:	20002634 	.word	0x20002634
   147e0:	20001bc0 	.word	0x20001bc0

000147e4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   147e4:	4b04      	ldr	r3, [pc, #16]	; (147f8 <slice_timeout+0x14>)
   147e6:	1ac0      	subs	r0, r0, r3
   147e8:	10c0      	asrs	r0, r0, #3
   147ea:	4b04      	ldr	r3, [pc, #16]	; (147fc <slice_timeout+0x18>)
   147ec:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   147f0:	4b03      	ldr	r3, [pc, #12]	; (14800 <slice_timeout+0x1c>)
   147f2:	2201      	movs	r2, #1
   147f4:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   147f6:	4770      	bx	lr
   147f8:	20001d30 	.word	0x20001d30
   147fc:	aaaaaaab 	.word	0xaaaaaaab
   14800:	20002630 	.word	0x20002630

00014804 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14804:	f1b3 3fff 	cmp.w	r3, #4294967295
   14808:	bf08      	it	eq
   1480a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1480e:	d100      	bne.n	14812 <add_thread_timeout+0xe>
   14810:	4770      	bx	lr
{
   14812:	b508      	push	{r3, lr}
   14814:	4902      	ldr	r1, [pc, #8]	; (14820 <add_thread_timeout+0x1c>)
   14816:	3018      	adds	r0, #24
   14818:	f000 fbd2 	bl	14fc0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   1481c:	bd08      	pop	{r3, pc}
   1481e:	bf00      	nop
   14820:	00019035 	.word	0x00019035

00014824 <z_reset_time_slice>:
{
   14824:	b570      	push	{r4, r5, r6, lr}
   14826:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   14828:	4b0d      	ldr	r3, [pc, #52]	; (14860 <z_reset_time_slice+0x3c>)
   1482a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   1482c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   14830:	4c0c      	ldr	r4, [pc, #48]	; (14864 <z_reset_time_slice+0x40>)
   14832:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   14836:	4620      	mov	r0, r4
   14838:	f004 fd04 	bl	19244 <z_abort_timeout>
	slice_expired[cpu] = false;
   1483c:	4b0a      	ldr	r3, [pc, #40]	; (14868 <z_reset_time_slice+0x44>)
   1483e:	2200      	movs	r2, #0
   14840:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   14842:	4628      	mov	r0, r5
   14844:	f7ff ffa8 	bl	14798 <sliceable>
   14848:	b900      	cbnz	r0, 1484c <z_reset_time_slice+0x28>
}
   1484a:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   1484c:	4b07      	ldr	r3, [pc, #28]	; (1486c <z_reset_time_slice+0x48>)
   1484e:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   14850:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   14852:	17d3      	asrs	r3, r2, #31
   14854:	4906      	ldr	r1, [pc, #24]	; (14870 <z_reset_time_slice+0x4c>)
   14856:	4620      	mov	r0, r4
   14858:	f000 fbb2 	bl	14fc0 <z_add_timeout>
}
   1485c:	e7f5      	b.n	1484a <z_reset_time_slice+0x26>
   1485e:	bf00      	nop
   14860:	200025fc 	.word	0x200025fc
   14864:	20001d30 	.word	0x20001d30
   14868:	20002630 	.word	0x20002630
   1486c:	20002638 	.word	0x20002638
   14870:	000147e5 	.word	0x000147e5

00014874 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   14874:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   14876:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14878:	b959      	cbnz	r1, 14892 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1487a:	f3ef 8205 	mrs	r2, IPSR
   1487e:	b942      	cbnz	r2, 14892 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   14880:	4a06      	ldr	r2, [pc, #24]	; (1489c <z_reschedule+0x28>)
   14882:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
   14884:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   14886:	4290      	cmp	r0, r2
   14888:	d003      	beq.n	14892 <z_reschedule+0x1e>
	ret = arch_swap(key);
   1488a:	4608      	mov	r0, r1
   1488c:	f7f8 f80a 	bl	c8a4 <arch_swap>
		z_swap(lock, key);
   14890:	e003      	b.n	1489a <z_reschedule+0x26>
   14892:	f383 8811 	msr	BASEPRI, r3
   14896:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   1489a:	bd08      	pop	{r3, pc}
   1489c:	200025fc 	.word	0x200025fc

000148a0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   148a0:	2300      	movs	r3, #0
	__asm__ volatile(
   148a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   148a6:	f3ef 8111 	mrs	r1, BASEPRI
   148aa:	f382 8812 	msr	BASEPRI_MAX, r2
   148ae:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   148b2:	e009      	b.n	148c8 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   148b4:	4b06      	ldr	r3, [pc, #24]	; (148d0 <k_sched_lock+0x30>)
   148b6:	689a      	ldr	r2, [r3, #8]
   148b8:	7bd3      	ldrb	r3, [r2, #15]
   148ba:	3b01      	subs	r3, #1
   148bc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   148be:	f381 8811 	msr	BASEPRI, r1
   148c2:	f3bf 8f6f 	isb	sy
   148c6:	2301      	movs	r3, #1
   148c8:	2b00      	cmp	r3, #0
   148ca:	d0f3      	beq.n	148b4 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   148cc:	4770      	bx	lr
   148ce:	bf00      	nop
   148d0:	200025fc 	.word	0x200025fc

000148d4 <update_cache>:
{
   148d4:	b538      	push	{r3, r4, r5, lr}
   148d6:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   148d8:	4810      	ldr	r0, [pc, #64]	; (1491c <update_cache+0x48>)
   148da:	f004 fb5e 	bl	18f9a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   148de:	4605      	mov	r5, r0
   148e0:	b170      	cbz	r0, 14900 <update_cache+0x2c>
	if (preempt_ok != 0) {
   148e2:	b984      	cbnz	r4, 14906 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   148e4:	4b0e      	ldr	r3, [pc, #56]	; (14920 <update_cache+0x4c>)
   148e6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   148e8:	7b5a      	ldrb	r2, [r3, #13]
   148ea:	f012 0f1f 	tst.w	r2, #31
   148ee:	d10a      	bne.n	14906 <update_cache+0x32>
	return node->next != NULL;
   148f0:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   148f2:	b942      	cbnz	r2, 14906 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   148f4:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   148f6:	2a7f      	cmp	r2, #127	; 0x7f
   148f8:	d905      	bls.n	14906 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   148fa:	4a09      	ldr	r2, [pc, #36]	; (14920 <update_cache+0x4c>)
   148fc:	6193      	str	r3, [r2, #24]
   148fe:	e00b      	b.n	14918 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14900:	4b07      	ldr	r3, [pc, #28]	; (14920 <update_cache+0x4c>)
   14902:	68dd      	ldr	r5, [r3, #12]
   14904:	e7ed      	b.n	148e2 <update_cache+0xe>
		if (thread != _current) {
   14906:	4b06      	ldr	r3, [pc, #24]	; (14920 <update_cache+0x4c>)
   14908:	689b      	ldr	r3, [r3, #8]
   1490a:	42ab      	cmp	r3, r5
   1490c:	d002      	beq.n	14914 <update_cache+0x40>
			z_reset_time_slice(thread);
   1490e:	4628      	mov	r0, r5
   14910:	f7ff ff88 	bl	14824 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   14914:	4b02      	ldr	r3, [pc, #8]	; (14920 <update_cache+0x4c>)
   14916:	619d      	str	r5, [r3, #24]
}
   14918:	bd38      	pop	{r3, r4, r5, pc}
   1491a:	bf00      	nop
   1491c:	20002618 	.word	0x20002618
   14920:	200025fc 	.word	0x200025fc

00014924 <move_thread_to_end_of_prio_q>:
{
   14924:	b538      	push	{r3, r4, r5, lr}
   14926:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   14928:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1492a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1492e:	2b00      	cmp	r3, #0
   14930:	db0a      	blt.n	14948 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   14932:	7b6b      	ldrb	r3, [r5, #13]
   14934:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14938:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1493a:	4b1b      	ldr	r3, [pc, #108]	; (149a8 <move_thread_to_end_of_prio_q+0x84>)
   1493c:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14940:	429c      	cmp	r4, r3
   14942:	d110      	bne.n	14966 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14944:	2400      	movs	r4, #0
   14946:	e00e      	b.n	14966 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14948:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1494c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1494e:	4601      	mov	r1, r0
   14950:	4816      	ldr	r0, [pc, #88]	; (149ac <move_thread_to_end_of_prio_q+0x88>)
   14952:	f004 faee 	bl	18f32 <z_priq_dumb_remove>
}
   14956:	e7ec      	b.n	14932 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   14958:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1495a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1495c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1495e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14960:	6065      	str	r5, [r4, #4]
}
   14962:	e017      	b.n	14994 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14964:	2400      	movs	r4, #0
   14966:	b16c      	cbz	r4, 14984 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14968:	4621      	mov	r1, r4
   1496a:	4628      	mov	r0, r5
   1496c:	f004 faa3 	bl	18eb6 <z_sched_prio_cmp>
   14970:	2800      	cmp	r0, #0
   14972:	dcf1      	bgt.n	14958 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14974:	2c00      	cmp	r4, #0
   14976:	d0f6      	beq.n	14966 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   14978:	4b0b      	ldr	r3, [pc, #44]	; (149a8 <move_thread_to_end_of_prio_q+0x84>)
   1497a:	6a1b      	ldr	r3, [r3, #32]
   1497c:	429c      	cmp	r4, r3
   1497e:	d0f1      	beq.n	14964 <move_thread_to_end_of_prio_q+0x40>
   14980:	6824      	ldr	r4, [r4, #0]
   14982:	e7f0      	b.n	14966 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   14984:	4b08      	ldr	r3, [pc, #32]	; (149a8 <move_thread_to_end_of_prio_q+0x84>)
   14986:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   14988:	f103 011c 	add.w	r1, r3, #28
   1498c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1498e:	606a      	str	r2, [r5, #4]
	tail->next = node;
   14990:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14992:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
   14994:	4b04      	ldr	r3, [pc, #16]	; (149a8 <move_thread_to_end_of_prio_q+0x84>)
   14996:	6898      	ldr	r0, [r3, #8]
   14998:	42a8      	cmp	r0, r5
   1499a:	bf14      	ite	ne
   1499c:	2000      	movne	r0, #0
   1499e:	2001      	moveq	r0, #1
   149a0:	f7ff ff98 	bl	148d4 <update_cache>
}
   149a4:	bd38      	pop	{r3, r4, r5, pc}
   149a6:	bf00      	nop
   149a8:	200025fc 	.word	0x200025fc
   149ac:	20002618 	.word	0x20002618

000149b0 <z_time_slice>:
{
   149b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   149b2:	f04f 0240 	mov.w	r2, #64	; 0x40
   149b6:	f3ef 8311 	mrs	r3, BASEPRI
   149ba:	f382 8812 	msr	BASEPRI_MAX, r2
   149be:	f3bf 8f6f 	isb	sy
   149c2:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   149c4:	4b14      	ldr	r3, [pc, #80]	; (14a18 <z_time_slice+0x68>)
   149c6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   149c8:	4b14      	ldr	r3, [pc, #80]	; (14a1c <z_time_slice+0x6c>)
   149ca:	681b      	ldr	r3, [r3, #0]
   149cc:	42a3      	cmp	r3, r4
   149ce:	d017      	beq.n	14a00 <z_time_slice+0x50>
	pending_current = NULL;
   149d0:	4b12      	ldr	r3, [pc, #72]	; (14a1c <z_time_slice+0x6c>)
   149d2:	2200      	movs	r2, #0
   149d4:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   149d6:	4b10      	ldr	r3, [pc, #64]	; (14a18 <z_time_slice+0x68>)
   149d8:	7c1b      	ldrb	r3, [r3, #16]
   149da:	4a11      	ldr	r2, [pc, #68]	; (14a20 <z_time_slice+0x70>)
   149dc:	5cd3      	ldrb	r3, [r2, r3]
   149de:	b153      	cbz	r3, 149f6 <z_time_slice+0x46>
   149e0:	4620      	mov	r0, r4
   149e2:	f7ff fed9 	bl	14798 <sliceable>
   149e6:	b130      	cbz	r0, 149f6 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   149e8:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   149ea:	f013 0f1f 	tst.w	r3, #31
   149ee:	d00f      	beq.n	14a10 <z_time_slice+0x60>
		z_reset_time_slice(curr);
   149f0:	4620      	mov	r0, r4
   149f2:	f7ff ff17 	bl	14824 <z_reset_time_slice>
	__asm__ volatile(
   149f6:	f385 8811 	msr	BASEPRI, r5
   149fa:	f3bf 8f6f 	isb	sy
}
   149fe:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   14a00:	4620      	mov	r0, r4
   14a02:	f7ff ff0f 	bl	14824 <z_reset_time_slice>
   14a06:	f385 8811 	msr	BASEPRI, r5
   14a0a:	f3bf 8f6f 	isb	sy
		return;
   14a0e:	e7f6      	b.n	149fe <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   14a10:	4620      	mov	r0, r4
   14a12:	f7ff ff87 	bl	14924 <move_thread_to_end_of_prio_q>
   14a16:	e7eb      	b.n	149f0 <z_time_slice+0x40>
   14a18:	200025fc 	.word	0x200025fc
   14a1c:	2000262c 	.word	0x2000262c
   14a20:	20002630 	.word	0x20002630

00014a24 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   14a24:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   14a26:	f990 300d 	ldrsb.w	r3, [r0, #13]
   14a2a:	2b00      	cmp	r3, #0
   14a2c:	db33      	blt.n	14a96 <ready_thread+0x72>
{
   14a2e:	b570      	push	{r4, r5, r6, lr}
   14a30:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14a32:	f012 0f1f 	tst.w	r2, #31
   14a36:	d101      	bne.n	14a3c <ready_thread+0x18>
	return node->next != NULL;
   14a38:	6986      	ldr	r6, [r0, #24]
   14a3a:	b106      	cbz	r6, 14a3e <ready_thread+0x1a>
}
   14a3c:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   14a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14a42:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   14a44:	4b14      	ldr	r3, [pc, #80]	; (14a98 <ready_thread+0x74>)
   14a46:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a4a:	429d      	cmp	r5, r3
   14a4c:	d108      	bne.n	14a60 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14a4e:	4635      	mov	r5, r6
   14a50:	e006      	b.n	14a60 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   14a52:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   14a54:	6063      	str	r3, [r4, #4]
	node->next = successor;
   14a56:	6025      	str	r5, [r4, #0]
	prev->next = node;
   14a58:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   14a5a:	606c      	str	r4, [r5, #4]
}
   14a5c:	e017      	b.n	14a8e <ready_thread+0x6a>
   14a5e:	4635      	mov	r5, r6
   14a60:	b16d      	cbz	r5, 14a7e <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14a62:	4629      	mov	r1, r5
   14a64:	4620      	mov	r0, r4
   14a66:	f004 fa26 	bl	18eb6 <z_sched_prio_cmp>
   14a6a:	2800      	cmp	r0, #0
   14a6c:	dcf1      	bgt.n	14a52 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14a6e:	2d00      	cmp	r5, #0
   14a70:	d0f6      	beq.n	14a60 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   14a72:	4b09      	ldr	r3, [pc, #36]	; (14a98 <ready_thread+0x74>)
   14a74:	6a1b      	ldr	r3, [r3, #32]
   14a76:	429d      	cmp	r5, r3
   14a78:	d0f1      	beq.n	14a5e <ready_thread+0x3a>
   14a7a:	682d      	ldr	r5, [r5, #0]
   14a7c:	e7f0      	b.n	14a60 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   14a7e:	4b06      	ldr	r3, [pc, #24]	; (14a98 <ready_thread+0x74>)
   14a80:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   14a82:	f103 011c 	add.w	r1, r3, #28
   14a86:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   14a88:	6062      	str	r2, [r4, #4]
	tail->next = node;
   14a8a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   14a8c:	621c      	str	r4, [r3, #32]
		update_cache(0);
   14a8e:	2000      	movs	r0, #0
   14a90:	f7ff ff20 	bl	148d4 <update_cache>
}
   14a94:	e7d2      	b.n	14a3c <ready_thread+0x18>
   14a96:	4770      	bx	lr
   14a98:	200025fc 	.word	0x200025fc

00014a9c <z_sched_start>:
{
   14a9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   14a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14aa2:	f3ef 8411 	mrs	r4, BASEPRI
   14aa6:	f383 8812 	msr	BASEPRI_MAX, r3
   14aaa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   14aae:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   14ab0:	f013 0f04 	tst.w	r3, #4
   14ab4:	d104      	bne.n	14ac0 <z_sched_start+0x24>
	__asm__ volatile(
   14ab6:	f384 8811 	msr	BASEPRI, r4
   14aba:	f3bf 8f6f 	isb	sy
}
   14abe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14ac0:	f023 0304 	bic.w	r3, r3, #4
   14ac4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   14ac6:	f7ff ffad 	bl	14a24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   14aca:	4621      	mov	r1, r4
   14acc:	4801      	ldr	r0, [pc, #4]	; (14ad4 <z_sched_start+0x38>)
   14ace:	f7ff fed1 	bl	14874 <z_reschedule>
   14ad2:	e7f4      	b.n	14abe <z_sched_start+0x22>
   14ad4:	2000263c 	.word	0x2000263c

00014ad8 <unready_thread>:
{
   14ad8:	b510      	push	{r4, lr}
   14ada:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   14adc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   14ade:	f990 300d 	ldrsb.w	r3, [r0, #13]
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	db08      	blt.n	14af8 <unready_thread+0x20>
	update_cache(thread == _current);
   14ae6:	4b08      	ldr	r3, [pc, #32]	; (14b08 <unready_thread+0x30>)
   14ae8:	6898      	ldr	r0, [r3, #8]
   14aea:	42a0      	cmp	r0, r4
   14aec:	bf14      	ite	ne
   14aee:	2000      	movne	r0, #0
   14af0:	2001      	moveq	r0, #1
   14af2:	f7ff feef 	bl	148d4 <update_cache>
}
   14af6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   14afc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14afe:	4601      	mov	r1, r0
   14b00:	4802      	ldr	r0, [pc, #8]	; (14b0c <unready_thread+0x34>)
   14b02:	f004 fa16 	bl	18f32 <z_priq_dumb_remove>
}
   14b06:	e7ee      	b.n	14ae6 <unready_thread+0xe>
   14b08:	200025fc 	.word	0x200025fc
   14b0c:	20002618 	.word	0x20002618

00014b10 <z_pend_curr>:
{
   14b10:	b510      	push	{r4, lr}
   14b12:	460c      	mov	r4, r1
   14b14:	4611      	mov	r1, r2
	pending_current = _current;
   14b16:	480a      	ldr	r0, [pc, #40]	; (14b40 <z_pend_curr+0x30>)
   14b18:	6882      	ldr	r2, [r0, #8]
   14b1a:	4b0a      	ldr	r3, [pc, #40]	; (14b44 <z_pend_curr+0x34>)
   14b1c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   14b1e:	f04f 0240 	mov.w	r2, #64	; 0x40
   14b22:	f3ef 8311 	mrs	r3, BASEPRI
   14b26:	f382 8812 	msr	BASEPRI_MAX, r2
   14b2a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   14b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14b32:	6880      	ldr	r0, [r0, #8]
   14b34:	f004 fac4 	bl	190c0 <pend_locked>
   14b38:	4620      	mov	r0, r4
   14b3a:	f7f7 feb3 	bl	c8a4 <arch_swap>
}
   14b3e:	bd10      	pop	{r4, pc}
   14b40:	200025fc 	.word	0x200025fc
   14b44:	2000262c 	.word	0x2000262c

00014b48 <z_set_prio>:
{
   14b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b4c:	4605      	mov	r5, r0
   14b4e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   14b50:	2300      	movs	r3, #0
   14b52:	f04f 0240 	mov.w	r2, #64	; 0x40
   14b56:	f3ef 8611 	mrs	r6, BASEPRI
   14b5a:	f382 8812 	msr	BASEPRI_MAX, r2
   14b5e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   14b62:	4618      	mov	r0, r3
   14b64:	e029      	b.n	14bba <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   14b66:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   14b68:	606b      	str	r3, [r5, #4]
	node->next = successor;
   14b6a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   14b6c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14b6e:	6065      	str	r5, [r4, #4]
}
   14b70:	e017      	b.n	14ba2 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14b72:	4644      	mov	r4, r8
   14b74:	b16c      	cbz	r4, 14b92 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14b76:	4621      	mov	r1, r4
   14b78:	4628      	mov	r0, r5
   14b7a:	f004 f99c 	bl	18eb6 <z_sched_prio_cmp>
   14b7e:	2800      	cmp	r0, #0
   14b80:	dcf1      	bgt.n	14b66 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14b82:	2c00      	cmp	r4, #0
   14b84:	d0f6      	beq.n	14b74 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   14b86:	4b1d      	ldr	r3, [pc, #116]	; (14bfc <z_set_prio+0xb4>)
   14b88:	6a1b      	ldr	r3, [r3, #32]
   14b8a:	429c      	cmp	r4, r3
   14b8c:	d0f1      	beq.n	14b72 <z_set_prio+0x2a>
   14b8e:	6824      	ldr	r4, [r4, #0]
   14b90:	e7f0      	b.n	14b74 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   14b92:	4b1a      	ldr	r3, [pc, #104]	; (14bfc <z_set_prio+0xb4>)
   14b94:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   14b96:	f103 011c 	add.w	r1, r3, #28
   14b9a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   14b9c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   14b9e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14ba0:	621d      	str	r5, [r3, #32]
			update_cache(1);
   14ba2:	2001      	movs	r0, #1
   14ba4:	f7ff fe96 	bl	148d4 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14ba8:	2001      	movs	r0, #1
   14baa:	e001      	b.n	14bb0 <z_set_prio+0x68>
			thread->base.prio = prio;
   14bac:	73af      	strb	r7, [r5, #14]
   14bae:	2000      	movs	r0, #0
	__asm__ volatile(
   14bb0:	f386 8811 	msr	BASEPRI, r6
   14bb4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14bb8:	2301      	movs	r3, #1
   14bba:	b9e3      	cbnz	r3, 14bf6 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   14bbc:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14bbe:	f013 0f1f 	tst.w	r3, #31
   14bc2:	d1f3      	bne.n	14bac <z_set_prio+0x64>
	return node->next != NULL;
   14bc4:	f8d5 8018 	ldr.w	r8, [r5, #24]
   14bc8:	f1b8 0f00 	cmp.w	r8, #0
   14bcc:	d1ee      	bne.n	14bac <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14bd2:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14bd4:	f8df 9028 	ldr.w	r9, [pc, #40]	; 14c00 <z_set_prio+0xb8>
   14bd8:	4629      	mov	r1, r5
   14bda:	4648      	mov	r0, r9
   14bdc:	f004 f9a9 	bl	18f32 <z_priq_dumb_remove>
				thread->base.prio = prio;
   14be0:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   14be2:	7b6b      	ldrb	r3, [r5, #13]
   14be4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14be8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   14bea:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14bee:	454c      	cmp	r4, r9
   14bf0:	d1c0      	bne.n	14b74 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14bf2:	4644      	mov	r4, r8
   14bf4:	e7be      	b.n	14b74 <z_set_prio+0x2c>
}
   14bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14bfa:	bf00      	nop
   14bfc:	200025fc 	.word	0x200025fc
   14c00:	20002618 	.word	0x20002618

00014c04 <z_impl_k_thread_suspend>:
{
   14c04:	b538      	push	{r3, r4, r5, lr}
   14c06:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   14c08:	3018      	adds	r0, #24
   14c0a:	f004 fb1b 	bl	19244 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   14c0e:	2300      	movs	r3, #0
	__asm__ volatile(
   14c10:	f04f 0240 	mov.w	r2, #64	; 0x40
   14c14:	f3ef 8511 	mrs	r5, BASEPRI
   14c18:	f382 8812 	msr	BASEPRI_MAX, r2
   14c1c:	f3bf 8f6f 	isb	sy
   14c20:	e010      	b.n	14c44 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14c22:	7b63      	ldrb	r3, [r4, #13]
   14c24:	f043 0310 	orr.w	r3, r3, #16
   14c28:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   14c2a:	4b11      	ldr	r3, [pc, #68]	; (14c70 <z_impl_k_thread_suspend+0x6c>)
   14c2c:	6898      	ldr	r0, [r3, #8]
   14c2e:	42a0      	cmp	r0, r4
   14c30:	bf14      	ite	ne
   14c32:	2000      	movne	r0, #0
   14c34:	2001      	moveq	r0, #1
   14c36:	f7ff fe4d 	bl	148d4 <update_cache>
	__asm__ volatile(
   14c3a:	f385 8811 	msr	BASEPRI, r5
   14c3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14c42:	2301      	movs	r3, #1
   14c44:	b963      	cbnz	r3, 14c60 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   14c46:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   14c48:	f994 300d 	ldrsb.w	r3, [r4, #13]
   14c4c:	2b00      	cmp	r3, #0
   14c4e:	dae8      	bge.n	14c22 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   14c54:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14c56:	4621      	mov	r1, r4
   14c58:	4806      	ldr	r0, [pc, #24]	; (14c74 <z_impl_k_thread_suspend+0x70>)
   14c5a:	f004 f96a 	bl	18f32 <z_priq_dumb_remove>
}
   14c5e:	e7e0      	b.n	14c22 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   14c60:	4b03      	ldr	r3, [pc, #12]	; (14c70 <z_impl_k_thread_suspend+0x6c>)
   14c62:	689b      	ldr	r3, [r3, #8]
   14c64:	42a3      	cmp	r3, r4
   14c66:	d000      	beq.n	14c6a <z_impl_k_thread_suspend+0x66>
}
   14c68:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   14c6a:	f004 f956 	bl	18f1a <z_reschedule_unlocked>
}
   14c6e:	e7fb      	b.n	14c68 <z_impl_k_thread_suspend+0x64>
   14c70:	200025fc 	.word	0x200025fc
   14c74:	20002618 	.word	0x20002618

00014c78 <k_sched_unlock>:

void k_sched_unlock(void)
{
   14c78:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   14c7a:	2300      	movs	r3, #0
	__asm__ volatile(
   14c7c:	f04f 0240 	mov.w	r2, #64	; 0x40
   14c80:	f3ef 8411 	mrs	r4, BASEPRI
   14c84:	f382 8812 	msr	BASEPRI_MAX, r2
   14c88:	f3bf 8f6f 	isb	sy
   14c8c:	e00c      	b.n	14ca8 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   14c8e:	4b09      	ldr	r3, [pc, #36]	; (14cb4 <k_sched_unlock+0x3c>)
   14c90:	689a      	ldr	r2, [r3, #8]
   14c92:	7bd3      	ldrb	r3, [r2, #15]
   14c94:	3301      	adds	r3, #1
   14c96:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   14c98:	2000      	movs	r0, #0
   14c9a:	f7ff fe1b 	bl	148d4 <update_cache>
	__asm__ volatile(
   14c9e:	f384 8811 	msr	BASEPRI, r4
   14ca2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14ca6:	2301      	movs	r3, #1
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d0f0      	beq.n	14c8e <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   14cac:	f004 f935 	bl	18f1a <z_reschedule_unlocked>
}
   14cb0:	bd10      	pop	{r4, pc}
   14cb2:	bf00      	nop
   14cb4:	200025fc 	.word	0x200025fc

00014cb8 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   14cb8:	7b43      	ldrb	r3, [r0, #13]
   14cba:	f013 0f08 	tst.w	r3, #8
   14cbe:	d12a      	bne.n	14d16 <end_thread+0x5e>
{
   14cc0:	b510      	push	{r4, lr}
   14cc2:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   14cc4:	f043 0208 	orr.w	r2, r3, #8
   14cc8:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   14cca:	f023 0220 	bic.w	r2, r3, #32
   14cce:	f042 0208 	orr.w	r2, r2, #8
   14cd2:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   14cd4:	f012 0f80 	tst.w	r2, #128	; 0x80
   14cd8:	d113      	bne.n	14d02 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   14cda:	68a3      	ldr	r3, [r4, #8]
   14cdc:	b113      	cbz	r3, 14ce4 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   14cde:	4620      	mov	r0, r4
   14ce0:	f004 f92f 	bl	18f42 <unpend_thread_no_timeout>
   14ce4:	f104 0018 	add.w	r0, r4, #24
   14ce8:	f004 faac 	bl	19244 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   14cec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14cf0:	f004 f9a6 	bl	19040 <unpend_all>
		update_cache(1);
   14cf4:	2001      	movs	r0, #1
   14cf6:	f7ff fded 	bl	148d4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   14cfa:	4620      	mov	r0, r4
   14cfc:	f7ff f9a2 	bl	14044 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   14d00:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14d02:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   14d06:	f043 0308 	orr.w	r3, r3, #8
   14d0a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14d0c:	4601      	mov	r1, r0
   14d0e:	4802      	ldr	r0, [pc, #8]	; (14d18 <end_thread+0x60>)
   14d10:	f004 f90f 	bl	18f32 <z_priq_dumb_remove>
}
   14d14:	e7e1      	b.n	14cda <end_thread+0x22>
   14d16:	4770      	bx	lr
   14d18:	20002618 	.word	0x20002618

00014d1c <z_sched_init>:
{
   14d1c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   14d1e:	4802      	ldr	r0, [pc, #8]	; (14d28 <z_sched_init+0xc>)
   14d20:	f004 fa2a 	bl	19178 <init_ready_q>
}
   14d24:	bd08      	pop	{r3, pc}
   14d26:	bf00      	nop
   14d28:	20002614 	.word	0x20002614

00014d2c <z_impl_k_yield>:
{
   14d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   14d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14d32:	f3ef 8611 	mrs	r6, BASEPRI
   14d36:	f383 8812 	msr	BASEPRI_MAX, r3
   14d3a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   14d3e:	4c1d      	ldr	r4, [pc, #116]	; (14db4 <z_impl_k_yield+0x88>)
   14d40:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14d42:	7b4b      	ldrb	r3, [r1, #13]
   14d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14d48:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14d4a:	f104 071c 	add.w	r7, r4, #28
   14d4e:	4638      	mov	r0, r7
   14d50:	f004 f8ef 	bl	18f32 <z_priq_dumb_remove>
	queue_thread(_current);
   14d54:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   14d56:	7b6b      	ldrb	r3, [r5, #13]
   14d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14d5c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   14d5e:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d60:	42bc      	cmp	r4, r7
   14d62:	d108      	bne.n	14d76 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14d64:	2400      	movs	r4, #0
   14d66:	e006      	b.n	14d76 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   14d68:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   14d6a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   14d6c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   14d6e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14d70:	6065      	str	r5, [r4, #4]
}
   14d72:	e017      	b.n	14da4 <z_impl_k_yield+0x78>
   14d74:	2400      	movs	r4, #0
   14d76:	b16c      	cbz	r4, 14d94 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14d78:	4621      	mov	r1, r4
   14d7a:	4628      	mov	r0, r5
   14d7c:	f004 f89b 	bl	18eb6 <z_sched_prio_cmp>
   14d80:	2800      	cmp	r0, #0
   14d82:	dcf1      	bgt.n	14d68 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14d84:	2c00      	cmp	r4, #0
   14d86:	d0f6      	beq.n	14d76 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   14d88:	4b0a      	ldr	r3, [pc, #40]	; (14db4 <z_impl_k_yield+0x88>)
   14d8a:	6a1b      	ldr	r3, [r3, #32]
   14d8c:	429c      	cmp	r4, r3
   14d8e:	d0f1      	beq.n	14d74 <z_impl_k_yield+0x48>
   14d90:	6824      	ldr	r4, [r4, #0]
   14d92:	e7f0      	b.n	14d76 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   14d94:	4b07      	ldr	r3, [pc, #28]	; (14db4 <z_impl_k_yield+0x88>)
   14d96:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   14d98:	f103 011c 	add.w	r1, r3, #28
   14d9c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   14d9e:	606a      	str	r2, [r5, #4]
	tail->next = node;
   14da0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14da2:	621d      	str	r5, [r3, #32]
	update_cache(1);
   14da4:	2001      	movs	r0, #1
   14da6:	f7ff fd95 	bl	148d4 <update_cache>
   14daa:	4630      	mov	r0, r6
   14dac:	f7f7 fd7a 	bl	c8a4 <arch_swap>
}
   14db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14db2:	bf00      	nop
   14db4:	200025fc 	.word	0x200025fc

00014db8 <z_tick_sleep>:
{
   14db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   14dbc:	ea50 0301 	orrs.w	r3, r0, r1
   14dc0:	d038      	beq.n	14e34 <z_tick_sleep+0x7c>
   14dc2:	4604      	mov	r4, r0
   14dc4:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   14dc6:	f06f 0301 	mvn.w	r3, #1
   14dca:	1a1b      	subs	r3, r3, r0
   14dcc:	f04f 32ff 	mov.w	r2, #4294967295
   14dd0:	eb62 0201 	sbc.w	r2, r2, r1
   14dd4:	2b01      	cmp	r3, #1
   14dd6:	f172 0200 	sbcs.w	r2, r2, #0
   14dda:	db2f      	blt.n	14e3c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   14ddc:	f06f 0501 	mvn.w	r5, #1
   14de0:	1a2d      	subs	r5, r5, r0
   14de2:	f04f 0340 	mov.w	r3, #64	; 0x40
   14de6:	f3ef 8811 	mrs	r8, BASEPRI
   14dea:	f383 8812 	msr	BASEPRI_MAX, r3
   14dee:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   14df2:	4f14      	ldr	r7, [pc, #80]	; (14e44 <z_tick_sleep+0x8c>)
   14df4:	68b8      	ldr	r0, [r7, #8]
   14df6:	4b14      	ldr	r3, [pc, #80]	; (14e48 <z_tick_sleep+0x90>)
   14df8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   14dfa:	f7ff fe6d 	bl	14ad8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   14dfe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14e00:	4622      	mov	r2, r4
   14e02:	4633      	mov	r3, r6
   14e04:	4911      	ldr	r1, [pc, #68]	; (14e4c <z_tick_sleep+0x94>)
   14e06:	3018      	adds	r0, #24
   14e08:	f000 f8da 	bl	14fc0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   14e0c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14e0e:	7b53      	ldrb	r3, [r2, #13]
   14e10:	f043 0310 	orr.w	r3, r3, #16
   14e14:	7353      	strb	r3, [r2, #13]
   14e16:	4640      	mov	r0, r8
   14e18:	f7f7 fd44 	bl	c8a4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   14e1c:	f004 fa47 	bl	192ae <sys_clock_tick_get_32>
   14e20:	1a28      	subs	r0, r5, r0
   14e22:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   14e26:	2801      	cmp	r0, #1
   14e28:	f173 0300 	sbcs.w	r3, r3, #0
   14e2c:	da00      	bge.n	14e30 <z_tick_sleep+0x78>
	return 0;
   14e2e:	2000      	movs	r0, #0
}
   14e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   14e34:	f7ff ff7a 	bl	14d2c <z_impl_k_yield>
		return 0;
   14e38:	2000      	movs	r0, #0
   14e3a:	e7f9      	b.n	14e30 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   14e3c:	f004 fa37 	bl	192ae <sys_clock_tick_get_32>
   14e40:	1905      	adds	r5, r0, r4
   14e42:	e7ce      	b.n	14de2 <z_tick_sleep+0x2a>
   14e44:	200025fc 	.word	0x200025fc
   14e48:	2000262c 	.word	0x2000262c
   14e4c:	00019035 	.word	0x00019035

00014e50 <z_impl_k_sleep>:
{
   14e50:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14e52:	f1b1 3fff 	cmp.w	r1, #4294967295
   14e56:	bf08      	it	eq
   14e58:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   14e5c:	d018      	beq.n	14e90 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   14e5e:	f7ff ffab 	bl	14db8 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   14e62:	17c2      	asrs	r2, r0, #31
   14e64:	0151      	lsls	r1, r2, #5
   14e66:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   14e6a:	0143      	lsls	r3, r0, #5
   14e6c:	1a1b      	subs	r3, r3, r0
   14e6e:	eb61 0102 	sbc.w	r1, r1, r2
   14e72:	0089      	lsls	r1, r1, #2
   14e74:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   14e78:	009b      	lsls	r3, r3, #2
   14e7a:	181b      	adds	r3, r3, r0
   14e7c:	eb42 0201 	adc.w	r2, r2, r1
   14e80:	00d2      	lsls	r2, r2, #3
   14e82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   14e86:	f3c3 3310 	ubfx	r3, r3, #12, #17
   14e8a:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   14e8e:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   14e90:	4b03      	ldr	r3, [pc, #12]	; (14ea0 <z_impl_k_sleep+0x50>)
   14e92:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   14e94:	f7ff feb6 	bl	14c04 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   14e98:	f04f 30ff 	mov.w	r0, #4294967295
   14e9c:	e7f7      	b.n	14e8e <z_impl_k_sleep+0x3e>
   14e9e:	bf00      	nop
   14ea0:	200025fc 	.word	0x200025fc

00014ea4 <z_impl_z_current_get>:
}
   14ea4:	4b01      	ldr	r3, [pc, #4]	; (14eac <z_impl_z_current_get+0x8>)
   14ea6:	6898      	ldr	r0, [r3, #8]
   14ea8:	4770      	bx	lr
   14eaa:	bf00      	nop
   14eac:	200025fc 	.word	0x200025fc

00014eb0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   14eb0:	b570      	push	{r4, r5, r6, lr}
   14eb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   14eb6:	f3ef 8511 	mrs	r5, BASEPRI
   14eba:	f383 8812 	msr	BASEPRI_MAX, r3
   14ebe:	f3bf 8f6f 	isb	sy
   14ec2:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   14ec4:	7b03      	ldrb	r3, [r0, #12]
   14ec6:	f013 0f01 	tst.w	r3, #1
   14eca:	d109      	bne.n	14ee0 <z_thread_abort+0x30>
   14ecc:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   14ece:	7b43      	ldrb	r3, [r0, #13]
   14ed0:	f013 0f08 	tst.w	r3, #8
   14ed4:	d00f      	beq.n	14ef6 <z_thread_abort+0x46>
	__asm__ volatile(
   14ed6:	f385 8811 	msr	BASEPRI, r5
   14eda:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   14ede:	e009      	b.n	14ef4 <z_thread_abort+0x44>
   14ee0:	f385 8811 	msr	BASEPRI, r5
   14ee4:	f3bf 8f6f 	isb	sy
		k_panic();
   14ee8:	4040      	eors	r0, r0
   14eea:	f380 8811 	msr	BASEPRI, r0
   14eee:	f04f 0004 	mov.w	r0, #4
   14ef2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   14ef4:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   14ef6:	f7ff fedf 	bl	14cb8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   14efa:	4b08      	ldr	r3, [pc, #32]	; (14f1c <z_thread_abort+0x6c>)
   14efc:	689b      	ldr	r3, [r3, #8]
   14efe:	42a3      	cmp	r3, r4
   14f00:	d004      	beq.n	14f0c <z_thread_abort+0x5c>
   14f02:	f386 8811 	msr	BASEPRI, r6
   14f06:	f3bf 8f6f 	isb	sy
   14f0a:	e7f3      	b.n	14ef4 <z_thread_abort+0x44>
   14f0c:	f3ef 8305 	mrs	r3, IPSR
   14f10:	2b00      	cmp	r3, #0
   14f12:	d1f6      	bne.n	14f02 <z_thread_abort+0x52>
   14f14:	4628      	mov	r0, r5
   14f16:	f7f7 fcc5 	bl	c8a4 <arch_swap>
	return ret;
   14f1a:	e7f2      	b.n	14f02 <z_thread_abort+0x52>
   14f1c:	200025fc 	.word	0x200025fc

00014f20 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   14f20:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   14f24:	b083      	sub	sp, #12
   14f26:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   14f28:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   14f2c:	e9cd bc00 	strd	fp, ip, [sp]
   14f30:	f7ff fdee 	bl	14b10 <z_pend_curr>

	if (data != NULL) {
   14f34:	b11c      	cbz	r4, 14f3e <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   14f36:	4b03      	ldr	r3, [pc, #12]	; (14f44 <z_sched_wait+0x24>)
   14f38:	689b      	ldr	r3, [r3, #8]
   14f3a:	695b      	ldr	r3, [r3, #20]
   14f3c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   14f3e:	b003      	add	sp, #12
   14f40:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   14f44:	200025fc 	.word	0x200025fc

00014f48 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   14f48:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   14f4a:	4806      	ldr	r0, [pc, #24]	; (14f64 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   14f4c:	4a06      	ldr	r2, [pc, #24]	; (14f68 <z_data_copy+0x20>)
   14f4e:	1a12      	subs	r2, r2, r0
   14f50:	4906      	ldr	r1, [pc, #24]	; (14f6c <z_data_copy+0x24>)
   14f52:	f003 fcd0 	bl	188f6 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   14f56:	4a06      	ldr	r2, [pc, #24]	; (14f70 <z_data_copy+0x28>)
   14f58:	4906      	ldr	r1, [pc, #24]	; (14f74 <z_data_copy+0x2c>)
   14f5a:	4807      	ldr	r0, [pc, #28]	; (14f78 <z_data_copy+0x30>)
   14f5c:	f003 fccb 	bl	188f6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   14f60:	bd08      	pop	{r3, pc}
   14f62:	bf00      	nop
   14f64:	20000000 	.word	0x20000000
   14f68:	200004d0 	.word	0x200004d0
   14f6c:	0001b440 	.word	0x0001b440
   14f70:	00000000 	.word	0x00000000
   14f74:	0001b440 	.word	0x0001b440
   14f78:	20000000 	.word	0x20000000

00014f7c <first>:
	return list->head == list;
   14f7c:	4b03      	ldr	r3, [pc, #12]	; (14f8c <first+0x10>)
   14f7e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f80:	4298      	cmp	r0, r3
   14f82:	d000      	beq.n	14f86 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   14f84:	4770      	bx	lr
   14f86:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   14f88:	e7fc      	b.n	14f84 <first+0x8>
   14f8a:	bf00      	nop
   14f8c:	200003ac 	.word	0x200003ac

00014f90 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14f90:	b130      	cbz	r0, 14fa0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   14f92:	4a04      	ldr	r2, [pc, #16]	; (14fa4 <next+0x14>)
   14f94:	6852      	ldr	r2, [r2, #4]
   14f96:	4290      	cmp	r0, r2
   14f98:	d001      	beq.n	14f9e <next+0xe>
   14f9a:	6800      	ldr	r0, [r0, #0]
   14f9c:	4770      	bx	lr
   14f9e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   14fa0:	4770      	bx	lr
   14fa2:	bf00      	nop
   14fa4:	200003ac 	.word	0x200003ac

00014fa8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   14fa8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   14faa:	4b04      	ldr	r3, [pc, #16]	; (14fbc <elapsed+0x14>)
   14fac:	681b      	ldr	r3, [r3, #0]
   14fae:	b10b      	cbz	r3, 14fb4 <elapsed+0xc>
   14fb0:	2000      	movs	r0, #0
}
   14fb2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   14fb4:	f7fd f988 	bl	122c8 <sys_clock_elapsed>
   14fb8:	e7fb      	b.n	14fb2 <elapsed+0xa>
   14fba:	bf00      	nop
   14fbc:	2000263c 	.word	0x2000263c

00014fc0 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
   14fc4:	bf08      	it	eq
   14fc6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   14fca:	d074      	beq.n	150b6 <z_add_timeout+0xf6>
{
   14fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14fd0:	4604      	mov	r4, r0
   14fd2:	4692      	mov	sl, r2
   14fd4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   14fd6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   14fd8:	2300      	movs	r3, #0
	__asm__ volatile(
   14fda:	f04f 0240 	mov.w	r2, #64	; 0x40
   14fde:	f3ef 8711 	mrs	r7, BASEPRI
   14fe2:	f382 8812 	msr	BASEPRI_MAX, r2
   14fe6:	f3bf 8f6f 	isb	sy
   14fea:	e026      	b.n	1503a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   14fec:	f11a 0801 	adds.w	r8, sl, #1
   14ff0:	f145 0900 	adc.w	r9, r5, #0
   14ff4:	f7ff ffd8 	bl	14fa8 <elapsed>
   14ff8:	eb18 0300 	adds.w	r3, r8, r0
   14ffc:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   15000:	6123      	str	r3, [r4, #16]
   15002:	6160      	str	r0, [r4, #20]
   15004:	e03b      	b.n	1507e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   15006:	1a52      	subs	r2, r2, r1
   15008:	eb66 0303 	sbc.w	r3, r6, r3
   1500c:	6102      	str	r2, [r0, #16]
   1500e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   15010:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   15012:	6063      	str	r3, [r4, #4]
	node->next = successor;
   15014:	6020      	str	r0, [r4, #0]
	prev->next = node;
   15016:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   15018:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1501a:	e005      	b.n	15028 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   1501c:	4b26      	ldr	r3, [pc, #152]	; (150b8 <z_add_timeout+0xf8>)
   1501e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   15020:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   15022:	6062      	str	r2, [r4, #4]
	tail->next = node;
   15024:	6014      	str	r4, [r2, #0]
	list->tail = node;
   15026:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15028:	f7ff ffa8 	bl	14f7c <first>
   1502c:	4284      	cmp	r4, r0
   1502e:	d03a      	beq.n	150a6 <z_add_timeout+0xe6>
	__asm__ volatile(
   15030:	f387 8811 	msr	BASEPRI, r7
   15034:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15038:	2301      	movs	r3, #1
   1503a:	2b00      	cmp	r3, #0
   1503c:	d139      	bne.n	150b2 <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1503e:	4653      	mov	r3, sl
   15040:	f06f 0101 	mvn.w	r1, #1
   15044:	ebb1 010a 	subs.w	r1, r1, sl
   15048:	f04f 30ff 	mov.w	r0, #4294967295
   1504c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   15050:	2a00      	cmp	r2, #0
   15052:	dbcb      	blt.n	14fec <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   15054:	4a19      	ldr	r2, [pc, #100]	; (150bc <z_add_timeout+0xfc>)
   15056:	6811      	ldr	r1, [r2, #0]
   15058:	6852      	ldr	r2, [r2, #4]
   1505a:	185b      	adds	r3, r3, r1
   1505c:	eb42 0205 	adc.w	r2, r2, r5
   15060:	f06f 0101 	mvn.w	r1, #1
   15064:	1ac9      	subs	r1, r1, r3
   15066:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   1506a:	4608      	mov	r0, r1
   1506c:	461a      	mov	r2, r3
   1506e:	2901      	cmp	r1, #1
   15070:	f173 0300 	sbcs.w	r3, r3, #0
   15074:	da01      	bge.n	1507a <z_add_timeout+0xba>
   15076:	2001      	movs	r0, #1
   15078:	2200      	movs	r2, #0
   1507a:	6120      	str	r0, [r4, #16]
   1507c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1507e:	f7ff ff7d 	bl	14f7c <first>
   15082:	2800      	cmp	r0, #0
   15084:	d0ca      	beq.n	1501c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   15086:	6902      	ldr	r2, [r0, #16]
   15088:	6946      	ldr	r6, [r0, #20]
   1508a:	6921      	ldr	r1, [r4, #16]
   1508c:	6963      	ldr	r3, [r4, #20]
   1508e:	4291      	cmp	r1, r2
   15090:	eb73 0e06 	sbcs.w	lr, r3, r6
   15094:	dbb7      	blt.n	15006 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   15096:	1a89      	subs	r1, r1, r2
   15098:	eb63 0306 	sbc.w	r3, r3, r6
   1509c:	6121      	str	r1, [r4, #16]
   1509e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   150a0:	f7ff ff76 	bl	14f90 <next>
   150a4:	e7ed      	b.n	15082 <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   150a6:	f004 f8b0 	bl	1920a <next_timeout>
   150aa:	2100      	movs	r1, #0
   150ac:	f7fd f8d0 	bl	12250 <sys_clock_set_timeout>
   150b0:	e7be      	b.n	15030 <z_add_timeout+0x70>
		}
	}
}
   150b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150b6:	4770      	bx	lr
   150b8:	200003ac 	.word	0x200003ac
   150bc:	20001d48 	.word	0x20001d48

000150c0 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   150c0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   150c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   150c6:	f3ef 8611 	mrs	r6, BASEPRI
   150ca:	f383 8812 	msr	BASEPRI_MAX, r3
   150ce:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   150d2:	4b2b      	ldr	r3, [pc, #172]	; (15180 <sys_clock_announce+0xc0>)
   150d4:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   150d6:	f7ff ff51 	bl	14f7c <first>
   150da:	4604      	mov	r4, r0

	for (t = first();
   150dc:	e024      	b.n	15128 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   150de:	4a29      	ldr	r2, [pc, #164]	; (15184 <sys_clock_announce+0xc4>)
   150e0:	6813      	ldr	r3, [r2, #0]
   150e2:	6851      	ldr	r1, [r2, #4]
   150e4:	195b      	adds	r3, r3, r5
   150e6:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   150ea:	6013      	str	r3, [r2, #0]
   150ec:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   150ee:	2200      	movs	r2, #0
   150f0:	2300      	movs	r3, #0
   150f2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   150f6:	4620      	mov	r0, r4
   150f8:	f004 f870 	bl	191dc <remove_timeout>
	__asm__ volatile(
   150fc:	f386 8811 	msr	BASEPRI, r6
   15100:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   15104:	68a3      	ldr	r3, [r4, #8]
   15106:	4620      	mov	r0, r4
   15108:	4798      	blx	r3
	__asm__ volatile(
   1510a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1510e:	f3ef 8611 	mrs	r6, BASEPRI
   15112:	f383 8812 	msr	BASEPRI_MAX, r3
   15116:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1511a:	4a19      	ldr	r2, [pc, #100]	; (15180 <sys_clock_announce+0xc0>)
   1511c:	6813      	ldr	r3, [r2, #0]
   1511e:	1b5b      	subs	r3, r3, r5
   15120:	6013      	str	r3, [r2, #0]
	     t = first()) {
   15122:	f7ff ff2b 	bl	14f7c <first>
   15126:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   15128:	b13c      	cbz	r4, 1513a <sys_clock_announce+0x7a>
   1512a:	6925      	ldr	r5, [r4, #16]
   1512c:	6961      	ldr	r1, [r4, #20]
   1512e:	4b14      	ldr	r3, [pc, #80]	; (15180 <sys_clock_announce+0xc0>)
   15130:	681a      	ldr	r2, [r3, #0]
   15132:	17d3      	asrs	r3, r2, #31
   15134:	42aa      	cmp	r2, r5
   15136:	418b      	sbcs	r3, r1
   15138:	dad1      	bge.n	150de <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   1513a:	b144      	cbz	r4, 1514e <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   1513c:	6923      	ldr	r3, [r4, #16]
   1513e:	6962      	ldr	r2, [r4, #20]
   15140:	490f      	ldr	r1, [pc, #60]	; (15180 <sys_clock_announce+0xc0>)
   15142:	6809      	ldr	r1, [r1, #0]
   15144:	1a5b      	subs	r3, r3, r1
   15146:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1514a:	6123      	str	r3, [r4, #16]
   1514c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   1514e:	4a0d      	ldr	r2, [pc, #52]	; (15184 <sys_clock_announce+0xc4>)
   15150:	4d0b      	ldr	r5, [pc, #44]	; (15180 <sys_clock_announce+0xc0>)
   15152:	6828      	ldr	r0, [r5, #0]
   15154:	6813      	ldr	r3, [r2, #0]
   15156:	6851      	ldr	r1, [r2, #4]
   15158:	181b      	adds	r3, r3, r0
   1515a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   1515e:	6013      	str	r3, [r2, #0]
   15160:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   15162:	2400      	movs	r4, #0
   15164:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   15166:	f004 f850 	bl	1920a <next_timeout>
   1516a:	4621      	mov	r1, r4
   1516c:	f7fd f870 	bl	12250 <sys_clock_set_timeout>
	__asm__ volatile(
   15170:	f386 8811 	msr	BASEPRI, r6
   15174:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   15178:	f7ff fc1a 	bl	149b0 <z_time_slice>
#endif
}
   1517c:	bd70      	pop	{r4, r5, r6, pc}
   1517e:	bf00      	nop
   15180:	2000263c 	.word	0x2000263c
   15184:	20001d48 	.word	0x20001d48

00015188 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   15188:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1518a:	2200      	movs	r2, #0
	__asm__ volatile(
   1518c:	f04f 0340 	mov.w	r3, #64	; 0x40
   15190:	f3ef 8411 	mrs	r4, BASEPRI
   15194:	f383 8812 	msr	BASEPRI_MAX, r3
   15198:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1519c:	4613      	mov	r3, r2
   1519e:	4611      	mov	r1, r2
   151a0:	e00c      	b.n	151bc <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   151a2:	f7ff ff01 	bl	14fa8 <elapsed>
   151a6:	4a07      	ldr	r2, [pc, #28]	; (151c4 <sys_clock_tick_get+0x3c>)
   151a8:	6813      	ldr	r3, [r2, #0]
   151aa:	6851      	ldr	r1, [r2, #4]
   151ac:	18c3      	adds	r3, r0, r3
   151ae:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   151b2:	f384 8811 	msr	BASEPRI, r4
   151b6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   151ba:	2201      	movs	r2, #1
   151bc:	2a00      	cmp	r2, #0
   151be:	d0f0      	beq.n	151a2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   151c0:	4618      	mov	r0, r3
   151c2:	bd10      	pop	{r4, pc}
   151c4:	20001d48 	.word	0x20001d48

000151c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   151c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   151ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   151ce:	f3ef 8311 	mrs	r3, BASEPRI
   151d2:	f382 8812 	msr	BASEPRI_MAX, r2
   151d6:	f3bf 8f6f 	isb	sy
   151da:	461a      	mov	r2, r3
   151dc:	461d      	mov	r5, r3
	return node->next != NULL;
   151de:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   151e0:	b123      	cbz	r3, 151ec <z_timer_expiration_handler+0x24>
	__asm__ volatile(
   151e2:	f382 8811 	msr	BASEPRI, r2
   151e6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   151ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151ec:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   151ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
   151f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   151f2:	ea52 0103 	orrs.w	r1, r2, r3
   151f6:	d005      	beq.n	15204 <z_timer_expiration_handler+0x3c>
   151f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   151fc:	bf08      	it	eq
   151fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   15202:	d129      	bne.n	15258 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
   15204:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15206:	3301      	adds	r3, #1
   15208:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   1520a:	6a23      	ldr	r3, [r4, #32]
   1520c:	b17b      	cbz	r3, 1522e <z_timer_expiration_handler+0x66>
   1520e:	f385 8811 	msr	BASEPRI, r5
   15212:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   15216:	6a23      	ldr	r3, [r4, #32]
   15218:	4620      	mov	r0, r4
   1521a:	4798      	blx	r3
	__asm__ volatile(
   1521c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15220:	f3ef 8311 	mrs	r3, BASEPRI
   15224:	f382 8812 	msr	BASEPRI_MAX, r2
   15228:	f3bf 8f6f 	isb	sy
   1522c:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1522e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   15232:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15234:	42a3      	cmp	r3, r4
   15236:	d03f      	beq.n	152b8 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
   15238:	2c00      	cmp	r4, #0
   1523a:	d03d      	beq.n	152b8 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
   1523c:	4620      	mov	r0, r4
   1523e:	f003 fe44 	bl	18eca <z_unpend_thread_no_timeout>
   15242:	2300      	movs	r3, #0
   15244:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   15248:	f385 8811 	msr	BASEPRI, r5
   1524c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   15250:	4620      	mov	r0, r4
   15252:	f003 fea9 	bl	18fa8 <z_ready_thread>
   15256:	e7c8      	b.n	151ea <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
   15258:	4616      	mov	r6, r2
   1525a:	461f      	mov	r7, r3
   1525c:	2a01      	cmp	r2, #1
   1525e:	f173 0300 	sbcs.w	r3, r3, #0
   15262:	da01      	bge.n	15268 <z_timer_expiration_handler+0xa0>
   15264:	2601      	movs	r6, #1
   15266:	2700      	movs	r7, #0
   15268:	3e01      	subs	r6, #1
   1526a:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
   1526e:	f004 f822 	bl	192b6 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   15272:	3001      	adds	r0, #1
   15274:	f141 0100 	adc.w	r1, r1, #0
   15278:	1980      	adds	r0, r0, r6
   1527a:	eb47 0101 	adc.w	r1, r7, r1
   1527e:	2801      	cmp	r0, #1
   15280:	f171 0100 	sbcs.w	r1, r1, #0
   15284:	da08      	bge.n	15298 <z_timer_expiration_handler+0xd0>
   15286:	f06f 0201 	mvn.w	r2, #1
   1528a:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1528e:	490d      	ldr	r1, [pc, #52]	; (152c4 <z_timer_expiration_handler+0xfc>)
   15290:	4620      	mov	r0, r4
   15292:	f7ff fe95 	bl	14fc0 <z_add_timeout>
   15296:	e7b5      	b.n	15204 <z_timer_expiration_handler+0x3c>
   15298:	f004 f80d 	bl	192b6 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   1529c:	3001      	adds	r0, #1
   1529e:	f141 0100 	adc.w	r1, r1, #0
   152a2:	1980      	adds	r0, r0, r6
   152a4:	eb47 0301 	adc.w	r3, r7, r1
   152a8:	f06f 0201 	mvn.w	r2, #1
   152ac:	1a12      	subs	r2, r2, r0
   152ae:	f04f 31ff 	mov.w	r1, #4294967295
   152b2:	eb61 0303 	sbc.w	r3, r1, r3
   152b6:	e7ea      	b.n	1528e <z_timer_expiration_handler+0xc6>
   152b8:	f385 8811 	msr	BASEPRI, r5
   152bc:	f3bf 8f6f 	isb	sy
		return;
   152c0:	e793      	b.n	151ea <z_timer_expiration_handler+0x22>
   152c2:	bf00      	nop
   152c4:	000151c9 	.word	0x000151c9

000152c8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   152c8:	b570      	push	{r4, r5, r6, lr}
   152ca:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   152cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   152d0:	bf08      	it	eq
   152d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   152d6:	d01a      	beq.n	1530e <z_impl_k_timer_start+0x46>
   152d8:	4606      	mov	r6, r0
   152da:	4614      	mov	r4, r2
   152dc:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   152de:	f06f 0201 	mvn.w	r2, #1
   152e2:	1b12      	subs	r2, r2, r4
   152e4:	f04f 32ff 	mov.w	r2, #4294967295
   152e8:	eb62 0203 	sbc.w	r2, r2, r3
   152ec:	2a00      	cmp	r2, #0
   152ee:	db0f      	blt.n	15310 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   152f0:	4630      	mov	r0, r6
   152f2:	f003 ffa7 	bl	19244 <z_abort_timeout>
	timer->period = period;
   152f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   152fa:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
   152fe:	2300      	movs	r3, #0
   15300:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15302:	4622      	mov	r2, r4
   15304:	462b      	mov	r3, r5
   15306:	4907      	ldr	r1, [pc, #28]	; (15324 <z_impl_k_timer_start+0x5c>)
   15308:	4630      	mov	r0, r6
   1530a:	f7ff fe59 	bl	14fc0 <z_add_timeout>
		     duration);
}
   1530e:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
   15310:	2c01      	cmp	r4, #1
   15312:	f171 0100 	sbcs.w	r1, r1, #0
   15316:	da01      	bge.n	1531c <z_impl_k_timer_start+0x54>
   15318:	2401      	movs	r4, #1
   1531a:	2500      	movs	r5, #0
   1531c:	3c01      	subs	r4, #1
   1531e:	f145 35ff 	adc.w	r5, r5, #4294967295
   15322:	e7e5      	b.n	152f0 <z_impl_k_timer_start+0x28>
   15324:	000151c9 	.word	0x000151c9

00015328 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   15328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1532c:	b083      	sub	sp, #12
   1532e:	4607      	mov	r7, r0
   15330:	4616      	mov	r6, r2
   15332:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   15334:	4b28      	ldr	r3, [pc, #160]	; (153d8 <z_impl_k_poll+0xb0>)
   15336:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   15338:	2301      	movs	r3, #1
   1533a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   1533e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   15342:	ea55 0302 	orrs.w	r3, r5, r2
   15346:	bf0c      	ite	eq
   15348:	2301      	moveq	r3, #1
   1534a:	2300      	movne	r3, #0
   1534c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   15350:	f004 f8eb 	bl	1952a <register_events>
   15354:	4680      	mov	r8, r0
	__asm__ volatile(
   15356:	f04f 0340 	mov.w	r3, #64	; 0x40
   1535a:	f3ef 8111 	mrs	r1, BASEPRI
   1535e:	f383 8812 	msr	BASEPRI_MAX, r3
   15362:	f3bf 8f6f 	isb	sy
   15366:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   15368:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1536c:	b30b      	cbz	r3, 153b2 <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1536e:	2300      	movs	r3, #0
   15370:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15374:	ea55 0306 	orrs.w	r3, r5, r6
   15378:	d026      	beq.n	153c8 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1537a:	9600      	str	r6, [sp, #0]
   1537c:	9501      	str	r5, [sp, #4]
   1537e:	4a17      	ldr	r2, [pc, #92]	; (153dc <z_impl_k_poll+0xb4>)
   15380:	4817      	ldr	r0, [pc, #92]	; (153e0 <z_impl_k_poll+0xb8>)
   15382:	f7ff fbc5 	bl	14b10 <z_pend_curr>
   15386:	4604      	mov	r4, r0
   15388:	f04f 0340 	mov.w	r3, #64	; 0x40
   1538c:	f3ef 8211 	mrs	r2, BASEPRI
   15390:	f383 8812 	msr	BASEPRI_MAX, r3
   15394:	f3bf 8f6f 	isb	sy
   15398:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1539a:	4641      	mov	r1, r8
   1539c:	4638      	mov	r0, r7
   1539e:	f004 f838 	bl	19412 <clear_event_registrations>
	__asm__ volatile(
   153a2:	f385 8811 	msr	BASEPRI, r5
   153a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   153aa:	4620      	mov	r0, r4
   153ac:	b003      	add	sp, #12
   153ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   153b2:	460a      	mov	r2, r1
   153b4:	4601      	mov	r1, r0
   153b6:	4638      	mov	r0, r7
   153b8:	f004 f82b 	bl	19412 <clear_event_registrations>
   153bc:	f389 8811 	msr	BASEPRI, r9
   153c0:	f3bf 8f6f 	isb	sy
		return 0;
   153c4:	2400      	movs	r4, #0
   153c6:	e7f0      	b.n	153aa <z_impl_k_poll+0x82>
   153c8:	f381 8811 	msr	BASEPRI, r1
   153cc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   153d0:	f06f 040a 	mvn.w	r4, #10
   153d4:	e7e9      	b.n	153aa <z_impl_k_poll+0x82>
   153d6:	bf00      	nop
   153d8:	200025fc 	.word	0x200025fc
   153dc:	200003b4 	.word	0x200003b4
   153e0:	20002640 	.word	0x20002640

000153e4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   153e4:	b538      	push	{r3, r4, r5, lr}
   153e6:	4603      	mov	r3, r0
	__asm__ volatile(
   153e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   153ec:	f3ef 8511 	mrs	r5, BASEPRI
   153f0:	f382 8812 	msr	BASEPRI_MAX, r2
   153f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   153f8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   153fa:	2201      	movs	r2, #1
   153fc:	6082      	str	r2, [r0, #8]
	return list->head == list;
   153fe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15400:	4283      	cmp	r3, r0
   15402:	d010      	beq.n	15426 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   15404:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   15406:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   15408:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1540a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1540c:	2300      	movs	r3, #0
   1540e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15410:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15412:	2101      	movs	r1, #1
   15414:	f004 f913 	bl	1963e <signal_poll_event>
   15418:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1541a:	4629      	mov	r1, r5
   1541c:	4805      	ldr	r0, [pc, #20]	; (15434 <z_impl_k_poll_signal_raise+0x50>)
   1541e:	f7ff fa29 	bl	14874 <z_reschedule>
	return rc;
}
   15422:	4620      	mov	r0, r4
   15424:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15426:	f385 8811 	msr	BASEPRI, r5
   1542a:	f3bf 8f6f 	isb	sy
		return 0;
   1542e:	2400      	movs	r4, #0
   15430:	e7f7      	b.n	15422 <z_impl_k_poll_signal_raise+0x3e>
   15432:	bf00      	nop
   15434:	20002640 	.word	0x20002640

00015438 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   15438:	b538      	push	{r3, r4, r5, lr}
   1543a:	4604      	mov	r4, r0
   1543c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1543e:	f003 faec 	bl	18a1a <k_is_in_isr>
   15442:	b948      	cbnz	r0, 15458 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   15444:	4b05      	ldr	r3, [pc, #20]	; (1545c <z_thread_aligned_alloc+0x24>)
   15446:	689b      	ldr	r3, [r3, #8]
   15448:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1544c:	b118      	cbz	r0, 15456 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1544e:	462a      	mov	r2, r5
   15450:	4621      	mov	r1, r4
   15452:	f004 f925 	bl	196a0 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   15456:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   15458:	2000      	movs	r0, #0
	return ret;
   1545a:	e7fc      	b.n	15456 <z_thread_aligned_alloc+0x1e>
   1545c:	200025fc 	.word	0x200025fc

00015460 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   15460:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   15462:	4802      	ldr	r0, [pc, #8]	; (1546c <boot_banner+0xc>)
   15464:	f000 f936 	bl	156d4 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   15468:	bd08      	pop	{r3, pc}
   1546a:	bf00      	nop
   1546c:	0001b404 	.word	0x0001b404

00015470 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   15470:	b510      	push	{r4, lr}
   15472:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
   15474:	4b08      	ldr	r3, [pc, #32]	; (15498 <k_sys_work_q_init+0x28>)
   15476:	9302      	str	r3, [sp, #8]
   15478:	2400      	movs	r4, #0
   1547a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1547e:	ab02      	add	r3, sp, #8
   15480:	9300      	str	r3, [sp, #0]
   15482:	f04f 33ff 	mov.w	r3, #4294967295
   15486:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1548a:	4904      	ldr	r1, [pc, #16]	; (1549c <k_sys_work_q_init+0x2c>)
   1548c:	4804      	ldr	r0, [pc, #16]	; (154a0 <k_sys_work_q_init+0x30>)
   1548e:	f7ff f93d 	bl	1470c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   15492:	4620      	mov	r0, r4
   15494:	b004      	add	sp, #16
   15496:	bd10      	pop	{r4, pc}
   15498:	0001b434 	.word	0x0001b434
   1549c:	20004ac0 	.word	0x20004ac0
   154a0:	20001d50 	.word	0x20001d50

000154a4 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   154a4:	b538      	push	{r3, r4, r5, lr}
   154a6:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   154a8:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   154aa:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   154ac:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   154b0:	d007      	beq.n	154c2 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   154b2:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   154b6:	d004      	beq.n	154c2 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   154b8:	f012 0f01 	tst.w	r2, #1
   154bc:	d001      	beq.n	154c2 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   154be:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   154c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   154c6:	f013 0f01 	tst.w	r3, #1
   154ca:	d00a      	beq.n	154e2 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   154cc:	6823      	ldr	r3, [r4, #0]
   154ce:	f04f 0c01 	mov.w	ip, #1
   154d2:	fa0c fc01 	lsl.w	ip, ip, r1
   154d6:	ea43 030c 	orr.w	r3, r3, ip
   154da:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   154dc:	682b      	ldr	r3, [r5, #0]
   154de:	4798      	blx	r3
}
   154e0:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   154e2:	6823      	ldr	r3, [r4, #0]
   154e4:	f04f 0c01 	mov.w	ip, #1
   154e8:	fa0c fc01 	lsl.w	ip, ip, r1
   154ec:	ea23 030c 	bic.w	r3, r3, ip
   154f0:	6023      	str	r3, [r4, #0]
   154f2:	e7f3      	b.n	154dc <z_impl_gpio_pin_configure+0x38>

000154f4 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
   154f4:	b508      	push	{r3, lr}
   154f6:	4603      	mov	r3, r0
   154f8:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   154fa:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   154fc:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   154fe:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   15500:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   15504:	f7ff ffce 	bl	154a4 <z_impl_gpio_pin_configure>
}
   15508:	bd08      	pop	{r3, pc}

0001550a <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
   1550a:	b508      	push	{r3, lr}
   1550c:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
   1550e:	6800      	ldr	r0, [r0, #0]
   15510:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   15512:	2101      	movs	r1, #1
   15514:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
   15516:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   15518:	695b      	ldr	r3, [r3, #20]
   1551a:	4798      	blx	r3
}
   1551c:	bd08      	pop	{r3, pc}

0001551e <k_msleep>:
{
   1551e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   15520:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   15524:	17c1      	asrs	r1, r0, #31
   15526:	03c9      	lsls	r1, r1, #15
   15528:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1552c:	03c0      	lsls	r0, r0, #15
   1552e:	f240 33e7 	movw	r3, #999	; 0x3e7
   15532:	18c0      	adds	r0, r0, r3
   15534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15538:	f04f 0300 	mov.w	r3, #0
   1553c:	f141 0100 	adc.w	r1, r1, #0
   15540:	f7ea fdcc 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   15544:	f7ff fc84 	bl	14e50 <z_impl_k_sleep>
}
   15548:	bd08      	pop	{r3, pc}

0001554a <k_msleep>:
{
   1554a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1554c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   15550:	17c1      	asrs	r1, r0, #31
   15552:	03c9      	lsls	r1, r1, #15
   15554:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   15558:	03c0      	lsls	r0, r0, #15
   1555a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1555e:	18c0      	adds	r0, r0, r3
   15560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15564:	f04f 0300 	mov.w	r3, #0
   15568:	f141 0100 	adc.w	r1, r1, #0
   1556c:	f7ea fdb6 	bl	dc <__aeabi_uldivmod>
   15570:	f7ff fc6e 	bl	14e50 <z_impl_k_sleep>
}
   15574:	bd08      	pop	{r3, pc}

00015576 <cbprintf_via_va_list>:
{
   15576:	b510      	push	{r4, lr}
   15578:	460c      	mov	r4, r1
   1557a:	4611      	mov	r1, r2
   1557c:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   1557e:	9b02      	ldr	r3, [sp, #8]
   15580:	47a0      	blx	r4
}
   15582:	bd10      	pop	{r4, pc}

00015584 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   15584:	3840      	subs	r0, #64	; 0x40
   15586:	b2c0      	uxtb	r0, r0
}
   15588:	283a      	cmp	r0, #58	; 0x3a
   1558a:	bf8c      	ite	hi
   1558c:	2000      	movhi	r0, #0
   1558e:	2001      	movls	r0, #1
   15590:	4770      	bx	lr

00015592 <get_package_len>:
{
   15592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15594:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   15596:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   15598:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   1559a:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   1559c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   155a0:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
   155a2:	2700      	movs	r7, #0
   155a4:	e006      	b.n	155b4 <get_package_len+0x22>
		buf++;
   155a6:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   155a8:	4620      	mov	r0, r4
   155aa:	f001 fbd2 	bl	16d52 <strlen>
   155ae:	3001      	adds	r0, #1
   155b0:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
   155b2:	3701      	adds	r7, #1
   155b4:	42af      	cmp	r7, r5
   155b6:	d3f6      	bcc.n	155a6 <get_package_len+0x14>
}
   155b8:	1ba0      	subs	r0, r4, r6
   155ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000155bc <append_string>:
{
   155bc:	b570      	push	{r4, r5, r6, lr}
   155be:	4614      	mov	r4, r2
	if (cb == NULL) {
   155c0:	b138      	cbz	r0, 155d2 <append_string+0x16>
   155c2:	460d      	mov	r5, r1
   155c4:	4619      	mov	r1, r3
   155c6:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   155c8:	b143      	cbz	r3, 155dc <append_string+0x20>
	return cb(str, strl, ctx);
   155ca:	462a      	mov	r2, r5
   155cc:	4620      	mov	r0, r4
   155ce:	47b0      	blx	r6
}
   155d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   155d2:	4610      	mov	r0, r2
   155d4:	f001 fbbd 	bl	16d52 <strlen>
   155d8:	3001      	adds	r0, #1
   155da:	e7f9      	b.n	155d0 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   155dc:	4610      	mov	r0, r2
   155de:	f001 fbb8 	bl	16d52 <strlen>
   155e2:	b283      	uxth	r3, r0
   155e4:	3301      	adds	r3, #1
   155e6:	b299      	uxth	r1, r3
   155e8:	e7ef      	b.n	155ca <append_string+0xe>

000155ea <cbpprintf_external>:
	if (buf == NULL) {
   155ea:	b35b      	cbz	r3, 15644 <cbpprintf_external+0x5a>
{
   155ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155f0:	b082      	sub	sp, #8
   155f2:	4607      	mov	r7, r0
   155f4:	4688      	mov	r8, r1
   155f6:	4691      	mov	r9, r2
   155f8:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   155fa:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   155fc:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   155fe:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   15600:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   15602:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   15606:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   1560a:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   1560c:	f04f 0a00 	mov.w	sl, #0
   15610:	e00a      	b.n	15628 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   15612:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   15616:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   1561a:	4620      	mov	r0, r4
   1561c:	f001 fb99 	bl	16d52 <strlen>
   15620:	3001      	adds	r0, #1
   15622:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   15624:	f10a 0a01 	add.w	sl, sl, #1
   15628:	45b2      	cmp	sl, r6
   1562a:	d3f2      	bcc.n	15612 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   1562c:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   15630:	9300      	str	r3, [sp, #0]
   15632:	686b      	ldr	r3, [r5, #4]
   15634:	464a      	mov	r2, r9
   15636:	4641      	mov	r1, r8
   15638:	4638      	mov	r0, r7
   1563a:	f7ff ff9c 	bl	15576 <cbprintf_via_va_list>
}
   1563e:	b002      	add	sp, #8
   15640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   15644:	f06f 0015 	mvn.w	r0, #21
}
   15648:	4770      	bx	lr

0001564a <is_ptr>:
{
   1564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1564e:	4604      	mov	r4, r0
   15650:	4688      	mov	r8, r1
	int cnt = 0;
   15652:	2700      	movs	r7, #0
	bool mod = false;
   15654:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   15656:	e007      	b.n	15668 <is_ptr+0x1e>
				if (c == 'p') {
   15658:	2d70      	cmp	r5, #112	; 0x70
   1565a:	d018      	beq.n	1568e <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   1565c:	4628      	mov	r0, r5
   1565e:	f7ff ff91 	bl	15584 <is_fmt_spec>
   15662:	b9b8      	cbnz	r0, 15694 <is_ptr+0x4a>
		if (c == '%') {
   15664:	2d25      	cmp	r5, #37	; 0x25
   15666:	d00e      	beq.n	15686 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   15668:	f814 5b01 	ldrb.w	r5, [r4], #1
   1566c:	b175      	cbz	r5, 1568c <is_ptr+0x42>
		if (mod) {
   1566e:	2e00      	cmp	r6, #0
   15670:	d0f8      	beq.n	15664 <is_ptr+0x1a>
			if (cnt == n) {
   15672:	4547      	cmp	r7, r8
   15674:	d0f0      	beq.n	15658 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   15676:	4628      	mov	r0, r5
   15678:	f7ff ff84 	bl	15584 <is_fmt_spec>
   1567c:	2800      	cmp	r0, #0
   1567e:	d0f1      	beq.n	15664 <is_ptr+0x1a>
				cnt++;
   15680:	3701      	adds	r7, #1
				mod = false;
   15682:	2600      	movs	r6, #0
   15684:	e7ee      	b.n	15664 <is_ptr+0x1a>
			mod = !mod;
   15686:	f086 0601 	eor.w	r6, r6, #1
   1568a:	e7ed      	b.n	15668 <is_ptr+0x1e>
	return false;
   1568c:	2600      	movs	r6, #0
}
   1568e:	4630      	mov	r0, r6
   15690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   15694:	2600      	movs	r6, #0
   15696:	e7fa      	b.n	1568e <is_ptr+0x44>

00015698 <arch_printk_char_out>:
}
   15698:	2000      	movs	r0, #0
   1569a:	4770      	bx	lr

0001569c <str_out>:
{
   1569c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1569e:	680c      	ldr	r4, [r1, #0]
   156a0:	b154      	cbz	r4, 156b8 <str_out+0x1c>
   156a2:	688a      	ldr	r2, [r1, #8]
   156a4:	684b      	ldr	r3, [r1, #4]
   156a6:	429a      	cmp	r2, r3
   156a8:	da06      	bge.n	156b8 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   156aa:	3b01      	subs	r3, #1
   156ac:	429a      	cmp	r2, r3
   156ae:	d008      	beq.n	156c2 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   156b0:	1c53      	adds	r3, r2, #1
   156b2:	608b      	str	r3, [r1, #8]
   156b4:	54a0      	strb	r0, [r4, r2]
   156b6:	e002      	b.n	156be <str_out+0x22>
		ctx->count++;
   156b8:	688b      	ldr	r3, [r1, #8]
   156ba:	3301      	adds	r3, #1
   156bc:	608b      	str	r3, [r1, #8]
}
   156be:	bc10      	pop	{r4}
   156c0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   156c2:	1c53      	adds	r3, r2, #1
   156c4:	608b      	str	r3, [r1, #8]
   156c6:	2300      	movs	r3, #0
   156c8:	54a3      	strb	r3, [r4, r2]
   156ca:	e7f8      	b.n	156be <str_out+0x22>

000156cc <vprintk>:
{
   156cc:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   156ce:	f001 f92f 	bl	16930 <z_log_vprintk>
}
   156d2:	bd08      	pop	{r3, pc}

000156d4 <printk>:
{
   156d4:	b40f      	push	{r0, r1, r2, r3}
   156d6:	b500      	push	{lr}
   156d8:	b083      	sub	sp, #12
   156da:	a904      	add	r1, sp, #16
   156dc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   156e0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   156e2:	f7ff fff3 	bl	156cc <vprintk>
}
   156e6:	b003      	add	sp, #12
   156e8:	f85d eb04 	ldr.w	lr, [sp], #4
   156ec:	b004      	add	sp, #16
   156ee:	4770      	bx	lr

000156f0 <snprintk>:
{
   156f0:	b40c      	push	{r2, r3}
   156f2:	b500      	push	{lr}
   156f4:	b083      	sub	sp, #12
   156f6:	ab04      	add	r3, sp, #16
   156f8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   156fc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   156fe:	f7f5 fb17 	bl	ad30 <vsnprintk>
}
   15702:	b003      	add	sp, #12
   15704:	f85d eb04 	ldr.w	lr, [sp], #4
   15708:	b002      	add	sp, #8
   1570a:	4770      	bx	lr

0001570c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1570c:	b508      	push	{r3, lr}
   1570e:	4604      	mov	r4, r0
   15710:	4608      	mov	r0, r1
   15712:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   15714:	461a      	mov	r2, r3
   15716:	47a0      	blx	r4
	return z_impl_z_current_get();
   15718:	f7ff fbc4 	bl	14ea4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1571c:	f7f8 fbe2 	bl	dee4 <z_impl_k_thread_abort>

00015720 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   15720:	00c9      	lsls	r1, r1, #3
   15722:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   15724:	4408      	add	r0, r1
   15726:	4770      	bx	lr

00015728 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15728:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1572c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   15730:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   15732:	4299      	cmp	r1, r3
   15734:	d00c      	beq.n	15750 <free_list_remove_bidx+0x28>
   15736:	4484      	add	ip, r0
   15738:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1573c:	3204      	adds	r2, #4
   1573e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15742:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   15744:	3206      	adds	r2, #6
   15746:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   15748:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1574a:	3304      	adds	r3, #4
   1574c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1574e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   15750:	68c3      	ldr	r3, [r0, #12]
   15752:	2101      	movs	r1, #1
   15754:	4091      	lsls	r1, r2
   15756:	ea23 0301 	bic.w	r3, r3, r1
   1575a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1575c:	3204      	adds	r2, #4
   1575e:	2300      	movs	r3, #0
   15760:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   15764:	4770      	bx	lr

00015766 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   15766:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   15768:	1d13      	adds	r3, r2, #4
   1576a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1576e:	b974      	cbnz	r4, 1578e <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   15770:	68c3      	ldr	r3, [r0, #12]
   15772:	2401      	movs	r4, #1
   15774:	4094      	lsls	r4, r2
   15776:	4323      	orrs	r3, r4
   15778:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1577a:	3204      	adds	r2, #4
   1577c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   15780:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   15782:	1d1a      	adds	r2, r3, #4
   15784:	b289      	uxth	r1, r1
   15786:	5281      	strh	r1, [r0, r2]
   15788:	3306      	adds	r3, #6
   1578a:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1578c:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   1578e:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   15790:	3204      	adds	r2, #4
   15792:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   15794:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   15798:	f10c 0e04 	add.w	lr, ip, #4
   1579c:	f820 300e 	strh.w	r3, [r0, lr]
   157a0:	f10c 0c06 	add.w	ip, ip, #6
   157a4:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   157a8:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   157aa:	3306      	adds	r3, #6
   157ac:	b289      	uxth	r1, r1
   157ae:	52c1      	strh	r1, [r0, r3]
   157b0:	5281      	strh	r1, [r0, r2]
   157b2:	e7eb      	b.n	1578c <free_list_add_bidx+0x26>

000157b4 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   157b4:	b500      	push	{lr}
	void *cmem = &buf[c];
   157b6:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   157b8:	3302      	adds	r3, #2
   157ba:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   157be:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   157c2:	1a89      	subs	r1, r1, r2
   157c4:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   157c8:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   157cc:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   157d0:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   157d4:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   157d6:	3302      	adds	r3, #2
   157d8:	f820 e003 	strh.w	lr, [r0, r3]
   157dc:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   157e0:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   157e2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   157e6:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   157ea:	f85d fb04 	ldr.w	pc, [sp], #4

000157ee <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   157ee:	b500      	push	{lr}
	void *cmem = &buf[c];
   157f0:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   157f2:	3102      	adds	r1, #2
   157f4:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   157f8:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   157fc:	f10c 0c02 	add.w	ip, ip, #2
   15800:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15804:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   15806:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1580a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   1580e:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   15812:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   15816:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   1581a:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1581e:	f85d fb04 	ldr.w	pc, [sp], #4

00015822 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   15822:	3904      	subs	r1, #4
   15824:	1a08      	subs	r0, r1, r0
}
   15826:	08c0      	lsrs	r0, r0, #3
   15828:	4770      	bx	lr

0001582a <free_list_remove>:
{
   1582a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1582c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   15830:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15832:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   15834:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   15838:	f1c2 021f 	rsb	r2, r2, #31
   1583c:	f7ff ff74 	bl	15728 <free_list_remove_bidx>
}
   15840:	bd08      	pop	{r3, pc}

00015842 <free_list_add>:
{
   15842:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   15844:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   15848:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1584a:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   1584c:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   15850:	f1c2 021f 	rsb	r2, r2, #31
   15854:	f7ff ff87 	bl	15766 <free_list_add_bidx>
}
   15858:	bd08      	pop	{r3, pc}

0001585a <free_chunk>:
{
   1585a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1585c:	4604      	mov	r4, r0
   1585e:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   15860:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   15862:	1cb7      	adds	r7, r6, #2
   15864:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   15866:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   1586a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1586e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   15870:	f013 0f01 	tst.w	r3, #1
   15874:	d00c      	beq.n	15890 <free_chunk+0x36>
   15876:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   15878:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   1587a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   1587e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   15880:	f013 0f01 	tst.w	r3, #1
   15884:	d00e      	beq.n	158a4 <free_chunk+0x4a>
	free_list_add(h, c);
   15886:	4629      	mov	r1, r5
   15888:	4620      	mov	r0, r4
   1588a:	f7ff ffda 	bl	15842 <free_list_add>
}
   1588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   15890:	f7ff ffcb 	bl	1582a <free_list_remove>
   15894:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   15896:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1589a:	4629      	mov	r1, r5
   1589c:	4620      	mov	r0, r4
   1589e:	f7ff ffa6 	bl	157ee <merge_chunks>
   158a2:	e7e8      	b.n	15876 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   158a4:	4620      	mov	r0, r4
   158a6:	f7ff ffc0 	bl	1582a <free_list_remove>
   158aa:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   158ac:	462a      	mov	r2, r5
   158ae:	1a69      	subs	r1, r5, r1
   158b0:	4620      	mov	r0, r4
   158b2:	f7ff ff9c 	bl	157ee <merge_chunks>
   158b6:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   158b8:	1aed      	subs	r5, r5, r3
   158ba:	e7e4      	b.n	15886 <free_chunk+0x2c>

000158bc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   158bc:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   158be:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   158c2:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   158c6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   158ca:	b1cd      	cbz	r5, 15900 <alloc_chunk+0x44>
   158cc:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   158d0:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   158d4:	1d14      	adds	r4, r2, #4
   158d6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   158da:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   158de:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   158e2:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   158e4:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   158e8:	d914      	bls.n	15914 <alloc_chunk+0x58>
   158ea:	4484      	add	ip, r0
   158ec:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   158f0:	1d16      	adds	r6, r2, #4
   158f2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   158f6:	f1be 0e01 	subs.w	lr, lr, #1
   158fa:	d001      	beq.n	15900 <alloc_chunk+0x44>
   158fc:	42a5      	cmp	r5, r4
   158fe:	d1e9      	bne.n	158d4 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   15900:	68c4      	ldr	r4, [r0, #12]
   15902:	f1c3 0220 	rsb	r2, r3, #32
   15906:	2301      	movs	r3, #1
   15908:	4093      	lsls	r3, r2
   1590a:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1590c:	401c      	ands	r4, r3
   1590e:	d105      	bne.n	1591c <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   15910:	4620      	mov	r0, r4
   15912:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   15914:	4621      	mov	r1, r4
   15916:	f7ff ff07 	bl	15728 <free_list_remove_bidx>
				return c;
   1591a:	e7f9      	b.n	15910 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   1591c:	fa94 f2a4 	rbit	r2, r4
   15920:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   15924:	1d13      	adds	r3, r2, #4
   15926:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1592a:	4621      	mov	r1, r4
   1592c:	f7ff fefc 	bl	15728 <free_list_remove_bidx>
		return c;
   15930:	e7ee      	b.n	15910 <alloc_chunk+0x54>

00015932 <sys_heap_free>:
	if (mem == NULL) {
   15932:	b179      	cbz	r1, 15954 <sys_heap_free+0x22>
{
   15934:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   15936:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   15938:	4620      	mov	r0, r4
   1593a:	f7ff ff72 	bl	15822 <mem_to_chunkid>
   1593e:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   15940:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   15944:	8853      	ldrh	r3, [r2, #2]
   15946:	f023 0301 	bic.w	r3, r3, #1
   1594a:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   1594c:	4620      	mov	r0, r4
   1594e:	f7ff ff84 	bl	1585a <free_chunk>
}
   15952:	bd10      	pop	{r4, pc}
   15954:	4770      	bx	lr

00015956 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   15956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   15958:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1595a:	b341      	cbz	r1, 159ae <sys_heap_alloc+0x58>
   1595c:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1595e:	68aa      	ldr	r2, [r5, #8]
   15960:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   15964:	d925      	bls.n	159b2 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15966:	330b      	adds	r3, #11
   15968:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1596a:	4621      	mov	r1, r4
   1596c:	4628      	mov	r0, r5
   1596e:	f7ff ffa5 	bl	158bc <alloc_chunk>
	if (c == 0U) {
   15972:	4607      	mov	r7, r0
   15974:	b1f8      	cbz	r0, 159b6 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   15976:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   15978:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   1597c:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1597e:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   15982:	d309      	bcc.n	15998 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   15984:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15986:	885a      	ldrh	r2, [r3, #2]
   15988:	f042 0201 	orr.w	r2, r2, #1
   1598c:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   1598e:	4639      	mov	r1, r7
   15990:	4628      	mov	r0, r5
   15992:	f7ff fec5 	bl	15720 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   15996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   15998:	4404      	add	r4, r0
   1599a:	4622      	mov	r2, r4
   1599c:	4601      	mov	r1, r0
   1599e:	4628      	mov	r0, r5
   159a0:	f7ff ff08 	bl	157b4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   159a4:	4621      	mov	r1, r4
   159a6:	4628      	mov	r0, r5
   159a8:	f7ff ff4b 	bl	15842 <free_list_add>
   159ac:	e7ea      	b.n	15984 <sys_heap_alloc+0x2e>
		return NULL;
   159ae:	2000      	movs	r0, #0
   159b0:	e7f1      	b.n	15996 <sys_heap_alloc+0x40>
   159b2:	2000      	movs	r0, #0
   159b4:	e7ef      	b.n	15996 <sys_heap_alloc+0x40>
		return NULL;
   159b6:	2000      	movs	r0, #0
   159b8:	e7ed      	b.n	15996 <sys_heap_alloc+0x40>

000159ba <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   159ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   159be:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   159c0:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   159c2:	424b      	negs	r3, r1
   159c4:	400b      	ands	r3, r1
	if (align != rew) {
   159c6:	f101 39ff 	add.w	r9, r1, #4294967295
   159ca:	ea19 0901 	ands.w	r9, r9, r1
   159ce:	d004      	beq.n	159da <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   159d0:	2b03      	cmp	r3, #3
   159d2:	d847      	bhi.n	15a64 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   159d4:	464c      	mov	r4, r9
	rew = align & -align;
   159d6:	4699      	mov	r9, r3
   159d8:	e003      	b.n	159e2 <sys_heap_aligned_alloc+0x28>
   159da:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   159dc:	2904      	cmp	r1, #4
   159de:	d93c      	bls.n	15a5a <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   159e0:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   159e2:	2d00      	cmp	r5, #0
   159e4:	d056      	beq.n	15a94 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   159e6:	68b2      	ldr	r2, [r6, #8]
   159e8:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   159ec:	d955      	bls.n	15a9a <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   159ee:	1961      	adds	r1, r4, r5
   159f0:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   159f2:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   159f4:	08c9      	lsrs	r1, r1, #3
   159f6:	4630      	mov	r0, r6
   159f8:	f7ff ff60 	bl	158bc <alloc_chunk>

	if (c0 == 0) {
   159fc:	4607      	mov	r7, r0
   159fe:	2800      	cmp	r0, #0
   15a00:	d04e      	beq.n	15aa0 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   15a02:	4601      	mov	r1, r0
   15a04:	4630      	mov	r0, r6
   15a06:	f7ff fe8b 	bl	15720 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   15a0a:	eb00 0809 	add.w	r8, r0, r9
   15a0e:	44a0      	add	r8, r4
   15a10:	f108 38ff 	add.w	r8, r8, #4294967295
   15a14:	4264      	negs	r4, r4
   15a16:	ea08 0804 	and.w	r8, r8, r4
   15a1a:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   15a1e:	eb08 0405 	add.w	r4, r8, r5
   15a22:	3407      	adds	r4, #7
   15a24:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   15a28:	4641      	mov	r1, r8
   15a2a:	4630      	mov	r0, r6
   15a2c:	f7ff fef9 	bl	15822 <mem_to_chunkid>
   15a30:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   15a32:	1ba4      	subs	r4, r4, r6
   15a34:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   15a36:	4287      	cmp	r7, r0
   15a38:	d318      	bcc.n	15a6c <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   15a3a:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   15a3c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   15a40:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   15a42:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   15a46:	429c      	cmp	r4, r3
   15a48:	d31a      	bcc.n	15a80 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   15a4a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15a4c:	8873      	ldrh	r3, [r6, #2]
   15a4e:	f043 0301 	orr.w	r3, r3, #1
   15a52:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   15a54:	4640      	mov	r0, r8
   15a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   15a5a:	4611      	mov	r1, r2
   15a5c:	f7ff ff7b 	bl	15956 <sys_heap_alloc>
   15a60:	4680      	mov	r8, r0
   15a62:	e7f7      	b.n	15a54 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   15a64:	464c      	mov	r4, r9
	rew = align & -align;
   15a66:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   15a68:	2304      	movs	r3, #4
   15a6a:	e7ba      	b.n	159e2 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   15a6c:	4602      	mov	r2, r0
   15a6e:	4639      	mov	r1, r7
   15a70:	4630      	mov	r0, r6
   15a72:	f7ff fe9f 	bl	157b4 <split_chunks>
		free_list_add(h, c0);
   15a76:	4639      	mov	r1, r7
   15a78:	4630      	mov	r0, r6
   15a7a:	f7ff fee2 	bl	15842 <free_list_add>
   15a7e:	e7dc      	b.n	15a3a <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   15a80:	4622      	mov	r2, r4
   15a82:	4629      	mov	r1, r5
   15a84:	4630      	mov	r0, r6
   15a86:	f7ff fe95 	bl	157b4 <split_chunks>
		free_list_add(h, c_end);
   15a8a:	4621      	mov	r1, r4
   15a8c:	4630      	mov	r0, r6
   15a8e:	f7ff fed8 	bl	15842 <free_list_add>
   15a92:	e7da      	b.n	15a4a <sys_heap_aligned_alloc+0x90>
		return NULL;
   15a94:	f04f 0800 	mov.w	r8, #0
   15a98:	e7dc      	b.n	15a54 <sys_heap_aligned_alloc+0x9a>
   15a9a:	f04f 0800 	mov.w	r8, #0
   15a9e:	e7d9      	b.n	15a54 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   15aa0:	f04f 0800 	mov.w	r8, #0
   15aa4:	e7d6      	b.n	15a54 <sys_heap_aligned_alloc+0x9a>

00015aa6 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   15aa6:	b570      	push	{r4, r5, r6, lr}
   15aa8:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   15aaa:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   15aac:	1dc8      	adds	r0, r1, #7
   15aae:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   15ab2:	440a      	add	r2, r1
   15ab4:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   15ab8:	1a12      	subs	r2, r2, r0
   15aba:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   15abc:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   15abe:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   15ac0:	2300      	movs	r3, #0
   15ac2:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   15ac4:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   15ac8:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   15acc:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   15ad0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15ad2:	1dce      	adds	r6, r1, #7
   15ad4:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   15ad6:	e005      	b.n	15ae4 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   15ad8:	f103 0c04 	add.w	ip, r3, #4
   15adc:	2400      	movs	r4, #0
   15ade:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   15ae2:	3301      	adds	r3, #1
   15ae4:	4573      	cmp	r3, lr
   15ae6:	dbf7      	blt.n	15ad8 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15ae8:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   15aea:	b2a4      	uxth	r4, r4
   15aec:	8044      	strh	r4, [r0, #2]
   15aee:	f04f 0c00 	mov.w	ip, #0
   15af2:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15af6:	f044 0401 	orr.w	r4, r4, #1
   15afa:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   15afc:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15afe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   15b02:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   15b06:	1ca5      	adds	r5, r4, #2
   15b08:	f820 e005 	strh.w	lr, [r0, r5]
   15b0c:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   15b0e:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   15b12:	1c95      	adds	r5, r2, #2
   15b14:	f820 c005 	strh.w	ip, [r0, r5]
   15b18:	4402      	add	r2, r0
   15b1a:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15b1c:	8853      	ldrh	r3, [r2, #2]
   15b1e:	f043 0301 	orr.w	r3, r3, #1
   15b22:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   15b24:	f7ff fe8d 	bl	15842 <free_list_add>
}
   15b28:	bd70      	pop	{r4, r5, r6, pc}

00015b2a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   15b2a:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15b2e:	8b03      	ldrh	r3, [r0, #24]
   15b30:	f023 0307 	bic.w	r3, r3, #7
   15b34:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   15b36:	8303      	strh	r3, [r0, #24]
}
   15b38:	4770      	bx	lr

00015b3a <notify_monitors>:
{
   15b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b3e:	4606      	mov	r6, r0
   15b40:	460f      	mov	r7, r1
   15b42:	4690      	mov	r8, r2
	return list->head;
   15b44:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   15b46:	b121      	cbz	r1, 15b52 <notify_monitors+0x18>
	return node->next;
   15b48:	680c      	ldr	r4, [r1, #0]
   15b4a:	b13c      	cbz	r4, 15b5c <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15b4c:	b931      	cbnz	r1, 15b5c <notify_monitors+0x22>
   15b4e:	460c      	mov	r4, r1
   15b50:	e004      	b.n	15b5c <notify_monitors+0x22>
   15b52:	460c      	mov	r4, r1
   15b54:	e002      	b.n	15b5c <notify_monitors+0x22>
   15b56:	4623      	mov	r3, r4
   15b58:	4621      	mov	r1, r4
   15b5a:	461c      	mov	r4, r3
   15b5c:	b169      	cbz	r1, 15b7a <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   15b5e:	684d      	ldr	r5, [r1, #4]
   15b60:	4643      	mov	r3, r8
   15b62:	463a      	mov	r2, r7
   15b64:	4630      	mov	r0, r6
   15b66:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   15b68:	2c00      	cmp	r4, #0
   15b6a:	d0f4      	beq.n	15b56 <notify_monitors+0x1c>
	return node->next;
   15b6c:	6823      	ldr	r3, [r4, #0]
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d0f2      	beq.n	15b58 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15b72:	2c00      	cmp	r4, #0
   15b74:	d1f0      	bne.n	15b58 <notify_monitors+0x1e>
   15b76:	4623      	mov	r3, r4
   15b78:	e7ee      	b.n	15b58 <notify_monitors+0x1e>
}
   15b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015b7e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15b7e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   15b80:	f013 0307 	ands.w	r3, r3, #7
   15b84:	d103      	bne.n	15b8e <process_recheck+0x10>
	return list->head;
   15b86:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   15b88:	b10a      	cbz	r2, 15b8e <process_recheck+0x10>
		evt = EVT_START;
   15b8a:	2003      	movs	r0, #3
   15b8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   15b8e:	2b02      	cmp	r3, #2
   15b90:	d003      	beq.n	15b9a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   15b92:	2b01      	cmp	r3, #1
   15b94:	d006      	beq.n	15ba4 <process_recheck+0x26>
	int evt = EVT_NOP;
   15b96:	2000      	movs	r0, #0
   15b98:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   15b9a:	8b42      	ldrh	r2, [r0, #26]
   15b9c:	2a00      	cmp	r2, #0
   15b9e:	d1f8      	bne.n	15b92 <process_recheck+0x14>
		evt = EVT_STOP;
   15ba0:	2004      	movs	r0, #4
   15ba2:	4770      	bx	lr
   15ba4:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   15ba6:	b10b      	cbz	r3, 15bac <process_recheck+0x2e>
		evt = EVT_RESET;
   15ba8:	2005      	movs	r0, #5
}
   15baa:	4770      	bx	lr
	int evt = EVT_NOP;
   15bac:	2000      	movs	r0, #0
   15bae:	4770      	bx	lr

00015bb0 <process_complete>:
{
   15bb0:	b510      	push	{r4, lr}
   15bb2:	4604      	mov	r4, r0
   15bb4:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15bb6:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   15bb8:	2a00      	cmp	r2, #0
   15bba:	db07      	blt.n	15bcc <process_complete+0x1c>
   15bbc:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   15bc0:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   15bc2:	2a01      	cmp	r2, #1
   15bc4:	d90e      	bls.n	15be4 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   15bc6:	2b04      	cmp	r3, #4
   15bc8:	d036      	beq.n	15c38 <process_complete+0x88>
}
   15bca:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   15bcc:	e9d0 0100 	ldrd	r0, r1, [r0]
   15bd0:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   15bd4:	2300      	movs	r3, #0
   15bd6:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   15bd8:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   15bda:	2101      	movs	r1, #1
   15bdc:	4620      	mov	r0, r4
   15bde:	f7ff ffa4 	bl	15b2a <set_state>
   15be2:	e7f2      	b.n	15bca <process_complete+0x1a>
		*clients = mgr->clients;
   15be4:	e9d0 0100 	ldrd	r0, r1, [r0]
   15be8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   15bec:	2200      	movs	r2, #0
   15bee:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   15bf0:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   15bf2:	2b06      	cmp	r3, #6
   15bf4:	d11b      	bne.n	15c2e <process_complete+0x7e>
	return list->head;
   15bf6:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   15bfa:	b153      	cbz	r3, 15c12 <process_complete+0x62>
				mgr->refs += 1U;
   15bfc:	8b62      	ldrh	r2, [r4, #26]
   15bfe:	3201      	adds	r2, #1
   15c00:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   15c02:	461a      	mov	r2, r3
	return node->next;
   15c04:	681b      	ldr	r3, [r3, #0]
   15c06:	2b00      	cmp	r3, #0
   15c08:	d0f7      	beq.n	15bfa <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15c0a:	2a00      	cmp	r2, #0
   15c0c:	d1f5      	bne.n	15bfa <process_complete+0x4a>
   15c0e:	4613      	mov	r3, r2
   15c10:	e7f3      	b.n	15bfa <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   15c12:	2102      	movs	r1, #2
   15c14:	4620      	mov	r0, r4
   15c16:	f7ff ff88 	bl	15b2a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   15c1a:	4620      	mov	r0, r4
   15c1c:	f7ff ffaf 	bl	15b7e <process_recheck>
   15c20:	2800      	cmp	r0, #0
   15c22:	d0d2      	beq.n	15bca <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   15c24:	8b23      	ldrh	r3, [r4, #24]
   15c26:	f043 0320 	orr.w	r3, r3, #32
   15c2a:	8323      	strh	r3, [r4, #24]
   15c2c:	e7cd      	b.n	15bca <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   15c2e:	2100      	movs	r1, #0
   15c30:	4620      	mov	r0, r4
   15c32:	f7ff ff7a 	bl	15b2a <set_state>
   15c36:	e7f0      	b.n	15c1a <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   15c38:	2100      	movs	r1, #0
   15c3a:	f7ff ff76 	bl	15b2a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   15c3e:	4620      	mov	r0, r4
   15c40:	f7ff ff9d 	bl	15b7e <process_recheck>
   15c44:	2800      	cmp	r0, #0
   15c46:	d0c0      	beq.n	15bca <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   15c48:	8b23      	ldrh	r3, [r4, #24]
   15c4a:	f043 0320 	orr.w	r3, r3, #32
   15c4e:	8323      	strh	r3, [r4, #24]
}
   15c50:	e7bb      	b.n	15bca <process_complete+0x1a>

00015c52 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   15c52:	b150      	cbz	r0, 15c6a <validate_args+0x18>
{
   15c54:	b510      	push	{r4, lr}
   15c56:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   15c58:	b151      	cbz	r1, 15c70 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   15c5a:	1d08      	adds	r0, r1, #4
   15c5c:	f000 f8c4 	bl	15de8 <sys_notify_validate>
	if ((rv == 0)
   15c60:	b910      	cbnz	r0, 15c68 <validate_args+0x16>
	    && ((cli->notify.flags
   15c62:	68a3      	ldr	r3, [r4, #8]
   15c64:	2b03      	cmp	r3, #3
   15c66:	d806      	bhi.n	15c76 <validate_args+0x24>
}
   15c68:	bd10      	pop	{r4, pc}
		return -EINVAL;
   15c6a:	f06f 0015 	mvn.w	r0, #21
}
   15c6e:	4770      	bx	lr
		return -EINVAL;
   15c70:	f06f 0015 	mvn.w	r0, #21
   15c74:	e7f8      	b.n	15c68 <validate_args+0x16>
		rv = -EINVAL;
   15c76:	f06f 0015 	mvn.w	r0, #21
   15c7a:	e7f5      	b.n	15c68 <validate_args+0x16>

00015c7c <notify_one>:
{
   15c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c80:	4607      	mov	r7, r0
   15c82:	460c      	mov	r4, r1
   15c84:	4616      	mov	r6, r2
   15c86:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15c88:	4619      	mov	r1, r3
   15c8a:	1d20      	adds	r0, r4, #4
   15c8c:	f000 f8cb 	bl	15e26 <sys_notify_finalize>
	if (cb) {
   15c90:	b128      	cbz	r0, 15c9e <notify_one+0x22>
   15c92:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   15c94:	462b      	mov	r3, r5
   15c96:	4632      	mov	r2, r6
   15c98:	4621      	mov	r1, r4
   15c9a:	4638      	mov	r0, r7
   15c9c:	47c0      	blx	r8
}
   15c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015ca2 <notify_all>:
{
   15ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ca6:	4680      	mov	r8, r0
   15ca8:	460c      	mov	r4, r1
   15caa:	4617      	mov	r7, r2
   15cac:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   15cae:	e004      	b.n	15cba <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   15cb0:	4633      	mov	r3, r6
   15cb2:	463a      	mov	r2, r7
   15cb4:	4640      	mov	r0, r8
   15cb6:	f7ff ffe1 	bl	15c7c <notify_one>
	return list->head;
   15cba:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   15cbc:	b131      	cbz	r1, 15ccc <notify_all+0x2a>
	return node->next;
   15cbe:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   15cc0:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15cc2:	6863      	ldr	r3, [r4, #4]
   15cc4:	428b      	cmp	r3, r1
   15cc6:	d1f3      	bne.n	15cb0 <notify_all+0xe>
	list->tail = node;
   15cc8:	6065      	str	r5, [r4, #4]
}
   15cca:	e7f1      	b.n	15cb0 <notify_all+0xe>
}
   15ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015cd0 <transition_complete>:
{
   15cd0:	b508      	push	{r3, lr}
	__asm__ volatile(
   15cd2:	f04f 0c40 	mov.w	ip, #64	; 0x40
   15cd6:	f3ef 8211 	mrs	r2, BASEPRI
   15cda:	f38c 8812 	msr	BASEPRI_MAX, ip
   15cde:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   15ce2:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   15ce4:	2101      	movs	r1, #1
   15ce6:	f7f5 f83b 	bl	ad60 <process_event>
}
   15cea:	bd08      	pop	{r3, pc}

00015cec <onoff_manager_init>:
	if ((mgr == NULL)
   15cec:	4603      	mov	r3, r0
   15cee:	b170      	cbz	r0, 15d0e <onoff_manager_init+0x22>
	    || (transitions == NULL)
   15cf0:	b181      	cbz	r1, 15d14 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   15cf2:	680a      	ldr	r2, [r1, #0]
   15cf4:	b18a      	cbz	r2, 15d1a <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   15cf6:	684a      	ldr	r2, [r1, #4]
   15cf8:	b192      	cbz	r2, 15d20 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15cfa:	2000      	movs	r0, #0
   15cfc:	6018      	str	r0, [r3, #0]
   15cfe:	6058      	str	r0, [r3, #4]
   15d00:	6098      	str	r0, [r3, #8]
   15d02:	60d8      	str	r0, [r3, #12]
   15d04:	6118      	str	r0, [r3, #16]
   15d06:	6158      	str	r0, [r3, #20]
   15d08:	6198      	str	r0, [r3, #24]
   15d0a:	6119      	str	r1, [r3, #16]
	return 0;
   15d0c:	4770      	bx	lr
		return -EINVAL;
   15d0e:	f06f 0015 	mvn.w	r0, #21
   15d12:	4770      	bx	lr
   15d14:	f06f 0015 	mvn.w	r0, #21
   15d18:	4770      	bx	lr
   15d1a:	f06f 0015 	mvn.w	r0, #21
   15d1e:	4770      	bx	lr
   15d20:	f06f 0015 	mvn.w	r0, #21
}
   15d24:	4770      	bx	lr

00015d26 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15d26:	b570      	push	{r4, r5, r6, lr}
   15d28:	4605      	mov	r5, r0
   15d2a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   15d2c:	f7ff ff91 	bl	15c52 <validate_args>

	if (rv < 0) {
   15d30:	1e04      	subs	r4, r0, #0
   15d32:	db30      	blt.n	15d96 <onoff_request+0x70>
   15d34:	f04f 0340 	mov.w	r3, #64	; 0x40
   15d38:	f3ef 8211 	mrs	r2, BASEPRI
   15d3c:	f383 8812 	msr	BASEPRI_MAX, r3
   15d40:	f3bf 8f6f 	isb	sy
   15d44:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15d46:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   15d4a:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15d4e:	8b6b      	ldrh	r3, [r5, #26]
   15d50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15d54:	428b      	cmp	r3, r1
   15d56:	d02c      	beq.n	15db2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   15d58:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   15d5a:	f1bc 0f02 	cmp.w	ip, #2
   15d5e:	d008      	beq.n	15d72 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   15d60:	f1bc 0f06 	cmp.w	ip, #6
   15d64:	d819      	bhi.n	15d9a <onoff_request+0x74>
   15d66:	e8df f00c 	tbb	[pc, ip]
   15d6a:	181e      	.short	0x181e
   15d6c:	2a1e1818 	.word	0x2a1e1818
   15d70:	1e          	.byte	0x1e
   15d71:	00          	.byte	0x00
		mgr->refs += 1U;
   15d72:	3301      	adds	r3, #1
   15d74:	836b      	strh	r3, [r5, #26]
		notify = true;
   15d76:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   15d78:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   15d7a:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   15d7c:	b128      	cbz	r0, 15d8a <onoff_request+0x64>
	parent->next = child;
   15d7e:	2000      	movs	r0, #0
   15d80:	6030      	str	r0, [r6, #0]
	return list->tail;
   15d82:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   15d84:	b308      	cbz	r0, 15dca <onoff_request+0xa4>
	parent->next = child;
   15d86:	6006      	str	r6, [r0, #0]
	list->tail = node;
   15d88:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   15d8a:	bb09      	cbnz	r1, 15dd0 <onoff_request+0xaa>
	__asm__ volatile(
   15d8c:	f38e 8811 	msr	BASEPRI, lr
   15d90:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   15d94:	bb0b      	cbnz	r3, 15dda <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   15d96:	4620      	mov	r0, r4
   15d98:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   15d9a:	f06f 0404 	mvn.w	r4, #4
   15d9e:	2300      	movs	r3, #0
   15da0:	4619      	mov	r1, r3
   15da2:	4618      	mov	r0, r3
   15da4:	e7ea      	b.n	15d7c <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   15da6:	fabc f18c 	clz	r1, ip
   15daa:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   15dac:	2300      	movs	r3, #0
		add_client = true;
   15dae:	2001      	movs	r0, #1
   15db0:	e7e4      	b.n	15d7c <onoff_request+0x56>
		rv = -EAGAIN;
   15db2:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   15db6:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   15db8:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   15dba:	4618      	mov	r0, r3
   15dbc:	e7de      	b.n	15d7c <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   15dbe:	f06f 0485 	mvn.w	r4, #133	; 0x85
   15dc2:	2300      	movs	r3, #0
   15dc4:	4619      	mov	r1, r3
   15dc6:	4618      	mov	r0, r3
   15dc8:	e7d8      	b.n	15d7c <onoff_request+0x56>
   15dca:	606e      	str	r6, [r5, #4]
	list->head = node;
   15dcc:	602e      	str	r6, [r5, #0]
}
   15dce:	e7dc      	b.n	15d8a <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   15dd0:	2102      	movs	r1, #2
   15dd2:	4628      	mov	r0, r5
   15dd4:	f7f4 ffc4 	bl	ad60 <process_event>
   15dd8:	e7dd      	b.n	15d96 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   15dda:	2300      	movs	r3, #0
   15ddc:	4662      	mov	r2, ip
   15dde:	4631      	mov	r1, r6
   15de0:	4628      	mov	r0, r5
   15de2:	f7ff ff4b 	bl	15c7c <notify_one>
   15de6:	e7d6      	b.n	15d96 <onoff_request+0x70>

00015de8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   15de8:	4602      	mov	r2, r0
   15dea:	b1b0      	cbz	r0, 15e1a <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15dec:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15dee:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   15df2:	2b02      	cmp	r3, #2
   15df4:	d00b      	beq.n	15e0e <sys_notify_validate+0x26>
   15df6:	2b03      	cmp	r3, #3
   15df8:	d004      	beq.n	15e04 <sys_notify_validate+0x1c>
   15dfa:	2b01      	cmp	r3, #1
   15dfc:	d004      	beq.n	15e08 <sys_notify_validate+0x20>
   15dfe:	f06f 0015 	mvn.w	r0, #21
   15e02:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   15e04:	6803      	ldr	r3, [r0, #0]
   15e06:	b15b      	cbz	r3, 15e20 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   15e08:	2000      	movs	r0, #0
   15e0a:	6090      	str	r0, [r2, #8]
   15e0c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   15e0e:	6803      	ldr	r3, [r0, #0]
   15e10:	2b00      	cmp	r3, #0
   15e12:	d1f9      	bne.n	15e08 <sys_notify_validate+0x20>
			rv = -EINVAL;
   15e14:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   15e18:	4770      	bx	lr
		return -EINVAL;
   15e1a:	f06f 0015 	mvn.w	r0, #21
   15e1e:	4770      	bx	lr
			rv = -EINVAL;
   15e20:	f06f 0015 	mvn.w	r0, #21
   15e24:	4770      	bx	lr

00015e26 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   15e26:	b510      	push	{r4, lr}
   15e28:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15e2a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15e2c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   15e30:	6081      	str	r1, [r0, #8]
	switch (method) {
   15e32:	2a02      	cmp	r2, #2
   15e34:	d004      	beq.n	15e40 <sys_notify_finalize+0x1a>
   15e36:	2a03      	cmp	r2, #3
   15e38:	d105      	bne.n	15e46 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   15e3a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   15e3c:	2000      	movs	r0, #0
		break;
   15e3e:	e004      	b.n	15e4a <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   15e40:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   15e42:	2400      	movs	r4, #0
		break;
   15e44:	e001      	b.n	15e4a <sys_notify_finalize+0x24>
	switch (method) {
   15e46:	2400      	movs	r4, #0
   15e48:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   15e4a:	2200      	movs	r2, #0
   15e4c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   15e4e:	b108      	cbz	r0, 15e54 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15e50:	f7ff fac8 	bl	153e4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15e54:	4620      	mov	r0, r4
   15e56:	bd10      	pop	{r4, pc}

00015e58 <extract_decimal>:
{
   15e58:	4684      	mov	ip, r0
	const char *sp = *str;
   15e5a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   15e5c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
   15e5e:	e006      	b.n	15e6e <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   15e60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15e64:	3201      	adds	r2, #1
   15e66:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   15e6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   15e6e:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   15e70:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15e74:	2909      	cmp	r1, #9
   15e76:	d9f3      	bls.n	15e60 <extract_decimal+0x8>
	*str = sp;
   15e78:	f8cc 2000 	str.w	r2, [ip]
}
   15e7c:	4770      	bx	lr

00015e7e <extract_width>:
{
   15e7e:	b530      	push	{r4, r5, lr}
   15e80:	b083      	sub	sp, #12
   15e82:	4604      	mov	r4, r0
   15e84:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   15e86:	7803      	ldrb	r3, [r0, #0]
   15e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15e8c:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   15e8e:	460d      	mov	r5, r1
   15e90:	780b      	ldrb	r3, [r1, #0]
   15e92:	2b2a      	cmp	r3, #42	; 0x2a
   15e94:	d018      	beq.n	15ec8 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   15e96:	a801      	add	r0, sp, #4
   15e98:	f7ff ffde 	bl	15e58 <extract_decimal>
	if (sp != wp) {
   15e9c:	9b01      	ldr	r3, [sp, #4]
   15e9e:	429d      	cmp	r5, r3
   15ea0:	d00f      	beq.n	15ec2 <extract_width+0x44>
		conv->width_present = true;
   15ea2:	7823      	ldrb	r3, [r4, #0]
   15ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15ea8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   15eaa:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   15eac:	b2db      	uxtb	r3, r3
   15eae:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   15eb2:	2800      	cmp	r0, #0
   15eb4:	db10      	blt.n	15ed8 <extract_width+0x5a>
   15eb6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   15eb8:	4313      	orrs	r3, r2
   15eba:	7822      	ldrb	r2, [r4, #0]
   15ebc:	f363 0241 	bfi	r2, r3, #1, #1
   15ec0:	7022      	strb	r2, [r4, #0]
	return sp;
   15ec2:	9801      	ldr	r0, [sp, #4]
}
   15ec4:	b003      	add	sp, #12
   15ec6:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   15ec8:	7843      	ldrb	r3, [r0, #1]
   15eca:	f043 0301 	orr.w	r3, r3, #1
   15ece:	7043      	strb	r3, [r0, #1]
		return ++sp;
   15ed0:	4608      	mov	r0, r1
   15ed2:	3001      	adds	r0, #1
   15ed4:	9001      	str	r0, [sp, #4]
   15ed6:	e7f5      	b.n	15ec4 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   15ed8:	2201      	movs	r2, #1
   15eda:	e7ed      	b.n	15eb8 <extract_width+0x3a>

00015edc <extract_prec>:
{
   15edc:	b510      	push	{r4, lr}
   15ede:	b082      	sub	sp, #8
   15ee0:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   15ee2:	780b      	ldrb	r3, [r1, #0]
   15ee4:	2b2e      	cmp	r3, #46	; 0x2e
   15ee6:	bf14      	ite	ne
   15ee8:	2300      	movne	r3, #0
   15eea:	2301      	moveq	r3, #1
   15eec:	7842      	ldrb	r2, [r0, #1]
   15eee:	f363 0241 	bfi	r2, r3, #1, #1
   15ef2:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   15ef4:	b1c3      	cbz	r3, 15f28 <extract_prec+0x4c>
   15ef6:	4604      	mov	r4, r0
	++sp;
   15ef8:	9b01      	ldr	r3, [sp, #4]
   15efa:	1c5a      	adds	r2, r3, #1
   15efc:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   15efe:	785b      	ldrb	r3, [r3, #1]
   15f00:	2b2a      	cmp	r3, #42	; 0x2a
   15f02:	d013      	beq.n	15f2c <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   15f04:	a801      	add	r0, sp, #4
   15f06:	f7ff ffa7 	bl	15e58 <extract_decimal>
	conv->prec_value = prec;
   15f0a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   15f0c:	7823      	ldrb	r3, [r4, #0]
   15f0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   15f12:	2800      	cmp	r0, #0
   15f14:	db12      	blt.n	15f3c <extract_prec+0x60>
   15f16:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   15f18:	4313      	orrs	r3, r2
   15f1a:	7822      	ldrb	r2, [r4, #0]
   15f1c:	f363 0241 	bfi	r2, r3, #1, #1
   15f20:	7022      	strb	r2, [r4, #0]
	return sp;
   15f22:	9801      	ldr	r0, [sp, #4]
}
   15f24:	b002      	add	sp, #8
   15f26:	bd10      	pop	{r4, pc}
		return sp;
   15f28:	4608      	mov	r0, r1
   15f2a:	e7fb      	b.n	15f24 <extract_prec+0x48>
		conv->prec_star = true;
   15f2c:	7843      	ldrb	r3, [r0, #1]
   15f2e:	f043 0304 	orr.w	r3, r3, #4
   15f32:	7043      	strb	r3, [r0, #1]
		return ++sp;
   15f34:	4610      	mov	r0, r2
   15f36:	3001      	adds	r0, #1
   15f38:	9001      	str	r0, [sp, #4]
   15f3a:	e7f3      	b.n	15f24 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   15f3c:	2201      	movs	r2, #1
   15f3e:	e7eb      	b.n	15f18 <extract_prec+0x3c>

00015f40 <extract_length>:
{
   15f40:	4602      	mov	r2, r0
	switch (*sp) {
   15f42:	780b      	ldrb	r3, [r1, #0]
   15f44:	3b4c      	subs	r3, #76	; 0x4c
   15f46:	2b2e      	cmp	r3, #46	; 0x2e
   15f48:	d85b      	bhi.n	16002 <extract_length+0xc2>
   15f4a:	e8df f003 	tbb	[pc, r3]
   15f4e:	5a4f      	.short	0x5a4f
   15f50:	5a5a5a5a 	.word	0x5a5a5a5a
   15f54:	5a5a5a5a 	.word	0x5a5a5a5a
   15f58:	5a5a5a5a 	.word	0x5a5a5a5a
   15f5c:	5a5a5a5a 	.word	0x5a5a5a5a
   15f60:	5a5a5a5a 	.word	0x5a5a5a5a
   15f64:	5a5a5a5a 	.word	0x5a5a5a5a
   15f68:	5a185a5a 	.word	0x5a185a5a
   15f6c:	5a295a3a 	.word	0x5a295a3a
   15f70:	5a5a5a5a 	.word	0x5a5a5a5a
   15f74:	5a485a5a 	.word	0x5a485a5a
   15f78:	5a5a5a5a 	.word	0x5a5a5a5a
   15f7c:	41          	.byte	0x41
   15f7d:	00          	.byte	0x00
		if (*++sp == 'h') {
   15f7e:	1c48      	adds	r0, r1, #1
   15f80:	784b      	ldrb	r3, [r1, #1]
   15f82:	2b68      	cmp	r3, #104	; 0x68
   15f84:	d005      	beq.n	15f92 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   15f86:	7853      	ldrb	r3, [r2, #1]
   15f88:	2102      	movs	r1, #2
   15f8a:	f361 03c6 	bfi	r3, r1, #3, #4
   15f8e:	7053      	strb	r3, [r2, #1]
   15f90:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   15f92:	7853      	ldrb	r3, [r2, #1]
   15f94:	2001      	movs	r0, #1
   15f96:	f360 03c6 	bfi	r3, r0, #3, #4
   15f9a:	7053      	strb	r3, [r2, #1]
			++sp;
   15f9c:	1c88      	adds	r0, r1, #2
   15f9e:	4770      	bx	lr
		if (*++sp == 'l') {
   15fa0:	1c48      	adds	r0, r1, #1
   15fa2:	784b      	ldrb	r3, [r1, #1]
   15fa4:	2b6c      	cmp	r3, #108	; 0x6c
   15fa6:	d005      	beq.n	15fb4 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   15fa8:	7853      	ldrb	r3, [r2, #1]
   15faa:	2103      	movs	r1, #3
   15fac:	f361 03c6 	bfi	r3, r1, #3, #4
   15fb0:	7053      	strb	r3, [r2, #1]
   15fb2:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   15fb4:	7853      	ldrb	r3, [r2, #1]
   15fb6:	2004      	movs	r0, #4
   15fb8:	f360 03c6 	bfi	r3, r0, #3, #4
   15fbc:	7053      	strb	r3, [r2, #1]
			++sp;
   15fbe:	1c88      	adds	r0, r1, #2
   15fc0:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   15fc2:	7853      	ldrb	r3, [r2, #1]
   15fc4:	2005      	movs	r0, #5
   15fc6:	f360 03c6 	bfi	r3, r0, #3, #4
   15fca:	7053      	strb	r3, [r2, #1]
		++sp;
   15fcc:	1c48      	adds	r0, r1, #1
		break;
   15fce:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   15fd0:	7853      	ldrb	r3, [r2, #1]
   15fd2:	2006      	movs	r0, #6
   15fd4:	f360 03c6 	bfi	r3, r0, #3, #4
   15fd8:	7053      	strb	r3, [r2, #1]
		++sp;
   15fda:	1c48      	adds	r0, r1, #1
		break;
   15fdc:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   15fde:	7853      	ldrb	r3, [r2, #1]
   15fe0:	2007      	movs	r0, #7
   15fe2:	f360 03c6 	bfi	r3, r0, #3, #4
   15fe6:	7053      	strb	r3, [r2, #1]
		++sp;
   15fe8:	1c48      	adds	r0, r1, #1
		break;
   15fea:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   15fec:	7853      	ldrb	r3, [r2, #1]
   15fee:	2008      	movs	r0, #8
   15ff0:	f360 03c6 	bfi	r3, r0, #3, #4
   15ff4:	7053      	strb	r3, [r2, #1]
		++sp;
   15ff6:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   15ff8:	7813      	ldrb	r3, [r2, #0]
   15ffa:	f043 0302 	orr.w	r3, r3, #2
   15ffe:	7013      	strb	r3, [r2, #0]
		break;
   16000:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   16002:	7853      	ldrb	r3, [r2, #1]
   16004:	f36f 03c6 	bfc	r3, #3, #4
   16008:	7053      	strb	r3, [r2, #1]
		break;
   1600a:	4608      	mov	r0, r1
}
   1600c:	4770      	bx	lr

0001600e <extract_specifier>:
{
   1600e:	b500      	push	{lr}
   16010:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   16012:	4608      	mov	r0, r1
   16014:	f810 3b01 	ldrb.w	r3, [r0], #1
   16018:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   1601a:	2b78      	cmp	r3, #120	; 0x78
   1601c:	d817      	bhi.n	1604e <extract_specifier+0x40>
   1601e:	2b6e      	cmp	r3, #110	; 0x6e
   16020:	d229      	bcs.n	16076 <extract_specifier+0x68>
   16022:	2b69      	cmp	r3, #105	; 0x69
   16024:	d813      	bhi.n	1604e <extract_specifier+0x40>
   16026:	2b58      	cmp	r3, #88	; 0x58
   16028:	d317      	bcc.n	1605a <extract_specifier+0x4c>
   1602a:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   1602e:	fa5f fc8c 	uxtb.w	ip, ip
   16032:	2101      	movs	r1, #1
   16034:	fa01 f10c 	lsl.w	r1, r1, ip
   16038:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1603c:	d114      	bne.n	16068 <extract_specifier+0x5a>
   1603e:	f640 0c01 	movw	ip, #2049	; 0x801
   16042:	ea11 0f0c 	tst.w	r1, ip
   16046:	d155      	bne.n	160f4 <extract_specifier+0xe6>
   16048:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1604c:	d13a      	bne.n	160c4 <extract_specifier+0xb6>
		conv->invalid = true;
   1604e:	7813      	ldrb	r3, [r2, #0]
   16050:	f043 0301 	orr.w	r3, r3, #1
   16054:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   16056:	2100      	movs	r1, #0
		break;
   16058:	e042      	b.n	160e0 <extract_specifier+0xd2>
	switch (conv->specifier) {
   1605a:	2b41      	cmp	r3, #65	; 0x41
   1605c:	d004      	beq.n	16068 <extract_specifier+0x5a>
   1605e:	d3f6      	bcc.n	1604e <extract_specifier+0x40>
   16060:	3b45      	subs	r3, #69	; 0x45
   16062:	b2db      	uxtb	r3, r3
   16064:	2b02      	cmp	r3, #2
   16066:	d8f2      	bhi.n	1604e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   16068:	7893      	ldrb	r3, [r2, #2]
   1606a:	2104      	movs	r1, #4
   1606c:	f361 0302 	bfi	r3, r1, #0, #3
   16070:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   16072:	2101      	movs	r1, #1
			break;
   16074:	e034      	b.n	160e0 <extract_specifier+0xd2>
	switch (conv->specifier) {
   16076:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   1607a:	b2c9      	uxtb	r1, r1
   1607c:	f04f 0c01 	mov.w	ip, #1
   16080:	fa0c fc01 	lsl.w	ip, ip, r1
   16084:	f240 4182 	movw	r1, #1154	; 0x482
   16088:	ea1c 0f01 	tst.w	ip, r1
   1608c:	bf14      	ite	ne
   1608e:	f04f 0e01 	movne.w	lr, #1
   16092:	f04f 0e00 	moveq.w	lr, #0
   16096:	d12d      	bne.n	160f4 <extract_specifier+0xe6>
   16098:	f01c 0f24 	tst.w	ip, #36	; 0x24
   1609c:	bf14      	ite	ne
   1609e:	2101      	movne	r1, #1
   160a0:	2100      	moveq	r1, #0
   160a2:	d139      	bne.n	16118 <extract_specifier+0x10a>
   160a4:	f01c 0c01 	ands.w	ip, ip, #1
   160a8:	d0d1      	beq.n	1604e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   160aa:	7893      	ldrb	r3, [r2, #2]
   160ac:	f04f 0e03 	mov.w	lr, #3
   160b0:	f36e 0302 	bfi	r3, lr, #0, #3
   160b4:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   160b6:	7853      	ldrb	r3, [r2, #1]
   160b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   160bc:	2b40      	cmp	r3, #64	; 0x40
   160be:	d10f      	bne.n	160e0 <extract_specifier+0xd2>
			unsupported = true;
   160c0:	4661      	mov	r1, ip
   160c2:	e00d      	b.n	160e0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   160c4:	7891      	ldrb	r1, [r2, #2]
   160c6:	f04f 0c01 	mov.w	ip, #1
   160ca:	f36c 0102 	bfi	r1, ip, #0, #3
   160ce:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   160d0:	7851      	ldrb	r1, [r2, #1]
   160d2:	f001 0178 	and.w	r1, r1, #120	; 0x78
   160d6:	2940      	cmp	r1, #64	; 0x40
   160d8:	d013      	beq.n	16102 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   160da:	2b63      	cmp	r3, #99	; 0x63
   160dc:	d018      	beq.n	16110 <extract_specifier+0x102>
	bool unsupported = false;
   160de:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   160e0:	7813      	ldrb	r3, [r2, #0]
   160e2:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   160e6:	ea41 010c 	orr.w	r1, r1, ip
   160ea:	f361 0341 	bfi	r3, r1, #1, #1
   160ee:	7013      	strb	r3, [r2, #0]
}
   160f0:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   160f4:	7891      	ldrb	r1, [r2, #2]
   160f6:	f04f 0c02 	mov.w	ip, #2
   160fa:	f36c 0102 	bfi	r1, ip, #0, #3
   160fe:	7091      	strb	r1, [r2, #2]
   16100:	e7e6      	b.n	160d0 <extract_specifier+0xc2>
			conv->invalid = true;
   16102:	f892 c000 	ldrb.w	ip, [r2]
   16106:	f04c 0c01 	orr.w	ip, ip, #1
   1610a:	f882 c000 	strb.w	ip, [r2]
   1610e:	e7e4      	b.n	160da <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   16110:	3900      	subs	r1, #0
   16112:	bf18      	it	ne
   16114:	2101      	movne	r1, #1
   16116:	e7e3      	b.n	160e0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   16118:	7893      	ldrb	r3, [r2, #2]
   1611a:	f04f 0c03 	mov.w	ip, #3
   1611e:	f36c 0302 	bfi	r3, ip, #0, #3
   16122:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   16124:	7853      	ldrb	r3, [r2, #1]
   16126:	f013 0f78 	tst.w	r3, #120	; 0x78
   1612a:	d1d9      	bne.n	160e0 <extract_specifier+0xd2>
	bool unsupported = false;
   1612c:	4671      	mov	r1, lr
   1612e:	e7d7      	b.n	160e0 <extract_specifier+0xd2>

00016130 <extract_conversion>:
{
   16130:	b510      	push	{r4, lr}
   16132:	4604      	mov	r4, r0
   16134:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   16136:	2300      	movs	r3, #0
   16138:	6023      	str	r3, [r4, #0]
   1613a:	6063      	str	r3, [r4, #4]
   1613c:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   1613e:	784b      	ldrb	r3, [r1, #1]
   16140:	2b25      	cmp	r3, #37	; 0x25
   16142:	d014      	beq.n	1616e <extract_conversion+0x3e>
   16144:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   16146:	4620      	mov	r0, r4
   16148:	f7f4 fec0 	bl	aecc <extract_flags>
   1614c:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   1614e:	4620      	mov	r0, r4
   16150:	f7ff fe95 	bl	15e7e <extract_width>
   16154:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   16156:	4620      	mov	r0, r4
   16158:	f7ff fec0 	bl	15edc <extract_prec>
   1615c:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   1615e:	4620      	mov	r0, r4
   16160:	f7ff feee 	bl	15f40 <extract_length>
   16164:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   16166:	4620      	mov	r0, r4
   16168:	f7ff ff51 	bl	1600e <extract_specifier>
}
   1616c:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   1616e:	3002      	adds	r0, #2
   16170:	70e3      	strb	r3, [r4, #3]
		return sp;
   16172:	e7fb      	b.n	1616c <extract_conversion+0x3c>

00016174 <conversion_radix>:
	switch (specifier) {
   16174:	286f      	cmp	r0, #111	; 0x6f
   16176:	d00c      	beq.n	16192 <conversion_radix+0x1e>
   16178:	d905      	bls.n	16186 <conversion_radix+0x12>
   1617a:	2870      	cmp	r0, #112	; 0x70
   1617c:	d00b      	beq.n	16196 <conversion_radix+0x22>
   1617e:	2878      	cmp	r0, #120	; 0x78
   16180:	d10b      	bne.n	1619a <conversion_radix+0x26>
		return 16;
   16182:	2010      	movs	r0, #16
   16184:	4770      	bx	lr
	switch (specifier) {
   16186:	2858      	cmp	r0, #88	; 0x58
   16188:	d001      	beq.n	1618e <conversion_radix+0x1a>
   1618a:	200a      	movs	r0, #10
   1618c:	4770      	bx	lr
		return 16;
   1618e:	2010      	movs	r0, #16
   16190:	4770      	bx	lr
		return 8;
   16192:	2008      	movs	r0, #8
   16194:	4770      	bx	lr
		return 16;
   16196:	2010      	movs	r0, #16
   16198:	4770      	bx	lr
	switch (specifier) {
   1619a:	200a      	movs	r0, #10
}
   1619c:	4770      	bx	lr

0001619e <encode_uint>:
{
   1619e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161a2:	4605      	mov	r5, r0
   161a4:	460c      	mov	r4, r1
   161a6:	4693      	mov	fp, r2
   161a8:	4699      	mov	r9, r3
   161aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   161ac:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   161ae:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   161b2:	f7ff ffdf 	bl	16174 <conversion_radix>
   161b6:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   161b8:	e015      	b.n	161e6 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   161ba:	f1ba 0f19 	cmp.w	sl, #25
   161be:	d820      	bhi.n	16202 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   161c0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   161c2:	3237      	adds	r2, #55	; 0x37
   161c4:	b2d2      	uxtb	r2, r2
   161c6:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   161ca:	4632      	mov	r2, r6
   161cc:	4643      	mov	r3, r8
   161ce:	4628      	mov	r0, r5
   161d0:	4621      	mov	r1, r4
   161d2:	f7e9 ff83 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   161d6:	42b5      	cmp	r5, r6
   161d8:	f174 0400 	sbcs.w	r4, r4, #0
   161dc:	d315      	bcc.n	1620a <encode_uint+0x6c>
   161de:	454f      	cmp	r7, r9
   161e0:	d913      	bls.n	1620a <encode_uint+0x6c>
		value /= radix;
   161e2:	4605      	mov	r5, r0
   161e4:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   161e6:	f04f 0800 	mov.w	r8, #0
   161ea:	4632      	mov	r2, r6
   161ec:	4643      	mov	r3, r8
   161ee:	4628      	mov	r0, r5
   161f0:	4621      	mov	r1, r4
   161f2:	f7e9 ff73 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   161f6:	2a09      	cmp	r2, #9
   161f8:	d8df      	bhi.n	161ba <encode_uint+0x1c>
   161fa:	b2d2      	uxtb	r2, r2
   161fc:	3230      	adds	r2, #48	; 0x30
   161fe:	b2d2      	uxtb	r2, r2
   16200:	e7e1      	b.n	161c6 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   16202:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16204:	3257      	adds	r2, #87	; 0x57
   16206:	b2d2      	uxtb	r2, r2
   16208:	e7dd      	b.n	161c6 <encode_uint+0x28>
	if (conv->flag_hash) {
   1620a:	f89b 3000 	ldrb.w	r3, [fp]
   1620e:	f013 0f20 	tst.w	r3, #32
   16212:	d003      	beq.n	1621c <encode_uint+0x7e>
		if (radix == 8) {
   16214:	2e08      	cmp	r6, #8
   16216:	d004      	beq.n	16222 <encode_uint+0x84>
		} else if (radix == 16) {
   16218:	2e10      	cmp	r6, #16
   1621a:	d009      	beq.n	16230 <encode_uint+0x92>
}
   1621c:	4638      	mov	r0, r7
   1621e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   16222:	f89b 3002 	ldrb.w	r3, [fp, #2]
   16226:	f043 0308 	orr.w	r3, r3, #8
   1622a:	f88b 3002 	strb.w	r3, [fp, #2]
   1622e:	e7f5      	b.n	1621c <encode_uint+0x7e>
			conv->altform_0c = true;
   16230:	f89b 3002 	ldrb.w	r3, [fp, #2]
   16234:	f043 0310 	orr.w	r3, r3, #16
   16238:	f88b 3002 	strb.w	r3, [fp, #2]
   1623c:	e7ee      	b.n	1621c <encode_uint+0x7e>

0001623e <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   1623e:	7843      	ldrb	r3, [r0, #1]
   16240:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   16244:	2b07      	cmp	r3, #7
   16246:	d818      	bhi.n	1627a <store_count+0x3c>
   16248:	e8df f003 	tbb	[pc, r3]
   1624c:	0a080604 	.word	0x0a080604
   16250:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   16254:	600a      	str	r2, [r1, #0]
		break;
   16256:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   16258:	700a      	strb	r2, [r1, #0]
		break;
   1625a:	4770      	bx	lr
		*(short *)dp = (short)count;
   1625c:	800a      	strh	r2, [r1, #0]
		break;
   1625e:	4770      	bx	lr
		*(long *)dp = (long)count;
   16260:	600a      	str	r2, [r1, #0]
		break;
   16262:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   16264:	17d3      	asrs	r3, r2, #31
   16266:	600a      	str	r2, [r1, #0]
   16268:	604b      	str	r3, [r1, #4]
		break;
   1626a:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   1626c:	17d3      	asrs	r3, r2, #31
   1626e:	600a      	str	r2, [r1, #0]
   16270:	604b      	str	r3, [r1, #4]
		break;
   16272:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   16274:	600a      	str	r2, [r1, #0]
		break;
   16276:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   16278:	600a      	str	r2, [r1, #0]
}
   1627a:	4770      	bx	lr

0001627c <outs>:
{
   1627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16280:	4607      	mov	r7, r0
   16282:	460e      	mov	r6, r1
   16284:	4614      	mov	r4, r2
   16286:	4698      	mov	r8, r3
	size_t count = 0;
   16288:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1628a:	e006      	b.n	1629a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   1628c:	4631      	mov	r1, r6
   1628e:	f814 0b01 	ldrb.w	r0, [r4], #1
   16292:	47b8      	blx	r7
		if (rc < 0) {
   16294:	2800      	cmp	r0, #0
   16296:	db09      	blt.n	162ac <outs+0x30>
		++count;
   16298:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1629a:	4544      	cmp	r4, r8
   1629c:	d3f6      	bcc.n	1628c <outs+0x10>
   1629e:	f1b8 0f00 	cmp.w	r8, #0
   162a2:	d102      	bne.n	162aa <outs+0x2e>
   162a4:	7823      	ldrb	r3, [r4, #0]
   162a6:	2b00      	cmp	r3, #0
   162a8:	d1f0      	bne.n	1628c <outs+0x10>
	return (int)count;
   162aa:	4628      	mov	r0, r5
}
   162ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000162b0 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   162b0:	b40f      	push	{r0, r1, r2, r3}
   162b2:	b500      	push	{lr}
   162b4:	b083      	sub	sp, #12
   162b6:	a904      	add	r1, sp, #16
   162b8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   162bc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   162be:	f7ff fa05 	bl	156cc <vprintk>

	va_end(ap);
}
   162c2:	b003      	add	sp, #12
   162c4:	f85d eb04 	ldr.w	lr, [sp], #4
   162c8:	b004      	add	sp, #16
   162ca:	4770      	bx	lr

000162cc <free_space>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL) {
   162cc:	6903      	ldr	r3, [r0, #16]
   162ce:	f013 0f08 	tst.w	r3, #8
   162d2:	d108      	bne.n	162e6 <free_space+0x1a>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   162d4:	68c3      	ldr	r3, [r0, #12]
   162d6:	6802      	ldr	r2, [r0, #0]
   162d8:	4293      	cmp	r3, r2
   162da:	d807      	bhi.n	162ec <free_space+0x20>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   162dc:	6a03      	ldr	r3, [r0, #32]
   162de:	1a9b      	subs	r3, r3, r2
   162e0:	600b      	str	r3, [r1, #0]

	return true;
   162e2:	2001      	movs	r0, #1
}
   162e4:	4770      	bx	lr
		*res = 0;
   162e6:	2000      	movs	r0, #0
   162e8:	6008      	str	r0, [r1, #0]
		return false;
   162ea:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   162ec:	1a9b      	subs	r3, r3, r2
   162ee:	600b      	str	r3, [r1, #0]
		return false;
   162f0:	2000      	movs	r0, #0
   162f2:	4770      	bx	lr

000162f4 <available>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   162f4:	6903      	ldr	r3, [r0, #16]
   162f6:	f013 0f08 	tst.w	r3, #8
   162fa:	d107      	bne.n	1630c <available+0x18>
   162fc:	6882      	ldr	r2, [r0, #8]
   162fe:	6843      	ldr	r3, [r0, #4]
   16300:	429a      	cmp	r2, r3
   16302:	d803      	bhi.n	1630c <available+0x18>
		*res = buffer->size - buffer->tmp_rd_idx;
		return true;
	}

	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   16304:	1a9b      	subs	r3, r3, r2
   16306:	600b      	str	r3, [r1, #0]

	return false;
   16308:	2000      	movs	r0, #0
}
   1630a:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_rd_idx;
   1630c:	6a03      	ldr	r3, [r0, #32]
   1630e:	6882      	ldr	r2, [r0, #8]
   16310:	1a9b      	subs	r3, r3, r2
   16312:	600b      	str	r3, [r1, #0]
		return true;
   16314:	2001      	movs	r0, #1
   16316:	4770      	bx	lr

00016318 <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   16318:	b510      	push	{r4, lr}
   1631a:	b082      	sub	sp, #8
   1631c:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   1631e:	a901      	add	r1, sp, #4
   16320:	f7ff ffd4 	bl	162cc <free_space>
   16324:	b120      	cbz	r0, 16330 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   16326:	68e3      	ldr	r3, [r4, #12]
   16328:	9a01      	ldr	r2, [sp, #4]
   1632a:	4413      	add	r3, r2
   1632c:	3b01      	subs	r3, #1
   1632e:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   16330:	6a20      	ldr	r0, [r4, #32]
   16332:	9b01      	ldr	r3, [sp, #4]
   16334:	1ac0      	subs	r0, r0, r3
}
   16336:	3801      	subs	r0, #1
   16338:	b002      	add	sp, #8
   1633a:	bd10      	pop	{r4, pc}

0001633c <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   1633c:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1633e:	6903      	ldr	r3, [r0, #16]
   16340:	f013 0f04 	tst.w	r3, #4
   16344:	d100      	bne.n	16348 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   16346:	bd38      	pop	{r3, r4, r5, pc}
   16348:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1634a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1634c:	f7ff ffe4 	bl	16318 <get_usage>
   16350:	4285      	cmp	r5, r0
   16352:	d902      	bls.n	1635a <max_utilization_update+0x1e>
   16354:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16356:	6260      	str	r0, [r4, #36]	; 0x24
   16358:	e7f5      	b.n	16346 <max_utilization_update+0xa>
   1635a:	4620      	mov	r0, r4
   1635c:	f7ff ffdc 	bl	16318 <get_usage>
   16360:	e7f9      	b.n	16356 <max_utilization_update+0x1a>

00016362 <rd_idx_inc>:
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   16362:	68c3      	ldr	r3, [r0, #12]
	uint32_t i = idx + val;
   16364:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16366:	6903      	ldr	r3, [r0, #16]
   16368:	f013 0f01 	tst.w	r3, #1
   1636c:	d104      	bne.n	16378 <rd_idx_inc+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
   1636e:	6a02      	ldr	r2, [r0, #32]
   16370:	4291      	cmp	r1, r2
   16372:	d304      	bcc.n	1637e <rd_idx_inc+0x1c>
   16374:	1a89      	subs	r1, r1, r2
   16376:	e002      	b.n	1637e <rd_idx_inc+0x1c>
		return i & (buffer->size - 1);
   16378:	6a02      	ldr	r2, [r0, #32]
   1637a:	3a01      	subs	r2, #1
   1637c:	4011      	ands	r1, r2
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1637e:	60c1      	str	r1, [r0, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   16380:	f023 0308 	bic.w	r3, r3, #8
   16384:	6103      	str	r3, [r0, #16]
}
   16386:	4770      	bx	lr

00016388 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   16388:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   1638a:	2300      	movs	r3, #0
   1638c:	f36f 0300 	bfc	r3, #0, #1
   16390:	f043 0302 	orr.w	r3, r3, #2
   16394:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   16398:	69c2      	ldr	r2, [r0, #28]
   1639a:	6804      	ldr	r4, [r0, #0]
   1639c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   163a0:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   163a2:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   163a4:	6902      	ldr	r2, [r0, #16]
   163a6:	f012 0f01 	tst.w	r2, #1
   163aa:	d104      	bne.n	163b6 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   163ac:	6a04      	ldr	r4, [r0, #32]
   163ae:	42a3      	cmp	r3, r4
   163b0:	d304      	bcc.n	163bc <add_skip_item+0x34>
   163b2:	1b1b      	subs	r3, r3, r4
   163b4:	e002      	b.n	163bc <add_skip_item+0x34>
		return i & (buffer->size - 1);
   163b6:	6a04      	ldr	r4, [r0, #32]
   163b8:	3c01      	subs	r4, #1
   163ba:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   163bc:	6003      	str	r3, [r0, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   163be:	68c4      	ldr	r4, [r0, #12]
   163c0:	429c      	cmp	r4, r3
   163c2:	d00a      	beq.n	163da <add_skip_item+0x52>
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   163c4:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   163c6:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   163c8:	6903      	ldr	r3, [r0, #16]
   163ca:	f013 0f01 	tst.w	r3, #1
   163ce:	d108      	bne.n	163e2 <add_skip_item+0x5a>
	return (i >= buffer->size) ? i - buffer->size : i;
   163d0:	6a03      	ldr	r3, [r0, #32]
   163d2:	4299      	cmp	r1, r3
   163d4:	d308      	bcc.n	163e8 <add_skip_item+0x60>
   163d6:	1ac9      	subs	r1, r1, r3
   163d8:	e006      	b.n	163e8 <add_skip_item+0x60>
		buffer->flags |= MPSC_PBUF_FULL;
   163da:	f042 0208 	orr.w	r2, r2, #8
   163de:	6102      	str	r2, [r0, #16]
   163e0:	e7f0      	b.n	163c4 <add_skip_item+0x3c>
		return i & (buffer->size - 1);
   163e2:	6a03      	ldr	r3, [r0, #32]
   163e4:	3b01      	subs	r3, #1
   163e6:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   163e8:	6041      	str	r1, [r0, #4]
}
   163ea:	bc10      	pop	{r4}
   163ec:	4770      	bx	lr

000163ee <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   163ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163f2:	b083      	sub	sp, #12
   163f4:	4604      	mov	r4, r0
   163f6:	9101      	str	r1, [sp, #4]
   163f8:	4617      	mov	r7, r2
   163fa:	4698      	mov	r8, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   163fc:	69c5      	ldr	r5, [r0, #28]
   163fe:	68c6      	ldr	r6, [r0, #12]
   16400:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   16404:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   16408:	f003 0303 	and.w	r3, r3, #3
   1640c:	2b02      	cmp	r3, #2
   1640e:	d024      	beq.n	1645a <drop_item_locked+0x6c>
	return 0;
   16410:	2100      	movs	r1, #0
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   16412:	2300      	movs	r3, #0
   16414:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
   16416:	f8c8 3000 	str.w	r3, [r8]

	if (skip_wlen) {
   1641a:	bb19      	cbnz	r1, 16464 <drop_item_locked+0x76>
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   1641c:	6923      	ldr	r3, [r4, #16]
   1641e:	f013 0f02 	tst.w	r3, #2
   16422:	d073      	beq.n	1650c <drop_item_locked+0x11e>
		return false;
	}

	uint32_t rd_wlen = buffer->get_wlen(item);
   16424:	69a3      	ldr	r3, [r4, #24]
   16426:	4658      	mov	r0, fp
   16428:	4798      	blx	r3
   1642a:	4682      	mov	sl, r0
	return item->hdr.valid;
   1642c:	f815 9026 	ldrb.w	r9, [r5, r6, lsl #2]

	/* If packet is busy need to be ommited. */
	if (!is_valid(item)) {
   16430:	f019 0901 	ands.w	r9, r9, #1
   16434:	d06c      	beq.n	16510 <drop_item_locked+0x122>
		return false;
	} else if (item->hdr.busy) {
   16436:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   1643a:	f013 0f02 	tst.w	r3, #2
   1643e:	d039      	beq.n	164b4 <drop_item_locked+0xc6>
		MPSC_PBUF_DBG(buffer, "no space: Found busy packet %p (len:%d)", item, rd_wlen);
		/* Add skip packet before claimed packet. */
		if (free_wlen) {
   16440:	9b01      	ldr	r3, [sp, #4]
   16442:	b9bb      	cbnz	r3, 16474 <drop_item_locked+0x86>
			add_skip_item(buffer, free_wlen);
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
		}
		/* Move all indexes forward, after claimed packet. */
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   16444:	6862      	ldr	r2, [r4, #4]
	uint32_t i = idx + val;
   16446:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16448:	6923      	ldr	r3, [r4, #16]
   1644a:	f013 0001 	ands.w	r0, r3, #1
   1644e:	d116      	bne.n	1647e <drop_item_locked+0x90>
	return (i >= buffer->size) ? i - buffer->size : i;
   16450:	6a21      	ldr	r1, [r4, #32]
   16452:	428a      	cmp	r2, r1
   16454:	d316      	bcc.n	16484 <drop_item_locked+0x96>
   16456:	1a52      	subs	r2, r2, r1
   16458:	e014      	b.n	16484 <drop_item_locked+0x96>
		return item->skip.len;
   1645a:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1645e:	f3c1 019d 	ubfx	r1, r1, #2, #30
   16462:	e7d6      	b.n	16412 <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
   16464:	4620      	mov	r0, r4
   16466:	f7ff ff7c 	bl	16362 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1646a:	68e3      	ldr	r3, [r4, #12]
   1646c:	60a3      	str	r3, [r4, #8]
		return true;
   1646e:	f04f 0901 	mov.w	r9, #1
   16472:	e04d      	b.n	16510 <drop_item_locked+0x122>
			add_skip_item(buffer, free_wlen);
   16474:	4619      	mov	r1, r3
   16476:	4620      	mov	r0, r4
   16478:	f7ff ff86 	bl	16388 <add_skip_item>
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
   1647c:	e7e2      	b.n	16444 <drop_item_locked+0x56>
		return i & (buffer->size - 1);
   1647e:	6a21      	ldr	r1, [r4, #32]
   16480:	3901      	subs	r1, #1
   16482:	400a      	ands	r2, r1
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   16484:	6062      	str	r2, [r4, #4]

		/* If allocation wrapped around the buffer and found busy packet
		 * that was already ommited, skip it again.
		 */
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16486:	68e1      	ldr	r1, [r4, #12]
   16488:	68a2      	ldr	r2, [r4, #8]
   1648a:	4291      	cmp	r1, r2
   1648c:	d006      	beq.n	1649c <drop_item_locked+0xae>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
		}

		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   1648e:	68a2      	ldr	r2, [r4, #8]
   16490:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   16492:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   16494:	f043 0308 	orr.w	r3, r3, #8
   16498:	6123      	str	r3, [r4, #16]
   1649a:	e039      	b.n	16510 <drop_item_locked+0x122>
	uint32_t i = idx + val;
   1649c:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1649e:	b920      	cbnz	r0, 164aa <drop_item_locked+0xbc>
	return (i >= buffer->size) ? i - buffer->size : i;
   164a0:	6a21      	ldr	r1, [r4, #32]
   164a2:	428a      	cmp	r2, r1
   164a4:	d304      	bcc.n	164b0 <drop_item_locked+0xc2>
   164a6:	1a52      	subs	r2, r2, r1
   164a8:	e002      	b.n	164b0 <drop_item_locked+0xc2>
		return i & (buffer->size - 1);
   164aa:	6a21      	ldr	r1, [r4, #32]
   164ac:	3901      	subs	r1, #1
   164ae:	400a      	ands	r2, r1
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   164b0:	60a2      	str	r2, [r4, #8]
   164b2:	e7ec      	b.n	1648e <drop_item_locked+0xa0>
	} else {
		/* Prepare packet dropping. */
		rd_idx_inc(buffer, rd_wlen);
   164b4:	4601      	mov	r1, r0
   164b6:	4620      	mov	r0, r4
   164b8:	f7ff ff53 	bl	16362 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   164bc:	68e3      	ldr	r3, [r4, #12]
   164be:	60a3      	str	r3, [r4, #8]
		/* Temporary move tmp_wr idx forward to ensure that packet
		 * will not be dropped twice and content will not be
		 * overwritten.
		 */
		if (free_wlen) {
   164c0:	9b01      	ldr	r3, [sp, #4]
   164c2:	b123      	cbz	r3, 164ce <drop_item_locked+0xe0>
					.valid = 0,
					.busy = 0
				}
			};

			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   164c4:	69e3      	ldr	r3, [r4, #28]
   164c6:	6822      	ldr	r2, [r4, #0]
   164c8:	2100      	movs	r1, #0
   164ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   164ce:	9b01      	ldr	r3, [sp, #4]
   164d0:	4453      	add	r3, sl
   164d2:	f8c8 3000 	str.w	r3, [r8]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   164d6:	6822      	ldr	r2, [r4, #0]
	uint32_t i = idx + val;
   164d8:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   164da:	6922      	ldr	r2, [r4, #16]
   164dc:	f012 0f01 	tst.w	r2, #1
   164e0:	d104      	bne.n	164ec <drop_item_locked+0xfe>
	return (i >= buffer->size) ? i - buffer->size : i;
   164e2:	6a21      	ldr	r1, [r4, #32]
   164e4:	428b      	cmp	r3, r1
   164e6:	d304      	bcc.n	164f2 <drop_item_locked+0x104>
   164e8:	1a5b      	subs	r3, r3, r1
   164ea:	e002      	b.n	164f2 <drop_item_locked+0x104>
		return i & (buffer->size - 1);
   164ec:	6a21      	ldr	r1, [r4, #32]
   164ee:	3901      	subs	r1, #1
   164f0:	400b      	ands	r3, r1
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   164f2:	6023      	str	r3, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   164f4:	f042 0208 	orr.w	r2, r2, #8
   164f8:	6122      	str	r2, [r4, #16]
		item->hdr.valid = 0;
   164fa:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   164fe:	f36f 0300 	bfc	r3, #0, #1
   16502:	f805 3026 	strb.w	r3, [r5, r6, lsl #2]
		*item_to_drop = item;
   16506:	f8c7 b000 	str.w	fp, [r7]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   1650a:	e001      	b.n	16510 <drop_item_locked+0x122>
		return false;
   1650c:	f04f 0900 	mov.w	r9, #0
			       item, rd_wlen);
	}

	return true;
}
   16510:	4648      	mov	r0, r9
   16512:	b003      	add	sp, #12
   16514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016518 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   16518:	b430      	push	{r4, r5}
	uint32_t i = idx + val;
   1651a:	1853      	adds	r3, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1651c:	6904      	ldr	r4, [r0, #16]
   1651e:	f014 0f01 	tst.w	r4, #1
   16522:	d104      	bne.n	1652e <post_drop_action+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
   16524:	6a05      	ldr	r5, [r0, #32]
   16526:	42ab      	cmp	r3, r5
   16528:	d304      	bcc.n	16534 <post_drop_action+0x1c>
   1652a:	1b5b      	subs	r3, r3, r5
   1652c:	e002      	b.n	16534 <post_drop_action+0x1c>
		return i & (buffer->size - 1);
   1652e:	6a05      	ldr	r5, [r0, #32]
   16530:	3d01      	subs	r5, #1
   16532:	402b      	ands	r3, r5
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   16534:	6805      	ldr	r5, [r0, #0]
   16536:	429d      	cmp	r5, r3
   16538:	d014      	beq.n	16564 <post_drop_action+0x4c>
		buffer->flags &= ~MPSC_PBUF_FULL;
		return;
	}

	/* Operation interrupted, mark area as to be skipped. */
	union mpsc_pbuf_generic skip = {
   1653a:	2300      	movs	r3, #0
   1653c:	f36f 0300 	bfc	r3, #0, #1
   16540:	f043 0302 	orr.w	r3, r3, #2
   16544:	f362 039f 	bfi	r3, r2, #2, #30
			.busy = 1,
			.len = tmp_wr_idx_shift
		}
	};

	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16548:	69c4      	ldr	r4, [r0, #28]
   1654a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   1654e:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   16550:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16552:	6902      	ldr	r2, [r0, #16]
   16554:	f012 0f01 	tst.w	r2, #1
   16558:	d109      	bne.n	1656e <post_drop_action+0x56>
	return (i >= buffer->size) ? i - buffer->size : i;
   1655a:	6a02      	ldr	r2, [r0, #32]
   1655c:	4293      	cmp	r3, r2
   1655e:	d309      	bcc.n	16574 <post_drop_action+0x5c>
   16560:	1a9b      	subs	r3, r3, r2
   16562:	e007      	b.n	16574 <post_drop_action+0x5c>
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   16564:	6001      	str	r1, [r0, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   16566:	f024 0408 	bic.w	r4, r4, #8
   1656a:	6104      	str	r4, [r0, #16]
		return;
   1656c:	e003      	b.n	16576 <post_drop_action+0x5e>
		return i & (buffer->size - 1);
   1656e:	6a02      	ldr	r2, [r0, #32]
   16570:	3a01      	subs	r2, #1
   16572:	4013      	ands	r3, r2
	buffer->wr_idx = idx_inc(buffer,
   16574:	6043      	str	r3, [r0, #4]
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   16576:	bc30      	pop	{r4, r5}
   16578:	4770      	bx	lr

0001657a <mpsc_pbuf_init>:
{
   1657a:	b538      	push	{r3, r4, r5, lr}
   1657c:	4604      	mov	r4, r0
   1657e:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   16580:	221c      	movs	r2, #28
   16582:	2100      	movs	r1, #0
   16584:	f000 fc44 	bl	16e10 <memset>
	buffer->get_wlen = cfg->get_wlen;
   16588:	68eb      	ldr	r3, [r5, #12]
   1658a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   1658c:	68ab      	ldr	r3, [r5, #8]
   1658e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   16590:	682b      	ldr	r3, [r5, #0]
   16592:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   16594:	686b      	ldr	r3, [r5, #4]
   16596:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   16598:	2200      	movs	r2, #0
   1659a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   1659c:	692a      	ldr	r2, [r5, #16]
   1659e:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   165a0:	b12b      	cbz	r3, 165ae <mpsc_pbuf_init+0x34>
   165a2:	1e59      	subs	r1, r3, #1
   165a4:	420b      	tst	r3, r1
   165a6:	d102      	bne.n	165ae <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   165a8:	f042 0201 	orr.w	r2, r2, #1
   165ac:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   165ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   165b2:	2201      	movs	r2, #1
   165b4:	2100      	movs	r1, #0
   165b6:	f002 fb3b 	bl	18c30 <z_impl_k_sem_init>
}
   165ba:	bd38      	pop	{r3, r4, r5, pc}

000165bc <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   165bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165c0:	b087      	sub	sp, #28
   165c2:	469a      	mov	sl, r3
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   165c4:	2300      	movs	r3, #0
   165c6:	9305      	str	r3, [sp, #20]
	bool cont = true;
	uint32_t free_wlen;
	uint32_t tmp_wr_idx_shift = 0;
   165c8:	9303      	str	r3, [sp, #12]
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   165ca:	6a03      	ldr	r3, [r0, #32]
   165cc:	428b      	cmp	r3, r1
   165ce:	f0c0 8089 	bcc.w	166e4 <mpsc_pbuf_alloc+0x128>
   165d2:	4604      	mov	r4, r0
   165d4:	4688      	mov	r8, r1
   165d6:	4691      	mov	r9, r2
	uint32_t tmp_wr_idx_val = 0;
   165d8:	2300      	movs	r3, #0
   165da:	9301      	str	r3, [sp, #4]
	bool cont = true;
   165dc:	2701      	movs	r7, #1
	union mpsc_pbuf_generic *item = NULL;
   165de:	469b      	mov	fp, r3
   165e0:	e040      	b.n	16664 <mpsc_pbuf_alloc+0xa8>
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   165e2:	9901      	ldr	r1, [sp, #4]
   165e4:	4620      	mov	r0, r4
   165e6:	f7ff ff97 	bl	16518 <post_drop_action>
			tmp_wr_idx_shift = 0;
   165ea:	2300      	movs	r3, #0
   165ec:	9303      	str	r3, [sp, #12]
   165ee:	e045      	b.n	1667c <mpsc_pbuf_alloc+0xc0>

		wrap = free_space(buffer, &free_wlen);

		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   165f0:	69e3      	ldr	r3, [r4, #28]
   165f2:	6822      	ldr	r2, [r4, #0]
			item =
   165f4:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   165f8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   165fc:	f36f 0100 	bfc	r1, #0, #1
   16600:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   16604:	b2c9      	uxtb	r1, r1
   16606:	f36f 0141 	bfc	r1, #1, #1
   1660a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1660e:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   16610:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16612:	6922      	ldr	r2, [r4, #16]
   16614:	f012 0f01 	tst.w	r2, #1
   16618:	d104      	bne.n	16624 <mpsc_pbuf_alloc+0x68>
	return (i >= buffer->size) ? i - buffer->size : i;
   1661a:	6a21      	ldr	r1, [r4, #32]
   1661c:	428b      	cmp	r3, r1
   1661e:	d304      	bcc.n	1662a <mpsc_pbuf_alloc+0x6e>
   16620:	1a5b      	subs	r3, r3, r1
   16622:	e002      	b.n	1662a <mpsc_pbuf_alloc+0x6e>
		return i & (buffer->size - 1);
   16624:	6a21      	ldr	r1, [r4, #32]
   16626:	3901      	subs	r1, #1
   16628:	400b      	ands	r3, r1
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1662a:	6023      	str	r3, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1662c:	68e1      	ldr	r1, [r4, #12]
   1662e:	4299      	cmp	r1, r3
   16630:	d001      	beq.n	16636 <mpsc_pbuf_alloc+0x7a>
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   16632:	2700      	movs	r7, #0
   16634:	e008      	b.n	16648 <mpsc_pbuf_alloc+0x8c>
		buffer->flags |= MPSC_PBUF_FULL;
   16636:	f042 0208 	orr.w	r2, r2, #8
   1663a:	6122      	str	r2, [r4, #16]
			cont = false;
   1663c:	2700      	movs	r7, #0
   1663e:	e003      	b.n	16648 <mpsc_pbuf_alloc+0x8c>
		} else if (wrap) {
			add_skip_item(buffer, free_wlen);
   16640:	4620      	mov	r0, r4
   16642:	f7ff fea1 	bl	16388 <add_skip_item>
			cont = true;
   16646:	4637      	mov	r7, r6
   16648:	f385 8811 	msr	BASEPRI, r5
   1664c:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   16650:	9905      	ldr	r1, [sp, #20]
   16652:	b129      	cbz	r1, 16660 <mpsc_pbuf_alloc+0xa4>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   16654:	6963      	ldr	r3, [r4, #20]
   16656:	b10b      	cbz	r3, 1665c <mpsc_pbuf_alloc+0xa0>
				buffer->notify_drop(buffer, dropped_item);
   16658:	4620      	mov	r0, r4
   1665a:	4798      	blx	r3
			}
			dropped_item = NULL;
   1665c:	2300      	movs	r3, #0
   1665e:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   16660:	2f00      	cmp	r7, #0
   16662:	d041      	beq.n	166e8 <mpsc_pbuf_alloc+0x12c>
	__asm__ volatile(
   16664:	f04f 0340 	mov.w	r3, #64	; 0x40
   16668:	f3ef 8511 	mrs	r5, BASEPRI
   1666c:	f383 8812 	msr	BASEPRI_MAX, r3
   16670:	f3bf 8f6f 	isb	sy
   16674:	9500      	str	r5, [sp, #0]
		if (tmp_wr_idx_shift) {
   16676:	9a03      	ldr	r2, [sp, #12]
   16678:	2a00      	cmp	r2, #0
   1667a:	d1b2      	bne.n	165e2 <mpsc_pbuf_alloc+0x26>
		wrap = free_space(buffer, &free_wlen);
   1667c:	a904      	add	r1, sp, #16
   1667e:	4620      	mov	r0, r4
   16680:	f7ff fe24 	bl	162cc <free_space>
   16684:	4606      	mov	r6, r0
		if (free_wlen >= wlen) {
   16686:	9904      	ldr	r1, [sp, #16]
   16688:	4541      	cmp	r1, r8
   1668a:	d2b1      	bcs.n	165f0 <mpsc_pbuf_alloc+0x34>
		} else if (wrap) {
   1668c:	2800      	cmp	r0, #0
   1668e:	d1d7      	bne.n	16640 <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16690:	ea5a 0309 	orrs.w	r3, sl, r9
   16694:	d10b      	bne.n	166ae <mpsc_pbuf_alloc+0xf2>
		} else if (cont) {
   16696:	2f00      	cmp	r7, #0
   16698:	d0d6      	beq.n	16648 <mpsc_pbuf_alloc+0x8c>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   1669a:	6823      	ldr	r3, [r4, #0]
   1669c:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
   1669e:	ab03      	add	r3, sp, #12
   166a0:	aa05      	add	r2, sp, #20
   166a2:	9904      	ldr	r1, [sp, #16]
   166a4:	4620      	mov	r0, r4
   166a6:	f7ff fea2 	bl	163ee <drop_item_locked>
   166aa:	4607      	mov	r7, r0
   166ac:	e7cc      	b.n	16648 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   166ae:	f002 f9b4 	bl	18a1a <k_is_in_isr>
   166b2:	2800      	cmp	r0, #0
   166b4:	d1ef      	bne.n	16696 <mpsc_pbuf_alloc+0xda>
	__asm__ volatile(
   166b6:	9b00      	ldr	r3, [sp, #0]
   166b8:	f383 8811 	msr	BASEPRI, r3
   166bc:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   166c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   166c4:	464a      	mov	r2, r9
   166c6:	4653      	mov	r3, sl
   166c8:	f7fd fef0 	bl	144ac <z_impl_k_sem_take>
	__asm__ volatile(
   166cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   166d0:	f3ef 8511 	mrs	r5, BASEPRI
   166d4:	f383 8812 	msr	BASEPRI_MAX, r3
   166d8:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   166dc:	fab0 f780 	clz	r7, r0
   166e0:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   166e2:	e7b1      	b.n	16648 <mpsc_pbuf_alloc+0x8c>
		return NULL;
   166e4:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   166e8:	4658      	mov	r0, fp
   166ea:	b007      	add	sp, #28
   166ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000166f0 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   166f0:	b570      	push	{r4, r5, r6, lr}
   166f2:	4604      	mov	r4, r0
   166f4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   166f6:	6983      	ldr	r3, [r0, #24]
   166f8:	4608      	mov	r0, r1
   166fa:	4798      	blx	r3
   166fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   16700:	f3ef 8611 	mrs	r6, BASEPRI
   16704:	f383 8812 	msr	BASEPRI_MAX, r3
   16708:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1670c:	782b      	ldrb	r3, [r5, #0]
   1670e:	f043 0301 	orr.w	r3, r3, #1
   16712:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16714:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   16716:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16718:	6923      	ldr	r3, [r4, #16]
   1671a:	f013 0f01 	tst.w	r3, #1
   1671e:	d104      	bne.n	1672a <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   16720:	6a23      	ldr	r3, [r4, #32]
   16722:	4298      	cmp	r0, r3
   16724:	d304      	bcc.n	16730 <mpsc_pbuf_commit+0x40>
   16726:	1ac0      	subs	r0, r0, r3
   16728:	e002      	b.n	16730 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   1672a:	6a23      	ldr	r3, [r4, #32]
   1672c:	3b01      	subs	r3, #1
   1672e:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16730:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   16732:	4620      	mov	r0, r4
   16734:	f7ff fe02 	bl	1633c <max_utilization_update>
	__asm__ volatile(
   16738:	f386 8811 	msr	BASEPRI, r6
   1673c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   16740:	bd70      	pop	{r4, r5, r6, pc}

00016742 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   16742:	b5f0      	push	{r4, r5, r6, r7, lr}
   16744:	b083      	sub	sp, #12
   16746:	4604      	mov	r4, r0
   16748:	e02e      	b.n	167a8 <mpsc_pbuf_claim+0x66>
		return item->skip.len;
   1674a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   1674e:	0880      	lsrs	r0, r0, #2
   16750:	d14e      	bne.n	167f0 <mpsc_pbuf_claim+0xae>
   16752:	e044      	b.n	167de <mpsc_pbuf_claim+0x9c>
		return i & (buffer->size - 1);
   16754:	6a22      	ldr	r2, [r4, #32]
   16756:	3a01      	subs	r2, #1
   16758:	4013      	ands	r3, r2
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   1675a:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				rd_idx_inc(buffer, inc);
   1675c:	4620      	mov	r0, r4
   1675e:	f7ff fe00 	bl	16362 <rd_idx_inc>
				cont = true;
   16762:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   16764:	e01b      	b.n	1679e <mpsc_pbuf_claim+0x5c>
			} else {
				item->hdr.busy = 1;
   16766:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   1676a:	f041 0102 	orr.w	r1, r1, #2
   1676e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   16772:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   16774:	69a3      	ldr	r3, [r4, #24]
   16776:	4630      	mov	r0, r6
   16778:	4798      	blx	r3
	uint32_t i = idx + val;
   1677a:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1677c:	6923      	ldr	r3, [r4, #16]
   1677e:	f013 0f01 	tst.w	r3, #1
   16782:	d104      	bne.n	1678e <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
   16784:	6a23      	ldr	r3, [r4, #32]
   16786:	4298      	cmp	r0, r3
   16788:	d304      	bcc.n	16794 <mpsc_pbuf_claim+0x52>
   1678a:	1ac0      	subs	r0, r0, r3
   1678c:	e002      	b.n	16794 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
   1678e:	6a23      	ldr	r3, [r4, #32]
   16790:	3b01      	subs	r3, #1
   16792:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   16794:	60a0      	str	r0, [r4, #8]
		cont = false;
   16796:	2300      	movs	r3, #0
   16798:	e001      	b.n	1679e <mpsc_pbuf_claim+0x5c>
   1679a:	2300      	movs	r3, #0
			item = NULL;
   1679c:	461e      	mov	r6, r3
   1679e:	f385 8811 	msr	BASEPRI, r5
   167a2:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   167a6:	b393      	cbz	r3, 1680e <mpsc_pbuf_claim+0xcc>
	__asm__ volatile(
   167a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   167ac:	f3ef 8511 	mrs	r5, BASEPRI
   167b0:	f383 8812 	msr	BASEPRI_MAX, r3
   167b4:	f3bf 8f6f 	isb	sy
		(void)available(buffer, &a);
   167b8:	a901      	add	r1, sp, #4
   167ba:	4620      	mov	r0, r4
   167bc:	f7ff fd9a 	bl	162f4 <available>
			&buffer->buf[buffer->tmp_rd_idx];
   167c0:	69e3      	ldr	r3, [r4, #28]
   167c2:	68a2      	ldr	r2, [r4, #8]
		item = (union mpsc_pbuf_generic *)
   167c4:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (!a || is_invalid(item)) {
   167c8:	9901      	ldr	r1, [sp, #4]
   167ca:	2900      	cmp	r1, #0
   167cc:	d0e5      	beq.n	1679a <mpsc_pbuf_claim+0x58>
	return !item->hdr.valid && !item->hdr.busy;
   167ce:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
		if (!a || is_invalid(item)) {
   167d2:	f011 0103 	ands.w	r1, r1, #3
   167d6:	d017      	beq.n	16808 <mpsc_pbuf_claim+0xc6>
	if (item->hdr.busy && !item->hdr.valid) {
   167d8:	2902      	cmp	r1, #2
   167da:	d0b6      	beq.n	1674a <mpsc_pbuf_claim+0x8>
	return 0;
   167dc:	2000      	movs	r0, #0
	return item->hdr.valid;
   167de:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			if (skip || !is_valid(item)) {
   167e2:	f011 0f01 	tst.w	r1, #1
   167e6:	d1be      	bne.n	16766 <mpsc_pbuf_claim+0x24>
					skip ? skip : buffer->get_wlen(item);
   167e8:	b910      	cbnz	r0, 167f0 <mpsc_pbuf_claim+0xae>
   167ea:	69a3      	ldr	r3, [r4, #24]
   167ec:	4630      	mov	r0, r6
   167ee:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   167f0:	68a3      	ldr	r3, [r4, #8]
   167f2:	4601      	mov	r1, r0
	uint32_t i = idx + val;
   167f4:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   167f6:	6922      	ldr	r2, [r4, #16]
   167f8:	f012 0f01 	tst.w	r2, #1
   167fc:	d1aa      	bne.n	16754 <mpsc_pbuf_claim+0x12>
	return (i >= buffer->size) ? i - buffer->size : i;
   167fe:	6a22      	ldr	r2, [r4, #32]
   16800:	4293      	cmp	r3, r2
   16802:	d3aa      	bcc.n	1675a <mpsc_pbuf_claim+0x18>
   16804:	1a9b      	subs	r3, r3, r2
   16806:	e7a8      	b.n	1675a <mpsc_pbuf_claim+0x18>
		cont = false;
   16808:	2300      	movs	r3, #0
			item = NULL;
   1680a:	461e      	mov	r6, r3
   1680c:	e7c7      	b.n	1679e <mpsc_pbuf_claim+0x5c>

	return item;
}
   1680e:	4630      	mov	r0, r6
   16810:	b003      	add	sp, #12
   16812:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016814 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   16814:	b570      	push	{r4, r5, r6, lr}
   16816:	4604      	mov	r4, r0
   16818:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1681a:	6983      	ldr	r3, [r0, #24]
   1681c:	4608      	mov	r0, r1
   1681e:	4798      	blx	r3
   16820:	4601      	mov	r1, r0
   16822:	f04f 0340 	mov.w	r3, #64	; 0x40
   16826:	f3ef 8611 	mrs	r6, BASEPRI
   1682a:	f383 8812 	msr	BASEPRI_MAX, r3
   1682e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   16832:	782b      	ldrb	r3, [r5, #0]
   16834:	f36f 0300 	bfc	r3, #0, #1
   16838:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1683a:	6923      	ldr	r3, [r4, #16]
   1683c:	f013 0f02 	tst.w	r3, #2
   16840:	d00a      	beq.n	16858 <mpsc_pbuf_free+0x44>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   16842:	69e3      	ldr	r3, [r4, #28]
   16844:	68e2      	ldr	r2, [r4, #12]
   16846:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1684a:	42ab      	cmp	r3, r5
   1684c:	d004      	beq.n	16858 <mpsc_pbuf_free+0x44>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
		}
		rd_idx_inc(buffer, wlen);
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   1684e:	682b      	ldr	r3, [r5, #0]
   16850:	f360 039f 	bfi	r3, r0, #2, #30
   16854:	602b      	str	r3, [r5, #0]
   16856:	e00a      	b.n	1686e <mpsc_pbuf_free+0x5a>
		witem->hdr.busy = 0;
   16858:	782b      	ldrb	r3, [r5, #0]
   1685a:	f36f 0341 	bfc	r3, #1, #1
   1685e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16860:	68e2      	ldr	r2, [r4, #12]
   16862:	68a3      	ldr	r3, [r4, #8]
   16864:	429a      	cmp	r2, r3
   16866:	d00b      	beq.n	16880 <mpsc_pbuf_free+0x6c>
		rd_idx_inc(buffer, wlen);
   16868:	4620      	mov	r0, r4
   1686a:	f7ff fd7a 	bl	16362 <rd_idx_inc>
	__asm__ volatile(
   1686e:	f386 8811 	msr	BASEPRI, r6
   16872:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   16876:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1687a:	f7fd fdef 	bl	1445c <z_impl_k_sem_give>
}
   1687e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i = idx + val;
   16880:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16882:	6922      	ldr	r2, [r4, #16]
   16884:	f012 0f01 	tst.w	r2, #1
   16888:	d104      	bne.n	16894 <mpsc_pbuf_free+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   1688a:	6a22      	ldr	r2, [r4, #32]
   1688c:	4293      	cmp	r3, r2
   1688e:	d304      	bcc.n	1689a <mpsc_pbuf_free+0x86>
   16890:	1a9b      	subs	r3, r3, r2
   16892:	e002      	b.n	1689a <mpsc_pbuf_free+0x86>
		return i & (buffer->size - 1);
   16894:	6a22      	ldr	r2, [r4, #32]
   16896:	3a01      	subs	r2, #1
   16898:	4013      	ands	r3, r2
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   1689a:	60a3      	str	r3, [r4, #8]
   1689c:	e7e4      	b.n	16868 <mpsc_pbuf_free+0x54>

0001689e <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
   1689e:	b500      	push	{lr}
   168a0:	b083      	sub	sp, #12
	uint32_t a;

	(void)available(buffer, &a);
   168a2:	a901      	add	r1, sp, #4
   168a4:	f7ff fd26 	bl	162f4 <available>

	return a ? true : false;
}
   168a8:	9801      	ldr	r0, [sp, #4]
   168aa:	3800      	subs	r0, #0
   168ac:	bf18      	it	ne
   168ae:	2001      	movne	r0, #1
   168b0:	b003      	add	sp, #12
   168b2:	f85d fb04 	ldr.w	pc, [sp], #4

000168b6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   168b6:	4770      	bx	lr

000168b8 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   168b8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   168ba:	f013 0f04 	tst.w	r3, #4
   168be:	d001      	beq.n	168c4 <log_msg_generic_get_wlen+0xc>
	return 0;
   168c0:	2000      	movs	r0, #0
}
   168c2:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   168c4:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   168c6:	f3c3 204a 	ubfx	r0, r3, #9, #11
   168ca:	eb00 5013 	add.w	r0, r0, r3, lsr #20
   168ce:	3017      	adds	r0, #23
   168d0:	f020 0007 	bic.w	r0, r0, #7
   168d4:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   168d6:	4770      	bx	lr

000168d8 <dummy_timestamp>:
}
   168d8:	2000      	movs	r0, #0
   168da:	4770      	bx	lr

000168dc <msg_filter_check>:
}
   168dc:	2001      	movs	r0, #1
   168de:	4770      	bx	lr

000168e0 <default_get_timestamp>:
{
   168e0:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   168e2:	f001 faa4 	bl	17e2e <sys_clock_cycle_get_32>
}
   168e6:	bd08      	pop	{r3, pc}

000168e8 <k_msleep>:
{
   168e8:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   168ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   168ee:	17c1      	asrs	r1, r0, #31
   168f0:	03c9      	lsls	r1, r1, #15
   168f2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   168f6:	03c0      	lsls	r0, r0, #15
   168f8:	f240 33e7 	movw	r3, #999	; 0x3e7
   168fc:	18c0      	adds	r0, r0, r3
   168fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16902:	f04f 0300 	mov.w	r3, #0
   16906:	f141 0100 	adc.w	r1, r1, #0
   1690a:	f7e9 fbe7 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1690e:	f7fe fa9f 	bl	14e50 <z_impl_k_sleep>
}
   16912:	bd08      	pop	{r3, pc}

00016914 <msg_alloc>:
{
   16914:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   16916:	2200      	movs	r2, #0
   16918:	2300      	movs	r3, #0
   1691a:	f7ff fe4f 	bl	165bc <mpsc_pbuf_alloc>
}
   1691e:	bd08      	pop	{r3, pc}

00016920 <msg_free>:
{
   16920:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   16922:	f7ff ff77 	bl	16814 <mpsc_pbuf_free>
}
   16926:	bd08      	pop	{r3, pc}

00016928 <msg_pending>:
{
   16928:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   1692a:	f7ff ffb8 	bl	1689e <mpsc_pbuf_is_pending>
}
   1692e:	bd08      	pop	{r3, pc}

00016930 <z_log_vprintk>:
{
   16930:	b500      	push	{lr}
   16932:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   16934:	9103      	str	r1, [sp, #12]
   16936:	9002      	str	r0, [sp, #8]
   16938:	2000      	movs	r0, #0
   1693a:	9001      	str	r0, [sp, #4]
   1693c:	9000      	str	r0, [sp, #0]
   1693e:	4603      	mov	r3, r0
   16940:	4602      	mov	r2, r0
   16942:	4601      	mov	r1, r0
   16944:	f000 f845 	bl	169d2 <z_impl_z_log_msg_runtime_vcreate>
}
   16948:	b005      	add	sp, #20
   1694a:	f85d fb04 	ldr.w	pc, [sp], #4

0001694e <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   1694e:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   16950:	2001      	movs	r0, #1
   16952:	f7f4 ff11 	bl	b778 <z_log_dropped>
}
   16956:	bd08      	pop	{r3, pc}

00016958 <z_log_msg_claim>:
{
   16958:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   1695a:	f7f4 ff93 	bl	b884 <z_log_msg_local_claim>
}
   1695e:	bd08      	pop	{r3, pc}

00016960 <msg_commit>:
{
   16960:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   16962:	f7ff fec5 	bl	166f0 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   16966:	f7f5 f82b 	bl	b9c0 <z_log_msg_post_finalize>
}
   1696a:	bd08      	pop	{r3, pc}

0001696c <z_log_get_tag>:
}
   1696c:	2000      	movs	r0, #0
   1696e:	4770      	bx	lr

00016970 <z_cbprintf_cpy>:
{
   16970:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   16972:	6853      	ldr	r3, [r2, #4]
   16974:	6896      	ldr	r6, [r2, #8]
   16976:	1b9b      	subs	r3, r3, r6
   16978:	428b      	cmp	r3, r1
   1697a:	d30c      	bcc.n	16996 <z_cbprintf_cpy+0x26>
   1697c:	460c      	mov	r4, r1
   1697e:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   16980:	6813      	ldr	r3, [r2, #0]
   16982:	460a      	mov	r2, r1
   16984:	4601      	mov	r1, r0
   16986:	1998      	adds	r0, r3, r6
   16988:	f000 fa13 	bl	16db2 <memcpy>
	desc->off += len;
   1698c:	68ab      	ldr	r3, [r5, #8]
   1698e:	4423      	add	r3, r4
   16990:	60ab      	str	r3, [r5, #8]
	return len;
   16992:	4620      	mov	r0, r4
}
   16994:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   16996:	f06f 001b 	mvn.w	r0, #27
   1699a:	e7fb      	b.n	16994 <z_cbprintf_cpy+0x24>

0001699c <z_log_msg_finalize>:
{
   1699c:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   1699e:	b188      	cbz	r0, 169c4 <z_log_msg_finalize+0x28>
   169a0:	460e      	mov	r6, r1
   169a2:	4614      	mov	r4, r2
   169a4:	4619      	mov	r1, r3
   169a6:	4605      	mov	r5, r0
	if (data) {
   169a8:	b133      	cbz	r3, 169b8 <z_log_msg_finalize+0x1c>
		uint8_t *d = msg->data + desc.package_len;
   169aa:	3010      	adds	r0, #16
   169ac:	f3c2 234a 	ubfx	r3, r2, #9, #11
		memcpy(d, data, desc.data_len);
   169b0:	0d12      	lsrs	r2, r2, #20
   169b2:	4418      	add	r0, r3
   169b4:	f000 f9fd 	bl	16db2 <memcpy>
	msg->hdr.desc = desc;
   169b8:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   169ba:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   169bc:	4628      	mov	r0, r5
   169be:	f7f5 f843 	bl	ba48 <z_log_msg_commit>
}
   169c2:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   169c4:	f7f4 fed8 	bl	b778 <z_log_dropped>
		return;
   169c8:	e7fb      	b.n	169c2 <z_log_msg_finalize+0x26>

000169ca <z_log_msg_static_create>:
{
   169ca:	b508      	push	{r3, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
   169cc:	f7f5 f8ca 	bl	bb64 <z_impl_z_log_msg_static_create>
}
   169d0:	bd08      	pop	{r3, pc}

000169d2 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   169d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169d6:	b085      	sub	sp, #20
   169d8:	4681      	mov	r9, r0
   169da:	460d      	mov	r5, r1
   169dc:	4690      	mov	r8, r2
   169de:	461e      	mov	r6, r3
   169e0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   169e4:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   169e6:	b3a7      	cbz	r7, 16a52 <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
   169e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   169ea:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   169ec:	9300      	str	r3, [sp, #0]
   169ee:	463b      	mov	r3, r7
   169f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   169f2:	2110      	movs	r1, #16
   169f4:	2000      	movs	r0, #0
   169f6:	f7f3 fcd5 	bl	a3a4 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   169fa:	4682      	mov	sl, r0
   169fc:	eb00 030b 	add.w	r3, r0, fp
   16a00:	3317      	adds	r3, #23
   16a02:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   16a06:	2400      	movs	r4, #0
   16a08:	f36f 0400 	bfc	r4, #0, #1
   16a0c:	f36f 0441 	bfc	r4, #1, #1
   16a10:	f36f 0482 	bfc	r4, #2, #1
   16a14:	f369 04c5 	bfi	r4, r9, #3, #3
   16a18:	f368 1488 	bfi	r4, r8, #6, #3
   16a1c:	f360 2453 	bfi	r4, r0, #9, #11
   16a20:	f36b 541f 	bfi	r4, fp, #20, #12
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   16a24:	0898      	lsrs	r0, r3, #2
   16a26:	f7f4 ff25 	bl	b874 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   16a2a:	4680      	mov	r8, r0
   16a2c:	b140      	cbz	r0, 16a40 <z_impl_z_log_msg_runtime_vcreate+0x6e>
   16a2e:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   16a30:	b137      	cbz	r7, 16a40 <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   16a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a34:	9300      	str	r3, [sp, #0]
   16a36:	463b      	mov	r3, r7
   16a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16a3a:	4651      	mov	r1, sl
   16a3c:	f7f3 fcb2 	bl	a3a4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   16a40:	4633      	mov	r3, r6
   16a42:	4622      	mov	r2, r4
   16a44:	4629      	mov	r1, r5
   16a46:	4640      	mov	r0, r8
   16a48:	f7ff ffa8 	bl	1699c <z_log_msg_finalize>
	}
}
   16a4c:	b005      	add	sp, #20
   16a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   16a52:	2000      	movs	r0, #0
   16a54:	e7d1      	b.n	169fa <z_impl_z_log_msg_runtime_vcreate+0x28>

00016a56 <buffer_write>:
{
   16a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a58:	4607      	mov	r7, r0
   16a5a:	460d      	mov	r5, r1
   16a5c:	4614      	mov	r4, r2
   16a5e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   16a60:	4632      	mov	r2, r6
   16a62:	4621      	mov	r1, r4
   16a64:	4628      	mov	r0, r5
   16a66:	47b8      	blx	r7
		buf += processed;
   16a68:	4405      	add	r5, r0
	} while (len != 0);
   16a6a:	1a24      	subs	r4, r4, r0
   16a6c:	d1f8      	bne.n	16a60 <buffer_write+0xa>
}
   16a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016a70 <cbvprintf>:
{
   16a70:	b510      	push	{r4, lr}
   16a72:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   16a74:	2400      	movs	r4, #0
   16a76:	9400      	str	r4, [sp, #0]
   16a78:	f7f4 fa8a 	bl	af90 <z_cbvprintf_impl>
}
   16a7c:	b002      	add	sp, #8
   16a7e:	bd10      	pop	{r4, pc}

00016a80 <color_prefix>:
{
   16a80:	b508      	push	{r3, lr}
   16a82:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   16a84:	2201      	movs	r2, #1
   16a86:	f7f5 f97b 	bl	bd80 <color_print>
}
   16a8a:	bd08      	pop	{r3, pc}

00016a8c <color_postfix>:
{
   16a8c:	b508      	push	{r3, lr}
   16a8e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   16a90:	2200      	movs	r2, #0
   16a92:	f7f5 f975 	bl	bd80 <color_print>
}
   16a96:	bd08      	pop	{r3, pc}

00016a98 <postfix_print>:
{
   16a98:	b538      	push	{r3, r4, r5, lr}
   16a9a:	4605      	mov	r5, r0
   16a9c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   16a9e:	f001 0101 	and.w	r1, r1, #1
   16aa2:	f7ff fff3 	bl	16a8c <color_postfix>
	newline_print(output, flags);
   16aa6:	4621      	mov	r1, r4
   16aa8:	4628      	mov	r0, r5
   16aaa:	f7f5 f9f3 	bl	be94 <newline_print>
}
   16aae:	bd38      	pop	{r3, r4, r5, pc}

00016ab0 <log_msg_hexdump>:
{
   16ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16ab4:	b083      	sub	sp, #12
   16ab6:	4680      	mov	r8, r0
   16ab8:	460e      	mov	r6, r1
   16aba:	4615      	mov	r5, r2
   16abc:	461f      	mov	r7, r3
   16abe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   16ac2:	462c      	mov	r4, r5
   16ac4:	2d10      	cmp	r5, #16
   16ac6:	bf28      	it	cs
   16ac8:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   16aca:	f8cd 9000 	str.w	r9, [sp]
   16ace:	463b      	mov	r3, r7
   16ad0:	4622      	mov	r2, r4
   16ad2:	4631      	mov	r1, r6
   16ad4:	4640      	mov	r0, r8
   16ad6:	f7f5 f9f1 	bl	bebc <hexdump_line_print>
		data += length;
   16ada:	4426      	add	r6, r4
	} while (len);
   16adc:	1b2d      	subs	r5, r5, r4
   16ade:	d1f0      	bne.n	16ac2 <log_msg_hexdump+0x12>
}
   16ae0:	b003      	add	sp, #12
   16ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00016ae6 <log_output_flush>:
{
   16ae6:	b510      	push	{r4, lr}
   16ae8:	4604      	mov	r4, r0
		     output->control_block->offset,
   16aea:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   16aec:	6853      	ldr	r3, [r2, #4]
   16aee:	6812      	ldr	r2, [r2, #0]
   16af0:	6881      	ldr	r1, [r0, #8]
   16af2:	6800      	ldr	r0, [r0, #0]
   16af4:	f7ff ffaf 	bl	16a56 <buffer_write>
	output->control_block->offset = 0;
   16af8:	6863      	ldr	r3, [r4, #4]
   16afa:	2200      	movs	r2, #0
   16afc:	601a      	str	r2, [r3, #0]
}
   16afe:	bd10      	pop	{r4, pc}

00016b00 <out_func>:
{
   16b00:	b538      	push	{r3, r4, r5, lr}
   16b02:	4605      	mov	r5, r0
   16b04:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   16b06:	684b      	ldr	r3, [r1, #4]
   16b08:	681a      	ldr	r2, [r3, #0]
   16b0a:	68cb      	ldr	r3, [r1, #12]
   16b0c:	429a      	cmp	r2, r3
   16b0e:	d00f      	beq.n	16b30 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   16b10:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16b12:	f3bf 8f5b 	dmb	ish
   16b16:	e853 2f00 	ldrex	r2, [r3]
   16b1a:	1c51      	adds	r1, r2, #1
   16b1c:	e843 1000 	strex	r0, r1, [r3]
   16b20:	2800      	cmp	r0, #0
   16b22:	d1f8      	bne.n	16b16 <out_func+0x16>
   16b24:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   16b28:	68a3      	ldr	r3, [r4, #8]
   16b2a:	549d      	strb	r5, [r3, r2]
}
   16b2c:	2000      	movs	r0, #0
   16b2e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   16b30:	4608      	mov	r0, r1
   16b32:	f7ff ffd8 	bl	16ae6 <log_output_flush>
   16b36:	e7eb      	b.n	16b10 <out_func+0x10>

00016b38 <cr_out_func>:
{
   16b38:	b538      	push	{r3, r4, r5, lr}
   16b3a:	4604      	mov	r4, r0
   16b3c:	460d      	mov	r5, r1
	if (c == '\n') {
   16b3e:	280a      	cmp	r0, #10
   16b40:	d005      	beq.n	16b4e <cr_out_func+0x16>
	out_func(c, ctx);
   16b42:	4629      	mov	r1, r5
   16b44:	4620      	mov	r0, r4
   16b46:	f7ff ffdb 	bl	16b00 <out_func>
}
   16b4a:	2000      	movs	r0, #0
   16b4c:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   16b4e:	200d      	movs	r0, #13
   16b50:	f7ff ffd6 	bl	16b00 <out_func>
   16b54:	e7f5      	b.n	16b42 <cr_out_func+0xa>

00016b56 <k_msleep>:
{
   16b56:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   16b58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   16b5c:	17c1      	asrs	r1, r0, #31
   16b5e:	03c9      	lsls	r1, r1, #15
   16b60:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   16b64:	03c0      	lsls	r0, r0, #15
   16b66:	f240 33e7 	movw	r3, #999	; 0x3e7
   16b6a:	18c0      	adds	r0, r0, r3
   16b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16b70:	f04f 0300 	mov.w	r3, #0
   16b74:	f141 0100 	adc.w	r1, r1, #0
   16b78:	f7e9 fab0 	bl	dc <__aeabi_uldivmod>
   16b7c:	f7fe f968 	bl	14e50 <z_impl_k_sleep>
}
   16b80:	bd08      	pop	{r3, pc}

00016b82 <log_backend_uart_init>:
}
   16b82:	4770      	bx	lr

00016b84 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   16b84:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   16b86:	f001 021f 	and.w	r2, r1, #31
   16b8a:	2301      	movs	r3, #1
   16b8c:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b8e:	0949      	lsrs	r1, r1, #5
   16b90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16b94:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16b96:	f3bf 8f5b 	dmb	ish
   16b9a:	e850 2f00 	ldrex	r2, [r0]
   16b9e:	ea02 0c01 	and.w	ip, r2, r1
   16ba2:	e840 ce00 	strex	lr, ip, [r0]
   16ba6:	f1be 0f00 	cmp.w	lr, #0
   16baa:	d1f6      	bne.n	16b9a <atomic_test_and_clear_bit+0x16>
   16bac:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   16bb0:	4213      	tst	r3, r2
}
   16bb2:	bf14      	ite	ne
   16bb4:	2001      	movne	r0, #1
   16bb6:	2000      	moveq	r0, #0
   16bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00016bbc <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16bbc:	f001 021f 	and.w	r2, r1, #31
   16bc0:	2301      	movs	r3, #1
   16bc2:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16bc4:	0949      	lsrs	r1, r1, #5
   16bc6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16bca:	f3bf 8f5b 	dmb	ish
   16bce:	e850 2f00 	ldrex	r2, [r0]
   16bd2:	431a      	orrs	r2, r3
   16bd4:	e840 2100 	strex	r1, r2, [r0]
   16bd8:	2900      	cmp	r1, #0
   16bda:	d1f8      	bne.n	16bce <atomic_set_bit+0x12>
   16bdc:	f3bf 8f5b 	dmb	ish
}
   16be0:	4770      	bx	lr

00016be2 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   16be2:	2000      	movs	r0, #0
   16be4:	4770      	bx	lr

00016be6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16be6:	b538      	push	{r3, r4, r5, lr}
   16be8:	4604      	mov	r4, r0

	if (esf != NULL) {
   16bea:	460d      	mov	r5, r1
   16bec:	b111      	cbz	r1, 16bf4 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   16bee:	4608      	mov	r0, r1
   16bf0:	f7f5 fcb0 	bl	c554 <esf_dump>
	}
	z_fatal_error(reason, esf);
   16bf4:	4629      	mov	r1, r5
   16bf6:	4620      	mov	r0, r4
   16bf8:	f7fc ffb0 	bl	13b5c <z_fatal_error>
}
   16bfc:	bd38      	pop	{r3, r4, r5, pc}

00016bfe <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   16bfe:	b508      	push	{r3, lr}
   16c00:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   16c02:	6800      	ldr	r0, [r0, #0]
   16c04:	f7ff ffef 	bl	16be6 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   16c08:	bd08      	pop	{r3, pc}

00016c0a <arch_irq_enable>:
{
   16c0a:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   16c0c:	b240      	sxtb	r0, r0
   16c0e:	f7f5 fdd7 	bl	c7c0 <__NVIC_EnableIRQ>
}
   16c12:	bd08      	pop	{r3, pc}

00016c14 <arch_irq_disable>:
{
   16c14:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   16c16:	b240      	sxtb	r0, r0
   16c18:	f7f5 fde0 	bl	c7dc <__NVIC_DisableIRQ>
}
   16c1c:	bd08      	pop	{r3, pc}

00016c1e <z_arm_irq_priority_set>:
{
   16c1e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   16c20:	f012 0f01 	tst.w	r2, #1
   16c24:	d104      	bne.n	16c30 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   16c26:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   16c28:	b240      	sxtb	r0, r0
   16c2a:	f7f5 fde9 	bl	c800 <__NVIC_SetPriority>
}
   16c2e:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   16c30:	2100      	movs	r1, #0
   16c32:	e7f9      	b.n	16c28 <z_arm_irq_priority_set+0xa>

00016c34 <z_irq_spurious>:
{
   16c34:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   16c36:	2100      	movs	r1, #0
   16c38:	2001      	movs	r0, #1
   16c3a:	f7ff ffd4 	bl	16be6 <z_arm_fatal_error>
}
   16c3e:	bd08      	pop	{r3, pc}

00016c40 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   16c40:	b508      	push	{r3, lr}
	handler();
   16c42:	f7f5 fe0f 	bl	c864 <z_SysNmiOnReset>
	z_arm_int_exit();
   16c46:	f7f5 ff01 	bl	ca4c <z_arm_exc_exit>
}
   16c4a:	bd08      	pop	{r3, pc}

00016c4c <memory_fault_recoverable>:
}
   16c4c:	2000      	movs	r0, #0
   16c4e:	4770      	bx	lr

00016c50 <fault_handle>:
{
   16c50:	b508      	push	{r3, lr}
	*recoverable = false;
   16c52:	2300      	movs	r3, #0
   16c54:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   16c56:	1ecb      	subs	r3, r1, #3
   16c58:	2b09      	cmp	r3, #9
   16c5a:	d81a      	bhi.n	16c92 <fault_handle+0x42>
   16c5c:	e8df f003 	tbb	[pc, r3]
   16c60:	110d0905 	.word	0x110d0905
   16c64:	19191919 	.word	0x19191919
   16c68:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   16c6a:	4611      	mov	r1, r2
   16c6c:	f7f6 fedc 	bl	da28 <hard_fault>
}
   16c70:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   16c72:	2100      	movs	r1, #0
   16c74:	f7f6 fc84 	bl	d580 <mem_manage_fault>
		break;
   16c78:	e7fa      	b.n	16c70 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   16c7a:	2100      	movs	r1, #0
   16c7c:	f7f5 ff72 	bl	cb64 <bus_fault>
		break;
   16c80:	e7f6      	b.n	16c70 <fault_handle+0x20>
		reason = usage_fault(esf);
   16c82:	f7f6 f9d3 	bl	d02c <usage_fault>
		break;
   16c86:	e7f3      	b.n	16c70 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   16c88:	4611      	mov	r1, r2
   16c8a:	f7f6 fbbd 	bl	d408 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16c8e:	2000      	movs	r0, #0
		break;
   16c90:	e7ee      	b.n	16c70 <fault_handle+0x20>
		reserved_exception(esf, fault);
   16c92:	f7f6 fc01 	bl	d498 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16c96:	2000      	movs	r0, #0
	return reason;
   16c98:	e7ea      	b.n	16c70 <fault_handle+0x20>

00016c9a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   16c9a:	6843      	ldr	r3, [r0, #4]
   16c9c:	1e5a      	subs	r2, r3, #1
		&&
   16c9e:	4213      	tst	r3, r2
   16ca0:	d106      	bne.n	16cb0 <mpu_partition_is_valid+0x16>
		&&
   16ca2:	2b1f      	cmp	r3, #31
   16ca4:	d906      	bls.n	16cb4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   16ca6:	6803      	ldr	r3, [r0, #0]
		&&
   16ca8:	421a      	tst	r2, r3
   16caa:	d005      	beq.n	16cb8 <mpu_partition_is_valid+0x1e>
   16cac:	2000      	movs	r0, #0
   16cae:	4770      	bx	lr
   16cb0:	2000      	movs	r0, #0
   16cb2:	4770      	bx	lr
   16cb4:	2000      	movs	r0, #0
   16cb6:	4770      	bx	lr
   16cb8:	2001      	movs	r0, #1
}
   16cba:	4770      	bx	lr

00016cbc <mpu_configure_region>:
{
   16cbc:	b500      	push	{lr}
   16cbe:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   16cc0:	680b      	ldr	r3, [r1, #0]
   16cc2:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   16cc4:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16cc6:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   16cc8:	2b20      	cmp	r3, #32
   16cca:	d912      	bls.n	16cf2 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   16ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   16cd0:	d811      	bhi.n	16cf6 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   16cd2:	3b01      	subs	r3, #1
   16cd4:	fab3 f383 	clz	r3, r3
   16cd8:	f1c3 031f 	rsb	r3, r3, #31
   16cdc:	005b      	lsls	r3, r3, #1
   16cde:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16ce2:	4313      	orrs	r3, r2
   16ce4:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   16ce6:	a901      	add	r1, sp, #4
   16ce8:	f7f7 f94a 	bl	df80 <region_allocate_and_init>
}
   16cec:	b005      	add	sp, #20
   16cee:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   16cf2:	2308      	movs	r3, #8
   16cf4:	e7f5      	b.n	16ce2 <mpu_configure_region+0x26>
		return REGION_4G;
   16cf6:	233e      	movs	r3, #62	; 0x3e
   16cf8:	e7f3      	b.n	16ce2 <mpu_configure_region+0x26>

00016cfa <arm_core_mpu_configure_static_mpu_regions>:
{
   16cfa:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16cfc:	f7f7 fa02 	bl	e104 <mpu_configure_static_mpu_regions>
}
   16d00:	bd08      	pop	{r3, pc}

00016d02 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   16d02:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   16d04:	f7f7 fa08 	bl	e118 <mpu_configure_dynamic_mpu_regions>
}
   16d08:	bd08      	pop	{r3, pc}

00016d0a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   16d0a:	4602      	mov	r2, r0
   16d0c:	e002      	b.n	16d14 <strcpy+0xa>
		*d = *s;
   16d0e:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   16d12:	3101      	adds	r1, #1
	while (*s != '\0') {
   16d14:	780b      	ldrb	r3, [r1, #0]
   16d16:	2b00      	cmp	r3, #0
   16d18:	d1f9      	bne.n	16d0e <strcpy+0x4>
	}

	*d = '\0';
   16d1a:	7013      	strb	r3, [r2, #0]

	return dest;
}
   16d1c:	4770      	bx	lr

00016d1e <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   16d1e:	4603      	mov	r3, r0
   16d20:	b1a2      	cbz	r2, 16d4c <strncpy+0x2e>
{
   16d22:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   16d24:	780c      	ldrb	r4, [r1, #0]
   16d26:	b12c      	cbz	r4, 16d34 <strncpy+0x16>
		*d = *s;
   16d28:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   16d2c:	3101      	adds	r1, #1
		d++;
		n--;
   16d2e:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   16d30:	2a00      	cmp	r2, #0
   16d32:	d1f7      	bne.n	16d24 <strncpy+0x6>
	}

	while (n > 0) {
   16d34:	b122      	cbz	r2, 16d40 <strncpy+0x22>
		*d = '\0';
   16d36:	2100      	movs	r1, #0
   16d38:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   16d3c:	3a01      	subs	r2, #1
   16d3e:	e7f9      	b.n	16d34 <strncpy+0x16>
	}

	return dest;
}
   16d40:	bc10      	pop	{r4}
   16d42:	4770      	bx	lr
		*d = '\0';
   16d44:	2100      	movs	r1, #0
   16d46:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   16d4a:	3a01      	subs	r2, #1
	while (n > 0) {
   16d4c:	2a00      	cmp	r2, #0
   16d4e:	d1f9      	bne.n	16d44 <strncpy+0x26>
   16d50:	4770      	bx	lr

00016d52 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   16d52:	4603      	mov	r3, r0
	size_t n = 0;
   16d54:	2000      	movs	r0, #0

	while (*s != '\0') {
   16d56:	e001      	b.n	16d5c <strlen+0xa>
		s++;
   16d58:	3301      	adds	r3, #1
		n++;
   16d5a:	3001      	adds	r0, #1
	while (*s != '\0') {
   16d5c:	781a      	ldrb	r2, [r3, #0]
   16d5e:	2a00      	cmp	r2, #0
   16d60:	d1fa      	bne.n	16d58 <strlen+0x6>
	}

	return n;
}
   16d62:	4770      	bx	lr

00016d64 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   16d64:	4603      	mov	r3, r0
	size_t n = 0;
   16d66:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   16d68:	e001      	b.n	16d6e <strnlen+0xa>
		s++;
   16d6a:	3301      	adds	r3, #1
		n++;
   16d6c:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   16d6e:	781a      	ldrb	r2, [r3, #0]
   16d70:	b10a      	cbz	r2, 16d76 <strnlen+0x12>
   16d72:	4288      	cmp	r0, r1
   16d74:	d3f9      	bcc.n	16d6a <strnlen+0x6>
	}

	return n;
}
   16d76:	4770      	bx	lr

00016d78 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   16d78:	e001      	b.n	16d7e <strcmp+0x6>
		s1++;
   16d7a:	3001      	adds	r0, #1
		s2++;
   16d7c:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   16d7e:	7803      	ldrb	r3, [r0, #0]
   16d80:	780a      	ldrb	r2, [r1, #0]
   16d82:	4293      	cmp	r3, r2
   16d84:	d101      	bne.n	16d8a <strcmp+0x12>
   16d86:	2b00      	cmp	r3, #0
   16d88:	d1f7      	bne.n	16d7a <strcmp+0x2>
	}

	return *s1 - *s2;
}
   16d8a:	1a98      	subs	r0, r3, r2
   16d8c:	4770      	bx	lr

00016d8e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   16d8e:	4613      	mov	r3, r2
   16d90:	b16a      	cbz	r2, 16dae <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   16d92:	3b01      	subs	r3, #1
   16d94:	d007      	beq.n	16da6 <memcmp+0x18>
   16d96:	f890 c000 	ldrb.w	ip, [r0]
   16d9a:	780a      	ldrb	r2, [r1, #0]
   16d9c:	4594      	cmp	ip, r2
   16d9e:	d102      	bne.n	16da6 <memcmp+0x18>
		c1++;
   16da0:	3001      	adds	r0, #1
		c2++;
   16da2:	3101      	adds	r1, #1
   16da4:	e7f5      	b.n	16d92 <memcmp+0x4>
	}

	return *c1 - *c2;
   16da6:	7800      	ldrb	r0, [r0, #0]
   16da8:	780b      	ldrb	r3, [r1, #0]
   16daa:	1ac0      	subs	r0, r0, r3
   16dac:	4770      	bx	lr
		return 0;
   16dae:	2000      	movs	r0, #0
}
   16db0:	4770      	bx	lr

00016db2 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   16db2:	ea80 0301 	eor.w	r3, r0, r1
   16db6:	f013 0f03 	tst.w	r3, #3
   16dba:	d001      	beq.n	16dc0 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   16dbc:	4603      	mov	r3, r0
   16dbe:	e023      	b.n	16e08 <memcpy+0x56>
   16dc0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   16dc2:	f013 0f03 	tst.w	r3, #3
   16dc6:	d00f      	beq.n	16de8 <memcpy+0x36>
			if (n == 0) {
   16dc8:	b30a      	cbz	r2, 16e0e <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   16dca:	f811 cb01 	ldrb.w	ip, [r1], #1
   16dce:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   16dd2:	3a01      	subs	r2, #1
   16dd4:	e7f5      	b.n	16dc2 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   16dd6:	f811 cb01 	ldrb.w	ip, [r1], #1
   16dda:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   16dde:	3a01      	subs	r2, #1
	while (n > 0) {
   16de0:	2a00      	cmp	r2, #0
   16de2:	d1f8      	bne.n	16dd6 <memcpy+0x24>
	}

	return d;
}
   16de4:	bc10      	pop	{r4}
   16de6:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   16de8:	2a03      	cmp	r2, #3
   16dea:	d90d      	bls.n	16e08 <memcpy+0x56>
{
   16dec:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   16dee:	f851 4b04 	ldr.w	r4, [r1], #4
   16df2:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   16df6:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   16df8:	2a03      	cmp	r2, #3
   16dfa:	d8f8      	bhi.n	16dee <memcpy+0x3c>
   16dfc:	e7f0      	b.n	16de0 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   16dfe:	f811 cb01 	ldrb.w	ip, [r1], #1
   16e02:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   16e06:	3a01      	subs	r2, #1
	while (n > 0) {
   16e08:	2a00      	cmp	r2, #0
   16e0a:	d1f8      	bne.n	16dfe <memcpy+0x4c>
   16e0c:	4770      	bx	lr
}
   16e0e:	4770      	bx	lr

00016e10 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   16e10:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   16e14:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   16e16:	e002      	b.n	16e1e <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   16e18:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   16e1c:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   16e1e:	f013 0f03 	tst.w	r3, #3
   16e22:	d002      	beq.n	16e2a <memset+0x1a>
		if (n == 0) {
   16e24:	2a00      	cmp	r2, #0
   16e26:	d1f7      	bne.n	16e18 <memset+0x8>
   16e28:	e00f      	b.n	16e4a <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   16e2a:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   16e2c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   16e30:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   16e34:	2a03      	cmp	r2, #3
   16e36:	d906      	bls.n	16e46 <memset+0x36>
		*(d_word++) = c_word;
   16e38:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   16e3c:	3a04      	subs	r2, #4
   16e3e:	e7f9      	b.n	16e34 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   16e40:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   16e44:	3a01      	subs	r2, #1
	while (n > 0) {
   16e46:	2a00      	cmp	r2, #0
   16e48:	d1fa      	bne.n	16e40 <memset+0x30>
	}

	return buf;
}
   16e4a:	4770      	bx	lr

00016e4c <_stdout_hook_default>:
}
   16e4c:	f04f 30ff 	mov.w	r0, #4294967295
   16e50:	4770      	bx	lr

00016e52 <sys_arch_reboot>:
{
   16e52:	b508      	push	{r3, lr}
    *p_gpregret = val;
   16e54:	b2c0      	uxtb	r0, r0
   16e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16e5a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   16e5e:	f7f7 f9b3 	bl	e1c8 <__NVIC_SystemReset>

00016e62 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   16e62:	2301      	movs	r3, #1
   16e64:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   16e68:	f3bf 8f4f 	dsb	sy
        __WFE();
   16e6c:	bf20      	wfe
    while (true)
   16e6e:	e7fd      	b.n	16e6c <nrf_power_system_off+0xa>

00016e70 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   16e70:	2806      	cmp	r0, #6
   16e72:	d000      	beq.n	16e76 <pm_state_set+0x6>
   16e74:	4770      	bx	lr
{
   16e76:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   16e78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   16e7c:	f7ff fff1 	bl	16e62 <nrf_power_system_off>

00016e80 <pm_state_exit_post_ops>:
   16e80:	2300      	movs	r3, #0
   16e82:	f383 8811 	msr	BASEPRI, r3
   16e86:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   16e8a:	4770      	bx	lr

00016e8c <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   16e8c:	b510      	push	{r4, lr}
   16e8e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   16e90:	2301      	movs	r3, #1
   16e92:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   16e96:	2106      	movs	r1, #6
   16e98:	f7fb ff68 	bl	12d6c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   16e9c:	b918      	cbnz	r0, 16ea6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   16e9e:	79a3      	ldrb	r3, [r4, #6]
   16ea0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16ea4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   16ea6:	bd10      	pop	{r4, pc}

00016ea8 <sys_put_le64>:
	dst[0] = val;
   16ea8:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   16eaa:	f3c0 2307 	ubfx	r3, r0, #8, #8
   16eae:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   16eb0:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   16eb2:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   16eb4:	0e00      	lsrs	r0, r0, #24
   16eb6:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   16eb8:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   16eba:	f3c1 2307 	ubfx	r3, r1, #8, #8
   16ebe:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   16ec0:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   16ec2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   16ec4:	0e09      	lsrs	r1, r1, #24
   16ec6:	71d1      	strb	r1, [r2, #7]
}
   16ec8:	4770      	bx	lr

00016eca <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
   16eca:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   16ecc:	79c3      	ldrb	r3, [r0, #7]
   16ece:	7981      	ldrb	r1, [r0, #6]
   16ed0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   16ed4:	7942      	ldrb	r2, [r0, #5]
   16ed6:	7903      	ldrb	r3, [r0, #4]
   16ed8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16edc:	78c2      	ldrb	r2, [r0, #3]
   16ede:	f890 c002 	ldrb.w	ip, [r0, #2]
   16ee2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   16ee6:	f890 e001 	ldrb.w	lr, [r0, #1]
   16eea:	7802      	ldrb	r2, [r0, #0]
   16eec:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
   16ef0:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   16ef4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   16ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00016efc <hci_vendor_event>:
}
   16efc:	4770      	bx	lr

00016efe <bt_br_init>:
}
   16efe:	2000      	movs	r0, #0
   16f00:	4770      	bx	lr

00016f02 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16f02:	f001 0c1f 	and.w	ip, r1, #31
   16f06:	2301      	movs	r3, #1
   16f08:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   16f0c:	b172      	cbz	r2, 16f2c <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16f0e:	0949      	lsrs	r1, r1, #5
   16f10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16f14:	f3bf 8f5b 	dmb	ish
   16f18:	e850 2f00 	ldrex	r2, [r0]
   16f1c:	431a      	orrs	r2, r3
   16f1e:	e840 2100 	strex	r1, r2, [r0]
   16f22:	2900      	cmp	r1, #0
   16f24:	d1f8      	bne.n	16f18 <atomic_set_bit_to+0x16>
   16f26:	f3bf 8f5b 	dmb	ish
   16f2a:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16f2c:	0949      	lsrs	r1, r1, #5
   16f2e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16f32:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f34:	f3bf 8f5b 	dmb	ish
   16f38:	e850 2f00 	ldrex	r2, [r0]
   16f3c:	401a      	ands	r2, r3
   16f3e:	e840 2100 	strex	r1, r2, [r0]
   16f42:	2900      	cmp	r1, #0
   16f44:	d1f8      	bne.n	16f38 <atomic_set_bit_to+0x36>
   16f46:	f3bf 8f5b 	dmb	ish
	}
}
   16f4a:	4770      	bx	lr

00016f4c <le_set_event_mask>:
{
   16f4c:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   16f4e:	2108      	movs	r1, #8
   16f50:	f242 0001 	movw	r0, #8193	; 0x2001
   16f54:	f7f8 f8aa 	bl	f0ac <bt_hci_cmd_create>
	if (!buf) {
   16f58:	b180      	cbz	r0, 16f7c <le_set_event_mask+0x30>
   16f5a:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   16f5c:	2108      	movs	r1, #8
   16f5e:	300c      	adds	r0, #12
   16f60:	f000 fb0e 	bl	17580 <net_buf_simple_add>
   16f64:	4602      	mov	r2, r0
	sys_put_le64(mask, cp_mask->events);
   16f66:	2002      	movs	r0, #2
   16f68:	2100      	movs	r1, #0
   16f6a:	f7ff ff9d 	bl	16ea8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   16f6e:	2200      	movs	r2, #0
   16f70:	4621      	mov	r1, r4
   16f72:	f242 0001 	movw	r0, #8193	; 0x2001
   16f76:	f7f8 f8d7 	bl	f128 <bt_hci_cmd_send_sync>
}
   16f7a:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   16f7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16f80:	e7fb      	b.n	16f7a <le_set_event_mask+0x2e>

00016f82 <bt_init>:
{
   16f82:	b510      	push	{r4, lr}
	err = hci_init();
   16f84:	f7f8 fce2 	bl	f94c <hci_init>
	if (err) {
   16f88:	4604      	mov	r4, r0
   16f8a:	b108      	cbz	r0, 16f90 <bt_init+0xe>
}
   16f8c:	4620      	mov	r0, r4
   16f8e:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   16f90:	f7f8 ff9a 	bl	fec8 <bt_finalize_init>
	return 0;
   16f94:	e7fa      	b.n	16f8c <bt_init+0xa>

00016f96 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   16f96:	b128      	cbz	r0, 16fa4 <bt_id_set_adv_random_addr+0xe>
   16f98:	b139      	cbz	r1, 16faa <bt_id_set_adv_random_addr+0x14>
{
   16f9a:	b508      	push	{r3, lr}
		return set_random_address(addr);
   16f9c:	4608      	mov	r0, r1
   16f9e:	f7f9 f95d 	bl	1025c <set_random_address>
}
   16fa2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   16fa4:	f06f 0015 	mvn.w	r0, #21
   16fa8:	4770      	bx	lr
   16faa:	f06f 0015 	mvn.w	r0, #21
}
   16fae:	4770      	bx	lr

00016fb0 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   16fb0:	b1a0      	cbz	r0, 16fdc <bt_id_set_adv_private_addr+0x2c>
{
   16fb2:	b510      	push	{r4, lr}
   16fb4:	b082      	sub	sp, #8
   16fb6:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   16fb8:	2106      	movs	r1, #6
   16fba:	4668      	mov	r0, sp
   16fbc:	f7fb fed6 	bl	12d6c <bt_rand>
	if (err) {
   16fc0:	b108      	cbz	r0, 16fc6 <bt_id_set_adv_private_addr+0x16>
}
   16fc2:	b002      	add	sp, #8
   16fc4:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   16fc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16fce:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   16fd2:	4669      	mov	r1, sp
   16fd4:	4620      	mov	r0, r4
   16fd6:	f7ff ffde 	bl	16f96 <bt_id_set_adv_random_addr>
	if (err) {
   16fda:	e7f2      	b.n	16fc2 <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   16fdc:	f06f 0015 	mvn.w	r0, #21
}
   16fe0:	4770      	bx	lr

00016fe2 <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   16fe2:	b100      	cbz	r0, 16fe6 <bt_id_adv_random_addr_check+0x4>
		return true;
   16fe4:	2001      	movs	r0, #1
}
   16fe6:	4770      	bx	lr

00016fe8 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   16fe8:	2300      	movs	r3, #0
   16fea:	428b      	cmp	r3, r1
   16fec:	d219      	bcs.n	17022 <ad_is_limited+0x3a>
{
   16fee:	b500      	push	{lr}
   16ff0:	e002      	b.n	16ff8 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   16ff2:	3301      	adds	r3, #1
   16ff4:	428b      	cmp	r3, r1
   16ff6:	d211      	bcs.n	1701c <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   16ff8:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   16ffc:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   17000:	f240 1201 	movw	r2, #257	; 0x101
   17004:	4594      	cmp	ip, r2
   17006:	d1f4      	bne.n	16ff2 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   17008:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1700c:	2a00      	cmp	r2, #0
   1700e:	d0f0      	beq.n	16ff2 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   17010:	7812      	ldrb	r2, [r2, #0]
   17012:	f012 0f01 	tst.w	r2, #1
   17016:	d0ec      	beq.n	16ff2 <ad_is_limited+0xa>
				return true;
   17018:	2001      	movs	r0, #1
   1701a:	e000      	b.n	1701e <ad_is_limited+0x36>
	return false;
   1701c:	2000      	movs	r0, #0
}
   1701e:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   17022:	2000      	movs	r0, #0
}
   17024:	4770      	bx	lr

00017026 <get_filter_policy>:
}
   17026:	2000      	movs	r0, #0
   17028:	4770      	bx	lr

0001702a <get_adv_channel_map>:
{
   1702a:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   1702c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   17030:	d10b      	bne.n	1704a <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   17032:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   17034:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17038:	d001      	beq.n	1703e <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   1703a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1703e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   17042:	d001      	beq.n	17048 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   17044:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   17048:	4770      	bx	lr
		channel_map &= ~0x01;
   1704a:	2006      	movs	r0, #6
   1704c:	e7f2      	b.n	17034 <get_adv_channel_map+0xa>

0001704e <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1704e:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17050:	f3bf 8f5b 	dmb	ish
   17054:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   17058:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1705c:	f001 011f 	and.w	r1, r1, #31
   17060:	4108      	asrs	r0, r1
}
   17062:	f000 0001 	and.w	r0, r0, #1
   17066:	4770      	bx	lr

00017068 <hci_set_ad>:
{
   17068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1706c:	b082      	sub	sp, #8
   1706e:	4607      	mov	r7, r0
   17070:	460d      	mov	r5, r1
   17072:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17074:	2120      	movs	r1, #32
   17076:	f7f8 f819 	bl	f0ac <bt_hci_cmd_create>
	if (!buf) {
   1707a:	b300      	cbz	r0, 170be <hci_set_ad+0x56>
   1707c:	4680      	mov	r8, r0
   1707e:	2120      	movs	r1, #32
   17080:	300c      	adds	r0, #12
   17082:	f000 fa7d 	bl	17580 <net_buf_simple_add>
   17086:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   17088:	2220      	movs	r2, #32
   1708a:	2100      	movs	r1, #0
   1708c:	f7ff fec0 	bl	16e10 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   17090:	9400      	str	r4, [sp, #0]
   17092:	4633      	mov	r3, r6
   17094:	462a      	mov	r2, r5
   17096:	211f      	movs	r1, #31
   17098:	1c60      	adds	r0, r4, #1
   1709a:	f7f9 fd0f 	bl	10abc <set_data_add_complete>
	if (err) {
   1709e:	4604      	mov	r4, r0
   170a0:	b948      	cbnz	r0, 170b6 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   170a2:	2200      	movs	r2, #0
   170a4:	4641      	mov	r1, r8
   170a6:	4638      	mov	r0, r7
   170a8:	f7f8 f83e 	bl	f128 <bt_hci_cmd_send_sync>
   170ac:	4604      	mov	r4, r0
}
   170ae:	4620      	mov	r0, r4
   170b0:	b002      	add	sp, #8
   170b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   170b6:	4640      	mov	r0, r8
   170b8:	f000 fa37 	bl	1752a <net_buf_unref>
		return err;
   170bc:	e7f7      	b.n	170ae <hci_set_ad+0x46>
		return -ENOBUFS;
   170be:	f06f 0468 	mvn.w	r4, #104	; 0x68
   170c2:	e7f4      	b.n	170ae <hci_set_ad+0x46>

000170c4 <set_ad>:
{
   170c4:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   170c6:	f242 0008 	movw	r0, #8200	; 0x2008
   170ca:	f7ff ffcd 	bl	17068 <hci_set_ad>
}
   170ce:	bd08      	pop	{r3, pc}

000170d0 <set_sd>:
{
   170d0:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   170d2:	f242 0009 	movw	r0, #8201	; 0x2009
   170d6:	f7ff ffc7 	bl	17068 <hci_set_ad>
}
   170da:	bd08      	pop	{r3, pc}

000170dc <le_adv_update>:
{
   170dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170e0:	b089      	sub	sp, #36	; 0x24
   170e2:	4604      	mov	r4, r0
   170e4:	460e      	mov	r6, r1
   170e6:	4617      	mov	r7, r2
   170e8:	461d      	mov	r5, r3
   170ea:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   170ee:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   170f2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   170f6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   170fa:	2300      	movs	r3, #0
   170fc:	9304      	str	r3, [sp, #16]
   170fe:	9305      	str	r3, [sp, #20]
   17100:	9306      	str	r3, [sp, #24]
   17102:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   17104:	f1b9 0f00 	cmp.w	r9, #0
   17108:	d133      	bne.n	17172 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   1710a:	f1ba 0f00 	cmp.w	sl, #0
   1710e:	d002      	beq.n	17116 <le_adv_update+0x3a>
   17110:	f1bb 0f00 	cmp.w	fp, #0
   17114:	d10e      	bne.n	17134 <le_adv_update+0x58>
		d[0].data = ad;
   17116:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   17118:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   1711a:	f1b9 0f01 	cmp.w	r9, #1
   1711e:	d056      	beq.n	171ce <le_adv_update+0xf2>
		d_len = 1;
   17120:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   17122:	a904      	add	r1, sp, #16
   17124:	4620      	mov	r0, r4
   17126:	f7ff ffcd 	bl	170c4 <set_ad>
		if (err) {
   1712a:	4603      	mov	r3, r0
   1712c:	b9e8      	cbnz	r0, 1716a <le_adv_update+0x8e>
	if (scannable) {
   1712e:	f1bb 0f00 	cmp.w	fp, #0
   17132:	d00c      	beq.n	1714e <le_adv_update+0x72>
		d[0].data = sd;
   17134:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   17136:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   1713a:	f1b9 0f02 	cmp.w	r9, #2
   1713e:	d04c      	beq.n	171da <le_adv_update+0xfe>
		d_len = 1;
   17140:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   17142:	a904      	add	r1, sp, #16
   17144:	4620      	mov	r0, r4
   17146:	f7ff ffc3 	bl	170d0 <set_sd>
		if (err) {
   1714a:	4603      	mov	r3, r0
   1714c:	b968      	cbnz	r0, 1716a <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   1714e:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17150:	f3bf 8f5b 	dmb	ish
   17154:	e854 3f00 	ldrex	r3, [r4]
   17158:	f043 0304 	orr.w	r3, r3, #4
   1715c:	e844 3200 	strex	r2, r3, [r4]
   17160:	2a00      	cmp	r2, #0
   17162:	d1f7      	bne.n	17154 <le_adv_update+0x78>
   17164:	f3bf 8f5b 	dmb	ish
	return 0;
   17168:	2300      	movs	r3, #0
}
   1716a:	4618      	mov	r0, r3
   1716c:	b009      	add	sp, #36	; 0x24
   1716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   17172:	f7f9 f853 	bl	1021c <bt_get_name>
   17176:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   17178:	b166      	cbz	r6, 17194 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   1717a:	2200      	movs	r2, #0
   1717c:	4297      	cmp	r7, r2
   1717e:	d907      	bls.n	17190 <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   17180:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   17184:	3b08      	subs	r3, #8
   17186:	b2db      	uxtb	r3, r3
   17188:	2b01      	cmp	r3, #1
   1718a:	d90f      	bls.n	171ac <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   1718c:	3201      	adds	r2, #1
   1718e:	e7f5      	b.n	1717c <le_adv_update+0xa0>
	return false;
   17190:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   17192:	bb43      	cbnz	r3, 171e6 <le_adv_update+0x10a>
   17194:	b175      	cbz	r5, 171b4 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   17196:	2200      	movs	r2, #0
   17198:	4590      	cmp	r8, r2
   1719a:	d909      	bls.n	171b0 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1719c:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   171a0:	3b08      	subs	r3, #8
   171a2:	b2db      	uxtb	r3, r3
   171a4:	2b01      	cmp	r3, #1
   171a6:	d910      	bls.n	171ca <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   171a8:	3201      	adds	r2, #1
   171aa:	e7f5      	b.n	17198 <le_adv_update+0xbc>
			return true;
   171ac:	2301      	movs	r3, #1
   171ae:	e7f0      	b.n	17192 <le_adv_update+0xb6>
	return false;
   171b0:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   171b2:	b9db      	cbnz	r3, 171ec <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   171b4:	9801      	ldr	r0, [sp, #4]
   171b6:	f7ff fdcc 	bl	16d52 <strlen>
   171ba:	2309      	movs	r3, #9
   171bc:	f88d 3008 	strb.w	r3, [sp, #8]
   171c0:	f88d 0009 	strb.w	r0, [sp, #9]
   171c4:	9b01      	ldr	r3, [sp, #4]
   171c6:	9303      	str	r3, [sp, #12]
   171c8:	e79f      	b.n	1710a <le_adv_update+0x2e>
			return true;
   171ca:	2301      	movs	r3, #1
   171cc:	e7f1      	b.n	171b2 <le_adv_update+0xd6>
			d[1].data = &data;
   171ce:	ab02      	add	r3, sp, #8
   171d0:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   171d2:	2301      	movs	r3, #1
   171d4:	9307      	str	r3, [sp, #28]
			d_len = 2;
   171d6:	2202      	movs	r2, #2
   171d8:	e7a3      	b.n	17122 <le_adv_update+0x46>
			d[1].data = &data;
   171da:	ab02      	add	r3, sp, #8
   171dc:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   171de:	2301      	movs	r3, #1
   171e0:	9307      	str	r3, [sp, #28]
			d_len = 2;
   171e2:	2202      	movs	r2, #2
   171e4:	e7ad      	b.n	17142 <le_adv_update+0x66>
			return -EINVAL;
   171e6:	f06f 0315 	mvn.w	r3, #21
   171ea:	e7be      	b.n	1716a <le_adv_update+0x8e>
   171ec:	f06f 0315 	mvn.w	r3, #21
   171f0:	e7bb      	b.n	1716a <le_adv_update+0x8e>

000171f2 <valid_adv_param>:
{
   171f2:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   171f4:	6843      	ldr	r3, [r0, #4]
   171f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   171fa:	d107      	bne.n	1720c <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   171fc:	6902      	ldr	r2, [r0, #16]
   171fe:	b112      	cbz	r2, 17206 <valid_adv_param+0x14>
   17200:	f013 0f01 	tst.w	r3, #1
   17204:	d004      	beq.n	17210 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   17206:	f7f9 fce7 	bl	10bd8 <valid_adv_ext_param>
}
   1720a:	bd08      	pop	{r3, pc}
		return false;
   1720c:	2000      	movs	r0, #0
   1720e:	e7fc      	b.n	1720a <valid_adv_param+0x18>
		return false;
   17210:	2000      	movs	r0, #0
   17212:	e7fa      	b.n	1720a <valid_adv_param+0x18>

00017214 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   17214:	f001 0c1f 	and.w	ip, r1, #31
   17218:	2301      	movs	r3, #1
   1721a:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   1721e:	b172      	cbz	r2, 1723e <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17220:	0949      	lsrs	r1, r1, #5
   17222:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17226:	f3bf 8f5b 	dmb	ish
   1722a:	e850 2f00 	ldrex	r2, [r0]
   1722e:	431a      	orrs	r2, r3
   17230:	e840 2100 	strex	r1, r2, [r0]
   17234:	2900      	cmp	r1, #0
   17236:	d1f8      	bne.n	1722a <atomic_set_bit_to+0x16>
   17238:	f3bf 8f5b 	dmb	ish
   1723c:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1723e:	0949      	lsrs	r1, r1, #5
   17240:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17244:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17246:	f3bf 8f5b 	dmb	ish
   1724a:	e850 2f00 	ldrex	r2, [r0]
   1724e:	401a      	ands	r2, r3
   17250:	e840 2100 	strex	r1, r2, [r0]
   17254:	2900      	cmp	r1, #0
   17256:	d1f8      	bne.n	1724a <atomic_set_bit_to+0x36>
   17258:	f3bf 8f5b 	dmb	ish
}
   1725c:	4770      	bx	lr

0001725e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1725e:	6843      	ldr	r3, [r0, #4]
   17260:	f013 0f08 	tst.w	r3, #8
   17264:	d00b      	beq.n	1727e <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   17266:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1726a:	d10a      	bne.n	17282 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1726c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   17270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17274:	d001      	beq.n	1727a <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   17276:	2002      	movs	r0, #2
}
   17278:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1727a:	2001      	movs	r0, #1
   1727c:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   1727e:	2000      	movs	r0, #0
   17280:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   17282:	2001      	movs	r0, #1
   17284:	4770      	bx	lr

00017286 <bt_le_adv_set_enable_legacy>:
{
   17286:	b570      	push	{r4, r5, r6, lr}
   17288:	b086      	sub	sp, #24
   1728a:	4605      	mov	r5, r0
   1728c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1728e:	2101      	movs	r1, #1
   17290:	f242 000a 	movw	r0, #8202	; 0x200a
   17294:	f7f7 ff0a 	bl	f0ac <bt_hci_cmd_create>
	if (!buf) {
   17298:	b1d0      	cbz	r0, 172d0 <bt_le_adv_set_enable_legacy+0x4a>
   1729a:	4606      	mov	r6, r0
	if (enable) {
   1729c:	b19c      	cbz	r4, 172c6 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1729e:	2101      	movs	r1, #1
   172a0:	300c      	adds	r0, #12
   172a2:	f000 f97e 	bl	175a2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   172a6:	9400      	str	r4, [sp, #0]
   172a8:	2307      	movs	r3, #7
   172aa:	f105 0210 	add.w	r2, r5, #16
   172ae:	a903      	add	r1, sp, #12
   172b0:	4630      	mov	r0, r6
   172b2:	f7f7 fee9 	bl	f088 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   172b6:	2200      	movs	r2, #0
   172b8:	4631      	mov	r1, r6
   172ba:	f242 000a 	movw	r0, #8202	; 0x200a
   172be:	f7f7 ff33 	bl	f128 <bt_hci_cmd_send_sync>
}
   172c2:	b006      	add	sp, #24
   172c4:	bd70      	pop	{r4, r5, r6, pc}
   172c6:	2100      	movs	r1, #0
   172c8:	300c      	adds	r0, #12
   172ca:	f000 f96a 	bl	175a2 <net_buf_simple_add_u8>
   172ce:	e7ea      	b.n	172a6 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   172d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   172d4:	e7f5      	b.n	172c2 <bt_le_adv_set_enable_legacy+0x3c>

000172d6 <bt_le_adv_set_enable>:
{
   172d6:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   172d8:	f7ff ffd5 	bl	17286 <bt_le_adv_set_enable_legacy>
}
   172dc:	bd08      	pop	{r3, pc}

000172de <bt_le_lim_adv_cancel_timeout>:
{
   172de:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   172e0:	3018      	adds	r0, #24
   172e2:	f001 fdd4 	bl	18e8e <k_work_cancel_delayable>
}
   172e6:	bd08      	pop	{r3, pc}

000172e8 <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   172e8:	b538      	push	{r3, r4, r5, lr}
   172ea:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   172ec:	7f03      	ldrb	r3, [r0, #28]
   172ee:	331b      	adds	r3, #27
   172f0:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   172f4:	8b02      	ldrh	r2, [r0, #24]
   172f6:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   172f8:	6a85      	ldr	r5, [r0, #40]	; 0x28
   172fa:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   172fe:	f7f9 ff07 	bl	11110 <pool_id>
   17302:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   17304:	7f23      	ldrb	r3, [r4, #28]
   17306:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   17308:	4628      	mov	r0, r5
   1730a:	bd38      	pop	{r3, r4, r5, pc}

0001730c <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1730c:	4770      	bx	lr

0001730e <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17312:	4604      	mov	r4, r0
   17314:	460d      	mov	r5, r1
   17316:	4617      	mov	r7, r2
   17318:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1731a:	7a80      	ldrb	r0, [r0, #10]
   1731c:	f7f9 ff04 	bl	11128 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   17320:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17322:	681b      	ldr	r3, [r3, #0]
   17324:	f8d3 8000 	ldr.w	r8, [r3]
   17328:	463a      	mov	r2, r7
   1732a:	4633      	mov	r3, r6
   1732c:	4629      	mov	r1, r5
   1732e:	4620      	mov	r0, r4
   17330:	47c0      	blx	r8
}
   17332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017336 <net_buf_destroy>:
{
   17336:	b510      	push	{r4, lr}
   17338:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1733a:	7a80      	ldrb	r0, [r0, #10]
   1733c:	f7f9 fef4 	bl	11128 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   17340:	4621      	mov	r1, r4
   17342:	f001 fc6a 	bl	18c1a <k_queue_prepend>
}
   17346:	bd10      	pop	{r4, pc}

00017348 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   17348:	b538      	push	{r3, r4, r5, lr}
   1734a:	4604      	mov	r4, r0
   1734c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1734e:	7a80      	ldrb	r0, [r0, #10]
   17350:	f7f9 feea 	bl	11128 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   17354:	7a63      	ldrb	r3, [r4, #9]
   17356:	f013 0f01 	tst.w	r3, #1
   1735a:	d105      	bne.n	17368 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1735c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1735e:	681b      	ldr	r3, [r3, #0]
   17360:	689b      	ldr	r3, [r3, #8]
   17362:	4629      	mov	r1, r5
   17364:	4620      	mov	r0, r4
   17366:	4798      	blx	r3
}
   17368:	bd38      	pop	{r3, r4, r5, pc}

0001736a <net_buf_id>:
{
   1736a:	b510      	push	{r4, lr}
   1736c:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1736e:	7a80      	ldrb	r0, [r0, #10]
   17370:	f7f9 feda 	bl	11128 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17374:	7f03      	ldrb	r3, [r0, #28]
   17376:	331b      	adds	r3, #27
   17378:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1737c:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1737e:	1aa4      	subs	r4, r4, r2
}
   17380:	fbb4 f0f3 	udiv	r0, r4, r3
   17384:	bd10      	pop	{r4, pc}

00017386 <fixed_data_alloc>:
{
   17386:	b570      	push	{r4, r5, r6, lr}
   17388:	4604      	mov	r4, r0
   1738a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1738c:	7a80      	ldrb	r0, [r0, #10]
   1738e:	f7f9 fecb 	bl	11128 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17392:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17394:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   17396:	682a      	ldr	r2, [r5, #0]
   17398:	6819      	ldr	r1, [r3, #0]
   1739a:	428a      	cmp	r2, r1
   1739c:	bf28      	it	cs
   1739e:	460a      	movcs	r2, r1
   173a0:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   173a2:	685d      	ldr	r5, [r3, #4]
   173a4:	681e      	ldr	r6, [r3, #0]
   173a6:	4620      	mov	r0, r4
   173a8:	f7ff ffdf 	bl	1736a <net_buf_id>
}
   173ac:	fb00 5006 	mla	r0, r0, r6, r5
   173b0:	bd70      	pop	{r4, r5, r6, pc}

000173b2 <net_buf_reset>:
	buf->len  = 0U;
   173b2:	2300      	movs	r3, #0
   173b4:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   173b6:	6943      	ldr	r3, [r0, #20]
   173b8:	60c3      	str	r3, [r0, #12]
}
   173ba:	4770      	bx	lr

000173bc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   173bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173c0:	b082      	sub	sp, #8
   173c2:	4605      	mov	r5, r0
   173c4:	9101      	str	r1, [sp, #4]
   173c6:	4616      	mov	r6, r2
   173c8:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   173ca:	4610      	mov	r0, r2
   173cc:	4619      	mov	r1, r3
   173ce:	f001 ff7c 	bl	192ca <sys_clock_timeout_end_calc>
   173d2:	4681      	mov	r9, r0
   173d4:	468a      	mov	sl, r1
	__asm__ volatile(
   173d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   173da:	f3ef 8311 	mrs	r3, BASEPRI
   173de:	f382 8812 	msr	BASEPRI_MAX, r2
   173e2:	f3bf 8f6f 	isb	sy
   173e6:	461a      	mov	r2, r3
   173e8:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   173ea:	8b6b      	ldrh	r3, [r5, #26]
   173ec:	b393      	cbz	r3, 17454 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   173ee:	8b2a      	ldrh	r2, [r5, #24]
   173f0:	4293      	cmp	r3, r2
   173f2:	d20b      	bcs.n	1740c <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   173f4:	2200      	movs	r2, #0
   173f6:	2300      	movs	r3, #0
   173f8:	4628      	mov	r0, r5
   173fa:	f7fc fff1 	bl	143e0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   173fe:	4604      	mov	r4, r0
   17400:	b120      	cbz	r0, 1740c <net_buf_alloc_len+0x50>
	__asm__ volatile(
   17402:	f388 8811 	msr	BASEPRI, r8
   17406:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1740a:	e00a      	b.n	17422 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   1740c:	8b69      	ldrh	r1, [r5, #26]
   1740e:	1e4b      	subs	r3, r1, #1
   17410:	836b      	strh	r3, [r5, #26]
   17412:	f388 8811 	msr	BASEPRI, r8
   17416:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   1741a:	4628      	mov	r0, r5
   1741c:	f7ff ff64 	bl	172e8 <pool_get_uninit>
   17420:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17422:	9b01      	ldr	r3, [sp, #4]
   17424:	b3a3      	cbz	r3, 17490 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   17426:	ea56 0307 	orrs.w	r3, r6, r7
   1742a:	d005      	beq.n	17438 <net_buf_alloc_len+0x7c>
   1742c:	f1b7 3fff 	cmp.w	r7, #4294967295
   17430:	bf08      	it	eq
   17432:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17436:	d11a      	bne.n	1746e <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17438:	4632      	mov	r2, r6
   1743a:	463b      	mov	r3, r7
   1743c:	a901      	add	r1, sp, #4
   1743e:	4620      	mov	r0, r4
   17440:	f7ff ff65 	bl	1730e <data_alloc>
   17444:	4605      	mov	r5, r0
   17446:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   17448:	bb20      	cbnz	r0, 17494 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   1744a:	4620      	mov	r0, r4
   1744c:	f7ff ff73 	bl	17336 <net_buf_destroy>
			return NULL;
   17450:	462c      	mov	r4, r5
   17452:	e029      	b.n	174a8 <net_buf_alloc_len+0xec>
   17454:	f382 8811 	msr	BASEPRI, r2
   17458:	f3bf 8f6f 	isb	sy
   1745c:	4632      	mov	r2, r6
   1745e:	463b      	mov	r3, r7
   17460:	4628      	mov	r0, r5
   17462:	f7fc ffbd 	bl	143e0 <z_impl_k_queue_get>
	if (!buf) {
   17466:	4604      	mov	r4, r0
   17468:	2800      	cmp	r0, #0
   1746a:	d1da      	bne.n	17422 <net_buf_alloc_len+0x66>
   1746c:	e01c      	b.n	174a8 <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   1746e:	f7fd fe8b 	bl	15188 <sys_clock_tick_get>
   17472:	ebb9 0900 	subs.w	r9, r9, r0
   17476:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   1747a:	f1b9 0f01 	cmp.w	r9, #1
   1747e:	f17a 0300 	sbcs.w	r3, sl, #0
   17482:	db02      	blt.n	1748a <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   17484:	464e      	mov	r6, r9
   17486:	4657      	mov	r7, sl
   17488:	e7d6      	b.n	17438 <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   1748a:	2600      	movs	r6, #0
   1748c:	4637      	mov	r7, r6
   1748e:	e7d3      	b.n	17438 <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   17490:	2300      	movs	r3, #0
   17492:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   17494:	2301      	movs	r3, #1
   17496:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   17498:	2300      	movs	r3, #0
   1749a:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   1749c:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   1749e:	9b01      	ldr	r3, [sp, #4]
   174a0:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   174a2:	4620      	mov	r0, r4
   174a4:	f7ff ff85 	bl	173b2 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   174a8:	4620      	mov	r0, r4
   174aa:	b002      	add	sp, #8
   174ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000174b0 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   174b0:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   174b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   174b4:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   174b6:	6809      	ldr	r1, [r1, #0]
   174b8:	f7ff ff80 	bl	173bc <net_buf_alloc_len>
}
   174bc:	bd08      	pop	{r3, pc}

000174be <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   174be:	b508      	push	{r3, lr}
   174c0:	f7fc ff8e 	bl	143e0 <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   174c4:	bd08      	pop	{r3, pc}

000174c6 <net_buf_slist_put>:
	__asm__ volatile(
   174c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   174ca:	f3ef 8311 	mrs	r3, BASEPRI
   174ce:	f382 8812 	msr	BASEPRI_MAX, r2
   174d2:	f3bf 8f6f 	isb	sy
	parent->next = child;
   174d6:	2200      	movs	r2, #0
   174d8:	600a      	str	r2, [r1, #0]
	return list->tail;
   174da:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   174dc:	b132      	cbz	r2, 174ec <net_buf_slist_put+0x26>
	parent->next = child;
   174de:	6011      	str	r1, [r2, #0]
	list->tail = node;
   174e0:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   174e2:	f383 8811 	msr	BASEPRI, r3
   174e6:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   174ea:	4770      	bx	lr
   174ec:	6041      	str	r1, [r0, #4]
	list->head = node;
   174ee:	6001      	str	r1, [r0, #0]
}
   174f0:	e7f7      	b.n	174e2 <net_buf_slist_put+0x1c>

000174f2 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   174f2:	4603      	mov	r3, r0
	__asm__ volatile(
   174f4:	f04f 0140 	mov.w	r1, #64	; 0x40
   174f8:	f3ef 8211 	mrs	r2, BASEPRI
   174fc:	f381 8812 	msr	BASEPRI_MAX, r1
   17500:	f3bf 8f6f 	isb	sy
	return list->head;
   17504:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   17506:	b128      	cbz	r0, 17514 <net_buf_slist_get+0x22>
	return node->next;
   17508:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   1750a:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1750c:	f8d3 c004 	ldr.w	ip, [r3, #4]
   17510:	4560      	cmp	r0, ip
   17512:	d004      	beq.n	1751e <net_buf_slist_get+0x2c>
	__asm__ volatile(
   17514:	f382 8811 	msr	BASEPRI, r2
   17518:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1751c:	4770      	bx	lr
	list->tail = node;
   1751e:	6059      	str	r1, [r3, #4]
}
   17520:	e7f8      	b.n	17514 <net_buf_slist_get+0x22>

00017522 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17522:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   17524:	f001 fb6d 	bl	18c02 <k_queue_append>
}
   17528:	bd08      	pop	{r3, pc}

0001752a <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1752a:	b538      	push	{r3, r4, r5, lr}
   1752c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   1752e:	e00a      	b.n	17546 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   17530:	2300      	movs	r3, #0
   17532:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   17534:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   17536:	7aa0      	ldrb	r0, [r4, #10]
   17538:	f7f9 fdf6 	bl	11128 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1753c:	6a03      	ldr	r3, [r0, #32]
   1753e:	b193      	cbz	r3, 17566 <net_buf_unref+0x3c>
			pool->destroy(buf);
   17540:	4620      	mov	r0, r4
   17542:	4798      	blx	r3
{
   17544:	462c      	mov	r4, r5
	while (buf) {
   17546:	b194      	cbz	r4, 1756e <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   17548:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   1754a:	7a23      	ldrb	r3, [r4, #8]
   1754c:	3b01      	subs	r3, #1
   1754e:	b2db      	uxtb	r3, r3
   17550:	7223      	strb	r3, [r4, #8]
   17552:	b963      	cbnz	r3, 1756e <net_buf_unref+0x44>
		if (buf->__buf) {
   17554:	6961      	ldr	r1, [r4, #20]
   17556:	2900      	cmp	r1, #0
   17558:	d0ea      	beq.n	17530 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   1755a:	4620      	mov	r0, r4
   1755c:	f7ff fef4 	bl	17348 <data_unref>
			buf->__buf = NULL;
   17560:	2300      	movs	r3, #0
   17562:	6163      	str	r3, [r4, #20]
   17564:	e7e4      	b.n	17530 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   17566:	4620      	mov	r0, r4
   17568:	f7ff fee5 	bl	17336 <net_buf_destroy>
   1756c:	e7ea      	b.n	17544 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   1756e:	bd38      	pop	{r3, r4, r5, pc}

00017570 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17570:	7a02      	ldrb	r2, [r0, #8]
   17572:	3201      	adds	r2, #1
   17574:	7202      	strb	r2, [r0, #8]
	return buf;
}
   17576:	4770      	bx	lr

00017578 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17578:	6883      	ldr	r3, [r0, #8]
   1757a:	440b      	add	r3, r1
   1757c:	6003      	str	r3, [r0, #0]
}
   1757e:	4770      	bx	lr

00017580 <net_buf_simple_add>:
	return buf->data + buf->len;
   17580:	6802      	ldr	r2, [r0, #0]
   17582:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   17584:	4419      	add	r1, r3
   17586:	8081      	strh	r1, [r0, #4]
	return tail;
}
   17588:	18d0      	adds	r0, r2, r3
   1758a:	4770      	bx	lr

0001758c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1758c:	b538      	push	{r3, r4, r5, lr}
   1758e:	460d      	mov	r5, r1
   17590:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17592:	4611      	mov	r1, r2
   17594:	f7ff fff4 	bl	17580 <net_buf_simple_add>
   17598:	4622      	mov	r2, r4
   1759a:	4629      	mov	r1, r5
   1759c:	f7ff fc09 	bl	16db2 <memcpy>
}
   175a0:	bd38      	pop	{r3, r4, r5, pc}

000175a2 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   175a2:	b510      	push	{r4, lr}
   175a4:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   175a6:	2101      	movs	r1, #1
   175a8:	f7ff ffea 	bl	17580 <net_buf_simple_add>
	*u8 = val;
   175ac:	7004      	strb	r4, [r0, #0]

	return u8;
}
   175ae:	bd10      	pop	{r4, pc}

000175b0 <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   175b0:	4603      	mov	r3, r0
	void *data = buf->data;
   175b2:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   175b4:	889a      	ldrh	r2, [r3, #4]
   175b6:	1a52      	subs	r2, r2, r1
   175b8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   175ba:	4401      	add	r1, r0
   175bc:	6019      	str	r1, [r3, #0]

	return data;
}
   175be:	4770      	bx	lr

000175c0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   175c0:	6802      	ldr	r2, [r0, #0]
   175c2:	6880      	ldr	r0, [r0, #8]
}
   175c4:	1a10      	subs	r0, r2, r0
   175c6:	4770      	bx	lr

000175c8 <nrf_clock_is_running>:
    switch (domain)
   175c8:	b119      	cbz	r1, 175d2 <nrf_clock_is_running+0xa>
   175ca:	2901      	cmp	r1, #1
   175cc:	d00e      	beq.n	175ec <nrf_clock_is_running+0x24>
   175ce:	2000      	movs	r0, #0
   175d0:	4770      	bx	lr
            if (p_clk_src != NULL)
   175d2:	b122      	cbz	r2, 175de <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   175d4:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   175d8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   175dc:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   175de:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   175e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   175e6:	d10e      	bne.n	17606 <nrf_clock_is_running+0x3e>
    return false;
   175e8:	2000      	movs	r0, #0
   175ea:	4770      	bx	lr
            if (p_clk_src != NULL)
   175ec:	b122      	cbz	r2, 175f8 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   175ee:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   175f2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   175f6:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   175f8:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   175fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17600:	d103      	bne.n	1760a <nrf_clock_is_running+0x42>
    return false;
   17602:	2000      	movs	r0, #0
   17604:	4770      	bx	lr
                return true;
   17606:	2001      	movs	r0, #1
   17608:	4770      	bx	lr
                return true;
   1760a:	2001      	movs	r0, #1
}
   1760c:	4770      	bx	lr

0001760e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1760e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   17610:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   17614:	0089      	lsls	r1, r1, #2
   17616:	3138      	adds	r1, #56	; 0x38
}
   17618:	4408      	add	r0, r1
   1761a:	4770      	bx	lr

0001761c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1761c:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   1761e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   17622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17626:	4770      	bx	lr

00017628 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   17628:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1762a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1762e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17632:	4770      	bx	lr

00017634 <get_status>:
{
   17634:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   17636:	b2c9      	uxtb	r1, r1
   17638:	f7ff ffe9 	bl	1760e <get_sub_data>
   1763c:	6880      	ldr	r0, [r0, #8]
}
   1763e:	f000 0007 	and.w	r0, r0, #7
   17642:	bd08      	pop	{r3, pc}

00017644 <set_off_state>:
	__asm__ volatile(
   17644:	f04f 0340 	mov.w	r3, #64	; 0x40
   17648:	f3ef 8211 	mrs	r2, BASEPRI
   1764c:	f383 8812 	msr	BASEPRI_MAX, r3
   17650:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17654:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   17656:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1765a:	d001      	beq.n	17660 <set_off_state+0x1c>
   1765c:	428b      	cmp	r3, r1
   1765e:	d107      	bne.n	17670 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   17660:	2301      	movs	r3, #1
   17662:	6003      	str	r3, [r0, #0]
	int err = 0;
   17664:	2000      	movs	r0, #0
	__asm__ volatile(
   17666:	f382 8811 	msr	BASEPRI, r2
   1766a:	f3bf 8f6f 	isb	sy
}
   1766e:	4770      	bx	lr
		err = -EPERM;
   17670:	f04f 30ff 	mov.w	r0, #4294967295
   17674:	e7f7      	b.n	17666 <set_off_state+0x22>

00017676 <set_starting_state>:
	__asm__ volatile(
   17676:	f04f 0340 	mov.w	r3, #64	; 0x40
   1767a:	f3ef 8211 	mrs	r2, BASEPRI
   1767e:	f383 8812 	msr	BASEPRI_MAX, r3
   17682:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17686:	6803      	ldr	r3, [r0, #0]
   17688:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1768c:	f003 0307 	and.w	r3, r3, #7
   17690:	2b01      	cmp	r3, #1
   17692:	d008      	beq.n	176a6 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   17694:	458c      	cmp	ip, r1
   17696:	d009      	beq.n	176ac <set_starting_state+0x36>
		err = -EPERM;
   17698:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1769c:	f382 8811 	msr	BASEPRI, r2
   176a0:	f3bf 8f6f 	isb	sy
}
   176a4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   176a6:	6001      	str	r1, [r0, #0]
	int err = 0;
   176a8:	2000      	movs	r0, #0
   176aa:	e7f7      	b.n	1769c <set_starting_state+0x26>
		err = -EALREADY;
   176ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   176b0:	e7f4      	b.n	1769c <set_starting_state+0x26>

000176b2 <set_on_state>:
	__asm__ volatile(
   176b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   176b6:	f3ef 8211 	mrs	r2, BASEPRI
   176ba:	f383 8812 	msr	BASEPRI_MAX, r3
   176be:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   176c2:	6803      	ldr	r3, [r0, #0]
   176c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   176c8:	f043 0302 	orr.w	r3, r3, #2
   176cc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   176ce:	f382 8811 	msr	BASEPRI, r2
   176d2:	f3bf 8f6f 	isb	sy
}
   176d6:	4770      	bx	lr

000176d8 <clkstarted_handle>:
{
   176d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176da:	4606      	mov	r6, r0
   176dc:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   176de:	f7ff ff96 	bl	1760e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   176e2:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   176e4:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   176e6:	2300      	movs	r3, #0
   176e8:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   176ec:	f7ff ffe1 	bl	176b2 <set_on_state>
	if (callback) {
   176f0:	b11d      	cbz	r5, 176fa <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   176f2:	463a      	mov	r2, r7
   176f4:	4621      	mov	r1, r4
   176f6:	4630      	mov	r0, r6
   176f8:	47a8      	blx	r5
}
   176fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000176fc <stop>:
{
   176fc:	b570      	push	{r4, r5, r6, lr}
   176fe:	4606      	mov	r6, r0
   17700:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   17702:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   17704:	4621      	mov	r1, r4
   17706:	f7ff ff82 	bl	1760e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1770a:	4629      	mov	r1, r5
   1770c:	3008      	adds	r0, #8
   1770e:	f7ff ff99 	bl	17644 <set_off_state>
	if (err < 0) {
   17712:	2800      	cmp	r0, #0
   17714:	db06      	blt.n	17724 <stop+0x28>
	get_sub_config(dev, type)->stop();
   17716:	4621      	mov	r1, r4
   17718:	4630      	mov	r0, r6
   1771a:	f7ff ff7f 	bl	1761c <get_sub_config>
   1771e:	6843      	ldr	r3, [r0, #4]
   17720:	4798      	blx	r3
	return 0;
   17722:	2000      	movs	r0, #0
}
   17724:	bd70      	pop	{r4, r5, r6, pc}

00017726 <api_stop>:
{
   17726:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   17728:	2280      	movs	r2, #128	; 0x80
   1772a:	f7ff ffe7 	bl	176fc <stop>
}
   1772e:	bd08      	pop	{r3, pc}

00017730 <async_start>:
{
   17730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17734:	4606      	mov	r6, r0
   17736:	4690      	mov	r8, r2
   17738:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1773a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1773c:	4629      	mov	r1, r5
   1773e:	f7ff ff66 	bl	1760e <get_sub_data>
   17742:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   17744:	9906      	ldr	r1, [sp, #24]
   17746:	3008      	adds	r0, #8
   17748:	f7ff ff95 	bl	17676 <set_starting_state>
	if (err < 0) {
   1774c:	2800      	cmp	r0, #0
   1774e:	db09      	blt.n	17764 <async_start+0x34>
	subdata->cb = cb;
   17750:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   17754:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   17756:	4629      	mov	r1, r5
   17758:	4630      	mov	r0, r6
   1775a:	f7ff ff5f 	bl	1761c <get_sub_config>
   1775e:	6803      	ldr	r3, [r0, #0]
   17760:	4798      	blx	r3
	return 0;
   17762:	2000      	movs	r0, #0
}
   17764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017768 <api_start>:
{
   17768:	b510      	push	{r4, lr}
   1776a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1776c:	2480      	movs	r4, #128	; 0x80
   1776e:	9400      	str	r4, [sp, #0]
   17770:	f7ff ffde 	bl	17730 <async_start>
}
   17774:	b002      	add	sp, #8
   17776:	bd10      	pop	{r4, pc}

00017778 <onoff_started_callback>:
{
   17778:	b510      	push	{r4, lr}
   1777a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1777c:	b2c9      	uxtb	r1, r1
   1777e:	f7ff ff53 	bl	17628 <get_onoff_manager>
	notify(mgr, 0);
   17782:	2100      	movs	r1, #0
   17784:	47a0      	blx	r4
}
   17786:	bd10      	pop	{r4, pc}

00017788 <hfclk_start>:
{
   17788:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1778a:	2001      	movs	r0, #1
   1778c:	f7fb fbce 	bl	12f2c <nrfx_clock_start>
}
   17790:	bd08      	pop	{r3, pc}

00017792 <hfclk_stop>:
{
   17792:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17794:	2001      	movs	r0, #1
   17796:	f000 fe60 	bl	1845a <nrfx_clock_stop>
}
   1779a:	bd08      	pop	{r3, pc}

0001779c <lfclk_stop>:
{
   1779c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1779e:	2000      	movs	r0, #0
   177a0:	f000 fe5b 	bl	1845a <nrfx_clock_stop>
}
   177a4:	bd08      	pop	{r3, pc}

000177a6 <k_msleep>:
{
   177a6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   177a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   177ac:	17c1      	asrs	r1, r0, #31
   177ae:	03c9      	lsls	r1, r1, #15
   177b0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   177b4:	03c0      	lsls	r0, r0, #15
   177b6:	f240 33e7 	movw	r3, #999	; 0x3e7
   177ba:	18c0      	adds	r0, r0, r3
   177bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   177c0:	f04f 0300 	mov.w	r3, #0
   177c4:	f141 0100 	adc.w	r1, r1, #0
   177c8:	f7e8 fc88 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   177cc:	f7fd fb40 	bl	14e50 <z_impl_k_sleep>
}
   177d0:	bd08      	pop	{r3, pc}

000177d2 <blocking_start_callback>:
{
   177d2:	b508      	push	{r3, lr}
   177d4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   177d6:	f7fc fe41 	bl	1445c <z_impl_k_sem_give>
}
   177da:	bd08      	pop	{r3, pc}

000177dc <lfclk_start>:
{
   177dc:	b508      	push	{r3, lr}
		anomaly_132_workaround();
   177de:	f7f9 fdd7 	bl	11390 <anomaly_132_workaround>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   177e2:	2000      	movs	r0, #0
   177e4:	f7fb fba2 	bl	12f2c <nrfx_clock_start>
}
   177e8:	bd08      	pop	{r3, pc}

000177ea <rng_pool_put>:
	uint8_t first = rngp->first_read;
   177ea:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   177ec:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   177ee:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   177f2:	1a9a      	subs	r2, r3, r2
   177f4:	ea3c 0202 	bics.w	r2, ip, r2
   177f8:	d007      	beq.n	1780a <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   177fa:	18c2      	adds	r2, r0, r3
   177fc:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   177fe:	3301      	adds	r3, #1
   17800:	ea03 030c 	and.w	r3, r3, ip
   17804:	7083      	strb	r3, [r0, #2]
	return 0;
   17806:	2000      	movs	r0, #0
   17808:	4770      	bx	lr
		return -ENOBUFS;
   1780a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1780e:	4770      	bx	lr

00017810 <rng_pool_init>:
	rngp->first_alloc = 0U;
   17810:	2300      	movs	r3, #0
   17812:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   17814:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   17816:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   17818:	3901      	subs	r1, #1
   1781a:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   1781c:	7102      	strb	r2, [r0, #4]
}
   1781e:	4770      	bx	lr

00017820 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   17820:	2000      	movs	r0, #0
   17822:	4770      	bx	lr

00017824 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   17824:	b538      	push	{r3, r4, r5, lr}
   17826:	460c      	mov	r4, r1
   17828:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1782a:	f7f8 fb6b 	bl	ff04 <bt_is_ready>
   1782e:	b120      	cbz	r0, 1783a <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   17830:	4629      	mov	r1, r5
   17832:	4620      	mov	r0, r4
   17834:	f7f8 f8ae 	bl	f994 <bt_hci_le_rand>
}
   17838:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1783a:	f06f 000a 	mvn.w	r0, #10
   1783e:	e7fb      	b.n	17838 <entropy_bt_get_entropy+0x14>

00017840 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   17840:	460b      	mov	r3, r1
   17842:	b139      	cbz	r1, 17854 <sys_slist_remove+0x14>
	return node->next;
   17844:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   17846:	6019      	str	r1, [r3, #0]
	return list->tail;
   17848:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1784a:	428a      	cmp	r2, r1
   1784c:	d009      	beq.n	17862 <sys_slist_remove+0x22>
	parent->next = child;
   1784e:	2300      	movs	r3, #0
   17850:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17852:	4770      	bx	lr
	return node->next;
   17854:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   17856:	6003      	str	r3, [r0, #0]
	return list->tail;
   17858:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1785a:	428a      	cmp	r2, r1
   1785c:	d1f7      	bne.n	1784e <sys_slist_remove+0xe>
	list->tail = node;
   1785e:	6043      	str	r3, [r0, #4]
}
   17860:	e7f5      	b.n	1784e <sys_slist_remove+0xe>
	list->tail = node;
   17862:	6043      	str	r3, [r0, #4]
}
   17864:	e7f3      	b.n	1784e <sys_slist_remove+0xe>

00017866 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17866:	b508      	push	{r3, lr}
   17868:	460a      	mov	r2, r1
	return list->head;
   1786a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1786c:	2100      	movs	r1, #0
   1786e:	e001      	b.n	17874 <sys_slist_find_and_remove+0xe>
   17870:	4619      	mov	r1, r3
   17872:	681b      	ldr	r3, [r3, #0]
   17874:	b12b      	cbz	r3, 17882 <sys_slist_find_and_remove+0x1c>
   17876:	4293      	cmp	r3, r2
   17878:	d1fa      	bne.n	17870 <sys_slist_find_and_remove+0xa>
   1787a:	f7ff ffe1 	bl	17840 <sys_slist_remove>
   1787e:	2001      	movs	r0, #1
   17880:	e000      	b.n	17884 <sys_slist_find_and_remove+0x1e>
   17882:	2000      	movs	r0, #0
   17884:	bd08      	pop	{r3, pc}

00017886 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   17886:	b570      	push	{r4, r5, r6, lr}
   17888:	4604      	mov	r4, r0
   1788a:	460d      	mov	r5, r1
   1788c:	4616      	mov	r6, r2
	return list->head;
   1788e:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   17890:	b133      	cbz	r3, 178a0 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   17892:	f7ff ffe8 	bl	17866 <sys_slist_find_and_remove>
   17896:	b970      	cbnz	r0, 178b6 <gpio_manage_callback+0x30>
			if (!set) {
   17898:	b91e      	cbnz	r6, 178a2 <gpio_manage_callback+0x1c>
				return -EINVAL;
   1789a:	f06f 0015 	mvn.w	r0, #21
   1789e:	e006      	b.n	178ae <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   178a0:	b132      	cbz	r2, 178b0 <gpio_manage_callback+0x2a>
   178a2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   178a4:	602b      	str	r3, [r5, #0]
	list->head = node;
   178a6:	6025      	str	r5, [r4, #0]
	return list->tail;
   178a8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   178aa:	b143      	cbz	r3, 178be <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   178ac:	2000      	movs	r0, #0
}
   178ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   178b0:	f06f 0015 	mvn.w	r0, #21
   178b4:	e7fb      	b.n	178ae <gpio_manage_callback+0x28>
	if (set) {
   178b6:	2e00      	cmp	r6, #0
   178b8:	d1f3      	bne.n	178a2 <gpio_manage_callback+0x1c>
	return 0;
   178ba:	2000      	movs	r0, #0
   178bc:	e7f7      	b.n	178ae <gpio_manage_callback+0x28>
	list->tail = node;
   178be:	6065      	str	r5, [r4, #4]
   178c0:	2000      	movs	r0, #0
}
   178c2:	e7f4      	b.n	178ae <gpio_manage_callback+0x28>

000178c4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   178c4:	b570      	push	{r4, r5, r6, lr}
   178c6:	460e      	mov	r6, r1
   178c8:	4615      	mov	r5, r2
	return list->head;
   178ca:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   178cc:	b121      	cbz	r1, 178d8 <gpio_fire_callbacks+0x14>
	return node->next;
   178ce:	680c      	ldr	r4, [r1, #0]
   178d0:	b13c      	cbz	r4, 178e2 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   178d2:	b931      	cbnz	r1, 178e2 <gpio_fire_callbacks+0x1e>
   178d4:	460c      	mov	r4, r1
   178d6:	e004      	b.n	178e2 <gpio_fire_callbacks+0x1e>
   178d8:	460c      	mov	r4, r1
   178da:	e002      	b.n	178e2 <gpio_fire_callbacks+0x1e>
   178dc:	4623      	mov	r3, r4
   178de:	4621      	mov	r1, r4
   178e0:	461c      	mov	r4, r3
   178e2:	b171      	cbz	r1, 17902 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   178e4:	688a      	ldr	r2, [r1, #8]
   178e6:	402a      	ands	r2, r5
   178e8:	d002      	beq.n	178f0 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   178ea:	684b      	ldr	r3, [r1, #4]
   178ec:	4630      	mov	r0, r6
   178ee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   178f0:	2c00      	cmp	r4, #0
   178f2:	d0f3      	beq.n	178dc <gpio_fire_callbacks+0x18>
	return node->next;
   178f4:	6823      	ldr	r3, [r4, #0]
   178f6:	2b00      	cmp	r3, #0
   178f8:	d0f1      	beq.n	178de <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   178fa:	2c00      	cmp	r4, #0
   178fc:	d1ef      	bne.n	178de <gpio_fire_callbacks+0x1a>
   178fe:	4623      	mov	r3, r4
   17900:	e7ed      	b.n	178de <gpio_fire_callbacks+0x1a>
		}
	}
}
   17902:	bd70      	pop	{r4, r5, r6, pc}

00017904 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17904:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   17908:	0580      	lsls	r0, r0, #22
   1790a:	0d80      	lsrs	r0, r0, #22
   1790c:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   17910:	d033      	beq.n	1797a <get_drive+0x76>
   17912:	d816      	bhi.n	17942 <get_drive+0x3e>
   17914:	2806      	cmp	r0, #6
   17916:	d02c      	beq.n	17972 <get_drive+0x6e>
   17918:	d906      	bls.n	17928 <get_drive+0x24>
   1791a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1791e:	d10d      	bne.n	1793c <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   17920:	2301      	movs	r3, #1
   17922:	700b      	strb	r3, [r1, #0]
	return 0;
   17924:	2000      	movs	r0, #0
		break;
   17926:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17928:	b300      	cbz	r0, 1796c <get_drive+0x68>
   1792a:	2802      	cmp	r0, #2
   1792c:	d103      	bne.n	17936 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   1792e:	2304      	movs	r3, #4
   17930:	700b      	strb	r3, [r1, #0]
	return 0;
   17932:	2000      	movs	r0, #0
		break;
   17934:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17936:	f06f 0015 	mvn.w	r0, #21
   1793a:	4770      	bx	lr
   1793c:	f06f 0015 	mvn.w	r0, #21
   17940:	4770      	bx	lr
   17942:	f240 2302 	movw	r3, #514	; 0x202
   17946:	4298      	cmp	r0, r3
   17948:	d01b      	beq.n	17982 <get_drive+0x7e>
   1794a:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   1794e:	d103      	bne.n	17958 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   17950:	2303      	movs	r3, #3
   17952:	700b      	strb	r3, [r1, #0]
	return 0;
   17954:	2000      	movs	r0, #0
		break;
   17956:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17958:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1795c:	d103      	bne.n	17966 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   1795e:	2302      	movs	r3, #2
   17960:	700b      	strb	r3, [r1, #0]
	return 0;
   17962:	2000      	movs	r0, #0
		break;
   17964:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17966:	f06f 0015 	mvn.w	r0, #21
   1796a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1796c:	2000      	movs	r0, #0
   1796e:	7008      	strb	r0, [r1, #0]
		break;
   17970:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   17972:	2306      	movs	r3, #6
   17974:	700b      	strb	r3, [r1, #0]
	return 0;
   17976:	2000      	movs	r0, #0
		break;
   17978:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1797a:	2307      	movs	r3, #7
   1797c:	700b      	strb	r3, [r1, #0]
	return 0;
   1797e:	2000      	movs	r0, #0
		break;
   17980:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   17982:	2305      	movs	r3, #5
   17984:	700b      	strb	r3, [r1, #0]
	return 0;
   17986:	2000      	movs	r0, #0
}
   17988:	4770      	bx	lr

0001798a <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1798a:	f010 0f10 	tst.w	r0, #16
   1798e:	d104      	bne.n	1799a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   17990:	f010 0f20 	tst.w	r0, #32
   17994:	d103      	bne.n	1799e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   17996:	2000      	movs	r0, #0
   17998:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1799a:	2003      	movs	r0, #3
   1799c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1799e:	2001      	movs	r0, #1
}
   179a0:	4770      	bx	lr

000179a2 <gpio_nrfx_port_get_raw>:
	return port->config;
   179a2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   179a4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   179a6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   179aa:	600b      	str	r3, [r1, #0]
}
   179ac:	2000      	movs	r0, #0
   179ae:	4770      	bx	lr

000179b0 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   179b0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   179b2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   179b4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   179b8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   179bc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   179c0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   179c4:	2000      	movs	r0, #0
   179c6:	4770      	bx	lr

000179c8 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   179c8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   179ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   179cc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   179d0:	2000      	movs	r0, #0
   179d2:	4770      	bx	lr

000179d4 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   179d4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   179d6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   179d8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   179dc:	2000      	movs	r0, #0
   179de:	4770      	bx	lr

000179e0 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   179e0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   179e2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   179e4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   179e8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   179ec:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   179ee:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   179f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   179f6:	2000      	movs	r0, #0
   179f8:	4770      	bx	lr

000179fa <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   179fa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   179fe:	d007      	beq.n	17a10 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17a00:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   17a04:	d00d      	beq.n	17a22 <get_trigger+0x28>
   17a06:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   17a0a:	d008      	beq.n	17a1e <get_trigger+0x24>
   17a0c:	2001      	movs	r0, #1
}
   17a0e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   17a10:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   17a14:	d001      	beq.n	17a1a <get_trigger+0x20>
   17a16:	2005      	movs	r0, #5
   17a18:	4770      	bx	lr
   17a1a:	2004      	movs	r0, #4
   17a1c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17a1e:	2002      	movs	r0, #2
   17a20:	4770      	bx	lr
   17a22:	2003      	movs	r0, #3
   17a24:	4770      	bx	lr

00017a26 <gpio_nrfx_manage_callback>:
{
   17a26:	b508      	push	{r3, lr}
	return port->data;
   17a28:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17a2a:	3004      	adds	r0, #4
   17a2c:	f7ff ff2b 	bl	17886 <gpio_manage_callback>
}
   17a30:	bd08      	pop	{r3, pc}

00017a32 <nrfx_gpio_handler>:
{
   17a32:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   17a34:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   17a38:	0940      	lsrs	r0, r0, #5
   17a3a:	f7f9 fe8f 	bl	1175c <get_dev>
	if (port == NULL) {
   17a3e:	b130      	cbz	r0, 17a4e <nrfx_gpio_handler+0x1c>
   17a40:	4601      	mov	r1, r0
	return port->data;
   17a42:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   17a44:	2201      	movs	r2, #1
   17a46:	40a2      	lsls	r2, r4
   17a48:	3004      	adds	r0, #4
   17a4a:	f7ff ff3b 	bl	178c4 <gpio_fire_callbacks>
}
   17a4e:	bd10      	pop	{r4, pc}

00017a50 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   17a50:	b500      	push	{lr}
	*state = &config->states[0];
   17a52:	6843      	ldr	r3, [r0, #4]
   17a54:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   17a56:	e001      	b.n	17a5c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   17a58:	3308      	adds	r3, #8
   17a5a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   17a5c:	6813      	ldr	r3, [r2, #0]
   17a5e:	f890 c008 	ldrb.w	ip, [r0, #8]
   17a62:	f8d0 e004 	ldr.w	lr, [r0, #4]
   17a66:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   17a6a:	4563      	cmp	r3, ip
   17a6c:	d205      	bcs.n	17a7a <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   17a6e:	f893 c005 	ldrb.w	ip, [r3, #5]
   17a72:	458c      	cmp	ip, r1
   17a74:	d1f0      	bne.n	17a58 <pinctrl_lookup_state+0x8>
			return 0;
   17a76:	2000      	movs	r0, #0
   17a78:	e001      	b.n	17a7e <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   17a7a:	f06f 0001 	mvn.w	r0, #1
}
   17a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00017a82 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   17a82:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17a84:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   17a86:	f04f 0140 	mov.w	r1, #64	; 0x40
   17a8a:	f3ef 8311 	mrs	r3, BASEPRI
   17a8e:	f381 8812 	msr	BASEPRI_MAX, r1
   17a92:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17a96:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   17a9a:	b131      	cbz	r1, 17aaa <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17a9c:	2100      	movs	r1, #0
   17a9e:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   17aa2:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17aa6:	2101      	movs	r1, #1
   17aa8:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   17aaa:	f383 8811 	msr	BASEPRI, r3
   17aae:	f3bf 8f6f 	isb	sy
}
   17ab2:	4770      	bx	lr

00017ab4 <uarte_nrfx_isr_int>:
{
   17ab4:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   17ab6:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   17ab8:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   17aba:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   17abe:	f413 7f80 	tst.w	r3, #256	; 0x100
   17ac2:	d002      	beq.n	17aca <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17ac4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   17ac8:	b9d3      	cbnz	r3, 17b00 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17aca:	686b      	ldr	r3, [r5, #4]
   17acc:	f013 0f10 	tst.w	r3, #16
   17ad0:	d015      	beq.n	17afe <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   17ad2:	f04f 0240 	mov.w	r2, #64	; 0x40
   17ad6:	f3ef 8311 	mrs	r3, BASEPRI
   17ada:	f382 8812 	msr	BASEPRI_MAX, r2
   17ade:	f3bf 8f6f 	isb	sy
   17ae2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   17ae6:	b112      	cbz	r2, 17aee <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   17ae8:	2200      	movs	r2, #0
   17aea:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   17aee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   17af2:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   17af6:	f383 8811 	msr	BASEPRI, r3
   17afa:	f3bf 8f6f 	isb	sy
}
   17afe:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   17b00:	f7ff ffbf 	bl	17a82 <endtx_isr>
   17b04:	e7e1      	b.n	17aca <uarte_nrfx_isr_int+0x16>

00017b06 <uarte_nrfx_configure>:
{
   17b06:	b570      	push	{r4, r5, r6, lr}
   17b08:	b082      	sub	sp, #8
	struct uarte_nrfx_data *data = dev->data;
   17b0a:	6905      	ldr	r5, [r0, #16]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   17b0c:	794b      	ldrb	r3, [r1, #5]
   17b0e:	2b01      	cmp	r3, #1
   17b10:	d137      	bne.n	17b82 <uarte_nrfx_configure+0x7c>
   17b12:	4606      	mov	r6, r0
   17b14:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   17b16:	798b      	ldrb	r3, [r1, #6]
   17b18:	2b03      	cmp	r3, #3
   17b1a:	d135      	bne.n	17b88 <uarte_nrfx_configure+0x82>
	switch (cfg->flow_ctrl) {
   17b1c:	79cb      	ldrb	r3, [r1, #7]
   17b1e:	b133      	cbz	r3, 17b2e <uarte_nrfx_configure+0x28>
   17b20:	2b01      	cmp	r3, #1
   17b22:	d00e      	beq.n	17b42 <uarte_nrfx_configure+0x3c>
   17b24:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   17b28:	4618      	mov	r0, r3
   17b2a:	b002      	add	sp, #8
   17b2c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   17b2e:	2300      	movs	r3, #0
   17b30:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   17b34:	7923      	ldrb	r3, [r4, #4]
   17b36:	b143      	cbz	r3, 17b4a <uarte_nrfx_configure+0x44>
   17b38:	2b02      	cmp	r3, #2
   17b3a:	d01e      	beq.n	17b7a <uarte_nrfx_configure+0x74>
   17b3c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17b40:	e7f2      	b.n	17b28 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   17b42:	2301      	movs	r3, #1
   17b44:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   17b48:	e7f4      	b.n	17b34 <uarte_nrfx_configure+0x2e>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   17b4a:	2300      	movs	r3, #0
   17b4c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17b50:	6821      	ldr	r1, [r4, #0]
   17b52:	4630      	mov	r0, r6
   17b54:	f7fa f816 	bl	11b84 <baudrate_set>
   17b58:	4603      	mov	r3, r0
   17b5a:	b9c0      	cbnz	r0, 17b8e <uarte_nrfx_configure+0x88>
	const struct uarte_nrfx_config *config = dev->config;
   17b5c:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   17b5e:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   17b60:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
   17b64:	f89d 0004 	ldrb.w	r0, [sp, #4]
   17b68:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   17b6a:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   17b6e:	3504      	adds	r5, #4
   17b70:	e894 0003 	ldmia.w	r4, {r0, r1}
   17b74:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   17b78:	e7d6      	b.n	17b28 <uarte_nrfx_configure+0x22>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   17b7a:	230e      	movs	r3, #14
   17b7c:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   17b80:	e7e6      	b.n	17b50 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
   17b82:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17b86:	e7cf      	b.n	17b28 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   17b88:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17b8c:	e7cc      	b.n	17b28 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   17b8e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17b92:	e7c9      	b.n	17b28 <uarte_nrfx_configure+0x22>

00017b94 <uarte_nrfx_config_get>:
{
   17b94:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   17b96:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   17b98:	3304      	adds	r3, #4
   17b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
   17b9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
   17ba2:	2000      	movs	r0, #0
   17ba4:	4770      	bx	lr

00017ba6 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   17ba6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17ba8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   17baa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   17bae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   17bb2:	4770      	bx	lr

00017bb4 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   17bb4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17bb6:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   17bb8:	685b      	ldr	r3, [r3, #4]
   17bba:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17bbe:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   17bc2:	b929      	cbnz	r1, 17bd0 <is_tx_ready+0x1c>
   17bc4:	b933      	cbnz	r3, 17bd4 <is_tx_ready+0x20>
   17bc6:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   17bca:	b92b      	cbnz	r3, 17bd8 <is_tx_ready+0x24>
   17bcc:	2000      	movs	r0, #0
   17bce:	4770      	bx	lr
   17bd0:	2001      	movs	r0, #1
   17bd2:	4770      	bx	lr
   17bd4:	2000      	movs	r0, #0
   17bd6:	4770      	bx	lr
   17bd8:	2001      	movs	r0, #1
}
   17bda:	4770      	bx	lr

00017bdc <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   17bdc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17bde:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17be0:	2208      	movs	r2, #8
   17be2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   17be6:	4770      	bx	lr

00017be8 <tx_start>:
{
   17be8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   17bea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17bec:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17bee:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17bf2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17bf6:	2200      	movs	r2, #0
   17bf8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   17bfc:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   17c00:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   17c04:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17c08:	685b      	ldr	r3, [r3, #4]
   17c0a:	f013 0f10 	tst.w	r3, #16
   17c0e:	d102      	bne.n	17c16 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17c10:	2301      	movs	r3, #1
   17c12:	60a3      	str	r3, [r4, #8]
}
   17c14:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   17c16:	2101      	movs	r1, #1
   17c18:	f7ff ffe0 	bl	17bdc <uarte_enable>
    p_reg->INTENSET = mask;
   17c1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17c20:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   17c24:	e7f4      	b.n	17c10 <tx_start+0x28>

00017c26 <uarte_nrfx_poll_in>:
{
   17c26:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   17c28:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   17c2a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17c2c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17c2e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   17c32:	b15a      	cbz	r2, 17c4c <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   17c34:	6962      	ldr	r2, [r4, #20]
   17c36:	7812      	ldrb	r2, [r2, #0]
   17c38:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17c3a:	2000      	movs	r0, #0
   17c3c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   17c40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17c44:	2201      	movs	r2, #1
   17c46:	601a      	str	r2, [r3, #0]
}
   17c48:	bc10      	pop	{r4}
   17c4a:	4770      	bx	lr
		return -1;
   17c4c:	f04f 30ff 	mov.w	r0, #4294967295
   17c50:	e7fa      	b.n	17c48 <uarte_nrfx_poll_in+0x22>

00017c52 <k_msleep>:
{
   17c52:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   17c54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   17c58:	17c1      	asrs	r1, r0, #31
   17c5a:	03c9      	lsls	r1, r1, #15
   17c5c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17c60:	03c0      	lsls	r0, r0, #15
   17c62:	f240 33e7 	movw	r3, #999	; 0x3e7
   17c66:	18c0      	adds	r0, r0, r3
   17c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17c6c:	f04f 0300 	mov.w	r3, #0
   17c70:	f141 0100 	adc.w	r1, r1, #0
   17c74:	f7e8 fa32 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   17c78:	f7fd f8ea 	bl	14e50 <z_impl_k_sleep>
}
   17c7c:	bd08      	pop	{r3, pc}

00017c7e <wait_tx_ready>:
{
   17c7e:	b570      	push	{r4, r5, r6, lr}
   17c80:	4606      	mov	r6, r0
   17c82:	e013      	b.n	17cac <wait_tx_ready+0x2e>
		if (res) {
   17c84:	b17d      	cbz	r5, 17ca6 <wait_tx_ready+0x28>
	__asm__ volatile(
   17c86:	f04f 0340 	mov.w	r3, #64	; 0x40
   17c8a:	f3ef 8411 	mrs	r4, BASEPRI
   17c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   17c92:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17c96:	4630      	mov	r0, r6
   17c98:	f7ff ff8c 	bl	17bb4 <is_tx_ready>
   17c9c:	b998      	cbnz	r0, 17cc6 <wait_tx_ready+0x48>
	__asm__ volatile(
   17c9e:	f384 8811 	msr	BASEPRI, r4
   17ca2:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   17ca6:	2001      	movs	r0, #1
   17ca8:	f7ff ffd3 	bl	17c52 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17cac:	2464      	movs	r4, #100	; 0x64
   17cae:	4630      	mov	r0, r6
   17cb0:	f7ff ff80 	bl	17bb4 <is_tx_ready>
   17cb4:	4605      	mov	r5, r0
   17cb6:	2800      	cmp	r0, #0
   17cb8:	d1e4      	bne.n	17c84 <wait_tx_ready+0x6>
   17cba:	2001      	movs	r0, #1
   17cbc:	f000 fce5 	bl	1868a <nrfx_busy_wait>
   17cc0:	3c01      	subs	r4, #1
   17cc2:	d1f4      	bne.n	17cae <wait_tx_ready+0x30>
   17cc4:	e7de      	b.n	17c84 <wait_tx_ready+0x6>
}
   17cc6:	4620      	mov	r0, r4
   17cc8:	bd70      	pop	{r4, r5, r6, pc}

00017cca <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   17cca:	b510      	push	{r4, lr}
   17ccc:	b082      	sub	sp, #8
   17cce:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   17cd0:	aa01      	add	r2, sp, #4
   17cd2:	f7ff febd 	bl	17a50 <pinctrl_lookup_state>
	if (ret < 0) {
   17cd6:	2800      	cmp	r0, #0
   17cd8:	db05      	blt.n	17ce6 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   17cda:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   17cdc:	6822      	ldr	r2, [r4, #0]
   17cde:	7919      	ldrb	r1, [r3, #4]
   17ce0:	6818      	ldr	r0, [r3, #0]
   17ce2:	f7f9 fe47 	bl	11974 <pinctrl_configure_pins>
}
   17ce6:	b002      	add	sp, #8
   17ce8:	bd10      	pop	{r4, pc}

00017cea <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   17cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17cee:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   17cf0:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   17cf2:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   17cf4:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   17cf8:	2100      	movs	r1, #0
   17cfa:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   17cfe:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   17d02:	68f8      	ldr	r0, [r7, #12]
   17d04:	f7ff ffe1 	bl	17cca <pinctrl_apply_state>
	if (err < 0) {
   17d08:	1e05      	subs	r5, r0, #0
   17d0a:	db35      	blt.n	17d78 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   17d0c:	f108 0104 	add.w	r1, r8, #4
   17d10:	4620      	mov	r0, r4
   17d12:	f7ff fef8 	bl	17b06 <uarte_nrfx_configure>
	if (err) {
   17d16:	4605      	mov	r5, r0
   17d18:	bb70      	cbnz	r0, 17d78 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   17d1a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   17d1c:	f013 0f02 	tst.w	r3, #2
   17d20:	d12d      	bne.n	17d7e <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17d22:	2308      	movs	r3, #8
   17d24:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   17d28:	7a3b      	ldrb	r3, [r7, #8]
   17d2a:	b95b      	cbnz	r3, 17d44 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d2c:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   17d30:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   17d34:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17d38:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   17d3c:	2301      	movs	r3, #1
   17d3e:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17d42:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   17d44:	687b      	ldr	r3, [r7, #4]
   17d46:	f013 0f02 	tst.w	r3, #2
   17d4a:	d103      	bne.n	17d54 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   17d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
   17d50:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17d54:	687b      	ldr	r3, [r7, #4]
   17d56:	f013 0f10 	tst.w	r3, #16
   17d5a:	d003      	beq.n	17d64 <uarte_instance_init+0x7a>
   17d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17d60:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   17d64:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17d68:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17d6c:	2300      	movs	r3, #0
   17d6e:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17d72:	2301      	movs	r3, #1
   17d74:	60b3      	str	r3, [r6, #8]
   17d76:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   17d78:	4628      	mov	r0, r5
   17d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   17d7e:	4641      	mov	r1, r8
   17d80:	4630      	mov	r0, r6
   17d82:	f7f9 ffd5 	bl	11d30 <endtx_stoptx_ppi_init>
		if (err < 0) {
   17d86:	2800      	cmp	r0, #0
   17d88:	dacb      	bge.n	17d22 <uarte_instance_init+0x38>
			return err;
   17d8a:	4605      	mov	r5, r0
   17d8c:	e7f4      	b.n	17d78 <uarte_instance_init+0x8e>

00017d8e <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17d8e:	b510      	push	{r4, lr}
   17d90:	4604      	mov	r4, r0
   17d92:	2200      	movs	r2, #0
   17d94:	2101      	movs	r1, #1
   17d96:	2002      	movs	r0, #2
   17d98:	f7fe ff41 	bl	16c1e <z_arm_irq_priority_set>
   17d9c:	2002      	movs	r0, #2
   17d9e:	f7fe ff34 	bl	16c0a <arch_irq_enable>
   17da2:	2100      	movs	r1, #0
   17da4:	4620      	mov	r0, r4
   17da6:	f7ff ffa0 	bl	17cea <uarte_instance_init>
   17daa:	bd10      	pop	{r4, pc}

00017dac <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   17dac:	4770      	bx	lr

00017dae <counter_sub>:
	return (a - b) & COUNTER_MAX;
   17dae:	1a40      	subs	r0, r0, r1
}
   17db0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17db4:	4770      	bx	lr

00017db6 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17db6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   17dba:	009b      	lsls	r3, r3, #2
   17dbc:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17dbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17dc2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   17dc6:	6818      	ldr	r0, [r3, #0]
}
   17dc8:	3800      	subs	r0, #0
   17dca:	bf18      	it	ne
   17dcc:	2001      	movne	r0, #1
   17dce:	4770      	bx	lr

00017dd0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17dd0:	f100 0350 	add.w	r3, r0, #80	; 0x50
   17dd4:	009b      	lsls	r3, r3, #2
   17dd6:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17ddc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   17de0:	2200      	movs	r2, #0
   17de2:	601a      	str	r2, [r3, #0]
   17de4:	681b      	ldr	r3, [r3, #0]
}
   17de6:	4770      	bx	lr

00017de8 <absolute_time_to_cc>:
}
   17de8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17dec:	4770      	bx	lr

00017dee <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17dee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17df2:	b672      	cpsid	i
}
   17df4:	4770      	bx	lr

00017df6 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17df6:	f380 8810 	msr	PRIMASK, r0
}
   17dfa:	4770      	bx	lr

00017dfc <compare_set>:
{
   17dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dfe:	b083      	sub	sp, #12
   17e00:	4604      	mov	r4, r0
   17e02:	4617      	mov	r7, r2
   17e04:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   17e06:	f7fa f861 	bl	11ecc <compare_int_lock>
   17e0a:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   17e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17e0e:	9301      	str	r3, [sp, #4]
   17e10:	9b08      	ldr	r3, [sp, #32]
   17e12:	9300      	str	r3, [sp, #0]
   17e14:	463a      	mov	r2, r7
   17e16:	462b      	mov	r3, r5
   17e18:	4620      	mov	r0, r4
   17e1a:	f7fa f925 	bl	12068 <compare_set_nolocks>
   17e1e:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   17e20:	4631      	mov	r1, r6
   17e22:	4620      	mov	r0, r4
   17e24:	f7fa f8a8 	bl	11f78 <compare_int_unlock>
}
   17e28:	4628      	mov	r0, r5
   17e2a:	b003      	add	sp, #12
   17e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017e2e <sys_clock_cycle_get_32>:
{
   17e2e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   17e30:	f7fa f8fa 	bl	12028 <z_nrf_rtc_timer_read>
}
   17e34:	bd08      	pop	{r3, pc}

00017e36 <event_packet_is_discardable>:
	switch (hdr->evt) {
   17e36:	7803      	ldrb	r3, [r0, #0]
   17e38:	2b3e      	cmp	r3, #62	; 0x3e
   17e3a:	d003      	beq.n	17e44 <event_packet_is_discardable+0xe>
   17e3c:	2bff      	cmp	r3, #255	; 0xff
   17e3e:	d008      	beq.n	17e52 <event_packet_is_discardable+0x1c>
   17e40:	2000      	movs	r0, #0
   17e42:	4770      	bx	lr
		switch (me->subevent) {
   17e44:	7883      	ldrb	r3, [r0, #2]
   17e46:	2b02      	cmp	r3, #2
   17e48:	d001      	beq.n	17e4e <event_packet_is_discardable+0x18>
			return false;
   17e4a:	2000      	movs	r0, #0
   17e4c:	4770      	bx	lr
			return true;
   17e4e:	2001      	movs	r0, #1
   17e50:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   17e52:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   17e54:	2b80      	cmp	r3, #128	; 0x80
   17e56:	d001      	beq.n	17e5c <event_packet_is_discardable+0x26>
			return false;
   17e58:	2000      	movs	r0, #0
}
   17e5a:	4770      	bx	lr
			return true;
   17e5c:	2001      	movs	r0, #1
   17e5e:	4770      	bx	lr

00017e60 <hci_driver_send>:
{
   17e60:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   17e62:	8a03      	ldrh	r3, [r0, #16]
   17e64:	b163      	cbz	r3, 17e80 <hci_driver_send+0x20>
   17e66:	4604      	mov	r4, r0
   17e68:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   17e6a:	b963      	cbnz	r3, 17e86 <hci_driver_send+0x26>
		err = cmd_handle(buf);
   17e6c:	f7fa fc48 	bl	12700 <cmd_handle>
	if (!err) {
   17e70:	4605      	mov	r5, r0
   17e72:	b108      	cbz	r0, 17e78 <hci_driver_send+0x18>
}
   17e74:	4628      	mov	r0, r5
   17e76:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   17e78:	4620      	mov	r0, r4
   17e7a:	f7ff fb56 	bl	1752a <net_buf_unref>
   17e7e:	e7f9      	b.n	17e74 <hci_driver_send+0x14>
		return -EINVAL;
   17e80:	f06f 0515 	mvn.w	r5, #21
   17e84:	e7f6      	b.n	17e74 <hci_driver_send+0x14>
		return -EINVAL;
   17e86:	f06f 0515 	mvn.w	r5, #21
   17e8a:	e7f3      	b.n	17e74 <hci_driver_send+0x14>

00017e8c <hci_driver_close>:
{
   17e8c:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   17e8e:	f04f 30ff 	mov.w	r0, #4294967295
   17e92:	f04f 31ff 	mov.w	r1, #4294967295
   17e96:	f7fa fa21 	bl	122dc <multithreading_lock_acquire>
	if (err) {
   17e9a:	4604      	mov	r4, r0
   17e9c:	b108      	cbz	r0, 17ea2 <hci_driver_close+0x16>
}
   17e9e:	4620      	mov	r0, r4
   17ea0:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   17ea2:	f7e8 f9bf 	bl	224 <sdc_disable>
	if (err) {
   17ea6:	4604      	mov	r4, r0
   17ea8:	b910      	cbnz	r0, 17eb0 <hci_driver_close+0x24>
	MULTITHREADING_LOCK_RELEASE();
   17eaa:	f7fa fa21 	bl	122f0 <multithreading_lock_release>
	return err;
   17eae:	e7f6      	b.n	17e9e <hci_driver_close+0x12>
		MULTITHREADING_LOCK_RELEASE();
   17eb0:	f7fa fa1e 	bl	122f0 <multithreading_lock_release>
		return err;
   17eb4:	e7f3      	b.n	17e9e <hci_driver_close+0x12>

00017eb6 <configure_supported_features>:
{
   17eb6:	b508      	push	{r3, lr}
		err = sdc_support_adv();
   17eb8:	f7e8 fa6a 	bl	390 <sdc_support_adv>
		if (err) {
   17ebc:	b900      	cbnz	r0, 17ec0 <configure_supported_features+0xa>
}
   17ebe:	bd08      	pop	{r3, pc}
			return -ENOTSUP;
   17ec0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17ec4:	e7fb      	b.n	17ebe <configure_supported_features+0x8>

00017ec6 <receive_work_handler>:
{
   17ec6:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   17ec8:	f7fa fe32 	bl	12b30 <hci_driver_receive_process>
}
   17ecc:	bd08      	pop	{r3, pc}

00017ece <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17ece:	230f      	movs	r3, #15
   17ed0:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   17ed2:	2304      	movs	r3, #4
   17ed4:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   17ed6:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   17ed8:	2301      	movs	r3, #1
   17eda:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   17edc:	8081      	strh	r1, [r0, #4]
}
   17ede:	4770      	bx	lr

00017ee0 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17ee0:	f04f 0c0e 	mov.w	ip, #14
   17ee4:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   17ee8:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   17eea:	2201      	movs	r2, #1
   17eec:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   17eee:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   17ef2:	7143      	strb	r3, [r0, #5]
}
   17ef4:	4770      	bx	lr

00017ef6 <le_read_supported_states>:
	*buf = states1;
   17ef6:	2303      	movs	r3, #3
   17ef8:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   17efa:	2300      	movs	r3, #0
   17efc:	7103      	strb	r3, [r0, #4]
}
   17efe:	4770      	bx	lr

00017f00 <status_param_cmd_put>:
}
   17f00:	2001      	movs	r0, #1
   17f02:	4770      	bx	lr

00017f04 <controller_and_baseband_cmd_put>:
{
   17f04:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   17f06:	7842      	ldrb	r2, [r0, #1]
   17f08:	7803      	ldrb	r3, [r0, #0]
   17f0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17f0e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   17f10:	f640 4201 	movw	r2, #3073	; 0xc01
   17f14:	4293      	cmp	r3, r2
   17f16:	d005      	beq.n	17f24 <controller_and_baseband_cmd_put+0x20>
   17f18:	f640 4203 	movw	r2, #3075	; 0xc03
   17f1c:	4293      	cmp	r3, r2
   17f1e:	d005      	beq.n	17f2c <controller_and_baseband_cmd_put+0x28>
   17f20:	2001      	movs	r0, #1
}
   17f22:	bd08      	pop	{r3, pc}
   17f24:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   17f26:	f7f0 f8c1 	bl	80ac <sdc_hci_cmd_cb_set_event_mask>
   17f2a:	e7fa      	b.n	17f22 <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   17f2c:	f7e8 fb80 	bl	630 <sdc_hci_cmd_cb_reset>
   17f30:	e7f7      	b.n	17f22 <controller_and_baseband_cmd_put+0x1e>

00017f32 <supported_commands>:
{
   17f32:	b510      	push	{r4, lr}
   17f34:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   17f36:	2230      	movs	r2, #48	; 0x30
   17f38:	2100      	movs	r1, #0
   17f3a:	f7fe ff69 	bl	16e10 <memset>
	cmds->hci_set_event_mask = 1;
   17f3e:	7963      	ldrb	r3, [r4, #5]
   17f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17f44:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   17f46:	b2db      	uxtb	r3, r3
   17f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17f4c:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   17f4e:	7ba3      	ldrb	r3, [r4, #14]
   17f50:	f043 0308 	orr.w	r3, r3, #8
   17f54:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   17f56:	b2db      	uxtb	r3, r3
   17f58:	f043 0320 	orr.w	r3, r3, #32
   17f5c:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   17f5e:	7be3      	ldrb	r3, [r4, #15]
   17f60:	f043 0302 	orr.w	r3, r3, #2
   17f64:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   17f66:	7e63      	ldrb	r3, [r4, #25]
   17f68:	f043 0301 	orr.w	r3, r3, #1
   17f6c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   17f6e:	b2db      	uxtb	r3, r3
   17f70:	f043 0302 	orr.w	r3, r3, #2
   17f74:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   17f76:	b2db      	uxtb	r3, r3
   17f78:	f043 0304 	orr.w	r3, r3, #4
   17f7c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   17f7e:	b2db      	uxtb	r3, r3
   17f80:	f043 0310 	orr.w	r3, r3, #16
   17f84:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   17f86:	b2db      	uxtb	r3, r3
   17f88:	f043 0320 	orr.w	r3, r3, #32
   17f8c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   17f8e:	b2db      	uxtb	r3, r3
   17f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17f94:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   17f96:	b2db      	uxtb	r3, r3
   17f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17f9c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   17f9e:	7ea3      	ldrb	r3, [r4, #26]
   17fa0:	f043 0301 	orr.w	r3, r3, #1
   17fa4:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   17fa6:	b2db      	uxtb	r3, r3
   17fa8:	f043 0302 	orr.w	r3, r3, #2
   17fac:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_data_related_address_changes = 1;
   17fae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   17fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17fb6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_read_filter_accept_list_size = 1;
   17fba:	7ea3      	ldrb	r3, [r4, #26]
   17fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17fc0:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   17fc2:	b2db      	uxtb	r3, r3
   17fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17fc8:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   17fca:	7ee3      	ldrb	r3, [r4, #27]
   17fcc:	f043 0301 	orr.w	r3, r3, #1
   17fd0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   17fd2:	b2db      	uxtb	r3, r3
   17fd4:	f043 0302 	orr.w	r3, r3, #2
   17fd8:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   17fda:	b2db      	uxtb	r3, r3
   17fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17fe0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   17fe2:	b2db      	uxtb	r3, r3
   17fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17fe8:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   17fea:	7f23      	ldrb	r3, [r4, #28]
   17fec:	f043 0308 	orr.w	r3, r3, #8
   17ff0:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   17ff2:	b2db      	uxtb	r3, r3
   17ff4:	f043 0310 	orr.w	r3, r3, #16
   17ff8:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   17ffa:	b2db      	uxtb	r3, r3
   17ffc:	f043 0320 	orr.w	r3, r3, #32
   18000:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   18002:	b2db      	uxtb	r3, r3
   18004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18008:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v2 = 1;
   1800a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1800e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18012:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   18016:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1801a:	f043 0301 	orr.w	r3, r3, #1
   1801e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   18022:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   18026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1802a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   1802e:	bd10      	pop	{r4, pc}

00018030 <supported_features>:
{
   18030:	b510      	push	{r4, lr}
   18032:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   18034:	2208      	movs	r2, #8
   18036:	2100      	movs	r1, #0
   18038:	f7fe feea 	bl	16e10 <memset>
	features->bdedr_not_supported = 1;
   1803c:	7923      	ldrb	r3, [r4, #4]
   1803e:	f043 0320 	orr.w	r3, r3, #32
   18042:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   18044:	b2db      	uxtb	r3, r3
   18046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1804a:	7123      	strb	r3, [r4, #4]
}
   1804c:	bd10      	pop	{r4, pc}

0001804e <info_param_cmd_put>:
{
   1804e:	b508      	push	{r3, lr}
   18050:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   18052:	1d88      	adds	r0, r1, #6
   18054:	f893 c001 	ldrb.w	ip, [r3, #1]
   18058:	781b      	ldrb	r3, [r3, #0]
   1805a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   1805e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   18060:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   18064:	3b01      	subs	r3, #1
   18066:	2b08      	cmp	r3, #8
   18068:	d820      	bhi.n	180ac <info_param_cmd_put+0x5e>
   1806a:	e8df f003 	tbb	[pc, r3]
   1806e:	0b05      	.short	0x0b05
   18070:	1f1f1f12 	.word	0x1f1f1f12
   18074:	1f1f      	.short	0x1f1f
   18076:	19          	.byte	0x19
   18077:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   18078:	7813      	ldrb	r3, [r2, #0]
   1807a:	3308      	adds	r3, #8
   1807c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1807e:	f7f0 f847 	bl	8110 <sdc_hci_cmd_ip_read_local_version_information>
   18082:	e014      	b.n	180ae <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   18084:	7813      	ldrb	r3, [r2, #0]
   18086:	3340      	adds	r3, #64	; 0x40
   18088:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   1808a:	f7ff ff52 	bl	17f32 <supported_commands>
		return 0;
   1808e:	2000      	movs	r0, #0
   18090:	e00d      	b.n	180ae <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   18092:	7813      	ldrb	r3, [r2, #0]
   18094:	3308      	adds	r3, #8
   18096:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   18098:	f7ff ffca 	bl	18030 <supported_features>
		return 0;
   1809c:	2000      	movs	r0, #0
   1809e:	e006      	b.n	180ae <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   180a0:	7813      	ldrb	r3, [r2, #0]
   180a2:	3306      	adds	r3, #6
   180a4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   180a6:	f7f0 f831 	bl	810c <sdc_hci_cmd_ip_read_bd_addr>
   180aa:	e000      	b.n	180ae <info_param_cmd_put+0x60>
	switch (opcode)	{
   180ac:	2001      	movs	r0, #1
}
   180ae:	bd08      	pop	{r3, pc}

000180b0 <le_supported_features>:
{
   180b0:	b510      	push	{r4, lr}
   180b2:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   180b4:	2208      	movs	r2, #8
   180b6:	2100      	movs	r1, #0
   180b8:	f7fe feaa 	bl	16e10 <memset>
	features->params.le_encryption = 1;
   180bc:	7823      	ldrb	r3, [r4, #0]
   180be:	f043 0301 	orr.w	r3, r3, #1
   180c2:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   180c4:	b2db      	uxtb	r3, r3
   180c6:	f043 0304 	orr.w	r3, r3, #4
   180ca:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   180cc:	b2db      	uxtb	r3, r3
   180ce:	f043 0308 	orr.w	r3, r3, #8
   180d2:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   180d4:	b2db      	uxtb	r3, r3
   180d6:	f043 0310 	orr.w	r3, r3, #16
   180da:	7023      	strb	r3, [r4, #0]
	features->params.channel_selection_algorithm_2 = 1;
   180dc:	7863      	ldrb	r3, [r4, #1]
   180de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   180e2:	7063      	strb	r3, [r4, #1]
}
   180e4:	bd10      	pop	{r4, pc}

000180e6 <vs_zephyr_supported_commands>:
{
   180e6:	b510      	push	{r4, lr}
   180e8:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   180ea:	2202      	movs	r2, #2
   180ec:	2100      	movs	r1, #0
   180ee:	f7fe fe8f 	bl	16e10 <memset>
	cmds->read_version_info = 1;
   180f2:	7823      	ldrb	r3, [r4, #0]
   180f4:	f043 0301 	orr.w	r3, r3, #1
   180f8:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   180fa:	b2db      	uxtb	r3, r3
   180fc:	f043 0302 	orr.w	r3, r3, #2
   18100:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   18102:	b2db      	uxtb	r3, r3
   18104:	f043 0320 	orr.w	r3, r3, #32
   18108:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   1810a:	7863      	ldrb	r3, [r4, #1]
   1810c:	f043 0301 	orr.w	r3, r3, #1
   18110:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   18112:	b2db      	uxtb	r3, r3
   18114:	f043 0302 	orr.w	r3, r3, #2
   18118:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   1811a:	b2db      	uxtb	r3, r3
   1811c:	f043 0304 	orr.w	r3, r3, #4
   18120:	7063      	strb	r3, [r4, #1]
}
   18122:	bd10      	pop	{r4, pc}

00018124 <vs_supported_commands>:
{
   18124:	b510      	push	{r4, lr}
   18126:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   18128:	2202      	movs	r2, #2
   1812a:	2100      	movs	r1, #0
   1812c:	f7fe fe70 	bl	16e10 <memset>
	cmds->read_supported_vs_commands = 1;
   18130:	7823      	ldrb	r3, [r4, #0]
   18132:	f043 0301 	orr.w	r3, r3, #1
   18136:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   18138:	b2db      	uxtb	r3, r3
   1813a:	f043 0302 	orr.w	r3, r3, #2
   1813e:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   18140:	b2db      	uxtb	r3, r3
   18142:	f043 0304 	orr.w	r3, r3, #4
   18146:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   18148:	b2db      	uxtb	r3, r3
   1814a:	f043 0308 	orr.w	r3, r3, #8
   1814e:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   18150:	b2db      	uxtb	r3, r3
   18152:	f043 0310 	orr.w	r3, r3, #16
   18156:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   18158:	b2db      	uxtb	r3, r3
   1815a:	f043 0320 	orr.w	r3, r3, #32
   1815e:	7023      	strb	r3, [r4, #0]
}
   18160:	bd10      	pop	{r4, pc}

00018162 <le_controller_cmd_put>:
{
   18162:	b508      	push	{r3, lr}
   18164:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18166:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   18168:	3106      	adds	r1, #6
   1816a:	f893 c001 	ldrb.w	ip, [r3, #1]
   1816e:	781b      	ldrb	r3, [r3, #0]
   18170:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   18174:	b21b      	sxth	r3, r3
	switch (opcode)	{
   18176:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1817a:	3b01      	subs	r3, #1
   1817c:	2b7b      	cmp	r3, #123	; 0x7b
   1817e:	f200 8097 	bhi.w	182b0 <le_controller_cmd_put+0x14e>
   18182:	e8df f003 	tbb	[pc, r3]
   18186:	413e      	.short	0x413e
   18188:	53509548 	.word	0x53509548
   1818c:	63605d56 	.word	0x63605d56
   18190:	95959595 	.word	0x95959595
   18194:	76737069 	.word	0x76737069
   18198:	95959595 	.word	0x95959595
   1819c:	95957f79 	.word	0x95957f79
   181a0:	95958695 	.word	0x95958695
   181a4:	95959595 	.word	0x95959595
   181a8:	95959595 	.word	0x95959595
   181ac:	95959595 	.word	0x95959595
   181b0:	95959595 	.word	0x95959595
   181b4:	95959595 	.word	0x95959595
   181b8:	95959595 	.word	0x95959595
   181bc:	95959595 	.word	0x95959595
   181c0:	95959595 	.word	0x95959595
   181c4:	95959595 	.word	0x95959595
   181c8:	95959595 	.word	0x95959595
   181cc:	95959595 	.word	0x95959595
   181d0:	9595958e 	.word	0x9595958e
   181d4:	95959595 	.word	0x95959595
   181d8:	95959595 	.word	0x95959595
   181dc:	95959595 	.word	0x95959595
   181e0:	95959595 	.word	0x95959595
   181e4:	95959595 	.word	0x95959595
   181e8:	95959595 	.word	0x95959595
   181ec:	95959595 	.word	0x95959595
   181f0:	95959595 	.word	0x95959595
   181f4:	95959595 	.word	0x95959595
   181f8:	95959595 	.word	0x95959595
   181fc:	95959595 	.word	0x95959595
   18200:	6695      	.short	0x6695
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   18202:	f7ef ffa5 	bl	8150 <sdc_hci_cmd_le_set_event_mask>
   18206:	e054      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   18208:	7813      	ldrb	r3, [r2, #0]
   1820a:	3303      	adds	r3, #3
   1820c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1820e:	4608      	mov	r0, r1
   18210:	f7ef ff8e 	bl	8130 <sdc_hci_cmd_le_read_buffer_size>
   18214:	e04d      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   18216:	7813      	ldrb	r3, [r2, #0]
   18218:	3308      	adds	r3, #8
   1821a:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   1821c:	4608      	mov	r0, r1
   1821e:	f7ff ff47 	bl	180b0 <le_supported_features>
		return 0;
   18222:	2000      	movs	r0, #0
   18224:	e045      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   18226:	f7ef ff98 	bl	815a <sdc_hci_cmd_le_set_random_address>
   1822a:	e042      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1822c:	f7ef ff8c 	bl	8148 <sdc_hci_cmd_le_set_adv_params>
   18230:	e03f      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out +=
   18232:	7813      	ldrb	r3, [r2, #0]
   18234:	3301      	adds	r3, #1
   18236:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   18238:	4608      	mov	r0, r1
   1823a:	f7ef ff77 	bl	812c <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1823e:	e038      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   18240:	f7ef ff7e 	bl	8140 <sdc_hci_cmd_le_set_adv_data>
   18244:	e035      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   18246:	f7ef ff8a 	bl	815e <sdc_hci_cmd_le_set_scan_response_data>
   1824a:	e032      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1824c:	f7ef ff7a 	bl	8144 <sdc_hci_cmd_le_set_adv_enable>
   18250:	e02f      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   18252:	f7ef ff7b 	bl	814c <sdc_hci_cmd_le_set_data_related_address_changes>
   18256:	e02c      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   18258:	7813      	ldrb	r3, [r2, #0]
   1825a:	3301      	adds	r3, #1
   1825c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1825e:	4608      	mov	r0, r1
   18260:	f7ef ff68 	bl	8134 <sdc_hci_cmd_le_read_filter_accept_list_size>
   18264:	e025      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   18266:	f7ef ff57 	bl	8118 <sdc_hci_cmd_le_clear_filter_accept_list>
   1826a:	e022      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1826c:	f7ef ff52 	bl	8114 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   18270:	e01f      	b.n	182b2 <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   18272:	f7ef ff63 	bl	813c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   18276:	e01c      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   18278:	7813      	ldrb	r3, [r2, #0]
   1827a:	3310      	adds	r3, #16
   1827c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1827e:	f7ef ff4d 	bl	811c <sdc_hci_cmd_le_encrypt>
   18282:	e016      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   18284:	7813      	ldrb	r3, [r2, #0]
   18286:	3308      	adds	r3, #8
   18288:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1828a:	4608      	mov	r0, r1
   1828c:	f7ef ff4c 	bl	8128 <sdc_hci_cmd_le_rand>
   18290:	e00f      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   18292:	7813      	ldrb	r3, [r2, #0]
   18294:	3308      	adds	r3, #8
   18296:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   18298:	4608      	mov	r0, r1
   1829a:	f7ff fe2c 	bl	17ef6 <le_read_supported_states>
		return 0;
   1829e:	2000      	movs	r0, #0
   182a0:	e007      	b.n	182b2 <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   182a2:	7813      	ldrb	r3, [r2, #0]
   182a4:	3302      	adds	r3, #2
   182a6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   182a8:	4608      	mov	r0, r1
   182aa:	f7ef ff45 	bl	8138 <sdc_hci_cmd_le_read_transmit_power>
   182ae:	e000      	b.n	182b2 <le_controller_cmd_put+0x150>
	switch (opcode)	{
   182b0:	2001      	movs	r0, #1
}
   182b2:	bd08      	pop	{r3, pc}

000182b4 <vs_cmd_put>:
{
   182b4:	b508      	push	{r3, lr}
   182b6:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   182b8:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   182ba:	3106      	adds	r1, #6
   182bc:	f893 c001 	ldrb.w	ip, [r3, #1]
   182c0:	781b      	ldrb	r3, [r3, #0]
   182c2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   182c6:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   182ca:	4563      	cmp	r3, ip
   182cc:	d913      	bls.n	182f6 <vs_cmd_put+0x42>
   182ce:	f64f 5c0c 	movw	ip, #64780	; 0xfd0c
   182d2:	4563      	cmp	r3, ip
   182d4:	d86a      	bhi.n	183ac <vs_cmd_put+0xf8>
   182d6:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   182da:	d31e      	bcc.n	1831a <vs_cmd_put+0x66>
   182dc:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   182e0:	2b0c      	cmp	r3, #12
   182e2:	d85f      	bhi.n	183a4 <vs_cmd_put+0xf0>
   182e4:	e8df f003 	tbb	[pc, r3]
   182e8:	524f4c44 	.word	0x524f4c44
   182ec:	5e5e5855 	.word	0x5e5e5855
   182f0:	5e5e5e5e 	.word	0x5e5e5e5e
   182f4:	5b          	.byte	0x5b
   182f5:	00          	.byte	0x00
   182f6:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   182fa:	d801      	bhi.n	18300 <vs_cmd_put+0x4c>
   182fc:	2001      	movs	r0, #1
}
   182fe:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   18300:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   18304:	3b01      	subs	r3, #1
   18306:	2b0a      	cmp	r3, #10
   18308:	d84e      	bhi.n	183a8 <vs_cmd_put+0xf4>
   1830a:	e8df f003 	tbb	[pc, r3]
   1830e:	0f08      	.short	0x0f08
   18310:	274d4d4d 	.word	0x274d4d4d
   18314:	20174d4d 	.word	0x20174d4d
   18318:	2a          	.byte	0x2a
   18319:	00          	.byte	0x00
   1831a:	2001      	movs	r0, #1
   1831c:	e7ef      	b.n	182fe <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1831e:	7813      	ldrb	r3, [r2, #0]
   18320:	330c      	adds	r3, #12
   18322:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   18324:	4608      	mov	r0, r1
   18326:	f7e8 fa2b 	bl	780 <sdc_hci_cmd_vs_zephyr_read_version_info>
   1832a:	e7e8      	b.n	182fe <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1832c:	7813      	ldrb	r3, [r2, #0]
   1832e:	3340      	adds	r3, #64	; 0x40
   18330:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   18332:	4608      	mov	r0, r1
   18334:	f7ff fed7 	bl	180e6 <vs_zephyr_supported_commands>
		return 0;
   18338:	2000      	movs	r0, #0
   1833a:	e7e0      	b.n	182fe <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   1833c:	7813      	ldrb	r3, [r2, #0]
   1833e:	1c58      	adds	r0, r3, #1
   18340:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   18342:	3317      	adds	r3, #23
   18344:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   18346:	4608      	mov	r0, r1
   18348:	f7e8 f9ce 	bl	6e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1834c:	e7d7      	b.n	182fe <vs_cmd_put+0x4a>
		*param_length_out +=
   1834e:	7813      	ldrb	r3, [r2, #0]
   18350:	3320      	adds	r3, #32
   18352:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   18354:	4608      	mov	r0, r1
   18356:	f7e8 f97f 	bl	658 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1835a:	e7d0      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1835c:	f7ef fed4 	bl	8108 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   18360:	e7cd      	b.n	182fe <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   18362:	7813      	ldrb	r3, [r2, #0]
   18364:	3301      	adds	r3, #1
   18366:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   18368:	4608      	mov	r0, r1
   1836a:	f7ef feb9 	bl	80e0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1836e:	e7c6      	b.n	182fe <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   18370:	7813      	ldrb	r3, [r2, #0]
   18372:	3340      	adds	r3, #64	; 0x40
   18374:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   18376:	4608      	mov	r0, r1
   18378:	f7ff fed4 	bl	18124 <vs_supported_commands>
		return 0;
   1837c:	2000      	movs	r0, #0
   1837e:	e7be      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   18380:	f7ef fea5 	bl	80ce <sdc_hci_cmd_vs_llpm_mode_set>
   18384:	e7bb      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   18386:	f7ef fe9e 	bl	80c6 <sdc_hci_cmd_vs_conn_update>
   1838a:	e7b8      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1838c:	f7ef fe93 	bl	80b6 <sdc_hci_cmd_vs_conn_event_extend>
   18390:	e7b5      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   18392:	f7ef fe9e 	bl	80d2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   18396:	e7b2      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18398:	f7ef fe97 	bl	80ca <sdc_hci_cmd_vs_event_length_set>
   1839c:	e7af      	b.n	182fe <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1839e:	f7ef fe9d 	bl	80dc <sdc_hci_cmd_vs_set_adv_randomness>
   183a2:	e7ac      	b.n	182fe <vs_cmd_put+0x4a>
	switch (opcode)	{
   183a4:	2001      	movs	r0, #1
   183a6:	e7aa      	b.n	182fe <vs_cmd_put+0x4a>
   183a8:	2001      	movs	r0, #1
   183aa:	e7a8      	b.n	182fe <vs_cmd_put+0x4a>
   183ac:	2001      	movs	r0, #1
   183ae:	e7a6      	b.n	182fe <vs_cmd_put+0x4a>

000183b0 <m_config_clock_source_get>:
}
   183b0:	2001      	movs	r0, #1
   183b2:	4770      	bx	lr

000183b4 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   183b4:	4668      	mov	r0, sp
   183b6:	f020 0107 	bic.w	r1, r0, #7
   183ba:	468d      	mov	sp, r1
   183bc:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   183be:	f7ee f857 	bl	6470 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   183c2:	f7f4 fa3f 	bl	c844 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   183c6:	f7f4 fb41 	bl	ca4c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   183ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   183ce:	4685      	mov	sp, r0
   183d0:	4770      	bx	lr

000183d2 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   183d2:	4668      	mov	r0, sp
   183d4:	f020 0107 	bic.w	r1, r0, #7
   183d8:	468d      	mov	sp, r1
   183da:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   183dc:	f7ed fffe 	bl	63dc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   183e0:	f7f4 fa30 	bl	c844 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   183e4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   183e8:	4685      	mov	sp, r0
   183ea:	4770      	bx	lr

000183ec <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   183ec:	4668      	mov	r0, sp
   183ee:	f020 0107 	bic.w	r1, r0, #7
   183f2:	468d      	mov	sp, r1
   183f4:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   183f6:	f7eb fd49 	bl	3e8c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   183fa:	f7f4 fa23 	bl	c844 <_arch_isr_direct_pm>
   183fe:	f7f4 fb25 	bl	ca4c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   18402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   18406:	4685      	mov	sp, r0
   18408:	4770      	bx	lr

0001840a <mpsl_lib_init_sys>:
{
   1840a:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   1840c:	f7fa fcc6 	bl	12d9c <mpsl_lib_init_internal>
	if (err) {
   18410:	4604      	mov	r4, r0
   18412:	b108      	cbz	r0, 18418 <mpsl_lib_init_sys+0xe>
}
   18414:	4620      	mov	r0, r4
   18416:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18418:	2201      	movs	r2, #1
   1841a:	2100      	movs	r1, #0
   1841c:	2008      	movs	r0, #8
   1841e:	f7fe fbfe 	bl	16c1e <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18422:	2201      	movs	r2, #1
   18424:	2100      	movs	r1, #0
   18426:	200b      	movs	r0, #11
   18428:	f7fe fbf9 	bl	16c1e <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1842c:	2201      	movs	r2, #1
   1842e:	2100      	movs	r1, #0
   18430:	4610      	mov	r0, r2
   18432:	f7fe fbf4 	bl	16c1e <z_arm_irq_priority_set>
	return 0;
   18436:	e7ed      	b.n	18414 <mpsl_lib_init_sys+0xa>

00018438 <mpsl_low_prio_work_handler>:
{
   18438:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1843a:	f04f 30ff 	mov.w	r0, #4294967295
   1843e:	f04f 31ff 	mov.w	r1, #4294967295
   18442:	f7f9 ff4b 	bl	122dc <multithreading_lock_acquire>
	mpsl_low_priority_process();
   18446:	f7f1 fd02 	bl	9e4e <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   1844a:	f7f9 ff51 	bl	122f0 <multithreading_lock_release>
}
   1844e:	bd08      	pop	{r3, pc}

00018450 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   18450:	b508      	push	{r3, lr}

	mpsl_fem_init();
   18452:	f7f1 fed2 	bl	a1fa <mpsl_fem_init>

	return 0;
}
   18456:	2000      	movs	r0, #0
   18458:	bd08      	pop	{r3, pc}

0001845a <nrfx_clock_stop>:
	switch (domain) {
   1845a:	2801      	cmp	r0, #1
   1845c:	d000      	beq.n	18460 <nrfx_clock_stop+0x6>
   1845e:	4770      	bx	lr
{
   18460:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   18462:	f7ee fe99 	bl	7198 <mpsl_clock_hfclk_release>
}
   18466:	bd08      	pop	{r3, pc}

00018468 <nrfx_clock_enable>:
}
   18468:	4770      	bx	lr

0001846a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   1846a:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   1846c:	f7ee fc9e 	bl	6dac <MPSL_IRQ_CLOCK_Handler>
}
   18470:	bd08      	pop	{r3, pc}

00018472 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18472:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18476:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1847a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1847e:	d003      	beq.n	18488 <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18480:	2b06      	cmp	r3, #6
   18482:	d006      	beq.n	18492 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18484:	2000      	movs	r0, #0
   18486:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18488:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1848c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18490:	e7f6      	b.n	18480 <nrf52_errata_12+0xe>
                        return true;
   18492:	2001      	movs	r0, #1
    #endif
}
   18494:	4770      	bx	lr

00018496 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18496:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1849a:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1849e:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   184a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   184a6:	2a06      	cmp	r2, #6
   184a8:	d001      	beq.n	184ae <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   184aa:	2000      	movs	r0, #0
   184ac:	4770      	bx	lr
                switch(var2)
   184ae:	3b03      	subs	r3, #3
   184b0:	2b00      	cmp	r3, #0
   184b2:	d804      	bhi.n	184be <nrf52_errata_16+0x28>
   184b4:	e8df f003 	tbb	[pc, r3]
   184b8:	01          	.byte	0x01
   184b9:	00          	.byte	0x00
   184ba:	2001      	movs	r0, #1
   184bc:	4770      	bx	lr
                        return false;
   184be:	2000      	movs	r0, #0
    #endif
}
   184c0:	4770      	bx	lr

000184c2 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   184c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   184c6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   184ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   184ce:	d003      	beq.n	184d8 <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   184d0:	2b06      	cmp	r3, #6
   184d2:	d006      	beq.n	184e2 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   184d4:	2000      	movs	r0, #0
   184d6:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   184d8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   184dc:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   184e0:	e7f6      	b.n	184d0 <nrf52_errata_31+0xe>
                        return true;
   184e2:	2001      	movs	r0, #1
    #endif
}
   184e4:	4770      	bx	lr

000184e6 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   184e6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   184ea:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   184ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   184f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   184f6:	2a06      	cmp	r2, #6
   184f8:	d001      	beq.n	184fe <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   184fa:	2000      	movs	r0, #0
   184fc:	4770      	bx	lr
                switch(var2)
   184fe:	3b03      	subs	r3, #3
   18500:	2b00      	cmp	r3, #0
   18502:	d804      	bhi.n	1850e <nrf52_errata_32+0x28>
   18504:	e8df f003 	tbb	[pc, r3]
   18508:	01          	.byte	0x01
   18509:	00          	.byte	0x00
   1850a:	2001      	movs	r0, #1
   1850c:	4770      	bx	lr
                        return false;
   1850e:	2000      	movs	r0, #0
    #endif
}
   18510:	4770      	bx	lr

00018512 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18516:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1851a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1851e:	d003      	beq.n	18528 <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18520:	2b06      	cmp	r3, #6
   18522:	d006      	beq.n	18532 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18524:	2000      	movs	r0, #0
   18526:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18528:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1852c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18530:	e7f6      	b.n	18520 <nrf52_errata_36+0xe>
                        return true;
   18532:	2001      	movs	r0, #1
    #endif
}
   18534:	4770      	bx	lr

00018536 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18536:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1853a:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1853e:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18542:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18546:	2a06      	cmp	r2, #6
   18548:	d001      	beq.n	1854e <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1854a:	2000      	movs	r0, #0
   1854c:	4770      	bx	lr
                switch(var2)
   1854e:	3b03      	subs	r3, #3
   18550:	2b00      	cmp	r3, #0
   18552:	d804      	bhi.n	1855e <nrf52_errata_37+0x28>
   18554:	e8df f003 	tbb	[pc, r3]
   18558:	01          	.byte	0x01
   18559:	00          	.byte	0x00
   1855a:	2001      	movs	r0, #1
   1855c:	4770      	bx	lr
                        return false;
   1855e:	2000      	movs	r0, #0
    #endif
}
   18560:	4770      	bx	lr

00018562 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18562:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18566:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1856a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1856e:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18572:	2a06      	cmp	r2, #6
   18574:	d001      	beq.n	1857a <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18576:	2000      	movs	r0, #0
   18578:	4770      	bx	lr
                switch(var2)
   1857a:	3b03      	subs	r3, #3
   1857c:	2b00      	cmp	r3, #0
   1857e:	d804      	bhi.n	1858a <nrf52_errata_57+0x28>
   18580:	e8df f003 	tbb	[pc, r3]
   18584:	01          	.byte	0x01
   18585:	00          	.byte	0x00
   18586:	2001      	movs	r0, #1
   18588:	4770      	bx	lr
                        return false;
   1858a:	2000      	movs	r0, #0
    #endif
}
   1858c:	4770      	bx	lr

0001858e <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1858e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18592:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18596:	f1b3 3fff 	cmp.w	r3, #4294967295
   1859a:	d007      	beq.n	185ac <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   185a0:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   185a4:	2b06      	cmp	r3, #6
   185a6:	d00a      	beq.n	185be <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   185a8:	2000      	movs	r0, #0
   185aa:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   185ac:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
   185b0:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   185b4:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
   185b8:	f3c2 1203 	ubfx	r2, r2, #4, #4
   185bc:	e7f2      	b.n	185a4 <nrf52_errata_66+0x16>
                switch(var2)
   185be:	3a03      	subs	r2, #3
   185c0:	2a01      	cmp	r2, #1
   185c2:	d804      	bhi.n	185ce <nrf52_errata_66+0x40>
   185c4:	e8df f002 	tbb	[pc, r2]
   185c8:	0101      	.short	0x0101
   185ca:	2000      	movs	r0, #0
   185cc:	4770      	bx	lr
                        return true;
   185ce:	2001      	movs	r0, #1
    #endif
}
   185d0:	4770      	bx	lr

000185d2 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   185d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   185d6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   185da:	f1b3 3fff 	cmp.w	r3, #4294967295
   185de:	d003      	beq.n	185e8 <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   185e0:	2b06      	cmp	r3, #6
   185e2:	d006      	beq.n	185f2 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   185e4:	2000      	movs	r0, #0
   185e6:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   185e8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   185ec:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   185f0:	e7f6      	b.n	185e0 <nrf52_errata_108+0xe>
                        return true;
   185f2:	2001      	movs	r0, #1
    #endif
}
   185f4:	4770      	bx	lr

000185f6 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   185f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   185fa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   185fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   18602:	d003      	beq.n	1860c <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18604:	2b06      	cmp	r3, #6
   18606:	d006      	beq.n	18616 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18608:	2000      	movs	r0, #0
   1860a:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1860c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18610:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18614:	e7f6      	b.n	18604 <nrf52_errata_136+0xe>
                        return true;
   18616:	2001      	movs	r0, #1
    #endif
}
   18618:	4770      	bx	lr

0001861a <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1861a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1861e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18622:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18626:	2a06      	cmp	r2, #6
   18628:	d001      	beq.n	1862e <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1862a:	2000      	movs	r0, #0
   1862c:	4770      	bx	lr
                switch(var2)
   1862e:	2b05      	cmp	r3, #5
   18630:	d803      	bhi.n	1863a <nrf52_errata_182+0x20>
   18632:	2b03      	cmp	r3, #3
   18634:	d303      	bcc.n	1863e <nrf52_errata_182+0x24>
   18636:	2000      	movs	r0, #0
   18638:	4770      	bx	lr
                        return true;
   1863a:	2001      	movs	r0, #1
   1863c:	4770      	bx	lr
                        return true;
   1863e:	2001      	movs	r0, #1
    #endif
}
   18640:	4770      	bx	lr

00018642 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18646:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1864a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1864e:	2a06      	cmp	r2, #6
   18650:	d001      	beq.n	18656 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18652:	2000      	movs	r0, #0
   18654:	4770      	bx	lr
                switch(var2)
   18656:	2b06      	cmp	r3, #6
   18658:	d803      	bhi.n	18662 <nrf52_configuration_249+0x20>
   1865a:	2b03      	cmp	r3, #3
   1865c:	d303      	bcc.n	18666 <nrf52_configuration_249+0x24>
   1865e:	2000      	movs	r0, #0
   18660:	4770      	bx	lr
                        return true;
   18662:	2001      	movs	r0, #1
   18664:	4770      	bx	lr
                        return true;
   18666:	2001      	movs	r0, #1
    #endif
}
   18668:	4770      	bx	lr

0001866a <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   1866a:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1866c:	f7ff ffe9 	bl	18642 <nrf52_configuration_249>
   18670:	b138      	cbz	r0, 18682 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18672:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18676:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1867a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1867e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   18682:	bd08      	pop	{r3, pc}

00018684 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   18684:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   18686:	4780      	blx	r0
}
   18688:	bd08      	pop	{r3, pc}

0001868a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1868a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1868c:	f000 fe17 	bl	192be <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   18690:	bd08      	pop	{r3, pc}

00018692 <nrf_gpiote_event_configure>:
{
   18692:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18694:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   18698:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1869c:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   186a0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   186a4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   186a8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   186ac:	0212      	lsls	r2, r2, #8
   186ae:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   186b2:	041b      	lsls	r3, r3, #16
   186b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   186b8:	431a      	orrs	r2, r3
   186ba:	4314      	orrs	r4, r2
   186bc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   186c0:	bc10      	pop	{r4}
   186c2:	4770      	bx	lr

000186c4 <nrf_gpiote_task_configure>:
{
   186c4:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   186c6:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   186ca:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   186ce:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
   186d2:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   186d6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   186da:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   186de:	0212      	lsls	r2, r2, #8
   186e0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   186e4:	041b      	lsls	r3, r3, #16
   186e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   186ea:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   186ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
   186f0:	051b      	lsls	r3, r3, #20
   186f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   186f6:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   186f8:	4314      	orrs	r4, r2
   186fa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   186fe:	bc10      	pop	{r4}
   18700:	4770      	bx	lr

00018702 <nrf_gpio_reconfigure>:
{
   18702:	b4f0      	push	{r4, r5, r6, r7}
   18704:	461c      	mov	r4, r3
   18706:	9e04      	ldr	r6, [sp, #16]
   18708:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
   1870a:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1870e:	f500 77e0 	add.w	r7, r0, #448	; 0x1c0
   18712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18716:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1871a:	460b      	mov	r3, r1
   1871c:	b389      	cbz	r1, 18782 <nrf_gpio_reconfigure+0x80>
   1871e:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18720:	b38a      	cbz	r2, 18786 <nrf_gpio_reconfigure+0x84>
   18722:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18726:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1872a:	b37c      	cbz	r4, 1878c <nrf_gpio_reconfigure+0x8a>
   1872c:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18730:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   18734:	b36e      	cbz	r6, 18792 <nrf_gpio_reconfigure+0x90>
   18736:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1873a:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1873e:	b35d      	cbz	r5, 18798 <nrf_gpio_reconfigure+0x96>
   18740:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18744:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
   18748:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1874c:	b33b      	cbz	r3, 1879e <nrf_gpio_reconfigure+0x9c>
   1874e:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18750:	b33a      	cbz	r2, 187a2 <nrf_gpio_reconfigure+0xa0>
   18752:	7812      	ldrb	r2, [r2, #0]
   18754:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18756:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18758:	b32c      	cbz	r4, 187a6 <nrf_gpio_reconfigure+0xa4>
   1875a:	7822      	ldrb	r2, [r4, #0]
   1875c:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1875e:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   18760:	b31e      	cbz	r6, 187aa <nrf_gpio_reconfigure+0xa8>
   18762:	7832      	ldrb	r2, [r6, #0]
   18764:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18766:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   18768:	b30d      	cbz	r5, 187ae <nrf_gpio_reconfigure+0xac>
   1876a:	782a      	ldrb	r2, [r5, #0]
   1876c:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1876e:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18770:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   18772:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   18776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1877a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   1877e:	bcf0      	pop	{r4, r5, r6, r7}
   18780:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   18782:	2100      	movs	r1, #0
   18784:	e7cc      	b.n	18720 <nrf_gpio_reconfigure+0x1e>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18786:	f04f 0c00 	mov.w	ip, #0
   1878a:	e7cc      	b.n	18726 <nrf_gpio_reconfigure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1878c:	f04f 0c00 	mov.w	ip, #0
   18790:	e7ce      	b.n	18730 <nrf_gpio_reconfigure+0x2e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   18792:	f04f 0c00 	mov.w	ip, #0
   18796:	e7d0      	b.n	1873a <nrf_gpio_reconfigure+0x38>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   18798:	f04f 0c00 	mov.w	ip, #0
   1879c:	e7d2      	b.n	18744 <nrf_gpio_reconfigure+0x42>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1879e:	2300      	movs	r3, #0
   187a0:	e7d6      	b.n	18750 <nrf_gpio_reconfigure+0x4e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   187a2:	2200      	movs	r2, #0
   187a4:	e7d7      	b.n	18756 <nrf_gpio_reconfigure+0x54>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   187a6:	2200      	movs	r2, #0
   187a8:	e7d9      	b.n	1875e <nrf_gpio_reconfigure+0x5c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   187aa:	2200      	movs	r2, #0
   187ac:	e7db      	b.n	18766 <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   187ae:	2200      	movs	r2, #0
   187b0:	e7dd      	b.n	1876e <nrf_gpio_reconfigure+0x6c>

000187b2 <pin_is_task_output>:
{
   187b2:	b510      	push	{r4, lr}
   187b4:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   187b6:	f7fa fd51 	bl	1325c <pin_is_output>
   187ba:	b128      	cbz	r0, 187c8 <pin_is_task_output+0x16>
   187bc:	4620      	mov	r0, r4
   187be:	f7fa fd37 	bl	13230 <pin_in_use_by_te>
   187c2:	b118      	cbz	r0, 187cc <pin_is_task_output+0x1a>
   187c4:	2001      	movs	r0, #1
   187c6:	e000      	b.n	187ca <pin_is_task_output+0x18>
   187c8:	2000      	movs	r0, #0
}
   187ca:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   187cc:	2000      	movs	r0, #0
   187ce:	e7fc      	b.n	187ca <pin_is_task_output+0x18>

000187d0 <pin_is_input>:
{
   187d0:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   187d2:	f7fa fd43 	bl	1325c <pin_is_output>
   187d6:	f080 0001 	eor.w	r0, r0, #1
}
   187da:	b2c0      	uxtb	r0, r0
   187dc:	bd08      	pop	{r3, pc}

000187de <gpiote_polarity_to_trigger>:
}
   187de:	4770      	bx	lr

000187e0 <gpiote_trigger_to_polarity>:
}
   187e0:	4770      	bx	lr

000187e2 <is_level>:
}
   187e2:	2803      	cmp	r0, #3
   187e4:	bf94      	ite	ls
   187e6:	2000      	movls	r0, #0
   187e8:	2001      	movhi	r0, #1
   187ea:	4770      	bx	lr

000187ec <next_sense_cond_call_handler>:
{
   187ec:	b570      	push	{r4, r5, r6, lr}
   187ee:	4604      	mov	r4, r0
   187f0:	460d      	mov	r5, r1
   187f2:	4616      	mov	r6, r2
    if (is_level(trigger))
   187f4:	4608      	mov	r0, r1
   187f6:	f7ff fff4 	bl	187e2 <is_level>
   187fa:	b9b8      	cbnz	r0, 1882c <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   187fc:	2e02      	cmp	r6, #2
   187fe:	d038      	beq.n	18872 <next_sense_cond_call_handler+0x86>
   18800:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   18802:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18806:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1880a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1880e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   18812:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18816:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1881a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1881e:	2d03      	cmp	r5, #3
   18820:	d02b      	beq.n	1887a <next_sense_cond_call_handler+0x8e>
   18822:	2e02      	cmp	r6, #2
   18824:	d027      	beq.n	18876 <next_sense_cond_call_handler+0x8a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   18826:	2e03      	cmp	r6, #3
   18828:	d02c      	beq.n	18884 <next_sense_cond_call_handler+0x98>
}
   1882a:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   1882c:	4629      	mov	r1, r5
   1882e:	4620      	mov	r0, r4
   18830:	f7fa fd86 	bl	13340 <call_handler>
    *p_pin = pin_number & 0x1F;
   18834:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   18838:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
   1883c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18844:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   18848:	429e      	cmp	r6, r3
   1884a:	d1ee      	bne.n	1882a <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1884c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18850:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   18854:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   18858:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1885c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18860:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   18864:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18868:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1886c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   18870:	e7db      	b.n	1882a <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   18872:	2003      	movs	r0, #3
   18874:	e7c5      	b.n	18802 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   18876:	2d01      	cmp	r5, #1
   18878:	d1d5      	bne.n	18826 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
   1887a:	4629      	mov	r1, r5
   1887c:	4620      	mov	r0, r4
   1887e:	f7fa fd5f 	bl	13340 <call_handler>
}
   18882:	e7d2      	b.n	1882a <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   18884:	2d02      	cmp	r5, #2
   18886:	d1d0      	bne.n	1882a <next_sense_cond_call_handler+0x3e>
   18888:	e7f7      	b.n	1887a <next_sense_cond_call_handler+0x8e>

0001888a <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   1888a:	4684      	mov	ip, r0
   1888c:	2300      	movs	r3, #0
   1888e:	e008      	b.n	188a2 <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   18890:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18894:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   18898:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   1889c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   188a0:	3301      	adds	r3, #1
   188a2:	2b00      	cmp	r3, #0
   188a4:	d0f4      	beq.n	18890 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   188a6:	2300      	movs	r3, #0
   188a8:	b10b      	cbz	r3, 188ae <latch_pending_read_and_check+0x24>
    return false;
   188aa:	2000      	movs	r0, #0
   188ac:	4770      	bx	lr
        if (latch[port_idx])
   188ae:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   188b2:	b90a      	cbnz	r2, 188b8 <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   188b4:	3301      	adds	r3, #1
   188b6:	e7f7      	b.n	188a8 <latch_pending_read_and_check+0x1e>
            return true;
   188b8:	2001      	movs	r0, #1
}
   188ba:	4770      	bx	lr

000188bc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   188bc:	b508      	push	{r3, lr}
  _DoInit();
   188be:	f7fb f859 	bl	13974 <_DoInit>
}
   188c2:	bd08      	pop	{r3, pc}

000188c4 <rtt_init>:
{
   188c4:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   188c6:	f7ff fff9 	bl	188bc <SEGGER_RTT_Init>
}
   188ca:	2000      	movs	r0, #0
   188cc:	bd08      	pop	{r3, pc}

000188ce <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   188ce:	b160      	cbz	r0, 188ea <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   188d0:	68c3      	ldr	r3, [r0, #12]
   188d2:	785a      	ldrb	r2, [r3, #1]
   188d4:	f012 0f01 	tst.w	r2, #1
   188d8:	d003      	beq.n	188e2 <z_device_is_ready+0x14>
   188da:	781b      	ldrb	r3, [r3, #0]
   188dc:	b11b      	cbz	r3, 188e6 <z_device_is_ready+0x18>
   188de:	2000      	movs	r0, #0
   188e0:	4770      	bx	lr
   188e2:	2000      	movs	r0, #0
   188e4:	4770      	bx	lr
   188e6:	2001      	movs	r0, #1
   188e8:	4770      	bx	lr
		return false;
   188ea:	2000      	movs	r0, #0
}
   188ec:	4770      	bx	lr

000188ee <z_early_memset>:
{
   188ee:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   188f0:	f7fe fa8e 	bl	16e10 <memset>
}
   188f4:	bd08      	pop	{r3, pc}

000188f6 <z_early_memcpy>:
{
   188f6:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   188f8:	f7fe fa5b 	bl	16db2 <memcpy>
}
   188fc:	bd08      	pop	{r3, pc}

000188fe <k_heap_init>:
{
   188fe:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   18900:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   18904:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   18906:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   18908:	f7fd f8cd 	bl	15aa6 <sys_heap_init>
}
   1890c:	bd10      	pop	{r4, pc}

0001890e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1890e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18912:	b085      	sub	sp, #20
   18914:	4607      	mov	r7, r0
   18916:	9103      	str	r1, [sp, #12]
   18918:	4692      	mov	sl, r2
   1891a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1891c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1891e:	4628      	mov	r0, r5
   18920:	4621      	mov	r1, r4
   18922:	f000 fcd2 	bl	192ca <sys_clock_timeout_end_calc>
   18926:	4606      	mov	r6, r0
   18928:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1892a:	f1b4 3fff 	cmp.w	r4, #4294967295
   1892e:	bf08      	it	eq
   18930:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   18934:	d00d      	beq.n	18952 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18936:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   1893a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1893e:	f3ef 8511 	mrs	r5, BASEPRI
   18942:	f383 8812 	msr	BASEPRI_MAX, r3
   18946:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1894a:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   1894e:	4644      	mov	r4, r8

	while (ret == NULL) {
   18950:	e014      	b.n	1897c <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   18952:	f04f 36ff 	mov.w	r6, #4294967295
   18956:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1895a:	e7ec      	b.n	18936 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1895c:	9000      	str	r0, [sp, #0]
   1895e:	9101      	str	r1, [sp, #4]
   18960:	f107 020c 	add.w	r2, r7, #12
   18964:	4629      	mov	r1, r5
   18966:	4658      	mov	r0, fp
   18968:	f7fc f8d2 	bl	14b10 <z_pend_curr>
   1896c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18970:	f3ef 8511 	mrs	r5, BASEPRI
   18974:	f383 8812 	msr	BASEPRI_MAX, r3
   18978:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1897c:	b9ac      	cbnz	r4, 189aa <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1897e:	4652      	mov	r2, sl
   18980:	9903      	ldr	r1, [sp, #12]
   18982:	4638      	mov	r0, r7
   18984:	f7fd f819 	bl	159ba <sys_heap_aligned_alloc>
   18988:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1898a:	f7fc fbfd 	bl	15188 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1898e:	b964      	cbnz	r4, 189aa <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   18990:	1a30      	subs	r0, r6, r0
   18992:	eb69 0101 	sbc.w	r1, r9, r1
   18996:	2801      	cmp	r0, #1
   18998:	f171 0300 	sbcs.w	r3, r1, #0
   1899c:	db05      	blt.n	189aa <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   1899e:	f1b8 0f00 	cmp.w	r8, #0
   189a2:	d1db      	bne.n	1895c <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   189a4:	f04f 0801 	mov.w	r8, #1
   189a8:	e7d8      	b.n	1895c <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   189aa:	f385 8811 	msr	BASEPRI, r5
   189ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   189b2:	4620      	mov	r0, r4
   189b4:	b005      	add	sp, #20
   189b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000189ba <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   189ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189bc:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   189be:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   189c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   189c6:	f3ef 8511 	mrs	r5, BASEPRI
   189ca:	f383 8812 	msr	BASEPRI_MAX, r3
   189ce:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   189d2:	f7fc ffae 	bl	15932 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   189d6:	f104 000c 	add.w	r0, r4, #12
   189da:	f000 fbbd 	bl	19158 <z_unpend_all>
   189de:	b920      	cbnz	r0, 189ea <k_heap_free+0x30>
	__asm__ volatile(
   189e0:	f385 8811 	msr	BASEPRI, r5
   189e4:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   189e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   189ea:	4629      	mov	r1, r5
   189ec:	4638      	mov	r0, r7
   189ee:	f7fb ff41 	bl	14874 <z_reschedule>
   189f2:	e7f9      	b.n	189e8 <k_heap_free+0x2e>

000189f4 <setup_thread_stack>:
{
   189f4:	b410      	push	{r4}
   189f6:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   189f8:	3207      	adds	r2, #7
   189fa:	f022 0207 	bic.w	r2, r2, #7
   189fe:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   18a02:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   18a06:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   18a0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   18a0e:	2200      	movs	r2, #0
   18a10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   18a14:	4408      	add	r0, r1
   18a16:	bc10      	pop	{r4}
   18a18:	4770      	bx	lr

00018a1a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18a1a:	f3ef 8005 	mrs	r0, IPSR
}
   18a1e:	3800      	subs	r0, #0
   18a20:	bf18      	it	ne
   18a22:	2001      	movne	r0, #1
   18a24:	4770      	bx	lr

00018a26 <k_thread_name_get>:
}
   18a26:	3078      	adds	r0, #120	; 0x78
   18a28:	4770      	bx	lr

00018a2a <z_impl_k_thread_start>:
{
   18a2a:	b508      	push	{r3, lr}
	z_sched_start(thread);
   18a2c:	f7fc f836 	bl	14a9c <z_sched_start>
}
   18a30:	bd08      	pop	{r3, pc}

00018a32 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   18a32:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   18a34:	2400      	movs	r4, #0
   18a36:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   18a38:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18a3a:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   18a3c:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   18a3e:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   18a40:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   18a42:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   18a44:	bc10      	pop	{r4}
   18a46:	4770      	bx	lr

00018a48 <z_impl_k_thread_create>:
{
   18a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a4a:	b087      	sub	sp, #28
   18a4c:	4604      	mov	r4, r0
   18a4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   18a50:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18a52:	2700      	movs	r7, #0
   18a54:	9705      	str	r7, [sp, #20]
   18a56:	9f10      	ldr	r7, [sp, #64]	; 0x40
   18a58:	9704      	str	r7, [sp, #16]
   18a5a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   18a5c:	9703      	str	r7, [sp, #12]
   18a5e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   18a60:	9702      	str	r7, [sp, #8]
   18a62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   18a64:	9701      	str	r7, [sp, #4]
   18a66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   18a68:	9700      	str	r7, [sp, #0]
   18a6a:	f7fb fb2b 	bl	140c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18a6e:	f1b5 3fff 	cmp.w	r5, #4294967295
   18a72:	bf08      	it	eq
   18a74:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18a78:	d102      	bne.n	18a80 <z_impl_k_thread_create+0x38>
}
   18a7a:	4620      	mov	r0, r4
   18a7c:	b007      	add	sp, #28
   18a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   18a80:	4632      	mov	r2, r6
   18a82:	462b      	mov	r3, r5
   18a84:	4620      	mov	r0, r4
   18a86:	f7fb fb0f 	bl	140a8 <schedule_new_thread>
   18a8a:	e7f6      	b.n	18a7a <z_impl_k_thread_create+0x32>

00018a8c <z_pm_save_idle_exit>:
{
   18a8c:	b508      	push	{r3, lr}
	pm_system_resume();
   18a8e:	f7f3 fc47 	bl	c320 <pm_system_resume>
	sys_clock_idle_exit();
   18a92:	f7ff f98b 	bl	17dac <sys_clock_idle_exit>
}
   18a96:	bd08      	pop	{r3, pc}

00018a98 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   18a98:	4288      	cmp	r0, r1
   18a9a:	da00      	bge.n	18a9e <new_prio_for_inheritance+0x6>
   18a9c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18a9e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   18aa2:	db01      	blt.n	18aa8 <new_prio_for_inheritance+0x10>
   18aa4:	4608      	mov	r0, r1
   18aa6:	4770      	bx	lr
   18aa8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   18aac:	4770      	bx	lr

00018aae <adjust_owner_prio>:
{
   18aae:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   18ab0:	6880      	ldr	r0, [r0, #8]
   18ab2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18ab6:	428b      	cmp	r3, r1
   18ab8:	d101      	bne.n	18abe <adjust_owner_prio+0x10>
	return false;
   18aba:	2000      	movs	r0, #0
}
   18abc:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   18abe:	f7fc f843 	bl	14b48 <z_set_prio>
   18ac2:	e7fb      	b.n	18abc <adjust_owner_prio+0xe>

00018ac4 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18ac4:	680b      	ldr	r3, [r1, #0]
   18ac6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   18aca:	600b      	str	r3, [r1, #0]
	return list->tail;
   18acc:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18ace:	b132      	cbz	r2, 18ade <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18ad0:	6813      	ldr	r3, [r2, #0]
   18ad2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   18ad6:	430b      	orrs	r3, r1
   18ad8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18ada:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18adc:	4770      	bx	lr
	list->tail = node;
   18ade:	6041      	str	r1, [r0, #4]
	list->head = node;
   18ae0:	6001      	str	r1, [r0, #0]
}
   18ae2:	4770      	bx	lr

00018ae4 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   18ae4:	b508      	push	{r3, lr}
   18ae6:	b191      	cbz	r1, 18b0e <sys_sflist_insert+0x2a>
   18ae8:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18aea:	680b      	ldr	r3, [r1, #0]
   18aec:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   18af0:	2b03      	cmp	r3, #3
   18af2:	d918      	bls.n	18b26 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18af4:	6813      	ldr	r3, [r2, #0]
   18af6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   18afa:	430b      	orrs	r3, r1
   18afc:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18afe:	f8dc 3000 	ldr.w	r3, [ip]
   18b02:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   18b06:	4313      	orrs	r3, r2
   18b08:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   18b0c:	bd08      	pop	{r3, pc}
	return list->head;
   18b0e:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18b10:	6813      	ldr	r3, [r2, #0]
   18b12:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   18b16:	430b      	orrs	r3, r1
   18b18:	6013      	str	r3, [r2, #0]
	list->head = node;
   18b1a:	6002      	str	r2, [r0, #0]
	return list->tail;
   18b1c:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   18b1e:	2b00      	cmp	r3, #0
   18b20:	d1f4      	bne.n	18b0c <sys_sflist_insert+0x28>
	list->tail = node;
   18b22:	6042      	str	r2, [r0, #4]
}
   18b24:	e7f2      	b.n	18b0c <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   18b26:	4611      	mov	r1, r2
   18b28:	f7ff ffcc 	bl	18ac4 <sys_sflist_append>
   18b2c:	e7ee      	b.n	18b0c <sys_sflist_insert+0x28>

00018b2e <prepare_thread_to_run>:
{
   18b2e:	b508      	push	{r3, lr}
   18b30:	2200      	movs	r2, #0
   18b32:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18b36:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   18b38:	f000 fa36 	bl	18fa8 <z_ready_thread>
}
   18b3c:	bd08      	pop	{r3, pc}

00018b3e <queue_insert>:
{
   18b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b42:	4604      	mov	r4, r0
   18b44:	460e      	mov	r6, r1
   18b46:	4615      	mov	r5, r2
   18b48:	461f      	mov	r7, r3
   18b4a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18b4e:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   18b52:	f04f 0240 	mov.w	r2, #64	; 0x40
   18b56:	f3ef 8911 	mrs	r9, BASEPRI
   18b5a:	f382 8812 	msr	BASEPRI_MAX, r2
   18b5e:	f3bf 8f6f 	isb	sy
   18b62:	46ca      	mov	sl, r9
	if (is_append) {
   18b64:	b103      	cbz	r3, 18b68 <queue_insert+0x2a>
	return list->tail;
   18b66:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   18b68:	4640      	mov	r0, r8
   18b6a:	f000 fad3 	bl	19114 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   18b6e:	b998      	cbnz	r0, 18b98 <queue_insert+0x5a>
	if (alloc) {
   18b70:	b9df      	cbnz	r7, 18baa <queue_insert+0x6c>
	node->next_and_flags = flags;
   18b72:	2300      	movs	r3, #0
   18b74:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   18b76:	462a      	mov	r2, r5
   18b78:	4631      	mov	r1, r6
   18b7a:	4620      	mov	r0, r4
   18b7c:	f7ff ffb2 	bl	18ae4 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   18b80:	2104      	movs	r1, #4
   18b82:	f104 0010 	add.w	r0, r4, #16
   18b86:	f000 fd7c 	bl	19682 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   18b8a:	4649      	mov	r1, r9
   18b8c:	4640      	mov	r0, r8
   18b8e:	f7fb fe71 	bl	14874 <z_reschedule>
	return 0;
   18b92:	2000      	movs	r0, #0
}
   18b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   18b98:	4629      	mov	r1, r5
   18b9a:	f7ff ffc8 	bl	18b2e <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   18b9e:	4649      	mov	r1, r9
   18ba0:	4640      	mov	r0, r8
   18ba2:	f7fb fe67 	bl	14874 <z_reschedule>
		return 0;
   18ba6:	2000      	movs	r0, #0
   18ba8:	e7f4      	b.n	18b94 <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   18baa:	2108      	movs	r1, #8
   18bac:	2000      	movs	r0, #0
   18bae:	f7fc fc43 	bl	15438 <z_thread_aligned_alloc>
		if (anode == NULL) {
   18bb2:	b120      	cbz	r0, 18bbe <queue_insert+0x80>
		anode->data = data;
   18bb4:	6045      	str	r5, [r0, #4]
   18bb6:	2201      	movs	r2, #1
   18bb8:	6002      	str	r2, [r0, #0]
		data = anode;
   18bba:	4605      	mov	r5, r0
   18bbc:	e7db      	b.n	18b76 <queue_insert+0x38>
	__asm__ volatile(
   18bbe:	f38a 8811 	msr	BASEPRI, sl
   18bc2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   18bc6:	f06f 000b 	mvn.w	r0, #11
   18bca:	e7e3      	b.n	18b94 <queue_insert+0x56>

00018bcc <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   18bcc:	b160      	cbz	r0, 18be8 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18bce:	6803      	ldr	r3, [r0, #0]
   18bd0:	f013 0f03 	tst.w	r3, #3
   18bd4:	d008      	beq.n	18be8 <z_queue_node_peek+0x1c>
{
   18bd6:	b510      	push	{r4, lr}
		ret = anode->data;
   18bd8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   18bda:	b909      	cbnz	r1, 18be0 <z_queue_node_peek+0x14>
		ret = anode->data;
   18bdc:	4620      	mov	r0, r4
}
   18bde:	bd10      	pop	{r4, pc}
			k_free(anode);
   18be0:	f000 fd77 	bl	196d2 <k_free>
		ret = anode->data;
   18be4:	4620      	mov	r0, r4
   18be6:	e7fa      	b.n	18bde <z_queue_node_peek+0x12>
}
   18be8:	4770      	bx	lr

00018bea <z_impl_k_queue_init>:
	list->head = NULL;
   18bea:	2300      	movs	r3, #0
   18bec:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   18bee:	6043      	str	r3, [r0, #4]
   18bf0:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   18bf4:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   18bf6:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   18bf8:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   18bfc:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   18bfe:	6143      	str	r3, [r0, #20]
}
   18c00:	4770      	bx	lr

00018c02 <k_queue_append>:
{
   18c02:	b500      	push	{lr}
   18c04:	b083      	sub	sp, #12
   18c06:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   18c08:	2301      	movs	r3, #1
   18c0a:	9300      	str	r3, [sp, #0]
   18c0c:	2300      	movs	r3, #0
   18c0e:	4619      	mov	r1, r3
   18c10:	f7ff ff95 	bl	18b3e <queue_insert>
}
   18c14:	b003      	add	sp, #12
   18c16:	f85d fb04 	ldr.w	pc, [sp], #4

00018c1a <k_queue_prepend>:
{
   18c1a:	b500      	push	{lr}
   18c1c:	b083      	sub	sp, #12
   18c1e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   18c20:	2100      	movs	r1, #0
   18c22:	9100      	str	r1, [sp, #0]
   18c24:	460b      	mov	r3, r1
   18c26:	f7ff ff8a 	bl	18b3e <queue_insert>
}
   18c2a:	b003      	add	sp, #12
   18c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00018c30 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   18c30:	b15a      	cbz	r2, 18c4a <z_impl_k_sem_init+0x1a>
   18c32:	428a      	cmp	r2, r1
   18c34:	d30c      	bcc.n	18c50 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   18c36:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   18c38:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   18c3a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   18c3c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   18c3e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   18c42:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   18c44:	6143      	str	r3, [r0, #20]
	return 0;
   18c46:	2000      	movs	r0, #0
   18c48:	4770      	bx	lr
		return -EINVAL;
   18c4a:	f06f 0015 	mvn.w	r0, #21
   18c4e:	4770      	bx	lr
   18c50:	f06f 0015 	mvn.w	r0, #21
}
   18c54:	4770      	bx	lr

00018c56 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   18c56:	460b      	mov	r3, r1
   18c58:	b139      	cbz	r1, 18c6a <sys_slist_remove+0x14>
	return node->next;
   18c5a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   18c5c:	6019      	str	r1, [r3, #0]
	return list->tail;
   18c5e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   18c60:	428a      	cmp	r2, r1
   18c62:	d009      	beq.n	18c78 <sys_slist_remove+0x22>
	parent->next = child;
   18c64:	2300      	movs	r3, #0
   18c66:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c68:	4770      	bx	lr
	return node->next;
   18c6a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   18c6c:	6003      	str	r3, [r0, #0]
	return list->tail;
   18c6e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   18c70:	428a      	cmp	r2, r1
   18c72:	d1f7      	bne.n	18c64 <sys_slist_remove+0xe>
	list->tail = node;
   18c74:	6043      	str	r3, [r0, #4]
}
   18c76:	e7f5      	b.n	18c64 <sys_slist_remove+0xe>
	list->tail = node;
   18c78:	6043      	str	r3, [r0, #4]
}
   18c7a:	e7f3      	b.n	18c64 <sys_slist_remove+0xe>

00018c7c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18c7c:	b508      	push	{r3, lr}
   18c7e:	460a      	mov	r2, r1
	return list->head;
   18c80:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18c82:	2100      	movs	r1, #0
   18c84:	e001      	b.n	18c8a <sys_slist_find_and_remove+0xe>
   18c86:	4619      	mov	r1, r3
   18c88:	681b      	ldr	r3, [r3, #0]
   18c8a:	b12b      	cbz	r3, 18c98 <sys_slist_find_and_remove+0x1c>
   18c8c:	4293      	cmp	r3, r2
   18c8e:	d1fa      	bne.n	18c86 <sys_slist_find_and_remove+0xa>
   18c90:	f7ff ffe1 	bl	18c56 <sys_slist_remove>
   18c94:	2001      	movs	r0, #1
   18c96:	e000      	b.n	18c9a <sys_slist_find_and_remove+0x1e>
   18c98:	2000      	movs	r0, #0
   18c9a:	bd08      	pop	{r3, pc}

00018c9c <queue_remove_locked>:
{
   18c9c:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   18c9e:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   18ca0:	f023 0204 	bic.w	r2, r3, #4
   18ca4:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   18ca6:	f013 0f04 	tst.w	r3, #4
   18caa:	d100      	bne.n	18cae <queue_remove_locked+0x12>
}
   18cac:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   18cae:	30b8      	adds	r0, #184	; 0xb8
   18cb0:	f7ff ffe4 	bl	18c7c <sys_slist_find_and_remove>
}
   18cb4:	e7fa      	b.n	18cac <queue_remove_locked+0x10>

00018cb6 <cancel_async_locked>:
{
   18cb6:	b510      	push	{r4, lr}
   18cb8:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   18cba:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18cbc:	f013 0f02 	tst.w	r3, #2
   18cc0:	d009      	beq.n	18cd6 <cancel_async_locked+0x20>
	return *flagp;
   18cc2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   18cc4:	f013 000f 	ands.w	r0, r3, #15
   18cc8:	d004      	beq.n	18cd4 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   18cca:	f043 0202 	orr.w	r2, r3, #2
   18cce:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   18cd0:	f040 0002 	orr.w	r0, r0, #2
}
   18cd4:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   18cd6:	4601      	mov	r1, r0
   18cd8:	6880      	ldr	r0, [r0, #8]
   18cda:	f7ff ffdf 	bl	18c9c <queue_remove_locked>
   18cde:	e7f0      	b.n	18cc2 <cancel_async_locked+0xc>

00018ce0 <notify_queue_locked>:
	if (queue != NULL) {
   18ce0:	b130      	cbz	r0, 18cf0 <notify_queue_locked+0x10>
{
   18ce2:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   18ce4:	2200      	movs	r2, #0
   18ce6:	4611      	mov	r1, r2
   18ce8:	30c0      	adds	r0, #192	; 0xc0
   18cea:	f000 fa49 	bl	19180 <z_sched_wake>
}
   18cee:	bd08      	pop	{r3, pc}
	bool rv = false;
   18cf0:	2000      	movs	r0, #0
}
   18cf2:	4770      	bx	lr

00018cf4 <submit_to_queue_locked>:
{
   18cf4:	b570      	push	{r4, r5, r6, lr}
   18cf6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   18cf8:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18cfa:	f013 0f02 	tst.w	r3, #2
   18cfe:	d122      	bne.n	18d46 <submit_to_queue_locked+0x52>
   18d00:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18d02:	f013 0f04 	tst.w	r3, #4
   18d06:	d123      	bne.n	18d50 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   18d08:	680b      	ldr	r3, [r1, #0]
   18d0a:	b1ab      	cbz	r3, 18d38 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   18d0c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18d0e:	f013 0f01 	tst.w	r3, #1
   18d12:	d014      	beq.n	18d3e <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   18d14:	68a3      	ldr	r3, [r4, #8]
   18d16:	602b      	str	r3, [r5, #0]
			ret = 2;
   18d18:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   18d1a:	4621      	mov	r1, r4
   18d1c:	6828      	ldr	r0, [r5, #0]
   18d1e:	f7fb fbed 	bl	144fc <queue_submit_locked>
		if (rc < 0) {
   18d22:	2800      	cmp	r0, #0
   18d24:	db11      	blt.n	18d4a <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   18d26:	68e3      	ldr	r3, [r4, #12]
   18d28:	f043 0304 	orr.w	r3, r3, #4
   18d2c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18d2e:	682b      	ldr	r3, [r5, #0]
   18d30:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   18d32:	b136      	cbz	r6, 18d42 <submit_to_queue_locked+0x4e>
   18d34:	4630      	mov	r0, r6
	return ret;
   18d36:	e00a      	b.n	18d4e <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   18d38:	6883      	ldr	r3, [r0, #8]
   18d3a:	600b      	str	r3, [r1, #0]
   18d3c:	e7e6      	b.n	18d0c <submit_to_queue_locked+0x18>
		ret = 1;
   18d3e:	2601      	movs	r6, #1
   18d40:	e7eb      	b.n	18d1a <submit_to_queue_locked+0x26>
   18d42:	4630      	mov	r0, r6
   18d44:	e001      	b.n	18d4a <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   18d46:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   18d4a:	2300      	movs	r3, #0
   18d4c:	602b      	str	r3, [r5, #0]
}
   18d4e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   18d50:	2000      	movs	r0, #0
   18d52:	e7fa      	b.n	18d4a <submit_to_queue_locked+0x56>

00018d54 <work_timeout>:
{
   18d54:	b510      	push	{r4, lr}
   18d56:	b082      	sub	sp, #8
   18d58:	4603      	mov	r3, r0
	__asm__ volatile(
   18d5a:	f04f 0240 	mov.w	r2, #64	; 0x40
   18d5e:	f3ef 8411 	mrs	r4, BASEPRI
   18d62:	f382 8812 	msr	BASEPRI_MAX, r2
   18d66:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   18d6a:	2200      	movs	r2, #0
   18d6c:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   18d6e:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   18d72:	f022 0108 	bic.w	r1, r2, #8
   18d76:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   18d7a:	f012 0f08 	tst.w	r2, #8
   18d7e:	d105      	bne.n	18d8c <work_timeout+0x38>
	__asm__ volatile(
   18d80:	f384 8811 	msr	BASEPRI, r4
   18d84:	f3bf 8f6f 	isb	sy
}
   18d88:	b002      	add	sp, #8
   18d8a:	bd10      	pop	{r4, pc}
   18d8c:	3810      	subs	r0, #16
		queue = dw->queue;
   18d8e:	699b      	ldr	r3, [r3, #24]
   18d90:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   18d92:	a901      	add	r1, sp, #4
   18d94:	f7ff ffae 	bl	18cf4 <submit_to_queue_locked>
   18d98:	e7f2      	b.n	18d80 <work_timeout+0x2c>

00018d9a <z_reschedule_unlocked>:
{
   18d9a:	b508      	push	{r3, lr}
	__asm__ volatile(
   18d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18da0:	f3ef 8011 	mrs	r0, BASEPRI
   18da4:	f383 8812 	msr	BASEPRI_MAX, r3
   18da8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   18dac:	f000 f8a7 	bl	18efe <z_reschedule_irqlock>
}
   18db0:	bd08      	pop	{r3, pc}

00018db2 <unschedule_locked>:
{
   18db2:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   18db4:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   18db6:	f023 0208 	bic.w	r2, r3, #8
   18dba:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   18dbc:	f013 0f08 	tst.w	r3, #8
   18dc0:	d101      	bne.n	18dc6 <unschedule_locked+0x14>
	bool ret = false;
   18dc2:	2000      	movs	r0, #0
}
   18dc4:	bd08      	pop	{r3, pc}
		ret = z_abort_timeout(&dwork->timeout) == 0;
   18dc6:	3010      	adds	r0, #16
   18dc8:	f000 fa3c 	bl	19244 <z_abort_timeout>
   18dcc:	fab0 f080 	clz	r0, r0
   18dd0:	0940      	lsrs	r0, r0, #5
   18dd2:	e7f7      	b.n	18dc4 <unschedule_locked+0x12>

00018dd4 <cancel_delayable_async_locked>:
{
   18dd4:	b510      	push	{r4, lr}
   18dd6:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   18dd8:	f7ff ffeb 	bl	18db2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   18ddc:	4620      	mov	r0, r4
   18dde:	f7ff ff6a 	bl	18cb6 <cancel_async_locked>
}
   18de2:	bd10      	pop	{r4, pc}

00018de4 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18de4:	2300      	movs	r3, #0
   18de6:	6003      	str	r3, [r0, #0]
   18de8:	6043      	str	r3, [r0, #4]
   18dea:	6083      	str	r3, [r0, #8]
   18dec:	60c3      	str	r3, [r0, #12]
   18dee:	6041      	str	r1, [r0, #4]
}
   18df0:	4770      	bx	lr

00018df2 <z_work_submit_to_queue>:
{
   18df2:	b510      	push	{r4, lr}
   18df4:	b082      	sub	sp, #8
   18df6:	9001      	str	r0, [sp, #4]
   18df8:	4608      	mov	r0, r1
   18dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   18dfe:	f3ef 8411 	mrs	r4, BASEPRI
   18e02:	f383 8812 	msr	BASEPRI_MAX, r3
   18e06:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   18e0a:	a901      	add	r1, sp, #4
   18e0c:	f7ff ff72 	bl	18cf4 <submit_to_queue_locked>
	__asm__ volatile(
   18e10:	f384 8811 	msr	BASEPRI, r4
   18e14:	f3bf 8f6f 	isb	sy
}
   18e18:	b002      	add	sp, #8
   18e1a:	bd10      	pop	{r4, pc}

00018e1c <k_work_submit_to_queue>:
{
   18e1c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   18e1e:	f7ff ffe8 	bl	18df2 <z_work_submit_to_queue>
	if (ret > 0) {
   18e22:	1e04      	subs	r4, r0, #0
   18e24:	dc01      	bgt.n	18e2a <k_work_submit_to_queue+0xe>
}
   18e26:	4620      	mov	r0, r4
   18e28:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   18e2a:	f7ff ffb6 	bl	18d9a <z_reschedule_unlocked>
	return ret;
   18e2e:	e7fa      	b.n	18e26 <k_work_submit_to_queue+0xa>

00018e30 <k_work_queue_init>:
{
   18e30:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   18e32:	22d8      	movs	r2, #216	; 0xd8
   18e34:	2100      	movs	r1, #0
   18e36:	f7fd ffeb 	bl	16e10 <memset>
}
   18e3a:	bd08      	pop	{r3, pc}

00018e3c <k_work_init_delayable>:
{
   18e3c:	b538      	push	{r3, r4, r5, lr}
   18e3e:	4604      	mov	r4, r0
   18e40:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   18e42:	2230      	movs	r2, #48	; 0x30
   18e44:	2100      	movs	r1, #0
   18e46:	f7fd ffe3 	bl	16e10 <memset>
   18e4a:	6065      	str	r5, [r4, #4]
   18e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
   18e50:	60e3      	str	r3, [r4, #12]
}
   18e52:	bd38      	pop	{r3, r4, r5, pc}

00018e54 <k_work_reschedule_for_queue>:
{
   18e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e56:	b083      	sub	sp, #12
   18e58:	9001      	str	r0, [sp, #4]
   18e5a:	460c      	mov	r4, r1
   18e5c:	4616      	mov	r6, r2
   18e5e:	461d      	mov	r5, r3
	__asm__ volatile(
   18e60:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e64:	f3ef 8711 	mrs	r7, BASEPRI
   18e68:	f383 8812 	msr	BASEPRI_MAX, r3
   18e6c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   18e70:	4608      	mov	r0, r1
   18e72:	f7ff ff9e 	bl	18db2 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   18e76:	4632      	mov	r2, r6
   18e78:	462b      	mov	r3, r5
   18e7a:	4621      	mov	r1, r4
   18e7c:	a801      	add	r0, sp, #4
   18e7e:	f7fb fc23 	bl	146c8 <schedule_for_queue_locked>
	__asm__ volatile(
   18e82:	f387 8811 	msr	BASEPRI, r7
   18e86:	f3bf 8f6f 	isb	sy
}
   18e8a:	b003      	add	sp, #12
   18e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018e8e <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   18e8e:	b510      	push	{r4, lr}
	__asm__ volatile(
   18e90:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e94:	f3ef 8411 	mrs	r4, BASEPRI
   18e98:	f383 8812 	msr	BASEPRI_MAX, r3
   18e9c:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   18ea0:	f7ff ff98 	bl	18dd4 <cancel_delayable_async_locked>
	__asm__ volatile(
   18ea4:	f384 8811 	msr	BASEPRI, r4
   18ea8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   18eac:	bd10      	pop	{r4, pc}

00018eae <thread_active_elsewhere>:
}
   18eae:	2000      	movs	r0, #0
   18eb0:	4770      	bx	lr

00018eb2 <pended_on_thread>:
}
   18eb2:	6880      	ldr	r0, [r0, #8]
   18eb4:	4770      	bx	lr

00018eb6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   18eb6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18eba:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   18ebe:	4283      	cmp	r3, r0
   18ec0:	d001      	beq.n	18ec6 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   18ec2:	1ac0      	subs	r0, r0, r3
   18ec4:	4770      	bx	lr
	return 0;
   18ec6:	2000      	movs	r0, #0
}
   18ec8:	4770      	bx	lr

00018eca <z_unpend_thread_no_timeout>:
{
   18eca:	b538      	push	{r3, r4, r5, lr}
   18ecc:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18ece:	2300      	movs	r3, #0
	__asm__ volatile(
   18ed0:	f04f 0240 	mov.w	r2, #64	; 0x40
   18ed4:	f3ef 8511 	mrs	r5, BASEPRI
   18ed8:	f382 8812 	msr	BASEPRI_MAX, r2
   18edc:	f3bf 8f6f 	isb	sy
   18ee0:	e004      	b.n	18eec <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   18ee2:	f385 8811 	msr	BASEPRI, r5
   18ee6:	f3bf 8f6f 	isb	sy
   18eea:	2301      	movs	r3, #1
   18eec:	b933      	cbnz	r3, 18efc <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   18eee:	68a3      	ldr	r3, [r4, #8]
   18ef0:	2b00      	cmp	r3, #0
   18ef2:	d0f6      	beq.n	18ee2 <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   18ef4:	4620      	mov	r0, r4
   18ef6:	f000 f824 	bl	18f42 <unpend_thread_no_timeout>
   18efa:	e7f2      	b.n	18ee2 <z_unpend_thread_no_timeout+0x18>
}
   18efc:	bd38      	pop	{r3, r4, r5, pc}

00018efe <z_reschedule_irqlock>:
{
   18efe:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18f00:	4603      	mov	r3, r0
   18f02:	b928      	cbnz	r0, 18f10 <z_reschedule_irqlock+0x12>
   18f04:	f3ef 8205 	mrs	r2, IPSR
   18f08:	b912      	cbnz	r2, 18f10 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   18f0a:	f7f3 fccb 	bl	c8a4 <arch_swap>
	return ret;
   18f0e:	e003      	b.n	18f18 <z_reschedule_irqlock+0x1a>
   18f10:	f383 8811 	msr	BASEPRI, r3
   18f14:	f3bf 8f6f 	isb	sy
}
   18f18:	bd08      	pop	{r3, pc}

00018f1a <z_reschedule_unlocked>:
{
   18f1a:	b508      	push	{r3, lr}
	__asm__ volatile(
   18f1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f20:	f3ef 8011 	mrs	r0, BASEPRI
   18f24:	f383 8812 	msr	BASEPRI_MAX, r3
   18f28:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   18f2c:	f7ff ffe7 	bl	18efe <z_reschedule_irqlock>
}
   18f30:	bd08      	pop	{r3, pc}

00018f32 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   18f32:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   18f34:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   18f36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18f38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18f3a:	2300      	movs	r3, #0
   18f3c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   18f3e:	604b      	str	r3, [r1, #4]
}
   18f40:	4770      	bx	lr

00018f42 <unpend_thread_no_timeout>:
{
   18f42:	b510      	push	{r4, lr}
   18f44:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18f46:	f7ff ffb4 	bl	18eb2 <pended_on_thread>
   18f4a:	4621      	mov	r1, r4
   18f4c:	f7ff fff1 	bl	18f32 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18f50:	7b63      	ldrb	r3, [r4, #13]
   18f52:	f023 0302 	bic.w	r3, r3, #2
   18f56:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18f58:	2300      	movs	r3, #0
   18f5a:	60a3      	str	r3, [r4, #8]
}
   18f5c:	bd10      	pop	{r4, pc}

00018f5e <z_unpend_thread>:
{
   18f5e:	b538      	push	{r3, r4, r5, lr}
   18f60:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18f62:	2300      	movs	r3, #0
   18f64:	f04f 0240 	mov.w	r2, #64	; 0x40
   18f68:	f3ef 8511 	mrs	r5, BASEPRI
   18f6c:	f382 8812 	msr	BASEPRI_MAX, r2
   18f70:	f3bf 8f6f 	isb	sy
   18f74:	e004      	b.n	18f80 <z_unpend_thread+0x22>
	__asm__ volatile(
   18f76:	f385 8811 	msr	BASEPRI, r5
   18f7a:	f3bf 8f6f 	isb	sy
   18f7e:	2301      	movs	r3, #1
   18f80:	b933      	cbnz	r3, 18f90 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   18f82:	68a3      	ldr	r3, [r4, #8]
   18f84:	2b00      	cmp	r3, #0
   18f86:	d0f6      	beq.n	18f76 <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   18f88:	4620      	mov	r0, r4
   18f8a:	f7ff ffda 	bl	18f42 <unpend_thread_no_timeout>
   18f8e:	e7f2      	b.n	18f76 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   18f90:	f104 0018 	add.w	r0, r4, #24
   18f94:	f000 f956 	bl	19244 <z_abort_timeout>
}
   18f98:	bd38      	pop	{r3, r4, r5, pc}

00018f9a <z_priq_dumb_best>:
{
   18f9a:	4603      	mov	r3, r0
	return list->head == list;
   18f9c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f9e:	4283      	cmp	r3, r0
   18fa0:	d000      	beq.n	18fa4 <z_priq_dumb_best+0xa>
}
   18fa2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   18fa4:	2000      	movs	r0, #0
	return thread;
   18fa6:	e7fc      	b.n	18fa2 <z_priq_dumb_best+0x8>

00018fa8 <z_ready_thread>:
{
   18fa8:	b538      	push	{r3, r4, r5, lr}
   18faa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18fac:	2300      	movs	r3, #0
	__asm__ volatile(
   18fae:	f04f 0240 	mov.w	r2, #64	; 0x40
   18fb2:	f3ef 8511 	mrs	r5, BASEPRI
   18fb6:	f382 8812 	msr	BASEPRI_MAX, r2
   18fba:	f3bf 8f6f 	isb	sy
   18fbe:	e004      	b.n	18fca <z_ready_thread+0x22>
	__asm__ volatile(
   18fc0:	f385 8811 	msr	BASEPRI, r5
   18fc4:	f3bf 8f6f 	isb	sy
   18fc8:	2301      	movs	r3, #1
   18fca:	b943      	cbnz	r3, 18fde <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   18fcc:	4620      	mov	r0, r4
   18fce:	f7ff ff6e 	bl	18eae <thread_active_elsewhere>
   18fd2:	2800      	cmp	r0, #0
   18fd4:	d1f4      	bne.n	18fc0 <z_ready_thread+0x18>
			ready_thread(thread);
   18fd6:	4620      	mov	r0, r4
   18fd8:	f7fb fd24 	bl	14a24 <ready_thread>
   18fdc:	e7f0      	b.n	18fc0 <z_ready_thread+0x18>
}
   18fde:	bd38      	pop	{r3, r4, r5, pc}

00018fe0 <z_sched_wake_thread>:
{
   18fe0:	b570      	push	{r4, r5, r6, lr}
   18fe2:	4604      	mov	r4, r0
   18fe4:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   18fe6:	2300      	movs	r3, #0
	__asm__ volatile(
   18fe8:	f04f 0240 	mov.w	r2, #64	; 0x40
   18fec:	f3ef 8511 	mrs	r5, BASEPRI
   18ff0:	f382 8812 	msr	BASEPRI_MAX, r2
   18ff4:	f3bf 8f6f 	isb	sy
   18ff8:	e007      	b.n	1900a <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   18ffa:	4620      	mov	r0, r4
   18ffc:	f7fb fd12 	bl	14a24 <ready_thread>
	__asm__ volatile(
   19000:	f385 8811 	msr	BASEPRI, r5
   19004:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19008:	2301      	movs	r3, #1
   1900a:	b993      	cbnz	r3, 19032 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1900c:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   1900e:	f013 0f28 	tst.w	r3, #40	; 0x28
   19012:	d1f5      	bne.n	19000 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   19014:	68a3      	ldr	r3, [r4, #8]
   19016:	b113      	cbz	r3, 1901e <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   19018:	4620      	mov	r0, r4
   1901a:	f7ff ff92 	bl	18f42 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1901e:	7b63      	ldrb	r3, [r4, #13]
   19020:	f023 0204 	bic.w	r2, r3, #4
   19024:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   19026:	2e00      	cmp	r6, #0
   19028:	d0e7      	beq.n	18ffa <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1902a:	f023 0314 	bic.w	r3, r3, #20
   1902e:	7363      	strb	r3, [r4, #13]
}
   19030:	e7e3      	b.n	18ffa <z_sched_wake_thread+0x1a>
}
   19032:	bd70      	pop	{r4, r5, r6, pc}

00019034 <z_thread_timeout>:
{
   19034:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   19036:	2101      	movs	r1, #1
   19038:	3818      	subs	r0, #24
   1903a:	f7ff ffd1 	bl	18fe0 <z_sched_wake_thread>
}
   1903e:	bd08      	pop	{r3, pc}

00019040 <unpend_all>:
{
   19040:	b538      	push	{r3, r4, r5, lr}
   19042:	4605      	mov	r5, r0
	return list->head == list;
   19044:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19046:	42a5      	cmp	r5, r4
   19048:	d00e      	beq.n	19068 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1904a:	b16c      	cbz	r4, 19068 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   1904c:	4620      	mov	r0, r4
   1904e:	f7ff ff78 	bl	18f42 <unpend_thread_no_timeout>
   19052:	f104 0018 	add.w	r0, r4, #24
   19056:	f000 f8f5 	bl	19244 <z_abort_timeout>
   1905a:	2300      	movs	r3, #0
   1905c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   19060:	4620      	mov	r0, r4
   19062:	f7fb fcdf 	bl	14a24 <ready_thread>
   19066:	e7ed      	b.n	19044 <unpend_all+0x4>
}
   19068:	bd38      	pop	{r3, r4, r5, pc}

0001906a <add_to_waitq_locked>:
{
   1906a:	b570      	push	{r4, r5, r6, lr}
   1906c:	4605      	mov	r5, r0
   1906e:	460e      	mov	r6, r1
	unready_thread(thread);
   19070:	f7fb fd32 	bl	14ad8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   19074:	7b6b      	ldrb	r3, [r5, #13]
   19076:	f043 0302 	orr.w	r3, r3, #2
   1907a:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1907c:	b1fe      	cbz	r6, 190be <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   1907e:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   19080:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19082:	42a6      	cmp	r6, r4
   19084:	d108      	bne.n	19098 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19086:	2400      	movs	r4, #0
   19088:	e006      	b.n	19098 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   1908a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1908c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1908e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   19090:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   19092:	6065      	str	r5, [r4, #4]
}
   19094:	e013      	b.n	190be <add_to_waitq_locked+0x54>
   19096:	2400      	movs	r4, #0
   19098:	b164      	cbz	r4, 190b4 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1909a:	4621      	mov	r1, r4
   1909c:	4628      	mov	r0, r5
   1909e:	f7ff ff0a 	bl	18eb6 <z_sched_prio_cmp>
   190a2:	2800      	cmp	r0, #0
   190a4:	dcf1      	bgt.n	1908a <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   190a6:	2c00      	cmp	r4, #0
   190a8:	d0f6      	beq.n	19098 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   190aa:	6873      	ldr	r3, [r6, #4]
   190ac:	429c      	cmp	r4, r3
   190ae:	d0f2      	beq.n	19096 <add_to_waitq_locked+0x2c>
   190b0:	6824      	ldr	r4, [r4, #0]
   190b2:	e7f1      	b.n	19098 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   190b4:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   190b6:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   190b8:	606b      	str	r3, [r5, #4]
	tail->next = node;
   190ba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   190bc:	6075      	str	r5, [r6, #4]
}
   190be:	bd70      	pop	{r4, r5, r6, pc}

000190c0 <pend_locked>:
{
   190c0:	b570      	push	{r4, r5, r6, lr}
   190c2:	4604      	mov	r4, r0
   190c4:	4616      	mov	r6, r2
   190c6:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   190c8:	f7ff ffcf 	bl	1906a <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   190cc:	4632      	mov	r2, r6
   190ce:	462b      	mov	r3, r5
   190d0:	4620      	mov	r0, r4
   190d2:	f7fb fb97 	bl	14804 <add_thread_timeout>
}
   190d6:	bd70      	pop	{r4, r5, r6, pc}

000190d8 <z_unpend1_no_timeout>:
{
   190d8:	b570      	push	{r4, r5, r6, lr}
   190da:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   190dc:	2300      	movs	r3, #0
	__asm__ volatile(
   190de:	f04f 0240 	mov.w	r2, #64	; 0x40
   190e2:	f3ef 8511 	mrs	r5, BASEPRI
   190e6:	f382 8812 	msr	BASEPRI_MAX, r2
   190ea:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   190ee:	461c      	mov	r4, r3
   190f0:	e004      	b.n	190fc <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   190f2:	f385 8811 	msr	BASEPRI, r5
   190f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   190fa:	2301      	movs	r3, #1
   190fc:	b943      	cbnz	r3, 19110 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   190fe:	4630      	mov	r0, r6
   19100:	f7ff ff4b 	bl	18f9a <z_priq_dumb_best>
		if (thread != NULL) {
   19104:	4604      	mov	r4, r0
   19106:	2800      	cmp	r0, #0
   19108:	d0f3      	beq.n	190f2 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1910a:	f7ff ff1a 	bl	18f42 <unpend_thread_no_timeout>
   1910e:	e7f0      	b.n	190f2 <z_unpend1_no_timeout+0x1a>
}
   19110:	4620      	mov	r0, r4
   19112:	bd70      	pop	{r4, r5, r6, pc}

00019114 <z_unpend_first_thread>:
{
   19114:	b570      	push	{r4, r5, r6, lr}
   19116:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   19118:	2300      	movs	r3, #0
	__asm__ volatile(
   1911a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1911e:	f3ef 8511 	mrs	r5, BASEPRI
   19122:	f382 8812 	msr	BASEPRI_MAX, r2
   19126:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1912a:	461c      	mov	r4, r3
   1912c:	e004      	b.n	19138 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1912e:	f385 8811 	msr	BASEPRI, r5
   19132:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19136:	2301      	movs	r3, #1
   19138:	b963      	cbnz	r3, 19154 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   1913a:	4630      	mov	r0, r6
   1913c:	f7ff ff2d 	bl	18f9a <z_priq_dumb_best>
		if (thread != NULL) {
   19140:	4604      	mov	r4, r0
   19142:	2800      	cmp	r0, #0
   19144:	d0f3      	beq.n	1912e <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   19146:	f7ff fefc 	bl	18f42 <unpend_thread_no_timeout>
   1914a:	f104 0018 	add.w	r0, r4, #24
   1914e:	f000 f879 	bl	19244 <z_abort_timeout>
   19152:	e7ec      	b.n	1912e <z_unpend_first_thread+0x1a>
}
   19154:	4620      	mov	r0, r4
   19156:	bd70      	pop	{r4, r5, r6, pc}

00019158 <z_unpend_all>:
{
   19158:	b538      	push	{r3, r4, r5, lr}
   1915a:	4605      	mov	r5, r0
	int need_sched = 0;
   1915c:	2000      	movs	r0, #0
	return list->head == list;
   1915e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19160:	42a5      	cmp	r5, r4
   19162:	d008      	beq.n	19176 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   19164:	b13c      	cbz	r4, 19176 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   19166:	4620      	mov	r0, r4
   19168:	f7ff fef9 	bl	18f5e <z_unpend_thread>
		z_ready_thread(thread);
   1916c:	4620      	mov	r0, r4
   1916e:	f7ff ff1b 	bl	18fa8 <z_ready_thread>
		need_sched = 1;
   19172:	2001      	movs	r0, #1
   19174:	e7f3      	b.n	1915e <z_unpend_all+0x6>
}
   19176:	bd38      	pop	{r3, r4, r5, pc}

00019178 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   19178:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1917a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1917c:	6083      	str	r3, [r0, #8]
}
   1917e:	4770      	bx	lr

00019180 <z_sched_wake>:
{
   19180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19184:	4606      	mov	r6, r0
   19186:	4688      	mov	r8, r1
   19188:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   1918a:	2300      	movs	r3, #0
	__asm__ volatile(
   1918c:	f04f 0240 	mov.w	r2, #64	; 0x40
   19190:	f3ef 8511 	mrs	r5, BASEPRI
   19194:	f382 8812 	msr	BASEPRI_MAX, r2
   19198:	f3bf 8f6f 	isb	sy
	bool ret = false;
   1919c:	4699      	mov	r9, r3
   1919e:	e004      	b.n	191aa <z_sched_wake+0x2a>
	__asm__ volatile(
   191a0:	f385 8811 	msr	BASEPRI, r5
   191a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   191a8:	2301      	movs	r3, #1
   191aa:	b9a3      	cbnz	r3, 191d6 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   191ac:	4630      	mov	r0, r6
   191ae:	f7ff fef4 	bl	18f9a <z_priq_dumb_best>
		if (thread != NULL) {
   191b2:	4604      	mov	r4, r0
   191b4:	2800      	cmp	r0, #0
   191b6:	d0f3      	beq.n	191a0 <z_sched_wake+0x20>
   191b8:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   191bc:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   191be:	f7ff fec0 	bl	18f42 <unpend_thread_no_timeout>
   191c2:	f104 0018 	add.w	r0, r4, #24
   191c6:	f000 f83d 	bl	19244 <z_abort_timeout>
			ready_thread(thread);
   191ca:	4620      	mov	r0, r4
   191cc:	f7fb fc2a 	bl	14a24 <ready_thread>
			ret = true;
   191d0:	f04f 0901 	mov.w	r9, #1
   191d4:	e7e4      	b.n	191a0 <z_sched_wake+0x20>
}
   191d6:	4648      	mov	r0, r9
   191d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000191dc <remove_timeout>:
{
   191dc:	b510      	push	{r4, lr}
   191de:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   191e0:	f7fb fed6 	bl	14f90 <next>
   191e4:	b148      	cbz	r0, 191fa <remove_timeout+0x1e>
   191e6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   191e8:	6903      	ldr	r3, [r0, #16]
   191ea:	6941      	ldr	r1, [r0, #20]
   191ec:	6920      	ldr	r0, [r4, #16]
   191ee:	181b      	adds	r3, r3, r0
   191f0:	6960      	ldr	r0, [r4, #20]
   191f2:	eb41 0100 	adc.w	r1, r1, r0
   191f6:	6113      	str	r3, [r2, #16]
   191f8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   191fa:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   191fc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   191fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19200:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19202:	2300      	movs	r3, #0
   19204:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   19206:	6063      	str	r3, [r4, #4]
}
   19208:	bd10      	pop	{r4, pc}

0001920a <next_timeout>:
{
   1920a:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1920c:	f7fb feb6 	bl	14f7c <first>
   19210:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   19212:	f7fb fec9 	bl	14fa8 <elapsed>
	if ((to == NULL) ||
   19216:	b17c      	cbz	r4, 19238 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   19218:	6923      	ldr	r3, [r4, #16]
   1921a:	6962      	ldr	r2, [r4, #20]
   1921c:	1a1b      	subs	r3, r3, r0
   1921e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   19222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   19226:	f172 0100 	sbcs.w	r1, r2, #0
   1922a:	da08      	bge.n	1923e <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1922c:	2a00      	cmp	r2, #0
   1922e:	db01      	blt.n	19234 <next_timeout+0x2a>
   19230:	4618      	mov	r0, r3
}
   19232:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   19234:	2300      	movs	r3, #0
   19236:	e7fb      	b.n	19230 <next_timeout+0x26>
		ret = MAX_WAIT;
   19238:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1923c:	e7f9      	b.n	19232 <next_timeout+0x28>
   1923e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   19242:	e7f6      	b.n	19232 <next_timeout+0x28>

00019244 <z_abort_timeout>:
{
   19244:	b570      	push	{r4, r5, r6, lr}
   19246:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   19248:	2300      	movs	r3, #0
	__asm__ volatile(
   1924a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1924e:	f3ef 8611 	mrs	r6, BASEPRI
   19252:	f382 8812 	msr	BASEPRI_MAX, r2
   19256:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1925a:	f06f 0015 	mvn.w	r0, #21
   1925e:	e004      	b.n	1926a <z_abort_timeout+0x26>
	__asm__ volatile(
   19260:	f386 8811 	msr	BASEPRI, r6
   19264:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   19268:	2301      	movs	r3, #1
   1926a:	461d      	mov	r5, r3
   1926c:	b93b      	cbnz	r3, 1927e <z_abort_timeout+0x3a>
	return node->next != NULL;
   1926e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   19270:	2b00      	cmp	r3, #0
   19272:	d0f5      	beq.n	19260 <z_abort_timeout+0x1c>
			remove_timeout(to);
   19274:	4620      	mov	r0, r4
   19276:	f7ff ffb1 	bl	191dc <remove_timeout>
			ret = 0;
   1927a:	4628      	mov	r0, r5
   1927c:	e7f0      	b.n	19260 <z_abort_timeout+0x1c>
}
   1927e:	bd70      	pop	{r4, r5, r6, pc}

00019280 <z_get_next_timeout_expiry>:
{
   19280:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   19282:	2300      	movs	r3, #0
	__asm__ volatile(
   19284:	f04f 0240 	mov.w	r2, #64	; 0x40
   19288:	f3ef 8411 	mrs	r4, BASEPRI
   1928c:	f382 8812 	msr	BASEPRI_MAX, r2
   19290:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   19294:	f04f 30ff 	mov.w	r0, #4294967295
   19298:	e006      	b.n	192a8 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1929a:	f7ff ffb6 	bl	1920a <next_timeout>
	__asm__ volatile(
   1929e:	f384 8811 	msr	BASEPRI, r4
   192a2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   192a6:	2301      	movs	r3, #1
   192a8:	2b00      	cmp	r3, #0
   192aa:	d0f6      	beq.n	1929a <z_get_next_timeout_expiry+0x1a>
}
   192ac:	bd10      	pop	{r4, pc}

000192ae <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   192ae:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   192b0:	f7fb ff6a 	bl	15188 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   192b4:	bd08      	pop	{r3, pc}

000192b6 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   192b6:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   192b8:	f7fb ff66 	bl	15188 <sys_clock_tick_get>
}
   192bc:	bd08      	pop	{r3, pc}

000192be <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   192be:	b900      	cbnz	r0, 192c2 <z_impl_k_busy_wait+0x4>
   192c0:	4770      	bx	lr
{
   192c2:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   192c4:	f7f4 ffaa 	bl	e21c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   192c8:	bd08      	pop	{r3, pc}

000192ca <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   192ca:	b538      	push	{r3, r4, r5, lr}
   192cc:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   192ce:	f1b1 3fff 	cmp.w	r1, #4294967295
   192d2:	bf08      	it	eq
   192d4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   192d8:	d020      	beq.n	1931c <sys_clock_timeout_end_calc+0x52>
   192da:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   192dc:	ea51 0300 	orrs.w	r3, r1, r0
   192e0:	d009      	beq.n	192f6 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   192e2:	f06f 0301 	mvn.w	r3, #1
   192e6:	1a18      	subs	r0, r3, r0
   192e8:	f04f 33ff 	mov.w	r3, #4294967295
   192ec:	eb63 0101 	sbc.w	r1, r3, r1
   192f0:	2900      	cmp	r1, #0
   192f2:	db03      	blt.n	192fc <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   192f4:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   192f6:	f7fb ff47 	bl	15188 <sys_clock_tick_get>
   192fa:	e7fb      	b.n	192f4 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   192fc:	f7fb ff44 	bl	15188 <sys_clock_tick_get>
   19300:	4603      	mov	r3, r0
   19302:	462a      	mov	r2, r5
   19304:	46a4      	mov	ip, r4
   19306:	2d01      	cmp	r5, #1
   19308:	f174 0400 	sbcs.w	r4, r4, #0
   1930c:	da02      	bge.n	19314 <sys_clock_timeout_end_calc+0x4a>
   1930e:	2201      	movs	r2, #1
   19310:	f04f 0c00 	mov.w	ip, #0
   19314:	1898      	adds	r0, r3, r2
   19316:	eb41 010c 	adc.w	r1, r1, ip
   1931a:	e7eb      	b.n	192f4 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   1931c:	f04f 30ff 	mov.w	r0, #4294967295
   19320:	4601      	mov	r1, r0
   19322:	e7e7      	b.n	192f4 <sys_clock_timeout_end_calc+0x2a>

00019324 <z_reschedule_unlocked>:
{
   19324:	b508      	push	{r3, lr}
	__asm__ volatile(
   19326:	f04f 0340 	mov.w	r3, #64	; 0x40
   1932a:	f3ef 8011 	mrs	r0, BASEPRI
   1932e:	f383 8812 	msr	BASEPRI_MAX, r3
   19332:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   19336:	f7ff fde2 	bl	18efe <z_reschedule_irqlock>
}
   1933a:	bd08      	pop	{r3, pc}

0001933c <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   1933c:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   1933e:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   19340:	2300      	movs	r3, #0
   19342:	6303      	str	r3, [r0, #48]	; 0x30
   19344:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   19348:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   1934a:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   1934c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1934e:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   19350:	6343      	str	r3, [r0, #52]	; 0x34
}
   19352:	4770      	bx	lr

00019354 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   19354:	b510      	push	{r4, lr}
   19356:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   19358:	f7ff ff74 	bl	19244 <z_abort_timeout>

	if (inactive) {
   1935c:	b960      	cbnz	r0, 19378 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   1935e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19360:	b10b      	cbz	r3, 19366 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   19362:	4620      	mov	r0, r4
   19364:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   19366:	f104 0018 	add.w	r0, r4, #24
   1936a:	f7ff feb5 	bl	190d8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1936e:	b118      	cbz	r0, 19378 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   19370:	f7ff fe1a 	bl	18fa8 <z_ready_thread>
			z_reschedule_unlocked();
   19374:	f7ff ffd6 	bl	19324 <z_reschedule_unlocked>
		}
	}
}
   19378:	bd10      	pop	{r4, pc}

0001937a <is_condition_met>:
	switch (event->type) {
   1937a:	7b43      	ldrb	r3, [r0, #13]
   1937c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19380:	3b01      	subs	r3, #1
   19382:	2b07      	cmp	r3, #7
   19384:	d826      	bhi.n	193d4 <is_condition_met+0x5a>
   19386:	e8df f003 	tbb	[pc, r3]
   1938a:	0414      	.short	0x0414
   1938c:	25250d25 	.word	0x25250d25
   19390:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   19392:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   19394:	689b      	ldr	r3, [r3, #8]
   19396:	b90b      	cbnz	r3, 1939c <is_condition_met+0x22>
	return false;
   19398:	2000      	movs	r0, #0
   1939a:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1939c:	2302      	movs	r3, #2
   1939e:	600b      	str	r3, [r1, #0]
			return true;
   193a0:	2001      	movs	r0, #1
   193a2:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   193a4:	6903      	ldr	r3, [r0, #16]
	return list->head;
   193a6:	681b      	ldr	r3, [r3, #0]
   193a8:	b1b3      	cbz	r3, 193d8 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   193aa:	2304      	movs	r3, #4
   193ac:	600b      	str	r3, [r1, #0]
			return true;
   193ae:	2001      	movs	r0, #1
   193b0:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   193b2:	6903      	ldr	r3, [r0, #16]
   193b4:	689b      	ldr	r3, [r3, #8]
   193b6:	b90b      	cbnz	r3, 193bc <is_condition_met+0x42>
	return false;
   193b8:	2000      	movs	r0, #0
   193ba:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   193bc:	2001      	movs	r0, #1
   193be:	6008      	str	r0, [r1, #0]
			return true;
   193c0:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   193c2:	6903      	ldr	r3, [r0, #16]
   193c4:	6a1b      	ldr	r3, [r3, #32]
   193c6:	b90b      	cbnz	r3, 193cc <is_condition_met+0x52>
	return false;
   193c8:	2000      	movs	r0, #0
}
   193ca:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   193cc:	2310      	movs	r3, #16
   193ce:	600b      	str	r3, [r1, #0]
			return true;
   193d0:	2001      	movs	r0, #1
   193d2:	4770      	bx	lr
	switch (event->type) {
   193d4:	2000      	movs	r0, #0
   193d6:	4770      	bx	lr
	return false;
   193d8:	2000      	movs	r0, #0
   193da:	4770      	bx	lr

000193dc <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   193dc:	b108      	cbz	r0, 193e2 <poller_thread+0x6>
   193de:	3860      	subs	r0, #96	; 0x60
   193e0:	4770      	bx	lr
}
   193e2:	4770      	bx	lr

000193e4 <clear_event_registration>:
	event->poller = NULL;
   193e4:	2300      	movs	r3, #0
   193e6:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   193e8:	7b43      	ldrb	r3, [r0, #13]
   193ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   193ee:	2b08      	cmp	r3, #8
   193f0:	d80e      	bhi.n	19410 <clear_event_registration+0x2c>
   193f2:	f44f 728b 	mov.w	r2, #278	; 0x116
   193f6:	fa22 f303 	lsr.w	r3, r2, r3
   193fa:	f013 0f01 	tst.w	r3, #1
   193fe:	d007      	beq.n	19410 <clear_event_registration+0x2c>
	return node->next != NULL;
   19400:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   19402:	b12b      	cbz	r3, 19410 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   19404:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   19406:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19408:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1940a:	2300      	movs	r3, #0
   1940c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1940e:	6043      	str	r3, [r0, #4]
}
   19410:	4770      	bx	lr

00019412 <clear_event_registrations>:
{
   19412:	b570      	push	{r4, r5, r6, lr}
   19414:	4606      	mov	r6, r0
   19416:	4614      	mov	r4, r2
	while (num_events--) {
   19418:	e012      	b.n	19440 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   1941a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1941e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   19422:	f7ff ffdf 	bl	193e4 <clear_event_registration>
	__asm__ volatile(
   19426:	f384 8811 	msr	BASEPRI, r4
   1942a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1942e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19432:	f3ef 8411 	mrs	r4, BASEPRI
   19436:	f383 8812 	msr	BASEPRI_MAX, r3
   1943a:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1943e:	4629      	mov	r1, r5
   19440:	1e4d      	subs	r5, r1, #1
   19442:	2900      	cmp	r1, #0
   19444:	d1e9      	bne.n	1941a <clear_event_registrations+0x8>
}
   19446:	bd70      	pop	{r4, r5, r6, pc}

00019448 <add_event>:
{
   19448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1944c:	4605      	mov	r5, r0
   1944e:	460e      	mov	r6, r1
	return list->head == list;
   19450:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   19452:	4298      	cmp	r0, r3
   19454:	d015      	beq.n	19482 <add_event+0x3a>
   19456:	4614      	mov	r4, r2
   19458:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   1945a:	b193      	cbz	r3, 19482 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1945c:	6898      	ldr	r0, [r3, #8]
   1945e:	f7ff ffbd 	bl	193dc <poller_thread>
   19462:	4680      	mov	r8, r0
   19464:	4620      	mov	r0, r4
   19466:	f7ff ffb9 	bl	193dc <poller_thread>
   1946a:	4607      	mov	r7, r0
   1946c:	4601      	mov	r1, r0
   1946e:	4640      	mov	r0, r8
   19470:	f7ff fd21 	bl	18eb6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   19474:	2800      	cmp	r0, #0
   19476:	dc04      	bgt.n	19482 <add_event+0x3a>
	return list->head == list;
   19478:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1947a:	42a5      	cmp	r5, r4
   1947c:	d10f      	bne.n	1949e <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1947e:	2400      	movs	r4, #0
   19480:	e00d      	b.n	1949e <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   19482:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   19484:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   19486:	6073      	str	r3, [r6, #4]
	tail->next = node;
   19488:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1948a:	606e      	str	r6, [r5, #4]
}
   1948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   19490:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   19492:	6073      	str	r3, [r6, #4]
	node->next = successor;
   19494:	6034      	str	r4, [r6, #0]
	prev->next = node;
   19496:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   19498:	6066      	str	r6, [r4, #4]
			return;
   1949a:	e7f7      	b.n	1948c <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1949c:	2400      	movs	r4, #0
   1949e:	b19c      	cbz	r4, 194c8 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   194a0:	68a0      	ldr	r0, [r4, #8]
   194a2:	f7ff ff9b 	bl	193dc <poller_thread>
   194a6:	4601      	mov	r1, r0
   194a8:	4638      	mov	r0, r7
   194aa:	f7ff fd04 	bl	18eb6 <z_sched_prio_cmp>
   194ae:	2800      	cmp	r0, #0
   194b0:	dcee      	bgt.n	19490 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   194b2:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   194b4:	686b      	ldr	r3, [r5, #4]
   194b6:	429c      	cmp	r4, r3
   194b8:	d0f0      	beq.n	1949c <add_event+0x54>
   194ba:	6824      	ldr	r4, [r4, #0]
   194bc:	2c00      	cmp	r4, #0
   194be:	d0ee      	beq.n	1949e <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   194c0:	2a00      	cmp	r2, #0
   194c2:	d1ec      	bne.n	1949e <add_event+0x56>
   194c4:	4614      	mov	r4, r2
   194c6:	e7ea      	b.n	1949e <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   194c8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   194ca:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   194cc:	6073      	str	r3, [r6, #4]
	tail->next = node;
   194ce:	601e      	str	r6, [r3, #0]
	list->tail = node;
   194d0:	606e      	str	r6, [r5, #4]
}
   194d2:	e7db      	b.n	1948c <add_event+0x44>

000194d4 <register_event>:
{
   194d4:	b538      	push	{r3, r4, r5, lr}
   194d6:	4604      	mov	r4, r0
   194d8:	460d      	mov	r5, r1
	switch (event->type) {
   194da:	7b43      	ldrb	r3, [r0, #13]
   194dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   194e0:	3b01      	subs	r3, #1
   194e2:	2b07      	cmp	r3, #7
   194e4:	d80b      	bhi.n	194fe <register_event+0x2a>
   194e6:	e8df f003 	tbb	[pc, r3]
   194ea:	0413      	.short	0x0413
   194ec:	0a0a0c0a 	.word	0x0a0a0c0a
   194f0:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   194f2:	6900      	ldr	r0, [r0, #16]
   194f4:	460a      	mov	r2, r1
   194f6:	4621      	mov	r1, r4
   194f8:	3010      	adds	r0, #16
   194fa:	f7ff ffa5 	bl	19448 <add_event>
	event->poller = poller;
   194fe:	60a5      	str	r5, [r4, #8]
}
   19500:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   19502:	6900      	ldr	r0, [r0, #16]
   19504:	460a      	mov	r2, r1
   19506:	4621      	mov	r1, r4
   19508:	3010      	adds	r0, #16
   1950a:	f7ff ff9d 	bl	19448 <add_event>
		break;
   1950e:	e7f6      	b.n	194fe <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   19510:	460a      	mov	r2, r1
   19512:	4601      	mov	r1, r0
   19514:	6900      	ldr	r0, [r0, #16]
   19516:	f7ff ff97 	bl	19448 <add_event>
		break;
   1951a:	e7f0      	b.n	194fe <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   1951c:	6900      	ldr	r0, [r0, #16]
   1951e:	460a      	mov	r2, r1
   19520:	4621      	mov	r1, r4
   19522:	3024      	adds	r0, #36	; 0x24
   19524:	f7ff ff90 	bl	19448 <add_event>
		break;
   19528:	e7e9      	b.n	194fe <register_event+0x2a>

0001952a <register_events>:
{
   1952a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1952e:	b083      	sub	sp, #12
   19530:	4680      	mov	r8, r0
   19532:	460f      	mov	r7, r1
   19534:	4691      	mov	r9, r2
   19536:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   19538:	2500      	movs	r5, #0
	int events_registered = 0;
   1953a:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   1953c:	e00a      	b.n	19554 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   1953e:	f1ba 0f00 	cmp.w	sl, #0
   19542:	d102      	bne.n	1954a <register_events+0x20>
   19544:	f899 3000 	ldrb.w	r3, [r9]
   19548:	bb2b      	cbnz	r3, 19596 <register_events+0x6c>
	__asm__ volatile(
   1954a:	f386 8811 	msr	BASEPRI, r6
   1954e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19552:	3501      	adds	r5, #1
   19554:	42bd      	cmp	r5, r7
   19556:	da25      	bge.n	195a4 <register_events+0x7a>
	__asm__ volatile(
   19558:	f04f 0340 	mov.w	r3, #64	; 0x40
   1955c:	f3ef 8611 	mrs	r6, BASEPRI
   19560:	f383 8812 	msr	BASEPRI_MAX, r3
   19564:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   19568:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1956c:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   19570:	a901      	add	r1, sp, #4
   19572:	4620      	mov	r0, r4
   19574:	f7ff ff01 	bl	1937a <is_condition_met>
   19578:	2800      	cmp	r0, #0
   1957a:	d0e0      	beq.n	1953e <register_events+0x14>
	event->poller = NULL;
   1957c:	2100      	movs	r1, #0
   1957e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   19580:	68e3      	ldr	r3, [r4, #12]
   19582:	f3c3 3286 	ubfx	r2, r3, #14, #7
   19586:	9801      	ldr	r0, [sp, #4]
   19588:	4302      	orrs	r2, r0
   1958a:	f362 3394 	bfi	r3, r2, #14, #7
   1958e:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   19590:	f889 1000 	strb.w	r1, [r9]
   19594:	e7d9      	b.n	1954a <register_events+0x20>
			register_event(&events[ii], poller);
   19596:	4649      	mov	r1, r9
   19598:	4620      	mov	r0, r4
   1959a:	f7ff ff9b 	bl	194d4 <register_event>
			events_registered += 1;
   1959e:	f10b 0b01 	add.w	fp, fp, #1
   195a2:	e7d2      	b.n	1954a <register_events+0x20>
}
   195a4:	4658      	mov	r0, fp
   195a6:	b003      	add	sp, #12
   195a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000195ac <signal_poller>:
{
   195ac:	b538      	push	{r3, r4, r5, lr}
   195ae:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   195b0:	6880      	ldr	r0, [r0, #8]
   195b2:	f7ff ff13 	bl	193dc <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   195b6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   195b8:	f013 0f02 	tst.w	r3, #2
   195bc:	d025      	beq.n	1960a <signal_poller+0x5e>
   195be:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   195c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   195c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   195c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   195c8:	bf08      	it	eq
   195ca:	f112 0f02 	cmneq.w	r2, #2
   195ce:	d01e      	beq.n	1960e <signal_poller+0x62>
	z_unpend_thread(thread);
   195d0:	f7ff fcc5 	bl	18f5e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   195d4:	2d08      	cmp	r5, #8
   195d6:	d00a      	beq.n	195ee <signal_poller+0x42>
   195d8:	2300      	movs	r3, #0
   195da:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   195de:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   195e0:	f013 0f1f 	tst.w	r3, #31
   195e4:	d108      	bne.n	195f8 <signal_poller+0x4c>
	return node->next != NULL;
   195e6:	69a3      	ldr	r3, [r4, #24]
   195e8:	b123      	cbz	r3, 195f4 <signal_poller+0x48>
   195ea:	2300      	movs	r3, #0
   195ec:	e005      	b.n	195fa <signal_poller+0x4e>
   195ee:	f06f 0303 	mvn.w	r3, #3
   195f2:	e7f2      	b.n	195da <signal_poller+0x2e>
   195f4:	2301      	movs	r3, #1
   195f6:	e000      	b.n	195fa <signal_poller+0x4e>
   195f8:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   195fa:	b90b      	cbnz	r3, 19600 <signal_poller+0x54>
		return 0;
   195fc:	2000      	movs	r0, #0
   195fe:	e005      	b.n	1960c <signal_poller+0x60>
	z_ready_thread(thread);
   19600:	4620      	mov	r0, r4
   19602:	f7ff fcd1 	bl	18fa8 <z_ready_thread>
	return 0;
   19606:	2000      	movs	r0, #0
   19608:	e000      	b.n	1960c <signal_poller+0x60>
		return 0;
   1960a:	2000      	movs	r0, #0
}
   1960c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1960e:	f06f 000a 	mvn.w	r0, #10
   19612:	e7fb      	b.n	1960c <signal_poller+0x60>

00019614 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   19614:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   19616:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   19618:	7823      	ldrb	r3, [r4, #0]
   1961a:	b173      	cbz	r3, 1963a <signal_triggered_work+0x26>
   1961c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   19620:	b15d      	cbz	r5, 1963a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   19622:	f1a4 0614 	sub.w	r6, r4, #20
   19626:	f104 0014 	add.w	r0, r4, #20
   1962a:	f7ff fe0b 	bl	19244 <z_abort_timeout>
		twork->poll_result = 0;
   1962e:	2300      	movs	r3, #0
   19630:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   19632:	4631      	mov	r1, r6
   19634:	4628      	mov	r0, r5
   19636:	f7ff fbdc 	bl	18df2 <z_work_submit_to_queue>
	}

	return 0;
}
   1963a:	2000      	movs	r0, #0
   1963c:	bd70      	pop	{r4, r5, r6, pc}

0001963e <signal_poll_event>:
{
   1963e:	b570      	push	{r4, r5, r6, lr}
   19640:	4604      	mov	r4, r0
   19642:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   19644:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   19646:	b1d6      	cbz	r6, 1967e <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   19648:	7873      	ldrb	r3, [r6, #1]
   1964a:	2b01      	cmp	r3, #1
   1964c:	d00d      	beq.n	1966a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   1964e:	2b02      	cmp	r3, #2
   19650:	d012      	beq.n	19678 <signal_poll_event+0x3a>
		poller->is_polling = false;
   19652:	2000      	movs	r0, #0
   19654:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   19656:	2300      	movs	r3, #0
   19658:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   1965a:	68e3      	ldr	r3, [r4, #12]
   1965c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   19660:	432a      	orrs	r2, r5
   19662:	f362 3394 	bfi	r3, r2, #14, #7
   19666:	60e3      	str	r3, [r4, #12]
}
   19668:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   1966a:	f7ff ff9f 	bl	195ac <signal_poller>
		poller->is_polling = false;
   1966e:	2300      	movs	r3, #0
   19670:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   19672:	4298      	cmp	r0, r3
   19674:	daef      	bge.n	19656 <signal_poll_event+0x18>
   19676:	e7f7      	b.n	19668 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   19678:	f7ff ffcc 	bl	19614 <signal_triggered_work>
   1967c:	e7f7      	b.n	1966e <signal_poll_event+0x30>
	int retcode = 0;
   1967e:	2000      	movs	r0, #0
   19680:	e7e9      	b.n	19656 <signal_poll_event+0x18>

00019682 <z_handle_obj_poll_events>:
{
   19682:	b508      	push	{r3, lr}
   19684:	4603      	mov	r3, r0
	return list->head == list;
   19686:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   19688:	4283      	cmp	r3, r0
   1968a:	d008      	beq.n	1969e <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   1968c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1968e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   19690:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19692:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19694:	2300      	movs	r3, #0
   19696:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   19698:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   1969a:	f7ff ffd0 	bl	1963e <signal_poll_event>
}
   1969e:	bd08      	pop	{r3, pc}

000196a0 <z_heap_aligned_alloc>:
{
   196a0:	b5d0      	push	{r4, r6, r7, lr}
   196a2:	b082      	sub	sp, #8
   196a4:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   196a6:	2300      	movs	r3, #0
   196a8:	3204      	adds	r2, #4
   196aa:	d20e      	bcs.n	196ca <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   196ac:	b97b      	cbnz	r3, 196ce <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   196ae:	2600      	movs	r6, #0
   196b0:	2700      	movs	r7, #0
   196b2:	e9cd 6700 	strd	r6, r7, [sp]
   196b6:	f041 0104 	orr.w	r1, r1, #4
   196ba:	4620      	mov	r0, r4
   196bc:	f7ff f927 	bl	1890e <k_heap_aligned_alloc>
	if (mem == NULL) {
   196c0:	b108      	cbz	r0, 196c6 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   196c2:	f840 4b04 	str.w	r4, [r0], #4
}
   196c6:	b002      	add	sp, #8
   196c8:	bdd0      	pop	{r4, r6, r7, pc}
   196ca:	2301      	movs	r3, #1
   196cc:	e7ee      	b.n	196ac <z_heap_aligned_alloc+0xc>
		return NULL;
   196ce:	2000      	movs	r0, #0
   196d0:	e7f9      	b.n	196c6 <z_heap_aligned_alloc+0x26>

000196d2 <k_free>:
	if (ptr != NULL) {
   196d2:	b130      	cbz	r0, 196e2 <k_free+0x10>
{
   196d4:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   196d6:	1f01      	subs	r1, r0, #4
   196d8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   196dc:	f7ff f96d 	bl	189ba <k_heap_free>
}
   196e0:	bd08      	pop	{r3, pc}
   196e2:	4770      	bx	lr

000196e4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   196e4:	4770      	bx	lr
	...
